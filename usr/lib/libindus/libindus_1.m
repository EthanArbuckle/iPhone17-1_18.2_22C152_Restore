uint64_t XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofGalileoEphemeris>,XofGalileoEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  double v28;
  void **v29;
  double v30;
  void **v31;
  uint64_t v32;
  void *__p[2];
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  char __str[4];
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x263EF8340];
  v7 = a4 + 48 * (int)a6;
  v9 = *(unsigned __int8 *)(v7 + 18);
  v8 = (unsigned __int8 *)(v7 + 18);
  if (!v9) {
    return 1;
  }
  v15 = 0;
  v32 = (int)a6;
  v16 = a7 + 1;
  while (1)
  {
    bzero(__str, 0x428uLL);
    XofGalileoEphemerisCodec::XofGalileoEphemerisCodec((XofGalileoEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (!XofGenericCodec::Decode<0ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a5, a2, a3))
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 5;
      }
      bzero(__str, 0x3C6uLL);
      v24 = mach_continuous_time();
      if (a6 > 7) {
        v25 = "   ";
      }
      else {
        v25 = off_2655E6F78[v32];
      }
      v28 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v25);
      if ((SBYTE7(v34) & 0x80u) == 0) {
        v29 = __p;
      }
      else {
        v29 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Broadcast Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v28 * (double)v24), "GNC", 87, "DecodeSVs", (const char *)v29, v15 + 1);
      if (SBYTE7(v34) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_36;
    }
    v17 = *(unsigned __int8 *)(a5 + 3);
    v18 = *v16;
    if (*v16)
    {
      v19 = v16;
      do
      {
        v20 = *(unsigned __int8 *)(v18 + 28);
        v21 = v20 >= v17;
        if (v20 >= v17) {
          v22 = (uint64_t *)v18;
        }
        else {
          v22 = (uint64_t *)(v18 + 8);
        }
        if (v21) {
          v19 = (void *)v18;
        }
        v18 = *v22;
      }
      while (*v22);
      if (v19 != v16 && v17 >= *((unsigned __int8 *)v19 + 28)) {
        break;
      }
    }
    XofGalileoEphemeris::XofGalileoEphemeris((uint64_t)__p, a5);
    __str[0] = v17;
    v41 = v35;
    v42 = v36;
    v43 = v37;
    v39 = *(_OWORD *)__p;
    v40 = v34;
    std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofGpsQzssEphemeris>>(a7, v17, (uint64_t)__str);
    if (++v15 >= *v8) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config < 2) {
    return 5;
  }
  bzero(__str, 0x3C6uLL);
  v26 = mach_continuous_time();
  if (a6 > 7) {
    v27 = "   ";
  }
  else {
    v27 = off_2655E6F78[v32];
  }
  v30 = *(double *)&g_MacClockTicksToMsRelation;
  std::string::basic_string[abi:ne180100]<0>(__p, v27);
  if ((SBYTE7(v34) & 0x80u) == 0) {
    v31 = __p;
  }
  else {
    v31 = (void **)__p[0];
  }
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Ephemeris data: Satellite Id = [ %s ]\n", (unint64_t)(v30 * (double)v26), "GNC", 87, "DecodeSVs", (const char *)v31);
  if (SBYTE7(v34) < 0) {
    operator delete(__p[0]);
  }
LABEL_36:
  gnssOsa_PrintLog(__str, 2, 1, 0);
  return 5;
}

uint64_t XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofGlonassBrdcastEphemeris>,XofGlonassBrdcastEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t **a7)
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  v61 = (unsigned char *)(a4 + 48 * (int)a6 + 18);
  if (!*v61) {
    return 1;
  }
  int v10 = 0;
  uint64_t v35 = (int)a6;
  v63 = a7 + 1;
  uint64_t v89 = a5 + 8;
  uint64_t v88 = a5 + 40;
  v66 = (unsigned __int16 *)(a5 + 64);
  v67 = (unsigned __int8 *)(a5 + 32);
  uint64_t v87 = a5 + 72;
  v96 = (int *)(a5 + 96);
  uint64_t v86 = a5 + 112;
  uint64_t v85 = a5 + 144;
  v64 = (char *)(a5 + 168);
  v65 = (__int16 *)(a5 + 136);
  uint64_t v84 = a5 + 176;
  v62 = (unsigned __int8 *)(a5 + 200);
  uint64_t v83 = a5 + 208;
  uint64_t v82 = a5 + 240;
  v59 = (unsigned __int8 *)(a5 + 264);
  v60 = (unsigned __int8 *)(a5 + 232);
  uint64_t v81 = a5 + 272;
  uint64_t v80 = a5 + 304;
  v57 = (unsigned __int8 *)(a5 + 328);
  v58 = (unsigned __int8 *)(a5 + 296);
  uint64_t v79 = a5 + 336;
  v95 = (int *)(a5 + 360);
  uint64_t v78 = a5 + 376;
  v94 = (int *)(a5 + 400);
  uint64_t v77 = a5 + 416;
  v93 = (int *)(a5 + 440);
  uint64_t v76 = a5 + 456;
  v92 = (int *)(a5 + 480);
  uint64_t v75 = a5 + 496;
  v91 = (int *)(a5 + 520);
  uint64_t v74 = a5 + 536;
  v90 = (int *)(a5 + 560);
  uint64_t v73 = a5 + 576;
  uint64_t v72 = a5 + 608;
  v55 = (char *)(a5 + 632);
  v56 = (char *)(a5 + 600);
  uint64_t v70 = a5 + 672;
  uint64_t v71 = a5 + 640;
  v53 = (unsigned __int8 *)(a5 + 696);
  v54 = (char *)(a5 + 664);
  uint64_t v69 = a5 + 704;
  while (1)
  {
    int v68 = v10;
    bzero(__str, 0x2D8uLL);
    XofGlonassBrdcastEphemerisCodec::XofGlonassBrdcastEphemerisCodec((XofGlonassBrdcastEphemerisCodec *)__str);
    *(_DWORD *)a5 = *(_DWORD *)__str;
    if (*(char *)(a5 + 31) < 0) {
      operator delete(*(void **)v89);
    }
    *(_OWORD *)uint64_t v89 = v100;
    *(void *)(v89 + 16) = v101;
    HIBYTE(v101) = 0;
    LOBYTE(v100) = 0;
    *(_DWORD *)(a5 + 32) = v102;
    if (*(char *)(a5 + 63) < 0) {
      operator delete(*(void **)v88);
    }
    *(_OWORD *)uint64_t v88 = v103;
    *(void *)(v88 + 16) = v104;
    HIBYTE(v104) = 0;
    LOBYTE(v103) = 0;
    *(void *)(a5 + 64) = v105;
    if (*(char *)(a5 + 95) < 0) {
      operator delete(*(void **)v87);
    }
    *(_OWORD *)uint64_t v87 = v106;
    *(void *)(v87 + 16) = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    *(_OWORD *)v96 = v108;
    if (*(char *)(a5 + 135) < 0) {
      operator delete(*(void **)v86);
    }
    *(_OWORD *)uint64_t v86 = v109;
    *(void *)(v86 + 16) = v110;
    HIBYTE(v110) = 0;
    LOBYTE(v109) = 0;
    *(void *)(a5 + 136) = v111;
    if (*(char *)(a5 + 167) < 0) {
      operator delete(*(void **)v85);
    }
    *(_OWORD *)uint64_t v85 = v112;
    *(void *)(v85 + 16) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(v112) = 0;
    *(_DWORD *)(a5 + 168) = v114;
    if (*(char *)(a5 + 199) < 0) {
      operator delete(*(void **)v84);
    }
    *(_OWORD *)uint64_t v84 = v115;
    *(void *)(v84 + 16) = v116;
    HIBYTE(v116) = 0;
    LOBYTE(v115) = 0;
    *(_DWORD *)(a5 + 200) = v117;
    if (*(char *)(a5 + 231) < 0) {
      operator delete(*(void **)v83);
    }
    *(_OWORD *)uint64_t v83 = v118;
    *(void *)(v83 + 16) = v119;
    HIBYTE(v119) = 0;
    LOBYTE(v118) = 0;
    *(_DWORD *)(a5 + 232) = v120;
    if (*(char *)(a5 + 263) < 0) {
      operator delete(*(void **)v82);
    }
    *(_OWORD *)uint64_t v82 = v121;
    *(void *)(v82 + 16) = v122;
    HIBYTE(v122) = 0;
    LOBYTE(v121) = 0;
    *(_DWORD *)(a5 + 264) = v123;
    if (*(char *)(a5 + 295) < 0) {
      operator delete(*(void **)v81);
    }
    *(_OWORD *)uint64_t v81 = v124;
    *(void *)(v81 + 16) = v125;
    HIBYTE(v125) = 0;
    LOBYTE(v124) = 0;
    *(_DWORD *)(a5 + 296) = v126;
    if (*(char *)(a5 + 327) < 0) {
      operator delete(*(void **)v80);
    }
    *(_OWORD *)uint64_t v80 = v127;
    *(void *)(v80 + 16) = v128;
    HIBYTE(v128) = 0;
    LOBYTE(v127) = 0;
    *(_DWORD *)(a5 + 328) = v129;
    if (*(char *)(a5 + 359) < 0) {
      operator delete(*(void **)v79);
    }
    *(_OWORD *)uint64_t v79 = v130;
    *(void *)(v79 + 16) = v131;
    HIBYTE(v131) = 0;
    LOBYTE(v130) = 0;
    *(_OWORD *)v95 = v132;
    if (*(char *)(a5 + 399) < 0) {
      operator delete(*(void **)v78);
    }
    *(_OWORD *)uint64_t v78 = v133;
    *(void *)(v78 + 16) = v134;
    HIBYTE(v134) = 0;
    LOBYTE(v133) = 0;
    *(_OWORD *)v94 = v135;
    if (*(char *)(a5 + 439) < 0) {
      operator delete(*(void **)v77);
    }
    *(_OWORD *)uint64_t v77 = v136;
    *(void *)(v77 + 16) = v137;
    HIBYTE(v137) = 0;
    LOBYTE(v136) = 0;
    *(_OWORD *)v93 = v138;
    if (*(char *)(a5 + 479) < 0) {
      operator delete(*(void **)v76);
    }
    *(_OWORD *)uint64_t v76 = v139;
    *(void *)(v76 + 16) = v140;
    HIBYTE(v140) = 0;
    LOBYTE(v139) = 0;
    *(_OWORD *)v92 = v141;
    if (*(char *)(a5 + 519) < 0) {
      operator delete(*(void **)v75);
    }
    *(_OWORD *)uint64_t v75 = v142;
    *(void *)(v75 + 16) = v143;
    HIBYTE(v143) = 0;
    LOBYTE(v142) = 0;
    *(_OWORD *)v91 = v144;
    if (*(char *)(a5 + 559) < 0) {
      operator delete(*(void **)v74);
    }
    *(_OWORD *)uint64_t v74 = v145;
    *(void *)(v74 + 16) = v146;
    HIBYTE(v146) = 0;
    LOBYTE(v145) = 0;
    *(_OWORD *)v90 = v147;
    if (*(char *)(a5 + 599) < 0) {
      operator delete(*(void **)v73);
    }
    *(_OWORD *)uint64_t v73 = v148;
    *(void *)(v73 + 16) = v149;
    HIBYTE(v149) = 0;
    LOBYTE(v148) = 0;
    *(_DWORD *)(a5 + 600) = v150;
    if (*(char *)(a5 + 631) < 0) {
      operator delete(*(void **)v72);
    }
    *(_OWORD *)uint64_t v72 = v151;
    *(void *)(v72 + 16) = v152;
    HIBYTE(v152) = 0;
    LOBYTE(v151) = 0;
    *(_DWORD *)(a5 + 632) = v153;
    if (*(char *)(a5 + 663) < 0) {
      operator delete(*(void **)v71);
    }
    *(_OWORD *)uint64_t v71 = v154;
    *(void *)(v71 + 16) = v155;
    HIBYTE(v155) = 0;
    LOBYTE(v154) = 0;
    *(_DWORD *)(a5 + 664) = v156;
    if (*(char *)(a5 + 695) < 0) {
      operator delete(*(void **)v70);
    }
    *(_OWORD *)uint64_t v70 = v157;
    *(void *)(v70 + 16) = v158;
    HIBYTE(v158) = 0;
    LOBYTE(v157) = 0;
    *(_DWORD *)(a5 + 696) = v159;
    if (*(char *)(a5 + 727) < 0) {
      operator delete(*(void **)v69);
    }
    *(_OWORD *)uint64_t v69 = v160;
    *(void *)(v69 + 16) = v161;
    HIBYTE(v161) = 0;
    LOBYTE(v160) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a5, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v67, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v66, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v96, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v65, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v64, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v62, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v60, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v59, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v58, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v57, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v95, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v94, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v93, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v92, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v91, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v90, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v56, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v55, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v54, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v53, a2, a3) != 1)
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 5;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v27 = mach_continuous_time();
      if (a6 > 7) {
        v28 = "   ";
      }
      else {
        v28 = off_2655E6F78[v35];
      }
      double v29 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v28);
      if (v98 >= 0) {
        v30 = __p;
      }
      else {
        v30 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Broadcast Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v68 + 1);
      if (v98 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_96;
    }
    unsigned int v11 = *(unsigned __int8 *)(a5 + 3);
    v12 = v63;
    v13 = *v63;
    if (*v63)
    {
      v14 = v63;
      v15 = *v63;
      do
      {
        unsigned int v16 = *((unsigned __int8 *)v15 + 28);
        BOOL v17 = v16 >= v11;
        if (v16 >= v11) {
          v18 = (uint64_t **)v15;
        }
        else {
          v18 = (uint64_t **)(v15 + 1);
        }
        if (v17) {
          v14 = (uint64_t **)v15;
        }
        v15 = *v18;
      }
      while (*v18);
      v12 = v63;
      if (v14 != v63 && v11 >= *((unsigned __int8 *)v14 + 28)) {
        break;
      }
    }
    char v19 = *(unsigned char *)(a5 + 35);
    __int16 v20 = *(_WORD *)(a5 + 70);
    int v21 = *(_DWORD *)(a5 + 108);
    char v50 = *(unsigned char *)(a5 + 171);
    __int16 v51 = *(_WORD *)(a5 + 142);
    char v48 = *(unsigned char *)(a5 + 235);
    char v49 = *(unsigned char *)(a5 + 203);
    char v46 = *(unsigned char *)(a5 + 299);
    char v47 = *(unsigned char *)(a5 + 267);
    int v44 = *(_DWORD *)(a5 + 372);
    char v45 = *(unsigned char *)(a5 + 331);
    int v42 = *(_DWORD *)(a5 + 452);
    int v43 = *(_DWORD *)(a5 + 412);
    int v40 = *(_DWORD *)(a5 + 532);
    int v41 = *(_DWORD *)(a5 + 492);
    char v38 = *(unsigned char *)(a5 + 603);
    int v39 = *(_DWORD *)(a5 + 572);
    char v37 = *(unsigned char *)(a5 + 635);
    v22 = v12;
    char v23 = *(unsigned char *)(a5 + 667);
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v13;
          unsigned int v24 = *((unsigned __int8 *)v13 + 28);
          if (v24 <= v11) {
            break;
          }
          v13 = *v12;
          v22 = v12;
          if (!*v12) {
            goto LABEL_84;
          }
        }
        if (v24 >= v11) {
          break;
        }
        v13 = v12[1];
        if (!v13)
        {
          v22 = v12 + 1;
          goto LABEL_84;
        }
      }
    }
    else
    {
LABEL_84:
      v25 = operator new(0x50uLL);
      v25[28] = v11;
      v25[32] = v11;
      v25[33] = v19;
      *((_WORD *)v25 + 17) = v20;
      *((_DWORD *)v25 + 9) = v21;
      *((_WORD *)v25 + 20) = v51;
      v25[42] = v50;
      v25[43] = v49;
      v25[44] = v48;
      v25[45] = v47;
      v25[46] = v46;
      v25[47] = v45;
      *((_DWORD *)v25 + 12) = v44;
      *((_DWORD *)v25 + 13) = v43;
      *((_DWORD *)v25 + 14) = v42;
      *((_DWORD *)v25 + 15) = v41;
      *((_DWORD *)v25 + 16) = v40;
      *((_DWORD *)v25 + 17) = v39;
      v25[72] = v38;
      v25[73] = v37;
      v25[74] = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v12, v22, (uint64_t *)v25);
    }
    int v10 = v68 + 1;
    if (v68 + 1 >= *v61) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v31 = mach_continuous_time();
    if (a6 > 7) {
      v32 = "   ";
    }
    else {
      v32 = off_2655E6F78[v35];
    }
    double v33 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v32);
    if (v98 >= 0) {
      v34 = __p;
    }
    else {
      v34 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Ephemeris data: Satellite Id = [ %s ]\n", (unint64_t)(v33 * (double)v31), "GNC", 87, "DecodeSVs", (const char *)v34);
    if (v98 < 0) {
      operator delete(__p[0]);
    }
LABEL_96:
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofBeidouEphemeris>,XofBeidouEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 48 * (int)a6;
  int v9 = *(unsigned __int8 *)(v7 + 18);
  v8 = (unsigned __int8 *)(v7 + 18);
  if (!v9) {
    return 1;
  }
  int v15 = 0;
  uint64_t v32 = (int)a6;
  unsigned int v16 = a7 + 1;
  while (1)
  {
    bzero(__str, 0x700uLL);
    XofBeidouEphemerisCodec::XofBeidouEphemerisCodec((XofBeidouEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)__str);
    if (!XofGenericCodec::Decode<0ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(a5, a2, a3))
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 5;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v24 = mach_continuous_time();
      if (a6 > 7) {
        v25 = "   ";
      }
      else {
        v25 = off_2655E6F78[v32];
      }
      double v28 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v25);
      if ((SBYTE7(v34) & 0x80u) == 0) {
        double v29 = __p;
      }
      else {
        double v29 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Broadcast Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v28 * (double)v24), "GNC", 87, "DecodeSVs", (const char *)v29, v15 + 1);
      if (SBYTE7(v34) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_36;
    }
    unsigned int v17 = *(unsigned __int8 *)(a5 + 3);
    uint64_t v18 = *v16;
    if (*v16)
    {
      char v19 = v16;
      do
      {
        unsigned int v20 = *(unsigned __int8 *)(v18 + 32);
        BOOL v21 = v20 >= v17;
        if (v20 >= v17) {
          v22 = (uint64_t *)v18;
        }
        else {
          v22 = (uint64_t *)(v18 + 8);
        }
        if (v21) {
          char v19 = (void *)v18;
        }
        uint64_t v18 = *v22;
      }
      while (*v22);
      if (v19 != v16 && v17 >= *((unsigned __int8 *)v19 + 32)) {
        break;
      }
    }
    XofBeidouEphemeris::XofBeidouEphemeris((uint64_t)__p, a5);
    __str[0] = v17;
    long long v49 = v39;
    long long v50 = v40;
    uint64_t v51 = v41;
    long long v45 = v35;
    long long v46 = v36;
    long long v47 = v37;
    long long v48 = v38;
    long long v43 = *(_OWORD *)__p;
    long long v44 = v34;
    std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofBeidouEphemeris>>(a7, v17, (uint64_t)__str);
    if (++v15 >= *v8) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config < 2) {
    return 5;
  }
  bzero(__str, 0x3C6uLL);
  uint64_t v26 = mach_continuous_time();
  if (a6 > 7) {
    uint64_t v27 = "   ";
  }
  else {
    uint64_t v27 = off_2655E6F78[v32];
  }
  double v30 = *(double *)&g_MacClockTicksToMsRelation;
  std::string::basic_string[abi:ne180100]<0>(__p, v27);
  if ((SBYTE7(v34) & 0x80u) == 0) {
    uint64_t v31 = __p;
  }
  else {
    uint64_t v31 = (void **)__p[0];
  }
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Ephemeris data: Satellite Id = [ %s ]\n", (unint64_t)(v30 * (double)v26), "GNC", 87, "DecodeSVs", (const char *)v31);
  if (SBYTE7(v34) < 0) {
    operator delete(__p[0]);
  }
LABEL_36:
  gnssOsa_PrintLog(__str, 2, 1, 0);
  return 5;
}

uint64_t XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofNavicEphemeris>,XofNavicEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 48 * (int)a6;
  int v9 = *(unsigned __int8 *)(v7 + 18);
  v8 = (unsigned __int8 *)(v7 + 18);
  if (!v9) {
    return 1;
  }
  int v15 = 0;
  uint64_t v32 = (int)a6;
  unsigned int v16 = a7 + 1;
  while (1)
  {
    bzero(__str, 0x410uLL);
    XofNavicEphemerisCodec::XofNavicEphemerisCodec((XofNavicEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (!XofNavicEphemerisCodec::Decode(a5, a2, a3))
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 5;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v24 = mach_continuous_time();
      if (a6 > 7) {
        v25 = "   ";
      }
      else {
        v25 = off_2655E6F78[v32];
      }
      double v28 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v25);
      if ((SBYTE7(v34) & 0x80u) == 0) {
        double v29 = __p;
      }
      else {
        double v29 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Broadcast Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v28 * (double)v24), "GNC", 87, "DecodeSVs", (const char *)v29, v15 + 1);
      if (SBYTE7(v34) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_36;
    }
    unsigned int v17 = *(unsigned __int8 *)(a5 + 3);
    uint64_t v18 = *v16;
    if (*v16)
    {
      char v19 = v16;
      do
      {
        unsigned int v20 = *(unsigned __int8 *)(v18 + 28);
        BOOL v21 = v20 >= v17;
        if (v20 >= v17) {
          v22 = (uint64_t *)v18;
        }
        else {
          v22 = (uint64_t *)(v18 + 8);
        }
        if (v21) {
          char v19 = (void *)v18;
        }
        uint64_t v18 = *v22;
      }
      while (*v22);
      if (v19 != v16 && v17 >= *((unsigned __int8 *)v19 + 28)) {
        break;
      }
    }
    XofNavicEphemeris::XofNavicEphemeris((uint64_t)__p, a5);
    __str[0] = v17;
    long long v41 = v35;
    long long v42 = v36;
    int v43 = v37;
    long long v39 = *(_OWORD *)__p;
    long long v40 = v34;
    std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofNavicEphemeris>>(a7, v17, (uint64_t)__str);
    if (++v15 >= *v8) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config < 2) {
    return 5;
  }
  bzero(__str, 0x3C6uLL);
  uint64_t v26 = mach_continuous_time();
  if (a6 > 7) {
    uint64_t v27 = "   ";
  }
  else {
    uint64_t v27 = off_2655E6F78[v32];
  }
  double v30 = *(double *)&g_MacClockTicksToMsRelation;
  std::string::basic_string[abi:ne180100]<0>(__p, v27);
  if ((SBYTE7(v34) & 0x80u) == 0) {
    uint64_t v31 = __p;
  }
  else {
    uint64_t v31 = (void **)__p[0];
  }
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Ephemeris data: Satellite Id = [ %s ]\n", (unint64_t)(v30 * (double)v26), "GNC", 87, "DecodeSVs", (const char *)v31);
  if (SBYTE7(v34) < 0) {
    operator delete(__p[0]);
  }
LABEL_36:
  gnssOsa_PrintLog(__str, 2, 1, 0);
  return 5;
}

uint64_t XofExtEph::Decode(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  v8 = (uint64_t **)v1;
  v21[136] = *MEMORY[0x263EF8340];
  bzero(v21, 0x440uLL);
  XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec((XofGpsQzssEphemerisCodec *)v21);
  int v9 = XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,XofGpsQzssEphemerisCodec>((uint64_t)v8, v7, v3, v5, (uint64_t)v21, 0, v8);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v21);
  if (v9 != 1) {
    return 5;
  }
  bzero(v20, 0x440uLL);
  XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec((XofGpsQzssEphemerisCodec *)v20);
  int v10 = XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,XofGpsQzssEphemerisCodec>((uint64_t)v8, v7, v3, v5, (uint64_t)v20, 2, v8 + 9);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v20);
  if (v10 != 1) {
    return 5;
  }
  bzero(v19, 0x428uLL);
  XofGalileoEphemerisCodec::XofGalileoEphemerisCodec((XofGalileoEphemerisCodec *)v19);
  int v11 = XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofGalileoEphemeris>>,XofGalileoEphemerisCodec>((uint64_t)v8, v7, v3, v5, (uint64_t)v19, 3, v8 + 6);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v19);
  if (v11 != 1) {
    return 5;
  }
  bzero(v18, 0x440uLL);
  XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec((XofGpsQzssEphemerisCodec *)v18);
  int v12 = XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,XofGpsQzssEphemerisCodec>((uint64_t)v8, v7, v3, v5, (uint64_t)v18, 4, v8 + 3);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v18);
  if (v12 != 1) {
    return 5;
  }
  bzero(v17, 0x700uLL);
  XofBeidouEphemerisCodec::XofBeidouEphemerisCodec((XofBeidouEphemerisCodec *)v17);
  int v13 = XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofBeidouEphemeris>>,XofBeidouEphemerisCodec>((uint64_t)v8, v7, v3, v5, (uint64_t)v17, 5, v8 + 12);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)v17);
  if (v13 != 1) {
    return 5;
  }
  bzero(&v16, 0x410uLL);
  XofNavicEphemerisCodec::XofNavicEphemerisCodec((XofNavicEphemerisCodec *)&v16);
  int v14 = XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofNavicEphemeris>>,XofNavicEphemerisCodec>((uint64_t)v8, v7, v3, v5, (uint64_t)&v16, 6, v8 + 15);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)&v16);
  if (v14 == 1) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263CA7934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,XofGpsQzssEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, signed int a6, uint64_t **a7)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 16 + 48 * a6;
  unsigned int v8 = *(unsigned __int8 *)(v7 + 4);
  uint64_t v51 = (unsigned __int8 *)(v7 + 4);
  if (!*(unsigned char *)(v7 + 4)) {
    return 1;
  }
  unsigned int v10 = 0;
  uint64_t v49 = a6;
  uint64_t v11 = a4 + 16 + 48 * a6;
  unsigned int v12 = *(unsigned __int8 *)(v11 + 3);
  int v13 = a7 + 1;
  v55 = (unsigned __int8 *)(v11 + 3);
  v54 = (unsigned char *)(v11 + 5);
  while (1)
  {
    ++v10;
    if (v12) {
      break;
    }
LABEL_43:
    if (v10 >= v8) {
      return 1;
    }
  }
  unsigned int v14 = 0;
  int v52 = v10;
  unsigned int v15 = v10;
  while (1)
  {
    bzero(__str, 0x440uLL);
    XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec((XofGpsQzssEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (!XofGpsQzssEphemerisCodec::Decode(a5, a2, a3)) {
      break;
    }
    unsigned int v16 = *(unsigned __int8 *)(a5 + 3);
    unsigned int v17 = *v13;
    if (!*v13) {
      goto LABEL_17;
    }
    uint64_t v18 = v13;
    do
    {
      unsigned int v19 = *((unsigned __int8 *)v17 + 32);
      BOOL v20 = v19 >= v15;
      if (v19 >= v15) {
        BOOL v21 = (uint64_t **)v17;
      }
      else {
        BOOL v21 = (uint64_t **)(v17 + 1);
      }
      if (v20) {
        uint64_t v18 = (uint64_t **)v17;
      }
      unsigned int v17 = *v21;
    }
    while (*v21);
    if (v18 != v13 && *((unsigned __int8 *)v18 + 32) <= v15)
    {
      long long v34 = v18[6];
      uint64_t v32 = (uint64_t *)(v18 + 6);
      double v33 = v34;
      if (v34)
      {
        long long v35 = v32;
        do
        {
          unsigned int v36 = *((unsigned __int8 *)v33 + 28);
          BOOL v37 = v36 >= v16;
          if (v36 >= v16) {
            long long v38 = (uint64_t **)v33;
          }
          else {
            long long v38 = (uint64_t **)(v33 + 1);
          }
          if (v37) {
            long long v35 = v33;
          }
          double v33 = *v38;
        }
        while (*v38);
        if (v35 != v32 && v16 >= *((unsigned __int8 *)v35 + 28))
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v45 = mach_continuous_time();
            if (a6 > 7) {
              long long v46 = "   ";
            }
            else {
              long long v46 = off_2655E6F78[v49];
            }
            double v47 = *(double *)&g_MacClockTicksToMsRelation;
            std::string::basic_string[abi:ne180100]<0>(__p, v46);
            if (v61[7] >= 0) {
              long long v48 = __p;
            }
            else {
              long long v48 = (void **)__p[0];
            }
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Extended Ephemeris data, constellation Id = [ %s ], satellite Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v47 * (double)v45), "GNC", 87, "DecodeSVs", (const char *)v48, v16, v52);
            if ((v61[7] & 0x80000000) != 0) {
              operator delete(__p[0]);
            }
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          return 5;
        }
      }
      long long v39 = v32 - 1;
      XofGpsQzssEphemeris::XofGpsQzssEphemeris((uint64_t)__p, a5);
      long long v58 = *(_OWORD *)__p;
      *(_OWORD *)&v63[26] = *(_OWORD *)&v61[10];
      *(_OWORD *)&v63[42] = *(_OWORD *)&v61[26];
      *(_OWORD *)&v63[56] = *(_OWORD *)&v61[40];
      __str[0] = v16;
      *(_OWORD *)v63 = *(_OWORD *)__p;
      *(void *)&v63[16] = *(void *)v61;
      *(_WORD *)&v63[24] = *(_WORD *)&v61[8];
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofGpsQzssEphemeris>>(v39, v16, (uint64_t)__str);
    }
    else
    {
LABEL_17:
      *((void *)&v58 + 1) = 0;
      uint64_t v59 = 0;
      *(void *)&long long v58 = (char *)&v58 + 8;
      XofGpsQzssEphemeris::XofGpsQzssEphemeris((uint64_t)__p, a5);
      unsigned char *v54 = BYTE3(__p[0]);
      __str[0] = v16;
      *(_OWORD *)&v63[32] = *(_OWORD *)&v61[16];
      *(_OWORD *)&v63[48] = *(_OWORD *)&v61[32];
      *(void *)&v63[64] = *(void *)&v61[48];
      *(_OWORD *)v63 = *(_OWORD *)__p;
      *(_OWORD *)&v63[16] = *(_OWORD *)v61;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofGpsQzssEphemeris>>((uint64_t *)&v58, v16, (uint64_t)__str);
      __str[0] = v15;
      std::map<unsigned char,XofGpsQzssEphemeris>::map[abi:ne180100]((uint64_t *)&v63[4], (uint64_t)&v58);
      char v22 = __str[0];
      char v23 = *v13;
      uint64_t v24 = v13;
      v25 = v13;
      if (*v13)
      {
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v23;
            unsigned int v26 = *((unsigned __int8 *)v23 + 32);
            if (v26 <= __str[0]) {
              break;
            }
            char v23 = *v25;
            uint64_t v24 = v25;
            if (!*v25) {
              goto LABEL_24;
            }
          }
          if (v26 >= __str[0]) {
            break;
          }
          char v23 = v25[1];
          if (!v23)
          {
            uint64_t v24 = v25 + 1;
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        uint64_t v27 = operator new(0x40uLL);
        uint64_t v29 = *(void *)&v63[4];
        uint64_t v28 = *(void *)&v63[12];
        v27[6] = *(void *)&v63[12];
        double v30 = (char *)(v27 + 6);
        *((unsigned char *)v27 + 32) = v22;
        v27[5] = v29;
        uint64_t v31 = *(void *)&v63[20];
        v27[7] = *(void *)&v63[20];
        if (v31)
        {
          *(void *)(v28 + 16) = v30;
          *(void *)&v63[4] = &v63[12];
          *(void *)&v63[12] = 0;
          *(void *)&v63[20] = 0;
        }
        else
        {
          v27[5] = v30;
        }
        std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v25, v24, v27);
      }
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v63[4], *(void **)&v63[12]);
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v58, *((void **)&v58 + 1));
    }
    ++v14;
    unsigned int v12 = *v55;
    if (v14 >= v12)
    {
      unsigned int v10 = v52;
      unsigned int v8 = *v51;
      goto LABEL_43;
    }
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v41 = mach_continuous_time();
    if (a6 > 7) {
      long long v42 = "   ";
    }
    else {
      long long v42 = off_2655E6F78[v49];
    }
    double v43 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v42);
    if (v61[7] >= 0) {
      uint64_t v44 = __p;
    }
    else {
      uint64_t v44 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Extended Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v43 * (double)v41), "GNC", 68, "DecodeSVs", (const char *)v44, v14 + 1, v52);
    if ((v61[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 5;
}

void sub_263CA7EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v43, a43);
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&a29, a30);
  _Unwind_Resume(a1);
}

uint64_t XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofGalileoEphemeris>>,XofGalileoEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, signed int a6, uint64_t **a7)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 16 + 48 * a6;
  unsigned int v8 = *(unsigned __int8 *)(v7 + 4);
  uint64_t v51 = (unsigned __int8 *)(v7 + 4);
  if (!*(unsigned char *)(v7 + 4)) {
    return 1;
  }
  unsigned int v10 = 0;
  uint64_t v49 = a6;
  uint64_t v11 = a4 + 16 + 48 * a6;
  unsigned int v12 = *(unsigned __int8 *)(v11 + 3);
  int v13 = a7 + 1;
  v55 = (unsigned __int8 *)(v11 + 3);
  v54 = (unsigned char *)(v11 + 5);
  while (1)
  {
    ++v10;
    if (v12) {
      break;
    }
LABEL_43:
    if (v10 >= v8) {
      return 1;
    }
  }
  unsigned int v14 = 0;
  int v52 = v10;
  unsigned int v15 = v10;
  while (1)
  {
    bzero(__str, 0x428uLL);
    XofGalileoEphemerisCodec::XofGalileoEphemerisCodec((XofGalileoEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (!XofGenericCodec::Decode<0ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a5, a2, a3))break; {
    unsigned int v16 = *(unsigned __int8 *)(a5 + 3);
    }
    unsigned int v17 = *v13;
    if (!*v13) {
      goto LABEL_17;
    }
    uint64_t v18 = v13;
    do
    {
      unsigned int v19 = *((unsigned __int8 *)v17 + 32);
      BOOL v20 = v19 >= v15;
      if (v19 >= v15) {
        BOOL v21 = (uint64_t **)v17;
      }
      else {
        BOOL v21 = (uint64_t **)(v17 + 1);
      }
      if (v20) {
        uint64_t v18 = (uint64_t **)v17;
      }
      unsigned int v17 = *v21;
    }
    while (*v21);
    if (v18 != v13 && *((unsigned __int8 *)v18 + 32) <= v15)
    {
      long long v34 = v18[6];
      uint64_t v32 = (uint64_t *)(v18 + 6);
      double v33 = v34;
      if (v34)
      {
        long long v35 = v32;
        do
        {
          unsigned int v36 = *((unsigned __int8 *)v33 + 28);
          BOOL v37 = v36 >= v16;
          if (v36 >= v16) {
            long long v38 = (uint64_t **)v33;
          }
          else {
            long long v38 = (uint64_t **)(v33 + 1);
          }
          if (v37) {
            long long v35 = v33;
          }
          double v33 = *v38;
        }
        while (*v38);
        if (v35 != v32 && v16 >= *((unsigned __int8 *)v35 + 28))
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v45 = mach_continuous_time();
            if (a6 > 7) {
              long long v46 = "   ";
            }
            else {
              long long v46 = off_2655E6F78[v49];
            }
            double v47 = *(double *)&g_MacClockTicksToMsRelation;
            std::string::basic_string[abi:ne180100]<0>(__p, v46);
            if (__p[23] >= 0) {
              long long v48 = __p;
            }
            else {
              long long v48 = *(const char **)__p;
            }
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Extended Ephemeris data, constellation Id = [ %s ], satellite Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v47 * (double)v45), "GNC", 87, "DecodeSVs", v48, v16, v52);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          return 5;
        }
      }
      long long v39 = v32 - 1;
      XofGalileoEphemeris::XofGalileoEphemeris((uint64_t)__p, a5);
      *(_DWORD *)v62 = *(_DWORD *)__p;
      *(_WORD *)&v62[4] = *(_WORD *)&__p[4];
      *(_OWORD *)&v62[10] = *(_OWORD *)&__p[10];
      *(_OWORD *)&v62[26] = *(_OWORD *)&__p[26];
      *(_OWORD *)&v62[42] = *(_OWORD *)&__p[42];
      *(_OWORD *)&v62[56] = *(_OWORD *)&__p[56];
      __str[0] = v16;
      *(_DWORD *)&v62[6] = *(_DWORD *)&__p[6];
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofGpsQzssEphemeris>>(v39, v16, (uint64_t)__str);
    }
    else
    {
LABEL_17:
      v59[0] = 0;
      v59[1] = 0;
      long long v58 = v59;
      XofGalileoEphemeris::XofGalileoEphemeris((uint64_t)__p, a5);
      unsigned char *v54 = __p[21];
      __str[0] = v16;
      *(_OWORD *)&v62[32] = *(_OWORD *)&__p[32];
      *(_OWORD *)&v62[48] = *(_OWORD *)&__p[48];
      *(void *)&v62[64] = *(void *)&__p[64];
      *(_OWORD *)v62 = *(_OWORD *)__p;
      *(_OWORD *)&v62[16] = *(_OWORD *)&__p[16];
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofGpsQzssEphemeris>>((uint64_t *)&v58, v16, (uint64_t)__str);
      __str[0] = v15;
      std::map<unsigned char,XofGalileoEphemeris>::map[abi:ne180100]((uint64_t *)&v62[4], (uint64_t)&v58);
      char v22 = __str[0];
      char v23 = *v13;
      uint64_t v24 = v13;
      v25 = v13;
      if (*v13)
      {
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v23;
            unsigned int v26 = *((unsigned __int8 *)v23 + 32);
            if (v26 <= __str[0]) {
              break;
            }
            char v23 = *v25;
            uint64_t v24 = v25;
            if (!*v25) {
              goto LABEL_24;
            }
          }
          if (v26 >= __str[0]) {
            break;
          }
          char v23 = v25[1];
          if (!v23)
          {
            uint64_t v24 = v25 + 1;
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        uint64_t v27 = operator new(0x40uLL);
        uint64_t v29 = *(void *)&v62[4];
        uint64_t v28 = *(void *)&v62[12];
        v27[6] = *(void *)&v62[12];
        double v30 = (char *)(v27 + 6);
        *((unsigned char *)v27 + 32) = v22;
        v27[5] = v29;
        uint64_t v31 = *(void *)&v62[20];
        v27[7] = *(void *)&v62[20];
        if (v31)
        {
          *(void *)(v28 + 16) = v30;
          *(void *)&v62[4] = &v62[12];
          *(void *)&v62[12] = 0;
          *(void *)&v62[20] = 0;
        }
        else
        {
          v27[5] = v30;
        }
        std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v25, v24, v27);
      }
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v62[4], *(void **)&v62[12]);
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v58, v59[0]);
    }
    ++v14;
    unsigned int v12 = *v55;
    if (v14 >= v12)
    {
      unsigned int v10 = v52;
      unsigned int v8 = *v51;
      goto LABEL_43;
    }
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v41 = mach_continuous_time();
    if (a6 > 7) {
      long long v42 = "   ";
    }
    else {
      long long v42 = off_2655E6F78[v49];
    }
    double v43 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v42);
    if (__p[23] >= 0) {
      uint64_t v44 = __p;
    }
    else {
      uint64_t v44 = *(const char **)__p;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Extended Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v43 * (double)v41), "GNC", 68, "DecodeSVs", v44, v14 + 1, v52);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 5;
}

void sub_263CA840C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v42, a42);
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

uint64_t XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofBeidouEphemeris>>,XofBeidouEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, signed int a6, uint64_t **a7)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 16 + 48 * a6;
  unsigned int v8 = *(unsigned __int8 *)(v7 + 4);
  long long v50 = (unsigned __int8 *)(v7 + 4);
  if (!*(unsigned char *)(v7 + 4)) {
    return 1;
  }
  unsigned int v10 = 0;
  uint64_t v48 = a6;
  uint64_t v11 = a4 + 16 + 48 * a6;
  unsigned int v12 = *(unsigned __int8 *)(v11 + 3);
  int v13 = a7 + 1;
  v54 = (unsigned __int8 *)(v11 + 3);
  v53 = (unsigned char *)(v11 + 5);
  while (1)
  {
    ++v10;
    if (v12) {
      break;
    }
LABEL_43:
    if (v10 >= v8) {
      return 1;
    }
  }
  unsigned int v14 = 0;
  int v51 = v10;
  unsigned int v15 = v10;
  while (1)
  {
    bzero(__str, 0x700uLL);
    XofBeidouEphemerisCodec::XofBeidouEphemerisCodec((XofBeidouEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)__str);
    if (!XofGenericCodec::Decode<0ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(a5, a2, a3))break; {
    unsigned int v16 = *(unsigned __int8 *)(a5 + 3);
    }
    unsigned int v17 = *v13;
    if (!*v13) {
      goto LABEL_17;
    }
    uint64_t v18 = v13;
    do
    {
      unsigned int v19 = *((unsigned __int8 *)v17 + 32);
      BOOL v20 = v19 >= v15;
      if (v19 >= v15) {
        BOOL v21 = (uint64_t **)v17;
      }
      else {
        BOOL v21 = (uint64_t **)(v17 + 1);
      }
      if (v20) {
        uint64_t v18 = (uint64_t **)v17;
      }
      unsigned int v17 = *v21;
    }
    while (*v21);
    if (v18 != v13 && *((unsigned __int8 *)v18 + 32) <= v15)
    {
      double v33 = v18[6];
      uint64_t v31 = (uint64_t *)(v18 + 6);
      uint64_t v32 = v33;
      if (v33)
      {
        long long v34 = v31;
        do
        {
          unsigned int v35 = *((unsigned __int8 *)v32 + 32);
          BOOL v36 = v35 >= v16;
          if (v35 >= v16) {
            BOOL v37 = (uint64_t **)v32;
          }
          else {
            BOOL v37 = (uint64_t **)(v32 + 1);
          }
          if (v36) {
            long long v34 = v32;
          }
          uint64_t v32 = *v37;
        }
        while (*v37);
        if (v34 != v31 && v16 >= *((unsigned __int8 *)v34 + 32))
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v44 = mach_continuous_time();
            if (a6 > 7) {
              uint64_t v45 = "   ";
            }
            else {
              uint64_t v45 = off_2655E6F78[v48];
            }
            double v46 = *(double *)&g_MacClockTicksToMsRelation;
            std::string::basic_string[abi:ne180100]<0>(__p, v45);
            if ((SBYTE7(v60) & 0x80u) == 0) {
              double v47 = __p;
            }
            else {
              double v47 = (void **)__p[0];
            }
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Extended Ephemeris data, constellation Id = [ %s ], satellite Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v46 * (double)v44), "GNC", 87, "DecodeSVs", (const char *)v47, v16, v51);
            if (SBYTE7(v60) < 0) {
              operator delete(__p[0]);
            }
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          return 5;
        }
      }
      long long v38 = v31 - 1;
      XofBeidouEphemeris::XofBeidouEphemeris((uint64_t)__p, a5);
      long long v74 = v65;
      v75[0] = *(_OWORD *)v66;
      *(void *)((char *)v75 + 14) = *(void *)&v66[14];
      long long v70 = v61;
      long long v71 = v62;
      long long v72 = v63;
      long long v73 = v64;
      long long v68 = *(_OWORD *)__p;
      long long v69 = v60;
      __str[0] = v16;
      std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofBeidouEphemeris>>(v38, v16, (uint64_t)__str);
    }
    else
    {
LABEL_17:
      v58[0] = 0;
      v58[1] = 0;
      v57 = v58;
      XofBeidouEphemeris::XofBeidouEphemeris((uint64_t)__p, a5);
      unsigned char *v53 = BYTE5(v60);
      __str[0] = v16;
      long long v74 = v65;
      v75[0] = *(_OWORD *)v66;
      *(void *)&v75[1] = *(void *)&v66[16];
      long long v70 = v61;
      long long v71 = v62;
      long long v72 = v63;
      long long v73 = v64;
      long long v68 = *(_OWORD *)__p;
      long long v69 = v60;
      std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofBeidouEphemeris>>((uint64_t *)&v57, v16, (uint64_t)__str);
      __str[0] = v15;
      std::map<unsigned char,XofBeidouEphemeris>::map[abi:ne180100]((uint64_t *)&v68, (uint64_t)&v57);
      char v22 = __str[0];
      char v23 = *v13;
      uint64_t v24 = v13;
      v25 = v13;
      if (*v13)
      {
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v23;
            unsigned int v26 = *((unsigned __int8 *)v23 + 32);
            if (v26 <= __str[0]) {
              break;
            }
            char v23 = *v25;
            uint64_t v24 = v25;
            if (!*v25) {
              goto LABEL_24;
            }
          }
          if (v26 >= __str[0]) {
            break;
          }
          char v23 = v25[1];
          if (!v23)
          {
            uint64_t v24 = v25 + 1;
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        uint64_t v27 = operator new(0x40uLL);
        long long v28 = v68;
        v27[6] = *((void *)&v68 + 1);
        uint64_t v29 = (char *)(v27 + 6);
        *((unsigned char *)v27 + 32) = v22;
        v27[5] = v28;
        uint64_t v30 = v69;
        v27[7] = v69;
        if (v30)
        {
          *(void *)(*((void *)&v28 + 1) + 16) = v29;
          *(void *)&long long v68 = (char *)&v68 + 8;
          *((void *)&v68 + 1) = 0;
          *(void *)&long long v69 = 0;
        }
        else
        {
          v27[5] = v29;
        }
        std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v25, v24, v27);
      }
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v68, *((void **)&v68 + 1));
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v57, v58[0]);
    }
    ++v14;
    unsigned int v12 = *v54;
    if (v14 >= v12)
    {
      unsigned int v10 = v51;
      unsigned int v8 = *v50;
      goto LABEL_43;
    }
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v40 = mach_continuous_time();
    if (a6 > 7) {
      uint64_t v41 = "   ";
    }
    else {
      uint64_t v41 = off_2655E6F78[v48];
    }
    double v42 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v41);
    if ((SBYTE7(v60) & 0x80u) == 0) {
      double v43 = __p;
    }
    else {
      double v43 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Extended Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v42 * (double)v40), "GNC", 68, "DecodeSVs", (const char *)v43, v14 + 1, v51);
    if (SBYTE7(v60) < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 5;
}

void sub_263CA8978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v49, a49);
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

uint64_t XofExtEph::DecodeSVs<std::map<unsigned char,std::map<unsigned char,XofNavicEphemeris>>,XofNavicEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, signed int a6, uint64_t **a7)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 16 + 48 * a6;
  unsigned int v8 = *(unsigned __int8 *)(v7 + 4);
  int v51 = (unsigned __int8 *)(v7 + 4);
  if (!*(unsigned char *)(v7 + 4)) {
    return 1;
  }
  unsigned int v10 = 0;
  uint64_t v49 = a6;
  uint64_t v11 = a4 + 16 + 48 * a6;
  unsigned int v12 = *(unsigned __int8 *)(v11 + 3);
  int v13 = a7 + 1;
  v55 = (unsigned __int8 *)(v11 + 3);
  v54 = (unsigned char *)(v11 + 5);
  while (1)
  {
    ++v10;
    if (v12) {
      break;
    }
LABEL_43:
    if (v10 >= v8) {
      return 1;
    }
  }
  unsigned int v14 = 0;
  int v52 = v10;
  unsigned int v15 = v10;
  while (1)
  {
    bzero(__str, 0x410uLL);
    XofNavicEphemerisCodec::XofNavicEphemerisCodec((XofNavicEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (!XofNavicEphemerisCodec::Decode(a5, a2, a3)) {
      break;
    }
    unsigned int v16 = *(unsigned __int8 *)(a5 + 3);
    unsigned int v17 = *v13;
    if (!*v13) {
      goto LABEL_17;
    }
    uint64_t v18 = v13;
    do
    {
      unsigned int v19 = *((unsigned __int8 *)v17 + 32);
      BOOL v20 = v19 >= v15;
      if (v19 >= v15) {
        BOOL v21 = (uint64_t **)v17;
      }
      else {
        BOOL v21 = (uint64_t **)(v17 + 1);
      }
      if (v20) {
        uint64_t v18 = (uint64_t **)v17;
      }
      unsigned int v17 = *v21;
    }
    while (*v21);
    if (v18 != v13 && *((unsigned __int8 *)v18 + 32) <= v15)
    {
      long long v34 = v18[6];
      uint64_t v32 = (uint64_t *)(v18 + 6);
      double v33 = v34;
      if (v34)
      {
        unsigned int v35 = v32;
        do
        {
          unsigned int v36 = *((unsigned __int8 *)v33 + 28);
          BOOL v37 = v36 >= v16;
          if (v36 >= v16) {
            long long v38 = (uint64_t **)v33;
          }
          else {
            long long v38 = (uint64_t **)(v33 + 1);
          }
          if (v37) {
            unsigned int v35 = v33;
          }
          double v33 = *v38;
        }
        while (*v38);
        if (v35 != v32 && v16 >= *((unsigned __int8 *)v35 + 28))
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v45 = mach_continuous_time();
            if (a6 > 7) {
              double v46 = "   ";
            }
            else {
              double v46 = off_2655E6F78[v49];
            }
            double v47 = *(double *)&g_MacClockTicksToMsRelation;
            std::string::basic_string[abi:ne180100]<0>(__p, v46);
            if (__p[23] >= 0) {
              uint64_t v48 = __p;
            }
            else {
              uint64_t v48 = *(const char **)__p;
            }
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Extended Ephemeris data, constellation Id = [ %s ], satellite Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v47 * (double)v45), "GNC", 87, "DecodeSVs", v48, v16, v52);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          return 5;
        }
      }
      long long v39 = v32 - 1;
      XofNavicEphemeris::XofNavicEphemeris((uint64_t)__p, a5);
      *(_OWORD *)&v62[1] = *(_OWORD *)&__p[1];
      *(_WORD *)&v62[17] = *(_WORD *)&__p[17];
      *(_OWORD *)&v62[19] = *(_OWORD *)&__p[19];
      *(_OWORD *)&v62[35] = *(_OWORD *)&__p[35];
      *(_OWORD *)&v62[51] = *(_OWORD *)&__p[51];
      v62[67] = __p[67];
      __str[0] = v16;
      v62[0] = __p[0];
      std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofNavicEphemeris>>(v39, v16, (uint64_t)__str);
    }
    else
    {
LABEL_17:
      v59[0] = 0;
      v59[1] = 0;
      long long v58 = v59;
      XofNavicEphemeris::XofNavicEphemeris((uint64_t)__p, a5);
      unsigned char *v54 = __p[10];
      __str[0] = v16;
      *(_OWORD *)&v62[32] = *(_OWORD *)&__p[32];
      *(_OWORD *)&v62[48] = *(_OWORD *)&__p[48];
      *(_DWORD *)&v62[64] = *(_DWORD *)&__p[64];
      *(_OWORD *)long long v62 = *(_OWORD *)__p;
      *(_OWORD *)&v62[16] = *(_OWORD *)&__p[16];
      std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofNavicEphemeris>>((uint64_t *)&v58, v16, (uint64_t)__str);
      __str[0] = v15;
      std::map<unsigned char,XofNavicEphemeris>::map[abi:ne180100]((uint64_t *)&v62[4], (uint64_t)&v58);
      char v22 = __str[0];
      char v23 = *v13;
      uint64_t v24 = v13;
      v25 = v13;
      if (*v13)
      {
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v23;
            unsigned int v26 = *((unsigned __int8 *)v23 + 32);
            if (v26 <= __str[0]) {
              break;
            }
            char v23 = *v25;
            uint64_t v24 = v25;
            if (!*v25) {
              goto LABEL_24;
            }
          }
          if (v26 >= __str[0]) {
            break;
          }
          char v23 = v25[1];
          if (!v23)
          {
            uint64_t v24 = v25 + 1;
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        uint64_t v27 = operator new(0x40uLL);
        uint64_t v29 = *(void *)&v62[4];
        uint64_t v28 = *(void *)&v62[12];
        v27[6] = *(void *)&v62[12];
        uint64_t v30 = (char *)(v27 + 6);
        *((unsigned char *)v27 + 32) = v22;
        v27[5] = v29;
        uint64_t v31 = *(void *)&v62[20];
        v27[7] = *(void *)&v62[20];
        if (v31)
        {
          *(void *)(v28 + 16) = v30;
          *(void *)&v62[4] = &v62[12];
          *(void *)&v62[12] = 0;
          *(void *)&v62[20] = 0;
        }
        else
        {
          v27[5] = v30;
        }
        std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v25, v24, v27);
      }
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v62[4], *(void **)&v62[12]);
      std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&v58, v59[0]);
    }
    ++v14;
    unsigned int v12 = *v55;
    if (v14 >= v12)
    {
      unsigned int v10 = v52;
      unsigned int v8 = *v51;
      goto LABEL_43;
    }
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v41 = mach_continuous_time();
    if (a6 > 7) {
      double v42 = "   ";
    }
    else {
      double v42 = off_2655E6F78[v49];
    }
    double v43 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v42);
    if (__p[23] >= 0) {
      uint64_t v44 = __p;
    }
    else {
      uint64_t v44 = *(const char **)__p;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Extended Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ], block number = [ %d ]\n", (unint64_t)(v43 * (double)v41), "GNC", 68, "DecodeSVs", v44, v14 + 1, v52);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 5;
}

void sub_263CA8EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v45, a45);
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

void XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec(XofGpsQzssEphemerisCodec *this)
{
  uint64_t v181 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v177, "satID");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v178, &v177, 1, 202, 0);
  std::string::basic_string[abi:ne180100]<0>(&v173, "health");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v174, &v173, 0, 63, 0);
  std::string::basic_string[abi:ne180100]<0>(&v169, "URAI");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v170, &v169, -16, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v165, "fitHours");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v166, &v165, 0, 6, 0);
  std::string::basic_string[abi:ne180100]<0>(&v161, "gpsWeek");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v162, &v161, 0, 0x1FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v157, "sTOC");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v158, &v157, 0, 37799, 0);
  std::string::basic_string[abi:ne180100]<0>(&v153, "sAf0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v154, &v153, -2097152, 0x1FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v149, "sAf1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v150, &v149, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v145, "sAf2");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v146, &v145, -128, 127, 0);
  std::string::basic_string[abi:ne180100]<0>(&v141, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v142, &v141, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v137, "sTGD");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v138, &v137, -4096, 4095, 0);
  std::string::basic_string[abi:ne180100]<0>(&v133, "sISC_L1_CA");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v134, &v133, -4096, 4095, 0x7FFF);
  std::string::basic_string[abi:ne180100]<0>(&v129, "sISC_L5_Q5");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v130, &v129, -4096, 4095, 0x7FFF);
  std::string::basic_string[abi:ne180100]<0>(&v125, "reserved2");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v126, &v125, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v121, "l5Health");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v122, &v121, 0, 1, -1);
  std::string::basic_string[abi:ne180100]<0>(&v117, "integrityFlag");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v118, &v117, 0, 1, -1);
  std::string::basic_string[abi:ne180100]<0>(&v113, "IODC");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v114, &v113, 0, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v109, "sE");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v110, &v109, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v105, "sAPowerHalf");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v106, &v105, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v101, "sM0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v102, &v101, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v97, "sOmega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v98, &v97, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v93, "sI0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v94, &v93, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v89, "sW");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v90, &v89, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v85, "sOmegaDot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v86, &v85, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v81, "sDeltaN");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v82, &v81, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v77, "sIDOT");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v78, &v77, -8192, 0x1FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v73, "sCuc");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v74, &v73, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v69, "sCus");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v70, &v69, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v65, "sCrc");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v66, &v65, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v61, "sCrs");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v62, &v61, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v57, "sCic");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v58, &v57, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sCis");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v54, &__p, -32768, 0x7FFF, 0);
  *(_DWORD *)this = v178;
  *(_OWORD *)((char *)this + 8) = v179;
  *((void *)this + 3) = v180;
  long long v179 = 0uLL;
  uint64_t v180 = 0;
  *((_DWORD *)this + 8) = v174;
  *(_OWORD *)((char *)this + 40) = v175;
  *((void *)this + 7) = v176;
  uint64_t v176 = 0;
  long long v175 = 0uLL;
  *((_DWORD *)this + 16) = v170;
  long long v2 = v171;
  *((void *)this + 11) = v172;
  *(_OWORD *)((char *)this + 72) = v2;
  long long v171 = 0uLL;
  uint64_t v172 = 0;
  *((_DWORD *)this + 24) = v166;
  uint64_t v3 = v168;
  *(_OWORD *)((char *)this + 104) = v167;
  long long v167 = 0uLL;
  uint64_t v168 = 0;
  uint64_t v4 = v162;
  uint64_t v5 = v164;
  *((void *)this + 15) = v3;
  *((void *)this + 16) = v4;
  *(_OWORD *)((char *)this + 136) = v163;
  long long v163 = 0uLL;
  uint64_t v164 = 0;
  uint64_t v6 = v158;
  uint64_t v7 = v160;
  *((void *)this + 19) = v5;
  *((void *)this + 20) = v6;
  long long v8 = v159;
  *((void *)this + 23) = v7;
  *(_OWORD *)((char *)this + 168) = v8;
  long long v159 = 0uLL;
  uint64_t v160 = 0;
  long long v9 = v155;
  uint64_t v10 = v156;
  *((_OWORD *)this + 12) = v154;
  *((_OWORD *)this + 13) = v9;
  long long v155 = 0uLL;
  uint64_t v156 = 0;
  uint64_t v11 = v150;
  uint64_t v12 = v152;
  *((void *)this + 28) = v10;
  *((void *)this + 29) = v11;
  long long v13 = v151;
  *((void *)this + 32) = v12;
  *((_OWORD *)this + 15) = v13;
  long long v151 = 0uLL;
  uint64_t v152 = 0;
  *((_DWORD *)this + 66) = v146;
  long long v14 = v147;
  *((void *)this + 36) = v148;
  *((_OWORD *)this + 17) = v14;
  long long v147 = 0uLL;
  uint64_t v148 = 0;
  *((_DWORD *)this + 74) = v142;
  uint64_t v15 = v144;
  *((_OWORD *)this + 19) = v143;
  long long v143 = 0uLL;
  uint64_t v144 = 0;
  uint64_t v16 = v138;
  uint64_t v17 = v140;
  *((void *)this + 40) = v15;
  *((void *)this + 41) = v16;
  *((_OWORD *)this + 21) = v139;
  long long v139 = 0uLL;
  uint64_t v140 = 0;
  uint64_t v18 = v134;
  uint64_t v19 = v136;
  *((void *)this + 44) = v17;
  *((void *)this + 45) = v18;
  *((_OWORD *)this + 23) = v135;
  long long v135 = 0uLL;
  uint64_t v136 = 0;
  uint64_t v20 = v130;
  uint64_t v21 = v132;
  *((void *)this + 48) = v19;
  *((void *)this + 49) = v20;
  *((_OWORD *)this + 25) = v131;
  long long v131 = 0uLL;
  uint64_t v132 = 0;
  uint64_t v22 = v126;
  uint64_t v23 = v128;
  *((void *)this + 52) = v21;
  *((void *)this + 53) = v22;
  long long v24 = v127;
  *((void *)this + 56) = v23;
  *((_OWORD *)this + 27) = v24;
  long long v127 = 0uLL;
  uint64_t v128 = 0;
  *((_DWORD *)this + 114) = v122;
  long long v25 = v123;
  *((void *)this + 60) = v124;
  *((_OWORD *)this + 29) = v25;
  long long v123 = 0uLL;
  uint64_t v124 = 0;
  *((_DWORD *)this + 122) = v118;
  long long v26 = v119;
  *((void *)this + 64) = v120;
  *((_OWORD *)this + 31) = v26;
  long long v119 = 0uLL;
  uint64_t v120 = 0;
  uint64_t v27 = v116;
  *((void *)this + 65) = v114;
  long long v28 = v115;
  *((void *)this + 68) = v27;
  *((_OWORD *)this + 33) = v28;
  long long v115 = 0uLL;
  uint64_t v116 = 0;
  long long v29 = v111;
  *(_OWORD *)((char *)this + 552) = v110;
  *((void *)this + 73) = v112;
  *(_OWORD *)((char *)this + 568) = v29;
  long long v111 = 0uLL;
  uint64_t v112 = 0;
  long long v30 = v106;
  long long v31 = v107;
  *((void *)this + 78) = v108;
  *((_OWORD *)this + 37) = v30;
  *((_OWORD *)this + 38) = v31;
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  long long v32 = v103;
  *(_OWORD *)((char *)this + 632) = v102;
  *((void *)this + 83) = v104;
  *(_OWORD *)((char *)this + 648) = v32;
  long long v103 = 0uLL;
  uint64_t v104 = 0;
  long long v33 = v98;
  long long v34 = v99;
  *((void *)this + 88) = v100;
  *((_OWORD *)this + 42) = v33;
  *((_OWORD *)this + 43) = v34;
  long long v99 = 0uLL;
  uint64_t v100 = 0;
  *(_OWORD *)((char *)this + 712) = v94;
  long long v35 = v95;
  *((void *)this + 93) = v96;
  *(_OWORD *)((char *)this + 728) = v35;
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  long long v36 = v90;
  long long v37 = v91;
  *((void *)this + 98) = v92;
  *((_OWORD *)this + 47) = v36;
  *((_OWORD *)this + 48) = v37;
  long long v91 = 0uLL;
  uint64_t v92 = 0;
  *(_OWORD *)((char *)this + 792) = v86;
  long long v38 = v87;
  *((void *)this + 103) = v88;
  *(_OWORD *)((char *)this + 808) = v38;
  long long v87 = 0uLL;
  uint64_t v88 = 0;
  uint64_t v39 = v84;
  *((void *)this + 104) = v82;
  long long v40 = v83;
  *((void *)this + 107) = v39;
  *(_OWORD *)((char *)this + 840) = v40;
  long long v83 = 0uLL;
  uint64_t v84 = 0;
  uint64_t v41 = v80;
  *((void *)this + 108) = v78;
  long long v42 = v79;
  *((void *)this + 111) = v41;
  *(_OWORD *)((char *)this + 872) = v42;
  long long v79 = 0uLL;
  uint64_t v80 = 0;
  uint64_t v43 = v76;
  *((void *)this + 112) = v74;
  long long v44 = v75;
  *((void *)this + 115) = v43;
  *(_OWORD *)((char *)this + 904) = v44;
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  uint64_t v45 = v72;
  *((void *)this + 116) = v70;
  long long v46 = v71;
  *((void *)this + 119) = v45;
  *(_OWORD *)((char *)this + 936) = v46;
  long long v71 = 0uLL;
  uint64_t v72 = 0;
  uint64_t v47 = v68;
  *((void *)this + 120) = v66;
  long long v48 = v67;
  *((void *)this + 123) = v47;
  *(_OWORD *)((char *)this + 968) = v48;
  long long v67 = 0uLL;
  uint64_t v68 = 0;
  uint64_t v49 = v64;
  *((void *)this + 124) = v62;
  long long v50 = v63;
  *((void *)this + 127) = v49;
  *(_OWORD *)((char *)this + 1000) = v50;
  long long v63 = 0uLL;
  uint64_t v64 = 0;
  *((void *)this + 128) = v58;
  long long v51 = *(_OWORD *)v59;
  *((void *)this + 131) = v60;
  *(_OWORD *)((char *)this + 1032) = v51;
  v59[0] = 0;
  v59[1] = 0;
  uint64_t v60 = 0;
  *((void *)this + 132) = v54;
  long long v52 = v55;
  *((void *)this + 135) = v56;
  *(_OWORD *)((char *)this + 1064) = v52;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60) < 0) {
      operator delete(v59[0]);
    }
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)v71);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete((void *)v75);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80) < 0) {
    operator delete((void *)v79);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88) < 0) {
    operator delete((void *)v87);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete((void *)v91);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100) < 0) {
    operator delete((void *)v99);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108) < 0) {
    operator delete((void *)v107);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v112) < 0) {
    operator delete((void *)v111);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v116) < 0) {
    operator delete((void *)v115);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v124) < 0) {
    operator delete((void *)v123);
  }
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v128) < 0) {
    operator delete((void *)v127);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v132) < 0) {
    operator delete((void *)v131);
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136) < 0) {
    operator delete((void *)v135);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v140) < 0) {
    operator delete((void *)v139);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v148) < 0) {
    operator delete((void *)v147);
  }
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v152) < 0) {
    operator delete((void *)v151);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v156) < 0) {
    operator delete((void *)v155);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v160) < 0) {
    operator delete((void *)v159);
  }
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v164) < 0) {
    operator delete((void *)v163);
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v168) < 0) {
    operator delete((void *)v167);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v172) < 0) {
    operator delete((void *)v171);
  }
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v176) < 0) {
    operator delete((void *)v175);
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v180) < 0) {
    operator delete((void *)v179);
  }
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
}

void sub_263CA9CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a86);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete((void *)STACK[0x348]);
  }
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete((void *)STACK[0x3A8]);
  }
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  if (SLOBYTE(STACK[0x40F]) < 0) {
    operator delete((void *)STACK[0x3F8]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x50F]) < 0) {
    operator delete((void *)STACK[0x4F8]);
  }
  if (SLOBYTE(STACK[0x4EF]) < 0) {
    operator delete((void *)STACK[0x4D8]);
  }
  if (SLOBYTE(STACK[0x547]) < 0) {
    operator delete((void *)STACK[0x530]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete((void *)STACK[0x510]);
  }
  if (SLOBYTE(STACK[0x57F]) < 0) {
    operator delete((void *)STACK[0x568]);
  }
  if (SLOBYTE(STACK[0x55F]) < 0) {
    operator delete((void *)STACK[0x548]);
  }
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete((void *)STACK[0x5A0]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete((void *)STACK[0x5B8]);
  }
  if (SLOBYTE(STACK[0x62F]) < 0) {
    operator delete((void *)STACK[0x618]);
  }
  if (SLOBYTE(STACK[0x60F]) < 0) {
    operator delete((void *)STACK[0x5F8]);
  }
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  if (*(char *)(v86 - 193) < 0) {
    operator delete(*(void **)(v86 - 216));
  }
  if (*(char *)(v86 - 225) < 0) {
    operator delete(*(void **)(v86 - 248));
  }
  if (*(char *)(v86 - 137) < 0) {
    operator delete(*(void **)(v86 - 160));
  }
  if (*(char *)(v86 - 169) < 0) {
    operator delete(*(void **)(v86 - 192));
  }
  if (*(char *)(v86 - 81) < 0) {
    operator delete(*(void **)(v86 - 104));
  }
  if (*(char *)(v86 - 113) < 0) {
    operator delete(*(void **)(v86 - 136));
  }
  if (*(char *)(v86 - 25) < 0) {
    operator delete(*(void **)(v86 - 48));
  }
  if (*(char *)(v86 - 57) < 0) {
    operator delete(*(void **)(v86 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263CAA10C()
{
}

void sub_263CAA114()
{
}

void sub_263CAA11C()
{
}

void sub_263CAA124()
{
}

void sub_263CAA12C()
{
}

void sub_263CAA134()
{
}

void sub_263CAA13C()
{
}

void sub_263CAA144()
{
}

void sub_263CAA14C()
{
}

void sub_263CAA154()
{
}

void sub_263CAA15C()
{
}

void sub_263CAA164()
{
}

void sub_263CAA16C()
{
}

void sub_263CAA174()
{
}

void sub_263CAA17C()
{
}

void sub_263CAA184()
{
}

void sub_263CAA18C()
{
}

void sub_263CAA194()
{
}

void sub_263CAA19C()
{
}

void sub_263CAA1A4()
{
}

void sub_263CAA1AC()
{
}

void sub_263CAA1B4()
{
}

void sub_263CAA1BC()
{
}

void sub_263CAA1C4()
{
}

void sub_263CAA1CC()
{
}

void sub_263CAA1D4()
{
}

void sub_263CAA1DC()
{
}

void sub_263CAA1E4()
{
}

void sub_263CAA1EC()
{
}

void sub_263CAA1F4()
{
}

void sub_263CAA1FC()
{
}

void sub_263CAA204()
{
}

void sub_263CAA20C()
{
}

void sub_263CAA214()
{
}

void sub_263CAA21C()
{
}

void sub_263CAA224()
{
}

void sub_263CAA22C()
{
}

void sub_263CAA234()
{
}

void sub_263CAA23C()
{
}

void sub_263CAA244()
{
}

void sub_263CAA24C()
{
}

void sub_263CAA254()
{
}

void sub_263CAA25C()
{
}

void sub_263CAA264()
{
}

void sub_263CAA26C()
{
}

void sub_263CAA274()
{
}

void sub_263CAA27C()
{
}

void sub_263CAA284()
{
}

void sub_263CAA28C()
{
}

void sub_263CAA294()
{
}

void sub_263CAA29C()
{
}

void sub_263CAA2A4()
{
}

void sub_263CAA2AC()
{
}

void sub_263CAA2B4()
{
}

void sub_263CAA2BC()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*(void **)(a1 + 968));
  }
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  if (*(char *)(a1 + 927) < 0) {
    operator delete(*(void **)(a1 + 904));
  }
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*(void **)(a1 + 808));
  }
  if (*(char *)(a1 + 791) < 0) {
    operator delete(*(void **)(a1 + 768));
  }
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  if (*(char *)(a1 + 711) < 0) {
    operator delete(*(void **)(a1 + 688));
  }
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*(void **)(a1 + 648));
  }
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*(void **)(a1 + 528));
  }
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofSbasEphemerisCodec::XofSbasEphemerisCodec(XofSbasEphemerisCodec *this)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v87, "satID");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v88, &v87, 120, 158, 0);
  std::string::basic_string[abi:ne180100]<0>(&v83, "health");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v84, &v83, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v79, "st0");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v80, &v79, 0, 5399, 0);
  std::string::basic_string[abi:ne180100]<0>(&v75, "saGfo");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v76, &v75, -2048, 2047, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "saGf1");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v72, &v71, -128, 127, 0);
  std::string::basic_string[abi:ne180100]<0>(&v67, "Accuracy");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v68, &v67, 0, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v63, "sXG");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v64, &v63, -536870912, 0x1FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v59, "sYG");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v60, &v59, -536870912, 0x1FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v55, "sZG");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v56, &v55, -16777216, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v51, "sXG_Rate_of_Change");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v52, &v51, -65536, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v47, "sYG_Rate_of_Change");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v48, &v47, -65536, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v43, "sZG_Rate_of_Change");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v44, &v43, -131072, 0x1FFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v39, "sXG_Acceleration");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v40, &v39, -512, 511, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "sYG_Acceleration");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v36, &v35, -512, 511, 0);
  std::string::basic_string[abi:ne180100]<0>(&v31, "sZG_Acceleration");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v32, &v31, -512, 511, 0);
  std::string::basic_string[abi:ne180100]<0>(&v27, "iod");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v28, &v27, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reserved");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v24, &__p, 0, 255, 0);
  *(_OWORD *)((char *)this + 8) = v89;
  *(_OWORD *)((char *)this + 40) = v85;
  *(_OWORD *)((char *)this + 72) = v81;
  *(_OWORD *)((char *)this + 104) = v77;
  *(_OWORD *)((char *)this + 136) = v73;
  *(_OWORD *)((char *)this + 168) = v69;
  long long v2 = *(_OWORD *)v65;
  *((_OWORD *)this + 12) = v64;
  *((_OWORD *)this + 13) = v2;
  long long v3 = *(_OWORD *)v61;
  *(_OWORD *)((char *)this + 232) = v60;
  *(_OWORD *)((char *)this + 248) = v3;
  long long v4 = *(_OWORD *)v57;
  *((_OWORD *)this + 17) = v56;
  *((_OWORD *)this + 18) = v4;
  long long v5 = *(_OWORD *)v53;
  *(_OWORD *)((char *)this + 312) = v52;
  *(_OWORD *)((char *)this + 328) = v5;
  long long v6 = *(_OWORD *)v49;
  *((_OWORD *)this + 22) = v48;
  *((_OWORD *)this + 23) = v6;
  long long v7 = *(_OWORD *)v45;
  *(_OWORD *)((char *)this + 392) = v44;
  *(_DWORD *)this = v88;
  *((void *)this + 3) = v90;
  long long v89 = 0uLL;
  uint64_t v90 = 0;
  *((_DWORD *)this + 8) = v84;
  uint64_t v8 = v86;
  uint64_t v86 = 0;
  long long v85 = 0uLL;
  uint64_t v9 = v80;
  uint64_t v10 = v82;
  *((void *)this + 7) = v8;
  *((void *)this + 8) = v9;
  long long v81 = 0uLL;
  uint64_t v82 = 0;
  uint64_t v11 = v76;
  uint64_t v12 = v78;
  *((void *)this + 11) = v10;
  *((void *)this + 12) = v11;
  *((void *)this + 15) = v12;
  long long v77 = 0uLL;
  uint64_t v78 = 0;
  *((_DWORD *)this + 32) = v72;
  *((void *)this + 19) = v74;
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  *((_DWORD *)this + 40) = v68;
  *((void *)this + 23) = v70;
  long long v69 = 0uLL;
  uint64_t v70 = 0;
  *((void *)this + 28) = v66;
  v65[1] = 0;
  v65[0] = 0;
  uint64_t v66 = 0;
  *((void *)this + 33) = v62;
  v61[1] = 0;
  v61[0] = 0;
  uint64_t v62 = 0;
  *((void *)this + 38) = v58;
  v57[1] = 0;
  v57[0] = 0;
  uint64_t v58 = 0;
  *((void *)this + 43) = v54;
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v54 = 0;
  *((void *)this + 48) = v50;
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v50 = 0;
  uint64_t v13 = v46;
  *(_OWORD *)((char *)this + 408) = v7;
  v45[0] = 0;
  v45[1] = 0;
  uint64_t v46 = 0;
  uint64_t v14 = v40;
  uint64_t v15 = v42;
  *((void *)this + 53) = v13;
  *((void *)this + 54) = v14;
  *(_OWORD *)((char *)this + 440) = v41;
  long long v41 = 0uLL;
  uint64_t v42 = 0;
  uint64_t v16 = v36;
  uint64_t v17 = v38;
  *((void *)this + 57) = v15;
  *((void *)this + 58) = v16;
  *(_OWORD *)((char *)this + 472) = v37;
  long long v37 = 0uLL;
  uint64_t v38 = 0;
  uint64_t v18 = v32;
  uint64_t v19 = v34;
  *((void *)this + 61) = v17;
  *((void *)this + 62) = v18;
  long long v20 = v33;
  *((void *)this + 65) = v19;
  *(_OWORD *)((char *)this + 504) = v20;
  long long v33 = 0uLL;
  uint64_t v34 = 0;
  *((_DWORD *)this + 132) = v28;
  long long v21 = *(_OWORD *)v29;
  *((void *)this + 69) = v30;
  *(_OWORD *)((char *)this + 536) = v21;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  *((_DWORD *)this + 140) = v24;
  long long v22 = v25;
  *((void *)this + 73) = v26;
  *(_OWORD *)((char *)this + 568) = v22;
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30) < 0) {
      operator delete(v29[0]);
    }
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(v57[0]);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(v61[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[0]);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete((void *)v77);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete((void *)v85);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)v89);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
}

void sub_263CAAC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (*(char *)(v84 - 193) < 0) {
    operator delete(*(void **)(v84 - 216));
  }
  if (*(char *)(v84 - 225) < 0) {
    operator delete(*(void **)(v84 - 248));
  }
  if (*(char *)(v84 - 137) < 0) {
    operator delete(*(void **)(v84 - 160));
  }
  if (*(char *)(v84 - 169) < 0) {
    operator delete(*(void **)(v84 - 192));
  }
  if (*(char *)(v84 - 81) < 0) {
    operator delete(*(void **)(v84 - 104));
  }
  if (*(char *)(v84 - 113) < 0) {
    operator delete(*(void **)(v84 - 136));
  }
  if (*(char *)(v84 - 25) < 0) {
    operator delete(*(void **)(v84 - 48));
  }
  if (*(char *)(v84 - 57) < 0) {
    operator delete(*(void **)(v84 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263CAAEB0()
{
}

void sub_263CAAEB8()
{
}

void sub_263CAAEC0()
{
}

void sub_263CAAEC8()
{
}

void sub_263CAAED0()
{
}

void sub_263CAAED8()
{
}

void sub_263CAAEE0()
{
}

void sub_263CAAEE8()
{
}

void sub_263CAAEF0()
{
}

void sub_263CAAEF8()
{
}

void sub_263CAAF00()
{
}

void sub_263CAAF08()
{
}

void sub_263CAAF10()
{
}

void sub_263CAAF18()
{
}

void sub_263CAAF20()
{
}

void sub_263CAAF28()
{
}

void sub_263CAAF30()
{
}

void sub_263CAAF38()
{
}

void sub_263CAAF40()
{
}

void sub_263CAAF48()
{
}

void sub_263CAAF50()
{
}

void sub_263CAAF58()
{
}

void sub_263CAAF60()
{
}

void sub_263CAAF68()
{
}

void sub_263CAAF70()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofGalileoEphemerisCodec::XofGalileoEphemerisCodec(XofGalileoEphemerisCodec *this)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v171, "satID");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v172, &v171, 0, 36, 0);
  std::string::basic_string[abi:ne180100]<0>(&v167, "navDVS");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v168, &v167, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v163, "sigHs");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v164, &v163, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v159, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v160, &v159, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v155, "reserved2");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v156, &v155, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v151, "modelId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v152, &v151, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v147, "SISA");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v148, &v147, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v143, "galWeek");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v144, &v143, 0, 0x1FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v139, "sTOE");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v140, &v139, 0, 10079, 0);
  std::string::basic_string[abi:ne180100]<0>(&v135, "sAf0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v136, &v135, -1073741824, 0x3FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v131, "sAf1");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v132, &v131, -1048576, 0xFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v127, "sAf2");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v128, &v127, -32, 31, 0);
  std::string::basic_string[abi:ne180100]<0>(&v123, "fitHours");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v124, &v123, 0, 6, 0);
  std::string::basic_string[abi:ne180100]<0>(&v119, "IODNav");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v120, &v119, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v115, "sBGDE1E5a");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v116, &v115, -512, 511, 0);
  std::string::basic_string[abi:ne180100]<0>(&v111, "sBGDE1E5b");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v112, &v111, -512, 511, 0);
  std::string::basic_string[abi:ne180100]<0>(&v107, "sE");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v108, &v107, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v103, "sAPowerHalf");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v104, &v103, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v99, "sM0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v100, &v99, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v95, "sOmega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v96, &v95, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v91, "sI0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v92, &v91, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v87, "sW");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v88, &v87, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v83, "sOmegaDot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v84, &v83, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v79, "sDeltaN");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v80, &v79, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v75, "sIDOT");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v76, &v75, -8192, 0x1FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "sCuc");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v72, &v71, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v67, "sCus");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v68, &v67, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v63, "sCrc");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v64, &v63, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v59, "sCrs");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v60, &v59, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v55, "sCic");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v56, &v55, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sCis");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v52, &__p, -32768, 0x7FFF, 0);
  *(_DWORD *)this = v172;
  *(_OWORD *)((char *)this + 8) = v173;
  *((void *)this + 3) = v174;
  long long v173 = 0uLL;
  uint64_t v174 = 0;
  *((_DWORD *)this + 8) = v168;
  *(_OWORD *)((char *)this + 40) = v169;
  *((void *)this + 7) = v170;
  uint64_t v170 = 0;
  long long v169 = 0uLL;
  *((_DWORD *)this + 16) = v164;
  long long v2 = v165;
  *((void *)this + 11) = v166;
  *(_OWORD *)((char *)this + 72) = v2;
  long long v165 = 0uLL;
  uint64_t v166 = 0;
  *((_DWORD *)this + 24) = v160;
  uint64_t v3 = v162;
  *(_OWORD *)((char *)this + 104) = v161;
  long long v161 = 0uLL;
  uint64_t v162 = 0;
  uint64_t v4 = v156;
  uint64_t v5 = v158;
  *((void *)this + 15) = v3;
  *((void *)this + 16) = v4;
  long long v6 = v157;
  *((void *)this + 19) = v5;
  *(_OWORD *)((char *)this + 136) = v6;
  long long v157 = 0uLL;
  uint64_t v158 = 0;
  *((_DWORD *)this + 40) = v152;
  long long v7 = v153;
  *((void *)this + 23) = v154;
  *(_OWORD *)((char *)this + 168) = v7;
  long long v153 = 0uLL;
  uint64_t v154 = 0;
  *((_DWORD *)this + 48) = v148;
  uint64_t v8 = v150;
  *(_OWORD *)((char *)this + 200) = v149;
  long long v149 = 0uLL;
  uint64_t v150 = 0;
  uint64_t v9 = v144;
  uint64_t v10 = v146;
  *((void *)this + 27) = v8;
  *((void *)this + 28) = v9;
  *(_OWORD *)((char *)this + 232) = v145;
  long long v145 = 0uLL;
  uint64_t v146 = 0;
  uint64_t v11 = v140;
  uint64_t v12 = v142;
  *((void *)this + 31) = v10;
  *((void *)this + 32) = v11;
  long long v13 = v141;
  *((void *)this + 35) = v12;
  *(_OWORD *)((char *)this + 264) = v13;
  long long v141 = 0uLL;
  uint64_t v142 = 0;
  long long v14 = v136;
  long long v15 = v137;
  *((void *)this + 40) = v138;
  *((_OWORD *)this + 18) = v14;
  *((_OWORD *)this + 19) = v15;
  long long v137 = 0uLL;
  uint64_t v138 = 0;
  long long v16 = v133;
  *(_OWORD *)((char *)this + 328) = v132;
  *((void *)this + 45) = v134;
  *(_OWORD *)((char *)this + 344) = v16;
  long long v133 = 0uLL;
  uint64_t v134 = 0;
  *((_DWORD *)this + 92) = v128;
  long long v17 = v129;
  *((void *)this + 49) = v130;
  *(_OWORD *)((char *)this + 376) = v17;
  long long v129 = 0uLL;
  uint64_t v130 = 0;
  *((_DWORD *)this + 100) = v124;
  uint64_t v18 = v126;
  *(_OWORD *)((char *)this + 408) = v125;
  long long v125 = 0uLL;
  uint64_t v126 = 0;
  uint64_t v19 = v120;
  uint64_t v20 = v122;
  *((void *)this + 53) = v18;
  *((void *)this + 54) = v19;
  *(_OWORD *)((char *)this + 440) = v121;
  long long v121 = 0uLL;
  uint64_t v122 = 0;
  uint64_t v21 = v116;
  uint64_t v22 = v118;
  *((void *)this + 57) = v20;
  *((void *)this + 58) = v21;
  *(_OWORD *)((char *)this + 472) = v117;
  long long v117 = 0uLL;
  uint64_t v118 = 0;
  uint64_t v23 = v112;
  uint64_t v24 = v114;
  *((void *)this + 61) = v22;
  *((void *)this + 62) = v23;
  long long v25 = v113;
  *((void *)this + 65) = v24;
  *(_OWORD *)((char *)this + 504) = v25;
  long long v113 = 0uLL;
  uint64_t v114 = 0;
  long long v26 = v108;
  long long v27 = v109;
  *((void *)this + 70) = v110;
  *((_OWORD *)this + 33) = v26;
  *((_OWORD *)this + 34) = v27;
  long long v109 = 0uLL;
  uint64_t v110 = 0;
  long long v28 = v105;
  *(_OWORD *)((char *)this + 568) = v104;
  *((void *)this + 75) = v106;
  *(_OWORD *)((char *)this + 584) = v28;
  long long v105 = 0uLL;
  uint64_t v106 = 0;
  long long v29 = v100;
  long long v30 = v101;
  *((void *)this + 80) = v102;
  *((_OWORD *)this + 38) = v29;
  *((_OWORD *)this + 39) = v30;
  long long v101 = 0uLL;
  uint64_t v102 = 0;
  *(_OWORD *)((char *)this + 648) = v96;
  long long v31 = v97;
  *((void *)this + 85) = v98;
  *(_OWORD *)((char *)this + 664) = v31;
  long long v97 = 0uLL;
  uint64_t v98 = 0;
  long long v32 = v92;
  long long v33 = v93;
  *((void *)this + 90) = v94;
  *((_OWORD *)this + 43) = v32;
  *((_OWORD *)this + 44) = v33;
  long long v93 = 0uLL;
  uint64_t v94 = 0;
  *(_OWORD *)((char *)this + 728) = v88;
  long long v34 = v89;
  *((void *)this + 95) = v90;
  *(_OWORD *)((char *)this + 744) = v34;
  long long v89 = 0uLL;
  uint64_t v90 = 0;
  long long v35 = v84;
  long long v36 = v85;
  *((void *)this + 100) = v86;
  *((_OWORD *)this + 48) = v35;
  *((_OWORD *)this + 49) = v36;
  long long v85 = 0uLL;
  uint64_t v86 = 0;
  uint64_t v37 = v82;
  *((void *)this + 101) = v80;
  long long v38 = v81;
  *((void *)this + 104) = v37;
  *((_OWORD *)this + 51) = v38;
  long long v81 = 0uLL;
  uint64_t v82 = 0;
  uint64_t v39 = v78;
  *((void *)this + 105) = v76;
  long long v40 = v77;
  *((void *)this + 108) = v39;
  *((_OWORD *)this + 53) = v40;
  long long v77 = 0uLL;
  uint64_t v78 = 0;
  uint64_t v41 = v74;
  *((void *)this + 109) = v72;
  long long v42 = v73;
  *((void *)this + 112) = v41;
  *((_OWORD *)this + 55) = v42;
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  uint64_t v43 = v70;
  *((void *)this + 113) = v68;
  long long v44 = v69;
  *((void *)this + 116) = v43;
  *((_OWORD *)this + 57) = v44;
  long long v69 = 0uLL;
  uint64_t v70 = 0;
  uint64_t v45 = v66;
  *((void *)this + 117) = v64;
  long long v46 = v65;
  *((void *)this + 120) = v45;
  *((_OWORD *)this + 59) = v46;
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  uint64_t v47 = v62;
  *((void *)this + 121) = v60;
  long long v48 = v61;
  *((void *)this + 124) = v47;
  *((_OWORD *)this + 61) = v48;
  long long v61 = 0uLL;
  uint64_t v62 = 0;
  *((void *)this + 125) = v56;
  long long v49 = *(_OWORD *)v57;
  *((void *)this + 128) = v58;
  *((_OWORD *)this + 63) = v49;
  v57[0] = 0;
  v57[1] = 0;
  uint64_t v58 = 0;
  *((void *)this + 129) = v52;
  long long v50 = v53;
  *((void *)this + 132) = v54;
  *((_OWORD *)this + 65) = v50;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0) {
      operator delete(v57[0]);
    }
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete((void *)v77);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete((void *)v85);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)v89);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)v93);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98) < 0) {
    operator delete((void *)v97);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete((void *)v101);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106) < 0) {
    operator delete((void *)v105);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v110) < 0) {
    operator delete((void *)v109);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v114) < 0) {
    operator delete((void *)v113);
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)v121);
  }
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v126) < 0) {
    operator delete((void *)v125);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130) < 0) {
    operator delete((void *)v129);
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v134) < 0) {
    operator delete((void *)v133);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v138) < 0) {
    operator delete((void *)v137);
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v142) < 0) {
    operator delete((void *)v141);
  }
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v146) < 0) {
    operator delete((void *)v145);
  }
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v150) < 0) {
    operator delete((void *)v149);
  }
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v154) < 0) {
    operator delete((void *)v153);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v158) < 0) {
    operator delete((void *)v157);
  }
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v162) < 0) {
    operator delete((void *)v161);
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v166) < 0) {
    operator delete((void *)v165);
  }
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v170) < 0) {
    operator delete((void *)v169);
  }
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v167.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v174) < 0) {
    operator delete((void *)v173);
  }
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v171.__r_.__value_.__l.__data_);
  }
}

void sub_263CABE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a86);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete((void *)STACK[0x348]);
  }
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete((void *)STACK[0x3A8]);
  }
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  if (SLOBYTE(STACK[0x40F]) < 0) {
    operator delete((void *)STACK[0x3F8]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (SLOBYTE(STACK[0x4DF]) < 0) {
    operator delete((void *)STACK[0x4C8]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete((void *)STACK[0x4E0]);
  }
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  if (SLOBYTE(STACK[0x537]) < 0) {
    operator delete((void *)STACK[0x520]);
  }
  if (SLOBYTE(STACK[0x58F]) < 0) {
    operator delete((void *)STACK[0x578]);
  }
  if (SLOBYTE(STACK[0x56F]) < 0) {
    operator delete((void *)STACK[0x558]);
  }
  if (SLOBYTE(STACK[0x5C7]) < 0) {
    operator delete((void *)STACK[0x5B0]);
  }
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  if (SLOBYTE(STACK[0x5FF]) < 0) {
    operator delete((void *)STACK[0x5E8]);
  }
  if (SLOBYTE(STACK[0x5DF]) < 0) {
    operator delete((void *)STACK[0x5C8]);
  }
  if (SLOBYTE(STACK[0x637]) < 0) {
    operator delete((void *)STACK[0x620]);
  }
  if (SLOBYTE(STACK[0x617]) < 0) {
    operator delete((void *)STACK[0x600]);
  }
  if (*(char *)(v86 - 193) < 0) {
    operator delete(*(void **)(v86 - 216));
  }
  if (*(char *)(v86 - 225) < 0) {
    operator delete(*(void **)(v86 - 248));
  }
  if (*(char *)(v86 - 137) < 0) {
    operator delete(*(void **)(v86 - 160));
  }
  if (*(char *)(v86 - 169) < 0) {
    operator delete(*(void **)(v86 - 192));
  }
  if (*(char *)(v86 - 81) < 0) {
    operator delete(*(void **)(v86 - 104));
  }
  if (*(char *)(v86 - 113) < 0) {
    operator delete(*(void **)(v86 - 136));
  }
  if (*(char *)(v86 - 25) < 0) {
    operator delete(*(void **)(v86 - 48));
  }
  if (*(char *)(v86 - 57) < 0) {
    operator delete(*(void **)(v86 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263CAC24C()
{
}

void sub_263CAC254()
{
}

void sub_263CAC25C()
{
}

void sub_263CAC264()
{
}

void sub_263CAC26C()
{
}

void sub_263CAC274()
{
}

void sub_263CAC27C()
{
}

void sub_263CAC284()
{
}

void sub_263CAC28C()
{
}

void sub_263CAC294()
{
}

void sub_263CAC29C()
{
}

void sub_263CAC2A4()
{
}

void sub_263CAC2AC()
{
}

void sub_263CAC2B4()
{
}

void sub_263CAC2BC()
{
}

void sub_263CAC2C4()
{
}

void sub_263CAC2CC()
{
}

void sub_263CAC2D4()
{
}

void sub_263CAC2DC()
{
}

void sub_263CAC2E4()
{
}

void sub_263CAC2EC()
{
}

void sub_263CAC2F4()
{
}

void sub_263CAC2FC()
{
}

void sub_263CAC304()
{
}

void sub_263CAC30C()
{
}

void sub_263CAC314()
{
}

void sub_263CAC31C()
{
}

void sub_263CAC324()
{
}

void sub_263CAC32C()
{
}

void sub_263CAC334()
{
}

void sub_263CAC33C()
{
}

void sub_263CAC344()
{
}

void sub_263CAC34C()
{
}

void sub_263CAC354()
{
}

void sub_263CAC35C()
{
}

void sub_263CAC364()
{
}

void sub_263CAC36C()
{
}

void sub_263CAC374()
{
}

void sub_263CAC37C()
{
}

void sub_263CAC384()
{
}

void sub_263CAC38C()
{
}

void sub_263CAC394()
{
}

void sub_263CAC39C()
{
}

void sub_263CAC3A4()
{
}

void sub_263CAC3AC()
{
}

void sub_263CAC3B4()
{
}

void sub_263CAC3BC()
{
}

void sub_263CAC3C4()
{
}

void sub_263CAC3CC()
{
}

void sub_263CAC3D4()
{
}

void sub_263CAC3DC()
{
}

void sub_263CAC3E4()
{
}

void sub_263CAC3EC()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 1063) < 0) {
    operator delete(*(void **)(a1 + 1040));
  }
  if (*(char *)(a1 + 1031) < 0) {
    operator delete(*(void **)(a1 + 1008));
  }
  if (*(char *)(a1 + 999) < 0) {
    operator delete(*(void **)(a1 + 976));
  }
  if (*(char *)(a1 + 967) < 0) {
    operator delete(*(void **)(a1 + 944));
  }
  if (*(char *)(a1 + 935) < 0) {
    operator delete(*(void **)(a1 + 912));
  }
  if (*(char *)(a1 + 903) < 0) {
    operator delete(*(void **)(a1 + 880));
  }
  if (*(char *)(a1 + 871) < 0) {
    operator delete(*(void **)(a1 + 848));
  }
  if (*(char *)(a1 + 839) < 0) {
    operator delete(*(void **)(a1 + 816));
  }
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*(void **)(a1 + 784));
  }
  if (*(char *)(a1 + 767) < 0) {
    operator delete(*(void **)(a1 + 744));
  }
  if (*(char *)(a1 + 727) < 0) {
    operator delete(*(void **)(a1 + 704));
  }
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*(void **)(a1 + 624));
  }
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofGlonassBrdcastEphemerisCodec::XofGlonassBrdcastEphemerisCodec(XofGlonassBrdcastEphemerisCodec *this)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v107, "satID");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v108, &v107, 1, 24, 0);
  std::string::basic_string[abi:ne180100]<0>(&v103, "health");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v104, &v103, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v99, "timeOfDay");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v100, &v99, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v95, "sTn_tb");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v96, &v95, -2097152, 0x1FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v91, "sfn_tb");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v92, &v91, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v87, "sDeltaTn");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v88, &v87, -16, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v83, "eN");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v84, &v83, 0, 31, 0);
  std::string::basic_string[abi:ne180100]<0>(&v79, "p1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v80, &v79, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v75, "p2");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v76, &v75, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "m");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v72, &v71, 0, 3, 0);
  std::string::basic_string[abi:ne180100]<0>(&v67, "f");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v68, &v67, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v63, "sXn_tb");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v64, &v63, -67108864, 0x3FFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v59, "sXn_Vel_tb");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v60, &v59, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v55, "sYn_tb");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v56, &v55, -67108864, 0x3FFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v51, "sYn_Vel_tb");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v52, &v51, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v47, "sZn_tb");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v48, &v47, -67108864, 0x3FFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v43, "sZn_Vel_tb");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v44, &v43, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v39, "sXn_Acc_tb");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v40, &v39, -16, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "sYn_Acc_tb");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v36, &v35, -16, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v31, "sZn_Acc_tb");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v32, &v31, -16, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reserved");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v28, &__p, 0, 255, 0);
  *(_DWORD *)this = v108;
  *((void *)this + 3) = v110;
  *((_DWORD *)this + 8) = v104;
  uint64_t v2 = v100;
  uint64_t v3 = v102;
  *((void *)this + 7) = v106;
  *((void *)this + 8) = v2;
  *((void *)this + 11) = v3;
  uint64_t v4 = v92;
  uint64_t v5 = v94;
  *((void *)this + 16) = v98;
  *((void *)this + 17) = v4;
  *(_OWORD *)((char *)this + 8) = v109;
  long long v109 = 0uLL;
  uint64_t v110 = 0;
  *(_OWORD *)((char *)this + 40) = v105;
  uint64_t v106 = 0;
  long long v105 = 0uLL;
  *(_OWORD *)((char *)this + 72) = v101;
  long long v101 = 0uLL;
  uint64_t v102 = 0;
  long long v6 = v97;
  *((_OWORD *)this + 6) = v96;
  *((_OWORD *)this + 7) = v6;
  long long v97 = 0uLL;
  uint64_t v98 = 0;
  long long v7 = v93;
  *((void *)this + 20) = v5;
  *((_OWORD *)this + 9) = v7;
  long long v93 = 0uLL;
  uint64_t v94 = 0;
  *((_DWORD *)this + 42) = v88;
  long long v8 = v89;
  *((void *)this + 24) = v90;
  *((_OWORD *)this + 11) = v8;
  long long v89 = 0uLL;
  uint64_t v90 = 0;
  *((_DWORD *)this + 50) = v84;
  long long v9 = v85;
  *((void *)this + 28) = v86;
  *((_OWORD *)this + 13) = v9;
  long long v85 = 0uLL;
  uint64_t v86 = 0;
  *((_DWORD *)this + 58) = v80;
  long long v10 = v81;
  *((void *)this + 32) = v82;
  *((_OWORD *)this + 15) = v10;
  long long v81 = 0uLL;
  uint64_t v82 = 0;
  *((_DWORD *)this + 66) = v76;
  long long v11 = v77;
  *((void *)this + 36) = v78;
  *((_OWORD *)this + 17) = v11;
  long long v77 = 0uLL;
  uint64_t v78 = 0;
  *((_DWORD *)this + 74) = v72;
  long long v12 = v73;
  *((void *)this + 40) = v74;
  *((_OWORD *)this + 19) = v12;
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  *((_DWORD *)this + 82) = v68;
  long long v13 = v69;
  *((void *)this + 44) = v70;
  *((_OWORD *)this + 21) = v13;
  long long v69 = 0uLL;
  uint64_t v70 = 0;
  long long v14 = v65;
  *(_OWORD *)((char *)this + 360) = v64;
  *((void *)this + 49) = v66;
  *(_OWORD *)((char *)this + 376) = v14;
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  long long v15 = v60;
  long long v16 = v61;
  *((void *)this + 54) = v62;
  *((_OWORD *)this + 25) = v15;
  *((_OWORD *)this + 26) = v16;
  long long v61 = 0uLL;
  uint64_t v62 = 0;
  long long v17 = v57;
  *(_OWORD *)((char *)this + 440) = v56;
  *((void *)this + 59) = v58;
  *(_OWORD *)((char *)this + 456) = v17;
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  long long v18 = v52;
  long long v19 = v53;
  *((void *)this + 64) = v54;
  *((_OWORD *)this + 30) = v18;
  *((_OWORD *)this + 31) = v19;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  long long v20 = v49;
  *(_OWORD *)((char *)this + 520) = v48;
  *((void *)this + 69) = v50;
  *(_OWORD *)((char *)this + 536) = v20;
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  long long v21 = v44;
  long long v22 = v45;
  *((void *)this + 74) = v46;
  *((_OWORD *)this + 35) = v21;
  *((_OWORD *)this + 36) = v22;
  long long v45 = 0uLL;
  uint64_t v46 = 0;
  *((_DWORD *)this + 150) = v40;
  long long v23 = v41;
  *((void *)this + 78) = v42;
  *((_OWORD *)this + 38) = v23;
  long long v41 = 0uLL;
  uint64_t v42 = 0;
  *((_DWORD *)this + 158) = v36;
  long long v24 = v37;
  *((void *)this + 82) = v38;
  *((_OWORD *)this + 40) = v24;
  long long v37 = 0uLL;
  uint64_t v38 = 0;
  *((_DWORD *)this + 166) = v32;
  long long v25 = *(_OWORD *)v33;
  *((void *)this + 86) = v34;
  *((_OWORD *)this + 42) = v25;
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  *((_DWORD *)this + 174) = v28;
  long long v26 = v29;
  *((void *)this + 90) = v30;
  *((_OWORD *)this + 44) = v26;
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete((void *)v77);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete((void *)v85);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)v89);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)v93);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98) < 0) {
    operator delete((void *)v97);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete((void *)v101);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106) < 0) {
    operator delete((void *)v105);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v110) < 0) {
    operator delete((void *)v109);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
}

void sub_263CACF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete((void *)STACK[0x348]);
  }
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  if (*(char *)(v86 - 193) < 0) {
    operator delete(*(void **)(v86 - 216));
  }
  if (*(char *)(v86 - 233) < 0) {
    operator delete(*(void **)(v86 - 256));
  }
  if (*(char *)(v86 - 137) < 0) {
    operator delete(*(void **)(v86 - 160));
  }
  if (*(char *)(v86 - 169) < 0) {
    operator delete(*(void **)(v86 - 192));
  }
  if (*(char *)(v86 - 81) < 0) {
    operator delete(*(void **)(v86 - 104));
  }
  if (*(char *)(v86 - 113) < 0) {
    operator delete(*(void **)(v86 - 136));
  }
  if (*(char *)(v86 - 25) < 0) {
    operator delete(*(void **)(v86 - 48));
  }
  if (*(char *)(v86 - 57) < 0) {
    operator delete(*(void **)(v86 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263CAD200()
{
}

void sub_263CAD208()
{
}

void sub_263CAD210()
{
}

void sub_263CAD218()
{
}

void sub_263CAD220()
{
}

void sub_263CAD228()
{
}

void sub_263CAD230()
{
}

void sub_263CAD238()
{
}

void sub_263CAD240()
{
}

void sub_263CAD248()
{
}

void sub_263CAD250()
{
}

void sub_263CAD258()
{
}

void sub_263CAD260()
{
}

void sub_263CAD268()
{
}

void sub_263CAD270()
{
}

void sub_263CAD278()
{
}

void sub_263CAD280()
{
}

void sub_263CAD288()
{
}

void sub_263CAD290()
{
}

void sub_263CAD298()
{
}

void sub_263CAD2A0()
{
}

void sub_263CAD2A8()
{
}

void sub_263CAD2B0()
{
}

void sub_263CAD2B8()
{
}

void sub_263CAD2C0()
{
}

void sub_263CAD2C8()
{
}

void sub_263CAD2D0()
{
}

void sub_263CAD2D8()
{
}

void sub_263CAD2E0()
{
}

void sub_263CAD2E8()
{
}

void sub_263CAD2F0()
{
}

void sub_263CAD2F8()
{
}

void sub_263CAD300()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 727) < 0) {
    operator delete(*(void **)(a1 + 704));
  }
  if (*(char *)(a1 + 695) < 0) {
    operator delete(*(void **)(a1 + 672));
  }
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*(void **)(a1 + 576));
  }
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofBeidouEphemerisCodec::XofBeidouEphemerisCodec(XofBeidouEphemerisCodec *this)
{
  uint64_t v269 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v265, "satID");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v266, &v265, 1, 63, 0);
  std::string::basic_string[abi:ne180100]<0>(&v261, "hs");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v262, &v261, 0, 3, 0);
  std::string::basic_string[abi:ne180100]<0>(&v257, "wn");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v258, &v257, 0, 0x1FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v253, "sSOW");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v254, &v253, 0, 201599, 0);
  std::string::basic_string[abi:ne180100]<0>(&v249, "difB2a");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v250, &v249, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v245, "sifB2a");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v246, &v245, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v241, "aifB2a");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v242, &v241, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v237, "sismai");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v238, &v237, 0, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v233, "difB1c");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v234, &v233, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v229, "sifB1c");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v230, &v229, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v225, "aifB1c");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v226, &v225, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v221, "UraiEst");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v222, &v221, -16, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v217, "Iodc");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v218, &v217, 0, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v213, "sToe");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v214, &v213, 0, 2016, 0);
  std::string::basic_string[abi:ne180100]<0>(&v209, "satType");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v210, &v209, 0, 3, 0);
  std::string::basic_string[abi:ne180100]<0>(&v205, "fitHours");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v206, &v205, 0, 6, 0);
  std::string::basic_string[abi:ne180100]<0>(&v201, "sTgdB2ap_Corr");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v202, &v201, -128, 127, 0);
  std::string::basic_string[abi:ne180100]<0>(&v197, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v198, &v197, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v193, "sDeltaA");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v194, &v193, -33554432, 0x1FFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v189, "sADot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v190, &v189, -16777216, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v185, "sDeltaN");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v186, &v185, -65536, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v181, "sDeltaNDot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v182, &v181, -4194304, 0x3FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v177, "sM0");
  XofIntegralType<long long>::XofIntegralType((uint64_t)v178, &v177);
  std::string::basic_string[abi:ne180100]<0>(&v173, "sE");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v174, &v173, 0, 0x1FFFFFFFFLL, 0);
  std::string::basic_string[abi:ne180100]<0>(&v169, "sW");
  XofIntegralType<long long>::XofIntegralType((uint64_t)v170, &v169);
  std::string::basic_string[abi:ne180100]<0>(&v165, "sOmega0");
  XofIntegralType<long long>::XofIntegralType((uint64_t)v166, &v165);
  std::string::basic_string[abi:ne180100]<0>(&v161, "sI0");
  XofIntegralType<long long>::XofIntegralType((uint64_t)v162, &v161);
  std::string::basic_string[abi:ne180100]<0>(&v157, "sOmegaDot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v158, &v157, -262144, 0x3FFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v153, "sIDot");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v154, &v153, -16384, 0x3FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v149, "sToc");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v150, &v149, 0, 2016, 0);
  std::string::basic_string[abi:ne180100]<0>(&v145, "sCic");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v146, &v145, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v141, "sCis");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v142, &v141, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v137, "sCrc");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v138, &v137, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v133, "sCrs");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v134, &v133, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v129, "sCuc");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v130, &v129, -1048576, 0xFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v125, "sCus");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v126, &v125, -1048576, 0xFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v121, "sAf0n");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v122, &v121, -16777216, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v117, "sAf1n");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v118, &v117, -2097152, 0x1FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v113, "sAf2n");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v114, &v113, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v109, "sTgdB2ap");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v110, &v109, -2048, 2047, 0);
  std::string::basic_string[abi:ne180100]<0>(&v105, "sIscB2ad");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v106, &v105, -2048, 2047, 0);
  std::string::basic_string[abi:ne180100]<0>(&v101, "sTgdB1cp");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v102, &v101, -2048, 2047, 0);
  std::string::basic_string[abi:ne180100]<0>(&v97, "sIscB1cd");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v98, &v97, -2048, 2047, 0);
  std::string::basic_string[abi:ne180100]<0>(&v93, "sTop");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v94, &v93, 0, 2016, 0);
  std::string::basic_string[abi:ne180100]<0>(&v89, "sisaOcb");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v90, &v89, 0, 31, 0);
  std::string::basic_string[abi:ne180100]<0>(&v85, "sisaOc1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v86, &v85, 0, 7, 0);
  std::string::basic_string[abi:ne180100]<0>(&v81, "sisaOc2");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v82, &v81, 0, 7, 0);
  std::string::basic_string[abi:ne180100]<0>(&v77, "sisaOe");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v78, &v77, 0, 31, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reserved2");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v74, &__p, 0, -1, 0);
  *(_DWORD *)this = v266;
  *((void *)this + 3) = v268;
  *((_DWORD *)this + 8) = v262;
  uint64_t v2 = v258;
  uint64_t v3 = v260;
  *((void *)this + 7) = v264;
  *((void *)this + 8) = v2;
  *(_OWORD *)((char *)this + 8) = v267;
  long long v267 = 0uLL;
  uint64_t v268 = 0;
  *(_OWORD *)((char *)this + 40) = v263;
  uint64_t v264 = 0;
  long long v263 = 0uLL;
  long long v4 = v259;
  *((void *)this + 11) = v3;
  *(_OWORD *)((char *)this + 72) = v4;
  long long v259 = 0uLL;
  uint64_t v260 = 0;
  long long v5 = v254;
  long long v6 = v255;
  *((void *)this + 16) = v256;
  *((_OWORD *)this + 6) = v5;
  *((_OWORD *)this + 7) = v6;
  long long v255 = 0uLL;
  uint64_t v256 = 0;
  *((_DWORD *)this + 34) = v250;
  long long v7 = v251;
  *((void *)this + 20) = v252;
  *((_OWORD *)this + 9) = v7;
  long long v251 = 0uLL;
  uint64_t v252 = 0;
  *((_DWORD *)this + 42) = v246;
  long long v8 = v247;
  *((void *)this + 24) = v248;
  *((_OWORD *)this + 11) = v8;
  long long v247 = 0uLL;
  uint64_t v248 = 0;
  *((_DWORD *)this + 50) = v242;
  long long v9 = v243;
  *((void *)this + 28) = v244;
  *((_OWORD *)this + 13) = v9;
  long long v243 = 0uLL;
  uint64_t v244 = 0;
  *((_DWORD *)this + 58) = v238;
  long long v10 = v239;
  *((void *)this + 32) = v240;
  *((_OWORD *)this + 15) = v10;
  long long v239 = 0uLL;
  uint64_t v240 = 0;
  *((_DWORD *)this + 66) = v234;
  long long v11 = v235;
  *((void *)this + 36) = v236;
  *((_OWORD *)this + 17) = v11;
  long long v235 = 0uLL;
  uint64_t v236 = 0;
  *((_DWORD *)this + 74) = v230;
  long long v12 = v231;
  *((void *)this + 40) = v232;
  *((_OWORD *)this + 19) = v12;
  long long v231 = 0uLL;
  uint64_t v232 = 0;
  *((_DWORD *)this + 82) = v226;
  long long v13 = v227;
  *((void *)this + 44) = v228;
  *((_OWORD *)this + 21) = v13;
  long long v227 = 0uLL;
  uint64_t v228 = 0;
  *((_DWORD *)this + 90) = v222;
  uint64_t v14 = v224;
  *((_OWORD *)this + 23) = v223;
  long long v223 = 0uLL;
  uint64_t v224 = 0;
  uint64_t v15 = v218;
  uint64_t v16 = v220;
  *((void *)this + 48) = v14;
  *((void *)this + 49) = v15;
  *((_OWORD *)this + 25) = v219;
  long long v219 = 0uLL;
  uint64_t v220 = 0;
  uint64_t v17 = v214;
  uint64_t v18 = v216;
  *((void *)this + 52) = v16;
  *((void *)this + 53) = v17;
  long long v19 = v215;
  *((void *)this + 56) = v18;
  *((_OWORD *)this + 27) = v19;
  long long v215 = 0uLL;
  uint64_t v216 = 0;
  *((_DWORD *)this + 114) = v210;
  long long v20 = v211;
  *((void *)this + 60) = v212;
  *((_OWORD *)this + 29) = v20;
  long long v211 = 0uLL;
  uint64_t v212 = 0;
  *((_DWORD *)this + 122) = v206;
  long long v21 = v207;
  *((void *)this + 64) = v208;
  *((_OWORD *)this + 31) = v21;
  long long v207 = 0uLL;
  uint64_t v208 = 0;
  *((_DWORD *)this + 130) = v202;
  long long v22 = v203;
  *((void *)this + 68) = v204;
  *((_OWORD *)this + 33) = v22;
  long long v203 = 0uLL;
  uint64_t v204 = 0;
  *((_DWORD *)this + 138) = v198;
  long long v23 = v199;
  *((void *)this + 72) = v200;
  *((_OWORD *)this + 35) = v23;
  long long v199 = 0uLL;
  uint64_t v200 = 0;
  long long v24 = v195;
  *(_OWORD *)((char *)this + 584) = v194;
  *((void *)this + 77) = v196;
  *(_OWORD *)((char *)this + 600) = v24;
  long long v195 = 0uLL;
  uint64_t v196 = 0;
  long long v25 = v190;
  long long v26 = v191;
  *((void *)this + 82) = v192;
  *((_OWORD *)this + 39) = v25;
  *((_OWORD *)this + 40) = v26;
  long long v191 = 0uLL;
  uint64_t v192 = 0;
  long long v27 = v187;
  *(_OWORD *)((char *)this + 664) = v186;
  *((void *)this + 87) = v188;
  *(_OWORD *)((char *)this + 680) = v27;
  long long v187 = 0uLL;
  uint64_t v188 = 0;
  long long v28 = v182;
  long long v29 = v183;
  *((void *)this + 92) = v184;
  *((_OWORD *)this + 44) = v28;
  *((_OWORD *)this + 45) = v29;
  long long v183 = 0uLL;
  uint64_t v184 = 0;
  long long v30 = v178[1];
  *(_OWORD *)((char *)this + 744) = v178[0];
  *(_OWORD *)((char *)this + 760) = v30;
  long long v31 = v179;
  *((void *)this + 99) = v180;
  *(_OWORD *)((char *)this + 776) = v31;
  long long v179 = 0uLL;
  uint64_t v180 = 0;
  long long v32 = v174[1];
  *((_OWORD *)this + 50) = v174[0];
  *((_OWORD *)this + 51) = v32;
  long long v33 = v175;
  *((void *)this + 106) = v176;
  *((_OWORD *)this + 52) = v33;
  long long v175 = 0uLL;
  uint64_t v176 = 0;
  long long v34 = v170[1];
  *(_OWORD *)((char *)this + 856) = v170[0];
  *(_OWORD *)((char *)this + 872) = v34;
  long long v35 = v171;
  *((void *)this + 113) = v172;
  *(_OWORD *)((char *)this + 888) = v35;
  long long v171 = 0uLL;
  uint64_t v172 = 0;
  long long v36 = v166[1];
  *((_OWORD *)this + 57) = v166[0];
  *((_OWORD *)this + 58) = v36;
  long long v37 = v167;
  *((void *)this + 120) = v168;
  *((_OWORD *)this + 59) = v37;
  long long v167 = 0uLL;
  uint64_t v168 = 0;
  long long v38 = v162[1];
  *(_OWORD *)((char *)this + 968) = v162[0];
  *(_OWORD *)((char *)this + 984) = v38;
  long long v39 = v163;
  *((void *)this + 127) = v164;
  *(_OWORD *)((char *)this + 1000) = v39;
  long long v163 = 0uLL;
  uint64_t v164 = 0;
  long long v40 = v159;
  *((_OWORD *)this + 64) = v158;
  *((void *)this + 132) = v160;
  *((_OWORD *)this + 65) = v40;
  long long v159 = 0uLL;
  uint64_t v160 = 0;
  uint64_t v41 = v156;
  *((void *)this + 133) = v154;
  long long v42 = v155;
  *((void *)this + 136) = v41;
  *((_OWORD *)this + 67) = v42;
  long long v155 = 0uLL;
  uint64_t v156 = 0;
  uint64_t v43 = v152;
  *((void *)this + 137) = v150;
  long long v44 = v151;
  *((void *)this + 140) = v43;
  *((_OWORD *)this + 69) = v44;
  long long v151 = 0uLL;
  uint64_t v152 = 0;
  uint64_t v45 = v148;
  *((void *)this + 141) = v146;
  long long v46 = v147;
  *((void *)this + 144) = v45;
  *((_OWORD *)this + 71) = v46;
  long long v147 = 0uLL;
  uint64_t v148 = 0;
  uint64_t v47 = v144;
  *((void *)this + 145) = v142;
  long long v48 = v143;
  *((void *)this + 148) = v47;
  *((_OWORD *)this + 73) = v48;
  long long v143 = 0uLL;
  uint64_t v144 = 0;
  long long v49 = v139;
  *(_OWORD *)((char *)this + 1192) = v138;
  *((void *)this + 153) = v140;
  *(_OWORD *)((char *)this + 1208) = v49;
  long long v139 = 0uLL;
  uint64_t v140 = 0;
  long long v50 = v135;
  *((_OWORD *)this + 77) = v134;
  *((void *)this + 158) = v136;
  *((_OWORD *)this + 78) = v50;
  long long v135 = 0uLL;
  uint64_t v136 = 0;
  long long v51 = v131;
  *(_OWORD *)((char *)this + 1272) = v130;
  *((void *)this + 163) = v132;
  *(_OWORD *)((char *)this + 1288) = v51;
  long long v131 = 0uLL;
  uint64_t v132 = 0;
  long long v52 = v127;
  *((_OWORD *)this + 82) = v126;
  *((void *)this + 168) = v128;
  *((_OWORD *)this + 83) = v52;
  long long v127 = 0uLL;
  uint64_t v128 = 0;
  long long v53 = v123;
  *(_OWORD *)((char *)this + 1352) = v122;
  *((void *)this + 173) = v124;
  *(_OWORD *)((char *)this + 1368) = v53;
  long long v123 = 0uLL;
  uint64_t v124 = 0;
  long long v54 = v119;
  *((_OWORD *)this + 87) = v118;
  *((void *)this + 178) = v120;
  *((_OWORD *)this + 88) = v54;
  long long v119 = 0uLL;
  uint64_t v120 = 0;
  uint64_t v55 = v116;
  *((void *)this + 179) = v114;
  long long v56 = v115;
  *((void *)this + 182) = v55;
  *((_OWORD *)this + 90) = v56;
  long long v115 = 0uLL;
  uint64_t v116 = 0;
  uint64_t v57 = v112;
  *((void *)this + 183) = v110;
  long long v58 = v111;
  *((void *)this + 186) = v57;
  *((_OWORD *)this + 92) = v58;
  long long v111 = 0uLL;
  uint64_t v112 = 0;
  uint64_t v59 = v108;
  *((void *)this + 187) = v106;
  long long v60 = v107;
  *((void *)this + 190) = v59;
  *((_OWORD *)this + 94) = v60;
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  uint64_t v61 = v104;
  *((void *)this + 191) = v102;
  long long v62 = v103;
  *((void *)this + 194) = v61;
  *((_OWORD *)this + 96) = v62;
  long long v103 = 0uLL;
  uint64_t v104 = 0;
  uint64_t v63 = v100;
  *((void *)this + 195) = v98;
  long long v64 = v99;
  uint64_t v65 = v94;
  uint64_t v66 = v96;
  *((void *)this + 198) = v63;
  *((_OWORD *)this + 98) = v64;
  long long v99 = 0uLL;
  uint64_t v100 = 0;
  *((void *)this + 199) = v65;
  long long v67 = v95;
  *((void *)this + 202) = v66;
  *((_OWORD *)this + 100) = v67;
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  *((_DWORD *)this + 406) = v90;
  long long v68 = v91;
  *((void *)this + 206) = v92;
  *((_OWORD *)this + 102) = v68;
  long long v91 = 0uLL;
  uint64_t v92 = 0;
  *((_DWORD *)this + 414) = v86;
  long long v69 = v87;
  *((void *)this + 210) = v88;
  *((_OWORD *)this + 104) = v69;
  long long v87 = 0uLL;
  uint64_t v88 = 0;
  *((_DWORD *)this + 422) = v82;
  long long v70 = v83;
  *((void *)this + 214) = v84;
  *((_OWORD *)this + 106) = v70;
  long long v83 = 0uLL;
  uint64_t v84 = 0;
  *((_DWORD *)this + 430) = v78;
  long long v71 = *(_OWORD *)v79;
  *((void *)this + 218) = v80;
  *((_OWORD *)this + 108) = v71;
  v79[0] = 0;
  v79[1] = 0;
  uint64_t v80 = 0;
  long long v72 = v75;
  *(_OWORD *)((char *)this + 1752) = v74;
  LODWORD(v65) = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  *((void *)this + 223) = v76;
  *(_OWORD *)((char *)this + 1768) = v72;
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  if ((v65 & 0x80000000) != 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80) < 0) {
      operator delete(v79[0]);
    }
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88) < 0) {
    operator delete((void *)v87);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete((void *)v91);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100) < 0) {
    operator delete((void *)v99);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108) < 0) {
    operator delete((void *)v107);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v112) < 0) {
    operator delete((void *)v111);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v116) < 0) {
    operator delete((void *)v115);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v124) < 0) {
    operator delete((void *)v123);
  }
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v128) < 0) {
    operator delete((void *)v127);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v132) < 0) {
    operator delete((void *)v131);
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136) < 0) {
    operator delete((void *)v135);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v140) < 0) {
    operator delete((void *)v139);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v148) < 0) {
    operator delete((void *)v147);
  }
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v152) < 0) {
    operator delete((void *)v151);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v156) < 0) {
    operator delete((void *)v155);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v160) < 0) {
    operator delete((void *)v159);
  }
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v164) < 0) {
    operator delete((void *)v163);
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v168) < 0) {
    operator delete((void *)v167);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v172) < 0) {
    operator delete((void *)v171);
  }
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v176) < 0) {
    operator delete((void *)v175);
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v180) < 0) {
    operator delete((void *)v179);
  }
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v184) < 0) {
    operator delete((void *)v183);
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v188) < 0) {
    operator delete((void *)v187);
  }
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v185.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v192) < 0) {
    operator delete((void *)v191);
  }
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196) < 0) {
    operator delete((void *)v195);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v200) < 0) {
    operator delete((void *)v199);
  }
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v204) < 0) {
    operator delete((void *)v203);
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v208) < 0) {
    operator delete((void *)v207);
  }
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v205.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v212) < 0) {
    operator delete((void *)v211);
  }
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v216) < 0) {
    operator delete((void *)v215);
  }
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v213.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v220) < 0) {
    operator delete((void *)v219);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v224) < 0) {
    operator delete((void *)v223);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v228) < 0) {
    operator delete((void *)v227);
  }
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v232) < 0) {
    operator delete((void *)v231);
  }
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236) < 0) {
    operator delete((void *)v235);
  }
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v240) < 0) {
    operator delete((void *)v239);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v244) < 0) {
    operator delete((void *)v243);
  }
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248) < 0) {
    operator delete((void *)v247);
  }
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v252) < 0) {
    operator delete((void *)v251);
  }
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v256) < 0) {
    operator delete((void *)v255);
  }
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v260) < 0) {
    operator delete((void *)v259);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v264) < 0) {
    operator delete((void *)v263);
  }
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v261.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v268) < 0) {
    operator delete((void *)v267);
  }
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v265.__r_.__value_.__l.__data_);
  }
}

void sub_263CAE960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a87 < 0) {
    operator delete(a86);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x45F]) < 0) {
    operator delete((void *)STACK[0x448]);
  }
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  if (SLOBYTE(STACK[0x50F]) < 0) {
    operator delete((void *)STACK[0x4F8]);
  }
  if (SLOBYTE(STACK[0x4E7]) < 0) {
    operator delete((void *)STACK[0x4D0]);
  }
  if (SLOBYTE(STACK[0x55F]) < 0) {
    operator delete((void *)STACK[0x548]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete((void *)STACK[0x510]);
  }
  if (SLOBYTE(STACK[0x5AF]) < 0) {
    operator delete((void *)STACK[0x598]);
  }
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  if (SLOBYTE(STACK[0x5FF]) < 0) {
    operator delete((void *)STACK[0x5E8]);
  }
  if (SLOBYTE(STACK[0x5C7]) < 0) {
    operator delete((void *)STACK[0x5B0]);
  }
  if (SLOBYTE(STACK[0x64F]) < 0) {
    operator delete((void *)STACK[0x638]);
  }
  if (SLOBYTE(STACK[0x617]) < 0) {
    operator delete((void *)STACK[0x600]);
  }
  if (SLOBYTE(STACK[0x69F]) < 0) {
    operator delete((void *)STACK[0x688]);
  }
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  if (SLOBYTE(STACK[0x6DF]) < 0) {
    operator delete((void *)STACK[0x6C8]);
  }
  if (SLOBYTE(STACK[0x6B7]) < 0) {
    operator delete((void *)STACK[0x6A0]);
  }
  if (SLOBYTE(STACK[0x71F]) < 0) {
    operator delete((void *)STACK[0x708]);
  }
  if (SLOBYTE(STACK[0x6F7]) < 0) {
    operator delete((void *)STACK[0x6E0]);
  }
  if (SLOBYTE(STACK[0x75F]) < 0) {
    operator delete((void *)STACK[0x748]);
  }
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  if (SLOBYTE(STACK[0x777]) < 0) {
    operator delete((void *)STACK[0x760]);
  }
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  if (SLOBYTE(STACK[0x7B7]) < 0) {
    operator delete((void *)STACK[0x7A0]);
  }
  if (SLOBYTE(STACK[0x80F]) < 0) {
    operator delete((void *)STACK[0x7F8]);
  }
  if (SLOBYTE(STACK[0x7EF]) < 0) {
    operator delete((void *)STACK[0x7D8]);
  }
  if (SLOBYTE(STACK[0x847]) < 0) {
    operator delete((void *)STACK[0x830]);
  }
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  if (SLOBYTE(STACK[0x87F]) < 0) {
    operator delete((void *)STACK[0x868]);
  }
  if (SLOBYTE(STACK[0x85F]) < 0) {
    operator delete((void *)STACK[0x848]);
  }
  if (SLOBYTE(STACK[0x8B7]) < 0) {
    operator delete((void *)STACK[0x8A0]);
  }
  if (SLOBYTE(STACK[0x897]) < 0) {
    operator delete((void *)STACK[0x880]);
  }
  if (SLOBYTE(STACK[0x8EF]) < 0) {
    operator delete((void *)STACK[0x8D8]);
  }
  if (SLOBYTE(STACK[0x8CF]) < 0) {
    operator delete((void *)STACK[0x8B8]);
  }
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  if (SLOBYTE(STACK[0x907]) < 0) {
    operator delete((void *)STACK[0x8F0]);
  }
  if (SLOBYTE(STACK[0x95F]) < 0) {
    operator delete((void *)STACK[0x948]);
  }
  if (SLOBYTE(STACK[0x93F]) < 0) {
    operator delete((void *)STACK[0x928]);
  }
  if (SLOBYTE(STACK[0x997]) < 0) {
    operator delete((void *)STACK[0x980]);
  }
  if (SLOBYTE(STACK[0x977]) < 0) {
    operator delete((void *)STACK[0x960]);
  }
  if (SLOBYTE(STACK[0x9CF]) < 0) {
    operator delete((void *)STACK[0x9B8]);
  }
  if (SLOBYTE(STACK[0x9AF]) < 0) {
    operator delete((void *)STACK[0x998]);
  }
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  if (SLOBYTE(STACK[0x9E7]) < 0) {
    operator delete((void *)STACK[0x9D0]);
  }
  if (SLOBYTE(STACK[0xA3F]) < 0) {
    operator delete((void *)STACK[0xA28]);
  }
  if (SLOBYTE(STACK[0xA1F]) < 0) {
    operator delete((void *)STACK[0xA08]);
  }
  if (SLOBYTE(STACK[0xA77]) < 0) {
    operator delete((void *)STACK[0xA60]);
  }
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  if (SLOBYTE(STACK[0xAAF]) < 0) {
    operator delete((void *)STACK[0xA98]);
  }
  if (SLOBYTE(STACK[0xA8F]) < 0) {
    operator delete((void *)STACK[0xA78]);
  }
  if (*(char *)(v87 - 193) < 0) {
    operator delete(*(void **)(v87 - 216));
  }
  if (*(char *)(v87 - 233) < 0) {
    operator delete(*(void **)(v87 - 256));
  }
  if (*(char *)(v87 - 137) < 0) {
    operator delete(*(void **)(v87 - 160));
  }
  if (*(char *)(v87 - 169) < 0) {
    operator delete(*(void **)(v87 - 192));
  }
  if (*(char *)(v87 - 81) < 0) {
    operator delete(*(void **)(v87 - 104));
  }
  if (*(char *)(v87 - 113) < 0) {
    operator delete(*(void **)(v87 - 136));
  }
  if (*(char *)(v87 - 25) < 0) {
    operator delete(*(void **)(v87 - 48));
  }
  if (*(char *)(v87 - 57) < 0) {
    operator delete(*(void **)(v87 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263CAEFBC()
{
}

void sub_263CAEFC4()
{
}

void sub_263CAEFCC()
{
}

void sub_263CAEFD4()
{
}

void sub_263CAEFDC()
{
}

void sub_263CAEFE4()
{
}

void sub_263CAEFEC()
{
}

void sub_263CAEFF4()
{
}

void sub_263CAEFFC()
{
}

void sub_263CAF004()
{
}

void sub_263CAF00C()
{
}

void sub_263CAF014()
{
}

void sub_263CAF01C()
{
}

void sub_263CAF024()
{
}

void sub_263CAF02C()
{
}

void sub_263CAF034()
{
}

void sub_263CAF03C()
{
}

void sub_263CAF044()
{
}

void sub_263CAF04C()
{
}

void sub_263CAF054()
{
}

void sub_263CAF05C()
{
}

void sub_263CAF064()
{
}

void sub_263CAF06C()
{
}

void sub_263CAF074()
{
}

void sub_263CAF07C()
{
}

void sub_263CAF084()
{
}

void sub_263CAF08C()
{
}

void sub_263CAF094()
{
}

void sub_263CAF09C()
{
}

void sub_263CAF0A4()
{
}

void sub_263CAF0AC()
{
}

void sub_263CAF0B4()
{
}

void sub_263CAF0BC()
{
}

void sub_263CAF0C4()
{
}

void sub_263CAF0CC()
{
}

void sub_263CAF0D4()
{
}

void sub_263CAF0DC()
{
}

void sub_263CAF0E4()
{
}

void sub_263CAF0EC()
{
}

void sub_263CAF0F4()
{
}

void sub_263CAF0FC()
{
}

void sub_263CAF104()
{
}

void sub_263CAF10C()
{
}

void sub_263CAF114()
{
}

void sub_263CAF11C()
{
}

void sub_263CAF124()
{
}

void sub_263CAF12C()
{
}

void sub_263CAF134()
{
}

void sub_263CAF13C()
{
}

void sub_263CAF144()
{
}

void sub_263CAF14C()
{
}

void sub_263CAF154()
{
}

void sub_263CAF15C()
{
}

void sub_263CAF164()
{
}

void sub_263CAF16C()
{
}

void sub_263CAF174()
{
}

void sub_263CAF17C()
{
}

void sub_263CAF184()
{
}

void sub_263CAF18C()
{
}

void sub_263CAF194()
{
}

void sub_263CAF19C()
{
}

void sub_263CAF1A4()
{
}

void sub_263CAF1AC()
{
}

void sub_263CAF1B4()
{
}

void sub_263CAF1BC()
{
}

void sub_263CAF1C4()
{
}

void sub_263CAF1CC()
{
}

void sub_263CAF1D4()
{
}

void sub_263CAF1DC()
{
}

void sub_263CAF1E4()
{
}

void sub_263CAF1EC()
{
}

void sub_263CAF1F4()
{
}

void sub_263CAF1FC()
{
}

void sub_263CAF204()
{
}

void sub_263CAF20C()
{
}

void sub_263CAF214()
{
}

void sub_263CAF21C()
{
}

void sub_263CAF224()
{
}

void sub_263CAF22C()
{
}

void sub_263CAF234()
{
}

void sub_263CAF23C()
{
}

void sub_263CAF244()
{
}

void sub_263CAF24C()
{
}

void sub_263CAF254()
{
}

void sub_263CAF25C()
{
}

void sub_263CAF264()
{
}

void sub_263CAF26C()
{
}

void sub_263CAF274()
{
}

void sub_263CAF27C()
{
}

uint64_t XofIntegralType<long long>::XofIntegralType(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::string::operator=((std::string *)(a1 + 32), a2);
  *(_OWORD *)a1 = xmmword_263D82550;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_263CAF308(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 1791) < 0) {
    operator delete(*(void **)(a1 + 1768));
  }
  if (*(char *)(a1 + 1751) < 0) {
    operator delete(*(void **)(a1 + 1728));
  }
  if (*(char *)(a1 + 1719) < 0) {
    operator delete(*(void **)(a1 + 1696));
  }
  if (*(char *)(a1 + 1687) < 0) {
    operator delete(*(void **)(a1 + 1664));
  }
  if (*(char *)(a1 + 1655) < 0) {
    operator delete(*(void **)(a1 + 1632));
  }
  if (*(char *)(a1 + 1623) < 0) {
    operator delete(*(void **)(a1 + 1600));
  }
  if (*(char *)(a1 + 1591) < 0) {
    operator delete(*(void **)(a1 + 1568));
  }
  if (*(char *)(a1 + 1559) < 0) {
    operator delete(*(void **)(a1 + 1536));
  }
  if (*(char *)(a1 + 1527) < 0) {
    operator delete(*(void **)(a1 + 1504));
  }
  if (*(char *)(a1 + 1495) < 0) {
    operator delete(*(void **)(a1 + 1472));
  }
  if (*(char *)(a1 + 1463) < 0) {
    operator delete(*(void **)(a1 + 1440));
  }
  if (*(char *)(a1 + 1431) < 0) {
    operator delete(*(void **)(a1 + 1408));
  }
  if (*(char *)(a1 + 1391) < 0) {
    operator delete(*(void **)(a1 + 1368));
  }
  if (*(char *)(a1 + 1351) < 0) {
    operator delete(*(void **)(a1 + 1328));
  }
  if (*(char *)(a1 + 1311) < 0) {
    operator delete(*(void **)(a1 + 1288));
  }
  if (*(char *)(a1 + 1271) < 0) {
    operator delete(*(void **)(a1 + 1248));
  }
  if (*(char *)(a1 + 1231) < 0) {
    operator delete(*(void **)(a1 + 1208));
  }
  if (*(char *)(a1 + 1191) < 0) {
    operator delete(*(void **)(a1 + 1168));
  }
  if (*(char *)(a1 + 1159) < 0) {
    operator delete(*(void **)(a1 + 1136));
  }
  if (*(char *)(a1 + 1127) < 0) {
    operator delete(*(void **)(a1 + 1104));
  }
  if (*(char *)(a1 + 1095) < 0) {
    operator delete(*(void **)(a1 + 1072));
  }
  if (*(char *)(a1 + 1063) < 0) {
    operator delete(*(void **)(a1 + 1040));
  }
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*(void **)(a1 + 1000));
  }
  if (*(char *)(a1 + 967) < 0) {
    operator delete(*(void **)(a1 + 944));
  }
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*(void **)(a1 + 888));
  }
  if (*(char *)(a1 + 855) < 0) {
    operator delete(*(void **)(a1 + 832));
  }
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  if (*(char *)(a1 + 743) < 0) {
    operator delete(*(void **)(a1 + 720));
  }
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*(void **)(a1 + 600));
  }
  if (*(char *)(a1 + 583) < 0) {
    operator delete(*(void **)(a1 + 560));
  }
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*(void **)(a1 + 528));
  }
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofNavicEphemerisCodec::XofNavicEphemerisCodec(XofNavicEphemerisCodec *this)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v154, "satID");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v155, &v154, 1, 14, 0);
  std::string::basic_string[abi:ne180100]<0>(&v150, "weekNo");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v151, &v150, 0, 0x1FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v146, "sToc");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v147, &v146, 0, 37799, 0);
  std::string::basic_string[abi:ne180100]<0>(&v142, "IODEC");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v143, &v142, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v138, "L5HealthFlag");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v139, &v138, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v134, "SHealthFlag");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v135, &v134, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v130, "AlertFlag");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v131, &v130, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v126, "FitHours");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v127, &v126, 1, 6, 0);
  std::string::basic_string[abi:ne180100]<0>(&v122, "reserved1");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v123, &v122, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v118, "reserved2");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v119, &v118, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v114, "URAI");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v115, &v114, -16, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v110, "sAf0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v111, &v110, -33554432, 0x1FFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v106, "sAf1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v107, &v106, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v102, "sAf2");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v103, &v102, -128, 127, -1);
  std::string::basic_string[abi:ne180100]<0>(&v98, "sTgd");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v99, &v98, -32768, 0x7FFF, -1);
  std::string::basic_string[abi:ne180100]<0>(&v94, "sIDOT");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v95, &v94, -8192, 0x1FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v90, "sAPowerHalf");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v91, &v90, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v86, "sE");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v87, &v86, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v82, "sI0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v83, &v82, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v78, "sOmega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v79, &v78, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v74, "sW");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v75, &v74, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v70, "sM0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v71, &v70, 0x80000000, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v66, "sDeltaN");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v67, &v66, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v62, "sOmegaDot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v63, &v62, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v58, "sCuc");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v59, &v58, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v54, "sCus");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v55, &v54, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v50, "sCic");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v51, &v50, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v46, "sCis");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v47, &v46, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v42, "sCrc");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v43, &v42, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sCrs");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v39, &__p, -32768, 0x7FFF, 0);
  *(_OWORD *)((char *)this + 8) = v156;
  *(_OWORD *)((char *)this + 40) = v152;
  *(_OWORD *)((char *)this + 72) = v148;
  *(_OWORD *)((char *)this + 104) = v144;
  *(_OWORD *)((char *)this + 136) = v140;
  *(_OWORD *)((char *)this + 168) = v136;
  *(_OWORD *)((char *)this + 200) = v132;
  *(_OWORD *)((char *)this + 232) = v128;
  long long v2 = v124;
  *((_OWORD *)this + 16) = v123;
  *((_OWORD *)this + 17) = v2;
  *((_OWORD *)this + 19) = v120;
  *((_OWORD *)this + 21) = v116;
  long long v3 = v112;
  *(_OWORD *)((char *)this + 360) = v111;
  *(_OWORD *)((char *)this + 376) = v3;
  *(_OWORD *)((char *)this + 408) = v108;
  *(_OWORD *)((char *)this + 440) = v104;
  *(_OWORD *)((char *)this + 472) = v100;
  *(_OWORD *)((char *)this + 504) = v96;
  long long v4 = v92;
  *((_OWORD *)this + 33) = v91;
  *((_OWORD *)this + 34) = v4;
  long long v5 = v88;
  *(_OWORD *)((char *)this + 568) = v87;
  *(_OWORD *)((char *)this + 584) = v5;
  long long v6 = v84;
  *((_OWORD *)this + 38) = v83;
  *((_OWORD *)this + 39) = v6;
  long long v7 = v80;
  *(_OWORD *)((char *)this + 648) = v79;
  *(_OWORD *)((char *)this + 664) = v7;
  long long v8 = v76;
  *((_OWORD *)this + 43) = v75;
  *((_OWORD *)this + 44) = v8;
  long long v9 = v72;
  *(_OWORD *)((char *)this + 728) = v71;
  *(_OWORD *)((char *)this + 744) = v9;
  long long v10 = v68;
  *((_OWORD *)this + 48) = v67;
  *((_OWORD *)this + 49) = v10;
  long long v11 = v64;
  *(_OWORD *)((char *)this + 808) = v63;
  *(_DWORD *)this = v155;
  uint64_t v12 = v157;
  long long v156 = 0uLL;
  uint64_t v157 = 0;
  uint64_t v13 = v151;
  uint64_t v14 = v153;
  *((void *)this + 3) = v12;
  *((void *)this + 4) = v13;
  uint64_t v153 = 0;
  long long v152 = 0uLL;
  uint64_t v15 = v147;
  uint64_t v16 = v149;
  *((void *)this + 7) = v14;
  *((void *)this + 8) = v15;
  *((void *)this + 11) = v16;
  long long v148 = 0uLL;
  uint64_t v149 = 0;
  *((_DWORD *)this + 24) = v143;
  *((void *)this + 15) = v145;
  long long v144 = 0uLL;
  uint64_t v145 = 0;
  *((_DWORD *)this + 32) = v139;
  *((void *)this + 19) = v141;
  long long v140 = 0uLL;
  uint64_t v141 = 0;
  *((_DWORD *)this + 40) = v135;
  *((void *)this + 23) = v137;
  long long v136 = 0uLL;
  uint64_t v137 = 0;
  *((_DWORD *)this + 48) = v131;
  *((void *)this + 27) = v133;
  long long v132 = 0uLL;
  uint64_t v133 = 0;
  *((_DWORD *)this + 56) = v127;
  *((void *)this + 31) = v129;
  long long v128 = 0uLL;
  uint64_t v129 = 0;
  uint64_t v17 = v125;
  long long v124 = 0uLL;
  uint64_t v125 = 0;
  uint64_t v18 = v119;
  uint64_t v19 = v121;
  *((void *)this + 36) = v17;
  *((void *)this + 37) = v18;
  *((void *)this + 40) = v19;
  long long v120 = 0uLL;
  uint64_t v121 = 0;
  *((_DWORD *)this + 82) = v115;
  *((void *)this + 44) = v117;
  long long v116 = 0uLL;
  uint64_t v117 = 0;
  uint64_t v20 = v113;
  long long v112 = 0uLL;
  uint64_t v113 = 0;
  uint64_t v21 = v107;
  uint64_t v22 = v109;
  *((void *)this + 49) = v20;
  *((void *)this + 50) = v21;
  *((void *)this + 53) = v22;
  long long v108 = 0uLL;
  uint64_t v109 = 0;
  *((_DWORD *)this + 108) = v103;
  uint64_t v23 = v105;
  long long v104 = 0uLL;
  uint64_t v105 = 0;
  uint64_t v24 = v99;
  uint64_t v25 = v101;
  *((void *)this + 57) = v23;
  *((void *)this + 58) = v24;
  long long v100 = 0uLL;
  uint64_t v101 = 0;
  uint64_t v26 = v95;
  uint64_t v27 = v97;
  *((void *)this + 61) = v25;
  *((void *)this + 62) = v26;
  *((void *)this + 65) = v27;
  long long v96 = 0uLL;
  uint64_t v97 = 0;
  *((void *)this + 70) = v93;
  long long v92 = 0uLL;
  uint64_t v93 = 0;
  *((void *)this + 75) = v89;
  long long v88 = 0uLL;
  uint64_t v89 = 0;
  *((void *)this + 80) = v85;
  long long v84 = 0uLL;
  uint64_t v85 = 0;
  *((void *)this + 85) = v81;
  long long v80 = 0uLL;
  uint64_t v81 = 0;
  *((void *)this + 90) = v77;
  long long v76 = 0uLL;
  uint64_t v77 = 0;
  *((void *)this + 95) = v73;
  long long v72 = 0uLL;
  uint64_t v73 = 0;
  *((void *)this + 100) = v69;
  long long v68 = 0uLL;
  uint64_t v69 = 0;
  *((void *)this + 105) = v65;
  *(_OWORD *)((char *)this + 824) = v11;
  long long v64 = 0uLL;
  uint64_t v65 = 0;
  uint64_t v28 = v61;
  *((void *)this + 106) = v59;
  long long v29 = v60;
  *((void *)this + 109) = v28;
  *(_OWORD *)((char *)this + 856) = v29;
  long long v60 = 0uLL;
  uint64_t v61 = 0;
  uint64_t v30 = v57;
  *((void *)this + 110) = v55;
  long long v31 = v56;
  *((void *)this + 113) = v30;
  *(_OWORD *)((char *)this + 888) = v31;
  long long v56 = 0uLL;
  uint64_t v57 = 0;
  uint64_t v32 = v53;
  *((void *)this + 114) = v51;
  long long v33 = v52;
  *((void *)this + 117) = v32;
  *(_OWORD *)((char *)this + 920) = v33;
  long long v52 = 0uLL;
  uint64_t v53 = 0;
  uint64_t v34 = v49;
  *((void *)this + 118) = v47;
  long long v35 = v48;
  *((void *)this + 121) = v34;
  *(_OWORD *)((char *)this + 952) = v35;
  long long v48 = 0uLL;
  uint64_t v49 = 0;
  *((void *)this + 122) = v43;
  long long v36 = *(_OWORD *)v44;
  *((void *)this + 125) = v45;
  *(_OWORD *)((char *)this + 984) = v36;
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v45 = 0;
  *((void *)this + 126) = v39;
  long long v37 = v40;
  *((void *)this + 129) = v41;
  *(_OWORD *)((char *)this + 1016) = v37;
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)v56);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)v60);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete((void *)v64);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete((void *)v68);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete((void *)v76);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81) < 0) {
    operator delete((void *)v80);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete((void *)v84);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97) < 0) {
    operator delete((void *)v96);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101) < 0) {
    operator delete((void *)v100);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)v104);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v109) < 0) {
    operator delete((void *)v108);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v113) < 0) {
    operator delete((void *)v112);
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v117) < 0) {
    operator delete((void *)v116);
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v121) < 0) {
    operator delete((void *)v120);
  }
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125) < 0) {
    operator delete((void *)v124);
  }
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v129) < 0) {
    operator delete((void *)v128);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133) < 0) {
    operator delete((void *)v132);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v137) < 0) {
    operator delete((void *)v136);
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v145) < 0) {
    operator delete((void *)v144);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149) < 0) {
    operator delete((void *)v148);
  }
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153) < 0) {
    operator delete((void *)v152);
  }
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v157) < 0) {
    operator delete((void *)v156);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
}

void sub_263CB0358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete((void *)STACK[0x390]);
  }
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete((void *)STACK[0x438]);
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  if (SLOBYTE(STACK[0x48F]) < 0) {
    operator delete((void *)STACK[0x478]);
  }
  if (SLOBYTE(STACK[0x4E7]) < 0) {
    operator delete((void *)STACK[0x4D0]);
  }
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete((void *)STACK[0x4B0]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete((void *)STACK[0x510]);
  }
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  if (SLOBYTE(STACK[0x55F]) < 0) {
    operator delete((void *)STACK[0x548]);
  }
  if (SLOBYTE(STACK[0x53F]) < 0) {
    operator delete((void *)STACK[0x528]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete((void *)STACK[0x5B8]);
  }
  if (SLOBYTE(STACK[0x5AF]) < 0) {
    operator delete((void *)STACK[0x598]);
  }
  if (SLOBYTE(STACK[0x607]) < 0) {
    operator delete((void *)STACK[0x5F0]);
  }
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  if (*(char *)(v85 - 193) < 0) {
    operator delete(*(void **)(v85 - 216));
  }
  if (*(char *)(v85 - 225) < 0) {
    operator delete(*(void **)(v85 - 248));
  }
  if (*(char *)(v85 - 137) < 0) {
    operator delete(*(void **)(v85 - 160));
  }
  if (*(char *)(v85 - 169) < 0) {
    operator delete(*(void **)(v85 - 192));
  }
  if (*(char *)(v85 - 81) < 0) {
    operator delete(*(void **)(v85 - 104));
  }
  if (*(char *)(v85 - 113) < 0) {
    operator delete(*(void **)(v85 - 136));
  }
  if (*(char *)(v85 - 25) < 0) {
    operator delete(*(void **)(v85 - 48));
  }
  if (*(char *)(v85 - 57) < 0) {
    operator delete(*(void **)(v85 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263CB0754()
{
}

void sub_263CB075C()
{
}

void sub_263CB0764()
{
}

void sub_263CB076C()
{
}

void sub_263CB0774()
{
}

void sub_263CB077C()
{
}

void sub_263CB0784()
{
}

void sub_263CB078C()
{
}

void sub_263CB0794()
{
}

void sub_263CB079C()
{
}

void sub_263CB07A4()
{
}

void sub_263CB07AC()
{
}

void sub_263CB07B4()
{
}

void sub_263CB07BC()
{
}

void sub_263CB07C4()
{
}

void sub_263CB07CC()
{
}

void sub_263CB07D4()
{
}

void sub_263CB07DC()
{
}

void sub_263CB07E4()
{
}

void sub_263CB07EC()
{
}

void sub_263CB07F4()
{
}

void sub_263CB07FC()
{
}

void sub_263CB0804()
{
}

void sub_263CB080C()
{
}

void sub_263CB0814()
{
}

void sub_263CB081C()
{
}

void sub_263CB0824()
{
}

void sub_263CB082C()
{
}

void sub_263CB0834()
{
}

void sub_263CB083C()
{
}

void sub_263CB0844()
{
}

void sub_263CB084C()
{
}

void sub_263CB0854()
{
}

void sub_263CB085C()
{
}

void sub_263CB0864()
{
}

void sub_263CB086C()
{
}

void sub_263CB0874()
{
}

void sub_263CB087C()
{
}

void sub_263CB0884()
{
}

void sub_263CB088C()
{
}

void sub_263CB0894()
{
}

void sub_263CB089C()
{
}

void sub_263CB08A4()
{
}

void sub_263CB08AC()
{
}

void sub_263CB08B4()
{
}

void sub_263CB08BC()
{
}

void sub_263CB08C4()
{
}

void sub_263CB08CC()
{
}

void sub_263CB08D4()
{
}

void sub_263CB08DC()
{
}

void sub_263CB08E4()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*(void **)(a1 + 1016));
  }
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*(void **)(a1 + 888));
  }
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*(void **)(a1 + 784));
  }
  if (*(char *)(a1 + 767) < 0) {
    operator delete(*(void **)(a1 + 744));
  }
  if (*(char *)(a1 + 727) < 0) {
    operator delete(*(void **)(a1 + 704));
  }
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*(void **)(a1 + 624));
  }
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL XofGenericCodec::Decode<10ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>>(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 352), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 392), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 432), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 464), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 496), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 528), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 560), a2, a3) == 1;
}

BOOL XofGenericCodec::Decode<6ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 200), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 232), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 264), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 296), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 328), a2, a3) != 1
    || XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 360), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 392), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 424), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 456), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 488), a2, a3) != 1
    || XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 520), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 552), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<18ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>((int *)a1, a2, a3);
}

BOOL XofGenericCodec::Decode<18ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(int *a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<int>::DecodeFromHexData(a1 + 146, a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData(a1 + 156, a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData(a1 + 166, a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData(a1 + 176, a2, a3) != 1
    || XofIntegralType<long long>::DecodeFromHexData((uint64_t)(a1 + 186), a2, a3) != 1
    || XofIntegralType<unsigned long long>::DecodeFromHexData((uint64_t)(a1 + 200), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<24ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>((uint64_t)a1, a2, a3);
}

uint64_t XofIntegralType<long long>::DecodeFromHexData(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 7)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      long long v7 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        long long v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer(a1, a2, v5, 8uLL, (unint64_t *)__str)) {
    return 5;
  }
  uint64_t v8 = *(void *)__str;
  *(void *)(a1 + 24) = *(void *)__str;
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 32);
  }
  int v13 = XofBaseType::ValidateSignedRange(a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *a3 += 8;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263CB1190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL XofGenericCodec::Decode<24ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<long long>::DecodeFromHexData(a1 + 856, a2, a3) != 1
    || XofIntegralType<long long>::DecodeFromHexData(a1 + 912, a2, a3) != 1
    || XofIntegralType<long long>::DecodeFromHexData(a1 + 968, a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 1024), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1064), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 1096), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<30ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<30ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1128), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1160), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 1192), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 1232), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 1272), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 1312), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<36ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<36ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 1352), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 1392), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1432), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1464), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1496), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1528), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<42ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<42ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1560), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 1592), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 1624), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 1656), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 1688), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 1720), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 1752), a2, a3) == 1;
}

BOOL XofGenericCodec::Decode<6ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 192), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 224), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 256), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 288), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 328), a2, a3) != 1
    || XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 368), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 400), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 432), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 464), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 496), a2, a3) != 1
    || XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 528), a2, a3) != 1
    || XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 568), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<18ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<18ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 608), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 648), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 688), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 728), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 768), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 808), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<24ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>((__int16 *)a1, a2, a3);
}

BOOL XofGenericCodec::Decode<24ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(__int16 *a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<short>::DecodeFromHexData(a1 + 420, a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData(a1 + 436, a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData(a1 + 452, a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData(a1 + 468, a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData(a1 + 484, a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData(a1 + 500, a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData(a1 + 516, a2, a3) == 1;
}

BOOL XofGenericCodec::Decode<11ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 360), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 400), a2, a3) != 1
    || XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 432), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 464), a2, a3) != 1
    || XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 496), a2, a3) != 1
    || XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 528), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<17ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<17ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 568), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 608), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 648), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 688), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 728), a2, a3) != 1
    || XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 768), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<23ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<23ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 808), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 848), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 880), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 912), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 944), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 976), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1008), a2, a3) == 1;
}

__n128 std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double v6 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)double v6 = v7;
  *(unsigned char *)(a2 + 63) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v8 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)uint64_t v8 = v9;
  *(unsigned char *)(a2 + 95) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v10 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)uint64_t v10 = v11;
  *(unsigned char *)(a2 + 127) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  std::string v14 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)std::string v14 = v15;
  *(unsigned char *)(a2 + 191) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  uint64_t v16 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 231) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  uint64_t v18 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_OWORD *)uint64_t v18 = v19;
  *(unsigned char *)(a2 + 263) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  uint64_t v20 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)uint64_t v20 = v21;
  *(unsigned char *)(a2 + 295) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  uint64_t v22 = (void **)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)uint64_t v22 = v23;
  *(unsigned char *)(a2 + 327) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  uint64_t v24 = (void **)(a1 + 336);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v24);
  }
  long long v25 = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_OWORD *)uint64_t v24 = v25;
  *(unsigned char *)(a2 + 359) = 0;
  *(unsigned char *)(a2 + 336) = 0;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  uint64_t v26 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*v26);
  }
  long long v27 = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(_OWORD *)uint64_t v26 = v27;
  *(unsigned char *)(a2 + 391) = 0;
  *(unsigned char *)(a2 + 368) = 0;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  uint64_t v28 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v28);
  }
  long long v29 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)uint64_t v28 = v29;
  *(unsigned char *)(a2 + 423) = 0;
  *(unsigned char *)(a2 + 400) = 0;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  uint64_t v30 = (void **)(a1 + 432);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v30);
  }
  long long v31 = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_OWORD *)uint64_t v30 = v31;
  *(unsigned char *)(a2 + 455) = 0;
  *(unsigned char *)(a2 + 432) = 0;
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  uint64_t v32 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v32);
  }
  long long v33 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(_OWORD *)uint64_t v32 = v33;
  *(unsigned char *)(a2 + 487) = 0;
  *(unsigned char *)(a2 + 464) = 0;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  uint64_t v34 = (void **)(a1 + 496);
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*v34);
  }
  long long v35 = *(_OWORD *)(a2 + 496);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(_OWORD *)uint64_t v34 = v35;
  *(unsigned char *)(a2 + 519) = 0;
  *(unsigned char *)(a2 + 496) = 0;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  long long v36 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v36);
  }
  long long v37 = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(_OWORD *)long long v36 = v37;
  *(unsigned char *)(a2 + 551) = 0;
  *(unsigned char *)(a2 + 528) = 0;
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  long long v38 = (void **)(a1 + 568);
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*v38);
  }
  long long v39 = *(_OWORD *)(a2 + 568);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(_OWORD *)long long v38 = v39;
  *(unsigned char *)(a2 + 591) = 0;
  *(unsigned char *)(a2 + 568) = 0;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  long long v40 = (void **)(a1 + 608);
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*v40);
  }
  long long v41 = *(_OWORD *)(a2 + 608);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_OWORD *)long long v40 = v41;
  *(unsigned char *)(a2 + 631) = 0;
  *(unsigned char *)(a2 + 608) = 0;
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  std::string v42 = (void **)(a1 + 648);
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*v42);
  }
  long long v43 = *(_OWORD *)(a2 + 648);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(_OWORD *)std::string v42 = v43;
  *(unsigned char *)(a2 + 671) = 0;
  *(unsigned char *)(a2 + 648) = 0;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  long long v44 = (void **)(a1 + 688);
  if (*(char *)(a1 + 711) < 0) {
    operator delete(*v44);
  }
  long long v45 = *(_OWORD *)(a2 + 688);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(_OWORD *)long long v44 = v45;
  *(unsigned char *)(a2 + 711) = 0;
  *(unsigned char *)(a2 + 688) = 0;
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  std::string v46 = (void **)(a1 + 728);
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*v46);
  }
  long long v47 = *(_OWORD *)(a2 + 728);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(_OWORD *)std::string v46 = v47;
  *(unsigned char *)(a2 + 751) = 0;
  *(unsigned char *)(a2 + 728) = 0;
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  long long v48 = (void **)(a1 + 768);
  if (*(char *)(a1 + 791) < 0) {
    operator delete(*v48);
  }
  long long v49 = *(_OWORD *)(a2 + 768);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(_OWORD *)long long v48 = v49;
  *(unsigned char *)(a2 + 791) = 0;
  *(unsigned char *)(a2 + 768) = 0;
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
  std::string v50 = (void **)(a1 + 808);
  if (*(char *)(a1 + 831) < 0) {
    operator delete(*v50);
  }
  long long v51 = *(_OWORD *)(a2 + 808);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(_OWORD *)std::string v50 = v51;
  *(unsigned char *)(a2 + 831) = 0;
  *(unsigned char *)(a2 + 808) = 0;
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  long long v52 = (void **)(a1 + 840);
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*v52);
  }
  long long v53 = *(_OWORD *)(a2 + 840);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(_OWORD *)long long v52 = v53;
  *(unsigned char *)(a2 + 863) = 0;
  *(unsigned char *)(a2 + 840) = 0;
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  std::string v54 = (void **)(a1 + 872);
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*v54);
  }
  long long v55 = *(_OWORD *)(a2 + 872);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)std::string v54 = v55;
  *(unsigned char *)(a2 + 895) = 0;
  *(unsigned char *)(a2 + 872) = 0;
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  long long v56 = (void **)(a1 + 904);
  if (*(char *)(a1 + 927) < 0) {
    operator delete(*v56);
  }
  long long v57 = *(_OWORD *)(a2 + 904);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)long long v56 = v57;
  *(unsigned char *)(a2 + 927) = 0;
  *(unsigned char *)(a2 + 904) = 0;
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  std::string v58 = (void **)(a1 + 936);
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*v58);
  }
  long long v59 = *(_OWORD *)(a2 + 936);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(_OWORD *)std::string v58 = v59;
  *(unsigned char *)(a2 + 959) = 0;
  *(unsigned char *)(a2 + 936) = 0;
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  long long v60 = (void **)(a1 + 968);
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*v60);
  }
  long long v61 = *(_OWORD *)(a2 + 968);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(_OWORD *)long long v60 = v61;
  *(unsigned char *)(a2 + 991) = 0;
  *(unsigned char *)(a2 + 968) = 0;
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  std::string v62 = (void **)(a1 + 1000);
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*v62);
  }
  long long v63 = *(_OWORD *)(a2 + 1000);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(_OWORD *)std::string v62 = v63;
  *(unsigned char *)(a2 + 1023) = 0;
  *(unsigned char *)(a2 + 1000) = 0;
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  long long v64 = (void **)(a1 + 1032);
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*v64);
  }
  long long v65 = *(_OWORD *)(a2 + 1032);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(_OWORD *)long long v64 = v65;
  *(unsigned char *)(a2 + 1055) = 0;
  *(unsigned char *)(a2 + 1032) = 0;
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  std::string v66 = (void **)(a1 + 1064);
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*v66);
  }
  __n128 result = *(__n128 *)(a2 + 1064);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(__n128 *)std::string v66 = result;
  *(unsigned char *)(a2 + 1087) = 0;
  *(unsigned char *)(a2 + 1064) = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofGpsQzssEphemeris>>(uint64_t *result, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  double v6 = (uint64_t **)(result + 1);
  long long v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = (uint64_t **)v5;
        unsigned int v8 = *((unsigned __int8 *)v5 + 28);
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        double v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        double v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = (uint64_t **)(result + 1);
LABEL_9:
    long long v9 = operator new(0x68uLL);
    v9[28] = *(unsigned char *)a3;
    long long v10 = *(_OWORD *)(a3 + 20);
    long long v11 = *(_OWORD *)(a3 + 52);
    *((_OWORD *)v9 + 4) = *(_OWORD *)(a3 + 36);
    *((_OWORD *)v9 + 5) = v11;
    *((void *)v9 + 12) = *(void *)(a3 + 68);
    *((_OWORD *)v9 + 2) = *(_OWORD *)(a3 + 4);
    *((_OWORD *)v9 + 3) = v10;
    return std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double v6 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)double v6 = v7;
  *(unsigned char *)(a2 + 63) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  unsigned int v8 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)unsigned int v8 = v9;
  *(unsigned char *)(a2 + 95) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  long long v10 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)long long v10 = v11;
  *(unsigned char *)(a2 + 127) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  std::string v14 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)std::string v14 = v15;
  *(unsigned char *)(a2 + 191) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  uint64_t v16 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 223) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v18 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)uint64_t v18 = v19;
  *(unsigned char *)(a2 + 255) = 0;
  *(unsigned char *)(a2 + 232) = 0;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v20 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 264);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)uint64_t v20 = v21;
  *(unsigned char *)(a2 + 287) = 0;
  *(unsigned char *)(a2 + 264) = 0;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  uint64_t v22 = (void **)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)uint64_t v22 = v23;
  *(unsigned char *)(a2 + 327) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  uint64_t v24 = (void **)(a1 + 344);
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*v24);
  }
  long long v25 = *(_OWORD *)(a2 + 344);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(_OWORD *)uint64_t v24 = v25;
  *(unsigned char *)(a2 + 367) = 0;
  *(unsigned char *)(a2 + 344) = 0;
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  uint64_t v26 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v26);
  }
  long long v27 = *(_OWORD *)(a2 + 376);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(_OWORD *)uint64_t v26 = v27;
  *(unsigned char *)(a2 + 399) = 0;
  *(unsigned char *)(a2 + 376) = 0;
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  uint64_t v28 = (void **)(a1 + 408);
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*v28);
  }
  long long v29 = *(_OWORD *)(a2 + 408);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(_OWORD *)uint64_t v28 = v29;
  *(unsigned char *)(a2 + 431) = 0;
  *(unsigned char *)(a2 + 408) = 0;
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  uint64_t v30 = (void **)(a1 + 440);
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*v30);
  }
  long long v31 = *(_OWORD *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_OWORD *)uint64_t v30 = v31;
  *(unsigned char *)(a2 + 463) = 0;
  *(unsigned char *)(a2 + 440) = 0;
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  uint64_t v32 = (void **)(a1 + 472);
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*v32);
  }
  long long v33 = *(_OWORD *)(a2 + 472);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(_OWORD *)uint64_t v32 = v33;
  *(unsigned char *)(a2 + 495) = 0;
  *(unsigned char *)(a2 + 472) = 0;
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  uint64_t v34 = (void **)(a1 + 504);
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*v34);
  }
  long long v35 = *(_OWORD *)(a2 + 504);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_OWORD *)uint64_t v34 = v35;
  *(unsigned char *)(a2 + 527) = 0;
  *(unsigned char *)(a2 + 504) = 0;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  long long v36 = (void **)(a1 + 544);
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*v36);
  }
  long long v37 = *(_OWORD *)(a2 + 544);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(_OWORD *)long long v36 = v37;
  *(unsigned char *)(a2 + 567) = 0;
  *(unsigned char *)(a2 + 544) = 0;
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  long long v38 = (void **)(a1 + 584);
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*v38);
  }
  long long v39 = *(_OWORD *)(a2 + 584);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_OWORD *)long long v38 = v39;
  *(unsigned char *)(a2 + 607) = 0;
  *(unsigned char *)(a2 + 584) = 0;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  long long v40 = (void **)(a1 + 624);
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*v40);
  }
  long long v41 = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_OWORD *)long long v40 = v41;
  *(unsigned char *)(a2 + 647) = 0;
  *(unsigned char *)(a2 + 624) = 0;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  std::string v42 = (void **)(a1 + 664);
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*v42);
  }
  long long v43 = *(_OWORD *)(a2 + 664);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(_OWORD *)std::string v42 = v43;
  *(unsigned char *)(a2 + 687) = 0;
  *(unsigned char *)(a2 + 664) = 0;
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  long long v44 = (void **)(a1 + 704);
  if (*(char *)(a1 + 727) < 0) {
    operator delete(*v44);
  }
  long long v45 = *(_OWORD *)(a2 + 704);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(_OWORD *)long long v44 = v45;
  *(unsigned char *)(a2 + 727) = 0;
  *(unsigned char *)(a2 + 704) = 0;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  std::string v46 = (void **)(a1 + 744);
  if (*(char *)(a1 + 767) < 0) {
    operator delete(*v46);
  }
  long long v47 = *(_OWORD *)(a2 + 744);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(_OWORD *)std::string v46 = v47;
  *(unsigned char *)(a2 + 767) = 0;
  *(unsigned char *)(a2 + 744) = 0;
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  long long v48 = (void **)(a1 + 784);
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*v48);
  }
  long long v49 = *(_OWORD *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(_OWORD *)long long v48 = v49;
  *(unsigned char *)(a2 + 807) = 0;
  *(unsigned char *)(a2 + 784) = 0;
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  std::string v50 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0) {
    operator delete(*v50);
  }
  long long v51 = *(_OWORD *)(a2 + 816);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(_OWORD *)std::string v50 = v51;
  *(unsigned char *)(a2 + 839) = 0;
  *(unsigned char *)(a2 + 816) = 0;
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  long long v52 = (void **)(a1 + 848);
  if (*(char *)(a1 + 871) < 0) {
    operator delete(*v52);
  }
  long long v53 = *(_OWORD *)(a2 + 848);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(_OWORD *)long long v52 = v53;
  *(unsigned char *)(a2 + 871) = 0;
  *(unsigned char *)(a2 + 848) = 0;
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  std::string v54 = (void **)(a1 + 880);
  if (*(char *)(a1 + 903) < 0) {
    operator delete(*v54);
  }
  long long v55 = *(_OWORD *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(_OWORD *)std::string v54 = v55;
  *(unsigned char *)(a2 + 903) = 0;
  *(unsigned char *)(a2 + 880) = 0;
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  long long v56 = (void **)(a1 + 912);
  if (*(char *)(a1 + 935) < 0) {
    operator delete(*v56);
  }
  long long v57 = *(_OWORD *)(a2 + 912);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(_OWORD *)long long v56 = v57;
  *(unsigned char *)(a2 + 935) = 0;
  *(unsigned char *)(a2 + 912) = 0;
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  std::string v58 = (void **)(a1 + 944);
  if (*(char *)(a1 + 967) < 0) {
    operator delete(*v58);
  }
  long long v59 = *(_OWORD *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(_OWORD *)std::string v58 = v59;
  *(unsigned char *)(a2 + 967) = 0;
  *(unsigned char *)(a2 + 944) = 0;
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  long long v60 = (void **)(a1 + 976);
  if (*(char *)(a1 + 999) < 0) {
    operator delete(*v60);
  }
  long long v61 = *(_OWORD *)(a2 + 976);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(_OWORD *)long long v60 = v61;
  *(unsigned char *)(a2 + 999) = 0;
  *(unsigned char *)(a2 + 976) = 0;
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  std::string v62 = (void **)(a1 + 1008);
  if (*(char *)(a1 + 1031) < 0) {
    operator delete(*v62);
  }
  long long v63 = *(_OWORD *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(_OWORD *)std::string v62 = v63;
  *(unsigned char *)(a2 + 1031) = 0;
  *(unsigned char *)(a2 + 1008) = 0;
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  long long v64 = (void **)(a1 + 1040);
  if (*(char *)(a1 + 1063) < 0) {
    operator delete(*v64);
  }
  __n128 result = *(__n128 *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(__n128 *)long long v64 = result;
  *(unsigned char *)(a2 + 1063) = 0;
  *(unsigned char *)(a2 + 1040) = 0;
  return result;
}

__n128 std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double v6 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)double v6 = v7;
  *(unsigned char *)(a2 + 63) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  unsigned int v8 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)unsigned int v8 = v9;
  *(unsigned char *)(a2 + 95) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  long long v10 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)long long v10 = v11;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  uint64_t v12 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 167) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  std::string v14 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)std::string v14 = v15;
  *(unsigned char *)(a2 + 199) = 0;
  *(unsigned char *)(a2 + 176) = 0;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  uint64_t v16 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 231) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  uint64_t v18 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_OWORD *)uint64_t v18 = v19;
  *(unsigned char *)(a2 + 263) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  uint64_t v20 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)uint64_t v20 = v21;
  *(unsigned char *)(a2 + 295) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  uint64_t v22 = (void **)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)uint64_t v22 = v23;
  *(unsigned char *)(a2 + 327) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  uint64_t v24 = (void **)(a1 + 336);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v24);
  }
  long long v25 = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_OWORD *)uint64_t v24 = v25;
  *(unsigned char *)(a2 + 359) = 0;
  *(unsigned char *)(a2 + 336) = 0;
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  uint64_t v26 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*v26);
  }
  long long v27 = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(_OWORD *)uint64_t v26 = v27;
  *(unsigned char *)(a2 + 391) = 0;
  *(unsigned char *)(a2 + 368) = 0;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  uint64_t v28 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v28);
  }
  long long v29 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)uint64_t v28 = v29;
  *(unsigned char *)(a2 + 423) = 0;
  *(unsigned char *)(a2 + 400) = 0;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  uint64_t v30 = (void **)(a1 + 432);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v30);
  }
  long long v31 = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_OWORD *)uint64_t v30 = v31;
  *(unsigned char *)(a2 + 455) = 0;
  *(unsigned char *)(a2 + 432) = 0;
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  uint64_t v32 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v32);
  }
  long long v33 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(_OWORD *)uint64_t v32 = v33;
  *(unsigned char *)(a2 + 487) = 0;
  *(unsigned char *)(a2 + 464) = 0;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  uint64_t v34 = (void **)(a1 + 496);
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*v34);
  }
  long long v35 = *(_OWORD *)(a2 + 496);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(_OWORD *)uint64_t v34 = v35;
  *(unsigned char *)(a2 + 519) = 0;
  *(unsigned char *)(a2 + 496) = 0;
  *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 520);
  long long v36 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0) {
    operator delete(*v36);
  }
  long long v37 = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(_OWORD *)long long v36 = v37;
  *(unsigned char *)(a2 + 551) = 0;
  *(unsigned char *)(a2 + 528) = 0;
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
  long long v38 = (void **)(a1 + 560);
  if (*(char *)(a1 + 583) < 0) {
    operator delete(*v38);
  }
  long long v39 = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)long long v38 = v39;
  *(unsigned char *)(a2 + 583) = 0;
  *(unsigned char *)(a2 + 560) = 0;
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  long long v40 = (void **)(a1 + 600);
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*v40);
  }
  long long v41 = *(_OWORD *)(a2 + 600);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(_OWORD *)long long v40 = v41;
  *(unsigned char *)(a2 + 623) = 0;
  *(unsigned char *)(a2 + 600) = 0;
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  std::string v42 = (void **)(a1 + 640);
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*v42);
  }
  long long v43 = *(_OWORD *)(a2 + 640);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(_OWORD *)std::string v42 = v43;
  *(unsigned char *)(a2 + 663) = 0;
  *(unsigned char *)(a2 + 640) = 0;
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  long long v44 = (void **)(a1 + 680);
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*v44);
  }
  long long v45 = *(_OWORD *)(a2 + 680);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(_OWORD *)long long v44 = v45;
  *(unsigned char *)(a2 + 703) = 0;
  *(unsigned char *)(a2 + 680) = 0;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  std::string v46 = (void **)(a1 + 720);
  if (*(char *)(a1 + 743) < 0) {
    operator delete(*v46);
  }
  long long v47 = *(_OWORD *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(_OWORD *)std::string v46 = v47;
  *(unsigned char *)(a2 + 743) = 0;
  *(unsigned char *)(a2 + 720) = 0;
  long long v48 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v48;
  long long v49 = (void **)(a1 + 776);
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*v49);
  }
  long long v50 = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  *(_OWORD *)long long v49 = v50;
  *(unsigned char *)(a2 + 799) = 0;
  *(unsigned char *)(a2 + 776) = 0;
  long long v51 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = v51;
  long long v52 = (void **)(a1 + 832);
  if (*(char *)(a1 + 855) < 0) {
    operator delete(*v52);
  }
  long long v53 = *(_OWORD *)(a2 + 832);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(_OWORD *)long long v52 = v53;
  *(unsigned char *)(a2 + 855) = 0;
  *(unsigned char *)(a2 + 832) = 0;
  long long v54 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 872) = v54;
  long long v55 = (void **)(a1 + 888);
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*v55);
  }
  long long v56 = *(_OWORD *)(a2 + 888);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(_OWORD *)long long v55 = v56;
  *(unsigned char *)(a2 + 911) = 0;
  *(unsigned char *)(a2 + 888) = 0;
  long long v57 = *(_OWORD *)(a2 + 928);
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
  *(_OWORD *)(a1 + 928) = v57;
  std::string v58 = (void **)(a1 + 944);
  if (*(char *)(a1 + 967) < 0) {
    operator delete(*v58);
  }
  long long v59 = *(_OWORD *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(_OWORD *)std::string v58 = v59;
  *(unsigned char *)(a2 + 967) = 0;
  *(unsigned char *)(a2 + 944) = 0;
  long long v60 = *(_OWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 968);
  *(_OWORD *)(a1 + 984) = v60;
  long long v61 = (void **)(a1 + 1000);
  if (*(char *)(a1 + 1023) < 0) {
    operator delete(*v61);
  }
  long long v62 = *(_OWORD *)(a2 + 1000);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(_OWORD *)long long v61 = v62;
  *(unsigned char *)(a2 + 1023) = 0;
  *(unsigned char *)(a2 + 1000) = 0;
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
  long long v63 = (void **)(a1 + 1040);
  if (*(char *)(a1 + 1063) < 0) {
    operator delete(*v63);
  }
  long long v64 = *(_OWORD *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(_OWORD *)long long v63 = v64;
  *(unsigned char *)(a2 + 1063) = 0;
  *(unsigned char *)(a2 + 1040) = 0;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  long long v65 = (void **)(a1 + 1072);
  if (*(char *)(a1 + 1095) < 0) {
    operator delete(*v65);
  }
  long long v66 = *(_OWORD *)(a2 + 1072);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(_OWORD *)long long v65 = v66;
  *(unsigned char *)(a2 + 1095) = 0;
  *(unsigned char *)(a2 + 1072) = 0;
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  long long v67 = (void **)(a1 + 1104);
  if (*(char *)(a1 + 1127) < 0) {
    operator delete(*v67);
  }
  long long v68 = *(_OWORD *)(a2 + 1104);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(_OWORD *)long long v67 = v68;
  *(unsigned char *)(a2 + 1127) = 0;
  *(unsigned char *)(a2 + 1104) = 0;
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  uint64_t v69 = (void **)(a1 + 1136);
  if (*(char *)(a1 + 1159) < 0) {
    operator delete(*v69);
  }
  long long v70 = *(_OWORD *)(a2 + 1136);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(_OWORD *)uint64_t v69 = v70;
  *(unsigned char *)(a2 + 1159) = 0;
  *(unsigned char *)(a2 + 1136) = 0;
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  long long v71 = (void **)(a1 + 1168);
  if (*(char *)(a1 + 1191) < 0) {
    operator delete(*v71);
  }
  long long v72 = *(_OWORD *)(a2 + 1168);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(_OWORD *)long long v71 = v72;
  *(unsigned char *)(a2 + 1191) = 0;
  *(unsigned char *)(a2 + 1168) = 0;
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  uint64_t v73 = (void **)(a1 + 1208);
  if (*(char *)(a1 + 1231) < 0) {
    operator delete(*v73);
  }
  long long v74 = *(_OWORD *)(a2 + 1208);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(_OWORD *)uint64_t v73 = v74;
  *(unsigned char *)(a2 + 1231) = 0;
  *(unsigned char *)(a2 + 1208) = 0;
  *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
  long long v75 = (void **)(a1 + 1248);
  if (*(char *)(a1 + 1271) < 0) {
    operator delete(*v75);
  }
  long long v76 = *(_OWORD *)(a2 + 1248);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(_OWORD *)long long v75 = v76;
  *(unsigned char *)(a2 + 1271) = 0;
  *(unsigned char *)(a2 + 1248) = 0;
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  uint64_t v77 = (void **)(a1 + 1288);
  if (*(char *)(a1 + 1311) < 0) {
    operator delete(*v77);
  }
  long long v78 = *(_OWORD *)(a2 + 1288);
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(_OWORD *)uint64_t v77 = v78;
  *(unsigned char *)(a2 + 1311) = 0;
  *(unsigned char *)(a2 + 1288) = 0;
  *(_OWORD *)(a1 + 1312) = *(_OWORD *)(a2 + 1312);
  long long v79 = (void **)(a1 + 1328);
  if (*(char *)(a1 + 1351) < 0) {
    operator delete(*v79);
  }
  long long v80 = *(_OWORD *)(a2 + 1328);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(_OWORD *)long long v79 = v80;
  *(unsigned char *)(a2 + 1351) = 0;
  *(unsigned char *)(a2 + 1328) = 0;
  *(_OWORD *)(a1 + 1352) = *(_OWORD *)(a2 + 1352);
  uint64_t v81 = (void **)(a1 + 1368);
  if (*(char *)(a1 + 1391) < 0) {
    operator delete(*v81);
  }
  long long v82 = *(_OWORD *)(a2 + 1368);
  *(void *)(a1 + 1384) = *(void *)(a2 + 1384);
  *(_OWORD *)uint64_t v81 = v82;
  *(unsigned char *)(a2 + 1391) = 0;
  *(unsigned char *)(a2 + 1368) = 0;
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  long long v83 = (void **)(a1 + 1408);
  if (*(char *)(a1 + 1431) < 0) {
    operator delete(*v83);
  }
  long long v84 = *(_OWORD *)(a2 + 1408);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(_OWORD *)long long v83 = v84;
  *(unsigned char *)(a2 + 1431) = 0;
  *(unsigned char *)(a2 + 1408) = 0;
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  uint64_t v85 = (void **)(a1 + 1440);
  if (*(char *)(a1 + 1463) < 0) {
    operator delete(*v85);
  }
  long long v86 = *(_OWORD *)(a2 + 1440);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(_OWORD *)uint64_t v85 = v86;
  *(unsigned char *)(a2 + 1463) = 0;
  *(unsigned char *)(a2 + 1440) = 0;
  *(void *)(a1 + 1464) = *(void *)(a2 + 1464);
  long long v87 = (void **)(a1 + 1472);
  if (*(char *)(a1 + 1495) < 0) {
    operator delete(*v87);
  }
  long long v88 = *(_OWORD *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(_OWORD *)long long v87 = v88;
  *(unsigned char *)(a2 + 1495) = 0;
  *(unsigned char *)(a2 + 1472) = 0;
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  uint64_t v89 = (void **)(a1 + 1504);
  if (*(char *)(a1 + 1527) < 0) {
    operator delete(*v89);
  }
  long long v90 = *(_OWORD *)(a2 + 1504);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(_OWORD *)uint64_t v89 = v90;
  *(unsigned char *)(a2 + 1527) = 0;
  *(unsigned char *)(a2 + 1504) = 0;
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  long long v91 = (void **)(a1 + 1536);
  if (*(char *)(a1 + 1559) < 0) {
    operator delete(*v91);
  }
  long long v92 = *(_OWORD *)(a2 + 1536);
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  *(_OWORD *)long long v91 = v92;
  *(unsigned char *)(a2 + 1559) = 0;
  *(unsigned char *)(a2 + 1536) = 0;
  *(void *)(a1 + 1560) = *(void *)(a2 + 1560);
  uint64_t v93 = (void **)(a1 + 1568);
  if (*(char *)(a1 + 1591) < 0) {
    operator delete(*v93);
  }
  long long v94 = *(_OWORD *)(a2 + 1568);
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  *(_OWORD *)uint64_t v93 = v94;
  *(unsigned char *)(a2 + 1591) = 0;
  *(unsigned char *)(a2 + 1568) = 0;
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  uint64_t v95 = (void **)(a1 + 1600);
  if (*(char *)(a1 + 1623) < 0) {
    operator delete(*v95);
  }
  long long v96 = *(_OWORD *)(a2 + 1600);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(_OWORD *)uint64_t v95 = v96;
  *(unsigned char *)(a2 + 1623) = 0;
  *(unsigned char *)(a2 + 1600) = 0;
  *(_DWORD *)(a1 + 1624) = *(_DWORD *)(a2 + 1624);
  uint64_t v97 = (void **)(a1 + 1632);
  if (*(char *)(a1 + 1655) < 0) {
    operator delete(*v97);
  }
  long long v98 = *(_OWORD *)(a2 + 1632);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  *(_OWORD *)uint64_t v97 = v98;
  *(unsigned char *)(a2 + 1655) = 0;
  *(unsigned char *)(a2 + 1632) = 0;
  *(_DWORD *)(a1 + 1656) = *(_DWORD *)(a2 + 1656);
  uint64_t v99 = (void **)(a1 + 1664);
  if (*(char *)(a1 + 1687) < 0) {
    operator delete(*v99);
  }
  long long v100 = *(_OWORD *)(a2 + 1664);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(_OWORD *)uint64_t v99 = v100;
  *(unsigned char *)(a2 + 1687) = 0;
  *(unsigned char *)(a2 + 1664) = 0;
  *(_DWORD *)(a1 + 1688) = *(_DWORD *)(a2 + 1688);
  uint64_t v101 = (void **)(a1 + 1696);
  if (*(char *)(a1 + 1719) < 0) {
    operator delete(*v101);
  }
  long long v102 = *(_OWORD *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(_OWORD *)uint64_t v101 = v102;
  *(unsigned char *)(a2 + 1719) = 0;
  *(unsigned char *)(a2 + 1696) = 0;
  *(_DWORD *)(a1 + 1720) = *(_DWORD *)(a2 + 1720);
  int v103 = (void **)(a1 + 1728);
  if (*(char *)(a1 + 1751) < 0) {
    operator delete(*v103);
  }
  long long v104 = *(_OWORD *)(a2 + 1728);
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  *(_OWORD *)int v103 = v104;
  *(unsigned char *)(a2 + 1751) = 0;
  *(unsigned char *)(a2 + 1728) = 0;
  *(_OWORD *)(a1 + 1752) = *(_OWORD *)(a2 + 1752);
  uint64_t v105 = (void **)(a1 + 1768);
  if (*(char *)(a1 + 1791) < 0) {
    operator delete(*v105);
  }
  __n128 result = *(__n128 *)(a2 + 1768);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(__n128 *)uint64_t v105 = result;
  *(unsigned char *)(a2 + 1791) = 0;
  *(unsigned char *)(a2 + 1768) = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofBeidouEphemeris>>(uint64_t *result, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  double v6 = (uint64_t **)(result + 1);
  long long v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = (uint64_t **)v5;
        unsigned int v8 = *((unsigned __int8 *)v5 + 32);
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        double v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        double v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = (uint64_t **)(result + 1);
LABEL_9:
    long long v9 = (char *)operator new(0xB0uLL);
    v9[32] = *(unsigned char *)a3;
    *(_OWORD *)(v9 + 120) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(v9 + 136) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(v9 + 152) = *(_OWORD *)(a3 + 120);
    *((void *)v9 + 21) = *(void *)(a3 + 136);
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v9 + 72) = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v9 + 88) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(v9 + 104) = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    return std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double v6 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)double v6 = v7;
  *(unsigned char *)(a2 + 63) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  unsigned int v8 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)unsigned int v8 = v9;
  *(unsigned char *)(a2 + 95) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  long long v10 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)long long v10 = v11;
  *(unsigned char *)(a2 + 127) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  uint64_t v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  std::string v14 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)std::string v14 = v15;
  *(unsigned char *)(a2 + 191) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  uint64_t v16 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 223) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  uint64_t v18 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)uint64_t v18 = v19;
  *(unsigned char *)(a2 + 255) = 0;
  *(unsigned char *)(a2 + 232) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  uint64_t v20 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)uint64_t v20 = v21;
  *(unsigned char *)(a2 + 295) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  uint64_t v22 = (void **)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)uint64_t v22 = v23;
  *(unsigned char *)(a2 + 327) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  uint64_t v24 = (void **)(a1 + 336);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v24);
  }
  long long v25 = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_OWORD *)uint64_t v24 = v25;
  *(unsigned char *)(a2 + 359) = 0;
  *(unsigned char *)(a2 + 336) = 0;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  uint64_t v26 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v26);
  }
  long long v27 = *(_OWORD *)(a2 + 376);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(_OWORD *)uint64_t v26 = v27;
  *(unsigned char *)(a2 + 399) = 0;
  *(unsigned char *)(a2 + 376) = 0;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  uint64_t v28 = (void **)(a1 + 408);
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*v28);
  }
  long long v29 = *(_OWORD *)(a2 + 408);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(_OWORD *)uint64_t v28 = v29;
  *(unsigned char *)(a2 + 431) = 0;
  *(unsigned char *)(a2 + 408) = 0;
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  uint64_t v30 = (void **)(a1 + 440);
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*v30);
  }
  long long v31 = *(_OWORD *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_OWORD *)uint64_t v30 = v31;
  *(unsigned char *)(a2 + 463) = 0;
  *(unsigned char *)(a2 + 440) = 0;
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  uint64_t v32 = (void **)(a1 + 472);
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*v32);
  }
  long long v33 = *(_OWORD *)(a2 + 472);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(_OWORD *)uint64_t v32 = v33;
  *(unsigned char *)(a2 + 495) = 0;
  *(unsigned char *)(a2 + 472) = 0;
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  uint64_t v34 = (void **)(a1 + 504);
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*v34);
  }
  long long v35 = *(_OWORD *)(a2 + 504);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_OWORD *)uint64_t v34 = v35;
  *(unsigned char *)(a2 + 527) = 0;
  *(unsigned char *)(a2 + 504) = 0;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  long long v36 = (void **)(a1 + 544);
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*v36);
  }
  long long v37 = *(_OWORD *)(a2 + 544);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(_OWORD *)long long v36 = v37;
  *(unsigned char *)(a2 + 567) = 0;
  *(unsigned char *)(a2 + 544) = 0;
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  long long v38 = (void **)(a1 + 584);
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*v38);
  }
  long long v39 = *(_OWORD *)(a2 + 584);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_OWORD *)long long v38 = v39;
  *(unsigned char *)(a2 + 607) = 0;
  *(unsigned char *)(a2 + 584) = 0;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  long long v40 = (void **)(a1 + 624);
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*v40);
  }
  long long v41 = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_OWORD *)long long v40 = v41;
  *(unsigned char *)(a2 + 647) = 0;
  *(unsigned char *)(a2 + 624) = 0;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  std::string v42 = (void **)(a1 + 664);
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*v42);
  }
  long long v43 = *(_OWORD *)(a2 + 664);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(_OWORD *)std::string v42 = v43;
  *(unsigned char *)(a2 + 687) = 0;
  *(unsigned char *)(a2 + 664) = 0;
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  long long v44 = (void **)(a1 + 704);
  if (*(char *)(a1 + 727) < 0) {
    operator delete(*v44);
  }
  long long v45 = *(_OWORD *)(a2 + 704);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(_OWORD *)long long v44 = v45;
  *(unsigned char *)(a2 + 727) = 0;
  *(unsigned char *)(a2 + 704) = 0;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  std::string v46 = (void **)(a1 + 744);
  if (*(char *)(a1 + 767) < 0) {
    operator delete(*v46);
  }
  long long v47 = *(_OWORD *)(a2 + 744);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(_OWORD *)std::string v46 = v47;
  *(unsigned char *)(a2 + 767) = 0;
  *(unsigned char *)(a2 + 744) = 0;
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  long long v48 = (void **)(a1 + 784);
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*v48);
  }
  long long v49 = *(_OWORD *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(_OWORD *)long long v48 = v49;
  *(unsigned char *)(a2 + 807) = 0;
  *(unsigned char *)(a2 + 784) = 0;
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
  long long v50 = (void **)(a1 + 824);
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*v50);
  }
  long long v51 = *(_OWORD *)(a2 + 824);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(_OWORD *)long long v50 = v51;
  *(unsigned char *)(a2 + 847) = 0;
  *(unsigned char *)(a2 + 824) = 0;
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  long long v52 = (void **)(a1 + 856);
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*v52);
  }
  long long v53 = *(_OWORD *)(a2 + 856);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(_OWORD *)long long v52 = v53;
  *(unsigned char *)(a2 + 879) = 0;
  *(unsigned char *)(a2 + 856) = 0;
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  long long v54 = (void **)(a1 + 888);
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*v54);
  }
  long long v55 = *(_OWORD *)(a2 + 888);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(_OWORD *)long long v54 = v55;
  *(unsigned char *)(a2 + 911) = 0;
  *(unsigned char *)(a2 + 888) = 0;
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  long long v56 = (void **)(a1 + 920);
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*v56);
  }
  long long v57 = *(_OWORD *)(a2 + 920);
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(_OWORD *)long long v56 = v57;
  *(unsigned char *)(a2 + 943) = 0;
  *(unsigned char *)(a2 + 920) = 0;
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  std::string v58 = (void **)(a1 + 952);
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*v58);
  }
  long long v59 = *(_OWORD *)(a2 + 952);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_OWORD *)std::string v58 = v59;
  *(unsigned char *)(a2 + 975) = 0;
  *(unsigned char *)(a2 + 952) = 0;
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  long long v60 = (void **)(a1 + 984);
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*v60);
  }
  long long v61 = *(_OWORD *)(a2 + 984);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(_OWORD *)long long v60 = v61;
  *(unsigned char *)(a2 + 1007) = 0;
  *(unsigned char *)(a2 + 984) = 0;
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  long long v62 = (void **)(a1 + 1016);
  if (*(char *)(a1 + 1039) < 0) {
    operator delete(*v62);
  }
  __n128 result = *(__n128 *)(a2 + 1016);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(__n128 *)long long v62 = result;
  *(unsigned char *)(a2 + 1039) = 0;
  *(unsigned char *)(a2 + 1016) = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofNavicEphemeris>>(uint64_t *result, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  double v6 = (uint64_t **)(result + 1);
  long long v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = (uint64_t **)v5;
        unsigned int v8 = *((unsigned __int8 *)v5 + 28);
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        double v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        double v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = (uint64_t **)(result + 1);
LABEL_9:
    long long v9 = operator new(0x68uLL);
    v9[28] = *(unsigned char *)a3;
    long long v10 = *(_OWORD *)(a3 + 20);
    long long v11 = *(_OWORD *)(a3 + 52);
    *((_OWORD *)v9 + 4) = *(_OWORD *)(a3 + 36);
    *((_OWORD *)v9 + 5) = v11;
    *((_DWORD *)v9 + 24) = *(_DWORD *)(a3 + 68);
    *((_OWORD *)v9 + 2) = *(_OWORD *)(a3 + 4);
    *((_OWORD *)v9 + 3) = v10;
    return std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t *std::map<unsigned char,XofGpsQzssEphemeris>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned char,XofGpsQzssEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGpsQzssEphemeris>,void *> *,long>>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_263CB4260(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned char,XofGpsQzssEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGpsQzssEphemeris>,void *> *,long>>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    double v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofGpsQzssEphemeris> const&>(v5, v6, v4 + 28, (long long *)(v4 + 28));
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          long long v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofGpsQzssEphemeris> const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, long long *a4)
{
  v12[1] = *(uint64_t **)MEMORY[0x263EF8340];
  double v6 = (uint64_t **)std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__find_equal<unsigned char>(a1, a2, v12, &v11, a3);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v7 = (uint64_t *)operator new(0x68uLL);
    long long v8 = *a4;
    *(_OWORD *)((char *)v7 + 44) = a4[1];
    long long v9 = a4[3];
    *(_OWORD *)((char *)v7 + 60) = a4[2];
    *(_OWORD *)((char *)v7 + 76) = v9;
    *(_OWORD *)(v7 + 11) = *(long long *)((char *)a4 + 60);
    *(_OWORD *)((char *)v7 + 28) = v8;
    std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a1, (uint64_t)v12[0], v6, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__find_equal<unsigned char>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((unsigned __int8 *)a2 + 28), v6 < v7))
  {
    long long v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      long long v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        long long v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        long long v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 28) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 28))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::map<unsigned char,XofGalileoEphemeris>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned char,XofGalileoEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGalileoEphemeris>,void *> *,long>>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_263CB4710(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned char,XofGalileoEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGalileoEphemeris>,void *> *,long>>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGalileoEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGalileoEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofGalileoEphemeris> const&>(v5, v6, v4 + 28, (long long *)(v4 + 28));
      unsigned int v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          unsigned int v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGalileoEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGalileoEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofGalileoEphemeris> const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, long long *a4)
{
  v12[1] = *(uint64_t **)MEMORY[0x263EF8340];
  unsigned int v6 = (uint64_t **)std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__find_equal<unsigned char>(a1, a2, v12, &v11, a3);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    unsigned int v7 = (uint64_t *)operator new(0x68uLL);
    long long v8 = *a4;
    *(_OWORD *)((char *)v7 + 44) = a4[1];
    long long v9 = a4[3];
    *(_OWORD *)((char *)v7 + 60) = a4[2];
    *(_OWORD *)((char *)v7 + 76) = v9;
    *(_OWORD *)(v7 + 11) = *(long long *)((char *)a4 + 60);
    *(_OWORD *)((char *)v7 + 28) = v8;
    std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a1, (uint64_t)v12[0], v6, v7);
  }
  return v7;
}

uint64_t *std::map<unsigned char,XofBeidouEphemeris>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned char,XofBeidouEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofBeidouEphemeris>,void *> *,long>>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_263CB4928(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned char,XofBeidouEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofBeidouEphemeris>,void *> *,long>>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofBeidouEphemeris> const&>(v5, v6, v4 + 32, (_OWORD *)v4 + 2);
      unsigned int v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          unsigned int v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofBeidouEphemeris> const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _OWORD *a4)
{
  v14[1] = *(uint64_t **)MEMORY[0x263EF8340];
  unsigned int v6 = (uint64_t **)std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__find_equal<unsigned char>(a1, a2, v14, &v13, a3);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    unsigned int v7 = (uint64_t *)operator new(0xB0uLL);
    long long v8 = a4[7];
    *((_OWORD *)v7 + 8) = a4[6];
    *((_OWORD *)v7 + 9) = v8;
    *((_OWORD *)v7 + 10) = a4[8];
    long long v9 = a4[3];
    *((_OWORD *)v7 + 4) = a4[2];
    *((_OWORD *)v7 + 5) = v9;
    long long v10 = a4[5];
    *((_OWORD *)v7 + 6) = a4[4];
    *((_OWORD *)v7 + 7) = v10;
    long long v11 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v11;
    std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a1, (uint64_t)v14[0], v6, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__find_equal<unsigned char>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((unsigned __int8 *)a2 + 32), v6 < v7))
  {
    long long v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      long long v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        long long v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        long long v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 32) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 32))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::map<unsigned char,XofNavicEphemeris>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned char,XofNavicEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofNavicEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofNavicEphemeris>,void *> *,long>>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_263CB4D34(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned char,XofNavicEphemeris>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned char,XofNavicEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofNavicEphemeris>,void *> *,long>>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofNavicEphemeris> const&>(v5, v6, v4 + 28, (long long *)(v4 + 28));
      unsigned int v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          unsigned int v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__emplace_hint_unique_key_args<unsigned char,std::pair<unsigned char const,XofNavicEphemeris> const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, long long *a4)
{
  v12[1] = *(uint64_t **)MEMORY[0x263EF8340];
  unsigned int v6 = (uint64_t **)std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__find_equal<unsigned char>(a1, a2, v12, &v11, a3);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    unsigned int v7 = (uint64_t *)operator new(0x68uLL);
    long long v8 = *a4;
    *(_OWORD *)((char *)v7 + 44) = a4[1];
    long long v9 = a4[3];
    *(_OWORD *)((char *)v7 + 60) = a4[2];
    *(_OWORD *)((char *)v7 + 76) = v9;
    *(uint64_t *)((char *)v7 + 92) = *((void *)a4 + 8);
    *(_OWORD *)((char *)v7 + 28) = v8;
    std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a1, (uint64_t)v12[0], v6, v7);
  }
  return v7;
}

uint64_t gn_report_assertion_failure(const char *a1)
{
  GNSS_Event_Log_Ctl(qword_26AA2DF28);
  long long v2 = (void *)qword_26AA2DF28;
  long long v3 = (unsigned char *)(*(void *)qword_26AA2DF28)++;
  unsigned char *v3 = 10;
  if (*v2 >= v2[3]) {
    void *v2 = v2[2];
  }
  EvCrt_v(" ***** ASSERT FAILED ***** %s", a1);
  uint64_t v4 = (void *)qword_26AA2DF28;
  long long v5 = (unsigned char *)(*(void *)qword_26AA2DF28)++;
  *long long v5 = 10;
  if (*v4 >= v4[3]) {
    *uint64_t v4 = v4[2];
  }
  uint64_t v6 = qword_26AA2DF28;

  return GNSS_Event_Log_Ctl(v6);
}

char *NK_SV_Meas_Update(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6, int a7, uint64_t a8, double a9, uint64_t a10)
{
  double v11 = a9;
  int v12 = (int)result;
  char v68 = 0;
  uint64_t v108 = *MEMORY[0x263EF8340];
  long long v75 = (double *)(a10 + 16);
  long long v76 = (double *)(a10 + 24);
  int v69 = (int)result;
  int v70 = (int)result;
  int v71 = (int)result;
  char v13 = 1;
  uint64_t v89 = result;
  do
  {
    uint64_t v14 = 0;
    unsigned int v79 = 0;
    unsigned int v80 = 0;
    char v15 = v13;
    unsigned __int8 v84 = v13 ^ 1;
    char v67 = v13;
    do
    {
      if (*(unsigned char *)(a5 + v14 + 312)
        && ((v15 & 1) != 0 && (*(_DWORD *)(a5 + 4 * v14 + 568) - 1) > 0x1C
         || (v68 & 1) != 0 && (*(_DWORD *)(a5 + 4 * v14 + 568) - 1) <= 0x1C))
      {
        uint64_t v96 = 0;
        memset(v95, 0, sizeof(v95));
        memset(v94, 0, 104);
        memset(v93, 0, sizeof(v93));
        double v90 = 0.0;
        bzero(__dst, 0x2D8uLL);
        BOOL v16 = 0;
        uint64_t v17 = a5 + 8 * v14;
        uint64_t v81 = (double *)(v17 + 9528);
        long long v86 = (uint64_t *)(v17 + 5304);
        uint64_t v85 = (double *)(v17 + 10680);
        unsigned int v18 = (_DWORD *)(a5 + 4 * v14 + 568);
        double v19 = 1.0;
        char v20 = 1;
        while (1)
        {
          double v21 = 1.0e20;
          if ((!v16 & v84) == 0) {
            double v21 = *(double *)(a5 + 8);
          }
          NK_Obs_Equ_SV(v89, *(unsigned __int8 *)(a5 + v14 + 440), *(_DWORD *)(a2 + 4 * v14), a3 + 56 * v14, (uint64_t)v95, v11);
          if (a7)
          {
            NK_SV_Meas_Innov_Sat(v95, v14, (int)v89, a5, a6->f64, v21);
            double v19 = *v81;
          }
          uint64_t v96 = *v86;
          if (v20) {
            memcpy(__dst, a6, sizeof(__dst));
          }
          __n128 result = (char *)umeas((BOOL)a6, 0xCu, v19 * *v85, v95, v94, v93, &v90, v21);
          if ((!v16 & v84) != 0)
          {
            *unsigned int v18 = 0;
            if (v90 < 0.0) {
              __n128 result = (char *)gn_report_assertion_failure("NK_SV_Meas_Update:  Edit add-back failed !");
            }
          }
          else if (v90 >= 0.0)
          {
            v80 += *(unsigned __int8 *)(a4 + v14);
          }
          else
          {
            ++v79;
            --*(unsigned char *)(a5 + 3);
            ++*(unsigned char *)(a5 + 4);
            if (v16)
            {
              *unsigned int v18 = 23;
              memcpy(a6, __dst, 0x2D8uLL);
              GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(a2 + 4 * v14));
              __n128 result = EvLog_v("NK_SV_Meas_Update:  Speed constraint edit, %d  %s  Obs %d", v14, GNSS_SV_Str, v71);
            }
            else
            {
              *unsigned int v18 = 22;
            }
          }
          if ((*v18 - 1) < 0x1D || v16 || !*(unsigned char *)a10)
          {
            if (v16) {
              BOOL v16 = 0;
            }
            goto LABEL_26;
          }
          double v78 = v19;
          unint64_t v24 = *(unsigned int *)(a2 + 4 * v14);
          double v25 = *(double *)a8 - a6[43].f64[1];
          double v106 = v25;
          float64x2_t v82 = vsubq_f64(*(float64x2_t *)(a8 + 8), a6[44]);
          float64x2_t v107 = v82;
          double v26 = 0.0;
          uint64_t v27 = 2;
          do
          {
            double v26 = v26 + *(&v106 + v27) * *(&v106 + v27);
            unint64_t v28 = v27-- + 1;
          }
          while (v28 > 1);
          double v29 = sqrt(v26);
          double v30 = *v76;
          double v31 = *v75;
          double v32 = *v75 - v29;
          double v33 = v29 - *v76;
          if (v32 <= 0.001)
          {
            if (v33 <= 0.001)
            {
              BOOL v16 = 0;
              goto LABEL_54;
            }
            unint64_t v77 = v24;
            double v34 = -v32;
            double v32 = v29 - *v76;
          }
          else
          {
            unint64_t v77 = v24;
            double v34 = v29 - *v76;
          }
          double v105 = 1.0;
          long long v104 = xmmword_263D82560;
          double v35 = (v30 - v31) / v32;
          ud2var((uint64_t)a6, 0xCu, 10, 3u, (double *)&v104);
          double v36 = v35
              * ((*((double *)&v104 + 1) * vmulq_f64(v82, v82).f64[0]
                + v25 * v25 * *(double *)&v104
                + vmuld_lane_f64(v82.f64[1], v82, 1) * v105)
               / (v29
                * v29));
          double v37 = v34 * v34 / v36;
          BOOL v16 = v37 <= 16.0;
          if (v37 <= 16.0)
          {
            uint64_t v38 = 0;
            memset(v103, 0, 96);
            do
            {
              v103[v38 + 9] = *(double *)((char *)&v106 + v38 * 8) / v29;
              ++v38;
            }
            while (v38 != 3);
            v103[12] = v34;
            bzero(v102, 0x270uLL);
            ud2cov(a6->f64, v102, 0xCu);
            unint64_t v39 = 0;
            long long v100 = 0u;
            long long v101 = 0u;
            memset(v99, 0, sizeof(v99));
            do
            {
              unint64_t v40 = 0;
              double v41 = v99[v39];
              unint64_t v42 = v39 + 1;
              do
              {
                unint64_t v43 = v40 + 1;
                double v44 = v103[v40];
                if (v40 < v39)
                {
                  unint64_t v45 = v40 + (((v39 + 1) * v39) >> 1);
                }
                else
                {
                  unint64_t v43 = v40 + 1;
                  unint64_t v45 = v39 + ((unint64_t)((v40 + 1) * v40) >> 1);
                }
                double v41 = v41 + v102[v45] * v44;
                unint64_t v40 = v43;
              }
              while (v43 != 12);
              v99[v39++] = v41;
            }
            while (v42 != 12);
            uint64_t v46 = 0;
            double v47 = 0.0;
            do
            {
              float64x2_t v48 = vmulq_f64(*(float64x2_t *)&v103[v46], *(float64x2_t *)&v99[v46]);
              double v47 = v47 + v48.f64[0] + v48.f64[1];
              v46 += 2;
            }
            while (v46 != 12);
            double v49 = v34
                * v34
                * (*(double *)&v101 * *(double *)&v101
                 + *((double *)&v100 + 1) * *((double *)&v100 + 1)
                 + *((double *)&v101 + 1) * *((double *)&v101 + 1));
            double v50 = v34
                * ((v82.f64[0] * *(double *)&v101 + *((double *)&v100 + 1) * v25 + *((double *)&v101 + 1) * v82.f64[1])
                 * -2.0);
            long long v51 = (double *)(a10 + 24);
            if (v33 <= 0.001) {
              long long v51 = (double *)(a10 + 16);
            }
            double v52 = (v29 * v29 - *v51 * *v51) * (v49 * -4.0) + v50 * v50;
            if (v52 >= 0.0)
            {
              double v55 = sqrt(v52);
              double v56 = 0.0;
              double v57 = v49 + v49;
              double v58 = 0.0;
              double v19 = v78;
              if (vabdd_f64(v55, v50) > 0.01) {
                double v58 = v57 / (v55 - v50);
              }
              double v59 = -v50;
              if (vabdd_f64(v59, v55) > 0.01) {
                double v56 = v57 / (v59 - v55);
              }
              if (v58 <= v56) {
                double v60 = v56;
              }
              else {
                double v60 = v58;
              }
              BOOL v61 = v60 <= v47;
              BOOL v53 = v60 > v47;
              double v62 = v60 - v47;
              if (!v61) {
                double v36 = v62;
              }
            }
            else
            {
              BOOL v53 = 0;
              double v19 = v78;
            }
            memcpy(a6, __dst, 0x2D8uLL);
            double v91 = 0.0;
            memset(v98, 0, 104);
            memset(v97, 0, sizeof(v97));
            umeas((BOOL)a6, 0xCu, v36, v103, v98, v97, &v91, 1.0e20);
            *(unsigned char *)(a10 + 1) = 1;
            double v63 = *(double *)(a10 + 16);
            double v64 = *(double *)(a10 + 24);
            long long v65 = Get_GNSS_SV_Str(v77);
            __n128 result = EvLog_v("NK_Apply_Speed_Constraint:  Applied,  Limits %f %f  Pre_Speed %f  %s  Obs %d  Opt? %d", v63, v64, v29, v65, v70, v53);
            if (v89 == 3)
            {
              ++*(unsigned char *)(a10 + 33);
              double v11 = a9;
            }
            else
            {
              double v11 = a9;
              if (v89 == 2)
              {
                ++*(unsigned char *)(a10 + 34);
              }
              else if (v89 == 1)
              {
                ++*(unsigned char *)(a10 + 32);
              }
            }
            goto LABEL_26;
          }
          long long v54 = Get_GNSS_SV_Str(v77);
          __n128 result = EvLog_v("NK_Apply_Speed_Constraint:  Ignored, Limits %f %f  Pre_Speed %f  %s  Obs %d  PM_Innov %f  PM_Sig %f  Ratio %f", v31, v30, v29, v54, v69, v34, sqrt(v36), sqrt(v37));
          double v11 = a9;
LABEL_54:
          double v19 = v78;
LABEL_26:
          char v23 = v20 & v16;
          char v20 = 0;
          if ((v23 & 1) == 0)
          {
            int v12 = (int)v89;
            char v15 = v67;
            break;
          }
        }
      }
      ++v14;
    }
    while (v14 != 128);
    if (!v79 || v80 >= 5 && (v79 < 2 || v80 != 5)) {
      break;
    }
    __n128 result = EvLog_v("NK_SV_Meas_Update: Edits unreliable, repeating to add back edits,  Obs %d  Num_Added %d  Num_Rejected %d", v12, v80, v79);
    char v13 = 0;
    char v68 = 1;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t NK_Reduce_Num_SV(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  unsigned int v7 = (char *)a3 + 36563;
  long long v8 = (char *)a3 + 21659;
  long long v9 = (char *)a3 + 6755;
  uint16x8_t v10 = (uint16x8_t)vdupq_n_s16(0x630u);
  v11.i64[0] = 0x6000600060006;
  v11.i64[1] = 0x6000600060006;
  uint16x8_t v12 = (uint16x8_t)vdupq_n_s16(0xCCCDu);
  memset(v59, 0, 512);
  v13.i64[0] = 0x32003200320032;
  v13.i64[1] = 0x32003200320032;
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(0x3B6u);
  do
  {
    int16x8_t v15 = *(int16x8_t *)&a3[v6 / 4 + 308];
    int8x16_t v16 = (int8x16_t)vcgtq_u16((uint16x8_t)v15, v10);
    uint16x8_t v17 = (uint16x8_t)vmulq_s16(v15, v11);
    *(int8x16_t *)((char *)&v59[v6 / 0x10 + 32] + 8) = vbslq_s8(v16, v14, (int8x16_t)vmaxq_u16(vshrq_n_u16((uint16x8_t)vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v12.i8), (int16x8_t)vmull_high_u16(v17, v12)), 3uLL), v13));
    v6 += 16;
  }
  while (v6 != 256);
  int v18 = a3[468];
  if (v18)
  {
    uint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    unsigned int v22 = 0;
    char v23 = a3 + 1766;
    do
    {
      uint64_t result = *((unsigned __int8 *)v23 + v19);
      if (*((unsigned char *)v23 + v19))
      {
        uint64_t result = (*((_DWORD *)v59 + v19) - 1);
        if (result >= 0x1D)
        {
          uint64_t result = *(unsigned __int16 *)(a1 + 3168 + 2 * v19);
          if (result >= *((unsigned __int16 *)&v59[32] + v19 + 4))
          {
            ++v21;
          }
          else
          {
            ++v20;
            uint64_t result = *((unsigned __int8 *)a3 + v19 + 57);
            v22 += result;
          }
        }
      }
      ++v19;
    }
    while (v19 != 128);
    if (v22 <= 3 && v21)
    {
      for (uint64_t i = 0; i != 128; ++i)
      {
        if (*((unsigned char *)a3 + i + 7064))
        {
          uint64_t result = *((unsigned __int16 *)&v59[32] + i + 4);
          if (*(unsigned __int16 *)(a1 + 3168 + 2 * i) > result) {
            *((_DWORD *)v59 + i) = 7;
          }
        }
      }
    }
    if (v18 == 1 && !v20 && v21)
    {
      if (*(unsigned char *)(a2 + 27250))
      {
        uint64_t v56 = a2;
        uint64_t v26 = 0;
        uint64_t v27 = a4 + 576;
        while (1)
        {
          uint64_t v28 = a1 + 4 * v26;
          uint64_t result = Is_Legal(*(_DWORD *)(v28 + 96));
          if (result)
          {
            if (*((unsigned __int16 *)a3 + v26 + 616) >= 0x28Bu)
            {
              unsigned int v29 = *((unsigned __int16 *)&v59[32] + v26 + 4);
LABEL_27:
              *(unsigned char *)(a4 + v26 + 448) = 13;
              *(_DWORD *)(v27 + 4 * v26) = *a3;
              GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(v28 + 96));
              uint64_t result = (uint64_t)EvLog_v("ChanReset %d : NKRNSV  %s   M_Status %x  SNR %d  Loop_DRL %d > %d ", v26, GNSS_SV_Str, *(unsigned __int16 *)(a1 + 2 * v26 + 992), *(unsigned __int8 *)(a1 + v26 + 1760), *(unsigned __int16 *)(a1 + 2 * v26 + 3168), v29);
              goto LABEL_28;
            }
            unsigned int v29 = *((unsigned __int16 *)&v59[32] + v26 + 4);
            if (*(unsigned __int16 *)(a1 + 2 * v26 + 3168) > v29) {
              goto LABEL_27;
            }
          }
LABEL_28:
          if (++v26 == 128)
          {
            int v18 = a3[468];
            a2 = v56;
            goto LABEL_30;
          }
        }
      }
    }
    else
    {
LABEL_30:
      if (v18 != 1) {
        goto LABEL_85;
      }
    }
    if (*(unsigned char *)(a2 + 27250))
    {
      uint64_t v31 = 0;
      int v32 = 0;
      unsigned int v33 = 0;
      int v34 = 0;
      unsigned int v35 = 0;
      do
      {
        if (*((unsigned char *)a3 + v31 + 7064) && (*((_DWORD *)v59 + v31) - 1) >= 0x1D)
        {
          ++v35;
          unsigned int v36 = *(unsigned __int8 *)(a1 + 1760 + v31);
          if (v36 < 0xD) {
            ++v34;
          }
          if (v36 > 0xE) {
            ++v33;
          }
          if (v36 > 0x11) {
            ++v32;
          }
        }
        ++v31;
      }
      while (v31 != 128);
      if (v34 && (v35 < 3 || v35 - v34 >= 5 && (v33 > 1 || v32)))
      {
        for (uint64_t j = 0; j != 128; ++j)
        {
          if (*((unsigned char *)a3 + j + 7064) && *(unsigned __int8 *)(a1 + 1760 + j) <= 0xCu) {
            *((_DWORD *)v59 + j) = 8;
          }
        }
      }
    }
    uint64_t v40 = 0;
    unsigned int v41 = 0;
    unint64_t v42 = (unsigned __int16 *)(a1 + 2656);
    do
    {
      if (*((unsigned char *)a3 + v40 + 7064)
        && (*((_DWORD *)v59 + v40) - 1) >= 0x1D
        && *((unsigned char *)a3 + v40 + 57)
        && *(v42 - 128) >= 0xC8u
        && *v42 >= 0xC8u
        && *(unsigned __int8 *)(a1 + v40 + 1760) - *(unsigned __int8 *)(a1 + v40 + 2016) > 2)
      {
        ++v41;
      }
      ++v40;
      ++v42;
    }
    while (v40 != 128);
    if (v41 <= 2)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      do
      {
        if (*((unsigned char *)a3 + v43 + 7064) && (*((_DWORD *)v59 + v43) - 1) >= 0x1D)
        {
          if (*(unsigned __int8 *)(a1 + 1760 + v43) > 0xDu || (int)v44 > 1) {
            goto LABEL_85;
          }
          v58[v44++] = v43;
        }
        ++v43;
      }
      while (v43 != 128);
      if ((int)v44 >= 1)
      {
        BOOL v46 = v44 == 1;
        uint64_t v47 = 1;
        if (!v46) {
          uint64_t v47 = 2;
        }
        float64x2_t v48 = v58;
        do
        {
          uint64_t v49 = *v48++;
          *((_DWORD *)v59 + v49) = 10;
          --v47;
        }
        while (v47);
      }
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = a1 + 3168;
    do
    {
      uint64_t result = Is_Legal(*(_DWORD *)(v39 + 4 * v38 - 3072));
      if (result
        && (*((_DWORD *)v59 + v38) - 1) >= 0x1D
        && *(unsigned __int16 *)(v39 + 2 * v38) > *((unsigned __int16 *)&v59[32] + v38 + 4))
      {
        *((_DWORD *)v59 + v38) = 6;
      }
      ++v38;
    }
    while (v38 != 128);
  }
LABEL_85:
  uint64_t v50 = 0;
  long long v51 = a3 + 9218;
  double v52 = v8 + 565;
  BOOL v53 = a3 + 5492;
  long long v54 = a3 + 1766;
  do
  {
    int v55 = *((_DWORD *)v59 + v50);
    if ((v55 - 1) <= 0x1C)
    {
      if (*((unsigned char *)v54 + v50))
      {
        *((unsigned char *)v54 + v50) = 0;
        --*v9;
        ++v9[1];
        a3[v50 + 1830] = v55;
      }
      if (*((unsigned char *)v53 + v50))
      {
        *((unsigned char *)v53 + v50) = 0;
        --*v8;
        ++v8[1];
        *double v52 = v55;
      }
      if (*((unsigned char *)v51 + v50))
      {
        *((unsigned char *)v51 + v50) = 0;
        --*v7;
        ++v7[1];
        v52[3726] = v55;
      }
    }
    ++v50;
    ++v52;
  }
  while (v50 != 128);
  return result;
}

double BDS_EphReal2Kep(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = 4;
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 8);
  int v2 = *(unsigned __int8 *)(a1 + 10);
  *(unsigned char *)(a2 + 13) = v2;
  *(unsigned char *)(a2 + 14) = *(unsigned char *)(a1 + 9);
  BOOL v3 = !*(unsigned char *)(a1 + 232) && !*(unsigned char *)(a1 + 233) && *(unsigned char *)(a1 + 234) == 0;
  *(unsigned char *)(a2 + 16) = v3;
  BOOL v4 = !*(unsigned char *)(a1 + 235) && !*(unsigned char *)(a1 + 236) && *(unsigned char *)(a1 + 237) == 0;
  *(unsigned char *)(a2 + 17) = v4;
  *(unsigned char *)(a2 + 18) = *(unsigned char *)(a1 + 11);
  int v5 = *(char *)(a1 + 238);
  if (v5 >= 14) {
    LOBYTE(v5) = 14;
  }
  *(unsigned char *)(a2 + 19) = v5;
  *(_WORD *)(a2 + 20) = *(_WORD *)(a1 + 192);
  __int16 v6 = *(_WORD *)(a1 + 16);
  *(_WORD *)(a2 + 22) = v6 + 1356;
  int v8 = *(_DWORD *)(a1 + 20);
  int v7 = *(_DWORD *)(a1 + 24);
  int v9 = v7 + 14;
  *(_DWORD *)(a2 + 24) = v7 + 14;
  *(_DWORD *)(a2 + 28) = v8 + 14;
  int v10 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 32) = v10 + 14;
  if (v8 + 14 <= 604799)
  {
    if (v9 <= 604799) {
      goto LABEL_15;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 28) = v8 - 604786;
    if (v9 <= 604799) {
      goto LABEL_14;
    }
  }
  *(_DWORD *)(a2 + 24) = v7 - 604786;
LABEL_14:
  *(_WORD *)(a2 + 22) = v6 + 1357;
LABEL_15:
  if (v10 + 14 > 604799) {
    *(_DWORD *)(a2 + 32) = v10 - 604786;
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 168);
  double v11 = *(double *)(a1 + 200);
  double v12 = *(double *)(a1 + 208);
  *(void *)(a2 + 56) = *(void *)(a1 + 184);
  *(double *)(a2 + 64) = v11;
  double v13 = *(double *)(a1 + 224);
  *(double *)(a2 + 72) = v11 + *(double *)(a1 + 216);
  *(double *)(a2 + 80) = v12;
  *(double *)(a2 + 88) = v12 + v13;
  *(double *)(a2 + 96) = v11;
  double v14 = dbl_263D82580[(v2 - 1) < 2];
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 48);
  *(int8x16_t *)(a2 + 120) = vextq_s8(*(int8x16_t *)(a1 + 136), *(int8x16_t *)(a1 + 136), 8uLL);
  *(int8x16_t *)(a2 + 136) = vextq_s8(*(int8x16_t *)(a1 + 152), *(int8x16_t *)(a1 + 152), 8uLL);
  *(int8x16_t *)(a2 + 152) = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(a2 + 168) = *(void *)(a1 + 112);
  *(void *)(a2 + 176) = v15;
  uint64_t v16 = *(void *)(a1 + 40);
  *(double *)(a2 + 184) = sqrt(v14 + *(double *)(a1 + 32));
  *(void *)(a2 + 192) = v16;
  double v17 = *(double *)(a1 + 88);
  *(void *)(a2 + 208) = *(void *)(a1 + 96);
  *(int8x16_t *)(a2 + 216) = vextq_s8(*(int8x16_t *)(a1 + 72), *(int8x16_t *)(a1 + 72), 8uLL);
  *(void *)(a2 + 232) = *(void *)(a1 + 104);
  double result = v17 + 0.0010208961;
  *(double *)(a2 + 200) = result;
  return result;
}

double *rnk1_core(double *result, unsigned int a2, double a3, double *a4, int *a5)
{
  *a5 = 0;
  if (a2 >= 2)
  {
    int v5 = result - 1;
    unsigned int v6 = (a2 + a2 * a2) >> 1;
    uint64_t v7 = a2;
    unsigned int v8 = v6 - a2 + 1;
    uint64_t v9 = 1 - a2;
    while (1)
    {
      double v10 = a4[v7 - 1];
      double v11 = v5[v6];
      double v12 = v11 + a3 * v10 * v10;
      if (v12 <= 6.0e-38) {
        break;
      }
      double v13 = a3 * v10 / v12;
      double v14 = v11 / v12;
      v5[v6] = v12;
      double v15 = -v10;
      uint64_t v16 = 0;
      uint64_t v17 = v7 - 1;
      if (v11 / v12 >= 0.0625)
      {
        do
        {
          double v20 = a4[v16] + v15 * v5[v8 + v16];
          a4[v16] = v20;
          v5[v8 + v16] = v5[v8 + v16] + v13 * v20;
          ++v16;
        }
        while (v17 != v16);
      }
      else
      {
        do
        {
          double v18 = a4[v16];
          double v19 = v5[v8 + v16];
          v5[v8 + v16] = v13 * v18 + v19 * v14;
          a4[v16++] = v18 + v15 * v19;
        }
        while (v17 != v16);
      }
      a3 = a3 * v14;
      v6 -= v7--;
      v8 += v9++;
      if ((v7 & 0xFFFFFFFE) == 0) {
        goto LABEL_15;
      }
    }
    if (v12 < 0.0)
    {
      *a5 = v7;
      return result;
    }
    *a5 = -1;
    if (v7)
    {
      uint64_t v7 = v7;
      do
      {
        v5[v8++] = 0.0;
        --v7;
      }
      while (v7);
    }
  }
LABEL_15:
  *double result = *result + a3 * *a4 * *a4;
  return result;
}

BOOL NK_PrePro_SV_Meas(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12)
{
  uint64_t v17 = a12;
  v200[3] = *(double *)MEMORY[0x263EF8340];
  unint64_t v170 = HIDWORD(a1);
  memset(v199, 0, sizeof(v199));
  int v18 = a11[241];
  unsigned int v173 = a1;
  if (a11[241]
    || (a11[20105]
      ? (BOOL v19 = (a11[20106] | a11[20104] | a11[20120]) == 0)
      : (BOOL v19 = 1),
        v19 || *((_WORD *)a11 + 122) || !*(unsigned char *)(a12 + 24)))
  {
    BOOL v20 = 0;
  }
  else
  {
    BOOL v20 = 0;
    if (*(_DWORD *)(a12 + 16) < *((unsigned __int16 *)a11 + 4) && a1 <= 5) {
      BOOL v20 = fabs(*(double *)(a7 + 120)) < 2.5;
    }
  }
  BOOL v171 = v20;
  uint64_t v21 = 0;
  uint64_t v22 = a4 + 992;
  do
  {
    if (*(_DWORD *)(v22 + 4 * v21 - 896))
    {
      unsigned int v23 = *(unsigned __int16 *)(v22 + 2 * v21);
      if (v23 >= 0x1000)
      {
        unsigned int v24 = 1 << ((v23 >> 12) - 1);
        if (v24 >= 0x800) {
          unsigned int v24 = 2048;
        }
        if ((v23 & 0x300) != 0) {
          __int16 v25 = (5 * v24) >> 2;
        }
        else {
          __int16 v25 = v24;
        }
        *(_WORD *)(a12 + 2 * v21 + 1232) = v25;
      }
    }
    ++v21;
  }
  while (v21 != 128);
  std::string v181 = (unsigned __int8 *)(a12 + 6752);
  long long v175 = (unsigned char *)(a12 + 36560);
  long long v190 = (unsigned char *)(a12 + 60200);
  if (!*(unsigned char *)(a12 + 60200))
  {
LABEL_24:
    int v187 = 0;
    goto LABEL_25;
  }
  if ((*(_DWORD *)(a12 + 60208) - 3) >= 2)
  {
    if (*(_DWORD *)(a12 + 60204) == 1)
    {
      double v27 = *(double *)(a12 + 60224);
      double v26 = *(double *)(a12 + 60232);
      double v196 = v27;
      double v197 = v26;
      if (*(unsigned char *)(a12 + 60328)) {
        uint64_t v28 = *(void *)(a12 + 60352);
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v198 = v28;
      Geo2ECEF((uint64_t)&v196, (uint64_t)&WGS84_Datum, v200);
      __double2 v70 = __sincos_stret(v27);
      __double2 v71 = __sincos_stret(v26);
      int v187 = 0;
      double v14 = -v70.__sinval;
      double v12 = -(v70.__cosval * v71.__cosval);
      double v13 = -(v70.__cosval * v71.__sinval);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v187 = 1;
LABEL_25:
  unsigned int v176 = 0;
  int v178 = (unsigned char *)(a12 + 21656);
  uint64_t v29 = 0;
  unsigned int v185 = 0;
  BOOL v180 = v18 != 0;
  uint64_t v179 = a5;
  double v30 = 0.0;
  do
  {
    uint64_t v31 = v17 + 2 * v29;
    int v32 = (__int16 *)(v31 + 62676);
    *(_WORD *)(v31 + 62676) = -1;
    unsigned int v33 = (unsigned __int16 *)(v31 + 62932);
    *(_WORD *)(v31 + 62932) = -1;
    uint64_t v34 = a4 + 4 * v29;
    int v37 = *(_DWORD *)(v34 + 96);
    unsigned int v35 = (unsigned __int8 *)(v34 + 96);
    int v36 = v37;
    if (Is_Legal(v37))
    {
      if (v36 == 7)
      {
        __int16 *v32 = GNSS_Id_To_Num_Prn_Idx(v36);
        uint64_t v38 = (unsigned __int8 *)(a5 + 34556);
        for (uint64_t i = 179; i != 197; ++i)
        {
          LOWORD(v40) = i;
          *unsigned int v33 = i;
          if (*((_DWORD *)v38 - 3) == 1 && *v38 == v35[2])
          {
            *((unsigned char *)v199 + v29) = 1;
            goto LABEL_37;
          }
          v38 += 192;
        }
        if (!*((unsigned char *)v199 + v29)) {
          goto LABEL_42;
        }
LABEL_37:
        if (*(int *)(a4 + 4 * v29 + 1248) <= 9)
        {
          *((unsigned char *)v199 + v29) = 0;
          goto LABEL_42;
        }
        unsigned int v40 = (unsigned __int16)v40;
      }
      else
      {
        *((unsigned char *)v199 + v29) = 1;
        __int16 *v32 = GNSS_Id_To_Num_Prn_Idx(v36);
        unsigned __int16 v41 = GNSS_Id_To_Num_Pos_Idx(*(_DWORD *)v35);
        *unsigned int v33 = v41;
        if (*(int *)(a4 + 4 * v29 + 1248) < 10) {
          goto LABEL_42;
        }
        unsigned int v40 = v41;
      }
      if (v40 >= 0xC5) {
        gn_report_assertion_failure("NKPP: SVindexST");
      }
    }
LABEL_42:
    int v42 = *(_DWORD *)v35;
    if (Is_Legal(*(_DWORD *)v35)
      && *(int *)(a4 + 4 * v29 + 1248) >= 10
      && (unsigned int v43 = (__int16)*v33, (v43 & 0x80000000) == 0)
      && *((unsigned char *)v199 + v29))
    {
      uint64_t v44 = a5 + 192 * v43;
      if (*v190)
      {
        char v45 = *(_DWORD *)(a12 + 60204) == 1 ? v187 : 1;
        if ((v45 & 1) == 0 && v42 == 1)
        {
          unsigned int v46 = *(unsigned __int8 *)(a4 + v29 + 1760);
          if (v46 >= 0x1A && *(unsigned __int8 *)(a4 + v29 + 2016) + 3 <= v46 && *(int *)(v44 + 176) >= 1)
          {
            for (uint64_t j = 0; j != 3; ++j)
              *(double *)((char *)&v196 + j * 8) = *(double *)(v44 + j * 8) - v200[j];
            double v48 = 0.0;
            uint64_t v49 = 2;
            do
            {
              double v48 = v48 + *(&v196 + v49) * *(&v196 + v49);
              unint64_t v50 = v49-- + 1;
            }
            while (v50 > 1);
            uint64_t v51 = 0;
            double v52 = 1.0 / sqrt(v48);
            do
            {
              *(double *)((char *)&v193 + v51) = v52 * *(double *)((char *)&v196 + v51);
              v51 += 8;
            }
            while (v51 != 24);
            if (v30 > -(v13 * v194 + v193 * v12 + v195 * v14)) {
              double v30 = -(v13 * v194 + v193 * v12 + v195 * v14);
            }
          }
        }
      }
      uint64_t v53 = *v32;
      ++*(unsigned char *)(a12 + 62432);
      ++*(unsigned char *)(a12 + *v35 + 62435);
      int v55 = *(_DWORD *)(v44 + 176);
      long long v54 = (_DWORD *)(v44 + 176);
      if (v55 == 1)
      {
        ++*(unsigned char *)(a12 + 62434);
        ++*(unsigned char *)(a12 + *v35 + 62443);
      }
      int v56 = *(char *)(a8 + v53);
      if (v56 == -99) {
        goto LABEL_74;
      }
      double v57 = &a11[40 * v29];
      if (*((_DWORD *)v57 + 480) != v56)
      {
        *((_DWORD *)v57 + 480) = v56;
        double v58 = &a11[40 * v29];
        *((double *)v58 + 244) = (double)v56;
        double v59 = (double)v56 * 0.0174532925;
        *((double *)v58 + 243) = v59;
        *(__double2 *)(v58 + 1928) = __sincos_stret(v59);
      }
      if (!*v54)
      {
LABEL_74:
        uint64_t v17 = a12;
      }
      else
      {
        uint64_t v17 = a12;
        if (v56 > -6)
        {
          if (v56 <= 4) {
            unsigned int v60 = v176;
          }
          else {
            unsigned int v60 = v176 + 1;
          }
          unsigned int v176 = v60;
        }
        else
        {
          ++v185;
          BOOL v180 = 1;
        }
      }
      if (a11[3] + 4 <= *(unsigned __int8 *)(a4 + v29 + 1760)) {
        ++*(unsigned char *)(a12 + 62433);
      }
    }
    else
    {
      uint64_t v17 = a12;
    }
    ++v29;
  }
  while (v29 != 128);
  if (!*v190) {
    goto LABEL_117;
  }
  char v61 = *(_DWORD *)(a12 + 60204) == 1 ? v187 : 1;
  if ((v61 & 1) != 0 || v30 >= -0.258819045) {
    goto LABEL_117;
  }
  *(_WORD *)(p_NA + 8) = 0;
  *long long v190 = 0;
  *(_DWORD *)(a12 + 62288) = 26;
  *(unsigned char *)(a12 + 60328) = 0;
  *(_DWORD *)(a12 + 62304) = 26;
  EvLog_v("NK_PrePro_SV: Tracked SV Elev too negative, Clearing Not Trusted Ext Ref Pos");
  uint64_t v62 = *(void *)(p_api + 48);
  if (!*(unsigned char *)(v62 + 16))
  {
    unsigned int v69 = 0;
    int v65 = 0;
    char v66 = 1;
    double v63 = a11;
    uint64_t v64 = a10;
    goto LABEL_101;
  }
  double v63 = a11;
  uint64_t v64 = a10;
  if (*(int *)v62 < 3)
  {
    unsigned int v69 = 0;
    int v65 = 0;
LABEL_100:
    char v66 = 1;
    goto LABEL_101;
  }
  int v65 = (int)*(double *)(v62 + 40) + 604800 * *(__int16 *)(v62 + 32);
  if (!v65)
  {
    unsigned int v69 = 0;
    goto LABEL_100;
  }
  char v66 = 0;
  int v67 = v65 + 10800;
  int v68 = v67 / 86400;
  int v65 = v67 % 86400;
  unsigned int v69 = v68
      - 1461 * (((22967 * (__int16)(v68 - 5839)) >> 25) + ((22967 * (__int16)(v68 - 5839)) >> 31))
      - 5838;
LABEL_101:
  uint64_t v72 = 0;
  double v196 = 0.0;
  double v197 = 0.0;
  uint64_t v73 = (_DWORD *)(v64 + 11984);
  uint64_t v198 = 0;
  do
  {
    if ((v66 & 1) != 0 || !*(unsigned char *)(*(void *)(v64 + 17168) + v72))
    {
      int v76 = *(_DWORD *)(v64 + 17328 + 4 * v72);
      if (v76 != 2139062143)
      {
        int v77 = v76 + 7;
        double v78 = (int *)(v64 + 4 * v77 + 17424);
        uint64_t v79 = *v78;
        if (v79 != 2139062143 && !*((unsigned char *)&v196 + v79 - 1))
        {
          *double v78 = 2139062143;
          *(_DWORD *)(v64 + 4 * v77 + 17480) = 0;
        }
      }
    }
    else
    {
      unsigned int v74 = (*v73 >> 26) & 0xFFFFF83F | ((*(v73 - 1) & 0x1F) << 6);
      if ((int)(v74 - v69) > 730) {
        v69 += 1461;
      }
      int v75 = v65 - 900 * (*((_WORD *)v73 - 15) & 0x7F) + 86400 * (v69 - v74);
      if (v75 < 0) {
        int v75 = -v75;
      }
      if (v75 <= 0x707) {
        *((unsigned char *)&v196 + v72) = 1;
      }
    }
    ++v72;
    v73 += 16;
  }
  while (v72 != 24);
  if (!v63[136])
  {
    EvCrt_v("NK_PrePro_SV_Meas:  KF_Reset %d (a) :  Ext Ref Pos Suspect,  Not Trusted and SV found < -15 deg elev", 97);
    a11[136] = 1;
    *((_DWORD *)a11 + 35) = 92;
    *(unsigned char *)(v17 + 1864) = 0;
    a11[241] = 1;
    *(unsigned char *)(a8 + 655) = 1;
  }
LABEL_117:
  if (v185 && *(unsigned char *)(a12 + 1864))
  {
    if (*v190 && *(_DWORD *)(a12 + 60204) == 1)
    {
      uint64_t v80 = a12;
      double v81 = Horiz_Diff_Sqd((double *)(a12 + 1704), (const double *)(a12 + 60224));
      float64x2_t v82 = a11;
      unsigned int v83 = v176;
      if (v81 > 2500000000.0)
      {
        int v84 = 1;
        goto LABEL_126;
      }
LABEL_127:
      uint64_t v85 = 0;
      uint64_t v86 = a4 + 1760;
      long long v87 = v82 + 14208;
      do
      {
        uint64_t v88 = a4 + 4 * v85;
        int v89 = *(_DWORD *)(v88 + 96);
        if (Is_Legal(v89))
        {
          int v90 = *(char *)(a8 + (int)GNSS_Id_To_Num_Prn_Idx(v89));
          BOOL v91 = *(int *)(v88 + 1248) >= 10 && v90 <= -6;
          if (v91 && v90 != -99)
          {
            v87[v85] = 0;
            if ((v187 & 1) != 0 || *(unsigned __int8 *)(v86 + v85) <= 0x18u)
            {
              *(unsigned char *)(a9 + v85 + 448) = 17;
              *(_DWORD *)(a9 + 576 + 4 * v85) = *(_DWORD *)a12;
              GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(v88 + 96));
              EvCrt_v("ChanReset %d : NKPrePro1  %s  SV tracked below horizon!  SNR %d  QI %d  Elev %d  Trust_RefPos %d", v85, GNSS_SV_Str, *(unsigned __int8 *)(v86 + v85), *(_DWORD *)(v88 + 1248), v90, v187);
            }
          }
        }
        ++v85;
      }
      while (v85 != 128);
    }
    else
    {
      float64x2_t v82 = a11;
      uint64_t v80 = a12;
      unsigned int v83 = v176;
      if (v185 < 2 || v176 >= 0xC) {
        goto LABEL_127;
      }
      int v84 = 0;
LABEL_126:
      EvCrt_v("NK_PrePro_SV_Meas:  KF_Reset %d (b) :  Ext Ref Pos Suspect,  Ext_Pos %d  Bad_Pos %d  %d < -5deg  %d >= 5deg", 97, v84, v84, v185, v83);
      v82[136] = 1;
      *((_DWORD *)v82 + 35) = 97;
      *(unsigned char *)(v80 + 1864) = 0;
      v82[241] = 1;
      *(unsigned char *)(a8 + 655) = 1;
    }
  }
  uint64_t v93 = 0;
  uint64_t v174 = (unsigned char *)(a12 + 36561);
  std::string v177 = (unsigned char *)(a12 + 21657);
  uint64_t v94 = a12 + 36616;
  uint64_t v95 = a12 + 21712;
  uint64_t v96 = a12 + 6808;
  long long v191 = a11 + 15624;
  uint64_t v97 = (unsigned __int8 *)(a4 + 97);
  long long v98 = (unsigned __int16 *)(a4 + 2400);
  std::string v189 = a11 + 24640;
  uint64_t v188 = a11 + 24512;
  long long v186 = a11 + 24384;
  uint64_t v99 = 62676;
  while (2)
  {
    uint64_t v100 = a4 + 4 * v93;
    int v101 = *(_DWORD *)(v100 + 96);
    if (Is_Legal(v101))
    {
      int v102 = GNSS_Id_To_Num_Prn_Idx(v101);
      unsigned int v103 = *v97;
      BOOL v91 = v103 > 0xF;
      int v104 = (1 << v103) & 0xDD77;
      if (v91 || v104 == 0)
      {
        double v106 = a11;
        if (!*(unsigned char *)(a3 + v102)) {
          goto LABEL_151;
        }
        float64x2_t v107 = (unsigned __int8 *)(a7 + v102 + 536);
LABEL_147:
        BOOL v108 = *v107 == 0;
      }
      else
      {
        double v106 = a11;
        if (*(unsigned char *)(a2 + v102))
        {
          float64x2_t v107 = (unsigned __int8 *)(a7 + v102 + 257);
          goto LABEL_147;
        }
LABEL_151:
        BOOL v108 = 0;
      }
    }
    else
    {
      BOOL v108 = 0;
      double v106 = a11;
    }
    if (*(_DWORD *)(v100 + 96) == *(_DWORD *)&v191[4 * v93])
    {
      *(unsigned char *)(v96 + v93 + 1024) = v186[v93];
      *(unsigned char *)(v95 + v93 + 1024) = v188[v93];
      *(unsigned char *)(v94 + v93 + 1024) = v189[v93];
    }
    else
    {
      v186[v93] = 0;
      v188[v93] = 0;
      v189[v93] = 0;
    }
    int v109 = *(_DWORD *)(a4 + 4 * v93 + 1248);
    if (v109 < 11 || (unsigned int v110 = *(unsigned __int8 *)(a4 + v93 + 1760), v110 < v106[3]))
    {
      *(unsigned char *)(v96 + v93) = 0;
      goto LABEL_158;
    }
    int v111 = !v108;
    if (*v98 < *((unsigned __int16 *)v106 + 5)) {
      int v111 = 1;
    }
    if (((v111 | v180) & 1) == 0)
    {
      if (v110 >= 0x24 && !*(_DWORD *)(a12 + 1872) || (int v112 = *(char *)(a8 + *(__int16 *)(a12 + v99)), v112 == -99))
      {
        *(unsigned char *)(v96 + v93) = 1;
        goto LABEL_171;
      }
      int v114 = *v106;
      *(unsigned char *)(v96 + v93) = v112 >= v114;
      if (v112 < v114) {
        goto LABEL_158;
      }
LABEL_171:
      ++*v181;
      if (*(unsigned char *)(a12 + v93 + 2400)) {
        ++*(unsigned char *)(a12 + 6753);
      }
      char v113 = !v171;
      if (v109 < 0xF) {
        char v113 = 1;
      }
      if (v113)
      {
        if (v109 < 0xD) {
          goto LABEL_159;
        }
      }
      else if (*(unsigned __int8 *)(a4 + v93 + 1760) >= v106[4] {
             && v98[256] >= *((unsigned __int16 *)v106 + 7)
      }
             && v191[v93 + 1280]
             && a11[v93 + 25792]
             && *(_DWORD *)(v100 + 96) == *(_DWORD *)&v191[4 * v93]
             && *(unsigned __int16 *)(v179 + 192 * *(__int16 *)(a12 + v99 + 256) + 166) == *(unsigned __int16 *)&v191[2 * v93 + 1024]
             && *(_DWORD *)(v179 + 192 * *(__int16 *)(a12 + v99 + 256) + 176) == 1
             && *(unsigned char *)(v94 + v93))
      {
        *(unsigned char *)(v94 + v93) = 1;
        ++*v175;
        if (*(unsigned char *)(a12 + v93 + 2528)) {
          ++*v174;
        }
        goto LABEL_160;
      }
      if (v98[128] >= *((unsigned __int16 *)v106 + 6))
      {
        *(unsigned char *)(v95 + v93) = 1;
        ++*v178;
        if (*(unsigned char *)(a12 + v93 + 2528)) {
          ++*v177;
        }
      }
      goto LABEL_159;
    }
    *(unsigned char *)(v96 + v93) = v111 ^ 1;
    if ((v111 & 1) == 0) {
      goto LABEL_171;
    }
LABEL_158:
    *(unsigned char *)(v95 + v93) = 0;
LABEL_159:
    *(unsigned char *)(v94 + v93) = 0;
LABEL_160:
    ++v93;
    v97 += 4;
    v99 += 2;
    ++v98;
    if (v93 != 128) {
      continue;
    }
    break;
  }
  uint64_t v115 = a12;
  if (v173 >= 2)
  {
    if (*(unsigned __int8 *)(a12 + 6753) <= 3u && *v181 >= 4u)
    {
      *(unsigned char *)(a12 + 6753) = 0;
      *(_OWORD *)(a12 + 2400) = 0u;
      *(_OWORD *)(a12 + 2416) = 0u;
      *(_OWORD *)(a12 + 2432) = 0u;
      *(_OWORD *)(a12 + 2448) = 0u;
      *(_OWORD *)(a12 + 2464) = 0u;
      *(_OWORD *)(a12 + 2480) = 0u;
      *(_OWORD *)(a12 + 2496) = 0u;
      *(_OWORD *)(a12 + 2512) = 0u;
    }
    if (*v174 + *v177 <= 3
      && *v175 + *v178 >= 4)
    {
      *std::string v177 = 0;
      *uint64_t v174 = 0;
      *(_OWORD *)(a12 + 2528) = 0u;
      *(_OWORD *)(a12 + 2544) = 0u;
      *(_OWORD *)(a12 + 2560) = 0u;
      *(_OWORD *)(a12 + 2576) = 0u;
      *(_OWORD *)(a12 + 2592) = 0u;
      *(_OWORD *)(a12 + 2608) = 0u;
      *(_OWORD *)(a12 + 2624) = 0u;
      *(_OWORD *)(a12 + 2640) = 0u;
    }
  }
  if (*((_WORD *)v106 + 122) && *v178) {
    --*((_WORD *)v106 + 122);
  }
  unsigned int v116 = v106[2];
  if (v106[2])
  {
    if (*(unsigned __int8 *)(a12 + 6753) >= v116)
    {
      EvLog("NK_PrePro_SV_Meas:  Disabling pseudoranges without differential corrections");
      for (uint64_t k = 0; k != 128; ++k)
      {
        if (!*(unsigned char *)(a12 + 2400 + k))
        {
          *(unsigned char *)(a12 + 6808 + k) = 0;
          if (g_Logging_Cfg >= 5)
          {
            std::string v118 = Get_GNSS_SV_Str(*(unsigned int *)(a4 + 96 + 4 * k));
            EvLog_v("NK_PrePro_SV_Meas:  %d  %s  Remove SV", k, v118);
          }
        }
      }
      unsigned int v116 = v106[2];
      uint64_t v115 = a12;
    }
    if (*v174 + *v177 >= v116)
    {
      for (uint64_t m = 0; m != 128; ++m)
      {
        if (!*(unsigned char *)(v115 + 2528 + m))
        {
          *(unsigned char *)(v115 + 21712 + m) = 0;
          *(unsigned char *)(v115 + 36616 + m) = 0;
        }
      }
    }
  }
  if ((v106[1] & 0x80000000) == 0)
  {
    unsigned int v120 = v106[1];
    unsigned int v121 = *v181;
    if (v121 > v120)
    {
      EvLog_v("NK_PrePro_SV_Meas:  Reducing available pseudoranges  %d > %d", *v181, v120);
      unsigned int v121 = *v181;
      unsigned int v120 = v106[1];
    }
    if (v121 > v120)
    {
      uint64_t v122 = 0;
      int v123 = 0;
      __int16 v124 = 91;
      while (1)
      {
        if (*(unsigned char *)(v115 + v122 + 6808))
        {
          int v125 = *(char *)(a8 + *(__int16 *)(v115 + 2 * v122 + 62676));
          int v126 = v124;
          if (v124 >= v125) {
            __int16 v124 = *(char *)(a8 + *(__int16 *)(v115 + 2 * v122 + 62676));
          }
          if (v126 > v125) {
            int v123 = v122;
          }
        }
        if (++v122 == 128)
        {
          int v127 = Get_GNSS_SV_Str(*(unsigned int *)(a4 + 4 * v123 + 96));
          EvDbg_v("NK_PrePro_SV_Meas:  %d  %s  Removing low elev %d deg PR", v123, v127, v124);
          uint64_t v122 = 0;
          *(unsigned char *)(v115 + v123 + 6808) = 0;
          unsigned __int8 v128 = *v181 - 1;
          *std::string v181 = v128;
          __int16 v124 = 91;
          int v123 = 0;
          if (v106[1] >= v128) {
            break;
          }
        }
      }
    }
  }
  uint64_t v129 = 0;
  uint64_t v130 = v115 + 36616;
  do
  {
    int v131 = *(_DWORD *)(a4 + 96 + 4 * v129);
    if (Is_Legal(v131))
    {
      uint64_t v132 = *(char *)(a6 + (int)GNSS_Id_To_Num_Prn_Idx(v131) + 5976);
      if ((v132 & 0x8000000000000000) == 0
        && *(unsigned char *)(a6 + 48 * v132 + 76)
        && *(unsigned char *)(v130 + v129)
        && fabs(*(double *)(a12 + 8 * v129 + 208) / (*(double *)(a12 + 1552) * 0.190293673)+ (double)*(__int16 *)(a6 + 48 * v132 + 94)) > 15.0)
      {
        *(unsigned char *)(v130 + v129) = 0;
        *(unsigned char *)(v115 + 21712 + v129) = 1;
      }
    }
    ++v129;
  }
  while (v129 != 128);
  uint64_t v133 = 0;
  *(_WORD *)std::string v181 = 0;
  *(_WORD *)int v178 = 0;
  *(_WORD *)long long v175 = 0;
  uint64_t v134 = a12 + 36616;
  uint64_t v135 = a12 + 21712;
  *(unsigned char *)(a12 + 1881) = 0;
  long long v136 = (unsigned __int16 *)(a4 + 2912);
  LOWORD(v196) = 0;
  while (2)
  {
    if (*(unsigned char *)(a12 + 6808 + v133))
    {
      ++*v181;
      if (*(unsigned char *)(a12 + v133 + 2400)) {
        ++*(unsigned char *)(a12 + 6753);
      }
      if (*(unsigned char *)(v135 + v133))
      {
        ++*v178;
        uint64_t v137 = (unsigned char *)(a12 + 21657);
        if (!*(unsigned char *)(a12 + v133 + 2528)) {
          goto LABEL_246;
        }
LABEL_245:
        ++*v137;
      }
      else if (*(unsigned char *)(v134 + v133))
      {
        ++*v175;
        uint64_t v137 = (unsigned char *)(a12 + 36561);
        if (*(unsigned char *)(a12 + v133 + 2528)) {
          goto LABEL_245;
        }
      }
LABEL_246:
      uint64_t v138 = *(unsigned __int8 *)(a4 + v133 + 608);
      unsigned int v139 = *(unsigned __int8 *)(a4 + v133 + 1760);
      if (v139 > *((unsigned __int8 *)&v196 + v138))
      {
        *((unsigned char *)&v196 + v138) = v139;
        long long v140 = &a11[v138 + 15408];
        if (v139 >= *v140
          && (*v136 > 0x64u || *(v136 - 128) >= 0x259u)
          && *(unsigned __int8 *)(a4 + v133 + 2016) + 6 <= v139)
        {
          *long long v140 = v139;
          *(_DWORD *)&a11[4 * v138 + 15400] = *(_DWORD *)a12;
        }
      }
    }
    else
    {
      *(unsigned char *)(v135 + v133) = 0;
      *(unsigned char *)(v134 + v133) = 0;
    }
    ++v133;
    ++v136;
    if (v133 != 128) {
      continue;
    }
    break;
  }
  uint64_t v141 = 0;
  char v142 = BYTE1(v196);
  if (LOBYTE(v196) > BYTE1(v196)) {
    char v142 = LOBYTE(v196);
  }
  char v143 = 1;
  *(unsigned char *)(a12 + 1881) = v142;
  LOWORD(v193) = 0;
  do
  {
    char v144 = v143;
    uint64_t v145 = &a11[v141 + 15408];
    unsigned int v146 = *v145;
    if (v146 >= 0x13)
    {
      uint64_t v147 = &a11[4 * v141];
      if (*(_DWORD *)a12 - *((_DWORD *)v147 + 3850) >= 20001)
      {
        LOBYTE(v146) = v146 - 1;
        *uint64_t v145 = v146;
        *((_DWORD *)v147 + 3850) = *(_DWORD *)a12;
      }
    }
    char v143 = 0;
    unsigned int v148 = v146;
    char v149 = v146 - 10;
    if (v148 <= 0x2C) {
      char v149 = 34;
    }
    *((unsigned char *)&v193 + v141) = v149;
    uint64_t v141 = 1;
  }
  while ((v144 & 1) != 0);
  for (uint64_t n = 0; n != 128; ++n)
  {
    BOOL v151 = *(int *)(a4 + 4 * n + 1248) >= 10
        && *(unsigned __int8 *)(a4 + n + 1760) >= *((unsigned __int8 *)&v193
                                                                + *(unsigned __int8 *)(a4 + n + 608));
    *(unsigned char *)(a12 + 2010 + n) = v151;
  }
  uint64_t v152 = 0;
  uint64_t v153 = a4 + 608;
  do
  {
    int v154 = *(_DWORD *)(v153 + 4 * v152 - 512);
    if (Is_Legal(v154))
    {
      uint64_t v155 = *(unsigned __int8 *)(v153 + v152);
      char v156 = *(unsigned char *)(a8 + (int)GNSS_Id_To_Num_Prn_Idx(v154));
      int v157 = a11[v155 + 15408];
      if ((v156 - 48) >= 0xCAu)
      {
        v157 -= (50 - v156) / 3u;
        if (v157 <= 2) {
          LOBYTE(v157) = 2;
        }
      }
      *(unsigned char *)(a12 + 1882 + v152) = v157 - 2;
    }
    ++v152;
  }
  while (v152 != 128);
  uint64_t v158 = 0;
  *(void *)(a12 + 63188) = 0;
  long long v159 = (unsigned __int8 *)(a4 + 96);
  do
  {
    if (*(unsigned char *)(a12 + 6808 + v158)
      && (*(__int16 *)(a12 + 62932 + 2 * v158) & 0x80000000) == 0
      && *(_DWORD *)(v179 + 192 * *(unsigned __int16 *)(a12 + 62932 + 2 * v158) + 176) == 1)
    {
      ++*(unsigned char *)(a12 + *v159 + 63188);
    }
    ++v158;
    v159 += 4;
  }
  while (v158 != 128);
  uint64_t v160 = 0x4415AF1D78B58C40;
  if (!a11[241])
  {
    if (v173 == v170)
    {
LABEL_282:
      uint64_t v160 = 0x4042000000000000;
    }
    else
    {
      switch(v173)
      {
        case 0u:
          break;
        case 1u:
          if (!v170) {
            goto LABEL_282;
          }
          break;
        case 2u:
          if (v170 <= 1) {
            goto LABEL_282;
          }
          break;
        case 3u:
          if (v170 <= 2) {
            goto LABEL_282;
          }
          break;
        case 4u:
          if ((v170 - 5) >= 3) {
            goto LABEL_282;
          }
          break;
        case 5u:
          if ((v170 & 0xFFFFFFFE) != 6) {
            goto LABEL_282;
          }
          break;
        case 6u:
          if (v170 != 7) {
            goto LABEL_282;
          }
          break;
        default:
          goto LABEL_282;
      }
    }
  }
  *(void *)(a12 + 6760) = v160;
  *(void *)(a12 + 21664) = v160;
  *(void *)(a12 + 36568) = v160;
  double v161 = *((double *)a11 + 3372);
  if (v161 < 1.0)
  {
    uint64_t v162 = 0x3FF0000000000000;
    goto LABEL_287;
  }
  if (v161 <= 10.0)
  {
    *(double *)(a12 + 6800) = v161;
  }
  else
  {
    uint64_t v162 = 0x4024000000000000;
LABEL_287:
    *(void *)(a12 + 6800) = v162;
  }
  double v163 = *((double *)a11 + 3375);
  if (v163 < 1.0)
  {
    uint64_t v164 = 0x3FF0000000000000;
    goto LABEL_293;
  }
  if (v163 <= 10.0)
  {
    *(double *)(a12 + 21704) = v163;
  }
  else
  {
    uint64_t v164 = 0x4024000000000000;
LABEL_293:
    *(void *)(a12 + 21704) = v164;
  }
  double v165 = *((double *)a11 + 3378);
  if (v165 < 1.0)
  {
    uint64_t v166 = 0x3FF0000000000000;
    goto LABEL_299;
  }
  if (v165 <= 10.0)
  {
    *(double *)(a12 + 36608) = v165;
  }
  else
  {
    uint64_t v166 = 0x4024000000000000;
LABEL_299:
    *(void *)(a12 + 36608) = v166;
  }
  if (*v181)
  {
    int v167 = 0;
    goto LABEL_305;
  }
  int v168 = *((_DWORD *)a11 + 40);
  if ((v168 & 0x80000000) == 0)
  {
    int v167 = v168 + 1;
LABEL_305:
    *((_DWORD *)a11 + 40) = v167;
  }
  return *(unsigned char *)(a12 + 6753) != 0;
}

void gnssDataMgt_Init(void)
{
  g_CbList = Gnm_ReceiveData;
  qword_26A9CA168 = (uint64_t)Hal00_06ReadBufNtf;
  qword_26A9CA178 = (uint64_t)GnssDbgMgr_WriteLog;
  qword_26A9CA170 = (uint64_t)GncP02_10DataIndFromMECB;
}

void *gnss::GnssAdaptDevice::Ga07_04DeviceInitRespHndlr(gnss::GnssAdaptDevice *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Init Status,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 77, "Ga07_04DeviceInitRespHndlr", a2);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)this + 56);
  gnss::GnssAdaptDevice::Ga07_06SetDefaultState(this, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)__str);
  if (a2) {
    int v5 = 1;
  }
  else {
    int v5 = 8;
  }
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)this, v5, (uint64_t)v7, (uint64_t)"Ga07_04DeviceInitRespHndlr");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](__str);
}

void sub_263CB792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::Ga07_06SetDefaultState(gnss::GnssAdaptDevice *this, char a2)
{
  int v2 = this;
  uint64_t v6 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 88) = a2;
  *(_WORD *)((char *)this + 89) = 0;
  *((unsigned char *)this + 92) = 0;
  uint64_t v4 = (char *)this + 144;
  int v5 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v4, 8uLL);
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy((uint64_t)v2 + 96, *((void **)v2 + 13));
  *((void *)v2 + 12) = (char *)v2 + 104;
  *((void *)v2 + 13) = 0;
  BOOL v3 = (void *)*((void *)v2 + 16);
  int v2 = (gnss::GnssAdaptDevice *)((char *)v2 + 128);
  *((void *)v2 - 2) = 0;
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)v2 - 8, v3);
  *((void *)v2 - 1) = v2;
  *(void *)int v2 = 0;
  *((void *)v2 + 1) = 0;
}

void sub_263CB7A00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *gnss::GnssAdaptDevice::Ga07_07AdaptResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 160);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice20Ga07_07AdaptResponseENS_6ResultENSt3__18functionIFvS1_EEEPKc_block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  int v10 = a2;
  v9[4] = a4;
  dispatch_async(v6, block);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
}

void gnss::GnssAdaptDevice::Ga07_05HandleGnssHwStatusInd(uint64_t a1, char a2, int a3, char *__src)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (__src)
  {
    memset(v23, 0, 22);
    long long v22 = 0u;
    long long v21 = 0u;
    long long __str = 0u;
    memcpy_s("Ga07_05HandleGnssHwStatusInd", 107, &__str, 0x46u, __src, 0x46uLL);
    long long v15 = *(_OWORD *)(__src + 18);
    long long v16 = *(_OWORD *)(__src + 34);
    long long v17 = *(_OWORD *)(__src + 50);
    __int16 v18 = *((_WORD *)__src + 33);
    long long v14 = *(_OWORD *)(__src + 2);
    uint64_t v7 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDevice28Ga07_05HandleGnssHwStatusIndE11e_Gnm_ErrorjP17s_Gnm_ReadyStatus_block_invoke;
    block[3] = &__block_descriptor_tmp_2;
    void block[4] = a1;
    char v19 = a2;
    *(void *)&v13[14] = *(void *)((char *)v23 + 14);
    long long v12 = v22;
    *(_OWORD *)double v13 = v23[0];
    long long v10 = __str;
    long long v11 = v21;
    dispatch_async(v7, block);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(&__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf((char *)&__str, 0x3C5uLL, "%10u %s%c %s: #%04hx p_InitStatus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga07_05HandleGnssHwStatusInd", 513);
    gnssOsa_PrintLog((char *)&__str, 1, 1, 0);
  }
}

void *___ZN4gnss15GnssAdaptDevice28Ga07_05HandleGnssHwStatusIndE11e_Gnm_ErrorjP17s_Gnm_ReadyStatus_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v4 = 84;
    if (!*(unsigned char *)(a1 + 40)) {
      uint64_t v4 = 70;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Res,%u,HwStatus,%c,HWInitStatus,%hhu\n", (unint64_t)v3, "ADP", 73, "Ga07_05HandleGnssHwStatusInd_block_invoke", *(unsigned __int8 *)(a1 + 176), v4, *(unsigned __int8 *)(a1 + 41));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_14;
    }
LABEL_15:
    long long v14 = (gnss::GnssAdaptDevice *)v2;
    int v15 = 0;
    return gnss::GnssAdaptDevice::Ga07_04DeviceInitRespHndlr(v14, v15);
  }
  long long v5 = *(_OWORD *)(a1 + 126);
  long long v6 = *(_OWORD *)(a1 + 158);
  v19[2] = *(_OWORD *)(a1 + 142);
  v19[3] = v6;
  __int16 v20 = *(_WORD *)(a1 + 174);
  v19[0] = *(_OWORD *)(a1 + 110);
  v19[1] = v5;
  gnss::GnssAdaptDevice::Ga00_10GnssSetHwVersionInfo(v2, (uint64_t)v19);
  HalExtensions = gnss::GnssAdaptDevice::getHalExtensions((gnss::GnssAdaptDevice *)v2);
  __int16 v8 = (*(uint64_t (**)(void *))(*(void *)HalExtensions + 16))(HalExtensions);
  if ((HSW_SetSWBuildGPSWKNum(v8) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v9 = gnss::GnssAdaptDevice::getHalExtensions((gnss::GnssAdaptDevice *)v2);
  double v10 = (*(double (**)(void *))(*(void *)v9 + 88))(v9);
  if ((HSW_SetCrossCorrelationCfg(v10, v11, v12, v13) & 1) == 0) {
    goto LABEL_15;
  }
  if (*(unsigned char *)(v2 + 90))
  {
    if (Gnm_ClearGNSSCache(0x10000))
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache on reset,%u\n", v18);
LABEL_14:
        gnssOsa_PrintLog(__str, 1, 1, 0);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    if (gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 360), 0x1F4u))
    {
      if (!g_LbsOsaTrace_Config) {
        goto LABEL_15;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache\n");
      goto LABEL_14;
    }
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v17 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Device Init success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "Ga07_05HandleGnssHwStatusInd_block_invoke");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  long long v14 = (gnss::GnssAdaptDevice *)v2;
  int v15 = 1;
  return gnss::GnssAdaptDevice::Ga07_04DeviceInitRespHndlr(v14, v15);
}

void ___ZN4gnss15GnssAdaptDevice20Ga07_07AdaptResponseENS_6ResultENSt3__18functionIFvS1_EEEPKc_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::function<void ()(gnss::Result)>::operator()(a1 + 32, *(_DWORD *)(a1 + 72));
  if (*(void *)(a1 + 64)) {
    BOOL v2 = g_LbsOsaTrace_Config >= 5;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga07_07AdaptResponse_block_invoke", *(const char **)(a1 + 64), *(_DWORD *)(a1 + 72));
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void *gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v7 = gnss::GnssAdaptDevice::Ga07_12MapGnmRespToGnssResult(a1, a2);
  __int16 v8 = *(NSObject **)(a1 + 160);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice28Ga07_09AdaptGnmEarlyResponseE11e_Gnm_ErrorNSt3__18functionIFvNS_6ResultEEEEPKc_block_invoke;
  block[3] = &__block_descriptor_tmp_12_0;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
  int v12 = v7;
  v11[4] = a4;
  dispatch_async(v8, block);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
}

uint64_t gnss::GnssAdaptDevice::Ga07_12MapGnmRespToGnssResult(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2 < 0xF) {
    return dword_263D825A8[(char)a2];
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx No match,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 87, "Ga07_12MapGnmRespToGnssResult", 257, a2);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 7;
}

void ___ZN4gnss15GnssAdaptDevice28Ga07_09AdaptGnmEarlyResponseE11e_Gnm_ErrorNSt3__18functionIFvNS_6ResultEEEEPKc_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::function<void ()(gnss::Result)>::operator()(a1 + 32, *(_DWORD *)(a1 + 72));
  if (*(void *)(a1 + 64)) {
    BOOL v2 = g_LbsOsaTrace_Config >= 5;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga07_09AdaptGnmEarlyResponse_block_invoke", *(const char **)(a1 + 64), *(_DWORD *)(a1 + 72));
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void *gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(uint64_t a1, char a2, uint64_t a3)
{
  v8[4] = *MEMORY[0x263EF8340];
  char v5 = a2;
  std::pair<e_Gnm_Api,gnss::s_StatusCB>::pair[abi:ne180100]<e_Gnm_Api&,gnss::s_StatusCB&,0>(v6, &v5, a3);
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__emplace_unique_key_args<e_Gnm_Api,std::pair<e_Gnm_Api,gnss::s_StatusCB>>(a1 + 96, v6, v6);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
}

void sub_263CB8470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Type,%u,resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga07_11HandleGnmStatusResponses", a3, a2);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  uint64_t v28 = 0;
  uint64_t v30 = 0;
  uint64_t v7 = a1 + 104;
  uint64_t v8 = *(void *)(a1 + 104);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = a1 + 104;
  uint64_t v10 = *(void *)(a1 + 104);
  do
  {
    unsigned int v11 = *(unsigned __int8 *)(v10 + 32);
    BOOL v12 = v11 >= a3;
    if (v11 >= a3) {
      uint64_t v13 = (uint64_t *)v10;
    }
    else {
      uint64_t v13 = (uint64_t *)(v10 + 8);
    }
    if (v12) {
      uint64_t v9 = v10;
    }
    uint64_t v10 = *v13;
  }
  while (*v13);
  if (v9 != v7 && *(unsigned __int8 *)(v9 + 32) <= a3)
  {
    uint64_t v16 = a1 + 104;
    do
    {
      unsigned int v17 = *(unsigned __int8 *)(v8 + 32);
      BOOL v18 = v17 >= a3;
      if (v17 >= a3) {
        char v19 = (uint64_t *)v8;
      }
      else {
        char v19 = (uint64_t *)(v8 + 8);
      }
      if (v18) {
        uint64_t v16 = v8;
      }
      uint64_t v8 = *v19;
    }
    while (*v19);
    if (v16 == v7 || *(unsigned __int8 *)(v16 + 32) > a3) {
      uint64_t v16 = a1 + 104;
    }
    std::function<void ()(gnss::Result)>::operator=(v27, v16 + 40);
    std::function<void ()(gnss::Result)>::operator=(v29, v16 + 72);
    __int16 v20 = *(void **)(v9 + 8);
    if (v20)
    {
      do
      {
        long long v21 = v20;
        __int16 v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      uint64_t v22 = (void *)v9;
      do
      {
        long long v21 = (void *)v22[2];
        BOOL v23 = *v21 == (void)v22;
        uint64_t v22 = v21;
      }
      while (!v23);
    }
    if (*(void *)(a1 + 96) == v9) {
      *(void *)(a1 + 96) = v21;
    }
    uint64_t v24 = *(uint64_t **)(a1 + 104);
    --*(void *)(a1 + 112);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v24, (uint64_t *)v9);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v9 + 72));
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v9 + 40));
    operator delete((void *)v9);
    if (v28)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v27);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(a1, a2, (uint64_t)v26, (uint64_t)"Ga07_11HandleGnmStatusResponses");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
    }
    if (v30)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v29);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(a1, a2, (uint64_t)v25, (uint64_t)"Ga07_11HandleGnmStatusResponses");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    }
    if (a2 && a3 == 18) {
      *(unsigned char *)(a1 + 92) = 0;
    }
  }
  else
  {
LABEL_14:
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GnmLUT Handle not found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "Ga07_11HandleGnmStatusResponses");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v29);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v27);
}

void sub_263CB87AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void *gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  unsigned int v5 = a2;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::function<void ()(gnss::Result)>>>((uint64_t **)(a1 + 120), &v5, &v5);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
}

void sub_263CB887C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(gnss::GnssAdaptDevice *this, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  BOOL v2 = (char *)this + 128;
  uint64_t v3 = (char *)*((void *)this + 16);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v5 = (uint64_t **)((char *)this + 120);
  uint64_t v6 = (uint64_t *)v2;
  do
  {
    unsigned int v7 = *((_DWORD *)v3 + 8);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = (char **)v3;
    }
    else {
      uint64_t v9 = (char **)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = (uint64_t *)v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 != (uint64_t *)v2 && *((_DWORD *)v6 + 8) <= a2)
  {
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__remove_node_pointer(v5, v6);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6 + 5);
    operator delete(v6);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNS Key deleted from LUT,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga07_14RemoveRespHndlFromGnsLut", a2);
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
LABEL_12:
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnsLUT Handle\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 87, "Ga07_14RemoveRespHndlFromGnsLut", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
}

void gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(uint64_t a1, unsigned int a2, uint64_t a3, const char *a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v6 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(a1, a2);
  std::function<void ()(gnss::Result)>::operator()(a3, v6);
  if (a4)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga07_15AdaptGnsEarlyResponse", a4, v6);
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

uint64_t gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2 < 0xF) {
    return dword_263D825E4[a2];
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx No match,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 87, "Ga07_16MapGnsRespToGnssResult", 770, a2);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 7;
}

void gnss::GnssAdaptDevice::Ga07_17RegisterGnmStatusResponse(gnss::GnssAdaptDevice *a1, uint64_t a2, uint64_t a3, int a4)
{
  char v5 = (char)a1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (!DeviceInstance)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid Device Instance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga07_17RegisterGnmStatusResponse", 513);
    int v12 = 1;
    goto LABEL_13;
  }
  uint64_t v7 = DeviceInstance;
  if (a4 != 16 && a4 != 1) {
    goto LABEL_8;
  }
  if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(DeviceInstance + 360)) && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CtrlReqSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 87, "Ga07_17RegisterGnmStatusResponse", 257);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v7 + 91));
  if ((v9 & 1) == 0)
  {
LABEL_8:
    uint64_t v10 = *(NSObject **)(v7 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDevice32Ga07_17RegisterGnmStatusResponseE11e_Gnm_Errorbj9e_Gnm_Api_block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    void block[4] = v7;
    char v15 = v5;
    char v16 = a4;
    dispatch_async(v10, block);
    return;
  }
  atomic_store(0, (unsigned __int8 *)(v7 + 91));
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Internal resp. ignored\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "Ga07_17RegisterGnmStatusResponse");
    int v12 = 4;
LABEL_13:
    gnssOsa_PrintLog(__str, v12, 1, 0);
  }
}

void *___ZN4gnss15GnssAdaptDevice32Ga07_17RegisterGnmStatusResponseE11e_Gnm_Errorbj9e_Gnm_Api_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 41);

  return gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v3, v4);
}

unsigned char *std::pair<e_Gnm_Api,gnss::s_StatusCB>::pair[abi:ne180100]<e_Gnm_Api&,gnss::s_StatusCB&,0>(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 40);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 8), a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v5, a3 + 32);
  return a1;
}

void sub_263CB8F88(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__emplace_unique_key_args<e_Gnm_Api,std::pair<e_Gnm_Api,gnss::s_StatusCB>>(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  v10[3] = *(uint64_t **)MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t **)(a1 + 8);
  unsigned int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unsigned int v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        unsigned int v8 = *((unsigned __int8 *)v4 + 32);
        if (v6 >= v8) {
          break;
        }
        unsigned int v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      unsigned int v4 = v7[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__construct_node<std::pair<e_Gnm_Api,gnss::s_StatusCB>>(a1, a3, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    return v10[0];
  }
  return (uint64_t *)v7;
}

uint64_t std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__construct_node<std::pair<e_Gnm_Api,gnss::s_StatusCB>>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  v6[32] = *a2;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v6 + 40), (uint64_t)(a2 + 8));
  uint64_t result = std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v6 + 72), (uint64_t)(a2 + 40));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_263CB91C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    unsigned int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unsigned int v3 = v4;
      unsigned int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unsigned int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    unsigned char *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    char v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_67;
    }
    __int16 v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_67:
        __int16 v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *__int16 v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        char v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_71;
    }
    *((unsigned char *)v7 + 24) = 0;
    unsigned int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_52;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  char v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    char v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_58;
    }
    *((unsigned char *)v7 + 24) = 0;
    unsigned int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      unsigned int v17 = result;
LABEL_52:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  char v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_58:
    char v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    char v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *uint64_t v24 = v23;
LABEL_71:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::function<void ()(gnss::Result)>>>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v6 = a1 + 1;
  int v5 = a1[1];
  uint64_t v7 = a1 + 1;
  int v8 = a1 + 1;
  if (v5)
  {
    unsigned int v9 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unsigned int v10 = *((_DWORD *)v5 + 8);
        if (v9 >= v10) {
          break;
        }
        int v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x48uLL);
    v13[1] = v6;
    *((_DWORD *)v11 + 8) = *a3;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v11 + 5), (uint64_t)(a3 + 2));
    char v14 = 1;
    std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    unsigned int v4 = a2;
    do
    {
      unsigned int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      unsigned int v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unsigned int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

const void **SV_State_Update_Wrapper(uint64_t a1)
{
  GNSS_Validate_p_list((const void **)a1, "SV_State_Update_Wrapper: Entry");
  if (*(_DWORD *)a1 != 7)
  {
    uint64_t v2 = *(void **)(a1 + 184);
    void *v2 = 0;
    v2[1] = 0;
    GPS_State_Update(*(void *)(a1 + 144), *(void *)(a1 + 184), *(void *)(a1 + 48), *(void **)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88));
    GLON_State_Update(*(char **)(a1 + 144), *(void *)(a1 + 184), *(void *)(a1 + 48), *(int **)(a1 + 56), *(void *)(a1 + 72), *(void *)(a1 + 88));
  }

  return GNSS_Validate_p_list((const void **)a1, "SV_State_Update_Wrapper:  Exit");
}

const double *NK_SV_Meas_Check(const double *result, uint64_t a2, uint64_t a3)
{
  unsigned int v69 = result;
  uint64_t v4 = 0;
  char v5 = 0;
  char v6 = 0;
  v78[6] = *(double *)MEMORY[0x263EF8340];
  double v70 = 0.0;
  uint64_t v7 = (_DWORD *)(a3 + 22224);
  do
  {
    if (*(unsigned char *)(a3 + 7064 + v4) && (*(_DWORD *)(a3 + 7320 + 4 * v4) - 1) < 0x1D) {
      ++v5;
    }
    if (*(unsigned char *)(a3 + 21968 + v4) && (*v7 - 1) < 0x1D
      || *(unsigned char *)(a3 + 36872 + v4) && (v7[3726] - 1) <= 0x1C)
    {
      ++v6;
    }
    ++v4;
    ++v7;
  }
  while (v4 != 128);
  v74[0] = v5;
  v74[1] = v6;
  if (*(unsigned char *)(a2 + 241)
    || *(_DWORD *)(a2 + 27120) > *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a3 + 1872) != 1)
  {
    BOOL v64 = 0;
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(a2 + 148);
    if (v8 >= *(_DWORD *)(a2 + 152)) {
      unsigned int v8 = *(_DWORD *)(a2 + 152);
    }
    if (v8 >= *(_DWORD *)(a2 + 156)) {
      unsigned int v8 = *(_DWORD *)(a2 + 156);
    }
    BOOL v64 = v8 > 0xA;
  }
  double v9 = 0.0;
  uint64_t v10 = 208;
  do
  {
    double v9 = v9 + *(double *)(a2 + 8 * v10) * *(double *)(a2 + 8 * v10);
    unint64_t v11 = v10 - 205;
    --v10;
  }
  while (v11 > 1);
  uint64_t v12 = 0;
  int v66 = 0;
  int v68 = (double *)(a2 + 976);
  uint64_t v13 = a2 + 1600;
  uint64_t v63 = a3 + 6752;
  uint64_t v61 = a3 + 21656;
  uint64_t v62 = a3 + 36560;
  uint64_t v59 = a3 + 7064;
  unsigned int v60 = result + 220;
  unsigned int v58 = sqrt(v9) >> 3;
  while (1)
  {
    do
    {
      if (v12 == (void *)2)
      {
        BOOL v14 = 1;
        uint64_t v15 = v62;
      }
      else
      {
        v73[(void)v12] = 0;
        *(&v71 + (void)v12) = -1;
        char v16 = &v78[3 * (void)v12];
        BOOL v14 = v12 == (void *)1;
        if (v12 == (void *)1) {
          uint64_t v15 = v61;
        }
        else {
          uint64_t v15 = v63;
        }
        *char v16 = 0.0;
        v16[1] = 0.0;
      }
      uint64_t v17 = 0;
      uint64_t v18 = (void *)((char *)v12 + 1);
      if (v12) {
        char v19 = 1;
      }
      else {
        char v19 = v64;
      }
      __int16 v20 = &v78[3 * v14];
      int v67 = v20 + 1;
      do
      {
        if (*(unsigned char *)(v15 + v17 + 312))
        {
          NK_Obs_Equ_SV(v18, *(unsigned __int8 *)(v15 + v17 + 440), *((_DWORD *)v69 + v17 + 24), a3 + 56 * v17 + 52760, (uint64_t)v77, *(double *)(a3 + 1552));
          uint64_t v21 = 0;
          double v22 = *(double *)(v15 + 8 * v17 + 5304);
          double v23 = 0.0;
          do
          {
            float64x2_t v24 = vmulq_f64(*(float64x2_t *)&v77[v21], *(float64x2_t *)(v13 + v21 * 8));
            double v23 = v23 + v24.f64[0] + v24.f64[1];
            v21 += 2;
          }
          while (v21 != 12);
          double v25 = v22 - v23;
          uint64_t v26 = (double *)(v15 + 8 * v17);
          v26[1607] = v22 - v23;
          double v27 = v26[1335];
          uint64_t result = invtst(v68, v77, 0xCu, v27, v22 - v23, 16.0, &v70);
          double v28 = v27 + v27 - fabs(v70);
          double v70 = v28;
          double v29 = v26[1335] * 0.1;
          if (v28 >= v29)
          {
            double v29 = v28;
          }
          else if (v28 < 0.0)
          {
            double v70 = 0.0;
            double v28 = 0.0;
          }
          v26[1735] = v28;
          if ((v19 & 1) != 0 || (double v31 = v26[1607], v31 <= 30.0) || v31 > 300.0)
          {
            if ((*(_DWORD *)(v15 + 4 * v17 + 568) - 1) >= 0x1D)
            {
              if (*(unsigned char *)(a3 + v17 + 57)) {
                ++v73[v14];
              }
              double v30 = v25 * v25 / v29;
              if (v30 > *v20 || *(&v71 + v14) == 255)
              {
                double *v67 = *v20;
                *__int16 v20 = v30;
                v20[2] = v30;
                *(&v71 + v14) = v17;
              }
              else if (v30 > *v67)
              {
                double *v67 = v30;
              }
              if (v30 > 16.0)
              {
                int v32 = v66;
                if (!*(unsigned char *)(a2 + 241)) {
                  int v32 = v66 + 1;
                }
                int v66 = v32;
              }
            }
          }
        }
        ++v17;
      }
      while (v17 != 128);
      uint64_t v12 = v18;
    }
    while (v18 != (void *)3);
    if (v66) {
      break;
    }
    if (!*(unsigned char *)(a2 + 241)) {
      return result;
    }
    BOOL v35 = v78[0] > 100.0 && v73[0] >= 6u;
    if (!v35 || *((unsigned __int8 *)v69 + v71 + 1760) > 0x1Fu || v58 > 0x270)
    {
LABEL_75:
      if (v78[0] <= 2500.0 || v73[0] < 5u) {
        return result;
      }
      int v39 = *(unsigned __int8 *)(a2 + 242);
      if (*(unsigned char *)(a2 + 242))
      {
        if (v78[0] <= 1000000.0 || v39 != 1)
        {
          *(unsigned char *)(a2 + 242) = v39 - 1;
          return result;
        }
      }
      int v33 = 0;
      uint64_t v34 = 0;
      *(unsigned char *)(a2 + 242) = 4;
      goto LABEL_87;
    }
    uint64_t v36 = 0;
    int v37 = 0;
    while (1)
    {
      if (*(unsigned char *)(v59 + v36))
      {
        if ((*(_DWORD *)(v59 + 4 * v36 + 256) - 1) >= 0x1D
          && *((unsigned __int8 *)v60 + v36) >= 0x21u
          && ++v37 > 4)
        {
          break;
        }
      }
      if (++v36 == 128) {
        goto LABEL_75;
      }
    }
    uint64_t v34 = 0;
    int v33 = 0;
    int v46 = 1;
    uint64_t v42 = v63;
LABEL_107:
    uint64_t v47 = *(&v71 + v34);
    NK_Obs_Equ_SV((void *)(v33 + 1), *(unsigned __int8 *)(v42 + v47 + 440), *((_DWORD *)v69 + v47 + 24), a3 + 56 * v47 + 52760, (uint64_t)v77, *(double *)(a3 + 1552));
    uint64_t v48 = v42 + 8 * v47;
    v77[12] = *(double *)(v48 + 5304);
    uint64_t result = (const double *)umeas((BOOL)v68, 0xCu, -*(double *)(v48 + 10680), v77, v76, v75, &v70, 1.0e20);
    ++v74[v34];
    uint64_t v49 = (_DWORD *)(v42 + 4 * v47 + 568);
    if (v46)
    {
      *uint64_t v49 = 26;
      --*(unsigned char *)(v42 + 3);
      ++*(unsigned char *)(v42 + 4);
    }
    else
    {
      *uint64_t v49 = 27;
      --*(unsigned char *)(v42 + 3);
      ++*(unsigned char *)(v42 + 4);
      if (v78[3 * v34] <= v78[3 * v34 + 1] * 16.0 || v78[3 * v34 + 2] <= 16.0)
      {
        uint64_t v50 = *(&v71 + v34);
        if ((!v34 || fabs(*(double *)(v42 + 8 * v50 + 12856)) <= 7.0)
          && *((unsigned __int8 *)v69 + v50 + 2016) - *((unsigned __int8 *)v69 + v50 + 1760) < -3)
        {
          goto LABEL_115;
        }
      }
    }
    *(unsigned char *)(a2 + *(&v71 + v34) + 14208) = 0;
LABEL_115:
    uint64_t v12 = 0;
    int v66 = 0;
    if (((*(unsigned char *)(a2 + 241) == 0) & ~v46) == 0) {
      return result;
    }
  }
  if (v78[0] > v78[3])
  {
    int v33 = 0;
    uint64_t v34 = 0;
LABEL_87:
    uint64_t v41 = 1;
    uint64_t v42 = v63;
    goto LABEL_97;
  }
  if (*(unsigned char *)(a3 + v72 + 21968))
  {
    uint64_t v41 = 0;
    if ((*(_DWORD *)(a3 + 4 * v72 + 22224) - 1) >= 0x1D) {
      int v33 = 1;
    }
    else {
      int v33 = 2;
    }
    if ((*(_DWORD *)(a3 + 4 * v72 + 22224) - 1) >= 0x1D) {
      uint64_t v42 = v61;
    }
    else {
      uint64_t v42 = v62;
    }
    uint64_t v34 = 1;
  }
  else
  {
    uint64_t v41 = 0;
    int v33 = 2;
    uint64_t v34 = 1;
    uint64_t v42 = v62;
  }
LABEL_97:
  if (*(unsigned char *)(a2 + 241)) {
    return result;
  }
  if (v74[v34] <= 2u)
  {
    unsigned int v43 = v73[v34];
    if (v43 < 6)
    {
      if (v43 != 5) {
        goto LABEL_118;
      }
      double v45 = v78[3 * v34];
    }
    else
    {
      uint64_t v44 = &v78[3 * v34];
      double v45 = *v44;
      if (*v44 > v44[1] * 1.1)
      {
LABEL_106:
        int v46 = 0;
        goto LABEL_107;
      }
    }
    if (v45 <= 225.0 || v45 <= v78[3 * v34 + 1] * 9.0) {
      goto LABEL_118;
    }
    goto LABEL_106;
  }
LABEL_118:
  double v51 = v78[3 * v34];
  if (v51 <= 144.0 || v51 <= v78[3 * v34 + 1] + v78[3 * v34 + 1])
  {
    double v52 = 0.0277777778;
    if (!*(_DWORD *)(a3 + 1872)) {
      double v52 = 0.25;
    }
    double v53 = v51 * v52;
    long long v54 = (double *)(a3 + 8 * v34 + 52744);
    if (v53 > *v54) {
      double *v54 = v53;
    }
    double v55 = v78[3 * v41];
    if (v55 > 16.0)
    {
      double v56 = v52 * v55;
      double v57 = (double *)(a3 + 8 * v41 + 52744);
      if (v56 > *v57) {
        double *v57 = v56;
      }
    }
  }
  return result;
}

uint64_t Get_QZSS_Kep_Almanac(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)result;
  int v2 = *(_DWORD *)(result + 12);
  double v3 = (double)(unsigned __int16)v2 * 0.000000476837158;
  *(_DWORD *)(a2 + 20) = (*(_DWORD *)(result + 16) >> 4) & 0xFF000;
  int v4 = *(_DWORD *)(result + 20);
  double v5 = (double)*(__int16 *)(result + 16) * 0.00000599211245;
  *(double *)(a2 + 72) = (double)(*(_DWORD *)(result + 24) & 0xFFFFFF) * 0.00048828125;
  int32x2_t v6 = vshl_n_s32(*(int32x2_t *)(result + 28), 8uLL);
  v7.i64[0] = v6.i32[0];
  v7.i64[1] = v6.i32[1];
  unsigned int v8 = *(_DWORD *)(result + 40);
  double v9 = (double)(int)(*(_DWORD *)(result + 36) << 8);
  *(float64x2_t *)(a2 + 80) = vmulq_f64(vcvtq_f64_s64(v7), (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL));
  *(double *)(a2 + 56) = (double)(__int16)(v4 >> 8) * 1.14290475e-11;
  *(double *)(a2 + 64) = v9 * 0.00000000146291808;
  *(_WORD *)(a2 + 16) = *(_WORD *)(result + 10);
  *(unsigned char *)(a2 + 12) = BYTE2(v2) | 0xC0;
  *(double *)(a2 + 40) = v3;
  *(double *)(a2 + 48) = v5;
  *(unsigned char *)(a2 + 13) = v4 & 0x1F;
  *(double *)(a2 + 24) = (double)(__int16)((v8 >> 8) & 0xFF00 | (32 * ((v8 >> 2) & 7))) * 0.0000000298023224;
  *(double *)(a2 + 32) = (double)(__int16)(v8 & 0xFFE0) * 1.13686838e-13;
  if ((BYTE2(v2) | 0xC0u) <= 0xC6)
  {
    *(double *)(a2 + 40) = v3 + 0.06;
    *(double *)(a2 + 48) = v5 + 0.785398163;
  }
  *(_DWORD *)(a2 + 8) = 5;
  return result;
}

void Hal29_HandleProxyStatusResponse(unsigned __int8 *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS Proxy Status rcvd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 68, "Hal29_HandleProxyStatusResponse");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  g_IResponseStatus = a1[8];
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v4 = __error();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v3, "HAL", 69, "Hal29_HandleProxyStatusResponse", 1542, *v4);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
}

void Hal29_HandleProxyResponse(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v17 = 513;
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v2 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_22;
  }
  if (a2 <= 7)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v17 = 515;
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v2 = "%10u %s%c %s: #%04hx len\n";
    goto LABEL_22;
  }
  uint64_t v4 = a1[a2 - 3] | (a1[a2 - 2] << 8);
  if ((_WORD)a2 == 11)
  {
    unsigned __int16 v6 = 0;
LABEL_19:
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v18 = v4;
    uint64_t v19 = v6;
    uint64_t v17 = 771;
    uint64_t v2 = "%10u %s%c %s: #%04hx zx chksum %u, computed %u\n";
LABEL_21:
    unint64_t v16 = v8;
    goto LABEL_22;
  }
  uint64_t v5 = 0;
  unsigned __int16 v6 = 0;
  do
    v6 += a1[v5++ + 8];
  while ((unsigned __int16)(a2 - 11) != v5);
  if (v4 != v6) {
    goto LABEL_19;
  }
  if (a1[4] != 67)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    uint64_t v17 = 779;
    uint64_t v18 = a1[2];
    uint64_t v2 = "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDX,%u\n";
    goto LABEL_21;
  }
  int v7 = a1[3];
  switch(v7)
  {
    case 'C':
      int v10 = *((unsigned __int16 *)a1 + 4);
      if (v10 == 1)
      {
        if (g_LbsOsaTrace_Config >= 3)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v11 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: L5_Antenna_Tuner_Report,seqNum:%u,gbct:%llu,BestDuration_ms:%u,NormalDuration_ms:%u,WorstDuration_ms:%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 77, "Hal29_HandleBasebandCoexData", a1[30], *(void *)(a1 + 10), *(_DWORD *)(a1 + 18), *(_DWORD *)(a1 + 22), *(_DWORD *)(a1 + 26));
          int v9 = 3;
          goto LABEL_23;
        }
      }
      else if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v15 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Coex Data Type :%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 87, "Hal29_HandleBasebandCoexData", 514, v10);
        int v9 = 2;
        goto LABEL_23;
      }
      break;
    case 'T':
      if (g_LbsOsaTrace_Config >= 3)
      {
        bzero(__str, 0x3C6uLL);
        unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v13 = "GNSS_FW";
        if (a1[32] == 80) {
          uint64_t v13 = "Proxy";
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSSTrap:GBCT:%llu,StaticId:0x%llx,VariableID:0x%llx,TrapSource:%s,TrapReason:%s\n", v12, "HAL", 77, "Hal29_HandleTrapNotification", *((void *)a1 + 1), *((void *)a1 + 2), *((void *)a1 + 3), v13, (const char *)a1 + 33);
        gnssOsa_PrintLog(__str, 3, 1, 0);
      }
      if (g_HalCallbacks) {
        g_HalCallbacks(8);
      }
      break;
    case 'S':
      Hal29_HandleProxyStatusResponse(a1);
      return;
    default:
      if (!g_LbsOsaTrace_Config) {
        return;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      uint64_t v17 = 515;
      uint64_t v18 = a1[3];
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14);
      uint64_t v2 = "%10u %s%c %s: #%04hx MsgId,%u\n";
LABEL_22:
      snprintf(__str, 0x3C5uLL, v2, v16, "HAL", 69, "Hal29_HandleProxyResponse", v17, v18, v19, v20);
      int v9 = 1;
LABEL_23:
      gnssOsa_PrintLog(__str, v9, 1, 0);
      return;
  }
}

uint64_t Hal29_GetGNSSProxyStatus(void)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(void *)unint64_t v8 = 0xFF0000437349787ALL;
  v8[8] = 10;
  g_HalState = 4;
  if ((int)Hal22_ZxSendToChip(v8, 9uLL) <= 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Proxy status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 69, "Hal29_GetGNSSProxyStatus", 1282);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 4294967293;
  }
  else
  {
    char v0 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1F4u);
    if (v0 == 1)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal29_GetGNSSProxyStatus", 1543);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967291;
    }
    else
    {
      if (!v0)
      {
        if (g_IResponseStatus == 5)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Status,InActive\n");
            goto LABEL_19;
          }
        }
        else if (g_IResponseStatus == 6)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Status,Active\n");
LABEL_19:
            int v5 = 4;
LABEL_22:
            gnssOsa_PrintLog(__str, v5, 1, 0);
          }
        }
        else if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v6 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Status,Unk,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 87, "Hal29_GetGNSSProxyStatus", g_IResponseStatus);
          int v5 = 2;
          goto LABEL_22;
        }
        return 0;
      }
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal29_GetGNSSProxyStatus", 1541);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967289;
    }
  }
}

void GLON_Alm_Calc_SemiMaj(uint64_t a1)
{
  double v3 = *(double *)(a1 + 56);
  long double v2 = *(double *)(a1 + 64);
  long double v4 = sin(*(double *)(a1 + 32) + 1.09955743);
  long double v5 = v4 * v4 * -2.5 + 2.0;
  double v6 = 1.0 - v3 * v3;
  long double v7 = cos(v2);
  double v8 = (v3 * v7 + 1.0) * ((v3 * v7 + 1.0) * (v3 * v7 + 1.0)) / v6
     + v5 * (v6 * sqrt(v6) / ((v3 * v7 + 1.0) * (v3 * v7 + 1.0)));
  double v9 = *(double *)(a1 + 40) + 43200.0;
  double v10 = 26000.0;
  do
  {
    double v11 = v10;
    double v10 = (v9 * 0.159154943 * (v9 * 0.159154943) * 398600.44 / (v10 * v10) + v10 * 2.0) * 0.333333333;
  }
  while (vabdd_f64(v10, v11) > 0.000001);
  double v12 = v8 * 1.5 * -0.00108262575;
  do
  {
    double v13 = v9 / (v12 * (6378.136 / (v6 * v10) * (6378.136 / (v6 * v10))) + 1.0) * 0.159154943;
    double v14 = v13 * v13 * 398600.44;
    double v15 = 26000.0;
    do
    {
      double v16 = v15;
      double v15 = (v14 / (v15 * v15) + v15 * 2.0) * 0.333333333;
    }
    while (vabdd_f64(v15, v16) > 0.000001);
    BOOL v17 = vabdd_f64(v15, v10) <= 0.001;
    double v10 = v15;
  }
  while (!v17);
}

void NK_Set_PR_Meas_Var(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  double v8 = (_DWORD *)(a3 + 1920);
  uint64_t v9 = a4 + 6808;
  uint64_t v10 = a1 + 8800;
  double v11 = 10.0;
  double v12 = -20.0;
  do
  {
    if (*(unsigned char *)(v9 + v7))
    {
      uint64_t v13 = a1 + 4 * v7;
      double PR_Raw_Meas_Unc = NK_Get_PR_Raw_Meas_Unc(*(_DWORD *)(v13 + 96), *(unsigned char *)(a1 + v7 + 1760), *(unsigned char *)(a1 + v7 + 2272), *(unsigned __int16 *)(a1 + 2 * v7 + 2400), *(unsigned __int16 *)(v10 + 2 * v7));
      double v15 = PR_Raw_Meas_Unc * PR_Raw_Meas_Unc;
      double v16 = (double *)(v9 + v6);
      v16[144] = PR_Raw_Meas_Unc * PR_Raw_Meas_Unc;
      v16[145] = PR_Raw_Meas_Unc * PR_Raw_Meas_Unc - PR_Raw_Meas_Unc * PR_Raw_Meas_Unc;
      v16[146] = PR_Raw_Meas_Unc * PR_Raw_Meas_Unc;
      if ((*(_DWORD *)(a2 + 68) & 0xFFFFFFFE) == 6 && (int)*v8 <= 44)
      {
        double v17 = *(double *)(a4 + 1848);
        double v18 = 0.0;
        if (v17 <= 20.0)
        {
          if (v17 <= v11)
          {
            double v18 = 1.0;
            if (v17 > 6.0)
            {
              double v19 = (v17 / v12 + 1.0) * (v17 / v12 + 1.0);
              double v20 = (v11 - v17) * 0.1275;
              double v18 = v20 + v19;
              if (v20 + v19 > 1.0 || v18 < 0.0)
              {
                GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(v13 + 96));
                EvLog_v("NK_Set_PR_Meas_Var:  %d  %s  Out of bound Elev_DeWgt_SF %g  Inv_Parabola_Comp %g  Linear_Comp %g  GSpeed %g  Elev %d", v7, GNSS_SV_Str, v20 + v19, v19, v20, v17, *v8);
                if (v18 > 1.0) {
                  double v18 = 1.0;
                }
                double v11 = 10.0;
                double v12 = -20.0;
                if (v18 < 0.0) {
                  double v18 = 0.0;
                }
              }
              else
              {
                double v11 = 10.0;
                double v12 = -20.0;
              }
            }
          }
          else
          {
            double v18 = (v17 / v12 + 1.0) * (v17 / v12 + 1.0);
          }
        }
        double v22 = v18 * 0.0 + 1.0;
        double v23 = (double)(v15 * v22);
        v16[144] = v23;
        v16[145] = v23 - v23;
        if (*(_DWORD *)(a4 + 1872) == 1 && *(unsigned __int8 *)(a1 + v7 + 1760) <= 0x15u)
        {
          double v24 = v22 * v22;
          v16[144] = v24 * v23;
          v16[145] = v24 * (v23 - v23);
        }
      }
    }
    ++v7;
    v8 += 10;
    v6 += 24;
  }
  while (v7 != 128);
}

double NK_Get_PR_Raw_Meas_Unc(__int16 a1, char a2, char a3, unsigned int a4, unsigned int a5)
{
  unsigned __int8 v6 = a2 - a3;
  double v7 = (double)a5 * 0.01;
  int v8 = a1;
  if (a1 == 6)
  {
LABEL_2:
    unsigned int v9 = (a2 - a3);
    if (v9 <= 0x2C)
    {
      if (v9 < 0x19)
      {
        double v10 = 1.8;
      }
      else
      {
        double v11 = (double)(int)(45 - v9);
        double v12 = 0.67;
        double v13 = 0.0565;
LABEL_8:
        double v10 = v12 + v11 * v13;
      }
    }
    else
    {
      double v10 = 0.67;
    }
  }
  else
  {
    double v10 = 1.0;
    switch(HIBYTE(a1))
    {
      case 0:
      case 4:
      case 0xC:
        goto LABEL_2;
      case 1:
      case 8:
      case 0xB:
        unsigned int v18 = (a2 - a3);
        if (v18 > 0x2C)
        {
          double v10 = 0.4;
          break;
        }
        if (v18 >= 0x19)
        {
          double v11 = (double)(int)(45 - v18);
          double v12 = 0.4;
          double v13 = 0.04;
          goto LABEL_8;
        }
        double v10 = 1.2;
        break;
      case 2:
      case 5:
      case 6:
      case 7:
      case 0xF:
        EvCrt_Illegal_switch_case("NK_Get_PR_Raw_Meas_Unc", 0x2FCu);
        break;
      case 3:
      case 9:
      case 0xA:
      case 0xD:
      case 0xE:
        unsigned int v14 = (a2 - a3);
        double v10 = 0.5;
        if (v14 > 0x2C) {
          break;
        }
        if (v14 < 0x19)
        {
          if ((a2 - a3) >= 0xFu)
          {
            double v11 = (double)(int)(25 - v14);
            double v12 = 1.6;
            double v13 = 0.14;
            goto LABEL_8;
          }
          double v15 = (double)(int)(15 - v14);
          double v16 = 0.6;
          double v17 = 3.0;
        }
        else
        {
          double v15 = (double)(int)(45 - v14);
          double v16 = 0.055;
          double v17 = 0.5;
        }
        double v10 = v17 + v15 * v16;
        break;
      default:
        break;
    }
  }
  double v19 = v7 * v10 * (v7 * v10);
  NK_Interp_Var_Table((uint64_t)&Loop_Convergence_Time_Table, 7, v6);
  if ((int)v20 > a4)
  {
    double v21 = (double)(int)((int)v20 - a4)
        / (double)(int)v20
        * ((double)(int)((int)v20 - a4)
         / (double)(int)v20
         * ((double)(int)((int)v20 - a4)
          / (double)(int)v20));
    double v19 = v19 + v19 * (v21 * v21 * 9.0);
  }
  double v22 = v19 + 2.25;
  if (v8 != 2) {
    double v22 = v19;
  }
  return sqrt(v22);
}

uint64_t NK_Interp_Var_Table(uint64_t result, int a2, int a3)
{
  if (*(unsigned __int16 *)(result + 2) < a3 && *(unsigned __int16 *)(result + 4 * (a2 - 1) + 2) > a3)
  {
    unsigned __int16 v3 = 1;
    if (a2 >= 3)
    {
      do
      {
        if (*(unsigned __int16 *)(result + 4 * v3 + 2) >= a3) {
          break;
        }
        ++v3;
      }
      while (a2 - 1 > v3);
    }
  }
  return result;
}

void NK_Set_DO_Meas_Var(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = *(_DWORD *)(a3 + 20) <= 4u && *(unsigned char *)(a3 + 27250) && *(int *)(a2 + 68) >= 6 && *(double *)(a4 + 1848) >= 3.0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = a4 + 21712;
  unsigned int v9 = (double *)(a3 + 1952);
  do
  {
    if (*(unsigned char *)(v8 + v7))
    {
      double DO_Raw_Meas_Unc = NK_Get_DO_Raw_Meas_Unc(*(_DWORD *)(a1 + 4 * v7 + 96), *(unsigned char *)(a1 + v7 + 1760), *(unsigned char *)(a1 + v7 + 2272), *(unsigned __int16 *)(a1 + 2 * v7 + 2656), *(unsigned __int8 *)(a1 + 8672 + v7), *(_DWORD *)(a1 + 4 * v7 + 1248));
      if (v5 && *((int *)v9 - 8) >= 1) {
        double DO_Raw_Meas_Unc = DO_Raw_Meas_Unc * ((90.0 - *v9) * 0.0333333333 + 1.0);
      }
      double v11 = DO_Raw_Meas_Unc * DO_Raw_Meas_Unc;
      double v12 = (double *)(v8 + v6);
      v12[144] = v11;
      v12[145] = v11 - v11;
      v12[146] = v11;
    }
    ++v7;
    v6 += 24;
    v9 += 5;
  }
  while (v7 != 128);
}

double NK_Get_DO_Raw_Meas_Unc(__int16 a1, char a2, char a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned __int8 v8 = HIBYTE(a1);
  unsigned int v9 = (a2 - a3);
  if (a6 > 16 && v9 > 0x18) {
    double v11 = &PLL_DO_Raw_Meas_Unc_Table;
  }
  else {
    double v11 = &FLL_DO_Raw_Meas_Unc_Table;
  }
  NK_Interp_Var_Table((uint64_t)v11, 15, v9);
  double v13 = v12 * 0.01;
  if (v8 > 0xFu || ((1 << v8) & 0xDD77) == 0) {
    double v13 = v13 * 1.33913043;
  }
  if (a5 <= 0x13) {
    double v13 = 20.0 / (double)a5 * v13;
  }
  double v14 = v13 * v13;
  NK_Interp_Var_Table((uint64_t)&Loop_Convergence_Time_Table, 7, v9);
  if ((int)v15 > a4)
  {
    double v16 = (double)(int)((int)v15 - a4)
        / (double)(int)v15
        * ((double)(int)((int)v15 - a4)
         / (double)(int)v15
         * ((double)(int)((int)v15 - a4)
          / (double)(int)v15));
    double v14 = v14 + v14 * (v16 * v16 * 9.0);
  }
  return sqrt(v14);
}

void NK_Set_DR_Meas_Var(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a2 + 36616;
  uint64_t v4 = a1 + 1760;
  BOOL v5 = (double *)(a2 + 37784);
  uint64_t v6 = a1 + 9312;
  do
  {
    if (*(unsigned char *)(v3 + v2))
    {
      double DR_Raw_Meas_Unc = NK_Get_DR_Raw_Meas_Unc(*(unsigned char *)(v4 + v2), *(unsigned char *)(v4 + v2 + 512), *(unsigned __int16 *)(v6 + 2 * v2));
      double v8 = DR_Raw_Meas_Unc * DR_Raw_Meas_Unc;
      *(v5 - 2) = v8;
      *(v5 - 1) = v8 - v8;
      *BOOL v5 = v8;
    }
    ++v2;
    v5 += 3;
  }
  while (v2 != 128);
}

double NK_Get_DR_Raw_Meas_Unc(char a1, char a2, unsigned int a3)
{
  unsigned int v3 = (a1 - a2);
  if (v3 <= 0x2C)
  {
    if (v3 < 0x1E)
    {
      if (v3 < 0x1C)
      {
        double v5 = (double)(int)(28 - v3);
        double v6 = 1.3;
        double v7 = 0.24;
      }
      else
      {
        double v5 = (double)(int)(30 - v3);
        double v6 = 1.2;
        double v7 = 0.05;
      }
    }
    else
    {
      double v5 = (double)(int)(45 - v3);
      double v6 = 0.7;
      double v7 = 0.0333333333;
    }
    double v4 = v6 + v5 * v7;
  }
  else
  {
    double v4 = 0.7;
  }
  return (double)a3 * 0.001 * v4;
}

uint64_t NK_Get_Ext_CTXT(int a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int v38 = 0;
  uint64_t v37 = 0;
  uint64_t v8 = a3 + 27204;
  uint64_t v9 = a2 + 62188;
  int v36 = 0;
  uint64_t v35 = 0;
  uint64_t v10 = a2 + 59928;
  int v34 = 0;
  uint64_t v33 = 0;
  if (Core_Get_ExtA_UAC(43200000, (uint64_t)&v35))
  {
    *(unsigned char *)(v9 + 16) = 1;
    int v11 = v36;
    int v12 = a1 - v35;
    *(_DWORD *)(v9 + 28) = a1 - v35;
    if (v11 && v12 >= -1000)
    {
      unsigned int v13 = HIDWORD(v35);
      *(_DWORD *)(v10 + 12) = HIDWORD(v35);
      *(_DWORD *)(v10 + 16) = 1;
      *(_DWORD *)(v10 + 20) = v11;
      if (v13 > 0xB) {
        goto LABEL_27;
      }
      if (((1 << v13) & 0x7C) != 0)
      {
        *(_WORD *)(v8 + 45) = 1;
        *(unsigned char *)(v9 + 24) = 1;
        double v15 = *(double *)(a2 + 1848);
        if (v15 <= 4.0)
        {
          if (v15 <= 8.0) {
            goto LABEL_27;
          }
        }
        else if (v15 <= 8.0 && *(double *)(v10 + 2040) > 2.0)
        {
          goto LABEL_27;
        }
        *(_WORD *)(v8 + 45) = 256;
        *(unsigned char *)(v9 + 24) = 0;
        *(_DWORD *)(v9 + 20) = 4;
        goto LABEL_27;
      }
      if (((1 << v13) & 0xF80) != 0)
      {
        *(_WORD *)(v8 + 45) = 256;
        *(unsigned char *)(v9 + 24) = 1;
        if (v11 == 3 && v13 == 10)
        {
          if ((*(_DWORD *)(a3 + 20) - 5) < 4) {
            goto LABEL_30;
          }
          a4[15] = 5;
          *(_DWORD *)(a3 + 20) = 5;
          *(_DWORD *)(a3 + 24) = a4[16];
LABEL_29:
          NK_Set_Dynamics(*(void *)(a3 + 20), a3 + 32);
          goto LABEL_30;
        }
LABEL_27:
        if (*(_DWORD *)(a3 + 20) < 5u) {
          goto LABEL_30;
        }
        a4[15] = 2;
        *(_DWORD *)(a3 + 20) = 4;
        goto LABEL_29;
      }
      *(unsigned char *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 20) = 5;
      double v16 = *(double *)(a2 + 1848);
      if (v16 <= 4.0)
      {
        if (v16 <= 8.0)
        {
LABEL_24:
          double v17 = *(double *)(a3 + 27232);
          *(unsigned char *)(v8 + 46) = v17 > 4.0;
          *(unsigned char *)(v8 + 45) = v17 <= 4.0;
          goto LABEL_27;
        }
      }
      else if (v16 <= 8.0 && *(double *)(v10 + 2040) > 2.0)
      {
        goto LABEL_24;
      }
      *(_WORD *)(v8 + 45) = 256;
      goto LABEL_27;
    }
    *(unsigned char *)(v9 + 24) = 0;
    if (v11) {
      int v14 = 2;
    }
    else {
      int v14 = 1;
    }
    *(_DWORD *)(v9 + 20) = v14;
  }
LABEL_30:
  *(unsigned char *)(v10 + 36) = 0;
  if (Core_Get_ExtA_DMS(43200000, (uint64_t)&v37))
  {
    *(unsigned char *)uint64_t v9 = 1;
    int v18 = v38;
    int v19 = a1 - v37;
    *(_DWORD *)(v9 + 12) = a1 - v37;
    if (v18 && v19 >= -1000)
    {
      int v20 = HIDWORD(v37);
      *(_DWORD *)(v10 + 8) = v18;
      char v21 = 1;
      *(_DWORD *)uint64_t v10 = v20;
      *(_DWORD *)(v10 + 4) = 1;
      if ((v20 - 1) <= 1)
      {
        double v22 = *(double *)(a2 + 1840);
        double v23 = *(double *)(v10 + 2056);
        if (v22 > 5.0 || v22 > v23 * 5.0)
        {
          uint64_t v25 = 65;
          if (v20 == 2) {
            uint64_t v25 = 83;
          }
          EvLog_v("NK_Get_Ext_CTXT:  DMS overwritten to Moving,  %c  Speed %f  Acc.S %f", v25, *(double *)(a2 + 1840), v23);
          char v21 = 0;
          *(void *)uint64_t v10 = 3;
          *(unsigned char *)(v10 + 36) = 0;
          *(_DWORD *)(v9 + 4) = 7;
        }
        else if (v20 == 1)
        {
          *(unsigned char *)(v10 + 36) = 1;
          *(_DWORD *)uint64_t v8 = 3;
          *(_DWORD *)(v8 + 20) = *(_DWORD *)a2;
        }
      }
      *(unsigned char *)(v9 + 8) = v21;
    }
    else
    {
      *(unsigned char *)(v9 + 8) = 0;
      if (v18) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
      *(_DWORD *)(v9 + 4) = v24;
    }
  }
  uint64_t result = Core_Get_ExtA_FIV_Ind(43200000, (uint64_t)&v33);
  if (result)
  {
    *(unsigned char *)(v9 + 32) = 1;
    int v27 = v34;
    int v28 = a1 - v33;
    *(_DWORD *)(v9 + 44) = a1 - v33;
    if (v27 && v28 >= -1000)
    {
      int v29 = HIDWORD(v33);
      *(_DWORD *)(v10 + 32) = v27;
      *(_DWORD *)(v10 + 24) = v29;
      *(_DWORD *)(v10 + 28) = 1;
      *(unsigned char *)(v9 + 40) = 0;
    }
    else
    {
      *(unsigned char *)(v9 + 40) = 0;
      if (v27) {
        int v30 = 2;
      }
      else {
        int v30 = 1;
      }
      *(_DWORD *)(v9 + 36) = v30;
    }
  }
  int v31 = *(_DWORD *)(v10 + 24);
  if (v31 != 3 || *(_DWORD *)(v10 + 32) != 3)
  {
    if (*(_DWORD *)v10 == 1 && *(_DWORD *)(v10 + 8) == 3)
    {
      int v32 = 1;
      goto LABEL_66;
    }
    if (*(unsigned char *)(v8 + 45))
    {
      int v32 = 2;
      goto LABEL_66;
    }
    if (!*(unsigned char *)(v8 + 46)) {
      return result;
    }
    if (v31 != 3 || *(_DWORD *)(v10 + 32) != 3)
    {
      int v32 = 3;
      goto LABEL_66;
    }
  }
  int v32 = 4;
LABEL_66:
  a4[14] = v32;
  return result;
}

void Gnm_Init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm_Init");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v1 = gnssOsa_Calloc("Gnm_Init", 65, 1, 0xCuLL);
  if (v1) {
    AgpsSendFsmMsg(128, 128, 8388611, v1);
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_Init");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

void Gnm_Deinit(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm_Deinit");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v1 = gnssOsa_Calloc("Gnm_Deinit", 95, 1, 0xCuLL);
  if (v1) {
    AgpsSendFsmMsg(128, 128, 8388867, v1);
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_Deinit");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

void Gnm_DestMissingHandler(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 8654080 || v3 == 8393475)
  {
    double v5 = *(void **)(a1 + 16);
    if (v5) {
      free(v5);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (v3 == 8391939)
  {
    uint64_t v4 = *(void **)(a1 + 64);
    if (v4) {
      free(v4);
    }
    *(void *)(a1 + 64) = 0;
  }
  else if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t Gnm_ClearGNSSCache(int a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_ClearGNSSCache");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v3 = gnssOsa_Calloc("Gnm_ClearGNSSCache", 177, 1, 0x10uLL);
  if (v3)
  {
    uint64_t v4 = v3;
    v3[3] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FieldsToDel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm_ClearGNSSCache", v4[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(128, 128, 8389379, v4);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_ClearGNSSCache");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 0;
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_ClearGNSSCache");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 5;
  }
}

uint64_t Gnm_RegisterApiStatusCb(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_RegisterApiStatusCb");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    int v3 = gnssOsa_Calloc("Gnm_RegisterApiStatusCb", 225, 1, 0x20uLL);
    if (v3)
    {
      v3[2] = a1;
      AgpsSendFsmMsg(128, 128, 8391427, v3);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_RegisterApiStatusCb");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_RegisterApiStatusCb");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 5;
    }
  }
  else if (g_LbsOsaTrace_Config < 2)
  {
    return 1;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm_RegisterApiStatusCb", 258);
    uint64_t v5 = 1;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_RegisterApiStatusCb");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  return v5;
}

uint64_t Gnm_RegisterPeriodicFix(int a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_RegisterPeriodicFix");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Handle,%u,OutputType,%u,PosParam Timeout,%u,AgeLimit,%u,FixIntvl,%u,StartTime,%u,StopTime,%u,NumFix,%u,HorizAcc,%u,VerAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm_RegisterPeriodicFix", a1, a4, *a5, a5[1], a5[2], a5[3], a5[4], *((unsigned __int16 *)a5 + 10), *((unsigned __int16 *)a5 + 11), *((unsigned __int16 *)a5 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if (!a3)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v34 = 258;
      unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      double v15 = "%10u %s%c %s: #%04hx\n";
      goto LABEL_14;
    }
    return 1;
  }
  unsigned int v12 = (a4 >> 1) & 3;
  if (!v12)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v34 = 514;
      uint64_t v35 = a4;
      unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      double v15 = "%10u %s%c %s: #%04hx OutputMask,%x\n";
      goto LABEL_14;
    }
    return 1;
  }
  unsigned int v13 = a5[2];
  if (v13 && v13 - 604800001 < 0xDBF37C63)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      uint64_t v34 = 514;
      uint64_t v35 = a5[2];
      unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14);
      double v15 = "%10u %s%c %s: #%04hx FixRate,%u\n";
LABEL_14:
      snprintf(__str, 0x3C5uLL, v15, v33, "GNM", 87, "Gnm_RegisterPeriodicFix", v34, v35, v36);
      goto LABEL_15;
    }
    return 1;
  }
  if (*((_WORD *)a5 + 10) == 1)
  {
    if (*a5 - 3600001 < 0xFFC91567)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v18 = mach_continuous_time();
        uint64_t v34 = 514;
        uint64_t v35 = *a5;
        unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18);
        double v15 = "%10u %s%c %s: #%04hx TimeOut,%u\n";
        goto LABEL_14;
      }
      return 1;
    }
    if (a5[1] >= 0x5265C01)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v19 = mach_continuous_time();
        uint64_t v34 = 514;
        uint64_t v35 = a5[1];
        unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19);
        double v15 = "%10u %s%c %s: #%04hx Agelimit,%u\n";
        goto LABEL_14;
      }
      return 1;
    }
  }
  unsigned int v21 = a5[3];
  unsigned int v20 = a5[4];
  if (v20 < v21)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StartTime,%u,StopTime,%u\n", v22);
LABEL_15:
      uint64_t v16 = 1;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v17 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm_RegisterPeriodicFix");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return v16;
    }
    return 1;
  }
  if (v21 >= 0x28DE81)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v23 = mach_continuous_time();
      uint64_t v34 = 514;
      uint64_t v35 = a5[3];
      unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23);
      double v15 = "%10u %s%c %s: #%04hx StartTime,%u\n";
      goto LABEL_14;
    }
    return 1;
  }
  if (v20 >= 0xACB480)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v24 = mach_continuous_time();
      uint64_t v34 = 514;
      uint64_t v35 = a5[4];
      unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24);
      double v15 = "%10u %s%c %s: #%04hx StopTime,%u\n";
      goto LABEL_14;
    }
    return 1;
  }
  uint64_t v26 = (char *)gnssOsa_Calloc("Gnm_RegisterPeriodicFix", 359, 1, 0x50uLL);
  if (v26)
  {
    int v27 = v26;
    if (Gnm05_55AssignAppInfo(a2, (uint64_t)(v26 + 64)))
    {
      *((_DWORD *)v27 + 3) = a1;
      *((void *)v27 + 2) = a3;
      v27[56] = 1;
      int v28 = *((unsigned __int16 *)a5 + 10);
      if (v28 == 1)
      {
        *((void *)v27 + 3) = *(void *)a5;
      }
      else
      {
        *((void *)v27 + 3) = 0;
        if (v28)
        {
          *((_DWORD *)v27 + 9) = a5[3];
          unsigned int v30 = a5[4];
LABEL_46:
          *((_DWORD *)v27 + 10) = v30;
          *((_WORD *)v27 + 22) = v28;
          int v31 = a5[2];
          if (!v31) {
            int v31 = 1000;
          }
          *((_DWORD *)v27 + 8) = v31;
          v27[48] = v12;
          v27[54] = 2;
          *(_DWORD *)(v27 + 50) = *(unsigned int *)((char *)a5 + 22);
          *((void *)v27 + 9) = *((void *)a5 + 4);
          AgpsSendFsmMsg(128, 128, 8391939, v27);
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v32 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNM", 73, "Gnm_RegisterPeriodicFix");
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          return 0;
        }
      }
      unsigned int v30 = 0;
      *((_DWORD *)v27 + 9) = 0;
      goto LABEL_46;
    }
    free(v27);
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v29 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNM", 73, "Gnm_RegisterPeriodicFix");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return 5;
}

uint64_t Gnm_RegisterNmeaUpdates(int a1, const void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_RegisterNmeaUpdates");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NMEAMask,%u,CB,%p\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm_RegisterNmeaUpdates", a1, a2);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if (a1 || !a2)
  {
    uint64_t v9 = gnssOsa_Calloc("Gnm_RegisterNmeaUpdates", 466, 1, 0x20uLL);
    if (v9)
    {
      v9[2] = a2;
      *((_WORD *)v9 + 12) = a1;
      AgpsSendFsmMsg(128, 128, 8407552, v9);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_RegisterNmeaUpdates");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm_RegisterNmeaUpdates");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 5;
    }
  }
  else if (g_LbsOsaTrace_Config < 2)
  {
    return 1;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NMEAMask,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm_RegisterNmeaUpdates", 514, 0);
    uint64_t v7 = 1;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_RegisterNmeaUpdates");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  return v7;
}

uint64_t Gnm_StopPosnReq(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_StopPosnReq");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v3 = gnssOsa_Calloc("Gnm_StopPosnReq", 506, 1, 0x10uLL);
  if (v3)
  {
    v3[3] = a1;
    AgpsSendFsmMsg(128, 128, 8391683, v3);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_StopPosnReq");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 0;
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_StopPosnReq");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 5;
  }
}

uint64_t Gnm_HwInitialize(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_HwInitialize");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a2)
  {
    uint64_t v7 = gnssOsa_Calloc("Gnm_HwInitialize", 602, 1, 0x20uLL);
    if (v7)
    {
      v7[12] = a1;
      *((void *)v7 + 2) = a2;
      *((void *)v7 + 3) = a3;
      AgpsSendFsmMsg(128, 128, 8403456, v7);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_HwInitialize");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm_HwInitialize");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 5;
    }
  }
  else if (g_LbsOsaTrace_Config < 2)
  {
    return 1;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitStatusCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm_HwInitialize", 258);
    uint64_t v9 = 1;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm_HwInitialize");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  return v9;
}

void Gnm_HalStartCnf(int a1, _DWORD *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_HalStartCnf");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a2)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: CBType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm_HalStartCnf", a1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    switch(a1)
    {
      case 1:
        uint64_t v6 = a2;
        char v7 = 0;
        goto LABEL_11;
      case 2:
        uint64_t v6 = a2;
        char v7 = 1;
LABEL_11:
        Gnm00_01HandleRevInfo(v6, v7);
        goto LABEL_12;
      case 3:
        int v8 = *a2;
        if (*a2 == 1 || v8 == 3)
        {
          uint64_t v14 = gnssOsa_Calloc("Gnm00_02HandleInitStatus", 704, 1, 0x10uLL);
          if (v14)
          {
            uint64_t v15 = v14;
            int v16 = a2[1];
            if ((v16 - 3) < 3)
            {
              *((unsigned char *)v14 + 12) = v16 - 1;
              int v11 = 8402688;
              uint64_t v10 = v14;
              goto LABEL_29;
            }
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v18 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FailStep,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 87, "Gnm00_03MapInitFailReason", 515, v16);
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            free(v15);
          }
          if (g_LbsOsaTrace_Config < 4) {
            return;
          }
        }
        else if (v8 == 2)
        {
          uint64_t v9 = gnssOsa_Calloc("Gnm00_02HandleInitStatus", 686, 1, 0xCuLL);
          if (v9)
          {
            uint64_t v10 = v9;
            int v11 = 8392961;
LABEL_29:
            AgpsSendFsmMsg(128, 128, v11, v10);
            goto LABEL_12;
          }
          if (g_LbsOsaTrace_Config < 4) {
            return;
          }
        }
        else
        {
          if (g_LbsOsaTrace_Config < 2) {
            return;
          }
          bzero(__str, 0x3C6uLL);
          uint64_t v17 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitErr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 87, "Gnm00_02HandleInitStatus", 515, *a2);
          gnssOsa_PrintLog(__str, 2, 1, 0);
          if (g_LbsOsaTrace_Config < 4) {
            return;
          }
        }
        bzero(__str, 0x3C6uLL);
        unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v19, "GNM", 73, "Gnm00_02HandleInitStatus");
        gnssOsa_PrintLog(__str, 4, 1, 0);
LABEL_12:
        if (g_LbsOsaTrace_Config < 4) {
          return;
        }
        break;
      case 4:
        if (g_LbsOsaTrace_Config >= 2) {
          goto LABEL_22;
        }
        return;
      default:
        if (g_LbsOsaTrace_Config < 2) {
          return;
        }
LABEL_22:
        bzero(__str, 0x3C6uLL);
        unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CBType,%u\n", v12);
        goto LABEL_23;
    }
    goto LABEL_24;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
LABEL_23:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
LABEL_24:
      bzero(__str, 0x3C6uLL);
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v13, "GNM", 73, "Gnm_HalStartCnf");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Gnm00_01HandleRevInfo(_DWORD *a1, char a2)
{
  if (*a1 == 4)
  {
    uint64_t v4 = (char *)gnssOsa_Calloc("Gnm00_01HandleRevInfo", 631, 1, 0x54uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      v4[80] = a2;
      memcpy_s("Gnm00_01HandleRevInfo", 639, v4 + 12, 0x44u, a1 + 1, 0x44uLL);
      AgpsSendFsmMsg(128, 128, 8392707, v5);
    }
  }
}

void Gnm_ReceiveData(size_t a1, unsigned __int8 *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 68, "Gnm_ReceiveData");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  uint64_t v5 = gnssOsa_Calloc("Gnm_ReceiveData", 820, 1, 0x20uLL);
  if (v5)
  {
    uint64_t v6 = v5;
    char v7 = gnssOsa_Calloc("Gnm_ReceiveData", 828, 1, a1);
    v6[2] = v7;
    if (v7)
    {
      memcpy_s("Gnm_ReceiveData", 836, v7, a1, a2, a1);
      *((_WORD *)v6 + 12) = a1;
      AgpsSendFsmMsg(128, 128, 8393475, v6);
    }
    else
    {
      free(v6);
    }
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 68, "Gnm_ReceiveData");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void Gnm_HardwareStatusNotif (int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_HardwareStatusNotif");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v3 = gnssOsa_Calloc("Gnm_HardwareStatusNotif", 862, 1, 0x10uLL);
  if (v3)
  {
    uint64_t v4 = v3;
    *((_DWORD *)v3 + 3) = a1;
    if (a1 == 6) {
      GncP16_51MEPowerStateInd(7);
    }
    AgpsSendFsmMsg(128, 128, 8393731, v4);
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm_HardwareStatusNotif");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

void Gnm_HalStopCnf(int a1, _DWORD *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_HalStopCnf");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a2)
  {
    if ((a1 - 1) < 3)
    {
      if (g_LbsOsaTrace_Config < 2) {
        return;
      }
      bzero(__str, 0x3C6uLL);
      unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v6 = 1028;
      goto LABEL_17;
    }
    if (a1 != 4)
    {
      if (g_LbsOsaTrace_Config < 2) {
        return;
      }
      bzero(__str, 0x3C6uLL);
      unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v6 = 515;
LABEL_17:
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CBType,%u\n", v5, "GNM", 87, "Gnm_HalStopCnf", v6, a1);
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 4) {
        return;
      }
      goto LABEL_18;
    }
    uint64_t v8 = gnssOsa_Calloc("Gnm_HalStopCnf", 933, 1, 0x10uLL);
    if (v8)
    {
      v8[12] = *a2 == 6;
      AgpsSendFsmMsg(128, 128, 8393217, v8);
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
LABEL_18:
      bzero(__str, 0x3C6uLL);
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v9, "GNM", 73, "Gnm_HalStopCnf");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm_HalStopCnf", 513);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 4) {
      goto LABEL_18;
    }
  }
}

uint64_t Hal22_InitializeConn(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (gp_Comm && (*(unsigned int (**)(uint64_t))(*(void *)gp_Comm + 72))(gp_Comm))
  {
    if (!Hal_SetReadCbAsync((void (*)(unsigned __int8 *, unsigned int))Hal02_AsyncReadCb)) {
      return 0xFFFFFFFFLL;
    }
    if (g_LbsOsaTrace_Config < 4)
    {
      char v1 = 1;
    }
    else
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v0 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Read Cb set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal22_InitializeConn");
      char v1 = 1;
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  else
  {
    char v1 = 0;
  }
  if (Hal_CommsItfInitialize())
  {
    if (gnssOsa_SemInit((dispatch_semaphore_s **)&g_HandleAckSem, 0))
    {
      if ((v1 & 1) == 0)
      {
        if (gnssOsa_CreateThread("Hal22_InitializeConn", 78, (_opaque_pthread_t **)&g_HalRdrThrd, 0, (void *(__cdecl *)(void *))Hal02_07ChipRead, 0, 0, 0, 99))
        {
          goto LABEL_16;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          int v3 = __error();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RdrThrd err,%d\n", v2, "HAL", 69, "Hal22_InitializeConn", 1554, *v3);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
        if (gnssOsa_DeinitCountingSem((dispatch_object_t *)&g_HandleAckSem)) {
          goto LABEL_16;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unint64_t v5 = __error();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v4, "HAL", 69, "Hal22_InitializeConn", 1540, *v5);
          gnssOsa_PrintLog(__str, 1, 1, 0);
LABEL_16:
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v6 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RdrThrd ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal22_InitializeConn");
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
        }
      }
      return 0;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unint64_t v9 = __error();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v8, "HAL", 69, "Hal22_InitializeConn", 1539, *v9);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t Hal22_DeInitializeConn(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  Hal_CommsItfDeInitialize();
  if (pthread_join((pthread_t)g_HalRdrThrd, 0)) {
    BOOL v0 = g_LbsOsaTrace_Config == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unint64_t v2 = __error();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RdrThrd err,%d\n", v1, "HAL", 69, "Hal22_DeInitializeConn", 1555, *v2);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if (!gnssOsa_DeinitCountingSem((dispatch_object_t *)&g_HandleAckSem) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unint64_t v4 = __error();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v3, "HAL", 69, "Hal22_DeInitializeConn", 1540, *v4);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  uint64_t result = Hal02_DeInitParser();
  g_HalState = 1;
  return result;
}

uint64_t Hal22_ZxSendToChip(unsigned __int8 *a1, size_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 > 0x1000)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx inpLen\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 87, "Hal22_ZxSendToChip", 514);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return -1;
  }
  size_t v3 = a2;
  if (g_IsSPIEnabled) {
    int v5 = 4;
  }
  else {
    int v5 = 64;
  }
  int v6 = (v5 - 1) & a2;
  if (v6)
  {
    __int16 v7 = v5 - v6 + a2;
    unint64_t v8 = (unsigned __int8 *)gnssOsa_Calloc("Hal22_ZxSendToChip", 140, 1, (unsigned __int16)v7);
    if (!v8) {
      return -1;
    }
    unint64_t v9 = v8;
    int v17 = v6;
    memcpy_s("Hal22_ZxSendToChip", 144, v8, (unsigned __int16)v7, a1, v3);
    size_t v3 = (unsigned __int16)v7;
    a1 = v9;
  }
  else
  {
    int v17 = 0;
    __int16 v7 = a2;
  }
  for (unsigned int i = 0; i < 3; i += (v13 >> 15) + 1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (g_IsSPIEnabled) {
        unint64_t v12 = "SPI";
      }
      else {
        unint64_t v12 = "PCIe";
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s:write,size %u,zx%c%c%c 0x%x 0x%x\n", (unint64_t)v11, "HAL", 73, "Hal22_ZxSendToChip", v12, v3, a1[2], a1[3], a1[4], a1[5], a1[6]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    unsigned __int16 v13 = Hal_CommsItfWriteData(a1, v3);
    if (v3 == (__int16)v13)
    {
      if (v17 && a1) {
        free(a1);
      }
      return v7;
    }
    __int16 v14 = v13;
  }
  if (v17 && a1) {
    free(a1);
  }
  __int16 v7 = v14;
  if (v14 == -1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Hw transport fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 69, "Hal22_ZxSendToChip", 1282);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    if (g_HalCallbacks) {
      g_HalCallbacks(7);
    }
    return -1;
  }
  return v7;
}

uint64_t Hal22_GetHwRevision(int *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t result = Hal15_ReadHwRevision(80);
  if (result)
  {
    int v3 = 4;
LABEL_7:
    *a1 = v3;
    return result;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal22_GetHwRevision", 1285);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t result = Hal15_ReadHwRevision(77);
  if (result)
  {
    int v3 = 5;
    goto LABEL_7;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal22_GetHwRevision", 1285);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return 0;
}

void GncP19_01ResetCB(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("GncP19_01ResetCB", 51, 1, 0x10uLL);
  if (v2)
  {
    int v3 = v2;
    if (a1 == 7) {
      int v4 = 7;
    }
    else {
      int v4 = 8;
    }
    v2[3] = v4;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HOST_RESET_CB_IND =>GNCP Stat,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP19_01ResetCB", v3[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8657155, v3);
  }
}

void GncP19_02TrigHWReset(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  BOOL v0 = gnssOsa_Calloc("GncP19_02TrigHWReset", 78, 1, 0x10uLL);
  if (v0)
  {
    unint64_t v1 = v0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP19_02TrigHWReset");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 128, 8652032, v1);
  }
}

uint64_t GncP19_03HandleResetStatusInd(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HOST_RESET_CB_IND Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP19_03HandleResetStatusInd", *(_DWORD *)(a1 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (g_MEResetInfo == 1)
    {
      if (AgpsFsmStopTimer(8656646) && g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP19_03HandleResetStatusInd", 1545);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      g_MEResetInfo = 0;
    }
    if (*(_DWORD *)(a1 + 12) == 7)
    {
      GncP16_28UpdateStateResetStatus(1);
    }
    else
    {
      GncP16_28UpdateStateResetStatus(2);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWError\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP19_03HandleResetStatusInd", 1306);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      GncP19_02TrigHWReset();
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP19_03HandleResetStatusInd", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void GncP19_04MEResetTimerExpiry(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Gnss BBReset NoResp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP19_04MEResetTimerExpiry", 1305);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  if (g_MEResetInfo == 1)
  {
    g_MEResetInfo = 0;
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWError\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 69, "GncP19_04MEResetTimerExpiry", 1306);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    GncP19_02TrigHWReset();
    GncP16_28UpdateStateResetStatus(3);
  }
}

uint64_t GncP19_05HandleHWStatusInd(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_STATUS_IND Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP19_05HandleHWStatusInd", *(unsigned __int8 *)(a1 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (g_MEResetInfo == 1)
    {
      if (AgpsFsmStopTimer(8656646) && g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP19_05HandleHWStatusInd", 1545);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      g_MEResetInfo = 0;
    }
    int v4 = *(unsigned __int8 *)(a1 + 12);
    if (v4 == 2)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HW Reset ongoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP19_05HandleHWStatusInd");
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      int v5 = 3;
    }
    else if (v4 == 1)
    {
      int v5 = 5;
    }
    else
    {
      int v5 = 4;
    }
    GncP16_28UpdateStateResetStatus(v5);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 69, "GncP19_05HandleHWStatusInd", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP08_03HandleHardReset(const char *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_MEResetInfo == 1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HW Error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 69, "GncP08_03HandleHardReset", 1306);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    GncP19_02TrigHWReset();
    return 1;
  }
  g_MEResetInfo = 1;
  GncP16_28UpdateStateResetStatus(0);
  if (!strcmp(a1, "No ME Data"))
  {
    if (!g_LbsOsaTrace_Config) {
      goto LABEL_11;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ### GNSS crash detected ### - Reason %s\n", v6);
  }
  else
  {
    if (!g_LbsOsaTrace_Config) {
      goto LABEL_11;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ### GNSS crash detected ###, No data received for %u ms\n", v5);
  }
  gnssOsa_PrintLog(__str, 1, 1, 0);
LABEL_11:
  Hal_GnssBaseBandReset((uint64_t)GncP19_01ResetCB);
  if ((g_MEResetInfo & 1) == 0)
  {
    if (AgpsFsmStartTimer(0x841706u, 0x2BCu))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP08_03HandleHardReset", 1544, 700);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      g_MEResetInfo = 1;
    }
  }
  return 1;
}

double *NK_Decay_Speed(double *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v4 = (unsigned int *)(a4 + 27112);
  int v5 = 1000 * result;
  unsigned int v6 = *(_DWORD *)(a4 + 27120);
  if (v6 * a2 > 1000 * (int)result)
  {
    double v9 = *(double *)(a3 + 328);
    if (result && v6 <= 0x3E7 && v9 > 0.001)
    {
      double v10 = 1.0
          - (double)(v6 * a2 - 1000 * result)
          * (double)(v6 * a2 - 1000 * result)
          / ((double)(v6 * a2 + v5)
           * (double)(v6 * a2 + v5));
      if (*v4) {
        double v10 = v10
      }
            / (1.0
             - (double)(*v4 * a2 - v5) * (double)(*v4 * a2 - v5) / ((double)(*v4 * a2 + v5) * (double)(*v4 * a2 + v5)));
      double v11 = v10 * v10;
      *int v4 = v6;
      uint64_t v12 = 11;
      do
      {
        *(double *)(a3 + 8 * v12) = v11 * *(double *)(a3 + 8 * v12);
        unint64_t v13 = v12 - 8;
        --v12;
      }
      while (v13 > 1);
      double v9 = *(double *)(a3 + 328);
      double v14 = *(double *)(a4 + 304) - v9 * v11;
    }
    else
    {
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      double v14 = *(double *)(a4 + 304);
    }
    if (v9 > *(double *)(a4 + 112))
    {
      uint64_t v15 = 0;
      int v16 = 0;
      double v17 = v14 * v14 * 0.0555555556;
      long long v18 = 0uLL;
      do
      {
        uint64_t v22 = 0;
        v21[2] = v18;
        v21[3] = v18;
        v21[0] = v18;
        v21[1] = v18;
        long long v23 = *(_OWORD *)(a3 + v15 + 224);
        uint64_t v24 = *(void *)(a3 + v15 + 240);
        if (v15 == 48) {
          double v17 = v17 * *(double *)(a4 + 128);
        }
        int v19 = 0;
        int v20 = 0;
        if (v17 > 0.0)
        {
          uint64_t result = rnk1_core((double *)(a4 + 352), 0xCu, v17, (double *)v21, &v20);
          long long v18 = 0uLL;
          int v19 = v20;
        }
        if (v19) {
          ++v16;
        }
        v15 += 24;
      }
      while (v15 != 72);
      if (v16)
      {
        *(_DWORD *)(a4 + 140) = 11;
        *(unsigned char *)(a4 + 136) = 1;
      }
    }
  }
  return result;
}

void GncP03_10SndNewUpdtSM(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncP03_10SndNewUpdtSM", 52, 1, 0x10uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_UPDT_POS_AVAL_IND =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP03_10SndNewUpdtSM");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 130, 8657411, v1);
  }
}

void GncP03_13SendStopFWActResp(char a1, char a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = gnssOsa_Calloc("GncP03_13SendStopFWActResp", 71, 1, 0x10uLL);
  if (v4)
  {
    int v5 = v4;
    v4[12] = a2;
    v4[13] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_STOP_FW_ACTIVE_RSP =>GNM Activity,%hhu,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP03_13SendStopFWActResp", v5[12], v5[13]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 128, 8652804, v5);
  }
}

void GncP03_SendGNSSSleepRequest(int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_DeRegGnssCount >= 4u)
  {
    snprintf(v7, 0x3B6uLL, "ASSERT: %s %d Max Attempts De-Register GNSS", "GncP03_SendGNSSSleepRequest", 103);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 69, "GncP03_SendGNSSSleepRequest", v7);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GncP03_SendGNSSSleepRequest", "gncpe03Tx.cpp", 104, "false && \"De-Register GNSS Failed\"");
  }
  if (Hal_GNSS_SessionStop(a1))
  {
    ++g_DeRegGnssCount;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SleepTO,%u,ExpSleepDur,%u,Attempt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP03_SendGNSSSleepRequest", a1, a2, g_DeRegGnssCount);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

uint64_t Decode_SVid_STE(uint64_t a1, int a2, int *a3)
{
  *a3 = 0;
  if (a2 == 1 && (a1 - 1) <= 0x1Fu)
  {
    int v3 = 1;
LABEL_10:
    *a3 = v3;
    return a1;
  }
  if (a2 == 2 && (a1 - 120) <= 0x26u)
  {
    int v3 = 7;
    goto LABEL_10;
  }
  if (a2 == 3 && (a1 + 63) <= 9u)
  {
    int v3 = 5;
    goto LABEL_10;
  }
  if (a2 == 4 && (a1 - 1) <= 0xDu)
  {
    *a3 = 2;
    return (a1 - 8);
  }
  else if (a2 == 5 && (a1 - 65) <= 0x23u)
  {
    *a3 = 3;
    return (a1 - 64);
  }
  else if (a2 == 6 && (a1 + 127) <= 0x3Eu)
  {
    *a3 = 4;
    return (a1 - 128);
  }
  else
  {
    uint64_t v4 = 0;
    if (a2 == 7 && (a1 - 101) <= 0xDu)
    {
      *a3 = 6;
      return (a1 - 100);
    }
  }
  return v4;
}

void GNSS_HL_Data_Bases_Clear(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v51 = *MEMORY[0x263EF8340];
  memset(__src, 0, 22);
  *(_OWORD *)((char *)&__src[1] + 15) = 0u;
  *(_OWORD *)((char *)&__src[1] + 6) = 0u;
  uint64_t v2 = *(void *)(v1 + 48);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_WORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 65) = *(_OWORD *)((char *)&__src[1] + 15);
  long long v3 = __src[0];
  *(_OWORD *)(v2 + 50) = __src[1];
  *(_OWORD *)(v2 + 34) = v3;
  *(_DWORD *)(v2 + 128) = 0;
  *(_OWORD *)(v2 + 113) = 0u;
  *(_OWORD *)(v2 + 97) = 0u;
  *(_OWORD *)(v2 + 81) = 0u;
  bzero(__src, 0x46B0uLL);
  uint64_t v4 = 656;
  do
  {
    uint64_t v5 = (char *)__src + v4;
    *(_DWORD *)uint64_t v5 = 0;
    *(_OWORD *)(v5 + 8) = 0uLL;
    *(_OWORD *)(v5 + 24) = 0uLL;
    v4 += 40;
  }
  while (v5 + 40 != (char *)&__src[586]);
  uint64_t v6 = 9376;
  do
  {
    uint64_t v7 = (char *)__src + v6;
    *(_DWORD *)uint64_t v7 = 0;
    *(_OWORD *)(v7 + 8) = 0uLL;
    *(_OWORD *)(v7 + 24) = 0uLL;
    v6 += 40;
  }
  while (v7 + 40 != (char *)&__src[1131]);
  memcpy(*(void **)(v1 + 32), __src, 0x46B0uLL);
  bzero(__src, 0x2280uLL);
  *(void *)((char *)&__src[3] + 12) = 0x500000002;
  uint64_t v8 = 72;
  do
  {
    double v9 = (char *)__src + v8;
    *(_DWORD *)double v9 = 0;
    v9[4] = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    v9[24] = 0;
    *(void *)(v9 + 34) = 0;
    *(void *)(v9 + 26) = 0;
    v8 += 48;
    *(_DWORD *)(v9 + 42) = 0;
  }
  while (v9 + 48 != (char *)&__src[373] + 8);
  bzero((char *)&__src[373] + 8, 0xA3DuLL);
  *(_OWORD *)((char *)&__src[541] + 1) = 0u;
  *(_OWORD *)((char *)&__src[539] + 8) = 0u;
  *(_OWORD *)((char *)&__src[540] + 8) = 0u;
  *(_OWORD *)((char *)&__src[537] + 8) = 0u;
  *(_OWORD *)((char *)&__src[538] + 8) = 0u;
  *(_OWORD *)((char *)&__src[542] + 8) = 0u;
  *(_OWORD *)((char *)&__src[543] + 8) = 0u;
  *(_OWORD *)((char *)&__src[544] + 8) = 0u;
  *(_OWORD *)((char *)&__src[545] + 8) = 0u;
  *(_OWORD *)((char *)&__src[546] + 8) = 0u;
  *(_OWORD *)((char *)&__src[547] + 8) = 0u;
  *(_OWORD *)((char *)&__src[548] + 8) = 0u;
  *(_OWORD *)((char *)&__src[549] + 8) = 0u;
  *(_OWORD *)((char *)&__src[550] + 8) = 0u;
  WORD4(__src[551]) = 0;
  uint64_t v10 = *(void *)(v1 + 40);
  long long v11 = __src[0];
  long long v12 = __src[1];
  long long v13 = __src[2];
  *(_OWORD *)(v10 + 44) = *(_OWORD *)((char *)&__src[2] + 12);
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = v13;
  *(_OWORD *)uint64_t v10 = v11;
  *(void *)(v10 + 60) = *(void *)((char *)&__src[3] + 12);
  memcpy((void *)(v10 + 68), (char *)&__src[4] + 4, 0x2236uLL);
  bzero(*(void **)(v1 + 64), 0x440uLL);
  uint64_t v14 = *(void *)(v1 + 72);
  *(void *)uint64_t v14 = 0x200000000;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 21) = 0;
  *(_WORD *)(v14 + 29) = 257;
  *(unsigned char *)(v14 + 31) = 1;
  *(void *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 32) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(void *)(v14 + 60) = 0x500000002;
  bzero((void *)(v14 + 68), 0x6E8uLL);
  *(unsigned char *)(v14 + 1836) = 1;
  *(_OWORD *)(v14 + 1837) = 0u;
  *(_OWORD *)(v14 + 1853) = 0u;
  *(_OWORD *)(v14 + 1869) = 0u;
  *(_OWORD *)(v14 + 1885) = 0u;
  *(_OWORD *)(v14 + 1901) = 0u;
  *(_OWORD *)(v14 + 1917) = 0u;
  *(_OWORD *)(v14 + 1933) = 0u;
  *(_OWORD *)(v14 + 1949) = 0u;
  *(_OWORD *)(v14 + 1965) = 0u;
  *(_OWORD *)(v14 + 1981) = 0u;
  *(_OWORD *)(v14 + 1997) = 0u;
  *(_OWORD *)(v14 + 2013) = 0u;
  *(_OWORD *)(v14 + 2029) = 0u;
  *(_OWORD *)(v14 + 2045) = 0u;
  *(_OWORD *)(v14 + 2061) = 0u;
  *(_OWORD *)(v14 + 2077) = 0u;
  *(_OWORD *)(v14 + 2093) = 0u;
  *(_OWORD *)(v14 + 2109) = 0u;
  *(_DWORD *)(v14 + 2125) = 0;
  uint64_t v15 = __src;
  bzero(__src, 0x93C0uLL);
  uint64_t v16 = 197;
  do
  {
    *(_OWORD *)((char *)v15 + 175) = 0uLL;
    v15[9] = 0uLL;
    v15[10] = 0uLL;
    v15[7] = 0uLL;
    v15[8] = 0uLL;
    v15[5] = 0uLL;
    v15[6] = 0uLL;
    v15[3] = 0uLL;
    v15[4] = 0uLL;
    v15[1] = 0uLL;
    v15[2] = 0uLL;
    _OWORD *v15 = 0uLL;
    v15 += 12;
    --v16;
  }
  while (v16);
  memset(&__src[2364], 0, 24);
  memcpy(*(void **)(v1 + 88), __src, 0x93D8uLL);
  bzero(__src, 0x2E30uLL);
  uint64_t v17 = 40;
  do
  {
    long long v18 = (char *)__src + v17;
    *(void *)long long v18 = 0;
    *((_WORD *)v18 + 4) = 0;
    *(void *)(v18 + 12) = 0;
    *((void *)v18 + 6) = 0;
    *((void *)v18 + 3) = 0;
    *((void *)v18 + 4) = 0;
    v17 += 56;
    *(void *)(v18 + 38) = 0;
  }
  while (v18 + 56 != (char *)&__src[450] + 8);
  uint64_t v19 = -4608;
  do
  {
    int v20 = (char *)&__src[738] + v19 + 8;
    v20[32] = 0;
    *(_OWORD *)int v20 = 0uLL;
    *((_OWORD *)v20 + 1) = 0uLL;
    v19 += 36;
  }
  while (v19);
  WORD4(__src[738]) = 0;
  HIDWORD(__src[738]) = 0;
  memcpy(*(void **)(v1 + 16), __src, 0x2E30uLL);
  bzero(__src, 0x3E00uLL);
  uint64_t v21 = -15872;
  do
  {
    uint64_t v22 = (_OWORD *)((char *)__src + v21);
    v22[998] = 0uLL;
    v22[997] = 0uLL;
    v22[996] = 0uLL;
    v22[995] = 0uLL;
    v22[994] = 0uLL;
    v22[993] = 0uLL;
    v22[992] = 0uLL;
    *(_OWORD *)((char *)&__src[998] + v21 + 9) = 0uLL;
    v21 += 124;
  }
  while (v21);
  memset(&__src[992], 0, 24);
  memcpy(*(void **)(v1 + 24), __src, 0x3E18uLL);
  bzero(__src, 0xF3B0uLL);
  for (uint64_t i = 120; i != 3832; i += 116)
  {
    uint64_t v24 = (char *)__src + i;
    *(_DWORD *)(v24 + 111) = 0;
    *((_OWORD *)v24 + 5) = 0uLL;
    *((_OWORD *)v24 + 6) = 0uLL;
    *((_OWORD *)v24 + 3) = 0uLL;
    *((_OWORD *)v24 + 4) = 0uLL;
    *((_OWORD *)v24 + 1) = 0uLL;
    *((_OWORD *)v24 + 2) = 0uLL;
    *(_OWORD *)uint64_t v24 = 0uLL;
  }
  for (uint64_t j = 3832; j != 7544; j += 116)
  {
    uint64_t v26 = (char *)__src + j;
    *(_DWORD *)(v26 + 111) = 0;
    *((_OWORD *)v26 + 5) = 0uLL;
    *((_OWORD *)v26 + 6) = 0uLL;
    *((_OWORD *)v26 + 3) = 0uLL;
    *((_OWORD *)v26 + 4) = 0uLL;
    *((_OWORD *)v26 + 1) = 0uLL;
    *((_OWORD *)v26 + 2) = 0uLL;
    *(_OWORD *)uint64_t v26 = 0uLL;
  }
  bzero((char *)&__src[471] + 8, 0x5CAuLL);
  *(_OWORD *)((char *)&__src[569] + 8) = 0u;
  *(_OWORD *)((char *)&__src[570] + 8) = 0u;
  *(_OWORD *)((char *)&__src[567] + 8) = 0u;
  *(_OWORD *)((char *)&__src[568] + 8) = 0u;
  *(_OWORD *)((char *)&__src[565] + 8) = 0u;
  *(_OWORD *)((char *)&__src[566] + 8) = 0u;
  *(_OWORD *)((char *)&__src[564] + 8) = 0u;
  uint64_t v27 = -1160;
  *((void *)&__src[571] + 1) = 0;
  do
  {
    int v28 = (char *)&__src[644] + v27 + 8;
    *(_DWORD *)(v28 + 111) = 0;
    *((_OWORD *)v28 + 5) = 0uLL;
    *((_OWORD *)v28 + 6) = 0uLL;
    *((_OWORD *)v28 + 3) = 0uLL;
    *((_OWORD *)v28 + 4) = 0uLL;
    *((_OWORD *)v28 + 1) = 0uLL;
    *((_OWORD *)v28 + 2) = 0uLL;
    *(_OWORD *)int v28 = 0uLL;
    v27 += 116;
  }
  while (v27);
  uint64_t v29 = -1160;
  do
  {
    unsigned int v30 = (_OWORD *)((char *)__src + v29);
    v30[723] = 0uLL;
    v30[722] = 0uLL;
    v30[721] = 0uLL;
    v30[720] = 0uLL;
    v30[719] = 0uLL;
    v30[718] = 0uLL;
    v30[717] = 0uLL;
    *(_DWORD *)((char *)&__src[723] + v29 + 15) = 0;
    v29 += 116;
  }
  while (v29);
  uint64_t v31 = 0xFFFFFFFFFFFFFA0;
  memset(&__src[717], 0, 456);
  do
  {
    uint64_t v32 = (_OWORD *)((char *)&__src[v31 + 841] + 8);
    *(_OWORD *)((char *)v32 + 46) = 0uLL;
    v32[1] = 0uLL;
    v32[2] = 0uLL;
    _OWORD *v32 = 0uLL;
    v31 += 4;
  }
  while (v31 * 16);
  uint64_t v33 = -2784;
  do
  {
    uint64_t v34 = (char *)&__src[1015] + v33 + 8;
    *(_DWORD *)(v34 + 111) = 0;
    *((_OWORD *)v34 + 5) = 0uLL;
    *((_OWORD *)v34 + 6) = 0uLL;
    *((_OWORD *)v34 + 3) = 0uLL;
    *((_OWORD *)v34 + 4) = 0uLL;
    *((_OWORD *)v34 + 1) = 0uLL;
    *((_OWORD *)v34 + 2) = 0uLL;
    *(_OWORD *)uint64_t v34 = 0uLL;
    v33 += 116;
  }
  while (v33);
  uint64_t v35 = 16248;
  do
  {
    uint64_t v36 = (char *)__src + v35;
    *(void *)uint64_t v36 = 0;
    *((_WORD *)v36 + 4) = 0;
    *(void *)(v36 + 12) = 0;
    *(void *)(v36 + 28) = 0;
    *(void *)(v36 + 20) = 0;
    v35 += 36;
  }
  while (v36 + 36 != (char *)&__src[1069] + 8);
  *((void *)&__src[1069] + 1) = 0;
  LOWORD(__src[1070]) = 0;
  DWORD1(__src[1070]) = 0;
  BYTE8(__src[1070]) = 0;
  HIDWORD(__src[1070]) = 0;
  LOBYTE(__src[1071]) = 0;
  *(_OWORD *)((char *)&__src[1071] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1072] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1073] + 8) = 0u;
  BYTE8(__src[1074]) = 0;
  bzero(&__src[1075], 0x1ABCuLL);
  for (uint64_t k = 0; k != 1296; k += 36)
  {
    uint64_t v38 = (char *)&__src[1502] + k + 12;
    *(_DWORD *)(v38 + 31) = 0;
    *(_OWORD *)uint64_t v38 = 0uLL;
    *((_OWORD *)v38 + 1) = 0uLL;
  }
  *(void *)((char *)&__src[1584] + 2) = 0;
  *(void *)((char *)&__src[1583] + 12) = 0;
  memset(&__src[1585], 0, 30);
  memset(&__src[1587], 0, 120);
  uint64_t v39 = 25512;
  do
  {
    unsigned int v40 = (char *)__src + v39;
    *(void *)unsigned int v40 = 0;
    *((void *)v40 + 1) = 0;
    *((_WORD *)v40 + 8) = 0;
    *(_OWORD *)(v40 + 20) = 0uLL;
    *(_OWORD *)(v40 + 36) = 0uLL;
    *(_OWORD *)(v40 + 52) = 0uLL;
    *(_OWORD *)(v40 + 68) = 0uLL;
    *(_OWORD *)(v40 + 82) = 0uLL;
    *(_OWORD *)(v40 + 100) = 0uLL;
    v39 += 152;
    *(_OWORD *)(v40 + 116) = 0uLL;
    *(_OWORD *)(v40 + 132) = 0uLL;
  }
  while (v40 + 152 != (char *)&__src[2193]);
  uint64_t v41 = 35088;
  do
  {
    uint64_t v42 = (char *)__src + v41;
    *(void *)uint64_t v42 = 0;
    *((void *)v42 + 1) = 0;
    *((_WORD *)v42 + 8) = 0;
    *(_OWORD *)(v42 + 20) = 0uLL;
    *(_OWORD *)(v42 + 36) = 0uLL;
    *(_OWORD *)(v42 + 52) = 0uLL;
    *(_OWORD *)(v42 + 68) = 0uLL;
    *(_OWORD *)(v42 + 82) = 0uLL;
    *(_OWORD *)(v42 + 100) = 0uLL;
    v41 += 152;
    *(_OWORD *)(v42 + 116) = 0uLL;
    *(_OWORD *)(v42 + 132) = 0uLL;
  }
  while (v42 + 152 != (char *)&__src[2791] + 8);
  for (uint64_t m = 0; m != 2772; m += 44)
  {
    uint64_t v44 = (_OWORD *)((char *)&__src[2791] + m + 8);
    *(_OWORD *)((char *)v44 + 27) = 0uLL;
    *uint64_t v44 = 0uLL;
    v44[1] = 0uLL;
  }
  *(void *)((char *)&__src[2964] + 12) = 0;
  WORD2(__src[2965]) = 0;
  WORD2(__src[2966]) = 0;
  *((void *)&__src[2965] + 1) = 0;
  *(_DWORD *)((char *)&__src[2965] + 15) = 0;
  *((void *)&__src[2966] + 1) = 0;
  LOWORD(__src[2967]) = 0;
  LOWORD(__src[2968]) = 0;
  *(void *)((char *)&__src[2967] + 4) = 0;
  *(_DWORD *)((char *)&__src[2967] + 11) = 0;
  *((void *)&__src[2968] + 1) = 0;
  LOWORD(__src[2969]) = 0;
  *(_OWORD *)((char *)&__src[2969] + 4) = 0u;
  *(_OWORD *)((char *)&__src[2970] + 4) = 0u;
  *(void *)((char *)&__src[2971] + 2) = 0;
  bzero((char *)&__src[2971] + 12, 0x8E4uLL);
  for (uint64_t n = 0; n != 728; n += 52)
  {
    int v46 = (char *)&__src[3114] + n + 14;
    *((_WORD *)v46 - 1) = 0;
    *(_WORD *)((char *)&__src[3114] + n + 14) = 0;
    *((_WORD *)v46 + 1) = 0;
    *(_DWORD *)(v46 + 6) = 0;
    *((_WORD *)v46 + 5) = 0;
    *(void *)(v46 - 14) = 0;
    *(_DWORD *)(v46 - 7) = 0;
    *(void *)(v46 + 22) = 0;
    *(void *)(v46 + 14) = 0;
    *(void *)(v46 + 27) = 0;
  }
  *(_DWORD *)((char *)&__src[3160] + 6) = 0;
  *((void *)&__src[3159] + 1) = 0;
  *(void *)((char *)&__src[3159] + 13) = 0;
  memset(&__src[3161], 0, 38);
  *((void *)&__src[3898] + 1) = 0;
  bzero((char *)&__src[3163] + 8, 0x2DEDuLL);
  memcpy(*(void **)(v1 + 56), __src, 0xF3B0uLL);
  memset(&v49[28], 0, 24);
  memset(v49, 0, 24);
  memset(__src, 0, 30);
  uint64_t v47 = *(void *)(v1 + 80);
  *(void *)uint64_t v47 = 0;
  *(void *)(v47 + 8) = 0;
  *(void *)(v47 + 13) = 0;
  *(void *)(v47 + 24) = 0x500000002;
  *(_OWORD *)(v47 + 32) = __src[0];
  *(_OWORD *)(v47 + 46) = *(_OWORD *)((char *)__src + 14);
  bzero((void *)(v47 + 62), 0xEBCuLL);
  *(_OWORD *)(v47 + 3834) = *(_OWORD *)&v49[28];
  *(void *)(v47 + 3850) = *(void *)&v49[44];
  *(_OWORD *)(v47 + 3858) = *(_OWORD *)v49;
  *(void *)(v47 + 3874) = *(void *)&v49[16];
  memset(v49, 0, 22);
  LOWORD(__src[0]) = 0;
  BYTE2(__src[0]) = 0;
  bzero((char *)__src + 3, 0x2500uLL);
  uint64_t v48 = *(void *)(v1 + 96);
  *(_OWORD *)(v48 + 26) = 0u;
  *(void *)uint64_t v48 = 0;
  *(void *)(v48 + 8) = 0;
  *(_WORD *)(v48 + 24) = 0;
  *(void *)(v48 + 16) = 0;
  *(_OWORD *)(v48 + 42) = 0u;
  *(_DWORD *)(v48 + 57) = 0;
  *(unsigned char *)(v48 + 61) = 0;
  *(_DWORD *)(v48 + 62) = 0;
  *(_OWORD *)(v48 + 66) = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 77) = 0uLL;
  memcpy((void *)(v48 + 93), __src, 0x2503uLL);
  bzero(*(void **)(v1 + 104), 0xD7D8uLL);
  bzero(*(void **)(v1 + 224), 0x18D0uLL);
  bzero(*(void **)(v1 + 232), 0x878uLL);
}

uint64_t GNSS_HL_Data_Bases_Init(void *a1)
{
  *(_DWORD *)(a1[1] + 16) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  Init_DB_SV_Nav_Mess(a1[7]);
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  int v4 = *(_DWORD *)(v2 + 16);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)v2;
  *(_DWORD *)(v3 + 28) = v4;
  *(void *)(v3 + 8) = *(void *)(v2 + 24);
  *(_WORD *)(v3 + 32) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 40) = 0;
  *(_WORD *)(v3 + 68) = -1;
  *(_DWORD *)(v3 + 64) = -1;
  *(_DWORD *)(v3 + 82) = 0;
  *(_DWORD *)(v3 + 108) = 0;
  *(_WORD *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(_WORD *)(v3 + 104) = 0;
  *(void *)(v3 + 70) = 0;
  *(_DWORD *)(v3 + 77) = 0;
  *(_DWORD *)(v3 + 128) = *(_DWORD *)v2;
  Init_DB_SV_AzEl(a1[4]);
  Init_DB_Sys_Status(a1[9]);
  Init_DB_Nav_Soln(a1[6], a1[9], a1[10]);
  Init_DB_Acq_Aid_Table(a1[10], a1[7], a1[5]);
  uint64_t v5 = a1[13];

  return Init_DB_Sensor(v5);
}

uint64_t GNSS_HL_Data_Bases_Init_NV(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 8) + 16) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                             * (double)mach_continuous_time());
  Init_DB_SV_Nav_Mess_NV(*(void *)(a1 + 56));
  Init_DB_Time_Sync_NV(*(int **)(a1 + 8), *(void *)(a1 + 48), *(void *)(a1 + 16));
  Init_DB_SV_AzEl(*(void *)(a1 + 32));
  Init_DB_Sys_Status_NV(*(void *)(a1 + 48), *(void *)(a1 + 72));
  Init_DB_Nav_Soln(*(void *)(a1 + 48), *(void *)(a1 + 72), *(void *)(a1 + 80));
  Init_DB_Acq_Aid_Table(*(void *)(a1 + 80), *(void *)(a1 + 56), *(void *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 104);

  return Init_DB_Sensor(v2);
}

double GNSS_HL_Data_Bases_TimeSynch(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned int *)a1[6];
  int v4 = (unsigned int *)a1[1];
  uint64_t v5 = a1[10];
  if (v3[6]) {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBts TTick not 0");
  }
  if (!v3[7]) {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBts OS_Time_ms = 0");
  }
  if (!*v4) {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBtt TTicuint64_t k = 0");
  }
  uint64_t v6 = v4[4];
  if (!v6)
  {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBtt OS_Time_ms = 0");
    uint64_t v6 = v4[4];
  }
  uint64_t v7 = v3[7];
  if (v6 < v7)
  {
    EvLog_nd("GNSS_HL_Data_Bases_TimeSynch: WARNING - DBtt behind DBts", 2, a3, v6, v7);
    uint64_t v7 = v3[7];
  }
  uint64_t v8 = v3[6];
  uint64_t v9 = *((void *)v3 + 1);
  uint64_t v10 = *v3;
  if ((int)v10 < 1)
  {
    uint64_t v12 = *v4;
    uint64_t v11 = v4[4];
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = v4[4];
    uint64_t v12 = *v4;
    uint64_t v13 = (v7 - v11 + v12);
  }
  v3[6] = v13;
  v3[7] = v11;
  uint64_t v14 = *((void *)v4 + 3);
  *((void *)v3 + 1) = v14;
  EvLog_v("GNSS_HL_Data_Bases_TimeSynch: DBts %d %g %u %u %U  orig %u %u %U  DBns %u %u %U  DBtt %u %u %u %U", v10, *((void *)v3 + 5), v13, v11, v14, v8, v7, v9, *(unsigned int *)(v5 + 32), *(unsigned int *)(v5 + 36), *(void *)(v5 + 40), v12, v11, v14, v4[3], v16);
  if (!*(_DWORD *)(v5 + 32))
  {
    double result = *((double *)v3 + 3);
    *(double *)(v5 + 32) = result;
    *(void *)(v5 + 40) = *((void *)v3 + 1);
  }
  return result;
}

void GM_Set_MSec_TOT_SSS(uint64_t a1, double a2, double a3, double a4)
{
}

void GM_Set_MSec_TOW_NSSS(uint64_t a1, uint64_t a2, double *a3, int *a4, double a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 4))
  {
    long long v9 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)a1;
    long long v23 = v9;
    long long v24 = *(_OWORD *)(a1 + 32);
    uint64_t v25 = *(void *)(a1 + 48);
    GM_Aid_NSSS_Meas(a2, 0, (int *)v22);
    double v10 = *a3;
    double v11 = Comp_Sig_TOT(*(int *)v22, *(int *)&v22[2], v22[4], *a3, a5);
    LOWORD(v12) = *(_WORD *)(a2 + 16);
    double v13 = (double)v12;
    double v14 = 0.5;
    double v15 = v13 * 0.5 + v11 * 1000.0;
    if (v15 <= 0.0) {
      double v16 = -0.5;
    }
    else {
      double v16 = 0.5;
    }
    double v17 = v15 + v16;
    if (v17 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0) {
        double v18 = (double)(int)v17 * 0.001;
      }
      else {
        double v18 = -2147483.65;
      }
    }
    else
    {
      double v18 = 2147483.65;
    }
    double v19 = (v18 - v10) * 1000.0;
    if (v19 <= 0.0) {
      double v14 = -0.5;
    }
    double v20 = v19 + v14;
    if (v20 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0) {
        int v21 = (int)v20;
      }
      else {
        int v21 = 0x80000000;
      }
    }
    else
    {
      int v21 = 0x7FFFFFFF;
    }
    *a4 = v21;
    *a3 = v18;
  }
}

const void **SV_Data_Decode_Update_Wrapper(uint64_t a1)
{
  GNSS_Validate_p_list((const void **)a1, "SV_Data_Decode_Update_Wrapper: Entry");
  SV_Data_Decode(*(void *)(a1 + 136), *(void *)(a1 + 176), *(_DWORD **)(a1 + 24), *(void *)(a1 + 72), *(void *)(a1 + 32), *(void *)(a1 + 48), *(void *)(a1 + 56));

  return GNSS_Validate_p_list((const void **)a1, "SV_Data_Decode_Update_Wrapper:  Exit");
}

void *gnssTest::Device::Device(void *result)
{
  *double result = &unk_270ED1138;
  return result;
}

void gnssTest::GnssAdaptDeviceTest::~GnssAdaptDeviceTest(gnssTest::GnssAdaptDeviceTest *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_270ED11B8;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Destructor\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 73, "~GnssAdaptDeviceTest");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100]((void *)this + 3);
}

{
  uint64_t vars8;

  gnssTest::GnssAdaptDeviceTest::~GnssAdaptDeviceTest(this);
}

{
  uint64_t vars8;

  gnssTest::GnssAdaptDeviceTest::~GnssAdaptDeviceTest(this);

  JUMPOUT(0x263E6EDB0);
}

void sub_263CC13E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void gnssTest::GnssAdaptDeviceTest::periodic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    std::function<void ()(gnss::Result)>::operator()(a4, 7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "periodic", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void gnssTest::GnssAdaptDeviceTest::recordIQ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    std::function<void ()(gnss::Result)>::operator()(a5, 7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "recordIQ", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void gnssTest::GnssAdaptDeviceTest::commLoopback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    std::function<void ()(gnss::Result)>::operator()(a5, 7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "commLoopback", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void gnssTest::GnssAdaptDeviceTest::cw(uint64_t a1, int a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(void *)(a7 + 24))
  {
    double v14 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest2cwEiN4gnss4BandENS_7SubbandEdiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_5;
    void block[4] = a1;
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v17, a6);
    char v22 = a3;
    int v19 = a2;
    int v20 = a4;
    *(double *)&v17[4] = a8;
    int v21 = a5;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, a7);
    dispatch_async(v14, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v17);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v15 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "cw", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263CC19A0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest2cwEiN4gnss4BandENS_7SubbandEdiNSt3__18functionIFvNS4_6vectorINS_13RfMeasurementENS4_9allocatorIS7_EEEEEEENS5_IFvNS1_6ResultEEEE_block_invoke(uint64_t a1)
{
  v10[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 64))
  {
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v8, a1 + 40);
    uint64_t v3 = v2 + 24;
    if (v8 != (void *)(v2 + 24))
    {
      uint64_t v4 = v9;
      uint64_t v5 = *(void *)(v2 + 48);
      if (v9 == v8)
      {
        if (v5 == v3)
        {
          (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
          (*(void (**)(void *))(*v9 + 32))(v9);
          uint64_t v9 = 0;
          (*(void (**)(void, void *))(**(void **)(v2 + 48) + 24))(*(void *)(v2 + 48), v8);
          (*(void (**)(void))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48));
          *(void *)(v2 + 48) = 0;
          uint64_t v9 = v8;
          (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, v2 + 24);
          (*(void (**)(void *))(v10[0] + 32))(v10);
        }
        else
        {
          (*(void (**)(void *, uint64_t))(v8[0] + 24))(v8, v2 + 24);
          (*(void (**)(void *))(*v9 + 32))(v9);
          uint64_t v9 = *(void **)(v2 + 48);
        }
        *(void *)(v2 + 48) = v3;
      }
      else if (v5 == v3)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v2 + 24, v8);
        (*(void (**)(void))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48));
        *(void *)(v2 + 48) = v9;
        uint64_t v9 = v8;
      }
      else
      {
        uint64_t v9 = *(void **)(v2 + 48);
        *(void *)(v2 + 48) = v4;
      }
    }
    std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v8);
  }
  if (HalFactory_RunCWTest(*(_DWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 124), *(double *)(a1 + 72), *(unsigned int *)(a1 + 116), *(_DWORD *)(a1 + 120), v2))int v6 = 1; {
  else
  }
    int v6 = 8;

  return std::function<void ()(gnss::Result)>::operator()(a1 + 80, v6);
}

void sub_263CC1C94(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE80c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
}

void sub_263CC1D1C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_6vectorIN8gnssTest13RfMeasurementENS_9allocatorIS3_EEEEEEE80c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 80));

  return std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnssTest::GnssAdaptDeviceTest::modulated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a7 + 24))
  {
    std::function<void ()(gnss::Result)>::operator()(a7, 7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "modulated", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void gnssTest::GnssAdaptDeviceTest::powerMode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v3 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest9powerModeENS_9PowerModeENSt3__18functionIFvN4gnss6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_5_0;
    int v7 = a2;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    dispatch_async(v3, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "powerMode", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest9powerModeENS_9PowerModeENSt3__18functionIFvN4gnss6ResultEEEE_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if ((v2 - 1) >= 3)
  {
    char v3 = v2 == 4;
  }
  else
  {
    std::function<void ()(gnss::Result)>::operator()(a1 + 32, 7);
    char v3 = 0;
  }
  if (HalFactory_PowerMode(v3)) {
    int v4 = 1;
  }
  else {
    int v4 = 8;
  }

  return std::function<void ()(gnss::Result)>::operator()(a1 + 32, v4);
}

void gnssTest::GnssAdaptDeviceTest::apSignalGpio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::function<void ()(gnss::Result)>::operator()(a3, 7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "apSignalGpio", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void gnssTest::GnssAdaptDeviceTest::timeMarkGpio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v3 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest12timeMarkGpioEiNSt3__18functionIFvN4gnss6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_0;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    dispatch_async(v3, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "timeMarkGpio", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest12timeMarkGpioEiNSt3__18functionIFvN4gnss6ResultEEEE_block_invoke(uint64_t a1)
{
  if (HalFactory_TriggerTSync()) {
    int v2 = 1;
  }
  else {
    int v2 = 8;
  }

  return std::function<void ()(gnss::Result)>::operator()(a1 + 32, v2);
}

void gnssTest::GnssAdaptDeviceTest::commPing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest8commPingEiNSt3__18functionIFvRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEESA_EEENS2_IFvN4gnss6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_10;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a4);
    std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    dispatch_async(v5, block);
    std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](v9);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "commPing", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263CC24F4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest8commPingEiNSt3__18functionIFvRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEESA_EEENS2_IFvN4gnss6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  int v2 = HalFactory_ComsPing((uint64_t)v7);
  uint64_t v3 = a1 + 32;
  if (v2)
  {
    std::function<void ()(gnss::Result)>::operator()(v3, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "NA");
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **, void **))(*(void *)v4 + 48))(v4, v7, __p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::function<void ()(gnss::Result)>::operator()(v3, 8);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_263CC2600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE64c89_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100](a1 + 64, a2 + 64);
}

void sub_263CC26B4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE64c89_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 64));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void gnssTest::GnssAdaptDeviceTest::setNmeaHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    std::function<void ()(gnss::Result)>::operator()(a4, 7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setNmeaHandler", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void gnssTest::GnssAdaptDeviceTest::setConfigTestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::function<void ()(gnss::Result)>::operator()(a3, 7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "setConfigTestContext", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t newGnssDeviceTest(void *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  if (*a1) {
    operator new();
  }
  return 0;
}

void sub_263CC2B98(_Unwind_Exception *a1)
{
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if (!v5)
    {
LABEL_3:
      if (!v4) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v5)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  if (!v4)
  {
LABEL_4:
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (!v3)
  {
LABEL_5:
    if (!v2)
    {
LABEL_12:
      MEMORY[0x263E6EDB0](v1, 0x10A1C40D9980045);
      _Unwind_Resume(a1);
    }
LABEL_11:
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    goto LABEL_12;
  }
LABEL_10:
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (!v2) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t gnssTest::Device::getObjectVersionNumber(gnssTest::Device *this)
{
  return 2502;
}

void *std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t GM_Cross_Check_Meas_Aiding(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v49 = (_DWORD *)(result + 17976);
  uint64_t v3 = -4608;
  uint64_t v4 = 11792;
  uint64_t v5 = 11796;
  uint64_t v6 = 18012;
  uint64_t v7 = 11806;
  uint64_t v8 = 11828;
  do
  {
    if (!*(unsigned char *)(v1 + v5)) {
      goto LABEL_56;
    }
    if (*(int *)(v1 + v6) < 10) {
      goto LABEL_56;
    }
    unsigned int v9 = *(unsigned __int8 *)(v1 + v7);
    if (v9 < 2) {
      goto LABEL_56;
    }
    uint64_t v10 = v1 + v3;
    int v11 = *(unsigned __int16 *)(v1 + v3 + 4616);
    if ((~v11 & 0x300) == 0)
    {
      int v12 = 1;
      double result = 1;
      goto LABEL_12;
    }
    if ((v11 & 0x200) != 0)
    {
      double result = 1;
LABEL_11:
      int v12 = 3;
LABEL_12:
      if (v9 == 2) {
        unsigned int v13 = v12 + 2;
      }
      else {
        unsigned int v13 = v12;
      }
      goto LABEL_15;
    }
    double result = 0;
    if ((v11 & 0x100) != 0) {
      goto LABEL_11;
    }
    unsigned int v13 = 0x7FFF;
LABEL_15:
    uint64_t v14 = v1 + v4;
    uint64_t v15 = v1 + v2;
    if (result)
    {
      int v16 = *(_DWORD *)(v15 + 4608) - *(_DWORD *)(v14 + 28);
      int v17 = v16 + 57600 * ((28800 - v16) / 57600);
      if (v16 > -28801) {
        int v17 = *(_DWORD *)(v15 + 4608) - *(_DWORD *)(v14 + 28);
      }
      if (v16 >= 28800) {
        int v18 = (v16 + 28800) % 57600 - 28800;
      }
      else {
        int v18 = v17;
      }
    }
    else
    {
      int v18 = 0;
    }
    int v19 = *(unsigned __int16 *)(v1 + v8);
    int v20 = *(_DWORD *)(v14 + 32) - v49[8];
    int v21 = *(unsigned __int16 *)(v15 + 4616);
    int v47 = *(_DWORD *)(v15 + 4612);
    int v48 = v20;
    int v22 = v47 - v20;
    BOOL v23 = __OFSUB__(v21, v19);
    int v25 = v21 - v19;
    char v24 = (v25 < 0) ^ v23 | (v25 == 0);
    if (v25 >= 0) {
      int v26 = v25;
    }
    else {
      int v26 = -v25;
    }
    unsigned int v27 = (v26 + 3276) / 0x1999u;
    int v28 = v27 & (v25 >> 31);
    if (v24) {
      int v29 = -v28;
    }
    else {
      int v29 = v27;
    }
    int v30 = v29 + 10 * v22 + 15345000 * v18;
    if (v30 < 0) {
      int v31 = -5115;
    }
    else {
      int v31 = 5115;
    }
    int v32 = (v31 + v30) / 10230;
    int v46 = result;
    if (!result) {
      v32 %= 20;
    }
    int v33 = v30 % 10230;
    int v34 = v33 + 10230;
    if (v33 >= -5114) {
      int v34 = v33;
    }
    if (v33 <= 5115) {
      int v35 = v34;
    }
    else {
      int v35 = v33 - 10230;
    }
    int v36 = v32 + 20;
    if (v32 >= -9) {
      int v36 = v32;
    }
    if (v32 <= 10) {
      int v37 = v36;
    }
    else {
      int v37 = v32 - 20;
    }
    if (v35 >= 0) {
      unsigned int v38 = v35;
    }
    else {
      unsigned int v38 = -v35;
    }
    if (v38 > *(unsigned __int16 *)(v1 + v8 - 10))
    {
      unsigned int v45 = v13;
      int v44 = *(unsigned __int16 *)(v1 + v8 - 10);
      GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(v10 + 4608));
      double result = (uint64_t)EvLog_v("GMCCMA: PR MAX chips:  %s  dT %d  d_Chips %d (%d - %d)  SR %d", GNSS_SV_Str, *v49 - *(_DWORD *)(v1 + v4), v35, v47, v48, v44);
      unsigned int v13 = v45;
      uint64_t v10 = v1 + v3;
    }
    if (v37 >= 0) {
      unsigned int v40 = v37;
    }
    else {
      unsigned int v40 = -v37;
    }
    if (v40 > v13 && g_Logging_Cfg >= 4)
    {
      unsigned int v42 = v13;
      unsigned int v43 = Get_GNSS_SV_Str(*(unsigned int *)(v10 + 4608));
      double result = (uint64_t)EvLog_v("GMCCMA: PR MAX ms:  %s  dT %d  d_ms %d (%d - %d)chips  Unc_ms %d  SF_Sync %d", v43, *v49 - *(_DWORD *)(v1 + v4), v37, v47, v48, v42, v46);
    }
LABEL_56:
    v4 += 48;
    v2 += 56;
    v6 += 4;
    v7 += 48;
    v8 += 48;
    v5 += 48;
    v3 += 36;
  }
  while (v3);
  return result;
}

uint64_t NK_SV_PR_LvsE_Check(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *(void *)&v56[2526] = *MEMORY[0x263EF8340];
  uint64_t v4 = a4 + 6755;
  unsigned int v5 = a4[6755];
  if (v5 >= 2 && *(_DWORD *)(a3 + 20) <= 3u && *(int *)(result + 68) >= 5)
  {
    unsigned int v9 = a4 + 36563;
    uint64_t v10 = a4 + 21659;
    bzero(v54, 0xA00uLL);
    for (uint64_t i = 0; i != 2560; i += 20)
    {
      int v12 = &v54[i];
      *(void *)int v12 = 0;
      *((void *)v12 + 1) = 0;
      *(_DWORD *)(v12 + 15) = 0;
    }
    uint64_t v13 = 0;
    LODWORD(v14) = 0;
    unsigned int v15 = 0;
    int v16 = (double *)(a3 + 1944);
    int v17 = (unsigned __int8 *)(a2 + 98);
    double result = 1000;
    do
    {
      if (a4[v13 + 7064])
      {
        if (a4[v13 + 57])
        {
          double v18 = *(double *)&a4[8 * v13 + 12056];
          if (fabs(v18) < 2000.0)
          {
            int v19 = &v54[20 * v14];
            *int v19 = v13;
            v19[1] = *v17 + 1000 * *(v17 - 2);
            if (v18 <= 0.0) {
              double v20 = -0.5;
            }
            else {
              double v20 = 0.5;
            }
            double v21 = v18 + v20;
            if (v21 <= 2147483650.0)
            {
              if (v21 >= -2147483650.0) {
                int v22 = (int)v21;
              }
              else {
                LOWORD(v22) = 0;
              }
            }
            else
            {
              LOWORD(v22) = -1;
            }
            BOOL v23 = &v54[20 * v14];
            v23[2] = v22;
            v23[3] = vcvtd_n_s64_f64(*v16, 0xCuLL);
            v23[4] = vcvtd_n_s64_f64(v16[640], 0xCuLL);
            LODWORD(v14) = v14 + 1;
            int v24 = *(__int16 *)&v54[20 * v14 + 4];
            if (v24 < 0) {
              int v24 = -v24;
            }
            if ((unsigned __int16)v24 < 0x64u) {
              ++v15;
            }
          }
        }
      }
      ++v13;
      v16 += 5;
      v17 += 4;
    }
    while (v13 != 128);
    if (v14 >= 2 && v15 >= v14 >> 1)
    {
      uint64_t v25 = 0;
      int v26 = v56;
      uint64_t v27 = 1;
      double result = 4096;
      uint64_t v14 = v14;
      do
      {
        uint64_t v28 = v25 + 1;
        if (v25 + 1 < (unint64_t)v14)
        {
          int v29 = (__int16 *)&v54[20 * v25];
          int v30 = v29 + 3;
          int v31 = v29 + 4;
          int v32 = v29 + 2;
          int v33 = (unsigned __int16)v29[1];
          int v34 = v29 + 7;
          int v35 = v29 + 5;
          int v36 = v26;
          uint64_t v37 = v27;
          do
          {
            if (v33 != (unsigned __int16)*(v36 - 6))
            {
              int v38 = *v30 - (__int16)*(v36 - 4);
              int v39 = *v31 - (__int16)*(v36 - 3);
              if (v39 > 12867) {
                v39 -= 25734;
              }
              if (v39 < -12866) {
                v39 += 25734;
              }
              if (v38 >= 0) {
                unsigned int v40 = *v30 - (__int16)*(v36 - 4);
              }
              else {
                unsigned int v40 = (__int16)*(v36 - 4) - *v30;
              }
              if (v39 >= 0) {
                unsigned int v41 = v39;
              }
              else {
                unsigned int v41 = -v39;
              }
              if (v40 <= 0x9C6 && v41 <= 0x9C6)
              {
                int v42 = (*v32 - (__int16)*(v36 - 5))
                    * ((int)((4096 - ((v39 / 2 * (v39 / 2)) >> 13))
                           * (4096 - ((v38 / 2 * (v38 / 2)) >> 13))) >> 12);
                *v34 += v42 >> 12;
                ++*v35;
                *v36 -= v42 >> 12;
                ++*(v36 - 2);
                uint64_t v43 = v25;
                if (v42 < -409600 || (uint64_t v43 = v37, v42 >= 413696)) {
                  ++*(_WORD *)&v54[20 * v43 + 12];
                }
              }
            }
            ++v37;
            v36 += 10;
          }
          while (v14 != v37);
        }
        ++v27;
        v26 += 20;
        ++v25;
      }
      while (v28 != v14);
      int v44 = 0;
      unsigned int v45 = v55;
      uint64_t v46 = v14;
      do
      {
        unsigned int v47 = *((unsigned __int16 *)v45 - 4);
        if (*((_WORD *)v45 - 4))
        {
          int v48 = *((__int16 *)v45 - 2) / (int)v47;
          *((_WORD *)v45 - 1) = v48;
          if (v47 < 2 * *((unsigned __int16 *)v45 - 3) || v47 >= 3 && v48 <= -61)
          {
            *unsigned int v45 = 1;
            ++v44;
          }
        }
        v45 += 20;
        --v46;
      }
      while (v46);
      if (v5 <= 2 * v44)
      {
        return (uint64_t)EvCrt_v("NK_SV_PR_Lvs_E_Check:  Warning:  Too many PR's look Late, %d out of %d, ignoring", v44, v5);
      }
      else
      {
        uint64_t v49 = v55;
        uint64_t v50 = a4 + 6752;
        uint64_t v51 = a4 + 21968;
        do
        {
          if (*((_WORD *)v49 - 4) && *v49)
          {
            uint64_t v52 = *((unsigned __int16 *)v49 - 9);
            v50[v52 + 312] = 0;
            *(_DWORD *)&v50[4 * v52 + 568] = 1;
            ++v4[1];
            *uint64_t v4 = --v5;
            if (v51[v52])
            {
              v51[v52] = 0;
              *(_DWORD *)&a4[4 * v52 + 22224] = 1;
              --*v10;
              ++v10[1];
            }
            double v53 = &a4[v52 + 36872];
            double result = *v53;
            if (*v53)
            {
              unsigned char *v53 = 0;
              *(_DWORD *)&a4[4 * v52 + 37128] = 1;
              --*v9;
              ++v9[1];
            }
          }
          v49 += 20;
          --v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t GLON_Calc_State_Table_Eph(__int16 a1, __int16 a2, int a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v9 = *(_DWORD *)(a4 + 12) / 900;
  if (*(_DWORD *)(a5 + 176) == 1 && *(_WORD *)(a5 + 166) == v9)
  {
    int v10 = *(_DWORD *)(a5 + 168);
  }
  else
  {
    *(_OWORD *)(a5 + 175) = 0u;
    *(_OWORD *)(a5 + 144) = 0u;
    *(_OWORD *)(a5 + 160) = 0u;
    *(_OWORD *)(a5 + 112) = 0u;
    *(_OWORD *)(a5 + 128) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(void *)a5 = *(void *)(a4 + 24);
    *(void *)(a5 + 8) = *(void *)(a4 + 48);
    *(void *)(a5 + 16) = *(void *)(a4 + 72);
    *(void *)(a5 + 24) = *(void *)(a4 + 32);
    *(void *)(a5 + 32) = *(void *)(a4 + 56);
    *(void *)(a5 + 40) = *(void *)(a4 + 80);
    *(void *)(a5 + 48) = *(void *)(a4 + 40);
    *(void *)(a5 + 56) = *(void *)(a4 + 64);
    *(void *)(a5 + 64) = *(void *)(a4 + 88);
    *(void *)(a5 + 80) = 0;
    *(void *)(a5 + 88) = 0;
    *(void *)(a5 + 72) = 0;
    int v10 = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a5 + 168) = v10;
    *(_WORD *)(a5 + 172) = *(_WORD *)(a4 + 126);
    *(_WORD *)(a5 + 166) = v9;
    *(_DWORD *)(a5 + 176) = 1;
    *(_DWORD *)(a5 + 180) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a5 + 184) = 2;
    *(unsigned char *)(a5 + 188) = *(unsigned char *)(a4 + 20);
    *(double *)(a5 + 112) = gloURA_table[*(unsigned __int8 *)(a4 + 125)];
  }
  __int16 v11 = 0;
  *(void *)int v26 = 0;
  double v27 = 0.0;
  v28[0] = (double *)a5;
  v28[1] = (double *)(a5 + 24);
  int v29 = (double *)(a5 + 48);
  int v30 = v10;
  double v25 = 0.0;
  do
  {
    int v12 = a3 - v30 + 86400;
    if (a3 - v30 >= -43200) {
      int v12 = a3 - v30;
    }
    if (a3 - v30 <= 43199) {
      int v13 = v12;
    }
    else {
      int v13 = a3 - v30 - 86400;
    }
    if (v13 <= -120) {
      int v13 = -120;
    }
    if (v13 >= 120) {
      int v14 = 120;
    }
    else {
      int v14 = v13;
    }
    *(void *)(a5 + 48) = *(void *)(a4 + 40);
    *(void *)(a5 + 56) = *(void *)(a4 + 64);
    *(void *)(a5 + 64) = *(void *)(a4 + 88);
    if (v14)
    {
      GLON_RungeKutta4(v28, v14);
      ++v11;
    }
    else
    {
      GLON_RK_CalcAccel(v28, v29);
    }
    if (v14 >= 0) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = -v14;
    }
  }
  while (v15 > 0x3C);
  *a6 += v11;
  *(_DWORD *)(a5 + 168) = a3;
  *(_WORD *)(a5 + 172) = a2;
  *(_WORD *)(a5 + 174) = a1;
  API_Get_UTC_Cor(1, &v27);
  uint64_t result = Glon_To_GPS_Time(*(__int16 *)(a5 + 174), *(__int16 *)(a5 + 172), (double)*(int *)(a5 + 168), v27, &v26[1], v26, &v25);
  *(_DWORD *)(a5 + 160) = (int)v25;
  *(_WORD *)(a5 + 164) = LOWORD(v26[0]) + (LOWORD(v26[1]) << 10);
  int v17 = a3 - *(_DWORD *)(a4 + 12);
  int v18 = v17 + 86400;
  if (v17 >= -43200) {
    int v18 = a3 - *(_DWORD *)(a4 + 12);
  }
  if (v17 <= 43199) {
    int v19 = v18;
  }
  else {
    int v19 = v17 - 86400;
  }
  double v20 = *(double *)(a4 + 104);
  *(double *)(a5 + 96) = -(*(double *)(a4 + 96) + v20 * (double)v19);
  if (v19 < 0) {
    int v19 = -v19;
  }
  if (v19 >= 0x385)
  {
    double v21 = (double)v19 * 0.000277777778 * ((double)v19 * 0.000277777778 * ((double)v19 * 0.000277777778)) * 7.33333333
        + (double)v19 * 0.000277777778 * ((double)v19 * 0.000277777778) * -2.0;
    *(double *)(a5 + 112) = gloURA_table[*(unsigned __int8 *)(a4 + 125)] + v21 * v21;
  }
  *(double *)(a5 + 104) = v20;
  return result;
}

uint64_t NK_Set_TOW_Status(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (double *)(a2 + 61440);
  if (!*(unsigned char *)(a2 + 59984)
    || (double v3 = *(double *)(a2 + 60024), v3 > 900.0)
    || *(_DWORD *)(result + 27136)
    || *(unsigned char *)(a2 + 6755)
    || !*(unsigned char *)(result + 136))
  {
    double v4 = *v2;
    if (*v2 >= *(double *)(a2 + 61448)) {
      double v4 = *(double *)(a2 + 61448);
    }
    double v5 = *(double *)(a2 + 61456);
    if (v4 < v5) {
      double v5 = v4;
    }
    int v6 = *(_DWORD *)(result + 27136);
    if (v6 || (double v7 = 0.0, *(int *)(a2 + 20) >= 9)) {
      double v7 = v5 * 1.11265006e-17;
    }
    if (!*(unsigned char *)(a2 + 24)) {
      double v7 = v7 + *(double *)(a2 + 61480) * 0.000001;
    }
    double v8 = sqrt(v7);
    if (v8 <= 200.0)
    {
      double v11 = v8 * 1000000.0;
      double v12 = -0.5;
      if (v11 > 0.0) {
        double v12 = 0.5;
      }
      double v13 = v11 + v12;
      if (v13 <= 2147483650.0)
      {
        if (v13 >= -2147483650.0) {
          int v10 = (int)v13;
        }
        else {
          int v10 = 0x80000000;
        }
      }
      else
      {
        int v10 = 0x7FFFFFFF;
      }
      unsigned __int8 v14 = 11;
      while (g_TOW_Stat_Upgrade_us_Sigma_Table[v14] < v10)
      {
        if (--v14 <= 1u)
        {
          int v9 = 1;
          goto LABEL_28;
        }
      }
      int v9 = v14;
    }
    else
    {
      int v9 = 0;
      int v10 = 0x7FFFFFFF;
    }
LABEL_28:
    int v15 = *(_DWORD *)(a2 + 20);
    if (v15 < v9)
    {
      if (*(unsigned char *)(a2 + 60056)) {
        BOOL v16 = *(double *)(a2 + 60096) < 900000000.0;
      }
      else {
        BOOL v16 = 0;
      }
      if (v9 == 11)
      {
        if (*(unsigned char *)(result + 136) || (*(double *)(a2 + 62008) <= 30000.0 ? (char v17 = 1) : (char v17 = v16), (v17 & 1) == 0)) {
          int v9 = 9;
        }
        else {
          int v9 = 11;
        }
      }
      *(_DWORD *)(a2 + 20) = v9;
      int v15 = v9;
    }
    if (v6 && !*(unsigned char *)(result + 136))
    {
      uint64_t v18 = 1;
      while (g_TOW_Stat_Degrade_us_Sigma_Table[v18] >= v10)
      {
        if (++v18 == 12)
        {
          LODWORD(v18) = 0;
          break;
        }
      }
      if (v15 != 11 || v10 <= 1700) {
        int v20 = 11;
      }
      else {
        int v20 = 10;
      }
      if (v10 < 3001) {
        LODWORD(v18) = v20;
      }
      if (v15 > (int)v18)
      {
        *(_DWORD *)(a2 + 20) = v18;
        int v15 = v18;
      }
    }
  }
  else
  {
    *(_WORD *)(a2 + 1542) = *(_WORD *)(a2 + 59966);
    double v21 = *(double *)(a2 + 59968);
    double v22 = -0.5;
    if (v21 * 1000.0 > 0.0) {
      double v22 = 0.5;
    }
    double v23 = v21 * 1000.0 + v22;
    if (v23 <= 2147483650.0)
    {
      if (v23 >= -2147483650.0) {
        double v24 = (double)(int)v23 * 0.001;
      }
      else {
        double v24 = -2147483.65;
      }
    }
    else
    {
      double v24 = 2147483.65;
    }
    *(double *)(a2 + 1528) = v24;
    if (*(unsigned char *)(a2 + 60056))
    {
      *(double *)(a2 + 1632) = v24 - v21;
      *(double *)(a2 + 61944) = fmin(sqrt(*(double *)(a2 + 60096)), 9999000.0);
    }
    *(double *)(a2 + 61952) = fmin(sqrt(v3) * 299792.458, 9999000.0);
    if (v3 <= 0.0225)
    {
      int v15 = 11;
    }
    else if (v3 <= 0.5625)
    {
      int v15 = 10;
    }
    else if (v3 <= 9.0)
    {
      int v15 = 9;
    }
    else if (v3 <= 100.0)
    {
      int v15 = 8;
    }
    else
    {
      int v15 = 7;
    }
    *(_DWORD *)(a2 + 20) = v15;
  }
  *(_DWORD *)(a2 + 1536) = v15;
  return result;
}

char *NK_Bit_Sync_Check(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 241) && *(_DWORD *)(a3 + 20) == 11 && *(double *)(a3 + 62008) < 149896.229)
  {
    int v6 = result;
    uint64_t v7 = 0;
    double v8 = (unsigned char *)(a3 + 6755);
    uint64_t v18 = result + 1760;
    uint64_t v9 = a4 + 576;
    uint64_t v10 = a2 + 14208;
    uint64_t v11 = a3 + 7064;
    uint64_t v12 = a3 + 12056;
    do
    {
      if (*(unsigned char *)(v11 + v7)
        && (~*(unsigned __int16 *)&v6[2 * v7 + 992] & 0x300) == 0
        && fabs(*(double *)(v12 + 8 * v7)) > 149896.229
        && *(unsigned char *)(a3 + v7 + 57))
      {
        *(unsigned char *)(v11 + v7) = 0;
        *(_DWORD *)(v11 + 4 * v7 + 256) = 13;
        --*v8;
        ++*(unsigned char *)(a3 + 6756);
        *(unsigned char *)(v10 + v7) = 0;
        *(unsigned char *)(a4 + v7 + 448) = 11;
        *(_DWORD *)(v9 + 4 * v7) = *(_DWORD *)a3;
        GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)&v6[4 * v7 + 96]);
        double v14 = *(double *)(v12 + 8 * v7);
        if (v14 <= 0.0) {
          double v15 = -0.5;
        }
        else {
          double v15 = 0.5;
        }
        double v16 = v14 + v15;
        if (v16 <= 2147483650.0)
        {
          if (v16 >= -2147483650.0) {
            int v17 = (int)v16;
          }
          else {
            int v17 = 0x80000000;
          }
        }
        else
        {
          int v17 = 0x7FFFFFFF;
        }
        uint64_t result = EvCrt_v("ChanReset %d : NKBSC  %s  Exact_SF_Sync   PR_Res %d  SNR %d", v7, GNSS_SV_Str, v17, v18[v7]);
      }
      ++v7;
    }
    while (v7 != 128);
  }
  return result;
}

void NK_Comp_ith_PR_Res(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  v88[1] = *(double *)MEMORY[0x263EF8340];
  double v21 = (unsigned char *)(a7 + 6753);
  uint64_t v22 = a1;
  uint64_t v23 = a5 + 4 * a1;
  int v26 = *(unsigned __int8 *)(v23 + 96);
  double v25 = (unsigned int *)(v23 + 96);
  int v24 = v26;
  double v27 = (double *)(a7 + 1632);
  if (v26 == 2) {
    double v27 = (double *)(a7 + 1640);
  }
  if (v24 == 4) {
    uint64_t v28 = (double *)(a7 + 1648);
  }
  else {
    uint64_t v28 = v27;
  }
  double v29 = *v28;
  unsigned int v30 = *((unsigned __int8 *)v25 + 1);
  BOOL v31 = v30 > 0xF;
  int v32 = (1 << v30) & 0xDD77;
  if (v31 || v32 == 0) {
    double v29 = v29 + *(double *)(a7 + 1656);
  }
  double v34 = a8 + (v29 - *(double *)(a3 + 56)) * 299792458.0;
  int v35 = (double *)(a7 + 8 * a1);
  int v36 = v35 + 6449;
  v35[6449] = v34;
  double v37 = *(double *)(a3 + 72);
  int v38 = v35 + 1379;
  v35[1379] = v37;
  if (*v21)
  {
    double v39 = 0.0;
    double v40 = 0.01;
  }
  else
  {
    double v41 = *(double *)(a6 + 1712);
    double v40 = 0.0;
    double v39 = 0.0;
    if (v41 > 0.0)
    {
      int v42 = *(_DWORD *)(a6 + 1704);
      if (v42 == 2)
      {
        uint64_t v86 = a6;
        uint64_t v50 = a4;
        double v51 = Trop_Elev_MapF(a4);
        a4 = v50;
        a6 = v86;
        double v39 = v41 * v51;
        double v40 = v41 * v51 * 0.15;
      }
      else if (v42 == 1)
      {
        double v43 = *(double *)(a4 + 32);
        uint64_t v85 = a6;
        if (v43 <= 4.0)
        {
          v88[0] = 0.0;
          uint64_t v52 = a4;
          BOOL v53 = R8_EQ((const double *)(a4 + 16), v88);
          uint64_t v48 = v52;
          double v54 = 1.0;
          if (!v53) {
            double v54 = 1.001 / sqrt(*(double *)(v52 + 8) * *(double *)(v52 + 8) + 0.002001);
          }
          double v39 = v41 * v54;
        }
        else
        {
          double v44 = *(double *)(a6 + 1720);
          unsigned int v83 = (Trop_Niell_MappingFunc *)(a6 + 1848);
          uint64_t v84 = a4;
          Trop_Niell_MappingFunc::Get_Dry_MappingFunc_OF((Trop_Niell_MappingFunc *)(a6 + 1848), v43, a9, a10, a2);
          double v46 = v44 * v45;
          double v47 = *(double *)(v85 + 1728);
          Trop_Niell_MappingFunc::Get_Wet_MappingFunc_OF(v83, *(double *)(v84 + 32), a10, a2);
          uint64_t v48 = v84;
          double v39 = v46 + v47 * v49;
        }
        v88[0] = 0.0;
        uint64_t v55 = v48;
        if (R8_EQ((const double *)(v48 + 16), v88)) {
          double v40 = 0.12;
        }
        else {
          double v40 = 1.001 / sqrt(*(double *)(v55 + 8) * *(double *)(v55 + 8) + 0.002001) * 0.12;
        }
        a6 = v85;
        a4 = v55;
      }
      double v34 = v39 + *v36;
      *int v36 = v34;
      double v37 = *v38;
    }
  }
  double v56 = v37 + v40 * v40;
  *int v38 = v56;
  v35[9684] = v39;
  uint64_t v57 = a7 + v22;
  *(unsigned char *)(a7 + v22 + 6936) = 1;
  ++v21[1];
  if (*(unsigned char *)(a7 + v22 + 6808))
  {
    double v58 = v34 - *(double *)(a5 + 8 * v22 + 3424);
    uint64_t v59 = a7 + 6752 + 8 * v22;
    unsigned int v60 = (double *)(v59 + 5304);
    *(double *)(v59 + 5304) = v58;
    double v61 = *(double *)(a7 + 6752 + 24 * v22 + 1208)
        + *(double *)(a7 + 6752 + 24 * v22 + 1216);
    uint64_t v62 = (double *)(v59 + 10680);
    if (*(unsigned char *)(v57 + 2400))
    {
      uint64_t v63 = a7 + 8 * v22;
      double v64 = v58 - *(double *)(v63 + 2656);
      double v65 = v61 + *(double *)(v63 + 3680);
    }
    else
    {
      double v66 = v56 + a12;
      *int v38 = v66;
      double v65 = v66 + v61;
      double v64 = v58 + a11;
    }
    double *v62 = v65;
    double *v60 = v64;
    if (*(_DWORD *)(a3 + 120) == 1)
    {
      *(unsigned char *)(a7 + v22 + 63904) = 1;
      double v67 = -(a11 - *(double *)(a3 + 56) * 299792458.0);
      uint64_t v68 = a7 + 8 * v22;
      *(double *)(v68 + 74400) = v67;
      double v69 = 0.0;
      if (*(double *)(a6 + 1712) > 0.0) {
        double v69 = v39;
      }
      *(double *)(v68 + 74400) = v67 - v69 + a13;
    }
    if (fabs(v64) < 600000000.0 && v65 < 600000000.0)
    {
      *(unsigned char *)(a7 + v22 + 7064) = 1;
      ++v21[2];
    }
    uint64_t v70 = a7 + 8 * v22;
    *(double *)(v70 + 14104) = v64;
    *(double *)(v70 + 13080) = v64;
  }
  char v71 = (unsigned char *)(v57 + 52616);
  if (!*v71)
  {
    uint64_t v72 = a6 + 8 * v22;
    double v73 = *(double *)(v72 + 18056);
    double v74 = a11 - *(double *)(v72 + 19080);
    if (vabdd_f64(v39, v73) > 0.03)
    {
      double v75 = v39 - v73;
      *char v71 = 1;
      uint64_t v76 = a6;
      int v77 = (_DWORD *)a4;
      GNSS_SV_Str = Get_GNSS_SV_Str(*v25);
      EvLog_v("NK_Comp_ith_PR_Res:  Tropo Delay Model Step, DR_Res inhibited:  %d  %s  El %d  dTropo  %f(%f - %f)", a1, GNSS_SV_Str, *v77, v75, v39, *(double *)(v72 + 18056));
      a4 = (uint64_t)v77;
      a6 = v76;
    }
    if (fabs(v74) > 0.03)
    {
      uint64_t v79 = a6;
      uint64_t v80 = (_DWORD *)a4;
      double v81 = Get_GNSS_SV_Str(*v25);
      EvLog_v("NK_Comp_ith_PR_Res:  Iono Delay Model Step:  %d  %s  El %d  dIono %f(%f - %f)", a1, v81, *v80, v74, a11, *(double *)(v72 + 19080));
      a6 = v79;
    }
  }
  uint64_t v82 = a6 + 8 * v22;
  *(double *)(v82 + 18056) = v39;
  *(double *)(v82 + 19080) = a11;
}

uint64_t Decode_GPS_AS_SV_Config_Subframe(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = 0;
  *a2 = (unsigned __int16)*(_DWORD *)(result + 8) >> 12;
  a2[1] = *(unsigned char *)(result + 9) & 0xF;
  a2[2] = *(unsigned char *)(result + 8) >> 4;
  a2[3] = *(unsigned char *)(result + 8) & 0xF;
  uint64_t v3 = result + 12;
  double v4 = a2 + 9;
  do
  {
    *(v4 - 5) = (*(_DWORD *)(v3 + v2) >> 20) & 0xF;
    *(v4 - 4) = *(unsigned char *)(v3 + v2 + 2) & 0xF;
    *(v4 - 3) = (unsigned __int16)*(_DWORD *)(v3 + v2) >> 12;
    *(v4 - 2) = *(unsigned char *)(v3 + v2 + 1) & 0xF;
    *(v4 - 1) = *(unsigned char *)(v3 + v2) >> 4;
    *double v4 = *(unsigned char *)(v3 + v2) & 0xF;
    v4 += 6;
    v2 += 4;
  }
  while (v2 != 16);
  a2[28] = (*(_DWORD *)(result + 28) >> 20) & 0xF;
  a2[29] = *(unsigned char *)(result + 30) & 0xF;
  a2[30] = (unsigned __int16)*(_DWORD *)(result + 28) >> 12;
  a2[31] = *(unsigned char *)(result + 29) & 0xF;
  return result;
}

uint64_t GN_AGLON_Set_Eph(unsigned int a1, uint64_t a2)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Eph")) {
    return 0;
  }
  EvLog_d("GN_AGLON_Set_Eph: ", a1);
  if (a1 - 25 <= 0xFFFFFFE7)
  {
    EvCrt_v("GN_AGLON_Set_Eph: FAILED: SV = %d <%d or >%d, Out of range!", a1, 1, 24);
    return 0;
  }
  uint64_t v5 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v5 + 16) && *(int *)v5 >= 3) {
    int v6 = (int)*(double *)(v5 + 40) + 604800 * *(__int16 *)(v5 + 32);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = p_NA;
  uint64_t v8 = a1 - 1;
  uint64_t v9 = p_NA + (v8 << 6) + 24272;
  if (*(unsigned char *)(a2 + 56)) {
    int v10 = 5;
  }
  else {
    int v10 = 3;
  }
  *(_DWORD *)uint64_t v9 = v6;
  *(_DWORD *)(v9 + 4) = v10;
  int v11 = *(char *)(a2 + 4);
  if ((*(unsigned char *)(a2 + 4) - 7) < 0xF2u) {
    int v11 = 2139062143;
  }
  *(_DWORD *)(v9 + 8) = v11;
  long long v12 = *(_OWORD *)(a2 + 8);
  long long v13 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v9 + 44) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v9 + 28) = v13;
  *(_OWORD *)(v9 + 12) = v12;
  *(_WORD *)(v9 + 60) = 4095;
  if (*(unsigned char *)(a2 + 56)) {
    int v14 = 5;
  }
  else {
    int v14 = 3;
  }
  *(_DWORD *)(v9 + 4) = v14;
  uint64_t v4 = 1;
  *(unsigned char *)(v7 + v8 + 96) = 1;
  Debug_Log_GLO_Eph(1, a1, v9);
  return v4;
}

uint64_t GN_AGLON_Set_Alm(unsigned int a1, uint64_t a2)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Alm")) {
    return 0;
  }
  EvLog_d("GN_AGLON_Set_Alm: ", a1);
  if (a1 - 25 <= 0xFFFFFFE7)
  {
    EvCrt_v("GN_AGLON_Set_Alm: FAILED: SV = %d <%d or >%d, Out of range!", a1, 1, 24);
    return 0;
  }
  uint64_t v5 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v5 + 16) && *(int *)v5 >= 3) {
    int v6 = (int)*(double *)(v5 + 40) + 604800 * *(__int16 *)(v5 + 32);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = p_NA;
  uint64_t v8 = a1 - 1;
  uint64_t v9 = p_NA + 36 * v8 + 25808;
  *(_WORD *)(p_NA + 36 * v8 + 25816) = *(_WORD *)(a2 + 4);
  if (*(unsigned char *)(a2 + 32)) {
    int v10 = 5;
  }
  else {
    int v10 = 3;
  }
  *(_DWORD *)uint64_t v9 = v6;
  *(_DWORD *)(v9 + 4) = v10;
  long long v11 = *(_OWORD *)(a2 + 8);
  *(void *)(v9 + 28) = *(void *)(a2 + 24);
  *(_OWORD *)(v9 + 12) = v11;
  uint64_t v4 = 1;
  *(unsigned char *)(v7 + v8 + 120) = 1;
  Debug_Log_GLO_Alm(1, a1, v9);
  return v4;
}

uint64_t GN_AGLON_Set_Chan_Num(unsigned int a1, signed int a2)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Chan_Num")) {
    return 0;
  }
  EvLog_nd("GN_AGLON_Set_Chan_Num: ", 2, v4, a1, a2);
  if ((a1 - 25) <= 0xE7u)
  {
    EvCrt_v("GN_AGLON_Set_Chan_Num: FAILED: SV = %d <%d or >%d, Out of range!");
    return 0;
  }
  if ((a2 - 7) <= 0xF1u)
  {
    EvCrt_v("GN_AGLON_Set_Chan_Num: FAILED: gloChanNuuint64_t m = %d <-7 or >+6, Out of range!");
    return 0;
  }
  *(_DWORD *)(*(void *)(p_api + 56) + 4 * (a1 - 1) + 17328) = a2;
  uint64_t v7 = p_NA;
  uint64_t v8 = a1 - 1;
  *(_DWORD *)(p_NA + (v8 << 6) + 24280) = a2;
  if (!*(unsigned char *)(v7 + 145))
  {
    *(void *)(v7 + 26708) = 0x7F7F7F7F7F7F7F7FLL;
    *(void *)(v7 + 26716) = 0x7F7F7F7F7F7F7F7FLL;
    *(void *)(v7 + 26700) = 0x7F7F7F7F7F7F7F7FLL;
  }
  uint64_t v5 = 1;
  *(unsigned char *)(v7 + 145) = 1;
  *(unsigned char *)(v7 + v8 + 26700) = a2;
  Debug_Log_AGLON_ChanNum(a1, a2);
  return v5;
}

uint64_t GN_AGLON_Set_Clk1(unsigned __int16 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGLON_Set_Clk1")) {
    return 0;
  }
  uint64_t v3 = *a1;
  if ((v3 - 1462) <= 0xFFFFFA4A)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloNA = %d <1 or >%d, Out of range!");
    return 0;
  }
  uint64_t v4 = *((unsigned int *)a1 + 1);
  if ((v4 - 645) <= 0xFFFFFAF6)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloTauC = %d <-644 or >644, Unrealistic value!");
    return 0;
  }
  uint64_t v5 = *((unsigned __int8 *)a1 + 8);
  if (v5 >= 0x20)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloN4 = %d >31, Out of range!");
    return 0;
  }
  uint64_t v6 = *((unsigned int *)a1 + 3);
  if ((v6 - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloTauGPS = %d <-2^21 or >2^21, Out of range!");
    return 0;
  }
  if ((v6 - 323) <= 0xFFFFFD7A)
  {
    EvCrt_v("GN_AGLON_Set_Clk1: FAILED: gloTauGPS = %d <-322 or >322, Unrealistic value!");
    return 0;
  }
  uint64_t v9 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v9 + 16) && *(int *)v9 >= 3) {
    int v10 = (int)*(double *)(v9 + 40) + 604800 * *(__int16 *)(v9 + 32);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = p_NA;
  uint64_t v12 = *((unsigned __int8 *)a1 + 17);
  if (*((unsigned char *)a1 + 17)) {
    int v13 = 5;
  }
  else {
    int v13 = 3;
  }
  *(_WORD *)(p_NA + 26680) = v3;
  *(_DWORD *)(v11 + 26684) = v4;
  *(unsigned char *)(v11 + 26688) = v5;
  *(_DWORD *)(v11 + 26692) = v6;
  uint64_t v14 = *((unsigned __int8 *)a1 + 16);
  *(unsigned char *)(v11 + 26696) = v14;
  *(_DWORD *)(v11 + 26672) = v10;
  *(_DWORD *)(v11 + 26676) = v13;
  uint64_t v7 = 1;
  *(unsigned char *)(v11 + 144) = 1;
  EvLog_nd("GN_AGLON_Set_Clk1: ", 6, v2, v3, v4, v5, v6, v14, v12);
  return v7;
}

void *NK_SV_Meas_IVar(void *result, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double a6)
{
  uint64_t v11 = result;
  uint64_t v12 = 0;
  v24[13] = *(double *)MEMORY[0x263EF8340];
  int v13 = a4 - 1;
  do
  {
    if (*(unsigned char *)(a5 + v12 + 312))
    {
      uint64_t result = NK_Obs_Equ_SV(v11, *(unsigned __int8 *)(a5 + v12 + 440), *(_DWORD *)(a2 + 4 * v12), a3 + 56 * v12, (uint64_t)v24, a6);
      double v14 = *(double *)(a5 + 8 * v12 + 10680) + *a4 * v24[0] * v24[0];
      uint64_t v15 = 1;
      int v16 = 2;
      uint64_t v17 = 2;
      unsigned int v18 = 1;
      do
      {
        double v19 = v24[v17 - 1];
        int v20 = v24;
        unsigned int v21 = v16;
        uint64_t v22 = v15;
        do
        {
          double v23 = *v20++;
          double v19 = v19 + v23 * v13[v21++];
          --v22;
        }
        while (v22);
        v18 += v17;
        double v14 = v14 + v19 * v19 * v13[v18];
        v16 += v17;
        ++v15;
        ++v17;
      }
      while (v17 != 13);
      if (v14 < 0.0) {
        double v14 = -v14;
      }
      *(double *)(a5 + 8 * v12 + 11704) = v14;
    }
    ++v12;
  }
  while (v12 != 128);
  return result;
}

void *sprintf_1u(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf1da(a1, a2, v3, 0, 0);
  }

  return sprintf_10u(a1, a2);
}

char **sprintf_1X(char **a1, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v4 = HIDWORD(a2);
  if (v4)
  {
    sprintf_1x(a1, v4);
    v6[0] = hexTABLE[a2 >> 28];
    v6[1] = hexTABLE[(a2 >> 24) & 0xF];
    return (char **)hex6((uint64_t)a1, a2, v6, 2);
  }
  else
  {
    return sprintf_1x(a1, a2);
  }
}

void *sprintf_1U(void *a1, unint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 / 0x3B9ACA00))
  {
    unsigned int v3 = a2 % 0x3B9ACA00;
    sprintf_1u(a1, a2 / 0x3B9ACA00);
    return (void *)digit10((uint64_t)a1, v3, v5, 0, 0);
  }
  else
  {
    return sprintf_1u(a1, a2);
  }
}

void *sprintf_10U(void *a1, unint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 / 0x3B9ACA00))
  {
    unsigned int v3 = a2 % 0x3B9ACA00;
    sprintf_1u(a1, a2 / 0x3B9ACA00);
    return (void *)digit10((uint64_t)a1, v3, v5, 0, 0);
  }
  else
  {
    return sprintf_10u(a1, a2);
  }
}

void *sprintf_19U(char **a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 / 0x3B9ACA00;
  if ((a2 / 0x3B9ACA00))
  {
    sprintf_10u(a1, a2 / 0x3B9ACA00);
    return (void *)sprintf_09d((uint64_t)a1, v2 - 1000000000 * (int)v4);
  }
  else
  {
    uint64_t v6 = *a1;
    char v7 = 32;
    uint64_t v8 = 1u;
    do
    {
      *a1 = v6 + 1;
      char *v6 = v7;
      uint64_t v6 = *a1;
      if (*a1 >= a1[3])
      {
        uint64_t v6 = a1[2];
        *a1 = v6;
      }
      char v7 = str_28[v8++];
    }
    while (v8 != 10);
    return sprintf_10u(a1, a2);
  }
}

void *sprintf_1D(void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = (int)a2 / 1000000000;
  if ((int)a2 / 1000000000)
  {
    if (a2 >= 0) {
      unint64_t v4 = a2;
    }
    else {
      unint64_t v4 = -a2;
    }
    if (v3 >= 0) {
      unsigned int v5 = (int)a2 / 1000000000;
    }
    else {
      unsigned int v5 = (int)a2 / -1000000000;
    }
    sprintf1da(a1, v5, v8, 0, v3 >> 31);
    return (void *)sprintf_09d((uint64_t)a1, v4 % 0x3B9ACA00);
  }
  else
  {
    if ((int)a2 >= 0) {
      unsigned int v7 = a2;
    }
    else {
      unsigned int v7 = -(int)a2;
    }
    return sprintf1da(a1, v7, v8, 0, ((unint64_t)a2 >> 31) & 1);
  }
}

void *sprintf_10D(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v3 = (int)a2 / 1000000000;
  if ((int)a2 / 1000000000)
  {
    if (a2 >= 0) {
      unint64_t v4 = a2;
    }
    else {
      unint64_t v4 = -a2;
    }
    if (v3 >= 0) {
      unsigned int v5 = (int)a2 / 1000000000;
    }
    else {
      unsigned int v5 = (int)a2 / -1000000000;
    }
    sprintf1da(a1, v5, v7, 0, v3 >> 31);
    return (void *)sprintf_09d((uint64_t)a1, v4 % 0x3B9ACA00);
  }
  else
  {
    return sprintf_10d(a1, a2);
  }
}

void *sprintf_11D(void *a1, uint64_t a2)
{
  if ((int)a2 / 1000000000)
  {
    if (a2 >= 0) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = -a2;
    }
    sprintf_2d(a1, (int)a2 / 1000000000);
    return (void *)sprintf_09d((uint64_t)a1, v3 % 0x3B9ACA00);
  }
  else
  {
    if ((int)a2 >= -999999999)
    {
      unsigned int v5 = (unsigned char *)(*a1)++;
      *unsigned int v5 = 32;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
    }
    return sprintf_10d(a1, a2);
  }
}

void *sprintf_sp1d(void *a1, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = (unsigned char *)(*a1)++;
  unsigned char *v2 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (a2 >= 0) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = -a2;
  }
  return sprintf1da(a1, v3, v5, 0, a2 >> 31);
}

void *sprintf_sp11d(void *a1, unsigned int a2)
{
  int v2 = (unsigned char *)(*a1)++;
  unsigned char *v2 = 32;
  unsigned int v3 = (unsigned char *)*a1;
  if (*a1 >= a1[3])
  {
    unsigned int v3 = (unsigned char *)a1[2];
    *a1 = v3;
  }
  if ((int)a2 >= -999999999)
  {
    *a1 = v3 + 1;
    unsigned char *v3 = 32;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
  }

  return sprintf_10d(a1, a2);
}

void *sprintf_sp1u(void *a1, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v2 = (unsigned char *)(*a1)++;
  unsigned char *v2 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if ((a2 & 0x80000000) == 0) {
    return sprintf1da(a1, a2, v4, 0, 0);
  }

  return sprintf_1u(a1, a2);
}

void *sprintf_sp10U(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)(*a1)++;
  unsigned char *v2 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (a2 < 0)
  {
    return sprintf_10U(a1, a2);
  }
  else
  {
    return sprintf_10D(a1, a2);
  }
}

uint64_t sprintf_11f9(void *a1, double a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (fabs(a2) >= 1.0)
  {
    double v7 = dbl_263D828D0[a2 < 0.0] + a2;
    int v8 = (int)v7;
    double v9 = v7 - (double)(int)v7;
    if (v9 >= 0.0) {
      double v10 = v9;
    }
    else {
      double v10 = -v9;
    }
    if (v8 >= 0) {
      unsigned int v11 = v8;
    }
    else {
      unsigned int v11 = -v8;
    }
    sprintf1da(a1, v11, v16, 0, v8 >> 31);
    uint64_t v12 = (unsigned char *)(*a1)++;
    *uint64_t v12 = 46;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    double v13 = v10 * 1000000000.0;
    if (v10 * 1000000000.0 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v14 = (int)v13;
      }
      else {
        unsigned int v14 = 0x80000000;
      }
    }
    else
    {
      unsigned int v14 = 0x7FFFFFFF;
    }
    return sprintf_09d((uint64_t)a1, v14);
  }
  else
  {
    double v3 = a2 * 1000000000.0;
    double v4 = -0.5;
    if (v3 > 0.0) {
      double v4 = 0.5;
    }
    double v5 = v3 + v4;
    if (v5 <= 2147483650.0)
    {
      if (v5 >= -2147483650.0) {
        unsigned int v6 = (int)v5;
      }
      else {
        unsigned int v6 = 0x80000000;
      }
    }
    else
    {
      unsigned int v6 = 0x7FFFFFFF;
    }
    return sprintf_10f9((uint64_t)a1, v6);
  }
}

uint64_t sprintf_12f3(char **a1, double a2)
{
  if (fabs(a2) >= 100000.0)
  {
    double v10 = dbl_263D828E0[a2 < 0.0] + a2;
    unsigned int v11 = (int)v10;
    double v12 = v10 - (double)(int)v10;
    if (v12 >= 0.0) {
      double v13 = v12;
    }
    else {
      double v13 = -v12;
    }
    sprintf_8d(a1, v11);
    unsigned int v14 = (*a1)++;
    *unsigned int v14 = 46;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    double v15 = v13 * 1000.0;
    if (v13 * 1000.0 <= 2147483650.0)
    {
      if (v15 >= -2147483650.0) {
        unsigned int v16 = (int)v15;
      }
      else {
        unsigned int v16 = 0x80000000;
      }
    }
    else
    {
      unsigned int v16 = 0x7FFFFFFF;
    }
    return sprintf_03d((uint64_t)a1, v16);
  }
  else
  {
    uint64_t v3 = 0;
    double v4 = *a1;
    char v5 = 32;
    do
    {
      *a1 = v4 + 1;
      *double v4 = v5;
      double v4 = *a1;
      if (*a1 >= a1[3])
      {
        double v4 = a1[2];
        *a1 = v4;
      }
      char v5 = str_1_21[++v3];
    }
    while (v3 != 2);
    double v6 = a2 * 1000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        unsigned int v9 = (int)v8;
      }
      else {
        unsigned int v9 = 0x80000000;
      }
    }
    else
    {
      unsigned int v9 = 0x7FFFFFFF;
    }
    return sprintf_9f((uint64_t)a1, v9, 4);
  }
}

uint64_t sprintf_14f3(char **a1, double a2)
{
  if (fabs(a2) >= 100000.0)
  {
    double v10 = dbl_263D828E0[a2 < 0.0] + a2;
    unsigned int v11 = (int)v10;
    double v12 = v10 - (double)(int)v10;
    if (v12 >= 0.0) {
      double v13 = v12;
    }
    else {
      double v13 = -v12;
    }
    sprintf_10d(a1, v11);
    unsigned int v14 = (*a1)++;
    *unsigned int v14 = 46;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    double v15 = v13 * 1000.0;
    if (v13 * 1000.0 <= 2147483650.0)
    {
      if (v15 >= -2147483650.0) {
        unsigned int v16 = (int)v15;
      }
      else {
        unsigned int v16 = 0x80000000;
      }
    }
    else
    {
      unsigned int v16 = 0x7FFFFFFF;
    }
    return sprintf_03d((uint64_t)a1, v16);
  }
  else
  {
    uint64_t v3 = 0;
    double v4 = *a1;
    char v5 = 32;
    do
    {
      *a1 = v4 + 1;
      *double v4 = v5;
      double v4 = *a1;
      if (*a1 >= a1[3])
      {
        double v4 = a1[2];
        *a1 = v4;
      }
      char v5 = str_3_9[++v3];
    }
    while (v3 != 4);
    double v6 = a2 * 1000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        unsigned int v9 = (int)v8;
      }
      else {
        unsigned int v9 = 0x80000000;
      }
    }
    else
    {
      unsigned int v9 = 0x7FFFFFFF;
    }
    return sprintf_9f((uint64_t)a1, v9, 4);
  }
}

uint64_t sprintf_p(uint64_t result, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(char **)result;
  char v4 = 48;
  do
  {
    *(void *)uint64_t result = v3 + 1;
    char *v3 = v4;
    uint64_t v3 = *(char **)result;
    if (*(void *)result >= *(void *)(result + 24))
    {
      uint64_t v3 = *(char **)(result + 16);
      *(void *)uint64_t result = v3;
    }
    char v4 = str_7_9[++v2];
  }
  while (v2 != 2);
  for (uint64_t i = 15; i != -1; --i)
  {
    v10[i - 1] = __const__Z9sprintf_pP10Cyc_bufferPKv_dec2HexChar[a2 & 0xF];
    a2 >>= 4;
  }
  v10[15] = 0;
  char v6 = v9;
  if (v9)
  {
    double v7 = v10;
    do
    {
      *(void *)uint64_t result = v3 + 1;
      char *v3 = v6;
      uint64_t v3 = *(char **)result;
      if (*(void *)result >= *(void *)(result + 24))
      {
        uint64_t v3 = *(char **)(result + 16);
        *(void *)uint64_t result = v3;
      }
      int v8 = *v7++;
      char v6 = v8;
    }
    while (v8);
  }
  return result;
}

unint64_t Get_PETestMode(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  unint64_t v0 = ((unint64_t)Ga05_GetDebugFeaturesBitmask() >> 42) & 0x3F;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TestMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "OSA", 73, "Get_PETestMode", v0);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return v0;
}

unint64_t Get_TestConfigurationSleepTimeoutSeconds(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  unint64_t v0 = ((unint64_t)Ga05_GetDebugFeaturesBitmask() >> 32) & 0x3FF;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SleepTO (gpsd),%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "OSA", 73, "Get_TestConfigurationSleepTimeoutSeconds", v0);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return v0;
}

double Horiz_Diff_Sqd(double *a1, const double *a2)
{
  double v4 = *a1;
  __double2 v5 = __sincos_stret(*a1);
  double v6 = 1.0 / sqrt(v5.__sinval * v5.__sinval * -0.00669437999 + 1.0);
  double v7 = a1[2];
  double v8 = v5.__cosval * (v7 + v6 * 6378137.0);
  if (v8 < 1.0) {
    double v8 = 1.0;
  }
  double v9 = (v4 - *a2) * (v7 + v6 * (v6 * v6) * 6335439.33);
  return (a1[1] - a2[1]) * v8 * ((a1[1] - a2[1]) * v8) + v9 * v9;
}

uint64_t GN_ANVIC_Set_Eph_El(unsigned __int8 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ANVIC_Set_Eph_El")) {
    return 0;
  }
  if (g_Logging_Cfg < 5) {
    EvLog_d("GN_ANVIC_Set_Eph_El: ", *a1);
  }
  else {
    EvLog_ANVIC_Eph_El(a1);
  }
  unsigned int v3 = *a1 - 15;
  BOOL v4 = v3 < 0xFFFFFFF2;
  if (v3 <= 0xFFFFFFF1) {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  SVid = %d, Out of range !", *a1);
  }
  if (a1[1] >= 2u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  Alert_Flag = %d > 1, Out of range !", a1[1]);
    BOOL v4 = 1;
  }
  if (a1[2] >= 2u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  L5_Health_Flag = %d > 1, Out of range !", a1[2]);
    BOOL v4 = 1;
  }
  if (a1[3] >= 2u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  S_Health_Flag = %d > 1, Out of range !", a1[3]);
    BOOL v4 = 1;
  }
  if ((a1[5] - 16) <= 0xE0u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  URAI = %d > 1, Out of range !", (char)a1[5]);
    BOOL v4 = 1;
  }
  if (*((unsigned __int16 *)a1 + 3) >= 0x1000u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  WeekNo = %d > 4095 Out of range !", *((unsigned __int16 *)a1 + 3));
    BOOL v4 = 1;
  }
  if (*((unsigned __int16 *)a1 + 4) >= 0x93A8u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  toc = %d > 37799, Out of range !", *((unsigned __int16 *)a1 + 4));
    BOOL v4 = 1;
  }
  if (*((unsigned __int16 *)a1 + 5) >= 0x93A8u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  toe = %d > 37799, Out of range !", *((unsigned __int16 *)a1 + 5));
    BOOL v4 = 1;
  }
  if ((*((_DWORD *)a1 + 3) - 0x2000000) >> 26 != 63)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  af0 = %d < -2^25 || >= 2^25, Out of range !", *((_DWORD *)a1 + 3));
    BOOL v4 = 1;
  }
  if (a1[19] >= 7u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  Fit_hours = %d > 6, Out of range !", a1[19]);
    BOOL v4 = 1;
  }
  if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 11) - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  i_dot = %d < -2^13 || >= 2^13, Out of range !", *((__int16 *)a1 + 11));
    BOOL v4 = 1;
  }
  if ((*((_DWORD *)a1 + 12) - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  delta_N = %d < -2^23 || >= 2^23, Out of range !", *((_DWORD *)a1 + 12));
    BOOL v4 = 1;
  }
  if ((*((_DWORD *)a1 + 13) - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El:  FAILED:  Omega_dot = %d < -2^23 || >= 2^23, Out of range !", *((_DWORD *)a1 + 13));
    BOOL v4 = 1;
  }
  LODWORD(v2) = *((_DWORD *)a1 + 6);
  double v5 = (double)v2 * 0.00000190734863;
  if (v5 >= *(double *)"")
  {
    if (v5 <= 6700.0) {
      goto LABEL_36;
    }
    EvCrt_v("GN_ANVIC_Set_Eph_El: FAILED: sqrt_A = %g > %g, Unrealistic value!");
  }
  else
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El: FAILED: sqrt_A = %g < %g, Unrealistic value!");
  }
  BOOL v4 = 1;
LABEL_36:
  LODWORD(v5) = *((_DWORD *)a1 + 7);
  double v6 = (double)*(unint64_t *)&v5 * 1.16415322e-10;
  if (v6 >= 0.0)
  {
    if (v6 <= 0.03) {
      goto LABEL_41;
    }
    EvCrt_v("GN_ANVIC_Set_Eph_El: FAILED: e = %g > %g, Unrealistic value!");
  }
  else
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El: FAILED: e = %g < %g, Unrealistic value!");
  }
  BOOL v4 = 1;
LABEL_41:
  int v7 = *((_DWORD *)a1 + 13);
  double v8 = (double)v7 * 3.57157734e-13;
  if (v8 < -0.00000198862815)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El: FAILED: Omega_dot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v8 > 0.000000314159265)
  {
    EvCrt_v("GN_ANVIC_Set_Eph_El: FAILED: Omega_dot = %e > %e, Unrealistic value!");
    return 0;
  }
  if (v4) {
    return 0;
  }
  LODWORD(v8) = *(_DWORD *)a1;
  uint64_t v11 = vmovl_u8(*(uint8x8_t *)&v8).u8[0] - 1;
  uint64_t v12 = p_NA + 76 * (int)v11;
  *(_DWORD *)(v12 + 22488) = *(_DWORD *)a1;
  *(_WORD *)(v12 + 22492) = *((_WORD *)a1 + 2);
  *(_WORD *)(v12 + 22494) = Complete_NVIC_WeekNo(*((unsigned __int16 *)a1 + 3));
  *(_DWORD *)(v12 + 22496) = *((_DWORD *)a1 + 2);
  *(_DWORD *)(v12 + 22500) = *((_DWORD *)a1 + 3);
  *(_WORD *)(v12 + 22504) = *((_WORD *)a1 + 8);
  *(unsigned char *)(v12 + 22506) = a1[18];
  unsigned int v13 = a1[19];
  if (v13 >= 4) {
    LOBYTE(v13) = 4;
  }
  *(unsigned char *)(v12 + 22507) = v13;
  *(_DWORD *)(v12 + 22508) = *((_DWORD *)a1 + 5);
  *(_OWORD *)(v12 + 22512) = *(_OWORD *)(a1 + 24);
  *(void *)(v12 + 22528) = *((void *)a1 + 5);
  *(_DWORD *)(v12 + 22536) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v12 + 22540) = v7;
  *(void *)(v12 + 22544) = *((void *)a1 + 7);
  *(_DWORD *)(v12 + 22552) = *((_DWORD *)a1 + 16);
  if (a1[68]) {
    int v14 = 5;
  }
  else {
    int v14 = 3;
  }
  *(_DWORD *)(v12 + 22484) = v14;
  uint64_t v15 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v15 + 16) && *(int *)v15 >= 3) {
    int v16 = (int)*(double *)(v15 + 40) + 604800 * *(__int16 *)(v15 + 32);
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)(v12 + 22480) = v16;
  uint64_t v9 = 1;
  *(unsigned char *)(p_NA + v11 + 348) = 1;
  Debug_Log_NVC_Eph(1, v12 + 22480);
  *(_WORD *)(v12 + 22494) = Complete_NVIC_WeekNo(*(unsigned __int16 *)(v12 + 22494));
  return v9;
}

uint64_t Complete_NVIC_WeekNo(unsigned int a1)
{
  if (a1 > 0x3FF)
  {
    return (unsigned __int16)a1;
  }
  else
  {
    uint64_t v1 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v1 + 16)
      && *(int *)v1 >= 3
      && (int v2 = (int)*(double *)(v1 + 40) + 604800 * *(__int16 *)(v1 + 32), v2 > 1238630399))
    {
      int v3 = v2 / 0x93A80u - 1024;
    }
    else
    {
      int v3 = *(__int16 *)(*(void *)(p_api + 72) + 1726) - 512;
    }
    int v4 = v3 - 512;
    do
    {
      unsigned __int16 v5 = a1;
      a1 += 1024;
    }
    while (v4 > v5);
  }
  return v5;
}

uint64_t GN_ANVIC_Set_Alm_El(unsigned __int8 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ANVIC_Set_Alm_El")) {
    return 0;
  }
  EvLog_d("GN_ANVIC_Set_Alm_El: ", *a1);
  unsigned int v3 = *a1 - 15;
  BOOL v4 = v3 < 0xFFFFFFF2;
  if (v3 <= 0xFFFFFFF1) {
    EvCrt_v("GN_ANVIC_Set_Alm_El: SVid = %d < 1 or >%d, Out of range!", *a1, 14);
  }
  if (a1[1] >= 2u)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: L5_Health_Flag = %d > 1, Out of range!", a1[1]);
    BOOL v4 = 1;
  }
  if (a1[2] >= 2u)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: S_Health_Flag = %d > 1, Out of range!", a1[2]);
    BOOL v4 = 1;
  }
  if (*((unsigned __int16 *)a1 + 2) >= 0x1000u)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: WNa = %d  > 4095, Out of range!", *((unsigned __int16 *)a1 + 2));
    BOOL v4 = 1;
  }
  if (*((unsigned __int16 *)a1 + 3) >= 0x93A8u)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: toa = %d > 37799, Out of range!", *((unsigned __int16 *)a1 + 3));
    BOOL v4 = 1;
  }
  if ((*((_DWORD *)a1 + 3) - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: i0 = %d <-2^23 or >=2^23, Out of range!", *((_DWORD *)a1 + 3));
    BOOL v4 = 1;
  }
  if (HIBYTE(*((_DWORD *)a1 + 5)))
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: sqrt_A = %d >=2^24, Out of range!", *((_DWORD *)a1 + 5));
    BOOL v4 = 1;
  }
  if ((*((_DWORD *)a1 + 6) - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: Omega0 = %d <-2^23 or >=2^23, Out of range!", *((_DWORD *)a1 + 6));
    BOOL v4 = 1;
  }
  if ((*((_DWORD *)a1 + 7) - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: w = %d <-2^23 or >=2^23, Out of range!", *((_DWORD *)a1 + 7));
    BOOL v4 = 1;
  }
  if ((*((_DWORD *)a1 + 8) - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: M0 = %d <-2^23 or >=2^23, Out of range!", *((_DWORD *)a1 + 8));
    BOOL v4 = 1;
  }
  if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 18) - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: af0 = %d <-2^10 or >=2^10, Out of range!", *((__int16 *)a1 + 18));
    BOOL v4 = 1;
  }
  if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 19) - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: af1 = %d <-2^10 or >=2^10, Out of range!", *((__int16 *)a1 + 19));
    BOOL v4 = 1;
  }
  LOWORD(v2) = *((_WORD *)a1 + 4);
  double v5 = (double)v2 * 0.000000476837158;
  if (v5 >= 0.0)
  {
    if (v5 <= 0.03) {
      goto LABEL_31;
    }
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: e = %g > %g, Unrealistic value!");
  }
  else
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: e = %g < %g, Unrealistic value!");
  }
  BOOL v4 = 1;
LABEL_31:
  double v6 = (double)*((__int16 *)a1 + 8) * 1.14290475e-11;
  if (v6 >= -0.00000198862815)
  {
    if (v6 <= 0.000000314159265) {
      goto LABEL_36;
    }
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: Omega_dot = %g > %g, Unrealistic value!");
  }
  else
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: Omega_dot = %g < %g, Unrealistic value!");
  }
  BOOL v4 = 1;
LABEL_36:
  unsigned int v7 = *((_DWORD *)a1 + 5);
  double v8 = (double)v7 * 0.00048828125;
  if (v8 < *(double *)"")
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: sqrt_A = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > 6700.0)
  {
    EvCrt_v("GN_ANVIC_Set_Alm_El: FAILED: sqrt_A = %g > %g, Unrealistic value!");
    return 0;
  }
  if (v4) {
    return 0;
  }
  uint64_t v11 = *a1;
  uint64_t v12 = p_NA;
  uint64_t v13 = v11 - 1;
  uint64_t v14 = p_NA + 52 * ((int)v11 - 1);
  uint64_t v15 = (int *)(v14 + 23544);
  *(unsigned char *)(v14 + 23552) = v11;
  *(_WORD *)(v14 + 23553) = *(_WORD *)(a1 + 1);
  *(_WORD *)(v14 + 23556) = *((_WORD *)a1 + 2);
  int v16 = (_WORD *)(v14 + 23556);
  *(_DWORD *)(v14 + 23558) = *(_DWORD *)(a1 + 6);
  *(_DWORD *)(v14 + 23564) = *((_DWORD *)a1 + 3);
  *(_WORD *)(v14 + 23568) = *((_WORD *)a1 + 8);
  *(_DWORD *)(v14 + 23572) = v7;
  *(void *)(v14 + 23576) = *((void *)a1 + 3);
  *(_DWORD *)(v14 + 23584) = *((_DWORD *)a1 + 8);
  *(_WORD *)(v14 + 23588) = *((_WORD *)a1 + 18);
  *(_WORD *)(v14 + 23590) = *((_WORD *)a1 + 19);
  *(unsigned char *)(v14 + 23592) = a1[40];
  uint64_t v17 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v17 + 16) && *(int *)v17 >= 3) {
    int v18 = (int)*(double *)(v17 + 40) + 604800 * *(__int16 *)(v17 + 32);
  }
  else {
    int v18 = 0;
  }
  int *v15 = v18;
  if (a1[41]) {
    int v19 = 5;
  }
  else {
    int v19 = 3;
  }
  *(_DWORD *)(v12 + 52 * (int)v13 + 23548) = v19;
  uint64_t v9 = 1;
  *(unsigned char *)(p_NA + v13 + 362) = 1;
  Debug_Log_NVC_Alm(1, (uint64_t)v15);
  *int v16 = Complete_NVIC_WeekNo((unsigned __int16)*v16);
  return v9;
}

BOOL Is_NVIC_IntEph_Same(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
      && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10)
      && *(unsigned __int8 *)(a1 + 11) == *(unsigned __int8 *)(a2 + 11)
      && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
      && *(unsigned __int16 *)(a1 + 14) == *(unsigned __int16 *)(a2 + 14)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 24) == *(unsigned __int16 *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 26) == *(unsigned __int8 *)(a2 + 26)
      && *(unsigned __int8 *)(a1 + 27) == *(unsigned __int8 *)(a2 + 27)
      && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28)
      && *(unsigned __int16 *)(a1 + 30) == *(unsigned __int16 *)(a2 + 30)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
      && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60)
      && *(unsigned __int16 *)(a1 + 64) == *(unsigned __int16 *)(a2 + 64)
      && *(unsigned __int16 *)(a1 + 66) == *(unsigned __int16 *)(a2 + 66)
      && *(unsigned __int16 *)(a1 + 68) == *(unsigned __int16 *)(a2 + 68)
      && *(unsigned __int16 *)(a1 + 70) == *(unsigned __int16 *)(a2 + 70)
      && *(unsigned __int16 *)(a1 + 72) == *(unsigned __int16 *)(a2 + 72)
      && *(unsigned __int16 *)(a1 + 74) == *(unsigned __int16 *)(a2 + 74);
}

void NK_Comp_Sol_Acc(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 60056;
  double v5 = (double (*)[3])(a2 + 1736);
  ECEF2FSD_RotM((const double (*)[3])(a2 + 1736), *(double *)(a1 + 27280) * 0.0174532925, (double (*)[3])v93);
  unsigned int v87 = 0;
  double v6 = (double *)(a2 + 61344);
  memset_pattern16((void *)(a2 + 61344), &unk_263D82940, 0x60uLL);
  unsigned int v7 = (void *)(a2 + 61440);
  memset_pattern16((void *)(a2 + 61440), &unk_263D82940, 0x60uLL);
  memset_pattern16((void *)(a2 + 61536), &unk_263D82930, 0x60uLL);
  *(void *)(v4 + 1576) = 0;
  if (!*(unsigned char *)(a1 + 136))
  {
    double v8 = (double *)(a2 + 52744);
    if (*(double *)(a2 + 52744) <= 1.05)
    {
      double v9 = *(double *)(a2 + 52752);
      if (v9 <= 1.05)
      {
LABEL_8:
        uint64_t v86 = v5;
        double v10 = (double *)(a1 + 976);
        ud2var(a1 + 976, 0xCu, 1, 1u, (double *)(a2 + 61344));
        *(void *)&long long v94 = 0;
        if (R8_EQ((const double *)(a2 + 1632), (const double *)&v94) && *v6 > 1.0e18) {
          double *v6 = 1.0e18;
        }
        double v11 = *v8;
        if (*v8 > 1.05)
        {
          *(void *)&long long v94 = 0;
          if (!R8_EQ((const double *)(a2 + 1632), (const double *)&v94) && *(_DWORD *)(a2 + 1872) != 1)
          {
            double v12 = (v11 + -1.0) * 0.25 * *v6;
            Apply_Q_Boost(v12, 0, 1u, (double *)(a1 + 976), &v87, (double *)&v94);
            double *v6 = v12 + *v6;
            *(double *)(a1 + 216) = v12;
            EvLog_v("NK_Comp_Sol_Acc:  Q-Boost 3:  ClkBias %g  post_QB[0] %g", sqrt(v12), *v8);
          }
        }
        *(double *)(v4 + 1384) = *(double *)(v4 + 1288) + *(double *)(a1 + 15488);
        uint64_t v13 = (double *)(v4 + 1296);
        ud2var(a1 + 976, 0xCu, 2, 1u, (double *)(v4 + 1296));
        *(void *)BOOL v91 = 0;
        if (R8_EQ((const double *)(a2 + 1640), (const double *)v91) && *v13 > 1.0e18) {
          double *v13 = 1.0e18;
        }
        double v14 = *v8;
        if (*v8 > 1.05)
        {
          *(void *)BOOL v91 = 0;
          if (!R8_EQ((const double *)(a2 + 1640), (const double *)v91) && *(_DWORD *)(a2 + 1872) != 1)
          {
            double v15 = (v14 + -1.0) * 0.25 * *v13;
            Apply_Q_Boost(v15, 1u, 1u, (double *)(a1 + 976), &v87, (double *)&v94);
            double *v13 = v15 + *v13;
            if (*(double *)(a1 + 216) < v15) {
              *(double *)(a1 + 216) = v15;
            }
            EvLog_v("NK_Comp_Sol_Acc:  Q-Boost 3:  ClkGLON %g  post_QB[0] %g", sqrt(v15), *v8);
          }
        }
        *(double *)(v4 + 1392) = *(double *)(v4 + 1296) + *(double *)(a1 + 15488);
        int v16 = (double *)(v4 + 1304);
        ud2var(a1 + 976, 0xCu, 3, 1u, (double *)(v4 + 1304));
        *(void *)BOOL v91 = 0;
        if (R8_EQ((const double *)(a2 + 1648), (const double *)v91) && *v16 > 1.0e18) {
          *int v16 = 1.0e18;
        }
        double v17 = *v8;
        if (*v8 > 1.05)
        {
          *(void *)BOOL v91 = 0;
          if (!R8_EQ((const double *)(a2 + 1648), (const double *)v91) && *(_DWORD *)(a2 + 1872) != 1)
          {
            double v18 = (v17 + -1.0) * 0.25 * *v16;
            Apply_Q_Boost(v18, 2u, 1u, (double *)(a1 + 976), &v87, (double *)&v94);
            *int v16 = v18 + *v16;
            if (*(double *)(a1 + 216) < v18) {
              *(double *)(a1 + 216) = v18;
            }
            EvLog_v("NK_Comp_Sol_Acc:  Q-Boost 3:  ClkBDS %g  post_QB[0] %g", sqrt(v18), *v8);
          }
        }
        *(double *)(v4 + 1400) = *(double *)(v4 + 1304) + *(double *)(a1 + 15488);
        int v19 = (double *)(v4 + 1312);
        ud2var(a1 + 976, 0xCu, 4, 1u, (double *)(v4 + 1312));
        *(void *)BOOL v91 = 0;
        if (R8_EQ((const double *)(a2 + 1656), (const double *)v91) && *v19 > 1.0e18) {
          *int v19 = 1.0e18;
        }
        double v20 = *v8;
        if (*v8 > 1.05)
        {
          *(void *)BOOL v91 = 0;
          if (!R8_EQ((const double *)(a2 + 1656), (const double *)v91) && *(_DWORD *)(a2 + 1872) != 1)
          {
            double v21 = (v20 + -1.0) * 0.25 * *v19;
            Apply_Q_Boost(v21, 3u, 1u, (double *)(a1 + 976), &v87, (double *)&v94);
            *int v19 = v21 + *v19;
            if (*(double *)(a1 + 216) < v21) {
              *(double *)(a1 + 216) = v21;
            }
            EvLog_v("Q-Boost 3 ClkL5L1 %g  post_QB[0] %g", sqrt(v21), *v8);
          }
        }
        *(double *)(v4 + 1408) = *(double *)(v4 + 1312) + *(double *)(a1 + 15488) * 0.0001;
        uint64_t v22 = (double *)(v4 + 1320);
        ud2var(a1 + 976, 0xCu, 5, 1u, (double *)(v4 + 1320));
        double v23 = *(double *)(a2 + 52752);
        if (v23 > 1.05 && *(_DWORD *)(a2 + 1872) != 1)
        {
          double v24 = (v23 + -1.0) * 0.25 * *v22;
          Apply_Q_Boost(v24, 4u, 1u, (double *)(a1 + 976), &v87, (double *)&v94);
          double *v22 = v24 + *v22;
          *(double *)(a1 + 224) = v24;
          EvLog_v("NK_Comp_Sol_Acc:  Q-Boost 4:  ClkD %g  post_QB[1] %g", sqrt(v24), *(double *)(a2 + 52752));
        }
        double v25 = 0.01;
        *(double *)(v4 + 1416) = *(double *)(v4 + 1320) + *(double *)(a2 + 1552) * 0.01;
        ud2var(a1 + 976, 0xCu, 6, 1u, (double *)(v4 + 1328));
        double v26 = *(double *)(v4 + 1328);
        *(double *)(v4 + 1424) = v26;
        double v27 = *v8;
        if (*v8 > 1.05 && *(int *)(a2 + 20) <= 10 && *(_DWORD *)(a2 + 1872) != 1)
        {
          double v28 = v26 * (v27 + -1.0 + v27 + -1.0);
          Apply_Q_Boost(v28, 5u, 1u, (double *)(a1 + 976), &v87, (double *)&v94);
          *(double *)(v4 + 1328) = v28 + *(double *)(v4 + 1328);
          *(double *)(a1 + 216) = v28 + *(double *)(a1 + 216);
          EvLog_v("NK_Comp_Sol_Acc:  Q-Boost 3:  dT_Sync %g  post_QB[0] %g", sqrt(v28), *v8);
          double v27 = *v8;
        }
        __b = (double *)(a2 + 61344);
        if (v27 > 1.05 && *(_DWORD *)(a2 + 1872) != 1)
        {
          uint64_t v29 = 61392;
          Comp_NEDvar_UDU(a1 + 976, 0xCu, 6, v86, (double *)(a2 + 61392));
          int v30 = 0;
          uint64_t v31 = 0;
          unsigned int v32 = v87;
          do
          {
            double v33 = (*v8 + -1.0) * *(double *)(a2 + v29);
            if (v31 == 48) {
              double v33 = v33 * *(double *)(a1 + 128);
            }
            long long v95 = 0u;
            long long v96 = 0u;
            long long v94 = 0u;
            long long v97 = *(_OWORD *)(a2 + v31 + 1736);
            uint64_t v98 = *(void *)(a2 + v31 + 1752);
            v91[0] = 0;
            if (v33 > 0.0)
            {
              rnk1_core((double *)(a1 + 976), 9u, v33, (double *)&v94, v91);
              if (v91[0]) {
                ++v32;
              }
            }
            *(double *)(a1 + 216) = v33 + *(double *)(a1 + 216);
            EvLog_v("NK_Comp_Sol_Acc:  Q-Boost 3:  Pos %d %g  post_QB[0] %g", v30, sqrt(v33), *v8);
            v31 += 24;
            ++v30;
            v29 += 8;
          }
          while (v31 != 72);
          unsigned int v87 = v32;
          double v10 = (double *)(a1 + 976);
          uint64_t v13 = (double *)(v4 + 1296);
          int v16 = (double *)(v4 + 1304);
        }
        if (!*(unsigned char *)(a1 + 29))
        {
          if (*(unsigned char *)(v4 + 144) && *(double *)(v4 + 216) <= 400000000.0 || *(unsigned __int8 *)(v4 + 1978) >= 3u)
          {
            *(unsigned char *)(a1 + 29) = 1;
          }
          else
          {
            double v34 = *__b;
            if (*__b < 40000.0 && !*(unsigned char *)v4)
            {
              double v35 = 40000.0 - v34;
              Apply_Q_Boost(40000.0 - v34, 0, 1u, v10, &v87, (double *)&v94);
              double *__b = v35;
              *(double *)(a2 + 61440) = v35 + *(double *)(a1 + 15488);
              DbgLog_v(1, "NK_Comp_Sol_Acc: GPS Clock Bias var boosted %g", v35);
            }
            double v36 = *v13;
            if (*v13 < 40000.0 && !*(unsigned char *)v4)
            {
              double v37 = 40000.0 - v36;
              Apply_Q_Boost(40000.0 - v36, 1u, 1u, v10, &v87, (double *)&v94);
              *(double *)(v4 + 1296) = v37;
              *(double *)(v4 + 1392) = v37 + *(double *)(a1 + 15488);
              DbgLog_v(1, "NK_Comp_Sol_Acc: Glonass Clock Bias var boosted %g", v37);
            }
            double v38 = *v16;
            if (*v16 < 40000.0 && !*(unsigned char *)v4)
            {
              double v39 = 40000.0 - v38;
              Apply_Q_Boost(40000.0 - v38, 2u, 1u, v10, &v87, (double *)&v94);
              *(double *)(v4 + 1304) = v39;
              *(double *)(v4 + 1400) = v39 + *(double *)(a1 + 15488);
              DbgLog_v(1, "NK_Comp_Sol_Acc: Beidou Clock Bias var boosted %g", v39);
            }
            for (int i = 0; i != 3; ++i)
            {
              *(void *)BOOL v91 = 0;
              ud2var((uint64_t)v10, 0xCu, i + 7, 1u, (double *)v91);
              if (*(double *)v91 < 40000.0)
              {
                double v41 = 40000.0 - *(double *)v91;
                Apply_Q_Boost(40000.0 - *(double *)v91, i + 6, 1u, v10, &v87, (double *)&v94);
                DbgLog_v(1, "NK_Comp_Sol_Acc: Pos var boosted %d %g", i, v41);
              }
            }
          }
        }
        int v42 = v86;
        Comp_NEDvar_UDU((uint64_t)v10, 0xCu, 6, v86, (double *)(a2 + 61392));
        *(void *)(v4 + 1576) = v43;
        Comp_NEDvar_UDU((uint64_t)v10, 0xCu, 6, (double (*)[3])v93, (double *)(v4 + 1632));
        *(float64x2_t *)(v4 + 1632) = vsqrtq_f64(*(float64x2_t *)(v4 + 1632));
        *(double *)(v4 + 1648) = sqrt(*(double *)(v4 + 1648));
        Comp_NEDvar_UDU((uint64_t)v10, 0xCu, 9, (double (*)[3])v93, (double *)(a2 + 61712));
        *(float64x2_t *)(a2 + 61712) = vsqrtq_f64(*(float64x2_t *)(a2 + 61712));
        *(double *)(v4 + 1672) = sqrt(*(double *)(v4 + 1672));
        *(double *)(v4 + 1576) = *(double *)(v4 + 1576) + *(double *)(a1 + 15520);
        double v44 = (double *)(a1 + 15496);
        double v45 = (double *)(v4 + 1432);
        uint64_t v46 = 3;
        do
        {
          double v47 = *v44++;
          *double v45 = *(v45 - 12) + v47;
          ++v45;
          --v46;
        }
        while (v46);
        if (*(double *)(a2 + 52752) > 1.05 && *(_DWORD *)(a2 + 1872) != 1)
        {
          uint64_t v84 = v4;
          uint64_t v48 = 61416;
          double v49 = v10;
          Comp_NEDvar_UDU((uint64_t)v10, 0xCu, 9, v86, (double *)(a2 + 61416));
          int v50 = 0;
          uint64_t v51 = 0;
          unsigned int v52 = v87;
          do
          {
            double v53 = (*(double *)(a2 + 52752) + -1.0) * *(double *)(a2 + v48);
            if (v51 == 48) {
              double v53 = v53 * *(double *)(a1 + 128);
            }
            uint64_t v98 = 0;
            long long v96 = 0u;
            long long v97 = 0u;
            long long v95 = 0u;
            long long v94 = 0u;
            long long v99 = *(_OWORD *)(a2 + v51 + 1736);
            uint64_t v100 = *(void *)(a2 + v51 + 1752);
            v91[0] = 0;
            if (v53 > 0.0)
            {
              rnk1_core(v49, 0xCu, v53, (double *)&v94, v91);
              if (v91[0]) {
                ++v52;
              }
            }
            *(double *)(a1 + 224) = v53 + *(double *)(a1 + 224);
            EvLog_v("NK_Comp_Sol_Acc:  Q-Boost 4:  Vel %d %g  post_QB[1] %g", v50, sqrt(v53), *(double *)(a2 + 52752));
            v51 += 24;
            ++v50;
            v48 += 8;
          }
          while (v51 != 72);
          unsigned int v87 = v52;
          int v42 = v86;
          double v10 = v49;
          uint64_t v4 = v84;
        }
        Comp_NEDvar_UDU((uint64_t)v10, 0xCu, 9, v42, (double *)(a2 + 61416));
        memset(v91, 0, sizeof(v91));
        double v92 = 0.0;
        double v6 = (double *)(a2 + 61344);
        if (*(_DWORD *)(a1 + 27116) < 4u || (double v54 = *(double *)(a2 + 1552), v54 <= 0.0))
        {
          unsigned int v63 = *(_DWORD *)(a1 + 20);
          unsigned int v7 = (void *)(a2 + 61440);
          double v64 = 0.0;
          switch(v63)
          {
            case 0u:
            case 1u:
              goto LABEL_99;
            case 2u:
              __asm { FMOV            V0.2D, #0.5; jumptable 0000000263CC7B9C case 2 }
              *(_OWORD *)BOOL v91 = _Q0;
              double v70 = 0.25;
              double v25 = 0.0204081633;
              break;
            case 3u:
              __asm { FMOV            V0.2D, #2.0; jumptable 0000000263CC7B9C case 3 }
              *(_OWORD *)BOOL v91 = _Q0;
              double v70 = 4.0;
              break;
            case 4u:
              __asm { FMOV            V0.2D, #3.0; jumptable 0000000263CC7B9C case 4 }
              *(_OWORD *)BOOL v91 = _Q0;
              double v70 = 9.0;
              double v25 = 0.00694444444;
              break;
            case 5u:
              __asm { FMOV            V0.2D, #5.0; jumptable 0000000263CC7B9C case 5 }
              *(_OWORD *)BOOL v91 = _Q0;
              double v70 = 25.0;
              double v25 = 0.0625;
              break;
            case 6u:
              __asm { FMOV            V0.2D, #10.0; jumptable 0000000263CC7B9C case 6 }
              *(_OWORD *)BOOL v91 = _Q0;
              double v25 = 0.25;
              *(double *)&uint64_t v75 = 100.0;
              goto LABEL_107;
            case 7u:
              __asm { FMOV            V0.2D, #20.0; jumptable 0000000263CC7B9C case 7 }
              *(_OWORD *)BOOL v91 = _Q0;
              double v25 = 1.0;
              *(double *)&uint64_t v75 = 400.0;
LABEL_107:
              double v70 = *(double *)&v75;
              break;
            case 8u:
              *(int64x2_t *)BOOL v91 = vdupq_n_s64(0x408F400000000000uLL);
              double v25 = 1.0;
              double v70 = 1000000.0;
              break;
            default:
              double v64 = 1000000.0;
LABEL_99:
              *(void *)BOOL v91 = sqrt(v64);
              *(void *)&v91[2] = *(void *)v91;
              double v70 = 1000000.0;
              if (v63 < 2) {
                double v70 = 0.0;
              }
              double v25 = 1.0;
              break;
          }
          double v92 = sqrt(v70 * v25);
          double v54 = *(double *)(a2 + 1552);
        }
        else
        {
          uint64_t v55 = 0;
          double v88 = 0.0;
          double v89 = 0.0;
          double v90 = 0.0;
          unsigned int v7 = (void *)(a2 + 61440);
          do
          {
            *(double *)((char *)&v88 + v55) = -*(double *)(a2 + 62536 + v55) / v54;
            v55 += 8;
          }
          while (v55 != 24);
          uint64_t v56 = 0;
          double v57 = v88;
          double v58 = v89;
          uint64_t v59 = (double *)(a2 + 1752);
          double v60 = v90;
          do
          {
            double v61 = *(v59 - 1) * v58 + *(v59 - 2) * v57;
            double v62 = *v59;
            v59 += 3;
            *(double *)&v91[v56] = v61 + v62 * v60;
            v56 += 2;
          }
          while (v56 != 6);
        }
        uint64_t v77 = 0;
        uint64_t v78 = a2 + 61416;
        do
        {
          double v79 = *(double *)(v78 + v77 * 4) + v54 * (*(double *)&v91[v77] * 0.5) * (v54 * (*(double *)&v91[v77] * 0.5));
          *(double *)(v78 + v77 * 4) = v79;
          *(double *)(a2 + 61512 + v77 * 4) = v79 + v54 * 0.0001;
          v77 += 2;
        }
        while (v77 != 6);
        if (v87)
        {
          *(unsigned char *)(a1 + 136) = 1;
          *(_DWORD *)(a1 + 140) = 23;
          memset_pattern16(__b, &unk_263D82940, 0x60uLL);
          memset_pattern16(v7, &unk_263D82940, 0x60uLL);
          *(void *)(v4 + 1576) = 0;
        }
        goto LABEL_114;
      }
      *(_DWORD *)(a1 + 152) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 152) = 0;
      *(unsigned char *)(a1 + 180) = 1;
      double v9 = *(double *)(a2 + 52752);
    }
    if (v9 > 1.05) {
      *(unsigned char *)(a1 + 181) = 1;
    }
    goto LABEL_8;
  }
LABEL_114:
  uint64_t v80 = (double *)(v4 + 1480);
  uint64_t v81 = 12;
  while (*(v80 - 24) > 0.0)
  {
    *uint64_t v80 = sqrt(*(v80 - 12));
    ++v80;
    if (!--v81) {
      return;
    }
  }
  *(unsigned char *)(a1 + 136) = 1;
  *(_DWORD *)(a1 + 140) = 91;
  memset_pattern16(v6, &unk_263D82940, 0x60uLL);
  memset_pattern16(v7, &unk_263D82940, 0x60uLL);
  uint64_t v82 = 0;
  int64x2_t v83 = vdupq_n_s64(0x41634325C0000000uLL);
  do
  {
    *(int64x2_t *)(a2 + 61536 + v82) = v83;
    v82 += 16;
  }
  while (v82 != 96);
  *(void *)(v4 + 1576) = 0;
}

void NK_Add_Nominal_PN(uint64_t a1, uint64_t a2, int a3, double *a4, double *a5, uint64_t a6, double *a7)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v92 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  memset(v89, 0, sizeof(v89));
  double v14 = (double (*)[3])(a2 + 224);
  ECEF2FSD_RotM((const double (*)[3])(a2 + 224), *(double *)(a1 + 27280) * 0.0174532925, (double (*)[3])v89);
  __asm { FMOV            V0.2D, #1.0 }
  long long v93 = _Q0;
  double v19 = *(double *)(a2 + 40);
  if (v19 >= 0.0)
  {
    uint64_t v84 = a7;
    double v20 = v19 * v19;
    *(void *)&long long v94 = 0x3FF0000000000000;
    double v21 = a4[3];
    double v22 = v19 * (CP_Noise_dT_Sync[*(unsigned int *)(a2 + 24)] + a4[4] + v19 * v19 * v21 * 0.0833333333);
    double v23 = v22;
    if (a3) {
      double v23 = v22 + a4[2];
    }
    uint64_t v85 = a6;
    int v24 = 0;
    int v88 = 0;
    double v87 = v19;
    if (v23 > 0.0)
    {
      rnk1_core(a5, 1u, v23, (double *)&v94, &v88);
      double v19 = v87;
      int v24 = v88;
      double v21 = a4[3];
      double v22 = v87 * (CP_Noise_dT_Sync[*(unsigned int *)(a2 + 24)] + a4[4] + v20 * v21 * 0.0833333333);
    }
    int v25 = v24 != 0;
    *(void *)&long long v94 = 0;
    *((void *)&v94 + 1) = 0x3FF0000000000000;
    double v26 = v22;
    if (a3) {
      double v26 = v22 + a4[2];
    }
    int v88 = 0;
    if (v26 > 0.0)
    {
      rnk1_core(a5, 2u, v26, (double *)&v94, &v88);
      double v19 = v87;
      double v21 = a4[3];
      double v22 = v87 * (CP_Noise_dT_Sync[*(unsigned int *)(a2 + 24)] + a4[4] + v20 * v21 * 0.0833333333);
      int v27 = v24 ? 2 : 1;
      if (v88) {
        int v25 = v27;
      }
    }
    long long v94 = 0uLL;
    *(void *)&long long v95 = 0x3FF0000000000000;
    if (a3) {
      double v22 = v22 + a4[2];
    }
    int v28 = 0;
    int v88 = 0;
    double v29 = sqrt(v19);
    if (v22 > 0.0)
    {
      rnk1_core(a5, 3u, v22, (double *)&v94, &v88);
      double v19 = v87;
      int v28 = v88;
      double v21 = a4[3];
    }
    int v30 = 0;
    uint64_t v31 = (unsigned int *)(a1 + 27120);
    if (v28) {
      ++v25;
    }
    *((void *)&v95 + 1) = 0;
    *(double *)&long long v94 = v19 * v29 * 0.5;
    *((double *)&v94 + 1) = *(double *)&v94;
    *(double *)&long long v95 = *(double *)&v94;
    *(double *)&long long v96 = v29;
    int v88 = 0;
    if (v21 > 0.0)
    {
      rnk1_core(a5, 5u, v21, (double *)&v94, &v88);
      double v19 = v87;
      int v30 = v88;
    }
    double v86 = v20 * 0.5;
    BOOL v32 = v30 != 0;
    double v33 = 0.0;
    uint64_t v34 = 14;
    do
    {
      double v33 = v33 + *(double *)(a2 + 8 * v34) * *(double *)(a2 + 8 * v34);
      unint64_t v35 = v34 - 11;
      --v34;
    }
    while (v35 > 1);
    double v36 = sqrt(v33);
    *a4 = v36;
    double v37 = a4[10];
    if (v36 > v37)
    {
      _NF = 1;
    }
    else
    {
      double v37 = v36;
      _NF = v36 < 1.0;
    }
    if (_NF)
    {
      if (v37 >= 1.0) {
        double v36 = v37;
      }
      else {
        double v36 = 1.0;
      }
      *a4 = v36;
    }
    int v39 = 0;
    int v40 = v25 + v32;
    double v41 = v36 * a4[1];
    *(double *)&long long v94 = v20 * 0.5;
    *((double *)&v94 + 1) = v20 * 0.5;
    long long v95 = *(unint64_t *)&v86;
    *(double *)&long long v96 = v19;
    int v88 = 0;
    if (v41 > 0.0)
    {
      rnk1_core(a5, 5u, v41, (double *)&v94, &v88);
      double v19 = v87;
      int v39 = v88;
    }
    int v42 = 0;
    if (v39) {
      ++v40;
    }
    long long v94 = 0uLL;
    *(void *)&long long v95 = 0;
    *((void *)&v95 + 1) = 0x3FF0000000000000;
    double v43 = v19 * a4[5];
    int v88 = 0;
    if (v43 > 0.0)
    {
      rnk1_core(a5, 4u, v43, (double *)&v94, &v88);
      double v19 = v87;
      int v42 = v88;
    }
    if (v42) {
      int v44 = v40 + 1;
    }
    else {
      int v44 = v40;
    }
    unsigned int v45 = *(_DWORD *)(a1 + 20);
    unsigned int v46 = *(_DWORD *)(a1 + 24);
    if (v45 != v46)
    {
      switch(v45)
      {
        case 0u:
          goto LABEL_55;
        case 1u:
          if (!v46) {
            break;
          }
          goto LABEL_55;
        case 2u:
          if (v46 <= 1) {
            break;
          }
          goto LABEL_55;
        case 3u:
          if (v46 <= 2) {
            break;
          }
          goto LABEL_55;
        case 4u:
          if (v46 - 5 >= 3) {
            break;
          }
          goto LABEL_55;
        case 5u:
          if ((v46 & 0xFFFFFFFE) != 6) {
            break;
          }
          goto LABEL_55;
        case 6u:
          if (v46 != 7) {
            break;
          }
LABEL_55:
          if (*(unsigned char *)(a1 + 27720))
          {
            unsigned int v47 = *(_DWORD *)(a1 + 148);
            if (v47 >= *(_DWORD *)(a1 + 152)) {
              unsigned int v47 = *(_DWORD *)(a1 + 152);
            }
            if (!v47
              || v45 >= 2 && ((unsigned int v48 = *v31, *v31 > 0x78) || v45 - 3 <= 5 && (v48 > 0x1E || v45 - 4 <= 4 && v48 >= 0xB)))
            {
              char v49 = 0;
LABEL_70:
              *(unsigned char *)(a1 + 27720) = v49;
              break;
            }
          }
          else
          {
            unsigned int v50 = *(_DWORD *)(a1 + 148);
            if (v50 >= *(_DWORD *)(a1 + 152)) {
              unsigned int v50 = *(_DWORD *)(a1 + 152);
            }
            if (*(double *)(a1 + 27568) <= (double)(5 * v50))
            {
              char v49 = 1;
              goto LABEL_70;
            }
          }
          break;
        default:
          break;
      }
    }
    if (!*(unsigned char *)(a1 + 27720) || (double v51 = *(double *)(a2 + 336), v51 > 4.0) || *(unsigned char *)(a1 + 27249))
    {
      double v52 = a4[6];
      double v53 = a4[7];
      if (*(unsigned char *)(a1 + 27249))
      {
        double v52 = v52 + a4[8];
        double v53 = v53 + a4[9];
      }
      uint64_t v54 = 0;
      uint64_t v55 = (double *)&v93;
      long long v56 = 0uLL;
      do
      {
        long long v94 = v56;
        long long v95 = v56;
        float64x2_t v57 = *(float64x2_t *)(a2 + v54 + 224);
        long long v96 = v56;
        float64x2_t v97 = v57;
        double v98 = *(double *)(a2 + v54 + 240);
        double v58 = v53;
        if (v54 != 48) {
          double v58 = v52 * *v55;
        }
        int v59 = 0;
        double v60 = v19 * (v58 + CP_Noise_dT_Sync[*(unsigned int *)(a2 + 24)]);
        int v88 = 0;
        if (v60 > 0.0)
        {
          rnk1_core(a5, 9u, v60, (double *)&v94, &v88);
          long long v56 = 0uLL;
          double v19 = v87;
          int v59 = v88;
        }
        if (v59) {
          ++v44;
        }
        ++v55;
        v54 += 24;
      }
      while (v54 != 72);
      double v51 = *(double *)(a2 + 336);
    }
    if (v51 > 16.0)
    {
      double v61 = fabs(*(double *)(a1 + 27288));
      if (v61 > 2.0)
      {
        double v62 = v19 * v51;
        __double2 v63 = __sincos_stret(v61 * 0.0174532925);
        uint64_t v64 = 0;
        double v65 = v62 * v63.__sinval;
        double v66 = 1.0;
        if (v51 < 23.0) {
          double v66 = (v51 + -16.0) / 7.0;
        }
        double v19 = v87;
        double v67 = v62 * (1.0 - v63.__cosval) * v66 * (v62 * (1.0 - v63.__cosval) * v66);
        double v68 = v65 * v66 * (v65 * v66);
        double v69 = (double *)(a1 + 352);
        char v70 = 1;
        long long v71 = 0uLL;
        do
        {
          int v72 = 0;
          char v73 = v70;
          long long v94 = v71;
          long long v95 = v71;
          double v74 = &v89[3 * v64];
          float64x2_t v75 = *(float64x2_t *)v74;
          long long v96 = v71;
          float64x2_t v97 = v75;
          double v98 = v74[2];
          if (v70) {
            double v76 = v67;
          }
          else {
            double v76 = v68;
          }
          int v88 = 0;
          if (v76 > 0.0)
          {
            rnk1_core(v69, 9u, v76, (double *)&v94, &v88);
            long long v71 = 0uLL;
            double v19 = v87;
            int v72 = v88;
          }
          char v70 = 0;
          if (v72) {
            ++v44;
          }
          uint64_t v64 = 1;
        }
        while ((v73 & 1) != 0);
      }
    }
    uint64_t v77 = 0;
    uint64_t v78 = (double *)&v93;
    long long v79 = 0uLL;
    do
    {
      long long v94 = v79;
      long long v95 = v79;
      float64x2_t v80 = *(float64x2_t *)(a2 + v77 + 224);
      long long v96 = v79;
      float64x2_t v97 = vmulq_n_f64(v80, v86);
      double v81 = *(double *)(a2 + v77 + 240);
      double v98 = v86 * v81;
      float64x2_t v99 = vmulq_n_f64(v80, v19);
      double v100 = v19 * v81;
      if (v77 == 48) {
        double v82 = a4[11];
      }
      else {
        double v82 = a4[10] * *v78;
      }
      int v83 = 0;
      int v88 = 0;
      if (v82 > 0.0)
      {
        rnk1_core(a5, 0xCu, v82, (double *)&v94, &v88);
        long long v79 = 0uLL;
        double v19 = v87;
        int v83 = v88;
      }
      if (v83) {
        ++v44;
      }
      ++v78;
      v77 += 24;
    }
    while (v77 != 72);
    if (v44)
    {
      gn_report_assertion_failure("Rank 1 update fail");
      *(_DWORD *)(v85 + 4) = 21;
      *(unsigned char *)uint64_t v85 = 1;
    }
    else
    {
      ud2var((uint64_t)a5, 0xCu, 1, 0xCu, v84);
      Comp_NEDvar_UDU((uint64_t)a5, 0xCu, 6, v14, v84 + 6);
      Comp_NEDvar_UDU((uint64_t)a5, 0xCu, 9, v14, v84 + 9);
    }
  }
}

uint64_t NK_Init_Cov_Mat(int a1, unsigned int a2, int a3, unsigned char *a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8, double a9, uint64_t a10, int64x2_t *a11, uint64_t a12)
{
  if (*(unsigned char *)a6) {
    int v13 = 0;
  }
  else {
    int v13 = a1;
  }
  if (v13)
  {
    ++*(_DWORD *)(a6 + 12);
  }
  else
  {
    if (*(unsigned char *)a6)
    {
      int64x2_t v20 = vdupq_n_s64(0x4163125300000000uLL);
      *a11 = v20;
      a11[1] = v20;
      a11[2] = v20;
      a11[3] = v20;
    }
    a7[6] = 0u;
    a7[7] = 0u;
    a7[4] = 0u;
    a7[5] = 0u;
    a7[2] = 0u;
    a7[3] = 0u;
    *a7 = 0u;
    a7[1] = 0u;
    *(_DWORD *)a8 = -1;
    int64x2_t v21 = vdupq_n_s64(0x416312D000000000uLL);
    *(int64x2_t *)(a8 + 40) = v21;
    *(int64x2_t *)(a8 + 56) = v21;
    *(unsigned char *)(a8 + 88) = -1;
    *(_DWORD *)a10 = -1;
    *(int64x2_t *)(a10 + 40) = v21;
    *(int64x2_t *)(a10 + 56) = v21;
    *(unsigned char *)(a10 + 88) = -1;
    bzero((void *)(a5 + 8), 0x268uLL);
    uint64_t v22 = ClkBiasOrigVar[a3];
    *(void *)a12 = v22;
    *(void *)a5 = v22;
    *(void *)(a12 + 8) = *(void *)a12;
    *(void *)(a5 + 16) = *(void *)a5;
    *(void *)(a12 + 16) = *(void *)a12;
    *(void *)(a5 + 40) = *(void *)a5;
    uint64_t v23 = DT_SyncOrigVar[a3];
    *(void *)(a12 + 40) = v23;
    *(void *)(a5 + 160) = v23;
    *(void *)(a12 + 24) = 0x4022000000000000;
    *(void *)(a5 + 72) = 0x4022000000000000;
    double v24 = a9 * 99930819.3 * (a9 * 99930819.3);
    *(double *)(a12 + 32) = v24;
    *(double *)(a5 + 112) = v24;
    if (a1) {
      uint64_t v25 = qword_263D829C0[*a4 == 0];
    }
    else {
      uint64_t v25 = 0x4341C37937E08000;
    }
    *(void *)(a12 + 56) = v25;
    *(void *)(a12 + 64) = v25;
    *(void *)(a12 + 48) = v25;
    *(void *)(a5 + 352) = v25;
    *(void *)(a5 + 280) = v25;
    *(void *)(a5 + 216) = v25;
    if (a2 > 8) {
      uint64_t v26 = 0x4197D78400000000;
    }
    else {
      uint64_t v26 = qword_263D82A90[a2];
    }
    *(void *)(a12 + 80) = v26;
    *(void *)(a12 + 88) = v26;
    *(void *)(a12 + 72) = v26;
    *(void *)(a5 + 616) = v26;
    *(void *)(a5 + 520) = v26;
    *(void *)(a5 + 432) = v26;
    *(unsigned char *)a6 = 0;
    int v27 = *(_DWORD *)(a6 + 8) + 1;
    *(_DWORD *)(a6 + 12) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    *(_DWORD *)(a6 + 8) = v27;
    *(_DWORD *)(a6 + 24) = -1;
  }
  return v13 ^ 1u;
}

void SV_Data_Decode(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int v13 = *(_DWORD *)(a6 + 24);
  if (*(unsigned char *)(a6 + 16) && *(int *)a6 >= 3)
  {
    int v14 = (int)*(double *)(a6 + 40) + 604800 * *(__int16 *)(a6 + 32);
    unsigned int v52 = v14;
    int v15 = a3[3968] - v13;
    if (v15 > 0 || (int v15 = a3[3969] - v13, v15 > 0) || (int v15 = a3[3970] - v13, v15 >= 1))
    {
      v14 += v15 / 0x3E8u;
      unsigned int v52 = v14;
    }
  }
  else
  {
    int v14 = 0;
    unsigned int v52 = 0;
  }
  if (*(int *)(a6 + 76) < 1)
  {
    int v20 = 0;
  }
  else
  {
    int v16 = a3[3969] - v13;
    if (v16 < 1) {
      int v16 = 1000;
    }
    double v17 = *(double *)(a6 + 88) + (double)v16 * 0.001;
    double v18 = -0.5;
    if (v17 > 0.0) {
      double v18 = 0.5;
    }
    double v19 = v17 + v18;
    if (v19 <= 2147483650.0)
    {
      if (v19 >= -2147483650.0) {
        int v20 = (int)v19;
      }
      else {
        int v20 = 0x80000000;
      }
    }
    else
    {
      int v20 = 0x7FFFFFFF;
    }
  }
  *(_DWORD *)(a2 + 60) = v20;
  DD_Delete_Bad_GPS_Data(a1, a1 + 224, a1 + 192, (void *)a7);
  uint64_t v49 = a1 + 192;
  DD_Delete_Inhib_GPS_Data(*(void *)(a4 + 480), a1, a1 + 224, a1 + 192, (void *)a7);
  DD_Delete_Bad_QZSS_Data(a1 + 3584, a1 + 3654, a1 + 3644, (void *)a7);
  DD_Delete_Inhib_QZSS_Data(*(void *)(a4 + 496), a1 + 3584, a1 + 3654, a1 + 3644, (void *)a7);
  DD_Delete_Bad_GLON_Data(a1, (void *)a7);
  DD_Delete_Inhib_GLON_Data(*(void *)(a4 + 488), a1, (void *)a7);
  DD_Delete_Bad_BDS_Data((void *)a7);
  DD_Delete_Inhib_BDS_Data(*(void *)(a4 + 512), (void *)a7);
  DD_Delete_Bad_GAL_Data((void *)a7);
  DD_Delete_Inhib_GAL_Data(*(void *)(a4 + 520), (void *)a7);
  DD_Delete_Bad_NVIC_Data((void *)a7);
  DD_Delete_Inhib_NVIC_Data(*(void *)(a4 + 808), (void *)a7);
  if (*(unsigned char *)(a4 + 1837))
  {
    if (v14 >= 1)
    {
      uint64_t v21 = *(void *)(a4 + 1744);
      if (v21 >= 1 && v14 - v21 <= 604799)
      {
        uint64_t v22 = a3 + 30;
        uint64_t v23 = 128;
        do
        {
          unsigned char *v22 = 0;
          v22 += 124;
          --v23;
        }
        while (v23);
      }
    }
  }
  unsigned __int8 v24 = 0;
  *(unsigned char *)(a2 + 9) = 0;
  uint64_t v25 = (_OWORD *)(a2 + 16);
  do
  {
    int v26 = v24;
    if (LOBYTE(a3[31 * v24 + 30]))
    {
      int v27 = a3[31 * v24];
      *(_DWORD *)(a2 + 4) = v27;
      switch((char)v27)
      {
        case 1:
        case 5:
          int v28 = &a3[31 * v26];
          int v30 = *((unsigned __int8 *)v28 + 4);
          double v29 = v28 + 1;
          if (v30)
          {
            if (*((unsigned __int8 *)v29 + 2) <= 5u && *((_WORD *)v29 + 2))
            {
              long long v31 = *(_OWORD *)(v29 + 2);
              long long v32 = *(_OWORD *)(v29 + 6);
              *(void *)(a2 + 48) = *((void *)v29 + 5);
              _OWORD *v25 = v31;
              *(_OWORD *)(a2 + 32) = v32;
              *(_WORD *)(a2 + 56) = *((_WORD *)v29 + 2);
              if (v27 == 5)
              {
                if (!*(unsigned char *)(a4 + 45))
                {
                  uint64_t v41 = BYTE2(v27) - 193;
                  if (!*(unsigned char *)(*(void *)(a4 + 496) + v41))
                  {
                    *(unsigned char *)(a2 + 8) = v41;
                    DD_Proc_QZSS_Data(a1, a2, a6, (int *)&v52, (void *)a7);
                  }
                }
              }
              else if (v27 == 1 && !*(unsigned char *)(a4 + 43))
              {
                uint64_t v33 = BYTE2(v27) - 1;
                if (!*(unsigned char *)(*(void *)(a4 + 480) + v33))
                {
                  *(unsigned char *)(a2 + 8) = v33;
                  DD_Proc_GPS_Data(a1, a2, a6, (int *)&v52, a7);
                }
              }
            }
            goto LABEL_56;
          }
          break;
        case 2:
          uint64_t v34 = &a3[31 * v26];
          int v35 = *((unsigned __int8 *)v34 + 4);
          double v29 = v34 + 1;
          if (v35)
          {
            if (!*((unsigned char *)v29 + 2)
              || *(unsigned char *)(a4 + 44)
              || (__int16 v38 = *((char *)v29 + 1),
                  uint64_t v39 = *(int *)(a7 + 4 * (unsigned __int16)(v38 + 7) + 17424),
                  v39 != 2139062143)
              && *(unsigned char *)(v39 + *(void *)(a4 + 488) - 1))
            {
              if (g_Logging_Cfg >= 6) {
                EvLog_v("SV_Data_Decode:  Glonass String Parity Fail %d  %x %x %x");
              }
            }
            else
            {
              *(unsigned char *)(a2 + 58) = v38;
              _OWORD *v25 = 0u;
              *(_OWORD *)(a2 + 32) = 0u;
              *(void *)(a2 + 48) = 0;
              uint64_t v40 = *(void *)(v29 + 1);
              *(_DWORD *)(a2 + 24) = v29[3];
              *(void *)uint64_t v25 = v40;
              *(unsigned char *)(a2 + 15) = *((unsigned char *)v29 + 3);
              if ((v38 + 7) <= 0xDu) {
                DD_Proc_GLON_Data(a1, a2, (_DWORD *)a4, a6, (int *)&v52, a7);
              }
            }
            goto LABEL_56;
          }
          break;
        case 4:
          double v36 = &a3[31 * v26];
          int v37 = *((unsigned __int8 *)v36 + 4);
          double v29 = v36 + 1;
          if (v37)
          {
            if (!*(unsigned char *)(a4 + 47) && !*(unsigned char *)(*(void *)(a4 + 512) + BYTE2(v27) - 1))
            {
              if (*((unsigned char *)v29 + 3))
              {
                *(_OWORD *)(a2 + 66) = *(_OWORD *)(v29 + 1);
                long long v42 = *(_OWORD *)(v29 + 5);
                long long v43 = *(_OWORD *)(v29 + 9);
                long long v44 = *(_OWORD *)(v29 + 13);
                *(_OWORD *)(a2 + 125) = *(_OWORD *)((char *)v29 + 63);
                *(_OWORD *)(a2 + 98) = v43;
                *(_OWORD *)(a2 + 114) = v44;
                *(_OWORD *)(a2 + 82) = v42;
                long long v45 = *(_OWORD *)((char *)v29 + 79);
                long long v46 = *(_OWORD *)((char *)v29 + 95);
                *(unsigned char *)(a2 + 173) = *((unsigned char *)v29 + 111);
                *(_OWORD *)(a2 + 141) = v45;
                *(_OWORD *)(a2 + 157) = v46;
                *(_WORD *)(a2 + 64) = *((_WORD *)v29 + 1);
                *(unsigned char *)(a2 + 178) = *((unsigned char *)v29 + 112);
                *(unsigned char *)(a2 + 8) = BYTE2(v27) - 1;
                DD_Proc_BDS_Data(a1, a2, a4, a6, &v52, (void *)a7);
              }
              else if (g_Logging_Cfg >= 6)
              {
                EvLog_v("SV_Data_Decode:  BeiDou B1C SF1 checksum failed");
              }
            }
LABEL_56:
            *(unsigned char *)double v29 = 0;
          }
          break;
        case 7:
          EvLog("SV_Data_Decode: SBAS Data decoding is NOT Supported.");
          break;
        default:
          break;
      }
    }
    unsigned __int8 v47 = *(unsigned char *)(a2 + 9) + 1;
    unsigned __int8 v24 = v47;
    *(unsigned char *)(a2 + 9) = v47;
  }
  while ((v47 & 0x80) == 0);
  DD_Save_New_GPS_Eph(v52, a1 + 288, a1 + 3552, v49, (uint64_t *)a7);
  DD_Save_New_QZSS_Eph(v52, a1 + 3676, a1 + 4696, a1 + 3644, (void *)a7);
  DD_Save_New_GLON_Eph(v52, *(_DWORD *)(a6 + 76), *(_DWORD *)(a2 + 60), a7, a1);
  DD_Save_New_GLON_Alm(v52, (void *)a7, a1);
  DD_Save_New_BDS_Eph(v52, (void *)a7, a1);
  if (!*(_DWORD *)(a7 + 62368))
  {
    int v51 = 0;
    API_Get_Next_Leap_Second((unsigned int *)(a7 + 62368), (signed __int8 *)(a7 + 62372), &v51);
    if ((v51 - 1) <= 0x7FFFFFFD) {
      API_Get_UTC_Cor(0, (double *)(a7 + 62376));
    }
  }
  DD_Check_Age_GPS_Data(v52, a1, a1 + 224, v49, a7);
  DD_Check_Age_QZSS_Data(v52, a1 + 3584, a1 + 3654, a1 + 3644, (void *)a7);
  DD_Check_Age_GLON_Data((int *)a6, (void *)a7, v48);
  DD_Check_GLON_Strings(*(unsigned int *)(a6 + 76), *(_DWORD *)(a2 + 60), a1, a7);
  DD_LS_Delete_EphAlm_Str((char *)*(unsigned int *)(a7 + 62368), a6, a1);
  DD_Check_Age_BDS_Data((char *)v52, a7);
  if (DD_Check_Age_GAL_Data(v52, (void *)a7)) {
    DD_Delete_Bad_GAL_Data((void *)a7);
  }
  DD_Check_Age_NVIC_Data((char *)v52, a7);
  if (*(unsigned char *)(a4 + 22)) {
    DD_Assist_GPS_Data(a1, v52, a7, a4);
  }
  if (*(unsigned char *)(a4 + 24)) {
    DD_Assist_QZSS_Data(a1, v52, (void *)a7, a4);
  }
  if (*(unsigned char *)(a4 + 23)) {
    DD_Assist_GLON_Data(v52, a5, (void *)a7, a4);
  }
  if (*(unsigned char *)(a4 + 26)) {
    DD_Assist_BDS_Data(v52, a5, (void *)a7, a4);
  }
  if (*(unsigned char *)(a4 + 27)) {
    DD_Assist_GAL_Data(v52, a5, a7, a4);
  }
  if (*(unsigned char *)(a4 + 28)) {
    DD_Assist_NVIC_Data(v52, a5, a7, a4);
  }
}

void GncP16_01StopStateHndlrTimer(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((_BYTE)qword_26A9CA1E8)
  {
    if (AgpsFsmStopTimer(8656390))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v0 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP16_01StopStateHndlrTimer", 1545);
        int v1 = 2;
LABEL_7:
        gnssOsa_PrintLog(__str, v1, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: State,%hhu,TimerStarted,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP16_01StopStateHndlrTimer", g_GncPStateInfo, HIDWORD(qword_26A9CA1E8));
      int v1 = 5;
      goto LABEL_7;
    }
    LOBYTE(qword_26A9CA1E8) = 0;
    HIDWORD(qword_26A9CA1E8) = 0;
  }
}

void GncP16_02StartStateHndlrTimer(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  GncP16_01StopStateHndlrTimer();
  if (AgpsFsmStartTimer(0x841606u, a1))
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP16_02StartStateHndlrTimer", 1544, a1);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    LOBYTE(qword_26A9CA1E8) = 0;
  }
  else
  {
    LOBYTE(qword_26A9CA1E8) = 1;
    HIDWORD(qword_26A9CA1E8) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                * (double)mach_continuous_time());
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: State,%hhu,DueTime,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP16_02StartStateHndlrTimer", g_GncPStateInfo, a1);
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void GncP16_11StartME(int a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  GncP02_13ClearMEBuf();
  LOBYTE(g_GncPStateInfo) = 6;
  uint64_t v2 = gnssOsa_Calloc("GncP16_09SendWakeMEReqtoGnm", 177, 1, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    v2[12] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ =>GNM GNSS FW NV restore,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP16_09SendWakeMEReqtoGnm", a1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 128, 8653056, v3);
  }
  uint64_t v5 = 0;
  char v6 = 0;
  unsigned int v7 = -1;
  char v8 = 1;
  do
  {
    while (1)
    {
      char v9 = v8;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v5 + 8) != 1 || *((unsigned char *)&g_GncPCntxtInfo + 36 * v5 + 4) != 1) {
        break;
      }
      char v8 = 0;
      unsigned int v10 = *((_DWORD *)&g_GncPCntxtInfo + 9 * v5 + 6);
      if (v10 < v7) {
        unsigned int v7 = v10;
      }
      uint64_t v5 = 1;
      char v6 = 1;
      if ((v9 & 1) == 0) {
        goto LABEL_15;
      }
    }
    char v8 = 0;
    uint64_t v5 = 1;
  }
  while ((v9 & 1) != 0);
  if ((v6 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_15:
  if (v7 <= 0x3E7)
  {
    HSW_SetFixInterval((unsigned __int16)v7);
    goto LABEL_18;
  }
LABEL_17:
  HSW_SetFixInterval(0xC8u);
  BYTE5(g_GncPStateInfo) = 1;
LABEL_18:
  GN_GPS_WakeUp();
  dword_26A9CA1E4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  byte_26A9CA1E0 = 1;
  byte_26A9CA1D8 = 0;
  GncP16_01StopStateHndlrTimer();
}

double GncP16_13CheckStopME(unsigned int a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = mach_continuous_time();
  if (BYTE2(g_GncPStateInfo)) {
    BOOL v5 = BYTE3(g_GncPStateInfo) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    LOBYTE(g_GncPStateInfo) = 9;
  }
  int v6 = byte_26A9CA1D8 | BYTE1(g_GncPStateInfo);
  BOOL v7 = v6 != 0;
  if (BYTE6(g_GncPStateInfo))
  {
    double result = *(double *)&g_MacClockTicksToMsRelation * (double)v2;
    if (v6) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = ((unint64_t)result - HIDWORD(g_GncPStateInfo)) >> 3 >= 0x271;
    }
    BOOL v7 = !v8;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FG,%u,BG,%u,FA,%u,FW,%u,LastAsstTick,%u,LastSleepTick,%u,MEOn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP16_13CheckStopME", BYTE3(g_GncPStateInfo), BYTE4(g_GncPStateInfo), BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo), HIDWORD(g_GncPStateInfo), dword_26A9CA1DC, v7);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!v7) {
    return GncP16_10StopME(0, a1, v3);
  }
  return result;
}

double GncP16_10StopME(char a1, unsigned int a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1) {
    unsigned int SleepTimeout = 0;
  }
  else {
    unsigned int SleepTimeout = HSW_GetSleepTimeout();
  }
  GN_GPS_Sleep(SleepTimeout, a2, a3);
  if (g_GncPStateInfo == 9)
  {
    GncP16_01StopStateHndlrTimer();
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: State,%hhu,PE Sleep not ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP16_10StopME", g_GncPStateInfo);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  else
  {
    GncP03_SendGNSSSleepRequest(SleepTimeout, a2);
    if (SleepTimeout) {
      char v7 = 1;
    }
    else {
      char v7 = 3;
    }
    LOBYTE(g_GncPStateInfo) = v7;
    GncP16_02StartStateHndlrTimer(0x3E8u);
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME to Sleep,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 77, "GncP16_10StopME", SleepTimeout, a2);
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    double result = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    dword_26A9CA1DC = (unint64_t)result;
    byte_26A9CA1D8 = 1;
    byte_26A9CA1E0 = 0;
  }
  return result;
}

BOOL GncP16_15CheckStopMEClearReq(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FG,%u,FA,%u,SA,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP16_15CheckStopMEClearReq", BYTE3(g_GncPStateInfo), BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v4 = BYTE1(g_GncPStateInfo) | BYTE2(g_GncPStateInfo) | BYTE3(g_GncPStateInfo);
  BOOL v5 = v4 == 0;
  if (!v4)
  {
    GncP16_10StopME(1, 0, a3);
    LOBYTE(g_GncPStateInfo) = 11;
  }
  return v5;
}

void GncP16_16NewSessUpdtMEFixInt(void)
{
  uint64_t v0 = 0;
  char v1 = 0;
  unsigned int v2 = -1;
  char v3 = 1;
  do
  {
    while (1)
    {
      char v4 = v3;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 8) != 1 || *((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 4) != 1) {
        break;
      }
      char v3 = 0;
      unsigned int v5 = *((_DWORD *)&g_GncPCntxtInfo + 9 * v0 + 6);
      if (v5 < v2) {
        unsigned int v2 = v5;
      }
      uint64_t v0 = 1;
      char v1 = 1;
      if ((v4 & 1) == 0) {
        goto LABEL_11;
      }
    }
    char v3 = 0;
    uint64_t v0 = 1;
  }
  while ((v4 & 1) != 0);
  if ((v1 & 1) == 0) {
    return;
  }
LABEL_11:
  if (v2 <= 0x3E7)
  {
    if (BYTE5(g_GncPStateInfo))
    {
      if (v2 < HIWORD(qword_26A9A1980))
      {
        HSW_SetFixInterval((unsigned __int16)v2);
        BYTE5(g_GncPStateInfo) = 0;
      }
    }
    else
    {
      HSW_SetFixInterval((unsigned __int16)v2);
    }
  }
}

void GncP16_17HandleInvalidState(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu,FA,%u,SA,%u,FG,%u,BG,%u,QFI,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 69, "GncP16_17HandleInvalidState", 260, g_GncPStateInfo, BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo), BYTE3(g_GncPStateInfo), BYTE4(g_GncPStateInfo), BYTE5(g_GncPStateInfo));
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  snprintf(v2, 0x64uLL, "ASSERT: GNCState %d", g_GncPStateInfo);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "OSA", 69, "GncP16_17HandleInvalidState", v2);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  gnssOsa_FlushLog();
  __assert_rtn("GncP16_17HandleInvalidState", "gncpe16StateHndlr.cpp", 449, "false && \"Invalid State\"");
}

void GncP16_21ChkFWActRspPend(char a1)
{
  if (BYTE7(g_GncPStateInfo))
  {
    GncP03_13SendStopFWActResp(a1, 1);
    BYTE7(g_GncPStateInfo) = 0;
  }
  if (BYTE8(g_GncPStateInfo))
  {
    GncP03_13SendStopFWActResp(a1, 3);
    BYTE8(g_GncPStateInfo) = 0;
  }
}

void GncP16_23UpdateStateFGSession(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = g_GncPStateInfo;
  BYTE3(g_GncPStateInfo) = a1;
  if (a1) {
    BYTE6(g_GncPStateInfo) = 0;
  }
  switch((char)g_GncPStateInfo)
  {
    case 0:
    case 2:
    case 4:
    case 9:
      if (a1) {
        GncP16_11StartME(1);
      }
      break;
    case 1:
    case 3:
      if (a1) {
        LOBYTE(g_GncPStateInfo) = 5;
      }
      break;
    case 5:
    case 6:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
      break;
    case 7:
      if (GncP16_12IsAwakeFGStateReq()) {
        GncP16_16NewSessUpdtMEFixInt();
      }
      else {
        GncP16_13CheckStopME(0);
      }
      break;
    case 8:
      if (a1)
      {
        LOBYTE(g_GncPStateInfo) = 7;
        GncP16_16NewSessUpdtMEFixInt();
        GncP16_04RestartMEWdt();
      }
      break;
    default:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP16_23UpdateStateFGSession", 262, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP16_17HandleInvalidState();
  }
  if (v1 != g_GncPStateInfo && g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v4 = 89;
    if (!BYTE3(g_GncPStateInfo)) {
      uint64_t v4 = 78;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,FGSessActive,%c\n", (unint64_t)v3, "GNC", 73, "GncP16_23UpdateStateFGSession", 261, v1, g_GncPStateInfo, v4);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

BOOL GncP16_12IsAwakeFGStateReq(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = 1;
  if (!(BYTE3(g_GncPStateInfo) | BYTE1(g_GncPStateInfo)))
  {
    if (!BYTE6(g_GncPStateInfo)
      || (int v0 = HIDWORD(g_GncPStateInfo),
          (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
        - v0 > 0x1388))
    {
      BOOL v1 = 0;
    }
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FG,%u,BG,%u,FA,%u,FW,%u,LastAsstTick,%u,LastSleepTick,%u,Ret,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP16_12IsAwakeFGStateReq", BYTE3(g_GncPStateInfo), BYTE4(g_GncPStateInfo), BYTE1(g_GncPStateInfo), BYTE2(g_GncPStateInfo), HIDWORD(g_GncPStateInfo), dword_26A9CA1DC, v1);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return v1;
}

void GncP16_04RestartMEWdt(void)
{
  GncP16_01StopStateHndlrTimer();
  if (!(_BYTE)qword_26A9CA1E8)
  {
    GncP16_02StartStateHndlrTimer(0xBB8u);
  }
}

void GncP16_25UpdateStateTimerExpiry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v3 = g_GncPStateInfo;
  LOBYTE(qword_26A9CA1E8) = 0;
  switch((char)g_GncPStateInfo)
  {
    case 0:
      GncP16_10StopME(1, 0, a3);
      goto LABEL_13;
    case 1:
    case 3:
    case 5:
    case 11:
    case 16:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NoAck State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP16_25UpdateStateTimerExpiry", 1298, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP04_21SendClearGnssAck(0);
      GncP04_19SendPosEvntResp(4);
      GncP16_21ChkFWActRspPend(0);
      dword_26A9CA1DC = 0;
      byte_26A9CA1D8 = 0;
      if ((g_GncPStateInfo & 0xFD) == 1) {
        uint64_t v5 = "Sleep ACK delayed";
      }
      else {
        uint64_t v5 = "Timeout in state transition";
      }
      goto LABEL_12;
    case 2:
      LOBYTE(g_GncPStateInfo) = 4;
      dword_26A9CA1DC = 0;
      byte_26A9CA1D8 = 0;
      goto LABEL_13;
    case 4:
    case 6:
    case 9:
    case 10:
    case 15:
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v6 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerExp NotHandled in State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP16_25UpdateStateTimerExpiry", g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      goto LABEL_13;
    case 7:
    case 8:
    case 14:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No ME data, LastReadMEData,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP16_25UpdateStateTimerExpiry", g_GncPMeData);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      uint64_t v5 = "No ME Data";
LABEL_12:
      GncP08_03HandleHardReset(v5);
LABEL_13:
      if (v3 != g_GncPStateInfo && g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP16_25UpdateStateTimerExpiry", 261, v3, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return;
    default:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GncP16_25UpdateStateTimerExpiry", 262, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP16_17HandleInvalidState();
  }
}

void GncP16_26UpdateStateMEDataRcvd(void)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v0 = g_GncPStateInfo;
  if (BYTE5(g_GncPStateInfo)) {
    BOOL v1 = byte_26A9CA1E0 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    goto LABEL_11;
  }
  int v2 = dword_26A9CA1E4;
  if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v2 < 0x61A9)
  {
    int v4 = dword_26A9CA1E4;
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v4 < 0x1389
      || HIWORD(qword_26A9A1980) != 200)
    {
      goto LABEL_11;
    }
    unsigned int v3 = 500;
  }
  else
  {
    BYTE5(g_GncPStateInfo) = 0;
    unsigned int v3 = 1000;
  }
  HSW_SetFixInterval(v3);
LABEL_11:
  switch((char)g_GncPStateInfo)
  {
    case 0:
    case 1:
    case 3:
    case 5:
    case 11:
    case 14:
    case 15:
    case 16:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEData NotHandled in State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP16_26UpdateStateMEDataRcvd", g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      goto LABEL_32;
    case 2:
    case 4:
      goto LABEL_31;
    case 6:
      LOBYTE(g_GncPStateInfo) = 7;
      GncP04_19SendPosEvntResp(8);
      goto LABEL_29;
    case 7:
      if (!GncP16_12IsAwakeFGStateReq()) {
        GncP16_13CheckStopME(0);
      }
      goto LABEL_29;
    case 8:
      HSW_SetFixInterval(0x3E8u);
      if (GncP16_12IsAwakeFGStateReq())
      {
        LOBYTE(g_GncPStateInfo) = 7;
LABEL_29:
        GncP16_04RestartMEWdt();
        goto LABEL_32;
      }
      if (BYTE4(g_GncPStateInfo)) {
        goto LABEL_29;
      }
      GncP16_01StopStateHndlrTimer();
LABEL_31:
      GncP16_13CheckStopME(0);
LABEL_32:
      if (v0 != g_GncPStateInfo && g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP16_26UpdateStateMEDataRcvd", 261, v0, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return;
    case 9:
      if (!BYTE2(g_GncPStateInfo)) {
        goto LABEL_31;
      }
      goto LABEL_32;
    case 10:
      if (qword_26AA2DEE8)
      {
        if (*(_DWORD *)qword_26AA2DEE8)
        {
          if (!byte_26A9CA1D8
            || (int v6 = dword_26A9CA1DC,
                (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
              - v6 >= 0xC9))
          {
            GncP16_01StopStateHndlrTimer();
            GncP16_10StopME(1, 0, v7);
            if (BYTE3(g_GncPStateInfo) || BYTE4(g_GncPStateInfo) | BYTE2(g_GncPStateInfo)) {
              LOBYTE(g_GncPStateInfo) = 11;
            }
          }
        }
      }
      goto LABEL_32;
    default:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GncP16_26UpdateStateMEDataRcvd", 262, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP16_17HandleInvalidState();
  }
}

void GncP16_27UpdateStateClearNVReqRcvd(const char *__src, size_t __n, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = g_GncPStateInfo;
  if (g_GncPStateInfo > 0x10u) {
    goto LABEL_18;
  }
  if (((1 << g_GncPStateInfo) & 0x1083F) != 0)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: state added %hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP16_27UpdateStateClearNVReqRcvd", g_GncPStateInfo);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    goto LABEL_11;
  }
  if (((1 << g_GncPStateInfo) & 0xC640) != 0)
  {
    if (g_LbsOsaTrace_Config < 4) {
      goto LABEL_12;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ClearNV NotHandled in State,%hhu\n");
    goto LABEL_8;
  }
  if (((1 << g_GncPStateInfo) & 0x180) == 0)
  {
LABEL_18:
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP16_27UpdateStateClearNVReqRcvd", 262, g_GncPStateInfo);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    GncP16_17HandleInvalidState();
  }
  if (GncP16_15CheckStopMEClearReq((uint64_t)__src, __n, a3))
  {
LABEL_11:
    GncP16_06ClearNVStore(__src, __n);
    goto LABEL_12;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ClearNV NotHandled GPS running State,%hhu\n");
LABEL_8:
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
LABEL_12:
  if (v3 != g_GncPStateInfo && g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,Reset,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP16_27UpdateStateClearNVReqRcvd", 261, v3, g_GncPStateInfo, __src);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

void GncP16_06ClearNVStore(const char *__src, size_t __n)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (__n <= 0xF)
  {
    int v2 = (unsigned __int8 *)qword_26AA2DEF8;
    if (qword_26AA2DEF8)
    {
      *(void *)__dst = 0;
      uint64_t v4 = 0;
      strncpy_s(__dst, 0x10u, __src, __n);
      GN_GPS_Clear_NV_Data(v2, __dst);
      bzero(g_GncP_PEUpdate, 0x18F0uLL);
    }
  }
}

void GncP16_28UpdateStateResetStatus(int a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v2 = g_GncPStateInfo;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: State,%hhu,Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP16_28UpdateStateResetStatus", g_GncPStateInfo, a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  switch(a1)
  {
    case 0:
      char v4 = 14;
      goto LABEL_12;
    case 1:
      if (g_GncPStateInfo != 14) {
        goto LABEL_25;
      }
      goto LABEL_23;
    case 2:
      if (g_GncPStateInfo == 14) {
        LOBYTE(g_GncPStateInfo) = 15;
      }
      goto LABEL_25;
    case 3:
      char v4 = 15;
LABEL_12:
      LOBYTE(g_GncPStateInfo) = v4;
      GncP04_19SendPosEvntResp(5);
      goto LABEL_25;
    case 4:
      if (g_GncPStateInfo != 15 || g_LbsOsaTrace_Config == 0) {
        goto LABEL_25;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HW Error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "GncP16_28UpdateStateResetStatus", 1308);
      int v6 = 1;
      goto LABEL_18;
    case 5:
      if ((_BYTE)g_GncPStateInfo)
      {
        if (g_GncPStateInfo == 15)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v9 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HW Ready\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP16_28UpdateStateResetStatus", 1307);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
LABEL_23:
          GncP16_11StartME(1);
        }
      }
      else
      {
        GncP16_02StartStateHndlrTimer(0x3E8u);
      }
      goto LABEL_25;
    default:
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_25;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP16_28UpdateStateResetStatus", 770, a1);
      int v6 = 2;
LABEL_18:
      gnssOsa_PrintLog(__str, v6, 1, 0);
LABEL_25:
      if (v2 != g_GncPStateInfo && g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GncP16_28UpdateStateResetStatus", 261, v2, g_GncPStateInfo, a1);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return;
  }
}

void GncP16_31UpdateStateMEPowerState(unsigned int a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v1 = g_GncPStateInfo;
  g_DeRegGnssCount = 0;
  switch((char)g_GncPStateInfo)
  {
    case 0:
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 14:
    case 15:
      if (g_LbsOsaTrace_Config < 4) {
        goto LABEL_18;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEPowerState,%hhu NotHandled in State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP16_31UpdateStateMEPowerState", a1, g_GncPStateInfo);
      int v4 = 4;
      goto LABEL_4;
    case 1:
      if ((a1 & 0xFFFFFFFB) == 3)
      {
        LOBYTE(g_GncPStateInfo) = 2;
        dword_26A9CA1DC = 0;
        byte_26A9CA1D8 = 0;
        GncP16_01StopStateHndlrTimer();
        int SleepTimeout = HSW_GetSleepTimeout();
        if (SleepTimeout) {
          GncP16_02StartStateHndlrTimer(1000 * SleepTimeout);
        }
        goto LABEL_18;
      }
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_18;
      }
      bzero(__str, 0x3C6uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Expected,SLEEP,MEResp,%hhu\n", v10);
      goto LABEL_34;
    case 3:
      if (a1 > 7 || ((1 << a1) & 0xB0) == 0) {
        goto LABEL_30;
      }
      LOBYTE(g_GncPStateInfo) = 4;
      dword_26A9CA1DC = 0;
      byte_26A9CA1D8 = 0;
      GncP16_01StopStateHndlrTimer();
      goto LABEL_18;
    case 5:
    case 11:
      if (a1 <= 7 && ((1 << a1) & 0xB8) != 0)
      {
        GncP04_19SendPosEvntResp(3);
        GncP16_21ChkFWActRspPend(1);
        GncP04_21SendClearGnssAck(1);
        dword_26A9CA1DC = 0;
        byte_26A9CA1D8 = 0;
        int v5 = 1;
        goto LABEL_17;
      }
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_18;
      }
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Expected,SLEEP COMA,MEResp,%hhu\n", v12);
      goto LABEL_34;
    case 16:
      if (a1 <= 7 && ((1 << a1) & 0xB8) != 0)
      {
        GncP04_19SendPosEvntResp(3);
        GncP16_21ChkFWActRspPend(1);
        GncP04_21SendClearGnssAck(1);
        dword_26A9CA1DC = 0;
        byte_26A9CA1D8 = 0;
        int v5 = 0;
LABEL_17:
        GncP16_11StartME(v5);
      }
      else
      {
LABEL_30:
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Expected,COMA,MEResp,%hhu\n", v11);
LABEL_34:
          int v4 = 2;
LABEL_4:
          gnssOsa_PrintLog(__str, v4, 1, 0);
        }
      }
LABEL_18:
      if (v1 != g_GncPStateInfo)
      {
        if (g_GncPStateInfo == 4 || g_GncPStateInfo == 2)
        {
          GncP04_21SendClearGnssAck(1);
          GncP16_21ChkFWActRspPend(1);
          GncP04_19SendPosEvntResp(3);
        }
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v8 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,MEPowerState,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP16_31UpdateStateMEPowerState", 261, v1, g_GncPStateInfo, a1);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
      }
      return;
    default:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP16_31UpdateStateMEPowerState", 262, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP16_17HandleInvalidState();
  }
}

void GncP16_33HandleFwActiveReq(int a1, int a2)
{
  char v3 = a1;
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = g_GncPStateInfo;
  int v5 = g_GncPStateInfo;
  switch(a2)
  {
    case 3:
      if (a1) {
        char v6 = BYTE2(g_GncPStateInfo) | 4;
      }
      else {
        char v6 = BYTE2(g_GncPStateInfo) & 0xFB;
      }
      goto LABEL_15;
    case 2:
      if (a1) {
        char v6 = BYTE2(g_GncPStateInfo) | 2;
      }
      else {
        char v6 = BYTE2(g_GncPStateInfo) & 0xFD;
      }
      goto LABEL_15;
    case 1:
      if (a1) {
        char v6 = BYTE2(g_GncPStateInfo) | 1;
      }
      else {
        char v6 = BYTE2(g_GncPStateInfo) & 0xFE;
      }
LABEL_15:
      BYTE2(g_GncPStateInfo) = v6;
      goto LABEL_16;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP16_33HandleFwActiveReq", 770);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    int v5 = g_GncPStateInfo;
  }
LABEL_16:
  switch(v5)
  {
    case 0:
      if (!BYTE2(g_GncPStateInfo)) {
        break;
      }
      LOBYTE(g_GncPStateInfo) = 9;
      if (a2 != 2) {
        break;
      }
      goto LABEL_33;
    case 1:
    case 3:
      if (!BYTE2(g_GncPStateInfo)) {
        break;
      }
      char v8 = 5;
      goto LABEL_21;
    case 2:
    case 4:
      if (!BYTE2(g_GncPStateInfo)) {
        break;
      }
      char v8 = 9;
LABEL_21:
      LOBYTE(g_GncPStateInfo) = v8;
      break;
    case 5:
    case 6:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
      break;
    case 7:
      if (BYTE2(g_GncPStateInfo) || GncP16_12IsAwakeFGStateReq()) {
        break;
      }
      goto LABEL_33;
    case 8:
      if (!BYTE2(g_GncPStateInfo)) {
        goto LABEL_33;
      }
      break;
    case 9:
      if (BYTE2(g_GncPStateInfo)) {
        break;
      }
      if ((a2 & 0xFFFFFFFD) == 1) {
        LOBYTE(g_GncPStateInfo) = 7;
      }
LABEL_33:
      GncP16_13CheckStopME(0);
      break;
    default:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP16_33HandleFwActiveReq", 262, g_GncPStateInfo);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP16_17HandleInvalidState();
  }
  if (v4 != g_GncPStateInfo && g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu,FWAct,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP16_33HandleFwActiveReq", 261, v4, g_GncPStateInfo, BYTE2(g_GncPStateInfo));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if ((v3 & 1) == 0)
  {
    if ((g_GncPStateInfo & 0xFD) == 1)
    {
      if (a2 == 3)
      {
        BYTE8(g_GncPStateInfo) = 1;
        return;
      }
      if (a2 == 1)
      {
        BYTE7(g_GncPStateInfo) = 1;
        return;
      }
    }
    GncP03_13SendStopFWActResp(1, a2);
  }
}

BOOL GncP16_34HandleRestartAcq(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v3 = g_GncPStateInfo;
  if (g_GncPStateInfo > 0x10u) {
    goto LABEL_18;
  }
  if (((1 << g_GncPStateInfo) & 0xCE7F) != 0)
  {
    if (g_LbsOsaTrace_Config < 4) {
      goto LABEL_8;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NotHandled State,%hhu\n");
    goto LABEL_5;
  }
  if (((1 << g_GncPStateInfo) & 0x180) != 0)
  {
    GncP16_10StopME(1, 0, a3);
    LOBYTE(g_GncPStateInfo) = 16;
    goto LABEL_8;
  }
  if (g_GncPStateInfo != 16)
  {
LABEL_18:
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP16_34HandleRestartAcq", 262, g_GncPStateInfo);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    GncP16_17HandleInvalidState();
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", v9);
LABEL_5:
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
LABEL_8:
  int v4 = g_GncPStateInfo;
  if (v3 != g_GncPStateInfo && g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP16_34HandleRestartAcq", 261, v3, g_GncPStateInfo);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return v3 != v4;
}

void GncP16_51MEPowerStateInd(char a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = gnssOsa_Calloc("GncP16_51MEPowerStateInd", 1278, 1, 0x10uLL);
  if (v2)
  {
    int v3 = v2;
    v2[12] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_POWER_STATE_IND =>GNCP Stat,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP16_51MEPowerStateInd", v3[12]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8655107, v3);
  }
}

uint64_t GncP16_52HandleMEPowerStateInd(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_POWER_STATE_IND Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_52HandleMEPowerStateInd", *(unsigned __int8 *)(a1 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    GncP16_31UpdateStateMEPowerState(*(unsigned __int8 *)(a1 + 12));
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP16_52HandleMEPowerStateInd", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP16_54HandleMEWakeResp(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_RSP Resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_54HandleMEWakeResp", *(unsigned __int8 *)(a1 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (*(unsigned char *)(a1 + 12))
    {
      if (g_GncPStateInfo == 6)
      {
        LOBYTE(g_GncPStateInfo) = 7;
        GncP04_19SendPosEvntResp(8);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v3 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEState,%hhu->%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP16_54HandleMEWakeResp", 261, 6, g_GncPStateInfo);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        GncP16_04RestartMEWdt();
      }
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEWake Error,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP16_54HandleMEWakeResp", *(unsigned __int8 *)(a1 + 12));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP04_19SendPosEvntResp(9);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP16_54HandleMEWakeResp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP16_55HandleStartFwActiveInd(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_FW_ACTIVE_IND Activity,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_55HandleStartFwActiveInd", *(unsigned __int8 *)(a1 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    GncP16_33HandleFwActiveReq(1, *(unsigned __int8 *)(a1 + 12));
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP16_55HandleStartFwActiveInd", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP16_56HandleStopFwActiveReq(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_STOP_FW_ACTIVE_REQ Activity,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP16_56HandleStopFwActiveReq", *(unsigned __int8 *)(a1 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    GncP16_33HandleFwActiveReq(0, *(unsigned __int8 *)(a1 + 12));
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP16_56HandleStopFwActiveReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void GncP16_99DeInitStateHndlr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (g_GncPStateInfo - 7 <= 1) {
    GncP16_10StopME(1, 0, a3);
  }
  if ((_BYTE)qword_26A9CA1E8)
  {
    AgpsFsmStopTimer(8656390);
  }
}

uint64_t NK_Tunnel_Assist(uint64_t a1, int *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v20 = 0u;
  *(_OWORD *)uint64_t v21 = 0u;
  uint64_t v4 = a2 + 15579;
  long long v18 = 0u;
  long long v19 = 0u;
  if ((Core_Get_ExtA_TunnelEP(30000, &v18) & 1) == 0)
  {
    uint64_t result = 0;
    *(unsigned char *)uint64_t v4 = 0;
    return result;
  }
  uint64_t v5 = (int *)(a1 + 27200);
  *(unsigned char *)uint64_t v4 = 1;
  int v6 = v18;
  v4[3] = a2[1] - v18;
  if (!*(unsigned char *)(a1 + 27250))
  {
    uint64_t result = 0;
    int v8 = 38;
    goto LABEL_14;
  }
  if (v6 == *v5)
  {
    uint64_t result = 0;
    int v8 = 39;
LABEL_14:
    v4[1] = v8;
    return result;
  }
  if (*((unsigned __int8 *)a2 + 6755) < 3u)
  {
    uint64_t result = 0;
    int v8 = 40;
    goto LABEL_14;
  }
  LOWORD(v9) = WORD4(v20);
  double v11 = *((double *)&v19 + 1);
  double v10 = *(double *)&v20;
  if (!WORD4(v20))
  {
    if (vabdd_f64(*((double *)&v19 + 1), *(double *)&v20) >= 1.0)
    {
      LOWORD(v9) = 0;
    }
    else
    {
      double v11 = *((double *)&v19 + 1) + *((double *)&v19 + 1);
      double v10 = *(double *)&v20 * 0.5;
      int v9 = (int)*(double *)(a1 + 27328);
      if (v9 > 179) {
        LOWORD(v9) = v9 - 180;
      }
    }
  }
  double v12 = *((double *)&v18 + 1);
  double v13 = *(double *)&v19;
  int v14 = (__int16)v9;
  uint64_t v15 = BYTE10(v20);
  long long v16 = *(_OWORD *)v21;
  EvLog_v("NK_Tunnel_Assist: Applying %d LL %g %g %d %d %d H %d %f %d", v6, *((double *)&v18 + 1), *(double *)&v19, (int)v11, (int)v10, (__int16)v9, BYTE10(v20), v21[0], (int)v21[1]);
  *((unsigned char *)a2 + 60200) = 1;
  a2[15053] = 0;
  *((unsigned char *)a2 + 60216) = 0;
  int v17 = *a2;
  a2[15055] = *a2;
  *((double *)a2 + 7528) = v12 * 0.0174532925;
  *((double *)a2 + 7529) = v13 * 0.0174532925;
  *((double *)a2 + 7531) = v11 * v11;
  *((double *)a2 + 7532) = v10 * v10;
  *((double *)a2 + 7533) = (double)v14 * 0.0174532925;
  *((double *)a2 + 7534) = v11 * v11;
  *((double *)a2 + 7535) = v10 * v10;
  *((void *)a2 + 7538) = 0x4039000000000000;
  *(void *)(a2 + 15051) = 0x300000001;
  if (v15)
  {
    *((unsigned char *)a2 + 60328) = 1;
    a2[15085] = 0;
    *((unsigned char *)a2 + 60344) = 0;
    a2[15087] = v17;
    *((void *)a2 + 7544) = v16;
    *((double *)a2 + 7545) = *((double *)&v16 + 1) * *((double *)&v16 + 1);
    *((double *)a2 + 7546) = *((double *)&v16 + 1) * *((double *)&v16 + 1);
    *((void *)a2 + 7548) = 0x4039000000000000;
    *(void *)(a2 + 15083) = 0x200000001;
  }
  *uint64_t v5 = v6;
  return 1;
}

double GLON_RK_CalcAccel(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  double v4 = **a1;
  double v5 = (*a1)[2] * (*a1)[2];
  double v6 = 1.0 / sqrt(v4 * v4 + (*a1)[1] * (*a1)[1] + v5);
  double v7 = v6 * v6;
  double v8 = v6 * (v6 * v6) * -3.9860044e14;
  double v9 = v7 * 6.60628282e10;
  double v10 = 1.0 - (v7 + v7 * 4.0) * v5;
  double v11 = v10 + 2.0;
  double v12 = v8 * (v9 * v10 + 1.0) + 0.00000000531749412;
  double v13 = a1[2];
  *a2 = *v13 + v3[1] * 0.0001458423 + v4 * v12;
  a2[1] = v13[1] + *v3 * -0.0001458423 + v2[1] * v12;
  double result = v13[2] + v2[2] * (v8 * (v9 * v11 + 1.0));
  a2[2] = result;
  return result;
}

void GLON_RungeKutta4(double **a1, int a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  memset(v55, 0, sizeof(v55));
  uint64_t v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  *(_OWORD *)&v37[16] = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  *(_OWORD *)int v37 = 0u;
  double v5 = *a1;
  double v4 = a1[1];
  long long v6 = *(_OWORD *)*a1;
  *(double *)int v37 = (*a1)[2];
  long long v36 = v6;
  uint64_t v7 = *((void *)v4 + 2);
  *(_OWORD *)&v37[8] = *(_OWORD *)v4;
  *(void *)&v37[24] = v7;
  double v8 = a1[2];
  long long v9 = *(_OWORD *)v8;
  uint64_t v39 = *((void *)v8 + 2);
  long long v38 = v9;
  uint64_t v10 = *((void *)v8 + 2);
  long long v53 = *(_OWORD *)v8;
  long long v48 = v9;
  uint64_t v56 = 0;
  v30[0] = (double *)&v50;
  v30[1] = (double *)&v51 + 1;
  v30[2] = (double *)&v53;
  v28[0] = (double *)&v45;
  v28[1] = (double *)&v46 + 1;
  int v31 = 0;
  int v29 = 0;
  int v27 = 0;
  int v25 = 0;
  v28[2] = (double *)&v48;
  v26[0] = (double *)&v40;
  v26[1] = (double *)&v41 + 1;
  int v26[2] = (double *)&v43;
  v24[0] = (double *)&v36;
  v24[1] = (double *)&v37[8];
  v24[2] = (double *)&v38;
  uint64_t v54 = v10;
  uint64_t v49 = v39;
  long long v43 = v9;
  uint64_t v44 = v39;
  *((_DWORD *)a1 + 6) += a2;
  GLON_RK_CalcAccel(v24, v35);
  *(_OWORD *)((char *)&v55[1] + 8) = *(_OWORD *)&v37[8];
  *((void *)&v55[2] + 1) = *(void *)&v37[24];
  double v11 = (double)a2;
  double v12 = (double)a2 * 0.5;
  for (uint64_t i = 5; i != 2; --i)
  {
    int v14 = (double *)((char *)&v50 + i * 8);
    *(v14 - 3) = v35[i] + v12 * *(double *)((char *)v55 + i * 8);
    *int v14 = *(double *)&v37[i * 8 - 16] + v12 * v34[i];
  }
  GLON_RK_CalcAccel(v30, v34);
  for (uint64_t j = 5; j != 2; --j)
  {
    long long v16 = (double *)((char *)&v45 + j * 8);
    *(v16 - 3) = v35[j] + v12 * *(double *)((char *)&v50 + j * 8);
    *long long v16 = *(double *)&v37[j * 8 - 16] + v12 * v33[j];
  }
  GLON_RK_CalcAccel(v28, v33);
  for (uint64_t k = 5; k != 2; --k)
  {
    long long v18 = (double *)((char *)&v40 + k * 8);
    *(v18 - 3) = v35[k] + v11 * *(double *)((char *)&v45 + k * 8);
    *long long v18 = *(double *)&v37[k * 8 - 16] + v11 * v32[k];
  }
  GLON_RK_CalcAccel(v26, v32);
  double v19 = *(double *)&v55[2];
  *double v5 = *(double *)&v36
      + v11
      * 0.166666667
      * (*((double *)&v41 + 1) + *((double *)&v55[1] + 1) + (*((double *)&v51 + 1) + *((double *)&v46 + 1)) * 2.0);
  v5[1] = *((double *)&v36 + 1)
        + v11 * 0.166666667 * (*(double *)&v42 + v19 + (*(double *)&v52 + *(double *)&v47) * 2.0);
  v5[2] = *(double *)v37
        + v11
        * 0.166666667
        * (*((double *)&v42 + 1) + *((double *)&v55[2] + 1) + (*((double *)&v52 + 1) + *((double *)&v47 + 1)) * 2.0);
  double v20 = v34[1];
  double v21 = v33[1];
  double v22 = v35[1];
  double v23 = v32[1];
  *double v4 = *(double *)&v37[8] + v11 * 0.166666667 * (v32[0] + v35[0] + (v34[0] + v33[0]) * 2.0);
  v4[1] = *(double *)&v37[16] + v11 * 0.166666667 * (v23 + v22 + (v20 + v21) * 2.0);
  v4[2] = *(double *)&v37[24] + v11 * 0.166666667 * (v32[2] + v35[2] + (v34[2] + v33[2]) * 2.0);
  GLON_RK_CalcAccel(a1, v8);
}

void NK_Heading(uint64_t a1, int *a2, unsigned int a3)
{
  double v4 = a2 + 19926;
  double v5 = a2 + 15256;
  uint64_t v6 = a1 + 27120;
  int v7 = *(unsigned __int8 *)(a1 + 27250);
  if (*(unsigned char *)(a1 + 27250)) {
    double v8 = 1.0;
  }
  else {
    double v8 = 0.5;
  }
  double v9 = *((double *)a2 + 232);
  *((double *)a2 + 9965) = v9;
  if (*(_DWORD *)v6 <= *(unsigned __int16 *)(a1 + 16) && a2[468] == 1)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 148);
    if (v11 >= *(_DWORD *)(a1 + 152)) {
      unsigned int v11 = *(_DWORD *)(a1 + 152);
    }
    if (v11 >= *(_DWORD *)(a1 + 156)) {
      unsigned int v11 = *(_DWORD *)(a1 + 156);
    }
    if (v11 >= 0xB)
    {
      *(void *)(a1 + 27288) = 0;
      int v12 = *(_DWORD *)(a1 + 27204);
      if (v12 == 3)
      {
        a2[19934] = 2;
        int v13 = *(_DWORD *)(a1 + 27276);
        *(void *)(a1 + 27304) = *((void *)a2 + 213);
        *(void *)(a1 + 27312) = *((void *)a2 + 214);
        *(unsigned char *)(a1 + 27320) = 1;
        if (!v13) {
          *(_DWORD *)(a1 + 27276) = 1;
        }
        goto LABEL_101;
      }
      double v20 = *((double *)a2 + 228) * *((double *)a2 + 228);
      double v21 = *((double *)a2 + 227) * *((double *)a2 + 227);
      if (v20 < 0.000001 && v21 < 0.000001)
      {
        double v21 = 0.000001;
        double v20 = 0.000001;
      }
      double v22 = fmin(sqrt(57.2957795/ (v21 + v20)* ((*((double *)a2 + 7689) * v20 + *((double *)a2 + 7690) * v21)* (57.2957795/ (v21 + v20)))), 180.0);
      *((double *)a2 + 9964) = v22;
      Comp_Track8((long double *)a2 + 227);
      BOOL v24 = v22 >= 30.0 || v7 == 0;
      *(double *)double v4 = v23;
      if (v24 || a3 >= 6) {
        double v26 = 4.0;
      }
      else {
        double v26 = 2.0;
      }
      double v27 = v23 - v9;
      if (v23 - v9 >= 180.0)
      {
        double v28 = -360.0;
      }
      else
      {
        if (v27 >= -180.0) {
          goto LABEL_33;
        }
        double v28 = 360.0;
      }
      double v27 = v27 + v28;
LABEL_33:
      double v29 = *((double *)a2 + 231);
      if (*((unsigned char *)v5 + 1236))
      {
        double v30 = v23 - *(double *)v5;
        if (v30 >= 180.0)
        {
          double v31 = -360.0;
        }
        else
        {
          if (v30 >= -180.0)
          {
LABEL_48:
            if (v29 >= v26)
            {
              double v35 = fabs(v30);
              BOOL v39 = v35 <= 45.0;
              double v34 = 15.0 / v35;
              if (v39) {
                double v34 = 0.0;
              }
            }
            else
            {
              double v34 = v29 * 0.1;
            }
            double v23 = *(double *)v5 + v34 * v30;
            *(double *)(a1 + 27280) = v23;
            *((double *)v4 + 3) = v34;
            int v33 = 7;
LABEL_92:
            v4[8] = v33;
            *(_DWORD *)(v6 + 156) = 3;
            int v47 = *a2;
            *(_DWORD *)(v6 + 176) = *a2;
            if (v22 < 10.0 && *((unsigned __int8 *)v5 + 1013) >= 6u)
            {
              *(double *)(a1 + 27328) = v23;
              *(_DWORD *)(v6 + 216) = v47;
            }
            double v48 = v23 - v9;
            *(double *)(a1 + 27288) = v48;
            if (v48 >= 180.0)
            {
              double v49 = -360.0;
            }
            else
            {
              if (v48 >= -180.0)
              {
LABEL_100:
                *(void *)(a1 + 27304) = *((void *)a2 + 213);
                *(void *)(a1 + 27312) = *((void *)a2 + 214);
                *(unsigned char *)(v6 + 200) = 1;
LABEL_101:
                *((void *)a2 + 232) = *(void *)(a1 + 27280);
                return;
              }
              double v49 = 360.0;
            }
            *(double *)(a1 + 27288) = v48 + v49;
            goto LABEL_100;
          }
          double v31 = 360.0;
        }
        double v30 = v30 + v31;
        goto LABEL_48;
      }
      if (v29 > v26 && v22 < 60.0)
      {
        *(double *)(a1 + 27280) = v23;
        int v33 = 3;
        goto LABEL_92;
      }
      if (v7 && v12 == 2 && fabs(v27) > 90.0 && v22 > 45.0)
      {
        *(double *)(a1 + 27280) = v9;
        *((void *)v4 + 3) = 0;
        int v33 = 6;
        double v23 = v9;
        goto LABEL_92;
      }
      if (v29 > 4.0 && v22 >= 60.0)
      {
        double v36 = 1.0 / (v22 / 60.0 * (v22 / 60.0));
        *((double *)v4 + 3) = v36;
        double v23 = v9 + v36 * v27;
        *(double *)(a1 + 27280) = v23;
        double v37 = 360.0;
        if (v23 >= 360.0)
        {
          double v37 = -360.0;
        }
        else if (v23 >= 0.0)
        {
          goto LABEL_74;
        }
        double v23 = v23 + v37;
        *(double *)(a1 + 27280) = v23;
LABEL_74:
        int v33 = 4;
        goto LABEL_92;
      }
      if (v29 > v8)
      {
        double v38 = 1.0;
        if (v22 > 10.0)
        {
          BOOL v39 = v22 > 40.0 || v29 <= 1.0;
          if (v39)
          {
            double v40 = fabs(v27);
            double v41 = 0.93 / v40 + 0.07;
            BOOL v39 = v40 <= 2.22044605e-16;
            double v42 = 4.18834765e15;
            if (!v39) {
              double v42 = v41;
            }
            double v38 = fmin(v42, 0.25);
          }
          else
          {
            double v38 = 0.25 / (v22 / 40.0);
          }
        }
        *((double *)v4 + 3) = v38;
        double v23 = v9 + v38 * v27;
        *(double *)(a1 + 27280) = v23;
        double v46 = 360.0;
        if (v23 >= 360.0)
        {
          double v46 = -360.0;
        }
        else if (v23 >= 0.0)
        {
          goto LABEL_91;
        }
        double v23 = v23 + v46;
        *(double *)(a1 + 27280) = v23;
LABEL_91:
        int v33 = 5;
        goto LABEL_92;
      }
      double v43 = v23 - *((double *)v5 + 301);
      if (v43 >= 180.0)
      {
        double v44 = -360.0;
      }
      else
      {
        if (v43 >= -180.0) {
          goto LABEL_77;
        }
        double v44 = 360.0;
      }
      double v43 = v43 + v44;
LABEL_77:
      if (a3 - 5 >= 3
        && *((unsigned __int8 *)v5 + 1012) >= 8u
        && v22 < 10.0
        && *((unsigned char *)v5 + 2696)
        && fabs(v43) < 10.0
        && *((double *)v5 + 279) < 0.1)
      {
        int v33 = 3;
        double v45 = 1.0;
      }
      else
      {
        int v33 = 6;
        double v45 = 0.0;
        double v23 = v9;
      }
      *(double *)(a1 + 27280) = v23;
      *((double *)v4 + 3) = v45;
      goto LABEL_92;
    }
  }
  Comp_Track8((long double *)a2 + 227);
  double v15 = *((double *)a2 + 228) * *((double *)a2 + 228);
  double v16 = *((double *)a2 + 227) * *((double *)a2 + 227);
  if (v15 < 0.000001 && v16 < 0.000001)
  {
    double v16 = 0.000001;
    double v15 = 0.000001;
  }
  double v18 = *((double *)v5 + 61);
  double v17 = *((double *)v5 + 62);
  *((void *)a2 + 232) = v14;
  *(void *)double v4 = v14;
  *((double *)v4 + 1) = fmin(sqrt(57.2957795 / (v16 + v15) * ((v18 * v15 + v17 * v16) * (57.2957795 / (v16 + v15)))), 180.0);
  v4[8] = 1;
}

uint64_t Kep_Check_Almanac(int a1, uint64_t a2)
{
  int v2 = *(__int16 *)(a2 + 16);
  if (a1 - 255 > v2)
  {
    do
      v2 += 256;
    while (a1 - 255 > v2);
    *(_WORD *)(a2 + 16) = v2;
  }
  int v3 = *(_DWORD *)(a2 + 20);
  if (v3 <= 604799) {
    unsigned int v4 = v3 >> 31;
  }
  else {
    unsigned int v4 = (v3 >> 31) | 2;
  }
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 12);
  unsigned int v7 = v5 & 0xFFFFFFFE;
  if ((v5 & 0xFFFFFFFE) == 6 || (double v8 = 4800.0, v5 == 4) && (v6 - 59) <= 0xCAu) {
    double v8 = *(double *)"";
  }
  if (v5 == 4)
  {
    if ((v6 - 6) > 0x34) {
      goto LABEL_29;
    }
LABEL_16:
    double v10 = *(double *)(a2 + 72);
    if (v10 < v8) {
      v4 |= 4u;
    }
    if (v10 > 7000.0) {
      v4 |= 8u;
    }
    goto LABEL_20;
  }
  if (v5 == 5) {
    goto LABEL_16;
  }
  if (v7 == 6)
  {
LABEL_29:
    double v9 = 6700.0;
    goto LABEL_30;
  }
  double v9 = 5800.0;
LABEL_30:
  double v14 = *(double *)(a2 + 72);
  if (v14 < v8) {
    v4 |= 4u;
  }
  if (v14 > v9) {
    v4 |= 8u;
  }
  if (v5 == 3)
  {
    double v17 = 0.03;
    if ((((_BYTE)v6 - 14) & 0xFB) == 0) {
      double v17 = 0.25;
    }
    double v18 = *(double *)(a2 + 40);
    int v19 = v4 | 0x10;
    if (v18 >= 0.0) {
      int v19 = v4;
    }
    if (v18 <= v17) {
      unsigned int v4 = v19;
    }
    else {
      unsigned int v4 = v19 | 0x20;
    }
    double v13 = 0.0;
    goto LABEL_52;
  }
  if (v5 != 4)
  {
    double v11 = 0.03;
    goto LABEL_21;
  }
  if ((v6 - 6) >= 0x35)
  {
    double v15 = *(double *)(a2 + 40);
    int v16 = v4 | 0x10;
    if (v15 >= 0.0) {
      int v16 = v4;
    }
    if (v15 <= 0.03) {
      unsigned int v4 = v16;
    }
    else {
      unsigned int v4 = v16 | 0x20;
    }
    goto LABEL_43;
  }
LABEL_20:
  double v11 = 0.1;
LABEL_21:
  double v12 = *(double *)(a2 + 40);
  if (v12 < 0.0) {
    v4 |= 0x10u;
  }
  if (v12 > v11) {
    v4 |= 0x20u;
  }
  double v13 = 0.000000314159265;
  if (v5 != 5)
  {
    if (v5 != 4)
    {
      double v13 = 0.0;
      if (v7 != 6) {
        goto LABEL_52;
      }
      goto LABEL_43;
    }
    if ((v6 - 6) >= 0x35) {
LABEL_43:
    }
      double v13 = 0.000000314159265;
  }
LABEL_52:
  double v20 = *(double *)(a2 + 56);
  unsigned int v21 = v4 | 0x40;
  if (v20 >= -0.00000198862815) {
    unsigned int v21 = v4;
  }
  if (v20 <= v13) {
    return v21;
  }
  else {
    return v21 | 0x80;
  }
}

void GLON_Alm_Calc_Corrns(double *a1, double *a2, double a3, double a4, double a5)
{
  double v8 = a2[5] + 43200.0;
  double v9 = a2[7];
  __double2 v10 = __sincos_stret(a2[8]);
  double v11 = v9 * v10.__sinval;
  double v12 = v9 * v10.__cosval;
  double v13 = a2[4] + 1.09955743;
  __double2 v14 = __sincos_stret(a4);
  __double2 v15 = __sincos_stret(a4 + a4);
  __double2 v16 = __sincos_stret(a4 * 3.0);
  __double2 v17 = __sincos_stret(a4 * 4.0);
  __double2 v18 = __sincos_stret(v13);
  double v19 = 6378.136 / a3 * (6378.136 / a3);
  double v20 = v18.__sinval * v18.__sinval * -1.5 + 1.0;
  double v21 = v19 * 0.00162393863 * v20;
  double v22 = v19 * -0.000405984656 * (v18.__sinval * v18.__sinval);
  double v23 = v14.__sinval * (v12 * 3.5)
      + 6.28318531 / v8 * a5
      + v11 * -2.5 * v14.__cosval
      + v15.__sinval * -0.5
      + v12 * -1.16666667 * v16.__sinval
      + v11 * 1.16666667 * v16.__cosval;
  double v24 = v19 * 0.00324787725 * v20;
  double v25 = v19 * 0.00162393863 * (v18.__cosval * v18.__cosval);
  *a1 = (v19
       * 0.00162393863
       * (v18.__sinval
        * v18.__sinval)
       * (v15.__cosval
        + v14.__cosval * (v12 * -0.5)
        + v11 * 0.5 * v14.__sinval
        + v12 * 3.5 * v16.__cosval
        + v11 * 3.5 * v16.__sinval)
       + v24 * (v14.__sinval * v11 + v12 * v14.__cosval))
      * a3;
  a1[1] = v22
        * (v14.__sinval
         + v16.__sinval * -2.33333333
         + v12 * 5.0 * v15.__sinval
         + v12 * -8.5 * v17.__sinval
         + v11 * 8.5 * v17.__cosval
         + v11 * v15.__cosval)
        + v21 * (v14.__sinval + 6.28318531 / v8 * v12 * a5 + v12 * 1.5 * v15.__sinval - v11 * 1.5 * v15.__cosval)
        + v25 * (v15.__sinval * (v12 * -0.5) + 6.28318531 / v8 * v12 * a5);
  a1[2] = v22
        * (v11 * -5.0 * v15.__sinval
         - (v14.__cosval
          - v16.__cosval * -2.33333333)
         + v12 * -8.5 * v17.__cosval
         - v11 * 8.5 * v17.__sinval
         + v12 * v15.__cosval)
        + v21 * (v14.__cosval + -(v11 * (6.28318531 / v8)) * a5 + v12 * 1.5 * v15.__cosval + v11 * 1.5 * v15.__sinval)
        + v25 * (v15.__sinval * (v11 * 0.5) + -(v11 * (6.28318531 / v8)) * a5);
  a1[3] = v19 * -0.00162393863 * v18.__cosval * v23;
  a1[4] = v18.__cosval
        * (v19
         * 0.000811969313
         * v18.__sinval)
        * (v15.__cosval
         + v14.__sinval * v11
         - v12 * v14.__cosval
         + v12 * 2.33333333 * v16.__cosval
         + v11 * 2.33333333 * v16.__sinval);
  a1[5] = v19
        * 0.00487181588
        * (v18.__sinval
         * v18.__sinval)
        * (v14.__sinval * (v12 * -0.291666667)
         + v11 * -0.291666667 * v14.__cosval
         + v11 * -0.680555556 * v16.__cosval
         + v12 * 0.680555556 * v16.__sinval
         + v15.__sinval * 0.25)
        + v24 * (v14.__sinval * (v12 * 1.75) + 6.28318531 / v8 * a5 + v11 * -1.75 * v14.__cosval)
        + v25 * v23;
}

const void **Pre_Positioning_Update_Wrapper(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v4 = 0;
  memset(v3, 0, sizeof(v3));
  memset(v8, 0, sizeof(v8));
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v9 = 0x200000000;
  int v10 = 5;
  int v13 = 0;
  *(void *)((char *)v12 + 5) = 0;
  uint64_t v11 = 0;
  v12[0] = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  __int16 v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  GNSS_Validate_p_list((const void **)a1, "Pre_Positioning_Update_Wrapper: Entry");
  *(void *)(a1 + 192) = v3;
  Pre_Positioning(*(void *)(a1 + 152), (uint64_t)v3, *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 64), *(void *)(a1 + 56), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 40), *(void *)(a1 + 32));
  *(void *)(a1 + 192) = 0;
  return GNSS_Validate_p_list((const void **)a1, "Pre_Positioning_Update_Wrapper:  Exit");
}

_DWORD *NK_Set_Aid_Data(_DWORD *result, int *a2, uint64_t a3)
{
  if (!*((unsigned char *)a2 + 1864))
  {
    BOOL v3 = result[5] < 5u;
    int v4 = &unk_263D81910;
    goto LABEL_6;
  }
  if (!result[6784] || a2[5] < 8)
  {
    BOOL v3 = result[5] < 5u;
    int v4 = &unk_263D82BB0;
LABEL_6:
    *(void *)(a3 + 8) = v4[v3];
    *(void *)(a3 + 32) = 0x4163125300000000;
    double v5 = 9999000.0;
    goto LABEL_7;
  }
  if (result[6779] && a2[15459] >= 5 && *((double *)a2 + 7740) < 400.0 && *((double *)a2 + 7741) < 400.0)
  {
    *(void *)a3 = *((void *)a2 + 215);
    *(_DWORD *)(a3 + 16) = *a2;
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  double v7 = *((double *)a2 + 7741);
  *(double *)(a3 + 8) = v7;
  unint64_t v8 = (int)result[5];
  double v9 = dbl_263D82BA0[v8 > 4];
  if (v7 > v9) {
    *(double *)(a3 + 8) = v9;
  }
  if (v6
    && a2[15460] >= 4
    && ((double v10 = *((double *)a2 + 7748), v8 > 8) ? (v11 = 500000.0) : (v11 = dbl_263D82BC8[v8]), v10 < v11))
  {
    uint64_t v12 = *((void *)a2 + 230);
    int v13 = *a2;
    *(_DWORD *)(a3 + 40) = *a2;
    *(void *)(a3 + 24) = v12;
    *(double *)(a3 + 32) = v10;
    double v5 = *((double *)a2 + 7749);
    if (v5 < 5.0 && a2[15531] != 2 && v8 <= 4 && a2[15532] != 2 && *((double *)a2 + 231) > 0.3)
    {
      *(void *)(a3 + 48) = *((void *)a2 + 232);
      *(_DWORD *)(a3 + 64) = v13;
    }
  }
  else
  {
    *(void *)(a3 + 32) = *((void *)a2 + 7748);
    double v5 = *((double *)a2 + 7749);
  }
LABEL_7:
  *(double *)(a3 + 56) = v5;
  return result;
}

uint64_t Comp_PrePos(int a1, int a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double *a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double *a19, double a20,double a21,char *a22,int a23,uint64_t a24)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  __int16 v109 = 0;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  memset(v102, 0, sizeof(v102));
  v110[0] = 0;
  *(_DWORD *)((char *)v110 + 3) = 0;
  __int16 v100 = 0;
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  v101[0] = 0;
  *(_DWORD *)((char *)v101 + 3) = 0;
  int v38 = Comp_CurrState(0x258u, a2, a3, (uint64_t)v102, a18, a20);
  uint64_t result = 0;
  if (v38)
  {
    double v91 = a16;
    double v92 = a15;
    double v93 = Comp_SVrange_Sag_Corr(&v111, v97, a4, (float64x2_t *)&v102[0].f64[1]);
    double v40 = Trop_Elev_MapF((uint64_t)a7) * a21;
    double v41 = GPS_Klob_Iono_Delay(a19, a6, (uint64_t)a7, a22, a18);
    if (v110[0] == 2 || (double v42 = 1.0, v110[0] == 6)) {
      GPS_L1_Iono_Scale_factor();
    }
    double v90 = v41;
    double v43 = v41 * v42;
    double v96 = v43;
    double v44 = v43 + v40 + v93 + (a9 - *((double *)&v104 + 1)) * 299792458.0;
    if (fabs(v44) >= 2130706430.0)
    {
      return 0;
    }
    else
    {
      uint64_t v45 = 0;
      *(_DWORD *)(a24 + 8) = v44;
      double v46 = 0.0;
      do
      {
        double v46 = v46 + v111.f64[v45] * *(double *)((char *)&v103 + v45 * 8);
        ++v45;
      }
      while (v45 != 3);
      uint64_t v47 = 0;
      double v48 = *(double *)&v105;
      *(double *)(a24 + 48) = (v46 + *(double *)&v105 * -299792458.0) * -5.25503547;
      do
      {
        v97[v47 + 2] = *((double *)&v104 + v47) - *(double *)(a5 + 16 + 8 * v47);
        unint64_t v49 = v47 + 3;
        --v47;
      }
      while (v49 > 1);
      double v89 = a13;
      uint64_t v50 = 0;
      double v51 = 0.0;
      do
      {
        double v51 = v51 + v111.f64[v50] * v97[v50];
        ++v50;
      }
      while (v50 != 3);
      uint64_t v52 = 0;
      *(double *)(a24 + 24) = (v51 + (a10 - v48) * 299792458.0) * -5.25503547;
      double v53 = 0.0;
      do
      {
        double v53 = v53 + v111.f64[v52] * *(double *)((char *)&v103 + v52 * 8);
        ++v52;
      }
      while (v52 != 3);
      uint64_t result = Comp_CurrState(0x25Du, a2, a3, (uint64_t)v98, a18 + 1.0, a20);
      if (result)
      {
        double v87 = Comp_SVrange_Sag_Corr(&v111, v97, a4, (float64x2_t *)&v98[0].f64[1]);
        uint64_t v54 = 0;
        double v55 = 0.0;
        do
        {
          double v55 = v55 + v111.f64[v54] * *(double *)((char *)v99 + v54 * 8);
          ++v54;
        }
        while (v54 != 3);
        double v88 = (v53 - v55) / 0.190293673;
        *(double *)(a24 + 40) = v88;
        double v56 = a7[4];
        if (v56 >= 30.0)
        {
          double v59 = v89;
          if (v56 <= 60.0)
          {
            double v57 = a7[1] * a7[1];
            double v58 = 1.0 - v57;
          }
          else
          {
            double v58 = a7[2] * a7[2];
            double v57 = 1.0 - v58;
          }
        }
        else
        {
          double v57 = a7[1] * a7[1];
          double v58 = 1.0 - v57;
          double v59 = v89;
        }
        if ((a23 - 1) > 4) {
          double v60 = 3025.0;
        }
        else {
          double v60 = dbl_263D82C80[a23 - 1];
        }
        if (a14 * a14 + v59 * v59 >= v60)
        {
          if (v59 > 10000.0)
          {
            if (v59 <= 100000.0)
            {
              if (v59 <= 50000.0) {
                double v61 = dbl_263D82C70[v59 > 25000.0];
              }
              else {
                double v61 = 2000.0;
              }
            }
            else
            {
              double v61 = 60000.0;
            }
            a14 = v61 + a14;
          }
          double v60 = a14 * (v57 * a14) + v58 * v59 * v59;
        }
        double v62 = *((double *)&v105 + 1);
        double v63 = v60 + *((double *)&v105 + 1);
        v97[0] = 0.0;
        if (R8_EQ(&v96, v97)) {
          double v64 = 25.0 / (a7[2] * a7[2] * -0.9 + 1.0);
        }
        else {
          double v64 = v43 * 0.2 * (v43 * 0.2);
        }
        double v65 = v63 + v64 + v40 * 0.1 * (v40 * 0.1);
        if (a1 < 1)
        {
          double v69 = v65 + 4.0e12;
          uint64_t v68 = a1;
        }
        else
        {
          int v66 = (int)(v93 - v87) * (int)(v93 - v87);
          if (v66 <= 0x2710) {
            int v66 = 10000;
          }
          double v67 = (double)v66;
          uint64_t v68 = a1;
          double v69 = v65 + v67 * g_TOW_Stat_Var95_Table[a1];
        }
        *(_DWORD *)(a24 + 4) = fmin(sqrt(v69) * 3.0, 4278190080.0);
        double v70 = a11 + a10 * g_TOW_stat_Sigma_m_Table[v68];
        double v71 = v69 + v70 * v70;
        v72.f64[0] = v71 + a12 * a12 - a11 * a11;
        v72.f64[1] = v71;
        float64x2_t v73 = vsqrtq_f64(v72);
        __asm { FMOV            V2.2D, #3.0 }
        *(int32x2_t *)(a24 + 12) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vminnmq_f64(vmulq_f64(v73, _Q2), (float64x2_t)vdupq_n_s64(0x41EFE00000000000uLL))));
        double v79 = v58 * v91 * v91 + v92 * v92 + v57 * a17 * a17 + 4.0;
        if (v79 < 5.0) {
          double v79 = 5.0;
        }
        if (a1 < 1)
        {
          double v81 = 9941543.2;
        }
        else
        {
          double v80 = v88 * v88;
          if (v88 * v88 < 0.0025) {
            double v80 = 0.0025;
          }
          double v81 = v80 * ((v62 * 0.0625 + v89 * v89) * 0.000001 + g_TOW_Stat_Var95_Table[v68]);
        }
        double v82 = sqrt(v79 + v81);
        if (v82 < 1400000000.0) {
          unsigned int v83 = (v82 * 3.0) + 1;
        }
        else {
          unsigned int v83 = -16777216;
        }
        *(_DWORD *)(a24 + 32) = v83;
        double v84 = sqrt(v81);
        if (v84 < 1400000000.0) {
          unsigned int v85 = (v84 * 3.0) + 1;
        }
        else {
          unsigned int v85 = -16777216;
        }
        *(_DWORD *)(a24 + 56) = v85;
        *(unsigned char *)(a24 + 60) = a8;
        if (a8)
        {
          double v86 = (*(double *)&v107 - *(double *)&v108) * 299792458.0;
          *(double *)(a24 + 64) = v86;
          if (v110[0] != 6) {
            *(double *)(a24 + 64) = v86 + v90 * 0.793270321;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

void GLON_Alm_Last_Asc_Pass(double *a1, double *a2, int a3, uint64_t a4, double a5, double a6)
{
  double v8 = *(double *)(a4 + 40) + 43200.0;
  double v10 = *(double *)(a4 + 16);
  double v9 = *(double *)(a4 + 24);
  double v11 = *(double *)(a4 + 32) + 1.09955743;
  double v12 = *(double *)(a4 + 48);
  double v13 = 1.0 - *(double *)(a4 + 56) * *(double *)(a4 + 56);
  int v14 = a3 - *(unsigned __int16 *)(a4 + 8);
  if (v14 < -730) {
    v14 += 1461;
  }
  if (v14 > 730) {
    v14 -= 1461;
  }
  double v15 = floor((a5 - v9 + (double)(86400 * v14)) / v8);
  double v16 = v9 + v8 * v15 + v12 * (v15 * v15);
  double v17 = floor(v16 / 86400.0);
  double v18 = ceil(v16 / 86400.0);
  if (v16 / 86400.0 < 0.0) {
    double v17 = v18;
  }
  double v19 = -86400.0;
  double v20 = v16 + v17 * -86400.0;
  *a1 = v20;
  double v21 = a5 - v20;
  if (v21 < 0.0 || (double v19 = 86400.0, v21 >= 86400.0)) {
    *a1 = v20 + v19;
  }
  for (double i = v10
          + (6378.136 / a6 * (6378.136 / a6) * (6.28318531 / v8 * -0.00162393863) * cos(v11) / (v13 * v13)
           + -0.00007292115)
          * (v12 * (v15 * v15) + v8 * v15); i > 3.14159265; double i = i + -6.28318531)
    ;
  *a2 = i;
  if (i < -3.14159265)
  {
    do
      double i = i + 6.28318531;
    while (i < -3.14159265);
    *a2 = i;
  }
}

uint64_t GM_Get_Min_SNR(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (a2 - 1 < 0)
  {
    return 10;
  }
  else
  {
    unsigned __int8 v3 = 0;
    uint64_t v4 = v2 + 1;
    double v5 = (_WORD *)(a1 + 36 * v2 + 8);
    do
    {
      if (Is_Legal(*((_DWORD *)v5 - 2))
        && (*v5 & 8) != 0
        && *((unsigned __int8 *)v5 - 4) > v3)
      {
        unsigned __int8 v3 = *((unsigned char *)v5 - 4);
      }
      v5 -= 18;
    }
    while (v4-- > 1);
    if (v3 <= 0x21u) {
      return 10;
    }
    else {
      return (v3 - 23);
    }
  }
}

uint64_t Centroid_SV_Pos(int (*a1)[3], unsigned int a2, double *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  double v8 = &(*a1)[2];
  uint64_t v9 = a2;
  do
  {
    int v10 = *(v8 - 1);
    int v11 = *v8;
    if (!*((void *)v8 - 1))
    {
      if (!v11) {
        goto LABEL_7;
      }
      int v10 = 0;
    }
    v7 += *(v8 - 2);
    v5 += v10;
    v4 += v11;
    ++v6;
LABEL_7:
    v8 += 3;
    --v9;
  }
  while (v9);
  v18[1] = v5;
  v18[2] = v4;
  v18[0] = v7;
  if (!v6) {
    return 0;
  }
  for (uint64_t i = 0; i != 3; ++i)
    *((double *)&v16 + i) = 1.0 / (double)v6 * (double)(int)v18[i];
  ECEF2Geo((double *)&v16, (uint64_t)&WGS84_Datum, (uint64_t)v14);
  uint64_t v15 = 0;
  Geo2ECEF((uint64_t)v14, (uint64_t)&WGS84_Datum, (double *)&v16);
  *(_OWORD *)a3 = v16;
  *((void *)a3 + 2) = v17;
  return 1;
}

void *Init_DB_Nav_Soln(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  memset(&__src[3], 0, 123);
  memset(&__src[12], 0, 160);
  uint64_t v6 = *(void *)(a2 + 1704);
  double v7 = *(double *)(a2 + 1712);
  double v22 = 0.0;
  int v21 = 0;
  int v8 = Core_Load_Clk_L5L1(&v21, &v22);
  double v9 = v22;
  if (v8)
  {
    int v10 = 999999;
    *(double *)(a2 + 2016) = v22 * 299792458.0;
    int v11 = v21;
    *(_DWORD *)(a2 + 2024) = v21;
    if (*(unsigned char *)(a1 + 16) && *(int *)a1 >= 1) {
      int v10 = (int)*(double *)(a1 + 40) - v11 + 604800 * *(__int16 *)(a1 + 32);
    }
    EvLog_v("Init_DB_Nav_Soln:  Recovered (L5-L1) delta Clock bias from NV:  %f m   age %d s", v9 * 299792458.0, v10);
  }
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)&__src[1] = *(void *)(a1 + 40);
  *(void *)&__src[0] = *(void *)(a1 + 24);
  *((void *)&__src[0] + 1) = *(void *)(a1 + 8);
  DWORD2(__src[1]) = *(_DWORD *)a1;
  BYTE12(__src[1]) = *(unsigned char *)(a1 + 16);
  HIWORD(__src[1]) = *(_WORD *)(a1 + 32);
  LODWORD(__src[2]) = __src[0];
  *((void *)&__src[2] + 1) = 0;
  *((void *)&__src[7] + 1) = v12;
  *(double *)&__src[9] = v9;
  *((void *)&__src[9] + 1) = v6;
  *(void *)(a1 + 56) = v6;
  HIDWORD(__src[10]) = *(_DWORD *)(a1 + 76);
  LOBYTE(__src[11]) = *(unsigned char *)(a1 + 80);
  *(_DWORD *)((char *)&__src[11] + 2) = *(_DWORD *)(a1 + 82);
  *((void *)&__src[11] + 1) = *(void *)(a1 + 88);
  *(void *)&__src[10] = 0;
  unsigned int v13 = *(_DWORD *)(a2 + 60);
  if (v13 >= 2)
  {
    if (v13 >= 5)
    {
      uint64_t v16 = 0x4163125300000000;
      double v15 = 9999000.0;
      double v14 = 9999000.0;
    }
    else
    {
      double v14 = 20.0;
      double v15 = 3.0;
      uint64_t v16 = 0x4033C624DD2F1AA0;
    }
  }
  else
  {
    double v14 = 3.0;
    double v15 = 1.0;
    uint64_t v16 = 0x40069FBE76C8B439;
  }
  memset(&__src[12], 0, 24);
  Geo2ECEF((uint64_t)&__src[12], (uint64_t)&WGS84_Datum, (double *)&__src[3]);
  NK_Transform_State((uint64_t)__src);
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = memcpy((void *)(a3 + 32), __src, 0x160uLL);
  int64x2_t v18 = vdupq_n_s64(0x4163125300000000uLL);
  *(int64x2_t *)(a3 + 832) = v18;
  *(int64x2_t *)(a3 + 848) = v18;
  *(int64x2_t *)(a3 + 864) = v18;
  *(void *)(a3 + 880) = 0x4163125300000000;
  *(void *)(a3 + 888) = v16;
  *(double *)(a3 + 896) = v15;
  *(double *)(a3 + 904) = v14;
  *(void *)(a3 + 912) = 0x408F380000000000;
  *(double *)(a3 + 920) = v7 * 99930819.3;
  *(int64x2_t *)(a3 + 928) = v18;
  *(void *)(a3 + 944) = 0;
  int64x2_t v19 = vdupq_n_s64(0x4058FF5C28F5C28FuLL);
  *(int64x2_t *)(a3 + 768) = v19;
  *(int64x2_t *)(a3 + 784) = v19;
  *(int64x2_t *)(a3 + 800) = v19;
  *(_OWORD *)(a3 + 816) = xmmword_263D82D50;
  long long v20 = *(_OWORD *)(a3 + 352);
  *(_OWORD *)(a3 + 952) = *(_OWORD *)(a3 + 336);
  *(_OWORD *)(a3 + 968) = v20;
  *(_OWORD *)(a3 + 984) = *(_OWORD *)(a3 + 368);
  return result;
}

uint64_t *phiu(uint64_t *result, int a2, unsigned int a3, uint64_t a4, const double *a5, unsigned int a6, double *a7, int a8)
{
  if (a3)
  {
    uint64_t v8 = a3;
    double v9 = result;
    int v10 = a7;
    do
    {
      uint64_t v11 = *v9++;
      *(void *)v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if (a6 >= 2)
  {
    int v12 = (a6 - 1) * a2;
    int v13 = (a6 - 1) * a8;
    unsigned int v14 = ((a6 + a6 * a6) >> 1) - a6;
    unsigned int v15 = 1 - a6;
    do
    {
      unsigned int v16 = a6 - 1;
      if (a3)
      {
        uint64_t v17 = 0;
        uint64_t v18 = a6 - 1;
        do
        {
          double v19 = 0.0;
          uint64_t v20 = a4;
          if (a6 <= a4)
          {
            double v19 = *(double *)&result[(v12 + v17)];
            uint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = v20;
            unsigned int v22 = v14;
            int v23 = v17;
            do
            {
              double v19 = v19 + *(double *)&result[v23] * a5[v22];
              v23 += a2;
              ++v22;
              --v21;
            }
            while (v21);
          }
          a7[(v17++ + v13)] = v19;
          uint64_t v18 = v20;
        }
        while (v17 != a3);
      }
      v12 -= a2;
      v13 -= a8;
      v14 += v15++;
      --a6;
    }
    while (v16 > 1);
  }
  return result;
}

uint64_t DD_Assist_GLON_Data(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v87 = *MEMORY[0x263EF8340];
  float64x2_t v72 = a3 + 2139;
  int v8 = a1 - 241;
  do
  {
    if (*(unsigned char *)(a3[2146] + v7) && (v8 - LODWORD(a3[8 * v7 + 1491])) > 0xFFFFF806) {
      goto LABEL_33;
    }
    memset(v83, 0, 62);
    if (!Core_Get_GLON_Eph((v7 + 1), a1, v83)) {
      goto LABEL_33;
    }
    if (*(unsigned char *)(a3[2146] + v7))
    {
      int v9 = a3[8 * v7 + 1491];
      if (SLODWORD(v83[0]) <= v9 && (int)a1 - v9 > -1801) {
        goto LABEL_33;
      }
    }
    BOOL v10 = (WORD2(v83[2]) & 0x800) == 0;
    uint64_t v11 = a3[1489];
    if (*(unsigned char *)(v11 + v7)) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = (WORD2(v83[2]) & 0x800) == 0;
    }
    if (v12)
    {
      uint64_t v13 = a3[2148];
      if (!*(unsigned char *)(v13 + v7)) {
        goto LABEL_19;
      }
      int v14 = *((_DWORD *)a3 + 9 * v7 + 4062);
      if ((*((unsigned char *)a3 + 36 * v7 + 16263) & 4) != 0 || v14 + 3600 <= (int)a1)
      {
        if (v14 + 100 < (int)a1)
        {
          *(unsigned char *)(a3[2144] + v7) = 0;
          *(unsigned char *)(v13 + v7) = 0;
        }
LABEL_19:
        BOOL v10 = 1;
        goto LABEL_20;
      }
      BOOL v10 = 0;
    }
LABEL_20:
    unsigned int v15 = &a3[8 * v7];
    unsigned int v16 = (long long *)(v15 + 1491);
    long long v17 = v83[3];
    *(_OWORD *)(v15 + 1495) = v83[2];
    *(_OWORD *)(v15 + 1497) = v17;
    long long v18 = v83[1];
    *(_OWORD *)(v15 + 1491) = v83[0];
    *(_OWORD *)(v15 + 1493) = v18;
    *(unsigned char *)(a3[2143] + v7) = 1;
    *(unsigned char *)(a3[2146] + v7) = 1;
    *(unsigned char *)(v11 + v7) = v10;
    int v19 = *((_DWORD *)v15 + 2983);
    if (v10) {
      int v20 = 1;
    }
    else {
      int v20 = 2;
    }
    uint64_t v21 = a3[1490] + 20 * v7;
    unsigned int v22 = (int *)(v21 + 12);
    int v23 = (int *)(v21 + 8);
    if (v19 == 5) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = v22;
    }
    *uint64_t v24 = v20;
    if (DWORD2(v83[0]) != 2139062143) {
      *((_DWORD *)a3 + v7 + 4332) = DWORD2(v83[0]);
    }
    if ((int)a1 >= 1)
    {
      *(unsigned char *)(a3[2150] + v7) = 1;
      Core_Save_GLON_Eph((v7 + 1), 0, v16);
      uint64_t v11 = a3[1489];
    }
    uint64_t v25 = 0;
    LODWORD(v26) = 0;
    uint64_t v27 = p_NV;
    uint64_t v28 = p_NV + 29160;
    uint64_t v29 = *(void *)(v11 + 16);
    *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v11;
    *(void *)(v28 + 28) = v29;
    uint64_t v30 = v27 + 29168;
    __int16 v31 = -9871;
    do
    {
      int v32 = *(unsigned __int8 *)(v30 + v25) ^ HIBYTE(v31);
      __int16 v31 = -12691 * (v31 + (*(unsigned __int8 *)(v30 + v25) ^ HIBYTE(v31))) + 22719;
      uint64_t v26 = (v26 + v32);
      ++v25;
    }
    while (v25 != 32);
    *(void *)(v27 + 29160) = v26;
LABEL_33:
    ++v7;
  }
  while (v7 != 24);
  if ((int)a1 >= 1)
  {
    for (uint64_t i = 0; i != 24; ++i)
    {
      if (*(unsigned char *)(a3[1489] + i)
        && !*(unsigned char *)(*(void *)(a4 + 1608) + i)
        && *(unsigned __int8 *)(a2 + 32 + i) <= 0xA5u
        && (!*(unsigned char *)(a3[2147] + i) || (int)a1 - *((_DWORD *)a3 + 29 * i + 3366) >= 241))
      {
        long long v85 = 0u;
        memset(v86, 0, 19);
        long long v84 = 0u;
        memset(v83, 0, sizeof(v83));
        int GLON_GPS_BinEph = EE_Get_GLON_GPS_BinEph((XofSvcsIf *)(i + 1), a1, (uint64_t)v83);
        uint64_t v35 = a3[2147];
        if (!GLON_GPS_BinEph
          || (unsigned int v36 = v83[0], *(unsigned char *)(v35 + i)) && SLODWORD(v83[0]) <= *((_DWORD *)a3 + 29 * i + 3366))
        {
          *(unsigned char *)(v35 + i) = 0;
        }
        else
        {
          double v37 = (char *)a3 + 116 * i;
          *((_DWORD *)v37 + 3394) = *(_DWORD *)&v86[16];
          long long v38 = *(_OWORD *)v86;
          long long v39 = v83[1];
          *(_OWORD *)(v37 + 13464) = v83[0];
          *(_OWORD *)(v37 + 13480) = v39;
          long long v40 = v83[3];
          *(_OWORD *)(v37 + 13496) = v83[2];
          *(_OWORD *)(v37 + 13512) = v40;
          long long v41 = v84;
          *(_OWORD *)(v37 + 13544) = v85;
          *(_OWORD *)(v37 + 13560) = v38;
          *(_OWORD *)(v37 + 13528) = v41;
          *(unsigned char *)(a3[2143] + i) = 1;
          *(unsigned char *)(a3[2147] + i) = 1;
          long long v79 = 0u;
          *(_OWORD *)double v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          *(void *)&double v76 = __PAIR64__(DWORD1(v83[0]), v36);
          LOBYTE(v77) = BYTE8(v83[0]);
          *(_WORD *)((char *)&v77 + 1) = *(_WORD *)((char *)v83 + 9);
          unsigned int v42 = 21;
          uint64_t v43 = 11;
          double v44 = (char *)&v83[1] + 8;
          do
          {
            uint64_t v45 = (char *)&v76 + v43;
            *uint64_t v45 = *v44;
            *(_WORD *)(v45 + 1) = *(_WORD *)(v44 + 1);
            v44 += 4;
            --v42;
            v43 += 3;
          }
          while (v42 > 1);
          *(_WORD *)&v80[15] = *(_WORD *)&v86[12];
          int v81 = *(_DWORD *)&v86[14];
          char v82 = v86[18];
          Debug_Log_GPS_Eph(2, i + 101, (uint64_t)&v76);
        }
      }
    }
  }
  uint64_t v46 = 0;
  *(void *)&v83[0] = 0;
  WORD4(v83[0]) = 0;
  memset((char *)v83 + 12, 0, 24);
  while (*(unsigned char *)(a3[2148] + v46) && (int)a1 - *((_DWORD *)a3 + 9 * v46 + 4062) <= 1800)
  {
    uint64_t v47 = v46 + 1;
LABEL_70:
    uint64_t v46 = v47;
    if (v47 == 24) {
      goto LABEL_71;
    }
  }
  uint64_t v47 = v46 + 1;
  if (!Core_Get_GLON_Alm((v46 + 1), a1, (uint64_t)v83)
    || *(unsigned char *)(a3[2148] + v46) && SLODWORD(v83[0]) <= *((_DWORD *)a3 + 9 * v46 + 4062))
  {
    goto LABEL_70;
  }
  if ((int)a1 < 1) {
    goto LABEL_62;
  }
  *(void *)float64x2_t v75 = 0;
  double v76 = 0.0;
  API_Get_UTC_Cor(1, &v76);
  GPS_To_Glon_Time(0, a1 / 0x93A80, (double)(a1 % 0x93A80), v76, v75, &v75[1], &v74);
  int v48 = v75[1] - WORD4(v83[0]);
  int v49 = v48 + 1461;
  if (v48 >= -730) {
    int v49 = v75[1] - WORD4(v83[0]);
  }
  int v50 = v48 <= 729 ? v49 : v48 - 1461;
  if ((v50 + 7) < 0x1D)
  {
LABEL_62:
    double v51 = (char *)a3 + 36 * v46;
    uint64_t v52 = (long long *)(v51 + 16248);
    *((_DWORD *)v51 + 4070) = v83[2];
    long long v53 = v83[1];
    *(_OWORD *)(v51 + 16248) = v83[0];
    *(_OWORD *)(v51 + 16264) = v53;
    *(unsigned char *)(a3[2144] + v46) = 1;
    *(unsigned char *)(a3[2148] + v46) = 1;
    DD_GLON_Alm_Set_Health_Frq((uint64_t)v83, a3);
    if (g_Logging_Cfg >= 6) {
      EvLog_v("DD_Assist_GLON_Alm:  Received Alm for SV %d ", v46 + 1);
    }
    if ((int)a1 >= 1) {
      Core_Save_GLON_Alm((v46 + 1), 0, v52);
    }
    uint64_t v54 = 0;
    LODWORD(v55) = 0;
    uint64_t v56 = a3[1489];
    uint64_t v57 = p_NV;
    uint64_t v58 = p_NV + 29160;
    uint64_t v59 = *(void *)(v56 + 16);
    *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v56;
    *(void *)(v58 + 28) = v59;
    uint64_t v60 = v57 + 29168;
    __int16 v61 = -9871;
    do
    {
      int v62 = *(unsigned __int8 *)(v60 + v54) ^ HIBYTE(v61);
      __int16 v61 = -12691 * (v61 + (*(unsigned __int8 *)(v60 + v54) ^ HIBYTE(v61))) + 22719;
      uint64_t v55 = (v55 + v62);
      ++v54;
    }
    while (v54 != 32);
    *(void *)(v57 + 29160) = v55;
    goto LABEL_70;
  }
  EvLog_v("DD_Assist_GLON_Alm: Rejected! SV %d DayNo too old or new %d", v46 + 1, v50);
LABEL_71:
  *(void *)&v83[0] = 0;
  WORD4(v83[0]) = 0;
  HIDWORD(v83[0]) = 0;
  LOBYTE(v83[1]) = 0;
  DWORD1(v83[1]) = 0;
  BYTE8(v83[1]) = 0;
  uint64_t result = Core_Get_GLON_Clk1(a1, v83);
  if (result)
  {
    int v64 = *(_DWORD *)v72;
    if (!*((unsigned char *)v72 + 80) || SLODWORD(v83[0]) > v64)
    {
      uint64_t result = (uint64_t)EvLog_v("DD_Assist_GLON_Clk1:  New Clk1:  Source %d > %d  or  GPS_secs %d > %d , TauGPS %d %d", DWORD1(v83[0]), *((_DWORD *)v72 + 1), LODWORD(v83[0]), v64, DWORD1(v83[1]), *((_DWORD *)v72 + 5));
      *(_OWORD *)float64x2_t v72 = v83[0];
      *(_OWORD *)((char *)v72 + 12) = *(_OWORD *)((char *)v83 + 12);
      *((unsigned char *)v72 + 80) = 1;
      if ((int)a1 >= 1)
      {
        uint64_t v65 = 0;
        LODWORD(v66) = 0;
        uint64_t v67 = p_NV;
        uint64_t v68 = p_NV + 29200;
        *(_OWORD *)(p_NV + 29208) = v83[0];
        *(_OWORD *)(v68 + 20) = *(_OWORD *)((char *)v83 + 12);
        uint64_t v69 = v67 + 29208;
        __int16 v70 = -9871;
        do
        {
          int v71 = *(unsigned __int8 *)(v69 + v65) ^ HIBYTE(v70);
          __int16 v70 = -12691 * (v70 + (*(unsigned __int8 *)(v69 + v65) ^ HIBYTE(v70))) + 22719;
          uint64_t v66 = (v66 + v71);
          ++v65;
        }
        while (v65 != 32);
        *(void *)(v67 + 29200) = v66;
      }
    }
  }
  return result;
}

BOOL NK_Least_Squares_Core(double *a1, double (*a2)[3], signed int a3, BOOL a4, int a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  BOOL v11 = a4;
  unsigned int v12 = a3;
  uint64_t v126 = *MEMORY[0x263EF8340];
  _MergedGlobals_5[0] = 0;
  *a8 = -1;
  if (a4)
  {
    uint64_t v123 = -1;
    int v124 = -1;
    BOOL v14 = (*(char *)(a9 + 494) & 0x80000000) == 0 && *(_DWORD *)(a9 + 500) == 1;
  }
  else
  {
    BOOL v14 = 0;
    xmmword_26AA36251 = 0u;
    unk_26AA36261 = 0u;
    xmmword_26AA36231 = 0u;
    unk_26AA36241 = 0u;
    xmmword_26AA36211 = 0u;
    unk_26AA36221 = 0u;
    xmmword_26AA361F1 = 0u;
    unk_26AA36201 = 0u;
    uint64_t v123 = -1;
    int v124 = -1;
    *(_OWORD *)(a9 + 400) = 0u;
    *(_OWORD *)(a9 + 416) = 0u;
    *(void *)(a9 + 432) = 0;
  }
  BOOL v15 = NK_Least_Squares_Update(a1, a3, 1, v14, v125, a9);
  BOOL v16 = v15;
  if (!v15) {
    return v16;
  }
  __uint64_t n = 8 * (int)v12;
  if (__n > 0x38) {
    __assert_rtn("NK_Least_Squares_Core", "NK_Least_Squares_Check.cpp", 226, "(sizeof(p_Lsq_Intl->dX)) >= (NumStates*sizeof(p_Lsq_Intl->ACovMat[0]))");
  }
  BOOL v104 = v15;
  long long v105 = a2;
  uint64_t v17 = 0;
  unint64_t v115 = 0;
  int v110 = v14 - v12;
  signed int v18 = v12 + v12 * v12;
  double v19 = -30.0;
  if ((a5 & 0xFFFFFFFE) == 6) {
    double v19 = -10.0;
  }
  double v109 = v19;
  uint64_t v118 = v12;
  uint64_t v117 = (double *)(a9 + 112);
  uint64_t v106 = a9 + 592;
  char v114 = 1;
  unsigned int v116 = v12;
  while (2)
  {
    if (*(double *)(a9 + 408) <= 0.0) {
      int v20 = v110;
    }
    else {
      int v20 = v110 + 1;
    }
    memcpy((void *)a9, (const void *)(a9 + 112 + 8 * (v18 / 2)), __n);
    uint64_t v21 = 0;
    double v22 = 0.0;
    double v23 = 0.0;
    do
    {
      uint64_t v24 = *(void *)(a9 + 576);
      if (v24) {
        *(void *)(v24 + 8 * v21) = 0;
      }
      if ((int)v17 <= 2 && *(unsigned char *)(*(void *)(a9 + 520) + v21))
      {
        if ((int)v17 >= 1)
        {
          uint64_t v25 = (unsigned int *)&v123 + 1;
          uint64_t v26 = (v17 + 1) - 2;
          do
          {
            unsigned int v28 = *v25++;
            uint64_t v27 = v28;
            BOOL v30 = v26-- != 0;
            BOOL v31 = v21 != v27;
          }
          while (v21 != v27 && v30);
          goto LABEL_29;
        }
      }
      else if (!*(unsigned char *)(*(void *)(a9 + 520) + v21))
      {
        goto LABEL_40;
      }
      BOOL v31 = 1;
LABEL_29:
      uint64_t v32 = a9 + 4 * v21;
      unint64_t v9 = v9 & 0xFFFFFFFF00000000 | *(unsigned int *)(a9 + 496);
      NK_Least_Obs_Equ_SV(v21 != *(_DWORD *)(a9 + 512), *(void *)(a9 + 488), v9, *(unsigned __int8 *)(v32 + 592), *(_DWORD *)(a9 + 516), &a1[7 * v21], (double *)v125, *(double *)(*(void *)(a9 + 528) + 8 * v21));
      double v33 = 0.0;
      if (v12)
      {
        double v34 = (double *)v125;
        uint64_t v35 = (double *)a9;
        uint64_t v36 = v118;
        do
        {
          double v37 = *v34++;
          double v38 = v37;
          double v39 = *v35++;
          double v33 = v33 + v38 * v39;
          --v36;
        }
        while (v36);
      }
      double v40 = *(double *)(*(void *)(a9 + 528) + 8 * v21) - v33;
      uint64_t v41 = *(void *)(a9 + 544);
      *(double *)(v41 + 8 * v21) = v40;
      if (v31)
      {
        double v42 = *(double *)(*(void *)(a9 + 536) + 8 * v21);
        double v22 = v22 + 1.0 / v42;
        double v23 = v23 + v40 * v40 * (1.0 / v42);
        ++v20;
        if (v11)
        {
          uint64_t v43 = *(void *)(a9 + 576);
          if (v43)
          {
            unsigned int v44 = v12;
            uint64_t v45 = *(void *)(a9 + 568);
            *(double *)(v45 + 8 * v21) = v42;
            *(void *)(*(void *)(a9 + 584) + 8 * v21) = *(void *)(v41 + 8 * v21);
            v122[0] = 0.0;
            invtst(v117, (double *)v125, v44, 0.0, 0.0, 1.0e20, v122);
            double v46 = fabs(v122[0]);
            double v47 = *(double *)(v45 + 8 * v21) - v46;
            *(double *)(v43 + 8 * v21) = v47;
            if (v47 <= 0.0)
            {
              if (v47 < -0.005)
              {
                GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(v32 + 592));
                EvLog_v("NK_Least_Squares_Core:  %d  %s  Suspect Post Res Var:  DOF %d   %f %f %f  Res %f", v21, GNSS_SV_Str, v20, sqrt(*(double *)(*(void *)(a9 + 576) + 8 * v21)), sqrt(*(double *)(*(void *)(a9 + 568) + 8 * v21)), sqrt(v46), *(double *)(*(void *)(a9 + 584) + 8 * v21));
                uint64_t v43 = *(void *)(a9 + 576);
              }
              *(void *)(v43 + 8 * v21) = 0;
            }
            unsigned int v12 = v116;
          }
        }
      }
LABEL_40:
      ++v21;
    }
    while (v21 != 128);
    double v49 = 0.0;
    if (v22 > 0.0) {
      double v49 = sqrt(v23 / v22);
    }
    **(double **)(a9 + 552) = v49;
    int v50 = *(double **)(a9 + 560);
    if (v50)
    {
      if (v20 < 1) {
        double v51 = 0.0;
      }
      else {
        double v51 = v23 / (double)v20;
      }
      *int v50 = v51;
      if ((int)v17 <= 2 && v11)
      {
        BOOL v53 = (int)v17 > 1 || v20 < 2;
        int v54 = v51 < 0.2 || v53;
        if (v54 == 1)
        {
          if ((int)v17 <= 0)
          {
            int v55 = 0;
            if (v114) {
              unsigned int v56 = 0;
            }
            else {
              unsigned int v56 = v115;
            }
            unsigned int v57 = HIDWORD(v115);
            if (v114) {
              unsigned int v57 = 0;
            }
            unint64_t v115 = __PAIR64__(v57, v56);
            unsigned int v58 = -1;
            goto LABEL_137;
          }
        }
        else if (!v17)
        {
          xmmword_26AA362D1 = 0u;
          unk_26AA362E1 = 0u;
          xmmword_26AA362B1 = 0u;
          unk_26AA362C1 = 0u;
          xmmword_26AA36291 = 0u;
          unk_26AA362A1 = 0u;
          xmmword_26AA36271 = 0u;
          unk_26AA36281 = 0u;
        }
        unsigned int v59 = 0;
        unsigned int v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = *(void *)(a9 + 576);
        int v63 = -1;
        double v64 = 0.0;
        double v65 = 0.0;
        unsigned int v58 = -1;
        do
        {
          double v66 = *(double *)(v62 + 8 * v61);
          if (v66 <= 0.0)
          {
            if (_MergedGlobals_5[v61 + 129])
            {
              long long v78 = Get_GNSS_SV_Str(*(unsigned int *)(v106 + 4 * v61));
              EvCrt_v("MeasurementToBeRejected:  %s  ERROR outlier_tested TRUE", v78);
              goto LABEL_105;
            }
          }
          else
          {
            double v67 = *(double *)(*(void *)(a9 + 568) + 8 * v61);
            if (v67 < 0.01) {
              ++v59;
            }
            double v68 = v66 / v67;
            if (v66 / v67 < 0.01) {
              char v69 = 1;
            }
            else {
              char v69 = v54;
            }
            if (v69)
            {
              BOOL v70 = v68 >= 0.005 || _MergedGlobals_5[v61 + 129] == 0;
              if (!v70)
              {
                double v80 = Get_GNSS_SV_Str(*(unsigned int *)(v106 + 4 * v61));
                EvLog_v("MeasurementToBeRejected:  %s  AddBack %f", v80, v68);
LABEL_105:
                unsigned int v58 = -1;
                int v55 = 1;
                goto LABEL_131;
              }
            }
            else
            {
              BOOL v71 = v67 < 0.01;
              double v72 = *(double *)(*(void *)(a9 + 584) + 8 * v61);
              int v73 = v71;
              double v74 = v72 * v72 / v66;
              if (v74 <= 4.0) {
                int v73 = 0;
              }
              v60 += v73;
              if (v74 > v64)
              {
                int v63 = v61;
                double v64 = v74;
              }
              if (v72 < v109 && v74 > v65)
              {
                unsigned int v58 = v61;
                double v65 = v74;
              }
              _MergedGlobals_5[v61 + 129] = 1;
            }
          }
          ++v61;
        }
        while (v61 != 128);
        if (*(unsigned char *)(a9 + 504) && *(_DWORD *)(a9 + 500) <= 1u && (v58 & 0x80000000) == 0)
        {
          EvLog_v("MeasurementToBeRejected:  MaxPosit %f %d", v65, v58);
          double v64 = 999.9;
          goto LABEL_99;
        }
        if (v63 < 0)
        {
          int v55 = 0;
          unsigned int v58 = v63;
          goto LABEL_131;
        }
        unsigned int v58 = v63;
LABEL_99:
        int v75 = *(unsigned __int8 *)(a7 + v58);
        unsigned int v76 = *(unsigned __int8 *)(a6 + v58);
        if (v76 > 0x10)
        {
          if (v76 < 0x21)
          {
            uint64_t v82 = 1;
            if (!*(unsigned char *)(a7 + v58)) {
              uint64_t v82 = 2;
            }
            double v81 = GaussCritVal[v75 == 0];
            double v77 = v81 + (GaussCritVal[v82] - v81) * (double)(int)(v76 - 16) / 17.0;
          }
          else
          {
            uint64_t v79 = 1;
            if (!*(unsigned char *)(a7 + v58)) {
              uint64_t v79 = 2;
            }
            double v77 = GaussCritVal[v79];
          }
        }
        else
        {
          double v77 = GaussCritVal[v75 == 0];
        }
        if (v64 >= v77)
        {
          int v85 = _MergedGlobals_5[v58 + 1];
          Get_GNSS_SV_Str(*(unsigned int *)(a9 + 4 * v58 + 592));
          if (v85) {
            EvCrt_v("MeasurementToBeRejected:  %s  Overridden %d: Gss MaxRatio %d %g %d");
          }
          else {
            EvCrt_v("MeasurementToBeRejected:  %s  %d: Gss MaxRatio %d %g %d");
          }
        }
        else
        {
          if (v20 <= 6)
          {
            uint64_t v83 = v20 - 2;
            int v84 = v76 - 12;
            if (v76 > 0xC)
            {
              if (v76 < 0x24)
              {
                BOOL v70 = v75 == 0;
                uint64_t v87 = &TauCritVal[3 * (int)v83];
                double v88 = v87[v75 == 0];
                uint64_t v89 = 1;
                if (v70) {
                  uint64_t v89 = 2;
                }
                double v77 = v88 + (v87[v89] - v88) * (double)v84 / 24.0;
              }
              else
              {
                BOOL v70 = v75 == 0;
                uint64_t v86 = 1;
                if (v70) {
                  uint64_t v86 = 2;
                }
                double v77 = TauCritVal[3 * (int)v83 + v86];
              }
            }
            else
            {
              double v77 = TauCritVal[3 * v83 + (v75 == 0)];
            }
          }
          if (v64 < v77 * **(double **)(a9 + 560))
          {
            int v55 = 0;
            unsigned int v58 = -1;
            goto LABEL_131;
          }
          int v90 = _MergedGlobals_5[v58 + 1];
          double v91 = Get_GNSS_SV_Str(*(unsigned int *)(a9 + 4 * v58 + 592));
          if (v90) {
            EvCrt_v("MeasurementToBeRejected:  %s  Overridden %d: Tau MaxRatio %d %g %g %g %d %d");
          }
          else {
            EvLog_v("MeasurementToBeRejected:  %s  %d: Tau MaxRatio %d %g %g %g %d %d", v91, *(unsigned __int8 *)(a9 + 504), v58, v64, **(double **)(a9 + 560), v77, v20, *(unsigned __int8 *)(a6 + v58));
          }
        }
        unsigned int v12 = v116;
        if (!_MergedGlobals_5[v58 + 129])
        {
          double v92 = Get_GNSS_SV_Str(*(unsigned int *)(a9 + 4 * v58 + 592));
          EvCrt_v("MeasurementToBeRejected:  %s  ERROR outlier_tested FALSE", v92);
        }
        int v55 = 0;
        _MergedGlobals_5[v58 + 129] = 0;
LABEL_131:
        if (v114) {
          unsigned int v93 = v60;
        }
        else {
          unsigned int v93 = v115;
        }
        unsigned int v94 = HIDWORD(v115);
        if (v114) {
          unsigned int v94 = v59;
        }
        unint64_t v115 = __PAIR64__(v94, v93);
        if ((int)v17 > 1)
        {
          int v97 = 0;
          long long v95 = a8;
          uint64_t v96 = (v17 + 1);
        }
        else
        {
LABEL_137:
          long long v95 = a8;
          uint64_t v96 = (v17 + 1);
          *((_DWORD *)a8 + (int)v17) = v58;
          int v97 = 1;
        }
        if ((v58 & 0x80000000) != 0) {
          int v97 = 0;
        }
        if (v55 || v97)
        {
          if (v55)
          {
            uint64_t v98 = (int)v17 - 1;
            double v99 = *(double *)(*(void *)(a9 + 536) + 8 * *((int *)v95 + v98));
            EvLog_v("MeasurementToBeRejected:  Add back %d ", *((_DWORD *)v95 + v98));
            int v100 = *((_DWORD *)v95 + v98);
            uint64_t v101 = v100;
            uint64_t v96 = v17;
            uint64_t v17 = v98;
          }
          else
          {
            uint64_t v98 = (int)v17;
            uint64_t v101 = *((int *)v95 + (int)v17);
            double v99 = -*(double *)(*(void *)(a9 + 536) + 8 * v101);
            int v100 = *((_DWORD *)v95 + (int)v17);
          }
          unint64_t v102 = v113 & 0xFFFFFFFF00000000 | *(unsigned int *)(a9 + 496);
          NK_Least_Obs_Equ_SV(v100 != *(_DWORD *)(a9 + 512), *(void *)(a9 + 488), *(_DWORD *)(a9 + 496), *(unsigned __int8 *)(a9 + 4 * v101 + 592), *(_DWORD *)(a9 + 516), &a1[7 * (int)v101], (double *)v125, *(double *)(*(void *)(a9 + 528) + 8 * v101));
          double v120 = 0.0;
          umeas((BOOL)v117, v12, v99, (double *)v125, v122, v121, &v120, 1.0e20);
          unint64_t v113 = v102;
          if (v55)
          {
            *((_DWORD *)&v123 + (int)v96) = -1;
            *((_DWORD *)v95 + v98) = -1;
          }
          else
          {
            *((_DWORD *)&v123 + (int)v96) = *((_DWORD *)v95 + v98);
            uint64_t v17 = v96;
          }
          char v114 = 0;
          BOOL v11 = v55 == 0;
          continue;
        }
      }
      if (!v17 && SHIDWORD(v115) >= 1 && SHIDWORD(v115) <= 2 && v115 == HIDWORD(v115)) {
        _MergedGlobals_5[0] = 1;
      }
    }
    break;
  }
  if (*(char *)(a9 + 491) >= 1) {
    ud2var((uint64_t)v117, v12, *(unsigned __int8 *)(a9 + 491) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 491) + 56));
  }
  BOOL v16 = v104;
  if (*(char *)(a9 + 492) >= 1) {
    ud2var((uint64_t)v117, v12, *(unsigned __int8 *)(a9 + 492) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 492) + 56));
  }
  if (*(char *)(a9 + 493) >= 1) {
    ud2var((uint64_t)v117, v12, *(unsigned __int8 *)(a9 + 493) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 493) + 56));
  }
  if ((*(char *)(a9 + 488) & 0x80000000) == 0) {
    Comp_NEDvar_UDU((uint64_t)v117, v12, *(unsigned __int8 *)(a9 + 488), v105, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 488) + 56));
  }
  if ((*(char *)(a9 + 494) & 0x80000000) == 0) {
    ud2var((uint64_t)v117, v12, *(unsigned __int8 *)(a9 + 494) + 1, 1u, (double *)(a9 + 8 * *(unsigned __int8 *)(a9 + 494) + 56));
  }
  return v16;
}

BOOL NK_Least_Squares_Update(double *a1, signed int a2, int a3, char a4, _OWORD *a5, uint64_t a6)
{
  v24[8] = *(double *)MEMORY[0x263EF8340];
  *(_OWORD *)(a6 + 112) = 0u;
  uint64_t v11 = a6 + 112;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  if (a3) {
    double v12 = 1.0e20;
  }
  else {
    double v12 = -1.0;
  }
  *(_OWORD *)(a6 + 304) = 0uLL;
  *(_OWORD *)(a6 + 320) = 0uLL;
  *(_OWORD *)(a6 + 272) = 0uLL;
  *(_OWORD *)(a6 + 288) = 0uLL;
  *(_OWORD *)(a6 + 240) = 0uLL;
  *(_OWORD *)(a6 + 256) = 0uLL;
  *(_OWORD *)(a6 + 208) = 0uLL;
  *(_OWORD *)(a6 + 224) = 0uLL;
  *(_OWORD *)(a6 + 176) = 0uLL;
  *(_OWORD *)(a6 + 192) = 0uLL;
  *(_OWORD *)(a6 + 144) = 0uLL;
  *(_OWORD *)(a6 + 160) = 0uLL;
  *(_OWORD *)(a6 + 128) = 0uLL;
  if (a2 >= 1)
  {
    int v13 = 0;
    do
    {
      int v14 = v13 + 1;
      *(void *)(a6 + 8 * ((v14 * (v13 + 2)) >> 1) + 104) = 0x426D1A94A2000000;
      ++v13;
    }
    while (a2 != v14);
  }
  if ((a4 & 1) != 0 && *(char *)(a6 + 494) >= 1) {
    *(void *)(a6
  }
              + 8
              * (((*(unsigned __int8 *)(a6 + 494)
                 + 2
                 + (*(unsigned __int8 *)(a6 + 494) + 2) * *(unsigned __int8 *)(a6 + 494)) >> 1)
               - 1)
              + 112) = 0x4039000000000000;
  if (*(double *)(a6 + 408) > 0.0)
  {
    a5[2] = 0u;
    a5[3] = 0u;
    *a5 = 0u;
    a5[1] = 0u;
    *(void *)a5 = *(void *)(a6 + 416);
    *((void *)a5 + 1) = *(void *)(a6 + 424);
    *((void *)a5 + 2) = *(void *)(a6 + 432);
    *((void *)a5 + a2) = *(void *)(a6 + 400);
    v22[0] = 0.0;
    umeas(v11, a2, *(double *)(a6 + 408), (double *)a5, v24, v23, v22, 1.0e20);
  }
  uint64_t v15 = 0;
  BOOL v16 = (unsigned __int8 *)(a6 + 592);
  do
  {
    if (*(unsigned char *)(*(void *)(a6 + 520) + v15))
    {
      unint64_t v6 = v6 & 0xFFFFFFFF00000000 | *(unsigned int *)(a6 + 496);
      NK_Least_Obs_Equ_SV(v15 != *(_DWORD *)(a6 + 512), *(void *)(a6 + 488), v6, *v16, *(_DWORD *)(a6 + 516), a1, (double *)a5, *(double *)(*(void *)(a6 + 528) + 8 * v15));
      v22[0] = 0.0;
      umeas(v11, a2, *(double *)(*(void *)(a6 + 536) + 8 * v15), (double *)a5, v24, v23, v22, v12);
    }
    ++v15;
    a1 += 7;
    v16 += 4;
  }
  while (v15 != 128);
  uint64_t v17 = 1;
  ud2var(v11, a2, 1, a2, v22);
  if (a2 >= 1)
  {
    if (v22[0] <= 1000000000.0)
    {
      uint64_t v18 = 1;
      do
      {
        unint64_t v19 = v18;
        if (a2 == v18) {
          break;
        }
        double v20 = v22[v18++];
      }
      while (v20 <= 1000000000.0);
      return v19 >= a2;
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

void NK_Least_Obs_Equ_SV(int a1, unint64_t a2, int a3, int a4, int a5, double *a6, double *a7, double a8)
{
  unint64_t v15 = HIBYTE(a2);
  bzero(a7, 8 * HIBYTE(a2) + 8);
  *a7 = -*a6;
  a7[1] = -a6[1];
  a7[2] = -a6[2];
  if (a1)
  {
    if (a5 != 1)
    {
      unint64_t v17 = v15 - 1;
      double v18 = 1.0;
LABEL_10:
      a7[v17] = v18;
      goto LABEL_11;
    }
    LODWORD(v16) = a2;
    switch(a4)
    {
      case 0:
      case 7:
        EvCrt_Illegal_switch_case("NK_Least_Obs_Equ_SV", 0xA15u);
        break;
      case 1:
      case 3:
      case 5:
      case 6:
        goto LABEL_4;
      case 2:
        unint64_t v16 = a2 >> 8;
        goto LABEL_4;
      case 4:
        unint64_t v16 = a2 >> 16;
LABEL_4:
        if ((int)v16 >= 0x1000000) {
          a7[BYTE3(v16)] = 1.0;
        }
        break;
      default:
        break;
    }
    if ((int)(a2 >> 24) >> 24 >= 1)
    {
      double v18 = -a6[6];
      unint64_t v17 = SBYTE6(a2);
      goto LABEL_10;
    }
  }
LABEL_11:
  a7[v15] = a8;
}

unsigned __int8 *NK_Least_Squares_Cross_Check(unsigned __int8 *result, uint64_t a2, uint64_t a3, double *a4)
{
  int v5 = result;
  unint64_t v6 = (unsigned char *)(a3 + 79568);
  double v7 = *(double *)(a2 + 27584);
  double v8 = a4[1071];
  *(unsigned char *)(a3 + 79568) = 0;
  double v9 = 0.0;
  if (*((char *)a4 + 8719) < 1
    || a4[*((unsigned __int8 *)a4 + 8719) + 285] >= 9999000.0
    || *(double *)(a3 + 61736) >= 1.3e11)
  {
    int v13 = 0;
    double v12 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
  }
  else
  {
    double v10 = a4[262];
    double v11 = *(double *)(a3 + 1632) * 299792458.0;
    double v12 = v10 - v11;
    int v13 = 1;
  }
  if (*((char *)a4 + 8720) < 1
    || a4[*((unsigned __int8 *)a4 + 8720) + 285] >= 9999000.0
    || *(double *)(a3 + 61744) >= 1.3e11)
  {
    int v16 = 0;
    double v14 = 0.0;
    double v15 = 0.0;
  }
  else
  {
    double v14 = a4[264];
    double v15 = *(double *)(a3 + 1640) * 299792458.0;
    double v9 = v14 - v15;
    int v16 = 1;
  }
  double v17 = 0.0;
  if (*((char *)a4 + 8721) < 1
    || a4[*((unsigned __int8 *)a4 + 8721) + 285] >= 9999000.0
    || *(double *)(a3 + 61752) >= 1.3e11)
  {
    int v20 = 0;
    double v18 = 0.0;
    double v19 = 0.0;
  }
  else
  {
    double v18 = a4[266];
    double v19 = *(double *)(a3 + 1648) * 299792458.0;
    double v17 = v18 - v19;
    int v20 = 1;
  }
  if (*(unsigned __int8 *)a4 >= 5u && *((unsigned char *)a4 + 8584))
  {
    double v21 = v7 + v8;
    double v22 = fabs(v12);
    int v23 = v22 > v21 ? v13 : 0;
    if (v23 == 1
      || (fabs(v9) > v21 ? (char v24 = v16) : (char v24 = 0),
          (v24 & 1) != 0 || (fabs(v17) > v21 ? (char v25 = v20) : (char v25 = 0), (v25 & 1) != 0)))
    {
      uint64_t v26 = 0;
      int v27 = 0;
      int v28 = 0;
      int v29 = 0;
      int v30 = 0;
      int v31 = 0;
      int v32 = 0;
      uint64_t v33 = 12056;
      uint64_t v34 = 7064;
      do
      {
        if (*(unsigned char *)(a3 + v34) && (*(_DWORD *)(a3 + v26 + 7320) - 1) >= 0x1D)
        {
          int v35 = result[v26];
          if (v35 == 4)
          {
            if (v20)
            {
              ++v27;
              if (fabs(v17 + *(double *)(a3 + v33)) - fabs(*(double *)(a3 + v33)) <= 0.0) {
                ++v30;
              }
              else {
                --v30;
              }
            }
          }
          else if (v35 == 2)
          {
            if (v16)
            {
              ++v28;
              if (fabs(v9 + *(double *)(a3 + v33)) - fabs(*(double *)(a3 + v33)) <= 0.0) {
                ++v31;
              }
              else {
                --v31;
              }
            }
          }
          else if (v13)
          {
            ++v29;
            if (fabs(v12 + *(double *)(a3 + v33)) - fabs(*(double *)(a3 + v33)) <= 0.0) {
              ++v32;
            }
            else {
              --v32;
            }
          }
        }
        v26 += 4;
        v33 += 8;
        ++v34;
      }
      while (v26 != 512);
      if (v22 < 10000.0) {
        char v36 = v13;
      }
      else {
        char v36 = 0;
      }
      if ((v36 & 1) == 0)
      {
        char v37 = fabs(v9) < 10000.0 ? v16 : 0;
        if ((v37 & 1) == 0)
        {
          char v38 = fabs(v17) < 10000.0 ? v20 : 0;
          if ((v38 & 1) == 0)
          {
            if (v13)
            {
              BOOL v40 = v32 >= 0 && v29 != 0;
              if (!(v28 + v27) || v28 >= 1 && v31 > 0 || (int v41 = 0, v27 >= 1) && v30 >= 1)
              {
                int v41 = 1;
                unsigned char *v6 = 1;
              }
              int v50 = v41;
              double v49 = (unsigned char *)(a3 + 79568);
              uint64_t result = NK_Least_Squares_Cross_Check_Adj(result, (double *)a3, 1, v40, v41, v11, v10, v12);
              int v42 = v50;
              unint64_t v6 = v49;
            }
            else
            {
              int v42 = 0;
            }
            if (v16)
            {
              BOOL v44 = v31 >= 0 && v28 != 0;
              if (!(v29 + v27) || v29 >= 1 && v32 > 0 || v27 >= 1 && v30 >= 1)
              {
                int v42 = 1;
                unsigned char *v6 = 1;
              }
              uint64_t v45 = v6;
              uint64_t result = NK_Least_Squares_Cross_Check_Adj(v5, (double *)a3, 2, v44, v42, v15, v14, v9);
              unint64_t v6 = v45;
            }
            if (v20)
            {
              BOOL v47 = v30 >= 0 && v27 != 0;
              if (!(v29 + v28) || v29 >= 1 && v32 > 0 || (int v48 = 0, v28 >= 1) && v31 >= 1)
              {
                int v48 = 1;
                unsigned char *v6 = 1;
              }
              return NK_Least_Squares_Cross_Check_Adj(v5, (double *)a3, 4, v47, v48, v19, v18, v17);
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *NK_Least_Squares_Cross_Check_Adj(unsigned __int8 *result, double *a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8)
{
  if (a4 && a5)
  {
    int v10 = a3;
    double v12 = result;
    uint64_t result = (unsigned __int8 *)EvLog_nd("NK_LSq_Cross_Check:  KF Clock bias change : ", 4, a3, a3, (int)a6, (int)a7, (int)a8);
    switch(v10)
    {
      case 4:
        int v13 = a2 + 206;
        goto LABEL_9;
      case 2:
        int v13 = a2 + 205;
        goto LABEL_9;
      case 1:
        int v13 = a2 + 204;
LABEL_9:
        uint64_t v14 = 0;
        double *v13 = a7 * 0.00000000333564095;
        while (1)
        {
          if (!*((unsigned char *)a2 + v14 + 7064) && (*((_DWORD *)a2 + v14 + 1830) - 1) > 0x1C) {
            goto LABEL_16;
          }
          if (v10 != 4 && v10 != 2) {
            break;
          }
          if (*v12 == v10) {
            goto LABEL_15;
          }
LABEL_16:
          ++v14;
          v12 += 4;
          if (v14 == 128) {
            return result;
          }
        }
        int v15 = *v12;
        if (v15 == 2 || v15 == 4) {
          goto LABEL_16;
        }
LABEL_15:
        a2[v14 + 1507] = a2[v14 + 1507] + a8;
        a2[v14 + 6449] = a2[v14 + 6449] + a8;
        a2[v14 + 1635] = a2[v14 + 1635] + a8;
        a2[v14 + 1763] = a2[v14 + 1763] + a8;
        goto LABEL_16;
    }
  }
  return result;
}

void NK_Least_Squares_Check(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  unsigned __int8 v3 = v2;
  int v115 = v4;
  BOOL v117 = v5;
  int v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  v166[1] = *MEMORY[0x263EF8340];
  v166[0] = 0;
  uint64_t v113 = v8 + 60328;
  double v109 = (unsigned char *)(v8 + 36563);
  uint64_t v106 = (unsigned char *)(v8 + 21659);
  int v110 = (unsigned char *)(v8 + 6755);
  uint64_t v112 = (float64x2_t *)(v8 + 1784);
  memset(v165, 0, sizeof(v165));
  double v11 = (BOOL *)(v2 + 8584);
  long long v164 = 0u;
  long long v163 = 0u;
  long long v162 = 0u;
  long long v161 = 0u;
  long long v160 = 0u;
  long long v159 = 0u;
  long long v158 = 0u;
  long long v157 = 0u;
  memset(v156, 0, sizeof(v156));
  uint64_t v138 = 0;
  uint64_t v137 = 0;
  char v139 = 0;
  memset(v132, 0, sizeof(v132));
  memset(v133, 0, sizeof(v133));
  long long v134 = 0u;
  float64x2_t v135 = 0u;
  memset(v136, 0, 25);
  uint64_t v141 = 0;
  uint64_t v140 = 0;
  char v142 = 0;
  bzero(&v143, 0x254uLL);
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  long long v128 = 0u;
  long long v127 = 0u;
  long long v126 = 0u;
  long long v125 = 0u;
  long long v124 = 0u;
  uint64_t v123 = 0;
  LODWORD(__src[0]) = 0;
  WORD2(__src[0]) = 0;
  LODWORD(v155[0]) = 0;
  *(_DWORD *)((char *)v155 + 3) = 0;
  bzero((char *)__src + 6, 0x213CuLL);
  *(_OWORD *)((char *)v155 + 7) = 0uLL;
  *(void *)((char *)&v155[1] + 7) = 0;
  *(_WORD *)unsigned __int8 v3 = 0;
  memcpy(v3 + 2, __src, 0x213EuLL);
  *(_OWORD *)(v3 + 8516) = 0u;
  *(_OWORD *)(v3 + 8532) = 0u;
  uint64_t v107 = (uint64_t)(v3 + 8608);
  *(_OWORD *)(v3 + 8548) = 0u;
  *(_OWORD *)(v3 + 8564) = 0u;
  *(_OWORD *)(v3 + 8580) = 0u;
  *(_OWORD *)(v3 + 8596) = 0u;
  *(_OWORD *)(v3 + 8612) = 0u;
  *(_OWORD *)(v3 + 8628) = 0u;
  *(_OWORD *)(v3 + 8644) = 0u;
  *(_OWORD *)(v3 + 8660) = 0u;
  *(_OWORD *)(v3 + 8676) = 0u;
  *((_DWORD *)v3 + 2173) = 0;
  *(_OWORD *)(v3 + 8697) = v155[0];
  *(_OWORD *)(v3 + 8712) = *(_OWORD *)((char *)v155 + 15);
  uint64_t v108 = (uint64_t)(v3 + 8512);
  *((_DWORD *)v3 + 2128) = -1;
  *((void *)v3 + 1069) = 0x416312D000000000;
  int64x2_t v12 = vdupq_n_s64(0x416312D000000000uLL);
  *((int64x2_t *)v3 + 535) = v12;
  *((void *)v3 + 1072) = 0x416312D000000000;
  v11[16] = -1;
  *((_DWORD *)v3 + 2152) = -1;
  *((void *)v3 + 1081) = 0x416312D000000000;
  *((int64x2_t *)v3 + 541) = v12;
  *((void *)v3 + 1084) = 0x416312D000000000;
  v11[112] = -1;
  memset_pattern16(v3 + 2280, &unk_263D82930, 0x38uLL);
  memset_pattern16(v3 + 2336, &unk_263D82930, 0x20uLL);
  *((int64x2_t *)v3 + 141) = vdupq_n_s64(0x4163125300000000uLL);
  float64x2_t v111 = (float64x2_t *)(v3 + 2256);
  int v116 = *(unsigned __int8 *)(v9 + 56);
  xmmword_26AA361F1 = 0u;
  unk_26AA36201 = 0u;
  xmmword_26AA36251 = 0u;
  unk_26AA36261 = 0u;
  xmmword_26AA36231 = 0u;
  unk_26AA36241 = 0u;
  xmmword_26AA36211 = 0u;
  unk_26AA36221 = 0u;
  memcpy(__src, (const void *)(v9 + 26960), 0x400uLL);
  uint64_t v13 = v9 + 32336;
  memcpy(v155, (const void *)(v9 + 32336), sizeof(v155));
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v10 + 736;
  double v17 = (unsigned __int8 *)(v10 + 96);
  do
  {
    if (*(unsigned char *)(v9 + 21968 + v15))
    {
      int v18 = *v17;
      if (v18 != 7)
      {
        BOOL v19 = v7 == 1 && v18 == 5;
        BOOL v20 = v19;
        if (!v7 || (v18 != v7 ? (BOOL v21 = !v20) : (BOOL v21 = 0), !v21))
        {
          *((unsigned char *)v156 + v15) = 1;
          *((void *)v155 + v15) = *(void *)v13;
          if (!*((unsigned char *)&v124 + v15))
          {
            v3[1] = ++v14;
            ++*((unsigned char *)&v123 + *v17);
            *((unsigned char *)&v124 + v15) = 1;
            uint64_t v22 = *(unsigned __int8 *)(v16 + v15);
            if (v22 != 255) {
              *((unsigned char *)&v124 + v22) = 1;
            }
          }
        }
      }
    }
    if (*(unsigned char *)(v9 + 36872 + v15))
    {
      int v23 = *v17;
      if (v23 != 7)
      {
        BOOL v24 = v7 == 1 && v23 == 5;
        BOOL v25 = v24;
        if (!v7 || v23 == v7 || v25)
        {
          if (!*((unsigned char *)v156 + v15))
          {
            *((unsigned char *)v156 + v15) = 1;
            if (!*((unsigned char *)&v124 + v15))
            {
              v3[1] = ++v14;
              ++*((unsigned char *)&v123 + *v17);
              *((unsigned char *)&v124 + v15) = 1;
              uint64_t v26 = *(unsigned __int8 *)(v16 + v15);
              if (v26 != 255) {
                *((unsigned char *)&v124 + v26) = 1;
              }
            }
          }
          *(double *)&__src[v15] = *(double *)(v13 + 9528) / *(double *)(v9 + 1552);
          *((void *)v155 + v15) = *(void *)(v13 + 14904);
          _MergedGlobals_5[v15 + 1] = 1;
        }
      }
    }
    ++v15;
    v17 += 4;
    v13 += 8;
  }
  while (v15 != 128);
  int v27 = v116;
  if (v116 == 1) {
    int v28 = 1;
  }
  else {
    int v28 = 2;
  }
  if (v116 == 2) {
    int v28 = 0;
  }
  int v114 = v28;
  HIDWORD(v141) = v28;
  *(_DWORD *)((char *)&v140 + 3) = -1;
  LODWORD(v140) = 50462976;
  HIBYTE(v140) = 4;
  LODWORD(v141) = 1;
  *((void *)v3 + 1088) = v140;
  *((_DWORD *)v3 + 2178) = v141;
  int v143 = 4;
  v11[112] = v14 - 4;
  if (((v14 - 4) & 0x80) == 0)
  {
    memcpy(v154, (const void *)(v10 + 96), sizeof(v154));
    uint64_t v145 = v156;
    unsigned int v146 = __src;
    uint64_t v147 = v155;
    unsigned int v148 = v3 + 1048;
    char v149 = v3 + 2072;
    uint64_t v144 = 0x2FFFFFFFFLL;
    std::string v150 = (double *)(v3 + 2080);
    BOOL v151 = v3 + 5440;
    uint64_t v152 = v3 + 6464;
    uint64_t v153 = v3 + 7488;
    char v142 = 0;
    long long v134 = 0u;
    float64x2_t v135 = 0u;
    *(void *)long long v136 = 0;
    if ((v14 - 5) <= 2u && v117)
    {
      if (*(unsigned char *)(v113 + 72)
        && *(_DWORD *)(v113 + 76) == 1
        && (double v29 = *(double *)(v113 + 104), v29 < 9.0)
        && *(_DWORD *)v9 - *(_DWORD *)(v113 + 92) <= 4999)
      {
        double v30 = -*(double *)(v9 + 1832) - *(double *)(v113 + 96);
      }
      else
      {
        double v30 = -*(double *)(v9 + 1832);
        double v29 = 9.0;
      }
      *(double *)&long long v134 = v30;
      *((double *)&v134 + 1) = v29;
      float64x2_t v135 = vnegq_f64(*v112);
      *(double *)long long v136 = -*(double *)(v9 + 1800);
    }
    if (NK_Least_Squares_Core((double *)(v9 + 52760), (double (*)[3])(v9 + 1736), 4, v117, v115, v10 + 1760, (uint64_t)v165, v166, (uint64_t)v132))
    {
      uint64_t v105 = SBYTE3(v140);
      uint64_t v31 = (char)v140;
      if (_MergedGlobals_5[0] == 1)
      {
        for (uint64_t i = 0; i != 128; ++i)
        {
          if (*(unsigned char *)(v9 + 36872 + i))
          {
            GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(v10 + 96 + 4 * i));
            EvLog_v("NK_Least_Squares_Check:  %d  %s  Inflate DR.ResVar ", i, GNSS_SV_Str);
            *(double *)(v9 + 47240 + 8 * i) = *(double *)(v9 + 47240 + 8 * i) + 1.0;
          }
        }
      }
      uint64_t v34 = v150;
      double v35 = *v150;
      if (*v150 < 4.0)
      {
        uint64_t v36 = LODWORD(v166[0]);
        if ((v166[0] & 0x80000000) == 0)
        {
          char v37 = v145;
          *((unsigned char *)v145 + LODWORD(v166[0])) = 0;
          char v38 = (unsigned char *)(v9 + v36 + 36872);
          if (*v38)
          {
            *(_DWORD *)(v9 + 4 * v36 + 37128) = 12;
            *char v38 = 0;
            double v39 = v109;
          }
          else
          {
            *(unsigned char *)(v9 + 21656 + v36 + 312) = 0;
            *(_DWORD *)(v9 + 21656 + 4 * v36 + 568) = 12;
            double v39 = v106;
          }
          --*v39;
          ++v39[1];
          *((unsigned char *)v165 + v36) = 1;
          uint64_t v40 = HIDWORD(v166[0]);
          if ((v166[0] & 0x8000000000000000) == 0)
          {
            *((unsigned char *)v37 + HIDWORD(v166[0])) = 0;
            if (*v38)
            {
              *char v38 = 0;
              *(_DWORD *)(v9 + 4 * v36 + 37128) = 12;
              int v41 = v109;
            }
            else
            {
              *(unsigned char *)(v9 + 21656 + v40 + 312) = 0;
              *(_DWORD *)(v9 + 21656 + 4 * v40 + 568) = 12;
              int v41 = v106;
            }
            --*v41;
            ++v41[1];
            *((unsigned char *)v165 + v40) = 1;
          }
        }
      }
      uint64_t v42 = HIBYTE(v140);
      if (HIBYTE(v140))
      {
        uint64_t v43 = 0;
        BOOL v44 = (double *)v132;
        do
        {
          if (v105 == v43)
          {
            *((double *)v3 + 275) = -*((double *)v132 + v105);
          }
          else if (v43 >= v31 && v43 < v31 + 3)
          {
            *(&v119 + v43 - v31) = *(double *)(v9 - 8 * v31 + 1584 + 8 * v43) - *v44;
          }
          *(double *)&v3[8 * v43++ + 2336] = sqrt(v44[7]);
          ++v44;
        }
        while (v42 != v43);
        double v35 = *v34;
      }
      int v27 = v116;
      if (v35 > 1.0)
      {
        uint64_t v45 = 0;
        double v46 = sqrt(v35);
        int8x16_t v47 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v46, 0);
        float64x2_t v48 = (float64x2_t)vextq_s8(v47, v47, 8uLL);
        do
        {
          *(float64x2_t *)&v3[v45 + 2352] = vmulq_f64(v48, *(float64x2_t *)&v3[v45 + 2352]);
          v45 -= 16;
        }
        while (v45 != -32);
        EvLog_v("NK_LSq: DO VarFact scaling %f", v46);
      }
      uint64_t v49 = 0;
      *((double *)v3 + 276) = *((double *)v3 + 275) + *(double *)(v9 + 1664) * 299792458.0;
      int v50 = (long double *)(v3 + 2216);
      double v51 = v119;
      double v52 = v120;
      double v53 = v121;
      int v54 = (double *)(v9 + 1752);
      do
      {
        double v55 = *(v54 - 1) * v52 + *(v54 - 2) * v51;
        double v56 = *v54;
        v54 += 3;
        v50[v49++] = v55 + v56 * v53;
      }
      while (v49 != 3);
      *((double *)v3 + 280) = sqrt(*((double *)v3 + 278) * *((double *)v3 + 278)+ 0.0+ *((double *)v3 + 277) * *((double *)v3 + 277));
      Comp_Track8(v50);
      *((void *)v3 + 281) = v57;
      if (*v150 <= 1.0)
      {
        NK_ARP_Calc_Slopes(v9 + 52760, v9 + 1736, HIBYTE(v140), (uint64_t)v132, v107);
        BOOL v58 = v11[112];
        BOOL v59 = __OFSUB__(v58, 1);
        int v60 = v58 - 1;
        if (v60 < 0 == v59)
        {
          uint64_t v61 = 0;
          double v62 = 0.0;
          do
          {
            double v63 = *(double *)&v3[v61 + 6464];
            if (v63 > 0.0) {
              double v62 = v62 + *(double *)&v3[v61 + 1048] * *(double *)&v3[v61 + 1048] / v63;
            }
            v61 += 8;
          }
          while (v61 != 1024);
          if (v60 >= 9) {
            int v60 = 9;
          }
          double v64 = sqrt(v62) / g_ARP_cTd_Table[v60 + 10];
          *((double *)v3 + 1086) = v64;
          v11[96] = v64 <= 1.0;
        }
        ARP_Calc(v107);
      }
    }
  }
  bzero(v132, 0x450uLL);
  xmmword_26AA36251 = 0u;
  unk_26AA36261 = 0u;
  xmmword_26AA36231 = 0u;
  unk_26AA36241 = 0u;
  xmmword_26AA36211 = 0u;
  unk_26AA36221 = 0u;
  xmmword_26AA361F1 = 0u;
  unk_26AA36201 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  double v65 = &v157;
  uint64_t v66 = 96;
  uint64_t v67 = 736;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v68 = v9;
  char v69 = &v124;
  uint64_t v123 = 0;
  do
  {
    if (*(unsigned char *)(v68 + 7064))
    {
      if (*(unsigned char *)(v68 + 57))
      {
        int v70 = *(unsigned __int8 *)(v10 + v66);
        if (v70 != 7)
        {
          BOOL v71 = v7 == 1 && v70 == 5;
          BOOL v72 = v71;
          if (!v7 || (v70 != v7 ? (BOOL v73 = !v72) : (BOOL v73 = 0), !v73))
          {
            *(unsigned char *)double v65 = 1;
            if (!*(unsigned char *)v69)
            {
              ++*v3;
              ++*((unsigned char *)&v123 + *(unsigned __int8 *)(v10 + v66));
              *(unsigned char *)char v69 = 1;
              uint64_t v74 = *(unsigned __int8 *)(v10 + v67);
              if (v74 != 255) {
                *((unsigned char *)&v124 + v74) = 1;
              }
            }
          }
        }
      }
    }
    v66 += 4;
    ++v67;
    char v69 = (long long *)((char *)v69 + 1);
    double v65 = (long long *)((char *)v65 + 1);
    ++v68;
  }
  while (v66 != 608);
  HIDWORD(v141) = v114;
  LODWORD(v141) = 0;
  uint64_t v140 = 0x3FFFFFFFF020100;
  signed int v75 = 3;
  if (BYTE1(v123) || BYTE5(v123) || __PAIR16__(BYTE6(v123), 0) != BYTE3(v123))
  {
    BYTE3(v140) = 3;
    signed int v75 = 4;
    HIBYTE(v140) = 4;
  }
  if (BYTE2(v123))
  {
    BYTE4(v140) = v75++;
    HIBYTE(v140) = v75;
  }
  if (BYTE4(v123))
  {
    BYTE5(v140) = v75++;
    HIBYTE(v140) = v75;
  }
  if (v27 != 2)
  {
    BYTE6(v140) = v75++;
    HIBYTE(v140) = v75;
  }
  LODWORD(v141) = 2;
  *(void *)(v3 + 8716) = v140;
  *((_DWORD *)v3 + 2181) = v141;
  int v143 = v75;
  int v76 = *v3;
  v11[16] = v76 - v75;
  if ((((_BYTE)v76 - (_BYTE)v75) & 0x80) == 0)
  {
    double v77 = v11;
    memcpy(v154, (const void *)(v10 + 96), sizeof(v154));
    uint64_t v145 = &v157;
    unsigned int v146 = (void *)(v9 + 12056);
    uint64_t v147 = (_OWORD *)(v9 + 17432);
    unsigned int v148 = v3 + 8;
    char v149 = v3 + 1032;
    uint64_t v144 = 0x1FFFFFFFFLL;
    std::string v150 = (double *)(v3 + 1040);
    BOOL v151 = v3 + 2368;
    uint64_t v152 = v3 + 3392;
    uint64_t v153 = v3 + 4416;
    char v142 = 1;
    long long v134 = 0u;
    float64x2_t v135 = 0u;
    *(void *)long long v136 = 0;
    BOOL v78 = v117;
    if (!v117 || v76 == v75 || (v76 - v75) > 3u) {
      goto LABEL_140;
    }
    double v118 = 0.0;
    double v119 = 0.0;
    if (*(unsigned char *)v113
      && *(_DWORD *)(v113 + 4) == 1
      && (double v79 = *(double *)(v113 + 32), v79 < 625.0)
      && *(_DWORD *)v9 - *(_DWORD *)(v113 + 20) <= 4999)
    {
      double v80 = *(double *)(v9 + 1720) - *(double *)(v113 + 24);
    }
    else
    {
      int Pos_H = Core_Get_Pos_H(*(_DWORD *)v9, 150000, &v119, &v118);
      BOOL v78 = v117;
      if (!Pos_H || v118 > 500.0) {
        goto LABEL_139;
      }
      double v82 = 4.0;
      if (v118 < 350.0)
      {
        double v82 = 3.0;
        if (v118 < 250.0)
        {
          double v82 = 2.0;
          if (v118 < 150.0) {
            double v82 = 1.5;
          }
        }
      }
      double v79 = v118 * v82;
      if (v118 * v82 < 5625.0) {
        double v79 = 5625.0;
      }
      double v80 = *(double *)(v9 + 1720) - v119;
    }
    *(double *)&long long v134 = v80;
    *((double *)&v134 + 1) = v79;
    float64x2_t v135 = vnegq_f64(*v112);
    *(double *)long long v136 = -*(double *)(v9 + 1800);
LABEL_139:
    signed int v75 = HIBYTE(v140);
LABEL_140:
    memset(&v136[8], 0, 24);
    if (!NK_Least_Squares_Core((double *)(v9 + 52760), (double (*)[3])(v9 + 1736), v75, v78, v115, v10 + 1760, (uint64_t)v165, v166, (uint64_t)v132))return; {
    int v83 = (char)v140;
    }
    int v84 = SBYTE3(v140);
    int v85 = SBYTE4(v140);
    int v86 = SBYTE5(v140);
    int v87 = SBYTE6(v140);
    if (*v150 < 4.0)
    {
      uint64_t v88 = LODWORD(v166[0]);
      if ((v166[0] & 0x80000000) == 0)
      {
        uint64_t v89 = v145;
        *((unsigned char *)v145 + LODWORD(v166[0])) = 0;
        *(unsigned char *)(v9 + 6752 + v88 + 312) = 0;
        *(_DWORD *)(v9 + 6752 + 4 * v88 + 568) = 12;
        char v90 = (*v110)--;
        char v91 = v110[1];
        v110[1] = v91 + 1;
        uint64_t v92 = HIDWORD(v166[0]);
        if ((v166[0] & 0x8000000000000000) == 0)
        {
          *((unsigned char *)v89 + HIDWORD(v166[0])) = 0;
          *(unsigned char *)(v9 + 6752 + v92 + 312) = 0;
          *(_DWORD *)(v9 + 6752 + 4 * v92 + 568) = 12;
          *int v110 = v90 - 2;
          v110[1] = v91 + 2;
        }
      }
    }
    uint64_t v93 = 488;
    while (1)
    {
      uint64_t v94 = *((char *)v132 + v93);
      if ((v94 & 0x80000000) == 0)
      {
        if (v94 == v84)
        {
          *((double *)v3 + 261) = -*((double *)v132 + v94);
        }
        else if (v94 == v85)
        {
          *((double *)v3 + 263) = -*((double *)v132 + v94);
        }
        else if (v94 == v86)
        {
          *((double *)v3 + 265) = -*((double *)v132 + v94);
        }
        else if (v94 == v87)
        {
          *((double *)v3 + 267) = -*((double *)v132 + v94);
        }
        else
        {
          if ((int)v94 < v83 || v83 + 2 < (int)v94) {
            goto LABEL_159;
          }
          *(double *)&v3[8 * v94 + 2152] = *(double *)(v9 + 8 * v94 + 1560)
                                                       - *((double *)v132 + v94);
        }
        *(double *)&v3[8 * v94 + 2280] = sqrt(*((double *)&v132[3] + v94 + 1));
      }
LABEL_159:
      if (++v93 == 495)
      {
        if (v84 > 0) {
          *((double *)v3 + 262) = *((double *)v3 + 261) + *(double *)(v9 + 1632) * 299792458.0;
        }
        if (v85 >= 1) {
          *((double *)v3 + 264) = *((double *)v3 + 263) + *(double *)(v9 + 1640) * 299792458.0;
        }
        if (v86 >= 1) {
          *((double *)v3 + 266) = *((double *)v3 + 265) + *(double *)(v9 + 1648) * 299792458.0;
        }
        if (v87 >= 1) {
          *((double *)v3 + 268) = *(double *)(v9 + 1672) + *((double *)v3 + 267);
        }
        ECEF2Geo((double *)v3 + 269, (uint64_t)&WGS84_Datum, (uint64_t)(v3 + 2176));
        Comp_NEDvar_UDU((uint64_t)v133, HIBYTE(v140), v83, (double (*)[3])(v9 + 1736), &v119);
        Comp_ErrorEllipse(v119, v120, v95, v111->f64, (double *)v3 + 283, (double *)v3 + 284);
        double v96 = *v150;
        if (*v150 > 1.0)
        {
          double v97 = sqrt(v96);
          if (v143 >= 1)
          {
            unint64_t v98 = v143 + 1;
            do
            {
              *(double *)&v3[8 * (v98 - 2) + 2280] = v97
                                                                 * *(double *)&v3[8 * (v98 - 2) + 2280];
              --v98;
            }
            while (v98 > 1);
          }
          *float64x2_t v111 = vmulq_n_f64(*v111, v97);
          EvLog_v("NK_LSq: PR VarFact scaling %f", v97);
          double v96 = *v150;
        }
        if (v96 <= 1.0)
        {
          NK_ARP_Calc_Slopes(v9 + 52760, v9 + 1736, HIBYTE(v140), (uint64_t)v132, v108);
          BOOL v99 = v77[16];
          BOOL v59 = __OFSUB__(v99, 1);
          int v100 = v99 - 1;
          if (v100 < 0 == v59)
          {
            uint64_t v101 = 0;
            double v102 = 0.0;
            do
            {
              double v103 = *(double *)&v3[v101 + 3392];
              if (v103 > 0.0) {
                double v102 = v102 + *(double *)&v3[v101 + 8] * *(double *)&v3[v101 + 8] / v103;
              }
              v101 += 8;
            }
            while (v101 != 1024);
            if (v100 >= 9) {
              int v100 = 9;
            }
            double v104 = sqrt(v102) / g_ARP_cTd_Table[v100 + 10];
            *((double *)v3 + 1074) = v104;
            *double v77 = v104 <= 1.0;
          }
          ARP_Calc(v108);
        }
        return;
      }
    }
  }
}

void *NK_ARP_Calc_Slopes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a5 + 8) = 0u;
  double v65 = (double *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  char v69 = (double *)(a4 + 112);
  uint64_t result = (void *)ud2cov((const double *)(a4 + 112), v79, a3);
  uint64_t v10 = 0;
  uint64_t v63 = a2;
  double v64 = (double *)(a2 + 16);
  do
  {
    if (*(unsigned char *)(*(void *)(a4 + 520) + v10))
    {
      uint64_t v11 = *(char *)(a4 + 488);
      int v71 = *(char *)(a4 + 491);
      int v66 = *(char *)(a4 + 493);
      int v67 = *(char *)(a4 + 492);
      int v72 = *(char *)(a4 + 494);
      int v12 = *(unsigned __int8 *)(a4 + 4 * v10 + 592);
      unint64_t v5 = v5 & 0xFFFFFFFF00000000 | *(unsigned int *)(a4 + 496);
      NK_Least_Obs_Equ_SV(1, *(void *)(a4 + 488), v5, v12, *(_DWORD *)(a4 + 516), (double *)(a1 + 56 * v10), (double *)v80, *(double *)(*(void *)(a4 + 528) + 8 * v10));
      uint64_t v78 = 0;
      memset(v77, 0, sizeof(v77));
      double v13 = *(double *)(*(void *)(a4 + 536) + 8 * v10);
      if (a3)
      {
        unint64_t v14 = 0;
        do
        {
          unint64_t v15 = 0;
          double v16 = *((double *)v77 + v14);
          unint64_t v17 = v14 + 1;
          do
          {
            unint64_t v18 = v15 + 1;
            double v19 = *((double *)v80 + v15);
            if (v15 < v14)
            {
              unint64_t v20 = v15 + (((v14 + 1) * v14) >> 1);
            }
            else
            {
              unint64_t v18 = v15 + 1;
              unint64_t v20 = v14 + ((unint64_t)((v15 + 1) * v15) >> 1);
            }
            double v16 = v16 + v79[v20] * v19;
            unint64_t v15 = v18;
          }
          while (v18 != a3);
          *((double *)v77 + v14++) = v16 / v13;
        }
        while (v17 != a3);
      }
      double v73 = 0.0;
      uint64_t result = (void *)invtst(v69, (double *)v80, a3, 0.0, 0.0, 1.0e20, &v73);
      double v21 = 1.0 - v73 / v13;
      double v73 = v21;
      if (v21 >= 0.0001)
      {
        uint64_t v22 = 0;
        double v23 = fmax(v21, 0.0001);
        double v73 = v23;
        BOOL v24 = (double *)v77 + v11;
        double v25 = *v24;
        double v26 = v24[1];
        double v27 = v24[2];
        int v28 = v64;
        do
        {
          double v29 = *(v28 - 1) * v26 + *(v28 - 2) * v25;
          double v30 = *v28;
          v28 += 3;
          *(double *)((char *)&v74 + v22) = v29 + v30 * v27;
          v22 += 8;
        }
        while (v22 != 24);
        double v31 = v13 / v23;
        double v32 = v31 * (v75 * v75 + v74 * v74);
        if (v32 > *v65)
        {
          *(double *)(a5 + 8) = v32;
          *(unsigned char *)a5 = v10;
        }
        double v33 = v31 * (v76 * v76);
        if (v33 > *(double *)(a5 + 16))
        {
          *(double *)(a5 + 16) = v33;
          *(unsigned char *)(a5 + 1) = v10;
        }
        int v34 = *(_DWORD *)(a4 + 496);
        if (v34 == 2)
        {
          switch(v12)
          {
            case 0:
            case 7:
              uint64_t result = EvCrt_Illegal_switch_case("NK_ARP_Calc_Slopes", 0x78Au);
              goto LABEL_23;
            case 1:
            case 3:
            case 5:
            case 6:
              goto LABEL_38;
            case 2:
              int v39 = v67;
              goto LABEL_37;
            case 4:
              int v39 = v66;
LABEL_37:
              int v71 = v39;
LABEL_38:
              unsigned int v37 = v71;
              int v35 = v72;
              if (v71 < 1) {
                goto LABEL_28;
              }
              goto LABEL_27;
            default:
LABEL_23:
              int v35 = v72;
              goto LABEL_28;
          }
        }
        BOOL v36 = v34 == 1;
        int v35 = v72;
        if (v36)
        {
          unsigned int v37 = v71;
          if (v71 >= 1) {
LABEL_27:
          }
            double v33 = v31 * (*((double *)v77 + v37) * *((double *)v77 + v37));
        }
LABEL_28:
        if (v33 > *(double *)(a5 + 24))
        {
          *(double *)(a5 + 24) = v33;
          *(unsigned char *)(a5 + 2) = v10;
        }
        if (v35 >= 1)
        {
          double v38 = v31 * (*((double *)v77 + v35) * *((double *)v77 + v35));
          if (v38 > *(double *)(a5 + 32))
          {
            *(double *)(a5 + 32) = v38;
            *(unsigned char *)(a5 + 3) = v10;
          }
        }
      }
      else if (*(char *)(a5 + 88) >= 1)
      {
        uint64_t result = EvLog_v("NK_ARP_Calc_Slopes: Matrix B too small %f %d", v21, *(unsigned __int8 *)(a5 + 88));
        --*(unsigned char *)(a5 + 88);
      }
    }
    ++v10;
  }
  while (v10 != 128);
  double v40 = *(double *)(a4 + 408);
  if (v40 > 0.0)
  {
    memset(v80, 0, sizeof(v80));
    uint64_t v41 = *(char *)(a4 + 488);
    uint64_t v42 = (char *)v80 + 8 * v41;
    *(_OWORD *)uint64_t v42 = *(_OWORD *)(a4 + 416);
    *((void *)v42 + 2) = *(void *)(a4 + 432);
    *((void *)v80 + a3) = *(void *)(a4 + 400);
    if (a3)
    {
      unint64_t v43 = 0;
      do
      {
        unint64_t v44 = 0;
        unint64_t v45 = v43 + 1;
        double v46 = 0.0;
        do
        {
          unint64_t v47 = v44 + 1;
          double v48 = *((double *)v80 + v44);
          if (v44 < v43)
          {
            unint64_t v49 = v44 + (((v43 + 1) * v43) >> 1);
          }
          else
          {
            unint64_t v47 = v44 + 1;
            unint64_t v49 = v43 + ((unint64_t)((v44 + 1) * v44) >> 1);
          }
          double v46 = v46 + v79[v49] * v48;
          unint64_t v44 = v47;
        }
        while (v47 != a3);
        *((double *)v77 + v43++) = v46 / v40;
      }
      while (v45 != a3);
    }
    double v73 = 0.0;
    uint64_t result = (void *)invtst(v69, (double *)v80, a3, 0.0, 0.0, 1.0e20, &v73);
    double v50 = 1.0 - v73 / v40;
    if (v50 >= 0.0000001)
    {
      uint64_t v51 = 0;
      double v52 = fmax(v50, 0.0000001);
      double v53 = (double *)v77 + v41;
      double v54 = *v53;
      double v55 = v53[1];
      double v56 = v53[2];
      uint64_t v57 = (double *)(v63 + 16);
      do
      {
        double v58 = *(v57 - 1) * v55 + *(v57 - 2) * v54;
        double v59 = *v57;
        v57 += 3;
        *(double *)((char *)&v74 + v51) = v58 + v59 * v56;
        v51 += 8;
      }
      while (v51 != 24);
      double v60 = v40 / v52;
      double v61 = v60 * (v75 * v75 + v74 * v74);
      if (v61 > *v65)
      {
        *(double *)(a5 + 8) = v61;
        *(unsigned char *)a5 = 0x80;
      }
      double v62 = v60 * (v76 * v76);
      if (v62 > *(double *)(a5 + 16))
      {
        *(double *)(a5 + 16) = v62;
        *(unsigned char *)(a5 + 1) = 0x80;
      }
    }
    else if (*(char *)(a5 + 88) >= 1)
    {
      uint64_t result = EvLog_v("NK_ARP_Calc_Slopes: Vert Matrix B too small %f %d", 1.0 - v73 / v40, *(unsigned __int8 *)(a5 + 88));
      --*(unsigned char *)(a5 + 88);
    }
  }
  return result;
}

uint64_t NK_ARP_Kalman(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  int v7 = (unsigned char *)(a3 + 62452);
  long long v65 = 0u;
  uint64_t v8 = a3 + 41864;
  long long v64 = 0u;
  uint64_t v9 = (unsigned char *)(a4 + 27616);
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  bzero(__dst, 0x400uLL);
  bzero(v59, 0x400uLL);
  v45[5] = 0;
  v45[4] = 0;
  char v46 = 0;
  memset(v42, 0, sizeof(v42));
  long long v43 = 0u;
  long long v44 = 0u;
  memset(v45, 0, 25);
  uint64_t v48 = 0;
  uint64_t v47 = 0;
  char v49 = 0;
  bzero(&v50, 0x254uLL);
  uint64_t v10 = 0;
  char v11 = 0;
  memset(v41, 0, sizeof(v41));
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  int v12 = &v61;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v13 = 57;
  uint64_t v14 = 7064;
  long long v33 = 0u;
  long long v34 = 0u;
  unint64_t v15 = &v33;
  double v16 = a2;
  uint64_t v32 = 0;
  do
  {
    uint64_t v17 = a1[v10];
    if (v17 != 7)
    {
      if (*(unsigned char *)(a3 + v14))
      {
        if (!*(unsigned char *)v15 && (*(_DWORD *)(a3 + v10 + 7320) - 1) >= 0x1D)
        {
          if (*(unsigned char *)(a3 + v13))
          {
            ++*((unsigned char *)&v32 + v17);
            ++v11;
            *(unsigned char *)int v12 = 1;
            *(unsigned char *)unint64_t v15 = 1;
            uint64_t v18 = *v16;
            if (v18 != 255) {
              *((unsigned char *)&v33 + v18) = 1;
            }
          }
        }
      }
    }
    v10 += 4;
    ++v16;
    int v12 = (long long *)((char *)v12 + 1);
    ++v13;
    unint64_t v15 = (long long *)((char *)v15 + 1);
    ++v14;
  }
  while (v10 != 512);
  int v19 = *(unsigned __int8 *)(a3 + 56);
  if (v19 == 1) {
    int v20 = 1;
  }
  else {
    int v20 = 2;
  }
  if (v19 == 2) {
    int v21 = 0;
  }
  else {
    int v21 = v20;
  }
  bzero(v42, 0x450uLL);
  int v31 = v21;
  HIDWORD(v48) = v21;
  LODWORD(v48) = 0;
  uint64_t v47 = 0x3FFFFFFFF020100;
  signed int v22 = 3;
  if (BYTE1(v32) || BYTE5(v32) || __PAIR16__(BYTE6(v32), 0) != BYTE3(v32))
  {
    BYTE3(v47) = 3;
    signed int v22 = 4;
    HIBYTE(v47) = 4;
  }
  if (BYTE2(v32))
  {
    BYTE4(v47) = v22++;
    HIBYTE(v47) = v22;
  }
  if (BYTE4(v32))
  {
    BYTE5(v47) = v22++;
    HIBYTE(v47) = v22;
  }
  if (v19 != 2)
  {
    BYTE6(v47) = v22++;
    HIBYTE(v47) = v22;
  }
  LODWORD(v48) = 2;
  *uint64_t v9 = v11 - v22;
  if ((char)(v11 - v22) > 0 && v7[6] && (*v7 || v7[1] || v7[2]))
  {
    v45[0] = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    memcpy(v58, a1, sizeof(v58));
    char v49 = 1;
    uint64_t v51 = 0x1FFFFFFFFLL;
    double v52 = &v61;
    double v53 = (double *)(a3 + 12056);
    double v54 = (void *)(a3 + 17432);
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    if (NK_Least_Squares_Update((double *)(a3 + 52760), v22, 0, 0, v41, (uint64_t)v42))
    {
      NK_ARP_Calc_Slopes(a3 + 52760, a3 + 1736, HIBYTE(v47), (uint64_t)v42, a4 + 27528);
      ARP_Calc(a4 + 27528);
    }
  }
  memcpy(__dst, (const void *)(a3 + 26960), sizeof(__dst));
  memcpy(v59, (const void *)(a3 + 32336), sizeof(v59));
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v26 = a3 + 22224;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v32 = 0;
  do
  {
    uint64_t result = a1[v23];
    if (result != 7)
    {
      if (*(unsigned char *)(a3 + 21968 + v24))
      {
        if ((*(_DWORD *)(v26 + v23) - 1) >= 0x1D)
        {
          *((unsigned char *)&v61 + v24) = 1;
          if (!*((unsigned char *)&v33 + v24))
          {
            ++*((unsigned char *)&v32 + result);
            ++v25;
            *((unsigned char *)&v33 + v24) = 1;
            uint64_t v28 = a2[v24];
            if (v28 != 255) {
              *((unsigned char *)&v33 + v28) = 1;
            }
          }
        }
      }
      if (*(unsigned char *)(a3 + 36872 + v24))
      {
        if ((*(_DWORD *)(v26 + v23 + 14904) - 1) >= 0x1D)
        {
          *((unsigned char *)&v61 + v24) = 1;
          __dst[v24] = *(double *)v8 / *(double *)(a3 + 1552);
          v59[v24] = *(void *)(v8 + 5376);
          if (!*((unsigned char *)&v33 + v24))
          {
            ++*((unsigned char *)&v32 + result);
            ++v25;
            *((unsigned char *)&v33 + v24) = 1;
            uint64_t result = a2[v24];
            if (result != 255) {
              *((unsigned char *)&v33 + result) = 1;
            }
          }
        }
      }
    }
    ++v24;
    v8 += 8;
    v23 += 4;
  }
  while (v24 != 128);
  HIDWORD(v48) = v31;
  *(_DWORD *)((char *)&v47 + 3) = -1;
  LODWORD(v47) = 50462976;
  HIBYTE(v47) = 4;
  LODWORD(v48) = 1;
  char v29 = v25 - 4;
  v9[96] = v29;
  if (v29 > 0 && v7[9] && v7[4])
  {
    v45[0] = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    memcpy(v58, a1, sizeof(v58));
    char v49 = 0;
    uint64_t v51 = 0x2FFFFFFFFLL;
    double v52 = &v61;
    double v53 = __dst;
    double v54 = v59;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t result = NK_Least_Squares_Update((double *)(a3 + 52760), 4, 0, 0, v41, (uint64_t)v42);
    if (result)
    {
      NK_ARP_Calc_Slopes(a3 + 52760, a3 + 1736, HIBYTE(v47), (uint64_t)v42, a4 + 27624);
      return ARP_Calc(a4 + 27624);
    }
  }
  return result;
}

__n128 NK_Least_Squares_Publish_Soln(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 2072);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 2088);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 2104);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 2120);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 2136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 2200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 2240);
  uint64_t v2 = *(void *)(a2 + 8716);
  *(_DWORD *)(a1 + 532) = *(_DWORD *)(a2 + 8724);
  *(void *)(a1 + 524) = v2;
  uint64_t v3 = *(void *)(a2 + 8704);
  *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 8712);
  *(void *)(a1 + 512) = v3;
  long long v4 = *(_OWORD *)(a2 + 2152);
  *(void *)(a1 + 120) = *(void *)(a2 + 2168);
  *(_OWORD *)(a1 + 104) = v4;
  long long v5 = *(_OWORD *)(a2 + 2176);
  *(void *)(a1 + 144) = *(void *)(a2 + 2192);
  *(_OWORD *)(a1 + 128) = v5;
  long long v6 = *(_OWORD *)(a2 + 2216);
  *(void *)(a1 + 184) = *(void *)(a2 + 2232);
  *(_OWORD *)(a1 + 168) = v6;
  long long v7 = *(_OWORD *)(a2 + 2280);
  long long v8 = *(_OWORD *)(a2 + 2296);
  long long v9 = *(_OWORD *)(a2 + 2312);
  *(void *)(a1 + 280) = *(void *)(a2 + 2328);
  *(_OWORD *)(a1 + 264) = v9;
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  long long v10 = *(_OWORD *)(a2 + 2352);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 2336);
  *(_OWORD *)(a1 + 304) = v10;
  long long v11 = *(_OWORD *)(a2 + 2256);
  *(void *)(a1 + 224) = *(void *)(a2 + 2272);
  *(_OWORD *)(a1 + 208) = v11;
  long long v12 = *(_OWORD *)(a2 + 8528);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 8512);
  *(_OWORD *)(a1 + 336) = v12;
  long long v13 = *(_OWORD *)(a2 + 8544);
  long long v14 = *(_OWORD *)(a2 + 8560);
  long long v15 = *(_OWORD *)(a2 + 8592);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 8576);
  *(_OWORD *)(a1 + 400) = v15;
  *(_OWORD *)(a1 + 352) = v13;
  *(_OWORD *)(a1 + 368) = v14;
  long long v16 = *(_OWORD *)(a2 + 8624);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 8608);
  *(_OWORD *)(a1 + 432) = v16;
  __n128 result = *(__n128 *)(a2 + 8640);
  long long v18 = *(_OWORD *)(a2 + 8656);
  long long v19 = *(_OWORD *)(a2 + 8688);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 8672);
  *(_OWORD *)(a1 + 496) = v19;
  *(__n128 *)(a1 + 448) = result;
  *(_OWORD *)(a1 + 464) = v18;
  return result;
}

unsigned __int16 *BDS_B1C_EphBin2Int(unsigned __int16 *result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a3 + 16) = bswap32(*result) >> 19;
  *(_WORD *)(a3 + 126) = (*((unsigned __int8 *)result + 3) | ((result[1] & 3u) << 8)) >> 1;
  *(_DWORD *)(a3 + 20) = (((*((unsigned __int8 *)result + 4) << 16) | (*((unsigned __int8 *)result + 5) << 8) | *((unsigned __int8 *)result + 6)) >> 6) & 0x7FF;
  *(unsigned char *)(a3 + 10) = (*((unsigned char *)result + 6) >> 4) & 3;
  *(_DWORD *)(a3 + 32) = (*((unsigned __int8 *)result + 6) << 28 >> 31) & 0xFC000000 | (_byteswap_ulong(*(_DWORD *)(result + 3)) >> 2) & 0x3FFFFFF;
  *(_DWORD *)(a3 + 36) = (*((unsigned __int8 *)result + 9) << 30 >> 31) & 0xFE000000 | (_byteswap_ulong(*(_DWORD *)((char *)result + 9)) >> 1) & 0x1FFFFFF;
  unsigned int v3 = *(unsigned __int16 *)((char *)result + 13);
  unsigned int v4 = __rev16(v3);
  HIDWORD(v5) = *((unsigned __int8 *)result + 12);
  LODWORD(v5) = bswap32(v3);
  unsigned int v6 = (v5 >> 16) | 0xFFFE0000;
  if (result[6]) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = v4;
  }
  *(_DWORD *)(a3 + 40) = v7;
  unsigned int v8 = (*((unsigned __int8 *)result + 15) << 16) | (*((unsigned __int8 *)result + 16) << 8) | *((unsigned __int8 *)result
                                                                                              + 17);
  if (v8 >= 0x800000) {
    unsigned int v9 = (v8 >> 1) | 0xFF800000;
  }
  else {
    unsigned int v9 = v8 >> 1;
  }
  *(_DWORD *)(a3 + 44) = v9;
  uint64_t v10 = *((unsigned __int8 *)result + 17);
  unint64_t v11 = bswap32(*(_DWORD *)(result + 9));
  if (v10) {
    unint64_t v12 = v11 | (v10 << 32) | 0xFFFFFFFE00000000;
  }
  else {
    unint64_t v12 = v11;
  }
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = (((unint64_t)*((unsigned __int8 *)result + 22) << 32) | ((unint64_t)*((unsigned __int8 *)result + 23) << 24) | ((unint64_t)*((unsigned __int8 *)result + 24) << 16) | ((unint64_t)*((unsigned __int8 *)result + 25) << 8) | *((unsigned __int8 *)result + 26)) >> 7;
  *(void *)(a3 + 64) = ((uint64_t)((unint64_t)*((unsigned __int8 *)result + 26) << 57) >> 63) & 0xFFFFFFFE00000000 | ((((unint64_t)*((unsigned __int8 *)result + 26) << 32) | ((unint64_t)*((unsigned __int8 *)result + 27) << 24) | ((unint64_t)*((unsigned __int8 *)result + 28) << 16) | *((unsigned __int8 *)result + 30) | ((unint64_t)*((unsigned __int8 *)result + 29) << 8)) >> 6) & 0x1FFFFFFFFLL;
  *(void *)(a3 + 72) = ((uint64_t)((unint64_t)*((unsigned __int8 *)result + 30) << 58) >> 63) & 0xFFFFFFFE00000000 | ((((unint64_t)*((unsigned __int8 *)result + 30) << 32) | ((unint64_t)*((unsigned __int8 *)result + 31) << 24) | ((unint64_t)*((unsigned __int8 *)result + 32) << 16) | *((unsigned __int8 *)result + 34) | ((unint64_t)*((unsigned __int8 *)result + 33) << 8)) >> 5) & 0x1FFFFFFFFLL;
  *(void *)(a3 + 80) = ((uint64_t)((unint64_t)*((unsigned __int8 *)result + 34) << 59) >> 63) & 0xFFFFFFFE00000000 | ((((unint64_t)*((unsigned __int8 *)result + 34) << 32) | ((unint64_t)*((unsigned __int8 *)result + 35) << 24) | ((unint64_t)*((unsigned __int8 *)result + 36) << 16) | *((unsigned __int8 *)result + 38) | ((unint64_t)*((unsigned __int8 *)result + 37) << 8)) >> 4) & 0x1FFFFFFFFLL;
  *(_DWORD *)(a3 + 88) = (*((unsigned __int8 *)result + 38) << 28 >> 31) & 0xFFF80000 | ((*((unsigned __int8 *)result + 40) | (*((unsigned __int8 *)result + 38) << 16) | (*((unsigned __int8 *)result + 39) << 8)) >> 1) & 0x7FFFF;
  *(_WORD *)(a3 + 92) = (*((unsigned __int8 *)result + 40) << 15) | ((*((unsigned __int8 *)result + 42) | (*((unsigned __int8 *)result + 40) << 16) | (*((unsigned __int8 *)result + 41) << 8)) >> 2) & 0x7FFF;
  *(_WORD *)(a3 + 94) = (*((unsigned __int8 *)result + 44) | (*((unsigned __int8 *)result + 42) << 16) | (*((unsigned __int8 *)result + 43) << 8)) >> 2;
  *(_WORD *)(a3 + 96) = (*((unsigned __int8 *)result + 46) | (*((unsigned __int8 *)result + 44) << 16) | (*((unsigned __int8 *)result + 45) << 8)) >> 2;
  *(_DWORD *)(a3 + 100) = (*((unsigned __int8 *)result + 46) << 30 >> 31) & 0xFF000000 | (_byteswap_ulong(*(_DWORD *)(result + 23)) >> 2) & 0xFFFFFF;
  *(_DWORD *)(a3 + 104) = (*((unsigned __int8 *)result + 49) << 30 >> 31) & 0xFF000000 | (_byteswap_ulong(*(_DWORD *)((char *)result + 49)) >> 2) & 0xFFFFFF;
  *(_DWORD *)(a3 + 108) = (*((unsigned __int8 *)result + 52) << 30 >> 31) & 0xFFE00000 | (_byteswap_ulong(*((_DWORD *)result + 13)) >> 5) & 0x1FFFFF;
  unsigned int v13 = __rev16(result[28]) & 0xFFE0FFFF | ((*((unsigned char *)result + 55) & 0x1F) << 16);
  if ((*((unsigned char *)result + 55) & 0x10) != 0) {
    unsigned int v14 = v13 | 0xFFE00000;
  }
  else {
    unsigned int v14 = v13;
  }
  *(_DWORD *)(a3 + 112) = v14;
  *(_DWORD *)(a3 + 24) = bswap32(result[29]) >> 21;
  *(_DWORD *)(a3 + 116) = (*((unsigned __int8 *)result + 59) << 27 >> 31) & 0xFE000000 | (_byteswap_ulong(*(_DWORD *)((char *)result + 59)) >> 4) & 0x1FFFFFF;
  *(_DWORD *)(a3 + 120) = (*((unsigned __int8 *)result + 62) << 28 >> 31) & 0xFFC00000 | (_byteswap_ulong(*(_DWORD *)(result + 31)) >> 6) & 0x3FFFFF;
  *(_WORD *)(a3 + 124) = ((__int16)(*((unsigned __int8 *)result + 65) << 15) >> 15) & 0xFFC0 | ((*((unsigned __int8 *)result + 66) | (*((unsigned __int8 *)result + 65) << 8)) >> 3) & 0x3F;
  *(_WORD *)(a3 + 134) = ((__int16)(*((unsigned __int8 *)result + 66) << 13) >> 15) & 0xF000 | ((*((unsigned __int8 *)result + 68) | (*((unsigned __int8 *)result + 66) << 16) | (*((unsigned __int8 *)result + 67) << 8)) >> 7) & 0xFFF;
  *(_WORD *)(a3 + 136) = ((__int16)(*((unsigned __int8 *)result + 68) << 9) >> 15) & 0xF000 | ((*((unsigned __int8 *)result + 69) | (*((unsigned __int8 *)result + 68) << 8)) >> 3) & 0xFFF;
  *(_WORD *)(a3 + 132) = ((__int16)(*((unsigned __int8 *)result + 69) << 13) >> 15) & 0xF000 | ((*((unsigned __int8 *)result + 71) | (*((unsigned __int8 *)result + 69) << 16) | (*((unsigned __int8 *)result + 70) << 8)) >> 7) & 0xFFF;
  *(unsigned char *)(a3 + 140) = *(unsigned char *)(a2 + 1) >> 7;
  *(unsigned char *)(a3 + 141) = (*(unsigned char *)(a2 + 1) & 0x40) != 0;
  *(unsigned char *)(a3 + 142) = (*(unsigned char *)(a2 + 1) & 0x20) != 0;
  return result;
}

BOOL Track_Meas_Update(int a1, double *a2, unsigned int a3, unsigned __int8 *a4, BOOL a5, _WORD *a6, double a7, double a8, double a9)
{
  v28[3] = *(double *)MEMORY[0x263EF8340];
  if ((*((_DWORD *)a4 + 1) - 1) > 1) {
    return 0;
  }
  a4[12] = 0;
  int v10 = *a4;
  if (*a4)
  {
    double v23 = 0.0;
    double v17 = *((double *)a4 + 5) - *((double *)a4 + 3) * a9;
    *((double *)a4 + 6) = v17;
    if (v17 >= 180.0)
    {
      double v18 = -360.0;
    }
    else
    {
      if (v17 >= -180.0) {
        goto LABEL_9;
      }
      double v18 = 360.0;
    }
    double v17 = v17 + v18;
    *((double *)a4 + 6) = v17;
LABEL_9:
    __double2 v20 = __sincos_stret(a7 * 0.0174532925);
    Comp_Track_velLOS(v20.__cosval * a8, v20.__sinval * a8, a2, v28);
    uint64_t v25 = 0;
    uint64_t v21 = 2;
    memset(v24, 0, sizeof(v24));
    do
    {
      *((double *)v24 + (a1 + v21)) = v28[v21];
      --v21;
    }
    while (v21 != -1);
    *((double *)v24 + a3) = v17;
    umeas(a5, a3, *((double *)a4 + 4), (double *)v24, v27, v26, &v23, *((double *)a4 + 7));
    double v22 = v23;
    if (v23 <= 0.0)
    {
      int v10 = 0;
      *a4 = 0;
      a4[12] = 1;
      ++*a6;
      *((double *)a4 + 8) = v22 + *((double *)a4 + 8);
    }
    else
    {
      *((double *)a4 + 8) = *((double *)a4 + 4) * (v23 * (v27[a3] * v27[a3]));
      int v10 = *a4;
    }
  }
  return v10 != 0;
}

uint64_t NK_Comp_ith_DR_Res(uint64_t result, uint64_t a2, uint64_t a3, double *a4, double a5, double a6, double a7, double a8, double a9)
{
  *a4 = a6 - a9;
  *(unsigned char *)(a3 + result + 184) = 1;
  ++*(unsigned char *)(a3 + 2);
  double v9 = a7 * 0.000025 * a8;
  int v10 = (double *)(a3 + 8 * result);
  v10[535] = v9;
  double v11 = *a4 - a5;
  v10[663] = v11;
  double v12 = *(double *)(a3 + 24 * result + 1208) + *(double *)(a3 + 24 * result + 1216);
  v10[1335] = v12;
  if (*(unsigned char *)(a2 + result + 384))
  {
    uint64_t v13 = a2 + 8 * result;
    double v11 = v11 - *(double *)(v13 + 2560) * a8;
    v10[663] = v11;
    double v14 = v12 + *(double *)(v13 + 3584) * a8 * a8;
  }
  else
  {
    double v14 = v9 + v12;
  }
  v10[1335] = v14;
  *(double *)(a3 + 8 * result + 7352) = v11;
  if (fabs(v11) < 150000.0)
  {
    *(unsigned char *)(a3 + result + 312) = 1;
    ++*(unsigned char *)(a3 + 3);
  }
  return result;
}

uint64_t GPS_To_Glon_Time(uint64_t result, int a2, double a3, double a4, int *a5, int *a6, double *a7)
{
  int v7 = (int)a3 / 86400 - (a2 + (result << 10)) + 8 * (a2 + (result << 10));
  int v8 = (v7 - 5839) / 1461;
  *a5 = v8;
  *a6 = v7 - 1461 * v8 - 5838;
  ++*a5;
  double v9 = -86400.0;
  double v10 = a3 + floor(a3 / 86400.0) * -86400.0 + 10800.0 - a4;
  *a7 = v10;
  if (v10 >= 86400.0)
  {
    int v11 = 1;
    goto LABEL_5;
  }
  if (v10 < 0.0)
  {
    int v11 = -1;
    double v9 = 86400.0;
LABEL_5:
    *a7 = v10 + v9;
    goto LABEL_7;
  }
  int v11 = 0;
LABEL_7:
  int v12 = *a6 + v11;
  *a6 = v12;
  if (v12 <= 1461)
  {
    if (v12 > 0) {
      return result;
    }
    int v13 = 1461;
    int v14 = -1;
  }
  else
  {
    int v13 = -1461;
    int v14 = 1;
  }
  *a5 += v14;
  *a6 += v13;
  return result;
}

uint64_t Glon_To_GPS_Time(uint64_t result, int a2, double a3, double a4, int *a5, int *a6, double *a7)
{
  double v7 = -0.5;
  if (a4 > 0.0) {
    double v7 = 0.5;
  }
  double v8 = v7 + a4;
  double v9 = 2147483650.0;
  double v10 = -2147483650.0;
  if (v8 >= -2147483650.0) {
    double v10 = (double)(int)v8;
  }
  if (v8 <= 2147483650.0) {
    double v9 = v10;
  }
  int v11 = a2 + 1461 * result + 4377;
  *a5 = v11 / 7168;
  int v12 = v11 % 7168;
  int v13 = v11 % 7168 / 7;
  *a6 = v13;
  double v14 = 86400.0;
  double v15 = a3 + -10800.0 + v9 + a4 - v9;
  if (v15 >= 86400.0)
  {
    double v15 = v15 + -86400.0;
  }
  else
  {
    double v14 = 0.0;
    if (v15 < 0.0)
    {
      double v15 = v15 + 86400.0;
      double v14 = -86400.0;
    }
  }
  double v16 = v14 + (double)(-7 * v13 + v12) * 86400.0 + v15;
  *a7 = v16;
  double v17 = 604800.0;
  if (v16 >= 604800.0)
  {
    int v18 = 1;
    double v17 = -604800.0;
  }
  else
  {
    if (v16 >= 0.0) {
      return result;
    }
    int v18 = -1;
  }
  *a6 = v18 + v13;
  *a7 = v16 + v17;
  return result;
}

BOOL Is_Future_Leap_Sec_Date_Not_Valid(int a1, int a2, int a3, unsigned __int8 a4)
{
  if (a1 < 1024) {
    return 0;
  }
  switch(a2)
  {
    case 1:
    case 3:
    case 5:
    case 6:
      a3 |= 0x400u;
      break;
    case 4:
      a3 += 1356;
      break;
    default:
      break;
  }
  uint64_t v5 = 0;
  int v6 = a1 - 127;
  if (a3 > a1 - 127) {
    int v6 = a3;
  }
  if (a2 == 4) {
    unsigned __int8 v7 = a4 + 1;
  }
  else {
    unsigned __int8 v7 = a4;
  }
  int v8 = (unint64_t)(3257812231 * (86400 * v7 - 43200)) >> 32;
  int v9 = (int)((v8 >> 16)
           + (v8 >> 31)
           - (((v6 - a3 + 255) & 0xFFFFFF00)
            + a3)
           + 8 * (((v6 - a3 + 255) & 0xFFFFFF00) + a3)
           - 5839)
     % 1461
     + 1;
  do
  {
    int v10 = Glon_Day_Num_of_Quarter_Year_Change[v5];
    BOOL result = v9 != v10;
    if (v9 == v10) {
      break;
    }
  }
  while (v5++ != 15);
  return result;
}

uint64_t VecSortIndexAscR8(uint64_t result, unsigned int a2, int *a3, int a4)
{
  if (a2 >= 2)
  {
    int v4 = 0;
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = a3[v5];
      if ((int)v5 - 1 < 0)
      {
        int v9 = v5;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = v4;
        int v9 = v5;
        do
        {
          uint64_t v10 = a3[v4 + v7];
          double v11 = *(double *)(result + 8 * v10);
          if (a4)
          {
            if (fabs(v11) <= fabs(*(double *)(result + 8 * v6)))
            {
              int v9 = v5 + v7;
              goto LABEL_12;
            }
          }
          else if (v11 <= *(double *)(result + 8 * v6))
          {
            goto LABEL_12;
          }
          a3[(int)v5 + (int)v7] = v10;
          int v9 = v8--;
          --v7;
        }
        while (v4 + 1 + v7 > 0);
        int v9 = 0;
      }
LABEL_12:
      a3[v9] = v6;
      ++v5;
    }
    while (v4++ != a2 - 2);
  }
  return result;
}

int *VecSortIndexAscI4(int *result, unsigned __int8 *a2, int a3, signed int a4)
{
  if (a4 > a3 && ((a4 | a3) & 0x80000000) == 0)
  {
    uint64_t v6 = result;
    do
    {
      int v7 = a3;
      for (unsigned int i = a4; ; ++i)
      {
        int v9 = v6[a3];
        uint64_t v10 = v7 - 1;
        double v11 = &v6[v7];
        do
        {
          int v13 = *v11++;
          int v12 = v13;
          ++v10;
          int v14 = v7 + 1;
          if (v7 >= a4) {
            break;
          }
          ++v7;
        }
        while (v12 <= v9);
        int v7 = v14 - 1;
        do
        {
          signed int v15 = i;
          int v16 = v6[i--];
        }
        while (v15 > a3 && v16 > v9);
        if ((int)(i + 1) <= v7) {
          break;
        }
        *(v11 - 1) = v16;
        v6[v15] = v12;
        unsigned __int8 v17 = a2[v10];
        a2[v10] = a2[v15];
        a2[v15] = v17;
      }
      v6[v15] = v9;
      v6[a3] = v16;
      unsigned __int8 v18 = a2[v15];
      a2[v15] = a2[a3];
      a2[a3] = v18;
      BOOL result = (int *)VecSortIndexAscI4(v6, a2, a3, i);
      a3 = i + 2;
    }
    while ((int)(i + 2) < a4 && ((a3 | a4) & 0x80000000) == 0);
  }
  return result;
}

uint64_t VecSortDscU1(uint64_t result, unsigned int a2, signed __int8 *a3)
{
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
      a3[i] = i;
    if (a2 >= 2)
    {
      int v4 = 0;
      uint64_t v5 = 1;
      do
      {
        uint64_t v6 = a3[v5];
        int v7 = v5;
        if ((int)v5 - 1 >= 0)
        {
          uint64_t v8 = 0;
          while (1)
          {
            uint64_t v9 = a3[v4 + v8];
            if (*(unsigned __int8 *)(result + v6) <= *(unsigned __int8 *)(result + v9)) {
              break;
            }
            a3[(int)v5 + (int)v8--] = v9;
            if (v4 + 1 + v8 <= 0)
            {
              int v7 = 0;
              goto LABEL_12;
            }
          }
          int v7 = v5 + v8;
        }
LABEL_12:
        a3[v7] = v6;
        ++v5;
      }
      while (v4++ != a2 - 2);
    }
  }
  return result;
}

double *VecSortAscR8(double *result, int a2, signed int a3)
{
  if (a3 > a2 && ((a3 | a2) & 0x80000000) == 0)
  {
    int v4 = result;
    do
    {
      int v5 = a2;
      for (unsigned int i = a3; ; ++i)
      {
        double v7 = v4[a2];
        uint64_t v8 = &v4[v5];
        do
        {
          double v9 = *v8++;
          double v10 = v9;
          int v11 = v5 + 1;
          if (v5 >= a3) {
            break;
          }
          ++v5;
        }
        while (v10 <= v7);
        int v5 = v11 - 1;
        do
        {
          signed int v12 = i;
          double v13 = v4[i--];
        }
        while (v12 > a2 && v13 > v7);
        if ((int)(i + 1) <= v5) {
          break;
        }
        *(v8 - 1) = v13;
        v4[v12] = v10;
      }
      v4[v12] = v7;
      v4[a2] = v13;
      BOOL result = (double *)VecSortAscR8(v4, a2, i);
      a2 = i + 2;
    }
    while ((int)(i + 2) < a3 && ((a2 | a3) & 0x80000000) == 0);
  }
  return result;
}

double *VecMedian8(double *result, int a2)
{
  if (a2) {
    return VecSortAscR8(result, 0, a2 - 1);
  }
  return result;
}

uint64_t GN_AGNSS_Set_Not_Brd_SV_List(int a1, unsigned int a2, int *a3, unsigned __int8 *a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  memset(v35, 0, 218);
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGNSS_Set_Not_Brd_SV_List");
  if (!result) {
    return result;
  }
  Debug_Log_AGNSS_Not_Brd_SV_List(a1, a2, a3, a4);
  double v9 = "--";
  if (a1 == 1) {
    double v9 = "L5";
  }
  if (a1) {
    double v10 = v9;
  }
  else {
    double v10 = "L1";
  }
  if (a2 > 0xDA)
  {
    EvCrt_v("GN_AGNSS_Set_Not_Brd_SV_List: FAILED:  %s  Num_Not_Brd_SV = %d >%d, Out of range!");
    return 0;
  }
  if (!a2)
  {
    long long v34 = v10;
    int v27 = 0;
    int v26 = 0;
    int v25 = 0;
    int v24 = 0;
    int v23 = 0;
    int v22 = 0;
    goto LABEL_36;
  }
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  do
  {
    unsigned int v13 = 0;
    int v14 = a3[v11];
    if (v14 <= 15)
    {
      uint64_t v15 = 0;
      int v16 = 32;
      unsigned int v17 = 0;
      int v18 = 0;
      switch(v14)
      {
        case 0:
        case 8:
          long long v19 = str_AGNSS_PM(a3[v11]);
          EvCrt_v("GN_AGNSS_Set_Not_Brd_SV_List: FAILED:  %s  Not_Brd_SV_Type_List[%d] = 0x%x (%s), Out of range!", v10, v11, v14, v19);
          goto LABEL_32;
        case 1:
          goto LABEL_25;
        case 2:
          int v16 = 36;
          int v14 = 1;
          uint64_t v15 = 2;
          goto LABEL_25;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_26;
        case 4:
          int v16 = 158;
          int v14 = 120;
          uint64_t v15 = 6;
          goto LABEL_25;
        default:
          unsigned int v17 = 0;
          int v18 = 0;
          goto LABEL_26;
      }
    }
    if (v14 > 63)
    {
      if (v14 == 64)
      {
        int v16 = 63;
        int v14 = 1;
        uint64_t v15 = 3;
      }
      else
      {
        unsigned int v17 = 0;
        int v18 = 0;
        if (v14 != 128) {
          goto LABEL_26;
        }
        int v16 = 14;
        int v14 = 1;
        uint64_t v15 = 5;
      }
    }
    else if (v14 == 16)
    {
      int v16 = 202;
      int v14 = 193;
      uint64_t v15 = 4;
    }
    else
    {
      unsigned int v17 = 0;
      int v18 = 0;
      if (v14 != 32) {
        goto LABEL_26;
      }
      int v16 = 24;
      uint64_t v15 = 1;
      int v14 = 1;
    }
LABEL_25:
    int v18 = Num_Prn[v15];
    unsigned int v13 = v14;
    unsigned int v17 = v16;
LABEL_26:
    unsigned int v20 = a4[v11];
    if (v13 > v20 || v17 < v20)
    {
      EvCrt_v("GN_AGNSS_Set_Not_Brd_SV_List: FAILED:  %s  Not_Brd_SV_Id_List[%d] = %d <%d or >%d, Out of range!");
      return 0;
    }
    *((unsigned char *)v35 + (int)(v18 - v13 + v20)) = 1;
LABEL_32:
    ++v11;
  }
  while (a2 != v11);
  long long v34 = v10;
  int v22 = 0;
  int v23 = 0;
  int v24 = 0;
  int v25 = 0;
  int v26 = 0;
  int v27 = 0;
  a2 = 0;
  do
  {
    int v29 = *a3++;
    int v28 = v29;
    if (v29 > 15)
    {
      if (v28 == 128) {
        int v30 = v22 + 1;
      }
      else {
        int v30 = v22;
      }
      if (v28 == 64) {
        int v31 = v23 + 1;
      }
      else {
        int v31 = v23;
      }
      if (v28 == 64) {
        int v30 = v22;
      }
      if (v28 == 32) {
        int v32 = v27 + 1;
      }
      else {
        int v32 = v27;
      }
      if (v28 == 16)
      {
        int v32 = v27;
        int v33 = v25 + 1;
      }
      else
      {
        int v33 = v25;
      }
      if (v28 > 63)
      {
        int v23 = v31;
        int v22 = v30;
      }
      else
      {
        int v27 = v32;
        int v25 = v33;
      }
    }
    else
    {
      switch(v28)
      {
        case 0:
          EvCrt_Illegal_switch_case("GN_AGNSS_Set_Not_Brd_SV_List", 0x106u);
          break;
        case 1:
          ++a2;
          break;
        case 2:
          ++v24;
          break;
        case 4:
          ++v26;
          break;
        default:
          break;
      }
    }
    --v12;
  }
  while (v12);
LABEL_36:
  EvLog_v("GN_AGNSS_Set_Not_Brd_SV_List:  %s  G %d Q %d R %d S %d B %d E %d N %d", v34, a2, v25, v27, v26, v23, v24, v22);
  if (API_Set_Not_Broadcast_SVID(a1, v35)) {
    return 1;
  }
  EvLog_v("GN_AGNSS_Set_Not_Brd_SV_List: FAILED:  %s", v34);
  return 0;
}

const char *str_AGNSS_PM(int a1)
{
  uint64_t result = 0;
  if (a1 > 15)
  {
    unsigned int v3 = "B";
    int v4 = "N";
    if (a1 != 128) {
      int v4 = 0;
    }
    if (a1 != 64) {
      unsigned int v3 = v4;
    }
    int v5 = "Q";
    uint64_t v6 = "R";
    if (a1 != 32) {
      uint64_t v6 = 0;
    }
    if (a1 != 16) {
      int v5 = v6;
    }
    if (a1 <= 63) {
      return v5;
    }
    else {
      return v3;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        uint64_t result = "X";
        break;
      case 1:
        uint64_t result = "G";
        break;
      case 2:
        uint64_t result = "E";
        break;
      case 4:
        uint64_t result = "S";
        break;
      case 8:
        uint64_t result = "M";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t GN_AGNSS_Set_Time_Model(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGNSS_Set_Time_Model");
  if (result)
  {
    unsigned int v3 = str_AGNSS_PM(*(_DWORD *)a1);
    int v4 = str_AGNSS_PM(*(_DWORD *)(a1 + 24));
    EvLog_v("GN_AGNSS_Set_Time_Model: %s->%s  %d %d  %d %d %d  %d  %d  %d", v3, v4, *(_DWORD *)(a1 + 4), *(unsigned __int16 *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(char *)(a1 + 20), *(char *)(a1 + 21), *(__int16 *)(a1 + 22), *(unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)a1 <= 0x10u && ((1 << *(_DWORD *)a1) & 0x10113) != 0)
    {
      str_AGNSS_PM(*(_DWORD *)a1);
      EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: GNSS_Type_Frouint64_t m = 0x%x (%s), Out of range!");
      return 0;
    }
    unsigned int v5 = *(_DWORD *)(a1 + 24);
    if (v5 <= 8 && ((1 << v5) & 0x111) != 0)
    {
      str_AGNSS_PM(*(_DWORD *)(a1 + 24));
      EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: GNSS_Type_To = 0x%x (%s), Out of range!");
      return 0;
    }
    if (*(_DWORD *)(a1 + 4) >= 0x240C840u)
    {
      EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: Ref_GNSS_TOW = %d >=604800000/16, Out of range!");
      return 0;
    }
    int v6 = *(_DWORD *)(a1 + 16);
    if (v6 != 0x7FFFFFFF && (v6 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: tA1 = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v7 = *(char *)(a1 + 20);
    if (v7 != 127 && ((char)(v7 - 64) & 0x80000000) == 0)
    {
      EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: tA2 = %d <-64 or >=64, Out of range!");
      return 0;
    }
    unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
    if (v8 != 0x7FFF && v8 >= 0x2000)
    {
      EvCrt_v("GN_AGNSS_Set_Time_Model:  FAILED:  Ref_GNSS_Weeuint64_t k = %d >=8192, Out of range!");
      return 0;
    }
    int v9 = *(char *)(a1 + 21);
    if (v9 != 127 && ((char)(v9 - 64) & 0x80000000) == 0)
    {
      EvCrt_v("GN_AGNSS_Set_Time_Model:  FAILED:  deltaT = %d <-64 or >=64, Out of range!");
      return 0;
    }
    if (v6 >= 0) {
      unsigned int v10 = *(_DWORD *)(a1 + 16);
    }
    else {
      unsigned int v10 = -v6;
    }
    if (v6 != 0x7FFFFFFF && v10 >= 0x2845)
    {
      EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED: tA1 = %d  outside +/- 10308 (300ns), Unrealistic!");
      return 0;
    }
    Debug_Log_AGNSS_Time_Model(a1);
    uint64_t result = 0;
    int v11 = *(_DWORD *)a1;
    if (*(int *)a1 > 63)
    {
      if (v11 == 64)
      {
        int v22 = *(_DWORD *)(a1 + 24);
        if (v22 == 32 || v22 == 1)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          int v34 = 0;
          unsigned int v23 = *(unsigned __int16 *)(a1 + 8);
          if (v23 > 0x54B) {
            LOWORD(v23) = v23 - 1356;
          }
          LOWORD(v32) = v23;
          int v24 = *(_DWORD *)(a1 + 12);
          int v25 = *(_DWORD *)(a1 + 16);
          HIDWORD(v32) = 16 * *(_DWORD *)(a1 + 4) / 0x3E8u;
          LODWORD(v33) = v24;
          WORD2(v33) = v25;
          BYTE6(v33) = *(unsigned char *)(a1 + 20);
          LOWORD(v34) = *(_WORD *)(a1 + 22);
          BYTE2(v34) = *(unsigned char *)(a1 + 28);
          if ((GN_ABDS_Set_BGTO(1, (unsigned __int16 *)&v32) & 1) == 0) {
            EvCrt_v("GN_AGNSS_Set_Time_Model:  FAILED,  A-Beidou BGTO");
          }
        }
        return 1;
      }
      else if (v11 == 128)
      {
        if (*(_DWORD *)(a1 + 24) != 1) {
          return 0;
        }
        uint64_t v17 = *(void *)(p_api + 48);
        if (*(unsigned char *)(v17 + 16) && *(int *)v17 >= 3) {
          int v18 = (int)*(double *)(v17 + 40) + 604800 * *(__int16 *)(v17 + 32);
        }
        else {
          int v18 = 0;
        }
        uint64_t v26 = p_NA;
        uint64_t v27 = p_NA + 22460;
        *(_DWORD *)(p_NA + 22460) = v18;
        *(_WORD *)(v27 + 8) = *(_DWORD *)(a1 + 12);
        *(_WORD *)(v27 + 10) = *(_DWORD *)(a1 + 16);
        *(unsigned char *)(v27 + 12) = *(unsigned char *)(a1 + 20);
        *(_WORD *)(v27 + 14) = *(_DWORD *)(a1 + 4) / 0x3E8u;
        *(_WORD *)(v27 + 16) = *(_WORD *)(a1 + 8);
        if (*(unsigned char *)(a1 + 28)) {
          int v28 = 5;
        }
        else {
          int v28 = 3;
        }
        *(_DWORD *)(v27 + 4) = v28;
        uint64_t result = 1;
        *(unsigned char *)(v26 + 347) = 1;
      }
    }
    else
    {
      if (v11 == 2)
      {
        int v19 = *(_DWORD *)(a1 + 24);
        if (v19 != 16 && v19 != 1) {
          return 0;
        }
        int v20 = *(_DWORD *)(a1 + 16);
        LOWORD(v32) = *(_DWORD *)(a1 + 12);
        WORD1(v32) = v20;
        BYTE4(v32) = 16 * *(_DWORD *)(a1 + 4) / 0x36EE80u;
        LOWORD(v21) = (*(_WORD *)(a1 + 8) - 1024) & 0x3F;
        if (1024 - *(unsigned __int16 *)(a1 + 8) >= 0) {
          int v21 = -((1024 - *(unsigned __int16 *)(a1 + 8)) & 0x3F);
        }
        BYTE5(v32) = v21;
        BYTE6(v32) = *(unsigned char *)(a1 + 28);
        uint64_t v16 = GN_AGAL_Set_GGTO((__int16 *)&v32);
        if ((v16 & 1) == 0) {
          EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED, A-Galileo GGTO");
        }
        return v16;
      }
      if (v11 == 32)
      {
        int v12 = *(_DWORD *)(a1 + 24);
        if (v12 != 16 && v12 != 1) {
          return 0;
        }
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        int v34 = 0;
        *(void *)int v30 = 0;
        double v31 = 0.0;
        int v13 = *(unsigned __int16 *)(a1 + 8);
        signed int v14 = 16 * *(_DWORD *)(a1 + 4) / 0x3E8u;
        API_Get_UTC_Cor(1, &v31);
        GPS_To_Glon_Time(0, v13, (double)v14, v31, v30, &v30[1], &v29);
        LOBYTE(v33) = v30[0];
        int v15 = (int)((double)*(int *)(a1 + 12) * 0.03125);
        LOWORD(v32) = v30[1];
        HIDWORD(v33) = v15;
        HIDWORD(v32) = 0;
        LOBYTE(v34) = 1;
        BYTE1(v34) = *(unsigned char *)(a1 + 28);
        uint64_t v16 = GN_AGLON_Set_Clk1((unsigned __int16 *)&v32);
        if ((v16 & 1) == 0) {
          EvCrt_v("GN_AGNSS_Set_Time_Model: FAILED, A-Glonass Clk1");
        }
        return v16;
      }
    }
  }
  return result;
}

uint64_t GM_Get_Best_SSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 1);
  if (a4 - 1 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  int v7 = (unsigned __int16 *)(a1 + 36 * v4 + 8);
  unsigned int v8 = (unsigned char *)(a2 + 48 * v4 + 12);
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      unsigned int v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (~*v7 & 0x308) == 0)
      {
        if (*(v8 - 8))
        {
          if (*v8) {
            int v11 = 70;
          }
          else {
            int v11 = 64;
          }
          v10 += v11;
          if (v8[3]) {
            v10 += 128;
          }
        }
        if ((int)v10 <= v6)
        {
          uint64_t v9 = v9;
        }
        else
        {
          int v6 = v10;
          uint64_t v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

void GncP24_02XofDeleteData(XofSvcsIf *a1)
{
  char v1 = (char)a1;
  Instance = (XofSvcsIf *)XofSvcsIf::GetInstance(a1);
  unsigned int v3 = Instance;
  if (v1)
  {
    XofSvcsIf::ClrOrbData(Instance);
    XofSvcsIf::ClrBceOrbData(v3);
    g_OrbitDataAvailable = 0;
    g_BceOrbitDataInjected = 0;
  }
  if ((v1 & 2) != 0)
  {
    std::mutex::lock((std::mutex *)((char *)v3 + 1200));
    *(_OWORD *)((char *)v3 + 1064) = 0u;
    *(_OWORD *)((char *)v3 + 1080) = 0u;
    *(_OWORD *)((char *)v3 + 1096) = 0u;
    *(_OWORD *)((char *)v3 + 1112) = 0u;
    *(_OWORD *)((char *)v3 + 1000) = v4;
    *(_OWORD *)((char *)v3 + 1016) = 0u;
    *(_OWORD *)((char *)v3 + 1032) = 0u;
    *(_OWORD *)((char *)v3 + 1048) = 0u;
    *((_DWORD *)v3 + 283) = 0;
    std::mutex::unlock((std::mutex *)((char *)v3 + 1200));
  }
}

void GncP24_55UpdateBceOrbitAssistance(XofSvcsIf *a1)
{
  uint64_t v333 = *MEMORY[0x263EF8340];
  if (g_OrbitDataAvailable == 1)
  {
    v290[0] = 0;
    int v291 = 0;
    if ((a1 & 1) == 0 && g_BceOrbitDataInjected == 1)
    {
      if (!g_GncP_PEUpdate[0] || (dword_26A9CA470 & 0xC) == 0) {
        return;
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v1 = mach_continuous_time();
        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: Time Jump detected, Re-injecting broadcast data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance");
        gnssOsa_PrintLog((char *)__str, 4, 1, 0);
      }
    }
    Instance = (XofSvcsIf *)XofSvcsIf::GetInstance(a1);
    if (g_GncP_PEUpdate[0])
    {
      __int16 v3 = word_26A9CA368;
      if (byte_26A9CA358 && word_26A9CA368 != 0)
      {
        unsigned int v5 = Instance;
        double v6 = *(double *)&qword_26A9CA370;
        if (XofSvcsIf::GetXofExtEphStartTime((uint64_t)Instance, (uint64_t)v290) == 1)
        {
          unint64_t v7 = (unint64_t)v6 + 604800 * v3;
          unint64_t v8 = v291 + 604800 * v290[0];
          unint64_t v9 = v8 - v7;
          unint64_t v281 = v8;
          unint64_t v282 = v7;
          BOOL v10 = v7 >= v8;
          unint64_t v11 = v7 - v8;
          if (v11 == 0 || !v10) {
            unint64_t v11 = v9;
          }
          unint64_t v283 = v11;
          if (v11 <= 0x93A7F)
          {
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v12 = mach_continuous_time();
              snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: AgeCheckOK for Iono,Utc,TM,ChanMap,Gpstime,%llu,EEStartTime,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", v282, v281);
              gnssOsa_PrintLog((char *)__str, 4, 1, 0);
            }
            GncP24_18UpdtXofAssistNotBrdSv(0);
            GncP24_18UpdtXofAssistNotBrdSv((XofSvcsIf *)1);
            __str[0] = 0;
            int v332 = 0;
            *(_WORD *)v313 = 0;
            *(_DWORD *)&v313[4] = 0;
            signed int v14 = XofSvcsIf::GetInstance(v13);
            if (XofSvcsIf::GetXofInjctTime((uint64_t)v14, (uint64_t)v313) != 1
              || XofSvcsIf::GetRtiInjctTime((uint64_t)v14, (uint64_t)__str) != 1
              || *(_DWORD *)&v313[4] + 604800 * *(unsigned __int16 *)v313 >= v332
                                                                                         + 604800
                                                                                         * __str[0])
            {
              GncP24_63UpdateXofAssistDoNotUseSV(0);
              GncP24_63UpdateXofAssistDoNotUseSV((XofSvcsIf *)1);
            }
            uint64_t v289 = 0;
            IonoModel = (XofSvcsIf *)XofSvcsIf::GetIonoModel((uint64_t)v5, &v289);
            if (IonoModel == 1)
            {
              *(_DWORD *)v313 = GncP24_GetXofInjectFileTime_GPS_Seconds(IonoModel);
              *(void *)&v313[4] = v289;
              v313[12] = 1;
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v16 = mach_continuous_time();
                snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: ASST:G Iono GPS_secs,%d,A0,%d,A1,%d,A2,%d,A3,%d,B0,%d,B1,%d,B2,%d,B3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", *(_DWORD *)v313, v313[4], v313[5], v313[6], v313[7], v313[8], v313[9], v313[10], v313[11]);
                gnssOsa_PrintLog((char *)__str, 4, 1, 0);
              }
              char v17 = GN_AGPS_Set_Ion((unsigned int *)v313);
              if (g_LbsOsaTrace_Config < 5) {
                char v18 = 1;
              }
              else {
                char v18 = v17;
              }
              if ((v18 & 1) == 0)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v19 = mach_continuous_time();
                snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx G Iono\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                gnssOsa_PrintLog((char *)__str, 5, 1, 0);
              }
            }
            else if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v20 = mach_continuous_time();
              snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx G Iono\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 769);
              gnssOsa_PrintLog((char *)__str, 5, 1, 0);
            }
            uint64_t v286 = 0;
            uint64_t v287 = 0;
            int v288 = 0;
            GpsUTCModel = (XofSvcsIf *)XofSvcsIf::GetGpsUTCModel((uint64_t)v5, (uint64_t)&v286);
            if (GpsUTCModel != 1)
            {
              if (g_LbsOsaTrace_Config >= 5)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v23 = mach_continuous_time();
                snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UTC Model\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 769);
                gnssOsa_PrintLog((char *)__str, 5, 1, 0);
              }
              goto LABEL_68;
            }
            *(_DWORD *)&v313[16] = 0x10000;
            *(void *)v313 = 0;
            *(void *)&v313[8] = 0;
            *(_DWORD *)v313 = GncP24_GetXofInjectFileTime_GPS_Seconds(GpsUTCModel);
            *(void *)&v313[4] = v286;
            int v22 = (unsigned __int16)v287;
            if ((unsigned __int16)v287 > 0xFFu)
            {
              if (g_LbsOsaTrace_Config >= 5)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v24 = mach_continuous_time();
                snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UTC sTot,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 772, v22);
                gnssOsa_PrintLog((char *)__str, 5, 1, 0);
              }
            }
            else
            {
              v313[12] = v287;
            }
            int v25 = WORD1(v287);
            if (WORD1(v287) > 0xFFu)
            {
              if (g_LbsOsaTrace_Config >= 5)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v26 = mach_continuous_time();
                snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UTC WNt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 772, v25);
                gnssOsa_PrintLog((char *)__str, 5, 1, 0);
              }
            }
            else
            {
              v313[13] = BYTE2(v287);
            }
            int v27 = SWORD2(v287);
            if (WORD2(v287) == (unsigned __int16)SBYTE4(v287))
            {
              v313[14] = BYTE4(v287);
            }
            else if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v28 = mach_continuous_time();
              snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UTC DELTAls,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 772, v27);
              gnssOsa_PrintLog((char *)__str, 5, 1, 0);
            }
            int v29 = HIWORD(v287);
            if (HIWORD(v287) > 0xFFu)
            {
              if (g_LbsOsaTrace_Config >= 5)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v30 = mach_continuous_time();
                snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UTC WNlsf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 772, v29);
                gnssOsa_PrintLog((char *)__str, 5, 1, 0);
              }
            }
            else
            {
              v313[15] = BYTE6(v287);
            }
            int v31 = (__int16)v288;
            if ((unsigned __int16)v288 == (unsigned __int16)(char)v288)
            {
              v313[16] = v288;
            }
            else if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v32 = mach_continuous_time();
              snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UTC DN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 772, v31);
              gnssOsa_PrintLog((char *)__str, 5, 1, 0);
            }
            int v33 = SHIWORD(v288);
            if (HIWORD(v288) == (unsigned __int16)SBYTE2(v288))
            {
              v313[17] = BYTE2(v288);
            }
            else
            {
              unsigned int v34 = g_LbsOsaTrace_Config;
              if (g_LbsOsaTrace_Config < 5)
              {
LABEL_61:
                if (v34 >= 4)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v36 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: ASST:UTC GPS_secs,%d,A1,%d,A0,%d,Tot,%d,Wnt,%d,dtLs,%d,WNLSF,%d,DN,%d,dtLSF,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", *(_DWORD *)v313, *(_DWORD *)&v313[4], *(_DWORD *)&v313[8], v313[12], v313[13], v313[14], v313[15], v313[16], v313[17]);
                  gnssOsa_PrintLog((char *)__str, 4, 1, 0);
                }
                char v37 = GN_AGPS_Set_UTC((unsigned int *)v313);
                if (g_LbsOsaTrace_Config < 5) {
                  char v38 = 1;
                }
                else {
                  char v38 = v37;
                }
                if ((v38 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v39 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx G UTC Correction\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
LABEL_68:
                char updated = GncP24_60UpdateTimeMod((XofSvcsIf *)1);
                if (g_LbsOsaTrace_Config < 5) {
                  char v41 = 1;
                }
                else {
                  char v41 = updated;
                }
                if ((v41 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v42 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Time model,SBAS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
                char v43 = GncP24_60UpdateTimeMod((XofSvcsIf *)2);
                if (g_LbsOsaTrace_Config < 5) {
                  char v44 = 1;
                }
                else {
                  char v44 = v43;
                }
                if ((v44 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v45 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Time model,QZSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
                char v46 = GncP24_60UpdateTimeMod((XofSvcsIf *)3);
                if (g_LbsOsaTrace_Config < 5) {
                  char v47 = 1;
                }
                else {
                  char v47 = v46;
                }
                if ((v47 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v48 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Time model,GAL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
                char v49 = GncP24_60UpdateTimeMod((XofSvcsIf *)4);
                if (g_LbsOsaTrace_Config < 5) {
                  char v50 = 1;
                }
                else {
                  char v50 = v49;
                }
                if ((v50 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v51 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Time model,GLO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
                char v52 = GncP24_60UpdateTimeMod((XofSvcsIf *)5);
                if (g_LbsOsaTrace_Config < 5) {
                  char v53 = 1;
                }
                else {
                  char v53 = v52;
                }
                if ((v53 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v54 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Time model,BDS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
                char v55 = GncP24_60UpdateTimeMod((XofSvcsIf *)6);
                if (g_LbsOsaTrace_Config < 5) {
                  char v56 = 1;
                }
                else {
                  char v56 = v55;
                }
                if ((v56 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v57 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Time model,NavIC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
                int v58 = 1;
                signed __int8 v285 = 0;
                do
                {
                  GloChannelMap = (XofSvcsIf *)XofSvcsIf::GetGloChannelMap(v5, v58, &v285);
                  if (GloChannelMap == 7)
                  {
                    if (g_LbsOsaTrace_Config >= 4)
                    {
                      bzero(__str, 0x3C6uLL);
                      uint64_t v62 = mach_continuous_time();
                      snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: GloChanMap not included/Unknown\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance");
                      gnssOsa_PrintLog((char *)__str, 4, 1, 0);
                    }
                  }
                  else if (GloChannelMap == 1)
                  {
                    GloChannelMap = (XofSvcsIf *)GN_AGLON_Set_Chan_Num(v58, v285);
                    if (g_LbsOsaTrace_Config < 5) {
                      char v60 = 1;
                    }
                    else {
                      char v60 = (char)GloChannelMap;
                    }
                    if ((v60 & 1) == 0)
                    {
                      bzero(__str, 0x3C6uLL);
                      uint64_t v61 = mach_continuous_time();
                      snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLO Chan map SatId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 257, v58);
                      gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                    }
                  }
                  else if (g_LbsOsaTrace_Config >= 5)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v63 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLO Chan map Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 769, v58);
                    gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                  }
                  signed __int8 v285 = 0;
                  ++v58;
                }
                while (v58 != 25);
                long long v64 = XofSvcsIf::GetInstance(GloChannelMap);
                v310 = 0;
                v311 = 0;
                uint64_t v312 = 0;
                if (XofSvcsIf::GetGpsAlmData((uint64_t)v64, (uint64_t)&v310) == 1)
                {
                  long long v67 = v310;
                  long long v66 = v311;
                  if (v311 != v310 && (unint64_t)(v311 - v310) <= 0x41F)
                  {
                    do
                    {
                      v65.i32[0] = *(_DWORD *)v67;
                      int16x8_t v68 = (int16x8_t)vmovl_u8(v65);
                      *(int16x4_t *)v68.i8 = vrev32_s16(*(int16x4_t *)v68.i8);
                      *(_DWORD *)v313 = vmovn_s16(v68).u32[0];
                      *(_DWORD *)&v313[4] = *((_DWORD *)v67 + 7);
                      *(_WORD *)&v313[8] = *((_WORD *)v67 + 2);
                      *(_DWORD *)&v313[10] = *(_DWORD *)(v67 + 6);
                      *(_OWORD *)&v313[16] = *(_OWORD *)(v67 + 12);
                      v313[32] = 1;
                      char v69 = GN_AGPS_Set_Alm_El(v313);
                      if (g_LbsOsaTrace_Config < 5) {
                        char v70 = 1;
                      }
                      else {
                        char v70 = v69;
                      }
                      if ((v70 & 1) == 0)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v71 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx G Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "GNC", 68, "GncP24_57UpdateAlmAssist", 257, v313[1]);
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                      v67 += 32;
                    }
                    while (v67 != v66);
                  }
                }
                v307 = 0;
                v308 = 0;
                uint64_t v309 = 0;
                if (XofSvcsIf::GetQzssAlmData((uint64_t)v64, (uint64_t)&v307) == 1)
                {
                  double v74 = v307;
                  double v73 = v308;
                  if (v308 != v307 && (unint64_t)(v308 - v307) <= 0x15F)
                  {
                    do
                    {
                      v72.i32[0] = *(_DWORD *)v74;
                      int16x8_t v75 = (int16x8_t)vmovl_u8(v72);
                      *(int16x4_t *)v75.i8 = vrev32_s16(*(int16x4_t *)v75.i8);
                      *(_DWORD *)v313 = vmovn_s16(v75).u32[0];
                      *(_DWORD *)&v313[4] = *((_DWORD *)v74 + 7);
                      *(_WORD *)&v313[8] = *((_WORD *)v74 + 2);
                      *(_DWORD *)&v313[10] = *(_DWORD *)(v74 + 6);
                      *(_OWORD *)&v313[16] = *(_OWORD *)(v74 + 12);
                      v313[32] = 1;
                      char v76 = GN_AGPS_Set_Alm_El(v313);
                      if (g_LbsOsaTrace_Config < 5) {
                        char v77 = 1;
                      }
                      else {
                        char v77 = v76;
                      }
                      if ((v77 & 1) == 0)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v78 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Q Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "GNC", 68, "GncP24_57UpdateAlmAssist", 257, v313[1]);
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                      v74 += 32;
                    }
                    while (v74 != v73);
                  }
                }
                v304 = 0;
                v305 = 0;
                uint64_t v306 = 0;
                if (XofSvcsIf::GetGloAlmData((uint64_t)v64, &v304) == 1)
                {
                  double v80 = v304;
                  double v79 = v305;
                  if (v305 != v304 && 0x8E38E38E38E38E39 * ((v305 - v304) >> 2) <= 0x18)
                  {
                    do
                    {
                      *(_WORD *)v313 = *((_WORD *)v80 + 2);
                      v313[2] = *v80;
                      v313[3] = v80[6];
                      *(_OWORD *)&v313[4] = *(_OWORD *)(v80 + 8);
                      v313[20] = v80[24];
                      *(_WORD *)&v313[22] = *((_WORD *)v80 + 13);
                      *(_DWORD *)&v313[24] = *((_DWORD *)v80 + 7);
                      *(_WORD *)&v313[28] = *((_WORD *)v80 + 16);
                      v313[30] = 1;
                      char v81 = GN_AGLON_Set_Alm_El((unsigned __int16 *)v313);
                      if (g_LbsOsaTrace_Config < 5) {
                        char v82 = 1;
                      }
                      else {
                        char v82 = v81;
                      }
                      if ((v82 & 1) == 0)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v83 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx R Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v83), "GNC", 68, "GncP24_57UpdateAlmAssist", 257, v313[2]);
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                      v80 += 36;
                    }
                    while (v80 != v79);
                  }
                }
                v301 = 0;
                v302 = 0;
                uint64_t v303 = 0;
                if (XofSvcsIf::GetGalAlmData((uint64_t)v64, (uint64_t)&v301) == 1)
                {
                  int v85 = (char *)v301;
                  int v84 = v302;
                  if (v302 != v301 && (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v302 - (unsigned char *)v301) >> 2)) <= 0x24)
                  {
                    do
                    {
                      *(_WORD *)v313 = *(_WORD *)v85;
                      unsigned int v86 = *((_DWORD *)v85 + 1);
                      v313[2] = (v86 / 0x93A80) & 3;
                      *(_WORD *)&v313[4] = v86 % 0x93A80 / 0x258;
                      *(_WORD *)&v313[6] = *((_WORD *)v85 + 8);
                      LODWORD(v87) = *((_DWORD *)v85 + 2);
                      WORD2(v87) = *((_WORD *)v85 + 9);
                      WORD3(v87) = *((_WORD *)v85 + 6);
                      *((void *)&v87 + 1) = *(void *)(v85 + 20);
                      *(_OWORD *)&v313[8] = v87;
                      v313[24] = v85[15] & 3;
                      LOBYTE(v86) = v85[14];
                      v313[25] = (v86 >> 2) & 3;
                      v313[26] = v86 & 3;
                      v313[27] = 1;
                      char v88 = GN_AGAL_Set_Alm_El(v313);
                      if (g_LbsOsaTrace_Config < 5) {
                        char v89 = 1;
                      }
                      else {
                        char v89 = v88;
                      }
                      if ((v89 & 1) == 0)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v90 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx E Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v90), "GNC", 68, "GncP24_57UpdateAlmAssist", 257, v313[0]);
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                      v85 += 28;
                    }
                    while (v85 != v84);
                  }
                }
                v298 = 0;
                v299 = 0;
                uint64_t v300 = 0;
                if (XofSvcsIf::GetBdsAlmData((uint64_t)v64, (char **)&v298) == 1)
                {
                  uint64_t v92 = (char *)v298;
                  char v91 = v299;
                  if (v299 != v298 && 0xCCCCCCCCCCCCCCCDLL * ((v299 - (unsigned char *)v298) >> 3) <= 0x3F)
                  {
                    do
                    {
                      v313[0] = v92[1];
                      v313[1] = *v92;
                      v313[2] = v92[4];
                      *(void *)&v313[28] = *((void *)v92 + 4);
                      *(void *)&v313[20] = *((void *)v92 + 3);
                      *(_OWORD *)&v313[4] = *(_OWORD *)(v92 + 8);
                      v313[36] = 1;
                      char v93 = GN_ABDS_Set_Alm_El(v313);
                      if (g_LbsOsaTrace_Config < 5) {
                        char v94 = 1;
                      }
                      else {
                        char v94 = v93;
                      }
                      if ((v94 & 1) == 0)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v95 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx B Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v95), "GNC", 68, "GncP24_57UpdateAlmAssist", 257, v313[1]);
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                      v92 += 40;
                    }
                    while (v92 != v91);
                  }
                }
                v295 = 0;
                v296 = 0;
                uint64_t v297 = 0;
                if (XofSvcsIf::GetNavicAlmData((uint64_t)v64, (char **)&v295) == 1)
                {
                  double v97 = v295;
                  double v96 = v296;
                  if (v296 != v295 && 0x8E38E38E38E38E39 * ((v296 - (unsigned char *)v295) >> 2) <= 0xE)
                  {
                    do
                    {
                      v313[0] = *(unsigned char *)v97;
                      *(_WORD *)&v313[1] = v97[7];
                      *(_WORD *)&v313[4] = v97[1];
                      *(_DWORD *)&v313[6] = *((_DWORD *)v97 + 1);
                      *(_DWORD *)&v313[12] = *((_DWORD *)v97 + 2);
                      *(_WORD *)&v313[16] = v97[6];
                      *(_OWORD *)&v313[20] = *((_OWORD *)v97 + 1);
                      *(_WORD *)&v313[36] = v97[16];
                      *(_WORD *)&v313[38] = v97[17];
                      v313[40] = *((unsigned char *)v97 + 1);
                      v313[41] = 1;
                      char v98 = GN_ANVIC_Set_Alm_El(v313);
                      if (g_LbsOsaTrace_Config < 5) {
                        char v99 = 1;
                      }
                      else {
                        char v99 = v98;
                      }
                      if ((v99 & 1) == 0)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v100 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx N Alm SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v100), "GNC", 68, "GncP24_57UpdateAlmAssist", 257, v313[0]);
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                      v97 += 18;
                    }
                    while (v97 != v96);
                  }
                }
                std::string __p = 0;
                v293 = 0;
                uint64_t v294 = 0;
                if (XofSvcsIf::GetSbasBrdCstEphData((uint64_t)v64, (char **)&__p) == 1)
                {
                  double v102 = (unsigned __int8 *)__p;
                  uint64_t v101 = v293;
                  if (v293 == __p || 0xCCCCCCCCCCCCCCCDLL * ((v293 - (unsigned char *)__p) >> 3) > 0x27)
                  {
                    if (g_LbsOsaTrace_Config >= 5)
                    {
                      bzero(__str, 0x3C6uLL);
                      uint64_t v117 = mach_continuous_time();
                      snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx S BCE NumSats,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v117), "GNC", 68, "GncP24_57UpdateAlmAssist", 514, 0xCCCCCCCCCCCCCCCDLL * ((v293 - (unsigned char *)__p) >> 3));
                      gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                    }
                  }
                  else
                  {
                    do
                    {
                      uint64_t v103 = *v102;
                      int v104 = *((__int16 *)v102 + 2);
                      int v105 = (char)v102[6];
                      unsigned __int8 v106 = v102[7];
                      int v107 = *((__int16 *)v102 + 16);
                      int v108 = *((__int16 *)v102 + 17);
                      int v109 = *((__int16 *)v102 + 18);
                      uint64_t v110 = v102[38];
                      long long v111 = *(_OWORD *)(v102 + 8);
                      uint64_t v112 = *((void *)v102 + 3);
                      *(_WORD *)v313 = *((_WORD *)v102 + 1);
                      v313[2] = v106;
                      *(_DWORD *)&v313[4] = v104;
                      *(_DWORD *)&v313[8] = v105;
                      *(_OWORD *)&v313[12] = v111;
                      *(void *)&v313[28] = v112;
                      *(_DWORD *)&v313[36] = v107;
                      *(_DWORD *)&v313[40] = v108;
                      *(_DWORD *)&v313[44] = v109;
                      v313[48] = 1;
                      BOOL v113 = GN_ASBAS_Set_Eph_El(v103, v110, (unsigned __int16 *)v313);
                      char v114 = g_LbsOsaTrace_Config < 5 || v113;
                      if ((v114 & 1) == 0)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v115 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx S BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "GNC", 68, "GncP24_57UpdateAlmAssist", 257, v103);
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                      v102 += 40;
                    }
                    while (v102 != v101);
                  }
                }
                else if (g_LbsOsaTrace_Config >= 5)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v116 = mach_continuous_time();
                  snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx S BCE data not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v116), "GNC", 68, "GncP24_57UpdateAlmAssist", 769);
                  gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                }
                if (__p)
                {
                  v293 = (unsigned __int8 *)__p;
                  operator delete(__p);
                }
                if (v295)
                {
                  v296 = v295;
                  operator delete(v295);
                }
                if (v298)
                {
                  v299 = (char *)v298;
                  operator delete(v298);
                }
                if (v301)
                {
                  v302 = (char *)v301;
                  operator delete(v301);
                }
                if (v304)
                {
                  v305 = v304;
                  operator delete(v304);
                }
                if (v307)
                {
                  v308 = v307;
                  operator delete(v307);
                }
                double v118 = (XofSvcsIf *)v310;
                if (v310)
                {
                  v311 = v310;
                  operator delete(v310);
                }
                if (v283 >> 4 < 0x7E9)
                {
                  v284 = (XofSvcsIf *)XofSvcsIf::GetInstance(v118);
                  v310 = 0;
                  v311 = 0;
                  uint64_t v312 = 0;
                  if (XofSvcsIf::GetGpsBrdCstEphData((uint64_t)v284, &v310) == 1)
                  {
                    double v120 = v310;
                    double v119 = v311;
                    if (v311 == v310 || 0x8E38E38E38E38E39 * ((v311 - v310) >> 3) > 0x20)
                    {
                      if (g_LbsOsaTrace_Config >= 5)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v146 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx G BCE NumSats,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v146), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 514, 0x8E38E38E38E38E39 * ((v311 - v310) >> 3));
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                    }
                    else
                    {
                      do
                      {
                        char v121 = v120[1];
                        char v122 = v120[2];
                        __int16 v123 = *((_WORD *)v120 + 2);
                        __int16 v124 = *((_WORD *)v120 + 3);
                        int v125 = *((_DWORD *)v120 + 2);
                        char v126 = v120[14];
                        int v127 = *((unsigned __int16 *)v120 + 9);
                        int v128 = *((unsigned __int16 *)v120 + 10);
                        int v129 = v120[22];
                        int v130 = v120[23];
                        int v131 = *((_DWORD *)v120 + 13);
                        __int16 v132 = *((_WORD *)v120 + 28);
                        __int16 v133 = *((_WORD *)v120 + 29);
                        int16x4_t v134 = *(int16x4_t *)(v120 + 60);
                        HIDWORD(v136) = *((_DWORD *)v120 + 17);
                        LODWORD(v136) = HIDWORD(v136);
                        int v135 = v136 >> 16;
                        unint64_t v137 = llround((double)*((__int16 *)v120 + 8) * 2.91038305e-11 * 2147483650.0);
                        if (v137 != (char)v137) {
                          LOBYTE(v137) = 0;
                        }
                        int32x4_t v138 = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)(v120 + 28), *(int8x16_t *)(v120 + 28), 4uLL), *(int32x4_t *)(v120 + 28));
                        uint64_t v139 = *(void *)(v120 + 44);
                        LOWORD(v140) = *((_WORD *)v120 + 12);
                        WORD1(v140) = *((_WORD *)v120 + 6);
                        v313[0] = *v120;
                        v313[1] = 0;
                        v313[2] = v122;
                        v313[3] = v121;
                        *(_WORD *)&v313[4] = 0;
                        v313[6] = 0;
                        v313[7] = v137;
                        v313[8] = v126;
                        *(_WORD *)&v313[10] = v123;
                        *(_WORD *)&v313[12] = v124;
                        *(_WORD *)&v313[14] = v124;
                        WORD2(v140) = v132;
                        WORD3(v140) = v133;
                        *((int16x4_t *)&v140 + 1) = vrev64_s16(v134);
                        *(_OWORD *)&v313[16] = v140;
                        *(_DWORD *)&v313[32] = v135;
                        *(_DWORD *)&v313[36] = v125;
                        *(int32x4_t *)&v313[40] = v138;
                        *(void *)&v313[56] = v139;
                        *(_DWORD *)&v313[64] = v131;
                        if (v129 == 255) {
                          char v141 = 0;
                        }
                        else {
                          char v141 = v129;
                        }
                        v313[68] = v141;
                        if (v130 == 255) {
                          LOBYTE(v130) = 0;
                        }
                        v313[69] = v130;
                        if (v127 == 0x7FFF) {
                          LOWORD(v127) = 0;
                        }
                        *(_WORD *)&v313[70] = v127;
                        if (v128 == 0x7FFF) {
                          LOWORD(v128) = 0;
                        }
                        LOWORD(v314) = v128;
                        BYTE2(v314) = 1;
                        char v142 = GN_AGPS_Set_Eph_El(v313);
                        if (g_LbsOsaTrace_Config < 5) {
                          char v143 = 1;
                        }
                        else {
                          char v143 = v142;
                        }
                        if ((v143 & 1) == 0)
                        {
                          bzero(__str, 0x3C6uLL);
                          uint64_t v144 = mach_continuous_time();
                          snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx G BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v144), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 257, v313[0]);
                          gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                        }
                        v120 += 72;
                      }
                      while (v120 != v119);
                    }
                  }
                  else if (g_LbsOsaTrace_Config >= 5)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v145 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx G BCE data not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v145), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 769);
                    gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                  }
                  v307 = 0;
                  v308 = 0;
                  uint64_t v309 = 0;
                  if (XofSvcsIf::GetQzssBrdCstEphData((uint64_t)v284, &v307) == 1)
                  {
                    unsigned int v148 = v307;
                    uint64_t v147 = v308;
                    if (v308 == v307 || 0x8E38E38E38E38E39 * ((v308 - v307) >> 3) > 0xA)
                    {
                      if (g_LbsOsaTrace_Config >= 5)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v174 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Q BCE NumSats,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v174), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 514, 0x8E38E38E38E38E39 * ((v308 - v307) >> 3));
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                    }
                    else
                    {
                      do
                      {
                        char v149 = v148[1];
                        char v150 = v148[2];
                        __int16 v151 = *((_WORD *)v148 + 2);
                        __int16 v152 = *((_WORD *)v148 + 3);
                        int v153 = *((_DWORD *)v148 + 2);
                        char v154 = v148[14];
                        int v155 = *((unsigned __int16 *)v148 + 9);
                        int v156 = *((unsigned __int16 *)v148 + 10);
                        int v157 = v148[22];
                        int v158 = v148[23];
                        int v159 = *((_DWORD *)v148 + 13);
                        __int16 v160 = *((_WORD *)v148 + 28);
                        __int16 v161 = *((_WORD *)v148 + 29);
                        int16x4_t v162 = *(int16x4_t *)(v148 + 60);
                        HIDWORD(v164) = *((_DWORD *)v148 + 17);
                        LODWORD(v164) = HIDWORD(v164);
                        int v163 = v164 >> 16;
                        unint64_t v165 = llround((double)*((__int16 *)v148 + 8) * 2.91038305e-11 * 2147483650.0);
                        if (v165 != (char)v165) {
                          LOBYTE(v165) = 0;
                        }
                        int32x4_t v166 = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)(v148 + 28), *(int8x16_t *)(v148 + 28), 4uLL), *(int32x4_t *)(v148 + 28));
                        uint64_t v167 = *(void *)(v148 + 44);
                        LOWORD(v168) = *((_WORD *)v148 + 12);
                        WORD1(v168) = *((_WORD *)v148 + 6);
                        v313[0] = *v148;
                        v313[1] = 0;
                        v313[2] = v150;
                        v313[3] = v149;
                        *(_WORD *)&v313[4] = 0;
                        v313[6] = 0;
                        v313[7] = v165;
                        v313[8] = v154;
                        *(_WORD *)&v313[10] = v151;
                        *(_WORD *)&v313[12] = v152;
                        *(_WORD *)&v313[14] = v152;
                        WORD2(v168) = v160;
                        WORD3(v168) = v161;
                        *((int16x4_t *)&v168 + 1) = vrev64_s16(v162);
                        *(_OWORD *)&v313[16] = v168;
                        *(_DWORD *)&v313[32] = v163;
                        *(_DWORD *)&v313[36] = v153;
                        *(int32x4_t *)&v313[40] = v166;
                        *(void *)&v313[56] = v167;
                        *(_DWORD *)&v313[64] = v159;
                        BYTE2(v314) = 1;
                        if (v157 == 255) {
                          char v169 = 0;
                        }
                        else {
                          char v169 = v157;
                        }
                        v313[68] = v169;
                        if (v158 == 255) {
                          LOBYTE(v158) = 0;
                        }
                        v313[69] = v158;
                        if (v155 == 0x7FFF) {
                          LOWORD(v155) = 0;
                        }
                        *(_WORD *)&v313[70] = v155;
                        if (v156 == 0x7FFF) {
                          LOWORD(v156) = 0;
                        }
                        LOWORD(v314) = v156;
                        char v170 = GN_AGPS_Set_Eph_El(v313);
                        if (g_LbsOsaTrace_Config < 5) {
                          char v171 = 1;
                        }
                        else {
                          char v171 = v170;
                        }
                        if ((v171 & 1) == 0)
                        {
                          bzero(__str, 0x3C6uLL);
                          uint64_t v172 = mach_continuous_time();
                          snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Q BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v172), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 257, v313[0]);
                          gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                        }
                        v148 += 72;
                      }
                      while (v148 != v147);
                    }
                  }
                  else if (g_LbsOsaTrace_Config >= 5)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v173 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Q BCE data not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v173), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 769);
                    gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                  }
                  v304 = 0;
                  v305 = 0;
                  uint64_t v306 = 0;
                  if (XofSvcsIf::GetGloBrdCstEphData((uint64_t)v284, (uint64_t)&v304) == 1)
                  {
                    unsigned int v176 = v304;
                    long long v175 = v305;
                    if (v305 == v304 || (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v305 - v304) >> 2)) > 0x18)
                    {
                      if (g_LbsOsaTrace_Config >= 5)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v201 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx R BCE NumSats,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v201), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 514, 0x2E8BA2E8BA2E8BA3 * ((v305 - v304) >> 2));
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                    }
                    else
                    {
                      do
                      {
                        int v177 = *v176;
                        unsigned int v178 = *((unsigned __int16 *)v176 + 1);
                        if (v178 < 0x60)
                        {
                          char v180 = v176[1];
                          int v181 = *((_DWORD *)v176 + 1);
                          __int16 v182 = *((_WORD *)v176 + 4);
                          char v183 = v176[10];
                          char v184 = v176[11];
                          char v185 = v176[12];
                          int v186 = v176[13];
                          char v187 = v176[14];
                          char v188 = v176[15];
                          int v189 = *((_DWORD *)v176 + 4);
                          int32x4_t v190 = *(int32x4_t *)(v176 + 20);
                          int v191 = *((_DWORD *)v176 + 9);
                          char v192 = v176[40];
                          char v193 = v176[41];
                          char v194 = v176[42];
                          v313[0] = *v176;
                          v313[2] = v178;
                          *(_WORD *)&v313[4] = 0;
                          v313[6] = v180;
                          v313[7] = v188;
                          v313[8] = v184;
                          v313[9] = v185;
                          v313[10] = v186 != 0;
                          v313[11] = v187;
                          *(_DWORD *)&v313[12] = v189;
                          *(int32x4_t *)&v313[16] = vuzp2q_s32(v190, vrev64q_s32(v190));
                          *(_DWORD *)&v313[32] = v191;
                          v313[36] = v192;
                          v313[37] = v193;
                          v313[38] = v194;
                          v313[39] = v183;
                          *(_DWORD *)&v313[40] = v181;
                          *(_WORD *)&v313[44] = v182;
                          v313[46] = 1;
                          LOBYTE(v301) = 0;
                          int v195 = XofSvcsIf::GetGloChannelMap(v284, v177, (signed __int8 *)&v301);
                          char v196 = (char)v301;
                          if (v195 != 1) {
                            char v196 = 127;
                          }
                          v313[1] = v196;
                          char v197 = GN_AGLON_Set_Eph_El(v313);
                          if (g_LbsOsaTrace_Config < 5) {
                            char v198 = 1;
                          }
                          else {
                            char v198 = v197;
                          }
                          if ((v198 & 1) == 0)
                          {
                            bzero(__str, 0x3C6uLL);
                            uint64_t v199 = mach_continuous_time();
                            snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx R BCE gloN,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v199), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 257, v313[0]);
                            gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                          }
                        }
                        else if (g_LbsOsaTrace_Config >= 5)
                        {
                          bzero(__str, 0x3C6uLL);
                          uint64_t v179 = mach_continuous_time();
                          snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GloTb,%u SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v179), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 770, v178, v177);
                          gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                        }
                        v176 += 44;
                      }
                      while (v176 != v175);
                    }
                  }
                  else if (g_LbsOsaTrace_Config >= 5)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v200 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx R BCE data not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v200), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 769);
                    gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                  }
                  v301 = 0;
                  v302 = 0;
                  uint64_t v303 = 0;
                  if (XofSvcsIf::GetGalBrdCstEphData((uint64_t)v284, (char **)&v301) == 1)
                  {
                    long long v203 = (unsigned __int8 *)v301;
                    int v202 = (unsigned __int8 *)v302;
                    if (v302 == v301 || 0x8E38E38E38E38E39 * ((v302 - (unsigned char *)v301) >> 3) > 0x24)
                    {
                      if (g_LbsOsaTrace_Config >= 5)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v224 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx E BCE NumSats,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v224), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 514, 0x8E38E38E38E38E39 * ((v302 - (unsigned char *)v301) >> 3));
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                    }
                    else
                    {
                      do
                      {
                        char v204 = *v203;
                        unsigned __int8 v205 = v203[1];
                        unsigned int v206 = v203[2];
                        unsigned __int8 v207 = v203[3];
                        unsigned __int8 v208 = v203[4];
                        __int16 v209 = *((_WORD *)v203 + 3);
                        __int16 v210 = *((_WORD *)v203 + 4);
                        __int16 v211 = (char)v203[20];
                        unsigned __int8 v212 = v203[21];
                        __int16 v213 = *((_WORD *)v203 + 11);
                        HIDWORD(v214) = *((_DWORD *)v203 + 6);
                        LODWORD(v214) = HIDWORD(v214);
                        int v215 = *((_DWORD *)v203 + 13);
                        int32x4_t v216 = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)(v203 + 28), *(int8x16_t *)(v203 + 28), 4uLL), *(int32x4_t *)(v203 + 28));
                        uint64_t v217 = *(void *)(v203 + 44);
                        uint64_t v218 = *(void *)(v203 + 12);
                        int8x16_t v219 = *(int8x16_t *)(v203 + 56);
                        *(_DWORD *)v313 = 0;
                        *(_WORD *)&v313[4] = v209;
                        v313[6] = v204;
                        v313[7] = v208;
                        *(_WORD *)&v313[8] = v213;
                        *(_WORD *)&v313[10] = v210;
                        *(int32x4_t *)&v313[12] = v216;
                        *(void *)&v313[28] = v217;
                        *(_DWORD *)&v313[36] = v215;
                        *(int8x16_t *)&v313[40] = vqtbl1q_s8(v219, (int8x16_t)xmmword_263D82EA0);
                        *(void *)&v313[56] = v218;
                        *(_WORD *)&v313[64] = v211;
                        *(_WORD *)&v313[66] = v210;
                        *(_DWORD *)&v313[68] = v214 >> 16;
                        LOBYTE(v314) = v207;
                        BYTE1(v314) = v205 & 1;
                        BYTE2(v314) = (v205 & 2) != 0;
                        HIBYTE(v314) = (v205 & 4) != 0;
                        LOBYTE(v315) = v206 & 3;
                        HIBYTE(v315) = (v206 >> 2) & 3;
                        LOBYTE(v316) = (v206 >> 4) & 3;
                        LOBYTE(v317) = 1;
                        HIBYTE(v316) = v212;
                        char v220 = GN_AGAL_Set_Eph_El((uint64_t)v313);
                        if (g_LbsOsaTrace_Config < 5) {
                          char v221 = 1;
                        }
                        else {
                          char v221 = v220;
                        }
                        if ((v221 & 1) == 0)
                        {
                          bzero(__str, 0x3C6uLL);
                          uint64_t v222 = mach_continuous_time();
                          snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx E BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v222), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 257, v313[6]);
                          gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                        }
                        v203 += 72;
                      }
                      while (v203 != v202);
                    }
                  }
                  else if (g_LbsOsaTrace_Config >= 5)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v223 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx E BCE data not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v223), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 769);
                    gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                  }
                  v298 = 0;
                  v299 = 0;
                  uint64_t v300 = 0;
                  if (XofSvcsIf::GetBdsBrdCstEphData((uint64_t)v284, (char **)&v298) == 1)
                  {
                    int v226 = (char *)v298;
                    std::string v225 = v299;
                    if (v299 == v298 || 0xF0F0F0F0F0F0F0F1 * ((v299 - (unsigned char *)v298) >> 3) > 0x3F)
                    {
                      if (g_LbsOsaTrace_Config >= 5)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v257 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx B BCE NumSats,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v257), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 514, 0xF0F0F0F0F0F0F0F1 * ((v299 - (unsigned char *)v298) >> 3));
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                    }
                    else
                    {
                      do
                      {
                        __int16 v227 = *((_WORD *)v226 + 1);
                        int v228 = *((_DWORD *)v226 + 1);
                        __int16 v229 = *((_WORD *)v226 + 4);
                        char v230 = v226[10];
                        __int16 v231 = *((_WORD *)v226 + 6);
                        char v232 = v226[14];
                        char v233 = v226[15];
                        __int16 v234 = *((_WORD *)v226 + 8);
                        __int16 v235 = *((_WORD *)v226 + 9);
                        __int16 v236 = *((_WORD *)v226 + 10);
                        uint64_t v237 = *((void *)v226 + 9);
                        int v238 = *((_DWORD *)v226 + 20);
                        __int16 v239 = *((_WORD *)v226 + 42);
                        __int16 v240 = *((_WORD *)v226 + 43);
                        __int16 v241 = *((_WORD *)v226 + 44);
                        __int16 v242 = *((_WORD *)v226 + 45);
                        __int16 v243 = *((_WORD *)v226 + 58);
                        char v244 = v226[126];
                        __int16 v245 = *((_WORD *)v226 + 64);
                        long long v246 = *(_OWORD *)(v226 + 40);
                        long long v247 = *(_OWORD *)(v226 + 56);
                        int16x4_t v248 = *(int16x4_t *)(v226 + 118);
                        long long v249 = *(_OWORD *)(v226 + 24);
                        int32x4_t v250 = vrev64q_s32(*(int32x4_t *)(v226 + 92));
                        uint64_t v251 = *(void *)(v226 + 108);
                        int v252 = *(_DWORD *)(v226 + 130);
                        *(_WORD *)v313 = *(_WORD *)v226;
                        *(_WORD *)&v313[2] = v236;
                        *(_DWORD *)&v313[4] = v228;
                        *(_WORD *)&v313[8] = v227;
                        *(_WORD *)&v313[10] = v235;
                        *(_WORD *)&v313[12] = v240;
                        *(_WORD *)&v313[14] = v245;
                        *(_OWORD *)&v313[16] = v249;
                        *(_OWORD *)&v313[32] = v246;
                        *(_OWORD *)&v313[48] = v247;
                        *(void *)&v313[64] = v237;
                        int v314 = v238;
                        __int16 v315 = v239;
                        __int16 v316 = v242;
                        __int16 v317 = v241;
                        int32x4_t v318 = v250;
                        uint64_t v319 = v251;
                        __int16 v320 = v243;
                        __int16 v321 = v234;
                        int v322 = v252;
                        char v329 = v244;
                        int16x4_t v323 = vzip2_s16(v248, (int16x4_t)vext_s8((int8x8_t)v248, (int8x8_t)v248, 4uLL));
                        __int16 v324 = v231;
                        char v325 = v232;
                        __int16 v326 = v229;
                        char v327 = v230;
                        char v328 = v233;
                        char v330 = 1;
                        char v253 = GN_ABDS_Set_CNAV_Eph_El(v313);
                        if (g_LbsOsaTrace_Config < 5) {
                          char v254 = 1;
                        }
                        else {
                          char v254 = v253;
                        }
                        if ((v254 & 1) == 0)
                        {
                          bzero(__str, 0x3C6uLL);
                          uint64_t v255 = mach_continuous_time();
                          snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx B BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v255), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 257, v313[0]);
                          gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                        }
                        v226 += 136;
                      }
                      while (v226 != v225);
                    }
                  }
                  else if (g_LbsOsaTrace_Config >= 5)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v256 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx B BCE data not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v256), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 769);
                    gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                  }
                  v295 = 0;
                  v296 = 0;
                  uint64_t v297 = 0;
                  if (XofSvcsIf::GetNavicBrdCstEphData((uint64_t)v284, (char **)&v295) == 1)
                  {
                    uint64_t v260 = (char *)v295;
                    long long v259 = v296;
                    if (v296 == v295 || 0xF0F0F0F0F0F0F0F1 * ((v296 - (unsigned char *)v295) >> 2) > 0xE)
                    {
                      if (g_LbsOsaTrace_Config >= 5)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v279 = mach_continuous_time();
                        snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx N BCE NumSats,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v279), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 514, 0xF0F0F0F0F0F0F0F1 * ((v296 - (unsigned char *)v295) >> 2));
                        gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                      }
                    }
                    else
                    {
                      do
                      {
                        __int16 v261 = *((_WORD *)v260 + 1);
                        __int16 v262 = *((_WORD *)v260 + 2);
                        char v263 = v260[10];
                        char v264 = v260[11];
                        int v265 = *((_DWORD *)v260 + 3);
                        __int16 v266 = *((_WORD *)v260 + 8);
                        char v267 = v260[18];
                        int v268 = *((_DWORD *)v260 + 5);
                        HIDWORD(v269) = *((_DWORD *)v260 + 14);
                        LODWORD(v269) = HIDWORD(v269);
                        long long v270 = *(_OWORD *)(v260 + 24);
                        long long v271 = *(_OWORD *)(v260 + 40);
                        int16x4_t v272 = *(int16x4_t *)(v260 + 60);
                        v258.i32[0] = *(_DWORD *)(v260 + 6);
                        uint16x8_t v273 = vmovl_u8(v258);
                        int16x8_t v274 = (int16x8_t)v273;
                        v274.i16[0] = v273.i16[3];
                        v274.i16[3] = v273.i16[0];
                        v313[0] = *v260;
                        *(_DWORD *)&v313[1] = vmovn_s16(v274).u32[0];
                        v313[5] = v264;
                        *(_WORD *)&v313[6] = v261;
                        *(_WORD *)&v313[8] = v262;
                        *(_WORD *)&v313[10] = v262;
                        *(_DWORD *)&v313[12] = v265;
                        *(_WORD *)&v313[16] = v266;
                        v313[18] = v267;
                        v313[19] = v263;
                        *(_DWORD *)&v313[20] = v268;
                        *(_OWORD *)&v313[24] = v270;
                        *(_OWORD *)&v313[40] = v271;
                        *(_DWORD *)&v313[56] = v269 >> 16;
                        *(int16x4_t *)&v313[60] = vrev64_s16(v272);
                        v313[68] = 1;
                        char v275 = GN_ANVIC_Set_Eph_El(v313);
                        if (g_LbsOsaTrace_Config < 5) {
                          char v276 = 1;
                        }
                        else {
                          char v276 = v275;
                        }
                        if ((v276 & 1) == 0)
                        {
                          bzero(__str, 0x3C6uLL);
                          uint64_t v277 = mach_continuous_time();
                          snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx N BCE SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v277), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 257, v313[0]);
                          gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                        }
                        v260 += 68;
                      }
                      while (v260 != v259);
                    }
                  }
                  else if (g_LbsOsaTrace_Config >= 5)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v278 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx N BCE data not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v278), "GNC", 68, "GncP24_58UpdateBrdCstEphAssist", 769);
                    gnssOsa_PrintLog((char *)__str, 5, 1, 0);
                  }
                  if (v295)
                  {
                    v296 = v295;
                    operator delete(v295);
                  }
                  if (v298)
                  {
                    v299 = (char *)v298;
                    operator delete(v298);
                  }
                  if (v301)
                  {
                    v302 = (char *)v301;
                    operator delete(v301);
                  }
                  if (v304)
                  {
                    v305 = v304;
                    operator delete(v304);
                  }
                  if (v307)
                  {
                    v308 = v307;
                    operator delete(v307);
                  }
                  if (v310)
                  {
                    v311 = v310;
                    operator delete(v310);
                  }
                  if (g_LbsOsaTrace_Config >= 4)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v280 = mach_continuous_time();
                    snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: BCEAgeCheckOK Gpstime,%llu,EEStartTime,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v280), "GNC", 73, "GncP24_55UpdateBceOrbitAssistance", v282, v281);
                    gnssOsa_PrintLog((char *)__str, 4, 1, 0);
                  }
                }
                g_BceOrbitDataInjected = 1;
                return;
              }
              bzero(__str, 0x3C6uLL);
              uint64_t v35 = mach_continuous_time();
              snprintf((char *)__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UTC DELTAlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 68, "GncP24_55UpdateBceOrbitAssistance", 772, v33);
              gnssOsa_PrintLog((char *)__str, 5, 1, 0);
            }
            unsigned int v34 = g_LbsOsaTrace_Config;
            goto LABEL_61;
          }
        }
      }
    }
  }
}

void sub_263CD6EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a43) {
    operator delete(a43);
  }
  char v46 = (void *)v44[3];
  if (v46)
  {
    v44[4] = v46;
    operator delete(v46);
  }
  char v47 = (void *)v44[6];
  if (v47)
  {
    v44[7] = v47;
    operator delete(v47);
  }
  uint64_t v48 = (void *)v44[9];
  if (v48)
  {
    v44[10] = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GncP24_GetXofInjectFileTime_GPS_Seconds(XofSvcsIf *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  unsigned int v7 = 0;
  Instance = XofSvcsIf::GetInstance(a1);
  int XofInjctTime = XofSvcsIf::GetXofInjctTime((uint64_t)Instance, (uint64_t)v6);
  uint64_t result = 0;
  if (XofInjctTime == 1)
  {
    if (v6[0] > 0xFFFu || v7 >= 0x93A81)
    {
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx XOF Inject time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP24_GetXofInjectFileTime_GPS_Seconds", 770);
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      return 0;
    }
    else
    {
      return v7 + 604800 * v6[0];
    }
  }
  return result;
}

uint64_t GncP24_60UpdateTimeMod(XofSvcsIf *a1)
{
  unsigned int v1 = a1;
  uint64_t v17 = *MEMORY[0x263EF8340];
  Instance = XofSvcsIf::GetInstance(a1);
  HIWORD(v15) = 0;
  *(void *)&long long v15 = 0;
  *(void *)((char *)&v15 + 5) = 0;
  int TimeModel = XofSvcsIf::GetTimeModel((uint64_t)Instance, v1, &v15);
  if (TimeModel == 7) {
    return 1;
  }
  int v4 = TimeModel;
  if (TimeModel == 1)
  {
    v9[0] = GncP24_51ConvertAGnssType(v1);
    v9[1] = 1000 * (unsigned __int16)v15;
    v9[2] = WORD1(v15);
    __int16 v13 = HIWORD(v15);
    uint64_t v10 = *(void *)((char *)&v15 + 4);
    char v11 = BYTE12(v15);
    char v12 = 127;
    uint64_t v14 = 0x100000001;
    uint64_t v5 = GN_AGNSS_Set_Time_Model((uint64_t)v9);
    if ((v5 & 1) == 0 && g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Time model ConstelType,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "GncP24_60UpdateTimeMod", 257, v1);
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx TimeModelCheckErrCode,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GncP24_60UpdateTimeMod", 770, v4);
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    return 0;
  }
  return v5;
}

uint64_t GN_EE_Get_GPS_Eph_El(XofSvcsIf *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (g_OrbitDataAvailable != 1) {
    return 0;
  }
  unsigned int v6 = a1;
  BOOL v8 = ((_BYTE)a1 - 33) < 0xE0u && ((_BYTE)a1 + 53) < 0xF6u;
  if (a2 > 0xFFF || a3 > 0x93A7F || v8 || !a4)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,TOW,%u,WeekNo,%u\n", v14, "GNC");
LABEL_25:
      int v17 = 5;
LABEL_26:
      gnssOsa_PrintLog(__str, v17, 1, 0);
    }
    return 0;
  }
  unsigned int v10 = ((_BYTE)a1 - 33);
  unint64_t v34 = 0xFFFF7FFF7FFF0000;
  memset(v33, 0, 15);
  LOWORD(v35[0]) = 0;
  *(_OWORD *)((char *)v35 + 4) = 0u;
  memset((char *)&v35[2] + 4, 0, 28);
  Instance = XofSvcsIf::GetInstance(a1);
  uint64_t v12 = (uint64_t)Instance;
  if (v10 < 0xE0)
  {
    if ((v6 + 63) >= 0xAu)
    {
LABEL_16:
      int v13 = 2;
      goto LABEL_29;
    }
    if (XofSvcsIf::GetQzssSvOrbData((uint64_t)Instance, a2 | (unint64_t)(a3 << 32), v6, (uint64_t)v33) == 1)
    {
      if (!BYTE1(v33[0])) {
        goto LABEL_16;
      }
LABEL_21:
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,Health,%u,WeekNo,%u,TOW,%u\n", v15, "GNC");
        goto LABEL_25;
      }
      return 0;
    }
LABEL_23:
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u\n", v16, "GNC");
      goto LABEL_25;
    }
    return 0;
  }
  if (XofSvcsIf::GetGpsSvOrbData((uint64_t)Instance, a2 | (unint64_t)(a3 << 32), v6, (uint64_t)v33) != 1) {
    goto LABEL_23;
  }
  if (BYTE1(v33[0])) {
    goto LABEL_21;
  }
  int v13 = 0;
LABEL_29:
  BlockLeuint64_t n = XofSvcsIf::GetBlockLen(v12, v13);
  __int16 v20 = WORD2(v33[0]);
  __int16 v21 = HIWORD(v33[0]);
  int64_t v22 = 604800 * a2 + a3 - (unint64_t)(604800 * WORD2(v33[0]) + 16 * HIWORD(v33[0]));
  if (v22 < 0) {
    int64_t v22 = 604800 * WORD2(v33[0])
  }
        + 16 * HIWORD(v33[0])
        - (unint64_t)(604800 * a2 + a3);
  if (v22 > 1800 * (unint64_t)BlockLen)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v23 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u,EE GpsWeek,%u,sTOC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 69, "GN_EE_Get_GPS_Eph_El", 770, v6, a2, a3, WORD2(v33[0]), HIWORD(v33[0]));
    int v17 = 1;
    goto LABEL_26;
  }
  *(unsigned char *)a4 = v33[0];
  *(unsigned char *)(a4 + 1) = 0;
  *(unsigned char *)(a4 + 2) = BYTE2(v33[0]) & ~(SBYTE2(v33[0]) >> 7);
  *(unsigned char *)(a4 + 3) = BYTE1(v33[0]);
  *(_WORD *)(a4 + 4) = 0;
  unint64_t v24 = llround((double)(__int16)v34 * 2.91038305e-11 * 2147483650.0);
  *(unsigned char *)(a4 + 6) = 0;
  if (v24 != (char)v24) {
    LOBYTE(v24) = 0;
  }
  *(unsigned char *)(a4 + 7) = v24;
  *(unsigned char *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 9) = BYTE6(v33[1]);
  *(_WORD *)(a4 + 10) = v20;
  *(_WORD *)(a4 + 12) = v21;
  *(_WORD *)(a4 + 14) = v21;
  int32x2_t v25 = (int32x2_t)v35[0];
  v25.i16[1] = WORD2(v33[1]);
  *(int32x2_t *)&long long v26 = vzip1_s32(v25, (int32x2_t)v35[4]);
  *((int16x4_t *)&v26 + 1) = vrev64_s16(*(int16x4_t *)((char *)&v35[4] + 4));
  HIDWORD(v27) = HIDWORD(v35[5]);
  LODWORD(v27) = HIDWORD(v35[5]);
  *(_OWORD *)(a4 + 16) = v26;
  int v28 = v33[1];
  *(_DWORD *)(a4 + 32) = v27 >> 16;
  *(_DWORD *)(a4 + 36) = v28;
  *(int32x4_t *)(a4 + 40) = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)v35 + 4), *(int8x16_t *)((char *)v35 + 4), 4uLL), *(int32x4_t *)((char *)v35 + 4));
  *(void *)(a4 + 56) = *(void *)((char *)&v35[2] + 4);
  *(_DWORD *)(a4 + 64) = HIDWORD(v35[3]);
  char v29 = BYTE6(v34);
  if (BYTE6(v34) == 255) {
    char v29 = 0;
  }
  *(unsigned char *)(a4 + 68) = v29;
  char v30 = HIBYTE(v34);
  if (HIBYTE(v34) == 255) {
    char v30 = 0;
  }
  *(unsigned char *)(a4 + 69) = v30;
  __int16 v31 = WORD1(v34);
  if (WORD1(v34) == 0x7FFF) {
    __int16 v31 = 0;
  }
  *(_WORD *)(a4 + 70) = v31;
  __int16 v32 = WORD2(v34);
  if (WORD2(v34) == 0x7FFF) {
    __int16 v32 = 0;
  }
  *(_WORD *)(a4 + 72) = v32;
  return 1;
}

uint64_t GN_EE_Get_GAL_Eph_El(XofSvcsIf *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (g_OrbitDataAvailable != 1) {
    return 0;
  }
  unsigned int v6 = a1;
  if (a2 <= 0xFFF && a3 <= 0x93A7F && ((_BYTE)a1 - 37) >= 0xDCu && a4)
  {
    unsigned __int16 v8 = a2 + 1024;
    Instance = XofSvcsIf::GetInstance(a1);
    int v25 = 0;
    int v23 = 0;
    char v24 = 0;
    long long v26 = 0u;
    int8x16_t v27 = 0u;
    memset(v28, 0, sizeof(v28));
    if (XofSvcsIf::GetGalSvOrbData((uint64_t)Instance, v8 | (unint64_t)(a3 << 32), v6, (uint64_t)&v23) == 1)
    {
      if (BYTE2(v23))
      {
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,SigHs,%u,WeekNo,%u,TOW,%u\n", v10, "GNC");
LABEL_14:
          int v13 = 5;
LABEL_15:
          gnssOsa_PrintLog(__str, v13, 1, 0);
        }
      }
      else
      {
        BlockLeuint64_t n = XofSvcsIf::GetBlockLen((uint64_t)Instance, 3);
        __int16 v16 = v25;
        __int16 v17 = HIWORD(v25);
        int64_t v18 = 604800 * a2
            + a3
            - (unint64_t)(604800 * (unsigned __int16)v25 + 60 * HIWORD(v25));
        if (v18 < 0) {
          int64_t v18 = 604800 * (unsigned __int16)v25
        }
              + 60 * HIWORD(v25)
              - (unint64_t)(604800 * a2 + a3);
        if (v18 <= 1800 * (unint64_t)BlockLen)
        {
          *(_DWORD *)a4 = a3;
          *(_WORD *)(a4 + 4) = v16;
          *(unsigned char *)(a4 + 6) = v23;
          *(unsigned char *)(a4 + 7) = v24;
          *(_WORD *)(a4 + 8) = WORD5(v26);
          *(_WORD *)(a4 + 10) = v17;
          *(int32x4_t *)(a4 + 12) = vuzp2q_s32((int32x4_t)vextq_s8(v27, v27, 4uLL), (int32x4_t)v27);
          *(void *)(a4 + 28) = *(void *)v28;
          *(_DWORD *)(a4 + 36) = *(_DWORD *)&v28[8];
          *(int8x16_t *)(a4 + 40) = vqtbl1q_s8(*(int8x16_t *)&v28[12], (int8x16_t)xmmword_263D82EA0);
          *(void *)(a4 + 56) = v26;
          *(_WORD *)(a4 + 64) = SBYTE8(v26);
          *(_WORD *)(a4 + 66) = v17;
          HIDWORD(v20) = HIDWORD(v26);
          LODWORD(v20) = HIDWORD(v26);
          *(_DWORD *)(a4 + 68) = v20 >> 16;
          *(unsigned char *)(a4 + 72) = HIBYTE(v23);
          char v21 = BYTE1(v23);
          *(unsigned char *)(a4 + 73) = BYTE1(v23) & 1;
          *(unsigned char *)(a4 + 74) = (v21 & 2) != 0;
          *(unsigned char *)(a4 + 75) = (v21 & 4) != 0;
          unsigned int v22 = BYTE2(v23);
          *(unsigned char *)(a4 + 76) = BYTE2(v23) & 3;
          *(unsigned char *)(a4 + 77) = (v22 >> 2) & 3;
          *(unsigned char *)(a4 + 78) = (v22 >> 4) & 3;
          uint64_t result = 1;
          *(unsigned char *)(a4 + 79) = BYTE9(v26);
          return result;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v19 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u,EE GalWeek,%u,TOE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 69, "GN_EE_Get_GAL_Eph_El", 770, v6, a2, a3, (unsigned __int16)v25, HIWORD(v25));
          int v13 = 1;
          goto LABEL_15;
        }
      }
    }
    else if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u\n", v12, "GNC");
      goto LABEL_14;
    }
  }
  else if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,TOW,%u,WeekNo,%u\n", v11, "GNC");
    goto LABEL_14;
  }
  return 0;
}

uint64_t GN_EE_Get_BDS_CNAV_Eph_El(XofSvcsIf *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (g_OrbitDataAvailable != 1) {
    return 0;
  }
  unsigned int v6 = a1;
  if (a2 <= 0xFFF && a3 <= 0x93A7F && ((_BYTE)a1 - 64) >= 0xC1u && a4)
  {
    unsigned int v8 = a2 + 1356;
    Instance = XofSvcsIf::GetInstance(a1);
    memset(v23, 0, 22);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    memset(v28, 0, 39);
    memset(&v28[2].u64[1], 0, 6);
    if (XofSvcsIf::GetBdsSvOrbData((uint64_t)Instance, (unsigned __int16)v8 | (unint64_t)(a3 << 32), v6, (uint64_t)v23) == 1)
    {
      if (BYTE1(v23[0]))
      {
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,Health,%u,WeekNo,%u,TOW,%u\n", v10, "GNC");
LABEL_14:
          int v13 = 5;
LABEL_15:
          gnssOsa_PrintLog(__str, v13, 1, 0);
        }
      }
      else
      {
        BlockLeuint64_t n = XofSvcsIf::GetBlockLen((uint64_t)Instance, 5);
        __int16 v16 = WORD1(v23[0]);
        __int16 v17 = WORD1(v23[2]);
        int v18 = 300 * WORD1(v23[2]) + 604800 * WORD1(v23[0]) + 820108800;
        uint64_t v19 = 604800 * v8 + a3 - (uint64_t)v18;
        if (v19 < 0) {
          uint64_t v19 = v18 - (unint64_t)(604800 * v8 + a3);
        }
        if (v19 <= 1800 * (unint64_t)BlockLen)
        {
          *(_WORD *)a4 = v23[0];
          *(_WORD *)(a4 + 2) = WORD2(v23[2]);
          *(_DWORD *)(a4 + 4) = HIDWORD(v23[0]);
          *(_WORD *)(a4 + 8) = v16;
          *(_WORD *)(a4 + 10) = v17;
          *(_WORD *)(a4 + 12) = HIWORD(v27);
          *(_WORD *)(a4 + 14) = v28[2].i16[4];
          long long v21 = v25;
          *(_OWORD *)(a4 + 16) = v24;
          *(_OWORD *)(a4 + 32) = v21;
          *(_OWORD *)(a4 + 48) = v26;
          *(void *)(a4 + 64) = v27;
          *(_DWORD *)(a4 + 72) = DWORD2(v27);
          HIDWORD(v22) = v28[0].i32[0];
          LODWORD(v22) = v28[0].i32[0];
          *(_WORD *)(a4 + 76) = WORD6(v27);
          *(_DWORD *)(a4 + 78) = v22 >> 16;
          *(int32x4_t *)(a4 + 84) = vrev64q_s32(*(int32x4_t *)((char *)v28 + 4));
          *(void *)(a4 + 100) = *(uint64_t *)((char *)v28[1].i64 + 4);
          *(_WORD *)(a4 + 108) = v28[1].i16[6];
          *(_WORD *)(a4 + 110) = v23[2];
          *(_DWORD *)(a4 + 112) = *(__int32 *)((char *)&v28[2].i32[2] + 2);
          *(unsigned char *)(a4 + 131) = v28[2].i8[6];
          *(int16x4_t *)(a4 + 116) = vzip2_s16(*(int16x4_t *)((char *)&v28[1].u64[1] + 6), (int16x4_t)vext_s8(*(int8x8_t *)((char *)&v28[1].u64[1] + 6), *(int8x8_t *)((char *)&v28[1].u64[1] + 6), 4uLL));
          *(unsigned char *)(a4 + 124) = BYTE4(v23[1]);
          *(_WORD *)(a4 + 125) = *(_WORD *)((char *)&v23[1] + 5);
          *(unsigned char *)(a4 + 127) = v23[1];
          *(_WORD *)(a4 + 128) = *(_WORD *)((char *)&v23[1] + 1);
          uint64_t result = 1;
          *(unsigned char *)(a4 + 130) = HIBYTE(v23[1]);
          return result;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v20 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u,EE BdsWeek,%u,TOE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 69, "GN_EE_Get_BDS_CNAV_Eph_El", 770, v6, a2, a3, WORD1(v23[0]), WORD1(v23[2]));
          int v13 = 1;
          goto LABEL_15;
        }
      }
    }
    else if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u\n", v12, "GNC");
      goto LABEL_14;
    }
  }
  else if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,TOW,%u,WeekNo,%u\n", v11, "GNC");
    goto LABEL_14;
  }
  return 0;
}

uint64_t GN_EE_Get_GLON_GPS_Eph_El(XofSvcsIf *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (g_OrbitDataAvailable != 1) {
    return 0;
  }
  unsigned int v6 = a1;
  if (a2 > 0xFFF || a3 > 0x93A7F || ((_BYTE)a1 - 25) < 0xE8u || !a4)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,TOW,%u,WeekNo,%u\n", v10, "GNC");
      goto LABEL_14;
    }
    return 0;
  }
  Instance = XofSvcsIf::GetInstance(a1);
  unint64_t v29 = 0xFFFF7FFF7FFF0000;
  memset(v28, 0, 15);
  LOWORD(v30[0]) = 0;
  *(_OWORD *)((char *)v30 + 4) = 0u;
  memset((char *)&v30[2] + 4, 0, 28);
  if (XofSvcsIf::GetGloSvOrbData((uint64_t)Instance, a2 | (unint64_t)(a3 << 32), v6, (uint64_t)v28) != 1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u\n", v11, "GNC");
      goto LABEL_14;
    }
    return 0;
  }
  if (BYTE1(v28[0]))
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,Health,%u,WeekNo,%u,TOW,%u\n", v9, "GNC");
LABEL_14:
      int v12 = 5;
LABEL_15:
      gnssOsa_PrintLog(__str, v12, 1, 0);
      return 0;
    }
    return 0;
  }
  BlockLeuint64_t n = XofSvcsIf::GetBlockLen((uint64_t)Instance, 4);
  __int16 v15 = WORD2(v28[0]);
  __int16 v16 = HIWORD(v28[0]);
  int64_t v17 = 604800 * a2 + a3 - (unint64_t)(604800 * WORD2(v28[0]) + 16 * HIWORD(v28[0]));
  if (v17 < 0) {
    int64_t v17 = 604800 * WORD2(v28[0])
  }
        + 16 * HIWORD(v28[0])
        - (unint64_t)(604800 * a2 + a3);
  if (v17 > 1800 * (unint64_t)BlockLen)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v18 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u,EE GpsWeek,%u,sTOC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 69, "GN_EE_Get_GLON_GPS_Eph_El", 770, v6, a2, a3, WORD2(v28[0]), HIWORD(v28[0]));
    int v12 = 1;
    goto LABEL_15;
  }
  *(unsigned char *)a4 = v28[0];
  *(unsigned char *)(a4 + 1) = 0;
  *(unsigned char *)(a4 + 2) = BYTE2(v28[0]) & ~(SBYTE2(v28[0]) >> 7);
  *(unsigned char *)(a4 + 3) = BYTE1(v28[0]);
  *(_WORD *)(a4 + 4) = 0;
  unint64_t v19 = llround((double)(__int16)v29 * 2.91038305e-11 * 2147483650.0);
  *(unsigned char *)(a4 + 6) = 0;
  if (v19 != (char)v19) {
    LOBYTE(v19) = 0;
  }
  *(unsigned char *)(a4 + 7) = v19;
  *(unsigned char *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 9) = BYTE6(v28[1]);
  *(_WORD *)(a4 + 10) = v15;
  *(_WORD *)(a4 + 12) = v16;
  *(_WORD *)(a4 + 14) = v16;
  int32x2_t v20 = (int32x2_t)v30[0];
  v20.i16[1] = WORD2(v28[1]);
  *(int32x2_t *)&long long v21 = vzip1_s32(v20, (int32x2_t)v30[4]);
  *((int16x4_t *)&v21 + 1) = vrev64_s16(*(int16x4_t *)((char *)&v30[4] + 4));
  HIDWORD(v22) = HIDWORD(v30[5]);
  LODWORD(v22) = HIDWORD(v30[5]);
  *(_OWORD *)(a4 + 16) = v21;
  int v23 = v28[1];
  *(_DWORD *)(a4 + 32) = v22 >> 16;
  *(_DWORD *)(a4 + 36) = v23;
  *(int32x4_t *)(a4 + 40) = vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)((char *)v30 + 4), *(int8x16_t *)((char *)v30 + 4), 4uLL), *(int32x4_t *)((char *)v30 + 4));
  *(void *)(a4 + 56) = *(void *)((char *)&v30[2] + 4);
  *(_DWORD *)(a4 + 64) = HIDWORD(v30[3]);
  char v24 = BYTE6(v29);
  if (BYTE6(v29) == 255) {
    char v24 = 0;
  }
  *(unsigned char *)(a4 + 68) = v24;
  char v25 = HIBYTE(v29);
  if (HIBYTE(v29) == 255) {
    char v25 = 0;
  }
  *(unsigned char *)(a4 + 69) = v25;
  __int16 v26 = WORD1(v29);
  if (WORD1(v29) == 0x7FFF) {
    __int16 v26 = 0;
  }
  *(_WORD *)(a4 + 70) = v26;
  __int16 v27 = WORD2(v29);
  if (WORD2(v29) == 0x7FFF) {
    __int16 v27 = 0;
  }
  *(_WORD *)(a4 + 72) = v27;
  return 1;
}

uint64_t GN_EE_Get_NVIC_Eph_El(XofSvcsIf *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (g_OrbitDataAvailable != 1) {
    return 0;
  }
  unsigned int v6 = a1;
  if (a2 <= 0xFFF && a3 <= 0x93A7F && ((_BYTE)a1 - 15) >= 0xF2u && a4)
  {
    unsigned int v8 = a2 + 1024;
    Instance = XofSvcsIf::GetInstance(a1);
    v25[0] = 0;
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    char v28 = 0;
    memset(v29, 0, sizeof(v29));
    if (XofSvcsIf::GetNavicSvOrbData((uint64_t)Instance, (unsigned __int16)v8 | (unint64_t)(a3 << 32), v6, (uint64_t)v25) == 1)
    {
      if (BYTE5(v26))
      {
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,Health,%u,WeekNo,%u,TOW,%u\n", v10, "GNC");
LABEL_14:
          int v13 = 5;
LABEL_15:
          gnssOsa_PrintLog(__str, v13, 1, 0);
        }
      }
      else
      {
        BlockLeuint64_t n = XofSvcsIf::GetBlockLen((uint64_t)Instance, 5);
        __int16 v17 = v26;
        __int16 v18 = WORD1(v26);
        int v19 = 604800 * (unsigned __int16)v26 + 16 * WORD1(v26) + 619315200;
        uint64_t v20 = a3 + 604800 * v8 - (uint64_t)v19;
        if (v20 < 0) {
          uint64_t v20 = v19 - (unint64_t)(a3 + 604800 * v8);
        }
        if (v20 <= 1800 * (unint64_t)BlockLen)
        {
          *(unsigned char *)a4 = v25[0];
          v16.i32[0] = HIDWORD(v26);
          uint16x8_t v22 = vmovl_u8(v16);
          int16x8_t v23 = (int16x8_t)v22;
          v23.i16[0] = v22.i16[3];
          v23.i16[3] = v22.i16[0];
          *(_DWORD *)(a4 + 1) = vmovn_s16(v23).u32[0];
          *(unsigned char *)(a4 + 5) = BYTE1(v27);
          *(_WORD *)(a4 + 6) = v17;
          *(_WORD *)(a4 + 8) = v18;
          *(_WORD *)(a4 + 10) = v18;
          *(_DWORD *)(a4 + 12) = *(_DWORD *)((char *)&v27 + 2);
          *(_WORD *)(a4 + 16) = HIWORD(v27);
          *(unsigned char *)(a4 + 18) = v28;
          *(unsigned char *)(a4 + 19) = v27;
          *(_DWORD *)(a4 + 20) = v29[0];
          *(_OWORD *)(a4 + 24) = *(_OWORD *)((char *)v29 + 4);
          HIDWORD(v24) = DWORD1(v29[2]);
          LODWORD(v24) = DWORD1(v29[2]);
          *(_OWORD *)(a4 + 40) = *(_OWORD *)((char *)&v29[1] + 4);
          *(_DWORD *)(a4 + 56) = v24 >> 16;
          *(int16x4_t *)(a4 + 60) = vrev64_s16(*(int16x4_t *)((char *)&v29[2] + 8));
          return 1;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v21 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u,EE BdsWeek,%u,TOE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 69, "GN_EE_Get_NVIC_Eph_El", 770, v6, a2, a3, (unsigned __int16)v26, WORD1(v26));
          int v13 = 1;
          goto LABEL_15;
        }
      }
    }
    else if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,WeekNo,%u,TOW,%u\n", v12, "GNC");
      goto LABEL_14;
    }
  }
  else if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SV,%u,TOW,%u,WeekNo,%u\n", v11, "GNC");
    goto LABEL_14;
  }
  return 0;
}

uint64_t GncP24_50HandleEeDataInd(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  int v54 = 0;
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EEDATA_IND Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP24_50HandleEeDataInd", *(_DWORD *)(a1 + 16));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    __int16 v3 = *(char **)(a1 + 24);
    if (v3)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v52 = *(_DWORD *)(a1 + 12);
      int v53 = v4;
      unsigned __int8 v55 = 0;
      long long v56 = 0uLL;
      if (v4 != 2)
      {
        if (v4 != 1)
        {
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v35 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EeType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 68, "GncP24_50HandleEeDataInd", 770, *(_DWORD *)(a1 + 16));
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
          goto LABEL_95;
        }
        v50[0] = 0;
        long long v51 = 0uLL;
        size_t v5 = *(unsigned int *)(a1 + 32);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v6 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Processing XOF Data Start\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP24_11HandleOrbitDataInd");
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        if (!v5)
        {
          unsigned int v36 = g_LbsOsaTrace_Config;
          if (g_LbsOsaTrace_Config < 5) {
            goto LABEL_81;
          }
          bzero(__str, 0x3C6uLL);
          uint64_t v37 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx DataLen,0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNC", 68, "GncP24_11HandleOrbitDataInd", 515);
          gnssOsa_PrintLog(__str, 5, 1, 0);
LABEL_80:
          unsigned int v36 = g_LbsOsaTrace_Config;
LABEL_81:
          if (v36 >= 3)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v45 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:API_STATUS =>EeCB,Api,%u,Id,%u,Status,%u,DataIntValid,%u,StartGpsSecs,%llu,EndGpsSecs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "GNC", 77, "GncP24_50HandleEeDataInd", v53, v52, v54, v55, (void)v56, *((void *)&v56 + 1));
            gnssOsa_PrintLog(__str, 3, 1, 0);
          }
LABEL_94:
          g_GnsEeCallback(0, 40, &v52);
LABEL_95:
          uint64_t v48 = *(void **)(a1 + 24);
          if (v48) {
            free(v48);
          }
          *(void *)(a1 + 24) = 0;
          return 0;
        }
        Instance = XofSvcsIf::GetInstance((XofSvcsIf *)a1);
        std::string __p = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&__p, v3, &v3[v5], v5);
        unsigned __int16 v59 = 0;
        if (XofSvcsIf::DecodeXofFormatVersion((uint64_t)Instance, &__p, &v59) == 1)
        {
          if (v59 == 3)
          {
            unsigned int v8 = &word_26A9A1958;
            if (!byte_26A9A1956) {
              unsigned int v8 = &word_26A9A195A;
            }
            __int16 v9 = *v8;
            unsigned int v10 = (unsigned __int16)(v9 - 6145) >> 10;
            unsigned __int16 v11 = v9 - 1;
            if (v10 < 0x3B) {
              unsigned __int16 v11 = 0;
            }
            if (XofSvcsIf::InjectXofData((uint64_t)Instance, (uint64_t)&__p, (uint64_t)v50, v11) == 1)
            {
              g_OrbitDataAvailable = 1;
              g_BceOrbitDataInjected = 0;
              v63[0] = 0;
              unsigned int v64 = 0;
              XofSvcsIf::GetXofInjctTime((uint64_t)Instance, (uint64_t)v63);
              if (XofSvcsIf::GetXofInjctTime((uint64_t)Instance, (uint64_t)v63) == 1)
              {
                char v12 = GN_GPS_Set_XOF_Time(v63[0], v64);
                char v13 = g_LbsOsaTrace_Config < 5 ? 1 : v12;
                if ((v13 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v14 = mach_continuous_time();
                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx XofFlCrtTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GncP24_11HandleOrbitDataInd", 257);
                  gnssOsa_PrintLog(__str, 5, 1, 0);
                }
              }
              v57[0] = 0;
              unsigned int v58 = 0;
              if (XofSvcsIf::GetXofExtEphStartTime((uint64_t)Instance, (uint64_t)v57) == 1)
              {
                char started = GN_GPS_Set_EE_Start_Time(v57[0], v58);
                char v16 = g_LbsOsaTrace_Config < 5 ? 1 : started;
                if ((v16 & 1) == 0)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v17 = mach_continuous_time();
                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx XofEEStartTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GncP24_11HandleOrbitDataInd", 257);
                  gnssOsa_PrintLog(__str, 5, 1, 0);
                }
              }
              GncP24_55UpdateBceOrbitAssistance((XofSvcsIf *)1);
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v18 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Processing XOF Data Ends\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 73, "GncP24_11HandleOrbitDataInd");
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
              int v19 = 1;
              goto LABEL_76;
            }
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v44 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx XOF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 68, "GncP24_11HandleOrbitDataInd", 515);
              gnssOsa_PrintLog(__str, 5, 1, 0);
            }
          }
          else if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v42 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx XOF format is unknown!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNC", 68, "GncP24_11HandleOrbitDataInd", 515);
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        else if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v40 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx XOF format version is invalid!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNC", 68, "GncP24_11HandleOrbitDataInd", 515);
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        int v19 = 0;
LABEL_76:
        if (__p)
        {
          uint64_t v61 = __p;
          operator delete(__p);
        }
        if (v19)
        {
          int v54 = 1;
          unsigned __int8 v55 = v50[0];
          long long v56 = v51;
        }
        goto LABEL_80;
      }
      v50[0] = 0;
      long long v51 = 0uLL;
      size_t v22 = *(unsigned int *)(a1 + 32);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v23 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Processing RTI Data Start\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 73, "GncP24_12HandleRtiInd");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if (!v22)
      {
        unsigned int v38 = g_LbsOsaTrace_Config;
        if (g_LbsOsaTrace_Config < 5) {
          goto LABEL_92;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v39 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx DataLen\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNC", 68, "GncP24_12HandleRtiInd", 515);
        gnssOsa_PrintLog(__str, 5, 1, 0);
LABEL_91:
        unsigned int v38 = g_LbsOsaTrace_Config;
LABEL_92:
        if (v38 >= 3)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v47 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:API_STATUS =>EeCB,Api,%u,Id,%u,Status,%u,DataIntValid,%u,StartGpsSecs,%llu,EndGpsSecs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "GNC", 77, "GncP24_50HandleEeDataInd", v53, v52, v54, v55, (void)v56, *((void *)&v56 + 1));
          gnssOsa_PrintLog(__str, 3, 1, 0);
        }
        goto LABEL_94;
      }
      unint64_t v24 = XofSvcsIf::GetInstance((XofSvcsIf *)a1);
      std::string __p = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&__p, v3, &v3[v22], v22);
      unsigned __int16 v59 = 0;
      if (XofSvcsIf::DecodeRtiFormatVersion((uint64_t)v24, &__p, &v59) == 1)
      {
        if (v59 == 3)
        {
          char v25 = &word_26A9A1958;
          if (!byte_26A9A1956) {
            char v25 = &word_26A9A195A;
          }
          __int16 v26 = *v25;
          unsigned int v27 = (unsigned __int16)(v26 - 6145) >> 10;
          unsigned __int16 v28 = v26 - 1;
          if (v27 < 0x3B) {
            unsigned __int16 v28 = 0;
          }
          if (XofSvcsIf::InjectRtiData((uint64_t)v24, &__p, (uint64_t)v50, v28) == 1)
          {
            v57[0] = 0;
            unsigned int v58 = 0;
            uint64_t RtiInjctTime = XofSvcsIf::GetRtiInjctTime((uint64_t)v24, (uint64_t)v57);
            if (RtiInjctTime == 1)
            {
              uint64_t RtiInjctTime = GN_GPS_Set_RTI_Time(v57[0], v58);
              char v30 = g_LbsOsaTrace_Config < 5 ? 1 : RtiInjctTime;
              if ((v30 & 1) == 0)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v31 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RtiFlCrtTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 68, "GncP24_12HandleRtiInd", 257);
                gnssOsa_PrintLog(__str, 5, 1, 0);
              }
            }
            *(_WORD *)long long __str = 0;
            int v66 = 0;
            v63[0] = 0;
            unsigned int v64 = 0;
            uint64_t v32 = XofSvcsIf::GetInstance((XofSvcsIf *)RtiInjctTime);
            if (XofSvcsIf::GetRtiInjctTime((uint64_t)v32, (uint64_t)__str) != 1
              || XofSvcsIf::GetXofInjctTime((uint64_t)v32, (uint64_t)v63) != 1
              || v66 + 604800 * *(unsigned __int16 *)__str >= v64 + 604800 * v63[0])
            {
              GncP24_14UpdateRtiAssistDoNotUseSV(0);
              GncP24_14UpdateRtiAssistDoNotUseSV((XofSvcsIf *)1);
            }
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v33 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Processing RTI-3 Data Ends\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNC", 73, "GncP24_12HandleRtiInd");
              gnssOsa_PrintLog(__str, 4, 1, 0);
            }
            int v34 = 1;
            goto LABEL_87;
          }
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v46 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RTI-3\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 68, "GncP24_12HandleRtiInd", 515);
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
        else if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v43 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RTI format is unknown!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "GNC", 68, "GncP24_12HandleRtiInd", 515);
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
      else if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v41 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RTI format version is invalid!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "GNC", 68, "GncP24_12HandleRtiInd", 515);
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      int v34 = 0;
LABEL_87:
      if (__p)
      {
        uint64_t v61 = __p;
        operator delete(__p);
      }
      if (v34)
      {
        int v54 = 1;
        unsigned __int8 v55 = v50[0];
        *(void *)&long long v56 = v51;
      }
      goto LABEL_91;
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v21 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EE Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 68, "GncP24_50HandleEeDataInd", 769);
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v20 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 69, "GncP24_50HandleEeDataInd", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void sub_263CD9620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GncP24_49HandleEeCbInit(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP24_49HandleEeCbInit", 517);
    int v5 = 1;
LABEL_8:
    gnssOsa_PrintLog(__str, v5, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EE_CB_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP24_49HandleEeCbInit");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  __int16 v3 = *(uint64_t (**)(void, void, void))(a1 + 16);
  if (v3) {
    goto LABEL_5;
  }
  if (!g_GnsEeCallback)
  {
    if (g_LbsOsaTrace_Config < 5) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP24_49HandleEeCbInit", 513);
    int v5 = 5;
    goto LABEL_8;
  }
  if (g_LbsOsaTrace_Config < 4)
  {
    __int16 v3 = 0;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP24_49HandleEeCbInit", 513);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    __int16 v3 = *(uint64_t (**)(void, void, void))(a1 + 16);
  }
LABEL_5:
  g_GnsEeCallbacuint64_t k = v3;
  return 0;
}

uint64_t GNS_EeInitialize(uint64_t a1)
{
  uint64_t v2 = gnssOsa_Calloc("GNS_EeInitialize", 2828, 1, 0x18uLL);
  if (!v2) {
    return 6;
  }
  v2[2] = a1;
  AgpsSendFsmMsg(132, 132, 8658435, v2);
  return 1;
}

uint64_t GNS_EeInjectOrbitData(int a1, signed __int8 *a2, size_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "GNS_EeInjectOrbitData");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 5) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ORB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GNS_EeInjectOrbitData", 513);
    gnssOsa_PrintLog(__str, 5, 1, 0);
    if (g_LbsOsaTrace_Config < 5) {
      return 2;
    }
LABEL_10:
    bzero(__str, 0x3C6uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v9, "GNC", 68, "GNS_EeInjectOrbitData");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    return 2;
  }
  if ((a3 - 583897) < 0xFFF717A7)
  {
    if (g_LbsOsaTrace_Config < 5) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ORBLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GNS_EeInjectOrbitData", 514, a3);
    gnssOsa_PrintLog(__str, 5, 1, 0);
    if (g_LbsOsaTrace_Config < 5) {
      return 2;
    }
    goto LABEL_10;
  }
  unsigned __int16 v11 = gnssOsa_Calloc("GNS_EeInjectOrbitData", 2878, 1, 0x28uLL);
  if (v11)
  {
    char v12 = v11;
    char v13 = gnssOsa_Calloc("GNS_EeInjectOrbitData", 2886, a3, 1uLL);
    v12[3] = v13;
    if (v13)
    {
      memcpy_s("GNS_EeInjectOrbitData", 2895, v13, a3, a2, a3);
      *((_DWORD *)v12 + 8) = a3;
      *((_DWORD *)v12 + 3) = a1;
      *((_DWORD *)v12 + 4) = 1;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v14 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EEDATA_IND =>GNC,ORB,DataLen,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 73, "GNS_EeInjectOrbitData", *((_DWORD *)v12 + 8), *((_DWORD *)v12 + 3));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8651011, v12);
      if (g_LbsOsaTrace_Config < 5) {
        return 1;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "GNS_EeInjectOrbitData");
      uint64_t v10 = 1;
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v10;
    }
    free(v12);
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v16 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 68, "GNS_EeInjectOrbitData");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EeInjectRtiData(int a1, signed __int8 *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "GNS_EeInjectRtiData");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RTI\n");
      goto LABEL_15;
    }
    return 2;
  }
  if (a3 != 128)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RTILen,%d\n", v16);
LABEL_15:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "GNS_EeInjectRtiData");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      return 2;
    }
    return 2;
  }
  uint64_t v7 = gnssOsa_Calloc("GNS_EeInjectRtiData", 2946, 1, 0x28uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = gnssOsa_Calloc("GNS_EeInjectRtiData", 2954, 128, 1uLL);
    void v8[3] = v9;
    if (v9)
    {
      memcpy_s("GNS_EeInjectRtiData", 2963, v9, 0x80u, a2, 0x80uLL);
      *((_DWORD *)v8 + 8) = 128;
      *((_DWORD *)v8 + 3) = a1;
      *((_DWORD *)v8 + 4) = 2;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EEDATA_IND =>GNC,RTI,DataLen,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GNS_EeInjectRtiData", *((_DWORD *)v8 + 8), *((_DWORD *)v8 + 3));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8651011, v8);
      if (g_LbsOsaTrace_Config < 5) {
        return 1;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 68, "GNS_EeInjectRtiData");
      uint64_t v12 = 1;
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v12;
    }
    free(v8);
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EeInjectRtiData");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

void GncP24_63UpdateXofAssistDoNotUseSV(XofSvcsIf *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned __int8 v11 = 0;
  bzero(v14, 0x3FCuLL);
  memset(v13, 0, 255);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Updating Bad SV List from XOF for Signal Band Group %d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP24_63UpdateXofAssistDoNotUseSV", a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if ((GncP24_64UpdateXofBadSvList(a1, 0, 1, 32, (uint64_t)v14, (uint64_t)v13, &v11) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_64UpdateXofBadSvList(a1, 1u, 120, 39, (uint64_t)v14, (uint64_t)v13, &v11) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SBAS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_64UpdateXofBadSvList(a1, 2u, 193, 10, (uint64_t)v14, (uint64_t)v13, &v11) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx QZSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_64UpdateXofBadSvList(a1, 3u, 1, 36, (uint64_t)v14, (uint64_t)v13, &v11) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GAL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_64UpdateXofBadSvList(a1, 4u, 1, 24, (uint64_t)v14, (uint64_t)v13, &v11) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_64UpdateXofBadSvList(a1, 5u, 1, 63, (uint64_t)v14, (uint64_t)v13, &v11) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx BDS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_64UpdateXofBadSvList(a1, 6u, 1, 14, (uint64_t)v14, (uint64_t)v13, &v11) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NavIC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GN_GPS_Set_RTI_Bad_SV_List((int)a1, v11, v14, v13) & 1) == 0 && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RTI data %d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 68, "GncP24_63UpdateXofAssistDoNotUseSV", 257, a1);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

uint64_t GncP24_64UpdateXofBadSvList(XofSvcsIf *a1, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a5 && a6 && a7 && *a7 != 255)
  {
    int v13 = (int)a1;
    long long v23 = 0uLL;
    Instance = XofSvcsIf::GetInstance(a1);
    if (XofSvcsIf::GetXofDoNotUseSvBitMask((uint64_t)Instance, a2, &v23) != 1)
    {
      if (g_LbsOsaTrace_Config < 5) {
        return 0;
      }
      bzero(__str, 0x3C6uLL);
      unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Constel,%d\n", v20);
      goto LABEL_11;
    }
    if (v13 == 1)
    {
      unint64_t v15 = *((void *)&v23 + 1);
    }
    else
    {
      if (v13)
      {
        if (g_LbsOsaTrace_Config < 5) {
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Signal Band,%d\n", v22);
        goto LABEL_11;
      }
      unint64_t v15 = v23;
    }
    int v17 = Gncp24_56ConvertGnssType(a2);
    uint64_t v18 = 0;
    unsigned __int8 v19 = *a7;
    while (v19 != 0xFF)
    {
      if ((v15 >> v18))
      {
        *(_DWORD *)(a5 + 4 * v19) = v17;
        *(unsigned char *)(a6 + *a7) = v18 + a3;
        unsigned __int8 v19 = *a7 + 1;
        *a7 = v19;
      }
      if (a4 == ++v18) {
        return 1;
      }
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx BadSvCnt,%u\n", v21);
      goto LABEL_11;
    }
  }
  else if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
LABEL_11:
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 0;
}

uint64_t Gncp24_56ConvertGnssType(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1 < 7) {
    return dword_263D82EB0[a1];
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ConstType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "Gncp24_56ConvertGnssType", 770, a1);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 0;
}

uint64_t GncP24_51ConvertAGnssType(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1 < 7) {
    return dword_263D82ECC[a1];
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ConstType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP24_51ConvertAGnssType", 770, a1);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 0;
}

void GncP24_18UpdtXofAssistNotBrdSv(XofSvcsIf *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned __int8 v10 = 0;
  bzero(v12, 0x4FBuLL);
  if ((GncP24_16XofGetNotBrdCstSvs(a1, 0, 1, 0x20u, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_16XofGetNotBrdCstSvs(a1, 1u, 120, 0x27u, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SBAS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_16XofGetNotBrdCstSvs(a1, 2u, 193, 0xAu, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx QZSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_16XofGetNotBrdCstSvs(a1, 3u, 1, 0x24u, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GAL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_16XofGetNotBrdCstSvs(a1, 4u, 1, 0x18u, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_16XofGetNotBrdCstSvs(a1, 5u, 1, 0x3Fu, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx BDS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_16XofGetNotBrdCstSvs(a1, 6u, 1, 0xEu, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NavIC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GN_AGNSS_Set_Not_Brd_SV_List((int)a1, v10, v12, v13) & 1) == 0 && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NotBrd SV list for GNSS Signal Band %d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GncP24_18UpdtXofAssistNotBrdSv", 257, a1);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

uint64_t GncP24_16XofGetNotBrdCstSvs(XofSvcsIf *a1, unsigned int a2, char a3, unsigned int a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a5 && a6 && *a6 != 255)
  {
    int v11 = (int)a1;
    Instance = XofSvcsIf::GetInstance(a1);
    long long v30 = 0uLL;
    XofBrdSvBitMasuint64_t k = XofSvcsIf::GetXofBrdSvBitMask((uint64_t)Instance, a2, &v30);
    if (XofBrdSvBitMask == 7) {
      return 1;
    }
    if (XofBrdSvBitMask == 1)
    {
      uint64_t v14 = (unint64_t *)&v30;
      if (v11) {
        uint64_t v14 = (unint64_t *)&v30 + 1;
      }
      unint64_t v15 = *v14;
      int v16 = GncP24_51ConvertAGnssType(a2);
      uint64_t v17 = 0;
      if (a4 - 1 >= 0x3F) {
        int v18 = 63;
      }
      else {
        int v18 = (a4 - 1);
      }
      uint64_t v19 = (v18 + 1);
      unsigned __int8 v20 = *a6;
      while (v20 != 0xFF)
      {
        if (((v15 >> v17) & 1) == 0)
        {
          *(_DWORD *)(a5 + 4 * v20) = v16;
          *(unsigned char *)(a5 + *a6 + 1020) = v17 + a3;
          unsigned __int8 v20 = *a6 + 1;
          *a6 = v20;
        }
        if (v19 == ++v17) {
          return 1;
        }
      }
      if (g_LbsOsaTrace_Config < 5) {
        return 0;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v24 = mach_continuous_time();
      uint64_t v26 = 772;
      uint64_t v27 = *a6;
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24);
      long long v23 = "%10u %s%c %s: #%04hx NotBrdSvCnt,%u\n";
    }
    else
    {
      if (g_LbsOsaTrace_Config < 5) {
        return 0;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v26 = 770;
      uint64_t v27 = a2;
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      long long v23 = "%10u %s%c %s: #%04hx Constel,%u\n";
    }
    goto LABEL_19;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v28 = *a6;
    uint64_t v29 = a4;
    uint64_t v26 = 515;
    uint64_t v27 = 255;
    long long v23 = "%10u %s%c %s: #%04hx MaxCnt,%u,NotBrdSvCnt,%u,MaxSvCnt,%u\n";
    unint64_t v25 = v22;
LABEL_19:
    snprintf(__str, 0x3C5uLL, v23, v25, "GNC", 68, "GncP24_16XofGetNotBrdCstSvs", v26, v27, v28, v29);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 0;
}

void GncP24_14UpdateRtiAssistDoNotUseSV(XofSvcsIf *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned __int8 v10 = 0;
  bzero(v13, 0x3FCuLL);
  memset(v12, 0, 255);
  if ((GncP24_13UpdateBadSvList(a1, 0, 1, 32, (uint64_t)v13, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_13UpdateBadSvList(a1, 1u, 120, 39, (uint64_t)v13, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SBAS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_13UpdateBadSvList(a1, 2u, 193, 10, (uint64_t)v13, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx QZSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_13UpdateBadSvList(a1, 3u, 1, 36, (uint64_t)v13, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GAL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_13UpdateBadSvList(a1, 4u, 1, 24, (uint64_t)v13, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_13UpdateBadSvList(a1, 5u, 1, 63, (uint64_t)v13, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx BDS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GncP24_13UpdateBadSvList(a1, 6u, 1, 14, (uint64_t)v13, (uint64_t)v12, &v10) & 1) == 0
    && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NavIC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((GN_GPS_Set_RTI_Bad_SV_List((int)a1, v10, v13, v12) & 1) == 0 && g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RTI data %d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GncP24_14UpdateRtiAssistDoNotUseSV", 257, a1);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

uint64_t GncP24_13UpdateBadSvList(XofSvcsIf *a1, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a5 && a6 && a7 && *a7 != 255)
  {
    int v13 = (int)a1;
    long long v23 = 0uLL;
    Instance = XofSvcsIf::GetInstance(a1);
    if (XofSvcsIf::GetRtiData((uint64_t)Instance, a2, &v23) != 1)
    {
      if (g_LbsOsaTrace_Config < 5) {
        return 0;
      }
      bzero(__str, 0x3C6uLL);
      unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Constel,%d\n", v20);
      goto LABEL_11;
    }
    if (v13 == 1)
    {
      unint64_t v15 = *((void *)&v23 + 1);
    }
    else
    {
      if (v13)
      {
        if (g_LbsOsaTrace_Config < 5) {
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Signal Band,%d\n", v22);
        goto LABEL_11;
      }
      unint64_t v15 = v23;
    }
    int v17 = Gncp24_56ConvertGnssType(a2);
    uint64_t v18 = 0;
    unsigned __int8 v19 = *a7;
    while (v19 != 0xFF)
    {
      if ((v15 >> v18))
      {
        *(_DWORD *)(a5 + 4 * v19) = v17;
        *(unsigned char *)(a6 + *a7) = v18 + a3;
        unsigned __int8 v19 = *a7 + 1;
        *a7 = v19;
      }
      if (a4 == ++v18) {
        return 1;
      }
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx BadSvCnt,%u\n", v21);
      goto LABEL_11;
    }
  }
  else if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
LABEL_11:
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 0;
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(void *a1, char *a2, char *a3, size_t __sz)
{
  uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](a1, __sz);
  uint64_t v8 = (unsigned char *)a1[1];
  while (a2 != a3)
  {
    char v9 = *a2++;
    *v8++ = v9;
  }
  a1[1] = v8;
  return result;
}

void sub_263CDBDF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Hal_Is_BaseBandSPMI_Ack_Enabled(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_Is_BaseBandSPMI_Ack_Enabled");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  mach_port_t v1 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v2 = IOServiceNameMatching("baseband-heb");
  io_service_t MatchingService = IOServiceGetMatchingService(v1, v2);
  if (MatchingService)
  {
    CFDataRef v4 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"interrupts", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
    CFDataRef cf = v4;
    if (v4)
    {
      CFDataRef v5 = v4;
      BytePtr = CFDataGetBytePtr(v4);
      unint64_t Length = CFDataGetLength(v5);
      if ((Length & 0x3FFFFFFFCLL) != 0)
      {
        uint64_t v8 = 0;
        uint64_t v9 = (Length >> 2);
        unsigned int v10 = g_LbsOsaTrace_Config;
        do
        {
          if (v10 >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v11 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SPMI interrupts %d : %x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 68, "Hal_Is_BaseBandSPMI_Ack_Enabled", v8, *(_DWORD *)&BytePtr[4 * v8]);
            gnssOsa_PrintLog(__str, 5, 1, 0);
            unsigned int v10 = g_LbsOsaTrace_Config;
          }
          if (*(_DWORD *)&BytePtr[4 * v8] == 76) {
            _MergedGlobals_6 = 1;
          }
          ++v8;
        }
        while (v9 != v8);
      }
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SPMI interrupts not found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 87, "Hal_Is_BaseBandSPMI_Ack_Enabled");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    CFRelease(cf);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: IOServiceGetMatchingService - failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "Hal_Is_BaseBandSPMI_Ack_Enabled");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t Hal_BaseBandSPMI_GNSSTriggerTrap(void)
{
  v2[1] = *(const void **)MEMORY[0x263EF8340];
  v2[0] = (const void *)TelephonyBasebandCreateController();
  uint64_t v0 = TelephonyBasebandGNSSTrapTrigger();
  ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::~SharedRef(v2);
  return v0;
}

void sub_263CDC198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t Hal35_BaseBandSPMI_GNSSWake(void)
{
  int v0 = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)TelephonyBasebandCreateController();
    if (__lk.__m_) {
      mach_port_t v1 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
    }
    else {
      mach_port_t v1 = 0;
    }
    if (v1) {
      BOOL v2 = 0;
    }
    else {
      BOOL v2 = g_LbsOsaTrace_Config >= 2;
    }
    if (v2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Failed to create basebandController obj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 87, "Hal35_IsBasebandAlive");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    if (TelephonyBasebandGetReset())
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Baseband is in reset,iter %d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal35_IsBasebandAlive", v0);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Failed to get baseband reset state\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 87, "Hal35_IsBasebandAlive");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    usleep(0x3B920u);
    ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::~SharedRef((const void **)&__lk.__m_);
    ++v0;
  }
  while (v0 != 5);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Baseband is in reset, status check for 5seconds failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal35_IsBasebandAlive");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return 0;
}

void sub_263CDCA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, std::mutex *a16, char a17)
{
  if (a17) {
    std::mutex::unlock(a16);
  }
  ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::~SharedRef(&a15);
  _Unwind_Resume(a1);
}

void Hal_SPMI_Callback(std::condition_variable *this, unsigned int a2, int a3, void *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!this)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SPMI context nullptr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 87, "Hal_SPMI_Callback");
    int v8 = 2;
LABEL_10:
    gnssOsa_PrintLog(__str, v8, 1, 0);
    return;
  }
  if (a3 != -469794800)
  {
    if (g_LbsOsaTrace_Config < 4) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: data, %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal_SPMI_Callback", a3);
    int v8 = 4;
    goto LABEL_10;
  }
  this[2].__cv_.__opaque[8] = 1;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: kAppleBasebandMessageGNSSWakeACK unlock\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal_SPMI_Callback");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  std::condition_variable::notify_one(this);
}

const void **ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::~SharedRef(const void **a1)
{
  BOOL v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_263CDCCC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t NK_Add_SV_ARes_PN(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v139[128] = *(double *)MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a4 + 148)) {
    return result;
  }
  uint64_t v7 = a4;
  int v8 = (double *)(a5 + 61736);
  unsigned int v136 = 0;
  double v9 = 0.0;
  BOOL v10 = *(unsigned __int8 *)(a5 + 6753) >= 4u && a2 == 0;
  if (!v10
    && ((*(_DWORD *)(a4 + 20) - 6) > 2 || (int)result > 4 || *(unsigned __int8 *)(a5 + 6752) <= 3u))
  {
    if (*(_DWORD *)(a5 + 1872)) {
      double v9 = 16.0;
    }
    else {
      double v9 = 4.0;
    }
  }
  int v130 = (_DWORD *)(a4 + 27120);
  int v131 = (double *)(a5 + 61736);
  __int16 v132 = (unsigned __int8 *)(a5 + 36563);
  uint64_t v11 = (unsigned __int8 *)(a5 + 21659);
  uint64_t v12 = (unsigned char *)(a5 + 6755);
  if (*(unsigned char *)(a4 + 241) && *(int *)(a5 + 20) <= 7)
  {
    char v126 = (unsigned char *)(a5 + 6755);
    int v127 = (unsigned __int8 *)(a5 + 21659);
    unsigned int v13 = 0;
    uint64_t v14 = 0;
    char v15 = 0;
    int v129 = (double *)(a4 + 352);
    uint64_t v16 = a5 + 52760;
    uint64_t v17 = a5 + 7064;
    uint64_t v18 = a3 + 7520;
    do
    {
      if (*(_WORD *)(v18 + 2 * v14) && *(unsigned char *)(v17 + v14) && *(double *)(a5 + 17432 + 8 * v14) < 10000.0)
      {
        double v19 = (double)*(__int16 *)(v18 + 2 * v14);
        double v20 = v19 * v19;
        uint64_t v21 = a3 + 4 * v14;
        NK_Obs_Equ_SV((void *)1, 0, *(_DWORD *)(v21 + 96), v16, (uint64_t)v137, *(double *)(a5 + 1552));
        LODWORD(v139[0]) = 0;
        if (v19 * v19 > 0.0)
        {
          rnk1_core(v129, 0, v19 * v19, v137, (int *)v139);
          if (LODWORD(v139[0])) {
            ++v13;
          }
        }
        char v15 = 1;
        *(unsigned char *)(a4 + 182) = 1;
        *(double *)(a4 + 232) = v20;
        GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(v21 + 96));
        EvLog_v("NK_Add_SV_ARes_PN:  %d  %s  Q-Boost[5]  %g  Code_PPC %d  Res %g", v14, GNSS_SV_Str, sqrt(v20), *(__int16 *)(v18 + 2 * v14), v19);
      }
      ++v14;
      v16 += 56;
    }
    while (v14 != 128);
    unsigned int v136 = v13;
    char v23 = v15 & 1;
    uint64_t v7 = a4;
    int v8 = v131;
    uint64_t v12 = v126;
    uint64_t v11 = v127;
  }
  else
  {
    char v23 = 0;
  }
  double v24 = *v8;
  double v25 = v8[1];
  double v26 = v8[2];
  bzero(v139, 0x400uLL);
  unint64_t v27 = 0;
  unsigned int v28 = 0;
  memset(v138, 0, 512);
  do
  {
    uint64_t v29 = *(char *)(a5 + 79569 + v27);
    if (*(unsigned char *)(a5 + v29 + 7064))
    {
      v139[v28] = *(double *)(a5 + 8 * v29 + 12056);
      *((_DWORD *)v138 + v28) = v28;
      ++v28;
    }
    if (v27 > 0x7E) {
      break;
    }
    ++v27;
  }
  while (v28 < 9);
  if (v24 >= v25) {
    double v30 = v25;
  }
  else {
    double v30 = v24;
  }
  if (v30 >= v26) {
    double v31 = v26;
  }
  else {
    double v31 = v30;
  }
  double v32 = 0.0;
  double v33 = 0.0;
  if (v28 < 5) {
    goto LABEL_46;
  }
  VecSortIndexAscR8((uint64_t)v139, v28, (int *)v138, 0);
  unsigned int v34 = v28 >> 1;
  uint64_t v35 = *((unsigned int *)v138 + (v28 >> 1) - 1);
  double v36 = v139[*((unsigned int *)v138 + (v28 >> 1) + 1)];
  double v33 = (v28 & 1) != 0 ? v139[*((unsigned int *)v138 + v34)] : (v139[*((unsigned int *)v138 + v34)] + v36) * 0.5;
  if ((v135 = v33, double v37 = v139[v35], v36 * v37 >= 0.0)
    && (double v38 = fabs(v33), vabdd_f64(v36, v37) <= v38 * 0.5)
    && ((double v39 = v139[*((unsigned int *)&v138[-1] + v34)],
         double v40 = v139[*((unsigned int *)&v138[1] + v34)],
         double v41 = vabdd_f64(v39, v40),
         v39 * v40 >= 0.0)
      ? (BOOL v42 = v41 <= v38)
      : (BOOL v42 = 0),
        v42))
  {
    char v50 = 0;
    double v125 = (v40 + v36 + v33 + v37 + v39) / 5.0;
    double v47 = ((v37 - v125) * (v37 - v125)
         + (v39 - v125) * (v39 - v125)
         + (v33 - v125) * (v33 - v125)
         + (v36 - v125) * (v36 - v125)
         + (v40 - v125) * (v40 - v125))
        / 5.0;
    double v48 = v31 + v47;
  }
  else
  {
LABEL_46:
    uint64_t v43 = (double *)(a5 + 12056);
    uint64_t v44 = -128;
    do
    {
      if (*(unsigned char *)(a5 + 7064 + v44 + 128))
      {
        double v45 = 1.0 / v43[672];
        double v33 = v33 + *v43 * v45;
        double v32 = v32 + v45;
      }
      ++v43;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    double v135 = v33;
    v139[0] = v32;
    v138[0] = 0.0;
    double v47 = 0.0;
    if (R8_EQ(v139, v138))
    {
      double v48 = 0.0;
    }
    else
    {
      *(double *)&unint64_t v49 = 1.0 / v32;
      double v33 = v33 * (1.0 / v32);
      double v135 = v33;
      LOBYTE(v49) = *v12;
      double v48 = v31 + v32 / (double)v49;
    }
    char v50 = 1;
  }
  v139[0] = 0.0;
  uint64_t result = R8_EQ(&v135, v139);
  if ((result & 1) == 0)
  {
    unsigned int v55 = 0;
    unsigned int v56 = 0;
    uint64_t v57 = (double *)(a5 + 12056);
    uint64_t v58 = -128;
    do
    {
      if (*(unsigned char *)(a5 + 7064 + v58 + 128))
      {
        if ((*v57 - v33) * (*v57 - v33) <= v57[672] * 25.0) {
          ++v56;
        }
        else {
          ++v55;
        }
      }
      ++v57;
      BOOL v46 = __CFADD__(v58++, 1);
    }
    while (!v46);
    double v59 = 0.0;
    if (v55 >= v56 || v55 && v56 < 3)
    {
      int v60 = 0;
      goto LABEL_89;
    }
  }
  if (v33 != 0.0)
  {
    double v51 = fabs(v33);
    BOOL v52 = v51 >= 149896.229 || *(_DWORD *)(a5 + 1872) == 0;
    double v53 = v33 * v33;
    if (v52 && v53 >= v9 * v48)
    {
      int v60 = 1;
LABEL_83:
      double v61 = -(v48 - v33 * v33);
      if (v61 > 0.0)
      {
        char v23 = 1;
        int v62 = v60;
        Apply_Q_Boost(-(v48 - v33 * v33), 0, 1u, (double *)(a4 + 352), &v136, v139);
        Apply_Q_Boost(-(v48 - v33 * v33), 1u, 1u, (double *)(a4 + 352), &v136, v139);
        uint64_t v7 = a4;
        Apply_Q_Boost(-(v48 - v33 * v33), 2u, 1u, (double *)(a4 + 352), &v136, v139);
        if (v61 >= 10000.0) {
          int v62 = 1;
        }
        *(unsigned char *)(a4 + 177) = 1;
        *(double *)(a4 + 192) = v61;
        uint64_t result = (uint64_t)EvLog_v("NK_Add_SV_ARes_PN:  Q-Boost[0]  %g  ClkB %g  Sigs %g  %g %g %g  %g", sqrt(v61), v33, sqrt(v31), sqrt(*v8), sqrt(v8[1]), sqrt(v8[2]), sqrt(v48));
        int v60 = v62;
        goto LABEL_88;
      }
      goto LABEL_87;
    }
    if ((v50 & 1) == 0
      && ((a6 & 0xFFFFFFFE) != 6 || v53 >= v47 * 25.0 || (*(_DWORD *)(v7 + 20) - 4) <= 4))
    {
      int v60 = 0;
      if (v51 < 3.0 || v53 < v48) {
        goto LABEL_88;
      }
      goto LABEL_83;
    }
  }
LABEL_87:
  int v60 = 0;
LABEL_88:
  double v59 = v33;
LABEL_89:
  if (*v12 < 3u)
  {
    char v71 = v23;
  }
  else
  {
    uint64_t v63 = 0;
    int v64 = 0;
    unsigned int v65 = 0;
    unsigned int v66 = 0;
    double v67 = -9999.0;
    int16x8_t v68 = (double *)(a5 + 12056);
    unsigned int v69 = -1;
    do
    {
      if (*(unsigned char *)(a5 + 7064 + v63) && v68[672] < 10000.0)
      {
        double v70 = (*v68 - v59) * (*v68 - v59) / v68[800];
        if (v70 <= v9 || (++v65, v64 += *(unsigned __int8 *)(a5 + 2010 + v63), v70 <= v67)) {
          double v70 = v67;
        }
        else {
          unsigned int v69 = v63;
        }
        ++v66;
        double v67 = v70;
      }
      ++v63;
      ++v68;
    }
    while (v63 != 128);
    char v71 = v23;
    if (*v132 + *v11 >= 3)
    {
      uint64_t v72 = 0;
      int v73 = 0;
      unsigned int v74 = 0;
      unsigned int v75 = 0;
      unsigned int v76 = -1;
      double v77 = -9999.0;
      uint64_t v78 = 33360;
      uint64_t v79 = 26960;
      uint64_t v80 = 48264;
      uint64_t v81 = 41864;
      uint64_t v82 = 36872;
      uint64_t v83 = 21968;
      while (1)
      {
        int v84 = *(unsigned __int8 *)(a5 + v82);
        if (*(unsigned char *)(a5 + v83)) {
          goto LABEL_104;
        }
        if (*(unsigned char *)(a5 + v82)) {
          break;
        }
LABEL_115:
        ++v72;
        v78 += 8;
        v79 += 8;
        v80 += 8;
        v81 += 8;
        ++v83;
        ++v82;
        if (v72 == 128)
        {
          if ((v69 & 0x80000000) != 0) {
            goto LABEL_136;
          }
          goto LABEL_126;
        }
      }
      int v84 = 1;
LABEL_104:
      BOOL v85 = v84 == 0;
      if (v84) {
        uint64_t v86 = v81;
      }
      else {
        uint64_t v86 = v79;
      }
      double v87 = *(double *)(a5 + v86);
      if (v85) {
        uint64_t v88 = v78;
      }
      else {
        uint64_t v88 = v80;
      }
      double v89 = v87 * v87 / *(double *)(a5 + v88);
      if (v89 <= v9 || (++v74, v73 += *(unsigned __int8 *)(a5 + v72 + 2010), v89 <= v77)) {
        double v89 = v77;
      }
      else {
        unsigned int v76 = v72;
      }
      ++v75;
      double v77 = v89;
      goto LABEL_115;
    }
    unsigned int v75 = 0;
    unsigned int v74 = 0;
    int v73 = 0;
    unsigned int v76 = -1;
    if ((v69 & 0x80000000) != 0) {
      goto LABEL_136;
    }
LABEL_126:
    if (v66 >= 3 && *(_DWORD *)(a5 + 1872) != 1 && (v65 > 2 || v64 || *(unsigned char *)(a4 + 241) || *(int *)(a5 + 20) <= 7))
    {
      uint64_t v90 = a5 + 8 * v69;
      double v91 = *(double *)(v90 + 12056);
      double v92 = *(double *)(v90 + 18456);
      double v93 = 0.0816326531;
      if (*(unsigned char *)(a4 + 241)) {
        double v93 = 1.0;
      }
      double v94 = -(v92 - v91 * v91 * v93);
      double v95 = v94 * 0.5;
      if (v94 * 0.5 > 0.0)
      {
        Apply_Q_Boost(v94 * 0.5, 0, 1u, (double *)(a4 + 352), &v136, v139);
        Apply_Q_Boost(v95, 1u, 1u, (double *)(a4 + 352), &v136, v139);
        Apply_Q_Boost(v95, 2u, 1u, (double *)(a4 + 352), &v136, v139);
        Apply_Q_Boost(v95 * 0.000001, 3u, 1u, (double *)(a4 + 352), &v136, v139);
        Apply_Q_Boost(v95, 6u, 3u, (double *)(a4 + 352), &v136, v139);
        Apply_Q_Boost(v95 + v95, 5u, 1u, (double *)(a4 + 352), &v136, v139);
        char v71 = 1;
        *(unsigned char *)(a4 + 178) = 1;
        *(double *)(a4 + 200) = v95;
        double v96 = Get_GNSS_SV_Str(*(unsigned int *)(a3 + 4 * v69 + 96));
        uint64_t result = (uint64_t)EvLog_v("NK_Add_SV_ARes_PN:  Q-Boost[1]  %g  i_Worse %d %s  PR.Res %g %g  tested %d  fail %d %d", sqrt(v95), v69, v96, v91, sqrt(v92), v66, v65, v64);
        int v60 = 1;
      }
    }
LABEL_136:
    if ((v76 & 0x80000000) != 0)
    {
      uint64_t v7 = a4;
    }
    else
    {
      uint64_t v7 = a4;
      if (v75 >= 3 && *(_DWORD *)(a5 + 1872) != 1 && (v74 > 2 || v73 || *(unsigned char *)(a4 + 241) || *(int *)(a5 + 20) <= 7))
      {
        uint64_t v97 = a5 + 36560 + 8 * v76;
        uint64_t v98 = v97 + 5304;
        char v99 = (double *)(v97 + 11704);
        uint64_t v100 = a5 + 8 * v76;
        uint64_t v101 = v100 + 26960;
        double v102 = (double *)(v100 + 33360);
        if (*(unsigned char *)(a5 + 36560 + v76 + 312))
        {
          uint64_t v103 = 82;
        }
        else
        {
          char v99 = v102;
          uint64_t v103 = 79;
        }
        int v104 = (double *)(*(unsigned char *)(a5 + 36560 + v76 + 312) ? v98 : v101);
        double v105 = *v104;
        double v106 = *v99;
        if (*(unsigned char *)(a4 + 241) || !v130[4]) {
          double v107 = 1.0;
        }
        else {
          double v107 = 0.0816326531;
        }
        double v122 = -(v106 - v105 * v105 * v107);
        double v123 = v122 * 0.5;
        if (v122 * 0.5 > 0.0)
        {
          Apply_Q_Boost(v122 * 0.5, 4u, 1u, (double *)(a4 + 352), &v136, v139);
          uint64_t v7 = a4;
          Apply_Q_Boost(v123, 9u, 3u, (double *)(a4 + 352), &v136, v139);
          *(unsigned char *)(a4 + 179) = 1;
          *(double *)(a4 + 208) = v123;
          __int16 v124 = Get_GNSS_SV_Str(*(unsigned int *)(a3 + 4 * v76 + 96));
          uint64_t result = (uint64_t)EvLog_v("NK_Add_SV_ARes_PN:  Q-Boost[2]  %g  i_Worse %d %s  D%c.Res %g %g  tested %d  fail %d %d", sqrt(v123), v76, v124, v103, v105, sqrt(v106), v75, v74, v73);
          if (!v136)
          {
LABEL_123:
            *(_DWORD *)(v7 + 152) = 0;
LABEL_124:
            ud2var(v7 + 352, 0xCu, 1, 0xCu, v131);
            Comp_NEDvar_UDU(v7 + 352, 0xCu, 6, (double (*)[3])(a5 + 1736), (double *)(a5 + 61784));
            uint64_t result = Comp_NEDvar_UDU(v7 + 352, 0xCu, 9, (double (*)[3])(a5 + 1736), (double *)(a5 + 61808));
            goto LABEL_153;
          }
          goto LABEL_120;
        }
      }
    }
  }
  if (!v136)
  {
    if ((v71 & 1) == 0)
    {
      unsigned int v108 = *(_DWORD *)(v7 + 152);
      if (v108 <= 0x5F5E0FF) {
        *(_DWORD *)(v7 + 152) = v108 + 1;
      }
      goto LABEL_153;
    }
    if (!v60) {
      goto LABEL_124;
    }
    goto LABEL_123;
  }
LABEL_120:
  *(unsigned char *)(v7 + 136) = 1;
  *(_DWORD *)(v7 + 140) = 22;
  *(_DWORD *)(v7 + 152) = 0;
LABEL_153:
  if (*(unsigned char *)(v7 + 241) || *v130 > *(unsigned __int16 *)(v7 + 16) || *(_DWORD *)(a5 + 1872) != 1) {
    goto LABEL_161;
  }
  unsigned int v109 = *(_DWORD *)(v7 + 148);
  if (v109 >= *(_DWORD *)(v7 + 152)) {
    unsigned int v109 = *(_DWORD *)(v7 + 152);
  }
  if (v109 >= *(_DWORD *)(v7 + 156)) {
    unsigned int v109 = *(_DWORD *)(v7 + 156);
  }
  if (v109 <= 0xA)
  {
LABEL_161:
    uint64_t v110 = 0;
    long long v111 = (const double *)(a5 + 6800);
    int8x16_t v112 = (int8x16_t)vld1q_dup_f64(v111);
    float64x2_t v113 = (float64x2_t)vextq_s8(v112, v112, 8uLL);
    do
    {
      *(float64x2_t *)(a5 + 18440 + v110) = vmulq_f64(v113, *(float64x2_t *)(a5 + 18440 + v110));
      v110 -= 16;
    }
    while (v110 != -1024);
  }
  uint64_t v114 = 0;
  uint64_t v115 = (const double *)(a5 + 21704);
  int8x16_t v116 = (int8x16_t)vld1q_dup_f64(v115);
  float64x2_t v117 = (float64x2_t)vextq_s8(v116, v116, 8uLL);
  do
  {
    *(float64x2_t *)(a5 + 33344 + v114) = vmulq_f64(v117, *(float64x2_t *)(a5 + 33344 + v114));
    v114 -= 16;
  }
  while (v114 != -1024);
  uint64_t v118 = 0;
  double v119 = (const double *)(v132 + 45);
  int8x16_t v120 = (int8x16_t)vld1q_dup_f64(v119);
  float64x2_t v121 = (float64x2_t)vextq_s8(v120, v120, 8uLL);
  do
  {
    *(float64x2_t *)(a5 + 48248 + v118) = vmulq_f64(v121, *(float64x2_t *)(a5 + 48248 + v118));
    v118 -= 16;
  }
  while (v118 != -1024);
  if (*(_DWORD *)(v7 + 152) >= 4u)
  {
    *(_OWORD *)(v7 + 208) = 0u;
    *(_OWORD *)(v7 + 224) = 0u;
    *(_OWORD *)(v7 + 192) = 0u;
  }
  return result;
}

char *NK_Add_SV_ARes_PN_ClkDrift(char *result, uint64_t a2, double a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!*((_DWORD *)result + 37)) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  unsigned int v10 = 0;
  uint64_t v11 = (double *)(a2 + 61768);
  double v12 = *(double *)(a2 + 61768);
  double v13 = sqrt(v12);
  double v14 = v13 * 0.5;
  double v15 = 0.0;
  double v16 = -1.79769313e308;
  do
  {
    uint64_t v17 = *(char *)(a2 + 79569 + v6);
    if (*(unsigned char *)(a2 + v17 + 21968))
    {
      if (v10 > 2) {
        goto LABEL_17;
      }
    }
    else
    {
      if (*(unsigned char *)(a2 + v17 + 36872)) {
        BOOL v18 = v10 >= 3;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18) {
        goto LABEL_17;
      }
    }
    double v19 = *(double *)(a2 + 8 * v17 + 26960);
    ++v10;
    if (v19 < 0.0) {
      ++v8;
    }
    else {
      ++v9;
    }
    double v15 = v15 + v19;
    double v20 = fabs(v19);
    if (v20 > v14) {
      ++v7;
    }
    if (v20 > v16) {
      double v16 = v20;
    }
LABEL_17:
    ++v6;
  }
  while (v6 != 128);
  if (v9) {
    BOOL v21 = v8 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21 && v7)
  {
    double v22 = v16 + v16;
    double v23 = -(v12 - v22 * v22);
    if (v23 > 0.0)
    {
      memset(v32, 0, sizeof(v32));
      unsigned int v31 = 0;
      Apply_Q_Boost(-(v12 - v22 * v22), 4u, 1u, (double *)result + 44, &v31, (double *)v32);
      if (v31)
      {
        *((_DWORD *)v5 + 35) = 22;
        v5[136] = 1;
      }
      else
      {
        ud2var((uint64_t)(v5 + 352), 0xCu, 1, 0xCu, (double *)(a2 + 61736));
        Comp_NEDvar_UDU((uint64_t)(v5 + 352), 0xCu, 6, (double (*)[3])(a2 + 1736), (double *)(a2 + 61784));
        Comp_NEDvar_UDU((uint64_t)(v5 + 352), 0xCu, 9, (double (*)[3])(a2 + 1736), (double *)(a2 + 61808));
      }
      uint64_t result = EvCrt_v("NK_Add_SV_ARes_PN_ClkDrift:  Q-Boost %f   Max_DO_Res %f   old_OrigSig %f   new_OrigSig %f   TempRate %f", sqrt(v23), v16, v13, sqrt(*v11), a3);
    }
    if (fabs(a3) > 1.25)
    {
      double v24 = v15 / (double)v10;
      if (fabs(v24) > v14)
      {
        uint64_t result = EvCrt_v("NK_Add_SV_ARes_PN_ClkDrift:  Applied ClkDrift_Stress %f m/s   Num_Res %d   TempRate %f", v15 / (double)v10, v10, a3);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        *(double *)(a2 + 1664) = *(double *)(a2 + 1664) + v24 * -0.00000000333564095;
        uint64_t v27 = a2 + 21968;
        do
        {
          if (*(unsigned char *)(v27 + v26))
          {
            uint64_t v28 = v27 + v25;
            *(double *)(v28 + 4992) = *(double *)(v27 + v25 + 4992) - v24;
            *(double *)(v28 + 7040) = *(double *)(v27 + v25 + 7040) - v24;
          }
          if (*(unsigned char *)(a2 + 36872 + v26))
          {
            double v29 = v24 * *(double *)(a2 + 1552);
            uint64_t v30 = v27 + v25;
            *(double *)(v30 + 19896) = *(double *)(v27 + v25 + 19896) - v29;
            *(double *)(v30 + 21944) = *(double *)(v27 + v25 + 21944) - v29;
          }
          ++v26;
          v25 += 8;
        }
        while (v26 != 128);
      }
    }
  }
  return result;
}

uint64_t Hal15_ReadHwRevision(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(_DWORD *)double v13 = 1984067706;
  v13[4] = a1;
  __int16 v14 = 0;
  char v15 = a1 - 72;
  char v16 = 10;
  if (a1 == 77)
  {
    int v2 = 3;
  }
  else
  {
    if (a1 != 80) {
      goto LABEL_6;
    }
    int v2 = 2;
  }
  g_HalState = v2;
LABEL_6:
  if ((int)Hal22_ZxSendToChip(v13, 9uLL) <= 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx rev cmd,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 69, "Hal15_ReadHwRevision", 1282, a1);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 4294967293;
  }
  else
  {
    char v3 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1F4u);
    if (v3 == 2)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RevResp, CPU,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "Hal15_ReadHwRevision", 1541, a1);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967289;
    }
    else if (v3 == 1)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RevResp, CPU,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 69, "Hal15_ReadHwRevision", 1543, a1);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967291;
    }
    else
    {
      if (v3)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RevResp default, CPU,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 69, "Hal15_ReadHwRevision", 515, a1);
          int v5 = 1;
          goto LABEL_24;
        }
        return 0;
      }
      if (byte_26A9CA2D0 == 32)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RevResp rcvd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal15_ReadHwRevision");
          int v5 = 4;
LABEL_24:
          gnssOsa_PrintLog(__str, v5, 1, 0);
          return 0;
        }
        return 0;
      }
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RevResp status,%c, CPU,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 69, "Hal15_ReadHwRevision", 770, byte_26A9CA2D0, a1);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967292;
    }
  }
}

void Hal15_HandleRevResp(unsigned __int8 *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = 513;
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v6 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_19;
  }
  if (a1[2] != 66 || a1[3] != 86)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Packet MC,%c,MID,%c,MIDEx,%c\n", v5, "HAL", 69);
    goto LABEL_20;
  }
  if (a1[8] == 32)
  {
    byte_26A9CA2D0 = 32;
    int v1 = a1[4];
    if (v1 == 77)
    {
      int v2 = a1 + 9;
      char v3 = (char *)&unk_26A9CA265;
      int v4 = 144;
      goto LABEL_13;
    }
    if (v1 == 80)
    {
      int v2 = a1 + 9;
      char v3 = &g_RawRevRespCntxt;
      int v4 = 142;
LABEL_13:
      memcpy_s("Hal15_HandleRevResp", v4, v3, 0x6Bu, v2, 0x6BuLL);
      goto LABEL_16;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 69, "Hal15_HandleRevResp", 519);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
LABEL_16:
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v10 = 1542;
    uint64_t v11 = *__error();
    unint64_t v9 = v8;
    uint64_t v6 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
LABEL_19:
    snprintf(__str, 0x3C5uLL, v6, v9, "HAL", 69, "Hal15_HandleRevResp", v10, v11);
LABEL_20:
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void *Hal15_GetGNSSVersionString@<X0>(void *a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  char v4 = 0;
  long long v3 = unk_26A9CA216;
  snprintf(__str, 0x40uLL, "HWID:0x%0x,HW:%u,FW:%hhu.%hhu.%hhu.%hhu,%s", (unsigned __int16)word_26A9CA200, *(_DWORD *)&word_26A9CA200, g_RawRevRespCntxt, byte_26A9CA1FB, byte_26A9CA1FC, byte_26A9CA1FD, (const char *)&v3);
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

uint64_t GM_Cross_Constell(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  long long v3 = (unsigned int *)result;
  char v4 = 0;
  int v5 = 0;
  v105[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v6 = (char *)(a2 + 8986);
  uint64_t v7 = result + 17940;
  uint64_t v8 = result + 11788;
  unint64_t v9 = (unsigned __int16 *)(result + 8);
  uint64_t v10 = 128;
  do
  {
    if ((~*v9 & 0x208) == 0)
    {
      switch(*((unsigned char *)v9 - 8))
      {
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          int v5 = 1;
          break;
        case 2:
          char v4 = 1;
          break;
        default:
          break;
      }
    }
    v9 += 18;
    --v10;
  }
  while (v10);
  if (!*(unsigned char *)(result + 17958) && *(unsigned char *)v7 && *(int *)(result + 17936) >= 1)
  {
    *(void *)int v104 = 0;
    v105[0] = 0.0;
    API_Get_UTC_Cor(1, v105);
    uint64_t result = GPS_To_Glon_Time(0, *(__int16 *)(v7 + 2), *((double *)v3 + 2243), v105[0], &v104[1], v104, (double *)v103);
    *(_WORD *)(v7 + 16) = v104[1];
    *(_WORD *)(v7 + 20) = v104[0];
    *(unsigned char *)(v7 + 18) = 1;
  }
  int v11 = *(_DWORD *)(v7 + 12);
  if (((v11 == 0) & v4) == 1)
  {
    uint64_t v12 = 0;
    int v13 = 10799999;
    v105[0] = 0.0;
    uint64_t v14 = 0x3FFFFFFFFFFFF900;
    while (LOBYTE(v3[v12]) != 2 || (~LOWORD(v3[v12 + 2]) & 0x208) != 0)
    {
      v12 += 9;
      v14 += 14;
      if (!(v14 * 4)) {
        goto LABEL_19;
      }
    }
    int v13 = 1500 * v3[v14 + 2944] + 10799999 + (int)v3[v14 + 2945] / 1023 + 1;
LABEL_19:
    uint64_t result = API_Get_UTC_Cor(1, v105);
    double v15 = -0.5;
    if (v105[0] > 0.0) {
      double v15 = 0.5;
    }
    double v16 = v105[0] + v15;
    if (v105[0] + v15 <= 2147483650.0)
    {
      if (v16 >= -2147483650.0) {
        int v17 = (int)v16;
      }
      else {
        int v17 = 0x80000000;
      }
    }
    else
    {
      int v17 = 0x7FFFFFFF;
    }
    *((double *)v3 + 2246) = (double)((v13 - 1000 * v17) % 86400000) * 0.001;
    int v11 = 3;
    *(_DWORD *)(v7 + 12) = 3;
  }
  if ((v4 & 1) == 0) {
    goto LABEL_34;
  }
  if (!*(unsigned char *)v8)
  {
    double v19 = v3 + 2;
    uint64_t v20 = 128;
    do
    {
      if (*((unsigned char *)v19 - 8) == 2) {
        *v19 &= ~0x200u;
      }
      v19 += 18;
      --v20;
    }
    while (v20);
LABEL_34:
    int v18 = 0;
    goto LABEL_35;
  }
  int v18 = 1;
LABEL_35:
  int v21 = *(_DWORD *)(v8 + 6148);
  if (v21 && *(unsigned char *)v7) {
    goto LABEL_50;
  }
  if (*(unsigned char *)(v7 + 18) && v11 >= 1 && *(_WORD *)(v7 + 16))
  {
    *(void *)int v104 = 0;
    v105[0] = 0.0;
    *(void *)uint64_t v103 = 0;
    API_Get_UTC_Cor(1, (double *)v103);
    uint64_t result = Glon_To_GPS_Time(*(__int16 *)(v7 + 16), *(__int16 *)(v7 + 20), *((double *)v3 + 2246), *(double *)v103, &v104[1], v104, v105);
    int v21 = *(_DWORD *)(v8 + 6148);
    if (v21 <= 2)
    {
      int v22 = *(_DWORD *)(v7 + 12);
      if (v21 < v22)
      {
        *((double *)v3 + 2243) = v105[0];
        if (v22 >= 3) {
          int v21 = 3;
        }
        else {
          int v21 = v22;
        }
        *(_DWORD *)(v8 + 6148) = v21;
      }
    }
    __int16 v23 = LOWORD(v104[0]) + (LOWORD(v104[1]) << 10);
    if (!*(unsigned char *)v7)
    {
      *(_WORD *)(v7 + 2) = v23;
      *(unsigned char *)uint64_t v7 = 1;
      if (v21) {
        goto LABEL_50;
      }
      goto LABEL_71;
    }
    if (v23 != *(__int16 *)(v7 + 2))
    {
      uint64_t result = (uint64_t)EvLog_v("GM_Cross_Constell: WeekNo Changing from %d to %d !!", *(__int16 *)(v7 + 2), v23);
      *(_WORD *)(v7 + 2) = v23;
      int v21 = *(_DWORD *)(v8 + 6148);
    }
  }
  if (v21)
  {
LABEL_50:
    double v24 = *((double *)v3 + 2243) * 0.666666667;
    double v25 = -0.5;
    if (v24 > 0.0) {
      double v25 = 0.5;
    }
    double v26 = v24 + v25;
    if (v26 <= 2147483650.0)
    {
      if (v26 >= -2147483650.0) {
        int v27 = (int)v26;
      }
      else {
        int v27 = 0x80000000;
      }
    }
    else
    {
      int v27 = 0x7FFFFFFF;
    }
    uint64_t v28 = v3 + 1152;
    double v29 = (unsigned __int16 *)(v3 + 2);
    uint64_t v30 = 0x3FFFFFFFFFFFF900;
    uint64_t result = 4294938496;
    do
    {
      if (*((unsigned char *)v29 - 8) == 2 && (~*v29 & 0x208) == 0)
      {
        unsigned int v31 = v28[v30 + 1792];
        if ((int)(v27 - v31) >= 28800) {
          int v32 = 28800;
        }
        else {
          int v32 = v27 - v31;
        }
        unsigned int v33 = 57600 * ((v27 + 57599 - v31 - v32) / 0xE100);
        int v34 = v27 - v31 - v33;
        if (v34 <= -28800) {
          int v34 = -28800;
        }
        unsigned int v36 = v31 - v27 + v33 + v34;
        BOOL v35 = v36 == 0;
        unsigned int v37 = v33 + v31;
        unsigned int v38 = (v36 - (v36 != 0)) / 0xE100;
        if (!v35) {
          ++v38;
        }
        v28[v30 + 1792] = v37 - 57600 * v38;
      }
      v29 += 18;
      v30 += 14;
    }
    while (v30 * 4);
    goto LABEL_76;
  }
LABEL_71:
  double v39 = v3 + 2;
  uint64_t v40 = 128;
  do
  {
    if (*((unsigned char *)v39 - 8) == 2) {
      *v39 &= ~0x200u;
    }
    v39 += 18;
    --v40;
  }
  while (v40);
  int v21 = 0;
LABEL_76:
  int v41 = 0;
  if (!v21) {
    int v18 = 0;
  }
  if ((*(_DWORD *)(v2 + 8972) - 4) >= 3 && ((v5 ^ 1) & 1) == 0 && v18)
  {
    char v97 = v18;
    char v98 = v5;
    uint64_t v99 = v8;
    uint64_t v100 = v7;
    uint64_t v101 = v2;
    double v102 = v6;
    uint64_t v42 = 0;
    int v43 = 0;
    uint64_t v44 = 0;
    LODWORD(v105[0]) = -1000;
    v103[0] = -1000;
    double v45 = v3 + 1153;
    BOOL v46 = v3;
    do
    {
      if (!*(unsigned char *)v46 || (~*((unsigned __int16 *)v46 + 4) & 0x208) != 0)
      {
        uint64_t v48 = v44;
      }
      else
      {
        int v47 = v43 + 1;
        if (*(unsigned char *)v46 == 2) {
          uint64_t v48 = v44;
        }
        else {
          uint64_t v48 = (v44 + 1);
        }
        if (*(unsigned char *)v46 == 2)
        {
          ++v43;
          unint64_t v49 = v103;
        }
        else
        {
          unint64_t v49 = (int *)v105;
        }
        if (*(unsigned char *)v46 == 2) {
          int v50 = v47;
        }
        else {
          int v50 = v44 + 1;
        }
        int v51 = *v45 / 1023 + 1500 * *(v45 - 1);
        if (*v49 < 1) {
          goto LABEL_100;
        }
        int v52 = *v49 - v51;
        if (v52 < 0) {
          int v52 = v51 - *v49;
        }
        if (v52 < 0x1F5
          || (double v53 = Get_GNSS_SV_Str(*v46),
              EvLog_v("GLO_TIM:  %d  %s  %d  Bad ToT_ms  %d %d", v42, v53, *((char *)v46 + 3), *v49, v51),
              v50 < 2))
        {
LABEL_100:
          *unint64_t v49 = v51;
        }
        else
        {
          GNSS_SV_Str = Get_GNSS_SV_Str(*v46);
          EvLog_v("GLO_TIM:  %d  %s  %d  Ignoring ToT_ms", v42, GNSS_SV_Str, *((char *)v46 + 3));
        }
      }
      ++v42;
      v46 += 9;
      v45 += 14;
      uint64_t v44 = v48;
    }
    while (v42 != 128);
    if (SLODWORD(v105[0]) % 86400000 > v103[0] % 86400000) {
      int v55 = 500;
    }
    else {
      int v55 = -500;
    }
    int v56 = v55 + SLODWORD(v105[0]) % 86400000 - v103[0] % 86400000;
    int v57 = v56 / 1000;
    if (v56 / 1000 <= -43200) {
      int v58 = -43200;
    }
    else {
      int v58 = v56 / 1000;
    }
    if (v56 >= -43200999) {
      int v59 = 0;
    }
    else {
      int v59 = -1;
    }
    BOOL v60 = v56 < -43200999;
    unsigned int v61 = (v59 - v57 + v58) / 0x15180u;
    if (v60) {
      ++v61;
    }
    int v62 = v57 + 86400 * v61;
    if (v62 >= 43199) {
      int v63 = 43199;
    }
    else {
      int v63 = v62;
    }
    signed int v64 = (v62 + ~v63 + 86400) % 0x15180u - (86399 - v63);
    if (v64 >= 0) {
      unsigned int v65 = (v62 + ~v63 + 86400) % 0x15180u - (86399 - v63);
    }
    else {
      unsigned int v65 = 86399 - v63 - (v62 + ~v63 + 86400) % 0x15180u;
    }
    if (v65 >= 0x20)
    {
      EvCrt_v("GM_Get_GPS_GLON_Int_Sec_Offset:  ERROR:  Offset  %d (%d - %d) way too big !", v64, SLODWORD(v105[0]) % 86400000, v103[0] % 86400000);
      if (v64 >= 127) {
        int v66 = 127;
      }
      else {
        int v66 = v64;
      }
      if (v66 <= -127) {
        LOBYTE(v64) = -127;
      }
      else {
        LOBYTE(v64) = v66;
      }
    }
    int v67 = (char)v64;
    if ((v64 & 0x80u) == 0) {
      unsigned int v68 = (char)v64;
    }
    else {
      unsigned int v68 = -(char)v64;
    }
    uint64_t v2 = v101;
    uint64_t v6 = v102;
    uint64_t v8 = v99;
    uint64_t v7 = v100;
    LOBYTE(v18) = v97;
    LOBYTE(v5) = v98;
    if (v68 >= 0x21)
    {
      unsigned int v69 = "GLO_TIM: Rejecting Bad (GPS-UTC) integer second offset %d ";
LABEL_134:
      uint64_t result = (uint64_t)EvLog_d(v69, v67);
      int v41 = 0;
      goto LABEL_135;
    }
    if (!(_BYTE)v64)
    {
      *(_DWORD *)(v101 + 8972) = 2;
      int v67 = *v102;
      unsigned int v69 = "GLO_TIM: Verifying (GPS-UTC) dtLS ";
      goto LABEL_134;
    }
    char v70 = *v102 + v64;
    *double v102 = v70;
    v102[3] = v70;
    *(_DWORD *)(v101 + 8972) = 2;
    uint64_t result = (uint64_t)EvLog_d("GLO_TIM: Updating (GPS-UTC) dtLS ", v70);
    int v41 = 1;
  }
LABEL_135:
  int v71 = *(_DWORD *)(v7 + 12);
  int v72 = *(_DWORD *)(v8 + 6148);
  if (v71 > v72 && (*(unsigned char *)(v7 + 18) != 0) | v5 & 1)
  {
    v103[0] = 0;
    v104[1] = 0;
    v105[0] = 0.0;
    API_Get_UTC_Cor(1, v105);
    int v73 = (double *)(v3 + 4486);
    uint64_t result = Glon_To_GPS_Time(*(__int16 *)(v7 + 16), *(__int16 *)(v7 + 20), *((double *)v3 + 2246), v105[0], v103, &v104[1], (double *)v3 + 2243);
    if (*(unsigned char *)(v7 + 18))
    {
      __int16 v75 = LOWORD(v104[1]) + (LOWORD(v103[0]) << 10);
      if (*(unsigned char *)v7)
      {
        if (v75 != *(__int16 *)(v7 + 2))
        {
          uint64_t result = (uint64_t)EvLog_v("GM_Cross_Constell: WeekNo Changing from %d to %d !!", *(__int16 *)(v7 + 2), v75);
          *(_WORD *)(v7 + 2) = v75;
        }
      }
      else
      {
        *(_WORD *)(v7 + 2) = v75;
        *(unsigned char *)uint64_t v7 = 1;
      }
    }
    else
    {
      uint64_t v76 = 0;
      uint64_t v77 = 0x3FFFFFFFFFFFF900;
      while ((LOBYTE(v3[v76]) | 2) == 2 || (~LOWORD(v3[v76 + 2]) & 0x208) != 0)
      {
        v76 += 9;
        v77 += 14;
        if (!(v77 * 4))
        {
          double v78 = 0.0;
          goto LABEL_148;
        }
      }
      double v78 = (double)(int)((int)v3[v77 + 2945] / 1023 + 1500 * v3[v77 + 2944]) * 0.001;
LABEL_148:
      double v79 = *v73;
      if (*v73 - v78 >= 43200.0)
      {
        do
          double v79 = v79 + -86400.0;
        while (v79 - v78 >= 43200.0);
        *int v73 = v79;
      }
      if (v78 - v79 >= 43200.0)
      {
        do
          double v79 = v79 + 86400.0;
        while (v78 - v79 >= 43200.0);
        *int v73 = v79;
      }
      uint64_t result = (uint64_t)EvLog_nd("GLO_TIM: Setting day number ", 2, v74, (int)v79, *(void *)&v78);
    }
    int v72 = *(_DWORD *)(v8 + 6148);
    int v71 = *(_DWORD *)(v7 + 12);
    *(_DWORD *)(v8 + 6148) = v71;
    int v80 = v71;
    if (v71 >= 5)
    {
      int v80 = v71;
      if ((((*(_DWORD *)(v2 + 8972) - 2) < 5) & v5) == 0)
      {
        if (v72 <= 4) {
          int v80 = 4;
        }
        else {
          int v80 = v72;
        }
        *(_DWORD *)(v8 + 6148) = v80;
      }
    }
    if (v80 != v72)
    {
      uint64_t result = (uint64_t)EvLog_v("GLO_TIM: Glo->GPS Time transfer:  %d -> %d", v71, v80);
      int v72 = *(_DWORD *)(v8 + 6148);
      int v71 = *(_DWORD *)(v7 + 12);
    }
  }
  if (v72 > v71)
  {
    v103[0] = 0;
    v104[1] = 0;
    v105[0] = 0.0;
    API_Get_UTC_Cor(1, v105);
    uint64_t result = GPS_To_Glon_Time(0, *(__int16 *)(v7 + 2), *((double *)v3 + 2243), v105[0], v103, &v104[1], (double *)v3 + 2246);
    uint64_t v82 = *(unsigned int *)(v8 + 6148);
    *(_DWORD *)(v7 + 12) = v82;
    if (int)v82 < 5 || ((*(_DWORD *)(v2 + 8972) - 2) < 5 ? (char v83 = v18) : (char v83 = 0), (v83)) {
      uint64_t result = (uint64_t)EvLog_nd("GLO_TIM: GPS->Glo Time transfer", 2, v81, v82, v82);
    }
    else {
      *(_DWORD *)(v7 + 12) = 4;
    }
    if (*(unsigned char *)v7)
    {
      int v84 = *(__int16 *)(v7 + 2);
      if (v84 >= 1025)
      {
        uint64_t v85 = v104[1];
        if (!*(unsigned char *)(v7 + 18) || v104[1] != *(__int16 *)(v7 + 20))
        {
          uint64_t v86 = v103[0];
          *(_WORD *)(v7 + 16) = v103[0];
          *(_WORD *)(v7 + 20) = v85;
          *(unsigned char *)(v7 + 18) = 1;
          uint64_t result = (uint64_t)EvLog_nd("GLO_TIM: GPS->Glo Date transfer", 2, v81, (unsigned __int16)v84, v86, v85);
        }
      }
    }
  }
  if (v41)
  {
    double v87 = (int *)(v2 + 8968);
    uint64_t v88 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v88 + 16) && *(int *)v88 >= 3) {
      int v89 = (int)*(double *)(v88 + 40) + 604800 * *(__int16 *)(v88 + 32);
    }
    else {
      int v89 = 0;
    }
    uint64_t v90 = 0;
    LODWORD(v91) = 0;
    *double v87 = v89;
    uint64_t v92 = p_NV;
    uint64_t v93 = *(void *)(v2 + 8984);
    *(_OWORD *)(p_NV + 168) = *(_OWORD *)v87;
    *(void *)(v92 + 184) = v93;
    uint64_t v94 = v92 + 168;
    __int16 v95 = -9871;
    do
    {
      int v96 = *(unsigned __int8 *)(v94 + v90) ^ HIBYTE(v95);
      __int16 v95 = -12691 * (v95 + (*(unsigned __int8 *)(v94 + v90) ^ HIBYTE(v95))) + 22719;
      uint64_t v91 = (v91 + v96);
      ++v90;
    }
    while (v90 != 24);
    *(void *)(v92 + 160) = v91;
    return (uint64_t)EvLog_v("GM_Cross_Constell: Saving Estimated (GPS-UTC) LeapSec %d to NV_Store", *v6);
  }
  return result;
}

uint64_t GNSS_Event_Log_Ctl(uint64_t result)
{
  if (result)
  {
    if (g_Logging_Cfg)
    {
      int v1 = (char **)result;
      **(unsigned char **)uint64_t result = 0;
      long long v3 = *(char **)result;
      uint64_t v2 = *(char **)(result + 8);
      if (v2 != *(char **)result)
      {
        char v4 = *(char **)result;
        if ((unint64_t)v2 > *(void *)result) {
          char v4 = *(char **)(result + 24);
        }
        unsigned __int16 v5 = (_WORD)v4 - (_WORD)v2;
        if ((_WORD)v4 == (_WORD)v2)
        {
          if ((unint64_t)v2 < *(void *)(result + 24)) {
            goto LABEL_13;
          }
          uint64_t v2 = *(char **)(result + 16);
          *(void *)(result + 8) = v2;
        }
        else
        {
          uint64_t result = GN_GPS_Write_Event_Log((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
          uint64_t v2 = &v1[1][result];
          v1[1] = v2;
          if (v2 < v1[3]) {
            goto LABEL_13;
          }
          uint64_t v2 = v1[2];
          v1[1] = v2;
          if (result != v5) {
            goto LABEL_13;
          }
          long long v3 = *v1;
        }
        uint64_t result = GN_GPS_Write_Event_Log((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
        uint64_t v2 = &v1[1][result];
        v1[1] = v2;
LABEL_13:
        if (v2 == *v1)
        {
          uint64_t v6 = v1[2];
          *int v1 = v6;
          v1[1] = v6;
        }
      }
    }
  }
  return result;
}

const double *ud2cov(const double *a1, double *a2, unsigned int a3)
{
  uint64_t v4 = *(void *)a1;
  uint64_t result = a1 - 1;
  *(void *)a2 = v4;
  unsigned __int16 v5 = a2 - 1;
  if (a3 >= 2)
  {
    if (a3 + 1 > 3) {
      uint64_t v6 = a3 + 1;
    }
    else {
      uint64_t v6 = 3;
    }
    int v7 = 1;
    int v8 = 2;
    unint64_t v9 = 2;
    do
    {
      int v10 = 0;
      int v11 = v7 + v9;
      double v12 = result[(v7 + v9)];
      v5[(v7 + v9)] = v12;
      int v13 = v8;
      uint64_t v14 = 1;
      do
      {
        uint64_t v15 = 0;
        v10 += v14;
        uint64_t v16 = (v7 + v14);
        double v17 = v12 * result[v16];
        int v18 = v10;
        do
        {
          v5[v18] = v5[v18] + v17 * result[(v13 + v15)];
          v18 += v14 + v15++;
        }
        while (v14 + v15 < v9);
        v5[v16] = v17;
        ++v14;
        ++v13;
      }
      while (v14 != v9);
      v8 += v9++;
      int v7 = v11;
    }
    while (v9 != v6);
  }
  return result;
}

uint64_t DOP4_Upd_U_Meas(uint64_t result, double (*a2)[4])
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v3 = a2;
  do
  {
    uint64_t v4 = 0;
    double v5 = (*a2)[v2 + 12];
    uint64_t v6 = (double *)v3;
    do
    {
      double v7 = *v6;
      v6 += 4;
      double v5 = v5 + *(double *)(result + v4) * v7;
      v4 += 8;
    }
    while (v4 != 24);
    v18[v2++] = v5;
    long long v3 = (double (*)[4])((char *)v3 + 8);
  }
  while (v2 != 4);
  uint64_t v8 = 0;
  double v9 = v19;
  do
  {
    double v9 = v9 + v18[v8] * *(double *)(result + v8 * 8);
    ++v8;
  }
  while (v8 != 3);
  uint64_t v10 = 0;
  int v11 = a2;
  double v12 = a2;
  double v13 = -1.0 / (v9 + 1.0);
  do
  {
    double v14 = v18[v10];
    (*a2)[4 * v10 + v10] = (*a2)[4 * v10 + v10] + v13 * v14 * v14;
    if (v10)
    {
      uint64_t v15 = 0;
      uint64_t v16 = (double *)v12;
      do
      {
        double v17 = (*v11)[v15] + v13 * v14 * v18[v15];
        (*v11)[v15] = v17;
        *uint64_t v16 = v17;
        v16 += 4;
        ++v15;
      }
      while (v10 != v15);
    }
    ++v10;
    double v12 = (double (*)[4])((char *)v12 + 8);
    ++v11;
  }
  while (v10 != 4);
  return result;
}

BOOL DOP4_Upd_W_Meas(double *a1, double a2, double (*a3)[4])
{
  uint64_t v4 = 0;
  v24[5] = *(double *)MEMORY[0x263EF8340];
  double v5 = a3;
  do
  {
    uint64_t v6 = 0;
    double v7 = (*a3)[v4 + 12];
    uint64_t v8 = (double *)v5;
    do
    {
      double v9 = *v8;
      v8 += 4;
      double v7 = v7 + a1[v6++] * v9;
    }
    while (v6 != 3);
    v24[++v4] = v7;
    double v5 = (double (*)[4])((char *)v5 + 8);
  }
  while (v4 != 4);
  uint64_t v10 = 0;
  double v11 = v24[4];
  do
  {
    double v11 = v11 + v24[v10 + 1] * a1[v10];
    ++v10;
  }
  while (v10 != 3);
  double v12 = v11 + a2;
  v24[0] = v11 + a2;
  double v23 = 0.0;
  BOOL result = R8_EQ(v24, &v23);
  uint64_t v14 = 0;
  double v15 = 1.0 / v12;
  if (result) {
    double v15 = 0.0;
  }
  double v16 = -v15;
  double v17 = a3;
  int v18 = a3;
  do
  {
    double v19 = v24[v14 + 1];
    (*a3)[4 * v14 + v14] = (*a3)[4 * v14 + v14] + v19 * v16 * v19;
    if (v14)
    {
      uint64_t v20 = 0;
      int v21 = (double *)v18;
      do
      {
        double v22 = (*v17)[v20] + v19 * v16 * v24[v20 + 1];
        (*v17)[v20] = v22;
        *int v21 = v22;
        v21 += 4;
        ++v20;
      }
      while (v14 != v20);
    }
    ++v14;
    int v18 = (double (*)[4])((char *)v18 + 8);
    ++v17;
  }
  while (v14 != 4);
  return result;
}

uint64_t DOP4_Upd_U_Elem(uint64_t result, double (*a2)[4])
{
  uint64_t v2 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v3 = &(*a2)[result + 4];
  do
  {
    *(double *)&long long v4 = *(v3 - 4);
    *((double *)&v4 + 1) = *v3;
    *(_OWORD *)&v13[v2] = v4;
    v3 += 8;
    v2 += 2;
  }
  while (v2 != 4);
  uint64_t v5 = 0;
  double v6 = -1.0 / ((*a2)[4 * result + result] + 1.0);
  double v7 = a2;
  uint64_t v8 = a2;
  do
  {
    double v9 = v13[v5];
    (*a2)[4 * v5 + v5] = (*a2)[4 * v5 + v5] + v6 * v9 * v9;
    if (v5)
    {
      uint64_t v10 = 0;
      double v11 = (double *)v8;
      do
      {
        double v12 = (*v7)[v10] + v6 * v9 * v13[v10];
        (*v7)[v10] = v12;
        *double v11 = v12;
        v11 += 4;
        ++v10;
      }
      while (v5 != v10);
    }
    ++v5;
    uint64_t v8 = (double (*)[4])((char *)v8 + 8);
    ++v7;
  }
  while (v5 != 4);
  return result;
}

double *DOP4_Calc_U(double *result, double *a2)
{
  double v2 = 0.0;
  double v3 = 0.0;
  if (*result > 0.0)
  {
    double v3 = sqrt(*result);
    if (v3 > 99.99) {
      double v3 = 99.99;
    }
  }
  *a2 = v3;
  double v4 = result[5];
  if (v4 > 0.0)
  {
    double v2 = sqrt(v4);
    if (v2 > 99.99) {
      double v2 = 99.99;
    }
  }
  a2[1] = v2;
  double v5 = *result + result[5];
  double v6 = 0.0;
  double v7 = 0.0;
  if (v5 > 0.0)
  {
    double v7 = sqrt(v5);
    if (v7 > 99.99) {
      double v7 = 99.99;
    }
  }
  a2[2] = v7;
  double v8 = result[10];
  if (v8 > 0.0)
  {
    double v6 = sqrt(v8);
    if (v6 > 99.99) {
      double v6 = 99.99;
    }
  }
  a2[3] = v6;
  double v9 = *result + result[5] + result[10];
  double v10 = 0.0;
  double v11 = 0.0;
  if (v9 > 0.0)
  {
    double v11 = sqrt(v9);
    if (v11 > 99.99) {
      double v11 = 99.99;
    }
  }
  a2[4] = v11;
  double v12 = *result + result[5] + result[10] + result[15];
  if (v12 > 0.0)
  {
    double v10 = sqrt(v12);
    if (v10 > 99.99) {
      double v10 = 99.99;
    }
  }
  a2[6] = v10;
  double v13 = result[15];
  double v14 = 0.0;
  if (v13 > 0.0)
  {
    double v14 = sqrt(v13);
    if (v14 > 99.99) {
      double v14 = 99.99;
    }
  }
  a2[5] = v14;
  return result;
}

uint64_t NK_SV_Res_RTests(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 241)) {
    return result;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  uint64_t v76 = (unsigned char *)(a3 + 36563);
  long long v94 = 0u;
  long long v95 = 0u;
  double v79 = (unsigned char *)(a3 + 21659);
  uint64_t v81 = (unsigned __int8 *)(a3 + 6755);
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  memset(v89, 0, sizeof(v89));
  memset(v88, 0, sizeof(v88));
  memset(v87, 0, sizeof(v87));
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  uint64_t v10 = result + 736;
  uint64_t v11 = 7968;
  uint64_t v12 = 12056;
  memset(v84, 0, sizeof(v84));
  do
  {
    *((_DWORD *)v86 + v6) = 0x7FFFFFFF;
    *((_DWORD *)v85 + v6) = 0x7FFFFFFF;
    *((_DWORD *)v84 + v6) = 0x7FFFFFFF;
    if (*(unsigned char *)(a3 + 7064 + v6))
    {
      *((unsigned char *)&v90 + v6) = 1;
      double v13 = *(double *)(a3 + v12);
      unsigned int v14 = (int)v13 >= 0 ? (int)v13 : -(int)v13;
      *((_DWORD *)v86 + v6) = v14;
      double v15 = v13 * v13;
      double v16 = *(double *)(a3 + v12 + 6400);
      if (v15 / v16 >= 2147483650.0)
      {
        int v17 = 0x7FFFFFFF;
      }
      else
      {
        int v17 = (int)(v15 / v16);
        *((_DWORD *)v85 + v6) = v17;
      }
      double v18 = v15 / (v16 - *(double *)(a3 + v11));
      if (v18 >= 2147483650.0)
      {
        int v19 = 0x7FFFFFFF;
      }
      else
      {
        int v19 = (int)v18;
        *((_DWORD *)v84 + v6) = (int)v18;
      }
      if (*(unsigned char *)(a3 + v6 + 57))
      {
        if (v14 > 0x3E7)
        {
          if (v14 > 0xBB7) {
            goto LABEL_27;
          }
        }
        else
        {
          *((unsigned char *)v89 + v6) = 1;
          uint64_t v20 = *(unsigned __int8 *)(v10 + v6);
          if (v20 == 255 || !*((unsigned char *)v89 + v20)) {
            ++v7;
          }
        }
        if (v17 <= 8)
        {
          *((unsigned char *)v88 + v6) = 1;
          uint64_t v21 = *(unsigned __int8 *)(v10 + v6);
          if (v21 == 255 || !*((unsigned char *)v88 + v21)) {
            ++v8;
          }
        }
        if (v19 <= 8)
        {
          *((unsigned char *)v87 + v6) = 1;
          uint64_t v22 = *(unsigned __int8 *)(v10 + v6);
          if (v22 == 255 || !*((unsigned char *)v87 + v22)) {
            ++v9;
          }
        }
      }
    }
LABEL_27:
    ++v6;
    v11 += 24;
    v12 += 8;
  }
  while (v6 != 128);
  memset(v83, 0, sizeof(v83));
  if (v7 <= 0)
  {
    uint64_t v49 = 0;
    v50.i64[0] = 0xC0000000C0000000;
    v50.i64[1] = 0xC0000000C0000000;
    v51.i64[0] = 0xC0000000C0000000;
    v51.i64[1] = 0xC0000000C0000000;
    int v52 = (int32x4_t *)v86;
    v53.i64[0] = 0xC0000000C0000000;
    v53.i64[1] = 0xC0000000C0000000;
    v54.i64[0] = 0xC0000000C0000000;
    v54.i64[1] = 0xC0000000C0000000;
    v55.i64[0] = 0xC0000000C0000000;
    v55.i64[1] = 0xC0000000C0000000;
    v56.i64[0] = 0xC0000000C0000000;
    v56.i64[1] = 0xC0000000C0000000;
    v57.i64[0] = 0xC0000000C0000000;
    v57.i64[1] = 0xC0000000C0000000;
    v58.i64[0] = 0xC0000000C0000000;
    v58.i64[1] = 0xC0000000C0000000;
    do
    {
      int8x16_t v59 = vceqzq_s8(*(int8x16_t *)((char *)&v90 + v49));
      int16x8_t v60 = vmovl_s8(*(int8x8_t *)v59.i8);
      int8x16_t v61 = (int8x16_t)vmovl_s16(*(int16x4_t *)v60.i8);
      int8x16_t v62 = (int8x16_t)vmovl_high_s16(v60);
      int16x8_t v63 = vmovl_high_s8(v59);
      int8x16_t v64 = (int8x16_t)vmovl_s16(*(int16x4_t *)v63.i8);
      int8x16_t v65 = (int8x16_t)vmovl_high_s16(v63);
      int32x4_t v67 = v52[2];
      int32x4_t v66 = v52[3];
      int32x4_t v69 = *v52;
      int32x4_t v68 = v52[1];
      v52 += 4;
      int32x4_t v58 = (int32x4_t)vbslq_s8(v65, (int8x16_t)v58, (int8x16_t)vmaxq_s32(v66, v58));
      int32x4_t v57 = (int32x4_t)vbslq_s8(v64, (int8x16_t)v57, (int8x16_t)vmaxq_s32(v67, v57));
      int32x4_t v56 = (int32x4_t)vbslq_s8(v62, (int8x16_t)v56, (int8x16_t)vmaxq_s32(v68, v56));
      int32x4_t v50 = (int32x4_t)vbslq_s8(v61, (int8x16_t)v50, (int8x16_t)vmaxq_s32(v69, v50));
      int32x4_t v55 = (int32x4_t)vbslq_s8(v65, (int8x16_t)v55, (int8x16_t)vminq_s32(v66, v55));
      int32x4_t v54 = (int32x4_t)vbslq_s8(v64, (int8x16_t)v54, (int8x16_t)vminq_s32(v67, v54));
      int32x4_t v53 = (int32x4_t)vbslq_s8(v62, (int8x16_t)v53, (int8x16_t)vminq_s32(v68, v53));
      int32x4_t v51 = (int32x4_t)vbslq_s8(v61, (int8x16_t)v51, (int8x16_t)vminq_s32(v69, v51));
      v49 += 16;
    }
    while (v49 != 128);
    if (vmaxvq_s32(vmaxq_s32(vmaxq_s32(v50, v57), vmaxq_s32(v56, v58)))
       - vminvq_s32(vminq_s32(vminq_s32(v51, v54), vminq_s32(v53, v55))) > 250000)
      goto LABEL_61;
  }
  else
  {
    uint64_t v23 = 0;
    int v24 = 0;
    do
    {
      if (*((unsigned char *)&v90 + v23))
      {
        int v25 = *((_DWORD *)v86 + v23);
        BOOL v26 = v7 <= 2 || v25 <= 50000;
        BOOL v27 = !v26;
        if (v25 > 250000
          || v27
          || v7 >= 4
          && (v25 > 30000
           || v7 >= 5
           && (v25 > 20000
            || v7 >= 6
            && (v7 > 6 ? (BOOL v29 = v25 <= 10000) : (BOOL v29 = 1), v29 ? (v30 = 0) : (v30 = 1), v25 > 15000 || v30))))
        {
          *((unsigned char *)v83 + v23) = 1;
          uint64_t v28 = *(unsigned __int8 *)(result + 736 + v23);
          if (v28 == 255 || !*((unsigned char *)v83 + v28)) {
            ++v24;
          }
          *((unsigned char *)&v90 + v23) = 0;
        }
      }
      ++v23;
    }
    while (v23 != 128);
    if (v24 >= 1 && v7 < v24 + 3)
    {
LABEL_61:
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
    }
  }
  uint64_t v82 = result;
  int v75 = v8;
  if (v8 >= 7)
  {
    if (*(int *)(a3 + 20) <= 7) {
      goto LABEL_81;
    }
LABEL_67:
    uint64_t v31 = 0;
    while (2)
    {
      if (*((unsigned char *)&v90 + v31))
      {
        double v32 = *(double *)(a3 + 12056 + 8 * v31);
        if (v32 < -35.0 || v32 > 350.0)
        {
          int v33 = *((_DWORD *)v85 + v31);
          int v34 = *((_DWORD *)v84 + v31);
          if (v33 > 80 || v34 > 255)
          {
LABEL_79:
            *((unsigned char *)&v90 + v31) = 0;
            GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(result + 4 * v31 + 96));
            EvCrt_v("NK_SV_Res_RTests:  %d  %s  Reasonableness Fail, PR Ratios  T %d  xS %d", v31, GNSS_SV_Str, v33, v34);
            BOOL result = v82;
          }
          else if (v9 < 5 || v33 < 36)
          {
            if (v33 >= 16) {
              goto LABEL_78;
            }
          }
          else
          {
            if (!*(unsigned char *)(a3 + v31 + 2010)) {
              goto LABEL_79;
            }
LABEL_78:
            if (*(unsigned __int8 *)(result + v31 + 1760) - 1 <= *(unsigned __int8 *)(result + v31 + 2016)) {
              goto LABEL_79;
            }
          }
        }
      }
      if (++v31 == 128) {
        goto LABEL_81;
      }
      continue;
    }
  }
  if (v8 == 6 && *(int *)(a3 + 20) >= 9) {
    goto LABEL_67;
  }
LABEL_81:
  uint64_t v36 = 0;
  uint64_t v74 = a2;
  uint64_t v77 = a2 + 14208;
  uint64_t v78 = a4 + 576;
  uint64_t v37 = a3 + 36872;
  unsigned int v38 = v79 + 565;
  uint64_t v39 = a3 + 21968;
  uint64_t v40 = a3 + 7064;
  do
  {
    if (*(unsigned char *)(v40 + v36) && !*((unsigned char *)&v90 + v36))
    {
      *(unsigned char *)(v40 + v36) = 0;
      *(_DWORD *)(a3 + 7320 + 4 * v36) = 16;
      --*v81;
      ++v81[1];
      int v41 = *(unsigned __int8 *)(v39 + v36);
      if (*(unsigned char *)(v39 + v36))
      {
        *(unsigned char *)(v39 + v36) = 0;
        *unsigned int v38 = 16;
        --*v79;
        ++v79[1];
      }
      if (*(unsigned char *)(v37 + v36))
      {
        *(unsigned char *)(v37 + v36) = 0;
        v38[3726] = 16;
        --*v76;
        ++v76[1];
      }
      uint64_t v42 = result + v36;
      if (*(unsigned __int8 *)(result + v36 + 2016) >= *(unsigned __int8 *)(result + v36 + 1760))
      {
        *(unsigned char *)(v77 + v36) = 0;
        if (v41) {
          char v43 = 13;
        }
        else {
          char v43 = 9;
        }
        *(unsigned char *)(a4 + v36 + 448) = v43;
        *(_DWORD *)(v78 + 4 * v36) = *(_DWORD *)a3;
        uint64_t v44 = Get_GNSS_SV_Str(*(unsigned int *)(result + 4 * v36 + 96));
        EvCrt_v("ChanReset %d : NKSVRT3  %s  JNR %d >= SNR %d   PR_Res %d   DO_Res %d", v36, v44, *(unsigned __int8 *)(v42 + 2016), *(unsigned __int8 *)(v42 + 1760), *(unsigned __int8 *)(v40 + v36), *(unsigned __int8 *)(v39 + v36));
        BOOL result = v82;
      }
      if (fabs(*(double *)(a3 + 12056 + 8 * v36)) > 150000.0
        && (~*(unsigned __int16 *)(result + 2 * v36 + 992) & 0x300) == 0)
      {
        *(unsigned char *)(v77 + v36) = 0;
        *(unsigned char *)(a4 + v36 + 448) = 11;
        *(_DWORD *)(v78 + 4 * v36) = *(_DWORD *)a3;
        double v45 = Get_GNSS_SV_Str(*(unsigned int *)(result + 4 * v36 + 96));
        EvCrt_v("ChanReset %d : NKSVRT4  %s  Exact_SF_Sync  Int_PR_Res %d ms   Num_Fit %d %d", v36, v45, *((_DWORD *)v86 + v36), v75, v9);
        BOOL result = v82;
      }
    }
    ++v36;
    ++v38;
  }
  while (v36 != 128);
  if (!*(unsigned char *)(v74 + 241)
    && *(_DWORD *)(v74 + 27120) <= *(unsigned __int16 *)(v74 + 16)
    && *(_DWORD *)(a3 + 1872) == 1)
  {
    unsigned int v46 = *(_DWORD *)(v74 + 148);
    if (v46 >= *(_DWORD *)(v74 + 152)) {
      unsigned int v46 = *(_DWORD *)(v74 + 152);
    }
    if (v46 >= *(_DWORD *)(v74 + 156)) {
      unsigned int v46 = *(_DWORD *)(v74 + 156);
    }
    if (v46 >= 0xB)
    {
      if (v7 >= 3 && v9 >= 3)
      {
        if (v9 <= 5)
        {
          if (v9 == 5)
          {
            int v47 = 3;
            int v48 = 16;
          }
          else
          {
            if (v9 <= 3) {
              int v48 = 25;
            }
            else {
              int v48 = 20;
            }
            if (v9 > 3) {
              int v47 = 4;
            }
            else {
              int v47 = 5;
            }
          }
        }
        else
        {
          int v47 = 2;
          int v48 = 13;
        }
        uint64_t v70 = 0;
        uint64_t v71 = a3 + 7064;
        do
        {
          if (*(unsigned char *)(v71 + v70))
          {
            if (*((_DWORD *)v84 + v70) > v48 && *((_DWORD *)v85 + v70) > v47 && !*(unsigned char *)(a3 + v70 + 2010))
            {
              double v72 = *(double *)(a3 + 12056 + 8 * v70);
              if (v72 < -35.0 || v72 > 350.0)
              {
                *(unsigned char *)(v71 + v70) = 0;
                *(_DWORD *)(v71 + 4 * v70 + 256) = 17;
                --*v81;
                ++v81[1];
              }
            }
          }
          ++v70;
        }
        while (v70 != 128);
      }
      if (*v81 <= 3u && !*(unsigned char *)(v74 + 241))
      {
        uint64_t v73 = 0;
        while (!*(unsigned char *)(a3 + 7064 + v73)
             || *(unsigned char *)(a3 + 2010 + v73)
             || *(unsigned __int16 *)(result + 2400 + 2 * v73) > 0x7CFu
             || *((int *)v85 + v73) <= 36 && *((int *)v84 + v73) < 401)
        {
          if (++v73 == 128) {
            return result;
          }
        }
        *(_OWORD *)(a3 + 7160) = 0u;
        *(_OWORD *)(a3 + 7176) = 0u;
        *(_OWORD *)(a3 + 7128) = 0u;
        *(_OWORD *)(a3 + 7144) = 0u;
        *(_OWORD *)(a3 + 7096) = 0u;
        *(_OWORD *)(a3 + 7112) = 0u;
        *(_OWORD *)(a3 + 7064) = 0u;
        *(_OWORD *)(a3 + 7080) = 0u;
        *(_OWORD *)(a3 + 21968) = 0u;
        *(_OWORD *)(a3 + 21984) = 0u;
        *(_OWORD *)(a3 + 22000) = 0u;
        *(_OWORD *)(a3 + 22016) = 0u;
        *(_OWORD *)(a3 + 22032) = 0u;
        *(_OWORD *)(a3 + 22048) = 0u;
        *(_OWORD *)(a3 + 22064) = 0u;
        *(_OWORD *)(a3 + 22080) = 0u;
        *(_OWORD *)(a3 + 36872) = 0u;
        *(_OWORD *)(a3 + 36888) = 0u;
        *(_OWORD *)(a3 + 36904) = 0u;
        *(_OWORD *)(a3 + 36920) = 0u;
        *(_OWORD *)(a3 + 36936) = 0u;
        *(_OWORD *)(a3 + 36952) = 0u;
        *(_OWORD *)(a3 + 36968) = 0u;
        *(_OWORD *)(a3 + 36984) = 0u;
        *uint64_t v81 = 0;
        *double v79 = 0;
        *uint64_t v76 = 0;
      }
    }
  }
  return result;
}

BOOL NK_SV_Res_RTests_Riskier_SVs(uint64_t a1, uint64_t a2)
{
  double v2 = (unsigned char *)(a2 + 36563);
  double v3 = (unsigned char *)(a2 + 21659);
  double v4 = (unsigned char *)(a2 + 6755);
  if (*(int *)(a2 + 1868) >= 3 && *(double *)(a2 + 61936) <= 100.0 && *(double *)(a2 + 61952) <= 100.0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 22224;
    uint64_t v14 = 21968;
    uint64_t v15 = 7320;
    uint64_t v16 = 12056;
    uint64_t v17 = 7064;
    uint64_t v18 = 36872;
    while (1)
    {
      BOOL result = NK_Is_Riskier_SV(v12, a1);
      if (result)
      {
        if (*(unsigned char *)(a2 + v17) && (double v19 = *(double *)(a2 + v16 + 6400), v19 > 0.0) && *(unsigned char *)(a2 + v12 + 57))
        {
          if (*(double *)(a2 + v16) * *(double *)(a2 + v16) / fmin(v19, 10000.0) <= 9.0) {
            goto LABEL_29;
          }
          *(unsigned char *)(a2 + v17) = 0;
          *(_DWORD *)(a2 + v15) = 16;
          --*v4;
          ++v4[1];
          if (*(unsigned char *)(a2 + v14))
          {
            *(unsigned char *)(a2 + v14) = 0;
            *(_DWORD *)(a2 + v13) = 16;
            --*v3;
            ++v3[1];
          }
          if (!*(unsigned char *)(a2 + v18)) {
            goto LABEL_29;
          }
          uint64_t v20 = (unsigned char *)(a2 + v12 + 36872);
        }
        else
        {
          if (*(unsigned char *)(a2 + v12 + 57)) {
            goto LABEL_29;
          }
          if (*(unsigned char *)(a2 + v14))
          {
            *(unsigned char *)(a2 + v14) = 0;
            *(_DWORD *)(a2 + v13) = 16;
            --*v3;
            ++v3[1];
          }
          uint64_t v20 = (unsigned char *)(a2 + v18);
          if (!*(unsigned char *)(a2 + v18)) {
            goto LABEL_29;
          }
        }
        *uint64_t v20 = 0;
        *(_DWORD *)(a2 + v13 + 14904) = 16;
        --*v2;
        ++v2[1];
      }
LABEL_29:
      ++v12;
      ++v18;
      v13 += 4;
      ++v14;
      v15 += 4;
      v16 += 8;
      ++v17;
      if (v12 == 128) {
        return result;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2 + 36872;
  int v7 = (_DWORD *)(a2 + 22224);
  uint64_t v8 = a2 + 21968;
  uint64_t v9 = a2 + 7320;
  uint64_t v10 = a2 + 7064;
  do
  {
    BOOL result = NK_Is_Riskier_SV(v5, a1);
    if (result)
    {
      if (*(unsigned char *)(v10 + v5))
      {
        *(unsigned char *)(v10 + v5) = 0;
        *(_DWORD *)(v9 + 4 * v5) = 19;
        --*v4;
        ++v4[1];
      }
      if (*(unsigned char *)(v8 + v5))
      {
        *(unsigned char *)(v8 + v5) = 0;
        *int v7 = 19;
        --*v3;
        ++v3[1];
      }
      if (*(unsigned char *)(v6 + v5))
      {
        *(unsigned char *)(v6 + v5) = 0;
        v7[3726] = 19;
        --*v2;
        ++v2[1];
      }
    }
    ++v5;
    ++v7;
  }
  while (v5 != 128);
  return result;
}

BOOL NK_Is_Riskier_SV(int a1, uint64_t a2)
{
  uint64_t v2 = a2 + 4 * a1;
  int v5 = *(unsigned __int8 *)(v2 + 96);
  uint64_t v3 = v2 + 96;
  int v4 = v5;
  BOOL result = 0;
  if (v5)
  {
    if (v4 == 3)
    {
      int v6 = *(unsigned __int8 *)(v3 + 2);
      if (v6 == 14 || v6 == 18) {
        return 1;
      }
    }
    if (!*(unsigned char *)(v3 + 1)
      && *(int *)(a2 + 4 * a1 + 1248) >= 10
      && *(unsigned __int8 *)(a2 + a1 + 1760) + 20 <= *(unsigned __int8 *)(a2 + 92)
      && fabs(*(double *)(a2 + 8 * a1 + 4448)) <= 38.0587346)
    {
      return 1;
    }
  }
  return result;
}

void NK_SV_Res_RTests_FDist(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (*(int *)(a4 + 20) < 6) {
    return;
  }
  int v6 = (double *)(a4 + 61736);
  int v7 = (char *)(a4 + 6755);
  unsigned int v8 = a1 - 8;
  bzero(v57, 0x400uLL);
  unint64_t v9 = 0;
  memset(v56, 0, sizeof(v56));
  do
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 736 + v9);
    if (v10 == 255)
    {
      char v11 = 1;
      unint64_t v10 = v9;
      goto LABEL_22;
    }
    if (v9 > v10) {
      goto LABEL_23;
    }
    if (*(unsigned char *)(a4 + 7064 + v9) && *(unsigned char *)(a4 + 57 + v9))
    {
      if (!*(unsigned char *)(a4 + v10 + 7064)) {
        goto LABEL_19;
      }
      char v11 = *(unsigned char *)(a4 + v10 + 57);
      if (v11)
      {
        double v12 = fabs(*(double *)(a4 + 12056 + 8 * v9));
        if ((v12 >= 50.0 || fabs(*(double *)(a4 + 8 * v10 + 12056)) >= 50.0)
          && (v12 < 50.0 || fabs(*(double *)(a4 + 8 * v10 + 12056)) < 50.0))
        {
          char v13 = 1;
          goto LABEL_18;
        }
LABEL_19:
        char v11 = 0;
      }
      char v13 = 1;
LABEL_21:
      *((unsigned char *)v56 + v9) = v13;
LABEL_22:
      *((unsigned char *)v56 + v10) = v11;
      goto LABEL_23;
    }
    if (*(unsigned char *)(a4 + v10 + 7064) && *(unsigned char *)(a4 + v10 + 57))
    {
      char v13 = 0;
LABEL_18:
      char v11 = 1;
      goto LABEL_21;
    }
LABEL_23:
    ++v9;
  }
  while (v9 != 128);
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  int v18 = 0;
  double v19 = 0.0;
  do
  {
    if (*(unsigned char *)(a4 + 7064 + v14) && *(unsigned char *)(a4 + 57 + v14))
    {
      double v20 = *(double *)(a4 + 12056 + 8 * v14);
      v57[v14] = v20 * v20;
      double v21 = fabs(v20);
      if (v20 > -50.0) {
        unsigned int v22 = v15;
      }
      else {
        unsigned int v22 = v15 + 1;
      }
      if (v20 < 50.0) {
        unsigned int v23 = v16;
      }
      else {
        unsigned int v23 = v16 + 1;
      }
      if (v20 >= 50.0) {
        unsigned int v22 = v15;
      }
      if (v21 >= 50.0) {
        unsigned int v24 = v17;
      }
      else {
        unsigned int v24 = v17 + 1;
      }
      if (v21 < 50.0)
      {
        unsigned int v23 = v16;
        unsigned int v22 = v15;
      }
      double v19 = v19 + v20 * v20;
      if (*((unsigned char *)v56 + v14))
      {
        unsigned int v17 = v24;
        unsigned int v16 = v23;
        unsigned int v15 = v22;
      }
      ++v18;
    }
    ++v14;
  }
  while (v14 != 128);
  uint64_t v25 = 0;
  if (v8 >= 0xFFFFFFFD) {
    int v26 = 5;
  }
  else {
    int v26 = 7;
  }
  if (v8 >= 0xFFFFFFFD) {
    int v27 = 7;
  }
  else {
    int v27 = 9;
  }
  unsigned int v52 = v16 + v17;
  BOOL v28 = v15 > 1 && v16 > 1;
  unsigned int v29 = v16 >> 1;
  double v30 = *v6;
  double v31 = v6[1];
  if (!v28) {
    unsigned int v29 = 0;
  }
  int v32 = v29 + v26;
  unsigned int v51 = v29 + v27;
  BOOL v50 = *(_DWORD *)(a4 + 1872) == 1 && v29 + v27 < 0xA;
  if (v50) {
    int v33 = 8;
  }
  else {
    int v33 = v32;
  }
  unsigned int v53 = v33;
  double v34 = v6[2];
  memset(v55, 0, sizeof(v55));
  BOOL v35 = (unsigned char *)(a2 + 96);
  do
  {
    if (*(unsigned char *)(a4 + 7064 + v25) && *(unsigned char *)(a4 + 57 + v25))
    {
      switch(*v35)
      {
        case 0:
        case 7:
          EvCrt_Illegal_switch_case("NK_SV_Res_RTests_FDist", 0x353u);
          break;
        case 1:
        case 3:
        case 5:
        case 6:
          if (v30 < 160000.0) {
            goto LABEL_68;
          }
          break;
        case 2:
          if (v31 < 160000.0) {
            goto LABEL_68;
          }
          break;
        case 4:
          if (v34 < 160000.0) {
LABEL_68:
          }
            *((unsigned char *)v55 + v25) = 1;
          break;
        default:
          break;
      }
    }
    ++v25;
    v35 += 4;
  }
  while (v25 != 128);
  unsigned int v36 = v52 + v15;
  if (v50) {
    unsigned int v37 = 10;
  }
  else {
    unsigned int v37 = v51;
  }
  if (v36 > 0x30) {
    unsigned int v36 = 47;
  }
  if (*(unsigned char *)(a3 + 241)
    || *(_DWORD *)(a3 + 27120) > *(unsigned __int16 *)(a3 + 16)
    || *(_DWORD *)(a4 + 1872) != 1)
  {
    goto LABEL_85;
  }
  unsigned int v38 = *(_DWORD *)(a3 + 148);
  if (v38 >= *(_DWORD *)(a3 + 152)) {
    unsigned int v38 = *(_DWORD *)(a3 + 152);
  }
  if (v38 >= *(_DWORD *)(a3 + 156)) {
    unsigned int v38 = *(_DWORD *)(a3 + 156);
  }
  if (v38 < 0xB || *(int *)(a4 + 20) <= 9)
  {
LABEL_85:
    double v39 = 1000.0;
    if (v17 > 0xE) {
      double v39 = 100.0;
    }
  }
  else
  {
    double v39 = 100.0;
  }
  if (v17 >= v53)
  {
    uint64_t v40 = a4 + 7064;
    do
    {
      if (v36 < v37) {
        break;
      }
      uint64_t v41 = 0;
      char v42 = 0;
      uint64_t v43 = -128;
      uint64_t v44 = (_DWORD *)(a4 + 7320);
      do
      {
        if (v36 >= v37)
        {
          char v45 = *v7;
          if (*v7)
          {
            if (*((unsigned char *)&v55[8] + v43))
            {
              double v46 = *(double *)(v40 + v41 * 8 + 4992);
              if (v46 < -50.0 || v46 > v39)
              {
                double v48 = v57[v41];
                if (v48 / ((v19 - v48) / (double)(v18 - 1)) > NK_SV_Res_RTests_FDist(e_CTXT_SES,s_DB_Track_Meas const*,s_Nav_Kalman_SD *,s_Nav_Kalman_WD *)::F_table[v36 - 1])
                {
                  *(unsigned char *)(v40 + v43 + 128) = 0;
                  *uint64_t v44 = 18;
                  BOOL v49 = *((unsigned char *)&v56[8] + v43) == 0;
                  ++v7[1];
                  *int v7 = v45 - 1;
                  if (!v49) {
                    --v36;
                  }
                  char v42 = 1;
                  --v18;
                  double v19 = v19 - v48;
                }
              }
            }
          }
        }
        ++v41;
        ++v43;
        ++v44;
      }
      while (v41 != 128);
    }
    while ((v42 & 1) != 0);
  }
}

uint64_t Init_DB_Sensor(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = result + 26056;
  *(void *)(result + 280) = result + 456;
  *(void *)(result + 288) = result + 26056;
  *(void *)(result + 240) = result + 456;
  *(void *)(result + 296) = 0x32000000020;
  *(_DWORD *)(result + 304) = 25600;
  uint64_t v3 = result + 308;
  do
  {
    *(void *)(v3 + 8 * v1 - 60) = *(void *)(result + 280);
    *(unsigned char *)(v3 + v1++) = 0;
  }
  while (v1 != 4);
  uint64_t v4 = 0;
  uint64_t v5 = result + 51656;
  *(void *)(result + 352) = v2;
  *(void *)(result + 360) = result + 51656;
  *(void *)(result + 312) = v2;
  *(void *)(result + 368) = 0x32000000020;
  *(_DWORD *)(result + 376) = 25600;
  uint64_t v6 = result + 380;
  do
  {
    *(void *)(v6 + 8 * v4 - 60) = *(void *)(result + 352);
    *(unsigned char *)(v6 + v4++) = 0;
  }
  while (v4 != 4);
  uint64_t v7 = 0;
  *(void *)(result + 424) = v5;
  *(void *)(result + 432) = result + 55256;
  *(void *)(result + 384) = v5;
  *(void *)(result + 440) = 0x9600000018;
  *(_DWORD *)(result + 448) = 3600;
  uint64_t v8 = result + 452;
  do
  {
    *(void *)(v8 + 8 * v7 - 60) = *(void *)(result + 424);
    *(unsigned char *)(v8 + v7++) = 0;
  }
  while (v7 != 4);
  return result;
}

const void **GNSS_HL_System_Run_Update(uint64_t a1)
{
  SV_Data_Decode_Update_Wrapper(a1);
  SV_Gen_Meas_Update_Wrapper(a1);
  SV_State_Update_Wrapper(a1);
  Nav_Kalman_Update_Wrapper(a1);

  return Pre_Positioning_Update_Wrapper(a1);
}

double STANAG_WGS84_Mean_Sea_Level(double *a1)
{
  double v1 = a1[1];
  double v2 = 1.57079633 - *a1;
  if (v2 < 0.0) {
    double v2 = 0.0;
  }
  double v3 = v2 * 5.72957795;
  if (v1 < 0.0) {
    double v1 = v1 + 6.28318531;
  }
  if (v2 > 3.14159265) {
    double v3 = 18.0;
  }
  int v4 = vcvtmd_s64_f64(v3);
  double v5 = v1 * 5.72957795;
  signed int v6 = vcvtmd_s64_f64(v5);
  if (v4 <= 0)
  {
    int v10 = 37 * v4;
    LODWORD(v11) = v6 + 1;
    double v8 = 13.0;
    double v9 = 13.0;
    goto LABEL_14;
  }
  double v7 = -30.0;
  if (v4 <= 0x11)
  {
    uint64_t v12 = 37 * v4 - 37;
    uint64_t v11 = v6 + 1;
    double v9 = (double)STANAG_Geoid_Table[(int)v12 + (uint64_t)v6];
    double v8 = (double)STANAG_Geoid_Table[v12 + v11];
    if (v4 == 17) {
      goto LABEL_12;
    }
    int v10 = 37 * v4;
LABEL_14:
    double v7 = (double)STANAG_Geoid_Table[v10 + (uint64_t)v6];
    double v13 = (double)STANAG_Geoid_Table[v10 + (uint64_t)(int)v11];
    goto LABEL_15;
  }
  double v8 = -30.0;
  double v9 = -30.0;
LABEL_12:
  double v13 = -30.0;
LABEL_15:
  double v14 = v3 - floor(v3);
  double v15 = v5 - floor(v5);
  return (1.0 - v15) * v14 * ((1.0 - v15) * v14) * ((1.0 - v15 + v14) * -6.0 + 9.0 + (1.0 - v15) * v14 * 4.0) * v7
       + (1.0 - v15)
       * (1.0 - v14)
       * ((1.0 - v15)
        * (1.0 - v14))
       * ((1.0 - v15 + 1.0 - v14) * -6.0 + 9.0 + (1.0 - v15) * (1.0 - v14) * 4.0)
       * v9
       + v15 * (1.0 - v14) * (v15 * (1.0 - v14)) * ((v15 + 1.0 - v14) * -6.0 + 9.0 + v15 * (1.0 - v14) * 4.0) * v8
       + v15 * v14 * (v15 * v14) * ((v15 + v14) * -6.0 + 9.0 + v15 * v14 * 4.0) * v13;
}

double *NK_DT_Synch_ProcNoise(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2 + 59984;
  double v20 = 0.0;
  double v4 = 0.0;
  if (!*(unsigned char *)(a1 + 136))
  {
    if (*(unsigned char *)(a2 + 62457))
    {
      double v6 = *(double *)(a2 + 61384);
      if (v6 <= 1.0)
      {
        if (v6 < 0.0000000025)
        {
          double v20 = 0.0000000025;
          double v4 = 0.0000000025;
        }
      }
      else
      {
        double v7 = *(double *)(a2 + 62504) * *(double *)(a2 + 62504);
        double v8 = *(double *)(a2 + 61776);
        if (v7 <= v8 * 4.0)
        {
          if (v8 < 40000.0)
          {
            double v9 = v8 - v6;
            if (v8 - v6 > 0.0)
            {
              double v10 = v7 <= 1.0 ? v9 * 0.15 : v9 * 0.15 + v7 * 0.02;
              double v4 = v10 <= v9 ? v10 : v8 - v6;
              double v20 = v4;
              if (*(unsigned char *)v3 && *(_DWORD *)(a2 + 59988) == 1)
              {
                double v11 = *(double *)(a2 + 60016);
                BOOL v12 = v11 >= v8 || v11 <= v6;
                if (!v12 && v4 > v11 - v6)
                {
                  double v20 = v11 - v6;
                  double v4 = v11 - v6;
                }
              }
            }
          }
        }
        else
        {
          double v4 = v7 / 2.25 - v6;
          double v20 = v4;
          if (v4 < 0.0)
          {
            double v20 = 0.0;
            double v4 = 0.0;
          }
        }
        if (v6 + v4 < 4.0)
        {
          double v4 = 4.0 - v6;
          double v20 = 4.0 - v6;
        }
      }
      *(void *)&v21[0] = 0;
      if (!R8_EQ(&v20, (const double *)v21)) {
        *(double *)(v3 + 1400) = v6 + v4;
      }
    }
    if (!*(unsigned char *)(a2 + 24) && *(_DWORD *)(v3 + 4) == 1 && (*(unsigned char *)v3 || *(unsigned char *)(v3 + 16)))
    {
      double v13 = *(double *)(v3 + 24) - *(double *)(a2 + 1672);
      double v14 = v13 * v13;
      if (v14 > 100.0)
      {
        double v15 = *(double *)(v3 + 1400);
        double v16 = *(double *)(v3 + 40) + v15;
        if (v14 > v16 * 16.0)
        {
          double v4 = v14 / 9.0 - v16;
          double v20 = v4;
          *(double *)(v3 + 1400) = v15 + v4;
        }
      }
    }
  }
  *(void *)&v21[0] = 0;
  BOOL result = (double *)R8_EQ(&v20, (const double *)v21);
  if ((result & 1) == 0)
  {
    memset(v21, 0, sizeof(v21));
    uint64_t v22 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v23 = 0x3FF0000000000000;
    if (v4 > 0.0) {
      BOOL result = rnk1_core((double *)(a1 + 976), 6u, v4, (double *)v21, &v19);
    }
    double v18 = *(double *)(v3 + 1400);
    *(double *)(v3 + 1496) = v18;
    *(double *)(v3 + 1592) = sqrt(v18);
  }
  return result;
}

uint64_t DD_Assist_NVIC_Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4 = (float64x2_t *)a3;
  uint64_t v7 = 0;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v70 = a3 + 50552;
  double v8 = (void *)(a3 + 47576);
  int v73 = a1 - 241;
  do
  {
    if (*(unsigned __int8 *)(v7 + a2 + 165) <= 0xA5u
      && (!*(unsigned char *)(v8[8] + v7) || (v73 - *((_DWORD *)v4[2981].f64 + 19 * v7)) <= 0xFFFFF806))
    {
      memset(v74, 0, 76);
      if (!Core_Get_NVIC_Eph((v7 + 1), a1, v74)) {
        goto LABEL_9;
      }
      uint64_t v9 = v8[8];
      if (*(unsigned char *)(v9 + v7))
      {
        double v10 = (_DWORD *)&v4[2981] + 19 * v7;
        if (SLODWORD(v74[0]) <= *v10 && (int)a1 - *v10 > -1801)
        {
LABEL_9:
          uint64_t v11 = v8[3];
          *(void *)(v8[2] + 20 * v7 + 8) = 0;
          *(void *)(v11 + 20 * v7 + 8) = 0;
          goto LABEL_33;
        }
        int v12 = BYTE10(v74[0]);
        if (LODWORD(v74[0]) - *v10 <= 10799 && Is_NVIC_IntEph_Real((uint64_t)v10) && !Is_NVIC_IntEph_Real((uint64_t)v74))
        {
          *double v10 = a1;
          double v4 = (float64x2_t *)a3;
          goto LABEL_33;
        }
      }
      else
      {
        int v12 = BYTE10(v74[0]);
      }
      BOOL v13 = v12 == 0;
      uint64_t v14 = *v8;
      if (*(unsigned char *)(*v8 + v7)) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == 0;
      }
      if (v15)
      {
        double v4 = (float64x2_t *)a3;
        if (*(unsigned char *)(v8[10] + v7)) {
          BOOL v13 = *(unsigned char *)(a3 + 52 * v7 + 49833) == 0;
        }
        else {
          BOOL v13 = 1;
        }
      }
      else
      {
        double v4 = (float64x2_t *)a3;
      }
      double v16 = (char *)v4 + 76 * v7;
      long long v17 = v74[0];
      *((_OWORD *)v16 + 2982) = v74[1];
      long long v18 = v74[3];
      *((_OWORD *)v16 + 2983) = v74[2];
      *((_OWORD *)v16 + 2984) = v18;
      int v19 = v16 + 47696;
      *((_OWORD *)v16 + 2981) = v17;
      *(_OWORD *)(v16 + 47756) = *(_OWORD *)((char *)&v74[3] + 12);
      *(unsigned char *)(v8[4] + v7) = 1;
      *(unsigned char *)(v9 + v7) = 1;
      *(unsigned char *)(v14 + v7) = 0;
      double v20 = (void *)v8[1];
      *((unsigned char *)v20 + v7) = v13;
      int v21 = *((_DWORD *)v16 + 11925);
      if (v13) {
        int v22 = 1;
      }
      else {
        int v22 = 2;
      }
      uint64_t v23 = v8[2];
      if (v21 == 5)
      {
        *(_DWORD *)(v23 + 20 * v7 + 8) = v22;
        long long v24 = (int *)(v8[3] + 20 * v7 + 8);
      }
      else
      {
        *(_DWORD *)(v23 + 20 * v7 + 12) = v22;
        long long v24 = (int *)(v8[3] + 20 * v7 + 12);
      }
      *long long v24 = v22;
      if ((int)a1 >= 1)
      {
        *(unsigned char *)(v8[11] + v7) = 1;
        Core_Save_NVIC_Eph((v7 + 1), 0, v19);
        double v20 = (void *)v8[1];
      }
      uint64_t v25 = 0;
      LODWORD(v26) = 0;
      uint64_t v27 = p_NV;
      uint64_t v28 = p_NV + 26968;
      uint64_t v29 = *(void *)((char *)v20 + 6);
      *(void *)(p_NV + 26980) = *v20;
      *(void *)(v28 + 18) = v29;
      uint64_t v30 = v27 + 26976;
      __int16 v31 = -9871;
      do
      {
        int v32 = *(unsigned __int8 *)(v30 + v25) ^ HIBYTE(v31);
        __int16 v31 = -12691 * (v31 + (*(unsigned __int8 *)(v30 + v25) ^ HIBYTE(v31))) + 22719;
        uint64_t v26 = (v26 + v32);
        ++v25;
      }
      while (v25 != 24);
      *(void *)(v27 + 26968) = v26;
    }
LABEL_33:
    ++v7;
  }
  while (v7 != 14);
  if ((int)a1 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = a2 + 165;
    long long v35 = v8 + 148;
    do
    {
      if (*(unsigned char *)(v8[1] + v33)
        && !*(unsigned char *)(*(void *)(a4 + 1648) + v33)
        && *(unsigned __int8 *)(v34 + v33) <= 0xA5u
        && (!*(unsigned char *)(v8[9] + v33) || (int)a1 - *(_DWORD *)v35 >= 241))
      {
        memset(v74, 0, 76);
        int NVIC_IntEph = EE_Get_NVIC_IntEph((XofSvcsIf *)(v33 + 1), a1, (uint64_t)v74);
        uint64_t v37 = v8[9];
        if (!NVIC_IntEph || *(unsigned char *)(v37 + v33) && SLODWORD(v74[0]) <= *(_DWORD *)v35)
        {
          *(unsigned char *)(v37 + v33) = 0;
        }
        else
        {
          *(_OWORD *)((char *)v35 + 60) = *(_OWORD *)((char *)&v74[3] + 12);
          long long v38 = v74[3];
          v35[2] = v74[2];
          double v35[3] = v38;
          long long v39 = v74[1];
          *long long v35 = v74[0];
          v35[1] = v39;
          *(unsigned char *)(v8[4] + v33) = 1;
          *(unsigned char *)(v37 + v33) = 1;
          Debug_Log_NVC_Eph(2, (uint64_t)v74);
        }
      }
      ++v33;
      long long v35 = (_OWORD *)((char *)v35 + 76);
    }
    while (v33 != 14);
  }
  uint64_t v40 = 0;
  HIDWORD(v74[0]) = 0;
  LOWORD(v74[1]) = 0;
  DWORD1(v74[1]) = 0;
  WORD4(v74[1]) = 0;
  *(void *)&v74[0] = 0;
  *(_DWORD *)((char *)v74 + 7) = 0;
  memset((char *)&v74[1] + 12, 0, 21);
  while (2)
  {
    if ((!*(unsigned char *)(v8[10] + v40) || (int)a1 - *((_DWORD *)v4[3114].f64 + 13 * v40) >= 1801)
      && Core_Get_NVIC_Alm((v40 + 1), a1, (uint64_t)v74))
    {
      uint64_t v41 = v8[10];
      if (!*(unsigned char *)(v41 + v40) || SLODWORD(v74[0]) > *((_DWORD *)v4[3114].f64 + 13 * v40))
      {
        BOOL v42 = BYTE9(v74[0]) == 0;
        uint64_t v43 = (void *)v8[1];
        if (*((unsigned char *)v43 + v40) | BYTE9(v74[0])) {
          goto LABEL_65;
        }
        uint64_t v44 = v8[8];
        if (*(unsigned char *)(v44 + v40))
        {
          int v45 = *((_DWORD *)v4[2981].f64 + 19 * v40);
          if (*((unsigned char *)&v4[2981].f64[1] + 76 * v40 + 2)) {
            BOOL v46 = v45 + 3600 <= (int)a1;
          }
          else {
            BOOL v46 = 1;
          }
          if (!v46)
          {
            BOOL v42 = 0;
            goto LABEL_65;
          }
          if (v45 + 100 < (int)a1)
          {
            *(unsigned char *)(v8[4] + v40) = 0;
            *(unsigned char *)(v44 + v40) = 0;
          }
        }
        BOOL v42 = 1;
LABEL_65:
        int v47 = (char *)v4 + 52 * v40;
        long long v48 = v74[1];
        *((_OWORD *)v47 + 3114) = v74[0];
        *((_OWORD *)v47 + 3115) = v48;
        *((_OWORD *)v47 + 3116) = v74[2];
        *((_DWORD *)v47 + 12468) = v74[3];
        *(unsigned char *)(v8[5] + v40) = 1;
        *(unsigned char *)(v41 + v40) = 1;
        *(unsigned char *)(*v8 + v40) = 0;
        *((unsigned char *)v43 + v40) = v42;
        if ((int)a1 >= 1)
        {
          Core_Save_NVIC_Alm((v40 + 1), 0, (long long *)v47 + 3114);
          uint64_t v43 = (void *)v8[1];
        }
        uint64_t v49 = 0;
        LODWORD(v50) = 0;
        uint64_t v51 = p_NV;
        uint64_t v52 = p_NV + 26968;
        uint64_t v53 = *(void *)((char *)v43 + 6);
        *(void *)(p_NV + 26980) = *v43;
        *(void *)(v52 + 18) = v53;
        uint64_t v54 = v51 + 26976;
        __int16 v55 = -9871;
        do
        {
          int v56 = *(unsigned __int8 *)(v54 + v49) ^ HIBYTE(v55);
          __int16 v55 = -12691 * (v55 + (*(unsigned __int8 *)(v54 + v49) ^ HIBYTE(v55))) + 22719;
          uint64_t v50 = (v50 + v56);
          ++v49;
        }
        while (v49 != 24);
        *(void *)(v51 + 26968) = v50;
      }
    }
    if (++v40 != 14) {
      continue;
    }
    break;
  }
  *(_DWORD *)((char *)v74 + 14) = 0;
  *(void *)&v74[0] = 0;
  *(void *)((char *)v74 + 5) = 0;
  uint64_t result = Core_Get_NVIC_NGTO(a1, (uint64_t)v74);
  if (result)
  {
    int v59 = *(_DWORD *)v70;
    int v58 = *(_DWORD *)(v70 + 4);
    if (v58 < 4 || SLODWORD(v74[0]) > v59)
    {
      uint64_t result = (uint64_t)EvLog_v("DD_Assist_NVIC_NGTO:  New NGTO:  Source %d > %d  or  GPS_secs %d > %d , A0G %d %d", DWORD1(v74[0]), v58, LODWORD(v74[0]), v59, SWORD4(v74[0]), *(__int16 *)(v70 + 8));
      *(_OWORD *)uint64_t v70 = v74[0];
      int v60 = v74[1];
      double v61 = (double)*(__int16 *)(v70 + 8) * 2.91038305e-11;
      *(void *)(v70 + 24) = *(void *)v70;
      *(double *)(v70 + 32) = v61;
      v62.f64[0] = (double)*(__int16 *)(v70 + 10);
      double v63 = (double)*(char *)(v70 + 12);
      *(_DWORD *)(v70 + 16) = v60;
      v62.f64[1] = v63;
      v4[3162] = vmulq_f64(v62, (float64x2_t)xmmword_263D83330);
      *(_DWORD *)(v70 + 56) = 16 * *(unsigned __int16 *)(v70 + 14);
      *(_WORD *)(v70 + 60) = v60;
      if ((int)a1 >= 1)
      {
        uint64_t v64 = 0;
        LODWORD(v65) = 0;
        uint64_t v66 = p_NV;
        *(_DWORD *)(p_NV + 27024) = v74[1];
        *(_OWORD *)(v66 + 27008) = v74[0];
        uint64_t v67 = v66 + 27008;
        __int16 v68 = -9871;
        do
        {
          int v69 = *(unsigned __int8 *)(v67 + v64) ^ HIBYTE(v68);
          __int16 v68 = -12691 * (v68 + (*(unsigned __int8 *)(v67 + v64) ^ HIBYTE(v68))) + 22719;
          uint64_t v65 = (v65 + v69);
          ++v64;
        }
        while (v64 != 24);
        *(void *)(v66 + 27000) = v65;
      }
    }
  }
  return result;
}

double SBAS_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = 16 * *(unsigned __int16 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 12);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  float64x2_t v4 = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)xmmword_263D83340);
  uint64_t v5 = *(void *)(a1 + 20);
  v3.i64[0] = (int)v5;
  v3.i64[1] = SHIDWORD(v5);
  *(float64x2_t *)(a2 + 16) = v4;
  *(float64x2_t *)(a2 + 32) = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)vdupq_n_s64(0x3FB47AE147AE147BuLL));
  v4.f64[0] = *(float64_t *)(a1 + 28);
  v3.i64[0] = SLODWORD(v4.f64[0]);
  v3.i64[1] = SHIDWORD(v4.f64[0]);
  float64x2_t v6 = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)xmmword_263D83350);
  uint64_t v7 = *(void *)(a1 + 36);
  v3.i64[0] = (int)v7;
  v3.i64[1] = SHIDWORD(v7);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 10);
  *(float64x2_t *)(a2 + 48) = v6;
  *(float64x2_t *)(a2 + 64) = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)xmmword_263D83360);
  v6.f64[0] = *(float64_t *)(a1 + 44);
  v3.i64[0] = SLODWORD(v6.f64[0]);
  v3.i64[1] = SHIDWORD(v6.f64[0]);
  *(float64x2_t *)(a2 + 80) = vmulq_f64(vcvtq_f64_s64(v3), (float64x2_t)vdupq_n_s64(0x3EEA36E2EB1C432DuLL));
  double result = (double)*(int *)(a1 + 52) * 0.0000625;
  *(double *)(a2 + 96) = result;
  return result;
}

double NVIC_AlmInt2Real(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)a1;
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  *(_WORD *)(a2 + 9) = *(_WORD *)(a1 + 9);
  *(_DWORD *)(a2 + 16) = 16 * *(unsigned __int16 *)(a1 + 14);
  LOWORD(v2) = *(_WORD *)(a1 + 16);
  double v3 = (double)*(int *)(a1 + 20) * 0.000000374507028;
  *(double *)(a2 + 24) = (double)v2 * 0.000000476837158;
  *(double *)(a2 + 32) = v3;
  *(double *)(a2 + 40) = (double)*(__int16 *)(a1 + 24) * 1.14290475e-11;
  uint64_t v4 = *(void *)(a1 + 28);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(void *)&v6.f64[0] = *(_OWORD *)&vcvtq_f64_u64((uint64x2_t)v5);
  v5.i64[0] = (int)v4;
  v5.i64[1] = SHIDWORD(v4);
  v6.f64[1] = vcvtq_f64_s64(v5).f64[1];
  float64x2_t v7 = vmulq_f64(v6, (float64x2_t)xmmword_263D83380);
  v6.f64[0] = *(float64_t *)(a1 + 36);
  v5.i64[0] = SLODWORD(v6.f64[0]);
  v5.i64[1] = SHIDWORD(v6.f64[0]);
  double v8 = (double)*(__int16 *)(a1 + 44);
  *(float64x2_t *)(a2 + 48) = v7;
  *(float64x2_t *)(a2 + 64) = vmulq_f64(vcvtq_f64_s64(v5), (float64x2_t)vdupq_n_s64(0x3E9921FB54442D28uLL));
  v6.f64[0] = (double)*(__int16 *)(a1 + 46) * 3.63797881e-12;
  *(_WORD *)(a2 + 12) = *(_WORD *)(a1 + 12);
  *(double *)(a2 + 80) = v8 * 0.000000953674316;
  *(float64_t *)(a2 + 88) = v6.f64[0];
  double result = (double)*(char *)(a1 + 48) * 4.65661287e-10;
  *(double *)(a2 + 96) = result;
  return result;
}

void NK_Meas_ARP_Check(unsigned int a1, unsigned char *a2, uint64_t a3, double *a4, double *a5)
{
  double v7 = a5[5];
  if (a5[6] > v7) {
    double v7 = a5[6];
  }
  if (a5[7] > v7) {
    double v7 = a5[7];
  }
  double v8 = v7 * 0.769230769;
  int v9 = cARPCheckMinDynThresh[a1 - 1];
  if (v8 <= (double)v9) {
    double v10 = (double)v9;
  }
  else {
    double v10 = v8;
  }
  double v11 = *a4;
  double v12 = a4[1];
  if (a1 == 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a3 + 6328;
    float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x41124C41D4FDF3B6uLL);
    float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x41024C41D4FDF3B6uLL);
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0xC1124C41D4FDF3B6);
    do
    {
      float64x2_t v18 = vmlsq_f64(*(float64x2_t *)(v14 + v13), v15, vrndmq_f64(vdivq_f64(*(float64x2_t *)(v14 + v13), v15)));
      *(int8x16_t *)(v14 + v13) = vbslq_s8((int8x16_t)vcgtq_f64(v18, v16), (int8x16_t)vaddq_f64(v18, v17), (int8x16_t)v18);
      v13 += 16;
    }
    while (v13 != 1024);
  }
  else
  {
    uint64_t v14 = a3 + 5304;
  }
  double v19 = v10 * 0.25;
  if (a1 >= 4) {
    gn_report_assertion_failure("NK_Meas_ARP_Check: index fail");
  }
  uint64_t v20 = 0;
  double v21 = v10 * v10;
  double v22 = v19 * v19;
  uint64_t v23 = (double *)(a3 + 9528);
  do
  {
    if (*(unsigned char *)(a3 + v20 + 312))
    {
      uint64_t v24 = a3 + 4 * v20;
      if ((*(_DWORD *)(v24 + 568) - 1) >= 0x1D)
      {
        BOOL v25 = v12 >= 100.0;
        if (*a2 != 2) {
          BOOL v25 = v11 >= 100.0;
        }
        if (!v25)
        {
          double v26 = v23[144] * 9.0;
          double v27 = *(double *)(v14 + 8 * v20) * *(double *)(v14 + 8 * v20);
          if (v26 <= v21) {
            double v28 = v21;
          }
          else {
            double v28 = v23[144] * 9.0;
          }
          if (v26 <= v22) {
            double v29 = v22;
          }
          else {
            double v29 = v23[144] * 9.0;
          }
          if (v27 >= v28)
          {
            *(unsigned char *)(a3 + v20 + 312) = 0;
            *(_DWORD *)(v24 + 568) = 21;
            --*(unsigned char *)(a3 + 3);
            ++*(unsigned char *)(a3 + 4);
          }
          else if (v27 > v29)
          {
            double v30 = *v23;
            NK_Get_Smooth_Excl_Weight(v27, v29, v28);
            *uint64_t v23 = v30 / v31;
            *(unsigned char *)(a3 + 10552 + v20) = 1;
          }
        }
      }
    }
    ++v20;
    ++v23;
    a2 += 4;
  }
  while (v20 != 128);
}

void NK_Get_Smooth_Excl_Weight(double a1, double a2, double a3)
{
  if (a1 <= a2)
  {
    gn_report_assertion_failure("NK_Get_Smooth_Excl_Weight:  i<=l");
  }
  else if (a1 >= a3)
  {
    gn_report_assertion_failure("NK_Get_Smooth_Excl_Weight:  i>=u");
  }
  else if ((1.0 / (exp(((a1 - a2) / (a3 - a2) + -0.5) * 10.0) + 1.0) + -0.00669285092) / 0.986614298 <= 0.0000001)
  {
    gn_report_assertion_failure("NK_Get_Smooth_Excl_Weight:  w<=0");
  }
}

void NK_Meas_Outlier_Check(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  int v9 = a1;
  v52[128] = *(double *)MEMORY[0x263EF8340];
  if (a1 != 1)
  {
    if (a5)
    {
      signed int v11 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = a5 + 568;
      do
      {
        if (*(unsigned char *)(v17 + v16 - 256) && (*(_DWORD *)(v17 + 4 * v16) - 1) >= 0x1D) {
          v51[v11++] = v16;
        }
        ++v16;
      }
      while (v16 != 128);
      if (v11 >= 1)
      {
        uint64_t v18 = v11;
        double v19 = v51;
        do
        {
          uint64_t v20 = *v19++;
          v52[v20] = *(double *)(a5 + 8 * v20 + 5304);
          --v18;
        }
        while (v18);
      }
      if (a6) {
        goto LABEL_22;
      }
    }
    else
    {
      gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad pDO");
      signed int v11 = 0;
      if (v6)
      {
LABEL_22:
        uint64_t v21 = 0;
        uint64_t v22 = v6 + 568;
        signed int v23 = v11;
        do
        {
          if (*(unsigned char *)(v22 + v21 - 256) && (*(_DWORD *)(v22 + 4 * v21) - 1) >= 0x1D) {
            v51[v23++] = v21;
          }
          ++v21;
        }
        while (v21 != 128);
        if (v11 < v23)
        {
          uint64_t v24 = v23 - (uint64_t)v11;
          BOOL v25 = &v51[v11];
          do
          {
            uint64_t v26 = *v25++;
            v52[v26] = *(double *)(v6 + 8 * v26 + 5304);
            --v24;
          }
          while (v24);
        }
        uint64_t v10 = 0;
        signed int v11 = v23;
        goto LABEL_34;
      }
    }
    gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad pDR");
    uint64_t v10 = 0;
    goto LABEL_34;
  }
  uint64_t v10 = a4;
  if (!a4)
  {
    gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad pPR");
    double v27 = 0;
    signed int v11 = 0;
    goto LABEL_35;
  }
  signed int v11 = 0;
  for (uint64_t i = 0; i != 128; ++i)
  {
    if (*(unsigned char *)(a4 + i + 312) && (*(_DWORD *)(a4 + 4 * i + 568) - 1) >= 0x1D) {
      v51[v11++] = i;
    }
  }
  if (v11 >= 1)
  {
    uint64_t v13 = v11;
    uint64_t v14 = v51;
    do
    {
      uint64_t v15 = *v14++;
      v52[v15] = *(double *)(a4 + 8 * v15 + 6328);
      --v13;
    }
    while (v13);
  }
LABEL_34:
  double v27 = v52;
  VecSortIndexAscR8((uint64_t)v52, v11, v51, 1);
LABEL_35:
  if (a3) {
    BOOL v28 = 0;
  }
  else {
    BOOL v28 = v9 == 1;
  }
  if (v28) {
    uint64_t v29 = 6;
  }
  else {
    uint64_t v29 = 5;
  }
  int v30 = v11 - 1;
  if (v11 - 1 > (int)v29)
  {
    int v31 = v11 - 3;
    int v32 = &v51[v11 - 2];
    uint64_t v33 = &v51[v30];
    while (1)
    {
      uint64_t v35 = *v33--;
      uint64_t v34 = v35;
      double v36 = v27[v35];
      uint64_t v37 = *v32--;
      double v38 = fabs(v36 / v27[v37]);
      double v39 = fabs(v36 / v27[v51[v31]]);
      double v40 = (v38 + v38) * 0.333333333 + -1.0;
      double v41 = (v39 + v39) * 0.25 + -1.0;
      if (v40 <= 0.0 && v41 <= 0.0) {
        return;
      }
      if (v7 && v9 != 1 && *(unsigned char *)(v7 + v34 + 312)) {
        break;
      }
      if (v9 == 1)
      {
        int v9 = 1;
      }
      else
      {
        uint64_t v10 = v6;
        int v9 = 3;
      }
      if (v10) {
        goto LABEL_53;
      }
      gn_report_assertion_failure("NK_Meas_Outlier_Check:  Bad p_SM");
LABEL_66:
      int v49 = v31-- + 1;
      if ((int)v29 >= v49) {
        return;
      }
    }
    int v9 = 2;
    uint64_t v10 = v7;
LABEL_53:
    if (fabs(v36) > cOutlierMinResid[v9 - 1])
    {
      int v50 = v9;
      uint64_t v42 = v29;
      uint64_t v43 = v7;
      uint64_t v44 = v6;
      if (v40 < 1.0 && v41 < 1.0)
      {
        uint64_t v46 = v10 + 8 * v34;
        double v47 = *(double *)(v46 + 9528);
        if (v40 <= v41) {
          double v40 = v41;
        }
        NK_Get_Smooth_Excl_Weight(v40, 0.0, 1.0);
        *(double *)(v46 + 9528) = v47 / v48;
        *(unsigned char *)(v10 + v34 + 10552) = 1;
      }
      else
      {
        if (!*(unsigned char *)(v10 + v34 + 312)) {
          gn_report_assertion_failure("NK_Meas_Outlier_Check:  Exclusion index fail");
        }
        *(unsigned char *)(v10 + v34 + 312) = 0;
        *(_DWORD *)(v10 + 4 * v34 + 568) = 20;
        --*(unsigned char *)(v10 + 3);
        ++*(unsigned char *)(v10 + 4);
      }
      uint64_t v6 = v44;
      uint64_t v7 = v43;
      uint64_t v29 = v42;
      int v9 = v50;
    }
    goto LABEL_66;
  }
}

BOOL NK_Reject_DO_For_Rejected_PR(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  v27[13] = *(double *)MEMORY[0x263EF8340];
  uint64_t v19 = a4 + 36560;
  uint64_t v18 = a4 + 21656;
  uint64_t v17 = a4 + 16280;
  uint64_t v23 = a4 + 17304;
  double v24 = 0.0;
  uint64_t v7 = a4 + 7320;
  double v8 = (_DWORD *)(a4 + 22224);
  uint64_t v21 = (double *)(a3 + 976);
  uint64_t v22 = a4 + 21968;
  uint64_t v9 = a4 + 36872;
  uint64_t v10 = 9528;
  do
  {
    int v11 = *(_DWORD *)(v7 + 4 * v6);
    if (v11 != 12 && ((v11 - 1) < 0x1D || *(unsigned char *)(v23 + v6)))
    {
      if (*(unsigned char *)(v9 + v6) && (v8[3726] - 1) > 0x1C)
      {
        uint64_t v13 = 3;
        char v12 = 1;
        uint64_t v14 = v19;
      }
      else
      {
        if (!*(unsigned char *)(v22 + v6) || (*v8 - 1) < 0x1D) {
          goto LABEL_16;
        }
        char v12 = 0;
        uint64_t v13 = 2;
        uint64_t v14 = v18;
      }
      NK_Obs_Equ_SV((void *)v13, *(unsigned __int8 *)(v14 + v6 + 440), *(_DWORD *)(a2 + 4 * v6), v5, (uint64_t)v27, *(double *)(a4 + 1552));
      v27[12] = *(double *)(v14 + 8 * v6 + 5304);
      double v15 = *(double *)(v14 + v10 + 1152);
      double v16 = *(double *)(v14 + v10);
      double result = umeas((BOOL)v21, 0xCu, -(v15 * v16), v27, v26, v25, &v24, 1.0e20);
      if ((*(_DWORD *)(v7 + 4 * v6) - 1) >= 0x1D && *(unsigned char *)(v23 + v6))
      {
        if ((v12 & 1) == 0)
        {
          double result = umeas((BOOL)v21, 0xCu, v15 * v16 * *(double *)(v17 + 8 * v6), v27, v26, v25, &v24, 1.0e20);
          *(unsigned char *)(v14 + v6 + 10552) = 1;
        }
      }
      else
      {
        *(unsigned char *)(v14 + v6 + 312) = 0;
        *(_DWORD *)(v14 + 4 * v6 + 568) = 25;
        --*(unsigned char *)(v14 + 3);
        ++*(unsigned char *)(v14 + 4);
      }
    }
LABEL_16:
    ++v6;
    v10 += 8;
    v5 += 56;
    ++v8;
  }
  while (v6 != 128);
  return result;
}

void GPS_State_Update_Init(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = (_OWORD *)a7;
  uint64_t v36 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 402) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  int v11 = (_DWORD *)(a7 + 176);
  uint64_t v12 = 179;
  *(_OWORD *)(a1 + 384) = 0u;
  do
  {
    *int v11 = 0;
    v11 += 48;
    --v12;
  }
  while (v12);
  if (ST_Get_Time(a3, (__int16 *)(a2 + 8), (_DWORD *)(a2 + 4)))
  {
    uint64_t v13 = 0;
    __int16 v14 = 60;
    __int16 v15 = 15;
    do
    {
      if (*((unsigned char *)a4 + v13 + 62171))
      {
        long long v34 = 0u;
        memset(v35, 0, 31);
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        ST_Update_Table(v13, v15, v14, (uint64_t)&v25, a2, a1, a5, a4, a6);
        int v16 = *(_DWORD *)(a2 + 12);
        if ((v16 - 1) <= 1)
        {
          *(unsigned char *)(a1 + 402) = 1;
          if (v16 == 1)
          {
            if (v15 <= 0) {
              __int16 v15 = 15;
            }
            else {
              --v15;
            }
          }
          else if (v14 <= 0)
          {
            __int16 v14 = 59;
          }
          else
          {
            v14 -= 3;
          }
          long long v17 = v34;
          v7[8] = v33;
          v7[9] = v17;
          long long v18 = *(_OWORD *)&v35[16];
          v7[10] = *(_OWORD *)v35;
          v7[11] = v18;
          long long v19 = v30;
          void v7[4] = v29;
          v7[5] = v19;
          long long v20 = v32;
          v7[6] = v31;
          v7[7] = v20;
          long long v21 = v26;
          *uint64_t v7 = v25;
          v7[1] = v21;
          long long v22 = v28;
          v7[2] = v27;
          v7[3] = v22;
        }
      }
      ++v13;
      v7 += 12;
    }
    while (v13 != 197);
    if (*(unsigned char *)(a1 + 402))
    {
      *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 8);
      *(_DWORD *)a1 = *(_DWORD *)(a2 + 4);
    }
  }
}

BOOL ST_Get_Time(uint64_t a1, __int16 *a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 16);
  int v4 = *(_DWORD *)a1;
  *a2 = *(_WORD *)(a1 + 32);
  *a3 = (int)*(double *)(a1 + 40);
  if (v3) {
    BOOL v5 = v4 <= 2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 24);
    __int16 v16 = 0;
    double v14 = 0.0;
    double v15 = 0.0;
    if (Get_FSP_Time(v8, &v16, &v14, &v15, &v17))
    {
      if (v15 <= 40000.0)
      {
        unsigned int v10 = v15;
        if (v15 >= 2)
        {
          if (v10 >= 0x190) {
            int v11 = 1;
          }
          else {
            int v11 = 2;
          }
          if (v10 >= 9) {
            int v9 = v11;
          }
          else {
            int v9 = 3;
          }
        }
        else
        {
          int v9 = 4;
        }
      }
      else
      {
        int v9 = 0;
      }
      if (v9 > v4)
      {
        *a2 = v16;
        *a3 = (int)v14;
        int v3 = 1;
        int v4 = v9;
      }
    }
  }
  else
  {
    int v3 = 1;
  }
  if (v3) {
    BOOL v12 = v4 <= 0;
  }
  else {
    BOOL v12 = 1;
  }
  return !v12;
}

void ST_Update_Table(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  v189[4] = *MEMORY[0x263EF8340];
  if (a1 >= 0xC5) {
    gn_report_assertion_failure("ST_Update_Table : sv < NUM_POS");
  }
  int Constell_Pos = Get_Constell_Pos(a1);
  if (Constell_Pos)
  {
    unsigned int v18 = Constell_Pos;
    if (Constell_Pos != 7)
    {
      long long v172 = 0u;
      long long v173 = 0u;
      memset(v171, 0, sizeof(v171));
      int v165 = Constell_Pos - 1;
      if (Constell_Pos < 1) {
        int v164 = 0;
      }
      else {
        int v164 = Num_Pos[Constell_Pos - 1];
      }
      int v167 = a2;
      int v166 = Num_Pos_Idx_To_Num_Prn_Idx(a1);
      *(_DWORD *)(a4 + 176) = 0;
      uint64_t v19 = a6 + 2 * a1;
      *(_WORD *)(v19 + 6) = 0;
      long long v20 = (_WORD *)(v19 + 6);
      if (a1 >= 0xC5) {
        gn_report_assertion_failure("ST_Get_GPS_Orbit : sv < NUM_POS");
      }
      unsigned int v174 = Get_Constell_Pos(a1);
      uint64_t v21 = Num_Pos_Idx_To_Num_Prn_Idx(a1);
      int v22 = v21;
      int v170 = LongPrnIdx_To_ShortPrnIdx(v21, &v174);
      unsigned __int8 v168 = Num_Pos_Idx_To_GNSS_Id(a1);
      *(_DWORD *)(a5 + 12) = 0;
      unsigned int v23 = v174;
      if (ST_Is_SV_Useable((uint64_t)a8, a7, v174, v22))
      {
        int v163 = a3;
        double v24 = (char *)a8 + v22;
        if (v23 == 2)
        {
          if (!v24[59990]) {
            return;
          }
          if (!v24[59772])
          {
            long long v25 = (char *)a8 + v22;
            v25[60426] = 0;
            v25[60644] = 0;
          }
          *(_DWORD *)(a5 + 12) = 1;
          if (*(unsigned char *)(a8[2147] + v170))
          {
            Get_GPS_Kep_Ephemeris(2, v168, (uint64_t)a8 + 116 * v170 + 13464, (uint64_t)v171);
            int v26 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 0, (uint64_t)v171);
            BOOL v27 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(EE)", v26, (uint64_t)v171);
            uint64_t v28 = a8[2147];
            if (v27)
            {
              if (*(unsigned char *)(v28 + v170))
              {
                uint64_t v29 = a8[2146];
                if (*(unsigned char *)(v29 + v170))
                {
                  long long v30 = &a8[8 * (uint64_t)v170];
                  unint64_t v31 = *((unsigned int *)v30 + 2995);
                  if ((~v31 & 0xF00) != 0) {
                    int v32 = ST_Get_GPS_Orbit(unsigned char,s_SV_State_Update_WD *,s_DB_Sys_Status *,s_DB_SV_Nav_Mess *,s_Eph_Kep *)::glonURE_table[(v31 >> 8) & 0xF];
                  }
                  else {
                    int v32 = 0xFFFF;
                  }
                  uint64_t v74 = (int *)a8 + v170 + 4308;
                  if (*v74 >= 0) {
                    int v75 = *v74;
                  }
                  else {
                    int v75 = -*v74;
                  }
                  unsigned int v76 = v32;
                  if (v75 >= 0x385)
                  {
                    double v77 = (double)v75
                        * 0.000277777778
                        * ((double)v75
                         * 0.000277777778
                         * ((double)v75
                          * 0.000277777778))
                        * 73.3333333
                        + (double)v75 * 0.000277777778 * ((double)v75 * 0.000277777778) * -20.0;
                    unsigned int v76 = (int)fmin(sqrt((double)(v32 * v32) + v77 * v77), 65535.0);
                  }
                  if (SBYTE3(v171[1]) < 0)
                  {
                    unsigned int v78 = 1;
                  }
                  else if (BYTE3(v171[1]) > 0xBu)
                  {
                    unsigned int v78 = 0xFFFF;
                  }
                  else
                  {
                    unsigned int v78 = ST_Get_GPS_Orbit(unsigned char,s_SV_State_Update_WD *,s_DB_Sys_Status *,s_DB_SV_Nav_Mess *,s_Eph_Kep *)::gpsURE_table[BYTE3(v171[1])];
                  }
                  if (v78 <= v76)
                  {
                    uint64_t v98 = v30 + 1491;
                    int v99 = HIDWORD(a8[8 * (uint64_t)v170 + 1491]);
                    if (v99 == 5 || v99 == 3)
                    {
                      uint64_t v100 = (void *)v168;
                      int v169 = v32;
                      int v162 = v75;
                      unsigned int v160 = v76;
                      Core_Set_GLON_Eph_Invalid(v100);
                      unsigned int v76 = v160;
                      uint64_t v74 = (int *)a8 + v170 + 4308;
                      int v75 = v162;
                      int v32 = v169;
                      uint64_t v29 = a8[2146];
                    }
                    *(unsigned char *)(v29 + v170) = 0;
                    *(unsigned char *)(a8[2152] + v170) = 0;
                    *uint64_t v98 = 0u;
                    v98[1] = 0u;
                    *(_OWORD *)((char *)v98 + 46) = 0u;
                    float64x2_t v98[2] = 0u;
                    *uint64_t v74 = 0;
                    *(unsigned char *)(a8[2145] + v170) = 1;
                    *(unsigned char *)(a8[2153] + v170) = 0;
                    EvLog_v("ST_Get_GPS_Orbit:  Delete glonEph in favour of glonExtEph:  %d  Age %d  URE %d %d  EE URE %d  [0.1m]", v170 + 1, v75, v32, v76, v78);
                  }
                  else
                  {
                    *(_DWORD *)(a5 + 12) = 0;
                  }
                }
              }
            }
            else
            {
              *(_DWORD *)(a5 + 12) = 0;
              *(unsigned char *)(v28 + v170) = 0;
            }
          }
          int v37 = *(_DWORD *)(a5 + 12);
          *(unsigned char *)(a8[2151] + v170) = v37 == 1;
LABEL_202:
          if (!v37) {
            return;
          }
          if (v37 != 1) {
            goto LABEL_206;
          }
          if ((DWORD1(v171[0]) - 5) < 2) {
            goto LABEL_206;
          }
          float64x2_t v121 = (char *)a8 + v166 + 61734;
          if (*v121) {
            goto LABEL_206;
          }
          int v128 = a1 - v164;
          if (*((unsigned char *)a8 + v166 + 60208) && ST_Is_SV_Useable((uint64_t)a8, a7, v18, v166))
          {
            int v129 = v165;
            switch(v165)
            {
              case 0:
                __int16 v131 = *((_WORD *)a8 + 22 * v128 + 3777);
                break;
              case 1:
              case 6:
                int v130 = v165;
                EvCrt_Illegal_switch_case("ST_Update_Table", 0x399u);
                goto LABEL_267;
              case 2:
                uint64_t v146 = (char *)a8 + 36 * v128;
                uint64_t v147 = 24054;
                goto LABEL_276;
              case 3:
                if (*((unsigned __int8 *)a8 + 44 * v128 + 44675) <= 0x93u) {
                  __int16 v148 = 1356;
                }
                else {
                  __int16 v148 = 1357;
                }
                __int16 v131 = v148 + *((_WORD *)a8 + 22 * v128 + 22336);
                break;
              case 4:
                __int16 v131 = *((_WORD *)a8 + 22 * v128 + 5741);
                break;
              case 5:
                uint64_t v146 = (char *)a8 + 52 * v128;
                uint64_t v147 = 49836;
LABEL_276:
                __int16 v131 = *(_WORD *)&v146[v147] + 1024;
                break;
              default:
                int v130 = v165;
                EvCrt_Illegal_switch_default("ST_Update_Table", 0x39Cu);
LABEL_267:
                int v129 = v130;
                __int16 v131 = 0x7FFF;
                break;
            }
          }
          else
          {
            __int16 v131 = 0x7FFF;
            int v129 = v165;
          }
          int v132 = *(__int16 *)(a5 + 8);
          int v133 = v132 - v131;
          if (v133 < 0) {
            int v133 = -v133;
          }
          if (v133 > 2)
          {
            *(_DWORD *)char v187 = 0;
            if (!ST_Check_Duplicate_Eph(v18, a1, v128, (uint64_t)a8, (unsigned int *)v187)) {
              goto LABEL_206;
            }
            unsigned __int8 v134 = Num_Pos_Idx_To_GNSS_Id(a1);
            LOBYTE(v176) = v134;
            unsigned __int8 v135 = Num_Pos_Idx_To_GNSS_Id(*(int *)v187);
            BYTE1(v176) = v135;
            if (!ST_Get_SNR_Levels(a9, v18, (unsigned __int8 *)&v176, v175)) {
              goto LABEL_206;
            }
            if (v175[1] + 15 >= v175[0])
            {
              unsigned __int8 v135 = v134;
              if (v175[0] + 15 >= v175[1]) {
                goto LABEL_206;
              }
            }
            int v136 = GNSS_SVId_Constell_To_Num_Pos_Idx(v135, v18);
            unsigned __int8 v137 = v136;
            int v138 = Num_Pos_Idx_To_Num_Prn_Idx(v136);
            if (Get_Constell_Prn(v138) == 2) {
              __assert_rtn("ST_Update_Table", "GPS_State_Update.cpp", 1079, "Get_Constell_Prn( (U1)j_NUM_PRN) != GLON_CONSTELL");
            }
            uint64_t v139 = (char *)a8 + v138;
            v139[60862] = 1;
            v139[59772] = 0;
            if (a1 != v137) {
              goto LABEL_206;
            }
          }
          else
          {
            *(_WORD *)int v177 = 0;
            *(void *)&long long v176 = 0;
            *(void *)((char *)&v176 + 7) = 0;
            memset(&v177[4], 0, 76);
            switch(v129)
            {
              case 0:
                Get_GPS_Kep_Almanac((uint64_t)a8 + 44 * v128 + 7544, (uint64_t)&v176);
                goto LABEL_260;
              case 1:
                __assert_rtn("ST_Update_Table", "GPS_State_Update.cpp", 943, "FALSE");
              case 2:
                memset(v187, 0, 91);
                GAL_AlmInt2Real((uint64_t)a8 + 36 * v128 + 24044, (uint64_t)v187);
                *(_OWORD *)&v177[8] = *(_OWORD *)&v187[72];
                *(void *)&v177[24] = *(void *)&v187[24];
                *(double *)&v177[32] = *(double *)&v187[32] + 0.977384381;
                *(void *)&v177[40] = *(void *)&v187[48];
                *(void *)&v177[48] = *(void *)&v187[64];
                *(void *)((char *)&v176 + 4) = *(unsigned int *)&v187[4] | 0x300000000;
                BYTE12(v176) = v187[8];
                BYTE13(v176) = v187[90] | (8 * v187[89]);
                BYTE14(v176) = v187[9];
                *(_WORD *)int v177 = *(_WORD *)&v187[10] + 1024;
                *(_DWORD *)&v177[4] = *(_DWORD *)&v187[12];
                *(double *)&v177[56] = *(double *)&v187[16] + 5440.5882;
                *(void *)&v177[64] = *(void *)&v187[40];
                *(void *)&v177[72] = *(void *)&v187[56];
                goto LABEL_260;
              case 3:
                memset(v187, 0, 88);
                BDS_AlmInt2Real((uint64_t)a8 + 44 * v128 + 44664, (uint64_t)v187);
                *(void *)&long long v176 = *(void *)v187;
                *(void *)&v177[56] = *(void *)&v187[16];
                *(void *)&v177[72] = *(void *)&v187[32];
                double v143 = 0.942477796;
                if (v187[11] - 59 < 0xFFFFFFCB) {
                  double v143 = 0.0;
                }
                *(void *)&v177[24] = *(void *)&v187[24];
                *(double *)&v177[32] = *(double *)&v187[64] + v143;
                *(void *)&v177[48] = *(void *)&v187[40];
                *(void *)&v177[40] = *(void *)&v187[56];
                *(_OWORD *)&v177[8] = *(_OWORD *)&v187[72];
                *(_DWORD *)&v177[4] = *(_DWORD *)&v187[12] + 14;
                *(_WORD *)int v177 = *(_WORD *)&v187[8] + 1356;
                if (*(_DWORD *)&v187[12] + 14 > 604799)
                {
                  *(_DWORD *)&v177[4] = *(_DWORD *)&v187[12] - 604786;
                  *(_WORD *)int v177 = *(_WORD *)&v187[8] + 1357;
                }
                *(double *)&v177[64] = *(double *)&v187[48] + 0.0010208961;
                DWORD2(v176) = 4;
                BYTE12(v176) = v187[11];
                BYTE13(v176) = v187[10] ^ 1;
                goto LABEL_260;
              case 4:
                Get_QZSS_Kep_Almanac((uint64_t)a8 + 44 * v128 + 11472, (uint64_t)&v176);
                goto LABEL_260;
              case 5:
                *(_WORD *)&v187[12] = 0;
                *(_DWORD *)&v187[16] = 0;
                *(void *)char v187 = 0;
                *(_DWORD *)&v187[7] = 0;
                memset(&v187[24], 0, 80);
                NVIC_AlmInt2Real((uint64_t)a8 + 52 * v128 + 49824, (uint64_t)v187);
                *(void *)&long long v176 = *(void *)v187;
                *(_OWORD *)&v177[8] = *(_OWORD *)&v187[80];
                *(_OWORD *)&v177[24] = *(_OWORD *)&v187[24];
                *(void *)&v177[40] = *(void *)&v187[40];
                *(void *)&v177[48] = *(void *)&v187[72];
                *(_OWORD *)&v177[56] = *(_OWORD *)&v187[48];
                DWORD2(v176) = 6;
                WORD6(v176) = *(_WORD *)&v187[8];
                BYTE14(v176) = (0x101010102
                              * (unint64_t)(*(_DWORD *)&v187[16] / 0x15180u
                                                 - *(unsigned __int16 *)&v187[12]
                                                 + 8 * *(unsigned __int16 *)&v187[12])) >> 32;
                *(_WORD *)int v177 = *(_WORD *)&v187[12] + 1024;
                *(_DWORD *)&v177[4] = *(_DWORD *)&v187[16];
                *(void *)&v177[72] = *(void *)&v187[64];
LABEL_260:
                int v144 = Kep_Check_Almanac((__int16)v132, (uint64_t)&v176);
                if (!ST_Check_Alm_Kep_Err((uint64_t)"ST_Update_Table", v144, (uint64_t)&v176)) {
                  goto LABEL_206;
                }
                *(_OWORD *)&v187[184] = 0u;
                memset(&v187[56], 0, 120);
                *(_OWORD *)&v187[24] = 0u;
                *(_OWORD *)&v187[8] = 0u;
                *(void *)char v187 = v176;
                *(_OWORD *)&v187[176] = *(_OWORD *)&v177[48];
                *(void *)&long long v188 = *(void *)&v177[64];
                *((void *)&v188 + 1) = *(void *)&v177[32];
                v189[0] = *(void *)&v177[72];
                v189[1] = *(void *)&v177[24];
                v189[2] = *(void *)&v177[40];
                *(_OWORD *)&v187[40] = *(_OWORD *)&v177[8];
                *(_DWORD *)&v187[28] = *(_DWORD *)&v177[4];
                *(_DWORD *)&v187[24] = *(_DWORD *)&v177[4];
                *(_DWORD *)&v187[32] = *(_DWORD *)&v177[4];
                *(_WORD *)&v187[22] = *(_WORD *)v177;
                *(_DWORD *)&v187[8] = DWORD2(v176);
                v187[14] = BYTE13(v176);
                v187[12] = BYTE12(v176);
                if (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)v171, (uint64_t)v187, 2))
                {
                  *float64x2_t v121 = 1;
                  goto LABEL_206;
                }
                if (Get_Constell_Prn(v166) == 2) {
                  __assert_rtn("ST_Update_Table", "GPS_State_Update.cpp", 1020, "Get_Constell_Prn( (U1)j_NUM_PRN) != GLON_CONSTELL");
                }
                uint64_t v145 = (char *)a8 + v166;
                v145[60862] = 1;
                v145[59772] = 0;
                break;
              default:
                goto LABEL_206;
            }
          }
          *(_DWORD *)(a5 + 12) = 0;
LABEL_206:
          int v122 = *(_DWORD *)(a5 + 12);
          int v123 = v167;
          if ((v122 - 1) <= 1)
          {
            if (v122 != 1) {
              int v123 = v163;
            }
            int v124 = -v123;
            *long long v20 = v124;
            int v125 = *(_DWORD *)(a5 + 4) - (__int16)v124;
            if (v125 <= 604799) {
              int v126 = v125;
            }
            else {
              int v126 = v125 - 604800;
            }
            if (v125 <= 604799) {
              __int16 v127 = *(_WORD *)(a5 + 8);
            }
            else {
              __int16 v127 = *(_WORD *)(a5 + 8) + 1;
            }
            if (DWORD2(v171[0]) == 4 && v122 == 1 && BYTE12(v171[0]) <= 5u) {
              Kep_Calc_SV_Ref_State_BDS_GEO(1, v127, v126, (uint64_t)v171, a4);
            }
            else {
              Kep_Calc_SV_Ref_State(v122, v127, v126, (uint64_t)v171, a4);
            }
            if (*(_DWORD *)(a5 + 12) == 1 && DWORD1(v171[0]) == 6) {
              *(_WORD *)(a4 + 166) += 1000;
            }
          }
          return;
        }
        if (v24[59772] || v24[59990])
        {
          BOOL v33 = 0;
          int v159 = v24 + 59772;
          __int16 v161 = v24 + 60426;
          v24[60426] = 0;
          v24[60644] = 0;
          *(_DWORD *)(a5 + 12) = 1;
          switch(v23)
          {
            case 1u:
              memset(v187, 0, 36);
              memset(&v187[40], 0, 160);
              long long v188 = 0u;
              memset(v189, 0, 24);
              long long v176 = 0u;
              memset(v177, 0, 20);
              memset(&v177[24], 0, 64);
              long long v178 = 0u;
              long long v179 = 0u;
              long long v180 = 0u;
              long long v181 = 0u;
              long long v182 = 0u;
              long long v183 = 0u;
              long long v184 = 0u;
              long long v185 = 0u;
              uint64_t v186 = 0;
              v187[19] = 99;
              v177[3] = 99;
              uint64_t v34 = v170;
              if (*(unsigned char *)(a8[9] + v170))
              {
                int v35 = 1;
                Get_GPS_Kep_Ephemeris(1, v168, (uint64_t)a8 + 116 * v170 + 3832, (uint64_t)&v176);
                int v36 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 0, (uint64_t)&v176);
                if (!ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(EE)", v36, (uint64_t)&v176))
                {
                  int v35 = 0;
                  *(unsigned char *)(a8[9] + v170) = 0;
                }
              }
              else
              {
                int v35 = 0;
              }
              if (!*(unsigned char *)(a8[8] + v170)) {
                goto LABEL_98;
              }
              Get_GPS_Kep_Ephemeris(v174, v168, (uint64_t)a8 + 116 * v170 + 120, (uint64_t)v187);
              int v63 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), v35 ^ 1u, (uint64_t)v187);
              if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v63, (uint64_t)v187))
              {
                if (!v35)
                {
                  char v66 = 0;
                  uint64_t v64 = (long long *)v187;
                  goto LABEL_170;
                }
                uint64_t v64 = (long long *)v187;
                char v65 = ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)v187, (uint64_t)&v176, 1);
                char v66 = 0;
                if ((v65 & 1) != 0 || *(_DWORD *)&v187[4] == 5) {
                  goto LABEL_170;
                }
                *(unsigned char *)(a8[8] + v170) = 0;
                char v66 = 1;
                *(unsigned char *)(a8[6] + v170) = 1;
                int v67 = *((_DWORD *)a8 + 29 * v170 + 31);
                if (v67 != 5 && v67 != 3)
                {
LABEL_100:
                  uint64_t v64 = &v176;
LABEL_170:
                  long long v101 = v64[13];
                  v171[12] = v64[12];
                  long long v172 = v101;
                  long long v173 = v64[14];
                  long long v102 = v64[9];
                  v171[8] = v64[8];
                  v171[9] = v102;
                  long long v103 = v64[11];
                  v171[10] = v64[10];
                  v171[11] = v103;
                  long long v104 = v64[5];
                  v171[4] = v64[4];
                  v171[5] = v104;
                  long long v105 = v64[7];
                  v171[6] = v64[6];
                  v171[7] = v105;
                  long long v106 = v64[1];
                  v171[0] = *v64;
                  v171[1] = v106;
                  long long v107 = v64[3];
                  v171[2] = v64[2];
                  v171[3] = v107;
                  uint64_t v108 = a8[12];
                  goto LABEL_173;
                }
                Core_Set_GPS_Eph_Invalid((void *)v168);
              }
              else
              {
                *(unsigned char *)(a8[8] + v170) = 0;
                int v72 = *((_DWORD *)a8 + 29 * v170 + 31);
                if (v72 == 5 || v72 == 3) {
                  Core_Set_GPS_Eph_Invalid((void *)v168);
                }
LABEL_98:
                if (!v35) {
                  goto LABEL_161;
                }
              }
              char v66 = 1;
              goto LABEL_100;
            case 3u:
              int v38 = *(unsigned __int8 *)(a8[2202] + v170);
              int v39 = *(unsigned __int8 *)(a8[2203] + v170);
              BOOL v40 = *(unsigned char *)(a8[2203] + v170) != 0;
              memset(v175, 0, 20);
              memset(&v175[24], 0, 124);
              memset(&v175[152], 0, 41);
              *(void *)&v175[194] = 0;
              v175[202] = 0;
              if (v38 && v39)
              {
                memset(v187, 0, 36);
                memset(&v187[40], 0, 160);
                long long v188 = 0uLL;
                memset(v189, 0, 24);
                long long v176 = 0uLL;
                memset(v177, 0, 20);
                memset(&v177[24], 0, 64);
                long long v178 = 0uLL;
                long long v179 = 0uLL;
                long long v180 = 0uLL;
                long long v181 = 0uLL;
                long long v182 = 0uLL;
                long long v183 = 0uLL;
                long long v184 = 0uLL;
                long long v185 = 0uLL;
                uint64_t v186 = 0;
                GAL_EphInt2Real((uint64_t)&a8[11 * v170 + 2609] + 4, (uint64_t)v175);
                GAL_EphReal2Kep((uint64_t)v175, (uint64_t)&v176);
                int v41 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 0, (uint64_t)&v176);
                BOOL v42 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v41, (uint64_t)&v176);
                if (!v42) {
                  *(unsigned char *)(a8[2203] + v170) = 0;
                }
                GAL_EphInt2Real((uint64_t)&a8[11 * v170 + 2213] + 4, (uint64_t)v175);
                GAL_EphReal2Kep((uint64_t)v175, (uint64_t)v187);
                int v43 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), !v42, (uint64_t)v187);
                if (!ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v43, (uint64_t)v187))
                {
                  *(unsigned char *)(a8[2202] + v170) = 0;
                  int v79 = a8[11 * v170 + 2214];
                  if (v79 == 5 || v79 == 3) {
                    Core_Set_GAL_Eph_Invalid((void *)v168);
                  }
                  if (!v42) {
                    goto LABEL_161;
                  }
                  goto LABEL_120;
                }
                if (v42
                  && (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)v187, (uint64_t)&v176, 1) & 1) == 0&& *(_DWORD *)&v187[4] != 5)
                {
                  *int v159 = 0;
                  *((unsigned char *)a8 + v22 + 60862) = 1;
                  int v44 = a8[11 * v170 + 2214];
                  if (v44 == 5 || v44 == 3) {
                    Core_Set_GAL_Eph_Invalid((void *)v168);
                  }
LABEL_120:
                  uint64_t v80 = (uint64_t)&a8[11 * v170 + 2609] + 4;
                  char v81 = 1;
                  int v149 = 0;
                  int v150 = 1;
                  goto LABEL_134;
                }
                BOOL v40 = 0;
              }
              else if (!v38)
              {
                if (!v39) {
                  goto LABEL_161;
                }
                goto LABEL_120;
              }
              char v81 = 0;
              uint64_t v80 = (uint64_t)&a8[11 * v170 + 2213] + 4;
              int v149 = 1;
              int v150 = v40;
LABEL_134:
              GAL_EphInt2Real(v80, (uint64_t)v175);
              *(unsigned char *)(a8[2206] + v170) = v81;
              int v88 = v175[15];
              if (v175[201] == 2 || v175[198] == 1 || v175[15] == 255)
              {
                int v154 = v175[198];
                int v158 = v175[201];
                *(void *)char v187 = 0x4050000000000000;
                int v90 = v175[14];
                *((unsigned char *)a8 + v175[14] + 17671) = 1;
                *(void *)&long long v176 = 0;
                if (R8_EQ((const double *)v187, (const double *)&v176))
                {
                  EvLog_v("ST_Get_GPS_Orbit: DO NOT USE GAL SV with Marginal Health t %d SV %d HS %d DVS %d NAPA %d Sigma %d", *(_DWORD *)(a5 + 4), v90, v158, v154, v88 == 255, 64);
                  goto LABEL_161;
                }
                if (v88 == 255)
                {
                  int v91 = 64;
                }
                else
                {
                  *(void *)char v187 = 0x4051800000000000;
                  int v91 = 70;
                }
                int v140 = v158;
                char v157 = 8;
                EvLog_v("ST_Get_GPS_Orbit: USE GAL SV with Marginal Health t %d SV %d HS %d DVS %d NAPA %d FOM %d Sigma %d", *(_DWORD *)(a5 + 4), v90, v140, v154, v88 == 255, 8, v91);
                int v89 = 1;
              }
              else
              {
                int v89 = 0;
                char v157 = 0;
                *((unsigned char *)a8 + v175[14] + 17671) = 0;
              }
              GAL_EphReal2Kep((uint64_t)v175, (uint64_t)v171);
              int v92 = 1;
              int v141 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 1, (uint64_t)v171);
              if (!ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(GAL)", v141, (uint64_t)v171))
              {
                if (v149)
                {
                  *(unsigned char *)(a8[2202] + v170) = 0;
                  int v142 = a8[11 * v170 + 2214];
                  if (v142 == 5 || v142 == 3) {
                    Core_Set_GAL_Eph_Invalid((void *)v168);
                  }
                }
                int v92 = 0;
                if (v150) {
                  *(unsigned char *)(a8[2203] + v170) = 0;
                }
              }
              if (v89) {
                BYTE3(v171[1]) = v157;
              }
              goto LABEL_174;
            case 4u:
              int v45 = *(unsigned __int8 *)(a8[3182] + v170);
              uint64_t v46 = v170;
              int v47 = *(unsigned __int8 *)(a8[3183] + v170);
              BOOL v48 = *(unsigned char *)(a8[3183] + v170) != 0;
              memset(v187, 0, 18);
              memset(&v187[20], 0, 178);
              long long v188 = 0u;
              memset(v189, 0, 23);
              if (v45 && v47)
              {
                long long v176 = 0uLL;
                memset(v177, 0, 20);
                memset(&v177[24], 0, 64);
                long long v178 = 0uLL;
                long long v179 = 0uLL;
                long long v180 = 0uLL;
                long long v181 = 0uLL;
                long long v182 = 0uLL;
                long long v183 = 0uLL;
                long long v184 = 0uLL;
                long long v185 = 0uLL;
                uint64_t v186 = 0;
                memset(v175, 0, 36);
                memset(&v175[40], 0, 200);
                BDS_EphInt2Real((uint64_t)&a8[19 * v170 + 4386], (uint64_t)v187);
                BDS_EphReal2Kep((uint64_t)v187, (uint64_t)v175);
                int v49 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 0, (uint64_t)v175);
                BOOL v50 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v49, (uint64_t)v175);
                if (!v50) {
                  *(unsigned char *)(a8[3183] + v170) = 0;
                }
                BDS_EphInt2Real((uint64_t)&a8[19 * v170 + 3189], (uint64_t)v187);
                BDS_EphReal2Kep((uint64_t)v187, (uint64_t)&v176);
                int v51 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), !v50, (uint64_t)&v176);
                if (!ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v51, (uint64_t)&v176))
                {
                  *(unsigned char *)(a8[3182] + v170) = 0;
                  int v82 = HIDWORD(a8[19 * v170 + 3189]);
                  if (v82 == 5 || v82 == 3) {
                    Core_Set_BDS_Eph_Invalid((void *)v168);
                  }
                  if (!v50) {
                    goto LABEL_161;
                  }
                  goto LABEL_125;
                }
                if (v50
                  && (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)&v176, (uint64_t)v175, 1) & 1) == 0&& DWORD1(v176) != 5)
                {
                  *int v159 = 0;
                  *((unsigned char *)a8 + v22 + 60862) = 1;
                  int v52 = HIDWORD(a8[19 * v170 + 3189]);
                  if (v52 == 5 || v52 == 3) {
                    Core_Set_BDS_Eph_Invalid((void *)v168);
                  }
LABEL_125:
                  int v152 = 0;
                  uint64_t v83 = (uint64_t)&a8[19 * v170 + 4386];
                  char v84 = 1;
                  int v156 = 1;
                  goto LABEL_144;
                }
                BOOL v48 = 0;
              }
              else if (!v45)
              {
                if (!v47) {
                  goto LABEL_161;
                }
                goto LABEL_125;
              }
              int v156 = v48;
              char v84 = 0;
              uint64_t v83 = (uint64_t)&a8[19 * v170 + 3189];
              int v152 = 1;
LABEL_144:
              BDS_EphInt2Real(v83, (uint64_t)v187);
              *(unsigned char *)(a8[3186] + v170) = v84;
              BDS_EphReal2Kep((uint64_t)v187, (uint64_t)v171);
              int v92 = 1;
              int v93 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 1, (uint64_t)v171);
              if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(BDS)", v93, (uint64_t)v171)) {
                goto LABEL_174;
              }
              if (v152)
              {
                *(unsigned char *)(a8[3182] + v170) = 0;
                int v94 = HIDWORD(a8[19 * v170 + 3189]);
                if (v94 == 5 || v94 == 3) {
                  Core_Set_BDS_Eph_Invalid((void *)v168);
                }
              }
              if (v156)
              {
                int v92 = 0;
                uint64_t v95 = a8[3183];
                goto LABEL_160;
              }
              goto LABEL_161;
            case 5u:
              memset(v187, 0, 36);
              memset(&v187[40], 0, 160);
              long long v188 = 0u;
              memset(v189, 0, 24);
              long long v176 = 0u;
              memset(v177, 0, 20);
              memset(&v177[24], 0, 64);
              long long v178 = 0u;
              long long v179 = 0u;
              long long v180 = 0u;
              long long v181 = 0u;
              long long v182 = 0u;
              long long v183 = 0u;
              long long v184 = 0u;
              long long v185 = 0u;
              uint64_t v186 = 0;
              v187[19] = 99;
              v177[3] = 99;
              uint64_t v34 = v170;
              if (*(unsigned char *)(a8[1138] + v170))
              {
                Get_GPS_Kep_Ephemeris(5, v168, (uint64_t)a8 + 116 * v170 + 10312, (uint64_t)&v176);
                int v53 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 0, (uint64_t)&v176);
                if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(EE)", v53, (uint64_t)&v176))
                {
                  int v54 = 1;
                }
                else
                {
                  int v54 = 0;
                  *(unsigned char *)(a8[1138] + v170) = 0;
                }
              }
              else
              {
                int v54 = 0;
              }
              if (!*(unsigned char *)(a8[1137] + v170)) {
                goto LABEL_104;
              }
              Get_GPS_Kep_Ephemeris(v174, v168, (uint64_t)a8 + 116 * v170 + 9152, (uint64_t)v187);
              int v68 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), v54 ^ 1u, (uint64_t)v187);
              if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v68, (uint64_t)v187))
              {
                if (v54)
                {
                  int v69 = (long long *)v187;
                  char v70 = ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)v187, (uint64_t)&v176, 1);
                  char v66 = 0;
                  if ((v70 & 1) == 0 && *(_DWORD *)&v187[4] != 5)
                  {
                    *(unsigned char *)(a8[1137] + v170) = 0;
                    char v66 = 1;
                    *(unsigned char *)(a8[1135] + v170) = 1;
                    int v71 = *((_DWORD *)a8 + 29 * v170 + 2289);
                    if (v71 != 5 && v71 != 3) {
                      goto LABEL_106;
                    }
                    Core_Set_QZSS_Eph_Invalid((void *)v168);
LABEL_105:
                    char v66 = 1;
LABEL_106:
                    int v69 = &v176;
                  }
                }
                else
                {
                  char v66 = 0;
                  int v69 = (long long *)v187;
                }
                long long v109 = v69[13];
                v171[12] = v69[12];
                long long v172 = v109;
                long long v173 = v69[14];
                long long v110 = v69[9];
                v171[8] = v69[8];
                v171[9] = v110;
                long long v111 = v69[11];
                v171[10] = v69[10];
                v171[11] = v111;
                long long v112 = v69[5];
                v171[4] = v69[4];
                v171[5] = v112;
                long long v113 = v69[7];
                v171[6] = v69[6];
                v171[7] = v113;
                long long v114 = v69[1];
                v171[0] = *v69;
                v171[1] = v114;
                long long v115 = v69[3];
                v171[2] = v69[2];
                v171[3] = v115;
                uint64_t v108 = a8[1141];
LABEL_173:
                *(unsigned char *)(v108 + v34) = v66;
                int v92 = 1;
                goto LABEL_174;
              }
              *(unsigned char *)(a8[1137] + v170) = 0;
              int v73 = *((_DWORD *)a8 + 29 * v170 + 2289);
              if (v73 == 5 || v73 == 3) {
                Core_Set_QZSS_Eph_Invalid((void *)v168);
              }
LABEL_104:
              if (v54) {
                goto LABEL_105;
              }
              goto LABEL_161;
            case 6u:
              int v155 = a8 + 5955;
              uint64_t v55 = a8[5956];
              uint64_t v46 = v170;
              int v56 = *(unsigned __int8 *)(a8[5955] + v170);
              int v57 = *(unsigned __int8 *)(v55 + v170);
              BOOL v58 = *(unsigned char *)(v55 + v170) != 0;
              *(_WORD *)&v175[16] = 0;
              *(void *)&v175[20] = 0;
              *(void *)long long v175 = 0;
              *(void *)&v175[7] = 0;
              memset(&v175[32], 0, 152);
              if (v56 && v57)
              {
                memset(v187, 0, 36);
                memset(&v187[40], 0, 160);
                long long v188 = 0uLL;
                memset(v189, 0, 24);
                long long v176 = 0uLL;
                memset(v177, 0, 20);
                memset(&v177[24], 0, 64);
                long long v178 = 0uLL;
                long long v179 = 0uLL;
                long long v180 = 0uLL;
                long long v181 = 0uLL;
                long long v182 = 0uLL;
                long long v183 = 0uLL;
                long long v184 = 0uLL;
                long long v185 = 0uLL;
                uint64_t v186 = 0;
                NVIC_EphInt2Real((uint64_t)a8 + 76 * v170 + 48760, (uint64_t)v175);
                NVIC_EphReal2Kep((uint64_t)v175, (uint64_t)&v176);
                int v59 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 0, (uint64_t)&v176);
                BOOL v60 = ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(EE)", v59, (uint64_t)&v176);
                if (!v60) {
                  *(unsigned char *)(a8[5956] + v170) = 0;
                }
                NVIC_EphInt2Real((uint64_t)a8 + 76 * v170 + 47696, (uint64_t)v175);
                NVIC_EphReal2Kep((uint64_t)v175, (uint64_t)v187);
                int v61 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), !v60, (uint64_t)v187);
                if (!ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(Eph)", v61, (uint64_t)v187))
                {
                  *(unsigned char *)(*v155 + v170) = 0;
                  int v85 = *((_DWORD *)a8 + 19 * v170 + 11925);
                  if (v85 == 5 || v85 == 3) {
                    Core_Set_NVIC_Eph_Invalid((void *)v168);
                  }
                  if (!v60) {
                    goto LABEL_161;
                  }
                  goto LABEL_130;
                }
                if (v60
                  && (ST_Cross_Check_Eph_Kep_vs_Eph_Kep(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), (uint64_t)v187, (uint64_t)&v176, 1) & 1) == 0&& *(_DWORD *)&v187[4] != 5)
                {
                  *int v159 = 0;
                  *((unsigned char *)a8 + v22 + 60862) = 1;
                  int v62 = *((_DWORD *)a8 + 19 * v170 + 11925);
                  if (v62 == 5 || v62 == 3) {
                    Core_Set_NVIC_Eph_Invalid((void *)v168);
                  }
LABEL_130:
                  uint64_t v86 = (uint64_t)a8 + 76 * v170 + 48760;
                  char v87 = 1;
                  int v151 = 0;
                  int v153 = 1;
                  goto LABEL_153;
                }
                BOOL v58 = 0;
              }
              else if (!v56)
              {
                if (!v57) {
                  goto LABEL_161;
                }
                goto LABEL_130;
              }
              char v87 = 0;
              uint64_t v86 = (uint64_t)a8 + 76 * v170 + 47696;
              int v151 = 1;
              int v153 = v58;
LABEL_153:
              NVIC_EphInt2Real(v86, (uint64_t)v175);
              *(unsigned char *)(a8[5959] + v170) = v87;
              NVIC_EphReal2Kep((uint64_t)v175, (uint64_t)v171);
              int v92 = 1;
              int v96 = Kep_Check_Ephemeris(*(__int16 *)(a5 + 8), *(_DWORD *)(a5 + 4), 1, (uint64_t)v171);
              if (ST_Check_Eph_Kep_Err((uint64_t)"ST_Get_GPS_Orbit(NVC)", v96, (uint64_t)v171)) {
                goto LABEL_174;
              }
              if (v151)
              {
                *(unsigned char *)(*v155 + v170) = 0;
                int v97 = *((_DWORD *)a8 + 19 * v170 + 11925);
                if (v97 == 5 || v97 == 3) {
                  Core_Set_NVIC_Eph_Invalid((void *)v168);
                }
              }
              if (v153)
              {
                int v92 = 0;
                uint64_t v95 = a8[5956];
LABEL_160:
                *(unsigned char *)(v95 + v46) = 0;
              }
              else
              {
LABEL_161:
                int v92 = 0;
              }
LABEL_174:
              BOOL v33 = v92 != 0;
              if (v92) {
                goto LABEL_182;
              }
LABEL_175:
              if (BYTE2(v171[1]) == 255 && (v174 - 3 < 4 || v174 == 1)) {
                EvLog_v("ST_Get_GPS_Orbit:  %c %d  Alm looking Eph timed-out", byte_263D83400[v174], v170);
              }
              *(_DWORD *)(a5 + 12) = 0;
              if (*v161) {
                break;
              }
              if (Get_Constell_Prn(v22) == 2) {
                __assert_rtn("ST_Get_GPS_Orbit", "GPS_State_Update.cpp", 2195, "Get_Constell_Prn( (U1)i) != GLON_CONSTELL");
              }
              *int v159 = 0;
              int8x16_t v116 = (char *)a8 + v22;
              v116[61516] = 0;
              v116[60862] = 1;
LABEL_182:
              int v37 = *(_DWORD *)(a5 + 12);
              if (v37 == 2) {
                goto LABEL_186;
              }
              if (v37) {
                goto LABEL_202;
              }
              break;
            default:
              goto LABEL_175;
          }
        }
        else
        {
          if (!*((unsigned char *)a8 + v22 + 60208)) {
            return;
          }
          BOOL v33 = 0;
        }
        float64x2_t v117 = (char *)a8 + v22;
        if (!v117[60208]) {
          return;
        }
        v117[60644] = 0;
        v117[61516] = 0;
        *(_DWORD *)(a5 + 12) = 2;
LABEL_186:
        *(_WORD *)int v177 = 0;
        *(void *)&long long v176 = 0;
        *(void *)((char *)&v176 + 7) = 0;
        memset(&v177[4], 0, 76);
        switch(v174)
        {
          case 0u:
          case 2u:
          case 7u:
            goto LABEL_200;
          case 1u:
            Get_GPS_Kep_Almanac((uint64_t)a8 + 44 * v170 + 7544, (uint64_t)&v176);
            goto LABEL_198;
          case 3u:
            memset(v187, 0, 91);
            GAL_AlmInt2Real((uint64_t)a8 + 36 * v170 + 24044, (uint64_t)v187);
            *(_OWORD *)&v177[8] = *(_OWORD *)&v187[72];
            *(void *)&v177[24] = *(void *)&v187[24];
            *(double *)&v177[32] = *(double *)&v187[32] + 0.977384381;
            *(void *)&v177[40] = *(void *)&v187[48];
            *(void *)&v177[48] = *(void *)&v187[64];
            *(void *)((char *)&v176 + 4) = *(unsigned int *)&v187[4] | 0x300000000;
            BYTE12(v176) = v187[8];
            BYTE13(v176) = v187[90] | (8 * v187[89]);
            BYTE14(v176) = v187[9];
            *(_WORD *)int v177 = *(_WORD *)&v187[10] + 1024;
            *(_DWORD *)&v177[4] = *(_DWORD *)&v187[12];
            *(double *)&v177[56] = *(double *)&v187[16] + 5440.5882;
            *(void *)&v177[64] = *(void *)&v187[40];
            *(void *)&v177[72] = *(void *)&v187[56];
            goto LABEL_198;
          case 4u:
            memset(v187, 0, 88);
            BDS_AlmInt2Real((uint64_t)a8 + 44 * v170 + 44664, (uint64_t)v187);
            *(void *)&long long v176 = *(void *)v187;
            *(void *)&v177[56] = *(void *)&v187[16];
            *(void *)&v177[72] = *(void *)&v187[32];
            double v118 = 0.942477796;
            if (v187[11] - 59 < 0xFFFFFFCB) {
              double v118 = 0.0;
            }
            *(void *)&v177[24] = *(void *)&v187[24];
            *(double *)&v177[32] = *(double *)&v187[64] + v118;
            *(void *)&v177[48] = *(void *)&v187[40];
            *(void *)&v177[40] = *(void *)&v187[56];
            *(_OWORD *)&v177[8] = *(_OWORD *)&v187[72];
            *(_DWORD *)&v177[4] = *(_DWORD *)&v187[12] + 14;
            *(_WORD *)int v177 = *(_WORD *)&v187[8] + 1356;
            if (*(_DWORD *)&v187[12] + 14 > 604799)
            {
              *(_DWORD *)&v177[4] = *(_DWORD *)&v187[12] - 604786;
              *(_WORD *)int v177 = *(_WORD *)&v187[8] + 1357;
            }
            *(double *)&v177[64] = *(double *)&v187[48] + 0.0010208961;
            DWORD2(v176) = 4;
            BYTE12(v176) = v187[11];
            BYTE13(v176) = v187[10] ^ 1;
            goto LABEL_198;
          case 5u:
            Get_QZSS_Kep_Almanac((uint64_t)a8 + 44 * v170 + 11472, (uint64_t)&v176);
            goto LABEL_198;
          case 6u:
            *(_WORD *)&v187[12] = 0;
            *(_DWORD *)&v187[16] = 0;
            *(void *)char v187 = 0;
            *(_DWORD *)&v187[7] = 0;
            memset(&v187[24], 0, 80);
            NVIC_AlmInt2Real((uint64_t)a8 + 52 * v170 + 49824, (uint64_t)v187);
            *(void *)&long long v176 = *(void *)v187;
            *(_OWORD *)&v177[8] = *(_OWORD *)&v187[80];
            *(_OWORD *)&v177[24] = *(_OWORD *)&v187[24];
            *(void *)&v177[40] = *(void *)&v187[40];
            *(void *)&v177[48] = *(void *)&v187[72];
            *(_OWORD *)&v177[56] = *(_OWORD *)&v187[48];
            DWORD2(v176) = 6;
            WORD6(v176) = *(_WORD *)&v187[8];
            BYTE14(v176) = (0x101010102
                          * (unint64_t)(*(_DWORD *)&v187[16] / 0x15180u
                                             - *(unsigned __int16 *)&v187[12]
                                             + 8 * *(unsigned __int16 *)&v187[12])) >> 32;
            *(_WORD *)int v177 = *(_WORD *)&v187[12] + 1024;
            *(_DWORD *)&v177[4] = *(_DWORD *)&v187[16];
            *(void *)&v177[72] = *(void *)&v187[64];
            goto LABEL_198;
          default:
            if (!v33) {
              goto LABEL_200;
            }
LABEL_198:
            int v119 = Kep_Check_Almanac(*(__int16 *)(a5 + 8), (uint64_t)&v176);
            if (ST_Check_Alm_Kep_Err((uint64_t)"ST_Get_GPS_Orbit", v119, (uint64_t)&v176))
            {
              *(_OWORD *)((char *)&v171[11] + 8) = 0u;
              memset((char *)&v171[3] + 8, 0, 120);
              *(_OWORD *)((char *)&v171[1] + 8) = 0u;
              *(_OWORD *)((char *)v171 + 8) = 0u;
              *(void *)&v171[0] = v176;
              v171[11] = *(_OWORD *)&v177[48];
              *((void *)&v171[12] + 1) = *(void *)&v177[64];
              *(void *)&long long v172 = *(void *)&v177[32];
              *((void *)&v172 + 1) = *(void *)&v177[72];
              *(void *)&long long v173 = *(void *)&v177[24];
              *((void *)&v173 + 1) = *(void *)&v177[40];
              *(_OWORD *)((char *)&v171[2] + 8) = *(_OWORD *)&v177[8];
              DWORD2(v171[1]) = *(_DWORD *)&v177[4];
              HIDWORD(v171[1]) = *(_DWORD *)&v177[4];
              LODWORD(v171[2]) = *(_DWORD *)&v177[4];
              WORD3(v171[1]) = *(_WORD *)v177;
              DWORD2(v171[0]) = DWORD2(v176);
              BYTE14(v171[0]) = BYTE13(v176);
              BYTE12(v171[0]) = BYTE12(v176);
              int v37 = *(_DWORD *)(a5 + 12);
            }
            else
            {
LABEL_200:
              gn_report_assertion_failure("ST_Get_GPS_Orbit : status == TRUE");
              int v37 = 0;
              *(_DWORD *)(a5 + 12) = 0;
              int8x16_t v120 = (char *)a8 + v22;
              if (!v120[60644])
              {
                int v37 = 0;
                v120[60208] = 0;
                v120[61080] = 1;
              }
            }
            break;
        }
        goto LABEL_202;
      }
    }
  }
}

void GPS_State_Update(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v83 = (_DWORD *)(a2 + 4);
  char v84 = (__int16 *)(a2 + 8);
  if (!ST_Get_Time(a3, (__int16 *)(a2 + 8), (_DWORD *)(a2 + 4))) {
    return;
  }
  uint64_t v80 = a5;
  *(_DWORD *)a2 = 0;
  if (!*(unsigned char *)(a1 + 402)) {
    goto LABEL_7;
  }
  int v13 = *(_DWORD *)(a2 + 4);
  int v14 = v13 - *(_DWORD *)a1;
  *(_DWORD *)a2 = v14;
  int v15 = *(unsigned __int16 *)(a2 + 8);
  if (v15 != *(unsigned __int16 *)(a1 + 4))
  {
    if (*(__int16 *)(a1 + 4) + 1 != (__int16)v15)
    {
LABEL_7:
      GPS_State_Update_Init(a1, a2, a3, a4, a6, a7, a8);
      return;
    }
    v14 += 604800;
    *(_DWORD *)a2 = v14;
  }
  if ((v14 - 101) < 0xFFFFFF91) {
    goto LABEL_7;
  }
  uint64_t v16 = 0;
  *(_WORD *)(a1 + 4) = v15;
  uint64_t v17 = a1 + 6;
  unsigned int v18 = (_DWORD *)(a8 + 176);
  *(_DWORD *)a1 = v13;
  do
  {
    if (*((unsigned char *)a4 + v16 + 62171) && *v18)
    {
      int v19 = Num_Pos_Idx_To_Num_Prn_Idx(v16);
      if ((*((unsigned char *)a4 + v19 + 59772) || *((unsigned char *)a4 + v19 + 59990) || *((unsigned char *)a4 + v19 + 60208))
        && ST_Is_SV_Useable((uint64_t)a4, a6, v18[2], v19))
      {
        int v20 = (__int16)(*(_WORD *)(v17 + 2 * v16) + *(_WORD *)a2);
        *(_WORD *)(v17 + 2 * v16) += *(_WORD *)a2;
        if (v20 > 450) {
          goto LABEL_7;
        }
      }
      else
      {
        *unsigned int v18 = 0;
        *(_WORD *)(v17 + 2 * v16) = 0;
      }
    }
    ++v16;
    v18 += 48;
  }
  while (v16 != 197);
  uint64_t v21 = 0;
  unsigned __int8 v22 = 0;
  uint64_t v78 = a1 + 6;
  unsigned int v23 = (int *)(a8 + 176);
  memset(v99, 0, 197);
  uint64_t v81 = a1;
  do
  {
    *((unsigned char *)v99 + v21) = 0;
    if (*((unsigned char *)a4 + v21 + 62171) && (!*(unsigned char *)(a6 + v21 + 257) || !*(unsigned char *)(a6 + v21 + 536)))
    {
      signed int Constell_Pos = Get_Constell_Pos(v21);
      unsigned int v25 = Constell_Pos;
      if (Constell_Pos <= 0)
      {
        int v27 = 0;
        int v26 = v21;
      }
      else
      {
        int v26 = v21 - Num_Pos[Constell_Pos - 1];
        int v27 = Num_Prn[Constell_Pos - 1];
      }
      uint64_t v28 = (v27 + v26);
      int v29 = *v23;
      if (*v23 == 1)
      {
        if (!*((unsigned char *)a4 + v28 + 60426))
        {
          int v30 = *(__int16 *)(v78 + 2 * v21);
          if (*(char *)(v80 + v28) < -2)
          {
            if (v30 <= 60)
            {
LABEL_44:
              a1 = v81;
              goto LABEL_45;
            }
          }
          else if (v30 <= 5)
          {
            goto LABEL_44;
          }
        }
      }
      else if ((!v29 || *(__int16 *)(v78 + 2 * v21) <= 60) {
             && (!*((unsigned char *)a4 + v28 + 59772) && !*((unsigned char *)a4 + v28 + 59990)
      }
              || !ST_Is_SV_Useable((uint64_t)a4, a6, Constell_Pos, v28))
             && (v29 || !*((unsigned char *)a4 + v28 + 60208) || !ST_Is_SV_Useable((uint64_t)a4, a6, v25, v28)))
      {
        goto LABEL_44;
      }
      *((unsigned char *)v99 + v21) = 1;
      ++v22;
      goto LABEL_44;
    }
LABEL_45:
    ++v21;
    v23 += 48;
  }
  while (v21 != 197);
  if (v22 == 1) {
    goto LABEL_100;
  }
  if (v22)
  {
    EvLog_d("GPS_State_Update: Immediate Updates = ", v22);
LABEL_100:
    unsigned int v59 = 0;
    do
    {
      uint64_t v60 = v59;
      if (*((unsigned char *)v99 + v59))
      {
        long long v97 = 0u;
        memset(v98, 0, 31);
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v88 = 0u;
        ST_Update_Table(v59, 15, 60, (uint64_t)&v88, a2, a1, a6, a4, a7);
        if (*(_DWORD *)(a2 + 12))
        {
          *(unsigned char *)(a1 + 402) = 1;
        }
        else
        {
          *(_DWORD *)&v98[16] = 0;
          *(_WORD *)(a1 + 2 * v60 + 6) = 0;
        }
        if (Get_Constell_Pos(v60) != 2
          || *(_DWORD *)&v98[16]
          || (int v61 = *(_DWORD *)(a8 + 192 * v60 + 176)) == 0
          || (v61 != 1 ? (int v62 = 203) : (int v62 = 10),
              *v83
            - *(_DWORD *)(a8 + 192 * v60 + 160)
            + 604800 * (*v84 - *(__int16 *)(a8 + 192 * v60 + 164)) >= v62))
        {
          long long v63 = v97;
          uint64_t v64 = (_OWORD *)(a8 + 192 * v60);
          v64[8] = v96;
          v64[9] = v63;
          long long v65 = *(_OWORD *)&v98[16];
          v64[10] = *(_OWORD *)v98;
          v64[11] = v65;
          long long v66 = v93;
          v64[4] = v92;
          v64[5] = v66;
          long long v67 = v95;
          v64[6] = v94;
          v64[7] = v67;
          long long v68 = v89;
          _OWORD *v64 = v88;
          v64[1] = v68;
          long long v69 = v91;
          v64[2] = v90;
          v64[3] = v69;
        }
        --v22;
      }
      unsigned int v59 = v60 + 1;
    }
    while (v22);
    goto LABEL_115;
  }
  uint64_t v31 = 0;
  char v82 = 0;
  uint64_t v76 = a1 + 6;
  int v32 = (char *)a4 + 62171;
  int v77 = *(unsigned __int8 *)(v80 + 654);
  uint64_t v33 = a8 + 176;
  unsigned int v34 = 15;
  unsigned __int16 v73 = 20;
  int v74 = 90;
  __int16 v72 = 5;
  int v35 = -1;
  while (2)
  {
    uint64_t v36 = 0;
    int v79 = &v32[v31];
    int v37 = (int *)(v33 + 192 * v31);
    uint64_t v38 = a6 + v31;
    int v39 = v31;
    unsigned int v40 = v35;
LABEL_50:
    if (!*(unsigned char *)(v38 + v36 + 257) || !*(unsigned char *)(v38 + v36 + 536))
    {
      int v41 = Get_Constell_Pos((v82 + v36));
      int v42 = *v37;
      if (*v37)
      {
        if (v79[v36])
        {
          if (v77)
          {
            if (v41 <= 0)
            {
              int v44 = 0;
              int v43 = v39;
              int v35 = v39;
            }
            else
            {
              int v35 = v31 + v36;
              int v43 = v31 + v36 - Num_Pos[v41 - 1];
              int v44 = Num_Prn[v41 - 1];
            }
            int v45 = *(char *)(v80 + v44 + v43);
            if (v45 > -3 || v45 == -99) {
              goto LABEL_61;
            }
          }
          else
          {
            int v35 = v31 + v36;
LABEL_61:
            uint64_t v75 = v76 + 2 * v31;
            int v46 = *(__int16 *)(v75 + 2 * v36);
            if (v46 >= 0) {
              int v47 = *(__int16 *)(v75 + 2 * v36);
            }
            else {
              int v47 = -v46;
            }
            if (v42 == 1)
            {
              if ((unsigned __int16)v47 <= v73)
              {
                if (v34 >= 8 && v46 > v72)
                {
                  uint64_t v52 = v31 + v36;
                  v31 += v36 + 1;
                  v82 += v36 + 1;
                  unsigned int v34 = 8;
                  __int16 v72 = *(_WORD *)(v75 + 2 * v36);
                  BOOL v53 = v52 == 196;
                  int v32 = (char *)a4 + 62171;
                  uint64_t v33 = a8 + 176;
                  if (!v53) {
                    continue;
                  }
                  goto LABEL_90;
                }
              }
              else
              {
                unsigned int v34 = 5;
                unsigned __int16 v73 = v47;
                unsigned int v40 = v35;
              }
            }
            else if (v42 == 2)
            {
              int v48 = v74;
              if ((unsigned __int16)v47 > (unsigned __int16)v74) {
                int v49 = 6;
              }
              else {
                int v49 = v34;
              }
              if ((unsigned __int16)v47 > (unsigned __int16)v74) {
                int v50 = v47;
              }
              else {
                int v50 = v74;
              }
              if ((unsigned __int16)v47 <= (unsigned __int16)v74) {
                int v35 = v40;
              }
              BOOL v51 = v34 >= 6;
              if (v34 >= 6)
              {
                unsigned int v34 = v49;
                int v48 = v50;
              }
              int v74 = v48;
              if (v51) {
                unsigned int v40 = v35;
              }
            }
          }
        }
      }
    }
    break;
  }
  ++v39;
  ++v36;
  v37 += 48;
  if (v31 + v36 != 197) {
    goto LABEL_50;
  }
  int v35 = v40;
  int v32 = (char *)a4 + 62171;
  if (v34 <= 7) {
    goto LABEL_98;
  }
LABEL_90:
  uint64_t v54 = 0;
  uint64_t v55 = (int *)(a8 + 176);
  unsigned __int16 v56 = 90;
  unsigned int v40 = v35;
  do
  {
    int v57 = *v55;
    v55 += 48;
    if (v57 && v32[v54])
    {
      int v58 = *(__int16 *)(v76 + 2 * v54);
      if (v58 < 0) {
        int v58 = -v58;
      }
      if ((unsigned __int16)v58 > v56)
      {
        unsigned __int16 v56 = v58;
        unsigned int v40 = v54;
      }
    }
    ++v54;
  }
  while (v54 != 197);
LABEL_98:
  if ((v40 & 0x80000000) == 0)
  {
    unsigned __int8 v22 = 1;
    *((unsigned char *)v99 + v40) = 1;
    goto LABEL_100;
  }
LABEL_115:
  uint64_t v70 = 0;
  *(unsigned char *)(a1 + 402) = 0;
  for (uint64_t i = (_DWORD *)(a8 + 176); !*((unsigned char *)a4 + v70 + 62171) || !*i; i += 48)
  {
    if (++v70 == 197) {
      return;
    }
  }
  *(unsigned char *)(a1 + 402) = 1;
}

uint64_t ST_Cross_Check_SVRS_vs_SVRS(uint64_t a1, uint64_t a2)
{
  double v2 = 0.0;
  uint64_t v3 = 2;
  do
  {
    double v2 = v2 + *(double *)(a1 + 8 * v3) * *(double *)(a1 + 8 * v3);
    unint64_t v4 = v3-- + 1;
  }
  while (v4 > 1);
  double v5 = (*(double *)(a1 + 104) - *(double *)(a2 + 104)) * 2.99792458e11;
  double v6 = 0.0;
  uint64_t v7 = 2;
  do
  {
    double v6 = v6 + *(double *)(a2 + 8 * v7) * *(double *)(a2 + 8 * v7);
    unint64_t v8 = v7-- + 1;
  }
  while (v8 > 1);
  double v9 = (*(double *)(a1 + 96) - *(double *)(a2 + 96)) * 299792458.0;
  double v10 = 0.0;
  uint64_t v11 = 2;
  double v12 = sqrt(v6);
  do
  {
    double v13 = *(double *)(a1 + 8 * v11) - *(double *)(a2 + 8 * v11);
    double v10 = v10 + v13 * v13;
    unint64_t v14 = v11-- + 1;
  }
  while (v14 > 1);
  double v15 = sqrt(v2) - v12;
  double v16 = 0.0;
  uint64_t v17 = 5;
  do
  {
    double v18 = *(double *)(a1 + 8 * v17) - *(double *)(a2 + 8 * v17);
    double v16 = v16 + v18 * v18;
    unint64_t v19 = v17 - 2;
    --v17;
  }
  while (v19 > 1);
  double v20 = sqrt(v10);
  double v21 = sqrt(v16) * 1000.0;
  double v22 = *(double *)(a1 + 112);
  double v23 = *(double *)(a2 + 112);
  double v24 = sqrt(v22 + v23) * 5.0;
  BOOL v25 = fabs(v9) > v24;
  if (fabs(v5) > v24 * 0.05) {
    BOOL v25 = 1;
  }
  if (fabs(v15) > v24) {
    BOOL v25 = 1;
  }
  if (v20 > v24 * 10.0) {
    BOOL v25 = 1;
  }
  int v26 = v21 > v24 * 5.0 || v25;
  if (v26 == 1)
  {
    uint64_t v27 = *(int *)(a1 + 176);
    if (v27 > 2) {
      uint64_t v28 = 120;
    }
    else {
      uint64_t v28 = dword_263D83440[v27];
    }
    uint64_t v31 = *(int *)(a2 + 176);
    if (v31 > 2) {
      uint64_t v32 = 120;
    }
    else {
      uint64_t v32 = dword_263D83440[v31];
    }
    int v33 = *(_DWORD *)(a1 + 184) - 1;
    if (v33 > 6) {
      uint64_t v34 = 88;
    }
    else {
      uint64_t v34 = dword_263D8344C[v33];
    }
    EvCrt_v("ST_Cross_Check_SVRS:  %c vs %c  FAIL:  T %d  SV %c %d %d %d  BR %f %f %f  D %f %f  P %f %f  V %f %f  var %f %f", v28, v32, *(_DWORD *)(a1 + 160), v34, *(unsigned __int8 *)(a1 + 188), *(unsigned __int16 *)(a1 + 166), *(unsigned __int16 *)(a2 + 166), v9, v15, v24, v5, v24 * 0.05, v20, v24 * 10.0, v21, v24 * 5.0, sqrt(v22), sqrt(v23));
  }
  else if (g_Logging_Cfg >= 6)
  {
    uint64_t v29 = *(int *)(a1 + 176);
    if (v29 > 2) {
      uint64_t v30 = 120;
    }
    else {
      uint64_t v30 = dword_263D83440[v29];
    }
    uint64_t v35 = *(int *)(a2 + 176);
    if (v35 > 2) {
      uint64_t v36 = 120;
    }
    else {
      uint64_t v36 = dword_263D83440[v35];
    }
    int v37 = *(_DWORD *)(a1 + 184) - 1;
    if (v37 > 6) {
      uint64_t v38 = 88;
    }
    else {
      uint64_t v38 = dword_263D8344C[v37];
    }
    EvLog_v("ST_Cross_Check_SVRS:  %c vs %c  PASS:  T %d  SV %c %d %d %d  BR %f %f %f  D %f %f  P %f %f  V %f %f  var %f %f", v30, v36, *(_DWORD *)(a1 + 160), v38, *(unsigned __int8 *)(a1 + 188), *(unsigned __int16 *)(a1 + 166), *(unsigned __int16 *)(a2 + 166), v9, v15, v24, v5, v24 * 0.05, v20, v24 * 10.0, v21, v24 * 5.0, sqrt(v22), sqrt(v23));
  }
  return v26 ^ 1u;
}

BOOL ST_Check_Alm_Kep_Err(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = 1;
    do
    {
      if ((v5 & a2) != 0)
      {
        double v6 = 0.0;
        if (v5 > 15)
        {
          if (v5 > 63)
          {
            if (v5 == 64)
            {
              double v6 = *(double *)(a3 + 56);
            }
            else if (v5 == 128)
            {
              double v6 = *(double *)(a3 + 56);
            }
          }
          else if (v5 == 16)
          {
            double v6 = *(double *)(a3 + 40);
          }
          else if (v5 == 32)
          {
            double v6 = *(double *)(a3 + 40);
          }
        }
        else
        {
          switch(v5)
          {
            case 1:
              double v6 = (double)*(int *)(a3 + 20);
              break;
            case 2:
              double v6 = (double)*(int *)(a3 + 20);
              break;
            case 4:
              double v6 = *(double *)(a3 + 72);
              break;
            case 8:
              double v6 = *(double *)(a3 + 72);
              break;
            default:
              break;
          }
        }
        if (fabs(v6) >= 0.000001) {
          EvLog_v("%s:  Kep Almanac Error:  Rejected:  SV %c %d  Too %s = %g");
        }
        else {
          EvLog_v("%s:  Kep Almanac Error:  Rejected:  SV %c %d  Too %s = %e");
        }
      }
      BOOL v7 = v5 >= 0x8000;
      v5 *= 2;
    }
    while (!v7);
  }
  return a2 == 0;
}

BOOL ST_Check_Eph_Kep_Err(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = 1;
    do
    {
      if ((v5 & a2) != 0)
      {
        double v6 = 0.0;
        if (v5 <= 31)
        {
          switch(v5)
          {
            case 0:
            case 3:
            case 5:
            case 6:
            case 7:
              break;
            case 1:
              double v6 = (double)*(int *)(a3 + 24);
              break;
            case 2:
              double v6 = (double)*(int *)(a3 + 24);
              break;
            case 4:
              double v6 = (double)*(int *)(a3 + 24);
              break;
            case 8:
              double v6 = (double)*(int *)(a3 + 24);
              break;
            default:
              if (v5 == 16) {
                double v6 = (double)*(int *)(a3 + 28);
              }
              break;
          }
        }
        else if (v5 <= 255)
        {
          switch(v5)
          {
            case 32:
              double v6 = (double)*(int *)(a3 + 28);
              break;
            case 64:
              double v6 = *(double *)(a3 + 184);
              break;
            case 128:
              double v6 = *(double *)(a3 + 184);
              break;
          }
        }
        else if (v5 > 1023)
        {
          if (v5 == 1024)
          {
            double v6 = *(double *)(a3 + 232);
          }
          else if (v5 == 2048)
          {
            double v6 = *(double *)(a3 + 232);
          }
        }
        else if (v5 == 256)
        {
          double v6 = *(double *)(a3 + 224);
        }
        else if (v5 == 512)
        {
          double v6 = *(double *)(a3 + 224);
        }
        if (fabs(v6) >= 0.000001) {
          EvLog_v("%s:  Kep Ephemeris Error:  Rejected:  SV %c %d  Too %s = %g");
        }
        else {
          EvLog_v("%s:  Kep Ephemeris Error:  Rejected:  SV %c %d  Too %s = %e");
        }
      }
      BOOL v7 = v5 >= 0x8000;
      v5 *= 2;
    }
    while (!v7);
  }
  return a2 == 0;
}

BOOL ST_Is_SV_Useable(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (!a3) {
    return 0;
  }
  if (a3 == 6)
  {
    uint64_t v4 = a4;
    goto LABEL_8;
  }
  uint64_t v4 = a4;
  if (!*(unsigned char *)(a1 + a4 + 50616) || *(unsigned char *)(a2 + a4 + 257))
  {
    if (a3 >= 8 || ((0xBFu >> a3) & 1) == 0)
    {
LABEL_8:
      if (*(unsigned char *)(a1 + v4 + 50834)) {
        return *(unsigned char *)(a2 + v4 + 536) == 0;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t ST_Cross_Check_Eph_Kep_vs_Eph_Kep(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v12, 0, 191);
  if (*(_DWORD *)(a3 + 8) == 4 && *(unsigned __int8 *)(a3 + 12) <= 5u) {
    Kep_Calc_SV_Ref_State_BDS_GEO(1, a1, a2, a3, (uint64_t)v12);
  }
  else {
    Kep_Calc_SV_Ref_State(1, a1, a2, a3, (uint64_t)v12);
  }
  memset(v11, 0, 191);
  if (*(_DWORD *)(a3 + 8) == 4 && a5 == 1 && *(unsigned __int8 *)(a3 + 12) - 59 <= 0xFFFFFFCA) {
    Kep_Calc_SV_Ref_State_BDS_GEO(1, a1, a2, a4, (uint64_t)v11);
  }
  else {
    Kep_Calc_SV_Ref_State(a5, a1, a2, a4, (uint64_t)v11);
  }
  return ST_Cross_Check_SVRS_vs_SVRS((uint64_t)v12, (uint64_t)v11);
}

BOOL ST_Check_Duplicate_Eph(int a1, int a2, int a3, uint64_t a4, unsigned int *a5)
{
  *a5 = 255;
  switch(a1)
  {
    case 0:
    case 2:
    case 7:
      EvCrt_Illegal_switch_case("ST_Check_Duplicate_Eph", 0xBCAu);
      goto LABEL_3;
    case 1:
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      uint64_t v8 = a4 + 116 * a3 + 120;
      break;
    case 3:
      uint64_t v8 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = a4 + 88 * a3 + 17708;
      break;
    case 4:
      uint64_t v8 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a4 + 152 * a3 + 25512;
      uint64_t v23 = 0;
      break;
    case 5:
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      uint64_t v8 = a4 + 116 * a3 + 9152;
      break;
    case 6:
      uint64_t v8 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = a4 + 76 * a3 + 47696;
      break;
    default:
LABEL_3:
      uint64_t v8 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      break;
  }
  unsigned int v9 = 0;
  BOOL v10 = 1;
  while (1)
  {
    int Constell_Pos = Get_Constell_Pos(v9);
    int v12 = Constell_Pos - 1;
    if (Constell_Pos < 1)
    {
      if (v9 == a2) {
        goto LABEL_32;
      }
      int v14 = 0;
      signed int v13 = v9;
    }
    else
    {
      if (v9 == a2) {
        goto LABEL_32;
      }
      signed int v13 = v9 - Num_Pos[v12];
      int v14 = Num_Prn[v12];
    }
    if (!*(unsigned char *)(a4 + v14 + (uint64_t)v13 + 59772)) {
      goto LABEL_32;
    }
    if ((a1 & 0xFFFFFFFB) != 1) {
      goto LABEL_21;
    }
    if (Constell_Pos == 5) {
      break;
    }
    if (Constell_Pos == 1)
    {
      uint64_t v15 = a4 + 116 * v13 + 120;
      goto LABEL_16;
    }
LABEL_21:
    if (a1 == 3 && Constell_Pos == 3)
    {
      if (Is_GAL_IntEph_Same(v23, a4 + 88 * v13 + 17708)) {
        goto LABEL_34;
      }
    }
    else if (a1 == 4 && Constell_Pos == 4)
    {
      if (Is_BDS_IntEph_Same(v22, a4 + 152 * v13 + 25512)) {
        goto LABEL_34;
      }
    }
    else if (a1 == 6 && Constell_Pos == 6 && Is_NVIC_IntEph_Same(v21, a4 + 76 * v13 + 47696))
    {
      goto LABEL_34;
    }
LABEL_32:
    BOOL v10 = v9++ < 0xC4;
    if (v9 == 197) {
      return 0;
    }
  }
  uint64_t v15 = a4 + 116 * v13 + 9152;
LABEL_16:
  if (*(_DWORD *)(v8 + 8) != *(_DWORD *)(v15 + 8)) {
    goto LABEL_21;
  }
  uint64_t v16 = 3;
  while (v16 != 26)
  {
    int v17 = *(_DWORD *)(v8 + 4 * v16);
    int v18 = *(_DWORD *)(v15 + 4 * v16++);
    if (v17 != v18)
    {
      if ((unint64_t)(v16 - 4) > 0x16) {
        break;
      }
      goto LABEL_21;
    }
  }
LABEL_34:
  *a5 = v9;
  return v10;
}

uint64_t ST_Get_SNR_Levels(uint64_t a1, int a2, unsigned __int8 *a3, _WORD *a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = *(_DWORD *)(a1 + 32);
  *a4 = 0;
  uint64_t v8 = a1 + 1640;
  unsigned int v9 = (unsigned __int8 *)(a1 + 1000);
  do
  {
    if (*v9 != a2) {
      goto LABEL_10;
    }
    int v10 = v9[2];
    if (v10 == *a3 && *(int *)(v8 + 4 * v4) > 3)
    {
      int v5 = 1;
      uint64_t v11 = a4;
LABEL_9:
      *uint64_t v11 = *(unsigned char *)(v8 + v4 + 512);
      goto LABEL_10;
    }
    if (v10 == a3[1] && *(int *)(v8 + 4 * v4) >= 4)
    {
      int v6 = 1;
      uint64_t v11 = (char *)a4 + 1;
      goto LABEL_9;
    }
LABEL_10:
    ++v4;
    v9 += 4;
  }
  while (v4 != 128);
  return (v7 == *(_DWORD *)(a1 + 32)) & v5 & v6;
}

uint64_t GM_Get_Best_SyncSV(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v9 = 0;
  uint64_t v42 = *MEMORY[0x263EF8340];
  memset(v41, 0, sizeof(v41));
  memset(v40, 0, sizeof(v40));
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  *a5 = -1;
  *a6 = -1;
  do
  {
    unint64_t v10 = *(unsigned int *)(a2 + 36 * v9);
    if (Is_Legal(*(_DWORD *)(a2 + 36 * v9))
      && (~*(unsigned __int16 *)(a2 + 36 * v9 + 8) & 0x208) == 0
      && *(unsigned char *)(a3 + 48 * v9 + 4)
      && *(unsigned char *)(a3 + 48 * v9 + 15))
    {
      uint64_t v11 = a1;
      int v12 = (_DWORD *)(a1 + 56 * v9);
      uint64_t v13 = a3;
      uint64_t v14 = a3 + 48 * v9;
      int v16 = *(_DWORD *)(v14 + 28);
      uint64_t v15 = (_DWORD *)(v14 + 28);
      int v17 = *v12 - v16;
      if (fabs((double)v17) > 21.0)
      {
        GNSS_SV_Str = Get_GNSS_SV_Str(v10);
        EvLog_v("GM_Get_Best_SyncSV:  %3d  %7s  Large (Meas - AA) Z-Count diff !  %d  (%d - %d)", v9, GNSS_SV_Str, v17, *v12, *v15);
        a3 = v13;
        a1 = v11;
      }
      else
      {
        uint64_t v18 = 0;
        int v19 = *(_DWORD *)(v11 + 56 * v9 + 4) - *(_DWORD *)(v13 + 48 * v9 + 32) + 1534500 * v17;
        if (v19 < 0) {
          int v20 = -511;
        }
        else {
          int v20 = 511;
        }
        int v21 = (v20 + v19) / 1023;
        *((_WORD *)v39 + v9) = v21;
        *((unsigned char *)v38 + v9) = 1;
        a3 = v13;
        a1 = v11;
        while (*((unsigned __int16 *)v41 + v18) != (unsigned __int16)v21)
        {
          if (++v18 == 32) {
            goto LABEL_16;
          }
        }
        if ((v18 & 0xFFFFFFE0) == 0)
        {
          int v24 = *((__int16 *)v40 + v18);
          if (v24 >= 1)
          {
            __int16 v23 = v24 + 1;
            goto LABEL_24;
          }
        }
LABEL_16:
        uint64_t v18 = 0;
        while (*((_WORD *)v40 + v18))
        {
          if (++v18 == 32) {
            goto LABEL_25;
          }
        }
        if ((v18 & 0xFFFFFFE0) == 0)
        {
          *((_WORD *)v41 + v18) = v21;
          __int16 v23 = 1;
LABEL_24:
          *((_WORD *)v40 + v18) = v23;
        }
      }
    }
LABEL_25:
    ++v9;
  }
  while (v9 != 128);
  uint64_t v25 = 0;
  unsigned int v26 = 0;
  __int16 v27 = 0x8000;
  do
  {
    if (*((__int16 *)v40 + v25) > v27)
    {
      __int16 v27 = *((_WORD *)v40 + v25);
      unsigned int v26 = v25;
    }
    ++v25;
  }
  while (v25 != 32);
  if (v27 >= 1 && v26 < 0x80)
  {
    uint64_t v28 = 0;
    int v29 = *((unsigned __int16 *)v41 + v26);
    uint64_t v30 = (_WORD *)(a2 + 8);
    while (1)
    {
      if (*a5 != -1 || *a6 != -1 || !*((unsigned char *)v38 + v28) || *((unsigned __int16 *)v39 + v28) != v29) {
        goto LABEL_35;
      }
      int v31 = *v30 & 0x300;
      uint64_t v32 = a5;
      if (v31 == 768) {
        goto LABEL_42;
      }
      if (v31 == 512) {
        break;
      }
LABEL_35:
      ++v28;
      v30 += 18;
      if (v28 == 128) {
        goto LABEL_43;
      }
    }
    uint64_t v32 = a6;
LABEL_42:
    _DWORD *v32 = v28;
    goto LABEL_35;
  }
LABEL_43:
  uint64_t result = *a5;
  if (result != -1 || (uint64_t result = GM_Get_Best_SSS(a2, a3, a4, 128), *a5 = result, result != -1))
  {
    if (*(unsigned char *)(a3 + 48 * (int)result + 4)) {
      goto LABEL_46;
    }
  }
  int Best_ASSS = *a6;
  if (*a6 == -1)
  {
    int Best_ASSS = GM_Get_Best_ASSS(a2, a3, a4, 128);
    *a6 = Best_ASSS;
    uint64_t result = *a5;
  }
  if (Best_ASSS < 0 && (result & 0x80000000) == 0)
  {
    *a6 = result;
    int Best_ASSS = result;
    uint64_t result = *a5;
  }
  if (result != -1
    && !*(unsigned char *)(a3 + 48 * (int)result + 4)
    && Best_ASSS != result
    && !*(unsigned char *)(a3 + 48 * Best_ASSS + 4))
  {
LABEL_46:
    *a6 = result;
  }
  return result;
}

uint64_t Init_DB_Time_Sync_NV(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v33 = 0;
  __int16 v32 = 0;
  double v30 = 0.0;
  double v31 = 0.0;
  __int16 v29 = 0;
  int v5 = *a1;
  unsigned int v6 = a1[4];
  uint64_t v7 = *((void *)a1 + 3);
  if (Core_Load_ApxTime(v6, &v32, &v31, &v33))
  {
    int v8 = v33;
    *(_DWORD *)(a2 + 108) = v33;
    int v9 = v32;
    *(_WORD *)(a2 + 112) = -v32;
    double v10 = v31;
    *(double *)(a2 + 120) = v31;
    if (v9 >= 1025 && v8 > *(_DWORD *)a2)
    {
      *(_DWORD *)a2 = v8;
      *(unsigned char *)(a2 + 16) = 1;
      *(double *)(a2 + 40) = v10;
      *(_WORD *)(a2 + 32) = v9;
      EvLog_v("Init_DBts_NV: ApxG %u %d %g %d", v6, (unsigned __int16)v9, v10, v8);
      unsigned int v11 = *(_DWORD *)a2;
      if ((*(_DWORD *)a2 - 4) <= 4)
      {
        double v12 = *(double *)(a2 + 40) * 1000.0;
        double v13 = -0.5;
        if (v12 > 0.0) {
          double v13 = 0.5;
        }
        double v14 = v12 + v13;
        if (v14 <= 2147483650.0)
        {
          if (v14 >= -2147483650.0) {
            int v15 = (int)v14;
          }
          else {
            int v15 = 0x80000000;
          }
        }
        else
        {
          int v15 = 0x7FFFFFFF;
        }
        int v16 = *(_DWORD *)(a2 + 24);
        int v17 = *(_DWORD *)(a2 + 28);
        int v18 = v15 - v16;
        LODWORD(v28) = 0;
        BYTE4(v27) = 0;
        if (Core_Load_TTick_Cal(v16, v17, v15 - v16, (unsigned int *)&v28, (unsigned __int8 *)&v27 + 4))
        {
          int v19 = BYTE4(v27);
          if (BYTE4(v27) >= 0x5Au) {
            unsigned int v20 = 6;
          }
          else {
            unsigned int v20 = 7;
          }
          if (BYTE4(v27) < 0x1Eu) {
            unsigned int v20 = 8;
          }
          if (v20 >= v11)
          {
            int v21 = LODWORD(v28);
            unsigned int v26 = v20;
            Inc_GPS_TOW((double)SLODWORD(v28) * 0.001, (double *)(a2 + 40), (__int16 *)(a2 + 32));
            *(_DWORD *)a2 = v26;
            EvLog_v("Init_DBts_NV: Calib %d %g %d %d", v21, *(double *)(a2 + 40), v18, v19);
          }
        }
      }
      uint64_t v27 = 0;
      double v28 = 0.0;
      API_Get_UTC_Cor(1, &v28);
      GPS_To_Glon_Time(0, *(__int16 *)(a2 + 32), *(double *)(a2 + 40), v28, (int *)&v27, (int *)&v27 + 1, (double *)(a2 + 88));
      __int16 v23 = v27;
      __int16 v22 = WORD2(v27);
      *(_WORD *)(a2 + 84) = WORD2(v27);
      *(_WORD *)(a2 + 82) = v23;
      *(unsigned char *)(a2 + 80) = 1;
      unsigned int v24 = *(_DWORD *)a2;
      *(_DWORD *)(a2 + 76) = *(_DWORD *)a2;
      EvLog_v("Init_DBts_NV: Glon %d %d %g %d", v23, v22, *(double *)(a2 + 88), v24);
      *(_WORD *)(a2 + 112) = -*(_WORD *)(a2 + 112);
    }
  }
  double v28 = 0.0;
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v6;
  *(void *)(a3 + 8) = v7;
  uint64_t result = Core_Get_Ref_Time(v6, &v30, &v29, &v28);
  if (result) {
    return API_Set_Ref_Time(v6, v30, v29, v28);
  }
  return result;
}

void NK_Crude_Apx_Pos(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v85 = v8;
  uint64_t v9 = v1;
  uint64_t v108 = *MEMORY[0x263EF8340];
  double v10 = (unsigned __int8 *)(v6 + 68304);
  uint64_t v11 = mach_continuous_time();
  double v12 = *(double *)&g_MacClockTicksToMsRelation;
  *((_DWORD *)v10 + 5) = 0;
  *((_DWORD *)v10 + 6) = 0;
  *(void *)(v10 + 1) = 0;
  *(void *)(v10 + 9) = 0;
  int v13 = *v10;
  bzero(v106, 0x600uLL);
  memset(v105, 0, 128);
  if (v5[5] <= 2)
  {
    *(unsigned char *)(v7 + 240) = 0;
    return;
  }
  uint64_t v81 = v10;
  uint64_t v77 = v3;
  uint64_t v78 = (unsigned __int8 *)(v5 + 15050);
  unint64_t v79 = (unint64_t)(v12 * (double)v11);
  if (*(unsigned char *)(v7 + 240) && (int)*((double *)v5 + 4) + 604800 * *((__int16 *)v5 + 13) - *(_DWORD *)(v7 + 272) > 60
    || !*(unsigned char *)(v7 + 20104)
    || !*(unsigned char *)(v7 + 20105))
  {
    *(unsigned char *)(v7 + 240) = 0;
  }
  char v82 = v5;
  int v83 = 0;
  unsigned int v84 = 0;
  uint64_t v80 = v7;
  int v14 = 3;
  memset(v107, 0, 128);
  do
  {
    uint64_t v15 = 0;
    int v16 = v14;
    do
    {
      uint64_t v17 = v9 + 4 * v15;
      int v20 = *(_DWORD *)(v17 + 96);
      uint64_t v18 = v17 + 96;
      int v19 = v20;
      if (Is_Legal(v20))
      {
        if (*(int *)(v9 + 4 * v15 + 1248) >= 10 && *(unsigned __int8 *)(v9 + v15 + 864) >= 0x40u)
        {
          unsigned int v21 = *(unsigned char *)(v9 + 2 * v15 + 993) & 3;
          if (v16 == v21)
          {
            long long v103 = 0u;
            memset(v104, 0, 31);
            long long v101 = 0u;
            long long v102 = 0u;
            long long v99 = 0u;
            long long v100 = 0u;
            long long v97 = 0u;
            long long v98 = 0u;
            long long v95 = 0u;
            long long v96 = 0u;
            long long v94 = 0u;
            __int16 v92 = 0;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            long long v87 = 0u;
            memset(v86, 0, sizeof(v86));
            v93[0] = 0;
            *(_DWORD *)((char *)v93 + 3) = 0;
            if (v19 != 7 && (BYTE1(v19) > 0xFu || ((1 << SBYTE1(v19)) & 0xE6CC) == 0))
            {
              unsigned int v22 = GNSS_Id_To_Num_Pos_Idx(v19);
              if (v22 <= 0xC4)
              {
                __int16 v23 = (long long *)(v85 + 192 * v22);
                long long v24 = v23[9];
                long long v102 = v23[8];
                long long v103 = v24;
                long long v25 = v23[11];
                *(_OWORD *)long long v104 = v23[10];
                *(_OWORD *)&v104[16] = v25;
                long long v26 = v23[5];
                long long v98 = v23[4];
                long long v99 = v26;
                long long v27 = v23[7];
                long long v100 = v23[6];
                long long v101 = v27;
                long long v28 = v23[1];
                long long v94 = *v23;
                long long v95 = v28;
                long long v29 = v23[3];
                long long v96 = v23[2];
                long long v97 = v29;
                if ((*(_DWORD *)&v104[16] - 1) <= 1)
                {
                  uint64_t v30 = v9 + 8 * v15;
                  double v31 = *(double *)(v30 + 3424);
                  if (v31 < 329771.704)
                  {
                    switch(*(_DWORD *)v18)
                    {
                      case 2u:
                        unsigned int v32 = 73;
                        break;
                      case 3u:
                        unsigned int v32 = 87;
                        break;
                      case 4u:
                        if (BYTE2(*(_DWORD *)v18) - 59 >= 0xFFFFFFCB) {
                          unsigned int v32 = 81;
                        }
                        else {
                          unsigned int v32 = 119;
                        }
                        break;
                      case 5u:
                      case 7u:
                        unsigned int v32 = 129;
                        break;
                      case 6u:
                        unsigned int v32 = 120;
                        break;
                      default:
                        unsigned int v32 = 77;
                        break;
                    }
                    double v31 = v31 + (double)v32 * 299792.458;
                  }
                  if (Comp_CurrState(0x258u, *((__int16 *)v82 + 13), (uint64_t)&v94, (uint64_t)v86, *((double *)v82 + 4), v31))
                  {
                    unsigned int v33 = *(unsigned __int8 *)(v18 + 1);
                    if (v33 > 0xF || ((1 << v33) & 0xDD77) == 0) {
                      *((double *)&v87 + 1) = *((double *)&v87 + 1) - (*(double *)&v90 - *(double *)&v91);
                    }
                    uint64_t v34 = 0;
                    *((unsigned char *)v107 + v83) = v21;
                    *(_DWORD *)&v104[4 * v83 + 32] = DWORD2(v91);
                    do
                    {
                      uint64_t v35 = (double *)v86 + v34;
                      double v36 = v35[3];
                      if (v36 <= 0.0) {
                        double v37 = -0.5;
                      }
                      else {
                        double v37 = 0.5;
                      }
                      double v38 = v36 + v37;
                      int v39 = (int)v38;
                      if (v38 < -2147483650.0) {
                        int v39 = 0x80000000;
                      }
                      if (v38 > 2147483650.0) {
                        int v39 = 0x7FFFFFFF;
                      }
                      *(_DWORD *)&v106[12 * v83 + 8 + 4 * v34] = v39;
                      double v40 = v35[6] * 5.25503547;
                      if (v40 <= 0.0) {
                        double v41 = -0.5;
                      }
                      else {
                        double v41 = 0.5;
                      }
                      double v42 = v40 + v41;
                      if (v42 <= 2147483650.0)
                      {
                        if (v42 >= -2147483650.0) {
                          int v43 = (int)v42;
                        }
                        else {
                          LOWORD(v43) = 0;
                        }
                      }
                      else
                      {
                        LOWORD(v43) = -1;
                      }
                      *((_WORD *)&v105[8] + 3 * v83 + v34-- + 2) = v43;
                    }
                    while (v34 != -3);
                    *((unsigned char *)v105 + v83) = *(unsigned char *)v18;
                    double v44 = *(double *)(v30 + 3424);
                    if (v21 <= 1)
                    {
                      switch(*(_DWORD *)v18)
                      {
                        case 2u:
                          int v45 = 73;
                          break;
                        case 3u:
                          int v45 = 87;
                          break;
                        case 4u:
                          if (BYTE2(*(_DWORD *)v18) - 59 >= 0xFFFFFFCB) {
                            int v45 = 81;
                          }
                          else {
                            int v45 = 119;
                          }
                          break;
                        case 5u:
                        case 7u:
                          int v45 = 129;
                          break;
                        case 6u:
                          int v45 = 120;
                          break;
                        default:
                          int v45 = 77;
                          break;
                      }
                      double v44 = v44 + (double)(v45 - (int)(v44 * 0.00000333564095)) * 299792.458;
                    }
                    double v46 = *(double *)&v88;
                    double v47 = v44 + *((double *)&v87 + 1) * 299792458.0;
                    if (v47 <= 0.0) {
                      double v48 = -0.5;
                    }
                    else {
                      double v48 = 0.5;
                    }
                    double v49 = v47 + v48;
                    int v50 = (int)v49;
                    if (v49 < -2147483650.0) {
                      int v50 = 0x80000000;
                    }
                    if (v49 > 2147483650.0) {
                      int v50 = 0x7FFFFFFF;
                    }
                    *((_DWORD *)&v107[24] + v83) = v50;
                    double v51 = (v46 * 299792458.0 - *(double *)(v9 + 8 * v15 + 4448)) * 5.25503547;
                    if (v51 <= 0.0) {
                      double v52 = -0.5;
                    }
                    else {
                      double v52 = 0.5;
                    }
                    double v53 = v51 + v52;
                    if (v53 <= 2147483650.0)
                    {
                      if (v53 >= -2147483650.0) {
                        int v54 = (int)v53;
                      }
                      else {
                        LOWORD(v54) = 0;
                      }
                    }
                    else
                    {
                      LOWORD(v54) = -1;
                    }
                    ++v84;
                    *((_WORD *)&v107[8] + v83++) = v54;
                  }
                }
              }
            }
          }
        }
      }
      ++v15;
    }
    while (v15 != 128);
    int v14 = v16 - 1;
  }
  while (v16);
  v10[1] = v84;
  __int16 v55 = v107[0];
  *((_DWORD *)v10 + 1) = v107[0];
  if ((int)v84 < 3 || v84 == 3 && (v55 & 0xFE00) == 0)
  {
    *(unsigned char *)(v7 + 240) = 0;
    return;
  }
  unsigned __int16 v56 = (long long *)(v7 + 248);
  BOOL v57 = NK_Crude_Apx_Pos_Core((uint64_t)v106);
  BOOL v58 = v57;
  int32x2_t v59 = vmovn_s64(vcvtq_n_s64_f64(*(float64x2_t *)(v7 + 248), 0xFuLL));
  *((int32x2_t *)v10 + 1) = v59;
  unsigned char v10[16] = v57;
  *(int32x2_t *)(v10 + 20) = v59;
  *(_DWORD *)(v7 + 272) = (int)*((double *)v82 + 4) + 604800 * *((__int16 *)v82 + 13);
  if (*v78) {
    BOOL v60 = (*((_DWORD *)v78 + 2) - 3) < 2;
  }
  else {
    BOOL v60 = 0;
  }
  char v61 = v84 < 5 || v57;
  if ((v61 & 1) == 0) {
    ++*(_DWORD *)(v7 + 276);
  }
  BOOL v62 = !v57 && !v60 && *(_DWORD *)(v7 + 276) > 9u;
  if (!v13 && (v57 || v62))
  {
    double v63 = *((double *)v82 + 215);
    *(double *)(v80 + 264) = v63;
    *(void *)&long long v94 = 0;
    if (R8_EQ((const double *)(v80 + 264), (const double *)&v94) || v63 < -500.0 || v63 > 6000.0) {
      *(void *)(v80 + 264) = qword_263D83470[*(_DWORD *)(v80 + 20) < 5u];
    }
    *((unsigned char *)v82 + 1864) = v58;
    *(unsigned char *)(v80 + 240) = v58;
    if (Horiz_Diff_Sqd((double *)v82 + 213, (const double *)v56) <= 5625000000.0)
    {
      int v65 = *v78;
    }
    else
    {
      if (v58)
      {
        long long v64 = *v56;
        *((void *)v82 + 215) = *((void *)v56 + 2);
        *(_OWORD *)(v82 + 426) = v64;
        Geo2ECEF((uint64_t)(v82 + 426), (uint64_t)&WGS84_Datum, (double *)v82 + 195);
        *(_WORD *)(v80 + 244) = 5;
      }
      int v65 = *v78;
      if (*v78) {
        char v66 = v60;
      }
      else {
        char v66 = 1;
      }
      if ((v66 & 1) == 0)
      {
        uint64_t v67 = 0;
        *((_WORD *)v82 + 840) = 0;
        *((unsigned char *)v82 + 1682) = 0;
        *((void *)v82 + 208) = 0;
        *(_OWORD *)(v82 + 454) = 0u;
        *(_OWORD *)(v82 + 458) = 0u;
        *(_OWORD *)(v82 + 462) = 0u;
        *((_OWORD *)v82 + 99) = 0u;
        *((_OWORD *)v82 + 100) = 0u;
        *((_OWORD *)v82 + 101) = 0u;
        *((_OWORD *)v82 + 102) = 0u;
        *((void *)v82 + 206) = 0;
        *(unsigned char *)(v80 + 136) = 1;
        uint64_t v68 = v9 + 992;
        *(_DWORD *)(v80 + 140) = 35;
        do
        {
          uint64_t v69 = v68 + 4 * v67;
          if (*(int *)(v69 + 256) >= 11 && (~*(unsigned __int16 *)(v68 + 2 * v67) & 0x300) != 0) {
            *(_DWORD *)(v69 + 256) = 10;
          }
          ++v67;
        }
        while (v67 != 128);
      }
    }
    if (v65) {
      char v70 = v60;
    }
    else {
      char v70 = 1;
    }
    if (v70) {
      goto LABEL_131;
    }
    if (*((double *)v78 + 6) >= 900000000.0)
    {
      if (v84 < 5) {
        goto LABEL_131;
      }
    }
    else
    {
      double v71 = Horiz_Diff_Sqd((double *)v82 + 7528, (const double *)v56);
      BOOL v72 = v71 >= 5625000000.0 && v58;
      if (v71 < 5625000000.0 || v84 < 5)
      {
        BOOL v58 = v72;
        goto LABEL_131;
      }
    }
    *uint64_t v78 = 0;
    *(unsigned char *)(p_NA + 8) = 0;
    *((_DWORD *)v78 + 522) = 22;
    EvLog_v("NK_Crude_Apx_Pos: CAP Discrepancy, Clearing Not Trusted Ext Ref Pos", v77);
LABEL_131:
    if (!v60 && v62)
    {
      *uint64_t v78 = 0;
      *(unsigned char *)(p_NA + 8) = 0;
      *((_DWORD *)v78 + 522) = 23;
      *(void *)(v77 + 17472) = 0x7F7F7F7F7F7F7F7FLL;
      *(void *)&long long v74 = 0x7F7F7F7F7F7F7F7FLL;
      *((void *)&v74 + 1) = 0x7F7F7F7F7F7F7F7FLL;
      *(_OWORD *)(v77 + 17456) = v74;
      *(_OWORD *)(v77 + 17440) = v74;
      *(_OWORD *)(v77 + 17424) = v74;
      *(_OWORD *)(v77 + 17480) = 0u;
      *(_OWORD *)(v77 + 17496) = 0u;
      *(_OWORD *)(v77 + 17512) = 0u;
      *(void *)(v77 + 17528) = 0;
      EvLog_v("NK_Crude_Apx_Pos: CAP Repeated Fail, Clearing Not Trusted Ext Ref Pos & GLO Slot Number mapping");
    }
  }
  if (!v13)
  {
    if (*(unsigned char *)(v80 + 240))
    {
      if (v58)
      {
        *uint64_t v78 = 1;
        int v75 = *v82;
        *((_DWORD *)v78 + 5) = *v82;
        *(void *)(v78 + 4) = 0x300000002;
        *((void *)v78 + 3) = *(void *)(v80 + 248);
        *((void *)v78 + 4) = *(void *)(v80 + 256);
        *((int64x2_t *)v78 + 3) = vdupq_n_s64(0x41C9105220000000uLL);
        *((void *)v78 + 8) = 0;
        *((void *)v78 + 13) = 0x4039000000000000;
        *((_DWORD *)v78 + 3) = 2;
        double v76 = dbl_263D822E0[*(_DWORD *)(v80 + 20) < 5u];
        if (!v78[128] || v76 < *((double *)v78 + 20))
        {
          v78[128] = 1;
          *((_DWORD *)v78 + 37) = v75;
          *(void *)(v78 + 132) = 0x300000002;
          *((void *)v78 + 19) = *(void *)(v80 + 264);
          *((double *)v78 + 20) = v76;
          *((void *)v78 + 23) = 0x4039000000000000;
          *((_DWORD *)v78 + 35) = 2;
        }
      }
    }
  }
  *((_WORD *)v81 + 1) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
                      - v79;
}

BOOL GSpeed_Meas_Update(int a1, double *a2, unsigned int a3, unsigned __int8 *a4, BOOL a5, _WORD *a6, double a7, double a8, double a9, double a10)
{
  _OWORD v29[3] = *(double *)MEMORY[0x263EF8340];
  if ((*((_DWORD *)a4 + 1) - 1) > 1) {
    return 0;
  }
  a4[12] = 0;
  int v11 = *a4;
  if (*a4)
  {
    double v24 = 0.0;
    double v19 = a7 - *((double *)a4 + 3) * a9;
    *((double *)a4 + 5) = a7;
    *((double *)a4 + 6) = v19;
    __double2 v20 = __sincos_stret(a8 * 0.0174532925);
    Comp_GSpeed_Partial(v20.__cosval * a7, v20.__sinval * a7, a2, v29);
    uint64_t v26 = 0;
    uint64_t v21 = 2;
    memset(v25, 0, sizeof(v25));
    do
    {
      *((double *)v25 + (a1 + v21)) = v29[v21];
      --v21;
    }
    while (v21 != -1);
    *((double *)v25 + a3) = v19;
    umeas(a5, a3, a10 * a10 * *((double *)a4 + 4), (double *)v25, v28, v27, &v24, *((double *)a4 + 7));
    double v22 = v24;
    if (v24 <= 0.0)
    {
      int v11 = 0;
      *a4 = 0;
      a4[12] = 1;
      ++*a6;
      *((double *)a4 + 8) = v22 + *((double *)a4 + 8);
    }
    else
    {
      *((double *)a4 + 8) = *((double *)a4 + 4) * (v24 * (v28[a3] * v28[a3]));
      int v11 = *a4;
    }
  }
  return v11 != 0;
}

void GncS03_07PosEventUpdate(long long *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("GncS03_07PosEventUpdate", 48, 1, 0x30uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    long long v4 = *a1;
    long long v5 = a1[1];
    *(_OWORD *)((char *)v2 + 31) = *(long long *)((char *)a1 + 31);
    _OWORD *v2 = v4;
    v2[1] = v5;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT =>GNCP Client,%hhu,ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncS03_07PosEventUpdate", *((unsigned __int8 *)v3 + 12), *((unsigned __int16 *)v3 + 7));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(130, 132, 8522243, v3);
  }
}

void GncS03_08SessRespSentInd(int a1, int a2, __int16 a3, char a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v8 = gnssOsa_Calloc("GncS03_08SessRespSentInd", 70, 1, 0x18uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    v8[12] = a4;
    *((_WORD *)v8 + 7) = a3;
    *((_DWORD *)v8 + 4) = a1;
    *((_DWORD *)v8 + 5) = a2;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_SESSION_RESP_SENT_IND =>GNCP ID,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncS03_08SessRespSentInd", *((unsigned __int16 *)v9 + 7), v9[12]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(130, 132, 8522499, v9);
  }
}

double GM_Apply_LT_Slew(double *a1, __int16 *a2, double *a3, _WORD *a4)
{
  double v6 = *a1 * 1000.0;
  double v7 = -0.5;
  if (v6 > 0.0) {
    double v7 = 0.5;
  }
  double v8 = v6 + v7;
  if (v8 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0) {
      int v9 = (int)v8;
    }
    else {
      int v9 = 0x80000000;
    }
  }
  else
  {
    int v9 = 0x7FFFFFFF;
  }
  Inc_Local_Time(-v9, 604800, a3, a2);
  double result = *a1 + (double)v9 * -0.001;
  *a1 = result;
  a4[1] = v9;
  *a4 = 256;
  a4[2] = v9;
  return result;
}

void NK_Transform_State(uint64_t a1)
{
  ECEF2Geo((double *)(a1 + 48), (uint64_t)&WGS84_Datum, a1 + 192);
  double v2 = STANAG_WGS84_Mean_Sea_Level((double *)(a1 + 192));
  __double2 v3 = __sincos_stret(*(double *)(a1 + 192));
  __double2 v4 = __sincos_stret(*(double *)(a1 + 200));
  uint64_t v5 = 0;
  *(double *)(a1 + 224) = -(v3.__sinval * v4.__cosval);
  *(double *)(a1 + 216) = v2;
  *(double *)(a1 + 232) = -(v3.__sinval * v4.__sinval);
  *(double *)(a1 + 240) = v3.__cosval;
  *(double *)(a1 + 248) = -v4.__sinval;
  *(double *)(a1 + 256) = v4.__cosval;
  *(void *)(a1 + 264) = 0;
  *(double *)(a1 + 272) = -(v3.__cosval * v4.__cosval);
  *(double *)(a1 + 280) = -(v3.__cosval * v4.__sinval);
  *(double *)(a1 + 288) = -v3.__sinval;
  *(double *)(a1 + 296) = v3.__cosval;
  double v6 = (double *)(a1 + 304);
  double v7 = *(double *)(a1 + 72);
  double v8 = *(double *)(a1 + 80);
  double v9 = *(double *)(a1 + 88);
  do
  {
    *v6++ = *(double *)(a1 + 224 + v5 + 8) * v8 + *(double *)(a1 + 224 + v5) * v7 + *(double *)(a1 + 224 + v5 + 16) * v9;
    v5 += 24;
  }
  while (v5 != 72);
  double v10 = *(double *)(a1 + 304) * *(double *)(a1 + 304) + *(double *)(a1 + 312) * *(double *)(a1 + 312);
  *(double *)(a1 + 328) = sqrt(v10 + *(double *)(a1 + 320) * *(double *)(a1 + 320));
  *(double *)(a1 + 336) = sqrt(v10);
}

double GAL_AlmInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  unint64_t v2 = 0x3F60000000000000;
  LOWORD(v2) = *(_WORD *)(a1 + 16);
  double v3 = (double)*(__int16 *)(a1 + 24);
  *(double *)(a2 + 16) = (double)*(__int16 *)(a1 + 14) * 0.001953125;
  *(double *)(a2 + 24) = (double)v2 * 0.0000152587891;
  double v4 = (double)*(__int16 *)(a1 + 26) * 0.0000958737992;
  double v5 = (double)*(__int16 *)(a1 + 20) * 0.0000958737992;
  *(double *)(a2 + 48) = (double)*(__int16 *)(a1 + 22) * 3.6572952e-10;
  *(double *)(a2 + 56) = v3 * 0.0000958737992;
  double v6 = (double)*(__int16 *)(a1 + 18) * 0.000191747598;
  *(_DWORD *)(a2 + 12) = 600 * *(unsigned __int16 *)(a1 + 12);
  *(double *)(a2 + 32) = v6;
  *(double *)(a2 + 40) = v5;
  double v7 = (double)*(__int16 *)(a1 + 28) * 0.00000190734863;
  double v8 = (double)*(__int16 *)(a1 + 30);
  *(double *)(a2 + 64) = v4;
  *(double *)(a2 + 72) = v7;
  double result = v8 * 3.63797881e-12;
  *(double *)(a2 + 80) = v8 * 3.63797881e-12;
  *(unsigned char *)(a2 + 89) = *(unsigned char *)(a1 + 33);
  *(unsigned char *)(a2 + 90) = *(unsigned char *)(a1 + 34);
  return result;
}

uint64_t GN_ExtA_Set_Device_Motion_State(unsigned int *a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Device_Motion_State"))
  {
    if ((int)a1[1] < 4)
    {
      if ((int)a1[2] < 4)
      {
        uint64_t v4 = p_NA;
        uint64_t v2 = 1;
        *(unsigned char *)(p_NA + 378) = 1;
        unsigned int v5 = a1[2];
        *(void *)(v4 + 26744) = *(void *)a1;
        *(_DWORD *)(v4 + 26752) = v5;
        Debug_Log_ExtA_DMS(a1);
        return v2;
      }
      EvCrt_v("GN_ExtA_Set_Device_Motion_State: FAILED: Mov_Reliab = %d > GN_EXTA_MAR_HIGH, Out of range!");
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_Device_Motion_State: FAILED: Mov_State = %d > GN_EXTA_DMS_MOVING, Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_User_Activity_Context(unsigned int *a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_User_Activity_Context"))
  {
    if ((int)a1[1] < 12)
    {
      if ((int)a1[2] < 4)
      {
        uint64_t v4 = p_NA;
        uint64_t v2 = 1;
        *(unsigned char *)(p_NA + 379) = 1;
        v4 += 26756;
        unsigned int v5 = a1[2];
        *(void *)uint64_t v4 = *(void *)a1;
        *(_DWORD *)(v4 + 8) = v5;
        Debug_Log_ExtA_UAC(a1);
        return v2;
      }
      EvCrt_v("GN_ExtA_Set_User_Activity_Context: FAILED: Act_Reliab = %d > GN_EXTA_MAR_HIGH, Out of range!");
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_User_Activity_Context: FAILED: Act_Context = %d > GN_EXTA_UAC_SKY_DIVING, Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Fixed_In_Vehicle(unsigned int *a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Fixed_In_Vehicle"))
  {
    if ((int)a1[1] < 4)
    {
      if ((int)a1[2] < 4)
      {
        uint64_t v4 = p_NA;
        uint64_t v2 = 1;
        *(unsigned char *)(p_NA + 380) = 1;
        unsigned int v5 = a1[2];
        *(void *)(v4 + 26768) = *(void *)a1;
        *(_DWORD *)(v4 + 26776) = v5;
        Debug_Log_ExtA_FIV(a1);
        return v2;
      }
      EvCrt_v("GN_ExtA_Set_Fixed_In_Vehicle: FAILED: FIV_Reliab = %d > GN_EXTA_MAR_HIGH, Out of range!");
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_Fixed_In_Vehicle: FAILED: FIV_Ind = %d > GN_EXTA_FIV_KNOWN_FIXED, Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Sig_Env_Sev(signed int a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Sig_Env_Sev"))
  {
    if (a1 < 8)
    {
      uint64_t v3 = p_NA;
      uint64_t v2 = 1;
      *(unsigned char *)(p_NA + 381) = 1;
      *(_DWORD *)(v3 + 26780) = a1;
      Debug_Log_ExtA_SES(a1);
      return v2;
    }
    EvCrt_v("GN_ExtA_Set_Sig_Env_Sev:    FAILED:  SES_Ind = %d  > GN_EXTA_SES_D_URBAN_CAN, Out of range !", a1);
  }
  return 0;
}

uint64_t GN_ExtA_Set_Altitude(uint64_t a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Altitude"))
  {
    double v2 = *(double *)(a1 + 8);
    if (v2 < -500.0 || v2 > 9000.0)
    {
      EvCrt_v("GN_ExtA_Set_Altitude: FAILED: Altitude = %g <%d or >%d, Out of range!");
    }
    else
    {
      double v3 = *(double *)(a1 + 16);
      if (v3 <= 0.01 || v3 > 650.0)
      {
        EvCrt_v("GN_ExtA_Set_Altitude: FAILED: Sigma_Altitude = %g <=0.01m or >650m, Out of range!");
      }
      else
      {
        if (*(int *)(a1 + 24) < 4)
        {
          uint64_t v6 = p_NA;
          uint64_t v4 = 1;
          *(unsigned char *)(p_NA + 382) = 1;
          long long v7 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)(v6 + 26784) = *(_OWORD *)a1;
          *(_OWORD *)(v6 + 26800) = v7;
          Debug_Log_ExtA_Alt(a1);
          return v4;
        }
        EvCrt_v("GN_ExtA_Set_Altitude: FAILED: Trust = %d > GN_EXTA_TRUST_HIGH, Out of range!");
      }
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Map_Vector_Seg(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Map_Vector_Seg")) {
    return 0;
  }
  double v2 = *(double *)(a1 + 8);
  if (v2 < -90.0 || v2 > 90.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  double v3 = *(double *)(a1 + 16);
  if (v3 < -180.0 || v3 > 360.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v4 = *(double *)(a1 + 24);
    if (v4 < -500.0 || v4 > 6000.0)
    {
      EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Height = %g <%d or >%d, Out of range!");
      return 0;
    }
  }
  double v5 = *(double *)(a1 + 40);
  if (v5 < -180.0 || v5 > 360.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Directiouint64_t n = %d <-180 or >+360, Out of range!");
    return 0;
  }
  double v6 = *(double *)(a1 + 48);
  if (v6 <= 0.0 || v6 > 9999.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: unint64_t Length = %g < 0 or > 9999, Out of range!");
    return 0;
  }
  double v7 = *(double *)(a1 + 56);
  if (v7 <= 0.0 || v7 > 999.0)
  {
    EvCrt_v("GN_ExtA_Set_Map_Vector_Seg: FAILED: Width = %g < 0 or > 999, Out of range!");
    return 0;
  }
  uint64_t v8 = p_NA;
  uint64_t v9 = 1;
  *(unsigned char *)(p_NA + 383) = 1;
  *(_OWORD *)(v8 + 26816) = *(_OWORD *)a1;
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(v8 + 26832) = *(_OWORD *)(a1 + 16);
  *(void *)(v8 + 26880) = v12;
  *(_OWORD *)(v8 + 26864) = v10;
  *(_OWORD *)(v8 + 26848) = v11;
  Debug_Log_ExtA_MapV(a1);
  return v9;
}

uint64_t GN_ExtA_Set_Speed_Constraint(uint64_t a1)
{
  if (Is_GN_API_Set_Allowed("GN_ExtA_Set_Speed_Constraint"))
  {
    if (*(int *)(a1 + 4) < 86400001)
    {
      double v2 = *(double *)(a1 + 8);
      if (v2 >= 0.0)
      {
        double v3 = *(double *)(a1 + 16);
        if (v3 >= 0.0 && v3 <= 100.0)
        {
          if (v3 >= v2)
          {
            uint64_t v7 = p_NA;
            uint64_t v5 = 1;
            *(unsigned char *)(p_NA + 384) = 1;
            uint64_t v8 = *(void *)(a1 + 16);
            *(_OWORD *)(v7 + 26888) = *(_OWORD *)a1;
            *(void *)(v7 + 26904) = v8;
            Debug_Log_ExtA_SpdC(a1);
            return v5;
          }
          EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Speed_Lower = %g Speed_Upper = %g , Mis-match!");
        }
        else
        {
          EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Speed_Upper = %g < 0 or > 100 m/s , Out of range!");
        }
      }
      else
      {
        EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Speed_Lower = %g < 0, Out of range!");
      }
    }
    else
    {
      EvCrt_v("GN_ExtA_Set_Speed_Constraint: FAILED: Duratiouint64_t n = %d , Out of range!");
    }
  }
  return 0;
}

uint64_t GN_ExtA_Set_Along_Track_Vel(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Along_Track_Vel")) {
    return 0;
  }
  if (fabs(*(double *)(a1 + 8)) > 100.0)
  {
    EvCrt_v("GN_ExtA_Set_Along_Track_Vel: FAILED: Velocity = %g > +/-100.0 m/s, Out of range!");
    return 0;
  }
  if (*(double *)(a1 + 16) <= 0.0)
  {
    EvCrt_v("GN_ExtA_Set_Along_Track_Vel: FAILED: RMS_Vel = %g <=0, Out of range!");
    return 0;
  }
  uint64_t v2 = p_NA;
  uint64_t v3 = 1;
  *(unsigned char *)(p_NA + 385) = 1;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(v2 + 26912) = *(_OWORD *)a1;
  *(void *)(v2 + 26928) = v4;
  Debug_Log_ExtA_AT_Vel(a1);
  return v3;
}

uint64_t GN_ExtA_Set_Vertical_Vel(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Vertical_Vel")) {
    return 0;
  }
  if (fabs(*(double *)(a1 + 8)) > 100.0)
  {
    EvCrt_v("GN_ExtA_Set_Vertical_Vel: FAILED: Velocity = %g > +/-100 m/s, Out of range!");
    return 0;
  }
  if (*(double *)(a1 + 16) <= 0.0)
  {
    EvCrt_v("GN_ExtA_Set_Vertical_Vel: FAILED: RMS_Vel = %g <=0, Out of range!");
    return 0;
  }
  uint64_t v2 = p_NA;
  uint64_t v3 = 1;
  *(unsigned char *)(p_NA + 386) = 1;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(v2 + 26936) = *(_OWORD *)a1;
  *(void *)(v2 + 26952) = v4;
  Debug_Log_ExtA_V_Vel(a1);
  return v3;
}

uint64_t GN_ExtA_Set_User_Heading(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_User_Heading")) {
    return 0;
  }
  if (fabs(*(double *)(a1 + 8)) > 360.0)
  {
    EvCrt_v("GN_ExtA_Set_User_Heading: FAILED: Heading = %g > +/-360.0, Out of range!");
    return 0;
  }
  if (*(double *)(a1 + 16) <= 0.0)
  {
    EvCrt_v("GN_ExtA_Set_User_Heading: FAILED: RMS_Heading = %g <=0, Out of range!");
    return 0;
  }
  uint64_t v2 = p_NA;
  uint64_t v3 = 1;
  *(unsigned char *)(p_NA + 387) = 1;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(v2 + 26960) = *(_OWORD *)a1;
  *(void *)(v2 + 26976) = v4;
  Debug_Log_ExtA_Heading(a1);
  return v3;
}

uint64_t GN_ExtA_Set_Tunnel_End_Point(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ExtA_Set_Tunnel_End_Point")) {
    return 0;
  }
  double v2 = *(double *)(a1 + 8);
  if (v2 < -90.0 || v2 > 90.0)
  {
    EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
  }
  else
  {
    double v3 = *(double *)(a1 + 16);
    if (v3 < -180.0 || v3 > 360.0)
    {
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
    }
    else if (*(double *)(a1 + 24) <= 0.0)
    {
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: SMaj_Sig = %g <=0.0, Out of range!");
    }
    else if (*(double *)(a1 + 32) <= 0.0)
    {
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: SMin_Sig = %g <=0.0, Out of range!");
    }
    else
    {
      if (*(__int16 *)(a1 + 40) < 0xB4)
      {
        if (*(unsigned char *)(a1 + 42))
        {
          double v6 = *(double *)(a1 + 48);
          if (v6 < -500.0 || v6 > 6000.0)
          {
            EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Height = %g <%d or >%d, Out of range!");
            return 0;
          }
          if (*(double *)(a1 + 56) <= 0.0)
          {
            EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: Height_Sig = %g <=0.0, Out of range!");
            return 0;
          }
        }
        uint64_t v7 = (_OWORD *)p_NA;
        uint64_t v4 = 1;
        *(unsigned char *)(p_NA + 388) = 1;
        uint64_t v7 = (_OWORD *)((char *)v7 + 26984);
        long long v8 = *(_OWORD *)(a1 + 48);
        long long v10 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        v7[2] = *(_OWORD *)(a1 + 32);
        v7[3] = v8;
        *uint64_t v7 = v10;
        v7[1] = v9;
        Debug_Log_ExtA_Tunnel_End_Point(a1);
        return v4;
      }
      EvCrt_v("GN_ExtA_Set_Tunnel_End_Point: FAILED: SMaj_Brg = %d <0 or >=180, Out of range!");
    }
  }
  return 0;
}

double Comp_SVrange_Sag_Corr(float64x2_t *a1, double *a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  float64x2_t v4 = vsubq_f64(*a4, *a3);
  float64x2_t v17 = v4;
  double v5 = a4[1].f64[0] - a3[1].f64[0];
  double v18 = v5;
  double v6 = 0.0;
  uint64_t v7 = 2;
  do
  {
    double v6 = v6 + v17.f64[v7] * v17.f64[v7];
    unint64_t v8 = v7-- + 1;
  }
  while (v8 > 1);
  uint64_t v9 = 0;
  double v10 = sqrt(v6);
  *a1 = vdivq_f64(v4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0));
  a1[1].f64[0] = v5 / v10;
  int8x16_t v11 = (int8x16_t)vmulq_f64(*a4, (float64x2_t)xmmword_263D834A0);
  int8x16_t v15 = vextq_s8(v11, v11, 8uLL);
  uint64_t v16 = 0;
  double v12 = 0.0;
  do
  {
    double v12 = v12 + *(double *)&v15.i64[v9] * v17.f64[v9];
    ++v9;
  }
  while (v9 != 3);
  double v13 = v12 * 0.00000000333564095;
  *a2 = v13;
  return v10 - v13;
}

uint64_t Comp_CurrState(unsigned int a1, int a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  int v6 = *(_DWORD *)(a3 + 176);
  if (v6)
  {
    *(unsigned char *)(a4 + 136) = *(unsigned char *)(a3 + 188);
    *(_DWORD *)(a4 + 132) = *(_DWORD *)(a3 + 184);
    *(_DWORD *)(a4 + 120) = v6;
    *(_WORD *)(a4 + 128) = *(_WORD *)(a3 + 166);
    *(_WORD *)(a4 + 137) = *(_WORD *)(a3 + 189);
    double v7 = a5 - (double)(*(_DWORD *)(a3 + 160) + 604800 * (*(__int16 *)(a3 + 164) - a2));
    if (a6 > 0.1 || a6 < -0.1) {
      double v7 = v7 + a6 / -299792458.0 - *(double *)(a3 + 96);
    }
    *(double *)a4 = v7;
    double v8 = fabs(v7);
    if (v8 >= (double)a1)
    {
      return 0;
    }
    else
    {
      uint64_t v9 = 0;
      double v10 = v7 * v7;
      double v11 = v7 * v7 * 0.5;
      do
      {
        double v12 = (double *)(a4 + 32 + v9);
        *(v12 - 3) = *(double *)(a3 + v9)
                   + *(double *)(a3 + 72 + v9 - 48) * v7
                   + *(double *)(a3 + 72 + v9 - 24) * v11
                   + *(double *)(a3 + 72 + v9) * (v7 * v11 * 0.333333333);
        *double v12 = *(double *)(a3 + 72 + v9 - 48) + *(double *)(a3 + 72 + v9 - 24) * v7 + *(double *)(a3 + 72 + v9) * v11;
        v9 += 8;
      }
      while (v9 != 24);
      double v14 = *(double *)(a3 + 96);
      double v13 = *(double *)(a3 + 104);
      *(double *)(a4 + 64) = v13;
      double v15 = v14 + v7 * v13;
      *(_OWORD *)(a4 + 80) = *(_OWORD *)(a3 + 120);
      *(_OWORD *)(a4 + 96) = *(_OWORD *)(a3 + 136);
      double v16 = *(double *)(a3 + 152);
      *(double *)(a4 + 112) = v16;
      *(double *)(a4 + 56) = v15 - v16;
      if (v8 <= 30.0) {
        double v17 = *(double *)(a3 + 112);
      }
      else {
        double v17 = *(double *)(a3 + 112) + v10 * (v10 * 8.0e-10 + 0.00003) * (v10 * (v10 * 8.0e-10 + 0.00003));
      }
      *(double *)(a4 + 72) = v17;
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    *(_OWORD *)(a4 + 123) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

BOOL NK_Predict_State(double *a1, double *a2)
{
  uint64_t v4 = 0;
  v14[1] = *(double *)MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a2;
  int v7 = *(_DWORD *)a1 - *(_DWORD *)a2;
  if (v7 <= 1) {
    int v7 = 1;
  }
  double v8 = (double)v7 * 0.001;
  a2[5] = v8;
  *((_DWORD *)a2 + 8) = v6;
  *(_DWORD *)a2 = v5;
  a2[2] = a1[4];
  *((_DWORD *)a2 + 6) = *((_DWORD *)a1 + 5);
  *((_WORD *)a2 + 15) = *((_WORD *)a1 + 13);
  *((unsigned char *)a2 + 28) = *((unsigned char *)a1 + 25);
  *((_DWORD *)a2 + 43) = *((_DWORD *)a1 + 47);
  *((unsigned char *)a2 + 176) = *((unsigned char *)a1 + 192);
  *((_WORD *)a2 + 89) = *((_WORD *)a1 + 97);
  *((_WORD *)a2 + 90) = *((_WORD *)a1 + 98);
  a2[23] = a1[25];
  do
  {
    a2[v4 + 6] = a2[v4 + 6] + a2[v4 + 9] * v8;
    ++v4;
  }
  while (v4 != 3);
  uint64_t v9 = a2 + 15;
  v14[0] = 0.0;
  if (!R8_EQ(a2 + 15, v14)) {
    a2[15] = a2[15] + a2[19] * v8;
  }
  double v10 = a2 + 16;
  v14[0] = 0.0;
  if (!R8_EQ(a2 + 16, v14)) {
    a2[16] = a2[16] + a2[19] * v8;
  }
  double v11 = a2 + 17;
  v14[0] = 0.0;
  BOOL result = R8_EQ(a2 + 17, v14);
  if (!result) {
    a2[17] = a2[17] + a2[19] * v8;
  }
  int v13 = *((_DWORD *)a1 + 13);
  if (v13)
  {
    v14[0] = 0.0;
    if (!R8_EQ(a2 + 15, v14)) {
      *uint64_t v9 = *v9 + (double)v13 * -0.001;
    }
    v14[0] = 0.0;
    if (!R8_EQ(v10, v14)) {
      *double v10 = *v10 + (double)v13 * -0.001;
    }
    v14[0] = 0.0;
    BOOL result = R8_EQ(v11, v14);
    if (!result) {
      *double v11 = *v11 + (double)v13 * -0.001;
    }
  }
  return result;
}

void NK_Set_Constell_Clock_Bias(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v14 = 0;
  uint64_t v55 = *MEMORY[0x263EF8340];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  *(_OWORD *)int v54 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  double v15 = (double *)(a2 + 12056);
  uint64_t v16 = a2;
  double v45 = 0.0;
  double v46 = 0.0;
  do
  {
    if (*(unsigned char *)(v16 + 7064) && *(unsigned char *)(v16 + 57))
    {
      uint64_t v17 = a1[v14];
      double v18 = 1.0 / v15[672];
      *((double *)&v51 + v17) = *((double *)&v51 + v17) + *v15 * v18;
      *((double *)&v47 + v17) = v18 + *((double *)&v47 + v17);
    }
    v14 += 4;
    ++v15;
    ++v16;
  }
  while (v14 != 512);
  double v19 = *((double *)&v51 + 1) + *((double *)&v52 + 1) + *((double *)&v53 + 1) + v54[0];
  double v20 = *((double *)&v47 + 1) + *((double *)&v48 + 1) + *((double *)&v49 + 1) + *(double *)&v50;
  if (v20 > 0.0) {
    double v19 = fabs(v19) / v20;
  }
  double v21 = *(double *)&v48;
  if (*(double *)&v48 > 0.0) {
    *(double *)&long long v52 = fabs(*(double *)&v52) / *(double *)&v48;
  }
  double v22 = *(double *)&v49;
  if (*(double *)&v49 > 0.0) {
    *(double *)&long long v53 = fabs(*(double *)&v53) / *(double *)&v49;
  }
  if (*(unsigned char *)(a2 + 1680) && v19 > 0.0)
  {
    char v23 = 0;
    double v24 = (double *)(a2 + 1632);
    int v25 = *(unsigned __int8 *)(a2 + 1681);
    int v26 = 1;
  }
  else
  {
    int v25 = *(unsigned __int8 *)(a2 + 1681);
    if (*(unsigned char *)(a2 + 1681) && *(double *)&v52 > 0.0)
    {
      double v27 = *(double *)(a2 + 1640) * 299792458.0;
      int v25 = 1;
      int v26 = 2;
      char v23 = 1;
      goto LABEL_23;
    }
    if (!*(unsigned char *)(a2 + 1682) || *(double *)&v53 <= 0.0) {
      return;
    }
    double v24 = (double *)(a2 + 1648);
    int v26 = 4;
    char v23 = 2;
  }
  double v27 = *v24 * 299792458.0;
  if (v25)
  {
    double v28 = 0.0;
    int v25 = 1;
LABEL_28:
    double v29 = 0.0;
    goto LABEL_29;
  }
LABEL_23:
  if (!*(unsigned char *)(a3 + 17192))
  {
    double v28 = 0.0;
    goto LABEL_28;
  }
  double v29 = (double)*(int *)(a3 + 17132) * 9.31322575e-10 * 299792458.0;
  if (v26 == 2) {
    double v28 = (double)*(int *)(a3 + 17132) * 9.31322575e-10 * 299792458.0;
  }
  else {
    double v28 = 0.0;
  }
LABEL_29:
  if (v26 == 4 || (double v30 = 0.0, !*(unsigned char *)(a2 + 1682)))
  {
    double v30 = 0.0;
    if (*(int *)(a3 + 47436) >= 1)
    {
      int v31 = *(_DWORD *)(a3 + 47452);
      if (v31)
      {
        double v30 = ((double)v31 * 2.91038305e-11 + (double)*(__int16 *)(a3 + 47460) * 2.91038305e-11) * 299792458.0;
        if (*(int *)(a2 + 20) >= 1)
        {
          if (*(unsigned char *)(a2 + 25))
          {
            LODWORD(a10) = *(_DWORD *)(a3 + 47448);
            double v32 = *(double *)(a2 + 32)
                - (double)*(unint64_t *)&a10
                + (double)(604800 * (*(__int16 *)(a2 + 26) - *(unsigned __int16 *)(a3 + 47444)));
            unsigned int v33 = (int)v32;
            if ((int)v32 < 0) {
              unsigned int v33 = -v33;
            }
            if (v33 >> 5 <= 0xE0)
            {
              double v30 = v30 + (double)*(__int16 *)(a3 + 47456) * 4.4408921e-16 * v32 * 299792458.0;
              if (v26 == 4) {
                double v28 = v30;
              }
            }
          }
        }
      }
    }
  }
  if (v20 > 0.0 && *(unsigned char *)(a2 + 1680) == 0)
  {
    LOWORD(v44) = 1;
    double v45 = *(double *)(a2 + 1632) * 299792458.0;
    double v46 = 0.0;
    BYTE2(v44) = 0;
    v41[0] = v26;
    v41[1] = v23;
    v41[2] = 1;
    double v42 = v27;
    double v43 = v28;
    NK_Adjust_Constell((uint64_t)v41, &v44, a1, a2, a4, a5);
    *(double *)(a2 + 1632) = v45 * 0.00000000333564095;
    *(unsigned char *)(a2 + 1680) = BYTE2(v44);
    int v25 = *(unsigned __int8 *)(a2 + 1681);
  }
  if (v21 > 0.0 && !v25)
  {
    LOWORD(v44) = 258;
    double v45 = *(double *)(a2 + 1640) * 299792458.0;
    double v46 = v29;
    BYTE2(v44) = 0;
    v38[0] = v26;
    v38[1] = v23;
    v38[2] = 1;
    double v39 = v27;
    double v40 = v28;
    NK_Adjust_Constell((uint64_t)v38, &v44, a1, a2, a4, a5);
    *(double *)(a2 + 1640) = v45 * 0.00000000333564095;
    *(unsigned char *)(a2 + 1681) = BYTE2(v44);
  }
  if (v22 > 0.0 && !*(unsigned char *)(a2 + 1682))
  {
    LOWORD(v44) = 516;
    double v45 = *(double *)(a2 + 1648) * 299792458.0;
    double v46 = v30;
    BYTE2(v44) = 0;
    v35[0] = v26;
    v35[1] = v23;
    v35[2] = 1;
    double v36 = v27;
    double v37 = v28;
    NK_Adjust_Constell((uint64_t)v35, &v44, a1, a2, a4, a5);
    *(double *)(a2 + 1648) = v45 * 0.00000000333564095;
    *(unsigned char *)(a2 + 1682) = BYTE2(v44);
  }
}

void NK_Adjust_Constell(uint64_t a1, double *a2, unsigned __int8 *a3, uint64_t a4, char a5, uint64_t a6)
{
  v40[128] = *(double *)MEMORY[0x263EF8340];
  double v11 = *(double *)(a1 + 8) - *(double *)(a1 + 16) + a2[2];
  double v12 = v11 - a2[1];
  bzero(v40, 0x400uLL);
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  int v15 = *(unsigned __int8 *)a2;
  BOOL v16 = v15 == 4;
  BOOL v17 = v15 == 2;
  BOOL v18 = v15 == 1;
  uint64_t v19 = a4 + 12056;
  double v20 = a3;
  do
  {
    unsigned int v22 = *v20;
    v20 += 4;
    unsigned int v21 = v22;
    if (v22 > 6) {
      goto LABEL_13;
    }
    BOOL v23 = v15 == 1;
    if (((1 << v21) & 0x6A) == 0)
    {
      BOOL v23 = v15 == 2;
      if (v21 != 2)
      {
        if (v21 != 4) {
          goto LABEL_13;
        }
        BOOL v23 = v15 == 4;
      }
    }
    if (*(unsigned char *)(a4 + 7064 + v13)) {
      BOOL v24 = !v23;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      *(double *)(a4 + 51592 + 8 * v13) = v12 + *(double *)(a4 + 51592 + 8 * v13);
      double v25 = v12 + *(double *)(v19 + 8 * v13);
      *(double *)(v19 + 8 * v13) = v25;
      *(double *)(a4 + 13080 + 8 * v13) = v25;
      *(double *)(a4 + 14104 + 8 * v13) = v25;
      if (*(unsigned char *)(a4 + v13 + 57)) {
        v40[v14++] = v25;
      }
    }
LABEL_13:
    ++v13;
  }
  while (v13 != 128);
  if (!v14) {
    goto LABEL_35;
  }
  VecSortAscR8(v40, 0, v14 - 1);
  unsigned int v26 = v14 >> 1;
  if (v14) {
    double v27 = v40[v26];
  }
  else {
    double v27 = (v40[v26 - 1] + v40[v26]) * 0.5;
  }
  a2[1] = v11;
  if (fabs(v27) < 586.104512)
  {
    uint64_t v28 = 0;
    uint64_t v29 = a4 + 17432;
    uint64_t v30 = a4 + 12056;
    while (1)
    {
      unsigned int v32 = *a3;
      a3 += 4;
      unsigned int v31 = v32;
      if (v32 <= 6)
      {
        BOOL v33 = v18;
        if (((1 << v31) & 0x6A) != 0) {
          goto LABEL_22;
        }
        BOOL v33 = v17;
        if (v31 == 2) {
          goto LABEL_22;
        }
        if (v31 == 4) {
          break;
        }
      }
LABEL_33:
      if (++v28 == 128)
      {
        double v11 = a2[1] - v27;
LABEL_35:
        a2[1] = v11;
        goto LABEL_36;
      }
    }
    BOOL v33 = v16;
LABEL_22:
    if (*(unsigned char *)(a4 + 7064 + v28)) {
      BOOL v34 = !v33;
    }
    else {
      BOOL v34 = 1;
    }
    if (!v34)
    {
      *(double *)(a4 + 51592 + 8 * v28) = *(double *)(a4 + 51592 + 8 * v28) - v27;
      double v35 = *(double *)(v30 + 8 * v28) - v27;
      *(double *)(v30 + 8 * v28) = v35;
      *(double *)(a4 + 13080 + 8 * v28) = v35;
      *(double *)(a4 + 14104 + 8 * v28) = v35;
      if ((a5 & 1) == 0)
      {
        double v36 = v35 * 0.5 * (v35 * 0.5);
        if (*(double *)(v29 + 8 * v28) > v36) {
          double v36 = *(double *)(v29 + 8 * v28);
        }
        *(double *)(v29 + 8 * v28) = v36;
      }
    }
    goto LABEL_33;
  }
LABEL_36:
  uint64_t v37 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v38 = *((unsigned __int8 *)a2 + 1);
  *(double *)(a6 + 8 * (((v38 + 2 + (v38 + 2) * v38) >> 1) - 1)) = fmax(*(double *)(a6+ 8* (((v37 + 2 + (v37 + 2) * v37) >> 1)- 1)), 62500.0);
  *(void *)(a6 + 8 * v38 + 48) = *(void *)(a6 + 8 * v37 + 48);
}

uint64_t ByteS_Ext_8(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(*a1)++;
  uint64_t v3 = v1[1];
  *a1 = v1 + 2;
  uint64_t v4 = v1[2];
  *a1 = v1 + 3;
  uint64_t v5 = v1[3];
  *a1 = v1 + 4;
  uint64_t v6 = v1[4];
  *a1 = v1 + 5;
  uint64_t v7 = v1[5];
  *a1 = v1 + 6;
  uint64_t v8 = v1[6];
  *a1 = v1 + 7;
  uint64_t v9 = v1[7];
  *a1 = v1 + 8;
  return v2 | (v3 << 8) | (v4 << 16) | (v5 << 24) | (v6 << 32) | (v7 << 40) | (v8 << 48) | (v9 << 56);
}

uint64_t NK_Check_State(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 27120);
  if (v3 >= 0x258)
  {
    uint64_t v4 = 0;
    while (!*(unsigned char *)(a3 + 7064 + v4) || *(unsigned __int8 *)(result + v4) < 0x21u)
    {
      if (++v4 == 128) {
        return result;
      }
    }
    *(unsigned char *)(a3 + 1864) = 0;
    *(unsigned char *)(a2 + 241) = 1;
    *(_DWORD *)(a3 + 1868) = 0;
    *(unsigned char *)(a2 + 243) = 0;
    if (*(int *)(a3 + 20) >= 10) {
      *(_DWORD *)(a3 + 20) = 9;
    }
    if (v3 >= 0x384) {
      *(_DWORD *)(a2 + 27136) = 0;
    }
  }
  return result;
}

double Trop_Elev_MapF(uint64_t a1)
{
  v4[1] = *(double *)MEMORY[0x263EF8340];
  v4[0] = 0.0;
  BOOL v2 = R8_EQ((const double *)(a1 + 16), v4);
  double result = 1.0;
  if (!v2) {
    return 1.0 / (*(double *)(a1 + 8) + 0.00143 / (*(double *)(a1 + 8) / *(double *)(a1 + 16) + 0.0445));
  }
  return result;
}

void Trop_Niell_MappingFunc::Get_Dry_MappingFunc_OF(Trop_Niell_MappingFunc *this, double a2, double a3, double a4, int a5)
{
  if (*((unsigned char *)this + 66) && a3 >= -500.0 && a3 <= 18000.0) {
    sin(a2 * 0.0174532925);
  }
}

void Trop_Niell_MappingFunc::Set_MappingFunc_Params(Trop_Niell_MappingFunc *this, double a2, int a3)
{
  unsigned int v4 = a3 - 367;
  if ((a3 - 367) >= 0xFFFFFE92)
  {
    if (*((_DWORD *)this + 2) != a3 || !*((unsigned char *)this + 65))
    {
      char v5 = 0;
      *((unsigned char *)this + 65) = 1;
      *((_DWORD *)this + 2) = a3;
      goto LABEL_7;
    }
  }
  else
  {
    *(_WORD *)((char *)this + 65) = 0;
  }
  char v5 = 1;
LABEL_7:
  if (a2 < -90.0 || a2 > 90.0)
  {
    char v7 = 0;
    *((unsigned char *)this + 64) = 0;
LABEL_19:
    *((unsigned char *)this + 66) = v7;
    return;
  }
  if (vabdd_f64(*(double *)this, a2) > 0.004 || !*((unsigned char *)this + 64))
  {
    *((unsigned char *)this + 64) = 1;
    *(double *)this = a2;
    if (v4 < 0xFFFFFE92) {
      return;
    }
    goto LABEL_18;
  }
  if (v4 < 0xFFFFFE92) {
    char v6 = 1;
  }
  else {
    char v6 = v5;
  }
  if ((v6 & 1) == 0)
  {
LABEL_18:
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_a_Dry_Avg, NMF_a_Dry_Amp);
    *((void *)this + 5) = v8;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_b_Dry_Avg, NMF_b_Dry_Amp);
    *((void *)this + 6) = v9;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_c_Dry_Avg, NMF_c_Dry_Amp);
    *((void *)this + 7) = v10;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_a_Wet_Avg, 0);
    *((void *)this + 2) = v11;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_b_Wet_Avg, 0);
    *((void *)this + 3) = v12;
    Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(this, NMF_c_Wet_Avg, 0);
    *((void *)this + 4) = v13;
    char v7 = 1;
    goto LABEL_19;
  }
}

void Trop_Niell_MappingFunc::Get_Wet_MappingFunc_OF(Trop_Niell_MappingFunc *this, double a2, double a3, int a4)
{
  if (*((unsigned char *)this + 66)) {
    fmax(sin(a2 * 0.0174532925), 0.001);
  }
}

void Trop_Niell_MappingFunc::Compute_MapFunc_Coeff(Trop_Niell_MappingFunc *this, const double *a2, const double *a3)
{
  if (a2)
  {
    double v3 = (double)*((int *)this + 2);
    if (*(double *)this < 0.0) {
      double v3 = v3 + 182.625;
    }
    cos((v3 + -28.0) * 0.0172024238);
  }
}

double NVIC_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_WORD *)(a2 + 12) = *(_WORD *)(a1 + 12);
  *(unsigned char *)(a2 + 14) = *(unsigned char *)(a1 + 27);
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 14);
  double v2 = (double)*(int *)(a1 + 20);
  int v3 = 16 * *(unsigned __int16 *)(a1 + 18);
  *(_DWORD *)(a2 + 20) = 16 * *(unsigned __int16 *)(a1 + 16);
  *(_DWORD *)(a2 + 24) = v3;
  double v4 = (double)*(__int16 *)(a1 + 24) * 1.13686838e-13;
  *(double *)(a2 + 32) = v2 * 2.91038305e-11;
  *(double *)(a2 + 40) = v4;
  double v5 = (double)*(__int16 *)(a1 + 28) * 2.91038305e-11;
  *(double *)(a2 + 48) = (double)*(char *)(a1 + 26) * 2.77555756e-17;
  *(double *)(a2 + 56) = v5;
  *(double *)(a2 + 64) = (double)*(__int16 *)(a1 + 30) * 3.57157734e-13;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  v8.i64[0] = v6;
  v8.i64[1] = HIDWORD(v6);
  *(float64x2_t *)(a2 + 72) = vmulq_f64(vcvtq_f64_u64(v8), (float64x2_t)xmmword_263D836B0);
  v8.i64[0] = (int)v7;
  v8.i64[1] = SHIDWORD(v7);
  float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL);
  *(float64x2_t *)(a2 + 88) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v8), v9);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v8.i64[0] = (int)v10;
  v8.i64[1] = SHIDWORD(v10);
  *(float64x2_t *)(a2 + 104) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v8), v9);
  v8.i64[0] = (int)v11;
  v8.i64[1] = SHIDWORD(v11);
  *(float64x2_t *)(a2 + 120) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v8), (float64x2_t)vdupq_n_s64(0x3D5921FB54442D28uLL));
  double v12 = (double)*(__int16 *)(a1 + 66) * 0.00000000186264515;
  *(double *)(a2 + 136) = (double)*(__int16 *)(a1 + 64) * 0.00000000186264515;
  *(double *)(a2 + 144) = v12;
  v9.f64[0] = (double)*(__int16 *)(a1 + 70) * 0.00000000186264515;
  *(double *)(a2 + 152) = (double)*(__int16 *)(a1 + 68) * 0.00000000186264515;
  *(float64_t *)(a2 + 160) = v9.f64[0];
  double result = (double)*(__int16 *)(a1 + 72) * 0.03125;
  v9.f64[0] = (double)*(__int16 *)(a1 + 74) * 0.03125;
  *(double *)(a2 + 168) = result;
  *(double *)(a2 + 176) = v9.f64[0];
  return result;
}

void GLON_Alm_Apply_Corrns(double *a1, double *a2, uint64_t a3, double a4, double a5, double a6)
{
  double v12 = a2[7];
  __double2 v13 = __sincos_stret(a2[8]);
  double v14 = a1[1] + v12 * v13.__sinval;
  double v15 = a1[3];
  double v16 = a1[2] + v12 * v13.__cosval;
  double v17 = a2[4] + 1.09955743 + a1[4];
  double v18 = sqrt(v16 * v16 + v14 * v14);
  *(double *)a3 = *a1 + a4;
  *(double *)(a3 + 8) = v18;
  *(double *)(a3 + 16) = v15 + a5;
  *(double *)(a3 + 24) = v17;
  if (fabs(v18) <= 2.22044605e-16)
  {
    *(void *)(a3 + 40) = 0;
    double v19 = 0.0;
  }
  else if (fabs(v16) <= 2.22044605e-16)
  {
    if (v14 <= 0.0)
    {
      *(void *)(a3 + 40) = 0xBFF921FB54442D28;
      double v19 = -1.57079633;
    }
    else
    {
      *(void *)(a3 + 40) = 0x3FF921FB54442D28;
      double v19 = 1.57079633;
    }
  }
  else
  {
    double v19 = atan2(v14, v16);
    *(double *)(a3 + 40) = v19;
  }
  *(double *)(a3 + 32) = a1[5] + a6 - v19;
}

uint64_t DD_Assist_GAL_Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  unsigned __int16 v73 = (unsigned __int8 *)(a3 + 25352);
  uint64_t v76 = a3 + 20876;
  int v7 = a1 - 241;
  do
  {
    if (*(unsigned char *)(*(void *)(a3 + 17616) + v6) && (v7 - *(_DWORD *)(a3 + 88 * v6 + 17708)) > 0xFFFFF806) {
      goto LABEL_42;
    }
    uint64_t v81 = 0;
    long long v79 = 0u;
    long long v80 = 0u;
    memset(v78, 0, sizeof(v78));
    long long v77 = 0u;
    if (!Core_Get_GAL_Eph((v6 + 1), a1, (uint64_t)&v77)) {
      goto LABEL_42;
    }
    uint64_t v8 = *(void *)(a3 + 17616);
    if (*(unsigned char *)(v8 + v6))
    {
      float64x2_t v9 = (_DWORD *)(a3 + 88 * v6 + 17708);
      if ((int)v77 <= *v9 && (int)a1 - *v9 > -1801) {
        goto LABEL_42;
      }
      if ((int)v77 - *v9 <= 10799 && Is_GAL_IntEph_Real(a3 + 88 * v6 + 17708) && !Is_GAL_IntEph_Real((uint64_t)&v77))
      {
        *float64x2_t v9 = a1;
        goto LABEL_42;
      }
    }
    BOOL v10 = (v81 & 0x1000000000000) == 0;
    BOOL v11 = !(v81 & 0x100000000);
    double v12 = *(long long **)(a3 + 17552);
    if ((v81 & 0x100000000) == 0) {
      BOOL v10 = 1;
    }
    if (*((unsigned char *)v12 + v6)) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = !v10;
    }
    if (v13 || (uint64_t v14 = *(void *)(a3 + 17632), !*(unsigned char *)(v14 + v6)))
    {
      BOOL v16 = v11;
      if ((v81 & 0x1000000000000) != 0) {
        goto LABEL_29;
      }
    }
    else
    {
      int v15 = *(_DWORD *)(a3 + 36 * v6 + 24044);
      if (v15 + 3600 > (int)a1 && ((*(unsigned char *)(a3 + 36 * v6 + 24076) | *(unsigned char *)(a3 + 36 * v6 + 24078)) & 1) != 0)
      {
        BOOL v11 = 0;
LABEL_28:
        BOOL v16 = v11;
LABEL_29:
        int v23 = 0;
        *((unsigned char *)v12 + v6) = 0;
        uint64_t v17 = a3 + 88 * v6 + 17708;
        int v21 = *(_DWORD *)(a3 + 88 * v6 + 17712);
        uint64_t v22 = *(void *)(a3 + 17568);
        int v20 = 2;
        goto LABEL_30;
      }
      if ((v81 & 0x1000000000000) != 0) {
        goto LABEL_28;
      }
      if (v15 + 100 < (int)a1)
      {
        *(unsigned char *)(*(void *)(a3 + 17592) + v6) = 0;
        *(unsigned char *)(v14 + v6) = 0;
      }
      BOOL v16 = v11;
    }
    uint64_t v17 = a3 + 88 * v6 + 17708;
    long long v18 = v79;
    *(_OWORD *)(v17 + 32) = v78[1];
    *(_OWORD *)(v17 + 48) = v18;
    *(_OWORD *)(v17 + 64) = v80;
    *(void *)(v17 + 80) = v81;
    long long v19 = v78[0];
    *(_OWORD *)uint64_t v17 = v77;
    *(_OWORD *)(v17 + 16) = v19;
    int v20 = 1;
    *(unsigned char *)(*(void *)(a3 + 17584) + v6) = 1;
    *(unsigned char *)(v8 + v6) = 1;
    *((unsigned char *)v12 + v6) = 1;
    int v21 = *(_DWORD *)(a3 + 88 * v6 + 17712);
    uint64_t v22 = *(void *)(a3 + 17568);
    int v23 = 1;
LABEL_30:
    if (v21 == 5)
    {
      *(_DWORD *)(v22 + 20 * v6 + 8) = v20;
      *(unsigned char *)(*(void *)(a3 + 17560) + v6) = v16;
      if (v16) {
        int v24 = 1;
      }
      else {
        int v24 = 2;
      }
      *(_DWORD *)(*(void *)(a3 + 17576) + 20 * v6 + 8) = v24;
    }
    else
    {
      *(_DWORD *)(v22 + 20 * v6 + 12) = v20;
    }
    if ((int)a1 >= 1 && v23)
    {
      *(unsigned char *)(*(void *)(a3 + 17640) + v6) = 1;
      Core_Save_GAL_Eph((v6 + 1), 0, (long long *)v17);
      double v12 = *(long long **)(a3 + 17552);
    }
    uint64_t v25 = 0;
    LODWORD(v26) = 0;
    uint64_t v27 = p_NV;
    uint64_t v28 = p_NV + 7944;
    long long v30 = *v12;
    long long v29 = v12[1];
    *(_DWORD *)(p_NV + 7988) = *((_DWORD *)v12 + 8);
    *(_OWORD *)(v28 + 12) = v30;
    *(_OWORD *)(v28 + 28) = v29;
    uint64_t v31 = v27 + 7952;
    __int16 v32 = -9871;
    do
    {
      int v33 = *(unsigned __int8 *)(v31 + v25) ^ HIBYTE(v32);
      __int16 v32 = -12691 * (v32 + (*(unsigned __int8 *)(v31 + v25) ^ HIBYTE(v32))) + 22719;
      uint64_t v26 = (v26 + v33);
      ++v25;
    }
    while (v25 != 40);
    *(void *)(v27 + 7944) = v26;
LABEL_42:
    ++v6;
  }
  while (v6 != 36);
  if ((int)a1 >= 1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = v76;
    do
    {
      if (*(unsigned char *)(*(void *)(a3 + 17552) + v34)
        && !*(unsigned char *)(*(void *)(a4 + 1640) + v34)
        && *(unsigned __int8 *)(a2 + 56 + v34) <= 0xA5u
        && (!*(unsigned char *)(*(void *)(a3 + 17624) + v34) || (int)a1 - *(_DWORD *)v35 >= 241))
      {
        uint64_t v81 = 0;
        long long v79 = 0u;
        long long v80 = 0u;
        memset(v78, 0, sizeof(v78));
        long long v77 = 0u;
        int GAL_IntEph = EE_Get_GAL_IntEph((XofSvcsIf *)(v34 + 1), a1, (uint64_t)&v77);
        uint64_t v37 = *(void *)(a3 + 17624);
        if (!GAL_IntEph || *(unsigned char *)(v37 + v34) && (int)v77 <= *(_DWORD *)v35)
        {
          *(unsigned char *)(v37 + v34) = 0;
        }
        else
        {
          long long v38 = v78[0];
          *(_OWORD *)uint64_t v35 = v77;
          *(_OWORD *)(v35 + 16) = v38;
          *(void *)(v35 + 80) = v81;
          long long v39 = v80;
          long long v40 = v78[1];
          *(_OWORD *)(v35 + 48) = v79;
          *(_OWORD *)(v35 + 64) = v39;
          *(_OWORD *)(v35 + 32) = v40;
          *(unsigned char *)(*(void *)(a3 + 17584) + v34) = 1;
          *(unsigned char *)(v37 + v34) = 1;
          Debug_Log_GAL_Eph(2, (uint64_t)&v77);
        }
      }
      ++v34;
      v35 += 88;
    }
    while (v34 != 36);
  }
  uint64_t v41 = 0;
  long long v77 = 0u;
  memset(v78, 0, 19);
  int v42 = (int)a1 / 604800 - 1024;
  unsigned int v43 = v42 + (((__int16)v42 >> 29) & 3);
  int v44 = (__int16)v43 >> 2;
  int v45 = (__int16)(v42 - (v43 & 0xFFFC));
  while (2)
  {
    if (*(unsigned char *)(*(void *)(a3 + 17632) + v41) && (int)a1 - *(_DWORD *)(a3 + 36 * v41 + 24044) < 1801) {
      goto LABEL_89;
    }
    if (!Core_Get_GAL_Alm((v41 + 1), a1, (uint64_t)&v77)) {
      goto LABEL_89;
    }
    uint64_t v46 = *(void *)(a3 + 17632);
    if (*(unsigned char *)(v46 + v41))
    {
      if ((int)v77 <= *(_DWORD *)(a3 + 36 * v41 + 24044)) {
        goto LABEL_89;
      }
    }
    long long v47 = *(long long **)(a3 + 17552);
    if (*((unsigned char *)v47 + v41)) {
      BOOL v48 = 1;
    }
    else {
      BOOL v48 = ((BYTE1(v78[1]) | BYTE2(v78[1])) & 1) != 0;
    }
    if (v48 || (uint64_t v49 = *(void *)(a3 + 17616), !*(unsigned char *)(v49 + v41)))
    {
      if (((BYTE1(v78[1]) | BYTE2(v78[1])) & 1) == 0) {
        goto LABEL_74;
      }
      goto LABEL_76;
    }
    int v50 = *(_DWORD *)(a3 + 88 * v41 + 17708);
    if (v50 + 3600 > (int)a1 && ((*(unsigned char *)(a3 + 88 * v41 + 17793) | *(unsigned char *)(a3 + 88 * v41 + 17794)) & 1) != 0)
    {
LABEL_76:
      *((unsigned char *)v47 + v41) = 0;
      goto LABEL_86;
    }
    if (v50 + 100 < (int)a1)
    {
      *(unsigned char *)(*(void *)(a3 + 17584) + v41) = 0;
      *(unsigned char *)(v49 + v41) = 0;
    }
LABEL_74:
    __int16 v51 = v44;
    switch(v45)
    {
      case 0:
        __int16 v51 = v44 - (WORD5(v77) == 3);
        break;
      case 1:
        break;
      case 2:
        if (WORD5(v77)) {
          __int16 v51 = v44;
        }
        else {
          __int16 v51 = v44 + 1;
        }
        break;
      case 3:
        if (SWORD5(v77) >= 2) {
          __int16 v51 = v44;
        }
        else {
          __int16 v51 = v44 + 1;
        }
        break;
      default:
        EvCrt_Illegal_switch_default("DD_Assist_GAL_Alm", 0x208u);
        uint64_t v46 = *(void *)(a3 + 17632);
        long long v47 = *(long long **)(a3 + 17552);
        __int16 v51 = v44;
        break;
    }
    WORD5(v77) += 4 * v51;
    uint64_t v52 = a3 + 36 * v41 + 24044;
    long long v53 = v78[0];
    *(_OWORD *)uint64_t v52 = v77;
    *(_OWORD *)(v52 + 16) = v53;
    *(_DWORD *)(v52 + 32) = v78[1];
    *(unsigned char *)(*(void *)(a3 + 17592) + v41) = 1;
    *(unsigned char *)(v46 + v41) = 1;
    *((unsigned char *)v47 + v41) = 1;
    if ((int)a1 >= 1)
    {
      Core_Save_GAL_Alm((v41 + 1), 0, (long long *)v52);
      long long v47 = *(long long **)(a3 + 17552);
    }
LABEL_86:
    uint64_t v54 = 0;
    LODWORD(v55) = 0;
    uint64_t v56 = p_NV;
    uint64_t v57 = p_NV + 7944;
    long long v59 = *v47;
    long long v58 = v47[1];
    *(_DWORD *)(p_NV + 7988) = *((_DWORD *)v47 + 8);
    *(_OWORD *)(v57 + 12) = v59;
    *(_OWORD *)(v57 + 28) = v58;
    uint64_t v60 = v56 + 7952;
    __int16 v61 = -9871;
    do
    {
      int v62 = *(unsigned __int8 *)(v60 + v54) ^ HIBYTE(v61);
      __int16 v61 = -12691 * (v61 + (*(unsigned __int8 *)(v60 + v54) ^ HIBYTE(v61))) + 22719;
      uint64_t v55 = (v55 + v62);
      ++v54;
    }
    while (v54 != 40);
    *(void *)(v56 + 7944) = v55;
LABEL_89:
    if (++v41 != 36) {
      continue;
    }
    break;
  }
  *(void *)((char *)&v77 + 6) = 0;
  *(void *)&long long v77 = 0;
  uint64_t result = Core_Get_GAL_GGTO(a1, &v77);
  if (result)
  {
    int v64 = *(_DWORD *)(v76 + 4468);
    int v65 = *(_DWORD *)(v76 + 4464);
    if (v64 < 4 || (int)v77 > v65)
    {
      uint64_t result = (uint64_t)EvLog_v("DD_Assist_GAL_GGTO:  New GGTO:  Source %d > %d  or  GPS_secs %d > %d , A0G %d %d", DWORD1(v77), v64, v77, v65, SWORD4(v77), *(__int16 *)(v76 + 4472));
      *(_OWORD *)(v76 + 4464) = v77;
      *(void *)(a3 + 25360) = *(void *)(v76 + 4464);
      double v66 = (double)*(__int16 *)(v76 + 4474);
      *(double *)(a3 + 25368) = (double)*(__int16 *)(v76 + 4472) * 2.91038305e-11;
      *(double *)(a3 + 25376) = v66 * 4.4408921e-16;
      *((_DWORD *)v73 + 8) = 3600 * *v73;
      *((_WORD *)v73 + 18) = v73[1];
      if ((int)a1 >= 1)
      {
        uint64_t v67 = 0;
        LODWORD(v68) = 0;
        uint64_t v69 = p_NV;
        *(_OWORD *)(p_NV + 8000) = v77;
        uint64_t v70 = v69 + 8000;
        __int16 v71 = -9871;
        do
        {
          int v72 = *(unsigned __int8 *)(v70 + v67) ^ HIBYTE(v71);
          __int16 v71 = -12691 * (v71 + (*(unsigned __int8 *)(v70 + v67) ^ HIBYTE(v71))) + 22719;
          uint64_t v68 = (v68 + v72);
          ++v67;
        }
        while (v67 != 16);
        *(void *)(v69 + 7992) = v68;
      }
    }
  }
  return result;
}

void NK_Set_Accuracy(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v124[128] = *(double *)MEMORY[0x263EF8340];
  BOOL v10 = (_DWORD *)(a4 + 27116);
  uint64_t v11 = a5 + 61904;
  double v12 = (double *)(a5 + 61480);
  if (*(unsigned char *)(a5 + 62451))
  {
    if (*(double *)(a5 + 61584) > 30000.0) {
      *(void *)(a5 + 61584) = 0x40DD4C0000000000;
    }
    if (*(double *)(a5 + 61592) > 30000.0) {
      *(void *)(a5 + 61592) = 0x40DD4C0000000000;
    }
    if (*(double *)(a5 + 61600) > 30000.0) {
      *(void *)(a5 + 61600) = 0x40DD4C0000000000;
    }
    if (*(double *)(a5 + 61488) > 900000000.0) {
      *(void *)(a5 + 61488) = 0x41CAD27480000000;
    }
    if (*(double *)(a5 + 61496) > 900000000.0) {
      *(void *)(a5 + 61496) = 0x41CAD27480000000;
    }
    if (*(double *)(a5 + 61504) > 900000000.0) {
      *(void *)(a5 + 61504) = 0x41CAD27480000000;
    }
  }
  long long v91 = (double *)(a4 + 68160);
  double v13 = *(double *)(a5 + 61536);
  if (v13 >= *(double *)(a5 + 61544)) {
    double v13 = *(double *)(a5 + 61544);
  }
  if (v13 <= *(double *)(a5 + 61552)) {
    double v14 = v13;
  }
  else {
    double v14 = *(double *)(a5 + 61552);
  }
  *(double *)(a5 + 61944) = v14;
  double v15 = v14;
  if (!*(unsigned char *)(a5 + 24))
  {
    if (*(_DWORD *)(a4 + 27136) || (double v16 = 0.0, *(int *)(a5 + 20) >= 9)) {
      double v16 = v14;
    }
    double v15 = sqrt(v16 + *v12 * 8.98755179e10);
  }
  uint64_t v17 = 0;
  double v18 = *(double *)(a5 + 61512);
  uint64_t v19 = *(void *)(a5 + 61560);
  uint64_t v20 = *(void *)(a5 + 61568);
  *(double *)(a5 + 61952) = v15;
  *(void *)(a5 + 61960) = v19;
  *(void *)(a5 + 62000) = v20;
  *(_OWORD *)(a5 + 61904) = *(_OWORD *)(a5 + 61584);
  uint64_t v21 = *(void *)(a5 + 61600);
  double v22 = *(double *)(a5 + 61488);
  double v23 = *(double *)(a5 + 61496);
  *(double *)(a5 + 61920) = sqrt(v22 + v23);
  *(void *)(a5 + 61928) = v21;
  *(double *)(a5 + 61936) = sqrt(v22 + v23 + *(double *)(a5 + 61504));
  double v24 = 0.0;
  double v25 = *(double *)(a5 + 61520);
  uint64_t v26 = *(void *)(a5 + 61624);
  *(double *)(a5 + 61968) = sqrt(v18 + 0.0 + v25);
  *(void *)(a5 + 61976) = v26;
  do
  {
    double v24 = v24 + *(double *)(a5 + 61512 + v17);
    v17 += 8;
  }
  while (v17 != 24);
  *(double *)(a5 + 61984) = sqrt(v24);
  double v27 = *(double *)(a5 + 61992);
  double v28 = *(double *)(a5 + 1824) * *(double *)(a5 + 1824);
  double v29 = *(double *)(a5 + 1816) * *(double *)(a5 + 1816);
  if (v28 < 0.000001 && v29 < 0.000001)
  {
    double v29 = 0.000001;
    double v28 = 0.000001;
  }
  double v30 = 57.2957795 / (v29 + v28) * ((v18 * v28 + v25 * v29) * (57.2957795 / (v29 + v28)));
  double v31 = 1.0;
  if (*(unsigned char *)(a4 + 27249)) {
    double v31 = 0.5;
  }
  double v32 = 20.0;
  if (*(double *)(a5 + 1840) >= v31) {
    double v32 = 10.0;
  }
  double v33 = sqrt(v30);
  double v34 = *(double *)(a5 + 1848);
  if (v34 >= 4.0 || v33 >= v32 || *(unsigned __int8 *)(a5 + 62036) > 7u)
  {
    if (v33 >= 180.0)
    {
      double v35 = v33;
      if (*(double *)(a4 + 27232) < v31) {
        goto LABEL_47;
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 79740) = 1;
    double v33 = v32;
  }
  double v36 = v33 - v27;
  if (*(_DWORD *)(a4 + 27204) != 3 || (double v35 = v27, v27 < 180.0) && (double v35 = v27, v36 <= 1.0))
  {
    if (v34 >= 4.0)
    {
      double v35 = v33;
    }
    else
    {
      double v35 = v33;
      if (v36 > 5.0)
      {
        double v37 = fabs(v36);
        double v38 = 0.93 / v37 + 0.07;
        BOOL v39 = v37 <= 2.22044605e-16;
        double v40 = 4.18834765e15;
        if (!v39) {
          double v40 = v38;
        }
        double v35 = v27 + fmin(v40, 0.25) * v36;
      }
    }
  }
LABEL_47:
  if (v27 < 180.0)
  {
    double v41 = fabs(*(double *)(a4 + 27288));
    if (v41 > 3.0)
    {
      double v42 = v41 * 0.5;
      if (v35 < v42)
      {
        *(unsigned char *)(a5 + 79741) = 1;
        double v35 = v42;
      }
    }
  }
  *(double *)(a5 + 61992) = fmin(v35, 180.0);
  unsigned int v43 = (double *)(a5 + 62008);
  int v44 = (double *)(a5 + 62016);
  Comp_ErrorEllipse(v22, v23, *(double *)(a5 + 61632), (double *)(a5 + 62008), (double *)(a5 + 62016), (double *)(a5 + 62024));
  if (*(int *)(a5 + 1868) <= 1)
  {
    if (*(unsigned char *)(a5 + 1864))
    {
      double v45 = *v43;
      if (*v43 < 9999000.0 && v45 > 1000.0)
      {
        double v46 = v45 / *v44;
        if (v46 > 50.0) {
          *int v44 = *v44 * v46 * 0.04;
        }
      }
    }
  }
  if (!a1 || *(_DWORD *)a5 <= a1) {
    EvLog_v("TTick_Restart Test: %u %u", 2, a1);
  }
  if (!*(unsigned char *)(a4 + 241) && !*(_DWORD *)(a5 + 1872) && (*v10 - 3) >= 0xFFFFFFFE)
  {
    double v47 = *v43;
    if (*v43 > 18.0 && *(double *)(a5 + 6784) <= 0.03 && (int)(*(_DWORD *)a5 - a1) <= 4999)
    {
      if (v10[5] || (double v48 = 0.0, *(int *)(a5 + 20) >= 9)) {
        double v48 = v14 * 1.11265006e-17;
      }
      if (!*(unsigned char *)(a5 + 24)) {
        double v48 = v48 + *v12 * 0.000001;
      }
      double v49 = sqrt(v48) * 1000000.0;
      double v50 = -0.5;
      if (v49 > 0.0) {
        double v50 = 0.5;
      }
      double v51 = v49 + v50;
      if (v51 <= 2147483650.0)
      {
        if (v51 <= -2147483650.0) {
          double v51 = -2147483650.0;
        }
        if ((int)v51 <= 99900)
        {
          uint64_t v52 = 0;
          int v53 = 0;
          uint64_t v54 = a5 + 7064;
          do
          {
            if (*(unsigned char *)(v54 + v52)
              && (*(_DWORD *)(v54 + 4 * v52 + 256) - 1) >= 0x1D
              && *(unsigned __int8 *)(a2 + v52) > 0x23u)
            {
              ++v53;
            }
            ++v52;
          }
          while (v52 != 128);
          if (v53 >= 6)
          {
            double v55 = dbl_263D836E0[*v10 == 1] * v47;
            if (v55 < 18.0) {
              double v55 = 18.0;
            }
            *unsigned int v43 = v55;
            if (v55 < *v44) {
              *int v44 = v55;
            }
            double v56 = *(double *)(v11 + 24);
            double v57 = v56;
            if (v56 > 50.0)
            {
              double v57 = v56 * 0.8;
              *(double *)(v11 + 24) = v56 * 0.8;
              if (v56 * 0.8 < 50.0)
              {
                *(void *)(v11 + 24) = 0x4049000000000000;
                double v57 = 50.0;
              }
            }
            EvLog_v("NK_Set_Accuracy: Reset pos acc H %g %g V %g %g", v47, v55, v56, v57);
          }
        }
      }
    }
  }
  double v58 = *(double *)(a5 + 6784);
  if (*(unsigned __int8 *)(v11 + 129) <= 5u && v58 <= *(double *)(a4 + 26976)) {
    double v58 = *(double *)(a4 + 26976);
  }
  double v59 = *(double *)(v11 + 16);
  if (v58 > 25.0)
  {
    double v60 = sqrt(v58);
    *(double *)(v11 + 40) = v60 * *(double *)(v11 + 40);
    *(double *)(v11 + 56) = v60 * *(double *)(v11 + 56);
    *(float64x2_t *)uint64_t v11 = vmulq_n_f64(*(float64x2_t *)v11, v60);
    double v59 = v60 * v59;
    *(double *)(v11 + 16) = v59;
    *(float64x2_t *)(v11 + 24) = vmulq_n_f64(*(float64x2_t *)(v11 + 24), v60);
    *(float64x2_t *)(v11 + 104) = vmulq_n_f64(*(float64x2_t *)(v11 + 104), v60);
  }
  if (v59 >= 100.0)
  {
    double v63 = *(double *)(v11 + 40);
  }
  else
  {
    long double v61 = *(double *)(a5 + 6776);
    if (v61 <= 10.0)
    {
      double v62 = 1.0;
    }
    else
    {
      v124[0] = 0.0;
      double v62 = 1.0;
      if (!R8_EQ((const double *)(a5 + 6776), v124)) {
        double v62 = log10(v61);
      }
    }
    unsigned int v64 = *(unsigned __int8 *)(v11 + 130);
    if (v64 - 1 <= 0xD) {
      double v62 = v62 * (((15.0 - (double)v64) / 15.0 + 1.0) * ((15.0 - (double)v64) / 15.0 + 1.0));
    }
    bzero(v124, 0x400uLL);
    signed int v65 = 0;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    double v66 = (double *)(a5 + 12056);
    long long v94 = 0u;
    long long v95 = 0u;
    uint64_t v67 = (_DWORD *)(a5 + 7320);
    uint64_t v68 = 242;
    uint64_t v69 = a5;
    *(_OWORD *)__int16 v92 = 0u;
    long long v93 = 0u;
    do
    {
      if ((*(unsigned char *)(v69 + 7064) || *v67 && *v66 > 0.0) && *(unsigned char *)(v69 + 57))
      {
        v124[v65] = v66[944] * *(double *)(a4 + 8 * v68);
        v92[v65] = v65;
        ++v65;
      }
      ++v69;
      v68 += 5;
      ++v66;
      ++v67;
    }
    while (v68 != 882);
    if (v65)
    {
      VecSortIndexAscR8((uint64_t)v124, v65, v92, 1);
      if (v65 >= 16)
      {
        int v70 = (75 * v65 + 99) / 100;
        if (v65 < 0x15) {
          int v70 = 15;
        }
        if (v65 >= 25) {
          uint64_t v71 = 25;
        }
        else {
          uint64_t v71 = v65;
        }
        if (v70 < (int)v71)
        {
          int v72 = &v92[v70];
          uint64_t v73 = v71 - v70;
          int v74 = v70 + 1;
          do
          {
            uint64_t v75 = *v72++;
            if (v124[v75] > 0.0) {
              int v70 = v74;
            }
            ++v74;
            --v73;
          }
          while (v73);
        }
      }
      else
      {
        int v70 = v65;
      }
      double v62 = v62 * fmax(fabs(v124[v92[v70 - 1]]) / (v62 * (*v43 + *v44) * 0.5), 1.0);
    }
    if (*(unsigned char *)(a4 + 241) || v10[1] > *(unsigned __int16 *)(a4 + 16) || *(_DWORD *)(a5 + 1872) != 1)
    {
      BOOL v77 = 0;
    }
    else
    {
      unsigned int v76 = *(_DWORD *)(a4 + 148);
      if (v76 >= *(_DWORD *)(a4 + 152)) {
        unsigned int v76 = *(_DWORD *)(a4 + 152);
      }
      if (v76 >= *(_DWORD *)(a4 + 156)) {
        unsigned int v76 = *(_DWORD *)(a4 + 156);
      }
      BOOL v77 = v76 > 0xA;
    }
    int v78 = v77 && *(_DWORD *)(a5 + 20) > 9;
    double v79 = 1.2;
    if (!v78) {
      double v79 = 2.0;
    }
    double v80 = 8.0;
    if ((v78 & (a3 < 6)) != 0) {
      double v80 = 4.0;
    }
    if (v62 >= v80) {
      double v81 = v80;
    }
    else {
      double v81 = v62;
    }
    *(double *)(v11 + 512) = v81;
    if (v62 >= v79) {
      double v82 = v79;
    }
    else {
      double v82 = v62;
    }
    *(double *)(v11 + 520) = v82;
    int v83 = v91;
    double v84 = *v91;
    if (v64)
    {
      double v84 = v81 * 0.1 + v84 * 0.9;
      double v85 = v82 * 0.1 + v91[1] * 0.9;
      double *v91 = v84;
      v83[1] = v85;
    }
    else
    {
      double v85 = v91[1];
    }
    double v63 = v84 * *(double *)(v11 + 40);
    *(float64x2_t *)uint64_t v11 = vmulq_n_f64(*(float64x2_t *)v11, v84);
    double v86 = v84 * v59;
    *(float64x2_t *)(v11 + 104) = vmulq_n_f64(*(float64x2_t *)(v11 + 104), v84);
    double v87 = v85 * *(double *)(v11 + 24);
    *(double *)(v11 + 16) = v86;
    *(double *)(v11 + 24) = v87;
    *(double *)(v11 + 32) = sqrt(v87 * v87 + v86 * v86);
    *(double *)(v11 + 40) = v63;
  }
  if (*(double *)(v11 + 48) < v63) {
    *(double *)(v11 + 48) = v63;
  }
  uint64_t v88 = 16;
  float64x2_t v89 = (float64x2_t)vdupq_n_s64(0x4163125300000000uLL);
  do
  {
    int32x2_t v90 = vmovn_s64(vcgtq_f64(*(float64x2_t *)v11, v89));
    if (v90.i8[0]) {
      *(void *)uint64_t v11 = 0x4163125300000000;
    }
    if (v90.i8[4]) {
      *(void *)(v11 + 8) = 0x4163125300000000;
    }
    v11 += 16;
    v88 -= 2;
  }
  while (v88);
}

uint64_t XofBaseType::ValidateUnsignedRange(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL v7 = a3 >= a2 && a4 <= a2 || a5 == a2;
  uint64_t v8 = v7;
  if (!v7 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    double v13 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (a6[23] < 0) {
      a6 = *(const char **)a6;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Range error. Field Name: [ %s ], Valid Range: [ %llu .. %llu ] and value: [ %llu ]\n", (unint64_t)v13, "GNC", 87, "ValidateUnsignedRange", a6, a4, a3, a2);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return v8;
}

uint64_t XofBaseType::ValidateSignedRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL v7 = a3 >= a2 && a4 <= a2 || a5 == a2;
  uint64_t v8 = v7;
  if (!v7 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    double v13 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (a6[23] < 0) {
      a6 = *(const char **)a6;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Range error. Field Name: [%s], Valid Range: [ %lld .. %lld ] and value: [ %lld ]\n", (unint64_t)v13, "GNC", 87, "ValidateSignedRange", a6, a4, a3, a2);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return v8;
}

uint64_t XofBaseType::CopyDataFromBuffer(int a1, void *a2, unsigned int a3, size_t __n, unint64_t *a5)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (__n >= 9)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid param: length of param is %d, which is > %lu\n", v7);
LABEL_7:
      gnssOsa_PrintLog(__str, 2, 1, 0);
      return 0;
    }
    return 0;
  }
  if (a2[1] - (*a2 + (unint64_t)a3) < __n)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer!\n");
      goto LABEL_7;
    }
    return 0;
  }
  memcpy((char *)a5 - __n + 8, (const void *)(*a2 + a3), __n);
  *a5 = bswap64(*a5);
  return 1;
}

double GLON_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  int v2 = 900 * *(unsigned __int8 *)(a1 + 13);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 12) = v2;
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 36);
  double v5 = (double)*(int *)(a1 + 40) * 0.000953674316;
  *(double *)(a2 + 24) = (double)*(int *)(a1 + 28) * 0.48828125;
  *(double *)(a2 + 32) = v5;
  *(double *)(a2 + 40) = (double)*(char *)(a1 + 52) * 0.000000931322575;
  *(double *)(a2 + 48) = (double)v3 * 0.48828125;
  int v6 = *(_DWORD *)(a1 + 48);
  double v7 = (double)*(char *)(a1 + 53) * 0.000000931322575;
  *(double *)(a2 + 56) = (double)*(int *)(a1 + 44) * 0.000953674316;
  *(double *)(a2 + 64) = v7;
  *(double *)(a2 + 72) = (double)v4 * 0.48828125;
  *(double *)(a2 + 80) = (double)v6 * 0.000953674316;
  double v8 = (double)*(int *)(a1 + 56) * 9.31322575e-10;
  *(double *)(a2 + 88) = (double)*(char *)(a1 + 54) * 0.000000931322575;
  *(double *)(a2 + 96) = v8;
  double result = (double)*(__int16 *)(a1 + 60) * 9.09494702e-13;
  double v10 = (double)*(char *)(a1 + 55) * 9.31322575e-10;
  *(double *)(a2 + 104) = result;
  *(double *)(a2 + 112) = v10;
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(a1 + 18);
  *(_WORD *)(a2 + 124) = *(_WORD *)(a1 + 22);
  *(_WORD *)(a2 + 126) = *(_WORD *)(a1 + 16);
  *(_DWORD *)(a2 + 16) = ((*(unsigned __int16 *)(a1 + 14) << 31 >> 31) & 0x1E)
                       + 60 * ((*(unsigned __int16 *)(a1 + 14) >> 1) & 0x3F)
                       + 3600 * ((*(unsigned __int16 *)(a1 + 14) >> 7) & 0x1F);
  return result;
}

__n128 NK_Publish_Nav_Soln(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2 + 61832;
  *(_WORD *)a4 = *(_WORD *)(a2 + 61832);
  *(void *)(a4 + 4) = *(void *)(a2 + 61836);
  if (*(unsigned char *)(a4 + 16))
  {
    char v9 = *(unsigned char *)(a3 + 136) ^ 1;
LABEL_3:
    *(unsigned char *)(a4 + 16) = v9;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a3 + 136) && *(_DWORD *)(a3 + 148) >= 2u && !*(_DWORD *)(a3 + 160))
  {
    char v9 = 1;
    goto LABEL_3;
  }
LABEL_7:
  *(unsigned char *)(a4 + 17) = *(unsigned char *)(a2 + 61845);
  *(_WORD *)(a4 + 19) = *(_WORD *)(a2 + 61846);
  *(void *)(a4 + 24) = *(void *)(a3 + 20);
  memcpy((void *)(a4 + 32), (const void *)(a2 + 1512), 0x160uLL);
  double v10 = *(double *)(a4 + 376);
  if (v10 < 0.0)
  {
    do
      double v10 = v10 + 360.0;
    while (v10 < 0.0);
    *(double *)(a4 + 376) = v10;
  }
  if (v10 > 360.0)
  {
    do
      double v10 = v10 + -360.0;
    while (v10 > 360.0);
    *(double *)(a4 + 376) = v10;
  }
  long long v11 = *(_OWORD *)(a4 + 352);
  *(_OWORD *)(a4 + 952) = *(_OWORD *)(a4 + 336);
  *(_OWORD *)(a4 + 968) = v11;
  *(void *)(a4 + 984) = *(void *)(a4 + 368);
  *(unsigned char *)(a4 + 18) = *(unsigned char *)(a2 + 1864);
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(a2 + 1868);
  *(double *)(a4 + 992) = v10;
  memcpy((void *)(a4 + 384), (const void *)(a2 + 62032), 0x17CuLL);
  long long v12 = *(_OWORD *)(a2 + 61848);
  long long v13 = *(_OWORD *)(a2 + 61864);
  long long v14 = *(_OWORD *)(a2 + 61880);
  *(void *)(a4 + 816) = *(void *)(a2 + 61896);
  *(_OWORD *)(a4 + 784) = v13;
  *(_OWORD *)(a4 + 800) = v14;
  *(_OWORD *)(a4 + 768) = v12;
  long long v15 = *(_OWORD *)(a2 + 61936);
  long long v16 = *(_OWORD *)(a2 + 61920);
  long long v17 = *(_OWORD *)(a2 + 61952);
  *(_OWORD *)(a4 + 824) = *(_OWORD *)(a2 + 61904);
  *(_OWORD *)(a4 + 840) = v16;
  *(_OWORD *)(a4 + 856) = v15;
  *(_OWORD *)(a4 + 872) = v17;
  long long v18 = *(_OWORD *)(a2 + 62016);
  long long v19 = *(_OWORD *)(a2 + 62000);
  long long v20 = *(_OWORD *)(a2 + 61984);
  *(_OWORD *)(a4 + 888) = *(_OWORD *)(a2 + 61968);
  *(_OWORD *)(a4 + 904) = v20;
  *(_OWORD *)(a4 + 920) = v19;
  *(_OWORD *)(a4 + 936) = v18;
  *(double *)(a4 + 912) = fmin(fmax(*(double *)(a4 + 912), 1.0), 180.0);
  *(double *)(a4 + 888) = fmax(*(double *)(a4 + 888), 0.01);
  bzero((void *)(a4 + 1000), 0x700uLL);
  uint64_t v21 = 0;
  double v22 = (__int16 *)(a1 + 2400);
  uint64_t v23 = a2 + 7320;
  uint64_t v24 = 1000;
  do
  {
    uint64_t v25 = a1 + 4 * v21;
    if (*(_DWORD *)(v25 + 1248) != 3)
    {
      uint64_t v26 = (_DWORD *)(a4 + v24);
      *uint64_t v26 = *(_DWORD *)(v25 + 96);
      double v27 = (unsigned char *)(a4 + v21);
      v27[1512] = *(unsigned char *)(a1 + v21 + 736);
      v26[160] = *(_DWORD *)(v25 + 1248);
      v27[2152] = *(unsigned char *)(a1 + v21 + 1760);
      v27[2664] = *(unsigned char *)(a2 + v21 + 2400);
      if (*(_DWORD *)(a3 + 16136 + 4 * v21) == 1)
      {
        char v28 = *(unsigned char *)(v23 + v21 - 256);
        if (v28) {
          char v28 = (*(_DWORD *)(v23 + 4 * v21) - 30) < 0xFFFFFFE3;
        }
        *(unsigned char *)(a4 + v21 + 2536) = v28;
      }
      int v29 = *(_DWORD *)(v25 + 1248);
      if (v29 < 15)
      {
        if (v29 < 13) {
          __int16 v30 = *v22;
        }
        else {
          __int16 v30 = v22[128];
        }
        *(_WORD *)(a4 + 2 * v21 + 2280) = v30;
      }
      else
      {
        *(_WORD *)(a4 + 2 * v21 + 2280) = v22[256];
      }
    }
    ++v21;
    ++v22;
    v24 += 4;
  }
  while (v21 != 128);
  if (!*(_DWORD *)(v8 + 4))
  {
    *(unsigned char *)(v8 + 201) = 0;
    *(unsigned char *)(v8 + 207) = 0;
    *(unsigned char *)(v8 + 212) = 0;
    *(unsigned char *)(v8 + 217) = 0;
    *(unsigned char *)(a4 + 385) = 0;
    *(unsigned char *)(a4 + 391) = 0;
    *(unsigned char *)(a4 + 396) = 0;
    *(unsigned char *)(a4 + 401) = 0;
    *(_OWORD *)(a4 + 2536) = 0u;
    *(_OWORD *)(a4 + 2552) = 0u;
    *(_OWORD *)(a4 + 2568) = 0u;
    *(_OWORD *)(a4 + 2584) = 0u;
    *(_OWORD *)(a4 + 2600) = 0u;
    *(_OWORD *)(a4 + 2616) = 0u;
    *(_OWORD *)(a4 + 2632) = 0u;
    *(_OWORD *)(a4 + 2648) = 0u;
  }
  memcpy((void *)(a4 + 2792), (const void *)(a2 + 19608), 0x400uLL);
  *(_OWORD *)(a4 + 3816) = *(_OWORD *)(a2 + 6768);
  *(_WORD *)(a4 + 3832) = *(_WORD *)(a3 + 27072);
  *(_OWORD *)(a4 + 3840) = *(_OWORD *)(a2 + 21672);
  *(_WORD *)(a4 + 3856) = *(_WORD *)(a3 + 27074);
  __n128 result = *(__n128 *)(a2 + 36576);
  *(__n128 *)(a4 + 3864) = result;
  *(_WORD *)(a4 + 3880) = *(_WORD *)(a3 + 27076);
  return result;
}

void SV_Data_Decode_Init(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = *MEMORY[0x263EF8340];
  bzero(v11, 0xBBA8uLL);
  uint64_t v2 = 5580;
  do
  {
    int v3 = &v11[v2];
    *(void *)int v3 = 0;
    *((_WORD *)v3 + 4) = 0;
    *((_DWORD *)v3 + 3) = 0;
    v3[16] = 0;
    *((_DWORD *)v3 + 5) = 0;
    v2 += 28;
    v3[24] = 0;
  }
  while (v3 + 28 != &v11[5972]);
  memset(&v11[5972], 0, 427);
  memset(&v11[6400], 0, 245);
  bzero(&v11[6646], 0xA1B0uLL);
  memcpy((void *)v1, v11, 0xBBA6uLL);
  memset_pattern16((void *)v1, &memset_pattern_0, 0xC0uLL);
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(_OWORD *)(v1 + 192) = v4;
  *(_OWORD *)(v1 + 208) = v4;
  memset_pattern16((void *)(v1 + 224), &memset_pattern_2, 0x40uLL);
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  int v6 = (_OWORD *)(v1 + 48006);
  uint64_t v7 = 32;
  do
  {
    *(v6 - 2) = 0uLL;
    *v6++ = v5;
    v7 -= 16;
  }
  while (v7);
  memset_pattern16((void *)(v1 + 3584), &memset_pattern_1, 0x3CuLL);
  *(_WORD *)(v1 + 3652) = -1;
  *(void *)(v1 + 3644) = -1;
  memset_pattern16((void *)(v1 + 3654), &memset_pattern_2, 0x14uLL);
  memset_pattern16((void *)(v1 + 6456), &memset_pattern_2, 0x7EuLL);
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)(v1 + 6629) = v8;
  *(_OWORD *)(v1 + 6598) = v8;
  *(_OWORD *)(v1 + 6614) = v8;
  *(_OWORD *)(v1 + 6582) = v8;
  memset_pattern16((void *)(v1 + 6646), &memset_pattern_2, 0x7EuLL);
  for (uint64_t i = 0; i != 63; ++i)
  {
    *(_DWORD *)(v1 + 46840 + 4 * i) = -1;
    double v10 = (unsigned char *)(v1 + 47092 + i);
    *double v10 = -1;
    v10[756] = 0;
    v10[819] = -1;
  }
}

uint64_t GN_GPS_Write_NMEA(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    LbsOsaTrace_PrintAsciiBuf(1u, 4u, 1, (uint64_t)a2, a1);
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_NMEA", 515, 0);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return a1;
}

uint64_t GN_GPS_Write_GNB_Debug(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    LbsOsaTrace_PrintAsciiBuf(0, 4u, 1, (uint64_t)a2, a1);
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_GNB_Debug", 515, 0);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return a1;
}

uint64_t GN_GPS_Write_Nav_Debug(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    LbsOsaTrace_PrintAsciiBuf(2u, 4u, 1, (uint64_t)a2, a1);
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_Nav_Debug", 515, 0);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return a1;
}

uint64_t GN_GPS_Write_Event_Log(uint64_t a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    LbsOsaTrace_PrintAsciiBuf(3u, 4u, 0, (uint64_t)a2, a1);
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GN_GPS_Write_Event_Log", 515, 0);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return a1;
}

uint64_t GN_GPS_Write_GNB_Ctrl(int a1, char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Len,%u\n", v10);
LABEL_15:
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
LABEL_16:
    LOWORD(v3) = 0;
    return (unsigned __int16)v3;
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  int v3 = a1;
  if (g_GncPStateInfo != 6 && g_GncPStateInfo != 9)
  {
    for (unsigned __int16 i = 0; i != v3; i += v7)
    {
      if (v3 - i >= 2043) {
        __int16 v7 = 2043;
      }
      else {
        __int16 v7 = v3 - i;
      }
      if (!Hal_SendAidingData((unsigned __int8 *)&a2[i]))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v8 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx TotalLen,%u,Written,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GN_GPS_Write_GNB_Ctrl", 774, v3, i);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        LOWORD(v3) = i;
        return (unsigned __int16)v3;
      }
    }
    if (g_LbsOsaTrace_Config < 4) {
      return (unsigned __int16)v3;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ReqLen,%u,SentLen,%u\n", v11);
    goto LABEL_10;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GncState,%hhu,IgnoredBytes,%hu\n", v9);
LABEL_10:
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return (unsigned __int16)v3;
}

uint64_t GN_GPS_Hard_Reset_GNB(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_GncPStateInfo == 9)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v0 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FWReset not done\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GN_GPS_Hard_Reset_GNB");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 0;
  }
  else
  {
    return GncP08_03HandleHardReset("GN_GPS_Hard_Reset_GNB");
  }
}

uint64_t GN_GPS_Wassenaar_ITAR_Speed_Exceeded(double a1, double a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Nav Output Inhibited:  Wassenaar / ITAR Export License speed exceeded:  %f > %f m/s\n\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GN_GPS_Wassenaar_ITAR_Speed_Exceeded", a1, a2);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 0;
}

BOOL XofIonosphericModelCodec::Decode(char *a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<signed char>::DecodeFromHexData(a1, a2, a3) != 1) {
    return 0;
  }

  return XofGenericCodec::Decode<1ul,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>>(a1, a2, a3);
}

BOOL XofGenericCodec::Decode<1ul,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>>(char *a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<signed char>::DecodeFromHexData(a1 + 32, a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData(a1 + 64, a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData(a1 + 96, a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData(a1 + 128, a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData(a1 + 160, a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData(a1 + 192, a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData(a1 + 224, a2, a3) == 1;
}

_OWORD *Get_SS_Order(_OWORD *result)
{
  *(_OWORD *)((char *)result + 202) = 0u;
  result[11] = 0u;
  result[12] = 0u;
  result[9] = 0u;
  result[10] = 0u;
  result[7] = 0u;
  result[8] = 0u;
  result[5] = 0u;
  result[6] = 0u;
  result[3] = 0u;
  result[4] = 0u;
  uint64_t v1 = 32;
  *__n128 result = xmmword_263D83720;
  result[1] = xmmword_263D83730;
  result[2] = 0u;
  do
  {
    if (v1 <= 0xD9) {
      *((unsigned char *)result + v1) = v1 + 1;
    }
    ++v1;
  }
  while (v1 != 56);
  for (uint64_t i = 0; i != 36; ++i)
  {
    if ((i + 56) <= 0xD9) {
      *((unsigned char *)result + i + 56) = PP_GAL_SS_Order_Table[i] + 56;
    }
  }
  for (uint64_t j = 0; j != 63; ++j)
  {
    if ((j + 92) <= 0xD9) {
      *((unsigned char *)result + j + 92) = PP_BDS_SS_Order_Table[j] + 92;
    }
  }
  for (uint64_t k = 155; k != 165; ++k)
  {
    if (k <= 0xD9) {
      *((unsigned char *)result + k) = k + 1;
    }
  }
  do
  {
    if (k <= 0xD9) {
      *((unsigned char *)result + k) = k + 1;
    }
    ++k;
  }
  while (k != 179);
  return result;
}

void NK_Limited_Reset(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2 + 61344;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a1 + 136)) {
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 1864)
    || *(unsigned __int8 *)(a2 + 62034) > 2u
    || *(_DWORD *)(a1 + 27136) && *(_DWORD *)(a1 + 27120) < 0x1Fu)
  {
    goto LABEL_27;
  }
  unint64_t v9 = (unsigned char *)(a2 + 60056);
  Comp_ErrorEllipse(*(double *)(a2 + 61488), *(double *)(a2 + 61496), *(double *)(a2 + 61632), &v97, &v98, &v99);
  double v10 = v97 * v97;
  double v97 = v97 * v97;
  double v11 = *(double *)(v7 + 96);
  double v12 = *(double *)(v7 + 104);
  if (v11 < v12) {
    double v12 = *(double *)(v7 + 96);
  }
  if (v12 > *(double *)(v7 + 112)) {
    double v12 = *(double *)(v7 + 112);
  }
  if (v10 + v12 >= 1600000000.0)
  {
    double v10 = *(double *)(v7 + 128);
    if (*(unsigned char *)(a2 + 60128)) {
      double v13 = *(double *)(a2 + 60168);
    }
    else {
      double v13 = a4 * 99930819.3 * (a4 * 99930819.3);
    }
LABEL_18:
    if (v10 >= v13 * 0.25) {
      goto LABEL_27;
    }
    goto LABEL_19;
  }
  if (*v9 && v11 >= *(double *)(a2 + 60096) * 0.25 && *(unsigned char *)(a2 + 60200))
  {
    double v13 = *(double *)(a2 + 60272);
    goto LABEL_18;
  }
LABEL_19:
  for (int i = 2; i != 14; ++i)
  {
    uint64_t v15 = a1 + 8 * ((((i - 1) * i) >> 1) - 1);
    *(double *)(v15 + 976) = *(double *)(v15 + 976) * 1.15;
  }
  uint64_t v16 = 0;
  float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3FF2666666666666uLL);
  do
  {
    *(float64x2_t *)(a2 + 61424 + v16) = vmulq_f64(*(float64x2_t *)(a2 + 61424 + v16), v17);
    v16 -= 16;
  }
  while (v16 != -96);
  uint64_t v18 = 0;
  float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x3FF2666666666666uLL);
  do
  {
    *(float64x2_t *)(a2 + 61520 + v18) = vmulq_f64(*(float64x2_t *)(a2 + 61520 + v18), v19);
    v18 -= 16;
  }
  while (v18 != -96);
  uint64_t v20 = 0;
  float64x2_t v21 = (float64x2_t)vdupq_n_s64(0x3FF11EB851EB851FuLL);
  do
  {
    *(float64x2_t *)(a2 + 61616 + v20) = vmulq_f64(*(float64x2_t *)(a2 + 61616 + v20), v21);
    v20 -= 16;
  }
  while (v20 != -96);
LABEL_27:
  if (*(unsigned char *)(a1 + 136))
  {
LABEL_28:
    unsigned int v22 = *(_DWORD *)(a1 + 140) - 61;
    if (v22 <= 4 && v22 != 2)
    {
      double v24 = *(double *)(a1 + 168);
      Comp_NEDvar_UDU(a1 + 352, 0xCu, 6, (double (*)[3])(a2 + 1736), (double *)&v95);
      *(double *)(v7 + 288) = v25;
      Comp_ErrorEllipse(*(double *)&v95, *((double *)&v95 + 1), v25, &v97, &v98, &v99);
      double v26 = v97 * v97;
      ud2var(a1 + 352, 0xCu, 1, 0xCu, (double *)(a2 + 61344));
      uint64_t v27 = 0;
      double v28 = v96;
      if (v96 <= v26) {
        double v28 = v26;
      }
      do
      {
        if (*(double *)(a2 + 61392 + v27) > v28) {
          double v28 = *(double *)(a2 + 61392 + v27);
        }
        v27 += 8;
      }
      while (v27 != 24);
      *(double *)(v7 + 64) = v28;
      *(int64x2_t *)(a2 + 61392) = vdupq_lane_s64(*(uint64_t *)&v28, 0);
      double v29 = *(double *)(v7 + 72);
      if (*(double *)(v7 + 80) > v29) {
        double v29 = *(double *)(v7 + 80);
      }
      double v30 = *(double *)(v7 + 88);
      if (v30 <= v29) {
        double v30 = v29;
      }
      double v31 = fmax(v24, 9.0);
      if (a3 == 2)
      {
        signed int v32 = *(_DWORD *)(a1 + 20);
        if (v32 <= 3 && v31 * v30 > dbl_263D837D0[v32])
        {
          int v33 = dword_263D837F0[v32];
          *(_DWORD *)(a1 + 20) = v33;
          unsigned int v34 = v33 - 2;
          if (v34 > 2) {
            double v35 = 100000000.0;
          }
          else {
            double v35 = dbl_263D837B8[v34];
          }
          double v43 = v35 / v31;
          if (v30 > v43) {
            double v30 = v43;
          }
        }
      }
      uint64_t v44 = 0;
      *(double *)(v7 + 80) = v30;
      *(double *)(v7 + 88) = v30;
      *(double *)(v7 + 72) = v30;
      int8x16_t v45 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v31, 0);
      float64x2_t v46 = (float64x2_t)vextq_s8(v45, v45, 8uLL);
      do
      {
        *(float64x2_t *)(a2 + v44 + 61424) = vmulq_f64(v46, *(float64x2_t *)(a2 + v44 + 61424));
        v44 -= 16;
      }
      while (v44 != -96);
      uint64_t v47 = 2;
      do
      {
        *((double *)&v95 + v47) = v31 * *((double *)&v95 + v47);
        unint64_t v48 = v47-- + 1;
      }
      while (v48 > 1);
      *(double *)(v7 + 288) = v31 * *(double *)(v7 + 288);
      bzero((void *)(a1 + 976), 0x270uLL);
      for (uint64_t j = 0; j != 12; ++j)
        *(void *)(a1 + 8 * ((((j + 1) * (j + 2)) >> 1) - 1) + 976) = *(void *)(a2 + 61344 + 8 * j);
      *(_OWORD *)(a2 + 61392) = v95;
      *(double *)(a2 + 61408) = v96;
      NK_Recompute_Sigmas((double *)a1, (double *)a2);
      *(unsigned char *)(a1 + 136) = 0;
      *(unsigned char *)(a1 + 176) = 2;
    }
    return;
  }
  uint64_t v36 = 0;
  double v37 = (long long *)(a2 + 1736);
  uint64_t v38 = a2 + 62452;
  do
  {
    int v39 = *(unsigned __int8 *)(v38 + v36) ^ 1;
    *((unsigned char *)&v90 + v36) = *(unsigned char *)(v38 + v36) ^ 1;
    switch((int)v36)
    {
      case 0:
        if (*(double *)v7 > 1000000000.0)
        {
          LOBYTE(v90) = 0;
          goto LABEL_56;
        }
        break;
      case 1:
        if (*(double *)(v7 + 8) > 1000000000.0)
        {
          BYTE1(v90) = 0;
          goto LABEL_56;
        }
        break;
      case 2:
        if (*(double *)(v7 + 16) > 1000000000.0)
        {
          BYTE2(v90) = 0;
          goto LABEL_56;
        }
        break;
      case 3:
        if (*(double *)(v7 + 24) > 9.0)
        {
          HIBYTE(v90) = 0;
LABEL_56:
          int v39 = *((unsigned __int8 *)&v90 + v36);
        }
        break;
      default:
        break;
    }
    if (v39) {
      EvLog_v("NK_Limited_Reset: Partial reset requested for %d", v36);
    }
    ++v36;
  }
  while (v36 != 12);
  unsigned int v40 = *(_DWORD *)(v7 + 1316);
  if (v40 > 0x1D4C0)
  {
    *(_WORD *)(a2 + 1680) = 0;
    *(unsigned char *)(a2 + 1682) = 0;
    int v90 = 16843009;
    int v92 = 16843009;
LABEL_63:
    unsigned int v41 = *(double *)(a2 + 1848);
    EvLog_v("NK_Limited_Reset: Partial reset velocity: %d  %d  ", v40, v41);
    unsigned int v42 = v41 * v41;
    if (*(_DWORD *)(v7 + 1316) / 0xFA0u > v41)
    {
      *(_OWORD *)(a2 + 1616) = 0u;
      *(_OWORD *)(a2 + 1600) = 0u;
      *(_OWORD *)(a2 + 1584) = 0u;
      *(_OWORD *)(a2 + 1816) = 0u;
      *(_OWORD *)(a2 + 1832) = 0u;
      *(_OWORD *)(a2 + 1848) = 0u;
    }
    char v91 = 1;
    __int16 v93 = 257;
    char v94 = 1;
    goto LABEL_78;
  }
  if (v40 >= 0xFA0) {
    goto LABEL_63;
  }
  unsigned int v42 = 0;
LABEL_78:
  uint64_t v50 = 0;
  unsigned int v51 = 0;
  long long v104 = 0u;
  *(_OWORD *)long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  *(_OWORD *)long long v100 = 0u;
  long long v101 = 0u;
  uint64_t v52 = (double *)v7;
  do
  {
    if (*((unsigned char *)&v90 + v50))
    {
      double v53 = -0.0;
      if (*(_DWORD *)(a2 + 1872)) {
        double v54 = v52[49];
      }
      else {
        double v54 = -0.0;
      }
      if (((v50 - 9) < 3 || v50 == 4) && v42 != 0) {
        double v53 = (double)v42;
      }
      double v57 = v53 + v52[49] + v54;
      v100[v50] = v57;
      ++v51;
      ++*(_WORD *)(a1 + 27048 + 2 * v50);
      *uint64_t v52 = v57;
    }
    ++v50;
    ++v52;
  }
  while (v50 != 12);
  double v58 = *((double *)&v101 + 1);
  if (*((double *)&v101 + 1) > 9.0 && HIBYTE(v90) != 0) {
    double v58 = 9.0;
  }
  *((double *)&v101 + 1) = v58;
  if (BYTE1(v92))
  {
    Comp_NEDvar_UDU(a1 + 352, 0xCu, 6, (double (*)[3])(a2 + 1736), (double *)&v95);
    *(double *)(v7 + 288) = v60;
    Comp_ErrorEllipse(*(double *)&v95, *((double *)&v95 + 1), v60, &v97, &v98, &v99);
    double v61 = v97 * v97;
    double v97 = v61;
    if (v96 > v61) {
      double v61 = v96;
    }
    *((double *)&v103 + 1) = v61;
    *(double *)&long long v104 = v61;
    *(double *)&long long v103 = v61;
    *(double *)(a2 + 61408) = v96;
    *(_OWORD *)(a2 + 61392) = v95;
  }
  if ((_BYTE)v93)
  {
    double v62 = *(double *)(v7 + 464);
    if (*(double *)(v7 + 472) > v62) {
      double v62 = *(double *)(v7 + 472);
    }
    if (*(double *)(v7 + 480) > v62) {
      double v62 = *(double *)(v7 + 480);
    }
    double v63 = v62 + v62;
    if (a3 == 2)
    {
      uint64_t v64 = *(int *)(a1 + 20);
      if (v64 <= 3 && v63 > dbl_263D837D0[v64]) {
        *(_DWORD *)(a1 + 20) = dword_263D837F0[v64];
      }
    }
    v105[0] = v63;
    v105[1] = v63;
    *((double *)&v104 + 1) = v63;
    *(int64x2_t *)(a2 + 61424) = vdupq_lane_s64(*(uint64_t *)&v63, 0);
    *(double *)(v7 + 72) = v63;
  }
  if ((_BYTE)v92)
  {
    double v65 = *((double *)&v102 + 1) - *(double *)(v7 + 136);
    if (v65 > 100.0)
    {
      uint64_t v66 = 0;
      double v67 = v65 * 0.25;
      double v82 = (double *)(a1 + 976);
      uint64_t v68 = a2 + 61344;
      do
      {
        if (!*((unsigned char *)&v90 + v66))
        {
          double v69 = *(double *)(v68 + 8 * v66);
          if (v69 < 2.24688795e10)
          {
            double v70 = v67 + v69 >= *(double *)(a2 + 61736 + 8 * v66) ? *(double *)(a2 + 61736 + 8 * v66) : v67 + v69;
            double v71 = v70 - v69;
            if (v70 - v69 > 25.0)
            {
              *(double *)(v68 + 8 * v66) = v70;
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              *((void *)&v84 + v66) = 0x3FF0000000000000;
              if (v71 > 0.0) {
                rnk1_core(v82, v66, v70 - v69, (double *)&v84, &v83);
              }
              EvLog_v("NK_Limited_Reset:  dT_Sync partial reset - Q-Boost Clk:  %d  %d  new_sig %d", v66, (int)sqrt(v71), (int)sqrt(v70));
            }
          }
        }
        ++v66;
      }
      while (v66 != 3);
      uint64_t v72 = 0;
      uint64_t v73 = (double *)(v7 + 48);
      do
      {
        if (!*((unsigned char *)&v92 + v72 + 1))
        {
          double v74 = *v73;
          if (*v73 < 2.24688795e10)
          {
            double v75 = v67 + v74 >= v73[49] ? v73[49] : v67 + v74;
            double v76 = v75 - v74;
            if (v75 - v74 > 25.0)
            {
              *uint64_t v73 = v75;
              long long v88 = 0u;
              long long v89 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v77 = *v37;
              long long v86 = 0u;
              long long v87 = v77;
              *(void *)&long long v88 = *((void *)v37 + 2);
              if (v76 > 0.0) {
                rnk1_core(v82, 9u, v76, (double *)&v84, &v83);
              }
              EvLog_v("NK_Limited_Reset:  dT_Sync partial reset - Q-Boost Pos:  %d  %d  new_sig %d", v72, (int)sqrt(v76), (int)sqrt(v75));
            }
          }
        }
        ++v72;
        double v37 = (long long *)((char *)v37 + 24);
        ++v73;
      }
      while (v72 != 3);
    }
  }
  if (v51)
  {
    if (v51 > 0xA)
    {
      if (v51 == 11)
      {
        uint64_t v78 = -12;
        double v79 = v100;
        do
        {
          *(void *)&long long v84 = 0;
          if (R8_EQ(v79, (const double *)&v84)) {
            ud2var(a1 + 976, 0xCu, v78 + 13, 1u, v79);
          }
          ++v79;
        }
        while (!__CFADD__(v78++, 1));
      }
      bzero((void *)(a1 + 976), 0x270uLL);
      for (uint64_t k = 0; k != 12; ++k)
        *(double *)(a1 + 8 * ((((k + 1) * (k + 2)) >> 1) - 1) + 976) = v100[k];
    }
    else
    {
      Partial_Reset(12, v100, (double *)(a1 + 976));
    }
    *(_DWORD *)(a1 + 68184) = *(_DWORD *)(a2 + 1512);
    *(unsigned char *)(a1 + 176) = 1;
    *(_DWORD *)(a1 + 152) = 0;
    NK_Recompute_Sigmas((double *)a1, (double *)a2);
  }
}

double *NK_Recompute_Sigmas(double *result, double *a2)
{
  uint64_t v2 = -12;
  uint64_t v3 = a2 + 7668;
  do
  {
    switch((int)v2)
    {
      case -12:
      case -11:
      case -10:
        double v4 = *v3 + result[1936];
        goto LABEL_7;
      case -9:
        double v4 = *v3 + result[1936] * 0.0001;
        goto LABEL_7;
      case -8:
        double v4 = *v3 + a2[194] * 0.01;
        goto LABEL_7;
      case -7:
        double v4 = *v3;
LABEL_7:
        v3[12] = v4;
        break;
      case -6:
        a2[7704] = a2[7704] + result[1940];
        a2[7686] = a2[7674] + result[1937];
        break;
      case -5:
        a2[7687] = a2[7675] + result[1938];
        break;
      case -4:
        a2[7688] = a2[7676] + result[1939];
        break;
      case -3:
        a2[7689] = a2[7677] + a2[194] * 0.0001;
        break;
      case -2:
        a2[7690] = a2[7678] + a2[194] * 0.0001;
        break;
      case -1:
        a2[7691] = a2[7679] + a2[194] * 0.0001;
        break;
      default:
        break;
    }
    v3[24] = sqrt(v3[12]);
    ++v3;
  }
  while (!__CFADD__(v2++, 1));
  return result;
}

uint64_t Gnm01_01DefaultMsgHandler(unsigned __int8 *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm01_01DefaultMsgHandler", 517);
    int v6 = 1;
LABEL_10:
    gnssOsa_PrintLog(__str, v6, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FSM:MID,%X,Srce,%u,Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm01_01DefaultMsgHandler", 519, *((_DWORD *)a1 + 1), *a1, a1[1]);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  int v3 = *((_DWORD *)a1 + 1);
  if (v3 <= 8520706)
  {
    if (v3 == 8389379)
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 0;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_CLEAR_GNSS_CACHE discarded\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm01_01DefaultMsgHandler");
      int v6 = 2;
      goto LABEL_10;
    }
    if (v3 == 8405248)
    {
      Gnm11_00ApiStatusCB(11, 0, 0, 18);
      return 0;
    }
    if (v3 != 8520195) {
      goto LABEL_32;
    }
    uint64_t v7 = (void **)*((void *)a1 + 3);
    if (v7[42])
    {
      free(v7[42]);
      uint64_t v7 = (void **)*((void *)a1 + 3);
    }
    v7[42] = 0;
    if (v7[12])
    {
      free(v7[12]);
      uint64_t v7 = (void **)*((void *)a1 + 3);
    }
    v7[12] = 0;
    if (v7[44])
    {
      free(v7[44]);
      uint64_t v7 = (void **)*((void *)a1 + 3);
    }
    goto LABEL_27;
  }
  if (v3 <= 8653570)
  {
    if (v3 != 8520707)
    {
      int v4 = 8521475;
      goto LABEL_22;
    }
    uint64_t v7 = (void **)*((void *)a1 + 3);
    if (!v7)
    {
LABEL_28:
      *((void *)a1 + 3) = 0;
      return 0;
    }
LABEL_27:
    free(v7);
    goto LABEL_28;
  }
  if (v3 != 8653571)
  {
    int v4 = 8653827;
LABEL_22:
    if (v3 == v4) {
      goto LABEL_23;
    }
LABEL_32:
    if (g_LbsOsaTrace_Config < 4) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No memory free done\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm01_01DefaultMsgHandler");
    int v6 = 4;
    goto LABEL_10;
  }
LABEL_23:
  uint64_t v8 = (void *)*((void *)a1 + 2);
  if (v8) {
    free(v8);
  }
  *((void *)a1 + 2) = 0;
  return 0;
}

uint64_t UnCompact_GPS_BinEph(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = *(void *)a2;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v2 = (unsigned char *)(a2 + 11);
  *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v3 = result + 24;
  *(void *)(result + 11) = 0;
  *(void *)(result + 16) = 0;
  for (unsigned int i = 21; i > 1; --i)
  {
    *(unsigned char *)uint64_t v3 = *v2;
    *(unsigned char *)(v3 + 1) = v2[1];
    *(_WORD *)(v3 + 2) = v2[2];
    v3 += 4;
    v2 += 3;
  }
  *(_DWORD *)(result + 104) = 0xFFFFFF;
  *(_WORD *)(result + 108) = *(_WORD *)(a2 + 71);
  *(_DWORD *)(result + 110) = *(_DWORD *)(a2 + 74);
  *(unsigned char *)(result + 114) = *(unsigned char *)(a2 + 78);
  return result;
}

BOOL Vert_Meas_Update(unsigned int a1, double *a2, unsigned int a3, unsigned __int8 *a4, double *a5, _WORD *a6, double a7)
{
  v20[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a4 + 1) < 1) {
    return 0;
  }
  a4[16] = 0;
  if (*a4)
  {
    double v10 = *((double *)a4 + 4);
    double v11 = a7 - *((double *)a4 + 3);
    *((double *)a4 + 6) = v11;
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    double v12 = a2[7];
    *((double *)v17 + a1) = -a2[6];
    *((double *)v17 + a1 + 1) = -v12;
    *((double *)&v17[1] + a1) = -a2[8];
    double v16 = 0.0;
    *((double *)v17 + a3) = v11;
    umeas((BOOL)a5, a3, v10, (double *)v17, v20, v19, &v16, *((double *)a4 + 7));
    double v13 = v16;
    if (v16 <= 0.0)
    {
      int v14 = 0;
      *a4 = 0;
      a4[16] = 1;
      ++*a6;
    }
    else
    {
      double v13 = *((double *)a4 + 4) * (v16 * (v20[a3] * v20[a3]));
      int v14 = *a4;
    }
    *((double *)a4 + 8) = v13;
  }
  else
  {
    int v14 = 0;
  }
  return v14 != 0;
}

void Corr_Old_PR_Est(unsigned char *a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, uint64_t a18, uint64_t a19, unsigned __int8 *a20,double *a21)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  BOOL v21 = a9 <= 5.0;
  BOOL v22 = a9 <= 5.0;
  double v23 = fabs(a10);
  if (!v21) {
    a6 = 0;
  }
  BOOL v24 = v23 <= 5995849.16 && v22;
  BOOL v25 = fabs(a11) <= 5995849.16 && v22;
  BOOL v26 = fabs(a12) <= 5995849.16 && v22;
  if (fabs(a13) > 30.0) {
    BOOL v22 = 0;
  }
  if (a7)
  {
    int v27 = v24 & a2;
    int v28 = v25 & a3;
    int v29 = v26 & a4;
    int v30 = v22 & a5;
    size_t v31 = a7;
    signed int v32 = a20;
    int v33 = a1;
    unsigned int v34 = a21;
    a7 = a7;
    do
    {
      if (*v32++)
      {
        double v36 = a14;
        switch(*v33)
        {
          case 2:
            goto LABEL_21;
          case 3:
            double v36 = a16;
            goto LABEL_21;
          case 4:
            double v36 = a15;
            goto LABEL_21;
          case 6:
            double v36 = a17;
LABEL_21:
            *unsigned int v34 = *v34 - v36;
            break;
          default:
            break;
        }
      }
      ++v34;
      v33 += 4;
      --a7;
    }
    while (a7);
    if (a6)
    {
      uint64_t v37 = 0;
      uint64_t v38 = a19;
      while (!a20[v37])
      {
LABEL_46:
        ++v37;
        v38 += 24;
        if (v37 == v31) {
          return;
        }
      }
      uint64_t v39 = 0;
      double v40 = *(double *)(a8 + 8 * v37);
      uint64_t v41 = a19 + 24 * v37;
      double v42 = 0.0;
      do
      {
        double v42 = v42 + *(double *)(a18 + v39) * *(double *)(v38 + v39);
        v39 += 8;
      }
      while (v39 != 24);
      uint64_t v43 = 0;
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      do
      {
        *(double *)((char *)&v52 + v43) = *(double *)(v38 + v43)
                                        - -(*(double *)(a18 + v43) - v42 * *(double *)(v38 + v43)) / v40;
        v43 += 8;
      }
      while (v43 != 24);
      uint64_t v44 = 0;
      double v45 = 0.0;
      do
      {
        double v45 = v45 + *(double *)(a18 + v44) * (*(double *)(v38 + v44) + *(double *)((char *)&v52 + v44));
        v44 += 8;
      }
      while (v44 != 24);
      *(_OWORD *)uint64_t v41 = v52;
      *(void *)(v41 + 16) = v53;
      double v46 = v45 * 0.5 + a21[v37];
      a21[v37] = v46;
      uint64_t v47 = &a1[4 * v37];
      int v48 = *v47;
      if (v48 == 4)
      {
        if (v29)
        {
          double v46 = v46 - a12;
          goto LABEL_40;
        }
      }
      else if (v48 == 2)
      {
        if (v28)
        {
          double v46 = v46 - a11;
LABEL_40:
          a21[v37] = v46;
LABEL_42:
          unsigned int v49 = v47[1];
          BOOL v21 = v49 > 0xF;
          int v50 = (1 << v49) & 0xDD77;
          if (v21 || v50 == 0)
          {
            if (v30) {
              a21[v37] = v46 - a13;
            }
            else {
              a20[v37] = 0;
            }
          }
          goto LABEL_46;
        }
      }
      else if (v27)
      {
        double v46 = v46 - a10;
        goto LABEL_40;
      }
      a20[v37] = 0;
      goto LABEL_42;
    }
  }
  else
  {
    if (a6) {
      return;
    }
    size_t v31 = 0;
  }

  bzero(a20, v31);
}

void *Init_DB_Acq_Aid_Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v35[1] = *(double *)MEMORY[0x263EF8340];
  double v6 = *(double *)(a1 + 184);
  double v7 = *(double *)(a1 + 920);
  double v8 = *(double *)(a1 + 904);
  *(_DWORD *)a3 = *(_DWORD *)(a1 + 32);
  double v9 = (*(double *)(a1 + 48) - *(double *)(a1 + 152)) * 1000.0;
  if (v9 <= 0.0) {
    double v10 = -0.5;
  }
  else {
    double v10 = 0.5;
  }
  double v11 = v9 + v10;
  if (v11 >= -2147483650.0) {
    int v12 = (int)v11;
  }
  else {
    int v12 = 0x80000000;
  }
  if (v11 <= 2147483650.0) {
    int v13 = v12;
  }
  else {
    int v13 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a3 + 36) = v13;
  *(_DWORD *)(a3 + 44) = *(_DWORD *)(a1 + 56);
  double v14 = (*(double *)(a1 + 216) - *(double *)(a1 + 160)) * 1000.0;
  if (v14 <= 0.0) {
    double v15 = -0.5;
  }
  else {
    double v15 = 0.5;
  }
  double v16 = v14 + v15;
  if (v16 <= 2147483650.0)
  {
    if (v16 >= -2147483650.0) {
      int v17 = (int)v16;
    }
    else {
      int v17 = 0x80000000;
    }
  }
  else
  {
    int v17 = 0x7FFFFFFF;
  }
  uint64_t v18 = (unsigned __int8 *)(a3 + 8593);
  *(_DWORD *)(a3 + 48) = v17;
  v35[0] = 0.0;
  API_Get_UTC_Cor(1, v35);
  if (v35[0] <= 0.0) {
    double v19 = -0.5;
  }
  else {
    double v19 = 0.5;
  }
  double v20 = v35[0] + v19;
  if (v35[0] + v19 <= 2147483650.0)
  {
    if (v20 >= -2147483650.0) {
      int v21 = (int)v20;
    }
    else {
      LOBYTE(v21) = 0;
    }
  }
  else
  {
    LOBYTE(v21) = -1;
  }
  *(unsigned char *)(a3 + 52) = v21;
  uint64_t v22 = a3 + 72;
  uint64_t v23 = -5904;
  do
  {
    uint64_t v24 = v22 + v23;
    *(_OWORD *)(v24 + 5920) = 0uLL;
    *(_OWORD *)(v24 + 5904) = 0uLL;
    *(_OWORD *)(v22 + v23 + 5934) = 0uLL;
    v23 += 48;
  }
  while (v23);
  __n128 result = memset((void *)(a3 + 5976), 255, 0x5F6uLL);
  uint64_t v26 = 0;
  *(_DWORD *)(a3 + 8592) = 0;
  *(unsigned char *)(a3 + 8596) = 0;
  do
  {
    if (*(unsigned char *)(a2 + 50616 + v26))
    {
      int v27 = 0;
      uint64_t v28 = *v18;
      int v29 = (_WORD *)(a3 + 2 * v28 + 6630);
      int v30 = v18;
    }
    else
    {
      uint64_t v28 = v18[2];
      int v29 = (_WORD *)(a3 + 2 * v28 + 7066);
      int v27 = 3;
      int v30 = v18 + 2;
    }
    *int v29 = v26 + 1;
    *int v30 = v28 + 1;
    *(_DWORD *)(a3 + 7720 + 4 * v26++) = v27;
  }
  while (v26 != 218);
  double v31 = fabs(v6);
  double v32 = sqrt(v8 * v8 + v7 * v7);
  int v33 = (int)(v6 * 1000000000.0);
  int v34 = 3 * (int)(v32 + 1313.75887);
  if (v32 >= 21500.0) {
    LOWORD(v34) = -536;
  }
  if (v31 >= 0.000032768) {
    LOWORD(v33) = 0;
  }
  *(_WORD *)(a3 + 4) = v34;
  *(void *)(a3 + 6) = -1;
  *(void *)(a3 + 14) = 0x7FFF7FFF7FFFFFFFLL;
  *(_WORD *)(a3 + 22) = -256;
  *(_WORD *)(a3 + 24) = v33;
  *(_DWORD *)(a3 + 26) = 0xFFFF;
  *(_WORD *)(a3 + 30) = -154;
  *(_DWORD *)(a3 + 56) = 0;
  *(void *)(a3 + 60) = *(void *)(a1 + 24);
  *(_WORD *)(v18 + 77) = 3584;
  *(_OWORD *)(a3 + 8600) = 0u;
  *(_OWORD *)(a3 + 8616) = 0u;
  *(_OWORD *)(a3 + 8632) = 0u;
  *(_OWORD *)(a3 + 8648) = 0u;
  *(void *)(a3 + 8662) = 0;
  *(void *)(a3 + 8680) = a2 + 17328;
  *(void *)(a3 + 8688) = a2 + 17424;
  return result;
}

uint64_t Comp_Cur_Acq_Aid(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  *(_WORD *)(a2 + 16) = *(_WORD *)(result + 16);
  if (*(unsigned char *)(result + 4))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)a2 - *(_DWORD *)result;
    if (*(_DWORD *)a2 == *(_DWORD *)result)
    {
      long long v5 = *(_OWORD *)result;
      long long v6 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a2 + 32) = v6;
      *(_OWORD *)a2 = v5;
    }
    else if (v4 <= 150000)
    {
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      *(_DWORD *)(a2 + 18) = *(_DWORD *)(result + 18);
      __int16 v7 = *(_WORD *)(result + 26);
      *(_WORD *)(a2 + 41) = *(_WORD *)(result + 41);
      int v8 = *(_DWORD *)(result + 28);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32) - v4 + (v4 << 10);
      double v9 = (int *)(a2 + 32);
      *(_WORD *)(a2 + 26) = v7;
      *(unsigned char *)(a2 + 24) = *(unsigned char *)(result + 24);
      *(_WORD *)(a2 + 38) = *(_WORD *)(result + 38);
      int v10 = v4 * *(__int16 *)(result + 20);
      if (v10 < 0) {
        HIWORD(v10) = (v10 + 0xFFFF) >> 16;
      }
      __int16 v11 = *(_WORD *)(result + 22);
      *(_WORD *)(a2 + 22) = v11 + HIWORD(v10);
      *(_DWORD *)(a2 + 28) = v8;
      int v12 = (*(__int16 *)(result + 22) + (__int16)(v11 + HIWORD(v10))) * v4;
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(result + 40);
      double v13 = (double)(v12 / 2) * 0.000000649350649;
      double v14 = -0.5;
      if (v13 > 0.0) {
        double v14 = 0.5;
      }
      double v15 = v13 + v14;
      if (v15 <= 2147483650.0)
      {
        if (v15 >= -2147483650.0) {
          int v16 = (int)v15;
        }
        else {
          int v16 = 0x80000000;
        }
      }
      else
      {
        int v16 = 0x7FFFFFFF;
      }
      signed int v17 = vcvtd_n_s64_f64(v13 - (double)v16, 0x10uLL) + *(unsigned __int16 *)(result + 36);
      if (v17 >= 0x1FFFF) {
        int v18 = 0x1FFFF;
      }
      else {
        int v18 = v17;
      }
      unsigned int v19 = v17 - v18 + 0xFFFF;
      unsigned int v20 = v17 - (v19 & 0xFFFF0000) - 0x10000;
      unsigned int v21 = v16 + HIWORD(v19);
      if (v17 >= 0x10000) {
        uint64_t v22 = v21 + 1;
      }
      else {
        uint64_t v22 = v16;
      }
      if (v17 >= 0x10000) {
        int v23 = v20;
      }
      else {
        int v23 = v17;
      }
      if (v23 < 0)
      {
        if (v23 <= -65536) {
          int v24 = -65536;
        }
        else {
          int v24 = v23;
        }
        uint64_t v22 = v22 + ~((v24 - v23 + 0xFFFF) >> 16);
      }
      __n128 result = Inc_CA_Chips(v22, v9, (int *)(a2 + 28));
      *(_WORD *)(a2 + 36) = v23;
      *(unsigned char *)(a2 + 43) = *(unsigned char *)(v3 + 43);
      *(_WORD *)(a2 + 44) = *(_WORD *)(v3 + 44);
      *(unsigned char *)(a2 + 4) = 1;
    }
  }
  return result;
}

uint64_t GncP12_41HandleClearPosData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a1)
  {
    memset(&v18, 0, sizeof(v18));
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_REQ,Mask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP12_41HandleClearPosData", *(_DWORD *)(a1 + 12));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    int v5 = *(_DWORD *)(a1 + 12);
    g_GnssDataClrMasuint64_t k = v5;
    if ((v5 & 0x40000) != 0)
    {
      __int16 v7 = "FACT";
    }
    else if ((v5 & 0x10000) != 0)
    {
      __int16 v7 = "COLD";
    }
    else
    {
      if ((v5 & 0x20000) == 0)
      {
        if ((v5 & 4) != 0)
        {
          std::string::push_back(&v18, 80);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 8) != 0)
        {
          std::string::push_back(&v18, 84);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 0x80) != 0)
        {
          std::string::push_back(&v18, 70);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 0x10) != 0)
        {
          std::string::push_back(&v18, 73);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 0x20) != 0)
        {
          std::string::push_back(&v18, 85);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if (v5)
        {
          std::string::push_back(&v18, 69);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 2) != 0)
        {
          std::string::push_back(&v18, 65);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 0x40) != 0)
        {
          std::string::push_back(&v18, 72);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 0x800) != 0)
        {
          std::string::push_back(&v18, 67);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 0x200) != 0)
        {
          GncP24_02XofDeleteData((XofSvcsIf *)2);
          int v5 = *(_DWORD *)(a1 + 12);
        }
        if ((v5 & 0x400) != 0) {
          GncP24_02XofDeleteData((XofSvcsIf *)1);
        }
LABEL_35:
        size_t v8 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        char v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v18.__r_.__value_.__l.__size_;
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v11 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v11 = v18.__r_.__value_.__l.__size_;
        }
        if (v11)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v13 = &v18;
            }
            else {
              double v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
            }
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ValidClearReq DeleteReq,%s\n", (unint64_t)v12, "GNC", 73, "GncP12_41HandleClearPosData", (const char *)v13);
            gnssOsa_PrintLog(__str, 4, 1, 0);
            size_t v8 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
            std::string::size_type size = v18.__r_.__value_.__l.__size_;
            char v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          }
          if (v9 >= 0) {
            double v14 = &v18;
          }
          else {
            double v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
          }
          if (v9 >= 0) {
            size_t v15 = v8;
          }
          else {
            size_t v15 = size;
          }
          GncP16_27UpdateStateClearNVReqRcvd((const char *)v14, v15, a3);
          if (g_GncPStateInfo > 0x10u) {
            goto LABEL_53;
          }
          char v16 = 1;
          if (((1 << g_GncPStateInfo) & 0x10C08) != 0) {
            goto LABEL_56;
          }
          if (((1 << g_GncPStateInfo) & 0x14) == 0) {
LABEL_53:
          }
            char v16 = 0;
          GncP04_21SendClearGnssAck(v16);
        }
        else
        {
          GncP04_21SendClearGnssAck(1);
        }
LABEL_56:
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        return 0;
      }
      __int16 v7 = "WARM";
    }
    MEMORY[0x263E6EBA0](&v18, v7);
    goto LABEL_35;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 69, "GncP12_41HandleClearPosData", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void sub_263CEE208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GncP12_04HandleGpsRefTime(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ASST_RTIME_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_04HandleGpsRefTime");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    int v3 = *(_DWORD *)(a1 + 12);
    int v5 = *(_DWORD *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 36);
    v15[0] = v5;
    v15[1] = v3;
    int v16 = 0;
    int v6 = *(unsigned __int16 *)(a1 + 24);
    LOWORD(v16) = *(_WORD *)(a1 + 24);
    if ((v4 - 3) < 4 || v4 == 8)
    {
      int v8 = *(unsigned __int16 *)(a1 + 16);
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v14 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Src\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP12_04HandleGpsRefTime", 770);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      int v8 = 0xFFFF;
    }
    HIWORD(v16) = v8;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ASST:G RefTime OSTime,%u,TOW,%d,WeekNo,%d,RMS,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP12_04HandleGpsRefTime", v5, v3, v6, v8);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if ((GN_AGPS_Set_Ref_Time((uint64_t)v15) & 1) == 0 && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:G Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GncP12_04HandleGpsRefTime", 257);
      int v11 = 2;
LABEL_17:
      gnssOsa_PrintLog(__str, v11, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP12_04HandleGpsRefTime", 517);
    int v11 = 1;
    goto LABEL_17;
  }
  return 0;
}

uint64_t GncP12_02HandleGpsNavModel(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ASST_NAVM_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP12_02HandleGpsNavModel");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 69, "GncP12_02HandleGpsNavModel", 517);
    int v14 = 1;
LABEL_22:
    gnssOsa_PrintLog(__str, v14, 1, 0);
    return 0;
  }
  int v3 = *(char **)(a1 + 16);
  if (!v3)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v15 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 87, "GncP12_02HandleGpsNavModel", 513);
    int v14 = 2;
    goto LABEL_22;
  }
  if (!*(unsigned char *)(a1 + 24)) {
    goto LABEL_16;
  }
  unint64_t v4 = 0;
  unsigned int v5 = g_LbsOsaTrace_Config;
  int v6 = v3 + 38;
  do
  {
    memset(v24, 0, sizeof(v24));
    *(_OWORD *)&v22[1] = 0u;
    long long v23 = 0u;
    unsigned __int8 v17 = *(v6 - 38) + 1;
    unsigned __int8 v18 = *(v6 - 37);
    __int16 v19 = *((_WORD *)v6 - 18);
    __int16 v20 = *((_WORD *)v6 + 10);
    char v21 = *(v6 - 34);
    *(_WORD *)uint64_t v22 = *((_WORD *)v6 - 5);
    *(_WORD *)&v22[5] = *((_WORD *)v6 - 15);
    *(_WORD *)&double v22[7] = *((_WORD *)v6 + 9);
    *(_WORD *)&v22[9] = *((_WORD *)v6 - 16);
    *(_WORD *)&v22[11] = *((_WORD *)v6 - 4);
    *(_WORD *)&v22[13] = *(_WORD *)v6;
    *(_WORD *)&v22[15] = *((_WORD *)v6 + 17);
    LOWORD(v23) = *((_WORD *)v6 - 1);
    WORD1(v23) = *((_WORD *)v6 + 18);
    WORD2(v23) = *((_WORD *)v6 + 4);
    WORD3(v23) = *((_WORD *)v6 + 3);
    WORD4(v23) = *((_WORD *)v6 + 12);
    WORD5(v23) = *((_WORD *)v6 + 11);
    HIDWORD(v23) = *(_DWORD *)(v6 - 6);
    v24[0] = *(_DWORD *)(v6 + 2);
    *(void *)&long long v7 = *(void *)(v6 + 10);
    *((void *)&v7 + 1) = *(void *)(v6 + 26);
    *(_OWORD *)&v24[1] = v7;
    *(void *)&v24[5] = *(void *)(v6 + 38);
    v24[7] = 0;
    *(_DWORD *)((char *)&v24[7] + 3) = 0;
    if (v5 >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ASST:G Eph SvId,%d,CodeOnL2,%d,URA,%d,SVHealth,%d,FitIntFlag,%d,AODA,%d,L2PFlag,%d,TGD,%d,AF2,%d,Week,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP12_02HandleGpsNavModel", v17, v18, (char)v19, HIBYTE(v19), v20, HIBYTE(v20), v21, v22[0], v22[1], *(unsigned __int16 *)&v22[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ASST:G Eph TOC,%d,TOE,%d,IODC,%d,Af1,%d,dn,%d,IDot,%d,Crs,%d,Crc,%d,Cus,%d,Cuc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP12_02HandleGpsNavModel", *(unsigned __int16 *)&v22[5], *(unsigned __int16 *)&v22[7], *(unsigned __int16 *)&v22[9], *(__int16 *)&v22[11], *(__int16 *)&v22[13], *(__int16 *)&v22[15], (__int16)v23, SWORD1(v23), SWORD2(v23), SWORD3(v23));
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ASST:G Eph Cis,%d,Cic,%d,af0,%d,M0,%d,e,%d,APowHalf,%d,Omega0,%d,I0,%d,W,%d,OmegaDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP12_02HandleGpsNavModel", SWORD4(v23), SWORD5(v23), HIDWORD(v23), v24[0], v24[1], v24[2], v24[3], v24[4], v24[5], v24[6]);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
      }
    }
    char v11 = GN_AGPS_Set_Eph_El(&v17);
    unsigned int v5 = g_LbsOsaTrace_Config;
    if ((v11 & 1) == 0 && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:G EPH SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GncP12_02HandleGpsNavModel", 257, v17);
      gnssOsa_PrintLog(__str, 2, 1, 0);
      unsigned int v5 = g_LbsOsaTrace_Config;
    }
    ++v4;
    v6 += 84;
  }
  while (v4 < *(unsigned __int8 *)(a1 + 24));
  int v3 = *(char **)(a1 + 16);
  if (v3) {
LABEL_16:
  }
    free(v3);
  *(void *)(a1 + 16) = 0;
  return 0;
}

void GNS_AsstGpsNavModel(uint64_t a1, int a2, int a3, const void *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GNS_AsstGpsNavModel");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a3 && a4)
  {
    if ((a2 - 1) >= 2)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "GNS_AsstGpsNavModel", 515, a2);
        gnssOsa_PrintLog(__str, 2, 1, 0);
        if (g_LbsOsaTrace_Config >= 5) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v8 = gnssOsa_Calloc("GNS_AsstGpsNavModel", 390, 1, 0x20uLL);
      if (!v8)
      {
        if (g_LbsOsaTrace_Config < 5) {
          return;
        }
        goto LABEL_19;
      }
      uint64_t v9 = v8;
      *((_DWORD *)v8 + 3) = a2;
      *((unsigned char *)v8 + 24) = a3;
      uint64_t v10 = gnssOsa_Calloc("GNS_AsstGpsNavModel", 401, a3, 0x54uLL);
      v9[2] = v10;
      if (!v10)
      {
        free(v9);
        return;
      }
      memcpy_s("GNS_AsstGpsNavModel", 412, v10, 84 * a3, a4, (84 * a3));
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ASST_NAVM_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GNS_AsstGpsNavModel");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8658179, v9);
      if (g_LbsOsaTrace_Config >= 5)
      {
LABEL_19:
        bzero(__str, 0x3C6uLL);
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v14, "GNC", 68, "GNS_AsstGpsNavModel");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:NavModelElm NumSv,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GNS_AsstGpsNavModel", 513, a3);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5) {
      goto LABEL_19;
    }
  }
}

void GNS_AsstGpsRefTime(uint64_t a1, int a2, long long *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GNS_AsstGpsRefTime");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a3)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:RefTime\n");
    goto LABEL_12;
  }
  if ((a2 & 0xFFFFFFFE) != 4)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", v12);
LABEL_12:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config < 5) {
      return;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)a3 >= 0x240C8400u)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:GpsTow,%u\n", v11);
    goto LABEL_17;
  }
  if (*((unsigned __int16 *)a3 + 6) >= 0x2000u)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ASST:GpsWkNum,%u\n", v13);
LABEL_17:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config < 5) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v7 = (char *)gnssOsa_Calloc("GNS_AsstGpsRefTime", 493, 1, 0x28uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    long long v9 = *a3;
    *(void *)(v7 + 28) = *((void *)a3 + 2);
    *(_OWORD *)(v7 + 12) = v9;
    *((_DWORD *)v7 + 9) = a2;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ASST_RTIME_IND =>GNCP,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GNS_AsstGpsRefTime", *((_DWORD *)v8 + 9));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8657923, v8);
    if (g_LbsOsaTrace_Config >= 5)
    {
LABEL_18:
      bzero(__str, 0x3C6uLL);
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v6, "GNC", 68, "GNS_AsstGpsRefTime");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

BOOL G5K_ME_Poll_New_Meas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned char *a6)
{
  v61[1] = *(double *)MEMORY[0x263EF8340];
  v61[0] = 0.0;
  *a6 = 0;
  if (!*(unsigned char *)(a1 + 402)) {
    return 0;
  }
  uint64_t v12 = a1 + 28216;
  API_Get_UTC_Cor(1, v61);
  double v14 = -0.5;
  if (v61[0] > 0.0) {
    double v14 = 0.5;
  }
  double v15 = v61[0] + v14;
  if (v61[0] + v14 <= 2147483650.0)
  {
    if (v15 >= -2147483650.0) {
      int v16 = (int)v15;
    }
    else {
      LOBYTE(v16) = 0;
    }
  }
  else
  {
    LOBYTE(v16) = -1;
  }
  if (*(_DWORD *)a3 && *(_DWORD *)(a1 + 436) - *(_DWORD *)a3 < 0
    || *(unsigned char *)(a1 + 403) && *(_DWORD *)a4 && *(_DWORD *)(a1 + 520) - *(_DWORD *)a4 < 0
    || *(unsigned char *)(a1 + 407) && (int v18 = a5[3968]) != 0 && *(_DWORD *)v12 - v18 < 0
    || *(unsigned char *)(a1 + 411) && (int v19 = a5[3969]) != 0 && *(_DWORD *)(v12 + 4) - v19 < 0
    || *(unsigned char *)(a1 + 415) && (int v20 = a5[3970]) != 0 && *(_DWORD *)(v12 + 8) - v20 < 0
    || *(unsigned char *)(a1 + 419) && (int v21 = a5[3971]) != 0 && *(_DWORD *)(v12 + 12) - v21 < 0)
  {
    *(unsigned char *)(a1 + 403) = 0;
    *(unsigned char *)(a1 + 407) = 0;
    *(unsigned char *)(a1 + 411) = 0;
    *(unsigned char *)(a1 + 415) = 0;
    *(unsigned char *)(a1 + 419) = 0;
    *(unsigned char *)(a1 + 453) = 0;
    *(_DWORD *)(a1 + 472) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    *(_DWORD *)(a4 + 11820) = 0;
    *a6 = 1;
  }
  int v22 = *(_DWORD *)(a1 + 516);
  if (v22 && v22 == *(_DWORD *)(a1 + 436) && *(_DWORD *)(a1 + 448) > *(_DWORD *)(a2 + 1660))
  {
    EvCrt_d("ME_Poll_New: Invalid TTick", v22);
  }
  else
  {
    long long v23 = (_WORD *)(a4 + 11816);
    *(_DWORD *)(a1 + 516) = 0;
    uint64_t v24 = *(unsigned int *)(a1 + 520);
    if (*(unsigned char *)(a1 + 403) && v24 == *(_DWORD *)(a1 + 436))
    {
      memcpy((void *)(a4 + 7208), (const void *)(a1 + 7736), 0x1200uLL);
      memcpy((void *)(a4 + 40), (const void *)(a1 + 568), 0x1C00uLL);
      *(void *)a4 = *(void *)(a1 + 520);
      *(void *)(a4 + 8) = *(void *)(a1 + 528);
      *(void *)(a4 + 16) = *(void *)(a1 + 536);
      *(void *)(a4 + 24) = *(void *)(a1 + 544);
      *(_WORD *)(a4 + 32) = *(_WORD *)(a1 + 552);
      *(_DWORD *)(a4 + 34) = *(_DWORD *)(a1 + 556);
      *(unsigned char *)(a4 + 38) = *(unsigned char *)(a1 + 560);
      *long long v23 = *(_WORD *)(v12 + 16);
      *(_WORD *)(a2 + 2028) = *(_WORD *)(a1 + 554);
      if (*(_DWORD *)(a1 + 448)) {
        ++*(_DWORD *)(a4 + 11820);
      }
      uint64_t v26 = *(unsigned __int8 *)(a1 + 404);
      uint64_t v27 = *(unsigned __int8 *)(a1 + 405);
      uint64_t v28 = (v26 - v27);
      if ((int)v28 < 1)
      {
        if ((v28 & 0x80000000) != 0)
        {
          uint64_t v55 = (v28 + 128);
          unsigned __int16 v56 = *(_WORD *)(a1 + 400) + v55;
          *(_WORD *)(a1 + 400) = v56;
          unsigned __int16 v57 = *(_WORD *)(a1 + 396) + 1;
          *(_WORD *)(a1 + 396) = v57;
          EvLog_nd("G5K_ME_Poll_New_Meas: Missed {M & {T", 3, v25, v55, v56, v57);
          bzero((void *)(a4 + 40), 0x1C00uLL);
          uint64_t v58 = a4 + 7208;
          uint64_t v59 = -4608;
          do
          {
            uint64_t v60 = v58 + v59;
            *(_OWORD *)(v60 + 4624) = 0uLL;
            *(_OWORD *)(v60 + 4608) = 0uLL;
            *(unsigned char *)(v58 + v59 + 4640) = 0;
            v59 += 36;
          }
          while (v59);
          EvCrt_v("ME_Poll_New: Flushing due to missed {T");
        }
      }
      else
      {
        unsigned __int16 v29 = *(_WORD *)(a1 + 400) + v26 - v27;
        *(_WORD *)(a1 + 400) = v29;
        EvCrt_nd("G5K_ME_Poll_New_Meas: Missed {M", 4, v25, v28, v29, v26, v27);
      }
    }
    else
    {
      if (v24)
      {
        unsigned __int16 v30 = *(_WORD *)(a1 + 398) + 1;
        *(_WORD *)(a1 + 398) = v30;
        EvLog_nd("G5K_ME_Poll_New_Meas: Missed {H", 5, v13, v30, *(unsigned __int8 *)(a1 + 405), *(unsigned __int16 *)(a1 + 400), v24, *(unsigned int *)(a1 + 436));
      }
      *(_DWORD *)a4 = *(_DWORD *)(a1 + 436);
      *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 456);
      *(void *)(a4 + 8) = *(void *)(a1 + 464);
      uint64_t v31 = a4 + 7208;
      uint64_t v32 = -4608;
      do
      {
        uint64_t v33 = v31 + v32;
        *(_OWORD *)(v33 + 4624) = 0uLL;
        *(_OWORD *)(v33 + 4608) = 0uLL;
        *(unsigned char *)(v31 + v32 + 4640) = 0;
        v32 += 36;
      }
      while (v32);
      *(unsigned char *)long long v23 = 0;
      *(unsigned char *)(a4 + 11817) = v16;
    }
    if (*(unsigned char *)(a1 + 407) && *(_DWORD *)v12 == *(_DWORD *)(a1 + 436)
      || *(unsigned char *)(a1 + 411) && *(_DWORD *)(v12 + 4) == *(_DWORD *)(a1 + 436)
      || *(unsigned char *)(a1 + 415) && *(_DWORD *)(v12 + 8) == *(_DWORD *)(a1 + 436)
      || *(unsigned char *)(a1 + 419) && *(_DWORD *)(v12 + 12) == *(_DWORD *)(a1 + 436))
    {
      memcpy(a5, (const void *)(a1 + 12344), 0x3E00uLL);
      if (*(unsigned char *)(a1 + 407))
      {
        a5[3968] = *(_DWORD *)v12;
        uint64_t v35 = *(unsigned __int8 *)(a1 + 408);
        uint64_t v36 = *(unsigned __int8 *)(a1 + 409);
        uint64_t v37 = (v35 - v36);
        if ((int)v37 >= 1)
        {
          unsigned __int8 v38 = *(unsigned char *)(a1 + 410) + v35 - v36;
          *(unsigned char *)(a1 + 410) = v38;
          EvCrt_nd("G5K_ME_Poll_New_Meas: Missed {G", 4, v34, v37, v38, v35, v36);
        }
      }
      if (*(unsigned char *)(a1 + 411))
      {
        a5[3969] = *(_DWORD *)(v12 + 4);
        uint64_t v39 = *(unsigned __int8 *)(a1 + 412);
        uint64_t v40 = *(unsigned __int8 *)(a1 + 413);
        uint64_t v41 = (v39 - v40);
        if ((int)v41 >= 1)
        {
          unsigned __int8 v42 = *(unsigned char *)(a1 + 414) + v39 - v40;
          *(unsigned char *)(a1 + 414) = v42;
          EvCrt_nd("G5K_ME_Poll_New_Meas: Missed {F", 4, v34, v41, v42, v39, v40);
        }
      }
      if (*(unsigned char *)(a1 + 415))
      {
        a5[3970] = *(_DWORD *)(v12 + 8);
        uint64_t v43 = *(unsigned __int8 *)(a1 + 416);
        uint64_t v44 = *(unsigned __int8 *)(a1 + 417);
        uint64_t v45 = (v43 - v44);
        if ((int)v45 >= 1)
        {
          unsigned __int8 v46 = *(unsigned char *)(a1 + 418) + v43 - v44;
          *(unsigned char *)(a1 + 418) = v46;
          EvCrt_nd("G5K_ME_Poll_New_Meas: Missed {C", 4, v34, v45, v46, v43, v44);
        }
      }
      if (*(unsigned char *)(a1 + 419))
      {
        a5[3971] = *(_DWORD *)(v12 + 12);
        uint64_t v47 = *(unsigned __int8 *)(a1 + 420);
        uint64_t v48 = *(unsigned __int8 *)(a1 + 421);
        uint64_t v49 = (v47 - v48);
        if ((int)v49 >= 1)
        {
          unsigned __int8 v50 = *(unsigned char *)(a1 + 422) + v47 - v48;
          *(unsigned char *)(a1 + 422) = v50;
          EvCrt_nd("G5K_ME_Poll_New_Meas: Missed {I", 4, v34, v49, v50, v47, v48);
        }
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 436);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 456);
    *(void *)(a3 + 24) = *(void *)(a1 + 464);
    *(_DWORD *)(a2 + 252) = *(_DWORD *)(a1 + 472);
    *(unsigned char *)(a2 + 20) = *(unsigned __int8 *)(a1 + 497) == *(unsigned __int8 *)(a2 + 16);
  }
  *(_WORD *)(a1 + 411) = 0;
  *(unsigned char *)(a1 + 415) = 0;
  *(unsigned char *)(a1 + 419) = 0;
  *(unsigned char *)(a1 + 413) = 0;
  *(void *)(a1 + 402) = 0;
  bzero((void *)(a1 + 568), 0x1C00uLL);
  unsigned int v51 = (_OWORD *)(a1 + 12344);
  uint64_t v52 = a1 + 7736;
  uint64_t v53 = -4608;
  do
  {
    uint64_t v54 = v52 + v53;
    *(_OWORD *)(v54 + 4624) = 0uLL;
    *(_OWORD *)(v54 + 4608) = 0uLL;
    *(unsigned char *)(v52 + v53 + 4640) = 0;
    *(_OWORD *)((char *)v51 + 105) = 0uLL;
    v51[5] = 0uLL;
    v51[6] = 0uLL;
    v51[3] = 0uLL;
    v51[4] = 0uLL;
    v51[1] = 0uLL;
    v51[2] = 0uLL;
    *unsigned int v51 = 0uLL;
    unsigned int v51 = (_OWORD *)((char *)v51 + 124);
    v53 += 36;
  }
  while (v53);
  *(unsigned char *)(v12 + 16) = 0;
  *(unsigned char *)(v12 + 17) = v16;
  *(_OWORD *)(a1 + 28216) = 0u;
  return *(_DWORD *)(a1 + 516) == 0;
}

void *G5K_ME_Flush_Data(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(_WORD *)(v1 + 411) = 0;
  *(unsigned char *)(v1 + 415) = 0;
  *(unsigned char *)(v1 + 419) = 0;
  *(unsigned char *)(v1 + 508) = 0;
  *(unsigned char *)(v1 + 413) = 0;
  *(_WORD *)(v1 + 416) = 0;
  *(_WORD *)(v1 + 420) = 0;
  *(_DWORD *)(v1 + 504) = 0;
  *(unsigned char *)(v1 + 453) = 0;
  *(_DWORD *)(v1 + 472) = 0;
  *(_DWORD *)(v1 + 28236) = 0;
  *(void *)(v1 + 402) = 0;
  int v2 = *(_DWORD *)(v1 + 512);
  uint64_t v3 = *(void *)(v1 + 394);
  char v4 = *(unsigned char *)(v1 + 410);
  char v5 = *(unsigned char *)(v1 + 414);
  char v6 = *(unsigned char *)(v1 + 418);
  char v7 = *(unsigned char *)(v1 + 422);
  bzero(__src, 0x6E50uLL);
  uint64_t v8 = 142;
  do
  {
    long long v9 = &__src[v8];
    *(void *)long long v9 = 0;
    *((_WORD *)v9 + 4) = 0;
    *(void *)(v9 + 3) = 0;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 4) = 0;
    v8 += 14;
    *(void *)((char *)v9 + 38) = 0;
  }
  while (v9 + 14 != &__src[1934]);
  uint64_t v10 = 0x3FFFFFFFFFFFFB80;
  do
  {
    unint64_t v11 = &__src[v10 + 3086];
    *((unsigned char *)v11 + 32) = 0;
    *(_OWORD *)unint64_t v11 = 0uLL;
    *((_OWORD *)v11 + 1) = 0uLL;
    v10 += 9;
  }
  while (v10 * 4);
  uint64_t v12 = 0x3FFFFFFFFFFFF080;
  do
  {
    uint64_t v13 = &__src[v12 + 7054];
    *(_OWORD *)((char *)v13 + 105) = 0uLL;
    unsigned __int8 v13[5] = 0uLL;
    v13[6] = 0uLL;
    v13[3] = 0uLL;
    double v13[4] = 0uLL;
    v13[1] = 0uLL;
    void v13[2] = 0uLL;
    _OWORD *v13 = 0uLL;
    v12 += 31;
  }
  while (v12 * 4);
  *(void *)&__src[7059] = 0;
  __src[7061] = 0;
  memset(&__src[7054], 0, 18);
  __n128 result = memcpy((void *)v1, __src, 0x6E58uLL);
  *(void *)(v1 + 384) = v1;
  *(_DWORD *)(v1 + 512) = v2;
  *(void *)(v1 + 394) = v3;
  *(unsigned char *)(v1 + 410) = v4;
  *(unsigned char *)(v1 + 414) = v5;
  *(unsigned char *)(v1 + 418) = v6;
  *(unsigned char *)(v1 + 422) = v7;
  return result;
}

void Gnm35_15SendDbgCfg(void)
{
  void v8[5] = *MEMORY[0x263EF8340];
  *(_OWORD *)uint64_t v8 = xmmword_263D83830;
  *(_OWORD *)((char *)&v8[1] + 3) = *(long long *)((char *)&xmmword_263D83830 + 11);
  *(_OWORD *)char v7 = xmmword_263D8384B;
  *(_OWORD *)&v7[11] = *(long long *)((char *)&xmmword_263D8384B + 11);
  if (g_LbsOsaTrace_Config >= 6uLL) {
    unsigned __int8 v0 = 0;
  }
  else {
    unsigned __int8 v0 = 0x40403020100uLL >> (8 * g_LbsOsaTrace_Config);
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)gp_Logger + 72))(gp_Logger) & 4) != 0) {
    char v1 = 3;
  }
  else {
    char v1 = 1;
  }
  BYTE4(v8[2]) = v1;
  v7[20] = v1;
  BYTE5(v8[2]) = v0;
  LOWORD(v8[3]) = vaddvq_s16((int16x8_t)vpaddlq_u8(*(uint8x16_t *)&v8[1]));
  Hal00_06ReadBufNtf(0x1BuLL, (unsigned __int8 *)v8);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (((*(uint64_t (**)(uint64_t))(*(void *)gp_Logger + 72))(gp_Logger) & 4) != 0) {
      uint64_t v3 = "EN";
    }
    else {
      uint64_t v3 = "DIS";
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GCPU DEBUG CFG, mixedmode logging %s,loglevel %d\n", v2, "GNM", 73, "Gnm35_15SendDbgCfg", v3, v0);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  v7[21] = v0;
  *(_WORD *)&v7[24] = vaddvq_s16((int16x8_t)vpaddlq_u8(*(uint8x16_t *)&v7[8]));
  Hal00_06ReadBufNtf(0x1BuLL, v7);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (((*(uint64_t (**)(uint64_t))(*(void *)gp_Logger + 72))(gp_Logger) & 4) != 0) {
      char v5 = "EN";
    }
    else {
      char v5 = "DIS";
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME DEBUG CFG, mixedmode logging %s,loglevel %d\n", v4, "GNM", 73, "Gnm35_15SendDbgCfg", v5, v0);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t Gnm35_zxFirmwareDebugConf(unsigned __int8 *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a1[8] == 32)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (a1[4] == 80) {
        uint64_t v3 = "GNSSCPCFG";
      }
      else {
        uint64_t v3 = "GNSSMECFG";
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s Success\n", (unint64_t)v2, "GNM", 73, "Gnm35_zxFirmwareDebugConf", v3);
      int v4 = 4;
LABEL_11:
      gnssOsa_PrintLog(__str, v4, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    char v6 = "GNSSMECFG";
    if (a1[4] == 80) {
      char v6 = "GNSSCPCFG";
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx %s Status,%u\n", (unint64_t)v5, "GNM", 87, "Gnm35_zxFirmwareDebugConf", 257, v6, a1[8]);
    int v4 = 2;
    goto LABEL_11;
  }
  return 0;
}

void Gnm35_EnableBCTInTimeMarkMessage(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *(_OWORD *)double v2 = __const__Z32Gnm35_EnableBCTInTimeMarkMessagev_a_ConfigurationCommand;
  *(_OWORD *)&v2[12] = *(long long *)((char *)&__const__Z32Gnm35_EnableBCTInTimeMarkMessagev_a_ConfigurationCommand + 12);
  Hal00_06ReadBufNtf(0x1CuLL, v2);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: BCT-TimeMark enabled\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm35_EnableBCTInTimeMarkMessage");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

void gncP01_01DeInitPeUpdate(void)
{
  if (qword_26A9CBC28) {
    free((void *)qword_26A9CBC28);
  }
  qword_26A9CBC28 = 0;
}

uint64_t GncP01_32ExecutePE(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  v36[271] = *MEMORY[0x263EF8340];
  GN_GPS_Update();
  memset_s(__s, 0x18D0uLL, 0, 0x18D0uLL);
  uint64_t result = 0;
  if (*(_DWORD *)qword_26AA2DEE8) {
    BOOL v2 = *(_DWORD *)qword_26AA2DEE8 == Last_Published_Nav_Data_TTag;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    memcpy(__s, (const void *)qword_26AA2DEE8, sizeof(__s));
    Last_Published_Nav_Data_TTag = __s[0];
    if (*(_DWORD *)(*(void *)(p_api + 80) + 32) != __s[0])
    {
      memcpy(__s, (const void *)qword_26AA2DEE8, sizeof(__s));
      Last_Published_Nav_Data_TTag = __s[0];
    }
    if (gnssOsa_MacEnterCriticalSection("GncP01_31Update", 336, &g_PosUpdateCritic))
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(v34, 0x3C6uLL);
        unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v4 = 1550;
LABEL_36:
        snprintf((char *)v34, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v3, "GNC", 69, "GncP01_31Update", v4);
        gnssOsa_PrintLog((char *)v34, 1, 1, 0);
        return 0;
      }
      return 0;
    }
    unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    LOWORD(v34[0]) = 0;
    BYTE2(v34[0]) = 0;
    HIDWORD(v34[0]) = 0;
    v34[795] = 0;
    memset_s(v34, 0x18E0uLL, 0, 0x18E0uLL);
    HIDWORD(v34[0]) = v5;
    LOBYTE(v34[0]) = 0;
    if (qword_26AA2DEE8 && *(_DWORD *)qword_26AA2DEE8)
    {
      memcpy(&v34[1], (const void *)qword_26AA2DEE8, 0x18D0uLL);
      LOBYTE(v34[0]) = WORD1(v34[3]) != 0;
      BYTE1(v34[0]) = *(_DWORD *)(*(void *)(p_api + 56) + 8972) != 0;
    }
    uint64_t v6 = 0;
    char v7 = BYTE1(v34[42]);
    LOBYTE(v36[0]) = 0;
    *(_DWORD *)((char *)v36 + 2) = 0;
    memset(&v36[1], 0, 27);
    char v8 = 1;
    while (1)
    {
      char v9 = v8;
      if (!GncP04_08GetNextSessInstn(v6, v36, 1u)) {
        break;
      }
      char v8 = 0;
      uint64_t v10 = (char *)&v34[795] + 4 * v6;
      v10[1] = v36[0];
      *((_WORD *)v10 + 1) = WORD1(v36[0]);
      *uint64_t v10 = v7;
      uint64_t v6 = 1;
      if ((v9 & 1) == 0)
      {
        LOBYTE(v6) = 2;
        break;
      }
    }
    BYTE2(v34[0]) = v6;
    if (LOBYTE(v34[0])) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = g_LbsOsaTrace_Config >= 2;
    }
    if (v11)
    {
      bzero(v36, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf((char *)v36, 0x3C5uLL, "%10u %s%c %s: No Valid Nav\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GncP01_18UpdateNavData");
      gnssOsa_PrintLog((char *)v36, 2, 1, 0);
    }
    memcpy(g_GncP_PEUpdate, v34, 0x18E0uLL);
    uint64_t v13 = 0;
    char v14 = 1;
    do
    {
      while (1)
      {
        char v15 = v14;
        if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v13 + 8) == 1) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
        if ((v15 & 1) == 0)
        {
          unsigned __int8 v17 = (void *)qword_26A9CBC28;
LABEL_30:
          if (v17) {
            free(v17);
          }
          qword_26A9CBC28 = 0;
          goto LABEL_33;
        }
      }
      char v14 = 0;
      char v16 = *((unsigned char *)&g_GncPCntxtInfo + 36 * v13 + 9);
      uint64_t v13 = 1;
    }
    while ((v15 & ((v16 & 2) == 0)) != 0);
    unsigned __int8 v17 = (void *)qword_26A9CBC28;
    if ((v16 & 2) == 0) {
      goto LABEL_30;
    }
    if (qword_26A9CBC28
      || (unsigned __int8 v17 = gnssOsa_Calloc("GncP01_28UpdateRawMeas", 301, 1, 0x271A0uLL), (qword_26A9CBC28 = (uint64_t)v17) != 0))
    {
      int v24 = *(_DWORD *)(*(void *)(p_api + 80) + 32);
      if (v24) {
        BOOL v25 = v24 == Last_Published_Raw_Meas_TTag;
      }
      else {
        BOOL v25 = 1;
      }
      char v26 = !v25;
      if (!v25)
      {
        API_Get_Raw_Meas_Data(v17);
        Last_Published_Raw_Meas_TTag = v24;
      }
      byte_26A9CBC20 = v26;
      if (g_LbsOsaTrace_Config >= 5)
      {
        uint64_t v27 = qword_26A9CBC28 + 160080;
        bzero(v34, 0x3C6uLL);
        uint64_t v28 = mach_continuous_time();
        snprintf((char *)v34, 0x3C5uLL, "%10u %s%c %s: Klobuchar GPS_secs,%10d,alpha,%10.3e,%10.3e,%10.3e,%10.3e,beta,%9.1f,%9.1f,%9.1f,%9.1f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 68, "GncP01_28UpdateRawMeas", *(_DWORD *)v27, *(double *)(v27 + 8), *(double *)(v27 + 16), *(double *)(v27 + 24), *(double *)(v27 + 32), *(double *)(v27 + 40), *(double *)(v27 + 48), *(double *)(v27 + 56), *(double *)(v27 + 64));
        gnssOsa_PrintLog((char *)v34, 5, 1, 0);
      }
    }
LABEL_33:
    if (gnssOsa_MacExitCriticalSection("GncP01_31Update", 347, &g_PosUpdateCritic))
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(v34, 0x3C6uLL);
        unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v4 = 1551;
        goto LABEL_36;
      }
      return 0;
    }
    g_MEResetInfo = 0;
    GncP03_10SndNewUpdtSM();
    int v18 = (unsigned __int16)word_26A9A1988;
    if (word_26A9A1988)
    {
      if (qword_26AA2DEE8)
      {
        if (*(_DWORD *)qword_26AA2DEE8)
        {
          memcpy(v34, (const void *)qword_26AA2DEE8, 0x18D0uLL);
          int v19 = gnssOsa_Calloc("GncP01_51SndNmeaUpdt", 498, 1, 0x18uLL);
          if (v19)
          {
            int v20 = v19;
            int v21 = (char *)gnssOsa_Calloc("GncP01_51SndNmeaUpdt", 504, 20480, 1uLL);
            v20[2] = v21;
            if (v21)
            {
              int v22 = v21;
              if ((v18 & 0x200) != 0 && qword_26AA2DEF0 && *(_DWORD *)qword_26AA2DEF0)
              {
                long long v23 = v36;
                memcpy(v36, (const void *)qword_26AA2DEF0, 0x878uLL);
              }
              else
              {
                long long v23 = 0;
              }
              int v29 = GN_GPS_Encode_NMEA(0x5000u, v22, v18, v34, v23);
              *((_WORD *)v20 + 6) = v29;
              if (v29)
              {
                if (g_LbsOsaTrace_Config >= 4)
                {
                  bzero(v35, 0x3C6uLL);
                  uint64_t v30 = mach_continuous_time();
                  snprintf(v35, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_IND =>GNM Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNC", 73, "GncP01_51SndNmeaUpdt", *((unsigned __int16 *)v20 + 6));
                  gnssOsa_PrintLog(v35, 4, 1, 0);
                }
                AgpsSendFsmMsg(132, 128, 8653571, v20);
                goto LABEL_70;
              }
              if (g_LbsOsaTrace_Config >= 2)
              {
                bzero(v35, 0x3C6uLL);
                uint64_t v31 = mach_continuous_time();
                snprintf(v35, 0x3C5uLL, "%10u %s%c %s: Encode Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "GncP01_51SndNmeaUpdt");
                gnssOsa_PrintLog(v35, 2, 1, 0);
              }
              uint64_t v32 = (void *)v20[2];
              if (v32) {
                free(v32);
              }
            }
            free(v20);
          }
        }
      }
    }
LABEL_70:
    GncP24_55UpdateBceOrbitAssistance(0);
    return 1;
  }
  return result;
}

uint64_t GncP01_34HandleRespSentInd(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_SESSION_RESP_SENT_IND ID,%u,Type,%u,OSTtag,%u,BBTtag,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP01_34HandleRespSentInd", *(unsigned __int16 *)(a1 + 14), *(unsigned __int8 *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    int v3 = *(unsigned __int8 *)(a1 + 12);
    if ((v3 | 2) == 3) {
      GN_AGPS_Mark_Response_Sent(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    }
    else {
      GN_GPS_Mark_Single_Pos_Used(v3 != 2, *(unsigned __int16 *)(a1 + 14), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP01_34HandleRespSentInd", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void *GncP01_50GetNavData(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (g_GncP_PEUpdate[0])
  {
    *(_DWORD *)a1 = HIDWORD(qword_26A9CA348);
    if (GncP11_30CheckUtcValidity((unsigned __int16)word_26A9CA35A, (unsigned __int16)word_26A9CA35C, (unsigned __int16)word_26A9CA35E, (unsigned __int16)word_26A9CA360, (unsigned __int16)word_26A9CA362, (unsigned __int16)word_26A9CA364, (unsigned __int16)word_26A9CA366))
    {
      *(void *)(a1 + 8) = qword_26A9CA348;
      *(_WORD *)(a1 + 16) = *(_WORD *)&byte_26A9CA358;
      *(unsigned char *)(a1 + 18) = byte_26A9CA341;
      *(void *)(a1 + 20) = *(void *)&word_26A9CA35A;
      *(_WORD *)(a1 + 28) = word_26A9CA362;
      *(_DWORD *)(a1 + 30) = *(_DWORD *)&word_26A9CA364;
      *(_WORD *)(a1 + 36) = word_26A9CA368;
      *(void *)(a1 + 40) = unk_26A9CA350;
      *(void *)(a1 + 48) = qword_26A9CA3E8;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)&qword_26A9CA370;
      *(void *)(a1 + 72) = unk_26A9CA380;
      *(int8x16_t *)(a1 + 80) = vextq_s8(qword_26A9CA388[0], qword_26A9CA388[0], 8uLL);
      *(_OWORD *)(a1 + 96) = unk_26A9CA398;
      *(_OWORD *)(a1 + 112) = unk_26A9CA3A8;
      *(_OWORD *)(a1 + 128) = unk_26A9CA3B8;
      *(_OWORD *)(a1 + 144) = unk_26A9CA3C8;
      *(_OWORD *)(a1 + 160) = unk_26A9CA3D8;
      *(_OWORD *)(a1 + 176) = unk_26A9CA3F0;
      *(_OWORD *)(a1 + 192) = unk_26A9CA400;
      *(_OWORD *)(a1 + 208) = unk_26A9CA410;
      *(_OWORD *)(a1 + 224) = unk_26A9CA420;
      *(_OWORD *)(a1 + 240) = unk_26A9CA430;
      *(_OWORD *)(a1 + 256) = unk_26A9CA440;
      *(void *)(a1 + 296) = qword_26A9CA450;
      *(_OWORD *)(a1 + 272) = xmmword_26A9CA458;
      *(void *)(a1 + 288) = qword_26A9CA468;
      *(_DWORD *)(a1 + 312) = dword_26A9CA470 & 0x3373F;
      switch(dword_26A9CA478)
      {
        case 0:
          *(unsigned char *)(a1 + 304) = 0;
          break;
        case 1:
          char v2 = 1;
          goto LABEL_13;
        case 2:
        case 3:
          char v2 = 2;
          goto LABEL_13;
        case 4:
        case 5:
          char v2 = 3;
LABEL_13:
          *(unsigned char *)(a1 + 304) = v2;
          break;
        default:
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v4 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FixType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP01_14PopulateNavDataContent", 770, dword_26A9CA478);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          break;
      }
      *(_WORD *)(a1 + 305) = unk_26A9CA491;
      *(unsigned char *)(a1 + 307) = byte_26A9CA490;
      *(unsigned char *)(a1 + 308) = GncP11_23ConvertUsrState(dword_26A9CA474);
      *(unsigned char *)(a1 + 309) = GncP11_24ConvertGnssContent(dword_26A9CA47C);
      *(unsigned char *)(a1 + 320) = GncP11_25ConvertReliab(dword_26A9CA480);
      *(unsigned char *)(a1 + 322) = GncP11_32ConvertEstimatedTech(dword_26A9CA484);
      *(_DWORD *)(a1 + 316) = dword_26A9CA48C & 0x7707FFFF;
      *(_WORD *)(a1 + 323) = unk_26A9CA493;
      *(unsigned char *)(a1 + 321) = GncP11_25ConvertReliab(dword_26A9CA488);
      if (*(unsigned char *)(a1 + 323))
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0x558u;
        uint64_t v7 = 0xA48u;
        while (1)
        {
          char v8 = &g_GncP_PEUpdate[4 * v5];
          uint64_t v9 = a1 + v5;
          *(unsigned char *)(a1 + v5 + 325) = GncP11_01ConvertGnssID(*((_DWORD *)v8 + 86));
          int v10 = GncP11_05ConvertGnssSignalID(*((unsigned int *)v8 + 214));
          uint64_t v11 = a1 + 4 * v5;
          *(_DWORD *)(v11 + 456) = v10;
          *(unsigned char *)(v9 + 1352) = g_GncP_PEUpdate[v5 + 1752];
          *(unsigned char *)(v9 + 1480) = g_GncP_PEUpdate[v5 + 1880];
          uint64_t v12 = &g_GncP_PEUpdate[8 * v5];
          *(void *)(a1 + 8 * v5 + 1608) = *((void *)v12 + 251);
          uint64_t v13 = (void *)(a1 + v7);
          void *v13 = *(void *)&g_GncP_PEUpdate[v7 + 400];
          v13[128] = *(void *)&g_GncP_PEUpdate[v7 + 1424];
          unsigned __int8 v13[256] = *(void *)&g_GncP_PEUpdate[v7 + 2448];
          unint64_t v14 = a1 + 3656 + v5;
          *(unsigned char *)(v14 + 2048) = g_GncP_PEUpdate[v5 + 6104];
          *(unsigned char *)(v14 + 2176) = g_GncP_PEUpdate[v5 + 6232];
          uint64_t v15 = a1 + v6 - 400;
          int v16 = (*(unsigned __int8 *)(a1 + v6 - 398) << 16) & 0xE00000 | ((g_GncP_PEUpdate[v6 + 2] & 0x1F) << 16);
          *(_WORD *)uint64_t v15 = *(_WORD *)&g_GncP_PEUpdate[v6];
          *(unsigned char *)(v15 + 2) = BYTE2(v16);
          if (*(unsigned char *)(a1 + v5 + 325)) {
            break;
          }
          if (g_LbsOsaTrace_Config >= 2) {
            goto LABEL_19;
          }
LABEL_20:
          if ((++v5 & 0x80) == 0)
          {
            v6 += 3;
            v7 += 8;
            if (v5 < *(unsigned __int8 *)(a1 + 323)) {
              continue;
            }
          }
          goto LABEL_25;
        }
        if (*(_DWORD *)(v11 + 456) || g_LbsOsaTrace_Config <= 1) {
          goto LABEL_20;
        }
LABEL_19:
        bzero(__str, 0x3C6uLL);
        uint64_t v17 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ConstID,%u,SVId,%u,SigID,%u,FreqCh,%u,SNR,%.2f,Used,%u,Conf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 87, "GncP01_14PopulateNavDataContent", 770, *((_DWORD *)v8 + 86), g_GncP_PEUpdate[v5 + 1752], *((_DWORD *)v8 + 214), g_GncP_PEUpdate[v5 + 1880], *((double *)v12 + 251), g_GncP_PEUpdate[v5 + 6104], g_GncP_PEUpdate[v5 + 6232]);
        gnssOsa_PrintLog(__str, 2, 1, 0);
        goto LABEL_20;
      }
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid UTC Y,%u,M,%u,D,%u,H,%u,M,%u,S,%u,MS,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP01_14PopulateNavDataContent", 770, (unsigned __int16)word_26A9CA35A, (unsigned __int16)word_26A9CA35C, (unsigned __int16)word_26A9CA35E, (unsigned __int16)word_26A9CA360, (unsigned __int16)word_26A9CA362, (unsigned __int16)word_26A9CA364, (unsigned __int16)word_26A9CA366);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  else
  {
    *(_DWORD *)a1 = dword_26A9CA344;
  }
LABEL_25:
  uint64_t result = memcpy_s("GncP01_50GetNavData", 472, (void *)(a1 + 5960), 8u, &byte_26A9CA342 + 6358, 8uLL);
  *(unsigned char *)(a1 + 5968) = byte_26A9CA342;
  return result;
}

void GncP_GetNavData(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetNavData", 555, &g_PosUpdateCritic))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v3 = 1550;
    goto LABEL_7;
  }
  GncP01_50GetNavData(a1);
  if (gnssOsa_MacExitCriticalSection("GncP_GetNavData", 563, &g_PosUpdateCritic) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v3 = 1551;
LABEL_7:
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v2, "GNC", 69, "GncP_GetNavData", v3);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t GncP_GetLatestUpdtOsTime(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetLatestUpdtOsTime", 575, &g_PosUpdateCritic))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v0 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 69, "GncP_GetLatestUpdtOsTime", 1550);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  else
  {
    unint64_t v2 = &dword_26A9CA344;
    if (g_GncP_PEUpdate) {
      unint64_t v2 = (int *)&qword_26A9CA348 + 1;
    }
    uint64_t v1 = *v2;
    if (gnssOsa_MacExitCriticalSection("GncP_GetLatestUpdtOsTime", 590, &g_PosUpdateCritic)
      && g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP_GetLatestUpdtOsTime", 1551);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  return v1;
}

uint64_t GncP_GetDetailedMeasData(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("GncP_GetDetailedMeasData", 605, &g_PosUpdateCritic))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncP_GetDetailedMeasData", 1550);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  else
  {
    if (byte_26A9CBC20) {
      BOOL v4 = qword_26A9CBC28 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = GncP27_30PopulateRawMeas(qword_26A9CBC28, a1);
    }
    if (gnssOsa_MacExitCriticalSection("GncP_GetDetailedMeasData", 617, &g_PosUpdateCritic)
      && g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP_GetDetailedMeasData", 1551);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  return v3;
}

uint64_t NK_Comp_ith_DO_Res(uint64_t result, double *a2, uint64_t a3, uint64_t a4, double *a5, double a6)
{
  *(double *)(a4 + 8 * result + 64160) = *(double *)(a3 + 40) * a2[1]
                                                       + *(double *)(a3 + 32) * *a2
                                                       + *(double *)(a3 + 48) * a2[2]
                                                       - *(double *)(a3 + 64) * 299792458.0;
  *a5 = (*(double *)(a3 + 40) - *(double *)(a4 + 1592)) * a2[1]
      + (*(double *)(a3 + 32) - *(double *)(a4 + 1584)) * *a2
      + (*(double *)(a3 + 48) - *(double *)(a4 + 1600)) * a2[2]
      + (*(double *)(a4 + 1664) - *(double *)(a3 + 64)) * 299792458.0;
  double v6 = *(double *)(a3 + 72) * dbl_263D83890[*(_DWORD *)(a3 + 120) == 1];
  *(double *)(a4 + 21656 + 8 * result + 4280) = v6;
  uint64_t v7 = a4 + 21656 + result;
  *(unsigned char *)(v7 + 184) = 1;
  ++*(unsigned char *)(a4 + 21658);
  int v8 = *(unsigned __int8 *)(v7 + 56);
  if (v8 || *(unsigned char *)(a4 + result + 36616))
  {
    double v9 = *a5 + a6;
    uint64_t v10 = a4 + 21656 + 8 * result;
    *(double *)(v10 + 5304) = v9;
    double v11 = *(double *)(a4 + 21656 + 24 * result + 1208)
        + *(double *)(a4 + 21656 + 24 * result + 1216);
    if (*(unsigned char *)(a4 + result + 2528))
    {
      uint64_t v12 = a4 + 8 * result;
      double v9 = v9 - *(double *)(v12 + 4704);
      *(double *)(v10 + 5304) = v9;
      double v6 = *(double *)(v12 + 5728);
    }
    *(double *)(v10 + 10680) = v11 + v6;
    *(double *)(a4 + 8 * result + 29008) = v9;
    if (v8)
    {
      if (fabs(v9) < 6000.0)
      {
        uint64_t v13 = a4 + result;
        *(unsigned char *)(v13 + 21968) = 1;
        ++*(unsigned char *)(a4 + 21659);
        *(unsigned char *)(v13 + 63776) = 1;
      }
    }
  }
  return result;
}

void DD_Assist_BDS_Data(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v83 = (uint64_t)a3 + 47436;
  uint64_t v7 = a3 + 4386;
  int v8 = a1 - 241;
  int v86 = a1 - 241;
  int v87 = a1;
  do
  {
    if (!*(unsigned char *)(a3[3182] + v6) || (v8 - LODWORD(a3[19 * v6 + 3189])) <= 0xFFFFF806)
    {
      memset(v88, 0, 18);
      memset(&v88[20], 0, 78);
      memset(&v88[100], 0, 48);
      BOOL BDS_Eph = Core_Get_BDS_Eph((v6 + 1), v5, (uint64_t)v88);
      uint64_t v5 = v87;
      if (BDS_Eph)
      {
        uint64_t v10 = a3[3182];
        if (*(unsigned char *)(v10 + v6))
        {
          double v11 = (int *)&a3[19 * v6 + 3189];
          if (*(int *)v88 <= *v11 && v87 - *v11 > -1801) {
            goto LABEL_29;
          }
          int v12 = v88[9];
          if (*(_DWORD *)v88 - *v11 <= 10799)
          {
            uint64_t v85 = a3[3182];
            if (Is_BDS_IntEph_Real((uint64_t)&a3[19 * v6 + 3189]))
            {
              BOOL v13 = Is_BDS_IntEph_Real((uint64_t)v88);
              uint64_t v5 = v87;
              uint64_t v10 = v85;
              if (!v13)
              {
                *double v11 = v87;
                int v8 = v86;
                goto LABEL_29;
              }
            }
            else
            {
              uint64_t v5 = v87;
              uint64_t v10 = v85;
            }
          }
        }
        else
        {
          int v12 = v88[9];
        }
        BOOL v14 = v12 == 0;
        uint64_t v15 = (_OWORD *)a3[3174];
        if (!*((unsigned char *)v15 + v6) && !v12)
        {
          if (*(unsigned char *)(a3[3184] + v6)) {
            BOOL v14 = *((unsigned char *)a3 + 44 * v6 + 44706) != 0;
          }
          else {
            BOOL v14 = 1;
          }
        }
        int v16 = &a3[19 * v6];
        uint64_t v17 = (long long *)(v16 + 3189);
        v16[3207] = *(void *)&v88[144];
        long long v18 = *(_OWORD *)&v88[112];
        *(_OWORD *)(v16 + 3201) = *(_OWORD *)&v88[96];
        *(_OWORD *)(v16 + 3203) = v18;
        *(_OWORD *)(v16 + 3205) = *(_OWORD *)&v88[128];
        long long v19 = *(_OWORD *)&v88[48];
        *(_OWORD *)(v16 + 3193) = *(_OWORD *)&v88[32];
        *(_OWORD *)(v16 + 3195) = v19;
        long long v20 = *(_OWORD *)&v88[80];
        *(_OWORD *)(v16 + 3197) = *(_OWORD *)&v88[64];
        *(_OWORD *)(v16 + 3199) = v20;
        long long v21 = *(_OWORD *)&v88[16];
        *(_OWORD *)(v16 + 3189) = *(_OWORD *)v88;
        *(_OWORD *)(v16 + 3191) = v21;
        *(unsigned char *)(a3[3178] + v6) = 1;
        *(unsigned char *)(v10 + v6) = 1;
        *((unsigned char *)v15 + v6) = v14;
        *(unsigned char *)(a3[3175] + v6) = v14;
        int v22 = *((_DWORD *)v16 + 6379);
        if (v14) {
          int v23 = 1;
        }
        else {
          int v23 = 2;
        }
        uint64_t v24 = a3[3176];
        if (v22 == 5)
        {
          *(_DWORD *)(v24 + 20 * v6 + 8) = v23;
          BOOL v25 = (int *)(a3[3177] + 20 * v6 + 8);
        }
        else
        {
          *(_DWORD *)(v24 + 20 * v6 + 12) = v23;
          BOOL v25 = (int *)(a3[3177] + 20 * v6 + 12);
        }
        int v8 = v86;
        int *v25 = v23;
        if ((int)v5 >= 1)
        {
          *(unsigned char *)(a3[3185] + v6) = 1;
          Core_Save_BDS_Eph((v6 + 1), 0, v17);
          uint64_t v5 = v87;
          uint64_t v15 = (_OWORD *)a3[3174];
        }
        uint64_t v26 = 0;
        LODWORD(v27) = 0;
        uint64_t v28 = p_NV;
        uint64_t v29 = p_NV + 13200;
        long long v31 = v15[1];
        long long v30 = v15[2];
        long long v32 = *(_OWORD *)((char *)v15 + 47);
        *(_OWORD *)(p_NV + 13212) = *v15;
        *(_OWORD *)(v29 + 59) = v32;
        *(_OWORD *)(v29 + 44) = v30;
        *(_OWORD *)(v29 + 28) = v31;
        uint64_t v33 = v28 + 13208;
        __int16 v34 = -9871;
        do
        {
          int v35 = *(unsigned __int8 *)(v33 + v26) ^ HIBYTE(v34);
          __int16 v34 = -12691 * (v34 + (*(unsigned __int8 *)(v33 + v26) ^ HIBYTE(v34))) + 22719;
          uint64_t v27 = (v27 + v35);
          ++v26;
        }
        while (v26 != 72);
        *(void *)(v28 + 13200) = v27;
      }
    }
LABEL_29:
    ++v6;
  }
  while (v6 != 63);
  if ((int)v5 >= 1)
  {
    uint64_t v36 = 0;
    while (2)
    {
      if (!*(unsigned char *)(a3[3174] + v36)
        || *(unsigned char *)(*(void *)(a4 + 1632) + v36)
        || *(unsigned __int8 *)(a2 + 92 + v36) > 0xA5u
        || *(unsigned char *)(a3[3183] + v36) && (int)v5 - *(_DWORD *)v7 < 241)
      {
        goto LABEL_47;
      }
      memset(v88, 0, 18);
      memset(&v88[20], 0, 78);
      memset(&v88[100], 0, 48);
      if ((EE_Get_BDS_CNAV_IntEph((XofSvcsIf *)(v36 + 1), v5, (uint64_t)v88) & 1) != 0
        || (EE_Get_BDS_Leg_IntEph((v36 + 1)) & 1) != 0)
      {
        uint64_t v37 = a3[3183];
        if (!*(unsigned char *)(v37 + v36) || *(int *)v88 > *(_DWORD *)v7)
        {
          long long v38 = *(_OWORD *)&v88[80];
          *((_OWORD *)v7 + 4) = *(_OWORD *)&v88[64];
          *((_OWORD *)v7 + 5) = v38;
          long long v39 = *(_OWORD *)&v88[48];
          *((_OWORD *)v7 + 2) = *(_OWORD *)&v88[32];
          *((_OWORD *)v7 + 3) = v39;
          v7[18] = *(void *)&v88[144];
          long long v40 = *(_OWORD *)&v88[128];
          long long v41 = *(_OWORD *)&v88[96];
          *((_OWORD *)v7 + 7) = *(_OWORD *)&v88[112];
          *((_OWORD *)v7 + 8) = v40;
          *((_OWORD *)v7 + 6) = v41;
          long long v42 = *(_OWORD *)&v88[16];
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v88;
          *((_OWORD *)v7 + 1) = v42;
          *(unsigned char *)(a3[3178] + v36) = 1;
          *(unsigned char *)(v37 + v36) = 1;
          Debug_Log_BDS_Eph(2, (uint64_t)v88);
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v37 = a3[3183];
      }
      *(unsigned char *)(v37 + v36) = 0;
LABEL_46:
      LODWORD(v5) = v87;
LABEL_47:
      ++v36;
      v7 += 19;
      if (v36 == 63) {
        break;
      }
      continue;
    }
  }
  uint64_t v43 = 0;
  memset(v88, 0, 43);
  while (2)
  {
    if (!*(unsigned char *)(a3[3184] + v43) || (int)v5 - *((_DWORD *)a3 + 11 * v43 + 11166) >= 1801)
    {
      BDS_Aluint64_t m = Core_Get_BDS_Alm((v43 + 1), v5, v88);
      LODWORD(v5) = v87;
      if (BDS_Alm)
      {
        uint64_t v45 = a3[3184];
        if (!*(unsigned char *)(v45 + v43) || *(int *)v88 > *((_DWORD *)a3 + 11 * v43 + 11166))
        {
          unsigned __int8 v46 = (_OWORD *)a3[3174];
          BOOL v47 = v88[42] != 0;
          if (v88[42] && !*((unsigned char *)v46 + v43))
          {
            uint64_t v48 = a3[3182];
            if (*(unsigned char *)(v48 + v43))
            {
              int v49 = a3[19 * v43 + 3189];
              if (BYTE1(a3[19 * v43 + 3190])) {
                BOOL v50 = v49 + 3600 <= v87;
              }
              else {
                BOOL v50 = 1;
              }
              if (!v50)
              {
                BOOL v47 = 0;
                goto LABEL_65;
              }
              if (v49 + 100 < v87)
              {
                *(unsigned char *)(a3[3178] + v43) = 0;
                *(unsigned char *)(v48 + v43) = 0;
              }
            }
            BOOL v47 = 1;
          }
LABEL_65:
          unsigned int v51 = (long long *)((char *)a3 + 44 * v43 + 44664);
          long long v52 = *(_OWORD *)&v88[16];
          *unsigned int v51 = *(_OWORD *)v88;
          v51[1] = v52;
          *(long long *)((char *)v51 + 28) = *(_OWORD *)&v88[28];
          *(unsigned char *)(a3[3179] + v43) = 1;
          *(unsigned char *)(v45 + v43) = 1;
          *((unsigned char *)v46 + v43) = v47;
          if (v87 >= 1)
          {
            Core_Save_BDS_Alm((v43 + 1), 0, v51);
            LODWORD(v5) = v87;
            unsigned __int8 v46 = (_OWORD *)a3[3174];
          }
          uint64_t v53 = 0;
          LODWORD(v54) = 0;
          uint64_t v55 = p_NV;
          uint64_t v56 = p_NV + 13200;
          long long v58 = v46[1];
          long long v57 = v46[2];
          long long v59 = *(_OWORD *)((char *)v46 + 47);
          *(_OWORD *)(p_NV + 13212) = *v46;
          *(_OWORD *)(v56 + 59) = v59;
          *(_OWORD *)(v56 + 44) = v57;
          *(_OWORD *)(v56 + 28) = v58;
          uint64_t v60 = v55 + 13208;
          __int16 v61 = -9871;
          do
          {
            int v62 = *(unsigned __int8 *)(v60 + v53) ^ HIBYTE(v61);
            __int16 v61 = -12691 * (v61 + (*(unsigned __int8 *)(v60 + v53) ^ HIBYTE(v61))) + 22719;
            uint64_t v54 = (v54 + v62);
            ++v53;
          }
          while (v53 != 72);
          *(void *)(v55 + 13200) = v54;
        }
      }
    }
    if (++v43 != 63) {
      continue;
    }
    break;
  }
  *(void *)long long v88 = 0;
  *(_WORD *)&_OWORD v88[8] = 0;
  *(_WORD *)&v88[24] = 0;
  *(void *)&v88[12] = 0;
  *(_DWORD *)&v88[19] = 0;
  *(void *)long long v89 = 0;
  *(_WORD *)&_OWORD v89[8] = 0;
  *(_WORD *)&v89[24] = 0;
  *(void *)&v89[12] = 0;
  *(_DWORD *)&v89[19] = 0;
  if (Core_Get_BDS_BGTO(v5, v88, v89))
  {
    if (*(int *)&v88[4] >= 3 && ((int v64 = *(_DWORD *)v83, v63 = *(_DWORD *)(v83 + 4), v63 < 4) || *(int *)v88 > v64))
    {
      EvLog_v("DD_Assist_BDS_BGTO:  New BGTO: ->GPS  Source %d > %d  or  GPS_secs %d > %d , A0 %d %d", *(_DWORD *)&v88[4], v63, *(_DWORD *)v88, v64, *(_DWORD *)&v88[16], *(_DWORD *)(v83 + 16));
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v88;
      *(_OWORD *)(v83 + 12) = *(_OWORD *)&v88[12];
      BDS_BGTOInt2Real(v83, (uint64_t)(a3 + 5937));
      if (v87 >= 1)
      {
        uint64_t v76 = 0;
        unsigned int v69 = 0;
        uint64_t v77 = p_NV;
        uint64_t v71 = p_NV + 13280;
        long long v78 = *(_OWORD *)(v83 + 12);
        *(_OWORD *)(p_NV + 13288) = *(_OWORD *)v83;
        *(_OWORD *)(v71 + 20) = v78;
        uint64_t v79 = v77 + 13288;
        __int16 v80 = -9871;
        do
        {
          int v81 = *(unsigned __int8 *)(v79 + v76) ^ HIBYTE(v80);
          __int16 v80 = -12691 * (v80 + (*(unsigned __int8 *)(v79 + v76) ^ HIBYTE(v80))) + 22719;
          v69 += v81;
          ++v76;
        }
        while (v76 != 32);
LABEL_85:
        *(void *)uint64_t v71 = v69;
      }
    }
    else if (*(int *)&v89[4] >= 3)
    {
      int v66 = *(_DWORD *)(v83 + 28);
      int v65 = *(_DWORD *)(v83 + 32);
      double v67 = (_OWORD *)(v83 + 28);
      if (v65 < 4 || *(int *)v89 > v66)
      {
        EvLog_v("DD_Assist_BDS_BGTO:  New BGTO: ->GLO Source %d > %d  or  GPS_secs %d > %d , A0 %d %d", *(_DWORD *)&v89[4], v65, *(_DWORD *)v89, v66, *(_DWORD *)&v89[16], *(_DWORD *)(v83 + 44));
        _OWORD *v67 = *(_OWORD *)v89;
        *(_OWORD *)(v83 + 40) = *(_OWORD *)&v89[12];
        BDS_BGTOInt2Real((uint64_t)v67, (uint64_t)(a3 + 5942));
        if (v87 >= 1)
        {
          uint64_t v68 = 0;
          unsigned int v69 = 0;
          uint64_t v70 = p_NV;
          uint64_t v71 = p_NV + 13320;
          long long v72 = *(_OWORD *)(v83 + 40);
          *(_OWORD *)(p_NV + 13328) = *v67;
          *(_OWORD *)(v71 + 20) = v72;
          uint64_t v73 = v70 + 13328;
          __int16 v74 = -9871;
          do
          {
            int v75 = *(unsigned __int8 *)(v73 + v68) ^ HIBYTE(v74);
            __int16 v74 = -12691 * (v74 + (*(unsigned __int8 *)(v73 + v68) ^ HIBYTE(v74))) + 22719;
            v69 += v75;
            ++v68;
          }
          while (v68 != 32);
          goto LABEL_85;
        }
      }
    }
  }
}

void NK_Set_TTFF(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (_DWORD *)(a1 + 27116);
  uint64_t v6 = (double *)(a2 + 60200);
  double v7 = 0.0;
  do
  {
    double v7 = v7 + *(double *)(a2 + 61488 + v4);
    v4 += 8;
  }
  while (v4 != 24);
  if (*(unsigned char *)(a2 + 62458))
  {
    if (v7 < 40000.0 && *(_DWORD *)(a2 + 62660) <= 0x13u && *v5 >= 2u)
    {
      *(unsigned char *)(a2 + 1864) = 1;
      if (!*(_DWORD *)(a1 + 27136)) {
        *(_DWORD *)(a1 + 27136) = *(_DWORD *)a2 - *(_DWORD *)(a1 + 68180);
      }
    }
  }
  if (!*(_DWORD *)(a1 + 27136))
  {
    *(unsigned char *)(a2 + 62451) = 0;
    if (*(unsigned char *)(a1 + 240)
      && *(double *)(a2 + 61584) < 30000.0
      && *(double *)(a2 + 61592) < 30000.0
      && *(double *)(a2 + 61600) < 30000.0)
    {
      *(unsigned char *)(a2 + 62451) = 1;
    }
    if (!*(unsigned char *)(a2 + 1864))
    {
      unsigned int v8 = 100000;
      *(unsigned char *)(a1 + 136) = 1;
      *(_DWORD *)(a1 + 140) = 93;
      *(_DWORD *)(a1 + 160) = -1;
LABEL_54:
      unsigned int v15 = *(_DWORD *)(a2 + 62660);
      if (v15 > v8)
      {
        *(unsigned char *)(a2 + 1864) = 0;
        *(unsigned char *)(a1 + 241) = 1;
        memset_pattern16((void *)(a2 + 61440), &unk_263D838C0, 0x60uLL);
        memset_pattern16((void *)(a2 + 61536), &unk_263D838D0, 0x60uLL);
        double v7 = 1.00979801e14;
      }
      if (v15 >= 0x3E9 && !*(unsigned char *)(a1 + 136))
      {
        double v16 = sqrt(v6[198] + v6[199] + v6[200]);
        if ((double)v15 / v16 > 2.5)
        {
          EvCrt_v("NK_Set_TTFF:  Trigger KF Reset 93 at start of next epoch,  Mag_Pos_Cor %d  Pos_Orig_Sig %f  PosCor_Sigma_Ratio %f", v15, v16, (double)v15 / v16);
          *(unsigned char *)(a1 + 7) = 1;
        }
      }
      goto LABEL_10;
    }
    unsigned int v8 = 100000;
    if (*(_DWORD *)(a2 + 62088)
      || *(int *)(a2 + 20) > 8
      || *(unsigned __int8 *)(a2 + 62034) >= 2u && v7 <= 3600000000.0)
    {
      int v9 = *(unsigned __int8 *)v6;
      if (*(unsigned char *)v6
        && *(double *)(a2 + 60272) > 900000000.0
        && (*(unsigned __int8 *)(a2 + 62034) < 2u || *(_DWORD *)(a2 + 62660) > 0x64u))
      {
        int v9 = 1;
      }
      else if (*(_DWORD *)(a2 + 62660) <= 0x186A0u)
      {
        int v12 = *(_DWORD *)(a2 + 20);
        if (v12 >= 2
          && (*(_DWORD *)(a2 + 1872)
           || (!*(unsigned char *)(a1 + 241) || *(int *)(a1 + 160) <= 2)
           && (v12 > 0xA
            || *(double *)(a2 + 61944) >= 90000.0
            || *(unsigned char *)(a2 + 62032)
            || *(_DWORD *)(a2 + 62068) == 1)))
        {
LABEL_47:
          if (v9)
          {
            double v13 = *(double *)(a2 + 60272);
            if (v13 >= 4.8e10 || v13 <= 900000000.0) {
              unsigned int v8 = 100000;
            }
            else {
              unsigned int v8 = 600000;
            }
          }
          goto LABEL_54;
        }
      }
    }
    else
    {
      int v9 = *(unsigned __int8 *)v6;
    }
    *(unsigned char *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 140) = 93;
    *(_DWORD *)(a1 + 160) = -1;
    goto LABEL_47;
  }
LABEL_10:
  if (v7 <= 100000000.0 && v5[1] <= 0x1Eu)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a1 + 14208;
    do
    {
      if (*(unsigned char *)(v11 + v10))
      {
        if (*(_DWORD *)a2 - *(_DWORD *)(v11 + 4 * v10 - 1536) >= 60001) {
          *(unsigned char *)(v11 + v10) = 0;
        }
      }
      ++v10;
    }
    while (v10 != 128);
  }
  else
  {
    *(_OWORD *)(a1 + 14320) = 0u;
    *(_OWORD *)(a1 + 14304) = 0u;
    *(_OWORD *)(a1 + 14288) = 0u;
    *(_OWORD *)(a1 + 14272) = 0u;
    *(_OWORD *)(a1 + 14256) = 0u;
    *(_OWORD *)(a1 + 14240) = 0u;
    *(_OWORD *)(a1 + 14224) = 0u;
    *(_OWORD *)(a1 + 14208) = 0u;
  }
}

uint64_t DD_Delete_Bad_GPS_Data(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = a4 + 943;
  double v7 = a4 + 15;
  unsigned int v8 = (_WORD *)(a1 + 4);
  uint64_t v9 = 1992;
  uint64_t result = 256;
  do
  {
    uint64_t v11 = a4[6];
    if (*(unsigned char *)(v11 + v5))
    {
      *((_DWORD *)v8 - 1) = 16777472;
      _WORD *v8 = 256;
      *(_WORD *)(a2 + 2 * v5) = 256;
      *(unsigned char *)(v11 + v5) = 0;
      *(unsigned char *)(a4[4] + v5) = 0;
      *(unsigned char *)(a4[8] + v5) = 0;
      *(_DWORD *)((char *)v7 + 111) = 0;
      *((_OWORD *)v7 + 5) = 0uLL;
      *((_OWORD *)v7 + 6) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *((_OWORD *)v7 + 4) = 0uLL;
      *((_OWORD *)v7 + 1) = 0uLL;
      *((_OWORD *)v7 + 2) = 0uLL;
      *(_OWORD *)double v7 = 0uLL;
      *(unsigned char *)(a4[14] + v5) = 0;
      *(unsigned char *)(a4[11] + v5) = 1;
      if ((v5 & 0xE0) == 0)
      {
        uint64_t v12 = p_NV + v9;
        *(void *)(v12 - 8) = 0xFFFFFFFFLL;
        *(_OWORD *)uint64_t v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_OWORD *)(v12 + 32) = 0uLL;
        *(_OWORD *)(v12 + 48) = 0uLL;
        *(_OWORD *)(v12 + 64) = 0uLL;
        *(_OWORD *)(v12 + 80) = 0uLL;
        *(_OWORD *)(v12 + 96) = 0uLL;
        *(_DWORD *)(v12 + 111) = 0;
      }
    }
    if (*(unsigned char *)(a4[7] + v5))
    {
      *(unsigned char *)(a3 + v5) = -1;
      *(unsigned char *)(a4[7] + v5) = 0;
      *(unsigned char *)(a4[5] + v5) = 0;
      *(unsigned char *)(a4[10] + v5) = 0;
      *(_OWORD *)((char *)v6 + 28) = 0uLL;
      _OWORD *v6 = 0uLL;
      v6[1] = 0uLL;
      *(unsigned char *)(a4[14] + v5) = 0;
      if ((v5 & 0xE0) == 0)
      {
        uint64_t v13 = p_NV + v4;
        *(void *)(v13 + 192) = 0xFFFFFFFFLL;
        *(_OWORD *)(v13 + 200) = 0uLL;
        *(_OWORD *)(v13 + 216) = 0uLL;
        *(_OWORD *)(v13 + 228) = 0uLL;
      }
    }
    ++v5;
    v9 += 128;
    v4 += 56;
    uint64_t v6 = (_OWORD *)((char *)v6 + 44);
    double v7 = (void *)((char *)v7 + 116);
    v8 += 3;
  }
  while (v5 != 32);
  return result;
}

uint64_t DD_Delete_Inhib_GPS_Data(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  double v7 = a5 + 943;
  unsigned int v8 = (_WORD *)(a2 + 4);
  uint64_t v9 = 1992;
  uint64_t v10 = a5;
  do
  {
    if (*(unsigned char *)(result + v6))
    {
      *((_DWORD *)v8 - 1) = 16777472;
      _WORD *v8 = 256;
      *(_WORD *)(a3 + 2 * v6) = 256;
      *(unsigned char *)(a5[6] + v6) = 0;
      *(unsigned char *)(a5[4] + v6) = 0;
      *(unsigned char *)(a5[8] + v6) = 0;
      *(_DWORD *)((char *)v10 + 231) = 0;
      *(_OWORD *)(v10 + 27) = 0uLL;
      *(_OWORD *)(v10 + 25) = 0uLL;
      *(_OWORD *)(v10 + 23) = 0uLL;
      *(_OWORD *)(v10 + 21) = 0uLL;
      *(_OWORD *)(v10 + 19) = 0uLL;
      *(_OWORD *)(v10 + 17) = 0uLL;
      *(_OWORD *)(v10 + 15) = 0uLL;
      *(unsigned char *)(a5[9] + v6) = 0;
      *(_DWORD *)((char *)v10 + 3943) = 0;
      *(_OWORD *)(v10 + 489) = 0uLL;
      *(_OWORD *)(v10 + 491) = 0uLL;
      *(_OWORD *)(v10 + 485) = 0uLL;
      *(_OWORD *)(v10 + 487) = 0uLL;
      *(_OWORD *)(v10 + 481) = 0uLL;
      *(_OWORD *)(v10 + 483) = 0uLL;
      *(_OWORD *)(v10 + 479) = 0uLL;
      *(unsigned char *)(a5[14] + v6) = 0;
      *(unsigned char *)(a5[11] + v6) = 1;
      if ((v6 & 0xE0) == 0)
      {
        uint64_t v11 = p_NV + v9;
        *(void *)(v11 - 8) = 0xFFFFFFFFLL;
        *(_OWORD *)uint64_t v11 = 0uLL;
        *(_OWORD *)(v11 + 16) = 0uLL;
        *(_OWORD *)(v11 + 32) = 0uLL;
        *(_OWORD *)(v11 + 48) = 0uLL;
        *(_OWORD *)(v11 + 64) = 0uLL;
        *(_OWORD *)(v11 + 80) = 0uLL;
        *(_OWORD *)(v11 + 96) = 0uLL;
        *(_DWORD *)(v11 + 111) = 0;
      }
      *(unsigned char *)(a4 + v6) = -1;
      *(unsigned char *)(a5[7] + v6) = 0;
      *(unsigned char *)(a5[5] + v6) = 0;
      *(unsigned char *)(a5[10] + v6) = 0;
      *(_OWORD *)((char *)v7 + 28) = 0uLL;
      *double v7 = 0uLL;
      v7[1] = 0uLL;
      if ((v6 & 0xE0) == 0)
      {
        uint64_t v12 = p_NV + v5;
        *(void *)(v12 + 192) = 0xFFFFFFFFLL;
        *(_OWORD *)(v12 + 200) = 0uLL;
        *(_OWORD *)(v12 + 216) = 0uLL;
        *(_OWORD *)(v12 + 228) = 0uLL;
      }
    }
    ++v6;
    v9 += 128;
    v5 += 56;
    double v7 = (_OWORD *)((char *)v7 + 44);
    uint64_t v10 = (void *)((char *)v10 + 116);
    v8 += 3;
  }
  while (v6 != 32);
  return result;
}

uint64_t DD_Check_Age_GPS_Data(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((int)result < 1) {
    return result;
  }
  int v6 = result;
  uint64_t v7 = 0;
  int v8 = 0;
  char v9 = 0;
  int v43 = result + 900;
  if ((int)result <= 900) {
    int v10 = 900;
  }
  else {
    int v10 = result;
  }
  int v11 = v10 - 900;
  if ((int)result <= 86400) {
    int v12 = 86400;
  }
  else {
    int v12 = result;
  }
  int v13 = v12 - 86400;
  uint64_t v14 = *(void *)(a5 + 64);
  unsigned int v15 = (unsigned char *)(a5 + 62170);
  double v16 = (int *)(a5 + 120);
  do
  {
    if (!*(unsigned char *)(v14 + v7)) {
      goto LABEL_19;
    }
    int v17 = *v16;
    if (*v16 >= 1 && v17 < v13)
    {
LABEL_17:
      char v9 = 1;
      *(unsigned char *)(*(void *)(a5 + 48) + v7) = 1;
      goto LABEL_19;
    }
    if (v17)
    {
      if (v17 > v43)
      {
        ++v8;
        if (!*v15) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      *double v16 = v11;
    }
LABEL_19:
    ++v7;
    v16 += 29;
  }
  while (v7 != 32);
  if (v8 >= 1)
  {
    if (*v15) {
      long long v19 = "(Skipped)";
    }
    else {
      long long v19 = "";
    }
    EvLog_v("DD_Check_Age_GPS_Data:  Deleting Future EPH, %d SVs  %s", v8, v19);
  }
  long long v42 = v15;
  uint64_t v20 = 0;
  int v21 = 0;
  if (v6 <= 15724800) {
    int v22 = 15724800;
  }
  else {
    int v22 = v6;
  }
  int v23 = v22 - 15724800;
  uint64_t v24 = 7544;
  do
  {
    if (*(unsigned char *)(*(void *)(a5 + 80) + v20))
    {
      int v25 = *(_DWORD *)(a5 + v24);
      if (v25 >= 1 && v25 < v23)
      {
        char v9 = 1;
        *(unsigned char *)(*(void *)(a5 + 56) + v20) = 1;
        EvLog_v("DD_Check_Age_GPS_Data:  Old ALM deleted SV %d age %d thresh %d", v20 + 1, (v6 - v25) / 604800, (v6 - v23) / 604800);
      }
      else if (v25)
      {
        if (v25 > v43)
        {
          ++v21;
          int v27 = v6 - v25;
          uint64_t v28 = "(Skipped)";
          if (!*v42) {
            uint64_t v28 = "";
          }
          EvLog_v("DD_Check_Age_GPS_Data:  Future ALM deleted SV %d age %d thresh %d  %s", v20 + 1, v27 / 604800, 0, v28);
          if (!*v42)
          {
            char v9 = 1;
            *(unsigned char *)(*(void *)(a5 + 56) + v20) = 1;
          }
        }
      }
      else
      {
        *(_DWORD *)(a5 + v24) = v11;
      }
    }
    ++v20;
    v24 += 44;
  }
  while (v20 != 32);
  if (v21 >= 1)
  {
    if (*v42) {
      uint64_t v29 = "(Skipped)";
    }
    else {
      uint64_t v29 = "";
    }
    EvLog_v("DD_Check_Age_GPS_Data:  Deleting Future ALM, %d SVs  %s", v21, v29);
  }
  if (v6 <= 2419200) {
    int v30 = 2419200;
  }
  else {
    int v30 = v6;
  }
  int v31 = v30 - 2419200;
  if (*(_DWORD *)(a5 + 8956))
  {
    long long v32 = (void *)(a5 + 8952);
    int v33 = *(_DWORD *)(a5 + 8952);
    if (v33 >= 1 && v33 < v31)
    {
LABEL_63:
      void *v32 = 0;
      *(void *)(a5 + 8960) = 0;
    }
    else if (v33)
    {
      if (v33 > v43)
      {
        int v35 = *v42 ? "(Skipped)" : "";
        EvLog_v("DD_Check_Age_GPS_Data:  Deleting Future Iono Model, %d  %d  %s", v33, v43, v35);
        if (!*v42) {
          goto LABEL_63;
        }
      }
    }
    else
    {
      *(_DWORD *)long long v32 = v11;
    }
  }
  if (*(_DWORD *)(a5 + 8972))
  {
    uint64_t v36 = (void *)(a5 + 8968);
    int v37 = *(_DWORD *)(a5 + 8968);
    if (v37 >= 1 && v37 < v31) {
      goto LABEL_68;
    }
    if (v37)
    {
      if (v37 > v43)
      {
        long long v38 = *v42 ? "(Skipped)" : "";
        EvLog_v("DD_Check_Age_GPS_Data:  Deleting Future UTC Model, %d  %d  %s", v37, v43, v38);
        if (!*v42)
        {
LABEL_68:
          *uint64_t v36 = 0;
          *(void *)(a5 + 8976) = 0;
          *(void *)(a5 + 8984) = 0;
        }
      }
    }
    else
    {
      *(_DWORD *)uint64_t v36 = v11;
    }
  }
  uint64_t result = a2;
  if (v9)
  {
    return DD_Delete_Bad_GPS_Data(a2, a3, a4, (void *)a5);
  }
  return result;
}

uint64_t DD_Proc_GPS_Data(uint64_t result, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v10 = (char *)*(unsigned __int8 *)(a2 + 8);
  int v11 = *(_DWORD *)(a5 + 116 * (void)v10 + 224);
  if (!v11) {
    v10[*(void *)(a5 + 112)] = 0;
  }
  unsigned int v12 = *(unsigned __int16 *)(a2 + 56);
  if ((v12 & 1) != 0 && (*(_DWORD *)(a2 + 16) & 0xFF0000) != 0x8B0000) {
    return (uint64_t)EvCrt_v("DD_Proc_GPS_Data:  Preamble Test Fail.  SV %d  Word_Mask %x  Word_1 %x");
  }
  if ((v12 & 2) == 0)
  {
    *(unsigned char *)(a2 + 12) = 0;
    return result;
  }
  unsigned int v13 = *(_DWORD *)(a2 + 20);
  unsigned int v14 = (v13 >> 2) & 7;
  *(unsigned char *)(a2 + 12) = (v13 >> 2) & 7;
  if (v14)
  {
    if (v14 >= 6) {
      return (uint64_t)EvCrt_v("DD_Proc_GPS_Data:  Invalid GPS Subframe Number.  SV %d  %d");
    }
    unsigned int v15 = v13 & 0xFFFF80;
    unsigned int v16 = (3 * (v13 & 0xFFFF80)) >> 6;
    if (v15 >= 0xC4DF81) {
      return (uint64_t)EvCrt_v("DD_Proc_GPS_Data:  Subframe HOW TOW Error.  SV %d  TOW %d");
    }
    unsigned int v17 = v16 - 30 * ((143165577 * (unint64_t)v16) >> 32);
    if (v17 <= 5) {
      unsigned int v18 = 5;
    }
    else {
      unsigned int v18 = (43 * v17) >> 8;
    }
    if (v18 != v14) {
      return (uint64_t)EvCrt_v("DD_Proc_GPS_Data:  Subframe Number Error.  SV %d  decoded %d  expected %d  HOW TOW %d");
    }
    char v45 = 0;
    uint64_t result = DD_Predict_Subframe_Number(a3, &v45);
    if (result && v45 >= 1 && v14 != v45)
    {
      unsigned __int8 v19 = v45 - 1;
      if (v45 <= 1) {
        unsigned __int8 v19 = 5;
      }
      if (v14 != v19) {
        return (uint64_t)EvCrt_v("DD_Proc_GPS_Data:  Subframe Number Error.  SV %d  decoded %d  predicted %d  or previous %d");
      }
    }
    BOOL v46 = 0;
    if (v14 - 1 < 3)
    {
      *(unsigned char *)(a2 + 13) = 0;
      uint64_t v20 = *(void *)a5;
      BOOL v21 = v11 == 0xFFFFFF;
      int v22 = v11 != 0xFFFFFF;
      if (v21
        || v10[v20]
        && v10[*(void *)(a5 + 64)]
        && (DD_Proc_Eph_Bit_Validation(v10, v14, a2 + 16, v12, a5),
            int v10 = (char *)*(unsigned __int8 *)(a2 + 8),
            uint64_t v20 = *(void *)a5,
            *(_DWORD *)(a5 + 116 * (void)v10 + 224) == 0xFFFFFF))
      {
        if (v10[v20] && (*(_WORD *)(a2 + 56) & 2) != 0)
        {
          v10[v9 + 48006] = (*(unsigned char *)(a2 + 20) & 0x20) != 0;
          LODWORD(v10) = *(unsigned __int8 *)(a2 + 8);
          uint64_t v20 = *(void *)a5;
        }
      }
      else
      {
        int v22 = 0;
      }
      uint64_t result = DD_Proc_GPS_Eph_Subframe(v10, *(unsigned __int8 *)(a2 + 12), a2 + 16, *(unsigned __int16 *)(a2 + 56), *(unsigned __int8 *)(v20 + v10), a5, v9, v9 + 224, v9 + 288, v9 + 3360, a3, a4, v9 + 3552);
      if (result)
      {
        uint64_t v28 = *(unsigned __int8 *)(a2 + 8);
        uint64_t v29 = a5 + 116 * v28;
        int v31 = *(_DWORD *)(v29 + 120);
        uint64_t v30 = v29 + 120;
        *(_DWORD *)uint64_t v30 = *a4;
        *(_DWORD *)(v30 + 4) = 4;
        if (((v31 != 0) & ~v22) == 0 && *a4 >= 1)
        {
          *(unsigned char *)(*(void *)(a5 + 88) + v28) = 1;
          return Core_Save_GPS_Eph((v28 + 1), 0, (long long *)v30);
        }
      }
      return result;
    }
    if (v14 - 4 >= 2) {
      return (uint64_t)EvCrt_Illegal_switch_default("DD_Proc_GPS_Data", 0x3AFu);
    }
    if ((~v12 & 0x3FE) == 0)
    {
      if (*(unsigned char *)(a3 + 16))
      {
        int v23 = *(__int16 *)(a3 + 32);
        if (v23 >= 1025)
        {
          unsigned int v24 = *(_DWORD *)(a2 + 24);
          int v25 = HIWORD(v24) & 0x3F;
          *(unsigned char *)(a2 + 13) = BYTE2(v24) & 0x3F;
          int v26 = (v24 >> 22) & 3;
          *(unsigned char *)(a2 + 14) = v26;
          if (v26 != 1) {
            return (uint64_t)EvLog_v("DD_Proc_GPS_Data:  SV %2d  SF %d  Page_ID %d  Ignored, Unexpected Data_ID %d != 1", (int)v10 + 1, v14, v25, v26);
          }
          uint64_t v27 = (v25 - 1);
          if (v27 <= 0x1F)
          {
            uint64_t result = Decode_GPS_Check_Alm_TOA((const unsigned int *)(a2 + 16), *(unsigned char *)(*(void *)a5 + v27), v23, (unsigned __int8 *)(v9 + v27 + 192), (__int16 *)(a2 + 10), &v46);
            if (result)
            {
              uint64_t result = DD_Proc_GPS_Alm_Subframe(*(unsigned __int8 *)(a2 + 13), *(_WORD *)(a2 + 10), a2 + 16, *a4, v9, v9 + 224, (void *)a5);
            }
            else if (v46)
            {
              uint64_t result = *(unsigned __int8 *)(a2 + 13);
              uint64_t v32 = a5 + 44 * result;
              int v33 = *(_DWORD *)(v32 + 7500);
              *(_DWORD *)(v32 + 7500) = *a4;
              if (!v33 && *a4 >= 1) {
                uint64_t result = Core_Save_GPS_Alm(result, 0, (long long *)(v32 + 7500));
              }
            }
            int v25 = *(unsigned __int8 *)(a2 + 13);
          }
          if (v25 == 51)
          {
            uint64_t result = DD_Proc_GPS_Health_Subframe(a2 + 16, *a4, v9, v9 + 224, v9 + 192, (long long **)a5);
            *(_WORD *)(a5 + 8992) = 0;
            *(void *)&long long v34 = 0x101010101010101;
            *((void *)&v34 + 1) = 0x101010101010101;
            *(_OWORD *)(a5 + 8994) = v34;
            *(_OWORD *)(a5 + 9010) = v34;
            *(_OWORD *)(v9 + 47974) = 0u;
            *(_OWORD *)(v9 + 47990) = 0u;
            *(void *)&long long v35 = -1;
            *((void *)&v35 + 1) = -1;
            *(_OWORD *)(v9 + 48006) = v35;
            *(_OWORD *)(v9 + 48022) = v35;
            uint64_t v36 = *(_OWORD **)(a5 + 112);
            *uint64_t v36 = 0u;
            v36[1] = 0u;
            int v25 = *(unsigned __int8 *)(a2 + 13);
          }
          if (v25 == 56)
          {
            uint64_t result = (uint64_t)DD_Proc_GPS_ION_UTC_Subframe(*(unsigned __int8 *)(a2 + 8), (_DWORD *)(a2 + 16), *a4, v23, *(void *)(a5 + 112), a5);
            int v25 = *(unsigned __int8 *)(a2 + 13);
          }
          if (v25 == 63)
          {
            uint64_t result = (uint64_t)DD_Proc_GPS_AS_SV_Config_Subframe((const unsigned int *)(a2 + 16), *a4, (unsigned __int8 *)(v9 + 47974), v9, v9 + 224, v9 + 192, (_OWORD **)a5);
            uint64_t v37 = *(void *)a5;
            uint64_t v38 = *(unsigned __int8 *)(a2 + 8);
            if (*(unsigned char *)(*(void *)a5 + v38))
            {
              uint64_t v39 = a5 + 8994;
              long long v40 = (unsigned __int8 *)(v9 + 48006);
              uint64_t v41 = -32;
              while (1)
              {
                char v42 = *(v40 - 32);
                if ((v42 & 7u) - 1 <= 3) {
                  break;
                }
                *(unsigned char *)(*(void *)(a5 + 112) + v38) = 1;
                unsigned int v43 = *v40;
                if (v43 <= 1) {
                  goto LABEL_67;
                }
LABEL_68:
                ++v40;
                if (__CFADD__(v41++, 1)) {
                  return result;
                }
              }
              unsigned int v43 = *v40;
              if (v43 >= 2)
              {
                if (*(unsigned char *)(v37 + v41 + 32) && *(unsigned char *)(a5 + 59772 + v41 + 32)) {
                  *(unsigned char *)(v39 + v41 + 32) = (v42 & 8) != 0;
                }
                goto LABEL_68;
              }
LABEL_67:
              *(unsigned char *)(v39 + v41 + 32) = v43;
              goto LABEL_68;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL DD_Predict_Subframe_Number(uint64_t a1, unsigned char *a2)
{
  if (*(int *)a1 < 4)
  {
    LOBYTE(v3) = -1;
  }
  else
  {
    double v2 = (double)((int)(*(double *)(a1 + 40) + 0.5) % 30) / 6.0 + 4.5;
    unsigned int v3 = (int)v2 - 5 * ((((103 * (int)v2) >> 15) & 1) + ((103 * (int)v2) >> 9)) + 1;
  }
  BOOL result = *(_DWORD *)a1 > 3;
  *a2 = v3;
  return result;
}

char *DD_Proc_Eph_Bit_Validation(char *result, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a5 + 116 * result;
    uint64_t v9 = v8 + 4 * (8 * a2 - 8) + 128;
    uint64_t v10 = a3 + 8;
    int v11 = (_DWORD *)(v8 + 224);
    int v12 = result + 1;
    char v13 = 8 * a2 - 8;
    do
    {
      int v14 = 1 << (v13 + v7);
      if (*v11 & v14) == 0 && ((a4 >> v7))
      {
        int v15 = *(_DWORD *)(v9 + 4 * v7);
        if (*(_DWORD *)(v10 + 4 * v7) == v15)
        {
          *v11 |= v14;
        }
        else if (g_Logging_Cfg >= 7)
        {
          BOOL result = EvLog_v("DD_Proc_Eph_Bit_Validation:  Fail SV %d SF %d Wd %d 0x%x 0x%x", v12, a2, (int)v7 + 2, *(_DWORD *)(v10 + 4 * v7), v15);
        }
      }
      ++v7;
    }
    while (v7 != 8);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  char v13;
  int v14;
  int v15;

  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a5 + 116 * result;
    uint64_t v9 = v8 + 4 * (8 * a2 - 8) + 9160;
    uint64_t v10 = a3 + 8;
    int v11 = (_DWORD *)(v8 + 9256);
    int v12 = result + 193;
    char v13 = 8 * a2 - 8;
    do
    {
      int v14 = 1 << (v13 + v7);
      if (*v11 & v14) == 0 && ((a4 >> v7))
      {
        int v15 = *(_DWORD *)(v9 + 4 * v7);
        if (*(_DWORD *)(v10 + 4 * v7) == v15)
        {
          *v11 |= v14;
        }
        else if (g_Logging_Cfg >= 7)
        {
          BOOL result = EvLog_v("DD_Proc_Eph_Bit_Validation:  Fail SV %d SF %d Wd %d 0x%x 0x%x", v12, a2, (int)v7 + 2, *(_DWORD *)(v10 + 4 * v7), v15);
        }
      }
      ++v7;
    }
    while (v7 != 8);
  }
  return result;
}

BOOL DD_Proc_GPS_Eph_Subframe(unsigned int a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13)
{
  uint64_t v14 = 0;
  int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  *(void *)((char *)&v126[1] + 4) = *MEMORY[0x263EF8340];
  uint64_t v101 = a1;
  uint64_t v96 = a2;
  uint64_t v93 = a2 - 1;
  unsigned __int8 v19 = (_WORD *)(a10 + 6 * a1 + 2 * v93);
  int v102 = a1 + 1;
  char v92 = a1;
  uint64_t v20 = 32 * a2 + 96 * a1 + a9 - 32;
  uint64_t v21 = a3 + 8;
  do
  {
    int v22 = 1 << (v14 + 2);
    int v23 = (unsigned __int16)(v22 & *v19);
    if (v23) {
      ++v15;
    }
    if ((v22 & a4) != 0)
    {
      ++v18;
      BOOL v24 = v23 == 0;
    }
    else
    {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      ++v17;
      int v25 = *(_DWORD *)(v20 + 4 * v14);
      if (*(_DWORD *)(v21 + 4 * v14) != v25)
      {
        ++v16;
        EvLog_v("DD_Proc_GPS_Eph_Subframe: SV %d SF %d Diff Wd %d 0x%x 0x%x", v102, a2, v14 + 2, *(_DWORD *)(v21 + 4 * v14), v25);
      }
    }
    ++v14;
  }
  while (v14 != 8);
  uint64_t v26 = a10;
  if (v16 >= 1)
  {
    if (v16 == 1 && v17 >= 4 && (a2 == 1 && (a4 & 0x3C4) != 0x3C4 || a2 >= 2 && (a4 & 0x3FC) != 0x3FC)) {
      return 0;
    }
    int v15 = 0;
    uint64_t v27 = 2 * a2 - 2;
    *(_WORD *)(a10 + 6 * v101 + v27) = 0;
    *(_WORD *)(a7 + 6 * v101 + v27) = 256;
  }
  if (v17 - v16 <= 1)
  {
    uint64_t v34 = a3;
    uint64_t v33 = a9;
    if (v18 >= v15)
    {
      *(_WORD *)(a10 + 6 * v101 + 2 * (v96 - 1)) = a4;
      long long v41 = *(_OWORD *)(a3 + 24);
      char v42 = (_OWORD *)(a9 + 96 * v101 + 32 * (v96 - 1));
      *char v42 = *(_OWORD *)(a3 + 8);
      v42[1] = v41;
    }
    uint64_t v37 = a11;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = a10 + 6 * v101 + 2 * a2;
    int v32 = *(unsigned __int16 *)(v29 - 2);
    uint64_t v30 = (_WORD *)(v29 - 2);
    int v31 = v32;
    uint64_t v34 = a3;
    uint64_t v33 = a9;
    uint64_t v35 = a3 + 8;
    uint64_t v36 = 32 * a2 + 96 * v101 + a9 - 32;
    uint64_t v37 = a11;
    do
    {
      int v38 = 1 << (v28 + 2);
      int v39 = v38 & v31;
      if ((v38 & a4) != 0 && v39 == 0)
      {
        *(_DWORD *)(v36 + 4 * v28) = *(_DWORD *)(v35 + 4 * v28);
        v31 |= (unsigned __int16)(1 << (v28 + 2));
        *uint64_t v30 = v31;
      }
      else if ((v38 & a4) == 0 && v39)
      {
        *(_DWORD *)(v35 + 4 * v28) = *(_DWORD *)(v36 + 4 * v28);
        a4 |= (unsigned __int16)(1 << (v28 + 2));
      }
      ++v28;
    }
    while (v28 != 8);
  }
  unsigned int v43 = a2 - 1;
  if (a2 != 1 || (a4 & 7) != 7) {
    goto LABEL_86;
  }
  unint64_t v44 = *(unsigned int *)(v33 + 96 * v101);
  LOBYTE(v45) = 7;
  if (((0xE4FE7F3uLL >> ((v44 >> 2) & 0x1F)) & 1) == 0 || !a5) {
    goto LABEL_88;
  }
  signed int v46 = (v44 >> 14) & 0x3FF;
  int v47 = (int)*(double *)(v37 + 40);
  if (*(unsigned char *)(v37 + 16))
  {
    int v48 = *(__int16 *)(v37 + 32);
    int v49 = *(unsigned __int16 *)(v37 + 32);
    do
    {
      unsigned __int16 v50 = v46;
      v46 += 1024;
    }
    while (v48 - 512 > (__int16)v50);
    if (v49 != v50)
    {
      EvLog_v("DD_Proc_GPS_Eph_Subframe:  WARNING:  Different Week Number detected  %d != %d  SV %d", (__int16)v50, *(__int16 *)(v37 + 32), v102);
      int v48 = *(__int16 *)(v37 + 32);
      int v49 = *(unsigned __int16 *)(v37 + 32);
    }
    if (v49 == v50)
    {
      *(_DWORD *)(v37 + 20) = *(_DWORD *)(v37 + 24);
      goto LABEL_56;
    }
    if (*(int *)v37 < 3 || v47 < 32 || v47 >= 604769)
    {
LABEL_56:
      if (g_Logging_Cfg >= 7) {
        EvLog_v("DD_Proc_GPS_Eph_Subframe:  Week Num Candidates  %d %d  %d %d  %d %d");
      }
      goto LABEL_86;
    }
    EvCrt_v("DD_Proc_GPS_Eph_Subframe:  WARNING:  Different Week Number detected, possible GPS Spoofing,  %d != %d  SV %d", (__int16)v50, v48, v102);
    *(unsigned char *)(v37 + 105) = 1;
    signed int v51 = *(unsigned __int16 *)(v37 + 32);
    int v100 = v47;
    if (v51 == v50)
    {
      *(_DWORD *)(v37 + 20) = *(_DWORD *)(v37 + 24);
      LOWORD(v51) = v50;
    }
    int v52 = (__int16)v50;
  }
  else
  {
    int v100 = (int)*(double *)(v37 + 40);
    signed int v51 = *(__int16 *)(*(void *)(p_api + 72) + 1726);
    if (v46 > v51) {
      LOWORD(v51) = v46;
    }
    unsigned __int16 v50 = ((v46 ^ 0x3FF) + v51) & 0xFC00 | v46;
    LOWORD(v51) = *(_WORD *)(v37 + 32);
    int v52 = (__int16)v50;
  }
  int v53 = v52;
  EvLog_v("DD_Proc_GPS_Eph_Subframe:  Submitting WeekNum  %d  SV %d  DBts %d  %d", v52, v102, *(unsigned __int8 *)(v37 + 16), (__int16)v51);
  if (*(unsigned char *)(*(void *)(a6 + 64) + (char)(v102 - 1))) {
    BOOL v54 = DD_Check_New_GPS_Eph((v102 - 1), v33, a6);
  }
  else {
    BOOL v54 = 1;
  }
  int v55 = v102;
  if (!*(unsigned char *)(v37 + 16))
  {
    EvLog_v("GPS DD_Submit_WeekNum:  Week Num initialised to %d from SV %d");
LABEL_71:
    *(_WORD *)(v37 + 32) = v50;
    *(unsigned char *)(v37 + 16) = 1;
    *(_DWORD *)(v37 + 20) = *(_DWORD *)(v37 + 24);
    *(_DWORD *)(v37 + 64) = -1;
    *(_WORD *)(v37 + 68) = -1;
    *(_DWORD *)(v37 + 70) = 0;
    *(_WORD *)(v37 + 74) = 0;
    EvLog_v("GPS DD_Submit_WeekNum:  Week Num Submit %d %d from SV %d", 1, v53, v55);
    EvLog_v("DD_Proc_GPS_Eph_Subframe:  Submitted  WeekNum  %d  SV %d  DBts %d  %d", v53, v102, *(unsigned __int8 *)(v37 + 16), *(__int16 *)(v37 + 32));
    if (*(int *)v37 < 3) {
      *a12 = 0;
    }
    else {
      *a12 = v100 + 604800 * v53;
    }
    goto LABEL_86;
  }
  int v56 = *(unsigned __int16 *)(v37 + 32);
  char v57 = v56 == v50 || v54;
  if (v57)
  {
    if (v56 != v50 && v54)
    {
      uint64_t v58 = 0;
      while (*(unsigned __int16 *)(v37 + 2 * v58 + 64) != v50)
      {
        if (++v58 == 3) {
          goto LABEL_76;
        }
      }
      if (v58 >= 3)
      {
LABEL_76:
        uint64_t v59 = 0;
        while (*(__int16 *)(v37 + 2 * v59 + 64) != -1)
        {
          if (++v59 == 3) {
            goto LABEL_84;
          }
        }
        if (v59 < 3)
        {
          uint64_t v60 = v37 + 2 * v59;
          *(_WORD *)(v60 + 64) = v50;
          *(_WORD *)(v60 + 70) = 1;
          EvLog_v("GPS DD_Submit_WeekNum:  Week Num Candidate %d found on SV %d");
          goto LABEL_85;
        }
LABEL_84:
        *(_WORD *)(v37 + 68) = -1;
        *(_DWORD *)(v37 + 64) = -1;
        *(_DWORD *)(v37 + 70) = 0;
        *(_WORD *)(v37 + 74) = 0;
        EvLog_v("GPS DD_Submit_WeekNum:  Week Num Candidate overflow, %d >= %d");
        goto LABEL_85;
      }
      uint64_t v61 = v37 + 2 * v58;
      __int16 v62 = *(_WORD *)(v61 + 70) + 1;
      *(_WORD *)(v61 + 70) = v62;
      EvLog_v("GPS DD_Submit_WeekNum:  Week Num Candidate %d observed (%d) on SV %d", v53, v62, v102);
      int v63 = *(__int16 *)(v61 + 70);
      int v55 = v102;
      if (v63 < 3) {
        goto LABEL_85;
      }
      EvLog_v("GPS DD_Submit_WeekNum:  Week Num Candidate %d accepted based on %d observations");
      goto LABEL_71;
    }
  }
  else
  {
    EvCrt_v("GPS DD_Submit_WeekNum:  Week Num Candidate %d found on SV %d which fails bit validation check", v53, v102);
  }
LABEL_85:
  EvLog_v("GPS DD_Submit_WeekNum:  Week Num Submit %d %d from SV %d");
LABEL_86:
  if (v43 > 2) {
    return 0;
  }
  unsigned int v45 = 0x90207u >> (8 * v43);
LABEL_88:
  if (((a4 >> v45) & 1) == 0) {
    return 0;
  }
  int v64 = *(unsigned __int8 *)(v34 + 4 * v45 + 2);
  if (a2 == 1 && (a4 & 0x3C4) != 0x3C4) {
    return 0;
  }
  if (a2 >= 2 && (a4 & 0x3FC) != 0x3FC) {
    return 0;
  }
  int v65 = (unsigned __int16 *)(a7 + 6 * v101);
  int v66 = &v65[v93];
  int v67 = *v66;
  if (v64 != v67) {
    unsigned __int16 *v66 = v64;
  }
  if (v64 != *(unsigned __int16 *)(a8 + 2 * v101))
  {
    for (uint64_t i = 0; i != 6; i += 2)
    {
      if (2 * v93 != i) {
        *(_WORD *)(a10 + 6 * v101 + i) = 0;
      }
    }
    *(_WORD *)(a8 + 2 * v101) = v64;
  }
  unsigned int v69 = (_WORD *)(a10 + 6 * v101);
  int v70 = (unsigned __int16)*v69;
  if ((~v70 & 0x3C4) == 0)
  {
    uint64_t v71 = a10 + 6 * v101;
    int v73 = *(unsigned __int16 *)(v71 + 2);
    long long v72 = (_WORD *)(v71 + 2);
    if ((~v73 & 0x3FC) == 0)
    {
      uint64_t v74 = a10 + 6 * v101;
      int v76 = *(unsigned __int16 *)(v74 + 4);
      int v75 = (_WORD *)(v74 + 4);
      if ((~v76 & 0x3FC) == 0)
      {
        int v77 = *v65;
        if (v77 == *(unsigned __int16 *)(a7 + 6 * v101 + 2)
          && v77 == *(unsigned __int16 *)(a7 + 6 * v101 + 4))
        {
          long long v78 = (long long *)(a9 + 96 * v101);
          long long v79 = v78[3];
          long long v122 = v78[2];
          long long v123 = v79;
          long long v80 = v78[5];
          long long v124 = v78[4];
          long long v125 = v80;
          long long v81 = v78[1];
          long long v120 = *v78;
          *(_DWORD *)((char *)v126 + 7) = 0;
          v126[0] = 0;
          v119[0] = *a12;
          v119[1] = 4;
          long long v121 = v81;
          int v105 = 0;
          memset(v104, 0, sizeof(v104));
          long long v106 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          uint64_t v118 = 0;
          Get_GPS_Kep_Ephemeris(1, v92 + 1, (uint64_t)v119, (uint64_t)v104);
          int v82 = Kep_Check_Ephemeris(*a12 / 604800, *a12 % 604800, 1, (uint64_t)v104);
          __int16 v83 = v82;
          if (!ST_Check_Eph_Kep_Err((uint64_t)"DD_Proc_GPS_Eph_Subframe:", v82, (uint64_t)v104))
          {
            if ((v83 & 0xC) != 0) {
              *unsigned int v69 = 0;
            }
            if ((v83 & 0x3F0) != 0) {
              *long long v72 = 0;
            }
            if ((v83 & 0xC00) != 0)
            {
              *int v75 = 0;
LABEL_114:
              *(unsigned char *)(*(void *)(a6 + 112) + v101) = 1;
              goto LABEL_115;
            }
            if ((v83 & 0xFFC) != 0) {
              goto LABEL_114;
            }
          }
LABEL_115:
          int v70 = (unsigned __int16)*v69;
          uint64_t v26 = a10;
        }
      }
    }
  }
  if ((~v70 & 0x3C4) != 0) {
    return 0;
  }
  uint64_t v84 = v26 + 6 * v101;
  int v86 = *(unsigned __int16 *)(v84 + 2);
  uint64_t v85 = (_WORD *)(v84 + 2);
  if ((~v86 & 0x3FC) != 0) {
    return 0;
  }
  uint64_t v87 = v26 + 6 * v101;
  int v89 = *(unsigned __int16 *)(v87 + 4);
  long long v88 = (_WORD *)(v87 + 4);
  if ((~v89 & 0x3FC) != 0) {
    return 0;
  }
  int v90 = *v65;
  if (v90 != *(unsigned __int16 *)(a7 + 6 * v101 + 2)
    || v90 != *(unsigned __int16 *)(a7 + 6 * v101 + 4))
  {
    return 0;
  }
  if (v64 == v67
    && *(_DWORD *)(a6 + 116 * v101 + 224) == 0xFFFFFF
    && ((a5 & 1) != 0
     || ((0xE4FE7F3uLL >> (((unint64_t)*(unsigned int *)(a9 + 96 * v101) >> 2) & 0x1F)) & 1) == 0))
  {
    BOOL result = *(unsigned char *)(a13 + v101) == 0;
  }
  else
  {
    BOOL result = 0;
    *(unsigned char *)(a13 + v101) = 1;
  }
  *unsigned int v69 = 0;
  *uint64_t v85 = 0;
  *long long v88 = 0;
  return result;
}

BOOL DD_Proc_GPS_Alm_Subframe(int a1, __int16 a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  int v12 = ((*(_DWORD *)(a3 + 16) & 0xE0) == 0) & (0xE4FE7F3uLL >> (*(_DWORD *)(a3 + 16) & 0x1F));
  uint64_t v13 = (a1 - 1);
  if (*(unsigned char *)(*a7 + v13)) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(*a7 + v13)) {
    int v15 = 0;
  }
  else {
    int v15 = ((*(_DWORD *)(a3 + 16) & 0xE0) == 0) & (0xE4FE7F3uLL >> (*(_DWORD *)(a3 + 16) & 0x1F));
  }
  if (v15 == 1)
  {
    uint64_t v16 = a7[8];
    if (*(unsigned char *)(v16 + v13))
    {
      int v17 = (char *)a7 + 116 * (a1 - 1);
      int v18 = *((_DWORD *)v17 + 30);
      if (((0xE4FE7F3uLL >> (((unint64_t)*((unsigned int *)v17 + 32) >> 2) & 0x1F)) & 1) == 0 && v18 + 3600 > a4)
      {
LABEL_12:
        int v12 = 0;
        goto LABEL_16;
      }
      if (v18 + 100 < a4)
      {
        *(unsigned char *)(a7[4] + v13) = 0;
        *(unsigned char *)(v16 + v13) = 0;
        uint64_t v19 = a5 + 6 * (a1 - 1);
        *(_DWORD *)uint64_t v19 = 16777472;
        *(_WORD *)(v19 + 4) = 256;
        *(_WORD *)(a6 + 2 * v13) = 256;
      }
    }
    int v12 = 1;
  }
LABEL_16:
  uint64_t v43 = 0;
  int v42 = a4;
  long long v44 = *(_OWORD *)(a3 + 8);
  long long v45 = *(_OWORD *)(a3 + 24);
  __int16 v37 = 0;
  memset(v36, 0, 15);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  Get_GPS_Kep_Almanac((uint64_t)&v42, (uint64_t)v36);
  int v20 = Kep_Check_Almanac(a4 / 604800, (uint64_t)v36);
  if (v20) {
    *(unsigned char *)(a7[14] + v13) = 1;
  }
  BOOL result = ST_Check_Alm_Kep_Err((uint64_t)"DD_Proc_GPS_Alm_Subframe:", v20, (uint64_t)v36);
  if (result)
  {
    int v22 = (_OWORD *)*a7;
    *((unsigned char *)v22 + v13) = v12;
    int v23 = (char *)a7 + 44 * v13;
    BOOL v24 = (long long *)(v23 + 7544);
    *((_WORD *)v23 + 3777) = a2;
    long long v25 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v23 + 7572) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v23 + 7556) = v25;
    *((_DWORD *)v23 + 1886) = a4;
    *((_DWORD *)v23 + 1887) = 4;
    *(unsigned char *)(a7[5] + v13) = 1;
    *(unsigned char *)(a7[10] + v13) = 1;
    if (*((unsigned char *)v22 + v13)) {
      int v26 = 1;
    }
    else {
      int v26 = 2;
    }
    *(_DWORD *)(a7[2] + 20 * v13 + 4) = v26;
    uint64_t v27 = a7[3];
    if (!*(_DWORD *)(v27 + 20 * v13 + 8))
    {
      *(unsigned char *)(a7[1] + v13) = v12;
      if (v12) {
        int v28 = 1;
      }
      else {
        int v28 = 2;
      }
      *(_DWORD *)(v27 + 20 * v13 + 4) = v28;
    }
    if (a4 >= 1)
    {
      BOOL result = Core_Save_GPS_Alm(a1, 0, v24);
      int v22 = (_OWORD *)*a7;
    }
    uint64_t v29 = 0;
    LODWORD(v30) = 0;
    uint64_t v31 = p_NV;
    long long v32 = v22[1];
    *(_OWORD *)(p_NV + 100) = *v22;
    *(_OWORD *)(v31 + 116) = v32;
    uint64_t v33 = v31 + 96;
    __int16 v34 = -9871;
    do
    {
      int v35 = *(unsigned __int8 *)(v33 + v29) ^ HIBYTE(v34);
      __int16 v34 = -12691 * (v34 + (*(unsigned __int8 *)(v33 + v29) ^ HIBYTE(v34))) + 22719;
      uint64_t v30 = (v30 + v35);
      ++v29;
    }
    while (v29 != 40);
    *(void *)(v31 + 88) = v30;
  }
  return result;
}

uint64_t DD_Proc_GPS_Health_Subframe(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, long long **a6)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  Decode_GPS_Health_Subframe(a1, (BOOL *)&v31);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = (_WORD *)(a3 + 4);
  uint64_t v14 = 7544;
  uint64_t v15 = 120;
  do
  {
    char v16 = *((unsigned char *)&v31 + v12);
    if (*((unsigned char *)*a6 + v12))
    {
      if (!*((unsigned char *)&v31 + v12)) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }
    if (!*((unsigned char *)&v31 + v12))
    {
      char v16 = 0;
      goto LABEL_14;
    }
    int v17 = a6[8];
    int v18 = *((unsigned __int8 *)v17 + v12);
    if (*((unsigned char *)v17 + v12)
      && ((0xE4FE7F3uLL >> (((unint64_t)*(unsigned int *)((char *)a6 + v15 + 8) >> 2) & 0x1F)) & 1) == 0
      && *(_DWORD *)((char *)a6 + v15) + 3600 > a2)
    {
LABEL_12:
      char v16 = 0;
      *((unsigned char *)&v31 + v12) = 0;
LABEL_14:
      int v21 = 2;
      goto LABEL_22;
    }
    uint64_t v19 = a6[10];
    if (*((unsigned char *)v19 + v12))
    {
      int v20 = *(_DWORD *)((char *)a6 + v14);
      if (((0xE4FE7F3uLL >> (*(_DWORD *)((unsigned char *)a6 + v14 + 20) & 0x1F)) & 1) == 0 && v20 + 3600 > a2) {
        goto LABEL_12;
      }
      if (v20 + 100 < a2)
      {
        *((unsigned char *)a6[5] + v12) = 0;
        *((unsigned char *)v19 + v12) = 0;
        *(unsigned char *)(a5 + v12) = -1;
        int v17 = a6[8];
        int v18 = *((unsigned __int8 *)v17 + v12);
      }
    }
    if (v18 && *(_DWORD *)((char *)a6 + v15) + 100 < a2)
    {
      *((unsigned char *)a6[4] + v12) = 0;
      *((unsigned char *)v17 + v12) = 0;
      *((_DWORD *)v13 - 1) = 16777472;
      _WORD *v13 = 256;
      *(_WORD *)(a4 + 2 * v12) = 256;
    }
    char v16 = 1;
LABEL_21:
    int v21 = 1;
LABEL_22:
    *(_DWORD *)((char *)a6[2] + v11 + 4) = v21;
    uint64_t result = (uint64_t)a6[3] + v11;
    if (!*(_DWORD *)(result + 8))
    {
      *((unsigned char *)a6[1] + v12) = v16;
      *(_DWORD *)(result + 4) = v21;
    }
    ++v12;
    v11 += 20;
    v13 += 3;
    v14 += 44;
    v15 += 116;
  }
  while (v12 != 24);
  uint64_t v23 = 0;
  LODWORD(v24) = 0;
  long long v25 = *a6;
  long long *v25 = v31;
  *((void *)v25 + 2) = v32;
  uint64_t v26 = p_NV;
  long long v27 = **a6;
  *(_OWORD *)(p_NV + 116) = (*a6)[1];
  *(_OWORD *)(v26 + 100) = v27;
  uint64_t v28 = v26 + 96;
  __int16 v29 = -9871;
  do
  {
    int v30 = *(unsigned __int8 *)(v28 + v23) ^ HIBYTE(v29);
    __int16 v29 = -12691 * (v29 + (*(unsigned __int8 *)(v28 + v23) ^ HIBYTE(v29))) + 22719;
    uint64_t v24 = (v24 + v30);
    ++v23;
  }
  while (v23 != 40);
  *(void *)(v26 + 88) = v24;
  return result;
}

char *DD_Proc_GPS_ION_UTC_Subframe(unsigned int a1, _DWORD *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  int v9 = a2[7];
  int v8 = a2[8];
  unsigned int v10 = a2[9];
  unsigned int v11 = HIWORD(v10);
  if (BYTE2(v8) >= 0x21u)
  {
    int v12 = SBYTE2(v10);
LABEL_3:
    uint64_t result = EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  Invalid UTC Model  %d %d %d  %d %d %d", a2[7], BYTE1(a2[7]), SBYTE2(v8), v12, BYTE1(a2[8]), a2[8]);
    *(unsigned char *)(a5 + a1) = 1;
    return result;
  }
  int v12 = SBYTE2(v10);
  int v14 = BYTE2(v8) - SBYTE2(v10);
  if (v14 < 0) {
    int v14 = SBYTE2(v10) - BYTE2(v8);
  }
  BOOL v15 = (v8 - 8) < 0xF9u || v14 > 1;
  if (v15 || BYTE1(v9) >= 0x93u) {
    goto LABEL_3;
  }
  int v40 = a2[2];
  int v41 = a2[3];
  int v18 = a2[5];
  int v42 = a2[4];
  int v19 = a2[6];
  if (BYTE2(v10) != BYTE2(v8))
  {
    int v43 = a2[6];
    int v20 = a3;
    BOOL v21 = Is_Future_Leap_Sec_Date_Not_Valid(a3 / 604800, 1, BYTE1(v8), v8);
    int v19 = v43;
    a3 = v20;
    if (v21) {
      return EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  Invalid UTC Future Leap Second date  %d  %d %d %d");
    }
  }
  int v39 = a4;
  int v44 = v18 << 8 >> 8;
  int v22 = (v19 << 8) | BYTE2(v9);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v23 = a3;
  uint64_t result = (char *)Core_Get_GPS_UTC(a3, (uint64_t)&v45);
  if (!result) {
    goto LABEL_26;
  }
  if (BYTE2(v47) != BYTE2(v8)) {
    goto LABEL_20;
  }
  int v24 = SBYTE5(v47) - (char)v11;
  if (v24 < 0) {
    int v24 = (char)v11 - SBYTE5(v47);
  }
  if (v24 >= 2)
  {
LABEL_20:
    *(unsigned char *)(a6 + 8992) = 1;
    return EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  OTA UTC Leap Seconds  %d  %d  incompatible with Assistance  %d  %d");
  }
  int v25 = v39 - 1024 - BYTE1(v47);
  if (v25 >= 127) {
    int v25 = 127;
  }
  int v26 = v39 - 1024 - v9;
  if (v26 >= 127) {
    int v26 = 127;
  }
  if (vabdd_f64((double)v44* 8.8817842e-16* (double)(int)(v23- 619315200- (BYTE1(v9) << 12)- 604800 * ((v39 - 769 - (v26 + v9)) & 0xFFFFFF00 | v9))+ (double)v22 * 9.31322575e-10, (double)(int)v46* 8.8817842e-16* (double)(int)(v23- 619315200- (v47 << 12)- 604800 * ((v39 - 769 - BYTE1(v47) - v25) & 0xFFFFFF00 | BYTE1(v47)))+ (double)SHIDWORD(v46) * 9.31322575e-10) > 0.000001)
  {
    *(unsigned char *)(a6 + 8993) = 1;
    return EvCrt_v("DD_Proc_GPS_ION_UTC_Subframe:  Rejected:  OTA UTC Correction  %d ns incompatible with Assistance %d ns");
  }
  else
  {
LABEL_26:
    *(_DWORD *)(a6 + 8952) = v23;
    *(unsigned char *)(a6 + 8960) = BYTE1(v40);
    *(unsigned char *)(a6 + 8961) = v40;
    *(unsigned char *)(a6 + 8962) = BYTE2(v41);
    *(unsigned char *)(a6 + 8963) = BYTE1(v41);
    *(unsigned char *)(a6 + 8964) = v41;
    *(unsigned char *)(a6 + 8965) = BYTE2(v42);
    *(unsigned char *)(a6 + 8966) = BYTE1(v42);
    *(unsigned char *)(a6 + 8967) = v42;
    *(_DWORD *)(a6 + 8968) = v23;
    *(_DWORD *)(a6 + 8976) = v44;
    *(_DWORD *)(a6 + 8980) = v22;
    *(unsigned char *)(a6 + 8984) = BYTE1(v9);
    *(unsigned char *)(a6 + 8985) = v9;
    *(unsigned char *)(a6 + 8986) = BYTE2(v8);
    *(unsigned char *)(a6 + 8987) = BYTE1(v8);
    *(unsigned char *)(a6 + 8988) = v8;
    *(unsigned char *)(a6 + 8989) = v11;
    *(_WORD *)(a6 + 8990) = 0;
    *(_DWORD *)(a6 + 8956) = 4;
    *(_DWORD *)(a6 + 8972) = 4;
    if (v23 >= 1)
    {
      uint64_t v27 = 0;
      LODWORD(v28) = 0;
      uint64_t v29 = p_NV;
      *(_OWORD *)(p_NV + 144) = *(_OWORD *)(a6 + 8952);
      uint64_t v30 = v29 + 144;
      __int16 v31 = -9871;
      do
      {
        int v32 = *(unsigned __int8 *)(v30 + v27) ^ HIBYTE(v31);
        __int16 v31 = -12691 * (v31 + (*(unsigned __int8 *)(v30 + v27) ^ HIBYTE(v31))) + 22719;
        uint64_t v28 = (v28 + v32);
        ++v27;
      }
      while (v27 != 16);
      uint64_t v33 = 0;
      LODWORD(v34) = 0;
      *(void *)(v29 + 136) = v28;
      long long v35 = *(_OWORD *)(a6 + 8968);
      *(void *)(v29 + 184) = *(void *)(a6 + 8984);
      *(_OWORD *)(v29 + 168) = v35;
      uint64_t v36 = v29 + 168;
      __int16 v37 = -9871;
      do
      {
        int v38 = *(unsigned __int8 *)(v36 + v33) ^ HIBYTE(v37);
        __int16 v37 = -12691 * (v37 + (*(unsigned __int8 *)(v36 + v33) ^ HIBYTE(v37))) + 22719;
        uint64_t v34 = (v34 + v38);
        ++v33;
      }
      while (v33 != 24);
      *(void *)(v29 + 160) = v34;
    }
  }
  return result;
}

_OWORD *DD_Proc_GPS_AS_SV_Config_Subframe(const unsigned int *a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD **a7)
{
  v32[1] = *(int8x8_t *)MEMORY[0x263EF8340];
  Decode_GPS_AS_SV_Config_Subframe((uint64_t)a1, a3);
  Decode_GPS_Health_From_AS_Subfr(a1, v32);
  uint64_t v13 = (_WORD *)(a4 + 148);
  uint64_t v14 = 24;
  uint64_t v15 = 484;
  uint64_t v16 = 8600;
  uint64_t v17 = 2904;
  do
  {
    __int8 v18 = v32[-3].i8[v14];
    if (*((unsigned char *)*a7 + v14))
    {
      if (!v32[-3].i8[v14]) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }
    if (!v32[-3].i8[v14])
    {
      __int8 v18 = 0;
      goto LABEL_14;
    }
    int v19 = a7[8];
    int v20 = *((unsigned __int8 *)v19 + v14);
    if (*((unsigned char *)v19 + v14)
      && ((0xE4FE7F3uLL >> (((unint64_t)*(unsigned int *)((char *)a7 + v17 + 8) >> 2) & 0x1F)) & 1) == 0
      && *(_DWORD *)((char *)a7 + v17) + 3600 > a2)
    {
LABEL_12:
      __int8 v18 = 0;
      v32[-3].i8[v14] = 0;
LABEL_14:
      int v23 = 2;
      goto LABEL_22;
    }
    BOOL v21 = a7[10];
    if (*((unsigned char *)v21 + v14))
    {
      int v22 = *(_DWORD *)((char *)a7 + v16);
      if (((0xE4FE7F3uLL >> (*(_DWORD *)((unsigned char *)a7 + v16 + 20) & 0x1F)) & 1) == 0 && v22 + 3600 > a2) {
        goto LABEL_12;
      }
      if (v22 + 100 < a2)
      {
        *((unsigned char *)a7[5] + v14) = 0;
        *((unsigned char *)v21 + v14) = 0;
        *(unsigned char *)(a6 + v14) = -1;
        int v19 = a7[8];
        int v20 = *((unsigned __int8 *)v19 + v14);
      }
    }
    if (v20 && *(_DWORD *)((char *)a7 + v17) + 100 < a2)
    {
      *((unsigned char *)a7[4] + v14) = 0;
      *((unsigned char *)v19 + v14) = 0;
      *((_DWORD *)v13 - 1) = 16777472;
      _WORD *v13 = 256;
      *(_WORD *)(a5 + 2 * v14) = 256;
    }
    __int8 v18 = 1;
LABEL_21:
    int v23 = 1;
LABEL_22:
    *(_DWORD *)((char *)a7[2] + v15) = v23;
    uint64_t result = a7[3];
    if (!*(_DWORD *)((char *)result + v15 + 4))
    {
      *((unsigned char *)a7[1] + v14) = v18;
      *(_DWORD *)((char *)result + v15) = v23;
    }
    ++v14;
    v15 += 20;
    v13 += 3;
    v16 += 44;
    v17 += 116;
  }
  while (v14 != 32);
  uint64_t v25 = 0;
  LODWORD(v26) = 0;
  *((int8x8_t *)*a7 + 3) = v32[0];
  uint64_t v27 = p_NV;
  long long v28 = (*a7)[1];
  *(_OWORD *)(p_NV + 100) = **a7;
  *(_OWORD *)(v27 + 116) = v28;
  uint64_t v29 = v27 + 96;
  __int16 v30 = -9871;
  do
  {
    int v31 = *(unsigned __int8 *)(v29 + v25) ^ HIBYTE(v30);
    __int16 v30 = -12691 * (v30 + (*(unsigned __int8 *)(v29 + v25) ^ HIBYTE(v30))) + 22719;
    uint64_t v26 = (v26 + v31);
    ++v25;
  }
  while (v25 != 40);
  *(void *)(v27 + 88) = v26;
  return result;
}

uint64_t DD_Save_New_GPS_Eph(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = -3712;
  uint64_t v12 = 7544;
  do
  {
    if (!*(unsigned char *)(a3 + v10)) {
      goto LABEL_26;
    }
    uint64_t v13 = (long long *)(a2 + v8);
    unint64_t v14 = *(unsigned int *)(a2 + v8);
    if (!DD_Check_New_GPS_Eph(v10, a2, (uint64_t)a5))
    {
      *(unsigned char *)(a3 + v10) = 0;
      double v13[4] = 0u;
      unsigned __int8 v13[5] = 0u;
      void v13[2] = 0u;
      v13[3] = 0u;
      long long *v13 = 0u;
      v13[1] = 0u;
      goto LABEL_26;
    }
    unint64_t v15 = (0xE4FE7F3uLL >> ((v14 >> 2) & 0x1F)) & 1;
    uint64_t v16 = *a5;
    if (v15) {
      BOOL v17 = *(unsigned char *)(*a5 + v10) == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      uint64_t v18 = a5[10];
      if (!*(unsigned char *)(v18 + v10)) {
        goto LABEL_18;
      }
      int v19 = *(_DWORD *)((char *)a5 + v12);
      if (((0xE4FE7F3uLL >> (*(_DWORD *)((unsigned char *)a5 + v12 + 20) & 0x1F)) & 1) != 0 || v19 + 3600 <= a1)
      {
        if (v19 + 100 >= a1)
        {
LABEL_18:
          *(unsigned char *)(v16 + v10) = v15;
        }
        else
        {
          *(unsigned char *)(a5[5] + v10) = 0;
          *(unsigned char *)(v18 + v10) = 0;
          *(unsigned char *)(a4 + v10) = -1;
          *(unsigned char *)(*a5 + v10) = 1;
        }
LABEL_19:
        LOBYTE(v15) = 1;
        int v20 = 1;
        goto LABEL_20;
      }
      LOBYTE(v15) = 0;
      *(unsigned char *)(v16 + v10) = 0;
    }
    else
    {
      *(unsigned char *)(v16 + v10) = v15;
      if (v15) {
        goto LABEL_19;
      }
    }
    int v20 = 2;
LABEL_20:
    *(_DWORD *)(a5[2] + v9) = v20;
    BOOL v21 = (char *)a5 + v11;
    long long v22 = v13[4];
    long long v23 = v13[5];
    long long v24 = v13[3];
    *((_OWORD *)v21 + 242) = v13[2];
    *((_OWORD *)v21 + 245) = v23;
    *((_OWORD *)v21 + 244) = v22;
    *((_OWORD *)v21 + 243) = v24;
    long long v25 = *v13;
    *((_OWORD *)v21 + 241) = v13[1];
    *((_OWORD *)v21 + 240) = v25;
    if (*(unsigned char *)(a5[9] + v10))
    {
      *((_WORD *)v21 + 1970) = *((_WORD *)v21 + 3826);
      *(_DWORD *)(v21 + 3942) = *(_DWORD *)(v21 + 7654);
    }
    uint64_t v26 = a5[3];
    if (!*(_DWORD *)(v26 + v9 + 8))
    {
      *(unsigned char *)(a5[1] + v10) = v15;
      *(_DWORD *)(v26 + v9) = v20;
    }
    *((_DWORD *)v21 + 958) = a1;
    uint64_t v27 = (char *)a5 + v11;
    *((_DWORD *)v27 + 959) = 4;
    *(unsigned char *)(a5[4] + v10) = 1;
    *(unsigned char *)(a5[8] + v10) = 1;
    *((_DWORD *)v27 + 984) = 0;
    *(unsigned char *)(a5[13] + v10) = 0;
    *(unsigned char *)(a3 + v10) = 0;
    if (a1 >= 1)
    {
      *(unsigned char *)(a5[11] + v10) = 1;
      Core_Save_GPS_Eph((v10 + 1), 0, (long long *)(v21 + 3832));
    }
LABEL_26:
    ++v10;
    v11 += 116;
    v9 += 20;
    v8 += 96;
    v12 += 44;
  }
  while (v10 != 32);
  return 1;
}

BOOL DD_Check_New_GPS_Eph(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(*(void *)(a3 + 64) + a1);
  uint64_t v4 = a3 + 116 * a1;
  long long v5 = *(_OWORD *)(v4 + 176);
  long long v16 = *(_OWORD *)(v4 + 160);
  long long v17 = v5;
  long long v6 = *(_OWORD *)(v4 + 208);
  long long v18 = *(_OWORD *)(v4 + 192);
  long long v19 = v6;
  long long v7 = *(_OWORD *)(v4 + 144);
  long long v14 = *(_OWORD *)(v4 + 128);
  long long v15 = v7;
  if (!v3) {
    return 1;
  }
  uint64_t v8 = a2 + 96 * a1;
  if (((*(_DWORD *)(v8 + 20) ^ DWORD1(v15)) & 0xFF0000) != 0) {
    return 1;
  }
  uint64_t v10 = 0;
  int v11 = *(_DWORD *)(v4 + 224);
  int32x4_t v12 = 0uLL;
  do
  {
    int32x4_t v12 = vsubq_s32(v12, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)&v14 + v10), *(int32x4_t *)(v8 + v10))));
    v10 += 16;
  }
  while (v10 != 96);
  if (vaddvq_s32(v12)) {
    BOOL v13 = v11 == 0xFFFFFF;
  }
  else {
    BOOL v13 = 0;
  }
  return !v13;
}

void Comp_Track8(long double *a1)
{
  if (fabs(*a1) > 0.0005 || fabs(a1[1]) > 0.0005) {
    atan2(a1[1], *a1);
  }
}

uint64_t ds_Config(char **a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v168 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  char v9 = 83;
  uint64_t v10 = 1u;
  do
  {
    *a1 = v8 + 1;
    char *v8 = v9;
    uint64_t v8 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v8 = a1[2];
      *a1 = v8;
    }
    char v9 = aSoftwareConfig[v10++];
  }
  while (v10 != 32);
  *a1 = v8 + 1;
  char *v8 = 10;
  int v11 = *a1;
  if (*a1 >= a1[3]) {
    int v11 = a1[2];
  }
  char v12 = 83;
  uint64_t v13 = 1u;
  do
  {
    *a1 = v11 + 1;
    *int v11 = v12;
    int v11 = *a1;
    if (*a1 >= a1[3])
    {
      int v11 = a1[2];
      *a1 = v11;
    }
    char v12 = aSystemStatus[v13++];
  }
  while (v13 != 16);
  char v14 = 32;
  uint64_t v15 = 1u;
  do
  {
    *a1 = v11 + 1;
    *int v11 = v14;
    int v11 = *a1;
    if (*a1 >= a1[3])
    {
      int v11 = a1[2];
      *a1 = v11;
    }
    char v14 = aFixInt[v15++];
  }
  while (v15 != 10);
  sprintf_4f((uint64_t)a1, *(_DWORD *)(a2 + 1660), 4);
  uint64_t v16 = 0;
  long long v17 = *a1;
  char v18 = 32;
  do
  {
    *a1 = v17 + 1;
    *long long v17 = v18;
    long long v17 = *a1;
    if (*a1 >= a1[3])
    {
      long long v17 = a1[2];
      *a1 = v17;
    }
    char v18 = aRunTimeout[++v16];
  }
  while (v16 != 16);
  sprintf_4f((uint64_t)a1, *(_DWORD *)(a2 + 1668), 4);
  uint64_t v19 = 0;
  uint64_t v20 = *a1;
  char v21 = 32;
  do
  {
    *a1 = v20 + 1;
    *uint64_t v20 = v21;
    uint64_t v20 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v20 = a1[2];
      *a1 = v20;
    }
    char v21 = aBirthGpsWn[++v19];
  }
  while (v19 != 16);
  sprintf_5d(a1, *(__int16 *)(a2 + 1728));
  long long v22 = *a1;
  char v23 = 32;
  uint64_t v24 = 1u;
  do
  {
    *a1 = v22 + 1;
    char *v22 = v23;
    long long v22 = *a1;
    if (*a1 >= a1[3])
    {
      long long v22 = a1[2];
      *a1 = v22;
    }
    char v23 = aAccMasks[v24++];
  }
  while (v24 != 14);
  sprintf_ACC(a1, *(double *)(a2 + 1672));
  sprintf_ACC(a1, *(double *)(a2 + 1688));
  sprintf_ACC(a1, *(double *)(a2 + 1680));
  sprintf_ACC(a1, *(double *)(a2 + 1696));
  long long v25 = (*a1)++;
  char *v25 = 10;
  uint64_t v26 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v26 = a1[2];
  }
  char v27 = 32;
  uint64_t v28 = 1u;
  do
  {
    *a1 = v26 + 1;
    *uint64_t v26 = v27;
    uint64_t v26 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v26 = a1[2];
      *a1 = v26;
    }
    char v27 = aNomclkdriftNsS[v28++];
  }
  while (v28 != 36);
  double v29 = *(double *)(a2 + 1704) * 1000000000.0;
  double v30 = -0.5;
  if (v29 > 0.0) {
    double v30 = 0.5;
  }
  double v31 = v29 + v30;
  if (v31 <= 2147483650.0)
  {
    if (v31 >= -2147483650.0) {
      unsigned int v32 = (int)v31;
    }
    else {
      unsigned int v32 = 0x80000000;
    }
  }
  else
  {
    unsigned int v32 = 0x7FFFFFFF;
  }
  sprintf_6d(a1, v32);
  uint64_t v33 = *a1;
  char v34 = 32;
  uint64_t v35 = 1u;
  do
  {
    *a1 = v33 + 1;
    *uint64_t v33 = v34;
    uint64_t v33 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v33 = a1[2];
      *a1 = v33;
    }
    char v34 = aNomclkdriftdev[v35++];
  }
  while (v35 != 25);
  double v36 = *(double *)(a2 + 1712) * 1000000000.0;
  double v37 = -0.5;
  if (v36 > 0.0) {
    double v37 = 0.5;
  }
  double v38 = v36 + v37;
  if (v38 <= 2147483650.0)
  {
    if (v38 >= -2147483650.0) {
      unsigned int v39 = (int)v38;
    }
    else {
      unsigned int v39 = 0x80000000;
    }
  }
  else
  {
    unsigned int v39 = 0x7FFFFFFF;
  }
  sprintf_6d(a1, v39);
  int v40 = *a1;
  char v41 = 32;
  uint64_t v42 = 1u;
  do
  {
    *a1 = v40 + 1;
    *int v40 = v41;
    int v40 = *a1;
    if (*a1 >= a1[3])
    {
      int v40 = a1[2];
      *a1 = v40;
    }
    char v41 = aDynamics[v42++];
  }
  while (v42 != 13);
  sprintf_2d(a1, *(_DWORD *)(a2 + 60));
  int v43 = (*a1)++;
  *int v43 = 10;
  int v44 = *a1;
  if (*a1 >= a1[3]) {
    int v44 = a1[2];
  }
  char v45 = 80;
  uint64_t v46 = 1u;
  do
  {
    *a1 = v44 + 1;
    *int v44 = v45;
    int v44 = *a1;
    if (*a1 >= a1[3])
    {
      int v44 = a1[2];
      *a1 = v44;
    }
    char v45 = aProcessNoiseBo[v46++];
  }
  while (v46 != 27);
  sprintf_sgR8(a1, a4[4]);
  uint64_t v47 = *a1;
  char v48 = 32;
  uint64_t v49 = 1u;
  do
  {
    *a1 = v47 + 1;
    *uint64_t v47 = v48;
    uint64_t v47 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v47 = a1[2];
      *a1 = v47;
    }
    char v48 = aClkGSens[v49++];
  }
  while (v49 != 14);
  sprintf_sgR8(a1, a4[5]);
  unsigned __int16 v50 = *a1;
  char v51 = 32;
  uint64_t v52 = 1u;
  do
  {
    *a1 = v50 + 1;
    *unsigned __int16 v50 = v51;
    unsigned __int16 v50 = *a1;
    if (*a1 >= a1[3])
    {
      unsigned __int16 v50 = a1[2];
      *a1 = v50;
    }
    char v51 = aClkPhase[v52++];
  }
  while (v52 != 14);
  sprintf_sgR8(a1, a4[7]);
  int v53 = *a1;
  char v54 = 32;
  uint64_t v55 = 1u;
  do
  {
    *a1 = v53 + 1;
    char *v53 = v54;
    int v53 = *a1;
    if (*a1 >= a1[3])
    {
      int v53 = a1[2];
      *a1 = v53;
    }
    char v54 = aClkFreq[v55++];
  }
  while (v55 != 14);
  sprintf_sgR8(a1, a4[8]);
  int v56 = (*a1)++;
  char *v56 = 10;
  char v57 = *a1;
  if (*a1 >= a1[3]) {
    char v57 = a1[2];
  }
  char v58 = 32;
  uint64_t v59 = 1u;
  do
  {
    *a1 = v57 + 1;
    char *v57 = v58;
    char v57 = *a1;
    if (*a1 >= a1[3])
    {
      char v57 = a1[2];
      *a1 = v57;
    }
    char v58 = aHorzPos[v59++];
  }
  while (v59 != 27);
  sprintf_sgR8(a1, a4[10]);
  uint64_t v60 = *a1;
  char v61 = 32;
  uint64_t v62 = 1u;
  do
  {
    *a1 = v60 + 1;
    char *v60 = v61;
    uint64_t v60 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v60 = a1[2];
      *a1 = v60;
    }
    char v61 = aVertPos[v62++];
  }
  while (v62 != 14);
  sprintf_sgR8(a1, a4[11]);
  int v63 = *a1;
  char v64 = 32;
  uint64_t v65 = 1u;
  do
  {
    *a1 = v63 + 1;
    *int v63 = v64;
    int v63 = *a1;
    if (*a1 >= a1[3])
    {
      int v63 = a1[2];
      *a1 = v63;
    }
    char v64 = aHorzAcc[v65++];
  }
  while (v65 != 14);
  sprintf_sgR8(a1, a4[14]);
  int v66 = *a1;
  char v67 = 32;
  uint64_t v68 = 1u;
  do
  {
    *a1 = v66 + 1;
    char *v66 = v67;
    int v66 = *a1;
    if (*a1 >= a1[3])
    {
      int v66 = a1[2];
      *a1 = v66;
    }
    char v67 = aVertAcc[v68++];
  }
  while (v68 != 14);
  sprintf_sgR8(a1, a4[15]);
  unsigned int v69 = (*a1)++;
  *unsigned int v69 = 10;
  int v70 = *a1;
  if (*a1 >= a1[3]) {
    int v70 = a1[2];
  }
  char v71 = 82;
  uint64_t v72 = 1u;
  do
  {
    *a1 = v70 + 1;
    *int v70 = v71;
    int v70 = *a1;
    if (*a1 >= a1[3])
    {
      int v70 = a1[2];
      *a1 = v70;
    }
    char v71 = aReferencePosit[v72++];
  }
  while (v72 != 24);
  uint64_t v165 = a2;
  uint64_t v166 = a3;
  uint64_t v73 = 0;
  char v74 = 1;
  while (1)
  {
    int v75 = &a4[v73];
    int v76 = v75 + 8527;
    double v77 = v75[8527] * 57.2957795;
    double v78 = -v77;
    if (v77 >= 0.0) {
      double v78 = v75[8527] * 57.2957795;
    }
    unsigned int v79 = (int)v78;
    double v80 = (v78 - (double)(int)v78) * 60.0;
    unsigned int v81 = (int)v80;
    double v82 = (v80 - (double)(int)v80) * 60.0;
    sprintf_3d(a1, v79);
    sprintf_3d(a1, v81);
    double v83 = v82 * 100000.0 <= 0.0 ? -0.5 : 0.5;
    double v84 = v82 * 100000.0 + v83;
    if (v84 <= 2147483650.0) {
      unsigned int v85 = v84 >= -2147483650.0 ? (int)v84 : 0x80000000;
    }
    else {
      unsigned int v85 = 0x7FFFFFFF;
    }
    sprintf_8f((uint64_t)a1, v85, 6);
    double v86 = *v76;
    if ((v74 & 1) == 0) {
      break;
    }
    char v74 = 0;
    if (v86 >= 0.0) {
      uint64_t v87 = " N ";
    }
    else {
      uint64_t v87 = " S ";
    }
    char v88 = *v87;
    uint64_t v73 = 1;
    if (*v87)
    {
      int v89 = *a1;
      int v90 = (unsigned __int8 *)(v87 + 1);
      do
      {
        *a1 = v89 + 1;
        *int v89 = v88;
        int v89 = *a1;
        if (*a1 >= a1[3])
        {
          int v89 = a1[2];
          *a1 = v89;
        }
        int v91 = *v90++;
        char v88 = v91;
      }
      while (v91);
      char v74 = 0;
      uint64_t v73 = 1;
    }
  }
  char v92 = " E ";
  if (v86 < 0.0) {
    char v92 = " W ";
  }
  char v93 = *v92;
  if (*v92)
  {
    char v94 = *a1;
    long long v95 = (unsigned __int8 *)(v92 + 1);
    do
    {
      *a1 = v94 + 1;
      char *v94 = v93;
      char v94 = *a1;
      if (*a1 >= a1[3])
      {
        char v94 = a1[2];
        *a1 = v94;
      }
      int v96 = *v95++;
      char v93 = v96;
    }
    while (v96);
  }
  sprintf_sgR8(a1, a4[8529]);
  double v97 = (*a1)++;
  *double v97 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)a1);
  double v98 = *a1;
  char v99 = 71;
  uint64_t v100 = 1u;
  do
  {
    *a1 = v98 + 1;
    *double v98 = v99;
    double v98 = *a1;
    if (*a1 >= a1[3])
    {
      double v98 = a1[2];
      *a1 = v98;
    }
    char v99 = aGlonassL1ofInt[v100++];
  }
  while (v100 != 37);
  if (*(unsigned char *)(v165 + 1976)) {
    uint64_t v101 = "External_API";
  }
  else {
    uint64_t v101 = &ICB_Model_Name[12 * *(unsigned __int8 *)(v165 + 1856)];
  }
  char v102 = *v101;
  if (*v101)
  {
    long long v103 = (unsigned __int8 *)(v101 + 1);
    do
    {
      *a1 = v98 + 1;
      *double v98 = v102;
      double v98 = *a1;
      if (*a1 >= a1[3])
      {
        double v98 = a1[2];
        *a1 = v98;
      }
      int v104 = *v103++;
      char v102 = v104;
    }
    while (v104);
  }
  char v105 = 32;
  uint64_t v106 = 1u;
  do
  {
    *a1 = v98 + 1;
    *double v98 = v105;
    double v98 = *a1;
    if (*a1 >= a1[3])
    {
      double v98 = a1[2];
      *a1 = v98;
    }
    char v105 = asc_263D7581A[v106++];
  }
  while (v106 != 4);
  strcpy(v167, "-7");
  LOBYTE(v107) = 45;
  uint64_t v108 = 1;
  do
  {
    *a1 = v98 + 1;
    *double v98 = v107;
    double v98 = *a1;
    if (*a1 >= a1[3])
    {
      double v98 = a1[2];
      *a1 = v98;
    }
    int v107 = v167[v108++];
  }
  while (v107);
  char v109 = 46;
  uint64_t v110 = 1u;
  do
  {
    *a1 = v98 + 1;
    *double v98 = v109;
    double v98 = *a1;
    if (*a1 >= a1[3])
    {
      double v98 = a1[2];
      *a1 = v98;
    }
    char v109 = asc_263D7581E[v110++];
  }
  while (v110 != 4);
  LOBYTE(v111) = 54;
  strcpy(v167, "6");
  uint64_t v112 = 1;
  do
  {
    *a1 = v98 + 1;
    *double v98 = v111;
    double v98 = *a1;
    if (*a1 >= a1[3])
    {
      double v98 = a1[2];
      *a1 = v98;
    }
    int v111 = v167[v112++];
  }
  while (v111);
  *a1 = v98 + 1;
  *double v98 = 93;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  for (uint64_t i = 0; i != 112; i += 8)
  {
    double v114 = *(double *)(v165 + 1864 + i) * 100.0;
    if (v114 <= 2147483650.0)
    {
      if (v114 >= -2147483650.0) {
        unsigned int v115 = (int)v114;
      }
      else {
        unsigned int v115 = 0x80000000;
      }
    }
    else
    {
      unsigned int v115 = 0x7FFFFFFF;
    }
    sprintf_9f((uint64_t)a1, v115, 3);
  }
  long long v116 = (*a1)++;
  *long long v116 = 10;
  long long v117 = *a1;
  if (*a1 >= a1[3]) {
    long long v117 = a1[2];
  }
  char v118 = 66;
  uint64_t v119 = 1u;
  do
  {
    *a1 = v117 + 1;
    *long long v117 = v118;
    long long v117 = *a1;
    if (*a1 >= a1[3])
    {
      long long v117 = a1[2];
      *a1 = v117;
    }
    char v118 = aBeidouB1iInter[v119++];
  }
  while (v119 != 37);
  char v120 = ICB_Model_Name[12 * *(unsigned __int8 *)(v165 + 1856)];
  if (v120)
  {
    long long v121 = &ICB_Model_Name[12 * *(unsigned __int8 *)(v165 + 1856) + 1];
    do
    {
      *a1 = v117 + 1;
      *long long v117 = v120;
      long long v117 = *a1;
      if (*a1 >= a1[3])
      {
        long long v117 = a1[2];
        *a1 = v117;
      }
      int v122 = *v121++;
      char v120 = v122;
    }
    while (v122);
  }
  double v123 = *(double *)(v165 + 1984) * 100.0;
  if (v123 <= 2147483650.0)
  {
    if (v123 >= -2147483650.0) {
      unsigned int v124 = (int)v123;
    }
    else {
      unsigned int v124 = 0x80000000;
    }
  }
  else
  {
    unsigned int v124 = 0x7FFFFFFF;
  }
  sprintf_9f((uint64_t)a1, v124, 3);
  long long v125 = (*a1)++;
  *long long v125 = 10;
  int v126 = *a1;
  if (*a1 >= a1[3]) {
    int v126 = a1[2];
  }
  char v127 = 76;
  uint64_t v128 = 1u;
  do
  {
    *a1 = v126 + 1;
    *int v126 = v127;
    int v126 = *a1;
    if (*a1 >= a1[3])
    {
      int v126 = a1[2];
      *a1 = v126;
    }
    char v127 = aL5BandFamilyIn[v128++];
  }
  while (v128 != 37);
  if (*(unsigned char *)(v165 + 2000)) {
    int v129 = "External_API";
  }
  else {
    int v129 = &ICB_Model_Name[12 * *(unsigned __int8 *)(v165 + 1856)];
  }
  char v130 = *v129;
  if (*v129)
  {
    __int16 v131 = (unsigned __int8 *)(v129 + 1);
    do
    {
      *a1 = v126 + 1;
      *int v126 = v130;
      int v126 = *a1;
      if (*a1 >= a1[3])
      {
        int v126 = a1[2];
        *a1 = v126;
      }
      int v132 = *v131++;
      char v130 = v132;
    }
    while (v132);
  }
  double v133 = *(double *)(v165 + 1992) * 100.0;
  if (v133 <= 2147483650.0)
  {
    if (v133 >= -2147483650.0) {
      unsigned int v134 = (int)v133;
    }
    else {
      unsigned int v134 = 0x80000000;
    }
  }
  else
  {
    unsigned int v134 = 0x7FFFFFFF;
  }
  sprintf_9f((uint64_t)a1, v134, 3);
  unsigned __int8 v135 = (*a1)++;
  *unsigned __int8 v135 = 10;
  int v136 = *a1;
  if (*a1 >= a1[3]) {
    int v136 = a1[2];
  }
  uint64_t v137 = 0;
  char v138 = 69;
  do
  {
    *a1 = v136 + 1;
    *int v136 = v138;
    int v136 = *a1;
    if (*a1 >= a1[3])
    {
      int v136 = a1[2];
      *a1 = v136;
    }
    char v138 = aEstL5GroupDela[++v137];
  }
  while (v137 != 32);
  double v139 = *(double *)(v165 + 2016) * 1000.0;
  if (v139 <= 2147483650.0)
  {
    if (v139 >= -2147483650.0) {
      unsigned int v140 = (int)v139;
    }
    else {
      unsigned int v140 = 0x80000000;
    }
  }
  else
  {
    unsigned int v140 = 0x7FFFFFFF;
  }
  sprintf_4f((uint64_t)a1, v140, 4);
  int v141 = *a1;
  char v142 = 32;
  uint64_t v143 = 1u;
  do
  {
    *a1 = v141 + 1;
    *int v141 = v142;
    int v141 = *a1;
    if (*a1 >= a1[3])
    {
      int v141 = a1[2];
      *a1 = v141;
    }
    char v142 = aM_2[v143++];
  }
  while (v143 != 7);
  int v144 = *(_DWORD *)(v165 + 2024);
  if (v144 >= 0) {
    unsigned int v145 = *(_DWORD *)(v165 + 2024);
  }
  else {
    unsigned int v145 = -v144;
  }
  sprintf1da(a1, v145, v167, 0, v144 >> 31);
  uint64_t v146 = (*a1)++;
  *uint64_t v146 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)a1);
  uint64_t v147 = *a1;
  char v148 = 73;
  uint64_t v149 = 1u;
  do
  {
    *a1 = v147 + 1;
    *uint64_t v147 = v148;
    uint64_t v147 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v147 = a1[2];
      *a1 = v147;
    }
    char v148 = aInitialData[v149++];
  }
  while (v149 != 16);
  for (unsigned int j = 3; j > 1; --j)
  {
    *a1 = v147 + 1;
    *uint64_t v147 = 32;
    uint64_t v147 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v147 = a1[2];
      *a1 = v147;
    }
  }
  sprintf_6d(a1, *(_DWORD *)(v165 + 2036));
  sprintf_sgR8(a1, *(double *)(v165 + 2048));
  sprintf_sgR8(a1, *(double *)(v165 + 2040));
  int v151 = *a1;
  for (unsigned int k = 3; k > 1; --k)
  {
    *a1 = v151 + 1;
    *int v151 = 32;
    int v151 = *a1;
    if (*a1 >= a1[3])
    {
      int v151 = a1[2];
      *a1 = v151;
    }
  }
  int v153 = &g_TOW_Stat_As_String[10 * *(unsigned int *)(v166 + 108) + 1];
  char v154 = 32;
  do
  {
    *a1 = v151 + 1;
    *int v151 = v154;
    int v151 = *a1;
    if (*a1 >= a1[3])
    {
      int v151 = a1[2];
      *a1 = v151;
    }
    int v155 = *v153++;
    char v154 = v155;
  }
  while (v155);
  sprintf_10u(a1, *(_DWORD *)(v166 + 128));
  sprintf_6d(a1, *(__int16 *)(v166 + 112));
  sprintf_12f3(a1, *(double *)(v166 + 120));
  int v156 = (*a1)++;
  *int v156 = 10;
  char v157 = *a1;
  if (*a1 >= a1[3]) {
    char v157 = a1[2];
  }
  char v158 = 83;
  uint64_t v159 = 1u;
  do
  {
    *a1 = v157 + 1;
    *char v157 = v158;
    char v157 = *a1;
    if (*a1 >= a1[3])
    {
      char v157 = a1[2];
      *a1 = v157;
    }
    char v158 = aSbasNv[v159++];
  }
  while (v159 != 11);
  unsigned int v160 = (unsigned int *)&dword_26AA1ED04;
  uint64_t v161 = 18;
  do
  {
    if (*v160 && (int)*(v160 - 1) >= 1) {
      sprintf_4d(a1, *v160);
    }
    v160 += 8;
    --v161;
  }
  while (v161);
  int v162 = (*a1)++;
  *int v162 = 10;
  int v163 = *a1;
  if (*a1 >= a1[3]) {
    int v163 = a1[2];
  }
  *a1 = v163 + 1;
  *int v163 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  return GNSS_Nav_Debug_Flush_Check((uint64_t)a1);
}

void gnss::GnssAdaptDevice::Ga06_00GnssPeriodicFixCB(gnss::GnssAdaptDevice *a1, uint64_t a2, uint64_t *a3)
{
  int v4 = (int)a1;
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    uint64_t v6 = DeviceInstance;
    uint64_t v7 = *a3;
    uint64_t v8 = (long long *)a3[1];
    int v9 = *((_DWORD *)a3 + 4);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Result,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 73, "Ga06_01ReportPvtm", v4, v9);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (v4)
    {
      if (v4 == 8)
      {
        int v11 = *(NSObject **)(v6 + 152);
        blocunsigned int k = MEMORY[0x263EF8330];
        uint64_t v93 = 0x40000000;
        char v94 = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke;
        long long v95 = &__block_descriptor_tmp_3;
        uint64_t v96 = v6;
        char v97 = 8;
        dispatch_async(v11, &block);
      }
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PVTM Resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga06_01ReportPvtm", 769, v4);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    else if (v9 == 2)
    {
      if (v7) {
        operator new();
      }
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v51 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NavData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "ADP", 69, "Ga06_01ReportPvtm", 770);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    else if (v9 == 4)
    {
      if (v8)
      {
        uint64_t v13 = &v55;
        uint64_t v55 = 0;
        int v56 = &v55;
        uint64_t v57 = 0x1E002000000;
        char v58 = __Block_byref_object_copy__0;
        uint64_t v59 = __Block_byref_object_dispose__0;
        unsigned __int16 v66 = 0;
        __int16 v69 = 0;
        __int16 v83 = 0;
        uint64_t v84 = 0;
        __int16 v85 = 0;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        int v65 = 0;
        memset(&v67, 0, 13);
        *(_DWORD *)((char *)v68 + 7) = 0;
        v68[0] = 0;
        uint64_t v71 = 0;
        uint64_t v70 = 0;
        *(void *)((char *)&v72[1] + 3) = 0;
        *(void *)uint64_t v72 = 0;
        *(void *)&v72[5] = 0;
        *(void *)&v72[7] = 0;
        __int16 v73 = 0;
        v75[0] = 0;
        uint64_t v74 = 0;
        *(void *)((char *)v75 + 6) = 0;
        v76[0] = 0;
        *(void *)((char *)v76 + 6) = 0;
        int v75[2] = 0;
        uint64_t v82 = 0;
        long long v81 = 0u;
        long long v80 = 0u;
        long long v79 = 0u;
        long long v78 = 0u;
        long long v77 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v86 = 0u;
        uint64_t v91 = 0;
        unsigned __int16 v66 = *((_WORD *)v8 + 44);
        int v14 = v66;
        if (v66)
        {
          uint64_t v15 = *((unsigned __int16 *)v8 + 44);
          uint64_t v16 = (char *)operator new[](192 * v15, MEMORY[0x263F8C180]);
          if (!v16)
          {
            char v67 = 0;
            snprintf((char *)&block, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_01ReportPvtm", 99, "Memory allocation failed for SigMeas ");
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v52 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "OSA", 69, "Ga06_01ReportPvtm", (const char *)&block);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
            if (gp_Logger) {
              (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
            }
            __assert_rtn("Ga06_01ReportPvtm", "ga06GnssPvtmUtils.cpp", 99, "false && \"Memory allocation failed for SigMeas \"");
          }
          if (v15)
          {
            long long v17 = v16;
            do
            {
              *(_DWORD *)long long v17 = 0xFFFF;
              *((_WORD *)v17 + 2) = 0;
              *((_WORD *)v17 + 37) = 0;
              *((void *)v17 + 17) = 0;
              v17[144] = 0;
              *(_DWORD *)(v17 + 186) = 0;
              *((_WORD *)v17 + 95) = 0;
              *((void *)v17 + 2) = 0;
              *((void *)v17 + 3) = 0;
              *((void *)v17 + 1) = 0;
              v17[32] = 0;
              *(_OWORD *)(v17 + 40) = 0uLL;
              *(_OWORD *)(v17 + 56) = 0uLL;
              v17[72] = 0;
              *((_OWORD *)v17 + 5) = 0uLL;
              *((_OWORD *)v17 + 6) = 0uLL;
              *((_OWORD *)v17 + 7) = 0uLL;
              *(void *)(v17 + 127) = 0;
              v17[184] = 0;
              *(_OWORD *)(v17 + 168) = 0uLL;
              *(_OWORD *)(v17 + 152) = 0uLL;
              v17 += 192;
            }
            while (v17 != &v16[192 * v15]);
          }
          char v67 = v16;
          memcpy_s("Ga06_01ReportPvtm", 106, v16, 192 * v14, *((const void **)v8 + 12), 192 * *((unsigned __int16 *)v8 + 44));
          uint64_t v13 = v56;
        }
        int v18 = *((unsigned __int16 *)v8 + 164);
        *((_WORD *)v13 + 184) = v18;
        if (v18)
        {
          int v19 = *((unsigned __int16 *)v8 + 164);
          uint64_t v20 = (char *)operator new[](104 * *((unsigned __int16 *)v8 + 164), MEMORY[0x263F8C180]);
          if (!v20)
          {
            v13[47] = 0;
            snprintf((char *)&block, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_01ReportPvtm", 116, "Memory allocation failed for SVUsage");
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v53 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "OSA", 69, "Ga06_01ReportPvtm", (const char *)&block);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
            if (gp_Logger) {
              (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
            }
            __assert_rtn("Ga06_01ReportPvtm", "ga06GnssPvtmUtils.cpp", 116, "false && \"Memory allocation failed for SVUsage\"");
          }
          if (v19)
          {
            char v21 = v20;
            do
            {
              *(_WORD *)char v21 = 0;
              _OWORD v21[2] = 0;
              *((void *)v21 + 1) = 0;
              *((void *)v21 + 2) = 0;
              *((_WORD *)v21 + 12) = 0;
              *((_OWORD *)v21 + 2) = 0uLL;
              *((_OWORD *)v21 + 3) = 0uLL;
              *((_OWORD *)v21 + 4) = 0uLL;
              *((_OWORD *)v21 + 5) = 0uLL;
              *((void *)v21 + 12) = 0;
              v21 += 104;
            }
            while (v21 != &v20[104 * v19]);
          }
          v13[47] = (uint64_t)v20;
          memcpy_s("Ga06_01ReportPvtm", 125, v20, 104 * *((unsigned __int16 *)v13 + 184), *((const void **)v8 + 42), 104 * *((unsigned __int16 *)v8 + 164));
          uint64_t v13 = v56;
        }
        int v22 = *((unsigned __int16 *)v8 + 172);
        *((_WORD *)v13 + 192) = v22;
        if (v22)
        {
          uint64_t v23 = *((unsigned __int16 *)v8 + 172);
          uint64_t v24 = (char *)operator new[](264 * v23, MEMORY[0x263F8C180]);
          if (!v24)
          {
            v13[49] = 0;
            snprintf((char *)&block, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_01ReportPvtm", 135, "Memory allocation failed for SVState");
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v54 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "OSA", 69, "Ga06_01ReportPvtm", (const char *)&block);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
            if (gp_Logger) {
              (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
            }
            __assert_rtn("Ga06_01ReportPvtm", "ga06GnssPvtmUtils.cpp", 135, "false && \"Memory allocation failed for SVState\"");
          }
          if (v23)
          {
            long long v25 = v24;
            do
            {
              char *v25 = 0;
              *((_WORD *)v25 + 1) = 0;
              void v25[4] = 0;
              v25[8] = 0;
              *((void *)v25 + 22) = 0;
              *((_DWORD *)v25 + 46) = 0;
              *((_OWORD *)v25 + 1) = 0uLL;
              *((_OWORD *)v25 + 2) = 0uLL;
              *((_OWORD *)v25 + 3) = 0uLL;
              *((_OWORD *)v25 + 4) = 0uLL;
              *((_OWORD *)v25 + 5) = 0uLL;
              *((_OWORD *)v25 + 6) = 0uLL;
              *((_OWORD *)v25 + 7) = 0uLL;
              *((_OWORD *)v25 + 8) = 0uLL;
              *((_OWORD *)v25 + 9) = 0uLL;
              *(_OWORD *)(v25 + 153) = 0uLL;
              *((_OWORD *)v25 + 12) = 0uLL;
              *((_OWORD *)v25 + 13) = 0uLL;
              *((_OWORD *)v25 + 14) = 0uLL;
              *((_OWORD *)v25 + 15) = 0uLL;
              *((_WORD *)v25 + 128) = 0;
              v25 += 264;
            }
            while (v25 != &v24[264 * v23]);
          }
          v13[49] = (uint64_t)v24;
          memcpy_s("Ga06_01ReportPvtm", 146, v24, 264 * *((unsigned __int16 *)v13 + 192), *((const void **)v8 + 44), 264 * *((unsigned __int16 *)v8 + 172));
          uint64_t v13 = v56;
        }
        long long v26 = *v8;
        *(_OWORD *)(v13 + 7) = v8[1];
        *(_OWORD *)(v13 + 5) = v26;
        long long v27 = v8[2];
        long long v28 = v8[3];
        long long v29 = v8[4];
        *((_DWORD *)v13 + 30) = *((_DWORD *)v8 + 20);
        *(_OWORD *)(v13 + 13) = v29;
        *(_OWORD *)(v13 + 11) = v28;
        *(_OWORD *)(v13 + 9) = v27;
        long long v30 = *(long long *)((char *)v8 + 152);
        long long v31 = *(long long *)((char *)v8 + 184);
        long long v32 = *(long long *)((char *)v8 + 136);
        *((_OWORD *)v13 + 13) = *(long long *)((char *)v8 + 168);
        *((_OWORD *)v13 + 14) = v31;
        *((_OWORD *)v13 + 11) = v32;
        *((_OWORD *)v13 + 12) = v30;
        long long v33 = *(long long *)((char *)v8 + 216);
        long long v34 = *(long long *)((char *)v8 + 248);
        long long v35 = *(long long *)((char *)v8 + 200);
        *((_OWORD *)v13 + 17) = *(long long *)((char *)v8 + 232);
        *((_OWORD *)v13 + 18) = v34;
        *((_OWORD *)v13 + 15) = v35;
        *((_OWORD *)v13 + 16) = v33;
        long long v37 = *(long long *)((char *)v8 + 280);
        long long v36 = *(long long *)((char *)v8 + 296);
        long long v38 = *(long long *)((char *)v8 + 264);
        *(_OWORD *)((char *)v13 + 348) = *(long long *)((char *)v8 + 308);
        *((_OWORD *)v13 + 20) = v37;
        *((_OWORD *)v13 + 21) = v36;
        *((_OWORD *)v13 + 19) = v38;
        long long v39 = *(long long *)((char *)v8 + 120);
        *((_OWORD *)v13 + 9) = *(long long *)((char *)v8 + 104);
        *((_OWORD *)v13 + 10) = v39;
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v40 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: L5GroupDelayAnalyticsData,Est,%.3fm,Est_Unc,%.3f,NonVolatile,%.3fm,Age,%ds\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 68, "Ga06_01ReportPvtm", *((double *)v56 + 42), *((double *)v56 + 43), *((double *)v56 + 44), *((_DWORD *)v56 + 90));
          gnssOsa_PrintLog(__str, 5, 1, 0);
          uint64_t v13 = v56;
        }
        if (!*(unsigned char *)(v6 + 93) && *((double *)v13 + 43) <= 0.25)
        {
          double v41 = *((double *)v13 + 42);
          double v42 = *((double *)v13 + 44);
          blocunsigned int k = v41;
          uint64_t v93 = *(void *)&v42;
          int v43 = *((_DWORD *)v13 + 90);
          LODWORD(v94) = v43;
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v44 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GPSD-L5GroupDelayAnalyticsData,Est,%.3fm,Est_Unc,%.3f,NonVolatile,%.3fm,Age,%ds\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 73, "Ga06_01ReportPvtm", v41, *((double *)v56 + 43), v42, v43);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          HalExtensions = gnss::GnssAdaptDevice::getHalExtensions((gnss::GnssAdaptDevice *)v6);
          (*(void (**)(void *, double *))(*(void *)HalExtensions + 48))(HalExtensions, &block);
          *(unsigned char *)(v6 + 93) = 1;
          uint64_t v13 = v56;
        }
        *((_OWORD *)v13 + 25) = *(long long *)((char *)v8 + 360);
        long long v46 = *(long long *)((char *)v8 + 376);
        long long v47 = *(long long *)((char *)v8 + 392);
        long long v48 = *(long long *)((char *)v8 + 424);
        *((_OWORD *)v13 + 28) = *(long long *)((char *)v8 + 408);
        *((_OWORD *)v13 + 29) = v48;
        *((_OWORD *)v13 + 26) = v46;
        *((_OWORD *)v13 + 27) = v47;
        uint64_t v49 = *(NSObject **)(v6 + 152);
        *(void *)long long __str = MEMORY[0x263EF8330];
        uint64_t v99 = 0x40000000;
        uint64_t v100 = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_16;
        uint64_t v101 = &unk_2655E7020;
        uint64_t v103 = v6;
        char v102 = &v55;
        dispatch_async(v49, __str);
        _Block_object_dispose(&v55, 8);
      }
      else if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v50 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MeasData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "ADP", 69, "Ga06_01ReportPvtm", 770);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
  }
}

void sub_263CF69CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Positioning Session Aborted,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "Ga06_01ReportPvtm_block_invoke", 1025, *(unsigned __int8 *)(a1 + 40));
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  *(unsigned char *)(v1 + 89) = 0;
}

void *__Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  double v2 = (void *)(a1 + 40);
  uint64_t v3 = (const void *)(a2 + 40);

  return memcpy(v2, v3, 0x1B8uLL);
}

uint64_t *___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_16(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v434 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v403 = 0;
  v404 = &v403;
  uint64_t v405 = 0x3002000000;
  v406 = __Block_byref_object_copy__17;
  uint64_t v352 = v2;
  v407 = __Block_byref_object_dispose__18;
  uint64_t v408 = 0;
  uint64_t v397 = 0;
  v398 = &v397;
  uint64_t v399 = 0x3002000000;
  v400 = __Block_byref_object_copy__19;
  v401 = __Block_byref_object_dispose__20;
  uint64_t v402 = 0;
  uint64_t v3 = *(float **)(v2 + 144);
  if ((v3 & 2) == 0) {
    goto LABEL_173;
  }
  uint64_t v377 = *(void *)(*(void *)(a1 + 32) + 8);
  int v4 = (char *)operator new(0x88uLL, MEMORY[0x263F8C180]);
  if (!v4)
  {
    v389 = 0;
    snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_04GetMeasReport", 605, "Memory allocation failed for Measurement Report");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v340 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v340), "OSA", 69, "Ga06_04GetMeasReport", v419);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    if (gp_Logger) {
      (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
    }
    __assert_rtn("Ga06_04GetMeasReport", "ga06GnssPvtmUtils.cpp", 605, "false && \"Memory allocation failed for Measurement Report\"");
  }
  uint64_t v5 = (uint64_t)v4;
  *(void *)int v4 = -1;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v4 + 8) = v6;
  *(int64x2_t *)(v4 + 24) = v6;
  *((_WORD *)v4 + 20) = 0;
  int64x2_t v346 = v6;
  *((int64x2_t *)v4 + 3) = v6;
  *((int32x2_t *)v4 + 8) = vdup_n_s32(0x7FC00000u);
  *((_DWORD *)v4 + 18) = 2143289344;
  *((void *)v4 + 10) = 0x8000000000000000;
  __asm { FMOV            V0.2S, #-1.0 }
  *((void *)v4 + 11) = _D0;
  *((void *)v4 + 12) = 0x7FF8000000000000;
  *((void *)v4 + 14) = 0;
  v347 = (int **)(v4 + 112);
  *((_DWORD *)v4 + 26) = -1082130432;
  *((void *)v4 + 15) = 0;
  *((void *)v4 + 16) = 0;
  v389 = v4;
  if (*(unsigned __int16 *)(v377 + 128) >= 0x100u) {
    uint64_t v10 = 256;
  }
  else {
    uint64_t v10 = *(unsigned __int16 *)(v377 + 128);
  }
  int v11 = &qword_26A9CA000;
  uint64_t v12 = "ADP";
  if (v10)
  {
    uint64_t v13 = 0;
    char v349 = (char)v3;
    uint64_t v353 = v10;
    v345 = v4;
    do
    {
      uint64_t v14 = *(void *)(v377 + 136);
      if (!v14) {
        break;
      }
      if (*(unsigned __int16 *)(v377 + 128) <= (unsigned __int16)v13)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v17 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Indx\n", (unint64_t)(*((double *)v11 + 41) * (double)v17), v12, 69, "Ga06_05GetMeasSvId", 514);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      else
      {
        LODWORD(v10) = *(unsigned __int8 *)(v14 + 192 * v13 + 2);
        switch(*(unsigned char *)(v14 + 192 * v13 + 2))
        {
          case 1:
          case 2:
          case 3:
            int v15 = *(unsigned __int8 *)(v14 + 192 * v13 + 3);
            switch(v15)
            {
              case 7:
                LOBYTE(v375) = *(unsigned char *)(v14 + 192 * v13 + 4);
                LOBYTE(v12) = 127;
                int v16 = 32;
                goto LABEL_35;
              case 3:
                LOBYTE(v375) = *(unsigned char *)(v14 + 192 * v13 + 4);
                LOBYTE(v12) = 127;
                int v16 = 16;
                goto LABEL_35;
              case 1:
                LOBYTE(v375) = *(unsigned char *)(v14 + 192 * v13 + 4);
                LOBYTE(v12) = 127;
                int v16 = 1;
                goto LABEL_35;
            }
            uint64_t v10 = v353;
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v33 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PRN,%d,Signal,%u\n", (unint64_t)(*((double *)v11 + 41) * (double)v33), v12, 87, "Ga06_05GetMeasSvId", 770, *(__int16 *)(*(void *)(v377 + 136) + 192 * v13 + 4), *(unsigned __int8 *)(*(void *)(v377 + 136) + 192 * v13 + 2));
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            break;
          case 4:
            unsigned int v350 = *(unsigned __int16 *)(v14 + 192 * v13 + 4);
            uint64_t v10 = v353;
            if ((unsigned __int16)(v350 + 7) > 0xDu)
            {
              if (g_LbsOsaTrace_Config >= 2)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v41 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLON SvID,%d\n", (unint64_t)(*((double *)v11 + 41) * (double)v41), v12, 87, "Ga06_05GetMeasSvId", 772, *(__int16 *)(*(void *)(v377 + 136) + 192 * v13 + 4));
                gnssOsa_PrintLog(__str, 2, 1, 0);
              }
            }
            else
            {
              if (*(__int16 *)(v14 + 192 * v13) < 0
                || (unsigned int v20 = *(unsigned __int16 *)(v14 + 192 * v13), v20 >= *(unsigned __int16 *)(v377 + 368)))
              {
                LOBYTE(v21) = 0;
LABEL_50:
                LOBYTE(v375) = 0;
LABEL_51:
                LODWORD(v10) = 4;
                int v16 = 2;
                LOWORD(v12) = *(_WORD *)(v14 + 192 * v13 + 4);
LABEL_52:
                char v23 = 4;
LABEL_53:
                if (v10 == 4)
                {
                  LOBYTE(v24) = 0;
                  LOBYTE(v29) = 0;
                  LOBYTE(v31) = 0;
                  unsigned int v42 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
                  char v28 = v42 & 1;
                  int v25 = (v42 >> 1) & 1;
                  int v26 = (v42 >> 2) & 1;
                  int v27 = (v42 >> 3) & 1;
                  goto LABEL_62;
                }
                if (v10 != 3 && v10 != 1)
                {
                  LOBYTE(v24) = 0;
                  LOBYTE(v25) = 0;
                  LOBYTE(v26) = 0;
                  LOBYTE(v27) = 0;
                  char v28 = 0;
                  LOBYTE(v29) = 0;
                  LOBYTE(v31) = 0;
                  goto LABEL_62;
                }
                goto LABEL_61;
              }
              uint64_t v21 = *(void *)(v377 + 376);
              if (!v21) {
                goto LABEL_50;
              }
              int v375 = *(unsigned __int8 *)(v21 + 104 * *(unsigned __int16 *)(v14 + 192 * v13) + 1);
              if ((v375 - 25) > 0xFFFFFFE7)
              {
                int v16 = *(unsigned __int8 *)(v21 + 104 * *(unsigned __int16 *)(v14 + 192 * v13) + 2);
                uint64_t v10 = 4;
                LOBYTE(v21) = 1;
                uint64_t v12 = (const char *)*(unsigned __int16 *)(v14 + 192 * v13 + 4);
                switch(v16)
                {
                  case 0:
                  case 1:
                    LOBYTE(v21) = 0;
                    goto LABEL_136;
                  case 2:
                    goto LABEL_52;
                  case 3:
                    LOBYTE(v21) = 2;
LABEL_136:
                    int v16 = 2;
                    goto LABEL_52;
                  case 4:
                    int v16 = 2;
                    LOBYTE(v21) = 3;
                    goto LABEL_52;
                  default:
                    if (g_LbsOsaTrace_Config < 2)
                    {
                      LOBYTE(v21) = 0;
                      goto LABEL_51;
                    }
                    bzero(__str, 0x3C6uLL);
                    uint64_t v117 = mach_continuous_time();
                    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLON SlotNum,%u\n", (unint64_t)(*((double *)v11 + 41) * (double)v117), (const char *)v350, 87, "Ga06_05GetMeasSvId", 770, *(unsigned __int8 *)(*(void *)(v377 + 376) + 104 * v20 + 2));
                    gnssOsa_PrintLog(__str, 2, 1, 0);
                    uint64_t v14 = *(void *)(v377 + 136);
                    if (v14)
                    {
                      LODWORD(v10) = *(unsigned __int8 *)(v14 + 192 * v13 + 2);
                      int v16 = 2;
                      LOBYTE(v12) = v350;
                      goto LABEL_35;
                    }
                    if (g_LbsOsaTrace_Config)
                    {
                      bzero(__str, 0x3C6uLL);
                      uint64_t v118 = mach_continuous_time();
                      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SVMeasElem\n", (unint64_t)(*((double *)v11 + 41) * (double)v118), (const char *)v350, 69, "Ga06_06GetMeasSyncState", 513);
                      gnssOsa_PrintLog(__str, 1, 1, 0);
                    }
                    break;
                }
              }
              else if (g_LbsOsaTrace_Config >= 2)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v22 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GLON SlotNum,%u\n", (unint64_t)(*((double *)v11 + 41) * (double)v22), v12, 87, "Ga06_05GetMeasSvId", 772, *(unsigned __int8 *)(*(void *)(v377 + 376) + 104 * v20 + 1));
                gnssOsa_PrintLog(__str, 2, 1, 0);
              }
            }
            break;
          case 5:
          case 6:
          case 7:
            if (*(unsigned __int16 *)(v14 + 192 * v13 + 4) - 1 <= 0x3E)
            {
              LOBYTE(v375) = *(_WORD *)(v14 + 192 * v13 + 4);
              LOBYTE(v12) = 127;
              int v16 = 4;
              goto LABEL_35;
            }
            uint64_t v10 = v353;
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v18 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx BEID SvID,%d\n", (unint64_t)(*((double *)v11 + 41) * (double)v18), v12, 87, "Ga06_05GetMeasSvId", 770, *(__int16 *)(*(void *)(v377 + 136) + 192 * v13 + 4));
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            break;
          case 8:
          case 9:
            if (*(unsigned __int16 *)(v14 + 192 * v13 + 4) - 1 <= 0x31)
            {
              LOBYTE(v375) = *(_WORD *)(v14 + 192 * v13 + 4);
              LOBYTE(v12) = 127;
              int v16 = 8;
LABEL_35:
              LOBYTE(v21) = 0;
              char v23 = 1;
              LOBYTE(v24) = v10;
              LOBYTE(v25) = v10;
              LOBYTE(v26) = v10;
              LOBYTE(v27) = v10;
              char v28 = v10;
              LOBYTE(v29) = v10;
              char v30 = v10;
              LOBYTE(v31) = v10;
              switch((int)v10)
              {
                case 0:
                  goto LABEL_63;
                case 2:
                  LOBYTE(v10) = 0;
                  LOBYTE(v29) = 0;
                  LOBYTE(v31) = 0;
                  unsigned int v32 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
                  LOBYTE(v24) = v32 & 1;
                  int v25 = (v32 >> 1) & 1;
                  int v26 = (v32 >> 2) & 1;
                  int v27 = (v32 >> 3) & 1;
                  char v30 = 2;
                  char v28 = v32 & 1;
                  goto LABEL_63;
                case 3:
                  LOBYTE(v21) = 0;
                  unsigned int v37 = *(unsigned __int8 *)(v14 + 192 * v13 + 3);
                  if (v37 > 7)
                  {
                    LODWORD(v10) = 3;
                    goto LABEL_52;
                  }
                  int v38 = 1 << v37;
                  if ((v38 & 0x75) != 0)
                  {
                    LOBYTE(v21) = 0;
                    char v23 = 0;
                  }
                  else if ((v38 & 0xA) != 0)
                  {
                    LOBYTE(v21) = 0;
                    char v23 = 3;
                  }
                  else
                  {
                    char v23 = 10;
                  }
                  break;
                case 4:
                  goto LABEL_52;
                case 5:
                  LOBYTE(v10) = 0;
                  LOBYTE(v27) = 0;
                  LOBYTE(v29) = 0;
                  LOBYTE(v31) = 0;
                  unsigned int v39 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
                  int v24 = (v39 >> 1) & 1;
                  char v28 = v39 & 1;
                  int v25 = (v39 >> 2) & 1;
                  int v26 = (v39 >> 3) & 1;
                  char v30 = 5;
                  goto LABEL_63;
                case 6:
                  LOBYTE(v10) = 0;
                  LOBYTE(v27) = 0;
                  LOBYTE(v29) = 0;
                  LOBYTE(v31) = 0;
                  unsigned int v34 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
                  int v24 = (v34 >> 1) & 1;
                  char v28 = v34 & 1;
                  int v25 = (v34 >> 2) & 1;
                  int v26 = (v34 >> 3) & 1;
                  char v30 = 6;
                  goto LABEL_63;
                case 7:
                  LOBYTE(v10) = 0;
                  LOBYTE(v27) = 0;
                  LOBYTE(v29) = 0;
                  LOBYTE(v31) = 0;
                  unsigned int v35 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
                  int v24 = (v35 >> 1) & 1;
                  char v28 = v35 & 1;
                  int v25 = (v35 >> 2) & 1;
                  int v26 = (v35 >> 3) & 1;
                  char v30 = 7;
                  goto LABEL_63;
                case 8:
                  LOBYTE(v10) = 0;
                  LOBYTE(v27) = 0;
                  LOBYTE(v29) = 0;
                  LOBYTE(v31) = 0;
                  unsigned int v36 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
                  int v24 = (v36 >> 1) & 1;
                  char v28 = v36 & 1;
                  int v25 = (v36 >> 2) & 1;
                  int v26 = (v36 >> 3) & 1;
                  char v30 = 8;
                  goto LABEL_63;
                case 9:
                  LOBYTE(v10) = 0;
                  LOBYTE(v25) = 0;
                  LOBYTE(v26) = 0;
                  char v28 = 0;
                  unsigned int v40 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
                  int v27 = (v40 >> 1) & 1;
                  LOBYTE(v24) = v40 & 1;
                  int v31 = (v40 >> 2) & 1;
                  int v29 = (v40 >> 3) & 1;
                  char v30 = 9;
                  goto LABEL_63;
                default:
                  goto LABEL_53;
              }
LABEL_61:
              LOBYTE(v27) = 0;
              LOBYTE(v29) = 0;
              LOBYTE(v31) = 0;
              unsigned int v43 = *(unsigned __int8 *)(v14 + 192 * v13 + 32);
              char v28 = v43 & 1;
              int v24 = (v43 >> 1) & 1;
              int v25 = (v43 >> 2) & 1;
              int v26 = (v43 >> 3) & 1;
LABEL_62:
              LOBYTE(v10) = v21;
              char v30 = v23;
LABEL_63:
              uint64_t v44 = v14 + 192 * v13;
              uint64_t v45 = *(void *)(v44 + 8);
              uint64_t v46 = *(void *)(v44 + 16);
              uint64_t v47 = *(void *)(v44 + 24);
              char v48 = *(unsigned char *)(v44 + 134);
              uint64_t v50 = *(void *)(v44 + 40);
              double v49 = *(double *)(v44 + 48);
              uint64_t v52 = *(void *)(v44 + 80);
              uint64_t v51 = *(void *)(v44 + 88);
              double v53 = *(double *)(v44 + 104);
              if (v53 <= 0.0)
              {
                double v55 = *(double *)(v44 + 120);
                double v53 = -1.0;
                uint64_t v57 = 0x7FF8000000000000;
                if (v55 <= 0.0)
                {
                  double v374 = -1.0;
                  char v56 = 1;
                  uint64_t v54 = 0x7FF8000000000000;
                  goto LABEL_73;
                }
                uint64_t v54 = 0x7FF8000000000000;
              }
              else
              {
                uint64_t v54 = *(void *)(v44 + 96);
                double v55 = *(double *)(v44 + 120);
                if (v55 <= 0.0)
                {
                  char v56 = 1;
                  if (*(unsigned char *)(v14 + 192 * v13 + 129) == 4)
                  {
                    uint64_t v57 = *(void *)(v44 + 96);
                    double v55 = *(double *)(v44 + 104);
                    goto LABEL_70;
                  }
                  double v374 = -1.0;
                  uint64_t v57 = 0x7FF8000000000000;
LABEL_73:
                  if (*(unsigned char *)(v14 + 192 * v13 + 144) == 2)
                  {
                    uint64_t v58 = v14 + 192 * v13;
                    uint64x2_t v369 = vcvtq_u64_f64(*(float64x2_t *)(v58 + 152));
                    uint64_t v371 = *(void *)(v58 + 168);
                    double v373 = *(double *)(v58 + 176);
                  }
                  else
                  {
                    v59.i64[0] = -1;
                    v59.i64[1] = -1;
                    uint64x2_t v369 = v59;
                    double v373 = -1.0;
                    uint64_t v371 = 0x7FF8000000000000;
                  }
                  uint64_t v60 = v14 + 192 * v13;
                  double v61 = *(double *)(v60 + 56);
                  unsigned int v62 = *(unsigned __int8 *)(v60 + 184);
                  if (v62 >= 3) {
                    char v63 = 0;
                  }
                  else {
                    char v63 = v62;
                  }
                  char v366 = v29;
                  char v365 = v31;
                  char v364 = v27;
                  char v361 = v28;
                  char v362 = v25;
                  char v359 = v30;
                  char v360 = v26;
                  char v367 = v48;
                  uint64_t v357 = v46;
                  uint64_t v358 = v47;
                  uint64_t v356 = v45;
                  char v354 = v63;
                  char v355 = v56;
                  if ((v3 & 4) != 0)
                  {
                    char v348 = v24;
                    int v64 = v16;
                    int v65 = (char *)operator new(0x98uLL, MEMORY[0x263F8C180]);
                    if (!v65)
                    {
                      snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_07GetMeasExtn", 1263, "Memory allocation failed for MeasExtn");
                      if (g_LbsOsaTrace_Config)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v339 = mach_continuous_time();
                        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v339), "OSA", 69, "Ga06_07GetMeasExtn", v419);
                        gnssOsa_PrintLog(__str, 1, 1, 0);
                      }
                      if (gp_Logger) {
                        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
                      }
                      __assert_rtn("Ga06_07GetMeasExtn", "ga06GnssPvtmUtils.cpp", 1263, "false && \"Memory allocation failed for MeasExtn\"");
                    }
                    uint64_t v3 = (float *)v65;
                    int32x4_t v66 = vdupq_n_s32(0x7FC00000u);
                    *(void *)int v65 = v66.i64[0];
                    *(int64x2_t *)(v65 + 8) = v346;
                    v65[24] = 0;
                    *((int32x4_t *)v65 + 2) = v66;
                    *((int32x4_t *)v65 + 3) = v66;
                    *((void *)v65 + 8) = 0xFFFF7FC00000;
                    v65[72] = 0;
                    v65[76] = 0;
                    v65[80] = 0;
                    v65[84] = 0;
                    v65[88] = 0;
                    *((_WORD *)v65 + 46) = 0;
                    v65[124] = 0;
                    *((void *)v65 + 17) = 0;
                    *((void *)v65 + 18) = 0;
                    *((void *)v65 + 16) = 0;
                    *((void *)v65 + 12) = 0;
                    *((void *)v65 + 13) = 0;
                    v65[120] = 0;
                    *((void *)v65 + 14) = 0;
                    if (*(unsigned __int16 *)(v377 + 128) <= (unsigned __int16)v13)
                    {
                      if (g_LbsOsaTrace_Config)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v77 = mach_continuous_time();
                        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Indx\n", (unint64_t)(*((double *)v11 + 41) * (double)v77), "ADP", 69, "Ga06_07GetMeasExtn", 514);
                        gnssOsa_PrintLog(__str, 1, 1, 0);
                      }
                      std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](v3);
                      uint64_t v3 = 0;
                      int v16 = v64;
                      LOBYTE(v29) = v366;
                      LOBYTE(v31) = v365;
                      LOBYTE(v27) = v364;
                      LOBYTE(v24) = v348;
                      char v28 = v361;
                      LOBYTE(v25) = v362;
                      char v30 = v359;
                      LOBYTE(v26) = v360;
                    }
                    else
                    {
                      char v67 = (double *)(v14 + 192 * v13);
                      *((_WORD *)v65 + 34) = *((_WORD *)v67 + 65);
                      *(_DWORD *)int v65 = 0;
                      float v68 = v67[8];
                      *((float *)v65 + 1) = v68;
                      *((_WORD *)v65 + 35) = *((_WORD *)v67 + 37);
                      v65[72] = *((unsigned char *)v67 + 72);
                      unsigned int v69 = *((unsigned __int8 *)v67 + 128);
                      if (v69 >= 5) {
                        LOBYTE(v69) = 0;
                      }
                      v65[92] = v69;
                      unsigned int v70 = *((unsigned __int8 *)v67 + 129);
                      if (v70 >= 5) {
                        LOBYTE(v70) = 0;
                      }
                      v65[93] = v70;
                      LOWORD(v68) = *((_WORD *)v67 + 93);
                      *(float *)&unsigned int v71 = (float)LODWORD(v68) * 0.001;
                      *((float *)v65 + 19) = *(float *)&v71;
                      v65[80] = 1;
                      LOWORD(v71) = *((_WORD *)v67 + 94);
                      *((float *)v65 + 21) = (float)v71 * 0.001;
                      v65[88] = 1;
                      int v72 = *(__int16 *)v67;
                      if (v72 < 0)
                      {
                        int v16 = v64;
                      }
                      else
                      {
                        unsigned int v73 = (unsigned __int16)v72;
                        int v16 = v64;
                        if ((unsigned __int16)v72 < *(unsigned __int16 *)(v377 + 368))
                        {
                          uint64_t v74 = *(void *)(v377 + 376);
                          if (v74)
                          {
                            uint64_t v75 = v74 + 104 * v73;
                            *((void *)v65 + 1) = *(void *)(v75 + 8);
                            double v76 = *(double *)(v75 + 80);
                            *((double *)v65 + 2) = v76;
                            switch(*(unsigned char *)(v75 + 24))
                            {
                              case 0:
                                v65[24] = 0;
                                break;
                              case 1:
                                char v78 = 2;
                                goto LABEL_101;
                              case 2:
                                char v78 = 1;
                                goto LABEL_101;
                              case 3:
                                char v78 = 3;
                                goto LABEL_101;
                              case 4:
                                char v78 = 4;
LABEL_101:
                                v65[24] = v78;
                                break;
                              default:
                                v65[24] = 0;
                                if (g_LbsOsaTrace_Config >= 2)
                                {
                                  bzero(__str, 0x3C6uLL);
                                  uint64_t v116 = mach_continuous_time();
                                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ToTsource,%u\n", (unint64_t)(*((double *)v11 + 41) * (double)v116), "ADP", 87, "Ga06_07GetMeasExtn", 770, *(unsigned __int8 *)(*(void *)(v377 + 376) + 104 * v73 + 24));
                                  gnssOsa_PrintLog(__str, 2, 1, 0);
                                  uint64_t v74 = *(void *)(v377 + 376);
                                  double v76 = *(double *)(v74 + 104 * v73 + 80);
                                  int v16 = v64;
                                }
                                break;
                            }
                            long long v79 = (double *)(v74 + 104 * v73);
                            double v80 = v79[12];
                            if (v80 >= 3.40282347e38) {
                              double v80 = 3.40282347e38;
                            }
                            float v81 = v80;
                            v3[16] = v81;
                            float v82 = v79[4];
                            v3[8] = v82;
                            float v83 = v79[7];
                            float v84 = v76;
                            v3[9] = v83;
                            v3[10] = v84;
                            float v85 = v79[5];
                            v3[11] = v85;
                            float v86 = v79[8];
                            v3[12] = v86;
                            float v87 = v79[11];
                            _OWORD v3[13] = v87;
                            float v88 = v79[6];
                            v3[14] = v88;
                            float v89 = v79[9];
                            unsigned char v3[15] = v89;
                          }
                        }
                      }
                      LOBYTE(v29) = v366;
                      LOBYTE(v31) = v365;
                      LOBYTE(v27) = v364;
                      LOBYTE(v24) = v348;
                      char v28 = v361;
                      LOBYTE(v25) = v362;
                      char v30 = v359;
                      LOBYTE(v26) = v360;
                    }
                    uint64_t v46 = v357;
                    uint64_t v47 = v358;
                    uint64_t v45 = v356;
                    char v63 = v354;
                    char v56 = v355;
                  }
                  else
                  {
                    uint64_t v3 = 0;
                  }
                  float v90 = v49;
                  float v91 = v61;
                  uint64_t v93 = *(int **)(v5 + 120);
                  unint64_t v92 = *(void *)(v5 + 128);
                  if ((unint64_t)v93 >= v92)
                  {
                    uint64_t v351 = v13;
                    long long v95 = *v347;
                    uint64_t v96 = 0x2E8BA2E8BA2E8BA3 * (((char *)v93 - (char *)*v347) >> 4);
                    unint64_t v97 = v96 + 1;
                    if ((unint64_t)(v96 + 1) > 0x1745D1745D1745DLL) {
                      std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v92 - (void)v95) >> 4);
                    if (2 * v98 > v97) {
                      unint64_t v97 = 2 * v98;
                    }
                    if (v98 >= 0xBA2E8BA2E8BA2ELL) {
                      unint64_t v99 = 0x1745D1745D1745DLL;
                    }
                    else {
                      unint64_t v99 = v97;
                    }
                    if (v99 > 0x1745D1745D1745DLL) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    char v100 = v24;
                    char v101 = v10;
                    int v102 = v16;
                    uint64_t v103 = (char *)operator new(176 * v99);
                    uint64_t v104 = &v103[176 * v96];
                    *(_DWORD *)uint64_t v104 = v102;
                    v104[4] = v375;
                    v104[5] = v101;
                    v104[6] = (char)v12;
                    char v105 = &v103[176 * v99];
                    v104[8] = v359;
                    v104[9] = v361;
                    v104[10] = v100;
                    v104[11] = v362;
                    v104[12] = v360;
                    v104[13] = v364;
                    v104[14] = 0;
                    v104[15] = v366;
                    v104[16] = 0;
                    v104[17] = v365;
                    v104[18] = v366;
                    *(_DWORD *)(v104 + 19) = v415;
                    v104[23] = v416;
                    *((void *)v104 + 3) = v356;
                    *((void *)v104 + 4) = v357;
                    *((void *)v104 + 5) = v358;
                    *((void *)v104 + 6) = v50;
                    *((float *)v104 + 14) = v90;
                    *((void *)v104 + 8) = v52;
                    *((void *)v104 + 9) = v51;
                    *((void *)v104 + 10) = v54;
                    *((double *)v104 + 11) = v53;
                    *((void *)v104 + 12) = v57;
                    *((double *)v104 + 13) = v374;
                    v104[112] = v355;
                    *(_DWORD *)(v104 + 113) = v409;
                    *((_DWORD *)v104 + 29) = *(_DWORD *)((char *)&v409 + 3);
                    *(uint64x2_t *)(v104 + 120) = v369;
                    *((void *)v104 + 17) = v371;
                    *((double *)v104 + 18) = v373;
                    v104[152] = 0;
                    *((void *)v104 + 20) = v3;
                    *((float *)v104 + 42) = v91;
                    v104[172] = v354;
                    char v94 = v104 + 176;
                    v104[173] = v367;
                    if (v93 == v95)
                    {
                      uint64_t v5 = (uint64_t)v345;
                      v345[14] = v104;
                      v345[15] = v94;
                      v345[16] = v105;
                      int v11 = &qword_26A9CA000;
                      uint64_t v12 = "ADP";
                      LOBYTE(v3) = v349;
                      uint64_t v13 = v351;
                      uint64_t v10 = v353;
                    }
                    else
                    {
                      uint64_t v12 = "ADP";
                      LOBYTE(v3) = v349;
                      uint64_t v13 = v351;
                      uint64_t v10 = v353;
                      do
                      {
                        long long v106 = *((_OWORD *)v93 - 10);
                        *((_OWORD *)v104 - 11) = *((_OWORD *)v93 - 11);
                        *((_OWORD *)v104 - 10) = v106;
                        long long v107 = *((_OWORD *)v93 - 9);
                        long long v108 = *((_OWORD *)v93 - 8);
                        long long v109 = *((_OWORD *)v93 - 6);
                        *((_OWORD *)v104 - 7) = *((_OWORD *)v93 - 7);
                        *((_OWORD *)v104 - 6) = v109;
                        *((_OWORD *)v104 - 9) = v107;
                        *((_OWORD *)v104 - 8) = v108;
                        long long v110 = *((_OWORD *)v93 - 5);
                        long long v111 = *((_OWORD *)v93 - 4);
                        long long v112 = *((_OWORD *)v93 - 3);
                        *(_OWORD *)(v104 - 39) = *(_OWORD *)((char *)v93 - 39);
                        *((_OWORD *)v104 - 4) = v111;
                        *((_OWORD *)v104 - 3) = v112;
                        *((_OWORD *)v104 - 5) = v110;
                        uint64_t v113 = *((void *)v93 - 2);
                        *((void *)v93 - 2) = 0;
                        *((void *)v104 - 2) = v113;
                        LODWORD(v113) = *(v93 - 2);
                        *((_WORD *)v104 - 2) = *((_WORD *)v93 - 2);
                        *((_DWORD *)v104 - 2) = v113;
                        v104 -= 176;
                        v93 -= 44;
                      }
                      while (v93 != v95);
                      uint64_t v5 = (uint64_t)v345;
                      uint64_t v93 = (int *)v345[14];
                      double v114 = (int *)v345[15];
                      v345[14] = v104;
                      v345[15] = v94;
                      v345[16] = v105;
                      int v11 = &qword_26A9CA000;
                      while (v114 != v93)
                      {
                        unsigned int v115 = (void *)*((void *)v114 - 2);
                        *((void *)v114 - 2) = 0;
                        if (v115) {
                          std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](v115);
                        }
                        v114 -= 44;
                      }
                    }
                    uint64_t v1 = a1;
                    if (v93) {
                      operator delete(v93);
                    }
                  }
                  else
                  {
                    int *v93 = v16;
                    *((unsigned char *)v93 + 4) = v375;
                    *((unsigned char *)v93 + 5) = v10;
                    *((unsigned char *)v93 + 6) = (_BYTE)v12;
                    *((unsigned char *)v93 + 8) = v30;
                    *((unsigned char *)v93 + 9) = v28;
                    *((unsigned char *)v93 + 10) = v24;
                    *((unsigned char *)v93 + 11) = v25;
                    *((unsigned char *)v93 + 12) = v26;
                    *((unsigned char *)v93 + 13) = v27;
                    *((unsigned char *)v93 + 14) = 0;
                    *((unsigned char *)v93 + 15) = v29;
                    *((unsigned char *)v93 + 16) = 0;
                    *((unsigned char *)v93 + 17) = v31;
                    *((unsigned char *)v93 + 18) = v29;
                    *(int *)((char *)v93 + 19) = v415;
                    *((unsigned char *)v93 + 23) = v416;
                    *((void *)v93 + 3) = v45;
                    *((void *)v93 + 4) = v46;
                    *((void *)v93 + 5) = v47;
                    *((void *)v93 + 6) = v50;
                    *((float *)v93 + 14) = v90;
                    *((void *)v93 + 8) = v52;
                    *((void *)v93 + 9) = v51;
                    *((void *)v93 + 10) = v54;
                    *((double *)v93 + 11) = v53;
                    *((void *)v93 + 12) = v57;
                    *((double *)v93 + 13) = v374;
                    *((unsigned char *)v93 + 112) = v56;
                    *(int *)((char *)v93 + 113) = v409;
                    v93[29] = *(_DWORD *)((char *)&v409 + 3);
                    *(uint64x2_t *)(v93 + 30) = v369;
                    *((void *)v93 + 17) = v371;
                    *((double *)v93 + 18) = v373;
                    *((unsigned char *)v93 + 152) = 0;
                    *((void *)v93 + 20) = v3;
                    *((float *)v93 + 42) = v91;
                    *((unsigned char *)v93 + 172) = v63;
                    char v94 = v93 + 44;
                    *((unsigned char *)v93 + 173) = v48;
                    uint64_t v12 = "ADP";
                    LOBYTE(v3) = v349;
                    uint64_t v10 = v353;
                  }
                  *(void *)(v5 + 120) = v94;
                  break;
                }
              }
              char v56 = 0;
              uint64_t v57 = *(void *)(v14 + 192 * v13 + 112);
LABEL_70:
              double v374 = v55;
              goto LABEL_73;
            }
            uint64_t v10 = v353;
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v19 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GAL SvId,%d\n", (unint64_t)(*((double *)v11 + 41) * (double)v19), v12, 87, "Ga06_05GetMeasSvId", 772, *(__int16 *)(*(void *)(v377 + 136) + 192 * v13 + 4));
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            break;
          default:
            int v16 = 0;
            LOBYTE(v375) = 0;
            LOBYTE(v12) = 127;
            goto LABEL_35;
        }
      }
      ++v13;
    }
    while (v13 != v10);
  }
  *(void *)uint64_t v5 = *(void *)(v377 + 40);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v377 + 88);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v377 + 104);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v377 + 48);
  *(float32x2_t *)(v5 + 64) = vcvt_f32_f64(*(float64x2_t *)(v377 + 64));
  float v119 = *(double *)(v377 + 80);
  *(float *)(v5 + 72) = v119;
  double v120 = *(double *)(v377 + 312);
  if (v120 <= 0.0)
  {
    unsigned int v124 = (double *)&unk_263D83000;
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v128 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsBiasUncns is unknown\n", (unint64_t)(*((double *)v11 + 41) * (double)v128), v12, 68, "Ga06_04GetMeasReport");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    *(void *)(v5 + 80) = *(void *)(v377 + 296);
    double v121 = *(double *)(v377 + 304);
    _CF = (v121 > 0.5 || v121 < -0.5) && g_LbsOsaTrace_Config >= 2;
    unsigned int v124 = (double *)&unk_263D83000;
    if (_CF)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v125 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GpsBiassubns,%f\n", (unint64_t)(*((double *)v11 + 41) * (double)v125), v12, 87, "Ga06_04GetMeasReport", 514, *(double *)(v377 + 304));
      gnssOsa_PrintLog(__str, 2, 1, 0);
      double v121 = *(double *)(v377 + 304);
      double v120 = *(double *)(v377 + 312);
    }
    float v126 = v121;
    *(float *)(v5 + 88) = v126;
    if (v120 <= 3.40282347e38)
    {
      float v129 = v120;
      *(float *)(v5 + 92) = v129;
    }
    else
    {
      *(_DWORD *)(v5 + 92) = 2139095039;
      if (g_LbsOsaTrace_Config < 5) {
        goto LABEL_161;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v127 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RxGpsBiasUncns larger than float max,limiting to float max,%f\n", (unint64_t)(*((double *)v11 + 41) * (double)v127), v12, 68, "Ga06_04GetMeasReport", *(double *)(v377 + 312));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v130 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: OffsetNs,%lld,SubOffsetNs,%f,OffsetUncNs,%f\n", (unint64_t)(*((double *)v11 + 41) * (double)v130), v12, 68, "Ga06_04GetMeasReport", *(void *)(v5 + 80), *(float *)(v5 + 88), *(float *)(v5 + 92));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
LABEL_161:
  *(void *)(v5 + 96) = *(void *)(v377 + 320);
  double v131 = *(double *)(v377 + 328);
  if (v131 <= v124[297])
  {
    float v133 = v131;
    *(float *)(v5 + 104) = v133;
LABEL_165:
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v134 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DriftPpb,%f,DriftUncPpb,%f\n", (unint64_t)(*((double *)v11 + 41) * (double)v134), v12, 68, "Ga06_04GetMeasReport", *(double *)(v5 + 96), *(float *)(v5 + 104));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    goto LABEL_167;
  }
  *(_DWORD *)(v5 + 104) = 2139095039;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v132 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RxGpsFrqUncppb larger than float max,limiting to float max,%f\n", (unint64_t)(*((double *)v11 + 41) * (double)v132), v12, 68, "Ga06_04GetMeasReport", *(double *)(v377 + 328));
    gnssOsa_PrintLog(__str, 5, 1, 0);
    goto LABEL_165;
  }
LABEL_167:
  v389 = 0;
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100]((uint64_t *)&v389, 0);
  uint64_t v381 = 0;
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](v404 + 5, v5);
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v381, 0);
  uint64_t v135 = *(void *)(*(void *)(v1 + 32) + 8);
  int v136 = (char *)operator new(0x28uLL, MEMORY[0x263F8C180]);
  if (!v136)
  {
    snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_GetKlobucharIono", 575, "Memory allocation failed for Klobuchar parameters");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v341 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v341), "OSA", 69, "Ga06_GetKlobucharIono", v419);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    if (gp_Logger) {
      (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
    }
    __assert_rtn("Ga06_GetKlobucharIono", "ga06GnssPvtmUtils.cpp", 575, "false && \"Memory allocation failed for Klobuchar parameters\"");
  }
  uint64_t v137 = (float *)v136;
  *((void *)v136 + 4) = 0;
  *(_OWORD *)int v136 = 0u;
  *((_OWORD *)v136 + 1) = 0u;
  *(void *)int v136 = 1000000000 * *(int *)(v135 + 400);
  *(float32x4_t *)(v136 + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v135 + 408)), *(float64x2_t *)(v135 + 424));
  *(float32x4_t *)(v136 + 24) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v135 + 440)), *(float64x2_t *)(v135 + 456));
  uint64_t v2 = v352;
  if (g_LbsOsaTrace_Config > 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v138 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Klobuchar GPS_ns,%llu,alpha,%10.3e,%10.3e,%10.3e,%10.3e,beta,%9.1f,%9.1f,%9.1f,%9.1f\n", (unint64_t)(*((double *)v11 + 41) * (double)v138), v12, 68, "Ga06_GetKlobucharIono", *(void *)v137, v137[2], v137[3], v137[4], v137[5], v137[6], v137[7], v137[8], v137[9]);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  uint64_t v139 = v398[5];
  v398[5] = (uint64_t)v137;
  if (v139) {
    MEMORY[0x263E6EDB0](v139, 0x1000C400A747E1ELL);
  }
  uint64_t v3 = *(float **)(v352 + 144);
LABEL_173:
  v389 = 0;
  v390 = (uint64_t *)&v389;
  uint64_t v391 = 0x4002000000;
  v392 = __Block_byref_object_copy__21;
  v393 = __Block_byref_object_dispose__22;
  v394 = 0;
  v395 = 0;
  uint64_t v396 = 0;
  if ((v3 & 0x10) != 0)
  {
    uint64_t v140 = *(void *)(*(void *)(v1 + 32) + 8);
    unsigned int v141 = *(unsigned __int16 *)(v140 + 384);
    if (*(_WORD *)(v140 + 384))
    {
      char v142 = 0;
      uint64_t v143 = 0;
      int v144 = 0;
      unsigned int v145 = 0;
      unint64_t v146 = 0;
      int v147 = 0;
      uint64_t v148 = *(void *)(v140 + 392);
      do
      {
        if (*(_WORD *)(v148 + 264 * v146 + 184))
        {
          unsigned __int8 v149 = 0;
          while (2)
          {
            uint64_t v150 = v149;
            int v151 = *(unsigned __int8 *)(v148 + 264 * v146 + v149 + 186);
            int v152 = 1;
            switch(v151)
            {
              case 0:
                goto LABEL_210;
              case 2:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
                int v152 = v151;
                goto LABEL_180;
              case 3:
                unsigned int v168 = *(unsigned __int8 *)(v148 + 264 * v146);
                if (v168 > 7) {
                  goto LABEL_199;
                }
                int v169 = 1 << v168;
                if ((v169 & 0x75) != 0) {
                  goto LABEL_210;
                }
                if ((v169 & 0xA) != 0) {
                  int v152 = 3;
                }
                else {
                  int v152 = 10;
                }
LABEL_180:
                int v153 = 1 << v152;
                if (((1 << v152) & v147) == 0)
                {
                  uint64_t v154 = v148 + 264 * v146;
                  uint64_t v155 = v154 + 8 * v150;
                  double v156 = *(double *)(v155 + 208) * 3.33564095;
                  float v157 = *(double *)(v155 + 224) * 3.33564095;
                  unsigned int v158 = *(unsigned __int8 *)(v154 + v150 + 256);
                  if (g_LbsOsaTrace_Config >= 4)
                  {
                    unint64_t v159 = v146;
                    int v160 = v147;
                    uint64_t v161 = v140;
                    int v162 = v144;
                    bzero(__str, 0x3C6uLL);
                    uint64_t v163 = mach_continuous_time();
                    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: BAND,%u,RfTimeBiasNs,%f,RfTimeBiasUncNs,%f,AGCdB,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v163), "ADP", 73, "Ga06_08GetRxBandCorrection", v152, v156, v157, v158);
                    gnssOsa_PrintLog(__str, 4, 1, 0);
                    int v144 = v162;
                    uint64_t v140 = v161;
                    int v147 = v160;
                    unint64_t v146 = v159;
                  }
                  float v164 = (float)v158;
                  if (v145 >= (double *)v144)
                  {
                    unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * (v145 - v142) + 1;
                    if (v165 > 0xAAAAAAAAAAAAAAALL) {
                      std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x5555555555555556 * ((v144 - (char *)v142) >> 3) > v165) {
                      unint64_t v165 = 0x5555555555555556 * ((v144 - (char *)v142) >> 3);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((v144 - (char *)v142) >> 3) >= 0x555555555555555) {
                      unint64_t v166 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v166 = v165;
                    }
                    if (v166)
                    {
                      if (v166 > 0xAAAAAAAAAAAAAAALL) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      int v167 = (char *)operator new(24 * v166);
                    }
                    else
                    {
                      int v167 = 0;
                    }
                    int v170 = (float *)&v167[8 * (v145 - v142)];
                    *(double *)int v170 = v156;
                    _OWORD v170[2] = v157;
                    v170[3] = v164;
                    *((unsigned char *)v170 + 16) = v152;
                    if (v145 == v142)
                    {
                      long long v173 = &v167[8 * (v145 - v142)];
                    }
                    else
                    {
                      char v171 = &v167[8 * (v145 - v142)];
                      do
                      {
                        long long v172 = *(_OWORD *)(v145 - 3);
                        long long v173 = v171 - 24;
                        *(v171 - 8) = *((unsigned char *)v145 - 8);
                        *(_OWORD *)(v171 - 24) = v172;
                        v145 -= 3;
                        v171 -= 24;
                      }
                      while (v145 != v142);
                    }
                    int v144 = &v167[24 * v166];
                    uint64_t v143 = (uint64_t)(v170 + 6);
                    if (v142)
                    {
                      unsigned int v174 = v142;
                      long long v175 = v144;
                      operator delete(v174);
                      int v144 = v175;
                    }
                    char v142 = (double *)v173;
                  }
                  else
                  {
                    *unsigned int v145 = v156;
                    *((float *)v145 + 2) = v157;
                    *((float *)v145 + 3) = v164;
                    uint64_t v143 = (uint64_t)(v145 + 3);
                    *((unsigned char *)v145 + 16) = v152;
                  }
                  v147 |= (unsigned __int16)v153;
                  uint64_t v148 = *(void *)(v140 + 392);
                  unsigned int v145 = (double *)v143;
                }
LABEL_210:
                unsigned __int8 v149 = v150 + 1;
                if (*(unsigned __int16 *)(v148 + 264 * v146 + 184) > (v150 + 1)) {
                  continue;
                }
                unsigned int v141 = *(unsigned __int16 *)(v140 + 384);
                break;
              case 4:
LABEL_199:
                int v152 = 4;
                goto LABEL_180;
              default:
                goto LABEL_180;
            }
            break;
          }
        }
        ++v146;
      }
      while (v146 < v141);
      long long v176 = v390;
      long long v178 = v390 + 5;
      int v177 = (void *)v390[5];
      uint64_t v2 = v352;
      if (v177)
      {
        v390[6] = (uint64_t)v177;
        long long v179 = v144;
        operator delete(v177);
        int v144 = v179;
        *long long v178 = 0;
        v178[1] = 0;
        _OWORD v178[2] = 0;
      }
    }
    else
    {
      int v144 = 0;
      uint64_t v143 = 0;
      char v142 = 0;
      long long v176 = (uint64_t *)&v389;
    }
    v176[5] = (uint64_t)v142;
    v176[6] = v143;
    v176[7] = (uint64_t)v144;
    uint64_t v3 = *(float **)(v2 + 144);
    uint64_t v1 = a1;
  }
  uint64_t v409 = 0;
  v410 = &v409;
  uint64_t v411 = 0x3002000000;
  v412 = __Block_byref_object_copy__23;
  v413 = __Block_byref_object_dispose__24;
  v414 = 0;
  if ((v3 & 0x20) != 0)
  {
    uint64_t v180 = *(void *)(*(void *)(v1 + 32) + 8);
    long long v181 = (unsigned __int16 **)operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (!v181)
    {
      snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_09GetTimeConv", 1436, "Memory allocation failed for TimeConversion");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v336 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v336), "OSA", 69, "Ga06_09GetTimeConv", v419);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_09GetTimeConv", "ga06GnssPvtmUtils.cpp", 1436, "false && \"Memory allocation failed for TimeConversion\"");
    }
    long long v182 = v181;
    v181[4] = 0;
    *(_OWORD *)long long v181 = 0u;
    *((_OWORD *)v181 + 1) = 0u;
    long long v183 = (unsigned __int16 *)operator new(0x40uLL, MEMORY[0x263F8C180]);
    if (!v183)
    {
      snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_10GetTimeConvGPS", 1466, "Memory allocation failed for GpsTimeInfo");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v337 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v337), "OSA", 69, "Ga06_10GetTimeConvGPS", v419);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_10GetTimeConvGPS", "ga06GnssPvtmUtils.cpp", 1466, "false && \"Memory allocation failed for GpsTimeInfo\"");
    }
    long long v184 = v183;
    *((unsigned char *)v183 + 10) = 0;
    *((void *)v183 + 2) = 0;
    v183[12] = 0x8000;
    *((void *)v183 + 4) = 0;
    *(int64x2_t *)(v183 + 20) = vdupq_n_s64(0x7FF8000000000000uLL);
    *((void *)v183 + 7) = 0x7FF8000000000000;
    *long long v183 = *(_WORD *)(v180 + 144);
    unsigned __int8 v185 = *(unsigned char *)(v180 + 160);
    v183[4] = (char)v185;
    uint64_t v186 = *(unsigned __int16 *)(v180 + 156);
    if (*(_WORD *)(v180 + 156)
      && (uint64_t v187 = *(unsigned __int8 *)(v180 + 158), *(unsigned char *)(v180 + 158))
      && (unsigned __int16 v188 = *(char *)(v180 + 159), *(unsigned char *)(v180 + 159)))
    {
      if (v185 == v188)
      {
        *((unsigned char *)v183 + 10) = 1;
      }
      else
      {
        *((unsigned char *)v183 + 10) = 2;
        *((void *)v183 + 2) = 604800000000000 * v186 + 86400000000000 * v187;
        v183[12] = v188;
      }
    }
    else
    {
      *((unsigned char *)v183 + 10) = 0;
    }
    *((void *)v183 + 4) = 604800000000000 * *(unsigned __int16 *)(v180 + 168)
                          + 1000000000 * *(unsigned int *)(v180 + 172);
    *(_OWORD *)(v183 + 20) = *(_OWORD *)(v180 + 176);
    *((void *)v183 + 7) = *(void *)(v180 + 192);
    if (g_LbsOsaTrace_Config <= 4)
    {
      *long long v182 = v183;
    }
    else
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v189 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Week,%u,CurLeapSec,%d,NewLeapSecKnwdg,%hhu,TimeOfChangeNs,%llu,NewLeapSec,%d,TimeNs,%llu,OffsetNs,%f,DriftPpb,%f,AccelPpbPerSec,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v189), "ADP", 68, "Ga06_10GetTimeConvGPS", *v184, (__int16)v184[4], *((unsigned __int8 *)v184 + 10), *((void *)v184 + 2), (__int16)v184[12], *((void *)v184 + 4), *((double *)v184 + 5), *((double *)v184 + 6), *((double *)v184 + 7));
      gnssOsa_PrintLog(__str, 5, 1, 0);
      int32x4_t v190 = *v182;
      *long long v182 = v184;
      if (v190) {
        MEMORY[0x263E6EDB0](v190, 0x1000C4079AA8B5ELL);
      }
    }
    int v191 = (unsigned __int16 *)operator new(0x18uLL, MEMORY[0x263F8C180]);
    if (!v191)
    {
      snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_11GetTimeConvGlonass", 1532, "Memory allocation failed for GlonTimeInfo");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v342 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v342), "OSA", 69, "Ga06_11GetTimeConvGlonass", v419);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_11GetTimeConvGlonass", "ga06GnssPvtmUtils.cpp", 1532, "false && \"Memory allocation failed for GlonTimeInfo\"");
    }
    char v192 = v191;
    uint64_t v193 = *(unsigned __int8 *)(v180 + 148);
    *int v191 = v193;
    uint64_t v194 = *(unsigned __int16 *)(v180 + 146);
    v191[1] = v194;
    *((void *)v191 + 1) = 126230400000000000 * v193 + 86400000000000 * v194;
    *((double *)v191 + 2) = -*(double *)(v180 + 216);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v195 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: 4YrPeriod,%u,Day,%u,CollecnTimeNs,%llu,OffsetNs,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v195), "ADP", 68, "Ga06_11GetTimeConvGlonass", *v192, v192[1], *((void *)v192 + 1), *((double *)v192 + 2));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    char v196 = v182[1];
    v182[1] = v192;
    if (v196) {
      MEMORY[0x263E6EDB0](v196, 0x1000C40D315E998);
    }
    char v197 = (unsigned __int16 *)operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!v197)
    {
      snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_12GetTimeConvBeidou", 1566, "Memory allocation failed for BeidouTimeInfo");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v338 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v338), "OSA", 69, "Ga06_12GetTimeConvBeidou", v419);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_12GetTimeConvBeidou", "ga06GnssPvtmUtils.cpp", 1566, "false && \"Memory allocation failed for BeidouTimeInfo\"");
    }
    char v198 = v197;
    *char v197 = *(_WORD *)(v180 + 150);
    *((void *)v197 + 1) = 604800000000000 * *(unsigned __int16 *)(v180 + 248)
                          + 1000000000 * *(unsigned int *)(v180 + 252);
    *((_OWORD *)v197 + 1) = *(_OWORD *)(v180 + 256);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v199 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Week,%u,GpsTimeNs,%llu,OffsetNs,%f,DriftPpb,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v199), "ADP", 73, "Ga06_12GetTimeConvBeidou", *v198, *((void *)v198 + 1), *((double *)v198 + 2), *((double *)v198 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    uint64_t v200 = v182[2];
    v182[2] = v198;
    if (v200) {
      MEMORY[0x263E6EDB0](v200, 0x1000C4095D96C66);
    }
    uint64_t v201 = (unsigned __int16 *)operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!v201)
    {
      snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_13GetTimeConvGalileo", 1600, "Memory allocation failed for GalTimeInfo");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v343 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v343), "OSA", 69, "Ga06_13GetTimeConvGalileo", v419);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_13GetTimeConvGalileo", "ga06GnssPvtmUtils.cpp", 1600, "false && \"Memory allocation failed for GalTimeInfo\"");
    }
    int v202 = v201;
    *uint64_t v201 = *(_WORD *)(v180 + 152);
    *((void *)v201 + 1) = 604800000000000 * *(unsigned __int16 *)(v180 + 224)
                          + 1000000000 * *(unsigned int *)(v180 + 228);
    *((_OWORD *)v201 + 1) = *(_OWORD *)(v180 + 232);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v203 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Week,%u,TimeNs,%llu,OffsetNs,%f,DriftPpb,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v203), "ADP", 73, "Ga06_13GetTimeConvGalileo", *v202, *((void *)v202 + 1), *((double *)v202 + 2), *((double *)v202 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    char v204 = v182[3];
    v182[3] = v202;
    if (v204) {
      MEMORY[0x263E6EDB0](v204, 0x1000C4095D96C66);
    }
    unsigned __int8 v205 = (unsigned __int16 *)operator new(0x20uLL, MEMORY[0x263F8C180]);
    if (!v205)
    {
      snprintf(v419, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_GetTimeConvNavIC", 1636, "Memory allocation failed for NavICTimeInfo");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v344 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v344), "OSA", 69, "Ga06_GetTimeConvNavIC", v419);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga06_GetTimeConvNavIC", "ga06GnssPvtmUtils.cpp", 1636, "false && \"Memory allocation failed for NavICTimeInfo\"");
    }
    unsigned int v206 = v205;
    *unsigned __int8 v205 = *(_WORD *)(v180 + 154);
    *((void *)v205 + 1) = 604800000000000 * *(unsigned __int16 *)(v180 + 272)
                          + 1000000000 * *(unsigned int *)(v180 + 276);
    *((_OWORD *)v205 + 1) = *(_OWORD *)(v180 + 280);
    uint64_t v2 = v352;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v207 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Week,%u,TimeNs,%llu,OffsetNs,%f,DriftPpb,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v207), "ADP", 73, "Ga06_GetTimeConvNavIC", *v206, *((void *)v206 + 1), *((double *)v206 + 2), *((double *)v206 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    unsigned __int8 v208 = v182[4];
    v182[4] = v206;
    if (v208) {
      MEMORY[0x263E6EDB0](v208, 0x1000C4095D96C66);
    }
    uint64_t v1 = a1;
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v209 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time info populated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v209), "ADP", 68, "Ga06_09GetTimeConv");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    __int16 v210 = (uint64_t *)v410[5];
    v410[5] = (uint64_t)v182;
    if (v210) {
      std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](v210);
    }
    uint64_t v3 = *(float **)(v352 + 144);
  }
  uint64_t v381 = 0;
  v382 = &v381;
  uint64_t v383 = 0x4002000000;
  v384 = __Block_byref_object_copy__25;
  v385 = __Block_byref_object_dispose__26;
  uint64_t v386 = 0;
  unint64_t v387 = 0;
  unint64_t v388 = 0;
  if ((v3 & 8) != 0)
  {
    uint64_t v212 = *(void *)(*(void *)(v1 + 32) + 8);
    if (*(unsigned __int16 *)(v212 + 384) >= 0x100u) {
      unint64_t v213 = 256;
    }
    else {
      unint64_t v213 = *(unsigned __int16 *)(v212 + 384);
    }
    unint64_t v368 = v213;
    if (v213)
    {
      v433 = &v388;
      *(void *)long long __str = std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvInfo>>(v213);
      v430 = *(char **)__str;
      v431 = *(char **)__str;
      uint64_t v432 = *(void *)__str + 136 * v214;
      std::vector<gnss::SvInfo>::__swap_out_circular_buffer(&v386, __str);
      std::__split_buffer<gnss::SvInfo>::~__split_buffer((uint64_t)__str);
      uint64_t v215 = 0;
      uint64_t v216 = 186;
      uint64_t v217 = 192;
      int64x2_t v218 = vdupq_n_s64(0x7FF8000000000000uLL);
      int32x2_t v219 = vdup_n_s32(0x7FC00000u);
      uint64_t v370 = v212;
      int64x2_t v372 = v218;
      while (2)
      {
        *(_DWORD *)v419 = 0;
        *(_WORD *)&v419[4] = 0;
        v419[6] = 127;
        *(void *)&v419[8] = 0x7FF8000000000000;
        char v420 = 0;
        long long __p = 0u;
        long long v422 = 0u;
        int64x2_t v423 = v218;
        int64x2_t v424 = v218;
        long long v425 = (unint64_t)v219;
        v427[1] = 0;
        v428 = 0;
        v427[0] = 0;
        __int16 v426 = 0;
        uint64_t v220 = *(void *)(v212 + 392);
        switch(*(unsigned char *)(v220 + 264 * v215))
        {
          case 0:
          case 4:
            if (g_LbsOsaTrace_Config < 5)
            {
              int v222 = 0;
            }
            else
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v221 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No Constel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v221), "ADP", 68, "Ga06_14GetSvInfo");
              gnssOsa_PrintLog(__str, 5, 1, 0);
              int v222 = 0;
              uint64_t v220 = *(void *)(v212 + 392);
            }
            goto LABEL_276;
          case 1:
            int v222 = 1;
            *(_DWORD *)v419 = 1;
            v419[4] = *(unsigned char *)(v220 + 264 * v215 + 2);
            goto LABEL_276;
          case 2:
            *(_DWORD *)v419 = 2;
            uint64_t v224 = v220 + 264 * v215;
            v419[4] = *(unsigned char *)(v224 + 4);
            v419[6] = *(unsigned char *)(v224 + 2);
            break;
          case 3:
            int v223 = 16;
            goto LABEL_273;
          case 5:
            int v225 = 4;
            goto LABEL_271;
          case 6:
            int v223 = 8;
LABEL_273:
            *(_DWORD *)v419 = v223;
            goto LABEL_274;
          case 7:
            int v225 = 32;
LABEL_271:
            *(_DWORD *)v419 = v225;
LABEL_274:
            v419[4] = *(unsigned char *)(v220 + 264 * v215 + 2);
            break;
          default:
            break;
        }
        int v222 = 1;
LABEL_276:
        switch(*(unsigned char *)(v220 + 264 * v215 + 8))
        {
          case 0:
            if (g_LbsOsaTrace_Config > 3)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v226 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SvPosSrc,Unknown\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v226), "ADP", 73, "Ga06_14GetSvInfo");
              gnssOsa_PrintLog(__str, 4, 1, 0);
              int v376 = 0;
              uint64_t v220 = *(void *)(v212 + 392);
              goto LABEL_284;
            }
            int v376 = 0;
            double v227 = *(double *)(v220 + 264 * v215 + 16);
            goto LABEL_286;
          case 1:
            int v376 = v222;
            char v420 = 1;
            goto LABEL_284;
          case 2:
            int v376 = v222;
            char v420 = 2;
            goto LABEL_284;
          case 3:
            int v376 = v222;
            char v420 = 0;
            goto LABEL_284;
          case 4:
            int v376 = v222;
            char v420 = 4;
            goto LABEL_284;
          default:
            int v376 = v222;
LABEL_284:
            double v227 = *(double *)(v220 + 264 * v215 + 16);
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v228 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ConstelId,%u,v_SVId,%d,ApplicableTimeSec,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v228), "ADP", 68, "Ga6_21GetAnchorPositions", *(unsigned __int8 *)(*(void *)(v212 + 392) + 264 * v215), *(__int16 *)(*(void *)(v212 + 392) + 264 * v215 + 2), v227);
              gnssOsa_PrintLog(__str, 5, 1, 0);
              uint64_t v220 = *(void *)(v212 + 392);
            }
LABEL_286:
            uint64_t v229 = v220 + 264 * v215;
            long long v378 = *(_OWORD *)(v229 + 24);
            uint64_t v230 = *(void *)(v229 + 40);
            __int16 v231 = (char *)operator new(0x20uLL);
            *(double *)__int16 v231 = (v227 + -15.0) * 1000000000.0;
            *(_OWORD *)(v231 + 8) = v378;
            *((void *)v231 + 3) = v230;
            uint64_t v232 = v220 + 264 * v215;
            long long v379 = *(_OWORD *)(v232 + 48);
            uint64_t v233 = *(void *)(v232 + 64);
            __int16 v234 = (char *)operator new(0x40uLL);
            *((double *)v234 + 4) = (v227 + -5.0) * 1000000000.0;
            *(_OWORD *)(v234 + 40) = v379;
            *((void *)v234 + 7) = v233;
            long long v235 = *((_OWORD *)v231 + 1);
            *(_OWORD *)__int16 v234 = *(_OWORD *)v231;
            *((_OWORD *)v234 + 1) = v235;
            operator delete(v231);
            uint64_t v236 = *(void *)(v212 + 392) + 264 * v215;
            long long v380 = *(_OWORD *)(v236 + 72);
            uint64_t v237 = *(void *)(v236 + 88);
            int v238 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvPositionAtTime>>(4uLL);
            __int16 v240 = v238;
            uint64_t v241 = v239;
            *((double *)v238 + 8) = (v227 + 5.0) * 1000000000.0;
            *(_OWORD *)(v238 + 72) = v380;
            *((void *)v238 + 11) = v237;
            for (uint64_t i = 32; i != -32; i -= 32)
            {
              __int16 v243 = &v238[i];
              long long v244 = *(_OWORD *)&v234[i + 16];
              *(_OWORD *)__int16 v243 = *(_OWORD *)&v234[i];
              *((_OWORD *)v243 + 1) = v244;
            }
            __int16 v245 = &v238[32 * v239];
            operator delete(v234);
            unint64_t v246 = (unint64_t)(v240 + 96);
            double v247 = (v227 + 15.0) * 1000000000.0;
            int16x4_t v248 = (void *)(*(void *)(v212 + 392) + 264 * v215);
            uint64_t v250 = v248[12];
            uint64_t v249 = v248[13];
            uint64_t v251 = v248[14];
            if (v241 < 4)
            {
              uint64_t v252 = 4;
              if ((unint64_t)((v245 - v240) >> 4) > 4) {
                uint64_t v252 = (v245 - v240) >> 4;
              }
              if ((unint64_t)(v245 - v240) >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v253 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v253 = v252;
              }
              if (v253) {
                unint64_t v253 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvPositionAtTime>>(v253);
              }
              else {
                uint64_t v254 = 0;
              }
              uint64_t v255 = 0;
              unint64_t v246 = v253 + 96;
              *(double *)(v253 + 96) = v247;
              *(void *)(v253 + 104) = v250;
              __int16 v245 = (char *)(v253 + 32 * v254);
              *(void *)(v253 + 112) = v249;
              *(void *)(v253 + 120) = v251;
              do
              {
                uint64_t v256 = v246 + v255;
                long long v257 = *(_OWORD *)&v240[v255 + 80];
                *(_OWORD *)(v256 - 32) = *(_OWORD *)&v240[v255 + 64];
                *(_OWORD *)(v256 - 16) = v257;
                v255 -= 32;
              }
              while (v255 != -96);
              operator delete(v240);
              __int16 v240 = (unsigned char *)(v246 - 96);
              uint64_t v212 = v370;
            }
            else
            {
              *((double *)v240 + 12) = v247;
              *((void *)v240 + 13) = v250;
              *((void *)v240 + 14) = v249;
              *((void *)v240 + 15) = v251;
            }
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            *(void *)&long long __p = v240;
            *((void *)&__p + 1) = v246 + 32;
            *(void *)&long long v422 = v245;
            uint64_t v258 = *(void *)(v212 + 392);
            uint64_t v259 = v258 + 264 * v215;
            int64x2_t v423 = *(int64x2_t *)(v259 + 120);
            v424.i64[0] = *(void *)(v259 + 136);
            double v260 = *(double *)(v259 + 144);
            if (v260 <= 3.40282347e38)
            {
              float v262 = v260;
              *(float *)&long long v425 = v262;
            }
            else
            {
              LODWORD(v425) = 2139095039;
              if (g_LbsOsaTrace_Config >= 2)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v261 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx URAPosm beyond float max limit, assigning max\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v261), "ADP", 87, "Ga06_14GetSvInfo", 772);
                gnssOsa_PrintLog(__str, 2, 1, 0);
                uint64_t v258 = *(void *)(v212 + 392);
              }
            }
            double v263 = *(double *)(v258 + 264 * v215 + 152);
            if (v263 <= 3.40282347e38)
            {
              float v265 = v263;
              *((float *)&v425 + 1) = v265;
            }
            else
            {
              DWORD1(v425) = 2139095039;
              if (g_LbsOsaTrace_Config >= 2)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v264 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx URAClockns beyond float max limit, assigning max\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v264), "ADP", 87, "Ga06_14GetSvInfo", 770);
                gnssOsa_PrintLog(__str, 2, 1, 0);
                uint64_t v258 = *(void *)(v212 + 392);
              }
            }
            uint64_t v266 = v258 + 264 * v215;
            int v267 = *(unsigned __int8 *)(v266 + 160);
            if (v267 == 2) {
              char v268 = 2;
            }
            else {
              char v268 = v267 == 1;
            }
            BYTE8(v425) = v268;
            int v269 = *(unsigned __int8 *)(v266 + 161);
            if (v269 == 2) {
              char v270 = 2;
            }
            else {
              char v270 = v269 == 1;
            }
            BYTE10(v425) = v270;
            int v271 = *(unsigned __int8 *)(v266 + 162);
            if (v271 == 2) {
              char v272 = 2;
            }
            else {
              char v272 = v271 == 1;
            }
            BYTE12(v425) = v272;
            int v273 = *(unsigned __int8 *)(v266 + 163);
            if (v273 == 2) {
              char v274 = 2;
            }
            else {
              char v274 = v273 == 1;
            }
            BYTE14(v425) = v274;
            int v275 = *(unsigned __int8 *)(v266 + 164);
            if (v275 == 2) {
              char v276 = 2;
            }
            else {
              char v276 = v275 == 1;
            }
            LOBYTE(v426) = v276;
            int v277 = *(unsigned __int8 *)(v266 + 165);
            if (v277 == 2) {
              char v278 = 2;
            }
            else {
              char v278 = v277 == 1;
            }
            BYTE9(v425) = v278;
            int v279 = *(unsigned __int8 *)(v266 + 166);
            if (v279 == 2) {
              char v280 = 2;
            }
            else {
              char v280 = v279 == 1;
            }
            BYTE11(v425) = v280;
            int v281 = *(unsigned __int8 *)(v266 + 167);
            if (v281 == 2) {
              char v282 = 2;
            }
            else {
              char v282 = v281 == 1;
            }
            BYTE13(v425) = v282;
            HIBYTE(v425) = 0;
            int v283 = *(unsigned __int8 *)(v266 + 168);
            if (v283 == 2) {
              char v284 = 2;
            }
            else {
              char v284 = v283 == 1;
            }
            HIBYTE(v426) = v284;
            unint64_t v285 = *(unsigned __int16 *)(v266 + 184);
            if (*(_WORD *)(v266 + 184))
            {
              uint64_t v286 = (char *)v427[1];
              uint64_t v287 = (char *)v427[0];
              unint64_t v288 = ((char *)v427[1] - (char *)v427[0]) >> 5;
              if (v285 <= v288)
              {
                _CF = v285 >= v288;
                uint64_t v212 = v370;
                if (!_CF) {
                  v427[1] = (char *)v427[0] + 32 * v285;
                }
              }
              else if (v285 - v288 <= (v428 - (char *)v427[1]) >> 5)
              {
                v295 = (char *)v427[1] + 32 * (v285 - v288);
                do
                {
                  *(void *)uint64_t v286 = 0;
                  *(int64x2_t *)(v286 + 8) = v372;
                  *((void *)v286 + 3) = 0x7FF8000000000000;
                  v286 += 32;
                }
                while (v286 != v295);
                v427[1] = v295;
                uint64_t v212 = v370;
              }
              else
              {
                unint64_t v289 = (v428 - (char *)v427[0]) >> 4;
                if (v289 <= v285) {
                  unint64_t v289 = *(unsigned __int16 *)(v266 + 184);
                }
                if ((unint64_t)(v428 - (char *)v427[0]) >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v290 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v290 = v289;
                }
                if (v290 >> 59) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                int v291 = (char *)operator new(32 * v290);
                v292 = &v291[32 * v288];
                v293 = v292;
                do
                {
                  *(void *)v293 = 0;
                  *(int64x2_t *)(v293 + 8) = v372;
                  *((void *)v293 + 3) = 0x7FF8000000000000;
                  v293 += 32;
                }
                while (v293 != &v291[32 * v285]);
                uint64_t v212 = v370;
                if (v286 != v287)
                {
                  do
                  {
                    long long v294 = *((_OWORD *)v286 - 1);
                    *((_OWORD *)v292 - 2) = *((_OWORD *)v286 - 2);
                    *((_OWORD *)v292 - 1) = v294;
                    v292 -= 32;
                    v286 -= 32;
                  }
                  while (v286 != v287);
                  uint64_t v286 = v287;
                }
                v427[0] = v292;
                v427[1] = &v291[32 * v285];
                v428 = &v291[32 * v290];
                if (v286) {
                  operator delete(v286);
                }
              }
              uint64_t v296 = *(void *)(v212 + 392);
              if (*(unsigned __int16 *)(v296 + 264 * v215 + 184) >= 2u) {
                uint64_t v297 = 2;
              }
              else {
                uint64_t v297 = *(unsigned __int16 *)(v296 + 264 * v215 + 184);
              }
              if (v297)
              {
                v298 = (double *)(v296 + 264 * v215);
                double v299 = v298[22];
                int v300 = *((unsigned __int8 *)v298 + 8);
                v301 = (char *)v427[0] + 16;
                v302 = (unsigned __int8 *)(v296 + v216);
                uint64_t v303 = v296 + v217;
                do
                {
                  int v305 = *v302++;
                  char v304 = v305;
                  LOBYTE(v306) = 1;
                  switch(v305)
                  {
                    case 0:
                    case 2:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                      LOBYTE(v306) = v304;
                      break;
                    case 3:
                      unint64_t v307 = *(unsigned __int8 *)v298;
                      if (v307 >= 8) {
                        goto LABEL_376;
                      }
                      unint64_t v306 = 0xA00000003000300uLL >> (8 * v307);
                      break;
                    case 4:
LABEL_376:
                      LOBYTE(v306) = 4;
                      break;
                    default:
                      break;
                  }
                  *(v301 - 16) = v306;
                  *((_DWORD *)v301 - 3) = 1;
                  if (v299 > 0.0) {
                    *((double *)v301 - 1) = v299 * 3.33564095;
                  }
                  if (*(double *)v303 > 0.0) {
                    *(double *)v301 = *(double *)v303 * 3.33564095;
                  }
                  if (v300) {
                    *((void *)v301 + 1) = *(void *)(v303 + 48);
                  }
                  v301 += 32;
                  v303 += 8;
                  --v297;
                }
                while (v297);
              }
            }
            if (v376)
            {
              unint64_t v308 = v387;
              if (v387 >= v388)
              {
                unint64_t v315 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v387 - v386) >> 3);
                unint64_t v316 = v315 + 1;
                if (v315 + 1 > 0x1E1E1E1E1E1E1E1) {
                  std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
                }
                if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v388 - v386) >> 3) > v316) {
                  unint64_t v316 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v388 - v386) >> 3);
                }
                if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v388 - v386) >> 3) >= 0xF0F0F0F0F0F0F0) {
                  unint64_t v317 = 0x1E1E1E1E1E1E1E1;
                }
                else {
                  unint64_t v317 = v316;
                }
                v433 = &v388;
                int32x4_t v318 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvInfo>>(v317);
                uint64_t v319 = &v318[136 * v315];
                *(void *)long long __str = v318;
                v430 = v319;
                uint64_t v432 = (uint64_t)&v318[136 * v320];
                long long v321 = *(_OWORD *)v419;
                v319[16] = v420;
                *(_OWORD *)uint64_t v319 = v321;
                *((void *)v319 + 4) = 0;
                *((void *)v319 + 5) = 0;
                *((void *)v319 + 3) = 0;
                *(_OWORD *)(v319 + 24) = __p;
                *((void *)v319 + 5) = v422;
                long long __p = 0uLL;
                uint64_t v322 = *((void *)&v422 + 1);
                long long v422 = 0uLL;
                *((void *)v319 + 6) = v322;
                int64x2_t v323 = v423;
                int64x2_t v324 = v424;
                long long v325 = v425;
                *((_WORD *)v319 + 52) = v426;
                *(_OWORD *)(v319 + 88) = v325;
                *(int64x2_t *)(v319 + 72) = v324;
                *(int64x2_t *)(v319 + 56) = v323;
                *((void *)v319 + 15) = 0;
                *((void *)v319 + 16) = 0;
                *((void *)v319 + 14) = 0;
                *((_OWORD *)v319 + 7) = *(_OWORD *)v427;
                *((void *)v319 + 16) = v428;
                v427[0] = 0;
                v427[1] = 0;
                v428 = 0;
                v431 = v319 + 136;
                std::vector<gnss::SvInfo>::__swap_out_circular_buffer(&v386, __str);
                unint64_t v314 = v387;
                std::__split_buffer<gnss::SvInfo>::~__split_buffer((uint64_t)__str);
                uint64_t v212 = v370;
              }
              else
              {
                long long v309 = *(_OWORD *)v419;
                *(unsigned char *)(v387 + 16) = v420;
                *(_OWORD *)unint64_t v308 = v309;
                *(void *)(v308 + 32) = 0;
                *(void *)(v308 + 40) = 0;
                *(void *)(v308 + 24) = 0;
                *(_OWORD *)(v308 + 24) = __p;
                *(void *)(v308 + 40) = v422;
                long long __p = 0uLL;
                uint64_t v310 = *((void *)&v422 + 1);
                long long v422 = 0uLL;
                *(void *)(v308 + 48) = v310;
                int64x2_t v311 = v423;
                int64x2_t v312 = v424;
                long long v313 = v425;
                *(_WORD *)(v308 + 104) = v426;
                *(_OWORD *)(v308 + 88) = v313;
                *(int64x2_t *)(v308 + 72) = v312;
                *(int64x2_t *)(v308 + 56) = v311;
                *(void *)(v308 + 112) = 0;
                *(void *)(v308 + 120) = 0;
                *(void *)(v308 + 128) = 0;
                *(_OWORD *)(v308 + 112) = *(_OWORD *)v427;
                *(void *)(v308 + 128) = v428;
                v427[0] = 0;
                v427[1] = 0;
                v428 = 0;
                unint64_t v314 = v308 + 136;
              }
              unint64_t v387 = v314;
            }
            if (v427[0])
            {
              v427[1] = v427[0];
              operator delete(v427[0]);
            }
            uint64_t v326 = *((void *)&v422 + 1);
            *((void *)&v422 + 1) = 0;
            if (v326) {
              MEMORY[0x263E6EDB0](v326, 0x1000C40AC4F46D1);
            }
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            ++v215;
            v216 += 264;
            v217 += 264;
            int64x2_t v218 = v372;
            if (v215 == v368) {
              break;
            }
            continue;
        }
        break;
      }
    }
    int v211 = -252645135 * ((unint64_t)(v382[6] - v382[5]) >> 3);
    uint64_t v2 = v352;
    uint64_t v1 = a1;
  }
  else
  {
    int v211 = 0;
  }
  char v327 = *(void **)(*(void *)(v1 + 32) + 8);
  uint64_t v328 = v327[17];
  if (v328)
  {
    MEMORY[0x263E6ED90](v328, 0x1000C80D072DB78);
    char v327 = *(void **)(*(void *)(v1 + 32) + 8);
  }
  uint64_t v329 = v327[47];
  if (v329)
  {
    MEMORY[0x263E6ED90](v329, 0x1000C80F973AAC2);
    char v327 = *(void **)(*(void *)(v1 + 32) + 8);
  }
  uint64_t v330 = v327[49];
  if (v330)
  {
    MEMORY[0x263E6ED90](v330, 0x1000C8055456DDCLL);
    char v327 = *(void **)(*(void *)(v1 + 32) + 8);
  }
  v327[17] = 0;
  *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 376) = 0;
  *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 392) = 0;
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v419, v2 + 168);
  v331 = *(NSObject **)(v2 + 160);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_27;
  block[3] = &unk_270ED1B10;
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v418, (uint64_t)v419);
  void block[4] = &v403;
  void block[5] = &v381;
  block[6] = &v389;
  block[7] = &v409;
  block[8] = &v397;
  dispatch_async(v331, block);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v332 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Meas update,SvInfo Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v332), "ADP", 73, "Ga06_01ReportPvtm_block_invoke", v211);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v418);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v419);
  _Block_object_dispose(&v381, 8);
  *(void *)long long __str = &v386;
  std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  _Block_object_dispose(&v409, 8);
  uint64_t v333 = v414;
  v414 = 0;
  if (v333) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](v333);
  }
  _Block_object_dispose(&v389, 8);
  if (v394)
  {
    v395 = v394;
    operator delete(v394);
  }
  _Block_object_dispose(&v397, 8);
  uint64_t v334 = v402;
  uint64_t v402 = 0;
  if (v334) {
    MEMORY[0x263E6EDB0](v334, 0x1000C400A747E1ELL);
  }
  _Block_object_dispose(&v403, 8);
  return std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v408, 0);
}

void sub_263CFA618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](v71);
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&a63, 0);
  _Block_object_dispose(&a71, 8);
  unint64_t v73 = STACK[0x218];
  STACK[0x218] = 0;
  if (v73) {
    MEMORY[0x263E6EDB0](v73, 0x1000C400A747E1ELL);
  }
  _Block_object_dispose(&STACK[0x220], 8);
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](a30, 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t *__Block_byref_object_dispose__18(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 40);

  return std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](v1, 0);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    JUMPOUT(0x263E6EDB0);
  }
  return result;
}

__n128 __Block_byref_object_copy__21(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](v2);
  }
}

__n128 __Block_byref_object_copy__25(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  v1[1] = *(void ***)MEMORY[0x263EF8340];
  v1[0] = (void **)(a1 + 40);
  std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_27(void *a1)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1[4] + 8);
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  uint64_t v15 = v2;
  v16[0] = 0;
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void *)(a1[6] + 8);
  uint64_t v5 = *(void *)(a1[7] + 8);
  int64x2_t v6 = *(uint64_t **)(v5 + 40);
  *(void *)(v5 + 40) = 0;
  uint64_t v14 = v6;
  uint64_t v7 = *(void *)(a1[8] + 8);
  uint64_t v8 = *(void *)(v7 + 40);
  *(void *)(v7 + 40) = 0;
  uint64_t v13 = v8;
  uint64_t v9 = a1[12];
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t, uint64_t, uint64_t **, uint64_t *))(*(void *)v9 + 48))(v9, v16, &v15, v3 + 40, v4 + 40, &v14, &v13);
  uint64_t v10 = v13;
  uint64_t v13 = 0;
  if (v10) {
    MEMORY[0x263E6EDB0](v10, 0x1000C400A747E1ELL);
  }
  int v11 = v14;
  uint64_t v14 = 0;
  if (v11) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](v11);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v15, 0);
  uint64_t result = v16[0];
  v16[0] = 0;
  if (result) {
    return MEMORY[0x263E6EDB0](result, 0x1000C4043D32D5CLL);
  }
  return result;
}

void sub_263CFAE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13)
{
  if (a10) {
    MEMORY[0x263E6EDB0](a10, 0x1000C400A747E1ELL);
  }
  if (a11) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](a11);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&a12, 0);
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    MEMORY[0x263E6EDB0](v14, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 72;
  uint64_t v3 = a1 + 72;

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 72);

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_2(void *a1)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[4];
  uint64_t v51 = 0;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x3002000000;
  uint64_t v54 = __Block_byref_object_copy__34;
  double v55 = __Block_byref_object_dispose__35;
  uint64_t v56 = 0;
  if ((*(unsigned char *)(v1 + 144) & 1) == 0)
  {
LABEL_110:
    *(void *)uint64_t v60 = 0;
    double v61 = v60;
    uint64_t v62 = 0x4002000000;
    char v63 = __Block_byref_object_copy__25;
    int v64 = __Block_byref_object_dispose__26;
    memset(v65, 0, 24);
    v47[0] = 0;
    v47[1] = v47;
    v47[2] = 0x4002000000;
    v47[3] = __Block_byref_object_copy__21;
    v47[4] = __Block_byref_object_dispose__22;
    long long __p = 0;
    double v49 = 0;
    uint64_t v50 = 0;
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v59, v1 + 168);
    unsigned int v42 = *(NSObject **)(v1 + 160);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_2_38;
    block[3] = &unk_270ED1B48;
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v58, (uint64_t)v59);
    void block[4] = &v51;
    void block[5] = v60;
    block[6] = v47;
    dispatch_async(v42, block);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v43 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PVT update Sent out\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "ADP", 73, "Ga06_01ReportPvtm_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v58);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v59);
    _Block_object_dispose(v47, 8);
    if (__p)
    {
      double v49 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v60, 8);
    *(void *)long long __str = v65;
    std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    goto LABEL_115;
  }
  uint64_t v3 = (unsigned int *)a1[5];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (char *)operator new(0xC8uLL, MEMORY[0x263F8C180]);
  if (!v4)
  {
    snprintf(v60, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga06_02GetPvtmInfo", 303, "Memory allocation failed for FixData");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v46 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "OSA", 69, "Ga06_02GetPvtmInfo", v60);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    if (gp_Logger) {
      (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
    }
    __assert_rtn("Ga06_02GetPvtmInfo", "ga06GnssPvtmUtils.cpp", 303, "false && \"Memory allocation failed for FixData\"");
  }
  uint64_t v5 = (float *)v4;
  *((_DWORD *)v4 + 2) = -1082130432;
  v4[12] = 0;
  *((_DWORD *)v4 + 4) = 0;
  *((void *)v4 + 3) = -1;
  *((_OWORD *)v4 + 2) = 0u;
  int64x2_t v6 = v4 + 32;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)v4 + 5) = _Q0;
  *((_OWORD *)v4 + 6) = _Q0;
  *((void *)v4 + 14) = 0;
  uint64_t v12 = v4 + 112;
  *((_DWORD *)v4 + 32) = 0;
  *((void *)v4 + 15) = 0;
  *(_OWORD *)(v4 + 136) = _Q0;
  *(_OWORD *)(v4 + 152) = xmmword_263D83980;
  *(_OWORD *)(v4 + 168) = _Q0;
  *((void *)v4 + 23) = 0;
  *((_DWORD *)v4 + 48) = 0;
  *(void *)uint64_t v4 = vcvtad_u64_f64(*((double *)v3 + 6) * 1000000000.0) + 604800000000000 * *((__int16 *)v3 + 14);
  double v13 = *((double *)v3 + 5) * 1000000000.0;
  *((void *)v4 + 4) = (unint64_t)((double)*((unint64_t *)v3 + 4) * 6.51041667);
  *((void *)v4 + 5) = 125;
  if (*((unsigned char *)v3 + 9) && *((unsigned char *)v3 + 8))
  {
    if (*((unsigned __int8 *)v3 + 313) < 2u) {
      double v13 = v13 + 500000.0;
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: BCT not set,GPS week not valid, BCTNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "Ga06_02GetPvtmInfo", *v6);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    void *v6 = 0;
    v6[1] = 0;
  }
  if (v13 <= 3.40282347e38)
  {
    float v15 = v13;
    if (!*((unsigned char *)v3 + 9)) {
      float v15 = 3.4028e38;
    }
  }
  else
  {
    float v15 = 3.4028e38;
  }
  v5[2] = v15;
  char v16 = *((unsigned char *)v3 + 10);
  if (v16) {
    char v16 = *((unsigned char *)v3 + 9) != 0;
  }
  *((unsigned char *)v5 + 12) = v16;
  double v17 = *((double *)v3 + 9);
  if (v17 > 2147483650.0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v18 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UtcCorr,%.9f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "Ga06_02GetPvtmInfo", 770, v17);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    MEMORY[0x263E6EDB0](v5, 0x1000C4043D32D5CLL);
    uint64_t v5 = 0;
    goto LABEL_103;
  }
  double v19 = -0.5;
  if (v17 > 0.0) {
    double v19 = 0.5;
  }
  *((_DWORD *)v5 + 4) = (int)(v17 + v19);
  unsigned int v20 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v21 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: LeapSec BeforeRound,%.9f,AfterRound,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "Ga06_02GetPvtmInfo", v17, *((_DWORD *)v5 + 4));
    gnssOsa_PrintLog(__str, 5, 1, 0);
    unsigned int v20 = g_LbsOsaTrace_Config;
  }
  double v22 = v17 - (double)(unint64_t)v17;
  if (v22 > 0.0000005 && v22 < 0.9999995 && v20 >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v23 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx UtcCorr beyond 500ns from seconds boundary,%.9f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 87, "Ga06_02GetPvtmInfo", 770, v17);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  *((void *)v5 + 3) = 1000000 * *v3;
  *((_OWORD *)v5 + 3) = *((_OWORD *)v3 + 7);
  double v24 = *((double *)v3 + 16);
  *((double *)v5 + 8) = v24;
  *((double *)v5 + 9) = v24 - *((double *)v3 + 17);
  *((_OWORD *)v5 + 5) = *(_OWORD *)(v3 + 50);
  *((_OWORD *)v5 + 6) = *(_OWORD *)(v3 + 54);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    *uint64_t v12 = gnss::GnssAdaptDevice::Ga06_03GetConstlUsedInFix((uint64_t)v3);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    *uint64_t v12 = gnss::GnssAdaptDevice::Ga06_03GetConstlUsedInFix((uint64_t)v3);
  }
  unint64_t v25 = *((char *)v3 + 312);
  if (v25 <= 4) {
    v5[29] = flt_263D83A98[v25];
  }
  unsigned int v26 = v3[77];
  if (!v26)
  {
    *((void *)v5 + 15) = 0;
    goto LABEL_83;
  }
  if (v26)
  {
    *((void *)v5 + 15) |= 2uLL;
    if ((v26 & 2) == 0)
    {
LABEL_39:
      if ((v26 & 4) == 0) {
        goto LABEL_40;
      }
      goto LABEL_63;
    }
  }
  else if ((v26 & 2) == 0)
  {
    goto LABEL_39;
  }
  *((void *)v5 + 15) |= 1uLL;
  if ((v26 & 4) == 0)
  {
LABEL_40:
    if ((v26 & 0x40) == 0) {
      goto LABEL_41;
    }
    goto LABEL_64;
  }
LABEL_63:
  *((void *)v5 + 15) |= 4uLL;
  if ((v26 & 0x40) == 0)
  {
LABEL_41:
    if ((v26 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_65;
  }
LABEL_64:
  *((void *)v5 + 15) |= 8uLL;
  if ((v26 & 0x80) == 0)
  {
LABEL_42:
    if ((v26 & 0x100) == 0) {
      goto LABEL_43;
    }
    goto LABEL_66;
  }
LABEL_65:
  *((void *)v5 + 15) |= 0x10uLL;
  if ((v26 & 0x100) == 0)
  {
LABEL_43:
    if ((v26 & 0x200) == 0) {
      goto LABEL_44;
    }
    goto LABEL_67;
  }
LABEL_66:
  *((void *)v5 + 15) |= 0x400uLL;
  if ((v26 & 0x200) == 0)
  {
LABEL_44:
    if ((v26 & 0x400) == 0) {
      goto LABEL_45;
    }
    goto LABEL_68;
  }
LABEL_67:
  *((void *)v5 + 15) |= 0x800uLL;
  if ((v26 & 0x400) == 0)
  {
LABEL_45:
    if ((v26 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_69;
  }
LABEL_68:
  *((void *)v5 + 15) |= 0x1000uLL;
  if ((v26 & 0x800) == 0)
  {
LABEL_46:
    if ((v26 & 0x1000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_70;
  }
LABEL_69:
  *((void *)v5 + 15) |= 0x200000uLL;
  if ((v26 & 0x1000) == 0)
  {
LABEL_47:
    if ((v26 & 0x2000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_71;
  }
LABEL_70:
  *((void *)v5 + 15) |= 0x2000uLL;
  if ((v26 & 0x2000) == 0)
  {
LABEL_48:
    if ((v26 & 0x4000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_72;
  }
LABEL_71:
  *((void *)v5 + 15) |= 0x100uLL;
  if ((v26 & 0x4000) == 0)
  {
LABEL_49:
    if ((v26 & 0x8000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_73;
  }
LABEL_72:
  *((void *)v5 + 15) |= 0x200uLL;
  if ((v26 & 0x8000) == 0)
  {
LABEL_50:
    if ((v26 & 0x10000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_74;
  }
LABEL_73:
  *((void *)v5 + 15) |= 0x4000uLL;
  if ((v26 & 0x10000) == 0)
  {
LABEL_51:
    if ((v26 & 0x20000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_75;
  }
LABEL_74:
  *((void *)v5 + 15) |= 0x8000uLL;
  if ((v26 & 0x20000) == 0)
  {
LABEL_52:
    if ((v26 & 0x40000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_76;
  }
LABEL_75:
  *((void *)v5 + 15) |= 0x20000uLL;
  if ((v26 & 0x40000) == 0)
  {
LABEL_53:
    if ((v26 & 0x1000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_77;
  }
LABEL_76:
  *((void *)v5 + 15) |= 0x10000uLL;
  if ((v26 & 0x1000000) == 0)
  {
LABEL_54:
    if ((v26 & 0x2000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_78;
  }
LABEL_77:
  *((void *)v5 + 15) |= 0x20uLL;
  if ((v26 & 0x2000000) == 0)
  {
LABEL_55:
    if ((v26 & 0x4000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_79;
  }
LABEL_78:
  *((void *)v5 + 15) |= 0x40uLL;
  if ((v26 & 0x4000000) == 0)
  {
LABEL_56:
    if ((v26 & 0x10000000) == 0) {
      goto LABEL_57;
    }
LABEL_80:
    *((void *)v5 + 15) |= 0x40000uLL;
    if ((v26 & 0x20000000) == 0)
    {
LABEL_58:
      if ((v26 & 0x40000000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_82;
    }
    goto LABEL_81;
  }
LABEL_79:
  *((void *)v5 + 15) |= 0x80uLL;
  if ((v26 & 0x10000000) != 0) {
    goto LABEL_80;
  }
LABEL_57:
  if ((v26 & 0x20000000) == 0) {
    goto LABEL_58;
  }
LABEL_81:
  *((void *)v5 + 15) |= 0x80000uLL;
  if ((v26 & 0x40000000) != 0) {
LABEL_82:
  }
    *((void *)v5 + 15) |= 0x100000uLL;
LABEL_83:
  unsigned int v27 = *((unsigned __int8 *)v3 + 301);
  if (v27 <= 4) {
    *((_DWORD *)v5 + 32) = v27;
  }
  *((void *)v5 + 17) = *((void *)v3 + 18);
  *((void *)v5 + 18) = *((void *)v3 + 29);
  *((void *)v5 + 19) = *((void *)v3 + 20);
  *((void *)v5 + 20) = *((void *)v3 + 30);
  double v28 = *((double *)v3 + 19);
  if (v28 < 0.0 || v28 >= 360.0 || (double v29 = *((double *)v3 + 31), v29 <= 0.0))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v30 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Course,%f,Uncertainty,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "Ga06_02GetPvtmInfo", 515, *((double *)v3 + 19), *((double *)v3 + 31));
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else
  {
    *((double *)v5 + 21) = v28;
    *((double *)v5 + 22) = v29;
  }
  unsigned int v31 = v3[76];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v32 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GnsAsstSpoofMask,%u,Spoofing Flag,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 73, "Ga06_18GetGnssSpoofingFlag", v31, v31 & 0x20F | (((v31 >> 4) & 1) << 6) | (v31 >> 4) & 0x10 | (v31 >> 3) & 0x80 | (v31 >> 7) & 0x20 | (v31 >> 5) & 0x100);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  *((void *)v5 + 23) = v31 & 0x20F | (((v31 >> 4) & 1) << 6) | (v31 >> 4) & 0x10 | (v31 >> 3) & 0x80 | (v31 >> 7) & 0x20 | (v31 >> 5) & 0x100;
  unsigned int v33 = *((unsigned __int8 *)v3 + 314);
  if (v33 <= 3) {
    *((_DWORD *)v5 + 48) = v33;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v34 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: spoofingFlags,%llu,Rel,%u,AssisUsed,%llu,GnssContentInFix,%u,EstimTech,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 73, "Ga06_02GetPvtmInfo", *((void *)v5 + 23), *((_DWORD *)v5 + 29), *((void *)v5 + 15), *((_DWORD *)v5 + 32), *((_DWORD *)v5 + 48));
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v35 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Lat,%f,Lon,%f,Alt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 73, "Ga06_02GetPvtmInfo", *((double *)v5 + 6), *((double *)v5 + 7), *((double *)v5 + 8));
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v36 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsTime_ns,%llu,GpsTimeUnc_ns,%f,LeapSec,%d,Clk_ns,%llu,BCTNs,%llu,BCTUncNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 73, "Ga06_02GetPvtmInfo", *(void *)v5, v5[2], *((_DWORD *)v5 + 4), *((void *)v5 + 3), *((void *)v5 + 4), *((void *)v5 + 5));
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          uint64_t v38 = 84;
          if (!*((unsigned char *)v5 + 12)) {
            uint64_t v38 = 70;
          }
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: LeapSecValid,%c,VUnc,%f,HMajUnc,%f,HMinUnc,%f,HAzmBrg,%f,HS,%f,HSpeedUnc,%f,VVel,%f,VVelUnc,%f\n", v37, "ADP", 73, "Ga06_02GetPvtmInfo", v38, *((double *)v5 + 10), *((double *)v5 + 11), *((double *)v5 + 12), *((double *)v5 + 13), *((double *)v5 + 17), *((double *)v5 + 18), *((double *)v5 + 19), *((double *)v5 + 20));
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v39 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: U,%f,S,%u,C,%f,CUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 73, "Ga06_02GetPvtmInfo", *((double *)v5 + 9), *((_DWORD *)v5 + 28), *((double *)v5 + 21), *((double *)v5 + 22));
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
        }
      }
    }
  }
LABEL_103:
  uint64_t v40 = v52[5];
  v52[5] = (uint64_t)v5;
  if (v40) {
    MEMORY[0x263E6EDB0](v40, 0x1000C4043D32D5CLL);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v52[5])
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v41 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Reporting PVTM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 68, "Ga06_01ReportPvtm_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    goto LABEL_110;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v45 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Fix\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 69, "Ga06_01ReportPvtm_block_invoke", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
LABEL_115:
  _Block_object_dispose(&v51, 8);
  uint64_t result = v56;
  uint64_t v56 = 0;
  if (result) {
    return MEMORY[0x263E6EDB0](result, 0x1000C4043D32D5CLL);
  }
  return result;
}

void sub_263CFBEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  MEMORY[0x263E6EDB0](v37, 0x1000C4043D32D5CLL);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Block_object_dispose(&a31, 8);
  uint64_t v39 = a36;
  a36 = 0;
  if (v39) {
    MEMORY[0x263E6EDB0](v39, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__35(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    JUMPOUT(0x263E6EDB0);
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_01ReportPvtmE11e_Gnm_Error16s_Gnm_AppNavData_block_invoke_2_38(void *a1)
{
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1[4] + 8);
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  uint64_t v11 = 0;
  v12[0] = v2;
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void *)(a1[6] + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = a1[10];
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t, uint64_t, uint64_t **, uint64_t *))(*(void *)v5 + 48))(v5, v12, &v11, v3 + 40, v4 + 40, &v10, &v9);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6) {
    MEMORY[0x263E6EDB0](v6, 0x1000C400A747E1ELL);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](v7);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&v11, 0);
  uint64_t result = v12[0];
  v12[0] = 0;
  if (result) {
    return MEMORY[0x263E6EDB0](result, 0x1000C4043D32D5CLL);
  }
  return result;
}

void sub_263CFC1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13)
{
  if (a10) {
    MEMORY[0x263E6EDB0](a10, 0x1000C400A747E1ELL);
  }
  if (a11) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](a11);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&a12, 0);
  uint64_t v14 = a13;
  a13 = 0;
  if (v14) {
    MEMORY[0x263E6EDB0](v14, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_56c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 56;
  uint64_t v3 = a1 + 56;

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_56c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 56);

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v1);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19s_Gnm_AppCStructNavEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19s_Gnm_AppCStructNavEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t gnss::GnssAdaptDevice::Ga06_03GetConstlUsedInFix(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  uint64_t v4 = a1 + 317;
  uint64_t v5 = a1 + 5696;
  do
  {
    if (*(unsigned char *)(v5 + v2))
    {
      switch(*(unsigned char *)(v4 + v2))
      {
        case 1:
          uint64_t result = result | 1;
          break;
        case 2:
          uint64_t result = result | 2;
          break;
        case 3:
          uint64_t result = result | 0x10;
          break;
        case 4:
          uint64_t result = result | 4;
          break;
        case 5:
          uint64_t result = result | 8;
          break;
        case 6:
          uint64_t result = result | 0x20;
          break;
        default:
          break;
      }
    }
    ++v2;
  }
  while (v2 != 128);
  return result;
}

void gnss::SvInfo::~SvInfo(gnss::SvInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    MEMORY[0x263E6EDB0](v3, 0x1000C40AC4F46D1);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

void gnss::GnssAdaptDevice::Ga06_15GnssRegisterNmeaCB(gnss::GnssAdaptDevice *a1, void *a2, unsigned __int16 a3)
{
  int v5 = (int)a1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    if (v5)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Report Err,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga06_16ReportNmea", 769, v5);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    else if (a2)
    {
      uint64_t v8 = DeviceInstance;
      std::string::basic_string[abi:ne180100](&__dst, a2, a3);
      uint64_t v9 = *(NSObject **)(v8 + 152);
      *(void *)long long __str = MEMORY[0x263EF8330];
      uint64_t v13 = 1174405120;
      uint64_t v14 = ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke;
      float v15 = &__block_descriptor_tmp_108;
      uint64_t v16 = v8;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = __dst;
      }
      dispatch_async(v9, __str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NMEA Payload\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 87, "Ga06_16ReportNmea", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
}

void sub_263CFC798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke(uint64_t a1)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = MEMORY[0x263F8C338] + 64;
  v71[0] = MEMORY[0x263F8C338] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  v63[0] = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *(uint64_t *)((char *)v63 + *(void *)(v63[0] - 24)) = v4;
  v63[1] = 0;
  int v5 = (std::ios_base *)((char *)v63 + *(void *)(v63[0] - 24));
  std::ios_base::init(v5, &v64);
  uint64_t v6 = MEMORY[0x263F8C338] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v63[0] = v6;
  v71[0] = v3;
  std::streambuf::basic_streambuf();
  uint64_t v49 = a1;
  uint64_t v7 = (const std::string *)(a1 + 40);
  uint64_t v8 = MEMORY[0x263F8C318] + 16;
  uint64_t v64 = MEMORY[0x263F8C318] + 16;
  long long v68 = 0u;
  long long v69 = 0u;
  int v70 = 8;
  std::string::operator=((std::string *)&v68, v7);
  *((void *)&v69 + 1) = 0;
  if ((SBYTE7(v69) & 0x80u) == 0) {
    uint64_t v9 = (char *)&v68;
  }
  else {
    uint64_t v9 = (char *)v68;
  }
  if ((SBYTE7(v69) & 0x80u) == 0) {
    unint64_t v10 = BYTE7(v69);
  }
  else {
    unint64_t v10 = *((void *)&v68 + 1);
  }
  if ((v70 & 8) != 0)
  {
    v65[0] = v9;
    v65[1] = v9;
    *((void *)&v69 + 1) = &v9[v10];
    v65[2] = &v9[v10];
  }
  if ((v70 & 0x10) != 0)
  {
    *((void *)&v69 + 1) = &v9[v10];
    if ((SBYTE7(v69) & 0x80u) == 0) {
      std::string::size_type v11 = 22;
    }
    else {
      std::string::size_type v11 = (v69 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize((std::string *)&v68, v11, 0);
    uint64_t v12 = BYTE7(v69);
    if (SBYTE7(v69) < 0) {
      uint64_t v12 = *((void *)&v68 + 1);
    }
    v65[3] = v9;
    int32x4_t v66 = v9;
    uint64_t v67 = &v9[v12];
    if ((v70 & 3) != 0)
    {
      if (v10 >> 31)
      {
        uint64_t v13 = ((v10 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v14 = 0x7FFFFFFF * ((v13 + ((v10 - 0x80000000 - v13) >> 1)) >> 30);
        v9 += v14 + 0x7FFFFFFF;
        unint64_t v10 = v10 - v14 - 0x7FFFFFFF;
        int32x4_t v66 = v9;
      }
      if (v10) {
        int32x4_t v66 = &v9[v10];
      }
    }
  }
  uint64_t v53 = 0;
  uint64_t v54 = &v53;
  uint64_t v55 = 0x4002000000;
  uint64_t v56 = __Block_byref_object_copy__103;
  uint64_t v57 = __Block_byref_object_dispose__104;
  memset(v58, 0, 24);
  memset(&v52, 0, sizeof(v52));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v63, (uint64_t)&v52);
  uint64_t v50 = v8;
  if ((*((unsigned char *)v65 + *(void *)(v63[0] - 24)) & 5) != 0) {
    first = 0;
  }
  else {
    first = (std::string *)v63;
  }
  uint64_t v16 = v54;
  uint64x2_t v59 = first;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v60, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    first = v59;
  }
  else
  {
    std::string v60 = v52;
  }
  std::string::size_type size = (std::string *)v60.__r_.__value_.__l.__size_;
  uint64_t v18 = (std::string::value_type *)v60.__r_.__value_.__r.__words[0];
  *(_DWORD *)((char *)v72 + 3) = *(_DWORD *)((char *)&v60.__r_.__value_.__r.__words[2] + 3);
  int v19 = v60.__r_.__value_.__r.__words[2];
  HIBYTE(v72[0]) = v60.__r_.__value_.__s.__data_[19];
  int v20 = SHIBYTE(v60.__r_.__value_.__r.__words[2]);
  memset(&v60, 0, sizeof(v60));
  v73[0] = v19;
  *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)((char *)v72 + 3);
  *(_DWORD *)((char *)v72 + 3) = 0;
  v72[0] = 0;
  double v61 = first;
  if (v20 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v18, (std::string::size_type)size);
    first = v61;
    std::string::size_type size = (std::string *)__p.__r_.__value_.__l.__size_;
    double v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    char v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = __PAIR128__((unint64_t)size, (unint64_t)v18);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v73[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v73 + 3);
    char v21 = v20;
    double v22 = (std::string *)v18;
  }
  LODWORD(v74) = __p.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v74 + 3) = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3);
  memset(&__p, 0, sizeof(__p));
  v84.__first_ = first;
  if (v21 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v84.__begin_, (const std::string::value_type *)v22, (std::string::size_type)size);
    first = v84.__first_;
    begiuint64_t n = v84.__begin_;
    char value_high = HIBYTE(v84.__end_cap_.__value_);
  }
  else
  {
    v84.__begin_ = v22;
    v84.__end_ = size;
    LODWORD(v84.__end_cap_.__value_) = v74;
    *(_DWORD *)((char *)&v84.__end_cap_.__value_ + 3) = *(_DWORD *)((char *)&v74 + 3);
    char value_high = v21;
    begiuint64_t n = v22;
  }
  uint64_t v51 = v2;
  v80[1] = v84.__end_;
  *(void **)((char *)&v80[1] + 7) = *(void **)((char *)&v84.__end_ + 7);
  *(void *)long long __str = first;
  v80[0] = begin;
  HIBYTE(v80[2]) = value_high;
  v80[3] = 0;
  if (v21 < 0) {
    operator delete(v22);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long __s = *(_OWORD *)v80;
  uint64_t v74 = first;
  double v76 = v80[2];
  memset(v80, 0, 24);
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  float v81 = 0;
  if (first)
  {
    while (1)
    {
      unint64_t v26 = v16[6];
      unint64_t v25 = v16[7];
      if (v26 >= v25)
      {
        unint64_t v28 = v16[5];
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v28) >> 3) + 1;
        if (v29 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v28) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        unint64_t v31 = v30 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v29;
        v84.__end_cap_.__value_ = (std::allocator<std::string> *)(v16 + 7);
        if (v31)
        {
          if (v31 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v32 = (std::string *)operator new(24 * v31);
        }
        else
        {
          uint64_t v32 = 0;
        }
        std::__split_buffer<std::string>::pointer v34 = (std::string *)((char *)v32 + 8 * ((uint64_t)(v26 - v28) >> 3));
        v84.__first_ = v32;
        v84.__begin_ = v34;
        v84.__end_ = v34;
        v84.__end_cap_.__value_ = &v32[v31];
        if (SHIBYTE(v76) < 0)
        {
          std::string::__init_copy_ctor_external(v34, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          unint64_t v28 = v16[5];
          unint64_t v26 = v16[6];
          std::__split_buffer<std::string>::pointer v34 = v84.__begin_;
          std::__split_buffer<std::string>::pointer end = v84.__end_;
        }
        else
        {
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = __s;
          v34->__r_.__value_.__r.__words[2] = (std::string::size_type)v76;
          std::__split_buffer<std::string>::pointer end = (std::string *)((char *)v32 + 8 * ((uint64_t)(v26 - v28) >> 3));
        }
        if (v26 == v28)
        {
          int64x2_t v37 = vdupq_n_s64(v28);
        }
        else
        {
          do
          {
            long long v36 = *(_OWORD *)(v26 - 24);
            v34[-1].__r_.__value_.__r.__words[2] = *(void *)(v26 - 8);
            *(_OWORD *)&v34[-1].__r_.__value_.__l.__data_ = v36;
            --v34;
            *(void *)(v26 - 16) = 0;
            *(void *)(v26 - 8) = 0;
            *(void *)(v26 - 24) = 0;
            v26 -= 24;
          }
          while (v26 != v28);
          int64x2_t v37 = *(int64x2_t *)(v16 + 5);
        }
        std::__split_buffer<std::string>::pointer v33 = end + 1;
        v16[5] = (uint64_t)v34;
        v16[6] = (uint64_t)&end[1];
        *(int64x2_t *)&v84.__begin_ = v37;
        uint64_t v38 = (std::string *)v16[7];
        v16[7] = (uint64_t)v84.__end_cap_.__value_;
        v84.__end_cap_.__value_ = v38;
        v84.__first_ = (std::__split_buffer<std::string>::pointer)v37.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&v84);
      }
      else
      {
        if (SHIBYTE(v76) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v16[6], (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          long long v27 = __s;
          *(void *)(v26 + 16) = v76;
          *(_OWORD *)unint64_t v26 = v27;
        }
        std::__split_buffer<std::string>::pointer v33 = (std::__split_buffer<std::string>::pointer)(v26 + 24);
        v16[6] = v26 + 24;
      }
      v16[6] = (uint64_t)v33;
      uint64_t v39 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v74, (uint64_t)&__s);
      if ((*((unsigned char *)v39 + *(void *)(*v39 - 24) + 32) & 5) != 0) {
        break;
      }
      if (!v74) {
        goto LABEL_64;
      }
    }
    uint64_t v74 = 0;
  }
LABEL_64:
  uint64_t v40 = (void *)__s;
  int v41 = SHIBYTE(v76);
  long long __s = 0uLL;
  double v76 = 0;
  if (v20 < 0) {
    operator delete(v18);
  }
  unsigned int v42 = (uint64_t *)MEMORY[0x263F8C2C0];
  if (SHIBYTE(v83) < 0) {
    operator delete(v81);
  }
  if (SHIBYTE(v80[2]) < 0)
  {
    operator delete(v80[0]);
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_70;
    }
  }
  else if ((v41 & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v40);
LABEL_70:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)&v84, v51 + 264);
  if (v84.__end_cap_.__value_)
  {
    uint64_t v43 = *(NSObject **)(v51 + 160);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke_2;
    block[3] = &unk_270ED1BB0;
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)v78, (uint64_t)&v84);
    void block[4] = &v53;
    dispatch_async(v43, block);
    uint64_t v44 = v50;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v45 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(char *)(v49 + 63) < 0) {
        uint64_t v46 = *(void *)(v49 + 48);
      }
      else {
        uint64_t v46 = *(unsigned __int8 *)(v49 + 63);
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NMEA Sent len,%zu\n", (unint64_t)v45, "ADP", 73, "Ga06_16ReportNmea_block_invoke", v46);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v78);
  }
  else
  {
    uint64_t v44 = v50;
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v47 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NMEA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "ADP", 69, "Ga06_16ReportNmea_block_invoke", 516);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](&v84);
  _Block_object_dispose(&v53, 8);
  *(void *)long long __str = v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  v63[0] = *v42;
  *(uint64_t *)((char *)v63 + *(void *)(v63[0] - 24)) = v42[3];
  uint64_t v64 = v44;
  if (SBYTE7(v69) < 0) {
    operator delete((void *)v68);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x263E6ED60](v71);
}

void sub_263CFD1A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__103(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__104(uint64_t a1)
{
  v1[1] = *(void ***)MEMORY[0x263EF8340];
  v1[0] = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice17Ga06_16ReportNmeaE11e_Gnm_Error17s_Gnm_AppNmeaData_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t __copy_helper_block_e8_40c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x263E6ED60](a1 + 120);
  return a1;
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::size_type v4 = *(void *)(a2 + 48);
    int v5 = *(const std::string::value_type **)(a2 + 40);
    std::string::__init_copy_ctor_external(v2, v5, v4);
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v1 = *(void **)(a1 + 40);
    operator delete(v1);
  }
}

uint64_t *std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 120);
      int v5 = *(void **)(v2 + 112);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(void **)(v4 - 16);
          *(void *)(v4 - 16) = 0;
          if (v6) {
            std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](v6);
          }
          v4 -= 176;
        }
        while (v4 != v3);
        int v5 = *(void **)(v2 + 112);
      }
      *(void *)(v2 + 120) = v3;
      operator delete(v5);
    }
    JUMPOUT(0x263E6EDB0);
  }
  return result;
}

void std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    MEMORY[0x263E6EDB0](v2, 0x1000C4095D96C66);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    MEMORY[0x263E6EDB0](v3, 0x1000C4095D96C66);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    MEMORY[0x263E6EDB0](v4, 0x1000C4095D96C66);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    MEMORY[0x263E6EDB0](v5, 0x1000C40D315E998);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    MEMORY[0x263E6EDB0](v6, 0x1000C4079AA8B5ELL);
  }

  JUMPOUT(0x263E6EDB0);
}

void std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 17;
        std::allocator<gnss::SvInfo>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<gnss::SvInfo>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    MEMORY[0x263E6EDB0](v3, 0x1000C40AC4F46D1);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x263E6EDB0);
}

uint64_t std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    JUMPOUT(0x263E6EDB0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<s_Gnm_AppCStructNav *,std::shared_ptr<s_Gnm_AppCStructNav>::__shared_ptr_default_delete<s_Gnm_AppCStructNav,s_Gnm_AppCStructNav>,std::allocator<s_Gnm_AppCStructNav>>::__on_zero_shared_weak(void *__p)
{
  operator delete(__p);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x263E6EDB0);
}

void std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]()
{
}

uint64_t *std::vector<gnss::SvInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 136;
      long long v6 = *(_OWORD *)(v3 - 136);
      *(unsigned char *)(v4 - 120) = *(unsigned char *)(v3 - 120);
      *(_OWORD *)(v4 - 136) = v6;
      *(void *)(v4 - 112) = 0;
      *(_OWORD *)(v4 - 104) = 0uLL;
      *(_OWORD *)(v4 - 112) = *(_OWORD *)(v3 - 112);
      *(void *)(v4 - 96) = *(void *)(v3 - 96);
      uint64_t v7 = *(void *)(v3 - 88);
      *(_OWORD *)(v3 - 112) = 0uLL;
      *(_OWORD *)(v3 - 96) = 0uLL;
      *(void *)(v4 - 88) = v7;
      long long v8 = *(_OWORD *)(v3 - 80);
      long long v9 = *(_OWORD *)(v3 - 64);
      long long v10 = *(_OWORD *)(v3 - 48);
      *(_WORD *)(v4 - 32) = *(_WORD *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = v9;
      *(_OWORD *)(v4 - 48) = v10;
      *(_OWORD *)(v4 - 80) = v8;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 136;
      v3 -= 136;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v11 = *result;
  *uint64_t result = v5;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvInfo>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a1);
}

uint64_t std::__split_buffer<gnss::SvInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    std::allocator<gnss::SvInfo>::destroy[abi:ne180100]((void *)(i - 136));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  MEMORY[0x263E6EBE0](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  long long v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    unint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_263CFE460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (a2)
  {
    std::locale::~locale(&a10);
    __cxa_begin_catch(exception_object);
    uint64_t v12 = *v10;
    *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 32) |= 1u;
    if ((*((unsigned char *)v10 + *(void *)(v12 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x263CFE400);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  begiuint64_t n = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::SvPositionAtTime>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

uint64_t GncP00_04HandleInitInd()
{
  *(void *)&v10[892] = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GncP00_04HandleInitInd");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  inited = (XofSvcsIf *)gnssOsa_InitCriticalSection("GncP01_00InitPeUpdate", 80, &g_PosUpdateCritic);
  g_GncP_PEUpdate[0] = 0;
  g_GncP_PEUpdate[6368] = 0;
  qword_26A9CBC28 = 0;
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v2 = 4;
  *(_OWORD *)long long __str = 0u;
  long long v7 = 0u;
  do
  {
    uint64_t v3 = &__str[v2];
    char *v3 = 0;
    *(_DWORD *)(v3 + 2) = 0;
    *((void *)v3 + 2) = 0;
    *((void *)v3 + 3) = 0;
    *((void *)v3 + 1) = 0;
    *(_DWORD *)(v3 + 31) = 0;
    v2 += 36;
  }
  while (v3 + 36 != v10);
  xmmword_26A9C9FC8 = v8;
  unk_26A9C9FD8 = *(_OWORD *)v9;
  unk_26A9C9FE4 = *(_OWORD *)&v9[12];
  g_GncPCntxtInfo = *(_OWORD *)__str;
  unk_26A9C9FB8 = v7;
  g_GnssDataClrMasunsigned int k = 0;
  g_GncPStateInfo = 0u;
  *(_OWORD *)&byte_26A9CA1D8 = 0u;
  qword_26A9CA1E8 = 0;
  g_GncPMeData = 0;
  g_GncPMeData = 0;
  g_GncPMeData = 0;
  g_GncPMeData = 0;
  g_MEResetInfo = 0;
  g_MEResetInfo = 0;
  Instance = (XofSvcsIf *)XofSvcsIf::GetInstance(inited);
  XofSvcsIf::Init(Instance);
  g_OrbitDataAvailable = 0;
  g_BceOrbitDataInjected = 0;
  g_TimeMarkState = 1;
  return 0;
}

uint64_t GncP00_06HandleDeInitInd(XofSvcsIf *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_DEINIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncP00_06HandleDeInitInd");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  Instance = (XofSvcsIf *)XofSvcsIf::GetInstance(a1);
  XofSvcsIf::Init(Instance);
  g_OrbitDataAvailable = 0;
  g_BceOrbitDataInjected = 0;
  GncP02_13ClearMEBuf();
  if (g_GncPMeData == 1) {
    AgpsFsmStopTimer(8656134);
  }
  GncP25_02StopTimemarkSessTimer();
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicunsigned int k = 0;
  g_TimeMarkState = 1;
  GncP16_99DeInitStateHndlr(v3, v4, v5);
  if (g_MEResetInfo == 1) {
    AgpsFsmStopTimer(8656646);
  }
  gncP01_01DeInitPeUpdate();
  return 0;
}

uint64_t GncP00_03DefaultMessage(unsigned __int8 *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FSM:MID,%x, Srce,%u, Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP00_03DefaultMessage", 520, *((_DWORD *)a1 + 1), *a1, a1[1]);
      int v3 = 2;
LABEL_6:
      gnssOsa_PrintLog(__str, v3, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP00_03DefaultMessage", 517);
    int v3 = 1;
    goto LABEL_6;
  }
  return 0;
}

void GncP00_01Init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncP00_01Init", 120, 1, 0x10uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_INIT_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP00_01Init");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8655619, v1);
  }
}

void GncP00_02DeInit(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncP00_02DeInit", 139, 1, 0x10uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_DEINIT_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP00_02DeInit");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8655875, v1);
  }
}

void GncP00_07DestMissingHandler(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v3 = *(_DWORD *)(a1 + 4);
  if (v3 <= 8653826)
  {
    if (v3 == 8651011)
    {
      uint64_t v6 = *(void **)(a1 + 24);
      if (v6) {
        free(v6);
      }
      *(void *)(a1 + 24) = 0;
      return;
    }
    unsigned __int16 v4 = 2819;
  }
  else
  {
    if (v3 == 8653827 || v3 == 8658179)
    {
LABEL_10:
      uint64_t v5 = *(void **)(a1 + 16);
      if (v5) {
        free(v5);
      }
      *(void *)(a1 + 16) = 0;
      return;
    }
    unsigned __int16 v4 = 4611;
  }
  if (v3 == (v4 | 0x840000)) {
    goto LABEL_10;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

double Zen_Trop_Delay_STANAG_4294(double a1)
{
  double v1 = a1 * 0.001;
  if (v1 <= 1.0) {
    return v1 * -0.3248 + 2.4644043 + v1 * 0.0223957 * v1;
  }
  if (v1 <= 9.0) {
    return (0.375 - exp((1.0 - v1) * 0.1226)) * -2.2838 + 0.732;
  }
  return exp((v1 + -9.0) * -0.1424) * 0.7374;
}

void UNB_TropModel::Set_UNB_TropModel_Params(UNB_TropModel *this, double a2, double a3, int a4)
{
  BOOL v5 = a2 > 18000.0 || a2 < -500.0;
  if (v5)
  {
    char v6 = 0;
  }
  else
  {
    if (vabdd_f64(*((double *)this + 3), a2) > 40.0 || !*((unsigned char *)this + 33)) {
      *((unsigned char *)this + 35) = 1;
    }
    *((double *)this + 2) = a2;
    char v6 = 1;
  }
  *((unsigned char *)this + 33) = v6;
  BOOL v7 = a3 < -90.0;
  if (a3 > 90.0) {
    BOOL v7 = 1;
  }
  if (v7)
  {
    char v8 = 0;
    *((unsigned char *)this + 32) = 0;
    *((unsigned char *)this + 104) = 0;
  }
  else if (vabdd_f64(*((double *)this + 1), a3) <= 0.004 && *((unsigned char *)this + 32))
  {
    char v8 = 1;
  }
  else
  {
    char v8 = 1;
    *((unsigned char *)this + 32) = 1;
    *((unsigned char *)this + 35) = 1;
    *((double *)this + 1) = a3;
  }
  if ((a4 - 367) >= 0xFFFFFE92)
  {
    if (*(_DWORD *)this == a4 && *((unsigned char *)this + 34))
    {
      BOOL v9 = *((unsigned char *)this + 35) == 0;
    }
    else
    {
      BOOL v9 = 0;
      *((_WORD *)this + 17) = 257;
      *(_DWORD *)this = a4;
    }
    if (!v7 && !v9)
    {
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenT0, UNB_ZenTa);
      double v11 = v10;
      *((double *)this + 8) = v10;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenP0, UNB_ZenPa);
      double v13 = v12;
      *((double *)this + 7) = v12;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenW0, UNB_ZenWa);
      *((void *)this + 12) = v14;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenB0, UNB_ZenBa);
      *((void *)this + 9) = v15;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenL0, UNB_ZenLa);
      double v17 = v16;
      *((double *)this + 10) = v16;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenW0_T, UNB_ZenWa_T);
      double v19 = v18;
      UNB_TropModel::Get_Weather_Param(this, UNB_ZenB0_T, UNB_ZenBa_T);
      double v21 = v20 * 0.001;
      *((double *)this + 9) = v20 * 0.001;
      double v22 = (v13 * 0.00000314 + 1.00062 + (v11 + -273.15) * (v11 + -273.15) * 0.00000056)
          * (exp(v11 * -0.019121316 + v11 * v11 * 0.000012378847 + 33.9371105 + -6343.1645 / v11)
           * 0.01
           * (v19
            * 0.01));
      *((double *)this + 12) = v22;
      *((unsigned char *)this + 36) = 0;
      if (!v5)
      {
        double v23 = v21 * 287.053763;
        long double v24 = 9.80665 / (v21 * 287.053763);
        double v25 = *((double *)this + 2);
        double v26 = v11 - v21 * v25;
        long double v27 = v26 / v11;
        long double v28 = v13 * pow(v27, v24);
        double v29 = v17 + 1.0;
        *((long double *)this + 12) = v22 * pow(v27, v29 * v24);
        *((long double *)this + 7) = v28;
        *((double *)this + 8) = v26;
        long double v30 = tan(*((double *)this + 1) * 0.0174532925);
        long double v31 = atan(v30 * 0.99330562);
        *((long double *)this + 11) = v26
                                    * (v23 / (v29 * ((cos(v31 + v31) * -0.00266 + 1.0 + v25 * -0.00000028) * -9.784))
                                     + 1.0);
        *((unsigned char *)this + 36) = 1;
      }
      *((unsigned char *)this + 104) = v8;
      *((unsigned char *)this + 35) = 0;
      *((void *)this + 3) = *((void *)this + 2);
    }
  }
  else
  {
    *((unsigned char *)this + 34) = 0;
    *((unsigned char *)this + 104) = 0;
  }
  long double v32 = (cos(*((double *)this + 1) * 0.0174532925 + *((double *)this + 1) * 0.0174532925) * -0.00266
       + 1.0
       + *((double *)this + 2) * -0.00000028)
      * 9.784;
  *((long double *)this + 5) = v32;
  *((long double *)this + 6) = 0.0222765202 / v32;
}

BOOL UNB_TropModel::Get_Zenith_Delays_Meter(UNB_TropModel *this, double a2, double a3, int a4, double *a5, double *a6)
{
  *a5 = 0.0;
  *a6 = 0.0;
  UNB_TropModel::Set_UNB_TropModel_Params(this, a2, a3, a4);
  return UNB_TropModel::Get_Dry_Zenith_Delay(this, a5)
      && (UNB_TropModel::Get_Wet_Zenith_Delay(this, a6) & 1) != 0;
}

uint64_t UNB_TropModel::Get_Dry_Zenith_Delay(UNB_TropModel *this, double *a2)
{
  *a2 = 0.0;
  if (!*((unsigned char *)this + 104) || !*((unsigned char *)this + 33)) {
    return 0;
  }
  double v3 = *((double *)this + 6) * *((double *)this + 7);
  *a2 = v3;
  double v4 = 1.0;
  if (!*((unsigned char *)this + 36))
  {
    double v5 = *((double *)this + 9);
    long double v6 = log(1.0 - v5 * *((double *)this + 2) / *((double *)this + 8));
    double v4 = exp(v6 * 9.80665 / (v5 * 287.053763));
  }
  *a2 = v3 * v4;
  return 1;
}

uint64_t UNB_TropModel::Get_Wet_Zenith_Delay(UNB_TropModel *this, double *a2)
{
  *a2 = 0.0;
  if (!*((unsigned char *)this + 104) || !*((unsigned char *)this + 33)) {
    return 0;
  }
  double v3 = 1.0;
  double v4 = *((double *)this + 10) + 1.0;
  double v5 = (*((double *)this + 11) * 16.5220718 + 377600.0)
     * 0.000001
     * 287.053763
     / (*((double *)this + 9) * -287.053763 + *((double *)this + 5) * v4);
  *a2 = v5;
  double v6 = v5 * (*((double *)this + 12) / *((double *)this + 8));
  *a2 = v6;
  if (!*((unsigned char *)this + 36))
  {
    double v7 = *((double *)this + 9);
    long double v8 = log(1.0 - v7 * *((double *)this + 2) / *((double *)this + 8));
    double v3 = exp((v4 * 9.80665 / (v7 * 287.053763) + -1.0) * v8);
  }
  *a2 = v6 * v3;
  return 1;
}

void UNB_TropModel::Get_Weather_Param(UNB_TropModel *this, const double *a2, const double *a3)
{
  if (a2 && a3)
  {
    double v3 = (double)*(int *)this;
    double v4 = *((double *)this + 1);
    if (v4 < 0.0) {
      double v3 = v3 + 182.625;
    }
    cos((v3 + -28.0) * 0.0172024238);
  }
}

void Gnm15_09UpdateNmeaData(char *a1, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NmeaLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm15_09UpdateNmeaData", a2);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NmeaData\n");
LABEL_15:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return;
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NmeaLen\n");
    goto LABEL_15;
  }
  double v5 = (void (*)(void, char *, void))qword_26A9CC1F0;
  if (!qword_26A9CC1F0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NmeaCB Succ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm15_09UpdateNmeaData");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    double v5 = (void (*)(void, char *, void))qword_26A9CC1F0;
  }
  v5(0, a1, a2);
}

uint64_t Gnm15_10HandleGncSNmeaData(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_NMEA_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_10HandleGncSNmeaData");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm15_09UpdateNmeaData(*(char **)(a1 + 16), *(unsigned __int16 *)(a1 + 12));
    double v3 = *(void **)(a1 + 16);
    if (v3) {
      free(v3);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm15_10HandleGncSNmeaData", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t Gnm15_11HandleNavData(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_NAV_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_11HandleNavData");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    int v4 = *(unsigned __int8 *)(a1 + 18);
    int v5 = *(unsigned __int16 *)(a1 + 16);
    int v6 = *(unsigned __int8 *)(a1 + 19);
    uint64_t v7 = *(void *)(a1 + 24);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v9 = 78;
      if (v6) {
        uint64_t v9 = 89;
      }
      uint64_t v20 = v9;
      uint64_t v10 = 84;
      if (!v4) {
        uint64_t v10 = 70;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time,%u,Final,%c,SessId,%u,Valid,%c\n", (unint64_t)v8, "GNM", 73, "Gnm15_11HandleNavData", v3, v10, v5, v20);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (v6 && !v7)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NavData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm15_11HandleNavData", 513);
        int v12 = 2;
LABEL_16:
        gnssOsa_PrintLog(__str, v12, 1, 0);
        return 0;
      }
      return 0;
    }
    InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v5);
    if (InstnFromInstnId)
    {
      uint64_t v15 = InstnFromInstnId;
      uint64_t v16 = *((void *)InstnFromInstnId + 1);
      if (v16)
      {
        if (*((unsigned char *)InstnFromInstnId + 2) == 1)
        {
          if ((*(unsigned char *)(v16 + 4) & 2) != 0)
          {
            Gnm11_01UpdateNavData((uint64_t)InstnFromInstnId, v7, v4, v6 != 0, v3);
            if (v4)
            {
              Gnm02_23StopNafSession((uint64_t)v15);
              Gnm02_21DeleteInstn(v15);
            }
          }
          goto LABEL_30;
        }
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", v19);
          goto LABEL_29;
        }
LABEL_30:
        double v17 = *(void **)(a1 + 24);
        if (v17) {
          free(v17);
        }
        *(void *)(a1 + 24) = 0;
        return 0;
      }
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_30;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnInfo\n");
    }
    else
    {
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_30;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn\n");
    }
LABEL_29:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    goto LABEL_30;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm15_11HandleNavData", 517);
    int v12 = 1;
    goto LABEL_16;
  }
  return 0;
}

uint64_t Gnm15_12HandleGncPNmeaData(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_12HandleGncPNmeaData");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm15_09UpdateNmeaData(*(char **)(a1 + 16), *(unsigned __int16 *)(a1 + 12));
    unsigned int v3 = *(void **)(a1 + 16);
    if (v3) {
      free(v3);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm15_12HandleGncPNmeaData", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t Gnm15_15HandleRawMeasData(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_RAWMEAS_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm15_15HandleRawMeasData");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm15_15HandleRawMeasData", 517);
    int v6 = 1;
LABEL_24:
    gnssOsa_PrintLog(__str, v6, 1, 0);
    return 0;
  }
  if (!*(void *)(a1 + 24))
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Meas\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm15_15HandleRawMeasData", 513);
    int v6 = 2;
    goto LABEL_24;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RawMeasData SessId,%u,UpdtTime,%u,FinaUpdt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm15_15HandleRawMeasData", *(unsigned __int16 *)(a1 + 16), *(_DWORD *)(a1 + 12), *(unsigned __int8 *)(a1 + 18));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(*(unsigned __int16 *)(a1 + 16));
  if (InstnFromInstnId && *((void *)InstnFromInstnId + 1) && *((unsigned char *)InstnFromInstnId + 2) == 1)
  {
    Gnm11_04SendAppMeasData((uint64_t)InstnFromInstnId, *(unsigned int *)(a1 + 12), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 18));
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm15_15HandleRawMeasData", 2052);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  double v8 = *(void ***)(a1 + 24);
  if (v8[42])
  {
    free(v8[42]);
    double v8 = *(void ***)(a1 + 24);
  }
  v8[42] = 0;
  if (v8[12])
  {
    free(v8[12]);
    double v8 = *(void ***)(a1 + 24);
  }
  v8[12] = 0;
  if (v8[44])
  {
    free(v8[44]);
    double v8 = *(void ***)(a1 + 24);
  }
  free(v8);
  *(void *)(a1 + 24) = 0;
  return 0;
}

uint64_t GNSS_GNB_Debug_Ctl(uint64_t result)
{
  if (result)
  {
    if (g_Logging_Cfg >= 4)
    {
      double v1 = (char **)result;
      **(unsigned char **)uint64_t result = 0;
      uint64_t v3 = *(char **)result;
      uint64_t v2 = *(char **)(result + 8);
      if (v2 != *(char **)result)
      {
        uint64_t v4 = *(char **)result;
        if ((unint64_t)v2 > *(void *)result) {
          uint64_t v4 = *(char **)(result + 24);
        }
        unsigned __int16 v5 = (_WORD)v4 - (_WORD)v2;
        if ((_WORD)v4 == (_WORD)v2)
        {
          if ((unint64_t)v2 < *(void *)(result + 24)) {
            goto LABEL_13;
          }
          uint64_t v2 = *(char **)(result + 16);
          *(void *)(result + 8) = v2;
        }
        else
        {
          uint64_t result = GN_GPS_Write_GNB_Debug((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
          uint64_t v2 = &v1[1][result];
          v1[1] = v2;
          if (v2 < v1[3]) {
            goto LABEL_13;
          }
          uint64_t v2 = v1[2];
          v1[1] = v2;
          if (result != v5) {
            goto LABEL_13;
          }
          uint64_t v3 = *v1;
        }
        uint64_t result = GN_GPS_Write_GNB_Debug((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
        uint64_t v2 = &v1[1][result];
        v1[1] = v2;
LABEL_13:
        if (v2 == *v1)
        {
          int v6 = v1[2];
          *double v1 = v6;
          v1[1] = v6;
        }
      }
    }
  }
  return result;
}

uint64_t NK_Define_Meas_Innov_Sat_Thresh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a2 + 27568);
  if (v6 <= 50.0) {
    double v7 = 1.0 / v6;
  }
  else {
    double v7 = 0.02;
  }
  __double2 v8 = __sincos_stret(*(double *)(a1 + 1856) * 0.0174532925);
  unsigned int v9 = *(_DWORD *)(a2 + 27120);
  unsigned int v10 = *(unsigned __int16 *)(a2 + 16);
  uint64_t v11 = (double *)(a2 + 1936);
  uint64_t v12 = -512;
  uint64_t v13 = 7064;
  uint64_t v14 = 30032;
  uint64_t v15 = 15128;
  uint64_t v16 = 36872;
  uint64_t v17 = 22224;
  uint64_t v18 = 21968;
  uint64_t result = 0x412E82F0051EB852;
  do
  {
    if (v9 > v10 || *(_DWORD *)(a1 + 1872) != 1) {
      goto LABEL_24;
    }
    unsigned int v20 = *(_DWORD *)(a2 + 148);
    if (v20 >= *(_DWORD *)(a2 + 152)) {
      unsigned int v20 = *(_DWORD *)(a2 + 152);
    }
    if (v20 >= *(_DWORD *)(a2 + 156)) {
      unsigned int v20 = *(_DWORD *)(a2 + 156);
    }
    if (v20 >= 0xB)
    {
      if (*(unsigned char *)(a1 + v13) || *(unsigned char *)(a1 + v18) || *(unsigned char *)(a1 + v16))
      {
        double v21 = v11[640];
        double v22 = v11[639];
        double v23 = *v11 * (v8.__sinval * v22 + v8.__cosval * v21);
        double v24 = *v11 * (v8.__cosval * v22 + -v8.__sinval * v21);
        double v25 = 0.0;
        if (*(unsigned char *)(a1 + v13) && (*(_DWORD *)(a1 + v12 + 7832) - 1) >= 0x1D) {
          double v25 = v23 * 0.5 * 9.8 * (v23 * 0.5 * 9.8);
        }
      }
      else
      {
        double v25 = 0.0;
        double v24 = 0.0;
        double v23 = 0.0;
      }
      *(double *)(a1 + v15) = v25;
      double v26 = 0.0;
      double v27 = 0.0;
      if (*(unsigned char *)(a1 + v18) && (*(_DWORD *)(a1 + v17) - 1) >= 0x1D)
      {
        double v28 = fmin(v7 * (*(double *)(a3 + 336) * *(double *)(a3 + 336)), 9.8);
        double v27 = v23 * 9.8 * (v23 * 9.8) + v24 * v28 * (v24 * v28);
      }
      *(double *)(a1 + v14) = v27;
      if (*(unsigned char *)(a1 + v16))
      {
        if ((*(_DWORD *)(a1 + v17 + 14904) - 1) >= 0x1D)
        {
          double v29 = fmin(v7 * (*(double *)(a3 + 336) * *(double *)(a3 + 336)), 9.8);
          double v26 = v23 * 9.8 * (v23 * 9.8) + v24 * v29 * (v24 * v29);
        }
      }
    }
    else
    {
LABEL_24:
      *(void *)(a1 + v15) = 0x412E82F0051EB852;
      *(void *)(a1 + v14) = 0x412E82F0051EB852;
      double v26 = 999800.01;
    }
    *(double *)(a1 + v14 + 14904) = v26;
    ++v13;
    v14 += 8;
    v15 += 8;
    v11 += 5;
    ++v16;
    v17 += 4;
    ++v18;
    v12 += 4;
  }
  while (v12);
  return result;
}

double *NK_SV_Meas_Innov_Sat(double *result, int a2, int a3, uint64_t a4, double *a5, double a6)
{
  v24[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v8 = a4 + 8 * a2;
  double v9 = *(double *)(v8 + 5304);
  int v10 = a3 - 1;
  if (a3 != 1 || v9 < 20.0 || v9 > 300.0)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a2;
    uint64_t v13 = (double *)(v8 + 5304);
    v24[0] = 0.0;
    double v14 = 0.0;
    do
    {
      float64x2_t v15 = vmulq_f64(*(float64x2_t *)&result[v11], *(float64x2_t *)&a5[v11 + 78]);
      double v14 = v14 + v15.f64[0] + v15.f64[1];
      v11 += 2;
    }
    while (v11 != 12);
    double v16 = v9 - v14;
    uint64_t v17 = a4 + 8 * a2;
    double v18 = *(double *)(v17 + 10680);
    uint64_t result = (double *)invtst(a5, result, 0xCu, v18 - *(double *)(a4 + 24 * a2 + 1216), 0.0, a6, v24);
    double v19 = cMIS_SatThresh_Sigma[v10] * cMIS_SatThresh_Sigma[v10] * v24[0];
    if (v19 <= *(double *)(v17 + 8376)) {
      double v19 = *(double *)(v17 + 8376);
    }
    *(double *)(v17 + 8376) = v19;
    if (v16 * v16 > v19)
    {
      double v20 = sqrt(v19);
      if (v16 >= v20) {
        double v21 = v20;
      }
      else {
        double v21 = v16;
      }
      double v22 = -v20;
      if (v21 > v22) {
        double v22 = v21;
      }
      *(unsigned char *)(a4 + v12 + 9400) = 1;
      double *v13 = v9 - (v16 - v22);
      double v23 = v16 * 0.5 * (v16 * 0.5);
      if (v18 > v23) {
        double v23 = v18;
      }
      *(double *)(v17 + 10680) = v23;
    }
  }
  return result;
}

uint64_t Gnm11_00ApiStatusCB(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (g_GnmCBs)
  {
    uint64_t v7 = result;
    if (result)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v9 = 78;
        if (a2) {
          uint64_t v9 = 89;
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Result,%hhu,HandleValid,%c,Handle,%u,ApiType,%hhu\n", (unint64_t)v8, "GNM", 87, "Gnm11_00ApiStatusCB", v7, v9, a3, a4);
        int v10 = 2;
LABEL_11:
        gnssOsa_PrintLog(__str, v10, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v12 = 78;
      if (a2) {
        uint64_t v12 = 89;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Result,%hhu,HandleValid,%c,Handle,%u,ApiType,%hhu\n", (unint64_t)v11, "GNM", 73, "Gnm11_00ApiStatusCB", 0, v12, a3, a4);
      int v10 = 4;
      goto LABEL_11;
    }
    return g_GnmCBs(v7, a2, a3, a4);
  }
  return result;
}

uint64_t Gnm11_01UpdateNavData(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned __int16 v5 = *(unsigned int **)(result + 8);
  if (*((unsigned char *)v5 + 64) == 1 && (v5[2] & 1) != 0)
  {
    double v6 = (uint64_t (*)(uint64_t, uint64_t, void *))*((void *)v5 + 7);
    if (v6)
    {
      if (a4)
      {
        Gnm05_31PrintNavSoln(a2);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NavData Succ sent NAFId,%u,NavStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm11_01UpdateNavData", *v5, a3);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        uint64_t v11 = *v5;
        v17[0] = a2;
        v17[1] = 0;
        int v18 = 2;
        char v19 = a3;
        uint64_t result = v6(0, v11, v17);
        if (v5[9] == v5[3] && *(unsigned char *)(a2 + 296)) {
          v5[9] = a5;
        }
      }
      else
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v12 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NavData Err sent NAFId,%u,NavStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm11_01UpdateNavData", *v5, a3);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        uint64_t v13 = *v5;
        v14[0] = 0;
        v14[1] = 0;
        int v15 = 0;
        char v16 = a3;
        uint64_t result = v6(6, v13, v14);
      }
      v5[10] = a5;
      if ((v5[1] & 2) != 0) {
        ++v5[12];
      }
    }
  }
  return result;
}

void Gnm11_04SendAppMeasData(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v4 = *(unsigned int **)(a1 + 8);
    if ((v4[1] & 2) != 0 && *((unsigned char *)v4 + 64) == 1 && (v4[2] & 2) != 0)
    {
      unsigned __int16 v5 = (void (*)(void, uint64_t, void *))*((void *)v4 + 7);
      if (v5)
      {
        uint64_t v7 = *v4;
        v9[0] = 0;
        v9[1] = a3;
        int v10 = 4;
        char v11 = a4;
        v5(0, v7, v9);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v8 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Meas Succ sent NAFId,%u,NavStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm11_04SendAppMeasData", *v4, a4);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
      }
    }
  }
}

uint64_t Gnm11_07StartPosResp(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int **)(a1 + 8);
  uint64_t v3 = *v2;
  if (a2)
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: StartPosReqResp Success NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 77, "Gnm11_07StartPosResp", v3);
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    return Gnm11_00ApiStatusCB(0, 1, v3, v2[1] & 2);
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: StartPosReqResp Error NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm11_07StartPosResp", v3);
      gnssOsa_PrintLog(__str, 2, 1, 0);
      uint64_t v3 = *v2;
    }
    Gnm11_00ApiStatusCB(11, 1, v3, v2[1] & 2);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Delete NAF Session NAFId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm11_07StartPosResp", *v2);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    Gnm02_23StopNafSession(a1);
    return Gnm02_21DeleteInstn((unsigned __int16 *)a1);
  }
}

uint64_t Gnm11_08StopPosResp(unsigned __int16 *a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = **((unsigned int **)a1 + 1);
  if (a2)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm11_08StopPosResp", v3);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (Gnm02_21DeleteInstn(a1)) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = 11;
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: StopPosReqResp Error NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm11_08StopPosResp", v3);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    Gnm02_21DeleteInstn(a1);
    uint64_t v5 = 11;
  }
  return Gnm11_00ApiStatusCB(v5, 1, v3, 1);
}

void gnss::GnssAdaptDevice::startEmergencyPreemptiveSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!*(void *)(a3 + 24))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
LABEL_8:
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "startEmergencyPreemptiveSession", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  if (!*(void *)(a4 + 24))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    goto LABEL_8;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v7, (uint64_t)"startEmergencyPreemptiveSession");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "startEmergencyPreemptiveSession", 1026);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D015B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::stopEmergencyPreemptiveSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 24))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
LABEL_8:
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "stopEmergencyPreemptiveSession", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  if (!*(void *)(a3 + 24))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    goto LABEL_8;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"stopEmergencyPreemptiveSession");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "stopEmergencyPreemptiveSession", 1026);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D017E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setEmergencySessionSummaryReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setEmergencySessionSummaryReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setEmergencySessionSummaryReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setEmergencySessionSummaryReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D01984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setEmergencyPositionReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setEmergencyPositionReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setEmergencyPositionReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setEmergencyPositionReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D01B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setEmergencyMeasurementReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setEmergencyMeasurementReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setEmergencyMeasurementReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setEmergencyMeasurementReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D01CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setEmergencyMeasurementWithEstimateReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setEmergencyMeasurementWithEstimateReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setEmergencyMeasurementWithEstimateReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setEmergencyMeasurementWithEstimateReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D01E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::startEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a4);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v7, (uint64_t)"startEmergencyPositionRequest");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "startEmergencyPositionRequest", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "startEmergencyPositionRequest", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D02014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::stopEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"stopEmergencyPositionRequest");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "stopEmergencyPositionRequest", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "stopEmergencyPositionRequest", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D021B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setNwAssistanceNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setNwAssistanceNeededReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setNwAssistanceNeededReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceNeededReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D0235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setNwAssistanceGpsRefTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 0, (uint64_t)v6, (uint64_t)"setNwAssistanceGpsRefTime");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setNwAssistanceGpsRefTime", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceGpsRefTime", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D02500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setNwAssistanceRefPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 0, (uint64_t)v6, (uint64_t)"setNwAssistanceRefPosition");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setNwAssistanceRefPosition", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceRefPosition", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D026A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setNwAssistanceGpsEphemeris(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    memcpy(__dst, a2, sizeof(__dst));
    uint64_t v5 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice27setNwAssistanceGpsEphemerisERKNS_9Emergency6Cplane18GpsNavigationModelENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_6;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    memcpy(v9, __dst, sizeof(v9));
    dispatch_async(v5, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__dst, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__dst, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setNwAssistanceGpsEphemeris", 513);
    gnssOsa_PrintLog(__dst, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice27setNwAssistanceGpsEphemerisERKNS_9Emergency6Cplane18GpsNavigationModelENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 < 0x11)
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Eph Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke", *(unsigned __int8 *)(a1 + 72));
        gnssOsa_PrintLog(__str, 4, 1, 0);
        unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
      }
      if (!v4) {
        goto LABEL_76;
      }
      unsigned __int8 v38 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = a1 + 84;
      do
      {
        unsigned int v12 = *(unsigned __int8 *)(v11 + 48);
        if (v12 > 0x3F)
        {
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v18 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, *(unsigned __int8 *)(v11 + 48));
            gnssOsa_PrintLog(__str, 1, 1, 0);
          }
        }
        else
        {
          int v41 = 0;
          int v40 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          unint64_t v46 = 0;
          unsigned __int8 v39 = v12;
          if (*(unsigned __int8 *)(v11 + 53) > 3u)
          {
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v19 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId CACode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
          }
          else
          {
            LOBYTE(v40) = *(unsigned char *)(v11 + 53);
            if (*(unsigned __int8 *)(v11 + 49) >= 0x10u)
            {
              if (g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v20 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId URA Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                gnssOsa_PrintLog(__str, 1, 1, 0);
              }
            }
            else
            {
              BYTE1(v40) = *(unsigned char *)(v11 + 49);
              if (*(unsigned __int8 *)(v11 + 50) >= 0x40u)
              {
                if (g_LbsOsaTrace_Config)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v21 = mach_continuous_time();
                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SVHealth,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                  gnssOsa_PrintLog(__str, 1, 1, 0);
                }
              }
              else
              {
                BYTE2(v40) = *(unsigned char *)(v11 + 50);
                if (*(_DWORD *)(v11 + 56) >= 2u)
                {
                  if (g_LbsOsaTrace_Config)
                  {
                    bzero(__str, 0x3C6uLL);
                    uint64_t v22 = mach_continuous_time();
                    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId L2 PCode,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                    gnssOsa_PrintLog(__str, 1, 1, 0);
                  }
                }
                else
                {
                  HIBYTE(v40) = *(_DWORD *)(v11 + 56);
                  if (*(unsigned __int16 *)(v11 + 24) >= 0x400u)
                  {
                    if (g_LbsOsaTrace_Config)
                    {
                      bzero(__str, 0x3C6uLL);
                      uint64_t v23 = mach_continuous_time();
                      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SaId IODC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                      gnssOsa_PrintLog(__str, 1, 1, 0);
                    }
                  }
                  else
                  {
                    LOWORD(v41) = *(_WORD *)(v11 + 24);
                    if (*(unsigned __int16 *)(v11 + 26) >= 0x93A8u)
                    {
                      if (g_LbsOsaTrace_Config)
                      {
                        bzero(__str, 0x3C6uLL);
                        uint64_t v24 = mach_continuous_time();
                        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId TOC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                        gnssOsa_PrintLog(__str, 1, 1, 0);
                      }
                    }
                    else
                    {
                      HIWORD(v41) = *(_WORD *)(v11 + 26);
                      if (*(_DWORD *)(v11 + 72) >= 0x800000u)
                      {
                        if (g_LbsOsaTrace_Config)
                        {
                          bzero(__str, 0x3C6uLL);
                          uint64_t v25 = mach_continuous_time();
                          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatdId 1st Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                          gnssOsa_PrintLog(__str, 1, 1, 0);
                        }
                      }
                      else
                      {
                        LODWORD(v42) = *(_DWORD *)(v11 + 72);
                        if (HIBYTE(*(_DWORD *)(v11 + 76)))
                        {
                          if (g_LbsOsaTrace_Config)
                          {
                            bzero(__str, 0x3C6uLL);
                            uint64_t v26 = mach_continuous_time();
                            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId 2nd Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                            gnssOsa_PrintLog(__str, 1, 1, 0);
                          }
                        }
                        else
                        {
                          DWORD1(v42) = *(_DWORD *)(v11 + 76);
                          if (HIBYTE(*(_DWORD *)(v11 + 80)))
                          {
                            if (g_LbsOsaTrace_Config)
                            {
                              bzero(__str, 0x3C6uLL);
                              uint64_t v27 = mach_continuous_time();
                              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId 3rd Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                              gnssOsa_PrintLog(__str, 1, 1, 0);
                            }
                          }
                          else
                          {
                            DWORD2(v42) = *(_DWORD *)(v11 + 80);
                            if (*(_DWORD *)(v11 + 84) >= 0x10000u)
                            {
                              if (g_LbsOsaTrace_Config)
                              {
                                bzero(__str, 0x3C6uLL);
                                uint64_t v28 = mach_continuous_time();
                                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId 4th Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                                gnssOsa_PrintLog(__str, 1, 1, 0);
                              }
                            }
                            else
                            {
                              HIDWORD(v42) = *(_DWORD *)(v11 + 84);
                              if ((*(_DWORD *)(v11 - 8) + 0x200000) >= 0x400000)
                              {
                                if (g_LbsOsaTrace_Config)
                                {
                                  bzero(__str, 0x3C6uLL);
                                  uint64_t v29 = mach_continuous_time();
                                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId SatCk Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                                  gnssOsa_PrintLog(__str, 1, 1, 0);
                                }
                              }
                              else
                              {
                                DWORD1(v43) = *(_DWORD *)(v11 - 8);
                                if (*(unsigned __int16 *)(v11 + 38) >= 0x93A8u)
                                {
                                  if (g_LbsOsaTrace_Config)
                                  {
                                    bzero(__str, 0x3C6uLL);
                                    uint64_t v30 = mach_continuous_time();
                                    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId RefTime Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                                    gnssOsa_PrintLog(__str, 1, 1, 0);
                                  }
                                }
                                else
                                {
                                  WORD6(v44) = *(_WORD *)(v11 + 38);
                                  if (*(_DWORD *)(v11 + 64) >= 2u)
                                  {
                                    if (g_LbsOsaTrace_Config)
                                    {
                                      bzero(__str, 0x3C6uLL);
                                      uint64_t v31 = mach_continuous_time();
                                      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId EphFitInt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                                      gnssOsa_PrintLog(__str, 1, 1, 0);
                                    }
                                  }
                                  else
                                  {
                                    BYTE14(v44) = *(_DWORD *)(v11 + 64);
                                    if (*(unsigned __int8 *)(v11 + 68) >= 0x20u)
                                    {
                                      if (g_LbsOsaTrace_Config)
                                      {
                                        bzero(__str, 0x3C6uLL);
                                        uint64_t v32 = mach_continuous_time();
                                        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId Age Offset Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                                        gnssOsa_PrintLog(__str, 1, 1, 0);
                                      }
                                    }
                                    else
                                    {
                                      HIBYTE(v44) = *(unsigned char *)(v11 + 68);
                                      if ((unsigned __int16)(*(_WORD *)(v11 + 46) + 0x2000) >= 0x4000u)
                                      {
                                        if (g_LbsOsaTrace_Config)
                                        {
                                          bzero(__str, 0x3C6uLL);
                                          uint64_t v33 = mach_continuous_time();
                                          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId Rate of Incli Angle Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                                          gnssOsa_PrintLog(__str, 1, 1, 0);
                                        }
                                      }
                                      else
                                      {
                                        WORD6(v45) = *(_WORD *)(v11 + 46);
                                        unsigned int v13 = *(_DWORD *)(v11 + 20);
                                        if ((v13 + 0x800000) >> 24)
                                        {
                                          if (g_LbsOsaTrace_Config)
                                          {
                                            bzero(__str, 0x3C6uLL);
                                            uint64_t v34 = mach_continuous_time();
                                            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SatId Long of AscNode Orbit Plane at Weekly Epoch Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v39);
                                            gnssOsa_PrintLog(__str, 1, 1, 0);
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v14 = *(void *)(v11 + 8);
                                          *(void *)((char *)&v44 + 4) = *(void *)v11;
                                          LOBYTE(v43) = *(unsigned char *)(v11 + 60);
                                          BYTE1(v43) = *(unsigned char *)(v11 + 51);
                                          WORD1(v43) = *(_WORD *)(v11 + 28);
                                          int v15 = *(_DWORD *)(v11 - 4);
                                          DWORD2(v43) = *(_DWORD *)(v11 + 30);
                                          HIDWORD(v43) = v15;
                                          LODWORD(v44) = *(_DWORD *)(v11 + 34);
                                          LODWORD(v45) = *(_DWORD *)(v11 + 40);
                                          *(void *)((char *)&v45 + 4) = v14;
                                          HIWORD(v45) = *(_WORD *)(v11 + 44);
                                          unint64_t v46 = __PAIR64__(v13, *(_DWORD *)(v11 + 16));
                                          if (g_LbsOsaTrace_Config > 3)
                                          {
                                            bzero(__str, 0x3C6uLL);
                                            uint64_t v16 = mach_continuous_time();
                                            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: satId,%u,ephemCodeOnL2,%u,ephemUra,%u,ephemSvHealth,%u,ephemL2PFlag,%u,ephemIodc,%u,ephemToc,%u,reserved1,%u,reserved2,%u,reserved3,%u,reserved4,%u,ephemTgd,%u,ephemAf2,%u,ephemAf1,%u,ephemAf0,%d,ephemCrs,%u,ephemDeltaN,%u,ephemM0,%d,ephemCuc,%u,ephemCus,%u,ephemE,%u,ephemAPowerHalf,%u,toe,%u,ephemFitFlag,%u,ephemAODO,%u,ephemCic,%u,ephemCis,%u,ephemOmegaA0,%d,ephemI0,%d,ephemIdot,%u,ephemCrc,%u,ephemW,%d,ephemOmegaDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke", v39, v40, BYTE1(v40), BYTE2(v40), HIBYTE(v40), (unsigned __int16)v41, HIWORD(v41),
                                              v42,
                                              DWORD1(v42),
                                              DWORD2(v42),
                                              HIDWORD(v42),
                                              (char)v43,
                                              SBYTE1(v43),
                                              SWORD1(v43),
                                              DWORD1(v43),
                                              SWORD4(v43),
                                              SWORD5(v43),
                                              HIDWORD(v43),
                                              (__int16)v44,
                                              SWORD1(v44),
                                              DWORD1(v44),
                                              DWORD2(v44),
                                              WORD6(v44),
                                              BYTE14(v44),
                                              HIBYTE(v44),
                                              (__int16)v45,
                                              SWORD1(v45),
                                              DWORD1(v45),
                                              DWORD2(v45),
                                              SWORD6(v45),
                                              SHIWORD(v45),
                                              v46,
                                              HIDWORD(v46));
                                            gnssOsa_PrintLog(__str, 4, 1, 0);
                                          }
                                          GNS_AsstGpsNavModel(*(unsigned int *)(a1 + 1620), 1, 1, &v39);
                                          if (g_LbsOsaTrace_Config >= 4)
                                          {
                                            bzero(__str, 0x3C6uLL);
                                            uint64_t v17 = mach_continuous_time();
                                            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: AsstGpsNavModel invoked\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke");
                                            gnssOsa_PrintLog(__str, 4, 1, 0);
                                          }
                                          ++v38;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v10;
        v11 += 96;
      }
      while (v10 < *(unsigned __int8 *)(a1 + 72));
      if (v38)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v35 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Eph Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke", v38);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v48, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v48, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v48);
      }
      else
      {
LABEL_76:
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v47, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v47);
        if (!g_LbsOsaTrace_Config) {
          return;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v36 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Eph Count 0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 515);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v37 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v49, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v49, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v49);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Eph Count\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v6 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v50, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v50, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v50);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263D038C0(_Unwind_Exception *a1)
{
}

void gnss::GnssAdaptDevice::setNwAssistanceGpsAcquisition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 0, (uint64_t)v6, (uint64_t)"setNwAssistanceGpsAcquisition");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setNwAssistanceGpsAcquisition", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceGpsAcquisition", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D03A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setFtAssistanceNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setFtAssistanceNeededReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setFtAssistanceNeededReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setFtAssistanceNeededReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D03C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::injectFTAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 0, (uint64_t)v6, (uint64_t)"injectFTAssistance");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "injectFTAssistance", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "injectFTAssistance", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D03DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t BDS_B1C_AlmBin2Int(signed int a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  *(_DWORD *)(a3 + 4) = 4;
  *(unsigned char *)(a3 + 10) = (bswap32(*(unsigned __int16 *)(a2 + 4)) >> 21) & 0x3F;
  int v4 = *(unsigned __int8 *)(a2 + 5);
  if ((v4 & 0x10) == 0) {
    return 0;
  }
  unsigned int v5 = (((v4 << 16) | (*(unsigned __int8 *)(a2 + 6) << 8) | *(unsigned __int8 *)(a2 + 7)) >> 6) & 0x1FFF;
  *(_WORD *)(a3 + 8) = v5;
  if (!v5 || (int)(v5 + 836) > a1) {
    return 0;
  }
  *(unsigned char *)(a3 + 11) = bswap32(*(unsigned __int16 *)(a2 + 7)) >> 22;
  *(_DWORD *)(a3 + 16) = (unsigned __int16)((*(unsigned __int8 *)(a2 + 8) << 10) | (4 * *(unsigned __int8 *)(a2 + 9)) & 0xFFE0);
  *(_WORD *)(a3 + 36) = (*(unsigned __int8 *)(a2 + 9) << 13) | (32 * *(unsigned __int8 *)(a2 + 10));
  *(_DWORD *)(a3 + 12) = (*(unsigned __int8 *)(a2 + 11) << 16) | (*(unsigned __int8 *)(a2 + 12) << 8) | *(unsigned char *)(a2 + 13) & 0x80;
  *(_DWORD *)(a3 + 28) = ((*(unsigned __int8 *)(a2 + 13) << 25 >> 31) & 0xFFFF0000 | (unsigned __int16)((*(unsigned __int8 *)(a2 + 15) | (*(unsigned __int8 *)(a2 + 13) << 16) | (*(unsigned __int8 *)(a2 + 14) << 8)) >> 7)) << 8;
  *(_DWORD *)(a3 + 32) = 32
                       * ((*(unsigned __int8 *)(a2 + 15) << 26 >> 31) & 0xFFFFFC00 | ((*(unsigned __int8 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 15) << 8)) >> 4) & 0x3FF);
  *(_DWORD *)(a3 + 20) = ((*(unsigned __int8 *)(a2 + 16) << 28 >> 31) & 0xFFFF0000 | (unsigned __int16)((*(unsigned __int8 *)(a2 + 18) | (*(unsigned __int8 *)(a2 + 16) << 16) | (*(unsigned __int8 *)(a2 + 17) << 8)) >> 4)) << 8;
  *(_DWORD *)(a3 + 24) = ((*(unsigned __int8 *)(a2 + 18) << 28 >> 31) & 0xFFFF0000 | (unsigned __int16)((*(unsigned __int8 *)(a2 + 20) | (*(unsigned __int8 *)(a2 + 18) << 16) | (*(unsigned __int8 *)(a2 + 19) << 8)) >> 4)) << 8;
  *(_WORD *)(a3 + 38) = ((__int16)(*(unsigned __int8 *)(a2 + 20) << 12) >> 15) & 0xF800 | ((*(unsigned __int8 *)(a2 + 21) | (*(unsigned __int8 *)(a2 + 20) << 8)) >> 1) & 0x7FF;
  *(_WORD *)(a3 + 40) = 2
                      * (((__int16)(*(unsigned __int8 *)(a2 + 21) << 15) >> 15) & 0xFC00 | ((*(unsigned __int8 *)(a2 + 23) | (*(unsigned __int8 *)(a2 + 21) << 16) | (*(unsigned __int8 *)(a2 + 22) << 8)) >> 7) & 0x3FF);
  unsigned int v7 = bswap32(*(unsigned __int16 *)(a2 + 24));
  *(unsigned char *)(a3 + 42) = (v7 & 0x1C00000) == 0;
  *a4 = (v7 & 0x1400000) == 0;
  return 1;
}

double *Inc_Glon_TOD(double a1, double *result, __int16 *a3, unsigned __int16 *a4)
{
  double v4 = *result + a1;
  *uint64_t result = v4;
  LOWORD(v5) = *a3;
  if (v4 >= 86400.0)
  {
    do
    {
      double v4 = v4 + -86400.0;
      LOWORD(v5) = v5 + 1;
    }
    while (v4 >= 86400.0);
    *uint64_t result = v4;
    *a3 = v5;
  }
  if (v4 < 0.0)
  {
    do
    {
      double v4 = v4 + 86400.0;
      LOWORD(v5) = v5 - 1;
    }
    while (v4 < 0.0);
    *uint64_t result = v4;
    *a3 = v5;
  }
  if ((__int16)v5 >= 1462)
  {
    do
    {
      *a3 = v5 - 1461;
      ++*a4;
      int v5 = *a3;
    }
    while (v5 > 1461);
  }
  if ((__int16)v5 <= 0)
  {
    do
    {
      *a3 = v5 + 1461;
      unsigned __int16 v6 = *a4 - 1;
      *a4 = v6;
      int v5 = *a3;
    }
    while (v5 < 1);
  }
  else
  {
    unsigned __int16 v6 = *a4;
  }
  if (v6 >= 0x10u) {
    *a4 = 0;
  }
  return result;
}

void GLON_RealAlm2ECEF(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  v29[1] = *(double *)MEMORY[0x263EF8340];
  double v28 = 0.0;
  v29[0] = 0.0;
  float64x2_t v26 = 0u;
  float64x2_t v27 = 0u;
  float64x2_t v24 = 0u;
  float64x2_t v25 = 0u;
  float64x2_t v22 = 0u;
  float64x2_t v23 = 0u;
  memset(v21, 0, sizeof(v21));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  GLON_Alm_Calc_SemiMaj((uint64_t)a3);
  double v11 = v10;
  GLON_Alm_Last_Asc_Pass(v29, &v28, a5, (uint64_t)a3, (double)a4, v10);
  double v12 = a3[7];
  double v13 = a3[8];
  long double v14 = tan(v13 * -0.5);
  long double v15 = atan(v14 * sqrt((1.0 - v12) / (v12 + 1.0)));
  long double v16 = v15 + v15 - v12 * sin(v15 + v15);
  GLON_Alm_Calc_Corrns(v25.f64, a3, v11, v13 + v16, 0.0);
  long double v17 = a3[8] + v16;
  double v18 = v29[0];
  double v19 = (double)a4 - v29[0];
  double v20 = v17 + v19 * 6.28318531 / (a3[5] + 43200.0);
  GLON_Alm_Calc_Corrns(v22.f64, a3, v11, v20, v19);
  float64x2_t v22 = vsubq_f64(v22, v25);
  float64x2_t v23 = vsubq_f64(v23, v26);
  float64x2_t v24 = vsubq_f64(v24, v27);
  GLON_Alm_Apply_Corrns(v22.f64, a3, (uint64_t)v21, v11, v28 + (v18 + -10800.0) * 0.00007292115, v20);
  GLON_Alm_Calc_ECEF_PosVel((double *)v21, (double *)a1, (double *)a2, a4);
}

void *NK_Validate_Fix(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2 + 27128;
  uint64_t v9 = a3 + 61832;
  *(_WORD *)(a3 + 61832) = 0;
  if (API_Qual_Pos("default", 1, 0, 0, 0))
  {
    *(_WORD *)uint64_t v9 = 257;
LABEL_11:
    *(void *)uint64_t v8 = (*(_DWORD *)v8 + 1);
    goto LABEL_15;
  }
  int v10 = *(unsigned __int8 *)(v9 + 1);
  if (!*(unsigned char *)(v9 + 1))
  {
    if (*(_DWORD *)(a3 + 1872) == 1)
    {
      if (API_Qual_Pos("default", 0, 0, 0, 0))
      {
        int v10 = 1;
        *(unsigned char *)(v9 + 1) = 1;
      }
      else
      {
        int v10 = *(unsigned __int8 *)(v9 + 1);
      }
    }
    else
    {
      int v10 = 0;
    }
  }
  if (*(unsigned char *)v9)
  {
    if (v10) {
      goto LABEL_11;
    }
  }
  else if (v10 && *(int *)(v9 + 4) > 3)
  {
    goto LABEL_15;
  }
  int v11 = *(_DWORD *)(v8 + 4) + 1;
  *(_DWORD *)uint64_t v8 = 0;
  *(_DWORD *)(v8 + 4) = v11;
LABEL_15:
  uint64_t result = (void *)API_Get_Fix_Reliability();
  int v13 = *(_DWORD *)(a3 + 20);
  if (v13 < 10 || !*(unsigned char *)v9) {
    goto LABEL_37;
  }
  BOOL v14 = *(_DWORD *)v8 < 3u || (int)result < 2;
  if (v14 || *(double *)(v9 + 176) > *(double *)(a4 + 1680) || *(double *)(v9 + 96) > *(double *)(a4 + 1696)) {
    goto LABEL_37;
  }
  unsigned int v15 = a1[89];
  unsigned int v16 = a1[90];
  if (a1[89] && 3 * v16 <= v15)
  {
    if (a1[90]) {
      LOBYTE(v15) = (int)(v15 - v16) / (int)v16;
    }
  }
  else
  {
    if (!a1[90] || v16 < v15) {
      goto LABEL_31;
    }
    LOBYTE(v15) = 0;
  }
  *(unsigned char *)(v9 + 14) = v15;
LABEL_31:
  if (v13 == 11 && !a1[91])
  {
    unsigned int v17 = a1[87];
    if (a1[87])
    {
      int v18 = a1[88];
      if (3 * v18 <= v17)
      {
        if (a1[88]) {
          unsigned int v17 = (int)(v17 - v18) / v18;
        }
        goto LABEL_36;
      }
    }
  }
  if (a1[88] && a1[88] >= a1[87])
  {
    LOBYTE(v17) = 0;
LABEL_36:
    *(unsigned char *)(v9 + 15) = v17;
  }
LABEL_37:
  if (!*(_DWORD *)(a3 + 1872)
    && *(unsigned char *)(v9 + 1)
    && *(_DWORD *)v8 >= 0x1Eu
    && *(_DWORD *)a3 - *(_DWORD *)(a4 + 1764) >= 25001
    && *(int *)(a3 + 1868) >= 3
    && *(int *)(v9 + 8) >= 4
    && v13 >= 8
    && !*(unsigned char *)(a2 + 241)
    && *(double *)(v9 + 176) <= *(double *)(a4 + 1680)
    && *(double *)(v9 + 96) <= *(double *)(a4 + 1696))
  {
    if ((result - 2) >= 3)
    {
      if (!result)
      {
        return EvCrt_Illegal_switch_case("NK_Validate_Fix", 0x102u);
      }
    }
    else
    {
      *(_DWORD *)a4 = 1;
    }
  }
  return result;
}

void NK_Dopp_Outlier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __b[256] = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 + 27136;
  if (!*(_DWORD *)(a2 + 27136))
  {
    qword_26AA36318 = 0;
    _MergedGlobals_7 = 0;
  }
  memset_pattern16(__b, &unk_263D82930, 0x400uLL);
  if (!*(unsigned char *)(v6 + 114)) {
    return;
  }
  int v7 = *(_DWORD *)a3 - *(_DWORD *)(v6 + 200);
  int v8 = v7 / 1000;
  if (*(double *)(a2 + 27240) <= 17.0) {
    int v9 = 3;
  }
  else {
    int v9 = 5;
  }
  if (*(unsigned char *)(v6 + 40))
  {
    int v10 = (int)*(double *)(a2 + 27344);
    if (v10 <= 1) {
      int v10 = 1;
    }
    unsigned int v11 = 0x7D0u / v10 + v9;
    if (v11 >= 0x96) {
      unsigned int v11 = 150;
    }
    if (v8 > (int)v11) {
      return;
    }
    uint64_t v76 = v6;
    int v77 = *(_DWORD *)a3;
    int v75 = *(unsigned __int8 *)(v6 + 40);
    double v74 = *(double *)(a2 + 27184);
    double v12 = (double *)(a2 + 27192);
  }
  else
  {
    if (v8 > v9) {
      return;
    }
    uint64_t v76 = v6;
    int v77 = *(_DWORD *)a3;
    int v75 = *(unsigned __int8 *)(v6 + 40);
    double v74 = *(double *)(a3 + 1664) * 299792458.0;
    double v12 = (double *)(a3 + 1848);
  }
  uint64_t v13 = 0;
  int v14 = v7 / -2000 + 85;
  double v73 = *v12;
  unsigned int v15 = (unsigned char *)(a1 + 96);
  unsigned int v16 = (double *)(a3 + 32336);
  uint64_t v17 = a3 + 36872;
  uint64_t v18 = a2 + 1944;
  double v79 = 0.0;
  double v19 = -0.5;
  double v20 = 0.5;
  double v78 = 0.0;
  double v21 = 0.0;
  double v22 = 0.0;
  double v23 = 0.0;
  do
  {
    __b[v13 + 128] = 0;
    if (*(unsigned char *)(a3 + 21968 + v13) || *(unsigned char *)(v17 + v13))
    {
      double v24 = *(double *)(a2 + 27328);
      double v25 = *(double *)(v18 + 5128) - v24;
      if (v25 <= 0.0) {
        double v26 = v19;
      }
      else {
        double v26 = v20;
      }
      double v27 = v25 + v26;
      if (v27 <= 2147483650.0)
      {
        if (v27 >= -2147483650.0) {
          int v28 = (int)v27;
        }
        else {
          int v28 = 0x80000000;
        }
      }
      else
      {
        int v28 = 0x7FFFFFFF;
      }
      if (v28 < 0) {
        int v28 = -v28;
      }
      if (v28 > 0x168) {
        v28 -= 360;
      }
      if (v28 > 180) {
        v28 -= 180;
      }
      if (v28 > 90) {
        int v28 = 180 - v28;
      }
      if (v28 <= v14)
      {
        double v29 = *(double *)(v18 + 5120) + v24 * -0.0174532925;
        double v30 = -6.28318531;
        if (v29 >= 3.14159265 || (double v30 = 6.28318531, v29 < -3.14159265)) {
          double v29 = v29 + v30;
        }
        long double v31 = *(double *)v18;
        double v32 = cos(v29);
        double v33 = cos(v31);
        if (*(unsigned char *)(v17 + v13))
        {
          double v34 = *(double *)(a3 + 8 * v13 + 208) / *(double *)(a3 + 1552) - v16[3978];
          double v35 = 0.04;
        }
        else
        {
          double v34 = -*(double *)(a1 + 4448 + 8 * v13) - v16[3978];
          double v35 = *v16;
        }
        double v20 = 0.5;
        *(double *)&__b[v13] = v34;
        double v36 = -(v32 * v33);
        *(double *)&__b[v13 + 128] = v36;
        if (*v15 != 7)
        {
          double v37 = 1.0 / v35;
          double v23 = v23 + v37;
          double v21 = v21 + v36 * v37;
          double v22 = v22 + v36 * v37 * v36;
          double v38 = v34 * v37;
          double v78 = v78 + v38;
          double v79 = v79 + v36 * v38;
        }
        double v19 = -0.5;
      }
    }
    ++v13;
    v15 += 4;
    ++v16;
    v18 += 40;
  }
  while (v13 != 128);
  double v39 = -v21;
  if (*(_DWORD *)(v76 + 68) == 3)
  {
    double v40 = v23 * (v22 + 10000.0) - v21 * v21;
    if (v40 > 0.0001)
    {
      *(double *)&qword_26AA36318 = (v79 + 0.0) * (1.0 / v40 * v39) + (v22 + 10000.0) * (1.0 / v40) * v78;
      _MergedGlobals_7 = v77;
    }
    return;
  }
  double v41 = v23 * v22 - v21 * v21;
  double v43 = v73;
  double v42 = v74;
  if (v41 > 0.0001)
  {
    double v44 = 1.0 / v41;
    double v45 = v22 * v44;
    double v46 = v23 * v44;
    double v47 = v44 * v39;
    double v42 = v79 * v47 + v45 * v78;
    double v43 = v79 * v46 + v47 * v78;
  }
  if (v75)
  {
    int v48 = v77 - *(_DWORD *)(v76 + 44);
    if (v48 > 90999) {
      goto LABEL_57;
    }
    uint64_t v49 = (double *)(a2 + 27184);
  }
  else
  {
    uint64_t v49 = (double *)&qword_26AA36318;
    int v48 = v77 - _MergedGlobals_7;
    if (v77 - _MergedGlobals_7 > 179999) {
      goto LABEL_57;
    }
  }
  double v50 = 1.0 / ((double)(v48 / 1000 * (v48 / 1000)) * 0.0000308641975 + 0.0001);
  double v51 = (v23 + v50) * v22 - v21 * v21;
  if (v51 > 0.0001)
  {
    double v52 = v78 + v50 * *v49;
    double v53 = 1.0 / v51;
    double v54 = v53 * v39;
    double v42 = v79 * v54 + v22 * v53 * v52;
    double v43 = v79 * ((v23 + v50) * v53) + v54 * v52;
  }
LABEL_57:
  uint64_t v55 = 0;
  unsigned int v56 = 0;
  unsigned int v57 = 0;
  memset(v80, 0, sizeof(v80));
  double v58 = fmax(fabs(v43) * 0.25, 2.5);
  do
  {
    if (*(unsigned char *)(a3 + 21968 + v55) || *(unsigned char *)(a3 + 36872 + v55))
    {
      double v59 = *(double *)&__b[v55 + 128];
      if (fabs(v59) > 0.05)
      {
        double v60 = (*(double *)&__b[v55] - v42) / v59;
        BOOL v61 = v60 < 0.0;
        if (v43 <= v58) {
          BOOL v61 = 0;
        }
        if (v60 >= -v58 && !v61)
        {
          if (v60 > 0.0) {
            ++v56;
          }
        }
        else
        {
          ++v57;
          *((unsigned char *)v80 + v55) = 1;
        }
      }
    }
    ++v55;
  }
  while (v55 != 128);
  if (v75) {
    int v63 = 70;
  }
  else {
    int v63 = 50;
  }
  if (v75) {
    unsigned int v64 = 40;
  }
  else {
    unsigned int v64 = 36;
  }
  if (v57 && (v56 >= v57 || v75 && v57 <= 3))
  {
    uint64_t v65 = 0;
    uint64_t v66 = a3 + 7064;
    uint64_t v67 = a3 + 37128;
    uint64_t v68 = a3 + 21968;
    long long v69 = (int *)(a2 + 1920);
    int v70 = (_DWORD *)(a3 + 37128);
    while (!*((unsigned char *)v80 + v65)
         || *v69 >= v63
         || v64 <= *(unsigned __int8 *)(a1 + 1760 + v65)
         || *(double *)(a3 + 12056 + 8 * v65) >= 50.0)
    {
LABEL_93:
      ++v65;
      ++v70;
      v69 += 10;
      if (v65 == 128) {
        return;
      }
    }
    if (*(unsigned char *)(v68 + v65))
    {
      *(unsigned char *)(v68 + v65) = 0;
      unsigned int v71 = (_DWORD *)(a3 + 4 * v65 + 22224);
      int v72 = (unsigned char *)(a3 + 21659);
    }
    else
    {
      if (!*(unsigned char *)(v67 + v65 - 256)) {
        goto LABEL_91;
      }
      *(unsigned char *)(v67 + v65 - 256) = 0;
      unsigned int v71 = v70;
      int v72 = (unsigned char *)(a3 + 36563);
    }
    *unsigned int v71 = 11;
    ++v72[1];
    --*v72;
LABEL_91:
    if (*(unsigned char *)(v66 + v65))
    {
      *(unsigned char *)(v66 + v65) = 0;
      *(_DWORD *)(a3 + 7320 + 4 * v65) = 11;
      ++*(unsigned char *)(a3 + 6756);
      --*(unsigned char *)(a3 + 6755);
    }
    goto LABEL_93;
  }
}

uint64_t Decode_GPS_Health_Subframe(uint64_t result, BOOL *a2)
{
  uint64_t v2 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v3 = *(_DWORD *)(result + 12 + v2);
    double v4 = &v6[v2];
    *double v4 = (v3 >> 18) & 0x1F;
    v4[1] = (v3 >> 12) & 0x1F;
    double v4[2] = (v3 >> 6) & 0x1F;
    v2 += 4;
    v4[3] = v3 & 0x1F;
  }
  while (v2 != 24);
  for (uint64_t i = 0; i != 24; ++i)
    a2[i] = (0xE4FE7F3uLL >> v6[i]) & 1;
  return result;
}

uint64_t Get_GPS_Kep_Ephemeris(uint64_t result, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = *(void *)a3;
  *(_DWORD *)(a4 + 8) = result;
  *(unsigned char *)(a4 + 12) = a2;
  unsigned int v4 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(a4 + 22) = (v4 >> 14) & 0x3FF;
  *(unsigned char *)(a4 + 19) = BYTE1(v4) & 0xF;
  double v5 = (double)*(char *)(a3 + 24);
  *(unsigned char *)(a4 + 14) = (v4 >> 2) & 0x1F;
  double v6 = v5 * 4.65661287e-10;
  int v7 = *(_DWORD *)(a3 + 28);
  *(_WORD *)(a4 + 20) = BYTE2(v7);
  *(_DWORD *)(a4 + 24) = 16 * (unsigned __int16)v7;
  int v8 = (const float *)(a3 + 32);
  uint32x2_t v9 = (uint32x2_t)vld1_dup_f32(v8);
  int32x2_t v10 = vshl_s32((int32x2_t)vshl_u32(v9, (uint32x2_t)0x800000010), (int32x2_t)0xFFFFFFE8FFFFFFF0);
  v11.i64[0] = v10.i32[0];
  v11.i64[1] = v10.i32[1];
  *(float64x2_t *)(a4 + 48) = vmulq_f64(vcvtq_f64_s64(v11), (float64x2_t)xmmword_263D844A0);
  LODWORD(v8) = *(_DWORD *)(a3 + 40);
  *(double *)(a4 + 40) = (double)(int)(((int)(*(_DWORD *)(a3 + 36) << 8) >> 8) & 0xFFFFFFFC) * 1.16415322e-10;
  int v13 = *(_DWORD *)(a3 + 44);
  int v12 = *(_DWORD *)(a3 + 48);
  *(double *)(a4 + 104) = (double)(__int16)(v13 >> 8) * 3.57157734e-13;
  int v14 = v12 & 0xFFFFFF | (v13 << 24);
  double v15 = (double)(*(_DWORD *)(a3 + 56) & 0xFFFFFF | (*(_DWORD *)(a3 + 52) << 24)) * 1.16415322e-10;
  v16.i32[0] = *(_DWORD *)(a3 + 52);
  __int32 v17 = *(_DWORD *)(a3 + 60);
  int v18 = *(_DWORD *)(a3 + 64);
  v16.i32[1] = v17;
  int32x2_t v19 = vshr_n_s32(vshl_n_s32(v16, 8uLL), 0x10uLL);
  v11.i64[0] = v19.i32[0];
  v11.i64[1] = v19.i32[1];
  float64x2_t v20 = (float64x2_t)vdupq_n_s64(0x3E20000000000000uLL);
  *(float64x2_t *)(a4 + 136) = vmulq_f64(vcvtq_f64_s64(v11), v20);
  *(double *)(a4 + 184) = (double)(v18 & 0xFFFFFF | (v17 << 24)) * 0.00000190734863;
  *(_DWORD *)(a4 + 28) = (*(_DWORD *)(a3 + 68) >> 4) & 0xFFFF0;
  int v21 = *(_DWORD *)(a3 + 68);
  __int32 v22 = *(_DWORD *)(a3 + 80);
  double v23 = (double)(*(_DWORD *)(a3 + 76) & 0xFFFFFF | (*(_DWORD *)(a3 + 72) << 24));
  v24.i32[0] = *(_DWORD *)(a3 + 72);
  v24.i32[1] = v22;
  uint32x2_t v25 = (uint32x2_t)vshr_n_s32(vshl_n_s32(v24, 8uLL), 0x10uLL);
  v11.i64[0] = v25.i32[0];
  v11.i64[1] = v25.i32[1];
  *(float64x2_t *)(a4 + 152) = vmulq_f64(vcvtq_f64_s64(v11), v20);
  v20.f64[0] = (double)(*(_DWORD *)(a3 + 84) & 0xFFFFFF | (v22 << 24));
  int v26 = *(_DWORD *)(a3 + 96);
  int v27 = *(_DWORD *)(a3 + 92) & 0xFFFFFF | (*(_DWORD *)(a3 + 88) << 24);
  v25.i32[0] = *(_DWORD *)(a3 + 88);
  *(double *)(a4 + 200) = v23 * 0.00000000146291808;
  *(double *)(a4 + 208) = v20.f64[0] * 0.00000000146291808;
  v25.i32[1] = (int)v8;
  int32x2_t v28 = vshr_n_s32((int32x2_t)vshl_u32(v25, (uint32x2_t)0x1000000008), 0x10uLL);
  v11.i64[0] = v28.i32[0];
  v11.i64[1] = v28.i32[1];
  float64x2_t v29 = vmulq_f64(vcvtq_f64_s64(v11), (float64x2_t)vdupq_n_s64(0x3FA0000000000000uLL));
  if ((v21 & 0x80) != 0) {
    char v30 = 6;
  }
  else {
    char v30 = 4;
  }
  *(unsigned char *)(a4 + 18) = v30;
  *(float64x2_t *)(a4 + 120) = v29;
  *(double *)(a4 + 216) = (double)v27 * 0.00000000146291808;
  *(double *)(a4 + 224) = v15;
  *(double *)(a4 + 232) = (double)(v26 << 8) * 1.3951474e-15;
  *(double *)(a4 + 168) = (double)(int)(*(__int16 *)(a3 + 100) & 0xFFFFFFFC) * 8.92894335e-14;
  *(double *)(a4 + 176) = (double)v14 * 0.00000000146291808;
  int v31 = *(unsigned __int8 *)(a3 + 108);
  *(unsigned char *)(a4 + 15) = *(unsigned char *)(a3 + 108) == 0;
  BOOL v32 = *(unsigned char *)(a3 + 109) == 1;
  *(unsigned char *)(a4 + 16) = v32;
  if (v31)
  {
    BOOL v32 = 0;
    double v33 = 0.0;
    double v34 = 0.0;
  }
  else
  {
    double v33 = (double)*(__int16 *)(a3 + 110) * 2.91038305e-11;
    double v34 = (double)*(__int16 *)(a3 + 112) * 2.91038305e-11;
  }
  *(unsigned char *)(a4 + 17) = v32;
  double v35 = v6 - v33;
  *(double *)(a4 + 64) = v35;
  *(double *)(a4 + 72) = v35;
  double v36 = v6 - v34;
  *(double *)(a4 + 80) = v36;
  *(double *)(a4 + 88) = v36;
  *(double *)(a4 + 96) = v35;
  int v37 = *(char *)(a3 + 114);
  if (v37 < 0) {
    *(unsigned char *)(a4 + 19) = v37;
  }
  return result;
}

void *sprintf01da(void *result, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0xA)
  {
    if (a4)
    {
      *a3 = 45;
      unsigned int v4 = 1;
    }
    else
    {
      unsigned int v4 = 0;
    }
    double v5 = &a3[v4];
    *double v5 = a2 + 48;
    v5[1] = 0;
    char v6 = *a3;
    if (*a3)
    {
      int v7 = (unsigned char *)*result;
      int v8 = a3 + 1;
      do
      {
        *uint64_t result = v7 + 1;
        *int v7 = v6;
        int v7 = (unsigned char *)*result;
        if (*result >= result[3])
        {
          int v7 = (unsigned char *)result[2];
          *uint64_t result = v7;
        }
        int v9 = *v8++;
        char v6 = v9;
      }
      while (v9);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)result, a2, a3, 0, a4, 0);
  }
  return result;
}

void *sprintf_02d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf01da(a1, -a2, v3, 1);
  }
  else {
    return (void *)sprintf02da((uint64_t)a1, a2, v3, 0);
  }
}

uint64_t sprintf02da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x64)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit2(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t sprintf_03d(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf02da(a1, -a2, v3, 1);
  }
  else {
    return sprintf03da(a1, a2, v3, 0);
  }
}

uint64_t sprintf03da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x3E8)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit3(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t sprintf08da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x5F5E100)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit8(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t sprintf_09d(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf08da(a1, -a2, v3, 1);
  }
  else {
    return sprintf09da(a1, a2, v3, 0);
  }
}

uint64_t sprintf09da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x3B9ACA00)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit9(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t digit10(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 + 294967296;
  if (a2 > 0xEE6B27FF)
  {
    char v6 = 52;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x773593FF)
  {
    v5 -= 2000000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x3B9AC9FF);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 10)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x3B9AC9FF) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 1000000000;
  }

  return digit9(a1, v9, a3, v8, a5);
}

void *sprintf1da(void *result, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0xA)
  {
    if (a5)
    {
      a3[a4] = 45;
      LOBYTE(a4) = a4 + 1;
    }
    a3[a4] = a2 + 48;
    a3[(a4 + 1)] = 0;
    char v5 = *a3;
    if (*a3)
    {
      char v6 = (unsigned char *)*result;
      char v7 = a3 + 1;
      do
      {
        *uint64_t result = v6 + 1;
        unsigned char *v6 = v5;
        char v6 = (unsigned char *)*result;
        if (*result >= result[3])
        {
          char v6 = (unsigned char *)result[2];
          *uint64_t result = v6;
        }
        int v8 = *v7++;
        char v5 = v8;
      }
      while (v8);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)result, a2, a3, a4, a5, 0);
  }
  return result;
}

void *sprintf_2d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf1da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf2da(a1, a2, v3, 0, 0);
  }
}

void *sprintf2da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x64)
  {
    if (a2 < 0xA)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf1da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit2((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_3d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf2da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf3da(a1, a2, v3, 0, 0);
  }
}

void *sprintf3da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x3E8)
  {
    if (a2 < 0x64)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf2da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit3((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_4d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf3da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf4da(a1, a2, v3, 0, 0);
  }
}

void *sprintf4da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 >> 4 < 0x271)
  {
    if (a2 < 0x3E8)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf3da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit4((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_5d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf4da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf5da(a1, a2, v3, 0, 0);
  }
}

void *sprintf5da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 >> 5 < 0xC35)
  {
    if (a2 >> 4 < 0x271)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf4da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit5((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_6d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf5da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf6da(a1, a2, v3, 0, 0);
  }
}

void *sprintf6da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0xF4240)
  {
    if (a2 >> 5 < 0xC35)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf5da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit6((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_7d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf6da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf7da(a1, a2, v3, 0, 0);
  }
}

void *sprintf7da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x989680)
  {
    if (a2 < 0xF4240)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf6da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit7((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_8d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf7da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf8da(a1, a2, v3, 0, 0);
  }
}

void *sprintf8da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x5F5E100)
  {
    if (a2 < 0x989680)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf7da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit8((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_9d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf8da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf9da(a1, a2, v3, 0, 0);
  }
}

void *sprintf9da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x3B9ACA00)
  {
    if (a2 < 0x5F5E100)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf8da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit9((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_10d(void *a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0)
  {
    a2 = -a2;
    unsigned int v3 = 0;
    int v4 = 1;
  }
  else
  {
    if (a2 >= 0x3B9ACA00) {
      return (void *)digit10((uint64_t)a1, a2, v5, 0, 0);
    }
    v5[0] = 32;
    unsigned int v3 = 1;
    int v4 = 0;
  }
  return sprintf9da(a1, a2, v5, v3, v4);
}

void *sprintf_10u(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a2 >= 0x3B9ACA00) {
    return (void *)digit10((uint64_t)a1, a2, v3, 0, 0);
  }
  v3[0] = 32;
  return sprintf9da(a1, a2, v3, 1u, 0);
}

uint64_t sprintf_2f(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_2fa(a1, a2, v5, 0, 0);
  }
  unsigned int v4 = -a2;
  if (a2 <= 0xFFFFFFF6) {
    return nzet(a1, v4, v5, 0, 1, 2);
  }
  v5[0] = 45;
  return digit2(a1, v4, v5, 1, 2);
}

uint64_t sprintf_3f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_3fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFFFF9C) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 3) {
    return sprintf_2fa(a1, v5, v6, 0, 1);
  }
  v6[0] = 45;
  return digit3(a1, v5, v6, 1, 3);
}

uint64_t sprintf_4f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_4fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFFFC18) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 4) {
    return sprintf_3fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit4(a1, v5, v6, 1, 4);
}

uint64_t sprintf_5f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_5fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFFD8F0) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 5) {
    return sprintf_4fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit5(a1, v5, v6, 1, 5);
}

uint64_t sprintf_6f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_6fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFE7960) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 6) {
    return sprintf_5fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit6(a1, v5, v6, 1, 6);
}

uint64_t sprintf_7f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_7fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFF0BDC0) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 7) {
    return sprintf_6fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit7(a1, v5, v6, 1, 7);
}

uint64_t sprintf_8f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_8fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFF676980) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 8) {
    return sprintf_7fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit8(a1, v5, v6, 1, 8);
}

uint64_t sprintf_9f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0)
  {
    if (a2 <= 0xFA0A1F00)
    {
      a2 = -a2;
      int v3 = 1;
      return nzet(a1, a2, v8, 0, v3, a3);
    }
    if (a3 == 9)
    {
      v8[0] = 45;
      a2 = -a2;
      int v5 = 1;
      return digit9(a1, a2, v8, v5, 9);
    }
    a2 = -a2;
    unsigned int v6 = 0;
    int v7 = 1;
  }
  else
  {
    if (a2 >= 0x5F5E100)
    {
      int v3 = 0;
      return nzet(a1, a2, v8, 0, v3, a3);
    }
    if (a3 == 9)
    {
      int v5 = 0;
      return digit9(a1, a2, v8, v5, 9);
    }
    v8[0] = 32;
    unsigned int v6 = 1;
    int v7 = 0;
  }
  return sprintf_8fa(a1, a2, v8, v6, v7, a3);
}

uint64_t sprintf_10f9(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0)
  {
    if (a2 <= 0xC4653600)
    {
      a2 = -a2;
      int v2 = 1;
      return nzet(a1, a2, v5, 0, v2, 10);
    }
    v5[0] = 45;
    a2 = -a2;
    int v4 = 1;
  }
  else
  {
    if (a2 >= 0x3B9ACA00)
    {
      int v2 = 0;
      return nzet(a1, a2, v5, 0, v2, 10);
    }
    int v4 = 0;
  }
  return digit10(a1, a2, v5, v4, 10);
}

char **sprintf_1x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x10) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[a2];
  int v3 = &v7;
  char v7 = 0;
  int v4 = *result;
  do
  {
    *uint64_t result = v4 + 1;
    *int v4 = v2;
    int v4 = *result;
    if (*result >= result[3])
    {
      int v4 = result[2];
      *uint64_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

char **nzxt(char **result, unint64_t a2, char *a3)
{
  if (a2 >> 28)
  {
    *a3 = hexTABLE[(unint64_t)a2 >> 28];
    a3[1] = hexTABLE[(a2 >> 24) & 0xF];
    int v3 = 2;
    goto LABEL_5;
  }
  if ((a2 & 0xF000000) != 0)
  {
    *a3 = hexTABLE[(unint64_t)a2 >> 24];
    int v3 = 1;
LABEL_5:
    return (char **)hex6((uint64_t)result, a2, a3, v3);
  }
  if ((a2 & 0xF00000) != 0)
  {
    int v3 = 0;
    goto LABEL_5;
  }
  if ((a2 & 0xF0000) != 0)
  {
    char v4 = hexTABLE[(a2 >> 16) & 0xF];
    *a3 = v4;
    a3[1] = hexTABLE[(unsigned __int16)a2 >> 12];
    int v5 = (unsigned __int8 *)(a3 + 1);
    a3[2] = hexTABLE[(a2 >> 8) & 0xF];
    a3[3] = hexTABLE[a2 >> 4];
    a3[4] = hexTABLE[a2 & 0xF];
    a3[5] = 0;
    char v6 = *result;
    do
    {
      *uint64_t result = v6 + 1;
      char *v6 = v4;
      char v6 = *result;
      if (*result >= result[3])
      {
        char v6 = result[2];
        *uint64_t result = v6;
      }
      int v7 = *v5++;
      char v4 = v7;
    }
    while (v7);
    return result;
  }
  if ((a2 & 0xF000) != 0)
  {
    *a3 = hexTABLE[(unsigned __int16)a2 >> 12];
    int v8 = 1;
LABEL_20:
    return (char **)hex3((uint64_t)result, a2, a3, v8);
  }
  if ((a2 & 0xF00) != 0)
  {
    int v8 = 0;
    goto LABEL_20;
  }
  if ((a2 & 0xF0) != 0)
  {
    char v9 = hexTABLE[a2 >> 4];
    *a3 = v9;
    a3[1] = hexTABLE[a2 & 0xF];
    int32x2_t v10 = (unsigned __int8 *)(a3 + 1);
    a3[2] = 0;
    int64x2_t v11 = *result;
    do
    {
      *uint64_t result = v11 + 1;
      *int64x2_t v11 = v9;
      int64x2_t v11 = *result;
      if (*result >= result[3])
      {
        int64x2_t v11 = result[2];
        *uint64_t result = v11;
      }
      int v12 = *v10++;
      char v9 = v12;
    }
    while (v12);
  }
  else
  {
    unsigned __int8 v13 = hexTABLE[a2 & 0xF];
    *(_WORD *)a3 = v13;
    int v14 = (unsigned __int8 *)(a3 + 1);
    double v15 = (unsigned __int8 *)*result;
    do
    {
      *uint64_t result = (char *)(v15 + 1);
      unsigned __int8 *v15 = v13;
      double v15 = (unsigned __int8 *)*result;
      if (*result >= result[3])
      {
        double v15 = (unsigned __int8 *)result[2];
        *uint64_t result = (char *)v15;
      }
      int v16 = *v14++;
      unsigned __int8 v13 = v16;
    }
    while (v16);
  }
  return result;
}

char **sprintf_2x(char **a1, unint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a2 >= 0x100) {
    return nzxt(a1, a2, v3);
  }
  else {
    return (char **)sprintf2a((uint64_t)a1, a2, v3, 0);
  }
}

uint64_t sprintf2a(uint64_t result, unsigned __int8 a2, unsigned char *a3, int a4)
{
  if ((a2 & 0xF0) != 0) {
    char v4 = hexTABLE[a2 >> 4];
  }
  else {
    char v4 = 32;
  }
  int v5 = &a3[a4];
  *int v5 = v4;
  *(_WORD *)(v5 + 1) = hexTABLE[a2 & 0xF];
  char v6 = *a3;
  if (*a3)
  {
    int v7 = *(unsigned char **)result;
    int v8 = a3 + 1;
    do
    {
      *(void *)uint64_t result = v7 + 1;
      *int v7 = v6;
      int v7 = *(unsigned char **)result;
      if (*(void *)result >= *(void *)(result + 24))
      {
        int v7 = *(unsigned char **)(result + 16);
        *(void *)uint64_t result = v7;
      }
      int v9 = *v8++;
      char v6 = v9;
    }
    while (v9);
  }
  return result;
}

char **sprintf_02x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x100) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[(unint64_t)a2 >> 4];
  int v3 = v7;
  v7[0] = hexTABLE[a2 & 0xF];
  v7[1] = 0;
  char v4 = *result;
  do
  {
    *uint64_t result = v4 + 1;
    *char v4 = v2;
    char v4 = *result;
    if (*result >= result[3])
    {
      char v4 = result[2];
      *uint64_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

char **sprintf_03x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x1000) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[(unint64_t)a2 >> 8];
  int v3 = v7;
  v7[0] = hexTABLE[a2 >> 4];
  v7[1] = hexTABLE[a2 & 0xF];
  v7[2] = 0;
  char v4 = *result;
  do
  {
    *uint64_t result = v4 + 1;
    *char v4 = v2;
    char v4 = *result;
    if (*result >= result[3])
    {
      char v4 = result[2];
      *uint64_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

uint64_t hex3(uint64_t result, unint64_t a2, unsigned char *a3, int a4)
{
  char v4 = &a3[a4];
  *char v4 = hexTABLE[(a2 >> 8) & 0xF];
  v4[1] = hexTABLE[a2 >> 4];
  *((_WORD *)v4 + 1) = hexTABLE[a2 & 0xF];
  char v5 = *a3;
  if (*a3)
  {
    char v6 = *(unsigned char **)result;
    int v7 = a3 + 1;
    do
    {
      *(void *)uint64_t result = v6 + 1;
      unsigned char *v6 = v5;
      char v6 = *(unsigned char **)result;
      if (*(void *)result >= *(void *)(result + 24))
      {
        char v6 = *(unsigned char **)(result + 16);
        *(void *)uint64_t result = v6;
      }
      int v8 = *v7++;
      char v5 = v8;
    }
    while (v8);
  }
  return result;
}

char **sprintf_04x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x10000) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[(unint64_t)a2 >> 12];
  int v3 = v7;
  v7[0] = hexTABLE[(a2 >> 8) & 0xF];
  v7[1] = hexTABLE[a2 >> 4];
  v7[2] = hexTABLE[a2 & 0xF];
  v7[3] = 0;
  char v4 = *result;
  do
  {
    *uint64_t result = v4 + 1;
    *char v4 = v2;
    char v4 = *result;
    if (*result >= result[3])
    {
      char v4 = result[2];
      *uint64_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

char **sprintf_06x(char **a1, unint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (BYTE3(a2)) {
    return nzxt(a1, a2, v3);
  }
  else {
    return (char **)hex6((uint64_t)a1, a2, v3, 0);
  }
}

uint64_t hex6(uint64_t a1, unint64_t a2, unsigned char *a3, int a4)
{
  uint64_t v4 = &a3[a4];
  *uint64_t v4 = hexTABLE[(a2 >> 20) & 0xF];
  v4[1] = hexTABLE[(a2 >> 16) & 0xF];
  double v4[2] = hexTABLE[(unsigned __int16)a2 >> 12];
  int v5 = (a4 + 3);

  return hex3(a1, a2, a3, v5);
}

uint64_t digit9(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 800000000;
  if (a2 > 0x2FAF07FF)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x17D783FF)
  {
    v5 -= 400000000;
    v6 |= 4u;
  }
  if (v5 > 0xBEBC1FF)
  {
    v5 -= 200000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x5F5E0FF);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 9)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x5F5E0FF) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 100000000;
  }

  return digit8(a1, v9, a3, v8, a5);
}

uint64_t digit8(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 80000000;
  if (a2 > 0x4C4B3FF)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x26259FF)
  {
    v5 -= 40000000;
    v6 |= 4u;
  }
  if (v5 > 0x1312CFF)
  {
    v5 -= 20000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x98967F);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 8)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x98967F) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 10000000;
  }

  return digit7(a1, v9, a3, v8, a5);
}

uint64_t digit7(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 8000000;
  if (a2 > 0x7A11FF)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x3D08FF)
  {
    v5 -= 4000000;
    v6 |= 4u;
  }
  if (v5 > 0x1E847F)
  {
    v5 -= 2000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0xF423F);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 7)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0xF423F) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 1000000;
  }

  return digit6(a1, v9, a3, v8, a5);
}

uint64_t digit6(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 800000;
  if (a2 >> 8 > 0xC34)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  unsigned int v7 = v5 >> 7;
  if (v5 >> 7 > 0xC34) {
    v5 -= 400000;
  }
  if (v7 > 0xC34) {
    v6 |= 4u;
  }
  unsigned int v8 = v5 >> 6;
  if (v5 >> 6 > 0xC34) {
    v5 -= 200000;
  }
  if (v8 > 0xC34) {
    v6 |= 2u;
  }
  char v9 = v6 | (v5 >> 5 > 0xC34);
  unsigned __int8 v10 = a4 + 1;
  a3[a4] = v9;
  if (a5 == 6)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v10 = a4 + 2;
  }
  if (v5 >> 5 <= 0xC34) {
    unsigned int v11 = v5;
  }
  else {
    unsigned int v11 = v5 - 100000;
  }

  return digit5(a1, v11, a3, v10, a5);
}

uint64_t digit5(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 80000;
  if (a2 >> 7 > 0x270)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  unsigned int v7 = v5 >> 6;
  if (v5 >> 6 > 0x270) {
    v5 -= 40000;
  }
  if (v7 > 0x270) {
    v6 |= 4u;
  }
  unsigned int v8 = v5 >> 5;
  if (v5 >> 5 > 0x270) {
    v5 -= 20000;
  }
  if (v8 > 0x270) {
    v6 |= 2u;
  }
  char v9 = v6 | (v5 >> 4 > 0x270);
  unsigned __int8 v10 = a4 + 1;
  a3[a4] = v9;
  if (a5 == 5)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v10 = a4 + 2;
  }
  if (v5 >> 4 <= 0x270) {
    unsigned int v11 = v5;
  }
  else {
    unsigned int v11 = v5 - 10000;
  }

  return digit4(a1, v11, a3, v10, a5);
}

uint64_t digit4(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 8000;
  if (a2 >> 6 > 0x7C)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0xF9F)
  {
    v5 -= 4000;
    v6 |= 4u;
  }
  if (v5 > 0x7CF)
  {
    v5 -= 2000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x3E7);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 4)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x3E7) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 1000;
  }

  return digit3(a1, v9, a3, v8, a5);
}

uint64_t digit3(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 800;
  if (a2 > 0x31F)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x18F)
  {
    v5 -= 400;
    v6 |= 4u;
  }
  if (v5 > 0xC7)
  {
    v5 -= 200;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x63);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 3)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x63) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 100;
  }

  return digit2(a1, v9, a3, v8, a5);
}

uint64_t digit2(uint64_t result, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 80;
  if (a2 > 0x4F)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x27)
  {
    v5 -= 40;
    v6 |= 4u;
  }
  char v7 = v6 | 2;
  if (v5 <= 0x13) {
    char v7 = v6;
  }
  else {
    v5 -= 20;
  }
  char v8 = v5 - 10;
  if (v5 <= 9) {
    char v8 = v5;
  }
  a3[a4] = v7 | (v5 > 9);
  if (a5 == 2)
  {
    unsigned __int8 v9 = a4 + 2;
    a3[(a4 + 1)] = 46;
    char v10 = v8 + 48;
  }
  else
  {
    unsigned __int8 v9 = a4 + 2;
    a3[(a4 + 1)] = v8 + 48;
    if (a5 != 1) {
      goto LABEL_16;
    }
    char v10 = 46;
  }
  a3[v9] = v10;
  unsigned __int8 v9 = a4 + 3;
LABEL_16:
  a3[v9] = 0;
  char v11 = *a3;
  if (*a3)
  {
    int v12 = *(unsigned char **)result;
    unsigned __int8 v13 = a3 + 1;
    do
    {
      *(void *)uint64_t result = v12 + 1;
      *int v12 = v11;
      int v12 = *(unsigned char **)result;
      if (*(void *)result >= *(void *)(result + 24))
      {
        int v12 = *(unsigned char **)(result + 16);
        *(void *)uint64_t result = v12;
      }
      int v14 = *v13++;
      char v11 = v14;
    }
    while (v14);
  }
  return result;
}

uint64_t nzet(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5, int a6)
{
  if (a2 < 0x3B9ACA00)
  {
    if (a2 < 0x5F5E100)
    {
      if (a2 < 0x989680)
      {
        if (a2 < 0xF4240)
        {
          if (a2 >> 5 < 0xC35)
          {
            if (a2 >> 4 < 0x271)
            {
              if (a2 < 0x3E8)
              {
                if (a2 < 0x64)
                {
                  if (a5)
                  {
                    a3[a4] = 45;
                    LOBYTE(a4) = a4 + 1;
                  }
                  return digit2(a1, a2, a3, a4, a6);
                }
                else
                {
                  if (a5)
                  {
                    a3[a4] = 45;
                    LOBYTE(a4) = a4 + 1;
                  }
                  return digit3(a1, a2, a3, a4, a6);
                }
              }
              else
              {
                if (a5)
                {
                  a3[a4] = 45;
                  LOBYTE(a4) = a4 + 1;
                }
                return digit4(a1, a2, a3, a4, a6);
              }
            }
            else
            {
              if (a5)
              {
                a3[a4] = 45;
                LOBYTE(a4) = a4 + 1;
              }
              return digit5(a1, a2, a3, a4, a6);
            }
          }
          else
          {
            if (a5)
            {
              a3[a4] = 45;
              LOBYTE(a4) = a4 + 1;
            }
            return digit6(a1, a2, a3, a4, a6);
          }
        }
        else
        {
          if (a5)
          {
            a3[a4] = 45;
            LOBYTE(a4) = a4 + 1;
          }
          return digit7(a1, a2, a3, a4, a6);
        }
      }
      else
      {
        if (a5)
        {
          a3[a4] = 45;
          LOBYTE(a4) = a4 + 1;
        }
        return digit8(a1, a2, a3, a4, a6);
      }
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit9(a1, a2, a3, a4, a6);
    }
  }
  else
  {
    if (a5)
    {
      a3[a4] = 45;
      LOBYTE(a4) = a4 + 1;
    }
    return digit10(a1, a2, a3, a4, a6);
  }
}

uint64_t sprintf_2fa(uint64_t a1, signed int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 10)
  {
    if (a5)
    {
      a3[a4] = 45;
      LOBYTE(a4) = a4 + 1;
    }
    return digit2(a1, a2, a3, a4, 2);
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, 2);
  }
}

uint64_t sprintf_3fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 100)
  {
    if (a6 == 3)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit3(a1, a2, a3, a4, 3);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_2fa(a1, a2, a3, v7, a5);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_4fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 1000)
  {
    if (a6 == 4)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit4(a1, a2, a3, a4, 4);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_3fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_5fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 10000)
  {
    if (a6 == 5)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit5(a1, a2, a3, a4, 5);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_4fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_6fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 100000)
  {
    if (a6 == 6)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit6(a1, a2, a3, a4, 6);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_5fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_7fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 1000000)
  {
    if (a6 == 7)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit7(a1, a2, a3, a4, 7);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_6fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_8fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 10000000)
  {
    if (a6 == 8)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit8(a1, a2, a3, a4, 8);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_7fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t GncS00_04HandleInitInd()
{
  *(void *)&v13[836] = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GncS00_04HandleInitInd");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v1 = 28;
  *(_OWORD *)long long __str = 0u;
  long long v5 = 0u;
  do
  {
    char v2 = &__str[v1];
    char *v2 = 0;
    *((_WORD *)v2 + 1) = 0;
    v2[4] = 0;
    *((void *)v2 + 2) = 0;
    *((void *)v2 + 3) = 0;
    *((void *)v2 + 1) = 0;
    *(void *)(v2 + 30) = 0;
    *((void *)v2 + 5) = 0;
    v1 += 52;
    *(_DWORD *)(v2 + 47) = 0;
  }
  while (v2 + 52 != v13);
  xmmword_26A9CC1B8 = v10;
  unk_26A9CC1C8 = v11;
  dword_26A9CC1D8 = v12;
  xmmword_26A9CC178 = v6;
  unk_26A9CC188 = v7;
  xmmword_26A9CC198 = v8;
  unk_26A9CC1A8 = v9;
  g_GncSFGClientData = *(_OWORD *)__str;
  *(_OWORD *)&byte_26A9CC168 = v5;
  return 0;
}

uint64_t GncS00_06HandleDeInitInd()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_DEINIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GncS00_06HandleDeInitInd");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  GncS04_99DeInitFGClientInstance();
  return 0;
}

uint64_t GncS00_03DefaultMessage(unsigned __int8 *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FSM:MID,%x,Srce,%u,Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncS00_03DefaultMessage", 520, *((_DWORD *)a1 + 1), *a1, a1[1]);
      int v3 = 2;
LABEL_6:
      gnssOsa_PrintLog(__str, v3, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncS00_03DefaultMessage", 517);
    int v3 = 1;
    goto LABEL_6;
  }
  return 0;
}

void GncS00_01Init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncS00_01Init", 76, 1, 0x10uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_INIT_IND =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS00_01Init");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(130, 130, 8521731, v1);
  }
}

void GncS00_02DeInit(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncS00_02DeInit", 97, 1, 0x10uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_DEINIT_IND =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS00_02DeInit");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(130, 130, 8521987, v1);
  }
}

void GncS00_07DestMissingHandler(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 8520195)
  {
    long long v5 = *(void **)(a1 + 24);
    if (v5) {
      free(v5);
    }
    *(void *)(a1 + 24) = 0;
  }
  else if (v3 == 8521475)
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4) {
      free(v4);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncS00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t Decode_BDS_B1C_BGTO(unsigned __int8 *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 4;
  int v2 = a1[20];
  int v3 = a1[21];
  int v4 = a1[23];
  int v5 = a1[25];
  int v6 = (v4 << 16) | (a1[24] << 8) | v5;
  unsigned int v7 = a1[27];
  unsigned int v8 = (v5 << 30 >> 31) & 0xFFFFE000 | (((v5 << 16) | (a1[26] << 8) | v7) >> 5) & 0x1FFF;
  unsigned int v9 = (8 * v7) & 0xFFFFFF80 | ((a1[28] | (v7 << 8)) >> 6) & 0x7F;
  unsigned int v10 = (v3 << 16) | (a1[22] << 8) | v4;
  LOWORD(v4) = ((v3 | (v2 << 8)) >> 2) & 0x1FFF;
  int v11 = a1[19];
  *(_WORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = (unsigned __int16)(v10 >> 2);
  *(_DWORD *)(a2 + 16) = (__int16)(v6 >> 2);
  *(_WORD *)(a2 + 20) = v8;
  *(unsigned char *)(a2 + 22) = v9;
  return ((v2 | (v11 << 8)) >> 7) & 7;
}

void *NV_Ram_Init(void *result)
{
  uint64_t v1 = (uint64_t)result;
  p_NV = (uint64_t)result;
  if (*((_DWORD *)result + 1) != 33424 || *((_DWORD *)result + 8354) != 22)
  {
    NV_Ram_Invalidate();
    uint64_t result = EvCrt_nd("NV_Ram_Init: Invalid NV", 4, v2, *(unsigned int *)(v1 + 4), 33424, *(unsigned int *)(v1 + 33416), 22);
    uint64_t v1 = p_NV;
  }
  *(_DWORD *)(v1 + 4) = 33424;
  *(_DWORD *)(v1 + 33416) = 22;
  return result;
}

void NV_Ram_Invalidate(void)
{
  uint64_t v0 = 0;
  uint64_t v1 = (void *)p_NV;
  *(void *)(p_NV + 8) = 0xFFFFFFFFLL;
  v1[5] = 0xFFFFFFFFLL;
  v1[8] = 0xFFFFFFFFLL;
  v1[4149] = 0xFFFFFFFFLL;
  v1[17] = 0xFFFFFFFFLL;
  v1[20] = 0xFFFFFFFFLL;
  v1[3650] = 0xFFFFFFFFLL;
  v1[11] = 0xFFFFFFFFLL;
  v1[3645] = 0xFFFFFFFFLL;
  v1[993] = 0xFFFFFFFFLL;
  v1[1650] = 0xFFFFFFFFLL;
  v1[760] = 0xFFFFFFFFLL;
  v1[3371] = 0xFFFFFFFFLL;
  do
  {
    v1[v0 + 248] = 0xFFFFFFFFLL;
    v0 += 16;
  }
  while (v0 != 512);
  for (uint64_t i = 0; i != 160; i += 16)
    v1[i + 833] = 0xFFFFFFFFLL;
  for (uint64_t j = 0; j != 216; j += 9)
    v1[j + 3799] = 0xFFFFFFFFLL;
  for (uint64_t k = 0; k != 432; k += 12)
    v1[k + 1218] = 0xFFFFFFFFLL;
  uint64_t v5 = 0x1FFFFFFFFFFFFB14;
  do
  {
    v1[v5 + 3371] = 0xFFFFFFFFLL;
    v5 += 20;
  }
  while (v5 * 8);
  for (uint64_t m = 0; m != 154; m += 11)
    v1[m + 3491] = 0xFFFFFFFFLL;
  for (uint64_t n = 24; n != 248; n += 7)
    v1[n] = 0xFFFFFFFFLL;
  for (iuint64_t i = 0; ii != 70; ii += 7)
    v1[ii + 763] = 0xFFFFFFFFLL;
  for (juint64_t j = 0; jj != 144; jj += 6)
    v1[jj + 3655] = 0xFFFFFFFFLL;
  for (kuint64_t k = 0; kk != 216; kk += 6)
    v1[kk + 1002] = 0xFFFFFFFFLL;
  for (muint64_t m = 0; mm != 441; mm += 7)
    v1[mm + 1670] = 0xFFFFFFFFLL;
  for (nuint64_t n = 0; nn != 112; nn += 8)
    v1[nn + 3379] = 0xFFFFFFFFLL;
  for (uint64_t i1 = 0; i1 != 72; i1 += 4)
    v1[i1 + 4015] = 0xFFFFFFFFLL;
  v1[3650] = 0xFFFFFFFFLL;
  v1[999] = 0xFFFFFFFFLL;
  v1[1660] = 0xFFFFFFFFLL;
  v1[1665] = 0xFFFFFFFFLL;
  v1[3375] = 0xFFFFFFFFLL;
  v1[4152] = 0xFFFFFFFFLL;
  v1[4161] = 0xFFFFFFFFLL;
  v1[4169] = 0xFFFFFFFFLL;
}

BOOL Core_Load_GPS_Klob(_OWORD *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 144;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 16);
  uint64_t v6 = *(void *)(p_NV + 136);
  if (v6 == v2) {
    *a1 = *(_OWORD *)(p_NV + 144);
  }
  return v6 == v2;
}

BOOL Core_Load_GPS_UTC(uint64_t a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 168;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 24);
  uint64_t v6 = *(void *)(p_NV + 160);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 168);
    *(void *)(a1 + 16) = *(void *)(p_NV + 184);
    *(_OWORD *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GAL_GGTO(_OWORD *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 8000;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 16);
  uint64_t v6 = *(void *)(p_NV + 7992);
  if (v6 == v2) {
    *a1 = *(_OWORD *)(p_NV + 8000);
  }
  return v6 == v2;
}

BOOL Core_Load_BDS_BGTO(_OWORD *a1, _OWORD *a2)
{
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV;
  uint64_t v6 = p_NV + 13288;
  __int16 v7 = -9871;
  do
  {
    int v8 = *(unsigned __int8 *)(v6 + v3) ^ HIBYTE(v7);
    __int16 v7 = -12691 * (v7 + (*(unsigned __int8 *)(v6 + v3) ^ HIBYTE(v7))) + 22719;
    v4 += v8;
    ++v3;
  }
  while (v3 != 32);
  uint64_t v9 = *(void *)(p_NV + 13280);
  BOOL result = v9 == v4;
  if (v9 == v4)
  {
    long long v11 = *(_OWORD *)(p_NV + 13288);
    *(_OWORD *)((char *)a1 + 12) = *(_OWORD *)(p_NV + 13300);
    *a1 = v11;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = v5 + 13328;
  __int16 v15 = -9871;
  do
  {
    int v16 = *(unsigned __int8 *)(v14 + v12) ^ HIBYTE(v15);
    __int16 v15 = -12691 * (v15 + (*(unsigned __int8 *)(v14 + v12) ^ HIBYTE(v15))) + 22719;
    v13 += v16;
    ++v12;
  }
  while (v12 != 32);
  if (*(void *)(v5 + 13320) == v13)
  {
    long long v17 = *(_OWORD *)(v5 + 13328);
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)(v5 + 13340);
    *a2 = v17;
    return 1;
  }
  return result;
}

BOOL Core_Load_NVIC_NGTO(uint64_t a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 27008;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 24);
  uint64_t v6 = *(void *)(p_NV + 27000);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 27008);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(p_NV + 27024);
    *(_OWORD *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GPS_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 96;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 40);
  uint64_t v6 = *(void *)(p_NV + 88);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 116);
    *(_OWORD *)a1 = *(_OWORD *)(p_NV + 100);
    *((_OWORD *)a1 + 1) = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_QZSS_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 6088;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 16);
  uint64_t v6 = *(void *)(p_NV + 6080);
  if (v6 == v2)
  {
    uint64_t v7 = *(void *)(p_NV + 6092);
    *((_WORD *)a1 + 4) = *(_WORD *)(p_NV + 6100);
    *(void *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GLON_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 29168;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 32);
  uint64_t v6 = *(void *)(p_NV + 29160);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 29172);
    *((void *)a1 + 2) = *(void *)(p_NV + 29188);
    *(_OWORD *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GAL_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 7952;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 40);
  uint64_t v6 = *(void *)(p_NV + 7944);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 7956);
    long long v8 = *(_OWORD *)(p_NV + 7972);
    *((_DWORD *)a1 + 8) = *(_DWORD *)(p_NV + 7988);
    *(_OWORD *)a1 = v7;
    *((_OWORD *)a1 + 1) = v8;
  }
  return v6 == v2;
}

BOOL Core_Load_BDS_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 13208;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 72);
  uint64_t v6 = *(void *)(p_NV + 13200);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 13212);
    long long v8 = *(_OWORD *)(p_NV + 13228);
    long long v9 = *(_OWORD *)(p_NV + 13244);
    *(_OWORD *)(a1 + 47) = *(_OWORD *)(p_NV + 13259);
    *((_OWORD *)a1 + 1) = v8;
    *((_OWORD *)a1 + 2) = v9;
    *(_OWORD *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_NVIC_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 26976;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 24);
  uint64_t v6 = *(void *)(p_NV + 26968);
  if (v6 == v2)
  {
    uint64_t v7 = *(void *)(p_NV + 26980);
    *(void *)(a1 + 6) = *(void *)(p_NV + 26986);
    *(void *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GLON_Clk1(_OWORD *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 29208;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 32);
  uint64_t v6 = *(void *)(p_NV + 29200);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 29208);
    *(_OWORD *)((char *)a1 + 12) = *(_OWORD *)(p_NV + 29220);
    *a1 = v7;
  }
  return v6 == v2;
}

uint64_t Core_Load_GPS_Eph(int a1, uint64_t a2)
{
  uint64_t v2 = (a1 - 1);
  if (v2 > 0x1F) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + (v2 << 7);
  uint64_t v6 = (void *)(v5 + 1984);
  uint64_t v7 = v5 + 1992;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 120);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + (v2 << 7);
  long long v11 = *(_OWORD *)(v10 + 1992);
  long long v12 = *(_OWORD *)(v10 + 2008);
  long long v13 = *(_OWORD *)(v10 + 2040);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v10 + 2024);
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  long long v14 = *(_OWORD *)(v10 + 2056);
  long long v15 = *(_OWORD *)(v10 + 2072);
  long long v16 = *(_OWORD *)(v10 + 2088);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(v10 + 2104);
  *(_OWORD *)(a2 + 80) = v15;
  *(_OWORD *)(a2 + 96) = v16;
  *(_OWORD *)(a2 + 64) = v14;
  return 1;
}

uint64_t Core_Load_QZSS_Eph(int a1, uint64_t a2)
{
  if ((a1 + 63) > 9u) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t v4 = (a1 - 193);
  uint64_t v5 = p_NV + (v4 << 7);
  uint64_t v6 = (void *)(v5 + 6664);
  uint64_t v7 = v5 + 6672;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v2) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v2) ^ HIBYTE(v8))) + 22719;
    v3 += v9;
    ++v2;
  }
  while (v2 != 120);
  if (*v6 != v3) {
    return 0;
  }
  uint64_t v10 = p_NV + (v4 << 7);
  long long v11 = *(_OWORD *)(v10 + 6672);
  long long v12 = *(_OWORD *)(v10 + 6688);
  long long v13 = *(_OWORD *)(v10 + 6720);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v10 + 6704);
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  long long v14 = *(_OWORD *)(v10 + 6736);
  long long v15 = *(_OWORD *)(v10 + 6752);
  long long v16 = *(_OWORD *)(v10 + 6768);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(v10 + 6784);
  *(_OWORD *)(a2 + 80) = v15;
  *(_OWORD *)(a2 + 96) = v16;
  *(_OWORD *)(a2 + 64) = v14;
  return 1;
}

uint64_t Core_Load_GLON_Eph(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x17) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 72 * v2;
  uint64_t v6 = (void *)(v5 + 30392);
  uint64_t v7 = v5 + 30400;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 64);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = (_OWORD *)(p_NV + 72 * v2);
  long long v11 = v10[1900];
  long long v12 = v10[1901];
  long long v13 = v10[1903];
  a2[2] = v10[1902];
  a2[3] = v13;
  *a2 = v11;
  a2[1] = v12;
  return 1;
}

uint64_t Core_Load_GAL_Eph(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x23) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 96 * v2;
  uint64_t v6 = (void *)(v5 + 9744);
  uint64_t v7 = v5 + 9752;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 88);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 96 * v2;
  long long v11 = *(_OWORD *)(v10 + 9768);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 9752);
  *(_OWORD *)(a2 + 16) = v11;
  long long v12 = *(_OWORD *)(v10 + 9784);
  long long v13 = *(_OWORD *)(v10 + 9800);
  long long v14 = *(_OWORD *)(v10 + 9816);
  *(void *)(a2 + 80) = *(void *)(v10 + 9832);
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 32) = v12;
  return 1;
}

uint64_t Core_Load_BDS_Eph(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x3E) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 160 * v2;
  uint64_t v6 = (void *)(v5 + 16888);
  uint64_t v7 = v5 + 16896;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 152);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 160 * v2;
  long long v11 = *(_OWORD *)(v10 + 16912);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 16896);
  *(_OWORD *)(a2 + 16) = v11;
  long long v12 = *(_OWORD *)(v10 + 16928);
  long long v13 = *(_OWORD *)(v10 + 16944);
  long long v14 = *(_OWORD *)(v10 + 16976);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v10 + 16960);
  *(_OWORD *)(a2 + 80) = v14;
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 48) = v13;
  long long v15 = *(_OWORD *)(v10 + 16992);
  long long v16 = *(_OWORD *)(v10 + 17008);
  long long v17 = *(_OWORD *)(v10 + 17024);
  *(void *)(a2 + 144) = *(void *)(v10 + 17040);
  *(_OWORD *)(a2 + 112) = v16;
  *(_OWORD *)(a2 + 128) = v17;
  *(_OWORD *)(a2 + 96) = v15;
  return 1;
}

uint64_t Core_Load_NVIC_Eph(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0xD) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 88 * v2;
  uint64_t v6 = (void *)(v5 + 27928);
  uint64_t v7 = v5 + 27936;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 80);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = (_OWORD *)(p_NV + 88 * v2);
  *a2 = v10[1746];
  long long v11 = v10[1747];
  long long v12 = v10[1748];
  long long v13 = v10[1749];
  *(_OWORD *)((char *)a2 + 60) = *(_OWORD *)((char *)v10 + 27996);
  a2[2] = v12;
  a2[3] = v13;
  a2[1] = v11;
  return 1;
}

uint64_t Core_Load_GPS_Alm(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x1F) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 56 * v2;
  uint64_t v6 = (void *)(v5 + 192);
  uint64_t v7 = v5 + 200;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 48);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 56 * v2;
  long long v11 = *(_OWORD *)(v10 + 200);
  long long v12 = *(_OWORD *)(v10 + 216);
  *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)(v10 + 228);
  *a2 = v11;
  a2[1] = v12;
  return 1;
}

uint64_t Core_Load_QZSS_Alm(int a1, _OWORD *a2)
{
  if ((a1 + 63) > 9u) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t v4 = p_NV + 56 * (a1 - 193);
  uint64_t v5 = (void *)(v4 + 6104);
  uint64_t v6 = v4 + 6112;
  __int16 v7 = -9871;
  do
  {
    int v8 = *(unsigned __int8 *)(v6 + v2) ^ HIBYTE(v7);
    __int16 v7 = -12691 * (v7 + (*(unsigned __int8 *)(v6 + v2) ^ HIBYTE(v7))) + 22719;
    v3 += v8;
    ++v2;
  }
  while (v2 != 48);
  if (*v5 != v3) {
    return 0;
  }
  int v9 = (_OWORD *)(p_NV + 56 * (a1 - 193));
  long long v10 = v9[382];
  long long v11 = v9[383];
  *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)v9 + 6140);
  *a2 = v10;
  a2[1] = v11;
  return 1;
}

uint64_t Core_Load_GLON_Alm(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x17) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 48 * v2;
  uint64_t v6 = (void *)(v5 + 29240);
  uint64_t v7 = v5 + 29248;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 40);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 48 * v2;
  long long v11 = *(_OWORD *)(v10 + 29248);
  long long v12 = *(_OWORD *)(v10 + 29264);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v10 + 29280);
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  return 1;
}

uint64_t Core_Load_GAL_Alm(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x23) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 48 * v2;
  uint64_t v6 = (void *)(v5 + 8016);
  uint64_t v7 = v5 + 8024;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 40);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 48 * v2;
  long long v11 = *(_OWORD *)(v10 + 8024);
  long long v12 = *(_OWORD *)(v10 + 8040);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v10 + 8056);
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  return 1;
}

uint64_t Core_Load_BDS_Alm(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x3E) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 56 * v2;
  uint64_t v6 = (void *)(v5 + 13360);
  uint64_t v7 = v5 + 13368;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 48);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 56 * v2 + 13360;
  long long v11 = *(_OWORD *)(v10 + 8);
  long long v12 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)(v10 + 36);
  *a2 = v11;
  a2[1] = v12;
  return 1;
}

uint64_t Core_Load_NVIC_Alm(int a1, uint64_t a2)
{
  uint64_t v2 = (a1 - 1);
  if (v2 > 0xD) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + (v2 << 6);
  uint64_t v6 = (void *)(v5 + 27032);
  uint64_t v7 = v5 + 27040;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 56);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + (v2 << 6);
  long long v11 = *(_OWORD *)(v10 + 27040);
  long long v12 = *(_OWORD *)(v10 + 27056);
  long long v13 = *(_OWORD *)(v10 + 27072);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(v10 + 27088);
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)a2 = v11;
  return 1;
}

uint64_t Core_Load_Clk_Drift(int *a1, double *a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t v4 = p_NV;
  uint64_t v5 = p_NV + 48;
  __int16 v6 = -9871;
  do
  {
    int v7 = *(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6);
    __int16 v6 = -12691 * (v6 + (*(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6))) + 22719;
    v3 += v7;
    ++v2;
  }
  while (v2 != 16);
  if (*(void *)(p_NV + 40) != v3) {
    return 0;
  }
  int v8 = *(_DWORD *)(p_NV + 48);
  *a1 = v8;
  if (v8)
  {
    if ((v8 - 619315200) > 0x49D3FFFF) {
      return 0;
    }
  }
  *a2 = *(double *)(v4 + 56);
  return 1;
}

uint64_t Core_Load_Clk_L5L1(int *a1, double *a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t v4 = p_NV;
  uint64_t v5 = p_NV + 72;
  __int16 v6 = -9871;
  do
  {
    int v7 = *(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6);
    __int16 v6 = -12691 * (v6 + (*(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6))) + 22719;
    v3 += v7;
    ++v2;
  }
  while (v2 != 16);
  if (*(void *)(p_NV + 64) == v3
    && ((int v8 = *(_DWORD *)(p_NV + 72), (*a1 = v8) == 0) || (v8 - 619315200) <= 0x49D3FFFF))
  {
    uint64_t v10 = *(void *)(v4 + 80);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    *a1 = 0;
    uint64_t v10 = 0;
  }
  *(void *)a2 = v10;
  return v9;
}

uint64_t Core_Load_ApxTime(uint64_t a1, _WORD *a2, void *a3, _DWORD *a4)
{
  uint64_t v7 = 0;
  int v8 = 0;
  _OWORD v21[3] = *MEMORY[0x263EF8340];
  double v20 = 0.0;
  uint64_t v9 = p_NV;
  uint64_t v10 = p_NV + 16;
  __int16 v11 = -9871;
  do
  {
    int v12 = *(unsigned __int8 *)(v10 + v7) ^ HIBYTE(v11);
    __int16 v11 = -12691 * (v11 + (*(unsigned __int8 *)(v10 + v7) ^ HIBYTE(v11))) + 22719;
    v8 += v12;
    ++v7;
  }
  while (v7 != 24);
  if (*(void *)(p_NV + 8) != v8)
  {
    API_Get_UTC_Cor(1, &v20);
    *(void *)(v9 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v9 + 24) = 0;
    *(_WORD *)(v9 + 28) = 0;
    double v13 = -0.5;
    if (v20 > 0.0) {
      double v13 = 0.5;
    }
    double v14 = v20 + v13;
    if (v20 + v13 <= 2147483650.0)
    {
      if (v14 >= -2147483650.0) {
        int v15 = (int)v14;
      }
      else {
        LOWORD(v15) = 0;
      }
    }
    else
    {
      LOWORD(v15) = -1;
    }
    *(_WORD *)(v9 + 30) = v15;
    *(void *)(v9 + 16) = *(void *)"";
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  EvLog("GN_GPS_Read_UTC:  Failed");
  API_Get_UTC_Cor(1, &v20);
  *(void *)(v9 + 8) = 0xFFFFFFFFLL;
  *(_DWORD *)(v9 + 24) = 0;
  *(_WORD *)(v9 + 28) = 0;
  *(void *)(v9 + 16) = *(void *)"";
  double v16 = -0.5;
  if (v20 > 0.0) {
    double v16 = 0.5;
  }
  double v17 = v20 + v16;
  if (v20 + v16 <= 2147483650.0)
  {
    if (v17 >= -2147483650.0) {
      int v18 = (int)v17;
    }
    else {
      LOWORD(v18) = 0;
    }
  }
  else
  {
    LOWORD(v18) = -1;
  }
  *(_WORD *)(v9 + 30) = v18;
  memset(v21, 0, 24);
  Debug_Log_ApxTime((unsigned __int16 *)v21);
  return 0;
}

uint64_t Core_Save_Clk_Drift(int a1, int a2, double a3)
{
  uint64_t v3 = p_NV;
  if (a1 && (!a2 || (a2 - 619315200) <= 0x49D3FFFF))
  {
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    *(_DWORD *)(p_NV + 48) = a2;
    uint64_t v7 = v3 + 48;
    *(double *)(v3 + 56) = a3;
    __int16 v8 = -9871;
    do
    {
      int v9 = *(unsigned __int8 *)(v7 + v5) ^ HIBYTE(v8);
      __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v5) ^ HIBYTE(v8))) + 22719;
      uint64_t v6 = (v6 + v9);
      ++v5;
    }
    while (v5 != 16);
    *(void *)(v3 + 40) = v6;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(p_NV + 40) = 0xFFFFFFFFLL;
    *(void *)(v3 + 56) = 0;
    *(_DWORD *)(v3 + 48) = 0;
  }
  return result;
}

uint64_t Core_Save_Clk_L5L1(int a1, int a2, double a3)
{
  uint64_t v3 = p_NV;
  if (a1 && (!a2 || (a2 - 619315200) <= 0x49D3FFFF))
  {
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    *(_DWORD *)(p_NV + 72) = a2;
    uint64_t v7 = v3 + 72;
    *(double *)(v3 + 80) = a3;
    __int16 v8 = -9871;
    do
    {
      int v9 = *(unsigned __int8 *)(v7 + v5) ^ HIBYTE(v8);
      __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v5) ^ HIBYTE(v8))) + 22719;
      uint64_t v6 = (v6 + v9);
      ++v5;
    }
    while (v5 != 16);
    *(void *)(v3 + 64) = v6;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(p_NV + 64) = 0xFFFFFFFFLL;
    *(void *)(v3 + 80) = 0;
    *(_DWORD *)(v3 + 72) = 0;
  }
  return result;
}

uint64_t Core_Save_ApxTime(unsigned int a1, int a2, __int16 a3, int a4, double a5)
{
  v41[1] = *(double *)MEMORY[0x263EF8340];
  v41[0] = 0.0;
  uint64_t v5 = p_NV;
  if (a2) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != 1)
  {
    uint64_t v19 = 0xFFFFFFFFLL;
LABEL_39:
    *(void *)(v5 + 8) = v19;
    return v6;
  }
  API_Get_UTC_Cor(1, v41);
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = v5 + 16;
  __int16 v14 = -9871;
  do
  {
    int v15 = *(unsigned __int8 *)(v13 + v11) ^ HIBYTE(v14);
    __int16 v14 = -12691 * (v14 + (*(unsigned __int8 *)(v13 + v11) ^ HIBYTE(v14))) + 22719;
    v12 += v15;
    ++v11;
  }
  while (v11 != 24);
  if (*(void *)(v5 + 8) != v12)
  {
    *(void *)(v5 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v5 + 24) = 0;
    *(_WORD *)(v5 + 28) = 0;
    double v16 = -0.5;
    if (v41[0] > 0.0) {
      double v16 = 0.5;
    }
    double v17 = v41[0] + v16;
    if (v41[0] + v16 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0) {
        int v18 = (int)v17;
      }
      else {
        LOWORD(v18) = 0;
      }
    }
    else
    {
      LOWORD(v18) = -1;
    }
    *(_WORD *)(v5 + 30) = v18;
    *(void *)(v5 + 16) = *(void *)"";
  }
  if (a4)
  {
    int v20 = *(_DWORD *)(v5 + 20);
    if (v20) {
      *(_DWORD *)(v5 + 16) += (a4 - v20) / 50000;
    }
  }
  unsigned int v21 = TOW_stat_ms[a2];
  if (v21 <= *(_DWORD *)(v5 + 16))
  {
    GPS_To_UTC_Time(&v34, &v35, &v36, &v37, &v38, &v39, v40, a3, a5, v41[0]);
    uint64_t v22 = 0;
    LODWORD(v19) = 0;
    double v23 = -0.5;
    if (a5 * 1000.0 <= 0.0) {
      double v24 = -0.5;
    }
    else {
      double v24 = 0.5;
    }
    double v25 = a5 * 1000.0 + v24;
    if (v25 >= -2147483650.0) {
      int v26 = (int)v25;
    }
    else {
      int v26 = 0x80000000;
    }
    if (v25 > 2147483650.0) {
      int v26 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v5 + 24) = v26;
    *(_WORD *)(v5 + 28) = a3;
    if (v41[0] > 0.0) {
      double v23 = 0.5;
    }
    double v27 = v41[0] + v23;
    *(_DWORD *)(v5 + 16) = v21;
    uint64_t v28 = v5 + 16;
    int v29 = (int)v27;
    if (v27 < -2147483650.0) {
      LOWORD(v29) = 0;
    }
    if (v27 <= 2147483650.0) {
      __int16 v30 = v29;
    }
    else {
      __int16 v30 = -1;
    }
    *(_WORD *)(v5 + 30) = v30;
    *(_DWORD *)(v5 + 20) = a4;
    __int16 v31 = -9871;
    do
    {
      int v32 = *(unsigned __int8 *)(v28 + v22) ^ HIBYTE(v31);
      __int16 v31 = -12691 * (v31 + (*(unsigned __int8 *)(v28 + v22) ^ HIBYTE(v31))) + 22719;
      uint64_t v19 = (v19 + v32);
      ++v22;
    }
    while (v22 != 24);
    goto LABEL_39;
  }
  return 0;
}

BOOL Core_Save_GPS_Eph(int a1, char a2, long long *a3)
{
  uint64_t v3 = (a1 - 1);
  if (v3 <= 0x1F)
  {
    uint64_t v4 = p_NV + (v3 << 7);
    uint64_t v5 = (void *)(v4 + 1984);
    if (a2)
    {
      *uint64_t v5 = 0xFFFFFFFFLL;
      *(_OWORD *)(v4 + 1992) = 0u;
      *(_OWORD *)(v4 + 2008) = 0u;
      *(_OWORD *)(v4 + 2024) = 0u;
      *(_OWORD *)(v4 + 2040) = 0u;
      *(_OWORD *)(v4 + 2056) = 0u;
      *(_OWORD *)(v4 + 2072) = 0u;
      *(_OWORD *)(v4 + 2088) = 0u;
      *(_DWORD *)(v4 + 2103) = 0;
    }
    else
    {
      uint64_t v6 = 0;
      LODWORD(v7) = 0;
      long long v8 = a3[4];
      long long v9 = a3[5];
      long long v10 = a3[6];
      *(_DWORD *)(v4 + 2104) = *((_DWORD *)a3 + 28);
      long long v11 = *a3;
      long long v12 = a3[1];
      long long v13 = a3[2];
      *(_OWORD *)(v4 + 2040) = a3[3];
      *(_OWORD *)(v4 + 2024) = v13;
      *(_OWORD *)(v4 + 2008) = v12;
      *(_OWORD *)(v4 + 1992) = v11;
      *(_OWORD *)(v4 + 2088) = v10;
      *(_OWORD *)(v4 + 2072) = v9;
      *(_OWORD *)(v4 + 2056) = v8;
      uint64_t v14 = v4 + 1992;
      __int16 v15 = -9871;
      do
      {
        int v16 = *(unsigned __int8 *)(v14 + v6) ^ HIBYTE(v15);
        __int16 v15 = -12691 * (v15 + (*(unsigned __int8 *)(v14 + v6) ^ HIBYTE(v15))) + 22719;
        uint64_t v7 = (v7 + v16);
        ++v6;
      }
      while (v6 != 120);
      *uint64_t v5 = v7;
    }
  }
  return v3 < 0x20;
}

BOOL Core_Save_QZSS_Eph(int a1, char a2, long long *a3)
{
  unsigned int v3 = (a1 + 63);
  if (v3 <= 9)
  {
    unint64_t v4 = p_NV + ((unint64_t)(a1 - 193) << 7);
    uint64_t v5 = (void *)(v4 + 6664);
    if (a2)
    {
      *uint64_t v5 = 0xFFFFFFFFLL;
      *(_DWORD *)(v4 + 6783) = 0;
      *(_OWORD *)(v4 + 6672) = 0u;
      *(_OWORD *)(v4 + 6688) = 0u;
      *(_OWORD *)(v4 + 6704) = 0u;
      *(_OWORD *)(v4 + 6720) = 0u;
      *(_OWORD *)(v4 + 6736) = 0u;
      *(_OWORD *)(v4 + 6752) = 0u;
      *(_OWORD *)(v4 + 6768) = 0u;
    }
    else
    {
      uint64_t v6 = 0;
      LODWORD(v7) = 0;
      long long v8 = *a3;
      long long v9 = a3[1];
      long long v10 = a3[2];
      *(_OWORD *)(v4 + 6720) = a3[3];
      *(_OWORD *)(v4 + 6704) = v10;
      *(_OWORD *)(v4 + 6688) = v9;
      *(_OWORD *)(v4 + 6672) = v8;
      long long v11 = a3[4];
      long long v12 = a3[5];
      long long v13 = a3[6];
      *(_DWORD *)(v4 + 6784) = *((_DWORD *)a3 + 28);
      *(_OWORD *)(v4 + 6768) = v13;
      *(_OWORD *)(v4 + 6752) = v12;
      *(_OWORD *)(v4 + 6736) = v11;
      unint64_t v14 = v4 + 6672;
      __int16 v15 = -9871;
      do
      {
        int v16 = *(unsigned __int8 *)(v14 + v6) ^ HIBYTE(v15);
        __int16 v15 = -12691 * (v15 + (*(unsigned __int8 *)(v14 + v6) ^ HIBYTE(v15))) + 22719;
        uint64_t v7 = (v7 + v16);
        ++v6;
      }
      while (v6 != 120);
      *uint64_t v5 = v7;
    }
  }
  return v3 < 0xA;
}

BOOL Core_Save_GAL_Eph(int a1, char a2, long long *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0x23)
  {
    uint64_t v4 = p_NV;
    uint64_t v5 = (void *)(p_NV + 96 * v3 + 9744);
    if (a2)
    {
      *uint64_t v5 = 0xFFFFFFFFLL;
      uint64_t v6 = v4 + 96 * v3;
      *(void *)(v6 + 9832) = 0;
      *(_OWORD *)(v6 + 9752) = 0u;
      *(_OWORD *)(v6 + 9768) = 0u;
      *(_OWORD *)(v6 + 9784) = 0u;
      *(_OWORD *)(v6 + 9800) = 0u;
      *(_OWORD *)(v6 + 9816) = 0u;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      uint64_t v9 = p_NV + 96 * v3;
      long long v10 = a3[2];
      long long v11 = a3[3];
      long long v12 = a3[4];
      *(void *)(v9 + 9832) = *((void *)a3 + 10);
      long long v13 = *a3;
      *(_OWORD *)(v9 + 9768) = a3[1];
      *(_OWORD *)(v9 + 9752) = v13;
      *(_OWORD *)(v9 + 9816) = v12;
      *(_OWORD *)(v9 + 9800) = v11;
      *(_OWORD *)(v9 + 9784) = v10;
      uint64_t v14 = v9 + 9752;
      __int16 v15 = -9871;
      do
      {
        int v16 = *(unsigned __int8 *)(v14 + v7) ^ HIBYTE(v15);
        __int16 v15 = -12691 * (v15 + (*(unsigned __int8 *)(v14 + v7) ^ HIBYTE(v15))) + 22719;
        uint64_t v8 = (v8 + v16);
        ++v7;
      }
      while (v7 != 88);
      *uint64_t v5 = v8;
    }
  }
  return v3 < 0x24;
}

BOOL Core_Save_BDS_Eph(int a1, char a2, long long *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0x3E)
  {
    uint64_t v4 = p_NV;
    uint64_t v5 = (void *)(p_NV + 160 * v3 + 16888);
    if (a2)
    {
      *uint64_t v5 = 0xFFFFFFFFLL;
      uint64_t v6 = v4 + 160 * v3;
      *(_DWORD *)(v6 + 17040) = 0;
      *(_OWORD *)(v6 + 16896) = 0u;
      *(_OWORD *)(v6 + 16912) = 0u;
      *(_OWORD *)(v6 + 16928) = 0u;
      *(_OWORD *)(v6 + 16944) = 0u;
      *(_OWORD *)(v6 + 16960) = 0u;
      *(_OWORD *)(v6 + 16976) = 0u;
      *(_OWORD *)(v6 + 16992) = 0u;
      *(_OWORD *)(v6 + 17008) = 0u;
      *(_OWORD *)(v6 + 17024) = 0u;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      long long v9 = *a3;
      uint64_t v10 = p_NV + 160 * v3;
      *(_OWORD *)(v10 + 16912) = a3[1];
      *(_OWORD *)(v10 + 16896) = v9;
      long long v11 = a3[2];
      long long v12 = a3[3];
      long long v13 = a3[4];
      *(_OWORD *)(v10 + 16976) = a3[5];
      *(_OWORD *)(v10 + 16960) = v13;
      *(_OWORD *)(v10 + 16944) = v12;
      *(_OWORD *)(v10 + 16928) = v11;
      long long v14 = a3[6];
      long long v15 = a3[7];
      long long v16 = a3[8];
      *(void *)(v10 + 17040) = *((void *)a3 + 18);
      *(_OWORD *)(v10 + 17024) = v16;
      *(_OWORD *)(v10 + 17008) = v15;
      *(_OWORD *)(v10 + 16992) = v14;
      uint64_t v17 = v10 + 16896;
      __int16 v18 = -9871;
      do
      {
        int v19 = *(unsigned __int8 *)(v17 + v7) ^ HIBYTE(v18);
        __int16 v18 = -12691 * (v18 + (*(unsigned __int8 *)(v17 + v7) ^ HIBYTE(v18))) + 22719;
        uint64_t v8 = (v8 + v19);
        ++v7;
      }
      while (v7 != 152);
      *uint64_t v5 = v8;
    }
  }
  return v3 < 0x3F;
}

BOOL Core_Save_NVIC_Eph(int a1, char a2, _OWORD *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0xD)
  {
    uint64_t v4 = p_NV;
    uint64_t v5 = (void *)(p_NV + 88 * v3 + 27928);
    if (a2)
    {
      *uint64_t v5 = 0xFFFFFFFFLL;
      uint64_t v6 = (_OWORD *)(v4 + 88 * v3);
      *(_OWORD *)((char *)v6 + 27996) = 0u;
      v6[1746] = 0u;
      v6[1747] = 0u;
      v6[1748] = 0u;
      v6[1749] = 0u;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      long long v9 = a3[1];
      long long v10 = a3[2];
      long long v11 = a3[3];
      long long v12 = (_OWORD *)(p_NV + 88 * v3);
      *(_OWORD *)((char *)v12 + 27996) = *(_OWORD *)((char *)a3 + 60);
      v12[1746] = *a3;
      v12[1749] = v11;
      v12[1748] = v10;
      v12[1747] = v9;
      long long v13 = v12 + 1746;
      __int16 v14 = -9871;
      do
      {
        int v15 = *((unsigned __int8 *)v13 + v7) ^ HIBYTE(v14);
        __int16 v14 = -12691 * (v14 + (*((unsigned __int8 *)v13 + v7) ^ HIBYTE(v14))) + 22719;
        uint64_t v8 = (v8 + v15);
        ++v7;
      }
      while (v7 != 80);
      *uint64_t v5 = v8;
    }
  }
  return v3 < 0xE;
}

BOOL Core_Save_GLON_Eph(int a1, char a2, long long *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0x17)
  {
    uint64_t v4 = p_NV;
    uint64_t v5 = (void *)(p_NV + 72 * v3 + 30392);
    if (a2)
    {
      *uint64_t v5 = 0xFFFFFFFFLL;
      uint64_t v6 = (_OWORD *)(v4 + 72 * v3);
      *(_OWORD *)((char *)v6 + 30446) = 0u;
      v6[1900] = 0u;
      v6[1901] = 0u;
      v6[1902] = 0u;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      long long v9 = *a3;
      long long v10 = a3[1];
      long long v11 = a3[2];
      long long v12 = (_OWORD *)(p_NV + 72 * v3);
      v12[1903] = a3[3];
      v12[1902] = v11;
      v12[1901] = v10;
      v12[1900] = v9;
      long long v13 = v12 + 1900;
      __int16 v14 = -9871;
      do
      {
        int v15 = *((unsigned __int8 *)v13 + v7) ^ HIBYTE(v14);
        __int16 v14 = -12691 * (v14 + (*((unsigned __int8 *)v13 + v7) ^ HIBYTE(v14))) + 22719;
        uint64_t v8 = (v8 + v15);
        ++v7;
      }
      while (v7 != 64);
      *uint64_t v5 = v8;
    }
  }
  return v3 < 0x18;
}

BOOL Core_Save_GPS_Alm(int a1, char a2, long long *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0x1F)
  {
    uint64_t v4 = p_NV;
    uint64_t v5 = (void *)(p_NV + 56 * v3 + 192);
    if (a2)
    {
      *uint64_t v5 = 0xFFFFFFFFLL;
      uint64_t v6 = v4 + 56 * v3;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 228) = 0u;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      long long v9 = *a3;
      long long v10 = a3[1];
      uint64_t v11 = p_NV + 56 * v3;
      *(_OWORD *)(v11 + 228) = *(long long *)((char *)a3 + 28);
      *(_OWORD *)(v11 + 216) = v10;
      *(_OWORD *)(v11 + 200) = v9;
      uint64_t v12 = v11 + 200;
      __int16 v13 = -9871;
      do
      {
        int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
        __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
        uint64_t v8 = (v8 + v14);
        ++v7;
      }
      while (v7 != 48);
      *uint64_t v5 = v8;
    }
  }
  return v3 < 0x20;
}

BOOL Core_Save_QZSS_Alm(int a1, char a2, long long *a3)
{
  unsigned int v3 = (a1 + 63);
  if (v3 <= 9)
  {
    uint64_t v4 = p_NV;
    unsigned int v5 = a1 - 193;
    uint64_t v6 = (void *)(p_NV + 56 * (a1 - 193) + 6104);
    if (a2)
    {
      void *v6 = 0xFFFFFFFFLL;
      uint64_t v7 = (_OWORD *)(v4 + 56 * v5);
      *(_OWORD *)((char *)v7 + 6140) = 0u;
      v7[382] = 0u;
      v7[383] = 0u;
    }
    else
    {
      uint64_t v8 = 0;
      LODWORD(v9) = 0;
      long long v10 = *a3;
      long long v11 = a3[1];
      uint64_t v12 = (_OWORD *)(p_NV + 56 * v5);
      *(_OWORD *)((char *)v12 + 6140) = *(long long *)((char *)a3 + 28);
      v12[383] = v11;
      v12[382] = v10;
      __int16 v13 = v12 + 382;
      __int16 v14 = -9871;
      do
      {
        int v15 = *((unsigned __int8 *)v13 + v8) ^ HIBYTE(v14);
        __int16 v14 = -12691 * (v14 + (*((unsigned __int8 *)v13 + v8) ^ HIBYTE(v14))) + 22719;
        uint64_t v9 = (v9 + v15);
        ++v8;
      }
      while (v8 != 48);
      void *v6 = v9;
    }
  }
  return v3 < 0xA;
}

BOOL Core_Save_GLON_Alm(int a1, char a2, long long *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0x17)
  {
    uint64_t v4 = p_NV;
    unsigned int v5 = (void *)(p_NV + 48 * v3 + 29240);
    if (a2)
    {
      *unsigned int v5 = 0xFFFFFFFFLL;
      uint64_t v6 = v4 + 48 * v3;
      *(_DWORD *)(v6 + 29280) = 0;
      *(_OWORD *)(v6 + 29248) = 0u;
      *(_OWORD *)(v6 + 29264) = 0u;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      long long v9 = *a3;
      long long v10 = a3[1];
      uint64_t v11 = p_NV + 48 * v3;
      *(_DWORD *)(v11 + 29280) = *((_DWORD *)a3 + 8);
      *(_OWORD *)(v11 + 29264) = v10;
      *(_OWORD *)(v11 + 29248) = v9;
      uint64_t v12 = v11 + 29248;
      __int16 v13 = -9871;
      do
      {
        int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
        __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
        uint64_t v8 = (v8 + v14);
        ++v7;
      }
      while (v7 != 40);
      *unsigned int v5 = v8;
    }
  }
  return v3 < 0x18;
}

BOOL Core_Save_GAL_Alm(int a1, char a2, long long *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0x23)
  {
    uint64_t v4 = p_NV;
    unsigned int v5 = (void *)(p_NV + 48 * v3 + 8016);
    if (a2)
    {
      *unsigned int v5 = 0xFFFFFFFFLL;
      uint64_t v6 = v4 + 48 * v3 + 8016;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_DWORD *)(v6 + 39) = 0;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      uint64_t v9 = p_NV + 48 * v3;
      long long v10 = *a3;
      long long v11 = a3[1];
      *(_DWORD *)(v9 + 8056) = *((_DWORD *)a3 + 8);
      *(_OWORD *)(v9 + 8040) = v11;
      *(_OWORD *)(v9 + 8024) = v10;
      uint64_t v12 = v9 + 8024;
      __int16 v13 = -9871;
      do
      {
        int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
        __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
        uint64_t v8 = (v8 + v14);
        ++v7;
      }
      while (v7 != 40);
      *unsigned int v5 = v8;
    }
  }
  return v3 < 0x24;
}

BOOL Core_Save_BDS_Alm(int a1, char a2, long long *a3)
{
  unsigned int v3 = a1 - 1;
  if ((a1 - 1) <= 0x3E)
  {
    uint64_t v4 = p_NV;
    unsigned int v5 = (void *)(p_NV + 56 * v3 + 13360);
    if (a2)
    {
      *unsigned int v5 = 0xFFFFFFFFLL;
      uint64_t v6 = v4 + 56 * v3 + 13360;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 35) = 0u;
    }
    else
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      uint64_t v9 = p_NV + 56 * v3;
      long long v10 = *a3;
      long long v11 = a3[1];
      *(_OWORD *)(v9 + 13396) = *(long long *)((char *)a3 + 28);
      *(_OWORD *)(v9 + 13384) = v11;
      *(_OWORD *)(v9 + 13368) = v10;
      uint64_t v12 = v9 + 13368;
      __int16 v13 = -9871;
      do
      {
        int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
        __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
        uint64_t v8 = (v8 + v14);
        ++v7;
      }
      while (v7 != 48);
      *unsigned int v5 = v8;
    }
  }
  return v3 < 0x3F;
}

BOOL Core_Save_NVIC_Alm(int a1, char a2, long long *a3)
{
  uint64_t v3 = (a1 - 1);
  if (v3 <= 0xD)
  {
    uint64_t v4 = p_NV + (v3 << 6);
    unsigned int v5 = (void *)(v4 + 27032);
    if (a2)
    {
      *unsigned int v5 = 0xFFFFFFFFLL;
      *(unsigned char *)(v4 + 27088) = 0;
      *(_OWORD *)(v4 + 27040) = 0u;
      *(_OWORD *)(v4 + 27056) = 0u;
      *(_OWORD *)(v4 + 27072) = 0u;
    }
    else
    {
      uint64_t v6 = 0;
      LODWORD(v7) = 0;
      long long v8 = *a3;
      long long v9 = a3[1];
      long long v10 = a3[2];
      *(_DWORD *)(v4 + 27088) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(v4 + 27072) = v10;
      *(_OWORD *)(v4 + 27056) = v9;
      *(_OWORD *)(v4 + 27040) = v8;
      uint64_t v11 = v4 + 27040;
      __int16 v12 = -9871;
      do
      {
        int v13 = *(unsigned __int8 *)(v11 + v6) ^ HIBYTE(v12);
        __int16 v12 = -12691 * (v12 + (*(unsigned __int8 *)(v11 + v6) ^ HIBYTE(v12))) + 22719;
        uint64_t v7 = (v7 + v13);
        ++v6;
      }
      while (v6 != 56);
      *unsigned int v5 = v7;
    }
  }
  return v3 < 0xE;
}

BOOL Core_Load_SBAS_Apx(int a1, int *a2, int *a3)
{
  unint64_t v3 = 0;
  uint64_t v4 = p_NV + 32128;
  BOOL v5 = 1;
  while (1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    __int16 v8 = -9871;
    do
    {
      int v9 = *(unsigned __int8 *)(v4 + v6) ^ HIBYTE(v8);
      __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v4 + v6) ^ HIBYTE(v8))) + 22719;
      v7 += v9;
      ++v6;
    }
    while (v6 != 24);
    if (*(void *)(p_NV + 32 * v3 + 32120) == v7)
    {
      uint64_t v10 = p_NV + 32 * v3;
      if (*(_DWORD *)(v10 + 32132) == a1) {
        break;
      }
    }
    BOOL v5 = v3 < 0x11;
    v4 += 32;
    if (++v3 == 18) {
      return 0;
    }
  }
  *a2 = *(_DWORD *)(v10 + 32128);
  uint64_t v11 = *(void *)(v10 + 32136);
  a3[2] = *(_DWORD *)(v10 + 32144);
  *(void *)a3 = v11;
  return v5;
}

BOOL Core_Save_SBAS_Apx(int a1, char a2, int a3, int *a4)
{
  if ((a1 + 97) < 0xD9u)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = p_NV;
    if (a2)
    {
      unint64_t v6 = 0;
      uint64_t v7 = p_NV + 32128;
      BOOL v8 = 1;
      while (1)
      {
        uint64_t v9 = 0;
        int v10 = 0;
        uint64_t v11 = p_NV + 32 * v6 + 32120;
        __int16 v12 = -9871;
        do
        {
          int v13 = *(unsigned __int8 *)(v7 + v9) ^ HIBYTE(v12);
          __int16 v12 = -12691 * (v12 + (*(unsigned __int8 *)(v7 + v9) ^ HIBYTE(v12))) + 22719;
          v10 += v13;
          ++v9;
        }
        while (v9 != 24);
        if (*(void *)v11 == v10 && *(_DWORD *)(p_NV + 32 * v6 + 32132) == a1) {
          break;
        }
        BOOL v8 = v6 < 0x11;
        v7 += 32;
        if (++v6 == 18) {
          return 0;
        }
      }
      *(void *)(p_NV + 32 * v6 + 32128) = 0;
      *(void *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      *(void *)uint64_t v11 = 0xFFFFFFFFLL;
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = (unsigned __int8 *)(p_NV + 32128);
      BOOL v8 = 1;
      while (1)
      {
        uint64_t v18 = 0;
        int v19 = 0;
        int v20 = (void *)(p_NV + 32 * v16 + 32120);
        __int16 v21 = -9871;
        do
        {
          int v22 = v17[v18] ^ HIBYTE(v21);
          __int16 v21 = -12691 * (v21 + (v17[v18] ^ HIBYTE(v21))) + 22719;
          v19 += v22;
          ++v18;
        }
        while (v18 != 24);
        if (*v20 != v19)
        {
          EvLog_v("Core_Save_SBAS_Apx:  Saving SV %d  %d  idx %d");
          goto LABEL_22;
        }
        int v23 = *(_DWORD *)(p_NV + 32 * v16 + 32132);
        if (v23 == a1 || (v23 - 159) <= 0xFFFFFFD8) {
          break;
        }
        BOOL v8 = v16 < 0x11;
        v17 += 32;
        if (++v16 == 18) {
          return 0;
        }
      }
      EvLog_v("Core_Save_SBAS_Apx:  Replacing SV %d with %d  %d  idx %d");
LABEL_22:
      LODWORD(v25) = 0;
      unint64_t v26 = v5 + 32 * v16;
      *(_DWORD *)(v26 + 32128) = a3;
      *(_DWORD *)(v26 + 32132) = a1;
      uint64_t v27 = *(void *)a4;
      *(_DWORD *)(v26 + 32144) = a4[2];
      *(void *)(v26 + 32136) = v27;
      __int16 v28 = -9871;
      uint64_t v29 = 24;
      do
      {
        int v30 = *v17++;
        int v31 = v30 ^ HIBYTE(v28);
        __int16 v28 = -12691 * (v28 + (v30 ^ HIBYTE(v28))) + 22719;
        uint64_t v25 = (v25 + v31);
        --v29;
      }
      while (v29);
      *int v20 = v25;
    }
  }
  return v8;
}

uint64_t Core_Load_TTick_Cal(int a1, int a2, int a3, unsigned int *a4, unsigned __int8 *a5)
{
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = p_NV;
  uint64_t v8 = p_NV + 33192;
  *a4 = *(_DWORD *)(p_NV + 33200) - a3;
  *a5 = -1;
  uint64_t v9 = v7 + 33200;
  __int16 v10 = -9871;
  do
  {
    int v11 = *(unsigned __int8 *)(v9 + v5) ^ HIBYTE(v10);
    __int16 v10 = -12691 * (v10 + (*(unsigned __int8 *)(v9 + v5) ^ HIBYTE(v10))) + 22719;
    v6 += v11;
    ++v5;
  }
  while (v5 != 16);
  if (*(void *)v8 != v6) {
    return 0;
  }
  unsigned int v12 = *a4;
  if ((*a4 & 0x80000000) != 0) {
    unsigned int v12 = -v12;
  }
  if (v12 > 0x1388) {
    return 0;
  }
  uint64_t v13 = 0;
  int v14 = a1 - *(_DWORD *)(v8 + 12);
  if (v14 < 14400000)
  {
    int v15 = a2 - *(_DWORD *)(v8 + 16);
    if (v15 < 14400000)
    {
      unsigned int v16 = v14 - v15;
      if (v14 - v15 < 0) {
        unsigned int v16 = v15 - v14;
      }
      if (v16 <= 0x1388)
      {
        *a5 = ((unint64_t)(1172812403 * v14) >> 46) + (1172812403 * v14 < 0);
        return 1;
      }
      return 0;
    }
  }
  return v13;
}

uint64_t Core_Save_Inhib_EE(BOOL *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = p_NV;
  uint64_t v5 = (void *)(p_NV + 33216);
  int v6 = a1 + 165;
  uint64_t v7 = 1;
  do
  {
    if (a1[v2]) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    v3 |= v8;
    v7 *= 2;
    ++v2;
  }
  while (v2 != 32);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  *(void *)(p_NV + 33224) = v3;
  uint64_t v11 = 1;
  do
  {
    if (a1[v9 + 32]) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    v10 |= v12;
    v11 *= 2;
    ++v9;
  }
  while (v9 != 24);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v5[2] = v10;
  uint64_t v15 = 1;
  do
  {
    if (a1[v13 + 155]) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    v14 |= v16;
    v15 *= 2;
    ++v13;
  }
  while (v13 != 10);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v5[3] = v14;
  uint64_t v19 = 1;
  do
  {
    if (a1[v17 + 179]) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    v18 |= v20;
    v19 *= 2;
    ++v17;
  }
  while (v17 != 39);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  v5[4] = v18;
  uint64_t v23 = 1;
  do
  {
    if (a1[v21 + 92]) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    v22 |= v24;
    v23 *= 2;
    ++v21;
  }
  while (v21 != 63);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = a1 + 56;
  v5[5] = v22;
  uint64_t v28 = 1;
  do
  {
    if (v27[v25]) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    v26 |= v29;
    v28 *= 2;
    ++v25;
  }
  while (v25 != 36);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  v5[6] = v26;
  uint64_t v32 = 1;
  do
  {
    if (v6[v30]) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    v31 |= v33;
    v32 *= 2;
    ++v30;
  }
  while (v30 != 14);
  v5[7] = v31;
  v5[8] = a2;
  EvLog_v("Core_Save_Inhib_EE: Time %D  G %X R %X Q %X S %X B %X E %X N %X", a2, v3, v10, v14, v18, v22, v26, v31);
  uint64_t v34 = 0;
  LODWORD(v35) = 0;
  uint64_t v36 = v4 + 33224;
  __int16 v37 = -9871;
  do
  {
    int v38 = *(unsigned __int8 *)(v36 + v34) ^ HIBYTE(v37);
    __int16 v37 = -12691 * (v37 + (*(unsigned __int8 *)(v36 + v34) ^ HIBYTE(v37))) + 22719;
    uint64_t v35 = (v35 + v38);
    ++v34;
  }
  while (v34 != 64);
  *uint64_t v5 = v35;
  return 1;
}

BOOL Core_Load_Inhib_EE(BOOL *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  uint64_t v4 = (uint64_t *)(p_NV + 33216);
  uint64_t v5 = p_NV + 33224;
  __int16 v6 = -9871;
  do
  {
    int v7 = *(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6);
    __int16 v6 = -12691 * (v6 + (*(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6))) + 22719;
    uint64_t v3 = (v3 + v7);
    ++v2;
  }
  while (v2 != 64);
  uint64_t v8 = *v4;
  if (*v4 == v3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(p_NV + 33224);
    uint64_t v11 = 1;
    do
    {
      a1[v9] = (v11 & v10) != 0;
      v11 *= 2;
      ++v9;
    }
    while (v9 != 32);
    uint64_t v12 = 0;
    uint64_t v13 = v4[2];
    uint64_t v14 = 1;
    do
    {
      a1[v12 + 32] = (v14 & v13) != 0;
      v14 *= 2;
      ++v12;
    }
    while (v12 != 24);
    uint64_t v15 = 0;
    uint64_t v16 = v4[3];
    uint64_t v17 = 1;
    do
    {
      a1[v15 + 155] = (v17 & v16) != 0;
      v17 *= 2;
      ++v15;
    }
    while (v15 != 10);
    uint64_t v18 = 0;
    uint64_t v19 = v4[4];
    uint64_t v20 = 1;
    do
    {
      a1[v18 + 179] = (v20 & v19) != 0;
      v20 *= 2;
      ++v18;
    }
    while (v18 != 39);
    uint64_t v21 = 0;
    uint64_t v22 = v4[5];
    uint64_t v23 = 1;
    do
    {
      a1[v21 + 92] = (v23 & v22) != 0;
      v23 *= 2;
      ++v21;
    }
    while (v21 != 63);
    uint64_t v24 = 0;
    uint64_t v25 = v4[6];
    uint64_t v26 = 1;
    do
    {
      a1[v24 + 56] = (v26 & v25) != 0;
      v26 *= 2;
      ++v24;
    }
    while (v24 != 36);
    uint64_t v27 = 0;
    uint64_t v28 = v4[7];
    uint64_t v29 = 1;
    do
    {
      a1[v27 + 165] = (v29 & v28) != 0;
      v29 *= 2;
      ++v27;
    }
    while (v27 != 14);
    *a2 = v4[8];
    EvLog_v("Core_Load_Inhib_EE: Time %D  G %X R %X Q %X S %X B %X E %X N %X", v4[8], v4[1], v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
  }
  return v8 == v3;
}

uint64_t Core_Save_Not_Brd_SV(int a1, uint64_t a2)
{
  if (a1 == 1)
  {
    uint64_t v2 = (void *)(p_NV + 33352);
    uint64_t v3 = "L5";
  }
  else if (a1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = "--";
  }
  else
  {
    uint64_t v2 = (void *)(p_NV + 33288);
    uint64_t v3 = "L1";
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 1;
  do
  {
    if (*(unsigned char *)(a2 + v4)) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    v5 |= v7;
    v6 *= 2;
    ++v4;
  }
  while (v4 != 32);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v2[1] = v5;
  uint64_t v10 = 1;
  do
  {
    if (*(unsigned char *)(a2 + 32 + v8)) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    v9 |= v11;
    v10 *= 2;
    ++v8;
  }
  while (v8 != 24);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v2[2] = v9;
  uint64_t v14 = 1;
  do
  {
    if (*(unsigned char *)(a2 + 155 + v12)) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    v13 |= v15;
    v14 *= 2;
    ++v12;
  }
  while (v12 != 10);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v2[3] = v13;
  uint64_t v18 = 1;
  do
  {
    if (*(unsigned char *)(a2 + 179 + v16)) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    v17 |= v19;
    v18 *= 2;
    ++v16;
  }
  while (v16 != 39);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v2[4] = v17;
  uint64_t v22 = 1;
  do
  {
    if (*(unsigned char *)(a2 + 92 + v20)) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    v21 |= v23;
    v22 *= 2;
    ++v20;
  }
  while (v20 != 63);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  v2[5] = v21;
  uint64_t v26 = 1;
  do
  {
    if (*(unsigned char *)(a2 + 56 + v24)) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    v25 |= v27;
    v26 *= 2;
    ++v24;
  }
  while (v24 != 36);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  v2[6] = v25;
  uint64_t v30 = a2 + 165;
  uint64_t v31 = 1;
  do
  {
    if (*(unsigned char *)(v30 + v28)) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    v29 |= v32;
    v31 *= 2;
    ++v28;
  }
  while (v28 != 14);
  v2[7] = v29;
  EvLog_v("Core_Save_Not_Brd_SV:  %s  G %X R %X Q %X S %X B %X E %X N %X", v3, v5, v9, v13, v17, v21, v25, v29);
  LODWORD(v33) = 0;
  __int16 v34 = -9871;
  for (uint64_t i = 8; i != 64; ++i)
  {
    int v36 = *((unsigned __int8 *)v2 + i) ^ HIBYTE(v34);
    __int16 v34 = -12691 * (v34 + (*((unsigned __int8 *)v2 + i) ^ HIBYTE(v34))) + 22719;
    uint64_t v33 = (v33 + v36);
  }
  void *v2 = v33;
  return 1;
}

BOOL Core_Load_Not_Brd_SV(int a1, uint64_t a2)
{
  if (a1 == 1)
  {
    uint64_t v2 = (uint64_t *)(p_NV + 33352);
    uint64_t v3 = "L5";
  }
  else if (a1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = "--";
  }
  else
  {
    uint64_t v2 = (uint64_t *)(p_NV + 33288);
    uint64_t v3 = "L1";
  }
  LODWORD(v4) = 0;
  __int16 v5 = -9871;
  for (uint64_t i = 8; i != 64; ++i)
  {
    int v7 = *((unsigned __int8 *)v2 + i) ^ HIBYTE(v5);
    __int16 v5 = -12691 * (v5 + (*((unsigned __int8 *)v2 + i) ^ HIBYTE(v5))) + 22719;
    uint64_t v4 = (v4 + v7);
  }
  uint64_t v8 = *v2;
  if (*v2 == v4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v2[1];
    uint64_t v11 = 1;
    do
    {
      *(unsigned char *)(a2 + v9) = (v11 & v10) != 0;
      v11 *= 2;
      ++v9;
    }
    while (v9 != 32);
    uint64_t v12 = 0;
    uint64_t v13 = v2[2];
    uint64_t v14 = 1;
    do
    {
      *(unsigned char *)(a2 + 32 + v12) = (v14 & v13) != 0;
      v14 *= 2;
      ++v12;
    }
    while (v12 != 24);
    uint64_t v15 = 0;
    uint64_t v16 = v2[3];
    uint64_t v17 = 1;
    do
    {
      *(unsigned char *)(a2 + 155 + v15) = (v17 & v16) != 0;
      v17 *= 2;
      ++v15;
    }
    while (v15 != 10);
    uint64_t v18 = 0;
    uint64_t v19 = v2[4];
    uint64_t v20 = 1;
    do
    {
      *(unsigned char *)(a2 + 179 + v18) = (v20 & v19) != 0;
      v20 *= 2;
      ++v18;
    }
    while (v18 != 39);
    uint64_t v21 = 0;
    uint64_t v22 = v2[5];
    uint64_t v23 = 1;
    do
    {
      *(unsigned char *)(a2 + 92 + v21) = (v23 & v22) != 0;
      v23 *= 2;
      ++v21;
    }
    while (v21 != 63);
    uint64_t v24 = 0;
    uint64_t v25 = v2[6];
    uint64_t v26 = 1;
    do
    {
      *(unsigned char *)(a2 + 56 + v24) = (v26 & v25) != 0;
      v26 *= 2;
      ++v24;
    }
    while (v24 != 36);
    uint64_t v27 = 0;
    uint64_t v28 = v2[7];
    uint64_t v29 = 1;
    do
    {
      *(unsigned char *)(a2 + 165 + v27) = (v29 & v28) != 0;
      v29 *= 2;
      ++v27;
    }
    while (v27 != 14);
    EvLog_v("Core_Load_Not_Brd_SV:  %s  G %X R %X Q %X S %X B %X E %X N %X", v3, v10, v13, v16, v19, v22, v25, v28);
  }
  return v8 == v4;
}

uint64_t GN_GPS_Clear_NV_Data(unsigned __int8 *a1, char *a2)
{
  uint64_t result = 0;
  uint64_t v158 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = qword_26AA2DF00;
  uint64_t v7 = qword_26AA2DE58;
  uint64_t v8 = qword_26AA2DE38;
  uint64_t v9 = qword_26AA2DE40;
  uint64_t v10 = v157;
  p_src = &__src;
  uint64_t v155 = &v158;
  v153[1] = &__src;
  char __src = 10;
  char v11 = 42;
  memset(v157, 0, sizeof(v157));
  do
  {
    v153[0] = v10 + 1;
    *uint64_t v10 = v11;
    uint64_t v10 = (char *)v153[0];
    if (v153[0] >= (unint64_t)v155)
    {
      uint64_t v10 = p_src;
      v153[0] = p_src;
    }
    char v11 = asc_263D77993[++v5];
  }
  while (v5 != 8);
  v153[0] = v10 + 1;
  *uint64_t v10 = 10;
  if (v153[0] >= (unint64_t)v155) {
    v153[0] = p_src;
  }
  uint64_t v12 = mach_continuous_time();
  sprintf_10u(v153, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12));
  uint64_t v13 = (unsigned char *)v153[0]++;
  char v14 = 32;
  unsigned char *v13 = 32;
  if (v153[0] >= (unint64_t)v155) {
    uint64_t v15 = p_src;
  }
  else {
    uint64_t v15 = (char *)v153[0];
  }
  uint64_t v16 = 1u;
  do
  {
    v153[0] = v15 + 1;
    char *v15 = v14;
    uint64_t v15 = (char *)v153[0];
    if (v153[0] >= (unint64_t)v155)
    {
      uint64_t v15 = p_src;
      v153[0] = p_src;
    }
    char v14 = a0GnGpsClearNvD[v16++];
  }
  while (v16 != 31);
  if (!strcmp("VHOT", a2) || !strcmp("HOT", a2))
  {
    int v29 = 0;
    int v18 = 0;
    int v19 = 0;
    int v24 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
LABEL_38:
    int v22 = 0;
    int v21 = 0;
    int v20 = 0;
    int v30 = 1;
    goto LABEL_39;
  }
  if (!strcmp("HOST", a2))
  {
    int v18 = 0;
    int v19 = 0;
    int v24 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v29 = 1;
    goto LABEL_38;
  }
  if (!strcmp("WARM", a2))
  {
    int v29 = 0;
    int v18 = 0;
    int v19 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v24 = 1;
    goto LABEL_38;
  }
  if (!strcmp("COLD", a2))
  {
    int v22 = 0;
    int v25 = 0;
    int v18 = 0;
    int v29 = 0;
    int v30 = 0;
    *(_WORD *)(v6 + 6) = 0;
    int v20 = 1;
    int v21 = 1;
    int v26 = 1;
    int v24 = 1;
    int v19 = 1;
    goto LABEL_40;
  }
  if (!strcmp("FACT", a2))
  {
    int v29 = 0;
    int v30 = 0;
    int v20 = 1;
    int v21 = 1;
    int v22 = 1;
    int v26 = 1;
    int v25 = 1;
    int v24 = 1;
    int v19 = 1;
    int v18 = 1;
    goto LABEL_40;
  }
  uint64_t v17 = 0;
  int v18 = 0;
  int v19 = 0;
  int v20 = 0;
  int v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  int v25 = 0;
  int v26 = 0;
  int v27 = 0;
  while (2)
  {
    if (a2[v17])
    {
      uint64_t v28 = 1;
      switch(a2[v17])
      {
        case 'A':
          goto LABEL_35;
        case 'C':
          int v18 = 1;
          goto LABEL_34;
        case 'E':
          int v24 = 1;
          goto LABEL_34;
        case 'F':
          int v25 = 1;
          goto LABEL_34;
        case 'H':
          int v20 = 1;
          goto LABEL_34;
        case 'I':
        case 'K':
          int v22 = 1;
          goto LABEL_34;
        case 'P':
          int v27 = 1;
          goto LABEL_34;
        case 'T':
          int v26 = 1;
          goto LABEL_34;
        case 'U':
          int v21 = 1;
          goto LABEL_34;
        case 'V':
          int v19 = 1;
LABEL_34:
          uint64_t v28 = v23;
LABEL_35:
          ++v17;
          uint64_t v23 = v28;
          if (v17 == 16) {
            goto LABEL_143;
          }
          continue;
        default:
          char v121 = 70;
          uint64_t v122 = 1u;
          do
          {
            v153[0] = v15 + 1;
            char *v15 = v121;
            uint64_t v15 = (char *)v153[0];
            if (v153[0] >= (unint64_t)v155)
            {
              uint64_t v15 = p_src;
              v153[0] = p_src;
            }
            char v121 = aFailedInvalidI[v122++];
          }
          while (v122 != 27);
          char v123 = *a2;
          if (*a2)
          {
            unsigned int v124 = a2 + 1;
            do
            {
              v153[0] = v15 + 1;
              char *v15 = v123;
              uint64_t v15 = (char *)v153[0];
              if (v153[0] >= (unint64_t)v155)
              {
                uint64_t v15 = p_src;
                v153[0] = p_src;
              }
              int v125 = *v124++;
              char v123 = v125;
            }
            while (v125);
          }
          char v126 = 34;
          uint64_t v127 = 1u;
          do
          {
            v153[0] = v15 + 1;
            char *v15 = v126;
            uint64_t v15 = (char *)v153[0];
            if (v153[0] >= (unint64_t)v155)
            {
              uint64_t v15 = p_src;
              v153[0] = p_src;
            }
            char v126 = asc_263D779E4[v127++];
          }
          while (v127 != 4);
          uint64_t v128 = (void *)qword_26AA2DF28;
          int v129 = v15 - p_src;
          unint64_t v130 = *(void *)(qword_26AA2DF28 + 24);
          double v131 = *(void **)qword_26AA2DF28;
          uint64_t v132 = &__src;
          do
          {
            int v133 = v130 - v131;
            if (v129 >= v133) {
              int v134 = v133;
            }
            else {
              int v134 = v129;
            }
            memcpy(v131, v132, v134);
            double v131 = (void *)(*v128 + v134);
            *uint64_t v128 = v131;
            unint64_t v130 = v128[3];
            if ((unint64_t)v131 >= v130)
            {
              double v131 = (void *)v128[2];
              *uint64_t v128 = v131;
            }
            v132 += v134;
            BOOL v106 = __OFSUB__(v129, v134);
            v129 -= v134;
          }
          while (!((v129 < 0) ^ v106 | (v129 == 0)));
          uint64_t v135 = (void *)qword_26AA2DF20;
          int v136 = LODWORD(v153[0]) - p_src;
          unint64_t v137 = *(void *)(qword_26AA2DF20 + 24);
          uint64_t v138 = *(void **)qword_26AA2DF20;
          uint64_t v139 = &__src;
          do
          {
            int v140 = v137 - v138;
            if (v136 >= v140) {
              int v141 = v140;
            }
            else {
              int v141 = v136;
            }
            memcpy(v138, v139, v141);
            uint64_t v138 = (void *)(*v135 + v141);
            *uint64_t v135 = v138;
            unint64_t v137 = v135[3];
            if ((unint64_t)v138 >= v137)
            {
              uint64_t v138 = (void *)v135[2];
              *uint64_t v135 = v138;
            }
            v139 += v141;
            BOOL v106 = __OFSUB__(v136, v141);
            v136 -= v141;
          }
          while (!((v136 < 0) ^ v106 | (v136 == 0)));
          char v142 = (void *)qword_26AA2DF30;
          int v143 = LODWORD(v153[0]) - p_src;
          unint64_t v144 = *(void *)(qword_26AA2DF30 + 24);
          unsigned int v145 = *(void **)qword_26AA2DF30;
          unint64_t v146 = &__src;
          do
          {
            int v147 = v144 - v145;
            if (v143 >= v147) {
              int v148 = v147;
            }
            else {
              int v148 = v143;
            }
            memcpy(v145, v146, v148);
            unsigned int v145 = (void *)(*v142 + v148);
            *char v142 = v145;
            unint64_t v144 = v142[3];
            if ((unint64_t)v145 >= v144)
            {
              unsigned int v145 = (void *)v142[2];
              *char v142 = v145;
            }
            v146 += v148;
            BOOL v106 = __OFSUB__(v143, v148);
            v143 -= v148;
          }
          while (!((v143 < 0) ^ v106 | (v143 == 0)));
          GNSS_Event_Log_Ctl(qword_26AA2DF28);
          GNSS_Event_Log_Ctl(qword_26AA2DF20);
          GNSS_Event_Log_Ctl(qword_26AA2DF30);
          return 0;
      }
    }
    break;
  }
  LODWORD(v28) = v23;
LABEL_143:
  int v29 = 0;
  int v30 = 0;
  if (!v28) {
    goto LABEL_38;
  }
LABEL_39:
  if (!v27)
  {
    int v149 = 1;
    goto LABEL_42;
  }
LABEL_40:
  int v149 = 0;
  *(_WORD *)(v6 + 8) = 0;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(void *)(v7 + 824) = 0x4163125300000000;
  int64x2_t v31 = vdupq_n_s64(0x4163125300000000uLL);
  *(int64x2_t *)(v7 + 832) = v31;
  *(int64x2_t *)(v7 + 848) = v31;
  *(int64x2_t *)(v7 + 928) = v31;
  *(void *)(v7 + 944) = 0;
  g_GN_GNSS_Nav_Data = 0;
LABEL_42:
  int v32 = v25;
  if (v24)
  {
    uint64_t v33 = 0;
    uint64_t v34 = v9;
    do
    {
      uint64_t v35 = &a1[v33 + 1984];
      *(_OWORD *)(v35 + 108) = 0uLL;
      *((_OWORD *)v35 + 5) = 0uLL;
      *((_OWORD *)v35 + 6) = 0uLL;
      *((_OWORD *)v35 + 3) = 0uLL;
      *((_OWORD *)v35 + 4) = 0uLL;
      *((_OWORD *)v35 + 1) = 0uLL;
      *((_OWORD *)v35 + 2) = 0uLL;
      *(_OWORD *)uint64_t v35 = 0uLL;
      *(_DWORD *)(v34 + 231) = 0;
      *(_OWORD *)(v34 + 216) = 0uLL;
      *(_OWORD *)(v34 + 200) = 0uLL;
      *(_OWORD *)(v34 + 184) = 0uLL;
      *(_OWORD *)(v34 + 168) = 0uLL;
      *(_OWORD *)(v34 + 152) = 0uLL;
      *(_OWORD *)(v34 + 136) = 0uLL;
      *(_OWORD *)(v34 + 120) = 0uLL;
      uint64_t v36 = v34 + 3832;
      *(_OWORD *)(v34 + 3832) = 0uLL;
      *(_OWORD *)(v34 + 3848) = 0uLL;
      *(_OWORD *)(v34 + 3864) = 0uLL;
      *(_OWORD *)(v34 + 3880) = 0uLL;
      *(_OWORD *)(v34 + 3896) = 0uLL;
      *(_OWORD *)(v34 + 3912) = 0uLL;
      *(_OWORD *)(v34 + 3928) = 0uLL;
      v33 += 128;
      v34 += 116;
      *(_DWORD *)(v36 + 111) = 0;
    }
    while (v33 != 4096);
    uint64_t v37 = 0;
    *(_OWORD *)(v6 + 28) = 0u;
    *(_OWORD *)(v6 + 12) = 0u;
    uint64_t v38 = v9 + 9152;
    do
    {
      unsigned __int16 v39 = &a1[v37 + 6664];
      *(_OWORD *)(v39 + 108) = 0uLL;
      *((_OWORD *)v39 + 5) = 0uLL;
      *((_OWORD *)v39 + 6) = 0uLL;
      *((_OWORD *)v39 + 3) = 0uLL;
      *((_OWORD *)v39 + 4) = 0uLL;
      *((_OWORD *)v39 + 1) = 0uLL;
      *((_OWORD *)v39 + 2) = 0uLL;
      *(_OWORD *)unsigned __int16 v39 = 0uLL;
      *(_DWORD *)(v38 + 111) = 0;
      *(_OWORD *)(v38 + 80) = 0uLL;
      *(_OWORD *)(v38 + 96) = 0uLL;
      *(_OWORD *)(v38 + 48) = 0uLL;
      *(_OWORD *)(v38 + 64) = 0uLL;
      *(_OWORD *)(v38 + 16) = 0uLL;
      *(_OWORD *)(v38 + 32) = 0uLL;
      *(_OWORD *)uint64_t v38 = 0uLL;
      uint64_t v40 = v38 + 1160;
      *(_OWORD *)(v38 + 1160) = 0uLL;
      *(_OWORD *)(v38 + 1176) = 0uLL;
      *(_OWORD *)(v38 + 1192) = 0uLL;
      *(_OWORD *)(v38 + 1208) = 0uLL;
      *(_OWORD *)(v38 + 1224) = 0uLL;
      *(_OWORD *)(v38 + 1240) = 0uLL;
      *(_OWORD *)(v38 + 1256) = 0uLL;
      v37 += 128;
      v38 += 116;
      *(_DWORD *)(v40 + 111) = 0;
    }
    while (v37 != 1280);
    uint64_t v41 = 0;
    *(_WORD *)(v6 + 84) = 0;
    *(void *)(v6 + 76) = 0;
    uint64_t v42 = v9 + 13464;
    double v43 = (_OWORD *)(v9 + 11928);
    double v44 = a1 + 30392;
    do
    {
      *((void *)v44 + 8) = 0;
      *((_OWORD *)v44 + 2) = 0uLL;
      *((_OWORD *)v44 + 3) = 0uLL;
      *(_OWORD *)double v44 = 0uLL;
      *((_OWORD *)v44 + 1) = 0uLL;
      *(_OWORD *)((char *)v43 + 46) = 0uLL;
      v43[1] = 0uLL;
      v43[2] = 0uLL;
      *double v43 = 0uLL;
      v43 += 4;
      *(_DWORD *)(v9 + 17232 + v41) = 0;
      *(_DWORD *)(v42 + 111) = 0;
      *(_OWORD *)(v42 + 80) = 0uLL;
      *(_OWORD *)(v42 + 96) = 0uLL;
      *(_OWORD *)(v42 + 48) = 0uLL;
      *(_OWORD *)(v42 + 64) = 0uLL;
      v41 += 4;
      *(_OWORD *)(v42 + 16) = 0uLL;
      *(_OWORD *)(v42 + 32) = 0uLL;
      *(_OWORD *)uint64_t v42 = 0uLL;
      v42 += 116;
      v44 += 72;
    }
    while (v41 != 96);
    uint64_t v45 = 0;
    *(void *)(v6 + 96) = 0;
    *(void *)(v6 + 104) = 0;
    *(void *)(v6 + 112) = 0;
    uint64_t v46 = v9 + 17708;
    do
    {
      double v47 = &a1[v45 + 9744];
      *((_OWORD *)v47 + 4) = 0uLL;
      *((_OWORD *)v47 + 5) = 0uLL;
      *((_OWORD *)v47 + 2) = 0uLL;
      *((_OWORD *)v47 + 3) = 0uLL;
      *(_OWORD *)double v47 = 0uLL;
      *((_OWORD *)v47 + 1) = 0uLL;
      *(void *)(v46 + 80) = 0;
      *(_OWORD *)(v46 + 48) = 0uLL;
      *(_OWORD *)(v46 + 64) = 0uLL;
      *(_OWORD *)(v46 + 16) = 0uLL;
      *(_OWORD *)(v46 + 32) = 0uLL;
      *(_OWORD *)uint64_t v46 = 0uLL;
      *(_OWORD *)(v46 + 3168) = 0uLL;
      *(_OWORD *)(v46 + 3184) = 0uLL;
      *(_OWORD *)(v46 + 3200) = 0uLL;
      *(_OWORD *)(v46 + 3216) = 0uLL;
      v45 += 96;
      *(_OWORD *)(v46 + 3232) = 0uLL;
      *(void *)(v46 + 3248) = 0;
      v46 += 88;
    }
    while (v45 != 3456);
    *(_DWORD *)(v6 + 179) = 0;
    *(_OWORD *)(v6 + 163) = 0u;
    *(_OWORD *)(v6 + 147) = 0u;
    uint64_t v48 = v9 + 25512;
    uint64_t v49 = -10080;
    do
    {
      double v50 = &a1[v49 + 16888];
      *((_OWORD *)v50 + 639) = 0uLL;
      *((_OWORD *)v50 + 638) = 0uLL;
      *((_OWORD *)v50 + 637) = 0uLL;
      *((_OWORD *)v50 + 636) = 0uLL;
      *((_OWORD *)v50 + 635) = 0uLL;
      *((_OWORD *)v50 + 634) = 0uLL;
      *((_OWORD *)v50 + 633) = 0uLL;
      *((_OWORD *)v50 + 632) = 0uLL;
      *((_OWORD *)v50 + 631) = 0uLL;
      *((_OWORD *)v50 + 630) = 0uLL;
      *(_DWORD *)(v48 + 144) = 0;
      *(_OWORD *)(v48 + 112) = 0uLL;
      *(_OWORD *)(v48 + 128) = 0uLL;
      *(_OWORD *)(v48 + 80) = 0uLL;
      *(_OWORD *)(v48 + 96) = 0uLL;
      *(_OWORD *)(v48 + 48) = 0uLL;
      *(_OWORD *)(v48 + 64) = 0uLL;
      *(_OWORD *)(v48 + 16) = 0uLL;
      *(_OWORD *)(v48 + 32) = 0uLL;
      *(_OWORD *)uint64_t v48 = 0uLL;
      uint64_t v51 = v48 + 9576;
      *(_OWORD *)(v48 + 9576) = 0uLL;
      *(_OWORD *)(v48 + 9592) = 0uLL;
      *(_OWORD *)(v48 + 9608) = 0uLL;
      *(_OWORD *)(v48 + 9624) = 0uLL;
      *(_OWORD *)(v48 + 9640) = 0uLL;
      *(_OWORD *)(v48 + 9656) = 0uLL;
      *(_OWORD *)(v48 + 9672) = 0uLL;
      *(_OWORD *)(v48 + 9688) = 0uLL;
      *(_DWORD *)(v48 + 9720) = 0;
      v48 += 152;
      *(_OWORD *)(v51 + 128) = 0uLL;
      v49 += 160;
    }
    while (v49);
    uint64_t v52 = 0;
    *(_OWORD *)(v6 + 221) = 0u;
    *(_OWORD *)(v6 + 268) = 0u;
    *(_OWORD *)(v6 + 237) = 0u;
    *(_OWORD *)(v6 + 253) = 0u;
    double v53 = (_OWORD *)(v9 + 47696);
    do
    {
      double v54 = &a1[v52 + 27928];
      *((_DWORD *)v54 + 20) = 0;
      *((_OWORD *)v54 + 3) = 0uLL;
      *((_OWORD *)v54 + 4) = 0uLL;
      *((_OWORD *)v54 + 1) = 0uLL;
      *((_OWORD *)v54 + 2) = 0uLL;
      *(_OWORD *)double v54 = 0uLL;
      *(_OWORD *)((char *)v53 + 60) = 0uLL;
      v53[2] = 0uLL;
      v53[3] = 0uLL;
      _OWORD *v53 = 0uLL;
      v53[1] = 0uLL;
      uint64_t v55 = (char *)v53 + 1064;
      *(_OWORD *)((char *)v53 + 1064) = 0uLL;
      *(_OWORD *)((char *)v53 + 1080) = 0uLL;
      *(_OWORD *)((char *)v53 + 1096) = 0uLL;
      *(_OWORD *)((char *)v53 + 1112) = 0uLL;
      v52 += 88;
      double v53 = (_OWORD *)((char *)v53 + 76);
      *(_OWORD *)(v55 + 60) = 0uLL;
    }
    while (v52 != 1232);
    *(void *)(v6 + 354) = 0;
    *(void *)(v6 + 348) = 0;
    *(unsigned char *)(v6 + 145) = 0;
    *(_OWORD *)(v9 + 61718) = 0u;
    *(_OWORD *)(v9 + 61692) = 0u;
    *(_OWORD *)(v9 + 61708) = 0u;
    *(_OWORD *)(v9 + 61660) = 0u;
    *(_OWORD *)(v9 + 61676) = 0u;
    *(_OWORD *)(v9 + 61628) = 0u;
    *(_OWORD *)(v9 + 61644) = 0u;
    *(_OWORD *)(v9 + 61596) = 0u;
    *(_OWORD *)(v9 + 61612) = 0u;
    *(_OWORD *)(v9 + 61564) = 0u;
    *(_OWORD *)(v9 + 61580) = 0u;
    *(_OWORD *)(v9 + 61532) = 0u;
    *(_OWORD *)(v9 + 61548) = 0u;
    *(_OWORD *)(v9 + 61516) = 0u;
    *(_OWORD *)(v9 + 61952) = 0u;
    *(_OWORD *)(v9 + 61968) = 0u;
    *(_OWORD *)(v9 + 61984) = 0u;
    *(_OWORD *)(v9 + 62000) = 0u;
    *(_OWORD *)(v9 + 62016) = 0u;
    *(_OWORD *)(v9 + 62032) = 0u;
    *(_OWORD *)(v9 + 62048) = 0u;
    *(_OWORD *)(v9 + 62064) = 0u;
    *(_OWORD *)(v9 + 62080) = 0u;
    *(_OWORD *)(v9 + 62096) = 0u;
    *(_OWORD *)(v9 + 62112) = 0u;
    *(_OWORD *)(v9 + 62128) = 0u;
    *(_OWORD *)(v9 + 62144) = 0u;
    *(_OWORD *)(v9 + 62154) = 0u;
    *(_DWORD *)(v9 + 60204) = 0;
    *(_OWORD *)(v9 + 60172) = 0u;
    *(_OWORD *)(v9 + 60188) = 0u;
    *(_OWORD *)(v9 + 60140) = 0u;
    *(_OWORD *)(v9 + 60156) = 0u;
    *(_OWORD *)(v9 + 60108) = 0u;
    *(_OWORD *)(v9 + 60124) = 0u;
    *(_OWORD *)(v9 + 60076) = 0u;
    *(_OWORD *)(v9 + 60092) = 0u;
    *(_OWORD *)(v9 + 60044) = 0u;
    *(_OWORD *)(v9 + 60060) = 0u;
    *(_OWORD *)(v9 + 60012) = 0u;
    *(_OWORD *)(v9 + 60028) = 0u;
    *(_OWORD *)(v9 + 59980) = 0u;
    *(_OWORD *)(v9 + 59996) = 0u;
    *(_OWORD *)(v9 + 59948) = 0u;
    *(_OWORD *)(v9 + 59964) = 0u;
    *(_OWORD *)(v9 + 59916) = 0u;
    *(_OWORD *)(v9 + 59932) = 0u;
    *(_OWORD *)(v9 + 59884) = 0u;
    *(_OWORD *)(v9 + 59900) = 0u;
    *(_OWORD *)(v9 + 59852) = 0u;
    *(_OWORD *)(v9 + 59868) = 0u;
    *(_OWORD *)(v9 + 59820) = 0u;
    *(_OWORD *)(v9 + 59836) = 0u;
    *(_OWORD *)(v9 + 59788) = 0u;
    *(_OWORD *)(v9 + 59804) = 0u;
    *(_OWORD *)(v9 + 59772) = 0u;
  }
  if ((v30 & 1) == 0)
  {
    unsigned int v56 = (_OWORD *)(v9 + 7544);
    uint64_t v57 = 192;
    do
    {
      double v58 = &a1[v57];
      *((_DWORD *)v58 + 12) = 0;
      *((_OWORD *)v58 + 1) = 0uLL;
      *((_OWORD *)v58 + 2) = 0uLL;
      *(_OWORD *)double v58 = 0uLL;
      *(_OWORD *)((char *)v56 + 28) = 0uLL;
      v57 += 56;
      _OWORD *v56 = 0uLL;
      v56[1] = 0uLL;
      unsigned int v56 = (_OWORD *)((char *)v56 + 44);
    }
    while (v57 != 1984);
    uint64_t v59 = 0;
    *(_OWORD *)(v6 + 60) = 0u;
    *(_OWORD *)(v6 + 44) = 0u;
    double v60 = a1 + 6104;
    do
    {
      *((_DWORD *)v60 + 12) = 0;
      *((_OWORD *)v60 + 1) = 0uLL;
      *((_OWORD *)v60 + 2) = 0uLL;
      *(_OWORD *)double v60 = 0uLL;
      v60 += 56;
      BOOL v61 = (_OWORD *)(v9 + 11472 + v59);
      *(_OWORD *)((char *)v61 + 28) = 0uLL;
      v59 += 44;
      _OWORD *v61 = 0uLL;
      v61[1] = 0uLL;
    }
    while (v59 != 440);
    uint64_t v62 = 0;
    *(_WORD *)(v6 + 94) = 0;
    *(void *)(v6 + 86) = 0;
    int v63 = a1 + 29240;
    do
    {
      *(_OWORD *)(v63 + 28) = 0uLL;
      *(_OWORD *)int v63 = 0uLL;
      *((_OWORD *)v63 + 1) = 0uLL;
      v63 += 48;
      uint64_t v64 = v9 + 16248 + v62;
      *(_DWORD *)(v64 + 32) = 0;
      v62 += 36;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *(_OWORD *)(v64 + 16) = 0uLL;
    }
    while (v62 != 864);
    uint64_t v65 = 0;
    *(void *)(v6 + 120) = 0;
    *(void *)(v6 + 128) = 0;
    *(void *)(v6 + 136) = 0;
    uint64_t v66 = v9 + 24044;
    do
    {
      uint64_t v67 = &a1[v65 + 8016];
      *(_OWORD *)(v67 + 28) = 0uLL;
      *(_OWORD *)uint64_t v67 = 0uLL;
      *((_OWORD *)v67 + 1) = 0uLL;
      *(_DWORD *)(v66 + 31) = 0;
      v65 += 48;
      *(_OWORD *)uint64_t v66 = 0uLL;
      *(_OWORD *)(v66 + 16) = 0uLL;
      v66 += 36;
    }
    while (v65 != 1728);
    uint64_t v68 = 0;
    *(_DWORD *)(v6 + 215) = 0;
    *(_OWORD *)(v6 + 199) = 0u;
    *(_OWORD *)(v6 + 183) = 0u;
    long long v69 = (_OWORD *)(v9 + 44664);
    do
    {
      int v70 = &a1[v68 + 13360];
      *((_DWORD *)v70 + 12) = 0;
      *((_OWORD *)v70 + 1) = 0uLL;
      *((_OWORD *)v70 + 2) = 0uLL;
      *(_OWORD *)int v70 = 0uLL;
      *(_OWORD *)((char *)v69 + 27) = 0uLL;
      v68 += 56;
      *long long v69 = 0uLL;
      v69[1] = 0uLL;
      long long v69 = (_OWORD *)((char *)v69 + 44);
    }
    while (v68 != 3528);
    uint64_t v71 = 0;
    *(_OWORD *)(v6 + 331) = 0u;
    *(_OWORD *)(v6 + 300) = 0u;
    *(_OWORD *)(v6 + 316) = 0u;
    *(_OWORD *)(v6 + 284) = 0u;
    uint64_t v72 = v9 + 49824;
    do
    {
      double v73 = &a1[v71 + 27032];
      *(_OWORD *)(v73 + 44) = 0uLL;
      *((_OWORD *)v73 + 1) = 0uLL;
      *((_OWORD *)v73 + 2) = 0uLL;
      *(_OWORD *)double v73 = 0uLL;
      *(unsigned char *)(v72 + 48) = 0;
      *(_OWORD *)(v72 + 16) = 0uLL;
      *(_OWORD *)(v72 + 32) = 0uLL;
      v71 += 64;
      *(_OWORD *)uint64_t v72 = 0uLL;
      v72 += 52;
    }
    while (v71 != 896);
    uint64_t v74 = 0;
    *(void *)(v6 + 368) = 0;
    *(void *)(v6 + 362) = 0;
    do
    {
      int v75 = &a1[v74 + 32120];
      *(void *)int v75 = 0;
      *((void *)v75 + 1) = 0;
      *((_DWORD *)v75 + 6) = 0;
      *((void *)v75 + 2) = 0;
      v74 += 32;
    }
    while (v74 != 576);
    *(unsigned char *)(v6 + 145) = 0;
    *(_OWORD *)(a1 + 33384) = 0u;
    *(_OWORD *)(a1 + 33400) = 0u;
    *(_OWORD *)(a1 + 33352) = 0u;
    *(_OWORD *)(a1 + 33368) = 0u;
    *(_OWORD *)(a1 + 33320) = 0u;
    *(_OWORD *)(a1 + 33336) = 0u;
    *(_OWORD *)(a1 + 33288) = 0u;
    *(_OWORD *)(a1 + 33304) = 0u;
    *(_OWORD *)(v9 + 60410) = 0u;
    *(_OWORD *)(v9 + 60400) = 0u;
    *(_OWORD *)(v9 + 60384) = 0u;
    *(_OWORD *)(v9 + 60368) = 0u;
    *(_OWORD *)(v9 + 60352) = 0u;
    *(_OWORD *)(v9 + 60336) = 0u;
    *(_OWORD *)(v9 + 60320) = 0u;
    *(_OWORD *)(v9 + 60304) = 0u;
    *(_OWORD *)(v9 + 60288) = 0u;
    *(_OWORD *)(v9 + 60272) = 0u;
    *(_OWORD *)(v9 + 60256) = 0u;
    *(_OWORD *)(v9 + 60240) = 0u;
    *(_OWORD *)(v9 + 60224) = 0u;
    *(_OWORD *)(v9 + 60208) = 0u;
  }
  if (v22)
  {
    *((void *)a1 + 19) = 0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(unsigned char *)(v6 + 10) = 0;
    *(_OWORD *)(v9 + 8952) = 0u;
  }
  if (v21)
  {
    *((_OWORD *)a1 + 10) = 0u;
    *((_OWORD *)a1 + 11) = 0u;
    *(unsigned char *)(v6 + 11) = 0;
    *((_DWORD *)a1 + 7308) = 0;
    *((_OWORD *)a1 + 1826) = 0u;
    *((_OWORD *)a1 + 1825) = 0u;
    *(unsigned char *)(v6 + 144) = 0;
    *((_DWORD *)a1 + 3328) = 0;
    *((_OWORD *)a1 + 831) = 0u;
    *((_OWORD *)a1 + 830) = 0u;
    *(_OWORD *)(a1 + 13320) = 0u;
    *(_OWORD *)(a1 + 13336) = 0u;
    *((_DWORD *)a1 + 3338) = 0;
    *(_WORD *)(v6 + 219) = 0;
    *(_OWORD *)(a1 + 7992) = 0u;
    *((void *)a1 + 1001) = 0;
    *(unsigned char *)(v6 + 146) = 0;
    *((_DWORD *)a1 + 6756) = 0;
    *((void *)a1 + 3377) = 0;
    *(_OWORD *)(a1 + 27000) = 0u;
    *(unsigned char *)(v6 + 347) = 0;
    *(_OWORD *)(v9 + 8968) = 0u;
    *(void *)(v9 + 8984) = 0;
    *(void *)(v9 + 17112) = 0;
    *(_OWORD *)(v9 + 17120) = 0u;
    *(unsigned char *)(v9 + 17136) = 0;
    *(void *)(v9 + 25340) = 0;
    *(void *)(v9 + 25346) = 0;
    *(void *)(v9 + 47436) = 0;
    *(_OWORD *)(v9 + 47444) = 0u;
    *(_WORD *)(v9 + 47460) = 0;
    *(void *)(v9 + 47464) = 0;
    *(_OWORD *)(v9 + 47472) = 0u;
    *(_WORD *)(v9 + 47488) = 0;
    *(_WORD *)(v9 + 50568) = 0;
    *(_OWORD *)(v9 + 50552) = 0u;
  }
  if (v20)
  {
    *(_OWORD *)(a1 + 116) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 29160) = 0u;
    *(_OWORD *)(a1 + 29176) = 0u;
    *((_DWORD *)a1 + 7298) = 0;
    *((_OWORD *)a1 + 380) = 0u;
    *(void *)(a1 + 6094) = 0;
    *(_OWORD *)(a1 + 7944) = 0u;
    *(_OWORD *)(a1 + 7960) = 0u;
    *(_OWORD *)(a1 + 7976) = 0u;
    *((_OWORD *)a1 + 825) = 0u;
    *((_OWORD *)a1 + 826) = 0u;
    *((_OWORD *)a1 + 827) = 0u;
    *((_OWORD *)a1 + 828) = 0u;
    *(_OWORD *)(a1 + 13259) = 0u;
    *((void *)a1 + 3373) = 0;
    *((_WORD *)a1 + 13496) = 0;
    *(_OWORD *)(a1 + 26968) = 0u;
    *((void *)a1 + 4160) = 0;
    *((_OWORD *)a1 + 2079) = 0u;
    *((_OWORD *)a1 + 2078) = 0u;
    *((_OWORD *)a1 + 2077) = 0u;
    *((_OWORD *)a1 + 2076) = 0u;
  }
  int v152 = a2;
  int v76 = v19;
  if (v19)
  {
    *(_OWORD *)(a1 + 33170) = 0u;
    *(_OWORD *)(a1 + 33144) = 0u;
    *(_OWORD *)(a1 + 33160) = 0u;
    *(_OWORD *)(a1 + 33112) = 0u;
    *(_OWORD *)(a1 + 33128) = 0u;
    *(_OWORD *)(a1 + 33080) = 0u;
    *(_OWORD *)(a1 + 33096) = 0u;
    *(_OWORD *)(a1 + 33048) = 0u;
    *(_OWORD *)(a1 + 33064) = 0u;
    *(_OWORD *)(a1 + 33016) = 0u;
    *(_OWORD *)(a1 + 33032) = 0u;
    *(_OWORD *)(a1 + 32984) = 0u;
    *(_OWORD *)(a1 + 33000) = 0u;
    *(_OWORD *)(a1 + 32952) = 0u;
    *(_OWORD *)(a1 + 32968) = 0u;
    *(_OWORD *)(a1 + 32920) = 0u;
    *(_OWORD *)(a1 + 32936) = 0u;
    *(_OWORD *)(a1 + 32888) = 0u;
    *(_OWORD *)(a1 + 32904) = 0u;
    *(_OWORD *)(a1 + 32856) = 0u;
    *(_OWORD *)(a1 + 32872) = 0u;
    *(_OWORD *)(a1 + 32824) = 0u;
    *(_OWORD *)(a1 + 32840) = 0u;
    *(_OWORD *)(a1 + 32792) = 0u;
    *(_OWORD *)(a1 + 32808) = 0u;
    *(_OWORD *)(a1 + 32760) = 0u;
    *(_OWORD *)(a1 + 32776) = 0u;
    *(_OWORD *)(a1 + 32728) = 0u;
    *(_OWORD *)(a1 + 32744) = 0u;
    *(_OWORD *)(a1 + 32696) = 0u;
    *(_OWORD *)(a1 + 32712) = 0u;
  }
  int v150 = v21;
  int v151 = v30;
  if (v32)
  {
    *((void *)a1 + 5) = 0;
    *((void *)a1 + 6) = 0;
    *((void *)a1 + 7) = 0;
    *(_WORD *)(v6 + 6) = 0;
  }
  if (v26)
  {
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    *((_DWORD *)a1 + 8) = 0;
    *((void *)a1 + 3) = 0;
    *(unsigned char *)(v6 + 145) = 0;
    *(_DWORD *)(v6 + 1) = 0;
    int v77 = v24;
    int v78 = v32;
    int v79 = v22;
    int v80 = v26;
    int v81 = v29;
    int v82 = v20;
    int v83 = v18;
    mach_continuous_time();
    int v18 = v83;
    int v20 = v82;
    int v29 = v81;
    int v26 = v80;
    int v22 = v79;
    int v32 = v78;
    int v24 = v77;
    *(_DWORD *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 4) = 0;
    *(unsigned char *)(v8 + 16) = 0;
    *(unsigned char *)(v8 + 80) = 0;
    *(_DWORD *)(v8 + 76) = 0;
  }
  if (v18)
  {
    *((void *)a1 + 8) = 0;
    *((void *)a1 + 9) = 0;
    *((void *)a1 + 10) = 0;
    *(_OWORD *)(a1 + 33192) = 0u;
    *((_DWORD *)a1 + 8302) = 0;
  }
  if (g_GncPStateInfo != 8)
  {
    std::__split_buffer<std::string> v84 = a1;
    int v85 = v24;
    int v86 = v26;
    GncP07_08WriteNVStore(0x8290uLL, v84);
    int v26 = v86;
    int v24 = v85;
  }
  int v87 = v149;
  if (v20 | v29 | v150 | v22 | v26 | v32 | v24 | v76) {
    int v87 = 0;
  }
  if ((v151 & v87 & 1) == 0 && (g_GN_GPS_Data_p_list - 4) <= 7) {
    LODWORD(g_GN_GPS_Data_p_list) = dword_263D844F8[(int)g_GN_GPS_Data_p_list - 4];
  }
  char v88 = 73;
  float v89 = (char *)v153[0];
  uint64_t v90 = 1u;
  do
  {
    v153[0] = v89 + 1;
    *float v89 = v88;
    float v89 = (char *)v153[0];
    if (v153[0] >= (unint64_t)v155)
    {
      float v89 = p_src;
      v153[0] = p_src;
    }
    char v88 = aItems[v90++];
  }
  while (v90 != 10);
  char v91 = *v152;
  if (*v152)
  {
    unint64_t v92 = (unsigned __int8 *)(v152 + 1);
    do
    {
      v153[0] = v89 + 1;
      *float v89 = v91;
      float v89 = (char *)v153[0];
      if (v153[0] >= (unint64_t)v155)
      {
        float v89 = p_src;
        v153[0] = p_src;
      }
      int v93 = *v92++;
      char v91 = v93;
    }
    while (v93);
  }
  uint64_t v94 = 0;
  char v95 = 34;
  do
  {
    v153[0] = v89 + 1;
    *float v89 = v95;
    float v89 = (char *)v153[0];
    if (v153[0] >= (unint64_t)v155)
    {
      float v89 = p_src;
      v153[0] = p_src;
    }
    char v95 = asc_263D779F2[++v94];
  }
  while (v94 != 2);
  uint64_t v96 = 0;
  char v97 = 42;
  do
  {
    v153[0] = v89 + 1;
    *float v89 = v97;
    float v89 = (char *)v153[0];
    if (v153[0] >= (unint64_t)v155)
    {
      float v89 = p_src;
      v153[0] = p_src;
    }
    char v97 = asc_263D77993[++v96];
  }
  while (v96 != 8);
  v153[0] = v89 + 1;
  *float v89 = 10;
  int v98 = v153[0];
  if (v153[0] >= (unint64_t)v155)
  {
    v153[0] = p_src;
    int v98 = (int)p_src;
  }
  unint64_t v99 = (void *)qword_26AA2DF28;
  int v100 = v98 - p_src;
  unint64_t v101 = *(void *)(qword_26AA2DF28 + 24);
  int v102 = *(void **)qword_26AA2DF28;
  uint64_t v103 = &__src;
  do
  {
    int v104 = v101 - v102;
    if (v100 >= v104) {
      int v105 = v104;
    }
    else {
      int v105 = v100;
    }
    memcpy(v102, v103, v105);
    int v102 = (void *)(*v99 + v105);
    *unint64_t v99 = v102;
    unint64_t v101 = v99[3];
    if ((unint64_t)v102 >= v101)
    {
      int v102 = (void *)v99[2];
      *unint64_t v99 = v102;
    }
    v103 += v105;
    BOOL v106 = __OFSUB__(v100, v105);
    v100 -= v105;
  }
  while (!((v100 < 0) ^ v106 | (v100 == 0)));
  long long v107 = (void *)qword_26AA2DF20;
  int v108 = LODWORD(v153[0]) - p_src;
  unint64_t v109 = *(void *)(qword_26AA2DF20 + 24);
  long long v110 = *(void **)qword_26AA2DF20;
  long long v111 = &__src;
  do
  {
    int v112 = v109 - v110;
    if (v108 >= v112) {
      int v113 = v112;
    }
    else {
      int v113 = v108;
    }
    memcpy(v110, v111, v113);
    long long v110 = (void *)(*v107 + v113);
    *long long v107 = v110;
    unint64_t v109 = v107[3];
    if ((unint64_t)v110 >= v109)
    {
      long long v110 = (void *)v107[2];
      *long long v107 = v110;
    }
    v111 += v113;
    BOOL v106 = __OFSUB__(v108, v113);
    v108 -= v113;
  }
  while (!((v108 < 0) ^ v106 | (v108 == 0)));
  double v114 = (void *)qword_26AA2DF30;
  int v115 = LODWORD(v153[0]) - p_src;
  unint64_t v116 = *(void *)(qword_26AA2DF30 + 24);
  uint64_t v117 = *(void **)qword_26AA2DF30;
  uint64_t v118 = &__src;
  do
  {
    int v119 = v116 - v117;
    if (v115 >= v119) {
      int v120 = v119;
    }
    else {
      int v120 = v115;
    }
    memcpy(v117, v118, v120);
    uint64_t v117 = (void *)(*v114 + v120);
    *double v114 = v117;
    unint64_t v116 = v114[3];
    if ((unint64_t)v117 >= v116)
    {
      uint64_t v117 = (void *)v114[2];
      *double v114 = v117;
    }
    v118 += v120;
    BOOL v106 = __OFSUB__(v115, v120);
    v115 -= v120;
  }
  while (!((v115 < 0) ^ v106 | (v115 == 0)));
  GNSS_Event_Log_Ctl(qword_26AA2DF28);
  GNSS_Nav_Debug_Ctl(qword_26AA2DF20);
  GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
  return 1;
}

BOOL Horz_Meas_Update(unsigned int a1, double *a2, double *a3, unsigned int a4, double *a5, BOOL a6, _WORD *a7)
{
  v43[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a5 + 1) < 1) {
    return 0;
  }
  *((unsigned char *)a5 + 16) = 0;
  if (!*(unsigned char *)a5) {
    return 0;
  }
  double v39 = 0.0;
  double v11 = a5[8];
  v43[0] = 0.0;
  double sinval = 0.0;
  double cosval = 1.0;
  if (!R8_EQ(a5 + 8, v43))
  {
    __double2 v14 = __sincos_stret(v11);
    double cosval = v14.__cosval;
    v43[0] = 1.57079633;
    if (R8_EQ(a5 + 8, v43))
    {
      double cosval = 0.0;
      double sinval = 1.0;
    }
    else
    {
      double sinval = v14.__sinval;
    }
  }
  double v15 = *a2;
  __double2 v16 = __sincos_stret(*a2);
  uint64_t v17 = 0;
  double v18 = 1.0 / sqrt(v16.__sinval * v16.__sinval * -0.00669437999 + 1.0);
  double v19 = a2[2];
  double v20 = v16.__cosval * (v19 + v18 * 6378137.0);
  if (v20 < 1.0) {
    double v20 = 1.0;
  }
  double v21 = a5[4];
  a5[11] = (v15 - a5[3]) * (v19 + v18 * (v18 * v18) * 6335439.33);
  a5[12] = (a2[1] - v21) * v20;
  uint64_t v36 = a1;
  uint64_t v22 = a1 + 1;
  uint64_t v23 = a1 + 2;
  char v24 = 1;
  do
  {
    uint64_t v41 = 0;
    memset(v40, 0, sizeof(v40));
    double v25 = a3[2];
    double v26 = a3[1];
    *((double *)v40 + v36) = sinval * a3[3] + cosval * *a3;
    double v27 = a3[5];
    *((double *)v40 + v22) = sinval * a3[4] + cosval * v26;
    char v28 = v24;
    *((double *)v40 + v23) = sinval * v27 + cosval * v25;
    *((double *)v40 + a4) = sinval * a5[12] + cosval * a5[11];
    int v29 = &a5[v17];
    double v31 = v29[6];
    int v30 = v29 + 6;
    umeas(a6, a4, v31, (double *)v40, v43, v42, &v39, a5[13]);
    double v32 = v39;
    if (v39 <= 0.0)
    {
      *(unsigned char *)a5 = 0;
      *((unsigned char *)a5 + 16) = 1;
      ++*a7;
    }
    else
    {
      double v32 = *v30 * (v39 * (v43[a4] * v43[a4]));
    }
    char v24 = 0;
    a5[v17 + 14] = v32;
    double v33 = -sinval;
    uint64_t v17 = 1;
    double sinval = cosval;
    double cosval = v33;
  }
  while ((v28 & 1) != 0);
  return *(unsigned char *)a5 != 0;
}

void NK_Final_Check(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, int a6, double a7, double a8)
{
  uint64_t v432 = *MEMORY[0x263EF8340];
  uint64_t v13 = (double *)(a2 + 61344);
  uint64_t v14 = a2 + 60128;
  v398 = (_OWORD *)(a2 + 1704);
  *(_OWORD *)(a2 + 79520) = *(_OWORD *)(a2 + 1704);
  *(void *)(a2 + 79536) = *(void *)(a2 + 1720);
  uint64_t v395 = a2 + 1512;
  *(_OWORD *)(a2 + 79544) = *(_OWORD *)(a2 + 1816);
  *(void *)(a2 + 79560) = *(void *)(a2 + 1832);
  unsigned int v15 = *(unsigned __int8 *)(a2 + 62033);
  unsigned int v16 = v15 - *(unsigned __int8 *)(a2 + 62034);
  BOOL v18 = v15 > 1 && v16 == 2;
  unsigned int v19 = v15 - v18;
  if (*(unsigned char *)(a2 + 60200)) {
    BOOL v406 = (*(_DWORD *)(a2 + 60208) - 3) < 2;
  }
  else {
    BOOL v406 = 0;
  }
  uint64_t v20 = a2 + 63208;
  if (*(int *)(a2 + 1868) > 1)
  {
    unsigned int v28 = *(_DWORD *)(a1 + 27120);
    unsigned int v21 = v19;
    if (v28 >= 0x3D)
    {
      if (v28 < 0x12D) {
        int v29 = 2;
      }
      else {
        int v29 = 1;
      }
      *(_DWORD *)(a2 + 1868) = v29;
      unsigned int v21 = v19;
    }
  }
  else
  {
    unsigned int v21 = v15 - v18;
    if (v19 <= 3)
    {
      uint64_t v22 = 0;
      unsigned int v23 = 0;
      uint64_t v24 = a2 + 7064;
      do
      {
        if (*(unsigned char *)(v24 + v22) && (*(_DWORD *)(v24 + 4 * v22 + 256) - 30) < 0xFFFFFFE3) {
          ++v23;
        }
        ++v22;
      }
      while (v22 != 128);
      BOOL v26 = v23 > 1 && v16 == 2;
      unsigned int v21 = v23 - v26;
    }
    if (v21 >= 4 && *(unsigned char *)(a1 + 240)) {
      goto LABEL_31;
    }
    if (*(unsigned char *)(a2 + 60200) && *(_DWORD *)(a2 + 60204) == 1)
    {
      char v27 = !v406;
      if (*(double *)(a2 + 60248) > 900000000.0) {
        char v27 = 1;
      }
      if ((v27 & 1) == 0)
      {
LABEL_31:
        *(_DWORD *)(a2 + 1868) = 2;
        *(unsigned char *)(a1 + 243) = 0;
      }
    }
  }
  uint64_t v400 = a1 + 20136;
  unsigned int v380 = v19;
  if (!*(unsigned char *)(a1 + 136))
  {
    uint64_t v30 = 0;
    while (*(double *)(a2 + 61344 + v30) <= 1.0e18)
    {
      v30 += 8;
      if (v30 == 96) {
        goto LABEL_43;
      }
    }
    *(unsigned char *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 140) = 80;
  }
LABEL_43:
  unsigned int v385 = v21;
  double v31 = *(double *)&ClkBiasOrigVar[*(unsigned int *)(a2 + 1536)];
  *(double *)(a2 + 63216) = v31;
  *(_DWORD *)uint64_t v20 = 0;
  *(void *)(a2 + 63224) = 0;
  *(_WORD *)(a2 + 63212) = 255;
  double v32 = (double *)(a2 + 1632);
  *(void *)&long long v426 = 0;
  uint64_t v404 = a2 + 61344;
  if (R8_EQ((const double *)(a2 + 1632), (const double *)&v426) || (double v33 = *v13, *v13 >= v31))
  {
    int v34 = 0;
    double v35 = 0.0;
  }
  else
  {
    int v34 = 1;
    *(_DWORD *)uint64_t v20 = 1;
    double v35 = *v32;
    *(unsigned char *)(v20 + 4) = 0;
    *(double *)(v20 + 8) = v33;
    *(double *)(v20 + 16) = v35;
    double v31 = v33;
  }
  uint64_t v36 = (double *)(a2 + 1640);
  *(void *)&long long v426 = 0;
  if (!R8_EQ((const double *)(a2 + 1640), (const double *)&v426))
  {
    double v37 = *(double *)(v404 + 8);
    if (v37 < v31)
    {
      int v34 = 2;
      *(_DWORD *)uint64_t v20 = 2;
      double v35 = *v36;
      *(unsigned char *)(v20 + 4) = 1;
      *(double *)(v20 + 8) = v37;
      *(double *)(v20 + 16) = v35;
      double v31 = v37;
    }
  }
  uint64_t v38 = (double *)(a2 + 1648);
  *(void *)&long long v426 = 0;
  if (!R8_EQ((const double *)(a2 + 1648), (const double *)&v426))
  {
    double v40 = *(double *)(v404 + 16);
    if (v40 < v31)
    {
      *(_DWORD *)uint64_t v20 = 4;
      double v35 = *v38;
      *(unsigned char *)(v20 + 4) = 2;
      *(double *)(v20 + 8) = v40;
      *(double *)(v20 + 16) = v35;
      *(void *)&long long v426 = 0;
      if (R8_EQ((const double *)(v20 + 16), (const double *)&v426)) {
        goto LABEL_100;
      }
      char v41 = 0;
      int v42 = 4;
LABEL_59:
      *(void *)&long long v426 = 0;
      double v43 = 0.0;
      if (!R8_EQ((const double *)(a2 + 1632), (const double *)&v426)) {
        double v43 = vabdd_f64(v35, *v32);
      }
      if (v41)
      {
        double v44 = 0.0;
        int v42 = 2;
LABEL_71:
        *(void *)&long long v426 = 0;
        double v45 = 0.0;
        if (!R8_EQ((const double *)(a2 + 1648), (const double *)&v426)) {
          double v45 = vabdd_f64(v35, *v38);
        }
        if (v42 != 2)
        {
          *(void *)&long long v426 = 0;
          if (R8_EQ((const double *)(a2 + 1640), (const double *)&v426)
            || (v423[0] = 0.0, R8_EQ((const double *)(a2 + 1648), v423)))
          {
            *(void *)&long long v426 = 0;
            if (!R8_EQ((const double *)(a2 + 1640), (const double *)&v426)) {
              goto LABEL_77;
            }
LABEL_81:
            *(void *)&long long v426 = 0;
            if (R8_EQ((const double *)(a2 + 1648), (const double *)&v426)) {
              goto LABEL_100;
            }
            uint64_t v46 = 4;
            goto LABEL_99;
          }
          if (v44 <= v45) {
            uint64_t v49 = 2;
          }
          else {
            uint64_t v49 = 4;
          }
          if (v44 <= v45) {
            uint64_t v50 = 4;
          }
          else {
            uint64_t v50 = 2;
          }
LABEL_98:
          NK_Final_Check_ClkBias(v49, a1, a2);
          uint64_t v46 = v50;
          goto LABEL_99;
        }
        *(void *)&long long v426 = 0;
        if (R8_EQ((const double *)(a2 + 1632), (const double *)&v426)
          || (v423[0] = 0.0, R8_EQ((const double *)(a2 + 1648), v423)))
        {
          *(void *)&long long v426 = 0;
          if (R8_EQ((const double *)(a2 + 1632), (const double *)&v426)) {
            goto LABEL_81;
          }
LABEL_83:
          uint64_t v46 = 1;
          goto LABEL_99;
        }
        BOOL v47 = v43 > v45;
        unsigned int v48 = 4;
LABEL_92:
        if (v47) {
          uint64_t v49 = v48;
        }
        else {
          uint64_t v49 = 1;
        }
        if (v47) {
          uint64_t v50 = 1;
        }
        else {
          uint64_t v50 = v48;
        }
        goto LABEL_98;
      }
      goto LABEL_63;
    }
  }
  if (!v34) {
    goto LABEL_100;
  }
  *(void *)&long long v426 = 0;
  if (R8_EQ((const double *)(v20 + 16), (const double *)&v426)) {
    goto LABEL_100;
  }
  if (v34 != 1)
  {
    int v42 = 2;
    char v41 = 1;
    goto LABEL_59;
  }
  double v43 = 0.0;
  int v42 = 1;
LABEL_63:
  *(void *)&long long v426 = 0;
  double v44 = 0.0;
  if (!R8_EQ((const double *)(a2 + 1640), (const double *)&v426)) {
    double v44 = vabdd_f64(v35, *v36);
  }
  if (v42 != 4) {
    goto LABEL_71;
  }
  *(void *)&long long v426 = 0;
  if (!R8_EQ((const double *)(a2 + 1632), (const double *)&v426))
  {
    v423[0] = 0.0;
    if (!R8_EQ((const double *)(a2 + 1640), v423))
    {
      BOOL v47 = v43 > v44;
      unsigned int v48 = 2;
      goto LABEL_92;
    }
  }
  *(void *)&long long v426 = 0;
  if (!R8_EQ((const double *)(a2 + 1632), (const double *)&v426)) {
    goto LABEL_83;
  }
  *(void *)&long long v426 = 0;
  if (!R8_EQ((const double *)(a2 + 1640), (const double *)&v426))
  {
LABEL_77:
    uint64_t v46 = 2;
LABEL_99:
    NK_Final_Check_ClkBias(v46, a1, a2);
  }
LABEL_100:
  double v51 = *(double *)(a2 + 1656);
  if (fabs(v51) > 0.000000066712819)
  {
    *(void *)(a2 + 1656) = 0;
    Core_Load_Clk_L5L1((int *)v423, (double *)(a2 + 1656));
    EvCrt_v("NK_Final_Check:  Reseting (L5-L1) delta Clock Bias  %f m  Unc %f m  to  %f m  Unc %f m ", v51 * 299792458.0, *(double *)(v404 + 216), *(double *)(a2 + 1656) * 299792458.0, 3.0);
    double v52 = 9.0 - *(double *)(v404 + 24);
    if (v52 > 0.0)
    {
      LODWORD(v425[0]) = 0;
      long long v430 = 0u;
      long long v431 = 0u;
      long long v428 = 0u;
      long long v429 = 0u;
      long long v426 = 0u;
      long long v427 = 0u;
      Apply_Q_Boost(v52, 3u, 1u, (double *)(a1 + 976), (unsigned int *)v425, (double *)&v426);
      *(void *)(v404 + 24) = 0x4022000000000000;
      *(void *)(v404 + 120) = 0x4022000000000000;
      *(void *)(v404 + 216) = 0x4008000000000000;
    }
    *(unsigned char *)uint64_t v400 = 0;
    *(void *)(a1 + 20144) = 0;
  }
  double v53 = *(double *)(a2 + 1664);
  if (fabs(v53) <= 0.000006)
  {
    if (*(unsigned char *)v14)
    {
      double v55 = (*(double *)(v14 + 24) + v53 * -299792458.0) * (*(double *)(v14 + 24) + v53 * -299792458.0);
      double v56 = *(double *)(v14 + 40);
      if (v55 / v56 > 25.0)
      {
        if (*(unsigned __int8 *)(v404 + 1089) < 4u
          || *(unsigned __int8 *)(a2 + 1881) < 0x1Au
          || !*(unsigned char *)(v404 + 1112)
          || *(double *)(v404 + 32) >= v56
          || *(int *)(a2 + 1868) < 2)
        {
          *(double *)(a2 + 1664) = a7;
          int v403 = 1;
          *(unsigned char *)(a1 + 136) = 1;
          int v54 = 71;
          goto LABEL_116;
        }
        *(unsigned char *)uint64_t v14 = 0;
        *(unsigned char *)(p_NA + 6) = 0;
        EvCrt_v("NK_Final_Check: Ext ClkD is ignored in favor of PE estimated ClkD.");
      }
    }
    int v403 = 0;
    goto LABEL_117;
  }
  *(double *)(a2 + 1664) = a7;
  int v403 = 1;
  *(unsigned char *)(a1 + 136) = 1;
  int v54 = 81;
LABEL_116:
  *(_DWORD *)(a1 + 140) = v54;
LABEL_117:
  int64x2_t v409 = vdupq_n_s64(0x426D1A94A2000000uLL);
  char v57 = !v406;
  double v58 = 0.0;
  if (!*(unsigned char *)(v14 + 72)) {
    char v57 = 1;
  }
  double v59 = 0.0;
  double v60 = 0.0;
  if ((v57 & 1) == 0)
  {
    double v61 = *(double *)(v14 + 144);
    double v59 = 0.0;
    if (v61 < 100000000.0)
    {
      long double v62 = cos(*(long double *)(v14 + 136));
      double v63 = *(double *)(v14 + 152);
      long double v64 = v62 * v62 * (v61 - v63);
      long double v65 = v63 + v64;
      double v66 = v65 + 1000000.0;
      double v67 = v61 - v64;
      double v68 = v61 - v64 + 1000000.0;
      BOOL v69 = v65 < 1.0;
      double v70 = 1000001.0;
      if (v69) {
        double v71 = 1000001.0;
      }
      else {
        double v71 = v66;
      }
      if (v67 >= 1.0) {
        double v70 = v68;
      }
      *(double *)v409.i64 = v71;
      *(double *)&v409.i64[1] = v70;
      double v72 = *(double *)(a2 + 1704) - *(double *)(v14 + 96);
      if (v72 >= 1.57079633)
      {
        double v73 = 3.14159265;
      }
      else
      {
        if (v72 >= -1.57079633) {
          goto LABEL_131;
        }
        double v73 = -3.14159265;
      }
      double v72 = v73 - v72;
LABEL_131:
      double v74 = v72 * 6378137.0 * (v72 * 6378137.0);
      double v75 = *(double *)(a2 + 1712) - *(double *)(v14 + 104);
      if (v75 >= 3.14159265)
      {
        double v76 = -6.28318531;
      }
      else
      {
        if (v75 >= -3.14159265)
        {
LABEL_136:
          double v59 = v74 / v71;
          double v60 = v75 * 6378137.0 * *(double *)(a2 + 1808) * (v75 * 6378137.0 * *(double *)(a2 + 1808)) / v70;
          goto LABEL_137;
        }
        double v76 = 6.28318531;
      }
      double v75 = v75 + v76;
      goto LABEL_136;
    }
  }
LABEL_137:
  uint64_t v396 = a5;
  if (*(unsigned char *)(v14 + 200))
  {
    double v77 = *(double *)(v14 + 240);
    char v78 = !v406;
    if (v77 >= 250000.0) {
      char v78 = 1;
    }
    if ((v78 & 1) == 0)
    {
      double v79 = *(double *)(a2 + 1720) - *(double *)(v14 + 224);
      double v58 = v79 * v79 / (v77 + 100.0);
    }
  }
  int v80 = (int)*(double *)(a2 + 1720) - (int)*(double *)(a2 + 1728);
  unsigned int v379 = v80 - 60001;
  BOOL v81 = v59 <= 49.0 && (v80 - 60001) >= 0xFFFF0DCF;
  int v82 = !v81;
  if (v60 > 49.0) {
    int v82 = 1;
  }
  if (v58 > 64.0) {
    int v82 = 1;
  }
  int v405 = v82;
  if (v82)
  {
    EvLog_v("NKFC: KF Reset 83:  Position problem !  SVNum %d  LLH %f %f %d m   PosTest %f %f %f", *(unsigned __int8 *)(v404 + 689), *(double *)(a2 + 1704) * 57.2957795, *(double *)(a2 + 1712) * 57.2957795, v80, sqrt(v59), sqrt(v60), sqrt(v58));
    if (*(unsigned char *)(a2 + 1864))
    {
      char v83 = !v406;
      if (!*(unsigned char *)(v14 + 72)) {
        char v83 = 1;
      }
      if ((v83 & 1) == 0)
      {
        uint64_t v84 = *(uint64_t *)(v14 + 144);
        if (*(double *)&v84 < 100000000.0)
        {
          _OWORD *v398 = *(_OWORD *)(a2 + 60224);
          int64x2_t v85 = vdupq_lane_s64(v84, 0);
          *(int64x2_t *)(a2 + 61392) = v85;
          *(int64x2_t *)(a2 + 61488) = v85;
          *(int64x2_t *)(a2 + 61584) = vdupq_lane_s64(COERCE__INT64(sqrt(*(double *)&v84)), 0);
        }
      }
    }
    if (*(unsigned char *)(v14 + 200))
    {
      double v86 = *(double *)(v14 + 224);
      int v80 = (int)v86 - (int)*(double *)(a2 + 1728);
      double v87 = *(double *)(v14 + 240);
      double v88 = sqrt(v87);
    }
    else
    {
      int v80 = 0;
      double v86 = *(double *)(a2 + 1728);
      double v88 = 1000.0;
      double v87 = 1000000.0;
    }
    *(double *)(a2 + 1720) = v86;
    *(double *)(v404 + 64) = v87;
    *(double *)(v404 + 160) = v87;
    *(double *)(v404 + 256) = v88;
    int v89 = 1;
    *(unsigned char *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 140) = 83;
  }
  else
  {
    int v89 = *(unsigned __int8 *)(a1 + 136);
  }
  double v393 = *(double *)(a2 + 1848);
  memset(v410, 0, sizeof(v410));
  long long v411 = 0u;
  long long v412 = 0u;
  long long v413 = 0u;
  long long v414 = 0u;
  double v90 = a8 * 99930819.3 * (a8 * 99930819.3);
  char v91 = "Vel,%f,RmsVel,%f\n";
  uint64_t v381 = (double *)(a2 + 1648);
  v382 = (double *)(a2 + 1640);
  if (!*(unsigned char *)v14)
  {
    unint64_t v92 = (double *)v404;
    int v93 = (double *)(v404 + 32);
LABEL_170:
    if (v89)
    {
      int v100 = 0;
      int v383 = 0;
      double *v93 = v90;
      goto LABEL_179;
    }
    goto LABEL_178;
  }
  unint64_t v92 = (double *)v404;
  int v93 = (double *)(v404 + 32);
  if (*(_DWORD *)(v14 + 4) != 1) {
    goto LABEL_170;
  }
  double v94 = *(double *)(v14 + 40);
  double v95 = v94 + 225.0;
  double v96 = *(double *)(v14 + 24);
  double v97 = (v96 - *(double *)(a2 + 1664) * 299792458.0) * (v96 - *(double *)(a2 + 1664) * 299792458.0);
  double v98 = v97 / (v94 + 225.0);
  double v99 = v94 + v97 * 0.1;
  if (v89)
  {
    if (v98 > 11.0)
    {
      double *v93 = v95;
      EvCrt_v("NK_Final_Check: Clock drift check failed", v99);
      int v100 = 0;
      *(double *)(a2 + 1664) = v96 / 299792458.0;
LABEL_174:
      int v383 = 1;
      goto LABEL_179;
    }
    if (v98 > 1.0)
    {
LABEL_176:
      int v100 = 0;
      int v383 = 0;
      double *v93 = v99;
      goto LABEL_179;
    }
  }
  else
  {
    if (v98 > 16.0)
    {
      double *v93 = v95;
      *(double *)&long long v411 = v94 + 225.0;
      EvCrt_v("NK_Final_Check: Clock drift check failed", v99);
      *(double *)(a2 + 1664) = v96 / 299792458.0;
      *(unsigned char *)(a1 + 176) = 4;
      int v100 = 1;
      goto LABEL_174;
    }
    if (*v93 > v99) {
      goto LABEL_176;
    }
  }
LABEL_178:
  int v100 = 0;
  int v383 = 0;
LABEL_179:
  int v101 = *(unsigned __int8 *)(a1 + 136);
  if (!*(unsigned char *)v14)
  {
    if (*(unsigned char *)(a1 + 136)) {
      goto LABEL_202;
    }
    if (*v93 > v90 + v90)
    {
      if (*(int *)(a2 + 1868) <= 1)
      {
        int v101 = 1;
        *(unsigned char *)(a1 + 136) = 1;
        int v103 = 72;
LABEL_195:
        *(_DWORD *)(a1 + 140) = v103;
        int v102 = 1;
        goto LABEL_203;
      }
      *(double *)(a2 + 1664) = a7;
      double *v93 = v90;
      *(double *)&long long v411 = v90;
      *(unsigned char *)(a1 + 176) = 5;
      int v100 = 1;
    }
LABEL_187:
    uint64_t v104 = *(int *)(a1 + 20);
    if (v104 > 8) {
      double v105 = 1000000000.0;
    }
    else {
      double v105 = dbl_263D84590[v104];
    }
    if (v92[9] <= v105 && v92[10] <= v105 && v92[11] <= v105)
    {
      int v101 = 0;
    }
    else
    {
      if (*(int *)(a2 + 1868) < 2)
      {
        int v101 = 1;
        *(unsigned char *)(a1 + 136) = 1;
        int v103 = 73;
        goto LABEL_195;
      }
      uint64_t v106 = -24;
      do
      {
        long long v107 = (void *)(a2 + v106);
        v107[201] = 0;
        v107[230] = 0;
        v107[204] = 0;
        uint64_t v108 = 0x4197D78400000000;
        if (v104 <= 8) {
          uint64_t v108 = *(void *)&dbl_263D845D8[v104];
        }
        *(void *)&v415[v106] = v108;
        v107[7680] = v108;
        v106 += 8;
      }
      while (v106);
      int v101 = 0;
      *(void *)(a2 + 1848) = 0;
      *(void *)(a2 + 1840) = 0;
      *(void *)(a2 + 1856) = 0;
      *(unsigned char *)(a1 + 176) = 6;
      int v100 = 1;
    }
LABEL_202:
    int v102 = v405;
    goto LABEL_203;
  }
  int v102 = v405;
  if (!*(unsigned char *)(a1 + 136)) {
    goto LABEL_187;
  }
LABEL_203:
  if (v80 <= -501)
  {
    double v109 = (double)(v80 * v80) / v92[8] / 9.0;
    if (v109 > 1.2)
    {
      uint64_t v110 = 0;
      double v111 = v109 + -1.0;
      uint64_t v112 = a2 + 61392;
      do
      {
        double v113 = *(double *)(v112 + v110 * 8);
        v423[v110] = v111 * v113;
        *(double *)(v112 + v110 * 8) = v113 + v111 * v113;
        ++v110;
      }
      while (v110 != 3);
      if (v80 > -1001)
      {
        v92[36] = *(double *)(a1 + 15520) + (v92[36] - *(double *)(a1 + 15520)) * v109;
        double v114 = (double *)(a1 + 15496);
        int v115 = v92 + 30;
        uint64_t v116 = 3;
        do
        {
          double v117 = *v114++;
          double v118 = *(v115 - 24) + v117;
          *(v115 - 12) = v118;
          *v115++ = sqrt(v118);
          --v116;
        }
        while (v116);
        if (!v101)
        {
          int v387 = v100;
          int v389 = v102;
          long long v430 = 0u;
          long long v431 = 0u;
          long long v428 = 0u;
          long long v429 = 0u;
          long long v426 = 0u;
          long long v427 = 0u;
          double v119 = v423[0];
          if (v423[0] <= v423[1]) {
            double v119 = v423[1];
          }
          if (v119 <= v423[2]) {
            double v120 = v423[2];
          }
          else {
            double v120 = v119;
          }
          for (uint64_t i = 6; i != 9; ++i)
          {
            *((void *)&v426 + i) = 0x3FF0000000000000;
            if (v120 > 0.0) {
              rnk1_core((double *)(a1 + 976), i, v120, (double *)&v426, (int *)v425);
            }
            *((void *)&v426 + i) = 0;
          }
          int v101 = *(unsigned __int8 *)(a1 + 136);
          int v102 = v389;
          int v100 = v387;
          char v91 = "%10u %s%c %s: OsTimeMs,%u,Vel,%f,RmsVel,%f\n" + 26;
        }
      }
      else
      {
        *(void *)(a2 + 1720) = *(void *)(a2 + 1728);
        if (*(int *)(a2 + 1868) > 1)
        {
          if (v101)
          {
            LOBYTE(v405) = 1;
          }
          else
          {
            long long v412 = *(_OWORD *)(a2 + 61392);
            *(double *)&long long v413 = v92[8];
            *(unsigned char *)(a1 + 176) = 7;
            LOBYTE(v405) = 1;
            int v100 = 1;
          }
        }
        else
        {
          int v101 = 1;
          *(unsigned char *)(a1 + 136) = 1;
          *(_DWORD *)(a1 + 140) = 74;
          LOBYTE(v405) = 1;
          int v102 = 1;
        }
      }
    }
  }
  uint64_t v402 = (unsigned int *)(a1 + 27116);
  uint64_t v397 = (double *)(a2 + 63440);
  uint64_t v122 = qword_263D84570[*(unsigned char *)(a2 + 1864) == 0];
  int v390 = v102;
  v392 = (double *)(a2 + 1632);
  int v388 = v100;
  if (*(unsigned char *)(v14 + 200))
  {
    BOOL v123 = v406;
    if (*(_DWORD *)(v14 + 204) != 1) {
      BOOL v123 = 0;
    }
    unsigned int v124 = v92 + 8;
    if (v123)
    {
      double v125 = *(double *)(v14 + 240);
      double v126 = v125 * 2.25 + 5625.0;
      double v127 = *(double *)(v14 + 224);
      double v128 = (v127 - *(double *)(a2 + 1720)) * (v127 - *(double *)(a2 + 1720));
      double v129 = v128 / v126;
      double v130 = v125 + v128 * *((double *)v91 + 498);
      if (v101)
      {
        if (v129 > 11.0)
        {
          *(double *)(a2 + 1720) = v127;
          double v131 = v92 + 8;
LABEL_238:
          uint64_t v132 = v91;
          *double v131 = v126;
          EvCrt_v("NK_Final_Check: Vertical position check failed");
          *unsigned int v124 = *v124 / 2.25;
          if (v101)
          {
            int v133 = 0;
          }
          else
          {
            *(double *)&long long v413 = *(double *)&v413 / 2.25;
            int v133 = 1;
          }
          LOBYTE(v405) = 1;
          goto LABEL_246;
        }
        uint64_t v132 = v91;
        if (v129 > 1.0)
        {
LABEL_241:
          int v133 = 0;
          *unsigned int v124 = v130;
          goto LABEL_246;
        }
      }
      else
      {
        if (v129 > 16.0)
        {
          double v131 = (double *)&v413;
          *(double *)(a2 + 1720) = v127;
          *unsigned int v124 = v126;
          goto LABEL_238;
        }
        uint64_t v132 = v91;
        if (*v124 > v130) {
          goto LABEL_241;
        }
      }
LABEL_243:
      int v133 = 0;
      goto LABEL_246;
    }
  }
  else
  {
    unsigned int v124 = v92 + 8;
  }
  uint64_t v132 = v91;
  if (!v101) {
    goto LABEL_243;
  }
  int v133 = 0;
  *(void *)unsigned int v124 = v122;
LABEL_246:
  uint64_t v134 = 0;
  char v135 = 1;
  double v136 = *((double *)v132 + 498);
  do
  {
    char v137 = v135;
    if (v135)
    {
      BOOL v138 = *(unsigned char *)(a1 + 136) == 0;
      if (*(unsigned char *)(v14 + 72))
      {
        double v139 = 6378137.0;
        goto LABEL_252;
      }
      if (!*(unsigned char *)(a1 + 136)) {
        goto LABEL_278;
      }
      int v143 = (double *)(a2 + 61344 + ((8 * v134) | 0x30));
LABEL_270:
      *(void *)int v143 = v122;
      goto LABEL_278;
    }
    if (!*(unsigned char *)(v14 + 72))
    {
      if (!*(unsigned char *)(a1 + 136)) {
        break;
      }
      int v143 = (double *)(a2 + 61344 + ((8 * v134) | 0x30));
      goto LABEL_270;
    }
    double v139 = cos(*(long double *)(v14 + 96)) * 6378137.0;
    BOOL v138 = *(unsigned char *)(a1 + 136) == 0;
LABEL_252:
    uint64_t v140 = 8 * v134;
    BOOL v141 = *(_DWORD *)(v14 + 76) == 1 && v406;
    uint64_t v142 = v140 | 0x30;
    int v143 = (double *)(a2 + 61344 + (v140 | 0x30));
    if (v141)
    {
      uint64_t v144 = a2 + 8 * v134;
      double v145 = *(double *)(v144 + 60224);
      unint64_t v146 = (double *)(v144 + 1704);
      double v147 = v145 - *v146;
      if (v139 > 0.0)
      {
        double v148 = -6.28318531;
        if (v147 >= 3.14159265 || (double v148 = 6.28318531, v147 < -3.14159265)) {
          double v147 = v147 + v148;
        }
        double v147 = v139 * v147;
      }
      double v149 = *(double *)&v409.i64[v134];
      double v150 = v147 * v147;
      double v151 = v149 + v147 * v147 * v136;
      double v152 = v150 / v149;
      if (v138)
      {
        if (v152 > 16.0)
        {
          *int v143 = v149;
          int v143 = (double *)((char *)v410 + v142);
          *unint64_t v146 = v145;
          int v133 = 1;
LABEL_273:
          *int v143 = v149;
          EvCrt_d("NK_Final_Check: Horizontal position check failed", v134);
          LOBYTE(v405) = 1;
          goto LABEL_278;
        }
        if (*v143 > v151) {
          goto LABEL_277;
        }
      }
      else
      {
        if (v152 > 11.0)
        {
          *unint64_t v146 = v145;
          goto LABEL_273;
        }
        if (v152 > 1.0) {
LABEL_277:
        }
          *int v143 = v151;
      }
    }
    else if (!v138)
    {
      goto LABEL_270;
    }
LABEL_278:
    char v135 = 0;
    uint64_t v134 = 1;
  }
  while ((v137 & 1) != 0);
  if (v133)
  {
    *(unsigned char *)(a1 + 176) = 8;
    int v153 = 1;
    uint64_t v155 = a2 + 61536;
    uint64_t v154 = v396;
    double v156 = (double *)v404;
    uint64_t v157 = a4;
    goto LABEL_283;
  }
  uint64_t v155 = a2 + 61536;
  uint64_t v154 = v396;
  double v156 = (double *)v404;
  uint64_t v157 = a4;
  if (v388)
  {
    int v153 = v390;
LABEL_283:
    if (*(double *)&v412 > 0.0 || *((double *)&v412 + 1) > 0.0 || *(double *)&v413 > 0.0)
    {
      uint64_t v159 = 0;
      double v160 = 0.0;
      do
      {
        if (*(double *)((char *)&v412 + v159) > v160) {
          double v160 = *(double *)((char *)&v412 + v159);
        }
        if (*(double *)(a2 + 61392 + v159) > v160) {
          double v160 = *(double *)(a2 + 61392 + v159);
        }
        v159 += 8;
      }
      while (v159 != 24);
      *(double *)&long long v412 = v160;
      *((double *)&v412 + 1) = v160;
      int v158 = 1;
      *(double *)&long long v413 = v160;
    }
    else
    {
      int v158 = 1;
    }
  }
  else
  {
    int v158 = 0;
    int v153 = v390;
  }
  if (v405)
  {
    Geo2ECEF((uint64_t)v398, (uint64_t)&WGS84_Datum, (double *)(a2 + 1560));
    if (*(unsigned char *)(a1 + 136))
    {
      *(_OWORD *)(a2 + 1600) = 0u;
      *(_OWORD *)(a2 + 1584) = 0u;
      *(_OWORD *)(v395 + 304) = 0u;
      *(_OWORD *)(v395 + 320) = 0u;
      *(_OWORD *)(v395 + 336) = 0u;
      goto LABEL_299;
    }
    goto LABEL_304;
  }
  if (*(unsigned char *)(a1 + 136))
  {
LABEL_299:
    uint64_t v161 = *(int *)(a1 + 20);
    if (v161 > 8) {
      uint64_t v162 = 0x4197D78400000000;
    }
    else {
      uint64_t v162 = *(void *)&dbl_263D845D8[v161];
    }
    uint64_t v163 = 0;
    *(int64x2_t *)(a2 + 61424) = vdupq_lane_s64(v162, 0);
    *((void *)v156 + 9) = v162;
    do
    {
      float v164 = (float64x2_t *)(a2 + v163);
      float64x2_t v165 = *(float64x2_t *)(a2 + v163 + 61344);
      v164[3840] = v165;
      v164[3846] = vsqrtq_f64(v165);
      v163 += 16;
    }
    while (v163 != 96);
    goto LABEL_304;
  }
  if (v383)
  {
LABEL_304:
    if (!*(_WORD *)(a1 + 244)) {
      *(_WORD *)(a1 + 244) = 1;
    }
  }
  if (v158)
  {
    uint64_t v166 = *(int *)(a1 + 20);
    if (v166 > 8) {
      double v167 = 100000000.0;
    }
    else {
      double v167 = dbl_263D845D8[v166];
    }
    *(void *)&long long v426 = 0;
    if (R8_EQ((const double *)&v412, (const double *)&v426))
    {
      Comp_NEDvar_UDU(a1 + 976, 0xCu, 6, (double (*)[3])(a2 + 1736), (double *)&v426);
      Comp_ErrorEllipse(*(double *)&v426, *((double *)&v426 + 1), v168, v423, &v423[1], &v423[2]);
      double v169 = v423[0] * v423[0];
      if (*(double *)&v427 > v423[0] * v423[0]) {
        double v169 = *(double *)&v427;
      }
      double v170 = v169 + v169;
    }
    else
    {
      double v170 = 4.0e10;
    }
    *(void *)&long long v426 = 0;
    if (R8_EQ((const double *)&v413 + 1, (const double *)&v426))
    {
      double v171 = v156[9];
      if (v156[10] > v171) {
        double v171 = v156[10];
      }
      if (v156[11] > v171) {
        double v171 = v156[11];
      }
      double v167 = v171 * 1.2;
    }
    bzero((void *)(a1 + 976), 0x270uLL);
    for (unint64_t j = 0; j != 12; ++j)
    {
      double v173 = *((double *)v410 + j);
      if (v173 <= 0.0)
      {
        if (j == 5)
        {
          double v174 = v156[5];
          if (v174 >= 400.0) {
            double v175 = v174 * 1.2;
          }
          else {
            double v175 = v174 * 1.1;
          }
          *(double *)(a1 + 1136) = v175;
          continue;
        }
        if ((j - 6) <= 2)
        {
          *(double *)(a1 + 8 * (((j + 2 + (j + 2) * j) >> 1) - 1) + 976) = v170;
          continue;
        }
        if (j >= 9)
        {
          *(double *)(a1 + 8 * (((j + 2 + (j + 2) * j) >> 1) - 1) + 976) = v167;
          continue;
        }
        double v173 = *(double *)(a2 + 61344 + 8 * j) * 1.2;
      }
      *(double *)(a1 + 8 * (((j + 2 + (j + 2) * j) >> 1) - 1) + 976) = v173;
    }
  }
  char v407 = v403 | v153;
  if ((v403 | v153) != 1) {
    goto LABEL_407;
  }
  LODWORD(v176) = *(unsigned __int8 *)(a1 + 243);
  *(unsigned char *)(a1 + 243) = v176 + 1;
  if (*(_DWORD *)(v400 + 6980) == 1) {
    *(_DWORD *)(v400 + 6980) = 0;
  }
  int v177 = *(_DWORD *)(a2 + 1868);
  if (v177 > 1)
  {
    if ((v176 + 1) < 0x3Cu) {
      goto LABEL_351;
    }
LABEL_345:
    *(_OWORD *)(a1 + 14320) = 0u;
    *(_OWORD *)(a1 + 14304) = 0u;
    *(_OWORD *)(a1 + 14288) = 0u;
    *(_OWORD *)(a1 + 14272) = 0u;
    *(_OWORD *)(a1 + 14256) = 0u;
    *(_OWORD *)(a1 + 14240) = 0u;
    *(_OWORD *)(a1 + 14224) = 0u;
    *(_OWORD *)(a1 + 14208) = 0u;
    *(_DWORD *)(a2 + 1876) = 2;
    if (!*(unsigned char *)(v157 + 444)) {
      ++*(_WORD *)(v157 + 446);
    }
    uint64_t v178 = 0;
    *(unsigned char *)(v157 + 444) = 1;
    *(void *)&long long v179 = 0x1111111111111111;
    *((void *)&v179 + 1) = 0x1111111111111111;
    *(_OWORD *)(v157 + 448) = v179;
    *(_OWORD *)(v157 + 464) = v179;
    *(_OWORD *)(v157 + 480) = v179;
    *(_OWORD *)(v157 + 496) = v179;
    *(_OWORD *)(v157 + 512) = v179;
    *(_OWORD *)(v157 + 528) = v179;
    *(_OWORD *)(v157 + 544) = v179;
    *(_OWORD *)(v157 + 560) = v179;
    do
    {
      *(_DWORD *)(v157 + 576 + v178) = *(_DWORD *)a2;
      v178 += 4;
    }
    while (v178 != 512);
    EvCrt_v("ChanReset ALL : NKFC1  Num_Prob_Epochs %d  poss_reset %d  poss_root %d  Count %d", *(unsigned __int8 *)(a1 + 243), v153, v403, *(unsigned __int16 *)(v157 + 446));
    *(unsigned char *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 140) = 75;
    *(unsigned char *)(a1 + 243) = 0;
    *(unsigned char *)(a2 + 1864) = 0;
    *(_DWORD *)(v400 + 7000) = 0;
    *(_WORD *)(a1 + 240) = 256;
    *(_DWORD *)(a2 + 1868) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 1640) = 0;
    *(void *)(a2 + 1648) = 0;
    double *v392 = 0.0;
    if (*(int *)(a2 + 20) >= 6) {
      *(_DWORD *)(a2 + 20) = 5;
    }
    goto LABEL_407;
  }
  if (!*(_DWORD *)(v400 + 7000) && (v176 + 1) > 0x3Bu) {
    goto LABEL_345;
  }
LABEL_351:
  if (!*(_DWORD *)(v157 + 4) && (v379 < 0xFFFF0DCF || *(unsigned char *)(a1 + 241)))
  {
    if (*(int *)(a2 + 20) >= 10) {
      *(_DWORD *)(a2 + 20) = 9;
    }
    if (v177 < 2)
    {
      if ((v153 & 1) == 0)
      {
        if ((v176 + 1) <= 9u) {
          *(unsigned char *)(a1 + 243) = 10;
        }
        *(unsigned char *)(a2 + 1864) = 0;
        *(unsigned char *)(a1 + 240) = 0;
      }
      goto LABEL_407;
    }
    unsigned int v180 = (v176 + 1);
    if (v180 > 7)
    {
      BOOL v182 = 0;
    }
    else
    {
      if (v180 >= 6) {
        unsigned int v180 = 6;
      }
      if (*(unsigned char *)(a2 + 1864)) {
        uint64_t v176 = v180;
      }
      else {
        uint64_t v176 = v176;
      }
      unsigned int v181 = *(_DWORD *)(v404 + 1316) >> 4;
      BOOL v81 = v181 >= 0xC35;
      BOOL v182 = v181 < 0xC35;
      long long v183 = (unsigned __int8 *)&BN_Tolerance + v176;
      if (v81) {
        long long v183 = (unsigned __int8 *)&BN_Tolerance + v176 + 7;
      }
      if (v176 <= 2) {
        BOOL v182 = 0;
      }
      unsigned int v401 = *v183;
      if (v401 != 100)
      {
        BOOL v384 = v182;
        goto LABEL_388;
      }
    }
    if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a2 + 1864))
    {
      uint64_t v184 = 0;
      *(_OWORD *)(a1 + 14320) = 0u;
      *(_OWORD *)(a1 + 14304) = 0u;
      *(_OWORD *)(a1 + 14288) = 0u;
      *(_OWORD *)(a1 + 14272) = 0u;
      *(_OWORD *)(a1 + 14256) = 0u;
      *(_OWORD *)(a1 + 14240) = 0u;
      *(_OWORD *)(a1 + 14224) = 0u;
      *(_OWORD *)(a1 + 14208) = 0u;
      do
      {
        uint64_t v185 = v154 + 4 * v184;
        int v186 = *(_DWORD *)(v185 + 96);
        if (Is_Legal(v186) && *(int *)(v185 + 1248) >= 4)
        {
          *(unsigned char *)(a4 + (int)GNSS_Id_To_Num_Prn_Idx(v186) + 8) = 1;
          *(unsigned char *)(a4 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)(v185 + 96)) + 226) = v184;
        }
        ++v184;
      }
      while (v184 != 128);
      uint64_t v157 = a4;
      if (!*(unsigned char *)(a4 + 444)) {
        ++*(_WORD *)(a4 + 446);
      }
      uint64_t v187 = 0;
      *(unsigned char *)(a4 + 444) = 1;
      *(void *)&long long v188 = 0x1111111111111111;
      *((void *)&v188 + 1) = 0x1111111111111111;
      *(_OWORD *)(a4 + 448) = v188;
      *(_OWORD *)(a4 + 464) = v188;
      *(_OWORD *)(a4 + 480) = v188;
      *(_OWORD *)(a4 + 496) = v188;
      *(_OWORD *)(a4 + 512) = v188;
      *(_OWORD *)(a4 + 528) = v188;
      *(_OWORD *)(a4 + 544) = v188;
      *(_OWORD *)(a4 + 560) = v188;
      do
      {
        *(_DWORD *)(a4 + 576 + v187) = *(_DWORD *)a2;
        v187 += 4;
      }
      while (v187 != 512);
      EvCrt_v("ChanReset ALL : NKFC2  Num_Prob_Epochs %d  silly_altit %d  SuffPosEverSet %d  Count %d", *(unsigned __int8 *)(a1 + 243), v379 < 0xFFFF0DCF, *(unsigned __int8 *)(a1 + 28), *(unsigned __int16 *)(a4 + 446));
      *(_DWORD *)(a2 + 1876) = 2;
      *(unsigned char *)(a1 + 243) = 0;
      *(_DWORD *)(a2 + 1868) = 0;
      goto LABEL_407;
    }
    BOOL v384 = v182;
    unsigned int v401 = 100;
LABEL_388:
    uint64_t v189 = 0;
    char v190 = 0;
    unsigned __int8 v191 = 0;
    unsigned __int8 v192 = 0;
    uint64_t v391 = v157 + 576;
    do
    {
      if (*(unsigned char *)(a2 + 7064 + v189))
      {
        unsigned int v193 = *(unsigned __int8 *)(v154 + v189 + 1760);
        if (v193 <= v191 || v191 == 0)
        {
          unsigned __int8 v192 = v189;
          unsigned __int8 v191 = *(unsigned char *)(v154 + v189 + 1760);
        }
        if (v193 < v401)
        {
          uint64_t v195 = v154 + 4 * v189;
          int v196 = *(_DWORD *)(v195 + 96);
          int v197 = Is_Legal(v196);
          char v190 = 1;
          if (v197)
          {
            int v198 = GNSS_Id_To_Num_Prn_Idx(v196);
            *(unsigned char *)(a1 + 14208 + v189) = 0;
            uint64_t v199 = a4 + v198;
            *(unsigned char *)(v199 + 8) = 1;
            *(unsigned char *)(v199 + 226) = v189;
            *(unsigned char *)(a4 + v189 + 448) = 17;
            *(_DWORD *)(v391 + 4 * v189) = *(_DWORD *)a2;
            unint64_t v200 = *(unsigned int *)(v195 + 96);
            uint64_t v157 = a4;
            GNSS_SV_Str = Get_GNSS_SV_Str(v200);
            EvCrt_v("ChanReset %d : NKFC3  %s  SNR %d < %d tolerance,  problem_epochs %d", v189, GNSS_SV_Str, v193, v401, *(unsigned __int8 *)(a1 + 243));
            char v190 = 1;
            uint64_t v154 = v396;
          }
          else
          {
            uint64_t v154 = v396;
            uint64_t v157 = a4;
          }
        }
      }
      ++v189;
    }
    while (v189 != 128);
    if (v384 && (int v202 = v191, v191 >= v401))
    {
      uint64_t v203 = v154 + 4 * v192;
      int v206 = *(_DWORD *)(v203 + 96);
      unsigned __int8 v205 = (unsigned int *)(v203 + 96);
      int v204 = v206;
      uint64_t v155 = a2 + 61536;
      if (Is_Legal(v206))
      {
        int v207 = GNSS_Id_To_Num_Prn_Idx(v204);
        *(unsigned char *)(a1 + v192 + 14208) = 0;
        uint64_t v208 = a4 + v207;
        *(unsigned char *)(v208 + 8) = 1;
        *(unsigned char *)(v208 + 226) = v192;
        *(unsigned char *)(a4 + v192 + 448) = 17;
        uint64_t v157 = a4;
        *(_DWORD *)(a4 + 4 * v192 + 576) = *(_DWORD *)a2;
        uint64_t v209 = Get_GNSS_SV_Str(*v205);
        EvCrt_v("ChanReset %d : NKFC4  %s  reset_lowest:  lowest SNR %d >= %d tolerance", v192, v209, v202, v401);
      }
    }
    else
    {
      uint64_t v155 = a2 + 61536;
      if ((v190 & 1) == 0) {
        goto LABEL_407;
      }
    }
    *(_DWORD *)(a2 + 1876) = 1;
  }
LABEL_407:
  if (*(unsigned char *)(v157 + 444))
  {
    int v210 = *(unsigned __int16 *)(v157 + 446);
    if (*(_WORD *)(v157 + 446))
    {
      if (!*(_DWORD *)(a2 + 1872)
        && *(unsigned char *)(v14 + 72)
        && *(_DWORD *)(v14 + 76) == 1
        && (*(_DWORD *)(v14 + 80) - 3) <= 1)
      {
        *(_DWORD *)(v14 + 80) = 2;
        *(_DWORD *)(p_NA + 632) = 2;
        EvCrt_v("NK_Final_Check: Deprecating Ref Pos Trust to Low,  >= %d epochs with ChanReset ALL events during P2F", v210);
      }
    }
  }
  if (*(int *)(v404 + 492) < 4 || *(int *)(v404 + 496) < 4 || a6 != 2) {
    goto LABEL_431;
  }
  if (*(unsigned char *)(a1 + 136))
  {
    int v211 = 1;
    goto LABEL_437;
  }
  double v212 = *(double *)(v404 + 72) + *(double *)(v404 + 80);
  int v213 = *(_DWORD *)(a1 + 20);
  if (v212 >= 2.56)
  {
    if (v213 == 4 && v212 * 9.0 + v393 * v393 < 169.0) {
      goto LABEL_426;
    }
    if (v393 <= 26.0) {
      goto LABEL_431;
    }
LABEL_428:
    int v214 = 4;
    goto LABEL_429;
  }
  if (v393 > 13.0) {
    goto LABEL_428;
  }
  if (v393 > 3.0)
  {
LABEL_426:
    int v214 = 3;
    goto LABEL_429;
  }
  if (v393 < 1.5)
  {
    int v214 = 2;
LABEL_429:
    if (v214 != v213)
    {
      *(_DWORD *)(a1 + 20) = v214;
      NK_Set_Dynamics(*(void *)(a1 + 20), a1 + 32);
      NK_Set_XO_PN((uint64_t)a3, a1 + 32);
    }
  }
LABEL_431:
  int v211 = *(unsigned __int8 *)(a1 + 136);
  if (!*(unsigned char *)(a1 + 136))
  {
    if (*(double *)(v404 + 240) >= 3000.0 || *(double *)(v404 + 248) >= 3000.0 || *(double *)(v404 + 256) >= 3000.0)
    {
      int v211 = 0;
      *(unsigned char *)(a1 + 241) = 1;
    }
    else
    {
      int v211 = 0;
    }
  }
LABEL_437:
  if (v405)
  {
    Geo2ECEF((uint64_t)v398, (uint64_t)&WGS84_Datum, (double *)(a2 + 1560));
    int v211 = *(unsigned __int8 *)(a1 + 136);
  }
  if (!v211)
  {
    long long v220 = v414;
    double v221 = *((double *)&v413 + 1);
    int v222 = (double *)(v404 + 96);
    uint64_t v223 = -12;
    uint64_t v224 = (double *)v410;
    do
    {
      double v225 = *v224;
      if (*v224 > 0.0)
      {
        switch((int)v223)
        {
          case -12:
          case -11:
          case -10:
            double v225 = v225 + *(double *)(a1 + 15488);
            goto LABEL_464;
          case -9:
            double v225 = v225 + *(double *)(a1 + 15488) * 0.0001;
            goto LABEL_464;
          case -8:
            double v225 = v225 + *(double *)(a2 + 1552) * 0.01;
            goto LABEL_464;
          case -7:
LABEL_464:
            *int v222 = v225;
            break;
          case -6:
            *(void *)(v404 + 288) = *(void *)(a1 + 15520);
            *(double *)(v404 + 144) = *(double *)(v404 + 48) + *(double *)(a1 + 15496);
            break;
          case -5:
            *(double *)(v404 + 152) = *(double *)(v404 + 56) + *(double *)(a1 + 15504);
            break;
          case -4:
            *(double *)(v404 + 160) = *(double *)(v404 + 64) + *(double *)(a1 + 15512);
            break;
          case -3:
            *(double *)(v404 + 168) = v221 + *(double *)(a2 + 1552) * 0.0001;
            break;
          case -2:
            *(double *)(v404 + 176) = *(double *)&v220 + *(double *)(a2 + 1552) * 0.0001;
            break;
          case -1:
            *(double *)(v404 + 184) = *((double *)&v220 + 1) + *(double *)(a2 + 1552) * 0.0001;
            break;
          default:
            break;
        }
        v222[12] = sqrt(*v222);
      }
      ++v222;
      ++v224;
      BOOL v81 = __CFADD__(v223++, 1);
    }
    while (!v81);
  }
  if (!*(unsigned char *)(a2 + 1864)
    && *(unsigned char *)(v14 + 72)
    && *(unsigned char *)(v14 + 200)
    && ((*(_DWORD *)(v14 + 76) - 1) < 2 || *(unsigned char *)(a1 + 240)))
  {
    *(unsigned char *)(a2 + 1864) = 1;
  }
  unsigned int v215 = *(double *)(v155 + 48);
  if (v215 <= *(double *)(v155 + 56)) {
    unsigned int v215 = *(double *)(v155 + 56);
  }
  if (v215 <= *(double *)(v155 + 64)) {
    unsigned int v216 = *(double *)(v155 + 64);
  }
  else {
    unsigned int v216 = v215;
  }
  unsigned int v217 = *(unsigned __int8 *)(a1 + 243);
  if (!*(unsigned char *)(a1 + 243))
  {
    if (!v211) {
      goto LABEL_481;
    }
    goto LABEL_538;
  }
  if (v211)
  {
LABEL_538:
    int v226 = *(_DWORD *)(a2 + 1868);
    if (v226 >= 3) {
      goto LABEL_552;
    }
    if (v211 && *(_DWORD *)(a1 + 27136)) {
      *(_DWORD *)(a1 + 27136) = 0;
    }
    goto LABEL_542;
  }
  if (*v402 >= 4)
  {
    BOOL v218 = v216 > 0xC7 || *(unsigned char *)(v155 + 922) == 0;
    if (!v218 && v380 >= 5)
    {
      unsigned int v217 = 0;
      *(unsigned char *)(a1 + 243) = 0;
    }
  }
LABEL_481:
  int v226 = *(_DWORD *)(a2 + 1868);
  if (!((v226 > 2) | v405 & 1))
  {
    if (*(unsigned char *)(a1 + 241)) {
      goto LABEL_538;
    }
    int v227 = *(_DWORD *)(a2 + 20);
    if (v227 < 7 || !*(unsigned char *)(v155 + 922) || !v380) {
      goto LABEL_538;
    }
    unsigned int v228 = *v402;
    if ((v216 > 0x63 || v228 <= 3) && (v216 > 0x45 || v228 <= 2) && (v216 > 0x27 || v228 < 2)) {
      goto LABEL_538;
    }
    uint64_t v232 = 0;
    int v233 = 0;
    int v234 = 0;
    int v235 = 0;
    int v236 = 0;
    uint64_t v237 = a2 + 7064;
    uint64_t v39 = 1073215518;
    do
    {
      unsigned int v238 = *(_DWORD *)(v237 + 4 * v232 + 256);
      BOOL v47 = v238 > 0x1D;
      int v239 = (1 << v238) & 0x3FF7F81E;
      if (v47 || v239 == 0)
      {
        if (*(unsigned char *)(v237 + v232) && *(unsigned char *)(a2 + 57 + v232))
        {
          unsigned int v241 = *(unsigned __int8 *)(v154 + 1760 + v232);
          if (v241 > 0x21) {
            ++v236;
          }
          if (v241 > 0x17) {
            ++v235;
          }
          if (v241 > 0xA) {
            ++v234;
          }
        }
      }
      else
      {
        ++v233;
      }
      ++v232;
    }
    while (v232 != 128);
    if (v233 > 2) {
      goto LABEL_538;
    }
    int v242 = *(unsigned __int8 *)(v14 + 72);
    if (!*(unsigned char *)(v14 + 72)) {
      goto LABEL_531;
    }
    int v243 = *(_DWORD *)(v14 + 76);
    if (v243 == 2)
    {
      if (*(double *)(a2 + 60272) <= 900000000.0)
      {
        int v242 = 1;
        goto LABEL_531;
      }
    }
    else if (v243 == 1)
    {
      double v244 = *(double *)(a2 + 60272);
      if (v244 <= 8100000000.0)
      {
        if (v244 > 900000000.0) {
          int v242 = 1;
        }
        else {
          int v242 = 2;
        }
        if (v244 <= 9000000.0) {
          ++v242;
        }
LABEL_531:
        BOOL v245 = *(unsigned char *)(a2 + 60056) && *(_DWORD *)(a2 + 60060) == 1 && *(double *)(a2 + 60088) <= 900000000.0
            || v227 > 9;
        int v246 = v242 - v233 + v245;
        int v226 = 3;
        if (v246 + v236 > 3 || v246 + v235 > 4 || v246 + v234 > 5) {
          goto LABEL_551;
        }
        goto LABEL_538;
      }
    }
    int v242 = 0;
    goto LABEL_531;
  }
  if (v226 >= 3) {
    goto LABEL_552;
  }
LABEL_542:
  if (v217 >= 3 && v226 == 1) {
    goto LABEL_550;
  }
  BOOL v247 = v226 < 2 && v385 > 3;
  char v248 = v407;
  if (!v247) {
    char v248 = 0;
  }
  if (v248)
  {
LABEL_550:
    int v226 = 0;
    goto LABEL_551;
  }
  if (!v226 && v385 >= 3)
  {
    if (v217 > 2)
    {
      int v226 = 0;
      goto LABEL_552;
    }
    int v226 = 1;
LABEL_551:
    *(_DWORD *)(a2 + 1868) = v226;
  }
LABEL_552:
  uint64_t v249 = (double *)(a2 + 63440);
  if (a3[440] != -1)
  {
    if (v226 || *(_DWORD *)(a1 + 27120) < 0x258u)
    {
      if (v226 == 1 && v393 > 50.0)
      {
        uint64_t v251 = "NK_Final_Check: Reverting to 'Sky Search' Windows due to low position confidence, and apparent high user speed";
LABEL_563:
        *(unsigned char *)(a2 + 1864) = 0;
        EvCrt_v(v251);
      }
    }
    else if (!*(unsigned char *)(v14 + 72) {
           || (int v250 = *(_DWORD *)(v14 + 76), v250 != 1) && (v250 != 2 || *(double *)(a2 + 60248) >= 2500000000.0))
    }
    {
      uint64_t v251 = "NK_Final_Check: Reverting to 'Sky Search' Windows due to No Fix within 10 min";
      goto LABEL_563;
    }
  }
  if (*(int *)(v404 + 492) >= 4 && *(int *)(a2 + 1868) >= 1 && *(double *)(v155 + 472) <= 100.0) {
    a3[442] = 0;
  }
  unsigned int v252 = a3[440];
  if (v252)
  {
    uint64_t v253 = a3[442];
    if (v253)
    {
      unsigned int v254 = *(_DWORD *)(a2 + 4);
      if (v254 < v253)
      {
        EvCrt_nd("NK_Final_Check: OS ms Time seems to have gone backwards", 2, v39, *(unsigned int *)(a2 + 4), v253);
        goto LABEL_575;
      }
      if (v254 - v253 >= v252)
      {
        EvCrt_v("NK_Final_Check: Reverting to 'Sky Search' Windows due to No Fix within %d s", v252 / 0x3E8);
        *(unsigned char *)(a2 + 1864) = 0;
        if (!*(unsigned char *)(a2 + 24))
        {
          *(_DWORD *)(a2 + 20) = 0;
          int64x2_t v255 = vdupq_n_s64(0x42D7309374811100uLL);
          *(int64x2_t *)(a2 + 61344) = v255;
          *(int64x2_t *)(a2 + 61440) = v255;
          int64x2_t v256 = vdupq_n_s64(0x4163125300000000uLL);
          *(int64x2_t *)(a2 + 61536) = v256;
          *(int64x2_t *)(a2 + 61360) = v255;
          *(int64x2_t *)(a2 + 61456) = v255;
          *(int64x2_t *)(a2 + 61552) = v256;
          *(void *)(a2 + 61384) = 0x42D7309374811100;
          *(void *)(a2 + 61480) = 0x42D7309374811100;
          *(void *)(v155 + 40) = 0x4163125300000000;
        }
LABEL_575:
        a3[442] = 0;
      }
    }
  }
  if (*(unsigned char *)(a2 + 24)
    && *(_DWORD *)(a1 + 27136)
    && *(_DWORD *)(a1 + 27120) >= 0x3Du
    && *(double *)(v155 + 8) > 40000.0
    && *(double *)(v155 + 16) > 40000.0
    && *(double *)v155 > 40000.0)
  {
    *(unsigned char *)(a2 + 24) = 0;
  }
  if (v403 && !*(_DWORD *)(a2 + 1868)) {
    *(unsigned char *)(a1 + 240) = 0;
  }
  if ((*(int *)(v404 + 492) < 4 || *(int *)(a2 + 1868) < 1 || *(double *)(v155 + 472) > 400.0)
    && *(_DWORD *)(a1 + 27120))
  {
    if (!a3[455]) {
      a3[455] = *(_DWORD *)(v154 + 4);
    }
  }
  else
  {
    a3[455] = 0;
  }
  memcpy((void *)(a1 + 352), (const void *)(a1 + 976), 0x270uLL);
  if (*v397 > 150.0) {
    return;
  }
  if (!*(unsigned char *)(a2 + 63624)) {
    return;
  }
  int v257 = *(char *)(a2 + 63640);
  if (v257 < 2) {
    return;
  }
  if (!*(unsigned char *)(a1 + 27249))
  {
    int v258 = *(double *)(a1 + 27240) <= 17.0 ? 3000 : 5000;
    if (*(_DWORD *)a2 - *(_DWORD *)(a1 + 27336) < v258)
    {
      uint64_t v259 = (const double *)v155;
      uint64_t v260 = 27328;
      goto LABEL_604;
    }
  }
  uint64_t v259 = (const double *)v155;
  if (*(int *)(a1 + 27276) < 2)
  {
    uint64_t v261 = (double *)(a2 + 1856);
  }
  else
  {
    uint64_t v260 = 27280;
LABEL_604:
    uint64_t v261 = (double *)(a1 + v260);
  }
  double v262 = *v261;
  double v263 = *v261 * 0.0174532925;
  ECEF2FSD_RotM((const double (*)[3])(a2 + 1736), v263, (double (*)[3])v416);
  uint64_t v264 = 0;
  do
  {
    *((double *)&v421 + v264 + 2) = *(double *)(a2 + 1576 + 8 * v264) - *(double *)(a2 + 63352 + 8 * v264);
    unint64_t v265 = v264 + 3;
    --v264;
  }
  while (v265 > 1);
  uint64_t v266 = 0;
  long long v267 = v421;
  double v268 = v422;
  int v269 = &v416[2];
  do
  {
    double v270 = *(v269 - 1) * *((double *)&v267 + 1) + *(v269 - 2) * *(double *)&v267;
    double v271 = *v269;
    v269 += 3;
    *(double *)((char *)&v418 + v266) = v270 + v271 * v268;
    v266 += 8;
  }
  while (v266 != 24);
  if (g_Logging_Cfg >= 6)
  {
    unsigned int v272 = *(_DWORD *)(a1 + 148);
    if (v272 >= *(_DWORD *)(a1 + 152)) {
      unsigned int v272 = *(_DWORD *)(a1 + 152);
    }
    if (v272 >= *(_DWORD *)(a1 + 156)) {
      unsigned int v272 = *(_DWORD *)(a1 + 156);
    }
    BOOL v273 = v272 > 0xA;
    BOOL v274 = *(_DWORD *)(a1 + 27120) <= *(unsigned __int16 *)(a1 + 16) && *(_DWORD *)(a2 + 1872) == 1;
    EvLog_v("Lsq pos diff:  %3d (%d %3d %3d %3d)  %d%d  %d %f   F %4d %6d %8d    S %4d %6d %8d    D %4d %6d %8d    T %2d %3d   L %2d %f ", (int)v262, *(_DWORD *)(a1 + 27276), (int)*(double *)(a1 + 27328), (int)*(double *)(a1 + 27280), (int)*(double *)(a2 + 1856), v273, v274, *(_DWORD *)(a1 + 27204), *(double *)(a1 + 27216), (int)v418, (int)v397[19], (int)*(double *)(a1 + 27568), (int)v419, (int)v397[19], (int)*(double *)(a1 + 27568), (int)v420, (int)v397[20], (int)*(double *)(a1 + 27576),
      *(_DWORD *)(a1 + 27724),
      *(_DWORD *)(a1 + 27728),
      v257,
      v397[24]);
  }
  unsigned int v275 = *(_DWORD *)(a1 + 148);
  if (v275 >= *(_DWORD *)(a1 + 152)) {
    unsigned int v275 = *(_DWORD *)(a1 + 152);
  }
  if (v275 >= *(_DWORD *)(a1 + 156)) {
    unsigned int v275 = *(_DWORD *)(a1 + 156);
  }
  if (v275 < 0xB
    || *(_DWORD *)(a1 + 27120) > *(unsigned __int16 *)(a1 + 16)
    || *(_DWORD *)(a2 + 1872) != 1)
  {
    goto LABEL_655;
  }
  if (!*(unsigned char *)(a1 + 27249))
  {
    if (*(_DWORD *)(a1 + 27204) != 3)
    {
      double v276 = v418;
      if (v418 < -5.0)
      {
        int v277 = 3;
        int v278 = 8;
        goto LABEL_637;
      }
    }
    goto LABEL_655;
  }
  double v276 = v418;
  if (v418 >= -5.0)
  {
LABEL_655:
    int v279 = 0;
    *(_DWORD *)(a1 + 27724) = 0;
    goto LABEL_656;
  }
  int v277 = 18;
  int v278 = 48;
LABEL_637:
  int v279 = 0;
  int v280 = *(_DWORD *)(a1 + 27724);
  if (v280 + 1 < v278) {
    int v281 = v280 + 1;
  }
  else {
    int v281 = v278;
  }
  *(_DWORD *)(a1 + 27724) = v281;
  if (v281 >= v277 && v276 < -25.0)
  {
    double v282 = *(double *)(a2 + 63592) / *(double *)(a1 + 27568);
    double v283 = 0.0;
    double v284 = 1.0;
    if (v282 < 1.0)
    {
      double v283 = 1.0;
      if (v282 > 0.00000011920929)
      {
        NK_Get_Smooth_Excl_Weight(v282 * 0.5, 0.0, 1.0);
        double v283 = v285;
        int v281 = *(_DWORD *)(a1 + 27724);
      }
    }
    int v286 = v278 - v281;
    if (v286)
    {
      NK_Get_Smooth_Excl_Weight((double)v286, 0.0, (double)v278);
      double v284 = v287;
    }
    if (v283 * v284 <= 0.00000011920929)
    {
      int v279 = 0;
    }
    else
    {
      *(double *)v417 = *(double *)(a2 + 63592) / (v283 * v284);
      *(int64x2_t *)&v417[8] = vdupq_n_s64(0x412E848000000000uLL);
      *(_OWORD *)(a1 + 1600) = 0u;
      *(_OWORD *)(a1 + 1616) = 0u;
      *(_OWORD *)(a1 + 1632) = 0u;
      *(_OWORD *)(a1 + 1648) = 0u;
      *(_OWORD *)(a1 + 1664) = 0u;
      *(_OWORD *)(a1 + 1680) = 0u;
      NK_Body_Frame_Meas(6u, (double *)&v421, (const double *)v417, (const double (*)[3])(a2 + 1736), v262 * 0.0174532925, 0xCu, (double *)(a1 + 976));
      uint64_t v288 = 0;
      double v289 = *(double *)(a1 + 1600);
      double v290 = *(double *)(a1 + 1608);
      double v291 = *(double *)(a1 + 1616);
      long long v421 = *(_OWORD *)(a1 + 1648);
      double v422 = *(double *)(a1 + 1664);
      long long v292 = v421;
      double v293 = v422;
      long long v294 = &v416[2];
      do
      {
        double v295 = *(v294 - 1) * *((double *)&v292 + 1) + *(v294 - 2) * *(double *)&v292;
        double v296 = *v294;
        v294 += 3;
        *(double *)((char *)&v418 + v288) = v295 + v296 * v293;
        v288 += 8;
      }
      while (v288 != 24);
      uint64_t v297 = 0;
      double v420 = 0.0;
      double v419 = 0.0;
      double v298 = v418;
      do
      {
        *(double *)((char *)&v421 + v297 * 8) = v416[v297 + 3] * 0.0 + v416[v297] * v298 + v416[v297 + 6] * 0.0;
        ++v297;
      }
      while (v297 != 3);
      *(_OWORD *)(a1 + 1648) = v421;
      *(double *)(a1 + 1664) = v422;
      EvLog_v("Lsq pos meas: F  %2d %f %3d   %f %f   %6d %6d   Wt %f %f   ECEF %f %f %f", *(_DWORD *)(a1 + 27724), *(double *)(a1 + 27216), (int)v262, v276, v298, (int)*(double *)(a2 + 63592), (int)*(double *)(a1 + 27568), v283, v284, *(double *)&v421, *((double *)&v421 + 1), v422);
      NK_Correct_State((double *)(a1 + 1600), (unsigned char *)(a2 + 62452), (double *)v395);
      uint64_t v299 = 0;
      *(double *)(a1 + 25920) = v289 + *(double *)(a1 + 25920);
      *(double *)(a1 + 20112) = v290 + *(double *)(a1 + 20112);
      *(double *)(a1 + 20128) = v291 + *(double *)(a1 + 20128);
      int v279 = 1;
      do
      {
        *(double *)(a1 + 25928 + v299) = *(double *)(a1 + 25928 + v299) + *(double *)((char *)&v421 + v299);
        v299 += 8;
      }
      while (v299 != 24);
    }
  }
LABEL_656:
  unsigned int v300 = *(_DWORD *)(a1 + 148);
  if (v300 >= *(_DWORD *)(a1 + 152)) {
    unsigned int v300 = *(_DWORD *)(a1 + 152);
  }
  if (v300 >= *(_DWORD *)(a1 + 156)) {
    unsigned int v300 = *(_DWORD *)(a1 + 156);
  }
  if (v300 < 0xB
    || *(_DWORD *)(a1 + 27120) > *(unsigned __int16 *)(a1 + 16)
    || *(_DWORD *)(a2 + 1872) != 1)
  {
    goto LABEL_666;
  }
  if (*(unsigned char *)(a1 + 27249))
  {
    int v301 = 120;
    goto LABEL_747;
  }
  if (*(_DWORD *)(a1 + 27204) != 3)
  {
    int v301 = 20;
LABEL_747:
    double v355 = v419;
    int v356 = *(_DWORD *)(a1 + 27728);
    BOOL v357 = v356 > 0;
    if (v419 < 0.0)
    {
      int v358 = -1;
    }
    else
    {
      BOOL v357 = v356 < 0;
      int v358 = 1;
    }
    if (v357) {
      int v356 = 0;
    }
    int v359 = v356 + v358;
    *(_DWORD *)(a1 + 27728) = v359;
    int v360 = v301;
    if (v359 > v301 || (int v360 = -v301, v359 < -v301))
    {
      *(_DWORD *)(a1 + 27728) = v360;
      int v359 = v360;
    }
    if (v359 >= 0) {
      unsigned int v361 = v359;
    }
    else {
      unsigned int v361 = -v359;
    }
    if (fabs(v355) <= 10.0 || v361 < v301 >> 2) {
      goto LABEL_773;
    }
    double v362 = *(double *)(a2 + 63592) / *(double *)(a1 + 27568);
    double v363 = 0.0;
    double v364 = 1.0;
    if (v362 < 1.0)
    {
      double v363 = 1.0;
      if (v362 > 0.00000011920929)
      {
        NK_Get_Smooth_Excl_Weight(v362 * 0.5, 0.0, 1.0);
        double v363 = v365;
      }
    }
    if (v301 != v361)
    {
      NK_Get_Smooth_Excl_Weight((double)(int)(v301 - v361), 0.0, (double)v301);
      double v364 = v366;
    }
    if (v363 * v364 <= 0.00000011920929)
    {
LABEL_773:
      uint64_t v249 = (double *)(a2 + 63440);
      if (v279) {
        goto LABEL_667;
      }
      int v302 = 0;
    }
    else
    {
      *(void *)v417 = 0x412E848000000000;
      uint64_t v249 = (double *)(a2 + 63440);
      *(double *)&v417[8] = *(double *)(a2 + 63592) / (v363 * v364);
      *(void *)&v417[16] = 0x412E848000000000;
      *(_OWORD *)(a1 + 1680) = 0u;
      *(_OWORD *)(a1 + 1664) = 0u;
      *(_OWORD *)(a1 + 1648) = 0u;
      *(_OWORD *)(a1 + 1632) = 0u;
      *(_OWORD *)(a1 + 1616) = 0u;
      *(_OWORD *)(a1 + 1600) = 0u;
      NK_Body_Frame_Meas(6u, (double *)&v421, (const double *)v417, (const double (*)[3])(a2 + 1736), v262 * 0.0174532925, 0xCu, (double *)(a1 + 976));
      uint64_t v367 = 0;
      double v368 = *(double *)(a1 + 1600);
      double v369 = *(double *)(a1 + 1608);
      double v370 = *(double *)(a1 + 1616);
      long long v421 = *(_OWORD *)(a1 + 1648);
      double v422 = *(double *)(a1 + 1664);
      long long v371 = v421;
      double v372 = v422;
      double v373 = &v416[2];
      do
      {
        double v374 = *(v373 - 1) * *((double *)&v371 + 1) + *(v373 - 2) * *(double *)&v371;
        double v375 = *v373;
        v373 += 3;
        *(double *)((char *)&v418 + v367) = v374 + v375 * v372;
        v367 += 8;
      }
      while (v367 != 24);
      uint64_t v376 = 0;
      double v418 = 0.0;
      double v420 = 0.0;
      double v377 = v419;
      do
      {
        *(double *)((char *)&v421 + v376 * 8) = v416[v376 + 3] * v377 + v416[v376] * 0.0 + v416[v376 + 6] * 0.0;
        ++v376;
      }
      while (v376 != 3);
      *(_OWORD *)(a1 + 1648) = v421;
      *(double *)(a1 + 1664) = v422;
      EvLog_v("Lsq pos meas: S  %2d %f %3d   %f %f   %6d %6d   Wt %f %f   ECEF %f %f %f", *(_DWORD *)(a1 + 27728), *(double *)(a1 + 27216), (int)v262, v355, v377, (int)*(double *)(a2 + 63592), (int)*(double *)(a1 + 27568), v363, v364, *(double *)&v421, *((double *)&v421 + 1), v422);
      NK_Correct_State((double *)(a1 + 1600), (unsigned char *)(a2 + 62452), (double *)v395);
      uint64_t v378 = 0;
      *(double *)(a1 + 25920) = v368 + *(double *)(a1 + 25920);
      *(double *)(a1 + 20112) = v369 + *(double *)(a1 + 20112);
      *(double *)(a1 + 20128) = v370 + *(double *)(a1 + 20128);
      do
      {
        *(double *)(a1 + 25928 + v378) = *(double *)(a1 + 25928 + v378) + *(double *)((char *)&v421 + v378);
        v378 += 8;
      }
      while (v378 != 24);
LABEL_667:
      uint64_t v303 = 0;
      do
      {
        *((double *)&v421 + v303 + 2) = *(double *)(a2 + 1576 + 8 * v303) - *(double *)(a2 + 63352 + 8 * v303);
        unint64_t v304 = v303 + 3;
        --v303;
      }
      while (v304 > 1);
      uint64_t v305 = 0;
      long long v306 = v421;
      double v307 = v422;
      unint64_t v308 = &v416[2];
      do
      {
        double v309 = *(v308 - 1) * *((double *)&v306 + 1) + *(v308 - 2) * *(double *)&v306;
        double v310 = *v308;
        v308 += 3;
        *(double *)((char *)&v418 + v305) = v309 + v310 * v307;
        v305 += 8;
      }
      while (v305 != 24);
      int v302 = 1;
    }
  }
  else
  {
LABEL_666:
    int v302 = 0;
    *(_DWORD *)(a1 + 27728) = 0;
    if (v279) {
      goto LABEL_667;
    }
  }
  if ((*(_DWORD *)(a1 + 27204) & 0xFFFFFFFE) == 2) {
    double v311 = 3.5;
  }
  else {
    double v311 = 2.0;
  }
  double v312 = v418;
  double v313 = v419;
  double v314 = v311 * v249[19];
  double v315 = 9.9980001e13;
  if (v313 * v313 + v312 * v312 <= v314 * v314 || v314 >= *(double *)(a1 + 27568))
  {
    int v321 = 0;
  }
  else
  {
    *(int64x2_t *)v417 = vdupq_n_s64(0x4049000000000000uLL);
    *(void *)&v417[16] = 0x408F400000000000;
    *(_OWORD *)(a1 + 1600) = 0u;
    *(_OWORD *)(a1 + 1616) = 0u;
    *(_OWORD *)(a1 + 1632) = 0u;
    *(_OWORD *)(a1 + 1648) = 0u;
    *(_OWORD *)(a1 + 1664) = 0u;
    *(_OWORD *)(a1 + 1680) = 0u;
    NK_Body_Frame_Meas(6u, (double *)&v421, (const double *)v417, (const double (*)[3])(a2 + 1736), v263, 0xCu, (double *)(a1 + 976));
    double v316 = *(double *)(a1 + 1600);
    double v317 = *(double *)(a1 + 1608);
    double v318 = *(double *)(a1 + 1616);
    long long v421 = *(_OWORD *)(a1 + 1648);
    double v422 = *(double *)(a1 + 1664);
    EvLog_v("Lsq pos adj:  H  %4d %4d %4d   ARP  %6d %6d", (int)v312, (int)v313, (int)v420, (int)v249[19], (int)*(double *)(a1 + 27568));
    for (uint64_t k = 0; k != 24; k += 8)
      *(double *)(a2 + 1560 + k) = *(double *)(a2 + 1560 + k) - *(double *)((char *)&v421 + k);
    uint64_t v320 = 0;
    double *v392 = *v392 - v316 * 0.00000000333564095;
    double *v382 = *v382 - v317 * 0.00000000333564095;
    *uint64_t v381 = *v381 - v318 * 0.00000000333564095;
    *(double *)(a1 + 25920) = v316 + *(double *)(a1 + 25920);
    *(double *)(a1 + 20112) = v317 + *(double *)(a1 + 20112);
    *(double *)(a1 + 20128) = v318 + *(double *)(a1 + 20128);
    do
    {
      *(double *)(a1 + 25928 + v320) = *(double *)(a1 + 25928 + v320) + *(double *)((char *)&v421 + v320);
      v320 += 8;
    }
    while (v320 != 24);
    ++*(_WORD *)(a1 + 244);
    int v302 = 1;
    double v315 = 50.0;
    int v321 = 1;
  }
  double v322 = v420;
  double v323 = v311 * v249[20];
  if (v322 * v322 > v323 * v323 && v323 < *(double *)(a1 + 27576))
  {
    *(int64x2_t *)v417 = vdupq_n_s64(0x408F400000000000uLL);
    *(void *)&v417[16] = 0x4049000000000000;
    *(_OWORD *)(a1 + 1600) = 0u;
    *(_OWORD *)(a1 + 1616) = 0u;
    *(_OWORD *)(a1 + 1632) = 0u;
    *(_OWORD *)(a1 + 1648) = 0u;
    *(_OWORD *)(a1 + 1664) = 0u;
    *(_OWORD *)(a1 + 1680) = 0u;
    NK_Body_Frame_Meas(6u, (double *)&v421, (const double *)v417, (const double (*)[3])(a2 + 1736), v263, 0xCu, (double *)(a1 + 976));
    double v324 = *(double *)(a1 + 1600);
    double v325 = *(double *)(a1 + 1608);
    double v326 = *(double *)(a1 + 1616);
    long long v421 = *(_OWORD *)(a1 + 1648);
    double v422 = *(double *)(a1 + 1664);
    EvLog_v("Lsq pos adj:  V  %4d %4d %4d   ARP  %6d %6d", (int)v312, (int)v313, (int)v322, (int)v249[20], (int)*(double *)(a1 + 27576));
    for (uint64_t m = 0; m != 24; m += 8)
      *(double *)(a2 + 1560 + m) = *(double *)(a2 + 1560 + m) - *(double *)((char *)&v421 + m);
    uint64_t v328 = 0;
    double *v392 = *v392 - v324 * 0.00000000333564095;
    double *v382 = *v382 - v325 * 0.00000000333564095;
    *uint64_t v381 = *v381 - v326 * 0.00000000333564095;
    *(double *)(a1 + 25920) = v324 + *(double *)(a1 + 25920);
    *(double *)(a1 + 20112) = v325 + *(double *)(a1 + 20112);
    *(double *)(a1 + 20128) = v326 + *(double *)(a1 + 20128);
    do
    {
      *(double *)(a1 + 25928 + v328) = *(double *)(a1 + 25928 + v328) + *(double *)((char *)&v421 + v328);
      v328 += 8;
    }
    while (v328 != 24);
    ++*(_WORD *)(a1 + 244);
    uint64_t v249 = (double *)(a2 + 63440);
  }
  if (!v321) {
    goto LABEL_743;
  }
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(void *)&long long v426 = 0;
  if (R8_EQ(v392, (const double *)&v426)) {
    goto LABEL_704;
  }
  double v329 = *(double *)(a2 + 1632);
  uint64_t v330 = (double *)(v259 + 218);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 218, (const double *)&v426))
  {
    double v332 = v249[6] * v249[6];
    if (v332 >= v315) {
      double v332 = v315;
    }
LABEL_703:
    double v334 = *v330;
    double v408 = 0.0;
    memset(&v424[1], 0, 160);
    memset(&v423[1], 0, 88);
    v423[0] = 1.0;
    v424[0] = v329 * 299792458.0 - v334;
    umeas(a1 + 976, 0xCu, v332, v423, (double *)&v426, v425, &v408, 1.0e20);
    goto LABEL_704;
  }
  uint64_t v330 = (double *)(v259 + 220);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 220, (const double *)&v426))
  {
    double v331 = v249[7];
LABEL_700:
    double v333 = v331 * v331;
    if (v333 >= v315) {
      double v333 = v315;
    }
    double v332 = v333 + 25.0;
    goto LABEL_703;
  }
  uint64_t v330 = (double *)(v259 + 222);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 222, (const double *)&v426))
  {
    double v331 = v249[8];
    goto LABEL_700;
  }
LABEL_704:
  *(void *)&long long v426 = 0;
  if (R8_EQ(v382, (const double *)&v426)) {
    goto LABEL_717;
  }
  double v335 = *(double *)(a2 + 1640);
  uint64_t v336 = (double *)(v259 + 220);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 220, (const double *)&v426))
  {
    double v338 = v249[7] * v249[7];
    if (v338 >= v315) {
      double v338 = v315;
    }
LABEL_716:
    double v340 = *v336;
    double v408 = 0.0;
    memset(v424, 0, sizeof(v424));
    v423[0] = 0.0;
    memset(&v423[2], 0, 80);
    v423[1] = 1.0;
    v424[0] = v335 * 299792458.0 - v340;
    umeas(a1 + 976, 0xCu, v338, v423, (double *)&v426, v425, &v408, 1.0e20);
    goto LABEL_717;
  }
  uint64_t v336 = (double *)(v259 + 218);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 218, (const double *)&v426))
  {
    double v337 = v249[6];
LABEL_713:
    double v339 = v337 * v337;
    if (v339 >= v315) {
      double v339 = v315;
    }
    double v338 = v339 + 25.0;
    goto LABEL_716;
  }
  uint64_t v336 = (double *)(v259 + 222);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 222, (const double *)&v426))
  {
    double v337 = v249[8];
    goto LABEL_713;
  }
LABEL_717:
  *(void *)&long long v426 = 0;
  if (R8_EQ(v381, (const double *)&v426)) {
    goto LABEL_730;
  }
  double v341 = *(double *)(a2 + 1648);
  uint64_t v342 = (double *)(v259 + 222);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 222, (const double *)&v426))
  {
    double v344 = v249[8] * v249[8];
    if (v344 >= v315) {
      double v344 = v315;
    }
LABEL_729:
    double v346 = *v342;
    double v408 = 0.0;
    memset(v424, 0, sizeof(v424));
    memset(v423, 0, sizeof(v423));
    v423[2] = 1.0;
    v424[0] = v341 * 299792458.0 - v346;
    umeas(a1 + 976, 0xCu, v344, v423, (double *)&v426, v425, &v408, 1.0e20);
    goto LABEL_730;
  }
  uint64_t v342 = (double *)(v259 + 218);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 218, (const double *)&v426))
  {
    double v343 = v249[6];
LABEL_726:
    double v345 = v343 * v343;
    if (v345 >= v315) {
      double v345 = v315;
    }
    double v344 = v345 + 25.0;
    goto LABEL_729;
  }
  uint64_t v342 = (double *)(v259 + 220);
  *(void *)&long long v426 = 0;
  if (!R8_EQ(v259 + 220, (const double *)&v426))
  {
    double v343 = v249[7];
    goto LABEL_726;
  }
LABEL_730:
  double v347 = *(double *)(a1 + 1600);
  double v348 = *(double *)(a1 + 1608);
  double v349 = *(double *)(a1 + 1616);
  long long v421 = *(_OWORD *)(a1 + 1648);
  double v422 = *(double *)(a1 + 1664);
  *(void *)&long long v426 = 0;
  if (R8_EQ(v392, (const double *)&v426)) {
    int v350 = 0;
  }
  else {
    int v350 = (int)(v259[218] - *(double *)(a2 + 1632));
  }
  *(void *)&long long v426 = 0;
  if (R8_EQ(v382, (const double *)&v426)) {
    int v351 = 0;
  }
  else {
    int v351 = (int)(v259[220] - *(double *)(a2 + 1640));
  }
  *(void *)&long long v426 = 0;
  if (R8_EQ(v381, (const double *)&v426)) {
    int v352 = 0;
  }
  else {
    int v352 = (int)(v259[222] - *(double *)(a2 + 1648));
  }
  EvLog_v("Lsq Clk adj:  C  %4d %4d %4d   ARP  %6d %6d", v350, v351, v352, (int)*(double *)(a2 + 63608), (int)*(double *)(a1 + 27584));
  for (uint64_t n = 0; n != 24; n += 8)
    *(double *)(a2 + 1560 + n) = *(double *)(a2 + 1560 + n) - *(double *)((char *)&v421 + n);
  uint64_t v354 = 0;
  double *v392 = *v392 - v347 * 0.00000000333564095;
  double *v382 = *v382 - v348 * 0.00000000333564095;
  *uint64_t v381 = *v381 - v349 * 0.00000000333564095;
  *(double *)(a1 + 25920) = v347 + *(double *)(a1 + 25920);
  *(double *)(a1 + 20112) = v348 + *(double *)(a1 + 20112);
  *(double *)(a1 + 20128) = v349 + *(double *)(a1 + 20128);
  do
  {
    *(double *)(a1 + 25928 + v354) = *(double *)(a1 + 25928 + v354) + *(double *)((char *)&v421 + v354);
    v354 += 8;
  }
  while (v354 != 24);
LABEL_743:
  if (v302) {
    ECEF2Geo((double *)(a2 + 1560), (uint64_t)&WGS84_Datum, (uint64_t)v398);
  }
}

uint64_t NK_Final_Check_ClkBias(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  v37[1] = *(double *)MEMORY[0x263EF8340];
  v37[0] = 0.0;
  uint64_t v6 = a3 + 61344;
  int v34 = 0;
  __int16 v35 = 0;
  switch(result)
  {
    case 1:
      uint64_t v7 = 0;
      int v34 = 1;
      double v8 = *(double *)(a3 + 1632);
      v37[0] = v8;
      uint64_t v9 = (double *)(a3 + 61344);
      break;
    case 2:
      int v34 = 2;
      uint64_t v7 = 1;
      LOBYTE(v35) = 1;
      double v8 = *(double *)(a3 + 1640);
      v37[0] = v8;
      uint64_t v9 = (double *)(a3 + 61352);
      break;
    case 4:
      int v34 = 4;
      uint64_t v7 = 2;
      LOBYTE(v35) = 2;
      double v8 = *(double *)(a3 + 1648);
      v37[0] = v8;
      uint64_t v9 = (double *)(a3 + 61360);
      break;
    default:
      return result;
  }
  uint64_t v10 = (unsigned int *)(a3 + 63208);
  double v11 = *v9;
  double v36 = *v9;
  uint64_t v12 = *(char *)(a3 + 63212);
  if (v12 != -1)
  {
    double v33 = 0.0;
    uint64_t result = R8_EQ((const double *)(a3 + 63224), &v33);
    if ((result & 1) == 0)
    {
      double v32 = 0.0;
      uint64_t result = R8_EQ(v37, &v32);
      if ((result & 1) == 0)
      {
        int v14 = *(unsigned __int8 *)(a3 + 63213);
        if (v14 == 1)
        {
          return NK_Final_Check_ClkBias_Reset(v5, a2, a3);
        }
        double v15 = (*(double *)(a3 + 63224) - v8) * 299792458.0;
        if (v14 == 2)
        {
          NK_Final_Check_ClkBias_Reset(v5, a2, a3);
          return NK_Final_Check_ClkVar_Change(v5, (double *)a3, v15 * 0.333333333 * (v15 * 0.333333333));
        }
        double v16 = *(double *)(v6 + 440);
        if (v16 >= 25000000.0) {
          goto LABEL_59;
        }
        double v17 = *(double *)(v6 + 448);
        if (v17 >= 25000000.0) {
          goto LABEL_59;
        }
        double v18 = *(double *)(v6 + 456);
        if (v18 >= 25000000.0) {
          goto LABEL_59;
        }
        double v19 = *(double *)(a3 + 61736 + 8 * v12);
        double v20 = *(double *)(a3 + 61736 + 8 * v7);
        if (v19 >= 25000000.0 && v20 >= 25000000.0 && *(double *)(a3 + 8 * v12 + 61344) >= 25000000.0) {
          goto LABEL_59;
        }
        uint64_t v21 = 0;
        double v22 = v19 + v16 + 22500.0 + v17 + v18 + *(double *)(v6 + 432);
        char v23 = 1;
        while (1)
        {
          uint64_t v24 = v21;
          char v25 = v23;
          if (v23) {
            BOOL v26 = (unsigned int *)(a3 + 63208);
          }
          else {
            BOOL v26 = (unsigned int *)&v34;
          }
          unsigned int v27 = *v26;
          uint64_t v21 = 0;
          if (v27 > 7) {
            goto LABEL_38;
          }
          if (((1 << v27) & 0xEA) != 0)
          {
            uint64_t v21 = *(unsigned __int8 *)(v6 + 695);
          }
          else
          {
            if (v27 == 2)
            {
              unsigned int v28 = *(unsigned __int8 *)(v6 + 700);
              int v29 = *(_DWORD *)(v6 + 728);
LABEL_35:
              if (v29) {
                uint64_t v21 = v28 + 1;
              }
              else {
                uint64_t v21 = v28;
              }
              goto LABEL_38;
            }
            if (v27 == 4)
            {
              unsigned int v28 = *(unsigned __int8 *)(v6 + 705);
              int v29 = *(_DWORD *)(v6 + 732);
              goto LABEL_35;
            }
          }
LABEL_38:
          char v23 = 0;
          if ((v25 & 1) == 0)
          {
            double v30 = (v20 + v22) * 9.0;
            if (v15 * v15 > v30 || v11 >= 2496542160.0 || v24 >= 2 && !v21 && fabs(v15) >= 150.0)
            {
              EvLog_nd("NKFC:  Constellation Clock Bias deviation event ! ", 8, v13, *v10, v5, (int)v15, (int)sqrt(v30), v24, v21, (int)sqrt(v11), 49965);
              if (*(double *)(a3 + 63216) > 2496542160.0)
              {
                *(void *)(a3 + 63224) = 0;
                if (!*(unsigned char *)(a3 + 63213))
                {
                  NK_Final_Check_ClkBias_Reset(*v10, a2, a3);
                  *(unsigned char *)(a3 + 63213) = 1;
                }
              }
              if (v11 > 2496542160.0 || !v21)
              {
                v37[0] = 0.0;
                NK_Final_Check_ClkBias_Reset(v5, a2, a3);
              }
              double v33 = 0.0;
              uint64_t result = R8_EQ((const double *)(a3 + 63224), &v33);
              if ((result & 1) == 0)
              {
                double v32 = 0.0;
                uint64_t result = R8_EQ(v37, &v32);
                if ((result & 1) == 0)
                {
                  double v31 = v15 * 0.333333333 * (v15 * 0.333333333);
                  if (!*(unsigned char *)(a3 + 63213))
                  {
                    *(unsigned char *)(a2 + 136) = 1;
                    *(_DWORD *)(a2 + 140) = 70;
                    if (*(int *)(a3 + 20) >= 10) {
                      *(_DWORD *)(a3 + 20) = 9;
                    }
                    NK_Final_Check_ClkBias_Reset(*v10, a2, a3);
                    NK_Final_Check_ClkVar_Change(*v10, (double *)a3, v31);
                    *(unsigned char *)(a3 + 63213) = 2;
                  }
                  NK_Final_Check_ClkBias_Reset(v5, a2, a3);
                  uint64_t result = NK_Final_Check_ClkVar_Change(v5, (double *)a3, v31);
                }
              }
              int v14 = *(unsigned __int8 *)(a3 + 63213);
            }
            if (!v14) {
LABEL_59:
            }
              *(unsigned char *)(a3 + 63213) = 3;
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t NK_Final_Check_ClkBias_Reset(uint64_t result, uint64_t a2, uint64_t a3)
{
  switch(result)
  {
    case 4:
      *(void *)(a3 + 1648) = 0;
      *(unsigned char *)(a3 + 1682) = 0;
      *(void *)(a2 + 20128) = 0;
      *(unsigned char *)(a2 + 20120) = 0;
      break;
    case 2:
      *(void *)(a3 + 1640) = 0;
      *(unsigned char *)(a3 + 1681) = 0;
      *(void *)(a2 + 20112) = 0;
      *(unsigned char *)(a2 + 20106) = 0;
      break;
    case 1:
      *(void *)(a3 + 1632) = 0;
      *(unsigned char *)(a3 + 1680) = 0;
      *(void *)(a2 + 25920) = 0;
      *(unsigned char *)(a2 + 20104) = 0;
      break;
  }
  return result;
}

uint64_t NK_Final_Check_ClkVar_Change(uint64_t result, double *a2, double a3)
{
  switch(result)
  {
    case 4:
      a2[7670] = a2[7670] + a3;
      double v4 = a2[7682] + a3;
      a2[7682] = v4;
      a2[7694] = sqrt(v4);
      break;
    case 2:
      a2[7669] = a2[7669] + a3;
      double v5 = a2[7681] + a3;
      a2[7681] = v5;
      a2[7693] = sqrt(v5);
      break;
    case 1:
      a2[7668] = a2[7668] + a3;
      double v3 = a2[7680] + a3;
      a2[7680] = v3;
      a2[7692] = sqrt(v3);
      break;
  }
  return result;
}

uint64_t GLON_AlmBin2Int(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  unsigned int v2 = *(_DWORD *)(result + 16);
  *(unsigned char *)(a2 + 10) = (*(_DWORD *)(result + 12) >> 19) & 0x1F;
  *(unsigned char *)(a2 + 11) = (*(_DWORD *)(result + 32) >> 20) & 0x1F;
  int v3 = (v2 >> 2) & 0x3FFFF;
  if ((v2 & 0x80000) != 0) {
    int v3 = (v3 ^ 0xFFFDFFFF) + 1;
  }
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = *(_DWORD *)(result + 28);
  if ((v4 & 0x200000) != 0) {
    int v5 = (v4 & 0x3FFFFF ^ 0xFFDFFFFF) + 1;
  }
  else {
    int v5 = v4 & 0x3FFFFF;
  }
  *(_DWORD *)(a2 + 24) = v5;
  int v6 = *(_DWORD *)(result + 32);
  unsigned int v7 = v6 >> 25;
  if (v6 < 0) {
    LOBYTE(v7) = ((v6 >> 25) ^ 0xBF) + 1;
  }
  *(unsigned char *)(a2 + 28) = v7;
  int v8 = *(_DWORD *)(result + 24);
  int v9 = 32 * v8;
  __int16 v10 = v8 >> 11;
  if (((v9 >> 16) & 0x8000) != 0) {
    __int16 v10 = (v10 ^ 0x7FFF) + 1;
  }
  *(_WORD *)(a2 + 32) = v10;
  unsigned int v11 = *(_DWORD *)(result + 12);
  unsigned int v12 = *(_DWORD *)(result + 16);
  int v13 = (v11 >> 9) & 0x3FF;
  if ((v11 & 0x40000) != 0) {
    LOWORD(v13) = (v13 ^ 0xFDFF) + 1;
  }
  *(_WORD *)(a2 + 34) = v13;
  *(unsigned char *)(a2 + 36) = (v11 & 0x4000000) != 0;
  *(unsigned char *)(a2 + 37) = HIBYTE(v11) & 3;
  *(unsigned char *)(a2 + 38) = (v6 & 0x80000) != 0;
  unsigned int v14 = (v12 >> 20) & 0xFFE00FFF | ((v11 & 0x1FF) << 12);
  if ((v11 & 0x100) != 0) {
    unsigned int v14 = (v14 ^ 0xFFEFFFFF) + 1;
  }
  *(_DWORD *)(a2 + 12) = v14;
  int v15 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 30) = (*(_DWORD *)(result + 20) >> 19) & 0x9FFF | ((*(_WORD *)(result + 16) & 3) << 13);
  *(_DWORD *)(a2 + 16) = (v15 & 0x7FF) << 10;
  *(_DWORD *)(a2 + 16) = (*(_DWORD *)(result + 28) >> 22) & 0xFFE003FF | ((v15 & 0x7FF) << 10);
  return result;
}

uint64_t GLON_AlmInt2Bin(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 10);
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  unsigned int v3 = (((v2 - 1 - 5 * (((26215 * (v2 - 1)) >> 17) + ((26215 * (v2 - 1)) >> 31))) << 28)
      + 805306368) & 0x70000000;
  unsigned int v4 = ((v2 & 0x1F) << 19) & 0xFCFFFFFF | ((*(unsigned char *)(result + 37) & 3) << 24) | v3 | (*(unsigned __int8 *)(result + 36) << 26);
  __int16 v5 = *(_WORD *)(result + 34);
  if ((v5 & 0x200) != 0) {
    __int16 v5 = -v5 | 0x200;
  }
  unsigned int v6 = v4 & 0xFFF801FF | ((v5 & 0x3FF) << 9);
  *(_DWORD *)(a2 + 12) = v6;
  unsigned int v7 = *(_DWORD *)(result + 12);
  if ((v7 & 0x100000) != 0) {
    unsigned int v7 = -v7 | 0x100000;
  }
  *(_DWORD *)(a2 + 12) = v6 & 0xFFFFFE00 | (v7 >> 12) & 0x1FF;
  *(_DWORD *)(a2 + 16) = v7 << 20;
  int v8 = *(_DWORD *)(result + 20);
  if ((v8 & 0x20000) != 0) {
    int v8 = -v8 | 0x20000;
  }
  unsigned int v9 = *(unsigned __int16 *)(result + 30);
  *(_DWORD *)(a2 + 16) = (v9 >> 13) & 3 | (4 * (v8 & 0x3FFFF)) & 0xFFFFF | ((unsigned __int16)v7 << 20);
  *(_DWORD *)(a2 + 20) = v9 << 19;
  unsigned __int16 v10 = *(_WORD *)(result + 32);
  if ((v10 & 0x8000) != 0) {
    unsigned __int16 v10 = -v10 | 0x8000;
  }
  unsigned int v11 = v3 & 0xF80007FF | (v10 << 11) | 0x8000000;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 24) = v11 & 0xFFFFF800 | (*(_DWORD *)(result + 16) >> 10) & 0x7FF;
  int v12 = *(_DWORD *)(result + 16) << 22;
  *(_DWORD *)(a2 + 28) = v12;
  int v13 = *(_DWORD *)(result + 24);
  if ((v13 & 0x200000) != 0) {
    int v13 = -v13 | 0x200000;
  }
  unsigned int v14 = v12 & 0xFFC00000 | v13 & 0x3FFFFF;
  int v15 = *(unsigned __int8 *)(result + 28);
  if ((v15 & 0x40) != 0) {
    int v15 = -v15 | 0x40;
  }
  int v16 = ((*(unsigned char *)(result + 11) & 0x1F) << 20) | (v15 << 25) | (*(unsigned __int8 *)(result + 38) << 19);
  *(_DWORD *)(a2 + 28) = v14;
  *(_DWORD *)(a2 + 32) = v16;
  return result;
}

void Comp_ErrorEllipse(double a1, double a2, double a3, double *a4, double *a5, double *a6)
{
  double v12 = a1 - a2;
  if (a1 - a2 >= 0.0 && a1 - a2 <= 0.0 && fabs(a3) <= a1 * 0.0001)
  {
    *a6 = 0.0;
    double v24 = sqrt(a1);
    *a4 = v24;
    *a5 = v24;
    return;
  }
  double v13 = atan2(a3 + a3, v12) * 0.5;
  __double2 v15 = __sincos_stret(v13);
  double cosval = v15.__cosval;
  double v16 = v13 * 57.2957795;
  double v17 = cosval * cosval;
  double v18 = v15.__sinval * (cosval + cosval) * a3;
  double v19 = a2 + cosval * cosval * v12 + v18;
  double v20 = a1 - v17 * v12 - v18;
  if (v19 < 0.000001) {
    double v19 = 0.000001;
  }
  if (v20 < 0.000001) {
    double v20 = 0.000001;
  }
  if (v19 > v20)
  {
    double v21 = v19;
  }
  else
  {
    double v16 = v16 + 90.0;
    double v21 = v20;
  }
  if (v19 <= v20) {
    double v20 = v19;
  }
  *a6 = v16;
  *a4 = sqrt(v21);
  *a5 = sqrt(v20);
  double v22 = *a6;
  double v23 = 180.0;
  if (*a6 >= 180.0)
  {
    double v23 = -180.0;
    goto LABEL_17;
  }
  if (v22 < 0.0) {
LABEL_17:
  }
    *a6 = v22 + v23;
}

uint64_t Decode_BDS_B1C_SISA(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 131) = (bswap32(*(unsigned __int16 *)(result + 1)) >> 20) & 0x1F;
  *(_DWORD *)(a2 + 28) = ((*(unsigned __int8 *)(result + 3) | (*(unsigned __int8 *)(result + 2) << 8)) >> 1) & 0x7FF;
  *(unsigned char *)(a2 + 128) = (bswap32(*(unsigned __int16 *)(result + 3)) >> 20) & 0x1F;
  *(unsigned char *)(a2 + 129) = (*(unsigned char *)(result + 4) >> 1) & 7;
  *(unsigned char *)(a2 + 130) = (bswap32(*(unsigned __int16 *)(result + 4)) >> 22) & 7;
  return result;
}

double NK_Comp_DR_Res(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  v20[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v18 = a3 + 36560;
  uint64_t v17 = a3 + 2144;
  __int16 v5 = (void *)(a2 + 21184);
  uint64_t v6 = a2 + 24256;
  uint64_t v7 = a2 + 24768;
  uint64_t v8 = a2 + 68336;
  uint64_t v9 = a1 + 96;
  unsigned __int16 v10 = (double *)(a3 + 51592);
  uint64_t v11 = a3 + 6936;
  uint64_t v14 = a3 + 64032;
  uint64_t v12 = a3 + 36616;
  uint64_t v19 = a3 + 52616;
  uint64_t v16 = a3 + 11032;
  do
  {
    if (Is_Legal(*(_DWORD *)(v9 + 4 * v4)))
    {
      if (*(unsigned char *)(v12 + v4))
      {
        if (*(_DWORD *)(a3 + 20) == 11 && !*(unsigned char *)(v19 + v4))
        {
          if (*(unsigned char *)(v6 + v4))
          {
            v20[0] = 0.0;
            NK_Comp_ith_DR_Res(v4, v17, v18, v20, *(double *)(a3 + 8 * v4 + 208), *v10, *(double *)(v16 + 8 * v4), *(double *)(a3 + 1552), *(double *)(v7 + 8 * v4));
            v10[3107] = v10[2851] - *(double *)(v8 + 8 * v4);
            if (*(unsigned char *)(v12 + v4 + 256)) {
              *(unsigned char *)(v14 + v4) = 1;
            }
          }
        }
      }
    }
    if (*(unsigned char *)(v11 + v4))
    {
      *(double *)(v7 + 8 * v4) = *v10;
      *(unsigned char *)(v6 + v4) = 1;
      *(double *)(v8 + 8 * v4) = v10[2851];
    }
    else
    {
      *(void *)(v7 + 8 * v4) = 0;
      *(unsigned char *)(v6 + v4) = 0;
      *__int16 v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    ++v4;
    v5 += 3;
    ++v10;
  }
  while (v4 != 128);
  *(void *)(a2 + 20152) = *(void *)(a3 + 1552);
  *(void *)(a2 + 15592) = *(void *)(a2 + 15544);
  double result = *(double *)(a2 + 15576);
  *(double *)(a2 + 15600) = result;
  return result;
}

uint64_t Gnm08_zxDataHandler(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_RX_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm08_zxDataHandler");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 24);
      if (g_LbsOsaTrace_Config > 3)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Recvd zx%c%c%c,Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm08_zxDataHandler", *(char *)(v3 + 2), *(char *)(v3 + 3), *(char *)(v3 + 4), v4);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      int v6 = *(unsigned __int16 *)(v3 + v4 - 3);
      if ((_WORD)v4 == 11)
      {
        unsigned __int16 v8 = 0;
      }
      else
      {
        uint64_t v7 = 0;
        unsigned __int16 v8 = 0;
        do
          v8 += *(unsigned __int8 *)(v3 + v7++ + 8);
        while ((unsigned __int16)(v4 - 11) != v7);
        if (v6 == v8)
        {
          int v9 = *(unsigned __int8 *)(v3 + 2);
          switch(v9)
          {
            case 'B':
              if (*(unsigned char *)(v3 + 3) == 89 && *(unsigned char *)(v3 + 4) == 77) {
                Gnm10_zxGnssInitRsp((unsigned __int8 *)v3);
              }
              goto LABEL_24;
            case 'D':
              Gnm35_zxFirmwareDebugConf((unsigned __int8 *)v3);
              goto LABEL_24;
            case 'X':
              Gnm55_HandleXMessages((unsigned __int8 *)v3, v4);
LABEL_24:
              free((void *)v3);
              return 0;
          }
          if (g_LbsOsaTrace_Config < 2) {
            goto LABEL_24;
          }
          bzero(__str, 0x3C6uLL);
          uint64_t v16 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Message not handled\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 87, "Gnm08_zxDataHandler");
          int v14 = 2;
LABEL_23:
          gnssOsa_PrintLog(__str, v14, 1, 0);
          goto LABEL_24;
        }
      }
      if (!g_LbsOsaTrace_Config) {
        goto LABEL_24;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx zx chksum %u, computed %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm08_zxDataHandler", 771, v6, v8);
      int v14 = 1;
      goto LABEL_23;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm08_zxDataHandler", 770);
      int v11 = 2;
      goto LABEL_19;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm08_zxDataHandler", 517);
    int v11 = 1;
LABEL_19:
    gnssOsa_PrintLog(__str, v11, 1, 0);
  }
  return 0;
}

BOOL KFSt_DMeas_Update(unsigned int a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, double *a5, _WORD *a6, double a7)
{
  v19[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a4 + 1) < 1) {
    return 0;
  }
  a4[16] = 0;
  if (*a4)
  {
    double v10 = *((double *)a4 + 4);
    double v11 = a7 - *((double *)a4 + 3);
    memset(v16, 0, sizeof(v16));
    double v15 = 0.0;
    *((double *)a4 + 6) = v11;
    uint64_t v17 = 0;
    *((void *)v16 + a1) = 0x3FF0000000000000;
    *((void *)v16 + a2) = 0xBFF0000000000000;
    *((double *)v16 + a3) = v11;
    umeas((BOOL)a5, a3, v10, (double *)v16, v19, v18, &v15, *((double *)a4 + 7));
    double v12 = v15;
    if (v15 <= 0.0)
    {
      int v13 = 0;
      *a4 = 0;
      a4[16] = 1;
      ++*a6;
    }
    else
    {
      double v12 = *((double *)a4 + 4) * (v15 * (v19[a3] * v19[a3]));
      int v13 = *a4;
    }
    *((double *)a4 + 8) = v12;
  }
  else
  {
    int v13 = 0;
  }
  return v13 != 0;
}

int8x8_t GLON_EphBin2Int(uint64_t a1, uint64_t a2, int32x4_t a3)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 56);
  *(unsigned char *)(a2 + 24) = *(_DWORD *)(a1 + 52) >> 27;
  int v4 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a2 + 25) = (*(_DWORD *)(a1 + 12) >> 23) & 3;
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(a2 + 26) = (*(_DWORD *)(a1 + 24) & 0x800000) != 0;
  *(unsigned char *)(a2 + 27) = (v3 >> 19) & 3;
  unsigned int v6 = (v5 >> 19) & 0xF8001FFF | ((v4 & 0x3FFF) << 13);
  if ((v4 & 0x2000) != 0) {
    unsigned int v6 = (v6 ^ 0xFBFFFFFF) + 1;
  }
  *(_DWORD *)(a2 + 28) = v6;
  int v8 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  int v9 = (v7 >> 14) & 0x1F;
  if ((v7 & 0x40000) != 0) {
    LOBYTE(v9) = (v9 ^ 0xEF) + 1;
  }
  *(unsigned char *)(a2 + 52) = v9;
  unsigned int v10 = (v7 >> 19) & 0xFF001FFF | ((v8 & 0x7FF) << 13);
  if ((v8 & 0x400) != 0) {
    unsigned int v10 = (v10 ^ 0xFF7FFFFF) + 1;
  }
  *(_DWORD *)(a2 + 40) = v10;
  if ((*(_DWORD *)(a1 + 28) & 0x2000) != 0) {
    unsigned int v11 = (((*(_DWORD *)(a1 + 32) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 28) & 0x3FFF) << 13)) ^ 0xFBFFFFFF) + 1;
  }
  else {
    unsigned int v11 = (*(_DWORD *)(a1 + 32) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 28) & 0x3FFF) << 13);
  }
  *(_DWORD *)(a2 + 32) = v11;
  int v13 = *(_DWORD *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  int v14 = (v12 >> 14) & 0x1F;
  if ((v12 & 0x40000) != 0) {
    LOBYTE(v14) = (v14 ^ 0xEF) + 1;
  }
  *(unsigned char *)(a2 + 53) = v14;
  unsigned int v15 = (v12 >> 19) & 0xFF001FFF | ((v13 & 0x7FF) << 13);
  if ((v13 & 0x400) != 0) {
    unsigned int v15 = (v15 ^ 0xFF7FFFFF) + 1;
  }
  *(_DWORD *)(a2 + 44) = v15;
  if ((*(_DWORD *)(a1 + 40) & 0x2000) != 0) {
    unsigned int v16 = (((*(_DWORD *)(a1 + 44) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 40) & 0x3FFF) << 13)) ^ 0xFBFFFFFF) + 1;
  }
  else {
    unsigned int v16 = (*(_DWORD *)(a1 + 44) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 40) & 0x3FFF) << 13);
  }
  *(_DWORD *)(a2 + 36) = v16;
  int v18 = *(_DWORD *)(a1 + 36);
  unsigned int v17 = *(_DWORD *)(a1 + 40);
  int v19 = (v17 >> 14) & 0x1F;
  if ((v17 & 0x40000) != 0) {
    LOBYTE(v19) = (v19 ^ 0xEF) + 1;
  }
  *(unsigned char *)(a2 + 54) = v19;
  unsigned int v20 = (v17 >> 19) & 0xFF001FFF | ((v18 & 0x7FF) << 13);
  if ((v18 & 0x400) != 0) {
    unsigned int v20 = (v20 ^ 0xFF7FFFFF) + 1;
  }
  *(_DWORD *)(a2 + 48) = v20;
  unsigned int v21 = *(_DWORD *)(a1 + 48);
  if ((v21 & 0x4000000) != 0) {
    int v22 = ((v21 >> 5) & 0x3FFFFF ^ 0xFFDFFFFF) + 1;
  }
  else {
    int v22 = (v21 >> 5) & 0x3FFFFF;
  }
  *(_DWORD *)(a2 + 56) = v22;
  unsigned int v23 = *(_DWORD *)(a1 + 36);
  int v24 = (v23 >> 15) & 0x7FF;
  if ((v23 & 0x2000000) != 0) {
    LOWORD(v24) = (v24 ^ 0xFBFF) + 1;
  }
  *(_WORD *)(a2 + 60) = v24;
  int v25 = *(_DWORD *)(a1 + 48);
  if ((v25 & 0x10) != 0) {
    char v26 = (v25 & 0x1F ^ 0xEF) + 1;
  }
  else {
    char v26 = v25 & 0x1F;
  }
  *(unsigned char *)(a2 + 55) = v26;
  *(_WORD *)(a2 + 14) = (*(_DWORD *)(a1 + 12) >> 11) & 0xFFF;
  unsigned int v27 = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(a2 + 13) = BYTE2(v27) & 0x7F;
  a3.i64[0] = __PAIR64__(v23, v27);
  int16x8_t v28 = (int16x8_t)vshlq_u32((uint32x4_t)vzip1q_s32(a3, vdupq_lane_s32((int32x2_t)__PAIR64__(v23, v27), 1)), (uint32x4_t)xmmword_263D84620);
  *(int8x8_t *)v28.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v28), (int8x8_t)0x1000300010007);
  int8x8_t result = vmovn_s16(v28);
  *(_DWORD *)(a2 + 18) = result.i32[0];
  int v30 = *(_DWORD *)(a1 + 52);
  unsigned int v31 = *(_DWORD *)(a1 + 56);
  *(unsigned char *)(a2 + 22) = (v30 & 0x1000) != 0;
  *(unsigned char *)(a2 + 23) = BYTE1(v30) & 0xF;
  *(_WORD *)(a2 + 16) = (v31 >> 26) & 0x3F | ((v30 & 0x1F) << 6);
  *(unsigned char *)(a2 + 12) = (v31 >> 21) & 0x1F;
  return result;
}

uint64_t GLON_EphInt2Bin(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(void *)result;
  unsigned int v2 = ((*(_WORD *)(result + 14) & 0xFFF) << 11) & 0xFE7FFFFF | ((*(unsigned char *)(result + 25) & 3) << 23) | 0x8000000;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  *(_DWORD *)(a2 + 12) = v2;
  unsigned int v3 = *(_DWORD *)(result + 40);
  if ((v3 & 0x800000) != 0) {
    unsigned int v3 = -v3 | 0x800000;
  }
  unsigned int v4 = v2 & 0xFFFFF800 | (v3 >> 13) & 0x7FF;
  unsigned int v5 = v3 << 19;
  char v6 = *(unsigned char *)(result + 52);
  if ((v6 & 0x10) != 0) {
    char v6 = -v6 | 0x10;
  }
  unsigned int v7 = v5 & 0xFFF83FFF | ((v6 & 0x1F) << 14);
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v7;
  unsigned int v8 = *(_DWORD *)(result + 28);
  if ((v8 & 0x4000000) != 0) {
    unsigned int v8 = -v8 | 0x4000000;
  }
  *(_DWORD *)(a2 + 16) = v7 & 0xFFFFC000 | (v8 >> 13) & 0x3FFF;
  *(_DWORD *)(a2 + 20) = v8 << 19;
  int v9 = ((*(unsigned char *)(result + 18) & 7) << 24) | (*(unsigned __int8 *)(result + 26) << 23) | ((*(unsigned char *)(result + 13) & 0x7F) << 16) | 0x10000000;
  *(_DWORD *)(a2 + 24) = v9;
  unsigned int v10 = *(_DWORD *)(result + 44);
  if ((v10 & 0x800000) != 0) {
    unsigned int v10 = -v10 | 0x800000;
  }
  unsigned int v11 = v9 & 0xFFFFF800 | (v10 >> 13) & 0x7FF;
  unsigned int v12 = v10 << 19;
  char v13 = *(unsigned char *)(result + 53);
  if ((v13 & 0x10) != 0) {
    char v13 = -v13 | 0x10;
  }
  unsigned int v14 = v12 & 0xFFF83FFF | ((v13 & 0x1F) << 14);
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v14;
  unsigned int v15 = *(_DWORD *)(result + 32);
  if ((v15 & 0x4000000) != 0) {
    unsigned int v15 = -v15 | 0x4000000;
  }
  *(_DWORD *)(a2 + 28) = v14 & 0xFFFFC000 | (v15 >> 13) & 0x3FFF;
  *(_DWORD *)(a2 + 32) = v15 << 19;
  __int16 v16 = *(_WORD *)(result + 60);
  if ((v16 & 0x400) != 0) {
    __int16 v16 = -v16 | 0x400;
  }
  int v17 = ((v16 & 0x7FF) << 15) | (*(unsigned __int8 *)(result + 19) << 26) | ((*(unsigned char *)(result + 20) & 3) << 12) | (*(unsigned __int8 *)(result + 21) << 11) | 0x18000000;
  *(_DWORD *)(a2 + 36) = v17;
  unsigned int v18 = *(_DWORD *)(result + 48);
  if ((v18 & 0x800000) != 0) {
    unsigned int v18 = -v18 | 0x800000;
  }
  char v19 = *(unsigned char *)(result + 54);
  if ((v19 & 0x10) != 0) {
    char v19 = -v19 | 0x10;
  }
  unsigned int v20 = v17 & 0xFFFFF800 | (v18 >> 13) & 0x7FF;
  int v21 = (v18 << 19) | ((v19 & 0x1F) << 14);
  *(_DWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 40) = v21;
  unsigned int v22 = *(_DWORD *)(result + 36);
  if ((v22 & 0x4000000) != 0) {
    unsigned int v22 = -v22 | 0x4000000;
  }
  *(_DWORD *)(a2 + 40) = v21 & 0xFFFFC000 | (v22 >> 13) & 0x3FFF;
  *(_DWORD *)(a2 + 44) = v22 << 19;
  *(_DWORD *)(a2 + 48) = 0x20000000;
  int v23 = *(_DWORD *)(result + 56);
  if ((v23 & 0x200000) != 0) {
    int v23 = -v23 | 0x200000;
  }
  char v24 = *(unsigned char *)(result + 55);
  if ((v24 & 0x10) != 0) {
    char v24 = -v24 | 0x10;
  }
  int v25 = v24 & 0x1F | (32 * (v23 & 0x3FFFFF)) | 0x20000000;
  unsigned int v26 = *(unsigned __int16 *)(result + 16);
  int v27 = (*(unsigned __int8 *)(result + 24) << 27) | (*(unsigned __int8 *)(result + 22) << 12) | ((*(unsigned char *)(result + 23) & 0xF) << 8) | (v26 >> 6) & 0x1F;
  *(_DWORD *)(a2 + 48) = v25;
  *(_DWORD *)(a2 + 52) = v27;
  *(_DWORD *)(a2 + 56) = (v26 << 26) | ((*(unsigned char *)(result + 12) & 0x1F) << 21) | ((*(unsigned char *)(result + 27) & 3) << 19);
  return result;
}

void *DD_Delete_Bad_GAL_Data(void *result)
{
  uint64_t v1 = 0;
  uint64_t v2 = p_NV + 8024;
  uint64_t v3 = p_NV + 9752;
  unsigned int v4 = (char *)result + 24044;
  unsigned int v5 = (char *)result + 17708;
  do
  {
    uint64_t v6 = result[2200];
    if (*(unsigned char *)(v6 + v1))
    {
      *(unsigned char *)(v6 + v1) = 0;
      *(unsigned char *)(result[2198] + v1) = 0;
      *(unsigned char *)(result[2202] + v1) = 0;
      *((void *)v5 + 10) = 0;
      *((_OWORD *)v5 + 3) = 0uLL;
      *((_OWORD *)v5 + 4) = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)unsigned int v5 = 0uLL;
      *(unsigned char *)(result[2208] + v1) = 0;
      *(unsigned char *)(result[2205] + v1) = 1;
      *(void *)(v3 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v3 = 0uLL;
      *(_OWORD *)(v3 + 16) = 0uLL;
      *(_OWORD *)(v3 + 32) = 0uLL;
      *(_OWORD *)(v3 + 48) = 0uLL;
      *(_OWORD *)(v3 + 64) = 0uLL;
      *(void *)(v3 + 80) = 0;
    }
    uint64_t v7 = result[2201];
    if (*(unsigned char *)(v7 + v1))
    {
      *(unsigned char *)(v7 + v1) = 0;
      *(unsigned char *)(result[2199] + v1) = 0;
      *(unsigned char *)(result[2204] + v1) = 0;
      *(_DWORD *)(v4 + 31) = 0;
      *(_OWORD *)unsigned int v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *(unsigned char *)(result[2208] + v1) = 0;
      *(void *)(v2 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = 0uLL;
      *(_OWORD *)(v2 + 16) = 0uLL;
      *(_DWORD *)(v2 + 31) = 0;
    }
    ++v1;
    v2 += 48;
    v3 += 96;
    v4 += 36;
    v5 += 88;
  }
  while (v1 != 36);
  return result;
}

uint64_t DD_Delete_Inhib_GAL_Data(uint64_t result, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = p_NV + 9752;
  uint64_t v4 = p_NV + 8024;
  unsigned int v5 = (char *)a2 + 24044;
  uint64_t v6 = (char *)a2 + 17708;
  do
  {
    if (*(unsigned char *)(result + v2))
    {
      *(unsigned char *)(a2[2200] + v2) = 0;
      *(unsigned char *)(a2[2198] + v2) = 0;
      *(unsigned char *)(a2[2202] + v2) = 0;
      *((void *)v6 + 10) = 0;
      *((_OWORD *)v6 + 3) = 0uLL;
      *((_OWORD *)v6 + 4) = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      *((_OWORD *)v6 + 2) = 0uLL;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *(unsigned char *)(a2[2203] + v2) = 0;
      *((void *)v6 + 406) = 0;
      *((_OWORD *)v6 + 202) = 0uLL;
      *((_OWORD *)v6 + 201) = 0uLL;
      *((_OWORD *)v6 + 200) = 0uLL;
      *((_OWORD *)v6 + 199) = 0uLL;
      *((_OWORD *)v6 + 198) = 0uLL;
      *(unsigned char *)(a2[2208] + v2) = 0;
      *(unsigned char *)(a2[2205] + v2) = 1;
      *(void *)(v3 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v3 = 0uLL;
      *(_OWORD *)(v3 + 16) = 0uLL;
      *(_OWORD *)(v3 + 32) = 0uLL;
      *(_OWORD *)(v3 + 48) = 0uLL;
      *(_OWORD *)(v3 + 64) = 0uLL;
      *(void *)(v3 + 80) = 0;
      *(unsigned char *)(a2[2201] + v2) = 0;
      *(unsigned char *)(a2[2199] + v2) = 0;
      *(unsigned char *)(a2[2204] + v2) = 0;
      *(_DWORD *)(v5 + 31) = 0;
      *(_OWORD *)unsigned int v5 = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *(void *)(v4 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 31) = 0;
    }
    ++v2;
    v3 += 96;
    v4 += 48;
    v5 += 36;
    v6 += 88;
  }
  while (v2 != 36);
  return result;
}

uint64_t DD_Check_Age_GAL_Data(int a1, void *a2)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  int v5 = 0;
  char v6 = 0;
  uint64_t v7 = (char *)a2 + 62170;
  unsigned int v8 = (int *)a2 + 6011;
  int v9 = (int *)a2 + 4427;
  int v10 = a1 + 900;
  if (a1 <= 900) {
    int v11 = 900;
  }
  else {
    int v11 = a1;
  }
  int v34 = v11 - 900;
  if (a1 <= 86400) {
    int v12 = 86400;
  }
  else {
    int v12 = a1;
  }
  int v13 = v12 - 86400;
  uint64_t v14 = a2[2202];
  do
  {
    if (!*(unsigned char *)(v14 + v4)) {
      goto LABEL_19;
    }
    int v15 = *v9;
    if (*v9 >= 1 && v15 < v13)
    {
LABEL_17:
      char v6 = 1;
      *(unsigned char *)(a2[2200] + v4) = 1;
      goto LABEL_19;
    }
    if (v15)
    {
      if (v15 > v10)
      {
        ++v5;
        if (!*v7) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      *int v9 = v34;
    }
LABEL_19:
    ++v4;
    v9 += 22;
  }
  while (v4 != 36);
  if (v5 >= 1)
  {
    if (*v7) {
      int v17 = "(Skipped)";
    }
    else {
      int v17 = "";
    }
    EvLog_v("DD_Check_Age_GAL_Data:  Deleting Future EPH, %d SVs  %s", v5, v17);
  }
  double v32 = v8;
  double v33 = v7;
  uint64_t v18 = 0;
  int v19 = 0;
  if (a1 <= 15724800) {
    int v20 = 15724800;
  }
  else {
    int v20 = a1;
  }
  int v21 = v20 - 15724800;
  do
  {
    if (*(unsigned char *)(a2[2204] + v18))
    {
      int v22 = *v8;
      if (*v8 >= 1 && v22 < v21)
      {
        char v6 = 1;
        *(unsigned char *)(a2[2201] + v18) = 1;
        EvLog_v("DD_Check_Age_GAL_Data:  Old ALM deleted SV %d age %d thresh %d", v18 + 1, (a1 - v22) / 604800, (a1 - v21) / 604800);
      }
      else if (v22)
      {
        if (v22 > v10)
        {
          ++v19;
          int v24 = a1 - v22;
          int v25 = "(Skipped)";
          if (!*v7) {
            int v25 = "";
          }
          EvLog_v("DD_Check_Age_GAL_Data:  Future ALM deleted SV %d age %d thresh %d  %s", v18 + 1, v24 / 604800, 0, v25);
          if (!*v7)
          {
            char v6 = 1;
            *(unsigned char *)(a2[2201] + v18) = 1;
          }
        }
      }
      else
      {
        int *v8 = v34;
      }
    }
    ++v18;
    v8 += 9;
  }
  while (v18 != 36);
  if (v19 >= 1)
  {
    if (*v7) {
      unsigned int v26 = "(Skipped)";
    }
    else {
      unsigned int v26 = "";
    }
    EvLog_v("DD_Check_Age_GAL_Data:  Deleting Future ALM, %d SVs  %s", v19, v26);
  }
  if (v32[325])
  {
    int v27 = v32 + 324;
    if (a1 <= 604800) {
      int v28 = 604800;
    }
    else {
      int v28 = a1;
    }
    int v29 = *v27;
    if (*v27 < 1 || v29 >= v28 - 604800)
    {
      if (v29)
      {
        if (v29 > v10)
        {
          unsigned int v31 = *v33 ? "(Skipped)" : "";
          EvLog_v("DD_Check_Age_GAL_Data:  Deleting Future GGTO, %d  %d  %s", v29, v10, v31);
          if (!*v33) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        *int v27 = v34;
      }
    }
    else
    {
LABEL_55:
      *(void *)((char *)v32 + 1302) = 0;
      *(void *)int v27 = 0;
      a2[3170] = 0;
      a2[3172] = 0;
      a2[3171] = 0;
      *(void *)((char *)a2 + 25382) = 0;
    }
  }
  return v6 & 1;
}

uint64_t Get_SV_Carrier_Freq_I4(int a1)
{
  int v2 = BYTE1(a1);
  uint64_t result = 1575420000;
  switch(v2)
  {
    case 2:
      uint64_t result = 1227600000;
      break;
    case 3:
    case 7:
    case 9:
    case 13:
      uint64_t result = 1176450000;
      break;
    case 4:
      uint64_t result = (562500 * (a1 >> 24) + 1602000000);
      break;
    case 6:
    case 10:
    case 14:
      uint64_t result = 1207140000;
      break;
    case 12:
      uint64_t result = 1561098000;
      break;
    case 15:
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *NK_Update_Intermediate_Residual(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = result;
  uint64_t v15 = *MEMORY[0x263EF8340];
  switch(result)
  {
    case 3:
      uint64_t v7 = 36560;
LABEL_7:
      uint64_t v8 = a4 + v7;
      uint64_t v9 = 0;
      uint64_t v10 = a3 + 1600;
      do
      {
        if (*(unsigned char *)(v8 + v9 + 312) && (*(_DWORD *)(v8 + 4 * v9 + 568) - 1) >= 0x1D)
        {
          uint64_t result = NK_Obs_Equ_SV(v6, *(unsigned __int8 *)(v8 + v9 + 440), *(_DWORD *)(a2 + 4 * v9), a4 + 56 * v9 + 52760, (uint64_t)v14, *(double *)(a4 + 1552));
          uint64_t v11 = 0;
          double v12 = 0.0;
          do
          {
            float64x2_t v13 = vmulq_f64(*(float64x2_t *)&v14[v11], *(float64x2_t *)(v10 + v11));
            double v12 = v12 + v13.f64[0] + v13.f64[1];
            v11 += 16;
          }
          while (v11 != 96);
          *(double *)(v8 + 8 * v9 + 6328) = *(double *)(v8 + 8 * v9 + 5304) - v12;
        }
        ++v9;
      }
      while (v9 != 128);
      return result;
    case 2:
      uint64_t v7 = 21656;
      goto LABEL_7;
    case 1:
      uint64_t v7 = 6752;
      goto LABEL_7;
  }

  return (void *)gn_report_assertion_failure("NK_Update_Intermediate_Residual");
}

void Kep_Calc_SV_Ref_State_BDS_GEO(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a4 + 8) == 4)
  {
    unsigned int v6 = *(unsigned __int8 *)(a4 + 12);
    if (v6 <= 0x3F && v6 - 6 >= 0x35)
    {
      __int16 v9 = a2;
      if (*(_WORD *)(a4 + 22))
      {
        int v11 = *(_DWORD *)(a4 + 28);
        int v12 = a3 + 604800 * (a2 - *(__int16 *)(a4 + 22)) - v11;
      }
      else
      {
        int v11 = *(_DWORD *)(a4 + 28);
        int v13 = a3 - v11;
        int v14 = a3 - v11 - 604800;
        if (a3 - v11 <= 302399) {
          int v14 = a3 - v11;
        }
        if (v13 < -302400) {
          int v12 = v13 + 604800;
        }
        else {
          int v12 = v14;
        }
      }
      double v15 = (double)v12;
      double v16 = *(double *)(a4 + 184);
      double v17 = v16 * v16;
      double v18 = *(double *)(a4 + 192);
      double v146 = *(double *)(a4 + 104) + 19964980.4 / (v16 * (v16 * v16)) + *(double *)(a4 + 112) * (double)v12 * 0.5;
      double v19 = *(double *)(a4 + 176) + v146 * (double)v12;
      long double v20 = sin(v19);
      unsigned int v21 = 0;
      double v22 = *(double *)(a4 + 224);
      double v23 = v19 + v22 * v20;
      do
      {
        double v24 = v23;
        double v23 = v19 + v22 * sin(v23);
      }
      while (vabdd_f64(v23, v24) > 1.0e-11 && v21++ < 0x13);
      double v26 = 1.0 - v22 * v22;
      long double v27 = tan(v23 * 0.5);
      long double v28 = atan(sqrt((v22 + 1.0) / (1.0 - v22)) * v27);
      double v29 = v28 + v28;
      if (v29 < 0.0) {
        double v29 = v29 + 6.28318531;
      }
      __double2 v30 = __sincos_stret(v29);
      __double2 v31 = __sincos_stret(*(double *)(a4 + 216));
      double v32 = v31.__sinval * v30.__cosval + v30.__sinval * v31.__cosval;
      double v33 = v30.__cosval * v31.__cosval - v30.__sinval * v31.__sinval;
      double v34 = v33 * (v32 + v32);
      if (a1 == 1)
      {
        double v35 = v33 * v33 - v32 * v32;
        double v36 = v35 * *(double *)(a4 + 136) + *(double *)(a4 + 144) * v34;
        double v37 = v36 * v36 * -0.5 + 1.0;
        double v38 = v33 * v36;
        double v130 = v36;
        double v39 = -(v32 * v36);
        double v32 = v38 + v32 * v37;
        double v33 = v39 + v33 * v37;
        double v40 = v35 * *(double *)(a4 + 120) + *(double *)(a4 + 128) * v34;
      }
      else
      {
        double v40 = 0.0;
        double v35 = 0.0;
        double v130 = 0.0;
      }
      double v139 = v33;
      double v140 = v22 * v30.__cosval + 1.0;
      double v41 = (v17 + v18 * v15) * v26 / v140 + v40;
      double v143 = v33 * v41;
      double v42 = v32 * v41;
      double v43 = *(double *)(a4 + 208);
      double v132 = v40;
      double v133 = v35;
      double v135 = v34;
      if (a1 == 1)
      {
        double v131 = v35 * *(double *)(a4 + 152) + *(double *)(a4 + 160) * v34;
        double v43 = v43 + v131 + *(double *)(a4 + 168) * v15;
      }
      else
      {
        double v131 = 0.0;
      }
      double v137 = 1.0 - v22 * v22;
      double v141 = sqrt(v26);
      __double2 v44 = __sincos_stret(v43);
      double v45 = *(double *)(a4 + 232);
      __double2 v46 = __sincos_stret(*(double *)(a4 + 200) + v45 * v15 + (double)v11 * -0.00007292115);
      double v144 = v42 * v44.__cosval * v46.__cosval + v143 * v46.__sinval;
      double v145 = v143 * v46.__cosval - v42 * v44.__cosval * v46.__sinval;
      double v134 = v42 * v44.__sinval;
      double v142 = (double)v12;
      __double2 v47 = __sincos_stret(v15 * 0.00007292115);
      uint64_t v48 = 0;
      double cosval = v47.__cosval;
      float64x2_t v152 = vmulq_n_f64((float64x2_t)xmmword_263D84660, v47.__sinval);
      double v153 = -v47.__sinval;
      float64x2_t v154 = vmulq_n_f64((float64x2_t)xmmword_263D84660, v47.__cosval);
      long long v155 = xmmword_263D84670;
      uint64_t v156 = 0x3FEFE0D3B41815ABLL;
      uint64_t v49 = &v152.f64[1];
      do
      {
        double v50 = v144 * *(v49 - 1) + *(v49 - 2) * v145;
        double v51 = *v49;
        v49 += 3;
        *(double *)(a5 + v48) = v50 + v51 * v134;
        v48 += 8;
      }
      while (v48 != 24);
      double v52 = v137 * v141;
      double v53 = v146 * (v140 * v140) / (v137 * v141) + *(double *)(a4 + 112) * v142 * 0.5;
      double v54 = v53 + v53;
      double v55 = v146 * ((v17 + v18 * v15) * *(double *)(a4 + 224) / v141);
      double v56 = *(double *)(a4 + 192) + v55 * v30.__sinval;
      double v57 = 0.0;
      if (a1 == 1)
      {
        double v57 = *(double *)(a4 + 144) * v133 - *(double *)(a4 + 136) * v135;
        double v58 = v53 + v54 * v57;
        double v128 = *(double *)(a4 + 128) * v133 - *(double *)(a4 + 120) * v135;
        double v56 = v56 + v54 * v128;
        double v129 = *(double *)(a4 + 160) * v133 - *(double *)(a4 + 152) * v135;
        double v59 = *(double *)(a4 + 168) + v54 * v129;
      }
      else
      {
        double v58 = v146 * (v140 * v140) / (v137 * v141) + *(double *)(a4 + 112) * v142 * 0.5;
        double v128 = 0.0;
        double v129 = 0.0;
        double v59 = 0.0;
      }
      uint64_t v60 = 0;
      double v61 = v56 * v139 - v42 * v58;
      double v62 = v143 * v58 + v56 * v32;
      double v63 = v61 + -(v42 * v45) * v44.__cosval;
      double v64 = v62 * v44.__cosval - v134 * v59 + v143 * v45;
      double v65 = v63 * v46.__cosval - v64 * v46.__sinval;
      double v66 = v46.__cosval * v64 + v63 * v46.__sinval;
      double v67 = v44.__cosval * (v42 * v59) + v62 * v44.__sinval;
      double v68 = v47.__cosval * 0.00007292115;
      int64x2_t v69 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_263D84660, v47.__cosval * 0.00007292115);
      *(void *)&v71.f64[0] = vdupq_laneq_s64(v69, 1).u64[0];
      float64x2_t v70 = (float64x2_t)vdupq_lane_s64(v69.i64[0], 0);
      v70.f64[0] = -(v47.__sinval * 0.00007292115);
      v71.f64[1] = -(v47.__cosval * 0.00007292115);
      unint64_t v72 = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
      *(void *)&v73.f64[0] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
      double v136 = v47.__sinval * 0.00007292115;
      int8x16_t v74 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_263D84680, v47.__sinval * 0.00007292115);
      unint64_t v75 = vextq_s8(v74, v74, 8uLL).u64[0];
      float64x2_t v149 = 0uLL;
      uint64_t v150 = 0;
      double v76 = &v152.f64[1];
      do
      {
        double v77 = v66 * *(v76 - 1) + *(v76 - 2) * v65;
        double v78 = *v76;
        v76 += 3;
        v149.f64[v60++] = v77 + v78 * v67;
      }
      while (v60 != 3);
      *(float64x2_t *)(a5 + 24) = v149;
      v79.f64[0] = -(v47.__sinval * 0.00007292115);
      unint64_t v138 = v72;
      *(void *)&v79.f64[1] = v72;
      v80.f64[0] = v73.f64[0];
      *(void *)&v80.f64[1] = v74.i64[0];
      v81.f64[0] = v71.f64[0];
      *(void *)&v81.f64[1] = v75;
      *(void *)(a5 + 40) = v150;
      float64x2_t v149 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, v144), v79, v145), v81, v134);
      *(float64x2_t *)(a5 + 24) = vaddq_f64(*(float64x2_t *)(a5 + 24), v149);
      double v82 = v140 * (v30.__sinval * (-(v54 * v146) * *(double *)(a4 + 224)) / v52);
      double v83 = v30.__cosval * (v55 * v53);
      double v84 = 0.0;
      if (a1 == 1)
      {
        double v85 = v82 + v82;
        double v86 = v54 * -v54;
        double v83 = v83 + (v82 + v82) * v128 + v86 * v132;
        double v82 = v82 + (v82 + v82) * v57 + v86 * v130;
        double v84 = v131 * v86 + v85 * v129;
      }
      uint64_t v87 = 0;
      double v88 = v139 * (v58 * v56) + v83 * v32 + v61 * v58 + v82 * v143;
      double v89 = v83 * v139
          - v58 * v56 * v32
          - v62 * v58
          - v82 * v42
          + -(v62 * v45) * v44.__cosval
          + v45 * (v42 * v59) * v44.__sinval;
      double v90 = v44.__sinval * -(v62 * v59) + v88 * v44.__cosval - v67 * v59 + -v134 * v84 + v61 * v45;
      double v91 = v46.__cosval * v89 - v45 * v66 - v90 * v46.__sinval;
      double v92 = v46.__sinval * v89 + v45 * v65 + v90 * v46.__cosval;
      double v93 = v44.__cosval * ((v62 + v62) * v59) + v88 * v44.__sinval + v42 * v84 * v44.__cosval + -(v59 * v59) * v134;
      int64x2_t v94 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_263D84680, v136 * 0.00007292115);
      *(void *)&v96.f64[0] = vdupq_laneq_s64(v94, 1).u64[0];
      float64x2_t v95 = (float64x2_t)vdupq_lane_s64(v94.i64[0], 0);
      v95.f64[0] = -(v68 * 0.00007292115);
      v96.f64[1] = v136 * 0.00007292115;
      unint64_t v97 = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u64[0];
      *(void *)&v98.f64[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
      int8x16_t v99 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_263D84680, v68 * 0.00007292115);
      unint64_t v100 = vextq_s8(v99, v99, 8uLL).u64[0];
      float64x2_t v147 = 0uLL;
      uint64_t v148 = 0;
      int v101 = &v152.f64[1];
      do
      {
        double v102 = v92 * *(v101 - 1) + *(v101 - 2) * v91;
        double v103 = *v101;
        v101 += 3;
        v147.f64[v87++] = v102 + v103 * v93;
      }
      while (v87 != 3);
      *(float64x2_t *)(a5 + 48) = v147;
      *(void *)&v70.f64[1] = v138;
      *(void *)&v73.f64[1] = v74.i64[0];
      *(void *)&v71.f64[1] = v75;
      uint64_t v104 = v148;
      float64x2_t v105 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v73, v66), v70, v65), v71, v67);
      *(void *)&v95.f64[1] = v97;
      *(void *)&v98.f64[1] = v99.i64[0];
      *(void *)&v96.f64[1] = v100;
      __asm { FMOV            V3.2D, #2.0 }
      float64x2_t v110 = vmlaq_f64(*(float64x2_t *)(a5 + 48), _Q3, v105);
      float64x2_t v147 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, v144), v95, v145), v96, v134);
      *(float64x2_t *)(a5 + 48) = vaddq_f64(v110, v147);
      *(void *)(a5 + 64) = v104;
      *(void *)(a5 + 72) = 0;
      *(void *)(a5 + 80) = 0;
      *(void *)(a5 + 88) = 0;
      if (a1 != 1)
      {
        if (v12 >= 0) {
          int v113 = 302400;
        }
        else {
          int v113 = -302400;
        }
        int v114 = v113 + v12;
        if (v114 < 0) {
          int v114 = -v114;
        }
        if (v114 > 0x1E1337F) {
          unsigned int v115 = 65500;
        }
        else {
          unsigned int v115 = v114 / 0x3E8u + 1200;
        }
        double v117 = (double)(v115 * v115);
        goto LABEL_67;
      }
      unint64_t v111 = *(char *)(a4 + 19);
      if (v111 > 0xF)
      {
        if ((v111 + 16) > 0x10u)
        {
          double v116 = 99980001.0;
LABEL_52:
          *(double *)(a5 + 112) = v116;
          if (v12 >= 0) {
            unsigned int v118 = v12;
          }
          else {
            unsigned int v118 = -v12;
          }
          unsigned int v119 = v118 / 0x3C;
          if (*(_DWORD *)(a4 + 4) == 6) {
            int v120 = -30;
          }
          else {
            int v120 = -60;
          }
          int v121 = v119 + v120 * *(unsigned __int8 *)(a4 + 18);
          if (v121 < 1)
          {
            if (v12 >= 10800 && (v121 == 0 || v121 >= 0xFFFFFFC5))
            {
              double v122 = (double)((v121 + 60) * (v121 + 60)) * 0.00138888889;
              double v117 = v116 + v122 * v122;
              goto LABEL_67;
            }
          }
          else if (Is_Eph_Kep_Real((const double *)a4))
          {
            *(double *)(a5 + 112) = *(double *)(a5 + 112)
                                  + (double)(v121 * v121) * 0.025 * ((double)(v121 * v121) * 0.025);
          }
          if (v12 < 14400 || v121 < 0) {
            goto LABEL_68;
          }
          double v117 = *(double *)(a5 + 112) + 25.0;
LABEL_67:
          *(double *)(a5 + 112) = v117;
LABEL_68:
          double v123 = v142 + (double)(*(_DWORD *)(a4 + 28) - *(_DWORD *)(a4 + 24));
          double v124 = *(double *)(a4 + 224);
          double v125 = v124 * -4.44280763e-10 * *(double *)(a4 + 184) / (v124 * v30.__cosval + 1.0);
          double v126 = *(double *)(a4 + 48);
          double v127 = v123 * *(double *)(a4 + 56);
          *(double *)(a5 + 96) = *(double *)(a4 + 40) + v123 * (v127 + v126) + v141 * v125 * v30.__sinval;
          *(double *)(a5 + 104) = v126 + v127 * 2.0 + v146 * v125 * (v30.__cosval + v124);
          *(_OWORD *)(a5 + 120) = *(_OWORD *)(a4 + 64);
          *(_OWORD *)(a5 + 136) = *(_OWORD *)(a4 + 80);
          *(void *)(a5 + 152) = *(void *)(a4 + 96);
          *(_DWORD *)(a5 + 160) = a3;
          *(_WORD *)(a5 + 164) = v9;
          *(_WORD *)(a5 + 166) = *(_WORD *)(a4 + 20);
          *(_DWORD *)(a5 + 176) = a1;
          *(unsigned char *)(a5 + 188) = *(unsigned char *)(a4 + 12);
          *(void *)(a5 + 180) = *(void *)(a4 + 4);
          *(_WORD *)(a5 + 189) = *(_WORD *)(a4 + 16);
          return;
        }
        uint64_t v112 = (double *)((char *)&GPS_Modern_URA_Table + 8 * -(int)v111);
      }
      else
      {
        uint64_t v112 = (double *)((char *)&BDS_Legacy_URA_Table + 8 * v111);
      }
      double v116 = *v112;
      goto LABEL_52;
    }
  }
}

void gnss::GnssAdaptDevice::setAssistanceAccel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 0, (uint64_t)v6, (uint64_t)"setAssistanceAccel");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setAssistanceAccel", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setAssistanceAccel", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D13CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setAssistanceGyro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 0, (uint64_t)v6, (uint64_t)"setAssistanceGyro");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setAssistanceGyro", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setAssistanceGyro", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D13E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

float64x2_t Get_GPS_Kep_Almanac(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 10);
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 20) = (*(_DWORD *)(a1 + 16) >> 4) & 0xFF000;
  double v3 = (double)*(__int16 *)(a1 + 16);
  *(unsigned char *)(a2 + 12) = BYTE2(v2) & 0x3F;
  int v4 = *(_DWORD *)(a1 + 20);
  int v5 = *(_DWORD *)(a1 + 24);
  *(double *)(a2 + 48) = v3 * 0.00000599211245 + 0.942477796;
  *(double *)(a2 + 56) = (double)(__int16)(v4 >> 8) * 1.14290475e-11;
  *(unsigned char *)(a2 + 13) = v4 & 0x1F;
  double v6 = (double)(v5 & 0xFFFFFF) * 0.00048828125;
  int32x2_t v7 = vshl_n_s32(*(int32x2_t *)(a1 + 28), 8uLL);
  v8.i64[0] = v7.i32[0];
  v8.i64[1] = v7.i32[1];
  *(float64x2_t *)(a2 + 80) = vmulq_f64(vcvtq_f64_s64(v8), (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL));
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  *(double *)(a2 + 64) = (double)(int)(*(_DWORD *)(a1 + 36) << 8) * 0.00000000146291808;
  *(double *)(a2 + 72) = v6;
  *(double *)(a2 + 24) = (double)(__int16)((v9 >> 8) & 0xFF00 | (32 * ((v9 >> 2) & 7))) * 0.0000000298023224;
  LODWORD(v6) = (__int16)v9;
  HIDWORD(v6) = v2;
  int8x8_t v10 = vand_s8(*(int8x8_t *)&v6, (int8x8_t)0xFFFFFFFFFFE0);
  v8.i64[0] = v10.i32[0];
  v8.i64[1] = v10.i32[1];
  float64x2_t result = vmulq_f64(vcvtq_f64_s64(v8), (float64x2_t)xmmword_263D847A0);
  *(float64x2_t *)(a2 + 32) = result;
  *(_DWORD *)(a2 + 8) = 1;
  return result;
}

__n128 Init_DB_SV_Nav_Mess(uint64_t a1)
{
  v22[1] = *(double *)MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 62144) = 0u;
  uint64_t v2 = a1 + 61952;
  *(_OWORD *)(a1 + 62154) = 0u;
  uint64_t v3 = a1 + 50616;
  *(void *)(a1 + 112) = a1 + 61952;
  *(void *)&long long v4 = 0x101010101010101;
  *((void *)&v4 + 1) = 0x101010101010101;
  *(_OWORD *)(a1 + 8994) = v4;
  *(_OWORD *)(a1 + 9010) = v4;
  uint64_t v5 = a1 + 50834;
  *(void *)(a1 + 9032) = a1 + 50771;
  *(void *)(a1 + 9040) = a1 + 50989;
  *(void *)(a1 + 9048) = a1 + 54152;
  *(void *)(a1 + 9056) = a1 + 58512;
  uint64_t v6 = a1 + 59772;
  *(void *)(a1 + 9096) = a1 + 59927;
  uint64_t v7 = a1 + 59990;
  *(void *)(a1 + 9104) = a1 + 60145;
  uint64_t v8 = a1 + 60208;
  *(void *)(a1 + 9112) = a1 + 60363;
  uint64_t v9 = a1 + 60426;
  *(void *)(a1 + 9064) = a1 + 60581;
  uint64_t v10 = a1 + 60644;
  *(void *)(a1 + 9072) = a1 + 60799;
  uint64_t v11 = a1 + 60862;
  *(void *)(a1 + 9080) = a1 + 61017;
  uint64_t v12 = a1 + 61080;
  *(void *)(a1 + 9088) = a1 + 61235;
  uint64_t v13 = a1 + 61298;
  *(void *)(a1 + 9120) = a1 + 61453;
  uint64_t v14 = a1 + 61516;
  *(void *)(a1 + 9128) = a1 + 61671;
  uint64_t v15 = a1 + 61734;
  *(void *)(a1 + 9136) = a1 + 61889;
  *(void *)(a1 + 9144) = a1 + 62107;
  *(void *)(a1 + 11912) = a1 + 50648;
  double v16 = (char *)(a1 + 51052);
  *(void *)(a1 + 11920) = v16 + 640;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(a1 + 17168) = v6 + 32;
  *(void *)(a1 + 17176) = v7 + 32;
  *(void *)(a1 + 17184) = v8 + 32;
  *(void *)(a1 + 17144) = v9 + 32;
  *(void *)(a1 + 17160) = v11 + 32;
  *(void *)(a1 + 17152) = v10 + 32;
  *(void *)(a1 + 17200) = v13 + 32;
  *(void *)(a1 + 17208) = v14 + 32;
  *(void *)(a1 + 17216) = v15 + 32;
  *(void *)(a1 + 17224) = v2 + 32;
  *(void *)(a1 + 17472) = 0x7F7F7F7F7F7F7F7FLL;
  *(_OWORD *)(a1 + 17496) = 0u;
  *(_OWORD *)(a1 + 17512) = 0u;
  *(_OWORD *)(a1 + 17480) = 0u;
  *(void *)(a1 + 17552) = v3 + 56;
  *(void *)(a1 + 17560) = v5 + 56;
  *(void *)(a1 + 17568) = v16 + 1120;
  *(void *)(a1 + 17576) = a1 + 56532;
  *(void *)(a1 + 17616) = v6 + 56;
  *(void *)(a1 + 17624) = v7 + 56;
  *(void *)(a1 + 17632) = v8 + 56;
  *(void *)(a1 + 17584) = v9 + 56;
  *(void *)(a1 + 17592) = v10 + 56;
  *(void *)(a1 + 17600) = v11 + 56;
  *(void *)(a1 + 17608) = v12 + 56;
  *(void *)(a1 + 17640) = v13 + 56;
  *(void *)(a1 + 17648) = v14 + 56;
  *(void *)(a1 + 17656) = v15 + 56;
  *(_OWORD *)(a1 + 62128) = 0u;
  *(_OWORD *)(a1 + 62112) = 0u;
  *(_OWORD *)(a1 + 62096) = 0u;
  *(_OWORD *)(a1 + 62080) = 0u;
  *(_OWORD *)(a1 + 62064) = 0u;
  *(_OWORD *)(a1 + 62048) = 0u;
  *(_OWORD *)(a1 + 62032) = 0u;
  *(_OWORD *)(a1 + 62016) = 0u;
  *(_OWORD *)(a1 + 62000) = 0u;
  *(_OWORD *)(a1 + 61968) = 0u;
  *(_OWORD *)(a1 + 61952) = 0u;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = a1 + 55412;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(_WORD *)(a1 + 8992) = 0;
  *(void *)&long long v17 = 0x7F7F7F7F7F7F7F7FLL;
  *((void *)&v17 + 1) = 0x7F7F7F7F7F7F7F7FLL;
  *(_OWORD *)(a1 + 17456) = v17;
  *(_OWORD *)(a1 + 17440) = v17;
  *(_OWORD *)(a1 + 17424) = v17;
  *(_OWORD *)(a1 + 17408) = v17;
  *(_OWORD *)(a1 + 17392) = v17;
  *(_OWORD *)(a1 + 17376) = v17;
  *(_OWORD *)(a1 + 17360) = v17;
  *(_OWORD *)(a1 + 17344) = v17;
  *(_OWORD *)(a1 + 17328) = v17;
  *(void *)(a1 + 17528) = 0;
  *(void *)(a1 + 17664) = v2 + 56;
  *(_DWORD *)(a1 + 17704) = 0;
  *(_OWORD *)(a1 + 17672) = 0u;
  *(_OWORD *)(a1 + 17688) = 0u;
  *(void *)(a1 + 25392) = v3 + 92;
  *(void *)(a1 + 25400) = v5 + 92;
  *(void *)(a1 + 25408) = v16 + 1840;
  *(void *)(a1 + 25416) = a1 + 57252;
  *(void *)(a1 + 25456) = v6 + 92;
  *(void *)(a1 + 25464) = v7 + 92;
  *(void *)(a1 + 25472) = v8 + 92;
  *(void *)(a1 + 25424) = v9 + 92;
  *(void *)(a1 + 25432) = v10 + 92;
  *(void *)(a1 + 25440) = v11 + 92;
  *(void *)(a1 + 25448) = v12 + 92;
  *(void *)(a1 + 25480) = v13 + 92;
  *(void *)(a1 + 25488) = v14 + 92;
  *(void *)(a1 + 25496) = v15 + 92;
  *(void *)(a1 + 25504) = v2 + 92;
  *(void *)(a1 + 47576) = v3 + 165;
  *(void *)(a1 + 47584) = v5 + 165;
  *(void *)(a1 + 47592) = a1 + 54352;
  *(void *)(a1 + 47600) = a1 + 58712;
  *(void *)(a1 + 47640) = v6 + 165;
  *(void *)(a1 + 47648) = v7 + 165;
  *(void *)(a1 + 47608) = v9 + 165;
  *(void *)(a1 + 47616) = v10 + 165;
  *(void *)(a1 + 47624) = v11 + 165;
  *(void *)(a1 + 47632) = v12 + 165;
  *(void *)(a1 + 47656) = v8 + 165;
  *(void *)(a1 + 47664) = v13 + 165;
  *(void *)(a1 + 47672) = v14 + 165;
  *(void *)(a1 + 47680) = v15 + 165;
  *(void *)(a1 + 47688) = v2 + 165;
  *(void *)(a1 + 17536) = v3 + 179;
  *(void *)(a1 + 17544) = a1 + 54632;
  *(_DWORD *)(v3 + 432) = 16843009;
  *(_OWORD *)(v3 + 400) = v4;
  *(_OWORD *)(v3 + 416) = v4;
  *(_OWORD *)(v3 + 368) = v4;
  *(_OWORD *)(v3 + 384) = v4;
  *(_OWORD *)(v3 + 336) = v4;
  *(_OWORD *)(v3 + 352) = v4;
  *(_OWORD *)(v3 + 304) = v4;
  *(_OWORD *)(v3 + 320) = v4;
  *(_OWORD *)(v3 + 272) = v4;
  *(_OWORD *)(v3 + 288) = v4;
  *(_OWORD *)(v3 + 240) = v4;
  *(_OWORD *)(v3 + 256) = v4;
  *(_OWORD *)(v3 + 208) = v4;
  *(_OWORD *)(v3 + 224) = v4;
  *(_OWORD *)(v3 + 176) = v4;
  *(_OWORD *)(v3 + 192) = v4;
  *(_OWORD *)(v3 + 144) = v4;
  *(_OWORD *)(v3 + 160) = v4;
  *(_OWORD *)(v3 + 112) = v4;
  *(_OWORD *)(v3 + 128) = v4;
  *(_OWORD *)(v3 + 80) = v4;
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 48) = v4;
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 171) = 0;
  *(void *)(v3 + 165) = 0;
  bzero(v16, 0x2210uLL);
  v22[0] = 0.0;
  *(void *)(a1 + 8968) = 0;
  *(void *)(a1 + 8984) = 0;
  *(void *)(a1 + 8976) = 0;
  API_Get_UTC_Cor(1, v22);
  double v18 = -0.5;
  if (v22[0] > 0.0) {
    double v18 = 0.5;
  }
  double v19 = v22[0] + v18;
  if (v22[0] + v18 <= 2147483650.0)
  {
    if (v19 >= -2147483650.0) {
      int v20 = (int)v19;
    }
    else {
      LOBYTE(v20) = 0;
    }
  }
  else
  {
    LOBYTE(v20) = -1;
  }
  *(unsigned char *)(a1 + 8986) = v20;
  *(unsigned char *)(a1 + 8989) = v20;
  *(_DWORD *)(a1 + 8972) = 1;
  EvLog_v("Init_DBnm: Default GPS-UTC %d s applied", (char)v20);
  *(_DWORD *)(a1 + 62346) = 16843009;
  result.n128_u64[0] = 0x101010101010101;
  result.n128_u64[1] = 0x101010101010101;
  *(__n128 *)(a1 + 62315) = result;
  *(__n128 *)(a1 + 62331) = result;
  *(__n128 *)(a1 + 62283) = result;
  *(__n128 *)(a1 + 62299) = result;
  *(__n128 *)(a1 + 62251) = result;
  *(__n128 *)(a1 + 62267) = result;
  *(__n128 *)(a1 + 62219) = result;
  *(__n128 *)(a1 + 62235) = result;
  *(__n128 *)(a1 + 62187) = result;
  *(__n128 *)(a1 + 62203) = result;
  *(__n128 *)(a1 + 62171) = result;
  *(void *)(a1 + 62358) = 0;
  *(void *)(a1 + 62350) = 0;
  *(_WORD *)(a1 + 62366) = 0;
  return result;
}

double Init_DB_SV_Nav_Mess_NV(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 47440;
  uint64_t v4 = a1 + 25340;
  int8x16_t v99 = (unsigned char *)(a1 + 17192);
  memset(v101, 0, 115);
  uint64_t v5 = 120;
  do
  {
    uint64_t v6 = v2 + 1;
    if (Core_Load_GPS_Eph((v2 + 1), (uint64_t)v101)) {
      BOOL v7 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = a1 + v5;
      long long v9 = *(_OWORD *)&v101[80];
      *(_OWORD *)(v8 + 64) = *(_OWORD *)&v101[64];
      *(_OWORD *)(v8 + 80) = v9;
      *(_OWORD *)(v8 + 96) = *(_OWORD *)&v101[96];
      *(_DWORD *)(v8 + 112) = *(_DWORD *)&v101[112];
      long long v10 = *(_OWORD *)&v101[16];
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v101;
      *(_OWORD *)(v8 + 16) = v10;
      long long v11 = *(_OWORD *)&v101[48];
      *(_OWORD *)(v8 + 32) = *(_OWORD *)&v101[32];
      *(_OWORD *)(v8 + 48) = v11;
      *(unsigned char *)(*(void *)(a1 + 32) + v2) = 1;
      *(unsigned char *)(*(void *)(a1 + 64) + v2) = 1;
    }
    v5 += 116;
    ++v2;
  }
  while (v6 != 32);
  uint64_t v12 = 0;
  uint64_t v13 = 9152;
  memset(v101, 0, 115);
  do
  {
    if (Core_Load_QZSS_Eph((v12 - 63), (uint64_t)v101)) {
      BOOL v14 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      uint64_t v15 = a1 + v13;
      long long v16 = *(_OWORD *)&v101[80];
      *(_OWORD *)(v15 + 64) = *(_OWORD *)&v101[64];
      *(_OWORD *)(v15 + 80) = v16;
      *(_OWORD *)(v15 + 96) = *(_OWORD *)&v101[96];
      *(_DWORD *)(v15 + 112) = *(_DWORD *)&v101[112];
      long long v17 = *(_OWORD *)&v101[16];
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v101;
      *(_OWORD *)(v15 + 16) = v17;
      long long v18 = *(_OWORD *)&v101[48];
      *(_OWORD *)(v15 + 32) = *(_OWORD *)&v101[32];
      *(_OWORD *)(v15 + 48) = v18;
      *(unsigned char *)(*(void *)(a1 + 9064) + v12) = 1;
      *(unsigned char *)(*(void *)(a1 + 9096) + v12) = 1;
    }
    ++v12;
    v13 += 116;
  }
  while (v12 != 10);
  uint64_t v19 = 0;
  memset(v101, 0, 62);
  uint64_t v20 = 11928;
  do
  {
    uint64_t v21 = v19 + 1;
    if (Core_Load_GLON_Eph((v19 + 1), v101)) {
      BOOL v22 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22)
    {
      double v23 = (_OWORD *)(a1 + v20);
      long long v24 = *(_OWORD *)&v101[16];
      *double v23 = *(_OWORD *)v101;
      v23[1] = v24;
      long long v25 = *(_OWORD *)&v101[48];
      v23[2] = *(_OWORD *)&v101[32];
      void v23[3] = v25;
      *(unsigned char *)(*(void *)(a1 + 17144) + v19) = 1;
      *(unsigned char *)(*(void *)(a1 + 17168) + v19) = 1;
      *(_DWORD *)(a1 + 17328 + 4 * v19) = *(_DWORD *)&v101[8];
    }
    v20 += 64;
    ++v19;
  }
  while (v21 != 24);
  uint64_t v26 = 0;
  memset(v101, 0, 88);
  uint64_t v27 = 17708;
  do
  {
    uint64_t v28 = v26 + 1;
    if (Core_Load_GAL_Eph((v26 + 1), (uint64_t)v101)) {
      BOOL v29 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v29 = 1;
    }
    if (!v29)
    {
      uint64_t v30 = a1 + v27;
      long long v31 = *(_OWORD *)&v101[48];
      *(_OWORD *)(v30 + 32) = *(_OWORD *)&v101[32];
      *(_OWORD *)(v30 + 48) = v31;
      *(_OWORD *)(v30 + 64) = *(_OWORD *)&v101[64];
      *(void *)(v30 + 80) = *(void *)&v101[80];
      long long v32 = *(_OWORD *)&v101[16];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v101;
      *(_OWORD *)(v30 + 16) = v32;
      *(unsigned char *)(*(void *)(a1 + 17584) + v26) = 1;
      *(unsigned char *)(*(void *)(a1 + 17616) + v26) = 1;
    }
    v27 += 88;
    ++v26;
  }
  while (v28 != 36);
  uint64_t v33 = 0;
  memset(v101, 0, 18);
  memset(&v101[20], 0, 78);
  memset(&v101[100], 0, 48);
  uint64_t v34 = 25512;
  do
  {
    uint64_t v35 = v33 + 1;
    if (Core_Load_BDS_Eph((v33 + 1), (uint64_t)v101)) {
      BOOL v36 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v36 = 1;
    }
    if (!v36)
    {
      uint64_t v37 = a1 + v34;
      long long v38 = *(_OWORD *)&v101[112];
      *(_OWORD *)(v37 + 96) = *(_OWORD *)&v101[96];
      *(_OWORD *)(v37 + 112) = v38;
      *(_OWORD *)(v37 + 128) = *(_OWORD *)&v101[128];
      *(void *)(v37 + 144) = *(void *)&v101[144];
      long long v39 = *(_OWORD *)&v101[48];
      *(_OWORD *)(v37 + 32) = *(_OWORD *)&v101[32];
      *(_OWORD *)(v37 + 48) = v39;
      long long v40 = *(_OWORD *)&v101[80];
      *(_OWORD *)(v37 + 64) = *(_OWORD *)&v101[64];
      *(_OWORD *)(v37 + 80) = v40;
      long long v41 = *(_OWORD *)&v101[16];
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v101;
      *(_OWORD *)(v37 + 16) = v41;
      *(unsigned char *)(*(void *)(a1 + 25424) + v33) = 1;
      *(unsigned char *)(*(void *)(a1 + 25456) + v33) = 1;
    }
    v34 += 152;
    ++v33;
  }
  while (v35 != 63);
  uint64_t v42 = 0;
  memset(v101, 0, 76);
  uint64_t v43 = 47696;
  do
  {
    uint64_t v44 = v42 + 1;
    if (Core_Load_NVIC_Eph((v42 + 1), v101)) {
      BOOL v45 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v45 = 1;
    }
    if (!v45)
    {
      __double2 v46 = (_OWORD *)(a1 + v43);
      long long v47 = *(_OWORD *)&v101[48];
      v46[2] = *(_OWORD *)&v101[32];
      v46[3] = v47;
      *(_OWORD *)((char *)v46 + 60) = *(_OWORD *)&v101[60];
      long long v48 = *(_OWORD *)&v101[16];
      *__double2 v46 = *(_OWORD *)v101;
      v46[1] = v48;
      *(unsigned char *)(*(void *)(v3 + 168) + v42) = 1;
      *(unsigned char *)(*(void *)(v3 + 200) + v42) = 1;
    }
    v43 += 76;
    ++v42;
  }
  while (v44 != 14);
  uint64_t v49 = 0;
  memset(v101, 0, 44);
  uint64_t v50 = 7544;
  do
  {
    uint64_t v51 = v49 + 1;
    if (Core_Load_GPS_Alm((v49 + 1), v101)) {
      BOOL v52 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v52 = 1;
    }
    if (!v52)
    {
      double v53 = (_OWORD *)(a1 + v50);
      long long v54 = *(_OWORD *)&v101[16];
      _OWORD *v53 = *(_OWORD *)v101;
      v53[1] = v54;
      *(_OWORD *)((char *)v53 + 28) = *(_OWORD *)&v101[28];
      *(unsigned char *)(*(void *)(a1 + 40) + v49) = 1;
      *(unsigned char *)(*(void *)(a1 + 80) + v49) = 1;
    }
    v50 += 44;
    ++v49;
  }
  while (v51 != 32);
  uint64_t v55 = 0;
  memset(v101, 0, 44);
  uint64_t v56 = 11472;
  do
  {
    if (Core_Load_QZSS_Alm((v55 - 63), v101)) {
      BOOL v57 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v57 = 1;
    }
    if (!v57)
    {
      double v58 = (_OWORD *)(a1 + v56);
      long long v59 = *(_OWORD *)&v101[16];
      _OWORD *v58 = *(_OWORD *)v101;
      v58[1] = v59;
      *(_OWORD *)((char *)v58 + 28) = *(_OWORD *)&v101[28];
      *(unsigned char *)(*(void *)(a1 + 9072) + v55) = 1;
      *(unsigned char *)(*(void *)(a1 + 9112) + v55) = 1;
    }
    ++v55;
    v56 += 44;
  }
  while (v55 != 10);
  uint64_t v60 = 0;
  *(void *)unint64_t v100 = 0;
  *(_WORD *)&v100[8] = 0;
  memset(&v100[12], 0, 24);
  uint64_t v61 = 16248;
  do
  {
    uint64_t v62 = v60 + 1;
    if (Core_Load_GLON_Alm((v60 + 1), (uint64_t)v100)) {
      BOOL v63 = *(_DWORD *)v100 < 1;
    }
    else {
      BOOL v63 = 1;
    }
    if (!v63)
    {
      *(_OWORD *)int v101 = 0uLL;
      *(void *)&v101[21] = 0;
      *(void *)&v101[16] = 0;
      *(void *)&v101[30] = 0;
      v101[38] = 0;
      GLON_AlmBin2Int((uint64_t)v100, (uint64_t)v101);
      if (v101[36])
      {
        uint64_t v64 = a1 + v61;
        long long v65 = *(_OWORD *)&v100[16];
        *(_OWORD *)uint64_t v64 = *(_OWORD *)v100;
        *(_OWORD *)(v64 + 16) = v65;
        *(_DWORD *)(v64 + 32) = *(_DWORD *)&v100[32];
        *(unsigned char *)(*(void *)(a1 + 17152) + v60) = 1;
      }
      *(unsigned char *)(*(void *)(a1 + 17184) + v60) = 1;
      int v66 = v101[11];
      int v67 = v101[11] - 32;
      if (v101[11] <= 0x18u) {
        int v67 = 2139062143;
      }
      if (v101[11] >= 7u) {
        int v66 = v67;
      }
      if (v66 != 2139062143) {
        *(_DWORD *)(a1 + 17328 + 4 * v60) = v66;
      }
    }
    v61 += 36;
    ++v60;
  }
  while (v62 != 24);
  uint64_t v68 = 0;
  memset(v101, 0, 35);
  uint64_t v69 = 24044;
  do
  {
    uint64_t v70 = v68 + 1;
    if (Core_Load_GAL_Alm((v68 + 1), (uint64_t)v101)) {
      BOOL v71 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v71 = 1;
    }
    if (!v71)
    {
      uint64_t v72 = a1 + v69;
      long long v73 = *(_OWORD *)&v101[16];
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v101;
      *(_OWORD *)(v72 + 16) = v73;
      *(_DWORD *)(v72 + 32) = *(_DWORD *)&v101[32];
      *(unsigned char *)(*(void *)(a1 + 17592) + v68) = 1;
      *(unsigned char *)(*(void *)(a1 + 17632) + v68) = 1;
    }
    v69 += 36;
    ++v68;
  }
  while (v70 != 36);
  uint64_t v74 = 0;
  memset(v101, 0, 43);
  uint64_t v75 = 44664;
  do
  {
    uint64_t v76 = v74 + 1;
    if (Core_Load_BDS_Alm((v74 + 1), v101)) {
      BOOL v77 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77)
    {
      double v78 = (_OWORD *)(a1 + v75);
      long long v79 = *(_OWORD *)&v101[16];
      *double v78 = *(_OWORD *)v101;
      v78[1] = v79;
      *(_OWORD *)((char *)v78 + 28) = *(_OWORD *)&v101[28];
      *(unsigned char *)(*(void *)(a1 + 25432) + v74) = 1;
      *(unsigned char *)(*(void *)(a1 + 25472) + v74) = 1;
    }
    v75 += 44;
    ++v74;
  }
  while (v76 != 63);
  uint64_t v80 = 0;
  *(_DWORD *)&v101[12] = 0;
  *(_WORD *)&v101[16] = 0;
  *(_DWORD *)&v101[20] = 0;
  *(_WORD *)&v101[24] = 0;
  *(void *)int v101 = 0;
  *(_DWORD *)&v101[7] = 0;
  memset(&v101[28], 0, 21);
  uint64_t v81 = 49824;
  do
  {
    uint64_t v82 = v80 + 1;
    if (Core_Load_NVIC_Alm((v80 + 1), (uint64_t)v101)) {
      BOOL v83 = *(_DWORD *)v101 < 1;
    }
    else {
      BOOL v83 = 1;
    }
    if (!v83)
    {
      uint64_t v84 = a1 + v81;
      long long v85 = *(_OWORD *)&v101[16];
      *(_OWORD *)uint64_t v84 = *(_OWORD *)v101;
      *(_OWORD *)(v84 + 16) = v85;
      *(_OWORD *)(v84 + 32) = *(_OWORD *)&v101[32];
      *(_DWORD *)(v84 + 48) = *(_DWORD *)&v101[48];
      *(unsigned char *)(*(void *)(v3 + 176) + v80) = 1;
      *(unsigned char *)(*(void *)(v3 + 216) + v80) = 1;
    }
    v81 += 52;
    ++v80;
  }
  while (v82 != 14);
  if (!Core_Load_GPS_Health(*(BOOL **)a1))
  {
    double v86 = *(BOOL **)a1;
    *(void *)&long long v87 = 0x101010101010101;
    *((void *)&v87 + 1) = 0x101010101010101;
    *(_OWORD *)double v86 = v87;
    *((_OWORD *)v86 + 1) = v87;
  }
  if (!Core_Load_QZSS_Health(*(BOOL **)(a1 + 9032)))
  {
    uint64_t v88 = *(void *)(a1 + 9032);
    *(_WORD *)(v88 + 8) = 257;
    *(void *)uint64_t v88 = 0x101010101010101;
  }
  if (!Core_Load_GLON_Health(*(BOOL **)(a1 + 11912)))
  {
    double v89 = *(void **)(a1 + 11912);
    v89[1] = 0x101010101010101;
    v89[2] = 0x101010101010101;
    *double v89 = 0x101010101010101;
  }
  if (!Core_Load_GAL_Health(*(BOOL **)(a1 + 17552)))
  {
    uint64_t v90 = *(void *)(a1 + 17552);
    *(_DWORD *)(v90 + 32) = 16843009;
    *(void *)&long long v91 = 0x101010101010101;
    *((void *)&v91 + 1) = 0x101010101010101;
    *(_OWORD *)uint64_t v90 = v91;
    *(_OWORD *)(v90 + 16) = v91;
  }
  if (!Core_Load_BDS_Health(*(BOOL **)(a1 + 25392)))
  {
    double v92 = *(_OWORD **)(a1 + 25392);
    *(void *)&long long v93 = 0x101010101010101;
    *((void *)&v93 + 1) = 0x101010101010101;
    *(_OWORD *)((char *)v92 + 47) = v93;
    v92[1] = v93;
    v92[2] = v93;
    _OWORD *v92 = v93;
  }
  if (!Core_Load_NVIC_Health(*(BOOL **)(v3 + 144)))
  {
    int64x2_t v94 = *(void **)(v3 + 144);
    *(void *)((char *)v94 + 6) = 0x101010101010101;
    void *v94 = 0x101010101010101;
  }
  uint64_t v95 = *(void *)(a1 + 17536);
  *(void *)(v95 + 31) = 0x101010101010101;
  *(void *)&long long v96 = 0x101010101010101;
  *((void *)&v96 + 1) = 0x101010101010101;
  *(_OWORD *)uint64_t v95 = v96;
  *(_OWORD *)(v95 + 16) = v96;
  memset(v101, 0, 24);
  if (Core_Load_GPS_UTC((uint64_t)v101) && *(int *)v101 >= 1)
  {
    *(_OWORD *)(a1 + 8968) = *(_OWORD *)v101;
    *(void *)(a1 + 8984) = *(void *)&v101[16];
  }
  else
  {
    *(_DWORD *)(a1 + 8972) = 0;
  }
  *(_OWORD *)int v101 = 0uLL;
  if (Core_Load_GPS_Klob(v101) && *(int *)v101 >= 1)
  {
    *(_OWORD *)(a1 + 8952) = *(_OWORD *)v101;
    *(_DWORD *)(a1 + 8956) = 4;
  }
  *(void *)&v101[6] = 0;
  *(void *)int v101 = 0;
  if (Core_Load_GAL_GGTO(v101) && *(int *)v101 >= 1)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v101;
    *(_DWORD *)(v4 + 4) = 4;
    double v97 = (double)*(__int16 *)(v4 + 8);
    *(_DWORD *)(v4 + 20) = *(_DWORD *)v4;
    *(_DWORD *)(v4 + 24) = 4;
    *(double *)(a1 + 25368) = v97 * 2.91038305e-11;
    *(double *)(a1 + 25376) = (double)*(__int16 *)(v4 + 10) * 4.4408921e-16;
    *(_DWORD *)(v4 + 44) = 3600 * *(unsigned __int8 *)(v4 + 12);
    *(_WORD *)(v4 + 48) = *(unsigned __int8 *)(v4 + 13);
  }
  *(void *)int v101 = 0;
  *(_WORD *)&v101[8] = 0;
  *(_WORD *)&v101[24] = 0;
  *(void *)&v101[12] = 0;
  *(_DWORD *)&v101[19] = 0;
  *(void *)unint64_t v100 = 0;
  *(_WORD *)&v100[8] = 0;
  *(_WORD *)&v100[24] = 0;
  *(void *)&v100[12] = 0;
  *(_DWORD *)&v100[19] = 0;
  if (Core_Load_BDS_BGTO(v101, v100))
  {
    if (*(int *)v101 >= 1)
    {
      *(_OWORD *)(a1 + 47436) = *(_OWORD *)v101;
      *(_OWORD *)(a1 + 47448) = *(_OWORD *)&v101[12];
      *(_DWORD *)uint64_t v3 = 4;
    }
    if (*(int *)v100 >= 1)
    {
      *(_OWORD *)(a1 + 47464) = *(_OWORD *)v100;
      *(_OWORD *)(a1 + 47476) = *(_OWORD *)&v100[12];
      *(_DWORD *)(v3 + 28) = 4;
    }
  }
  *(_DWORD *)&v101[14] = 0;
  *(void *)int v101 = 0;
  *(void *)&v101[5] = 0;
  if (Core_Load_NVIC_NGTO((uint64_t)v101) && *(int *)v101 >= 1)
  {
    *(_OWORD *)(a1 + 50552) = *(_OWORD *)v101;
    *(_DWORD *)(a1 + 50568) = *(_DWORD *)&v101[16];
    *(_DWORD *)(v3 + 3116) = 4;
  }
  *(void *)int v101 = 0;
  *(_WORD *)&v101[8] = 0;
  *(_DWORD *)&v101[12] = 0;
  v101[16] = 0;
  *(_DWORD *)&v101[20] = 0;
  v101[24] = 0;
  if (Core_Load_GLON_Clk1(v101) && *(int *)v101 >= 1)
  {
    *(_OWORD *)(a1 + 17112) = *(_OWORD *)v101;
    double result = *(double *)&v101[12];
    *(_OWORD *)(a1 + 17124) = *(_OWORD *)&v101[12];
    *int8x16_t v99 = 1;
  }
  return result;
}

double NVIC_EphReal2Kep(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = 6;
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 8);
  double v2 = *(double *)(a1 + 72);
  if (v2 > *(double *)"") {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  *(unsigned char *)(a2 + 13) = v3;
  int v4 = *(unsigned __int8 *)(a1 + 10);
  *(unsigned char *)(a2 + 14) = v4;
  *(unsigned char *)(a2 + 15) = v4 == 0;
  *(_WORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 18) = *(unsigned char *)(a1 + 14);
  *(unsigned char *)(a2 + 19) = *(unsigned char *)(a1 + 13);
  *(_WORD *)(a2 + 20) = *(unsigned __int8 *)(a1 + 12);
  *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 16) + 1024;
  int v5 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 32);
  double v6 = *(double *)(a1 + 56);
  *(void *)(a2 + 56) = *(void *)(a1 + 48);
  *(double *)(a2 + 64) = v6;
  *(double *)(a2 + 72) = v6;
  *(double *)(a2 + 80) = v6 * 4.48702911;
  *(double *)(a2 + 88) = v6 * 4.48702911;
  *(double *)(a2 + 96) = v6 * 4.48702911;
  *(void *)(a2 + 104) = *(void *)(a1 + 120);
  *(void *)(a2 + 112) = 0;
  *(int8x16_t *)(a2 + 120) = vextq_s8(*(int8x16_t *)(a1 + 168), *(int8x16_t *)(a1 + 168), 8uLL);
  *(int8x16_t *)(a2 + 136) = vextq_s8(*(int8x16_t *)(a1 + 136), *(int8x16_t *)(a1 + 136), 8uLL);
  *(int8x16_t *)(a2 + 152) = vextq_s8(*(int8x16_t *)(a1 + 152), *(int8x16_t *)(a1 + 152), 8uLL);
  uint64_t v7 = *(void *)(a1 + 112);
  *(void *)(a2 + 168) = *(void *)(a1 + 64);
  *(void *)(a2 + 176) = v7;
  *(double *)(a2 + 184) = v2;
  *(void *)(a2 + 192) = 0;
  *(int8x16_t *)(a2 + 200) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
  uint64_t v8 = *(void *)(a1 + 80);
  *(void *)(a2 + 216) = *(void *)(a1 + 104);
  *(void *)(a2 + 224) = v8;
  double result = *(double *)(a1 + 128);
  *(double *)(a2 + 232) = result;
  return result;
}

uint64_t NK_Map_Vector(int *a1, uint64_t a2, uint64_t a3)
{
  v143[1] = *MEMORY[0x263EF8340];
  double v6 = a1 + 15246;
  uint64_t result = Core_Get_ExtA_MapV(6000, (uint64_t)(a1 + 15246));
  if (!result) {
    return result;
  }
  BOOL v8 = 0;
  *((unsigned char *)a1 + 62252) = 1;
  a1[15564] = 0;
  int v9 = a1[1];
  int v10 = *v6;
  int v11 = v9 - *v6;
  a1[15566] = v11;
  int v12 = a1[14986];
  if (v12 == 1) {
    BOOL v8 = a1[14985] == 8 && a1[14987] == 3;
  }
  uint64_t v13 = (unsigned char *)(a2 + 27250);
  if (a1[14983] == 1)
  {
    BOOL v14 = *((unsigned char *)a1 + 59964) != 0;
    if (v8) {
      goto LABEL_13;
    }
LABEL_10:
    if (v12 || a1[14985] == 8)
    {
      if (*v13) {
        goto LABEL_13;
      }
    }
    else
    {
      int v73 = v11 < 3101 || v14;
      if (*v13 && v73)
      {
        a1[15564] = 12;
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    int v72 = 13;
    goto LABEL_67;
  }
  BOOL v14 = 0;
  if (!v8) {
    goto LABEL_10;
  }
LABEL_13:
  BOOL v133 = v8;
  if (*(unsigned char *)(p_NA + 381) && *(_DWORD *)(p_NA + 26780))
  {
    int v130 = *(_DWORD *)(p_NA + 26780);
    char v129 = 0;
    if (!*((unsigned char *)a1 + 62340))
    {
      *((unsigned char *)a1 + 62332) = 1;
      *((unsigned char *)a1 + 62340) = 1;
    }
  }
  else
  {
    char v129 = 1;
    int v130 = 0;
  }
  uint64_t v15 = (_DWORD *)(a2 + 68016);
  BOOL v135 = v14;
  if (*(double *)(a3 + 984) >= 3.0)
  {
    double v16 = *(double *)(a3 + 912);
    if (v16 < 15.0)
    {
      int v134 = 0;
      int v132 = 0;
      uint64_t v131 = 1;
      goto LABEL_24;
    }
    LODWORD(v131) = 0;
    HIDWORD(v131) = v16 < 45.0;
    int v134 = v16 >= 45.0;
  }
  else
  {
    uint64_t v131 = 0;
    int v134 = 1;
  }
  int v132 = 1;
LABEL_24:
  double v17 = *((double *)v6 + 2);
  double v18 = *((double *)v6 + 1) * 0.0174532925;
  long double __x = cos(v18);
  double v19 = *((double *)v6 + 5);
  __double2 v20 = __sincos_stret(v19 * 0.0174532925);
  if (!*((unsigned char *)v6 + 32)) {
    *((void *)v6 + 3) = *((void *)a1 + 215);
  }
  double v21 = v17 * 0.0174532925;
  int v22 = v10 - *v15;
  if (v10 == *v15)
  {
    double v23 = 1.0;
    if (v11 >= 1000) {
      double v23 = (double)v11 * 0.001 + 1.0;
    }
  }
  else
  {
    if ((v22 - 1) >> 4 > 0x176) {
      goto LABEL_37;
    }
    if (!*(unsigned char *)(a2 + 68088)) {
      goto LABEL_37;
    }
    double v25 = *(double *)(a2 + 68024);
    double v24 = *(double *)(a2 + 68032);
    double v26 = cos(__x);
    double v27 = vabdd_f64(v19, *(double *)(a2 + 68056));
    if (v27 >= 5.0) {
      goto LABEL_37;
    }
    double v28 = vabdd_f64(*((double *)v6 + 7), *(double *)(a2 + 68072));
    if (v28 < 2.0
      && (double v29 = v25 * 0.0174532925,
          double v30 = v24 * 0.0174532925,
          double v31 = sqrt(v26 * ((v21 - v30) * 6378137.0) * (v26 * ((v21 - v30) * 6378137.0))+ (v18 - v25 * 0.0174532925) * 6378137.0 * ((v18 - v25 * 0.0174532925) * 6378137.0)), v31 < *(double *)(a2 + 68064) * 0.3))
    {
      *(_OWORD *)double v6 = *(_OWORD *)v15;
      long long v32 = *(_OWORD *)(a2 + 68032);
      long long v33 = *(_OWORD *)(a2 + 68048);
      long long v34 = *(_OWORD *)(a2 + 68064);
      *((void *)v6 + 8) = *(void *)(a2 + 68080);
      *((_OWORD *)v6 + 2) = v33;
      *((_OWORD *)v6 + 3) = v34;
      *((_OWORD *)v6 + 1) = v32;
      long double __x = cos(v29);
      int v35 = *v6;
      a1[15566] = v9 - *v6;
      double v36 = (double)(v9 - v35) * 0.001 + 1.0;
      if (v9 - v35 <= 999) {
        double v36 = 1.0;
      }
      double v128 = v28;
      double v23 = v36;
      EvLog_v("NK_Map_Vector: DUPLICATE OS_TT P %d C %d [dt] T %d D %g W %g H %g ", *v15, v35, v22, v31, v128, v27);
      double v21 = v30;
      double v18 = v29;
    }
    else
    {
LABEL_37:
      double v141 = v18;
      double v142 = v21;
      v143[0] = *((void *)v6 + 3);
      Geo2ECEF((uint64_t)&v141, (uint64_t)&WGS84_Datum, (double *)(a2 + 68120));
      double v37 = *((double *)v6 + 6);
      double v38 = v20.__cosval * v37;
      double v39 = v20.__sinval * v37;
      double v40 = v21 + v20.__sinval * v37 / *(double *)(a2 + 68296);
      double v141 = v18 + v20.__cosval * v37 / *(double *)(a2 + 68288);
      double v142 = v40;
      Geo2ECEF((uint64_t)&v141, (uint64_t)&WGS84_Datum, (double *)(a2 + 68096));
      *(double *)(a2 + 68144) = v38;
      *(double *)(a2 + 68152) = v39;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v6;
      long long v41 = *((_OWORD *)v6 + 1);
      long long v42 = *((_OWORD *)v6 + 2);
      long long v43 = *((_OWORD *)v6 + 3);
      *(void *)(a2 + 68080) = *((void *)v6 + 8);
      *(_OWORD *)(a2 + 68048) = v42;
      *(_OWORD *)(a2 + 68064) = v43;
      *(_OWORD *)(a2 + 68032) = v41;
      *(unsigned char *)(a2 + 68088) = 0;
      double v23 = 1.0;
    }
  }
  uint64_t v44 = 0;
  double v141 = 0.0;
  double v142 = 0.0;
  v143[0] = 0;
  double v138 = 0.0;
  double v139 = 0.0;
  uint64_t v140 = 0;
  do
  {
    *(double *)&v143[v44] = *(double *)&a1[2 * v44 + 394] - *(double *)(a2 + 68112 + 8 * v44);
    unint64_t v45 = v44 + 3;
    --v44;
  }
  while (v45 > 1);
  uint64_t v46 = 0;
  double v47 = v141;
  double v48 = v142;
  uint64_t v49 = (double *)(a1 + 438);
  double v50 = *(double *)v143;
  do
  {
    double v51 = *(v49 - 1) * v48 + *(v49 - 2) * v47;
    double v52 = *v49;
    v49 += 3;
    *(double *)((char *)&v138 + v46) = v51 + v52 * v50;
    v46 += 8;
  }
  while (v46 != 24);
  double v53 = *(double *)(a2 + 68144);
  double v54 = *(double *)(a2 + 68152);
  double v55 = sqrt(v54 * v54 + 0.0 + v53 * v53);
  if (v55 <= 1.0e-14 || (double v56 = sqrt(v139 * v139 + 0.0 + v138 * v138), v56 <= 1.0e-14))
  {
LABEL_58:
    uint64_t result = 0;
    int v72 = 16;
LABEL_67:
    a1[15564] = v72;
    *((unsigned char *)a1 + 62260) = 0;
    return result;
  }
  uint64_t v57 = 0;
  double v58 = (0.0 - v53 * v138 - v54 * v139) / (v55 * v56);
  double v59 = fabs(v58);
  if (v59 > 1.0) {
    double v58 = v59 / v58;
  }
  do
  {
    *(double *)&v143[v57] = *(double *)&a1[2 * v57 + 394] - *(double *)(a2 + 68136 + 8 * v57);
    unint64_t v60 = v57 + 3;
    --v57;
  }
  while (v60 > 1);
  uint64_t v61 = 0;
  double v62 = v141;
  double v63 = v142;
  uint64_t v64 = (double *)(a1 + 438);
  double v65 = *(double *)v143;
  do
  {
    double v66 = *(v64 - 1) * v63 + *(v64 - 2) * v62;
    double v67 = *v64;
    v64 += 3;
    *(double *)((char *)&v138 + v61) = v66 + v67 * v65;
    v61 += 8;
  }
  while (v61 != 24);
  double v68 = sqrt(v139 * v139 + 0.0 + v138 * v138);
  if (v68 <= 1.0e-14)
  {
    if (v58 < 0.0)
    {
LABEL_56:
      uint64_t result = 0;
      *((unsigned char *)a1 + 62260) = 0;
      int v71 = 17;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  double v69 = (v53 * v138 + 0.0 + v54 * v139) / (v55 * v68);
  double v70 = fabs(v69);
  if (v70 > 1.0) {
    double v69 = v70 / v69;
  }
  if (v58 < 0.0) {
    goto LABEL_56;
  }
  if (v69 < 0.0)
  {
    uint64_t result = 0;
    *((unsigned char *)a1 + 62260) = 0;
    int v71 = 18;
LABEL_57:
    a1[15564] = v71;
    return result;
  }
  uint64_t v74 = 0;
  double v75 = 0.0;
  do
  {
    double v76 = *(double *)(a2 + 68136 + 8 * v74) - *(double *)&a1[2 * v74 + 394];
    double v75 = v75 + v76 * v76;
    unint64_t v77 = v74 + 3;
    --v74;
  }
  while (v77 > 1);
  double v78 = acos(v69);
  double v79 = sqrt(v75);
  __double2 v80 = __sincos_stret(v78);
  double v81 = v80.__sinval * v79;
  *((double *)v6 + 35) = v80.__cosval * v79;
  *((double *)v6 + 36) = v80.__sinval * v79;
  if (v80.__cosval * v79 < 0.0)
  {
    if (v80.__cosval * v79 < *((double *)v6 + 6) * -0.05)
    {
      uint64_t result = 0;
      int v72 = 14;
      goto LABEL_67;
    }
    *((void *)v6 + 35) = 0;
  }
  int v82 = v134;
  if (v81 > 35.0) {
    int v82 = 1;
  }
  if (v82 == 1
    && *((unsigned char *)a1 + 60200)
    && a1[15051] == 1
    && !*((unsigned char *)a1 + 60216)
    && !a1[15572]
    && *((double *)a1 + 7531) < 90000.0
    && (a1[15052] - 3) <= 1)
  {
    double v83 = (*((double *)a1 + 7528) - v18) * 6378137.0;
    double v84 = __x * ((*((double *)a1 + 7529) - v21) * 6378137.0);
    double v85 = *(double *)(a2 + 68144);
    double v86 = *(double *)(a2 + 68152);
    double v87 = v86 * v86 + v85 * v85;
    double v88 = v85 * v86;
    if (v87 <= 1.0) {
      double v87 = 1.0;
    }
    double v89 = v85 * v85;
    double v90 = (v88 * v84 + v89 * v83) / v87;
    double v91 = (v83 * v88 + v89 * v84) / v87;
    *((double *)v6 + 38) = sqrt(v91 * v91 + v90 * v90);
    v137[2] = 0.0;
    v137[0] = v18 + v90 * 0.000000156785594;
    v137[1] = v21 + v91 * (1.0 / (__x * 6378137.0));
    double v92 = Horiz_Diff_Sqd(v137, (const double *)a1 + 7528);
    *((double *)v6 + 39) = sqrt(v92);
    BOOL v93 = v92 < *((double *)a1 + 7531) * 9.0;
    double v81 = *((double *)v6 + 36);
  }
  else
  {
    BOOL v93 = 0;
  }
  if (v81 > 35.0 && (!v93 || *((double *)v6 + 39) > 17.5 || *((double *)v6 + 38) > *((double *)v6 + 6) * 1.5))
  {
    uint64_t result = 0;
    int v72 = 15;
    goto LABEL_67;
  }
  double v94 = *(double *)(a2 + 27240);
  if (v94 <= 0.5) {
    int v95 = 7000;
  }
  else {
    int v95 = 3000;
  }
  if (v94 <= 5.0) {
    int v96 = v95;
  }
  else {
    int v96 = 5000;
  }
  if (v94 > 17.0) {
    int v96 = 7000;
  }
  int v97 = *a1;
  if (*a1 - *(_DWORD *)(a2 + 27336) >= v96)
  {
    float64x2_t v98 = (double *)(a1 + 464);
    if (*(int *)(a2 + 27276) >= 2) {
      float64x2_t v98 = (double *)(a2 + 27280);
    }
  }
  else
  {
    float64x2_t v98 = (double *)(a2 + 27328);
  }
  double v99 = *((double *)v6 + 5);
  double v100 = *v98 - v99;
  *((double *)v6 + 37) = v100;
  if (v100 >= 180.0)
  {
    double v101 = -360.0;
  }
  else
  {
    if (v100 >= -180.0) {
      goto LABEL_110;
    }
    double v101 = 360.0;
  }
  double v100 = v100 + v101;
  *((double *)v6 + 37) = v100;
LABEL_110:
  double v102 = fabs(v100);
  if ((v131 | HIDWORD(v131)) == 1)
  {
    if (v102 > 45.0)
    {
      uint64_t result = 0;
      int v72 = 19;
      goto LABEL_67;
    }
  }
  else
  {
    if (v102 <= 45.0) {
      BOOL v93 = 0;
    }
    if (v93 && *((double *)v6 + 39) > 17.5 && *((double *)v6 + 38) > *((double *)v6 + 6) * 1.5)
    {
      uint64_t result = 0;
      int v72 = 20;
      goto LABEL_67;
    }
  }
  double v103 = *((double *)v6 + 35);
  v104.f64[0] = v20.__cosval;
  v104.f64[1] = v20.__sinval;
  float64x2_t v105 = vdivq_f64(vmulq_n_f64(v104, v103), *(float64x2_t *)(a2 + 68288));
  float64x2_t v106 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D44uLL);
  double v107 = *((double *)v6 + 6);
  double v108 = *((double *)v6 + 7);
  if (v107 - v103 <= 0.0) {
    double v109 = 1.0;
  }
  else {
    double v109 = v107 - v103;
  }
  if (v135)
  {
    double v110 = v107 * 0.05;
    double v111 = 0.25;
LABEL_131:
    double v113 = v108 * v111;
    goto LABEL_132;
  }
  double v110 = v107 * 3.0;
  if (*((unsigned char *)v6 + 68) || *((unsigned char *)v6 + 65)) {
    goto LABEL_130;
  }
  char v112 = v129;
  if ((v130 - 5) < 3) {
    char v112 = 1;
  }
  if ((v112 & 1) == 0)
  {
LABEL_130:
    double v111 = 0.166666667;
    goto LABEL_131;
  }
  double v113 = v108 * 0.333333333;
LABEL_132:
  float64x2_t v114 = vmlaq_f64(v105, v106, *((float64x2_t *)a1 + 3812));
  int v115 = v132;
  if (v109 >= v107 * 0.333333333) {
    int v115 = 0;
  }
  if (v115 == 1) {
    double v113 = v113 + v103 * 0.5 * (1.0 / sqrt(v109));
  }
  *((unsigned char *)v6 + 72) = 1;
  v6[19] = 1;
  v6[21] = 0;
  *((unsigned char *)v6 + 88) = 0;
  v6[23] = v97;
  *((float64x2_t *)v6 + 6) = v114;
  *((double *)v6 + 18) = v110 * v110;
  *((double *)v6 + 19) = v113 * v113;
  *((double *)v6 + 15) = v110 * v110;
  *((double *)v6 + 16) = v113 * v113;
  if (*(unsigned char *)(a2 + 68088)) {
    v6[21] = 2;
  }
  if (!v135)
  {
    *((double *)v6 + 15) = v23 * (v110 * v110);
    *((double *)v6 + 16) = v23 * (v113 * v113);
  }
  if (v99 >= 180.0) {
    double v116 = v99 + -180.0;
  }
  else {
    double v116 = v99;
  }
  *((double *)v6 + 17) = v116 * 0.0174532925;
  *((void *)v6 + 22) = 0x4039000000000000;
  BOOL v117 = v133;
  if (*((double *)v6 + 117) >= 10.0) {
    BOOL v117 = 0;
  }
  if (v117)
  {
    BOOL v118 = 0;
  }
  else
  {
    BOOL v118 = Horz_Meas_Update(6u, (double *)a1 + 213, (double *)a1 + 217, 0xCu, (double *)v6 + 9, a2 + 976, (_WORD *)(a2 + 27090));
    int v97 = *a1;
    double v99 = *((double *)v6 + 5);
  }
  *((unsigned char *)v6 + 200) = 1;
  *((unsigned char *)v6 + 1148) = v118;
  *(unsigned char *)(a2 + 68088) = v118;
  v6[51] = 1;
  v6[54] = v97;
  *((unsigned char *)v6 + 212) = 0;
  Comp_Track8((long double *)a1 + 227);
  *((void *)v6 + 30) = v119;
  *((double *)v6 + 28) = v99;
  *((void *)v6 + 29) = 0x3FD0000000000000;
  double v120 = 0.25;
  BOOL v121 = v133;
  if ((v132 & !v135) == 1)
  {
    double v122 = 1.0;
    if (v109 < *((double *)v6 + 6) * 0.333333333) {
      double v122 = fabs(*((double *)v6 + 37)) * 0.5 + 1.0;
    }
    double v120 = v122 * v122;
    *((double *)v6 + 29) = v120;
  }
  if (!v135)
  {
    double v120 = v23 * v23 * v120;
    *((double *)v6 + 29) = v120;
  }
  double v123 = *((double *)v6 + 126);
  if (v123 >= 10.0) {
    BOOL v121 = 0;
  }
  if (v121) {
    *((double *)v6 + 29) = v120 * (10.0 / v123 * (10.0 / v123));
  }
  *((void *)v6 + 32) = 0x4039000000000000;
  double v124 = *((double *)a1 + 231);
  *((double *)v6 + 34) = v124;
  int v125 = v124 < 1.0 || v135;
  if (v125 == 1) {
    *((unsigned char *)v6 + 200) = 0;
  }
  BOOL v126 = Track_Meas_Update(9, (double *)a1 + 217, 0xCu, (unsigned __int8 *)v6 + 200, a2 + 976, (_WORD *)(a2 + 27108), v99, v124, 1.0);
  *((unsigned char *)v6 + 1149) = v126;
  if (!v135 && ((*((double *)a1 + 231) >= 1.0) & ~v134) != 0)
  {
    if (v126) {
      *((void *)a1 + 232) = *((void *)v6 + 5);
    }
  }
  else
  {
    uint64_t v127 = *((void *)v6 + 5);
    *((void *)a1 + 232) = v127;
    *(void *)(a2 + 27328) = v127;
    *(_DWORD *)(a2 + 27336) = *a1;
  }
  uint64_t result = 1;
  *((unsigned char *)a1 + 62260) = 1;
  return result;
}

BOOL Is_GAL_IntEph_Real(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44)
      || *(_WORD *)(a1 + 48)
      || *(_WORD *)(a1 + 50)
      || *(_WORD *)(a1 + 52)
      || *(_WORD *)(a1 + 54)
      || *(_WORD *)(a1 + 56)
      || *(_WORD *)(a1 + 58)
      || *(_WORD *)(a1 + 60)
      || *(_WORD *)(a1 + 62)
      || *(_WORD *)(a1 + 72) != 0;
}

uint64_t LbsOsaTrace_Init(uint64_t result)
{
  g_LbsOsaTrace_Config = 1;
  switch((int)result)
  {
    case 0:
      int v2 = 0;
      g_LbsOsaTrace_Config = 0;
      goto LABEL_12;
    case 1:
    case 2:
      g_LbsOsaTrace_Config = 1;
      g_LbsOsaTrace_Config = 0;
      goto LABEL_4;
    case 3:
      char v3 = (_DWORD *)&unk_26A9CB000;
      int v2 = 2;
      goto LABEL_11;
    case 4:
      char v3 = (_DWORD *)&unk_26A9CB000;
      int v2 = 3;
      goto LABEL_11;
    case 5:
      char v3 = &unk_26A9CB000;
      int v2 = 4;
LABEL_11:
      v3[782] = v2;
      goto LABEL_12;
    case 6:
    case 7:
    case 8:
      g_LbsOsaTrace_Config = 5;
LABEL_4:
      int v1 = result - 1;
      if ((result - 1) > 7 || ((0xE3u >> v1) & 1) == 0) {
        return result;
      }
      int v2 = dword_263D847E0[v1];
LABEL_12:
      g_LbsOsaTrace_Config = v2;
      return result;
    default:
      return result;
  }
}

char *LbsOsaTrace_ModuleString(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1 < 0xE) {
    return off_2655E7040[a1];
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 87, "LbsOsaTrace_ModuleString", 515, v1);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 0;
}

uint64_t LbsOsaTrace_FormatBuffer(unsigned int a1, unsigned int a2, const void *a3, size_t a4, char *a5, unsigned int a6)
{
  unsigned __int16 v6 = 0;
  if (a3 && a5)
  {
    if (a2 > 5) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = dword_263D84800[a2];
    }
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    BOOL v14 = LbsOsaTrace_ModuleString(a1);
    int v15 = snprintf(a5, a6 - 1, "%10u %s%c ", v13, v14, v12);
    if (v15 < 1)
    {
      return 0;
    }
    else
    {
      int v16 = v15;
      memcpy_s("LbsOsaTrace_FormatBuffer", 303, &a5[v15], a6 - v15, a3, a4);
      unsigned __int16 v6 = v16 + a4;
      if (v16 + (int)a4 >= a6) {
        return (unsigned __int16)a6;
      }
    }
  }
  return v6;
}

uint64_t LbsOsaTrace_PrintAsciiBuf(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a5)
  {
    int v9 = 0;
    unsigned __int16 v10 = 0;
    uint64_t v23 = (int)a2;
    do
    {
      int v11 = (unsigned __int8 *)(a4 + (unsigned __int16)v9);
      int v12 = *v11;
      if (v12 == 10 || v12 == 13)
      {
        *int v11 = 0;
        if ((unsigned __int16)v9 == v10)
        {
          bzero(__str, 0x3E8uLL);
          uint64_t v14 = mach_continuous_time();
          double v15 = *(double *)&g_MacClockTicksToMsRelation;
          int v16 = LbsOsaTrace_ModuleString(a1);
          if (a2 > 5) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = dword_263D84800[v23];
          }
          snprintf(__str, 0x3E7uLL, "%10u %s%c %s\n", (unint64_t)(v15 * (double)v14), v16, v17, (const char *)&str_23_7);
        }
        else
        {
          bzero(__str, 0x3E8uLL);
          uint64_t v18 = mach_continuous_time();
          double v19 = *(double *)&g_MacClockTicksToMsRelation;
          __double2 v20 = LbsOsaTrace_ModuleString(a1);
          if (a2 > 5) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = dword_263D84800[v23];
          }
          snprintf(__str, 0x3E7uLL, "%10u %s%c %s\n", (unint64_t)(v19 * (double)v18), v20, v21, (const char *)(a4 + v10));
        }
        gnssOsa_PrintLog(__str, a2, 1, 0);
        *int v11 = v12;
        if (v12 == 13 && v11[1] == 10) {
          ++v9;
        }
        unsigned __int16 v10 = ++v9;
      }
      else
      {
        ++v9;
      }
    }
    while (a5 > (unsigned __int16)v9);
  }
  return a5;
}

double GPS_Klob_Iono_Delay(double *a1, uint64_t a2, uint64_t a3, char *a4, double a5)
{
  double v7 = *(double *)(a3 + 24) * 0.318309886;
  double v8 = 0.0137 / (v7 + 0.11) + -0.022;
  double v9 = *(double *)(a2 + 16) * v8 + *a1 * 0.318309886;
  double v10 = -0.416;
  if (v9 >= -0.416)
  {
    double v10 = *(double *)(a2 + 16) * v8 + *a1 * 0.318309886;
    if (v9 > 0.416) {
      double v10 = 0.416;
    }
  }
  double v11 = a1[1];
  double v12 = v8 * *(double *)(a2 + 8);
  double v13 = v12 / cos(v10 * 3.14159265) + v11 * 0.318309886;
  double v14 = v10 + cos((v13 + -1.617) * 3.14159265) * 0.064;
  double v15 = a5 + v13 * 43200.0 - (double)(86400 * (int)((a5 + v13 * 43200.0) * 0.0000115740741));
  double v16 = v15 + 86400.0;
  if (v15 >= 0.0) {
    double v16 = a5 + v13 * 43200.0 - (double)(86400 * (int)((a5 + v13 * 43200.0) * 0.0000115740741));
  }
  double v17 = (double)a4[13] * 16384.0 * v14
      + (double)a4[12] * 2048.0
      + (double)a4[14] * 65536.0 * (v14 * v14)
      + (double)a4[15] * 65536.0 * (v14 * v14) * v14;
  if (v17 < 72000.0) {
    double v17 = 72000.0;
  }
  double v18 = (v16 + -50400.0) * 6.28318531 / v17;
  if (fabs(v18) >= 1.57)
  {
    double v20 = 0.000000005;
  }
  else
  {
    double v19 = v14 * ((double)a4[9] * 0.0000000074505806)
        + (double)a4[8] * 9.31322575e-10
        + (double)a4[10] * 0.0000000596046448 * (v14 * v14)
        + v14 * ((double)a4[11] * 0.0000000596046448) * (v14 * v14);
    if (v19 < 0.0) {
      double v19 = 0.0;
    }
    double v20 = v19 * (v18 * v18 * -0.5 + 1.0 + v18 * v18 * (v18 * v18) * 0.0416666667) + 0.000000005;
  }
  return ((0.53 - v7) * ((0.53 - v7) * 16.0) * (0.53 - v7) + 1.0) * v20 * 299792458.0;
}

uint64_t GM_Aid_NSSS_Meas(uint64_t a1, unsigned int a2, int *a3)
{
  if (!*(unsigned char *)(a1 + 4) || !*(unsigned char *)(a1 + 15) || *(unsigned __int8 *)(a1 + 14) < a2) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  *a3 = *(_DWORD *)(a1 + 28);
  int v5 = a3[1] % 1023;
  unsigned int v6 = 1023 * (v4 / 1023);
  int v7 = v4 % 1023;
  if (v5 < 769 || v7 > 255)
  {
    if (v7 > 768 && v5 < 256) {
      uint64_t v8 = v6 + 1023;
    }
    else {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = v6 - 1023;
  }
  a3[1] = v5;
  Inc_CA_Chips(v8, a3 + 1, a3);
  return 1;
}

double ECEF2FSD_RotM(const double (*a1)[3], double a2, double (*a3)[3])
{
  __double2 v5 = __sincos_stret(a2);
  (*a3)[0] = v5.__sinval * (*a1)[3] + v5.__cosval * (*a1)[0];
  (*a3)[1] = v5.__sinval * (*a1)[4] + v5.__cosval * (*a1)[1];
  (*a3)[2] = v5.__sinval * (*a1)[5] + v5.__cosval * (*a1)[2];
  (*a3)[3] = v5.__cosval * (*a1)[3] - v5.__sinval * (*a1)[0];
  (*a3)[4] = v5.__cosval * (*a1)[4] - v5.__sinval * (*a1)[1];
  (*a3)[5] = v5.__cosval * (*a1)[5] - v5.__sinval * (*a1)[2];
  (*a3)[6] = (*a1)[6];
  (*a3)[7] = (*a1)[7];
  double result = (*a1)[8];
  (*a3)[8] = result;
  return result;
}

BOOL Speed_Meas_Update(unsigned int a1, double *a2, unsigned int a3, unsigned __int8 *a4, double *a5, _WORD *a6, double a7)
{
  double v27[33] = *(double *)MEMORY[0x263EF8340];
  if ((*((_DWORD *)a4 + 1) - 1) > 1) {
    return 0;
  }
  a4[12] = 0;
  if (*a4)
  {
    double v22 = 0.0;
    double v10 = *a2;
    double v11 = a2[1];
    *(double *)uint64_t v25 = *a2;
    *(double *)&v25[1] = v11;
    double v12 = a2[2];
    *(double *)&unsigned char v25[2] = v12;
    double v13 = 0.0;
    uint64_t v14 = 2;
    do
    {
      double v13 = v13 + *(double *)&v25[v14] * *(double *)&v25[v14];
      unint64_t v15 = v14-- + 1;
    }
    while (v15 > 1);
    double v16 = sqrt(v13);
    double v17 = v16 - *((double *)a4 + 3) * a7;
    *((double *)a4 + 5) = v16;
    *((double *)a4 + 6) = v17;
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    if (v16 >= 0.0001)
    {
      *((double *)&v23[1] + a1) = v12 / v16;
      *((double *)v23 + a1 + 1) = v11 / v16;
      double v18 = v10 / v16;
    }
    else
    {
      *((void *)&v23[1] + a1) = 0x3FF0000000000000;
      *((void *)v23 + a1 + 1) = 0x3FF0000000000000;
      double v18 = 1.0;
    }
    *((double *)v23 + a1) = v18;
    *((double *)v23 + a3) = v17;
    umeas((BOOL)a5, a3, *((double *)a4 + 4), (double *)v23, v27, v26, &v22, *((double *)a4 + 7));
    double v21 = v22;
    if (v22 <= 0.0)
    {
      int v20 = 0;
      *a4 = 0;
      a4[12] = 1;
      ++*a6;
      *((double *)a4 + 8) = v21 + *((double *)a4 + 8);
    }
    else
    {
      *((double *)a4 + 8) = *((double *)a4 + 4) * (v22 * (v27[a3] * v27[a3]));
      int v20 = *a4;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v20 != 0;
}

uint64_t NK_AltP_Aiding_Required(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[3] = *(double *)MEMORY[0x263EF8340];
  uint64_t v6 = a2 + 60088;
  if (*(unsigned char *)(a2 + 60328)
    && *(_DWORD *)(a2 + 60332) == 1
    && (!*(_DWORD *)(a1 + 27136)
     || *(int *)(a2 + 20) < 8
     || *(unsigned char *)(a1 + 241)
     || !*(_DWORD *)(a1 + 296)
     || *(double *)(a2 + 60360) < *(double *)(a1 + 288) * *(double *)(a1 + 288)))
  {
    uint64_t result = 0;
    *(unsigned char *)a3 = 0;
    return result;
  }
  Comp_NEDvar_UDU(a1 + 976, 0xCu, 6, (double (*)[3])(a2 + 1736), v11);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 > 8) {
    unsigned __int8 v9 = 3;
  }
  else {
    unsigned __int8 v9 = 4;
  }
  if (*(_DWORD *)(v6 + 2004) == 1 && *(double *)(v6 + 272) < 900.0)
  {
    unsigned __int8 v9 = 0;
  }
  else if (*(_DWORD *)(v6 + 1980) == 1 && *(double *)v6 < 1.0e-14)
  {
    --v9;
  }
  if (*(unsigned char *)(a1 + 241) || !*(_DWORD *)(a1 + 27136))
  {
    if (v8 >= 9 && *(unsigned __int8 *)(v6 + 1946) < 3u)
    {
      double v10 = 40000.0;
      goto LABEL_25;
    }
  }
  else if (v8 >= 8)
  {
    if ((*(_DWORD *)(a1 + 20) - 2) >= 3) {
      double v10 = dbl_263D84890[*(unsigned char *)(v6 + 1757) == 0];
    }
    else {
      double v10 = 10000.0;
    }
    goto LABEL_25;
  }
  double v10 = 250000.0;
LABEL_25:
  if (*(_DWORD *)(a1 + 296)
    && (*(unsigned __int8 *)(v6 + 1946) < v9 || v11[2] + *(double *)(a1 + 15512) > v10)
    && (*(unsigned char *)(v6 + 1945) || *(_DWORD *)(v6 + 2000) && *(double *)(v6 + 272) < 10000.0))
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 24) = *(void *)(a1 + 280);
    *(double *)(a3 + 32) = *(double *)(a1 + 288) * *(double *)(a1 + 288);
  }
  if (!*(unsigned char *)a3) {
    return 0;
  }
  *(_DWORD *)(a3 + 4) = 2;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)a2;
  *(void *)(a3 + 56) = 0x4059000000000000;
  return 1;
}

uint64_t GPS_EphInt2Bin(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(void *)result;
  char v2 = *(unsigned char *)(result + 9);
  if (v2 >= 0) {
    int v3 = (v2 & 0xF) << 8;
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(result + 22);
  *(_DWORD *)(a2 + 8) = ((*(_WORD *)(result + 16) & 0x3FF) << 14) | ((*(unsigned char *)(result + 8) & 3) << 12) | v3 & 0xFFFFFF00 | (4 * (*(unsigned char *)(result + 10) & 0x3F)) | (v4 >> 8) & 3;
  *(_DWORD *)(a2 + 12) = 0;
  *(void *)(a2 + 16) = 0;
  int v5 = *(unsigned __int16 *)(result + 18) | (v4 << 16);
  *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(result + 14);
  *(_DWORD *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 32) = *(unsigned __int16 *)(result + 24) | (*(unsigned __int8 *)(result + 15) << 16);
  int v6 = *(unsigned __int16 *)(result + 30) | (v4 << 16);
  *(_DWORD *)(a2 + 36) = 4 * (*(_DWORD *)(result + 44) & 0x3FFFFF);
  *(_DWORD *)(a2 + 40) = v6;
  HIDWORD(v7) = *(unsigned __int16 *)(result + 26);
  LODWORD(v7) = *(_DWORD *)(result + 48);
  *(_DWORD *)(a2 + 44) = v7 >> 24;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(result + 48) & 0xFFFFFF;
  HIDWORD(v7) = *(unsigned __int16 *)(result + 36);
  LODWORD(v7) = *(_DWORD *)(result + 52);
  *(_DWORD *)(a2 + 52) = v7 >> 24;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(result + 52) & 0xFFFFFF;
  HIDWORD(v7) = *(unsigned __int16 *)(result + 34);
  LODWORD(v7) = *(_DWORD *)(result + 56);
  *(_DWORD *)(a2 + 60) = v7 >> 24;
  int v8 = ((*(unsigned char *)(result + 11) & 1) << 7) | (*(unsigned __int16 *)(result + 20) << 8) | (4
                                                                                         * (*(unsigned char *)(result + 12) & 0x1F));
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(result + 56) & 0xFFFFFF;
  *(_DWORD *)(a2 + 68) = v8;
  HIDWORD(v7) = *(unsigned __int16 *)(result + 40);
  LODWORD(v7) = *(_DWORD *)(result + 60);
  *(_DWORD *)(a2 + 72) = v7 >> 24;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(result + 60) & 0xFFFFFF;
  HIDWORD(v7) = *(unsigned __int16 *)(result + 38);
  LODWORD(v7) = *(_DWORD *)(result + 64);
  *(_DWORD *)(a2 + 80) = v7 >> 24;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(result + 64) & 0xFFFFFF;
  HIDWORD(v7) = *(unsigned __int16 *)(result + 32);
  LODWORD(v7) = *(_DWORD *)(result + 68);
  *(_DWORD *)(a2 + 88) = v7 >> 24;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(result + 68) & 0xFFFFFF;
  int v9 = (v4 << 16) | (4 * (*(_WORD *)(result + 28) & 0x3FFF));
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(result + 72) & 0xFFFFFF;
  *(_DWORD *)(a2 + 100) = v9;
  *(_DWORD *)(a2 + 104) = 0xFFFFFF;
  *(unsigned char *)(a2 + 108) = *(unsigned char *)(result + 76);
  *(unsigned char *)(a2 + 109) = *(unsigned char *)(result + 77);
  *(_WORD *)(a2 + 110) = *(_WORD *)(result + 78);
  *(_WORD *)(a2 + 112) = *(_WORD *)(result + 80);
  *(unsigned char *)(a2 + 114) = v2;
  return result;
}

BOOL Is_GAL_IntEph_Same(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 12) == *(unsigned __int16 *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(unsigned __int16 *)(a1 + 48) == *(unsigned __int16 *)(a2 + 48)
      && *(unsigned __int16 *)(a1 + 50) == *(unsigned __int16 *)(a2 + 50)
      && *(unsigned __int16 *)(a1 + 52) == *(unsigned __int16 *)(a2 + 52)
      && *(unsigned __int16 *)(a1 + 54) == *(unsigned __int16 *)(a2 + 54)
      && *(unsigned __int16 *)(a1 + 56) == *(unsigned __int16 *)(a2 + 56)
      && *(unsigned __int16 *)(a1 + 58) == *(unsigned __int16 *)(a2 + 58)
      && *(unsigned __int16 *)(a1 + 60) == *(unsigned __int16 *)(a2 + 60)
      && *(unsigned __int16 *)(a1 + 62) == *(unsigned __int16 *)(a2 + 62)
      && *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15)
      && *(unsigned __int16 *)(a1 + 74) == *(unsigned __int16 *)(a2 + 74)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
      && *(unsigned __int16 *)(a1 + 72) == *(unsigned __int16 *)(a2 + 72)
      && *(unsigned __int16 *)(a1 + 76) == *(unsigned __int16 *)(a2 + 76)
      && *(unsigned __int16 *)(a1 + 78) == *(unsigned __int16 *)(a2 + 78)
      && *(unsigned __int8 *)(a1 + 82) == *(unsigned __int8 *)(a2 + 82)
      && *(unsigned __int8 *)(a1 + 83) == *(unsigned __int8 *)(a2 + 83)
      && *(unsigned __int8 *)(a1 + 85) == *(unsigned __int8 *)(a2 + 85)
      && *(unsigned __int8 *)(a1 + 86) == *(unsigned __int8 *)(a2 + 86)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 87) == *(unsigned __int8 *)(a2 + 87);
}

void AgpsFsmHandler(const void **a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "AgpsFsmHandler");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PId,%x,Cntxt,%p\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 73, "AgpsFsmHandler", *((unsigned __int8 *)a1 + 4), a1[12]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  do
  {
    while (1)
    {
      while (1)
      {
        unsigned int v4 = AgpsDeQueueFsmMsg((uint64_t)a1);
        if (v4) {
          break;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v9 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "AgpsFsmHandler", 517);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      int v5 = v4;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v6 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Event,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 73, "AgpsFsmHandler", *((_DWORD *)v5 + 1));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if (!v5[8])
      {
        if (g_LbsOsaTrace_Config < 4) {
          goto LABEL_23;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid Event,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 73, "AgpsFsmHandler", *((_DWORD *)v5 + 1));
        int v11 = 4;
        goto LABEL_22;
      }
      unint64_t v7 = a1[12];
      if (v7) {
        break;
      }
      if (!g_LbsOsaTrace_Config) {
        goto LABEL_23;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 69, "AgpsFsmHandler", 520);
      int v11 = 1;
LABEL_22:
      gnssOsa_PrintLog(__str, v11, 1, 0);
LABEL_23:
      free(v5);
    }
    while (1)
    {
      int v8 = *(_DWORD *)v7;
      if (*(_DWORD *)v7 == -2)
      {
        unint64_t v7 = (void *)v7[2];
        if (!v7) {
          goto LABEL_35;
        }
        int v8 = *(_DWORD *)v7;
      }
      else if (v8 == -1)
      {
        goto LABEL_27;
      }
      if (*((_DWORD *)v5 + 1) == v8) {
        break;
      }
      v7 += 3;
    }
    if (v8 != -3)
    {
LABEL_27:
      uint64_t v14 = (void *)v7[2];
      unint64_t v15 = (void *)((uint64_t (*)(unsigned __int8 *))v7[1])(v5);
      if (v14 == &g_UnknStatePtr)
      {
        if (v15 == &g_UnknStatePtr)
        {
          LOBYTE(v7) = 1;
          goto LABEL_35;
        }
        if (v15)
        {
          LOBYTE(v7) = 0;
          a1[12] = v15;
          goto LABEL_35;
        }
      }
      else
      {
        double v16 = (const void *)v7[2];
        if (v16)
        {
          LOBYTE(v7) = 0;
          a1[12] = v16;
          goto LABEL_35;
        }
      }
      LOBYTE(v7) = 0;
      goto LABEL_35;
    }
    if (g_LbsOsaTrace_Config <= 3)
    {
      free(v5);
      break;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Shutdown ThreadId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 73, "AgpsFsmHandler", *((unsigned __int8 *)a1 + 4));
    LOBYTE(v7) = 1;
    gnssOsa_PrintLog(__str, 4, 1, 0);
LABEL_35:
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v17 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Completed Event,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 68, "AgpsFsmHandler", *((_DWORD *)v5 + 1));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    free(v5);
  }
  while ((v7 & 1) == 0);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v18 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "OSA", 73, "AgpsFsmHandler");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

void AgpsFsmTimerRoutine(void *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("AgpsFsmSendTimeout", 720, &g_TimerCriticSection))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v2, "OSA", 69, "AgpsFsmSendTimeout", 1550);
    goto LABEL_16;
  }
  if (a1)
  {
    uint64_t v3 = *a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Id,%llx,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 73, "AgpsFsmSendTimeout", *a1, *((_DWORD *)a1 + 2));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (*((_DWORD *)a1 + 2) != -1)
    {
      int v5 = gnssOsa_Calloc("AgpsFsmSendTimeout", 735, 1, 0xCuLL);
      if (!v5)
      {
        if (gnssOsa_MacExitCriticalSection("AgpsFsmSendTimeout", 739, &g_TimerCriticSection)
          && g_LbsOsaTrace_Config)
        {
          goto LABEL_15;
        }
        return;
      }
      AgpsSendFsmMsg(BYTE2(v3), BYTE2(v3), v3, v5);
      if ((gnssOsa_StopTimer("AgpsFsmSendTimeout", 0x2EDu, *((_DWORD *)a1 + 2)) & 1) == 0
        && g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v6 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Id,%llx,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 87, "AgpsFsmSendTimeout", 1545, *a1, *((_DWORD *)a1 + 2));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      *((unsigned char *)a1 + 12) = 0;
      *a1 = 0;
      *((_DWORD *)a1 + 2) = -1;
    }
  }
  if (gnssOsa_MacExitCriticalSection("AgpsFsmSendTimeout", 756, &g_TimerCriticSection)
    && g_LbsOsaTrace_Config)
  {
LABEL_15:
    bzero(__str, 0x3C6uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v7, "OSA", 69, "AgpsFsmSendTimeout", 1551);
LABEL_16:
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

BOOL AgpsFsmExecDeInitCallbacks(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unsigned __int8 v1 = *(void (**)(void))(a1 + 144);
  if (v1)
  {
    v1();
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CB missing PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 87, "AgpsFsmExecDeInitCallbacks", 515, *(unsigned __int8 *)(a1 + 4));
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return v1 != 0;
}

uint64_t AgpsDeinitFsm(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)gnssOsa_Calloc("AgpsDeinitFsm", 287, 1, 0xCuLL);
  if (result)
  {
    *(_DWORD *)(result + 4) = -3;
    *(unsigned char *)(result + 8) = 1;
    AgpsEnQueueFsmMsg(result, a1);
    if (pthread_join(*(pthread_t *)(a1 + 104), 0))
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "AgpsDeinitFsm", 1555, *(unsigned __int8 *)(a1 + 4));
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 0;
    }
    else
    {
      *(void *)(a1 + 104) = 0;
      AgpsDeinitMsgQueue(a1);
      return 1;
    }
  }
  return result;
}

uint64_t AgpsSpawnFsm(uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  pg_AgpsFsmTable = a1;
  g_NumProcess = a2;
  if (!gnssOsa_Init()) {
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Starts\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "AgpsSpawnFsm");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (gnssOsa_InitCriticalSection("AgpsSpawnFsm", 333, &g_TimerCriticSection))
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "AgpsSpawnFsm", 1552);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    uint64_t v4 = 0;
    if (g_LbsOsaTrace_Config >= 4) {
      goto LABEL_7;
    }
    return v4;
  }
  if (gnssOsa_MacEnterCriticalSection("AgpsFsmInitTimer", 67, &g_TimerCriticSection))
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v7 = 1550;
LABEL_16:
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v6, "OSA", 69, "AgpsFsmInitTimer", v7);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
LABEL_17:
      bzero(__str, 0x3C6uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v10, "OSA", 73, "AgpsSpawnFsm");
      goto LABEL_18;
    }
    return 0;
  }
  for (uint64_t i = 0; i != 20; i += 2)
  {
    uint64_t v9 = &vg_OsaTimers[i];
    *uint64_t v9 = 0;
    *((_DWORD *)v9 + 2) = -1;
    *((unsigned char *)v9 + 12) = 0;
  }
  if (gnssOsa_MacExitCriticalSection("AgpsFsmInitTimer", 78, &g_TimerCriticSection))
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v7 = 1551;
    goto LABEL_16;
  }
  uint64_t v12 = pg_AgpsFsmTable;
  if (!*(unsigned char *)(pg_AgpsFsmTable + 4))
  {
LABEL_37:
    if (g_LbsOsaTrace_Config < 4) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v23 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 73, "AgpsSpawnFsm");
    uint64_t v4 = 1;
    gnssOsa_PrintLog(__str, 4, 1, 0);
    return v4;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  while (1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PID,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 73, "AgpsInitFsm", *(unsigned __int8 *)(v12 + 168 * v13 + 4));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsInitMsgQueue(v12 + 168 * v13);
    if (*(void *)(v12 + 168 * v13 + 120))
    {
      if (!gnssOsa_CreateThread("AgpsInitFsm", 239, (_opaque_pthread_t **)(v12 + 168 * v13 + 104), *(_DWORD *)(v12 + 168 * v13 + 128), (void *(__cdecl *)(void *))AgpsFsmHandler, (void *)(v12 + 168 * v13), 0, 0, *(_DWORD *)(v12 + 168 * v13 + 112)))
      {
        if (!g_LbsOsaTrace_Config) {
          goto LABEL_50;
        }
        bzero(__str, 0x3C6uLL);
        *(void *)double v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx With Stack PID,%x\n", *(void *)v26);
        goto LABEL_49;
      }
      goto LABEL_32;
    }
    uint64_t v16 = v12 + 168 * v13;
    unsigned int v17 = *(_DWORD *)(v16 + 128);
    uint64_t v18 = (_opaque_pthread_t **)(v16 + 104);
    int v19 = *(_DWORD *)(v16 + 112);
    if (!v17) {
      break;
    }
    if (!gnssOsa_CreateThread("AgpsInitFsm", 250, v18, v17, (void *(__cdecl *)(void *))AgpsFsmHandler, (void *)(v12 + 168 * v13), 0, 0, v19))
    {
      if (!g_LbsOsaTrace_Config) {
        goto LABEL_50;
      }
      bzero(__str, 0x3C6uLL);
      *(void *)double v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx With Prio PID,%x\n", *(void *)v27);
      goto LABEL_49;
    }
LABEL_32:
    ++v14;
    uint64_t v12 = pg_AgpsFsmTable;
    uint64_t v13 = v14;
    if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v14 + 4))
    {
      if (!*(unsigned char *)(pg_AgpsFsmTable + 4)) {
        goto LABEL_37;
      }
      uint64_t v20 = 0;
      int v21 = 0;
      while (1)
      {
        double v22 = *(void (**)(void))(v12 + 168 * v20 + 136);
        if (!v22) {
          break;
        }
        v22();
        ++v21;
        uint64_t v12 = pg_AgpsFsmTable;
        uint64_t v20 = v21;
        if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v21 + 4)) {
          goto LABEL_37;
        }
      }
      if (!g_LbsOsaTrace_Config) {
        return 0;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v24 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Init CB not regd PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "OSA", 69, "AgpsFsmExecInitCallbacks", 515, *(unsigned __int8 *)(v12 + 168 * v20 + 4));
      gnssOsa_PrintLog(__str, 1, 1, 0);
      uint64_t v4 = 0;
      if (g_LbsOsaTrace_Config < 4) {
        return v4;
      }
      goto LABEL_17;
    }
  }
  if (gnssOsa_CreateThread("AgpsInitFsm", 228, v18, 0, (void *(__cdecl *)(void *))AgpsFsmHandler, (void *)(v12 + 168 * v13), 0, 0, v19))
  {
    goto LABEL_32;
  }
  if (!g_LbsOsaTrace_Config) {
    goto LABEL_50;
  }
  bzero(__str, 0x3C6uLL);
  *(void *)double v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Without Stack PID,%x\n", *(void *)v28);
LABEL_49:
  gnssOsa_PrintLog(__str, 1, 1, 0);
LABEL_50:
  AgpsDeinitMsgQueue(v12 + 168 * v13);
  if (!g_LbsOsaTrace_Config) {
    return 0;
  }
  bzero(__str, 0x3C6uLL);
  uint64_t v25 = mach_continuous_time();
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Failed PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "OSA", 69, "AgpsSpawnFsm", *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v13 + 4));
  gnssOsa_PrintLog(__str, 1, 1, 0);
  uint64_t v4 = 0;
  if (g_LbsOsaTrace_Config < 4) {
    return v4;
  }
LABEL_7:
  bzero(__str, 0x3C6uLL);
  double v5 = (double)mach_continuous_time();
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * v5), "OSA", 73, "AgpsSpawnFsm");
LABEL_18:
  gnssOsa_PrintLog(__str, 4, 1, 0);
  return 0;
}

void AgpsStopAllActiveTimers(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("AgpsStopAllActiveTimers", 373, &g_TimerCriticSection))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v0 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v0, "OSA", 69, "AgpsStopAllActiveTimers", 1550);
    goto LABEL_17;
  }
  for (uint64_t i = 0; i != 20; i += 2)
  {
    uint64_t v2 = &vg_OsaTimers[i];
    if (BYTE4(vg_OsaTimers[i + 1]))
    {
      int v3 = *((_DWORD *)v2 + 2);
      if (v3 != -1)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Id,%llx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 73, "AgpsStopAllActiveTimers", vg_OsaTimers[i]);
          gnssOsa_PrintLog(__str, 4, 1, 0);
          int v3 = *((_DWORD *)v2 + 2);
        }
        if ((gnssOsa_StopTimer("AgpsStopAllActiveTimers", 0x180u, v3) & 1) == 0
          && g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 87, "AgpsStopAllActiveTimers", 1545, *((_DWORD *)v2 + 2));
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        *((unsigned char *)v2 + 12) = 0;
        vg_OsaTimers[i] = 0;
        *((_DWORD *)v2 + 2) = -1;
      }
    }
  }
  if (gnssOsa_MacExitCriticalSection("AgpsStopAllActiveTimers", 392, &g_TimerCriticSection)
    && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v6, "OSA", 69, "AgpsStopAllActiveTimers", 1551);
LABEL_17:
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t AgpsShutdownAllFsm(void)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v0 = g_NumProcess;
  g_NumProcess = 0;
  if (!v0)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 73, "AgpsShutdownAllFsm");
      uint64_t v5 = 1;
      gnssOsa_PrintLog(__str, 4, 1, 0);
      return v5;
    }
    return 1;
  }
  if ((int)v0 >= 1)
  {
    unint64_t v1 = v0 + 1;
    do
    {
      unsigned int v2 = v1 - 2;
      if (*(unsigned char *)(pg_AgpsFsmTable + 168 * (v1 - 2) + 4))
      {
        if (AgpsFsmExecDeInitCallbacks(pg_AgpsFsmTable + 168 * v2))
        {
          AgpsDeinitFsm(pg_AgpsFsmTable + 168 * v2);
        }
        else if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v3 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Failed PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "AgpsShutdownAllFsm", *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v2 + 4));
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      --v1;
    }
    while (v1 > 1);
  }
  AgpsStopAllActiveTimers();
  if (!gnssOsa_MacDeinitCriticalSection("AgpsShutdownAllFsm", 429, &g_TimerCriticSection))
  {
    gnssOsa_flushNv();
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 73, "AgpsShutdownAllFsm");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    gnssOsa_Deinit();
    return 1;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 69, "AgpsShutdownAllFsm", 1553);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void AgpsSendFsmMsg(int a1, int a2, int a3, unsigned char *a4)
{
  int v8 = 0;
  uint64_t v27 = *MEMORY[0x263EF8340];
  a4[1] = a2;
  *a4 = a1;
  *((_DWORD *)a4 + 1) = a3;
  a4[8] = 1;
  uint64_t v9 = pg_AgpsFsmTable;
  do
  {
    unsigned int v10 = v8;
    int v11 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v8++ + 4);
    if (v11) {
      BOOL v12 = v11 == a2;
    }
    else {
      BOOL v12 = 1;
    }
  }
  while (!v12);
  if (!v11)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v23 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Src,%x,Dest,%x,Op,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 69, "AgpsSendFsmMsg", 515, a1, a2, a3);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    snprintf(v25, 0x3B6uLL, "ASSERT: %s %d FSM : Invalid ProcessId,Src,%x,Dest,%x,Op,%x", "AgpsSendFsmMsg", 509, a1, a2, a3);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v24 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "OSA", 69, "AgpsSendFsmMsg", v25);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("AgpsSendFsmMsg", "agpsfsm.cpp", 510, "false && \"AgpsSendFsmMsg Invalid Process Id 0\"");
  }
  if (*(void *)(pg_AgpsFsmTable + 168 * v10 + 104))
  {
    uint64_t v13 = (_DWORD *)(pg_AgpsFsmTable + 168 * v10);
    if (*v13 != 174 || *(_DWORD *)(pg_AgpsFsmTable + 168 * v10 + 160) != 22)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v21 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Guard bytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "OSA", 69, "AgpsSendFsmMsg", 770);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      snprintf(v25, 0x3B6uLL, "ASSERT: %s %d FSM : Guard Bytes Overwritten,Src,%x,Dest,%x,Op,%x", "AgpsSendFsmMsg", 474, a1, a2, a3);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v22 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "OSA", 69, "AgpsSendFsmMsg", v25);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      gnssOsa_FlushLog();
      __assert_rtn("AgpsSendFsmMsg", "agpsfsm.cpp", 475, "false && \"AgpsSendFsmMsg Guard Bytes Overwritten\"");
    }
    AgpsEnQueueFsmMsg((uint64_t)a4, (uint64_t)v13);
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Src,%x,Dest,%x,Op,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 69, "AgpsSendFsmMsg", 521, a1, a2, a3);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      uint64_t v9 = pg_AgpsFsmTable;
    }
    int v15 = 0;
    do
    {
      unsigned int v16 = v15;
      int v17 = *(unsigned __int8 *)(v9 + 168 * v15++ + 4);
      if (v17) {
        BOOL v18 = v17 == a1;
      }
      else {
        BOOL v18 = 1;
      }
    }
    while (!v18);
    int v19 = *(void (**)(unsigned char *))(v9 + 168 * v16 + 152);
    if (v17) {
      BOOL v20 = v19 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20) {
      v19(a4);
    }
    free(a4);
  }
}

void AgpsFsmMarkTimerExpMsgInvalid(int a1)
{
  pthread_t v2 = pthread_self();
  uint64_t v3 = pg_AgpsFsmTable;
  int v4 = *(unsigned __int8 *)(pg_AgpsFsmTable + 4);
  if (*(unsigned char *)(pg_AgpsFsmTable + 4))
  {
    int v5 = *(unsigned __int8 *)(pg_AgpsFsmTable + 4);
    if (*(pthread_t *)(pg_AgpsFsmTable + 104) != v2)
    {
      unsigned __int8 v6 = 0;
      do
        int v5 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * ++v6 + 4);
      while (*(unsigned char *)(pg_AgpsFsmTable + 168 * v6 + 4) && *(pthread_t *)(pg_AgpsFsmTable + 168 * v6 + 104) != v2);
    }
    if (g_NumProcess >= 1)
    {
      unint64_t v7 = 1;
      while (v4 != v5 || !*(void *)(v3 + 104))
      {
        if (v7 < g_NumProcess)
        {
          int v4 = *(unsigned __int8 *)(v3 + 172);
          v3 += 168;
          ++v7;
          if (v4) {
            continue;
          }
        }
        return;
      }
      gnssOsa_MarkFsmMsgInvalid(a1, v3);
    }
  }
}

uint64_t AgpsFsmStartTimer(unsigned int a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("AgpsFsmStartTimer", 574, &g_TimerCriticSection))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v5 = 1550;
LABEL_28:
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v4, "OSA", 69, "AgpsFsmStartTimer", v5);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 2;
  }
  else
  {
    uint64_t v6 = 0;
    while (vg_OsaTimers[v6] != a1 || !BYTE4(vg_OsaTimers[v6 + 1]))
    {
      v6 += 2;
      if (v6 == 20)
      {
        AgpsFsmMarkTimerExpMsgInvalid(a1);
        uint64_t v7 = 0;
        while (1)
        {
          int v8 = &vg_OsaTimers[v7];
          if (!BYTE4(vg_OsaTimers[v7 + 1])) {
            break;
          }
          v7 += 2;
          if (v7 == 20)
          {
            if (!gnssOsa_MacExitCriticalSection("AgpsFsmStartTimer", 623, &g_TimerCriticSection))
            {
              snprintf(v15, 0x3B6uLL, "ASSERT: %s %d TMC : Max timer count reached", "AgpsFsmStartTimer", 632);
              if (g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v14 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 69, "AgpsFsmStartTimer", v15);
                gnssOsa_PrintLog(__str, 1, 1, 0);
              }
              gnssOsa_FlushLog();
              __assert_rtn("AgpsFsmStartTimer", "agpsfsm.cpp", 633, "false && \"Max timer count reached\"");
            }
            goto LABEL_26;
          }
        }
        uint64_t *v8 = a1;
        if (gnssOsa_StartTimer("AgpsFsmStartTimer", 608, (unsigned int *)v8 + 2, (void (*)(void *))AgpsFsmTimerRoutine, &vg_OsaTimers[v7], a2))
        {
          *((unsigned char *)v8 + 12) = 1;
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v10 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Id,%x,Handle,%x,DueTime,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 73, "AgpsFsmStartTimer", a1, *((_DWORD *)v8 + 2), a2);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          uint64_t v11 = 0;
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v12 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Id,%x,DueTime,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 87, "AgpsFsmStartTimer", 1544, a1, a2);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          uint64_t v11 = 3;
        }
        if (!gnssOsa_MacExitCriticalSection("AgpsFsmStartTimer", 623, &g_TimerCriticSection)) {
          return v11;
        }
LABEL_26:
        if (!g_LbsOsaTrace_Config) {
          return 2;
        }
LABEL_27:
        bzero(__str, 0x3C6uLL);
        unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v5 = 1551;
        goto LABEL_28;
      }
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Already started Id,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 87, "AgpsFsmStartTimer", 1544, a1);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    if (gnssOsa_MacExitCriticalSection("AgpsFsmStartTimer", 587, &g_TimerCriticSection))
    {
      if (!g_LbsOsaTrace_Config) {
        return 2;
      }
      goto LABEL_27;
    }
    return 5;
  }
}

uint64_t AgpsFsmStopTimer(int a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Id,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 68, "AgpsFsmStopTimer", a1);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!gnssOsa_MacEnterCriticalSection("AgpsFsmStopTimer", 648, &g_TimerCriticSection))
  {
    uint64_t v5 = 0;
    while (1)
    {
      if (vg_OsaTimers[v5] == a1)
      {
        if (BYTE4(vg_OsaTimers[v5 + 1]))
        {
          int v6 = vg_OsaTimers[v5 + 1];
          if (v6 != -1) {
            break;
          }
        }
      }
      v5 += 2;
      if (v5 == 20)
      {
        if (!gnssOsa_MacExitCriticalSection("AgpsFsmStopTimer", 675, &g_TimerCriticSection))
        {
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v7 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Not Started or already Expired Id,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 68, "AgpsFsmStopTimer", 1545, a1);
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
          AgpsFsmMarkTimerExpMsgInvalid(a1);
          return 4;
        }
        goto LABEL_23;
      }
    }
    uint64_t v9 = &vg_OsaTimers[v5];
    if (gnssOsa_StopTimer("AgpsFsmStopTimer", 0x294u, v6))
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Id,%x,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 73, "AgpsFsmStopTimer", a1, *((_DWORD *)v9 + 2));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      uint64_t v8 = 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Id,%x,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 87, "AgpsFsmStopTimer", 1545, a1, *((_DWORD *)v9 + 2));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      uint64_t v8 = 7;
    }
    *((unsigned char *)v9 + 12) = 0;
    *uint64_t v9 = 0;
    *((_DWORD *)v9 + 2) = -1;
    if (!gnssOsa_MacExitCriticalSection("AgpsFsmStopTimer", 675, &g_TimerCriticSection)) {
      return v8;
    }
LABEL_23:
    if (!g_LbsOsaTrace_Config) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v4 = 1551;
    goto LABEL_25;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v4 = 1550;
LABEL_25:
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v3, "OSA", 69, "AgpsFsmStopTimer", v4);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 2;
}

uint64_t ud2var(uint64_t result, unsigned int a2, int a3, unsigned int a4, double *a5)
{
  uint64_t v5 = result - 8;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = ((a3 + 1) * a3) >> 1;
  *a5 = *(double *)(result - 8 + 8 * v7);
  if (a3 + 1 <= a2)
  {
    unsigned int v8 = a3 + v7;
    int v9 = 1;
    do
    {
      v7 += v6;
      double v10 = *(double *)(v5 + 8 * v7);
      unsigned int v11 = v9 + 1;
      unsigned int v12 = a4;
      if (v9 + 1 <= a4)
      {
        a5[v11 - 1] = v10;
        unsigned int v12 = v9;
      }
      if (v12)
      {
        if (v12 + 1 > 2) {
          uint64_t v13 = v12 + 1;
        }
        else {
          uint64_t v13 = 2;
        }
        uint64_t v14 = v13 - 1;
        unsigned int v15 = v8;
        unsigned int v16 = a5;
        do
        {
          *unsigned int v16 = *v16 + v10 * *(double *)(v5 + 8 * v15) * *(double *)(v5 + 8 * v15);
          ++v16;
          ++v15;
          --v14;
        }
        while (v14);
      }
      v8 += v6++;
      int v9 = v11;
    }
    while (v6 <= a2);
  }
  return result;
}

char *GLON_State_Update_Init(char *result, uint64_t a2, int *a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 76) && *(unsigned char *)(a2 + 80))
  {
    *((_WORD *)result + 200) = 0;
    GLON_Immediate_Updates((uint64_t)result, a2, a3, a4);
    return GLON_Leap_Second_Updates((char *)a2, a3, a4);
  }
  return result;
}

uint64_t GLON_Immediate_Updates(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  double v5 = *(double *)(a2 + 40) + 7.0;
  double v6 = -0.5;
  if (v5 <= 0.0) {
    double v7 = -0.5;
  }
  else {
    double v7 = 0.5;
  }
  double v8 = v5 + v7;
  if (v8 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0) {
      int v9 = (int)v8;
    }
    else {
      int v9 = 0x80000000;
    }
  }
  else
  {
    int v9 = 0x7FFFFFFF;
  }
  __int16 v10 = *(_WORD *)(a2 + 32);
  double v11 = *(double *)(a2 + 88) + 7.0;
  if (v11 > 0.0) {
    double v6 = 0.5;
  }
  double v12 = v11 + v6;
  if (v12 <= 2147483650.0)
  {
    if (v12 >= -2147483650.0) {
      int v13 = (int)v12;
    }
    else {
      int v13 = 0x80000000;
    }
  }
  else
  {
    int v13 = 0x7FFFFFFF;
  }
  uint64_t v14 = 0;
  BOOL v15 = v13 <= 86399;
  if (v13 > 86399) {
    v13 -= 86400;
  }
  int v46 = v13;
  if (v15) {
    __int16 v16 = *(_WORD *)(a2 + 84);
  }
  else {
    __int16 v16 = *(_WORD *)(a2 + 84) + 1;
  }
  __int16 v43 = v16;
  __int16 v44 = *(_WORD *)(a2 + 82);
  if (v9 <= 604799) {
    int v17 = v9;
  }
  else {
    int v17 = v9 - 604800;
  }
  if (v9 > 604799) {
    ++v10;
  }
  BOOL v18 = (int *)(a3 + 7796);
  __int16 v42 = v10;
  int v19 = v10;
  BOOL v20 = (unsigned __int16 *)(result + 400);
  double v39 = a3 + 2145;
  double v40 = a3 + 2143;
  uint64_t v21 = a4 + 6144;
  uint64_t v41 = a4 + 37824;
  uint64_t v22 = 16256;
  uint64_t v23 = 16248;
  uint64_t v24 = 13464;
  uint64_t v25 = 1491;
  int v49 = v17;
  double v48 = (int *)(a3 + 7796);
  int v47 = v10;
  unint64_t v45 = (unsigned __int16 *)(result + 400);
  do
  {
    if (*v18 < 1)
    {
      BOOL v28 = 0;
    }
    else
    {
      uint64_t v26 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v26 + 16) && *(int *)v26 >= 3) {
        int v27 = (int)*(double *)(v26 + 40) + 604800 * *(__int16 *)(v26 + 32);
      }
      else {
        int v27 = 0;
      }
      BOOL v28 = v27 == *v18 + 1;
    }
    int v29 = v17 - *(_DWORD *)(v21 + 160) + 604800 * (v19 - *(__int16 *)(v21 + 164));
    if (v29 >= 0) {
      unsigned int v30 = v17 - *(_DWORD *)(v21 + 160) + 604800 * (v19 - *(__int16 *)(v21 + 164));
    }
    else {
      unsigned int v30 = -v29;
    }
    int v31 = *(_DWORD *)(v21 + 176);
    if (v31 == 1)
    {
      if (!*(unsigned char *)(a3[2146] + v14)) {
        goto LABEL_69;
      }
      BOOL v32 = 0;
      int v33 = v30 > 7 || v28;
      if (!*(unsigned char *)(a3[1489] + v14)) {
        goto LABEL_69;
      }
    }
    else
    {
      int v33 = *(unsigned __int8 *)(a3[2146] + v14) != 0;
      if (v31 == 2)
      {
        if (v30 > 0xC8) {
          BOOL v28 = 1;
        }
        if (*(unsigned char *)(a3[2148] + v14)) {
          BOOL v32 = v28;
        }
        else {
          BOOL v32 = 0;
        }
        if (!*(unsigned char *)(a3[1489] + v14)) {
          goto LABEL_69;
        }
      }
      else if (v31)
      {
        BOOL v32 = 0;
        if (!*(unsigned char *)(a3[1489] + v14)) {
          goto LABEL_69;
        }
      }
      else
      {
        BOOL v32 = *(unsigned char *)(a3[2148] + v14) != 0;
        if (!*(unsigned char *)(a3[1489] + v14)) {
          goto LABEL_69;
        }
      }
    }
    if (v33)
    {
      if ((__int16)*v20 > 299)
      {
        uint64_t result = (uint64_t)EvLog_v("GLON_StUd:  Delay ImmUd:  %d  RK_Loops %d", (int)v14 + 33, *v20);
        int v17 = v49;
        BOOL v18 = v48;
        int v19 = v47;
        goto LABEL_69;
      }
      uint64_t v51 = 0;
      *(void *)double v52 = 0;
      *(void *)&v52[5] = 0;
      memset(&v52[16], 0, 64);
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v55 = 0;
      memset(v50, 0, 62);
      GLON_EphBin2Int((uint64_t)&a3[v25], (uint64_t)v50, (int32x4_t)0);
      GLON_EphInt2Real((uint64_t)v50, (uint64_t)&v51);
      GLON_Calc_State_Table_Eph(v44, v43, v46, (uint64_t)&v51, v21, v20);
      uint64_t result = (uint64_t)EvVrb_v("GLON_Calc_State_Table_Eph:  ImmUd:  %d  Age %d", (int)v14 + 1, v30);
      if (*(unsigned char *)(a3[2147] + v14)
        && (uint64_t result = GLON_Cross_Check_SVRS_vs_EE(v44, v43, v46, v21, (uint64_t)a3 + v24), (result & 1) == 0))
      {
        char v34 = 1;
        *(unsigned char *)(a3[2153] + v14) = 1;
        *(_DWORD *)(v21 + 176) = 0;
        int v35 = (unsigned char *)(a3[2146] + v14);
        double v36 = v39;
        int v17 = v49;
      }
      else
      {
        char v34 = 0;
        int v17 = v49;
        *(_DWORD *)(v21 + 160) = v49;
        *(_WORD *)(v21 + 164) = v42;
        int v35 = (unsigned char *)(v41 + v14);
        double v36 = v40;
      }
      *int v35 = 0;
      *(unsigned char *)(*v36 + v14) = v34;
    }
    else
    {
      if (!v32) {
        goto LABEL_69;
      }
      *(_DWORD *)double v52 = 0;
      uint64_t v51 = 0;
      memset(&v52[8], 0, 67);
      v50[0] = 0uLL;
      *(void *)((char *)&v50[1] + 5) = 0;
      *(void *)&v50[1] = 0;
      *(void *)((char *)&v50[1] + 14) = 0;
      BYTE6(v50[2]) = 0;
      uint64_t result = GLON_AlmBin2Int((uint64_t)a3 + v23, (uint64_t)v50);
      uint64_t v51 = *(void *)&v50[0];
      v37.i64[0] = SHIDWORD(v50[0]);
      v37.i64[1] = SLODWORD(v50[1]);
      *(void *)&v38.f64[0] = *(_OWORD *)&vcvtq_f64_s64(v37);
      v37.i64[0] = HIDWORD(v50[0]);
      v37.i64[1] = LODWORD(v50[1]);
      v38.f64[1] = vcvtq_f64_u64(*(uint64x2_t *)&v37).f64[1];
      v37.i64[0] = SDWORD1(v50[1]);
      v37.i64[1] = SDWORD2(v50[1]);
      *(float64x2_t *)&v52[8] = vmulq_f64(v38, (float64x2_t)xmmword_263D848C0);
      *(float64x2_t *)&v52[24] = vmulq_f64(vcvtq_f64_s64(v37), (float64x2_t)xmmword_263D848D0);
      v38.f64[0] = 0.0000610351562;
      LOWORD(v38.f64[0]) = HIWORD(v50[1]);
      *(_WORD *)&v52[2] = WORD5(v50[0]);
      *(double *)&v52[40] = (double)SBYTE12(v50[1]) * 0.0000610351562;
      *(double *)&v52[48] = (double)*(unint64_t *)&v38.f64[0] * 0.000000953674316;
      *(double *)&v52[56] = (double)SLOWORD(v50[2]) * 0.0000958737992;
      *(double *)&v52[64] = (double)SWORD1(v50[2]) * 0.00000381469727;
      v52[72] = BYTE4(v50[2]);
      *(_WORD *)&v52[73] = *(_WORD *)((char *)&v50[2] + 5);
      *(_WORD *)double v52 = *(_WORD *)((char *)a3 + v22);
      if (*(_WORD *)v52)
      {
        GLON_RealAlm2RefState(v44, v43, v46, (uint64_t)&v51, v21);
        uint64_t result = (uint64_t)EvVrb_v("GLON_RealAlm2RefState:  ImmUd:  %d  Age %d", (int)v14 + 1, v30);
        *(_DWORD *)(v21 + 160) = v49;
        *(_WORD *)(v21 + 164) = v42;
        *(unsigned char *)(v41 + v14) = 0;
        *(unsigned char *)(a3[2144] + v14) = 0;
      }
      int v17 = v49;
    }
    BOOL v18 = v48;
    int v19 = v47;
    BOOL v20 = v45;
LABEL_69:
    ++v14;
    v21 += 192;
    v22 += 36;
    v23 += 36;
    v24 += 116;
    v25 += 8;
  }
  while (v14 != 24);
  return result;
}

char *GLON_Leap_Second_Updates(char *result, int *a2, uint64_t a3)
{
  unint64_t v3 = a2 + 15592;
  int v4 = a2[15592];
  if (v4 >= 1 && result[16] && *(int *)result >= 1)
  {
    uint64_t v5 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v5 + 16) && *(int *)v5 >= 3) {
      int v6 = (int)*(double *)(v5 + 40) + 604800 * *(__int16 *)(v5 + 32);
    }
    else {
      int v6 = 0;
    }
    if ((v6 + ~v4) <= 0xEFF0FE)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a3 + 37824;
      int v9 = a2 + 4062;
      __int16 v10 = a2 + 2982;
      for (uint64_t i = a3 + 6304; ; i += 192)
      {
        int v13 = *v10;
        v10 += 16;
        int v12 = v13;
        if (v13 >= 1 && v12 <= *v3 && *(_DWORD *)(i + 16) == 1)
        {
          int v14 = 1;
        }
        else
        {
          if (*v9 < 1 || *v9 > *v3 || *(_DWORD *)(i + 16) != 2) {
            goto LABEL_25;
          }
          int v14 = 2;
        }
        if (!*(unsigned char *)(v8 + v7)) {
          break;
        }
LABEL_25:
        ++v7;
        v9 += 9;
        if (v7 == 24) {
          return result;
        }
      }
      int v15 = *((char *)v3 + 4);
      int v16 = *(_DWORD *)i - v15;
      *(_DWORD *)uint64_t i = v16;
      if (v16 < 0)
      {
        __int16 v17 = -1;
        int v18 = 604800;
      }
      else
      {
        if (v16 <= 0x93A80)
        {
LABEL_24:
          *(unsigned char *)(v8 + v7) = 1;
          uint64_t result = EvLog_v("GLON_Leap_Second_Updates:  Adj Ref Time, Slot %d  E/A %d  SP %d ", (int)v7 + 1, v14, v15);
          goto LABEL_25;
        }
        __int16 v17 = 1;
        int v18 = -604800;
      }
      *(_DWORD *)uint64_t i = v18 + v16;
      *(_WORD *)(i + 4) += v17;
      goto LABEL_24;
    }
  }
  return result;
}

char *GLON_State_Update(char *result, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a3 + 76) || !*(unsigned char *)(a3 + 80)) {
    return result;
  }
  int v9 = result;
  uint64_t v10 = 0;
  double v11 = (_DWORD *)(a6 + 6320);
  do
  {
    int v12 = v11 - 44;
    int v13 = *v11;
    if (*v11 == 1)
    {
      if (*(unsigned char *)(*((void *)a4 + 2146) + v10) || *(unsigned char *)(*((void *)a4 + 2147) + v10)) {
        goto LABEL_11;
      }
      *(_OWORD *)((char *)v11 - 1) = 0uLL;
      *((_OWORD *)v11 - 2) = 0uLL;
      *((_OWORD *)v11 - 1) = 0uLL;
      *((_OWORD *)v11 - 4) = 0uLL;
      *((_OWORD *)v11 - 3) = 0uLL;
      *((_OWORD *)v11 - 6) = 0uLL;
      *((_OWORD *)v11 - 5) = 0uLL;
      *((_OWORD *)v11 - 8) = 0uLL;
      *((_OWORD *)v11 - 7) = 0uLL;
      *((_OWORD *)v11 - 10) = 0uLL;
      *((_OWORD *)v11 - 9) = 0uLL;
      *int v12 = 0uLL;
      int v13 = *v11;
    }
    if (v13 == 2 && !*(unsigned char *)(*((void *)a4 + 2148) + v10))
    {
      *(_OWORD *)((char *)v11 - 1) = 0uLL;
      *((_OWORD *)v11 - 2) = 0uLL;
      *((_OWORD *)v11 - 1) = 0uLL;
      *((_OWORD *)v11 - 4) = 0uLL;
      *((_OWORD *)v11 - 3) = 0uLL;
      *((_OWORD *)v11 - 6) = 0uLL;
      *((_OWORD *)v11 - 5) = 0uLL;
      *((_OWORD *)v11 - 8) = 0uLL;
      *((_OWORD *)v11 - 7) = 0uLL;
      *((_OWORD *)v11 - 10) = 0uLL;
      *((_OWORD *)v11 - 9) = 0uLL;
      *int v12 = 0uLL;
    }
LABEL_11:
    ++v10;
    v11 += 48;
  }
  while (v10 != 24);
  *((_WORD *)result + 200) = 0;
  GLON_Immediate_Updates((uint64_t)result, a3, a4, a6);
  double v14 = *(double *)(a3 + 40) + 7.0;
  if (v14 <= 0.0) {
    double v15 = -0.5;
  }
  else {
    double v15 = 0.5;
  }
  double v16 = v14 + v15;
  if (v16 >= -2147483650.0) {
    int v17 = (int)v16;
  }
  else {
    int v17 = 0x80000000;
  }
  if (v16 <= 2147483650.0) {
    int v18 = v17;
  }
  else {
    int v18 = 0x7FFFFFFF;
  }
  double v19 = *(double *)(a3 + 88) + 7.0;
  if (v19 <= 0.0) {
    double v20 = -0.5;
  }
  else {
    double v20 = 0.5;
  }
  double v21 = v19 + v20;
  if (v21 <= 2147483650.0)
  {
    if (v21 >= -2147483650.0) {
      int v22 = (int)v21;
    }
    else {
      int v22 = 0x80000000;
    }
  }
  else
  {
    int v22 = 0x7FFFFFFF;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = (unsigned __int16 *)(v9 + 400);
  __int16 v26 = *(_WORD *)(a3 + 82);
  int v27 = 0x7FFFFFFF;
  unsigned int v28 = -1;
  unsigned int v29 = -1;
  int v30 = 0x7FFFFFFF;
  while (2)
  {
    if ((!*(unsigned char *)(*((void *)a4 + 2147) + v24)
       || !*(unsigned char *)(*((void *)a4 + 2151) + v24)
       || !*(unsigned char *)(*((void *)a4 + 2148) + v24)
       || *(unsigned char *)(*((void *)a4 + 2146) + v24))
      && *(_DWORD *)(a6 + v23 + 6320))
    {
      int v31 = *(__int16 *)(a6 + v23 + 6316);
      if (v27 > v31)
      {
        int v32 = *(_DWORD *)(a6 + v23 + 6312);
        goto LABEL_39;
      }
      if (v27 == v31)
      {
        int v32 = *(_DWORD *)(a6 + v23 + 6312);
        if (v32 < v30)
        {
LABEL_39:
          unsigned int v28 = v24 + 32;
          unsigned int v29 = v24;
          int v30 = v32;
          int v27 = *(__int16 *)(a6 + v23 + 6316);
        }
      }
    }
    ++v24;
    v23 += 192;
    if (v24 != 24) {
      continue;
    }
    break;
  }
  if (v22 <= 86399) {
    int v33 = v22;
  }
  else {
    int v33 = v22 - 86400;
  }
  if (v18 <= 604799) {
    int v34 = v18;
  }
  else {
    int v34 = v18 - 604800;
  }
  if (v29 == -1) {
    return GLON_Leap_Second_Updates((char *)a3, a4, a6);
  }
  if (v28 > 0xC4 || (v29 & 0x80000000) != 0 || (int)v29 >= 24)
  {
    EvCrt_v("GLON_StUd:  Bad Glo Idx:  DBst %d  DBnm %d", v28, v29);
    return GLON_Leap_Second_Updates((char *)a3, a4, a6);
  }
  if (!*(unsigned char *)(*((void *)a4 + 1489) + v29)) {
    goto LABEL_61;
  }
  if (!*(unsigned char *)(*((void *)a4 + 2146) + v29))
  {
    if (*(unsigned char *)(*((void *)a4 + 2148) + v29))
    {
      __int16 v46 = *(_WORD *)(a3 + 32) + (v18 > 604799);
      __int16 v49 = *(_WORD *)(a3 + 84) + (v22 > 86399);
      v50[0] = 0uLL;
      *(void *)((char *)&v50[1] + 5) = 0;
      *(void *)&v50[1] = 0;
      *(void *)((char *)&v50[1] + 14) = 0;
      BYTE6(v50[2]) = 0;
      GLON_AlmBin2Int((uint64_t)&a4[9 * v29 + 4062], (uint64_t)v50);
      uint64_t v51 = *(void *)&v50[0];
      v40.i64[0] = SHIDWORD(v50[0]);
      v40.i64[1] = SLODWORD(v50[1]);
      *(void *)&v41.f64[0] = *(_OWORD *)&vcvtq_f64_s64(v40);
      v40.i64[0] = HIDWORD(v50[0]);
      v40.i64[1] = LODWORD(v50[1]);
      v41.f64[1] = vcvtq_f64_u64(*(uint64x2_t *)&v40).f64[1];
      v40.i64[0] = SDWORD1(v50[1]);
      v40.i64[1] = SDWORD2(v50[1]);
      *(float64x2_t *)&v52[8] = vmulq_f64(v41, (float64x2_t)xmmword_263D848C0);
      *(float64x2_t *)&v52[24] = vmulq_f64(vcvtq_f64_s64(v40), (float64x2_t)xmmword_263D848D0);
      v41.f64[0] = 0.0000610351562;
      LOWORD(v41.f64[0]) = HIWORD(v50[1]);
      *(double *)&v52[40] = (double)SBYTE12(v50[1]) * 0.0000610351562;
      *(double *)&long long v53 = (double)*(unint64_t *)&v41.f64[0] * 0.000000953674316;
      *(_WORD *)&v52[2] = WORD5(v50[0]);
      *((double *)&v53 + 1) = (double)SLOWORD(v50[2]) * 0.0000958737992;
      *(double *)&long long v54 = (double)SWORD1(v50[2]) * 0.00000381469727;
      BYTE8(v54) = BYTE4(v50[2]);
      *(_WORD *)((char *)&v54 + 9) = *(_WORD *)((char *)&v50[2] + 5);
      *(_WORD *)double v52 = a4[9 * v29 + 4064];
      if (!*(_WORD *)v52) {
        return GLON_Leap_Second_Updates((char *)a3, a4, a6);
      }
      uint64_t v42 = a6 + 192 * v28;
      GLON_RealAlm2RefState(v26, v49, v33, (uint64_t)&v51, v42);
      EvVrb_v("GLON_RealAlm2RefState:  SchUd:  %d", v29 + 1);
      *(_DWORD *)(v42 + 160) = v34;
      *(_WORD *)(v42 + 164) = v46;
      goto LABEL_62;
    }
LABEL_61:
    __int16 v43 = (_OWORD *)(a6 + 192 * v28);
    *(_OWORD *)((char *)v43 + 175) = 0u;
    v43[9] = 0u;
    v43[10] = 0u;
    v43[7] = 0u;
    v43[8] = 0u;
    v43[5] = 0u;
    v43[6] = 0u;
    v43[3] = 0u;
    v43[4] = 0u;
    v43[1] = 0u;
    v43[2] = 0u;
    *__int16 v43 = 0u;
LABEL_62:
    *(unsigned char *)(a6 + v29 + 37824) = 0;
    return GLON_Leap_Second_Updates((char *)a3, a4, a6);
  }
  if ((__int16)*v25 > 299)
  {
    EvLog_v("GLON_StUd:  Delay SchUd:  %d  RK_Loops %d", v28 + 1, *v25);
  }
  else
  {
    __int16 v45 = *(_WORD *)(a3 + 32) + (v18 > 604799);
    __int16 v47 = *(_WORD *)(a3 + 84) + (v22 > 86399);
    uint64_t v51 = 0;
    *(void *)double v52 = 0;
    *(void *)&v52[5] = 0;
    memset(&v52[16], 0, 32);
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v57 = 0;
    memset(v50, 0, 62);
    GLON_EphBin2Int((uint64_t)&a4[16 * (unint64_t)v29 + 2982], (uint64_t)v50, (int32x4_t)0);
    GLON_EphInt2Real((uint64_t)v50, (uint64_t)&v51);
    unsigned int v44 = v28;
    uint64_t v35 = a6 + 192 * v28;
    uint64_t v36 = v26;
    int v37 = v47;
    __int16 v38 = v47;
    uint64_t v48 = v35;
    GLON_Calc_State_Table_Eph(v36, v38, v33, (uint64_t)&v51, v35, v25);
    EvVrb_v("GLON_Calc_State_Table_Eph:  SchUd:  %d", v29 + 1);
    if (!*(unsigned char *)(*((void *)a4 + 2147) + v29)
      || (GLON_Cross_Check_SVRS_vs_EE(v36, v37, v33, v48, (uint64_t)&a4[29 * v29 + 3366]) & 1) != 0)
    {
      uint64_t v39 = a6 + 192 * v44;
      *(_DWORD *)(v39 + 160) = v34;
      *(_WORD *)(v39 + 164) = v45;
      goto LABEL_62;
    }
    *(unsigned char *)(*((void *)a4 + 2153) + v29) = 1;
    *(_DWORD *)(a6 + 192 * v44 + 176) = 0;
    *(unsigned char *)(*((void *)a4 + 2146) + v29) = 0;
    *(unsigned char *)(*((void *)a4 + 2145) + v29) = 1;
  }
  return GLON_Leap_Second_Updates((char *)a3, a4, a6);
}

uint64_t GLON_Cross_Check_SVRS_vs_EE(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  double v36 = 0.0;
  API_Get_UTC_Cor(1, &v36);
  int v35 = 0;
  double v34 = 0.0;
  int v33 = 0;
  Glon_To_GPS_Time(a1, a2, (double)a3, v36, &v33, &v35, &v34);
  __int16 v10 = v35 + ((_WORD)v33 << 10);
  double v11 = -0.5;
  if (v34 > 0.0) {
    double v11 = 0.5;
  }
  double v12 = v34 + v11;
  if (v34 + v11 <= 2147483650.0)
  {
    if (v12 >= -2147483650.0) {
      int v13 = (int)v12;
    }
    else {
      int v13 = 0x80000000;
    }
  }
  else
  {
    int v13 = 0x7FFFFFFF;
  }
  int v19 = 0;
  memset(v18, 0, sizeof(v18));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 0;
  Get_GPS_Kep_Ephemeris(*(unsigned int *)(a4 + 184), *(unsigned char *)(a4 + 188), a5, (uint64_t)v18);
  int v14 = v10;
  uint64_t v15 = 1;
  int v16 = Kep_Check_Ephemeris(v14, v13, 1, (uint64_t)v18);
  if (ST_Check_Eph_Kep_Err((uint64_t)"GLON_Cross_Check_SVRS_vs_EE", v16, (uint64_t)v18))
  {
    memset(v37, 0, 191);
    Kep_Calc_SV_Ref_State(1, v14, v13, (uint64_t)v18, (uint64_t)v37);
    return ST_Cross_Check_SVRS_vs_SVRS(a4, (uint64_t)v37);
  }
  return v15;
}

uint64_t Hal11_HandleEvent(int a1, unsigned __int8 *a2, int a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a1 == 76)
  {
    if (a2[8] != 1 || g_LbsOsaTrace_Config < 3) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    *(double *)&unint64_t v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    unint64_t v10 = (unint64_t)*(double *)&v9;
    LOWORD(v9) = *((_WORD *)a2 + 8);
    LOWORD(v11) = *((_WORD *)a2 + 9);
    LOWORD(v12) = *((_WORD *)a2 + 10);
    LOWORD(v13) = *((_WORD *)a2 + 11);
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: L5_Tuner_Stats_event : METTick %u, BestDuration %2.1f, Normal %2.1f, Worst %2.1f, Not-Known %2.1f\n", v10, "HAL", 77, "Hal_HandleMEStatusMsg", *((_DWORD *)a2 + 3), (double)v9 * 0.00390625, (double)v11 * 0.00390625, (double)v12 * 0.00390625, (double)v13 * 0.00390625);
    uint64_t v14 = 1;
    int v15 = 3;
    goto LABEL_24;
  }
  if (a1 == 84)
  {
    if (a2)
    {
      if (a3)
      {
        unsigned int v5 = a2[8];
        if (v5 > 0x4C)
        {
          if (a2[8] > 0x56u)
          {
            if (v5 == 87)
            {
              if (g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v21 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MECpu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "HAL", 69, "Hal11_HandleCPStatusMsg", 1300);
                uint64_t v7 = 1;
                gnssOsa_PrintLog(__str, 1, 1, 0);
              }
              else
              {
                uint64_t v7 = 1;
              }
LABEL_50:
              if (g_HalCallbacks) {
                g_HalCallbacks(v7);
              }
              return 1;
            }
            if (v5 == 119)
            {
              if (g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v17 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CpCpu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 69, "Hal11_HandleCPStatusMsg", 1300);
                gnssOsa_PrintLog(__str, 1, 1, 0);
              }
              uint64_t v7 = 2;
              goto LABEL_50;
            }
          }
          else
          {
            if (v5 == 77)
            {
              if (g_LbsOsaTrace_Config >= 3)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v18 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MESlp Event\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "HAL", 77, "Hal11_HandleCPStatusMsg");
                gnssOsa_PrintLog(__str, 3, 1, 0);
              }
              usleep(0x2710u);
              uint64_t v7 = 6;
              goto LABEL_50;
            }
            if (v5 == 84)
            {
              if (g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v6 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 69, "Hal11_HandleCPStatusMsg", 1320);
                gnssOsa_PrintLog(__str, 1, 1, 0);
              }
              uint64_t v7 = 7;
              goto LABEL_50;
            }
          }
LABEL_46:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v22 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx msgId,%c,len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "HAL", 69, "Hal11_HandleCPStatusMsg", 515, a2[8], a3);
            gnssOsa_PrintLog(__str, 1, 1, 0);
          }
          uint64_t v7 = 0;
          goto LABEL_50;
        }
        if (v5 != 32)
        {
          if (v5 == 71)
          {
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v20 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "HAL", 69, "Hal11_HandleCPStatusMsg", 1302);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
            uint64_t v7 = 3;
            goto LABEL_50;
          }
          if (v5 == 72)
          {
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v16 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWErr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 69, "Hal11_HandleCPStatusMsg", 1302);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
            uint64_t v7 = 4;
            goto LABEL_50;
          }
          goto LABEL_46;
        }
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v19 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HWStatusOK\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 73, "Hal11_HandleCPStatusMsg");
          uint64_t v14 = 1;
          int v15 = 4;
          goto LABEL_24;
        }
        return 1;
      }
      if (!g_LbsOsaTrace_Config) {
        return 1;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
    }
    else
    {
      if (!g_LbsOsaTrace_Config) {
        return 1;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    }
    uint64_t v14 = 1;
    int v15 = 1;
LABEL_24:
    gnssOsa_PrintLog(__str, v15, 1, 0);
    return v14;
  }
  return 0;
}

double GAL_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = 60 * *(unsigned __int16 *)(a1 + 18);
  uint64_t v2 = *(void *)(a1 + 20);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  *(void *)&v4.f64[0] = *(_OWORD *)&vcvtq_f64_s64((int64x2_t)v3);
  v3.i64[0] = v2;
  v3.i64[1] = HIDWORD(v2);
  v4.f64[1] = vcvtq_f64_u64(v3).f64[1];
  *(float64x2_t *)(a2 + 24) = vmulq_f64(v4, (float64x2_t)xmmword_263D848E0);
  uint64_t v5 = *(void *)(a1 + 28);
  v3.i64[0] = v5;
  v3.i64[1] = HIDWORD(v5);
  *(void *)&v4.f64[0] = *(_OWORD *)&vcvtq_f64_u64(v3);
  v3.i64[0] = (int)v5;
  v3.i64[1] = SHIDWORD(v5);
  v4.f64[1] = vcvtq_f64_s64(*(int64x2_t *)&v3).f64[1];
  *(float64x2_t *)(a2 + 40) = vmulq_f64(v4, (float64x2_t)xmmword_263D848F0);
  uint64_t v6 = *(void *)(a1 + 36);
  v3.i64[0] = (int)v6;
  v3.i64[1] = SHIDWORD(v6);
  v4.f64[0] = (double)*(int *)(a1 + 44);
  *(float64x2_t *)(a2 + 56) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL));
  double v7 = (double)*(__int16 *)(a1 + 48) * 3.57157734e-13;
  double v8 = (double)*(__int16 *)(a1 + 50);
  *(double *)(a2 + 72) = v4.f64[0] * 3.57157734e-13;
  *(double *)(a2 + 80) = v7;
  double v9 = v8 * 3.57157734e-13;
  v4.f64[0] = (double)*(__int16 *)(a1 + 52) * 0.00000000186264515;
  double v10 = (double)*(__int16 *)(a1 + 54);
  *(double *)(a2 + 88) = v9;
  *(float64_t *)(a2 + 96) = v4.f64[0];
  v4.f64[0] = (double)*(__int16 *)(a1 + 56) * 0.03125;
  double v11 = (double)*(__int16 *)(a1 + 58);
  *(double *)(a2 + 104) = v10 * 0.00000000186264515;
  *(float64_t *)(a2 + 112) = v4.f64[0];
  v4.f64[0] = (double)*(__int16 *)(a1 + 60) * 0.00000000186264515;
  *(double *)(a2 + 120) = v11 * 0.03125;
  *(float64_t *)(a2 + 128) = v4.f64[0];
  *(double *)(a2 + 136) = (double)*(__int16 *)(a1 + 62) * 0.00000000186264515;
  *(_DWORD *)(a2 + 144) = 60 * *(unsigned __int16 *)(a1 + 74);
  uint64_t v12 = *(void *)(a1 + 64);
  v3.i64[0] = (int)v12;
  v3.i64[1] = SHIDWORD(v12);
  *(float64x2_t *)(a2 + 152) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)xmmword_263D84900);
  v4.f64[0] = (double)*(__int16 *)(a1 + 76) * 2.32830644e-10;
  *(double *)(a2 + 168) = (double)*(__int16 *)(a1 + 72) * 1.73472348e-18;
  *(float64_t *)(a2 + 176) = v4.f64[0];
  double result = (double)*(__int16 *)(a1 + 78) * 2.32830644e-10;
  *(double *)(a2 + 184) = result;
  *(_WORD *)(a2 + 194) = *(_WORD *)(a1 + 16);
  *(_DWORD *)(a2 + 196) = *(_DWORD *)(a1 + 81);
  *(unsigned char *)(a2 + 200) = *(unsigned char *)(a1 + 85);
  *(_WORD *)(a2 + 201) = *(_WORD *)(a1 + 86);
  return result;
}

const void **Nav_Kalman_Update_Wrapper(uint64_t a1)
{
  GNSS_Validate_p_list((const void **)a1, "Nav_Kalman_Update_Wrapper: Entry");
  Nav_Kalman_Update(*(void *)(a1 + 128), *(void *)(a1 + 168), *(void *)(a1 + 200), *(void *)(a1 + 96), *(void *)(a1 + 32), *(void *)(a1 + 88), *(void *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 80), *(void *)(a1 + 72), *(unsigned char **)(a1 + 64), *(void *)(a1 + 48));

  return GNSS_Validate_p_list((const void **)a1, "Nav_Kalman_Update_Wrapper:  Exit");
}

void Hal_Init(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config <= 3)
  {
    g_HalCallbacks = 0;
    unk_26A9CA1A0 = 0;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_Init");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    g_HalCallbacks = 0;
    unk_26A9CA1A0 = 0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 73, "Hal_Init");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Hal_DeInit(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_DeInit");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v1 = gnssOsa_Calloc("Hal_DeInit", 69, 1, 0x18uLL);
  if (v1)
  {
    v1[2] = 0;
    AgpsSendFsmMsg(129, 129, 8454656, v1);
    g_HalCallbacks = 0;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_DeInit");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Hal_DestMissingHandler(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (*(_DWORD *)(a1 + 4) == 8455424)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3) {
      free(v3);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal_DestMissingHandler", *(_DWORD *)(a1 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t Hal00_03DefaultMsgHandler()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 69, "Hal00_03DefaultMsgHandler", 519);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Hal_StartConn(int a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal_StartConn");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a2)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "Hal_StartConn", 516);
    int v7 = 1;
    goto LABEL_9;
  }
  uint64_t v5 = gnssOsa_Calloc("Hal_StartConn", 123, 1, 0x20uLL);
  if (v5)
  {
    v5[2] = a2;
    *((_DWORD *)v5 + 6) = a1;
    AgpsSendFsmMsg(129, 129, 8454144, v5);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal_StartConn");
      int v7 = 4;
LABEL_9:
      gnssOsa_PrintLog(__str, v7, 1, 0);
    }
  }
}

void Hal_StopConn(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_StopConn");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v3 = gnssOsa_Calloc("Hal_StopConn", 148, 1, 0x18uLL);
  if (v3)
  {
    v3[2] = a1;
    AgpsSendFsmMsg(129, 129, 8454656, v3);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal_StopConn");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Hal00_06ReadBufNtf(size_t a1, unsigned __int8 *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_12:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return;
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_12;
  }
  uint64_t v4 = gnssOsa_Calloc("Hal00_06ReadBufNtf", 181, 1, 0x20uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = gnssOsa_Calloc("Hal00_06ReadBufNtf", 187, 1, a1);
    v5[2] = v6;
    if (v6)
    {
      memcpy_s("Hal00_06ReadBufNtf", 194, v6, a1, a2, a1);
      *((_WORD *)v5 + 12) = a1;
      AgpsSendFsmMsg(129, 129, 8455424, v5);
    }
    else
    {
      free(v5);
    }
  }
}

void Hal_GnssBaseBandReset(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = gnssOsa_Calloc("Hal_GnssBaseBandReset", 225, 1, 0x18uLL);
    if (v2)
    {
      v2[2] = a1;
      AgpsSendFsmMsg(129, 129, 8454912, v2);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal_GnssBaseBandReset", 516);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void Hal_SetPowerReportStatus(char a1, void (*a2)(BOOL), void (*a3)(double, double, double, double))
{
  uint64_t v6 = gnssOsa_Calloc("Hal_SetPowerReportStatus", 248, 1, 0x20uLL);
  if (v6)
  {
    _WORD v6[2] = a2;
    v6[3] = a3;
    *((unsigned char *)v6 + 12) = a1;
    AgpsSendFsmMsg(129, 129, 8457216, v6);
  }
}

uint64_t Hal_TriggerTimeMarkPulse(void (*a1)(unsigned int, BOOL))
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_TriggerTimeMarkPulse");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    uint64_t result = (uint64_t)gnssOsa_Calloc("Hal_TriggerTimeMarkPulse", 275, 1, 0x18uLL);
    if (result)
    {
      *(void *)(result + 16) = a1;
      AgpsSendFsmMsg(129, 129, 8457472, (unsigned char *)result);
      return 1;
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal_TriggerTimeMarkPulse", 516);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
  return result;
}

uint64_t Hal_WakeUp_GNSS(void (*a1)(BOOL))
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_WakeUp_GNSS");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    uint64_t result = (uint64_t)gnssOsa_Calloc("Hal_WakeUp_GNSS", 301, 1, 0x18uLL);
    if (result)
    {
      *(void *)(result + 16) = a1;
      AgpsSendFsmMsg(129, 129, 8457984, (unsigned char *)result);
      return 1;
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal_WakeUp_GNSS", 516);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
  return result;
}

uint64_t Hal_GNSS_SessionStart(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[9] = 0;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS session start, EN_PE_NO_DATA_FW_RECOVERY_COREDUMP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_GNSS_SessionStart");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  *(void *)uint64_t v3 = 0xC00044D7942787ALL;
  v3[8] = 0;
  __int16 v4 = 0;
  char v5 = 10;
  Hal00_06ReadBufNtf(0xDuLL, v3);
  return 1;
}

uint64_t Hal_SendData(unsigned __int8 *a1, size_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a1)
    {
      Hal00_06ReadBufNtf(a2, a1);
      return 1;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
      goto LABEL_8;
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_8:
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 0;
}

uint64_t Hal_GNSS_SessionStop(__int16 a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  Hal_GetMEAnalyticsData();
  __int16 v2 = 0;
  char v10 = 0;
  __int16 v9 = 0;
  uint64_t v5 = 0xE0009507342787ALL;
  char v6 = 0;
  __int16 v7 = a1;
  int v8 = 0;
  for (uint64_t i = 8; i != 15; ++i)
    v2 += *((unsigned __int8 *)&v5 + i);
  __int16 v9 = v2;
  char v10 = 10;
  Hal00_06ReadBufNtf(0x12uLL, (unsigned __int8 *)&v5);
  return 1;
}

uint64_t Hal_SendAidingData(unsigned __int8 *a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  size_t v3 = v2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (v2 < 0x7F8)
  {
    char v6 = (const void *)v1;
    bzero(v10, 0xFF8uLL);
    qmemcpy(__str, "zxMmM", sizeof(__str));
    __int16 v8 = v3;
    char v9 = v3 + BYTE1(v3) + 7;
    memcpy_s("Hal_SendAidingData", 470, v10, 0x1000u, v6, v3);
    v10[v3] = 10;
    return Hal_SendData((unsigned __int8 *)__str, (unsigned __int16)(v3 + 9));
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: size of payload (%d) > MaxPayload (%d)\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal_SendAidingData", v3, 2039);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
}

uint64_t Hal_SendNoFirmwareNVData(unsigned __int8 a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v4 = 0x1600034D6E58787ALL;
  v4[8] = a1;
  v4[9] = a1;
  __int16 v5 = 2560;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: zxXnM No GNSS FW NV data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 73, "Hal_SendNoFirmwareNVData");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  Hal00_06ReadBufNtf(0xCuLL, v4);
  return 1;
}

uint64_t Hal_SendFirmwareNVData(unsigned __int8 *a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  size_t v4 = v2;
  *(void *)&v25[4085] = *MEMORY[0x263EF8340];
  uint64_t v5 = (unsigned __int16)(v2 + 5);
  if (v5 >= 0xFF8)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: size of payload (%d) > MaxPayload (%d)\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 87, "Hal_SendFirmwareNVData", v4, 4087);
      __int16 v7 = __str;
      int v8 = 2;
LABEL_13:
      gnssOsa_PrintLog(v7, v8, 1, 0);
      return 0;
    }
    return 0;
  }
  int v9 = v3;
  char v10 = (const void *)v1;
  unsigned __int16 v11 = v2 + 14;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s:  Nv Size %d, payload len ,%d, pkt size %d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 73, "Hal_SendFirmwareNVData", v4, v5, v11);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  bzero(v24, 0xFF8uLL);
  qmemcpy(__str, "zxXvM", sizeof(__str));
  __int16 v22 = v5;
  char v23 = v5 + BYTE1(v5) + 27;
  v24[1] = v9;
  memcpy_s("Hal_SendFirmwareNVData", 565, v25, 0xFF5u, v10, v4);
  if (!v5)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v17 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: Error payload checksum\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 69, "Hal_SendFirmwareNVData");
      __int16 v7 = __s;
      int v8 = 1;
      goto LABEL_13;
    }
    return 0;
  }
  uint64_t v13 = 0;
  __int16 v14 = 0;
  do
    v14 += v24[v13++];
  while (v5 != v13);
  int v15 = &__str[v11];
  *(_WORD *)(v15 - 3) = v14;
  *(v15 - 1) = 10;
  if (v9 == 255) {
    int v16 = *(unsigned __int16 *)&__s[v11 + 961];
  }
  else {
    int v16 = 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__s, 0x3C6uLL);
    uint64_t v19 = mach_continuous_time();
    snprintf(__s, 0x3C5uLL, "%10u %s%c %s: zxXvM payload size,%u, blockNum,%u, packet size,%u,NVChecksum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 73, "Hal_SendFirmwareNVData", v5, v9, v11, v16);
    gnssOsa_PrintLog(__s, 4, 1, 0);
  }
  return Hal_SendData((unsigned __int8 *)__str, v11);
}

uint64_t AscToU1(uint64_t result, unsigned __int8 *a2)
{
  *a2 = 0;
  if (result)
  {
    int v2 = *(unsigned __int8 *)result;
    if ((v2 - 48) > 9)
    {
      if ((v2 - 65) > 5 && (v2 - 97) > 5) {
        return 0;
      }
      unsigned __int8 v3 = 16 * v2 - 112;
    }
    else
    {
      unsigned __int8 v3 = 16 * v2;
    }
    *a2 = v3;
    int v4 = *(unsigned __int8 *)(result + 1);
    char v5 = v4 - 48;
    if ((v4 - 48) < 0xA)
    {
LABEL_12:
      *a2 = v5 + v3;
      return 1;
    }
    if ((v4 - 65) <= 5)
    {
      char v5 = v4 - 55;
      goto LABEL_12;
    }
    if ((v4 - 97) <= 5)
    {
      char v5 = v4 - 87;
      goto LABEL_12;
    }
    return 0;
  }
  return result;
}

uint64_t GM_Adjust_AAD(unsigned int a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (((a2 & a1 & 0x80000000) != 0) != v5
    || (a1 & 0x80000000) == 0 && !*(unsigned char *)(a5 + 48 * a1 + 4)
    || (a2 & 0x80000000) == 0 && !*(unsigned char *)(a5 + 48 * a2 + 4))
  {
    return 0;
  }
  if ((a1 & 0x80000000) != 0)
  {
    uint64_t v23 = a3 + 56 * (int)a2;
    long long v24 = *(_OWORD *)(v23 + 16);
    v33[0] = *(_OWORD *)v23;
    v33[1] = v24;
    void v33[2] = *(_OWORD *)(v23 + 32);
    uint64_t v34 = *(void *)(v23 + 48);
    uint64_t v25 = a5 + 48 * (int)a2;
    GM_Aid_NSSS_Meas(v25, 0, (int *)v33);
    int v13 = WORD4(v33[0]) - *(unsigned __int16 *)(v25 + 36);
    int v15 = DWORD1(v33[0]) - *(_DWORD *)(v25 + 32);
    int v16 = LODWORD(v33[0]) - *(_DWORD *)(v25 + 28);
  }
  else
  {
    int v8 = (int *)(a3 + 56 * a1);
    uint64_t v9 = a5 + 48 * a1;
    int v12 = *(_DWORD *)(v9 + 28);
    uint64_t v10 = v9 + 28;
    int v11 = v12;
    int v13 = *((unsigned __int16 *)v8 + 4) - *(unsigned __int16 *)(v10 + 8);
    int v14 = *v8;
    int v15 = v8[1] - *(_DWORD *)(v10 + 4);
    int v16 = v14 - v12;
    if (v14 - v12 >= 201601)
    {
      if (v16 >= 604800) {
        int v16 = 604800;
      }
      int v17 = v11 + 403200 * ((v14 + ~(v11 + v16) + 403200) / 0x62700u);
      int v16 = v14 - 403200 - v17;
      int v11 = v17 + 403200;
      *(_DWORD *)uint64_t v10 = v11;
    }
    if (v16 <= -201601)
    {
      if (v16 <= -604800) {
        int v18 = -604800;
      }
      else {
        int v18 = v16;
      }
      unsigned int v19 = (v18 - v16 - (v16 < 0xFFF6C580)) / 0x62700;
      if (v16 < 0xFFF6C580) {
        ++v19;
      }
      int v20 = 403200 * v19;
      v16 += 403200 + v20;
      *(_DWORD *)uint64_t v10 = v11 - 403200 - v20;
    }
  }
  int v26 = v15 + 1534500 * v16;
  if (v13 >= -32768) {
    int v27 = 0;
  }
  else {
    int v27 = -1;
  }
  if (v13 >= 0x8000) {
    int v28 = 1;
  }
  else {
    int v28 = v27;
  }
  uint64_t v21 = (v26 + v28);
  if (v26 + v28)
  {
    uint64_t v29 = (a4 - 1);
    if (a4 - 1 >= 0)
    {
      uint64_t v30 = v29 + 1;
      long long v31 = (int *)(a5 + 48 * v29 + 32);
      do
      {
        if (*((unsigned char *)v31 - 28)) {
          Inc_CA_Chips(v21, v31, v31 - 1);
        }
        v31 -= 12;
      }
      while (v30-- > 1);
    }
  }
  return v21;
}

uint64_t Kep_Check_Ephemeris(int a1, int a2, int a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a4 + 8);
  switch(v4)
  {
    case 1u:
    case 5u:
      LOWORD(v5) = *(_WORD *)(a4 + 22);
      if (!(_WORD)v5) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 3u:
      int v5 = *(unsigned __int16 *)(a4 + 22);
      if (v5 == 1024) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 4u:
      int v5 = *(unsigned __int16 *)(a4 + 22);
      if (v5 != 1356) {
        goto LABEL_13;
      }
LABEL_8:
      *(_WORD *)(a4 + 22) = a1;
      int v6 = a2 - *(_DWORD *)(a4 + 24);
      if (v6 <= 302399)
      {
        LOWORD(v5) = a1;
        if (v6 >= -302400) {
          goto LABEL_13;
        }
        LOWORD(v5) = a1 - 1;
      }
      else
      {
        LOWORD(v5) = a1 + 1;
      }
      *(_WORD *)(a4 + 22) = v5;
LABEL_13:
      if (a1 - 512 <= (__int16)v5)
      {
        int v7 = (__int16)v5;
      }
      else
      {
        do
          LOWORD(v5) = v5 + 1024;
        while (a1 - 512 > (__int16)v5);
        int v7 = (__int16)v5;
        *(_WORD *)(a4 + 22) = v5;
      }
      int v8 = -604800;
      int v9 = *(_DWORD *)(a4 + 24);
      int v10 = v9 + 604800 * v7;
      int v11 = a2 + 604800 * a1 - v10;
      if (v11 <= 302399)
      {
        if (v11 >= -302400) {
          goto LABEL_22;
        }
        __int16 v12 = -1;
        int v13 = -604800;
        int v8 = 604800;
      }
      else
      {
        __int16 v12 = 1;
        int v13 = 604800;
      }
      *(_WORD *)(a4 + 22) = v12 + v5;
      v10 += v13;
      v11 += v8;
LABEL_22:
      int v14 = v10 - *(_DWORD *)a4;
      if (v14 < 0) {
        int v14 = -v14;
      }
      BOOL v15 = v14 > 0xA8C0;
      if (*(_DWORD *)a4) {
        int v16 = v15;
      }
      else {
        int v16 = 0;
      }
      int v17 = *(unsigned __int8 *)(a4 + 18);
      int v18 = 1800 * v17;
      int v19 = 3600 * v17;
      if (((1 << v4) & 0x58) == 0) {
        int v19 = v18;
      }
      if (v4 > 6) {
        int v19 = v18;
      }
      if ((*(_DWORD *)(a4 + 4) & 0xFFFFFFFE) == 4) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v18;
      }
      if (a3) {
        v20 += 3600;
      }
      if (v11 < 0) {
        int v11 = -v11;
      }
      if (v11 > v20) {
        v16 |= 2u;
      }
      if (v9 < 0) {
        v16 |= 4u;
      }
      if (v9 > 604799) {
        v16 |= 8u;
      }
      int v21 = *(_DWORD *)(a4 + 28);
      if (v21 < 0) {
        v16 |= 0x10u;
      }
      int v22 = v16 | 0x20;
      if (v21 <= 604799) {
        int v22 = v16;
      }
      int v23 = *(unsigned __int8 *)(a4 + 12);
      unsigned int v24 = v4 & 0xFFFFFFFE;
      if ((v4 & 0xFFFFFFFE) == 6 || (double v25 = 4800.0, v4 == 4) && (v23 - 59) <= 0xCAu) {
        double v25 = *(double *)"";
      }
      if (v4 == 4)
      {
        if ((v23 - 6) > 0x34) {
          goto LABEL_70;
        }
LABEL_57:
        double v27 = *(double *)(a4 + 184);
        if (v27 < v25) {
          v22 |= 0x40u;
        }
        if (v27 > 7000.0) {
          v22 |= 0x80u;
        }
        goto LABEL_61;
      }
      if (v4 == 5) {
        goto LABEL_57;
      }
      if (v24 == 6)
      {
LABEL_70:
        double v26 = 6700.0;
        goto LABEL_71;
      }
      double v26 = 5800.0;
LABEL_71:
      double v31 = *(double *)(a4 + 184);
      if (v31 < v25) {
        v22 |= 0x40u;
      }
      if (v31 > v26) {
        v22 |= 0x80u;
      }
      if (v4 == 3)
      {
        double v34 = 0.03;
        if ((((_BYTE)v23 - 14) & 0xFB) == 0) {
          double v34 = 0.25;
        }
        double v35 = *(double *)(a4 + 224);
        int v36 = v22 | 0x100;
        if (v35 >= 0.0) {
          int v36 = v22;
        }
        if (v35 <= v34) {
          int v22 = v36;
        }
        else {
          int v22 = v36 | 0x200;
        }
        double v30 = 0.0;
        goto LABEL_93;
      }
      if (v4 != 4)
      {
        double v28 = 0.03;
        goto LABEL_62;
      }
      if ((v23 - 6) >= 0x35)
      {
        double v32 = *(double *)(a4 + 224);
        int v33 = v22 | 0x100;
        if (v32 >= 0.0) {
          int v33 = v22;
        }
        if (v32 <= 0.03) {
          int v22 = v33;
        }
        else {
          int v22 = v33 | 0x200;
        }
        goto LABEL_84;
      }
LABEL_61:
      double v28 = 0.1;
LABEL_62:
      double v29 = *(double *)(a4 + 224);
      if (v29 < 0.0) {
        v22 |= 0x100u;
      }
      if (v29 > v28) {
        v22 |= 0x200u;
      }
      double v30 = 0.000000314159265;
      if (v4 != 5)
      {
        if (v4 != 4)
        {
          double v30 = 0.0;
          if (v24 != 6) {
            goto LABEL_93;
          }
          goto LABEL_84;
        }
        if ((v23 - 6) >= 0x35) {
LABEL_84:
        }
          double v30 = 0.000000314159265;
      }
LABEL_93:
      double v37 = *(double *)(a4 + 232);
      unsigned int v38 = v22 | 0x400;
      if (v37 >= -0.00000198862815) {
        unsigned int v38 = v22;
      }
      if (v37 <= v30) {
        return v38;
      }
      else {
        return v38 | 0x800;
      }
    default:
      LOWORD(v5) = *(_WORD *)(a4 + 22);
      goto LABEL_13;
  }
}

BOOL SBAS_Set_StateTable(unsigned int a1, unsigned int a2, int *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v6 = &byte_26A9EF534;
  uint64_t v7 = 179;
  int v8 = "SBAS_Set_StateTable:  Replacing Eph,  SV %d  IOD %d  idx %d";
  while (*((_DWORD *)v6 - 3) != 1 || *v6 != a1)
  {
    ++v7;
    v6 += 192;
    if (v7 == 197)
    {
      int v9 = &dword_26A9EF528;
      uint64_t v7 = 179;
      int v8 = "SBAS_Set_StateTable:  New Eph,  SV %d  IOD %d  idx %d";
      while (1)
      {
        int v10 = *v9;
        v9 += 48;
        if (!v10) {
          break;
        }
        if (++v7 == 197)
        {
          EvCrt_v("SBAS_Set_StateTable:  Failed to find space to store Eph,  SV %d  IOD &d", a1);
          return 0;
        }
      }
      break;
    }
  }
  EvLog_v(v8, a1, a2, (v7 - 179));
  *(unint64_t *)((char *)v15[0].n128_u64 + 5) = 0;
  v15[0].n128_u64[0] = 0;
  v15[1] = 0u;
  float64x2_t v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 0;
  SBAS_EphInt2Real((uint64_t)a3, (uint64_t)v15);
  SBAS_Eph2RefState(v15, a1, word_26A9D75E0, (int)*(double *)&qword_26A9D75E8, (uint64_t)&g_DB_SV_State_Table + 192 * v7);
  *(int32x2_t *)int v13 = vmovn_s64(vcvtq_s64_f64(v16));
  int v14 = (int)*(double *)&v17;
  BOOL v11 = Core_Save_SBAS_Apx(a1, 0, *a3, v13);
  if (!v11) {
    EvCrt_v("SBAS_Set_StateTable:  Core_Save_SBAS_Apx() Failed,  SV %d  IOD %d", a1, a2);
  }
  return v11;
}

char *NK_Range_Chip_Check(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 241)
    || *(_DWORD *)(a3 + 1872) != 1
    || *(double *)(a3 + 62008) >= 48.8420427
    || *(_DWORD *)(a3 + 20) != 11)
  {
    return result;
  }
  int v5 = result;
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  int v23 = (unsigned char *)(a3 + 6756);
  uint64_t v9 = a3 + 7064;
  double v26 = result + 8416;
  double v25 = result + 8672;
  int v10 = (double *)(a3 + 12056);
  memset(v27, 0, sizeof(v27));
  do
  {
    if (fabs(*v10) <= 586.104512)
    {
      v7 += *(unsigned __int8 *)(v9 + v6);
      goto LABEL_23;
    }
    if (*(unsigned char *)(v9 + v6))
    {
      double v11 = v10[672];
      if (v11 < 21469.9062)
      {
        unsigned int v12 = *(unsigned __int16 *)&v26[2 * v6] * v25[v6];
        unsigned int v13 = 10 * *(unsigned __int16 *)&v5[2 * v6 + 2400];
        if (v13 / v12 >= 6)
        {
          *((unsigned char *)v27 + v6) = 1;
          int v14 = v8 + 1;
          GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)&v5[4 * v6 + 96]);
          if (*v10 <= 0.0) {
            double v16 = -0.5;
          }
          else {
            double v16 = 0.5;
          }
          double v17 = *v10 + v16;
          int v18 = (int)v17;
          if (v17 < -2147483650.0) {
            int v18 = 0x80000000;
          }
          if (v17 > 2147483650.0) {
            int v18 = 0x7FFFFFFF;
          }
          uint64_t result = EvCrt_v("Potential ChanReset %d : NKRCC  %s  Bad Chip:  PR_Res %d  IntegrationTime %d  CodeLock %d  LoopClosures %d  SNR %d", v6, GNSS_SV_Str, v18, v12, v13, v13 / v12, v5[v6 + 1760]);
          int v8 = v14;
          goto LABEL_23;
        }
      }
    }
    else
    {
      double v11 = v10[672];
    }
    double v19 = *v10 * 0.5 * (*v10 * 0.5);
    if (v11 > v19) {
      double v19 = v11;
    }
    v10[672] = v19;
LABEL_23:
    ++v6;
    ++v10;
  }
  while (v6 != 128);
  if (v8 >= 1)
  {
    if (v8 > 4)
    {
      return EvCrt_v("Skipping above ChanResets:  %d large & %d small (probably clock bias adjustment)", v8, v7);
    }
    else
    {
      uint64_t result = EvCrt_v("Applying above ChanResets to %d channels, with %d not reset", v8, v7);
      uint64_t v20 = 0;
      uint64_t v21 = a3 + 7320;
      do
      {
        if (*((unsigned char *)v27 + v20))
        {
          *(unsigned char *)(v21 + v20 - 256) = 0;
          *(_DWORD *)(v21 + 4 * v20) = 14;
          ++*v23;
          *(unsigned char *)(a2 + 14208 + v20) = 0;
          *(unsigned char *)(a4 + v20 + 448) = 9;
          *(_DWORD *)(a4 + 576 + 4 * v20) = *(_DWORD *)a3;
        }
        ++v20;
      }
      while (v20 != 128);
    }
  }
  return result;
}

uint64_t NK_Comp_PR_DO_Res(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a3;
  uint64_t v144 = *MEMORY[0x263EF8340];
  double v11 = (_DWORD *)(a7 + 59940);
  if (*(unsigned char *)(a4 + 1836) && fabs(*(double *)(a4 + 120)) < 2.5 && *(unsigned char *)(a7 + 62212) && *v11 <= 7u) {
    unsigned int v105 = (0xF4u >> *v11) & 1;
  }
  else {
    unsigned int v105 = 0;
  }
  double v99 = (_DWORD *)(a7 + 59940);
  int v12 = 0;
  int v96 = (_DWORD *)(a3 + 50556);
  int v95 = (_DWORD *)(a3 + 25344);
  double v113 = 0.0;
  unsigned int v13 = (double *)(a6 + 1712);
  int v14 = (double *)(a6 + 1720);
  double v94 = (double *)(a7 + 1704);
  *(void *)(a6 + 1712) = 0;
  *(void *)(a6 + 1728) = 0;
  *(void *)(a6 + 1720) = 0;
  double v15 = *(double *)(a7 + 1720) - *(double *)(a7 + 1728);
  double v16 = *(double *)(a7 + 1704) * 57.2957795;
  int v112 = 0;
  int v17 = *(_DWORD *)(a6 + 1704);
  if (v17 == 2) {
    goto LABEL_14;
  }
  if (v17 == 1)
  {
    int v18 = (double *)(a6 + 1728);
    if (*(unsigned char *)(a7 + 1540))
    {
      GPS_To_UTC_DOY(&v112, *(_WORD *)(a7 + 1542), *(double *)(a7 + 1528), *(double *)(a3 + 62376));
      int v12 = v112;
    }
    else
    {
      int v12 = 0;
    }
    if (UNB_TropModel::Get_Zenith_Delays_Meter((UNB_TropModel *)(a6 + 1736), v15, v16, v12, (double *)(a6 + 1720), (double *)(a6 + 1728)))
    {
      double *v13 = *v14 + *v18;
      goto LABEL_15;
    }
LABEL_14:
    double v19 = Zen_Trop_Delay_STANAG_4294(v15);
    double *v13 = v19;
    *int v14 = v19;
  }
LABEL_15:
  int v104 = v12;
  __int16 v134 = 0;
  long long v132 = 0u;
  long long v133 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  memset(v127, 0, sizeof(v127));
  v135[0] = 0;
  *(_DWORD *)((char *)v135 + 3) = 0;
  uint64_t result = VecSortDscU1(a1 + 1760, 0x80u, v136);
  uint64_t v21 = 0;
  long long v22 = v141;
  *(_OWORD *)(a7 + 79633) = v140;
  *(_OWORD *)(a7 + 79649) = v22;
  BOOL v93 = (char *)(v9 + 8952);
  long long v23 = v143;
  *(_OWORD *)(a7 + 79665) = v142;
  *(_OWORD *)(a7 + 79681) = v23;
  long long v24 = v137;
  *(_OWORD *)(a7 + 79569) = *(_OWORD *)v136;
  *(_OWORD *)(a7 + 79585) = v24;
  long long v25 = v139;
  *(_OWORD *)(a7 + 79601) = v138;
  *(_OWORD *)(a7 + 79617) = v25;
  double v26 = -0.9;
  *(double *)&uint64_t v27 = 900.0;
  double v28 = -299792458.0;
  double v29 = 0.16;
  do
  {
    uint64_t v30 = v136[v21];
    uint64_t v31 = a1 + 4 * v30;
    int v33 = *(unsigned __int8 *)(v31 + 96);
    double v32 = (unsigned __int8 *)(v31 + 96);
    if (v33 == 7) {
      goto LABEL_41;
    }
    uint64_t result = Is_Legal(*(_DWORD *)v32);
    if (!result || !*(unsigned char *)(a7 + v30 + 6808) || *(__int16 *)(a7 + 2 * v30 + 62932) < 0) {
      goto LABEL_38;
    }
    uint64_t v34 = a2 + 192 * *(unsigned __int16 *)(a7 + 2 * v30 + 62932);
    long long v35 = *(_OWORD *)(v34 + 144);
    long long v122 = *(_OWORD *)(v34 + 128);
    long long v123 = v35;
    long long v36 = *(_OWORD *)(v34 + 176);
    long long v124 = *(_OWORD *)(v34 + 160);
    long long v125 = v36;
    long long v37 = *(_OWORD *)(v34 + 80);
    long long v118 = *(_OWORD *)(v34 + 64);
    long long v119 = v37;
    long long v38 = *(_OWORD *)(v34 + 112);
    long long v120 = *(_OWORD *)(v34 + 96);
    long long v121 = v38;
    long long v39 = *(_OWORD *)(v34 + 16);
    float64x2_t v114 = *(float64x2_t *)v34;
    long long v115 = v39;
    long long v40 = *(_OWORD *)(v34 + 48);
    long long v116 = *(_OWORD *)(v34 + 32);
    long long v117 = v40;
    if (v125 == 2)
    {
      if (!*(unsigned char *)(a6 + 5)) {
        goto LABEL_38;
      }
      int v41 = *(__int16 *)(a7 + 26);
      if (v41 - SWORD2(v124) > 2 || !*(_DWORD *)(a6 + 27136) && *(int *)(a7 + 1868) < 2) {
        goto LABEL_38;
      }
    }
    else
    {
      if (v125 != 1) {
        goto LABEL_38;
      }
      LOWORD(v41) = *(_WORD *)(a7 + 26);
    }
    uint64_t v42 = a1 + 8 * v30;
    uint64_t result = Comp_CurrState(0x258u, (__int16)v41, (uint64_t)&v114, (uint64_t)v127, *(double *)(a7 + 32), *(double *)(v42 + 3424));
    unsigned int v43 = v32[1];
    if (v43 > 0xF || ((1 << v43) & 0xDD77) == 0) {
      *((double *)&v129 + 1) = *((double *)&v129 + 1) - (*(double *)&v132 - *(double *)&v133);
    }
    if (v125 != 1)
    {
      if (!result) {
        goto LABEL_38;
      }
LABEL_34:
      double v111 = 0.0;
      uint64_t v44 = a6 + 4 * v30;
      BOOL v45 = *(_DWORD *)v32 != *(_DWORD *)(v44 + 15624)
         || v134 != *(_WORD *)(a6 + 2 * v30 + 16648)
         || DWORD2(v133) != *(_DWORD *)(a6 + 4 * v30 + 16136)
         || *(unsigned char *)(a6 + v30 + 16904) == 0;
      double v102 = (_DWORD *)(v44 + 15624);
      uint64_t v103 = v9;
      int v97 = (BOOL *)(a7 + v30 + 52616);
      float64x2_t v98 = (void *)(v42 + 3424);
      *int v97 = v45;
      double v107 = Comp_SVrange_Sag_Corr(&v114, &v111, (float64x2_t *)(a7 + 1560), (float64x2_t *)&v127[1]);
      uint64_t v48 = 0;
      float64x2_t v49 = v114;
      double v50 = (double *)(a7 + 1752);
      double v51 = *(double *)&v115;
      do
      {
        double v52 = *(v50 - 1) * v49.f64[1] + *(v50 - 2) * v49.f64[0];
        double v53 = *v50;
        v50 += 3;
        v126[v48++] = v52 + v53 * v51;
      }
      while (v48 != 3);
      uint64_t v54 = a6 + 40 * (int)v30;
      uint64_t v55 = v54 + 7040;
      AzEl_SinCos(v126, v54 + 7040, v54 + 1920);
      uint64_t v100 = v54 + 1920;
      AzEl_RadDeg(v54 + 7040, v54 + 1920);
      *(_DWORD *)(a6 + 4 * v30 + 12160) = *(_DWORD *)a7;
      int v56 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v32);
      *(_WORD *)(a5 + 2 * v56 + 218) = *(_DWORD *)(v54 + 7040);
      *(unsigned char *)(a5 + v56) = *(_DWORD *)(v54 + 1920);
      uint64_t v57 = *(void *)(v54 + 7072);
      long long v58 = *(_OWORD *)(v54 + 7056);
      uint64_t v59 = a5 + 40 * v56;
      *(_OWORD *)(v59 + 9376) = *(_OWORD *)(v54 + 7040);
      *(_OWORD *)(v59 + 9392) = v58;
      *(void *)(v59 + 9408) = v57;
      long long v60 = *(_OWORD *)(v54 + 1936);
      long long v61 = *(_OWORD *)(v54 + 1920);
      *(void *)(v59 + 688) = *(void *)(v54 + 1952);
      *(_OWORD *)(v59 + 656) = v61;
      *(_OWORD *)(v59 + 672) = v60;
      double v110 = 0.0;
      double v62 = 0.0;
      if (*(unsigned char *)(a7 + 1864))
      {
        uint64_t v9 = v103;
        if (*(double *)(a6 + 40 * (int)v30 + 1952) > 0.0 && *(_DWORD *)(v103 + 8956))
        {
          double v63 = GPS_Klob_Iono_Delay(v94, v55, v100, v93, *(double *)(a7 + 32));
          GPS_L1_Iono_Scale_factor();
          double v62 = v63 * v64;
          double v110 = v62;
        }
      }
      else
      {
        uint64_t v9 = v103;
      }
      *(double *)(a7 + 8 * v30 + 78496) = v62;
      double v109 = 0.0;
      if (R8_EQ(&v110, &v109)) {
        double v65 = 25.0 / (*(double *)(a6 + 40 * (int)v30 + 1936) * v26 * *(double *)(a6 + 40 * (int)v30 + 1936) + 1.0);
      }
      else {
        double v65 = v62 * 0.25 * (v62 * 0.25);
      }
      int v66 = *v32;
      if (v66 == 6)
      {
        double v67 = 0.0;
        double v68 = *(double *)&v27;
        if ((*v96 - 2) <= 4)
        {
          double v67 = *(double *)(a7 + 1504);
          double v68 = 400.0;
          if (*v96 != 2) {
            double v68 = 25.0;
          }
          *(double *)(a6 + 15584) = v68;
        }
      }
      else
      {
        if (v66 != 3) {
          goto LABEL_65;
        }
        double v67 = 0.0;
        double v68 = *(double *)&v27;
        if ((*v95 - 2) <= 4)
        {
          double v67 = *(double *)(a7 + 1496);
          double v68 = 100.0;
          if (*v95 != 2) {
            double v68 = 2.25;
          }
          *(double *)(a6 + 15552) = v68;
        }
      }
      *((double *)&v129 + 1) = v67 + *((double *)&v129 + 1);
      *((double *)&v130 + 1) = v68 + *((double *)&v130 + 1);
LABEL_65:
      NK_Comp_ith_PR_Res(v30, v104, (uint64_t)v127, v100, a1, a6, a7, v107, v15, v16, v62, v65, v111);
      if (*(unsigned char *)(a7 + v30 + 63904))
      {
        uint64_t v69 = a7 + 24 * (int)v30;
        *(_OWORD *)(v69 + 65184) = *(_OWORD *)&v127[1];
        *(_OWORD *)(v69 + 68256) = v128;
        double v70 = (void *)(a7 + 8 * v30);
        uint64_t v71 = v130;
        v70[8916] = *((void *)&v129 + 1);
        *(void *)(v69 + 65200) = v127[3];
        *(void *)(v69 + 68272) = v129;
        v70[9044] = v71;
        v70[9172] = *((void *)&v130 + 1);
      }
      if (*(unsigned char *)(a7 + v30 + 6936))
      {
        int v72 = *(_DWORD *)a7;
        uint64_t v73 = a6 + 4 * v30;
        double v74 = *(double *)(a7 + 6752 + 8 * v30 + 4280)
            + (*(double *)(a7 + 6752 + 24 * (int)v30 + 1208) + *(double *)(a7 + 6752 + 24 * (int)v30 + 1216))
            * v29
            * *(double *)(a6 + 26976);
        double v75 = (unsigned char *)(a6 + v30 + 14208);
        if (*v75
          && *(_DWORD *)v32 == *v102
          && ((int v76 = v72 - *(_DWORD *)(v73 + 12672), v77 = a6 + 8 * v30, v78 = *(double *)(v77 + 13184), v78 < v74)
            ? (BOOL v79 = v76 <= 59999)
            : (BOOL v79 = 0),
              v79))
        {
          *(double *)(v77 + 13184) = v78 + (double)(v76 / 1000);
        }
        else
        {
          *double v75 = 1;
          *(_DWORD *)(v73 + 12672) = v72;
          *(double *)(a6 + 8 * v30 + 13184) = v74;
        }
      }
      if (!v105)
      {
        uint64_t result = NK_Comp_ith_DO_Res(v30, v114.f64, (uint64_t)v127, a7, &v113, *(double *)(a1 + 8 * v30 + 4448));
LABEL_88:
        uint64_t v87 = a7 + 56 * (int)v30 + 52760;
        *(float64x2_t *)uint64_t v87 = v114;
        *(void *)(v87 + 16) = v115;
        if (!*v97)
        {
          for (uint64_t i = 0; i != 3; ++i)
            *(double *)(a7 + 52784 + 56 * (int)v30 + i * 8) = *(double *)(a6 + 21184 + 24 * (int)v30 + i * 8)
                                                              - v114.f64[i];
        }
        *(double *)(a7 + 56 * (int)v30 + 52808) = (v113 + *(double *)(a7 + 1664) * v28) * 0.001;
        *double v102 = *(_DWORD *)v32;
        *(_WORD *)(a6 + 2 * v30 + 16648) = v134;
        *(_DWORD *)(a6 + 4 * v30 + 16136) = DWORD2(v133);
        *(unsigned char *)(a6 + v30 + 16904) = 1;
        uint64_t v89 = a6 + 8 * v30;
        *(double *)(v89 + 17032) = v107;
        *(void *)(v89 + 25952) = *v98;
        uint64_t v90 = a6 + 24 * (int)v30;
        *(float64x2_t *)(v90 + 21184) = v114;
        *(void *)(v90 + 21200) = v115;
        goto LABEL_39;
      }
      double v91 = v29;
      double v92 = v28;
      double v80 = v15;
      uint64_t v81 = v27;
      double v82 = v26;
      uint64_t v83 = a1 + 8 * v30;
      double v84 = *(double *)(v83 + 5472);
      double v101 = (unsigned char *)(a7 + v30 + 51464);
      *double v101 = 1;
      double v85 = *(double *)(v83 + 4448);
      if (*v99 == 7) {
        double v86 = 10.0;
      }
      else {
        double v86 = 6.0;
      }
      double v109 = 0.0;
      if (R8_EQ((const double *)(v83 + 5472), &v109))
      {
        *double v101 = 0;
        Get_GNSS_SV_Str(*(unsigned int *)v32);
        EvLog_v("NK_Comp_PR_DO_Meas:  %d  %s  Ignoring 0.0 AD");
      }
      else
      {
        if (fabs(v85 - v84) <= v86)
        {
LABEL_85:
          uint64_t result = NK_Comp_ith_DO_Res(v30, v114.f64, (uint64_t)v127, a7, &v113, v84);
          uint64_t v9 = v103;
          double v26 = v82;
          uint64_t v27 = v81;
          double v15 = v80;
          double v28 = v92;
          double v29 = v91;
          if (*v101 && *(unsigned char *)(a7 + v30 + 21968)) {
            *(unsigned char *)(a7 + v30 + 22096) = 1;
          }
          goto LABEL_88;
        }
        *double v101 = 0;
        Get_GNSS_SV_Str(*(unsigned int *)v32);
        EvLog_v("NK_Comp_PR_DO_Meas:  %d  %s  DO-AD = %d m/s !  (%d - %d)  Tol %d");
      }
      double v84 = v85;
      goto LABEL_85;
    }
    *(unsigned char *)(a7 + v30 + 57) = 1;
    if (result) {
      goto LABEL_34;
    }
LABEL_38:
    __int16 v46 = (_DWORD *)(a6 + 4 * v30);
    v46[3906] = 0;
    *(_WORD *)(a6 + 2 * v30 + 16648) = 0;
    *(unsigned char *)(a6 + v30 + 16904) = 0;
    v46[4034] = 0;
    __int16 v47 = (void *)(a6 + 8 * v30);
    v47[2129] = 0;
    v47[2257] = 0;
    v47[2385] = 0;
    v46[3040] = 0;
LABEL_39:
    if (!*(unsigned char *)(a7 + v30 + 6936)) {
      *(unsigned char *)(a7 + v30 + 52616) = 1;
    }
LABEL_41:
    ++v21;
  }
  while (v21 != 128);
  return result;
}

char *NK_Validate_Cor(char *result, double *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned char *a7, unsigned char *a8, uint64_t a9, _WORD *a10, uint64_t a11, uint64_t a12, double *a13, double *a14, uint64_t a15, uint64_t a16, _DWORD *a17, unsigned int *a18, _DWORD *a19, _DWORD *a20,unsigned int *a21,uint64_t a22)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a15 + 8) = 0;
  *(void *)a15 = 0;
  long long v22 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)a16 = *(_OWORD *)a12;
  *(_OWORD *)(a16 + 16) = v22;
  long long v23 = *(_OWORD *)(a12 + 32);
  long long v24 = *(_OWORD *)(a12 + 48);
  long long v25 = *(_OWORD *)(a12 + 80);
  *(_OWORD *)(a16 + 64) = *(_OWORD *)(a12 + 64);
  *(_OWORD *)(a16 + 80) = v25;
  *(_OWORD *)(a16 + 32) = v23;
  *(_OWORD *)(a16 + 48) = v24;
  double v26 = (double *)(a4 + 16);
  for (uint64_t i = 48; i != 72; i += 8)
  {
    double v28 = *(v26 - 1) * *(double *)(a12 + 56) + *(v26 - 2) * *(double *)(a12 + 48);
    double v29 = *v26;
    v26 += 3;
    *(double *)(a16 + i) = v28 + v29 * *(double *)(a12 + 64);
  }
  uint64_t v30 = (double *)(a4 + 16);
  do
  {
    double v31 = *(v30 - 1) * *(double *)(a12 + 80) + *(v30 - 2) * *(double *)(a12 + 72);
    double v32 = *v30;
    v30 += 3;
    *(double *)(a16 + i) = v31 + v32 * *(double *)(a12 + 88);
    i += 8;
  }
  while (i != 96);
  unint64_t v33 = 0;
  __asm { FMOV            V0.2D, #16.0 }
  do
  {
    *(float64x2_t *)&v104[v33 / 8] = vmulq_f64(*(float64x2_t *)(a16 + v33), *(float64x2_t *)(a16 + v33));
    *(float64x2_t *)((char *)&v98 + v33) = vmulq_f64(*(float64x2_t *)(a3 + v33), _Q0);
    v33 += 16;
  }
  while (v33 != 96);
  float64x2_t v38 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
  float64x2_t v39 = vmaxnmq_f64(v98, v38);
  float64x2_t v40 = vmaxnmq_f64(v99, (float64x2_t)xmmword_263D84950);
  float64x2_t v98 = v39;
  float64x2_t v99 = v40;
  double v41 = fmax(v100, 400.0);
  double v100 = v41;
  float64x2_t v42 = vmaxnmq_f64(v101, v38);
  float64x2_t v43 = vmaxnmq_f64(v102, (float64x2_t)xmmword_263D84960);
  float64x2_t v101 = v42;
  float64x2_t v102 = v43;
  float64x2_t v44 = vmaxnmq_f64(v103, (float64x2_t)vdupq_n_s64(0x4079000000000000uLL));
  float64x2_t v103 = v44;
  double v45 = fabs(*(double *)(a16 + 40));
  *a17 = v45;
  double v46 = 0.0;
  uint64_t v47 = 8;
  do
  {
    double v46 = v46 + *(double *)(a16 + 8 * v47) * *(double *)(a16 + 8 * v47);
    unint64_t v48 = v47 - 5;
    --v47;
  }
  while (v48 > 1);
  *a18 = sqrt(v46);
  double v49 = 0.0;
  *a19 = sqrt(*(double *)(a16 + 56) * *(double *)(a16 + 56)+ 0.0+ *(double *)(a16 + 48) * *(double *)(a16 + 48));
  *a20 = fabs(*(double *)(a16 + 64));
  uint64_t v50 = 11;
  do
  {
    double v49 = v49 + *(double *)(a16 + 8 * v50) * *(double *)(a16 + 8 * v50);
    unint64_t v51 = v50 - 8;
    --v50;
  }
  while (v51 > 1);
  *a21 = sqrt(v49);
  if (*(unsigned char *)a9) {
    goto LABEL_158;
  }
  if (*a7)
  {
    BOOL v52 = 1;
    BOOL v53 = 1;
    BOOL v54 = 1;
  }
  else
  {
    BOOL v54 = a13[1] >= 5.0;
    BOOL v53 = a13[2] >= 5.0;
    BOOL v52 = a13[3] >= 3.0 || *(double *)(a3 + 24) >= 9.0;
    if (*a13 < 5.0 && (*a2 >= 100000000.0 || v104[0] >= v39.f64[0])) {
      goto LABEL_29;
    }
  }
  if (result[7]
    || *((_DWORD *)result + 9) == 1
    || *((_DWORD *)result + 10) == 2
    || fabs(*(double *)a16) < fmin(*a13, 5.0))
  {
    *(unsigned char *)a15 = 1;
  }
LABEL_29:
  if (v54 || (a2[1] < 100000000.0 ? (BOOL v56 = v104[1] < v39.f64[1]) : (BOOL v56 = 0), v56))
  {
    if (result[12]
      || *((_DWORD *)result + 9) == 1
      || *((_DWORD *)result + 10) == 2
      || fabs(*(double *)(a16 + 8)) < fmin(a13[1], 5.0))
    {
      *(unsigned char *)(a15 + 1) = 1;
    }
  }
  if (v53 || (a2[2] < 100000000.0 ? (BOOL v57 = v104[2] < v40.f64[0]) : (BOOL v57 = 0), v57))
  {
    if (result[17]
      || *((_DWORD *)result + 9) == 1
      || *((_DWORD *)result + 11) == 2
      || fabs(*(double *)(a16 + 16)) < fmin(a13[2], 5.0))
    {
      *(unsigned char *)(a15 + 2) = 1;
    }
  }
  double v58 = 20.0;
  if (!v52)
  {
    if (a2[3] >= 9.0 || v104[3] >= v40.f64[1]) {
      goto LABEL_58;
    }
    double v58 = 20.0;
    if (a13[3] < 20.0) {
      double v58 = a13[3];
    }
  }
  if (fabs(*(double *)(a16 + 24)) < v58) {
    *(unsigned char *)(a15 + 3) = 1;
  }
LABEL_58:
  int v59 = *a7;
  if (*a7 || a2[4] < 900.0 && v104[4] < v41)
  {
    if (result[5] || *((_DWORD *)result + 12) == 1 || fabs(*(double *)(a16 + 32)) < fmin(a13[4], 0.5))
    {
      *(unsigned char *)(a15 + 4) = 1;
      int v59 = *a7;
    }
    if (v59)
    {
      int v60 = 1;
LABEL_67:
      int v61 = *((_DWORD *)result + 14);
      int v62 = *((_DWORD *)result + 15);
      if (v61 == 1) {
        int v63 = 1;
      }
      else {
        int v63 = 3;
      }
      unsigned int v64 = v63 - (v62 == 1);
      unsigned int v65 = result[2];
      if (v64 <= v65 || v105 < a14[6] && v106 < a14[7] && v107 < a14[8]) {
        goto LABEL_94;
      }
      if (v61) {
        unsigned int v66 = v65 + 2;
      }
      else {
        unsigned int v66 = result[2];
      }
      if (v62) {
        ++v66;
      }
      if (*((_DWORD *)result + 9)) {
        ++v66;
      }
      if (*((_DWORD *)result + 17) || *((_DWORD *)result + 18)) {
        ++v66;
      }
      if (*((_DWORD *)result + 19) || *((_DWORD *)result + 21)) {
        ++v66;
      }
      if (*((_DWORD *)result + 20) || *((_DWORD *)result + 22)) {
        ++v66;
      }
      if (*((_DWORD *)result + 23) || *((_DWORD *)result + 24)) {
        ++v66;
      }
      if (v66 >= 3)
      {
LABEL_94:
        *(unsigned char *)(a15 + 6) = 1;
        int v60 = *a7;
      }
      if (v60) {
        goto LABEL_96;
      }
      goto LABEL_113;
    }
  }
  if (a2[6] < 100000000.0
    && a2[7] < 100000000.0
    && a2[8] < 100000000.0
    && v105 < v42.f64[0]
    && v106 < v42.f64[1]
    && v107 < v43.f64[0])
  {
    int v60 = 0;
    goto LABEL_67;
  }
LABEL_113:
  if (a5 > 8) {
    double v71 = 100000000.0;
  }
  else {
    double v71 = dbl_263D84980[a5];
  }
  if (a2[9] >= v71) {
    goto LABEL_144;
  }
  double v72 = a5 > 8 ? 100000000.0 : dbl_263D84980[a5];
  if (a2[10] >= v72) {
    goto LABEL_144;
  }
  double v73 = a5 > 8 ? 100000000.0 : dbl_263D84980[a5];
  if (a2[11] >= v73 || v108 >= v43.f64[1] || v109 >= v44.f64[0] || v110 >= v44.f64[1]) {
    goto LABEL_144;
  }
LABEL_96:
  int v67 = *((_DWORD *)result + 16);
  if (v67 == 1) {
    unsigned int v68 = 2;
  }
  else {
    unsigned int v68 = 3;
  }
  unsigned int v69 = result[5];
  if (v68 <= v69 || v108 < a14[9] && v109 < a14[10] && v110 < a14[11]) {
    goto LABEL_142;
  }
  if (v69 >= 2 && *(unsigned char *)(a15 + 4)) {
    unsigned int v70 = (v69 - 1);
  }
  else {
    unsigned int v70 = 0;
  }
  if (v67) {
    unsigned int v74 = v70 + 1;
  }
  else {
    unsigned int v74 = v70;
  }
  if (*((_DWORD *)result + 12)) {
    ++v74;
  }
  if (*((_DWORD *)result + 17) || *((_DWORD *)result + 18)) {
    ++v74;
  }
  if (*((_DWORD *)result + 19) || *((_DWORD *)result + 21)) {
    ++v74;
  }
  if (*((_DWORD *)result + 20) || *((_DWORD *)result + 22)) {
    ++v74;
  }
  if (*((_DWORD *)result + 23) || *((_DWORD *)result + 24)) {
    ++v74;
  }
  if (v74 > 2)
  {
LABEL_142:
    char v75 = 1;
    uint64_t v76 = 9;
LABEL_143:
    *(unsigned char *)(a15 + v76) = v75;
    goto LABEL_144;
  }
  if (!result[2] && *((_DWORD *)result + 14) != 1 && *((_DWORD *)result + 15) != 1 && *((_DWORD *)result + 9) != 1)
  {
    char v75 = 0;
    uint64_t v76 = 6;
    goto LABEL_143;
  }
LABEL_144:
  if ((*((_DWORD *)result + 8) - 1) < 2) {
    goto LABEL_145;
  }
  if (result[2] >= 3u && (*(unsigned char *)a15 || *(unsigned char *)(a15 + 1) || *(unsigned char *)(a15 + 2)))
  {
    if (*(unsigned char *)(a15 + 6))
    {
      if (a2[5] < 250000.0)
      {
        uint64_t v77 = 0;
        double v78 = 0.0;
        do
        {
          double v78 = v78 + a2[v77 + 6];
          ++v77;
        }
        while (v77 != 3);
        if (v78 < 250000.0) {
          goto LABEL_145;
        }
      }
    }
  }
  if (!*a7 && a2[5] < 100.0 && v45 < a13[5]) {
LABEL_145:
  }
    *(unsigned char *)(a15 + 5) = 1;
LABEL_158:
  unsigned int v79 = *a18;
  if (*a18 >= 0xC351 && *(unsigned char *)(a15 + 6))
  {
    if (*a7)
    {
LABEL_170:
      if (v79 >= 0x927C01 && *(unsigned char *)(a15 + 6))
      {
        double v86 = 9600000.0 / (double)v79;
        *(float64x2_t *)a12 = vmulq_n_f64(*(float64x2_t *)a12, v86);
        *(double *)(a12 + 16) = v86 * *(double *)(a12 + 16);
        uint64_t v87 = 8;
        do
        {
          *(double *)(a12 + 8 * v87) = v86 * *(double *)(a12 + 8 * v87);
          unint64_t v88 = v87 - 5;
          --v87;
        }
        while (v88 > 1);
        uint64_t v89 = 0;
        *(void *)(a15 + 3) = 0;
        *(_WORD *)a15 = 257;
        *(unsigned char *)(a15 + 2) = 1;
        *(unsigned char *)(a15 + 6) = 1;
        *(unsigned char *)(a15 + 11) = 0;
        long long v90 = *(_OWORD *)(a12 + 16);
        *(_OWORD *)a16 = *(_OWORD *)a12;
        *(_OWORD *)(a16 + 16) = v90;
        long long v91 = *(_OWORD *)(a12 + 32);
        long long v92 = *(_OWORD *)(a12 + 48);
        long long v93 = *(_OWORD *)(a12 + 80);
        *(_OWORD *)(a16 + 64) = *(_OWORD *)(a12 + 64);
        *(_OWORD *)(a16 + 80) = v93;
        *(_OWORD *)(a16 + 32) = v91;
        *(_OWORD *)(a16 + 48) = v92;
        *a8 = 0;
        do
        {
          a13[v89] = 10098990.0;
          a14[v89++] = 1.00979801e14;
        }
        while (v89 != 12);
      }
      goto LABEL_176;
    }
    uint64_t v80 = 0;
    *(_DWORD *)(a15 + 8) = 0;
    *(void *)a15 = 0;
    *(unsigned char *)a9 = 1;
    *(_DWORD *)(a9 + 4) = 96;
    *a8 = 0;
    *a7 = 1;
    do
    {
      a13[v80] = 10098990.0;
      a14[v80] = 1.00979801e14;
      *(unsigned char *)(a22 + v80++) = 0;
    }
    while (v80 != 12);
    if (!*(unsigned char *)(a11 + 444)) {
      ++*(_WORD *)(a11 + 446);
    }
    int v97 = a7;
    unsigned int v81 = a5;
    double v82 = a8;
    uint64_t v83 = 0;
    *(unsigned char *)(a11 + 444) = 1;
    *(void *)&long long v84 = 0x1111111111111111;
    *((void *)&v84 + 1) = 0x1111111111111111;
    *(_OWORD *)(a11 + 448) = v84;
    *(_OWORD *)(a11 + 464) = v84;
    *(_OWORD *)(a11 + 480) = v84;
    *(_OWORD *)(a11 + 496) = v84;
    *(_OWORD *)(a11 + 512) = v84;
    *(_OWORD *)(a11 + 528) = v84;
    *(_OWORD *)(a11 + 544) = v84;
    *(_OWORD *)(a11 + 560) = v84;
    int32x4_t v85 = vdupq_n_s32(a6);
    do
    {
      *(int32x4_t *)(a11 + 576 + v83) = v85;
      v83 += 16;
    }
    while (v83 != 512);
    uint64_t result = EvCrt_v("ChanReset ALL : NKVC  Large Pos corr %d m  Vel corr %d m/s  Count %d", *a18, *a21, *(unsigned __int16 *)(a11 + 446));
    a8 = v82;
    a5 = v81;
    a7 = v97;
  }
  if (*a7)
  {
    unsigned int v79 = *a18;
    goto LABEL_170;
  }
LABEL_176:
  if (a5 >= 5) {
    unsigned int v94 = 1200;
  }
  else {
    unsigned int v94 = 600;
  }
  if (*(unsigned char *)(a15 + 4) && fabs(*(double *)(a12 + 32)) > 15000.0) {
    goto LABEL_183;
  }
  if (!*(unsigned char *)(a15 + 9))
  {
    char v95 = 0;
    goto LABEL_187;
  }
  if (*a21 > v94)
  {
LABEL_183:
    char v95 = 0;
    *(unsigned char *)(a15 + 4) = 0;
    *(unsigned char *)(a15 + 9) = 0;
    if ((unsigned __int16)*a10 <= 2u)
    {
      char v95 = 0;
      *a10 = 3;
    }
  }
  else
  {
    char v95 = 1;
  }
LABEL_187:
  if (*a18 >= 0x1D4C1)
  {
    char v95 = 0;
    *(unsigned char *)(a15 + 4) = 0;
    *(unsigned char *)(a15 + 9) = 0;
  }
  char v96 = *(unsigned char *)(a15 + 6);
  *(unsigned char *)(a15 + 7) = v96;
  *(unsigned char *)(a15 + 8) = v96;
  *(unsigned char *)(a15 + 10) = v95;
  *(unsigned char *)(a15 + 11) = v95;
  return result;
}

void Apply_Q_Boost(double a1, unsigned int a2, unsigned int a3, double *a4, unsigned int *a5, double *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  do
  {
    bzero(a6, 8 * a2);
    a6[a2++] = 1.0;
    int v12 = 0;
    if (a1 > 0.0)
    {
      rnk1_core(a4, a2, a1, a6, &v12);
      if (v12) {
        ++*a5;
      }
    }
    --v11;
  }
  while (v11);
}

uint64_t Hal_CommsItfInitialize(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_CommsInitPcie");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!gp_Comm)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx comm obj\n");
      goto LABEL_12;
    }
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)gp_Comm + 16))(gp_Comm)
    || ((*(uint64_t (**)(uint64_t))(*(void *)gp_Comm + 112))(gp_Comm) & 1) == 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx open port\n");
LABEL_12:
      gnssOsa_PrintLog(__str, 1, 1, 0);
      return 0;
    }
    return 0;
  }
  if (g_LbsOsaTrace_Config < 4) {
    return 1;
  }
  bzero(__str, 0x3C6uLL);
  uint64_t v1 = mach_continuous_time();
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 73, "Hal_CommsInitPcie");
  uint64_t v2 = 1;
  gnssOsa_PrintLog(__str, 4, 1, 0);
  return v2;
}

void Hal_CommsItfDeInitialize(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_CommsDeInitPcie");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Skipping GnssPort close\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 73, "Hal_CommsDeInitPcie");
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v2 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_CommsDeInitPcie");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
  }
}

uint64_t Hal_CommsItfWriteData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!g_IsSPIEnabled)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)gp_Comm + 32))(gp_Comm))
    {
      if ((*(uint64_t (**)(uint64_t, unsigned __int8 *, void))(*(void *)gp_Comm + 96))(gp_Comm, a1, v2))
      {
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Writesuccess,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 68, "Hal_CommsItfWriteDataPcie", v2);
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        return v2;
      }
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
        goto LABEL_13;
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Port\n");
LABEL_13:
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0xFFFFFFFFLL;
  }

  return Hal35_SPIWrite(a1, (unsigned __int16)a2);
}

uint64_t Hal_CommsItfReadData(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (((*(uint64_t (**)(uint64_t))(*(void *)gp_Comm + 32))(gp_Comm) & 1) == 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Port\n");
LABEL_9:
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, void))(*(void *)gp_Comm + 56))(gp_Comm, a1, a2);
  if (v4 < 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_9;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v4;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: read,%zd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 68, "Hal_CommsItfReadData", v5);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return v5;
}

uint64_t Hal_SetReadCbAsync(void (*a1)(unsigned __int8 *, unsigned int))
{
  void v7[4] = *MEMORY[0x263EF8340];
  if (!a1 || !gp_Comm)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal_SetReadCbAsync");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 0;
  }
  v7[0] = &unk_270ED2058;
  v7[1] = a1;
  v7[3] = v7;
  int v1 = (*(uint64_t (**)(uint64_t, void *))(*(void *)gp_Comm + 80))(gp_Comm, v7);
  std::__function::__value_func<void ()(unsigned char *,unsigned long)>::~__value_func[abi:ne180100](v7);
  if (!v1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: read cb set failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "Hal_SetReadCbAsync");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: read via cb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_SetReadCbAsync");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return 1;
}

void sub_263D1F6CC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(unsigned char *,unsigned long)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

BOOL Hal25_TriggerTimeMarkStrobe(unsigned int *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal25_TriggerTimeMarkStrobe");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v3 = gp_Comm;
  if (gp_Comm)
  {
    (*(void (**)(char *__return_ptr, uint64_t))(*(void *)gp_Comm + 144))(__str, gp_Comm);
    uint64_t v4 = *(void *)__str;
    uint64_t v5 = v11;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TM trigger via comm interface\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal25_TriggerTimeMarkStrobe");
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time LB,%llu,UB,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 68, "Hal25_TriggerTimeMarkStrobe", v4, v5);
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    if (a1) {
      *a1 = ((double)((unint64_t)(v5 + v4) >> 1) / 1000000.0 + 0.5);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx comm obj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "Hal25_TriggerTimeMarkStrobe", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v3 != 0;
}

void std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::~__func()
{
  JUMPOUT(0x263E6EDB0);
}

void *std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270ED2058;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270ED2058;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::destroy_deallocate(void *__p)
{
  operator delete(__p);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;

  return v3(v4, v5);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::target_type()
{
}

void *std::__function::__value_func<void ()(unsigned char *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void gnss::GnssAdaptDevice::injectAssistanceFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    uint64_t v6 = *(void **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    uint64_t v8 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20injectAssistanceFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS_16SvPositionSourceENS1_8functionIFvONS_24DecodedExtendedEphemerisEEEENS8_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_7;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a5);
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)v12, a4);
    std::string __p = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v6, v7, v7 - (void)v6);
    dispatch_async(v8, block);
    if (__p)
    {
      int v14 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
    if (v6) {
      operator delete(v6);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "injectAssistanceFile", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D1FF70(_Unwind_Exception *exception_object)
{
}

void ___ZN4gnss15GnssAdaptDevice20injectAssistanceFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS_16SvPositionSourceENS1_8functionIFvONS_24DecodedExtendedEphemerisEEEENS8_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  int32x4_t v28[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "injectAssistanceFile_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
    uint64_t v4 = v2 + 200;
    if (__str != (char *)(v2 + 200))
    {
      uint64_t v5 = v27;
      uint64_t v6 = *(void *)(v2 + 224);
      if (v27 == __str)
      {
        if (v6 == v4)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v28);
          (*(void (**)(char *))(*(void *)v27 + 32))(v27);
          uint64_t v27 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 224) + 24))(*(void *)(v2 + 224), __str);
          (*(void (**)(void))(**(void **)(v2 + 224) + 32))(*(void *)(v2 + 224));
          *(void *)(v2 + 224) = 0;
          uint64_t v27 = __str;
          (*(void (**)(void *, uint64_t))(v28[0] + 24))(v28, v2 + 200);
          (*(void (**)(void *))(v28[0] + 32))(v28);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 200);
          (*(void (**)(char *))(*(void *)v27 + 32))(v27);
          uint64_t v27 = *(char **)(v2 + 224);
        }
        *(void *)(v2 + 224) = v4;
      }
      else if (v6 == v4)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v4 + 24))(v2 + 200, __str);
        (*(void (**)(void))(**(void **)(v2 + 224) + 32))(*(void *)(v2 + 224));
        *(void *)(v2 + 224) = v27;
        uint64_t v27 = __str;
      }
      else
      {
        uint64_t v27 = *(char **)(v2 + 224);
        *(void *)(v2 + 224) = v5;
      }
    }
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](__str);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    if (v9 == v10)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v24, (uint64_t)"injectAssistanceFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Prediction\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "injectAssistanceFile_block_invoke", 515);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v14 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "injectAssistanceFile_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
    else if ((unint64_t)(v10 - v9 - 583897) >= 0xFFFFFFFFFFF717A7)
    {
      int v15 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v22, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT(v2, v15, (uint64_t)v22);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v22);
      unsigned int v16 = GNS_EeInjectOrbitData(v15, *(signed __int8 **)(a1 + 104), *(_DWORD *)(a1 + 112) - *(void *)(a1 + 104));
      if (v16 == 1)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v17 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EESize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "injectAssistanceFile_block_invoke", *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v18 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "injectAssistanceFile_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v21, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(v2, v16, (uint64_t)v21, "injectAssistanceFile_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v21);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut((gnss::GnssAdaptDevice *)v2, v15);
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v19 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EeInjectOrbitData Resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "injectAssistanceFile_block_invoke", 257, v16);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v20 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "injectAssistanceFile_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v23, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v23, (uint64_t)"injectAssistanceFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v23);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx File size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "injectAssistanceFile_block_invoke", 515, *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v12 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "injectAssistanceFile_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v25, (uint64_t)"injectAssistanceFile_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "injectAssistanceFile_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "injectAssistanceFile_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263D2085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 5), a2 + 40);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 9), a2 + 72);
  _OWORD v3[13] = 0;
  v3[14] = 0;
  v3 += 13;
  v3[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v3, *(const void **)(a2 + 104), *(void *)(a2 + 112), *(void *)(a2 + 112) - *(void *)(a2 + 104));
}

void sub_263D20950(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](a1 + 9);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 5);
}

void gnss::GnssAdaptDevice::injectRtiFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    uint64_t v5 = *(void **)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice13injectRtiFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS1_8functionIFvONS_10DecodedRtiEEEENS7_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_13;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a4);
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
    std::string __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, v6, v6 - (void)v5);
    dispatch_async(v7, block);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    if (v5) {
      operator delete(v5);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "injectRtiFile", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263D20BB8(_Unwind_Exception *exception_object)
{
}

void ___ZN4gnss15GnssAdaptDevice13injectRtiFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS1_8functionIFvONS_10DecodedRtiEEEENS7_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  int32x4_t v28[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "injectRtiFile_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
    uint64_t v4 = v2 + 232;
    if (__str != (char *)(v2 + 232))
    {
      uint64_t v5 = v27;
      uint64_t v6 = *(void *)(v2 + 256);
      if (v27 == __str)
      {
        if (v6 == v4)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v28);
          (*(void (**)(char *))(*(void *)v27 + 32))(v27);
          uint64_t v27 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 256) + 24))(*(void *)(v2 + 256), __str);
          (*(void (**)(void))(**(void **)(v2 + 256) + 32))(*(void *)(v2 + 256));
          *(void *)(v2 + 256) = 0;
          uint64_t v27 = __str;
          (*(void (**)(void *, uint64_t))(v28[0] + 24))(v28, v2 + 232);
          (*(void (**)(void *))(v28[0] + 32))(v28);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 232);
          (*(void (**)(char *))(*(void *)v27 + 32))(v27);
          uint64_t v27 = *(char **)(v2 + 256);
        }
        *(void *)(v2 + 256) = v4;
      }
      else if (v6 == v4)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v4 + 24))(v2 + 232, __str);
        (*(void (**)(void))(**(void **)(v2 + 256) + 32))(*(void *)(v2 + 256));
        *(void *)(v2 + 256) = v27;
        uint64_t v27 = __str;
      }
      else
      {
        uint64_t v27 = *(char **)(v2 + 256);
        *(void *)(v2 + 256) = v5;
      }
    }
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](__str);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    if (v9 == v10)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v24, (uint64_t)"injectRtiFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v15 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FileStore\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "injectRtiFile_block_invoke", 515);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v16 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "injectRtiFile_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
    else if (v10 - v9 == 128)
    {
      int v11 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v22, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT(v2, v11, (uint64_t)v22);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v22);
      unsigned int v12 = GNS_EeInjectRtiData(v11, *(signed __int8 **)(a1 + 104), *(_DWORD *)(a1 + 112) - *(void *)(a1 + 104));
      if (v12 == 1)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v13 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RtiSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "injectRtiFile_block_invoke", *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v14 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "injectRtiFile_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v21, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(v2, v12, (uint64_t)v21, "injectRtiFile_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v21);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut((gnss::GnssAdaptDevice *)v2, v11);
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v19 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EEInjectRti,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "injectRtiFile_block_invoke", 257, v12);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v20 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "injectRtiFile_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v23, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v23, (uint64_t)"injectRtiFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v23);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v17 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "injectRtiFile_block_invoke", 515, *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v18 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "injectRtiFile_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v25, (uint64_t)"injectRtiFile_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "injectRtiFile_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "injectRtiFile_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263D21494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 5), a2 + 40);
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 9), a2 + 72);
  _OWORD v3[13] = 0;
  v3[14] = 0;
  v3 += 13;
  v3[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v3, *(const void **)(a2 + 104), *(void *)(a2 + 112), *(void *)(a2 + 112) - *(void *)(a2 + 104));
}

void sub_263D21588(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](a1 + 9);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 5);
}

void gnss::GnssAdaptDevice::Ga04_00RegisterGnsEeStatusResponse(gnss::GnssAdaptDevice *a1, uint64_t a2, long long *a3)
{
  int v4 = (int)a1;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    if (a3)
    {
      uint64_t v6 = DeviceInstance;
      long long v7 = *a3;
      char v8 = *((unsigned char *)a3 + 16);
      *(_OWORD *)uint64_t v13 = *(long long *)((char *)a3 + 17);
      *(void *)&v13[15] = *((void *)a3 + 4);
      if (g_LbsOsaTrace_Config >= 4)
      {
        long long v12 = *a3;
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Api,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse", *((_DWORD *)a3 + 1), *((_DWORD *)a3 + 2));
        gnssOsa_PrintLog(__str, 4, 1, 0);
        long long v7 = v12;
      }
      uint64_t v10 = *(NSObject **)(v6 + 152);
      *(void *)long long __str = MEMORY[0x263EF8330];
      uint64_t v15 = 0x40000000;
      uint64_t v16 = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke;
      uint64_t v17 = &__block_descriptor_tmp_30_0;
      uint64_t v18 = v6;
      long long v19 = v7;
      char v20 = v8;
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v13;
      *(void *)&v21[15] = *(void *)&v13[15];
      int v22 = v4;
      dispatch_async(v10, __str);
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EeMsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga04_01HandleGnsEeStatusResponse", 513);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
}

void *___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v47 = 0;
  uint64_t v2 = v1 + 128;
  uint64_t v3 = *(void *)(v1 + 128);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  uint64_t v6 = v1 + 128;
  uint64_t v7 = *(void *)(v1 + 128);
  do
  {
    unsigned int v8 = *(_DWORD *)(v7 + 32);
    BOOL v9 = v8 >= v5;
    if (v8 >= v5) {
      uint64_t v10 = (uint64_t *)v7;
    }
    else {
      uint64_t v10 = (uint64_t *)(v7 + 8);
    }
    if (v9) {
      uint64_t v6 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
  {
    uint64_t v13 = v1 + 128;
    do
    {
      unsigned int v14 = *(_DWORD *)(v3 + 32);
      BOOL v15 = v14 >= v5;
      if (v14 >= v5) {
        uint64_t v16 = (uint64_t *)v3;
      }
      else {
        uint64_t v16 = (uint64_t *)(v3 + 8);
      }
      if (v15) {
        uint64_t v13 = v3;
      }
      uint64_t v3 = *v16;
    }
    while (*v16);
    if (v13 == v2 || v5 < *(_DWORD *)(v13 + 32)) {
      uint64_t v13 = v1 + 128;
    }
    std::function<void ()(gnss::Result)>::operator=(v46, v13 + 40);
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__remove_node_pointer((uint64_t **)(v1 + 120), (uint64_t *)v6);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v6 + 40));
    operator delete((void *)v6);
    if (v47)
    {
      int v17 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v1, *(_DWORD *)(a1 + 48));
      int v18 = *(_DWORD *)(a1 + 44);
      if (v18)
      {
        if (v18 == 1)
        {
          if (*(void *)(v1 + 224))
          {
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)v44, v1 + 200);
            uint64_t v29 = 0;
            uint64_t v30 = &v29;
            uint64_t v31 = 0x4802000000;
            double v32 = __Block_byref_object_copy__1;
            unint64_t v33 = __Block_byref_object_dispose__1;
            LOBYTE(v34) = 0;
            char v36 = *(unsigned char *)(a1 + 56);
            long long v35 = *(_OWORD *)(a1 + 64);
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v24 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ORB Data StartGpsSecs,%llu,EndGpsSecs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse_block_invoke", v30[6], v30[7]);
              gnssOsa_PrintLog(__str, 4, 1, 0);
            }
            long long v25 = *(NSObject **)(v1 + 160);
            v42[0] = MEMORY[0x263EF8330];
            v42[1] = 1174405120;
            v42[2] = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2;
            v42[3] = &unk_270ED2160;
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v44);
            v42[4] = &v29;
            dispatch_async(v25, v42);
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v43);
            _Block_object_dispose(&v29, 8);
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v44);
          }
        }
        else if (v18 == 2)
        {
          if (*(void *)(v1 + 256))
          {
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)v44, v1 + 232);
            uint64_t v29 = 0;
            uint64_t v30 = &v29;
            uint64_t v31 = 0x3802000000;
            double v32 = __Block_byref_object_copy__21_0;
            LOBYTE(v35) = *(unsigned char *)(a1 + 56);
            uint64_t v19 = *(void *)(a1 + 64);
            unint64_t v33 = __Block_byref_object_dispose__22_0;
            uint64_t v34 = v19;
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v20 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RTI Data StartGpsSecs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse_block_invoke", v30[5]);
              gnssOsa_PrintLog(__str, 4, 1, 0);
            }
            uint64_t v21 = *(NSObject **)(v1 + 160);
            block[0] = MEMORY[0x263EF8330];
            block[1] = 1174405120;
            block[2] = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_24;
            block[3] = &unk_270ED2198;
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)v44);
            void block[4] = &v29;
            dispatch_async(v21, block);
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v41);
            _Block_object_dispose(&v29, 8);
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v44);
          }
        }
        else if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v26 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ApiState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 87, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 262, *(_DWORD *)(a1 + 44));
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
      }
      else if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v23 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ApiType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 515);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      uint64_t v27 = *(NSObject **)(v1 + 160);
      v37[0] = MEMORY[0x263EF8330];
      v37[1] = 1174405120;
      double v37[2] = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_27;
      v37[3] = &__block_descriptor_tmp_28_0;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, (uint64_t)v46);
      int v39 = v17;
      dispatch_async(v27, v37);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v28 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Ee Type,%u,ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse_block_invoke", *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 44));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v38);
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v22 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Lut Hdl NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 87, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 516);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  else
  {
LABEL_12:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Lut Hdl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 770);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v46);
}

void sub_263D21F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  _Block_object_dispose(&a15, 8);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](&a51);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v51 - 104));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t __copy_helper_block_e8_40c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v1);
}

uint64_t __Block_byref_object_copy__21_0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_27(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

uint64_t std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *DD_Delete_Bad_BDS_Data(void *result)
{
  uint64_t v1 = 0;
  uint64_t v2 = (_OWORD *)(p_NV + 13368);
  uint64_t v3 = p_NV + 16896;
  int v4 = result + 5583;
  unsigned int v5 = result + 3189;
  do
  {
    uint64_t v6 = result[3180];
    if (*(unsigned char *)(v6 + v1))
    {
      *(unsigned char *)(v6 + v1) = 0;
      *(unsigned char *)(result[3178] + v1) = 0;
      *(unsigned char *)(result[3182] + v1) = 0;
      *((_DWORD *)v5 + 36) = 0;
      *((_OWORD *)v5 + 7) = 0uLL;
      *((_OWORD *)v5 + 8) = 0uLL;
      *((_OWORD *)v5 + 5) = 0uLL;
      *((_OWORD *)v5 + 6) = 0uLL;
      *((_OWORD *)v5 + 3) = 0uLL;
      *((_OWORD *)v5 + 4) = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)unsigned int v5 = 0uLL;
      *(unsigned char *)(result[3188] + v1) = 0;
      *(unsigned char *)(result[3185] + v1) = 1;
      *(void *)(v3 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v3 = 0uLL;
      *(_OWORD *)(v3 + 16) = 0uLL;
      *(_OWORD *)(v3 + 32) = 0uLL;
      *(_OWORD *)(v3 + 48) = 0uLL;
      *(_OWORD *)(v3 + 64) = 0uLL;
      *(_OWORD *)(v3 + 80) = 0uLL;
      *(_OWORD *)(v3 + 96) = 0uLL;
      *(_OWORD *)(v3 + 112) = 0uLL;
      *(_OWORD *)(v3 + 128) = 0uLL;
      *(_DWORD *)(v3 + 144) = 0;
    }
    uint64_t v7 = result[3181];
    if (*(unsigned char *)(v7 + v1))
    {
      *(unsigned char *)(v7 + v1) = 0;
      *(unsigned char *)(result[3179] + v1) = 0;
      *(unsigned char *)(result[3184] + v1) = 0;
      *(_OWORD *)((char *)v4 + 27) = 0uLL;
      *int v4 = 0uLL;
      v4[1] = 0uLL;
      *(unsigned char *)(result[3188] + v1) = 0;
      *((void *)v2 - 1) = 0xFFFFFFFFLL;
      _OWORD *v2 = 0uLL;
      v2[1] = 0uLL;
      *(_OWORD *)((char *)v2 + 27) = 0uLL;
    }
    ++v1;
    uint64_t v2 = (_OWORD *)((char *)v2 + 56);
    v3 += 160;
    int v4 = (_OWORD *)((char *)v4 + 44);
    v5 += 19;
  }
  while (v1 != 63);
  return result;
}

uint64_t DD_Delete_Inhib_BDS_Data(uint64_t result, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = p_NV + 16896;
  int v4 = (_OWORD *)(p_NV + 13368);
  unsigned int v5 = a2 + 5583;
  uint64_t v6 = a2 + 3189;
  do
  {
    if (*(unsigned char *)(result + v2))
    {
      *(unsigned char *)(a2[3180] + v2) = 0;
      *(unsigned char *)(a2[3178] + v2) = 0;
      *(unsigned char *)(a2[3182] + v2) = 0;
      *((_DWORD *)v6 + 36) = 0;
      *((_OWORD *)v6 + 7) = 0uLL;
      *((_OWORD *)v6 + 8) = 0uLL;
      *((_OWORD *)v6 + 5) = 0uLL;
      *((_OWORD *)v6 + 6) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *((_OWORD *)v6 + 4) = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      *((_OWORD *)v6 + 2) = 0uLL;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *(unsigned char *)(a2[3183] + v2) = 0;
      *((_DWORD *)v6 + 2430) = 0;
      *(_OWORD *)(v6 + 1211) = 0uLL;
      *(_OWORD *)(v6 + 1213) = 0uLL;
      *(_OWORD *)(v6 + 1207) = 0uLL;
      *(_OWORD *)(v6 + 1209) = 0uLL;
      *(_OWORD *)(v6 + 1203) = 0uLL;
      *(_OWORD *)(v6 + 1205) = 0uLL;
      *(_OWORD *)(v6 + 1199) = 0uLL;
      *(_OWORD *)(v6 + 1201) = 0uLL;
      *(_OWORD *)(v6 + 1197) = 0uLL;
      *(unsigned char *)(a2[3188] + v2) = 0;
      *(unsigned char *)(a2[3185] + v2) = 1;
      *(void *)(v3 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v3 = 0uLL;
      *(_OWORD *)(v3 + 16) = 0uLL;
      *(_OWORD *)(v3 + 32) = 0uLL;
      *(_OWORD *)(v3 + 48) = 0uLL;
      *(_OWORD *)(v3 + 64) = 0uLL;
      *(_OWORD *)(v3 + 80) = 0uLL;
      *(_OWORD *)(v3 + 96) = 0uLL;
      *(_OWORD *)(v3 + 112) = 0uLL;
      *(_OWORD *)(v3 + 128) = 0uLL;
      *(_DWORD *)(v3 + 144) = 0;
      *(unsigned char *)(a2[3181] + v2) = 0;
      *(unsigned char *)(a2[3179] + v2) = 0;
      *(unsigned char *)(a2[3184] + v2) = 0;
      *(_OWORD *)((char *)v5 + 27) = 0uLL;
      *unsigned int v5 = 0uLL;
      v5[1] = 0uLL;
      *((void *)v4 - 1) = 0xFFFFFFFFLL;
      *int v4 = 0uLL;
      v4[1] = 0uLL;
      *(_OWORD *)((char *)v4 + 27) = 0uLL;
    }
    ++v2;
    v3 += 160;
    int v4 = (_OWORD *)((char *)v4 + 56);
    unsigned int v5 = (_OWORD *)((char *)v5 + 44);
    v6 += 19;
  }
  while (v2 != 63);
  return result;
}

char *DD_Check_Age_BDS_Data(char *result, uint64_t a2)
{
  if ((int)result < 1) {
    return result;
  }
  int v3 = (int)result;
  uint64_t v4 = 0;
  int v5 = 0;
  char v6 = 0;
  uint64_t v7 = (unsigned char *)(a2 + 62170);
  uint64_t v36 = a2 + 47436;
  int v8 = result + 900;
  if ((int)result <= 900) {
    int v9 = 900;
  }
  else {
    int v9 = (int)result;
  }
  int v39 = v9 - 900;
  if ((int)result <= 86400) {
    int v10 = 86400;
  }
  else {
    int v10 = (int)result;
  }
  int v11 = v10 - 86400;
  uint64_t v12 = *(void *)(a2 + 25456);
  uint64_t v13 = 25512;
  do
  {
    if (!*(unsigned char *)(v12 + v4)) {
      goto LABEL_19;
    }
    int v14 = *(_DWORD *)(a2 + v13);
    if (v14 >= 1 && v14 < v11)
    {
LABEL_17:
      char v6 = 1;
      *(unsigned char *)(*(void *)(a2 + 25440) + v4) = 1;
      goto LABEL_19;
    }
    if (v14)
    {
      if (v14 > v8)
      {
        ++v5;
        if (!*v7) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + v13) = v39;
    }
LABEL_19:
    ++v4;
    v13 += 152;
  }
  while (v4 != 63);
  if (v5 > 0)
  {
    if (*v7) {
      uint64_t v16 = "(Skipped)";
    }
    else {
      uint64_t v16 = "";
    }
    __n128 result = EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future EPH, %d SVs  %s", v5, v16);
  }
  int v37 = v8;
  float64x2_t v38 = v7;
  uint64_t v17 = 0;
  int v18 = 0;
  if (v3 <= 15724800) {
    int v19 = 15724800;
  }
  else {
    int v19 = v3;
  }
  int v20 = v19 - 15724800;
  uint64_t v21 = 44664;
  do
  {
    if (*(unsigned char *)(*(void *)(a2 + 25472) + v17))
    {
      int v22 = *(_DWORD *)(a2 + v21);
      if (v22 >= 1 && v22 < v20)
      {
        char v6 = 1;
        *(unsigned char *)(*(void *)(a2 + 25448) + v17) = 1;
        __n128 result = EvLog_v("DD_Check_Age_BDS_Data:  Deleting Old ALM, SV %d age %d thresh %d %d %d", (int)v17 + 1, (v3 - v22) / 604800, (v3 - v20) / 604800, v34, v35);
      }
      else if (v22)
      {
        if (v22 > v8)
        {
          ++v18;
          int v24 = v3 - v22;
          long long v25 = "(Skipped)";
          if (!*v38) {
            long long v25 = "";
          }
          __n128 result = EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future ALM, SV %d age %d thresh %d  %s", (int)v17 + 1, v24 / 604800, 0, v25);
          if (!*v38)
          {
            char v6 = 1;
            *(unsigned char *)(*(void *)(a2 + 25448) + v17) = 1;
          }
          int v8 = v37;
        }
      }
      else
      {
        *(_DWORD *)(a2 + v21) = v39;
      }
    }
    ++v17;
    v21 += 44;
  }
  while (v17 != 63);
  if (v18 > 0)
  {
    if (*v38) {
      uint64_t v26 = "(Skipped)";
    }
    else {
      uint64_t v26 = "";
    }
    __n128 result = EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future ALM, %d SVs  %s", v18, v26);
  }
  if (v3 <= 2419200) {
    int v27 = 2419200;
  }
  else {
    int v27 = v3;
  }
  int v28 = v27 - 2419200;
  if (*(_DWORD *)(v36 + 4))
  {
    int v29 = *(_DWORD *)v36;
    if (*(int *)v36 >= 1 && v29 < v28) {
      goto LABEL_55;
    }
    if (v29)
    {
      if (v29 > v37)
      {
        uint64_t v30 = *v38 ? "(Skipped)" : "";
        __n128 result = EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future BGTO->GPS, %d  %d  %s", v29, v37, v30);
        if (!*v38)
        {
LABEL_55:
          *(void *)uint64_t v36 = 0;
          *(void *)(v36 + 8) = 0;
          *(_WORD *)(v36 + 24) = 0;
          *(void *)(v36 + 16) = 0;
          *(_OWORD *)(a2 + 47496) = 0u;
          *(_OWORD *)(a2 + 47512) = 0u;
          *(void *)(a2 + 47528) = 0;
        }
      }
    }
    else
    {
      *(_DWORD *)uint64_t v36 = v39;
    }
  }
  if (!*(_DWORD *)(v36 + 32))
  {
LABEL_75:
    if ((v6 & 1) == 0) {
      return result;
    }
    goto LABEL_76;
  }
  double v32 = (int *)(v36 + 28);
  int v31 = *(_DWORD *)(v36 + 28);
  if (v31 >= 1 && v31 < v28) {
    goto LABEL_67;
  }
  if (!v31)
  {
    int *v32 = v39;
    if ((v6 & 1) == 0) {
      return result;
    }
    goto LABEL_76;
  }
  if (v31 <= v37) {
    goto LABEL_75;
  }
  unint64_t v33 = *v38 ? "(Skipped)" : "";
  __n128 result = EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future BGTO->GLO, %d  %d  %s", v31, v37, v33);
  if (*v38) {
    goto LABEL_75;
  }
LABEL_67:
  *(void *)double v32 = 0;
  *(void *)(v36 + 36) = 0;
  *(_WORD *)(v36 + 52) = 0;
  *(void *)(v36 + 44) = 0;
  *(_OWORD *)(a2 + 47536) = 0u;
  *(_OWORD *)(a2 + 47552) = 0u;
  *(void *)(a2 + 47568) = 0;
  if (v6)
  {
LABEL_76:
    return (char *)DD_Delete_Bad_BDS_Data((void *)a2);
  }
  return result;
}

__n128 DD_Proc_BDS_Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, void *a6)
{
  char v6 = a6;
  uint64_t v11 = 0;
  unsigned int v12 = 0;
  uint64_t v129 = *MEMORY[0x263EF8340];
  uint64_t v119 = (uint64_t)a6 + 47436;
  uint64_t v13 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v14 = a2 + 66;
  do
    unsigned int v12 = CRC24Q_Table[*(unsigned __int8 *)(v14 + v11++) ^ HIWORD(v12)] ^ ((unsigned __int16)v12 << 8);
  while (v11 != 72);
  int v15 = (*(unsigned __int8 *)(a2 + 138) << 16) | (*(unsigned __int8 *)(a2 + 139) << 8) | *(unsigned __int8 *)(a2 + 140);
  int v16 = *(unsigned __int8 *)(a2 + 65);
  if ((v16 & 2) != 0 && v12 != v15)
  {
    EvCrt_v("DD_Proc_BDS_Data: WARNING: Checksum_Mask marks SF2 as passing CRC but data fails: SV %d  mask %d  actual %x  data %x", v13 + 1, v16, v12, v15);
    int v16 = *(unsigned char *)(a2 + 65) & 5;
LABEL_9:
    *(unsigned char *)(a2 + 65) = v16;
    goto LABEL_10;
  }
  if ((v16 & 2) == 0 && v12 == v15)
  {
    EvCrt_v("DD_Proc_BDS_Data: WARNING: Checksum_Mask marks SF2 as failing CRC but data passes: SV %d  mask %d  actual %x  data %x", v13 + 1, v16, v12, v12);
    int v16 = *(unsigned __int8 *)(a2 + 65) | 2;
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v121 = a3;
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  int v20 = (unsigned __int8 *)(a2 + 141);
  do
    unsigned int v19 = CRC24Q_Table[v20[v18++] ^ HIWORD(v19)] ^ ((unsigned __int16)v19 << 8);
  while (v18 != 30);
  int v21 = (*(unsigned __int8 *)(a2 + 171) << 16) | (*(unsigned __int8 *)(a2 + 172) << 8) | *(unsigned __int8 *)(a2 + 173);
  if ((v16 & 4) != 0 && v19 != v21)
  {
    EvCrt_v("DD_Proc_BDS_Data: WARNING: Checksum_Mask marks SF3 as passing CRC but data fails: SV %d  mask %d  actual %x  data %x", v13 + 1, v16, v19, v21);
    LOBYTE(v16) = *(unsigned char *)(a2 + 65) & 3;
LABEL_18:
    *(unsigned char *)(a2 + 65) = v16;
    goto LABEL_19;
  }
  if ((v16 & 4) == 0 && v19 == v21)
  {
    EvCrt_v("DD_Proc_BDS_Data: WARNING: Checksum_Mask marks SF3 as failing CRC but data passes: SV %d  mask %d  actual %x  data %x", v13 + 1, v16, v19, v19);
    LOBYTE(v16) = *(unsigned char *)(a2 + 65) | 4;
    goto LABEL_18;
  }
LABEL_19:
  if ((v16 & 4) != 0 || (v22 = a1 + v13, uint64_t v23 = (unsigned char *)(a1 + v13 + 47848), (char)*v23 < 0))
  {
    uint64_t v37 = a1 + v13;
    *(unsigned char *)(v37 + 47848) = -1;
    *(unsigned char *)(v37 + 47911) = -1;
  }
  else
  {
    *(unsigned char *)(a2 + 178) = -1;
    int v24 = (unsigned __int8 *)(v22 + 47911);
    char v25 = *(unsigned char *)(v22 + 47911);
    if ((v25 + 1) <= 9u) {
      unsigned __int8 v26 = v25 + 1;
    }
    else {
      unsigned __int8 v26 = 0;
    }
    *(unsigned char *)(a1 + 10 * v13 + v26 + 47218) = *(unsigned char *)(a2 + 141) & 1;
    int v27 = (char)*v23;
    if (v27 <= 9)
    {
      LOBYTE(v27) = v27 + 1;
      *uint64_t v23 = v27;
    }
    *int v24 = v26;
    if (*(_DWORD *)(a3 + 1732)
      || *(_DWORD *)(a3 + 1736)
      || *(unsigned char *)(v6[3182] + v13)
      || *(unsigned char *)(v6[3183] + v13)
      || *(_DWORD *)a3)
    {
      int v28 = 3;
    }
    else if (*(unsigned char *)(*(void *)(a3 + 512) + v13))
    {
      int v28 = 3;
    }
    else
    {
      int v28 = 2;
    }
    if ((_BYTE)v27)
    {
      uint64_t v29 = (char)v27;
      if (v28 <= v29)
      {
        unsigned __int8 v30 = 0;
        int v31 = 0;
        double v32 = (unsigned __int8 *)(a1 + 10 * v13 + 47218);
        do
        {
          int v34 = *v32++;
          int v33 = v34;
          if (v34) {
            int v35 = v31;
          }
          else {
            int v35 = v31 + 1;
          }
          if (v33 == 1) {
            ++v30;
          }
          else {
            int v31 = v35;
          }
          --v29;
        }
        while (v29);
        if (v31 <= v30)
        {
          if (v30 <= v31
            || v30 - v31 < 3
            || (43692 * v30) >> 16 < v31)
          {
            goto LABEL_47;
          }
          char v36 = 1;
        }
        else
        {
          if (v31 - v30 < v28 || (43692 * v31) >> 16 < v30) {
            goto LABEL_47;
          }
          char v36 = 0;
        }
        *(unsigned char *)(a2 + 178) = v36;
      }
    }
  }
LABEL_47:
  if (*(_DWORD *)a4)
  {
    result.n128_u64[0] = *(void *)(a4 + 40);
    int v38 = (18 * *(unsigned __int8 *)(a2 + 64)
         + 3600 * (((int)result.n128_f64[0] - 18 * *(unsigned __int8 *)(a2 + 64) + 1800) / 3600)
         - 18)
        / 3600;
  }
  else
  {
    LOBYTE(v38) = 0;
  }
  int v39 = (int *)(a1 + 4 * v13 + 46840);
  if (*v39 != -1 && ((*v39 - 18) / 3600) != v38)
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 46824) = 0u;
    *(_OWORD *)(a1 + 46793) = 0u;
    *(_OWORD *)(a1 + 46809) = 0u;
    *(_OWORD *)(a1 + 46777) = 0u;
    *(void *)&long long v40 = -1;
    *((void *)&v40 + 1) = -1;
    *(_OWORD *)(a1 + 47092) = v40;
    *(_OWORD *)(a1 + 47108) = v40;
    *(_OWORD *)(a1 + 47124) = v40;
    *(_OWORD *)(a1 + 47139) = v40;
    *(_OWORD *)(a1 + 47155) = 0u;
    *(_OWORD *)(a1 + 47171) = 0u;
    *(_OWORD *)(a1 + 47187) = 0u;
    *(_OWORD *)(a1 + 47202) = 0u;
  }
  int v41 = *(unsigned __int8 *)(a2 + 65);
  if ((v41 & 2) == 0)
  {
    uint64_t v42 = a1 + v13;
    if (!*(unsigned char *)(a1 + v13 + 47155))
    {
      float64x2_t v43 = (unsigned __int8 *)(v42 + 47092);
      char v44 = *(unsigned char *)(v42 + 47092);
      if ((v44 + 1) <= 6u) {
        unsigned __int8 v45 = v44 + 1;
      }
      else {
        unsigned __int8 v45 = 0;
      }
      uint64_t v46 = a1 + 525 * v13 + 75 * v45 + 13702;
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v14;
      __n128 result = *(__n128 *)(v14 + 16);
      long long v47 = *(_OWORD *)(v14 + 32);
      long long v48 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v46 + 59) = *(_OWORD *)(v14 + 59);
      *(_OWORD *)(v46 + 32) = v47;
      *(_OWORD *)(v46 + 48) = v48;
      *(__n128 *)(v46 + 16) = result;
      double v49 = (unsigned char *)(v42 + 46777);
      unsigned int v50 = *(unsigned __int8 *)(v42 + 46777);
      if (v50 <= 6) {
        *double v49 = ++v50;
      }
      if (*(_DWORD *)a4)
      {
        result.n128_u64[0] = *(void *)(a4 + 40);
        int v51 = 18 * *(unsigned __int8 *)(a2 + 64)
            + 3600 * (((int)result.n128_f64[0] - 18 * *(unsigned __int8 *)(a2 + 64) + 1800) / 3600);
      }
      else
      {
        int v51 = -1;
      }
      *int v39 = v51;
      *float64x2_t v43 = v45;
      int v41 = *(unsigned __int8 *)(a2 + 65);
      if ((v41 & 3) == 1 && v50 >= 2)
      {
        long long v116 = v49;
        bzero(v126, 0x258uLL);
        uint64_t v52 = 0;
        uint64_t v53 = a1 + 525 * v13 + 13702;
        do
        {
          for (uint64_t i = 0; i != 75; ++i)
          {
            uint32x4_t v55 = (uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v53 + i));
            *(int8x8_t *)&v126[2 * i] = vadd_s8(vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v55, (uint32x4_t)xmmword_263D84A60), (int16x8_t)vshlq_u32(v55, (uint32x4_t)xmmword_263D84A50))), (int8x8_t)0x101010101010101), *(int8x8_t *)&v126[2 * i]);
          }
          ++v52;
          v53 += 75;
        }
        while (v52 != v50);
        uint64_t v56 = 0;
        long long v124 = 0u;
        memset(v125, 0, 27);
        long long v122 = 0u;
        __n128 v123 = 0u;
        do
        {
          if (*((unsigned __int8 *)v126 + v56) > v50 >> 1) {
            *((unsigned char *)&v122 + (v56 >> 3)) += 1 << (~(_BYTE)v56 & 7);
          }
          ++v56;
        }
        while (v56 != 600);
        uint64_t v57 = 0;
        unsigned int v58 = 0;
        do
          unsigned int v58 = CRC24Q_Table[*((unsigned __int8 *)&v122 + v57++) ^ HIWORD(v58)] ^ ((unsigned __int16)v58 << 8);
        while (v57 != 72);
        if (v58 == ((BYTE8(v125[1]) << 16) | (BYTE9(v125[1]) << 8) | BYTE10(v125[1])))
        {
          EvLog_v("DD_Proc_BDS_Data: SF2 Majority vote CRC passed, applied,  SV %d  SF_count %d", v13 + 1, v50);
          long long v59 = v125[0];
          *(_OWORD *)(v14 + 32) = v124;
          *(_OWORD *)(v14 + 48) = v59;
          *(_OWORD *)(v14 + 59) = *(_OWORD *)((char *)v125 + 11);
          __n128 result = v123;
          *(_OWORD *)uint64_t v14 = v122;
          *(__n128 *)(v14 + 16) = result;
          *(unsigned char *)(a2 + 65) |= 2u;
          *long long v116 = 0;
          *float64x2_t v43 = -1;
        }
        else
        {
          EvDbg_v("DD_Proc_BDS_Data: SF2 Majority vote CRC failed, ignored,  SV %d  SF_count %d", v13 + 1, v50);
        }
        int v41 = *(unsigned __int8 *)(a2 + 65);
      }
    }
  }
  if ((~v41 & 3) != 0 || *(unsigned char *)(a2 + 178))
  {
    if ((v41 & 4) == 0) {
      return result;
    }
    goto LABEL_87;
  }
  int v63 = v6;
  int v64 = *(unsigned __int8 *)(v6[3174] + v13);
  memset(v126, 0, 18);
  memset(&v126[5], 0, 78);
  *(_OWORD *)&v126[25] = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  uint64_t v65 = *(unsigned __int8 *)(a2 + 8);
  BDS_B1C_EphBin2Int((unsigned __int16 *)v14, a2 + 141, (uint64_t)v126);
  v126[1] = 4;
  int v66 = *(unsigned __int8 *)(a2 + 8);
  LOBYTE(v126[2]) = v66 + 1;
  int v67 = *(unsigned __int8 *)(a2 + 178);
  BYTE1(v126[2]) = *(unsigned char *)(a2 + 178);
  HIBYTE(v126[2]) = 4;
  if ((*(unsigned char *)(a2 + 141) & 0xFC) == 4)
  {
    Decode_BDS_B1C_SISA(a2 + 141, (uint64_t)v126);
    int v67 = BYTE1(v126[2]);
  }
  if (v64 && !v67)
  {
    if (SLOWORD(v126[4]) > 2047)
    {
      EvLog_v("DD_Proc_BDS_B1C_Eph: Ignoring, Invalid WeekNo SV %d  WN %d (>%d)", v66 + 1, LOWORD(v126[4]), 2048);
LABEL_148:
      if (g_Logging_Cfg >= 7) {
        EvLog_v("DD_Proc_BDS_B1C_Eph: WeekNo Cands: %d %d  %d %d  %d %d");
      }
      goto LABEL_192;
    }
    unsigned __int16 v68 = LOWORD(v126[4]) + 1356;
    if (*(_DWORD *)a4)
    {
      int v69 = (int)*(double *)(a4 + 40);
      int v70 = 1800 - (v69 - (18 * *(unsigned __int8 *)(a2 + 64) + 18) + 1800) % 3600;
      if (v70 < 302401)
      {
        if (v70 < -302400) {
          unsigned __int16 v68 = LOWORD(v126[4]) + 1355;
        }
      }
      else
      {
        unsigned __int16 v68 = LOWORD(v126[4]) + 1357;
      }
    }
    else
    {
      int v69 = -1;
    }
    if (*(unsigned char *)(a4 + 16))
    {
      unsigned __int16 v71 = v68;
      if (*(unsigned __int16 *)(a4 + 32) != v68)
      {
        if (*(int *)a4 < 3)
        {
          unsigned __int16 v71 = *(_WORD *)(a4 + 32);
        }
        else
        {
          unsigned __int16 v71 = *(_WORD *)(a4 + 32);
          if ((v69 - 32) < 0x93A41)
          {
            EvCrt_v("DD_Proc_BDS_B1C_Eph:  WARNING:  Beidou Week Number Spoofing suspected,  %d != %d  SV %d", (__int16)v68, *(__int16 *)(a4 + 32), v66);
            *(unsigned char *)(a4 + 105) = 1;
            unsigned __int16 v71 = *(_WORD *)(a4 + 32);
          }
        }
      }
      if (v68 == v71) {
        *(_DWORD *)(a4 + 20) = *(_DWORD *)(a4 + 24);
      }
      goto LABEL_148;
    }
    BOOL v72 = DD_Validate_BDS_Eph(v65, *(unsigned __int8 *)(v63[3182] + v65), (uint64_t)&v63[19 * v65 + 3189], (uint64_t)v126);
    if (*(unsigned char *)(a4 + 16))
    {
      int v73 = *(unsigned __int16 *)(a4 + 32);
      char v74 = v73 == v68 || v72;
      if (v74)
      {
        if (v73 != v68 && v72)
        {
          uint64_t v75 = 0;
          while (*(unsigned __int16 *)(a4 + 2 * v75 + 64) != v68)
          {
            if (++v75 == 3) {
              goto LABEL_182;
            }
          }
          if (v75 >= 3)
          {
LABEL_182:
            uint64_t v102 = 0;
            while (*(__int16 *)(a4 + 2 * v102 + 64) != -1)
            {
              if (++v102 == 3) {
                goto LABEL_190;
              }
            }
            if (v102 < 3)
            {
              uint64_t v103 = a4 + 2 * v102;
              *(_WORD *)(v103 + 64) = v68;
              *(_WORD *)(v103 + 70) = 1;
              EvLog_v("DD_BDS_Submit_WeekNo:  %d  SV %d", (__int16)v68, (v65 + 1));
              goto LABEL_191;
            }
LABEL_190:
            *(_WORD *)(a4 + 68) = -1;
            *(_DWORD *)(a4 + 64) = -1;
            *(_DWORD *)(a4 + 70) = 0;
            *(_WORD *)(a4 + 74) = 0;
            EvCrt_v("DD_BDS_Submit_WeekNo: WeekNoCandidates array overflow! %d SV %d");
            goto LABEL_191;
          }
          uint64_t v117 = a4 + 2 * v75;
          int v118 = (__int16)v68;
          __int16 v104 = *(_WORD *)(v117 + 70) + 1;
          *(_WORD *)(v117 + 70) = v104;
          int v81 = (v65 + 1);
          EvLog_v("DD_BDS_Submit_WeekNo: Cand %d  (%d)  SV %d", (__int16)v68, v104, v81);
          if (*(__int16 *)(v117 + 70) < 3) {
            goto LABEL_191;
          }
          EvLog_v("DD_BDS_Submit_WeekNo: Cand %d  (%d) OK  SV %d");
          goto LABEL_141;
        }
      }
      else
      {
        EvCrt_v("DD_BDS_Submit_WeekNo: %d  SV %d, Ignored - Eph bit val failed");
      }
LABEL_191:
      EvLog_v("DD_BDS_Submit_WeekNo: %d %d SV %d");
      goto LABEL_192;
    }
    int v118 = (__int16)v68;
    int v81 = (v65 + 1);
    EvLog_v("DD_BDS_Submit_WeekNo: %d  SV %d");
LABEL_141:
    EvLog_v("DD_BDS_Submit_WeekNo: %d %d SV %d", 1, v118, v81);
    *(_WORD *)(a4 + 32) = v68;
    *(unsigned char *)(a4 + 16) = 1;
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 64) = -1;
    *(_WORD *)(a4 + 68) = -1;
    *(_DWORD *)(a4 + 70) = 0;
    *(_WORD *)(a4 + 74) = 0;
    if (v69 == -1 || !*(_DWORD *)a4) {
      *a5 = 0;
    }
    else {
      *a5 = v69 + 604800 * (__int16)v68;
    }
    goto LABEL_192;
  }
  if (*(unsigned char *)(v63[3174] + v65))
  {
    EvLog_v("DD_Proc_BDS_B1C_Eph:  EPH H->U, SV %d  toe %d", v65 + 1, v126[5]);
    *(unsigned char *)(v63[3174] + v65) = 0;
  }
  *(_DWORD *)(v63[3176] + 20 * v65) = 2;
LABEL_192:
  __int16 v105 = WORD5(v127);
  uint64_t v106 = a1 + 2 * v65;
  int v107 = *(unsigned __int16 *)(v106 + 6456);
  if (v107 != WORD5(v127))
  {
    double v108 = (_WORD *)(v106 + 6456);
    if (v107 != 256)
    {
      EvLog_v("DD_Proc_BDS_B1C_Eph:  Eph boundary changing, SV %d  IOD %d %d ", v65 + 1, v107, WORD5(v127));
      LOWORD(v107) = *v108;
    }
    *(_WORD *)(a1 + 2 * v65 + 6646) = v107;
    *double v108 = v105;
  }
  double v109 = (_OWORD *)(a1 + 75 * v65 + 6835);
  *double v109 = *(_OWORD *)v14;
  long long v110 = *(_OWORD *)(v14 + 16);
  long long v111 = *(_OWORD *)(v14 + 32);
  long long v112 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)((char *)v109 + 59) = *(_OWORD *)(v14 + 59);
  v109[2] = v111;
  v109[3] = v112;
  v109[1] = v110;
  uint64_t v113 = a1 + 11560 + 33 * v65;
  __n128 result = *(__n128 *)v20;
  long long v114 = *(_OWORD *)(a2 + 157);
  *(unsigned char *)(v113 + 32) = *(unsigned char *)(a2 + 173);
  *(__n128 *)uint64_t v113 = result;
  *(_OWORD *)(v113 + 16) = v114;
  uint64_t v115 = a1 + v65;
  *(unsigned char *)(v115 + 13639) = 1;
  *(unsigned char *)(v115 + 47155) = 1;
  char v6 = v63;
  if ((*(unsigned char *)(a2 + 65) & 4) == 0) {
    return result;
  }
LABEL_87:
  if (*(unsigned char *)(a2 + 178)) {
    return result;
  }
  unsigned __int8 v60 = *v20;
  if ((*v20 & 0xFC) != 0x10) {
    goto LABEL_173;
  }
  memset(v126, 0, 43);
  LOBYTE(v122) = 0;
  if (BDS_B1C_AlmBin2Int(*(__int16 *)(v121 + 1726), a2 + 141, (uint64_t)v126, (BOOL *)&v122))
  {
    v126[0] = *a5;
    v126[1] = 4;
    BOOL v61 = BYTE2(v126[2]) < 0x40u;
    if (BYTE2(v126[2]) >= 0x40u) {
      EvCrt_v("DD_BDS_IntAlm_Valid:  FAILED:  SVid = %d > %d, Out of range !", BYTE2(v126[2]), 63);
    }
    if (SLOWORD(v126[2]) >= 2049)
    {
      EvCrt_v("DD_BDS_IntAlm_Valid:  FAILED:  SV %d  WeekNo = %d > %d, Out of range !", BYTE2(v126[2]), LOWORD(v126[2]), 2048);
      BOOL v61 = 0;
    }
    if (HIBYTE(v126[2]) >= 0x94u)
    {
      EvCrt_v("DD_BDS_IntAlm_Valid:  FAILED:  SV %d  toa = %d > 604800 s, Out of range !", BYTE2(v126[2]), HIBYTE(v126[2]) << 12);
      BOOL v61 = 0;
    }
    if (v126[4] > 0x33333u)
    {
      EvCrt_v("DD_BDS_IntAlm_Valid:  FAILED:  SV %d  e = %f > 0.05 ", BYTE2(v126[2]), (double)v126[4] * 5.82076609e-11);
      int v62 = v126[8];
      if (v126[8] < 27489) {
        goto LABEL_172;
      }
      goto LABEL_112;
    }
    int v62 = v126[8];
    if (v126[8] > 27488)
    {
LABEL_112:
      EvCrt_v("DD_BDS_IntAlm_Valid:  FAILED:  SV %d  OmegaDot = %f > +1.0e-7", BYTE2(v126[2]), (double)v62 * 1.78578867e-13);
      goto LABEL_172;
    }
    if (!v61) {
      goto LABEL_172;
    }
    int v76 = BYTE2(v126[2]);
    uint64_t v77 = (BYTE2(v126[2]) - 1);
    if (BYTE2(v126[10]) || !*(unsigned char *)(v6[3174] + v77))
    {
      if (!BYTE2(v126[10]) || *(unsigned char *)(v6[3174] + v77))
      {
        if (BYTE2(v126[10])) {
          goto LABEL_156;
        }
      }
      else
      {
        double v78 = &v6[19 * (BYTE2(v126[2]) - 1) + 3189];
        EvDbg_v("DD_Proc_BDS_B1C_SF3_Alm:  Health, SV %d, DBnm health %d, Alm health %d, Curr_GPS_secs %d, Eph GPS_secs %d", v77 + 1, 0, 1, a5, *v78);
        uint64_t v79 = v6[3182];
        if (!*(unsigned char *)(v79 + v77))
        {
LABEL_156:
          double v82 = (_OWORD *)((char *)v6 + 44 * v77 + 44664);
          uint64_t v83 = v6[3184];
          if (!*(unsigned char *)(v83 + v77)
            || v126[0] + 604800 * SLOWORD(v126[2]) > (*(_DWORD *)v82
                                                                  + 604800
                                                                  * *((__int16 *)v6 + 22 * v77 + 22336))
            || !*(_DWORD *)v82 && v126[0] >= 1)
          {
            *(unsigned char *)(v6[3174] + v77) = 1;
            long long v84 = *(_OWORD *)&v126[4];
            *double v82 = *(_OWORD *)v126;
            *(_OWORD *)((char *)v6 + 44 * v77 + 44680) = v84;
            *(_OWORD *)((char *)v6 + 44 * v77 + 44692) = *(_OWORD *)&v126[7];
            *(_DWORD *)double v82 = *a5;
            *((_DWORD *)v6 + 11 * v77 + 11167) = 4;
            *(unsigned char *)(v6[3179] + v77) = 1;
            *(unsigned char *)(v83 + v77) = 1;
            *(unsigned char *)(a1 + v77 + 6582) = HIBYTE(v126[2]);
            EvVrb_v("EvVrb_BDS_IntAlm: %d %d %d %d  %d %d %d %d  %d %d %d %d  %d", *((__int16 *)v6 + 22 * v77 + 22336), *((unsigned __int8 *)v6 + 44 * v77 + 44674), *((unsigned __int8 *)v6 + 44 * v77 + 44675), *((_DWORD *)v6 + 11 * v77 + 11169), *((_DWORD *)v6 + 11 * v77 + 11170), *((_DWORD *)v6 + 11 * v77 + 11171), *((_DWORD *)v6 + 11 * v77 + 11172), *((_DWORD *)v6 + 11 * v77 + 11173), *((_DWORD *)v6 + 11 * v77 + 11174), *((__int16 *)v6 + 22 * v77 + 22350), *((__int16 *)v6 + 22 * v77 + 22351), *((__int16 *)v6 + 22 * v77 + 22352), *((unsigned __int8 *)v6 + 44 * v77 + 44706));
            uint64_t v85 = v6[3174];
            if (*(unsigned char *)(v85 + v77)) {
              int v86 = 1;
            }
            else {
              int v86 = 2;
            }
            *(_DWORD *)(v6[3176] + 20 * v77 + 4) = v86;
            if ((int)*a5 >= 1)
            {
              Core_Save_BDS_Alm(v76, 0, (long long *)((char *)v6 + 44 * v77 + 44664));
              uint64_t v85 = v6[3174];
            }
            uint64_t v87 = 0;
            LODWORD(v88) = 0;
            uint64_t v89 = p_NV;
            uint64_t v90 = p_NV + 13200;
            long long v91 = *(_OWORD *)(v85 + 16);
            __n128 result = *(__n128 *)(v85 + 32);
            long long v92 = *(_OWORD *)(v85 + 47);
            *(_OWORD *)(p_NV + 13212) = *(_OWORD *)v85;
            *(_OWORD *)(v90 + 59) = v92;
            *(__n128 *)(v90 + 44) = result;
            *(_OWORD *)(v90 + 28) = v91;
            uint64_t v93 = v89 + 13208;
            __int16 v94 = -9871;
            do
            {
              int v95 = *(unsigned __int8 *)(v93 + v87) ^ HIBYTE(v94);
              __int16 v94 = -12691 * (v94 + (*(unsigned __int8 *)(v93 + v87) ^ HIBYTE(v94))) + 22719;
              uint64_t v88 = (v88 + v95);
              ++v87;
            }
            while (v87 != 72);
            *(void *)(v89 + 13200) = v88;
          }
          goto LABEL_168;
        }
        if (*v78 + 3600 <= *a5)
        {
          *(unsigned char *)(v6[3178] + v77) = 0;
          *(unsigned char *)(v79 + v77) = 0;
          uint64_t v80 = a1 + 2 * v77;
          *(_WORD *)(v80 + 6456) = 256;
          *(_WORD *)(v80 + 6646) = 256;
          *(unsigned char *)(a1 + v77 + 6582) = -1;
          goto LABEL_156;
        }
      }
    }
LABEL_168:
    int v96 = v122;
    *(unsigned char *)(v6[3175] + v77) = v122;
    if (v96) {
      int v97 = 1;
    }
    else {
      int v97 = 2;
    }
    *(_DWORD *)(v6[3177] + 20 * v77 + 4) = v97;
  }
LABEL_172:
  unsigned __int8 v60 = *v20;
LABEL_173:
  if ((v60 & 0xFC) != 0xC) {
    return result;
  }
  LOWORD(v126[2]) = 0;
  *(void *)&v126[3] = 0;
  *(_DWORD *)((char *)&v126[4] + 3) = 0;
  LOWORD(v126[6]) = *(_WORD *)(v119 + 24);
  int v98 = Decode_BDS_B1C_BGTO(v20, (uint64_t)v126);
  uint64_t v99 = v119;
  if (v98 != 1)
  {
    if (v98 != 3) {
      return result;
    }
    uint64_t v99 = v119 + 28;
  }
  *(_DWORD *)uint64_t v99 = *a5;
  *(_DWORD *)(v99 + 4) = 4;
  *(_WORD *)(v99 + 8) = v126[2];
  *(void *)(v99 + 12) = *(void *)&v126[3];
  *(_WORD *)(v99 + 20) = v126[5];
  *(unsigned char *)(v99 + 22) = BYTE2(v126[5]);
  *(_WORD *)(v99 + 24) = v126[6];
  if (v98 == 1)
  {
    uint64_t v100 = (uint64_t)(v6 + 5937);
    uint64_t v101 = v119;
  }
  else
  {
    uint64_t v101 = (uint64_t)(v6 + 5933);
    uint64_t v100 = (uint64_t)(v6 + 5942);
  }
  result.n128_f64[0] = BDS_BGTOInt2Real(v101, v100);
  return result;
}

uint64_t DD_Save_New_BDS_Eph(int a1, void *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v49 = a3 + 6835;
  uint64_t v6 = a3 + 11560;
  uint64_t v7 = a3 + 13639;
  int v8 = (unsigned __int16 *)(a3 + 6456);
  uint64_t v47 = a3 + 6838;
  uint64_t v9 = 25521;
  uint64_t v10 = 3192;
  uint64_t v11 = 44706;
  uint64_t v12 = 44664;
  uint64_t v13 = 25638;
  uint64_t v14 = 25516;
  uint64_t v15 = 3189;
  uint64_t v16 = 25659;
  uint32x4_t v55 = a2;
  uint64_t v48 = a3 + 13639;
  do
  {
    if (*(unsigned char *)(v7 + v5)
      && (*(int *)((char *)a2 + v14) < 4
       || *(_WORD *)((char *)a2 + v13) != (*(unsigned __int8 *)(v47 + v3) | ((*(unsigned char *)(v47 + v3 - 1) & 3u) << 8)) >> 1))
    {
      long long v56 = 0uLL;
      *(_WORD *)uint64_t v57 = 0;
      memset(&v57[4], 0, 78);
      memset(&v57[84], 0, 48);
      if (*v8 == v8[95] && *(unsigned char *)(a2[3182] + v5) && (a1 < 1 || LODWORD(a2[v15])))
      {
        *(unsigned char *)(v7 + v5) = 0;
        goto LABEL_48;
      }
      BOOL v54 = &a2[v15];
      uint64_t v52 = v12;
      uint64_t v50 = v9;
      uint64_t v51 = v4;
      BDS_B1C_EphBin2Int((unsigned __int16 *)(v49 + v3), v6, (uint64_t)&v56);
      a2 = v55;
      BYTE8(v56) = v5 + 1;
      *(void *)&long long v56 = a1 | 0x400000000;
      BYTE11(v56) = 4;
      int v17 = *(unsigned __int8 *)(v55[3182] + v5);
      if (*(unsigned char *)(v55[3182] + v5))
      {
        if (*(_DWORD *)((char *)v55 + v14) == 5)
        {
          uint64_t v18 = &v55[19 * v5];
          uint64_t v19 = 25659;
LABEL_16:
          int v20 = (char *)v18 + v19;
LABEL_17:
          v57[131] = *v20;
          if (v17 && *v8 == v8[95] && (a1 < 1 || *v54)) {
            goto LABEL_47;
          }
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v55[3183] + v5))
        {
          int v20 = (char *)v55 + v16;
          goto LABEL_17;
        }
      }
      else if (!*(unsigned char *)(v55[3183] + v5))
      {
LABEL_21:
        BOOL v21 = DD_Validate_BDS_Eph(v5, v17 != 0, (uint64_t)v54, (uint64_t)&v56);
        a2 = v55;
        if (v21)
        {
          char v22 = BYTE9(v56);
          if (*(unsigned char *)(v55[3174] + v5) | BYTE9(v56)) {
            goto LABEL_23;
          }
          char v46 = BYTE9(v56);
          EvDbg_v("DD_Save_New_BDS_Eph:  Health, SV %d, DBnm health %d, Eph health %d, Alm health %d, Curr_GPS_secs %d, Alm GPS seconds %d", v5 + 1, 0, BYTE9(v56) == 0, *((unsigned __int8 *)v55 + v11), a1, *(_DWORD *)((char *)v55 + v52));
          a2 = v55;
          if (!*((unsigned char *)v55 + v11) && *(_DWORD *)((char *)v55 + v52) + 3600 > a1)
          {
            char v24 = 0;
            *(unsigned char *)(v55[3174] + v5) = 0;
            int v25 = 2;
            uint64_t v23 = v51;
            goto LABEL_25;
          }
          uint64_t v27 = v55[3184];
          char v22 = v46;
          if (!*(unsigned char *)(v27 + v5) || *(_DWORD *)((char *)v55 + v52) + 100 >= a1)
          {
LABEL_23:
            *(unsigned char *)(a2[3174] + v5) = v22 == 0;
            uint64_t v23 = v51;
            if (v22)
            {
              char v24 = 0;
              int v25 = 2;
LABEL_25:
              unsigned __int8 v26 = v54;
LABEL_34:
              *(_DWORD *)(a2[3176] + v23) = v25;
              uint64_t v28 = a2[3177];
              if (!*(_DWORD *)(v28 + v23 + 8) && !*(_DWORD *)(v28 + v23 + 4))
              {
                *(unsigned char *)(a2[3175] + v5) = v24;
                *(_DWORD *)(v28 + v23) = v25;
              }
              if (BYTE9(v56) == 1)
              {
                if (!*((unsigned char *)a2 + v11))
                {
LABEL_44:
                  long long v29 = *(_OWORD *)&v57[64];
                  *((_OWORD *)v26 + 4) = *(_OWORD *)&v57[48];
                  *((_OWORD *)v26 + 5) = v29;
                  long long v30 = *(_OWORD *)&v57[32];
                  *((_OWORD *)v26 + 2) = *(_OWORD *)&v57[16];
                  *((_OWORD *)v26 + 3) = v30;
                  *((void *)v26 + 18) = *(void *)&v57[128];
                  long long v31 = *(_OWORD *)&v57[112];
                  long long v32 = *(_OWORD *)&v57[80];
                  *((_OWORD *)v26 + 7) = *(_OWORD *)&v57[96];
                  *((_OWORD *)v26 + 8) = v31;
                  *((_OWORD *)v26 + 6) = v32;
                  long long v33 = *(_OWORD *)v57;
                  *(_OWORD *)unsigned __int8 v26 = v56;
                  *((_OWORD *)v26 + 1) = v33;
                  *(unsigned char *)(a2[3178] + v5) = 1;
                  *(unsigned char *)(a2[3182] + v5) = 1;
                  *(unsigned char *)(a2[3187] + v5) = 0;
                  if (a1 >= 1)
                  {
                    *(unsigned char *)(v55[3185] + v5) = 1;
                    Core_Save_BDS_Eph((v5 + 1), 0, (long long *)v26);
                  }
                  EvVrb_v("EvVrb_BDS_IntEph: %u %u %u %u %u  %u %u %u %u  %d %d  %d %d  %D %U %D %D %D  %d %d  %d %d %d %d %d %d   %d %d %d %u  %u %u %u %u  %d %d %d %d  %u %u %u %u %u %u  %d  %d", BYTE8(v56), BYTE9(v56), BYTE10(v56), BYTE11(v56), HIDWORD(v56), *(__int16 *)v57, *(unsigned int *)&v57[4], *(unsigned int *)&v57[8], *(unsigned int *)&v57[12], *(unsigned int *)&v57[16], *(unsigned int *)&v57[20], *(unsigned int *)&v57[24], *(unsigned int *)&v57[28], *(_OWORD *)&v57[32], *(_OWORD *)&v57[48], *(void *)&v57[64], *(unsigned int *)&v57[72],
                    *(__int16 *)&v57[76],
                    *(__int16 *)&v57[78],
                    *(__int16 *)&v57[80],
                    *(unsigned int *)&v57[84],
                    *(unsigned int *)&v57[88],
                    *(unsigned int *)&v57[92],
                    *(unsigned int *)&v57[96],
                    *(unsigned int *)&v57[100],
                    *(unsigned int *)&v57[104],
                    *(__int16 *)&v57[108],
                    *(unsigned __int16 *)&v57[110],
                    v57[112],
                    v57[113],
                    v57[114],
                    v57[115],
                    *(__int16 *)&v57[116],
                    *(__int16 *)&v57[118],
                    *(__int16 *)&v57[120],
                    *(__int16 *)&v57[122],
                    v57[124],
                    v57[125],
                    v57[126],
                    v57[127],
                    v57[128],
                    v57[129],
                    v57[130],
                    v57[131],
                    *(__int16 *)&v57[120],
                    *(unsigned int *)&v57[16],
                    *(__int16 *)&v57[118],
                    *(unsigned int *)&v57[12],
                    *(__int16 *)&v57[116],
                    *(unsigned int *)&v57[8],
                    v57[115],
                    *(unsigned int *)&v57[4],
                    v57[114],
                    v57[113],
                    HIDWORD(v56),
                    v57[112],
                    *(unsigned __int16 *)&v57[110],
                    *(__int16 *)&v57[108],
                    *(__int16 *)&v57[80],
                    *(__int16 *)&v57[78]);
                  EvLog_v("DD_Save_New_BDS_Eph:  EPH saved, SV %d  toc %d  Heath %d %d", v5 + 1, 8 * LODWORD(v55[v10]), *((unsigned __int8 *)v55 + v50), *(unsigned __int8 *)(v55[3174] + v5));
                  a2 = v55;
                  goto LABEL_47;
                }
                EvLog_v("DD_Save_New_BDS_Eph:  SV %d, Diff Health, E:U A:H, DBnm: %d  ");
              }
              else
              {
                if (BYTE9(v56) || *((unsigned char *)a2 + v11)) {
                  goto LABEL_44;
                }
                EvLog_v("DD_Save_New_BDS_Eph:  SV %d, Diff Health, E:H A:U, DBnm: %d  ");
              }
              unsigned __int8 v26 = v54;
              a2 = v55;
              goto LABEL_44;
            }
          }
          else
          {
            *(unsigned char *)(v55[3179] + v5) = 0;
            *(unsigned char *)(v27 + v5) = 0;
            *(unsigned char *)(v49 + v5 - 253) = -1;
            *(unsigned char *)(v55[3174] + v5) = 1;
            uint64_t v23 = v51;
          }
          unsigned __int8 v26 = v54;
          char v24 = 1;
          int v25 = 1;
          goto LABEL_34;
        }
LABEL_47:
        uint64_t v7 = v48;
        *(unsigned char *)(v48 + v5) = 0;
        uint64_t v4 = v51;
        uint64_t v9 = v50;
        uint64_t v12 = v52;
        goto LABEL_48;
      }
      uint64_t v18 = &v55[19 * v5];
      uint64_t v19 = 35235;
      goto LABEL_16;
    }
LABEL_48:
    ++v5;
    v9 += 152;
    v10 += 19;
    v11 += 44;
    v4 += 20;
    v12 += 44;
    v16 += 152;
    v6 += 33;
    ++v8;
    v13 += 152;
    v3 += 75;
    v14 += 152;
    v15 += 19;
  }
  while (v5 != 63);
  uint64_t v34 = 0;
  LODWORD(v35) = 0;
  char v36 = (_OWORD *)a2[3174];
  uint64_t v37 = p_NV;
  uint64_t v38 = p_NV + 13200;
  long long v40 = v36[1];
  long long v39 = v36[2];
  long long v41 = *(_OWORD *)((char *)v36 + 47);
  *(_OWORD *)(p_NV + 13212) = *v36;
  *(_OWORD *)(v38 + 59) = v41;
  *(_OWORD *)(v38 + 44) = v39;
  *(_OWORD *)(v38 + 28) = v40;
  uint64_t v42 = v37 + 13208;
  __int16 v43 = -9871;
  do
  {
    int v44 = *(unsigned __int8 *)(v42 + v34) ^ HIBYTE(v43);
    __int16 v43 = -12691 * (v43 + (*(unsigned __int8 *)(v42 + v34) ^ HIBYTE(v43))) + 22719;
    uint64_t v35 = (v35 + v44);
    ++v34;
  }
  while (v34 != 72);
  *(void *)(v37 + 13200) = v35;
  return 1;
}

BOOL DD_Validate_BDS_Eph(char a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(__int16 *)(a4 + 16);
  BOOL v9 = v8 < 2049;
  if (v8 >= 2049) {
    EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  WeekNo = %d > %d, Out of range !", *(unsigned __int8 *)(a4 + 8), *(unsigned __int16 *)(a4 + 16), 2048);
  }
  unsigned int v10 = *(_DWORD *)(a4 + 20);
  if (v10 >= 0x7E1)
  {
    EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  toe = %d > 604800 s, Out of range !", *(unsigned __int8 *)(a4 + 8), 300 * v10);
    BOOL v9 = 0;
  }
  unsigned int v11 = *(_DWORD *)(a4 + 24);
  if (v11 >= 0x7E1)
  {
    EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  toc = %d > 604800 s, Out of range !", *(unsigned __int8 *)(a4 + 8), 300 * v11);
    BOOL v9 = 0;
    unsigned int v11 = *(_DWORD *)(a4 + 24);
  }
  int v12 = *(_DWORD *)(a4 + 20);
  if (v11 != v12)
  {
    EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  toc = %d != toe = %d", *(unsigned __int8 *)(a4 + 8), 300 * v11, 300 * v12);
    BOOL v9 = 0;
  }
  unint64_t v13 = *(void *)(a4 + 56);
  if (v13 > 0x66666666)
  {
    EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  e = %g > 0.1 ", *(unsigned __int8 *)(a4 + 8), (double)v13 * 5.82076609e-11);
    int v14 = *(_DWORD *)(a4 + 88);
    if (v14 <= 1759219) {
      return 0;
    }
    goto LABEL_13;
  }
  int v14 = *(_DWORD *)(a4 + 88);
  if (v14 > 1759219)
  {
LABEL_13:
    EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  Omega_dot = %f > +1.0e-7", *(unsigned __int8 *)(a4 + 8), (double)v14 * 1.78578867e-13);
    return 0;
  }
  if (!v9) {
    return 0;
  }
  if (a2)
  {
    int v15 = *(_DWORD *)(a4 + 24);
    int v16 = *(_DWORD *)(a3 + 24);
    if (v15 != v16) {
      EvLog_v("DD_Val_BDS_Eph:  New Eph SV %d  toe %d %d   toc %d %d  IODC %d %d", *(unsigned __int8 *)(a4 + 8), *(_DWORD *)(a4 + 20), *(_DWORD *)(a3 + 20), v15, v16, *(unsigned __int16 *)(a4 + 126), *(unsigned __int16 *)(a3 + 126));
    }
  }
  BOOL v17 = Is_BDS_IntEph_Same(a4, a3);
  if (v17)
  {
    int v18 = *(_DWORD *)a3;
    uint64_t v19 = *(void *)a4;
    *(void *)a3 = *(void *)a4;
    if (!v18 && (int)v19 >= 1) {
      Core_Save_BDS_Eph((a1 + 1), 0, (long long *)a3);
    }
  }
  else
  {
    EvLog_v("DD_Val_BDS_Eph: (OK) Int Eph diff with same Toc. SV %d Toc %d", *(unsigned __int8 *)(a4 + 8), *(_DWORD *)(a4 + 24));
  }
  return !v17;
}

uint64_t NK_Check_TOW_Adjust(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  if (v2)
  {
    if (*(unsigned char *)(result + 136))
    {
      *(void *)(a2 + 1672) = 0;
    }
    else
    {
      if (v2 >= 0) {
        unsigned int v3 = *(_DWORD *)(a2 + 48);
      }
      else {
        unsigned int v3 = -v2;
      }
      uint64_t v4 = *(unsigned int *)(a2 + 1536);
      if ((int)v4 >= 3 && v3 >= TOW_stat_DeltaTOW_Limit[v4]
        || (uint64_t v5 = *(unsigned int *)(a2 + 20), (int)v5 >= 3) && v3 >= TOW_stat_DeltaTOW_Limit[v5])
      {
        *(void *)(a2 + 1672) = 0;
        *(_DWORD *)(result + 140) = 24;
        *(unsigned char *)(result + 136) = 1;
        *(_DWORD *)(a2 + 1536) = v4 - 1;
      }
      else
      {
        *(double *)(a2 + 1672) = *(double *)(a2 + 1672) - (double)v2;
      }
    }
  }
  return result;
}

uint64_t DD_Delete_Bad_QZSS_Data(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 + 1434;
  uint64_t v6 = a4 + 1144;
  uint64_t v7 = (_WORD *)(a1 + 4);
  uint64_t v8 = 6112;
  uint64_t v9 = 6672;
  uint64_t result = 256;
  do
  {
    uint64_t v11 = a4[1135];
    if (*(unsigned char *)(v11 + v4))
    {
      *((_DWORD *)v7 - 1) = 16777472;
      *uint64_t v7 = 256;
      *(_WORD *)(a2 + 2 * v4) = 256;
      *(unsigned char *)(v11 + v4) = 0;
      *(unsigned char *)(a4[1133] + v4) = 0;
      *(unsigned char *)(a4[1137] + v4) = 0;
      *(_DWORD *)((char *)v6 + 111) = 0;
      *((_OWORD *)v6 + 5) = 0uLL;
      *((_OWORD *)v6 + 6) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *((_OWORD *)v6 + 4) = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      *((_OWORD *)v6 + 2) = 0uLL;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *(unsigned char *)(a4[1143] + v4) = 0;
      *(unsigned char *)(a4[1140] + v4) = 1;
      uint64_t v12 = p_NV + v9;
      *(void *)(v12 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(_OWORD *)(v12 + 32) = 0uLL;
      *(_OWORD *)(v12 + 48) = 0uLL;
      *(_OWORD *)(v12 + 64) = 0uLL;
      *(_OWORD *)(v12 + 80) = 0uLL;
      *(_OWORD *)(v12 + 96) = 0uLL;
      *(_DWORD *)(v12 + 111) = 0;
    }
    if (*(unsigned char *)(a4[1136] + v4))
    {
      *(unsigned char *)(a3 + v4) = -1;
      *(unsigned char *)(a4[1136] + v4) = 0;
      *(unsigned char *)(a4[1134] + v4) = 0;
      *(unsigned char *)(a4[1139] + v4) = 0;
      *(_OWORD *)((char *)v5 + 28) = 0uLL;
      *uint64_t v5 = 0uLL;
      v5[1] = 0uLL;
      *(unsigned char *)(a4[1143] + v4) = 0;
      unint64_t v13 = (_OWORD *)(p_NV + v8);
      *((void *)v13 - 1) = 0xFFFFFFFFLL;
      _OWORD *v13 = 0uLL;
      v13[1] = 0uLL;
      *(_OWORD *)((char *)v13 + 28) = 0uLL;
    }
    ++v4;
    v8 += 56;
    v9 += 128;
    uint64_t v5 = (_OWORD *)((char *)v5 + 44);
    uint64_t v6 = (void *)((char *)v6 + 116);
    v7 += 3;
  }
  while (v4 != 10);
  return result;
}

uint64_t DD_Delete_Inhib_QZSS_Data(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = a5 + 1434;
  uint64_t v7 = a5 + 1144;
  uint64_t v8 = a2 + 2;
  uint64_t v9 = 6672;
  uint64_t v10 = 6112;
  do
  {
    if (*(unsigned char *)(result + v5))
    {
      *(_DWORD *)(v8 - 2) = 16777472;
      *(_WORD *)(v8 + 2) = 256;
      *(_WORD *)(a3 + 2 * v5) = 256;
      *(unsigned char *)(a5[1135] + v5) = 0;
      *(unsigned char *)(a5[1133] + v5) = 0;
      *(unsigned char *)(a5[1137] + v5) = 0;
      *(_DWORD *)((char *)v7 + 111) = 0;
      *((_OWORD *)v7 + 5) = 0uLL;
      *((_OWORD *)v7 + 6) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *((_OWORD *)v7 + 4) = 0uLL;
      *((_OWORD *)v7 + 1) = 0uLL;
      *((_OWORD *)v7 + 2) = 0uLL;
      *(_OWORD *)uint64_t v7 = 0uLL;
      *(unsigned char *)(a5[1138] + v5) = 0;
      *(_DWORD *)((char *)v7 + 1271) = 0;
      *(_OWORD *)(v7 + 155) = 0uLL;
      *(_OWORD *)(v7 + 157) = 0uLL;
      *(_OWORD *)(v7 + 151) = 0uLL;
      *(_OWORD *)(v7 + 153) = 0uLL;
      *(_OWORD *)(v7 + 147) = 0uLL;
      *(_OWORD *)(v7 + 149) = 0uLL;
      *(_OWORD *)(v7 + 145) = 0uLL;
      *(unsigned char *)(a5[1143] + v5) = 0;
      *(unsigned char *)(a5[1140] + v5) = 1;
      uint64_t v11 = p_NV + v9;
      *(void *)(v11 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v11 = 0uLL;
      *(_OWORD *)(v11 + 16) = 0uLL;
      *(_OWORD *)(v11 + 32) = 0uLL;
      *(_OWORD *)(v11 + 48) = 0uLL;
      *(_OWORD *)(v11 + 64) = 0uLL;
      *(_OWORD *)(v11 + 80) = 0uLL;
      *(_OWORD *)(v11 + 96) = 0uLL;
      *(_DWORD *)(v11 + 111) = 0;
      *(unsigned char *)(a4 + v5) = -1;
      *(unsigned char *)(a5[1136] + v5) = 0;
      *(unsigned char *)(a5[1134] + v5) = 0;
      *(unsigned char *)(a5[1139] + v5) = 0;
      *(_OWORD *)((char *)v6 + 28) = 0uLL;
      _OWORD *v6 = 0uLL;
      v6[1] = 0uLL;
      uint64_t v12 = (_OWORD *)(p_NV + v10);
      *((void *)v12 - 1) = 0xFFFFFFFFLL;
      *uint64_t v12 = 0uLL;
      v12[1] = 0uLL;
      *(_OWORD *)((char *)v12 + 28) = 0uLL;
    }
    ++v5;
    v9 += 128;
    v10 += 56;
    uint64_t v6 = (_OWORD *)((char *)v6 + 44);
    uint64_t v7 = (void *)((char *)v7 + 116);
    v8 += 6;
  }
  while (v5 != 10);
  return result;
}

uint64_t DD_Check_Age_QZSS_Data(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if ((int)result < 1) {
    return result;
  }
  int v6 = result;
  uint64_t v7 = 0;
  int v8 = 0;
  char v9 = 0;
  int v10 = result + 900;
  if ((int)result <= 900) {
    int v11 = 900;
  }
  else {
    int v11 = result;
  }
  int v34 = v11 - 900;
  if ((int)result <= 86400) {
    int v12 = 86400;
  }
  else {
    int v12 = result;
  }
  int v13 = v12 - 86400;
  uint64_t v14 = a5[1137];
  int v15 = (char *)a5 + 62170;
  uint64_t v16 = 9152;
  do
  {
    if (!*(unsigned char *)(v14 + v7)) {
      goto LABEL_19;
    }
    int v17 = *(_DWORD *)((char *)a5 + v16);
    if (v17 >= 1 && v17 < v13)
    {
LABEL_17:
      char v9 = 1;
      *(unsigned char *)(a5[1135] + v7) = 1;
      goto LABEL_19;
    }
    if (v17)
    {
      if (v17 > v10)
      {
        ++v8;
        if (!*v15) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      *(_DWORD *)((char *)a5 + v16) = v34;
    }
LABEL_19:
    ++v7;
    v16 += 116;
  }
  while (v7 != 10);
  if (v8 >= 1)
  {
    if (*v15) {
      uint64_t v19 = "(Skipped)";
    }
    else {
      uint64_t v19 = "";
    }
    EvLog_v("DD_Check_Age_QZSS_Data:  Deleting Future EPH, %d SVs  %s", v8, v19);
  }
  long long v33 = v15;
  uint64_t v20 = 0;
  int v21 = 0;
  if (v6 <= 15724800) {
    int v22 = 15724800;
  }
  else {
    int v22 = v6;
  }
  int v23 = v22 - 15724800;
  uint64_t v24 = 11472;
  do
  {
    if (*(unsigned char *)(a5[1139] + v20))
    {
      int v25 = *(_DWORD *)((char *)a5 + v24);
      if (v25 >= 1 && v25 < v23)
      {
        char v9 = 1;
        *(unsigned char *)(a5[1136] + v20) = 1;
        EvLog_v("DD_Check_Age_QZSS_Data:  Old ALM deleted SV %d age %d thresh %d", v20 + 193, (v6 - v25) / 604800, (v6 - v23) / 604800);
      }
      else if (v25)
      {
        if (v25 > v10)
        {
          ++v21;
          int v27 = v6 - v25;
          uint64_t v28 = "(Skipped)";
          if (!*v33) {
            uint64_t v28 = "";
          }
          EvLog_v("DD_Check_Age_QZSS_Data:  Future ALM deleted SV %d age %d thresh %d  %s", v20 + 193, v27 / 604800, 0, v28);
          if (!*v33)
          {
            char v9 = 1;
            *(unsigned char *)(a5[1136] + v20) = 1;
          }
        }
      }
      else
      {
        *(_DWORD *)((char *)a5 + v24) = v34;
      }
    }
    ++v20;
    v24 += 44;
  }
  while (v20 != 10);
  if (v21 >= 1)
  {
    long long v29 = "(Skipped)";
    if (!*v33) {
      long long v29 = "";
    }
    EvLog_v("DD_Check_Age_QZSS_Data:  Deleting Future ALM, %d SVs  %s", v21, v29);
  }
  uint64_t result = a2;
  if (v9)
  {
    return DD_Delete_Bad_QZSS_Data(a2, a3, a4, a5);
  }
  return result;
}

uint64_t DD_Proc_QZSS_Data(uint64_t result, uint64_t a2, uint64_t a3, int *a4, void *a5)
{
  uint64_t v9 = result;
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!*((_DWORD *)a5 + 29 * *(unsigned __int8 *)(a2 + 8) + 2314)) {
    *(unsigned char *)(a5[1143] + *(unsigned __int8 *)(a2 + 8)) = 0;
  }
  __int16 v10 = *(_WORD *)(a2 + 56);
  if ((v10 & 1) != 0 && (*(_DWORD *)(a2 + 16) & 0xFF0000) != 0x8B0000) {
    return (uint64_t)EvCrt_v("DD_Proc_QZSS_Data:  Preamble Test Fail.  SV %d  Word_Mask %x  Word_1 %x");
  }
  if ((v10 & 2) == 0)
  {
    *(unsigned char *)(a2 + 12) = 0;
    return result;
  }
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  unsigned int v12 = (v11 >> 2) & 7;
  *(unsigned char *)(a2 + 12) = (v11 >> 2) & 7;
  if (v12)
  {
    if (v12 >= 6) {
      return (uint64_t)EvCrt_v("DD_Proc_QZSS_Data:  Invalid QZSS Subframe Number.  SV %d  %d");
    }
    unsigned int v13 = v11 & 0xFFFF80;
    unsigned int v14 = (3 * (v11 & 0xFFFF80)) >> 6;
    if (v13 >= 0xC4DF81) {
      return (uint64_t)EvCrt_v("DD_Proc_QZSS_Data:  Subframe HOW TOW Error.  SV %d  TOW %d");
    }
    unsigned int v15 = v14 - 30 * ((143165577 * (unint64_t)v14) >> 32);
    if (v15 <= 5) {
      unsigned int v16 = 5;
    }
    else {
      unsigned int v16 = (43 * v15) >> 8;
    }
    if (v16 != v12) {
      return (uint64_t)EvCrt_v("DD_Proc_QZSS_Data:  Subframe Number Error.  SV %d  decoded %d  expected %d  HOW TOW %d");
    }
    char v35 = 0;
    uint64_t result = DD_Predict_Subframe_Number(a3, &v35);
    if (result && v35 >= 1 && v12 != v35)
    {
      unsigned __int8 v17 = v35 - 1;
      if (v35 <= 1) {
        unsigned __int8 v17 = 5;
      }
      if (v12 != v17) {
        return (uint64_t)EvCrt_v("DD_Proc_QZSS_Data:  Subframe Number Error.  SV %2d  decoded %d  predicted %d  or previous %d");
      }
    }
    if (g_Logging_Cfg >= 7)
    {
      EvLog_v("DD_Proc_QZSS_Data:  SV %d  SF %d  ToW %d", *(unsigned __int8 *)(a2 + 6), v12, (int)*(double *)(a3 + 40));
      int v18 = (unsigned __int16 *)(v9 + 6 * *(unsigned __int8 *)(a2 + 8));
      uint64_t result = (uint64_t)EvLog_nd("DD_Proc_QZSS_Data:  SF masks ", 3, v19, v18[2318], v18[2319], v18[2320]);
      unsigned int v12 = *(unsigned __int8 *)(a2 + 12);
    }
    if (v12 - 1 < 3)
    {
      *(unsigned char *)(a2 + 13) = 0;
      int v25 = (char *)*(unsigned __int8 *)(a2 + 8);
      if (*((_DWORD *)a5 + 29 * (void)v25 + 2314) != 0xFFFFFF && v25[a5[1129]] && v25[a5[1137]])
      {
        DD_Proc_Eph_Bit_Validation(v25, v12, a2 + 16, *(unsigned __int16 *)(a2 + 56), (uint64_t)a5);
        int v25 = (char *)*(unsigned __int8 *)(a2 + 8);
        BOOL v26 = *((_DWORD *)a5 + 29 * (void)v25 + 2314) == 0xFFFFFF;
        unsigned int v12 = *(unsigned __int8 *)(a2 + 12);
      }
      else
      {
        BOOL v26 = 0;
      }
      uint64_t result = DD_Proc_QZSS_Eph_Subframe(v25, v12, a2 + 16, *(unsigned __int16 *)(a2 + 56), v25[a5[1129]], (uint64_t)a5, v9 + 3584, v9 + 3654, v9 + 3676, v9 + 4636, a3, a4, v9 + 4696);
      if (result)
      {
        uint64_t v27 = *(unsigned __int8 *)(a2 + 8);
        uint64_t v28 = (char *)a5 + 116 * v27;
        int v29 = *((_DWORD *)v28 + 2288);
        *((_DWORD *)v28 + 2288) = *a4;
        BOOL v30 = !v29 || v26;
        if (v30 && *a4 >= 1)
        {
          *(unsigned char *)(a5[1140] + v27) = 1;
          return Core_Save_QZSS_Eph((v27 - 63), 0, (long long *)v28 + 572);
        }
      }
    }
    else if (v12 - 4 >= 2)
    {
      if (v12) {
        return (uint64_t)EvCrt_Illegal_switch_default("DD_Proc_QZSS_Data", 0x30Eu);
      }
    }
    else if ((~*(unsigned __int16 *)(a2 + 56) & 0x3FE) == 0)
    {
      if (*(unsigned char *)(a3 + 16))
      {
        int v20 = *(__int16 *)(a3 + 32);
        if (v20 >= 1025)
        {
          unsigned int v21 = *(_DWORD *)(a2 + 24);
          int v22 = HIWORD(v21) & 0x3F;
          *(unsigned char *)(a2 + 13) = BYTE2(v21) & 0x3F;
          int v23 = (v21 >> 22) & 3;
          *(unsigned char *)(a2 + 14) = v23;
          if (v23 == 3)
          {
            uint64_t v24 = (v22 - 1);
            if (v24 > 9) {
              goto LABEL_57;
            }
            BOOL v36 = 0;
            uint64_t result = Decode_GPS_Check_Alm_TOA((const unsigned int *)(a2 + 16), *(unsigned char *)(a5[1129] + v24), v20, (unsigned __int8 *)(v9 + v24 + 3644), (__int16 *)(a2 + 10), &v36);
            if (result)
            {
              uint64_t result = DD_Proc_QZSS_Alm_Subframe(*(unsigned char *)(a2 + 13), *(_WORD *)(a2 + 10), a2 + 16, *a4, v9 + 3584, v9 + 3654, a5);
            }
            else if (v36)
            {
              unsigned __int8 v31 = *(unsigned char *)(a2 + 13);
              long long v32 = (char *)a5 + 44 * v31;
              int v33 = *((_DWORD *)v32 + 2857);
              *((_DWORD *)v32 + 2857) = *a4;
              if (!v33 && *a4 >= 1) {
                uint64_t result = Core_Save_QZSS_Alm((v31 - 64), 0, (long long *)(v32 + 11428));
              }
            }
            if (*(unsigned char *)(a2 + 14) == 3)
            {
              int v22 = *(unsigned __int8 *)(a2 + 13);
LABEL_57:
              if (v22 == 51)
              {
                uint64_t result = DD_Proc_QZSS_Health_Subframe(*a4, v9 + 3584, v9 + 3654, v9 + 3644, a5);
                uint64_t v34 = a5[1143];
                *(_WORD *)(v34 + 8) = 0;
                *(void *)uint64_t v34 = 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL DD_Proc_QZSS_Eph_Subframe(unsigned int a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13)
{
  uint64_t v14 = 0;
  int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  *(void *)((char *)&v125[1] + 4) = *MEMORY[0x263EF8340];
  uint64_t v100 = a1;
  uint64_t v95 = a2;
  uint64_t v93 = a2 - 1;
  uint64_t v19 = (_WORD *)(a10 + 6 * a1 + 2 * v93);
  int v101 = a1 + 193;
  char v91 = a1;
  uint64_t v20 = 32 * a2 + 96 * a1 + a9 - 32;
  uint64_t v21 = a3 + 8;
  do
  {
    int v22 = 1 << (v14 + 2);
    int v23 = (unsigned __int16)(v22 & *v19);
    if (v23) {
      ++v15;
    }
    if ((v22 & a4) != 0)
    {
      ++v18;
      BOOL v24 = v23 == 0;
    }
    else
    {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      ++v17;
      int v25 = *(_DWORD *)(v20 + 4 * v14);
      if (*(_DWORD *)(v21 + 4 * v14) != v25)
      {
        ++v16;
        EvLog_v("DD_Proc_QZSS_Eph_Subframe: SV %d SF %d Diff Wd %d 0x%x 0x%x", v101, a2, v14 + 2, *(_DWORD *)(v21 + 4 * v14), v25);
      }
    }
    ++v14;
  }
  while (v14 != 8);
  uint64_t v26 = a10;
  if (v16 >= 1)
  {
    if (v16 == 1 && v17 >= 4 && (a2 == 1 && (a4 & 0x3C4) != 0x3C4 || a2 >= 2 && (a4 & 0x3FC) != 0x3FC)) {
      return 0;
    }
    int v15 = 0;
    uint64_t v27 = 2 * a2 - 2;
    *(_WORD *)(a10 + 6 * v100 + v27) = 0;
    *(_WORD *)(a7 + 6 * v100 + v27) = 256;
  }
  if (v17 - v16 <= 1)
  {
    uint64_t v33 = a9;
    uint64_t v37 = a11;
    if (v18 >= v15)
    {
      *(_WORD *)(a10 + 6 * v100 + 2 * (v95 - 1)) = a4;
      uint64_t v34 = a3;
      long long v41 = *(_OWORD *)(a3 + 24);
      uint64_t v42 = (_OWORD *)(a9 + 96 * v100 + 32 * (v95 - 1));
      *uint64_t v42 = *(_OWORD *)(a3 + 8);
      v42[1] = v41;
    }
    else
    {
      uint64_t v34 = a3;
    }
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = a10 + 6 * v100 + 2 * a2;
    int v32 = *(unsigned __int16 *)(v29 - 2);
    BOOL v30 = (_WORD *)(v29 - 2);
    int v31 = v32;
    uint64_t v34 = a3;
    uint64_t v33 = a9;
    uint64_t v35 = a3 + 8;
    uint64_t v36 = 32 * a2 + 96 * v100 + a9 - 32;
    uint64_t v37 = a11;
    do
    {
      int v38 = 1 << (v28 + 2);
      int v39 = v38 & v31;
      if ((v38 & a4) != 0 && v39 == 0)
      {
        *(_DWORD *)(v36 + 4 * v28) = *(_DWORD *)(v35 + 4 * v28);
        v31 |= (unsigned __int16)(1 << (v28 + 2));
        *BOOL v30 = v31;
      }
      else if ((v38 & a4) == 0 && v39)
      {
        *(_DWORD *)(v35 + 4 * v28) = *(_DWORD *)(v36 + 4 * v28);
        a4 |= (unsigned __int16)(1 << (v28 + 2));
      }
      ++v28;
    }
    while (v28 != 8);
  }
  unsigned int v43 = a2 - 1;
  if (a2 != 1 || (a4 & 7) != 7) {
    goto LABEL_86;
  }
  if (!a5)
  {
    LOBYTE(v49) = 7;
    goto LABEL_88;
  }
  int v44 = (*(_DWORD *)(v33 + 96 * v100) >> 14) & 0x3FF;
  int v45 = (int)*(double *)(v37 + 40);
  if (*(unsigned char *)(v37 + 16))
  {
    int v46 = *(__int16 *)(v37 + 32);
    int v47 = *(unsigned __int16 *)(v37 + 32);
    do
    {
      unsigned __int16 v48 = v44;
      v44 += 1024;
    }
    while (v46 - 512 > (__int16)v48);
    if (v47 != v48)
    {
      EvLog_v("DD_Proc_QZSS_Eph_Subframe:  WARNING:  Different Week Number detected,  %d != %d  SV %d", (__int16)v48, *(__int16 *)(v37 + 32), v101);
      int v46 = *(__int16 *)(v37 + 32);
      int v47 = *(unsigned __int16 *)(v37 + 32);
    }
    if (v47 == v48)
    {
      *(_DWORD *)(v37 + 20) = *(_DWORD *)(v37 + 24);
      goto LABEL_56;
    }
    if (*(int *)v37 < 3 || v45 < 32 || v45 >= 604769)
    {
LABEL_56:
      if (g_Logging_Cfg >= 7) {
        EvLog_v("DD_Proc_QZSS_Eph_Subframe:  Week Num Candidates  %d %d  %d %d  %d %d");
      }
      goto LABEL_86;
    }
    EvCrt_v("DD_Proc_QZSS_Eph_Subframe:  WARNING:  Different Week Number detected, possible QZSS Spoofing,  %d != %d  SV %d", (__int16)v48, v46, v101);
    *(unsigned char *)(v37 + 105) = 1;
    int v50 = *(unsigned __int16 *)(v37 + 32);
    int v99 = v45;
    if (v50 == v48)
    {
      *(_DWORD *)(v37 + 20) = *(_DWORD *)(v37 + 24);
      LOWORD(v50) = v48;
    }
    int v51 = (__int16)v48;
  }
  else
  {
    int v99 = (int)*(double *)(v37 + 40);
    int v50 = *(__int16 *)(*(void *)(p_api + 72) + 1726);
    if (v44 > v50) {
      LOWORD(v50) = (*(_DWORD *)(v33 + 96 * v100) >> 14) & 0x3FF;
    }
    unsigned __int16 v48 = ((v44 ^ 0x3FF) + v50) & 0xFC00 | v44;
    LOWORD(v50) = *(_WORD *)(v37 + 32);
    int v51 = (__int16)v48;
  }
  int v52 = v51;
  EvLog_v("DD_Proc_QZSS_Eph_Subframe:  Submitting WeekNum   %d  SV %d  DBts %d  %d", v51, v101, *(unsigned __int8 *)(v37 + 16), (__int16)v50);
  if (*(unsigned char *)(*(void *)(a6 + 9096) + (char)(v101 + 63))) {
    BOOL v53 = DD_Check_New_QZSS_Eph((v101 + 63), v33, a6);
  }
  else {
    BOOL v53 = 1;
  }
  int v54 = v101;
  if (!*(unsigned char *)(v37 + 16))
  {
    EvCrt_v("QZSS DD_Submit_WeekNum:  Week Num initialised to %d from SV %d", v52, v101);
LABEL_71:
    *(_WORD *)(v37 + 32) = v48;
    *(unsigned char *)(v37 + 16) = 1;
    *(_DWORD *)(v37 + 20) = *(_DWORD *)(v37 + 24);
    *(_DWORD *)(v37 + 64) = -1;
    *(_WORD *)(v37 + 68) = -1;
    *(_DWORD *)(v37 + 70) = 0;
    *(_WORD *)(v37 + 74) = 0;
    EvLog_v("QZSS DD_Submit_WeekNum:  Week Num Submit %d %d from SV %d", 1, v52, v54);
    EvLog_v("DD_Proc_QZSS_Eph_Subframe:  Submitted  WeekNum  %d  SV %d  DBts %d  %d", v52, v101, *(unsigned __int8 *)(v37 + 16), *(__int16 *)(v37 + 32));
    if (*(int *)v37 < 3) {
      *a12 = 0;
    }
    else {
      *a12 = v99 + 604800 * v52;
    }
    goto LABEL_86;
  }
  int v55 = *(unsigned __int16 *)(v37 + 32);
  char v56 = v55 == v48 || v53;
  if (v56)
  {
    if (v55 != v48 && v53)
    {
      uint64_t v57 = 0;
      while (*(unsigned __int16 *)(v37 + 2 * v57 + 64) != v48)
      {
        if (++v57 == 3) {
          goto LABEL_76;
        }
      }
      if (v57 >= 3)
      {
LABEL_76:
        uint64_t v58 = 0;
        while (*(__int16 *)(v37 + 2 * v58 + 64) != -1)
        {
          if (++v58 == 3) {
            goto LABEL_84;
          }
        }
        if (v58 < 3)
        {
          uint64_t v59 = v37 + 2 * v58;
          *(_WORD *)(v59 + 64) = v48;
          *(_WORD *)(v59 + 70) = 1;
          EvLog_v("QZSS DD_Submit_WeekNum:  Week Num Candidate %d found on SV %d");
          goto LABEL_85;
        }
LABEL_84:
        *(_WORD *)(v37 + 68) = -1;
        *(_DWORD *)(v37 + 64) = -1;
        *(_DWORD *)(v37 + 70) = 0;
        *(_WORD *)(v37 + 74) = 0;
        EvLog_v("QZSS DD_Submit_WeekNum:  WeekNum Candidate overflow, %d >= %d");
        goto LABEL_85;
      }
      uint64_t v60 = v37 + 2 * v57;
      __int16 v61 = *(_WORD *)(v60 + 70) + 1;
      *(_WORD *)(v60 + 70) = v61;
      EvLog_v("QZSS DD_Submit_WeekNum:  Week Num Candidate %d observed (%d) on SV %d", v52, v61, v101);
      int v62 = *(__int16 *)(v60 + 70);
      int v54 = v101;
      if (v62 < 3) {
        goto LABEL_85;
      }
      EvLog_v("QZSS DD_Submit_WeekNum:  Week Num Candidate %d accepted based on %d observations", v52, (unsigned __int16)v62);
      goto LABEL_71;
    }
  }
  else
  {
    EvCrt_v("QZSS DD_Submit_WeekNum:  Week Num Candidate %d found on SV %d which fails bit validation check", v52, v101);
  }
LABEL_85:
  EvLog_v("QZSS DD_Submit_WeekNum:  Week Num Submit %d %d from SV %d");
LABEL_86:
  if (v43 > 2) {
    return 0;
  }
  unsigned int v49 = 0x90207u >> (8 * v43);
LABEL_88:
  if (((a4 >> v49) & 1) == 0) {
    return 0;
  }
  int v63 = *(unsigned __int8 *)(v34 + 4 * v49 + 2);
  if (a2 == 1 && (a4 & 0x3C4) != 0x3C4) {
    return 0;
  }
  if (a2 >= 2 && (a4 & 0x3FC) != 0x3FC) {
    return 0;
  }
  int v64 = (unsigned __int16 *)(a7 + 6 * v100);
  uint64_t v65 = &v64[v93];
  int v66 = *v65;
  if (v63 != v66) {
    unsigned __int16 *v65 = v63;
  }
  if (v63 != *(unsigned __int16 *)(a8 + 2 * v100))
  {
    for (uint64_t i = 0; i != 6; i += 2)
    {
      if (2 * v93 != i) {
        *(_WORD *)(a10 + 6 * v100 + i) = 0;
      }
    }
    *(_WORD *)(a8 + 2 * v100) = v63;
  }
  unsigned __int16 v68 = (_WORD *)(a10 + 6 * v100);
  int v69 = (unsigned __int16)*v68;
  if ((~v69 & 0x3C4) == 0)
  {
    uint64_t v70 = a10 + 6 * v100;
    int v72 = *(unsigned __int16 *)(v70 + 2);
    unsigned __int16 v71 = (_WORD *)(v70 + 2);
    if ((~v72 & 0x3FC) == 0)
    {
      uint64_t v73 = a10 + 6 * v100;
      int v75 = *(unsigned __int16 *)(v73 + 4);
      char v74 = (_WORD *)(v73 + 4);
      if ((~v75 & 0x3FC) == 0)
      {
        int v76 = *v64;
        if (v76 == *(unsigned __int16 *)(a7 + 6 * v100 + 2)
          && v76 == *(unsigned __int16 *)(a7 + 6 * v100 + 4))
        {
          uint64_t v77 = (long long *)(a9 + 96 * v100);
          long long v78 = v77[3];
          long long v121 = v77[2];
          long long v122 = v78;
          long long v79 = v77[5];
          long long v123 = v77[4];
          long long v124 = v79;
          long long v80 = v77[1];
          long long v119 = *v77;
          *(_DWORD *)((char *)v125 + 7) = 0;
          v125[0] = 0;
          v118[0] = *a12;
          v118[1] = 4;
          long long v120 = v80;
          int v104 = 0;
          memset(v103, 0, sizeof(v103));
          long long v105 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          uint64_t v117 = 0;
          Get_GPS_Kep_Ephemeris(5, v91 - 63, (uint64_t)v118, (uint64_t)v103);
          int v81 = Kep_Check_Ephemeris(*a12 / 604800, *a12 % 604800, 1, (uint64_t)v103);
          __int16 v82 = v81;
          if (!ST_Check_Eph_Kep_Err((uint64_t)"DD_Proc_QZSS_Eph_Subframe", v81, (uint64_t)v103))
          {
            if ((v82 & 0xC) != 0) {
              *unsigned __int16 v68 = 0;
            }
            if ((v82 & 0x3F0) != 0) {
              *unsigned __int16 v71 = 0;
            }
            if ((v82 & 0xC00) != 0)
            {
              *char v74 = 0;
LABEL_114:
              *(unsigned char *)(*(void *)(a6 + 9144) + v100) = 1;
              goto LABEL_115;
            }
            if ((v82 & 0xFFC) != 0) {
              goto LABEL_114;
            }
          }
LABEL_115:
          int v69 = (unsigned __int16)*v68;
          uint64_t v26 = a10;
        }
      }
    }
  }
  if ((~v69 & 0x3C4) != 0) {
    return 0;
  }
  uint64_t v83 = v26 + 6 * v100;
  int v85 = *(unsigned __int16 *)(v83 + 2);
  long long v84 = (_WORD *)(v83 + 2);
  if ((~v85 & 0x3FC) != 0) {
    return 0;
  }
  uint64_t v86 = v26 + 6 * v100;
  int v88 = *(unsigned __int16 *)(v86 + 4);
  uint64_t v87 = (_WORD *)(v86 + 4);
  if ((~v88 & 0x3FC) != 0) {
    return 0;
  }
  int v89 = *v64;
  if (v89 != *(unsigned __int16 *)(a7 + 6 * v100 + 2)
    || v89 != *(unsigned __int16 *)(a7 + 6 * v100 + 4))
  {
    return 0;
  }
  if (v63 == v66 && a5)
  {
    BOOL result = *(unsigned char *)(a13 + v100) == 0;
  }
  else
  {
    BOOL result = 0;
    *(unsigned char *)(a13 + v100) = 1;
  }
  *unsigned __int16 v68 = 0;
  *long long v84 = 0;
  *uint64_t v87 = 0;
  return result;
}

BOOL DD_Proc_QZSS_Alm_Subframe(char a1, __int16 a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v12 = *(_DWORD *)(a3 + 16) & 0xE0;
  BOOL v13 = v12 == 0;
  uint64_t v14 = (a1 - 1);
  if (*(unsigned char *)(a7[1129] + v14)) {
    BOOL v15 = v12 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (*(unsigned char *)(a7[1129] + v14)) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v12 == 0;
    }
    if (v16)
    {
      uint64_t v17 = a7[1137];
      if (*(unsigned char *)(v17 + v14) && *((_DWORD *)a7 + 29 * (a1 - 1) + 2288) + 100 < a4)
      {
        *(unsigned char *)(a7[1133] + v14) = 0;
        *(unsigned char *)(v17 + v14) = 0;
        uint64_t v18 = a5 + 6 * (a1 - 1);
        *(_DWORD *)uint64_t v18 = 16777472;
        *(_WORD *)(v18 + 4) = 256;
        *(_WORD *)(a6 + 2 * v14) = 256;
      }
      BOOL v13 = 1;
    }
  }
  else
  {
    BOOL v13 = 0;
  }
  uint64_t v39 = 0;
  int v38 = a4;
  long long v40 = *(_OWORD *)(a3 + 8);
  long long v41 = *(_OWORD *)(a3 + 24);
  __int16 v33 = 0;
  memset(v32, 0, 15);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(v37, 0, sizeof(v37));
  Get_GPS_Kep_Almanac((uint64_t)&v38, (uint64_t)v32);
  LODWORD(v32[1]) = 5;
  int v19 = Kep_Check_Almanac(a4 / 604800, (uint64_t)v32);
  if (v19) {
    *(unsigned char *)(a7[1143] + v14) = 1;
  }
  BOOL result = ST_Check_Alm_Kep_Err((uint64_t)"DD_Proc_QZSS_Alm_Subframe:", v19, (uint64_t)v32);
  if (result)
  {
    uint64_t v21 = a7[1129];
    *(unsigned char *)(v21 + v14) = v13;
    int v22 = (char *)a7 + 44 * v14;
    *((_WORD *)v22 + 5741) = a2;
    long long v23 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v22 + 11500) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v22 + 11484) = v23;
    *((_DWORD *)v22 + 2868) = a4;
    *((_DWORD *)v22 + 2869) = 4;
    *(unsigned char *)(a7[1134] + v14) = 1;
    *(unsigned char *)(a7[1139] + v14) = 1;
    if (*(unsigned char *)(v21 + v14)) {
      int v24 = 1;
    }
    else {
      int v24 = 2;
    }
    *(_DWORD *)(a7[1131] + 20 * v14 + 4) = v24;
    if (a4 >= 1)
    {
      BOOL result = Core_Save_QZSS_Alm((a1 - 64), 0, (long long *)v22 + 717);
      uint64_t v21 = a7[1129];
    }
    uint64_t v25 = 0;
    LODWORD(v26) = 0;
    uint64_t v27 = p_NV;
    __int16 v28 = *(_WORD *)(v21 + 8);
    *(void *)(p_NV + 6092) = *(void *)v21;
    *(_WORD *)(v27 + 6100) = v28;
    uint64_t v29 = v27 + 6088;
    __int16 v30 = -9871;
    do
    {
      int v31 = *(unsigned __int8 *)(v29 + v25) ^ HIBYTE(v30);
      __int16 v30 = -12691 * (v30 + (*(unsigned __int8 *)(v29 + v25) ^ HIBYTE(v30))) + 22719;
      uint64_t v26 = (v26 + v31);
      ++v25;
    }
    while (v25 != 40);
    *(void *)(v27 + 6080) = v26;
  }
  return result;
}

uint64_t DD_Proc_QZSS_Health_Subframe(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  __int16 v23 = 257;
  int v6 = (_WORD *)(a2 + 4);
  uint64_t v22 = 0x101010101010101;
  uint64_t v7 = a5 + 1434;
  int v8 = a5 + 1144;
  uint64_t v9 = 4;
  do
  {
    if (*(unsigned char *)(a5[1129] + v5))
    {
      if (*((unsigned char *)&v22 + v5)) {
        goto LABEL_4;
      }
    }
    else if (*((unsigned char *)&v22 + v5))
    {
      uint64_t v11 = a5[1139];
      if (*(unsigned char *)(v11 + v5) && *v7 + 100 < (int)result)
      {
        *(unsigned char *)(a5[1134] + v5) = 0;
        *(unsigned char *)(v11 + v5) = 0;
        *(unsigned char *)(a4 + v5) = -1;
      }
      uint64_t v12 = a5[1137];
      if (*(unsigned char *)(v12 + v5) && *v8 + 100 < (int)result)
      {
        *(unsigned char *)(a5[1133] + v5) = 0;
        *(unsigned char *)(v12 + v5) = 0;
        *((_DWORD *)v6 - 1) = 16777472;
        _WORD *v6 = 256;
        *(_WORD *)(a3 + 2 * v5) = 256;
      }
LABEL_4:
      int v10 = 1;
      goto LABEL_13;
    }
    int v10 = 2;
LABEL_13:
    *(_DWORD *)(a5[1131] + v9) = v10;
    ++v5;
    v9 += 20;
    v6 += 3;
    v7 += 11;
    v8 += 29;
  }
  while (v5 != 10);
  uint64_t v13 = 0;
  LODWORD(v14) = 0;
  uint64_t v15 = a5[1129];
  *(_WORD *)(v15 + 8) = 257;
  *(void *)uint64_t v15 = 0x101010101010101;
  uint64_t v16 = a5[1129];
  uint64_t v17 = p_NV;
  __int16 v18 = *(_WORD *)(v16 + 8);
  *(void *)(p_NV + 6092) = *(void *)v16;
  *(_WORD *)(v17 + 6100) = v18;
  uint64_t v19 = v17 + 6088;
  __int16 v20 = -9871;
  do
  {
    int v21 = *(unsigned __int8 *)(v19 + v13) ^ HIBYTE(v20);
    __int16 v20 = -12691 * (v20 + (*(unsigned __int8 *)(v19 + v13) ^ HIBYTE(v20))) + 22719;
    uint64_t v14 = (v14 + v21);
    ++v13;
  }
  while (v13 != 40);
  *(void *)(v17 + 6080) = v14;
  return result;
}

uint64_t DD_Save_New_QZSS_Eph(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 9264;
  uint64_t v10 = 10424;
  uint64_t v11 = 9262;
  uint64_t v12 = 9261;
  uint64_t v13 = 9160;
  uint64_t v14 = 9152;
  uint64_t v15 = 11472;
  do
  {
    if (*(unsigned char *)(v5 + v8))
    {
      uint64_t v33 = v6;
      uint64_t v34 = v9;
      uint64_t v16 = (_OWORD *)(a2 + v7);
      uint64_t v17 = a5;
      if (DD_Check_New_QZSS_Eph(v8, a2, (uint64_t)a5))
      {
        uint64_t v18 = v17[1129];
        a5 = v17;
        if (*(unsigned char *)(v18 + v8))
        {
          uint64_t v6 = v33;
          uint64_t v9 = v34;
        }
        else
        {
          uint64_t v27 = v17[1139];
          uint64_t v6 = v33;
          uint64_t v9 = v34;
          if (*(unsigned char *)(v27 + v8) && *(_DWORD *)((char *)a5 + v15) + 100 < a1)
          {
            *(unsigned char *)(a5[1134] + v8) = 0;
            *(unsigned char *)(v27 + v8) = 0;
            *(unsigned char *)(a4 + v8) = -1;
            uint64_t v18 = a5[1129];
          }
        }
        *(unsigned char *)(v18 + v8) = 1;
        *(unsigned char *)(a5[1130] + v8) = 1;
        *((unsigned char *)a5 + v12 - 1) = 1;
        if (*(unsigned char *)(v18 + v8)) {
          int v19 = 1;
        }
        else {
          int v19 = 2;
        }
        *(_DWORD *)(a5[1131] + v6) = v19;
        __int16 v20 = (_OWORD *)((char *)a5 + v13);
        long long v21 = v16[1];
        *__int16 v20 = *v16;
        v20[1] = v21;
        long long v22 = v16[2];
        long long v23 = v16[3];
        long long v24 = v16[5];
        v20[4] = v16[4];
        v20[5] = v24;
        double v20[2] = v22;
        v20[3] = v23;
        if (*(unsigned char *)(a5[1138] + v8))
        {
          *((unsigned char *)a5 + v12) = *((unsigned char *)a5 + v12 + 1160);
          *(_WORD *)((char *)a5 + v11) = *(_WORD *)((char *)a5 + v10 - 2);
          *(_WORD *)((char *)a5 + v9) = *(_WORD *)((char *)a5 + v10);
        }
        uint64_t v25 = (char *)a5 + v14;
        *(_DWORD *)uint64_t v25 = a1;
        *((_DWORD *)v25 + 1) = 4;
        *(unsigned char *)(a5[1133] + v8) = 1;
        *(unsigned char *)(a5[1137] + v8) = 1;
        *((_DWORD *)v25 + 26) = 0;
        *(unsigned char *)(a5[1142] + v8) = 0;
        uint64_t v5 = a3;
        *(unsigned char *)(a3 + v8) = 0;
        if (a1 >= 1)
        {
          *(unsigned char *)(a5[1140] + v8) = 1;
          uint64_t v26 = a5;
          Core_Save_QZSS_Eph((v8 - 63), 0, (long long *)v25);
          uint64_t v9 = v34;
          uint64_t v5 = a3;
          a5 = v26;
        }
      }
      else
      {
        uint64_t v5 = a3;
        *(unsigned char *)(a3 + v8) = 0;
        v16[4] = 0u;
        v16[5] = 0u;
        void v16[2] = 0u;
        v16[3] = 0u;
        *uint64_t v16 = 0u;
        v16[1] = 0u;
        a5 = v17;
        uint64_t v6 = v33;
        uint64_t v9 = v34;
      }
    }
    ++v8;
    v9 += 116;
    v10 += 116;
    v11 += 116;
    v12 += 116;
    v7 += 96;
    v13 += 116;
    v6 += 20;
    v14 += 116;
    v15 += 44;
  }
  while (v8 != 10);
  return 1;
}

BOOL DD_Check_New_QZSS_Eph(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(*(void *)(a3 + 9096) + a1);
  uint64_t v4 = a3 + 116 * a1;
  long long v5 = *(_OWORD *)(v4 + 9208);
  long long v16 = *(_OWORD *)(v4 + 9192);
  long long v17 = v5;
  long long v6 = *(_OWORD *)(v4 + 9240);
  long long v18 = *(_OWORD *)(v4 + 9224);
  long long v19 = v6;
  long long v7 = *(_OWORD *)(v4 + 9176);
  long long v14 = *(_OWORD *)(v4 + 9160);
  long long v15 = v7;
  if (!v3) {
    return 1;
  }
  uint64_t v8 = a2 + 96 * a1;
  if (((*(_DWORD *)(v8 + 20) ^ DWORD1(v15)) & 0xFF0000) != 0) {
    return 1;
  }
  uint64_t v10 = 0;
  int v11 = *(_DWORD *)(v4 + 9256);
  int32x4_t v12 = 0uLL;
  do
  {
    int32x4_t v12 = vsubq_s32(v12, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)&v14 + v10), *(int32x4_t *)(v8 + v10))));
    v10 += 16;
  }
  while (v10 != 96);
  if (vaddvq_s32(v12)) {
    BOOL v13 = v11 == 0xFFFFFF;
  }
  else {
    BOOL v13 = 0;
  }
  return !v13;
}

uint64_t Get_UTC_Leap_Second_For_GLON_Day_4yrBlk(int a1, int a2, double a3)
{
  if (a3 + -10800.0 < 0.0)
  {
    int v3 = a2 < 2;
    if (a2 >= 2) {
      --a2;
    }
    else {
      a2 = 1461;
    }
    a1 -= v3;
  }
  uint64_t v4 = 0;
  int v5 = a2 + 1461 * a1;
  while (v5 < *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v4 + 8] + 1461 * Time_Data_At_Leap_Sec_Change[v4 + 6]
       || v5 >= *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v4 + 20]
              + 1461 * Time_Data_At_Leap_Sec_Change[v4 + 18])
  {
    v4 += 12;
    if (v4 == 96) {
      return -99;
    }
  }
  return (char)Time_Data_At_Leap_Sec_Change[v4 + 10];
}

uint64_t U4sqrt(unsigned int a1)
{
  int v1 = (((a1 & 0xC0000000) != 0) << 15) | 0x4000;
  if (v1 * v1 <= a1) {
    unsigned int v2 = (((a1 & 0xC0000000) != 0) << 15) | 0x4000;
  }
  else {
    unsigned int v2 = ((a1 & 0xC0000000) != 0) << 15;
  }
  if ((v2 | 0x2000) * (v2 | 0x2000) <= a1) {
    v2 |= 0x2000u;
  }
  if ((v2 | 0x1000) * (v2 | 0x1000) <= a1) {
    v2 |= 0x1000u;
  }
  if ((v2 + 2048) * (v2 + 2048) <= a1) {
    v2 += 2048;
  }
  if ((v2 + 1024) * (v2 + 1024) <= a1) {
    v2 += 1024;
  }
  if ((v2 + 512) * (v2 + 512) <= a1) {
    v2 += 512;
  }
  if ((v2 + 256) * (v2 + 256) <= a1) {
    v2 += 256;
  }
  if ((v2 + 128) * (v2 + 128) <= a1) {
    v2 += 128;
  }
  if ((v2 + 64) * (v2 + 64) <= a1) {
    v2 += 64;
  }
  if ((v2 + 32) * (v2 + 32) <= a1) {
    v2 += 32;
  }
  if ((v2 + 16) * (v2 + 16) <= a1) {
    v2 += 16;
  }
  if ((v2 + 8) * (v2 + 8) <= a1) {
    v2 += 8;
  }
  if ((v2 + 4) * (v2 + 4) <= a1) {
    v2 += 4;
  }
  if ((v2 + 2) * (v2 + 2) <= a1) {
    v2 += 2;
  }
  if ((v2 + 1) * (v2 + 1) > a1) {
    return v2;
  }
  else {
    return v2 + 1;
  }
}

double *Inc_GPS_TOW(double a1, double *result, __int16 *a3)
{
  double v3 = *result + a1;
  *BOOL result = v3;
  if (v3 >= 604800.0)
  {
    __int16 v4 = *a3;
    do
    {
      double v3 = v3 + -604800.0;
      ++v4;
    }
    while (v3 >= 604800.0);
    *BOOL result = v3;
    *a3 = v4;
  }
  if (v3 < 0.0)
  {
    __int16 v5 = *a3;
    do
    {
      double v3 = v3 + 604800.0;
      --v5;
    }
    while (v3 < 0.0);
    *BOOL result = v3;
    *a3 = v5;
  }
  return result;
}

uint64_t NK_Sample_Track_Meas(int *a1, _DWORD *a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v8 = 0;
  char v9 = 0;
  char v10 = 0;
  char v11 = 0;
  int v12 = 0;
  char v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned __int8 v16 = 0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v17 = (unsigned char *)(a4 + 62038);
  int v18 = *a1;
  *(_DWORD *)a4 = *a1;
  int v19 = v18 - *a2;
  if (v18 == *a2) {
    int v19 = 1;
  }
  *(_DWORD *)(a4 + 16) = v19;
  *a2 = v18;
  *(_DWORD *)(a4 + 4) = a1[1];
  *(void *)(a4 + 8) = *((void *)a1 + 1);
  *(_DWORD *)(a4 + 20) = a1[4];
  *(unsigned char *)(a4 + 24) = *((unsigned char *)a1 + 20);
  *(unsigned char *)(a4 + 25) = *((unsigned char *)a1 + 22);
  *(unsigned char *)(a4 + 56) = *((unsigned char *)a1 + 21);
  *(_WORD *)(a4 + 26) = *((_WORD *)a1 + 12);
  double v20 = *((double *)a1 + 4);
  *(double *)(a4 + 32) = v20;
  LODWORD(a7) = *(_DWORD *)(a4 + 16);
  *(double *)(a4 + 40) = v20 - *a3 + (double)*(unint64_t *)&a7 * -0.001;
  *a3 = v20;
  *(void *)(a4 + 48) = *((void *)a1 + 6);
  *(_DWORD *)(a4 + 188) = a1[14];
  *(unsigned char *)(a4 + 192) = *((unsigned char *)a1 + 60);
  *(_WORD *)(a4 + 194) = *((_WORD *)a1 + 31);
  *(_WORD *)(a4 + 196) = *((_WORD *)a1 + 32);
  *(void *)(a4 + 200) = *((void *)a1 + 9);
  memset(v31, 0, sizeof(v31));
  uint64_t v21 = 97;
  do
  {
    long long v22 = &a1[v8];
    unsigned int v23 = v22[24];
    if (v23)
    {
      ++v15;
      v14 += *((unsigned __int8 *)a1 + v8 + 2272);
      if (v22[312] >= 10 && !*((unsigned char *)v31 + v8))
      {
        *((unsigned char *)v31 + v8) = 1;
        uint64_t v24 = *((unsigned __int8 *)a1 + v8 + 736);
        if (v24 != 255) {
          *((unsigned char *)v31 + v24) = 1;
        }
        unsigned int v25 = v23 >> 8;
        switch((char)v23)
        {
          case 0:
          case 7:
            __int16 v30 = v17;
            int v29 = v12;
            EvCrt_Illegal_switch_case("NK_Sample_Track_Meas", 0x8Du);
            long long v17 = v30;
            int v12 = v29;
            LOBYTE(v25) = *((unsigned char *)a1 + v21);
            break;
          case 1:
          case 3:
          case 5:
          case 6:
            ++v13;
            break;
          case 2:
            ++v12;
            break;
          case 4:
            ++v11;
            break;
          default:
            break;
        }
        ++v16;
        if (v25 <= 0xDu)
        {
          int v26 = 1 << v25;
          if ((v26 & 0x923) != 0)
          {
            ++v10;
          }
          else if ((v26 & 0x2288) != 0)
          {
            ++v9;
          }
        }
      }
    }
    ++v8;
    v21 += 4;
  }
  while (v8 != 128);
  if (v15) {
    *(unsigned char *)(a4 + 1488) = v14 / v15;
  }
  *long long v17 = v13;
  void v17[5] = v12;
  v17[10] = v11;
  v17[15] = v10;
  v17[20] = v9;
  return v16;
}

uint64_t Decode_GPS_Check_Alm_TOA(const unsigned int *a1, char a2, __int16 a3, unsigned __int8 *a4, __int16 *a5, BOOL *a6)
{
  uint64_t v6 = 0;
  *a6 = 0;
  unsigned int v7 = *((unsigned __int8 *)a1 + 14);
  if (v7 <= 0x93)
  {
    unsigned int v8 = a1[1] & 0xFFFF80;
    if (v8 > 0xC4DFEA) {
      return 0;
    }
    signed int v9 = (v7 << 12) - ((3 * v8) >> 6);
    if (v9 >= -302400) {
      __int16 v10 = a3 - (v9 > 302399);
    }
    else {
      __int16 v10 = a3 - (v9 > 302399) + 1;
    }
    *a5 = v10;
    unsigned int v11 = *a4;
    if (v11 < v7 || (int)(v11 - v7) >= 74)
    {
      *a4 = v7;
      return 1;
    }
    if (v11 != v7) {
      return 0;
    }
    *a6 = 1;
    if (a2) {
      return 0;
    }
    else {
      return ((a1[4] & 0xE0) == 0) & (0xE4FE7F3uLL >> (a1[4] & 0x1F));
    }
  }
  return v6;
}

void NK_Comp_DR_Meas(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v20 = a1;
  bzero(a14, 8 * a1);
  bzero(a15, a1);
  if (a9 > 0.0 && a1)
  {
    unint64_t v21 = 0;
    unsigned int v22 = (a9 * 100.0) + 1;
    double v23 = (double)a2 * 299792.458;
    double v24 = 1.0 / a9;
    uint64_t v49 = a7;
    while (1)
    {
      uint64_t v25 = 0;
      if (*(int *)(a11 + 4 * v21) < 15) {
        break;
      }
      int v26 = *(_WORD *)(a10 + 2 * v21) & 0x300;
      if (*(_WORD *)(a6 + 2 * v21)) {
        BOOL v27 = v26 == 768;
      }
      else {
        BOOL v27 = 0;
      }
      int v28 = v27;
      if (v22 < *(unsigned __int16 *)(a6 + 2 * v21) && *(unsigned char *)(a13 + v21) && v26 == 768)
      {
        double v29 = v23 + *(double *)(a7 + 8 * v21) - *(double *)(a12 + 8 * v21);
        *((double *)a14 + v21) = v29;
        *((unsigned char *)a15 + v21) = 1;
        double v30 = *(double *)(a8 + 8 * v21) + v29 * v24;
        if (fabs(v30) > 6.0)
        {
          *(_DWORD *)(a11 + 4 * v21) = 14;
          *((unsigned char *)a15 + v21) = 0;
          GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)(a3 + 4 * v21));
          EvCrt_v("NK_Comp_DR_Meas:  %d  %s  DR-DO = %d m/s !  CP (%d - %d)  DO %d  SNR %d", v21, GNSS_SV_Str, (int)v30, (int)*(double *)(v49 + 8 * v21), (int)*(double *)(a12 + 8 * v21), (int)*(double *)(a8 + 8 * v21), *(unsigned __int8 *)(a5 + v21));
          if (!*((unsigned char *)a15 + v21)) {
            goto LABEL_29;
          }
        }
        unint64_t v32 = *(unsigned __int8 *)(a4 + v21);
        if (v32 == 255 || v21 <= v32 || !*((unsigned char *)a15 + v32)) {
          goto LABEL_29;
        }
        unsigned int v33 = *(unsigned __int8 *)(a3 + 1 + 4 * v32);
        BOOL v34 = v33 > 0xF;
        int v35 = (1 << v33) & 0xDD77;
        if (v34 || v35 == 0)
        {
          unint64_t v37 = v21;
          int v38 = v21;
        }
        else
        {
          unint64_t v37 = *(unsigned __int8 *)(a4 + v21);
          int v38 = *(unsigned __int8 *)(a4 + v21);
          LODWORD(v32) = v21;
        }
        double v39 = *((double *)a14 + v37);
        double v40 = *((double *)a14 + v32);
        if (vabdd_f64(v39, v40) > 0.04)
        {
          double v41 = v39 - v40;
          int v45 = v38;
          uint64_t v46 = v32;
          uint64_t v42 = Get_GNSS_SV_Str(*(unsigned int *)(a3 + 4 * v37));
          strlcpy(__dst, v42, 8uLL);
          unsigned int v43 = Get_GNSS_SV_Str(*(unsigned int *)(a3 + 4 * v46));
          strlcpy(v52, v43, 8uLL);
          EvCrt_v("Comp_DR_Meas:  L1  %d  %s  %d  %d  %f  vs  L5  %d  %s  %d  %d  %f   diff  %f mm", v45, __dst, *(unsigned __int8 *)(a5 + v37), *(unsigned __int16 *)(a6 + 2 * v37), *((double *)a14 + v37), v46, v52, *(unsigned __int8 *)(a5 + v46), *(unsigned __int16 *)(a6 + 2 * v46), *((double *)a14 + v46), v41 * 1000.0);
          a7 = v49;
          if ((v28 & 1) == 0) {
            break;
          }
        }
        else
        {
LABEL_29:
          a7 = v49;
          if (!v28) {
            break;
          }
        }
      }
      else
      {
        *(_DWORD *)(a11 + 4 * v21) = 14;
        if ((v28 & 1) == 0) {
          break;
        }
      }
      uint64_t v25 = *(void *)(a7 + 8 * v21);
      char v44 = 1;
LABEL_31:
      *(void *)(a12 + 8 * v21) = v25;
      *(unsigned char *)(a13 + v21++) = v44;
      if (v20 == v21) {
        return;
      }
    }
    char v44 = 0;
    goto LABEL_31;
  }
}

BOOL Init_DB_Sys_Status(uint64_t a1)
{
  uint64_t v2 = 0;
  *(void *)(a1 + 480) = a1 + 257;
  *(void *)(a1 + 488) = a1 + 289;
  *(void *)(a1 + 520) = a1 + 313;
  *(void *)(a1 + 512) = a1 + 349;
  *(void *)(a1 + 528) = a1 + 422;
  *(void *)(a1 + 496) = a1 + 412;
  *(void *)(a1 + 504) = a1 + 436;
  *(void *)(a1 + 760) = a1 + 536;
  *(void *)(a1 + 768) = a1 + 568;
  *(void *)(a1 + 776) = a1 + 691;
  *(void *)(a1 + 800) = a1 + 592;
  *(void *)(a1 + 792) = a1 + 628;
  *(void *)(a1 + 808) = a1 + 701;
  *(void *)(a1 + 784) = a1 + 715;
  *(void *)(a1 + 1040) = a1 + 816;
  *(void *)(a1 + 1048) = a1 + 848;
  *(void *)(a1 + 1056) = a1 + 971;
  *(void *)(a1 + 1080) = a1 + 872;
  *(void *)(a1 + 1072) = a1 + 908;
  *(void *)(a1 + 1088) = a1 + 981;
  *(void *)(a1 + 1064) = a1 + 995;
  uint64_t v3 = a1 + 1096;
  *(void *)(a1 + 1320) = a1 + 1096;
  *(void *)(a1 + 1328) = a1 + 1128;
  *(void *)(a1 + 1336) = a1 + 1251;
  *(void *)(a1 + 1360) = a1 + 1152;
  *(void *)(a1 + 1352) = a1 + 1188;
  *(void *)(a1 + 1368) = a1 + 1261;
  *(void *)(a1 + 1344) = a1 + 1275;
  __int16 v4 = (BOOL *)(a1 + 1376);
  *(void *)(a1 + 1600) = a1 + 1376;
  *(void *)(a1 + 1608) = a1 + 1408;
  *(void *)(a1 + 1616) = a1 + 1531;
  *(void *)(a1 + 1640) = a1 + 1432;
  *(void *)(a1 + 1632) = a1 + 1468;
  *(void *)(a1 + 1648) = a1 + 1541;
  *(void *)(a1 + 1624) = a1 + 1555;
  *(void *)a1 = 0x200000000;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 14) = 0;
  *(unsigned char *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 22) = 16843009;
  *(_DWORD *)(a1 + 25) = 16843009;
  *(_WORD *)(a1 + 37) = 256;
  *(_DWORD *)(a1 + 47) = 0;
  *(void *)(a1 + 39) = 0;
  *(_WORD *)(a1 + 51) = 1;
  *(unsigned char *)(a1 + 53) = 0;
  *(void *)(a1 + 56) = 0x200000000;
  *(_WORD *)(a1 + 73) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 1820) = xmmword_263D84B30;
  *(_WORD *)(a1 + 1836) = 1;
  *(unsigned char *)(a1 + 1838) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 1656) = 0x3E800000000;
  *(_DWORD *)(a1 + 1668) = 0;
  *(void *)(a1 + 1672) = 0x4060A00000000000;
  *(_OWORD *)(a1 + 1680) = xmmword_263D84B40;
  *(_OWORD *)(a1 + 1696) = xmmword_263D84B50;
  *(void *)(a1 + 1712) = 0x3ED0C6F7A0B5ED8ELL;
  *(_DWORD *)(a1 + 1724) = 140181504;
  *(_WORD *)(a1 + 1728) = 2139;
  *(void *)(a1 + 1752) = 60000;
  *(_OWORD *)(a1 + 459) = 0u;
  *(_OWORD *)(a1 + 433) = 0u;
  *(_OWORD *)(a1 + 449) = 0u;
  *(_OWORD *)(a1 + 401) = 0u;
  *(_OWORD *)(a1 + 417) = 0u;
  *(_OWORD *)(a1 + 369) = 0u;
  *(_OWORD *)(a1 + 385) = 0u;
  *(_OWORD *)(a1 + 337) = 0u;
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 305) = 0u;
  *(_OWORD *)(a1 + 321) = 0u;
  *(_OWORD *)(a1 + 273) = 0u;
  *(_OWORD *)(a1 + 289) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 738) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 1578) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1018) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 1298) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  do
    *(unsigned char *)(a1
             + Init_DB_Sys_Status(s_DB_Sys_Status *)::Not_Brd_SV_GPS_L5[v2++]
             - 1
             + 1096) = 1;
  while (v2 != 14);
  for (uint64_t i = 0; i != 11; ++i)
  {
    uint64_t v6 = Init_DB_Sys_Status(s_DB_Sys_Status *)::Not_Brd_SV_GAL[i] + a1;
    *(unsigned char *)(v6 + 871) = 1;
    *(unsigned char *)(v6 + 1151) = 1;
  }
  uint64_t v7 = 0;
  *(unsigned char *)(a1 + 938) = 1;
  *(unsigned char *)(a1 + 1218) = 1;
  *(void *)(a1 + 908) = 0x101010101010101;
  *(void *)(a1 + 916) = 0x101010101010101;
  *(_WORD *)(a1 + 924) = 257;
  *(void *)(a1 + 954) = 0x101010101010101;
  *(void *)(a1 + 962) = 0x101010101010101;
  *(unsigned char *)(a1 + 970) = 1;
  *(void *)(a1 + 1188) = 0x101010101010101;
  *(void *)(a1 + 1196) = 0x101010101010101;
  *(_WORD *)(a1 + 1204) = 257;
  *(void *)(a1 + 1234) = 0x101010101010101;
  *(void *)(a1 + 1242) = 0x101010101010101;
  *(unsigned char *)(a1 + 1250) = 1;
  do
  {
    uint64_t v8 = Init_DB_Sys_Status(s_DB_Sys_Status *)::Not_Brd_SV_NVIC[v7] + a1;
    *(unsigned char *)(v8 + 980) = 1;
    *(unsigned char *)(v8 + 1260) = 1;
    ++v7;
  }
  while (v7 != 4);
  for (uint64_t j = 0; j != 23; ++j)
  {
    uint64_t v10 = Init_DB_Sys_Status(s_DB_Sys_Status *)::Not_Brd_SV_SBAS[j] + a1;
    *(unsigned char *)(v10 + 875) = 1;
    *(unsigned char *)(v10 + 1155) = 1;
  }
  Core_Load_Not_Brd_SV(0, a1 + 816);
  Core_Load_Not_Brd_SV(1, v3);
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(unsigned char *)(a1 + 2128) = 0;
  *(unsigned char *)(a1 + 1856) = -1;
  Init_Set_Inter_Chan_Bias((char *)a1, 0);
  *(_WORD *)(a1 + 2028) = 0;
  *(_DWORD *)(a1 + 2036) = 0;
  *(void *)(a1 + 2048) = 0;
  *(void *)(a1 + 2040) = 0x4010000000000001;

  return Core_Load_Inhib_EE(v4, (uint64_t *)(a1 + 1744));
}

char *Init_Set_Inter_Chan_Bias(char *result, unsigned int a2)
{
  if (a2 < 8)
  {
    if (result[1856] != a2)
    {
      result[1856] = a2;
      if (!result[1976])
      {
        uint64_t v2 = (_OWORD *)((char *)&InterChanBias_GLON_L1OF + 112 * a2);
        *(_OWORD *)(result + 1912) = v2[3];
        *(_OWORD *)(result + 1928) = v2[4];
        *(_OWORD *)(result + 1944) = v2[5];
        *(_OWORD *)(result + 1960) = v2[6];
        *(_OWORD *)(result + 1864) = *v2;
        *(_OWORD *)(result + 1880) = v2[1];
        *(_OWORD *)(result + 1896) = v2[2];
      }
      *((void *)result + 248) = InterChanBias_BDS_B1I[a2];
      if (!result[2000]) {
        *((void *)result + 249) = 0;
      }
      *((void *)result + 251) = 0x3FE8000000000000;
      return EvLog_v("Init_ICB: Model %d", a2);
    }
  }
  else
  {
    return (char *)gn_report_assertion_failure("Init_ICB: Bad Model Id");
  }
  return result;
}

double Init_DB_Sys_Status_NV(uint64_t a1, uint64_t a2)
{
  v11[1] = *(double *)MEMORY[0x263EF8340];
  v11[0] = 0.0;
  int v10 = 0;
  int v4 = Core_Load_Clk_Drift(&v10, v11);
  int v5 = 0;
  double v6 = 0.000004;
  if (!v4 || (double v7 = v11[0], v11[0] == 0.0) || fabs(v11[0]) >= 0.000004)
  {
    double v7 = 0.0;
  }
  else
  {
    int v5 = 0;
    double v6 = 0.000001;
    if (*(unsigned char *)(a1 + 16) && *(__int16 *)(a1 + 32) >= 1025 && *(int *)a1 >= 1)
    {
      int v5 = (int)*(double *)(a1 + 40) + 604800 * *(unsigned __int16 *)(a1 + 32) - v10;
      if ((v5 - 31449600) >= 0xFE201BA8)
      {
        if (v5 < 1209601)
        {
          double v6 = dbl_263D84B60[v5 < 900];
        }
        else
        {
          v5 -= 1209600;
          double v9 = (double)v5 * 0.0000000330687831;
          double v6 = v9 * 0.0000035 + 0.0000005;
          double v7 = v11[0] * (1.0 - v9);
        }
      }
      else
      {
        double v7 = 0.0;
        double v6 = 0.000004;
      }
    }
  }
  *(double *)(a2 + 1704) = v7;
  *(double *)(a2 + 1712) = v6;
  *(_DWORD *)(a2 + 2036) = v5;
  *(double *)(a2 + 2048) = v7 * 1000000.0;
  double result = v6 * 1000000.0;
  *(double *)(a2 + 2040) = v6 * 1000000.0;
  return result;
}

double NK_DeCor_Ext_Meas(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 60248;
  uint64_t v5 = a2 + 59984;
  int v6 = *(unsigned __int8 *)(a2 + 60200);
  if (*(unsigned char *)(a2 + 60200) && *(int *)(a2 + 60212) > 0
    || (double result = 0.0, *(unsigned char *)(a2 + 60328)) && *(int *)(a2 + 60340) >= 1)
  {
    Comp_NEDvar_UDU(a1 + 352, 0xCu, 6, (double (*)[3])(a2 + 1736), v38);
    Comp_ErrorEllipse(v38[0], v38[1], v8, &v35, &v36, &v37);
    double result = v35 * v35;
    int v6 = *(unsigned __int8 *)(v5 + 216);
  }
  if (v6)
  {
    double v9 = *(double *)v4;
    double v10 = *(double *)(v4 + 8);
    *(void *)(v4 + 24) = *(void *)v4;
    *(double *)(v4 + 32) = v10;
    int v11 = *(_DWORD *)(v5 + 228);
    if (!*(_DWORD *)(a2 + 1872) && v11 <= 0)
    {
      if (*(_DWORD *)(v5 + 224) == 4 || result >= v9 * 4.0) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
    if (v11 < 1) {
      goto LABEL_24;
    }
    if (v11 == 2)
    {
      double v13 = 1.5;
    }
    else
    {
      if (v11 != 1)
      {
LABEL_21:
        if (result >= v9 * 4.0) {
          goto LABEL_24;
        }
LABEL_22:
        double v14 = 1.7;
        goto LABEL_23;
      }
      double v13 = 0.75;
    }
    if (result < v9 * v13)
    {
      double v14 = 90000.0;
LABEL_23:
      double v15 = v9 * v14;
      double result = v10 * v14;
      *(double *)uint64_t v4 = v15;
      *(double *)(v4 + 8) = result;
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_24:
  unsigned __int8 v16 = (double *)(a2 + 61736);
  if (!*(unsigned char *)(v4 + 80)) {
    goto LABEL_36;
  }
  double result = *(double *)(v4 + 112);
  *(double *)(v4 + 120) = result;
  int v17 = *(_DWORD *)(v4 + 92);
  if (v17 < 1) {
    goto LABEL_36;
  }
  if (v17 == 1)
  {
    double v18 = v39;
    double v19 = 0.75;
LABEL_30:
    if (v18 < result * v19)
    {
      double v20 = 90000.0;
LABEL_35:
      double result = result * v20;
      *(double *)(v4 + 112) = result;
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  if (v17 == 2)
  {
    double v18 = v39;
    double v19 = 1.5;
    goto LABEL_30;
  }
  double v18 = v39;
LABEL_33:
  if (v18 < result * 4.0)
  {
    double v20 = 1.7;
    goto LABEL_35;
  }
LABEL_36:
  if (!*(unsigned char *)(v5 + 72)) {
    goto LABEL_48;
  }
  double result = *(double *)(v5 + 104);
  *(double *)(v5 + 112) = result;
  int v21 = *(_DWORD *)(v5 + 84);
  if (v21 < 1) {
    goto LABEL_48;
  }
  if (v21 == 1)
  {
    double v22 = *v16;
    double v23 = 0.75;
LABEL_42:
    if (v22 < result * v23)
    {
      double v24 = 900.0;
LABEL_47:
      double result = result * v24;
      *(double *)(v5 + 104) = result;
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  if (v21 == 2)
  {
    double v22 = *v16;
    double v23 = 1.5;
    goto LABEL_42;
  }
  double v22 = *v16;
LABEL_45:
  if (v22 < result * 4.0)
  {
    double v24 = 1.7;
    goto LABEL_47;
  }
LABEL_48:
  if (!*(unsigned char *)(v5 + 144)) {
    goto LABEL_62;
  }
  double result = *(double *)(v5 + 176);
  *(double *)(v5 + 184) = result;
  int v25 = *(_DWORD *)(v5 + 156);
  if (v25 < 1) {
    goto LABEL_62;
  }
  if (v25 == 1)
  {
    double v26 = *(double *)(a2 + 61768);
    double v27 = 0.75;
  }
  else
  {
    double v26 = *(double *)(a2 + 61768);
    if (v25 != 2) {
      goto LABEL_59;
    }
    double v27 = 1.5;
  }
  if (v26 < result * v27)
  {
    if (*(_DWORD *)(a1 + 27136) || *(unsigned char *)(a2 + 21659) || *(unsigned char *)(a2 + 36563))
    {
      double v28 = 10000.0;
LABEL_61:
      double result = result * v28;
      *(double *)(v5 + 176) = result;
      goto LABEL_62;
    }
    double v33 = 4.0;
    if (v25 == 1) {
      double v33 = 1.0;
    }
    double result = -(v26 - result * v33);
    unsigned int v34 = 0;
    if (result > 0.0) {
      Apply_Q_Boost(result, 4u, 1u, (double *)(a1 + 352), &v34, &v35);
    }
    goto LABEL_62;
  }
LABEL_59:
  if (v26 < result * 4.0)
  {
    double v28 = 1.7;
    goto LABEL_61;
  }
LABEL_62:
  if (*(unsigned char *)v5)
  {
    double result = *(double *)(v5 + 32);
    *(double *)(v5 + 40) = result;
    int v29 = *(_DWORD *)(v5 + 12);
    if (v29 >= 1)
    {
      if (v29 == 1)
      {
        double v30 = *(double *)(a2 + 61776);
        double v31 = 0.75;
      }
      else
      {
        if (v29 != 2)
        {
          double v30 = *(double *)(a2 + 61776);
          goto LABEL_71;
        }
        double v30 = *(double *)(a2 + 61776);
        double v31 = 1.5;
      }
      if (v30 < result * v31)
      {
        double v32 = 900.0;
LABEL_73:
        double result = result * v32;
        *(double *)(v5 + 32) = result;
        return result;
      }
LABEL_71:
      if (v30 >= result * 4.0) {
        return result;
      }
      double v32 = 1.7;
      goto LABEL_73;
    }
  }
  return result;
}

const double *invtst(double *a1, double *a2, unsigned int a3, double a4, double a5, double a6, double *a7)
{
  double v8 = *a1;
  double result = a1 - 1;
  double v9 = a4 + v8 * *a2 * *a2;
  if (a3 >= 2)
  {
    if (a3 + 1 > 3) {
      uint64_t v10 = a3 + 1;
    }
    else {
      uint64_t v10 = 3;
    }
    uint64_t v11 = 1;
    int v12 = 2;
    uint64_t v13 = 2;
    unsigned int v14 = 1;
    do
    {
      double v15 = a2[v13 - 1];
      unsigned __int8 v16 = a2;
      int v17 = v12;
      uint64_t v18 = v11;
      do
      {
        double v19 = *v16++;
        double v15 = v15 + v19 * result[v17++];
        --v18;
      }
      while (v18);
      v14 += v13;
      double v9 = v9 + v15 * v15 * result[v14];
      v12 += v13;
      ++v11;
      ++v13;
    }
    while (v13 != v10);
  }
  if (a5 * a5 > v9 * a6) {
    double v9 = -v9;
  }
  *a7 = v9;
  return result;
}

uint64_t Partial_Reset(uint64_t result, double *a2, double *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (result)
  {
    unsigned int v5 = result;
    unsigned int v6 = 0;
    unsigned __int8 v7 = 0;
    double v15 = 0.0;
    double v13 = 0.0;
    do
    {
      uint64_t v8 = v7;
      double v9 = a2[v7];
      if (v9 > 0.0)
      {
        uint64_t v34 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        unsigned int v10 = v6 + 1;
        long long v18 = 0u;
        long long v19 = 0u;
        *((void *)&v18 + v7) = 0x3FF0000000000000;
        double result = ud2var((uint64_t)a3, v5, v6 + 1, 1u, &v15);
        double v11 = v15;
        double v12 = v15 * 100000000.0;
        if (v15 * 100000000.0 <= v9 * 1.01)
        {
          if (v9 - v15 > 0.0) {
            double result = (uint64_t)rnk1_core(a3, v10, v9 - v15, (double *)&v18, &v14);
          }
        }
        else
        {
          if (v12 > 0.0)
          {
            rnk1_core(a3, v10, v15 * 100000000.0, (double *)&v18, &v14);
            double v9 = a2[v8];
          }
          uint64_t v34 = 0;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          *((void *)&v18 + v8) = 0x3FF0000000000000;
          double result = umeas((BOOL)a3, v5, v9 * ((v11 + v12) / (v11 + v12 - v9)), (double *)&v18, v17, v16, &v13, -1.0);
        }
      }
      unsigned __int8 v7 = v8 + 1;
      unsigned int v6 = (v8 + 1);
    }
    while (v6 < v5);
  }
  return result;
}

void *XofSvcsIf::GetInstance(XofSvcsIf *this)
{
  {
    XofSvcsIf::XofSvcsIf((XofSvcsIf *)&XofSvcsIf::GetInstance(void)::instance);
  }
  return &XofSvcsIf::GetInstance(void)::instance;
}

void sub_263D27E3C(_Unwind_Exception *a1)
{
}

uint64_t XofSvcsIf::GetGloChanMap(XofSvcsIf *this, int a2, signed __int8 *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((a2 - 25) > 0xFFFFFFE7)
  {
    if (*((_DWORD *)this + 282) == 1)
    {
      if (!*((unsigned char *)this + 211) && !*((unsigned char *)this + 209) && !*((unsigned char *)this + 210))
      {
        if (g_LbsOsaTrace_Config < 2) {
          return 7;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Glonass data not available\n");
        goto LABEL_15;
      }
      uint64_t v6 = (a2 - 1);
      int v7 = *((unsigned __int8 *)this + 2 * v6 + 396);
      if (v7 != 99 && v7 == a2)
      {
        *a3 = *((unsigned char *)this + 2 * v6 + 397);
        return 1;
      }
    }
    if (g_LbsOsaTrace_Config < 2) {
      return 7;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Glonass channel number not available for SvId [%d]!\n");
LABEL_15:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return 7;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Glonass channel number requested for Invalid SvId [%d]!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GetGloChanMap", a2);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 9;
}

uint64_t XofSvcsIf::GetExtEphBlockNum(uint64_t a1, int a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = 7;
  if (a2 != 7 && *(_DWORD *)(a1 + 1128) == 1)
  {
    uint64_t v6 = a1 + 16;
    if (*(unsigned char *)(a1 + 16 + 48 * a2 + 3))
    {
      unint64_t v7 = *(_DWORD *)(a1 + 12) + 604800 * *(unsigned __int16 *)(a1 + 8);
      unint64_t v8 = HIDWORD(a3) + 604800 * (unsigned __int16)a3;
      BOOL v9 = v8 >= v7;
      unint64_t v10 = v8 - v7;
      if (v9 && *(unsigned char *)(v6 + 48 * a2 + 5))
      {
        unint64_t v11 = v10 / (3600 * (unint64_t)*(unsigned __int8 *)(v6 + 48 * a2 + 5));
        if (v11 <= 0x29 && v11 < *(unsigned __int8 *)(v6 + 48 * a2 + 4))
        {
          *a4 = v11 + 1;
          return 1;
        }
      }
      else
      {
        return 9;
      }
    }
  }
  return result;
}

uint64_t XofSvcsIf::Init(XofSvcsIf *this)
{
  XofSvcsIf::ClrOrbData(this);
  std::mutex::lock((std::mutex *)((char *)this + 1200));
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1000) = v3;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *((_DWORD *)this + 283) = 0;
  std::mutex::unlock((std::mutex *)((char *)this + 1200));
  return 1;
}

void XofSvcsIf::ClrOrbData(XofSvcsIf *this)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  uint64_t v65 = (std::mutex *)((char *)this + 1136);
  std::mutex::lock((std::mutex *)((char *)this + 1136));
  bzero(__src, 0x3E8uLL);
  for (uint64_t i = 0; i != 42; i += 6)
  {
    long long v3 = &__src[i];
    *((_WORD *)v3 + 10) = 0;
    *((_DWORD *)v3 + 4) = 0;
    *(_OWORD *)(v3 + 3) = 0uLL;
    *(_OWORD *)(v3 + 5) = 0uLL;
    v3[7] = 0;
  }
  __src[44] = 0;
  LODWORD(__src[45]) = 0;
  memset(&__src[46], 0, 28);
  uint64_t v4 = 396;
  do
  {
    *(_WORD *)((char *)__src + v4) = 25344;
    unsigned int v5 = (void *)((char *)__src + v4 + 2);
    v4 += 2;
  }
  while (v5 != (void *)((char *)&__src[55] + 4));
  for (uint64_t j = 0; j != 12; j += 2)
  {
    unint64_t v7 = (void *)((char *)&__src[j + 55] + 4);
    WORD1(__src[j + 57]) = 0;
    *unint64_t v7 = 0;
    *(void *)((char *)v7 + 5) = 0;
  }
  uint64_t v69 = 0;
  uint64_t v68 = 0;
  int v67 = &v68;
  uint64_t v72 = 0;
  uint64_t v71 = 0;
  uint64_t v70 = &v71;
  uint64_t v75 = 0;
  uint64_t v74 = 0;
  uint64_t v73 = &v74;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  int v76 = &v77;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  long long v79 = &v80;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  __int16 v82 = &v83;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  int v85 = &v86;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  int v88 = &v89;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  char v91 = &v92;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  __int16 v94 = &v95;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  int v97 = &v98;
  uint64_t v102 = 0;
  uint64_t v101 = 0;
  uint64_t v100 = &v101;
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  uint64_t v103 = &v104;
  uint64_t v108 = 0;
  uint64_t v107 = 0;
  long long v106 = &v107;
  uint64_t v111 = 0;
  uint64_t v110 = 0;
  long long v109 = &v110;
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  long long v112 = &v113;
  uint64_t v117 = 0;
  uint64_t v116 = 0;
  long long v115 = &v116;
  uint64_t v120 = 0;
  uint64_t v119 = 0;
  int v118 = &v119;
  uint64_t v123 = 0;
  uint64_t v122 = 0;
  long long v121 = &v122;
  memcpy(this, __src, 0x21CuLL);
  unint64_t v8 = (char *)this + 552;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(*((void **)this + 69));
  *((void *)this + 68) = v67;
  uint64_t v9 = v68;
  *((void *)this + 69) = v68;
  uint64_t v10 = v69;
  *((void *)this + 70) = v69;
  if (v10)
  {
    *(void *)(v9 + 16) = v8;
    int v67 = &v68;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
  }
  else
  {
    *((void *)this + 68) = v8;
  }
  unint64_t v11 = (char *)this + 576;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(*((void **)this + 72));
  *((void *)this + 71) = v70;
  uint64_t v12 = v71;
  *((void *)this + 72) = v71;
  uint64_t v13 = v72;
  *((void *)this + 73) = v72;
  if (v13)
  {
    *(void *)(v12 + 16) = v11;
    uint64_t v70 = &v71;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
  }
  else
  {
    *((void *)this + 71) = v11;
  }
  int v14 = (char *)this + 600;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(*((void **)this + 75));
  *((void *)this + 74) = v73;
  uint64_t v15 = v74;
  *((void *)this + 75) = v74;
  uint64_t v16 = v75;
  *((void *)this + 76) = v75;
  if (v16)
  {
    *(void *)(v15 + 16) = v14;
    uint64_t v73 = &v74;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    *((void *)this + 74) = v14;
  }
  int v17 = (char *)this + 624;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(*((void **)this + 78));
  *((void *)this + 77) = v76;
  uint64_t v18 = v77;
  *((void *)this + 78) = v77;
  uint64_t v19 = v78;
  *((void *)this + 79) = v78;
  if (v19)
  {
    *(void *)(v18 + 16) = v17;
    int v76 = &v77;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
  }
  else
  {
    *((void *)this + 77) = v17;
  }
  long long v20 = (char *)this + 648;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(*((void **)this + 81));
  *((void *)this + 80) = v79;
  uint64_t v21 = v80;
  *((void *)this + 81) = v80;
  uint64_t v22 = v81;
  *((void *)this + 82) = v81;
  if (v22)
  {
    *(void *)(v21 + 16) = v20;
    long long v79 = &v80;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
  }
  else
  {
    *((void *)this + 80) = v20;
  }
  long long v23 = (char *)this + 672;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(*((void **)this + 84));
  *((void *)this + 83) = v82;
  uint64_t v24 = v83;
  *((void *)this + 84) = v83;
  uint64_t v25 = v84;
  *((void *)this + 85) = v84;
  if (v25)
  {
    *(void *)(v24 + 16) = v23;
    __int16 v82 = &v83;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
  }
  else
  {
    *((void *)this + 83) = v23;
  }
  long long v26 = (char *)this + 696;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)this + 688, *((void **)this + 87));
  *((void *)this + 86) = v85;
  uint64_t v27 = v86;
  *((void *)this + 87) = v86;
  uint64_t v28 = v87;
  *((void *)this + 88) = v87;
  if (v28)
  {
    *(void *)(v27 + 16) = v26;
    int v85 = &v86;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
  }
  else
  {
    *((void *)this + 86) = v26;
  }
  long long v29 = (char *)this + 720;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(*((void **)this + 90));
  *((void *)this + 89) = v88;
  uint64_t v30 = v89;
  *((void *)this + 90) = v89;
  uint64_t v31 = v90;
  *((void *)this + 91) = v90;
  if (v31)
  {
    *(void *)(v30 + 16) = v29;
    int v88 = &v89;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
  }
  else
  {
    *((void *)this + 89) = v29;
  }
  long long v32 = (char *)this + 744;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)this + 736, *((void **)this + 93));
  *((void *)this + 92) = v91;
  uint64_t v33 = v92;
  *((void *)this + 93) = v92;
  uint64_t v34 = v93;
  *((void *)this + 94) = v93;
  if (v34)
  {
    *(void *)(v33 + 16) = v32;
    char v91 = &v92;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
  }
  else
  {
    *((void *)this + 92) = v32;
  }
  uint64_t v35 = (char *)this + 768;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)this + 760, *((void **)this + 96));
  *((void *)this + 95) = v94;
  uint64_t v36 = v95;
  *((void *)this + 96) = v95;
  uint64_t v37 = v96;
  *((void *)this + 97) = v96;
  if (v37)
  {
    *(void *)(v36 + 16) = v35;
    __int16 v94 = &v95;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
  }
  else
  {
    *((void *)this + 95) = v35;
  }
  int v38 = (char *)this + 792;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)this + 784, *((void **)this + 99));
  *((void *)this + 98) = v97;
  uint64_t v39 = v98;
  *((void *)this + 99) = v98;
  uint64_t v40 = v99;
  *((void *)this + 100) = v99;
  if (v40)
  {
    *(void *)(v39 + 16) = v38;
    int v97 = &v98;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
  }
  else
  {
    *((void *)this + 98) = v38;
  }
  double v41 = (char *)this + 816;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)this + 808, *((void **)this + 102));
  *((void *)this + 101) = v100;
  uint64_t v42 = v101;
  *((void *)this + 102) = v101;
  uint64_t v43 = v102;
  *((void *)this + 103) = v102;
  if (v43)
  {
    *(void *)(v42 + 16) = v41;
    uint64_t v100 = &v101;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
  }
  else
  {
    *((void *)this + 101) = v41;
  }
  char v44 = (char *)this + 840;
  std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy((uint64_t)this + 832, *((void **)this + 105));
  *((void *)this + 104) = v103;
  uint64_t v45 = v104;
  *((void *)this + 105) = v104;
  uint64_t v46 = v105;
  *((void *)this + 106) = v105;
  if (v46)
  {
    *(void *)(v45 + 16) = v44;
    uint64_t v103 = &v104;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
  }
  else
  {
    *((void *)this + 104) = v44;
  }
  int v47 = (char *)this + 864;
  std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::destroy(*((void **)this + 108));
  *((void *)this + 107) = v106;
  uint64_t v48 = v107;
  *((void *)this + 108) = v107;
  uint64_t v49 = v108;
  *((void *)this + 109) = v108;
  if (v49)
  {
    *(void *)(v48 + 16) = v47;
    long long v106 = &v107;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
  }
  else
  {
    *((void *)this + 107) = v47;
  }
  int v50 = (char *)this + 888;
  std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::destroy(*((void **)this + 111));
  *((void *)this + 110) = v109;
  uint64_t v51 = v110;
  *((void *)this + 111) = v110;
  uint64_t v52 = v111;
  *((void *)this + 112) = v111;
  if (v52)
  {
    *(void *)(v51 + 16) = v50;
    long long v109 = &v110;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
  }
  else
  {
    *((void *)this + 110) = v50;
  }
  BOOL v53 = (char *)this + 912;
  std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::destroy(*((void **)this + 114));
  *((void *)this + 113) = v112;
  uint64_t v54 = v113;
  *((void *)this + 114) = v113;
  uint64_t v55 = v114;
  *((void *)this + 115) = v114;
  if (v55)
  {
    *(void *)(v54 + 16) = v53;
    long long v112 = &v113;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
  }
  else
  {
    *((void *)this + 113) = v53;
  }
  char v56 = (char *)this + 936;
  std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::destroy(*((void **)this + 117));
  *((void *)this + 116) = v115;
  uint64_t v57 = v116;
  *((void *)this + 117) = v116;
  uint64_t v58 = v117;
  *((void *)this + 118) = v117;
  if (v58)
  {
    *(void *)(v57 + 16) = v56;
    long long v115 = &v116;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
  }
  else
  {
    *((void *)this + 116) = v56;
  }
  uint64_t v59 = (char *)this + 960;
  std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::destroy(*((void **)this + 120));
  *((void *)this + 119) = v118;
  uint64_t v60 = v119;
  *((void *)this + 120) = v119;
  uint64_t v61 = v120;
  *((void *)this + 121) = v120;
  if (v61)
  {
    *(void *)(v60 + 16) = v59;
    int v118 = &v119;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
  }
  else
  {
    *((void *)this + 119) = v59;
  }
  int v62 = (char *)this + 984;
  std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::destroy(*((void **)this + 123));
  *((void *)this + 122) = v121;
  uint64_t v63 = v122;
  *((void *)this + 123) = v122;
  uint64_t v64 = v123;
  *((void *)this + 124) = v123;
  if (v64)
  {
    *(void *)(v63 + 16) = v62;
    long long v121 = &v122;
    uint64_t v122 = 0;
    uint64_t v123 = 0;
  }
  else
  {
    *((void *)this + 122) = v62;
  }
  XofData::~XofData((XofData *)__src);
  *((_DWORD *)this + 282) = 0;
  std::mutex::unlock(v65);
}

uint64_t XofSvcsIf::InjectXofData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = 0;
  v257[2] = *MEMORY[0x263EF8340];
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v6 = (void *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  HIDWORD(__src[1]) = 0;
  __src[0] = 0;
  LOWORD(__src[1]) = 0;
  do
  {
    unint64_t v7 = &__src[v5];
    *((_WORD *)v7 + 10) = 0;
    *((_DWORD *)v7 + 4) = 0;
    *(_OWORD *)(v7 + 3) = 0uLL;
    *(_OWORD *)(v7 + 5) = 0uLL;
    v5 += 6;
    v7[7] = 0;
  }
  while (v5 != 42);
  __src[44] = 0;
  LODWORD(__src[45]) = 0;
  memset(&__src[46], 0, 28);
  uint64_t v8 = 396;
  do
  {
    *(_WORD *)((char *)__src + v8) = 25344;
    uint64_t v9 = (void *)((char *)__src + v8 + 2);
    v8 += 2;
  }
  while (v9 != (void *)((char *)&__src[55] + 4));
  for (uint64_t i = 0; i != 12; i += 2)
  {
    unint64_t v11 = (void *)((char *)&__src[i + 55] + 4);
    WORD1(__src[i + 57]) = 0;
    *unint64_t v11 = 0;
    *(void *)((char *)v11 + 5) = 0;
  }
  v221[1] = 0;
  v221[0] = 0;
  long long v220 = v221;
  v223[1] = 0;
  v223[0] = 0;
  int v222 = v223;
  v225[1] = 0;
  v225[0] = 0;
  uint64_t v224 = v225;
  v227[1] = 0;
  v227[0] = 0;
  int v226 = v227;
  v229[1] = 0;
  v229[0] = 0;
  unsigned int v228 = v229;
  v231[0] = 0;
  v231[1] = 0;
  uint64_t v230 = v231;
  v233[1] = 0;
  v233[0] = 0;
  uint64_t v232 = v233;
  v235[0] = 0;
  v235[1] = 0;
  int v234 = v235;
  v237[0] = 0;
  v237[1] = 0;
  int v236 = v237;
  v239[0] = 0;
  v239[1] = 0;
  unsigned int v238 = v239;
  v241[0] = 0;
  v241[1] = 0;
  __int16 v240 = v241;
  v243[1] = 0;
  v243[0] = 0;
  int v242 = v243;
  v245[1] = 0;
  v245[0] = 0;
  double v244 = v245;
  v247[1] = 0;
  v247[0] = 0;
  int v246 = v247;
  v249[1] = 0;
  v249[0] = 0;
  char v248 = v249;
  v251[1] = 0;
  v251[0] = 0;
  int v250 = v251;
  v253[1] = 0;
  v253[0] = 0;
  unsigned int v252 = v253;
  v255[1] = 0;
  v255[0] = 0;
  unsigned int v254 = v255;
  v257[1] = 0;
  v257[0] = 0;
  int64x2_t v256 = v257;
  int v215 = 0;
  uint64_t v12 = XofData::Decode((uint64_t)__src, a2, &v215);
  if (v12 == 1)
  {
    unsigned int v13 = LOWORD(__src[1]);
    void *v6 = HIDWORD(__src[1]) + 604800 * LOWORD(__src[1]);
    if (v13 >= a4)
    {
      uint64_t v16 = a1;
      std::mutex::lock((std::mutex *)(a1 + 1136));
      memcpy((void *)a1, __src, 0x21CuLL);
      if (__src != (void *)a1)
      {
        std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__tree_node<std::__value_type<unsigned char,XofGpsQzssAlmanac>,void *> *,long>>((uint64_t **)(a1 + 544), v220, v221);
        int v17 = (uint64_t **)(a1 + 568);
        uint64_t v18 = v222;
        if (*(void *)(a1 + 584)
          && ((uint64_t v19 = *(void **)(a1 + 568),
               long long v20 = (uint64_t **)(a1 + 576),
               *(void *)(a1 + 568) = a1 + 576,
               *(void *)(*(void *)(a1 + 576) + 16) = 0,
               *(void *)(a1 + 584) = 0,
               *(void *)(a1 + 576) = 0,
               v19[1])
            ? (uint64_t v21 = (void *)v19[1])
            : (uint64_t v21 = v19),
              v21))
        {
          uint64_t v22 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v21);
          if (v18 == v223)
          {
            uint64_t v31 = v223;
          }
          else
          {
            long long v23 = v21;
            do
            {
              uint64_t v21 = v22;
              unsigned int v24 = *((unsigned __int8 *)v18 + 28);
              *((unsigned char *)v23 + 28) = v24;
              long long v25 = *((_OWORD *)v18 + 2);
              long long v26 = *((_OWORD *)v18 + 3);
              *((_WORD *)v23 + 32) = *((_WORD *)v18 + 32);
              *((_OWORD *)v23 + 2) = v25;
              *((_OWORD *)v23 + 3) = v26;
              uint64_t v27 = *v20;
              uint64_t v28 = (uint64_t **)(a1 + 576);
              long long v29 = (uint64_t **)(a1 + 576);
              if (*v20)
              {
                do
                {
                  while (1)
                  {
                    uint64_t v28 = (uint64_t **)v27;
                    if (v24 >= *((unsigned __int8 *)v27 + 28)) {
                      break;
                    }
                    uint64_t v27 = (uint64_t *)*v27;
                    long long v29 = v28;
                    if (!*v28) {
                      goto LABEL_28;
                    }
                  }
                  uint64_t v27 = (uint64_t *)v27[1];
                }
                while (v27);
                long long v29 = v28 + 1;
              }
LABEL_28:
              std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(v17, (uint64_t)v28, v29, v23);
              if (v22) {
                uint64_t v22 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v22);
              }
              else {
                uint64_t v22 = 0;
              }
              uint64_t v30 = (void *)v18[1];
              if (v30)
              {
                do
                {
                  uint64_t v31 = v30;
                  uint64_t v30 = (void *)*v30;
                }
                while (v30);
              }
              else
              {
                do
                {
                  uint64_t v31 = (void *)v18[2];
                  BOOL v32 = *v31 == (void)v18;
                  uint64_t v18 = v31;
                }
                while (!v32);
              }
              if (!v21) {
                break;
              }
              long long v23 = v21;
              uint64_t v18 = v31;
            }
            while (v31 != v223);
          }
          std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v21);
          if (v22)
          {
            for (uint64_t j = (void *)v22[2]; j; uint64_t j = (void *)j[2])
              uint64_t v22 = j;
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v22);
          }
        }
        else
        {
          uint64_t v31 = v18;
        }
        if (v31 != v223)
        {
          uint64_t v34 = (uint64_t **)(a1 + 576);
          do
          {
            uint64_t v35 = (char *)operator new(0x48uLL);
            long long v36 = *(_OWORD *)((char *)v31 + 28);
            long long v37 = *(_OWORD *)((char *)v31 + 44);
            *(void *)(v35 + 60) = *(void *)((char *)v31 + 60);
            *(_OWORD *)(v35 + 44) = v37;
            *(_OWORD *)(v35 + 28) = v36;
            int v38 = *v34;
            uint64_t v39 = (uint64_t **)(a1 + 576);
            uint64_t v40 = (uint64_t **)(a1 + 576);
            if (*v34)
            {
              do
              {
                while (1)
                {
                  uint64_t v39 = (uint64_t **)v38;
                  if (v35[28] >= *((unsigned __int8 *)v38 + 28)) {
                    break;
                  }
                  int v38 = (uint64_t *)*v38;
                  uint64_t v40 = v39;
                  if (!*v39) {
                    goto LABEL_53;
                  }
                }
                int v38 = (uint64_t *)v38[1];
              }
              while (v38);
              uint64_t v40 = v39 + 1;
            }
LABEL_53:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(v17, (uint64_t)v39, v40, (uint64_t *)v35);
            double v41 = (void *)v31[1];
            if (v41)
            {
              do
              {
                uint64_t v42 = v41;
                double v41 = (void *)*v41;
              }
              while (v41);
            }
            else
            {
              do
              {
                uint64_t v42 = (void *)v31[2];
                BOOL v32 = *v42 == (void)v31;
                uint64_t v31 = v42;
              }
              while (!v32);
            }
            uint64_t v31 = v42;
          }
          while (v42 != v223);
        }
        uint64_t v16 = a1;
        uint64_t v43 = (uint64_t **)(a1 + 592);
        char v44 = v224;
        if (*(void *)(a1 + 608)
          && ((uint64_t v45 = *(void **)(a1 + 592),
               uint64_t v46 = (uint64_t **)(a1 + 600),
               *(void *)(a1 + 592) = a1 + 600,
               *(void *)(*(void *)(a1 + 600) + 16) = 0,
               *(void *)(a1 + 608) = 0,
               *(void *)(a1 + 600) = 0,
               v45[1])
            ? (int v47 = (void *)v45[1])
            : (int v47 = v45),
              v47))
        {
          uint64_t v48 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v47);
          if (v44 == v225)
          {
            char v56 = v225;
          }
          else
          {
            uint64_t v49 = v47;
            do
            {
              int v47 = v48;
              unsigned int v50 = *((unsigned __int8 *)v44 + 28);
              *((unsigned char *)v49 + 28) = v50;
              long long v51 = *((_OWORD *)v44 + 2);
              *(_OWORD *)((char *)v49 + 44) = *(_OWORD *)((char *)v44 + 44);
              *((_OWORD *)v49 + 2) = v51;
              uint64_t v52 = *v46;
              BOOL v53 = (uint64_t **)(a1 + 600);
              uint64_t v54 = (uint64_t **)(a1 + 600);
              if (*v46)
              {
                do
                {
                  while (1)
                  {
                    BOOL v53 = (uint64_t **)v52;
                    if (v50 >= *((unsigned __int8 *)v52 + 28)) {
                      break;
                    }
                    uint64_t v52 = (uint64_t *)*v52;
                    uint64_t v54 = v53;
                    if (!*v53) {
                      goto LABEL_72;
                    }
                  }
                  uint64_t v52 = (uint64_t *)v52[1];
                }
                while (v52);
                uint64_t v54 = v53 + 1;
              }
LABEL_72:
              std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(v43, (uint64_t)v53, v54, v49);
              if (v48) {
                uint64_t v48 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v48);
              }
              else {
                uint64_t v48 = 0;
              }
              uint64_t v55 = (void *)v44[1];
              if (v55)
              {
                do
                {
                  char v56 = v55;
                  uint64_t v55 = (void *)*v55;
                }
                while (v55);
              }
              else
              {
                do
                {
                  char v56 = (void *)v44[2];
                  BOOL v32 = *v56 == (void)v44;
                  char v44 = v56;
                }
                while (!v32);
              }
              if (!v47) {
                break;
              }
              uint64_t v49 = v47;
              char v44 = v56;
            }
            while (v56 != v225);
          }
          std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v47);
          if (v48)
          {
            for (uint64_t k = (void *)v48[2]; k; uint64_t k = (void *)k[2])
              uint64_t v48 = k;
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v48);
          }
        }
        else
        {
          char v56 = v44;
        }
        if (v56 != v225)
        {
          uint64_t v58 = (uint64_t **)(a1 + 600);
          do
          {
            uint64_t v59 = (char *)operator new(0x40uLL);
            long long v60 = *(_OWORD *)((char *)v56 + 28);
            *(_OWORD *)(v59 + 44) = *(_OWORD *)((char *)v56 + 44);
            *(_OWORD *)(v59 + 28) = v60;
            uint64_t v61 = *v58;
            int v62 = (uint64_t **)(a1 + 600);
            uint64_t v63 = (uint64_t **)(a1 + 600);
            if (*v58)
            {
              do
              {
                while (1)
                {
                  int v62 = (uint64_t **)v61;
                  if (v59[28] >= *((unsigned __int8 *)v61 + 28)) {
                    break;
                  }
                  uint64_t v61 = (uint64_t *)*v61;
                  uint64_t v63 = v62;
                  if (!*v62) {
                    goto LABEL_97;
                  }
                }
                uint64_t v61 = (uint64_t *)v61[1];
              }
              while (v61);
              uint64_t v63 = v62 + 1;
            }
LABEL_97:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(v43, (uint64_t)v62, v63, (uint64_t *)v59);
            uint64_t v64 = (void *)v56[1];
            if (v64)
            {
              do
              {
                uint64_t v65 = v64;
                uint64_t v64 = (void *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                uint64_t v65 = (void *)v56[2];
                BOOL v32 = *v65 == (void)v56;
                char v56 = v65;
              }
              while (!v32);
            }
            char v56 = v65;
          }
          while (v65 != v225);
        }
        std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__tree_node<std::__value_type<unsigned char,XofGpsQzssAlmanac>,void *> *,long>>((uint64_t **)(a1 + 616), v226, v227);
        int v66 = v228;
        if (*(void *)(a1 + 656)
          && ((int v67 = *(void **)(a1 + 640),
               uint64_t v68 = (uint64_t **)(a1 + 648),
               *(void *)(a1 + 640) = a1 + 648,
               *(void *)(*(void *)(a1 + 648) + 16) = 0,
               *(void *)(a1 + 656) = 0,
               *(void *)(a1 + 648) = 0,
               v67[1])
            ? (uint64_t v69 = (void *)v67[1])
            : (uint64_t v69 = v67),
              v69))
        {
          uint64_t v70 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v69);
          if (v66 == v229)
          {
            long long v79 = v229;
          }
          else
          {
            uint64_t v71 = v69;
            do
            {
              uint64_t v69 = v70;
              unsigned int v72 = *((unsigned __int8 *)v66 + 28);
              *((unsigned char *)v71 + 28) = v72;
              long long v73 = *((_OWORD *)v66 + 2);
              long long v74 = *((_OWORD *)v66 + 3);
              v71[8] = v66[8];
              *((_OWORD *)v71 + 2) = v73;
              *((_OWORD *)v71 + 3) = v74;
              uint64_t v75 = *v68;
              int v76 = (uint64_t **)(a1 + 648);
              uint64_t v77 = (uint64_t **)(a1 + 648);
              if (*v68)
              {
                do
                {
                  while (1)
                  {
                    int v76 = (uint64_t **)v75;
                    if (v72 >= *((unsigned __int8 *)v75 + 28)) {
                      break;
                    }
                    uint64_t v75 = (uint64_t *)*v75;
                    uint64_t v77 = v76;
                    if (!*v76) {
                      goto LABEL_116;
                    }
                  }
                  uint64_t v75 = (uint64_t *)v75[1];
                }
                while (v75);
                uint64_t v77 = v76 + 1;
              }
LABEL_116:
              std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 640), (uint64_t)v76, v77, v71);
              if (v70) {
                uint64_t v70 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v70);
              }
              else {
                uint64_t v70 = 0;
              }
              uint64_t v78 = (void *)v66[1];
              if (v78)
              {
                do
                {
                  long long v79 = v78;
                  uint64_t v78 = (void *)*v78;
                }
                while (v78);
              }
              else
              {
                do
                {
                  long long v79 = (void *)v66[2];
                  BOOL v32 = *v79 == (void)v66;
                  int v66 = v79;
                }
                while (!v32);
              }
              if (!v69) {
                break;
              }
              uint64_t v71 = v69;
              int v66 = v79;
            }
            while (v79 != v229);
          }
          std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v69);
          if (v70)
          {
            for (uint64_t m = (void *)v70[2]; m; uint64_t m = (void *)m[2])
              uint64_t v70 = m;
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v70);
          }
        }
        else
        {
          long long v79 = v66;
        }
        if (v79 != v229)
        {
          uint64_t v81 = (uint64_t **)(a1 + 648);
          do
          {
            __int16 v82 = (char *)operator new(0x48uLL);
            long long v83 = *(_OWORD *)((char *)v79 + 28);
            long long v84 = *(_OWORD *)((char *)v79 + 44);
            *(_OWORD *)(v82 + 56) = *(_OWORD *)(v79 + 7);
            *(_OWORD *)(v82 + 44) = v84;
            *(_OWORD *)(v82 + 28) = v83;
            int v85 = *v81;
            uint64_t v86 = (uint64_t **)(a1 + 648);
            uint64_t v87 = (uint64_t **)(a1 + 648);
            if (*v81)
            {
              do
              {
                while (1)
                {
                  uint64_t v86 = (uint64_t **)v85;
                  if (v82[28] >= *((unsigned __int8 *)v85 + 28)) {
                    break;
                  }
                  int v85 = (uint64_t *)*v85;
                  uint64_t v87 = v86;
                  if (!*v86) {
                    goto LABEL_141;
                  }
                }
                int v85 = (uint64_t *)v85[1];
              }
              while (v85);
              uint64_t v87 = v86 + 1;
            }
LABEL_141:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 640), (uint64_t)v86, v87, (uint64_t *)v82);
            int v88 = (void *)v79[1];
            if (v88)
            {
              do
              {
                uint64_t v89 = v88;
                int v88 = (void *)*v88;
              }
              while (v88);
            }
            else
            {
              do
              {
                uint64_t v89 = (void *)v79[2];
                BOOL v32 = *v89 == (void)v79;
                long long v79 = v89;
              }
              while (!v32);
            }
            long long v79 = v89;
          }
          while (v89 != v229);
        }
        uint64_t v90 = v230;
        if (*(void *)(a1 + 680)
          && ((char v91 = *(void **)(a1 + 664),
               uint64_t v92 = (uint64_t **)(a1 + 672),
               *(void *)(a1 + 664) = a1 + 672,
               *(void *)(*(void *)(a1 + 672) + 16) = 0,
               *(void *)(a1 + 680) = 0,
               *(void *)(a1 + 672) = 0,
               v91[1])
            ? (uint64_t v93 = (void *)v91[1])
            : (uint64_t v93 = v91),
              v93))
        {
          __int16 v94 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v93);
          uint64_t v95 = v231;
          if (v90 != v231)
          {
            uint64_t v96 = v93;
            do
            {
              uint64_t v93 = v94;
              unsigned int v97 = *((unsigned __int8 *)v90 + 28);
              *((unsigned char *)v96 + 28) = v97;
              long long v98 = *((_OWORD *)v90 + 2);
              long long v99 = *((_OWORD *)v90 + 3);
              *((_DWORD *)v96 + 16) = *((_DWORD *)v90 + 16);
              *((_OWORD *)v96 + 2) = v98;
              *((_OWORD *)v96 + 3) = v99;
              uint64_t v100 = *v92;
              uint64_t v101 = (uint64_t **)(a1 + 672);
              uint64_t v102 = (uint64_t **)(a1 + 672);
              if (*v92)
              {
                do
                {
                  while (1)
                  {
                    uint64_t v101 = (uint64_t **)v100;
                    if (v97 >= *((unsigned __int8 *)v100 + 28)) {
                      break;
                    }
                    uint64_t v100 = (uint64_t *)*v100;
                    uint64_t v102 = v101;
                    if (!*v101) {
                      goto LABEL_160;
                    }
                  }
                  uint64_t v100 = (uint64_t *)v100[1];
                }
                while (v100);
                uint64_t v102 = v101 + 1;
              }
LABEL_160:
              std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 664), (uint64_t)v101, v102, v96);
              if (v94) {
                __int16 v94 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v94);
              }
              else {
                __int16 v94 = 0;
              }
              uint64_t v103 = (void *)v90[1];
              if (v103)
              {
                do
                {
                  uint64_t v95 = v103;
                  uint64_t v103 = (void *)*v103;
                }
                while (v103);
              }
              else
              {
                do
                {
                  uint64_t v95 = (void *)v90[2];
                  BOOL v32 = *v95 == (void)v90;
                  uint64_t v90 = v95;
                }
                while (!v32);
              }
              if (!v93) {
                break;
              }
              uint64_t v96 = v93;
              uint64_t v90 = v95;
            }
            while (v95 != v231);
          }
          std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v93);
          if (v94)
          {
            for (uint64_t n = (void *)v94[2]; n; uint64_t n = (void *)n[2])
              __int16 v94 = n;
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v94);
          }
        }
        else
        {
          uint64_t v95 = v90;
        }
        if (v95 != v231)
        {
          uint64_t v105 = (uint64_t **)(a1 + 672);
          do
          {
            long long v106 = (char *)operator new(0x48uLL);
            long long v107 = *(_OWORD *)((char *)v95 + 28);
            long long v108 = *(_OWORD *)((char *)v95 + 44);
            *(void *)(v106 + 60) = *(void *)((char *)v95 + 60);
            *(_OWORD *)(v106 + 44) = v108;
            *(_OWORD *)(v106 + 28) = v107;
            long long v109 = *v105;
            uint64_t v110 = (uint64_t **)(a1 + 672);
            uint64_t v111 = (uint64_t **)(a1 + 672);
            if (*v105)
            {
              do
              {
                while (1)
                {
                  uint64_t v110 = (uint64_t **)v109;
                  if (v106[28] >= *((unsigned __int8 *)v109 + 28)) {
                    break;
                  }
                  long long v109 = (uint64_t *)*v109;
                  uint64_t v111 = v110;
                  if (!*v110) {
                    goto LABEL_183;
                  }
                }
                long long v109 = (uint64_t *)v109[1];
              }
              while (v109);
              uint64_t v111 = v110 + 1;
            }
LABEL_183:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 664), (uint64_t)v110, v111, (uint64_t *)v106);
            long long v112 = (void *)v95[1];
            if (v112)
            {
              do
              {
                uint64_t v113 = v112;
                long long v112 = (void *)*v112;
              }
              while (v112);
            }
            else
            {
              do
              {
                uint64_t v113 = (void *)v95[2];
                BOOL v32 = *v113 == (void)v95;
                uint64_t v95 = v113;
              }
              while (!v32);
            }
            uint64_t v95 = v113;
          }
          while (v113 != v231);
        }
        std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGpsQzssEphemeris>,void *> *,long>>((uint64_t **)(a1 + 688), v232, v233);
        uint64_t v114 = v234;
        if (*(void *)(a1 + 728)
          && ((long long v115 = *(void **)(a1 + 712),
               uint64_t v116 = (uint64_t **)(a1 + 720),
               *(void *)(a1 + 712) = a1 + 720,
               *(void *)(*(void *)(a1 + 720) + 16) = 0,
               *(void *)(a1 + 728) = 0,
               *(void *)(a1 + 720) = 0,
               v115[1])
            ? (uint64_t v117 = (void *)v115[1])
            : (uint64_t v117 = v115),
              v117))
        {
          int v118 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v117);
          uint64_t v119 = v235;
          if (v114 != v235)
          {
            uint64_t v120 = v117;
            do
            {
              uint64_t v117 = v118;
              unsigned int v121 = *((unsigned __int8 *)v114 + 28);
              *((unsigned char *)v120 + 28) = v121;
              long long v122 = *((_OWORD *)v114 + 2);
              long long v123 = *((_OWORD *)v114 + 3);
              *(_OWORD *)((char *)v120 + 59) = *(_OWORD *)((char *)v114 + 59);
              *((_OWORD *)v120 + 2) = v122;
              *((_OWORD *)v120 + 3) = v123;
              uint64_t v124 = *v116;
              long long v125 = (uint64_t **)(a1 + 720);
              BOOL v126 = (uint64_t **)(a1 + 720);
              if (*v116)
              {
                do
                {
                  while (1)
                  {
                    long long v125 = (uint64_t **)v124;
                    if (v121 >= *((unsigned __int8 *)v124 + 28)) {
                      break;
                    }
                    uint64_t v124 = (uint64_t *)*v124;
                    BOOL v126 = v125;
                    if (!*v125) {
                      goto LABEL_202;
                    }
                  }
                  uint64_t v124 = (uint64_t *)v124[1];
                }
                while (v124);
                BOOL v126 = v125 + 1;
              }
LABEL_202:
              std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 712), (uint64_t)v125, v126, v120);
              if (v118) {
                int v118 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v118);
              }
              else {
                int v118 = 0;
              }
              long long v127 = (void *)v114[1];
              if (v127)
              {
                do
                {
                  uint64_t v119 = v127;
                  long long v127 = (void *)*v127;
                }
                while (v127);
              }
              else
              {
                do
                {
                  uint64_t v119 = (void *)v114[2];
                  BOOL v32 = *v119 == (void)v114;
                  uint64_t v114 = v119;
                }
                while (!v32);
              }
              if (!v117) {
                break;
              }
              uint64_t v120 = v117;
              uint64_t v114 = v119;
            }
            while (v119 != v235);
          }
          std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v117);
          if (v118)
          {
            for (iuint64_t i = (void *)v118[2]; ii; iuint64_t i = (void *)ii[2])
              int v118 = ii;
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::destroy(v118);
          }
        }
        else
        {
          uint64_t v119 = v114;
        }
        if (v119 != v235)
        {
          uint64_t v129 = (uint64_t **)(a1 + 720);
          do
          {
            long long v130 = (char *)operator new(0x50uLL);
            long long v131 = *(_OWORD *)((char *)v119 + 28);
            long long v132 = *(_OWORD *)((char *)v119 + 44);
            *(_OWORD *)(v130 + 60) = *(_OWORD *)((char *)v119 + 60);
            *(_OWORD *)(v130 + 44) = v132;
            *(_OWORD *)(v130 + 28) = v131;
            long long v133 = *v129;
            __int16 v134 = (uint64_t **)(a1 + 720);
            BOOL v135 = (uint64_t **)(a1 + 720);
            if (*v129)
            {
              do
              {
                while (1)
                {
                  __int16 v134 = (uint64_t **)v133;
                  if (v130[28] >= *((unsigned __int8 *)v133 + 28)) {
                    break;
                  }
                  long long v133 = (uint64_t *)*v133;
                  BOOL v135 = v134;
                  if (!*v134) {
                    goto LABEL_225;
                  }
                }
                long long v133 = (uint64_t *)v133[1];
              }
              while (v133);
              BOOL v135 = v134 + 1;
            }
LABEL_225:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 712), (uint64_t)v134, v135, (uint64_t *)v130);
            double v136 = (void *)v119[1];
            if (v136)
            {
              do
              {
                long long v137 = v136;
                double v136 = (void *)*v136;
              }
              while (v136);
            }
            else
            {
              do
              {
                long long v137 = (void *)v119[2];
                BOOL v32 = *v137 == (void)v119;
                uint64_t v119 = v137;
              }
              while (!v32);
            }
            uint64_t v119 = v137;
          }
          while (v137 != v235);
        }
        std::__tree<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGalileoEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGalileoEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGalileoEphemeris>,void *> *,long>>((uint64_t **)(a1 + 736), v236, v237);
        std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGpsQzssEphemeris>,void *> *,long>>((uint64_t **)(a1 + 760), v238, v239);
        std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofBeidouEphemeris>,void *> *,long>>((uint64_t **)(a1 + 784), v240, v241);
        long long v138 = v242;
        if (*(void *)(a1 + 824))
        {
          long long v139 = *(void **)(a1 + 808);
          long long v140 = (uint64_t **)(a1 + 816);
          *(void *)(a1 + 808) = a1 + 816;
          *(void *)(*(void *)(a1 + 816) + 16) = 0;
          *(void *)(a1 + 824) = 0;
          *(void *)(a1 + 816) = 0;
          if (v139[1]) {
            long long v141 = (void *)v139[1];
          }
          else {
            long long v141 = v139;
          }
          if (v141)
          {
            long long v142 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v141);
            if (v138 == v243)
            {
              double v151 = v243;
            }
            else
            {
              long long v143 = v141;
              do
              {
                long long v141 = v142;
                unsigned int v144 = *((unsigned __int8 *)v138 + 28);
                *((unsigned char *)v143 + 28) = v144;
                long long v145 = *((_OWORD *)v138 + 2);
                long long v146 = *((_OWORD *)v138 + 3);
                *(void *)((char *)v143 + 63) = *(void *)((char *)v138 + 63);
                *((_OWORD *)v143 + 2) = v145;
                *((_OWORD *)v143 + 3) = v146;
                float64x2_t v147 = *v140;
                uint64_t v148 = (uint64_t **)(a1 + 816);
                float64x2_t v149 = (uint64_t **)(a1 + 816);
                if (*v140)
                {
                  do
                  {
                    while (1)
                    {
                      uint64_t v148 = (uint64_t **)v147;
                      if (v144 >= *((unsigned __int8 *)v147 + 28)) {
                        break;
                      }
                      float64x2_t v147 = (uint64_t *)*v147;
                      float64x2_t v149 = v148;
                      if (!*v148) {
                        goto LABEL_244;
                      }
                    }
                    float64x2_t v147 = (uint64_t *)v147[1];
                  }
                  while (v147);
                  float64x2_t v149 = v148 + 1;
                }
LABEL_244:
                std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 808), (uint64_t)v148, v149, v143);
                if (v142) {
                  long long v142 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v142);
                }
                else {
                  long long v142 = 0;
                }
                uint64_t v150 = (void *)v138[1];
                if (v150)
                {
                  do
                  {
                    double v151 = v150;
                    uint64_t v150 = (void *)*v150;
                  }
                  while (v150);
                }
                else
                {
                  do
                  {
                    double v151 = (void *)v138[2];
                    BOOL v32 = *v151 == (void)v138;
                    long long v138 = v151;
                  }
                  while (!v32);
                }
                if (!v141) {
                  break;
                }
                long long v143 = v141;
                long long v138 = v151;
              }
              while (v151 != v243);
            }
            std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(a1 + 808, v141);
            if (v142)
            {
              for (juint64_t j = (void *)v142[2]; jj; juint64_t j = (void *)jj[2])
                long long v142 = jj;
              std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::destroy(a1 + 808, v142);
            }
          }
          else
          {
            double v151 = v138;
          }
        }
        else
        {
          double v151 = v242;
        }
        if (v151 != v243)
        {
          double v153 = (uint64_t **)(a1 + 816);
          do
          {
            float64x2_t v154 = (char *)operator new(0x48uLL);
            long long v155 = *(_OWORD *)((char *)v151 + 28);
            long long v156 = *(_OWORD *)((char *)v151 + 44);
            *(_OWORD *)(v154 + 56) = *(_OWORD *)(v151 + 7);
            *(_OWORD *)(v154 + 44) = v156;
            *(_OWORD *)(v154 + 28) = v155;
            uint64_t v157 = *v153;
            int v158 = (uint64_t **)(a1 + 816);
            uint64_t v159 = (uint64_t **)(a1 + 816);
            if (*v153)
            {
              do
              {
                while (1)
                {
                  int v158 = (uint64_t **)v157;
                  if (v154[28] >= *((unsigned __int8 *)v157 + 28)) {
                    break;
                  }
                  uint64_t v157 = (uint64_t *)*v157;
                  uint64_t v159 = v158;
                  if (!*v158) {
                    goto LABEL_270;
                  }
                }
                uint64_t v157 = (uint64_t *)v157[1];
              }
              while (v157);
              uint64_t v159 = v158 + 1;
            }
LABEL_270:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 808), (uint64_t)v158, v159, (uint64_t *)v154);
            double v160 = (void *)v151[1];
            if (v160)
            {
              do
              {
                uint64_t v161 = v160;
                double v160 = (void *)*v160;
              }
              while (v160);
            }
            else
            {
              do
              {
                uint64_t v161 = (void *)v151[2];
                BOOL v32 = *v161 == (void)v151;
                double v151 = v161;
              }
              while (!v32);
            }
            double v151 = v161;
          }
          while (v161 != v243);
        }
        std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofNavicEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofNavicEphemeris>,void *> *,long>>((uint64_t **)(a1 + 832), v244, v245);
        std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__tree_node<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,void *> *,long>>((uint64_t **)(a1 + 856), v246, v247);
        std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__tree_node<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,void *> *,long>>((uint64_t **)(a1 + 880), v248, v249);
        uint64_t v162 = v250;
        if (*(void *)(a1 + 920))
        {
          uint64_t v163 = *(void **)(a1 + 904);
          float v164 = (uint64_t **)(a1 + 912);
          *(void *)(a1 + 904) = a1 + 912;
          *(void *)(*(void *)(a1 + 912) + 16) = 0;
          *(void *)(a1 + 912) = 0;
          *(void *)(a1 + 920) = 0;
          if (v163[1]) {
            float64x2_t v165 = (void *)v163[1];
          }
          else {
            float64x2_t v165 = v163;
          }
          *(void *)long long __str = a1 + 904;
          unsigned int v217 = v165;
          BOOL v218 = v165;
          if (v165)
          {
            unsigned int v217 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v165);
            if (v162 == v251)
            {
              double v170 = v251;
            }
            else
            {
              do
              {
                *((unsigned char *)v165 + 32) = *((unsigned char *)v162 + 32);
                if (v165 != v162)
                {
                  std::__tree<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGalileoEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGalileoEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofGalileoEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofGalileoEphemeris>,void *> *,long>>((uint64_t **)v165 + 5, (void *)v162[5], v162 + 6);
                  float64x2_t v165 = v218;
                }
                uint64_t v166 = *v164;
                double v167 = (uint64_t **)(a1 + 912);
                double v168 = (uint64_t **)(a1 + 912);
                if (*v164)
                {
                  do
                  {
                    while (1)
                    {
                      double v167 = (uint64_t **)v166;
                      if (*((unsigned __int8 *)v165 + 32) >= *((unsigned __int8 *)v166 + 32)) {
                        break;
                      }
                      uint64_t v166 = (uint64_t *)*v166;
                      double v168 = v167;
                      if (!*v167) {
                        goto LABEL_290;
                      }
                    }
                    uint64_t v166 = (uint64_t *)v166[1];
                  }
                  while (v166);
                  double v168 = v167 + 1;
                }
LABEL_290:
                std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 904), (uint64_t)v167, v168, v165);
                float64x2_t v165 = v217;
                BOOL v218 = v217;
                if (v217) {
                  unsigned int v217 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v217);
                }
                double v169 = (void *)v162[1];
                if (v169)
                {
                  do
                  {
                    double v170 = v169;
                    double v169 = (void *)*v169;
                  }
                  while (v169);
                }
                else
                {
                  do
                  {
                    double v170 = (void *)v162[2];
                    BOOL v32 = *v170 == (void)v162;
                    uint64_t v162 = v170;
                  }
                  while (!v32);
                }
                if (!v165) {
                  break;
                }
                uint64_t v162 = v170;
              }
              while (v170 != v251);
            }
          }
          else
          {
            double v170 = v162;
          }
          std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)__str);
          uint64_t v162 = v170;
        }
        if (v162 != v251)
        {
          double v171 = (uint64_t **)(a1 + 912);
          do
          {
            long long v172 = (uint64_t *)operator new(0x40uLL);
            *((unsigned char *)v172 + 32) = *((unsigned char *)v162 + 32);
            std::map<unsigned char,XofGalileoEphemeris>::map[abi:ne180100](v172 + 5, (uint64_t)(v162 + 5));
            double v173 = *v171;
            double v174 = (uint64_t **)(a1 + 912);
            double v175 = (uint64_t **)(a1 + 912);
            if (*v171)
            {
              do
              {
                while (1)
                {
                  double v174 = (uint64_t **)v173;
                  if (*((unsigned __int8 *)v172 + 32) >= *((unsigned __int8 *)v173 + 32)) {
                    break;
                  }
                  double v173 = (uint64_t *)*v173;
                  double v175 = v174;
                  if (!*v174) {
                    goto LABEL_312;
                  }
                }
                double v173 = (uint64_t *)v173[1];
              }
              while (v173);
              double v175 = v174 + 1;
            }
LABEL_312:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 904), (uint64_t)v174, v175, v172);
            uint64_t v176 = (void *)v162[1];
            if (v176)
            {
              do
              {
                int v177 = v176;
                uint64_t v176 = (void *)*v176;
              }
              while (v176);
            }
            else
            {
              do
              {
                int v177 = (void *)v162[2];
                BOOL v32 = *v177 == (void)v162;
                uint64_t v162 = v177;
              }
              while (!v32);
            }
            uint64_t v162 = v177;
          }
          while (v177 != v251);
        }
        std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__tree_node<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,void *> *,long>>((uint64_t **)(a1 + 928), v252, v253);
        uint64_t v178 = v254;
        if (*(void *)(a1 + 968))
        {
          long long v179 = *(void **)(a1 + 952);
          unsigned int v180 = (uint64_t **)(a1 + 960);
          *(void *)(a1 + 952) = a1 + 960;
          *(void *)(*(void *)(a1 + 960) + 16) = 0;
          *(void *)(a1 + 960) = 0;
          *(void *)(a1 + 968) = 0;
          if (v179[1]) {
            unsigned int v181 = (void *)v179[1];
          }
          else {
            unsigned int v181 = v179;
          }
          *(void *)long long __str = a1 + 952;
          unsigned int v217 = v181;
          BOOL v218 = v181;
          if (v181)
          {
            unsigned int v217 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v181);
            if (v178 == v255)
            {
              int v186 = v255;
            }
            else
            {
              do
              {
                *((unsigned char *)v181 + 32) = *((unsigned char *)v178 + 32);
                if (v181 != v178)
                {
                  std::__tree<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofBeidouEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofBeidouEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofBeidouEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofBeidouEphemeris>,void *> *,long>>((uint64_t **)v181 + 5, (void *)v178[5], v178 + 6);
                  unsigned int v181 = v218;
                }
                BOOL v182 = *v180;
                long long v183 = (uint64_t **)(a1 + 960);
                uint64_t v184 = (uint64_t **)(a1 + 960);
                if (*v180)
                {
                  do
                  {
                    while (1)
                    {
                      long long v183 = (uint64_t **)v182;
                      if (*((unsigned __int8 *)v181 + 32) >= *((unsigned __int8 *)v182 + 32)) {
                        break;
                      }
                      BOOL v182 = (uint64_t *)*v182;
                      uint64_t v184 = v183;
                      if (!*v183) {
                        goto LABEL_332;
                      }
                    }
                    BOOL v182 = (uint64_t *)v182[1];
                  }
                  while (v182);
                  uint64_t v184 = v183 + 1;
                }
LABEL_332:
                std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 952), (uint64_t)v183, v184, v181);
                unsigned int v181 = v217;
                BOOL v218 = v217;
                if (v217) {
                  unsigned int v217 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v217);
                }
                uint64_t v185 = (void *)v178[1];
                if (v185)
                {
                  do
                  {
                    int v186 = v185;
                    uint64_t v185 = (void *)*v185;
                  }
                  while (v185);
                }
                else
                {
                  do
                  {
                    int v186 = (void *)v178[2];
                    BOOL v32 = *v186 == (void)v178;
                    uint64_t v178 = v186;
                  }
                  while (!v32);
                }
                if (!v181) {
                  break;
                }
                uint64_t v178 = v186;
              }
              while (v186 != v255);
            }
          }
          else
          {
            int v186 = v178;
          }
          std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)__str);
          uint64_t v178 = v186;
        }
        if (v178 != v255)
        {
          uint64_t v187 = (uint64_t **)(a1 + 960);
          do
          {
            long long v188 = (uint64_t *)operator new(0x40uLL);
            *((unsigned char *)v188 + 32) = *((unsigned char *)v178 + 32);
            std::map<unsigned char,XofBeidouEphemeris>::map[abi:ne180100](v188 + 5, (uint64_t)(v178 + 5));
            uint64_t v189 = *v187;
            char v190 = (uint64_t **)(a1 + 960);
            unsigned __int8 v191 = (uint64_t **)(a1 + 960);
            if (*v187)
            {
              do
              {
                while (1)
                {
                  char v190 = (uint64_t **)v189;
                  if (*((unsigned __int8 *)v188 + 32) >= *((unsigned __int8 *)v189 + 32)) {
                    break;
                  }
                  uint64_t v189 = (uint64_t *)*v189;
                  unsigned __int8 v191 = v190;
                  if (!*v190) {
                    goto LABEL_354;
                  }
                }
                uint64_t v189 = (uint64_t *)v189[1];
              }
              while (v189);
              unsigned __int8 v191 = v190 + 1;
            }
LABEL_354:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 952), (uint64_t)v190, v191, v188);
            unsigned __int8 v192 = (void *)v178[1];
            if (v192)
            {
              do
              {
                unsigned int v193 = v192;
                unsigned __int8 v192 = (void *)*v192;
              }
              while (v192);
            }
            else
            {
              do
              {
                unsigned int v193 = (void *)v178[2];
                BOOL v32 = *v193 == (void)v178;
                uint64_t v178 = v193;
              }
              while (!v32);
            }
            uint64_t v178 = v193;
          }
          while (v193 != v255);
        }
        uint64_t v194 = v256;
        if (*(void *)(a1 + 992))
        {
          uint64_t v195 = *(void **)(a1 + 976);
          int v196 = (uint64_t **)(a1 + 984);
          *(void *)(a1 + 976) = a1 + 984;
          *(void *)(*(void *)(a1 + 984) + 16) = 0;
          *(void *)(a1 + 984) = 0;
          *(void *)(a1 + 992) = 0;
          if (v195[1]) {
            int v197 = (void *)v195[1];
          }
          else {
            int v197 = v195;
          }
          *(void *)long long __str = a1 + 976;
          unsigned int v217 = v197;
          BOOL v218 = v197;
          if (v197)
          {
            unsigned int v217 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v197);
            if (v194 == v257)
            {
              int v202 = v257;
            }
            else
            {
              do
              {
                *((unsigned char *)v197 + 32) = *((unsigned char *)v194 + 32);
                if (v197 != v194)
                {
                  std::__tree<std::__value_type<unsigned char,XofNavicEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofNavicEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofNavicEphemeris>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned char,XofNavicEphemeris>,std::__tree_node<std::__value_type<unsigned char,XofNavicEphemeris>,void *> *,long>>((uint64_t **)v197 + 5, (void *)v194[5], v194 + 6);
                  int v197 = v218;
                }
                int v198 = *v196;
                uint64_t v199 = (uint64_t **)(a1 + 984);
                unint64_t v200 = (uint64_t **)(a1 + 984);
                if (*v196)
                {
                  do
                  {
                    while (1)
                    {
                      uint64_t v199 = (uint64_t **)v198;
                      if (*((unsigned __int8 *)v197 + 32) >= *((unsigned __int8 *)v198 + 32)) {
                        break;
                      }
                      int v198 = (uint64_t *)*v198;
                      unint64_t v200 = v199;
                      if (!*v199) {
                        goto LABEL_374;
                      }
                    }
                    int v198 = (uint64_t *)v198[1];
                  }
                  while (v198);
                  unint64_t v200 = v199 + 1;
                }
LABEL_374:
                std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 976), (uint64_t)v199, v200, v197);
                int v197 = v217;
                BOOL v218 = v217;
                if (v217) {
                  unsigned int v217 = std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::_DetachedTreeCache::__detach_next((uint64_t)v217);
                }
                uint64_t v201 = (void *)v194[1];
                if (v201)
                {
                  do
                  {
                    int v202 = v201;
                    uint64_t v201 = (void *)*v201;
                  }
                  while (v201);
                }
                else
                {
                  do
                  {
                    int v202 = (void *)v194[2];
                    BOOL v32 = *v202 == (void)v194;
                    uint64_t v194 = v202;
                  }
                  while (!v32);
                }
                if (!v197) {
                  break;
                }
                uint64_t v194 = v202;
              }
              while (v202 != v257);
            }
          }
          else
          {
            int v202 = v194;
          }
          std::__tree<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<unsigned char,XofGpsQzssEphemeris>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)__str);
          uint64_t v194 = v202;
        }
        if (v194 != v257)
        {
          uint64_t v203 = (uint64_t **)(a1 + 984);
          do
          {
            int v204 = (uint64_t *)operator new(0x40uLL);
            *((unsigned char *)v204 + 32) = *((unsigned char *)v194 + 32);
            std::map<unsigned char,XofNavicEphemeris>::map[abi:ne180100](v204 + 5, (uint64_t)(v194 + 5));
            unsigned __int8 v205 = *v203;
            int v206 = (uint64_t **)(a1 + 984);
            int v207 = (uint64_t **)(a1 + 984);
            if (*v203)
            {
              do
              {
                while (1)
                {
                  int v206 = (uint64_t **)v205;
                  if (*((unsigned __int8 *)v204 + 32) >= *((unsigned __int8 *)v205 + 32)) {
                    break;
                  }
                  unsigned __int8 v205 = (uint64_t *)*v205;
                  int v207 = v206;
                  if (!*v206) {
                    goto LABEL_396;
                  }
                }
                unsigned __int8 v205 = (uint64_t *)v205[1];
              }
              while (v205);
              int v207 = v206 + 1;
            }
LABEL_396:
            std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at((uint64_t **)(a1 + 976), (uint64_t)v206, v207, v204);
            uint64_t v208 = (void *)v194[1];
            if (v208)
            {
              do
              {
                uint64_t v209 = v208;
                uint64_t v208 = (void *)*v208;
              }
              while (v208);
            }
            else
            {
              do
              {
                uint64_t v209 = (void *)v194[2];
                BOOL v32 = *v209 == (void)v194;
                uint64_t v194 = v209;
              }
              while (!v32);
            }
            uint64_t v194 = v209;
          }
          while (v209 != v257);
        }
      }
      *(_DWORD *)(v16 + 1128) = 1;
      *(unsigned char *)a3 = 1;
      if (BYTE4(__src[2]) | BYTE2(__src[2]))
      {
        unint64_t v210 = *(unsigned __int8 *)(v16 + 21) * (unint64_t)BYTE4(__src[2]);
        if (v210 <= 4) {
          LODWORD(v210) = 4;
        }
        *(void *)(a3 + 16) = *(void *)(a3 + 8) + 3600 * v210;
      }
      else if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v211 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Ephemeris data duration is 0!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v211), "GNC", 87, "InjectXofData");
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      std::mutex::unlock((std::mutex *)(a1 + 1136));
      uint64_t v12 = 1;
    }
    else
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v14 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: XOF Week Number before earliest legal Week [%d < %d]!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "InjectXofData", LOWORD(__src[1]), a4);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      *(unsigned char *)a3 = 0;
      uint64_t v12 = 9;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v15 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: XOF parsing failed!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 69, "InjectXofData");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  XofData::~XofData((XofData *)__src);
  return v12;
}

void sub_263D2A0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17)
{
}

uint64_t XofSvcsIf::InjectRtiData(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (*a2 == a2[1])
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid param!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 69, "InjectRtiData");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 9;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v8 = (void *)(a3 + 8);
    *(void *)(a3 + 16) = 0;
    RtiDataCodec::RtiDataCodec((RtiDataCodec *)v27);
    int v26 = 0;
    uint64_t v9 = RtiDataCodec::Decode((uint64_t)v27, a2, &v26);
    if (v9 == 1)
    {
      void *v8 = *(_DWORD *)(a1 + 1004) + 604800 * *(unsigned __int16 *)(a1 + 1002);
      if (v31 >= a4)
      {
        std::mutex::lock((std::mutex *)(a1 + 1200));
        __int16 v13 = v28;
        unsigned __int16 v14 = v31;
        int v15 = v34;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v45 = 0u;
        if (v38 != v37)
        {
          unint64_t v16 = (v38 - v37) / 112;
          if (v16 <= 1) {
            unint64_t v16 = 1;
          }
          int v17 = (void *)&v45 + 1;
          uint64_t v18 = (uint64_t *)(v37 + 80);
          do
          {
            uint64_t v19 = *(v18 - 7);
            uint64_t v20 = *v18;
            v18 += 14;
            *(v17 - 1) = v19;
            *int v17 = v20;
            v17 += 2;
            --v16;
          }
          while (v16);
        }
        *(_OWORD *)&__str[84] = v50;
        *(_OWORD *)&__str[100] = v51;
        *(_OWORD *)&char __str[4] = v45;
        *(_OWORD *)&__str[20] = v46;
        *(_OWORD *)&__str[52] = v48;
        *(_OWORD *)&__str[68] = v49;
        *(_OWORD *)&__str[36] = v47;
        int v21 = v41;
        *(_WORD *)(a1 + 1000) = v13;
        *(_WORD *)(a1 + 1002) = v14;
        *(_DWORD *)(a1 + 1004) = v15;
        *(_DWORD *)(a1 + 1008) = v21;
        long long v22 = *(_OWORD *)&__str[80];
        *(_OWORD *)(a1 + 1076) = *(_OWORD *)&__str[64];
        *(_OWORD *)(a1 + 1092) = v22;
        *(_OWORD *)(a1 + 1108) = *(_OWORD *)&__str[96];
        *(_DWORD *)(a1 + 1124) = *(_DWORD *)&__str[112];
        long long v23 = *(_OWORD *)&__str[16];
        *(_OWORD *)(a1 + 1012) = *(_OWORD *)__str;
        *(_OWORD *)(a1 + 1028) = v23;
        long long v24 = *(_OWORD *)&__str[48];
        *(_OWORD *)(a1 + 1044) = *(_OWORD *)&__str[32];
        *(_OWORD *)(a1 + 1060) = v24;
        uint64_t v9 = 1;
        *(_DWORD *)(a1 + 1132) = 1;
        *(unsigned char *)a3 = 1;
        std::mutex::unlock((std::mutex *)(a1 + 1200));
      }
      else
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RTI Week Number before earliest legal Week [%d < %d]!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "InjectRtiData", v31, a4);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
        *(unsigned char *)a3 = 0;
        uint64_t v9 = 9;
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RTI parsing failed!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "InjectRtiData");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    *(void *)long long __str = &v37;
    std::vector<RtiPayloadCodec::Payload>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (v36 < 0) {
      operator delete(__p);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
  }
  return v9;
}

void sub_263D2A54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  RtiDataCodec::~RtiDataCodec((void **)va);
  _Unwind_Resume(a1);
}

void RtiDataCodec::~RtiDataCodec(void **this)
{
  v2[1] = *(void ***)MEMORY[0x263EF8340];
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  v2[0] = this + 13;
  std::vector<RtiPayloadCodec::Payload>::__destroy_vector::operator()[abi:ne180100](v2);
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t XofSvcsIf::GetIonoModel(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  if (*(_DWORD *)(a1 + 1128) == 1)
  {
    *a2 = *(void *)(a1 + 368);
    uint64_t v5 = 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: IONO Model not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GetIonoModel");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    uint64_t v5 = 7;
  }
  std::mutex::unlock(v4);
  return v5;
}

void sub_263D2A73C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetGpsUTCModel(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  if (*(_DWORD *)(a1 + 1128) == 1)
  {
    long long v5 = *(_OWORD *)(a1 + 376);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 392);
    *(_OWORD *)a2 = v5;
    uint64_t v6 = 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: UTC Model not available!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GetGpsUTCModel");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    uint64_t v6 = 7;
  }
  std::mutex::unlock(v4);
  return v6;
}

void sub_263D2A86C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetGloChannelMap(XofSvcsIf *this, int a2, signed __int8 *a3)
{
  uint64_t v6 = (std::mutex *)((char *)this + 1136);
  std::mutex::lock((std::mutex *)((char *)this + 1136));
  uint64_t GloChanMap = XofSvcsIf::GetGloChanMap(this, a2, a3);
  std::mutex::unlock(v6);
  return GloChanMap;
}

void sub_263D2A910(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetTimeModel(uint64_t a1, signed int a2, _OWORD *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  if (a2 != 7 && a2)
  {
    if (*(_DWORD *)(a1 + 1128) == 1)
    {
      uint64_t v8 = a1 + 16;
      if (!*(unsigned char *)(a1 + 16 + 48 * a2 + 3) && !*(unsigned char *)(v8 + 48 * a2 + 2) && !*(unsigned char *)(v8 + 48 * a2 + 1))
      {
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_32;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v20 = mach_continuous_time();
        double v21 = *(double *)&g_MacClockTicksToMsRelation;
        GetStringConstellId(__p, a2);
        if (v27 >= 0) {
          long long v22 = __p;
        }
        else {
          long long v22 = (void **)__p[0];
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time model data not available for constellation [%s]!\n", (unint64_t)(v21 * (double)v20), "GNC", 87, "GetTimeModel", (const char *)v22);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_31;
      }
      uint64_t v9 = a1 + 16 * (a2 - 1);
      uint64_t v10 = (_OWORD *)(v9 + 444);
      if (*(_DWORD *)(v9 + 448)
        || *(_DWORD *)(v9 + 452)
        || (uint64_t v11 = a1 + 16 * (a2 - 1), *(unsigned char *)(v11 + 456))
        || *(_WORD *)(v11 + 446)
        || *(_WORD *)v10)
      {
        *a3 = *v10;
        uint64_t v12 = 1;
        goto LABEL_33;
      }
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v23 = mach_continuous_time();
        double v24 = *(double *)&g_MacClockTicksToMsRelation;
        GetStringConstellId(__p, a2);
        if (v27 >= 0) {
          long long v25 = __p;
        }
        else {
          long long v25 = (void **)__p[0];
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time model data Invalid for constellation [%s]!\n", (unint64_t)(v24 * (double)v23), "GNC", 87, "GetTimeModel", (const char *)v25);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
LABEL_31:
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v13 = mach_continuous_time();
      if ((a2 - 1) > 6) {
        unsigned __int16 v14 = "   ";
      }
      else {
        unsigned __int16 v14 = off_2655E70D0[a2 - 1];
      }
      double v17 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      if (v27 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time model data not available for constellation [%s]!\n", (unint64_t)(v17 * (double)v13), "GNC", 87, "GetTimeModel", (const char *)v18);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_31;
    }
LABEL_32:
    uint64_t v12 = 7;
    goto LABEL_33;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    double v15 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, off_2655E7108[a2]);
    if (v27 >= 0) {
      unint64_t v16 = __p;
    }
    else {
      unint64_t v16 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid input. Constellation [%s]!\n", (unint64_t)(v15 * (double)v7), "GNC", 87, "GetTimeModel", (const char *)v16);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  uint64_t v12 = 9;
LABEL_33:
  std::mutex::unlock(v6);
  return v12;
}

void sub_263D2AD58(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *GetStringConstellId(void *a1, unsigned int a2)
{
  if (a2 > 7) {
    uint64_t v2 = "   ";
  }
  else {
    uint64_t v2 = off_2655E7108[a2];
  }

  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

uint64_t XofSvcsIf::GetGpsAlmData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  Aluint64_t m = XofSvcsIf::GetAlmData<XofGpsQzssAlmanac>(a1, 0, (void *)(a1 + 544), a2);
  std::mutex::unlock(v4);
  return Alm;
}

void sub_263D2AE90(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetAlmData<XofGpsQzssAlmanac>(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(_OWORD **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  if (*(_DWORD *)(a1 + 1128) != 1 || !*(unsigned char *)(a1 + 48 * a2 + 17)) {
    return 7;
  }
  if (!a3[2]) {
    return 10;
  }
  long long v5 = a3 + 1;
  uint64_t v6 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      uint64_t v8 = v6 + 4;
      unint64_t v9 = *(void *)(a4 + 16);
      if ((unint64_t)v4 >= v9)
      {
        uint64_t v11 = *(_OWORD **)a4;
        uint64_t v12 = ((uint64_t)v4 - *(void *)a4) >> 5;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59) {
          std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 4 > v13) {
          unint64_t v13 = v14 >> 4;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          if (v15 >> 59) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v16 = (char *)operator new(32 * v15);
        }
        else
        {
          unint64_t v16 = 0;
        }
        long long v17 = *((_OWORD *)v6 + 3);
        uint64_t v18 = &v16[32 * v12];
        *(_OWORD *)uint64_t v18 = *v8;
        *((_OWORD *)v18 + 1) = v17;
        if (v4 == v11)
        {
          double v21 = v4;
          uint64_t v19 = &v16[32 * v12];
        }
        else
        {
          uint64_t v19 = &v16[32 * v12];
          do
          {
            long long v20 = *(v4 - 1);
            *((_OWORD *)v19 - 2) = *(v4 - 2);
            *((_OWORD *)v19 - 1) = v20;
            v19 -= 32;
            v4 -= 2;
          }
          while (v4 != v11);
          double v21 = *(_OWORD **)a4;
        }
        uint64_t v4 = v18 + 32;
        *(void *)a4 = v19;
        *(void *)(a4 + 8) = v18 + 32;
        *(void *)(a4 + 16) = &v16[32 * v15];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        long long v10 = *((_OWORD *)v6 + 3);
        *uint64_t v4 = *v8;
        v4[1] = v10;
        v4 += 2;
      }
      *(void *)(a4 + 8) = v4;
      long long v22 = (void *)v6[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          long long v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v6[2];
          BOOL v24 = *v23 == (void)v6;
          uint64_t v6 = v23;
        }
        while (!v24);
      }
      uint64_t v6 = v23;
    }
    while (v23 != v5);
  }
  return 1;
}

uint64_t XofSvcsIf::GetQzssAlmData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  Aluint64_t m = XofSvcsIf::GetAlmData<XofGpsQzssAlmanac>(a1, 2, (void *)(a1 + 616), a2);
  std::mutex::unlock(v4);
  return Alm;
}

void sub_263D2B108(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetGloAlmData(uint64_t a1, char **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  Aluint64_t m = XofSvcsIf::GetAlmData<XofGlonassAlmanac>(a1, 4, (void *)(a1 + 568), a2);
  std::mutex::unlock(v4);
  return Alm;
}

void sub_263D2B1AC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetAlmData<XofGlonassAlmanac>(uint64_t a1, int a2, void *a3, char **a4)
{
  uint64_t v4 = *a4;
  a4[1] = *a4;
  if (*(_DWORD *)(a1 + 1128) != 1 || !*(unsigned char *)(a1 + 48 * a2 + 17)) {
    return 7;
  }
  if (!a3[2]) {
    return 10;
  }
  long long v5 = a3 + 1;
  uint64_t v6 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      uint64_t v8 = (long long *)(v6 + 4);
      unint64_t v9 = (unint64_t)a4[2];
      if ((unint64_t)v4 >= v9)
      {
        uint64_t v12 = *a4;
        unint64_t v13 = 0x8E38E38E38E38E39 * (((char *)v4 - *a4) >> 2);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0x71C71C71C71C71CLL) {
          std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - (void)v12) >> 2);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x38E38E38E38E38ELL) {
          unint64_t v16 = 0x71C71C71C71C71CLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 > 0x71C71C71C71C71CLL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v17 = (char *)operator new(36 * v16);
        }
        else
        {
          long long v17 = 0;
        }
        uint64_t v18 = &v17[36 * v13];
        long long v19 = *v8;
        long long v20 = *((_OWORD *)v6 + 3);
        *((_DWORD *)v18 + 8) = *((_DWORD *)v6 + 16);
        *(_OWORD *)uint64_t v18 = v19;
        *((_OWORD *)v18 + 1) = v20;
        if (v4 == (_OWORD *)v12)
        {
          BOOL v24 = (char *)v4;
          double v21 = &v17[36 * v13];
        }
        else
        {
          double v21 = &v17[36 * v13];
          do
          {
            long long v22 = *(_OWORD *)((char *)v4 - 36);
            long long v23 = *(_OWORD *)((char *)v4 - 20);
            *((_WORD *)v21 - 2) = *((_WORD *)v4 - 2);
            *(_OWORD *)(v21 - 20) = v23;
            *(_OWORD *)(v21 - 36) = v22;
            v21 -= 36;
            uint64_t v4 = (_OWORD *)((char *)v4 - 36);
          }
          while (v4 != (_OWORD *)v12);
          BOOL v24 = *a4;
        }
        uint64_t v4 = v18 + 36;
        *a4 = v21;
        a4[1] = v18 + 36;
        a4[2] = &v17[36 * v16];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        long long v10 = *v8;
        long long v11 = *((_OWORD *)v6 + 3);
        *((_DWORD *)v4 + 8) = *((_DWORD *)v6 + 16);
        *uint64_t v4 = v10;
        v4[1] = v11;
        uint64_t v4 = (_OWORD *)((char *)v4 + 36);
      }
      a4[1] = (char *)v4;
      long long v25 = (void *)v6[1];
      if (v25)
      {
        do
        {
          int v26 = v25;
          long long v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          int v26 = (void *)v6[2];
          BOOL v27 = *v26 == (void)v6;
          uint64_t v6 = v26;
        }
        while (!v27);
      }
      uint64_t v6 = v26;
    }
    while (v26 != v5);
  }
  return 1;
}

uint64_t XofSvcsIf::GetGalAlmData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  Aluint64_t m = XofSvcsIf::GetAlmData<XofGalileoAlmanac>(a1, 3, (void *)(a1 + 592), a2);
  std::mutex::unlock(v4);
  return Alm;
}

void sub_263D2B498(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetAlmData<XofGalileoAlmanac>(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(_OWORD **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  if (*(_DWORD *)(a1 + 1128) != 1 || !*(unsigned char *)(a1 + 48 * a2 + 17)) {
    return 7;
  }
  if (!a3[2]) {
    return 10;
  }
  long long v5 = a3 + 1;
  uint64_t v6 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      uint64_t v8 = (long long *)(v6 + 4);
      unint64_t v9 = *(void *)(a4 + 16);
      if ((unint64_t)v4 >= v9)
      {
        long long v11 = *(_OWORD **)a4;
        uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v4 - *(void *)a4) >> 2);
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) > 0x924924924924924) {
          std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v11) >> 2);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x492492492492492) {
          unint64_t v15 = 0x924924924924924;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          if (v15 > 0x924924924924924) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v16 = (char *)operator new(28 * v15);
        }
        else
        {
          unint64_t v16 = 0;
        }
        long long v17 = *v8;
        uint64_t v18 = &v16[28 * v12];
        *(_OWORD *)(v18 + 12) = *(_OWORD *)((char *)v6 + 44);
        *(_OWORD *)uint64_t v18 = v17;
        if (v4 == v11)
        {
          double v21 = v4;
          long long v19 = &v16[28 * v12];
        }
        else
        {
          long long v19 = &v16[28 * v12];
          do
          {
            long long v20 = *(_OWORD *)((char *)v4 - 28);
            *((_OWORD *)v19 - 1) = *(v4 - 1);
            *(_OWORD *)(v19 - 28) = v20;
            v19 -= 28;
            uint64_t v4 = (_OWORD *)((char *)v4 - 28);
          }
          while (v4 != v11);
          double v21 = *(_OWORD **)a4;
        }
        uint64_t v4 = v18 + 28;
        *(void *)a4 = v19;
        *(void *)(a4 + 8) = v18 + 28;
        *(void *)(a4 + 16) = &v16[28 * v15];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        long long v10 = *v8;
        *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)((char *)v6 + 44);
        *uint64_t v4 = v10;
        uint64_t v4 = (_OWORD *)((char *)v4 + 28);
      }
      *(void *)(a4 + 8) = v4;
      long long v22 = (void *)v6[1];
      if (v22)
      {
        do
        {
          long long v23 = v22;
          long long v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v23 = (void *)v6[2];
          BOOL v24 = *v23 == (void)v6;
          uint64_t v6 = v23;
        }
        while (!v24);
      }
      uint64_t v6 = v23;
    }
    while (v23 != v5);
  }
  return 1;
}

uint64_t XofSvcsIf::GetBdsAlmData(uint64_t a1, char **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  Aluint64_t m = XofSvcsIf::GetAlmData<XofBeidouAlmanac>(a1, 5, (void *)(a1 + 640), a2);
  std::mutex::unlock(v4);
  return Alm;
}

void sub_263D2B778(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t XofSvcsIf::GetAlmData<XofBeidouAlmanac>(uint64_t a1, int a2, void *a3, char **a4)
{
  uint64_t v4 = *a4;
  a4[1] = *a4;
  if (*(_DWORD *)(a1 + 1128) != 1 || !*(unsigned char *)(a1 + 48 * a2 + 17)) {
    return 7;
  }
  if (!a3[2]) {
    return 10;
  }
  long long v5 = a3 + 1;
  uint64_t v6 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      uint64_t v8 = (long long *)(v6 + 4);
      unint64_t v9 = (unint64_t)a4[2];
      if ((unint64_t)v4 >= v9)
      {
        uint64_t v12 = *a4;
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v4 - *a4) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0x666666666666666) {
          std::vector<gnss::Measurement>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v12) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x333333333333333) {
          unint64_t v16 = 0x666666666666666;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v17 = (char *)operator new(40 * v16);
        }
        else
        {
          long long v17 = 0;
        }
        uint64_t v18 = &v17[40 * v13];
        long long v19 = *v8;
        long long v20 = *((_OWORD *)v6 + 3);
        *((void *)v18 + 4) = v6[8];
        *(_OWORD *)uint64_t v18 = v19;
        *((_OWORD *)v18 + 1) = v20;
        if (v4 == (_OWORD *)v12)
        {
          BOOL v24 = (char *)v4;
          double v21 = &v17[40 * v13];
        }
        else
        {
          double v21 = &v17[40 * v13];
          do
          {
            long long v22 = *(_OWORD *)((char *)v4 - 40);
            long long v23 = *(_OWORD *)((char *)v4 - 24);
            *((void *)v21 - 1) = *((void *)v4 - 1);
            *(_OWORD *)(v21 - 24) = v23;
            *(_OWORD *)(v21 - 40) = v22;
            v21 -= 40;
            uint64_t v4 = (_OWORD *)((char *)v4 - 40);
          }
          while (v4 != (_OWORD *)v12);
          BOOL v24 = *a4;
        }
        uint64_t v4 = v18 + 40;
        *a4 = v21;
        a4[1] = v18 + 40;
        a4[2] = &v17[40 * v16];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        long long v10 = *v8;
        long long v11 = *((_OWORD *)v6 + 3);
        *((void *)v4 + 4) = v6[8];
        *uint64_t v4 = v10;
        v4[1] = v11;
        uint64_t v4 = (_OWORD *)((char *)v4 + 40);
      }
      a4[1] = (char *)v4;
      long long v25 = (void *)v6[1];
      if (v25)
      {
        do
        {
          int v26 = v25;
          long long v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          int v26 = (void *)v6[2];
          BOOL v27 = *v26 == (void)v6;
          uint64_t v6 = v26;
        }
        while (!v27);
      }
      uint64_t v6 = v26;
    }
    while (v26 != v5);
  }
  return 1;
}