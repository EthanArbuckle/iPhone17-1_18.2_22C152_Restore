size_t gnssOsa_readNv(int a1, void *a2, size_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  unsigned char *v18;
  char __str[966];
  uint64_t v20;

  v20 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_readNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2 && gp_NvStorage)
  {
    (*(void (**)(void **__return_ptr))(*(void *)gp_NvStorage + 64))(&__p);
    v7 = __p;
    v8 = v18;
    if (v18 - (unsigned char *)__p >= a3) {
      v9 = a3;
    }
    else {
      v9 = v18 - (unsigned char *)__p;
    }
    memcpy(a2, __p, v9);
    v10 = g_LbsOsaTrace_Config;
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NvID,%d,BytesRead,%zu,BytesReq,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 68, "gnssOsa_readNv", a1, v18 - (unsigned char *)__p, a3);
      gnssOsa_PrintLog(__str, 5, 1, 0);
      v7 = __p;
      v8 = v18;
      v10 = g_LbsOsaTrace_Config;
    }
    if (v7 == v8)
    {
      if (v10 < 2)
      {
LABEL_15:
        if (__p)
        {
          v18 = __p;
          operator delete(__p);
        }
        return v9;
      }
      bzero(__str, 0x3C6uLL);
      v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx No NV data,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 87, "gnssOsa_readNv", 769, a1);
      gnssOsa_PrintLog(__str, 2, 1, 0);
      v10 = g_LbsOsaTrace_Config;
    }
    if (v10 >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 68, "gnssOsa_readNv");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 69, "gnssOsa_readNv", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 68, "gnssOsa_readNv");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  return 0;
}

void sub_263C1DF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_storeBufferToNv(uint64_t a1, const void *a2, size_t __sz)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_storeBufferToNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2 && gp_NvStorage)
  {
    *(void *)__str = 0;
    v12 = 0;
    uint64_t v13 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(__str, a2, (uint64_t)a2 + __sz, __sz);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)gp_NvStorage + 32))(gp_NvStorage, a1, __str);
    if (*(void *)__str)
    {
      v12 = *(void **)__str;
      operator delete(*(void **)__str);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: invalid Argument\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_storeBufferToNv");
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 68, "gnssOsa_storeBufferToNv");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    return 0;
  }
  return v7;
}

void sub_263C1E1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_getNvSize(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 68, "gnssOsa_getNvSize");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NvSize\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_getNvSize", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config < 5) {
      return 0;
    }
LABEL_16:
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 68, "gnssOsa_getNvSize");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    return 0;
  }
  if (!gp_NvStorage)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NvStorage\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_getNvSize", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config < 5) {
      return 0;
    }
    goto LABEL_16;
  }
  (*(void (**)(void **__return_ptr))(*(void *)gp_NvStorage + 64))(&__p);
  *a2 = v11 - (unsigned char *)__p;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NvSize,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 68, "gnssOsa_getNvSize", *a2);
    gnssOsa_PrintLog(__str, 5, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 68, "gnssOsa_getNvSize");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_263C1E5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_clearNV(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NvID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "gnssOsa_clearNV", a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)gp_NvStorage + 80))(gp_NvStorage, a1);
}

void gnssOsa_flushNv(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "OSA", 68, "gnssOsa_flushNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  (*(void (**)(uint64_t))(*(void *)gp_NvStorage + 56))(gp_NvStorage);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "OSA", 68, "gnssOsa_flushNv");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_263C1E8FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2655E6C98, MEMORY[0x263F8C060]);
}

void sub_263C1EA18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void NK_Set_Environ_Severity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 52))
  {
    *(_DWORD *)(a2 + 68) = 1;
  }
  else
  {
    size_t v8 = (unsigned char *)(a4 + 62332);
    uint64_t v9 = (_OWORD *)(a3 + 14344);
    memmove((void *)(a3 + 14472), (const void *)(a3 + 14344), 0x380uLL);
    uint64_t v10 = *(void *)(a3 + 15384);
    *(_OWORD *)(a3 + 15372) = *(_OWORD *)(a3 + 15368);
    int v11 = *(_DWORD *)(a3 + 15392);
    *(void *)(a3 + 15388) = v10;
    *(_DWORD *)(a3 + 15396) = v11;
    unsigned int v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a3 + 15368) = v12;
    v9[6] = 0u;
    v9[7] = 0u;
    v9[4] = 0u;
    v9[5] = 0u;
    v9[2] = 0u;
    v9[3] = 0u;
    *uint64_t v9 = 0u;
    v9[1] = 0u;
    unsigned int v13 = 7;
    int v14 = 8750;
    do
    {
      int v15 = *(_DWORD *)(a3 + 4 * v13 + 15368);
      v14 -= 1000;
      BOOL v16 = v13-- != 0;
    }
    while (v16 && !v15);
    unsigned int v17 = v15 + v14;
    if (v12 <= v17 && v12 + 750 >= v17 - 750)
    {
      int v18 = v13 + 1;
    }
    else
    {
      bzero(v9, 0x420uLL);
      int v18 = 0;
      *(_DWORD *)(a3 + 15368) = *(_DWORD *)(a4 + 4);
    }
    uint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    unint64_t v24 = a3 + ((unint64_t)v18 << 7) + 14344;
    do
    {
      if (*(int *)(a1 + 4 * v19 + 1248) >= 10 && *(unsigned __int16 *)(a1 + 2 * v19 + 2400) >= 0x65u)
      {
        *((unsigned char *)v9 + v19) = *(unsigned char *)(a1 + v19 + 1760);
        int v25 = *(unsigned __int8 *)(a1 + v19 + 1760);
        v21 += v25;
        ++v20;
        if (v18 < 1)
        {
          int v33 = *(unsigned __int8 *)(a1 + v19 + 1760);
        }
        else
        {
          v26 = (unsigned __int8 *)v24;
          uint64_t v27 = v18 + 1;
          unsigned __int8 v28 = *(unsigned char *)(a1 + v19 + 1760);
          do
          {
            unsigned int v30 = *v26;
            v26 -= 128;
            unsigned int v29 = v30;
            unsigned __int8 v31 = v28;
            if (v30 > v28) {
              unsigned __int8 v31 = v29;
            }
            char v32 = v25;
            if (v29 < v25) {
              char v32 = v29;
            }
            if (v29)
            {
              v21 += v29;
              ++v20;
              unsigned __int8 v28 = v31;
              LOBYTE(v25) = v32;
            }
            --v27;
          }
          while (v27 > 1);
          int v33 = v28;
          int v25 = v25;
        }
        int v34 = v33 - v25;
        if ((*(_WORD *)(a1 + 2 * v19 + 992) & 0x300) == 0) {
          v34 -= 2;
        }
        if (v34 > v22) {
          int v22 = v34;
        }
        if (v34 > v23)
        {
          int v22 = v23;
          int v23 = v34;
        }
      }
      ++v19;
      ++v24;
    }
    while (v19 != 128);
    if (v20 < 8)
    {
      int v35 = 0;
    }
    else if (v22 + v23 > 8 || v21 / v20 <= *(unsigned __int8 *)(a3 + 3))
    {
      int v35 = 7;
    }
    else
    {
      int v35 = 1;
    }
    char v36 = *(unsigned char *)(p_NA + 381);
    if (v36)
    {
      int v37 = *(_DWORD *)(p_NA + 26780);
      switch(v37)
      {
        case 0:
          goto LABEL_43;
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          break;
        case 2:
          int v37 = 4;
          break;
        default:
          int v37 = 0;
          break;
      }
      *(_DWORD *)(a2 + 68) = v37;
      if (!v8[8])
      {
        *size_t v8 = v36;
        v8[8] = v36;
      }
    }
    else
    {
LABEL_43:
      if (v20 >= 8) {
        *(_DWORD *)(a2 + 68) = v35;
      }
    }
  }
}

uint64_t GM_Conv_Lock_Units(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = (__int16 *)(a3 + 38);
    uint64_t v4 = (_WORD *)(a2 + 14);
    result = result;
    do
    {
      if ((unsigned __int16)*(v4 - 2) >= 0xFDF2u) {
        __int16 v5 = 6500;
      }
      else {
        __int16 v5 = *(v4 - 2) / 0xAu;
      }
      *(v4 - 2) = v5;
      if ((unsigned __int16)*(v4 - 1) >= 0xFDF2u) {
        __int16 v6 = 6500;
      }
      else {
        __int16 v6 = *(v4 - 1) / 0xAu;
      }
      *(v4 - 1) = v6;
      unsigned int v7 = (unsigned __int16)*v4;
      BOOL v8 = v7 > 0xFDEC;
      unint64_t v9 = (429496730 * (unint64_t)(v7 + 5)) >> 32;
      if (v8) {
        LOWORD(v9) = 6500;
      }
      *uint64_t v4 = v9;
      v4 += 18;
      int v10 = *v3;
      unsigned int v11 = ((26215 * v10) >> 18) + ((26215 * v10) >> 31);
      if (v10 > 32009) {
        LOWORD(v11) = 3200;
      }
      if (v10 >= -32009) {
        __int16 v12 = v11;
      }
      else {
        __int16 v12 = -3200;
      }
      *uint64_t v3 = v12;
      v3 += 28;
      --result;
    }
    while (result);
  }
  return result;
}

uint64_t ds_NK_Summary_FirstLine(uint64_t result)
{
  uint64_t v1 = (unsigned char *)(*(void *)result)++;
  *uint64_t v1 = 10;
  uint64_t v2 = *(char **)result;
  if (*(void *)result >= *(void *)(result + 24)) {
    uint64_t v2 = *(char **)(result + 16);
  }
  uint64_t v3 = 0;
  char v4 = 78;
  do
  {
    *(void *)result = v2 + 1;
    *uint64_t v2 = v4;
    uint64_t v2 = *(char **)result;
    if (*(void *)result >= *(void *)(result + 24))
    {
      uint64_t v2 = *(char **)(result + 16);
      *(void *)result = v2;
    }
    char v4 = str_0[++v3];
  }
  while (v3 != 16);
  *(void *)result = v2 + 1;
  *uint64_t v2 = 10;
  if (*(void *)result >= *(void *)(result + 24)) {
    *(void *)result = *(void *)(result + 16);
  }

  return GNSS_Nav_Debug_Flush_Check(result);
}

uint64_t ds_NK_Summary(void *a1)
{
  uint64_t v1522 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char **)a1[35];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[16];
  uint64_t v6 = a1[26];
  int v7 = *(unsigned __int16 *)(a1[14] + 394);
  GN_GPS_Get_LibVersion(v1514);
  BOOL v8 = *v2;
  char v9 = 86;
  uint64_t v10 = 1u;
  do
  {
    *uint64_t v2 = v8 + 1;
    *BOOL v8 = v9;
    BOOL v8 = *v2;
    if (*v2 >= v2[3])
    {
      BOOL v8 = v2[2];
      *uint64_t v2 = v8;
    }
    char v9 = aVer[v10++];
  }
  while (v10 != 7);
  char v11 = v1514[0];
  if (v1514[0])
  {
    __int16 v12 = &v1514[1];
    do
    {
      *uint64_t v2 = v8 + 1;
      *BOOL v8 = v11;
      BOOL v8 = *v2;
      if (*v2 >= v2[3])
      {
        BOOL v8 = v2[2];
        *uint64_t v2 = v8;
      }
      int v13 = *v12++;
      char v11 = v13;
    }
    while (v13);
  }
  *uint64_t v2 = v8 + 1;
  *BOOL v8 = 32;
  int v14 = *v2;
  if (*v2 >= v2[3]) {
    int v14 = v2[2];
  }
  *uint64_t v2 = v14 + 1;
  *int v14 = 91;
  int v15 = *v2;
  if (*v2 >= v2[3])
  {
    int v15 = v2[2];
    *uint64_t v2 = v15;
  }
  char v16 = *(unsigned char *)(v6 + 152);
  if (v16)
  {
    unsigned int v17 = (unsigned __int8 *)(v6 + 153);
    do
    {
      *uint64_t v2 = v15 + 1;
      *int v15 = v16;
      int v15 = *v2;
      if (*v2 >= v2[3])
      {
        int v15 = v2[2];
        *uint64_t v2 = v15;
      }
      int v18 = *v17++;
      char v16 = v18;
    }
    while (v18);
  }
  *uint64_t v2 = v15 + 1;
  *int v15 = 93;
  uint64_t v19 = *v2;
  if (*v2 >= v2[3]) {
    uint64_t v19 = v2[2];
  }
  for (unsigned int i = 3; i > 1; --i)
  {
    *uint64_t v2 = v19 + 1;
    *uint64_t v19 = 32;
    uint64_t v19 = *v2;
    if (*v2 >= v2[3])
    {
      uint64_t v19 = v2[2];
      *uint64_t v2 = v19;
    }
  }
  sprintf_2f((uint64_t)v2, (*(_DWORD *)(v4 + 32) - *(_DWORD *)(v5 + 68180)) / 0x64u);
  int v21 = (*v2)++;
  *int v21 = 32;
  int v22 = *v2;
  if (*v2 >= v2[3]) {
    int v22 = v2[2];
  }
  int v23 = &ch_GNSS_Exe_States[20 * *(int *)(v3 + 2032) + 1];
  char v24 = 32;
  do
  {
    *uint64_t v2 = v22 + 1;
    *int v22 = v24;
    int v22 = *v2;
    if (*v2 >= v2[3])
    {
      int v22 = v2[2];
      *uint64_t v2 = v22;
    }
    int v25 = *v23++;
    char v24 = v25;
  }
  while (v25);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v3 + 2030));
  sprintf_sp1d(v2, v7);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v5 + 29));
  v26 = (*v2)++;
  char *v26 = 10;
  if (*v2 >= v2[3]) {
    *uint64_t v2 = v2[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v2);
  uint64_t v27 = (char **)a1[35];
  unsigned __int8 v28 = (double *)a1[6];
  unsigned int v30 = (_DWORD *)a1[9];
  uint64_t v29 = a1[10];
  unsigned __int8 v31 = (unsigned int *)(a1[16] + 27116);
  uint64_t v32 = a1[21];
  int v33 = *v27;
  char v34 = 84;
  uint64_t v35 = 1u;
  do
  {
    *uint64_t v27 = v33 + 1;
    *int v33 = v34;
    int v33 = *v27;
    if (*v27 >= v27[3])
    {
      int v33 = v27[2];
      *uint64_t v27 = v33;
    }
    char v34 = aTime[v35++];
  }
  while (v35 != 7);
  *(void *)v1514 = 0;
  v1472[0] = 0;
  *(_WORD *)v1504 = 0;
  v1519[0] = 0;
  LOWORD(v1471) = 0;
  *(_DWORD *)v1470 = 0;
  unsigned __int16 v1469 = 0;
  double v36 = *(double *)(v29 + 48);
  __int16 v37 = *(_WORD *)(v29 + 62);
  v38 = (double *)(v29 + 152);
  *(void *)v1513 = 0;
  if (!R8_EQ((const double *)(v29 + 152), (const double *)v1513)
    || (v38 = (double *)(v29 + 160), *(void *)v1513 = 0, !R8_EQ((const double *)(v29 + 160), (const double *)v1513))
    || (v38 = (double *)(v29 + 168),
        *(void *)v1513 = 0,
        BOOL v39 = R8_EQ((const double *)(v29 + 168), (const double *)v1513),
        double v40 = 0.0,
        !v39))
  {
    double v40 = *v38;
  }
  for (double j = v36 - v40; j >= 604800.0; ++v37)
    double j = j + -604800.0;
  while (j < 0.0)
  {
    double j = j + 604800.0;
    --v37;
  }
  API_Get_UTC_Cor(0, (double *)v1514);
  GPS_To_UTC_Time(v1472, (unsigned __int16 *)v1504, v1519, (unsigned __int16 *)&v1471, &v1470[1], v1470, &v1469, v37, j, *(double *)v1514);
  sprintf_02d(v27, LOWORD(v1471));
  sprintf_02d(v27, v1470[1]);
  unsigned __int16 v42 = v1470[0];
  if (LOWORD(v1471) == 23 && v1470[1] == 59 && v1470[0] >= 0x3Au)
  {
    v1513[0] = 0;
    signed __int8 v1468 = 0;
    LODWORD(v1512[0]) = 0;
    API_Get_Next_Leap_Second(v1513, &v1468, (int *)v1512);
    unsigned __int16 v42 = v1470[0];
    if (!LODWORD(v1512[0]) && v1468 == 1) {
      unsigned __int16 v42 = ++v1470[0];
    }
  }
  sprintf_02d(v27, v42);
  v43 = (*v27)++;
  char *v43 = 46;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_03d((uint64_t)v27, v1469);
  unsigned int v44 = *(_DWORD *)(v29 + 32);
  v45 = (*v27)++;
  char *v45 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_10u(v27, v44);
  sprintf_5d(v27, *(__int16 *)(v29 + 62));
  sprintf_12f3(v27, *(double *)(v29 + 48));
  sprintf_2d(v27, *(unsigned __int8 *)(v32 + 24));
  v46 = *v27;
  v47 = &g_TOW_Stat_As_String[10 * *(unsigned int *)v28 + 1];
  char v48 = 32;
  do
  {
    *uint64_t v27 = v46 + 1;
    char *v46 = v48;
    v46 = *v27;
    if (*v27 >= v27[3])
    {
      v46 = v27[2];
      *uint64_t v27 = v46;
    }
    int v49 = *v47++;
    char v48 = v49;
  }
  while (v49);
  sprintf_6d(v27, *v31);
  sprintf_6d(v27, v31[1]);
  sprintf_gR8(v27, v28[6] * 1000000000.0);
  sprintf_sgR8(v27, *(double *)(v29 + 184) * 1000000000.0);
  v50 = (*v27)++;
  char *v50 = 32;
  v51 = *v27;
  if (*v27 >= v27[3]) {
    v51 = v27[2];
  }
  unsigned int v52 = *(_DWORD *)(v29 + 36);
  *uint64_t v27 = v51 + 1;
  char *v51 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_10u(v27, v52);
  unsigned int v53 = v30[63];
  v54 = (*v27)++;
  char *v54 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_9d(v27, v53);
  double v55 = 0.0;
  if (*(unsigned char *)(v29 + 60) && *(int *)v28 >= 1) {
    double v55 = *(double *)(v29 + 48) + (double)(604800 * *(__int16 *)(v29 + 62) - 662342400);
  }
  v56 = (*v27)++;
  char *v56 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_14f3(v27, v55);
  v57 = (*v27)++;
  char *v57 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_19U(v27, *(void *)(v29 + 40));
  if (*(int *)v28 < 1)
  {
    v62 = *v27;
    char v63 = 32;
    uint64_t v64 = 1u;
    do
    {
      *uint64_t v27 = v62 + 1;
      char *v62 = v63;
      v62 = *v27;
      if (*v27 >= v27[3])
      {
        v62 = v27[2];
        *uint64_t v27 = v62;
      }
      char v63 = a9999999999[v64++];
    }
    while (v64 != 20);
    goto LABEL_115;
  }
  double v58 = *(double *)(v29 + 48) * 1000.0;
  double v59 = -0.5;
  if (v58 > 0.0) {
    double v59 = 0.5;
  }
  double v60 = v58 + v59;
  if (v60 <= 2147483650.0)
  {
    if (v60 >= -2147483650.0) {
      int v61 = (int)v60;
    }
    else {
      int v61 = 0x80000000;
    }
  }
  else
  {
    int v61 = 0x7FFFFFFF;
  }
  int v65 = _MergedGlobals;
  int v66 = *(_DWORD *)(v29 + 32);
  if (_MergedGlobals)
  {
    int v67 = dword_26AA2DF54;
  }
  else
  {
    _MergedGlobals = *(_DWORD *)(v29 + 32);
    dword_26AA2DF54 = v61;
    int v67 = v61;
    int v65 = v66;
  }
  int v68 = v65 + v61;
  int v69 = v67 + v66;
  int v70 = v69 - v68;
  if (v69 - v68 <= -302400000) {
    int v70 = -302400000;
  }
  int v71 = v70 + v68;
  unsigned int v72 = (v71 - v69 - (v71 != v69)) / 0x240C8400;
  if (v71 != v69) {
    ++v72;
  }
  unsigned int v73 = v69 + 604800000 * v72;
  if ((int)(v73 - v68) >= 302399999) {
    int v74 = 302399999;
  }
  else {
    int v74 = v73 - v68;
  }
  unsigned int v75 = v73 - v68 - 604800000 * ((v73 + ~(v68 + v74) + 604800000) / 0x240C8400);
  v76 = (*v27)++;
  char *v76 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_4d(v27, v75);
  *(_DWORD *)v1514 = 0;
  v1513[0] = 0;
  LODWORD(v1512[0]) = 0;
  *(_DWORD *)v1472 = 0;
  if (!API_Get_FS_Pulse_TTick((unsigned int *)v1514, v1513, (unsigned int *)v1512, (unsigned int *)v1472))
  {
    v62 = *v27;
    char v86 = 32;
    uint64_t v87 = 1u;
    do
    {
      *uint64_t v27 = v62 + 1;
      char *v62 = v86;
      v62 = *v27;
      if (*v27 >= v27[3])
      {
        v62 = v27[2];
        *uint64_t v27 = v62;
      }
      char v86 = a9999999[v87++];
    }
    while (v87 != 15);
LABEL_115:
    double k = 0.0;
    goto LABEL_120;
  }
  LODWORD(v77) = v1513[0];
  double v78 = *(double *)(v29 + 48)
      - *(double *)(v29 + 152)
      + ((double)(*(_DWORD *)(v29 + 32) - *(_DWORD *)v1514) + (double)v77 * -0.0000152587891)
      * -0.001
      * (1.0 - *(double *)(v29 + 184));
  for (double k = v78 - (double)(int)v78; k < -0.5; double k = k + 1.0)
    ;
  for (; k > 0.5; double k = k + -1.0)
    ;
  uint64_t v80 = 0;
  v81 = *v27;
  char v82 = 32;
  do
  {
    *uint64_t v27 = v81 + 1;
    char *v81 = v82;
    v81 = *v27;
    if (*v27 >= v27[3])
    {
      v81 = v27[2];
      *uint64_t v27 = v81;
    }
    char v82 = asc_263D5BBA1[++v80];
  }
  while (v80 != 2);
  sprintf_10u(v27, *(unsigned int *)v1514);
  sprintf_10u(v27, v1513[0]);
  double v83 = -0.5;
  if (k * 10000.0 > 0.0) {
    double v83 = 0.5;
  }
  double v84 = k * 10000.0 + v83;
  if (v84 <= 2147483650.0)
  {
    if (v84 >= -2147483650.0) {
      unsigned int v85 = (int)v84;
    }
    else {
      unsigned int v85 = 0x80000000;
    }
  }
  else
  {
    unsigned int v85 = 0x7FFFFFFF;
  }
  sprintf_7f((uint64_t)v27, v85, 2);
  v62 = *v27;
LABEL_120:
  double v88 = (*(double *)(v29 + 48) - *(double *)(v29 + 152) - v28[15]) * 1000.0
      - (double)(*(_DWORD *)(v29 + 32) - *((_DWORD *)v28 + 32));
  *uint64_t v27 = v62 + 1;
  char *v62 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_12f3(v27, v88);
  v89 = (*v27)++;
  char *v89 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_2d(v27, v31[6]);
  unsigned int v90 = v30[440];
  if (v90 == -1) {
    unsigned int v91 = 255;
  }
  else {
    unsigned int v91 = v90 / 0xEA60;
  }
  sprintf_4d(v27, v91);
  v92 = (*v27)++;
  char *v92 = 32;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  sprintf_1u(v27, v30[442]);
  v93 = *v27;
  char v94 = 32;
  uint64_t v95 = 1u;
  do
  {
    *uint64_t v27 = v93 + 1;
    char *v93 = v94;
    v93 = *v27;
    if (*v27 >= v27[3])
    {
      v93 = v27[2];
      *uint64_t v27 = v93;
    }
    char v94 = aGoh[v95++];
  }
  while (v95 != 6);
  sprintf_4d(v27, v30[458]);
  int v96 = v30[455];
  if (v96)
  {
    uint64_t v97 = 274877907 * (*(_DWORD *)(v29 + 36) - v96);
    unsigned int v98 = (v97 >> 38) + ((unint64_t)v97 >> 63);
    v99 = (*v27)++;
    char *v99 = 32;
    if (*v27 >= v27[3]) {
      *uint64_t v27 = v27[2];
    }
    sprintf_4d(v27, v98);
    int v100 = v30[458];
    if (v100)
    {
      uint64_t v101 = 274877907 * (*(_DWORD *)(v29 + 36) - v100);
      unsigned int v102 = (v101 >> 38) + ((unint64_t)v101 >> 63);
    }
    else
    {
      unsigned int v102 = 0;
    }
    v106 = (*v27)++;
    char *v106 = 32;
    if (*v27 >= v27[3]) {
      *uint64_t v27 = v27[2];
    }
    sprintf_4d(v27, v102);
    v104 = *v27;
  }
  else
  {
    uint64_t v103 = 0;
    v104 = *v27;
    char v105 = 32;
    do
    {
      *uint64_t v27 = v104 + 1;
      char *v104 = v105;
      v104 = *v27;
      if (*v27 >= v27[3])
      {
        v104 = v27[2];
        *uint64_t v27 = v104;
      }
      char v105 = a00[++v103];
    }
    while (v103 != 4);
  }
  *uint64_t v27 = v104 + 1;
  char *v104 = 10;
  if (*v27 >= v27[3]) {
    *uint64_t v27 = v27[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v27);
  v107 = (char **)a1[35];
  uint64_t v109 = a1[6];
  uint64_t v108 = a1[7];
  v110 = (unsigned __int8 *)(v108 + 17128);
  v111 = (char *)(v108 + 8986);
  uint64_t v112 = a1[10];
  v113 = *v107;
  char v114 = 71;
  uint64_t v115 = 1u;
  do
  {
    *v107 = v113 + 1;
    char *v113 = v114;
    v113 = *v107;
    if (*v107 >= v107[3])
    {
      v113 = v107[2];
      *v107 = v113;
    }
    char v114 = aGlot[v115++];
  }
  while (v115 != 7);
  double v116 = *(double *)(v109 + 88) - *(double *)(v112 + 160) + 0.0005;
  if (v116 >= 86400.0) {
    double v116 = v116 + -86400.0;
  }
  unsigned int v117 = ((v116 - (double)v116) * 1000.0);
  unsigned int v118 = (unsigned __int16)(v116 / 0xE10);
  unsigned int v119 = v116 - 3600 * v118;
  unsigned int v120 = (unsigned __int16)(v119 / 0x3C);
  unsigned int v121 = v119 - 60 * v120;
  sprintf_02d(v107, v118);
  sprintf_02d(v107, v120);
  sprintf_02d(v107, v121);
  v122 = (*v107)++;
  char *v122 = 46;
  if (*v107 >= v107[3]) {
    *v107 = v107[2];
  }
  sprintf_03d((uint64_t)v107, v117);
  sprintf_3d(v107, *(__int16 *)(v109 + 82));
  sprintf_5d(v107, *(__int16 *)(v109 + 84));
  unsigned int v123 = v111[3];
  sprintf_3d(v107, *v111);
  sprintf_3d(v107, v123);
  uint64_t v124 = 0;
  v125 = *v107;
  char v126 = 32;
  do
  {
    *v107 = v125 + 1;
    char *v125 = v126;
    v125 = *v107;
    if (*v107 >= v107[3])
    {
      v125 = v107[2];
      *v107 = v125;
    }
    char v126 = asc_263D5BBA1[++v124];
  }
  while (v124 != 2);
  sprintf_12f3(v107, *(double *)(v109 + 88));
  sprintf_2d(v107, *(unsigned __int8 *)(v109 + 80));
  sprintf_3d(v107, *v110);
  sprintf_5d(v107, *((unsigned __int16 *)v111 + 4067));
  v127 = (*v107)++;
  char *v127 = 32;
  v128 = *v107;
  if (*v107 >= v107[3]) {
    v128 = v107[2];
  }
  *v107 = v128 + 1;
  char *v128 = 32;
  v129 = *v107;
  if (*v107 >= v107[3]) {
    v129 = v107[2];
  }
  v130 = &g_TOW_Stat_As_String[10 * *(unsigned int *)(v109 + 76) + 1];
  char v131 = 32;
  do
  {
    *v107 = v129 + 1;
    char *v129 = v131;
    v129 = *v107;
    if (*v107 >= v107[3])
    {
      v129 = v107[2];
      *v107 = v129;
    }
    int v132 = *v130++;
    char v131 = v132;
  }
  while (v132);
  *v107 = v129 + 1;
  char *v129 = 10;
  if (*v107 >= v107[3]) {
    *v107 = v107[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v107);
  uint64_t v133 = a1[35];
  uint64_t v134 = a1[28];
  v135 = *(char **)v133;
  char v136 = 112;
  uint64_t v137 = 1u;
  do
  {
    *(void *)uint64_t v133 = v135 + 1;
    char *v135 = v136;
    v135 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v135 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v135;
    }
    char v136 = aPNd[v137++];
  }
  while (v137 != 7);
  *(float64x2_t *)v1514 = vmulq_f64(*(float64x2_t *)(v134 + 104), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D44uLL));
  sprintf_LaLo((char **)v133, (uint64_t)v1514);
  sprintf_sgR8((void *)v133, *(double *)(v134 + 120));
  sprintf_sgR8((void *)v133, *(double *)(v134 + 128));
  v138 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v138 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_sgR8((void *)v133, *(double *)(v134 + 136));
  double v139 = *(double *)(v134 + 144) * 10.0;
  double v140 = -0.5;
  if (v139 > 0.0) {
    double v140 = 0.5;
  }
  double v141 = v139 + v140;
  if (v141 <= 2147483650.0)
  {
    if (v141 >= -2147483650.0) {
      unsigned int v142 = (int)v141;
    }
    else {
      unsigned int v142 = 0x80000000;
    }
  }
  else
  {
    unsigned int v142 = 0x7FFFFFFF;
  }
  sprintf_7f(v133, v142, 2);
  sprintf_sgR8((void *)v133, *(double *)(v134 + 152));
  v143 = *(char **)v133;
  char v144 = 32;
  uint64_t v145 = 1u;
  do
  {
    *(void *)uint64_t v133 = v143 + 1;
    char *v143 = v144;
    v143 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v143 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v143;
    }
    char v144 = aSt[v145++];
  }
  while (v145 != 6);
  sprintf_2d((void *)v133, *(unsigned __int8 *)(v134 + 329));
  sprintf_2d((void *)v133, *(unsigned __int8 *)(v134 + 330));
  v146 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v146 = 32;
  v147 = *(char **)v133;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    v147 = *(char **)(v133 + 16);
  }
  unint64_t v148 = *(unsigned int *)(v134 + 312);
  if (v148 >= 5) {
    char v149 = 45;
  }
  else {
    char v149 = 0x484D4C562DuLL >> (8 * v148);
  }
  *(void *)uint64_t v133 = v147 + 1;
  char *v147 = v149;
  v150 = *(char **)v133;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    v150 = *(char **)(v133 + 16);
  }
  *(void *)uint64_t v133 = v150 + 1;
  char *v150 = 32;
  v151 = *(char **)v133;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    v151 = *(char **)(v133 + 16);
  }
  unsigned int v152 = *(_DWORD *)(v134 + 308) - 1;
  if (v152 > 3) {
    v153 = "NC";
  }
  else {
    v153 = off_2655E6D00[v152];
  }
  char v154 = *v153;
  if (*v153)
  {
    v155 = (unsigned __int8 *)(v153 + 1);
    do
    {
      *(void *)uint64_t v133 = v151 + 1;
      char *v151 = v154;
      v151 = *(char **)v133;
      if (*(void *)v133 >= *(void *)(v133 + 24))
      {
        v151 = *(char **)(v133 + 16);
        *(void *)uint64_t v133 = v151;
      }
      int v156 = *v155++;
      char v154 = v156;
    }
    while (v156);
  }
  *(void *)uint64_t v133 = v151 + 1;
  char *v151 = 32;
  v157 = *(char **)v133;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    v157 = *(char **)(v133 + 16);
  }
  unsigned int v158 = *(_DWORD *)(v134 + 304) - 1;
  if (v158 > 4) {
    v159 = "NF";
  }
  else {
    v159 = off_2655E6D20[v158];
  }
  char v160 = *v159;
  if (*v159)
  {
    v161 = (unsigned __int8 *)(v159 + 1);
    do
    {
      *(void *)uint64_t v133 = v157 + 1;
      char *v157 = v160;
      v157 = *(char **)v133;
      if (*(void *)v133 >= *(void *)(v133 + 24))
      {
        v157 = *(char **)(v133 + 16);
        *(void *)uint64_t v133 = v157;
      }
      int v162 = *v161++;
      char v160 = v162;
    }
    while (v162);
  }
  *(void *)uint64_t v133 = v157 + 1;
  char *v157 = 32;
  v163 = *(char **)v133;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    v163 = *(char **)(v133 + 16);
  }
  unint64_t v164 = *(unsigned int *)(v134 + 300);
  if (v164 >= 6) {
    char v165 = 45;
  }
  else {
    char v165 = 0x2B465650532DuLL >> (8 * v164);
  }
  *(void *)uint64_t v133 = v163 + 1;
  char *v163 = v165;
  v166 = *(char **)v133;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    v166 = *(char **)(v133 + 16);
  }
  uint64_t v167 = 0;
  char v168 = 32;
  do
  {
    *(void *)uint64_t v133 = v166 + 1;
    char *v166 = v168;
    v166 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v166 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v166;
    }
    char v168 = a0x[++v167];
  }
  while (v167 != 4);
  unint64_t v169 = *(unsigned int *)(v134 + 324);
  LOBYTE(v1513[0]) = hexTABLE[v169 >> 28];
  BYTE1(v1513[0]) = hexTABLE[(v169 >> 24) & 0xF];
  hex6(v133, v169, v1513, 2);
  uint64_t v170 = 0;
  v171 = *(char **)v133;
  char v172 = 32;
  do
  {
    *(void *)uint64_t v133 = v171 + 1;
    char *v171 = v172;
    v171 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v171 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v171;
    }
    char v172 = a0x[++v170];
  }
  while (v170 != 4);
  sprintf_03x((char **)v133, *(unsigned int *)(v134 + 296));
  v173 = *(char **)v133;
  char v174 = 32;
  uint64_t v175 = 1u;
  do
  {
    *(void *)uint64_t v133 = v173 + 1;
    char *v173 = v174;
    v173 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v173 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v173;
    }
    char v174 = aPa[v175++];
  }
  while (v175 != 6);
  sprintf_ACC((char **)v133, *(double *)(v134 + 208));
  v176 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v176 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_ACC((char **)v133, *(double *)(v134 + 216));
  v177 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v177 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_3d((void *)v133, (int)*(double *)(v134 + 224));
  v178 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v178 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_ACC((char **)v133, *(double *)(v134 + 200));
  v179 = *(char **)v133;
  char v180 = 32;
  uint64_t v181 = 1u;
  do
  {
    *(void *)uint64_t v133 = v179 + 1;
    char *v179 = v180;
    v179 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v179 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v179;
    }
    char v180 = aVa[v181++];
  }
  while (v181 != 6);
  sprintf_ACC((char **)v133, *(double *)(v134 + 232));
  v182 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v182 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_ACC((char **)v133, *(double *)(v134 + 240));
  v183 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v183 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_ACC((char **)v133, *(double *)(v134 + 248));
  v184 = *(char **)v133;
  char v185 = 32;
  uint64_t v186 = 1u;
  do
  {
    *(void *)uint64_t v133 = v184 + 1;
    char *v184 = v185;
    v184 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v184 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v184;
    }
    char v185 = aTa[v186++];
  }
  while (v186 != 6);
  sprintf_ACC((char **)v133, *(double *)(v134 + 160) * 1000.0);
  v187 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v187 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_ACC((char **)v133, *(double *)(v134 + 168) * 1000000000.0);
  v188 = (unsigned char *)(*(void *)v133)++;
  unsigned char *v188 = 32;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  sprintf_ACC((char **)v133, *(double *)(v134 + 176) * 1000000000.0);
  v189 = *(char **)v133;
  char v190 = 32;
  uint64_t v191 = 1u;
  do
  {
    *(void *)uint64_t v133 = v189 + 1;
    char *v189 = v190;
    v189 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v189 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v189;
    }
    char v190 = aEt[v191++];
  }
  while (v191 != 6);
  int v192 = *(_DWORD *)(v134 + 316);
  if (v192 >= 0) {
    unsigned int v193 = *(_DWORD *)(v134 + 316);
  }
  else {
    unsigned int v193 = -v192;
  }
  sprintf1da((void *)v133, v193, v1513, 0, v192 >> 31);
  v194 = *(char **)v133;
  char v195 = 32;
  uint64_t v196 = 1u;
  do
  {
    *(void *)uint64_t v133 = v194 + 1;
    char *v194 = v195;
    v194 = *(char **)v133;
    if (*(void *)v133 >= *(void *)(v133 + 24))
    {
      v194 = *(char **)(v133 + 16);
      *(void *)uint64_t v133 = v194;
    }
    char v195 = aTr[v196++];
  }
  while (v196 != 6);
  unint64_t v197 = *(unsigned int *)(v134 + 320);
  if (v197 >= 5) {
    char v198 = 45;
  }
  else {
    char v198 = 0x484D4C562DuLL >> (8 * v197);
  }
  *(void *)uint64_t v133 = v194 + 1;
  char *v194 = v198;
  v199 = *(char **)v133;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    v199 = *(char **)(v133 + 16);
  }
  *(void *)uint64_t v133 = v199 + 1;
  char *v199 = 10;
  if (*(void *)v133 >= *(void *)(v133 + 24)) {
    *(void *)uint64_t v133 = *(void *)(v133 + 16);
  }
  GNSS_Nav_Debug_Flush_Check(v133);
  uint64_t v200 = a1[35];
  uint64_t v201 = a1[10];
  uint64_t v202 = a1[16];
  uint64_t v203 = a1[21];
  v204 = (double *)(v203 + 79704);
  strcpy(v1514, "    -------------- ");
  v205 = *(char **)v200;
  char v206 = 71;
  uint64_t v207 = 1u;
  do
  {
    *(void *)uint64_t v200 = v205 + 1;
    char *v205 = v206;
    v205 = *(char **)v200;
    if (*(void *)v200 >= *(void *)(v200 + 24))
    {
      v205 = *(char **)(v200 + 16);
      *(void *)uint64_t v200 = v205;
    }
    char v206 = aGeod[v207++];
  }
  while (v207 != 7);
  sprintf_LaLo((char **)v200, v201 + 224);
  sprintf_sgR8((void *)v200, *(double *)(v201 + 240));
  sprintf_sgR8((void *)v200, *(double *)(v201 + 240) - *(double *)(v201 + 248));
  int v208 = *(_DWORD *)(v201 + 416);
  if (v208 == 2)
  {
    char v209 = 115;
  }
  else
  {
    if (v208 != 1) {
      goto LABEL_283;
    }
    char v209 = 83;
  }
  v1514[4] = v209;
LABEL_283:
  int v210 = *(_DWORD *)(v201 + 420);
  if (v210 == 2)
  {
    char v211 = 98;
  }
  else
  {
    if (v210 != 1) {
      goto LABEL_288;
    }
    char v211 = 66;
  }
  v1514[5] = v211;
LABEL_288:
  int v212 = *(_DWORD *)(v201 + 432);
  if (v212 == 2)
  {
    char v213 = 100;
  }
  else
  {
    if (v212 != 1) {
      goto LABEL_293;
    }
    char v213 = 68;
  }
  v1514[6] = v213;
LABEL_293:
  int v214 = *(_DWORD *)(v201 + 424);
  if (v214 == 2)
  {
    char v215 = 103;
  }
  else
  {
    if (v214 != 1) {
      goto LABEL_298;
    }
    char v215 = 71;
  }
  v1514[7] = v215;
LABEL_298:
  int v216 = *(_DWORD *)(v201 + 440);
  if (v216 == 2)
  {
    char v217 = 104;
  }
  else
  {
    if (v216 != 1) {
      goto LABEL_303;
    }
    char v217 = 72;
  }
  v1514[8] = v217;
LABEL_303:
  int v218 = *(_DWORD *)(v201 + 444);
  if (v218 == 2)
  {
    char v219 = 97;
  }
  else
  {
    if (v218 != 1) {
      goto LABEL_308;
    }
    char v219 = 65;
  }
  v1514[9] = v219;
LABEL_308:
  int v220 = *(_DWORD *)(v201 + 448);
  if (v220 == 2)
  {
    char v221 = 118;
  }
  else
  {
    if (v220 != 1) {
      goto LABEL_313;
    }
    char v221 = 86;
  }
  v1514[10] = v221;
LABEL_313:
  int v222 = *(_DWORD *)(v201 + 452);
  if (v222 == 2)
  {
    char v223 = 100;
  }
  else
  {
    if (v222 != 1) {
      goto LABEL_318;
    }
    char v223 = 68;
  }
  v1514[11] = v223;
LABEL_318:
  int v224 = *(_DWORD *)(v201 + 456);
  if (v224 == 2)
  {
    char v225 = 103;
  }
  else
  {
    if (v224 != 1) {
      goto LABEL_323;
    }
    char v225 = 71;
  }
  v1514[12] = v225;
LABEL_323:
  int v226 = *(_DWORD *)(v201 + 460);
  if (v226 == 2)
  {
    char v227 = 115;
  }
  else
  {
    if (v226 != 1) {
      goto LABEL_328;
    }
    char v227 = 83;
  }
  v1514[13] = v227;
LABEL_328:
  int v228 = *(_DWORD *)(v201 + 464);
  if (v228 == 2)
  {
    char v229 = 100;
  }
  else
  {
    if (v228 != 1) {
      goto LABEL_333;
    }
    char v229 = 68;
  }
  v1514[14] = v229;
LABEL_333:
  int v230 = *(_DWORD *)(v201 + 468);
  if (v230 == 2)
  {
    char v231 = 103;
  }
  else
  {
    if (v230 != 1) {
      goto LABEL_338;
    }
    char v231 = 71;
  }
  v1514[15] = v231;
LABEL_338:
  int v232 = *(_DWORD *)(v201 + 472);
  if (v232 == 2)
  {
    char v233 = 100;
  }
  else
  {
    if (v232 != 1) {
      goto LABEL_343;
    }
    char v233 = 68;
  }
  v1514[16] = v233;
LABEL_343:
  int v234 = *(_DWORD *)(v201 + 476);
  if (v234 == 2)
  {
    char v235 = 116;
  }
  else
  {
    if (v234 != 1) {
      goto LABEL_348;
    }
    char v235 = 84;
  }
  v1514[17] = v235;
LABEL_348:
  int v236 = *(_DWORD *)(v201 + 480);
  if (v236 == 2)
  {
    char v237 = 100;
    goto LABEL_352;
  }
  if (v236 == 1)
  {
    char v237 = 68;
LABEL_352:
    v1514[18] = v237;
  }
  char v238 = v1514[0];
  v239 = *(char **)v200;
  if (v1514[0])
  {
    v240 = &v1514[1];
    do
    {
      *(void *)uint64_t v200 = v239 + 1;
      char *v239 = v238;
      v239 = *(char **)v200;
      if (*(void *)v200 >= *(void *)(v200 + 24))
      {
        v239 = *(char **)(v200 + 16);
        *(void *)uint64_t v200 = v239;
      }
      int v241 = *v240++;
      char v238 = v241;
    }
    while (v241);
  }
  char v242 = 32;
  uint64_t v243 = 1u;
  do
  {
    *(void *)uint64_t v200 = v239 + 1;
    char *v239 = v242;
    v239 = *(char **)v200;
    if (*(void *)v200 >= *(void *)(v200 + 24))
    {
      v239 = *(char **)(v200 + 16);
      *(void *)uint64_t v200 = v239;
    }
    char v242 = aSf[v243++];
  }
  while (v243 != 6);
  uint64_t v244 = *(unsigned int *)(v202 + 27204);
  char v245 = ch_Stat_Fil[v244];
  if (v245)
  {
    v246 = (unsigned __int8 *)&ch_Stat_Fil[v244] + 1;
    do
    {
      *(void *)uint64_t v200 = v239 + 1;
      char *v239 = v245;
      v239 = *(char **)v200;
      if (*(void *)v200 >= *(void *)(v200 + 24))
      {
        v239 = *(char **)(v200 + 16);
        *(void *)uint64_t v200 = v239;
      }
      int v247 = *v246++;
      char v245 = v247;
    }
    while (v247);
  }
  sprintf_2d((void *)v200, *(unsigned __int8 *)(v202 + 27249));
  sprintf_2d((void *)v200, *(_DWORD *)(v202 + 27208));
  sprintf_2d((void *)v200, *(unsigned __int8 *)(v202 + 27248));
  double v248 = *(double *)(v202 + 27216);
  if (v248 >= 9.89999962) {
    double v249 = 98.9999962;
  }
  else {
    double v249 = v248 * 10.0;
  }
  double v250 = -0.5;
  if (v249 > 0.0) {
    double v250 = 0.5;
  }
  double v251 = v249 + v250;
  if (v251 <= 2147483650.0)
  {
    if (v251 >= -2147483650.0) {
      unsigned int v252 = (int)v251;
    }
    else {
      unsigned int v252 = 0x80000000;
    }
  }
  else
  {
    unsigned int v252 = 0x7FFFFFFF;
  }
  sprintf_3f(v200, v252, 2);
  sprintf_sgR8((void *)v200, *(double *)(v202 + 27232));
  sprintf_sgR8((void *)v200, *(double *)(v202 + 27240));
  v253 = *(char **)v200;
  char v254 = 32;
  uint64_t v255 = 1u;
  do
  {
    *(void *)uint64_t v200 = v253 + 1;
    char *v253 = v254;
    v253 = *(char **)v200;
    if (*(void *)v200 >= *(void *)(v200 + 24))
    {
      v253 = *(char **)(v200 + 16);
      *(void *)uint64_t v200 = v253;
    }
    char v254 = aHf[v255++];
  }
  while (v255 != 6);
  uint64_t v256 = *(unsigned int *)(v202 + 27276);
  char v257 = ch_Heading[v256];
  if (v257)
  {
    v258 = (unsigned __int8 *)&ch_Heading[v256] + 1;
    do
    {
      *(void *)uint64_t v200 = v253 + 1;
      char *v253 = v257;
      v253 = *(char **)v200;
      if (*(void *)v200 >= *(void *)(v200 + 24))
      {
        v253 = *(char **)(v200 + 16);
        *(void *)uint64_t v200 = v253;
      }
      int v259 = *v258++;
      char v257 = v259;
    }
    while (v259);
  }
  double v260 = *(double *)(v202 + 27280);
  double v261 = -0.5;
  if (v260 > 0.0) {
    double v261 = 0.5;
  }
  double v262 = v260 + v261;
  if (v262 <= 2147483650.0)
  {
    if (v262 >= -2147483650.0) {
      unsigned int v263 = (int)v262;
    }
    else {
      unsigned int v263 = 0x80000000;
    }
  }
  else
  {
    unsigned int v263 = 0x7FFFFFFF;
  }
  sprintf_5d((void *)v200, v263);
  v264 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v264 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  int v265 = *(_DWORD *)(v202 + 27296);
  if (v265) {
    unsigned int v266 = (*(_DWORD *)v203 - v265) / 1000;
  }
  else {
    unsigned int v266 = 0;
  }
  sprintf_4d((void *)v200, v266);
  double v267 = *(double *)(v202 + 27328);
  double v268 = -0.5;
  if (v267 > 0.0) {
    double v268 = 0.5;
  }
  double v269 = v267 + v268;
  if (v269 <= 2147483650.0)
  {
    if (v269 >= -2147483650.0) {
      unsigned int v270 = (int)v269;
    }
    else {
      unsigned int v270 = 0x80000000;
    }
  }
  else
  {
    unsigned int v270 = 0x7FFFFFFF;
  }
  sprintf_5d((void *)v200, v270);
  v271 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v271 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  int v272 = *(_DWORD *)(v202 + 27336);
  if (v272) {
    unsigned int v273 = (*(_DWORD *)v203 - v272) / 1000;
  }
  else {
    unsigned int v273 = 0;
  }
  sprintf_4d((void *)v200, v273);
  sprintf_2d((void *)v200, *(unsigned __int8 *)(v202 + 27320));
  v274 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v274 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  sprintf_11f9((void *)v200, *(double *)(v202 + 27304));
  v275 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v275 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  sprintf_11f9((void *)v200, *(double *)(v202 + 27312));
  v276 = *(char **)v200;
  char v277 = 32;
  uint64_t v278 = 1u;
  do
  {
    *(void *)uint64_t v200 = v276 + 1;
    char *v276 = v277;
    v276 = *(char **)v200;
    if (*(void *)v200 >= *(void *)(v200 + 24))
    {
      v276 = *(char **)(v200 + 16);
      *(void *)uint64_t v200 = v276;
    }
    char v277 = aHi[v278++];
  }
  while (v278 != 6);
  double v279 = *(double *)(v203 + 79728) * 10.0;
  double v280 = -0.5;
  if (v279 > 0.0) {
    double v280 = 0.5;
  }
  double v281 = v279 + v280;
  if (v281 <= 2147483650.0)
  {
    if (v281 >= -2147483650.0) {
      unsigned int v282 = (int)v281;
    }
    else {
      unsigned int v282 = 0x80000000;
    }
  }
  else
  {
    unsigned int v282 = 0x7FFFFFFF;
  }
  sprintf_2f(v200, v282);
  v283 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v283 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  double v284 = -0.5;
  if (*v204 > 0.0) {
    double v284 = 0.5;
  }
  double v285 = *v204 + v284;
  if (v285 <= 2147483650.0)
  {
    if (v285 >= -2147483650.0) {
      unsigned int v286 = (int)v285;
    }
    else {
      unsigned int v286 = 0x80000000;
    }
  }
  else
  {
    unsigned int v286 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v200, v286);
  v287 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v287 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  double v288 = *(double *)(v203 + 1856);
  double v289 = -0.5;
  if (v288 > 0.0) {
    double v289 = 0.5;
  }
  double v290 = v288 + v289;
  if (v290 <= 2147483650.0)
  {
    if (v290 >= -2147483650.0) {
      unsigned int v291 = (int)v290;
    }
    else {
      unsigned int v291 = 0x80000000;
    }
  }
  else
  {
    unsigned int v291 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v200, v291);
  v292 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v292 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  double v293 = *(double *)(v203 + 79720);
  double v294 = -0.5;
  if (v293 > 0.0) {
    double v294 = 0.5;
  }
  double v295 = v293 + v294;
  if (v295 <= 2147483650.0)
  {
    if (v295 >= -2147483650.0) {
      unsigned int v296 = (int)v295;
    }
    else {
      unsigned int v296 = 0x80000000;
    }
  }
  else
  {
    unsigned int v296 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v200, v296);
  v297 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v297 = 32;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  double v298 = *(double *)(v203 + 79712);
  double v299 = -0.5;
  if (v298 > 0.0) {
    double v299 = 0.5;
  }
  double v300 = v298 + v299;
  if (v300 <= 2147483650.0)
  {
    if (v300 >= -2147483650.0) {
      unsigned int v301 = (int)v300;
    }
    else {
      unsigned int v301 = 0x80000000;
    }
  }
  else
  {
    unsigned int v301 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v200, v301);
  v302 = (unsigned char *)(*(void *)v200)++;
  unsigned char *v302 = 32;
  v303 = *(char **)v200;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    v303 = *(char **)(v200 + 16);
  }
  unint64_t v304 = *(unsigned int *)(v203 + 79736);
  if (v304 >= 8) {
    char v305 = 120;
  }
  else {
    char v305 = 0x4D30323146535578uLL >> (8 * v304);
  }
  *(void *)uint64_t v200 = v303 + 1;
  char *v303 = v305;
  v306 = *(char **)v200;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    v306 = *(char **)(v200 + 16);
  }
  *(void *)uint64_t v200 = v306 + 1;
  char *v306 = 32;
  v307 = *(char **)v200;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    v307 = *(char **)(v200 + 16);
  }
  if (*(unsigned char *)(v203 + 79740)) {
    char v308 = 83;
  }
  else {
    char v308 = 45;
  }
  *(void *)uint64_t v200 = v307 + 1;
  char *v307 = v308;
  v309 = *(char **)v200;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    v309 = *(char **)(v200 + 16);
  }
  *(void *)uint64_t v200 = v309 + 1;
  char *v309 = 32;
  v310 = *(char **)v200;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    v310 = *(char **)(v200 + 16);
  }
  if (*(unsigned char *)(v203 + 79741)) {
    char v311 = 84;
  }
  else {
    char v311 = 45;
  }
  *(void *)uint64_t v200 = v310 + 1;
  char *v310 = v311;
  v312 = *(char **)v200;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    v312 = *(char **)(v200 + 16);
  }
  *(void *)uint64_t v200 = v312 + 1;
  char *v312 = 10;
  if (*(void *)v200 >= *(void *)(v200 + 24)) {
    *(void *)uint64_t v200 = *(void *)(v200 + 16);
  }
  GNSS_Nav_Debug_Flush_Check(v200);
  uint64_t v313 = a1[35];
  v314 = (double *)a1[10];
  uint64_t v315 = a1[16];
  uint64_t v316 = a1[21];
  v317 = *(char **)v313;
  char v318 = 76;
  uint64_t v319 = 1u;
  do
  {
    *(void *)uint64_t v313 = v317 + 1;
    char *v317 = v318;
    v317 = *(char **)v313;
    if (*(void *)v313 >= *(void *)(v313 + 24))
    {
      v317 = *(char **)(v313 + 16);
      *(void *)uint64_t v313 = v317;
    }
    char v318 = aLocal[v319++];
  }
  while (v319 != 8);
  v320 = (double *)(v315 + 68288);
  v321 = v314 + 28;
  uint64_t v322 = -3;
  do
  {
    double v323 = *v321 - *(v320 - 9);
    if (v322 != -3)
    {
      if (v322 != -2) {
        goto LABEL_495;
      }
      double v324 = -6.28318531;
      if (v323 >= 3.14159265 || (double v324 = 6.28318531, v323 < -3.14159265)) {
        double v323 = v323 + v324;
      }
    }
    double v323 = v323 * *v320;
LABEL_495:
    v325 = (unsigned char *)(*(void *)v313)++;
    unsigned char *v325 = 32;
    if (*(void *)v313 >= *(void *)(v313 + 24)) {
      *(void *)uint64_t v313 = *(void *)(v313 + 16);
    }
    sprintf_12f3((char **)v313, v323);
    ++v320;
    ++v321;
    BOOL v326 = __CFADD__(v322++, 1);
  }
  while (!v326);
  v327 = (unsigned char *)(*(void *)v313)++;
  unsigned char *v327 = 32;
  if (*(void *)v313 >= *(void *)(v313 + 24)) {
    *(void *)uint64_t v313 = *(void *)(v313 + 16);
  }
  sprintf_sgR8((void *)v313, v314[46]);
  sprintf_sgR8((void *)v313, -v314[44]);
  sprintf_6d((void *)v313, (int)v314[124]);
  double v328 = 0.0;
  uint64_t v329 = 18;
  do
  {
    double v328 = v328 + v314[v329] * v314[v329];
    unint64_t v330 = v329 - 15;
    --v329;
  }
  while (v330 > 1);
  sprintf_sgR8((void *)v313, sqrt(v328));
  sprintf_6d((void *)v313, (int)*(double *)(v316 + 1856));
  sprintf_sgR8((void *)v313, v314[42]);
  sprintf_sgR8((void *)v313, v314[43]);
  sprintf_sgR8((void *)v313, v314[119]);
  sprintf_sgR8((void *)v313, v314[120]);
  sprintf_sgR8((void *)v313, v314[122]);
  sprintf_sgR8((void *)v313, v314[123]);
  v331 = (unsigned char *)(*(void *)v313)++;
  unsigned char *v331 = 10;
  if (*(void *)v313 >= *(void *)(v313 + 24)) {
    *(void *)uint64_t v313 = *(void *)(v313 + 16);
  }
  GNSS_Nav_Debug_Flush_Check(v313);
  print_line_LS(a1, 1);
  print_line_LS(a1, 2);
  print_line_LS(a1, 3);
  print_line_LS(a1, 4);
  print_line_LS(a1, 5);
  v332 = (char **)a1[35];
  if (g_Logging_Cfg >= 7)
  {
    uint64_t v333 = a1[16];
    v334 = *v332;
    char v335 = 75;
    uint64_t v336 = 1u;
    do
    {
      *v332 = v334 + 1;
      char *v334 = v335;
      v334 = *v332;
      if (*v332 >= v332[3])
      {
        v334 = v332[2];
        *v332 = v334;
      }
      char v335 = aKfarp[v336++];
    }
    while (v336 != 7);
    *v332 = v334 + 1;
    char *v334 = 32;
    v337 = *v332;
    if (*v332 >= v332[3]) {
      v337 = v332[2];
    }
    *v332 = v337 + 1;
    char *v337 = 80;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, *(char *)(v333 + 27616));
    double v338 = *(double *)(v333 + 27608);
    if (v338 >= 9.89999962) {
      double v339 = 98.9999962;
    }
    else {
      double v339 = v338 * 10.0;
    }
    double v340 = -0.5;
    if (v339 > 0.0) {
      double v340 = 0.5;
    }
    double v341 = v339 + v340;
    if (v341 <= 2147483650.0)
    {
      if (v341 >= -2147483650.0) {
        unsigned int v342 = (int)v341;
      }
      else {
        unsigned int v342 = 0x80000000;
      }
    }
    else
    {
      unsigned int v342 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v332, v342, 2);
    v343 = (*v332)++;
    char *v343 = 32;
    v344 = *v332;
    if (*v332 >= v332[3]) {
      v344 = v332[2];
    }
    *v332 = v344 + 1;
    char *v344 = 72;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_6d(v332, (int)fmin(*(double *)(v333 + 27568), 99999.0));
    v345 = (*v332)++;
    char *v345 = 32;
    v346 = *v332;
    if (*v332 >= v332[3]) {
      v346 = v332[2];
    }
    *v332 = v346 + 1;
    char *v346 = 86;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_6d(v332, (int)fmin(*(double *)(v333 + 27576), 99999.0));
    v347 = (*v332)++;
    char *v347 = 32;
    v348 = *v332;
    if (*v332 >= v332[3]) {
      v348 = v332[2];
    }
    *v332 = v348 + 1;
    char *v348 = 66;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_6d(v332, (int)fmin(*(double *)(v333 + 27584), 99999.0));
    v349 = (*v332)++;
    char *v349 = 32;
    v350 = *v332;
    if (*v332 >= v332[3]) {
      v350 = v332[2];
    }
    *v332 = v350 + 1;
    char *v350 = 83;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_6d(v332, (int)fmin(*(double *)(v333 + 27592), 99999.0));
    v351 = (*v332)++;
    char *v351 = 32;
    v352 = *v332;
    if (*v332 >= v332[3]) {
      v352 = v332[2];
    }
    *v332 = v352 + 1;
    char *v352 = 72;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, *(char *)(v333 + 27528));
    v353 = (*v332)++;
    char *v353 = 32;
    v354 = *v332;
    if (*v332 >= v332[3]) {
      v354 = v332[2];
    }
    *v332 = v354 + 1;
    char *v354 = 86;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, *(char *)(v333 + 27529));
    v355 = (*v332)++;
    char *v355 = 32;
    v356 = *v332;
    if (*v332 >= v332[3]) {
      v356 = v332[2];
    }
    *v332 = v356 + 1;
    char *v356 = 66;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, *(char *)(v333 + 27530));
    v357 = (*v332)++;
    char *v357 = 32;
    v358 = *v332;
    if (*v332 >= v332[3]) {
      v358 = v332[2];
    }
    *v332 = v358 + 1;
    char *v358 = 83;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, *(char *)(v333 + 27531));
    v359 = (*v332)++;
    char *v359 = 32;
    v360 = *v332;
    if (*v332 >= v332[3]) {
      v360 = v332[2];
    }
    *v332 = v360 + 1;
    char *v360 = 86;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, *(char *)(v333 + 27712));
    double v361 = *(double *)(v333 + 27704);
    if (v361 >= 9.89999962) {
      double v362 = 98.9999962;
    }
    else {
      double v362 = v361 * 10.0;
    }
    double v363 = -0.5;
    if (v362 > 0.0) {
      double v363 = 0.5;
    }
    double v364 = v362 + v363;
    if (v364 <= 2147483650.0)
    {
      if (v364 >= -2147483650.0) {
        unsigned int v365 = (int)v364;
      }
      else {
        unsigned int v365 = 0x80000000;
      }
    }
    else
    {
      unsigned int v365 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v332, v365, 2);
    v366 = (*v332)++;
    char *v366 = 32;
    v367 = *v332;
    if (*v332 >= v332[3]) {
      v367 = v332[2];
    }
    *v332 = v367 + 1;
    char *v367 = 72;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, (int)fmin(*(double *)(v333 + 27664), 99.0));
    v368 = (*v332)++;
    char *v368 = 32;
    v369 = *v332;
    if (*v332 >= v332[3]) {
      v369 = v332[2];
    }
    *v332 = v369 + 1;
    char *v369 = 86;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, (int)fmin(*(double *)(v333 + 27672), 99.0));
    v370 = (*v332)++;
    char *v370 = 32;
    v371 = *v332;
    if (*v332 >= v332[3]) {
      v371 = v332[2];
    }
    *v332 = v371 + 1;
    char *v371 = 66;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, (int)fmin(*(double *)(v333 + 27680), 99.0));
    v372 = (*v332)++;
    char *v372 = 32;
    v373 = *v332;
    if (*v332 >= v332[3]) {
      v373 = v332[2];
    }
    *v332 = v373 + 1;
    char *v373 = 83;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_3d(v332, (int)fmin(*(double *)(v333 + 27688), 99.0));
    v374 = (*v332)++;
    char *v374 = 32;
    v375 = *v332;
    if (*v332 >= v332[3]) {
      v375 = v332[2];
    }
    *v332 = v375 + 1;
    char *v375 = 72;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_4d(v332, *(char *)(v333 + 27624));
    v376 = (*v332)++;
    char *v376 = 32;
    v377 = *v332;
    if (*v332 >= v332[3]) {
      v377 = v332[2];
    }
    *v332 = v377 + 1;
    char *v377 = 86;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_4d(v332, *(char *)(v333 + 27625));
    v378 = (*v332)++;
    char *v378 = 32;
    v379 = *v332;
    if (*v332 >= v332[3]) {
      v379 = v332[2];
    }
    *v332 = v379 + 1;
    char *v379 = 66;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_4d(v332, *(char *)(v333 + 27626));
    v380 = (*v332)++;
    char *v380 = 32;
    v381 = *v332;
    if (*v332 >= v332[3]) {
      v381 = v332[2];
    }
    *v332 = v381 + 1;
    char *v381 = 83;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_4d(v332, *(char *)(v333 + 27627));
    v382 = (*v332)++;
    char *v382 = 10;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v332);
    v332 = (char **)a1[35];
  }
  uint64_t v383 = a1[7];
  v384 = a1;
  uint64_t v385 = a1[5];
  v1458 = v384;
  v386 = (unsigned char *)v384[9];
  v387 = *v332;
  char v388 = 78;
  uint64_t v389 = 1u;
  do
  {
    *v332 = v387 + 1;
    char *v387 = v388;
    v387 = *v332;
    if (*v332 >= v332[3])
    {
      v387 = v332[2];
      *v332 = v387;
    }
    char v388 = aNavm[v389++];
  }
  while (v389 != 7);
  if (v386[22])
  {
    uint64_t v390 = 0;
    unint64_t v391 = 0;
    char v392 = 31;
    uint64_t v393 = 224;
    do
    {
      if (*(unsigned char *)(*(void *)(v383 + 80) + v390)) {
        char v394 = 65;
      }
      else {
        char v394 = 45;
      }
      if (*(unsigned char *)(*(void *)(v383 + 64) + v390) || *(unsigned char *)(*(void *)(v383 + 72) + v390)) {
        v394 += 24;
      }
      if (!*(unsigned char *)(*(void *)v383 + v390)) {
        v394 += 32;
      }
      if (v394 == 77) {
        char v394 = 46;
      }
      if (*(unsigned char *)(*(void *)(v383 + 64) + v390)) {
        BOOL v395 = *(unsigned char *)(*(void *)v383 + v390) == 0;
      }
      else {
        BOOL v395 = 1;
      }
      if (!v395 && *(_DWORD *)(v383 + v393) == 0xFFFFFF) {
        unint64_t v391 = v391 | (1 << v392);
      }
      *v332 = v387 + 1;
      char *v387 = v394;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      if ((~(_BYTE)v390 & 3) == 0)
      {
        *v332 = v387 + 1;
        char *v387 = 32;
        v387 = *v332;
        if (*v332 >= v332[3])
        {
          v387 = v332[2];
          *v332 = v387;
        }
      }
      ++v390;
      --v392;
      v393 += 116;
    }
    while (v390 != 32);
    char v396 = 32;
    uint64_t v397 = 1u;
    do
    {
      *v332 = v387 + 1;
      char *v387 = v396;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      char v396 = asc_263D5BC95[v397++];
    }
    while (v397 != 8);
    for (uint64_t m = 0; m != 32; ++m)
    {
      if (v386[m + 257])
      {
        LOBYTE(v399) = 46;
      }
      else if (v386[m + 536])
      {
        LOBYTE(v399) = 58;
      }
      else
      {
        unsigned int v400 = *(_DWORD *)(v385 + 7720 + 4 * m);
        BOOL v1147 = v400 > 2;
        unsigned int v399 = 0x6E564Du >> (8 * v400);
        if (v1147) {
          LOBYTE(v399) = 120;
        }
      }
      *v332 = v387 + 1;
      char *v387 = v399;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      if ((~(_BYTE)m & 3) == 0)
      {
        *v332 = v387 + 1;
        char *v387 = 32;
        v387 = *v332;
        if (*v332 >= v332[3])
        {
          v387 = v332[2];
          *v332 = v387;
        }
      }
    }
    uint64_t v401 = 0;
    char v402 = 32;
    do
    {
      *v332 = v387 + 1;
      char *v387 = v402;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      char v402 = asc_263D5BC9D[++v401];
    }
    while (v401 != 8);
    v1514[0] = hexTABLE[(unint64_t)v391 >> 28];
    v1514[1] = hexTABLE[(v391 >> 24) & 0xF];
    hex6((uint64_t)v332, v391, v1514, 2);
    sprintf_sp1d(v332, *(_DWORD *)(v383 + 8956));
    sprintf_sp1d(v332, *(_DWORD *)(v383 + 8972));
    v387 = *v332;
  }
  else
  {
    char v403 = 71;
    uint64_t v404 = 1u;
    do
    {
      *v332 = v387 + 1;
      char *v387 = v403;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      char v403 = aGpsDisabled[v404++];
    }
    while (v404 != 15);
  }
  char v405 = 32;
  uint64_t v406 = 1u;
  do
  {
    *v332 = v387 + 1;
    char *v387 = v405;
    v387 = *v332;
    if (*v332 >= v332[3])
    {
      v387 = v332[2];
      *v332 = v387;
    }
    char v405 = aQzss[v406++];
  }
  while (v406 != 8);
  if (v386[24])
  {
    uint64_t v407 = 0;
    unint64_t v408 = 0;
    v409 = (_DWORD *)(v383 + 9256);
    char v410 = 9;
    do
    {
      if (*(unsigned char *)(*(void *)(v383 + 9112) + v407)) {
        char v411 = 65;
      }
      else {
        char v411 = 45;
      }
      if (*(unsigned char *)(*(void *)(v383 + 9096) + v407) || *(unsigned char *)(*(void *)(v383 + 9104) + v407)) {
        v411 += 24;
      }
      if (!*(unsigned char *)(*(void *)(v383 + 9032) + v407)) {
        v411 += 32;
      }
      if (v411 == 77) {
        char v411 = 46;
      }
      if (*(unsigned char *)(*(void *)(v383 + 9096) + v407)) {
        BOOL v412 = *(unsigned char *)(*(void *)(v383 + 9032) + v407) == 0;
      }
      else {
        BOOL v412 = 1;
      }
      if (!v412)
      {
        if (*v409 == 0xFFFFFF) {
          unint64_t v408 = v408 | (1 << v410);
        }
        else {
          unint64_t v408 = v408;
        }
      }
      *v332 = v387 + 1;
      char *v387 = v411;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      ++v407;
      --v410;
      v409 += 29;
    }
    while (v407 != 10);
    *v332 = v387 + 1;
    char *v387 = 32;
    v413 = *v332;
    if (*v332 >= v332[3]) {
      v413 = v332[2];
    }
    for (uint64_t n = 0; n != 10; ++n)
    {
      if (v386[n + 412])
      {
        LOBYTE(v415) = 46;
      }
      else if (v386[n + 691])
      {
        LOBYTE(v415) = 58;
      }
      else
      {
        unsigned int v416 = *(_DWORD *)(v385 + 8340 + 4 * n);
        BOOL v1147 = v416 > 2;
        unsigned int v415 = 0x6E564Du >> (8 * v416);
        if (v1147) {
          LOBYTE(v415) = 120;
        }
      }
      *v332 = v413 + 1;
      char *v413 = v415;
      v413 = *v332;
      if (*v332 >= v332[3])
      {
        v413 = v332[2];
        *v332 = v413;
      }
    }
    *v332 = v413 + 1;
    char *v413 = 32;
    if (*v332 >= v332[3]) {
      *v332 = v332[2];
    }
    sprintf_03x(v332, v408);
    v387 = *v332;
  }
  else
  {
    char v417 = 68;
    uint64_t v418 = 1u;
    do
    {
      *v332 = v387 + 1;
      char *v387 = v417;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      char v417 = aDisabled[v418++];
    }
    while (v418 != 11);
  }
  char v419 = 32;
  uint64_t v420 = 1u;
  do
  {
    *v332 = v387 + 1;
    char *v387 = v419;
    v387 = *v332;
    if (*v332 >= v332[3])
    {
      v387 = v332[2];
      *v332 = v387;
    }
    char v419 = aSbas[v420++];
  }
  while (v420 != 8);
  if (v386[25])
  {
    uint64_t v421 = 0;
    v422 = v1458;
    do
    {
      unint64_t v423 = *(unsigned __int8 *)(v385 + 8783 + v421);
      if (v423 >= 3) {
        char v424 = 90;
      }
      else {
        char v424 = 0x41452Du >> (8 * v423);
      }
      *v332 = v387 + 1;
      char *v387 = v424;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      ++v421;
    }
    while (v421 != 39);
    sprintf_sp1d(v332, *(unsigned __int8 *)(v385 + 8822));
    sprintf_sp1d(v332, *(unsigned __int8 *)(v385 + 8823));
    v387 = *v332;
  }
  else
  {
    char v425 = 68;
    uint64_t v426 = 1u;
    v422 = v1458;
    do
    {
      *v332 = v387 + 1;
      char *v387 = v425;
      v387 = *v332;
      if (*v332 >= v332[3])
      {
        v387 = v332[2];
        *v332 = v387;
      }
      char v425 = aDisabled_0[v426++];
    }
    while (v426 != 10);
  }
  *v332 = v387 + 1;
  char *v387 = 10;
  if (*v332 >= v332[3]) {
    *v332 = v332[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v332);
  uint64_t v427 = v422[35];
  uint64_t v428 = v422[9];
  v429 = (void *)v422[7];
  v430 = (char *)v429 + 11988;
  uint64_t v431 = v422[5];
  uint64_t v432 = v422[16];
  v433 = *(char **)v427;
  char v434 = 71;
  uint64_t v435 = 1u;
  do
  {
    *(void *)uint64_t v427 = v433 + 1;
    char *v433 = v434;
    v433 = *(char **)v427;
    if (*(void *)v427 >= *(void *)(v427 + 24))
    {
      v433 = *(char **)(v427 + 16);
      *(void *)uint64_t v427 = v433;
    }
    char v434 = aGlom[v435++];
  }
  while (v435 != 7);
  if (*(unsigned char *)(v428 + 23))
  {
    uint64_t v436 = 0;
    unint64_t v437 = 0;
    char v438 = 23;
    v439 = (_WORD *)v429 + 5994;
    do
    {
      if (*(unsigned char *)(v429[2148] + v436)) {
        char v440 = 65;
      }
      else {
        char v440 = 45;
      }
      if (*(unsigned char *)(v429[2146] + v436) || *(unsigned char *)(v429[2147] + v436)) {
        v440 += 24;
      }
      if (!*(unsigned char *)(v429[1489] + v436)) {
        v440 += 32;
      }
      if (v440 == 77) {
        char v440 = 46;
      }
      if (*(unsigned char *)(v429[2146] + v436)) {
        BOOL v441 = *(unsigned char *)(v429[1489] + v436) == 0;
      }
      else {
        BOOL v441 = 1;
      }
      if (!v441)
      {
        if (*v439 == 4095) {
          unint64_t v437 = v437 | (1 << v438);
        }
        else {
          unint64_t v437 = v437;
        }
      }
      *(void *)uint64_t v427 = v433 + 1;
      char *v433 = v440;
      v433 = *(char **)v427;
      if (*(void *)v427 >= *(void *)(v427 + 24))
      {
        v433 = *(char **)(v427 + 16);
        *(void *)uint64_t v427 = v433;
      }
      if ((~(_BYTE)v436 & 3) == 0)
      {
        *(void *)uint64_t v427 = v433 + 1;
        char *v433 = 32;
        v433 = *(char **)v427;
        if (*(void *)v427 >= *(void *)(v427 + 24))
        {
          v433 = *(char **)(v427 + 16);
          *(void *)uint64_t v427 = v433;
        }
      }
      ++v436;
      --v438;
      v439 += 32;
    }
    while (v436 != 24);
    char v442 = 32;
    uint64_t v443 = 1u;
    do
    {
      *(void *)uint64_t v427 = v433 + 1;
      char *v433 = v442;
      v433 = *(char **)v427;
      if (*(void *)v427 >= *(void *)(v427 + 24))
      {
        v433 = *(char **)(v427 + 16);
        *(void *)uint64_t v427 = v433;
      }
      char v442 = asc_263D5BCD2[v443++];
    }
    while (v443 != 18);
    uint64_t v444 = 0;
    uint64_t v445 = v428 + 289;
    do
    {
      if (*(unsigned char *)(v445 + v444))
      {
        LOBYTE(v446) = 46;
      }
      else
      {
        unsigned int v447 = *(_DWORD *)(v431 + 7848 + 4 * v444);
        BOOL v1147 = v447 > 2;
        unsigned int v446 = 0x6E564Du >> (8 * v447);
        if (v1147) {
          LOBYTE(v446) = 120;
        }
      }
      *(void *)uint64_t v427 = v433 + 1;
      char *v433 = v446;
      v433 = *(char **)v427;
      if (*(void *)v427 >= *(void *)(v427 + 24))
      {
        v433 = *(char **)(v427 + 16);
        *(void *)uint64_t v427 = v433;
      }
      if ((~((_BYTE)v444 + 32) & 3) == 0)
      {
        *(void *)uint64_t v427 = v433 + 1;
        char *v433 = 32;
        v433 = *(char **)v427;
        if (*(void *)v427 >= *(void *)(v427 + 24))
        {
          v433 = *(char **)(v427 + 16);
          *(void *)uint64_t v427 = v433;
        }
      }
      ++v444;
    }
    while (v444 != 24);
    uint64_t v448 = 0;
    uint64_t v449 = v431 + 8600;
    do
    {
      unsigned int v450 = *(_DWORD *)(v449 + 4 * v448);
      if (v450 >= 3) {
        char v451 = 120;
      }
      else {
        char v451 = 0x6E564Du >> (8 * v450);
      }
      *(void *)uint64_t v427 = v433 + 1;
      char *v433 = v451;
      v433 = *(char **)v427;
      if (*(void *)v427 >= *(void *)(v427 + 24))
      {
        v433 = *(char **)(v427 + 16);
        *(void *)uint64_t v427 = v433;
      }
      if ((~(_BYTE)v448 & 3) == 0)
      {
        *(void *)uint64_t v427 = v433 + 1;
        char *v433 = 32;
        v433 = *(char **)v427;
        if (*(void *)v427 >= *(void *)(v427 + 24))
        {
          v433 = *(char **)(v427 + 16);
          *(void *)uint64_t v427 = v433;
        }
      }
      ++v448;
    }
    while (v448 != 14);
    *(void *)uint64_t v427 = v433 + 1;
    char *v433 = 32;
    if (*(void *)v427 >= *(void *)(v427 + 24)) {
      *(void *)uint64_t v427 = *(void *)(v427 + 16);
    }
    sprintf_06x((char **)v427, v437);
    v452 = *(char **)v427;
    for (iunsigned int i = 3; ii > 1; --ii)
    {
      *(void *)uint64_t v427 = v452 + 1;
      char *v452 = 32;
      v452 = *(char **)v427;
      if (*(void *)v427 >= *(void *)(v427 + 24))
      {
        v452 = *(char **)(v427 + 16);
        *(void *)uint64_t v427 = v452;
      }
    }
    int v454 = *((_DWORD *)v430 + 1282);
    if (v454 >= 0) {
      unsigned int v455 = *((_DWORD *)v430 + 1282);
    }
    else {
      unsigned int v455 = -v454;
    }
    sprintf1da((void *)v427, v455, v1514, 0, v454 >> 31);
    sprintf_sgR8((void *)v427, (double)*((int *)v430 + 1286) * 9.31322575e-10 * 299792458.0);
    sprintf_sgR8((void *)v427, *(double *)(v432 + 15528));
    v456 = (unsigned char *)(*(void *)v427)++;
    unsigned char *v456 = 10;
    if (*(void *)v427 >= *(void *)(v427 + 24)) {
      *(void *)uint64_t v427 = *(void *)(v427 + 16);
    }
    GNSS_Nav_Debug_Flush_Check(v427);
  }
  else
  {
    char v457 = 68;
    uint64_t v458 = 1u;
    do
    {
      *(void *)uint64_t v427 = v433 + 1;
      char *v433 = v457;
      v433 = *(char **)v427;
      if (*(void *)v427 >= *(void *)(v427 + 24))
      {
        v433 = *(char **)(v427 + 16);
        *(void *)uint64_t v427 = v433;
      }
      char v457 = aDisabled_0[v458++];
    }
    while (v458 != 10);
    *(void *)uint64_t v427 = v433 + 1;
    char *v433 = 10;
    if (*(void *)v427 >= *(void *)(v427 + 24)) {
      *(void *)uint64_t v427 = *(void *)(v427 + 16);
    }
  }
  v459 = (char **)v422[35];
  uint64_t v461 = v422[6];
  uint64_t v460 = v422[7];
  uint64_t v462 = v422[9];
  uint64_t v463 = v422[5];
  uint64_t v464 = v422[16];
  uint64_t v465 = v422[21];
  v466 = *v459;
  char v467 = 71;
  uint64_t v468 = 1u;
  do
  {
    *v459 = v466 + 1;
    char *v466 = v467;
    v466 = *v459;
    if (*v459 >= v459[3])
    {
      v466 = v459[2];
      *v459 = v466;
    }
    char v467 = aGalm[v468++];
  }
  while (v468 != 7);
  if (*(unsigned char *)(v462 + 27))
  {
    uint64_t v469 = 0;
    unint64_t v470 = 0;
    char v471 = 35;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v460 + 17632) + v469)) {
        char v472 = 65;
      }
      else {
        char v472 = 45;
      }
      if (*(unsigned char *)(*(void *)(v460 + 17616) + v469) || *(unsigned char *)(*(void *)(v460 + 17624) + v469)) {
        v472 += 24;
      }
      if (!*(unsigned char *)(*(void *)(v460 + 17552) + v469)) {
        v472 += 32;
      }
      if (v472 == 77)
      {
        char v472 = 46;
      }
      else if (*(unsigned char *)(v460 + 17672 + v469))
      {
        if (!*(unsigned char *)(*(void *)(v460 + 17616) + v469))
        {
          if (*(unsigned char *)(*(void *)(v460 + 17624) + v469)) {
            char v472 = 77;
          }
          else {
            char v472 = 109;
          }
          goto LABEL_818;
        }
        char v472 = 77;
LABEL_815:
        if (*(unsigned char *)(*(void *)(v460 + 17552) + v469)) {
          unint64_t v470 = v470 | (1 << v471);
        }
        else {
          unint64_t v470 = v470;
        }
        goto LABEL_818;
      }
      if (*(unsigned char *)(*(void *)(v460 + 17616) + v469)) {
        goto LABEL_815;
      }
LABEL_818:
      *v459 = v466 + 1;
      char *v466 = v472;
      v466 = *v459;
      if (*v459 >= v459[3])
      {
        v466 = v459[2];
        *v459 = v466;
      }
      if ((~(_BYTE)v469 & 3) == 0)
      {
        *v459 = v466 + 1;
        char *v466 = 32;
        v466 = *v459;
        if (*v459 >= v459[3])
        {
          v466 = v459[2];
          *v459 = v466;
        }
      }
      ++v469;
      --v471;
      if (v469 == 36)
      {
        uint64_t v473 = 0;
        char v474 = 32;
        do
        {
          *v459 = v466 + 1;
          char *v466 = v474;
          v466 = *v459;
          if (*v459 >= v459[3])
          {
            v466 = v459[2];
            *v459 = v466;
          }
          char v474 = asc_263D5BBA1[++v473];
        }
        while (v473 != 2);
        uint64_t v475 = 0;
        uint64_t v476 = v463 + 7944;
        do
        {
          if (*(unsigned char *)(v462 + v475 + 313))
          {
            LOBYTE(v477) = 46;
          }
          else if (*(unsigned char *)(v462 + v475 + 592))
          {
            LOBYTE(v477) = 58;
          }
          else
          {
            unsigned int v478 = *(_DWORD *)(v476 + 4 * v475);
            BOOL v1147 = v478 > 2;
            unsigned int v477 = 0x6E564Du >> (8 * v478);
            if (v1147) {
              LOBYTE(v477) = 120;
            }
          }
          *v459 = v466 + 1;
          char *v466 = v477;
          v466 = *v459;
          if (*v459 >= v459[3])
          {
            v466 = v459[2];
            *v459 = v466;
          }
          if ((~((_BYTE)v475 + 56) & 3) == 0)
          {
            *v459 = v466 + 1;
            char *v466 = 32;
            v466 = *v459;
            if (*v459 >= v459[3])
            {
              v466 = v459[2];
              *v459 = v466;
            }
          }
          ++v475;
        }
        while (v475 != 36);
        char v479 = 32;
        uint64_t v480 = 1u;
        do
        {
          *v459 = v466 + 1;
          char *v466 = v479;
          v466 = *v459;
          if (*v459 >= v459[3])
          {
            v466 = v459[2];
            *v459 = v466;
          }
          char v479 = asc_263D5BCFA[v480++];
        }
        while (v480 != 4);
        v1514[0] = hexTABLE[(unint64_t)v470 >> 28];
        v1514[1] = hexTABLE[(v470 >> 24) & 0xF];
        hex6((uint64_t)v459, v470, v1514, 2);
        sprintf_sp1d(v459, *(_DWORD *)(v460 + 25344));
        double v481 = 0.0;
        if ((*(_DWORD *)(v460 + 25344) - 2) < 5)
        {
          double v481 = *(double *)(v460 + 25368);
          if (*(int *)v461 >= 1)
          {
            if (*(unsigned char *)(v461 + 16)) {
              double v481 = *(double *)(v465 + 1496);
            }
          }
        }
        sprintf_sgR8(v459, v481 * 299792458.0);
        sprintf_sgR8(v459, *(double *)(v464 + 15544));
        v482 = (*v459)++;
        char *v482 = 10;
        if (*v459 >= v459[3]) {
          *v459 = v459[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v459);
        goto LABEL_861;
      }
    }
  }
  char v483 = 71;
  uint64_t v484 = 1u;
  do
  {
    *v459 = v466 + 1;
    char *v466 = v483;
    v466 = *v459;
    if (*v459 >= v459[3])
    {
      v466 = v459[2];
      *v459 = v466;
    }
    char v483 = aGalDisabled[v484++];
  }
  while (v484 != 15);
  *v459 = v466 + 1;
  char *v466 = 10;
  if (*v459 >= v459[3]) {
    *v459 = v459[2];
  }
LABEL_861:
  v485 = (char **)v1458[35];
  uint64_t v487 = v1458[6];
  v486 = (void *)v1458[7];
  v488 = (double *)(v486 + 5930);
  uint64_t v489 = v1458[9];
  uint64_t v490 = v1458[5];
  uint64_t v491 = v1458[16];
  v492 = *v485;
  char v493 = 66;
  uint64_t v494 = 1u;
  do
  {
    *v485 = v492 + 1;
    char *v492 = v493;
    v492 = *v485;
    if (*v485 >= v485[3])
    {
      v492 = v485[2];
      *v485 = v492;
    }
    char v493 = aBdsm[v494++];
  }
  while (v494 != 7);
  if (*(unsigned char *)(v489 + 26))
  {
    for (jdouble j = 0; jj != 63; ++jj)
    {
      if (*(unsigned char *)(v486[3184] + jj)) {
        char v496 = 65;
      }
      else {
        char v496 = 45;
      }
      if (*(unsigned char *)(v486[3182] + jj) || *(unsigned char *)(v486[3183] + jj)) {
        v496 += 24;
      }
      if (!*(unsigned char *)(v486[3174] + jj)) {
        v496 += 32;
      }
      if (v496 == 77) {
        char v496 = 46;
      }
      *v485 = v492 + 1;
      char *v492 = v496;
      v492 = *v485;
      if (*v485 >= v485[3])
      {
        v492 = v485[2];
        *v485 = v492;
      }
      if ((~(_BYTE)jj & 3) == 0)
      {
        *v485 = v492 + 1;
        char *v492 = 32;
        v492 = *v485;
        if (*v485 >= v485[3])
        {
          v492 = v485[2];
          *v485 = v492;
        }
      }
    }
    char v497 = 32;
    uint64_t v498 = 1u;
    do
    {
      *v485 = v492 + 1;
      char *v492 = v497;
      v492 = *v485;
      if (*v485 >= v485[3])
      {
        v492 = v485[2];
        *v485 = v492;
      }
      char v497 = asc_263D5BCFA[v498++];
    }
    while (v498 != 4);
    uint64_t v499 = 0;
    uint64_t v500 = v490 + 8088;
    do
    {
      if (*(unsigned char *)(v489 + v499 + 349))
      {
        LOBYTE(v501) = 46;
      }
      else if (*(unsigned char *)(v489 + v499 + 628))
      {
        LOBYTE(v501) = 58;
      }
      else
      {
        unsigned int v502 = *(_DWORD *)(v500 + 4 * v499);
        BOOL v1147 = v502 > 2;
        unsigned int v501 = 0x6E564Du >> (8 * v502);
        if (v1147) {
          LOBYTE(v501) = 120;
        }
      }
      *v485 = v492 + 1;
      char *v492 = v501;
      v492 = *v485;
      if (*v485 >= v485[3])
      {
        v492 = v485[2];
        *v485 = v492;
      }
      if ((~((_BYTE)v499 + 92) & 3) == 0)
      {
        *v485 = v492 + 1;
        char *v492 = 32;
        v492 = *v485;
        if (*v485 >= v485[3])
        {
          v492 = v485[2];
          *v485 = v492;
        }
      }
      ++v499;
    }
    while (v499 != 63);
    *v485 = v492 + 1;
    char *v492 = 32;
    if (*v485 >= v485[3]) {
      *v485 = v485[2];
    }
    sprintf_sp1d(v485, *(_DWORD *)v488);
    double v504 = 0.0;
    if ((*(_DWORD *)v488 - 2) < 5)
    {
      double v504 = v488[9];
      if (*(int *)v487 >= 1)
      {
        if (*(unsigned char *)(v487 + 16))
        {
          LODWORD(v503) = *((_DWORD *)v488 + 2);
          double v505 = *(double *)(v487 + 40)
               - (double)v503
               + (double)(604800 * (*(__int16 *)(v487 + 32) - *((unsigned __int16 *)v488 + 2)));
          unsigned int v506 = (int)v505;
          if ((int)v505 < 0) {
            unsigned int v506 = -v506;
          }
          if (v506 >> 5 <= 0xE0) {
            double v504 = v504 + v488[10] * v505;
          }
        }
      }
    }
    sprintf_sgR8(v485, v504 * 299792458.0);
    sprintf_sgR8(v485, *(double *)(v491 + 15560));
    sprintf_sgR8(v485, v488[14] * 299792458.0);
    v507 = (*v485)++;
    char *v507 = 10;
    if (*v485 >= v485[3]) {
      *v485 = v485[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v485);
  }
  else
  {
    char v508 = 66;
    uint64_t v509 = 1u;
    do
    {
      *v485 = v492 + 1;
      char *v492 = v508;
      v492 = *v485;
      if (*v485 >= v485[3])
      {
        v492 = v485[2];
        *v485 = v492;
      }
      char v508 = aBdsDisabled[v509++];
    }
    while (v509 != 15);
    *v485 = v492 + 1;
    char *v492 = 10;
    if (*v485 >= v485[3]) {
      *v485 = v485[2];
    }
  }
  v510 = (char **)v1458[35];
  uint64_t v511 = v1458[6];
  uint64_t v512 = v1458[7] + 47584;
  uint64_t v513 = v1458[9];
  uint64_t v514 = v1458[5];
  uint64_t v515 = v1458[16];
  v516 = *v510;
  char v517 = 78;
  uint64_t v518 = 1u;
  do
  {
    *v510 = v516 + 1;
    char *v516 = v517;
    v516 = *v510;
    if (*v510 >= v510[3])
    {
      v516 = v510[2];
      *v510 = v516;
    }
    char v517 = aNvcm[v518++];
  }
  while (v518 != 7);
  if (*(unsigned char *)(v513 + 28))
  {
    for (kdouble k = 0; kk != 14; ++kk)
    {
      if (*(unsigned char *)(*(void *)(v512 + 72) + kk)) {
        char v520 = 65;
      }
      else {
        char v520 = 45;
      }
      if (*(unsigned char *)(*(void *)(v512 + 56) + kk) || *(unsigned char *)(*(void *)(v512 + 64) + kk)) {
        v520 += 24;
      }
      if (!*(unsigned char *)(*(void *)v512 + kk)) {
        v520 += 32;
      }
      if (v520 == 77) {
        char v520 = 58;
      }
      *v510 = v516 + 1;
      char *v516 = v520;
      v516 = *v510;
      if (*v510 >= v510[3])
      {
        v516 = v510[2];
        *v510 = v516;
      }
      if ((~(_BYTE)kk & 3) == 0)
      {
        *v510 = v516 + 1;
        char *v516 = 32;
        v516 = *v510;
        if (*v510 >= v510[3])
        {
          v516 = v510[2];
          *v510 = v516;
        }
      }
    }
    char v521 = 32;
    uint64_t v522 = 1u;
    do
    {
      *v510 = v516 + 1;
      char *v516 = v521;
      v516 = *v510;
      if (*v510 >= v510[3])
      {
        v516 = v510[2];
        *v510 = v516;
      }
      char v521 = asc_263D5BCFA[v522++];
    }
    while (v522 != 4);
    uint64_t v523 = 0;
    uint64_t v524 = v514 + 8380;
    uint64_t v525 = v513 + 701;
    v526 = v1458;
    do
    {
      if (*(unsigned char *)(v525 + v523))
      {
        LOBYTE(v527) = 58;
      }
      else
      {
        unsigned int v528 = *(_DWORD *)(v524 + 4 * v523);
        BOOL v1147 = v528 > 2;
        unsigned int v527 = 0x6E564Du >> (8 * v528);
        if (v1147) {
          LOBYTE(v527) = 120;
        }
      }
      *v510 = v516 + 1;
      char *v516 = v527;
      v516 = *v510;
      if (*v510 >= v510[3])
      {
        v516 = v510[2];
        *v510 = v516;
      }
      if ((~((_BYTE)v523 - 91) & 3) == 0)
      {
        *v510 = v516 + 1;
        char *v516 = 32;
        v516 = *v510;
        if (*v510 >= v510[3])
        {
          v516 = v510[2];
          *v510 = v516;
        }
      }
      ++v523;
    }
    while (v523 != 14);
    *v510 = v516 + 1;
    char *v516 = 32;
    if (*v510 >= v510[3]) {
      *v510 = v510[2];
    }
    sprintf_sp1d(v510, *(_DWORD *)(v512 + 2972));
    double v529 = 0.0;
    if ((*(_DWORD *)(v512 + 2972) - 2) < 5 && *(int *)v511 >= 1)
    {
      double v529 = *(double *)(v512 + 3000);
      if (*(unsigned char *)(v511 + 16))
      {
        if (*(__int16 *)(v512 + 3028) - *(__int16 *)(v511 + 32) >= 0) {
          int v530 = -((*(__int16 *)(v512 + 3028) - *(__int16 *)(v511 + 32)) & 0x3FF);
        }
        else {
          int v530 = (*(_WORD *)(v511 + 32) - *(_WORD *)(v512 + 3028)) & 0x3FF;
        }
        if (v530 > 511) {
          v530 -= 1024;
        }
        if (v530 < -512) {
          v530 += 1024;
        }
        double v531 = *(double *)(v511 + 40) - (double)*(int *)(v512 + 3024) + (double)(604800 * v530);
        double v529 = v529 + *(double *)(v512 + 3008) * v531 + *(double *)(v512 + 3016) * (v531 * v531);
      }
    }
    sprintf_sgR8(v510, v529 * 299792458.0);
    sprintf_sgR8(v510, *(double *)(v515 + 15576));
    v532 = (*v510)++;
    char *v532 = 10;
    if (*v510 >= v510[3]) {
      *v510 = v510[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v510);
  }
  else
  {
    uint64_t v533 = 0;
    char v534 = 78;
    v526 = v1458;
    do
    {
      *v510 = v516 + 1;
      char *v516 = v534;
      v516 = *v510;
      if (*v510 >= v510[3])
      {
        v516 = v510[2];
        *v510 = v516;
      }
      char v534 = aNavicDisabled[++v533];
    }
    while (v533 != 16);
    *v510 = v516 + 1;
    char *v516 = 10;
    if (*v510 >= v510[3]) {
      *v510 = v510[2];
    }
  }
  v535 = (char **)v526[35];
  if (g_Logging_Cfg >= 5)
  {
    uint64_t v536 = v526[11];
    uint64_t v537 = v526[6];
    int v538 = *(__int16 *)(v537 + 32);
    double v539 = *(double *)(v537 + 40);
    v540 = *v535;
    char v541 = 83;
    uint64_t v542 = 1u;
    do
    {
      *v535 = v540 + 1;
      char *v540 = v541;
      v540 = *v535;
      if (*v535 >= v535[3])
      {
        v540 = v535[2];
        *v535 = v540;
      }
      char v541 = aStage[v542++];
    }
    while (v542 != 7);
    uint64_t v543 = 0;
    int v544 = (int)v539;
    while (!*(_DWORD *)(v536 + 192 * v543 + 176))
    {
LABEL_1011:
      if (++v543 == 197)
      {
        v552 = (*v535)++;
        char *v552 = 10;
        if (*v535 >= v535[3]) {
          *v535 = v535[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v535);
        v526 = v1458;
        v535 = (char **)v1458[35];
        goto LABEL_1015;
      }
    }
    if (v543 <= 91)
    {
      switch(v543)
      {
        case 0:
          v545 = "  G ";
          goto LABEL_1000;
        case 32:
          v545 = "  R ";
          goto LABEL_1000;
        case 56:
          v545 = "  E ";
          goto LABEL_1000;
      }
    }
    else if (v543 > 164)
    {
      if (v543 == 165)
      {
        v545 = "  N ";
        goto LABEL_1000;
      }
      if (v543 == 179)
      {
        v545 = "  S ";
        goto LABEL_1000;
      }
    }
    else
    {
      if (v543 == 92)
      {
        v545 = "  B ";
        goto LABEL_1000;
      }
      if (v543 == 155)
      {
        v545 = "  Q ";
LABEL_1000:
        char v546 = *v545;
        if (*v545)
        {
          v547 = *v535;
          v548 = (unsigned __int8 *)(v545 + 1);
          do
          {
            *v535 = v547 + 1;
            char *v547 = v546;
            v547 = *v535;
            if (*v535 >= v535[3])
            {
              v547 = v535[2];
              *v535 = v547;
            }
            int v549 = *v548++;
            char v546 = v549;
          }
          while (v549);
        }
      }
    }
    int v550 = v544 - *(_DWORD *)(v536 + 192 * v543 + 160) + 604800 * (v538 - *(__int16 *)(v536 + 192 * v543 + 164));
    if (v550 >= 99) {
      int v550 = 99;
    }
    if (v550 <= -99) {
      int v551 = -99;
    }
    else {
      int v551 = v550;
    }
    sprintf_sp1d(v535, v551);
    goto LABEL_1011;
  }
LABEL_1015:
  v553 = (unsigned __int8 *)v526[10];
  v554 = (double *)(v526[21] + 61688);
  v555 = (double *)(v526[16] + 68160);
  uint64_t v556 = v526[30];
  v557 = *v535;
  char v558 = 65;
  uint64_t v559 = 1u;
  do
  {
    *v535 = v557 + 1;
    char *v557 = v558;
    v557 = *v535;
    if (*v535 >= v535[3])
    {
      v557 = v535[2];
      *v535 = v557;
    }
    char v558 = aAcc[v559++];
  }
  while (v559 != 6);
  sprintf_2d(v535, *((_DWORD *)v553 + 1));
  sprintf_2d(v535, *((_DWORD *)v553 + 2));
  sprintf_2d(v535, *v553);
  sprintf_2d(v535, v553[1]);
  v560 = (*v535)++;
  char *v560 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 105));
  v561 = (*v535)++;
  char *v561 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 106));
  v562 = (*v535)++;
  char *v562 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 107));
  v563 = (*v535)++;
  char *v563 = 32;
  v564 = *v535;
  if (*v535 >= v535[3])
  {
    v564 = v535[2];
    *v535 = v564;
  }
  double v565 = *((double *)v553 + 109);
  if (v565 <= 99999.0 || v565 >= 8999100.0)
  {
    sprintf_ACC(v535, v565);
  }
  else
  {
    double v566 = v565 / 299792.458;
    if (v566 <= 9999.0)
    {
      if (v566 <= 9.9)
      {
        double v1450 = v566 * -100.0;
        double v1451 = -0.5;
        if (v1450 > 0.0) {
          double v1451 = 0.5;
        }
        double v1452 = v1450 + v1451;
        if (v1452 <= 2147483650.0)
        {
          if (v1452 >= -2147483650.0) {
            unsigned int v1453 = (int)v1452;
          }
          else {
            unsigned int v1453 = 0x80000000;
          }
        }
        else
        {
          unsigned int v1453 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v535, v1453, 3);
      }
      else
      {
        double v948 = -0.5;
        if (v566 < 0.0) {
          double v948 = 0.5;
        }
        double v949 = v948 - v566;
        if (v949 <= 2147483650.0)
        {
          if (v949 >= -2147483650.0) {
            unsigned int v950 = (int)v949;
          }
          else {
            unsigned int v950 = 0x80000000;
          }
        }
        else
        {
          unsigned int v950 = 0x7FFFFFFF;
        }
        sprintf_5d(v535, v950);
      }
    }
    else
    {
      char v567 = 45;
      uint64_t v568 = 1u;
      do
      {
        *v535 = v564 + 1;
        char *v564 = v567;
        v564 = *v535;
        if (*v535 >= v535[3])
        {
          v564 = v535[2];
          *v535 = v564;
        }
        char v567 = a9999[v568++];
      }
      while (v568 != 6);
    }
  }
  v569 = (*v535)++;
  char *v569 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 108));
  v570 = (*v535)++;
  char *v570 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 110));
  v571 = (*v535)++;
  char *v571 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 113));
  v572 = (*v535)++;
  char *v572 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 115));
  v573 = (*v535)++;
  char *v573 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  double v574 = *((double *)v553 + 98) * 100.0;
  if (v574 <= 0.0) {
    double v575 = -0.5;
  }
  else {
    double v575 = 0.5;
  }
  double v576 = v574 + v575;
  if (v576 <= 2147483650.0)
  {
    if (v576 >= -2147483650.0) {
      unsigned int v577 = (int)v576;
    }
    else {
      unsigned int v577 = 0x80000000;
    }
  }
  else
  {
    unsigned int v577 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v535, v577, 3);
  double v578 = *((double *)v553 + 99) * 100.0;
  if (v578 <= 0.0) {
    double v579 = -0.5;
  }
  else {
    double v579 = 0.5;
  }
  double v580 = v578 + v579;
  if (v580 <= 2147483650.0)
  {
    if (v580 >= -2147483650.0) {
      unsigned int v581 = (int)v580;
    }
    else {
      unsigned int v581 = 0x80000000;
    }
  }
  else
  {
    unsigned int v581 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v535, v581, 3);
  double v582 = *((double *)v553 + 100) * 100.0;
  double v583 = -0.5;
  if (v582 > 0.0) {
    double v583 = 0.5;
  }
  double v584 = v582 + v583;
  if (v584 <= 2147483650.0)
  {
    if (v584 >= -2147483650.0) {
      unsigned int v585 = (int)v584;
    }
    else {
      unsigned int v585 = 0x80000000;
    }
  }
  else
  {
    unsigned int v585 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v535, v585, 3);
  v586 = (*v535)++;
  char *v586 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 114));
  uint64_t v587 = 0;
  v588 = *v535;
  char v589 = 32;
  do
  {
    *v535 = v588 + 1;
    char *v588 = v589;
    v588 = *v535;
    if (*v535 >= v535[3])
    {
      v588 = v535[2];
      *v535 = v588;
    }
    char v589 = aEl[++v587];
  }
  while (v587 != 4);
  sprintf_ACC(v535, *((double *)v553 + 116));
  v590 = (*v535)++;
  char *v590 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 117));
  v591 = (*v535)++;
  char *v591 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 118));
  v592 = *v535;
  for (muint64_t m = 5; mm > 1; --mm)
  {
    *v535 = v592 + 1;
    char *v592 = 32;
    v592 = *v535;
    if (*v535 >= v535[3])
    {
      v592 = v535[2];
      *v535 = v592;
    }
  }
  sprintf_ACC(v535, *((double *)v553 + 111));
  v594 = (*v535)++;
  char *v594 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, *((double *)v553 + 112));
  v595 = (*v535)++;
  char *v595 = 32;
  v596 = *v535;
  if (*v535 >= v535[3]) {
    v596 = v535[2];
  }
  uint64_t v597 = 0;
  char v598 = 32;
  do
  {
    *v535 = v596 + 1;
    char *v596 = v598;
    v596 = *v535;
    if (*v535 >= v535[3])
    {
      v596 = v535[2];
      *v535 = v596;
    }
    char v598 = aSf_0[++v597];
  }
  while (v597 != 4);
  double v599 = v554[91] * 100.0;
  double v600 = -0.5;
  if (v599 > 0.0) {
    double v600 = 0.5;
  }
  double v601 = v599 + v600;
  if (v601 <= 2147483650.0)
  {
    if (v601 >= -2147483650.0) {
      unsigned int v602 = (int)v601;
    }
    else {
      unsigned int v602 = 0x80000000;
    }
  }
  else
  {
    unsigned int v602 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)v535, v602, 3);
  v603 = (*v535)++;
  char *v603 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  double v604 = *v555 * 100.0;
  double v605 = -0.5;
  if (v604 > 0.0) {
    double v605 = 0.5;
  }
  double v606 = v604 + v605;
  if (v606 <= 2147483650.0)
  {
    if (v606 >= -2147483650.0) {
      unsigned int v607 = (int)v606;
    }
    else {
      unsigned int v607 = 0x80000000;
    }
  }
  else
  {
    unsigned int v607 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)v535, v607, 3);
  v608 = (*v535)++;
  char *v608 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  double v609 = v554[92] * 100.0;
  double v610 = -0.5;
  if (v609 > 0.0) {
    double v610 = 0.5;
  }
  double v611 = v609 + v610;
  if (v611 <= 2147483650.0)
  {
    if (v611 >= -2147483650.0) {
      unsigned int v612 = (int)v611;
    }
    else {
      unsigned int v612 = 0x80000000;
    }
  }
  else
  {
    unsigned int v612 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)v535, v612, 3);
  v613 = (*v535)++;
  char *v613 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  double v614 = v555[1] * 100.0;
  double v615 = -0.5;
  if (v614 > 0.0) {
    double v615 = 0.5;
  }
  double v616 = v614 + v615;
  if (v616 <= 2147483650.0)
  {
    if (v616 >= -2147483650.0) {
      unsigned int v617 = (int)v616;
    }
    else {
      unsigned int v617 = 0x80000000;
    }
  }
  else
  {
    unsigned int v617 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)v535, v617, 3);
  v618 = (*v535)++;
  char *v618 = 32;
  v619 = *v535;
  if (*v535 >= v535[3]) {
    v619 = v535[2];
  }
  char v620 = 32;
  uint64_t v621 = 1u;
  do
  {
    *v535 = v619 + 1;
    char *v619 = v620;
    v619 = *v535;
    if (*v535 >= v535[3])
    {
      v619 = v535[2];
      *v535 = v619;
    }
    char v620 = aFsd[v621++];
  }
  while (v621 != 6);
  sprintf_ACC(v535, *v554);
  v622 = (*v535)++;
  char *v622 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, v554[1]);
  v623 = (*v535)++;
  char *v623 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, v554[2]);
  v624 = (*v535)++;
  char *v624 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, v554[3]);
  v625 = (*v535)++;
  char *v625 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, v554[4]);
  v626 = (*v535)++;
  char *v626 = 32;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  sprintf_ACC(v535, v554[5]);
  v627 = *v535;
  if (g_Logging_Cfg >= 7)
  {
    uint64_t v628 = 0;
    char v629 = 32;
    do
    {
      *v535 = v627 + 1;
      char *v627 = v629;
      v627 = *v535;
      if (*v535 >= v535[3])
      {
        v627 = v535[2];
        *v535 = v627;
      }
      char v629 = aNv[++v628];
    }
    while (v628 != 4);
    v630 = (unsigned int *)(v556 + 32132);
    uint64_t v631 = 18;
    do
    {
      if (*v630 && (int)*(v630 - 1) >= 1) {
        sprintf_4d(v535, *v630);
      }
      v630 += 8;
      --v631;
    }
    while (v631);
    v627 = *v535;
  }
  *v535 = v627 + 1;
  char *v627 = 10;
  if (*v535 >= v535[3]) {
    *v535 = v535[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v535);
  v632 = (char **)v526[35];
  uint64_t v633 = v526[21];
  v634 = (unsigned __int8 *)(v633 + 62316);
  v635 = *v632;
  char v636 = 69;
  uint64_t v637 = 1u;
  do
  {
    *v632 = v635 + 1;
    char *v635 = v636;
    v635 = *v632;
    if (*v632 >= v632[3])
    {
      v635 = v632[2];
      *v632 = v635;
    }
    char v636 = aExtp[v637++];
  }
  while (v637 != 7);
  char Char_Ass_Status_Edit = Get_Char_Ass_Status_Edit(*(_DWORD *)(v633 + 62288));
  v639 = (*v632)++;
  char *v639 = Char_Ass_Status_Edit;
  if (*v632 >= v632[3]) {
    *v632 = v632[2];
  }
  char v640 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v633 + 62304));
  v641 = (*v632)++;
  char *v641 = v640;
  v642 = *v632;
  if (*v632 >= v632[3]) {
    v642 = v632[2];
  }
  *v632 = v642 + 1;
  char *v642 = 32;
  v643 = *v632;
  if (*v632 >= v632[3])
  {
    v643 = v632[2];
    *v632 = v643;
  }
  if (*(unsigned char *)(v633 + 60200) || *(unsigned char *)(v633 + 60216))
  {
    uint64_t v644 = 0;
    char v645 = 72;
    do
    {
      *v632 = v643 + 1;
      char *v643 = v645;
      v643 = *v632;
      if (*v632 >= v632[3])
      {
        v643 = v632[2];
        *v632 = v643;
      }
      char v645 = aHor[++v644];
    }
    while (v644 != 4);
    char v646 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v633 + 60204)];
    *v632 = v643 + 1;
    char *v643 = v646;
    v647 = *v632;
    if (*v632 >= v632[3]) {
      v647 = v632[2];
    }
    uint64_t v648 = 0;
    char v649 = 32;
    do
    {
      *v632 = v647 + 1;
      char *v647 = v649;
      v647 = *v632;
      if (*v632 >= v632[3])
      {
        v647 = v632[2];
        *v632 = v647;
      }
      char v649 = aT[++v648];
    }
    while (v648 != 4);
    char v650 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v633 + 60208)];
    *v632 = v647 + 1;
    char *v647 = v650;
    v651 = *v632;
    if (*v632 >= v632[3]) {
      v651 = v632[2];
    }
    uint64_t v652 = 0;
    char v653 = 32;
    do
    {
      *v632 = v651 + 1;
      char *v651 = v653;
      v651 = *v632;
      if (*v632 >= v632[3])
      {
        v651 = v632[2];
        *v632 = v651;
      }
      char v653 = aC[++v652];
    }
    while (v652 != 4);
    char v654 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v633 + 60212)];
    *v632 = v651 + 1;
    char *v651 = v654;
    v655 = *v632;
    if (*v632 >= v632[3]) {
      v655 = v632[2];
    }
    uint64_t v656 = 0;
    char v657 = 32;
    do
    {
      *v632 = v655 + 1;
      char *v655 = v657;
      v655 = *v632;
      if (*v632 >= v632[3])
      {
        v655 = v632[2];
        *v632 = v655;
      }
      char v657 = aE_0[++v656];
    }
    while (v656 != 4);
    if (*(unsigned char *)(v633 + 60216))
    {
      LOBYTE(v658) = 49;
      strcpy(v1514, "1");
      uint64_t v659 = 1;
      do
      {
        *v632 = v655 + 1;
        char *v655 = v658;
        v655 = *v632;
        if (*v632 >= v632[3])
        {
          v655 = v632[2];
          *v632 = v655;
        }
        int v658 = v1514[v659++];
      }
      while (v658);
    }
    else
    {
      *v632 = v655 + 1;
      char *v655 = 45;
      v655 = *v632;
      if (*v632 >= v632[3]) {
        v655 = v632[2];
      }
    }
    for (nuint64_t n = 4; nn > 1; --nn)
    {
      *v632 = v655 + 1;
      char *v655 = 32;
      v655 = *v632;
      if (*v632 >= v632[3])
      {
        v655 = v632[2];
        *v632 = v655;
      }
    }
    int v661 = *(_DWORD *)v633 - *(_DWORD *)(v633 + 60220);
    if (v661 >= -999999)
    {
      int v663 = v661 / 1000;
      if (v663 >= 999) {
        unsigned int v662 = 999;
      }
      else {
        unsigned int v662 = v663;
      }
    }
    else
    {
      unsigned int v662 = -999;
    }
    sprintf_4d(v632, v662);
    v664 = (*v632)++;
    char *v664 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_ACC(v632, sqrt(*(double *)(v633 + 60248)));
    v665 = (*v632)++;
    char *v665 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_ACC(v632, sqrt(*(double *)(v633 + 60256)));
    v666 = (*v632)++;
    char *v666 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_ACC(v632, sqrt(*(double *)(v633 + 60272)));
    v667 = (*v632)++;
    char *v667 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_ACC(v632, sqrt(*(double *)(v633 + 60280)));
    v668 = (*v632)++;
    char *v668 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_sgR8(v632, *(double *)(v633 + 60288));
    v669 = (*v632)++;
    char *v669 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_sgR8(v632, *(double *)(v633 + 60296));
    v670 = (*v632)++;
    char *v670 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_sgR8(v632, sqrt(fabs(*(double *)(v633 + 60312))));
    v671 = (*v632)++;
    char *v671 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_sgR8(v632, sqrt(fabs(*(double *)(v633 + 60320))));
    v526 = v1458;
    v634 = (unsigned __int8 *)(v633 + 62316);
  }
  if (*(unsigned char *)(v633 + 60328) || *(unsigned char *)(v633 + 60344))
  {
    v672 = *v632;
    char v673 = 32;
    uint64_t v674 = 1u;
    do
    {
      *v632 = v672 + 1;
      char *v672 = v673;
      v672 = *v632;
      if (*v632 >= v632[3])
      {
        v672 = v632[2];
        *v632 = v672;
      }
      char v673 = aVer_0[v674++];
    }
    while (v674 != 7);
    char v675 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v633 + 60332)];
    *v632 = v672 + 1;
    char *v672 = v675;
    v676 = *v632;
    if (*v632 >= v632[3]) {
      v676 = v632[2];
    }
    uint64_t v677 = 0;
    char v678 = 32;
    do
    {
      *v632 = v676 + 1;
      char *v676 = v678;
      v676 = *v632;
      if (*v632 >= v632[3])
      {
        v676 = v632[2];
        *v632 = v676;
      }
      char v678 = aT[++v677];
    }
    while (v677 != 4);
    char v679 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v633 + 60336)];
    *v632 = v676 + 1;
    char *v676 = v679;
    v680 = *v632;
    if (*v632 >= v632[3]) {
      v680 = v632[2];
    }
    uint64_t v681 = 0;
    char v682 = 32;
    do
    {
      *v632 = v680 + 1;
      char *v680 = v682;
      v680 = *v632;
      if (*v632 >= v632[3])
      {
        v680 = v632[2];
        *v632 = v680;
      }
      char v682 = aC[++v681];
    }
    while (v681 != 4);
    char v683 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v633 + 60340)];
    *v632 = v680 + 1;
    char *v680 = v683;
    v684 = *v632;
    if (*v632 >= v632[3]) {
      v684 = v632[2];
    }
    uint64_t v685 = 0;
    char v686 = 32;
    do
    {
      *v632 = v684 + 1;
      char *v684 = v686;
      v684 = *v632;
      if (*v632 >= v632[3])
      {
        v684 = v632[2];
        *v632 = v684;
      }
      char v686 = aE_0[++v685];
    }
    while (v685 != 4);
    if (*(unsigned char *)(v633 + 60344))
    {
      LOBYTE(v687) = 49;
      strcpy(v1514, "1");
      uint64_t v688 = 1;
      do
      {
        *v632 = v684 + 1;
        char *v684 = v687;
        v684 = *v632;
        if (*v632 >= v632[3])
        {
          v684 = v632[2];
          *v632 = v684;
        }
        int v687 = v1514[v688++];
      }
      while (v687);
    }
    else
    {
      *v632 = v684 + 1;
      char *v684 = 45;
      v684 = *v632;
      if (*v632 >= v632[3]) {
        v684 = v632[2];
      }
    }
    for (unsigned int i1 = 4; i1 > 1; --i1)
    {
      *v632 = v684 + 1;
      char *v684 = 32;
      v684 = *v632;
      if (*v632 >= v632[3])
      {
        v684 = v632[2];
        *v632 = v684;
      }
    }
    int v690 = *(_DWORD *)v633 - *(_DWORD *)(v633 + 60348);
    if (v690 >= -999999)
    {
      if (v690 <= 999999) {
        unsigned int v691 = v690 / 1000;
      }
      else {
        unsigned int v691 = 9999;
      }
    }
    else
    {
      unsigned int v691 = -9999;
    }
    sprintf_4d(v632, v691);
    v692 = (*v632)++;
    char *v692 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_ACC(v632, sqrt(*(double *)(v633 + 60360)));
    v693 = (*v632)++;
    char *v693 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_ACC(v632, sqrt(*(double *)(v633 + 60368)));
    v694 = (*v632)++;
    char *v694 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_sgR8(v632, *(double *)(v633 + 60376));
    v695 = (*v632)++;
    char *v695 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    sprintf_sgR8(v632, sqrt(fabs(*(double *)(v633 + 60392))));
  }
  v696 = *v632;
  if (*v634)
  {
    uint64_t v697 = 0;
    char v698 = 32;
    do
    {
      *v632 = v696 + 1;
      char *v696 = v698;
      v696 = *v632;
      if (*v632 >= v632[3])
      {
        v696 = v632[2];
        *v632 = v696;
      }
      char v698 = aTepa[++v697];
    }
    while (v697 != 8);
    sprintf1da(v632, *v634, v1514, 0, 0);
    v699 = (*v632)++;
    char *v699 = 32;
    if (*v632 >= v632[3]) {
      *v632 = v632[2];
    }
    char v700 = Get_Char_Ass_Status_Edit(*((_DWORD *)v634 + 1));
    v701 = (*v632)++;
    char *v701 = v700;
    v702 = *v632;
    if (*v632 >= v632[3]) {
      v702 = v632[2];
    }
    for (unsigned int i2 = 3; i2 > 1; --i2)
    {
      *v632 = v702 + 1;
      char *v702 = 32;
      v702 = *v632;
      if (*v632 >= v632[3])
      {
        v702 = v632[2];
        *v632 = v702;
      }
    }
    sprintf_4d(v632, *((_DWORD *)v634 + 3));
    v696 = *v632;
  }
  *v632 = v696 + 1;
  char *v696 = 10;
  if (*v632 >= v632[3]) {
    *v632 = v632[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v632);
  v704 = (char **)v526[35];
  uint64_t v705 = v526[21];
  v706 = (unsigned __int8 *)(v705 + 62188);
  v707 = (unsigned int *)(v705 + 59928);
  v708 = *v704;
  char v709 = 67;
  uint64_t v710 = 1u;
  do
  {
    *v704 = v708 + 1;
    char *v708 = v709;
    v708 = *v704;
    if (*v704 >= v704[3])
    {
      v708 = v704[2];
      *v704 = v708;
    }
    char v709 = aCtxt[v710++];
  }
  while (v710 != 7);
  uint64_t v711 = 0;
  char v712 = 85;
  do
  {
    *v704 = v708 + 1;
    char *v708 = v712;
    v708 = *v704;
    if (*v704 >= v704[3])
    {
      v708 = v704[2];
      *v704 = v708;
    }
    char v712 = aUac[++v711];
  }
  while (v711 != 4);
  sprintf_2d(v704, v706[16]);
  sprintf_2d(v704, v706[24]);
  v713 = (*v704)++;
  char *v713 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  char v714 = Get_Char_Ass_Status_Edit(*((_DWORD *)v706 + 5));
  v715 = (*v704)++;
  char *v715 = v714;
  v716 = *v704;
  if (*v704 >= v704[3]) {
    v716 = v704[2];
  }
  *v704 = v716 + 1;
  char *v716 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  sprintf_3f((uint64_t)v704, *((_DWORD *)v706 + 7) / 10, 3);
  v717 = (*v704)++;
  char *v717 = 32;
  v718 = *v704;
  if (*v704 >= v704[3]) {
    v718 = v704[2];
  }
  char v719 = print_line_CTXT(s_GN_Ptrs *)::ch_UAC_TXT[v707[3]];
  *v704 = v718 + 1;
  char *v718 = v719;
  v720 = *v704;
  if (*v704 >= v704[3]) {
    v720 = v704[2];
  }
  *v704 = v720 + 1;
  char *v720 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  sprintf_1x(v704, v707[5]);
  v721 = (*v704)++;
  char *v721 = 32;
  v722 = *v704;
  if (*v704 >= v704[3]) {
    v722 = v704[2];
  }
  char v723 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v707[4]];
  *v704 = v722 + 1;
  char *v722 = v723;
  v724 = *v704;
  if (*v704 >= v704[3]) {
    v724 = v704[2];
  }
  char v725 = 32;
  uint64_t v726 = 1u;
  do
  {
    *v704 = v724 + 1;
    char *v724 = v725;
    v724 = *v704;
    if (*v704 >= v704[3])
    {
      v724 = v704[2];
      *v704 = v724;
    }
    char v725 = aDms[v726++];
  }
  while (v726 != 8);
  sprintf_2d(v704, *v706);
  sprintf_2d(v704, v706[8]);
  v727 = (*v704)++;
  char *v727 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  char v728 = Get_Char_Ass_Status_Edit(*((_DWORD *)v706 + 1));
  v729 = (*v704)++;
  char *v729 = v728;
  v730 = *v704;
  if (*v704 >= v704[3]) {
    v730 = v704[2];
  }
  *v704 = v730 + 1;
  char *v730 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  sprintf_3f((uint64_t)v704, *((_DWORD *)v706 + 3) / 10, 3);
  v731 = (*v704)++;
  char *v731 = 32;
  v732 = *v704;
  if (*v704 >= v704[3]) {
    v732 = v704[2];
  }
  char v733 = print_line_CTXT(s_GN_Ptrs *)::ch_DMS_STE[*v707];
  *v704 = v732 + 1;
  char *v732 = v733;
  v734 = *v704;
  if (*v704 >= v704[3]) {
    v734 = v704[2];
  }
  *v704 = v734 + 1;
  char *v734 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  sprintf_1x(v704, v707[2]);
  v735 = (*v704)++;
  char *v735 = 32;
  v736 = *v704;
  if (*v704 >= v704[3]) {
    v736 = v704[2];
  }
  char v737 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v707[1]];
  *v704 = v736 + 1;
  char *v736 = v737;
  v738 = *v704;
  if (*v704 >= v704[3]) {
    v738 = v704[2];
  }
  char v739 = 32;
  uint64_t v740 = 1u;
  do
  {
    *v704 = v738 + 1;
    char *v738 = v739;
    v738 = *v704;
    if (*v704 >= v704[3])
    {
      v738 = v704[2];
      *v704 = v738;
    }
    char v739 = aFiv[v740++];
  }
  while (v740 != 8);
  sprintf_2d(v704, v706[32]);
  sprintf_2d(v704, v706[40]);
  v741 = (*v704)++;
  char *v741 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  char v742 = Get_Char_Ass_Status_Edit(*((_DWORD *)v706 + 9));
  v743 = (*v704)++;
  char *v743 = v742;
  v744 = *v704;
  if (*v704 >= v704[3]) {
    v744 = v704[2];
  }
  *v704 = v744 + 1;
  char *v744 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  sprintf_3f((uint64_t)v704, *((_DWORD *)v706 + 11) / 10, 3);
  v745 = (*v704)++;
  char *v745 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  sprintf_1x(v704, v707[6]);
  v746 = (*v704)++;
  char *v746 = 32;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  sprintf_1x(v704, v707[8]);
  v747 = (*v704)++;
  char *v747 = 32;
  v748 = *v704;
  if (*v704 >= v704[3]) {
    v748 = v704[2];
  }
  char v749 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v707[7]];
  *v704 = v748 + 1;
  char *v748 = v749;
  v750 = *v704;
  if (*v704 >= v704[3]) {
    v750 = v704[2];
  }
  *v704 = v750 + 1;
  char *v750 = 10;
  if (*v704 >= v704[3]) {
    *v704 = v704[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v704);
  v751 = (char **)v526[35];
  v752 = (unsigned __int8 *)v526[21];
  v753 = v752 + 62252;
  if (v752[62252])
  {
    v754 = (double *)(v752 + 61024);
    v755 = *v751;
    char v756 = 77;
    uint64_t v757 = 1u;
    do
    {
      *v751 = v755 + 1;
      char *v755 = v756;
      v755 = *v751;
      if (*v751 >= v751[3])
      {
        v755 = v751[2];
        *v751 = v755;
      }
      char v756 = aMapv[v757++];
    }
    while (v757 != 7);
    char v758 = 83;
    uint64_t v759 = 1u;
    do
    {
      *v751 = v755 + 1;
      char *v755 = v758;
      v755 = *v751;
      if (*v751 >= v751[3])
      {
        v755 = v751[2];
        *v751 = v755;
      }
      char v758 = aStat[v759++];
    }
    while (v759 != 6);
    sprintf_2d(v751, *v753);
    sprintf_2d(v751, v753[8]);
    v760 = (*v751)++;
    char *v760 = 32;
    v761 = *v751;
    if (*v751 >= v751[3]) {
      v761 = v751[2];
    }
    *v751 = v761 + 1;
    char *v761 = 101;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    char v762 = Get_Char_Ass_Status_Edit(*((_DWORD *)v753 + 1));
    v763 = (*v751)++;
    char *v763 = v762;
    v764 = *v751;
    if (*v751 >= v751[3]) {
      v764 = v751[2];
    }
    char v765 = 32;
    uint64_t v766 = 1u;
    do
    {
      *v751 = v764 + 1;
      char *v764 = v765;
      v764 = *v751;
      if (*v751 >= v751[3])
      {
        v764 = v751[2];
        *v751 = v764;
      }
      char v765 = aAge[v766++];
    }
    while (v766 != 6);
    sprintf_6d(v751, *((_DWORD *)v753 + 3));
    uint64_t v767 = 0;
    v768 = *v751;
    char v769 = 32;
    do
    {
      *v751 = v768 + 1;
      char *v768 = v769;
      v768 = *v751;
      if (*v751 >= v751[3])
      {
        v768 = v751[2];
        *v751 = v768;
      }
      char v769 = aAt[++v767];
    }
    while (v767 != 4);
    sprintf_sgR8(v751, v754[30]);
    uint64_t v770 = 0;
    v771 = *v751;
    char v772 = 32;
    do
    {
      *v751 = v771 + 1;
      char *v771 = v772;
      v771 = *v751;
      if (*v751 >= v751[3])
      {
        v771 = v751[2];
        *v751 = v771;
      }
      char v772 = aCt[++v770];
    }
    while (v770 != 4);
    sprintf_sgR8(v751, v754[31]);
    uint64_t v773 = 0;
    v774 = *v751;
    char v775 = 32;
    do
    {
      *v751 = v774 + 1;
      char *v774 = v775;
      v774 = *v751;
      if (*v751 >= v751[3])
      {
        v774 = v751[2];
        *v751 = v774;
      }
      char v775 = aHd[++v773];
    }
    while (v773 != 4);
    sprintf_sgR8(v751, v754[32]);
    uint64_t v776 = 0;
    v777 = *v751;
    char v778 = 32;
    do
    {
      *v751 = v777 + 1;
      char *v777 = v778;
      v777 = *v751;
      if (*v751 >= v751[3])
      {
        v777 = v751[2];
        *v751 = v777;
      }
      char v778 = aGs[++v776];
    }
    while (v776 != 4);
    sprintf_sgR8(v751, v754[29]);
    v779 = *v751;
    char v780 = 32;
    uint64_t v781 = 1u;
    do
    {
      *v751 = v779 + 1;
      char *v779 = v780;
      v779 = *v751;
      if (*v751 >= v751[3])
      {
        v779 = v751[2];
        *v751 = v779;
      }
      char v780 = aEpa[v781++];
    }
    while (v781 != 6);
    sprintf_sgR8(v751, v754[33]);
    v782 = *v751;
    char v783 = 32;
    uint64_t v784 = 1u;
    do
    {
      *v751 = v782 + 1;
      char *v782 = v783;
      v782 = *v751;
      if (*v751 >= v751[3])
      {
        v782 = v751[2];
        *v751 = v782;
      }
      char v783 = aEpc[v784++];
    }
    while (v784 != 6);
    sprintf_sgR8(v751, v754[34]);
    v785 = *v751;
    char v786 = 77;
    uint64_t v787 = 1u;
    do
    {
      *v751 = v785 + 1;
      char *v785 = v786;
      v785 = *v751;
      if (*v751 >= v751[3])
      {
        v785 = v751[2];
        *v751 = v785;
      }
      char v786 = aMv[v787++];
    }
    while (v787 != 4);
    sprintf_sgR8(v751, *v754);
    sprintf_sgR8(v751, v754[1]);
    sprintf_sgR8(v751, v754[2]);
    v788 = (*v751)++;
    char *v788 = 32;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    sprintf1da(v751, *((unsigned __int8 *)v754 + 24), v1514, 0, 0);
    sprintf1da(v751, *((unsigned __int8 *)v754 + 25), v1514, 0, 0);
    sprintf1da(v751, *((unsigned __int8 *)v754 + 26), v1514, 0, 0);
    sprintf1da(v751, *((unsigned __int8 *)v754 + 27), v1514, 0, 0);
    sprintf1da(v751, *((unsigned __int8 *)v754 + 28), v1514, 0, 0);
    v789 = (*v751)++;
    char *v789 = 32;
    v790 = *v751;
    if (*v751 >= v751[3]) {
      v790 = v751[2];
    }
    if (!*((_DWORD *)v753 + 1))
    {
      char v791 = 72;
      uint64_t v792 = 1u;
      do
      {
        *v751 = v790 + 1;
        char *v790 = v791;
        v790 = *v751;
        if (*v751 >= v751[3])
        {
          v790 = v751[2];
          *v751 = v790;
        }
        char v791 = aHpos[v792++];
      }
      while (v792 != 6);
      sprintf1da(v751, *((unsigned __int8 *)v754 + 1108), v1514, 0, 0);
      v793 = (*v751)++;
      char *v793 = 32;
      v794 = *v751;
      if (*v751 >= v751[3]) {
        v794 = v751[2];
      }
      char v795 = 32;
      uint64_t v796 = 1u;
      do
      {
        *v751 = v794 + 1;
        char *v794 = v795;
        v794 = *v751;
        if (*v751 >= v751[3])
        {
          v794 = v751[2];
          *v751 = v794;
        }
        char v795 = aHpre[v796++];
      }
      while (v796 != 7);
      sprintf_ACC(v751, sqrt(v754[10]));
      v797 = (*v751)++;
      char *v797 = 32;
      if (*v751 >= v751[3]) {
        *v751 = v751[2];
      }
      sprintf_ACC(v751, sqrt(v754[11]));
      v798 = (*v751)++;
      char *v798 = 32;
      if (*v751 >= v751[3]) {
        *v751 = v751[2];
      }
      sprintf_ACC(v751, sqrt(v754[13]));
      v799 = (*v751)++;
      char *v799 = 32;
      if (*v751 >= v751[3]) {
        *v751 = v751[2];
      }
      sprintf_ACC(v751, sqrt(v754[14]));
      v800 = (*v751)++;
      char *v800 = 32;
      if (*v751 >= v751[3]) {
        *v751 = v751[2];
      }
      sprintf_sgR8(v751, v754[15]);
      v801 = (*v751)++;
      char *v801 = 32;
      if (*v751 >= v751[3]) {
        *v751 = v751[2];
      }
      sprintf_sgR8(v751, v754[16]);
      v802 = *v751;
      char v803 = 84;
      uint64_t v804 = 1u;
      do
      {
        *v751 = v802 + 1;
        char *v802 = v803;
        v802 = *v751;
        if (*v751 >= v751[3])
        {
          v802 = v751[2];
          *v751 = v802;
        }
        char v803 = aTrck[v804++];
      }
      while (v804 != 6);
      sprintf1da(v751, *((unsigned __int8 *)v754 + 1109), v1514, 0, 0);
      v805 = (*v751)++;
      char *v805 = 32;
      v806 = *v751;
      if (*v751 >= v751[3]) {
        v806 = v751[2];
      }
      uint64_t v807 = 0;
      char v808 = 32;
      do
      {
        *v751 = v806 + 1;
        char *v806 = v808;
        v806 = *v751;
        if (*v751 >= v751[3])
        {
          v806 = v751[2];
          *v751 = v806;
        }
        char v808 = aTpre[++v807];
      }
      while (v807 != 8);
      sprintf_ACC(v751, sqrt(v754[24]));
      v809 = (*v751)++;
      char *v809 = 32;
      if (*v751 >= v751[3]) {
        *v751 = v751[2];
      }
      sprintf_sgR8(v751, v754[26]);
      v790 = *v751;
    }
    *v751 = v790 + 1;
    char *v790 = 10;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v751);
    v751 = (char **)v526[35];
    v752 = (unsigned __int8 *)v526[21];
  }
  v810 = v752 + 62348;
  if (v752[62348] || v752[62380] || v752[62364])
  {
    v811 = *v751;
    char v812 = 86;
    uint64_t v813 = 1u;
    do
    {
      *v751 = v811 + 1;
      char *v811 = v812;
      v811 = *v751;
      if (*v751 >= v751[3])
      {
        v811 = v751[2];
        *v751 = v811;
      }
      char v812 = aVela[v813++];
    }
    while (v813 != 7);
    uint64_t v814 = 0;
    char v815 = 65;
    do
    {
      *v751 = v811 + 1;
      char *v811 = v815;
      v811 = *v751;
      if (*v751 >= v751[3])
      {
        v811 = v751[2];
        *v751 = v811;
      }
      char v815 = aAtv[++v814];
    }
    while (v814 != 4);
    sprintf_2d(v751, *v810);
    sprintf_2d(v751, v810[8]);
    v816 = (*v751)++;
    char *v816 = 32;
    v817 = *v751;
    if (*v751 >= v751[3]) {
      v817 = v751[2];
    }
    *v751 = v817 + 1;
    char *v817 = 101;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    char v818 = Get_Char_Ass_Status_Edit(*((_DWORD *)v810 + 1));
    v819 = (*v751)++;
    char *v819 = v818;
    v820 = *v751;
    if (*v751 >= v751[3]) {
      v820 = v751[2];
    }
    char v821 = 32;
    uint64_t v822 = 1u;
    do
    {
      *v751 = v820 + 1;
      char *v820 = v821;
      v820 = *v751;
      if (*v751 >= v751[3])
      {
        v820 = v751[2];
        *v751 = v820;
      }
      char v821 = aAge[v822++];
    }
    while (v822 != 6);
    sprintf_6d(v751, *((_DWORD *)v810 + 3));
    v823 = (*v751)++;
    char *v823 = 32;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    if (*v810)
    {
      memset(v1514, 0, sizeof(v1514));
      Core_Get_ExtA_AT_Vel(120000, (uint64_t)v1514);
      sprintf_sgR8(v751, *(double *)&v1514[8]);
      v824 = *v751;
      char v825 = 32;
      uint64_t v826 = 1u;
      do
      {
        *v751 = v824 + 1;
        char *v824 = v825;
        v824 = *v751;
        if (*v751 >= v751[3])
        {
          v824 = v751[2];
          *v751 = v824;
        }
        char v825 = aRms[v826++];
      }
      while (v826 != 6);
      double v827 = *(double *)&v1514[16];
    }
    else
    {
      sprintf_sgR8(v751, 0.0);
      v828 = *v751;
      char v829 = 32;
      uint64_t v830 = 1u;
      do
      {
        *v751 = v828 + 1;
        char *v828 = v829;
        v828 = *v751;
        if (*v751 >= v751[3])
        {
          v828 = v751[2];
          *v751 = v828;
        }
        char v829 = aRms[v830++];
      }
      while (v830 != 6);
      double v827 = 0.0;
    }
    sprintf_sgR8(v751, v827);
    v831 = *v751;
    char v832 = 32;
    uint64_t v833 = 1u;
    do
    {
      *v751 = v831 + 1;
      char *v831 = v832;
      v831 = *v751;
      if (*v751 >= v751[3])
      {
        v831 = v751[2];
        *v751 = v831;
      }
      char v832 = aHed[v833++];
    }
    while (v833 != 6);
    sprintf_2d(v751, v810[32]);
    sprintf_2d(v751, v810[40]);
    v834 = (*v751)++;
    char *v834 = 32;
    v835 = *v751;
    if (*v751 >= v751[3]) {
      v835 = v751[2];
    }
    *v751 = v835 + 1;
    char *v835 = 101;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    char v836 = Get_Char_Ass_Status_Edit(*((_DWORD *)v810 + 9));
    v837 = (*v751)++;
    char *v837 = v836;
    v838 = *v751;
    if (*v751 >= v751[3]) {
      v838 = v751[2];
    }
    char v839 = 32;
    uint64_t v840 = 1u;
    do
    {
      *v751 = v838 + 1;
      char *v838 = v839;
      v838 = *v751;
      if (*v751 >= v751[3])
      {
        v838 = v751[2];
        *v751 = v838;
      }
      char v839 = aAge[v840++];
    }
    while (v840 != 6);
    sprintf_6d(v751, *((_DWORD *)v810 + 11));
    v841 = (*v751)++;
    char *v841 = 32;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    if (v810[32])
    {
      memset(v1514, 0, sizeof(v1514));
      Core_Get_ExtA_Heading(120000, (uint64_t)v1514);
      sprintf_sgR8(v751, *(double *)&v1514[8]);
      v842 = *v751;
      char v843 = 32;
      uint64_t v844 = 1u;
      do
      {
        *v751 = v842 + 1;
        char *v842 = v843;
        v842 = *v751;
        if (*v751 >= v751[3])
        {
          v842 = v751[2];
          *v751 = v842;
        }
        char v843 = aRms[v844++];
      }
      while (v844 != 6);
      double v845 = *(double *)&v1514[16];
    }
    else
    {
      sprintf_sgR8(v751, 0.0);
      v846 = *v751;
      char v847 = 32;
      uint64_t v848 = 1u;
      do
      {
        *v751 = v846 + 1;
        char *v846 = v847;
        v846 = *v751;
        if (*v751 >= v751[3])
        {
          v846 = v751[2];
          *v751 = v846;
        }
        char v847 = aRms[v848++];
      }
      while (v848 != 6);
      double v845 = 0.0;
    }
    sprintf_sgR8(v751, v845);
    v849 = *v751;
    char v850 = 32;
    uint64_t v851 = 1u;
    do
    {
      *v751 = v849 + 1;
      char *v849 = v850;
      v849 = *v751;
      if (*v751 >= v751[3])
      {
        v849 = v751[2];
        *v751 = v849;
      }
      char v850 = aVvl[v851++];
    }
    while (v851 != 6);
    sprintf_2d(v751, v810[16]);
    sprintf_2d(v751, v810[24]);
    v852 = (*v751)++;
    char *v852 = 32;
    v853 = *v751;
    if (*v751 >= v751[3]) {
      v853 = v751[2];
    }
    *v751 = v853 + 1;
    char *v853 = 101;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    char v854 = Get_Char_Ass_Status_Edit(*((_DWORD *)v810 + 5));
    v855 = (*v751)++;
    char *v855 = v854;
    v856 = *v751;
    if (*v751 >= v751[3]) {
      v856 = v751[2];
    }
    char v857 = 32;
    uint64_t v858 = 1u;
    do
    {
      *v751 = v856 + 1;
      char *v856 = v857;
      v856 = *v751;
      if (*v751 >= v751[3])
      {
        v856 = v751[2];
        *v751 = v856;
      }
      char v857 = aAge[v858++];
    }
    while (v858 != 6);
    sprintf_6d(v751, *((_DWORD *)v810 + 7));
    v859 = (*v751)++;
    char *v859 = 32;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    if (v810[16])
    {
      memset(v1514, 0, sizeof(v1514));
      Core_Get_ExtA_V_Vel(120000, (uint64_t)v1514);
      sprintf_sgR8(v751, *(double *)&v1514[8]);
      v860 = *v751;
      char v861 = 32;
      uint64_t v862 = 1u;
      do
      {
        *v751 = v860 + 1;
        char *v860 = v861;
        v860 = *v751;
        if (*v751 >= v751[3])
        {
          v860 = v751[2];
          *v751 = v860;
        }
        char v861 = aRms[v862++];
      }
      while (v862 != 6);
      double v863 = *(double *)&v1514[16];
    }
    else
    {
      sprintf_sgR8(v751, 0.0);
      v864 = *v751;
      char v865 = 32;
      uint64_t v866 = 1u;
      do
      {
        *v751 = v864 + 1;
        char *v864 = v865;
        v864 = *v751;
        if (*v751 >= v751[3])
        {
          v864 = v751[2];
          *v751 = v864;
        }
        char v865 = aRms[v866++];
      }
      while (v866 != 6);
      double v863 = 0.0;
    }
    sprintf_sgR8(v751, v863);
    v867 = (*v751)++;
    char *v867 = 10;
    if (*v751 >= v751[3]) {
      *v751 = v751[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v751);
    v751 = (char **)v526[35];
    v752 = (unsigned __int8 *)v526[21];
  }
  v868 = (double *)(v752 + 60752);
  v869 = v752 + 60328;
  uint64_t v870 = v526[16];
  v871 = *v751;
  char v872 = 65;
  uint64_t v873 = 1u;
  do
  {
    *v751 = v871 + 1;
    char *v871 = v872;
    v871 = *v751;
    if (*v751 >= v751[3])
    {
      v871 = v751[2];
      *v751 = v871;
    }
    char v872 = aApa[v873++];
  }
  while (v873 != 6);
  if (*((unsigned char *)v868 + 72) || !*v869)
  {
    sprintf_2d(v751, *((unsigned __int8 *)v868 + 72));
    sprintf_sgR8(v751, v868[12]);
    sprintf_sgR8(v751, sqrt(v868[13]));
    v874 = v868 + 15;
  }
  else
  {
    sprintf_2d(v751, *((_DWORD *)v869 + 1) + 1);
    sprintf_sgR8(v751, *((double *)v869 + 3));
    sprintf_sgR8(v751, sqrt(*((double *)v869 + 4)));
    v874 = (double *)(v869 + 48);
  }
  sprintf_sgR8(v751, *v874);
  v875 = *v751;
  char v876 = 32;
  uint64_t v877 = 1u;
  do
  {
    *v751 = v875 + 1;
    char *v875 = v876;
    v875 = *v751;
    if (*v751 >= v751[3])
    {
      v875 = v751[2];
      *v751 = v875;
    }
    char v876 = aVva[v877++];
  }
  while (v877 != 7);
  sprintf_2d(v751, *(unsigned __int8 *)v868);
  sprintf_sgR8(v751, v868[3]);
  sprintf_sgR8(v751, sqrt(v868[4]));
  sprintf_sgR8(v751, v868[6]);
  uint64_t v878 = 0;
  v879 = *v751;
  char v880 = 32;
  do
  {
    *v751 = v879 + 1;
    char *v879 = v880;
    v879 = *v751;
    if (*v751 >= v751[3])
    {
      v879 = v751[2];
      *v751 = v879;
    }
    char v880 = aDy[++v878];
  }
  while (v878 != 4);
  int v881 = *(_DWORD *)(v870 + 20);
  if (v881 >= 0) {
    unsigned int v882 = *(_DWORD *)(v870 + 20);
  }
  else {
    unsigned int v882 = -v881;
  }
  sprintf1da(v751, v882, v1514, 0, v881 >> 31);
  uint64_t v883 = 0;
  v884 = *v751;
  char v885 = 32;
  do
  {
    *v751 = v884 + 1;
    char *v884 = v885;
    v884 = *v751;
    if (*v751 >= v751[3])
    {
      v884 = v751[2];
      *v751 = v884;
    }
    char v885 = aT0[++v883];
  }
  while (v883 != 4);
  sprintf_1u(v751, *(_DWORD *)(v870 + 68180));
  LODWORD(v886) = *((_DWORD *)v868 + 477);
  sprintf_sgR8(v751, (double)v886);
  v887 = (*v751)++;
  char *v887 = 10;
  if (*v751 >= v751[3]) {
    *v751 = v751[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v751);
  uint64_t v888 = 0;
  v889 = (char **)v526[35];
  uint64_t v890 = v526[9];
  uint64_t v891 = v526[10];
  v892 = (unsigned __int16 *)(v526[16] + 27088);
  uint64_t v893 = v526[21] + 60160;
  v894 = *v889;
  char v895 = 83;
  do
  {
    *v889 = v894 + 1;
    char *v894 = v895;
    v894 = *v889;
    if (*v889 >= v889[3])
    {
      v894 = v889[2];
      *v889 = v894;
    }
    char v895 = aSigs[++v888];
  }
  while (v888 != 4);
  sprintf_sgR8(v889, *(double *)(v891 + 3816));
  sprintf_sgR8(v889, *(double *)(v891 + 3824));
  sprintf_sgR8(v889, *(double *)(v891 + 3840));
  sprintf_sgR8(v889, *(double *)(v891 + 3848));
  sprintf_sgR8(v889, *(double *)(v891 + 3864));
  sprintf_sgR8(v889, *(double *)(v891 + 3872));
  v896 = *v889;
  char v897 = 32;
  uint64_t v898 = 1u;
  do
  {
    *v889 = v896 + 1;
    char *v896 = v897;
    v896 = *v889;
    if (*v889 >= v889[3])
    {
      v896 = v889[2];
      *v889 = v896;
    }
    char v897 = aEc[v898++];
  }
  while (v898 != 4);
  if (*(unsigned __int16 *)(v891 + 3832) >= 0x270Fu) {
    unsigned int v899 = 9999;
  }
  else {
    unsigned int v899 = *(unsigned __int16 *)(v891 + 3832);
  }
  sprintf_5d(v889, v899);
  if (*(unsigned __int16 *)(v891 + 3856) >= 0x270Fu) {
    unsigned int v900 = 9999;
  }
  else {
    unsigned int v900 = *(unsigned __int16 *)(v891 + 3856);
  }
  sprintf_5d(v889, v900);
  if (*(unsigned __int16 *)(v891 + 3880) >= 0x270Fu) {
    unsigned int v901 = 9999;
  }
  else {
    unsigned int v901 = *(unsigned __int16 *)(v891 + 3880);
  }
  sprintf_5d(v889, v901);
  uint64_t v902 = 0;
  v903 = *v889;
  char v904 = 32;
  do
  {
    *v889 = v903 + 1;
    char *v903 = v904;
    v903 = *v889;
    if (*v889 >= v889[3])
    {
      v903 = v889[2];
      *v889 = v903;
    }
    char v904 = aJn0[++v902];
  }
  while (v902 != 8);
  uint64_t v905 = 0;
  char v906 = 32;
  do
  {
    *v889 = v903 + 1;
    char *v903 = v906;
    v903 = *v889;
    if (*v889 >= v889[3])
    {
      v903 = v889[2];
      *v889 = v903;
    }
    char v906 = aNaEc[++v905];
  }
  while (v905 != 8);
  sprintf1da(v889, v892[1], v1514, 0, 0);
  v907 = (*v889)++;
  char *v907 = 32;
  if (*v889 >= v889[3]) {
    *v889 = v889[2];
  }
  sprintf1da(v889, v892[2], v1514, 0, 0);
  v908 = (*v889)++;
  char *v908 = 32;
  if (*v889 >= v889[3]) {
    *v889 = v889[2];
  }
  sprintf1da(v889, *v892, v1514, 0, 0);
  v909 = (*v889)++;
  char *v909 = 32;
  v910 = *v889;
  if (*v889 >= v889[3])
  {
    v910 = v889[2];
    *v889 = v910;
  }
  if (*(int *)(v893 + 1928) <= 0)
  {
    char v915 = 32;
    uint64_t v916 = 1u;
    do
    {
      *v889 = v910 + 1;
      char *v910 = v915;
      v910 = *v889;
      if (*v889 >= v889[3])
      {
        v910 = v889[2];
        *v889 = v910;
      }
      char v915 = aXXXX[v916++];
    }
    while (v916 != 10);
  }
  else
  {
    sprintf_2d(v889, (int)*(double *)(v893 + 128));
    v911 = (*v889)++;
    char *v911 = 32;
    if (*v889 >= v889[3]) {
      *v889 = v889[2];
    }
    sprintf_2d(v889, (int)*(double *)(v893 + 136));
    v912 = (*v889)++;
    char *v912 = 32;
    if (*v889 >= v889[3]) {
      *v889 = v889[2];
    }
    sprintf_2d(v889, (int)sqrt(*(double *)(v893 + 88)));
    v913 = (*v889)++;
    char *v913 = 32;
    if (*v889 >= v889[3]) {
      *v889 = v889[2];
    }
    sprintf_2d(v889, (int)sqrt(*(double *)(v893 + 96)));
    v914 = (*v889)++;
    char *v914 = 32;
    v910 = *v889;
    if (*v889 >= v889[3])
    {
      v910 = v889[2];
      *v889 = v910;
    }
  }
  if (*(int *)(v893 + 1932) <= 0)
  {
    char v919 = 32;
    uint64_t v920 = 1u;
    do
    {
      *v889 = v910 + 1;
      char *v910 = v919;
      v910 = *v889;
      if (*v889 >= v889[3])
      {
        v910 = v889[2];
        *v889 = v910;
      }
      char v919 = aXX[v920++];
    }
    while (v920 != 6);
  }
  else
  {
    sprintf_2d(v889, (int)*(double *)(v893 + 216));
    v917 = (*v889)++;
    char *v917 = 32;
    if (*v889 >= v889[3]) {
      *v889 = v889[2];
    }
    sprintf_2d(v889, (int)sqrt(*(double *)(v893 + 200)));
    v918 = (*v889)++;
    char *v918 = 32;
    v910 = *v889;
    if (*v889 >= v889[3])
    {
      v910 = v889[2];
      *v889 = v910;
    }
  }
  if (*(int *)(v893 + 1920) <= 0)
  {
    char v923 = 32;
    uint64_t v924 = 1u;
    do
    {
      *v889 = v910 + 1;
      char *v910 = v923;
      v910 = *v889;
      if (*v889 >= v889[3])
      {
        v910 = v889[2];
        *v889 = v910;
      }
      char v923 = aXX[v924++];
    }
    while (v924 != 6);
  }
  else
  {
    sprintf_sgR8(v889, *(double *)(v893 + 16));
    v921 = (*v889)++;
    char *v921 = 32;
    if (*v889 >= v889[3]) {
      *v889 = v889[2];
    }
    sprintf_2d(v889, (int)sqrt(*(double *)v893));
    v922 = (*v889)++;
    char *v922 = 32;
    v910 = *v889;
    if (*v889 >= v889[3]) {
      v910 = v889[2];
    }
  }
  uint64_t v925 = 0;
  char v926 = 32;
  do
  {
    *v889 = v910 + 1;
    char *v910 = v926;
    v910 = *v889;
    if (*v889 >= v889[3])
    {
      v910 = v889[2];
      *v889 = v910;
    }
    char v926 = aEs_0[++v925];
  }
  while (v925 != 4);
  unsigned int v927 = *(_DWORD *)(v890 + 68);
  if (v927 >= 8) {
    char v928 = 48;
  }
  else {
    char v928 = v927 + 48;
  }
  *v889 = v910 + 1;
  char *v910 = v928;
  v929 = *v889;
  if (*v889 >= v889[3]) {
    v929 = v889[2];
  }
  *v889 = v929 + 1;
  char *v929 = 10;
  if (*v889 >= v889[3]) {
    *v889 = v889[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v889);
  v930 = (char **)v526[35];
  if (g_Logging_Cfg >= 5)
  {
    uint64_t v931 = 0;
    v932 = (unsigned __int8 *)v526[12];
    uint64_t v933 = v526[21];
    v934 = (double *)v526[16];
    unsigned int v935 = *(_DWORD *)v526;
    char v936 = 86;
    v937 = *v930;
    do
    {
      *v930 = v937 + 1;
      char *v937 = v936;
      v937 = *v930;
      if (*v930 >= v930[3])
      {
        v937 = v930[2];
        *v930 = v937;
      }
      char v936 = aVarf[++v931];
    }
    while (v931 != 4);
    sprintf_sgR8(v930, *(double *)(v933 + 6784));
    sprintf_sgR8(v930, v934[3372]);
    sprintf_sgR8(v930, *(double *)(v933 + 21688));
    sprintf_sgR8(v930, v934[3375]);
    sprintf_sgR8(v930, *(double *)(v933 + 36592));
    sprintf_sgR8(v930, v934[3378]);
    uint64_t v938 = 0;
    v939 = *v930;
    char v940 = 32;
    do
    {
      *v930 = v939 + 1;
      char *v939 = v940;
      v939 = *v930;
      if (*v930 >= v930[3])
      {
        v939 = v930[2];
        *v930 = v939;
      }
      char v940 = aS_0[++v938];
    }
    while (v938 != 2);
    sprintf_3d(v930, v935);
    v941 = *v930;
    char v942 = 32;
    uint64_t v943 = 1u;
    do
    {
      *v930 = v941 + 1;
      char *v941 = v942;
      v941 = *v930;
      if (*v930 >= v930[3])
      {
        v941 = v930[2];
        *v930 = v941;
      }
      char v942 = aI[v943++];
    }
    while (v943 != 4);
    double v944 = *(double *)(v933 + 1552) * 10.0;
    double v945 = -0.5;
    if (v944 > 0.0) {
      double v945 = 0.5;
    }
    double v946 = v944 + v945;
    if (v946 <= 2147483650.0)
    {
      if (v946 >= -2147483650.0) {
        unsigned int v947 = (int)v946;
      }
      else {
        unsigned int v947 = 0x80000000;
      }
    }
    else
    {
      unsigned int v947 = 0x7FFFFFFF;
    }
    sprintf_2f((uint64_t)v930, v947);
    int v951 = *(_DWORD *)(v933 + 52);
    if (v951 > -10)
    {
      v952 = *v930;
      char v955 = 32;
      if (v951 <= 99)
      {
        uint64_t v957 = 1u;
        do
        {
          *v930 = v952 + 1;
          char *v952 = v955;
          v952 = *v930;
          if (*v930 >= v930[3])
          {
            v952 = v930[2];
            *v930 = v952;
          }
          char v955 = aTs[v957++];
        }
        while (v957 != 4);
        sprintf_sp1d(v930, *(_DWORD *)(v933 + 52));
        v952 = *v930;
      }
      else
      {
        uint64_t v956 = 1u;
        do
        {
          *v930 = v952 + 1;
          char *v952 = v955;
          v952 = *v930;
          if (*v930 >= v930[3])
          {
            v952 = v930[2];
            *v930 = v952;
          }
          char v955 = aTs99[v956++];
        }
        while (v956 != 7);
      }
    }
    else
    {
      v952 = *v930;
      char v953 = 32;
      uint64_t v954 = 1u;
      do
      {
        *v930 = v952 + 1;
        char *v952 = v953;
        v952 = *v930;
        if (*v930 >= v930[3])
        {
          v952 = v930[2];
          *v930 = v952;
        }
        char v953 = aTs9[v954++];
      }
      while (v954 != 7);
    }
    uint64_t v958 = 0;
    char v959 = 32;
    do
    {
      *v930 = v952 + 1;
      char *v952 = v959;
      v952 = *v930;
      if (*v930 >= v930[3])
      {
        v952 = v930[2];
        *v930 = v952;
      }
      char v959 = aNf_0[++v958];
    }
    while (v958 != 4);
    sprintf_sp1d(v930, v932[80]);
    sprintf_sp1d(v930, v932[81]);
    sprintf_sp1d(v930, v932[82]);
    sprintf_sp1d(v930, v932[83]);
    v960 = (*v930)++;
    char *v960 = 10;
    if (*v930 >= v930[3]) {
      *v930 = v930[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v930);
    v930 = (char **)v526[35];
  }
  uint64_t v961 = v526[21];
  v962 = *v930;
  char v963 = 79;
  uint64_t v964 = 1u;
  do
  {
    *v930 = v962 + 1;
    char *v962 = v963;
    v962 = *v930;
    if (*v930 >= v930[3])
    {
      v962 = v930[2];
      *v930 = v962;
    }
    char v963 = aOrigSig[v964++];
  }
  while (v964 != 10);
  uint64_t v965 = 0;
  uint64_t v966 = v961 + 61736;
  do
  {
    sprintf_sgR8F(v930, sqrt(*(double *)(v966 + v965)));
    v965 += 8;
  }
  while (v965 != 96);
  v967 = (*v930)++;
  char *v967 = 10;
  if (*v930 >= v930[3]) {
    *v930 = v930[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v930);
  v968 = (char **)v526[35];
  uint64_t v969 = v526[21];
  v970 = *v968;
  char v971 = 83;
  uint64_t v972 = 1u;
  do
  {
    *v968 = v970 + 1;
    char *v970 = v971;
    v970 = *v968;
    if (*v968 >= v968[3])
    {
      v970 = v968[2];
      *v968 = v970;
    }
    char v971 = aSvecCor[v972++];
  }
  while (v972 != 10);
  for (uint64_t i3 = 0; i3 != 96; i3 += 8)
    sprintf_sgR8F(v968, *(double *)(v969 + 62560 + i3));
  v974 = *v968;
  for (unsigned int i4 = 3; i4 > 1; --i4)
  {
    *v968 = v974 + 1;
    char *v974 = 32;
    v974 = *v968;
    if (*v968 >= v968[3])
    {
      v974 = v968[2];
      *v968 = v974;
    }
  }
  uint64_t v976 = 0;
  uint64_t v977 = v969 + 62452;
  do
    sprintf1da(v968, *(unsigned __int8 *)(v977 + v976++), v1514, 0, 0);
  while (v976 != 12);
  v978 = (*v968)++;
  char *v978 = 10;
  if (*v968 >= v968[3]) {
    *v968 = v968[2];
  }
  v979 = (char **)v526[35];
  uint64_t v980 = v526[21];
  v981 = *v979;
  char v982 = 83;
  uint64_t v983 = 1u;
  do
  {
    *v979 = v981 + 1;
    char *v981 = v982;
    v981 = *v979;
    if (*v979 >= v979[3])
    {
      v981 = v979[2];
      *v979 = v981;
    }
    char v982 = aSvecSig[v983++];
  }
  while (v983 != 10);
  uint64_t v984 = 0;
  uint64_t v985 = v980 + 61344;
  do
  {
    sprintf_sgR8F(v979, sqrt(*(double *)(v985 + v984)));
    v984 += 8;
  }
  while (v984 != 96);
  v986 = (*v979)++;
  char *v986 = 10;
  if (*v979 >= v979[3]) {
    *v979 = v979[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v979);
  v987 = (char **)v526[35];
  uint64_t v988 = v526[16];
  uint64_t v989 = v526[21];
  if (!*(_DWORD *)(v988 + 152))
  {
    v990 = (double *)(v989 + 52744);
    v991 = *v987;
    char v992 = 81;
    uint64_t v993 = 1u;
    do
    {
      *v987 = v991 + 1;
      char *v991 = v992;
      v991 = *v987;
      if (*v987 >= v987[3])
      {
        v991 = v987[2];
        *v987 = v991;
      }
      char v992 = aQBSize[v993++];
    }
    while (v993 != 10);
    uint64_t v994 = 0;
    uint64_t v995 = v988 + 192;
    do
    {
      sprintf_sgR8F(v987, sqrt(*(double *)(v995 + v994)));
      v994 += 8;
    }
    while (v994 != 48);
    sprintf_sgR8F(v987, *v990);
    sprintf_sgR8F(v987, v990[1]);
    v996 = (*v987)++;
    char *v996 = 10;
    if (*v987 >= v987[3]) {
      *v987 = v987[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v987);
    v987 = (char **)v526[35];
    uint64_t v988 = v526[16];
    uint64_t v989 = v526[21];
  }
  if (g_Logging_Cfg >= 5)
  {
    v997 = (double *)(v989 + 79520);
    uint64_t v998 = v526[10];
    v999 = *v987;
    char v1000 = 119;
    uint64_t v1001 = 1u;
    do
    {
      *v987 = v999 + 1;
      char *v999 = v1000;
      v999 = *v987;
      if (*v987 >= v987[3])
      {
        v999 = v987[2];
        *v987 = v999;
      }
      char v1000 = aWrdop[v1001++];
    }
    while (v1001 != 10);
    sprintf_sgR8F(v987, sqrt(*(double *)(v988 + 15488)));
    for (uint64_t i5 = 0; i5 != 24; i5 += 8)
      sprintf_sgR8(v987, sqrt(*(double *)(v988 + 15496 + i5)));
    sprintf_sgR8(v987, *(double *)(v988 + 15520));
    v1003 = *v987;
    char v1004 = 32;
    uint64_t v1005 = 1u;
    do
    {
      *v987 = v1003 + 1;
      char *v1003 = v1004;
      v1003 = *v987;
      if (*v987 >= v987[3])
      {
        v1003 = v987[2];
        *v987 = v1003;
      }
      char v1004 = aPrefc[v1005++];
    }
    while (v1005 != 8);
    sprintf_LaLo(v987, v989 + 79520);
    sprintf_sgR8(v987, *(double *)(v989 + 79536));
    sprintf_sgR8(v987, *(double *)(v989 + 79536) - *(double *)(v998 + 248));
    v1006 = (*v987)++;
    char *v1006 = 32;
    if (*v987 >= v987[3]) {
      *v987 = v987[2];
    }
    v1007 = (double *)(v988 + 68288);
    uint64_t v1008 = -3;
    while (1)
    {
      double v1009 = *v997 - *(v1007 - 9);
      if (v1008 == -3) {
        goto LABEL_1737;
      }
      if (v1008 == -2) {
        break;
      }
LABEL_1738:
      sprintf_6d(v987, (int)v1009);
      v1011 = (*v987)++;
      char *v1011 = 32;
      v1012 = *v987;
      if (*v987 >= v987[3])
      {
        v1012 = v987[2];
        *v987 = v1012;
      }
      ++v1007;
      ++v997;
      BOOL v326 = __CFADD__(v1008++, 1);
      if (v326)
      {
        char v1013 = 32;
        uint64_t v1014 = 1u;
        do
        {
          *v987 = v1012 + 1;
          char *v1012 = v1013;
          v1012 = *v987;
          if (*v987 >= v987[3])
          {
            v1012 = v987[2];
            *v987 = v1012;
          }
          char v1013 = aVel[v1014++];
        }
        while (v1014 != 6);
        uint64_t v1015 = 0;
        uint64_t v1016 = v989 + 79544;
        do
        {
          sprintf_sgR8(v987, *(double *)(v1016 + v1015));
          v1015 += 8;
        }
        while (v1015 != 24);
        v1017 = (*v987)++;
        char *v1017 = 10;
        if (*v987 >= v987[3]) {
          *v987 = v987[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v987);
        v987 = (char **)v526[35];
        uint64_t v989 = v526[21];
        goto LABEL_1751;
      }
    }
    double v1010 = -6.28318531;
    if (v1009 >= 3.14159265 || (double v1010 = 6.28318531, v1009 < -3.14159265)) {
      double v1009 = v1009 + v1010;
    }
LABEL_1737:
    double v1009 = v1009 * *v1007;
    goto LABEL_1738;
  }
LABEL_1751:
  uint64_t v1018 = v526[9];
  v1019 = *v987;
  char v1020 = 67;
  uint64_t v1021 = 1u;
  do
  {
    *v987 = v1019 + 1;
    char *v1019 = v1020;
    v1019 = *v987;
    if (*v987 >= v987[3])
    {
      v1019 = v987[2];
      *v987 = v1019;
    }
    char v1020 = aClkbias[v1021++];
  }
  while (v1021 != 10);
  unsigned int v1022 = (int)(*(double *)(v989 + 1632) * 2997924580.0);
  sprintf_9f((uint64_t)v987, v1022, 2);
  v1023 = (*v987)++;
  char *v1023 = 32;
  if (*v987 >= v987[3]) {
    *v987 = v987[2];
  }
  unsigned int v1024 = (int)(*(double *)(v989 + 1640) * 2997924580.0);
  sprintf_9f((uint64_t)v987, v1024, 2);
  v1025 = (*v987)++;
  char *v1025 = 32;
  if (*v987 >= v987[3]) {
    *v987 = v987[2];
  }
  unsigned int v1026 = (int)(*(double *)(v989 + 1648) * 2997924580.0);
  sprintf_9f((uint64_t)v987, v1026, 2);
  v1027 = (*v987)++;
  char *v1027 = 32;
  v1028 = *v987;
  if (*v987 >= v987[3]) {
    v1028 = v987[2];
  }
  char v1029 = 32;
  uint64_t v1030 = 1u;
  do
  {
    *v987 = v1028 + 1;
    char *v1028 = v1029;
    v1028 = *v987;
    if (*v987 >= v987[3])
    {
      v1028 = v987[2];
      *v987 = v1028;
    }
    char v1029 = aDclk[v1030++];
  }
  while (v1030 != 7);
  if (v1024) {
    BOOL v1031 = v1022 == 0;
  }
  else {
    BOOL v1031 = 1;
  }
  if (v1031) {
    unsigned int v1032 = 0;
  }
  else {
    unsigned int v1032 = v1024 - v1022;
  }
  *v987 = v1028 + 1;
  char *v1028 = 32;
  if (*v987 >= v987[3]) {
    *v987 = v987[2];
  }
  sprintf_5f((uint64_t)v987, v1032, 2);
  if (v1026) {
    BOOL v1033 = v1022 == 0;
  }
  else {
    BOOL v1033 = 1;
  }
  if (v1033) {
    unsigned int v1034 = 0;
  }
  else {
    unsigned int v1034 = v1026 - v1022;
  }
  v1035 = (*v987)++;
  char *v1035 = 32;
  if (*v987 >= v987[3]) {
    *v987 = v987[2];
  }
  sprintf_5f((uint64_t)v987, v1034, 2);
  uint64_t v1036 = 0;
  v1037 = *v987;
  char v1038 = 32;
  do
  {
    *v987 = v1037 + 1;
    char *v1037 = v1038;
    v1037 = *v987;
    if (*v987 >= v987[3])
    {
      v1037 = v987[2];
      *v987 = v1037;
    }
    char v1038 = aL5L1[++v1036];
  }
  while (v1036 != 8);
  unsigned int v1039 = (int)(*(double *)(v989 + 1656) * 2.99792458e10);
  *v987 = v1037 + 1;
  char *v1037 = 32;
  if (*v987 >= v987[3]) {
    *v987 = v987[2];
  }
  sprintf_5f((uint64_t)v987, v1039, 3);
  v1040 = *v987;
  char v1041 = 32;
  uint64_t v1042 = 1u;
  do
  {
    *v987 = v1040 + 1;
    char *v1040 = v1041;
    v1040 = *v987;
    if (*v987 >= v987[3])
    {
      v1040 = v987[2];
      *v987 = v1040;
    }
    char v1041 = aIni[v1042++];
  }
  while (v1042 != 7);
  sprintf_2d(v987, *(unsigned __int8 *)(v989 + 1680));
  sprintf_2d(v987, *(unsigned __int8 *)(v989 + 1681));
  sprintf_2d(v987, *(unsigned __int8 *)(v989 + 1682));
  uint64_t v1043 = 0;
  v1044 = *v987;
  char v1045 = 32;
  do
  {
    *v987 = v1044 + 1;
    char *v1044 = v1045;
    v1044 = *v987;
    if (*v987 >= v987[3])
    {
      v1044 = v987[2];
      *v987 = v1044;
    }
    char v1045 = aLsKf[++v1043];
  }
  while (v1043 != 8);
  sprintf_2d(v987, *(unsigned __int8 *)(v989 + 79568));
  v1046 = *v987;
  char v1047 = 32;
  uint64_t v1048 = 1u;
  do
  {
    *v987 = v1046 + 1;
    char *v1046 = v1047;
    v1046 = *v987;
    if (*v987 >= v987[3])
    {
      v1046 = v987[2];
      *v987 = v1046;
    }
    char v1047 = aJit[v1048++];
  }
  while (v1048 != 7);
  sprintf_4f((uint64_t)v987, (int)((double)*(char *)(v1018 + 250) * 2.99792458), 2);
  LOBYTE(v1049) = *(unsigned char *)(v1018 + 251);
  sprintf_4f((uint64_t)v987, (int)((double)v1049 * 2.99792458), 2);
  v1050 = (*v987)++;
  char *v1050 = 10;
  if (*v987 >= v987[3]) {
    *v987 = v987[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v987);
  v1051 = (char **)v526[35];
  uint64_t v1052 = v526[7];
  if (g_Logging_Cfg >= 5)
  {
    v1053 = *v1051;
    char v1054 = 71;
    uint64_t v1055 = 1u;
    do
    {
      *v1051 = v1053 + 1;
      char *v1053 = v1054;
      v1053 = *v1051;
      if (*v1051 >= v1051[3])
      {
        v1053 = v1051[2];
        *v1051 = v1053;
      }
      char v1054 = aGlofrq[v1055++];
    }
    while (v1055 != 8);
    uint64_t v1056 = 0;
    uint64_t v1057 = v1052 + 17328;
    do
    {
      if (*(_DWORD *)(v1057 + 4 * v1056) != 2139062143)
      {
        sprintf_3d(v1051, v1056 + 1);
        sprintf_3d(v1051, *(_DWORD *)(v1057 + 4 * v1056));
        v1058 = (*v1051)++;
        char *v1058 = 59;
        v1053 = *v1051;
        if (*v1051 >= v1051[3])
        {
          v1053 = v1051[2];
          *v1051 = v1053;
        }
      }
      ++v1056;
    }
    while (v1056 != 24);
    *v1051 = v1053 + 1;
    char *v1053 = 10;
    if (*v1051 >= v1051[3]) {
      *v1051 = v1051[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v1051);
    v1051 = (char **)v526[35];
    uint64_t v1052 = v526[7];
  }
  uint64_t v1059 = 0;
  v1060 = *v1051;
  char v1061 = 71;
  do
  {
    *v1051 = v1060 + 1;
    char *v1060 = v1061;
    v1060 = *v1051;
    if (*v1051 >= v1051[3])
    {
      v1060 = v1051[2];
      *v1051 = v1060;
    }
    char v1061 = aGloslot[++v1059];
  }
  while (v1059 != 8);
  uint64_t v1062 = 0;
  uint64_t v1063 = v1052 + 17424;
  do
  {
    if (*(_DWORD *)(v1063 + 4 * v1062) != 2139062143)
    {
      sprintf_3d(v1051, v1062 - 7);
      sprintf_3d(v1051, *(_DWORD *)(v1063 + 4 * v1062));
      v1064 = (*v1051)++;
      char *v1064 = 59;
      v1060 = *v1051;
      if (*v1051 >= v1051[3])
      {
        v1060 = v1051[2];
        *v1051 = v1060;
      }
    }
    ++v1062;
  }
  while (v1062 != 14);
  *v1051 = v1060 + 1;
  char *v1060 = 10;
  if (*v1051 >= v1051[3]) {
    *v1051 = v1051[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1051);
  v1065 = (char **)v526[35];
  uint64_t v1066 = v526[10];
  uint64_t v1067 = v526[16];
  uint64_t v1068 = v526[21];
  v1069 = (unsigned int *)v526[6];
  v1070 = *v1065;
  char v1071 = 82;
  uint64_t v1072 = 1u;
  do
  {
    *v1065 = v1070 + 1;
    char *v1070 = v1071;
    v1070 = *v1065;
    if (*v1065 >= v1065[3])
    {
      v1070 = v1065[2];
      *v1065 = v1070;
    }
    char v1071 = aReset[v1072++];
  }
  while (v1072 != 8);
  sprintf1da(v1065, *(unsigned __int8 *)(v1067 + 136), v1514, 0, 0);
  sprintf_3d(v1065, *(_DWORD *)(v1067 + 140));
  sprintf_5d(v1065, *(_DWORD *)(v1067 + 144));
  sprintf_6d(v1065, *(_DWORD *)(v1067 + 148));
  sprintf_2d(v1065, *(unsigned __int8 *)(v1067 + 176));
  uint64_t v1073 = 0;
  v1074 = *v1065;
  char v1075 = 32;
  do
  {
    *v1065 = v1074 + 1;
    char *v1074 = v1075;
    v1074 = *v1065;
    if (*v1065 >= v1065[3])
    {
      v1074 = v1065[2];
      *v1065 = v1074;
    }
    char v1075 = aQb[++v1073];
  }
  while (v1073 != 4);
  if (*(unsigned char *)(v1067 + 183)) {
    char v1076 = 49;
  }
  else {
    char v1076 = 48;
  }
  *v1065 = v1074 + 1;
  char *v1074 = v1076;
  if (*v1065 >= v1065[3]) {
    *v1065 = v1065[2];
  }
  unsigned int v1077 = *(unsigned __int8 *)(v1067 + 184);
  if (*(unsigned char *)(v1067 + 186)) {
    v1077 |= 2u;
  }
  if (*(unsigned char *)(v1067 + 188)) {
    unsigned int v1078 = v1077 | 4;
  }
  else {
    unsigned int v1078 = v1077;
  }
  sprintf1da(v1065, v1078, v1514, 0, 0);
  if (*(unsigned char *)(v1067 + 187)) {
    unsigned int v1079 = *(unsigned __int8 *)(v1067 + 185) | 2;
  }
  else {
    unsigned int v1079 = *(unsigned __int8 *)(v1067 + 185);
  }
  sprintf1da(v1065, v1079, v1514, 0, 0);
  sprintf_6d(v1065, *(_DWORD *)(v1067 + 152));
  uint64_t v1080 = 0;
  v1081 = *v1065;
  char v1082 = 32;
  do
  {
    *v1065 = v1081 + 1;
    char *v1081 = v1082;
    v1081 = *v1065;
    if (*v1065 >= v1065[3])
    {
      v1081 = v1065[2];
      *v1065 = v1081;
    }
    char v1082 = aSt_0[++v1080];
  }
  while (v1080 != 4);
  sprintf1da(v1065, *((unsigned __int8 *)v1069 + 16), v1514, 0, 0);
  v1083 = *v1065;
  v1084 = &g_TOW_Stat_As_String[10 * *v1069 + 1];
  char v1085 = 32;
  do
  {
    *v1065 = v1083 + 1;
    char *v1083 = v1085;
    v1083 = *v1065;
    if (*v1065 >= v1065[3])
    {
      v1083 = v1065[2];
      *v1065 = v1083;
    }
    int v1086 = *v1084++;
    char v1085 = v1086;
  }
  while (v1086);
  uint64_t v1087 = 0;
  char v1088 = 32;
  do
  {
    *v1065 = v1083 + 1;
    char *v1083 = v1088;
    v1083 = *v1065;
    if (*v1065 >= v1065[3])
    {
      v1083 = v1065[2];
      *v1065 = v1083;
    }
    char v1088 = aSp[++v1087];
  }
  while (v1087 != 4);
  sprintf1da(v1065, *(unsigned __int8 *)(v1066 + 18), v1514, 0, 0);
  sprintf1da(v1065, *(unsigned __int8 *)(v1067 + 240), v1514, 0, 0);
  sprintf1da(v1065, *(unsigned __int8 *)(v1067 + 241), v1514, 0, 0);
  sprintf1da(v1065, *(unsigned __int8 *)(v1068 + 62451), v1514, 0, 0);
  v1089 = *v1065;
  char v1090 = 32;
  uint64_t v1091 = 1u;
  do
  {
    *v1065 = v1089 + 1;
    char *v1089 = v1090;
    v1089 = *v1065;
    if (*v1065 >= v1065[3])
    {
      v1089 = v1065[2];
      *v1065 = v1089;
    }
    char v1090 = aFf[v1091++];
  }
  while (v1091 != 6);
  sprintf_3f((uint64_t)v1065, 10 * *(_DWORD *)(v1067 + 27136) / 0x3E8u, 2);
  sprintf_sp1d(v1065, *(_DWORD *)(v1068 + 48));
  v1092 = *v1065;
  char v1093 = 32;
  uint64_t v1094 = 1u;
  do
  {
    *v1065 = v1092 + 1;
    char *v1092 = v1093;
    v1092 = *v1065;
    if (*v1065 >= v1065[3])
    {
      v1092 = v1065[2];
      *v1065 = v1092;
    }
    char v1093 = aOr[v1094++];
  }
  while (v1094 != 6);
  sprintf1da(v1065, *(unsigned __int8 *)(v1068 + 1880), v1514, 0, 0);
  v1095 = (*v1065)++;
  char *v1095 = 10;
  if (*v1065 >= v1065[3]) {
    *v1065 = v1065[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1065);
  v1096 = (char **)v526[35];
  uint64_t v1459 = v526[5];
  uint64_t v1456 = v526[4];
  uint64_t v1457 = v526[8];
  uint64_t v1460 = v526[16];
  uint64_t v1097 = v526[21];
  uint64_t v1463 = v526[10];
  uint64_t v1454 = v526[7];
  uint64_t v1455 = v526[11];
  uint64_t v1466 = v526[12];
  uint64_t v1461 = v526[25];
  if (*(unsigned char *)(v1460 + 68264))
  {
    double v1098 = k * 1000.0;
    if (!*(unsigned char *)(v1097 + 62457)) {
      double v1098 = v1098 - *(double *)(v1097 + 62504);
    }
    uint64_t v1520 = 0;
    *(void *)v1519 = 0;
    uint64_t v1521 = 0;
    double v1099 = *(double *)(v1460 + 68240);
    if (v1099 > 0.0)
    {
      __double2 v1100 = __sincos_stret(*(double *)(v1460 + 68256) * 0.0174532925);
      double v1101 = -*(double *)(v1460 + 68248);
      __double2 v1102 = __sincos_stret(*(double *)(v1460 + 68216));
      __double2 v1103 = __sincos_stret(*(double *)(v1460 + 68224));
      unint64_t v1104 = 0;
      *(double *)v1514 = -(v1102.__sinval * v1103.__cosval);
      *(double *)&v1514[8] = -(v1102.__sinval * v1103.__sinval);
      *(double *)&v1514[16] = v1102.__cosval;
      double v1515 = -v1103.__sinval;
      double cosval = v1103.__cosval;
      uint64_t v1517 = 0;
      v1518[0] = -(v1102.__cosval * v1103.__cosval);
      v1518[1] = -(v1102.__cosval * v1103.__sinval);
      v1518[2] = -v1102.__sinval;
      do
      {
        *(double *)&v1519[v1104 / 2] = v1099 * v1100.__sinval * *(double *)&v1514[v1104 + 24]
                                     + *(double *)&v1514[v1104] * (v1099 * v1100.__cosval)
                                     + v1518[v1104 / 8] * v1101;
        v1104 += 8;
      }
      while (v1104 != 24);
    }
    uint64_t v1105 = 0;
    uint64_t v1106 = v1466 + 96;
    uint64_t v1107 = v1097 + 1560;
    do
    {
      *(double *)&v1472[v1105] = *(double *)(v1107 + v1105 * 2) - *(double *)(v1460 + 68192 + v1105 * 2);
      *(double *)&v1504[v1105 * 2] = *(double *)(v1107 + v1105 * 2 + 24) - *(double *)&v1519[v1105];
      v1105 += 4;
    }
    while (v1105 != 12);
    bzero(v1514, 0x400uLL);
    bzero(v1513, 0x400uLL);
    bzero(v1512, 0x400uLL);
    uint64_t v1108 = 0;
    double v1109 = fabs(v1098);
    uint64_t v1110 = v1097 + 52760;
    double v1111 = 0.0;
    uint64_t v1112 = v1097 + 21656;
    double v1113 = 0.0;
    double v1114 = 0.0;
    double v1115 = 0.0;
    uint64_t v1116 = v1097 + 6752;
    do
    {
      if (Is_Legal(*(_DWORD *)(v1106 + 4 * v1108)))
      {
        if (*(unsigned char *)(v1097 + v1108 + 7064)
          || (double v1471 = 0.0, !R8_EQ((const double *)(v1097 + 8 * v1108 + 12056), &v1471)))
        {
          uint64_t v1117 = 0;
          double v1118 = 0.0;
          do
          {
            double v1118 = v1118 + *(double *)&v1472[v1117] * *(double *)(v1110 + v1117 * 2);
            v1117 += 4;
          }
          while (v1117 != 12);
          if (v1109 > 0.5) {
            double v1118 = v1118 - *(double *)(v1097 + 56 * v1108 + 52808) * v1098;
          }
          double v1119 = v1118 + *(double *)(v1116 + 8 * v1108 + 5304);
          *(double *)&v1514[8 * v1108] = v1119;
          if ((*(_DWORD *)(v1116 + 4 * v1108 + 568) - 1) >= 0x1D)
          {
            double v1120 = 1.0 / *(double *)(v1097 + 8 * v1108 + 17432);
            double v1115 = v1115 + v1120 * v1119;
            double v1114 = v1114 + v1120;
          }
        }
        if (*(unsigned char *)(v1097 + v1108 + 21968)
          || (double v1471 = 0.0, !R8_EQ((const double *)(v1097 + 8 * v1108 + 26960), &v1471)))
        {
          uint64_t v1121 = 0;
          double v1122 = 0.0;
          do
          {
            double v1122 = v1122 + *(double *)&v1504[v1121] * *(double *)(v1110 + v1121);
            v1121 += 8;
          }
          while (v1121 != 24);
          double v1123 = v1122 + *(double *)(v1112 + 8 * v1108 + 5304);
          *(double *)&v1513[2 * v1108] = v1123;
          if ((*(_DWORD *)(v1112 + 4 * v1108 + 568) - 1) >= 0x1D)
          {
            double v1124 = 1.0 / *(double *)(v1097 + 8 * v1108 + 32336);
            double v1113 = v1113 + v1124 * v1123;
            double v1111 = v1111 + v1124;
          }
        }
        if (*(unsigned char *)(v1097 + v1108 + 36872)
          || (double v1471 = 0.0, !R8_EQ((const double *)(v1097 + 8 * v1108 + 41864), &v1471)))
        {
          uint64_t v1125 = 0;
          double v1126 = 0.0;
          do
          {
            double v1126 = v1126 + *(double *)&v1504[v1125] * *(double *)(v1110 + v1125);
            v1125 += 8;
          }
          while (v1125 != 24);
          *(double *)&v1512[v1108] = v1126 + *(double *)(v1097 + 8 * v1108 + 41864);
        }
      }
      ++v1108;
      v1110 += 56;
    }
    while (v1108 != 128);
    uint64_t v1127 = 0;
    if (v1114 <= 0.0 || v1115 == 0.0) {
      double v1130 = 0.0;
    }
    else {
      double v1130 = v1115 / v1114;
    }
    BOOL v1132 = v1111 <= 0.0 || v1113 == 0.0;
    v1133 = (const double *)(v1097 + 41864);
    v1134 = (const double *)(v1097 + 26960);
    v1135 = (const double *)(v1097 + 12056);
    if (v1132) {
      double v1136 = 0.0;
    }
    else {
      double v1136 = v1113 / v1111;
    }
    do
    {
      if (Is_Legal(*(_DWORD *)(v1106 + 4 * v1127)))
      {
        if (*(unsigned char *)(v1097 + 7064 + v1127) || (double v1471 = 0.0, !R8_EQ(v1135, &v1471))) {
          *(double *)&v1514[8 * v1127] = *(double *)&v1514[8 * v1127] - v1130;
        }
        if (*(unsigned char *)(v1097 + 21968 + v1127) || (double v1471 = 0.0, !R8_EQ(v1134, &v1471))) {
          *(double *)&v1513[2 * v1127] = *(double *)&v1513[2 * v1127] - v1136;
        }
        if (*(unsigned char *)(v1097 + 36872 + v1127) || (double v1471 = 0.0, !R8_EQ(v1133, &v1471))) {
          *(double *)&v1512[v1127] = *(double *)&v1512[v1127] - v1136;
        }
      }
      ++v1127;
      ++v1133;
      ++v1134;
      ++v1135;
    }
    while (v1127 != 128);
  }
  uint64_t v1137 = 0;
  long long v1510 = 0u;
  long long v1511 = 0u;
  long long v1508 = 0u;
  long long v1509 = 0u;
  long long v1506 = 0u;
  long long v1507 = 0u;
  *(_OWORD *)v1504 = 0u;
  long long v1505 = 0u;
  long long v1502 = 0u;
  long long v1503 = 0u;
  long long v1500 = 0u;
  long long v1501 = 0u;
  long long v1498 = 0u;
  long long v1499 = 0u;
  long long v1496 = 0u;
  long long v1497 = 0u;
  long long v1494 = 0u;
  long long v1495 = 0u;
  long long v1492 = 0u;
  long long v1493 = 0u;
  long long v1490 = 0u;
  long long v1491 = 0u;
  long long v1488 = 0u;
  long long v1489 = 0u;
  long long v1486 = 0u;
  long long v1487 = 0u;
  long long v1484 = 0u;
  long long v1485 = 0u;
  long long v1482 = 0u;
  long long v1483 = 0u;
  long long v1480 = 0u;
  long long v1481 = 0u;
  long long v1478 = 0u;
  long long v1479 = 0u;
  long long v1476 = 0u;
  long long v1477 = 0u;
  long long v1474 = 0u;
  long long v1475 = 0u;
  v1138 = (char *)(v1466 + 99);
  *(_OWORD *)v1472 = 0u;
  long long v1473 = 0u;
  do
  {
    v1504[v1137] = v1137;
    int v1139 = *(v1138 - 3);
    if (*(v1138 - 3))
    {
      if (v1139 == 2) {
        int v1140 = *v1138;
      }
      else {
        int v1140 = *(v1138 - 1);
      }
      *(_DWORD *)&v1472[2 * v1137] = 1000000 * v1139 + 10000 * *(v1138 - 2) + v1140;
    }
    ++v1137;
    v1138 += 4;
  }
  while (v1137 != 128);
  VecSortIndexAscI4((int *)v1472, v1504, 0, 127);
  uint64_t v1141 = 0;
  while (2)
  {
    uint64_t v1142 = v1504[v1141];
    uint64_t v1143 = v1466 + 4 * v1142;
    int v1145 = *(unsigned __int8 *)(v1143 + 96);
    v1144 = (unsigned __int8 *)(v1143 + 96);
    if (v1145)
    {
      int v1146 = *(_DWORD *)(v1463 + 4 * v1142 + 1640);
      BOOL v1147 = g_Logging_Cfg <= 3 && v1146 < 4;
      if (!v1147)
      {
        unsigned int v1465 = v1144[2];
        if (v1144[2]) {
          int v1148 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1144);
        }
        else {
          int v1148 = -1;
        }
        v1149 = *v1096;
        char v1150 = 83;
        uint64_t v1151 = 1u;
        do
        {
          *v1096 = v1149 + 1;
          char *v1149 = v1150;
          v1149 = *v1096;
          if (*v1096 >= v1096[3])
          {
            v1149 = v1096[2];
            *v1096 = v1149;
          }
          char v1150 = aSv[v1151++];
        }
        while (v1151 != 4);
        char v1152 = ch_CONSTELL_ID[*v1144];
        *v1096 = v1149 + 1;
        char *v1149 = v1152;
        v1153 = *v1096;
        if (*v1096 >= v1096[3])
        {
          v1153 = v1096[2];
          *v1096 = v1153;
        }
        uint64_t v1154 = 3 * v1144[1];
        char v1155 = ch_GNSS_SIGID[v1154];
        if (v1155)
        {
          v1156 = &ch_GNSS_SIGID[v1154 + 1];
          do
          {
            *v1096 = v1153 + 1;
            char *v1153 = v1155;
            v1153 = *v1096;
            if (*v1096 >= v1096[3])
            {
              v1153 = v1096[2];
              *v1096 = v1153;
            }
            int v1157 = *v1156++;
            char v1155 = v1157;
          }
          while (v1157);
        }
        sprintf_4d(v1096, v1465);
        sprintf_3d(v1096, (char)v1144[3]);
        if (*v1144 == 2) {
          unsigned int v1158 = (char)v1144[3] + 8;
        }
        else {
          unsigned int v1158 = 0;
        }
        int v1462 = v1148;
        sprintf_3d(v1096, v1158);
        uint64_t v1464 = v1466 + v1142;
        sprintf_3d(v1096, *(unsigned __int8 *)(v1466 + v1142 + 864));
        v1159 = (*v1096)++;
        char *v1159 = 32;
        if (*v1096 >= v1096[3]) {
          *v1096 = v1096[2];
        }
        uint64_t v1160 = v1466 + 2 * v1142;
        sprintf_04x(v1096, *(unsigned __int16 *)(v1160 + 992));
        sprintf_3d(v1096, *(_DWORD *)(v1466 + 4 * v1142 + 1248));
        LOBYTE(v1161) = *(unsigned char *)(v1464 + 1760);
        LOBYTE(v1162) = *(unsigned char *)(v1464 + 1888);
        double v1163 = ((double)v1161 + (double)v1162 * 0.0625) * 10.0;
        if (v1163 <= 0.0) {
          double v1164 = -0.5;
        }
        else {
          double v1164 = 0.5;
        }
        double v1165 = v1163 + v1164;
        if (v1165 <= 2147483650.0)
        {
          if (v1165 >= -2147483650.0) {
            unsigned int v1166 = (int)v1165;
          }
          else {
            unsigned int v1166 = 0x80000000;
          }
        }
        else
        {
          unsigned int v1166 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1096, v1166, 2);
        LOBYTE(v1167) = *(unsigned char *)(v1466 + v1142 + 2016);
        LOBYTE(v1168) = *(unsigned char *)(v1466 + v1142 + 2144);
        double v1169 = ((double)v1167 + (double)v1168 * 0.0625) * 10.0;
        if (v1169 <= 0.0) {
          double v1170 = -0.5;
        }
        else {
          double v1170 = 0.5;
        }
        double v1171 = v1169 + v1170;
        if (v1171 <= 2147483650.0)
        {
          if (v1171 >= -2147483650.0) {
            unsigned int v1172 = (int)v1171;
          }
          else {
            unsigned int v1172 = 0x80000000;
          }
        }
        else
        {
          unsigned int v1172 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1096, v1172, 2);
        __int16 v1173 = *(_WORD *)(v1160 + 992);
        if ((v1173 & 8) != 0)
        {
          if ((v1173 & 0xC0) != 0)
          {
            v1174 = (unsigned __int16 *)(v1466 + 2 * v1142 + 2912);
          }
          else
          {
            if ((v1173 & 0x30) == 0) {
              goto LABEL_1976;
            }
            v1174 = (unsigned __int16 *)(v1466 + 2 * v1142 + 2656);
          }
        }
        else
        {
LABEL_1976:
          v1174 = (unsigned __int16 *)(v1466 + 2 * v1142 + 2400);
        }
        sprintf_6d(v1096, *v1174);
        if (!v1465 || v1146 == 3)
        {
          v1176 = *v1096;
          char v1177 = 32;
          uint64_t v1178 = 1u;
          do
          {
            *v1096 = v1176 + 1;
            char *v1176 = v1177;
            v1176 = *v1096;
            if (*v1096 >= v1096[3])
            {
              v1176 = v1096[2];
              *v1096 = v1176;
            }
            char v1177 = aX90[v1178++];
          }
          while (v1178 != 13);
        }
        else
        {
          if (*(unsigned char *)(v1097 + v1142 + 57) && (uint64_t v1175 = v1460 + 2 * v1142, *(_WORD *)(v1175 + 16648)))
          {
            sprintf_5d(v1096, *(unsigned __int16 *)(v1175 + 16648));
          }
          else
          {
            v1179 = *v1096;
            for (unsigned int i6 = 5; i6 > 1; --i6)
            {
              *v1096 = v1179 + 1;
              char *v1179 = 32;
              v1179 = *v1096;
              if (*v1096 >= v1096[3])
              {
                v1179 = v1096[2];
                *v1096 = v1179;
              }
            }
            if (*(__int16 *)(v1097 + 2 * v1142 + 62932) < 0)
            {
              *v1096 = v1179 + 1;
              char v1182 = 120;
            }
            else if (*v1144 == 3 {
                   && (uint64_t v1181 = v1465 - 1, *(unsigned char *)(v1454 + v1181 + 17672))
            }
                   && !*(unsigned char *)(*(void *)(v1454 + 17616) + v1181))
            {
              *v1096 = v1179 + 1;
              char v1182 = 109;
            }
            else
            {
              char v1182 = ch_EPH_ALM[*(unsigned int *)(v1455 + 192 * *(unsigned __int16 *)(v1097 + 2 * v1142 + 62932) + 176)];
              *v1096 = v1179 + 1;
            }
            char *v1179 = v1182;
            if (*v1096 >= v1096[3]) {
              *v1096 = v1096[2];
            }
          }
          int v1183 = *(char *)(v1456 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1144));
          if (v1183 <= -9) {
            unsigned int v1184 = -9;
          }
          else {
            unsigned int v1184 = v1183;
          }
          sprintf_3d(v1096, v1184);
          unsigned int v1185 = *(unsigned __int16 *)(v1456 + 2 * (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1144) + 218);
          if ((v1185 & 0x8000) != 0)
          {
            uint64_t v1186 = 0;
            v1187 = *v1096;
            char v1188 = 32;
            do
            {
              *v1096 = v1187 + 1;
              char *v1187 = v1188;
              v1187 = *v1096;
              if (*v1096 >= v1096[3])
              {
                v1187 = v1096[2];
                *v1096 = v1187;
              }
              char v1188 = a0[++v1186];
            }
            while (v1186 != 4);
          }
          else
          {
            sprintf_4d(v1096, v1185);
          }
        }
        sprintf_4d(v1096, *(unsigned __int16 *)(v1466 + 2 * v1142 + 8160));
        v1189 = (*v1096)++;
        char *v1189 = 32;
        if (*v1096 >= v1096[3]) {
          *v1096 = v1096[2];
        }
        sprintf_sgR8(v1096, *(double *)(v1097 + 6752 + 8 * v1142 + 6328));
        unint64_t v1190 = Meas_Used_BitField(v1097 + 6752, v1142);
        sprintf_2x(v1096, v1190);
        uint64_t v1191 = *(int *)(v1097 + 6752 + 4 * v1142 + 568);
        if (v1191 >= 0x1E)
        {
          gn_report_assertion_failure("SV_Meas_Edit_Char");
          char v1192 = 120;
        }
        else
        {
          char v1192 = aCghkmnpqrstvya[v1191];
        }
        v1193 = (*v1096)++;
        char *v1193 = v1192;
        v1194 = *v1096;
        if (*v1096 >= v1096[3]) {
          v1194 = v1096[2];
        }
        *v1096 = v1194 + 1;
        char *v1194 = 32;
        if (*v1096 >= v1096[3]) {
          *v1096 = v1096[2];
        }
        if (*(unsigned char *)(v1097 + v1142 + 36872) || (*(_DWORD *)(v1097 + 4 * v1142 + 37128) - 1) <= 0x1C)
        {
          sprintf_sgR8(v1096, *(double *)(v1097 + 36560 + 8 * v1142 + 7352));
          unint64_t v1195 = Meas_Used_BitField(v1097 + 36560, v1142);
          sprintf_2x(v1096, v1195);
          uint64_t v1196 = *(int *)(v1097 + 36560 + 4 * v1142 + 568);
          if (v1196 >= 0x1E)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            char v1197 = 120;
          }
          else
          {
            char v1197 = aCghkmnpqrstvya[v1196];
          }
          unsigned int v1198 = v1462;
          v1199 = (*v1096)++;
          char *v1199 = v1197;
          v1200 = *v1096;
          if (*v1096 >= v1096[3])
          {
            v1200 = v1096[2];
            *v1096 = v1200;
          }
          v1201 = " 1 ";
        }
        else
        {
          sprintf_sgR8(v1096, *(double *)(v1097 + 21656 + 8 * v1142 + 7352));
          unint64_t v1219 = Meas_Used_BitField(v1097 + 21656, v1142);
          sprintf_2x(v1096, v1219);
          uint64_t v1220 = *(int *)(v1097 + 21656 + 4 * v1142 + 568);
          if (v1220 >= 0x1E)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            char v1221 = 120;
          }
          else
          {
            char v1221 = aCghkmnpqrstvya[v1220];
          }
          unsigned int v1198 = v1462;
          v1238 = (*v1096)++;
          char *v1238 = v1221;
          v1200 = *v1096;
          if (*v1096 >= v1096[3])
          {
            v1200 = v1096[2];
            *v1096 = v1200;
          }
          v1201 = " 2 ";
          if (!*(unsigned char *)(v1097 + v1142 + 51464)) {
            v1201 = " 0 ";
          }
        }
        char v1202 = *v1201;
        if (*v1201)
        {
          v1203 = (unsigned __int8 *)(v1201 + 1);
          do
          {
            *v1096 = v1200 + 1;
            char *v1200 = v1202;
            v1200 = *v1096;
            if (*v1096 >= v1096[3])
            {
              v1200 = v1096[2];
              *v1096 = v1200;
            }
            int v1204 = *v1203++;
            char v1202 = v1204;
          }
          while (v1204);
        }
        if (v1465 && v1146 == 1)
        {
          int v1205 = *(char *)(v1459 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1144) + 5976);
          if (v1205 < 0 || !*(unsigned char *)(v1459 + 48 * v1205 + 76))
          {
            if (v1465 - 120 >= 0x27) {
              unsigned int v1207 = (int)((double)-*(__int16 *)(v1459 + 24) * 1.57542);
            }
            else {
              unsigned int v1207 = -9999;
            }
          }
          else
          {
            unsigned int v1206 = v1144[1];
            if (v1206 <= 0xF && ((1 << v1206) & 0xDD77) != 0)
            {
              if (((1 << v1206) & 0xBBBF) != 0)
              {
                unsigned int v1207 = *(__int16 *)(v1459 + 48 * v1205 + 94);
                goto LABEL_2046;
              }
              int v1256 = *(__int16 *)(v1459 + 48 * v1205 + 94);
              int v1257 = 118;
            }
            else
            {
              int v1256 = *(__int16 *)(v1459 + 48 * v1205 + 94);
              int v1257 = 115;
            }
            unsigned int v1207 = v1256 * v1257 / 154;
          }
        }
        else
        {
          Get_SV_Carrier_Inv_Wavelength();
          unsigned int v1207 = (int)(v1208 * *(double *)(v1466 + 8 * v1142 + 4448));
        }
LABEL_2046:
        sprintf_6d(v1096, v1207);
        v1209 = (*v1096)++;
        char *v1209 = 32;
        v1210 = *v1096;
        if (*v1096 >= v1096[3])
        {
          v1210 = v1096[2];
          *v1096 = v1210;
        }
        if (*(_DWORD *)v1144)
        {
          int v1211 = *(_DWORD *)v1097 - *(_DWORD *)(v1457 + 4 * v1142 + 576);
          if (v1211 >= -999)
          {
            int v1215 = v1211 / 1000;
            if (v1215 >= 9) {
              unsigned int v1212 = 9;
            }
            else {
              unsigned int v1212 = v1215;
            }
          }
          else
          {
            unsigned int v1212 = 0;
          }
          sprintf_2d(v1096, v1212);
        }
        else
        {
          uint64_t v1213 = 0;
          char v1214 = 32;
          do
          {
            *v1096 = v1210 + 1;
            char *v1210 = v1214;
            v1210 = *v1096;
            if (*v1096 >= v1096[3])
            {
              v1210 = v1096[2];
              *v1096 = v1210;
            }
            char v1214 = aX[++v1213];
          }
          while (v1213 != 2);
        }
        unsigned int v1216 = 0;
        if (v1465)
        {
          LODWORD(v1217) = 0;
          if ((v1198 & 0x80000000) == 0)
          {
            if (*(char *)(v1459 + v1198 + 5976) < 0)
            {
              unsigned int v1216 = (int)((double)-*(__int16 *)(v1459 + 24) * 1.57542) / 10;
              LODWORD(v1217) = (5381 * *(unsigned __int16 *)(v1459 + 4)) >> 10;
            }
            else
            {
              unsigned int v1216 = *(unsigned __int16 *)(v1459 + 48 * *(unsigned __int8 *)(v1459 + v1198 + 5976) + 98);
              unsigned int v1218 = v1144[1];
              if (v1218 <= 0xF && ((1 << v1218) & 0xDD77) != 0)
              {
                if (((1 << v1218) & 0xBBBF) != 0) {
                  LODWORD(v1217) = *(unsigned __int16 *)(v1459 + 48 * *(unsigned __int8 *)(v1459 + v1198 + 5976) + 90);
                }
                else {
                  unint64_t v1217 = (27889399
                }
                         * (unint64_t)(118
                                            * *(unsigned __int16 *)(v1459
                                                                                + 48
                                                                                * *(unsigned __int8 *)(v1459 + v1198 + 5976)
                                                                                + 90))) >> 32;
              }
              else
              {
                unint64_t v1217 = (27889399
                       * (unint64_t)(115
                                          * *(unsigned __int16 *)(v1459
                                                                              + 48
                                                                              * *(unsigned __int8 *)(v1459 + v1198 + 5976)
                                                                              + 90))) >> 32;
              }
            }
          }
        }
        else
        {
          LODWORD(v1217) = 0;
        }
        sprintf_5d(v1096, v1216);
        sprintf_6d(v1096, v1217);
        if (!Is_Legal(*(_DWORD *)v1144) || (v1198 & 0x80000000) != 0)
        {
          v1223 = *v1096;
          char v1224 = 32;
          uint64_t v1225 = 1u;
          v1222 = (unsigned char *)(v1097 + v1142 + 36872);
          do
          {
            *v1096 = v1223 + 1;
            char *v1223 = v1224;
            v1223 = *v1096;
            if (*v1096 >= v1096[3])
            {
              v1223 = v1096[2];
              *v1096 = v1223;
            }
            char v1224 = a00_0[v1225++];
          }
          while (v1225 != 15);
        }
        else
        {
          sprintf_8d(v1096, *(_DWORD *)(v1461 + 4 * v1142));
          sprintf_6d(v1096, *(__int16 *)(v1461 + 2 * v1142 + 512));
          v1222 = (unsigned char *)(v1097 + v1142 + 36872);
        }
        if (*(unsigned char *)(v1097 + v1142 + 7064)
          || (*(_DWORD *)(v1097 + 6752 + 4 * v1142 + 568) - 1) < 0x1D
          || *(unsigned char *)(v1097 + v1142 + 21968)
          || (*(_DWORD *)(v1097 + 4 * v1142 + 22224) - 1) < 0x1D
          || *v1222
          || (*(_DWORD *)(v1097 + 4 * v1142 + 37128) - 1) <= 0x1C)
        {
          uint64_t v1226 = v1097 + 8 * v1142;
          sprintf_sgR8(v1096, *(double *)(v1226 + 19608));
          double v1227 = sqrt(*(double *)(v1226 + 17432));
          if (v1227 <= 99999.0)
          {
            if (v1227 <= 999.9)
            {
              double v1234 = v1227 * 10.0;
              if (v1234 <= 0.0) {
                double v1235 = -0.5;
              }
              else {
                double v1235 = 0.5;
              }
              double v1236 = v1234 + v1235;
              if (v1236 <= 2147483650.0)
              {
                if (v1236 >= -2147483650.0) {
                  unsigned int v1237 = (int)v1236;
                }
                else {
                  unsigned int v1237 = 0x80000000;
                }
              }
              else
              {
                unsigned int v1237 = 0x7FFFFFFF;
              }
              sprintf_5f((uint64_t)v1096, v1237, 2);
            }
            else
            {
              if (v1227 <= 0.0) {
                double v1231 = -0.5;
              }
              else {
                double v1231 = 0.5;
              }
              double v1232 = v1227 + v1231;
              if (v1232 <= 2147483650.0)
              {
                if (v1232 >= -2147483650.0) {
                  unsigned int v1233 = (int)v1232;
                }
                else {
                  unsigned int v1233 = 0x80000000;
                }
              }
              else
              {
                unsigned int v1233 = 0x7FFFFFFF;
              }
              sprintf_6d(v1096, v1233);
            }
          }
          else
          {
            v1228 = *v1096;
            char v1229 = 32;
            uint64_t v1230 = 1u;
            do
            {
              *v1096 = v1228 + 1;
              char *v1228 = v1229;
              v1228 = *v1096;
              if (*v1096 >= v1096[3])
              {
                v1228 = v1096[2];
                *v1096 = v1228;
              }
              char v1229 = a99999[v1230++];
            }
            while (v1230 != 7);
          }
          if (*v1222 || (*(_DWORD *)(v1097 + 4 * v1142 + 37128) - 1) <= 0x1C)
          {
            uint64_t v1239 = v1097 + 8 * v1142;
            uint64_t v1240 = v1239 + 36560;
            sprintf_sgR8(v1096, *(double *)(v1239 + 49416));
            double v1241 = sqrt(*(double *)(v1240 + 10680));
            if (v1241 >= 9.89999962) {
              double v1242 = 9899.99962;
            }
            else {
              double v1242 = v1241 * 1000.0;
            }
            if (v1242 <= 0.0) {
              double v1243 = -0.5;
            }
            else {
              double v1243 = 0.5;
            }
            double v1244 = v1242 + v1243;
            if (v1244 <= 2147483650.0)
            {
              if (v1244 >= -2147483650.0) {
                unsigned int v1245 = (int)v1244;
              }
              else {
                unsigned int v1245 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1245 = 0x7FFFFFFF;
            }
            uint64_t v1246 = (uint64_t)v1096;
            int v1247 = 4;
          }
          else
          {
            uint64_t v1251 = v1097 + 8 * v1142;
            sprintf_sgR8(v1096, *(double *)(v1251 + 34512));
            double v1252 = sqrt(*(double *)(v1251 + 32336));
            if (v1252 >= 99.9000015) {
              double v1253 = 9990.00015;
            }
            else {
              double v1253 = v1252 * 100.0;
            }
            if (v1253 <= 0.0) {
              double v1254 = -0.5;
            }
            else {
              double v1254 = 0.5;
            }
            double v1255 = v1253 + v1254;
            if (v1255 <= 2147483650.0)
            {
              if (v1255 >= -2147483650.0) {
                unsigned int v1245 = (int)v1255;
              }
              else {
                unsigned int v1245 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1245 = 0x7FFFFFFF;
            }
            uint64_t v1246 = (uint64_t)v1096;
            int v1247 = 3;
          }
          sprintf_5f(v1246, v1245, v1247);
          sprintf_4d(v1096, *(unsigned __int8 *)(v1464 + 1760) - *(unsigned __int8 *)(v1097 + v1142 + 1882));
          v1248 = (*v1096)++;
          char *v1248 = 32;
          if (*v1096 >= v1096[3]) {
            *v1096 = v1096[2];
          }
          uint64_t v1249 = v1461 + 8 * v1142;
          sprintf_sgR8(v1096, *(double *)(v1249 + 3168));
          sprintf_sgR8(v1096, *(double *)(v1249 + 4192));
          sprintf_3d(v1096, *(unsigned __int8 *)(v1460 + v1142 + 14208));
          sprintf_sgR8(v1096, sqrt(*(double *)(v1460 + 8 * v1142 + 13184)));
        }
        v1250 = (*v1096)++;
        char *v1250 = 10;
        if (*v1096 >= v1096[3]) {
          *v1096 = v1096[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1096);
      }
    }
    if (++v1141 != 128) {
      continue;
    }
    break;
  }
  uint64_t v1258 = 0;
  v1259 = (char **)v1458[35];
  uint64_t v1260 = v1458[5];
  uint64_t v1261 = v1458[10];
  v1262 = (unsigned __int8 *)v1458[8];
  uint64_t v1263 = v1458[16];
  uint64_t v1264 = v1458[21];
  v1265 = *v1259;
  char v1266 = 84;
  do
  {
    *v1259 = v1265 + 1;
    char *v1265 = v1266;
    v1265 = *v1259;
    if (*v1259 >= v1259[3])
    {
      v1265 = v1259[2];
      *v1259 = v1265;
    }
    char v1266 = aTheEnd[++v1258];
  }
  while (v1258 != 8);
  v1267 = &ch_Pos_Confid[5 * *(unsigned int *)(v1261 + 12) + 1];
  char v1268 = 32;
  do
  {
    *v1259 = v1265 + 1;
    char *v1265 = v1268;
    v1265 = *v1259;
    if (*v1259 >= v1259[3])
    {
      v1265 = v1259[2];
      *v1259 = v1265;
    }
    int v1269 = *v1267++;
    char v1268 = v1269;
  }
  while (v1269);
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1263 + 243));
  sprintf_sp1d(v1259, *(_DWORD *)(v1264 + 1876));
  sprintf_sp1d(v1259, *v1262);
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1263 + 242));
  uint64_t v1270 = 0;
  v1271 = *v1259;
  char v1272 = 32;
  do
  {
    *v1259 = v1271 + 1;
    char *v1271 = v1272;
    v1271 = *v1259;
    if (*v1259 >= v1259[3])
    {
      v1271 = v1259[2];
      *v1259 = v1271;
    }
    char v1272 = aVis[++v1270];
  }
  while (v1270 != 4);
  sprintf_3d(v1259, *(unsigned __int8 *)(v1260 + 8592));
  if (*(unsigned char *)(v1260 + 8592))
  {
    unint64_t v1273 = 0;
    do
    {
      v1513[0] = 0;
      uint64_t v1274 = v1260 + 2 * v1273;
      int v1275 = *(unsigned __int16 *)(v1274 + 6194);
      if ((__int16)v1275 < 1)
      {
        uint64_t v1280 = 0;
        v1281 = (__int16 *)(v1274 + 6194);
        v1282 = *v1259;
        char v1283 = 32;
        do
        {
          *v1259 = v1282 + 1;
          char *v1282 = v1283;
          v1282 = *v1259;
          if (*v1259 >= v1259[3])
          {
            v1282 = v1259[2];
            *v1259 = v1282;
          }
          char v1283 = aX[++v1280];
        }
        while (v1280 != 2);
        int v1276 = *v1281;
      }
      else
      {
        int v1276 = LongPrnIdx_To_Prn(v1275 - 1, (int *)v1513);
        v1277 = (*v1259)++;
        char *v1277 = 32;
        v1278 = *v1259;
        if (*v1259 >= v1259[3]) {
          v1278 = v1259[2];
        }
        char v1279 = ch_CONSTELL_ID[v1513[0]];
        *v1259 = v1278 + 1;
        char *v1278 = v1279;
        if (*v1259 >= v1259[3]) {
          *v1259 = v1259[2];
        }
      }
      if (v1276 >= 0) {
        unsigned int v1284 = v1276;
      }
      else {
        unsigned int v1284 = -v1276;
      }
      sprintf1da(v1259, v1284, v1514, 0, v1276 >> 31);
      ++v1273;
    }
    while (v1273 < *(unsigned __int8 *)(v1260 + 8592));
  }
  v1285 = *v1259;
  for (unsigned int i7 = 3; i7 > 1; --i7)
  {
    *v1259 = v1285 + 1;
    char *v1285 = 32;
    v1285 = *v1259;
    if (*v1259 >= v1259[3])
    {
      v1285 = v1259[2];
      *v1259 = v1285;
    }
  }
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1263 + 15408));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1263 + 15409));
  sprintf_sgR8(v1259, *(double *)(v1264 + 6792));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1264 + 6755));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1264 + 62033));
  sprintf_sgR8(v1259, *(double *)(v1264 + 21696));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1264 + 21659));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1264 + 62035));
  sprintf_sgR8(v1259, *(double *)(v1264 + 36600));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1264 + 36563));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1264 + 62036));
  sprintf_sp1d(v1259, *(unsigned __int16 *)(v1263 + 244));
  sprintf_sp1d(v1259, *(unsigned __int8 *)(v1264 + 62034));
  v1287 = (*v1259)++;
  char *v1287 = 10;
  if (*v1259 >= v1259[3]) {
    *v1259 = v1259[2];
  }
  uint64_t result = GNSS_Nav_Debug_Flush_Check((uint64_t)v1259);
  if (g_Logging_Cfg < 6) {
    return result;
  }
  v1289 = (char **)v1458[35];
  v1290 = (unsigned char *)v1458[5];
  double v1291 = *(double *)(v1458[10] + 48);
  double v1292 = -0.5;
  if (v1291 > 0.0) {
    double v1292 = 0.5;
  }
  double v1293 = v1291 + v1292;
  if (v1293 <= 2147483650.0)
  {
    if (v1293 >= -2147483650.0) {
      int v1294 = (int)v1293;
    }
    else {
      int v1294 = 0x80000000;
    }
  }
  else
  {
    int v1294 = 0x7FFFFFFF;
  }
  v1295 = v1290 + 8592;
  uint64_t v1296 = v1458[4];
  unsigned int v1467 = v1294 % 86400;
  if (g_Logging_Cfg >= 7)
  {
    v1297 = *v1289;
    char v1298 = 83;
    uint64_t v1299 = 1u;
    do
    {
      *v1289 = v1297 + 1;
      char *v1297 = v1298;
      v1297 = *v1289;
      if (*v1289 >= v1289[3])
      {
        v1297 = v1289[2];
        *v1289 = v1297;
      }
      char v1298 = aSvid[v1299++];
    }
    while (v1299 != 6);
    sprintf_8d(v1289, v1467);
    v1300 = (*v1289)++;
    char *v1300 = 32;
    if (*v1289 >= v1289[3]) {
      *v1289 = v1289[2];
    }
    int v1301 = 0;
    while (1)
    {
      if (v1301 <= 91)
      {
        switch(v1301)
        {
          case 0:
            v1302 = "  G ";
            goto LABEL_2220;
          case 32:
            v1302 = "  R ";
LABEL_2220:
            char v1303 = *v1302;
            if (*v1302)
            {
              v1304 = *v1289;
              v1305 = (unsigned __int8 *)(v1302 + 1);
              do
              {
                *v1289 = v1304 + 1;
                char *v1304 = v1303;
                v1304 = *v1289;
                if (*v1289 >= v1289[3])
                {
                  v1304 = v1289[2];
                  *v1289 = v1304;
                }
                int v1306 = *v1305++;
                char v1303 = v1306;
              }
              while (v1306);
            }
            break;
          case 56:
            v1302 = "  E ";
            goto LABEL_2220;
        }
      }
      else if (v1301 > 164)
      {
        if (v1301 == 165)
        {
          v1302 = "  N ";
          goto LABEL_2220;
        }
        if (v1301 == 179)
        {
          v1302 = "  S ";
          goto LABEL_2220;
        }
      }
      else
      {
        if (v1301 == 92)
        {
          v1302 = "  B ";
          goto LABEL_2220;
        }
        if (v1301 == 155)
        {
          v1302 = "  Q ";
          goto LABEL_2220;
        }
      }
      unsigned int v1307 = Num_Prn_Idx_To_GNSS_Id(v1301);
      sprintf_4d(v1289, v1307);
      if (++v1301 == 218)
      {
        v1308 = (*v1289)++;
        char *v1308 = 10;
        if (*v1289 >= v1289[3]) {
          *v1289 = v1289[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
        break;
      }
    }
  }
  v1309 = *v1289;
  char v1310 = 69;
  uint64_t v1311 = 1u;
  do
  {
    *v1289 = v1309 + 1;
    char *v1309 = v1310;
    v1309 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1309 = v1289[2];
      *v1289 = v1309;
    }
    char v1310 = aElev[v1311++];
  }
  while (v1311 != 6);
  sprintf_8d(v1289, v1467);
  v1312 = (*v1289)++;
  char *v1312 = 32;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  uint64_t v1313 = 0;
  while (2)
  {
    if (v1313 <= 91)
    {
      switch(v1313)
      {
        case 0:
          v1314 = "  G ";
          goto LABEL_2252;
        case 32:
          v1314 = "  R ";
          goto LABEL_2252;
        case 56:
          v1314 = "  E ";
          goto LABEL_2252;
      }
    }
    else if (v1313 > 164)
    {
      if (v1313 == 165)
      {
        v1314 = "  N ";
        goto LABEL_2252;
      }
      if (v1313 == 179)
      {
        v1314 = "  S ";
        goto LABEL_2252;
      }
    }
    else
    {
      if (v1313 == 92)
      {
        v1314 = "  B ";
        goto LABEL_2252;
      }
      if (v1313 == 155)
      {
        v1314 = "  Q ";
LABEL_2252:
        char v1315 = *v1314;
        if (*v1314)
        {
          v1316 = *v1289;
          v1317 = (unsigned __int8 *)(v1314 + 1);
          do
          {
            *v1289 = v1316 + 1;
            char *v1316 = v1315;
            v1316 = *v1289;
            if (*v1289 >= v1289[3])
            {
              v1316 = v1289[2];
              *v1289 = v1316;
            }
            int v1318 = *v1317++;
            char v1315 = v1318;
          }
          while (v1318);
        }
      }
    }
    sprintf_4d(v1289, *(char *)(v1296 + v1313++));
    if (v1313 != 218) {
      continue;
    }
    break;
  }
  v1319 = (*v1289)++;
  char *v1319 = 10;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
  v1320 = *v1289;
  char v1321 = 65;
  uint64_t v1322 = 1u;
  do
  {
    *v1289 = v1320 + 1;
    char *v1320 = v1321;
    v1320 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1320 = v1289[2];
      *v1289 = v1320;
    }
    char v1321 = aAzim[v1322++];
  }
  while (v1322 != 6);
  sprintf_8d(v1289, v1467);
  v1323 = (*v1289)++;
  char *v1323 = 32;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  uint64_t v1324 = 0;
  while (2)
  {
    if (v1324 <= 91)
    {
      switch(v1324)
      {
        case 0:
          v1325 = "  G ";
          goto LABEL_2283;
        case 32:
          v1325 = "  R ";
          goto LABEL_2283;
        case 56:
          v1325 = "  E ";
          goto LABEL_2283;
      }
    }
    else if (v1324 > 164)
    {
      if (v1324 == 165)
      {
        v1325 = "  N ";
        goto LABEL_2283;
      }
      if (v1324 == 179)
      {
        v1325 = "  S ";
        goto LABEL_2283;
      }
    }
    else
    {
      if (v1324 == 92)
      {
        v1325 = "  B ";
        goto LABEL_2283;
      }
      if (v1324 == 155)
      {
        v1325 = "  Q ";
LABEL_2283:
        char v1326 = *v1325;
        if (*v1325)
        {
          v1327 = *v1289;
          v1328 = (unsigned __int8 *)(v1325 + 1);
          do
          {
            *v1289 = v1327 + 1;
            char *v1327 = v1326;
            v1327 = *v1289;
            if (*v1289 >= v1289[3])
            {
              v1327 = v1289[2];
              *v1289 = v1327;
            }
            int v1329 = *v1328++;
            char v1326 = v1329;
          }
          while (v1329);
        }
      }
    }
    sprintf_4d(v1289, *(__int16 *)(v1296 + 2 * v1324++ + 218));
    if (v1324 != 218) {
      continue;
    }
    break;
  }
  v1330 = (*v1289)++;
  char *v1330 = 10;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
  v1331 = *v1289;
  char v1332 = 83;
  uint64_t v1333 = 1u;
  do
  {
    *v1289 = v1331 + 1;
    char *v1331 = v1332;
    v1331 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1331 = v1289[2];
      *v1289 = v1331;
    }
    char v1332 = aSidx[v1333++];
  }
  while (v1333 != 6);
  sprintf_8d(v1289, v1467);
  v1334 = (*v1289)++;
  char *v1334 = 32;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  uint64_t v1335 = 0;
  while (2)
  {
    if (v1335 <= 91)
    {
      switch(v1335)
      {
        case 0:
          v1336 = "  G ";
          goto LABEL_2314;
        case 32:
          v1336 = "  R ";
          goto LABEL_2314;
        case 56:
          v1336 = "  E ";
          goto LABEL_2314;
      }
    }
    else if (v1335 > 164)
    {
      if (v1335 == 165)
      {
        v1336 = "  N ";
        goto LABEL_2314;
      }
      if (v1335 == 179)
      {
        v1336 = "  S ";
        goto LABEL_2314;
      }
    }
    else
    {
      if (v1335 == 92)
      {
        v1336 = "  B ";
        goto LABEL_2314;
      }
      if (v1335 == 155)
      {
        v1336 = "  Q ";
LABEL_2314:
        char v1337 = *v1336;
        if (*v1336)
        {
          v1338 = *v1289;
          v1339 = (unsigned __int8 *)(v1336 + 1);
          do
          {
            *v1289 = v1338 + 1;
            char *v1338 = v1337;
            v1338 = *v1289;
            if (*v1289 >= v1289[3])
            {
              v1338 = v1289[2];
              *v1289 = v1338;
            }
            int v1340 = *v1339++;
            char v1337 = v1340;
          }
          while (v1340);
        }
      }
    }
    sprintf_4d(v1289, (char)v1290[v1335++ + 5976]);
    if (v1335 != 218) {
      continue;
    }
    break;
  }
  v1341 = (*v1289)++;
  char *v1341 = 10;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
  if (g_Logging_Cfg > 6)
  {
    uint64_t v1342 = v1458[7];
    uint64_t v1343 = v1458[9];
    char v1344 = 72;
    uint64_t v1345 = 1u;
    v1346 = *v1289;
    do
    {
      *v1289 = v1346 + 1;
      char *v1346 = v1344;
      v1346 = *v1289;
      if (*v1289 >= v1289[3])
      {
        v1346 = v1289[2];
        *v1289 = v1346;
      }
      char v1344 = aHL1[v1345++];
    }
    while (v1345 != 6);
    sprintf_8d(v1289, v1467);
    v1347 = (*v1289)++;
    char *v1347 = 32;
    if (*v1289 >= v1289[3]) {
      *v1289 = v1289[2];
    }
    uint64_t v1348 = 0;
    while (2)
    {
      if (v1348 <= 91)
      {
        switch(v1348)
        {
          case 0:
            v1349 = "  G ";
            goto LABEL_2346;
          case 32:
            v1349 = "  R ";
            goto LABEL_2346;
          case 56:
            v1349 = "  E ";
            goto LABEL_2346;
        }
      }
      else if (v1348 > 164)
      {
        if (v1348 == 165)
        {
          v1349 = "  N ";
          goto LABEL_2346;
        }
        if (v1348 == 179)
        {
          v1349 = "  S ";
          goto LABEL_2346;
        }
      }
      else
      {
        if (v1348 == 92)
        {
          v1349 = "  B ";
          goto LABEL_2346;
        }
        if (v1348 == 155)
        {
          v1349 = "  Q ";
LABEL_2346:
          char v1350 = *v1349;
          if (*v1349)
          {
            v1351 = *v1289;
            v1352 = (unsigned __int8 *)(v1349 + 1);
            do
            {
              *v1289 = v1351 + 1;
              char *v1351 = v1350;
              v1351 = *v1289;
              if (*v1289 >= v1289[3])
              {
                v1351 = v1289[2];
                *v1289 = v1351;
              }
              int v1353 = *v1352++;
              char v1350 = v1353;
            }
            while (v1353);
          }
        }
      }
      sprintf_4d(v1289, *(unsigned __int8 *)(v1342 + v1348++ + 50616));
      if (v1348 != 218) {
        continue;
      }
      break;
    }
    v1354 = (*v1289)++;
    char *v1354 = 10;
    if (*v1289 >= v1289[3]) {
      *v1289 = v1289[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
    v1355 = *v1289;
    char v1356 = 72;
    uint64_t v1357 = 1u;
    do
    {
      *v1289 = v1355 + 1;
      char *v1355 = v1356;
      v1355 = *v1289;
      if (*v1289 >= v1289[3])
      {
        v1355 = v1289[2];
        *v1289 = v1355;
      }
      char v1356 = aHL5[v1357++];
    }
    while (v1357 != 6);
    sprintf_8d(v1289, v1467);
    v1358 = (*v1289)++;
    char *v1358 = 32;
    if (*v1289 >= v1289[3]) {
      *v1289 = v1289[2];
    }
    uint64_t v1359 = 0;
    while (2)
    {
      if (v1359 <= 91)
      {
        switch(v1359)
        {
          case 0:
            v1360 = "  G ";
            goto LABEL_2377;
          case 32:
            v1360 = "  R ";
            goto LABEL_2377;
          case 56:
            v1360 = "  E ";
            goto LABEL_2377;
        }
      }
      else if (v1359 > 164)
      {
        if (v1359 == 165)
        {
          v1360 = "  N ";
          goto LABEL_2377;
        }
        if (v1359 == 179)
        {
          v1360 = "  S ";
          goto LABEL_2377;
        }
      }
      else
      {
        if (v1359 == 92)
        {
          v1360 = "  B ";
          goto LABEL_2377;
        }
        if (v1359 == 155)
        {
          v1360 = "  Q ";
LABEL_2377:
          char v1361 = *v1360;
          if (*v1360)
          {
            v1362 = *v1289;
            v1363 = (unsigned __int8 *)(v1360 + 1);
            do
            {
              *v1289 = v1362 + 1;
              char *v1362 = v1361;
              v1362 = *v1289;
              if (*v1289 >= v1289[3])
              {
                v1362 = v1289[2];
                *v1289 = v1362;
              }
              int v1364 = *v1363++;
              char v1361 = v1364;
            }
            while (v1364);
          }
        }
      }
      sprintf_4d(v1289, *(unsigned __int8 *)(v1342 + v1359++ + 50834));
      if (v1359 == 218)
      {
        v1365 = (*v1289)++;
        char *v1365 = 10;
        if (*v1289 >= v1289[3]) {
          *v1289 = v1289[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
        v1366 = *v1289;
        char v1367 = 73;
        uint64_t v1368 = 1u;
        do
        {
          *v1289 = v1366 + 1;
          char *v1366 = v1367;
          v1366 = *v1289;
          if (*v1289 >= v1289[3])
          {
            v1366 = v1289[2];
            *v1289 = v1366;
          }
          char v1367 = aIL1[v1368++];
        }
        while (v1368 != 6);
        sprintf_8d(v1289, v1467);
        v1369 = (*v1289)++;
        char *v1369 = 32;
        if (*v1289 >= v1289[3]) {
          *v1289 = v1289[2];
        }
        uint64_t v1370 = 0;
        while (2)
        {
          if (v1370 <= 91)
          {
            switch(v1370)
            {
              case 0:
                v1371 = "  G ";
                goto LABEL_2408;
              case 32:
                v1371 = "  R ";
                goto LABEL_2408;
              case 56:
                v1371 = "  E ";
                goto LABEL_2408;
            }
          }
          else if (v1370 > 164)
          {
            if (v1370 == 165)
            {
              v1371 = "  N ";
              goto LABEL_2408;
            }
            if (v1370 == 179)
            {
              v1371 = "  S ";
              goto LABEL_2408;
            }
          }
          else
          {
            if (v1370 == 92)
            {
              v1371 = "  B ";
              goto LABEL_2408;
            }
            if (v1370 == 155)
            {
              v1371 = "  Q ";
LABEL_2408:
              char v1372 = *v1371;
              if (*v1371)
              {
                v1373 = *v1289;
                v1374 = (unsigned __int8 *)(v1371 + 1);
                do
                {
                  *v1289 = v1373 + 1;
                  char *v1373 = v1372;
                  v1373 = *v1289;
                  if (*v1289 >= v1289[3])
                  {
                    v1373 = v1289[2];
                    *v1289 = v1373;
                  }
                  int v1375 = *v1374++;
                  char v1372 = v1375;
                }
                while (v1375);
              }
            }
          }
          sprintf_4d(v1289, *(unsigned __int8 *)(v1343 + v1370++ + 257));
          if (v1370 != 218) {
            continue;
          }
          break;
        }
        v1376 = (*v1289)++;
        char *v1376 = 10;
        if (*v1289 >= v1289[3]) {
          *v1289 = v1289[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
        v1377 = *v1289;
        char v1378 = 73;
        uint64_t v1379 = 1u;
        do
        {
          *v1289 = v1377 + 1;
          char *v1377 = v1378;
          v1377 = *v1289;
          if (*v1289 >= v1289[3])
          {
            v1377 = v1289[2];
            *v1289 = v1377;
          }
          char v1378 = aIL5[v1379++];
        }
        while (v1379 != 6);
        sprintf_8d(v1289, v1467);
        v1380 = (*v1289)++;
        char *v1380 = 32;
        if (*v1289 >= v1289[3]) {
          *v1289 = v1289[2];
        }
        uint64_t v1381 = 0;
        while (2)
        {
          if (v1381 <= 91)
          {
            switch(v1381)
            {
              case 0:
                v1382 = "  G ";
                goto LABEL_2439;
              case 32:
                v1382 = "  R ";
                goto LABEL_2439;
              case 56:
                v1382 = "  E ";
                goto LABEL_2439;
            }
          }
          else if (v1381 > 164)
          {
            if (v1381 == 165)
            {
              v1382 = "  N ";
              goto LABEL_2439;
            }
            if (v1381 == 179)
            {
              v1382 = "  S ";
              goto LABEL_2439;
            }
          }
          else
          {
            if (v1381 == 92)
            {
              v1382 = "  B ";
              goto LABEL_2439;
            }
            if (v1381 == 155)
            {
              v1382 = "  Q ";
LABEL_2439:
              char v1383 = *v1382;
              if (*v1382)
              {
                v1384 = *v1289;
                v1385 = (unsigned __int8 *)(v1382 + 1);
                do
                {
                  *v1289 = v1384 + 1;
                  char *v1384 = v1383;
                  v1384 = *v1289;
                  if (*v1289 >= v1289[3])
                  {
                    v1384 = v1289[2];
                    *v1289 = v1384;
                  }
                  int v1386 = *v1385++;
                  char v1383 = v1386;
                }
                while (v1386);
              }
            }
          }
          sprintf_4d(v1289, *(unsigned __int8 *)(v1343 + v1381++ + 536));
          if (v1381 == 218)
          {
            v1387 = (*v1289)++;
            char *v1387 = 10;
            if (*v1289 >= v1289[3]) {
              *v1289 = v1289[2];
            }
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
            goto LABEL_2448;
          }
          continue;
        }
      }
      continue;
    }
  }
LABEL_2448:
  v1388 = *v1289;
  char v1389 = 75;
  uint64_t v1390 = 1u;
  do
  {
    *v1289 = v1388 + 1;
    char *v1388 = v1389;
    v1388 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1388 = v1289[2];
      *v1289 = v1388;
    }
    char v1389 = aKvis[v1390++];
  }
  while (v1390 != 6);
  sprintf_8d(v1289, v1467);
  v1391 = *v1289;
  char v1392 = 32;
  uint64_t v1393 = 1u;
  do
  {
    *v1289 = v1391 + 1;
    char *v1391 = v1392;
    v1391 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1391 = v1289[2];
      *v1289 = v1391;
    }
    char v1392 = asc_263D5BFDF[v1393++];
  }
  while (v1393 != 6);
  uint64_t v1394 = 0;
  uint64_t v1395 = *v1295;
  if (v1395 >= 0xD2) {
    uint64_t v1396 = 218;
  }
  else {
    uint64_t v1396 = v1395 + 8;
  }
  do
  {
    if (v1394 == *v1295)
    {
      uint64_t v1397 = 0;
      v1398 = *v1289;
      char v1399 = 32;
      do
      {
        *v1289 = v1398 + 1;
        char *v1398 = v1399;
        v1398 = *v1289;
        if (*v1289 >= v1289[3])
        {
          v1398 = v1289[2];
          *v1289 = v1398;
        }
        char v1399 = asc_263D5BFE5[++v1397];
      }
      while (v1397 != 4);
    }
    sprintf_4d(v1289, *(__int16 *)&v1290[2 * v1394++ + 6194]);
  }
  while (v1394 != v1396);
  v1400 = (*v1289)++;
  char *v1400 = 10;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
  v1401 = *v1289;
  char v1402 = 77;
  uint64_t v1403 = 1u;
  do
  {
    *v1289 = v1401 + 1;
    char *v1401 = v1402;
    v1401 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1401 = v1289[2];
      *v1289 = v1401;
    }
    char v1402 = aMvis[v1403++];
  }
  while (v1403 != 6);
  sprintf_8d(v1289, v1467);
  v1404 = *v1289;
  char v1405 = 32;
  uint64_t v1406 = 1u;
  do
  {
    *v1289 = v1404 + 1;
    char *v1404 = v1405;
    v1404 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1404 = v1289[2];
      *v1289 = v1404;
    }
    char v1405 = asc_263D5BFDF[v1406++];
  }
  while (v1406 != 6);
  uint64_t v1407 = 0;
  uint64_t v1408 = v1290[8593];
  if (v1408 >= 0xD2) {
    uint64_t v1409 = 218;
  }
  else {
    uint64_t v1409 = v1408 + 8;
  }
  do
  {
    if (v1407 == v1290[8593])
    {
      uint64_t v1410 = 0;
      v1411 = *v1289;
      char v1412 = 32;
      do
      {
        *v1289 = v1411 + 1;
        char *v1411 = v1412;
        v1411 = *v1289;
        if (*v1289 >= v1289[3])
        {
          v1411 = v1289[2];
          *v1289 = v1411;
        }
        char v1412 = asc_263D5BFE5[++v1410];
      }
      while (v1410 != 4);
    }
    sprintf_4d(v1289, *(__int16 *)&v1290[2 * v1407++ + 6630]);
  }
  while (v1407 != v1409);
  v1413 = (*v1289)++;
  char *v1413 = 10;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
  v1414 = *v1289;
  char v1415 = 65;
  uint64_t v1416 = 1u;
  do
  {
    *v1289 = v1414 + 1;
    char *v1414 = v1415;
    v1414 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1414 = v1289[2];
      *v1289 = v1414;
    }
    char v1415 = aAaok[v1416++];
  }
  while (v1416 != 6);
  sprintf_8d(v1289, v1467);
  v1417 = *v1289;
  char v1418 = 32;
  uint64_t v1419 = 1u;
  do
  {
    *v1289 = v1417 + 1;
    char *v1417 = v1418;
    v1417 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1417 = v1289[2];
      *v1289 = v1417;
    }
    char v1418 = asc_263D5BFDF[v1419++];
  }
  while (v1419 != 6);
  uint64_t v1420 = 0;
  uint64_t v1421 = v1290[8596];
  if (v1421 >= 0x73) {
    uint64_t v1422 = 123;
  }
  else {
    uint64_t v1422 = v1421 + 8;
  }
  do
  {
    if (v1420 == v1290[8596])
    {
      uint64_t v1423 = 0;
      v1424 = *v1289;
      char v1425 = 32;
      do
      {
        *v1289 = v1424 + 1;
        char *v1424 = v1425;
        v1424 = *v1289;
        if (*v1289 >= v1289[3])
        {
          v1424 = v1289[2];
          *v1289 = v1424;
        }
        char v1425 = asc_263D5BFE5[++v1423];
      }
      while (v1423 != 4);
    }
    sprintf_4d(v1289, v1290[48 * v1420++ + 76]);
  }
  while (v1420 != v1422);
  v1426 = (*v1289)++;
  char *v1426 = 10;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
  v1427 = *v1289;
  char v1428 = 86;
  uint64_t v1429 = 1u;
  do
  {
    *v1289 = v1427 + 1;
    char *v1427 = v1428;
    v1427 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1427 = v1289[2];
      *v1289 = v1427;
    }
    char v1428 = aViz[v1429++];
  }
  while (v1429 != 6);
  sprintf_8d(v1289, v1467);
  sprintf_5d(v1289, *v1295);
  sprintf_4d(v1289, v1290[8593]);
  sprintf_4d(v1289, v1290[8594]);
  sprintf_4d(v1289, v1290[8595]);
  sprintf_4d(v1289, v1290[8596]);
  if (*v1295)
  {
    unint64_t v1430 = 0;
    do
    {
      v1513[0] = 0;
      v1431 = &v1290[2 * v1430];
      int v1432 = *((unsigned __int16 *)v1431 + 3097);
      if ((__int16)v1432 < 1)
      {
        uint64_t v1437 = 0;
        v1438 = (__int16 *)(v1431 + 6194);
        v1439 = *v1289;
        char v1440 = 32;
        do
        {
          *v1289 = v1439 + 1;
          char *v1439 = v1440;
          v1439 = *v1289;
          if (*v1289 >= v1289[3])
          {
            v1439 = v1289[2];
            *v1289 = v1439;
          }
          char v1440 = aX[++v1437];
        }
        while (v1437 != 2);
        int v1433 = *v1438;
      }
      else
      {
        int v1433 = LongPrnIdx_To_Prn(v1432 - 1, (int *)v1513);
        v1434 = (*v1289)++;
        char *v1434 = 32;
        v1435 = *v1289;
        if (*v1289 >= v1289[3]) {
          v1435 = v1289[2];
        }
        char v1436 = ch_CONSTELL_ID[v1513[0]];
        *v1289 = v1435 + 1;
        char *v1435 = v1436;
        if (*v1289 >= v1289[3]) {
          *v1289 = v1289[2];
        }
      }
      if (v1433 >= 0) {
        unsigned int v1441 = v1433;
      }
      else {
        unsigned int v1441 = -v1433;
      }
      sprintf1da(v1289, v1441, v1514, 0, v1433 >> 31);
      ++v1430;
    }
    while (v1430 < *v1295);
  }
  uint64_t v1442 = 0;
  v1443 = *v1289;
  char v1444 = 32;
  do
  {
    *v1289 = v1443 + 1;
    char *v1443 = v1444;
    v1443 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1443 = v1289[2];
      *v1289 = v1443;
    }
    char v1444 = aGfvz[++v1442];
  }
  while (v1442 != 8);
  sprintf_4d(v1289, (char)v1290[8671]);
  sprintf_3d(v1289, (char)v1290[8670]);
  uint64_t v1445 = 0;
  v1446 = *v1289;
  char v1447 = 32;
  do
  {
    *v1289 = v1446 + 1;
    char *v1446 = v1447;
    v1446 = *v1289;
    if (*v1289 >= v1289[3])
    {
      v1446 = v1289[2];
      *v1289 = v1446;
    }
    char v1447 = asc_263D5BBA1[++v1445];
  }
  while (v1445 != 2);
  for (uint64_t i8 = 0; i8 != 14; ++i8)
    sprintf_3d(v1289, (char)v1290[i8 + 8656]);
  v1449 = (*v1289)++;
  char *v1449 = 10;
  if (*v1289 >= v1289[3]) {
    *v1289 = v1289[2];
  }
  return GNSS_Nav_Debug_Flush_Check((uint64_t)v1289);
}

void *print_line_LS(void *result, int a2)
{
  uint64_t v2 = result[35];
  uint64_t v3 = result[10];
  uint64_t v4 = result[16];
  uint64_t v5 = (double *)result[25];
  switch(a2)
  {
    case 1:
      uint64_t v6 = result[21];
      unsigned int v7 = *(char *)(v6 + 63760);
      unsigned int v8 = *(char *)(v6 + 63761);
      double v9 = 0.0;
      if (*(char *)(v6 + 63759) < 0)
      {
        double v10 = 9999000.0;
      }
      else
      {
        double v10 = 9999000.0;
        if (*(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 63759) + 63464) <= 9999000.0)
        {
          double v9 = *(double *)(v6 + 63280);
          double v10 = *(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 63759) + 63464);
        }
      }
      char v11 = (double *)(v6 + 63232);
      if ((v7 & 0x80000000) == 0 && v10 >= *(double *)(v6 + 8 * v7 + 63464))
      {
        double v9 = *(double *)(v6 + 63296);
        double v10 = *(double *)(v6 + 8 * v7 + 63464);
      }
      if ((v8 & 0x80000000) != 0 || v10 < *(double *)(v6 + 8 * v8 + 63464))
      {
        int v13 = "LS_All ";
        goto LABEL_23;
      }
      __int16 v12 = (double *)(v6 + 63312);
      int v13 = "LS_All ";
      break;
    case 2:
      if (g_Logging_Cfg < 5) {
        return result;
      }
      char v11 = v5 + 128;
      __int16 v12 = v5 + 134;
      int v13 = "LS_GPS ";
      break;
    case 3:
      if (g_Logging_Cfg < 5) {
        return result;
      }
      char v11 = v5 + 195;
      __int16 v12 = v5 + 203;
      int v13 = "LS_Glo ";
      break;
    case 4:
      if (g_Logging_Cfg < 5) {
        return result;
      }
      char v11 = v5 + 262;
      __int16 v12 = v5 + 268;
      int v13 = "LS_GAL ";
      break;
    default:
      if (g_Logging_Cfg < 5) {
        return result;
      }
      char v11 = v5 + 329;
      __int16 v12 = v5 + 339;
      int v13 = "LS_BDS ";
      break;
  }
  double v9 = *v12;
LABEL_23:
  char v14 = *v13;
  if (*v13)
  {
    int v15 = *(char **)v2;
    char v16 = (unsigned __int8 *)(v13 + 1);
    do
    {
      *(void *)uint64_t v2 = v15 + 1;
      *int v15 = v14;
      int v15 = *(char **)v2;
      if (*(void *)v2 >= *(void *)(v2 + 24))
      {
        int v15 = *(char **)(v2 + 16);
        *(void *)uint64_t v2 = v15;
      }
      int v17 = *v16++;
      char v14 = v17;
    }
    while (v17);
  }
  uint64_t v18 = 0;
  uint64_t v19 = v4 + 68288;
  uint64_t v20 = v3 + 224;
  do
  {
    if ((char)v11[51] < 0)
    {
      double v21 = 0.0;
      if (!v18) {
        goto LABEL_37;
      }
    }
    else
    {
      double v21 = v11[v18 + 16] - *(double *)(v20 + 8 * v18);
      if (!v18) {
        goto LABEL_37;
      }
    }
    if (v18 != 1) {
      goto LABEL_38;
    }
    double v22 = -6.28318531;
    if (v21 >= 3.14159265 || (double v22 = 6.28318531, v21 < -3.14159265)) {
      double v21 = v21 + v22;
    }
LABEL_37:
    double v21 = v21 * *(double *)(v19 + 8 * v18);
LABEL_38:
    int v23 = (unsigned char *)(*(void *)v2)++;
    *int v23 = 32;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_12f3((char **)v2, v21);
    ++v18;
  }
  while (v18 != 3);
  char v24 = (unsigned char *)(*(void *)v2)++;
  *char v24 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_sgR8((void *)v2, v11[24]);
  sprintf_sgR8((void *)v2, -v11[23]);
  sprintf_6d((void *)v2, (int)v11[25]);
  int v25 = *(char **)v2;
  char v26 = 32;
  uint64_t v27 = 1u;
  do
  {
    *(void *)uint64_t v2 = v25 + 1;
    *int v25 = v26;
    int v25 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      int v25 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v25;
    }
    char v26 = aClk[v27++];
  }
  while (v27 != 6);
  sprintf_8d((void *)v2, (int)v9);
  sprintf_sgR8((void *)v2, v11[20]);
  sprintf_sgR8((void *)v2, v11[12]);
  unsigned __int8 v28 = (unsigned char *)(*(void *)v2)++;
  *unsigned __int8 v28 = 32;
  uint64_t v29 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    uint64_t v29 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v29 + 1;
  *uint64_t v29 = 80;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_2d((void *)v2, *((unsigned __int8 *)v11 + 392));
  sprintf_3d((void *)v2, *((char *)v11 + 408));
  double v30 = v11[50];
  double v31 = v30 * 10.0;
  BOOL v32 = v30 < 9.89999962;
  double v33 = 98.9999962;
  if (v32) {
    double v33 = v31;
  }
  double v34 = -0.5;
  if (v33 > 0.0) {
    double v34 = 0.5;
  }
  double v35 = v33 + v34;
  if (v35 <= 2147483650.0)
  {
    if (v35 >= -2147483650.0) {
      unsigned int v36 = (int)v35;
    }
    else {
      unsigned int v36 = 0x80000000;
    }
  }
  else
  {
    unsigned int v36 = 0x7FFFFFFF;
  }
  sprintf_3f(v2, v36, 2);
  uint64_t v37 = 0;
  v38 = *(char **)v2;
  char v39 = 32;
  do
  {
    *(void *)uint64_t v2 = v38 + 1;
    char *v38 = v39;
    v38 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      v38 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v38;
    }
    char v39 = aEl[++v37];
  }
  while (v37 != 4);
  sprintf_ACC((char **)v2, v11[26]);
  double v40 = (unsigned char *)(*(void *)v2)++;
  *double v40 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_ACC((char **)v2, v11[27]);
  v41 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v41 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_ACC((char **)v2, v11[28]);
  uint64_t v42 = 0;
  v43 = *(char **)v2;
  char v44 = 32;
  do
  {
    *(void *)uint64_t v2 = v43 + 1;
    char *v43 = v44;
    v43 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      v43 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v43;
    }
    char v44 = aVf[++v42];
  }
  while (v42 != 4);
  sprintf_sgR8((void *)v2, v11[2]);
  v45 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v45 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_sgR8((void *)v2, v11[4]);
  v46 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v46 = 32;
  v47 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    v47 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v47 + 1;
  char *v47 = 72;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[45], 99999.0));
  char v48 = (unsigned char *)(*(void *)v2)++;
  *char v48 = 32;
  int v49 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    int v49 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v49 + 1;
  *int v49 = 86;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[46], 99999.0));
  v50 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v50 = 32;
  v51 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    v51 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v51 + 1;
  char *v51 = 66;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[47], 99999.0));
  unsigned int v52 = (unsigned char *)(*(void *)v2)++;
  *unsigned int v52 = 32;
  unsigned int v53 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    unsigned int v53 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v53 + 1;
  *unsigned int v53 = 83;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[48], 99999.0));
  v54 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v54 = 32;
  double v55 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    double v55 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v55 + 1;
  *double v55 = 72;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 320));
  v56 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v56 = 32;
  v57 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    v57 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v57 + 1;
  char *v57 = 86;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 321));
  double v58 = (unsigned char *)(*(void *)v2)++;
  *double v58 = 32;
  double v59 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    double v59 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v59 + 1;
  *double v59 = 66;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 322));
  double v60 = (unsigned char *)(*(void *)v2)++;
  *double v60 = 32;
  int v61 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    int v61 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v61 + 1;
  *int v61 = 83;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 323));
  v62 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v62 = 32;
  char v63 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    char v63 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v63 + 1;
  *char v63 = 86;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_2d((void *)v2, *((unsigned __int8 *)v11 + 488));
  sprintf_3d((void *)v2, *((char *)v11 + 504));
  double v64 = v11[62];
  double v65 = v64 * 100.0;
  BOOL v32 = v64 < 9.98999977;
  double v66 = 998.999977;
  if (v32) {
    double v66 = v65;
  }
  double v67 = -0.5;
  if (v66 > 0.0) {
    double v67 = 0.5;
  }
  double v68 = v66 + v67;
  if (v68 <= 2147483650.0)
  {
    if (v68 >= -2147483650.0) {
      unsigned int v69 = (int)v68;
    }
    else {
      unsigned int v69 = 0x80000000;
    }
  }
  else
  {
    unsigned int v69 = 0x7FFFFFFF;
  }
  sprintf_4f(v2, v69, 3);
  if (g_Logging_Cfg >= 6)
  {
    int v70 = (unsigned char *)(*(void *)v2)++;
    *int v70 = 32;
    int v71 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      int v71 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v71 + 1;
    *int v71 = 72;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[57], 99.0));
    unsigned int v72 = (unsigned char *)(*(void *)v2)++;
    *unsigned int v72 = 32;
    unsigned int v73 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      unsigned int v73 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v73 + 1;
    *unsigned int v73 = 86;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[58], 99.0));
    int v74 = (unsigned char *)(*(void *)v2)++;
    *int v74 = 32;
    unsigned int v75 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      unsigned int v75 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v75 + 1;
    *unsigned int v75 = 66;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[59], 99.0));
    v76 = (unsigned char *)(*(void *)v2)++;
    unsigned char *v76 = 32;
    unint64_t v77 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      unint64_t v77 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v77 + 1;
    *unint64_t v77 = 83;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[60], 99.0));
    double v78 = (unsigned char *)(*(void *)v2)++;
    *double v78 = 32;
    v79 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      v79 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v79 + 1;
    char *v79 = 72;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_4d((void *)v2, *((char *)v11 + 416));
    uint64_t v80 = (unsigned char *)(*(void *)v2)++;
    *uint64_t v80 = 32;
    v81 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      v81 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v81 + 1;
    char *v81 = 86;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_4d((void *)v2, *((char *)v11 + 417));
    char v82 = (unsigned char *)(*(void *)v2)++;
    *char v82 = 32;
    double v83 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      double v83 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v83 + 1;
    *double v83 = 66;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_4d((void *)v2, *((char *)v11 + 418));
    double v84 = (unsigned char *)(*(void *)v2)++;
    *double v84 = 32;
    unsigned int v85 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      unsigned int v85 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v85 + 1;
    *unsigned int v85 = 83;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_4d((void *)v2, *((char *)v11 + 419));
  }
  char v86 = (unsigned char *)(*(void *)v2)++;
  *char v86 = 10;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }

  return (void *)GNSS_Nav_Debug_Flush_Check(v2);
}

uint64_t sprintf_LaLo(char **a1, uint64_t a2)
{
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    double v6 = *(double *)(a2 + 8 * v4) * 57.2957795;
    double v7 = -v6;
    if (v6 >= 0.0) {
      double v7 = *(double *)(a2 + 8 * v4) * 57.2957795;
    }
    unsigned int v8 = (int)v7;
    char v9 = v5;
    double v10 = (v7 - (double)(int)v7) * 60.0;
    unsigned int v11 = (int)v10;
    double v12 = (v10 - (double)(int)v10) * 60.0;
    sprintf_4d(a1, v8);
    sprintf_3d(a1, v11);
    if (v12 * 100000.0 <= 0.0) {
      double v13 = -0.5;
    }
    else {
      double v13 = 0.5;
    }
    double v14 = v12 * 100000.0 + v13;
    if (v14 <= 2147483650.0)
    {
      if (v14 >= -2147483650.0) {
        unsigned int v15 = (int)v14;
      }
      else {
        unsigned int v15 = 0x80000000;
      }
    }
    else
    {
      unsigned int v15 = 0x7FFFFFFF;
    }
    uint64_t result = sprintf_8f((uint64_t)a1, v15, 6);
    int v17 = &ch_NSEW[8 * v4];
    if (*(double *)(a2 + 8 * v4) < 0.0) {
      v17 += 4;
    }
    char v18 = *v17;
    if (*v17)
    {
      uint64_t v19 = *a1;
      uint64_t v20 = (unsigned __int8 *)(v17 + 1);
      do
      {
        *a1 = v19 + 1;
        *uint64_t v19 = v18;
        uint64_t v19 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v19 = a1[2];
          *a1 = v19;
        }
        int v21 = *v20++;
        char v18 = v21;
      }
      while (v21);
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint64_t Get_Char_Ass_Status_Edit(unsigned int a1)
{
  if (a1 >= 0x29)
  {
    gn_report_assertion_failure("Ass_Status_Edit_Char");
    return 120;
  }
  else
  {
    return aCghkmnpqrstvya[a1 + 30];
  }
}

uint64_t Meas_Used_BitField(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + a2 + 312)) {
    return 0;
  }
  uint64_t v2 = (unsigned char *)(a1 + a2);
  if (v2[9400]) {
    unsigned int v3 = 3;
  }
  else {
    unsigned int v3 = 1;
  }
  if (v2[10552]) {
    v3 |= 4u;
  }
  if (v2[12728]) {
    return v3 | 8;
  }
  else {
    return v3;
  }
}

uint64_t GN_AGLON_Set_Alm_El(unsigned __int16 *a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGLON_Set_Alm_El");
  if (result)
  {
    if (g_Logging_Cfg < 5) {
      EvLog_d("GN_AGLON_Set_Alm_El: ", *((unsigned __int8 *)a1 + 2));
    }
    else {
      EvLog_v("GN_AGLON_Set_Alm_El: %4d %2d %2d %8d %7d %7d %8d %3d %5d %4d %d %d %d %d", *a1, *((unsigned __int8 *)a1 + 2), *((unsigned __int8 *)a1 + 3), *((_DWORD *)a1 + 1), *((_DWORD *)a1 + 2), *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((char *)a1 + 20), a1[11], (__int16)a1[12], (__int16)a1[13], *((unsigned __int8 *)a1 + 28), *((unsigned __int8 *)a1 + 29), *((unsigned __int8 *)a1 + 30));
    }
    int v3 = *((unsigned __int8 *)a1 + 2);
    if ((v3 - 25) <= 0xFFFFFFE7)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: Sat_ID = %d <%d or >%d, Out of range!");
      return 0;
    }
    int v4 = *a1;
    if ((v4 - 1462) <= 0xFFFFFA4A)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmNA = %d <1 or >%d, Out of range!");
      return 0;
    }
    unsigned int v5 = *((unsigned __int8 *)a1 + 3);
    if (v5 >= 0x20)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmHA = %d >31, Out of range!");
      return 0;
    }
    int v6 = *((_DWORD *)a1 + 1);
    if ((v6 - 0x100000) >> 21 != 2047)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmLambdaA = %d <-2^20 or >=2^20, Out of range!");
      return 0;
    }
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (v7 >= 0x200000)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmtlambdaA = %d >=2^21, Out of range!");
      return 0;
    }
    int v8 = *((_DWORD *)a1 + 3);
    if ((v8 - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaIa = %d <-2^17 or >=2^17, Out of range!");
      return 0;
    }
    int v9 = *((_DWORD *)a1 + 4);
    if ((v9 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTA = %d <-2^21 or >=2^21, Out of range!");
      return 0;
    }
    int v10 = *((char *)a1 + 20);
    if (((v10 - 64) & 0x80) == 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTdotA = %d <-2^6 or >=2^6, Out of range!");
      return 0;
    }
    int v11 = (__int16)a1[11];
    if (v11 < 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmEpsilonA = %d >=2^15, Out of range!");
      return 0;
    }
    unsigned __int16 v12 = a1[13];
    if ((unsigned __int16)((unsigned __int16)(v12 - 512) >> 10) <= 0x3Eu)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmTauA = %d <-2^9 or >=2^9, Out of range!");
      return 0;
    }
    unsigned int v13 = *((unsigned __int8 *)a1 + 28);
    if (v13 >= 2)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmCA = %d >1, Out of range!");
      return 0;
    }
    unsigned int v14 = *((unsigned __int8 *)a1 + 29);
    if (v14 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmMA = %d >3, Out of range!");
      return 0;
    }
    if (*((unsigned char *)a1 + 30)) {
      int v15 = 5;
    }
    else {
      int v15 = 3;
    }
    v16[0] = 0;
    v16[1] = v15;
    __int16 v17 = v4;
    char v18 = v3;
    char v19 = v5;
    int v20 = v6;
    unsigned int v21 = v7;
    int v22 = v8;
    int v23 = v9;
    char v24 = v10;
    __int16 v25 = v11;
    unsigned __int16 v26 = a1[12];
    unsigned __int16 v27 = v12;
    char v30 = 1;
    BOOL v28 = v13 != 0;
    char v29 = v14;
    uint64_t v35 = 0;
    __int16 v36 = 0;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    GLON_AlmInt2Bin((uint64_t)v16, (uint64_t)&v35);
    uint64_t v31 = 0;
    long long v32 = v37;
    uint64_t v33 = v38;
    BOOL v34 = HIDWORD(v35) == 5;
    WORD2(v31) = v36;
    return GN_AGLON_Set_Alm(*((unsigned __int8 *)a1 + 2), (uint64_t)&v31);
  }
  return result;
}

void Init_DB_SV_AzEl(uint64_t a1)
{
  *(void *)&long long v2 = 0x9D9D9D9D9D9D9D9DLL;
  *((void *)&v2 + 1) = 0x9D9D9D9D9D9D9D9DLL;
  *(_OWORD *)(a1 + 202) = v2;
  *(_OWORD *)(a1 + 176) = v2;
  *(_OWORD *)(a1 + 192) = v2;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v2;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = v2;
  *(_OWORD *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 96) = v2;
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 218), &memset_pattern, 0x1B4uLL);
  uint64_t v3 = 218;
  uint64_t v4 = a1;
  do
  {
    *(_DWORD *)(v4 + 656) = -99;
    *(void *)(v4 + 688) = 0xC058C00000000000;
    *(_DWORD *)(v4 + 9376) = -400;
    *(void *)(v4 + 9408) = 0xC079000000000000;
    v4 += 40;
    --v3;
  }
  while (v3);
  *(unsigned char *)(a1 + 654) = 0;
}

void GncP07_06SendPENVRestoreResp(int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = gnssOsa_Calloc("GncP07_06SendPENVRestoreResp", 47, 1, 0x10uLL);
  if (v4)
  {
    unsigned int v5 = v4;
    v4[12] = a1;
    v4[13] = a2;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_RSP =>GNM Code,%hhu,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP07_06SendPENVRestoreResp", a1, a2);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 128, 8654084, v5);
  }
}

uint64_t GncP07_07HandlePENVRestore(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_REQ NVSize,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP07_07HandlePENVRestore", *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 24));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    size_t v3 = *(unsigned __int16 *)(a1 + 12);
    if (*(_WORD *)(a1 + 12) && (uint64_t v4 = *(const void **)(a1 + 16)) != 0)
    {
      if (v3 == 33424)
      {
        if (qword_26AA2DEF8)
        {
          memcpy_s("GncP07_07HandlePENVRestore", 107, (void *)qword_26AA2DEF8, 0x8290u, v4, v3);
          unsigned int v5 = *(void **)(a1 + 16);
          if (v5) {
            free(v5);
          }
          int v6 = 0;
          *(void *)(a1 + 16) = 0;
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v12 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GncP07_07HandlePENVRestore", 769);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          int v6 = 3;
        }
      }
      else if (g_LbsOsaTrace_Config < 2)
      {
        int v6 = 1;
      }
      else
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NVSize Mismatch PESize,%u,GNMSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP07_07HandlePENVRestore", 33424, *(unsigned __int16 *)(a1 + 12));
        int v6 = 1;
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      int v8 = *(unsigned __int8 *)(a1 + 24);
      int v9 = v6;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP07_07HandlePENVRestore", 513);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      int v8 = *(unsigned __int8 *)(a1 + 24);
      int v9 = 2;
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "GncP07_07HandlePENVRestore", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    int v9 = 2;
    int v8 = 255;
  }
  GncP07_06SendPENVRestoreResp(v9, v8);
  return 0;
}

void GncP07_08WriteNVStore(size_t a1, unsigned __int8 *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NVStore\n");
LABEL_12:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return;
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NVSize,0\n");
    goto LABEL_12;
  }
  uint64_t v4 = gnssOsa_Calloc("GncP07_08WriteNVStore", 134, 1, 0x18uLL);
  if (v4)
  {
    unsigned int v5 = v4;
    int v6 = gnssOsa_Calloc("GncP07_08WriteNVStore", 140, a1, 1uLL);
    v5[2] = v6;
    if (v6)
    {
      *((_WORD *)v5 + 6) = a1;
      memcpy_s("GncP07_08WriteNVStore", 148, v6, a1, a2, a1);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_BACKUP_IND =>GNM NVSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP07_08WriteNVStore", a1);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 128, 8653827, v5);
    }
    else
    {
      free(v5);
    }
  }
}

BOOL Is_BDS_IntEph_Same(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
      && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10)
      && *(unsigned __int8 *)(a1 + 11) == *(unsigned __int8 *)(a2 + 11)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(void *)(a1 + 48) == *(void *)(a2 + 48)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(void *)(a1 + 64) == *(void *)(a2 + 64)
      && *(void *)(a1 + 72) == *(void *)(a2 + 72)
      && *(void *)(a1 + 80) == *(void *)(a2 + 80)
      && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
      && *(unsigned __int16 *)(a1 + 92) == *(unsigned __int16 *)(a2 + 92)
      && *(unsigned __int16 *)(a1 + 94) == *(unsigned __int16 *)(a2 + 94)
      && *(unsigned __int16 *)(a1 + 96) == *(unsigned __int16 *)(a2 + 96)
      && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
      && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104)
      && *(_DWORD *)(a1 + 108) == *(_DWORD *)(a2 + 108)
      && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
      && *(_DWORD *)(a1 + 116) == *(_DWORD *)(a2 + 116)
      && *(_DWORD *)(a1 + 120) == *(_DWORD *)(a2 + 120)
      && *(unsigned __int16 *)(a1 + 124) == *(unsigned __int16 *)(a2 + 124)
      && *(unsigned __int16 *)(a1 + 126) == *(unsigned __int16 *)(a2 + 126)
      && *(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128)
      && *(unsigned __int8 *)(a1 + 129) == *(unsigned __int8 *)(a2 + 129)
      && *(unsigned __int8 *)(a1 + 130) == *(unsigned __int8 *)(a2 + 130)
      && *(unsigned __int8 *)(a1 + 131) == *(unsigned __int8 *)(a2 + 131)
      && *(unsigned __int16 *)(a1 + 132) == *(unsigned __int16 *)(a2 + 132)
      && *(unsigned __int16 *)(a1 + 134) == *(unsigned __int16 *)(a2 + 134)
      && *(unsigned __int16 *)(a1 + 136) == *(unsigned __int16 *)(a2 + 136)
      && *(unsigned __int16 *)(a1 + 138) == *(unsigned __int16 *)(a2 + 138)
      && *(unsigned __int8 *)(a1 + 140) == *(unsigned __int8 *)(a2 + 140)
      && *(unsigned __int8 *)(a1 + 141) == *(unsigned __int8 *)(a2 + 141)
      && *(unsigned __int8 *)(a1 + 142) == *(unsigned __int8 *)(a2 + 142)
      && *(unsigned __int8 *)(a1 + 143) == *(unsigned __int8 *)(a2 + 143)
      && *(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144)
      && *(unsigned __int8 *)(a1 + 145) == *(unsigned __int8 *)(a2 + 145)
      && *(unsigned __int8 *)(a1 + 146) == *(unsigned __int8 *)(a2 + 146);
}

uint64_t GN_AGAL_Set_Eph_El(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Eph")) {
    return 0;
  }
  EvLog_d("GN_AGAL_Set_Eph: ", *(unsigned __int8 *)(a1 + 6));
  if (*(_DWORD *)a1 > 0x93A7Fu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: TOW = %d >604800, Out of range!");
    return 0;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 4);
  if (v2 >= 0x1000)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Weedouble k = %d >=4096, Out of range!");
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 6);
  if (v3 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v3 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 8);
  if (v4 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IODnav = %d >=1024, Out of range!");
    return 0;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 10);
  if (v5 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toe = %d >=10080, Out of range!");
    return 0;
  }
  double v6 = 0.25;
  if (((v3 - 14) & 0xFB) != 0) {
    double v6 = 0.03;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  double v8 = (double)v7 * 1.16415322e-10;
  if (v8 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v6)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  double v10 = (double)v9 * 0.00000190734863;
  if (v10 < 4800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > 5800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a1 + 40) - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IDot = %d <-2^13 or >=2^13, Out of range!");
    return 0;
  }
  int v11 = *(_DWORD *)(a1 + 36);
  if ((v11 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  double v12 = (double)v11 * 3.57157734e-13;
  if (v12 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v12 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  int v13 = *(_DWORD *)(a1 + 56);
  if (v13 - 0x40000000 >= 0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af0 = %d <-2^30 or >=2^30, Out of range!");
    return 0;
  }
  int v14 = *(_DWORD *)(a1 + 60);
  if ((v14 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af1 = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a1 + 64) - 32) >> 6) <= 0x3FEu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af2 = %d <-2^5 or >=2^5, Out of range!");
    return 0;
  }
  unsigned int v15 = *(unsigned __int16 *)(a1 + 66);
  if (v15 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toc = %d >=10080, Out of range!");
    return 0;
  }
  __int16 v16 = *(_WORD *)(a1 + 68);
  if ((unsigned __int16)((unsigned __int16)(v16 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5b = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  __int16 v17 = *(_WORD *)(a1 + 70);
  if ((unsigned __int16)((unsigned __int16)(v17 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5a = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  unsigned int v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Model_ID = %d >1, Out of range!");
    return 0;
  }
  unsigned int v19 = *(unsigned __int8 *)(a1 + 73);
  if (v19 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  unsigned int v20 = *(unsigned __int8 *)(a1 + 74);
  if (v20 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  unsigned int v21 = *(unsigned __int8 *)(a1 + 75);
  if (v21 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  unsigned int v22 = *(unsigned __int8 *)(a1 + 76);
  if (v22 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v23 = *(unsigned __int8 *)(a1 + 77);
  if (v23 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v24 = *(unsigned __int8 *)(a1 + 78);
  if (v24 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v25 = *(unsigned __int8 *)(a1 + 79);
  if (v25 >= 7)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Fit_hours = %d >6, Out of range!");
    return 0;
  }
  uint64_t v26 = v3 - 1;
  if (v26 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  __int16 v27 = *(_WORD *)(a1 + 40);
  __int16 v28 = *(_WORD *)(a1 + 64);
  uint64_t v29 = p_NA;
  uint64_t v30 = p_NA + 88 * v26;
  *(_DWORD *)(v30 + 5596) = *(_DWORD *)a1;
  *(_WORD *)(v30 + 5600) = v2;
  *(unsigned char *)(v30 + 5602) = v3;
  *(unsigned char *)(v30 + 5603) = *(unsigned char *)(a1 + 7);
  *(_WORD *)(v30 + 5604) = v4;
  *(_WORD *)(v30 + 5606) = v5;
  *(_DWORD *)(v30 + 5608) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v30 + 5612) = v7;
  *(_DWORD *)(v30 + 5616) = v9;
  *(void *)(v30 + 5620) = *(void *)(a1 + 24);
  *(_DWORD *)(v30 + 5628) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v30 + 5632) = v11;
  *(_WORD *)(v30 + 5636) = v27;
  *(void *)(v30 + 5638) = *(void *)(a1 + 42);
  *(_WORD *)(v30 + 5646) = *(_WORD *)(a1 + 50);
  *(_DWORD *)(v30 + 5648) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v30 + 5652) = v13;
  *(_DWORD *)(v30 + 5656) = v14;
  *(_WORD *)(v30 + 5660) = v28;
  *(_WORD *)(v30 + 5662) = v15;
  *(_WORD *)(v30 + 5664) = v16;
  *(_WORD *)(v30 + 5666) = v17;
  if (v25 >= 4) {
    unsigned int v31 = 4;
  }
  else {
    unsigned int v31 = v25;
  }
  *(unsigned char *)(v30 + 5675) = v31;
  *(unsigned char *)(v30 + 5668) = v18;
  *(unsigned char *)(v30 + 5669) = v19;
  *(unsigned char *)(v30 + 5670) = v20;
  *(unsigned char *)(v30 + 5671) = v21;
  *(unsigned char *)(v30 + 5672) = v22;
  *(unsigned char *)(v30 + 5673) = v23;
  *(unsigned char *)(v30 + 5674) = v24;
  if ((v3 == 18 || v3 == 14) && v31 >= 3) {
    *(unsigned char *)(v30 + 5675) = 2;
  }
  if (*(unsigned char *)(a1 + 80)) {
    int v32 = 5;
  }
  else {
    int v32 = 3;
  }
  *(_DWORD *)(v29 + 88 * v26 + 5592) = v32;
  *(unsigned char *)(v29 + v26 + 147) = 1;
  uint64_t v33 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v33 + 16) && *(int *)v33 >= 3) {
    int v34 = 604800 * *(__int16 *)(v33 + 32) + (int)*(double *)(v33 + 40);
  }
  else {
    int v34 = 0;
  }
  long long v37 = (int *)(p_NA + 88 * v26 + 5588);
  *long long v37 = v34;
  uint64_t v35 = 1;
  Debug_Log_GAL_Eph(1, (uint64_t)v37);
  return v35;
}

uint64_t GN_AGAL_Set_Alm_El(unsigned __int8 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Alm")) {
    return 0;
  }
  EvLog_d("GN_AGAL_Set_Alm: ", *a1);
  unsigned int v2 = *a1;
  if (v2 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v2 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  unsigned int v3 = a1[1];
  if (v3 >= 0x10)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: IODa = %d > 15, Out of range!");
    return 0;
  }
  unsigned int v4 = a1[2];
  if (v4 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: WNa = %d > 3, Out of range!");
    return 0;
  }
  unsigned int v5 = *((unsigned __int16 *)a1 + 2);
  if (v5 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: toa = %d > 1023, Out of range!");
    return 0;
  }
  __int16 v6 = *((_WORD *)a1 + 3);
  if ((unsigned __int16)(v6 - 4097) <= 0xDFFEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  double v7 = (double)v6 * 0.001953125;
  if (v7 < -640.588203)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v7 > 359.411797)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  unsigned int v8 = *((unsigned __int16 *)a1 + 4);
  if (v8 >= 0x800)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %d >= 2^11, Out of range!");
    return 0;
  }
  double v9 = 0.25;
  if (((v2 - 14) & 0xFB) != 0) {
    double v9 = 0.03;
  }
  double v10 = (double)v8 * 0.0000152587891;
  if (v10 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v9)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  __int16 v11 = *((_WORD *)a1 + 5);
  if ((unsigned __int16)(v11 - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: di0 = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  if ((unsigned __int16)(*((_WORD *)a1 + 7) - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  __int16 v12 = *((_WORD *)a1 + 7);
  double v13 = (double)v12 * 3.6572952e-10;
  if (v13 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v13 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  __int16 v14 = *((_WORD *)a1 + 11);
  if ((unsigned __int16)((unsigned __int16)(v14 - 4096) >> 13) <= 6u)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: af1 = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  unsigned int v15 = a1[24];
  if (v15 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v16 = a1[25];
  if (v16 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v17 = a1[26];
  if (v17 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  uint64_t v18 = v2 - 1;
  if (v18 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  uint64_t v19 = p_NA;
  uint64_t v20 = p_NA + 36 * v18;
  *(unsigned char *)(v20 + 8764) = v2;
  *(unsigned char *)(v20 + 8765) = v3;
  *(_WORD *)(v20 + 8766) = v4;
  *(_WORD *)(v20 + 8768) = v5;
  *(_WORD *)(v20 + 8770) = v6;
  *(_WORD *)(v20 + 8772) = v8;
  *(_WORD *)(v20 + 8774) = v11;
  *(_WORD *)(v20 + 8776) = *((_WORD *)a1 + 6);
  *(_WORD *)(v20 + 8778) = v12;
  *(_WORD *)(v20 + 8780) = *((_WORD *)a1 + 8);
  *(_DWORD *)(v20 + 8782) = *(_DWORD *)(a1 + 18);
  *(_WORD *)(v20 + 8786) = v14;
  *(unsigned char *)(v20 + 8788) = v15;
  *(unsigned char *)(v20 + 8789) = v16;
  *(unsigned char *)(v20 + 8790) = v17;
  if (a1[27]) {
    int v21 = 5;
  }
  else {
    int v21 = 3;
  }
  *(_DWORD *)(v20 + 8760) = v21;
  *(unsigned char *)(v19 + v18 + 183) = 1;
  uint64_t v22 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v22 + 16) && *(int *)v22 >= 3) {
    int v23 = (int)*(double *)(v22 + 40) + 604800 * *(__int16 *)(v22 + 32);
  }
  else {
    int v23 = 0;
  }
  uint64_t v26 = (int *)(p_NA + 36 * v18 + 8756);
  int *v26 = v23;
  uint64_t v24 = 1;
  Debug_Log_GAL_Alm(1, (uint64_t)v26);
  return v24;
}

uint64_t GN_AGAL_Set_GGTO(__int16 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_GGTO")) {
    return 0;
  }
  if ((unsigned __int16)(a1[1] - 2049) <= 0xEFFEu)
  {
    EvCrt_v("GN_AGAL_Set_GGTO: FAILED: A1G = %d < -2^11 or >= 2^11, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 4) >= 0xA9u)
  {
    EvCrt_v("GN_AGAL_Set_GGTO: FAILED: ToG = %d > 168, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 5) >= 0x40u)
  {
    EvCrt_v("GN_AGAL_Set_GGTO: FAILED: WNoG = %d > 63, Out of range!");
    return 0;
  }
  uint64_t v5 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v5 + 16) && *(int *)v5 >= 3) {
    int v6 = (int)*(double *)(v5 + 40) + 604800 * *(__int16 *)(v5 + 32);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = p_NA;
  unsigned int v8 = (unsigned char *)(p_NA + 5584);
  *(_DWORD *)(p_NA + 5572) = v6;
  if (*((unsigned char *)a1 + 6)) {
    int v9 = 5;
  }
  else {
    int v9 = 3;
  }
  *(_DWORD *)(v7 + 5576) = v9;
  uint64_t v10 = *a1;
  *(_WORD *)(v7 + 5580) = v10;
  uint64_t v11 = a1[1];
  *(_WORD *)(v7 + 5582) = v11;
  uint64_t v12 = *((unsigned __int8 *)a1 + 4);
  *unsigned int v8 = v12;
  uint64_t v13 = *((unsigned __int8 *)a1 + 5);
  v8[1] = v13;
  uint64_t v3 = 1;
  *(unsigned char *)(v7 + 146) = 1;
  EvLog_nd("GN_AGAL_Set_GGTO: ", 4, v2, v10, v11, v12, v13);
  return v3;
}

BOOL umeas(BOOL result, unsigned int a2, double a3, double *a4, double *a5, double *a6, double *a7, double a8)
{
  v64[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v10 = result - 8;
  uint64_t v11 = a4 - 1;
  unsigned int v12 = a2 + 1;
  unsigned int v63 = ((a2 + 1) * a2) >> 1;
  if (a2)
  {
    uint64_t v13 = a6;
    __int16 v14 = a5;
    unsigned int v17 = (double *)result;
    uint64_t v61 = a2 + 1;
    v62 = a7;
    uint64_t v18 = a6 - 1;
    uint64_t v19 = a5 - 1;
    unsigned int v20 = 1;
    while (1)
    {
      v64[0] = 0.0;
      uint64_t result = R8_EQ(&v11[v20], v64);
      if (!result) {
        break;
      }
      if (++v20 > a2) {
        goto LABEL_18;
      }
    }
    if (!v20)
    {
LABEL_18:
      unsigned int v12 = v61;
      a7 = v62;
      if (v61 <= 2) {
        uint64_t v31 = 2;
      }
      else {
        uint64_t v31 = v61;
      }
      uint64_t v32 = v31 - 1;
      do
      {
        *v13++ = 0.0;
        *v14++ = 0.0;
        --v32;
      }
      while (v32);
      goto LABEL_23;
    }
    if (a2 < 2)
    {
      unsigned int v21 = 0;
    }
    else
    {
      if (v20 <= 2) {
        unsigned int v21 = 2;
      }
      else {
        unsigned int v21 = v20;
      }
      if (v21 <= a2)
      {
        uint64_t v22 = a2;
        unsigned int v23 = v63;
        int v24 = v63 - a2 + 1;
        uint64_t v25 = 1 - a2;
        do
        {
          double v26 = v11[v22];
          unsigned int v27 = v22 - 1;
          if (v22 != 1)
          {
            uint64_t v28 = 0;
            do
            {
              double v26 = v26 + *(double *)(v10 + 8 * (v24 + v28)) * a4[v28];
              uint64_t v29 = (v28++ + 2);
            }
            while (v29 != v22);
          }
          v19[v22] = v26;
          double v30 = *(double *)(v10 + 8 * v23);
          v23 -= v22;
          v18[v22] = v26 * v30;
          v24 += v25++;
          --v22;
        }
        while (v21 <= v27);
      }
    }
    if (v20 == 1)
    {
      double v33 = *a4;
      *__int16 v14 = *a4;
      *uint64_t v13 = v33 * *v17;
      unsigned int v34 = v63;
    }
    else
    {
      uint64_t v35 = v20;
      if (v20 <= 2uLL) {
        uint64_t v35 = 2;
      }
      uint64_t v36 = v35 - 1;
      long long v37 = v14;
      uint64_t v38 = v13;
      unsigned int v34 = v63;
      do
      {
        *v37++ = 0.0;
        *v38++ = 0.0;
        --v36;
      }
      while (v36);
    }
    if (a8 >= 0.0)
    {
      double v39 = 0.0;
      double v40 = a3;
      if (v20 <= a2)
      {
        unsigned int v41 = v20;
        double v40 = a3;
        do
        {
          double v40 = v40 + v19[v41] * v18[v41];
          double v39 = v39 + v11[v41] * *(double *)(v10 + 8 * (v34 + v41));
          ++v41;
        }
        while (v41 <= a2);
      }
      double v42 = v11[v61] - v39;
      *(double *)(v10 + 8 * (v34 + v61)) = v42;
      if (a3 >= 0.0 && v42 * v42 > v40 * a8)
      {
        a3 = -v40;
        a7 = v62;
        goto LABEL_26;
      }
    }
    if (v20 == 1)
    {
      double v43 = a3 + *v13 * *v14;
      if (fabs(v43) <= 6.0e-38) {
        double v44 = 0.0;
      }
      else {
        double v44 = 1.0 / v43;
      }
      *unsigned int v17 = *v17 * (v44 * a3);
      v45 = v62;
      if (a2 == 1)
      {
LABEL_63:
        double *v45 = v43;
        if (a8 > 0.0)
        {
          double v57 = v44 * *(double *)(v10 + 8 * (v63 + v61));
          v19[v61] = v57;
          uint64_t v58 = v61 - 1;
          unsigned int v59 = v63 + 1;
          do
          {
            double v60 = *v13++;
            *(double *)(v10 + 8 * v59) = *(double *)(v10 + 8 * v59) + v60 * v57;
            ++v59;
            --v58;
          }
          while (v58);
        }
        return result;
      }
      unsigned int v46 = 2;
    }
    else
    {
      unsigned int v46 = (((v20 - 1) * v20) >> 1) + 1;
      double v44 = 0.0;
      double v43 = a3;
      if (fabs(a3) > 6.0e-38) {
        double v44 = 1.0 / a3;
      }
      v45 = v62;
    }
    if (v21 <= a2)
    {
      do
      {
        double v47 = v43;
        double v48 = v18[v21];
        double v49 = v19[v21];
        uint64_t v50 = v21;
        if (v21 >= 2)
        {
          uint64_t v51 = v21 - 1;
          double v52 = -(v49 * v44);
          unsigned int v53 = v13;
          do
          {
            double v54 = *(double *)(v10 + 8 * v46);
            *(double *)(v10 + 8 * v46) = v54 + v52 * *v53;
            *unsigned int v53 = *v53 + v48 * v54;
            ++v53;
            ++v46;
            --v51;
          }
          while (v51);
          double v49 = v19[v50];
        }
        double v43 = v43 + v48 * v49;
        if (fabs(v43) > 6.0e-38)
        {
          double v44 = 1.0 / v43;
          *(double *)(v10 + 8 * v46) = v47 * (1.0 / v43) * *(double *)(v10 + 8 * v46);
        }
        v64[0] = 0.0;
        uint64_t result = R8_EQ((const double *)(v10 + 8 * v46), v64);
        if (v50 && result)
        {
          unsigned int v55 = v46;
          uint64_t v56 = v50;
          do
          {
            *(void *)(v10 + 8 * v55--) = 0;
            --v56;
          }
          while (v56);
        }
        ++v46;
        unsigned int v21 = v50 + 1;
      }
      while ((int)v50 + 1 <= a2);
    }
    goto LABEL_63;
  }
LABEL_23:
  if (fabs(a3) > 6.0e-38 && a8 >= 0.0) {
    *(double *)(v10 + 8 * (v63 + v12)) = v11[v12] / a3;
  }
LABEL_26:
  *a7 = a3;
  return result;
}

void Hal_GetMEAnalyticsData(void)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(v8, 0, 22);
  long long v7 = 0u;
  long long v6 = 0u;
  uint64_t v5 = 0x2A00364D6344787ALL;
  v8[22] = 10;
  if ((int)Hal22_ZxSendToChip((unsigned __int8 *)&v5, 0x3FuLL) <= 0)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_15;
  }
  int v0 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x96u);
  if (v0 == 1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
LABEL_12:
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx err\n");
    goto LABEL_15;
  }
  if (v0)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    goto LABEL_12;
  }
  if (g_GetAnalyticsResponseStatus == 32)
  {
    if (g_LbsOsaTrace_Config < 4) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 73, "Hal_GetMEAnalyticsData");
    int v2 = 4;
    goto LABEL_16;
  }
  if (!g_LbsOsaTrace_Config) {
    return;
  }
  bzero(__str, 0x3C6uLL);
  unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx err,%u\n", v3);
LABEL_15:
  int v2 = 1;
LABEL_16:
  gnssOsa_PrintLog(__str, v2, 1, 0);
}

void Hal_GetMEAnalyticsDataResponse(unsigned __int8 *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_18;
  }
  if (a1[2] != 68 || a1[3] != 67)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDEx,%u\n", v13, "HAL");
LABEL_18:
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  g_GetAnalyticsResponseStatus = a1[8];
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v5 = __error();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v4, "HAL", 69, "Hal_GetMEAnalyticsDataResponse", 1542, *v5);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if ((a2 - 51) <= 0xFFFFFFD4)
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_Analytics METTickMs %u-%u: ver,%u,L1rssimaxdB,%u,L1rssimeandB,%u,L5rssimaxdB,%u,L5rssimeandB,%u,GLOrssimaxdB,%u,GLOrssimeandB,%u,L1rssiper,%u,L5rssiper,%u,GLOrssiper,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 77, "Hal_LogMEAnalyticsData", *((_DWORD *)a1 + 9), *((_DWORD *)a1 + 10), a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17],
        a1[18]);
      gnssOsa_PrintLog(__str, 3, 1, 0);
      if (g_LbsOsaTrace_Config >= 3)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_Analytics METTickMs %u-%u: freq0Hz,%5.3f,freq1Hz,%5.3f,freq2Hz,%5.3f,CN0_0dBHz,%u,CN0_1dBHz,%u,CN0_2dBHz,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 77, "Hal_LogMEAnalyticsData", *((_DWORD *)a1 + 9), *((_DWORD *)a1 + 10), (double)*(__int16 *)(a1 + 19) * 0.125, (double)*(__int16 *)(a1 + 21) * 0.125, (double)*(__int16 *)(a1 + 23) * 0.125, a1[25], a1[26], a1[27]);
        gnssOsa_PrintLog(__str, 3, 1, 0);
        if (g_LbsOsaTrace_Config >= 3)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v8 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_Analytics METTickMs %u-%u: AggPow4gdBm,%d,Agg4gtimeS,%u,AggPow5gdBm,%d,Agg5gtimeS,%u,L5stateper,%u,NumInterfaceTeardown,%u,outages,%u,PEAidper,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 77, "Hal_LogMEAnalyticsData", *((_DWORD *)a1 + 9), *((_DWORD *)a1 + 10), (char)a1[28], a1[29], (char)a1[34], a1[35], a1[30], a1[31], a1[32], a1[33]);
          gnssOsa_PrintLog(__str, 3, 1, 0);
          if (g_LbsOsaTrace_Config >= 3)
          {
            bzero(__str, 0x3C6uLL);
            *(double *)&unint64_t v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            unint64_t v10 = (unint64_t)*(double *)&v9;
            LOBYTE(v9) = a1[45];
            LOWORD(v11) = *((_WORD *)a1 + 23);
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_Analytics METTickMs %u-%u: DutyCycle_percent,%u,Max_temperature_rate,%.1fC/s,Duration_high_temperature_rate,%.1fs,Min_temperature,%dC,Max_temperature,%dC\n", v10, "HAL", 77, "Hal_LogMEAnalyticsData", *((_DWORD *)a1 + 9), *((_DWORD *)a1 + 10), a1[44], (double)v9 * 0.1, (double)v11 * 0.1, (char)a1[48], (char)a1[49]);
            gnssOsa_PrintLog(__str, 3, 1, 0);
          }
        }
      }
    }
    uint64_t v12 = (*((_DWORD *)a1 + 10) - *((_DWORD *)a1 + 9));
    *(void *)__str = MEMORY[0x263EF8330];
    uint64_t v15 = 0x40000000;
    unsigned int v16 = ___ZL22Hal_LogMEAnalyticsDataPht_block_invoke;
    unsigned int v17 = &__block_descriptor_tmp;
    uint64_t v18 = v12;
    uint64_t v19 = a1 + 8;
    analytics_send_event_lazy();
  }
}

xpc_object_t ___ZL22Hal_LogMEAnalyticsDataPht_block_invoke(uint64_t a1)
{
  xpc_object_t empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "SessionDuration", *(void *)(a1 + 32));
  xpc_dictionary_set_uint64(empty, "Version", *(unsigned __int8 *)(*(void *)(a1 + 40) + 1));
  xpc_dictionary_set_uint64(empty, "L1rssimaxdB", *(unsigned __int8 *)(*(void *)(a1 + 40) + 2));
  xpc_dictionary_set_uint64(empty, "L1rssimeandB", *(unsigned __int8 *)(*(void *)(a1 + 40) + 3));
  xpc_dictionary_set_uint64(empty, "L5rssimaxdB", *(unsigned __int8 *)(*(void *)(a1 + 40) + 4));
  xpc_dictionary_set_uint64(empty, "L5rssimeandB", *(unsigned __int8 *)(*(void *)(a1 + 40) + 5));
  xpc_dictionary_set_uint64(empty, "GLOrssimaxdB", *(unsigned __int8 *)(*(void *)(a1 + 40) + 6));
  xpc_dictionary_set_uint64(empty, "GLOrssimeandB", *(unsigned __int8 *)(*(void *)(a1 + 40) + 7));
  xpc_dictionary_set_uint64(empty, "L1rssipercent", *(unsigned __int8 *)(*(void *)(a1 + 40) + 8));
  xpc_dictionary_set_uint64(empty, "L5rssipercent", *(unsigned __int8 *)(*(void *)(a1 + 40) + 9));
  xpc_dictionary_set_uint64(empty, "GLOrssipercent", *(unsigned __int8 *)(*(void *)(a1 + 40) + 10));
  xpc_dictionary_set_int64(empty, "AggPow4gdBm", *(char *)(*(void *)(a1 + 40) + 20));
  xpc_dictionary_set_uint64(empty, "Agg4gtimeS", *(unsigned __int8 *)(*(void *)(a1 + 40) + 21));
  xpc_dictionary_set_int64(empty, "AggPow5gdBm", *(char *)(*(void *)(a1 + 40) + 26));
  xpc_dictionary_set_uint64(empty, "Agg5gtimeS", *(unsigned __int8 *)(*(void *)(a1 + 40) + 27));
  xpc_dictionary_set_uint64(empty, "L5statepercent", *(unsigned __int8 *)(*(void *)(a1 + 40) + 22));
  xpc_dictionary_set_uint64(empty, "NumInterfaceTeardown", *(unsigned __int8 *)(*(void *)(a1 + 40) + 23));
  xpc_dictionary_set_uint64(empty, "outages", *(unsigned __int8 *)(*(void *)(a1 + 40) + 24));
  xpc_dictionary_set_uint64(empty, "PEAidTrustedpercent", *(unsigned __int8 *)(*(void *)(a1 + 40) + 25));
  xpc_dictionary_set_uint64(empty, "DutyCyclepercent", *(unsigned __int8 *)(*(void *)(a1 + 40) + 36));
  xpc_dictionary_set_uint64(empty, "MaxTempRate_0p1C_s", *(unsigned __int8 *)(*(void *)(a1 + 40) + 37));
  xpc_dictionary_set_uint64(empty, "DurationHighTempRate_0p1s", *(unsigned __int16 *)(*(void *)(a1 + 40) + 38));
  xpc_dictionary_set_int64(empty, "MinTempC", *(char *)(*(void *)(a1 + 40) + 40));
  xpc_dictionary_set_int64(empty, "MaxTempC", *(char *)(*(void *)(a1 + 40) + 41));
  return empty;
}

uint64_t Gnm55_SendVar_GNSS_FW_NV_Data(char a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((a1 & 1) == 0)
  {
    unsigned __int16 v6 = word_26AA2DF6A;
    __int16 v5 = qword_26AA2DF70;
    goto LABEL_10;
  }
  int NvSize = gnssOsa_getNvSize(1, &qword_26AA2DF70);
  __int16 v2 = qword_26AA2DF70;
  if (!NvSize) {
    goto LABEL_29;
  }
  if (!qword_26AA2DF70)
  {
    unsigned __int8 v14 = 1;
    goto LABEL_30;
  }
  unint64_t v3 = gnssOsa_Calloc("Gnm55_01Read_GNSS_FW_NV", 118, 1, qword_26AA2DF70);
  g_GNSS_FW_NV_Context = (uint64_t)v3;
  __int16 v2 = qword_26AA2DF70;
  if (!v3)
  {
LABEL_29:
    unsigned __int8 v14 = 2;
LABEL_30:
    word_26AA2DF6A = v2;
    _MergedGlobals_0 = 0;
    ++byte_26A9C9F81;
    if (Hal_SendNoFirmwareNVData(v14))
    {
      if (!AgpsFsmStartTimer(0x802E06u, 0x7D0u))
      {
        uint64_t result = 1;
        byte_26A9C9F80 = 1;
        return result;
      }
      if (g_LbsOsaTrace_Config < 2)
      {
LABEL_37:
        uint64_t v12 = (void *)g_GNSS_FW_NV_Context;
        if (!g_GNSS_FW_NV_Context) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm55_SendVar_GNSS_FW_NV_Data", 1544);
      int v16 = 2;
    }
    else
    {
      if (!g_LbsOsaTrace_Config) {
        goto LABEL_37;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v17 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: No GNSS FW NV restore failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 69, "Gnm55_SendVar_GNSS_FW_NV_Data");
      int v16 = 1;
    }
    gnssOsa_PrintLog(__str, v16, 1, 0);
    goto LABEL_37;
  }
  if (!gnssOsa_readNv(1, v3, qword_26AA2DF70))
  {
    __int16 v2 = qword_26AA2DF70;
    goto LABEL_29;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Read GNSS FW NV success, size,%lu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_01Read_GNSS_FW_NV", qword_26AA2DF70);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  __int16 v5 = qword_26AA2DF70;
  _MergedGlobals_0 = 0;
  ++byte_26A9C9F81;
  unsigned __int16 v6 = qword_26AA2DF70;
LABEL_10:
  if (v6 < 0xFF8u)
  {
    __int16 v8 = 0;
    byte_26A9C9F82 = 1;
    char v7 = -1;
  }
  else
  {
    char v7 = _MergedGlobals_0 + 1;
    __int16 v8 = v6 - 4087;
  }
  _MergedGlobals_0 = v7;
  word_26AA2DF6A = v8;
  if (!Hal_SendFirmwareNVData((unsigned __int8 *)(g_GNSS_FW_NV_Context + (unsigned __int16)(v5 - v6))))
  {
    if (!g_LbsOsaTrace_Config) {
      goto LABEL_20;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV restore failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm55_SendVar_GNSS_FW_NV_Data");
    int v10 = 1;
LABEL_19:
    gnssOsa_PrintLog(__str, v10, 1, 0);
LABEL_20:
    uint64_t v12 = (void *)g_GNSS_FW_NV_Context;
    if (!g_GNSS_FW_NV_Context)
    {
LABEL_22:
      uint64_t result = 0;
      *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
      g_GNSS_FW_NV_Context = 0;
      return result;
    }
LABEL_21:
    free(v12);
    goto LABEL_22;
  }
  if (AgpsFsmStartTimer(0x802E06u, 0x7D0u))
  {
    if (g_LbsOsaTrace_Config < 2) {
      goto LABEL_20;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm55_SendVar_GNSS_FW_NV_Data", 1544);
    int v10 = 2;
    goto LABEL_19;
  }
  uint64_t result = 1;
  byte_26A9C9F80 = 1;
  if (_MergedGlobals_0 == 255)
  {
    if (g_GNSS_FW_NV_Context)
    {
      free((void *)g_GNSS_FW_NV_Context);
      g_GNSS_FW_NV_Context = 0;
      return 1;
    }
  }
  return result;
}

void Gnm55_HandleRespNo_GNSS_FW_NV_ACK(unsigned __int8 *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (byte_26A9C9F80)
  {
    if (AgpsFsmStopTimer(8400390) && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm55_HandleRespNo_GNSS_FW_NV_ACK", 1545);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    byte_26A9C9F80 = 0;
  }
  if (Gnm55_CheckRestoreStatus(a1[8], "No GNSS FW NV Ack"))
  {
    if ((Ga05_GetDebugFeaturesBitmask() & 0x80) != 0) {
      Gnm35_EnableBCTInTimeMarkMessage();
    }
    byte_26A9A1951 = Ga05_GetIsStandaloneBeiDouSupportRequired();
    HSW_SetPEConstelCfg();
    if ((Hal_GNSS_SessionStart() & 1) == 0)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS session start failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm55_HandleRespNo_GNSS_FW_NV_ACK");
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
  }
  else
  {
    if (g_GNSS_FW_NV_Context) {
      free((void *)g_GNSS_FW_NV_Context);
    }
    *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
    g_GNSS_FW_NV_Context = 0;
  }
}

uint64_t Gnm55_CheckRestoreStatus(int a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 <= 70)
  {
    if (a1 != 32)
    {
      if (a1 == 65)
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: CLK TCXO, TCXO not defined in SSF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_CheckRestoreStatus", a2);
          int v5 = 4;
LABEL_25:
          gnssOsa_PrintLog(__str, v5, 1, 0);
          return 0;
        }
        return 0;
      }
      if (a1 == 67)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: CS error\n");
LABEL_18:
          int v5 = 1;
          goto LABEL_25;
        }
        return 0;
      }
LABEL_23:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx %s: RespStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm55_CheckRestoreStatus", 770, a2, a1);
        int v5 = 2;
        goto LABEL_25;
      }
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Success\n");
      goto LABEL_21;
    }
    return 1;
  }
  if (a1 == 71)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Gen failure\n");
      goto LABEL_18;
    }
    return 0;
  }
  if (a1 == 78)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: Fallback to fixed GNSS FW NV\n");
      goto LABEL_21;
    }
    return 1;
  }
  if (a1 != 84) {
    goto LABEL_23;
  }
  if (g_LbsOsaTrace_Config < 4) {
    return 1;
  }
  bzero(__str, 0x3C6uLL);
  mach_continuous_time();
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s: TCXO defined in SSF\n");
LABEL_21:
  uint64_t v6 = 1;
  gnssOsa_PrintLog(__str, 4, 1, 0);
  return v6;
}

void Gnm55_HandleRespVar_GNSS_FW_NV_ACK(unsigned __int8 *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (byte_26A9C9F80)
  {
    if (AgpsFsmStopTimer(8400390) && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm55_HandleRespVar_GNSS_FW_NV_ACK", 1545);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    byte_26A9C9F80 = 0;
  }
  if (Gnm55_CheckRestoreStatus(a1[8], "GNSS FW NV Var Ack"))
  {
    if (byte_26A9C9F82)
    {
      if ((Ga05_GetDebugFeaturesBitmask() & 0x80) != 0) {
        Gnm35_EnableBCTInTimeMarkMessage();
      }
      byte_26A9A1951 = Ga05_GetIsStandaloneBeiDouSupportRequired();
      HSW_SetPEConstelCfg();
      if ((Hal_GNSS_SessionStart() & 1) == 0)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v3 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS session start failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm55_HandleRespVar_GNSS_FW_NV_ACK");
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
    }
    else
    {
      Gnm55_SendVar_GNSS_FW_NV_Data(0);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Response error, NV Var Ack\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm55_HandleRespVar_GNSS_FW_NV_ACK");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    if (g_GNSS_FW_NV_Context) {
      free((void *)g_GNSS_FW_NV_Context);
    }
    *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
    g_GNSS_FW_NV_Context = 0;
  }
}

uint64_t Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_VAR_ME_NV_RESTORE_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    if (byte_26A9C9F80)
    {
      byte_26A9C9F80 = 0;
      if (byte_26A9C9F81 > 2u)
      {
        *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
        g_GNSS_FW_NV_Context = 0;
        Gnm03_60BaseBandResetReq(6);
      }
      else
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v3 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV Restore failed, retry %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck", byte_26A9C9F81);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        Gnm55_SendVar_GNSS_FW_NV_Data(1);
      }
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm55_HandleVar_GNSS_FW_NV_RestoreNoAck", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm55_HandleBackupVar_GNSS_FW_NV(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (a2 > 8)
    {
      uint64_t v6 = (const void ***)&unk_26AA2D000;
      uint64_t v7 = p_MEBackupNVData;
      if (!p_MEBackupNVData) {
        operator new();
      }
      __int16 v8 = *(unsigned char **)p_MEBackupNVData;
      int v9 = a1[9];
      uint64_t v10 = a2 - 3;
      if (v10 >= 0xC)
      {
        uint64_t v11 = a1 + 11;
        int64_t v12 = v10 - 11;
        unsigned __int8 v14 = *(unsigned char **)(p_MEBackupNVData + 8);
        uint64_t v13 = *(void *)(p_MEBackupNVData + 16);
        if (v13 - (uint64_t)v14 >= v10 - 11)
        {
          __src = a1 + 11;
          if (v12 <= 0)
          {
            unsigned int v21 = *(unsigned char **)(p_MEBackupNVData + 8);
            if (&v14[-v12] < v14)
            {
              uint64_t v22 = 11 - v10;
              unsigned int v21 = *(unsigned char **)(p_MEBackupNVData + 8);
              do
                *v21++ = v14[v22++];
              while (v22);
            }
            *(void *)(v7 + 8) = v21;
            if (v14 != &v14[v12]) {
              memmove(&v14[v10 - 11], v14, 11 - v10);
            }
            memmove(v14, __src, v10 - 11);
          }
          else
          {
            memmove(v14, a1 + 11, v10 - 11);
            *(void *)(v7 + 8) = &v14[v10 - 11];
            uint64_t v6 = (const void ***)&unk_26AA2D000;
          }
        }
        else
        {
          uint64_t v15 = (char *)(v14 - v8);
          uint64_t v16 = v14 - v8 + v12;
          if (v16 < 0) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = v13 - (void)v8;
          if (2 * v17 > v16) {
            uint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v18 = v16;
          }
          int v44 = a1[9];
          if (v18)
          {
            uint64_t v19 = (char *)operator new(v18);
            uint64_t v11 = a1 + 11;
            uint64_t v20 = v19;
          }
          else
          {
            uint64_t v20 = 0;
          }
          unsigned int v23 = &v15[(void)v20];
          memcpy(&v15[(void)v20], v11, v12);
          if (v8 == v14)
          {
            int v24 = v14;
            uint64_t v25 = &v15[(void)v20];
          }
          else
          {
            do
            {
              v15[(void)v20 - 1] = v15[(void)(v8 - 1)];
              --v15;
            }
            while (v15);
            int v24 = *(unsigned char **)(v7 + 8);
            __int16 v8 = v24;
            uint64_t v25 = v20;
          }
          double v26 = &v23[v12];
          unsigned int v27 = &v20[v18];
          uint64_t v28 = v24 - v14;
          if (v8 != v14)
          {
            uint64_t v29 = v14;
            size_t v30 = v24 - v14;
            uint64_t v31 = v25;
            memmove(v26, v29, v30);
            uint64_t v25 = v31;
          }
          uint64_t v32 = *(void **)v7;
          *(void *)uint64_t v7 = v25;
          *(void *)(v7 + 8) = &v26[v28];
          *(void *)(v7 + 16) = v27;
          uint64_t v6 = (const void ***)&unk_26AA2D000;
          int v9 = v44;
          if (v32) {
            operator delete(v32);
          }
        }
      }
      if (v9 == 255)
      {
        int v34 = a1[a2 - 4];
        int v35 = a1[a2 - 5];
        if ((gnssOsa_clearNV(1) & 1) == 0 && g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v36 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx clear\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNM", 87, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        char v37 = gnssOsa_storeBufferToNv(1, *v6[492], (unsigned char *)v6[492][1] - (unsigned char *)*v6[492]);
        if (g_LbsOsaTrace_Config < 2) {
          char v38 = 1;
        }
        else {
          char v38 = v37;
        }
        if ((v38 & 1) == 0)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v39 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS GNSS FW NV:ReqWrite,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNM", 87, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570, a2 - 14);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        double v40 = v6[492];
        unsigned int v41 = (void *)*v40;
        v40[1] = *v40;
        if (v41) {
          operator delete(v41);
        }
        MEMORY[0x263E6EDB0](v40, 0x10C402FEFCB83);
        v6[492] = 0;
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v42 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FW NV:WriteSuccess Len,%uB, NVChecksum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNM", 73, "Gnm55_HandleBackupVar_GNSS_FW_NV", a2 - 14, v35 | (v34 << 8));
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
      }
      else if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v33 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FW NV:WriteSuccess Len,%uB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNM", 73, "Gnm55_HandleBackupVar_GNSS_FW_NV", a2 - 14);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx length err\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null buffer\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm55_HandleBackupVar_GNSS_FW_NV", 1570);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t Gnm55_HandleXMessages(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: X class response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm55_HandleXMessages");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  unsigned int v5 = a1[3];
  if (v5 > 0x4D)
  {
    if (v5 == 86)
    {
      Gnm55_HandleRespVar_GNSS_FW_NV_ACK(a1);
    }
    else if (v5 == 78)
    {
      Gnm55_HandleRespNo_GNSS_FW_NV_ACK(a1);
    }
  }
  else
  {
    if (v5 == 69)
    {
      Gnm55_HandleBackupVar_GNSS_FW_NV(a1, a2);
    }
    else if (v5 != 77)
    {
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fixed NV response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm55_HandleXMessages");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  return 0;
}

void Gnm55_RestoreVar_GNSS_FW_NV(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV data resotre,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm55_RestoreVar_GNSS_FW_NV", a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV:GOOH Occured\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm55_RestoreVar_GNSS_FW_NV");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    gnssOsa_clearNV(1);
  }
  *(_DWORD *)((char *)&g_GNSS_FW_NV_Context + 7) = 0;
  g_GNSS_FW_NV_Context = 0;
  if ((Gnm55_SendVar_GNSS_FW_NV_Data(1) & 1) == 0 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV:Sending error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm55_RestoreVar_GNSS_FW_NV");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

uint64_t Gnm55_ClearVar_GNSS_FW_NV(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS FW NV:Clearing GNSS FW NV file\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm55_ClearVar_GNSS_FW_NV");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v1 = gnssOsa_clearNV(1);
  if ((v1 & 1) == 0 && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS FW NV File\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 69, "Gnm55_ClearVar_GNSS_FW_NV", 1573);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v1;
}

uint64_t GN_AGPS_Set_Eph_El(unsigned __int8 *a1)
{
  v29[15] = *MEMORY[0x263EF8340];
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Eph_El")) {
    return 0;
  }
  uint64_t v2 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v2 + 16) && *(int *)v2 >= 3) {
    int v3 = (int)*(double *)(v2 + 40) + 604800 * *(__int16 *)(v2 + 32);
  }
  else {
    int v3 = 0;
  }
  __int16 v17 = *((_WORD *)a1 + 17);
  int v20 = *((_DWORD *)a1 + 17);
  __int16 v21 = *((_WORD *)a1 + 36);
  int v4 = a1[74] ? 5 : 3;
  uint64_t v14 = *(void *)(a1 + 1);
  long long v15 = *(_OWORD *)(a1 + 10);
  uint64_t v16 = *(void *)(a1 + 26);
  long long v18 = *(_OWORD *)(a1 + 36);
  long long v19 = *(_OWORD *)(a1 + 52);
  v13[0] = v3;
  v13[1] = v4;
  int v5 = *a1;
  if (g_Logging_Cfg < 5) {
    EvLog_d("GN_AGPS_Set_Eph_El: ", v5);
  }
  else {
    EvLog_GPS_IntEph("GN_AGPS_Set_Eph_El: ", v5, (uint64_t)v13);
  }
  uint64_t v6 = *a1;
  if (!Is_GPS_IntEph_Valid((uint64_t)"GN_AGPS_Set_Eph_El: ", v6, (uint64_t)v13)) {
    return 0;
  }
  memset(v29, 0, 115);
  GPS_EphInt2Bin((uint64_t)v13, (uint64_t)v29);
  long long v23 = 0u;
  *(_OWORD *)double v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  uint64_t v22 = v29[0];
  LOBYTE(v23) = v29[1];
  *(_WORD *)((char *)&v23 + 1) = *(_WORD *)((char *)&v29[1] + 1);
  unsigned int v7 = 21;
  uint64_t v8 = 11;
  uint64_t v9 = 24;
  do
  {
    uint64_t v10 = (char *)&v22 + v8;
    *uint64_t v10 = *((unsigned char *)v29 + v9);
    *(_WORD *)(v10 + 1) = *(_WORD *)((char *)v29 + v9 + 1);
    --v7;
    v8 += 3;
    v9 += 4;
  }
  while (v7 > 1);
  *(_WORD *)&v26[15] = WORD2(v29[13]);
  int v27 = *(_DWORD *)((char *)&v29[13] + 6);
  char v28 = BYTE2(v29[14]);
  uint64_t v11 = API_Set_GPS_CBinEph("GN_AGPS_Set_Eph_El: ", v6, (unsigned int *)&v22);
  if (v11) {
    Debug_Log_GPS_Eph(1, v6, (uint64_t)&v22);
  }
  return v11;
}

uint64_t GN_AGPS_Set_Alm(uint64_t a1, uint64_t a2)
{
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Alm")) {
    return 0;
  }
  if ((a1 - 1) < 0x20u)
  {
    uint64_t v4 = p_NA + 36 * (a1 - 1);
    uint64_t v5 = *(void *)(a2 + 22);
    *(_OWORD *)(v4 + 3270) = *(_OWORD *)(a2 + 6);
    *(void *)(v4 + 3286) = v5;
    *(_DWORD *)(v4 + 3260) = *(_DWORD *)a2;
    *(_WORD *)(v4 + 3268) = *(_WORD *)(a2 + 4);
    if (*(unsigned char *)(a2 + 30)) {
      int v6 = 5;
    }
    else {
      int v6 = 3;
    }
    *(_DWORD *)(v4 + 3264) = v6;
    uint64_t v7 = 1;
    Debug_Log_GPS_Alm(1, a1, v4 + 3260);
    EvLog_nd("GN_AGPS_Set_Alm: ", 2, v8, a1, *(unsigned int *)(p_NA + 36 * (a1 - 1) + 3260));
    unsigned int v9 = *(unsigned __int16 *)(a2 + 4);
    if (v9 <= 0x3FF)
    {
      if (v9 < 0x100)
      {
        unsigned int v15 = *(__int16 *)(*(void *)(p_api + 72) + 1726);
        uint64_t v16 = *(void *)(p_api + 48);
        if (*(unsigned char *)(v16 + 16)
          && *(int *)v16 >= 3
          && (int v17 = (int)*(double *)(v16 + 40) + 604800 * *(__int16 *)(v16 + 32), v17 > 619315199))
        {
          unsigned int v18 = v17 / 0x93A80u;
        }
        else
        {
          unsigned int v18 = v15 + 128;
        }
        __int16 v19 = (v15 + (v15 >> 23)) & 0xFF00;
        signed int v20 = v9 + v19;
        signed int v21 = v18 - 128;
        if (v20 > v21) {
          LOWORD(v21) = v9 + v19;
        }
        LOWORD(v9) = v19 + v9 + ((v21 - v20 + 255) & 0xFF00);
      }
      else
      {
        LOWORD(v9) = Complete_WeekNo(v9);
      }
    }
    uint64_t v22 = p_NA;
    *(_WORD *)(p_NA + 36 * (a1 - 1) + 3268) = v9;
    *(unsigned char *)(v22 + (a1 - 1) + 44) = 1;
    return v7;
  }
  if ((a1 + 63) >= 0xAu)
  {
    EvCrt_v("GN_AGPS_Set_Alm:  FAILED:  SV = %d, Out of range !", a1);
    return 0;
  }
  uint64_t v10 = p_NA + 36 * (a1 + 63);
  uint64_t v11 = *(void *)(a2 + 22);
  *(_OWORD *)(v10 + 5222) = *(_OWORD *)(a2 + 6);
  *(void *)(v10 + 5238) = v11;
  *(_DWORD *)(v10 + 5212) = *(_DWORD *)a2;
  *(_WORD *)(v10 + 5220) = *(_WORD *)(a2 + 4);
  if (*(unsigned char *)(a2 + 30)) {
    int v12 = 5;
  }
  else {
    int v12 = 3;
  }
  *(_DWORD *)(v10 + 5216) = v12;
  uint64_t v7 = 1;
  Debug_Log_GPS_Alm(1, a1, v10 + 5212);
  EvLog_nd("GN_AGPS_Set_Alm: ", 2, v13, a1, *(unsigned int *)(p_NA + 36 * (a1 + 63) + 5212));
  unsigned int v14 = *(unsigned __int16 *)(a2 + 4);
  if (v14 <= 0x3FF)
  {
    if (v14 < 0x100)
    {
      unsigned int v23 = *(__int16 *)(*(void *)(p_api + 72) + 1726);
      uint64_t v24 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v24 + 16)
        && *(int *)v24 >= 3
        && (int v25 = (int)*(double *)(v24 + 40) + 604800 * *(__int16 *)(v24 + 32), v25 > 619315199))
      {
        unsigned int v26 = v25 / 0x93A80u;
      }
      else
      {
        unsigned int v26 = v23 + 128;
      }
      __int16 v27 = (v23 + (v23 >> 23)) & 0xFF00;
      signed int v28 = v14 + v27;
      signed int v29 = v26 - 128;
      if (v28 > v29) {
        LOWORD(v29) = v14 + v27;
      }
      LOWORD(v14) = v27 + v14 + ((v29 - v28 + 255) & 0xFF00);
    }
    else
    {
      LOWORD(v14) = Complete_WeekNo(v14);
    }
  }
  uint64_t v30 = p_NA;
  *(_WORD *)(p_NA + 36 * (a1 + 63) + 5220) = v14;
  *(unsigned char *)(v30 + (a1 + 63) + 86) = 1;
  return v7;
}

uint64_t Complete_WeekNo(unsigned int a1)
{
  if (a1 > 0x3FF)
  {
    unsigned __int16 v5 = a1;
  }
  else
  {
    uint64_t v1 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v1 + 16)
      && *(int *)v1 >= 3
      && (int v2 = (int)*(double *)(v1 + 40) + 604800 * *(__int16 *)(v1 + 32), v2 > 619315199))
    {
      unsigned int v3 = v2 / 0x93A80u;
    }
    else
    {
      unsigned int v3 = *(__int16 *)(*(void *)(p_api + 72) + 1726) + 512;
    }
    int v4 = v3 - 512;
    do
    {
      unsigned __int16 v5 = a1;
      a1 += 1024;
    }
    while (v4 > v5);
  }
  return (__int16)v5;
}

uint64_t GN_AGPS_Set_Ion(unsigned int *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Ion")) {
    return 0;
  }
  uint64_t v3 = *((char *)a1 + 4);
  uint64_t v4 = *((char *)a1 + 5);
  char v5 = *((unsigned char *)a1 + 6);
  if (!(v3 | v4))
  {
    if (!*((unsigned char *)a1 + 6))
    {
      if (!*((unsigned char *)a1 + 7)
        && !*((unsigned char *)a1 + 8)
        && !*((unsigned char *)a1 + 9)
        && !*((unsigned char *)a1 + 10)
        && !*((unsigned char *)a1 + 11))
      {
        unsigned int v9 = "GN_AGPS_Set_Ion: Rejected: ALL ZERO";
        goto LABEL_14;
      }
      char v5 = 0;
    }
    uint64_t v4 = 0;
  }
  EvLog_nd("GN_AGPS_Set_Ion: ", 10, v2, *a1, v3, v4, v5, *((char *)a1 + 7), *((char *)a1 + 8), *((char *)a1 + 9), *((char *)a1 + 10), *((char *)a1 + 11), *((unsigned __int8 *)a1 + 12));
  uint64_t v6 = p_NA;
  uint64_t v7 = p_NA + 660;
  *(_DWORD *)(p_NA + 660) = *a1;
  *(void *)(v7 + 8) = *(void *)(a1 + 1);
  if (!*((unsigned char *)a1 + 12))
  {
    unsigned int v9 = "GN_AGPS_Set_Ion: Rejected: Assisted source not allowed";
LABEL_14:
    EvLog(v9);
    return 0;
  }
  *(_DWORD *)(v6 + 664) = 5;
  uint64_t v8 = 1;
  Debug_Log_GPS_Klob(1, v7);
  *(unsigned char *)(p_NA + 10) = 1;
  return v8;
}

uint64_t GN_AGPS_Set_UTC(unsigned int *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_UTC")) {
    return 0;
  }
  EvLog_nd("GN_AGPS_Set_UTC: ", 10, v2, *a1, a1[1], a1[2], *((unsigned __int8 *)a1 + 12), *((unsigned __int8 *)a1 + 13), *((char *)a1 + 14), *((unsigned __int8 *)a1 + 15), *((unsigned __int8 *)a1 + 16), *((char *)a1 + 17), *((unsigned __int8 *)a1 + 18));
  unsigned int v3 = *((unsigned __int8 *)a1 + 12);
  if (v3 < 0x94)
  {
    unsigned int v4 = *((char *)a1 + 14);
    if (v4 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLS = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    unsigned int v5 = *((unsigned __int8 *)a1 + 16);
    if (v5 >= 8)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: DN = %d >7, Out of range!");
      return 0;
    }
    unsigned int v6 = *((char *)a1 + 17);
    if (v6 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLSF = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    if ((int)(v6 - v4) >= 0) {
      unsigned int v7 = v6 - v4;
    }
    else {
      unsigned int v7 = v4 - v6;
    }
    if (v7 >= 2)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: (dtLSF-dtLS) = %d <-1 or >+1, Unrealistic difference!");
      return 0;
    }
    int v8 = *((unsigned __int8 *)a1 + 14);
    int v9 = *((unsigned __int8 *)a1 + 17);
    if (v9 != v8)
    {
      uint64_t v10 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v10 + 16) && *(int *)v10 >= 3)
      {
        unint64_t v11 = 1861606989 * ((int)*(double *)(v10 + 40) + 604800 * *(__int16 *)(v10 + 32));
        int v12 = (v11 >> 63) + (SHIDWORD(v11) >> 18);
      }
      else
      {
        int v12 = 0;
      }
      if (Is_Future_Leap_Sec_Date_Not_Valid(v12, 1, *((unsigned __int8 *)a1 + 15), *((unsigned char *)a1 + 16)))
      {
        EvCrt_v("GN_AGPS_Set_UTC: FAILED: Invalid UTC Future Leap Second date %d  %d %d %d");
        return 0;
      }
    }
    unsigned int v15 = a1[1];
    unsigned int v16 = a1[2];
    if (v15)
    {
      char v17 = *((unsigned char *)a1 + 13);
    }
    else
    {
      char v17 = *((unsigned char *)a1 + 13);
      if (!(v8 | v3 | v9) && !v16 && !*((unsigned char *)a1 + 13))
      {
        if (!(*((unsigned __int8 *)a1 + 15) | v5))
        {
          __int16 v19 = "GN_AGPS_Set_UTC: Rejected: ALL ZERO";
LABEL_34:
          EvLog(v19);
          return 0;
        }
        char v17 = 0;
      }
    }
    uint64_t v18 = p_NA;
    *(_DWORD *)(p_NA + 676) = *a1;
    *(_DWORD *)(v18 + 684) = v15;
    *(_DWORD *)(v18 + 688) = v16;
    *(unsigned char *)(v18 + 692) = v3;
    *(unsigned char *)(v18 + 693) = v17;
    *(unsigned char *)(v18 + 694) = v4;
    *(unsigned char *)(v18 + 695) = *((unsigned char *)a1 + 15);
    *(unsigned char *)(v18 + 696) = v5;
    *(unsigned char *)(v18 + 697) = v6;
    if (*((unsigned char *)a1 + 18))
    {
      *(_DWORD *)(v18 + 680) = 5;
      uint64_t v13 = 1;
      Debug_Log_GPS_UTC(1, v18 + 676);
      *(unsigned char *)(p_NA + 11) = 1;
      return v13;
    }
    __int16 v19 = "GN_AGPS_Set_UTC: Rejected: Assisted source not allowed";
    goto LABEL_34;
  }
  EvCrt_v("GN_AGPS_Set_UTC: FAILED: Tot = %d >=148, >604800s, Out of range!");
  return 0;
}

uint64_t GN_AGPS_Set_Ref_Time(uint64_t a1)
{
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Time");
  if (result)
  {
    EvLog_v("GN_AGPS_Set_Ref_Time:  %u  %u  %d  %d", *(_DWORD *)a1, *(_DWORD *)(a1 + 4), *(unsigned __int16 *)(a1 + 8), *(unsigned __int16 *)(a1 + 10));
    int v3 = *(_DWORD *)a1;
    uint64_t v4 = p_NA;
    *(_DWORD *)(p_NA + 404) = *(_DWORD *)a1;
    int v5 = Complete_WeekNo(*(unsigned __int16 *)(a1 + 8));
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    *(_WORD *)(v4 + 416) = v5;
    *(double *)(v4 + 408) = (double)v6 * 0.001;
    unsigned int v7 = *(unsigned __int16 *)(a1 + 10);
    *(double *)(v4 + 424) = (double)v7 * 0.001;
    *(unsigned char *)(v4 + 2) = 1;
    if (v3)
    {
      if (v6 <= 0x240C83FF)
      {
        if (v5 > 1023)
        {
          if (v7)
          {
            if ((int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v3) < 180001)
            {
              API_Set_Ref_Time(*(_DWORD *)(p_NA + 404), *(double *)(p_NA + 408), *(_WORD *)(p_NA + 416), *(double *)(p_NA + 424));
              Debug_Log_AGPS_Ref_Time(a1);
              return 1;
            }
            *(unsigned char *)(p_NA + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u, too old by %d ms");
          }
          else
          {
            *(unsigned char *)(v4 + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: RMS_ms = %d ==0, Out of range!");
          }
        }
        else
        {
          *(unsigned char *)(v4 + 2) = 0;
          EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: WeekNo = %d <1024, Out of range!");
        }
      }
      else
      {
        *(unsigned char *)(v4 + 2) = 0;
        EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: TOW_ms = %d >%d, Out of range!");
      }
    }
    else
    {
      *(unsigned char *)(v4 + 2) = 0;
      EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u ==0, Out of range!");
    }
    return 0;
  }
  return result;
}

uint64_t GN_AGPS_Set_Ref_Pos(uint64_t a1)
{
  v44[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Pos");
  if (result)
  {
    EvLog_v("GN_AGPS_Set_Ref_Pos: %u LL %g %g Sigma %d %d %d Ht %d %g %d C %d  S %d 0x%X", *(_DWORD *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), (int)*(double *)(a1 + 24), (int)*(double *)(a1 + 32), *(__int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42), *(double *)(a1 + 48), (int)*(double *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(void *)(a1 + 72));
    double v3 = *(double *)(a1 + 8);
    if (v3 < -90.0 || v3 > 90.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
      return 0;
    }
    double v4 = *(double *)(a1 + 16);
    if (v4 < -180.0 || v4 > 360.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
      return 0;
    }
    v44[0] = 0.0;
    if (R8_EQ((const double *)(a1 + 24), v44))
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMadouble j = %g ==0, Out of range!");
      return 0;
    }
    v44[0] = 0.0;
    if (R8_EQ((const double *)(a1 + 32), v44))
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMiuint64_t n = %g ==0, Out of range!");
      return 0;
    }
    if ((unsigned __int16)(*(_WORD *)(a1 + 40) - 361) <= 0xFDE2u)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMajBrg = %d <-180 or >+360, Out of range!");
      return 0;
    }
    int v5 = *(unsigned __int8 *)(a1 + 42);
    if (*(unsigned char *)(a1 + 42))
    {
      double v6 = *(double *)(a1 + 48);
      if (v6 < -500.0 || v6 > 6000.0)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Height = %g <%d or >%d, Out of range!");
        return 0;
      }
      if (*(double *)(a1 + 56) <= 0.0)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_Height = %g <=0, Invalid value!");
        return 0;
      }
    }
    unsigned int v7 = *(_DWORD *)(a1 + 64);
    if (v7 >= 5)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Trust = %d <GN_AGPS_TRUST_UNKNOWN or >GN_AGPS_TRUST_HIGH, Out of range!");
      return 0;
    }
    unsigned int v8 = *(_DWORD *)(a1 + 68);
    if (v8 >= 9)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Source = %d <GN_AGPS_SRC_UNKNOWN or >GN_AGPS_SRC_EXT, Out of range!");
      return 0;
    }
    double v9 = v3 * 0.0174532925;
    double v10 = v4 * 0.0174532925;
    double v11 = *(double *)(a1 + 24);
    double v12 = v11 * v11;
    uint64_t v13 = p_NA;
    LODWORD(v14) = *(_DWORD *)a1;
    if (*(unsigned char *)(p_NA + 8))
    {
      long double v15 = *(double *)(p_NA + 552);
      long double v16 = (v9 - v15) * 6378137.0;
      double v17 = (v10 - *(double *)(p_NA + 560)) * 6378137.0;
      long double v18 = cos(v15);
      double v19 = v18 * v17 * (v18 * v17) + v16 * v16;
      int v20 = v14 - *(_DWORD *)(v13 + 544);
      double v21 = *(double *)(v13 + 600);
      double v22 = v21 + (double)v20 * 0.015 * ((double)v20 * 0.015);
      double v23 = (v12 + v22) * 9.0;
      if (v7 <= 2)
      {
        signed int v24 = *(_DWORD *)(v13 + 636);
        if ((int)v7 < v24)
        {
          EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Trust %d worse than existing, %d dAge %d dPos %f Sig %f %f %f", v7, v24, v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
          BOOL v25 = v19 < 160000.0 && v19 < v23;
          if (!v25 || *(int *)(a1 + 64) <= 1 || !*(unsigned char *)(a1 + 42)) {
            goto LABEL_65;
          }
          if (!*(unsigned char *)(p_NA + 9)) {
            goto LABEL_68;
          }
LABEL_41:
          if (*(_DWORD *)(a1 + 68) != 7)
          {
LABEL_65:
            Debug_Log_AGPS_Ref_Pos(a1);
            return 1;
          }
          int v26 = *(_DWORD *)a1 - *(_DWORD *)(p_NA + 544);
          double v27 = *(double *)(p_NA + 624);
          double v28 = v27 + (double)v26 * 0.0005 * ((double)v26 * 0.0005);
          double v29 = *(double *)(a1 + 56);
          if (v29 * v29 <= v28) {
            goto LABEL_67;
          }
          double v30 = *(double *)(a1 + 48) - *(double *)(p_NA + 568);
          double v31 = v30 * v30;
          double v32 = (v29 * v29 + v28) * 9.0;
          double v33 = sqrt(v31);
          double v34 = sqrt(v27);
          double v35 = sqrt(v28);
          if (v31 < v32)
          {
            EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude Ignored: Worse but consistent, dAge %d dAlt %f Sig %f %f %f", v26, v33, v29, v34, v35);
            goto LABEL_65;
          }
          EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing inconsistent Prev Altitude, dAge %d dAlt %f Sig %f %f %f", v26, v33, v29, v34, v35);
          if (*(unsigned char *)(p_NA + 9)) {
LABEL_67:
          }
            EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previous one, PrevAlt %f Sig %f CurrentAlt %f Sig %f");
          else {
LABEL_68:
          }
            EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previously missing one, CurrentAlt %f Sig %f");
          uint64_t v43 = p_NA;
          *(unsigned char *)(p_NA + 9) = 1;
          *(void *)(v43 + 568) = *(void *)(a1 + 48);
          *(double *)(v43 + 624) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
          goto LABEL_65;
        }
      }
      if (v12 > v22)
      {
        if (v19 < v23)
        {
          EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Worse but consistent, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
          if (!v5 || v19 >= 160000.0) {
            goto LABEL_65;
          }
          goto LABEL_41;
        }
        if ((v8 == 4 || v8 == 2) && *(_DWORD *)(v13 + 640) == 7)
        {
          EvCrt_v("GN_AGPS_Set_Ref_Pos: E911 Ref Pos replacing inconsistent OS Ref Pos, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
          uint64_t v13 = p_NA;
          LODWORD(v14) = *(_DWORD *)a1;
        }
      }
    }
    *(unsigned char *)(v13 + 8) = 1;
    if (!v14)
    {
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v13 = p_NA;
    }
    *(_DWORD *)(v13 + 544) = v14;
    *(double *)(v13 + 552) = v9;
    *(double *)(v13 + 560) = v10;
    *(double *)(v13 + 576) = v12;
    double v36 = *(double *)(a1 + 32) * *(double *)(a1 + 32);
    *(double *)(v13 + 584) = v36;
    double v37 = (double)*(__int16 *)(a1 + 40) * 0.0174532925;
    *(double *)(v13 + 592) = v37;
    *(double *)(v13 + 600) = v12;
    *(double *)(v13 + 608) = v36;
    *(double *)(v13 + 616) = v37;
    if (*(unsigned char *)(a1 + 42))
    {
      *(unsigned char *)(v13 + 9) = 1;
      *(void *)(v13 + 568) = *(void *)(a1 + 48);
      *(double *)(v13 + 624) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
    }
    int v38 = *(_DWORD *)(a1 + 64);
    if (!**((_DWORD **)&xmmword_26AA2DE48 + 1))
    {
      unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v40 = v39 - *(_DWORD *)a1;
      uint64_t v13 = p_NA;
      *(_DWORD *)(p_NA + 544) = v39;
      *(float64x2_t *)(v13 + 576) = vaddq_f64(*(float64x2_t *)(v13 + 576), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v40 * 0.015 * ((double)v40 * 0.015)), 0));
      *(double *)(v13 + 624) = (double)v40 * 0.0005 * ((double)v40 * 0.0005) + *(double *)(v13 + 624);
      unsigned int v41 = v40 >= 0 ? v40 : -v40;
      if (v41 >= 0x249F1 && v38 >= 2)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: Very old Reference Position demoted to Very Low Trust, Age_ms %d", v40);
        uint64_t v13 = p_NA;
        int v38 = 1;
      }
    }
    *(_DWORD *)(v13 + 632) = v38;
    *(_DWORD *)(v13 + 636) = v38;
    int v42 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(v13 + 640) = v42;
    *(void *)(v13 + 648) = *(void *)(a1 + 72);
    if (v42 == 7 && *(double *)(a1 + 24) < 400.0) {
      *(unsigned char *)(v13 + 656) = 0;
    }
    else {
      *(unsigned char *)(v13 + 656) = 2;
    }
    goto LABEL_65;
  }
  return result;
}

unint64_t GN_AGPS_Mark_Response_Sent(unsigned int a1, unsigned int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  GNSS_Write_GNB_Ctrl((char **)qword_26AA2DF10);
  GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
  GNSS_Event_Log_Ctl(qword_26AA2DF28);
  GNSS_Nav_Debug_Ctl(qword_26AA2DF20);
  double v4 = __src;
  double v34 = __src;
  double v35 = v37;
  double v33 = __src;
  char v5 = 10;
  uint64_t v6 = 1u;
  do
  {
    double v32 = v4 + 1;
    *double v4 = v5;
    double v4 = v32;
    if (v32 >= v35)
    {
      double v4 = v34;
      double v32 = v34;
    }
    char v5 = str_58_0[v6++];
  }
  while (v6 != 35);
  sprintf_10u(&v32, a1);
  unsigned int v7 = v32++;
  *unsigned int v7 = 32;
  if (v32 >= v35) {
    double v32 = v34;
  }
  sprintf_10u(&v32, a2);
  uint64_t v8 = 0;
  char v9 = 32;
  double v10 = v32;
  do
  {
    double v32 = v10 + 1;
    *double v10 = v9;
    double v10 = v32;
    if (v32 >= v35)
    {
      double v10 = v34;
      double v32 = v34;
    }
    char v9 = str_59_0[++v8];
  }
  while (v8 != 8);
  unint64_t result = API_Query_Config((uint64_t)v37);
  if (v38 >= 1)
  {
    double v12 = (unint64_t *)qword_26AA2DF28;
    int v13 = (unsigned __int16)((_WORD)v32 - (_WORD)v33);
    unint64_t v14 = *(void *)(qword_26AA2DF28 + 24);
    unint64_t result = *(void *)qword_26AA2DF28;
    long double v15 = __src;
    do
    {
      int v16 = v14 - result;
      if (v13 >= v16) {
        int v17 = v16;
      }
      else {
        int v17 = v13;
      }
      memcpy((void *)result, v15, v17);
      unint64_t result = *v12 + v17;
      unint64_t *v12 = result;
      unint64_t v14 = v12[3];
      if (result >= v14)
      {
        unint64_t result = v12[2];
        unint64_t *v12 = result;
      }
      v15 += v17;
      BOOL v18 = __OFSUB__(v13, v17);
      v13 -= v17;
    }
    while (!((v13 < 0) ^ v18 | (v13 == 0)));
    if (v38 >= 4)
    {
      double v19 = (void *)qword_26AA2DF30;
      int v20 = (unsigned __int16)((_WORD)v32 - (_WORD)v33);
      unint64_t v21 = *(void *)(qword_26AA2DF30 + 24);
      double v22 = *(void **)qword_26AA2DF30;
      double v23 = __src;
      do
      {
        int v24 = v21 - v22;
        if (v20 >= v24) {
          int v25 = v24;
        }
        else {
          int v25 = v20;
        }
        memcpy(v22, v23, v25);
        double v22 = (void *)(*v19 + v25);
        *double v19 = v22;
        unint64_t v21 = v19[3];
        if ((unint64_t)v22 >= v21)
        {
          double v22 = (void *)v19[2];
          *double v19 = v22;
        }
        v23 += v25;
        BOOL v18 = __OFSUB__(v20, v25);
        v20 -= v25;
      }
      while (!((v20 < 0) ^ v18 | (v20 == 0)));
      int v26 = (unint64_t *)qword_26AA2DF20;
      int v27 = (unsigned __int16)((_WORD)v32 - (_WORD)v33);
      unint64_t v28 = *(void *)(qword_26AA2DF20 + 24);
      unint64_t result = *(void *)qword_26AA2DF20;
      double v29 = __src;
      do
      {
        int v30 = v28 - result;
        if (v27 >= v30) {
          int v31 = v30;
        }
        else {
          int v31 = v27;
        }
        memcpy((void *)result, v29, v31);
        unint64_t result = *v26 + v31;
        unint64_t *v26 = result;
        unint64_t v28 = v26[3];
        if (result >= v28)
        {
          unint64_t result = v26[2];
          unint64_t *v26 = result;
        }
        v29 += v31;
        BOOL v18 = __OFSUB__(v27, v31);
        v27 -= v31;
      }
      while (!((v27 < 0) ^ v18 | (v27 == 0)));
    }
  }
  return result;
}

uint64_t gnss::GnssAdaptDevice::decodeSuplInit()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unsigned int v0 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v1 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "decodeSuplInit");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    unsigned int v0 = g_LbsOsaTrace_Config;
  }
  if (v0 >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SUPL not supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 87, "decodeSuplInit", 1026);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "decodeSuplInit");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  return 0;
}

void gnss::GnssAdaptDevice::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "setSuplInit");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(void *)(a4 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a4);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v10, (uint64_t)"setSuplInit");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplInit", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setSuplInit");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setSuplInit", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C313F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setSuplLocationIdNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setSuplLocationIdNeededReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setSuplLocationIdNeededReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setSuplLocationIdNeededReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C31598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setSuplLocationId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setSuplLocationId");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setSuplLocationId", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setSuplLocationId", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C3173C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::abortSuplSession(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v5, (uint64_t)"abortSuplSession");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v5);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "abortSuplSession", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "abortSuplSession", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C318DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setSuplSessionStatusReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setSuplSessionStatusReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setSuplSessionStatusReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setSuplSessionStatusReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C31A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setSuplWlanMeasurementNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setSuplWlanMeasurementNeededReport");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setSuplWlanMeasurementNeededReport", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setSuplWlanMeasurementNeededReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C31C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setSuplWlanMeasurements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setSuplWlanMeasurements");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setSuplWlanMeasurements", 1026);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setSuplWlanMeasurements", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C31DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t NK_Check_Num_SV_Res(uint64_t result, int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  uint64_t v10 = 0;
  double v11 = (_OWORD *)(a7 + 312);
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  int32x4_t v15 = 0uLL;
  do
  {
    uint8x16_t v16 = (uint8x16_t)v11[v10];
    uint16x8_t v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
    uint16x8_t v18 = vmovl_high_u8(v16);
    int32x4_t v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v18);
    int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v18.i8);
    int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v17);
    int32x4_t v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v17.i8);
    ++v10;
  }
  while (v10 != 8);
  uint64_t v19 = 0;
  *(unsigned char *)(a7 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v12, v14), vaddq_s32(v13, v15)));
  int v20 = (_OWORD *)(a10 + 312);
  int32x4_t v21 = 0uLL;
  int32x4_t v22 = 0uLL;
  int32x4_t v23 = 0uLL;
  int32x4_t v24 = 0uLL;
  do
  {
    uint8x16_t v25 = (uint8x16_t)v20[v19];
    uint16x8_t v26 = vmovl_u8(*(uint8x8_t *)v25.i8);
    uint16x8_t v27 = vmovl_high_u8(v25);
    int32x4_t v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v27);
    int32x4_t v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v27.i8);
    int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v26);
    int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v26.i8);
    ++v19;
  }
  while (v19 != 8);
  uint64_t v28 = 0;
  *(unsigned char *)(a10 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v21, v23), vaddq_s32(v22, v24)));
  double v29 = (_OWORD *)(a8 + 312);
  int32x4_t v30 = 0uLL;
  int32x4_t v31 = 0uLL;
  int32x4_t v32 = 0uLL;
  int32x4_t v33 = 0uLL;
  do
  {
    uint8x16_t v34 = (uint8x16_t)v29[v28];
    uint16x8_t v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
    uint16x8_t v36 = vmovl_high_u8(v34);
    int32x4_t v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v36);
    int32x4_t v32 = (int32x4_t)vaddw_u16((uint32x4_t)v32, *(uint16x4_t *)v36.i8);
    int32x4_t v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v35);
    int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v35.i8);
    ++v28;
  }
  while (v28 != 8);
  LOBYTE(v37) = vaddvq_s32(vaddq_s32(vaddq_s32(v30, v32), vaddq_s32(v31, v33)));
  *(unsigned char *)(a8 + 3) = v37;
  unsigned int v38 = *(unsigned __int8 *)(a7 + 3);
  if (v38 < a3 || v38 <= 2 && (a4 & 1) == 0 && (!result || !a6 && a2))
  {
    *(unsigned char *)(a7 + 3) = 0;
    _OWORD *v11 = 0u;
    *(_OWORD *)(a7 + 328) = 0u;
    *(_OWORD *)(a7 + 344) = 0u;
    *(_OWORD *)(a7 + 360) = 0u;
    *(_OWORD *)(a7 + 376) = 0u;
    *(_OWORD *)(a7 + 392) = 0u;
    *(_OWORD *)(a7 + 408) = 0u;
    *(_OWORD *)(a7 + 424) = 0u;
    int v37 = *(unsigned __int8 *)(a8 + 3);
    if (v37 + *(unsigned __int8 *)(a10 + 3) < 3
      || (a9 <= 100000000.0 ? (BOOL v39 = a4 == 0) : (BOOL v39 = 1), !v39 ? (v40 = a5 <= 2) : (v40 = 1), v40))
    {
      LOBYTE(v37) = 0;
      *(unsigned char *)(a10 + 3) = 0;
      *int v20 = 0uLL;
      *(_OWORD *)(a10 + 328) = 0uLL;
      *(_OWORD *)(a10 + 344) = 0uLL;
      *(_OWORD *)(a10 + 360) = 0uLL;
      *(_OWORD *)(a10 + 376) = 0uLL;
      *(_OWORD *)(a10 + 392) = 0uLL;
      *(_OWORD *)(a10 + 408) = 0uLL;
      *(_OWORD *)(a10 + 424) = 0uLL;
      *(unsigned char *)(a8 + 3) = 0;
      *double v29 = 0uLL;
      *(_OWORD *)(a8 + 328) = 0uLL;
      *(_OWORD *)(a8 + 344) = 0uLL;
      *(_OWORD *)(a8 + 360) = 0uLL;
      *(_OWORD *)(a8 + 376) = 0uLL;
      *(_OWORD *)(a8 + 392) = 0uLL;
      *(_OWORD *)(a8 + 408) = 0uLL;
      *(_OWORD *)(a8 + 424) = 0uLL;
    }
  }
  if (a3 > (*(unsigned char *)(a10 + 3) + v37))
  {
    *(unsigned char *)(a10 + 3) = 0;
    *int v20 = 0u;
    *(_OWORD *)(a10 + 328) = 0u;
    *(_OWORD *)(a10 + 344) = 0u;
    *(_OWORD *)(a10 + 360) = 0u;
    *(_OWORD *)(a10 + 376) = 0u;
    *(_OWORD *)(a10 + 392) = 0u;
    *(_OWORD *)(a10 + 408) = 0u;
    *(_OWORD *)(a10 + 424) = 0u;
    *(unsigned char *)(a8 + 3) = 0;
    *double v29 = 0u;
    *(_OWORD *)(a8 + 328) = 0u;
    *(_OWORD *)(a8 + 344) = 0u;
    *(_OWORD *)(a8 + 360) = 0u;
    *(_OWORD *)(a8 + 376) = 0u;
    *(_OWORD *)(a8 + 392) = 0u;
    *(_OWORD *)(a8 + 408) = 0u;
    *(_OWORD *)(a8 + 424) = 0u;
  }
  return result;
}

uint64_t ARP_Calc(uint64_t result)
{
  if (*(char *)(result + 88) < 1)
  {
    float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x416312D000000000uLL);
    float64x2_t v4 = v3;
  }
  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 88) - 1;
    if (v1 >= 9) {
      unsigned int v1 = 9;
    }
    double v2 = g_ARP_cBiasP_Table[v1 + 10];
    float64x2_t v3 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 8)), v2);
    float64x2_t v4 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 24)), v2);
  }
  *(float64x2_t *)(result + 40) = v3;
  *(float64x2_t *)(result + 56) = v4;
  return result;
}

uint64_t HSW_SetPEConfig(uint64_t a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = GN_GPS_Set_Config(a1);
  if ((v3 & 1) == 0 && g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PE set config failed,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 77, "HSW_SetPEConfig", a2);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  return v3;
}

void HSW_InitConfiguration(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  *(_OWORD *)&qword_26A9A1960 = 0u;
  *(_OWORD *)&qword_26A9A1970 = 0u;
  g_HSWConfiguratiouint64_t n = 0;
  *(_DWORD *)&byte_26A9A1950 = 0;
  byte_26A9A1954 = 1;
  *(void *)&byte_26A9A1955 = 0;
  dword_26A9A195C = 0;
  qword_26A9A1980 = 0x3E8000A000000F0;
  word_26A9A1988 = 0;
  GN_GPS_Initialise(a1);
  LODWORD(g_HSWConfiguration) = 16843009;
  char IsStandaloneBeiDouSupportRequired = Ga05_GetIsStandaloneBeiDouSupportRequired();
  byte_26A9A1950 = 1;
  byte_26A9A1951 = IsStandaloneBeiDouSupportRequired;
  DebugFeaturesBitmasdouble k = Ga05_GetDebugFeaturesBitmask();
  BYTE6(g_HSWConfiguration) = 1;
  HIBYTE(g_HSWConfiguration) = (DebugFeaturesBitmask & 2) != 0;
  WORD2(g_HSWConfiguration) = 257;
  word_26A9A1952 = 0;
  long long v3 = *(_OWORD *)(qword_26AA2DEE0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_26AA2DEE0;
  long long v35 = v3;
  long long v4 = *(_OWORD *)(qword_26AA2DEE0 + 80);
  long long v6 = *(_OWORD *)(qword_26AA2DEE0 + 32);
  long long v5 = *(_OWORD *)(qword_26AA2DEE0 + 48);
  long long v38 = *(_OWORD *)(qword_26AA2DEE0 + 64);
  long long v39 = v4;
  long long v36 = v6;
  long long v37 = v5;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  *(_DWORD *)__str = 1;
  BYTE2(v35) = 1;
  WORD2(v36) = 200;
  BYTE8(v39) = 1;
  HSW_SetPEConfig((uint64_t)__str, "HSW_InitializePEDefaultsConfig");
  HSW_SetPEConstelCfg();
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Setting Platform group delay\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 68, "HSW_SetPlatformGroupDelay");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  double PlatformCalibrationL5GroupDelayMeters = Ga05_GetPlatformCalibrationL5GroupDelayMeters();
  BOOL v9 = GN_GPS_Set_Platform_Calibration_L5_Group_Delay(PlatformCalibrationL5GroupDelayMeters);
  char v10 = g_LbsOsaTrace_Config < 2 || v9;
  if ((v10 & 1) == 0)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: L5 GroupDelay set failed \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "HSW_SetPlatformGroupDelay");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  Ga05_GetPlatformCalibrationGlonassGroupDelayMeters();
  if (v33 == __p || (char *)v33 - (char *)__p != 112)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Glonass GroupDelay not set, data invalid\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "HSW_SetPlatformGroupDelay");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  else
  {
    BOOL v12 = GN_GPS_Set_Platform_Calibration_GLONASS_Group_Delays(__p);
    char v13 = g_LbsOsaTrace_Config < 2 || v12;
    if ((v13 & 1) == 0)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Glonass GroupDelay set failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "HSW_SetPlatformGroupDelay");
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  long long v16 = *(_OWORD *)(qword_26AA2DEE0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_26AA2DEE0;
  long long v35 = v16;
  long long v17 = *(_OWORD *)(qword_26AA2DEE0 + 80);
  long long v19 = *(_OWORD *)(qword_26AA2DEE0 + 32);
  long long v18 = *(_OWORD *)(qword_26AA2DEE0 + 48);
  long long v38 = *(_OWORD *)(qword_26AA2DEE0 + 64);
  long long v39 = v17;
  long long v36 = v19;
  long long v37 = v18;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  DWORD2(v36) = 0;
  if (g_LbsOsaTrace_Config == 1 && g_LbsOsaTrace_Config <= 5) {
    DWORD2(v36) = g_LbsOsaTrace_Config;
  }
  HSW_SetPEConfig((uint64_t)__str, "HSW_SetPELogCfg");
  HSW_SetRfBandCfg(1, 1);
  if ((Ga05_GetDebugFeaturesBitmask() & 0x400) != 0)
  {
    unsigned int PETestMode = Get_PETestMode();
    GN_GPS_Set_Test_Mode(PETestMode);
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    double v21 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v22 = byte_26A9A1956 ? 89 : 78;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SimulatedMode,%c\n", (unint64_t)v21, "GNM", 73, "HSW_InitConfiguration", v22);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v23 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v24 = 89;
      if (!byte_26A9A1957) {
        uint64_t v24 = 78;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:ExternalClock,%c\n", (unint64_t)v23, "GNM", 73, "HSW_InitConfiguration", v24);
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v25 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNM", 73, "HSW_InitConfiguration", (unsigned __int16)word_26A9A1958);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          double v26 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          uint64_t v27 = 89;
          if (!byte_26A9A1954) {
            uint64_t v27 = 78;
          }
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L1_Enable,%c\n", (unint64_t)v26, "GNM", 73, "HSW_InitConfiguration", v27);
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            double v28 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            uint64_t v29 = 89;
            if (!byte_26A9A1954) {
              uint64_t v29 = 78;
            }
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L5_Enable,%c\n", (unint64_t)v28, "GNM", 73, "HSW_InitConfiguration", v29);
            gnssOsa_PrintLog(__str, 4, 1, 0);
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v30 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:v_SWBuildGPSWeekNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNM", 73, "HSW_InitConfiguration", (unsigned __int16)word_26A9A195A);
              gnssOsa_PrintLog(__str, 4, 1, 0);
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v31 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNM", 73, "HSW_InitConfiguration", (unsigned __int16)word_26A9A1958);
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
            }
          }
        }
      }
    }
  }
}

void sub_263C32A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HSW_SetPEConstelCfg(void)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v0 = *(_OWORD *)(qword_26AA2DEE0 + 16);
  long long v25 = *(_OWORD *)qword_26AA2DEE0;
  long long v26 = v0;
  long long v1 = *(_OWORD *)(qword_26AA2DEE0 + 80);
  long long v3 = *(_OWORD *)(qword_26AA2DEE0 + 32);
  long long v2 = *(_OWORD *)(qword_26AA2DEE0 + 48);
  long long v29 = *(_OWORD *)(qword_26AA2DEE0 + 64);
  long long v30 = v1;
  long long v27 = v3;
  long long v28 = v2;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)&v25);
  BYTE11(v25) = BYTE1(g_HSWConfiguration);
  BYTE4(v25) = g_HSWConfiguration;
  BYTE12(v25) = BYTE3(g_HSWConfiguration);
  BYTE5(v25) = BYTE2(g_HSWConfiguration);
  BYTE8(v25) = byte_26A9A1950;
  HIBYTE(v25) = byte_26A9A1951;
  LOBYTE(v26) = HIBYTE(g_HSWConfiguration);
  BYTE9(v25) = BYTE6(g_HSWConfiguration);
  BYTE13(v25) = BYTE5(g_HSWConfiguration);
  BYTE6(v25) = BYTE4(g_HSWConfiguration);
  BYTE1(v26) = HIBYTE(word_26A9A1952);
  BYTE10(v25) = word_26A9A1952;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:Constel Constellation  Search\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "HSW_SetPEConstelCfg");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v6 = BYTE1(g_HSWConfiguration) ? 89 : 78;
      uint64_t v7 = (_BYTE)g_HSWConfiguration ? 89 : 78;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:GPS          %c          %c\n", (unint64_t)v5, "GNM", 73, "HSW_SetPEConstelCfg", v7, v6);
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v9 = 89;
        if (BYTE3(g_HSWConfiguration)) {
          uint64_t v10 = 89;
        }
        else {
          uint64_t v10 = 78;
        }
        if (!BYTE2(g_HSWConfiguration)) {
          uint64_t v9 = 78;
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:GLON         %c          %c\n", (unint64_t)v8, "GNM", 73, "HSW_SetPEConstelCfg", v9, v10);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          uint64_t v12 = 89;
          if (BYTE5(g_HSWConfiguration)) {
            uint64_t v13 = 89;
          }
          else {
            uint64_t v13 = 78;
          }
          if (!BYTE4(g_HSWConfiguration)) {
            uint64_t v12 = 78;
          }
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:QZSS         %c          %c\n", (unint64_t)v11, "GNM", 73, "HSW_SetPEConstelCfg", v12, v13);
          gnssOsa_PrintLog(__str, 4, 1, 0);
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            double v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            uint64_t v15 = 89;
            if (HIBYTE(g_HSWConfiguration)) {
              uint64_t v16 = 89;
            }
            else {
              uint64_t v16 = 78;
            }
            if (!BYTE6(g_HSWConfiguration)) {
              uint64_t v15 = 78;
            }
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:GAL          %c          %c\n", (unint64_t)v14, "GNM", 73, "HSW_SetPEConstelCfg", v15, v16);
            gnssOsa_PrintLog(__str, 4, 1, 0);
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              double v17 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
              uint64_t v18 = 89;
              if (byte_26A9A1951) {
                uint64_t v19 = 89;
              }
              else {
                uint64_t v19 = 78;
              }
              if (!byte_26A9A1950) {
                uint64_t v18 = 78;
              }
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:BDS          %c          %c\n", (unint64_t)v17, "GNM", 73, "HSW_SetPEConstelCfg", v18, v19);
              gnssOsa_PrintLog(__str, 4, 1, 0);
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                double v20 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
                uint64_t v21 = 89;
                if (HIBYTE(word_26A9A1952)) {
                  uint64_t v22 = 89;
                }
                else {
                  uint64_t v22 = 78;
                }
                if (!(_BYTE)word_26A9A1952) {
                  uint64_t v21 = 78;
                }
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:NVC          %c          %c\n", (unint64_t)v20, "GNM", 73, "HSW_SetPEConstelCfg", v21, v22);
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
            }
          }
        }
      }
    }
  }
  return HSW_SetPEConfig((uint64_t)&v25, "HSW_SetPEConstelCfg");
}

uint64_t HSW_SetRfBandCfg(char a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((Ga05_GetDebugFeaturesBitmask() & 0x200) == 0)
  {
    if (g_LbsOsaTrace_Config <= 3)
    {
      byte_26A9A1954 = a1;
      byte_26A9A1955 = 1;
      goto LABEL_14;
    }
    bzero(__str, 0x3C6uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v5 = 78;
    if (a2) {
      uint64_t v5 = 89;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: L5 disable not allowed, GPSD - EnableL5,%c\n", (unint64_t)v4, "GNM", 73, "HSW_SetRfBandCfg", v5);
    LOBYTE(a2) = 1;
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  byte_26A9A1954 = a1;
  byte_26A9A1955 = a2;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v7 = 89;
    if (!byte_26A9A1954) {
      uint64_t v7 = 78;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L1_Enable,%c\n", (unint64_t)v6, "GNM", 73, "HSW_SetRfBandCfg", v7);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v9 = 89;
      if (!byte_26A9A1955) {
        uint64_t v9 = 78;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:L5_Enable,%c\n", (unint64_t)v8, "GNM", 73, "HSW_SetRfBandCfg", v9);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
LABEL_14:
  long long v10 = *(_OWORD *)(qword_26AA2DEE0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_26AA2DEE0;
  long long v16 = v10;
  long long v11 = *(_OWORD *)(qword_26AA2DEE0 + 80);
  long long v13 = *(_OWORD *)(qword_26AA2DEE0 + 32);
  long long v12 = *(_OWORD *)(qword_26AA2DEE0 + 48);
  long long v19 = *(_OWORD *)(qword_26AA2DEE0 + 64);
  long long v20 = v11;
  long long v17 = v13;
  long long v18 = v12;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  LOWORD(v17) = *(_WORD *)&byte_26A9A1954 ^ 1;
  return HSW_SetPEConfig((uint64_t)__str, "HSW_SetRfBandCfg");
}

uint64_t HSW_SetSimulatorModeCfg(int a1, __int16 a2, char a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  byte_26A9A1956 = a1;
  byte_26A9A1957 = a3;
  if (a1) {
    word_26A9A1958 = a2;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v4 = 89;
    if (!byte_26A9A1956) {
      uint64_t v4 = 78;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SimulatedMode,%c\n", (unint64_t)v3, "GNM", 73, "HSW_SetSimulatorModeCfg", v4);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v6 = 89;
      if (!byte_26A9A1957) {
        uint64_t v6 = 78;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:ExternalClock,%c\n", (unint64_t)v5, "GNM", 73, "HSW_SetSimulatorModeCfg", v6);
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "HSW_SetSimulatorModeCfg", (unsigned __int16)word_26A9A1958);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
  }
  long long v8 = *(_OWORD *)(qword_26AA2DEE0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_26AA2DEE0;
  long long v14 = v8;
  long long v9 = *(_OWORD *)(qword_26AA2DEE0 + 80);
  long long v11 = *(_OWORD *)(qword_26AA2DEE0 + 32);
  long long v10 = *(_OWORD *)(qword_26AA2DEE0 + 48);
  long long v17 = *(_OWORD *)(qword_26AA2DEE0 + 64);
  long long v18 = v9;
  long long v15 = v11;
  long long v16 = v10;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  BYTE2(v15) = byte_26A9A1956;
  HIWORD(v15) = word_26A9A1958;
  return HSW_SetPEConfig((uint64_t)__str, "HSW_SetSimulatorModeCfg");
}

uint64_t HSW_SetConstellationCfg(char a1)
{
  if ((a1 & 4) != 0)
  {
    char IsStandaloneBeiDouSupportRequired = Ga05_GetIsStandaloneBeiDouSupportRequired();
    char v2 = 1;
    if ((a1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    char v2 = 0;
    char IsStandaloneBeiDouSupportRequired = 0;
    if ((a1 & 8) != 0)
    {
LABEL_3:
      unsigned int v4 = (Ga05_GetDebugFeaturesBitmask() >> 1) & 1;
      char v5 = 1;
      goto LABEL_6;
    }
  }
  char v5 = 0;
  LOBYTE(v4) = 0;
LABEL_6:
  LOBYTE(g_HSWConfiguration) = a1 & 1;
  BYTE1(g_HSWConfiguration) = a1 & 1;
  BYTE2(g_HSWConfiguration) = (a1 & 2) != 0;
  BYTE3(g_HSWConfiguration) = (a1 & 2) != 0;
  BYTE4(g_HSWConfiguration) = (a1 & 0x10) != 0;
  BYTE5(g_HSWConfiguration) = (a1 & 0x10) != 0;
  BYTE6(g_HSWConfiguration) = v5;
  HIBYTE(g_HSWConfiguration) = v4;
  byte_26A9A1950 = v2;
  byte_26A9A1951 = IsStandaloneBeiDouSupportRequired;
  LOBYTE(word_26A9A1952) = (a1 & 0x20) != 0;
  HIBYTE(word_26A9A1952) = (a1 & 0x20) != 0;

  return HSW_SetPEConstelCfg();
}

uint64_t HSW_SetSWBuildGPSWKNum(__int16 a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((Ga05_GetDebugFeaturesBitmask() & 0x100) != 0)
  {
    word_26A9A195A = 2049;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SWBuildGPSWeekNum (default override),%u\n");
      goto LABEL_6;
    }
  }
  else
  {
    word_26A9A195A = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:SWBuildGPSWeekNum,%u\n");
LABEL_6:
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  long long v2 = *(_OWORD *)(qword_26AA2DEE0 + 16);
  *(_OWORD *)__str = *(_OWORD *)qword_26AA2DEE0;
  long long v8 = v2;
  long long v3 = *(_OWORD *)(qword_26AA2DEE0 + 80);
  long long v5 = *(_OWORD *)(qword_26AA2DEE0 + 32);
  long long v4 = *(_OWORD *)(qword_26AA2DEE0 + 48);
  long long v11 = *(_OWORD *)(qword_26AA2DEE0 + 64);
  long long v12 = v3;
  long long v9 = v5;
  long long v10 = v4;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)__str);
  LOWORD(v10) = word_26A9A195A;
  HIWORD(v9) = word_26A9A195A;
  return HSW_SetPEConfig((uint64_t)__str, "HSW_SetSWBuildGPSWKNum");
}

uint64_t HSW_SetCrossCorrelationCfg(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  qword_26A9A1960 = *(void *)&a1;
  *(double *)algn_26A9A1968 = a2;
  qword_26A9A1970 = *(void *)&a3;
  unk_26A9A1978 = *(void *)&a4;
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  uint64_t v4 = GN_GPS_Set_CrossCorr_Params(v7);
  if ((v4 & 1) == 0 && g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PE SetCrossCorr failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 77, "HSW_SetCrossCorrelationCfg");
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  return v4;
}

uint64_t HSW_SetEarliestGPSWKNum(__int16 a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  word_26A9A1958 = a1;
  long long v1 = *(_OWORD *)(qword_26AA2DEE0 + 16);
  v8[0] = *(_OWORD *)qword_26AA2DEE0;
  v8[1] = v1;
  long long v2 = *(_OWORD *)(qword_26AA2DEE0 + 80);
  long long v4 = *(_OWORD *)(qword_26AA2DEE0 + 32);
  long long v3 = *(_OWORD *)(qword_26AA2DEE0 + 48);
  long long v11 = *(_OWORD *)(qword_26AA2DEE0 + 64);
  long long v12 = v2;
  long long v9 = v4;
  long long v10 = v3;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)v8);
  HIWORD(v9) = word_26A9A1958;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Config:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "HSW_SetEarliestGPSWKNum", (unsigned __int16)word_26A9A1958);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return HSW_SetPEConfig((uint64_t)v8, "HSW_SetEarliestGPSWKNum");
}

unint64_t HSW_GetSleepTimeout(void)
{
  if ((Ga05_GetDebugFeaturesBitmask() & 0x40) == 0) {
    return (unsigned __int16)qword_26A9A1980;
  }

  return Get_TestConfigurationSleepTimeoutSeconds();
}

void HSW_SetFixInterval(unsigned int a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a1 <= 0x64) {
    unsigned int v1 = 100;
  }
  else {
    unsigned int v1 = a1;
  }
  if (HIWORD(qword_26A9A1980) != v1 && GN_GPS_Set_FixInterval(v1))
  {
    HIWORD(qword_26A9A1980) = v1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEUpdtInt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "HSW_SetFixInterval", v1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Gnm31_04SendClearNv(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("Gnm31_04SendClearNv", 496, 1, 0x10uLL);
  if (v2)
  {
    long long v3 = v2;
    *((_DWORD *)v2 + 3) = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm31_04SendClearNv");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(128, 132, 8391168, v3);
  }
}

uint64_t GM_Get_Best_ASSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 1);
  if (a4 - 1 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  uint64_t v7 = (_WORD *)(a1 + 36 * v4 + 8);
  long long v8 = (unsigned char *)(a2 + 48 * v4 + 12);
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      unsigned int v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 0x308) == 0x208)
      {
        if (*(v8 - 8))
        {
          if (*v8) {
            int v11 = 70;
          }
          else {
            int v11 = 64;
          }
          v10 += v11;
          if (v8[3]) {
            v10 += 128;
          }
        }
        if ((int)v10 <= v6)
        {
          uint64_t v9 = v9;
        }
        else
        {
          int v6 = v10;
          uint64_t v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

uint64_t SV_Gen_Meas(uint64_t a1, char *__dst, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a8;
  long long v14 = __dst;
  uint64_t v343 = *MEMORY[0x263EF8340];
  v332 = (unsigned __int8 *)(__dst + 17940);
  long long v15 = __dst + 11788;
  unsigned int v296 = __dst + 4653;
  long long v16 = (unsigned char *)(a5 + 11816);
  uint64_t v339 = 0;
  int v338 = 0;
  char v308 = __dst + 11788;
  if (!*(unsigned char *)(a5 + 11816))
  {
    *(void *)&v342[0] = 0;
    int UTC_Cor = API_Get_UTC_Cor(1, (double *)v342);
    double v18 = -0.5;
    if (*(double *)v342 > 0.0) {
      double v18 = 0.5;
    }
    double v19 = *(double *)v342 + v18;
    if (v19 <= 2147483650.0)
    {
      if (v19 >= -2147483650.0) {
        int v20 = (int)v19;
      }
      else {
        LOBYTE(v20) = 0;
      }
    }
    else
    {
      LOBYTE(v20) = -1;
    }
    long long v14 = __dst;
    if (UTC_Cor)
    {
      int v21 = (char)v16[1];
      int v22 = (char)v20 - v21;
      if ((char)v20 != v21)
      {
        double v23 = (unsigned char *)(a5 + 7208);
        double v24 = (double)v22 * 1023000.0;
        double v25 = -0.5;
        if (v24 > 0.0) {
          double v25 = 0.5;
        }
        double v26 = v24 + v25;
        char v324 = v20;
        if (v26 <= 2147483650.0)
        {
          if (v26 >= -2147483650.0) {
            uint64_t v27 = (int)v26;
          }
          else {
            uint64_t v27 = 0x80000000;
          }
        }
        else
        {
          uint64_t v27 = 0x7FFFFFFFLL;
        }
        uint64_t v28 = 0;
        uint64_t v29 = a5 + 40;
        do
        {
          if (*v23 == 2 && (*(_DWORD *)v29 || *(_DWORD *)(v29 + 4) || *(_WORD *)(v29 + 8)))
          {
            Inc_CA_Chips(v27, (int *)(v29 + 4), (int *)v29);
            GNSS_SV_Str = Get_GNSS_SV_Str(*(unsigned int *)v23);
            EvLog_v("SV_Gen_Meas: Adj GLO ZC&CP  %d  %s  dUTC %3d  Chip_Inc %6d", v28, GNSS_SV_Str, v22, (int)v27 / 1000);
            long long v14 = __dst;
          }
          ++v28;
          v29 += 56;
          v23 += 36;
        }
        while (v28 != 128);
        v16[1] = v324;
        long long v15 = v308;
        uint64_t v11 = a8;
      }
      *long long v16 = 1;
    }
  }
  int v312 = *(_DWORD *)a5;
  int v306 = *(_DWORD *)(a5 + 4);
  uint64_t v303 = *(void *)(a5 + 8);
  memcpy(v14, (const void *)(a5 + 7208), 0x1200uLL);
  double v300 = __dst + 4608;
  memcpy(__dst + 4608, (const void *)(a5 + 40), 0x1C00uLL);
  uint64_t v31 = __dst;
  *long long v15 = *v16;
  *((void *)__dst + 1472) = *(void *)(a5 + 27);
  *((_DWORD *)__dst + 2946) = *(_DWORD *)(a5 + 35);
  int32x4_t v32 = __dst + 8;
  uint64_t v33 = 128;
  do
  {
    if (*((unsigned char *)v32 - 8) == 2)
    {
      int v34 = *(_DWORD *)(v11 + 4 * *((char *)v32 - 5) + 17452);
      if (v34 == 2139062143)
      {
        *((unsigned char *)v32 - 6) = 0;
        if ((*v32 & 0x200) != 0) {
          *v32 &= 0xFCFFu;
        }
      }
      else
      {
        *((unsigned char *)v32 - 6) = v34;
      }
    }
    v32 += 18;
    --v33;
  }
  while (v33);
  uint64_t v35 = 0;
  uint64_t v36 = 128;
  do
  {
    int v37 = *(_DWORD *)&v31[v35];
    if (v37)
    {
      long long v38 = &v31[v35];
      if ((*(_WORD *)&v31[v35 + 8] & 0x200) != 0)
      {
        switch(*(_DWORD *)&v31[v35])
        {
          case 1u:
            if (*(unsigned char *)(a6 + 43)) {
              goto LABEL_58;
            }
            goto LABEL_51;
          case 2u:
            if (!*(unsigned char *)(a6 + 44)) {
              goto LABEL_51;
            }
            goto LABEL_58;
          case 3u:
            if (!*(unsigned char *)(a6 + 48)) {
              goto LABEL_51;
            }
            goto LABEL_58;
          case 4u:
            if (!*(unsigned char *)(a6 + 47)) {
              goto LABEL_51;
            }
            goto LABEL_58;
          case 5u:
            if (!*(unsigned char *)(a6 + 45)) {
              goto LABEL_51;
            }
            goto LABEL_58;
          case 6u:
            if (!*(unsigned char *)(a6 + 49)) {
              goto LABEL_51;
            }
            goto LABEL_58;
          case 7u:
            if (!*(unsigned char *)(a6 + 46)) {
              goto LABEL_51;
            }
            goto LABEL_58;
          default:
LABEL_51:
            int v39 = Is_Legal(*(_DWORD *)&v31[v35]);
            uint64_t v31 = __dst;
            if (!v39) {
              break;
            }
            int v40 = GNSS_Id_To_Num_Prn_Idx(v37);
            uint64_t v31 = __dst;
            unsigned int v41 = __dst[v35 + 1];
            BOOL v104 = v41 > 0xF;
            int v42 = (1 << v41) & 0xDD77;
            BOOL v43 = v104 || v42 == 0;
            uint64_t v44 = a8 + v40;
            if (v43)
            {
              if (!*(unsigned char *)(v44 + 50834) || *(unsigned char *)(a6 + v40 + 536))
              {
LABEL_58:
                __int16 v45 = *((_WORD *)v38 + 4) & 0xFCFF | 0x100;
                *((_WORD *)v38 + 4) = v45;
                *(_WORD *)(a5 + v35 + 7216) = v45;
                break;
              }
            }
            else if (!*(unsigned char *)(v44 + 50616) || *(unsigned char *)(a6 + v40 + 257))
            {
              goto LABEL_58;
            }
            break;
        }
      }
    }
    v35 += 36;
    --v36;
  }
  while (v36);
  memset(v341, 0, sizeof(v341));
  if (*(unsigned char *)(a6 + 50))
  {
    uint64_t v46 = 0;
    double v47 = __dst + 8;
    do
    {
      int v48 = *((_DWORD *)v47 - 2);
      if (Is_Legal(v48))
      {
        BOOL v49 = BYTE1(v48) > 0xFu || ((1 << SBYTE1(v48)) & 0xE6CC) == 0;
        if (v49 && (*v47 & 8) != 0)
        {
          *v47 &= ~8u;
          *((unsigned char *)v341 + v46) = 1;
        }
      }
      ++v46;
      v47 += 18;
    }
    while (v46 != 128);
  }
  if (!*(unsigned char *)(a6 + 51))
  {
    uint64_t v85 = 0;
    char v86 = __dst + 8;
    do
    {
      int v87 = *((_DWORD *)v86 - 2);
      if (Is_Legal(v87))
      {
        BOOL v88 = BYTE1(v87) > 0xFu || ((1 << SBYTE1(v87)) & 0xDD77) == 0;
        if (v88 && (*v86 & 8) != 0)
        {
          *v86 &= ~8u;
          *((unsigned char *)v341 + v85) = 1;
        }
      }
      ++v85;
      v86 += 18;
    }
    while (v85 != 128);
  }
  uint64_t v50 = 0;
  uint64_t v51 = __dst + 8;
  do
  {
    int v52 = *((_DWORD *)v51 - 2);
    if (Is_Legal(v52)) {
      BOOL v53 = v52 == 4;
    }
    else {
      BOOL v53 = 0;
    }
    if (v53 && BYTE2(v52) - 59 <= 0xFFFFFFCA && (*v51 & 8) != 0)
    {
      *v51 &= ~8u;
      *((unsigned char *)v341 + v50) = 1;
    }
    ++v50;
    v51 += 18;
  }
  while (v50 != 128);
  unsigned __int8 v54 = 0;
  unsigned int v55 = (unsigned __int8 *)(__dst + 4);
  uint64_t v56 = 128;
  do
  {
    if (Is_Legal(*((_DWORD *)v55 - 1)) && (*((_WORD *)v55 + 2) & 8) != 0 && *v55 > v54) {
      unsigned __int8 v54 = *v55;
    }
    v55 += 36;
    --v56;
  }
  while (v56);
  GM_CA_Jammer_Protection(0, *(_DWORD *)a5, (uint64_t)v300, (uint64_t)__dst, (uint64_t)v341, a11);
  GM_CA_Jammer_Protection(4u, *(_DWORD *)a5, (uint64_t)v300, (uint64_t)__dst, (uint64_t)v341, a11);
  GM_CA_Jammer_Protection(3u, *(_DWORD *)a5, (uint64_t)v300, (uint64_t)__dst, (uint64_t)v341, a11);
  unsigned __int8 v299 = v54;
  if (v54 > 0x1Du)
  {
    uint64_t v57 = 0;
    unsigned int v58 = (v54 - 21);
    unsigned int v59 = (v54 - 24);
    uint64_t v60 = a5 + 40;
    uint64_t v61 = (int *)__dst;
    do
    {
      int v62 = *v61;
      if (!Is_Legal(*v61)
        || (v61[2] & 8) == 0
        || *((unsigned char *)v341 + v57)
        || *((unsigned __int8 *)v61 + 4) >= v58)
      {
        goto LABEL_109;
      }
      switch(v62)
      {
        case 5u:
          goto LABEL_101;
        case 4u:
          goto LABEL_103;
        case 1u:
LABEL_101:
          if (BYTE1(v62))
          {
            if (v62 == 4)
            {
LABEL_103:
              if (BYTE1(v62) != 12
                || BYTE2(v62) - 6 > 0x34
                || !GM_CrossCorr_Protection(4, v59, (uint64_t)v61, v60, a7))
              {
                break;
              }
LABEL_108:
              *((unsigned char *)v341 + v57) = 1;
              unsigned int v63 = Get_GNSS_SV_Str(*v61);
              EvVrb_v("SV_Gen_Meas: Cross-Corr, Rej !  %d  %s  SNR %d  Thr %d %d", v57, v63, *((unsigned __int8 *)v61 + 4), v58, v59);
            }
          }
          else if (GM_CrossCorr_Protection(7, v59, (uint64_t)v61, v60, a7))
          {
            goto LABEL_108;
          }
          break;
      }
LABEL_109:
      ++v57;
      v61 += 9;
      v60 += 56;
    }
    while (v57 != 128);
  }
  *((_DWORD *)v308 + 1537) = *(_DWORD *)a9;
  double v64 = __dst;
  v332[52] = *(unsigned char *)(a9 + 4);
  unsigned __int8 *v332 = *(unsigned char *)(a9 + 16);
  uint64_t v65 = *(void *)(a9 + 24);
  *((void *)__dst + 2247) = v65;
  *((void *)__dst + 2248) = *(void *)(a9 + 8);
  *((_WORD *)v332 + 1) = *(_WORD *)(a9 + 32);
  v309 = (double *)(__dst + 17944);
  v310 = (__int16 *)(v332 + 2);
  *((void *)__dst + 2243) = *(void *)(a9 + 40);
  double v66 = *(double *)(a9 + 48);
  *((_DWORD *)v332 + 3) = *(_DWORD *)(a9 + 76);
  __int16 v67 = *(_WORD *)(a9 + 82);
  *((_WORD *)v332 + 10) = *(_WORD *)(a9 + 84);
  *((_WORD *)v332 + 8) = v67;
  double v289 = (__int16 *)(v332 + 20);
  v332[18] = *(unsigned char *)(a9 + 80);
  v297 = (double *)(__dst + 17968);
  *((void *)__dst + 2246) = *(void *)(a9 + 88);
  *((double *)__dst + 2250) = v66 + *(double *)(a9 + 56) * ((double)(v312 - (int)v65) * 0.001);
  uint64_t v68 = -6144;
  do
  {
    unsigned int v69 = &__dst[v68];
    *((_OWORD *)v69 + 1122) = 0uLL;
    *((_OWORD *)v69 + 1121) = 0uLL;
    *(_OWORD *)&__dst[v68 + 17966] = 0uLL;
    v68 += 48;
  }
  while (v68);
  uint64_t v70 = 0;
  unsigned __int8 v325 = 0;
  int v71 = __dst + 11792;
  unsigned int v72 = (unsigned __int8 *)__dst;
  do
  {
    int v73 = *v72;
    if (*v72) {
      BOOL v74 = v73 == 7;
    }
    else {
      BOOL v74 = 1;
    }
    if (!v74)
    {
      if (!v72[2])
      {
        if (v73 == 2) {
          goto LABEL_118;
        }
        EvCrt_v("SV_Gen_Meas:  %d  SVid zero for non-GLONASS constelation %d ", v70, v73);
LABEL_126:
        double v64 = __dst;
        goto LABEL_118;
      }
      int v75 = *(char *)(a7 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v72) + 5976);
      if (v75 < 0) {
        goto LABEL_126;
      }
      uint64_t v76 = a7 + 48 * v75;
      long long v77 = *(_OWORD *)(v76 + 104);
      long long v78 = *(_OWORD *)(v76 + 72);
      *((_OWORD *)v71 + 1) = *(_OWORD *)(v76 + 88);
      *((_OWORD *)v71 + 2) = v77;
      *(_OWORD *)int v71 = v78;
      double v64 = __dst;
      if (v71[4]) {
        v325 |= v71[15] != 0;
      }
    }
LABEL_118:
    ++v70;
    v71 += 48;
    v72 += 36;
  }
  while (v70 != 128);
  *(_OWORD *)(v64 + 18492) = 0u;
  *(_OWORD *)(v64 + 18508) = 0u;
  *(_OWORD *)(v64 + 18460) = 0u;
  *(_OWORD *)(v64 + 18476) = 0u;
  *(_OWORD *)(v64 + 18428) = 0u;
  *(_OWORD *)(v64 + 18444) = 0u;
  *(_OWORD *)(v64 + 18396) = 0u;
  *(_OWORD *)(v64 + 18412) = 0u;
  *(_OWORD *)(v64 + 18364) = 0u;
  *(_OWORD *)(v64 + 18380) = 0u;
  *(_OWORD *)(v64 + 18332) = 0u;
  *(_OWORD *)(v64 + 18348) = 0u;
  *(_OWORD *)(v64 + 18300) = 0u;
  *(_OWORD *)(v64 + 18316) = 0u;
  *(_OWORD *)(v64 + 18268) = 0u;
  *(_OWORD *)(v64 + 18284) = 0u;
  *(_OWORD *)(v64 + 18236) = 0u;
  *(_OWORD *)(v64 + 18252) = 0u;
  *(_OWORD *)(v64 + 18204) = 0u;
  *(_OWORD *)(v64 + 18220) = 0u;
  *(_OWORD *)(v64 + 18172) = 0u;
  *(_OWORD *)(v64 + 18188) = 0u;
  *(_OWORD *)(v64 + 18140) = 0u;
  *(_OWORD *)(v64 + 18156) = 0u;
  *(_OWORD *)(v64 + 18108) = 0u;
  *(_OWORD *)(v64 + 18124) = 0u;
  *(_OWORD *)(v64 + 18076) = 0u;
  *(_OWORD *)(v64 + 18092) = 0u;
  *(_OWORD *)(v64 + 18044) = 0u;
  *(_OWORD *)(v64 + 18060) = 0u;
  *(_OWORD *)(v64 + 18012) = 0u;
  *(_OWORD *)(v64 + 18028) = 0u;
  __src = v64 + 18528;
  double v295 = (int *)(v64 + 18012);
  bzero(v64 + 18528, 0x1000uLL);
  GM_Inc_Local_Time(v312, (uint64_t)__dst);
  v79 = __dst;
  *((_DWORD *)v332 + 10) = v306;
  *((void *)__dst + 2248) = v303;
  double v80 = *((double *)__dst + 2250);
  if (fabs(v80) > 0.0005001) {
    *(unsigned char *)(a1 + 4) = 1;
  }
  if (*v332 && *(unsigned char *)(a1 + 4))
  {
    double v81 = v80 * 1000.0;
    double v82 = -0.5;
    if (v81 > 0.0) {
      double v82 = 0.5;
    }
    double v83 = v81 + v82;
    if (v83 <= 2147483650.0)
    {
      if (v83 >= -2147483650.0) {
        int v84 = (int)v83;
      }
      else {
        int v84 = 0x80000000;
      }
    }
    else
    {
      int v84 = 0x7FFFFFFF;
    }
    Inc_Local_Time(-v84, 86400, v297, v289);
    signed int v89 = *((__int16 *)v332 + 10);
    int v90 = *((unsigned __int16 *)v332 + 8);
    if (v89 >= 1462)
    {
      if (v89 >= 2922) {
        __int16 v91 = 2922;
      }
      else {
        __int16 v91 = *((_WORD *)v332 + 10);
      }
      unsigned __int16 v92 = v89 - v91 + 1460;
      signed int v89 = v89 - 1461 * (v92 / 0x5B5u) - 1461;
      v90 += v92 / 0x5B5u + 1;
      *((_WORD *)v332 + 10) = v89;
      *((_WORD *)v332 + 8) = v90;
    }
    if ((__int16)v89 <= 0)
    {
      if ((__int16)v89 <= -1460) {
        __int16 v253 = -1460;
      }
      else {
        __int16 v253 = v89;
      }
      __int16 v254 = (unsigned __int16)(v253 - v89 - ((__int16)v89 < -1460)) / 0x5B5u;
      if ((__int16)v89 < -1460) {
        ++v254;
      }
      __int16 v255 = v90 + ~v254;
      *((_WORD *)v332 + 10) = v89 + 1461 * v254 + 1461;
      *((_WORD *)v332 + 8) = v255;
      if (v255 < 0) {
        goto LABEL_418;
      }
    }
    else
    {
      if ((v90 & 0x8000) == 0) {
        goto LABEL_156;
      }
LABEL_418:
      *((_WORD *)v332 + 8) = 0;
    }
LABEL_156:
    GM_Apply_LT_Slew((double *)__dst + 2250, v310, v309, (_WORD *)(a1 + 4));
    v79 = __dst;
    if (*(unsigned char *)(a1 + 5))
    {
      int v93 = *(__int16 *)(a1 + 6);
      if (*(_WORD *)(a1 + 6))
      {
        uint64_t v94 = 0;
        uint64_t v95 = a1 + 1040;
        do
        {
          if (*(unsigned char *)(v95 + v94)) {
            *(_DWORD *)(v95 + 4 * v94 - 1024) -= *(_DWORD *)(v95 + 4 * v94 - 512) * v93;
          }
          ++v94;
        }
        while (v94 != 128);
      }
    }
  }
  else
  {
    *(_WORD *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 5) = 0;
  }
  unsigned int v291 = v79 + 19552;
  v292 = v79 + 20576;
  double v293 = v79 + 21600;
  unsigned int Min_SNR = GM_Get_Min_SNR((uint64_t)v79, 128);
  unint64_t v304 = __dst + 11792;
  GM_Prop_AAD(*((unsigned int *)v332 + 9), 128, (uint64_t)(__dst + 11792));
  uint64_t v97 = __dst;
  if (*v332 && *((int *)v308 + 1537) >= 7 && *(unsigned char *)(a4 + 1) && *(_DWORD *)(a4 + 12) == 3)
  {
    for (uint64_t i = 0; i != 128; ++i)
    {
      v99 = &v97[36 * i];
      int v100 = GM_Gen_SV_Meas_QI((uint64_t)v99);
      __int16 v101 = *((_WORD *)v99 + 4);
      unint64_t v102 = *(unsigned int *)v99;
      int v103 = Is_Legal(*(_DWORD *)v99);
      uint64_t v97 = __dst;
      if (v103) {
        BOOL v104 = v100 < 8;
      }
      else {
        BOOL v104 = 1;
      }
      if (!v104)
      {
        unsigned int v105 = v101 & 0x300;
        if (v105 >= 0x200 && __dst[48 * i + 11796] && __dst[48 * i + 11807])
        {
          v106 = &__dst[56 * i];
          int v107 = *((_DWORD *)v106 + 1152);
          LODWORD(v106) = (unint64_t)(2149582851 * *((int *)v106 + 1153)) >> 32;
          double v108 = (double)(int)(((int)v106 >> 9) + (v106 >> 31) + 1500 * v107) * 0.001;
          double v109 = *((double *)__dst + 2243);
          double v110 = v109 - v108;
          if (v102 == 2)
          {
            while (v110 >= 43200.0)
            {
              double v108 = v108 + 86400.0;
              double v110 = v109 - v108;
            }
            while (v110 < -43200.0)
            {
              double v108 = v108 + -86400.0;
              double v110 = v109 - v108;
            }
          }
          if (v110 >= 302400.0)
          {
            double v110 = v110 + -604800.0;
          }
          else if (v110 < -302400.0)
          {
            double v110 = v110 + 604800.0;
          }
          if (fabs(v110) > 3.0)
          {
            *((_WORD *)v99 + 4) = v101 & 0xFCFF;
            v111 = Get_GNSS_SV_Str(v102);
            EvLog_v("SV_Gen_Meas: SF Sync Rej !  %d  %s  SF Sync %d  d_TOW %g", i, v111, v105 >> 8, v110);
            *(unsigned char *)(a11 + i + 448) = 3;
            *(_DWORD *)(a11 + 4 * i + 576) = *((_DWORD *)v332 + 9);
            uint64_t v112 = Get_GNSS_SV_Str(*(unsigned int *)v99);
            EvCrt_v("ChanReset %d : SVGM  %s  SNR %d  QI %d  Bad SF Sync %d  d_TOW %g", i, v112, __dst[36 * i + 4], v100, v105 >> 8, v110);
            uint64_t v97 = __dst;
          }
        }
      }
    }
  }
  GM_Cross_Constell((uint64_t)v97, a8);
  GM_Get_Best_SyncSV((uint64_t)v300, (uint64_t)__dst, (uint64_t)v304, Min_SNR, (_DWORD *)&v339 + 1, &v339);
  unsigned int Best_NSSS = GM_Get_Best_NSSS((uint64_t)__dst, (uint64_t)v304, Min_SNR, 128);
  int v113 = GM_Adjust_AAD(v339, Best_NSSS, (uint64_t)v300, 128, (uint64_t)v304);
  char v114 = __dst;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  *((_DWORD *)v332 + 17) = v113;
  unsigned int v117 = a3 + 192;
  uint64_t v118 = 11824;
  uint64_t v119 = 11836;
  do
  {
    int v120 = *(_DWORD *)&v114[4 * v116];
    int v121 = Is_Legal(v120);
    char v114 = __dst;
    if (v121)
    {
      int v123 = *((_DWORD *)v332 + 17) - *(_DWORD *)&__dst[v118] + *(_DWORD *)&__dst[v115 + 4612];
      int v124 = (v123 + (v123 < 0 ? 0x176A24 : 0)) % 1023;
      if (v124 > 511) {
        v124 -= 1023;
      }
      double v125 = ((double)v124
            + (double)(*(unsigned __int16 *)&__dst[v115 + 4616] - *(unsigned __int16 *)&__dst[v119 - 8])
            * 0.0000152587891)
           * 293.052256;
      if (BYTE1(v120) > 0xFu || ((1 << SBYTE1(v120)) & 0xDD77) == 0) {
        double v125 = v125 + (double)*(__int16 *)&__dst[v119] * 0.125;
      }
      if (v125 <= 0.0) {
        double v126 = -0.5;
      }
      else {
        double v126 = 0.5;
      }
      double v122 = v125 + v126;
      if (v122 <= 2147483650.0)
      {
        if (v122 >= -2147483650.0) {
          int v127 = (int)v122;
        }
        else {
          int v127 = 0x80000000;
        }
      }
      else
      {
        int v127 = 0x7FFFFFFF;
      }
      *a3 = v127;
      *(v117 - 128) = (__int16)*(_DWORD *)&__dst[v115 + 4620] / 12470 - *(_WORD *)&__dst[v119 - 22];
      *unsigned int v117 = *(_DWORD *)&__dst[v115 + 4624] / 12470 - *(_WORD *)&__dst[v119 - 22];
    }
    v116 += 9;
    ++v117;
    v115 += 56;
    v118 += 48;
    ++a3;
    v119 += 48;
  }
  while (v116 != 1152);
  int v338 = 0;
  int v128 = *(_DWORD *)(a1 + 12);
  BOOL v129 = *v310 > *(__int16 *)(a9 + 32);
  if (v299) {
    BOOL v130 = *(_DWORD *)a6 == 0;
  }
  else {
    BOOL v130 = 0;
  }
  char v131 = !v130;
  int v132 = *((_DWORD *)v308 + 1537);
  if (v128 <= 4)
  {
    uint64_t v133 = v332;
    unsigned int v134 = Best_NSSS;
    v135 = "Vel,%f,RmsVel,%f\n";
    unsigned __int8 v136 = v325;
    if (v128 >= 3)
    {
      int v307 = 1;
      goto LABEL_220;
    }
    int v307 = 0;
  }
  else
  {
    uint64_t v133 = v332;
    unsigned int v134 = Best_NSSS;
    v135 = "%10u %s%c %s: OsTimeMs,%u,Vel,%f,RmsVel,%f\n" + 26;
    unsigned __int8 v136 = v325;
    if (v132 >= 9)
    {
      char v137 = v339 >= 0 ? 1 : v131;
      if (v137)
      {
        int v307 = 2;
        goto LABEL_221;
      }
    }
    int v307 = 0;
    v332[52] = 0;
    int v128 = 4;
    *(_DWORD *)(a1 + 12) = 4;
    BOOL v129 = 1;
LABEL_220:
    if (v132 < 9)
    {
LABEL_224:
      int v307 = 0;
      v133[52] = 0;
      int v128 = 2;
      *(_DWORD *)(a1 + 12) = 2;
      BOOL v129 = 1;
    }
    else
    {
LABEL_221:
      if ((int)v339 >= 0) {
        char v131 = 1;
      }
      if ((v131 & 1) == 0) {
        goto LABEL_224;
      }
    }
  }
  if (v132 == 11)
  {
    BOOL v129 = 0;
    v133[52] = 1;
    *(_DWORD *)(a1 + 12) = 6;
    goto LABEL_238;
  }
  if (v339 < 0)
  {
    int v138 = v339;
    if (v128 > 2 || (v339 & 0x80000000) != 0)
    {
      if ((v134 & 0x80000000) != 0 || v128) {
        goto LABEL_238;
      }
LABEL_235:
      if (v138 < 0)
      {
        BOOL v129 = 1;
        uint64_t v141 = a8;
        if ((v134 & 0x80000000) == 0)
        {
          GM_Set_MSec_TOW_NSSS((uint64_t)&__dst[56 * v134 + 4608], (uint64_t)&__dst[48 * v134 + 11792], v309, &v338, *((double *)v135 + 392));
          v133[52] = 0;
          *(_DWORD *)(a1 + 12) = 1;
        }
        goto LABEL_239;
      }
    }
    int v139 = v138;
    if (__dst[48 * v138 + 11796])
    {
      LOWORD(v122) = *(_WORD *)&__dst[48 * v138 + 11808];
      double v140 = (double)*(unint64_t *)&v122 * 0.5;
    }
    else
    {
      int v256 = *(_DWORD *)&__dst[36 * v138];
      switch(*(_DWORD *)&__dst[36 * v139])
      {
        case 2u:
          unsigned int v257 = 73;
          break;
        case 3u:
          unsigned int v257 = 87;
          break;
        case 4u:
          if (BYTE2(v256) - 59 >= 0xFFFFFFCB) {
            unsigned int v257 = 81;
          }
          else {
            unsigned int v257 = 119;
          }
          break;
        case 5u:
        case 7u:
          unsigned int v257 = 129;
          break;
        case 6u:
          unsigned int v257 = 120;
          break;
        default:
          unsigned int v257 = 77;
          break;
      }
      double v140 = (double)v257;
    }
    double v258 = *((double *)v135 + 392);
    GM_Set_MSec_TOT_SSS((uint64_t)&__dst[56 * v139 + 4608], v140, v258, *((double *)__dst + 2243));
    int v260 = *((_DWORD *)v308 + 1537);
    if (!v260)
    {
      if (v259 >= 0.0)
      {
        double v261 = (double *)__dst;
        if (v259 >= v258) {
          double v259 = v259 + -604800.0;
        }
LABEL_435:
        double v262 = (v259 - *v309) * 1000.0;
        double v263 = -0.5;
        if (v262 > 0.0) {
          double v263 = 0.5;
        }
        double v264 = v262 + v263;
        if (v264 <= 2147483650.0)
        {
          if (v264 >= -2147483650.0) {
            int v265 = (int)v264;
          }
          else {
            int v265 = 0x80000000;
          }
        }
        else
        {
          int v265 = 0x7FFFFFFF;
        }
        int v338 = v265;
        double *v309 = v259;
        if (v265 >= 0) {
          unsigned int v266 = v265;
        }
        else {
          unsigned int v266 = -v265;
        }
        BOOL v267 = v260 > 1 && v266 > 0xEA60;
        char v268 = v267;
        if (!v267)
        {
          int v277 = *v133;
          int v278 = *(_DWORD *)(a9 + 24);
          goto LABEL_469;
        }
        *((_DWORD *)v133 + 3) = 0;
        double v269 = (char *)(v261 + 1474);
        uint64_t v270 = -6144;
        do
        {
          v271 = &v269[v270];
          *((_OWORD *)v271 + 385) = 0uLL;
          *((_OWORD *)v271 + 384) = 0uLL;
          *(_OWORD *)&v269[v270 + 6174] = 0uLL;
          v270 += 48;
        }
        while (v270);
        uint64_t v272 = a7 + 72;
        uint64_t v273 = -5904;
        do
        {
          uint64_t v274 = v272 + v273;
          *(_OWORD *)(v274 + 5920) = 0uLL;
          *(_OWORD *)(v274 + 5904) = 0uLL;
          *(_OWORD *)(v272 + v273 + 5934) = 0uLL;
          v273 += 48;
        }
        while (v273);
        int v277 = *v133;
        int v278 = *(_DWORD *)(a9 + 24);
        if (!*v133)
        {
          unsigned __int8 v136 = 0;
          goto LABEL_469;
        }
        if (*(_DWORD *)(a9 + 20) != v278)
        {
          if (v265 >= 302400000)
          {
            unsigned __int8 v136 = 0;
            v275 = v332 + 2;
            __int16 v276 = *v310 - 1;
LABEL_466:
            _WORD *v275 = v276;
LABEL_468:
            int v277 = 1;
LABEL_469:
            EvLog_v("GLO_TIM: SV_Gen_Meas GPS set %g   TOW_adjust %d ms   WeekNo %d %d %d", v261[2243], v265, v277, *(_DWORD *)(a9 + 20) != v278, *v310);
            int v279 = v339;
            if (((__dst[48 * (int)v339 + 11796] == 0) & v136) != 0) {
              int v280 = 8;
            }
            else {
              int v280 = 9;
            }
            *((_DWORD *)v308 + 1537) = v280;
            uint64_t v141 = a8;
            if (__dst[36 * v279] == 2)
            {
              *(void *)&v342[0] = 0;
              API_Get_UTC_Cor(1, (double *)v342);
              double v281 = -86400.0;
              double v282 = *v309 + floor(*v309 / 86400.0) * -86400.0 + 10800.0 - *(double *)v342;
              double *v297 = v282;
              if (v282 >= 86400.0 || (double v281 = 86400.0, v282 < 0.0))
              {
                double v282 = v282 + v281;
                double *v297 = v282;
              }
              int v283 = *((_DWORD *)v308 + 1537);
              if (*((_DWORD *)v133 + 3) < v283 && (*(_DWORD *)(a8 + 8972) - 2) <= 4) {
                *((_DWORD *)v133 + 3) = v283;
              }
              EvLog_v("GLO_TIM: SV_Gen_Meas GPS->Glon set Glon_TOD  %g", v282);
              int v280 = *((_DWORD *)v308 + 1537);
            }
            if (v280 == 9)
            {
              if ((v339 & 0x8000000000000000) == 0 && HIDWORD(v339) == v339)
              {
                *(_DWORD *)(a1 + 12) = 5;
                BOOL v129 = 1;
                v133[52] = 1;
                int v307 = 2;
                goto LABEL_239;
              }
              *(_DWORD *)(a1 + 12) = 3;
              v133[52] = 0;
              int v307 = 1;
            }
            else if ((v268 & 1) == 0)
            {
              GM_Prop_AAD((*((_DWORD *)v133 + 9) + v265), 128, (uint64_t)v304);
              int v338 = 0;
            }
            BOOL v129 = 1;
            goto LABEL_239;
          }
          if (v265 <= -302400001)
          {
            unsigned __int8 v136 = 0;
            v275 = v332 + 2;
            __int16 v276 = *v310 + 1;
            goto LABEL_466;
          }
        }
        unsigned __int8 v136 = 0;
        goto LABEL_468;
      }
      double v259 = v259 + v258;
    }
    double v261 = (double *)__dst;
    goto LABEL_435;
  }
  if (v128 < 5)
  {
    int v138 = v339;
    goto LABEL_235;
  }
LABEL_238:
  uint64_t v141 = a8;
LABEL_239:
  if (*v133)
  {
    int v142 = *((_DWORD *)v308 + 1537);
    if (v142 >= 1 && v142 >= *((_DWORD *)v133 + 3))
    {
      LODWORD(v340[0]) = 0;
      LODWORD(v335) = 0;
      *(void *)&v342[0] = 0;
      API_Get_UTC_Cor(1, (double *)v342);
      GPS_To_Glon_Time(0, *((__int16 *)v133 + 1), *v309, *(double *)v342, (int *)&v335, (int *)v340, v297);
      __int16 v143 = LOWORD(v340[0]);
      if (!v133[18] || LODWORD(v340[0]) != *v289)
      {
        if (g_Logging_Cfg >= 4) {
          EvLog_v("SV_Gen_Meas: GPS_GLO %d %d ", *v289, LODWORD(v340[0]));
        }
        *((_WORD *)v133 + 8) = LOWORD(v335);
        *((_WORD *)v133 + 10) = v143;
        v133[18] = 1;
      }
      int v144 = *((_DWORD *)v308 + 1537);
      if (*((_DWORD *)v133 + 3) < v144 && (*(_DWORD *)(v141 + 8972) - 2) <= 4) {
        *((_DWORD *)v133 + 3) = v144;
      }
    }
  }
  BOOL v290 = v129;
  int v311 = v312 - *(_DWORD *)a1;
  __int16 v337 = 0;
  int v336 = 0;
  uint64_t v334 = 0;
  double v335 = 0.0;
  char Pos_LLH = Core_Get_Pos_LLH(*((_DWORD *)v133 + 9), 150000, 0, &v336, (uint64_t)v342, (uint64_t)v340, (uint64_t *)&v335, (unsigned char *)&v337 + 1, &v337, &v334, (int *)&v334 + 1);
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  unsigned int v305 = 0;
  if ((HIDWORD(v334) - 3) < 2) {
    char v149 = Pos_LLH;
  }
  else {
    char v149 = 0;
  }
  char v288 = v149;
  memset(v342, 0, sizeof(v342));
  uint64_t v287 = a11 + 576;
  uint64_t v150 = 18528;
  uint64_t v151 = 18012;
  uint64_t v152 = 11792;
  uint64_t v153 = 4608;
  uint64_t v154 = 11814;
  double v155 = *((double *)v135 + 392);
  unsigned int v286 = v134;
  uint64_t v156 = 11796;
  v157 = __dst;
  while (2)
  {
    unsigned int v158 = &v157[v146];
    if (v157[v146] == 7)
    {
      int v159 = 5;
      goto LABEL_292;
    }
    if (*((unsigned char *)v341 + v148))
    {
      int v159 = 8;
      goto LABEL_292;
    }
    uint64_t v160 = v154;
    uint64_t v161 = v152;
    int v159 = GM_Gen_SV_Meas_QI((uint64_t)&v157[v146]);
    if (v159 < 11) {
      goto LABEL_290;
    }
    v157 = __dst;
    uint64_t v152 = v161;
    uint64_t v154 = v160;
    if (*(_DWORD *)(a6 + 60) <= 4u && __dst[v156] && ((v288 & 1) != 0 || *(_DWORD *)a6 == 1))
    {
      int v163 = *(_DWORD *)&__dst[v153 + 12];
      int v162 = *(_DWORD *)&__dst[v153 + 16];
      int v164 = *(__int16 *)&__dst[v160];
      LODWORD(v165) = *(unsigned __int16 *)&__dst[v160 - 4];
      unsigned int v166 = __dst[v146 + 1];
      if (v166 <= 0xF && ((1 << v166) & 0xDD77) != 0)
      {
        if (((1 << v166) & 0xBBBF) != 0)
        {
          int v167 = v162 / 12470;
          int v168 = v163 / 12470;
        }
        else
        {
          int v168 = v163 / 16275;
          int v167 = v162 / 16275;
          int v164 = 118 * v164 / 154;
          unint64_t v165 = (27889399 * (unint64_t)(118 * v165)) >> 32;
        }
      }
      else
      {
        int v168 = v163 / 16700;
        int v167 = v162 / 16700;
        int v164 = 115 * v164 / 154;
        unint64_t v165 = (27889399 * (unint64_t)(115 * v165)) >> 32;
      }
      unsigned int v169 = (3 * v165) <= 0x226 ? 550 : 3 * v165;
      BOOL v170 = !v162 || *(unsigned char *)(a6 + 1836) == 0;
      int v171 = v170 ? 0 : v168 - v167;
      unsigned int v172 = v171 >= 0 ? v171 : -v171;
      BOOL v173 = v172 <= v169 && v168 <= (int)(v169 + v164);
      BOOL v174 = !v173 || v168 < (int)(v164 - v169);
      uint64_t v152 = v161;
      if (v174)
      {
        int v284 = v171;
        unsigned int v285 = v169;
        int v298 = v167;
        int v313 = v168;
        int v316 = v165;
        int v326 = v164;
        if (Is_Legal(*(_DWORD *)v158))
        {
          *(unsigned char *)(a11 + v148 + 448) = 5;
          *(_DWORD *)(v287 + 4 * v148) = *((_DWORD *)v332 + 9);
          uint64_t v175 = Get_GNSS_SV_Str(*(unsigned int *)&__dst[v146]);
          EvCrt_v("ChanReset %d : SVGM  %s   Dopp %d %d %d   AA %d %d %d   SNR %d  JNR %d", v148, v175, v313, v298, v284, v326, v316, v285, __dst[v146 + 4], __dst[v146 + 5]);
          v157 = __dst;
          int v159 = 4;
LABEL_291:
          uint64_t v152 = v161;
          uint64_t v154 = v160;
          goto LABEL_292;
        }
        int v159 = 4;
LABEL_290:
        v157 = __dst;
        goto LABEL_291;
      }
    }
LABEL_292:
    v176 = (int *)&v157[v153];
    int v177 = *((_WORD *)v158 + 4) & 0x308;
    BOOL v178 = v177 == 776;
    *((unsigned char *)v342 + v148) = v178;
    double v179 = (double)*(int *)&v157[v153 + 12];
    v340[0] = 0.0;
    char v180 = (double *)&v157[v150];
    v180[128] = v179 * 0.0000152587891;
    v180[256] = (double)*(int *)&v157[v153 + 16] * 0.0000152587891;
    double v181 = 0.0;
    if (!*v158 || *v158 == 7) {
      goto LABEL_294;
    }
    uint64_t v331 = v152;
    if (v159 >= 11)
    {
      int v327 = v159;
      uint64_t v314 = v154;
      double v182 = *v309;
      if (v177 == 776)
      {
        char v317 = 0;
        int v183 = 1;
        goto LABEL_307;
      }
      uint64_t v318 = (uint64_t)&v157[v152];
      if ((GM_Aid_NSSS_Meas((uint64_t)&v157[v152], 3u, (int *)&v157[v153]) & 1) != 0
        || (Best_NSSS & 0x80000000) == 0 && *(int *)(a1 + 12) >= 1 && (GM_Aid_NSSS_Meas(v318, 0, v176) & 1) != 0)
      {
        char v317 = 0;
        int v183 = 1;
LABEL_306:
        v157 = __dst;
LABEL_307:
        double v185 = Comp_Sig_TOT(*(_DWORD *)&v157[v153], *(_DWORD *)&v157[v153 + 4], *(unsigned __int16 *)&v157[v147 + 4616], v182, v155);
        *((unsigned char *)v342 + v148) = v183;
        BOOL v178 = v183;
        if (v185 < -1.0)
        {
          v157 = __dst;
          goto LABEL_309;
        }
        double v181 = (*v309 - v185) * 299792458.0;
        v340[0] = v181;
        if (fabs(v181) >= 2130706430.0) {
          int v186 = 2130706432;
        }
        else {
          int v186 = (int)v181;
        }
        unsigned int v187 = *v158 - 4;
        uint64_t v154 = v314;
        if (v187 > 2)
        {
          int v189 = 40000000;
          int v188 = 5000000;
        }
        else
        {
          int v188 = dword_263D81308[(char)v187];
          int v189 = dword_263D81314[(char)v187];
        }
        v157 = __dst;
        if ((v317 & 1) != 0 || !v307 || !*v332 || (v186 >= v188 ? (BOOL v190 = v186 <= v189) : (BOOL v190 = 0), v190))
        {
          if (v186 >= v188 && v186 <= v189)
          {
            int v159 = v327;
          }
          else
          {
            BOOL v320 = v178;
            unsigned int v193 = Get_GNSS_SV_Str(*(unsigned int *)&__dst[v146]);
            EvCrt_v("SV_Gen_Meas: QI_REJECTED4  %d  %s  SNR %d  QI %d  Sync %d %d  PR %d  iBest %d %d %d", v148, v193, __dst[v146 + 4], v327, v320, v307, v186, HIDWORD(v339), v339, Best_NSSS);
            BOOL v178 = v320;
            uint64_t v154 = v314;
            v157 = __dst;
            ++v305;
            v340[0] = 0.0;
            int v159 = 7;
            double v181 = 0.0;
          }
        }
        else
        {
          ++v305;
          v340[0] = 0.0;
          double v181 = 0.0;
          if ((v339 & 0x80000000) != 0 || !__dst[48 * v339 + 11796])
          {
            int v159 = 6;
          }
          else
          {
            BOOL v319 = v178;
            if (Is_Legal(*(_DWORD *)v158))
            {
              *(unsigned char *)(a11 + v148 + 448) = 11;
              *(_DWORD *)(v287 + 4 * v148) = *((_DWORD *)v332 + 9);
              uint64_t v191 = Get_GNSS_SV_Str(*(unsigned int *)&__dst[v146]);
              EvCrt_v("ChanReset %d : SVGM  %s  SNR %d  QI %d  Sync %d %d  PR %d  iBest %d %d %d", v148, v191, __dst[v146 + 4], 6, v319, v307, v186, HIDWORD(v339), v339, v286);
              BOOL v178 = v319;
              int v159 = 6;
              v157 = __dst;
              uint64_t v154 = v314;
            }
            else
            {
              int v159 = 6;
              v157 = __dst;
              uint64_t v154 = v314;
              BOOL v178 = v319;
            }
          }
        }
        int v194 = *v158;
        if (v194 == 5)
        {
          int v195 = 20000000;
          int v196 = 50000000;
        }
        else
        {
          int v195 = 18000000;
          int v196 = 50000000;
          if (v194 != 4) {
            int v196 = 27000000;
          }
        }
        if (*v332 && *((int *)v308 + 1537) >= 9)
        {
          BOOL v197 = v186 >= v195 && v186 <= v196;
          uint64_t v152 = v331;
          if (!v197) {
            *(unsigned char *)(a1 + 4) = 1;
          }
        }
        else
        {
          uint64_t v152 = v331;
        }
      }
      else
      {
        if ((*((_WORD *)v158 + 4) & 0x308) == 0x208)
        {
          int v183 = 0;
          char v317 = 1;
          goto LABEL_306;
        }
        BOOL v178 = 0;
        v157 = __dst;
        LOWORD(v184) = *(_WORD *)&__dst[v147 + 4616];
        double v181 = ((double)(1023 * (*(_DWORD *)&__dst[v153 + 4] / 1023) - *(_DWORD *)&__dst[v153 + 4] + 1023)
              + (double)v184 * -0.0000152587891)
             * 293.052256;
        v340[0] = v181;
        *((unsigned char *)v342 + v148) = 0;
LABEL_309:
        int v159 = v327;
        uint64_t v152 = v331;
        uint64_t v154 = v314;
      }
    }
    if (v311 > *(unsigned __int16 *)&v157[v146 + 14]) {
      *(unsigned char *)(a1 + v148 + 1040) = 0;
    }
    if (v159 < 15)
    {
      if (v159 >= 11)
      {
        if (!v178) {
          goto LABEL_360;
        }
        goto LABEL_352;
      }
LABEL_294:
      *(_DWORD *)&v157[v151] = v159;
      *(double *)&v157[v150] = v181;
      if (v159 <= 1)
      {
        v180[128] = 0.0;
        v180[256] = 0.0;
      }
    }
    else
    {
      BOOL v321 = v178;
      int v328 = v159;
      uint64_t v198 = v154;
      double v199 = *(double *)&v157[v147 + 4632];
      uint64_t v200 = (double *)&v157[v150];
      *(double *)&v157[v150 + 3072] = v199;
      int SV_Carrier_Freq_I4 = Get_SV_Carrier_Freq_I4(*(_DWORD *)v158);
      double v202 = 299792458.0 / (double)SV_Carrier_Freq_I4;
      if (*(unsigned char *)(a1 + v148 + 1040))
      {
        int v203 = *(_DWORD *)(a1 + 4 * v148 + 16);
      }
      else
      {
        double v214 = v181 + 8993773.74;
        if (v181 > 329771.704) {
          double v214 = v181;
        }
        int v203 = (int)((v214 - v199) / v202);
        uint64_t v215 = a1 + 4 * v148;
        *(_DWORD *)(v215 + 16) = v203;
        *(_DWORD *)(v215 + 528) = SV_Carrier_Freq_I4 / 1000;
        *(unsigned char *)(a1 + v148 + 1040) = 1;
      }
      uint64_t v154 = v198;
      v200[384] = v199 + (double)v203 * v202;
      v157 = __dst;
      int v159 = v328;
      uint64_t v152 = v331;
      if (!v321)
      {
LABEL_360:
        int v213 = 10;
        goto LABEL_361;
      }
LABEL_352:
      double v335 = 0.0;
      uint64_t v329 = v146;
      uint64_t v204 = v153;
      uint64_t v205 = v151;
      char v206 = v158;
      uint64_t v207 = v156;
      uint64_t v208 = v147;
      int v209 = v159;
      uint64_t v210 = v152;
      uint64_t v211 = v154;
      BOOL v212 = R8_EQ(v340, &v335);
      uint64_t v154 = v211;
      uint64_t v152 = v210;
      v157 = __dst;
      if (v212) {
        int v213 = 8;
      }
      else {
        int v213 = v209;
      }
      uint64_t v147 = v208;
      uint64_t v156 = v207;
      unsigned int v158 = v206;
      uint64_t v151 = v205;
      uint64_t v153 = v204;
      uint64_t v146 = v329;
LABEL_361:
      *(_DWORD *)&v157[v151] = v213;
      *(double *)&v157[v150] = v181;
    }
    if (*((unsigned char *)v341 + v148)) {
      *((_WORD *)v158 + 4) |= 8u;
    }
    ++v148;
    v150 += 8;
    v151 += 4;
    v147 += 56;
    v146 += 36;
    v152 += 48;
    v153 += 56;
    v154 += 48;
    v156 += 48;
    if (v148 != 128) {
      continue;
    }
    break;
  }
  GM_Reject_Rep_SV((uint64_t)v157, 0x80u, v295);
  GM_Conv_Lock_Units(128, (uint64_t)__dst, (uint64_t)v300);
  GM_Cross_Check_Meas_Aiding((uint64_t)__dst);
  int v216 = __dst;
  uint64_t v217 = 0;
  uint64_t v218 = a1 + 1040;
  char v219 = __dst + 18012;
  int v220 = v290;
  do
  {
    if (*(int *)&v219[4 * v217] > 14)
    {
      if (!*((unsigned char *)v342 + v217))
      {
        uint64_t v222 = a1 + 4 * v217;
        *(_DWORD *)(v222 + 16) = 0;
        *(_DWORD *)(v222 + 528) = 0;
        *(unsigned char *)(v218 + v217) = 0;
        *(_DWORD *)&v219[4 * v217] = 15;
      }
    }
    else
    {
      uint64_t v221 = a1 + 4 * v217;
      *(_DWORD *)(v221 + 16) = 0;
      *(_DWORD *)(v221 + 528) = 0;
      *(unsigned char *)(v218 + v217) = 0;
    }
    ++v217;
  }
  while (v217 != 128);
  int v223 = *((_DWORD *)v308 + 1537);
  if (v305 > 2)
  {
    if (v223 >= 4)
    {
      int v223 = 3;
      *((_DWORD *)v308 + 1537) = 3;
      int v220 = 1;
    }
    *(_DWORD *)(a1 + 12) = 0;
    *(unsigned char *)(a1 + 4) = 1;
  }
  int v224 = *((_DWORD *)v332 + 9);
  *(_DWORD *)(a9 + 24) = v224;
  int v225 = *((_DWORD *)v332 + 10);
  *(_DWORD *)(a9 + 28) = v225;
  uint64_t v226 = *((void *)__dst + 2248);
  *(void *)(a9 + 8) = v226;
  __int16 v227 = *((_WORD *)v332 + 1);
  *(_WORD *)(a9 + 32) = v227;
  double v228 = *((double *)__dst + 2243);
  *(double *)(a9 + 40) = v228;
  uint64_t v229 = *((void *)__dst + 2250);
  *(void *)(a9 + 48) = v229;
  *(_DWORD *)a9 = v223;
  unsigned __int8 v230 = v332[52];
  *(unsigned char *)(a9 + 4) = v230;
  int v231 = *v332;
  *(unsigned char *)(a9 + 16) = v231;
  *(_DWORD *)(a9 + 76) = *((_DWORD *)v332 + 3);
  *(unsigned char *)(a9 + 80) = v332[18];
  *(_WORD *)(a9 + 82) = *((_WORD *)v332 + 8);
  *(_WORD *)(a9 + 84) = *((_WORD *)v332 + 10);
  *(void *)(a9 + 88) = *((void *)__dst + 2246);
  if (v220 && v223 >= 7)
  {
    Core_Save_ApxTime(v231 != 0, v223, v227, v225, v228);
    int v216 = __dst;
    int v224 = *((_DWORD *)v332 + 9);
    int v225 = *((_DWORD *)v332 + 10);
    uint64_t v226 = *((void *)__dst + 2248);
    int v223 = *((_DWORD *)v308 + 1537);
    LOBYTE(v231) = *v332;
    __int16 v227 = *((_WORD *)v332 + 1);
    unsigned __int8 v230 = v332[52];
    double v228 = *((double *)__dst + 2243);
    uint64_t v229 = *((void *)__dst + 2250);
  }
  *(_DWORD *)a10 = v224;
  *(_DWORD *)(a10 + 4) = v225;
  *(void *)(a10 + 8) = v226;
  *(_DWORD *)(a10 + 16) = v223;
  *(unsigned char *)(a10 + 22) = v231;
  *(_WORD *)(a10 + 24) = v227;
  *(unsigned char *)(a10 + 20) = v230;
  *(double *)(a10 + 32) = v228;
  *(void *)(a10 + 40) = v229;
  if (v338) {
    *(_DWORD *)(a10 + 48) += v338;
  }
  int v232 = (unsigned __int8 *)v296;
  if (*(unsigned char *)(a1 + 5)) {
    *(_DWORD *)(a10 + 52) = *(__int16 *)(a1 + 6);
  }
  uint64_t v233 = 0;
  *(unsigned char *)(a10 + 21) = v307;
  *(_DWORD *)(a10 + 56) = *((_DWORD *)v332 + 3);
  *(unsigned char *)(a10 + 60) = v332[18];
  *(_WORD *)(a10 + 62) = *((_WORD *)v332 + 8);
  *(_WORD *)(a10 + 64) = *((_WORD *)v332 + 10);
  *(void *)(a10 + 72) = *((void *)v216 + 2246);
  *(void *)(a10 + 80) = *((void *)v216 + 1472);
  *(_DWORD *)(a10 + 88) = *((_DWORD *)v216 + 2946);
  *(unsigned char *)(a10 + 92) = v299;
  int v234 = v216 + 12;
  uint64_t v235 = 7520;
  uint64_t v236 = 7776;
  do
  {
    *(_DWORD *)(a10 + 4 * v233 + 96) = *((_DWORD *)v234 - 3);
    unsigned int v237 = *(v234 - 11) - 2;
    if (v237 > 0xC) {
      char v238 = 0;
    }
    else {
      char v238 = byte_263D81320[(char)v237];
    }
    v239 = (unsigned char *)(a10 + v233);
    v239[608] = v238;
    v239[864] = *(v234 - 6);
    v240 = (_WORD *)(a10 + 2 * v233);
    v240[496] = *((_WORD *)v234 - 2);
    v239[1760] = *(v234 - 8);
    v239[1888] = v234[6];
    v239[2016] = *(v234 - 7);
    v239[2144] = v234[7];
    v240[1456] = *((_WORD *)v234 + 1);
    v240[1200] = *((_WORD *)v234 - 1);
    v240[1328] = *(_WORD *)v234;
    int v241 = (unsigned char *)(a10 + v236);
    *int v241 = *(v234 - 5);
    char v242 = (_WORD *)(a10 + v235);
    v242[448] = *((_WORD *)v234 + 4);
    v241[896] = v234[10];
    v239[2272] = *(v232 - 3);
    v240[1584] = *(_WORD *)(v232 - 7);
    v241[128] = *(v232 - 2);
    v241[256] = *(v232 - 1);
    v242[320] = *v232;
    v242[640] = *(_WORD *)(v232 - 13);
    v242[768] = *(_WORD *)(v232 - 11);
    v242[896] = *(_WORD *)(v232 - 9);
    if (*(_WORD *)(v232 - 5)) {
      *(_WORD *)(a10 + v235) = *(_WORD *)(v232 - 5);
    }
    v234 += 36;
    ++v233;
    v235 += 2;
    v232 += 56;
    ++v236;
  }
  while (v233 != 128);
  memcpy((void *)(a10 + 1248), v295, 0x200uLL);
  memcpy((void *)(a10 + 3424), __src, 0x400uLL);
  memcpy((void *)(a10 + 4448), v291, 0x400uLL);
  memcpy((void *)(a10 + 5472), v292, 0x400uLL);
  memcpy((void *)(a10 + 6496), v293, 0x400uLL);
  uint64_t v243 = 0;
  unint64_t v244 = 0;
  *(void *)&long long v245 = -1;
  *((void *)&v245 + 1) = -1;
  *(_OWORD *)(a10 + 736) = v245;
  *(_OWORD *)(a10 + 752) = v245;
  *(_OWORD *)(a10 + 768) = v245;
  *(_OWORD *)(a10 + 784) = v245;
  *(_OWORD *)(a10 + 800) = v245;
  *(_OWORD *)(a10 + 816) = v245;
  *(_OWORD *)(a10 + 832) = v245;
  *(_OWORD *)(a10 + 848) = v245;
  do
  {
    uint64_t v246 = a10 + 4 * v244;
    int v247 = *(_DWORD *)(v246 + 96);
    uint64_t result = Is_Legal(v247);
    if (result && *(int *)(v246 + 1248) >= 10)
    {
      BOOL v249 = v247 > 7u || ((1 << v247) & 0xC5) == 0;
      if (v249 && v244 <= 0x7E)
      {
        uint64_t v250 = v243;
        unint64_t v251 = v244;
        do
        {
          unint64_t v252 = v251 + 1;
          if (*(unsigned __int8 *)(a10 + v251 + 737) == 255
            && *(unsigned __int8 *)(a10 + v250 + 102) == BYTE2(v247)
            && *(unsigned __int8 *)(a10 + v250 + 100) == v247
            && *(int *)(a10 + 4 * v251 + 1252) >= 10)
          {
            *(unsigned char *)(a10 + v244 + 736) = v252;
            *(unsigned char *)(a10 + v251 + 737) = v244;
          }
          v250 += 4;
          ++v251;
        }
        while (v252 != 127);
      }
    }
    ++v244;
    v243 += 4;
  }
  while (v244 != 128);
  *(_DWORD *)a1 = *((_DWORD *)v332 + 9);
  return result;
}

void GM_CA_Jammer_Protection(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&v49[758] = *MEMORY[0x263EF8340];
  bzero(v47, 0x300uLL);
  int v10 = 12470;
  if (a1 <= 0xF)
  {
    if (((1 << a1) & 0xEFE6) != 0)
    {
      EvCrt_Illegal_switch_case("GM_CA_Jammer_Protection", 0x84Eu);
      return;
    }
    if (a1 == 4) {
      int v11 = 12264;
    }
    else {
      int v11 = 12470;
    }
    if (a1 == 3) {
      int v10 = 16700;
    }
    else {
      int v10 = v11;
    }
  }
  bzero(v45, 0x320uLL);
  uint64_t v12 = 0;
  int v13 = 0;
  long long v14 = (_DWORD *)(a3 + 12);
  long long v15 = (_WORD *)(a4 + 8);
  do
  {
    int v16 = *((_DWORD *)v15 - 2);
    if (!v16 || a1 != BYTE1(v16) || (*v15 & 8) == 0) {
      goto LABEL_35;
    }
    int v17 = *((_DWORD *)v15 - 2);
    BOOL v18 = a1 != 3 || v17 == 6;
    BOOL v19 = v18;
    if (v17 == 7 || !v19) {
      goto LABEL_35;
    }
    unsigned int v21 = (v16 >> 22) & 0xFFFFFFFC;
    if (v17 != 2) {
      unsigned int v21 = 0;
    }
    int v22 = *v14 / (int)(v10 - v21);
    unsigned int v23 = v22 % 1000 + (v22 % 1000 < 0 ? 0x3E8 : 0);
    unint64_t v24 = v23 / 5uLL;
    ++v45[v24];
    if (v23 <= 4)
    {
      ++v46;
LABEL_32:
      ++v45[(v24 + 1)];
      goto LABEL_33;
    }
    ++v45[(v24 - 1)];
    if (v23 - 995 > 4) {
      goto LABEL_32;
    }
    ++v45[0];
LABEL_33:
    double v25 = &v47[12 * v13];
    *(_WORD *)double v25 = v12;
    *((_WORD *)v25 + 2) = v22;
    *((_WORD *)v25 + 3) = v23;
    v25[3] = v24;
    int v26 = v13 + 1;
    if (v13 >= 63)
    {
      EvCrt_v("GM_CA_Jammer_Protection:  WARNING:  num_Dopplers >= DOPPLER_STORE_SIZE,  %d >= %d", v26, 64);
      int v13 = v26;
      goto LABEL_37;
    }
    ++v13;
LABEL_35:
    ++v12;
    v14 += 14;
    v15 += 18;
  }
  while (v12 != 128);
  if (v13 < 6) {
    return;
  }
LABEL_37:
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = v13;
  while (2)
  {
    uint64_t v30 = v45[v27];
    if ((int)v30 >= 6)
    {
      int v31 = 5 * v27;
      EvCrt_v("GM_CA_Jammer_Protection:  Jammer detected at Doppler % 1000Hz = %d   count %d", (5 * v27), v30);
      int32x4_t v32 = (__int16 *)v49;
      for (uint64_t i = v29; i; --i)
      {
        int v34 = *(v32 - 2) - v31;
        int v35 = v34 + 1000;
        if (v34 >= -500) {
          int v35 = *(v32 - 2) - v31;
        }
        if (v34 <= 499) {
          int v36 = v35;
        }
        else {
          int v36 = v34 - 1000;
        }
        if (v36 >= 0) {
          unsigned int v37 = v36;
        }
        else {
          unsigned int v37 = -v36;
        }
        if (v37 > 0xA) {
          goto LABEL_56;
        }
        if (*((unsigned char *)v32 - 8))
        {
          int v38 = *v32;
          if (v38 < 0) {
            int v38 = -v38;
          }
          if (v37 >= v38) {
            goto LABEL_56;
          }
          *(v32 - 1) = v31;
        }
        else
        {
          *((unsigned char *)v32 - 8) = 1;
          *(v32 - 1) = v31;
          ++v28;
        }
        *int32x4_t v32 = v36;
LABEL_56:
        v32 += 6;
      }
    }
    if (++v27 != 200) {
      continue;
    }
    break;
  }
  if (v28 >= 1)
  {
    int v39 = &v48;
    do
    {
      if (*((unsigned char *)v39 - 4))
      {
        uint64_t v40 = (unsigned __int16)*(v39 - 3);
        unsigned int v41 = (unsigned int *)(a4 + 36 * v40);
        *((_WORD *)v41 + 4) &= ~8u;
        *(unsigned char *)(a5 + v40) = 1;
        *(unsigned char *)(a6 + v40 + 448) = 33;
        *(_DWORD *)(a6 + 4 * v40 + 576) = a2;
        GNSS_SV_Str = Get_GNSS_SV_Str(*v41);
        EvCrt_v("ChanReset %d : SVGM  %s  Doppler %d  modKHz %d  Jammer %d  diff %d  SNR %d  JNR %d", v40, GNSS_SV_Str, *(v39 - 1), *v39, v39[1], v39[2], *((unsigned __int8 *)v41 + 4), *((unsigned __int8 *)v41 + 5));
      }
      v39 += 6;
      --v29;
    }
    while (v29);
  }
}

uint64_t GM_CrossCorr_Protection(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  if (a1 == 7)
  {
    uint64_t v7 = 39;
  }
  else
  {
    if (a1 != 4) {
      return result;
    }
    LOBYTE(result) = 1;
    uint64_t v7 = 63;
  }
  uint64_t v8 = 0;
  int v9 = ((unint64_t)(1473445877 * *(int *)(a4 + 12)) >> 32) - *(_DWORD *)(a4 + 12);
  int v10 = (v9 >> 13) + (v9 >> 31);
  uint64_t v11 = Num_Prn[a1 - 1] + a5 + 5976;
  while (1)
  {
    char v12 = v8 - 5 < 0x35 ? result : 0;
    if ((v12 & 1) == 0 && (*(char *)(v11 + v8) & 0x80000000) == 0)
    {
      int v13 = (v10 + *(__int16 *)(a5 + 48 * *(unsigned __int8 *)(v11 + v8) + 94)) % 1000;
      int v14 = v13 + 1000;
      if (v13 >= -500) {
        int v14 = (v10 + *(__int16 *)(a5 + 48 * *(unsigned __int8 *)(v11 + v8) + 94)) % 1000;
      }
      int v15 = v13 <= 499 ? v14 : v13 - 1000;
      if (v15 < 0) {
        int v15 = -v15;
      }
      if (v15 < 0xF || v15 <= 0x18 && *(unsigned __int8 *)(a3 + 4) < a2) {
        break;
      }
    }
    if (v7 == ++v8) {
      return 0;
    }
  }
  *(_WORD *)(a3 + 8) &= ~8u;
  return 1;
}

uint64_t GnssDbgMgr_DebugClassInd(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      if (*(unsigned __int16 *)(v2 + 5) <= 0xFF7u)
      {
        int v3 = *(unsigned __int8 *)(v2 + 3);
        if (v3 == 80)
        {
          uint64_t v4 = *(unsigned __int16 *)(a1 + 24);
        }
        else
        {
          if (v3 != 71) {
            goto LABEL_9;
          }
          uint64_t v4 = *(unsigned __int16 *)(a1 + 24);
        }
        GnssDbgMgr_HandleDbgData(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (!v2)
        {
LABEL_10:
          *(void *)(a1 + 16) = 0;
          return 0;
        }
LABEL_9:
        free((void *)v2);
        goto LABEL_10;
      }
    }
  }
  return 0;
}

uint64_t GnssDbgMgr_DefaultMsgHandler()
{
  return 0;
}

void GnssDbgMgr_HandleDbgData(uint64_t a1)
{
  __int16 v1 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v2)
  {
    unsigned int v4 = v3;
    uint64_t v5 = v2;
    __int16 v6 = v1;
    unsigned int v7 = GnssDbgMgr_LogSeverity(*(unsigned __int8 *)(v2 + 4));
    int v8 = v7;
    if ((v7 & 6) == 4)
    {
      if (g_LbsOsaTrace_Config >= v7)
      {
        size_t v9 = LbsOsaTrace_FormatBuffer(v4, v7, (const void *)(v5 + 8), (unsigned __int16)(v6 - 8), __str, 0x1010u);
        gnssOsa_PrintLog(__str, v8, 0, v9);
      }
    }
    else if (g_LbsOsaTrace_Config >= v7)
    {
      size_t v10 = *(unsigned __int16 *)(v5 + 5);
      if (v10 <= 0x3B5)
      {
        bzero(__dst, 0x3B7uLL);
        memcpy_s("GnssDbgMgr_HandleDbgData", 252, __dst, 0x3B7u, (const void *)(v5 + 8), v10);
        bzero(__str, 0x3E8uLL);
        unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        char v12 = LbsOsaTrace_ModuleString(v4);
        snprintf(__str, 0x3E7uLL, "%10u %s%c %s\n", v11, v12, dword_263D81330[v8 - 1], __dst);
        gnssOsa_PrintLog(__str, v8, 1, 0);
        if (v4 == 1 && (word_26A9A1988 & 0x200) != 0) {
          Gnm15_09UpdateNmeaData(__dst, v10);
        }
      }
    }
  }
}

void GnssDbgMgr_DestMissingHandler(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 8585216)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2) {
      free(v2);
    }
    *(void *)(a1 + 16) = 0;
  }
}

void GnssDbgMgr_WriteLog(size_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    unsigned int v4 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 174, 1, 0x20uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      __int16 v6 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 181, 1, a1);
      v5[2] = v6;
      if (v6)
      {
        *((_WORD *)v5 + 12) = a1;
        memcpy_s("GnssDbgMgr_WriteLog", 191, v6, a1, a2, a1);
        AgpsSendFsmMsg(131, 131, 8585216, v5);
      }
      else
      {
        free(v5);
      }
    }
  }
}

uint64_t GnssDbgMgr_LogSeverity(int a1)
{
  if (a1 <= 77)
  {
    if (a1 != 65)
    {
      if (a1 != 69) {
        return 4;
      }
      return 1;
    }
    return 3;
  }
  if (a1 == 78) {
    return 3;
  }
  if (a1 != 86)
  {
    if (a1 == 87) {
      return 2;
    }
    return 4;
  }
  return 5;
}

void *gnss::Device::Device(void *result)
{
  std::logic_error *result = &unk_270ED08F0;
  return result;
}

uint64_t std::function<void ()(gnss::Result)>::operator()(uint64_t a1, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke(uint64_t result)
{
  gp_GnssAdaptDeviceInstance = *(void *)(result + 32);
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  __int16 v1 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  std::function<void ()(gnss::Result)>::operator=((void *)v1 + 7, a1 + 40);
  unsigned __int8 v4 = 0;
  Ga05_GetPlatformType(&v4);
  if (v4 && !*((void *)v1 + 1))
  {
    gnssOsa_FlushLog();
    __assert_rtn("GnssAdaptDevice_block_invoke_2", "ga00GnssDevice.cpp", 91, "false && \"Invalid GPIO pointer\"");
  }
  gp_Comuint64_t m = gnss::GnssAdaptDevice::getComm(*((void *)v1 + 2));
  gp_Logger = gnss::GnssAdaptDevice::getLogger(*((void *)v1 + 3));
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)gp_Logger + 56))(gp_Logger);
  LbsOsaTrace_Init(v2);
  gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*((void *)v1 + 4));
  gp_HalExtensionIndusInstance = (uint64_t)gnss::GnssAdaptDevice::getHalExtensions(v1);

  return gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit(v1, 0);
}

void *std::function<void ()(gnss::Result)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t gnss::GnssAdaptDevice::getComm(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getComm", "gaGnssAdaptDevice.h", 303, "false && \"Comm null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getLogger(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getLogger", "gaGnssAdaptDevice.h", 304, "false && \"Logger null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getNvStore(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getNvStore", "gaGnssAdaptDevice.h", 305, "false && \"NvStorage null\"");
  }
  return this;
}

void *gnss::GnssAdaptDevice::getHalExtensions(gnss::GnssAdaptDevice *this)
{
  __int16 v1 = (const void *)*((void *)this + 5);
  if (!v1
  {
    gnssOsa_FlushLog();
    __assert_rtn("getHalExtensions", "gaGnssAdaptDevice.h", 309, "false && \"Failed to dynamic cast HalExtensions\"");
  }
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit(gnss::GnssAdaptDevice *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *((unsigned char *)this + 88) = 0;
    uint64_t result = gnss::GnssAdaptDevice::Ga00_01GnssInit((dispatch_semaphore_s **)this);
    if (result) {
      return result;
    }
    goto LABEL_15;
  }
  if (a2 != 1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 87, "Ga00_04HandleDeviceInit", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    goto LABEL_15;
  }
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 90) = 1;
  if ((gnss::GnssAdaptDevice::Ga00_02GnssDeInit((NSObject **)this) & 1) == 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga00_03GnssReset", 1296);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    goto LABEL_15;
  }
  gp_Logger = gnss::GnssAdaptDevice::getLogger(*((void *)this + 3));
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)gp_Logger + 56))(gp_Logger);
  LbsOsaTrace_Init(v3);
  __str[0] = 0;
  Ga05_GetPlatformType((unsigned __int8 *)__str);
  if (__str[0] && !*((void *)this + 1))
  {
    gnssOsa_FlushLog();
    __assert_rtn("Ga00_03GnssReset", "ga00GnssDevice.cpp", 569, "false && \"Invalid GPIO pointer\"");
  }
  gp_Comuint64_t m = gnss::GnssAdaptDevice::getComm(*((void *)this + 2));
  gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*((void *)this + 4));
  uint64_t result = gnss::GnssAdaptDevice::Ga00_01GnssInit((dispatch_semaphore_s **)this);
  if ((result & 1) == 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga00_03GnssReset", 1293);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
LABEL_15:
    gnss::GnssAdaptDevice::Ga07_06SetDefaultState(this, 0);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)this + 56);
    int v8 = *((void *)this + 20);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke;
    block[3] = &__block_descriptor_tmp_67;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)__str);
    dispatch_async(v8, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return (uint64_t)std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](__str);
  }
  return result;
}

void sub_263C374D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  __int16 v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
}

void gnss::GnssAdaptDevice::~GnssAdaptDevice(gnss::GnssAdaptDevice *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_270ED0AD8;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Destructor\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 73, "~GnssAdaptDevice");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v3 = *((void *)this + 19);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  void block[4] = this;
  dispatch_sync(v3, block);
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, &__block_literal_global);
  unsigned __int8 v4 = *((void *)this + 20);
  if (v4)
  {
    dispatch_release(v4);
    *((void *)this + 20) = 0;
  }
  if (g_GnssGlobalStaticQueue)
  {
    dispatch_release((dispatch_object_t)g_GnssGlobalStaticQueue);
    g_GnssGlobalStaticQueue = 0;
  }
  uint64_t v5 = *((void *)this + 19);
  if (v5)
  {
    dispatch_release(v5);
    *((void *)this + 19) = 0;
  }
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100]((void *)this + 41);
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100]((void *)this + 37);
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100]((void *)this + 33);
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100]((void *)this + 29);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100]((void *)this + 25);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100]((void *)this + 21);
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 120, *((void **)this + 16));
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 7);
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
}

{
  uint64_t vars8;

  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);
}

{
  uint64_t vars8;

  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);

  JUMPOUT(0x263E6EDB0);
}

void sub_263C378AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke(uint64_t a1)
{
  __int16 v1 = *(NSObject ***)(a1 + 32);

  return gnss::GnssAdaptDevice::Ga00_02GnssDeInit(v1);
}

uint64_t gnss::GnssAdaptDevice::Ga00_02GnssDeInit(NSObject **this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  gnss::GnssAdaptDevice::Ga01_06GnssReportPower(this, 0);
  gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning((uint64_t)this, 1);
  GNS_EaInitialize(0);
  GNS_EeInitialize(0);
  Gnm_RegisterApiStatusCb(0);
  if (!gnssOsa_DeinitCountingSem(this + 45) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StopSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga00_02GnssDeInit", 1540);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if (g_GnsInit && (g_GnsInit = 0, (AgpsShutdownAllFsm() & 1) != 0))
  {
    *(void *)__str = this + 18;
    int v6 = 0;
    std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__str, 8uLL);
    return 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga00_02GnssDeInit", 1296);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
}

void sub_263C37AEC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke_2()
{
  gp_GnssAdaptDeviceInstance = 0;
}

void gnss::GnssAdaptDevice::reset(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_12;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
    dispatch_async(v2, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v5);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "reset", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 90))
  {
    uint64_t v2 = *(NSObject **)(v1 + 160);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2;
    block[3] = &__block_descriptor_tmp_8;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 40);
    dispatch_async(v2, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  }
  else
  {
    std::function<void ()(gnss::Result)>::operator=((void *)(v1 + 56), a1 + 40);
    gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit((gnss::GnssAdaptDevice *)v1, 1);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Reset Triggered\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 73, "reset_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

uint64_t ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v1, 0);
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
}

void gnss::GnssAdaptDevice::clear(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_21_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
    dispatch_async(v2, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v5);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "clear", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "clear_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    uint64_t v4 = a1 + 40;
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, v4);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v16, (uint64_t)"clear_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "clear_block_invoke", 2056);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v6 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "clear_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
      return;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, v4);
    v15[3] = 0;
    gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v14);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v14);
    unsigned int v9 = Gnm_ClearGNSSCache(0x10000);
    if (v9)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "clear_block_invoke", 257, v9);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v9, 0x10u);
      if (g_LbsOsaTrace_Config >= 5) {
        goto LABEL_23;
      }
    }
    else
    {
      if (!gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 360), 0x1F4u))
      {
        if (g_LbsOsaTrace_Config < 4) {
          return;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: COLD\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "clear_block_invoke");
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config < 5) {
          return;
        }
LABEL_23:
        bzero(__str, 0x3C6uLL);
        uint64_t v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "clear_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
        return;
      }
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "clear_block_invoke", 257);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
      if (g_LbsOsaTrace_Config >= 5) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v17, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v17, (uint64_t)"clear_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v17);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "clear_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "clear_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C38744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!*(void *)(a3 + 24))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    goto LABEL_7;
  }
  if (*(void *)(a4 + 24))
  {
    uint64_t v6 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
    block[3] = &__block_descriptor_tmp_25;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a4);
    void v10[4] = a2;
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
LABEL_7:
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "start", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C38984(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "start_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    unsigned int v3 = g_LbsOsaTrace_Config;
  }
  if (v3 >= 3)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    double v6 = *(double *)&g_MacClockTicksToMsRelation;
    snprintf(getVersionString::a_Version, 0x200uLL, "Device Interface %.2f,host,%s,FW,%s", 25.02, "v2.37.0.2024-10-12", ga_HwVersion);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v2 + 24) + 72))(*(void *)(v2 + 24));
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v2 + 40) + 64))(*(void *)(v2 + 40));
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #SessionStart,%s ,logmask,%llu, dbgmask,%llu\n", (unint64_t)(v6 * (double)v5), "ADP", 77, "start_block_invoke", getVersionString::a_Version, v7, v8);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v27, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v27, (uint64_t)"start_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v27);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "start_block_invoke", 2056);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "start_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v2 + 144);
      if ((v13 & 0x40) != 0)
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 72);
        gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 2, (uint64_t)v24);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
        uint64_t v16 = *(void *)(a1 + 104);
        uint64_t v20 = 0;
        int v21 = 1000;
        *(void *)int v22 = 0;
        *(void *)((char *)&v22[1] + 2) = 0;
        *(void *)&v22[5] = v16;
        __int16 v23 = 0;
        unsigned int v17 = Gnm_RegisterPeriodicFix(0, 0, (uint64_t)gnss::GnssAdaptDevice::Ga06_00GnssPeriodicFixCB, (2 * (v13 & 1)) | (4 * ((v13 & 0x3A) != 0)), (unsigned int *)&v20);
        if (v17)
        {
          gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v17, 2u);
          if (!g_LbsOsaTrace_Config) {
            return;
          }
          bzero(__str, 0x3C6uLL);
          uint64_t v18 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RegPeriodicFix,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "start_block_invoke", 257, v17);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config < 5) {
            return;
          }
        }
        else
        {
          *(unsigned char *)(v2 + 89) = 1;
          *(unsigned char *)(v2 + 93) = 0;
          if (g_LbsOsaTrace_Config < 5) {
            return;
          }
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v19 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "start_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
        return;
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 8, (uint64_t)v26, (uint64_t)"start_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
      if (g_LbsOsaTrace_Config > 1)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v14 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid PVTM Config\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 87, "start_block_invoke", 258);
        gnssOsa_PrintLog(__str, 2, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v15 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "start_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v28, (uint64_t)"start_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v28);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "start_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "start_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C390E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

char *getVersionString()
{
  return getVersionString::a_Version;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_263C39244(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnss::GnssAdaptDevice::stop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 24))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    goto LABEL_7;
  }
  if (*(void *)(a3 + 24))
  {
    uint64_t v4 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
    block[3] = &__block_descriptor_tmp_31;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
    return;
  }
  if (g_LbsOsaTrace_Config)
  {
LABEL_7:
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "stop", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C394C0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "stop_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    unsigned int v3 = g_LbsOsaTrace_Config;
  }
  if (v3 >= 3)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    double v6 = *(double *)&g_MacClockTicksToMsRelation;
    snprintf(getVersionString::a_Version, 0x200uLL, "Device Interface %.2f,host,%s,FW,%s", 25.02, "v2.37.0.2024-10-12", ga_HwVersion);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v2 + 24) + 72))(*(void *)(v2 + 24));
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v2 + 40) + 64))(*(void *)(v2 + 40));
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #SessionStop,%s ,logmask,%llu, dbgmask,%llu\n", (unint64_t)(v6 * (double)v5), "ADP", 77, "stop_block_invoke", getVersionString::a_Version, v7, v8);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    uint64_t v9 = a1 + 40;
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, v9);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v19, a1 + 72);
      gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 1, (uint64_t)v18);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v19);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
      int v10 = gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(v2, 0);
      if (g_LbsOsaTrace_Config > 3)
      {
        int v11 = v10;
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: StopResp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "stop_block_invoke", v11);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v13 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "stop_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v21, v9);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v21, (uint64_t)"stop_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v21);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v20, a1 + 72);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v20, (uint64_t)"stop_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v20);
      if (g_LbsOsaTrace_Config > 3)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v16 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Stop Rcvd,session inactive\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "stop_block_invoke");
        gnssOsa_PrintLog(__str, 4, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v17 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "stop_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v22, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v22, (uint64_t)"stop_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v22);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "stop_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v15 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "stop_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C39A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 89)) {
    return 14;
  }
  if (a2 == 1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Internal Stop Request\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga00_08GnssStopPositioning");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 91));
  }
  uint64_t v4 = Gnm_StopPosnReq(0);
  if (v4)
  {
    uint64_t v5 = v4;
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(a1, v4, 1u);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StopPosReq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga00_08GnssStopPositioning", 257, v5);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Processed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga00_08GnssStopPositioning");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (gnssOsa_SemWaitTimeOut(*(NSObject **)(a1 + 360), 0x1F4u))
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StopReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga00_08GnssStopPositioning", 257);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      uint64_t v5 = 11;
    }
    else
    {
      uint64_t v5 = 0;
    }
    *(unsigned char *)(a1 + 89) = 0;
  }
  return v5;
}

void gnss::GnssAdaptDevice::deleteGnssData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v4 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_51;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
    void v7[4] = a2;
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "deleteGnssData", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v33, (uint64_t)"deleteGnssData_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "deleteGnssData_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "deleteGnssData_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
    return;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  if (g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Flags,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "deleteGnssData_block_invoke", v4);
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  if ((v4 & 0x4000) == 0)
  {
    int v6 = 0;
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Eph\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  int v6 = 1;
  if ((v4 & 2) != 0)
  {
LABEL_15:
    v6 |= 2u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Alm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
LABEL_17:
  if ((v4 & 4) != 0)
  {
    v6 |= 4u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Pos\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 8) != 0)
  {
    v6 |= 8u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x10) != 0)
  {
    v6 |= 0x10u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Iono\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x20) != 0)
  {
    v6 |= 0x20u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: UTC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x40) != 0)
  {
    v6 |= 0x40u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SvHealth\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x80) != 0)
  {
    v6 |= 0x100u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v16 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Clear_GNSS_FW_NV_Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x400) != 0)
  {
    v6 |= 0x10000u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v17 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Cold\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x800) != 0)
  {
    v6 |= 0x20000u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v18 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Warm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x1000) != 0)
  {
    v6 |= 0x40000u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v19 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Factory\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x100) != 0)
  {
    v6 |= 0x200u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v20 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RTI\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x200) != 0)
  {
    v6 |= 0x400u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v21 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ORB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 73, "deleteGnssData_block_invoke");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if ((v4 & 0x2000) == 0)
  {
    if (!v6)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v32, (uint64_t)"deleteGnssData_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
      if (g_LbsOsaTrace_Config > 1)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v22 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx field 0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 87, "deleteGnssData_block_invoke", 770);
        gnssOsa_PrintLog(__str, 2, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v23 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "deleteGnssData_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
      return;
    }
    goto LABEL_57;
  }
  v6 |= 0x800u;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v24 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME_TTICK\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 4, 1, 0);
LABEL_57:
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v25 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fields,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "deleteGnssData_block_invoke", v6);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v30, a1 + 40);
  v31[3] = 0;
  gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v30);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v30);
  unsigned int v26 = Gnm_ClearGNSSCache(v6);
  if (v26)
  {
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v26, 0x10u);
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v27 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "deleteGnssData_block_invoke", 257, v26);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    if (g_LbsOsaTrace_Config < 5) {
      return;
    }
    goto LABEL_69;
  }
  if (!gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 360), 0x1F4u))
  {
    if (g_LbsOsaTrace_Config < 5) {
      return;
    }
    goto LABEL_69;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v28 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "deleteGnssData_block_invoke", 257);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
  if (g_LbsOsaTrace_Config >= 5)
  {
LABEL_69:
    bzero(__str, 0x3C6uLL);
    uint64_t v29 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "deleteGnssData_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void sub_263C3AC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(gnss::GnssAdaptDevice *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke;
  v3[3] = &unk_2655E6DD0;
  v3[4] = &v4;
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = gp_GnssAdaptDeviceInstance;
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga00_01GnssInit(dispatch_semaphore_s **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!GNS_Initialize()) {
    return 0;
  }
  if (GNS_EaInitialize((uint64_t)gnss::GnssAdaptDevice::Ga03_00RegisterGnsEaStatusResponse) != 1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EaInit Resp,%u\n", v9);
      goto LABEL_14;
    }
    return 0;
  }
  if (GNS_EeInitialize((uint64_t)gnss::GnssAdaptDevice::Ga04_00RegisterGnsEeStatusResponse) != 1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EeInit Resp,%u\n", v10);
      goto LABEL_14;
    }
    return 0;
  }
  char v12 = 0;
  if ((Ga05_GetPlatformType((unsigned __int8 *)&v12) & 1) == 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid Pltfm Type\n");
      goto LABEL_14;
    }
    return 0;
  }
  if (Gnm_HwInitialize(v12, (uint64_t)gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd, 0))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitStatusCb Resp,%u\n", v8);
LABEL_14:
      gnssOsa_PrintLog(__str, 1, 1, 0);
      return 0;
    }
    return 0;
  }
  if (Gnm_RegisterApiStatusCb((uint64_t)gnss::GnssAdaptDevice::Ga07_17RegisterGnmStatusResponse))
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ApiStatusCb Resp,%u\n", v11);
    goto LABEL_14;
  }
  if (!gnssOsa_SemInit(this + 45, 0))
  {
    snprintf(v13, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga00_01GnssInit", 508, "Semaphore creation failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "Ga00_01GnssInit", v13);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Ga00_01GnssInit", "ga00GnssDevice.cpp", 508, "false && \"Semaphore creation failed\"");
  }
  if (g_LbsOsaTrace_Config < 3) {
    return 1;
  }
  bzero(__str, 0x3C6uLL);
  unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  snprintf(getVersionString::a_Version, 0x200uLL, "Device Interface %.2f,host,%s,FW,%s", 25.02, "v2.37.0.2024-10-12", ga_HwVersion);
  uint64_t v5 = (*(uint64_t (**)(dispatch_semaphore_s *))(*(void *)this[3] + 72))(this[3]);
  uint64_t v6 = (*(uint64_t (**)(dispatch_semaphore_s *))(*(void *)this[5] + 64))(this[5]);
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #Init,%s ,logmask,%llu, dbgmask,%llu\n", v4, "ADP", 77, "Ga00_01GnssInit", getVersionString::a_Version, v5, v6);
  uint64_t v2 = 1;
  gnssOsa_PrintLog(__str, 3, 1, 0);
  return v2;
}

void gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd(gnss::GnssAdaptDevice *a1, int a2, char *a3)
{
  char v5 = (char)a1;
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    gnss::GnssAdaptDevice::Ga07_05HandleGnssHwStatusInd(DeviceInstance, v5, a2, a3);
  }
}

uint64_t ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v1, 8);
}

void gnss::GnssAdaptDevice::Ga00_10GnssSetHwVersionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unsigned __int8 v4 = 0;
  Ga05_GetPlatformType(&v4);
  if (v4)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid Pltfm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "Ga00_10GnssSetHwVersionInfo", 770, v4);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else
  {
    snprintf(ga_HwVersion, 0x200uLL, "%s", (const char *)(a2 + 2));
  }
}

uint64_t newGnssDevice(void *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  if (*a1) {
    operator new();
  }
  return 0;
}

void sub_263C3B7B0(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  uint64_t v16 = v9;
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](a2);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](a3);
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(v10, *(void **)(v8 + 128));
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(v16, *(void **)(v8 + 104));
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  uint64_t v18 = *(void *)(v8 + 48);
  *(void *)(v8 + 48) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 48))(v18);
  }
  uint64_t v19 = *(void *)(v8 + 40);
  *(void *)(v8 + 40) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(v8 + 32);
  *(void *)(v8 + 32) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(v8 + 24);
  *(void *)(v8 + 24) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(v8 + 16);
  *(void *)(v8 + 16) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(v8 + 8);
  *(void *)(v8 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x263E6EDB0](v8, 0x10A1C409636C9D0);
  _Unwind_Resume(a1);
}

uint64_t getGnssDeviceVersion()
{
  return 2502;
}

uint64_t gnss::Device::getObjectVersionNumber(gnss::Device *this)
{
  return 2502;
}

uint64_t gnss::Device::setEmergencyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::Device::startEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::Device::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  std::exception::~exception(this);

  JUMPOUT(0x263E6EDB0);
}

void std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, a2[1]);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 9);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 5);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, a2[1]);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 5);
    operator delete(a2);
  }
}

void *std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unsigned __int8 v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263C3C578(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  char v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    uint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

BOOL KFSt_Meas_Update(unsigned int a1, unsigned int a2, unsigned __int8 *a3, double *a4, _WORD *a5, double a6)
{
  v18[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a3 + 1) < 1) {
    return 0;
  }
  a3[16] = 0;
  if (*a3)
  {
    double v9 = *((double *)a3 + 4);
    double v10 = a6 - *((double *)a3 + 3);
    memset(v15, 0, sizeof(v15));
    double v14 = 0.0;
    *((double *)a3 + 6) = v10;
    uint64_t v16 = 0;
    *((void *)v15 + a1) = 0x3FF0000000000000;
    *((double *)v15 + a2) = v10;
    umeas((BOOL)a4, a2, v9, (double *)v15, v18, v17, &v14, *((double *)a3 + 7));
    double v11 = v14;
    if (v14 <= 0.0)
    {
      int v12 = 0;
      *a3 = 0;
      a3[16] = 1;
      ++*a5;
    }
    else
    {
      double v11 = *((double *)a3 + 4) * (v14 * (v18[a2] * v18[a2]));
      int v12 = *a3;
    }
    *((double *)a3 + 8) = v11;
  }
  else
  {
    int v12 = 0;
  }
  return v12 != 0;
}

uint64_t Taylor_sin_cos(uint64_t result, int *a2, int *a3)
{
  if ((int)result < 1)
  {
    if ((int)result >= -51472)
    {
      unsigned int v11 = (unsigned __int16)(1029 - result) / 0x80Bu;
      int v12 = g_Table_sinQ15[v11];
      int v9 = g_Table_sinQ15[25 - v11];
      int v6 = result + ((16471 * v11) >> 3);
      int v4 = -v12;
      goto LABEL_9;
    }
    int v7 = ((int)result + 103973) / 2059;
    int v8 = g_Table_sinQ15[v7];
    int v5 = g_Table_sinQ15[25 - v7];
    int v6 = result + 103973 - ((16471 * v7) >> 3) - 1029;
    int v4 = -v8;
  }
  else
  {
    if (result <= 0xC910)
    {
      unint64_t v10 = (result + 1029) / 0x80BuLL;
      int v4 = g_Table_sinQ15[v10];
      int v9 = g_Table_sinQ15[(25 - v10)];
      int v6 = result - ((16471 * v10) >> 3);
      goto LABEL_9;
    }
    int v3 = (103973 - (int)result) / 2059;
    int v4 = g_Table_sinQ15[v3];
    int v5 = g_Table_sinQ15[25 - v3];
    int v6 = result + ((16471 * v3) >> 3) - 102944;
  }
  int v9 = -v5;
LABEL_9:
  unsigned int v13 = (v6 * v6) >> 16;
  *a2 = v4 + ((int)(v6 * v9 - v13 * v4) >> 15);
  *a3 = v9 - ((int)(v6 * v4 + v13 * v9) >> 15);
  return result;
}

BOOL HswUtil_AddNmeaCS(char *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v4 = *a3;
  unsigned int v5 = v4 + 4;
  if ((int)v4 + 4 <= a2)
  {
    if (v4 < 2)
    {
      int v7 = 0;
    }
    else
    {
      LOBYTE(v7) = 0;
      uint64_t v8 = v4 - 1;
      int v9 = a1 + 1;
      do
      {
        char v10 = *v9++;
        LOBYTE(v7) = v10 ^ v7;
        --v8;
      }
      while (v8);
      int v7 = v7;
    }
    snprintf(&a1[v4], a2 - v4, "*%02x\n", v7);
    *a3 += 4;
  }
  return v5 <= a2;
}

void Pre_Positioning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v381 = v12;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v19 = v10;
  uint64_t v430 = *MEMORY[0x263EF8340];
  *(unsigned char *)(v20 + 332) = 0;
  int __dst = *(__int16 *)(v10 + 6);
  double v21 = *(double *)(v10 + 16);
  v406[2] = *(_OWORD *)(v10 + 24);
  v407[0] = *(double *)(v10 + 40);
  uint64_t v390 = v22;
  int v23 = *v22;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)(v15 + 18);
  *(_WORD *)(v10 + 6) = *(_WORD *)(v15 + 62);
  *(_DWORD *)(v20 + 324) = *(_DWORD *)(v15 + 56);
  *(_DWORD *)(v20 + 208) = *(_DWORD *)(v15 + 32);
  *(void *)(v20 + 128) = *(void *)(v15 + 48);
  *(_DWORD *)(v20 + 328) = *(_DWORD *)(v15 + 204);
  *(void *)uint64_t v20 = *(void *)(v15 + 224);
  *(void *)(v20 + 8) = *(void *)(v15 + 232);
  *(void *)(v20 + 16) = *(void *)(v15 + 240);
  *(double *)(v20 + 24) = *(double *)(v15 + 240) - *(double *)(v15 + 248);
  long long v24 = *(_OWORD *)(v15 + 80);
  *(void *)(v10 + 40) = *(void *)(v15 + 96);
  *(_OWORD *)(v10 + 24) = v24;
  uint64_t v25 = *(void *)(v15 + 120);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v15 + 104);
  *(void *)(v20 + 48) = v25;
  *(_OWORD *)(v20 + 136) = *(_OWORD *)(v15 + 256);
  long long v27 = *(_OWORD *)(v15 + 288);
  long long v26 = *(_OWORD *)(v15 + 304);
  uint64_t v28 = *(void *)(v15 + 320);
  *(_OWORD *)(v20 + 152) = *(_OWORD *)(v15 + 272);
  *(void *)(v20 + 200) = v28;
  *(_OWORD *)(v20 + 184) = v26;
  *(_OWORD *)(v20 + 168) = v27;
  long long v29 = *(_OWORD *)(v15 + 336);
  *(void *)(v20 + 72) = *(void *)(v15 + 352);
  *(_OWORD *)(v20 + 56) = v29;
  double v30 = *(double *)(v15 + 152);
  uint64_t v383 = v11;
  v384 = (double *)v20;
  *(double *)(v20 + 96) = v30;
  uint64_t v31 = v20 + 96;
  *(void *)(v20 + 80) = *(void *)(v15 + 360);
  *(void *)(v20 + 88) = *(void *)(v15 + 992);
  double v32 = *(double *)(v15 + 160);
  *(double *)(v20 + 112) = v32;
  uint64_t v33 = (double *)(v20 + 112);
  double v34 = *(double *)(v15 + 168);
  *(double *)(v20 + 120) = v34;
  uint64_t v35 = (double *)(v20 + 120);
  *(void *)&__src[0] = 0;
  *(void *)(v20 + 104) = *(void *)(v15 + 184);
  double v36 = 0.0;
  double v37 = 0.0;
  if (*(unsigned char *)(v11 + 17192)) {
    double v37 = (double)-*(_DWORD *)(v11 + 17132) * 9.31322575e-10;
  }
  uint64_t v370 = v11 + 17132;
  if (*(int *)(v11 + 47496) >= 1) {
    double v36 = *(double *)(v11 + 47512) * 0.000000001;
  }
  uint64_t v371 = v11 + 47496;
  *(void *)&__b[0] = 0;
  if (R8_EQ((const double *)v31, (const double *)__b))
  {
    *(void *)&__b[0] = 0;
    if (R8_EQ(v33, (const double *)__b))
    {
      *(void *)&__b[0] = 0;
      double v38 = 0.0;
      if (R8_EQ(v35, (const double *)__b)) {
        goto LABEL_12;
      }
      double v38 = v34 + v36;
    }
    else
    {
      double v38 = v32 + v37;
    }
    *(double *)__src = v38;
  }
  else
  {
    *(double *)__src = v30;
    double v38 = v30;
  }
LABEL_12:
  *(void *)&__b[0] = 0;
  if (!R8_EQ((const double *)__src, (const double *)__b))
  {
    *(void *)&__b[0] = 0;
    if (R8_EQ((const double *)v31, (const double *)__b))
    {
      *(double *)uint64_t v31 = v38;
      double v30 = v38;
    }
    *(void *)&__b[0] = 0;
    if (R8_EQ(v33, (const double *)__b))
    {
      double v32 = v38 - v37;
      *uint64_t v33 = v38 - v37;
    }
    *(void *)&__b[0] = 0;
    if (R8_EQ(v35, (const double *)__b)) {
      *uint64_t v35 = v38 - v36;
    }
  }
  *(void *)&__b[0] = 0;
  if (R8_EQ((const double *)__src, (const double *)__b))
  {
    double v39 = 0.0;
  }
  else
  {
    *(void *)&v416[0] = 0;
    double v39 = 0.0;
    if (!R8_EQ((const double *)v31, (const double *)v416))
    {
      *(void *)&__b[0] = 0;
      if (!R8_EQ(v33, (const double *)__b))
      {
        double v40 = v30 - v32;
        double v41 = vabdd_f64(v30 - v32, v37);
        if (v41 > 0.0000000333564095)
        {
          *uint64_t v33 = v38 - v37;
          EvCrt_v("PP_SetReceiverPos:  ClkGlon deviation %f m,  New ClkGlon %f m", (v40 - v37) * 299792458.0, (v38 - v37) * 299792458.0);
          double v39 = v41;
        }
      }
      *(void *)&__b[0] = 0;
      if (!R8_EQ(v35, (const double *)__b))
      {
        double v42 = *(double *)v31 - *v35;
        double v43 = vabdd_f64(v42, v36);
        if (v43 > 0.0000000333564095)
        {
          *uint64_t v35 = v38 - v36;
          double v39 = v39 + v43;
          EvCrt_v("PP_SetReceiverPos:  ClkBDS deviation %f m,  New ClkBDS %f m", (v42 - v36) * 299792458.0, (v38 - v36) * 299792458.0);
        }
      }
    }
  }
  v384[39] = Zen_Trop_Delay_STANAG_4294(v384[3]);
  double v44 = *(double *)(v16 + 864);
  v384[27] = v44;
  double v45 = *(double *)(v16 + 872);
  v384[28] = v45;
  *(_OWORD *)(v384 + 29) = *(_OWORD *)(v16 + 840);
  double v46 = *(double *)(v16 + 920);
  double v47 = *(double *)(v16 + 904);
  v48.f64[0] = *(float64_t *)(v16 + 888);
  float64_t v49 = *(double *)(v16 + 896);
  v384[35] = *(double *)(v16 + 912);
  *((_DWORD *)v384 + 74) = *(_DWORD *)(v16 + 12);
  *(void *)(v31 + 204) = *(void *)(v16 + 24);
  if (v39 > 0.0)
  {
    double v50 = v39 * 0.5 * 299792458.0 * (v39 * 0.5 * 299792458.0);
    double v51 = sqrt(v50 + v44 * v44);
    double v52 = sqrt(v50 + v45 * v45);
    v384[27] = v51;
    v384[28] = v52;
    double v386 = v49;
    float64_t v388 = v48.f64[0];
    EvCrt_v("PP_SetReceiverPos:  New  B_Acc %f -> %f  T_Acc %f -> %f", v44, v51, v45, v52);
    float64_t v49 = v386;
    v48.f64[0] = v388;
  }
  if (*(unsigned char *)(v16 + 388))
  {
    double v53 = 0.0;
    uint64_t v54 = 18;
    do
    {
      double v53 = v53 + *(double *)(v16 + 8 * v54) * *(double *)(v16 + 8 * v54);
      unint64_t v55 = v54 - 15;
      --v54;
    }
    while (v55 > 1);
    double v56 = sqrt(v53) * *(double *)(v16 + 72);
    double v47 = v47 + v56;
    v48.f64[0] = v48.f64[0] + v56;
  }
  int v57 = *(_DWORD *)(v19 + 8);
  if (!v57)
  {
    int v57 = *((_DWORD *)v384 + 52);
    *(_DWORD *)(v19 + 8) = v57;
  }
  *((_DWORD *)v384 + 84) = v57;
  *(double *)(v19 + 16) = v384[16] - v384[12];
  double v58 = *(double *)(v18 + 1712) * 99930819.3;
  if (*(_DWORD *)v18 || *(_DWORD *)(v18 + 8))
  {
    unsigned int v59 = *(_DWORD *)(v31 + 204);
    float64x2_t v60 = (float64x2_t)xmmword_263D814D0;
    double v61 = 10.0;
    double v62 = 5.0;
    switch(v59)
    {
      case 0u:
      case 1u:
        goto LABEL_47;
      case 2u:
        break;
      case 3u:
        float64x2_t v60 = (float64x2_t)xmmword_263D81520;
        double v61 = 15.0;
        break;
      case 4u:
        float64x2_t v60 = (float64x2_t)xmmword_263D81510;
        double v61 = 25.0;
        break;
      case 5u:
        float64x2_t v60 = (float64x2_t)xmmword_263D81500;
        *(double *)&uint64_t v63 = 50.0;
        goto LABEL_44;
      case 6u:
        float64x2_t v60 = (float64x2_t)xmmword_263D814F0;
        *(double *)&uint64_t v63 = 200.0;
LABEL_44:
        double v61 = *(double *)&v63;
        break;
      case 7u:
        float64x2_t v60 = (float64x2_t)xmmword_263D814E0;
        double v61 = 350.0;
        break;
      case 8u:
        float64x2_t v60 = (float64x2_t)vdupq_n_s64(0x412E848000000000uLL);
        double v61 = 1000000.0;
        break;
      default:
        double v62 = 1000000.0;
LABEL_47:
        int32x2_t v64 = vdup_n_s32(v59 < 2);
        v65.i64[0] = v64.u32[0];
        v65.i64[1] = v64.u32[1];
        float64x2_t v60 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v65, 0x3FuLL)), (int8x16_t)xmmword_263D814C0, (int8x16_t)vdupq_n_s64(0x412E848000000000uLL));
        double v61 = v62;
        break;
    }
  }
  else
  {
    float64x2_t v60 = (float64x2_t)xmmword_263D814C0;
    double v61 = 5.0;
  }
  if (v46 > v58)
  {
    v384[13] = *(double *)(v18 + 1704);
    double v46 = v58;
  }
  v372 = v384 + 4;
  v373 = (float64x2_t *)(v19 + 24);
  v384[32] = v46 * 5.25503547;
  if (v47 > v61)
  {
    if (*(_DWORD *)(v31 + 204) < 4u || v384[10] < v61 + v61)
    {
      v384[10] = 0.0;
      *((_OWORD *)v384 + 3) = 0u;
      *((_OWORD *)v384 + 4) = 0u;
      _OWORD *v372 = 0u;
    }
    double v47 = v61;
  }
  uint64_t v382 = v19;
  double v66 = sqrt(v47 * v47 + 0.0 + v46 * v46) * 5.25503547;
  if (v66 <= 1.0) {
    double v66 = 1.0;
  }
  v384[31] = v66;
  v48.f64[1] = v49;
  *(float64x2_t *)(v31 + 168) = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v48, v60), (int8x16_t)v60, (int8x16_t)v48), (float64x2_t)vdupq_n_s64(0x4015052804935343uLL));
  if (v66 < 21840.0) {
    __int16 v67 = (int)(v66 * 3.0) + 1;
  }
  else {
    __int16 v67 = -1;
  }
  *((_WORD *)v384 + 144) = v67;
  if (v46 < 4156.01381) {
    __int16 v68 = (int)(v46 * 15.7651064) + 1;
  }
  else {
    __int16 v68 = -1;
  }
  *((_WORD *)v384 + 145) = v68;
  if (v47 < 4156.01381) {
    __int16 v69 = (int)(v47 * 15.7651064) + 1;
  }
  else {
    __int16 v69 = -1;
  }
  *((_WORD *)v384 + 146) = v69;
  *(int64x2_t *)(v31 + 264) = vdupq_n_s64(0xC023CCCCCCCCCCCDLL);
  double v70 = v384[27];
  double v71 = v384[29];
  v384[43] = v70;
  v384[44] = v71;
  *((_WORD *)v384 + 188) = 0;
  uint64_t v387 = v31 + 168;
  if (v71 <= 1000.0 && v70 <= 1000.0 && !v23 && *((int *)v384 + 74) > 2)
  {
    BOOL v377 = 0;
    goto LABEL_118;
  }
  __int16 v392 = 0;
  int v391 = 0;
  *(void *)&v416[0] = 0;
  *(void *)v414 = 0;
  *(void *)&v412[0] = 0;
  *(void *)&long long v394 = 0;
  BOOL v377 = 0;
  if (!Core_Get_GPS_TimePos(*((_DWORD *)v384 + 52), (unsigned char *)&v392 + 1, &v392, &v391, (double *)v416, (double *)v414, (uint64_t)__b, (double *)v412, (double *)&v394))goto LABEL_118; {
  int v72 = v23;
  }
  *(void *)&v411[0] = 0;
  *(void *)&v408[0] = 0;
  unsigned int v73 = v391 - 3;
  BOOL v377 = (v391 - 3) < 2;
  int v74 = HIBYTE(v392);
  double v75 = *(double *)v414;
  double v76 = *(double *)v412;
  if (*(double *)v412 <= 150000.0 || v392 == 0) {
    int v78 = v392;
  }
  else {
    int v78 = 0;
  }
  if (*((int *)v384 + 74) > 2 || *(unsigned __int8 *)(v382 + 4) > 0x63u || !v78 || v384[29] >= 1000.0) {
    goto LABEL_93;
  }
  if (!v72)
  {
    if (v73 <= 1)
    {
      double v79 = Horiz_Diff_Sqd(v384, (const double *)__b);
      if (v79 > 193229.156)
      {
        double v80 = v76 * (v76 * 4.0);
        if (v80 <= v384[29] * (v384[29] * 9.0)) {
          double v80 = v384[29] * (v384[29] * 9.0);
        }
        if (v79 > v80)
        {
          *((unsigned char *)v384 + 332) = 1;
          EvCrt_v("PrePos:  PosDisc = TRUE    Between Nav Pos and Ref Pos");
        }
      }
    }
    if (*((unsigned char *)v384 + 332)) {
      goto LABEL_92;
    }
LABEL_93:
    double v81 = v384[27];
    double v82 = 0.0;
    if (v81 <= 1000.0) {
      goto LABEL_99;
    }
    goto LABEL_94;
  }
  *((unsigned char *)v384 + 332) = 1;
LABEL_92:
  v384[29] = 9999000.0;
  v384[27] = 9999000.0;
  double v81 = 9999000.0;
LABEL_94:
  double v82 = 0.0;
  if (v74)
  {
    if (v75 <= 0.0005 && v75 < 0.001)
    {
      double v82 = v75 * 99930819.3;
      *(double *)char v411 = v75 * 99930819.3;
      v384[45] = v75 * 99930819.3;
      v384[46] = -1.1;
      if (v75 * 99930819.3 >= v81 * 1.5)
      {
        *(void *)&v411[0] = 0;
        double v82 = 0.0;
      }
    }
  }
LABEL_99:
  double v83 = 0.0;
  if (v73 <= 1)
  {
    double v84 = v384[29];
    if (v84 > 1000.0)
    {
      if (v78)
      {
        double v83 = v76 / 3.0;
        *(double *)unint64_t v408 = v76 / 3.0;
        v384[45] = -1.1;
        v384[46] = v76 / 3.0;
        if (v76 / 3.0 >= v84 * 1.5)
        {
          *(void *)&v408[0] = 0;
          double v83 = 0.0;
        }
      }
    }
  }
  double v393 = 0.0;
  if (R8_EQ((const double *)v411, &v393)) {
    goto LABEL_116;
  }
  double v85 = v384[16];
  double v86 = (*(double *)v416 - v85) * 1000.0;
  double v87 = -0.5;
  if (v86 > 0.0) {
    double v87 = 0.5;
  }
  double v88 = v86 + v87;
  double v89 = 2147483650.0;
  if (v88 <= 2147483650.0)
  {
    double v89 = -2147483650.0;
    if (v88 >= -2147483650.0) {
      double v89 = (double)(int)v88;
    }
  }
  double v90 = v85 + v89 / 1000.0 - *(double *)v416;
  double v91 = *(double *)v31 - v90;
  if (v91 > 0.0005)
  {
    double v92 = 0.001;
LABEL_114:
    double v90 = v90 + v92;
    goto LABEL_115;
  }
  if (v91 < -0.0005)
  {
    double v92 = -0.001;
    goto LABEL_114;
  }
LABEL_115:
  v384[12] = v90;
  v384[27] = v82;
  *((unsigned char *)v384 + 376) = 1;
LABEL_116:
  double v393 = 0.0;
  if (!R8_EQ((const double *)v408, &v393))
  {
    Geo2ECEF((uint64_t)__b, (uint64_t)&WGS84_Datum, v373->f64);
    *(_OWORD *)v384 = __b[0];
    double v93 = *(double *)&__b[1];
    v384[2] = *(double *)&__b[1];
    v384[3] = v93 - *(double *)(v16 + 248);
    double v94 = *(double *)&v394 / 3.0;
    v384[29] = v83;
    v384[30] = v94;
    *((unsigned char *)v384 + 377) = 1;
  }
LABEL_118:
  BOOL v95 = 0;
  int v96 = *((_DWORD *)v384 + 81);
  int v97 = *(__int16 *)(v382 + 6);
  if (v96 >= 1 && v97 >= 1024) {
    BOOL v95 = *(unsigned char *)v382 != 0;
  }
  *(_DWORD *)a9 = *((_DWORD *)v384 + 52);
  *(_WORD *)(a9 + 32) = v97;
  double v98 = *(double *)(v382 + 16);
  unsigned int v99 = (v98 * 1000.0);
  *(_DWORD *)(a9 + 36) = v99;
  double v100 = -((double)v99 - v98 * 1000.0) * 65536.0;
  double v101 = -0.5;
  if (v100 > 0.0) {
    double v101 = 0.5;
  }
  double v102 = v100 + v101;
  if (v102 <= 2147483650.0)
  {
    if (v102 >= -2147483650.0) {
      int v103 = (int)v102;
    }
    else {
      LOWORD(v103) = 0;
    }
  }
  else
  {
    LOWORD(v103) = -1;
  }
  uint64_t v389 = v18;
  v380 = (_OWORD *)v14;
  *(_WORD *)(a9 + 40) = v103;
  *(_DWORD *)(a9 + 44) = v96;
  *(_DWORD *)(a9 + 48) = ((*(double *)(v16 + 216) - *(double *)(v16 + 160)) * 1000.0);
  *(void *)&__b[0] = 0;
  API_Get_UTC_Cor(1, (double *)__b);
  *(unsigned char *)(a9 + 52) = (int)*(double *)__b;
  BOOL v104 = v384;
  double v105 = v384[13];
  int v106 = (int)(v105 * 1575420000.0);
  if (fabs(v105) >= 0.0000207995328) {
    LOWORD(v106) = 0;
  }
  *((_WORD *)v384 + 160) = v106;
  double v107 = v384[31];
  if (v107 >= 20500.0)
  {
    *((_WORD *)v384 + 161) = -536;
LABEL_142:
    uint64_t v114 = 0;
    uint64_t v115 = v381 + 4448;
    int v116 = 999999;
    int v117 = -999999;
    do
    {
      int v118 = *(_DWORD *)(v381 + 96 + 4 * v114);
      if (Is_Legal(v118) && *(int *)(v115 + 4 * v114 - 3200) >= 10)
      {
        BOOL v119 = BYTE1(v118) > 0xFu || ((1 << SBYTE1(v118)) & 0xE6CC) == 0;
        BOOL v120 = v119 || v118 == 6;
        if (v120 && !*(unsigned char *)(v18 + (int)GNSS_Id_To_Num_Prn_Idx(v118) + 257))
        {
          int v121 = (int)(*(double *)(v115 + 8 * v114) * 5.25503547);
          if (v116 >= v121) {
            int v116 = (int)(*(double *)(v115 + 8 * v114) * 5.25503547);
          }
          if (v117 <= v121) {
            int v117 = (int)(*(double *)(v115 + 8 * v114) * 5.25503547);
          }
        }
      }
      ++v114;
    }
    while (v114 != 128);
    BOOL v104 = v384;
    int v122 = *((__int16 *)v384 + 160);
    LOWORD(v106) = *((_WORD *)v384 + 160);
    unsigned int v112 = *((unsigned __int16 *)v384 + 161);
    if (v116 == 999999)
    {
      int v113 = (int *)v18;
    }
    else
    {
      int v113 = (int *)v18;
      if (v117 != -999999)
      {
        if (v117 - 8000 <= (signed int)-(v122 + v112)) {
          int v123 = -(v122 + v112);
        }
        else {
          int v123 = v117 - 8000;
        }
        int v124 = v112 - v122;
        if ((int)(v112 - v122) >= v116 + 8000) {
          int v124 = v116 + 8000;
        }
        int v125 = v124 - v123;
        if (v124 - v123 < 8001)
        {
          if (v125 <= 3999)
          {
            EvCrt_v("PP_Update_SS_Data:  Warning:  Out of range Sky Search Dopp_Low/High %d %d   min/max_Dopp %d %d   SS_Dopp_SR %d   OscFreq %d", v123, v124, v116, v117, *((unsigned __int16 *)v384 + 161), v122);
            LOWORD(v106) = *((_WORD *)v384 + 160);
            LOWORD(v112) = *((_WORD *)v384 + 161);
          }
        }
        else
        {
          unsigned int v112 = (v125 + 1) >> 1;
          *((_WORD *)v384 + 161) = v112;
          int v126 = v123 + v124;
          int v127 = -(v123 + v124);
          if (v126 < 0) {
            int v128 = ~v126;
          }
          else {
            int v128 = v127;
          }
          int v106 = v128 >> 1;
          int v129 = v106 - v122;
          *((_WORD *)v384 + 160) = v106;
          if (v129 < 0) {
            int v129 = -v129;
          }
          *((_WORD *)v384 + 145) += v129;
        }
      }
    }
    goto LABEL_176;
  }
  unsigned int v108 = *((_DWORD *)v384 + 52);
  int v109 = *((_DWORD *)v384 + 84);
  if (v108 <= v109 + 60000 && v108 >= v109 + 3000) {
    __int16 v111 = 1600;
  }
  else {
    __int16 v111 = 3941;
  }
  unsigned int v112 = (unsigned __int16)(v111 + (int)(v107 * 3.0));
  if (v112 <= 0xDAC) {
    unsigned int v112 = 3500;
  }
  *((_WORD *)v384 + 161) = v112;
  if (v112 >= 0xFA1) {
    goto LABEL_142;
  }
  int v113 = (int *)v18;
LABEL_176:
  *(_WORD *)(a9 + 24) = (int)((double)(__int16)v106 * 0.634751368);
  *(_WORD *)(a9 + 4) = (int)((double)(unsigned __int16)v112 * 0.190293673);
  int v130 = *v113;
  *(_DWORD *)(a9 + 56) = *v113;
  unint64_t v131 = *(void *)(v387 + 36);
  *(void *)(a9 + 60) = v131;
  LOWORD(v131) = *((_WORD *)v104 + 145);
  *(double *)&unint64_t v132 = (double)v131 * 0.634751368;
  *(_WORD *)(a9 + 26) = (int)*(double *)&v132;
  LOWORD(v132) = *((_WORD *)v104 + 146);
  *(_WORD *)(a9 + 14) = (int)((double)v132 * 19.0293673);
  BOOL v134 = v130 == 1 || v377;
  *(unsigned char *)(a9 + 68) = v134;
  double v135 = v104[28] * 0.0100069229;
  double v136 = -0.5;
  if (v135 <= 0.0) {
    double v137 = -0.5;
  }
  else {
    double v137 = 0.5;
  }
  double v138 = v135 + v137;
  if (v138 <= 2147483650.0)
  {
    if (v138 < -2147483650.0 || ((int)v138 >= 0xFFFF ? (__int16 v139 = -1) : (__int16 v139 = (int)v138), (int)v138 <= 0)) {
      __int16 v139 = 1;
    }
  }
  else
  {
    __int16 v139 = -1;
  }
  *(_WORD *)(a9 + 6) = v139;
  int v140 = 3 * (int)v104[29] / 5;
  if (v140 >= 65534) {
    LOWORD(v140) = -2;
  }
  *(_WORD *)(a9 + 8) = v140 + 1;
  int v141 = 3 * (int)v104[30];
  if (v141 >= 65534) {
    LOWORD(v141) = -2;
  }
  *(_WORD *)(a9 + 10) = v141 + 1;
  double v142 = v104[10] * 100.0;
  if (v142 > 0.0) {
    double v136 = 0.5;
  }
  double v143 = v142 + v136;
  if (v143 > 2147483650.0) {
    goto LABEL_203;
  }
  if (v143 < -2147483650.0)
  {
    int v144 = 0x80000000;
    goto LABEL_204;
  }
  int v144 = (int)v143;
  if ((int)v143 >= 0xFFFF)
  {
LABEL_203:
    LOWORD(v144) = -1;
    *(_WORD *)(a9 + 14) = -1;
    goto LABEL_206;
  }
LABEL_204:
  if (v144 <= 1) {
    LOWORD(v144) = 1;
  }
LABEL_206:
  uint64_t v385 = (unsigned __int8 *)(a9 + 8592);
  *(_WORD *)(a9 + 12) = v144;
  double v145 = v104[7] * 100.0;
  double v146 = -0.5;
  if (v145 <= 0.0) {
    double v147 = -0.5;
  }
  else {
    double v147 = 0.5;
  }
  double v148 = v145 + v147;
  if (v148 >= -2147483650.0) {
    __int16 v149 = (int)v148;
  }
  else {
    __int16 v149 = 0;
  }
  if (v148 <= 2147483650.0) {
    __int16 v150 = v149;
  }
  else {
    __int16 v150 = -1;
  }
  *(_WORD *)(a9 + 18) = v150;
  double v151 = v104[8] * 100.0;
  if (v151 <= 0.0) {
    double v152 = -0.5;
  }
  else {
    double v152 = 0.5;
  }
  double v153 = v151 + v152;
  if (v153 >= -2147483650.0) {
    __int16 v154 = (int)v153;
  }
  else {
    __int16 v154 = 0;
  }
  if (v153 <= 2147483650.0) {
    __int16 v155 = v154;
  }
  else {
    __int16 v155 = -1;
  }
  *(_WORD *)(a9 + 16) = v155;
  double v156 = v104[9] * 100.0;
  if (v156 > 0.0) {
    double v146 = 0.5;
  }
  double v157 = v156 + v146;
  if (v157 <= 2147483650.0)
  {
    if (v157 >= -2147483650.0) {
      int v158 = (int)v157;
    }
    else {
      LOWORD(v158) = 0;
    }
  }
  else
  {
    LOWORD(v158) = -1;
  }
  *(_WORD *)(a9 + 20) = v158;
  *(unsigned char *)(a9 + 22) = v104[11] >> 1;
  int v159 = 3 * (int)v104[35];
  if (v159 >= 254) {
    LOBYTE(v159) = -2;
  }
  *(unsigned char *)(a9 + 23) = v159 + 1;
  if (!v95)
  {
    uint64_t v215 = a9 + 72;
    uint64_t v216 = -5904;
    do
    {
      uint64_t v217 = v215 + v216;
      *(_OWORD *)(v217 + 5920) = 0uLL;
      *(_OWORD *)(v217 + 5904) = 0uLL;
      *(_OWORD *)(v215 + v216 + 5934) = 0uLL;
      v216 += 48;
    }
    while (v216);
    *(_OWORD *)(a9 + 7704) = 0u;
    *(_OWORD *)(a9 + 7678) = 0u;
    *(_OWORD *)(a9 + 7694) = 0u;
    *(_OWORD *)(a9 + 7646) = 0u;
    *(_OWORD *)(a9 + 7662) = 0u;
    *(_OWORD *)(a9 + 7614) = 0u;
    *(_OWORD *)(a9 + 7630) = 0u;
    *(_OWORD *)(a9 + 7582) = 0u;
    *(_OWORD *)(a9 + 7598) = 0u;
    *(_OWORD *)(a9 + 7550) = 0u;
    *(_OWORD *)(a9 + 7566) = 0u;
    *(_OWORD *)(a9 + 7518) = 0u;
    *(_OWORD *)(a9 + 7534) = 0u;
    *(_OWORD *)(a9 + 7502) = 0u;
    memset((void *)(a9 + 5976), 255, 0x5F6uLL);
    *(_DWORD *)(a9 + 8592) = 0;
    *(unsigned char *)(a9 + 8596) = 0;
    memset(__b, 0, 218);
    Get_SS_Order(__b);
    for (uint64_t i = 0; i != 218; ++i)
    {
      if (*((unsigned char *)__b + i))
      {
        Constell_Prunint64_t n = Get_Constell_Prn(i);
        switch(Constell_Prn)
        {
          case 0:
            EvCrt_Illegal_switch_case("PP_invalidate_AAdata", 0xA31u);
            continue;
          case 1:
            uint64_t v221 = v389;
            int v222 = *(unsigned __int8 *)(v389 + 22);
            goto LABEL_360;
          case 2:
            uint64_t v221 = v389;
            int v222 = *(unsigned __int8 *)(v389 + 23);
            goto LABEL_360;
          case 3:
            uint64_t v221 = v389;
            int v222 = *(unsigned __int8 *)(v389 + 27);
            goto LABEL_360;
          case 4:
            uint64_t v221 = v389;
            int v222 = *(unsigned __int8 *)(v389 + 26);
            goto LABEL_360;
          case 5:
            uint64_t v221 = v389;
            int v222 = *(unsigned __int8 *)(v389 + 24);
            goto LABEL_360;
          case 6:
            uint64_t v221 = v389;
            int v222 = *(unsigned __int8 *)(v389 + 28);
LABEL_360:
            BOOL v220 = v222 != 0;
            goto LABEL_361;
          case 7:
            continue;
          default:
            BOOL v220 = 1;
            uint64_t v221 = v389;
LABEL_361:
            LODWORD(v223) = *((unsigned __int8 *)__b + i) - 1;
            if (Constell_Prn == 2) {
              uint64_t v223 = i;
            }
            else {
              uint64_t v223 = v223;
            }
            uint64_t v224 = v221 + v223;
            int v225 = *(unsigned __int8 *)(v221 + v223 + 816);
            if (v225 && *(unsigned char *)(v224 + 1096) || !v220) {
              goto LABEL_377;
            }
            if (Constell_Prn == 6) {
              goto LABEL_368;
            }
            if (*(unsigned char *)(v383 + v223 + 50616) && !*(unsigned char *)(v389 + v223 + 257)) {
              goto LABEL_380;
            }
            if ((Constell_Prn - 1) < 5 || Constell_Prn == 7) {
              goto LABEL_374;
            }
LABEL_368:
            if (!*(unsigned char *)(v383 + v223 + 50834) || *(unsigned char *)(v389 + v223 + 536))
            {
LABEL_374:
              if (Constell_Prn == 2 || v225)
              {
LABEL_377:
                ++*(unsigned char *)(a9 + 8594);
                *(_DWORD *)(a9 + 4 * v223 + 7720) = 2;
              }
              else
              {
                uint64_t v226 = *(unsigned __int8 *)(a9 + 8595);
                *(_WORD *)(a9 + 2 * v226 + 7066) = v223 + 1;
                *(unsigned char *)(a9 + 8595) = v226 + 1;
                *(_DWORD *)(a9 + 4 * v223 + 7720) = 3;
              }
            }
            else
            {
LABEL_380:
              uint64_t v227 = *(unsigned __int8 *)(a9 + 8593);
              *(_WORD *)(a9 + 2 * v227 + 6630) = v223 + 1;
              *(unsigned char *)(a9 + 8593) = v227 + 1;
              *(_DWORD *)(a9 + 4 * v223 + 7720) = 0;
            }
            break;
        }
      }
    }
    *(void *)&long long v275 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v275 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 202) = v275;
    *(_OWORD *)(a10 + 176) = v275;
    *(_OWORD *)(a10 + 192) = v275;
    *(_OWORD *)(a10 + 144) = v275;
    *(_OWORD *)(a10 + 160) = v275;
    *(_OWORD *)(a10 + 112) = v275;
    *(_OWORD *)(a10 + 128) = v275;
    *(_OWORD *)(a10 + 80) = v275;
    *(_OWORD *)(a10 + 96) = v275;
    *(_OWORD *)(a10 + 48) = v275;
    *(_OWORD *)(a10 + 64) = v275;
    *(_OWORD *)(a10 + 16) = v275;
    *(_OWORD *)(a10 + 32) = v275;
    *(_OWORD *)a10 = v275;
    memset_pattern16((void *)(a10 + 218), &unk_263D81550, 0x1B4uLL);
    *(unsigned char *)(a10 + 654) = 0;
    *(_WORD *)(v382 + 2) = -1;
    *(unsigned char *)uint64_t v382 = 0;
    goto LABEL_499;
  }
  long long v405 = 0u;
  memset(v406, 0, 26);
  long long v403 = 0u;
  long long v404 = 0u;
  long long v401 = 0u;
  long long v402 = 0u;
  long long v399 = 0u;
  long long v400 = 0u;
  long long v397 = 0u;
  long long v398 = 0u;
  long long v395 = 0u;
  long long v396 = 0u;
  long long v394 = 0u;
  if ((*v385 || *(unsigned char *)(a9 + 8594)) && !*(unsigned char *)(a10 + 655))
  {
    int v276 = *(unsigned __int16 *)(v382 + 2);
    if (v276 != 0xFFFF)
    {
      int v277 = (int)v21 - (int)*(double *)(v382 + 16) + 604800 * (__dst - *(__int16 *)(v382 + 6));
      if (v277 < 0) {
        int v277 = -v277;
      }
      if (v277 <= 4)
      {
        uint64_t v278 = 0;
        double v279 = 0.0;
        do
        {
          double v279 = v279
               + (v407[v278] - *(double *)(v382 + 40 + 8 * v278)) * (v407[v278] - *(double *)(v382 + 40 + 8 * v278));
          unint64_t v280 = v278 + 3;
          --v278;
        }
        while (v280 > 1);
        if (v279 <= 1.0e10)
        {
          uint64_t v281 = 0;
          double v282 = (_DWORD *)(v14 + 176);
          uint64_t v283 = v383 + 50616;
          do
          {
            if ((*(unsigned char *)(v283 + v281) && !*(unsigned char *)(v18 + v281 + 257)
               || *(unsigned char *)(v283 + v281 + 218) && !*(unsigned char *)(v18 + v281 + 536))
              && *v282
              && *(_DWORD *)(a9 + 7720 + 4 * v281) <= 1u)
            {
              *((unsigned char *)&v394 + v281) = 1;
            }
            ++v281;
            v282 += 48;
          }
          while (v281 != 179);
          int v284 = 54;
          while (1)
          {
            if ((__int16)(v276 + 1) <= 217) {
              __int16 v285 = v276 + 1;
            }
            else {
              __int16 v285 = 0;
            }
            *(_WORD *)(v382 + 2) = v285;
            int v286 = Get_Constell_Prn(v285);
            if (*(unsigned char *)(v18 + 22)) {
              BOOL v287 = 0;
            }
            else {
              BOOL v287 = v286 == 1;
            }
            if (v287)
            {
              LOWORD(v276) = 31;
              *(_WORD *)(v382 + 2) = 31;
            }
            else
            {
              if (*(unsigned char *)(v18 + 23)) {
                BOOL v288 = 0;
              }
              else {
                BOOL v288 = v286 == 2;
              }
              if (v288)
              {
                LOWORD(v276) = 55;
              }
              else if (*(unsigned char *)(v18 + 27) || v286 != 3)
              {
                if (*(unsigned char *)(v18 + 26) || v286 != 4)
                {
                  if (*(unsigned char *)(v18 + 24) || v286 != 5)
                  {
                    if (*(unsigned char *)(v18 + 25) || v286 != 7)
                    {
                      LOWORD(v276) = *(_WORD *)(v382 + 2);
                      *((unsigned char *)&v394 + (__int16)v276) = 1;
                      goto LABEL_485;
                    }
                    LOWORD(v276) = 217;
                  }
                  else
                  {
                    LOWORD(v276) = 164;
                  }
                }
                else
                {
                  LOWORD(v276) = 154;
                }
              }
              else
              {
                LOWORD(v276) = 91;
              }
              *(_WORD *)(v382 + 2) = v276;
            }
LABEL_485:
            if (!--v284) {
              goto LABEL_238;
            }
          }
        }
      }
    }
  }
  *(unsigned char *)(a10 + 655) = 0;
  *(void *)&long long v160 = 0x101010101010101;
  *((void *)&v160 + 1) = 0x101010101010101;
  long long v394 = v160;
  long long v395 = v160;
  long long v396 = v160;
  long long v397 = v160;
  long long v398 = v160;
  long long v399 = v160;
  long long v400 = v160;
  long long v401 = v160;
  long long v402 = v160;
  long long v403 = v160;
  long long v404 = v160;
  long long v405 = v160;
  v406[0] = v160;
  *(_OWORD *)((char *)v406 + 10) = v160;
  *(_WORD *)(v382 + 2) = 218;
LABEL_238:
  LODWORD(v393) = 0;
  memset(__b, 255, sizeof(__b));
  memset_pattern16(__src, &unk_263D81530, 0x368uLL);
  memset(v427, 0, sizeof(v427));
  long long v426 = 0u;
  long long v425 = 0u;
  long long v424 = 0u;
  long long v423 = 0u;
  long long v422 = 0u;
  long long v421 = 0u;
  long long v420 = 0u;
  long long v419 = 0u;
  long long v418 = 0u;
  long long v417 = 0u;
  memset(v416, 0, sizeof(v416));
  memset(v415, 0, 202);
  *(_OWORD *)v414 = 0u;
  Get_SS_Order(v414);
  if (!*(unsigned char *)(v18 + 22))
  {
    *(void *)&long long v161 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v161 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)a10 = v161;
    *(_OWORD *)(a10 + 16) = v161;
    memset_pattern16((void *)(a10 + 218), &unk_263D81550, 0x40uLL);
  }
  if (!*(unsigned char *)(v18 + 23))
  {
    memset((void *)(a10 + 32), 157, 24);
    memset_pattern16((void *)(a10 + 282), &unk_263D81550, 0x30uLL);
  }
  if (!*(unsigned char *)(v18 + 27))
  {
    *(_DWORD *)(a10 + 88) = -1650614883;
    *(void *)&long long v162 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v162 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 72) = v162;
    *(_OWORD *)(a10 + 56) = v162;
    memset_pattern16((void *)(a10 + 330), &unk_263D81550, 0x48uLL);
  }
  if (!*(unsigned char *)(v18 + 26))
  {
    *(void *)&long long v163 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v163 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 139) = v163;
    *(_OWORD *)(a10 + 124) = v163;
    *(_OWORD *)(a10 + 108) = v163;
    *(_OWORD *)(a10 + 92) = v163;
    memset_pattern16((void *)(a10 + 402), &unk_263D81550, 0x7EuLL);
  }
  if (!*(unsigned char *)(v18 + 24))
  {
    *(void *)(a10 + 155) = 0x9D9D9D9D9D9D9D9DLL;
    *(_WORD *)(a10 + 163) = -25187;
    memset_pattern16((void *)(a10 + 528), &unk_263D81550, 0x14uLL);
  }
  if (!*(unsigned char *)(v18 + 28))
  {
    *(void *)(a10 + 171) = 0x9D9D9D9D9D9D9D9DLL;
    *(void *)(a10 + 165) = 0x9D9D9D9D9D9D9D9DLL;
    memset_pattern16((void *)(a10 + 548), &unk_263D81550, 0x1CuLL);
  }
  v367 = (_WORD *)(v383 + 25388);
  uint64_t v368 = (uint64_t)(v104 + 17);
  if (!*(unsigned char *)(v18 + 25))
  {
    *(void *)(a10 + 210) = 0x9D9D9D9D9D9D9D9DLL;
    *(void *)&long long v164 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v164 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a10 + 195) = v164;
    *(_OWORD *)(a10 + 179) = v164;
    memset_pattern16((void *)(a10 + 576), &unk_263D81550, 0x4EuLL);
  }
  uint64_t v165 = 0;
  int v375 = 0;
  unsigned __int8 v166 = 0;
  unsigned __int8 v167 = 0;
  long long v168 = *(_OWORD *)(a10 + 176);
  v412[10] = *(_OWORD *)(a10 + 160);
  v412[11] = v168;
  v413[0] = *(_OWORD *)(a10 + 192);
  *(_OWORD *)((char *)v413 + 10) = *(_OWORD *)(a10 + 202);
  long long v169 = *(_OWORD *)(a10 + 112);
  v412[6] = *(_OWORD *)(a10 + 96);
  v412[7] = v169;
  long long v170 = *(_OWORD *)(a10 + 144);
  v412[8] = *(_OWORD *)(a10 + 128);
  v412[9] = v170;
  long long v171 = *(_OWORD *)(a10 + 48);
  v412[2] = *(_OWORD *)(a10 + 32);
  v412[3] = v171;
  long long v172 = *(_OWORD *)(a10 + 80);
  v412[4] = *(_OWORD *)(a10 + 64);
  v412[5] = v172;
  long long v173 = *(_OWORD *)(a10 + 16);
  v412[0] = *(_OWORD *)a10;
  v412[1] = v173;
  while (2)
  {
    if (!v414[v165])
    {
LABEL_273:
      unsigned int v185 = 2;
      uint64_t v179 = v165;
      goto LABEL_332;
    }
    int v174 = Get_Constell_Prn(v166);
    unsigned int v175 = v174 - 1;
    int v176 = v174;
    switch(v174)
    {
      case 1:
        int v177 = *(unsigned __int8 *)(v18 + 22);
        goto LABEL_263;
      case 2:
        if (!*(unsigned char *)(v18 + 23)) {
          goto LABEL_273;
        }
        LongPrnIdx_To_ShortPrnIdx(v165, 0);
        unsigned int v178 = v165;
        goto LABEL_267;
      case 3:
        if (!*(unsigned char *)(v18 + 27)) {
          goto LABEL_273;
        }
        unsigned int v178 = v414[v165] - 1;
        LongPrnIdx_To_ShortPrnIdx(v178, 0);
        goto LABEL_267;
      case 4:
        if (!*(unsigned char *)(v18 + 26)) {
          goto LABEL_273;
        }
        goto LABEL_266;
      case 5:
        int v177 = *(unsigned __int8 *)(v18 + 24);
LABEL_263:
        if (!v177) {
          goto LABEL_273;
        }
        unsigned int v178 = v414[v165] - 1;
        goto LABEL_267;
      case 6:
        if (!*(unsigned char *)(v18 + 28)) {
          goto LABEL_273;
        }
LABEL_266:
        unsigned int v178 = v414[v165] - 1;
LABEL_267:
        uint64_t v179 = v178;
        if (!*(unsigned char *)(v383 + v178 + 50616) || *(unsigned char *)(v18 + v178 + 257))
        {
          if (*(unsigned char *)(v383 + v178 + 50834))
          {
            int v180 = *(unsigned __int8 *)(v18 + v178 + 536);
            char v181 = *(unsigned char *)(v18 + v178 + 536) == 0;
            if (!*((unsigned char *)&v394 + v178)) {
              goto LABEL_285;
            }
            double v182 = (unsigned char *)(a10 + v178);
            unsigned char *v182 = -99;
            uint64_t v183 = a10 + 2 * v178;
            *(_WORD *)(v183 + 218) = -400;
            unint64_t v184 = (_WORD *)(v183 + 218);
            if (v180)
            {
              char v181 = 0;
LABEL_283:
              uint64_t v18 = v389;
              goto LABEL_287;
            }
            goto LABEL_278;
          }
          char v181 = *((unsigned char *)&v394 + v178);
          if (v181)
          {
            char v181 = 0;
            *(unsigned char *)(a10 + v178) = -99;
            *(_WORD *)(a10 + 2 * v178 + 218) = -400;
            goto LABEL_287;
          }
LABEL_285:
          if (!LODWORD(v380[12 * v178 + 11])) {
            *(unsigned char *)(a10 + v178) = -99;
          }
          goto LABEL_287;
        }
        if (!*((unsigned char *)&v394 + v178))
        {
          char v181 = 1;
          goto LABEL_285;
        }
        double v182 = (unsigned char *)(a10 + v178);
        unsigned char *v182 = -99;
        uint64_t v186 = a10 + 2 * v178;
        *(_WORD *)(v186 + 218) = -400;
        unint64_t v184 = (_WORD *)(v186 + 218);
LABEL_278:
        if (!LODWORD(v380[12 * v179 + 11]))
        {
          char v181 = 1;
          goto LABEL_283;
        }
        __int16 v409 = 0;
        unsigned int v187 = &v380[12 * v179];
        memset(v408, 0, sizeof(v408));
        v410[0] = 0;
        *(_DWORD *)((char *)v410 + 3) = 0;
        long long v188 = v187[9];
        v411[8] = v187[8];
        v411[9] = v188;
        long long v189 = v187[11];
        v411[10] = v187[10];
        v411[11] = v189;
        long long v190 = v187[5];
        v411[4] = v187[4];
        v411[5] = v190;
        long long v191 = v187[7];
        v411[6] = v187[6];
        v411[7] = v191;
        long long v192 = v187[1];
        v411[0] = *v187;
        v411[1] = v192;
        long long v193 = v187[3];
        v411[2] = v187[2];
        v411[3] = v193;
        if (Comp_CurrState(0x258u, *(__int16 *)(v382 + 6), (uint64_t)v411, (uint64_t)v408, *(double *)(v382 + 16), 22000000.0))Comp_AzEl((uint64_t)v373, v368, (uint64_t)v408, v182, v184, (_DWORD *)(a10 + 40 * v179 + 656), (int *)(a10 + 40 * v179 + 9376)); {
        char v181 = 1;
        }
        uint64_t v18 = v389;
LABEL_287:
        if (*(unsigned char *)(v18 + v179 + 816) && *(unsigned char *)(v18 + v179 + 1096)) {
          goto LABEL_289;
        }
        if ((v181 & 1) == 0)
        {
          if (v175 >= 5)
          {
            if (!*(unsigned char *)(v18 + v179 + 1096))
            {
LABEL_311:
              char v202 = BYTE3(v393);
              *((_WORD *)&__b[81] + BYTE3(v393) + 6) = v179 + 1;
              BYTE3(v393) = v202 + 1;
              unsigned int v185 = 3;
              goto LABEL_332;
            }
          }
          else if (!*(unsigned char *)(v18 + v179 + 816))
          {
            goto LABEL_311;
          }
LABEL_289:
          char v194 = BYTE2(v393);
          *((_WORD *)&__b[54] + BYTE2(v393) + 4) = v179 + 1;
          BYTE2(v393) = v194 + 1;
          unsigned int v185 = 2;
          goto LABEL_332;
        }
        int v195 = *(char *)(a10 + v179);
        if (v195 < -90)
        {
          unsigned int v185 = 0;
          *((_WORD *)__b + v167++) = v179 + 1;
        }
        else
        {
          unsigned int v196 = *(unsigned __int8 *)(a10 + v179);
          int v197 = (char)v195;
          int v198 = v375;
          if (v197 > 1) {
            int v198 = v375 + 1;
          }
          int v375 = v198;
          if (v197 > 1) {
            unsigned int v185 = 1;
          }
          else {
            unsigned int v185 = 2;
          }
          if (v197 >= 2)
          {
            int v199 = v380[12 * v179 + 11];
            if (v176 == 2) {
              unsigned int v200 = 15;
            }
            else {
              unsigned int v200 = 10;
            }
            if (v199 == 2)
            {
              if (*(unsigned char *)(a9 + v179 + 7502)) {
                BOOL v203 = v200 > v196;
              }
              else {
                BOOL v203 = 0;
              }
              if (v203) {
                unsigned __int8 v201 = *(unsigned char *)(a10 + v179);
              }
              else {
                unsigned __int8 v201 = v196 + 9;
              }
            }
            else if (v199 == 1)
            {
              if (v200 > v196 && *(unsigned char *)(a9 + v179 + 7502)) {
                unsigned __int8 v201 = v196 + 9;
              }
              else {
                unsigned __int8 v201 = v196 + 100;
              }
            }
            else
            {
              unsigned __int8 v201 = 0;
            }
            *((unsigned char *)v416 + v179) = v201;
            unsigned int v204 = BYTE1(v393);
            if (BYTE1(v393))
            {
              uint64_t v205 = 0;
              while (*((unsigned __int8 *)v416 + *((__int16 *)&__b[27] + v205 + 2) - 1) >= v201)
              {
                if (BYTE1(v393) == ++v205) {
                  goto LABEL_330;
                }
              }
            }
            else
            {
              LODWORD(v205) = 0;
            }
            if (v205 < BYTE1(v393))
            {
              char v206 = (_WORD *)&__b[27] + BYTE1(v393) + 2;
              uint64_t v207 = (__int16 *)&__b[27] + BYTE1(v393) + 1;
              do
              {
                __int16 v208 = *v207--;
                *v206-- = v208;
                --v204;
              }
              while (v205 < v204);
              unsigned int v204 = v205;
            }
LABEL_330:
            *((_WORD *)&__b[27] + v204 + 2) = v179 + 1;
          }
          ++*((unsigned char *)&v393 + v185);
        }
LABEL_332:
        *((_DWORD *)__src + v179) = v185;
LABEL_333:
        ++v165;
        ++v166;
        if (v165 != 218) {
          continue;
        }
        uint64_t v209 = 0;
        uint64_t v210 = (uint64_t)v384;
        while (2)
        {
          int v211 = *((char *)v412 + v209);
          if (v211 < -90 || ((int v212 = *(char *)(a10 + v209), v212 >= -90) ? (v213 = v211 < v212) : (v213 = 1), v213))
          {
            char v214 = 0;
            goto LABEL_342;
          }
          if (v211 > v212)
          {
            char v214 = 1;
LABEL_342:
            *(unsigned char *)(a9 + 7502 + v209) = v214;
          }
          if (++v209 != 218) {
            continue;
          }
          break;
        }
        memcpy((void *)(a9 + 7720), __src, 0x368uLL);
        memcpy((void *)(a9 + 7066), (char *)&__b[81] + 12, 0x1B4uLL);
        memcpy((void *)(a9 + 6630), __b, 0x1B4uLL);
        memcpy((void *)(a9 + 6194), (char *)&__b[27] + 4, 0x1B4uLL);
        int v228 = BYTE1(v393);
        *uint64_t v385 = BYTE1(v393);
        *(_WORD *)(a9 + 8594) = WORD1(v393);
        uint64_t v229 = (unsigned char *)(a9 + 8594);
        *(unsigned char *)(a9 + 8593) = v167;
        *(unsigned char *)(a10 + 654) = v375;
        if (!v228 && !*(unsigned char *)(a9 + 8596))
        {
          *(void *)&long long v365 = -1;
          *((void *)&v365 + 1) = -1;
          *(_OWORD *)(a9 + 6178) = v365;
          *(_OWORD *)(a9 + 6152) = v365;
          *(_OWORD *)(a9 + 6168) = v365;
          *(_OWORD *)(a9 + 6120) = v365;
          *(_OWORD *)(a9 + 6136) = v365;
          *(_OWORD *)(a9 + 6088) = v365;
          *(_OWORD *)(a9 + 6104) = v365;
          *(_OWORD *)(a9 + 6056) = v365;
          *(_OWORD *)(a9 + 6072) = v365;
          *(_OWORD *)(a9 + 6024) = v365;
          *(_OWORD *)(a9 + 6040) = v365;
          *(_OWORD *)(a9 + 5992) = v365;
          *(_OWORD *)(a9 + 6008) = v365;
          *(_OWORD *)(a9 + 5976) = v365;
          uint64_t v14 = (uint64_t)v380;
          goto LABEL_500;
        }
        LOBYTE(v416[0]) = 0;
        *((void *)&v416[1] + 1) = 0;
        LODWORD(v417) = 0;
        *(void *)&long long v419 = 0;
        *(_OWORD *)((char *)v416 + 4) = 0uLL;
        *(void *)&long long v418 = 0;
        *((void *)&v417 + 1) = 0;
        *(void *)((char *)&v418 + 5) = 0;
        memset(&__src[2], 0, 159);
        *(void *)&long long v230 = -1;
        *((void *)&v230 + 1) = -1;
        *(_OWORD *)(a9 + 5976) = v230;
        *(_OWORD *)(a9 + 5992) = v230;
        *(_OWORD *)(a9 + 6008) = v230;
        *(_OWORD *)(a9 + 6024) = v230;
        *(_OWORD *)(a9 + 6040) = v230;
        *(_OWORD *)(a9 + 6056) = v230;
        *(_OWORD *)(a9 + 6072) = v230;
        *(_OWORD *)(a9 + 6088) = v230;
        *(_OWORD *)(a9 + 6104) = v230;
        *(_OWORD *)(a9 + 6120) = v230;
        *(_OWORD *)(a9 + 6136) = v230;
        *(_OWORD *)(a9 + 6152) = v230;
        *(_OWORD *)(a9 + 6168) = v230;
        *(_OWORD *)(a9 + 6178) = v230;
        uint64_t v231 = a9 + 72;
        uint64_t v232 = -5904;
        memset(__src, 0, 32);
        do
        {
          uint64_t v233 = v231 + v232;
          *(_OWORD *)(v233 + 5920) = 0uLL;
          *(_OWORD *)(v233 + 5904) = 0uLL;
          *(_OWORD *)(v231 + v232 + 5934) = 0uLL;
          v232 += 48;
        }
        while (v232);
        *(unsigned char *)(a9 + 8596) = 0;
        double v234 = 0.0;
        double v235 = 0.0;
        if ((*(_DWORD *)(v370 + 8212) - 2) <= 4)
        {
          if ((unsigned __int16)*v367 - *(__int16 *)(v382 + 6) >= 0) {
            int v236 = -(((unsigned __int16)*v367 - *(__int16 *)(v382 + 6)) & 0x3F);
          }
          else {
            int v236 = (*(_WORD *)(v382 + 6) - *v367) & 0x3F;
          }
          if (v236 > 31) {
            v236 -= 64;
          }
          double v235 = *(double *)(v383 + 25368)
               + *(double *)(v383 + 25376)
               * (double)((int)*(double *)(v382 + 16) - *(_DWORD *)(v370 + 8252) + 604800 * v236);
        }
        uint64_t v369 = a9 + 7720;
        if ((*(_DWORD *)(v371 + 3060) - 2) <= 4)
        {
          if (*(__int16 *)(v371 + 3116) - *(__int16 *)(v382 + 6) >= 0) {
            int v237 = -((*(__int16 *)(v371 + 3116) - *(__int16 *)(v382 + 6)) & 0x3FF);
          }
          else {
            int v237 = (*(_WORD *)(v382 + 6) - *(_WORD *)(v371 + 3116)) & 0x3FF;
          }
          if (v237 > 511) {
            v237 -= 1024;
          }
          if (v237 < -512) {
            v237 += 1024;
          }
          double v238 = *(double *)(v382 + 16) - (double)*(int *)(v371 + 3112) + (double)(604800 * v237);
          double v234 = *(double *)(v371 + 3088) + *(double *)(v371 + 3096) * v238 + *(double *)(v371 + 3104) * (v238 * v238);
        }
        bzero(__b, 0x6D0uLL);
        for (uint64_t j = 0; j != 218; ++j)
        {
          unsigned int v240 = Get_Constell_Prn(j) - 1;
          if (v240 <= 6) {
            *((void *)__b + j) = qword_263D81560[v240];
          }
        }
        uint64_t v241 = 0;
        uint64_t v242 = v381 + 3424;
        do
        {
          uint64_t v243 = v242 + 4 * v241;
          int v244 = *(_DWORD *)(v243 - 3328);
          if (Is_Legal(v244) && *(int *)(v243 - 2176) >= 11) {
            *((void *)__b + (int)GNSS_Id_To_Num_Prn_Idx(v244)) = *(void *)(v242 + 8 * v241);
          }
          ++v241;
        }
        while (v241 != 128);
        uint64_t v245 = 0;
        uint64_t v366 = v383 + 59772;
        uint64_t v246 = 656;
        uint64_t v247 = 9376;
        uint64_t v14 = (uint64_t)v380;
        double v248 = v380;
        while (2)
        {
          LODWORD(v412[0]) = 0;
          int v249 = Get_Constell_Prn(v245);
          LODWORD(v412[0]) = v249;
          if (v249 == 7) {
            goto LABEL_449;
          }
          if (*(unsigned __int8 *)(a9 + 8596) <= 0x7Au)
          {
            int v250 = v249;
            if ((!*(unsigned char *)(v389 + v245 + 816) || !*(unsigned char *)(v389 + v245 + 1096)) && *(char *)(a10 + v245) >= 2)
            {
              long long v251 = v248[9];
              __src[8] = v248[8];
              __src[9] = v251;
              long long v252 = v248[11];
              __src[10] = v248[10];
              __src[11] = v252;
              long long v253 = v248[5];
              __src[4] = v248[4];
              __src[5] = v253;
              long long v254 = v248[7];
              __src[6] = v248[6];
              __src[7] = v254;
              long long v255 = v248[1];
              __src[0] = *v248;
              __src[1] = v255;
              long long v256 = v248[3];
              __src[2] = v248[2];
              __src[3] = v256;
              if (LODWORD(__src[11]))
              {
                uint64_t v257 = *((unsigned int *)v384 + 81);
                double v258 = v384[12];
                double v259 = v384[28];
                int v260 = v250 - 1;
                double v261 = (_DWORD *)(v370 + 8212);
                double v262 = v235;
                switch(v260)
                {
                  case 0:
                    goto LABEL_423;
                  case 1:
                    double v258 = v384[14];
                    uint64_t v263 = *((unsigned int *)v384 + 82);
                    if ((int)v263 >= (int)v257) {
                      goto LABEL_433;
                    }
                    BOOL v264 = 0;
                    double v259 = sqrt((g_TOW_Stat_Var99_Table[v257] * -299792458.0 + g_TOW_Stat_Var99_Table[v263] * 299792458.0)* 299792458.0+ v259 * v259);
                    LODWORD(v257) = *((_DWORD *)v384 + 82);
                    break;
                  case 2:
                    goto LABEL_427;
                  case 3:
                    double v258 = *v35;
LABEL_423:
                    if (*(unsigned char *)(v389 + 51))
                    {
                      uint64_t v265 = v389 + v245;
                      if (!*(unsigned char *)(v389 + v245 + 1096)) {
                        goto LABEL_432;
                      }
                    }
                    goto LABEL_433;
                  case 4:
                    goto LABEL_430;
                  case 5:
                    double v261 = (_DWORD *)(v371 + 3060);
                    double v262 = v234;
LABEL_427:
                    if ((*v261 - 2) >= 5) {
                      double v262 = 0.0;
                    }
                    double v258 = v258 - v262;
LABEL_430:
                    if (!*(unsigned char *)(v389 + 51)) {
                      goto LABEL_433;
                    }
                    uint64_t v265 = v389 + v245;
LABEL_432:
                    BOOL v264 = *(unsigned __int8 *)(v265 + 536) == 0;
                    break;
                  default:
LABEL_433:
                    BOOL v264 = 0;
                    break;
                }
                int v266 = Comp_PrePos(v257, *(__int16 *)(v382 + 6), (uint64_t)__src, v373, (uint64_t)v372, a10 + v247, (double *)(a10 + v246), v264, v258, v384[13], v384[27], v259, v384[29], v384[30], v384[32], v384[33], v384[34], *(double *)(v382 + 16), v384,
                         *((double *)__b + v245),
                         v384[39],
                         (char *)(v383 + 8952),
                         *(_DWORD *)(v389 + 68),
                         (uint64_t)v416);
                LOBYTE(v416[0]) = v266;
                if (v266)
                {
                  *(_DWORD *)v414 = 0;
                  v414[4] = 0;
                  *(void *)&v414[8] = 0;
                  *(void *)&v415[0] = 0;
                  BYTE8(v415[0]) = 0;
                  memset((char *)v415 + 10, 0, 20);
                  unsigned __int8 v267 = LongPrnIdx_To_Prn(v245, (int *)v412);
                  v414[10] = v267;
                  v414[8] = v412[0];
                  if (LODWORD(v412[0]) == 2)
                  {
                    int v268 = *(_DWORD *)(*(void *)(a9 + 8680) + 4 * v267 - 4);
                    v414[11] = v268;
                    if (((v268 << 24) - 100663297) < 0xF2FFFFFF)
                    {
                      EvCrt_v("PP_Update_AcqAid:  %d  Skipping AA for R %d  Freq Id not known %d", v245, v245 - 31, (char)v268);
                      goto LABEL_449;
                    }
                    v414[10] = v268;
                  }
                  BYTE8(v415[1]) = -1;
                  BYTE10(v415[1]) = -1;
                  BYTE9(v415[1]) = *(unsigned char *)(a10 + v245);
                  unsigned int v269 = *(unsigned __int16 *)(a10 + 2 * v245 + 218);
                  if (v269 <= 0x168) {
                    BYTE10(v415[1]) = v269 >> 1;
                  }
                  BOOL v270 = Comp_AcqAid(*((_DWORD *)v384 + 52), *((_WORD *)v384 + 160), *((unsigned __int16 *)v384 + 161), (unsigned __int8 *)v416, (uint64_t)v414, v384[16]);
                  v414[4] = v270;
                  if (*(unsigned char *)(v366 + v245)) {
                    BOOL v271 = 1;
                  }
                  else {
                    BOOL v271 = *(unsigned char *)(v366 + v245 + 218) != 0;
                  }
                  v414[12] = v271;
                  v414[13] = *(unsigned char *)(v366 + v245 + 436);
                  if (*((int *)v384 + 74) <= 1 && v414[14] >= 2u) {
                    v414[14] = 1;
                  }
                  if (v270)
                  {
                    unsigned __int8 v272 = *(unsigned char *)(a9 + 8596);
                    uint64_t v273 = a9 + 48 * v272;
                    long long v274 = v415[0];
                    *(_OWORD *)(v273 + 72) = *(_OWORD *)v414;
                    *(_OWORD *)(v273 + 88) = v274;
                    *(_OWORD *)(v273 + 104) = v415[1];
                    *(unsigned char *)(a9 + 5976 + v245) = v272;
                    ++*(unsigned char *)(a9 + 8596);
                  }
                }
              }
            }
LABEL_449:
            ++v245;
            v246 += 40;
            v247 += 40;
            v248 += 12;
            if (v245 == 179) {
              goto LABEL_498;
            }
            continue;
          }
          break;
        }
        gn_report_assertion_failure("PP_Update_AcqAid: num_AA overflow caught");
LABEL_498:
        PP_BDS_D2_Set_Not_Visible(v385, v229, a9 + 6194, v369);
        PP_BDS_D2_Set_Not_Visible((unsigned char *)(a9 + 8593), v229, a9 + 6630, v369);
        PP_BDS_D2_Set_Not_Visible((unsigned char *)(a9 + 8595), v229, a9 + 7066, v369);
LABEL_499:
        uint64_t v18 = v389;
        uint64_t v210 = (uint64_t)v384;
LABEL_500:
        if (*(unsigned char *)(v210 + 332))
        {
          unsigned int v289 = *(unsigned __int8 *)(v382 + 4);
          if (v289 <= 0xC7) {
            *(unsigned char *)(v382 + 4) = v289 + 1;
          }
          if (*v390)
          {
            *(unsigned char *)(v210 + 332) = 0;
            goto LABEL_505;
          }
          char v292 = 0;
          unsigned int v291 = v390 + 4;
          int v290 = *((_DWORD *)v390 + 1);
LABEL_508:
          if (*v385 || *(unsigned char *)(a9 + 8596))
          {
            if (!v377) {
              char v292 = 1;
            }
            if (v290 == 2 || (v292 & 1) == 0)
            {
              uint64_t v210 = (uint64_t)v384;
              if (!v390[444]) {
                ++*((_WORD *)v390 + 223);
              }
              v390[444] = 1;
              *(void *)&long long v293 = 0x1111111111111111;
              *((void *)&v293 + 1) = 0x1111111111111111;
              *((_OWORD *)v390 + 28) = v293;
              *((_OWORD *)v390 + 29) = v293;
              *((_OWORD *)v390 + 30) = v293;
              *((_OWORD *)v390 + 31) = v293;
              *((_OWORD *)v390 + 32) = v293;
              *((_OWORD *)v390 + 33) = v293;
              *((_OWORD *)v390 + 34) = v293;
              *((_OWORD *)v390 + 35) = v293;
              double v294 = (const float *)(v384 + 26);
              uint64_t v295 = 1072;
              float32x4_t v296 = vld1q_dup_f32(v294);
              do
              {
                *(float32x4_t *)&v390[v295] = v296;
                v295 -= 16;
              }
              while (v295 != 560);
              EvCrt_v("ChanReset ALL : PrePos2  BadNav %d  PosDisc %d  NavProbs %d  NavDiscrep %d  Count %d", v290, *((unsigned __int8 *)v384 + 332), *(unsigned __int8 *)(v382 + 4), *v390, *((unsigned __int16 *)v390 + 223));
              if (*((_DWORD *)v390 + 1)) {
                goto LABEL_521;
              }
            }
            else
            {
              uint64_t v210 = (uint64_t)v384;
              if (!v290) {
                goto LABEL_557;
              }
LABEL_521:
              if (*(unsigned char *)(v210 + 332) && !v377)
              {
                for (uint64_t k = 0; k != 128; ++k)
                {
                  uint64_t v298 = v381 + 4 * k;
                  int v300 = *(_DWORD *)(v298 + 96);
                  unsigned __int8 v299 = (unsigned int *)(v298 + 96);
                  if (Is_Legal(v300) && *(unsigned __int8 *)(v381 + k + 1760) <= 0x18u)
                  {
                    v390[k + 448] = 17;
                    unsigned int v301 = (const float *)(v210 + 208);
                    float32x4_t v302 = vld1q_dup_f32(v301);
                    for (uint64_t m = 1072; m != 560; m -= 16)
                      *(float32x4_t *)&v390[m] = v302;
                    GNSS_SV_Str = Get_GNSS_SV_Str(*v299);
                    EvCrt_v("ChanReset %d : PrePos3  %s  NavProbs %d  NavDiscrep %d  SNR %d", k, GNSS_SV_Str, *(unsigned __int8 *)(v382 + 4), *v390, *(unsigned __int8 *)(v381 + k + 1760));
                  }
                }
              }
            }
          }
          else
          {
            memcpy(__b, (const void *)(a9 + 6630), 0x1B4uLL);
            uint64_t v305 = 0;
            __int16 v306 = 0;
            unsigned int v307 = 0;
            int v378 = *((_DWORD *)v384 + 52);
            int v376 = -*((unsigned __int16 *)v384 + 160);
            __int16 v374 = *((_WORD *)v384 + 161);
            do
            {
              if (v390[v305 + 8])
              {
                uint64_t v308 = a9 + 4 * v305;
                if (*(_DWORD *)(v308 + 7720) || v307 > 0x7A) {
                  goto LABEL_554;
                }
                LODWORD(__src[0]) = 0;
                int v309 = LongPrnIdx_To_Prn(v305, (int *)__src);
                unsigned __int8 v310 = __src[0];
                if (LODWORD(__src[0]) == 2) {
                  int v309 = *(_DWORD *)(*(void *)(a9 + 8680) + 4 * (v309 - 1));
                }
                for (unint64_t n = 0; n != 218; ++n)
                {
                  if ((__int16)(v305 + 1) == *((__int16 *)__b + n))
                  {
                    if (n <= 0xD8)
                    {
                      unint64_t v312 = n;
                      do
                      {
                        int v313 = (_WORD *)__b + v312++;
                        *int v313 = v313[1];
                      }
                      while (v312 != 217);
                    }
                    WORD1(__b[27]) = -1;
                  }
                }
                switch(v310)
                {
                  case 2u:
                    __int16 v314 = 146;
                    break;
                  case 3u:
                    __int16 v314 = 174;
                    break;
                  case 4u:
                    if (v309 - 59 >= 0xFFFFFFCB) {
                      __int16 v314 = 162;
                    }
                    else {
                      __int16 v314 = 238;
                    }
                    break;
                  case 5u:
                  case 7u:
                    __int16 v314 = 258;
                    break;
                  case 6u:
                    __int16 v314 = 240;
                    break;
                  default:
                    __int16 v314 = 154;
                    break;
                }
                uint64_t v315 = a9 + 48 * v307;
                *(_DWORD *)(v315 + 72) = v378;
                *(unsigned char *)(v315 + 76) = 1;
                *(_DWORD *)(v315 + 80) = v310 | (v309 << 16);
                *(_DWORD *)(v315 + 84) = 0;
                *(_WORD *)(v315 + 88) = v314;
                *(_WORD *)(v315 + 90) = v374;
                *(_WORD *)(v315 + 92) = 0;
                *(_WORD *)(v315 + 94) = v376;
                *(unsigned char *)(v315 + 96) = -1;
                *(_WORD *)(v315 + 98) = 5115;
                *(void *)(v315 + 100) = 0;
                *(_DWORD *)(v315 + 108) = 0;
                *(_DWORD *)(v315 + 112) = 157;
                *(_WORD *)(v315 + 116) = 0;
                memcpy((void *)(a9 + 6630), __b, 0x1B4uLL);
                *(unsigned char *)(a9 + v305 + 5976) = v307;
                *(_WORD *)(a9 + 2 * v307 + 6194) = v306 + 1;
                *(_DWORD *)(v308 + 7720) = 1;
                *(unsigned char *)(a9 + 8596) = ++v307;
                *uint64_t v385 = v307;
                --*(unsigned char *)(a9 + 8593);
                if (v390[v305 + 8])
                {
LABEL_554:
                  uint64_t v316 = v390[v305 + 226];
                  v390[v316 + 448] = 17;
                  *(_DWORD *)&v390[4 * v316 + 576] = *((_DWORD *)v384 + 52);
                  char v317 = Get_GNSS_SV_Str(*(unsigned int *)(v381 + 4 * v316 + 96));
                  EvCrt_v("ChanReset %d : PrePos1  %s  BadNav %d  PosDisc %d  NavProbs %d  NavDiscrep %d  SNR %d", v316, v317, *((_DWORD *)v390 + 1), *((unsigned __int8 *)v384 + 332), *(unsigned __int8 *)(v382 + 4), *v390, *(unsigned __int8 *)(v381 + v305 + 1760));
                }
              }
              ++v305;
              ++v306;
            }
            while (v305 != 218);
            uint64_t v210 = (uint64_t)v384;
          }
LABEL_557:
          if (*(_DWORD *)v291)
          {
            *((void *)v291 + 54) = 0;
            *((_OWORD *)v291 + 25) = 0u;
            *((_OWORD *)v291 + 26) = 0u;
            *((_OWORD *)v291 + 23) = 0u;
            *((_OWORD *)v291 + 24) = 0u;
            *((_OWORD *)v291 + 21) = 0u;
            *((_OWORD *)v291 + 22) = 0u;
            *((_OWORD *)v291 + 19) = 0u;
            *((_OWORD *)v291 + 20) = 0u;
            *((_OWORD *)v291 + 17) = 0u;
            *((_OWORD *)v291 + 18) = 0u;
            *((_OWORD *)v291 + 15) = 0u;
            *((_OWORD *)v291 + 16) = 0u;
            *((_OWORD *)v291 + 13) = 0u;
            *((_OWORD *)v291 + 14) = 0u;
            *((_OWORD *)v291 + 11) = 0u;
            *((_OWORD *)v291 + 12) = 0u;
            *((_OWORD *)v291 + 9) = 0u;
            *((_OWORD *)v291 + 10) = 0u;
            *((_OWORD *)v291 + 7) = 0u;
            *((_OWORD *)v291 + 8) = 0u;
            *((_OWORD *)v291 + 5) = 0u;
            *((_OWORD *)v291 + 6) = 0u;
            *((_OWORD *)v291 + 3) = 0u;
            *((_OWORD *)v291 + 4) = 0u;
            *((_OWORD *)v291 + 1) = 0u;
            *((_OWORD *)v291 + 2) = 0u;
            *(_OWORD *)unsigned int v291 = 0u;
          }
          uint64_t v14 = (uint64_t)v380;
          uint64_t v18 = v389;
          if (*(unsigned char *)(v210 + 332)) {
            *uint64_t v390 = 1;
          }
        }
        else
        {
LABEL_505:
          unsigned int v291 = v390 + 4;
          int v290 = *((_DWORD *)v390 + 1);
          if (v290)
          {
            char v292 = 1;
            goto LABEL_508;
          }
        }
        int v318 = *(unsigned __int8 *)(v18 + 23);
        *(unsigned char *)(a9 + 8670) = 0;
        if (v318)
        {
          uint64_t v319 = 0;
          *(_WORD *)(a9 + 8671) = 14;
          *(void *)(a9 + 8656) = 0;
          *(void *)(a9 + 8662) = 0;
          do
          {
            if (!*(unsigned char *)(*(void *)(v18 + 488) + v319) && !*(unsigned char *)(*(void *)(v18 + 1048) + v319))
            {
              int v320 = 0;
              goto LABEL_570;
            }
            ++v319;
          }
          while (v319 != 24);
          *(_WORD *)(a9 + 8671) = 3584;
          int v320 = 3;
LABEL_570:
          for (iuint64_t i = 0; ii != 56; ii += 4)
            *(_DWORD *)(a9 + 8600 + ii) = v320;
          int v322 = 0;
          while (2)
          {
            LODWORD(__b[0]) = 0;
            int v323 = *(__int16 *)(a9 + 2 * v322 + 6194);
            uint64_t v324 = (v323 - 1);
            if (v323 >= 1)
            {
              int v325 = LongPrnIdx_To_ShortPrnIdx((v323 - 1), __b);
              if (LODWORD(__b[0]) == 2)
              {
                int v327 = v325;
                int v328 = *(_DWORD *)(*(void *)(a9 + 8680) + 4 * v325);
                if (v328 != 2139062143)
                {
                  int v329 = v328 + 7;
                  uint64_t v330 = a9 + 4 * v324;
                  int v331 = *(_DWORD *)(v330 + 7720);
                  if (v331 == 3)
                  {
                    uint64_t v336 = a9 + 4 * v329;
                    if (!*(_DWORD *)(v336 + 8600)) {
                      --*(unsigned char *)(a9 + 8671);
                    }
                    ++*(unsigned char *)(a9 + 8672);
                    *(_DWORD *)(v336 + 8600) = 3;
                    *(_DWORD *)(*(void *)(a9 + 8688) + 4 * v329) = v325 + 1;
                    uint64_t v335 = v383 + 4 * v329;
LABEL_586:
                    *(_DWORD *)(v335 + 17480) = 3;
                  }
                  else if (v331 == 1)
                  {
                    uint64_t v332 = a9 + 4 * v329;
                    int v333 = *(_DWORD *)(v332 + 8600);
                    if (v333 != 1)
                    {
                      uint64_t v334 = *(char *)(a9 + 8670);
                      if (v334 <= 13)
                      {
                        if (!v333) {
                          --*(unsigned char *)(a9 + 8671);
                        }
                        *(unsigned char *)(a9 + v334 + 8656) = v328;
                        ++*(unsigned char *)(a9 + 8670);
                        *(_DWORD *)(v332 + 8600) = 1;
                        *(_DWORD *)(*(void *)(a9 + 8688) + 4 * v329) = v325 + 1;
                        uint64_t v335 = v383 + 4 * v329;
                        goto LABEL_586;
                      }
                    }
                    *(_DWORD *)(v330 + 7720) = 2;
                    uint64_t v337 = *v385;
                    if (v337 == *(unsigned __int8 *)(a9 + 8596))
                    {
                      EvLog_v("PP_Update_Glonass: num_viz & num_AA miss-match,  %d  %d   FrqId %d   Slot %d", *v385, v337, v329, v325 + 1);
                      uint64_t v337 = *v385;
                    }
                    uint64_t v338 = 0;
                    if (v337)
                    {
                      uint64_t v339 = v337;
                      double v340 = (unsigned __int16 *)(a9 + 6194);
                      do
                      {
                        int v342 = *v340++;
                        __int16 v341 = v342;
                        if (v342 != (unsigned __int16)v323)
                        {
                          *(_WORD *)(a9 + 2 * v338 + 6194) = v341;
                          uint64_t v338 = (v338 + 1);
                        }
                        --v339;
                      }
                      while (v339);
                    }
                    if (v338 != (v337 - 1)) {
                      EvLog_nd("PP_Update_Glonass: num_vis not decremented", 2, v326, v338, v337);
                    }
                    *(_WORD *)(a9 + 2 * v338 + 6194) = -1;
                    *uint64_t v385 = v338;
                    int v343 = *(unsigned __int8 *)(a9 + 8596) - 1;
                    if (v343 == v338)
                    {
                      v344 = (unsigned char *)(a9 + v324 + 5976);
                      int v345 = (char)*v344;
                      *(unsigned char *)(a9 + 8596) = v343;
                      uint64_t v14 = (uint64_t)v380;
                      if ((v345 & 0x80000000) == 0)
                      {
                        uint64_t v346 = a9 + 48 * v345;
                        *(_OWORD *)(v346 + 102) = 0u;
                        *(_OWORD *)(v346 + 88) = 0u;
                        *(_OWORD *)(v346 + 72) = 0u;
                        unsigned char *v344 = -1;
                      }
                      v322 -= v322 > 0;
                      EvCrt_v("PP_Update_Glonass:  Error:  Two Glonass SVs visible on same freq,  FrqId %d  Slot %d", v329, v327 + 1);
                    }
                    else
                    {
                      uint64_t v14 = (uint64_t)v380;
                    }
                  }
                }
              }
            }
            BOOL v203 = v322++ < 217;
            if (v203) {
              continue;
            }
            break;
          }
          uint64_t v347 = 0;
          uint64_t v348 = a9 + 7848;
          uint64_t v18 = v389;
          uint64_t v210 = (uint64_t)v384;
          while (2)
          {
            uint64_t v349 = a9 + 4 * v347;
            if (*(_DWORD *)(v349 + 8600))
            {
LABEL_604:
              if (++v347 == 14) {
                goto LABEL_568;
              }
              continue;
            }
            break;
          }
          unint64_t v350 = 0;
          uint64_t v351 = 0;
          v352 = (_DWORD *)(v349 + 8600);
          *(void *)&__b[0] = 0;
          uint64_t v353 = *(void *)(a9 + 8680);
          char v354 = 1;
          do
          {
            int v355 = *(_DWORD *)(v353 + 4 * v350);
            if (v355 == v347 - 7) {
              *((_DWORD *)__b + v351++) = v350;
            }
            else {
              v354 &= v355 != 2139062143;
            }
            if (v350 > 0x16) {
              break;
            }
            ++v350;
          }
          while ((int)v351 < 2);
          if (v351 == 2)
          {
            int v356 = *(_DWORD *)(v348 + 4 * SLODWORD(__b[0]));
            if (v356 == 3)
            {
              int v357 = *(_DWORD *)(v348 + 4 * SDWORD1(__b[0]));
              if (v357 == 3)
              {
                _DWORD *v352 = 3;
                ++*(unsigned char *)(a9 + 8672);
LABEL_624:
                --*(unsigned char *)(a9 + 8671);
                goto LABEL_604;
              }
LABEL_618:
              BOOL v358 = v357 > 1;
              if ((v354 & 1) == 0)
              {
LABEL_625:
                BOOL v359 = 0;
                goto LABEL_627;
              }
LABEL_621:
              if (v351 != 1)
              {
                if (!v351)
                {
                  _DWORD *v352 = 2;
                  goto LABEL_624;
                }
                goto LABEL_625;
              }
              BOOL v359 = *(_DWORD *)(v348 + 4 * SLODWORD(__b[0])) > 1;
LABEL_627:
              if (v358 || v359)
              {
                _DWORD *v352 = 2;
                --*(unsigned char *)(a9 + 8671);
                if (v351 == 2 && (v354 & 1) != 0)
                {
                  int v360 = __b[0];
                  int v361 = *(char *)(SLODWORD(__b[0]) + a10 + 32);
                  int v362 = *(char *)(SDWORD1(__b[0]) + a10 + 32);
                  if (v362 <= -5) {
                    int v363 = __b[0];
                  }
                  else {
                    int v363 = DWORD1(__b[0]);
                  }
                  if (v361 <= -5) {
                    int v364 = DWORD1(__b[0]);
                  }
                  else {
                    int v364 = __b[0];
                  }
                  if (v361 < v362) {
                    int v360 = DWORD1(__b[0]);
                  }
                  if (v362 == -99) {
                    int v360 = v364;
                  }
                  if (v361 == -99) {
                    int v360 = v363;
                  }
                  *(_DWORD *)(*(void *)(a9 + 8688) + 4 * v347) = v360 + 1;
                  *(_DWORD *)(v383 + 4 * v347 + 17480) = 3;
                }
              }
              goto LABEL_604;
            }
            if (v356 >= 2)
            {
              int v357 = *(_DWORD *)(v348 + 4 * SDWORD1(__b[0]));
              goto LABEL_618;
            }
          }
          BOOL v358 = 0;
          if ((v354 & 1) == 0) {
            goto LABEL_625;
          }
          goto LABEL_621;
        }
        *(_WORD *)(a9 + 8671) = 0;
        memset_pattern16((void *)(a9 + 8600), &unk_263D81540, 0x38uLL);
LABEL_568:
        SB_SBAS_PrePos(v382, v210, v18, v14, a9, a10);
        return;
      default:
        goto LABEL_333;
    }
  }
}

unsigned char *PP_BDS_D2_Set_Not_Visible(unsigned char *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          int v7 = result;
          if (*result)
          {
            unint64_t v8 = 0;
            char v9 = 0;
            do
            {
              int v16 = 0;
              int v10 = *(unsigned __int16 *)(a3 + 2 * v8);
              if ((__int16)v10 >= 1)
              {
                unsigned int v11 = v10 - 1;
                uint64_t result = (unsigned char *)LongPrnIdx_To_Prn(v10 - 1, &v16);
                if (v16 == 4 && result - 59 <= 0xFFFFFFCA)
                {
                  *(_WORD *)(a3 + 2 * v8) = -1;
                  *(_DWORD *)(a4 + 4 * v11) = 2;
                  ++v9;
                }
              }
              ++v8;
              unint64_t v12 = *v7;
            }
            while (v8 < v12);
            if (v9)
            {
              if (*v7)
              {
                unint64_t v13 = 0;
                LODWORD(v14) = 0;
                do
                {
                  int v15 = *(__int16 *)(a3 + 2 * v13);
                  if (v15 >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v14) = v15;
                    LODWORD(v14) = v14 + 1;
                    LOBYTE(v12) = *v7;
                  }
                  ++v13;
                }
                while (v13 < v12);
              }
              else
              {
                LODWORD(v14) = 0;
              }
              if (v14 < v12)
              {
                unint64_t v14 = v14;
                do
                {
                  if (*(__int16 *)(a3 + 2 * v14) >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v14) = -1;
                    LOBYTE(v12) = *v7;
                  }
                  ++v14;
                }
                while (v14 < v12);
              }
              *int v7 = v12 - v9;
              *a2 += v9;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t NK_VVel_Aiding_Required(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 + 60400;
  int v7 = (int *)(a1 + 27136);
  if ((!*(_DWORD *)(a1 + 27136) || *(int *)(a2 + 20) < 8 || *(unsigned char *)(a1 + 241)) && *(unsigned char *)v6
    || (int v8 = *(_DWORD *)(a1 + 20), (v8 - 5) < 4)
    || v8 == 4 && *(double *)(a2 + 1840) > 50.0)
  {
    uint64_t result = 0;
    *(unsigned char *)a3 = 0;
    return result;
  }
  int v10 = (double *)(a2 + 36600);
  v25[0] = 0.0;
  v25[1] = 0.0;
  double v26 = 0.0;
  Comp_NEDvar_UDU(a1 + 976, 0xCu, 9, (double (*)[3])(a2 + 1736), v25);
  int v11 = *v7;
  BOOL v12 = *v7 && !*(unsigned char *)(a1 + 241) && (*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) == 2 && *(double *)(a2 + 1848) < 2.0;
  if (*(int *)(a2 + 20) > 8) {
    unsigned __int8 v13 = 4;
  }
  else {
    unsigned __int8 v13 = 5;
  }
  if (*(_DWORD *)(v6 + 1696) == 1 && *(double *)(v6 + 32) < 4.0)
  {
    unsigned __int8 v13 = 0;
  }
  else if (v12 && *(unsigned __int8 *)(v6 + 1636) < 4u)
  {
    unsigned __int8 v13 = 0x80;
  }
  else if (*(_DWORD *)(v6 + 1680) == 1 && *(double *)(a2 + 60160) < 1.0e-16)
  {
    --v13;
  }
  double v14 = v26;
  if ((*(unsigned __int8 *)(v6 + 1637) < v13
     || *(double *)(a2 + 21696) + *v10 < 1.5
     || ((uint64_t v15 = *(int *)(a1 + 20), v15 > 8) ? (v16 = 1000000.0) : (v16 = dbl_263D81660[v15]), v26 > v16))
    && (*(unsigned char *)(v6 + 1637)
     || *(_DWORD *)(v6 + 1700)
     || *(_DWORD *)(v6 + 1708)
     || *(_DWORD *)(v6 + 1724)
     || *(_DWORD *)(v6 + 1728)))
  {
    *(unsigned char *)a3 = 1;
  }
  else if (!*(unsigned char *)a3)
  {
    return 0;
  }
  if (v11 && !*(unsigned char *)(a1 + 241))
  {
    double v19 = *(double *)(a2 + 1832);
    *(double *)(a3 + 24) = -v19;
    if (v12
      && ((double v20 = *(double *)(a2 + 1848), v20 < 1.0) ? (v21 = *(unsigned __int8 *)(v6 + 1636) >= 3u) : (v21 = 1),
          !v21 || v20 < 0.2)
      || v19 * v19 > v14 * 9.0)
    {
      *(void *)(a3 + 24) = 0;
    }
    uint64_t v22 = *(int *)(a1 + 20);
    if (v22 > 8) {
      double v23 = 9000000.0;
    }
    else {
      double v23 = dbl_263D815D0[v22];
    }
    if (v14 <= v23)
    {
      if (v22 > 8) {
        double v23 = 250000.0;
      }
      else {
        double v23 = dbl_263D81618[v22];
      }
      if (v14 >= v23) {
        goto LABEL_64;
      }
    }
    else
    {
      *(void *)(a3 + 24) = 0;
    }
    double v14 = v23;
LABEL_64:
    if (v22 > 8) {
      double v24 = 1000000.0;
    }
    else {
      double v24 = dbl_263D81660[v22];
    }
    double v18 = v14 + v24;
    goto LABEL_68;
  }
  *(void *)(a3 + 24) = 0;
  uint64_t v17 = *(int *)(a1 + 20);
  if (v17 >= 9) {
    double v18 = 1000000.0;
  }
  else {
    double v18 = dbl_263D81660[v17];
  }
LABEL_68:
  *(double *)(a3 + 32) = v18;
  *(_DWORD *)(a3 + 4) = 2;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)a2;
  *(unsigned char *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_263D815C0;
  *(void *)(a3 + 64) = 0;
  return 1;
}

__n128 GN_GPS_Get_LibVersion(char *a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unsigned int v2 = *(unsigned __int16 *)(qword_26AA2DE78 + 476);
  unsigned int v3 = *(unsigned __int16 *)(qword_26AA2DE78 + 478);
  int v4 = *(_DWORD *)(qword_26AA2DE78 + 480);
  int v5 = *(unsigned __int8 *)(qword_26AA2DE78 + 484);
  int v6 = *(unsigned __int8 *)(qword_26AA2DE78 + 485);
  int v7 = *(unsigned __int8 *)(qword_26AA2DE78 + 486);
  int v8 = *(unsigned __int8 *)(qword_26AA2DE78 + 487);
  uint64_t v9 = qword_26AA2DED8;
  if (__PAIR64__(*(unsigned __int16 *)(qword_26AA2DED8 + 14), *(unsigned __int16 *)(qword_26AA2DED8 + 8)) != __PAIR64__(v3, v2)
    || *(_DWORD *)(qword_26AA2DED8 + 16) != v4
    || *(unsigned __int8 *)(qword_26AA2DED8 + 20) != v5
    || *(unsigned __int8 *)(qword_26AA2DED8 + 21) != v6
    || *(unsigned __int8 *)(qword_26AA2DED8 + 22) != v7
    || *(unsigned __int8 *)(qword_26AA2DED8 + 23) != v8)
  {
    *(_WORD *)(qword_26AA2DED8 + 8) = v2;
    *(_WORD *)(v9 + 14) = v3;
    *(_DWORD *)(v9 + 16) = v4;
    *(unsigned char *)(v9 + 20) = v5;
    *(unsigned char *)(v9 + 21) = v6;
    *(unsigned char *)(v9 + 22) = v7;
    *(unsigned char *)(v9 + 23) = v8;
    int v10 = (v2 >> 10) & 0x1F | 0x40;
    *(unsigned char *)(v9 + 10) = (v2 >> 10) & 0x1F | 0x40;
    *(unsigned char *)(v9 + 11) = (v2 >> 5) & 0x1F | 0x40;
    int v11 = (unsigned __int8 *)(v9 + 11);
    *(unsigned char *)(v9 + 12) = v2 & 0x1F | 0x40;
    *(unsigned char *)(v9 + 13) = 0;
    BOOL v12 = *(char **)v9;
    uint64_t v13 = *(void *)v9 + 33;
    uint64_t v28 = v12;
    long long v29 = (char *)v13;
    v27[1] = v12;
    do
    {
      v27[0] = v12 + 1;
      char *v12 = v10;
      BOOL v12 = v27[0];
      if (v27[0] >= v29)
      {
        BOOL v12 = v28;
        v27[0] = v28;
      }
      int v14 = *v11++;
      LOBYTE(v10) = v14;
    }
    while (v14);
    v27[0] = v12 + 1;
    char *v12 = 58;
    if (v27[0] >= v29) {
      v27[0] = v28;
    }
    sprintf_03x(v27, *(unsigned __int16 *)(v9 + 14));
    uint64_t v15 = v27[0]++;
    *uint64_t v15 = 45;
    if (v27[0] >= v29) {
      v27[0] = v28;
    }
    unint64_t v16 = *(unsigned int *)(v9 + 16);
    v30[0] = hexTABLE[v16 >> 28];
    v30[1] = hexTABLE[(v16 >> 24) & 0xF];
    hex6((uint64_t)v27, v16, v30, 2);
    uint64_t v17 = v27[0]++;
    *uint64_t v17 = 45;
    if (v27[0] >= v29) {
      v27[0] = v28;
    }
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 20));
    double v18 = v27[0]++;
    *double v18 = 46;
    if (v27[0] >= v29) {
      v27[0] = v28;
    }
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 21));
    double v19 = v27[0]++;
    *double v19 = 46;
    if (v27[0] >= v29) {
      v27[0] = v28;
    }
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 22));
    double v20 = v27[0]++;
    *double v20 = 46;
    if (v27[0] >= v29) {
      v27[0] = v28;
    }
    sprintf_02d(v27, *(unsigned __int8 *)(v9 + 23));
  }
  long long v21 = *(_OWORD *)(v9 + 24);
  long long v22 = *(_OWORD *)(v9 + 40);
  long long v23 = *(_OWORD *)(v9 + 72);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(v9 + 56);
  *((_OWORD *)a1 + 3) = v23;
  *(_OWORD *)a1 = v21;
  *((_OWORD *)a1 + 1) = v22;
  __n128 result = *(__n128 *)(v9 + 88);
  long long v25 = *(_OWORD *)(v9 + 104);
  long long v26 = *(_OWORD *)(v9 + 136);
  *((_OWORD *)a1 + 6) = *(_OWORD *)(v9 + 120);
  *((_OWORD *)a1 + 7) = v26;
  *((__n128 *)a1 + 4) = result;
  *((_OWORD *)a1 + 5) = v25;
  return result;
}

uint64_t GN_GPS_Initialise(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v61 = *MEMORY[0x263EF8340];
  unint64_t v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  uint64_t v2 = 10;
  do
  {
    *(_DWORD *)&v59[4 * v2 - 16] = v1;
    unint64_t v3 = v2-- + 1;
  }
  while (v3 > 1);
  Last_Published_Nav_Data_TTag = 0;
  Last_Published_Raw_Meas_TTag = 0;
  _MergedGlobals_1 = 0;
  inited = GNSS_Init_p_list();
  GNSS_Clear_DataAreas((uint64_t)inited);
  uint64_t v5 = *((void *)&g_GN_GPS_Data_p_list + 1);
  **((_OWORD **)&g_GN_GPS_Data_p_list + 1) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  GNSS_HL_Data_Bases_Clear((uint64_t)&g_GN_GPS_Data_p_list);
  EvCrt_v("GN_GPS_Initialise: ");
  g_Logging_Cfg = 4;
  uint64_t v6 = qword_26AA2DED8;
  *(_WORD *)(qword_26AA2DED8 + 8) = 0;
  *(_WORD *)(v6 + 14) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0x7375646E6962696CLL;
  LOBYTE(v7) = 32;
  *(unsigned char *)(v6 + 32) = 32;
  *((void *)&__src[1] + 1) = v6 + 41;
  *(void *)&__src[1] = v6 + 32;
  *((void *)&__src[0] + 1) = v6 + 32;
  int v8 = (unsigned char *)(v6 + 33);
  strcpy(v60, " 2");
  uint64_t v9 = 1;
  do
  {
    *(void *)&__src[0] = v8 + 1;
    *int v8 = v7;
    int v8 = *(unsigned char **)&__src[0];
    if (*(void *)&__src[0] >= *((void *)&__src[1] + 1))
    {
      int v8 = *(unsigned char **)&__src[1];
      *(void *)&__src[0] = *(void *)&__src[1];
    }
    int v7 = v60[v9++];
  }
  while (v7);
  *(void *)&__src[0] = v8 + 1;
  *int v8 = 46;
  if (*(void *)&__src[0] >= *((void *)&__src[1] + 1)) {
    *(void *)&__src[0] = *(void *)&__src[1];
  }
  digit2((uint64_t)__src, 0x25u, v60, 0, 0);
  int v10 = (unsigned char *)(*(void *)&__src[0])++;
  *int v10 = 46;
  if (*(void *)&__src[0] >= *((void *)&__src[1] + 1)) {
    int v11 = *(unsigned char **)&__src[1];
  }
  else {
    int v11 = *(unsigned char **)&__src[0];
  }
  *(void *)&__src[0] = v11 + 1;
  unsigned char *v11 = 48;
  if (*(void *)&__src[0] >= *((void *)&__src[1] + 1)) {
    BOOL v12 = *(unsigned char **)&__src[1];
  }
  else {
    BOOL v12 = *(unsigned char **)&__src[0];
  }
  *(void *)&__src[0] = v12 + 1;
  unsigned char *v12 = 45;
  strcpy((char *)(v6 + 41), "241012-000:0000-00000000-00.00.00.00  Nov 10 2024 02:24:00");
  *(void *)uint64_t v6 = v6 + 48;
  *(unsigned char *)(v6 + 152) = 0;
  *(_DWORD *)&word_26AA2E186 = 0;
  if (byte_26AA2E184 == 1)
  {
    __int16 v13 = word_26AA2E18A + 1;
  }
  else
  {
    __int16 v13 = 1;
    byte_26AA2E184 = 1;
  }
  word_26AA2E18A = v13;
  GNSS_Mark_Restart(0);
  DWORD1(v58) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog("GN_GPS_Initialise:  Read NV_Store NO Data");
  bzero(__src, 0x8290uLL);
  for (uint64_t i = 192; i != 1984; i += 56)
  {
    uint64_t v15 = (char *)__src + i;
    *((_DWORD *)v15 + 12) = 0;
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_OWORD *)v15 + 2) = 0uLL;
    *(_OWORD *)uint64_t v15 = 0uLL;
  }
  for (uint64_t j = 124; j != 380; j += 8)
  {
    uint64_t v17 = &__src[j];
    *(_OWORD *)((char *)v17 + 107) = 0uLL;
    v17[5] = 0uLL;
    v17[6] = 0uLL;
    v17[3] = 0uLL;
    void v17[4] = 0uLL;
    v17[1] = 0uLL;
    v17[2] = 0uLL;
    *uint64_t v17 = 0uLL;
  }
  memset(&__src[380], 0, 22);
  uint64_t v18 = -560;
  do
  {
    *(_DWORD *)((char *)&__src[419] + v18 + 8) = 0;
    double v19 = (_OWORD *)((char *)&__src[416] + v18 + 8);
    v19[1] = 0uLL;
    v19[2] = 0uLL;
    *double v19 = 0uLL;
    v18 += 56;
  }
  while (v18);
  uint64_t v20 = 0xFFFFFFFFFFFFFB0;
  do
  {
    long long v21 = (_OWORD *)((char *)&__src[v20 + 496] + 8);
    *(_OWORD *)((char *)v21 + 107) = 0uLL;
    v21[5] = 0uLL;
    v21[6] = 0uLL;
    v21[3] = 0uLL;
    void v21[4] = 0uLL;
    v21[1] = 0uLL;
    v21[2] = 0uLL;
    *long long v21 = 0uLL;
    v20 += 8;
  }
  while (v20 * 16);
  *(void *)((char *)&__src[500] + 6) = 0;
  *(_OWORD *)((char *)&__src[498] + 8) = 0u;
  *(_OWORD *)((char *)&__src[499] + 8) = 0u;
  *(_OWORD *)((char *)&__src[496] + 8) = 0u;
  *(_OWORD *)((char *)&__src[497] + 8) = 0u;
  uint64_t v22 = 0xFFFFFFFFFFFFF94;
  do
  {
    long long v23 = &__src[v22];
    v23[610] = 0uLL;
    v23[609] = 0uLL;
    *(_OWORD *)((char *)&__src[v22 + 610] + 11) = 0uLL;
    v22 += 3;
  }
  while (v22 * 16);
  LOWORD(__src[832]) = 0;
  *(void *)((char *)&__src[831] + 4) = 0;
  *(_DWORD *)((char *)&__src[831] + 11) = 0;
  WORD4(__src[834]) = 0;
  *(void *)((char *)&__src[833] + 12) = 0;
  *(_DWORD *)((char *)&__src[834] + 3) = 0;
  *(_OWORD *)((char *)&__src[832] + 8) = 0u;
  WORD4(__src[833]) = 0;
  double v24 = (char *)&__src[1055] + 8;
  memset(&__src[830], 0, 18);
  bzero(&__src[609], 0xDCBuLL);
  uint64_t v25 = -3528;
  do
  {
    long long v26 = (char *)&__src[1055] + v25 + 8;
    *(_DWORD *)(v26 + 47) = 0;
    *((_OWORD *)v26 + 1) = 0uLL;
    *((_OWORD *)v26 + 2) = 0uLL;
    *(_OWORD *)long long v26 = 0uLL;
    v25 += 56;
  }
  while (v25);
  uint64_t v27 = 630;
  do
  {
    *(_OWORD *)(v24 + 90) = 0uLL;
    *(_OWORD *)(v24 + 76) = 0uLL;
    *(_OWORD *)(v24 + 60) = 0uLL;
    *(_OWORD *)(v24 + 44) = 0uLL;
    *(_OWORD *)(v24 + 28) = 0uLL;
    *(_OWORD *)(v24 + 108) = 0uLL;
    *(_OWORD *)(v24 + 124) = 0uLL;
    *(_OWORD *)(v24 + 140) = 0uLL;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)double v24 = 0;
    *((_WORD *)v24 + 12) = 0;
    v24 += 160;
    v27 -= 10;
  }
  while (v27 * 16);
  LOWORD(__src[1687]) = 0;
  *((void *)&__src[1686] + 1) = 0;
  *(_OWORD *)((char *)&__src[1685] + 8) = 0u;
  *(_DWORD *)((char *)&__src[1688] + 14) = 0;
  *(_OWORD *)((char *)&__src[1687] + 8) = 0u;
  *(void *)((char *)&__src[1688] + 5) = 0;
  do
  {
    WORD6(__src[v27 + 1690]) = 0;
    uint64_t v28 = (char *)&__src[v27 + 1690] + 12;
    *((_WORD *)v28 + 1) = 0;
    *((_WORD *)v28 + 2) = 0;
    *((_DWORD *)v28 + 2) = 0;
    *((_WORD *)v28 + 6) = 0;
    *((void *)v28 + 2) = 0;
    *((void *)v28 + 3) = 0;
    *(void *)(v28 + 29) = 0;
    *(void *)(v28 - 12) = 0;
    *(void *)(v28 - 20) = 0;
    v27 += 4;
    *(_DWORD *)(v28 - 5) = 0;
  }
  while (v27 != 56);
  uint64_t v29 = -1232;
  do
  {
    double v30 = (char *)&__src[1822] + v29 + 8;
    *((_DWORD *)v30 + 20) = 0;
    *((_OWORD *)v30 + 3) = 0uLL;
    *((_OWORD *)v30 + 4) = 0uLL;
    *((_OWORD *)v30 + 1) = 0uLL;
    *((_OWORD *)v30 + 2) = 0uLL;
    *(_OWORD *)double v30 = 0uLL;
    v29 += 88;
  }
  while (v29);
  uint64_t v31 = 0;
  DWORD2(__src[1824]) = 0;
  *(_OWORD *)((char *)&__src[1822] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1823] + 8) = 0u;
  DWORD1(__src[1826]) = 0;
  BYTE8(__src[1826]) = 0;
  HIDWORD(__src[1826]) = 0;
  LOBYTE(__src[1827]) = 0;
  memset(&__src[1825], 0, 18);
  do
  {
    double v32 = (char *)&__src[v31 + 1827] + 8;
    uint64_t v33 = (char *)&__src[v31 + 1828] + 12;
    *((void *)v33 + 2) = 0;
    *(_OWORD *)uint64_t v33 = 0uLL;
    *(_OWORD *)double v32 = 0uLL;
    *((_WORD *)v32 + 8) = 0;
    v31 += 3;
  }
  while (v31 != 72);
  uint64_t v34 = -1728;
  do
  {
    uint64_t v35 = (char *)&__src[2007] + v34 + 8;
    *(void *)(v35 + 62) = 0;
    *((_OWORD *)v35 + 2) = 0uLL;
    *((_OWORD *)v35 + 3) = 0uLL;
    *(_OWORD *)uint64_t v35 = 0uLL;
    *((_OWORD *)v35 + 1) = 0uLL;
    v34 += 72;
  }
  while (v34);
  uint64_t v36 = 0xFFFFFFFFFFFFFDCLL;
  do
  {
    *((void *)&__src[v36 + 2044] + 1) = 0;
    double v37 = (char *)&__src[v36 + 2043] + 8;
    *((_DWORD *)v37 + 6) = 0;
    *(_OWORD *)double v37 = 0uLL;
    v36 += 2;
  }
  while (v36 * 16);
  *(void *)((char *)&__src[2044] + 14) = 0;
  *((void *)&__src[2044] + 1) = 0;
  *(_OWORD *)((char *)&__src[2043] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2073] + 2) = 0u;
  *(_OWORD *)((char *)&__src[2045] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2046] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2047] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2048] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2049] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2050] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2051] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2052] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2053] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2054] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2055] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2056] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2057] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2058] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2059] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2060] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2061] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2062] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2063] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2064] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2065] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2066] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2067] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2068] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2069] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2070] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2071] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2072] + 8) = 0u;
  DWORD2(__src[2075]) = 0;
  *(_OWORD *)((char *)&__src[2074] + 8) = 0u;
  memset(&__src[2076], 0, 204);
  double v38 = (void *)qword_26AA2DEF8;
  memcpy((void *)qword_26AA2DEF8, __src, 0x828CuLL);
  NV_Ram_Init(v38);
  Debug_Log_NonVol(0, qword_26AA2DEF8);
  unint64_t v56 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  DWORD2(v58) = v56;
  uint64_t v39 = qword_26AA2DF00;
  EvLog("NA_Ram_Init:");
  p_NA = v39;
  bzero(__src, 0x69F8uLL);
  s_NA_Ram::s_NA_Ram((s_NA_Ram *)__src);
  memcpy((void *)p_NA, __src, 0x69F8uLL);
  GNSS_HL_Data_Bases_Init(&g_GN_GPS_Data_p_list);
  *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1656) = -1169279272;
  Nav_Kalman_Update_Init(xmmword_26AA2DE88);
  unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  HIDWORD(v58) = v55;
  API_Query_Config(qword_26AA2DEE0);
  g_GN_GNSS_Nav_Debug_Port = 1;
  unint64_t v54 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)unsigned int v59 = v54;
  uint64_t v40 = qword_26AA2DE78;
  int v41 = *(_DWORD *)(qword_26AA2DE78 + 436);
  *(_DWORD *)(qword_26AA2DE78 + 512) = v41;
  *(_DWORD *)(v40 + 504) = 0;
  EvLog_v("GN_GPS_Initialise:  GNB ME HW 0x%x 0x%x   ME FW Checksum 0x%x   TTick %u", *(unsigned __int16 *)(v40 + 476), *(unsigned __int16 *)(v40 + 478), *(_DWORD *)(v40 + 480), v41);
  int v52 = *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1837);
  int v53 = *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1838);
  int v50 = *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1828);
  int v51 = *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1836);
  int v49 = *(__int16 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1728);
  int v47 = *(__int16 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1724);
  int v48 = *(__int16 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1726);
  EvLog_v("GN_GPS_Initialise:  %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d  %d %d  %d %d %d %d  %d %d %d %d  %d  %d %d  %d %d  %d %d %d", *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 4), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 73), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 74), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 22), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 23), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 24), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 25), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 26), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 27), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 28), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 29), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 30), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 31), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 32), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 33), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 34), *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 35),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 36),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 37),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 38),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 39),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 40),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 41),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 42),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 43),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 44),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 45),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 46),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 47),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 48),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 49),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 50),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 51),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 52),
    *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 53),
    *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1660),
    *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1760),
    *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1752),
    *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 16),
    (int)*(double *)(*((void *)&xmmword_26AA2DE48 + 1) + 1672),
    (int)*(double *)(*((void *)&xmmword_26AA2DE48 + 1) + 1680),
    (int)*(double *)(*((void *)&xmmword_26AA2DE48 + 1) + 1688),
    (int)*(double *)(*((void *)&xmmword_26AA2DE48 + 1) + 1696),
    v47,
    v48,
    v49,
    *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1824),
    v50,
    v51,
    v52,
    v53);
  unint64_t v42 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)&v59[4] = v42;
  *(_DWORD *)&v59[8] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog_v("GN_GPS_Initialise: OS Time Waypoints: %u %d %d %d %d %d %d", v58, DWORD1(v58) - v58, v56 - v58, v55 - v58, v54 - v58, v42 - v58, *(_DWORD *)&v59[8] - v58);
  uint64_t v43 = *((void *)&xmmword_26AA2DE48 + 1);
  uint64_t v44 = *((void *)&xmmword_26AA2DE48 + 1) + 1776;
  long long v45 = *(_OWORD *)v59;
  *(_OWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1776) = v58;
  *(_OWORD *)(v43 + 1792) = v45;
  *(_OWORD *)(v44 + 28) = *(_OWORD *)&v59[12];
  return GNSS_Event_Log_Ctl(qword_26AA2DF28);
}

void GNSS_Mark_Restart(int a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  GNSS_Write_NMEA((void *)qword_26AA2DF18);
  GNSS_Write_GNB_Ctrl((char **)qword_26AA2DF10);
  GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
  GNSS_Event_Log_Ctl(qword_26AA2DF28);
  GNSS_Nav_Debug_Ctl(qword_26AA2DF20);
  API_Query_Config((uint64_t)v41);
  uint64_t v2 = qword_26AA2DF10;
  unint64_t v3 = *(char **)(qword_26AA2DF10 + 16);
  *(void *)qword_26AA2DF10 = v3;
  *(void *)(v2 + 8) = v3;
  if (a1 == 2)
  {
    GN_GPS_Get_LibVersion(&v39);
    uint64_t v4 = 0;
    uint64_t v5 = *(char **)v2;
    char v6 = 10;
    do
    {
      *(void *)uint64_t v2 = v5 + 1;
      *uint64_t v5 = v6;
      uint64_t v5 = *(char **)v2;
      if (*(void *)v2 >= *(void *)(v2 + 24))
      {
        uint64_t v5 = *(char **)(v2 + 16);
        *(void *)uint64_t v2 = v5;
      }
      char v6 = aPeGnLibVer[++v4];
    }
    while (v4 != 16);
    char v7 = v39;
    if (v39)
    {
      int v8 = v40;
      do
      {
        *(void *)uint64_t v2 = v5 + 1;
        *uint64_t v5 = v7;
        uint64_t v5 = *(char **)v2;
        if (*(void *)v2 >= *(void *)(v2 + 24))
        {
          uint64_t v5 = *(char **)(v2 + 16);
          *(void *)uint64_t v2 = v5;
        }
        int v9 = *v8++;
        char v7 = v9;
      }
      while (v9);
    }
    char v10 = 32;
    uint64_t v11 = 1u;
    do
    {
      *(void *)uint64_t v2 = v5 + 1;
      *uint64_t v5 = v10;
      uint64_t v5 = *(char **)v2;
      if (*(void *)v2 >= *(void *)(v2 + 24))
      {
        uint64_t v5 = *(char **)(v2 + 16);
        *(void *)uint64_t v2 = v5;
      }
      char v10 = aOsms[v11++];
    }
    while (v11 != 7);
    uint64_t v12 = mach_continuous_time();
    sprintf_10u((void *)v2, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12));
    __int16 v13 = *(char **)v2;
    goto LABEL_47;
  }
  char v14 = 10;
  uint64_t v15 = 1u;
  do
  {
    *(void *)uint64_t v2 = v3 + 1;
    *unint64_t v3 = v14;
    unint64_t v3 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      unint64_t v3 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v3;
    }
    char v14 = asc_263D6175C[v15++];
  }
  while (v15 != 46);
  switch(a1)
  {
    case 0:
      unint64_t v16 = &word_26AA2E18A;
      uint64_t v17 = "GN_GPS_Initialise ";
      goto LABEL_26;
    case 3:
      unint64_t v16 = &word_26AA2E188;
      uint64_t v17 = "WAKE ";
      goto LABEL_26;
    case 1:
      unint64_t v16 = &word_26AA2E186;
      uint64_t v17 = "RESTART ";
LABEL_26:
      char v18 = *v17;
      if (*v17)
      {
        double v19 = (unsigned __int8 *)(v17 + 1);
        do
        {
          *(void *)uint64_t v2 = v3 + 1;
          *unint64_t v3 = v18;
          unint64_t v3 = *(char **)v2;
          if (*(void *)v2 >= *(void *)(v2 + 24))
          {
            unint64_t v3 = *(char **)(v2 + 16);
            *(void *)uint64_t v2 = v3;
          }
          int v20 = *v19++;
          char v18 = v20;
        }
        while (v20);
      }
      sprintf1da((void *)v2, (unsigned __int16)*v16, &v39, 0, 0);
      unint64_t v3 = *(char **)v2;
      break;
  }
  char v21 = 32;
  uint64_t v22 = 1u;
  do
  {
    *(void *)uint64_t v2 = v3 + 1;
    *unint64_t v3 = v21;
    unint64_t v3 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      unint64_t v3 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v3;
    }
    char v21 = asc_263D617AC[v22++];
  }
  while (v22 != 45);
  uint64_t v23 = mach_continuous_time();
  sprintf_10u((void *)v2, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23));
  double v24 = (unsigned char *)(*(void *)v2)++;
  *double v24 = 10;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  GN_GPS_Get_LibVersion(&v39);
  uint64_t v25 = 0;
  __int16 v13 = *(char **)v2;
  char v26 = 10;
  do
  {
    *(void *)uint64_t v2 = v13 + 1;
    *__int16 v13 = v26;
    __int16 v13 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      __int16 v13 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v13;
    }
    char v26 = aPeGnLibVer[++v25];
  }
  while (v25 != 16);
  char v27 = v39;
  if (v39)
  {
    uint64_t v28 = v40;
    do
    {
      *(void *)uint64_t v2 = v13 + 1;
      *__int16 v13 = v27;
      __int16 v13 = *(char **)v2;
      if (*(void *)v2 >= *(void *)(v2 + 24))
      {
        __int16 v13 = *(char **)(v2 + 16);
        *(void *)uint64_t v2 = v13;
      }
      int v29 = *v28++;
      char v27 = v29;
    }
    while (v29);
  }
LABEL_47:
  if (*(unsigned char *)(qword_26AA2DED8 + 152))
  {
    char v30 = 10;
    uint64_t v31 = 1u;
    do
    {
      *(void *)uint64_t v2 = v13 + 1;
      *__int16 v13 = v30;
      __int16 v13 = *(char **)v2;
      if (*(void *)v2 >= *(void *)(v2 + 24))
      {
        __int16 v13 = *(char **)(v2 + 16);
        *(void *)uint64_t v2 = v13;
      }
      char v30 = aHostversion[v31++];
    }
    while (v31 != 15);
    char v32 = *(unsigned char *)(qword_26AA2DED8 + 152);
    if (v32)
    {
      uint64_t v33 = (unsigned __int8 *)(qword_26AA2DED8 + 153);
      do
      {
        *(void *)uint64_t v2 = v13 + 1;
        *__int16 v13 = v32;
        __int16 v13 = *(char **)v2;
        if (*(void *)v2 >= *(void *)(v2 + 24))
        {
          __int16 v13 = *(char **)(v2 + 16);
          *(void *)uint64_t v2 = v13;
        }
        int v34 = *v33++;
        char v32 = v34;
      }
      while (v34);
    }
  }
  uint64_t v35 = 0;
  char v36 = 10;
  do
  {
    *(void *)uint64_t v2 = v13 + 1;
    *__int16 v13 = v36;
    __int16 v13 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      __int16 v13 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v13;
    }
    char v36 = asc_263D61800[++v35];
  }
  while (v35 != 2);
  double v37 = *(char **)(v2 + 16);
  if (v42 >= 1)
  {
    uint64_t v38 = (unsigned __int16)((_WORD)v13 - *(_DWORD *)(v2 + 8));
    GN_GPS_Write_Event_Log(v38, v37);
    GNSS_Write_NMEA((void *)v2);
    double v37 = *(char **)(v2 + 16);
    if (v42 >= 4)
    {
      GN_GPS_Write_GNB_Debug(v38, v37);
      GN_GPS_Write_Nav_Debug(v38, *(char **)(v2 + 16));
      double v37 = *(char **)(v2 + 16);
    }
  }
  *(void *)uint64_t v2 = v37;
  *(void *)(v2 + 8) = v37;
  if (a1) {
    GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
  }
}

char *GN_GPS_Update(void)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  long long v0 = (_DWORD *)*((void *)&xmmword_26AA2DE48 + 1);
  unint64_t v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  uint64_t v2 = 454;
  do
  {
    v0[v2] = v1;
    unint64_t v3 = v2 - 443;
    --v2;
  }
  while (v3 > 1);
  if (g_GN_GPS_Data_p_list != 1)
  {
    if (*(unsigned char *)(*((void *)&xmmword_26AA2DE48 + 1) + 53))
    {
      if (g_GN_GPS_Data_p_list)
      {
        BOOL v6 = g_GN_GPS_Data_p_list == 7 || g_GN_GPS_Data_p_list == 4;
        if (v6)
        {
          v0[445] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          GNSS_Write_GNB_Ctrl((char **)qword_26AA2DF10);
          GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
          GNSS_Event_Log_Ctl(qword_26AA2DF28);
          v0[446] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          return EvLog_v("Sensor in Sleep or Coma Mode: OS Time Waypoints, %u %d %d");
        }
        goto LABEL_25;
      }
    }
    else if (g_GN_GPS_Data_p_list)
    {
      if (g_GN_GPS_Data_p_list == 7 || g_GN_GPS_Data_p_list == 4)
      {
        uint64_t v4 = "GN_GPS_Update:  ERROR:  Called while in Sleep/Coma !";
        goto LABEL_5;
      }
LABEL_25:
      G5K_Read_GNB_Meas((char **)qword_26AA2DF08);
      v0[447] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      G5K_ME_Decode_Meas((unsigned __int8 **)qword_26AA2DF08, (char *)qword_26AA2DE78);
      int v8 = (_DWORD *)qword_26AA2DE78;
      *(_DWORD *)(qword_26AA2DE78 + 516) = 0;
      if (g_GN_GPS_Data_p_list == 5 || g_GN_GPS_Data_p_list == 8)
      {
        int v9 = v8[128];
        uint64_t v10 = *((void *)&xmmword_26AA2DE48 + 1);
        if (v9) {
          v8[129] = *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1660) + v9;
        }
        v8[141] = 0;
        if (!*(_DWORD *)(v10 + 1848))
        {
          if (*(unsigned char *)(v10 + 1839))
          {
            *(unsigned char *)(v10 + 1839) = 0;
            *(_DWORD *)(v10 + 1848) = *(_DWORD *)(v10 + 1852);
          }
          else
          {
            uint64_t v11 = mach_continuous_time();
            uint64_t v10 = *((void *)&xmmword_26AA2DE48 + 1);
            *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1848) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                                         * (double)v11);
            int v8 = (_DWORD *)qword_26AA2DE78;
          }
        }
      }
      else
      {
        uint64_t v10 = *((void *)&xmmword_26AA2DE48 + 1);
      }
      char v93 = 0;
      if (G5K_ME_Poll_New_Meas((uint64_t)v8, v10, *((uint64_t *)&g_GN_GPS_Data_p_list + 1), qword_26AA2DE18, (_DWORD *)qword_26AA2DE20, &v93))
      {
        uint64_t v12 = qword_26AA2DF00;
        __int16 v13 = (_OWORD *)xmmword_26AA2DE48;
        *(unsigned char *)(xmmword_26AA2DE48 + 444) = 0;
        v13[28] = 0u;
        v13[29] = 0u;
        v13[30] = 0u;
        v13[31] = 0u;
        v13[32] = 0u;
        v13[33] = 0u;
        v13[34] = 0u;
        v13[35] = 0u;
        GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
        if (g_GN_GPS_Data_p_list != 11) {
          EvCrt_d("GN_GPS_Update: GNSS_Exe_State = ", g_GN_GPS_Data_p_list);
        }
        if (v93)
        {
          *(_WORD *)(v12 + 2) = 0;
          *(unsigned char *)(v12 + 4) = 0;
          *(unsigned char *)(v12 + 6) = 0;
          *(_WORD *)(v12 + 8) = 0;
          EvLog("GN_GPS_Update:  Cleared NA data because ME_Reset_Detected");
          uint64_t v14 = qword_26AA2DE78;
          if (v93)
          {
            char v15 = 1;
            goto LABEL_63;
          }
        }
        else
        {
          uint64_t v14 = qword_26AA2DE78;
          int v25 = *(_DWORD *)(qword_26AA2DE78 + 520);
          unsigned int v26 = *(_DWORD *)(qword_26AA2DE78 + 564);
          if (v25 + 10 < v26 && v25 + 10000 < v26) {
            return EvLog_v("GN_GPS_Update:  Warning - possible throughput problem  %u  %u  %u  %u");
          }
        }
        int v27 = g_GN_GPS_Data_p_list;
        if (g_GN_GPS_Data_p_list != 2)
        {
          int v38 = *(_DWORD *)(v14 + 448);
          if (g_GN_GPS_Data_p_list == 5 || v38)
          {
            if (g_GN_GPS_Data_p_list != 5)
            {
              EvLog_v("GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", v38, g_GN_GPS_Data_p_list);
              DbgLog_v(1, "GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", *(_DWORD *)(qword_26AA2DE78 + 448), g_GN_GPS_Data_p_list);
              int v38 = *(_DWORD *)(qword_26AA2DE78 + 448);
            }
            if (!v38)
            {
              EvCrt_v("GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", g_GN_GPS_Data_p_list);
              DbgLog_v(1, "GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", g_GN_GPS_Data_p_list);
            }
            int v27 = 6;
            LODWORD(g_GN_GPS_Data_p_list) = 6;
            char v15 = v93;
          }
          else
          {
            char v15 = 0;
            if (g_GN_GPS_Data_p_list == 8)
            {
              int v27 = 9;
              LODWORD(g_GN_GPS_Data_p_list) = 9;
            }
          }
          goto LABEL_64;
        }
        char v15 = 0;
LABEL_63:
        int v27 = 3;
        LODWORD(g_GN_GPS_Data_p_list) = 3;
        *(_WORD *)(v14 + 394) = 0;
        *(_DWORD *)(v14 + 564) = 0;
LABEL_64:
        uint64_t v28 = *((void *)&xmmword_26AA2DE48 + 1);
        uint64_t v90 = xmmword_26AA2DE48;
        *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 2032) = v27;
        *(unsigned char *)(v28 + 2030) = v15;
        uint64_t v29 = qword_26AA2DE38;
        char v30 = (_DWORD *)qword_26AA2DE18;
        *(_WORD *)(qword_26AA2DE38 + 104) = 0;
        unsigned int v31 = *(_DWORD *)v29;
        if (*(_DWORD *)v29)
        {
          double v32 = *(double *)(v29 + 40) * 1000.0;
          double v33 = -0.5;
          if (v32 > 0.0) {
            double v33 = 0.5;
          }
          double v34 = v32 + v33;
          if (v34 <= 2147483650.0)
          {
            if (v34 >= -2147483650.0) {
              int v35 = (int)v34;
            }
            else {
              int v35 = 0x80000000;
            }
          }
          else
          {
            int v35 = 0x7FFFFFFF;
          }
          int v40 = *(_DWORD *)(v29 + 24);
          int v41 = *v30 + v35;
          int v92 = v41 - 75 - v40;
          if (v31 > 0xB) {
            int v42 = 604800000;
          }
          else {
            int v42 = dword_263D816C0[v31 - 1];
          }
          unsigned int v91 = v42;
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          int v89 = v40 - v41 + 75;
          int v88 = v40 + 86400000 - v41 + 74;
          uint64_t v45 = 1803;
          uint64_t v46 = 10;
          int v87 = v41 - 75 - v40;
          do
          {
            int v47 = &v30[v43];
            if (v30[v43 + 1802] && (~*((unsigned __int16 *)v47 + 3608) & 0x208) == 0)
            {
              int v48 = v30[v43 + 1802];
              if (v48 == 4 || v48 == 2)
              {
                int v50 = 1500 * v30[v46];
                int v51 = v30[v46 + 1] / 1023;
                int v52 = v51 + v50;
                int v53 = v51 + v50 - v92;
                if (v48 == 2)
                {
                  if (v53 >= 43199999) {
                    int v54 = 43199999;
                  }
                  else {
                    int v54 = v51 + v50 - v92;
                  }
                  unsigned int v55 = 86400000 * ((v88 + v50 + v51 - v54) / 0x5265C00u);
                  int v56 = v89 + v50 + v51 - v55;
                  if (v56 <= -43200000) {
                    int v57 = -43200000;
                  }
                  else {
                    int v57 = v89 + v50 + v51 - v55;
                  }
                  unsigned int v58 = v87 - v51 + v55 + v57;
                  BOOL v6 = v58 == v50;
                  unsigned int v59 = (v58 - v50 - (v58 != v50)) / 0x5265C00;
                  if (!v6) {
                    ++v59;
                  }
                  int v53 = v56 + 86400000 * v59;
                }
                if (v53 >= 0) {
                  unsigned int v60 = v53;
                }
                else {
                  unsigned int v60 = -v53;
                }
                if (v60 > v91)
                {
                  *(unsigned char *)(v90 + v44 + 448) = 3;
                  *(_DWORD *)(v90 + 576 + 4 * v44) = *v30;
                  GNSS_SV_Str = Get_GNSS_SV_Str(v47[1802]);
                  EvCrt_v("ChanReset %d : SF_Sync_Spoofing  %s  %d  SNR %d  %x  d_Sig_ToT_ms  %d(%d - %d) > %d", v44, GNSS_SV_Str, SHIBYTE(v30[v45 - 1]), LOBYTE(v30[v45]), *((unsigned __int16 *)v47 + 3608), v53, v52, v92, v91);
                  *((_WORD *)v47 + 3608) &= 0xFDF7u;
                  *(unsigned char *)(v29 + 104) = 0;
                }
              }
            }
            ++v44;
            v45 += 9;
            v46 += 14;
            v43 += 9;
          }
          while (v44 != 128);
          int v27 = g_GN_GPS_Data_p_list;
        }
        switch(v27)
        {
          case 3:
            if (*(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1656) != -1169279272) {
              goto LABEL_115;
            }
            GNSS_Starting_Initialised();
            break;
          case 6:
          case 9:
            API_Set_Config((int *)qword_26AA2DEE0);
            GNSS_HL_System_Re_Start((uint64_t)&g_GN_GPS_Data_p_list);
            g_GN_GNSS_Nav_Debug_Port = 1;
            ++word_26AA2E188;
            GNSS_Mark_Restart(3);
            unint64_t v62 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            uint64_t v63 = *((void *)&xmmword_26AA2DE48 + 1);
            *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1768) = v62;
            *(_DWORD *)(v63 + 1820) = v62;
            break;
          case 11:
            GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
            API_Set_Config((int *)qword_26AA2DEE0);
            GNSS_HL_System_Run_Update((uint64_t)&g_GN_GPS_Data_p_list);
            break;
          default:
            EvLog_d("GN_GPS_Update: Unexpected GNSS_Exe_State state - restarting ", v27);
LABEL_115:
            GNSS_Starting_NotInitialised();
            break;
        }
        *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1656) = 0;
        v0[450] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_GN_GPS_Data_p_list != 11)
        {
LABEL_150:
          if (*(_DWORD *)qword_26AA2DE38 == 11)
          {
            unsigned int v78 = *(unsigned __int8 *)(xmmword_26AA2DE68 + 88);
            if (v78 >= 3 && (int v79 = *(unsigned __int8 *)(xmmword_26AA2DE68 + 87), v78 >= 2 * v79))
            {
              int v81 = *(unsigned __int8 *)(xmmword_26AA2DE68 + 89);
              unsigned int v80 = *(unsigned __int8 *)(xmmword_26AA2DE68 + 90);
            }
            else
            {
              unsigned int v80 = *(unsigned __int8 *)(xmmword_26AA2DE68 + 90);
              if (v80 < 3) {
                return EvLog_v("OS Time Waypoints: %u %u %d %d %d %d %d %d %d %d %d %d %d", *(unsigned int *)qword_26AA2DEE8, *(unsigned int *)(qword_26AA2DE78 + 456), (v0[444] - *(_DWORD *)(qword_26AA2DE78 + 456)));
              }
              int v81 = *(unsigned __int8 *)(xmmword_26AA2DE68 + 89);
              if (v80 < 2 * v81) {
                return EvLog_v("OS Time Waypoints: %u %u %d %d %d %d %d %d %d %d %d %d %d", *(unsigned int *)qword_26AA2DEE8, *(unsigned int *)(qword_26AA2DE78 + 456), (v0[444] - *(_DWORD *)(qword_26AA2DE78 + 456)));
              }
              int v79 = *(unsigned __int8 *)(xmmword_26AA2DE68 + 87);
            }
            EvCrt_v("GN_GPS_Update:  WARNING:  Sub-ms Time Verification failed !  Exact_Bit_Sync %d pass vs %d fail , SF_Sync %d pass vs %d fail , Bit_ms_offset %d", v79, v78, v81, v80, *(char *)(xmmword_26AA2DE68 + 91));
            double v82 = EvCrt_v("GN_GPS_Update:  WARNING:  Deprecating Time status to +/- 30ms and calling GN_GPS_Restart_Acquisition()");
            uint64_t v83 = qword_26AA2DE38;
            *(_DWORD *)qword_26AA2DE38 = 9;
            *(_DWORD *)(v83 + 76) = 8;
            uint64_t v84 = qword_26AA2DE58;
            *(_DWORD *)(qword_26AA2DE58 + 56) = 8;
            *(_DWORD *)(v84 + 204) = 8;
            *(void *)(v84 + 872) = 0x4163125300000000;
            GncP16_34HandleRestartAcq((uint64_t)v82, v85, v86);
          }
          return EvLog_v("OS Time Waypoints: %u %u %d %d %d %d %d %d %d %d %d %d %d", *(unsigned int *)qword_26AA2DEE8, *(unsigned int *)(qword_26AA2DE78 + 456), (v0[444] - *(_DWORD *)(qword_26AA2DE78 + 456)));
        }
        G5K_ME_Send_Ctrl(qword_26AA2DF10, qword_26AA2DF10, qword_26AA2DE78, *((uint64_t *)&xmmword_26AA2DE48 + 1), qword_26AA2DE30, xmmword_26AA2DE48);
        if (*(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1820))
        {
          uint64_t v64 = mach_continuous_time();
          double v67 = *(double *)&g_MacClockTicksToMsRelation * (double)v64;
          unint64_t v68 = (unint64_t)v67;
          uint64_t v69 = *(unsigned int *)(*((void *)&xmmword_26AA2DE48 + 1) + 1820);
          int v70 = (unint64_t)v67 - v69;
          if ((unint64_t)v67 < v69)
          {
            EvCrt_nd("GN_GPS_Update: Detected OS ms Time has gone backwards", 2, v66, (unint64_t)v67, v69);
            *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1820) = 0;
            goto LABEL_138;
          }
          int v71 = v70 / 1000;
          if (v70 / 1000 >= (uint64_t)*(unsigned int *)(*((void *)&xmmword_26AA2DE48 + 1) + 1824))
          {
            int v72 = *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1832);
            if (v72)
            {
              int v73 = ((int)v68 - v72) / 1000;
              if (v73 >= v71 && v73 < (uint64_t)*(unsigned int *)(*((void *)&xmmword_26AA2DE48 + 1) + 1828)) {
                goto LABEL_138;
              }
            }
            else
            {
              int v73 = 0;
            }
            GncP16_34HandleRestartAcq(v64, v65, v66);
            uint64_t v74 = *((void *)&xmmword_26AA2DE48 + 1);
            *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1832) = v68;
            *(_DWORD *)(v74 + 1820) = 0;
            EvCrt_v("GN_GPS_Restart_Acquisition(): API call due to No Fix within %d s; Time since last call %d s",
              v71,
              v73);
          }
        }
LABEL_138:
        v0[451] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (*(double *)(*(void *)(p_api + 80) + 360) > 600.0)
        {
          uint64_t v77 = qword_26AA2DE58;
          EvCrt_v("WARNING:  Nav Output Inhibited:  Wassenaar / ITAR Export License speed exceeded:  %f > %f m/s", *(double *)(qword_26AA2DE58 + 360), 600.0);
          GNSS_Event_Log_Ctl(qword_26AA2DF28);
          GN_GPS_Wassenaar_ITAR_Speed_Exceeded(*(double *)(v77 + 360), 600.0);
        }
        else
        {
          if (API_Get_Nav_Data(qword_26AA2DEE8))
          {
            if (g_Logging_Cfg >= 1)
            {
              NMEA_Encode((char **)qword_26AA2DF18, qword_26AA2DEE8, qword_26AA2DEF0);
              GNSS_Write_NMEA((void *)qword_26AA2DF18);
            }
            v0[452] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned int v75 = v0[438];
            if (v75)
            {
              unsigned int v76 = v0[415] + v0[439];
              v0[439] = v76;
              if (v76 >= v75)
              {
                if (g_GncPStateInfo != 8) {
                  GncP07_08WriteNVStore(0x8290uLL, (unsigned __int8 *)qword_26AA2DEF8);
                }
                EvLog("GN_GPS_Write_NV_Store:  1");
                v0[439] = 0;
              }
            }
            v0[453] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          }
          GNSS_Nav_Debug_Screens(&g_GN_GPS_Data_p_list);
          GNSS_Event_Log_Ctl(qword_26AA2DF28);
          GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
          v0[454] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        }
        goto LABEL_150;
      }
      if (*(void *)(qword_26AA2DF10 + 8) != *(void *)qword_26AA2DF10) {
        GNSS_Write_GNB_Ctrl((char **)qword_26AA2DF10);
      }
      if (*(void *)(qword_26AA2DF18 + 8) != *(void *)qword_26AA2DF18) {
        GNSS_Write_NMEA((void *)qword_26AA2DF18);
      }
      if (*(void *)(qword_26AA2DF20 + 8) != *(void *)qword_26AA2DF20) {
        GNSS_Nav_Debug_Ctl(qword_26AA2DF20);
      }
      if (*(void *)(qword_26AA2DF28 + 8) != *(void *)qword_26AA2DF28) {
        GNSS_Event_Log_Ctl(qword_26AA2DF28);
      }
      if (*(void *)(qword_26AA2DF30 + 8) != *(void *)qword_26AA2DF30) {
        GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
      }
      ++_MergedGlobals_1;
      double v16 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      unint64_t v17 = (unint64_t)v16;
      int v18 = *(_DWORD *)(qword_26AA2DE18 + 4);
      int v19 = (unint64_t)v16 - v18;
      _MergedGlobals_1 = 0;
      int v20 = *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1660);
      if (g_GN_GPS_Data_p_list <= 8 && ((1 << g_GN_GPS_Data_p_list) & 0x124) != 0)
      {
        int v21 = *(_DWORD *)(qword_26AA2DE78 + 504);
        if (v21 && (int)v17 - v21 < 501) {
          goto LABEL_134;
        }
        int v22 = 5 * v20;
        if (v22 <= 3000) {
          int v22 = 3000;
        }
        if (v19 >= v22)
        {
          EvLog_v("GN_GPS_Hard_Reset_GNB:  %d > %d ms gap!, >>>POWEROFF_WAKE_UP  (%u)", (unint64_t)v16 - v18, v22, v18);
          LODWORD(g_GN_GPS_Data_p_list) = 2;
          GN_GPS_Hard_Reset_GNB();
          *(_DWORD *)(qword_26AA2DE18 + 4) = v17;
          uint64_t v39 = qword_26AA2DE78;
          *(_DWORD *)(qword_26AA2DE78 + 480) = 0;
          *(_WORD *)(v39 + 488) = 0;
LABEL_134:
          GNSS_Event_Log_Ctl(qword_26AA2DF28);
          return (char *)GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
        }
        EvLog_v("No valid comms :  %u  %d", v18, (unint64_t)v16 - v18);
        uint64_t v23 = (char **)qword_26AA2DF10;
        uint64_t v24 = qword_26AA2DF30;
      }
      else
      {
        int v36 = 3 * v20;
        if (v36 <= 1500) {
          int v36 = 1500;
        }
        if (v19 < v36) {
          goto LABEL_134;
        }
        if (v19 <= 255000)
        {
          EvLog_v("GN_GPS_Update:  Lost BB Coms for %d > %d ms, >>>SLEEP_WAKE_UP  (%u)", (unint64_t)v16 - v18, v36, v18);
          int v37 = 8;
        }
        else
        {
          EvLog_v("GN_GPS_Update:  Lost BB Coms for %d > %d ms, >>>COMA_WAKE_UP  (%u)", (unint64_t)v16 - v18, 255000, v18);
          int v37 = 5;
        }
        LODWORD(g_GN_GPS_Data_p_list) = v37;
        uint64_t v23 = (char **)qword_26AA2DF10;
        uint64_t v24 = qword_26AA2DF30;
      }
      G5K_ME_Send_WakeUp(v23, v24);
      goto LABEL_134;
    }
    if (*(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1656) != -1169279272) {
      EvCrt_v("GN_GPS_Update:  WARNING:  Called with unexpected GNSS_INVALID_EXE_STATE");
    }
    goto LABEL_25;
  }
  uint64_t v4 = "GN_GPS_Update:  ERROR:  Called while in PowerOff !";
LABEL_5:

  return EvCrt_v(v4);
}

BOOL GNSS_Starting_Initialised(void)
{
  EvLog("GN_GPS_Update: Starting after initialisation");
  GNSS_Mark_Restart(2);
  uint64_t v0 = qword_26AA2DE78;
  uint64_t v1 = *(void *)(qword_26AA2DE78 + 476);
  int v2 = *(_DWORD *)(qword_26AA2DE78 + 436);
  *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1764) = v2;
  int v3 = *(_DWORD *)(v0 + 484);
  double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  uint64_t v5 = *((void *)&xmmword_26AA2DE48 + 1);
  *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1768) = (unint64_t)v4;
  *(_DWORD *)(v5 + 1820) = (unint64_t)v4;
  *(_DWORD *)(qword_26AA2DE38 + 128) = v2;
  GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list);
  uint64_t v6 = qword_26AA2DE78;
  *(void *)(qword_26AA2DE78 + 476) = v1;
  *(_DWORD *)(v6 + 484) = v3;
  BOOL result = API_Set_Config((int *)qword_26AA2DEE0);
  LODWORD(g_GN_GPS_Data_p_list) = 11;
  return result;
}

BOOL GNSS_Starting_NotInitialised(void)
{
  EvLog("GN_GPS_Update: Starting from Power Off but without having been initialised");
  g_GN_GNSS_Nav_Debug_Port = 1;
  ++word_26AA2E186;
  word_26AA2E188 = 0;
  GNSS_Mark_Restart(1);
  int v0 = *(_DWORD *)(qword_26AA2DE78 + 476);
  int v1 = *(unsigned __int16 *)(qword_26AA2DE78 + 480);
  int v2 = *(_DWORD *)(qword_26AA2DE78 + 436);
  char v3 = *(unsigned char *)(*((void *)&xmmword_26AA2DE48 + 1) + 2030);
  int v4 = *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 2032);
  char v5 = *(unsigned char *)(qword_26AA2DE40 + 62170);
  uint64_t v6 = *(void *)(*((void *)&xmmword_26AA2DE48 + 1) + 1848);
  GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list);
  uint64_t v7 = qword_26AA2DE78;
  *(_DWORD *)(qword_26AA2DE78 + 476) = v0;
  *(_DWORD *)(v7 + 480) = v1;
  uint64_t v8 = *((void *)&xmmword_26AA2DE48 + 1);
  *(void *)(*((void *)&xmmword_26AA2DE48 + 1) + 1848) = v6;
  *(unsigned char *)(v8 + 2030) = v3;
  *(_DWORD *)(v8 + 2032) = v4;
  *(unsigned char *)(qword_26AA2DE40 + 62170) = v5;
  *(_DWORD *)(v8 + 1764) = v2;
  double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  uint64_t v10 = *((void *)&xmmword_26AA2DE48 + 1);
  *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1768) = (unint64_t)v9;
  *(_DWORD *)(v10 + 1820) = (unint64_t)v9;
  uint64_t v11 = qword_26AA2DEE0;
  if (*(unsigned char *)(qword_26AA2DEE0 + 32))
  {
    EvLog_v("GNSS_Starting_NotInitialised:  Cleared Disabling L1 Band Family signals");
    uint64_t v11 = qword_26AA2DEE0;
  }
  *(unsigned char *)(v11 + 32) = 0;

  return API_Set_Config((int *)v11);
}

uint64_t GN_GPS_Shutdown(void)
{
  EvLog("GN_GPS_Shutdown: ");
  if (g_GN_GPS_Data_p_list > 7 || ((1 << g_GN_GPS_Data_p_list) & 0x92) == 0)
  {
    G5K_ME_Send_Sleep((char **)qword_26AA2DF10, (char **)qword_26AA2DF30, 0, 0xFFFFu, *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1838));
    EvLog("GN_GPS_Shutdown: Send ME to Coma ");
    *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1756) = 0;
    *(_DWORD *)(qword_26AA2DE78 + 504) = 0;
    LODWORD(g_GN_GPS_Data_p_list) = 4;
    if (g_GncPStateInfo != 8) {
      GncP07_08WriteNVStore(0x8290uLL, (unsigned __int8 *)qword_26AA2DEF8);
    }
    Debug_Log_NonVol(1, qword_26AA2DEF8);
    EvLog_nd("GN_GPS_Shutdown: GN_GPS_Write_NV_Store ", 4, v1, *(unsigned int *)(qword_26AA2DEF8 + 4), *(unsigned int *)(qword_26AA2DEF8 + 33416), 33424, 22);
  }
  else
  {
    EvLog_d("GN_GPS_Shutdown: GNSS already Idle or Off ", g_GN_GPS_Data_p_list);
  }
  uint64_t v2 = qword_26AA2DF28;

  return GNSS_Event_Log_Ctl(v2);
}

uint64_t GN_GPS_WakeUp(void)
{
  v14[3] = *MEMORY[0x263EF8340];
  EvCrt_v("GN_GPS_WakeUp: ");
  uint64_t v0 = qword_26AA2DE78;
  *(_DWORD *)(qword_26AA2DE78 + 512) = *(_DWORD *)(qword_26AA2DE78 + 436);
  G5K_ME_Flush_Data(v0);
  if (g_GN_GPS_Data_p_list != 11)
  {
    *(_DWORD *)qword_26AA2DE18 = 0;
    uint64_t v1 = mach_continuous_time();
    uint64_t v2 = qword_26AA2DE18;
    *(_DWORD *)(qword_26AA2DE18 + 4) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1);
    *(void *)(v2 + 8) = 0;
    uint64_t v3 = -4608;
    do
    {
      uint64_t v4 = qword_26AA2DE18 + v3 + 11816;
      *(unsigned char *)(v4 + 32) = 0;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v3 += 36;
    }
    while (v3);
    uint64_t v5 = qword_26AA2DF08;
    uint64_t v6 = *(void *)(qword_26AA2DF08 + 16);
    *(void *)qword_26AA2DF08 = v6;
    *(void *)(v5 + 8) = v6;
    G5K_Read_GNB_Meas((char **)v5);
    uint64_t v7 = *(void *)qword_26AA2DF08 - *(void *)(qword_26AA2DF08 + 8);
    if (v7)
    {
      EvLog_v("%s: Flushed bytes  %d", "GN_GPS_WakeUp", v7);
      uint64_t v8 = qword_26AA2DF08;
      uint64_t v9 = *(void *)(qword_26AA2DF08 + 16);
      *(void *)qword_26AA2DF08 = v9;
      *(void *)(v8 + 8) = v9;
    }
  }
  G5K_ME_Send_WakeUp((char **)qword_26AA2DF10, qword_26AA2DF30);
  EvLog_v("%s:  Read NV_Store NO Data", "GN_GPS_WakeUp");
  Debug_Log_NonVol(1, qword_26AA2DEF8);
  memset(v14, 0, 24);
  Debug_Log_ApxTime((unsigned __int16 *)v14);
  _MergedGlobals_1 = 0;
  if ((g_GN_GPS_Data_p_list - 4) < 3)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 5;
    if (*(int *)qword_26AA2DE38 >= 11) {
      *(_DWORD *)qword_26AA2DE38 = 10;
    }
  }
  else if ((g_GN_GPS_Data_p_list - 7) > 2)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 2;
    uint64_t v10 = qword_26AA2DE38;
    *(_DWORD *)qword_26AA2DE38 = 0;
    *(unsigned char *)(v10 + 16) = 0;
  }
  else
  {
    LODWORD(g_GN_GPS_Data_p_list) = 8;
  }
  *(_WORD *)(qword_26AA2DF00 + 3) = 0;
  uint64_t v11 = *((void *)&xmmword_26AA2DE48 + 1);
  if (*(unsigned char *)(*((void *)&xmmword_26AA2DE48 + 1) + 50))
  {
    EvLog_v("%s:  Cleared Disabling L1 Band Family signals", "GN_GPS_WakeUp");
    uint64_t v11 = *((void *)&xmmword_26AA2DE48 + 1);
  }
  *(unsigned char *)(v11 + 50) = 0;
  uint64_t v12 = qword_26AA2DF28;

  return GNSS_Event_Log_Ctl(v12);
}

uint64_t GN_GPS_Sleep(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = a1;
  EvCrt_nd("GN_GPS_Sleep: ", 2, a3, a1, a2);
  if (v4 >= 0x100)
  {
    unsigned int v4 = 255;
    EvLog_v("GN_GPS_Sleep:  SleepModeTimeOut limited to %d s", 255);
  }
  switch((int)g_GN_GPS_Data_p_list)
  {
    case 0:
      LODWORD(g_GN_GPS_Data_p_list) = 1;
      EvCrt_Illegal_switch_case("GN_GPS_Sleep", 0x5FCu);
      break;
    case 1:
    case 2:
    case 3:
      int v5 = 1;
      goto LABEL_8;
    case 4:
    case 5:
    case 6:
      goto LABEL_6;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      if (v4) {
        int v5 = 7;
      }
      else {
LABEL_6:
      }
        int v5 = 4;
LABEL_8:
      LODWORD(g_GN_GPS_Data_p_list) = v5;
      break;
    default:
      break;
  }
  G5K_ME_Send_Sleep((char **)qword_26AA2DF10, (char **)qword_26AA2DF30, v4, a2, *(unsigned __int8 *)(*((void *)&xmmword_26AA2DE48 + 1) + 1838));
  if (g_GncPStateInfo != 8) {
    GncP07_08WriteNVStore(0x8290uLL, (unsigned __int8 *)qword_26AA2DEF8);
  }
  *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1756) = 0;
  *(_DWORD *)(qword_26AA2DE78 + 504) = 0;
  EvLog_nd("GN_GPS_Sleep:  GN_GPS_Write_NV_Store ", 4, v6, *(unsigned int *)(qword_26AA2DEF8 + 4), *(unsigned int *)(qword_26AA2DEF8 + 33416), 33424, 22);
  if (*(void *)(qword_26AA2DF18 + 8) != *(void *)qword_26AA2DF18) {
    GNSS_Write_NMEA((void *)qword_26AA2DF18);
  }
  if (*(void *)(qword_26AA2DF28 + 8) != *(void *)qword_26AA2DF28) {
    GNSS_Event_Log_Ctl(qword_26AA2DF28);
  }
  if (*(void *)(qword_26AA2DF20 + 8) != *(void *)qword_26AA2DF20) {
    GNSS_Nav_Debug_Ctl(qword_26AA2DF20);
  }
  if (*(void *)(qword_26AA2DF10 + 8) != *(void *)qword_26AA2DF10) {
    GNSS_Write_GNB_Ctrl((char **)qword_26AA2DF10);
  }
  uint64_t result = qword_26AA2DF30;
  if (*(void *)(qword_26AA2DF30 + 8) != *(void *)qword_26AA2DF30)
  {
    return GNSS_GNB_Debug_Ctl(result);
  }
  return result;
}

char *EvLog_GN_GNSS_Config(const char *a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 56) * 1000000.0;
  double v3 = -0.5;
  if (v2 <= 0.0) {
    double v4 = -0.5;
  }
  else {
    double v4 = 0.5;
  }
  double v5 = v2 + v4;
  if (v5 <= 2147483650.0)
  {
    if (v5 >= -2147483650.0) {
      int v6 = (int)v5;
    }
    else {
      int v6 = 0x80000000;
    }
  }
  else
  {
    int v6 = 0x7FFFFFFF;
  }
  double v7 = *(double *)(a2 + 64) * 1000000.0;
  if (v7 > 0.0) {
    double v3 = 0.5;
  }
  double v8 = v7 + v3;
  if (v8 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0) {
      int v9 = (int)v8;
    }
    else {
      int v9 = 0x80000000;
    }
  }
  else
  {
    int v9 = 0x7FFFFFFF;
  }
  double v10 = *(double *)(a2 + 72);
  double v11 = -0.5;
  if (v10 > 0.0) {
    double v11 = 0.5;
  }
  double v12 = v10 + v11;
  if (v12 <= 2147483650.0)
  {
    if (v12 >= -2147483650.0) {
      int v13 = (int)v12;
    }
    else {
      int v13 = 0x80000000;
    }
  }
  else
  {
    int v13 = 0x7FFFFFFF;
  }
  return EvLog_v("%s  %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d %d %d %d %d %d  %d %d  %d %d %d  %d  %d  %d  %d %d  %d %d %d  %d %d  %d %d", a1, *(_DWORD *)a2, *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6), *(unsigned __int8 *)(a2 + 7), *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 9), *(unsigned __int8 *)(a2 + 10), *(unsigned __int8 *)(a2 + 11), *(unsigned __int8 *)(a2 + 12), *(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 14), *(unsigned __int8 *)(a2 + 15), *(unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 17), *(unsigned __int8 *)(a2 + 18),
           *(unsigned __int8 *)(a2 + 19),
           *(unsigned __int8 *)(a2 + 20),
           *(unsigned __int8 *)(a2 + 21),
           *(unsigned __int8 *)(a2 + 22),
           *(unsigned __int8 *)(a2 + 23),
           *(unsigned __int8 *)(a2 + 24),
           *(unsigned __int8 *)(a2 + 25),
           *(unsigned __int8 *)(a2 + 26),
           *(unsigned __int8 *)(a2 + 27),
           *(unsigned __int8 *)(a2 + 28),
           *(unsigned __int8 *)(a2 + 29),
           *(unsigned __int8 *)(a2 + 30),
           *(unsigned __int8 *)(a2 + 31),
           *(unsigned __int8 *)(a2 + 32),
           *(unsigned __int8 *)(a2 + 33),
           *(unsigned __int8 *)(a2 + 34),
           *(unsigned __int8 *)(a2 + 35),
           *(unsigned __int16 *)(a2 + 36),
           *(unsigned __int8 *)(a2 + 38),
           *(_DWORD *)(a2 + 40),
           *(__int16 *)(a2 + 44),
           *(unsigned __int16 *)(a2 + 46),
           *(unsigned __int16 *)(a2 + 48),
           v6,
           v9,
           v13,
           *(_DWORD *)(a2 + 80),
           *(_DWORD *)(a2 + 84),
           *(unsigned __int8 *)(a2 + 88),
           *(unsigned __int8 *)(a2 + 89));
}

uint64_t GN_GPS_Set_Config(uint64_t a1)
{
  if (!a1)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: No changes applied");
    return 0;
  }
  int v2 = g_Logging_Cfg;
  g_Logging_Cfg = 5;
  EvLog_GN_GNSS_Config("GN_GPS_Set_Config: ", a1);
  if (*(int *)a1 >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: PowerPerf = %d >%d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 48) > 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Birth_GPS_WeekNo = %d > %d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 36) <= 0x63u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: FixInterval = %d <100, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 38) == 255)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ForceCold_Timeout = %d ==255, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 46) >= 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Earliest_GPS_WeekNo = %d > 8191, Out of range!");
    return 0;
  }
  double v3 = *(double *)(a1 + 56);
  if (v3 < -90.0 || v3 > 90.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[0] = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  double v4 = *(double *)(a1 + 64);
  if (v4 < -180.0 || v4 > 360.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[1] = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  double v5 = *(double *)(a1 + 72);
  if (v5 < -1000.0 || v5 > 20000.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[2] = %g <-1000.0 or >20000.0, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 80) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: NoFixTime_to_RestartAcq_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 84) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ReAcq_Call_Interval_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (!*(unsigned char *)(a1 + 4)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: GPS has been disabled");
  }
  if (!*(unsigned char *)(a1 + 5)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: GLONASS has been disabled");
  }
  if (!*(unsigned char *)(a1 + 8)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: BeiDou has been disabled");
  }
  if (!*(unsigned char *)(a1 + 9)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Galileo has been disabled");
  }
  if (!*(unsigned char *)(a1 + 6)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: QZSS has been disabled");
  }
  if (!*(unsigned char *)(a1 + 10)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: NavIC has been disabled");
  }
  if (!*(unsigned char *)(a1 + 7)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: SBAS has been disabled");
  }
  if (*(unsigned char *)(a1 + 25)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Use of GPS Over the Air decoded SV Nav Message data has been disabled");
  }
  if (*(unsigned char *)(a1 + 26)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Use of GLONASS Over the Air decoded SV Nav Message data has been disabled");
  }
  if (*(unsigned char *)(a1 + 29)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Use of BeiDou Over the Air decoded SV Nav Message data has been disabled");
  }
  if (*(unsigned char *)(a1 + 30)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Use of Galileo Over the Air decoded SV Nav Message data has been disabled");
  }
  if (*(unsigned char *)(a1 + 27)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Use of QZSS Over the Air decoded SV Nav Message data has been disabled");
  }
  if (*(unsigned char *)(a1 + 31)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Use of NavIC Over the Air decoded SV Nav Message data has been disabled");
  }
  if (*(unsigned char *)(a1 + 28)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Use of SBAS Over the Air decoded SV Nav Message data has been disabled");
  }
  if (*(unsigned char *)(a1 + 32)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: L1 Band Family signals have been disabled");
  }
  if (!*(unsigned char *)(a1 + 33)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: L5 Band Family signals have been disabled");
  }
  if (*(int *)(a1 + 40) <= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Logging Level < 'Info' disables GNB and Nav Debug");
    if (!*(_DWORD *)(a1 + 40)) {
      EvCrt_v("GN_GPS_Set_Config: WARNING: Diagnostic Logging has been disabled");
    }
  }
  if (!*(unsigned char *)(a1 + 88)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Avg Doppler Usage has been disabled");
  }
  if (*(unsigned char *)(a1 + 89)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Broadcast Navigation Message Data Use disabled to test XOF Data");
  }
  g_Logging_Cfg = v2;
  if (API_Set_Config((int *)a1)) {
    API_Query_Config(qword_26AA2DEE0);
  }
  else {
    EvCrt_v("GN_GPS_Set_Config: API_Set_Config() FAILED");
  }
  GNSS_Event_Log_Ctl(qword_26AA2DF28);
  return 1;
}

uint64_t GN_GPS_Set_FixInterval(unsigned int a1)
{
  if (a1 > 0x63)
  {
    uint64_t result = API_Set_FixInterval(a1);
    if (result)
    {
      uint64_t v2 = *(void *)(p_api + 72);
      int v3 = *(_DWORD *)(v2 + 1664);
      if (!v3) {
        int v3 = *(_DWORD *)(v2 + 1660);
      }
      *(_WORD *)(qword_26AA2DEE0 + 36) = v3;
      return 1;
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_FixInterval:  FAILED:  FixInterval = %d  < 100, Out of range !", a1);
    return 0;
  }
  return result;
}

uint64_t GN_GPS_Set_CrossCorr_Params(double *a1)
{
  v12[1] = *(double *)MEMORY[0x263EF8340];
  BOOL v2 = *a1 >= 6.0 && *a1 <= 60.0;
  if (v2 || (v12[0] = 0.0, R8_EQ(a1, v12)))
  {
    double v3 = a1[1];
    BOOL v4 = v3 >= 6.0 && v3 <= 60.0;
    if (v4 || (v12[0] = 0.0, R8_EQ(a1 + 1, v12)))
    {
      double v5 = a1[2];
      BOOL v6 = v5 >= 6.0 && v5 <= 60.0;
      if (v6 || (v12[0] = 0.0, R8_EQ(a1 + 2, v12)))
      {
        double v7 = a1[3];
        BOOL v8 = v7 >= 6.0 && v7 <= 60.0;
        if (v8 || (v12[0] = 0.0, R8_EQ(a1 + 3, v12)))
        {
          uint64_t v9 = *((void *)&xmmword_26AA2DE48 + 1);
          long long v10 = *((_OWORD *)a1 + 1);
          *(_OWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 2096) = *(_OWORD *)a1;
          *(_OWORD *)(v9 + 2112) = v10;
          uint64_t result = 1;
          *(unsigned char *)(v9 + 2128) = 1;
          return result;
        }
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_BDS_B1 = %f [0, 6..60 dB], Out of range!");
      }
      else
      {
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GAL_E1 = %f [0, 6..60 dB], Out of range!");
      }
    }
    else
    {
      EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GPS_L1 = %f [0, 6..60 dB], Out of range!");
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: Strong_Signal_Threshold = %f [0, 6..60 dBHz], Out of range!");
  }
  return 0;
}

uint64_t GN_GPS_Set_XOF_Time(unsigned int a1, unsigned int a2)
{
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1732) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_RTI_Time(unsigned int a1, unsigned int a2)
{
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((void *)&xmmword_26AA2DE48 + 1) + 1736) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_EE_Start_Time(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_EE_Start_Time: %u %u", a1, a2);
  if (a1 < 0x2000)
  {
    if (a2 >= 0x93A80)
    {
      EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_TOW = %d >604799, Out of range!");
      return 0;
    }
    uint64_t v6 = *((void *)&xmmword_26AA2DE48 + 1);
    uint64_t v7 = a2 + 604800 * a1;
    Debug_Log_GPS_EE_Start_Time(a1, a2);
    uint64_t v4 = 1;
    if (v7 == *(void *)(v6 + 1744)) {
      return v4;
    }
    uint64_t v8 = 0;
    *(void *)(v6 + 1744) = v7;
    while (1)
    {
      Constell_Prunint64_t n = Get_Constell_Prn(v8);
      if (Constell_Prn <= 7)
      {
        if (((1 << Constell_Prn) & 0x38) != 0)
        {
          uint64_t v10 = v6 + v8;
          if (*(unsigned char *)(v6 + v8 + 257)) {
            char v11 = 1;
          }
          else {
            char v11 = *(unsigned char *)(v10 + 536) != 0;
          }
          goto LABEL_18;
        }
        if (((1 << Constell_Prn) & 0x86) != 0)
        {
          uint64_t v10 = v6 + v8;
          char v11 = *(unsigned char *)(v6 + v8 + 257);
LABEL_18:
          *(unsigned char *)(v10 + 1376) = v11;
          goto LABEL_19;
        }
        if (Constell_Prn == 6)
        {
          uint64_t v10 = v6 + v8;
          char v11 = *(unsigned char *)(v6 + v8 + 536);
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v8 == 218)
      {
        Core_Save_Inhib_EE((BOOL *)(v6 + 1376), *(void *)(v6 + 1744));
        return 1;
      }
    }
  }
  EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_WeekNo = %d >8191, Out of range!");
  return 0;
}

uint64_t GN_GPS_Encode_NMEA(unsigned int a1, char *a2, int a3, _DWORD *a4, _DWORD *a5)
{
  unsigned __int16 v5 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1 >= 4 && a2)
  {
    if (!a5 || *a5 == *a4 && a5[1] == a4[1])
    {
      if (a3)
      {
        uint64_t v10 = a2;
        char v11 = &a2[a1];
        uint64_t v8 = a2;
        uint64_t v9 = a2;
        NMEA_Encode(&v8, (uint64_t)a4, (uint64_t)a5);
        uint64_t v6 = v8;
        unsigned __int16 v5 = (_WORD)v8++ - (_WORD)v9;
        *uint64_t v6 = 0;
      }
      else
      {
        unsigned __int16 v5 = 0;
        *a2 = 0;
      }
    }
    else
    {
      EvCrt_v("GN_GPS_Encode_NMEA:  FAILED:  Incompatible Nav & Debug Data Local_TTag or OS_Time_ms");
      return 0;
    }
  }
  return v5;
}

void *GN_GPS_Mark_Single_Pos_Used(int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  GNSS_Write_GNB_Ctrl((char **)qword_26AA2DF10);
  GNSS_GNB_Debug_Ctl(qword_26AA2DF30);
  GNSS_Event_Log_Ctl(qword_26AA2DF28);
  GNSS_Nav_Debug_Ctl(qword_26AA2DF20);
  uint64_t v8 = __src;
  uint64_t v43 = __src;
  uint64_t v44 = v46;
  int v42 = __src;
  char v9 = 10;
  uint64_t v10 = 1u;
  do
  {
    int v41 = v8 + 1;
    *uint64_t v8 = v9;
    uint64_t v8 = v41;
    unint64_t v11 = (unint64_t)v44;
    if (v41 >= v44)
    {
      uint64_t v8 = v43;
      int v41 = v43;
    }
    char v9 = str_92[v10++];
  }
  while (v10 != 36);
  if (a1) {
    char v12 = 70;
  }
  else {
    char v12 = 66;
  }
  *uint64_t v8 = v12;
  int v13 = v8 + 1;
  if ((unint64_t)v13 >= v11) {
    int v13 = v43;
  }
  int v41 = v13 + 1;
  *int v13 = 32;
  if ((unint64_t)(v13 + 1) >= v11) {
    int v41 = v43;
  }
  sprintf_2d(&v41, a2);
  uint64_t v14 = v41++;
  *uint64_t v14 = 32;
  if (v41 >= v44) {
    int v41 = v43;
  }
  sprintf_10u(&v41, a3);
  char v15 = v41++;
  *char v15 = 32;
  if (v41 >= v44) {
    int v41 = v43;
  }
  sprintf_10u(&v41, a4);
  uint64_t v16 = 0;
  char v17 = 32;
  int v18 = v41;
  do
  {
    int v41 = v18 + 1;
    *int v18 = v17;
    int v18 = v41;
    if (v41 >= v44)
    {
      int v18 = v43;
      int v41 = v43;
    }
    char v17 = str_93[++v16];
  }
  while (v16 != 8);
  API_Query_Config((uint64_t)v46);
  int v19 = (void *)qword_26AA2DF30;
  int v20 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  unint64_t v21 = *(void *)(qword_26AA2DF30 + 24);
  int v22 = *(void **)qword_26AA2DF30;
  uint64_t v23 = __src;
  do
  {
    int v24 = v21 - v22;
    if (v20 >= v24) {
      int v25 = v24;
    }
    else {
      int v25 = v20;
    }
    memcpy(v22, v23, v25);
    int v22 = (void *)(*v19 + v25);
    *int v19 = v22;
    unint64_t v21 = v19[3];
    if ((unint64_t)v22 >= v21)
    {
      int v22 = (void *)v19[2];
      *int v19 = v22;
    }
    v23 += v25;
    BOOL v26 = __OFSUB__(v20, v25);
    v20 -= v25;
  }
  while (!((v20 < 0) ^ v26 | (v20 == 0)));
  int v27 = (void *)qword_26AA2DF28;
  int v28 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  unint64_t v29 = *(void *)(qword_26AA2DF28 + 24);
  char v30 = *(void **)qword_26AA2DF28;
  unsigned int v31 = __src;
  do
  {
    int v32 = v29 - v30;
    if (v28 >= v32) {
      int v33 = v32;
    }
    else {
      int v33 = v28;
    }
    memcpy(v30, v31, v33);
    char v30 = (void *)(*v27 + v33);
    *int v27 = v30;
    unint64_t v29 = v27[3];
    if ((unint64_t)v30 >= v29)
    {
      char v30 = (void *)v27[2];
      *int v27 = v30;
    }
    v31 += v33;
    BOOL v26 = __OFSUB__(v28, v33);
    v28 -= v33;
  }
  while (!((v28 < 0) ^ v26 | (v28 == 0)));
  double v34 = (void *)qword_26AA2DF20;
  int v35 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  unint64_t v36 = *(void *)(qword_26AA2DF20 + 24);
  uint64_t result = *(void **)qword_26AA2DF20;
  int v38 = __src;
  do
  {
    int v39 = v36 - result;
    if (v35 >= v39) {
      int v40 = v39;
    }
    else {
      int v40 = v35;
    }
    memcpy(result, v38, v40);
    uint64_t result = (void *)(*v34 + v40);
    *double v34 = result;
    unint64_t v36 = v34[3];
    if ((unint64_t)result >= v36)
    {
      uint64_t result = (void *)v34[2];
      *double v34 = result;
    }
    v38 += v40;
    BOOL v26 = __OFSUB__(v35, v40);
    v35 -= v40;
  }
  while (!((v35 < 0) ^ v26 | (v35 == 0)));
  return result;
}

uint64_t GN_GPS_Set_TM_FSP_OS_Time_ms(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: %u %u %d", a1, a2, a1 - a2);
  Debug_Log_TM_FCP_OS_Time_ms(a1, a2);
  double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  if ((int)((unint64_t)v4 - a1) >= 0) {
    unsigned int v5 = (unint64_t)v4 - a1;
  }
  else {
    unsigned int v5 = a1 - (unint64_t)v4;
  }
  if (v5 < 0x1389)
  {
    uint64_t result = Is_GN_API_Set_Allowed("API_Set_TM_FSP_OS_Time_ms");
    if (result)
    {
      uint64_t v7 = *(void *)(p_api + 248);
      uint64_t result = 1;
      *(unsigned char *)uint64_t v7 = 1;
      *(_DWORD *)(v7 + 392) = a1;
      *(_DWORD *)(v7 + 396) = a2;
    }
  }
  else
  {
    EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: REJECTED: OS_Time too different %d", (unint64_t)v4 - a1);
    return 0;
  }
  return result;
}

BOOL GN_GPS_Set_Platform_Calibration_GLONASS_Group_Delays(double *a1)
{
  EvLog_v("GN_GPS_Set_Platform_Calibration_GLONASS_Group_Delays:  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f", *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
  Debug_Log_Platform_Calibration_GLONASS_Group_Delays(a1);

  return API_Set_Platform_Calibration_GLONASS_Group_Delays(a1);
}

BOOL GN_GPS_Set_Platform_Calibration_L5_Group_Delay(double a1)
{
  EvLog_v("GN_GPS_Set_Platform_Calibration_L5_Group_Delay:  %f", a1);
  Debug_Log_Platform_Calibration_L5_Group_Delay(a1);
  double v2 = fabs(a1);
  if (v2 > 100.0)
  {
    EvCrt_v("API_Set_Platform_Calibration_L5_Group_Delays:  FAILED  Group Delay %f larger than +/-100m", a1);
  }
  else
  {
    uint64_t v3 = *(void *)(p_api + 72);
    *(double *)(v3 + 1992) = a1;
    *(unsigned char *)(v3 + 2000) = 1;
  }
  return v2 <= 100.0;
}

BOOL GN_GPS_Set_Test_Mode(unsigned int a1)
{
  if (a1 >= 2)
  {
    EvCrt_v("GN_GPS_Set_Test_Mode:  Illegal Test Mode  %d  >  %d");
  }
  else
  {
    g_Test_Mode_Cfg = a1;
    EvCrt_v("GN_GPS_Set_Test_Mode:  Test Mode  %d  :  %s");
  }
  return a1 < 2;
}

uint64_t GN_GPS_Set_RTI_Bad_SV_List(int a1, unsigned int a2, int *a3, unsigned __int8 *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  memset(v32, 0, 218);
  uint64_t result = Is_GN_API_Set_Allowed("GN_GPS_Set_RTI_Bad_SV_List");
  if (!result) {
    return result;
  }
  Debug_Log_GPS_RTI_Bad_SV_List(a1, a2, a3, a4);
  char v9 = "--";
  if (a1 == 1) {
    char v9 = "L5";
  }
  if (a1) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = "L1";
  }
  if (a2 > 0xDA)
  {
    EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:  %s  RTI_Num_Bad_SV = %d >%d, Out of range!");
    return 0;
  }
  if (!a2)
  {
    int v27 = 0;
    int v26 = 0;
    int v25 = 0;
    int v24 = 0;
    int v23 = 0;
    int v22 = 0;
    int v21 = 0;
    goto LABEL_52;
  }
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  do
  {
    unsigned int v13 = 0;
    int v14 = a3[v11];
    if (v14 <= 15)
    {
      uint64_t v15 = 0;
      int v16 = 32;
      unsigned int v17 = 0;
      int v18 = 0;
      switch(v14)
      {
        case 0:
          EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:  %s  RTI_Bad_SV_Type_List[%d] = 0x%x, Out of range!", v10, v11, 0);
          goto LABEL_30;
        case 1:
          goto LABEL_23;
        case 2:
          int v16 = 24;
          uint64_t v15 = 1;
          int v14 = 1;
          goto LABEL_23;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_24;
        case 4:
          int v16 = 202;
          int v14 = 193;
          uint64_t v15 = 4;
          goto LABEL_23;
        case 8:
          int v16 = 158;
          int v14 = 120;
          uint64_t v15 = 6;
          goto LABEL_23;
        default:
          unsigned int v17 = 0;
          int v18 = 0;
          goto LABEL_24;
      }
    }
    if (v14 == 64)
    {
      int v16 = 14;
      int v14 = 1;
      uint64_t v15 = 5;
    }
    else if (v14 == 32)
    {
      int v16 = 63;
      int v14 = 1;
      uint64_t v15 = 3;
    }
    else
    {
      unsigned int v17 = 0;
      int v18 = 0;
      if (v14 != 16) {
        goto LABEL_24;
      }
      int v16 = 36;
      int v14 = 1;
      uint64_t v15 = 2;
    }
LABEL_23:
    int v18 = Num_Prn[v15];
    unsigned int v13 = v14;
    unsigned int v17 = v16;
LABEL_24:
    unsigned int v19 = a4[v11];
    if (v13 > v19 || v17 < v19)
    {
      EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:  %s  RTI_Bad_SV_Id_List[%d] = %d <%d or >%d, Out of range!");
      return 0;
    }
    *((unsigned char *)v32 + (int)(v18 - v13 + v19)) = 1;
LABEL_30:
    ++v11;
  }
  while (a2 != v11);
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  int v24 = 0;
  int v25 = 0;
  int v26 = 0;
  int v27 = 0;
  do
  {
    int v29 = *a3++;
    int v28 = v29;
    if (v29 > 15)
    {
      if (v28 == 64) {
        int v30 = v21 + 1;
      }
      else {
        int v30 = v21;
      }
      if (v28 == 32) {
        int v31 = v22 + 1;
      }
      else {
        int v31 = v22;
      }
      if (v28 == 32) {
        int v30 = v21;
      }
      if (v28 == 16)
      {
        ++v23;
      }
      else
      {
        int v22 = v31;
        int v21 = v30;
      }
    }
    else
    {
      switch(v28)
      {
        case 1:
          ++v27;
          break;
        case 2:
          ++v26;
          break;
        case 4:
          ++v24;
          break;
        case 8:
          ++v25;
          break;
        default:
          break;
      }
    }
    --v12;
  }
  while (v12);
LABEL_52:
  EvLog_v("GN_GPS_Set_RTI_Bad_SV_List:  %s  G %d R %d Q %d S %d B %d E %d N %d", v10, v27, v26, v24, v25, v22, v23, v21);
  if (API_Set_RTI_Bad_SV_List(a1, v32)) {
    return 1;
  }
  EvLog_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED:   %s", v10);
  return 0;
}

uint64_t HalFactory_Init(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  double v2 = (double)v0 / (double)v1;
  *(double *)&g_MacClockTicksToMsRelatiounint64_t n = v2 * 0.000001;
  g_MacClockTicksToNs = *(void *)&v2;
  Hal22_InitializeConn();
  if (!Hal35_Is_HW_SPI_EN_Default() || (Ga05_GetDebugFeaturesBitmask() & 0x10) != 0)
  {
    if (Hal34_InitPciGnssDevice(&v6))
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(&info, 0x3C6uLL);
        mach_continuous_time();
        snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
        goto LABEL_15;
      }
      return 0;
    }
  }
  else
  {
    Hal35_Set_SPI_InUse(1);
    if ((Hal35_BaseBandSPMI_GNSSWake() & 1) == 0)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(&info, 0x3C6uLL);
        mach_continuous_time();
        snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: SPMI wake trigger failed\n");
        goto LABEL_15;
      }
      return 0;
    }
    if (!Hal35_InitSPI())
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(&info, 0x3C6uLL);
        mach_continuous_time();
        snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: SPI Init failed\n");
LABEL_15:
        gnssOsa_PrintLog((char *)&info, 1, 1, 0);
        return 0;
      }
      return 0;
    }
  }
  g_RouteZxData = (uint64_t (*)(unsigned __int8 *, unsigned __int16))HalFactory_ProcessData;
  if (g_LbsOsaTrace_Config < 3) {
    return 1;
  }
  bzero(&info, 0x3C6uLL);
  uint64_t v3 = mach_continuous_time();
  snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: Hal factory interface init success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 77, "HalFactory_Init");
  uint64_t v4 = 1;
  gnssOsa_PrintLog((char *)&info, 3, 1, 0);
  return v4;
}

void HalFactory_ProcessData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (a2 > 7)
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Data,MC,%c,MID,%c,MIDX,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "HalFactory_ProcessData", a1[2], a1[3], a1[4]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if (a1[2] != 68)
      {
        unsigned int v8 = 0;
        uint64_t __dst = 0;
        do
        {
          p_dst = &a1[v8];
          if ((int)(a2 - v8) <= 7)
          {
            memcpy(&__dst, &a1[v8], (int)(a2 - v8));
            p_dst = (unsigned __int8 *)&__dst;
          }
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v10 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\"%02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX\"\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 73, "HalFactory_ProcessData", "Rcvd data ", *p_dst, p_dst[1], p_dst[2], p_dst[3], p_dst[4], p_dst[5], p_dst[6], p_dst[7]);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          unsigned int v8 = (unsigned __int16)(v8 + 8);
        }
        while (v8 < a2);
        int v11 = a1[2];
        if (v11 == 84)
        {
          int v12 = a1[3];
          if (v12 == 66)
          {
            if (a1[8] == 32)
            {
              if (g_LbsOsaTrace_Config >= 4)
              {
                bzero(__str, 0x3C6uLL);
                uint64_t v13 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Test mode indication success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 73, "HalFactory_ProcessData");
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
              if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
              {
                bzero(__str, 0x3C6uLL);
                unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                uint64_t v15 = __error();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v14, "HAL", 69, "HalFactory_ProcessData", 1542, *v15);
                gnssOsa_PrintLog(__str, 1, 1, 0);
              }
            }
            int v12 = a1[3];
          }
          if (v12 == 76)
          {
            if (a1[4] == 32 && a1[8] == 83)
            {
              if (g_LbsOsaTrace_Config >= 4)
              {
                int v16 = *(_DWORD *)(a1 + 9);
                int v17 = *(unsigned __int16 *)(a1 + 13);
                bzero(__str, 0x3C6uLL);
                uint64_t v18 = mach_continuous_time();
                snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TSync success ME TTick=%u, SubMs=%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "HAL", 73, "HalFactory_ProcessData", v16, v17);
                gnssOsa_PrintLog(__str, 4, 1, 0);
              }
              g_TSyncEventReceived = 1;
            }
          }
          else if (v12 == 80 && a1[4] == 77)
          {
            if (a1[9] == 1)
            {
              HalFactory_HandleCWResponse(a1);
            }
            else if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v19 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid testID %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 87, "HalFactory_ProcessData", a1[9]);
              int v3 = 2;
              goto LABEL_8;
            }
          }
          return;
        }
        if (v11 != 68)
        {
          if (v11 == 66)
          {
            if (a1[3] - 83 > 1) {
              Hal02_HandleResp(a1, a2);
            }
            else {
              HalFactory_SleepAckHandler(a1);
            }
          }
          return;
        }
      }
      int v6 = a1[3];
      if (v6 == 80)
      {
        uint64_t v7 = a2;
      }
      else
      {
        if (v6 != 71) {
          return;
        }
        uint64_t v7 = a2;
      }
      GnssDbgMgr_HandleDbgData(v7);
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_7:
      int v3 = 1;
LABEL_8:
      gnssOsa_PrintLog(__str, v3, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_7;
  }
}

void HalFactory_SleepAckHandler(unsigned __int8 *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v1 = a1[3];
  if (v1 != 84)
  {
    if (v1 == 83 && a1[4] == 80)
    {
      int v2 = a1[8];
      switch(v2)
      {
        case 'm':
LABEL_7:
          HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd = 1;
          return;
        case 'M':
          if (g_LbsOsaTrace_Config >= 3)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v6 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS Sleep idle state\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 77, "HalFactory_SleepAckHandler");
            gnssOsa_PrintLog(__str, 3, 1, 0);
          }
          g_SleepStatus = 1;
          if (gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) || !g_LbsOsaTrace_Config) {
            goto LABEL_28;
          }
          bzero(__str, 0x3C6uLL);
          unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          int v13 = *__error();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v7, "HAL", 69, "HalFactory_SleepAckHandler", 1542, v13);
          break;
        case ' ':
          goto LABEL_7;
        default:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v8 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS sleep ack err %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "HalFactory_SleepAckHandler", v2);
            gnssOsa_PrintLog(__str, 1, 1, 0);
          }
          g_SleepStatus = 0;
          if (gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) || !g_LbsOsaTrace_Config) {
            goto LABEL_28;
          }
          bzero(__str, 0x3C6uLL);
          unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          int v14 = *__error();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v9, "HAL", 69, "HalFactory_SleepAckHandler", 1542, v14);
          break;
      }
      gnssOsa_PrintLog(__str, 1, 1, 0);
LABEL_28:
      HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd = 0;
      return;
    }
    goto LABEL_14;
  }
  if (a1[4] != 32 || HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd != 1)
  {
LABEL_14:
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS Sleep, Invalid message\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "HalFactory_SleepAckHandler");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return;
  }
  int v3 = a1[8];
  if (v3 == 77)
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS sleep idle state event\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 77, "HalFactory_SleepAckHandler");
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    g_SleepStatus = 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS sleep event err %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 69, "HalFactory_SleepAckHandler", v3);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    g_SleepStatus = 0;
  }
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v12 = __error();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v11, "HAL", 69, "HalFactory_SleepAckHandler", 1542, *v12);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  HalFactory_SleepAckHandler(unsigned char *,unsigned short)::v_SleepAckRcvd = 0;
}

void HalFactory_HandleCWResponse(unsigned __int8 *a1)
{
  v2[5] = *MEMORY[0x263EF8340];
  int v1 = *(NSObject **)(g_TestObject + 16);
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___Z27HalFactory_HandleCWResponsePht_block_invoke;
  v2[3] = &__block_descriptor_tmp_1;
  v2[4] = a1;
  dispatch_async(v1, v2);
}

uint64_t HalFactory_ComsPing(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (Hal15_ReadHwRevision(80))
  {
    if (g_LbsOsaTrace_Config) {
      goto LABEL_6;
    }
    return 0;
  }
  if (Hal15_ReadHwRevision(77))
  {
    if (g_LbsOsaTrace_Config)
    {
LABEL_6:
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: read rev failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 69, "HalFactory_ComsPing");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  Hal15_GetGNSSVersionString(__str);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)__str;
  *(void *)(a1 + 16) = v10;
  if (g_LbsOsaTrace_Config >= 3)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    double v5 = *(double *)&g_MacClockTicksToMsRelation;
    Hal15_GetGNSSVersionString(__p);
    if (v8 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Rev %s\n", (unint64_t)(v5 * (double)v4), "HAL", 77, "HalFactory_ComsPing", (const char *)v6);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 3, 1, 0);
  }
  return 1;
}

uint64_t HalFactory_PowerMode(char a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (HalFactory_SendEnterSleepCmd())
    {
      char v1 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1F4u);
      switch(v1)
      {
        case 2:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__p, 0x3C6uLL);
            uint64_t v5 = mach_continuous_time();
            snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS Sleep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "HalFactory_PowerMode", 1541);
            gnssOsa_PrintLog((char *)__p, 1, 1, 0);
          }
          break;
        case 1:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__p, 0x3C6uLL);
            uint64_t v6 = mach_continuous_time();
            snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS Sleep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 69, "HalFactory_PowerMode", 1543);
            gnssOsa_PrintLog((char *)__p, 1, 1, 0);
          }
          break;
        case 0:
          return g_SleepStatus;
        default:
          if (g_LbsOsaTrace_Config)
          {
            bzero(__p, 0x3C6uLL);
            uint64_t v7 = mach_continuous_time();
            snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: #%04hx GNSS Sleep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 69, "HalFactory_PowerMode", 515);
            gnssOsa_PrintLog((char *)__p, 1, 1, 0);
          }
          break;
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__p, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf((char *)__p, 0x3C5uLL, "%10u %s%c %s: sleep cmd send failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "HalFactory_PowerMode");
      gnssOsa_PrintLog((char *)__p, 1, 1, 0);
    }
    return 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  uint64_t v2 = HalFactory_ComsPing((uint64_t)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_263C4516C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

BOOL HalFactory_SendEnterSleepCmd(void)
{
  __int16 v0 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v14 = 0;
  __int16 v13 = 0;
  *(void *)int v12 = 0xE0009507342787ALL;
  memset(&v12[8], 0, 7);
  for (uint64_t i = 8; i != 15; ++i)
    v0 += v12[i];
  unint64_t v2 = 0;
  __int16 v13 = v0;
  size_t v3 = 18;
  char v14 = 10;
  uint64_t __dst = 0;
  do
  {
    p_dst = &v12[v2];
    if (v2 >= 0xB)
    {
      memcpy(&__dst, &v12[v2], v3);
      p_dst = (unsigned __int8 *)&__dst;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\"%02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX\"\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "HalFactory_SendEnterSleepCmd", "factory_zx_sleep_cmd ", *p_dst, p_dst[1], p_dst[2], p_dst[3], p_dst[4], p_dst[5], p_dst[6], p_dst[7]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    v3 -= 8;
    BOOL v6 = v2 >= 0xA;
    v2 += 8;
  }
  while (!v6);
  int v7 = Hal22_ZxSendToChip(v12, 0x12uLL);
  if (v7 <= 0 && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx LP cmd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "HalFactory_SendEnterSleepCmd", 1282);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v7 > 0;
}

uint64_t HalFactory_EnableTestMode(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v2 = 0x90003506254787ALL;
  int v3 = 167772417;
  if ((int)Hal22_ZxSendToChip((unsigned __int8 *)&v2, 0xCuLL) <= 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx test mode indication\n");
      goto LABEL_7;
    }
    return 0;
  }
  if (gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0xC8u))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: test mode indication failed\n");
LABEL_7:
      gnssOsa_PrintLog(__str, 1, 1, 0);
      return 0;
    }
    return 0;
  }
  usleep(0xF4240u);
  return 1;
}

uint64_t HalFactory_RunCWTest(int a1, int a2, double a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a6)
  {
    g_TestObject = a6;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v25 = 0;
    if (HalFactory_ComsPing((uint64_t)__p))
    {
      if (HalFactory_EnableTestMode())
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Input CW params: duration %u seconds, band %u, searchRange %f kHz, integrationtime %d msec\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 73, "HalFactory_RunCWTest", a1, a2, a3, a5);
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        memset(v28, 0, 15);
        *(void *)int v26 = 0x20000F4D7054787ALL;
        char v27 = 1;
        char v11 = 0;
        switch(a2)
        {
          case 0:
          case 2:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
            if (g_LbsOsaTrace_Config)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v12 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Incorrect band %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "HalFactory_RunCWTest", a2);
              gnssOsa_PrintLog(__str, 1, 1, 0);
            }
            goto LABEL_16;
          case 1:
            goto LABEL_22;
          case 3:
            char v11 = 6;
            goto LABEL_22;
          case 4:
            char v11 = 3;
LABEL_22:
            LOBYTE(v28[0]) = v11;
            break;
          default:
            break;
        }
        __int16 v18 = 0;
        *(_WORD *)((char *)v28 + 1) = 0;
        BYTE3(v28[0]) = 0;
        strcpy((char *)&v28[1], "\n");
        BYTE2(v28[1]) = -56;
        for (uint64_t i = 8; i != 23; ++i)
          v18 += v26[i];
        unint64_t v20 = 0;
        WORD2(v28[1]) = v18;
        BYTE6(v28[1]) = 10;
        do
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v21 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\"%02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX %02hhX\"\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "HAL", 73, "HalFactory_RunCWTest", "cw command ", v26[v20], v26[v20 + 1], v26[v20 + 2], v26[v20 + 3], v26[v20 + 4], v26[v20 + 5], v26[v20 + 6], v26[v20 + 7]);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          BOOL v22 = v20 >= 0x10;
          v20 += 8;
        }
        while (!v22);
        if ((int)Hal22_ZxSendToChip(v26, 0x18uLL) > 0)
        {
          usleep(1000000 * a1);
          uint64_t v14 = 1;
LABEL_17:
          if (SHIBYTE(v25) < 0) {
            operator delete(__p[0]);
          }
          return v14;
        }
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v23 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CW test command\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "HAL", 69, "HalFactory_RunCWTest", 1282);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      else if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v16 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: CW test not started, set factory test mode failed \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 69, "HalFactory_RunCWTest");
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: CW test not started, failed to ping GNSS HW \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 69, "HalFactory_RunCWTest");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
LABEL_16:
    uint64_t v14 = 0;
    goto LABEL_17;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: callback nullptr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 69, "HalFactory_RunCWTest");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void sub_263C45A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___Z27HalFactory_HandleCWResponsePht_block_invoke(uint64_t a1, double a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(unsigned __int8 *)(v2 + 11);
  if (v3 >= 7) {
    char v4 = 0;
  }
  else {
    char v4 = 0x3000004000001uLL >> (8 * v3);
  }
  LOWORD(a2) = *(_WORD *)(v2 + 17);
  double v5 = (double)*(unint64_t *)&a2 * 0.00390625;
  int v6 = *(__int16 *)(v2 + 15);
  if (v6 < 0) {
    int v6 = -v6;
  }
  double v7 = (double)(unsigned __int16)v6;
  int v8 = *(__int16 *)(v2 + 25);
  BOOL v9 = v8 < 0;
  if (v8 < 0) {
    int v8 = -v8;
  }
  if (v9) {
    double v10 = -((double)(unsigned __int16)v8 * 0.0625);
  }
  else {
    double v10 = (double)(unsigned __int16)v8 * 0.0625;
  }
  int v11 = *(__int16 *)(v2 + 23);
  BOOL v12 = v11 < 0;
  if (v11 < 0) {
    int v11 = -v11;
  }
  if (v12) {
    double v13 = -(double)(unsigned __int16)v11;
  }
  else {
    double v13 = (double)(unsigned __int16)v11;
  }
  uint64_t v14 = (double *)operator new(0x28uLL);
  *(unsigned char *)uint64_t v14 = v4;
  *((_DWORD *)v14 + 1) = 0;
  v14[1] = v5;
  v14[2] = v10;
  v14[3] = v7;
  void v14[4] = v13;
  if (*(unsigned char *)(v2 + 8) == 32)
  {
    uint64_t v15 = g_TestObject;
    __p = 0;
    uint64_t v16 = operator new(0x28uLL);
    uint64_t v21 = v16 + 5;
    BOOL v22 = (char *)(v16 + 5);
    void v16[4] = *((void *)v14 + 4);
    long long v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v14;
    *((_OWORD *)v16 + 1) = v17;
    __p = v16;
    uint64_t v18 = *(void *)(v15 + 48);
    if (!v18) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v18 + 48))(v18, &__p);
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v19 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: CN0 %.2f, band %u, FreqOffsetHz %.3f, RSSI %.3f, FreqOffsetPpb %.3f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 73, "HalFactory_HandleCWResponse_block_invoke", v5, *(unsigned __int8 *)(v2 + 11), v7, v10, v13);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  operator delete(v14);
}

void sub_263C45D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  operator delete(v19);
  _Unwind_Resume(a1);
}

uint64_t HalFactory_TriggerTSync(void)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  if (HalFactory_ComsPing((uint64_t)__p))
  {
    if (HalFactory_EnableTestMode())
    {
      *(void *)int v11 = 0x1200054D6C54787ALL;
      int v12 = 16842752;
      __int16 v13 = 2560;
      if ((int)Hal22_ZxSendToChip(v11, 0xEuLL) <= 0)
      {
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx TimeMark test command\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "HalFactory_SendTimeMarkCmd", 1282);
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
      else
      {
        unsigned int v9 = 0;
        if (Hal25_TriggerTimeMarkStrobe(&v9))
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v0 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s:  TimeMark PulseOSTime %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "HalFactory_SendTimeMarkCmd", v9);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          usleep(0x7A120u);
          if (g_TSyncEventReceived == 1)
          {
            g_TSyncEventReceived = 0;
            uint64_t v1 = 1;
            goto LABEL_18;
          }
        }
        else if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimeMark pulse trigger failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "HalFactory_SendTimeMarkCmd");
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
    }
    else if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TSync test not started, set factory test mode failed \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "HalFactory_TriggerTSync");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TSync test not started, failed to ping GNSS HW \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 69, "HalFactory_TriggerTSync");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  uint64_t v1 = 0;
LABEL_18:
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v1;
}

void sub_263C460B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiounint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void GncP25_02StopTimemarkSessTimer(void)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  if (g_TimemarkTimerStatus == 1)
  {
    if (AgpsFsmStopTimer(8656902))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v0 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP25_02StopTimemarkSessTimer", 1545);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      g_TimemarkTimerStatus = 0;
    }
  }
}

void GncP25_04HandleTimeMarkEvent(unsigned __int8 *a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (g_TimeMarkState == 1)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Pulse not processed\n");
LABEL_10:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return;
  }
  if (a1[8] != 83)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Status,%u\n", v28);
    goto LABEL_10;
  }
  unint64_t __dst = 0;
  unsigned int v1 = *(_DWORD *)(a1 + 9);
  unsigned int v2 = a1[14];
  unsigned int v3 = a1[13] | (v2 << 8);
  if (a1[3] == 66)
  {
    int v4 = *(unsigned __int16 *)(a1 + 15);
    if (a1[17])
    {
      memcpy_s("GncP25_04HandleTimeMarkEvent", 184, &__dst, 8u, a1 + 18, 8uLL);
      unint64_t v5 = (unint64_t)((double)__dst * 6.51041667);
    }
    else
    {
      unint64_t v5 = 0;
    }
    if (g_LbsOsaTrace_Config < 4)
    {
      uint64_t v7 = 125;
    }
    else
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      uint64_t v7 = 125;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TMEvent BBTICK,%u,SubMs,%u,SequenceNum,%u,BCTTtick,%llu,BCTNs,%llu,BCTUncNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP25_04HandleTimeMarkEvent", v1, v3, v4, __dst, v5, 125);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TMEvent BBTICK,%u,SubMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP25_04HandleTimeMarkEvent", v1, v3);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    uint64_t v7 = 0;
    unint64_t v5 = 0;
  }
  unsigned int v9 = gnssOsa_Calloc("GncP25_04HandleTimeMarkEvent", 197, 1, 0x50uLL);
  if (v9)
  {
    double v10 = v9;
    v9[2] = 0u;
    v9[3] = 0u;
    v9[1] = 0u;
    *((_DWORD *)v9 + 14) = v1;
    *((void *)v9 + 8) = v5;
    *((void *)v9 + 9) = v7;
    if (g_GncP_PEUpdate[0]) {
      int v11 = g_GncP_PEUpdate;
    }
    else {
      int v11 = 0;
    }
    if (g_GncP_PEUpdate[0])
    {
      if (byte_26A9CA359)
      {
        *(double *)&unint64_t v12 = (double)v3;
        LODWORD(v12) = qword_26A9CA348;
        double v13 = (double)v1 + (double)v3 * 0.0000152587891 - (double)v12;
        double v14 = v13 * (1.0 - *(double *)qword_26A9CA388[0].i64);
        double v15 = v14 + *(double *)&qword_26A9CA370 * 1000.0;
        double v16 = sqrt(*(double *)&qword_26A9CA3F8 * (v14 * (v14 * *(double *)&qword_26A9CA3F8))+ *(double *)&qword_26A9CA3E8 * 1000.0 * (*(double *)&qword_26A9CA3E8 * 1000.0));
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v17 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DeltaToW,%.12f,DeltaTick,%.12f,Clk_drift,%.12f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GncP25_06CalculateTOW", v14, v13, *(double *)qword_26A9CA388[0].i64);
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        uint64_t v18 = 0;
        int v19 = 0;
        __int16 v20 = word_26A9CA368;
        double v21 = v15 + -604800000.0;
        if (v15 < 604800000.0) {
          double v21 = v15;
        }
        else {
          __int16 v20 = word_26A9CA368 + 1;
        }
        *((_WORD *)v10 + 9) = v20;
        *((unsigned char *)v10 + 16) = 1;
        *((double *)v10 + 3) = v21;
        *((double *)v10 + 4) = v16;
        double v22 = unk_26A9CA390;
        if (!byte_26A9CA341) {
          double v22 = 0.0;
        }
        *((unsigned char *)v10 + 40) = byte_26A9CA341;
        *((double *)v10 + 6) = v22;
        if (dword_26A9CA478 == 4) {
          char v23 = 5;
        }
        else {
          char v23 = 0;
        }
        if (dword_26A9CA478 == 2) {
          char v24 = 3;
        }
        else {
          char v24 = v23;
        }
        uint64_t v25 = v11 + 344;
        *((unsigned char *)v10 + 60) = v24;
        do
        {
          if (v11[v18 + 6104])
          {
            switch(*(_DWORD *)&v25[4 * v18])
            {
              case 0:
                if (g_LbsOsaTrace_Config >= 2)
                {
                  bzero(__str, 0x3C6uLL);
                  uint64_t v26 = mach_continuous_time();
                  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Const,%u,Idx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNC", 87, "GncP25_05GetConstellationUsed", 770, *(_DWORD *)&v25[4 * v18], v18);
                  gnssOsa_PrintLog(__str, 2, 1, 0);
                }
                break;
              case 1:
                v19 |= 1u;
                break;
              case 2:
                v19 |= 0x20u;
                break;
              case 3:
                v19 |= 0x10u;
                break;
              case 4:
                v19 |= 0x40u;
                break;
              case 5:
                v19 |= 2u;
                break;
              case 6:
                v19 |= 0x80u;
                break;
              default:
                break;
            }
          }
          ++v18;
        }
        while (v18 != 128);
        *((_WORD *)v10 + 31) = v19;
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v27 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 73, "GncP25_04HandleTimeMarkEvent");
          gnssOsa_PrintLog(__str, 4, 1, 0);
        }
        AgpsSendFsmMsg(132, 128, 8651779, v10);
        GncP25_09UpdateTimeMarkInfo(0, 1, 0, v1 + (v2 >> 7));
        return;
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsTime NA,date_set,false,TimeMark event posted\n");
        goto LABEL_56;
      }
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsTime NA,TimeMark event posted\n");
LABEL_56:
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 128, 8651779, v10);
  }
}

void GncP25_09UpdateTimeMarkInfo(int a1, int a2, int a3, int a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    _MergedGlobals_2 = a3;
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 1;
  }
  if (a2)
  {
    dword_26AA2E1A4 = a4;
    dword_26AA2E1A8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicuint64_t k = 1;
  }
  else if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick != 1)
  {
    return;
  }
  if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime == 1)
  {
    GncP25_02StopTimemarkSessTimer();
    int v4 = _MergedGlobals_2;
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v4 > 0x1F3
      || (int v5 = dword_26AA2E1A8,
          (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
        - v5 > 0x1F3))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Invalid OStime %u,BBtick,%u,BBTickRx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_26AA2E1A4, dword_26AA2E1A8);
        int v8 = 2;
        goto LABEL_16;
      }
    }
    else
    {
      if ((GN_GPS_Set_TM_FSP_OS_Time_ms(_MergedGlobals_2, dword_26AA2E1A4) & 1) == 0)
      {
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_17;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v6 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GN_GPS_Set_TM_FSP_OS_Time_ms\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", 257);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TMInfo OStime %u,BBtick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_26AA2E1A4);
        int v8 = 4;
LABEL_16:
        gnssOsa_PrintLog(__str, v8, 1, 0);
      }
    }
LABEL_17:
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicuint64_t k = 0;
    g_TimeMarkState = 1;
  }
}

uint64_t GncP25_01HandleStartTimeMarkReq(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncP25_01HandleStartTimeMarkReq");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    unsigned int v2 = gnssOsa_Calloc("GncP25_01HandleStartTimeMarkReq", 346, 1, 0x10uLL);
    if (v2)
    {
      unsigned int v3 = v2;
      if (g_TimeMarkState)
      {
        int v4 = g_GncPStateInfo;
        if (g_GncPStateInfo == 7)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v5 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TM started ME ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP25_03HandleStartTimeMark");
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          g_TimeMarkState = 0;
          GncP25_02StopTimemarkSessTimer();
          if (AgpsFsmStartTimer(0x841806u, 0x3E8u))
          {
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v6 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_03StartTimemarkSessTimer", 1544, 1000);
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
          }
          else
          {
            g_TimemarkTimerStatus = 1;
          }
          Hal_TriggerTimeMarkPulse((void (*)(unsigned int, BOOL))GncP25_07TimeMarkPulseCb);
          v3[12] = 1;
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v9 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx TM ReqRejected MEState,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 73, "GncP25_03HandleStartTimeMark", 2049, v4);
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          g_TimeMarkState = 1;
          v3[12] = 0;
        }
      }
      else
      {
        v2[12] = 0;
        if (g_LbsOsaTrace_Config < 2)
        {
LABEL_23:
          AgpsSendFsmMsg(132, 128, 8389124, v3);
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP25_01HandleStartTimeMarkReq", 2056);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP25_01HandleStartTimeMarkReq", v3[12]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      goto LABEL_23;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP25_01HandleStartTimeMarkReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void GncP25_07TimeMarkPulseCb(int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned int v3 = gnssOsa_Calloc("GncP25_07TimeMarkPulseCb", 389, 1, 0x10uLL);
    if (v3)
    {
      int v4 = v3;
      *((_DWORD *)v3 + 3) = a1;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP25_07TimeMarkPulseCb");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8657667, v4);
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimeMark Trig fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_07TimeMarkPulseCb");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

uint64_t GncP25_08HandleTimeMarkPulseInd(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_08HandleTimeMarkPulseInd");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if ((g_TimeMarkState & 1) == 0)
    {
      GncP25_09UpdateTimeMarkInfo(1, 0, *(_DWORD *)(a1 + 12), 0);
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Session Stopped\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP25_08HandleTimeMarkPulseInd", 262);
      int v4 = 2;
LABEL_9:
      gnssOsa_PrintLog(__str, v4, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP25_08HandleTimeMarkPulseInd", 517);
    int v4 = 1;
    goto LABEL_9;
  }
  return 0;
}

void GncP25_10TimemarkSessTimerExpiry(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  g_TimemarkTimerStatus = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicuint64_t k = 0;
  g_TimeMarkState = 1;
  uint64_t v0 = gnssOsa_Calloc("GncP25_10TimemarkSessTimerExpiry", 493, 1, 0x50uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsTime NotAvail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
    AgpsSendFsmMsg(132, 128, 8651779, v1);
  }
}

uint64_t sprintf_eR8(void *a1, double a2)
{
  double v3 = -a2;
  if (a2 >= 0.0) {
    double v3 = a2;
  }
  if (v3 <= 0.0)
  {
    unsigned int i = 0;
    unsigned int v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.00001; double v3 = v3 * 10000.0)
      i -= 4;
    for (; v3 < 0.1; double v3 = v3 * 10.0)
      --i;
    for (; v3 > 10000.0; double v3 = v3 * 0.0001)
      i += 4;
    while (v3 > 10.0)
    {
      ++i;
      double v3 = v3 * 0.1;
    }
    double v6 = v3 * 10000000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        int v9 = (int)v8;
      }
      else {
        int v9 = 0x80000000;
      }
    }
    else
    {
      int v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0) {
      unsigned int v5 = v9;
    }
    else {
      unsigned int v5 = -v9;
    }
  }
  sprintf_9f((uint64_t)a1, v5, 8);
  uint64_t v10 = (unsigned char *)(*a1)++;
  *uint64_t v10 = 101;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }

  return sprintf_03d((uint64_t)a1, i);
}

void *sprintf_gR8(void *a1, double a2)
{
  double v2 = fabs(a2);
  double v3 = (unsigned char *)(*a1)++;
  *double v3 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (v2 < 99.0)
  {
    double v4 = a2 * 1000000.0;
    double v5 = -0.5;
    if (v4 > 0.0) {
      double v5 = 0.5;
    }
    double v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0) {
        unsigned int v7 = (int)v6;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 7;
LABEL_67:
    return (void *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    double v8 = a2 * 100000.0;
    double v9 = -0.5;
    if (v8 > 0.0) {
      double v9 = 0.5;
    }
    double v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0) {
        unsigned int v7 = (int)v10;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 6;
    goto LABEL_67;
  }
  if (v2 < 9999.0)
  {
    double v11 = a2 * 10000.0;
    double v12 = -0.5;
    if (v11 > 0.0) {
      double v12 = 0.5;
    }
    double v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v7 = (int)v13;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 5;
    goto LABEL_67;
  }
  if (v2 < 99999.0)
  {
    double v15 = a2 * 1000.0;
    double v16 = -0.5;
    if (v15 > 0.0) {
      double v16 = 0.5;
    }
    double v17 = v15 + v16;
    if (v17 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0) {
        unsigned int v7 = (int)v17;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 4;
    goto LABEL_67;
  }
  if (v2 < 999999.0)
  {
    double v18 = a2 * 100.0;
    double v19 = -0.5;
    if (v18 > 0.0) {
      double v19 = 0.5;
    }
    double v20 = v18 + v19;
    if (v20 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0) {
        unsigned int v7 = (int)v20;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 3;
    goto LABEL_67;
  }
  if (v2 < 9999999.0)
  {
    double v21 = a2 * 10.0;
    double v22 = -0.5;
    if (v21 > 0.0) {
      double v22 = 0.5;
    }
    double v23 = v21 + v22;
    if (v23 <= 2147483650.0)
    {
      if (v23 >= -2147483650.0) {
        unsigned int v7 = (int)v23;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 2;
    goto LABEL_67;
  }
  if (v2 >= 99999999.0)
  {
    return (void *)sprintf_eR8(a1, a2);
  }
  else
  {
    double v24 = -0.5;
    if (a2 > 0.0) {
      double v24 = 0.5;
    }
    double v25 = v24 + a2;
    if (v25 <= 2147483650.0)
    {
      if (v25 >= -2147483650.0) {
        unsigned int v26 = (int)v25;
      }
      else {
        unsigned int v26 = 0x80000000;
      }
    }
    else
    {
      unsigned int v26 = 0x7FFFFFFF;
    }
    return sprintf_10d(a1, v26);
  }
}

void *sprintf_seR8(void *a1, double a2)
{
  double v3 = -a2;
  if (a2 >= 0.0) {
    double v3 = a2;
  }
  if (v3 <= 0.0)
  {
    unsigned int i = 0;
    unsigned int v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.0001; double v3 = v3 * 1000.0)
      i -= 3;
    for (; v3 < 0.1; double v3 = v3 * 10.0)
      --i;
    for (; v3 > 1000.0; double v3 = v3 * 0.001)
      i += 3;
    while (v3 > 9.999)
    {
      ++i;
      double v3 = v3 * 0.1;
    }
    double v6 = v3 * 1000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        int v9 = (int)v8;
      }
      else {
        int v9 = 0x80000000;
      }
    }
    else
    {
      int v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0) {
      unsigned int v5 = v9;
    }
    else {
      unsigned int v5 = -v9;
    }
  }
  sprintf_5f((uint64_t)a1, v5, 4);
  double v10 = (unsigned char *)(*a1)++;
  *double v10 = 101;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }

  return sprintf_02d(a1, i);
}

void *sprintf_sgR8(void *a1, double a2)
{
  double v2 = fabs(a2);
  double v3 = (unsigned char *)(*a1)++;
  *double v3 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (v2 < 99.0)
  {
    double v4 = a2 * 1000.0;
    double v5 = -0.5;
    if (v4 > 0.0) {
      double v5 = 0.5;
    }
    double v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0) {
        unsigned int v7 = (int)v6;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 4;
LABEL_40:
    return (void *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    double v8 = a2 * 100.0;
    double v9 = -0.5;
    if (v8 > 0.0) {
      double v9 = 0.5;
    }
    double v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0) {
        unsigned int v7 = (int)v10;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 3;
    goto LABEL_40;
  }
  if (v2 < 9999.0)
  {
    double v11 = a2 * 10.0;
    double v12 = -0.5;
    if (v11 > 0.0) {
      double v12 = 0.5;
    }
    double v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v7 = (int)v13;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 2;
    goto LABEL_40;
  }
  if (v2 >= 99999.0)
  {
    return sprintf_seR8(a1, a2);
  }
  else
  {
    double v15 = -0.5;
    if (a2 > 0.0) {
      double v15 = 0.5;
    }
    double v16 = v15 + a2;
    if (v16 <= 2147483650.0)
    {
      if (v16 >= -2147483650.0) {
        unsigned int v17 = (int)v16;
      }
      else {
        unsigned int v17 = 0x80000000;
      }
    }
    else
    {
      unsigned int v17 = 0x7FFFFFFF;
    }
    return sprintf_7d(a1, v17);
  }
}

void *sprintf_sgR8F(void *a1, double a2)
{
  double v2 = fabs(a2);
  double v3 = (unsigned char *)(*a1)++;
  *double v3 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (v2 < 99.0)
  {
    double v4 = a2 * 1000.0;
    double v5 = -0.5;
    if (v4 > 0.0) {
      double v5 = 0.5;
    }
    double v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0) {
        unsigned int v7 = (int)v6;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 4;
LABEL_40:
    return (void *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    double v8 = a2 * 100.0;
    double v9 = -0.5;
    if (v8 > 0.0) {
      double v9 = 0.5;
    }
    double v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0) {
        unsigned int v7 = (int)v10;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 3;
    goto LABEL_40;
  }
  if (v2 < 9999.0)
  {
    double v11 = a2 * 10.0;
    double v12 = -0.5;
    if (v11 > 0.0) {
      double v12 = 0.5;
    }
    double v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v7 = (int)v13;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 2;
    goto LABEL_40;
  }
  if (v2 >= 99999.0)
  {
    return sprintf_seR8(a1, a2);
  }
  else
  {
    double v15 = -0.5;
    if (a2 > 0.0) {
      double v15 = 0.5;
    }
    double v16 = v15 + a2;
    if (v16 <= 2147483650.0)
    {
      if (v16 >= -2147483650.0) {
        unsigned int v17 = (int)v16;
      }
      else {
        unsigned int v17 = 0x80000000;
      }
    }
    else
    {
      unsigned int v17 = 0x7FFFFFFF;
    }
    return sprintf_9d(a1, v17);
  }
}

char **sprintf_ACC(char **result, double a2)
{
  if (a2 <= 99999.0)
  {
    if (a2 <= 9.9)
    {
      if (a2 <= 0.99)
      {
        if (a2 <= 0.099)
        {
          double v15 = a2 * 1000.0;
          double v16 = -0.5;
          if (v15 > 0.0) {
            double v16 = 0.5;
          }
          double v17 = v15 + v16;
          if (v17 <= 2147483650.0)
          {
            if (v17 >= -2147483650.0) {
              unsigned int v11 = (int)v17;
            }
            else {
              unsigned int v11 = 0x80000000;
            }
          }
          else
          {
            unsigned int v11 = 0x7FFFFFFF;
          }
          int v18 = 4;
        }
        else
        {
          double v12 = a2 * 100.0;
          double v13 = -0.5;
          if (v12 > 0.0) {
            double v13 = 0.5;
          }
          double v14 = v12 + v13;
          if (v14 <= 2147483650.0)
          {
            if (v14 >= -2147483650.0) {
              unsigned int v11 = (int)v14;
            }
            else {
              unsigned int v11 = 0x80000000;
            }
          }
          else
          {
            unsigned int v11 = 0x7FFFFFFF;
          }
          int v18 = 3;
        }
      }
      else
      {
        double v8 = a2 * 10.0;
        double v9 = -0.5;
        if (v8 > 0.0) {
          double v9 = 0.5;
        }
        double v10 = v8 + v9;
        if (v10 <= 2147483650.0)
        {
          if (v10 >= -2147483650.0) {
            unsigned int v11 = (int)v10;
          }
          else {
            unsigned int v11 = 0x80000000;
          }
        }
        else
        {
          unsigned int v11 = 0x7FFFFFFF;
        }
        int v18 = 2;
      }
      return (char **)sprintf_4f((uint64_t)result, v11, v18);
    }
    else
    {
      double v5 = -0.5;
      if (a2 > 0.0) {
        double v5 = 0.5;
      }
      double v6 = v5 + a2;
      if (v6 <= 2147483650.0)
      {
        if (v6 >= -2147483650.0) {
          unsigned int v7 = (int)v6;
        }
        else {
          unsigned int v7 = 0x80000000;
        }
      }
      else
      {
        unsigned int v7 = 0x7FFFFFFF;
      }
      return (char **)sprintf_5d(result, v7);
    }
  }
  else
  {
    double v2 = *result;
    char v3 = 57;
    uint64_t v4 = 1u;
    do
    {
      void *result = v2 + 1;
      *double v2 = v3;
      double v2 = *result;
      if (*result >= result[3])
      {
        double v2 = result[2];
        void *result = v2;
      }
      char v3 = str_7[v4++];
    }
    while (v4 != 6);
  }
  return result;
}

uint64_t sprintf_v(uint64_t result, char *a2, uint64_t *a3)
{
  char v3 = (char **)result;
  uint64_t v35 = *MEMORY[0x263EF8340];
  unsigned __int8 v4 = *a2;
  if (*a2)
  {
    double v5 = a2;
    char v6 = 0;
    do
    {
      if (v4 == 37 || (v6 & 1) != 0)
      {
        if ((v6 & 1) == 0)
        {
          int v8 = *++v5;
          unsigned __int8 v4 = v8;
          if (!v8) {
            return result;
          }
        }
        if ((char)v4 <= 98)
        {
          switch(v4)
          {
            case 'D':
              double v20 = a3++;
              uint64_t result = (uint64_t)sprintf_1D(v3, *v20);
              goto LABEL_7;
            case 'U':
              double v21 = (unint64_t *)a3++;
              uint64_t result = (uint64_t)sprintf_1U(v3, *v21);
              goto LABEL_7;
            case 'X':
              double v12 = (unint64_t *)a3++;
              uint64_t result = (uint64_t)sprintf_1X(v3, *v12);
              goto LABEL_7;
          }
        }
        else
        {
          if ((char)v4 <= 114)
          {
            switch(v4)
            {
              case 'c':
                double v9 = a3++;
                LODWORD(v9) = *(_DWORD *)v9;
                double v10 = (*v3)++;
                *double v10 = (char)v9;
                goto LABEL_6;
              case 'd':
                double v14 = (int *)a3++;
                int v15 = *v14;
                if (v15 >= 0) {
                  unsigned int v16 = v15;
                }
                else {
                  unsigned int v16 = -v15;
                }
                uint64_t result = (uint64_t)sprintf1da(v3, v16, v34, 0, v15 >> 31);
                goto LABEL_7;
              case 'e':
                double v17 = (double *)a3++;
                uint64_t result = sprintf_eR8(v3, *v17);
                goto LABEL_7;
              case 'f':
                int v18 = (double *)a3++;
                uint64_t result = (uint64_t)sprintf_sgR8(v3, *v18);
                goto LABEL_7;
              case 'g':
                double v19 = (double *)a3++;
                uint64_t result = (uint64_t)sprintf_gR8(v3, *v19);
                goto LABEL_7;
              default:
                goto LABEL_41;
            }
          }
          switch(v4)
          {
            case 's':
              double v22 = a3++;
              double v23 = (unsigned char *)*v22;
              char v24 = *v23;
              if (*v23)
              {
                double v25 = *v3;
                unsigned int v26 = v23 + 1;
                do
                {
                  *char v3 = v25 + 1;
                  *double v25 = v24;
                  double v25 = *v3;
                  if (*v3 >= v3[3])
                  {
                    double v25 = v3[2];
                    *char v3 = v25;
                  }
                  int v27 = *v26++;
                  char v24 = v27;
                }
                while (v27);
              }
              goto LABEL_7;
            case 'u':
              unint64_t v28 = (unsigned int *)a3++;
              uint64_t result = (uint64_t)sprintf_1u(v3, *v28);
              goto LABEL_7;
            case 'x':
              double v13 = a3++;
              uint64_t result = (uint64_t)sprintf_1x(v3, *(unsigned int *)v13);
              goto LABEL_7;
          }
        }
LABEL_41:
        if ((v4 - 48) < 0xAu || v4 <= 0x2Eu && ((1 << v4) & 0x680800000000) != 0)
        {
          char v6 = 1;
          goto LABEL_15;
        }
        int v29 = (*v3)++;
        *int v29 = 37;
        uint64_t v30 = *v3;
        if (*v3 >= v3[3])
        {
          uint64_t v30 = v3[2];
          *char v3 = v30;
        }
        char v31 = *v5;
        *char v3 = v30 + 1;
        *uint64_t v30 = v31;
      }
      else
      {
        unsigned int v7 = (*v3)++;
        *unsigned int v7 = v4;
      }
LABEL_6:
      if (*v3 >= v3[3])
      {
        char v6 = 0;
        *char v3 = v3[2];
        goto LABEL_15;
      }
LABEL_7:
      char v6 = 0;
LABEL_15:
      int v11 = *++v5;
      unsigned __int8 v4 = v11;
    }
    while (v11);
  }
  int v32 = (*v3)++;
  *int v32 = 10;
  if (*v3 >= v3[3]) {
    *char v3 = v3[2];
  }
  return result;
}

uint64_t GncP04_05HandlePosEventInd(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v1 = &unk_26A9CB000;
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT SMClient,%hhu,Ses,%u,PosOp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 73, "GncP04_05HandlePosEventInd", *(unsigned __int8 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int8 *)(a1 + 16));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    int v4 = *(unsigned __int8 *)(a1 + 12);
    int v5 = *(unsigned __int16 *)(a1 + 14);
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v6 = 0;
      char v7 = 1;
      while (1)
      {
        char v8 = v7;
        if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v6 + 8) == 1
          && *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 4) == v4
          && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v6 + 3) == v5)
        {
          break;
        }
        char v7 = 0;
        uint64_t v6 = 1;
        if ((v8 & 1) == 0)
        {
          uint64_t v6 = 0;
          char v9 = 1;
          while (1)
          {
            char v10 = v9;
            if (!*((unsigned char *)&g_GncPCntxtInfo + 36 * v6 + 8)) {
              break;
            }
            char v9 = 0;
            uint64_t v6 = 1;
            if ((v10 & 1) == 0)
            {
              if (g_LbsOsaTrace_Config < 2) {
                goto LABEL_41;
              }
              bzero(__str, 0x3C6uLL);
              unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              uint64_t v60 = *(unsigned __int16 *)(a1 + 14);
              uint64_t v62 = *(unsigned __int8 *)(a1 + 16);
              uint64_t v55 = 2054;
              uint64_t v58 = *(unsigned __int8 *)(a1 + 12);
              double v12 = "GncP04_07ProcessPosEvent";
              double v13 = "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,PosOp,%u\n";
              goto LABEL_25;
            }
          }
          if (g_GncPCntxtInfo < 2u)
          {
            LOBYTE(g_GncPCntxtInfo) = g_GncPCntxtInfo + 1;
            if (g_LbsOsaTrace_Config < 4) {
              break;
            }
            bzero(__str, 0x3C6uLL);
            uint64_t v24 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 73, "GncP04_03IncreaseInstnCount", g_GncPCntxtInfo);
            int v23 = 4;
          }
          else
          {
            if (g_LbsOsaTrace_Config < 2) {
              break;
            }
            bzero(__str, 0x3C6uLL);
            uint64_t v22 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 87, "GncP04_03IncreaseInstnCount", 770, g_GncPCntxtInfo);
            int v23 = 2;
          }
          gnssOsa_PrintLog(__str, v23, 1, 0);
          break;
        }
      }
      double v25 = (char *)&g_GncPCntxtInfo + 36 * v6;
      v25[8] = 1;
      void v25[4] = *(unsigned char *)(a1 + 12);
      unsigned int v26 = (unsigned __int8 *)(v25 + 4);
      *((_WORD *)v25 + 3) = *(_WORD *)(a1 + 14);
      int v27 = (unsigned __int16 *)(v25 + 6);
      v25[9] = *(unsigned char *)(a1 + 16);
      unint64_t v28 = (unsigned __int8 *)(v25 + 9);
      *(_OWORD *)(v25 + 12) = *(_OWORD *)(a1 + 20);
      int v29 = v25 + 12;
      *((_WORD *)v25 + 14) = *(_WORD *)(a1 + 36);
      uint64_t v30 = (unsigned __int16 *)(v25 + 28);
      *(_DWORD *)(v25 + 30) = *(_DWORD *)(a1 + 38);
      char v31 = (unsigned __int16 *)(v25 + 30);
      *(_DWORD *)(v25 + 34) = *(_DWORD *)(a1 + 42);
      int v32 = (unsigned __int8 *)(v25 + 34);
      v25[38] = *(unsigned char *)(a1 + 46);
      uint64_t v33 = (unsigned __int8 *)(v25 + 38);
      if (g_LbsOsaTrace_Config >= 4)
      {
        double v34 = v26;
        bzero(__str, 0x3C6uLL);
        uint64_t v35 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,Output,%u,ReqRcvd,%u,Deadline,%u,Emergency,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 73, "GncP04_07ProcessPosEvent", 2057, *v34, *v27, *v28, *v29, *((_DWORD *)&g_GncPCntxtInfo + 9 * v6 + 4), *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 37));
        gnssOsa_PrintLog(__str, 4, 1, 0);
        unsigned int v26 = v34;
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v36 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx StartTime,%u,Int,%u,HAcc,%u,Vacc,%u,ConstMask,%u,PrefFtaMeasTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 73, "GncP04_07ProcessPosEvent", 2057, *(_DWORD *)(v33 - 18), *(_DWORD *)(v33 - 14), *v30, *v31, *v32, *v33);
          gnssOsa_PrintLog(__str, 4, 1, 0);
          unsigned int v26 = v34;
        }
      }
      if (*v26 == 1)
      {
        GncP16_23UpdateStateFGSession(1);
        uint64_t v1 = (_DWORD *)&unk_26A9CB000;
        goto LABEL_41;
      }
      uint64_t v1 = &unk_26A9CB000;
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_41;
      }
      int v37 = v26;
      bzero(__str, 0x3C6uLL);
      uint64_t v38 = mach_continuous_time();
      uint64_t v56 = *v37;
      int v54 = "GncP04_07ProcessPosEvent";
      unint64_t v53 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38);
      int v39 = "%10u %s%c %s: Invalid ClientID,%hhu\n";
LABEL_39:
      snprintf(__str, 0x3C5uLL, v39, v53, "GNC", 87, v54, v56, v57, v59, v61);
      goto LABEL_40;
    }
    uint64_t v16 = 0;
    char v17 = 1;
    while (1)
    {
      char v18 = v17;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v16 + 8) == 1)
      {
        double v19 = (char *)&g_GncPCntxtInfo + 36 * v16;
        int v21 = v19[4];
        double v20 = v19 + 4;
        if (v21 == v4 && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v16 + 3) == v5) {
          break;
        }
      }
      char v17 = 0;
      uint64_t v16 = 1;
      if ((v18 & 1) == 0)
      {
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_41;
        }
        bzero(__str, 0x3C6uLL);
        unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v60 = *(unsigned __int16 *)(a1 + 14);
        uint64_t v62 = *(unsigned __int8 *)(a1 + 16);
        uint64_t v55 = 2050;
        uint64_t v58 = *(unsigned __int8 *)(a1 + 12);
        double v12 = "GncP04_06HandleStopPosEvent";
        double v13 = "%10u %s%c %s: #%04hx Client,%hhu,Ses,%u,PosOp,%u\n";
LABEL_25:
        snprintf(__str, 0x3C5uLL, v13, v11, "GNC", 87, v12, v55, v58, v60, v62);
LABEL_40:
        gnssOsa_PrintLog(__str, 2, 1, 0);
LABEL_41:
        switch((char)g_GncPStateInfo)
        {
          case 0:
          case 5:
          case 10:
          case 11:
          case 16:
            return 0;
          case 1:
          case 3:
            char v40 = 2;
            goto LABEL_52;
          case 2:
          case 4:
            char v40 = 3;
            goto LABEL_52;
          case 6:
            char v40 = 7;
            goto LABEL_52;
          case 7:
          case 8:
          case 9:
          case 14:
          case 15:
            if (*(unsigned char *)(a1 + 16)) {
              char v40 = 6;
            }
            else {
              char v40 = 1;
            }
LABEL_52:
            GncP04_19SendPosEvntResp(v40);
            return 0;
          default:
            if (v1[782] < 2u) {
              return 0;
            }
            bzero(__str, 0x3C6uLL);
            uint64_t v44 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 87, "GncP04_05HandlePosEventInd", 770);
            int v15 = 2;
            break;
        }
LABEL_17:
        gnssOsa_PrintLog(__str, v15, 1, 0);
        return 0;
      }
    }
    if (v4 != 1)
    {
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_41;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v45 = mach_continuous_time();
      uint64_t v56 = 770;
      uint64_t v57 = *(unsigned __int8 *)(a1 + 12);
      int v54 = "GncP04_06HandleStopPosEvent";
      unint64_t v53 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45);
      int v39 = "%10u %s%c %s: #%04hx ClientID,%hhu\n";
      goto LABEL_39;
    }
    *(_DWORD *)(v20 + 31) = 0;
    *(_OWORD *)double v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    if ((g_GncPCntxtInfo - 3) > 0xFDu)
    {
      LOBYTE(g_GncPCntxtInfo) = g_GncPCntxtInfo - 1;
      if (g_LbsOsaTrace_Config < 4) {
        goto LABEL_61;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v46 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 73, "GncP04_04DecreaseInstnCount", g_GncPCntxtInfo);
      int v42 = 4;
    }
    else
    {
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_61;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v41 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "GNC", 87, "GncP04_04DecreaseInstnCount", 770, g_GncPCntxtInfo);
      int v42 = 2;
    }
    gnssOsa_PrintLog(__str, v42, 1, 0);
LABEL_61:
    uint64_t v47 = 0;
    char v48 = 1;
    while (1)
    {
      char v49 = v48;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v47 + 8) == 1 && !*((unsigned char *)&g_GncPCntxtInfo + 36 * v47 + 36)) {
        break;
      }
      char v48 = 0;
      uint64_t v47 = 1;
      if ((v49 & 1) == 0)
      {
        GncP16_23UpdateStateFGSession(0);
        break;
      }
    }
    uint64_t v50 = 0;
    char v51 = 1;
    while (1)
    {
      char v52 = v51;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v50 + 8) == 1 && (*((unsigned char *)&g_GncPCntxtInfo + 36 * v50 + 9) & 2) != 0) {
        goto LABEL_41;
      }
      char v51 = 0;
      uint64_t v50 = 1;
      if ((v52 & 1) == 0)
      {
        if (qword_26A9CBC28) {
          free((void *)qword_26A9CBC28);
        }
        qword_26A9CBC28 = 0;
        goto LABEL_41;
      }
    }
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncP04_05HandlePosEventInd", 517);
    int v15 = 1;
    goto LABEL_17;
  }
  return 0;
}

void GncP04_19SendPosEvntResp(char a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  double v2 = gnssOsa_Calloc("GncP04_19SendPosEvntResp", 494, 1, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    v2[12] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT_RSP =>GNCS Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP04_19SendPosEvntResp", v3[12]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 130, 8653315, v3);
  }
}

uint64_t GncP04_08GetNextSessInstn(unsigned int a1, void *__dst, unsigned __int8 a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (__dst)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    char v5 = 1;
    while (1)
    {
      char v6 = v5;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v3 + 8) == 1
        && (*((unsigned char *)&g_GncPCntxtInfo + 36 * v3 + 9) & a3) != 0
        && a1 < ++v4)
      {
        break;
      }
      char v5 = 0;
      uint64_t v7 = 0;
      uint64_t v3 = 1;
      if ((v6 & 1) == 0) {
        return v7;
      }
    }
    memcpy_s("GncP04_08GetNextSessInstn", 389, __dst, 0x24u, (char *)&g_GncPCntxtInfo + 36 * v3 + 4, 0x24uLL);
    return 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP04_08GetNextSessInstn", 513);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
}

void GncP04_21SendClearGnssAck(char a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = g_GnssDataClrMask;
  if (g_GnssDataClrMask)
  {
    uint64_t v3 = gnssOsa_Calloc("GncP04_21SendClearGnssAck", 522, 1, 0x14uLL);
    if (v3)
    {
      int v4 = v3;
      v3[12] = a1;
      *((_DWORD *)v3 + 4) = v1;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP04_21SendClearGnssAck", v4[12]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 128, 8653316, v4);
      g_GnssDataClrMasuint64_t k = 0;
    }
  }
}

char *NK_IntConstel_TO_IntMeas(char *result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v8 = (unsigned __int8 *)(a2 + 60472);
  if (result[241]
    || *((_DWORD *)result + 6780) > *((unsigned __int16 *)result + 8)
    || *(_DWORD *)(a2 + 1872) != 1)
  {
    BOOL v10 = 0;
  }
  else
  {
    unsigned int v9 = *((_DWORD *)result + 37);
    if (v9 >= *((_DWORD *)result + 38)) {
      unsigned int v9 = *((_DWORD *)result + 38);
    }
    if (v9 >= *((_DWORD *)result + 39)) {
      unsigned int v9 = *((_DWORD *)result + 39);
    }
    BOOL v10 = v9 > 0xA;
  }
  int v11 = *v8;
  if (v11 == 4)
  {
    int v14 = *(_DWORD *)(a2 + 60476);
    if (v14 == 5)
    {
      if (*(int *)(a3 + 47536) >= 1 && *(_WORD *)(a3 + 47544))
      {
        double v12 = *(double *)(a3 + 47552) * 299792458.0;
        if (fabs(v12) > 50.0) {
          return EvLog_v("NK_IntConstel_TO_IntMeas:  Large BDS-GLO Time Offset  %d > 50 m");
        }
        double v13 = 1.0;
        if (v10) {
          double v13 = 9.0;
        }
      }
      else
      {
        if (v10) {
          return result;
        }
        double v12 = 0.0;
        double v13 = 100.0;
      }
      double v18 = *(double *)(a2 + 1640) - *(double *)(a2 + 1648);
      double v19 = result + 27086;
      unsigned int v20 = 2;
      unsigned int v17 = 1;
    }
    else
    {
      if (v14 != 4) {
        return result;
      }
      if (*(int *)(a3 + 47496) >= 1 && *(_WORD *)(a3 + 47504))
      {
        double v12 = *(double *)(a3 + 47512) * 299792458.0;
        if (*(int *)(a2 + 20) >= 1 && *(unsigned char *)(a2 + 25))
        {
          LODWORD(a7) = *(_DWORD *)(a3 + 47508);
          double v15 = *(double *)(a2 + 32)
              - (double)*(unint64_t *)&a7
              + (double)(604800 * (*(__int16 *)(a2 + 26) - *(unsigned __int16 *)(a3 + 47504)));
          unsigned int v16 = (int)v15;
          if ((int)v15 < 0) {
            unsigned int v16 = -v16;
          }
          if (v16 >> 5 <= 0xE0) {
            double v12 = v12 + v15 * *(double *)(a3 + 47520) * 299792458.0;
          }
        }
        if (fabs(v12) > 30.0) {
          return EvLog_v("NK_IntConstel_TO_IntMeas:  Large BDS-GPS Time Offset  %d m > 30 m");
        }
        double v13 = 1.0;
        if (v10) {
          double v13 = 9.0;
        }
        *((double *)result + 1945) = v12;
        *((double *)result + 1946) = v13;
      }
      else
      {
        if (v10) {
          return result;
        }
        double v12 = 0.0;
        double v13 = 100.0;
      }
      unsigned int v17 = 0;
      double v18 = *(double *)(a2 + 1632) - *(double *)(a2 + 1648);
      double v19 = result + 27084;
      unsigned int v20 = 2;
    }
  }
  else
  {
    if (v11 != 2 || *(_DWORD *)(a2 + 60476) != 1) {
      return result;
    }
    if (*(unsigned char *)(a3 + 17192))
    {
      double v12 = (double)*(int *)(a3 + 17132) * 9.31322575e-10 * -299792458.0;
      if (fabs(v12) > 40.0) {
        return EvLog_v("NK_IntConstel_TO_IntMeas:  Large GLO-GPS Time Offset  %d m > 40m");
      }
      double v13 = 1.0;
      if (v10) {
        double v13 = 9.0;
      }
      *((double *)result + 1941) = v12;
      *((double *)result + 1942) = v13;
    }
    else
    {
      if (v10) {
        return result;
      }
      double v12 = 0.0;
      double v13 = 100.0;
    }
    unsigned int v17 = 0;
    double v18 = *(double *)(a2 + 1632) - *(double *)(a2 + 1640);
    double v19 = result + 27082;
    unsigned int v20 = 1;
  }
  char v26 = 0;
  uint64_t v25 = 0;
  int v27 = 0;
  *(_OWORD *)&v28[12] = 0u;
  long long v29 = 0u;
  int v30 = 0;
  *(double *)unint64_t v28 = v12;
  *(double *)&v28[8] = v13;
  v23[0] = 1;
  int v24 = 2;
  *(void *)((char *)&v29 + 4) = 0x4415AF1D78B58C40;
  uint64_t result = (char *)KFSt_DMeas_Update(v17, v20, 0xCu, v23, (double *)result + 122, v19, v18 * 299792458.0);
  if (result)
  {
    int v21 = *v8;
    if (v21 == 4)
    {
      *((_DWORD *)v8 + 401) = v24;
      int v22 = *((_DWORD *)v8 + 1);
      if (v22 == 5)
      {
        v8[1664] = 1;
      }
      else if (v22 == 4)
      {
        v8[1663] = 1;
        v8[32] = 1;
        *(_OWORD *)(a2 + 60512) = *(_OWORD *)v28;
      }
    }
    else if (v21 == 2)
    {
      *((_DWORD *)v8 + 400) = v24;
      v8[1662] = 1;
      v8[8] = 1;
      *((_OWORD *)v8 + 1) = *(_OWORD *)v28;
    }
    if (g_Logging_Cfg >= 7) {
      return EvLog_v("NK_IntConstel_TO_IntMeas: Time Offset applied:  %d  %d");
    }
  }
  return result;
}

unsigned __int16 *Gnm02_13ReqNewNafInstn(int a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (Gnm02_32GetInstnFromNafId(a1))
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx %s\n", v18);
LABEL_27:
    gnssOsa_PrintLog(__str, 2, 1, 0);
    return 0;
  }
  uint64_t v4 = 2u;
  do
  {
    if (!*(void *)&g_GnmInstances[v4])
    {
      char v6 = (unsigned __int16 *)gnssOsa_Calloc("Gnm02_11ReqNewInstn", 139, 1, 0x10uLL);
      *(void *)&g_GnmInstances[v4] = v6;
      if (!v6)
      {
LABEL_25:
        if (g_LbsOsaTrace_Config < 2) {
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NewInstn %s\n", v19);
        goto LABEL_27;
      }
      uint64_t v7 = v6;
      unsigned __int16 v8 = g_GnmInstances[0];
      do
      {
        unint64_t v9 = 0;
        BOOL v10 = 0;
        if ((unsigned __int16)(v8 >> 2) < 0xFFFu) {
          ++v8;
        }
        else {
          unsigned __int16 v8 = 1;
        }
        do
        {
          int v11 = *(unsigned __int16 **)&g_GnmInstances[2 * v9 + 2];
          if (v11 && *v11 == v8) {
            break;
          }
          BOOL v10 = v9++ > 1;
        }
        while (v9 != 3);
      }
      while (!v10);
      g_GnmInstances[0] = __PAIR32__(HIWORD(g_GnmInstances[0]), v8) + 0x10000;
      *char v6 = v8;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm02_11ReqNewInstn", 2057, *v7);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      uint64_t v13 = 2u;
      while (*(unsigned __int16 **)&g_GnmInstances[v13] != v7)
      {
        v13 += 2;
        if (v13 == 8)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn\n");
            goto LABEL_34;
          }
LABEL_37:
          Gnm02_21DeleteInstn(v7);
          return 0;
        }
      }
      if (*((unsigned char *)v7 + 2))
      {
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_37;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType\n");
      }
      else
      {
        if (!*((void *)v7 + 1))
        {
          unsigned int v16 = gnssOsa_Calloc("Gnm02_04AddNafParams", 100, 1, 0x50uLL);
          *((void *)v7 + 1) = v16;
          if (v16)
          {
            *((unsigned char *)v7 + 2) = 1;
            *unsigned int v16 = a1;
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v17 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx %s GNMInstn,%u,NaftInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm02_13ReqNewNafInstn", 2057, a2, *v7, a1);
              gnssOsa_PrintLog(__str, 4, 1, 0);
            }
            return v7;
          }
LABEL_35:
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v14 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NewNafInst %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm02_13ReqNewNafInstn", 2049, a2);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          goto LABEL_37;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_37;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
      }
LABEL_34:
      gnssOsa_PrintLog(__str, 2, 1, 0);
      goto LABEL_35;
    }
    v4 += 2;
  }
  while (v4 != 8);
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm02_11ReqNewInstn", 2054);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    goto LABEL_25;
  }
  return 0;
}

uint64_t Gnm02_32GetInstnFromNafId(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = 2u;
  while (1)
  {
    uint64_t result = *(void *)&g_GnmInstances[v2];
    if (result)
    {
      uint64_t v4 = *(_DWORD **)(result + 8);
      if (v4)
      {
        if (*(unsigned char *)(result + 2) == 1 && *v4 == a1) {
          break;
        }
      }
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 68, "Gnm02_32GetInstnFromNafId", 2052, a1);
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      return 0;
    }
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNMInstn,%u,NafInstn,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm02_32GetInstnFromNafId", **(unsigned __int16 **)&g_GnmInstances[v2], a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    return *(void *)&g_GnmInstances[v2];
  }
  return result;
}

BOOL Gnm02_21DeleteInstn(unsigned __int16 *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v2] != a1)
    {
      v2 += 2;
      if (v2 == 8) {
        goto LABEL_5;
      }
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Deleted GNMInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm02_21DeleteInstn", *a1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    uint64_t v7 = *((void *)a1 + 1);
    if (v7)
    {
      if (*((unsigned char *)a1 + 2) == 1)
      {
        uint64_t v8 = *(void **)(v7 + 72);
        if (v8) {
          free(v8);
        }
        *(void *)(v7 + 72) = 0;
        BOOL v4 = (*(unsigned char *)(v7 + 4) & 7) != 0;
      }
      else
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm02_21DeleteInstn", 2050, *((unsigned __int8 *)a1 + 2));
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        BOOL v4 = 0;
      }
      int v11 = (void *)*((void *)a1 + 1);
      if (v11) {
        free(v11);
      }
      *((void *)a1 + 1) = 0;
      *((unsigned char *)a1 + 2) = 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      BOOL v4 = 0;
    }
    uint64_t v12 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v12] != a1)
    {
      v12 += 2;
      if (v12 == 8) {
        return v4;
      }
    }
    free(a1);
    *(void *)&g_GnmInstances[v12] = 0;
    if (HIWORD(g_GnmInstances[0])) {
      --HIWORD(g_GnmInstances[0]);
    }
  }
  else
  {
LABEL_5:
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
  return v4;
}

BOOL Gnm02_23StopNafSession(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Clearing Instance NafID,%u,PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm02_23StopNafSession", *(_DWORD *)v2, *(unsigned __int8 *)(v2 + 4));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  unsigned int v4 = *(unsigned __int8 *)(v2 + 4);
  BOOL v5 = v4 > 4;
  int v6 = (1 << v4) & 0x16;
  if (!v5 && v6 != 0) {
    return Gnm10_28StopPositioning((unsigned __int16 *)a1);
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm02_23StopNafSession", 770, *(unsigned __int8 *)(v2 + 4));
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 0;
}

uint64_t Gnm02_24AbortAllNafSessions(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Aborting all NAF sessions\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm02_24AbortAllNafSessions");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v3 = 2u;
  do
  {
    uint64_t result = *(void *)&g_GnmInstances[v3];
    if (result)
    {
      BOOL v5 = *(unsigned int **)(result + 8);
      if (v5)
      {
        if (*(unsigned char *)(result + 2) == 1)
        {
          if ((v5[1] & 7) != 0 && *((unsigned char *)v5 + 64) == 1)
          {
            int v6 = (void (*)(uint64_t, uint64_t, void *))*((void *)v5 + 7);
            uint64_t v7 = *v5;
            v8[0] = 0;
            v8[1] = 0;
            int v9 = 0;
            char v10 = 1;
            v6(a1, v7, v8);
            uint64_t result = *(void *)&g_GnmInstances[v3];
          }
          Gnm02_23StopNafSession(result);
          uint64_t result = Gnm02_21DeleteInstn(*(unsigned __int16 **)&g_GnmInstances[v3]);
        }
      }
    }
    v3 += 2;
  }
  while (v3 != 8);
  return result;
}

unsigned __int16 *Gnm02_31GetInstnFromInstnId(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = 2u;
  while (1)
  {
    uint64_t result = *(unsigned __int16 **)&g_GnmInstances[v2];
    if (result)
    {
      if (*result == a1) {
        break;
      }
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 68, "Gnm02_31GetInstnFromInstnId", 2052, a1);
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      return 0;
    }
  }
  return result;
}

unsigned __int16 *Gnm02_52DeInitializeInstances(void)
{
  uint64_t v0 = 2u;
  do
  {
    uint64_t result = *(unsigned __int16 **)&g_GnmInstances[v0];
    if (result) {
      uint64_t result = (unsigned __int16 *)Gnm02_21DeleteInstn(result);
    }
    v0 += 2;
  }
  while (v0 != 8);
  g_GnmInstances[0] = 0;
  return result;
}

double GAL_EphReal2Kep(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = 3;
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 14);
  unsigned int v2 = *(unsigned __int8 *)(a1 + 15);
  if (v2 > 0x31)
  {
    if (v2 > 0x4B)
    {
      if (v2 <= 0x64)
      {
        if (v2 >= 0x51)
        {
          if (v2 >= 0x5D) {
            char v3 = 0;
          }
          else {
            char v3 = -1;
          }
        }
        else
        {
          char v3 = -2;
        }
        goto LABEL_58;
      }
      if (v2 > 0x7D)
      {
        if (v2 > 0x96)
        {
          if (v2 > 0xAF)
          {
            if (v2 > 0xC8)
            {
              if (v2 > 0xE1)
              {
                if (v2 > 0xFA)
                {
                  if (v2 == 255) {
                    char v3 = 15;
                  }
                  else {
                    char v3 = 14;
                  }
                  goto LABEL_58;
                }
                BOOL v4 = v2 >= 0xEE;
                char v3 = 9;
              }
              else
              {
                BOOL v4 = v2 >= 0xD6;
                char v3 = 8;
              }
            }
            else
            {
              BOOL v4 = v2 >= 0xBE;
              char v3 = 7;
            }
          }
          else
          {
            BOOL v4 = v2 >= 0xA6;
            char v3 = 6;
          }
        }
        else
        {
          if (v2 < 0x82)
          {
            char v3 = 3;
            goto LABEL_58;
          }
          if (v2 < 0x8B)
          {
            char v3 = 4;
            goto LABEL_58;
          }
          BOOL v4 = v2 >= 0x96;
          char v3 = 5;
        }
      }
      else
      {
        if (v2 < 0x67)
        {
          char v3 = 0;
          goto LABEL_58;
        }
        if (v2 < 0x6D)
        {
          char v3 = 1;
          goto LABEL_58;
        }
        BOOL v4 = v2 >= 0x76;
        char v3 = 2;
      }
    }
    else
    {
      if (v2 < 0x38)
      {
        char v3 = -4;
        goto LABEL_58;
      }
      BOOL v4 = v2 >= 0x44;
      char v3 = -3;
    }
  }
  else
  {
    if (v2 < 2)
    {
      char v3 = -15;
      goto LABEL_58;
    }
    if (v2 == 2)
    {
      char v3 = -14;
      goto LABEL_58;
    }
    if (v2 < 4)
    {
      char v3 = -13;
      goto LABEL_58;
    }
    if (v2 == 4)
    {
      char v3 = -12;
      goto LABEL_58;
    }
    if (v2 < 7)
    {
      char v3 = -11;
      goto LABEL_58;
    }
    if (v2 < 9)
    {
      char v3 = -10;
      goto LABEL_58;
    }
    if (v2 < 0xC)
    {
      char v3 = -9;
      goto LABEL_58;
    }
    if (v2 < 0x10)
    {
      char v3 = -8;
      goto LABEL_58;
    }
    if (v2 < 0x16)
    {
      char v3 = -7;
      goto LABEL_58;
    }
    if (v2 < 0x1F)
    {
      char v3 = -6;
      goto LABEL_58;
    }
    BOOL v4 = v2 >= 0x2C;
    char v3 = -5;
  }
  if (v4) {
    ++v3;
  }
LABEL_58:
  *(unsigned char *)(a2 + 19) = v3;
  *(unsigned char *)(a2 + 18) = *(unsigned char *)(a1 + 202);
  char v5 = v2 == 255;
  *(unsigned char *)(a2 + 14) = v5 << 6;
  char v6 = *(unsigned char *)(a1 + 201);
  char v7 = *(unsigned char *)(a1 + 198);
  int v8 = *(unsigned __int8 *)(a1 + 199);
  char v9 = *(unsigned char *)(a1 + 196);
  *(unsigned char *)(a2 + 14) = (4 * v7) | (8 * v8) | (32 * v9) | (v5 << 6) | v6;
  *(unsigned char *)(a2 + 15) = v8 == 0;
  *(unsigned char *)(a2 + 16) = (v6 | v7) == 0;
  *(unsigned char *)(a2 + 17) = (v8 | v9) == 0;
  *(_WORD *)(a2 + 20) = *(_WORD *)(a1 + 194);
  *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 12) + 1024;
  int v10 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 28) = v10;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 152);
  double v11 = *(double *)(a1 + 184);
  *(void *)(a2 + 56) = *(void *)(a1 + 168);
  *(double *)(a2 + 64) = v11;
  *(double *)(a2 + 72) = v11;
  *(double *)(a2 + 80) = v11 * 1.79327032;
  *(double *)(a2 + 88) = v11 * 1.79327032;
  *(double *)(a2 + 96) = v11;
  *(void *)(a2 + 104) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a2 + 168) = *(void *)(a1 + 80);
  *(void *)(a2 + 176) = v12;
  *(void *)(a2 + 184) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 48);
  double result = *(double *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a2 + 216) = *(void *)(a1 + 64);
  *(double *)(a2 + 224) = result;
  *(void *)(a2 + 232) = v14;
  return result;
}

double *NK_Comp_DOPS(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = 0;
  uint64_t v40 = *MEMORY[0x263EF8340];
  memset(v37, 0, sizeof(v37));
  do
  {
    *(void *)((char *)v37 + v4) = 0x40D3880000000000;
    v4 += 40;
  }
  while (v4 != 160);
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  memset(&v30[1], 0, 32);
  double v5 = 1.99960002e14;
  if (*(unsigned char *)(a1 + 15411)) {
    double v5 = *(double *)(a1 + 15440) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 15432)) * 0.001);
  }
  *(double *)&long long v31 = v5;
  v30[0] = v5;
  double v6 = 1.99960002e14;
  if (*(unsigned char *)(a1 + 15412)) {
    double v6 = *(double *)(a1 + 15456) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 15448)) * 0.001);
  }
  *((double *)&v33 + 1) = v6;
  double v7 = 1.99960002e14;
  if (*(unsigned char *)(a1 + 15410)) {
    double v7 = *(double *)(a1 + 15424) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 15416)) * 0.001);
  }
  uint64_t v8 = 0;
  double v36 = v7;
  do
  {
    if (v30[v8] > 1.99960002e14) {
      v30[v8] = 1.99960002e14;
    }
    v8 += 5;
  }
  while (v8 != 20);
  uint64_t v29 = a1 + 15410;
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = a2 + 3680;
  double v13 = 0.0;
  uint64_t v14 = 7048;
  uint64_t v15 = 13184;
  uint64_t v16 = 14208;
  do
  {
    if (*(unsigned char *)(a1 + v16))
    {
      uint64_t v17 = a1 + 8 * v9;
      int8x16_t v18 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(a1 + v14), *(double *)(v17 + 1936));
      int8x16_t v38 = vextq_s8(v18, v18, 8uLL);
      uint64_t v39 = *(void *)(v17 + 1928);
      unint64_t v19 = (double *)(*(unsigned char *)(v2 + 2400) ? v12 : a1 + v15);
      double v20 = *v19 >= 0.0001 ? *v19 : 0.0001;
      DOP4_Upd_W_Meas((double *)v38.i64, v20, (double (*)[4])v30);
      if (v20 < 800000.0)
      {
        ++v10;
        double v13 = v13 + v20;
        if (*(unsigned char *)(v2 + 7064))
        {
          DOP4_Upd_U_Meas((uint64_t)&v38, (double (*)[4])v37);
          ++v11;
        }
      }
    }
    v9 += 5;
    v14 += 40;
    ++v2;
    v15 += 8;
    v12 += 8;
    ++v16;
  }
  while (v9 != 640);
  if (v11 <= 3) {
    DOP4_Upd_U_Elem(2, (double (*)[4])v37);
  }
  double result = DOP4_Calc_U((double *)v37, (double *)(a2 + 61848));
  if (v10) {
    double v22 = v13 / (double)v10;
  }
  else {
    double v22 = 0.0;
  }
  *(double *)(a1 + 14336) = v22;
  double v23 = v36 * 8.0;
  *(double *)(a1 + 15488) = v36 * 8.0;
  double v24 = *(double *)&v31;
  double v25 = *((double *)&v33 + 1) * 8.0;
  *(double *)(a1 + 15512) = *((double *)&v33 + 1) * 8.0;
  double v26 = v30[1];
  double v27 = v30[0] + v30[0];
  *(double *)(a1 + 15496) = v30[0] + v30[0];
  *(double *)(a1 + 15504) = v24 + v24;
  *(double *)(a1 + 15520) = v26 + v26;
  if (v23 > 3600.0) {
    *(void *)(a1 + 15488) = 0x40AC200000000000;
  }
  if (v25 > 3600.0) {
    *(void *)(a1 + 15512) = 0x40AC200000000000;
  }
  if (v27 > 900.0 || v24 + v24 > 900.0)
  {
    *(int64x2_t *)(v29 + 86) = vdupq_n_s64(0x408C200000000000uLL);
    *(void *)(a1 + 15520) = 0;
  }
  return result;
}

uint64_t NK_Get_Ext_Time(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v3 = (__int16 *)(a2 + 59966);
  *(unsigned char *)(a2 + 59984) = 0;
  *(unsigned char *)(a2 + 60000) = 0;
  *(unsigned char *)(a2 + 60056) = 0;
  *(unsigned char *)(a2 + 60072) = 0;
  double v4 = *(double *)(a2 + 32);
  if (v4 > 3.0 && v4 < 604797.0)
  {
    int v7 = result;
    unsigned __int8 v26 = 0;
    uint64_t v8 = (double *)(a2 + 59968);
    uint64_t v9 = (double *)(a2 + 59976);
    double result = Get_FSP_Time(result, (__int16 *)(a2 + 59966), (double *)(a2 + 59968), (double *)(a2 + 59976), &v26);
    if (result)
    {
      double v10 = *v8;
      double v11 = *(double *)(a2 + 1528);
      double v12 = *v8 - (v11 - *(double *)(a2 + 1632));
      *(double *)(a2 + 63768) = v12;
      double v13 = *v9;
      uint64_t v14 = *(unsigned int *)(a2 + 20);
      if (*v9 < g_TOW_Stat_Var99_Table[v14])
      {
        double v15 = v12 * 1000.0;
        double v16 = -0.5;
        if (v15 > 0.0) {
          double v16 = 0.5;
        }
        double v17 = v15 + v16;
        double v18 = 2147483650.0;
        if (v17 <= 2147483650.0)
        {
          double v18 = -2147483650.0;
          if (v17 >= -2147483650.0) {
            double v18 = (double)(int)v17;
          }
        }
        *((unsigned char *)v3 + 18) = 1;
        *(_DWORD *)(v3 + 11) = 1;
        *(_DWORD *)(v3 + 19) = v7;
        *(double *)(v3 + 21) = v18;
        *(double *)(v3 + 25) = v13 * 1000000.0;
        int v19 = *(unsigned __int8 *)(a3 + 241);
        double v20 = 36.0;
        if (*(unsigned char *)(a3 + 241)) {
          double v20 = 1.0e20;
        }
        *(double *)(v3 + 37) = v20;
        int v21 = v26;
        *(_DWORD *)(v3 + 15) = v26;
        if (v13 <= 0.00000025 || (int)v14 <= 8)
        {
          v22.f64[0] = v11 + v18 * 0.001 - v10;
          *((unsigned char *)v3 + 90) = 1;
          *(_DWORD *)(v3 + 47) = 1;
          *(_DWORD *)(v3 + 55) = v7;
          v22.f64[1] = v13;
          *(float64x2_t *)(a2 + 60080) = vmulq_f64(v22, (float64x2_t)xmmword_263D817E0);
          double v23 = 16.0;
          if (v19) {
            double v23 = 1.0e20;
          }
          *(double *)(v3 + 73) = v23;
          *(_DWORD *)(v3 + 51) = v21;
        }
        __int16 v24 = *v3;
        *(_WORD *)(a2 + 1542) = *v3;
        *(_WORD *)(a2 + 26) = v24;
      }
    }
    if (*((unsigned char *)v3 + 90) && (double v25 = *(double *)(v3 + 61), v25 < 2.25e10))
    {
      *(unsigned char *)(a3 + 15410) = 1;
      *(_DWORD *)(a3 + 15416) = *(_DWORD *)(v3 + 55);
      *(double *)(a3 + 15424) = v25;
    }
    else if (*(unsigned char *)(a3 + 15410))
    {
      if ((v7 - *(_DWORD *)(a3 + 15416)) >= 0x1D4C1) {
        *(unsigned char *)(a3 + 15410) = 0;
      }
    }
  }
  return result;
}

uint64_t NK_Prop_Cov_Mat(double a1, double *a2)
{
  v10[12] = *(double *)MEMORY[0x263EF8340];
  unsigned __int8 v3 = 1;
  v10[0] = a1;
  v10[1] = a1;
  int v4 = 16843009;
  char v5 = 1;
  v10[2] = a1;
  v10[3] = a1;
  *(_DWORD *)double v6 = 117637633;
  *(_DWORD *)uint64_t v8 = 168101125;
  __int16 v7 = 2312;
  __int16 v9 = 3083;
  void v10[4] = a1;
  void v10[5] = a1;
  return stphiu((uint64_t)a2, 0xCu, v10, v8, 6, v6, &v3);
}

uint64_t Gnm14_11HandleStartPosResp(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_START_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_11HandleStartPosResp");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm14_11HandleStartPosResp", 517);
    int v9 = 1;
LABEL_14:
    gnssOsa_PrintLog(__str, v9, 1, 0);
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 14);
  int v4 = *(unsigned __int16 *)(a1 + 12);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm14_11HandleStartPosResp", v4, *(unsigned __int8 *)(a1 + 14));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v4);
  if (!InstnFromInstnId)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm14_11HandleStartPosResp", 2052, v4);
    int v9 = 2;
    goto LABEL_14;
  }
  __int16 v7 = InstnFromInstnId;
  if (!*((void *)InstnFromInstnId + 1))
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", v12);
LABEL_19:
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
LABEL_20:
    Gnm02_21DeleteInstn(v7);
    return 0;
  }
  if (*((unsigned char *)InstnFromInstnId + 2) != 1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", v13);
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  Gnm11_07StartPosResp((uint64_t)InstnFromInstnId, v3 == 255);
  return 0;
}

uint64_t Gnm14_12HandleStopPosResp(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_STOP_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_12HandleStopPosResp");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm14_12HandleStopPosResp", 517);
    int v9 = 1;
LABEL_14:
    gnssOsa_PrintLog(__str, v9, 1, 0);
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 14);
  int v4 = *(unsigned __int16 *)(a1 + 12);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm14_12HandleStopPosResp", v4, *(unsigned __int8 *)(a1 + 14));
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v4);
  if (!InstnFromInstnId)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v4);
    int v9 = 2;
    goto LABEL_14;
  }
  __int16 v7 = InstnFromInstnId;
  if (*((void *)InstnFromInstnId + 1))
  {
    if (*((unsigned char *)InstnFromInstnId + 2) == 1)
    {
      Gnm11_08StopPosResp(InstnFromInstnId, v3 == 255);
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm14_12HandleStopPosResp", 770, *((unsigned __int8 *)v7 + 2));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      Gnm02_21DeleteInstn(v7);
    }
    gnssOsa_flushNv();
  }
  else
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v4);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    Gnm02_21DeleteInstn(v7);
  }
  return 0;
}

uint64_t Gnm14_13HandleClearGNSSRsp(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_13HandleClearGNSSRsp");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    int v3 = *(unsigned __int8 *)(a1 + 12);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v5 = 89;
      if (!v3) {
        uint64_t v5 = 78;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Status,%c,Mask0x%X\n", (unint64_t)v4, "GNM", 73, "Gnm14_13HandleClearGNSSRsp", v5, *(_DWORD *)(a1 + 16));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (v3 && ((*(_DWORD *)(a1 + 16) & 0x40100) == 0 || (Gnm55_ClearVar_GNSS_FW_NV() & 1) != 0))
    {
      if (byte_26A9CC211)
      {
        byte_26A9CC211 = 0;
        uint64_t v6 = 0;
LABEL_17:
        Gnm11_00ApiStatusCB(v6, 0, 0, 16);
      }
    }
    else if (byte_26A9CC211)
    {
      byte_26A9CC211 = 0;
      uint64_t v6 = 11;
      goto LABEL_17;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm14_13HandleClearGNSSRsp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Comp_AzEl(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, _WORD *a5, _DWORD *a6, int *a7)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a3 + 120))
  {
    uint64_t v11 = 0;
    double v28 = 0.0;
    double v29 = 0.0;
    double v30 = 0.0;
    do
    {
      *(double *)((char *)&v28 + v11) = *(double *)(a3 + 8 + v11) - *(double *)(a1 + v11);
      v11 += 8;
    }
    while (v11 != 24);
    double v12 = 0.0;
    uint64_t v13 = 2;
    do
    {
      double v12 = v12 + *(&v28 + v13) * *(&v28 + v13);
      unint64_t v14 = v13-- + 1;
    }
    while (v14 > 1);
    uint64_t v15 = 0;
    double v16 = sqrt(v12);
    do
    {
      *(double *)((char *)&v28 + v15) = *(double *)((char *)&v28 + v15) / v16;
      v15 += 8;
    }
    while (v15 != 24);
    uint64_t v17 = 0;
    memset(v27, 0, sizeof(v27));
    double v18 = v28;
    double v19 = v29;
    double v20 = (double *)(a2 + 16);
    double v21 = v30;
    do
    {
      double v22 = *(v20 - 1) * v19 + *(v20 - 2) * v18;
      double v23 = *v20;
      v20 += 3;
      v27[v17++] = v22 + v23 * v21;
    }
    while (v17 != 3);
    AzEl_SinCos(v27, (uint64_t)a7, (uint64_t)a6);
    AzEl_RadDeg((uint64_t)a7, (uint64_t)a6);
    int v24 = *a7;
    if (*a7 < 0)
    {
      if (v24 <= -360) {
        int v25 = -360;
      }
      else {
        int v25 = *a7;
      }
      unsigned int v26 = (v25 - v24 - (v24 < 0xFFFFFE98)) / 0x168;
      if (v24 < 0xFFFFFE98) {
        ++v26;
      }
      *a7 = v24 + 360 * v26 + 360;
    }
    *a4 = *a6;
    *a5 = *a7;
  }
}

int8x8_t Decode_GPS_Health_From_AS_Subfr(const unsigned int *a1, int8x8_t *a2)
{
  unsigned int v2 = a1[8];
  unsigned int v3 = a1[9];
  v4.i8[0] = a1[7] & 0x1F;
  v4.i8[1] = (v2 >> 18) & 0x1F;
  v4.i8[2] = (v2 >> 12) & 0x1F;
  v4.i8[3] = (v2 >> 6) & 0x1F;
  v4.i8[4] = v2 & 0x1F;
  v4.i8[5] = (v3 >> 18) & 0x1F;
  v4.i8[6] = (v3 >> 12) & 0x1F;
  v4.i8[7] = (v3 >> 6) & 0x1F;
  uint16x8_t v5 = vmovl_u8(v4);
  uint32x4_t v6 = vmovl_high_u16(v5);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  int64x2_t v8 = v7;
  uint32x4_t v9 = vmovl_u16(*(uint16x4_t *)v5.i8);
  v7.i64[0] = v9.u32[0];
  v7.i64[1] = v9.u32[1];
  uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(0xE4FE7F3uLL);
  int8x8_t result = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v7)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v9))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v8)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v6))))), (int8x8_t)0x101010101010101);
  *a2 = result;
  return result;
}

double *Comp_Track_velLOS(double a1, double a2, double *result, double *a4)
{
  if (fabs(a1) > 0.0001 || fabs(a2) > 0.0001)
  {
    double v10 = 57.2957795 / (a1 * a1 + a2 * a2);
    *a4 = v10 * (result[3] * a1 - *result * a2);
    a4[1] = v10 * (result[4] * a1 - result[1] * a2);
    double v9 = v10 * -(result[2] * a2);
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    double v9 = 1.0;
  }
  a4[2] = v9;
  return result;
}

uint64_t GN_ABDS_Set_CNAV_Eph_El(unsigned __int8 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_CNAV_Eph_El")) {
    return 0;
  }
  if (g_Logging_Cfg < 5) {
    EvLog_d("GN_ABDS_Set_CNAV_Eph_El: ", *a1);
  }
  else {
    EvLog_ABDS_CNAV_Eph_El(a1);
  }
  uint64_t v2 = *a1;
  if ((v2 - 64) <= 0xFFFFFFC0)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  unsigned int v3 = a1[1];
  if (v3 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SatH1 = %d >1, Out of range!");
    return 0;
  }
  unsigned int v4 = a1[2];
  if (v4 >= 4)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SV_type = %d >3, Out of range!");
    return 0;
  }
  unsigned int v5 = a1[3];
  if (v5 >= 7)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Fit_hours = %d >6, Out of range!");
    return 0;
  }
  unsigned int v6 = *((_DWORD *)a1 + 1);
  if (v6 >> 7 >= 0x627)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: sSOW = %d >201599, Out of range!");
    return 0;
  }
  unsigned int v7 = *((unsigned __int16 *)a1 + 4);
  if (v7 >= 0x2000)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Weeuint64_t k = %d >=8191, Out of range!");
    return 0;
  }
  unsigned int v8 = *((unsigned __int16 *)a1 + 5);
  if (v8 >= 0x83B) {
    goto LABEL_18;
  }
  unsigned int v9 = *((unsigned __int16 *)a1 + 6);
  if (v9 >= 0x83B)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: toc = %d >2106, Out of range!");
    return 0;
  }
  unsigned int v12 = *((unsigned __int16 *)a1 + 7);
  if (v12 >= 0x83B)
  {
LABEL_18:
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: toe = %d >2106, Out of range!");
    return 0;
  }
  int v13 = *((_DWORD *)a1 + 4);
  if ((v13 - 0x2000000) >> 26 != 63)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: delta_A = %d <-2^25 or >=2^25, Out of range!");
    return 0;
  }
  int v14 = *((_DWORD *)a1 + 5);
  if ((v14 - 0x1000000) >> 25 != 127)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: A_dot = %d <-2^24 or >=2^24, Out of range!");
    return 0;
  }
  int v15 = *((_DWORD *)a1 + 6);
  if ((v15 - 0x2000000) >> 26 != 63)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dN = %d <-2^25 or >=2^25, Out of range!");
    return 0;
  }
  int v16 = *((_DWORD *)a1 + 7);
  if ((v16 - 0x400000) >> 23 != 511)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dN_dot = %d <-2^22 or >=2^22, Out of range!");
    return 0;
  }
  uint64_t v17 = *((void *)a1 + 4);
  if ((unint64_t)(v17 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: M0 = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  unint64_t v18 = *((void *)a1 + 5);
  if (v18 >> 33)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: e = %d >=2^33, Out of range!");
    return 0;
  }
  double v19 = (double)v18 * 5.82076609e-11;
  if (v19 < 0.0)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v19 > dbl_263D81800[(v2 - 6) < 0x35])
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  uint64_t v20 = *((void *)a1 + 6);
  if ((unint64_t)(v20 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: w = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  uint64_t v21 = *((void *)a1 + 7);
  if ((unint64_t)(v21 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega0 = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  uint64_t v22 = *((void *)a1 + 8);
  if ((unint64_t)(v22 - 0x100000000) <= 0xFFFFFFFDFFFFFFFFLL)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: i0 = %d <-2^32 or >=2^32, Out of range!");
    return 0;
  }
  int v23 = *((_DWORD *)a1 + 18);
  if ((v23 - 0x40000) <= 0xFFF7FFFF)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega_dot = %d <-2^18 or >=2^18, Out of range!");
    return 0;
  }
  double v24 = (double)v23 * 1.78578867e-13;
  if (v24 < -0.00000198862815)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega_dot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v24 > 0.000000314159265)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Omega_dot = %e > %e, Unrealistic value!");
    return 0;
  }
  int v25 = *((__int16 *)a1 + 38);
  if (((v25 - 0x4000) & 0x8000) == 0)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: i_dot = %d <-2^14 or >=2^14, Out of range!");
    return 0;
  }
  int v26 = *((_DWORD *)a1 + 21);
  if ((v26 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Crs = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  int v27 = *((_DWORD *)a1 + 22);
  if ((v27 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Crc = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  int v28 = *((_DWORD *)a1 + 23);
  if ((v28 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Cus = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  int v29 = *((_DWORD *)a1 + 24);
  if ((v29 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: Cuc = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  int v30 = *((_DWORD *)a1 + 25);
  if ((v30 - 0x1000000) >> 25 != 127)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: af0 = %d <-2^24 or >=2^24, Out of range!");
    return 0;
  }
  int v56 = *((_DWORD *)a1 + 26);
  if ((v56 - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: af1 = %d <-2^21 or >=2^21, Out of range!");
    return 0;
  }
  __int16 v55 = *((_WORD *)a1 + 54);
  if ((unsigned __int16)((unsigned __int16)(v55 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: af2 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  unsigned int v54 = a1[112];
  if (v54 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Ocb = %d >31, Out of range!");
    return 0;
  }
  unsigned int v53 = a1[113];
  if (v53 >= 8)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Oc1 = %d >7, Out of range!");
    return 0;
  }
  unsigned int v52 = a1[114];
  if (v52 >= 8)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Oc2 = %d >7, Out of range!");
    return 0;
  }
  unsigned int v51 = a1[115];
  if (v51 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: SISA_Oce = %d >31, Out of range!");
    return 0;
  }
  __int16 v50 = *((_WORD *)a1 + 58);
  if ((unsigned __int16)((unsigned __int16)(v50 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: TGD_B1C_p = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  __int16 v49 = *((_WORD *)a1 + 59);
  if ((unsigned __int16)((unsigned __int16)(v49 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: TGD_B2a_p = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  __int16 v48 = *((_WORD *)a1 + 60);
  if ((unsigned __int16)((unsigned __int16)(v48 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: ISC_B1C_d = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  __int16 v47 = *((_WORD *)a1 + 61);
  if ((unsigned __int16)((unsigned __int16)(v47 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: ISC_B2a_d = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  unsigned int v46 = a1[124];
  if (v46 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dif_B1C = %d >1, Out of range!");
    return 0;
  }
  unsigned int v45 = a1[125];
  if (v45 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: sif_B1C = %d >1, Out of range!");
    return 0;
  }
  unsigned int v44 = a1[126];
  if (v44 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: aif_B1C = %d >1, Out of range!");
    return 0;
  }
  unsigned int v43 = a1[127];
  if (v43 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: dif_B2a = %d >1, Out of range!");
    return 0;
  }
  unsigned int v42 = a1[128];
  if (v42 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: sif_B2a = %d >1, Out of range!");
    return 0;
  }
  unsigned int v41 = a1[129];
  if (v41 >= 2)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: aif_B2a = %d >1, Out of range!");
    return 0;
  }
  unsigned __int8 v40 = a1[130];
  if ((v40 - 16) <= 0xDFu)
  {
    EvCrt_v("GN_ABDS_Set_CNAV_Eph_El: FAILED: URAI = %d <-16 or >15, Out of range!");
    return 0;
  }
  uint64_t v38 = v2 - 1;
  uint64_t v39 = p_NA;
  uint64_t v31 = p_NA + 152 * ((int)v2 - 1);
  *(unsigned char *)(v31 + 10120) = v2;
  *(unsigned char *)(v31 + 10121) = v3;
  *(unsigned char *)(v31 + 10122) = v4;
  if (v5 >= 4) {
    char v32 = 4;
  }
  else {
    char v32 = v5;
  }
  *(unsigned char *)(v31 + 10123) = v32;
  *(_DWORD *)(v31 + 10124) = v6;
  *(_WORD *)(v31 + 10128) = v7;
  *(_DWORD *)(v31 + 10132) = v8;
  *(_DWORD *)(v31 + 10136) = v9;
  *(_DWORD *)(v31 + 10140) = v12;
  *(_DWORD *)(v31 + 10144) = v13;
  *(_DWORD *)(v31 + 10148) = v14;
  *(_DWORD *)(v31 + 10152) = v15;
  *(_DWORD *)(v31 + 10156) = v16;
  *(void *)(v31 + 10160) = v17;
  *(void *)(v31 + 10168) = v18;
  *(void *)(v31 + 10176) = v20;
  *(void *)(v31 + 10184) = v21;
  *(void *)(v31 + 10192) = v22;
  *(_DWORD *)(v31 + 10200) = v23;
  *(_WORD *)(v31 + 10204) = v25;
  *(_DWORD *)(v31 + 10206) = *(_DWORD *)(a1 + 78);
  *(_DWORD *)(v31 + 10212) = v26;
  *(_DWORD *)(v31 + 10216) = v27;
  *(_DWORD *)(v31 + 10220) = v28;
  *(_DWORD *)(v31 + 10224) = v29;
  *(_DWORD *)(v31 + 10228) = v30;
  *(_DWORD *)(v31 + 10232) = v56;
  if (a1[132]) {
    int v33 = 5;
  }
  else {
    int v33 = 3;
  }
  __int16 v34 = *((_WORD *)a1 + 55);
  unsigned __int8 v35 = a1[131];
  *(_DWORD *)(v31 + 10116) = v33;
  *(_WORD *)(v31 + 10236) = v55;
  *(_WORD *)(v31 + 10238) = v34;
  *(unsigned char *)(v31 + 10240) = v54;
  *(unsigned char *)(v31 + 10241) = v53;
  *(unsigned char *)(v31 + 10242) = v52;
  *(unsigned char *)(v31 + 10243) = v51;
  *(_WORD *)(v31 + 10244) = v50;
  *(_WORD *)(v31 + 10246) = v49;
  *(_WORD *)(v31 + 10248) = v48;
  *(_WORD *)(v31 + 10250) = v47;
  *(unsigned char *)(v31 + 10252) = v46;
  *(unsigned char *)(v31 + 10253) = v45;
  *(unsigned char *)(v31 + 10254) = v44;
  *(unsigned char *)(v31 + 10255) = v43;
  *(unsigned char *)(v31 + 10256) = v42;
  *(unsigned char *)(v31 + 10257) = v41;
  *(unsigned char *)(v31 + 10258) = v40;
  *(unsigned char *)(v31 + 10259) = v35;
  *(unsigned char *)(v39 + v38 + 221) = 1;
  uint64_t v36 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v36 + 16) && *(int *)v36 >= 3) {
    int v37 = (int)*(double *)(v36 + 40) + 604800 * *(__int16 *)(v36 + 32);
  }
  else {
    int v37 = 0;
  }
  *(_DWORD *)(v31 + 10112) = v37;
  uint64_t v10 = 1;
  Debug_Log_BDS_Eph(1, v31 + 10112);
  return v10;
}

uint64_t GN_ABDS_Set_Alm_El(unsigned __int8 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_Alm")) {
    return 0;
  }
  EvLog_d("GN_ABDS_Set_Alm: ", a1[1]);
  uint64_t v2 = a1[1];
  if ((v2 - 64) <= 0xFFFFFFC0)
  {
    EvCrt_v("GN_ABDS_Set_Alm: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  __int16 v3 = *((_WORD *)a1 + 15);
  if ((unsigned __int16)((unsigned __int16)(v3 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: af0 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  __int16 v4 = *((_WORD *)a1 + 16);
  if ((unsigned __int16)((unsigned __int16)(v4 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: af1 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  double v5 = dbl_263D81800[(v2 - 6) < 0x35];
  if ((v2 - 59) >= 0xFFFFFFCB) {
    double v5 = 0.1;
  }
  double v6 = 7000.0;
  if ((v2 - 59) < 0xFFFFFFCB) {
    double v6 = dbl_263D81810[(v2 - 6) < 0x35];
  }
  unsigned int v7 = *((_DWORD *)a1 + 1);
  double v8 = (double)v7 * 0.00048828125;
  if (v8 < dbl_263D81820[(v2 - 59) < 0xFFFFFFCB])
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: sqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v6)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: sqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  unsigned int v9 = *((_DWORD *)a1 + 2);
  double v10 = (double)v9 * 0.000000476837158;
  if (v10 < 0.0)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v5)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  int v11 = *((_DWORD *)a1 + 5);
  if ((v11 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: Omega0 = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  int v12 = *((_DWORD *)a1 + 6);
  double v13 = (double)v12 * 1.14290475e-11;
  if (v13 < -0.00000198862815)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v13 > 0.000000314159265)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  int v14 = *((_DWORD *)a1 + 3);
  if ((v14 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: w = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  int v15 = *((_DWORD *)a1 + 4);
  if ((v15 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: M0 = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  unsigned int v16 = *((unsigned __int16 *)a1 + 17);
  if (v16 == 0xFFFF)
  {
    if (v2 <= 0x1E)
    {
      EvCrt_v("GN_ABDS_Set_Alm: FAILED: SVHealth Unknown for SV %d in range 1..30, Out of range!");
      return 0;
    }
  }
  else if (v16 >= 0x200)
  {
    EvCrt_v("GN_ABDS_Set_Alm: FAILED: SVHealth = %x > 0x1FF or < 0xFFFF, Out of range!");
    return 0;
  }
  uint64_t v19 = v2 - 1;
  uint64_t v20 = p_NA;
  uint64_t v21 = p_NA + 44 * ((int)v2 - 1) + 19688;
  *(_WORD *)(v21 + 8) = *a1;
  *(unsigned char *)(v21 + 10) = v2;
  *(unsigned char *)(v21 + 11) = a1[2];
  *(_DWORD *)(v21 + 12) = v7;
  *(_DWORD *)(v21 + 16) = v9;
  *(_DWORD *)(v21 + 20) = v14;
  *(_DWORD *)(v21 + 24) = v15;
  *(_DWORD *)(v21 + 28) = v11;
  *(_DWORD *)(v21 + 32) = v12;
  *(_WORD *)(v21 + 36) = *((_WORD *)a1 + 14);
  *(_WORD *)(v21 + 38) = v3;
  *(_WORD *)(v21 + 40) = v4;
  BOOL v22 = v16 != 0xFFFF && (int)Decode_BDS_Alm_Health_Sts(v16) > 3;
  *(unsigned char *)(v20 + 44 * (int)v19 + 19730) = v22;
  *(unsigned char *)(v20 + v19 + 284) = 1;
  uint64_t v23 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v23 + 16) && *(int *)v23 >= 3) {
    int v24 = (int)*(double *)(v23 + 40) + 604800 * *(__int16 *)(v23 + 32);
  }
  else {
    int v24 = 0;
  }
  int v25 = (int *)(v20 + 44 * (int)v19 + 19688);
  if (a1[36]) {
    int v26 = 5;
  }
  else {
    int v26 = 3;
  }
  *int v25 = v24;
  *(_DWORD *)(v20 + 44 * (int)v19 + 19692) = v26;
  uint64_t v17 = 1;
  Debug_Log_BDS_Alm(1, (uint64_t)v25);
  return v17;
}

uint64_t GN_ABDS_Set_BGTO(int a1, unsigned __int16 *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_ABDS_Set_BGTO");
  if (result)
  {
    int v6 = *((_DWORD *)a2 + 2);
    if ((v6 - 0x10000) <= 0xFFFDFFFF)
    {
      EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0 = %d < -2^16 or >= 2^16, Out of range!");
      return 0;
    }
    int v7 = (__int16)a2[6];
    if (v7 != 0x7FFF && (unsigned __int16)((unsigned __int16)(a2[6] - 0x2000) >> 14) <= 2u)
    {
      EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A1 = %d < -2^13 or >= 2^13, Out of range!");
      return 0;
    }
    uint64_t v9 = *(void *)(p_api + 48);
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (*(unsigned char *)(v9 + 16))
    {
      if (*(int *)v9 < 3) {
        int v10 = 0;
      }
      else {
        int v10 = (int)*(double *)(v9 + 40) + 604800 * *(__int16 *)(v9 + 32);
      }
    }
    unsigned __int16 v11 = *a2;
    int v12 = *((_DWORD *)a2 + 1);
    char v13 = *((unsigned char *)a2 + 14);
    unsigned __int16 v14 = a2[8];
    if (*((unsigned char *)a2 + 18)) {
      int v15 = 5;
    }
    else {
      int v15 = 3;
    }
    uint64_t v16 = p_NA;
    uint64_t v17 = p_NA + 10060;
    if (a1)
    {
      *(_DWORD *)(p_NA + 10052) = v10;
      *(_DWORD *)(v16 + 10056) = v15;
      *(_WORD *)uint64_t v17 = v11;
      *(_DWORD *)(v16 + 10064) = v12;
      *(_DWORD *)(v16 + 10068) = v6;
      *(_WORD *)(v17 + 12) = v7;
      *(unsigned char *)(v17 + 14) = v13;
      *(_WORD *)(v17 + 16) = v14;
      *(unsigned char *)(v16 + 219) = 1;
    }
    else
    {
      *(_DWORD *)(p_NA + 10080) = v10;
      *(_DWORD *)(v16 + 10084) = v15;
      *(_WORD *)(v17 + 28) = v11;
      *(_DWORD *)(v16 + 10092) = v12;
      *(_DWORD *)(v16 + 10096) = v6;
      *(_WORD *)(v17 + 40) = v7;
      *(unsigned char *)(v17 + 42) = v13;
      *(_WORD *)(v17 + 44) = v14;
      *(unsigned char *)(v16 + 220) = 1;
    }
    EvLog_nd("GN_ABDS_Set_BGTO: ", 7, v5, *a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2), (__int16)a2[6], *((char *)a2 + 14), (__int16)a2[8], *((unsigned __int8 *)a2 + 18), v18);
    return 1;
  }
  return result;
}

uint64_t stphiu(uint64_t result, unsigned int a2, const double *a3, const unsigned __int8 *a4, int a5, const unsigned __int8 *a6, const unsigned __int8 *a7)
{
  if (a2 >= 2 && a5)
  {
    int v7 = 0;
    uint64_t v8 = result - 8;
    uint64_t v9 = a3 - 1;
    int v10 = a4 - 1;
    unsigned __int16 v11 = a6 - 1;
    int v12 = a7 - 1;
    if ((a5 + 1) > 2) {
      uint64_t v13 = (a5 + 1);
    }
    else {
      uint64_t v13 = 2;
    }
    uint64_t v14 = 1;
    do
    {
      int v15 = v12[v14];
      if (v12[v14])
      {
        uint64_t result = v11[v14];
        int v16 = 1;
        int v17 = v7;
        do
        {
          double v18 = v9[++v17];
          uint64_t v19 = v10[v17];
          unsigned int v20 = (v19 - 1) * v19;
          unsigned int v21 = result + (v20 >> 1);
          *(double *)(v8 + 8 * v21) = v18 + *(double *)(v8 + 8 * v21);
          if (v19 < a2)
          {
            unsigned int v22 = (v20 >> 1) + v19;
            do
            {
              v21 += v19;
              v22 += v19;
              *(double *)(v8 + 8 * v21) = *(double *)(v8 + 8 * v21) + v18 * *(double *)(v8 + 8 * v22);
              ++v19;
            }
            while (a2 != v19);
          }
        }
        while (v16++ != v15);
      }
      v7 += v15;
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

void Debug_Log_Platform_Calibration_GLONASS_Group_Delays(double *a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    uint64_t v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *uint64_t v2 = v3;
      uint64_t v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v2 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v3 = str_9[v4++];
    }
    while (v4 != 6);
    for (uint64_t i = 0; i != 14; ++i)
    {
      int v6 = (unsigned char *)g_CB_GDbg++;
      *int v6 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
        g_CB_GDbg = qword_26AA2DC78;
      }
      double v7 = a1[i] * 1000.0;
      if (v7 <= 0.0) {
        double v8 = -0.5;
      }
      else {
        double v8 = 0.5;
      }
      double v9 = v7 + v8;
      if (v9 <= 2147483650.0)
      {
        if (v9 >= -2147483650.0) {
          unsigned int v10 = (int)v9;
        }
        else {
          unsigned int v10 = 0x80000000;
        }
      }
      else
      {
        unsigned int v10 = 0x7FFFFFFF;
      }
      sprintf_4f((uint64_t)&g_CB_GDbg, v10, 4);
    }
    unsigned __int16 v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_Platform_Calibration_L5_Group_Delay(double a1)
{
  if (g_Logging_Cfg)
  {
    int v1 = (char *)g_CB_GDbg;
    char v2 = 36;
    uint64_t v3 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v1 + 1);
      *int v1 = v2;
      int v1 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        int v1 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v2 = str_1_1[v3++];
    }
    while (v3 != 7);
    double v4 = a1 * 1000.0;
    double v5 = -0.5;
    if (v4 > 0.0) {
      double v5 = 0.5;
    }
    double v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0) {
        unsigned int v7 = (int)v6;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    sprintf_4f((uint64_t)&g_CB_GDbg, v7, 4);
    double v8 = (unsigned char *)g_CB_GDbg++;
    *double v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ApxTime(unsigned __int16 *a1)
{
  if (g_Logging_Cfg)
  {
    char v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    uint64_t v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *char v2 = v3;
      char v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v2 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v3 = str_2_1[v4++];
    }
    while (v4 != 6);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *char v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    double v9 = (unsigned char *)g_CB_GDbg++;
    *double v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = a1[3];
    unsigned __int16 v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unsigned int v12 = a1[4];
    uint64_t v13 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unsigned int v14 = a1[5];
    int v15 = (unsigned char *)g_CB_GDbg++;
    *int v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v14);
    unsigned int v16 = a1[6];
    int v17 = (unsigned char *)g_CB_GDbg++;
    *int v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v16);
    unsigned int v18 = *((_DWORD *)a1 + 4);
    uint64_t v19 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v18);
    unsigned int v20 = *((_DWORD *)a1 + 5);
    unsigned int v21 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v21 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v20);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_NonVol(char a1, uint64_t a2)
{
  uint64_t v192 = *MEMORY[0x263EF8340];
  if (g_Logging_Cfg)
  {
    uint64_t v3 = 0;
    unsigned int v4 = *(_DWORD *)(a2 + 4);
    unsigned int v5 = *(_DWORD *)(a2 + 33416);
    uint64_t v6 = *(void *)(a2 + 33192);
    unsigned int v8 = *(_DWORD *)(a2 + 33200);
    unsigned int v7 = *(_DWORD *)(a2 + 33204);
    unsigned int v9 = *(_DWORD *)(a2 + 33208);
    char v10 = 36;
    unsigned __int16 v11 = (char *)g_CB_GDbg;
    do
    {
      g_CB_GDbg = (uint64_t)(v11 + 1);
      char *v11 = v10;
      unsigned __int16 v11 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned __int16 v11 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v10 = aNg[++v3];
    }
    while (v3 != 4);
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v13 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unsigned int v14 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v4);
    int v15 = (unsigned char *)g_CB_GDbg++;
    *int v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    int v17 = (unsigned char *)g_CB_GDbg++;
    *int v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    uint64_t v19 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
    if (a1)
    {
      int v190 = 0;
      char v191 = 0;
      memset(&v189[8], 0, 65);
      __int16 v188 = 0;
      memset(v187, 0, sizeof(v187));
      long long v180 = 0u;
      memset(v181, 0, 99);
      memset(v186, 0, 44);
      memset(v185, 0, sizeof(v185));
      memset(v179, 0, sizeof(v179));
      signed int v21 = 1;
      long long v178 = 0uLL;
      do
      {
        if (Core_Load_GPS_Eph(v21, (uint64_t)&v180) && (int)v180 >= 1)
        {
          *(void *)long long v189 = v180;
          v189[8] = BYTE8(v180);
          *(_WORD *)&v189[9] = *(_WORD *)((char *)&v180 + 9);
          unsigned int v22 = 21;
          uint64_t v23 = 11;
          int v24 = (char *)v181 + 8;
          do
          {
            int v25 = &v189[v23];
            *int v25 = *v24;
            *(_WORD *)(v25 + 1) = *(_WORD *)(v24 + 1);
            v24 += 4;
            --v22;
            v23 += 3;
          }
          while (v22 > 1);
          *(_WORD *)&v189[71] = WORD6(v181[5]);
          int v190 = *(_DWORD *)((char *)&v181[5] + 14);
          char v191 = BYTE2(v181[6]);
          Debug_Log_GPS_Eph(0, v21, (uint64_t)v189);
        }
        ++v21;
      }
      while (v21 != 33);
      for (signed int i = 1; i != 33; ++i)
      {
        if (Core_Load_GPS_Alm(i, v186) && *(int *)v186 >= 1)
        {
          *(_DWORD *)unsigned int v187 = *(_DWORD *)v186;
          *(_DWORD *)&v187[4] = *(_DWORD *)&v186[4];
          *(_WORD *)&v187[8] = *(_WORD *)&v186[10];
          unsigned int v27 = 9;
          uint64_t v28 = 10;
          unint64_t v29 = (unint64_t)v186 | 0xC;
          do
          {
            int v30 = &v187[v28];
            *int v30 = *(unsigned char *)v29;
            *(_WORD *)(v30 + 1) = *(_WORD *)(v29 + 1);
            v29 += 4;
            --v27;
            v28 += 3;
          }
          while (v27 > 1);
          Debug_Log_GPS_Alm(0, i, (uint64_t)v187);
        }
      }
      if (Core_Load_GPS_Health(v185)) {
        Debug_Log_GNSS_Health(1, (unsigned __int8 *)v185);
      }
      if (Core_Load_GPS_UTC((uint64_t)v179) && SLODWORD(v179[0]) >= 1) {
        Debug_Log_GPS_UTC(0, (uint64_t)v179);
      }
      if (Core_Load_GPS_Klob(&v178) && (int)v178 >= 1) {
        Debug_Log_GPS_Klob(0, (uint64_t)&v178);
      }
      int v190 = 0;
      char v191 = 0;
      memset(&v189[8], 0, 65);
      __int16 v188 = 0;
      memset(v187, 0, sizeof(v187));
      long long v180 = 0u;
      memset(v181, 0, 99);
      memset(v186, 0, 44);
      *(_WORD *)&v185[8] = 0;
      signed int v31 = 193;
      *(void *)unsigned int v185 = 0;
      do
      {
        if (Core_Load_QZSS_Eph(v31, (uint64_t)&v180) && (int)v180 >= 1)
        {
          *(void *)long long v189 = v180;
          v189[8] = BYTE8(v180);
          *(_WORD *)&v189[9] = *(_WORD *)((char *)&v180 + 9);
          unsigned int v32 = 21;
          uint64_t v33 = 11;
          __int16 v34 = (char *)v181 + 8;
          do
          {
            unsigned __int8 v35 = &v189[v33];
            *unsigned __int8 v35 = *v34;
            *(_WORD *)(v35 + 1) = *(_WORD *)(v34 + 1);
            v34 += 4;
            --v32;
            v33 += 3;
          }
          while (v32 > 1);
          *(_WORD *)&v189[71] = WORD6(v181[5]);
          int v190 = *(_DWORD *)((char *)&v181[5] + 14);
          char v191 = BYTE2(v181[6]);
          Debug_Log_GPS_Eph(0, v31, (uint64_t)v189);
        }
        ++v31;
      }
      while (v31 != 203);
      for (signed int j = 193; j != 203; ++j)
      {
        if (Core_Load_QZSS_Alm(j, v186) && *(int *)v186 >= 1)
        {
          *(_DWORD *)unsigned int v187 = *(_DWORD *)v186;
          *(_DWORD *)&v187[4] = *(_DWORD *)&v186[4];
          *(_WORD *)&v187[8] = *(_WORD *)&v186[10];
          unsigned int v37 = 9;
          uint64_t v38 = 10;
          unint64_t v39 = (unint64_t)v186 | 0xC;
          do
          {
            unsigned __int8 v40 = &v187[v38];
            *unsigned __int8 v40 = *(unsigned char *)v39;
            *(_WORD *)(v40 + 1) = *(_WORD *)(v39 + 1);
            v39 += 4;
            --v37;
            v38 += 3;
          }
          while (v37 > 1);
          Debug_Log_GPS_Alm(0, j, (uint64_t)v187);
        }
      }
      if (Core_Load_QZSS_Health(v185)) {
        Debug_Log_GNSS_Health(3, (unsigned __int8 *)v185);
      }
      memset(v181, 0, 46);
      long long v180 = 0u;
      *(void *)long long v189 = 0;
      *(_WORD *)&v189[8] = 0;
      memset(&v189[12], 0, 24);
      memset(v187, 0, 24);
      *(void *)uint64_t v186 = 0;
      *(_WORD *)&v186[8] = 0;
      *(_DWORD *)&v186[12] = 0;
      v186[16] = 0;
      *(_DWORD *)&v186[20] = 0;
      unsigned int v41 = 1;
      v186[24] = 0;
      do
      {
        if (Core_Load_GLON_Eph(v41, &v180) && (int)v180 >= 1) {
          Debug_Log_GLO_Eph(0, v41, (uint64_t)&v180);
        }
        ++v41;
      }
      while (v41 != 25);
      for (unsigned int k = 1; k != 25; ++k)
      {
        if (Core_Load_GLON_Alm(k, (uint64_t)v189) && *(int *)v189 >= 1) {
          Debug_Log_GLO_Alm(0, k, (uint64_t)v189);
        }
      }
      if (Core_Load_GLON_Health(v187)) {
        Debug_Log_GNSS_Health(2, (unsigned __int8 *)v187);
      }
      if (Core_Load_GLON_Clk1(v186))
      {
        unsigned int v43 = *(_DWORD *)v186;
        if (*(int *)v186 >= 1)
        {
          if (g_Logging_Cfg)
          {
            sprintf_NA_x_header(0, "C-");
            unsigned int v44 = (unsigned char *)g_CB_GDbg++;
            *unsigned int v44 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v43);
            unsigned int v45 = *(unsigned __int16 *)&v186[8];
            unsigned int v46 = (unsigned char *)g_CB_GDbg++;
            unsigned char *v46 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v45);
            unsigned int v47 = *(_DWORD *)&v186[12];
            __int16 v48 = (unsigned char *)g_CB_GDbg++;
            *__int16 v48 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v47);
            unsigned int v49 = v186[16];
            __int16 v50 = (unsigned char *)g_CB_GDbg++;
            unsigned char *v50 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v49);
            unsigned int v51 = *(_DWORD *)&v186[20];
            unsigned int v52 = (unsigned char *)g_CB_GDbg++;
            *unsigned int v52 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v51);
            unsigned int v53 = v186[24];
            unsigned int v54 = (unsigned char *)g_CB_GDbg++;
            unsigned char *v54 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v53);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v186[4]);
            __int16 v55 = (unsigned char *)g_CB_GDbg++;
            *__int16 v55 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            GNB_Debug_Flush_Check();
          }
        }
      }
      memset(v181, 0, 72);
      long long v180 = 0u;
      memset(v189, 0, 35);
      memset(v186, 0, 36);
      *(void *)&v187[6] = 0;
      unsigned __int8 v56 = 1;
      *(void *)unsigned int v187 = 0;
      do
      {
        unsigned int v57 = v56;
        if (Core_Load_GAL_Eph(v56, (uint64_t)&v180) && (int)v180 >= 1) {
          Debug_Log_GAL_Eph(0, (uint64_t)&v180);
        }
        ++v56;
      }
      while (v57 < 0x24);
      unsigned __int8 v58 = 1;
      do
      {
        unsigned int v59 = v58;
        if (Core_Load_GAL_Alm(v58, (uint64_t)v189) && *(int *)v189 >= 1) {
          Debug_Log_GAL_Alm(0, (uint64_t)v189);
        }
        ++v58;
      }
      while (v59 < 0x24);
      if (Core_Load_GAL_Health(v186)) {
        Debug_Log_GNSS_Health(5, (unsigned __int8 *)v186);
      }
      if (Core_Load_GAL_GGTO(v187))
      {
        unsigned int v60 = *(_DWORD *)v187;
        if (*(int *)v187 >= 1)
        {
          if (g_Logging_Cfg)
          {
            sprintf_NA_x_header(0, "OE");
            uint64_t v61 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v61 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v60);
            unsigned int v62 = *(__int16 *)&v187[8];
            uint64_t v63 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v63 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v62);
            unsigned int v64 = *(__int16 *)&v187[10];
            uint64_t v65 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v65 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v64);
            unsigned int v66 = v187[12];
            double v67 = (unsigned char *)g_CB_GDbg++;
            *double v67 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v66);
            unsigned int v68 = v187[13];
            uint64_t v69 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v69 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v68);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v187[4]);
            int v70 = (unsigned char *)g_CB_GDbg++;
            *int v70 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            GNB_Debug_Flush_Check();
          }
        }
      }
      long long v180 = 0uLL;
      LOWORD(v181[0]) = 0;
      memset((char *)v181 + 4, 0, 64);
      *(_OWORD *)((char *)&v181[4] + 2) = 0u;
      memset((char *)&v181[5] + 4, 0, 48);
      memset(v186, 0, 43);
      unsigned __int8 v71 = 1;
      memset(v189, 0, 63);
      do
      {
        unsigned int v72 = v71;
        if (Core_Load_BDS_Eph(v71, (uint64_t)&v180) && (int)v180 >= 1) {
          Debug_Log_BDS_Eph(0, (uint64_t)&v180);
        }
        ++v71;
      }
      while (v72 < 0x3F);
      unsigned __int8 v73 = 1;
      do
      {
        unsigned int v74 = v73;
        if (Core_Load_BDS_Alm(v73, v186) && *(int *)v186 >= 1) {
          Debug_Log_BDS_Alm(0, (uint64_t)v186);
        }
        ++v73;
      }
      while (v74 < 0x3F);
      if (Core_Load_BDS_Health(v189)) {
        Debug_Log_GNSS_Health(4, (unsigned __int8 *)v189);
      }
      *(void *)unsigned int v187 = 0;
      *(_WORD *)&v187[8] = 0;
      *(_WORD *)&v187[24] = 0;
      *(void *)&v187[12] = 0;
      *(_DWORD *)&v187[19] = 0;
      *(void *)unsigned int v185 = 0;
      *(_WORD *)&v185[8] = 0;
      *(_WORD *)&v185[24] = 0;
      *(void *)&v185[12] = 0;
      *(_DWORD *)&v185[19] = 0;
      if (Core_Load_BDS_BGTO(v187, v185))
      {
        if (*(int *)v187 >= 1) {
          Debug_Log_BDS_BGTO((uint64_t)v187, 1);
        }
        if (*(int *)v185 >= 1) {
          Debug_Log_BDS_BGTO((uint64_t)v185, 2);
        }
      }
      long long v180 = 0u;
      memset(v181, 0, 60);
      *(_DWORD *)&v189[12] = 0;
      *(_WORD *)&v189[16] = 0;
      *(_DWORD *)&v189[20] = 0;
      *(_WORD *)&v189[24] = 0;
      *(void *)long long v189 = 0;
      *(_DWORD *)&v189[7] = 0;
      memset(&v189[28], 0, 21);
      *(void *)&v187[6] = 0;
      *(_DWORD *)&v186[14] = 0;
      *(void *)uint64_t v186 = 0;
      *(void *)&v186[5] = 0;
      unsigned __int8 v75 = 1;
      *(void *)unsigned int v187 = 0;
      do
      {
        unsigned int v76 = v75;
        if (Core_Load_NVIC_Eph(v75, &v180) && (int)v180 >= 1) {
          Debug_Log_NVC_Eph(0, (uint64_t)&v180);
        }
        ++v75;
      }
      while (v76 < 0xE);
      unsigned __int8 v77 = 1;
      do
      {
        unsigned int v78 = v77;
        if (Core_Load_NVIC_Alm(v77, (uint64_t)v189) && *(int *)v189 >= 1) {
          Debug_Log_NVC_Alm(0, (uint64_t)v189);
        }
        ++v77;
      }
      while (v78 < 0xE);
      if (Core_Load_NVIC_Health(v187)) {
        Debug_Log_GNSS_Health(6, (unsigned __int8 *)v187);
      }
      if (Core_Load_NVIC_NGTO((uint64_t)v186))
      {
        unsigned int v79 = *(_DWORD *)v186;
        if (*(int *)v186 >= 1)
        {
          if (g_Logging_Cfg)
          {
            sprintf_NA_x_header(0, "ON");
            unsigned int v80 = (unsigned char *)g_CB_GDbg++;
            *unsigned int v80 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v79);
            unsigned int v81 = *(__int16 *)&v186[8];
            double v82 = (unsigned char *)g_CB_GDbg++;
            *double v82 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v81);
            unsigned int v83 = *(__int16 *)&v186[10];
            uint64_t v84 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v84 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v83);
            unsigned int v85 = v186[12];
            uint64_t v86 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v86 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v85);
            unsigned int v87 = *(unsigned __int16 *)&v186[14];
            int v88 = (unsigned char *)g_CB_GDbg++;
            *int v88 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v87);
            unsigned int v89 = *(unsigned __int16 *)&v186[16];
            uint64_t v90 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v90 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_2d(&g_CB_GDbg, v89);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v186[4]);
            unsigned int v91 = (unsigned char *)g_CB_GDbg++;
            *unsigned int v91 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            GNB_Debug_Flush_Check();
          }
        }
      }
      DWORD2(v180) = 0;
      *(void *)&long long v180 = 0;
      unsigned int v92 = 120;
      *(_DWORD *)long long v189 = 0;
      do
      {
        if (Core_Load_SBAS_Apx(v92, (int *)v189, (int *)&v180))
        {
          unsigned int v93 = *(_DWORD *)v189;
          if (*(int *)v189 >= 1 && g_Logging_Cfg != 0)
          {
            sprintf_NA_A_header(0, 83);
            BOOL v95 = (unsigned char *)g_CB_GDbg++;
            *BOOL v95 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_3d(&g_CB_GDbg, v92);
            int v96 = (unsigned char *)g_CB_GDbg++;
            *int v96 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_10d(&g_CB_GDbg, v93);
            unsigned int v97 = v180;
            double v98 = (unsigned char *)g_CB_GDbg++;
            *double v98 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_9d(&g_CB_GDbg, v97);
            unsigned int v99 = DWORD1(v180);
            double v100 = (unsigned char *)g_CB_GDbg++;
            *double v100 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_9d(&g_CB_GDbg, v99);
            unsigned int v101 = DWORD2(v180);
            double v102 = (unsigned char *)g_CB_GDbg++;
            *double v102 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            sprintf_8d(&g_CB_GDbg, v101);
            int v103 = (unsigned char *)g_CB_GDbg++;
            *int v103 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
              g_CB_GDbg = qword_26AA2DC78;
            }
            GNB_Debug_Flush_Check();
          }
        }
        ++v92;
      }
      while (v92 != 159);
      *(_DWORD *)long long v189 = 0;
      *(void *)&long long v180 = 0;
      if (Core_Load_Clk_Drift((int *)v189, (double *)&v180) && g_Logging_Cfg)
      {
        uint64_t v104 = 0;
        double v105 = *(double *)&v180;
        unsigned int v106 = *(_DWORD *)v189;
        char v107 = 36;
        unsigned int v108 = (char *)g_CB_GDbg;
        do
        {
          g_CB_GDbg = (uint64_t)(v108 + 1);
          *unsigned int v108 = v107;
          unsigned int v108 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            unsigned int v108 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v107 = aNd[++v104];
        }
        while (v104 != 4);
        g_CB_GDbg = (uint64_t)(v108 + 1);
        *unsigned int v108 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        sprintf_2d(&g_CB_GDbg, v106);
        int v109 = (unsigned char *)g_CB_GDbg++;
        *int v109 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        sprintf_11f9(&g_CB_GDbg, v105 * 1000000.0);
        double v110 = (unsigned char *)g_CB_GDbg++;
        unsigned char *v110 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        GNB_Debug_Flush_Check();
      }
      long long v183 = 0u;
      memset(v184, 0, sizeof(v184));
      long long v182 = 0u;
      long long v180 = 0u;
      memset(v181, 0, sizeof(v181));
      if (Core_Load_Not_Brd_SV(0, (uint64_t)&v180)) {
        Debug_Log_NV_Not_Brd_SV(0, (uint64_t)&v180);
      }
      long long v183 = 0u;
      memset(v184, 0, sizeof(v184));
      long long v182 = 0u;
      long long v180 = 0u;
      memset(v181, 0, sizeof(v181));
      if (Core_Load_Not_Brd_SV(1, (uint64_t)&v180)) {
        Debug_Log_NV_Not_Brd_SV(1, (uint64_t)&v180);
      }
      *(void *)long long v189 = 0;
      long long v183 = 0u;
      memset(v184, 0, sizeof(v184));
      long long v182 = 0u;
      long long v180 = 0u;
      memset(v181, 0, sizeof(v181));
      BOOL Inhib_EE = Core_Load_Inhib_EE((BOOL *)&v180, (uint64_t *)v189);
      int v112 = g_Logging_Cfg;
      if (Inhib_EE && g_Logging_Cfg)
      {
        uint64_t v113 = 0;
        unsigned int v114 = *(_DWORD *)v189;
        uint64_t v115 = (char *)g_CB_GDbg;
        char v116 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v115 + 1);
          *uint64_t v115 = v116;
          uint64_t v115 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            uint64_t v115 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v116 = aNi[++v113];
        }
        while (v113 != 4);
        uint64_t v117 = 0;
        unint64_t v118 = 0;
        uint64_t v119 = 1;
        do
        {
          if (*((unsigned char *)&v181[-1] + v117)) {
            uint64_t v120 = v119;
          }
          else {
            uint64_t v120 = 0;
          }
          v118 |= v120;
          v119 *= 2;
          ++v117;
        }
        while (v117 != 32);
        uint64_t v121 = 0;
        unint64_t v122 = 0;
        uint64_t v123 = 1;
        do
        {
          if (*((unsigned char *)&v181[1] + v121)) {
            uint64_t v124 = v123;
          }
          else {
            uint64_t v124 = 0;
          }
          v122 |= v124;
          v123 *= 2;
          ++v121;
        }
        while (v121 != 24);
        uint64_t v125 = 0;
        unint64_t v126 = 0;
        uint64_t v127 = 1;
        do
        {
          if (*((unsigned char *)&v181[8] + v125 + 11)) {
            uint64_t v128 = v127;
          }
          else {
            uint64_t v128 = 0;
          }
          v126 |= v128;
          v127 *= 2;
          ++v125;
        }
        while (v125 != 10);
        uint64_t v129 = 0;
        unint64_t v130 = 0;
        uint64_t v131 = 1;
        do
        {
          if (v184[v129 - 13]) {
            uint64_t v132 = v131;
          }
          else {
            uint64_t v132 = 0;
          }
          v130 |= v132;
          v131 *= 2;
          ++v129;
        }
        while (v129 != 39);
        uint64_t v133 = 0;
        unint64_t v134 = 0;
        uint64_t v135 = 1;
        do
        {
          if (*((unsigned char *)&v181[4] + v133 + 12)) {
            uint64_t v136 = v135;
          }
          else {
            uint64_t v136 = 0;
          }
          v134 |= v136;
          v135 *= 2;
          ++v133;
        }
        while (v133 != 63);
        uint64_t v137 = 0;
        unint64_t v138 = 0;
        uint64_t v139 = 1;
        do
        {
          if (*((unsigned char *)&v181[2] + v137 + 8)) {
            uint64_t v140 = v139;
          }
          else {
            uint64_t v140 = 0;
          }
          v138 |= v140;
          v139 *= 2;
          ++v137;
        }
        while (v137 != 36);
        uint64_t v141 = 0;
        unint64_t v142 = 0;
        uint64_t v143 = 1;
        do
        {
          if (*((unsigned char *)&v182 + v141 + 5)) {
            uint64_t v144 = v143;
          }
          else {
            uint64_t v144 = 0;
          }
          v142 |= v144;
          v143 *= 2;
          ++v141;
        }
        while (v141 != 14);
        g_CB_GDbg = (uint64_t)(v115 + 1);
        *uint64_t v115 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        sprintf_2d(&g_CB_GDbg, v114);
        uint64_t v145 = 0;
        double v146 = (char *)g_CB_GDbg;
        char v147 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v146 + 1);
          char *v146 = v147;
          double v146 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            double v146 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v147 = aG[++v145];
        }
        while (v145 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v118);
        uint64_t v148 = 0;
        __int16 v149 = (char *)g_CB_GDbg;
        char v150 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v149 + 1);
          *__int16 v149 = v150;
          __int16 v149 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            __int16 v149 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v150 = aR[++v148];
        }
        while (v148 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v122);
        uint64_t v151 = 0;
        double v152 = (char *)g_CB_GDbg;
        char v153 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v152 + 1);
          *double v152 = v153;
          double v152 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            double v152 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v153 = aQ[++v151];
        }
        while (v151 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v126);
        uint64_t v154 = 0;
        __int16 v155 = (char *)g_CB_GDbg;
        char v156 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v155 + 1);
          char *v155 = v156;
          __int16 v155 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            __int16 v155 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v156 = aS[++v154];
        }
        while (v154 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v130);
        uint64_t v157 = 0;
        int v158 = (char *)g_CB_GDbg;
        char v159 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v158 + 1);
          *int v158 = v159;
          int v158 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            int v158 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v159 = aB[++v157];
        }
        while (v157 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v134);
        uint64_t v160 = 0;
        long long v161 = (char *)g_CB_GDbg;
        char v162 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v161 + 1);
          char *v161 = v162;
          long long v161 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            long long v161 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v162 = aE[++v160];
        }
        while (v160 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v138);
        uint64_t v163 = 0;
        long long v164 = (char *)g_CB_GDbg;
        char v165 = 32;
        do
        {
          g_CB_GDbg = (uint64_t)(v164 + 1);
          *long long v164 = v165;
          long long v164 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            long long v164 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v165 = aN[++v163];
        }
        while (v163 != 4);
        sprintf_1X((char **)&g_CB_GDbg, v142);
        unsigned __int8 v166 = (unsigned char *)g_CB_GDbg++;
        unsigned char *v166 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        GNB_Debug_Flush_Check();
        int v112 = g_Logging_Cfg;
      }
      *(_DWORD *)long long v189 = 0;
      *(void *)&long long v180 = 0;
      if (Core_Load_Clk_L5L1((int *)v189, (double *)&v180) && v112)
      {
        uint64_t v167 = 0;
        double v168 = *(double *)&v180;
        unsigned int v169 = *(_DWORD *)v189;
        char v170 = 36;
        long long v171 = (char *)g_CB_GDbg;
        do
        {
          g_CB_GDbg = (uint64_t)(v171 + 1);
          char *v171 = v170;
          long long v171 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
          {
            long long v171 = (char *)qword_26AA2DC78;
            g_CB_GDbg = qword_26AA2DC78;
          }
          char v170 = aN55[++v167];
        }
        while (v167 != 4);
        g_CB_GDbg = (uint64_t)(v171 + 1);
        char *v171 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        sprintf_2d(&g_CB_GDbg, v169);
        long long v172 = (unsigned char *)g_CB_GDbg++;
        *long long v172 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        double v173 = v168 * 299792458.0 * 1000.0;
        double v174 = -0.5;
        if (v173 > 0.0) {
          double v174 = 0.5;
        }
        double v175 = v173 + v174;
        if (v175 <= 2147483650.0)
        {
          if (v175 >= -2147483650.0) {
            unsigned int v176 = (int)v175;
          }
          else {
            unsigned int v176 = 0x80000000;
          }
        }
        else
        {
          unsigned int v176 = 0x7FFFFFFF;
        }
        sprintf_6f((uint64_t)&g_CB_GDbg, v176, 4);
        int v177 = (unsigned char *)g_CB_GDbg++;
        unsigned char *v177 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
          g_CB_GDbg = qword_26AA2DC78;
        }
        GNB_Debug_Flush_Check();
      }
      Debug_Log_NV_End();
      if (*(void *)&dword_26AA2DC70 != g_CB_GDbg) {
        GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
      }
    }
    else
    {
      Debug_Log_NV_End();
      if (*(void *)&dword_26AA2DC70 != g_CB_GDbg)
      {
        GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
      }
    }
  }
}

void Debug_Log_NV_End(void)
{
  if (g_Logging_Cfg)
  {
    uint64_t v0 = (char *)g_CB_GDbg;
    char v1 = 36;
    uint64_t v2 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v0 + 1);
      *uint64_t v0 = v1;
      uint64_t v0 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v0 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v1 = aN_0[v2++];
    }
    while (v2 != 6);
    g_CB_GDbg = (uint64_t)(v0 + 1);
    *uint64_t v0 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_Eph(uint64_t a1, signed int a2, uint64_t a3)
{
  if (g_Logging_Cfg)
  {
    if (a2 <= 192) {
      char v5 = 71;
    }
    else {
      char v5 = 81;
    }
    sprintf_NA_E_header(a1, v5);
    uint64_t v6 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, a2);
    unsigned int v7 = *(_DWORD *)a3;
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    for (uint64_t i = 0; i != 63; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 8 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    unsigned int v11 = *(unsigned __int8 *)(a3 + 71);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a3 + 72));
    unsigned int v13 = *(__int16 *)(a3 + 74);
    unsigned int v14 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v13);
    unsigned int v15 = *(__int16 *)(a3 + 76);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v15);
    unsigned int v17 = *(char *)(a3 + 78);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v17);
    uint64_t v19 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v19 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_Alm(uint64_t a1, signed int a2, uint64_t a3)
{
  if (g_Logging_Cfg)
  {
    if (a2 <= 192) {
      char v5 = 71;
    }
    else {
      char v5 = 81;
    }
    sprintf_NA_A_header(a1, v5);
    uint64_t v6 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, a2);
    unsigned int v7 = *(_DWORD *)a3;
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(__int16 *)(a3 + 8);
    char v10 = (unsigned char *)g_CB_GDbg++;
    *char v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    for (uint64_t i = 0; i != 24; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 10 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GNSS_Health(int a1, unsigned __int8 *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (g_Logging_Cfg)
  {
    sprintf_NA_x_header(0, "H");
    unsigned int v4 = 32;
    int v5 = 1;
    char v6 = 71;
    switch(a1)
    {
      case 1:
        break;
      case 2:
        unsigned int v4 = 24;
        char v6 = 82;
        break;
      case 3:
        unsigned int v4 = 10;
        char v6 = 81;
        break;
      case 4:
        unsigned int v4 = 63;
        char v6 = 66;
        break;
      case 5:
        unsigned int v4 = 36;
        char v6 = 69;
        break;
      case 6:
        unsigned int v4 = 14;
        char v6 = 78;
        break;
      default:
        int v5 = 0;
        unsigned int v4 = 0;
        char v6 = 88;
        break;
    }
    unsigned int v7 = (char *)g_CB_GDbg++;
    *unsigned int v7 = v6;
    unsigned int v8 = (unsigned char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      unsigned int v8 = (unsigned char *)qword_26AA2DC78;
    }
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *unsigned int v8 = 32;
    unsigned int v9 = (unsigned char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
    {
      unsigned int v9 = (unsigned char *)qword_26AA2DC78;
      g_CB_GDbg = qword_26AA2DC78;
    }
    if (v5)
    {
      if (v4 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v4;
      }
      do
      {
        unsigned int v11 = *a2++;
        sprintf1da(&g_CB_GDbg, v11, v12, 0, 0);
        --v10;
      }
      while (v10);
      unsigned int v9 = (unsigned char *)g_CB_GDbg;
    }
    g_CB_GDbg = (uint64_t)(v9 + 1);
    *unsigned int v9 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_UTC(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_x_header(a1, "UG");
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    char v6 = (unsigned char *)g_CB_GDbg++;
    *char v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
    uint64_t v10 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int8 *)(a2 + 17);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(char *)(a2 + 18);
    unsigned int v14 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int8 *)(a2 + 19);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(unsigned __int8 *)(a2 + 20);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(char *)(a2 + 21);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    signed int v21 = (unsigned char *)g_CB_GDbg++;
    *signed int v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_Klob(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_x_header(a1, "KG");
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(char *)(a2 + 8);
    char v6 = (unsigned char *)g_CB_GDbg++;
    *char v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(char *)(a2 + 9);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(char *)(a2 + 10);
    uint64_t v10 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(char *)(a2 + 11);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(char *)(a2 + 12);
    unsigned int v14 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(char *)(a2 + 13);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(char *)(a2 + 14);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(char *)(a2 + 15);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    signed int v21 = (unsigned char *)g_CB_GDbg++;
    *signed int v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GLO_Eph(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(a1, 82);
    unsigned int v5 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v6 = *(_DWORD *)a3;
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(_DWORD *)(a3 + 8);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(unsigned __int16 *)(a3 + 60);
    unsigned int v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    for (uint64_t i = 12; i != 60; i += 4)
    {
      unsigned int v13 = (unsigned char *)g_CB_GDbg++;
      *unsigned int v13 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
        g_CB_GDbg = qword_26AA2DC78;
      }
      unint64_t v14 = *(unsigned int *)(a3 + i);
      v16[0] = hexTABLE[v14 >> 28];
      v16[1] = hexTABLE[(v14 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v14, v16, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    unsigned int v15 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GLO_Alm(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(a1, 82);
    unsigned int v5 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v6 = *(_DWORD *)a3;
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(unsigned __int16 *)(a3 + 8);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    for (uint64_t i = 0; i != 24; i += 4)
    {
      unsigned int v11 = (unsigned char *)g_CB_GDbg++;
      unsigned char *v11 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
        g_CB_GDbg = qword_26AA2DC78;
      }
      unint64_t v12 = *(unsigned int *)(a3 + 12 + i);
      v14[0] = hexTABLE[v12 >> 28];
      v14[1] = hexTABLE[(v12 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v12, v14, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GAL_Eph(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(a1, 69);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v3);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(__int16 *)(a2 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 14);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int8 *)(a2 + 15);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v11);
    unsigned int v13 = *(unsigned __int16 *)(a2 + 16);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int16 *)(a2 + 18);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v15);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 20));
    unsigned int v17 = *(_DWORD *)(a2 + 24);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10u(&g_CB_GDbg, v17);
    unsigned int v19 = *(_DWORD *)(a2 + 28);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10u(&g_CB_GDbg, v19);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 32));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 36));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 40));
    unsigned int v21 = *(_DWORD *)(a2 + 44);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v21);
    unsigned int v23 = *(__int16 *)(a2 + 48);
    int v24 = (unsigned char *)g_CB_GDbg++;
    *int v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v23);
    unsigned int v25 = *(__int16 *)(a2 + 50);
    int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v25);
    unsigned int v27 = *(__int16 *)(a2 + 52);
    uint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v27);
    unsigned int v29 = *(__int16 *)(a2 + 54);
    int v30 = (unsigned char *)g_CB_GDbg++;
    *int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v29);
    unsigned int v31 = *(__int16 *)(a2 + 56);
    unsigned int v32 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v31);
    unsigned int v33 = *(__int16 *)(a2 + 58);
    __int16 v34 = (unsigned char *)g_CB_GDbg++;
    *__int16 v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v33);
    unsigned int v35 = *(__int16 *)(a2 + 60);
    uint64_t v36 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v35);
    unsigned int v37 = *(__int16 *)(a2 + 62);
    uint64_t v38 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v37);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 64));
    unsigned int v39 = *(_DWORD *)(a2 + 68);
    unsigned __int8 v40 = (unsigned char *)g_CB_GDbg++;
    *unsigned __int8 v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v39);
    unsigned int v41 = *(__int16 *)(a2 + 72);
    unsigned int v42 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v41);
    unsigned int v43 = *(unsigned __int16 *)(a2 + 74);
    unsigned int v44 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v43);
    unsigned int v45 = *(__int16 *)(a2 + 76);
    unsigned int v46 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v45);
    unsigned int v47 = *(__int16 *)(a2 + 78);
    __int16 v48 = (unsigned char *)g_CB_GDbg++;
    *__int16 v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v47);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 80));
    unsigned int v49 = *(unsigned __int8 *)(a2 + 81);
    __int16 v50 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v49);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 82));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 83));
    unsigned int v51 = *(unsigned __int8 *)(a2 + 84);
    unsigned int v52 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v51);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 85));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 86));
    unsigned int v53 = *(_DWORD *)(a2 + 4);
    unsigned int v54 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v53);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 87));
    __int16 v55 = (unsigned char *)g_CB_GDbg++;
    *__int16 v55 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GAL_Alm(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(a1, 69);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v3);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(unsigned __int8 *)(a2 + 9);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(__int16 *)(a2 + 10);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int16 *)(a2 + 12);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v11);
    unsigned int v13 = *(__int16 *)(a2 + 14);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int16 *)(a2 + 16);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v15);
    unsigned int v17 = *(__int16 *)(a2 + 18);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v17);
    unsigned int v19 = *(__int16 *)(a2 + 20);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v19);
    unsigned int v21 = *(__int16 *)(a2 + 22);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v21);
    unsigned int v23 = *(__int16 *)(a2 + 24);
    int v24 = (unsigned char *)g_CB_GDbg++;
    *int v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v23);
    unsigned int v25 = *(__int16 *)(a2 + 26);
    int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v25);
    unsigned int v27 = *(__int16 *)(a2 + 28);
    uint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v27);
    unsigned int v29 = *(__int16 *)(a2 + 30);
    int v30 = (unsigned char *)g_CB_GDbg++;
    *int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v29);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 32));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 33));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 34));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    unsigned int v31 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v31 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_BDS_Eph(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(a1, 66);
    uint64_t v3 = 0;
    unsigned int v4 = (char *)g_CB_GDbg;
    char v5 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *unsigned int v4 = v5;
      unsigned int v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v4 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v5 = aC_1[++v3];
    }
    while (v3 != 2);
    unsigned int v6 = *(_DWORD *)a2;
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v6);
    unsigned int v7 = *(unsigned __int8 *)(a2 + 8);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 9));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 10));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 11));
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v9);
    unsigned int v11 = *(__int16 *)(a2 + 16);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v11);
    unsigned int v13 = *(_DWORD *)(a2 + 20);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v13);
    unsigned int v15 = *(_DWORD *)(a2 + 24);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a2 + 28);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v17);
    unsigned int v19 = *(_DWORD *)(a2 + 32);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_9d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a2 + 36);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v21);
    unsigned int v23 = *(_DWORD *)(a2 + 40);
    int v24 = (unsigned char *)g_CB_GDbg++;
    *int v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v23);
    unsigned int v25 = *(_DWORD *)(a2 + 44);
    int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v25);
    uint64_t v27 = *(void *)(a2 + 48);
    uint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_11D(&g_CB_GDbg, v27);
    sprintf_sp10U(&g_CB_GDbg, *(void *)(a2 + 56));
    uint64_t v29 = *(void *)(a2 + 64);
    int v30 = (unsigned char *)g_CB_GDbg++;
    *int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_11D(&g_CB_GDbg, v29);
    uint64_t v31 = *(void *)(a2 + 72);
    unsigned int v32 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_11D(&g_CB_GDbg, v31);
    uint64_t v33 = *(void *)(a2 + 80);
    __int16 v34 = (unsigned char *)g_CB_GDbg++;
    *__int16 v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_11D(&g_CB_GDbg, v33);
    unsigned int v35 = *(_DWORD *)(a2 + 88);
    uint64_t v36 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_7d(&g_CB_GDbg, v35);
    unsigned int v37 = *(__int16 *)(a2 + 92);
    uint64_t v38 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v37);
    unsigned int v39 = *(__int16 *)(a2 + 94);
    unsigned __int8 v40 = (unsigned char *)g_CB_GDbg++;
    *unsigned __int8 v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v39);
    unsigned int v41 = *(__int16 *)(a2 + 96);
    unsigned int v42 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v41);
    unsigned int v43 = *(_DWORD *)(a2 + 100);
    unsigned int v44 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v43);
    unsigned int v45 = *(_DWORD *)(a2 + 104);
    unsigned int v46 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v45);
    unsigned int v47 = *(_DWORD *)(a2 + 108);
    __int16 v48 = (unsigned char *)g_CB_GDbg++;
    *__int16 v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v47);
    unsigned int v49 = *(_DWORD *)(a2 + 112);
    __int16 v50 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v49);
    unsigned int v51 = *(_DWORD *)(a2 + 116);
    unsigned int v52 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_9d(&g_CB_GDbg, v51);
    unsigned int v53 = *(_DWORD *)(a2 + 120);
    unsigned int v54 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v53);
    unsigned int v55 = *(__int16 *)(a2 + 124);
    unsigned __int8 v56 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v56 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v55);
    unsigned int v57 = *(unsigned __int16 *)(a2 + 126);
    unsigned __int8 v58 = (unsigned char *)g_CB_GDbg++;
    *unsigned __int8 v58 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v57);
    unsigned int v59 = *(unsigned __int8 *)(a2 + 128);
    unsigned int v60 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v60 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v59);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 129));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 130));
    unsigned int v61 = *(unsigned __int8 *)(a2 + 131);
    unsigned int v62 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v62 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v61);
    unsigned int v63 = *(__int16 *)(a2 + 132);
    unsigned int v64 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v64 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v63);
    unsigned int v65 = *(__int16 *)(a2 + 134);
    unsigned int v66 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v66 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v65);
    unsigned int v67 = *(__int16 *)(a2 + 136);
    unsigned int v68 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v68 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v67);
    unsigned int v69 = *(__int16 *)(a2 + 138);
    int v70 = (unsigned char *)g_CB_GDbg++;
    *int v70 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v69);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 140));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 141));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 142));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 143));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 144));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 145));
    sprintf_sp1d(&g_CB_GDbg, *(char *)(a2 + 146));
    unsigned int v71 = *(char *)(a2 + 147);
    unsigned int v72 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v72 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v71);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    unsigned __int8 v73 = (unsigned char *)g_CB_GDbg++;
    *unsigned __int8 v73 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_BDS_Alm(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(a1, 66);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v3);
    unsigned int v5 = *(__int16 *)(a2 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v5);
    unsigned int v7 = *(unsigned __int8 *)(a2 + 10);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 11);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v9);
    unsigned int v11 = *(_DWORD *)(a2 + 12);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v11);
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v13);
    unsigned int v15 = *(_DWORD *)(a2 + 20);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a2 + 24);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v17);
    unsigned int v19 = *(_DWORD *)(a2 + 28);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a2 + 32);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_7d(&g_CB_GDbg, v21);
    unsigned int v23 = *(__int16 *)(a2 + 36);
    int v24 = (unsigned char *)g_CB_GDbg++;
    *int v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_7d(&g_CB_GDbg, v23);
    unsigned int v25 = *(__int16 *)(a2 + 38);
    int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v25);
    unsigned int v27 = *(__int16 *)(a2 + 40);
    uint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v27);
    unsigned int v29 = *(unsigned __int8 *)(a2 + 42);
    int v30 = (unsigned char *)g_CB_GDbg++;
    *int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v29);
    sprintf_sp1d(&g_CB_GDbg, 0);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    uint64_t v31 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v31 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_BDS_BGTO(uint64_t a1, int a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_x_header(0, "OB");
    unsigned int v4 = *(_DWORD *)a1;
    unsigned int v5 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v4);
    if (a2 == 2) {
      char v6 = 82;
    }
    else {
      char v6 = 88;
    }
    if (a2 == 1) {
      char v6 = 71;
    }
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    unsigned int v8 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      unsigned int v8 = (char *)qword_26AA2DC78;
    }
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *unsigned int v8 = v6;
    unsigned int v9 = (unsigned char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      unsigned int v9 = (unsigned char *)qword_26AA2DC78;
    }
    unsigned int v10 = *(unsigned __int16 *)(a1 + 8);
    g_CB_GDbg = (uint64_t)(v9 + 1);
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unsigned int v11 = *(_DWORD *)(a1 + 12);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(__int16 *)(a1 + 20);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(char *)(a1 + 22);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(__int16 *)(a1 + 24);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a1 + 4));
    unsigned int v21 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_NVC_Eph(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(a1, 78);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v3);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 8);
    char v6 = (unsigned char *)g_CB_GDbg++;
    *char v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 9));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 10));
    sprintf_sp1u(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 11));
    unsigned int v7 = *(unsigned __int8 *)(a2 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 13);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int16 *)(a2 + 14);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v11);
    unsigned int v13 = *(unsigned __int16 *)(a2 + 16);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int16 *)(a2 + 18);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a2 + 20);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_9d(&g_CB_GDbg, v17);
    unsigned int v19 = *(__int16 *)(a2 + 24);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v19);
    unsigned int v21 = *(char *)(a2 + 26);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v21);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 27));
    unsigned int v23 = *(__int16 *)(a2 + 28);
    int v24 = (unsigned char *)g_CB_GDbg++;
    *int v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v23);
    unsigned int v25 = *(__int16 *)(a2 + 30);
    int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v25);
    unsigned int v27 = *(_DWORD *)(a2 + 32);
    uint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10u(&g_CB_GDbg, v27);
    unsigned int v29 = *(_DWORD *)(a2 + 36);
    int v30 = (unsigned char *)g_CB_GDbg++;
    *int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10u(&g_CB_GDbg, v29);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 40));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 44));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 48));
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a2 + 52));
    unsigned int v31 = *(_DWORD *)(a2 + 56);
    unsigned int v32 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v31);
    unsigned int v33 = *(_DWORD *)(a2 + 60);
    __int16 v34 = (unsigned char *)g_CB_GDbg++;
    *__int16 v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v33);
    unsigned int v35 = *(__int16 *)(a2 + 64);
    uint64_t v36 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v35);
    unsigned int v37 = *(__int16 *)(a2 + 66);
    uint64_t v38 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v37);
    unsigned int v39 = *(__int16 *)(a2 + 68);
    unsigned __int8 v40 = (unsigned char *)g_CB_GDbg++;
    *unsigned __int8 v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v39);
    unsigned int v41 = *(__int16 *)(a2 + 70);
    unsigned int v42 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v41);
    unsigned int v43 = *(__int16 *)(a2 + 72);
    unsigned int v44 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v43);
    unsigned int v45 = *(__int16 *)(a2 + 74);
    unsigned int v46 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v45);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    unsigned int v47 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v47 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_NVC_Alm(uint64_t a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_A_header(a1, 78);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v3);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 8);
    char v6 = (unsigned char *)g_CB_GDbg++;
    *char v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 9));
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a2 + 10));
    unsigned int v7 = *(unsigned __int16 *)(a2 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int16 *)(a2 + 14);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int16 *)(a2 + 16);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v11);
    unsigned int v13 = *(_DWORD *)(a2 + 20);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v13);
    unsigned int v15 = *(__int16 *)(a2 + 24);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a2 + 28);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v17);
    unsigned int v19 = *(_DWORD *)(a2 + 32);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a2 + 36);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v21);
    unsigned int v23 = *(_DWORD *)(a2 + 40);
    int v24 = (unsigned char *)g_CB_GDbg++;
    *int v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v23);
    unsigned int v25 = *(__int16 *)(a2 + 44);
    int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v25);
    unsigned int v27 = *(__int16 *)(a2 + 46);
    uint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v27);
    unsigned int v29 = *(char *)(a2 + 48);
    int v30 = (unsigned char *)g_CB_GDbg++;
    *int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v29);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    unsigned int v31 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v31 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_NV_Not_Brd_SV(int a1, uint64_t a2)
{
  if (g_Logging_Cfg)
  {
    unsigned int v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    uint64_t v5 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *unsigned int v3 = v4;
      unsigned int v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = aNb[v5++];
    }
    while (v5 != 6);
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 1;
    do
    {
      if (*(unsigned char *)(a2 + v6)) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      v7 |= v9;
      v8 *= 2;
      ++v6;
    }
    while (v6 != 32);
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 1;
    do
    {
      if (*(unsigned char *)(a2 + 32 + v10)) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      v11 |= v13;
      v12 *= 2;
      ++v10;
    }
    while (v10 != 24);
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 1;
    do
    {
      if (*(unsigned char *)(a2 + 155 + v14)) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      v15 |= v17;
      v16 *= 2;
      ++v14;
    }
    while (v14 != 10);
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    uint64_t v20 = 1;
    do
    {
      if (*(unsigned char *)(a2 + 179 + v18)) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      v19 |= v21;
      v20 *= 2;
      ++v18;
    }
    while (v18 != 39);
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    uint64_t v24 = 1;
    do
    {
      if (*(unsigned char *)(a2 + 92 + v22)) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      v23 |= v25;
      v24 *= 2;
      ++v22;
    }
    while (v22 != 63);
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 1;
    do
    {
      if (*(unsigned char *)(a2 + 56 + v26)) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      v27 |= v29;
      v28 *= 2;
      ++v26;
    }
    while (v26 != 36);
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    uint64_t v32 = a2 + 165;
    uint64_t v33 = 1;
    do
    {
      if (*(unsigned char *)(v32 + v30)) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 0;
      }
      v31 |= v34;
      v33 *= 2;
      ++v30;
    }
    while (v30 != 14);
    unsigned int v35 = "--";
    if (a1 == 1) {
      unsigned int v35 = "L5";
    }
    if (!a1) {
      unsigned int v35 = "L1";
    }
    char v36 = *v35;
    if (*v35)
    {
      unsigned int v37 = (unsigned __int8 *)(v35 + 1);
      do
      {
        g_CB_GDbg = (uint64_t)(v3 + 1);
        *unsigned int v3 = v36;
        unsigned int v3 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
        {
          unsigned int v3 = (char *)qword_26AA2DC78;
          g_CB_GDbg = qword_26AA2DC78;
        }
        int v38 = *v37++;
        char v36 = v38;
      }
      while (v38);
    }
    uint64_t v39 = 0;
    char v40 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *unsigned int v3 = v40;
      unsigned int v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v40 = aG[++v39];
    }
    while (v39 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v7);
    uint64_t v41 = 0;
    unsigned int v42 = (char *)g_CB_GDbg;
    char v43 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v42 + 1);
      *unsigned int v42 = v43;
      unsigned int v42 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v42 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v43 = aR[++v41];
    }
    while (v41 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v11);
    uint64_t v44 = 0;
    unsigned int v45 = (char *)g_CB_GDbg;
    char v46 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v45 + 1);
      char *v45 = v46;
      unsigned int v45 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v45 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v46 = aQ[++v44];
    }
    while (v44 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v15);
    uint64_t v47 = 0;
    __int16 v48 = (char *)g_CB_GDbg;
    char v49 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v48 + 1);
      *__int16 v48 = v49;
      __int16 v48 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        __int16 v48 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v49 = aS[++v47];
    }
    while (v47 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v19);
    uint64_t v50 = 0;
    unsigned int v51 = (char *)g_CB_GDbg;
    char v52 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v51 + 1);
      char *v51 = v52;
      unsigned int v51 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v51 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v52 = aB[++v50];
    }
    while (v50 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v23);
    uint64_t v53 = 0;
    unsigned int v54 = (char *)g_CB_GDbg;
    char v55 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v54 + 1);
      char *v54 = v55;
      unsigned int v54 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v54 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v55 = aE[++v53];
    }
    while (v53 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v27);
    uint64_t v56 = 0;
    unsigned int v57 = (char *)g_CB_GDbg;
    char v58 = 32;
    do
    {
      g_CB_GDbg = (uint64_t)(v57 + 1);
      char *v57 = v58;
      unsigned int v57 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v57 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v58 = aN[++v56];
    }
    while (v56 != 4);
    sprintf_1X((char **)&g_CB_GDbg, v31);
    unsigned int v59 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v59 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

uint64_t sprintf_NA_x_header(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v2 = 36;
  unsigned int v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    unsigned int v3 = (char *)qword_26AA2DC78;
  }
  if (result) {
    char v4 = 65;
  }
  else {
    char v4 = 78;
  }
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *unsigned int v3 = v4;
  uint64_t v5 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
  {
    uint64_t v5 = (unsigned char *)qword_26AA2DC78;
    g_CB_GDbg = qword_26AA2DC78;
  }
  char v6 = *a2;
  if (*a2)
  {
    unint64_t v7 = a2 + 1;
    do
    {
      g_CB_GDbg = (uint64_t)(v5 + 1);
      *uint64_t v5 = v6;
      uint64_t v5 = (unsigned char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v5 = (unsigned char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      int v8 = *v7++;
      char v6 = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sprintf_NA_E_header(uint64_t result, char a2)
{
  uint64_t v2 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v2 = 36;
  unsigned int v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    unsigned int v3 = (char *)qword_26AA2DC78;
  }
  if (result == 1) {
    char v4 = 65;
  }
  else {
    char v4 = 69;
  }
  if (!result) {
    char v4 = 78;
  }
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *unsigned int v3 = v4;
  uint64_t v5 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    uint64_t v5 = (unsigned char *)qword_26AA2DC78;
  }
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *uint64_t v5 = 69;
  char v6 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    char v6 = (unsigned char *)qword_26AA2DC78;
  }
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *char v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    g_CB_GDbg = qword_26AA2DC78;
  }
  return result;
}

void Debug_Log_SBA_Eph(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if (g_Logging_Cfg)
  {
    sprintf_NA_E_header(a1, 83);
    unint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, a2);
    int v8 = (unsigned char *)g_CB_GDbg++;
    *int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, a3);
    unsigned int v9 = *(_DWORD *)a4;
    uint64_t v10 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int16 *)(a4 + 8);
    uint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v11);
    unsigned int v13 = *(unsigned __int8 *)(a4 + 10);
    uint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(_DWORD *)(a4 + 12);
    uint64_t v16 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_5d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a4 + 16);
    uint64_t v18 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v17);
    unsigned int v19 = *(_DWORD *)(a4 + 20);
    uint64_t v20 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a4 + 24);
    uint64_t v22 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v21);
    unsigned int v23 = *(_DWORD *)(a4 + 28);
    uint64_t v24 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_10d(&g_CB_GDbg, v23);
    unsigned int v25 = *(_DWORD *)(a4 + 32);
    uint64_t v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v25);
    unsigned int v27 = *(_DWORD *)(a4 + 36);
    uint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v27);
    unsigned int v29 = *(_DWORD *)(a4 + 40);
    uint64_t v30 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v29);
    unsigned int v31 = *(_DWORD *)(a4 + 44);
    uint64_t v32 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v31);
    unsigned int v33 = *(_DWORD *)(a4 + 48);
    uint64_t v34 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v33);
    unsigned int v35 = *(_DWORD *)(a4 + 52);
    char v36 = (unsigned char *)g_CB_GDbg++;
    *char v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v35);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a4 + 4));
    unsigned int v37 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v37 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

uint64_t sprintf_NA_A_header(uint64_t result, char a2)
{
  uint64_t v2 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v2 = 36;
  unsigned int v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    unsigned int v3 = (char *)qword_26AA2DC78;
  }
  if (result) {
    char v4 = 65;
  }
  else {
    char v4 = 78;
  }
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *unsigned int v3 = v4;
  uint64_t v5 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    uint64_t v5 = (unsigned char *)qword_26AA2DC78;
  }
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *uint64_t v5 = 65;
  char v6 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    char v6 = (unsigned char *)qword_26AA2DC78;
  }
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *char v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    g_CB_GDbg = qword_26AA2DC78;
  }
  return result;
}

void Debug_Log_TM_FCP_OS_Time_ms(unsigned int a1, unsigned int a2)
{
  if (g_Logging_Cfg)
  {
    uint64_t v3 = 0;
    char v4 = (char *)g_CB_GDbg;
    char v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *char v4 = v5;
      char v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v4 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v5 = str_12_2[++v3];
    }
    while (v3 != 4);
    sprintf_sp1u(&g_CB_GDbg, a1);
    sprintf_sp1u(&g_CB_GDbg, a2);
    char v6 = (unsigned char *)g_CB_GDbg++;
    *char v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGPS_Ref_Time(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_13_1[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    unint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(unsigned __int16 *)(a1 + 10);
    unsigned int v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    uint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGPS_Ref_Pos(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    uint64_t v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *uint64_t v2 = v3;
      uint64_t v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v2 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v3 = str_16_1[v4++];
    }
    while (v4 != 6);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 24));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 32));
    unsigned int v5 = *(__int16 *)(a1 + 40);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 42);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 56));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a1 + 64));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a1 + 68));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)a1);
    unsigned int v9 = (char *)g_CB_GDbg;
    char v10 = 32;
    uint64_t v11 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v9 + 1);
      *unsigned int v9 = v10;
      unsigned int v9 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v9 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v10 = str_17_0[v11++];
    }
    while (v11 != 4);
    sprintf_1X((char **)&g_CB_GDbg, *(void *)(a1 + 72));
    uint64_t v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGNSS_Time_Model(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_18_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v5);
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v6);
    unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_4d(&g_CB_GDbg, v8);
    sprintf_sp11d(&g_CB_GDbg, *(_DWORD *)(a1 + 12));
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    uint64_t v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_8d(&g_CB_GDbg, v10);
    unsigned int v12 = *(char *)(a1 + 20);
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_3d(&g_CB_GDbg, v12);
    unsigned int v14 = *(char *)(a1 + 21);
    unsigned int v15 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v14);
    unsigned int v16 = *(_DWORD *)(a1 + 24);
    unsigned int v17 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v16);
    unsigned int v18 = *(__int16 *)(a1 + 22);
    unsigned int v19 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_6d(&g_CB_GDbg, v18);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a1 + 28));
    uint64_t v20 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGNSS_Not_Brd_SV_List(int a1, unsigned int a2, int *a3, unsigned __int8 *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!g_Logging_Cfg) {
    return;
  }
  unsigned int v8 = *(char **)&dword_26AA2DC70;
  if (*(void *)&dword_26AA2DC70 != g_CB_GDbg)
  {
    GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
    unsigned int v8 = (char *)g_CB_GDbg;
  }
  uint64_t v9 = 0;
  char v10 = 36;
  do
  {
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *unsigned int v8 = v10;
    unsigned int v8 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
    {
      unsigned int v8 = (char *)qword_26AA2DC78;
      g_CB_GDbg = qword_26AA2DC78;
    }
    char v10 = str_19_0[++v9];
  }
  while (v9 != 4);
  if (!a1)
  {
    uint64_t v11 = " L1 ";
LABEL_13:
    char v12 = *v11;
    if (*v11)
    {
      unsigned int v13 = (unsigned __int8 *)(v11 + 1);
      do
      {
        g_CB_GDbg = (uint64_t)(v8 + 1);
        *unsigned int v8 = v12;
        unsigned int v8 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
        {
          unsigned int v8 = (char *)qword_26AA2DC78;
          g_CB_GDbg = qword_26AA2DC78;
        }
        int v14 = *v13++;
        char v12 = v14;
      }
      while (v14);
    }
    goto LABEL_18;
  }
  if (a1 == 1)
  {
    uint64_t v11 = " L5 ";
    goto LABEL_13;
  }
LABEL_18:
  sprintf_sp1d(&g_CB_GDbg, a2);
  if (a2)
  {
    int v15 = 0;
    uint64_t v16 = a2;
    do
    {
      unsigned int v17 = (unsigned char *)g_CB_GDbg++;
      *unsigned int v17 = 32;
      unsigned int v18 = (unsigned char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v18 = (unsigned char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      int v19 = *a3;
      if (*a3 > 15)
      {
        if (v19 == 128) {
          int v20 = 78;
        }
        else {
          int v20 = v15;
        }
        if (v19 == 64) {
          int v20 = 66;
        }
        if (v19 == 32) {
          int v21 = 82;
        }
        else {
          int v21 = v15;
        }
        if (v19 == 16) {
          int v21 = 81;
        }
        if (v19 <= 63) {
          int v15 = v21;
        }
        else {
          int v15 = v20;
        }
      }
      else
      {
        switch(v19)
        {
          case 0:
            EvCrt_Illegal_switch_case("Debug_Log_AGNSS_Not_Brd_SV_List", 0x7DFu);
            unsigned int v18 = (unsigned char *)g_CB_GDbg;
            int v15 = 88;
            break;
          case 1:
            int v15 = 71;
            break;
          case 2:
            int v15 = 69;
            break;
          case 4:
            int v15 = 83;
            break;
          case 8:
            int v15 = 77;
            break;
          default:
            break;
        }
      }
      g_CB_GDbg = (uint64_t)(v18 + 1);
      *unsigned int v18 = v15;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
        g_CB_GDbg = qword_26AA2DC78;
      }
      unsigned int v22 = *a4++;
      sprintf1da(&g_CB_GDbg, v22, v24, 0, 0);
      ++a3;
      --v16;
    }
    while (v16);
  }
  unsigned int v23 = (unsigned char *)g_CB_GDbg++;
  *unsigned int v23 = 10;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    g_CB_GDbg = qword_26AA2DC78;
  }

  GNB_Debug_Flush_Check();
}

void Debug_Log_GPS_RTI_Bad_SV_List(int a1, unsigned int a2, int *a3, unsigned __int8 *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!g_Logging_Cfg) {
    return;
  }
  unsigned int v8 = *(char **)&dword_26AA2DC70;
  if (*(void *)&dword_26AA2DC70 != g_CB_GDbg)
  {
    GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
    unsigned int v8 = (char *)g_CB_GDbg;
  }
  uint64_t v9 = 0;
  char v10 = 36;
  do
  {
    g_CB_GDbg = (uint64_t)(v8 + 1);
    *unsigned int v8 = v10;
    unsigned int v8 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
    {
      unsigned int v8 = (char *)qword_26AA2DC78;
      g_CB_GDbg = qword_26AA2DC78;
    }
    char v10 = str_22[++v9];
  }
  while (v9 != 4);
  if (!a1)
  {
    uint64_t v11 = " L1 ";
LABEL_13:
    char v12 = *v11;
    if (*v11)
    {
      unsigned int v13 = (unsigned __int8 *)(v11 + 1);
      do
      {
        g_CB_GDbg = (uint64_t)(v8 + 1);
        *unsigned int v8 = v12;
        unsigned int v8 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
        {
          unsigned int v8 = (char *)qword_26AA2DC78;
          g_CB_GDbg = qword_26AA2DC78;
        }
        int v14 = *v13++;
        char v12 = v14;
      }
      while (v14);
    }
    goto LABEL_18;
  }
  if (a1 == 1)
  {
    uint64_t v11 = " L5 ";
    goto LABEL_13;
  }
LABEL_18:
  sprintf_sp1d(&g_CB_GDbg, a2);
  if (a2)
  {
    uint64_t v15 = a2;
    do
    {
      uint64_t v16 = (unsigned char *)g_CB_GDbg++;
      *uint64_t v16 = 32;
      unsigned int v17 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        unsigned int v17 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      int v18 = *a3;
      char v19 = 88;
      if (*a3 > 15)
      {
        if (v18 == 64) {
          char v19 = 78;
        }
        else {
          char v19 = 88;
        }
        if (v18 == 32) {
          char v19 = 66;
        }
        if (v18 == 16) {
          char v19 = 69;
        }
      }
      else
      {
        switch(v18)
        {
          case 0:
            EvCrt_Illegal_switch_case("Debug_Log_GPS_RTI_Bad_SV_List", 0x819u);
            unsigned int v17 = (char *)g_CB_GDbg;
            char v19 = 88;
            break;
          case 1:
            char v19 = 71;
            break;
          case 2:
            char v19 = 82;
            break;
          case 4:
            char v19 = 81;
            break;
          case 8:
            char v19 = 83;
            break;
          default:
            break;
        }
      }
      g_CB_GDbg = (uint64_t)(v17 + 1);
      *unsigned int v17 = v19;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
        g_CB_GDbg = qword_26AA2DC78;
      }
      unsigned int v20 = *a4++;
      sprintf1da(&g_CB_GDbg, v20, v22, 0, 0);
      ++a3;
      --v15;
    }
    while (v15);
  }
  int v21 = (unsigned char *)g_CB_GDbg++;
  *int v21 = 10;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    g_CB_GDbg = qword_26AA2DC78;
  }

  GNB_Debug_Flush_Check();
}

void Debug_Log_GPS_EE_Start_Time(unsigned int a1, unsigned int a2)
{
  if (g_Logging_Cfg)
  {
    uint64_t v3 = 0;
    char v4 = (char *)g_CB_GDbg;
    char v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *char v4 = v5;
      char v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v4 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v5 = str_23_0[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *char v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, a1);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGLON_ChanNum(unsigned int a1, unsigned int a2)
{
  if (g_Logging_Cfg)
  {
    uint64_t v3 = 0;
    char v4 = (char *)g_CB_GDbg;
    char v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *char v4 = v5;
      char v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v4 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v5 = str_24_0[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *char v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, a1);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_DMS(unsigned int *a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_25_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    char v10 = (unsigned char *)g_CB_GDbg++;
    *char v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_UAC(unsigned int *a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_26_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    char v10 = (unsigned char *)g_CB_GDbg++;
    *char v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_FIV(unsigned int *a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_27_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    char v10 = (unsigned char *)g_CB_GDbg++;
    *char v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_SES(unsigned int a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v1 = 0;
    uint64_t v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *uint64_t v2 = v3;
      uint64_t v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        uint64_t v2 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v3 = str_28_0[++v1];
    }
    while (v1 != 4);
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *uint64_t v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, a1);
    char v4 = (unsigned char *)g_CB_GDbg++;
    *char v4 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_Alt(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_29_1[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = *(_DWORD *)(a1 + 24);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_MapV(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_30_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    for (uint64_t i = 8; i != 32; i += 8)
    {
      unsigned int v7 = (unsigned char *)g_CB_GDbg++;
      *unsigned int v7 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
        g_CB_GDbg = qword_26AA2DC78;
      }
      sprintf_11f9(&g_CB_GDbg, *(double *)(a1 + i));
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + 32);
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 40));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 56));
    unsigned int v10 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unsigned int v12 = *(unsigned __int8 *)(a1 + 65);
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unsigned int v14 = *(unsigned __int8 *)(a1 + 66);
    uint64_t v15 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v14);
    unsigned int v16 = *(unsigned __int8 *)(a1 + 67);
    unsigned int v17 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v16);
    unsigned int v18 = *(unsigned __int8 *)(a1 + 68);
    char v19 = (unsigned char *)g_CB_GDbg++;
    *char v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v18);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_SpdC(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_31_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_AT_Vel(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_32_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_V_Vel(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_33[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_Heading(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_34[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_Tunnel_End_Point(uint64_t a1)
{
  if (g_Logging_Cfg)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
      {
        char v3 = (char *)qword_26AA2DC78;
        g_CB_GDbg = qword_26AA2DC78;
      }
      char v4 = str_35_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_11f9(&g_CB_GDbg, *(double *)(a1 + 8));
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_11f9(&g_CB_GDbg, *(double *)(a1 + 16));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 24));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 32));
    unsigned int v8 = *(__int16 *)(a1 + 40);
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(unsigned __int8 *)(a1 + 42);
    uint64_t v11 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 56));
    unsigned int v12 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
      g_CB_GDbg = qword_26AA2DC78;
    }
    GNB_Debug_Flush_Check();
  }
}

void SB_SBAS_PrePos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unsigned int v7 = (unsigned char *)(a5 + 5548);
  if (*(unsigned char *)(a3 + 25) && *(unsigned char *)a1)
  {
    memset(v54, 0, 39);
    memset(v53, 0, 39);
    if (*(_DWORD *)(a2 + 208) == *(_DWORD *)(a3 + 1764)) {
      *(unsigned char *)(a1 + 48) = 0;
    }
    int v44 = (int)*(double *)(a1 + 16) + 604800 * *(__int16 *)(a1 + 6);
    unsigned int v8 = (unsigned char *)(a5 + 8823);
    uint64_t v9 = (unsigned __int8 *)(a5 + 8696);
    *(_OWORD *)(a5 + 8696) = 0uLL;
    *(_OWORD *)(a5 + 8712) = 0uLL;
    *(_OWORD *)(a5 + 8728) = 0uLL;
    *(_OWORD *)(a5 + 8744) = 0uLL;
    *(_OWORD *)(a5 + 8760) = 0uLL;
    *(_OWORD *)(a5 + 8776) = 0uLL;
    *(_OWORD *)(a5 + 8792) = 0uLL;
    *(_OWORD *)(a5 + 8808) = 0uLL;
    *(_WORD *)(a5 + 8824) = 0;
    *(_DWORD *)(a5 + 5544) = 0;
    *unsigned int v7 = 0;
    *(void *)(a5 + 5549) = 0;
    *(void *)(a5 + 5569) = 0;
    int v10 = 9;
    do
    {
      *(_DWORD *)(a5 + 5565) = 0;
      *(void *)(a5 + 5557) = 0;
      *(void *)(a5 + 5577) = 0;
      *(void *)(a5 + 5582) = 0;
      --v10;
    }
    while (v10);
    uint64_t v11 = (unsigned __int8 *)(a5 + 8822);
    char v36 = (unsigned __int8 *)(a5 + 8705);
    *(void *)(a5 + 6186) = -1;
    *(void *)&long long v12 = -1;
    *((void *)&v12 + 1) = -1;
    *(_OWORD *)(a5 + 6171) = v12;
    *(_OWORD *)(a5 + 6155) = v12;
    uint64_t v37 = a2 + 136;
    uint64_t v38 = a1 + 24;
    uint64_t v13 = a4 + 34368;
    int v14 = 18;
    uint64_t v43 = a6;
    do
    {
      if (*v11 > 8u) {
        break;
      }
      if (*(_DWORD *)(v13 + 176) == 1)
      {
        uint64_t v15 = *(unsigned __int8 *)(v13 + 188);
        uint64_t v16 = (v15 - 120);
        if (v16 <= 0x26)
        {
          long long v50 = 0u;
          memset(v47, 0, 32);
          long long v17 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)&v47[8] = *(_OWORD *)v13;
          uint64_t v18 = v15 + 59;
          memset(&v47[40], 0, 40);
          __int16 v51 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          v52[0] = 0;
          *(_DWORD *)((char *)v52 + 3) = 0;
          DWORD2(v50) = 2;
          *(_OWORD *)&v47[24] = v17;
          *(_OWORD *)&v47[40] = *(_OWORD *)(v13 + 32);
          *(_OWORD *)&v47[56] = *(_OWORD *)(v13 + 96);
          char v19 = (unsigned char *)(a6 + v15 + 59);
          int v20 = *v19;
          if (v20 == 157 || v16 == *(unsigned __int8 *)(a1 + 48))
          {
            Comp_AzEl(v38, v37, (uint64_t)v47, v19, (_WORD *)(a6 + 2 * v18 + 218), (_DWORD *)(a6 + 40 * v18 + 656), (int *)(a6 + 40 * v18 + 9376));
            a6 = v43;
            LOBYTE(v20) = *(unsigned char *)(v43 + v18);
          }
          if ((char)v20 < 1)
          {
            ++v7[3277];
            int v21 = v53;
          }
          else
          {
            Comp_AA((uint64_t)v47, v20, *(__int16 *)(a6 + 2 * v18 + 218), a1, a2, a5, v15);
            a6 = v43;
            int v21 = v54;
          }
          v21[v16] = 1;
        }
      }
      v13 += 192;
      --v14;
    }
    while (v14);
    uint64_t v22 = 0;
    uint64_t v23 = 16536;
    uint64_t v24 = 7816;
    uint64_t v25 = 576;
    uint64_t v26 = a2;
    do
    {
      if (*v11 > 8u) {
        break;
      }
      int v46 = 0;
      *(void *)unsigned int v45 = 0;
      if (!v54[v22] && !v53[v22])
      {
        int v39 = v22 + 120;
        if (Core_Load_SBAS_Apx((v22 + 120), &v44, v45))
        {
          long long v50 = 0u;
          *(void *)uint64_t v47 = 0;
          __int16 v51 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          memset(&v47[32], 0, 48);
          v52[0] = 0;
          *(_DWORD *)((char *)v52 + 3) = 0;
          v27.i64[0] = v45[0];
          v27.i64[1] = v45[1];
          *(float64x2_t *)&v47[8] = vcvtq_f64_s64(v27);
          DWORD2(v50) = 2;
          *(double *)&v47[24] = (double)v46;
          uint64_t v28 = v43;
          int v29 = *(unsigned __int8 *)(v43 + v22 + 179);
          if (v29 == 157 || v22 == *(unsigned __int8 *)(a1 + 48))
          {
            Comp_AzEl(v38, v37, (uint64_t)v47, (unsigned char *)(v43 + v22 + 179), (_WORD *)(v43 + v25), (_DWORD *)(v43 + v24), (int *)(v43 + v23));
            uint64_t v28 = v43;
            LOBYTE(v29) = *(unsigned char *)(v43 + v22 + 179);
          }
          if ((char)v29 < 1)
          {
            v53[v22] = 1;
            ++v7[3277];
            uint64_t v26 = a2;
          }
          else
          {
            uint64_t v26 = a2;
            Comp_AA((uint64_t)v47, v29, *(__int16 *)(v28 + 2 * v22 + 576), a1, a2, a5, (v22 + 120));
            v54[v22] = 1;
          }
          if (*(_DWORD *)(a3 + 1764) == *(_DWORD *)(v26 + 208)) {
            EvLog_d("SBAS_PrePos: Loaded NV almanac ", v39);
          }
        }
        else if (*(_DWORD *)(a3 + 1764) == *(_DWORD *)(v26 + 208))
        {
          EvLog_d("SBAS_PrePos: Failed to load NV almanac ", v39);
        }
      }
      ++v22;
      v23 += 40;
      v24 += 40;
      v25 += 2;
    }
    while (v22 != 39);
    uint64_t v30 = 0;
    while (!*(unsigned char *)(*(void *)(a3 + 1064) + v30))
    {
      if (v53[v30]) {
        goto LABEL_39;
      }
LABEL_40:
      if (++v30 == 39)
      {
        for (uint64_t i = 0; i != 39; ++i)
        {
          if (!v54[i] && !v53[i]) {
            *(unsigned char *)(a5 + (*v8)++ + 8705) = i + 120;
          }
        }
        char v32 = *(unsigned char *)(a1 + 48);
        if ((v32 + 1) <= 0x26u) {
          char v33 = v32 + 1;
        }
        else {
          char v33 = 0;
        }
        *(unsigned char *)(a1 + 48) = v33;
        return;
      }
    }
    ++v7[3277];
    v53[v30] = 1;
LABEL_39:
    SB_SBAS_Remove_SV_in_List((v30 + 120), v7 + 3274, v9, 9u);
    SB_SBAS_Remove_SV_in_List((v30 + 120), v7 + 3275, v36, 0x27u);
    goto LABEL_40;
  }
  *(_DWORD *)(a5 + 8822) = 0;
  if (*(unsigned char *)(a3 + 25) && !*(unsigned char *)a1)
  {
    unsigned __int8 v34 = 0;
    for (uint64_t j = 0; j != 39; ++j)
    {
      if (!*(unsigned char *)(*(void *)(a3 + 1064) + j))
      {
        *(unsigned char *)(a5 + v34 + 8705) = j + 120;
        unsigned __int8 v34 = *(unsigned char *)(a5 + 8823) + 1;
        *(unsigned char *)(a5 + 8823) = v34;
      }
    }
  }
  memset((void *)(a6 + 179), 157, 18);

  memset_pattern16((void *)(a6 + 576), &unk_263D81550, 0x24uLL);
}

void Comp_AA(uint64_t a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v13 = *(_DWORD *)(a1 + 120);
  int v14 = (unsigned char *)(a6 + 8822);
  unsigned int v15 = *(unsigned __int8 *)(a6 + 8822) + 114;
  float64x2_t v41 = 0uLL;
  uint64_t v42 = 0;
  double v16 = Comp_SVrange_Sag_Corr(&v41, v40, (float64x2_t *)(a4 + 24), (float64x2_t *)(a1 + 8));
  uint64_t v17 = 0;
  int v18 = (int)((*(double *)(a5 + 96) - *(double *)(a1 + 56)) * 299792458.0);
  memset(v40, 0, sizeof(v40));
  do
  {
    v40[v17 + 2] = *(double *)(a1 + 48 + 8 * v17) - *(double *)(a5 + 48 + 8 * v17);
    unint64_t v19 = v17 + 3;
    --v17;
  }
  while (v19 > 1);
  uint64_t v20 = 0;
  int v21 = (int)v16;
  double v22 = 0.0;
  do
  {
    double v22 = v22 + v41.f64[v20] * v40[v20];
    ++v20;
  }
  while (v20 != 3);
  uint64_t v23 = a6 + 48 * v15;
  double v24 = (v22 + (*(double *)(a5 + 104) - *(double *)(a1 + 64)) * 299792458.0) / -0.190293673;
  double v25 = (double)(v18 + v21) / 299792458.0;
  double v26 = *(double *)(a5 + 128) - v25;
  *(_DWORD *)(v23 + 72) = *(_DWORD *)(a5 + 208);
  *(unsigned char *)(v23 + 76) = 1;
  *(unsigned char *)(v23 + 82) = a7;
  *(unsigned char *)(v23 + 80) = 7;
  *(unsigned char *)(v23 + 84) = v13 == 1;
  *(unsigned char *)(v23 + 85) = v13 == 2;
  *(_WORD *)(v23 + 86) = 256;
  *(_WORD *)(v23 + 88) = (int)(v25 * 2000.0 + 0.5);
  *(_DWORD *)(v23 + 90) = 200;
  double v27 = -0.5;
  if (v24 > 0.0) {
    double v27 = 0.5;
  }
  double v28 = v24 + v27;
  int v29 = (int)v28;
  if (v28 < -2147483650.0) {
    LOWORD(v29) = 0;
  }
  if (v28 <= 2147483650.0) {
    __int16 v30 = v29;
  }
  else {
    __int16 v30 = -1;
  }
  double v31 = v26 / 1.5;
  if (v26 / 1.5 <= 0.0) {
    double v31 = v26 / 1.5 + -1.0;
  }
  int v32 = (int)v31;
  uint64_t v33 = a6 + 48 * v15;
  *(_DWORD *)(v33 + 100) = (int)v31;
  uint64_t v34 = v33 + 100;
  *(_WORD *)(v34 - 6) = v30;
  *(unsigned char *)(v34 - 4) = -1;
  *(_WORD *)(v34 - 2) = 5115;
  double v35 = (v26 + (double)(int)v31 * -1.5) * 1023000.0;
  *(_DWORD *)(v34 + 4) = (int)v35;
  *(_WORD *)(v34 + 8) = vcvtd_n_s64_f64(v35 - (double)(int)v35, 0x10uLL);
  if (v32 < 0) {
    *(_DWORD *)uint64_t v34 = v32 + 403200;
  }
  uint64_t v36 = a6 + 48 * v15;
  *(_WORD *)(v36 + 110) = 0;
  *(unsigned char *)(v36 + 112) = -1;
  *(unsigned char *)(v36 + 113) = a2;
  unsigned int v37 = a3 >> 1;
  if (a3 >= 0x169) {
    LOBYTE(v37) = -1;
  }
  *(unsigned char *)(v36 + 114) = v37;
  *(unsigned char *)(v36 + 115) = 0;
  *(_WORD *)(v36 + 116) = 0;
  if (a7 >= 0x78)
  {
    if (v13 == 1) {
      char v38 = 1;
    }
    else {
      char v38 = 2;
    }
    *(unsigned char *)(a6 + a7 - 120 + 8783) += v38;
    uint64_t v39 = *v14;
    *(unsigned char *)(a6 + a7 + 59 + 5976) = v39 + 114;
    *(unsigned char *)(a6 + v39 + 8696) = a7;
    ++*v14;
  }
}

uint64_t SB_SBAS_Remove_SV_in_List(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (a2 && a3)
  {
    unsigned int v4 = *a2;
    if (*a2 && v4 <= a4)
    {
      unint64_t v6 = 0;
      char v7 = 0;
      do
      {
        while (a3[v6] == result)
        {
          a3[v6] = 0;
          unint64_t v8 = *a2;
          ++v6;
          char v7 = 1;
          LOBYTE(v4) = *a2;
          if (v6 >= v8) {
            goto LABEL_14;
          }
        }
        ++v6;
      }
      while (v6 < v4);
      LOBYTE(v8) = v4;
      if ((v7 & 1) == 0) {
        return result;
      }
LABEL_14:
      if ((_BYTE)v8)
      {
        unint64_t v9 = 0;
        LODWORD(v10) = 0;
        unsigned __int8 v11 = v8;
        do
        {
          if (a3[v9])
          {
            a3[v10] = a3[v9];
            LODWORD(v10) = v10 + 1;
            unsigned __int8 v11 = *a2;
          }
          ++v9;
        }
        while (v9 < v11);
      }
      else
      {
        unsigned __int8 v11 = 0;
        LODWORD(v10) = 0;
      }
      if (v10 < v11)
      {
        unint64_t v10 = v10;
        do
        {
          if (a3[v10])
          {
            a3[v10] = 0;
            unsigned __int8 v11 = *a2;
          }
          ++v10;
        }
        while (v10 < v11);
      }
      *a2 = v11 - 1;
    }
  }
  return result;
}

void GNSS_Write_GNB_Ctrl(char **a1)
{
  if (a1)
  {
    char v3 = *a1;
    uint64_t v2 = a1[1];
    if (v2 != *a1)
    {
      if (v2 > *a1) {
        char v3 = a1[3];
      }
      unsigned __int16 v4 = (_WORD)v3 - (_WORD)v2;
      unsigned int v5 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
      GNB_Debug_BlockMove(a1[1], v5);
      unint64_t v6 = &a1[1][v5];
      a1[1] = v6;
      if (v6 >= a1[3])
      {
        unint64_t v6 = a1[2];
        a1[1] = v6;
        if (v5 == v4)
        {
          unsigned int v7 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)(*(_WORD *)a1 - (_WORD)v6), v6);
          GNB_Debug_BlockMove(a1[1], v7);
          unint64_t v6 = &a1[1][v7];
          a1[1] = v6;
        }
      }
      if (v6 == *a1)
      {
        unint64_t v8 = a1[2];
        *a1 = v8;
        a1[1] = v8;
      }
    }
  }
}

uint64_t G5K_ME_Send_WakeUp(char **a1, uint64_t a2)
{
  unsigned __int16 v4 = (*a1)++;
  *unsigned __int16 v4 = 10;
  unsigned int v5 = *a1;
  if (*a1 >= a1[3]) {
    unsigned int v5 = a1[2];
  }
  *a1 = v5 + 1;
  *unsigned int v5 = 35;
  unint64_t v6 = *a1;
  if (*a1 >= a1[3]) {
    unint64_t v6 = a1[2];
  }
  uint64_t v7 = 0;
  char v8 = 87;
  unint64_t v9 = v6;
  do
  {
    *a1 = v9 + 1;
    *unint64_t v9 = v8;
    unint64_t v9 = *a1;
    if (*a1 >= a1[3])
    {
      unint64_t v9 = a1[2];
      *a1 = v9;
    }
    char v8 = str_10[++v7];
  }
  while (v7 != 4);
  uint64_t v10 = mach_continuous_time();
  sprintf_sp1u(a1, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10));
  unsigned __int8 v11 = (*a1)++;
  char *v11 = 32;
  long long v12 = *a1;
  if (*a1 >= a1[3]) {
    long long v12 = a1[2];
  }
  for (int i = 0; i != 10; ++i)
  {
    char v14 = 91;
    uint64_t v15 = 1u;
    do
    {
      *a1 = v12 + 1;
      char *v12 = v14;
      long long v12 = *a1;
      if (*a1 >= a1[3])
      {
        long long v12 = a1[2];
        *a1 = v12;
      }
      char v14 = str_1_2[v15++];
    }
    while (v15 != 10);
  }
  *a1 = v12 + 1;
  char *v12 = 32;
  double v16 = *a1;
  unint64_t v17 = (unint64_t)a1[3];
  if ((unint64_t)*a1 >= v17)
  {
    double v16 = a1[2];
    *a1 = v16;
  }
  if (v6 == v16)
  {
    unint64_t v21 = 0;
  }
  else
  {
    unsigned __int8 v18 = 0;
    do
    {
      char v20 = *v6++;
      char v19 = v20;
      if ((unint64_t)v6 >= v17) {
        unint64_t v6 = a1[2];
      }
      v18 += v19;
    }
    while (v6 != v16);
    unint64_t v21 = v18;
  }
  *a1 = v16 + 1;
  *double v16 = 38;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf_02x(a1, v21);
  double v22 = (*a1)++;
  *double v22 = 10;
  uint64_t v23 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v23 = a1[2];
  }
  *a1 = v23 + 1;
  *uint64_t v23 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  GNSS_Write_GNB_Ctrl(a1);

  return GNSS_GNB_Debug_Ctl(a2);
}

uint64_t G5K_ME_Send_Sleep(char **a1, char **a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  GNSS_Write_GNB_Ctrl(a1);
  GNSS_GNB_Debug_Ctl((uint64_t)a2);
  if (g_Logging_Cfg >= 1)
  {
    uint64_t v10 = (*a2)++;
    *uint64_t v10 = 10;
    unsigned __int8 v11 = *a2;
    if (*a2 >= a2[3]) {
      unsigned __int8 v11 = a2[2];
    }
    char v12 = 35;
    uint64_t v13 = 1u;
    do
    {
      *a2 = v11 + 1;
      char *v11 = v12;
      unsigned __int8 v11 = *a2;
      if (*a2 >= a2[3])
      {
        unsigned __int8 v11 = a2[2];
        *a2 = v11;
      }
      char v12 = str_2_2[v13++];
    }
    while (v13 != 8);
    sprintf_sp1u(a2, a3);
    sprintf_sp1u(a2, a4);
    char v14 = (*a2)++;
    *char v14 = 10;
    if (*a2 >= a2[3]) {
      *a2 = a2[2];
    }
  }
  if (a5)
  {
    uint64_t v17 = 0;
    v16[0] = BYTE1(a3);
    v16[1] = a3;
    _DWORD v16[2] = BYTE1(a4);
    v16[3] = a4;
    STEU_Encode_c(a1, 83, 12, v16);
  }
  GNSS_Write_GNB_Ctrl(a1);
  return GNSS_GNB_Debug_Ctl((uint64_t)a2);
}

uint64_t G5K_ME_Send_Ctrl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v239 = *MEMORY[0x263EF8340];
  uint64_t v10 = (unsigned char *)(*(void *)a1)++;
  *uint64_t v10 = 10;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  unsigned __int8 v11 = (unsigned __int8 *)(a5 + 8592);
  uint64_t v12 = *(unsigned int *)(a4 + 1664);
  int v13 = *(_DWORD *)(a4 + 1660);
  if (v12)
  {
    EvLog_nd("G5K_ME_Send_Ctrl: Fix_Int Updated ", 2, a3, *(unsigned int *)(a4 + 1660), v12);
    int v13 = *(_DWORD *)(a4 + 1664);
    *(void *)(a4 + 1660) = v13;
  }
  int v14 = *(_DWORD *)(*(void *)(p_api + 80) + 32);
  if (v13 >= 0x1F4) {
    int v15 = 100;
  }
  else {
    int v15 = 50;
  }
  int v16 = -(int)API_Get_Est_ME_TTick();
  do
    v14 += v13;
  while (v16 + v14 <= v15);
  unsigned int v18 = *(_DWORD *)(a4 + 1660);
  HIDWORD(v19) = 652835029 * v18;
  LODWORD(v19) = 652835029 * v18;
  if ((v19 >> 3) >= 0x418938 && 0x3E8 % v18)
  {
    int v225 = 0;
    __int16 v220 = 0;
  }
  else
  {
    uint64_t v20 = *(void *)(p_api + 80);
    LOWORD(v17) = *(_WORD *)(*(void *)(p_api + 72) + 2028);
    for (double i = *(double *)(v20 + 48) - (*(double *)(v20 + 152) - (double)v17 * 0.000000001); i >= 604800.0; double i = i + -604800.0)
      ;
    double v22 = *(double *)(v20 + 184);
    while (i < 0.0)
      double i = i + 604800.0;
    double v23 = *(double *)(v20 + 872) / 299792458.0;
    int v24 = *(_DWORD *)(v20 + 32);
    double v25 = i + (double)*(__int16 *)(a4 + 1724) * 0.000000001;
    double v26 = v25 - (double)(int)v25;
    double v27 = (double)(v13 / 0x3E8u);
    if (v13 < 2000) {
      double v27 = 1.0;
    }
    if (v26 >= 0.7) {
      double v27 = v27 + 1.0;
    }
    double v28 = (v22 + 1.0) * (v27 - v26) * 1000.0;
    unsigned int v29 = vcvtd_n_u64_f64(v28 - (double)(int)v28, 0x10uLL);
    int v225 = v24 + (int)v28;
    __int16 v220 = v29;
    if (v23 < 0.004)
    {
      int v30 = v24 + (int)v28 - v14 + (v29 >> 15);
      int v31 = v14 - v13 - ((int)v28 + v24 + (v29 >> 15));
      do
      {
        int v32 = v30;
        v30 -= v13;
        v31 += v13;
      }
      while (v32 > 10);
      if (v13 < 500)
      {
        if (v32 < 0) {
          int v32 = 10;
        }
      }
      else
      {
        int v33 = 1 - v13;
        if (v32 > 1 - v13) {
          int v33 = v32;
        }
        int v34 = v33 + v31;
        BOOL v188 = v34 == 0;
        unsigned int v35 = (v34 - (v34 != 0)) / v13;
        if (!v188) {
          ++v35;
        }
        v32 += v35 * v13;
        if (v32 <= -50) {
          int v32 = -50;
        }
      }
      if (v32 >= 0) {
        unsigned int v36 = v32;
      }
      else {
        unsigned int v36 = -v32;
      }
      if (v36 <= 2 && v23 >= 0.0001) {
        int v32 = 0;
      }
      v14 += v32;
    }
  }
  *(_DWORD *)(a3 + 564) = v14;
  G5K_ME_enc_n((char **)a1, v14, v18);
  *(_DWORD *)double v238 = *(_DWORD *)a5;
  *(_WORD *)&v238[4] = *(_WORD *)(a5 + 4);
  *(void *)&v238[6] = *(void *)(a5 + 6);
  *(_DWORD *)&v238[14] = *(_DWORD *)(a5 + 16);
  *(_WORD *)&v238[18] = *(_WORD *)(a5 + 20);
  *(_WORD *)&v238[20] = *(_WORD *)(a5 + 14);
  *(_DWORD *)&v238[22] = *(_DWORD *)(a5 + 22);
  *(_WORD *)&v238[26] = *(_WORD *)(a5 + 26);
  *(_DWORD *)&v238[28] = *(_DWORD *)(a5 + 28);
  int v38 = *(_DWORD *)(a5 + 56);
  v238[32] = *(_DWORD *)(a5 + 60);
  v238[33] = v38;
  v238[34] = v11[230] + v11[4];
  *(_DWORD *)&v238[35] = *(_DWORD *)(a5 + 36);
  int v39 = *(_DWORD *)(a5 + 48);
  v238[39] = *(_DWORD *)(a5 + 44);
  *(_DWORD *)&v238[40] = v39;
  v238[44] = *(unsigned char *)(a5 + 52);
  *(_WORD *)&v238[45] = *(_WORD *)(a5 + 40);
  v238[47] = *(unsigned char *)(a5 + 68);
  *(_WORD *)&v238[48] = *(_WORD *)(a5 + 32);
  *(void *)int v237 = &v238[50];
  STEU_Encode((char **)a1, 97, v238, (unint64_t *)v237);
  if (*(void *)v237 - (void)v238 != 51) {
    gn_report_assertion_failure("ME_enc_a: Wrong Length!");
  }
  int v40 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v40 <= 0) {
    v40 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  }
  uint64_t v228 = a3;
  if (v40 <= 0x1FF) {
    GNSS_Write_GNB_Ctrl((char **)a1);
  }
  GNB_Debug_Flush_Check();
  uint64_t v42 = 0;
  int v43 = 0;
  uint64_t v234 = *((void *)&xmmword_26AA2DE48 + 1);
  do
  {
    if (*(__int16 *)(a5 + 2 * v42 + 6194) >= 1
      && (*(char *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976) & 0x80000000) == 0)
    {
      unsigned int v44 = *(unsigned __int8 *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976);
      if (*(unsigned char *)(a5
                    + 48
                    * *(unsigned __int8 *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976)
                    + 76))
      {
        uint64_t v45 = a5 + 48 * *(unsigned __int8 *)(a5 + *(unsigned __int16 *)(a5 + 2 * v42 + 6194) - 1 + 5976);
        unsigned int v48 = *(unsigned __int8 *)(v45 + 80);
        uint64_t v47 = v45 + 80;
        uint64_t v46 = v48;
        char v49 = *(unsigned char *)(v47 + 6);
        if (*(unsigned char *)(v47 + 4)) {
          v49 |= 0x10u;
        }
        if (*(unsigned char *)(v47 + 5)) {
          v49 |= 0x20u;
        }
        *(double *)&unint64_t v50 = (double)*(int *)(v47 + 24) * 0.000000977517107;
        double v51 = *(double *)&v50 + (double)*(int *)(v47 + 20) * 1.5;
        LOWORD(v50) = *(_WORD *)(v47 + 28);
        double v52 = v51 + (double)v50 * 1.49157273e-11;
        if (v46 == 2)
        {
          int v53 = *(char *)(v47 + 2);
          if ((*(unsigned char *)(v47 + 2) - 7) < 0xF2u) {
            goto LABEL_99;
          }
          double v52 = v52
              + (double)(10800 - *(char *)(a5 + 52))
              + *(double *)(v234 + 8 * (v53 + 7) + 1864) * -0.00000000333564095;
          double v54 = 86400.0;
        }
        else
        {
          if (v46 == 4)
          {
            LOBYTE(v53) = *(unsigned char *)(v47 + 2);
            double v52 = v52 + -14.0;
            if (*(unsigned char *)(v47 + 1) == 12) {
              double v52 = v52 + *(double *)(v234 + 1984) * -0.00000000333564095;
            }
          }
          else
          {
            LOBYTE(v53) = *(unsigned char *)(v47 + 2);
          }
          double v54 = 604800.0;
        }
        double v55 = -0.0;
        if (v52 < 0.0) {
          double v55 = v54;
        }
        for (double j = v52 + v55; j > v54; double j = j - v54)
          ;
        uint64_t v57 = v46;
        switch((int)v46)
        {
          case 1:
            goto LABEL_78;
          case 2:
            LOBYTE(v53) = v53 + 8;
            uint64_t v57 = 4;
            goto LABEL_78;
          case 3:
            LOBYTE(v53) = v53 + 64;
            uint64_t v57 = 5;
            goto LABEL_78;
          case 4:
            LOBYTE(v53) = v53 + 0x80;
            uint64_t v57 = 6;
            goto LABEL_78;
          case 5:
            uint64_t v57 = 3;
            goto LABEL_78;
          case 6:
            LOBYTE(v53) = v53 + 100;
            uint64_t v57 = 7;
            goto LABEL_78;
          case 7:
            uint64_t v57 = 2;
LABEL_78:
            if (!(_BYTE)v53) {
              goto LABEL_87;
            }
            v238[0] = v57;
            v238[1] = v53;
            v238[2] = v49;
            char v58 = (_WORD *)(a5 + 48 * v44);
            int v59 = (int)((double)(__int16)v58[47] * 48.7151802);
            *(_WORD *)&v238[3] = v59;
            double v60 = j * 1000.0;
            v238[5] = BYTE2(v59);
            unsigned int v61 = v60 >> 24;
            *(_WORD *)&v238[6] = v60;
            v238[8] = v60 >> 16;
            double v62 = v60 - (double)v60;
            v238[9] = v61;
            *(_WORD *)&v238[10] = vcvtd_n_s64_f64(v62, 0x10uLL);
            LOWORD(v62) = v58[45];
            *(_WORD *)&v238[12] = (int)((double)*(unint64_t *)&v62 * 1.90293673);
            unsigned int v63 = (unsigned __int16)v58[49];
            if (v63 < 0x13FB)
            {
              unint64_t v67 = 3439332561 * (v63 << 15);
              unint64_t v65 = v67 >> 44;
              unint64_t v66 = v67 >> 52;
            }
            else
            {
              if (v46 == 3) {
                unsigned int v64 = 65280;
              }
              else {
                unsigned int v64 = 0x8000;
              }
              if (v46 == 3) {
                LOBYTE(v65) = -1;
              }
              else {
                LOBYTE(v65) = 0;
              }
              LODWORD(v66) = v64 >> 8;
            }
            v238[14] = v65;
            v238[15] = v66;
            uint64_t v68 = a5 + 48 * v44;
            *(double *)&unint64_t v69 = (double)*(__int16 *)(v68 + 110) * 0.475734182;
            int v70 = (int)*(double *)&v69;
            v238[16] = *(unsigned char *)(v68 + 96);
            LOBYTE(v69) = *(unsigned char *)(v68 + 112);
            unsigned int v71 = ((double)v69 * 1.90293673);
            *(_WORD *)&v238[17] = v70;
            if (v71 >= 0xFF) {
              LOBYTE(v71) = -1;
            }
            v238[19] = v71;
            *(_WORD *)&v238[20] = *(_WORD *)(v68 + 113);
            *(_DWORD *)&v238[22] = 0;
            v238[26] = *(unsigned char *)(v68 + 115);
            *(_WORD *)&v238[27] = *(_WORD *)(v68 + 116);
            *(void *)int v237 = &v238[29];
            STEU_Encode((char **)a1, 115, v238, (unint64_t *)v237);
            if (*(void *)v237 - (void)v238 != 30) {
              gn_report_assertion_failure("ME_enc_s: Wrong Length!");
            }
            if ((++v43 & 7) == 0)
            {
              int v72 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
              if (v72 <= 0) {
                v72 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
              }
              if (v72 <= 0x1FF) {
                GNSS_Write_GNB_Ctrl((char **)a1);
              }
              GNB_Debug_Flush_Check();
            }
            break;
          default:
            uint64_t v57 = 0;
LABEL_87:
            EvCrt_nd("ME_enc_s: Invalid Constel / SV ID ", 2, v41, v57, 0);
            break;
        }
      }
    }
LABEL_99:
    ++v42;
  }
  while (v42 != 218);
  if (v11[230])
  {
    unint64_t v73 = 0;
    unsigned int v74 = (_WORD *)(a5 + 5588);
    while (2)
    {
      if (!*((unsigned char *)v74 - 40)) {
        gn_report_assertion_failure("ME_enc_s: SBAS AA not valid!");
      }
      uint64_t v75 = *((unsigned __int8 *)v74 - 34);
      switch(*((unsigned char *)v74 - 36))
      {
        case 1:
          uint64_t v76 = 1;
          goto LABEL_112;
        case 2:
          LOBYTE(v75) = v75 + 8;
          uint64_t v76 = 4;
          goto LABEL_112;
        case 3:
          LOBYTE(v75) = v75 + 64;
          uint64_t v76 = 5;
          goto LABEL_112;
        case 4:
          LOBYTE(v75) = v75 + 0x80;
          uint64_t v76 = 6;
          goto LABEL_112;
        case 5:
          uint64_t v76 = 3;
          goto LABEL_112;
        case 6:
          LOBYTE(v75) = v75 + 100;
          uint64_t v76 = 7;
          goto LABEL_112;
        case 7:
          if (*((unsigned char *)v74 - 34))
          {
            char v77 = *((unsigned char *)v74 - 30);
            if (*((unsigned char *)v74 - 32)) {
              v77 |= 0x10u;
            }
            if (*((unsigned char *)v74 - 31)) {
              v77 |= 0x20u;
            }
            v238[0] = 2;
            v238[1] = v75;
            v238[2] = v77;
            int v78 = (int)((double)(__int16)*(v74 - 11) * 48.7151802);
            *(_WORD *)&v238[3] = v78;
            double v79 = (double)*((int *)v74 - 4);
            double v80 = (double)*((int *)v74 - 3);
            v238[5] = BYTE2(v78);
            *(double *)&unint64_t v81 = v80 * 0.000000977517107;
            double v82 = *(double *)&v81 + v79 * 1.5;
            LOWORD(v81) = *(v74 - 4);
            double v83 = (v82 + (double)v81 * 1.49157273e-11) * 1000.0;
            *(_WORD *)&v238[6] = v83;
            v238[8] = v83 >> 16;
            v238[9] = v83 >> 24;
            double v84 = v83 - (double)v83;
            *(_WORD *)&v238[10] = vcvtd_n_s64_f64(v84, 0x10uLL);
            LOWORD(v84) = *(v74 - 13);
            *(_WORD *)&v238[12] = (int)((double)*(unint64_t *)&v84 * 1.90293673);
            *(_WORD *)&v238[14] = (3439332561u * (unint64_t)((unsigned __int16)*(v74 - 9) << 15)) >> 44;
            *(double *)&unint64_t v85 = (double)(__int16)*(v74 - 3) * 0.475734182;
            int v86 = (int)*(double *)&v85;
            v238[16] = *((unsigned char *)v74 - 20);
            LOBYTE(v85) = *((unsigned char *)v74 - 4);
            unsigned int v87 = ((double)v85 * 1.90293673);
            *(_WORD *)&v238[17] = v86;
            if (v87 >= 0xFF) {
              LOBYTE(v87) = -1;
            }
            v238[19] = v87;
            *(_WORD *)&v238[20] = *(_WORD *)((char *)v74 - 3);
            *(_DWORD *)&v238[22] = 0;
            v238[26] = *((unsigned char *)v74 - 1);
            *(_WORD *)&v238[27] = *v74;
            *(void *)int v237 = &v238[29];
            STEU_Encode((char **)a1, 115, v238, (unint64_t *)v237);
            if (*(void *)v237 - (void)v238 != 30) {
              gn_report_assertion_failure("ME_enc_s: S Wrong Length!");
            }
            if ((++v43 & 7) == 0)
            {
              int v88 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
              if (v88 <= 0) {
                v88 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
              }
              if (v88 <= 0x1FF) {
                GNSS_Write_GNB_Ctrl((char **)a1);
              }
              GNB_Debug_Flush_Check();
            }
          }
          else
          {
            uint64_t v76 = 2;
LABEL_113:
            EvCrt_nd("ME_enc_s: S Invalid STE SV / Constel ID ", 2, v41, v76, v75);
          }
          ++v73;
          v74 += 24;
          if (v73 >= v11[230]) {
            break;
          }
          continue;
        default:
          LOBYTE(v75) = 0;
          uint64_t v76 = 0;
LABEL_112:
          uint64_t v75 = v75;
          goto LABEL_113;
      }
      break;
    }
  }
  int v89 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v89 <= 0) {
    v89 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  }
  if (v89 <= 0x1FF) {
    GNSS_Write_GNB_Ctrl((char **)a1);
  }
  GNB_Debug_Flush_Check();
  LODWORD(v236) = 0;
  if (*v11)
  {
    unint64_t v90 = 0;
    char v91 = 0;
    char v92 = 0;
    char v93 = 0;
    char v232 = 0;
    char v94 = 0;
    do
    {
      Constell_Prunint64_t n = Get_Constell_Prn((*(_WORD *)(a5 + 6194 + 2 * v90) - 1));
      switch(Constell_Prn)
      {
        case 1:
          ++v94;
          break;
        case 3:
          ++v232;
          break;
        case 4:
          ++v93;
          break;
        case 5:
          ++v92;
          break;
        case 6:
          ++v91;
          break;
        default:
          break;
      }
      ++v90;
    }
    while (v90 < *v11);
    LODWORD(v236) = Constell_Prn;
  }
  else
  {
    char v94 = 0;
    char v232 = 0;
    char v93 = 0;
    char v92 = 0;
    char v91 = 0;
  }
  char v221 = v93;
  char v222 = v92;
  if (v11[1])
  {
    unint64_t v96 = 0;
    char v97 = 0;
    char v235 = 0;
    char v233 = 0;
    char v231 = 0;
    char v98 = 0;
    do
    {
      int v99 = Get_Constell_Prn((*(_WORD *)(a5 + 6630 + 2 * v96) - 1));
      switch(v99)
      {
        case 1:
          ++v98;
          break;
        case 3:
          ++v231;
          break;
        case 4:
          ++v233;
          break;
        case 5:
          ++v235;
          break;
        case 6:
          ++v97;
          break;
        default:
          break;
      }
      ++v96;
    }
    while (v96 < v11[1]);
    LODWORD(v236) = v99;
  }
  else
  {
    char v98 = 0;
    char v231 = 0;
    char v233 = 0;
    char v235 = 0;
    char v97 = 0;
  }
  char v223 = v97;
  char v224 = v91;
  if (v11[3])
  {
    unint64_t v100 = 0;
    char v230 = 0;
    uint64_t v229 = 0;
    char v101 = 0;
    char v102 = 0;
    do
    {
      int v103 = Get_Constell_Prn((*(_WORD *)(a5 + 7066 + 2 * v100) - 1));
      switch(v103)
      {
        case 1:
          ++v102;
          break;
        case 3:
          ++v101;
          break;
        case 4:
          LOBYTE(v229) = v229 + 1;
          break;
        case 5:
          ++BYTE4(v229);
          break;
        case 6:
          ++v230;
          break;
        default:
          break;
      }
      ++v100;
    }
    while (v100 < v11[3]);
    LODWORD(v236) = v103;
  }
  else
  {
    char v102 = 0;
    char v101 = 0;
    uint64_t v229 = 0;
    char v230 = 0;
  }
  uint64_t v104 = &v238[2];
  memset(&v238[2], 0, 258);
  v238[0] = 1;
  v238[1] = v94;
  *(void *)int v237 = &v238[2];
  double v105 = &v238[2];
  if (*v11)
  {
    unint64_t v106 = 0;
    do
    {
      char v107 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v106) - 1), &v236);
      if (v236 == 1)
      {
        **(unsigned char **)int v237 = v107 + 1;
        ++*(void *)v237;
      }
      ++v106;
    }
    while (v106 < *v11);
    double v105 = *(unsigned char **)v237;
  }
  *double v105 = v98;
  ++*(void *)v237;
  if (v11[1])
  {
    unint64_t v108 = 0;
    do
    {
      char v109 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v108) - 1), &v236);
      if (v236 == 1)
      {
        **(unsigned char **)int v237 = v109 + 1;
        ++*(void *)v237;
      }
      ++v108;
    }
    while (v108 < v11[1]);
  }
  if (*(unsigned char *)(a4 + 22))
  {
    **(unsigned char **)int v237 = v102;
    ++*(void *)v237;
    uint64_t v110 = v228;
    if (v11[3])
    {
      unint64_t v111 = 0;
      do
      {
        char v112 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v111) - 1), &v236);
        if (v236 == 1)
        {
          **(unsigned char **)int v237 = v112 + 1;
          ++*(void *)v237;
        }
        ++v111;
      }
      while (v111 < v11[3]);
    }
  }
  else
  {
    **(unsigned char **)int v237 = 0;
    ++*(void *)v237;
    uint64_t v110 = v228;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 70) {
    gn_report_assertion_failure("ME_enc_v: G Too Long!");
  }
  memset(&v238[2], 0, 258);
  v238[0] = 4;
  v238[1] = v11[78];
  uint64_t v113 = &v238[2];
  *(void *)int v237 = &v238[2];
  if (v238[1] >= 1)
  {
    uint64_t v114 = 0;
    uint64_t v113 = &v238[2];
    do
    {
      unsigned char *v113 = *(unsigned char *)(a5 + 8656 + v114) + 8;
      uint64_t v113 = (unsigned char *)++*(void *)v237;
      ++v114;
    }
    while (v114 < (char)v11[78]);
  }
  unsigned char *v113 = v11[79];
  uint64_t v115 = (unsigned char *)++*(void *)v237;
  for (uint64_t k = 2150; k != 2164; ++k)
  {
    if (!*(_DWORD *)(a5 + 4 * k))
    {
      *uint64_t v115 = k - 101;
      uint64_t v115 = (unsigned char *)++*(void *)v237;
    }
  }
  if (*(unsigned char *)(a4 + 23))
  {
    uint64_t v117 = 0;
    *uint64_t v115 = v11[80];
    unint64_t v118 = (unsigned char *)++*(void *)v237;
    do
    {
      if (*(_DWORD *)(a5 + 8600 + 4 * v117) == 3)
      {
        *unint64_t v118 = v117 + 1;
        unint64_t v118 = (unsigned char *)++*(void *)v237;
      }
      ++v117;
    }
    while (v117 != 14);
  }
  else
  {
    *uint64_t v115 = 0;
    ++*(void *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 70) {
    gn_report_assertion_failure("ME_enc_v: R Too Long!");
  }
  memset(&v238[2], 0, 258);
  v238[0] = 5;
  v238[1] = v232;
  *(void *)int v237 = &v238[2];
  uint64_t v119 = &v238[2];
  if (*v11)
  {
    unint64_t v120 = 0;
    do
    {
      char v121 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v120) - 1), &v236);
      if (v236 == 3)
      {
        **(unsigned char **)int v237 = v121 + 65;
        ++*(void *)v237;
      }
      ++v120;
    }
    while (v120 < *v11);
    uint64_t v119 = *(unsigned char **)v237;
  }
  *uint64_t v119 = v231;
  ++*(void *)v237;
  if (v11[1])
  {
    unint64_t v122 = 0;
    do
    {
      char v123 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v122) - 1), &v236);
      if (v236 == 3)
      {
        **(unsigned char **)int v237 = v123 + 65;
        ++*(void *)v237;
      }
      ++v122;
    }
    while (v122 < v11[1]);
  }
  if (*(unsigned char *)(a4 + 27))
  {
    **(unsigned char **)int v237 = v101;
    ++*(void *)v237;
    char v124 = v223;
    if (v11[3])
    {
      unint64_t v125 = 0;
      do
      {
        char v126 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v125) - 1), &v236);
        if (v236 == 3)
        {
          **(unsigned char **)int v237 = v126 + 65;
          ++*(void *)v237;
        }
        ++v125;
      }
      while (v125 < v11[3]);
    }
  }
  else
  {
    **(unsigned char **)int v237 = 0;
    ++*(void *)v237;
    char v124 = v223;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 70) {
    gn_report_assertion_failure("ME_enc_v: E Too Long!");
  }
  memset(&v238[2], 0, 258);
  v238[0] = 6;
  v238[1] = v221;
  *(void *)int v237 = &v238[2];
  uint64_t v127 = &v238[2];
  if (*v11)
  {
    unint64_t v128 = 0;
    do
    {
      char v129 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v128) - 1), &v236);
      if (v236 == 4)
      {
        **(unsigned char **)int v237 = v129 - 127;
        ++*(void *)v237;
      }
      ++v128;
    }
    while (v128 < *v11);
    uint64_t v127 = *(unsigned char **)v237;
  }
  unsigned char *v127 = v233;
  ++*(void *)v237;
  if (v11[1])
  {
    unint64_t v130 = 0;
    do
    {
      char v131 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v130) - 1), &v236);
      if (v236 == 4)
      {
        **(unsigned char **)int v237 = v131 - 127;
        ++*(void *)v237;
      }
      ++v130;
    }
    while (v130 < v11[1]);
  }
  if (*(unsigned char *)(a4 + 26))
  {
    **(unsigned char **)int v237 = v229;
    ++*(void *)v237;
    if (v11[3])
    {
      unint64_t v132 = 0;
      do
      {
        char v133 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v132) - 1), &v236);
        if (v236 == 4)
        {
          **(unsigned char **)int v237 = v133 - 127;
          ++*(void *)v237;
        }
        ++v132;
      }
      while (v132 < v11[3]);
    }
  }
  else
  {
    **(unsigned char **)int v237 = 0;
    ++*(void *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 70) {
    gn_report_assertion_failure("ME_enc_v: B Too Long!");
  }
  memset(&v238[2], 0, 258);
  v238[0] = 3;
  v238[1] = v222;
  *(void *)int v237 = &v238[2];
  unint64_t v134 = &v238[2];
  if (*v11)
  {
    unint64_t v135 = 0;
    do
    {
      char v136 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v135) - 1), &v236);
      if (v236 == 5)
      {
        **(unsigned char **)int v237 = v136 - 63;
        ++*(void *)v237;
      }
      ++v135;
    }
    while (v135 < *v11);
    unint64_t v134 = *(unsigned char **)v237;
  }
  *unint64_t v134 = v235;
  ++*(void *)v237;
  if (v11[1])
  {
    unint64_t v137 = 0;
    do
    {
      char v138 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v137) - 1), &v236);
      if (v236 == 5)
      {
        **(unsigned char **)int v237 = v138 - 63;
        ++*(void *)v237;
      }
      ++v137;
    }
    while (v137 < v11[1]);
  }
  if (*(unsigned char *)(a4 + 24))
  {
    **(unsigned char **)int v237 = BYTE4(v229);
    ++*(void *)v237;
    if (v11[3])
    {
      unint64_t v139 = 0;
      do
      {
        char v140 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v139) - 1), &v236);
        if (v236 == 5)
        {
          **(unsigned char **)int v237 = v140 - 63;
          ++*(void *)v237;
        }
        ++v139;
      }
      while (v139 < v11[3]);
    }
  }
  else
  {
    **(unsigned char **)int v237 = 0;
    ++*(void *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 70) {
    gn_report_assertion_failure("ME_enc_v: Q Too Long!");
  }
  memset(&v238[2], 0, 258);
  v238[0] = 7;
  v238[1] = v224;
  *(void *)int v237 = &v238[2];
  uint64_t v141 = &v238[2];
  if (*v11)
  {
    unint64_t v142 = 0;
    do
    {
      char v143 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6194 + 2 * v142) - 1), &v236);
      if (v236 == 6)
      {
        **(unsigned char **)int v237 = v143 + 101;
        ++*(void *)v237;
      }
      ++v142;
    }
    while (v142 < *v11);
    uint64_t v141 = *(unsigned char **)v237;
  }
  *uint64_t v141 = v124;
  ++*(void *)v237;
  if (v11[1])
  {
    unint64_t v144 = 0;
    do
    {
      char v145 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 6630 + 2 * v144) - 1), &v236);
      if (v236 == 6)
      {
        **(unsigned char **)int v237 = v145 + 101;
        ++*(void *)v237;
      }
      ++v144;
    }
    while (v144 < v11[1]);
  }
  if (*(unsigned char *)(a4 + 28))
  {
    **(unsigned char **)int v237 = v230;
    ++*(void *)v237;
    if (v11[3])
    {
      unint64_t v146 = 0;
      do
      {
        char v147 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a5 + 7066 + 2 * v146) - 1), &v236);
        if (v236 == 6)
        {
          **(unsigned char **)int v237 = v147 + 101;
          ++*(void *)v237;
        }
        ++v146;
      }
      while (v146 < v11[3]);
    }
  }
  else
  {
    **(unsigned char **)int v237 = 0;
    ++*(void *)v237;
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 70) {
    gn_report_assertion_failure("ME_enc_v: N Too Long!");
  }
  v238[0] = 2;
  v238[1] = v11[230];
  *(void *)int v237 = &v238[2];
  if (v238[1])
  {
    unint64_t v148 = 0;
    do
    {
      unsigned char *v104 = *(unsigned char *)(a5 + 8696 + v148);
      uint64_t v104 = (unsigned char *)++*(void *)v237;
      ++v148;
    }
    while (v148 < v11[230]);
  }
  unsigned char *v104 = v11[231];
  __int16 v149 = (unsigned char *)++*(void *)v237;
  if (v11[231])
  {
    unint64_t v150 = 0;
    do
    {
      *__int16 v149 = *(unsigned char *)(a5 + 8705 + v150);
      __int16 v149 = (unsigned char *)++*(void *)v237;
      ++v150;
    }
    while (v150 < v11[231]);
  }
  *__int16 v149 = v11[232];
  uint64_t v151 = (unsigned char *)++*(void *)v237;
  if (v11[232])
  {
    unint64_t v152 = 0;
    do
    {
      unsigned char *v151 = *(unsigned char *)(a5 + 8744 + v152);
      uint64_t v151 = (unsigned char *)++*(void *)v237;
      ++v152;
    }
    while (v152 < v11[232]);
  }
  STEU_Encode((char **)a1, 118, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 70) {
    gn_report_assertion_failure("ME_enc_v: S Too Long!");
  }
  int v153 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v153 <= 0) {
    v153 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  }
  if (v153 <= 0x1FF) {
    GNSS_Write_GNB_Ctrl((char **)a1);
  }
  GNB_Debug_Flush_Check();
  uint64_t v154 = &v238[1];
  memset(v238, 0, sizeof(v238));
  *(void *)int v237 = &v238[1];
  unsigned __int8 v155 = *v11;
  if (*v11)
  {
    unint64_t v156 = 0;
    unsigned __int8 v157 = 0;
    signed __int8 v158 = 0;
    do
    {
      int v159 = *(__int16 *)(a5 + 6194 + 2 * v156);
      if (v159 >= 1)
      {
        LODWORD(v236) = 0;
        int v160 = LongPrnIdx_To_ShortPrnIdx((unsigned __int16)v159 - 1, &v236);
        if (v236 != 2)
        {
          int v163 = 0;
          int v161 = Prn_Offset[v236] + v160;
          __int16 v162 = 256;
          switch((int)v236)
          {
            case 1:
              goto LABEL_318;
            case 3:
              v161 += 64;
              __int16 v162 = 1280;
              goto LABEL_318;
            case 4:
              v161 += 128;
              __int16 v162 = 1536;
              goto LABEL_318;
            case 5:
              __int16 v162 = 768;
              goto LABEL_318;
            case 6:
              v161 += 100;
              __int16 v162 = 1792;
              goto LABEL_318;
            case 7:
              __int16 v162 = 512;
              goto LABEL_318;
            default:
              goto LABEL_320;
          }
        }
        if (v158 <= 13 && (char)v11[78] > v158)
        {
          int v161 = *(char *)(a5 + v158++ + 8656) + 8;
          __int16 v162 = 1024;
LABEL_318:
          if ((v161 - 256) > 0xFFFFFF00)
          {
            *uint64_t v154 = v161;
            v154[1] = (unsigned __int16)(v161 | v162) >> 8;
            v154 += 2;
            ++v157;
          }
          else
          {
            int v163 = v161;
LABEL_320:
            EvLog_d("ME_enc_o:  Illegal STE SV ID ", v163);
          }
        }
        unsigned __int8 v155 = *v11;
      }
      ++v156;
    }
    while (v156 < v155);
    *(void *)int v237 = v154;
    uint64_t v110 = v228;
  }
  else
  {
    unsigned __int8 v157 = 0;
  }
  v238[0] = v157;
  if (v11[4] != v157 || v157 != v155) {
    EvLog_v("ME_enc_o:  num_Priority_SV  %d   !=  num_AA %d  or  num_vis %d", v157, v11[4], v155);
  }
  STEU_Encode((char **)a1, 111, v238, (unint64_t *)v237);
  if ((uint64_t)(*(void *)v237 - (void)v238) >= 258) {
    gn_report_assertion_failure("ME_enc_o: Too long!");
  }
  int v164 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v164 <= 0) {
    v164 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  }
  if (v164 <= 0x1FF) {
    GNSS_Write_GNB_Ctrl((char **)a1);
  }
  GNB_Debug_Flush_Check();
  int v165 = *(_DWORD *)(v110 + 28236);
  if (!v165) {
    goto LABEL_339;
  }
  int v166 = *(_DWORD *)(v110 + 436) - v165;
  if (v166 < 0) {
    int v166 = -v166;
  }
  if (v166 >> 5 >= 0x753)
  {
LABEL_339:
    uint64_t v167 = 0;
    *(void *)&v238[6] = 0;
    *(void *)double v238 = 0;
    uint64_t v168 = *(void *)(a5 + 8680);
    while (*(_DWORD *)(v168 + v167) != 2139062143)
    {
      v167 += 4;
      if (v167 == 96)
      {
        uint64_t v169 = 0;
        *(void *)&v238[6] = 0x101010101010101;
        *(void *)double v238 = 0x101010101010101;
        uint64_t v170 = *(void *)(a4 + 1048);
        do
        {
          if (!*(unsigned char *)(v170 + v169)) {
            v238[*(int *)(v168 + 4 * v169) + 7] = 0;
          }
          ++v169;
        }
        while (v169 != 24);
        break;
      }
    }
    Encode_b((char **)a1, 1u, 0, 1, 0x20u, *(unsigned __int8 **)(a4 + 1040));
    Encode_b((char **)a1, 1u, 3, 1, 0x20u, *(unsigned __int8 **)(a4 + 1320));
    Encode_b((char **)a1, 2u, 4, -7, 0xEu, v238);
    Encode_b((char **)a1, 3u, 8, 1, 0x24u, *(unsigned __int8 **)(a4 + 1080));
    Encode_b((char **)a1, 4u, 11, 1, 0x3Fu, *(unsigned __int8 **)(a4 + 1072));
    Encode_b((char **)a1, 5u, 0, 193, 0xAu, *(unsigned __int8 **)(a4 + 1056));
    Encode_b((char **)a1, 6u, 3, 1, 0xEu, *(unsigned __int8 **)(a4 + 1368));
    Encode_b((char **)a1, 7u, 0, 120, 0x27u, *(unsigned __int8 **)(a4 + 1064));
    *(_DWORD *)(v110 + 28236) = *(_DWORD *)(v110 + 436);
    int v171 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
    if (v171 <= 0) {
      v171 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
    }
    if (v171 <= 0x1FF) {
      GNSS_Write_GNB_Ctrl((char **)a1);
    }
    GNB_Debug_Flush_Check();
  }
  if (*(unsigned char *)(a6 + 444)) {
    goto LABEL_355;
  }
  uint64_t v172 = 0;
  int32x4_t v173 = 0uLL;
  v174.i64[0] = 0x100000001;
  v174.i64[1] = 0x100000001;
  int32x4_t v175 = 0uLL;
  int32x4_t v176 = 0uLL;
  int32x4_t v177 = 0uLL;
  do
  {
    uint8x16_t v178 = (uint8x16_t)vtstq_s8(*(int8x16_t *)(a6 + 448 + v172), *(int8x16_t *)(a6 + 448 + v172));
    uint16x8_t v179 = vmovl_u8(*(uint8x8_t *)v178.i8);
    uint16x8_t v180 = vmovl_high_u8(v178);
    int32x4_t v177 = vaddq_s32(v177, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v180), v174));
    int32x4_t v176 = vaddq_s32(v176, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v180.i8), v174));
    int32x4_t v175 = vaddq_s32(v175, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v179), v174));
    int32x4_t v173 = vaddq_s32(v173, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v179.i8), v174));
    v172 += 16;
  }
  while (v172 != 128);
  int v181 = vaddvq_s32(vaddq_s32(vaddq_s32(v173, v176), vaddq_s32(v175, v177)));
  if (v181 == 128)
  {
LABEL_355:
    v238[0] = -1;
    *(void *)int v237 = &v238[1];
    goto LABEL_356;
  }
  if ((v181 - 1) <= 0x7E)
  {
    uint64_t v217 = 0;
    v238[0] = v181;
    uint64_t v218 = &v238[1];
    uint64_t v219 = a6 + 448;
    do
    {
      if (*(unsigned char *)(v219 + v217))
      {
        *uint64_t v218 = v217;
        v218[1] = *(unsigned char *)(v219 + v217);
        v218 += 2;
      }
      ++v217;
    }
    while (v217 != 128);
    *(void *)int v237 = v218;
    if (v218 > v238)
    {
LABEL_356:
      STEU_Encode((char **)a1, 105, v238, (unint64_t *)v237);
      if ((uint64_t)(*(void *)v237 - (void)v238) >= 260) {
        gn_report_assertion_failure("ME_enc_i: Too long!");
      }
    }
  }
  int v182 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  if (v182 <= 0) {
    v182 += *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16);
  }
  if (v182 <= 0x1FF) {
    GNSS_Write_GNB_Ctrl((char **)a1);
  }
  GNB_Debug_Flush_Check();
  if (!*(unsigned char *)(a4 + 20))
  {
    int v183 = *(_DWORD *)(a4 + 16);
    *(_DWORD *)&v238[8] = 0;
    *(void *)&v238[1] = 0;
    if (v183 >= 3)
    {
      EvLog_d("ME_Send_PowUsage: Out of range: ", v183);
      LOBYTE(v183) = 1;
    }
    v238[0] = v183;
    STEU_Encode_c((char **)a1, 80, 12, v238);
  }
  if (v225)
  {
    *(_WORD *)&v238[10] = 0;
    *(_DWORD *)&v238[6] = 0;
    v238[0] = HIBYTE(v225);
    v238[1] = BYTE2(v225);
    v238[2] = BYTE1(v225);
    v238[3] = v225;
    v238[4] = HIBYTE(v220);
    v238[5] = v220;
    STEU_Encode_c((char **)a1, 79, 12, v238);
  }
  v238[11] = 0;
  *(void *)&v238[3] = 0;
  v238[0] = *(_DWORD *)(a4 + 12);
  int v184 = *(_DWORD *)(a4 + 4);
  v238[1] = v184;
  if (v184 == 2)
  {
    if (*(_DWORD *)(a5 + 60) < 3u || !*(_DWORD *)a4)
    {
      v238[1] = 0;
      unsigned int v185 = (unsigned char *)(a5 + 84);
      uint64_t v186 = 123;
      int v187 = 123;
      while (1)
      {
        if (!*v185
          || !*(v185 - 8)
          || (*((_DWORD *)v185 - 1) ? (BOOL v188 = *((_DWORD *)v185 - 1) == 7) : (BOOL v188 = 1), v188))
        {
          if (--v187 < 6) {
            break;
          }
        }
        v185 += 48;
        if (!--v186)
        {
          LOBYTE(v184) = 0;
          goto LABEL_383;
        }
      }
    }
    LOBYTE(v184) = 1;
    v238[1] = 1;
  }
LABEL_383:
  *(_DWORD *)(a4 + 8) = v184;
  char v189 = *(unsigned char *)(a4 + 73);
  v238[2] = v189;
  int v190 = *(unsigned __int8 *)(a4 + 22);
  if (*(unsigned char *)(a4 + 22) && *(unsigned char *)(a4 + 29)) {
    v238[2] = ++v189;
  }
  int v191 = *(unsigned __int8 *)(a4 + 25);
  if (*(unsigned char *)(a4 + 25) && *(unsigned char *)(a4 + 32))
  {
    v189 += 2;
    v238[2] = v189;
  }
  int v192 = *(unsigned __int8 *)(a4 + 24);
  if (*(unsigned char *)(a4 + 24) && *(unsigned char *)(a4 + 31))
  {
    v189 += 4;
    v238[2] = v189;
  }
  int v193 = *(unsigned __int8 *)(a4 + 23);
  if (*(unsigned char *)(a4 + 23) && *(unsigned char *)(a4 + 30))
  {
    v189 += 8;
    v238[2] = v189;
  }
  int v194 = *(unsigned __int8 *)(a4 + 27);
  if (*(unsigned char *)(a4 + 27) && *(unsigned char *)(a4 + 34))
  {
    v189 += 16;
    v238[2] = v189;
  }
  int v195 = *(unsigned __int8 *)(a4 + 26);
  if (*(unsigned char *)(a4 + 26) && *(unsigned char *)(a4 + 33))
  {
    v189 += 32;
    v238[2] = v189;
  }
  int v196 = *(unsigned __int8 *)(a4 + 28);
  if (*(unsigned char *)(a4 + 28) && *(unsigned char *)(a4 + 35)) {
    v238[2] = v189 + 64;
  }
  if (v191 | v190 | v192 | v193 | v194 | v195 | v196)
  {
    char v197 = v190 | 2;
    if (!v191) {
      char v197 = v190;
    }
    if (v192) {
      v197 |= 4u;
    }
    if (v193) {
      v197 |= 8u;
    }
    if (v194) {
      v197 += 16;
    }
    if (v195) {
      v197 += 32;
    }
    if (v196) {
      v197 += 64;
    }
    v238[3] = v197;
  }
  if (v190)
  {
    LOBYTE(v190) = *(unsigned char *)(a4 + 36);
    if ((_BYTE)v190)
    {
      LOBYTE(v190) = 1;
      v238[4] = 1;
    }
  }
  if (v191 && *(unsigned char *)(a4 + 39))
  {
    LOBYTE(v190) = v190 | 2;
    v238[4] = v190;
  }
  if (v192 && *(unsigned char *)(a4 + 38))
  {
    LOBYTE(v190) = v190 | 4;
    v238[4] = v190;
  }
  if (v193 && *(unsigned char *)(a4 + 37))
  {
    LOBYTE(v190) = v190 | 8;
    v238[4] = v190;
  }
  if (v194 && *(unsigned char *)(a4 + 41))
  {
    LOBYTE(v190) = v190 | 0x10;
    v238[4] = v190;
  }
  if (v195 && *(unsigned char *)(a4 + 40))
  {
    LOBYTE(v190) = v190 | 0x20;
    v238[4] = v190;
  }
  if (v196 && *(unsigned char *)(a4 + 42)) {
    v238[4] = v190 | 0x40;
  }
  if (*(unsigned char *)(a4 + 51)) {
    v238[5] = 1;
  }
  if (*(unsigned char *)(a4 + 50)) {
    v238[7] = 1;
  }
  if (*(unsigned char *)(a4 + 52)) {
    v238[8] = 1;
  }
  char v198 = *(unsigned char *)(a4 + 43);
  if (v198)
  {
    char v198 = 1;
    v238[9] = 1;
  }
  if (*(unsigned char *)(a4 + 46))
  {
    v198 |= 2u;
    v238[9] = v198;
  }
  if (*(unsigned char *)(a4 + 45))
  {
    v198 |= 4u;
    v238[9] = v198;
  }
  if (*(unsigned char *)(a4 + 44))
  {
    v198 |= 8u;
    v238[9] = v198;
  }
  if (*(unsigned char *)(a4 + 48))
  {
    v198 |= 0x10u;
    v238[9] = v198;
  }
  if (*(unsigned char *)(a4 + 47))
  {
    v198 |= 0x20u;
    v238[9] = v198;
  }
  if (*(unsigned char *)(a4 + 49)) {
    v238[9] = v198 | 0x40;
  }
  STEU_Encode_c((char **)a1, 67, 12, v238);
  char v199 = 0;
  *(_WORD *)&v238[10] = 0;
  *(_DWORD *)&v238[6] = 0;
  int v200 = *(_DWORD *)(a4 + 2068) - 1;
  if (v200 <= 0xA) {
    char v199 = byte_263D818A0[v200];
  }
  v238[0] = v199;
  unsigned int v201 = *(_DWORD *)(a4 + 2076);
  if (v201 >= 4) {
    char v202 = -1;
  }
  else {
    char v202 = 0x4B3219FFu >> (8 * v201);
  }
  v238[1] = v202;
  unsigned int v203 = *(_DWORD *)(a4 + 2056);
  if (v203 >= 4) {
    LOBYTE(v203) = 0;
  }
  v238[2] = v203;
  unsigned int v204 = *(_DWORD *)(a4 + 2064);
  if (v204 >= 4) {
    char v205 = -1;
  }
  else {
    char v205 = 0x4B3219FFu >> (8 * v204);
  }
  v238[3] = v205;
  unsigned int v206 = *(_DWORD *)(a4 + 2080);
  if (v206 >= 4) {
    char v207 = 0;
  }
  else {
    char v207 = 0x1010300u >> (8 * v206);
  }
  v238[4] = v207;
  unsigned int v208 = *(_DWORD *)(a4 + 2088);
  if (v208 >= 4) {
    char v209 = -1;
  }
  else {
    char v209 = 0x4B3219FFu >> (8 * v208);
  }
  v238[5] = v209;
  if (*(unsigned char *)(a4 + 52))
  {
    LOBYTE(v210) = 1;
    goto LABEL_479;
  }
  if (*(unsigned char *)(p_NA + 381))
  {
    int v210 = *(_DWORD *)(p_NA + 26780);
LABEL_479:
    v238[6] = v210;
  }
  STEU_Encode_c((char **)a1, 65, 12, v238);
  if (*(unsigned char *)(a4 + 2128))
  {
    *(void *)&v237[4] = 0;
    float64x2_t v211 = *(float64x2_t *)(a4 + 2096);
    float64x2_t v212 = *(float64x2_t *)(a4 + 2112);
    int8x8_t v213 = (int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v211), (int32x4_t)vcgtzq_f64(v212)));
    int16x8_t v214 = (int16x8_t)vcvtq_n_s64_f64(v211, 2uLL);
    *(int8x8_t *)v214.uint64_t i8 = vorn_s8(vand_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64((int64x2_t)v214), (int16x4_t)vmovn_s64(vcvtq_n_s64_f64(v212, 2uLL))), v213), v213);
    *(void *)int v237 = vmovn_s16(v214).u32[0];
    STEU_Encode_c((char **)a1, 90, 12, v237);
  }
  *(_DWORD *)&v237[8] = 0;
  *(void *)&v237[1] = 0;
  v237[0] = *(unsigned char *)(a4 + 21);
  STEU_Encode_c((char **)a1, 69, 12, v237);
  *(_DWORD *)double v238 = *(_DWORD *)a5;
  unint64_t v236 = (unint64_t)&v238[4];
  STEU_Encode((char **)a1, 116, v238, &v236);
  if (v236 - (void)v238 != 6) {
    gn_report_assertion_failure("ME_enc_t: Wrong Length!");
  }
  uint64_t v215 = (unsigned char *)(*(void *)a1)++;
  *uint64_t v215 = 10;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  GNSS_Write_GNB_Ctrl((char **)a1);
  return GNSS_GNB_Debug_Ctl(a2);
}

char **G5K_ME_enc_n(char **a1, int a2, __int16 a3)
{
  *(void *)&v7[254] = *MEMORY[0x263EF8340];
  int v5 = a2;
  __int16 v6 = a3;
  unsigned __int16 v4 = v7;
  uint64_t result = STEU_Encode(a1, 110, (unsigned __int8 *)&v5, (unint64_t *)&v4);
  if (v4 - (unsigned char *)&v5 != 6) {
    return (char **)gn_report_assertion_failure("ME_enc_n: Wrong Length!");
  }
  return result;
}

char **Encode_b(char **a1, unsigned int a2, char a3, char a4, unsigned int a5, unsigned __int8 *a6)
{
  char v7 = 0;
  char v8 = 0;
  int v9 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  memset(__src, 0, sizeof(__src));
  uint64_t v10 = a5;
  char v11 = a4;
  do
  {
    if (*a6++)
    {
      char v13 = v8 + a4;
      switch(a2)
      {
        case 1u:
          char v7 = 1;
          goto LABEL_12;
        case 2u:
          char v14 = v13 + 8;
          char v7 = 4;
          break;
        case 3u:
          char v14 = v13 + 64;
          char v7 = 5;
          break;
        case 4u:
          char v14 = v13 + 0x80;
          char v7 = 6;
          break;
        case 5u:
          char v7 = 3;
          goto LABEL_12;
        case 6u:
          char v14 = v13 + 100;
          char v7 = 7;
          break;
        case 7u:
          char v7 = 2;
LABEL_12:
          char v14 = v11;
          break;
        default:
          char v14 = 0;
          char v7 = 0;
          break;
      }
      *((unsigned char *)__src + v9++) = v14;
    }
    ++v8;
    ++v11;
    --v10;
  }
  while (v10);
  unint64_t v15 = 0x207030605040100uLL >> (8 * a2);
  if (a2 > 7) {
    LOBYTE(v15) = 0;
  }
  if (v9) {
    LOBYTE(v15) = v7;
  }
  memset(v19, 0, sizeof(v19));
  v18[0] = a3 | (16 * v15);
  v18[1] = v9;
  unint64_t v17 = (char *)v19;
  if (v9 >= 1)
  {
    memcpy(v19, __src, v9);
    unint64_t v17 = (char *)v19 + v9;
  }
  uint64_t result = STEU_Encode(a1, 98, v18, (unint64_t *)&v17);
  if (v17 - (char *)v18 >= 67) {
    return (char **)gn_report_assertion_failure("ME_enc_b: Wrong Length!");
  }
  return result;
}

uint64_t GncS02_09UpdatedPosAval(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_UPDT_POS_AVAL_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncS02_09UpdatedPosAval");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    GncS04_72SendUpdates(1);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_09UpdatedPosAval", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncS02_21FGSchedTimExp(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_FG_SCHED_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_21FGSchedTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncS04_73FGPosTimerExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_21FGSchedTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncS02_22SessStopAckTimExp(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_SESS_STOP_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_22SessStopAckTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncS04_33SessStopAckTimrExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_22SessStopAckTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncS02_23SessStartAckTimExp(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCS_SESS_START_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_23SessStartAckTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncS04_36SessStartAckTimrExp();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncS02_23SessStartAckTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GM_Prop_AAD(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = (a2 - 1);
  if (a2 - 1 >= 0)
  {
    int v4 = result;
    uint64_t v5 = v3 + 1;
    uint64_t v6 = a3 + 48 * v3;
    do
    {
      if (*(unsigned char *)(v6 + 8))
      {
        if (*(unsigned char *)(v6 + 4))
        {
          long long v7 = *(_OWORD *)(v6 + 16);
          v9[0] = *(_OWORD *)v6;
          v9[1] = v7;
          v9[2] = *(_OWORD *)(v6 + 32);
          *(_DWORD *)uint64_t v6 = v4;
          uint64_t result = Comp_Cur_Acq_Aid((uint64_t)v9, v6);
        }
      }
      v6 -= 48;
    }
    while (v5-- > 1);
  }
  return result;
}

double Nav_Kalman_Update_Init(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v20 = v3;
  uint64_t v21 = v2;
  uint64_t v4 = v1;
  *(void *)((char *)&v25[8666] + 4) = *MEMORY[0x263EF8340];
  uint64_t v22 = v1 + 68160;
  uint64_t v18 = v1 + 27528;
  unint64_t v17 = (_WORD *)(v1 + 27249);
  uint64_t v19 = v1 + 15408;
  bzero(v23, 0x10EF0uLL);
  uint64_t v24 = 0x500000002;
  memset(&v25[14], 0, 24);
  memset((char *)&v25[17] + 4, 0, 21);
  memset((char *)&v25[34] + 4, 0, 20);
  memset((char *)&v25[37] + 4, 0, 20);
  memset((char *)v25 + 4, 0, 96);
  *(_OWORD *)((char *)&v25[11] + 5) = 0u;
  memset((char *)&v25[20] + 4, 0, 54);
  memset((char *)&v25[27] + 4, 0, 52);
  bzero((char *)&v25[40] + 4, 0x54CuLL);
  memset((char *)&v25[210] + 4, 0, 24);
  HIDWORD(v25[213]) = -1;
  memset((char *)&v25[214] + 4, 0, 29);
  memset((char *)&v25[218] + 4, 0, 65);
  HIDWORD(v25[228]) = -1;
  memset((char *)&v25[229] + 4, 0, 48);
  *(_DWORD *)((char *)&v25[235] + 3) = 0;
  uint64_t v5 = 240;
  do
  {
    uint64_t v6 = &v23[v5];
    *(_DWORD *)uint64_t v6 = 0;
    *(_OWORD *)(v6 + 1) = 0uLL;
    *(_OWORD *)(v6 + 3) = 0uLL;
    v5 += 5;
  }
  while (v6 + 5 != (void *)((char *)&v25[876] + 4));
  uint64_t v7 = 880;
  do
  {
    char v8 = &v23[v7];
    *(_DWORD *)char v8 = 0;
    *(_OWORD *)(v8 + 1) = 0uLL;
    *(_OWORD *)(v8 + 3) = 0uLL;
    v7 += 5;
  }
  while (v8 + 5 != (void *)((char *)&v25[1516] + 4));
  HIDWORD(v25[1923]) = 0;
  *(void *)((char *)&v25[1924] + 4) = 0;
  HIDWORD(v25[1925]) = 0;
  *(void *)((char *)&v25[1926] + 4) = 0;
  HIDWORD(v25[1927]) = 0;
  *(void *)((char *)&v25[2510] + 4) = 0;
  BYTE4(v25[2511]) = 0;
  *(void *)((char *)&v25[2512] + 4) = 0;
  BYTE4(v25[2513]) = 0;
  *(void *)((char *)&v25[3398] + 4) = 0;
  HIDWORD(v25[3399]) = 0;
  *(void *)((char *)&v25[3412] + 4) = 0;
  HIDWORD(v25[3413]) = 0;
  *(void *)((char *)&v25[3447] + 4) = 0;
  BYTE4(v25[3448]) = 0;
  memset((char *)&v25[3438] + 4, 0, 65);
  *(void *)((char *)&v25[3459] + 4) = 0;
  BYTE4(v25[3460]) = 0;
  HIDWORD(v25[3449]) = 0;
  memset((char *)&v25[3450] + 4, 0, 65);
  BYTE4(v25[3461]) = 0;
  BYTE4(v25[8507]) = 0;
  v25[8519] = 0;
  v25[8537] = 0;
  bzero((char *)&v25[8538] + 4, 0x400uLL);
  bzero((char *)&v25[1516] + 4, 0xCB5uLL);
  memset((char *)&v25[1928] + 4, 0, 156);
  bzero((char *)&v25[1948] + 4, 0x118BuLL);
  bzero((char *)&v25[2514] + 4, 0x1B5CuLL);
  memset((char *)&v25[3390] + 4, 0, 25);
  memset(&v25[3394], 0, 32);
  memset((char *)&v25[3400] + 4, 0, 19);
  memset(&v25[3403], 0, 22);
  memset(&v25[3406], 0, 24);
  memset((char *)&v25[3409] + 4, 0, 17);
  memset((char *)&v25[3414] + 4, 0, 188);
  bzero(&v25[3462], 0x9D68uLL);
  memset((char *)&v25[8499] + 4, 0, 25);
  memset((char *)&v25[8503] + 4, 0, 29);
  memset((char *)&v25[8508] + 4, 0, 81);
  memset((char *)&v25[8520] + 4, 0, 64);
  *(_OWORD *)((char *)&v25[8527] + 5) = 0u;
  memset((char *)&v25[8530] + 4, 0, 49);
  *(void *)uint64_t v4 = v23[0];
  *(void *)(v4 + 20) = v24;
  memcpy((void *)(v4 + 28), v25, 0x10ED4uLL);
  *(_DWORD *)uint64_t v4 = 167870469;
  *(_WORD *)(v4 + 4) = 279;
  *(void *)(v4 + 8) = 0x10001000105DCLL;
  *(_DWORD *)(v4 + 16) = 655366;
  *(_DWORD *)(v4 + 1704) = 1;
  uint64_t v9 = *(void *)(v20 + 60);
  *(void *)(v4 + 20) = v9;
  NK_Set_Dynamics(v9, v4 + 32);
  *(unsigned char *)(v4 + 136) = 1;
  *(_DWORD *)(v4 + 140) = 1;
  *(_DWORD *)(v4 + 160) = -1;
  *unint64_t v17 = 1;
  *(_DWORD *)(v19 + 11816) = -1;
  *(_DWORD *)uint64_t v18 = -1;
  int64x2_t v10 = vdupq_n_s64(0x416312D000000000uLL);
  *(int64x2_t *)(v4 + 27568) = v10;
  *(int64x2_t *)(v4 + 27584) = v10;
  *(unsigned char *)(v18 + 88) = -1;
  *(_DWORD *)(v18 + 96) = -1;
  *(int64x2_t *)(v4 + 27664) = v10;
  *(int64x2_t *)(v4 + 27680) = v10;
  *(unsigned char *)(v18 + 184) = -1;
  *(void *)(v4 + 280) = *(void *)(v21 + 240);
  double v11 = dbl_263D81910[*(_DWORD *)(v20 + 60) < 5u];
  *(double *)(v4 + 288) = v11;
  if (*(unsigned char *)(v21 + 18)) {
    *(double *)(v4 + 288) = v11 * 0.5;
  }
  *(void *)(v4 + 336) = 0x4163125300000000;
  *(void *)(v4 + 312) = 0x4163125300000000;
  *(_WORD *)uint64_t v19 = 4626;
  *(_WORD *)(v4 + 241) = 513;
  *(_WORD *)(v4 + 244) = 5;
  *(_OWORD *)uint64_t v22 = xmmword_263D81920;
  *(void *)(v22 + 64) = 0;
  *(void *)(v22 + 72) = 0;
  *(void *)(v22 + 56) = 0;
  Geo2ECEF(v22 + 56, (uint64_t)&WGS84_Datum, (double *)(v4 + 68192));
  __double2 v12 = __sincos_stret(*(double *)(v22 + 56));
  *(__double2 *)(v22 + 112) = v12;
  double v13 = 1.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  double v14 = *(double *)(v22 + 72);
  double v15 = v12.__cosval * (v14 + v13 * 6378137.0);
  if (v15 < 1.0) {
    double v15 = 1.0;
  }
  double result = v14 + v13 * (v13 * v13) * 6335439.33;
  *(double *)(v22 + 128) = result;
  *(double *)(v22 + 136) = v15;
  return result;
}

uint64_t NK_Set_Dynamics(uint64_t result, uint64_t a2)
{
  *(_OWORD *)a2 = xmmword_263D81930;
  *(_OWORD *)(a2 + 16) = xmmword_263D81940;
  *(_OWORD *)(a2 + 32) = xmmword_263D81950;
  int64x2_t v2 = vdupq_n_s64(0x3FA47AE147AE147CuLL);
  double v3 = 25.0;
  __asm { FMOV            V6.2D, #25.0 }
  double v9 = 0.25;
  uint64_t v10 = 0;
  double v11 = 400.0;
  double v12 = 0.04;
  double v13 = 0.0204081633;
  switch((int)result)
  {
    case 0:
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_11;
    case 3:
      int64x2_t v2 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      double v9 = 4.0;
      double v12 = 0.100489;
      double v13 = 0.01;
      goto LABEL_11;
    case 4:
      int64x2_t v2 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      double v9 = 9.0;
      double v12 = 0.100489;
      double v13 = 0.00694444444;
LABEL_11:
      *(int64x2_t *)(a2 + 48) = v2;
      *(void *)(a2 + 64) = 0x3FF0000000000000;
      *(double *)(a2 + 80) = v9;
      *(double *)(a2 + 96) = v13;
      goto LABEL_20;
    case 5:
      *(int64x2_t *)(a2 + 48) = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      *(void *)(a2 + 64) = 0x3FF0000000000000;
      *(void *)(a2 + 80) = 0x4039000000000000;
      *(void *)(a2 + 96) = 0x3FB0000000000000;
      double v14 = 25.0;
      double v13 = 0.0625;
      goto LABEL_24;
    case 6:
      __asm { FMOV            V0.2D, #1.0; jumptable 0000000263C598B0 case 6 }
      *(_OWORD *)(a2 + 48) = _Q0;
      *(void *)(a2 + 64) = 0x3FF0000000000000;
      *(double *)&uint64_t v16 = 100.0;
      *(void *)(a2 + 80) = 0x4059000000000000;
      *(void *)(a2 + 96) = 0x3FD0000000000000;
      double v13 = 0.25;
      goto LABEL_22;
    case 7:
      goto LABEL_15;
    case 8:
      _Q6 = vdupq_n_s64(0x4202A05F20000000uLL);
      double v11 = 1000000.0;
      double v3 = 1.0e10;
LABEL_15:
      *(int64x2_t *)(a2 + 48) = _Q6;
      *(void *)(a2 + 64) = 0x3FF0000000000000;
      double v12 = v3;
      break;
    default:
      uint64_t v10 = 0x4202A05F20000000;
LABEL_4:
      if (result >= 2) {
        double v12 = 1.0e10;
      }
      else {
        double v12 = 0.0;
      }
      *(void *)(a2 + 48) = v10;
      *(double *)(a2 + 56) = v12;
      *(void *)(a2 + 64) = 0x3FF0000000000000;
      if (result >= 2) {
        double v11 = 1000000.0;
      }
      else {
        double v11 = 0.0;
      }
      break;
  }
  *(double *)(a2 + 80) = v11;
  *(void *)(a2 + 96) = 0x3FF0000000000000;
  double v9 = 0.0;
  double v13 = 1.0;
  if (result < 2)
  {
LABEL_20:
    *(double *)(a2 + 88) = v13 * v9;
    *(double *)(a2 + 72) = v13;
    *(double *)(a2 + 56) = v12 * 0.5;
  }
  else
  {
    if (result == 7)
    {
      *(double *)&uint64_t v16 = 400.0;
LABEL_22:
      double v14 = *(double *)&v16;
    }
    else
    {
      if (result == 8)
      {
        *(void *)(a2 + 88) = 0x412E848000000000;
        *(void *)(a2 + 72) = 0x3FF0000000000000;
        *(_OWORD *)(a2 + 24) = xmmword_263D81960;
        return result;
      }
      double v14 = 1000000.0;
    }
LABEL_24:
    *(double *)(a2 + 88) = v13 * v14;
    *(double *)(a2 + 72) = v13;
  }
  return result;
}

uint64_t NK_Set_XO_PN(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = xmmword_263D81970;
  if (*(_WORD *)(result + 248))
  {
    float64x2_t v2 = (float64x2_t)xmmword_263D81980;
    *(_OWORD *)(a2 + 24) = xmmword_263D81980;
    double v3 = fabs(*(double *)(result + 120)) + -0.1;
    if (v3 > 0.0)
    {
      float64x2_t v2 = vmulq_n_f64((float64x2_t)xmmword_263D81980, fmin(v3 * 19.375 + 1.0, 32.0));
      *(float64x2_t *)(a2 + 24) = v2;
    }
    int v4 = (int)*(double *)(result + 80);
    if ((v4 - 71) <= 0xFFFFFFAE)
    {
      if ((v4 - 101) >= 0xFFFFFF73)
      {
        if ((v4 - 96) >= 0xFFFFFF7D)
        {
          if ((v4 - 91) >= 0xFFFFFF87)
          {
            if ((v4 - 86) >= 0xFFFFFF91)
            {
              if ((v4 - 81) >= 0xFFFFFF9B)
              {
                int32x2_t v6 = vdup_n_s32((v4 - 76) < 0xFFFFFFA5);
                v7.i64[0] = v6.u32[0];
                v7.i64[1] = v6.u32[1];
                float64x2_t v5 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v7, 0x3FuLL)), (int8x16_t)xmmword_263D819F0, (int8x16_t)xmmword_263D819E0);
              }
              else
              {
                float64x2_t v5 = (float64x2_t)xmmword_263D819D0;
              }
            }
            else
            {
              float64x2_t v5 = (float64x2_t)xmmword_263D819C0;
            }
          }
          else
          {
            float64x2_t v5 = (float64x2_t)xmmword_263D819B0;
          }
        }
        else
        {
          float64x2_t v5 = (float64x2_t)xmmword_263D819A0;
        }
      }
      else
      {
        float64x2_t v5 = (float64x2_t)xmmword_263D81990;
      }
      *(float64x2_t *)(a2 + 24) = vmulq_f64(v2, v5);
    }
  }
  return result;
}

BOOL STEU_Checksum_OK(char *a1)
{
  unsigned __int8 v1 = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = a1[1];
  int v3 = 3;
  do
  {
    if (!v2) {
      return 0;
    }
    int v4 = a1[v3 - 1];
    if (v4 == 10 || v4 == 13) {
      return 0;
    }
    v1 += v2;
    ++v3;
    int v2 = v4;
  }
  while (v4 != 125);
  unsigned __int8 v8 = 0;
  v9[0] = a1[v3 - 1];
  v9[1] = a1[v3];
  int v6 = AscToU1((uint64_t)v9, &v8);
  BOOL result = 0;
  if (v6) {
    return v8 == v1;
  }
  return result;
}

uint64_t Comp_NEDvar_UDU(uint64_t result, unsigned int a2, int a3, double (*a4)[3], double *a5)
{
  uint64_t v5 = 0;
  v41[9] = *MEMORY[0x263EF8340];
  int v6 = a3;
  do
  {
    unsigned __int8 v7 = v6++;
    unsigned int v8 = (v7 * v7 + v7) >> 1;
    unsigned int v9 = (v5 + a3);
    unsigned int v10 = (v9 * v9 + v9) >> 1;
    uint64_t v11 = v5;
    unsigned __int8 v12 = v6;
    do
    {
      unsigned int v13 = (v11 + a3);
      if (v5 == v11)
      {
        double v14 = *(double *)(result + 8 * (v10 + (v5 + a3)));
        unsigned int v15 = v13 + 1;
      }
      else
      {
        unsigned int v15 = v13 + 1;
        unsigned int v16 = v9 + (((v13 + 1) * v13) >> 1);
        if (v9 >= v13) {
          unsigned int v16 = v10 + v13;
        }
        double v14 = *(double *)(result + 8 * (v13 + ((v15 * v13) >> 1))) * *(double *)(result + 8 * v16);
      }
      uint64_t v17 = v12;
      uint64_t v18 = (double *)&v41[3 * v5 + v11];
      *uint64_t v18 = v14;
      if (a2 > v15)
      {
        int v19 = v12;
        unsigned int v20 = v19 * v19 + v12;
        int v21 = 2 * v19 + 2;
        unsigned int v22 = (v15 * v7) >> 1;
        uint64_t v23 = v17;
        do
        {
          unsigned int v24 = v23 + v23 * v23;
          unsigned int v25 = v8 + v23;
          if (v23 > v9) {
            unsigned int v25 = v9 + (v24 >> 1);
          }
          double v26 = *(double *)(result + 8 * v25);
          unsigned int v27 = v22 + v23;
          BOOL v28 = v23 > v13;
          uint64_t v29 = v23 + 1;
          double v30 = *(double *)(result + 8 * (v23 + ((unint64_t)v20 >> 1))) * v26;
          unsigned int v31 = v13 + (v24 >> 1);
          if (!v28) {
            unsigned int v31 = v27;
          }
          double v14 = v14 + v30 * *(double *)(result + 8 * v31);
          v20 += v21;
          v21 += 2;
          uint64_t v23 = v29;
        }
        while (v29 < a2);
        *uint64_t v18 = v14;
      }
      *(double *)&v41[3 * v11++ + v5] = v14;
      unsigned __int8 v12 = v17 + 1;
      ++v7;
    }
    while (v11 != 3);
    ++v5;
  }
  while (v5 != 3);
  uint64_t v32 = 0;
  double v33 = 0.0;
  int v34 = a4;
  do
  {
    uint64_t v35 = 0;
    unsigned int v36 = v41;
    double v37 = 0.0;
    do
    {
      uint64_t v38 = 0;
      double v39 = 0.0;
      do
      {
        double v39 = v39 + *(double *)&v36[v38] * (*v34)[v38];
        ++v38;
      }
      while (v38 != 3);
      if (!v32) {
        double v33 = v33 + v39 * (*a4)[v35 + 3];
      }
      double v37 = v37 + v39 * (*a4)[3 * v32 + v35++];
      v36 += 3;
    }
    while (v35 != 3);
    a5[v32++] = v37;
    ++v34;
  }
  while (v32 != 3);
  for (uint64_t i = 0; i != 3; ++i)
  {
    if (a5[i] <= 0.00000001) {
      a5[i] = 0.00000001;
    }
  }
  return result;
}

uint64_t GM_Get_Best_NSSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 1);
  if (a4 - 1 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  unsigned __int8 v7 = (_WORD *)(a1 + 36 * v4 + 8);
  unsigned int v8 = (unsigned __int8 *)(a2 + 48 * v4 + 12);
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      unsigned int v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 8) != 0 && (*v7 & 0x300) != 0x300 && *(v8 - 8) && v8[3])
      {
        int v11 = v10 + 6 * *v8;
        if (v11 <= v6)
        {
          uint64_t v9 = v9;
        }
        else
        {
          int v6 = v11;
          uint64_t v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

uint64_t GncP27_30PopulateRawMeas(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(unsigned __int16 *)(a1 + 88);
  if (*(_WORD *)(a1 + 88))
  {
    if (v4 >= 0x101)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SigMeas Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 88));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      return 0;
    }
    uint64_t result = (uint64_t)gnssOsa_Calloc("GncP27_30PopulateRawMeas", 423, v4, 0xC0uLL);
    *(void *)(a2 + 96) = result;
    if (!result) {
      return result;
    }
  }
  unsigned int v7 = *(unsigned __int16 *)(a1 + 57664);
  if (*(_WORD *)(a1 + 57664))
  {
    if (v7 >= 0x101)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 57664));
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      goto LABEL_16;
    }
    uint64_t v9 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 441, v7, 0x68uLL);
    *(void *)(a2 + 336) = v9;
    if (!v9)
    {
LABEL_16:
      unsigned int v13 = *(void **)(a2 + 96);
      if (v13) {
        free(v13);
      }
      uint64_t result = 0;
      *(void *)(a2 + 96) = 0;
      return result;
    }
  }
  unsigned int v10 = (unsigned __int16 *)(a1 + 84296);
  unsigned int v11 = *(unsigned __int16 *)(a1 + 84296);
  if (*(_WORD *)(a1 + 84296))
  {
    if (v11 >= 0x101)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *v10);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      goto LABEL_82;
    }
    double v14 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 461, v11, 0x108uLL);
    *(void *)(a2 + 352) = v14;
    if (!v14)
    {
LABEL_82:
      int v72 = *(void **)(a2 + 96);
      if (v72) {
        free(v72);
      }
      *(void *)(a2 + 96) = 0;
      unint64_t v73 = *(void **)(a2 + 336);
      if (v73) {
        free(v73);
      }
      uint64_t result = 0;
      *(void *)(a2 + 336) = 0;
      return result;
    }
  }
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 80);
  unsigned int v15 = *(unsigned __int16 *)(a1 + 88);
  *(_WORD *)(a2 + 88) = v15;
  if (v15 >= 0x100) {
    unsigned int v16 = 256;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 224 * v16;
    int v19 = (_WORD *)(*(void *)(a2 + 96) + 190);
    do
    {
      uint64_t v20 = a1 + v17;
      *(v19 - 95) = *(_WORD *)(a1 + v17 + 96);
      unsigned int v21 = *(_DWORD *)(a1 + v17 + 100);
      if (v21 >= 0xA) {
        LOBYTE(v21) = 1;
      }
      *((unsigned char *)v19 - 188) = v21;
      unint64_t v22 = *(unsigned int *)(v20 + 104);
      if (v22 >= 7) {
        char v23 = 0;
      }
      else {
        char v23 = 0x7060503020100uLL >> (8 * v22);
      }
      *((unsigned char *)v19 - 187) = v23;
      *(v19 - 93) = *(_WORD *)(v20 + 108);
      *(_OWORD *)(v19 - 91) = *(_OWORD *)(v20 + 112);
      *(void *)(v19 - 83) = *(void *)(v20 + 128);
      *((unsigned char *)v19 - 158) = *(unsigned char *)(v20 + 136);
      *(_OWORD *)(v19 - 75) = *(_OWORD *)(v20 + 144);
      *(void *)(v19 - 67) = *(void *)(v20 + 160);
      *(void *)(v19 - 63) = *(void *)(v20 + 176);
      *((unsigned char *)v19 - 118) = *(unsigned char *)(v20 + 184);
      *(v19 - 58) = *(_WORD *)(v20 + 186);
      *(_OWORD *)(v19 - 55) = *(_OWORD *)(v20 + 192);
      *(_OWORD *)(v19 - 47) = *(_OWORD *)(v20 + 208);
      *(_OWORD *)(v19 - 39) = *(_OWORD *)(v20 + 224);
      unsigned int v24 = *(_DWORD *)(v20 + 240);
      if (v24 >= 5) {
        LOBYTE(v24) = 0;
      }
      *((unsigned char *)v19 - 62) = v24;
      unsigned int v25 = *(_DWORD *)(v20 + 244);
      if (v25 >= 5) {
        LOBYTE(v25) = 0;
      }
      *((unsigned char *)v19 - 61) = v25;
      *(v19 - 30) = *(_WORD *)(v20 + 248);
      *(v19 - 29) = *(_WORD *)(v20 + 250);
      *((unsigned char *)v19 - 56) = *(unsigned char *)(v20 + 252);
      *(void *)(v19 - 27) = *(void *)(v20 + 256);
      int v26 = *(_DWORD *)(v20 + 264);
      if (v26 == 2) {
        char v27 = 2;
      }
      else {
        char v27 = v26 == 1;
      }
      *((unsigned char *)v19 - 46) = v27;
      *(_OWORD *)(v19 - 19) = *(_OWORD *)(v20 + 272);
      *(_OWORD *)(v19 - 11) = *(_OWORD *)(v20 + 288);
      int v28 = *(_DWORD *)(v20 + 304);
      if (v28 == 2) {
        char v29 = 2;
      }
      else {
        char v29 = 1;
      }
      if (v28) {
        char v30 = v29;
      }
      else {
        char v30 = 0;
      }
      *((unsigned char *)v19 - 6) = v30;
      *(v19 - 2) = *(_WORD *)(v20 + 308);
      *(v19 - 1) = *(_WORD *)(v20 + 310);
      *int v19 = *(_WORD *)(v20 + 312);
      v19 += 96;
      v17 += 224;
    }
    while (v18 != v17);
  }
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 57440);
  *(unsigned char *)(a2 + 108) = *(unsigned char *)(a1 + 57444);
  *(unsigned char *)(a2 + 120) = *(unsigned char *)(a1 + 57456);
  *(void *)(a2 + 176) = *(void *)(a1 + 57512);
  *(void *)(a2 + 256) = *(void *)(a1 + 57592);
  *(_OWORD *)(a2 + 264) = *(_OWORD *)(a1 + 57600);
  *(_OWORD *)(a2 + 280) = *(_OWORD *)(a1 + 57616);
  *(void *)(a2 + 110) = *(void *)(a1 + 57446);
  *(unsigned char *)(a2 + 118) = *(unsigned char *)(a1 + 57454);
  *(unsigned char *)(a2 + 119) = *(unsigned char *)(a1 + 57455);
  *(_WORD *)(a2 + 128) = *(_WORD *)(a1 + 57464);
  *(_DWORD *)(a2 + 132) = *(_DWORD *)(a1 + 57468);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 57472);
  *(void *)(a2 + 152) = *(void *)(a1 + 57488);
  *(_WORD *)(a2 + 160) = *(_WORD *)(a1 + 57496);
  *(unsigned char *)(a2 + 162) = *(unsigned char *)(a1 + 57498);
  *(void *)(a2 + 168) = *(void *)(a1 + 57504);
  *(_WORD *)(a2 + 184) = *(_WORD *)(a1 + 57520);
  *(_DWORD *)(a2 + 188) = *(_DWORD *)(a1 + 57524);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 57528);
  *(_WORD *)(a2 + 208) = *(_WORD *)(a1 + 57544);
  *(_DWORD *)(a2 + 212) = *(_DWORD *)(a1 + 57548);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(a1 + 57552);
  *(_WORD *)(a2 + 232) = *(_WORD *)(a1 + 57568);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 57572);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 57576);
  *(_OWORD *)(a2 + 296) = *(_OWORD *)(a1 + 57632);
  *(void *)(a2 + 312) = *(void *)(a1 + 57648);
  *(_DWORD *)(a2 + 320) = *(_DWORD *)(a1 + 57656);
  unsigned int v31 = *(unsigned __int16 *)(a1 + 57664);
  *(_WORD *)(a2 + 328) = v31;
  if (v31 >= 0x100) {
    unsigned int v32 = 256;
  }
  else {
    unsigned int v32 = v31;
  }
  if (v32)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 104 * v32;
    uint64_t v35 = *(void *)(a2 + 336);
    uint64_t v36 = a1 + 57672;
    uint64_t v37 = a1 + 57720;
    do
    {
      uint64_t v38 = v35 + v33;
      *(_WORD *)(v35 + v33) = *(_WORD *)(v36 + v33);
      unsigned int v39 = *(_DWORD *)(a1 + 57676 + v33);
      if (v39 >= 5) {
        LOBYTE(v39) = 1;
      }
      *(unsigned char *)(v38 + 2) = v39;
      *(_OWORD *)(v38 + 8) = *(_OWORD *)(a1 + v33 + 57680);
      unsigned int v40 = *(_DWORD *)(a1 + 57696 + v33);
      if (v40 >= 5) {
        LOBYTE(v40) = 1;
      }
      *(unsigned char *)(v38 + 24) = v40;
      *(unsigned char *)(v38 + 25) = *(unsigned char *)(v36 + v33 + 28);
      *(_OWORD *)(v38 + 32) = *(_OWORD *)(v37 + v33 - 16);
      *(_OWORD *)(v38 + 48) = *(_OWORD *)(v37 + v33);
      *(_OWORD *)(v38 + 64) = *(_OWORD *)(v37 + v33 + 16);
      *(_OWORD *)(v38 + 80) = *(_OWORD *)(v37 + v33 + 32);
      *(void *)(v38 + 96) = *(void *)(a1 + 57768 + v33);
      v33 += 104;
    }
    while (v34 != v33);
  }
  int v41 = *v10;
  *(_WORD *)(a2 + 344) = v41;
  if (v41)
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    uint64_t v44 = a1 + 84516;
    uint64_t v45 = a1 + 84592;
    uint64_t v46 = a1 + 84560;
    uint64_t v47 = a1 + 84400;
    uint64_t v48 = 48;
    v49.i64[0] = 0x200000002;
    v49.i64[1] = 0x200000002;
    do
    {
      uint64_t v50 = *(void *)(a2 + 352);
      uint64_t v51 = v50 + 264 * v43;
      unint64_t v52 = *(unsigned int *)(a1 + 296 * v43 + 84304);
      if (v52 >= 7) {
        char v53 = 0;
      }
      else {
        char v53 = 0x7060503020100uLL >> (8 * v52);
      }
      *(unsigned char *)uint64_t v51 = v53;
      *(_WORD *)(v51 + 2) = *(_WORD *)(a1 + 296 * v43 + 84308);
      *(unsigned char *)(v51 + 4) = *(unsigned char *)(a1 + 296 * v43 + 84310);
      *(_OWORD *)(v51 + 144) = *(_OWORD *)(a1 + 296 * v43 + 84448);
      int32x4_t v54 = *(int32x4_t *)(a1 + 296 * v43 + 84464);
      int32x4_t v55 = *(int32x4_t *)(a1 + 296 * v43 + 84480);
      int8x8_t v56 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v54, v49), (int16x8_t)vceqq_s32(v55, v49)));
      *(int8x8_t *)(v51 + 160) = vbic_s8(vsub_s8(vand_s8(v56, (int8x8_t)0x202020202020202), vmvn_s8(v56)), vmovn_s16(vuzp1q_s16((int16x8_t)vceqzq_s32(v54), (int16x8_t)vceqzq_s32(v55))));
      int v57 = *(_DWORD *)(a1 + 296 * v43 + 84496);
      if (v57 == 2) {
        char v58 = 2;
      }
      else {
        char v58 = 1;
      }
      if (v57) {
        char v59 = v58;
      }
      else {
        char v59 = 0;
      }
      *(unsigned char *)(v51 + 168) = v59;
      *(void *)(v51 + 176) = *(void *)(a1 + 296 * v43 + 84504);
      LODWORD(v60) = *(unsigned __int16 *)(a1 + 296 * v43 + 84512);
      *(_WORD *)(v51 + 184) = v60;
      if (v60 >= 2) {
        uint64_t v60 = 2;
      }
      else {
        uint64_t v60 = v60;
      }
      if (v60)
      {
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v63 = v50 + v42;
        do
        {
          unsigned int v64 = *(_DWORD *)(v44 + 4 * v62);
          if (v64 >= 0xA) {
            LOBYTE(v64) = 1;
          }
          uint64_t v65 = v63 + v62;
          *(unsigned char *)(v65 + 186) = v64;
          unint64_t v66 = (void *)(v63 + v61);
          v66[24] = *(void *)(v46 + v61 - 32);
          v66[26] = *(void *)(v46 + v61 - 16);
          v66[28] = *(void *)(v46 + v61);
          v66[30] = *(void *)(v46 + v61 + 16);
          *(unsigned char *)(v65 + 256) = *(unsigned char *)(v45 + v62++);
          v61 += 8;
        }
        while (v60 != v62);
      }
      uint64_t v67 = v50 + 264 * v43;
      unsigned int v68 = *(_DWORD *)(a1 + 296 * v43 + 84312);
      if (v68 >= 5) {
        LOBYTE(v68) = 0;
      }
      *(unsigned char *)(v67 + 8) = v68;
      *(void *)(v67 + 16) = *(void *)(a1 + 296 * v43 + 84320);
      *(_OWORD *)(v67 + 120) = *(_OWORD *)(a1 + 296 * v43 + 84424);
      *(void *)(v67 + 136) = *(void *)(a1 + 296 * v43 + 84440);
      uint64_t v69 = v50 + v48;
      uint64_t v70 = -24;
      do
      {
        unsigned int v71 = (void *)(v69 + v70);
        *unsigned int v71 = *(void *)(v47 + v70 - 48);
        v71[3] = *(void *)(v47 + v70 - 24);
        v71[6] = *(void *)(v47 + v70);
        v71[9] = *(void *)(v47 + v70 + 24);
        v70 += 8;
      }
      while (v70);
      if (v43 > 0xFE) {
        break;
      }
      ++v43;
      v44 += 296;
      v45 += 296;
      v42 += 264;
      v46 += 296;
      v48 += 264;
      v47 += 296;
    }
    while (v43 < *(unsigned __int16 *)(a2 + 344));
  }
  if (*(_DWORD *)(a1 + 160152))
  {
    *(_DWORD *)(a2 + 360) = *(_DWORD *)(a1 + 160080);
    *(_OWORD *)(a2 + 368) = *(_OWORD *)(a1 + 160088);
    *(_OWORD *)(a2 + 384) = *(_OWORD *)(a1 + 160104);
    *(_OWORD *)(a2 + 400) = *(_OWORD *)(a1 + 160120);
    *(_OWORD *)(a2 + 416) = *(_OWORD *)(a1 + 160136);
  }
  return 1;
}

BOOL R8_EQ(const double *a1, const double *a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)a1 | 0x8000000000000000;
  if (*(uint64_t *)a1 < 0) {
    unint64_t v3 = -v2;
  }
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 | 0x8000000000000000;
  if (*(uint64_t *)a2 < 0) {
    unint64_t v5 = -v4;
  }
  uint64_t v6 = ~v2 & 0x7FF0000000000000;
  uint64_t v7 = v2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v8 = ~v4 & 0x7FF0000000000000;
  uint64_t v9 = v4 & 0xFFFFFFFFFFFFFLL;
  unint64_t v10 = v5 - v3;
  BOOL v11 = v3 >= v5;
  unint64_t v12 = v3 - v5;
  if (!v11) {
    unint64_t v12 = v10;
  }
  BOOL v13 = v12 < 4;
  if (v8) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v9 == 0;
  }
  if (!v14) {
    BOOL v13 = 0;
  }
  if (v6) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v7 == 0;
  }
  return v15 && v13;
}

uint64_t Core_Get_TM_FSP_Time(unsigned int *a1, unsigned int *a2)
{
  *a1 = 0;
  *a2 = 0;
  if (!*(unsigned char *)p_NA) {
    return 0;
  }
  int v4 = *(_DWORD *)(p_NA + 392);
  double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  uint64_t v6 = p_NA;
  int v7 = *(_DWORD *)(p_NA + 396);
  int v8 = **(_DWORD **)(p_api + 8) - v7;
  if ((unint64_t)v5 - v4 > 0xDBBA0 || v8 > 900000 || v8 <= -5001)
  {
    EvCrt_v("Core_Get_TM_FSP_Time: WARNING: Deleted OS_Time %u Age %d TTick %u Age %d ms", *(_DWORD *)(p_NA + 392), (unint64_t)v5 - v4, v7, v8);
    uint64_t result = 0;
    uint64_t v12 = p_NA;
    *(unsigned char *)p_NA = 0;
    *(void *)(v12 + 392) = 0;
    return result;
  }
  if (!*(unsigned char *)p_NA) {
    return 0;
  }
  *a1 = *(_DWORD *)(p_NA + 392);
  *a2 = *(_DWORD *)(v6 + 396);
  return 1;
}

uint64_t Core_Get_Ref_Time(int a1, double *a2, __int16 *a3, double *a4)
{
  uint64_t v4 = p_NA;
  if (!*(unsigned char *)(p_NA + 2)) {
    return 0;
  }
  int v5 = a1 - *(_DWORD *)(p_NA + 404);
  if ((v5 - 900001) >= 0xFFF238A7)
  {
    *a2 = *(double *)(p_NA + 408);
    *a3 = *(_WORD *)(v4 + 416);
    *a4 = *(double *)(v4 + 424);
    double v8 = (double)v5;
    Inc_GPS_TOW((double)v5 * 0.001, a2, a3);
    *a4 = *a4 + v8 * 0.00000001;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(p_NA + 2) = 0;
  }
  return result;
}

uint64_t Get_FSP_Time(unsigned int a1, __int16 *a2, double *a3, double *a4, unsigned __int8 *a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(p_NA + 3)) {
    return 0;
  }
  *(void *)uint64_t v35 = 0;
  unsigned int v34 = 0;
  unsigned int v33 = 0;
  FS_Pulse_TTicuint64_t k = API_Get_FS_Pulse_TTick(&v34, &v33, &v35[1], v35);
  uint64_t result = 0;
  if (!FS_Pulse_TTick) {
    return result;
  }
  unsigned int v12 = v35[1];
  double v13 = (double)(int)(v35[1] - v34) + (double)v33 * -0.0000152587891;
  if (fabs(v13) > 60000.0)
  {
    EvCrt_v("Get_FSP_Time:  ERROR:  fabs(DeltaTTick) = fabs(%g) > %d", (double)(int)(v35[1] - v34) + (double)v33 * -0.0000152587891, 60000);
    return 0;
  }
  unsigned int v32 = v34;
  uint64_t v14 = *(void *)(p_api + 80);
  double v15 = *(double *)(v14 + 920) / 299792458.0;
  unsigned int v31 = v33;
  if (v15 > 0.000001)
  {
    EvLog("Get_FSP_Time:  Neglecting Clock Drift in FSP Time propogation!");
    double v16 = 0.0;
    double v15 = 0.000001;
  }
  else
  {
    double v16 = *(double *)(v14 + 184);
  }
  uint64_t v17 = 0;
  unsigned int v18 = v35[0];
  unsigned int v19 = v35[0] - (int)v13;
  uint64_t v20 = p_NA;
  char v21 = 1;
  while (1)
  {
    char v22 = v21;
    if (*(unsigned char *)(v20 + v17 + 3))
    {
      uint64_t v23 = v20 + 8 * v17;
      if (*(double *)(v23 + 456) > 0.0)
      {
        *a2 = *(_WORD *)(v20 + 2 * v17 + 448);
        *a3 = *(double *)(v23 + 432);
        double v24 = *(double *)(v23 + 456) * *(double *)(v23 + 456);
        *a4 = v24;
        unsigned int v25 = *(_DWORD *)(v20 + 4 * v17 + 488);
        if (!*(unsigned char *)(v20 + 5)) {
          break;
        }
        if (v25 >= v19 - 500 && v25 <= v19 + 400) {
          break;
        }
      }
    }
    char v21 = 0;
    uint64_t v17 = 1;
    if ((v22 & 1) == 0)
    {
      char v27 = "Get_FSP_Time:  WARNING:  No pulse found !";
LABEL_19:
      EvLog(v27);
      return 0;
    }
  }
  int v28 = a1 - v12;
  if (a1 == v12)
  {
    unsigned int v29 = v18;
  }
  else
  {
    if (a1 < v12)
    {
      char v27 = "Get_FSP_Time:  ReqTTick earlier than FSP FS_DBTT_TTick !";
      goto LABEL_19;
    }
    unsigned int v29 = v18;
    double v13 = v13 + (double)v28;
  }
  double v30 = (1.0 - v16) * (v13 * 0.001);
  *a4 = v24 + v15 * v30 * (v15 * v30);
  Inc_GPS_TOW(v30, a3, a2);
  EvLog_v("Get_FSP_Time:  %d %d %d %d %d %d %g %d %g %d %d %g %g", a1, v17, v32, v31, v29, v19, *(double *)(p_NA + 8 * v17 + 432), v25, v30, *a2, (int)*a3, *a3 - (double)(int)*a3, *a4 * 1000000.0 * 1000000.0);
  *a5 = 2;
  return 1;
}

BOOL Core_Get_GPS_TimePos(unsigned int a1, unsigned char *a2, unsigned char *a3, int *a4, double *a5, double *a6, uint64_t a7, double *a8, double *a9)
{
  v24[3] = *(double *)MEMORY[0x263EF8340];
  __int16 v21 = 0;
  double v18 = 0.0;
  *a2 = 0;
  *a3 = 0;
  *a8 = 0.0;
  *a9 = 0.0;
  *a6 = 0.0;
  if (Get_FSP_Time(a1, &v21, a5, &v18, &v22))
  {
    *a6 = sqrt(v18) * 3.0;
    *a2 = 1;
  }
  char v23 = 0;
  double v19 = 0.0;
  if (Core_Get_Pos_LLH(a1, 150000, 1, &v20, a7, (uint64_t)v24, (uint64_t *)&v19, &v23, &v22, &v17, a4)
    && v23)
  {
    *a8 = sqrt(v24[0]) * 3.0;
    *a9 = sqrt(v19) * 3.0;
    *a3 = 1;
  }
  return *a2 || *a3 != 0;
}

uint64_t Core_Get_Pos_LLH(int a1, int a2, int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned char *a8, unsigned char *a9, _DWORD *a10, int *a11)
{
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  uint64_t v11 = p_NA;
  if (!*(unsigned char *)(p_NA + 8)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    *(_DWORD *)(p_NA + 632) = 1;
  }
  unsigned int v12 = *(_DWORD **)(p_api + 8);
  if (*v12) {
    int v13 = *(_DWORD *)(v11 + 544) + *v12 - v12[4];
  }
  else {
    int v13 = 0;
  }
  int v15 = a1 - v13;
  if (a1 - v13 <= -3001)
  {
    int v16 = a3;
    int v17 = a7;
    uint64_t v33 = a6;
    double v18 = a4;
    uint64_t v19 = a5;
    int v20 = a2;
    __int16 v21 = a8;
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_LLH [0]", a1 - v13, a1, v13);
    a8 = v21;
    a2 = v20;
    a5 = v19;
    a4 = v18;
    a6 = v33;
    a7 = v17;
    a3 = v16;
    int v15 = 999999000;
  }
  if (v15 <= a2)
  {
    *a4 = v13;
    uint64_t v22 = p_NA;
    uint64_t v23 = *(void *)(p_NA + 568);
    *(_OWORD *)a5 = *(_OWORD *)(p_NA + 552);
    *(void *)(a5 + 16) = v23;
    uint64_t v24 = *(void *)(v22 + 592);
    *(_OWORD *)a6 = *(_OWORD *)(v22 + 576);
    *(void *)(a6 + 16) = v24;
    *a7 = *(void *)(v22 + 624);
    *a8 = *(unsigned char *)(v22 + 9);
    *a9 = *(unsigned char *)(v22 + 656);
    int v25 = *(_DWORD *)(v22 + 640);
    *a10 = v25;
    int v26 = *(_DWORD *)(v22 + 632);
    if (!v26)
    {
      *a11 = 0;
      int v27 = 1;
      switch(v25)
      {
        case 0:
        case 6:
          goto LABEL_20;
        case 1:
        case 2:
        case 5:
          int v27 = 4;
          goto LABEL_20;
        case 3:
        case 4:
          int v27 = 3;
LABEL_20:
          *a11 = v27;
          goto LABEL_21;
        case 7:
        case 8:
          *a11 = 2;
          goto LABEL_31;
        default:
          goto LABEL_21;
      }
    }
    *a11 = v26;
    if ((v25 - 7) >= 2)
    {
LABEL_21:
      if (*(unsigned char *)(v22 + 9))
      {
        uint64_t v28 = 0x412E848000000000;
        if (*(double *)a7 > 1000000.0 || (uint64_t v28 = 0x4059000000000000, *(double *)a7 < 100.0)) {
          *a7 = v28;
        }
      }
      if (*(unsigned char *)(v22 + 8) && *(double *)(a6 + 8) < 250000.0)
      {
        double v29 = *(double *)a6;
        *(void *)(a6 + 8) = *(void *)a6;
        if (v29 < 250000.0) {
          *(int64x2_t *)a6 = vdupq_n_s64(0x410E848000000000uLL);
        }
        *(void *)(a6 + 16) = 0;
      }
    }
LABEL_31:
    double v30 = *(double *)a6;
    double v31 = *(double *)(a6 + 8);
    if (*(double *)a6 < v31)
    {
      *(double *)(a6 + 8) = v30;
      *(void *)(a6 + 16) = 0;
      double v31 = v30;
    }
    if (a3)
    {
      double v32 = (double)v15 * 0.015 * ((double)v15 * 0.015);
      if (v31 < v32)
      {
        *(double *)(a6 + 8) = v30;
        if (v30 < v32)
        {
          *(double *)a6 = v32;
          *(double *)(a6 + 8) = v32;
        }
        *(void *)(a6 + 16) = 0;
      }
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(_WORD *)(p_NA + 8) = 0;
  }
  return result;
}

uint64_t Core_Get_Clk_Drift(int a1, int a2, unsigned int *a3, double *a4, double *a5, unsigned __int8 *a6)
{
  if (!*(unsigned char *)(p_NA + 6)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10)
  {
    EvLog("Core_Get_Clk_Drift: Ext Freq Assist skipped in Airborne mode");
    return 0;
  }
  unsigned int v12 = *(_DWORD **)(p_api + 8);
  if (*v12) {
    int v13 = *(_DWORD *)(p_NA + 496) + *v12 - v12[4];
  }
  else {
    int v13 = 0;
  }
  int v14 = a1 - v13;
  if (a1 - v13 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Clk_Drift", a1 - v13, a1, v13);
    int v14 = 999999000;
  }
  if (v14 / 1000 <= a2)
  {
    *a3 = v13;
    uint64_t v15 = p_NA;
    *a4 = *(double *)(p_NA + 504);
    *a5 = *(double *)(v15 + 512);
    *a6 = *(unsigned char *)(v15 + 520);
    double v16 = 9.0e-16;
    if (*a5 < 9.0e-16 || (double v16 = *a5, *a5 < 2.77777778e-14))
    {
      if (v14 > 899999) {
        *a5 = 2.77777778e-14;
      }
      else {
        *a5 = v16
      }
            + (2.77777778e-14 - v16)
            * (-((double)(900 - v14 / 1000) * 0.00111111111 * ((double)(900 - v14 / 1000) * 0.00111111111))
             * ((double)(900 - v14 / 1000)
              * 0.00111111111)
             + 1.0);
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(p_NA + 6) = 0;
  }
  return result;
}

uint64_t Core_Get_Pos_H(int a1, int a2, double *a3, double *a4)
{
  uint64_t v4 = p_NA;
  if (!*(unsigned char *)(p_NA + 9)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    *(_DWORD *)(p_NA + 632) = 1;
  }
  double v8 = *(int **)(p_api + 8);
  int v9 = *v8;
  if (*v8) {
    int v9 = *(_DWORD *)(v4 + 544) + v9 - v8[4];
  }
  int v10 = a1 - v9;
  if (a1 - v9 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_H", a1 - v9, a1, v9);
    uint64_t v4 = p_NA;
    int v10 = 999999000;
  }
  if (v10 <= a2)
  {
    *a3 = *(double *)(v4 + 568);
    *a4 = *(double *)(v4 + 624);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(v4 + 9) = 0;
  }
  return result;
}

uint64_t Core_Get_Static_Status(unsigned __int8 *a1)
{
  uint64_t v1 = p_NA;
  if (!*(unsigned char *)(p_NA + 376)) {
    return 0;
  }
  if (!*(unsigned char *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v1 = p_NA;
    int v4 = *(_DWORD *)(p_NA + 26724);
    int v5 = (unint64_t)v3 - v4;
    if (v5 > -3001)
    {
      if (v5 < 2001)
      {
        *a1 = *(unsigned char *)(p_NA + 26728);
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Static_Status", (unint64_t)v3 - v4, (unint64_t)v3, v4);
      uint64_t v1 = p_NA;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(v1 + 376) = 0;
  return result;
}

uint64_t Core_Get_Ped_Status(_DWORD *a1, unsigned char *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 377)) {
    return 0;
  }
  if (!*(unsigned char *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v2 = p_NA;
    int v6 = *(_DWORD *)(p_NA + 26732);
    int v7 = (unint64_t)v5 - v6;
    if (v7 > -3001)
    {
      if (v7 < 2001)
      {
        *a1 = *(_DWORD *)(p_NA + 26736);
        *a2 = *(unsigned char *)(v2 + 26740);
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Ped_Status", (unint64_t)v5 - v6, (unint64_t)v5, v6);
      uint64_t v2 = p_NA;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(v2 + 377) = 0;
  return result;
}

uint64_t Core_Get_ExtA_DMS(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 378)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26744);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_DMS", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 378) = 0;
    return result;
  }
  if (v7 >= 43200001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 26744);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 26752);
  *(void *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_UAC(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 379)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 26756);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_UAC", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 379) = 0;
    return result;
  }
  if (v7 >= 43200001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 26756);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 26764);
  *(void *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_FIV_Ind(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 380)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 26768);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_FIV_Ind", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 380) = 0;
    return result;
  }
  if (v7 >= 43200001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 26768);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 26776);
  *(void *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_Alt(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 382)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26784);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_Alt", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 382) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  long long v9 = *(_OWORD *)(p_NA + 26800);
  *a2 = *(_OWORD *)(p_NA + 26784);
  a2[1] = v9;
  return 1;
}

uint64_t Core_Get_ExtA_MapV(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 383)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26816);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_MapV", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 383) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = p_NA;
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26816);
  long long v10 = *(_OWORD *)(v9 + 26848);
  long long v11 = *(_OWORD *)(v9 + 26864);
  long long v12 = *(_OWORD *)(v9 + 26832);
  *(void *)(a2 + 64) = *(void *)(v9 + 26880);
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 16) = v12;
  return 1;
}

uint64_t Core_Get_ExtA_SpdC(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 384)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26888);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_SpdC", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 384) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 26904);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26888);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_AT_Vel(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 385)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26912);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_AT_Vel", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 385) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 26928);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26912);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_V_Vel(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 386)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26936);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_V_Vel", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 386) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 26952);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26936);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_Heading(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 387)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26960);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_Heading", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 387) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 26976);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 26960);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_TunnelEP(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 388)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 379) && *(_DWORD *)(p_NA + 26760) == 10 && *(int *)(p_NA + 26764) >= 2) {
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(p_NA + 26984);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_TunnelEP", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)(v2 + 388) = 0;
    return result;
  }
  if (v7 >= 30001) {
    goto LABEL_8;
  }
  if (v7 > a1) {
    return 0;
  }
  long long v9 = *(_OWORD *)(p_NA + 27032);
  long long v11 = *(_OWORD *)(p_NA + 26984);
  long long v10 = *(_OWORD *)(p_NA + 27000);
  a2[2] = *(_OWORD *)(p_NA + 27016);
  a2[3] = v9;
  *a2 = v11;
  a2[1] = v10;
  return 1;
}

uint64_t Core_Get_Speed(int a1, unsigned int *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5 = p_NA;
  if (!*(unsigned char *)(p_NA + 389)) {
    return 0;
  }
  if (!*(unsigned char *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    double v6 = *(_DWORD **)(p_api + 8);
    if (*v6) {
      int v7 = *(_DWORD *)(p_NA + 27048) + *v6 - v6[4];
    }
    else {
      int v7 = 0;
    }
    if (a1 - v7 > -3001)
    {
      if (a1 - v7 < 3001)
      {
        *a2 = v7;
        *a3 = *(double *)(v5 + 27056);
        *a4 = *(double *)(v5 + 27064);
        *a5 = 0.0;
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Speed", a1 - v7, a1, v7);
      uint64_t v5 = p_NA;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 389) = 0;
  return result;
}

uint64_t Core_Get_GSpeed(int a1, unsigned int *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5 = p_NA;
  if (!*(unsigned char *)(p_NA + 390)) {
    return 0;
  }
  if (!*(unsigned char *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    double v6 = *(_DWORD **)(p_api + 8);
    if (*v6) {
      int v7 = *(_DWORD *)(p_NA + 27072) + *v6 - v6[4];
    }
    else {
      int v7 = 0;
    }
    if (a1 - v7 > -3001)
    {
      if (a1 - v7 < 3001)
      {
        *a2 = v7;
        *a3 = *(double *)(v5 + 27080);
        *a4 = *(double *)(v5 + 27088);
        *a5 = 0.0;
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "GSpeed", a1 - v7, a1, v7);
      uint64_t v5 = p_NA;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 390) = 0;
  return result;
}

uint64_t Core_Get_Track(int a1, unsigned int *a2, double *a3, double *a4, double *a5, double *a6)
{
  uint64_t v6 = p_NA;
  if (!*(unsigned char *)(p_NA + 391)) {
    return 0;
  }
  if (!*(unsigned char *)(p_NA + 379) || *(_DWORD *)(p_NA + 26760) != 10 || *(int *)(p_NA + 26764) < 2)
  {
    int v7 = *(_DWORD **)(p_api + 8);
    if (*v7) {
      int v8 = *(_DWORD *)(p_NA + 27096) + *v7 - v7[4];
    }
    else {
      int v8 = 0;
    }
    if (a1 - v8 > -3001)
    {
      if (a1 - v8 < 3001)
      {
        *a2 = v8;
        *a3 = *(double *)(v6 + 27112);
        *a4 = *(double *)(v6 + 27104);
        *a5 = *(double *)(v6 + 27120);
        *a6 = 0.0;
        return 1;
      }
    }
    else
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Track", a1 - v8, a1, v8);
      uint64_t v6 = p_NA;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(v6 + 391) = 0;
  return result;
}

uint64_t Core_Get_GPS_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 - 33) < 0xFFFFFFE0) {
    return 0;
  }
  uint64_t v4 = (a1 - 1);
  if (a2 >= 619315201 && *(unsigned char *)(p_NA + v4 + 44))
  {
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 3260);
    if (v5 >= 619315201 && a2 - v5 >= 15724801)
    {
      uint64_t result = 0;
      *(unsigned char *)(p_NA + v4 + 44) = 0;
      return result;
    }
  }
  else
  {
    if (!*(unsigned char *)(p_NA + v4 + 44)) {
      return 0;
    }
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 3260);
  }
  uint64_t v7 = p_NA + 36 * v4;
  int v8 = *(_DWORD *)(v7 + 3264);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v8;
  *(_WORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 10) = *(_WORD *)(v7 + 3268);
  long long v9 = (unsigned char *)(v7 + 3270);
  unsigned int v10 = 9;
  uint64_t v11 = 12;
  do
  {
    uint64_t v12 = a3 + v11;
    *(unsigned char *)uint64_t v12 = *v9;
    *(unsigned char *)(v12 + 1) = v9[1];
    *(_WORD *)(v12 + 2) = v9[2];
    --v10;
    v11 += 4;
    v9 += 3;
  }
  while (v10 > 1);
  int v13 = *(_DWORD *)a3;
  if (a2 >= 1 && !v13)
  {
    *(_DWORD *)a3 = a2;
    int v13 = a2;
  }
  if (a2) {
    BOOL v14 = v13 < a2 + 50;
  }
  else {
    BOOL v14 = 1;
  }
  unsigned int v15 = v14;
  if (v13) {
    BOOL v16 = v13 < 619315201;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16) {
    return 0;
  }
  else {
    return v15;
  }
}

uint64_t Core_Get_QZSS_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 + 53) < 0xF6u) {
    return 0;
  }
  uint64_t v4 = (a1 - 193);
  if (a2 >= 619315201 && *(unsigned char *)(p_NA + v4 + 86))
  {
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 5212);
    if (v5 >= 619315201 && a2 - v5 >= 15724801)
    {
      uint64_t result = 0;
      *(unsigned char *)(p_NA + v4 + 86) = 0;
      return result;
    }
  }
  else
  {
    if (!*(unsigned char *)(p_NA + v4 + 86)) {
      return 0;
    }
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 5212);
  }
  uint64_t v7 = p_NA + 36 * v4;
  int v8 = *(_DWORD *)(v7 + 5216);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v8;
  *(_WORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 10) = *(_WORD *)(v7 + 5220);
  long long v9 = (unsigned char *)(v7 + 5222);
  unsigned int v10 = 9;
  uint64_t v11 = 12;
  do
  {
    uint64_t v12 = a3 + v11;
    *(unsigned char *)uint64_t v12 = *v9;
    *(unsigned char *)(v12 + 1) = v9[1];
    *(_WORD *)(v12 + 2) = v9[2];
    --v10;
    v11 += 4;
    v9 += 3;
  }
  while (v10 > 1);
  int v13 = *(_DWORD *)a3;
  if (a2 >= 1 && !v13)
  {
    *(_DWORD *)a3 = a2;
    int v13 = a2;
  }
  if (a2) {
    BOOL v14 = v13 < a2 + 50;
  }
  else {
    BOOL v14 = 1;
  }
  unsigned int v15 = v14;
  if (v13) {
    BOOL v16 = v13 < 619315201;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16) {
    return 0;
  }
  else {
    return v15;
  }
}

BOOL Core_Get_GLON_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 - 25) < 0xFFFFFFE8) {
    return 0;
  }
  uint64_t v3 = (a1 - 1);
  if (a2 < 619315201 || !*(unsigned char *)(p_NA + v3 + 120))
  {
    if (*(unsigned char *)(p_NA + v3 + 120)) {
      goto LABEL_10;
    }
    return 0;
  }
  int v4 = *(_DWORD *)(p_NA + 36 * v3 + 25808);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    BOOL result = 0;
    *(unsigned char *)(p_NA + v3 + 120) = 0;
    return result;
  }
LABEL_10:
  uint64_t v7 = p_NA + 36 * v3;
  long long v8 = *(_OWORD *)(v7 + 25824);
  long long v9 = *(_OWORD *)(v7 + 25808);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 25840);
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v8;
  int v10 = *(_DWORD *)a3;
  if (a2 >= 1 && !v10)
  {
    *(_DWORD *)a3 = a2;
    int v10 = a2;
  }
  if (v10 && v10 < 619315201) {
    return 0;
  }
  return !a2 || v10 < a2 + 50;
}

BOOL Core_Get_GAL_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 - 37) < 0xFFFFFFDC) {
    return 0;
  }
  uint64_t v3 = (a1 - 1);
  if (a2 < 619315201 || !*(unsigned char *)(p_NA + v3 + 183))
  {
    if (*(unsigned char *)(p_NA + v3 + 183)) {
      goto LABEL_10;
    }
    return 0;
  }
  int v4 = *(_DWORD *)(p_NA + 36 * v3 + 8756);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    BOOL result = 0;
    *(unsigned char *)(p_NA + v3 + 183) = 0;
    return result;
  }
LABEL_10:
  uint64_t v7 = p_NA + 36 * v3;
  long long v9 = *(_OWORD *)(v7 + 8756);
  long long v8 = *(_OWORD *)(v7 + 8772);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 8788);
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v8;
  int v10 = *(_DWORD *)a3;
  if (a2 >= 1 && !v10)
  {
    *(_DWORD *)a3 = a2;
    int v10 = a2;
  }
  if (v10 && v10 < 619315201) {
    return 0;
  }
  return !a2 || v10 < a2 + 50;
}

BOOL Core_Get_BDS_Alm(int a1, int a2, _OWORD *a3)
{
  if ((a1 - 64) < 0xFFFFFFC1) {
    return 0;
  }
  uint64_t v3 = (a1 - 1);
  if (a2 < 619315201 || !*(unsigned char *)(p_NA + v3 + 284))
  {
    if (*(unsigned char *)(p_NA + v3 + 284)) {
      goto LABEL_10;
    }
    return 0;
  }
  int v4 = *(_DWORD *)(p_NA + 44 * v3 + 19688);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    BOOL result = 0;
    *(unsigned char *)(p_NA + v3 + 284) = 0;
    return result;
  }
LABEL_10:
  uint64_t v7 = (long long *)(p_NA + 44 * v3 + 19688);
  long long v9 = *v7;
  long long v8 = v7[1];
  *(_OWORD *)((char *)a3 + 28) = *(long long *)((char *)v7 + 28);
  *a3 = v9;
  a3[1] = v8;
  int v10 = *(_DWORD *)a3;
  if (a2 >= 1 && !v10)
  {
    *(_DWORD *)a3 = a2;
    int v10 = a2;
  }
  if (v10 && v10 < 619315201) {
    return 0;
  }
  return !a2 || v10 < a2 + 50;
}

BOOL Core_Get_NVIC_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 - 15) < 0xFFFFFFF2) {
    return 0;
  }
  uint64_t v3 = (a1 - 1);
  if (a2 < 619315201 || !*(unsigned char *)(p_NA + v3 + 362))
  {
    if (*(unsigned char *)(p_NA + v3 + 362)) {
      goto LABEL_10;
    }
    return 0;
  }
  int v4 = *(_DWORD *)(p_NA + 52 * v3 + 23544);
  if (v4 >= 619315201 && a2 - v4 >= 15724801)
  {
    BOOL result = 0;
    *(unsigned char *)(p_NA + v3 + 362) = 0;
    return result;
  }
LABEL_10:
  uint64_t v7 = p_NA + 52 * v3 + 23544;
  long long v9 = *(_OWORD *)(v7 + 16);
  long long v8 = *(_OWORD *)(v7 + 32);
  long long v10 = *(_OWORD *)v7;
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v8;
  *(_OWORD *)a3 = v10;
  int v11 = *(_DWORD *)a3;
  if (a2 >= 1 && !v11)
  {
    *(_DWORD *)a3 = a2;
    int v11 = a2;
  }
  if (v11 && v11 < 619315201) {
    return 0;
  }
  return !a2 || v11 < a2 + 50;
}

BOOL Core_Get_GPS_Eph(uint64_t a1, uint64_t a2, int *a3)
{
  if ((a1 - 33) < 0xFFFFFFE0) {
    return 0;
  }
  uint64_t v6 = (a1 - 1);
  uint64_t v7 = (unsigned char *)(p_NA + v6 + 12);
  if (!a2 && !a3)
  {
    *uint64_t v7 = 0;
    EvLog_d("Core_Get_GPS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  int v9 = *v7;
  if ((int)a2 >= 619315201 && v9)
  {
    uint64_t v10 = *(unsigned int *)(p_NA + 80 * v6 + 700);
    if ((int)v10 >= 619315201 && (int)a2 - (int)v10 >= 21601)
    {
      EvLog_nd("Core_Get_GPS_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v10);
      BOOL result = 0;
      *(unsigned char *)(p_NA + v6 + 12) = 0;
      return result;
    }
    if (!a3) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (!a3 || !v9) {
      return result;
    }
  }
  UnCompact_GPS_BinEph((uint64_t)a3, p_NA + 80 * v6 + 700);
  unsigned int v13 = a3[2];
  uint64_t v14 = 16 * (unsigned __int16)a3[7];
  unsigned int v15 = a3[17];
  if ((v13 & 0xFFC000) != 0 || ((a3[9] | v15) & 3) != 0 || (a3[25] & 3) != 0)
  {
    uint64_t v16 = *a3;
    if ((int)v16 >= 1)
    {
      int v17 = (v13 >> 14) & 0x3FF;
      do
      {
        int v18 = (__int16)v17;
        LOWORD(v17) = v17 + 1024;
      }
      while (v18 < *(__int16 *)(*(void *)(p_api + 72) + 1726));
      LODWORD(v19) = 604800 * v18 + v14 - v16;
      if ((int)v16 >= 619315201 && (int)v19 >= 618105601)
      {
        if (v19 >= 0x49C18B00) {
          LODWORD(v19) = 1237420800;
        }
        LODWORD(v19) = v19 - 1238630399 + ((int)v14 + 604800 * v18 - (int)v16 - (int)v19 + 619315199) % 0x24EA0000u;
      }
      if ((int)v19 > -21601 || v14 >> 5 > 0x2A2)
      {
        if (v14 <= 0x8E620 || (int)v19 <= 21600) {
          uint64_t v19 = v19;
        }
        else {
          uint64_t v19 = (v19 - 604800);
        }
      }
      else
      {
        uint64_t v19 = (v19 + 604800);
      }
      if ((int)v19 >= 0) {
        unsigned int v21 = v19;
      }
      else {
        unsigned int v21 = -(int)v19;
      }
      if (v21 >= 0x5461)
      {
        *(unsigned char *)(p_NA + v6 + 12) = 0;
        EvLog_nd("Core_Get_GPS_Eph:  (c) Deleted SV", 5, v12, a1, a2, v19, v14, v16);
      }
    }
  }
  if ((int)a2 >= 1)
  {
    LODWORD(v22) = ((int)a2 - (int)v14) % 604800;
    if ((int)v22 <= 302400) {
      uint64_t v22 = v22;
    }
    else {
      uint64_t v22 = (v22 - 604800);
    }
    BOOL v23 = (int)v22 > 10800 && (v15 & 0x80) == 0;
    uint64_t v24 = *a3;
    if (v23 || (int)v22 >= 16201)
    {
      *(unsigned char *)(p_NA + v6 + 12) = 0;
      EvLog_nd("Core_Get_GPS_Eph:  (d) Deleted SV", 5, v12, a1, a2, v22, v14, v24);
      LODWORD(v24) = *a3;
    }
    if (!v24) {
      *a3 = a2;
    }
  }
  if (!*(unsigned char *)(p_NA + v6 + 12)) {
    return 0;
  }
  int v26 = *a3;
  if (*a3)
  {
    if (v26 < 619315201) {
      return 0;
    }
  }
  if (a2 && v26 >= (int)a2 + 300) {
    return 0;
  }
  if (v26) {
    BOOL v27 = v26 <= (int)a2 - 7200;
  }
  else {
    BOOL v27 = 0;
  }
  return !v27;
}

BOOL Core_Get_QZSS_Eph(uint64_t a1, uint64_t a2, int *a3)
{
  if ((a1 + 53) < 0xF6u) {
    return 0;
  }
  uint64_t v6 = (a1 - 193);
  uint64_t v7 = (unsigned char *)(p_NA + v6 + 76);
  if (!a2 && !a3)
  {
    *uint64_t v7 = 0;
    EvLog_d("Core_Get_QZSS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  int v9 = *v7;
  if ((int)a2 >= 619315201 && v9)
  {
    uint64_t v10 = *(unsigned int *)(p_NA + 80 * v6 + 4412);
    if ((int)v10 >= 619315201 && (int)a2 - (int)v10 >= 21601)
    {
      EvLog_nd("Core_Get_QZSS_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v10);
      BOOL result = 0;
      *(unsigned char *)(p_NA + v6 + 76) = 0;
      return result;
    }
    if (!a3) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (!a3 || !v9) {
      return result;
    }
  }
  UnCompact_GPS_BinEph((uint64_t)a3, p_NA + 80 * v6 + 4412);
  unsigned int v13 = a3[2];
  uint64_t v14 = 16 * (unsigned __int16)a3[7];
  unsigned int v15 = a3[17];
  if ((v13 & 0xFFC000) != 0 || ((a3[9] | v15) & 3) != 0 || (a3[25] & 3) != 0)
  {
    uint64_t v16 = *a3;
    if ((int)v16 >= 1)
    {
      int v17 = (v13 >> 14) & 0x3FF;
      do
      {
        int v18 = (__int16)v17;
        LOWORD(v17) = v17 + 1024;
      }
      while (v18 < *(__int16 *)(*(void *)(p_api + 72) + 1726));
      LODWORD(v19) = 604800 * v18 + v14 - v16;
      if ((int)v16 >= 619315201 && (int)v19 >= 618105601)
      {
        if (v19 >= 0x49C18B00) {
          LODWORD(v19) = 1237420800;
        }
        LODWORD(v19) = v19 - 1238630399 + ((int)v14 + 604800 * v18 - (int)v16 - (int)v19 + 619315199) % 0x24EA0000u;
      }
      if ((int)v19 > -21601 || v14 >> 5 > 0x2A2)
      {
        if (v14 <= 0x8E620 || (int)v19 <= 21600) {
          uint64_t v19 = v19;
        }
        else {
          uint64_t v19 = (v19 - 604800);
        }
      }
      else
      {
        uint64_t v19 = (v19 + 604800);
      }
      if ((int)v19 >= 0) {
        unsigned int v21 = v19;
      }
      else {
        unsigned int v21 = -(int)v19;
      }
      if (v21 >= 0x5461)
      {
        *(unsigned char *)(p_NA + v6 + 76) = 0;
        EvLog_nd("Core_Get_QZSS_Eph:  (c) Deleted SV", 5, v12, a1, a2, v19, v14, v16);
      }
    }
  }
  if ((int)a2 >= 1)
  {
    LODWORD(v22) = ((int)a2 - (int)v14) % 604800;
    if ((int)v22 <= 302400) {
      uint64_t v22 = v22;
    }
    else {
      uint64_t v22 = (v22 - 604800);
    }
    BOOL v23 = (int)v22 > 10800 && (v15 & 0x80) == 0;
    uint64_t v24 = *a3;
    if (v23 || (int)v22 >= 16201)
    {
      *(unsigned char *)(p_NA + v6 + 76) = 0;
      EvLog_nd("Core_Get_QZSS_Eph:  (d) Deleted SV", 5, v12, a1, a2, v22, v14, v24);
      LODWORD(v24) = *a3;
    }
    if (!v24) {
      *a3 = a2;
    }
  }
  if (!*(unsigned char *)(p_NA + v6 + 76)) {
    return 0;
  }
  int v26 = *a3;
  if (*a3)
  {
    if (v26 < 619315201) {
      return 0;
    }
  }
  if (a2 && v26 >= (int)a2 + 300) {
    return 0;
  }
  if (v26) {
    BOOL v27 = v26 <= (int)a2 - 7200;
  }
  else {
    BOOL v27 = 0;
  }
  return !v27;
}

BOOL Core_Get_GAL_Eph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 - 37) < 0xFFFFFFDC) {
    return 0;
  }
  unsigned int v4 = a2;
  uint64_t v6 = (a1 - 1);
  uint64_t v7 = p_NA;
  long long v8 = (unsigned char *)(p_NA + v6 + 147);
  if (!a2 && !a3)
  {
    *long long v8 = 0;
    EvLog_d("Core_Get_GAL_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    uint64_t v9 = *(unsigned int *)(p_NA + 88 * v6 + 5588);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_GAL_Eph:  (b) Deleted SV", 3, a3, a1, a2, v9);
      uint64_t v7 = p_NA;
      *(unsigned char *)(p_NA + v6 + 147) = 0;
    }
    uint64_t v11 = 60 * *(unsigned __int16 *)(v7 + 88 * v6 + 5606);
    int v12 = v4 % 0x93A80 - v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400) {
      LODWORD(v13) = v4 % 0x93A80 - v11;
    }
    if (v12 <= 302399) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = (v12 - 604800);
    }
    if ((int)v13 >= 0) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = -(int)v13;
    }
    if (v14 >= 0x3841)
    {
      *(unsigned char *)(v7 + v6 + 147) = 0;
      EvLog_nd("Core_Get_GAL_Eph:  (c) Deleted SV", 4, a3, a1, v13, v4 % 0x93A80, v11);
    }
  }
  if (!a3) {
    return 0;
  }
  unsigned int v15 = (unsigned char *)(p_NA + v6 + 147);
  if (!*v15) {
    return 0;
  }
  uint64_t v16 = p_NA + 88 * v6 + 5588;
  long long v17 = *(_OWORD *)(p_NA + 88 * v6 + 5604);
  *(_OWORD *)a3 = *(_OWORD *)v16;
  *(_OWORD *)(a3 + 16) = v17;
  long long v18 = *(_OWORD *)(v16 + 32);
  long long v19 = *(_OWORD *)(v16 + 48);
  long long v20 = *(_OWORD *)(v16 + 64);
  *(void *)(a3 + 80) = *(void *)(v16 + 80);
  *(_OWORD *)(a3 + 48) = v19;
  *(_OWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 32) = v18;
  int v21 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v21)
  {
    *(_DWORD *)a3 = v4;
    int v21 = v4;
  }
  if (!*v15 || v21 && v21 < 619315201 || v4 && v21 >= (int)(v4 + 300)) {
    return 0;
  }
  if (v21) {
    BOOL v23 = v21 <= (int)(v4 - 1800);
  }
  else {
    BOOL v23 = 0;
  }
  return !v23;
}

BOOL Core_Get_BDS_Eph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 - 64) < 0xC1u) {
    return 0;
  }
  unsigned int v4 = a2;
  uint64_t v6 = p_NA;
  uint64_t v7 = (unsigned char *)(p_NA + (a1 - 1) + 221);
  if (!a2 && !a3)
  {
    *uint64_t v7 = 0;
    EvLog_d("Core_Get_BDS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  uint64_t v8 = (a1 - 1);
  if ((int)a2 >= 619315201 && *v7)
  {
    uint64_t v9 = *(unsigned int *)(p_NA + 152 * (a1 - 1) + 10112);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_BDS_Eph:  (b) Deleted SV", 3, a3, a1, a2, v9);
      uint64_t v6 = p_NA;
      *(unsigned char *)(p_NA + v8 + 221) = 0;
    }
    uint64_t v11 = (300 * *(_DWORD *)(v6 + 152 * v8 + 10132));
    int v12 = v4 % 0x93A80 - v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400) {
      LODWORD(v13) = v4 % 0x93A80 - v11;
    }
    if (v12 <= 302399) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = (v12 - 604800);
    }
    if ((int)v13 >= 0) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = -(int)v13;
    }
    if (v14 >= 0x3841)
    {
      *(unsigned char *)(v6 + v8 + 221) = 0;
      EvLog_nd("Core_Get_BDS_Eph:  (c) Deleted SV", 4, a3, a1, v13, v4 % 0x93A80, v11);
    }
  }
  if (!a3) {
    return 0;
  }
  unsigned int v15 = (unsigned char *)(p_NA + v8 + 221);
  if (!*v15) {
    return 0;
  }
  uint64_t v16 = p_NA + 152 * v8;
  long long v17 = *(_OWORD *)(v16 + 10128);
  *(_OWORD *)a3 = *(_OWORD *)(v16 + 10112);
  *(_OWORD *)(a3 + 16) = v17;
  long long v18 = *(_OWORD *)(v16 + 10144);
  long long v19 = *(_OWORD *)(v16 + 10160);
  long long v20 = *(_OWORD *)(v16 + 10192);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v16 + 10176);
  *(_OWORD *)(a3 + 80) = v20;
  *(_OWORD *)(a3 + 32) = v18;
  *(_OWORD *)(a3 + 48) = v19;
  long long v21 = *(_OWORD *)(v16 + 10208);
  long long v22 = *(_OWORD *)(v16 + 10224);
  long long v23 = *(_OWORD *)(v16 + 10240);
  *(void *)(a3 + 144) = *(void *)(v16 + 10256);
  *(_OWORD *)(a3 + 112) = v22;
  *(_OWORD *)(a3 + 128) = v23;
  *(_OWORD *)(a3 + 96) = v21;
  int v24 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v24)
  {
    *(_DWORD *)a3 = v4;
    int v24 = v4;
  }
  if (!*v15 || v24 && v24 < 619315201 || v4 && v24 >= (int)(v4 + 300)) {
    return 0;
  }
  if (v24) {
    BOOL v26 = v24 <= (int)(v4 - 1800);
  }
  else {
    BOOL v26 = 0;
  }
  return !v26;
}

BOOL Core_Get_NVIC_Eph(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if ((a1 - 15) < 0xFFFFFFF2) {
    return 0;
  }
  unsigned int v4 = a2;
  uint64_t v6 = (a1 - 1);
  uint64_t v7 = p_NA;
  uint64_t v8 = (unsigned char *)(p_NA + v6 + 348);
  if (!a2 && !a3)
  {
    *uint64_t v8 = 0;
    EvLog_d("Core_Get_NVIC_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    uint64_t v9 = *(unsigned int *)(p_NA + 76 * v6 + 22480);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_NVIC_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v9);
      uint64_t v7 = p_NA;
      *(unsigned char *)(p_NA + v6 + 348) = 0;
    }
    int v11 = *(unsigned __int16 *)(v7 + 76 * v6 + 22498);
    signed int v12 = v4 % 0x93A80 - 16 * v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400) {
      LODWORD(v13) = v4 % 0x93A80 - 16 * v11;
    }
    if (v12 <= 302399) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = (v12 - 604800);
    }
    if ((int)v13 >= 0) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = -(int)v13;
    }
    if (v14 >= 0x3841)
    {
      *(unsigned char *)(v7 + v6 + 348) = 0;
      EvLog_nd("Core_Get_NVIC_Eph:  (c) Deleted SV", 4, (uint64_t)a3, a1, v13, v4 % 0x93A80, (16 * v11));
    }
  }
  if (!a3 || !*(unsigned char *)(p_NA + v6 + 348)) {
    return 0;
  }
  unsigned int v15 = (unsigned char *)(p_NA + v6 + 348);
  uint64_t v16 = (_OWORD *)(p_NA + 76 * v6);
  *a3 = v16[1405];
  long long v17 = v16[1406];
  long long v18 = v16[1407];
  long long v19 = v16[1408];
  *(_OWORD *)((char *)a3 + 60) = *(_OWORD *)((char *)v16 + 22540);
  a3[2] = v18;
  a3[3] = v19;
  a3[1] = v17;
  int v20 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v20)
  {
    *(_DWORD *)a3 = v4;
    int v20 = v4;
  }
  if (!*v15 || v20 && v20 < 619315201 || v4 && v20 >= (int)(v4 + 300)) {
    return 0;
  }
  if (v20) {
    BOOL v22 = v20 <= (int)(v4 - 1800);
  }
  else {
    BOOL v22 = 0;
  }
  return !v22;
}

BOOL Core_Get_GLON_Eph(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if ((a1 - 25) < 0xFFFFFFE8) {
    return 0;
  }
  uint64_t v6 = (a1 - 1);
  uint64_t v7 = p_NA;
  uint64_t v8 = (unsigned char *)(p_NA + v6 + 96);
  if (!a2 && !a3)
  {
    *uint64_t v8 = 0;
    EvLog_d("Core_Get_GLON_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    uint64_t v9 = *(unsigned int *)(p_NA + (v6 << 6) + 24272);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 9901)
    {
      EvLog_nd("Core_Get_GLON_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v9);
      uint64_t v7 = p_NA;
      uint64_t v11 = p_NA + v6;
      *(unsigned char *)(v11 + 96) = 0;
      *(unsigned char *)(v11 + 26700) = 127;
    }
    uint64_t v12 = 900 * (*(_WORD *)(v7 + (v6 << 6) + 24298) & 0x7Fu);
    int v13 = ((int)a2 + 10800) % 0x15180u - v12;
    int v14 = v13 + 86400;
    if (v13 >= -43200) {
      int v14 = ((int)a2 + 10800) % 0x15180u - v12;
    }
    if (v13 > 43199) {
      int v14 = v13 - 86400;
    }
    if (v14 < 0) {
      int v14 = -v14;
    }
    if (v14 >= 0x26AD)
    {
      *(unsigned char *)(v7 + v6 + 96) = 0;
      EvLog_nd("Core_Get_GLON_Eph:  (c) Deleted SV", 4, (uint64_t)a3, a1, a2, ((int)a2 + 10800) % 0x15180u, v12);
      uint64_t v7 = p_NA;
      *(unsigned char *)(p_NA + v6 + 26700) = 127;
    }
  }
  if (!a3) {
    return 0;
  }
  unsigned int v15 = (unsigned char *)(v7 + v6 + 96);
  if (!*v15) {
    return 0;
  }
  uint64_t v16 = (_OWORD *)(v7 + (v6 << 6));
  long long v17 = v16[1518];
  long long v18 = v16[1520];
  long long v19 = v16[1517];
  a3[2] = v16[1519];
  a3[3] = v18;
  *a3 = v19;
  a3[1] = v17;
  int v20 = *(_DWORD *)a3;
  if ((int)a2 >= 1 && !v20)
  {
    *(_DWORD *)a3 = a2;
    int v20 = a2;
  }
  if (!*v15 || v20 && v20 < 619315201 || a2 && v20 >= (int)a2 + 300) {
    return 0;
  }
  if (v20) {
    BOOL v22 = v20 <= (int)a2 - 1800;
  }
  else {
    BOOL v22 = 0;
  }
  return !v22;
}

void *Core_Set_GPS_Eph_Invalid(void *result)
{
  if ((result - 33) >= 0xFFFFFFE0)
  {
    *(unsigned char *)(p_NA + (result - 1) + 12) = 0;
    return EvLog_d("Core_Set_GPS_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

void *Core_Set_QZSS_Eph_Invalid(void *result)
{
  if (((_BYTE)result + 53) >= 0xF6u)
  {
    *(unsigned char *)(p_NA + (result - 193) + 76) = 0;
    return EvLog_d("Core_Set_QZSS_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

void *Core_Set_GLON_Eph_Invalid(void *result)
{
  if ((result - 25) >= 0xFFFFFFE8)
  {
    *(unsigned char *)(p_NA + (result - 1) + 96) = 0;
    return EvLog_d("Core_Set_GLON_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

void *Core_Set_GAL_Eph_Invalid(void *result)
{
  if ((result - 37) >= 0xFFFFFFDC)
  {
    *(unsigned char *)(p_NA + (result - 1) + 147) = 0;
    return EvLog_d("Core_Set_GAL_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

void *Core_Set_BDS_Eph_Invalid(void *result)
{
  if ((result - 64) >= 0xFFFFFFC1)
  {
    *(unsigned char *)(p_NA + (result - 1) + 221) = 0;
    return EvLog_d("Core_Set_BDS_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

void *Core_Set_NVIC_Eph_Invalid(void *result)
{
  if ((result - 15) >= 0xFFFFFFF2)
  {
    *(unsigned char *)(p_NA + (result - 1) + 348) = 0;
    return EvLog_d("Core_Set_NVIC_Eph_Invalid:  Deleted SV", (int)result);
  }
  return result;
}

uint64_t Core_Get_GLON_Clk1(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 144)) {
    return 0;
  }
  uint64_t v3 = p_NA + 26672;
  int v4 = *(_DWORD *)(p_NA + 26672);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *(_DWORD *)uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 144) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    long long v7 = *(_OWORD *)v3;
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)(v3 + 12);
    *a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GPS_Klob(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 10)) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)(p_NA + 660);
  int v4 = *(_DWORD *)(p_NA + 660);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 10) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    *a2 = *(_OWORD *)v3;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GPS_UTC(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 11)) {
    return 0;
  }
  uint64_t v3 = p_NA + 676;
  int v4 = *(_DWORD *)(p_NA + 676);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *(_DWORD *)uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 11) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    long long v7 = *(_OWORD *)v3;
    *(void *)(a2 + 16) = *(void *)(v3 + 16);
    *(_OWORD *)a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GAL_GGTO(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 146)) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)(p_NA + 5572);
  int v4 = *(_DWORD *)(p_NA + 5572);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 146) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    *a2 = *(_OWORD *)v3;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_BDS_BGTO(int a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = p_NA;
  int v4 = *(unsigned __int8 *)(p_NA + 219);
  if (*(unsigned char *)(p_NA + 219) && a1 >= 619315201 && !*(_DWORD *)(p_NA + 10052)) {
    *(_DWORD *)(p_NA + 10052) = a1 - 900;
  }
  int v5 = *(unsigned __int8 *)(v3 + 220);
  if (*(unsigned char *)(v3 + 220) && a1 >= 619315201 && !*(_DWORD *)(v3 + 10080)) {
    *(_DWORD *)(v3 + 10080) = a1 - 900;
  }
  if (a1 >= 619315201 && v4)
  {
    if (a1 - *(_DWORD *)(v3 + 10052) <= 1209600)
    {
      int v4 = 1;
    }
    else
    {
      int v4 = 0;
      *(unsigned char *)(v3 + 219) = 0;
    }
  }
  if (a1 < 619315201 || !v5)
  {
LABEL_18:
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  if (a1 - *(_DWORD *)(v3 + 10080) > 1209600)
  {
    int v5 = 0;
    *(unsigned char *)(v3 + 220) = 0;
    goto LABEL_18;
  }
  int v5 = 1;
  if (!v4) {
    goto LABEL_25;
  }
LABEL_19:
  int v6 = *(_DWORD *)(v3 + 10052);
  if (v6) {
    BOOL v7 = v6 < 619315201;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    uint64_t v8 = (long long *)(v3 + 10052);
    long long v9 = *v8;
    *(_OWORD *)((char *)a2 + 12) = *(long long *)((char *)v8 + 12);
    *a2 = v9;
    return 1;
  }
LABEL_25:
  if (v5)
  {
    int v10 = *(_DWORD *)(v3 + 10080);
    if (!v10 || v10 >= 619315201)
    {
      uint64_t v12 = (long long *)(v3 + 10080);
      long long v13 = *v12;
      *(_OWORD *)((char *)a3 + 12) = *(long long *)((char *)v12 + 12);
      *a3 = v13;
      return 1;
    }
  }
  return 0;
}

uint64_t Core_Get_NVIC_NGTO(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 347)) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)(p_NA + 22460);
  int v4 = *(_DWORD *)(p_NA + 22460);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 347) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    long long v7 = *(_OWORD *)v3;
    *(_DWORD *)(a2 + 16) = v3[4];
    *(_OWORD *)a2 = v7;
    return 1;
  }
  return 0;
}

void s_NA_Ram::s_NA_Ram(s_NA_Ram *this)
{
  uint64_t v2 = 0;
  *((void *)this + 81) = 0;
  uint64_t v3 = (char *)this + 26684;
  *((unsigned char *)this + 656) = 0;
  int v4 = (char *)this + 22474;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  int v5 = (_WORD *)((char *)this + 10060);
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_WORD *)this + 208) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((_DWORD *)this + 112) = 0;
  *((void *)this + 55) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((unsigned char *)this + 520) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 628) = 0u;
  *(void *)((char *)this + 692) = 0;
  *(_OWORD *)((char *)this + 660) = 0u;
  *(_OWORD *)((char *)this + 676) = 0u;
  do
  {
    *(_DWORD *)((char *)this + v2 + 774) = 0;
    BOOL v6 = (_OWORD *)((char *)this + v2 + 700);
    *((unsigned char *)this + v2 + 778) = 0;
    *BOOL v6 = 0uLL;
    v6[1] = 0uLL;
    v6[2] = 0uLL;
    v6[3] = 0uLL;
    v2 += 80;
    *(_OWORD *)((char *)v6 + 57) = 0uLL;
  }
  while (v2 != 2560);
  for (uint64_t i = 3260; i != 4412; i += 36)
  {
    uint64_t v8 = (char *)this + i;
    *((_WORD *)v8 + 16) = 0;
    *(_OWORD *)uint64_t v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
  }
  for (uint64_t j = 0; j != 800; j += 80)
  {
    int v10 = (char *)this + j + 4486;
    *(_WORD *)int v10 = 0;
    *(_WORD *)((char *)this + j + 4488) = 0;
    void v10[4] = 0;
    *(_OWORD *)(v10 - 74) = 0uLL;
    *(_OWORD *)(v10 - 58) = 0uLL;
    *(_OWORD *)(v10 - 42) = 0uLL;
    *(_OWORD *)(v10 - 26) = 0uLL;
    *(_OWORD *)(v10 - 17) = 0uLL;
  }
  for (uint64_t k = 0; k != 360; k += 36)
  {
    uint64_t v12 = (char *)this + k + 5212;
    *((_WORD *)v12 + 16) = 0;
    *(_OWORD *)uint64_t v12 = 0uLL;
    *((_OWORD *)v12 + 1) = 0uLL;
  }
  *(void *)((char *)this + 5578) = 0;
  *(void *)((char *)this + 5572) = 0;
  bzero((char *)this + 5588, 0xC60uLL);
  for (uint64_t m = 0; m != 1296; m += 36)
  {
    int v14 = (char *)this + m + 8756;
    *(_DWORD *)(v14 + 31) = 0;
    *(_OWORD *)int v14 = 0uLL;
    *((_OWORD *)v14 + 1) = 0uLL;
  }
  *(void *)((char *)this + 10052) = 0;
  *int v5 = 0;
  v5[8] = 0;
  *((void *)this + 1258) = 0;
  *(_DWORD *)((char *)this + 10071) = 0;
  v5[14] = 0;
  v5[22] = 0;
  *(void *)((char *)this + 10092) = 0;
  *(_DWORD *)((char *)this + 10099) = 0;
  uint64_t v15 = 10112;
  *((void *)this + 1260) = 0;
  do
  {
    uint64_t v16 = (char *)this + v15;
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *((_WORD *)v16 + 8) = 0;
    *(_OWORD *)(v16 + 20) = 0uLL;
    *(_OWORD *)(v16 + 36) = 0uLL;
    *(_OWORD *)(v16 + 52) = 0uLL;
    *(_OWORD *)(v16 + 68) = 0uLL;
    *(_OWORD *)(v16 + 82) = 0uLL;
    *(_OWORD *)(v16 + 100) = 0uLL;
    v15 += 152;
    *(_OWORD *)(v16 + 116) = 0uLL;
    *(_OWORD *)(v16 + 132) = 0uLL;
  }
  while (v16 + 152 != (char *)this + 19688);
  for (uint64_t n = 0; n != 2772; n += 44)
  {
    long long v18 = (_OWORD *)((char *)this + n + 19688);
    *(_OWORD *)((char *)v18 + 27) = 0uLL;
    *long long v18 = 0uLL;
    v18[1] = 0uLL;
  }
  *(_DWORD *)int v4 = 0;
  *(void *)((char *)this + 22460) = 0;
  *(void *)((char *)this + 22465) = 0;
  bzero((char *)this + 22480, 0x428uLL);
  uint64_t v19 = 0;
  int v20 = (char *)this + 23558;
  do
  {
    long long v21 = &v20[v19];
    *((_WORD *)v21 - 1) = 0;
    *(_WORD *)&v20[v19] = 0;
    *((_WORD *)v21 + 1) = 0;
    *(_DWORD *)(v21 + 6) = 0;
    *((_WORD *)v21 + 5) = 0;
    *(void *)(v21 - 14) = 0;
    *(_DWORD *)(v21 - 7) = 0;
    *(void *)(v21 + 22) = 0;
    *(void *)(v21 + 14) = 0;
    v19 += 52;
    *(void *)(v21 + 27) = 0;
  }
  while (v19 != 728);
  uint64_t v22 = -1536;
  do
  {
    long long v23 = (_OWORD *)((char *)this + v22);
    v23[1615] = 0uLL;
    v23[1614] = 0uLL;
    v23[1613] = 0uLL;
    *(_OWORD *)((char *)this + v22 + 25854) = 0uLL;
    v22 += 64;
  }
  while (v22);
  uint64_t v24 = 25808;
  do
  {
    int v25 = (char *)this + v24;
    *(void *)int v25 = 0;
    *((_WORD *)v25 + 4) = 0;
    *(void *)(v25 + 12) = 0;
    *(void *)(v25 + 28) = 0;
    *(void *)(v25 + 20) = 0;
    v24 += 36;
  }
  while (v25 + 36 != (char *)this + 26672);
  *((void *)this + 3334) = 0;
  *((_WORD *)v4 + 2103) = 0;
  *(_DWORD *)uint64_t v3 = 0;
  v3[4] = 0;
  *((_DWORD *)v3 + 2) = 0;
  v3[12] = 0;
  *((_DWORD *)v3 + 33) = 0;
  *(void *)((char *)this + 26700) = 0;
  *(_OWORD *)((char *)this + 26708) = 0u;
  *(void *)((char *)this + 26721) = 0;
  *(void *)((char *)this + 26732) = 0;
  *((unsigned char *)this + 26740) = 0;
  *(_OWORD *)((char *)this + 26744) = 0u;
  *(_OWORD *)((char *)this + 26760) = 0u;
  *(_OWORD *)((char *)this + 26772) = 0u;
  *((_DWORD *)this + 6702) = 0;
  *(_OWORD *)((char *)this + 26792) = 0u;
  *((void *)this + 3355) = 0;
  *(_OWORD *)((char *)this + 26824) = 0u;
  *((unsigned char *)this + 26848) = 0;
  *(void *)((char *)this + 26877) = 0;
  *((void *)this + 3359) = 0;
  *(_OWORD *)((char *)this + 26856) = 0u;
  *((void *)this + 3363) = 0;
  *((_DWORD *)this + 6728) = 0;
  *(_OWORD *)((char *)this + 26888) = 0u;
  *((_DWORD *)this + 6734) = 0;
  *(_OWORD *)((char *)this + 26920) = 0u;
  *((_DWORD *)this + 6740) = 0;
  *((_OWORD *)this + 1684) = 0u;
  *((_DWORD *)this + 6746) = 0;
  *(_OWORD *)((char *)this + 26968) = 0u;
  *((_OWORD *)this + 1687) = 0u;
  *((_OWORD *)this + 1688) = 0u;
  *(_DWORD *)((char *)this + 27023) = 0;
  *(_OWORD *)((char *)this + 27032) = 0u;
  *((_DWORD *)this + 6762) = 0;
  *((_DWORD *)this + 6768) = 0;
  *((_OWORD *)this + 1691) = 0u;
  *((_DWORD *)this + 6774) = 0;
  *(_OWORD *)((char *)this + 27080) = 0u;
  *((void *)this + 3390) = 0;
  *((_OWORD *)this + 1694) = 0u;
}

__n128 SBAS_Eph2RefState(__n128 *a1, char a2, __int16 a3, int a4, uint64_t a5)
{
  *(_OWORD *)(a5 + 175) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(unsigned char *)(a5 + 188) = a2;
  *(_DWORD *)(a5 + 176) = 1;
  *(_DWORD *)(a5 + 184) = 7;
  *(void *)(a5 + 112) = 0x4083880000000000;
  unsigned __int32 v5 = a1->n128_u32[2];
  int v6 = a4 % 86400 - v5;
  if (v6 >= -43200) {
    int v7 = 0;
  }
  else {
    int v7 = -1;
  }
  if (v6 > 43199) {
    int v8 = 1;
  }
  else {
    int v8 = v7;
  }
  int v9 = v5 + 86400 * (v8 + a4 / 86400);
  int v10 = v9 - 604800;
  if (v9 > 0x93A7F)
  {
    __int16 v11 = a3 + 1;
  }
  else
  {
    int v10 = v9;
    __int16 v11 = a3;
  }
  if (v9 < 0) {
    int v12 = v9 + 604800;
  }
  else {
    int v12 = v10;
  }
  if (v9 < 0) {
    __int16 v13 = a3 - 1;
  }
  else {
    __int16 v13 = v11;
  }
  *(_DWORD *)(a5 + 160) = v12;
  *(_WORD *)(a5 + 164) = v13;
  *(void *)a5 = a1[2].n128_u64[0];
  *(void *)(a5 + 8) = a1[2].n128_u64[1];
  *(void *)(a5 + 16) = a1[3].n128_u64[0];
  *(void *)(a5 + 24) = a1[3].n128_u64[1];
  *(void *)(a5 + 32) = a1[4].n128_u64[0];
  *(void *)(a5 + 40) = a1[4].n128_u64[1];
  *(void *)(a5 + 48) = a1[5].n128_u64[0];
  *(void *)(a5 + 56) = a1[5].n128_u64[1];
  *(void *)(a5 + 64) = a1[6].n128_u64[0];
  __n128 result = a1[1];
  *(__n128 *)(a5 + 96) = result;
  return result;
}

void ds_Intermittent(char **a1, unsigned int a2, double *a3)
{
  uint64_t v6 = 0;
  *(void *)&v41[127] = *MEMORY[0x263EF8340];
  int v7 = *a1;
  char v8 = 84;
  do
  {
    *a1 = v7 + 1;
    *int v7 = v8;
    int v7 = *a1;
    if (*a1 >= a1[3])
    {
      int v7 = a1[2];
      *a1 = v7;
    }
    char v8 = aTsx[++v6];
  }
  while (v6 != 4);
  sprintf_5d(a1, *((unsigned __int16 *)a3 + 124));
  sprintf_sgR8(a1, a3[10]);
  sprintf_sgR8(a1, a3[11]);
  sprintf_sgR8(a1, a3[12]);
  sprintf_sgR8(a1, a3[13]);
  sprintf_sgR8(a1, a3[14]);
  sprintf_sgR8(a1, a3[15]);
  sprintf_sgR8(a1, a3[16]);
  sprintf_sgR8(a1, a3[18]);
  sprintf_sgR8(a1, a3[19]);
  sprintf_sgR8(a1, a3[20]);
  sprintf_sgR8(a1, a3[21]);
  sprintf_sgR8(a1, a3[22]);
  sprintf_sgR8(a1, a3[23]);
  sprintf_sgR8(a1, a3[24]);
  sprintf_sgR8(a1, a3[25]);
  sprintf_sgR8(a1, a3[26]);
  sprintf_sgR8(a1, a3[27]);
  sprintf_sgR8(a1, a3[28]);
  sprintf_sgR8(a1, a3[29]);
  sprintf_sgR8(a1, a3[30]);
  int v9 = (*a1)++;
  *int v9 = 10;
  int v10 = *a1;
  if (*a1 >= a1[3]) {
    int v10 = a1[2];
  }
  __int16 v11 = "INT";
  if (a2 == 11) {
    __int16 v11 = "Int";
  }
  char v12 = *v11;
  if (*v11)
  {
    __int16 v13 = (unsigned __int8 *)(v11 + 1);
    do
    {
      *a1 = v10 + 1;
      *int v10 = v12;
      int v10 = *a1;
      if (*a1 >= a1[3])
      {
        int v10 = a1[2];
        *a1 = v10;
      }
      int v14 = *v13++;
      char v12 = v14;
    }
    while (v14);
  }
  uint64_t v15 = &ch_GNSS_Exe_States[20 * a2 + 1];
  char v16 = 32;
  do
  {
    *a1 = v10 + 1;
    *int v10 = v16;
    int v10 = *a1;
    if (*a1 >= a1[3])
    {
      int v10 = a1[2];
      *a1 = v10;
    }
    int v17 = *v15++;
    char v16 = v17;
  }
  while (v17);
  unsigned int v18 = **(_DWORD **)(p_api + 8);
  *a1 = v10 + 1;
  *int v10 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf_10u(a1, v18);
  if (a2 <= 0xB)
  {
    if (((1 << a2) & 0xA48) != 0)
    {
      sprintf_5d(a1, *((_DWORD *)a3 + 415));
      uint64_t v19 = *a1;
      int v20 = &ch_Oper_Mode[6 * *(unsigned int *)a3 + 1];
      char v21 = 32;
      do
      {
        *a1 = v19 + 1;
        *uint64_t v19 = v21;
        uint64_t v19 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v19 = a1[2];
          *a1 = v19;
        }
        int v22 = *v20++;
        char v21 = v22;
      }
      while (v22);
      sprintf_ACC(a1, a3[*(unsigned int *)a3 + 209]);
      long long v23 = (*a1)++;
      *long long v23 = 32;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf_ACC(a1, a3[*(unsigned int *)a3 + 211]);
      uint64_t v24 = *a1;
      int v25 = &ch_Sens_Mode[4 * *((unsigned int *)a3 + 1) + 1];
      char v26 = 32;
      do
      {
        *a1 = v24 + 1;
        *uint64_t v24 = v26;
        uint64_t v24 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v24 = a1[2];
          *a1 = v24;
        }
        int v27 = *v25++;
        char v26 = v27;
      }
      while (v27);
      uint64_t v28 = &ch_Sens_Mode[4 * *((unsigned int *)a3 + 2) + 1];
      char v29 = 32;
      do
      {
        *a1 = v24 + 1;
        *uint64_t v24 = v29;
        uint64_t v24 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v24 = a1[2];
          *a1 = v24;
        }
        int v30 = *v28++;
        char v29 = v30;
      }
      while (v30);
      double v31 = &ch_Power_Mode[4 * *((unsigned int *)a3 + 4) + 1];
      char v32 = 32;
      do
      {
        *a1 = v24 + 1;
        *uint64_t v24 = v32;
        uint64_t v24 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v24 = a1[2];
          *a1 = v24;
        }
        int v33 = *v31++;
        char v32 = v33;
      }
      while (v33);
      sprintf_sp1d(a1, *((unsigned __int8 *)a3 + 73));
      sprintf_sp1d(a1, *((unsigned __int8 *)a3 + 74));
      sprintf_4d(a1, *((char *)a3 + 250));
      sprintf_4d(a1, *((unsigned __int8 *)a3 + 251));
    }
    else if (a2 == 2)
    {
      GN_GPS_Get_LibVersion(&v40);
      uint64_t v35 = *a1;
      for (unsigned int i = 5; i > 1; --i)
      {
        *a1 = v35 + 1;
        *uint64_t v35 = 32;
        uint64_t v35 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v35 = a1[2];
          *a1 = v35;
        }
      }
      char v37 = v40;
      if (v40)
      {
        uint64_t v38 = v41;
        do
        {
          *a1 = v35 + 1;
          *uint64_t v35 = v37;
          uint64_t v35 = *a1;
          if (*a1 >= a1[3])
          {
            uint64_t v35 = a1[2];
            *a1 = v35;
          }
          int v39 = *v38++;
          char v37 = v39;
        }
        while (v39);
      }
    }
  }
  unsigned int v34 = (*a1)++;
  *unsigned int v34 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
}

uint64_t Is_Legal(int a1)
{
  uint64_t result = 0;
  if (BYTE2(a1) && a1 & 0xFF00FFFF | (BYTE2(a1) << 16))
  {
    switch((char)a1)
    {
      case 1:
        BOOL v3 = BYTE2(a1) >= 0x21u;
        goto LABEL_12;
      case 2:
        BOOL v3 = BYTE2(a1) >= 0x19u;
        goto LABEL_12;
      case 3:
        BOOL v3 = BYTE2(a1) >= 0x25u;
        goto LABEL_12;
      case 4:
        BOOL v3 = BYTE2(a1) >= 0x40u;
        goto LABEL_12;
      case 5:
        BOOL v3 = BYTE2(a1) - 193 >= 0xA;
        goto LABEL_12;
      case 6:
        BOOL v3 = BYTE2(a1) >= 0xFu;
        goto LABEL_12;
      case 7:
        BOOL v3 = BYTE2(a1) - 120 >= 0x27;
LABEL_12:
        uint64_t result = !v3;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

char *Get_GNSS_SV_Str(unint64_t a1)
{
  int v1 = a1;
  unint64_t v2 = a1 >> 8;
  char v3 = Get_GNSS_SV_Str(GNSS_SV)::ch_Constell_Id[a1];
  unsigned __int8 v4 = BYTE2(a1);
  uint64_t result = &g_GNSS_SV_Str;
  g_GNSS_SV_Str = v3;
  unk_26A9CA029 = *(_WORD *)((char *)&Get_GNSS_SV_Str(GNSS_SV)::str_Signal_Id[BYTE1(v1)] + v2);
  byte_26A9CA02B = 32;
  unsigned int v6 = BYTE2(v1);
  unsigned int v7 = (41 * v6) >> 12;
  unsigned int v8 = -100 * v7 + v4;
  char v9 = v7 | 0x30;
  if (v6 <= 0x63) {
    char v9 = 32;
  }
  BOOL v10 = v8 > 9 || v6 > 0x63;
  byte_26A9CA02C = v9;
  unsigned int v11 = v8 / 0xA + 48;
  if (!v10) {
    LOBYTE(v11) = 32;
  }
  byte_26A9CA02D = v11;
  byte_26A9CA02E = v8 % 0xA + 48;
  byte_26A9CA02F = 0;
  return result;
}

void Gnm05_31PrintNavSoln(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (*(unsigned char *)(a1 + 10)) {
      uint64_t v3 = 89;
    }
    else {
      uint64_t v3 = 78;
    }
    if (*(unsigned char *)(a1 + 9)) {
      uint64_t v4 = 89;
    }
    else {
      uint64_t v4 = 78;
    }
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v5 = 89;
    }
    else {
      uint64_t v5 = 78;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NAV:OsTime,%ums,BBTick,%ums,DateSet,%c,TimeSet,%c,UtcValid,%c,Year,%u,Month,%u,Day,%u,Hours,%u,Min,%u,Sec,%u,Msec,%u,WkNo,%d,Tow,%.12f,TowUnc%.12f,BCT_Tick,%llu,UtcCorr,%.1f,ClkDrift,%.12f,ClkDriftUnc,%.12f\n", v2, "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(_DWORD *)a1, v5, v4, v3, *(unsigned __int16 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), *(unsigned __int16 *)(a1 + 20), *(unsigned __int16 *)(a1 + 22),
      *(unsigned __int16 *)(a1 + 24),
      *(__int16 *)(a1 + 28),
      *(double *)(a1 + 48),
      *(double *)(a1 + 40),
      *(void *)(a1 + 32),
      *(double *)(a1 + 72),
      *(double *)(a1 + 80),
      *(double *)(a1 + 176));
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NAV:OsTime,%ums,Lat,%.9f,Lon,%.9f,AltMSL,%f,Speed,%f,Course,%f,VerVel,%f,HAccMaj,%f,HAccMin,%f,PRRes,%f,FixT,%u,VSF,%u,VNM,%u,FixMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(double *)(a1 + 112), *(double *)(a1 + 120), *(double *)(a1 + 136), *(double *)(a1 + 144), *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 256), *(unsigned __int8 *)(a1 + 296),
        *(unsigned __int8 *)(a1 + 297),
        *(unsigned __int8 *)(a1 + 298),
        *(unsigned __int8 *)(a1 + 299));
      gnssOsa_PrintLog(__str, 4, 1, 0);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NAV:OsTime,%ums,SVSignalsInView,%u,SatsUsed,%u,UsrS,%u,GnssC,%u,Reliab,%u,AsstUsed,0x%X,SpoofMsk,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(unsigned __int8 *)(a1 + 315), *(unsigned __int8 *)(a1 + 316), *(unsigned __int8 *)(a1 + 300), *(unsigned __int8 *)(a1 + 301), *(unsigned __int8 *)(a1 + 312), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
  }
}

uint64_t Gnm05_55AssignAppInfo(unsigned char *a1, uint64_t a2)
{
  if (!a1 || !*a1) {
    return 1;
  }
  uint64_t v4 = 1;
  uint64_t v5 = gnssOsa_Calloc("Gnm05_55AssignAppInfo", 126, 1, 0xC4uLL);
  *(void *)a2 = v5;
  if (!v5) {
    return 0;
  }
  *uint64_t v5 = 1;
  memcpy_s("Gnm05_55AssignAppInfo", 134, v5 + 66, 0x41u, a1 + 66, 0x41uLL);
  memcpy_s("Gnm05_55AssignAppInfo", 135, (void *)(*(void *)a2 + 1), 0x41u, a1 + 1, 0x41uLL);
  memcpy_s("Gnm05_55AssignAppInfo", 136, (void *)(*(void *)a2 + 131), 0x41u, a1 + 131, 0x41uLL);
  return v4;
}

void *EvLog(void *result)
{
  if (g_Logging_Cfg >= 4)
  {
    int v1 = result;
    uint64_t result = EvLog_Header();
    char v2 = *v1;
    uint64_t v3 = (unsigned char *)g_CB_ELog;
    if (*v1)
    {
      uint64_t v4 = v1 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v3 + 1);
        *uint64_t v3 = v2;
        uint64_t v3 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          uint64_t v3 = (unsigned char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v5 = *v4++;
        char v2 = v5;
      }
      while (v5);
    }
    g_CB_ELog = (uint64_t)(v3 + 1);
    *uint64_t v3 = 10;
    int v6 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v6 = qword_26AA2DDD0;
    }
    int v7 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (dword_26AA2DDC8 - v6 > 0) {
      int v7 = 0;
    }
    if ((v7 + dword_26AA2DDC8 - v6) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvLog_Header()
{
  uint64_t v0 = mach_continuous_time();
  sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0));
  int v1 = (unsigned char *)g_CB_ELog++;
  *int v1 = 32;
  if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8) {
    g_CB_ELog = qword_26AA2DDD0;
  }
  uint64_t result = sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
  uint64_t v3 = (unsigned char *)g_CB_ELog++;
  *uint64_t v3 = 32;
  if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8) {
    g_CB_ELog = qword_26AA2DDD0;
  }
  return result;
}

void *EvLog_d(void *result, int a2)
{
  if (g_Logging_Cfg >= 4)
  {
    uint64_t v3 = result;
    EvLog_Header();
    char v4 = *v3;
    if (*v3)
    {
      int v5 = (unsigned char *)g_CB_ELog;
      int v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *int v5 = v4;
        int v5 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          int v5 = (unsigned char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v7 = *v6++;
        char v4 = v7;
      }
      while (v7);
    }
    uint64_t result = sprintf_sp1d(&g_CB_ELog, a2);
    unsigned int v8 = (unsigned char *)g_CB_ELog++;
    *unsigned int v8 = 10;
    int v9 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v9 = qword_26AA2DDD0;
    }
    int v10 = dword_26AA2DDC8 - v9;
    int v11 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (v10 > 0) {
      int v11 = 0;
    }
    if ((v11 + v10) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvLog_nd(void *result, int a2, uint64_t a3, ...)
{
  if (g_Logging_Cfg >= 4)
  {
    char v4 = result;
    uint64_t result = EvLog_Header();
    char v5 = *v4;
    if (*v4)
    {
      int v6 = (unsigned char *)g_CB_ELog;
      int v7 = v4 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v6 + 1);
        *int v6 = v5;
        int v6 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          int v6 = (unsigned char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v8 = *v7++;
        char v5 = v8;
      }
      while (v8);
    }
    for (unsigned int i = (int *)&a3; a2; --a2)
    {
      int v9 = i;
      i += 2;
      uint64_t result = sprintf_sp1d(&g_CB_ELog, *v9);
    }
    int v10 = (unsigned char *)g_CB_ELog++;
    *int v10 = 10;
    int v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v11 = qword_26AA2DDD0;
    }
    int v12 = dword_26AA2DDC8 - v11;
    int v13 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (v12 > 0) {
      int v13 = 0;
    }
    if ((v13 + v12) <= 0xFF) {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvLog_VecI4(void *result, unsigned int a2, int *a3)
{
  if (g_Logging_Cfg >= 4)
  {
    char v5 = result;
    uint64_t result = EvLog_Header();
    char v6 = *v5;
    if (*v5)
    {
      int v7 = (unsigned char *)g_CB_ELog;
      int v8 = v5 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v7 + 1);
        *int v7 = v6;
        int v7 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          int v7 = (unsigned char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v9 = *v8++;
        char v6 = v9;
      }
      while (v9);
    }
    if (a2)
    {
      uint64_t v10 = a2;
      do
      {
        int v11 = *a3++;
        uint64_t result = sprintf_sp1d(&g_CB_ELog, v11);
        --v10;
      }
      while (v10);
    }
    int v12 = (unsigned char *)g_CB_ELog++;
    unsigned char *v12 = 10;
    int v13 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v13 = qword_26AA2DDD0;
    }
    int v14 = dword_26AA2DDC8 - v13;
    int v15 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (v14 > 0) {
      int v15 = 0;
    }
    if ((v15 + v14) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

char *EvLog_v(char *result, ...)
{
  va_start(va, result);
  if (g_Logging_Cfg >= 4)
  {
    int v1 = result;
    EvLog_Header();
    uint64_t result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    int v2 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (dword_26AA2DDC8 - (int)g_CB_ELog > 0) {
      int v2 = 0;
    }
    if ((v2 + dword_26AA2DDC8 - g_CB_ELog) <= 0xFF) {
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

uint64_t DbgLog_v(uint64_t result, char *a2, ...)
{
  va_start(va, a2);
  if (g_Logging_Cfg >= 4)
  {
    char v3 = result;
    if (result)
    {
      char v4 = (char *)g_CB_NDbg;
      char v5 = 69;
      uint64_t v6 = 1u;
      int v7 = &g_CB_NDbg;
      do
      {
        g_CB_NDbg = (uint64_t)(v4 + 1);
        *char v4 = v5;
        char v4 = (char *)g_CB_NDbg;
        if (g_CB_NDbg >= (unint64_t)qword_26AA2DDF8)
        {
          char v4 = (char *)qword_26AA2DDF0;
          g_CB_NDbg = qword_26AA2DDF0;
        }
        char v5 = str_3_1[v6++];
      }
      while (v6 != 4);
    }
    else
    {
      uint64_t v8 = mach_continuous_time();
      int v7 = &g_CB_ELog;
      sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8));
      int v9 = (unsigned char *)g_CB_ELog++;
      *int v9 = 32;
      if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8) {
        g_CB_ELog = qword_26AA2DDD0;
      }
    }
    sprintf_10u(v7, **(_DWORD **)(p_api + 8));
    uint64_t v10 = (unsigned char *)(*v7)++;
    *uint64_t v10 = 32;
    if (*v7 >= (unint64_t)v7[3]) {
      *int v7 = v7[2];
    }
    uint64_t result = sprintf_v((uint64_t)v7, a2, (uint64_t *)va);
    if ((v3 & 1) == 0)
    {
      int v11 = *((_DWORD *)v7 + 2) - *(_DWORD *)v7;
      if (v11 <= 0) {
        v11 += *((_DWORD *)v7 + 6) - *((_DWORD *)v7 + 4);
      }
      if (v11 <= 0xFF) {
        return GNSS_Event_Log_Ctl((uint64_t)v7);
      }
    }
  }
  return result;
}

void *EvCrt_d(void *result, int a2)
{
  if (g_Logging_Cfg)
  {
    char v3 = result;
    EvLog_Header();
    char v4 = *v3;
    if (*v3)
    {
      char v5 = (unsigned char *)g_CB_ELog;
      uint64_t v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *char v5 = v4;
        char v5 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          char v5 = (unsigned char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v7 = *v6++;
        char v4 = v7;
      }
      while (v7);
    }
    uint64_t result = sprintf_sp1d(&g_CB_ELog, a2);
    uint64_t v8 = (unsigned char *)g_CB_ELog++;
    *uint64_t v8 = 10;
    int v9 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v9 = qword_26AA2DDD0;
    }
    int v10 = dword_26AA2DDC8 - v9;
    int v11 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (v10 > 0) {
      int v11 = 0;
    }
    if ((v11 + v10) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvCrt_nd(void *result, int a2, uint64_t a3, ...)
{
  if (g_Logging_Cfg)
  {
    char v4 = result;
    uint64_t result = EvLog_Header();
    char v5 = *v4;
    if (*v4)
    {
      uint64_t v6 = (unsigned char *)g_CB_ELog;
      int v7 = v4 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v6 + 1);
        *uint64_t v6 = v5;
        uint64_t v6 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          uint64_t v6 = (unsigned char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v8 = *v7++;
        char v5 = v8;
      }
      while (v8);
    }
    for (unsigned int i = (int *)&a3; a2; --a2)
    {
      int v9 = i;
      i += 2;
      uint64_t result = sprintf_sp1d(&g_CB_ELog, *v9);
    }
    int v10 = (unsigned char *)g_CB_ELog++;
    *int v10 = 10;
    int v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v11 = qword_26AA2DDD0;
    }
    int v12 = dword_26AA2DDC8 - v11;
    int v13 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (v12 > 0) {
      int v13 = 0;
    }
    if ((v13 + v12) <= 0xFF) {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

char *EvCrt_v(char *result, ...)
{
  va_start(va, result);
  if (g_Logging_Cfg)
  {
    int v1 = result;
    EvLog_Header();
    uint64_t result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    int v2 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (dword_26AA2DDC8 - (int)g_CB_ELog > 0) {
      int v2 = 0;
    }
    if ((v2 + dword_26AA2DDC8 - g_CB_ELog) <= 0xFF) {
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvCrt_Illegal_switch_case(void *result, unsigned int a2)
{
  if (g_Logging_Cfg)
  {
    char v3 = result;
    EvLog_Header();
    char v4 = *v3;
    char v5 = (char *)g_CB_ELog;
    if (*v3)
    {
      uint64_t v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *char v5 = v4;
        char v5 = (char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          char v5 = (char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v7 = *v6++;
        char v4 = v7;
      }
      while (v7);
    }
    char v8 = 58;
    uint64_t v9 = 1u;
    do
    {
      g_CB_ELog = (uint64_t)(v5 + 1);
      *char v5 = v8;
      char v5 = (char *)g_CB_ELog;
      if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
      {
        char v5 = (char *)qword_26AA2DDD0;
        g_CB_ELog = qword_26AA2DDD0;
      }
      char v8 = str_5_2[v9++];
    }
    while (v9 != 50);
    uint64_t result = sprintf_1u(&g_CB_ELog, a2);
    int v10 = (unsigned char *)g_CB_ELog++;
    *int v10 = 10;
    int v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v11 = qword_26AA2DDD0;
    }
    int v12 = dword_26AA2DDC8 - v11;
    int v13 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (v12 > 0) {
      int v13 = 0;
    }
    if ((v13 + v12) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvCrt_Illegal_switch_default(void *result, unsigned int a2)
{
  if (g_Logging_Cfg)
  {
    char v3 = result;
    EvLog_Header();
    char v4 = *v3;
    char v5 = (char *)g_CB_ELog;
    if (*v3)
    {
      uint64_t v6 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *char v5 = v4;
        char v5 = (char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
        {
          char v5 = (char *)qword_26AA2DDD0;
          g_CB_ELog = qword_26AA2DDD0;
        }
        int v7 = *v6++;
        char v4 = v7;
      }
      while (v7);
    }
    char v8 = 58;
    uint64_t v9 = 1u;
    do
    {
      g_CB_ELog = (uint64_t)(v5 + 1);
      *char v5 = v8;
      char v5 = (char *)g_CB_ELog;
      if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
      {
        char v5 = (char *)qword_26AA2DDD0;
        g_CB_ELog = qword_26AA2DDD0;
      }
      char v8 = str_6_1[v9++];
    }
    while (v9 != 53);
    uint64_t result = sprintf_1u(&g_CB_ELog, a2);
    int v10 = (unsigned char *)g_CB_ELog++;
    *int v10 = 10;
    int v11 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AA2DDD8)
    {
      g_CB_ELog = qword_26AA2DDD0;
      int v11 = qword_26AA2DDD0;
    }
    int v12 = dword_26AA2DDC8 - v11;
    int v13 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (v12 > 0) {
      int v13 = 0;
    }
    if ((v13 + v12) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

char *EvDbg_v(char *result, ...)
{
  va_start(va, result);
  if (g_Logging_Cfg >= 5)
  {
    int v1 = result;
    EvLog_Header();
    uint64_t result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    int v2 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (dword_26AA2DDC8 - (int)g_CB_ELog > 0) {
      int v2 = 0;
    }
    if ((v2 + dword_26AA2DDC8 - g_CB_ELog) <= 0xFF) {
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

char *EvVrb_v(char *result, ...)
{
  va_start(va, result);
  if (g_Logging_Cfg >= 6)
  {
    int v1 = result;
    EvLog_Header();
    uint64_t result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (uint64_t *)va);
    int v2 = qword_26AA2DDD8 - qword_26AA2DDD0;
    if (dword_26AA2DDC8 - (int)g_CB_ELog > 0) {
      int v2 = 0;
    }
    if ((v2 + dword_26AA2DDC8 - g_CB_ELog) <= 0xFF) {
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

double Comp_Sig_TOT(int a1, int a2, unsigned int a3, double a4, double a5)
{
  for (double i = ((double)a2 + (double)a3 * 0.0000152587891) * 0.000000977517107 + (double)a1 * 1.5; i >= a5; double i = i - a5)
    ;
  while (i < 0.0)
    double i = i + a5;
  double v6 = a5 + -600.0;
  while (a4 - i > v6)
    double i = i + a5;
  while (i - a4 > v6)
    double i = i - a5;
  return i;
}

uint64_t Is_GN_API_Set_Allowed(const char *a1)
{
  uint64_t v1 = *(int *)p_api;
  if (v1 > 7 || ((0x93u >> v1) & 1) == 0) {
    return 1;
  }
  EvCrt_v("%s:  FAILED:  Not allowed when in \"%s\" Mode", a1, off_2655E6E10[v1]);
  return 0;
}

BOOL API_Set_Platform_Calibration_GLONASS_Group_Delays(double *a1)
{
  double v1 = *a1;
  if (fabs(*a1) <= 100.0)
  {
    uint64_t v4 = 0;
    while (v4 != 13)
    {
      double v1 = a1[++v4];
      if (fabs(v1) > 100.0)
      {
        BOOL v2 = (unint64_t)(v4 - 1) > 0xC;
        int v3 = v4 - 7;
        goto LABEL_7;
      }
    }
    uint64_t v5 = p_api;
    double v6 = (_OWORD *)(*(void *)(p_api + 72) + 1864);
    long long v8 = *((_OWORD *)a1 + 1);
    long long v7 = *((_OWORD *)a1 + 2);
    *double v6 = *(_OWORD *)a1;
    v6[1] = v8;
    v6[2] = v7;
    long long v9 = *((_OWORD *)a1 + 6);
    long long v11 = *((_OWORD *)a1 + 3);
    long long v10 = *((_OWORD *)a1 + 4);
    void v6[5] = *((_OWORD *)a1 + 5);
    v6[6] = v9;
    v6[3] = v11;
    unsigned __int8 v6[4] = v10;
    BOOL v2 = 1;
    *(unsigned char *)(*(void *)(v5 + 72) + 1976) = 1;
  }
  else
  {
    BOOL v2 = 0;
    int v3 = -7;
LABEL_7:
    EvCrt_v("API_Set_Platform_Calibration_GLONASS_Group_Delays:  FAILED  Group Delay %f larger than +/-100m on Freq Channel %d", v1, v3);
  }
  return v2;
}

BOOL API_Set_Inter_Chan_Bias_Model(unsigned int a1)
{
  if (a1 >= 8) {
    EvCrt_d("API_Set_Inter_Chan_Bias_Model:  FAILED  Illegal ME RF Type", a1);
  }
  else {
    Init_Set_Inter_Chan_Bias(*(char **)(p_api + 72), a1);
  }
  return a1 < 8;
}

uint64_t API_Set_TSX_ClkCorr_Params(double a1, double a2, unsigned int a3)
{
  if (a3)
  {
    if (a3 >= 0xFA1)
    {
      __int16 v5 = 4000;
      EvLog_v("API_Set_TSX_ClkCorr_Params: Offset Unc %d capped to %d ppb");
LABEL_6:
      LOWORD(a3) = v5;
      goto LABEL_7;
    }
    if (a3 <= 0xAE)
    {
      __int16 v5 = 175;
      EvLog_v("API_Set_TSX_ClkCorr_Params: Offset Unc %d increased to %d ppb");
      goto LABEL_6;
    }
  }
LABEL_7:
  uint64_t v6 = *(void *)(p_api + 72);
  *(double *)(v6 + 232) = a1;
  *(double *)(v6 + 240) = a2;
  *(_WORD *)(v6 + 248) = a3;
  return 1;
}

BOOL API_Set_Config(int *a1)
{
  v16[1] = *(double *)MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = *(void *)(p_api + 72);
    int v3 = *a1;
    *(_DWORD *)(v2 + 12) = *a1;
    *(unsigned char *)(v2 + 74) = 0;
    if (v3 == 1 || v3 == 2) {
      *(unsigned char *)(v2 + 74) = v3;
    }
    API_Set_FixInterval(*((unsigned __int16 *)a1 + 18));
    *(_WORD *)(v2 + 1724) = *((_WORD *)a1 + 22);
    unsigned int v4 = *((unsigned __int16 *)a1 + 23);
    if (v4 < 0x400) {
      LOWORD(v4) = 2139;
    }
    *(_WORD *)(v2 + 1726) = v4;
    *(_OWORD *)(v2 + 22) = *(_OWORD *)(a1 + 1);
    *(_WORD *)(v2 + 1728) = *((_WORD *)a1 + 24);
    *(_OWORD *)(v2 + 38) = *(_OWORD *)(a1 + 5);
    int v5 = *((unsigned __int8 *)a1 + 38);
    if (v5 == 255) {
      int v6 = -1;
    }
    else {
      int v6 = 60000 * v5;
    }
    *(_DWORD *)(v2 + 1760) = v6;
    *(void *)(v2 + 1824) = *((void *)a1 + 10);
    *(_WORD *)(v2 + 1836) = *((_WORD *)a1 + 44);
    g_Logging_Cfg = a1[10];
    v16[0] = 0.0;
    if (!R8_EQ((const double *)a1 + 7, v16)
      || (double v15 = 0.0, !R8_EQ((const double *)a1 + 8, &v15))
      || (uint64_t v14 = 0, !R8_EQ((const double *)a1 + 9, (const double *)&v14)))
    {
      uint64_t v7 = *(void *)(p_api + 128);
      uint64_t v8 = v7 + 68216;
      *(double *)(v7 + 68216) = *((double *)a1 + 7) * 0.0174532925;
      *(double *)(v7 + 68224) = *((double *)a1 + 8) * 0.0174532925;
      *(void *)(v7 + 68232) = *((void *)a1 + 9);
      Geo2ECEF(v7 + 68216, (uint64_t)&WGS84_Datum, (double *)(v7 + 68192));
      __double2 v9 = __sincos_stret(*(double *)v8);
      *(__double2 *)(v8 + 56) = v9;
      double v10 = 1.0 / sqrt(v9.__sinval * v9.__sinval * -0.00669437999 + 1.0);
      double v11 = *(double *)(v8 + 16);
      double v12 = v9.__cosval * (v11 + v10 * 6378137.0);
      if (v12 < 1.0) {
        double v12 = 1.0;
      }
      *(double *)(v8 + 72) = v11 + v10 * (v10 * v10) * 6335439.33;
      *(double *)(v8 + 80) = v12;
    }
  }
  return a1 != 0;
}

uint64_t API_Set_FixInterval(int a1)
{
  uint64_t v2 = *(void *)(p_api + 72);
  int v3 = *(_DWORD *)(v2 + 1664);
  if (!v3)
  {
    int v4 = *(_DWORD *)(v2 + 1660);
    if (a1 == (unsigned __int16)v4) {
      return 1;
    }
    int v5 = *(_DWORD *)p_api;
    if (*(_DWORD *)p_api <= 0xBu)
    {
      if (((1 << v5) & 0xE48) != 0)
      {
        int v6 = *(_DWORD **)(p_api + 112);
        int v7 = v6[114];
        int v8 = v6[141];
        int v9 = v6[109];
        if ((int)(v8
                 + v7
                 - v9
                 - (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())) > 99)
        {
          int v10 = v6[141] + a1 - *(_DWORD *)(v2 + 1660);
          EvLog_v("API_Set_FixInterval:  GNSS_Exe_State   RUNNING(%d) Fix_Int %d %d", *(_DWORD *)p_api, *(_DWORD *)(v2 + 1660), a1);
          *(_DWORD *)(v2 + 1660) = a1;
          v6[141] = v10;
          G5K_ME_enc_n(*(char ***)(p_api + 264), v10, a1);
          GNSS_Write_GNB_Ctrl(*(char ***)(p_api + 264));
          GNSS_GNB_Debug_Ctl(*(void *)(p_api + 296));
          return 1;
        }
        int v5 = *(_DWORD *)p_api;
        int v4 = *(_DWORD *)(v2 + 1660);
LABEL_12:
        *(_DWORD *)(v2 + 1664) = a1;
        EvLog_v("API_Set_FixInterval:  GNSS_Exe_State   RUNNING(%d) Fix_Int To Be Updated %d %d", v5, v4, a1);
        return 1;
      }
      if (((1 << v5) & 0x124) != 0) {
        goto LABEL_12;
      }
    }
    EvLog_v("API_Set_FixInterval:  GNSS_Exe_State NOT RUNNING(%d) Fix_Int %d %d", v5, 0, a1);
    *(_DWORD *)(v2 + 1660) = a1;
    *(_DWORD *)(v2 + 1664) = 0;
    return 1;
  }
  if (a1 != (unsigned __int16)v3)
  {
    EvLog_v("API_Set_FixInterval:  Fix_Int Update Pending %d %d", *(_DWORD *)(v2 + 1664), a1);
    *(_DWORD *)(v2 + 1664) = a1;
  }
  return 1;
}

BOOL API_Query_Config(uint64_t a1)
{
  if (a1)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    uint64_t v1 = p_api;
    uint64_t v2 = *(void *)(p_api + 72);
    *(_DWORD *)a1 = *(_DWORD *)(v2 + 12);
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(v2 + 22);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(v2 + 38);
    int v3 = *(_DWORD *)(v2 + 1664);
    if (!v3) {
      int v3 = *(_DWORD *)(v2 + 1660);
    }
    *(_WORD *)(a1 + 36) = v3;
    uint64_t v4 = *(unsigned int *)(v2 + 1760);
    if (v4 == 0xFFFFFFFFLL) {
      char v5 = -1;
    }
    else {
      char v5 = v4 / 0xEA60;
    }
    *(unsigned char *)(a1 + 38) = v5;
    *(_WORD *)(a1 + 44) = *(_WORD *)(v2 + 1724);
    *(_DWORD *)(a1 + 46) = *(_DWORD *)(v2 + 1726);
    *(void *)(a1 + 80) = *(void *)(v2 + 1824);
    *(_WORD *)(a1 + 88) = *(_WORD *)(v2 + 1836);
    *(_DWORD *)(a1 + 40) = g_Logging_Cfg;
    uint64_t v6 = *(void *)(v1 + 128) + 68216;
    *(double *)(a1 + 56) = *(double *)v6 * 57.2957795;
    *(double *)(a1 + 64) = *(double *)(v6 + 8) * 57.2957795;
    *(void *)(a1 + 72) = *(void *)(v6 + 16);
  }
  return a1 != 0;
}

uint64_t API_Set_Not_Broadcast_SVID(int a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(p_api + 72);
  if (a1 == 1)
  {
    char v5 = (_OWORD *)(v4 + 1096);
    uint64_t v6 = (uint64_t *)(v4 + 1320);
    int v7 = (uint64_t *)(v4 + 1328);
    int v8 = (uint64_t *)(v4 + 1336);
    int v9 = (uint64_t *)(v4 + 1344);
    int v10 = (uint64_t *)(v4 + 1352);
    double v11 = (uint64_t *)(v4 + 1360);
    double v12 = (uint64_t *)(v4 + 1368);
    int v13 = "L5";
  }
  else
  {
    if (a1) {
      __assert_rtn("API_Set_Not_Broadcast_SVID", "GNSS_Core_api.cpp", 1105, "(sizeof_DBss_Not_Brd_SV) >= (((( 32)) + (( 24)) + (( 36)) + ((63)) + (( 10)) + (( 14)) + (( 39)))*sizeof(Not_Brd_SVID[0]))");
    }
    char v5 = (_OWORD *)(v4 + 816);
    uint64_t v6 = (uint64_t *)(v4 + 1040);
    int v7 = (uint64_t *)(v4 + 1048);
    int v8 = (uint64_t *)(v4 + 1056);
    int v9 = (uint64_t *)(v4 + 1064);
    int v10 = (uint64_t *)(v4 + 1072);
    double v11 = (uint64_t *)(v4 + 1080);
    double v12 = (uint64_t *)(v4 + 1088);
    int v13 = "L1";
  }
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v16 = *v12;
  uint64_t v17 = *v11;
  uint64_t v18 = *v10;
  uint64_t v19 = *v9;
  uint64_t v20 = *v8;
  uint64_t v21 = *v7;
  uint64_t v22 = *v6;
  long long v23 = a2[1];
  *char v5 = *a2;
  v5[1] = v23;
  long long v24 = a2[5];
  long long v26 = a2[2];
  long long v25 = a2[3];
  void v5[4] = a2[4];
  v5[5] = v24;
  v5[2] = v26;
  v5[3] = v25;
  long long v27 = a2[9];
  long long v29 = a2[6];
  long long v28 = a2[7];
  v5[8] = a2[8];
  v5[9] = v27;
  v5[6] = v29;
  v5[7] = v28;
  long long v31 = a2[11];
  long long v30 = a2[12];
  long long v32 = a2[10];
  *(_OWORD *)((char *)v5 + 202) = *(_OWORD *)((char *)a2 + 202);
  v5[11] = v31;
  v5[12] = v30;
  v5[10] = v32;
  int v33 = 1;
  do
  {
    if (*(unsigned char *)(v22 + v14)) {
      int v34 = v33;
    }
    else {
      int v34 = 0;
    }
    v15 |= v34;
    v33 *= 2;
    ++v14;
  }
  while (v14 != 32);
  uint64_t v35 = 0;
  int v36 = 0;
  int v37 = 1;
  do
  {
    if (*(unsigned char *)(v20 + v35)) {
      int v38 = v37;
    }
    else {
      int v38 = 0;
    }
    v36 |= v38;
    v37 *= 2;
    ++v35;
  }
  while (v35 != 10);
  uint64_t v39 = 0;
  int v40 = 0;
  int v41 = 1;
  do
  {
    if (*(unsigned char *)(v21 + v39)) {
      int v42 = v41;
    }
    else {
      int v42 = 0;
    }
    v40 |= v42;
    v41 *= 2;
    ++v39;
  }
  while (v39 != 24);
  uint64_t v43 = 0;
  int v44 = 0;
  int v45 = 1;
  do
  {
    if (*(unsigned char *)(v19 + v43)) {
      int v46 = v45;
    }
    else {
      int v46 = 0;
    }
    v44 |= v46;
    v45 *= 2;
    ++v43;
  }
  while (v43 != 39);
  uint64_t v47 = 0;
  int v48 = 0;
  int v49 = 1;
  do
  {
    if (*(unsigned char *)(v18 + v47)) {
      int v50 = v49;
    }
    else {
      int v50 = 0;
    }
    v48 |= v50;
    v49 *= 2;
    ++v47;
  }
  while (v47 != 63);
  uint64_t v51 = 0;
  int v52 = 0;
  int v53 = 1;
  do
  {
    if (*(unsigned char *)(v17 + v51)) {
      int v54 = v53;
    }
    else {
      int v54 = 0;
    }
    v52 |= v54;
    v53 *= 2;
    ++v51;
  }
  while (v51 != 36);
  uint64_t v55 = 0;
  int v56 = 0;
  int v57 = 1;
  do
  {
    if (*(unsigned char *)(v16 + v55)) {
      int v58 = v57;
    }
    else {
      int v58 = 0;
    }
    v56 |= v58;
    v57 *= 2;
    ++v55;
  }
  while (v55 != 14);
  EvLog_v("API_Set_Not_Broadcast_SVID:  %s  G %x Q %x R %x S %X B %X E %X N %X", v13, v15, v36, v40, v44, v48, v52, v56);
  Core_Save_Not_Brd_SV(a1, (uint64_t)a2);
  *(_DWORD *)(*(void *)(p_api + 112) + 28236) = 0;
  return 1;
}

uint64_t API_Set_RTI_Bad_SV_List(int a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(p_api + 72);
  if (a1 == 1)
  {
    char v5 = (_OWORD *)(v4 + 536);
    uint64_t v6 = 55412;
  }
  else
  {
    if (a1) {
      __assert_rtn("API_Set_RTI_Bad_SV_List", "GNSS_Core_api.cpp", 1181, "(sizeof_DBss_Inhib) >= (((( 32)) + (( 24)) + (( 36)) + ((63)) + (( 10)) + (( 14)) + (( 39))) * sizeof(Inhib[0]))");
    }
    char v5 = (_OWORD *)(v4 + 257);
    uint64_t v6 = 51052;
  }
  uint64_t v7 = *(void *)(p_api + 56) + v6;
  uint64_t v8 = 0;
  long long v9 = a2[1];
  *char v5 = *a2;
  v5[1] = v9;
  long long v10 = a2[2];
  long long v11 = a2[3];
  long long v12 = a2[5];
  void v5[4] = a2[4];
  v5[5] = v12;
  v5[2] = v10;
  v5[3] = v11;
  long long v13 = a2[6];
  long long v14 = a2[7];
  long long v15 = a2[9];
  v5[8] = a2[8];
  v5[9] = v15;
  v5[6] = v13;
  v5[7] = v14;
  long long v16 = a2[10];
  long long v17 = a2[11];
  long long v18 = a2[12];
  *(_OWORD *)((char *)v5 + 202) = *(_OWORD *)((char *)a2 + 202);
  v5[11] = v17;
  v5[12] = v18;
  v5[10] = v16;
  uint64_t v19 = (int *)(v7 + 16);
  do
  {
    if (!*((unsigned char *)a2 + v8))
    {
      int v21 = 1;
LABEL_18:
      *uint64_t v19 = v21;
      goto LABEL_19;
    }
    Constell_Pruint64_t n = Get_Constell_Prn(v8);
    if (a1 == 1)
    {
      if (Constell_Prn > 7 || ((1 << Constell_Prn) & 0x85) == 0)
      {
LABEL_14:
        if (*(unsigned char *)(v4 + v8 + 257) && *(unsigned char *)(v4 + v8 + 536)) {
          *(unsigned char *)(v4 + v8 + 1376) = 1;
        }
        int v21 = 2;
        goto LABEL_18;
      }
    }
    else if (Constell_Prn && Constell_Prn != 6)
    {
      goto LABEL_14;
    }
LABEL_19:
    ++v8;
    v19 += 5;
  }
  while (v8 != 218);
  uint64_t v22 = *(void *)(v4 + 1744);
  if (v22 > 0) {
    Core_Save_Inhib_EE((BOOL *)(v4 + 1376), v22);
  }
  return 1;
}

uint64_t API_Get_Est_ME_TTick(void)
{
  uint64_t v0 = *(int **)(p_api + 8);
  if (!*v0) {
    return 0;
  }
  int v2 = v0[4];
  int v1 = *v0;
  return v1
       - v2
       + (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
}

BOOL API_Get_FS_Pulse_TTick(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4 = *(unsigned int **)(p_api + 8);
  *a3 = *v4;
  *a1 = v4[1];
  *a2 = v4[2];
  unsigned int v5 = v4[4];
  *a4 = v5;
  int v6 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*a2 > 0x10000)
  {
    EvLog_v("API_Get_FS_Pulse_TTick:  FS_TTick_Fract = %u, out of range!", *a2);
    return 0;
  }
  int v9 = *a3 - v6;
  BOOL v7 = v9 < 60001;
  if (g_Logging_Cfg >= 6) {
    EvLog_v("API_Get_FS_Pulse_TTick:  valid %d,  age %d,  (%u, %u, %u, %u)", v9 < 60001, *a3 - v6, *a3, v6, *a2, v5);
  }
  if (v9 < 60001 != v9 < 63001) {
    EvCrt_v("API_Get_FS_Pulse_TTick:  Pulse invalidated, %d > 60s old", v9);
  }
  return v7;
}

uint64_t API_Get_TM_FSP_OS_Time_ms_for_TTick(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)unsigned int v5 = 0;
  int TM_FSP_Time = Core_Get_TM_FSP_Time(&v5[1], v5);
  uint64_t result = 0;
  if (TM_FSP_Time)
  {
    if (v5[1]) {
      BOOL v4 = v5[0] == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return v5[1] + a1 - v5[0];
    }
  }
  return result;
}

uint64_t API_Get_Num_SV_and_Clock_Unknowns(unsigned int *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  int v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(p_api + 80);
  memset(v14, 0, sizeof(v14));
  do
  {
    int v7 = *(_DWORD *)(v6 + 4 * v1 + 1000);
    if (Is_Legal(v7) && *(unsigned char *)(v6 + v1 + 2536) && !*((unsigned char *)v14 + v1))
    {
      *((unsigned char *)v14 + v1) = 1;
      uint64_t v8 = *(unsigned __int8 *)(v6 + v1 + 1512);
      if (v8 != 255) {
        *((unsigned char *)v14 + v8) = 1;
      }
      uint64_t v5 = (v5 + 1);
      if (v7 <= 6u)
      {
        if (((1 << v7) & 0x6A) != 0)
        {
          int v4 = 1;
        }
        else if (v7 == 2)
        {
          int v3 = 1;
        }
        else if (v7 == 4)
        {
          int v2 = 1;
        }
      }
    }
    ++v1;
  }
  while (v1 != 128);
  int v9 = v4;
  if (v4) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  if (v3) {
    int v9 = v10;
  }
  unsigned int v11 = v9 + (v2 & 1);
  if (v11 > 1)
  {
    if (((*(unsigned char *)(v6 + 486) != 0) & v4 & v3) == 1)
    {
      if (v11 - 3 > 0xFFFFFFFD) {
        goto LABEL_30;
      }
      unsigned int v11 = 2;
    }
    if (((*(unsigned char *)(v6 + 487) != 0) & v4 & v2) != 1) {
      goto LABEL_28;
    }
    if (v11 - 3 <= 0xFFFFFFFD)
    {
      unsigned int v11 = 2;
LABEL_28:
      if (((*(unsigned char *)(v6 + 488) != 0) & v3) == 1) {
        v11 -= v2 & 1;
      }
      goto LABEL_31;
    }
LABEL_30:
    unsigned int v11 = 1;
  }
LABEL_31:
  if (*(int *)(v6 + 56) < 8) {
    ++v11;
  }
  *a1 = v11;
  return v5;
}

uint64_t API_Get_Fix_Reliability(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v0 = *(void *)(p_api + 80);
  if (*(int *)(v0 + 56) < 6) {
    return 1;
  }
  uint64_t v2 = *(void *)(p_api + 168);
  int v7 = 0;
  int Num_SV_and_Clock_Unknowns = API_Get_Num_SV_and_Clock_Unknowns((unsigned int *)&v7);
  if (*(double *)(v0 + 784) <= 10.0) {
    int v4 = -3;
  }
  else {
    int v4 = -4;
  }
  int v5 = v4 + Num_SV_and_Clock_Unknowns - v7;
  if (*(unsigned char *)(v2 + 60200)
    && !*(unsigned char *)(v2 + 60216)
    && *(_DWORD *)(v2 + 60204) == 1
    && *(double *)(v2 + 60248) <= 160000.0
    && (*(_DWORD *)(v2 + 60208) - 3) < 2
    || *(unsigned char *)(v2 + 61056)
    && !*(unsigned char *)(v2 + 61072)
    && *(_DWORD *)(v2 + 61060) == 1
    && *(double *)(v2 + 61104) <= 160000.0)
  {
    v5 += 2;
  }
  if (*(unsigned char *)(v2 + 60328)
    && !*(unsigned char *)(v2 + 60344)
    && *(_DWORD *)(v2 + 60332) == 1
    && *(double *)(v2 + 60360) <= 160000.0
    && (*(_DWORD *)(v2 + 60208) - 3) < 2)
  {
    ++v5;
  }
  if (v5 == 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = 1;
  }
  if (v5 == 3) {
    unsigned int v6 = 3;
  }
  if (v5 >= 4) {
    return 4;
  }
  else {
    return v6;
  }
}

void API_Get_Dbg_Constell_ME_Data(int a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(p_api + 96);
  uint64_t v5 = *(void *)(p_api + 112);
  unsigned int v6 = *(unsigned char **)(p_api + 72);
  switch(a1)
  {
    case 1:
      if (v6[22])
      {
        int v7 = (char *)(v5 + 409);
        int v8 = -1;
        unsigned int v9 = 32;
        goto LABEL_13;
      }
      break;
    case 2:
      if (v6[23])
      {
        int v7 = (char *)(v5 + 413);
        int v8 = -1;
        unsigned int v9 = 24;
        goto LABEL_13;
      }
      break;
    case 3:
      if (v6[27])
      {
        char v11 = 0;
        int v8 = -1;
        unsigned int v9 = 36;
        goto LABEL_18;
      }
      break;
    case 4:
      if (v6[26])
      {
        char v11 = 0;
        int v8 = -1;
        unsigned int v9 = 63;
        goto LABEL_18;
      }
      break;
    case 5:
      if (v6[24])
      {
        int v7 = (char *)(v5 + 409);
        int v8 = -193;
        unsigned int v9 = 10;
LABEL_13:
        char v11 = *v7;
        goto LABEL_18;
      }
      break;
    case 6:
      if (v6[28])
      {
        char v11 = 0;
        int v8 = -1;
        unsigned int v9 = 14;
        goto LABEL_18;
      }
      break;
    case 7:
      if (v6[25])
      {
        char v11 = 0;
        int v8 = -120;
        unsigned int v9 = 39;
LABEL_18:
        *(unsigned char *)(a2 + 17) = v11;
        int v10 = 1;
        goto LABEL_19;
      }
      break;
    default:
      int v10 = 0;
      unsigned int v9 = 0;
      int v8 = 0;
LABEL_19:
      memset(v46, 0, 218);
      bzero(v45, 0x400uLL);
      bzero(v44, 0x400uLL);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      int v17 = 0;
      for (uint64_t i = 1760; i != 1888; ++i)
      {
        if (*(unsigned __int8 *)(v4 + v14 + 96) == a1)
        {
          unsigned int v19 = v8 + *(unsigned __int8 *)(v4 + v14 + 98);
          if (v19 < v9)
          {
            int v20 = *(_DWORD *)(v4 + v14 + 1248);
            BOOL v21 = v20 > 9 || v20 == 8;
            if (v21)
            {
              ++*((unsigned char *)v46 + v19);
              ++*(_WORD *)(a2 + 2);
              uint64_t v22 = (unsigned char *)(v4 + i);
              LOBYTE(v12) = *(unsigned char *)(v4 + i);
              LOBYTE(v13) = *(unsigned char *)(v4 + i + 128);
              *(double *)&unint64_t v23 = (double)*(unint64_t *)&v13;
              unint64_t v24 = 0x3FB0000000000000;
              double v25 = (double)*(unint64_t *)&v12 + *(double *)&v23 * 0.0625;
              v45[v17] = v25;
              LOBYTE(v25) = *(unsigned char *)(v4 + i + 256);
              LOBYTE(v23) = *(unsigned char *)(v4 + i + 384);
              double v26 = (double)*(unint64_t *)&v25 + (double)v23 * 0.0625;
              v44[v17] = v26;
              if (!*(unsigned char *)a2) {
                *(unsigned char *)a2 = 1;
              }
              unsigned int v27 = *(unsigned __int16 *)(v4 + v15 + 992);
              unsigned int v28 = (v27 >> 8) & 3;
              if (*(unsigned __int8 *)(a2 + 4) < v28) {
                *(unsigned char *)(a2 + 4) = v28;
              }
              if ((v27 & 8) != 0)
              {
                if ((v27 & 0xC0) != 0)
                {
                  long long v29 = (unsigned __int16 *)(v4 + 2 * v16 + 2912);
                }
                else
                {
                  BOOL v21 = (v27 & 0x30) == 0;
                  long long v29 = (unsigned __int16 *)(v4 + v15 + 2400);
                  if (!v21) {
                    long long v29 = (unsigned __int16 *)(v4 + 2 * v16 + 2656);
                  }
                }
              }
              else
              {
                long long v29 = (unsigned __int16 *)(v4 + 2 * v16 + 2400);
              }
              unsigned int v30 = *v29;
              if (*(unsigned __int16 *)(a2 + 8) < v30) {
                *(_WORD *)(a2 + 8) = v30;
              }
              LOWORD(v26) = *(_WORD *)(a2 + 10);
              double v31 = (double)*(unint64_t *)&v26;
              LOBYTE(v26) = v22[256];
              LOBYTE(v24) = v22[384];
              double v32 = (double)v24;
              double v33 = (double)*(unint64_t *)&v26 + v32 * 0.0625;
              if (v33 > v31)
              {
                *(_WORD *)(a2 + 10) = (int)v33;
                LOBYTE(v33) = v22[256];
                LOBYTE(v31) = v22[384];
                double v31 = (double)*(unint64_t *)&v31;
                double v32 = 0.0625;
                double v33 = (double)*(unint64_t *)&v33 + v31 * 0.0625;
              }
              LOBYTE(v31) = *v22;
              LOBYTE(v32) = v22[128];
              double v13 = (double)*(unint64_t *)&v31 + (double)*(unint64_t *)&v32 * 0.0625;
              double v12 = v13 - v33;
              if (v12 <= 6.0)
              {
                ++*(_WORD *)(a2 + 14);
                if (v12 <= 3.0) {
                  ++*(_WORD *)(a2 + 12);
                }
              }
              ++v17;
            }
          }
        }
        ++v16;
        v15 += 2;
        v14 += 4;
      }
      *(unsigned char *)(a2 + 16) = v17;
      if (v10)
      {
        if (v9 <= 1) {
          uint64_t v34 = 1;
        }
        else {
          uint64_t v34 = v9;
        }
        uint64_t v35 = (unsigned __int8 *)v46;
        do
        {
          unsigned int v36 = *v35++;
          if (v36 >= 2) {
            ++*(_WORD *)(a2 + 6);
          }
          --v34;
        }
        while (v34);
      }
      if (v17 > 0)
      {
        if (v17 >= 5) {
          int v37 = 5;
        }
        else {
          int v37 = v17;
        }
        uint64_t v38 = (v17 - 1);
        VecSortAscR8(v45, 0, v17 - 1);
        int v39 = v17 + ~v37;
        uint64_t v40 = v17 - 1;
        uint64_t v41 = v39;
        double v42 = 0.0;
        do
          double v42 = v42 + v45[v40--];
        while (v40 > v39);
        *(double *)(a2 + 24) = v42 / (double)v37;
        VecSortAscR8(v44, 0, v17 - 1);
        double v43 = 0.0;
        do
          double v43 = v43 + v44[v38--];
        while (v38 > v41);
        *(double *)(a2 + 32) = v43 / (double)v37;
      }
      break;
  }
}

void API_Get_Dbg_Constell_PE_Data(uint64_t a1)
{
  int v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  int v4 = v1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t **)(p_api + 56);
  uint64_t v48 = *(void *)(p_api + 168);
  unsigned int v6 = *(unsigned char **)(p_api + 72);
  uint64_t v7 = *(void *)(p_api + 96);
  uint64_t v8 = *(void *)(p_api + 40);
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, 39);
  memset(v56, 0, 39);
  switch(v1)
  {
    case 1:
      if (v6[22])
      {
        unsigned int v9 = (unsigned char *)v5[8];
        int v10 = (_OWORD *)v5[9];
        int v11 = 32;
        int v12 = -1;
        double v43 = (_OWORD *)v5[10];
        goto LABEL_16;
      }
      break;
    case 2:
      if (v6[23])
      {
        unsigned int v9 = (unsigned char *)v5[2146];
        int v10 = (_OWORD *)v5[2147];
        double v43 = (_OWORD *)v5[2148];
        v5 += 1489;
        int v11 = 24;
        goto LABEL_15;
      }
      break;
    case 3:
      if (v6[27])
      {
        unsigned int v9 = (unsigned char *)v5[2202];
        int v10 = (_OWORD *)v5[2203];
        double v43 = (_OWORD *)v5[2204];
        v5 += 2194;
        int v11 = 36;
        goto LABEL_15;
      }
      break;
    case 4:
      if (v6[26])
      {
        unsigned int v9 = (unsigned char *)v5[3182];
        int v10 = (_OWORD *)v5[3183];
        double v43 = (_OWORD *)v5[3184];
        v5 += 3174;
        int v11 = 63;
        goto LABEL_15;
      }
      break;
    case 5:
      if (v6[24])
      {
        unsigned int v9 = (unsigned char *)v5[1137];
        int v10 = (_OWORD *)v5[1138];
        double v43 = (_OWORD *)v5[1139];
        v5 += 1129;
        int v11 = 10;
        int v12 = -193;
        goto LABEL_16;
      }
      break;
    case 6:
      if (v6[28])
      {
        v5 += 5948;
        unsigned int v9 = (unsigned char *)v5[7];
        int v10 = (_OWORD *)v5[8];
        double v43 = (_OWORD *)v5[9];
        int v11 = 14;
LABEL_15:
        int v12 = -1;
        goto LABEL_16;
      }
      break;
    case 7:
      if (v6[25])
      {
        uint64_t v41 = 0;
        while (1)
        {
          unsigned int v42 = *(unsigned __int8 *)(v8 + 8783 + v41);
          if (v42 >= 3) {
            break;
          }
          v58[v41] = 0;
          *((unsigned char *)v57 + v41) = 0x10100u >> (8 * v42);
          *((unsigned char *)v56 + v41++) = 0;
          if (v41 == 39)
          {
            v5 += 2192;
            int v11 = 39;
            int v12 = -120;
            double v43 = v56;
            int v10 = v57;
            unsigned int v9 = v58;
LABEL_16:
            unint64_t v45 = __PAIR64__(v11, v12);
            uint64_t v46 = *v5;
            goto LABEL_17;
          }
        }
        EvCrt_Illegal_switch_default("API_Get_Dbg_Constell_PE_Data", 0xA6Cu);
      }
      break;
    default:
      unsigned int v9 = 0;
      int v10 = 0;
      double v43 = 0;
      unint64_t v45 = 0;
      uint64_t v46 = 0;
LABEL_17:
      double v13 = (unsigned __int8 *)(v8 + 8592);
      if (*(unsigned char *)(v8 + 8592))
      {
        unint64_t v14 = 0;
        do
        {
          LODWORD(v55[0]) = 0;
          unsigned int v15 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v8 + 6194 + 2 * v14) - 1), v55);
          if (LODWORD(v55[0]) == v4 && (v15 & 0x80000000) == 0)
          {
            ++*(unsigned char *)(v3 + 88);
            if (v9[v15] || *((unsigned char *)v10 + v15)) {
              ++*(unsigned char *)(v3 + 89);
            }
          }
          ++v14;
        }
        while (v14 < *v13);
      }
      if (*(unsigned char *)(v8 + 8595))
      {
        unint64_t v16 = 0;
        uint64_t v17 = v8 + 7066;
        do
        {
          LODWORD(v55[0]) = 0;
          int v18 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v17 + 2 * v16) - 1), v55);
          if (LODWORD(v55[0]) == v4 && (v18 & 0x80000000) == 0) {
            ++*(unsigned char *)(v3 + 90);
          }
          ++v16;
        }
        while (v16 < v13[3]);
      }
      int v44 = v10;
      uint64_t v47 = v9;
      bzero(v55, 0x400uLL);
      bzero(v54, 0x400uLL);
      bzero(v53, 0x400uLL);
      bzero(v52, 0x400uLL);
      bzero(v51, 0x400uLL);
      bzero(v50, 0x400uLL);
      uint64_t v19 = 0;
      int v20 = 0;
      int v21 = 0;
      int v22 = 0;
      uint64_t v49 = 0;
      int v23 = 0;
      uint64_t v24 = -1024;
      uint64_t v25 = 36872;
      uint64_t v26 = 22224;
      uint64_t v27 = 7064;
      uint64_t v28 = 29008;
      uint64_t v29 = 21968;
      do
      {
        if (*(unsigned __int8 *)(v7 + v19 + 96) == v4 && *(int *)(v7 + v19 + 1248) >= 10)
        {
          uint64_t v30 = v45 + *(unsigned __int8 *)(v7 + v19 + 98);
          if (v30 < HIDWORD(v45))
          {
            if (!*(unsigned char *)v3) {
              *(unsigned char *)uint64_t v3 = 1;
            }
            if (v47[v30] || *((unsigned char *)v44 + v30))
            {
              ++*(unsigned char *)(v3 + 1);
            }
            else if (*((unsigned char *)v43 + v30))
            {
              ++*(unsigned char *)(v3 + 2);
            }
            if (*(unsigned char *)(v46 + v30)) {
              ++*(unsigned char *)(v3 + 3);
            }
            else {
              ++*(unsigned char *)(v3 + 4);
            }
            if (*(unsigned char *)(v48 + v27))
            {
              v55[v23] = fabs(*(double *)(v48 + v24 + 14104));
              v52[v23++] = fabs(*(double *)(v48 + v24 + 20632));
            }
            unsigned int v31 = *(_DWORD *)(v48 + v19 + 7320) - 1;
            if (v31 <= 0x1C && v22 <= 7) {
              *(unsigned char *)(v3 + v22++ + 9) = aCghkmnpqrstvya_0[v31];
            }
            if (*(unsigned char *)(v48 + v29))
            {
              v54[v49] = fabs(*(double *)(v48 + v28));
              v51[v49] = fabs(*(double *)(v48 + v28 + 5504));
              LODWORD(v49) = v49 + 1;
            }
            unsigned int v32 = *(_DWORD *)(v48 + v26) - 1;
            if (v32 <= 0x1C && v21 <= 7) {
              *(unsigned char *)(v3 + v21++ + 17) = aCghkmnpqrstvya_0[v32];
            }
            if (*(unsigned char *)(v48 + v25))
            {
              v53[HIDWORD(v49)] = fabs(*(double *)(v48 + v28 + 14904));
              v50[HIDWORD(v49)] = fabs(*(double *)(v48 + v28 + 20408));
              ++HIDWORD(v49);
            }
            unsigned int v33 = *(_DWORD *)(v48 + v26 + 14904) - 1;
            if (v33 <= 0x1C && v20 <= 7) {
              *(unsigned char *)(v3 + v20++ + 25) = aCghkmnpqrstvya_0[v33];
            }
          }
        }
        v19 += 4;
        ++v25;
        v26 += 4;
        ++v27;
        v28 += 8;
        ++v29;
        v24 += 8;
      }
      while (v19 != 512);
      if (v23)
      {
        *(unsigned char *)(v3 + 6) = v23;
        int v34 = v23;
        VecMedian8(v55, v23);
        *(void *)(v3 + 40) = v35;
        VecMedian8(v52, v34);
        *(void *)(v3 + 64) = v36;
      }
      if (v49)
      {
        *(unsigned char *)(v3 + 7) = v49;
        VecMedian8(v54, v49);
        *(void *)(v3 + 48) = v37;
        VecMedian8(v51, v49);
        *(void *)(v3 + 72) = v38;
      }
      if (HIDWORD(v49))
      {
        *(unsigned char *)(v3 + 8) = BYTE4(v49);
        VecMedian8(v53, SHIDWORD(v49));
        *(void *)(v3 + 56) = v39;
        VecMedian8(v50, SHIDWORD(v49));
        *(void *)(v3 + 80) = v40;
      }
      break;
  }
}

unint64_t API_Get_Dbg_Constell_Orb_Data(unint64_t result, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(p_api + 56);
  uint64_t v3 = *(uint64_t **)(p_api + 72);
  uint64_t v4 = *(void *)(p_api + 40);
  *(unsigned char *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, 39);
  memset(v23, 0, 39);
  switch((int)result)
  {
    case 1:
      if (*((unsigned char *)v3 + 22))
      {
        uint64_t v5 = (unsigned char *)v2[8];
        unsigned int v6 = (_OWORD *)v2[9];
        uint64_t v7 = v3 + 60;
        uint64_t v8 = v3 + 95;
        uint64_t v9 = 32;
        int v10 = (_OWORD *)v2[10];
        goto LABEL_19;
      }
      break;
    case 2:
      if (*((unsigned char *)v3 + 23))
      {
        uint64_t v5 = (unsigned char *)v2[2146];
        unsigned int v6 = (_OWORD *)v2[2147];
        int v10 = (_OWORD *)v2[2148];
        v2 += 1489;
        uint64_t v7 = v3 + 61;
        uint64_t v8 = v3 + 96;
        uint64_t v9 = 24;
        goto LABEL_19;
      }
      break;
    case 3:
      if (*((unsigned char *)v3 + 27))
      {
        uint64_t v5 = (unsigned char *)v2[2202];
        unsigned int v6 = (_OWORD *)v2[2203];
        int v10 = (_OWORD *)v2[2204];
        v2 += 2194;
        uint64_t v7 = v3 + 65;
        uint64_t v8 = v3 + 100;
        uint64_t v9 = 36;
        goto LABEL_19;
      }
      break;
    case 4:
      if (*((unsigned char *)v3 + 26))
      {
        uint64_t v5 = (unsigned char *)v2[3182];
        unsigned int v6 = (_OWORD *)v2[3183];
        int v10 = (_OWORD *)v2[3184];
        v2 += 3174;
        uint64_t v7 = v3 + 64;
        uint64_t v8 = v3 + 99;
        uint64_t v9 = 63;
        goto LABEL_19;
      }
      break;
    case 5:
      if (*((unsigned char *)v3 + 24))
      {
        uint64_t v5 = (unsigned char *)v2[1137];
        unsigned int v6 = (_OWORD *)v2[1138];
        int v10 = (_OWORD *)v2[1139];
        v2 += 1129;
        uint64_t v7 = v3 + 62;
        uint64_t v8 = v3 + 97;
        uint64_t v9 = 10;
        goto LABEL_19;
      }
      break;
    case 6:
      if (*((unsigned char *)v3 + 28))
      {
        v2 += 5948;
        uint64_t v5 = (unsigned char *)v2[7];
        unsigned int v6 = (_OWORD *)v2[8];
        int v10 = (_OWORD *)v2[9];
        uint64_t v7 = v3 + 66;
        uint64_t v8 = v3 + 101;
        uint64_t v9 = 14;
        goto LABEL_19;
      }
      break;
    case 7:
      if (*((unsigned char *)v3 + 25))
      {
        uint64_t v11 = 0;
        uint64_t v12 = v4 + 8783;
        do
        {
          unsigned int v13 = *(unsigned __int8 *)(v12 + v11);
          if (v13 >= 3)
          {
            return (unint64_t)EvCrt_Illegal_switch_default("API_Get_Dbg_Constell_Orb_Data", 0xB92u);
          }
          v25[v11] = 0;
          *((unsigned char *)v24 + v11) = 0x10100u >> (8 * v13);
          *((unsigned char *)v23 + v11++) = 0;
        }
        while (v11 != 39);
        v2 += 2192;
        uint64_t v7 = v3 + 63;
        uint64_t v8 = v3 + 98;
        int v10 = v23;
        unsigned int v6 = v24;
        uint64_t v5 = v25;
        uint64_t v9 = 39;
LABEL_19:
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t result = 0;
        uint64_t v19 = 0;
        uint64_t v20 = *v7;
        uint64_t v21 = *v2;
        uint64_t v22 = *v8;
        do
        {
          if (v5[v19])
          {
            result |= 1 << v19;
            *(void *)(a2 + 8) = result;
          }
          if (*((unsigned char *)v10 + v19))
          {
            v18 |= 1 << v19;
            *(void *)(a2 + 24) = v18;
          }
          if (*(unsigned char *)(v21 + v19))
          {
            v17 |= 1 << v19;
            *(void *)(a2 + 32) = v17;
          }
          if (*((unsigned char *)v6 + v19))
          {
            v16 |= 1 << v19;
            *(void *)(a2 + 16) = v16;
          }
          if (*(unsigned char *)(v20 + v19))
          {
            v15 |= 1 << v19;
            *(void *)(a2 + 40) = v15;
          }
          if (*(unsigned char *)(v22 + v19))
          {
            v14 |= 1 << v19;
            *(void *)(a2 + 48) = v14;
          }
          ++v19;
        }
        while (v9 != v19);
        if (result || v18 || v16 || v14 || v15) {
          *(unsigned char *)a2 = 1;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t API_Get_UTC_Cor(char a1, double *a2)
{
  uint64_t v3 = *(void *)(p_api + 48);
  uint64_t v4 = *(void *)(p_api + 56);
  int v5 = *(_DWORD *)(v4 + 8972);
  if ((v5 - 1) > 5)
  {
LABEL_4:
    if (*(unsigned char *)(v3 + 80) && *(__int16 *)(v3 + 82) >= 1)
    {
      UTC_Leap_Second_For_GLON_Day_4yrBluint64_t k = Get_UTC_Leap_Second_For_GLON_Day_4yrBlk(*(unsigned __int16 *)(v3 + 82), *(__int16 *)(v3 + 84), *(double *)(v3 + 88));
      if (UTC_Leap_Second_For_GLON_Day_4yrBlk == -99) {
        LOBYTE(v6) = 18;
      }
      else {
        LOBYTE(v6) = UTC_Leap_Second_For_GLON_Day_4yrBlk;
      }
    }
    else
    {
      if (!*(unsigned char *)(v3 + 16) || (int v8 = *(__int16 *)(v3 + 32), v8 < 1025))
      {
        uint64_t v10 = 0;
        LOBYTE(v6) = 18;
LABEL_40:
        int v25 = *(unsigned __int8 *)(v4 + 8986);
        if (v25 != v6)
        {
          EvLog_v("API_Get_UTC_Cor:  Default %d sec GPS-UTC Correction updated from %d sec", (char)v6, (char)v25);
          *(unsigned char *)(v4 + 8986) = v6;
          *(unsigned char *)(v4 + 8989) = v6;
          uint64_t v4 = *(void *)(p_api + 56);
        }
        *(_DWORD *)(v4 + 8972) = 1;
        goto LABEL_43;
      }
      uint64_t v9 = 0;
      while ((unsigned __int16)v8 < *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v9 + 4]
           || (unsigned __int16)v8 >= *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v9 + 16])
      {
        v9 += 12;
        if (v9 == 96) {
          goto LABEL_38;
        }
      }
      LOBYTE(v6) = Time_Data_At_Leap_Sec_Change[v9 + 10];
      if (v6 != 157) {
        goto LABEL_39;
      }
LABEL_38:
      LOBYTE(v6) = 18;
    }
LABEL_39:
    uint64_t v10 = 1;
    goto LABEL_40;
  }
  if (v5 == 1)
  {
    int v6 = *(char *)(v4 + 8986);
    if (v6 >= 18) {
      goto LABEL_4;
    }
LABEL_23:
    uint64_t v10 = 1;
LABEL_43:
    double v24 = (double)(char)v6;
LABEL_44:
    *a2 = v24;
    return v10;
  }
  unsigned int v11 = v5 - 4;
  if (*(unsigned char *)(v3 + 16)) {
    BOOL v12 = v11 >= 3;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    LOBYTE(v6) = *(unsigned char *)(v4 + 8986);
    goto LABEL_23;
  }
  int v13 = (int)(*(double *)(v3 + 40) - *(double *)(v3 + 48) + 0.0005);
  int v14 = *(__int16 *)(v3 + 32);
  int v15 = *(unsigned __int8 *)(v4 + 8987);
  int v16 = v15 | 0x400;
  int v17 = v14 - 127;
  if (v14 - 127 > (v15 | 0x400)) {
    int v16 = v14 - 127;
  }
  unsigned int v18 = (v16 - v15 - 769) & 0xFFFFFF00 | v15;
  int v19 = v13 + 604800 * v14;
  if (*(char *)(v4 + 8989) >= *(char *)(v4 + 8986)) {
    int v20 = *(char *)(v4 + 8986);
  }
  else {
    int v20 = *(char *)(v4 + 8989);
  }
  if ((int)(86400 * *(unsigned __int8 *)(v4 + 8988) - v19 + v20 + 604800 * v18 + 619315200) <= 0) {
    char v21 = *(unsigned char *)(v4 + 8989);
  }
  else {
    char v21 = *(unsigned char *)(v4 + 8986);
  }
  double v22 = (double)v21;
  *a2 = v22;
  if ((a1 & 1) == 0)
  {
    int v23 = *(unsigned __int8 *)(v4 + 8985);
    if (v17 <= (v23 | 0x400)) {
      int v17 = v23 | 0x400;
    }
    double v24 = v22
        + (double)*(int *)(v4 + 8980) * 9.31322575e-10
        + (double)*(int *)(v4 + 8976)
        * 8.8817842e-16
        * (double)(int)(v19
                      - (*(unsigned __int8 *)(v4 + 8984) << 12)
                      - 604800 * ((v17 - v23 - 769) & 0xFFFFFF00 | v23)
                      - 619315200);
    uint64_t v10 = 1;
    goto LABEL_44;
  }
  return 1;
}

unsigned int *API_Get_Next_Leap_Second(unsigned int *result, signed __int8 *a2, int *a3)
{
  uint64_t v3 = p_api;
  uint64_t v4 = *(void *)(p_api + 48);
  uint64_t v5 = *(void *)(p_api + 56);
  void *result = 0;
  *a2 = 0;
  *a3 = 0x7FFFFFFF;
  if (*(unsigned char *)(v4 + 16))
  {
    if (*(int *)v4 >= 1 && (*(_DWORD *)(*(void *)(v3 + 56) + 8972) - 4) <= 2)
    {
      int v6 = (unsigned __int8 *)(v5 + 8986);
      int v7 = v6[3];
      int v8 = *v6;
      if (v7 != v8)
      {
        unsigned int v11 = result;
        double v12 = *(double *)(v4 + 40);
        double v13 = *(double *)(v4 + 48);
        int v14 = *(__int16 *)(v4 + 32);
        int v15 = v6[1];
        int v16 = v6[2];
        uint64_t result = (unsigned int *)Is_Future_Leap_Sec_Date_Not_Valid(v14, 1, v15, v6[2]);
        if ((result & 1) == 0)
        {
          int v17 = v15 | 0x400;
          if (v14 - 127 > (v15 | 0x400)) {
            int v17 = v14 - 127;
          }
          unsigned int v18 = 604800 * ((v17 - v15 - 769) & 0xFFFFFF00 | v15) + 86400 * v16 + 619315200;
          unsigned int *v11 = v18;
          int v19 = (char)v8;
          if ((char)v7 < (char)v8) {
            int v19 = (char)v7;
          }
          *a3 = v19 - (int)(v12 - v13 + 0.0005) - 604800 * v14 + v18;
          *v11 += v19;
          *a2 = v7 - v8;
        }
      }
    }
  }
  return result;
}

uint64_t API_Get_Nav_Data(uint64_t a1)
{
  int v1 = (char *)MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v382 = *MEMORY[0x263EF8340];
  uint64_t v5 = p_api;
  uint64_t v6 = *(void *)(p_api + 80);
  uint64_t v348 = *(void *)(p_api + 72);
  uint64_t v7 = *(void *)(p_api + 96);
  uint64_t v8 = *(void *)(p_api + 248);
  uint64_t v9 = *(void *)(p_api + 168);
  uint64_t v10 = *(void *)(p_api + 128);
  uint64_t v11 = *(void *)(p_api + 56);
  uint64_t v270 = *(void *)(p_api + 48);
  uint64_t v12 = *(void *)(p_api + 112);
  bzero(v1, 0x18D0uLL);
  bzero(v3, 0x878uLL);
  if (*(double *)(*(void *)(v5 + 80) + 360) > 600.0) {
    return 0;
  }
  unsigned int v13 = 0;
  int v14 = (_OWORD *)(v6 + 824);
  uint64_t v274 = v11 + 50584;
  uint64_t v343 = v11 + 47500;
  unsigned int v269 = (_WORD *)(v11 + 25388);
  uint64_t v319 = v11 + 17132;
  uint64_t v273 = (unsigned char *)(v11 + 8986);
  char v317 = (unsigned char *)(v9 + 79568);
  uint64_t v315 = v9 + 60992;
  int v313 = (_DWORD *)(v9 + 59928);
  unsigned __int8 v272 = (__int16 *)(v4 + 32);
  BOOL v271 = (double *)(v4 + 40);
  int v322 = (int16x4_t *)v12;
  int v311 = (_DWORD *)(v12 + 547);
  unsigned int v301 = (__int32 *)(v10 + 27136);
  uint64_t v333 = v11;
  uint64_t v15 = v11 + 17328;
  unint64_t v280 = (const double *)(v9 + 1632);
  int v276 = (double *)(v9 + 1640);
  uint64_t v324 = v10;
  uint64_t v326 = v9;
  long long v275 = (double *)(v9 + 1648);
  uint64_t v344 = v7 + 3;
  int v16 = *(_DWORD *)(v6 + 32);
  uint64_t v278 = v10 + 183;
  uint64_t v346 = v348 + 816;
  int v277 = (_OWORD *)(v6 + 824);
  int v342 = v4;
  uint64_t v329 = v8;
  uint64_t v330 = v6;
  uint64_t v328 = v7;
  while (2)
  {
    unsigned int v340 = v13;
    int v341 = v16;
    int v17 = *(_DWORD *)(v6 + 36);
    *((_DWORD *)v4 + 1) = v17;
    v3[1] = v17;
    uint64_t v18 = *(void *)(v6 + 40);
    *((void *)v4 + 1) = v18;
    *((void *)v3 + 1) = v18;
    uint64_t v19 = *(unsigned int *)(v6 + 56);
    v4[16] = (int)v19 > 0;
    BOOL v20 = (int)v19 >= 1 && *(unsigned char *)(v6 + 60) != 0;
    v4[17] = v20;
    *((_WORD *)v4 + 16) = *(_WORD *)(v6 + 62);
    uint64_t v21 = *(void *)(v6 + 48);
    *((void *)v4 + 5) = v21;
    *((void *)v4 + 6) = v21;
    *((void *)v4 + 7) = *(void *)(v6 + 152);
    *((void *)v4 + 8) = *(void *)(v6 + 184);
    *((double *)v4 + 13) = *(double *)(v6 + 224) * 57.2957795;
    *((double *)v4 + 14) = *(double *)(v6 + 232) * 57.2957795;
    *((void *)v4 + 15) = *(void *)(v6 + 240);
    *((double *)v4 + 16) = *(double *)(v6 + 240) - *(double *)(v6 + 248);
    *((void *)v4 + 10) = *(void *)(v6 + 80);
    *((void *)v4 + 11) = *(void *)(v6 + 88);
    *((void *)v4 + 12) = *(void *)(v6 + 96);
    *(_OWORD *)(v4 + 136) = v14[10];
    *((double *)v4 + 19) = -*(double *)(v6 + 968);
    double v22 = *(double *)(v6 + 872);
    if (v22 >= 9499050.0) {
      double v23 = g_TOW_stat_Sigma_Table[v19];
    }
    else {
      double v23 = v22 * 0.00000000333564095;
    }
    *((double *)v4 + 20) = v23;
    *((double *)v4 + 21) = *(double *)(v6 + 864) * 0.00000000333564095;
    *((double *)v4 + 22) = *(double *)(v6 + 920) * 0.00000000333564095;
    *(_OWORD *)(v4 + 184) = *v14;
    *((void *)v4 + 25) = *(void *)(v6 + 848);
    *((_OWORD *)v4 + 13) = *(_OWORD *)(v6 + 928);
    *((void *)v4 + 28) = *(void *)(v6 + 944);
    *(_OWORD *)(v4 + 232) = v14[4];
    double v24 = *(double *)(v6 + 912);
    *((double *)v4 + 31) = v24;
    *((void *)v4 + 32) = *(void *)(v6 + 3824);
    if (v24 > 360.0) {
      *((void *)v4 + 31) = 0x408F380000000000;
    }
    *((void *)v4 + 33) = *(void *)(v6 + 808);
    *((_OWORD *)v4 + 17) = *(_OWORD *)(v6 + 784);
    *((void *)v4 + 36) = *(void *)(v6 + 800);
    uint64_t v25 = *(void *)(p_api + 48);
    uint64_t v26 = *(void *)(p_api + 56);
    uint64_t v27 = *(void *)(p_api + 168);
    if (*(unsigned char *)(v25 + 16))
    {
      uint64_t v28 = *(void *)(p_api + 72);
      int v29 = *(__int16 *)(v25 + 32);
      int v30 = v29 < *(__int16 *)(v28 + 1728);
      if (*(int *)v25 >= 9 && *(void *)(v28 + 1744) > (int)*(double *)(v25 + 40) + 604800 * v29) {
        v30 |= 2u;
      }
    }
    else
    {
      int v30 = 0;
    }
    double v31 = *(double *)(v27 + 40);
    if (v31 > 100.0 && *(int *)(v27 + 20) > 8) {
      v30 |= 4u;
    }
    if (v31 < -100.0 && *(int *)(v27 + 20) > 8) {
      v30 |= 8u;
    }
    uint64_t v32 = 0;
    unsigned int v33 = 0;
    unsigned int v34 = 0;
    uint64_t v35 = *(void *)(p_api + 96) + 2656;
    uint64_t v36 = (unsigned __int16 *)v35;
    do
    {
      if (*(int *)(v35 + 4 * v32 - 1408) >= 10 && *(v36 - 128) >= 0xC8u)
      {
        unsigned int v37 = *(unsigned __int8 *)(v35 + v32 - 896);
        unsigned int v38 = *(unsigned __int8 *)(v35 + v32 - 640);
        unsigned int v39 = v37 <= 0x2C ? v34 : v34 + 1;
        int v40 = v38 - v37;
        BOOL v41 = v38 <= 0x2C && v40 <= 5;
        unsigned int v42 = v41 ? v33 : v33 + 1;
        if (*v36 >= 0xC8u)
        {
          unsigned int v34 = v39;
          unsigned int v33 = v42;
        }
      }
      ++v32;
      ++v36;
    }
    while (v32 != 128);
    uint64_t v43 = 0;
    int32x4_t v44 = 0uLL;
    int32x4_t v45 = 0uLL;
    int32x4_t v46 = 0uLL;
    v47.i64[0] = 0x100000001;
    v47.i64[1] = 0x100000001;
    int32x4_t v48 = 0uLL;
    do
    {
      uint8x16_t v49 = (uint8x16_t)vceqzq_s8(*(int8x16_t *)(v26 + 8994 + v43));
      uint16x8_t v50 = vmovl_u8(*(uint8x8_t *)v49.i8);
      uint16x8_t v51 = vmovl_high_u8(v49);
      int32x4_t v48 = vaddq_s32(v48, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v51), v47));
      int32x4_t v46 = vaddq_s32(v46, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v51.i8), v47));
      int32x4_t v45 = vaddq_s32(v45, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v50), v47));
      int32x4_t v44 = vaddq_s32(v44, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v50.i8), v47));
      v43 += 16;
    }
    while (v43 != 32);
    int v337 = v30;
    uint64_t v339 = *(void *)(p_api + 48);
    uint64_t v52 = 0;
    unsigned int v53 = 0;
    unsigned int v334 = vaddvq_s32(vaddq_s32(vaddq_s32(v44, v46), vaddq_s32(v45, v48)));
    do
      v53 += *(unsigned __int8 *)(v26 + 61952 + v52++);
    while (v52 != 218);
    uint64_t v54 = 0;
    unsigned int v55 = 0;
    uint64_t v56 = *(void *)(p_api + 80) + 1000;
    do
    {
      int v57 = *(_DWORD *)(v56 + v54);
      Is_Legal(v57);
      switch((char)v57)
      {
        case 0:
          EvCrt_Illegal_switch_case("API_Get_Spoofing_Flags", 0x914u);
          break;
        case 1:
          uint64_t v61 = BYTE2(v57) - 1;
          if (*(unsigned char *)(*(void *)(v26 + 64) + v61))
          {
            uint64_t v62 = v26 + 116 * (int)v61 + 120;
            goto LABEL_55;
          }
          break;
        case 3:
          uint64_t v58 = BYTE2(v57) - 1;
          if (*(unsigned char *)(*(void *)(v26 + 17616) + v58))
          {
            BOOL v59 = Is_GAL_IntEph_Real(v26 + 88 * (int)v58 + 17708);
            goto LABEL_56;
          }
          break;
        case 4:
          uint64_t v63 = BYTE2(v57) - 1;
          if (*(unsigned char *)(*(void *)(v26 + 25456) + v63))
          {
            BOOL v59 = Is_BDS_IntEph_Real(v26 + 152 * (int)v63 + 25512);
            goto LABEL_56;
          }
          break;
        case 5:
          uint64_t v64 = BYTE2(v57) - 193;
          if (*(unsigned char *)(*(void *)(v26 + 9096) + v64))
          {
            uint64_t v62 = v26 + 116 * (int)v64 + 9152;
LABEL_55:
            BOOL v59 = Is_GPS_BinEph_Real(v62);
            goto LABEL_56;
          }
          break;
        case 6:
          uint64_t v60 = BYTE2(v57) - 1;
          if (*(unsigned char *)(*(void *)(v26 + 47640) + v60))
          {
            BOOL v59 = Is_NVIC_IntEph_Real(v26 + 76 * (int)v60 + 47696);
LABEL_56:
            v55 += !v59;
          }
          break;
        default:
          break;
      }
      v54 += 4;
    }
    while (v54 != 512);
    int v65 = v337 | 0x10;
    if (v34 <= 2) {
      int v65 = v337;
    }
    if (v33 > 2) {
      v65 |= 0x20u;
    }
    if (v334 > 2) {
      v65 |= 0x100u;
    }
    if (v53 > 2) {
      v65 |= 0x200u;
    }
    if (v55 > 2) {
      v65 |= 0x400u;
    }
    if (*(unsigned char *)(v26 + 8992)) {
      v65 |= 0x1000u;
    }
    if (*(unsigned char *)(v26 + 8993)) {
      v65 |= 0x2000u;
    }
    if (*(unsigned char *)(v339 + 104)) {
      v65 |= 0x10000u;
    }
    if (*(unsigned char *)(v339 + 105)) {
      v65 |= 0x20000u;
    }
    uint64_t v4 = v342;
    *((_DWORD *)v342 + 74) = v65;
    *((_DWORD *)v342 + 75) = *(_DWORD *)(v348 + 56);
    uint64_t v66 = p_api;
    uint64_t v67 = *(void *)(p_api + 80);
    int v68 = *(_DWORD *)(v67 + 4);
    if (!v68)
    {
      int v71 = 0;
      uint64_t v69 = v329;
      uint64_t v6 = v330;
      goto LABEL_86;
    }
    uint64_t v69 = v329;
    uint64_t v6 = v330;
    if (v68 == 4)
    {
      BOOL v70 = *(unsigned char *)(v67 + 17) == 0;
      int v71 = 2;
    }
    else
    {
      if (v68 != 5)
      {
        int v71 = 1;
        goto LABEL_86;
      }
      BOOL v70 = *(unsigned char *)(v67 + 17) == 0;
      int v71 = 4;
    }
    if (!v70) {
      ++v71;
    }
LABEL_86:
    *((_DWORD *)v342 + 76) = v71;
    v355[0] = 0;
    int Num_SV_and_Clock_Unknowns = API_Get_Num_SV_and_Clock_Unknowns((unsigned int *)v355);
    int v73 = Num_SV_and_Clock_Unknowns - v355[0];
    if (*(int *)(v67 + 56) < 6)
    {
      if (!v68) {
        goto LABEL_104;
      }
      if (v73 < 3) {
        goto LABEL_104;
      }
      double v74 = 10.0;
      if (*(double *)(v67 + 808) >= 10.0 || *(double *)(v67 + 784) >= 10.0) {
        goto LABEL_104;
      }
      double v75 = *(double *)(v67 + 800);
      goto LABEL_102;
    }
    if (v73 >= 3)
    {
      if (*(double *)(v67 + 800) < 10.0)
      {
        int v76 = 4;
        goto LABEL_105;
      }
    }
    else if (v73 != 2)
    {
      if (v73 < 1) {
        goto LABEL_104;
      }
      goto LABEL_100;
    }
    if (*(double *)(v67 + 784) < 10.0)
    {
      int v76 = 3;
      goto LABEL_105;
    }
LABEL_100:
    if (!v68) {
      goto LABEL_104;
    }
    double v75 = *(double *)(v67 + 808);
    double v74 = 10.0;
LABEL_102:
    if (v75 < v74)
    {
      int v76 = 2;
      goto LABEL_105;
    }
LABEL_104:
    int v76 = Num_SV_and_Clock_Unknowns > 0;
LABEL_105:
    *((_DWORD *)v342 + 77) = v76;
    *((_DWORD *)v342 + 78) = API_Get_Fix_Reliability();
    int v77 = *(unsigned __int8 *)(v67 + 18);
    if (*(unsigned char *)(v67 + 18))
    {
      int v77 = *(_DWORD *)(v67 + 12);
      if (v77)
      {
        if (*(double *)(v67 + 840) <= 30000.0)
        {
          if (*(unsigned char *)(v67 + 500) && *(unsigned char *)(v67 + 516))
          {
            int v77 = 3;
          }
          else if (*(unsigned char *)(v67 + 16))
          {
            int v77 = 2;
          }
          else
          {
            int v77 = 1;
          }
        }
        else
        {
          int v77 = 0;
        }
      }
    }
    *((_DWORD *)v342 + 79) = v77;
    int v78 = *(int **)(v66 + 48);
    int v79 = 2 * (v68 != 0);
    if (*v78 > 8)
    {
      unint64_t v81 = &qword_26A9CA000;
    }
    else
    {
      int v80 = v78[25];
      unint64_t v81 = &qword_26A9CA000;
      if (v80
        && (int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v80) < 300000)
      {
        v79 |= 4u;
      }
    }
    if (*(_DWORD *)(v67 + 432) == 1) {
      int v82 = v79 | 8;
    }
    else {
      int v82 = v79;
    }
    if (*(_DWORD *)(v67 + 420) == 1) {
      v82 |= 0x10u;
    }
    if (*(_DWORD *)(v67 + 416) == 1) {
      unsigned int v83 = v82 | 0x20;
    }
    else {
      unsigned int v83 = v82;
    }
    if (*(_DWORD *)(v67 + 440) == 1)
    {
      int v84 = v83 | 0x40;
      v83 |= 0x80u;
      if (*(_DWORD *)(v67 + 444) != 1) {
        unsigned int v83 = v84;
      }
    }
    uint64_t v85 = 0;
    if (*(unsigned char *)(v67 + 548)) {
      v83 |= 0x100u;
    }
    if (*(unsigned char *)(v67 + 564)) {
      v83 |= 0x200u;
    }
    if (*(unsigned char *)(v67 + 580)) {
      v83 |= 0x400u;
    }
    if (*(unsigned char *)(v67 + 596)) {
      v83 |= 0x800u;
    }
    if (*(unsigned char *)(v67 + 692)) {
      v83 |= 0x1000u;
    }
    if (*(unsigned char *)(v67 + 628)) {
      v83 |= 0x2000u;
    }
    if (*(unsigned char *)(v67 + 612)) {
      v83 |= 0x4000u;
    }
    if (*(unsigned char *)(v67 + 756)) {
      v83 |= 0x8000u;
    }
    if (*(unsigned char *)(v67 + 708)) {
      v83 |= 0x10000u;
    }
    if (*(unsigned char *)(v67 + 724)) {
      v83 |= 0x20000u;
    }
    if (*(unsigned char *)(v67 + 740)) {
      v83 |= 0x40000u;
    }
    if (*(unsigned char *)(v67 + 532)) {
      v83 |= 0x1000000u;
    }
    if (*(unsigned char *)(v67 + 516)) {
      v83 |= 0x2000000u;
    }
    if (*(unsigned char *)(v67 + 500)) {
      v83 |= 0x4000000u;
    }
    if (*(unsigned char *)(v67 + 676)) {
      v83 |= 0x80000u;
    }
    int v86 = (void *)v81[6];
    uint64_t v87 = v86[9];
    while (!*(unsigned char *)(v87 + v85 + 257) && !*(unsigned char *)(v87 + v85 + 536) || *(char *)(v86[4] + v85) <= 0)
    {
      if (++v85 == 218) {
        goto LABEL_169;
      }
    }
    v83 |= 0x10000000u;
LABEL_169:
    uint64_t v88 = 0;
    uint64_t v89 = v86[7] + 61516;
    while (!*(unsigned char *)(v89 + v88))
    {
      if (++v88 == 218) {
        goto LABEL_174;
      }
    }
    v83 |= 0x20000000u;
LABEL_174:
    if (v83 <= 1) {
      int v90 = 1;
    }
    else {
      int v90 = v83;
    }
    *((_DWORD *)v342 + 81) = v90;
    uint64_t v91 = v348;
    if (*(unsigned __int8 *)(v6 + 19) < 2u)
    {
      if (!*(unsigned char *)(v6 + 19)) {
        goto LABEL_186;
      }
      unsigned int v92 = *(unsigned __int8 *)(v6 + 20);
LABEL_182:
      if (v92 > 1)
      {
        int v93 = 3;
        goto LABEL_187;
      }
      if (v92)
      {
        int v93 = 2;
        goto LABEL_187;
      }
LABEL_186:
      int v93 = 1;
      goto LABEL_187;
    }
    unsigned int v92 = *(unsigned __int8 *)(v6 + 20);
    if (v92 <= 2) {
      goto LABEL_182;
    }
    int v93 = 4;
LABEL_187:
    *((_DWORD *)v342 + 80) = v93;
    v342[328] = 2;
    if (sqrt(*((double *)v342 + 27) * *((double *)v342 + 27) + *((double *)v342 + 26) * *((double *)v342 + 26)) >= 400.0) {
      goto LABEL_196;
    }
    int v94 = *((_DWORD *)v342 + 77);
    if (!(v94 | v90 & 2)) {
      goto LABEL_196;
    }
    int v95 = *((_DWORD *)v342 + 78);
    if (!v95) {
      goto LABEL_196;
    }
    if ((v94 - 5) < 0xFFFFFFFE || (v95 - 5) < 0xFFFFFFFD)
    {
      uint64_t v91 = v348;
      if ((v94 - 2) >= 3 && (v90 & 2) == 0) {
        goto LABEL_196;
      }
    }
    else
    {
      v342[329] = 1;
      uint64_t v91 = v348;
    }
    v342[330] = 1;
LABEL_196:
    if (!*(_DWORD *)(v91 + 1772))
    {
      if (v342[329])
      {
        *(_DWORD *)(v91 + 1772) = *((_DWORD *)v342 + 1);
      }
      else
      {
        v342[330] = 0;
        *((_DWORD *)v342 + 76) = 0;
      }
    }
    *(_WORD *)((char *)v3 + 81) = v322[69].i16[0];
    *(int16x4_t *)(v3 + 21) = vuzp1_s16(v322[67], vrev32_s16(v322[67]));
    v3[23] = *v311;
    *((unsigned char *)v3 + 96) = v322[68].i8[7];
    *(_WORD *)((char *)v3 + 97) = *(_WORD *)(v91 + 250);
    *((unsigned char *)v3 + 99) = v322[68].i8[1];
    *((unsigned char *)v3 + 100) = v322[53].i8[4];
    *((_WORD *)v3 + 51) = v322[54].i32[0];
    *((unsigned char *)v3 + 104) = v322[56].i8[4];
    *(void *)((char *)v3 + 106) = 0;
    *(_DWORD *)((char *)v3 + 113) = 0;
    *((void *)v3 + 15) = *(void *)(v91 + 96);
    *((void *)v3 + 16) = *(void *)(v91 + 176);
    *((void *)v3 + 17) = *(void *)(v91 + 232);
    *((void *)v3 + 18) = *(void *)(v91 + 208);
    *((void *)v3 + 19) = 0;
    API_Get_Dbg_Constell_ME_Data(1, (uint64_t)(v3 + 40));
    API_Get_Dbg_Constell_ME_Data(5, (uint64_t)(v3 + 50));
    API_Get_Dbg_Constell_ME_Data(2, (uint64_t)(v3 + 60));
    API_Get_Dbg_Constell_ME_Data(3, (uint64_t)(v3 + 70));
    API_Get_Dbg_Constell_ME_Data(4, (uint64_t)(v3 + 80));
    API_Get_Dbg_Constell_ME_Data(6, (uint64_t)(v3 + 90));
    API_Get_Dbg_Constell_ME_Data(7, (uint64_t)(v3 + 100));
    int v96 = *(_DWORD *)(v348 + 1732);
    if (v96 < 1)
    {
      int v99 = 0;
    }
    else
    {
      uint64_t v97 = *(void *)(v81[6] + 48);
      if (*(unsigned char *)(v97 + 16) && *(int *)v97 >= 3) {
        int v98 = (int)*(double *)(v97 + 40) + 604800 * *(__int16 *)(v97 + 32);
      }
      else {
        int v98 = 0;
      }
      int v99 = (v98 - v96) / 3600;
    }
    v3[110] = v99;
    int v100 = *(_DWORD *)(v348 + 1736);
    if (v100 < 1)
    {
      *((_WORD *)v3 + 222) = 0;
      uint64_t v101 = v81[6];
      uint64_t v104 = v278;
    }
    else
    {
      uint64_t v101 = v81[6];
      uint64_t v102 = *(void *)(v101 + 48);
      if (*(unsigned char *)(v102 + 16) && *(int *)v102 >= 3) {
        int v103 = (int)*(double *)(v102 + 40) + 604800 * *(__int16 *)(v102 + 32);
      }
      else {
        LOBYTE(v103) = 0;
      }
      uint64_t v104 = v278;
      *((_WORD *)v3 + 222) = ((char)(v103 - v100) / 16);
    }
    uint64_t v105 = 0;
    uint64_t v106 = *(void *)(v101 + 64) + 448;
    int8x16_t v107 = 0uLL;
    do
    {
      int8x16_t v107 = vsubq_s8(v107, vtstq_s8(*(int8x16_t *)(v106 + v105), *(int8x16_t *)(v106 + v105)));
      v105 += 16;
    }
    while (v105 != 128);
    *((unsigned char *)v3 + 446) = vaddvq_s8(v107);
    if (*(unsigned char *)(v324 + 136)) {
      int v108 = *(_DWORD *)(v324 + 140);
    }
    else {
      int v108 = 0;
    }
    uint64_t v109 = 0;
    v3[112] = v108;
    do
    {
      *((unsigned char *)v3 + v109 + 452) = *(unsigned char *)(v104 + v109);
      ++v109;
    }
    while (v109 != 6);
    *((unsigned char *)v3 + 458) = *v317;
    v107.i32[0] = *v301;
    *((double *)v3 + 58) = (double)v107.u64[0] * 0.001;
    *((void *)v3 + 59) = *(void *)(v6 + 3816);
    *((void *)v3 + 60) = *(void *)(v6 + 3840);
    *((void *)v3 + 61) = *(void *)(v6 + 3864);
    *((unsigned char *)v3 + 496) = *(unsigned char *)(v6 + 18);
    *((unsigned char *)v3 + 497) = *(unsigned char *)(v324 + 240);
    API_Get_Dbg_Constell_PE_Data(1);
    API_Get_Dbg_Constell_PE_Data(5);
    API_Get_Dbg_Constell_PE_Data(2);
    API_Get_Dbg_Constell_PE_Data(3);
    API_Get_Dbg_Constell_PE_Data(4);
    API_Get_Dbg_Constell_PE_Data(6);
    API_Get_Dbg_Constell_PE_Data(7);
    API_Get_Dbg_Constell_Orb_Data(1uLL, (uint64_t)(v3 + 308));
    API_Get_Dbg_Constell_Orb_Data(5uLL, (uint64_t)(v3 + 322));
    API_Get_Dbg_Constell_Orb_Data(2uLL, (uint64_t)(v3 + 336));
    API_Get_Dbg_Constell_Orb_Data(3uLL, (uint64_t)(v3 + 350));
    API_Get_Dbg_Constell_Orb_Data(4uLL, (uint64_t)(v3 + 364));
    API_Get_Dbg_Constell_Orb_Data(6uLL, (uint64_t)(v3 + 378));
    API_Get_Dbg_Constell_Orb_Data(7uLL, (uint64_t)(v3 + 392));
    *((unsigned char *)v3 + 16) = *(unsigned char *)(v6 + 556);
    *((unsigned char *)v3 + 17) = *(unsigned char *)(v6 + 564);
    *((unsigned char *)v3 + 18) = *(_DWORD *)(v6 + 560) != 0;
    void v3[5] = *(_DWORD *)(v6 + 568);
    *((unsigned char *)v3 + 24) = v313[3];
    *((unsigned char *)v3 + 25) = v313[5];
    *((unsigned char *)v3 + 26) = *(unsigned char *)(v6 + 540);
    *((unsigned char *)v3 + 27) = *(unsigned char *)(v6 + 548);
    *((unsigned char *)v3 + 28) = *(_DWORD *)(v6 + 544) != 0;
    v3[8] = *(_DWORD *)(v6 + 552);
    *((unsigned char *)v3 + 36) = *v313;
    *((unsigned char *)v3 + 37) = v313[2];
    *((unsigned char *)v3 + 38) = *(unsigned char *)(v6 + 572);
    *((unsigned char *)v3 + 39) = *(unsigned char *)(v6 + 580);
    *((unsigned char *)v3 + 40) = *(_DWORD *)(v6 + 576) != 0;
    v3[11] = *(_DWORD *)(v6 + 584);
    *((unsigned char *)v3 + 48) = v313[6];
    *((unsigned char *)v3 + 49) = v313[8];
    *((unsigned char *)v3 + 50) = *(unsigned char *)(v6 + 620);
    *((unsigned char *)v3 + 51) = *(unsigned char *)(v6 + 628);
    *((unsigned char *)v3 + 52) = *(_DWORD *)(v6 + 624) != 0;
    v3[14] = *(_DWORD *)(v6 + 632);
    memset(v355, 0, sizeof(v355));
    Core_Get_ExtA_Alt(6000, v355);
    *((_OWORD *)v3 + 4) = *(_OWORD *)&v355[2];
    *((unsigned char *)v3 + 80) = v355[6];
    *((unsigned char *)v3 + 1176) = *(unsigned char *)(v6 + 604);
    *((unsigned char *)v3 + 1177) = *(unsigned char *)(v6 + 612);
    *((unsigned char *)v3 + 1178) = *(_DWORD *)(v6 + 608) != 0;
    v3[295] = *(_DWORD *)(v6 + 616);
    *((unsigned char *)v3 + 1184) = *(unsigned char *)(v315 + 24);
    *((double *)v3 + 149) = -(*(double *)(v6 + 224) - *(double *)v315 * 0.0174532925) * 6378137.0;
    *((double *)v3 + 150) = *(double *)(v6 + 328)
                          * (-(*(double *)(v6 + 232) - *(double *)(v315 + 8) * 0.0174532925)
                           * 6378137.0);
    double v110 = *(double *)(v315 + 32);
    double v111 = v110 - *(double *)(v6 + 376);
    *((double *)v3 + 151) = v111;
    double v112 = -360.0;
    if (v111 >= 180.0 || (double v112 = 360.0, v111 < -180.0))
    {
      *((double *)v3 + 151) = v111 + v112;
      double v110 = *(double *)(v315 + 32);
    }
    if (v110 <= 0.0) {
      double v113 = -0.5;
    }
    else {
      double v113 = 0.5;
    }
    double v114 = v110 + v113;
    if (v114 <= 2147483650.0)
    {
      if (v114 >= -2147483650.0) {
        int v115 = (int)v114;
      }
      else {
        LOWORD(v115) = 0;
      }
    }
    else
    {
      LOWORD(v115) = -1;
    }
    *((_WORD *)v3 + 608) = v115;
    double v116 = *(double *)(v315 + 40);
    if (v116 <= 0.0) {
      double v117 = -0.5;
    }
    else {
      double v117 = 0.5;
    }
    double v118 = v116 + v117;
    if (v118 <= 2147483650.0)
    {
      if (v118 >= -2147483650.0) {
        int v119 = (int)v118;
      }
      else {
        LOWORD(v119) = 0;
      }
    }
    else
    {
      LOWORD(v119) = -1;
    }
    *((_WORD *)v3 + 609) = v119;
    double v120 = *(double *)(v315 + 48);
    if (v120 <= 0.0) {
      double v121 = -0.5;
    }
    else {
      double v121 = 0.5;
    }
    double v122 = v120 + v121;
    if (v122 <= 2147483650.0)
    {
      if (v122 >= -2147483650.0) {
        int v123 = (int)v122;
      }
      else {
        LOBYTE(v123) = 0;
      }
    }
    else
    {
      LOBYTE(v123) = -1;
    }
    *((unsigned char *)v3 + 1220) = v123;
    *(_DWORD *)((char *)v3 + 1221) = *(_DWORD *)(v315 + 56);
    *((unsigned char *)v3 + 1225) = *(unsigned char *)(v315 + 60);
    int v354 = 0;
    memset(v355, 0, 24);
    memset(v367, 0, 24);
    *(void *)unint64_t v350 = 0;
    char v353 = 0;
    uint64_t v352 = 0;
    char Pos_LLH = Core_Get_Pos_LLH(*(_DWORD *)v326, 150000, 0, &v354, (uint64_t)v355, (uint64_t)v367, (uint64_t *)v350, (unsigned char *)v3 + 1634, &v353, (_DWORD *)&v352 + 1, (int *)&v352);
    *((unsigned char *)v3 + 1624) = Pos_LLH;
    if (Pos_LLH)
    {
      v3[407] = *(_DWORD *)(v6 + 436);
      *((unsigned char *)v3 + 1632) = BYTE4(v352);
      *((unsigned char *)v3 + 1633) = v352;
      int v125 = *(_DWORD *)(v6 + 440);
      BOOL v126 = v125 == 1 && *(unsigned char *)(v6 + 644) != 0;
      *((unsigned char *)v3 + 1625) = v126;
      *((unsigned char *)v3 + 1626) = v125 == 1;
      *((unsigned char *)v3 + 1627) = *(_DWORD *)(v6 + 640) != 0;
      double v127 = *(double *)&v355[2];
      *((double *)v3 + 205) = (*(double *)v355 - *(double *)(v6 + 224)) * 6378137.0;
      *((double *)v3 + 206) = *(double *)(v6 + 328) * ((v127 - *(double *)(v6 + 232)) * 6378137.0);
      *((int32x2_t *)v3 + 208) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vsqrtq_f64(v367[0])));
      *((unsigned char *)v3 + 1672) = (int)(v367[1].f64[0] * 57.2957795);
      if (*((unsigned char *)v3 + 1634))
      {
        *((void *)v3 + 207) = *(void *)&v355[4];
        *((_WORD *)v3 + 837) = (int)sqrt(*(double *)v350);
      }
    }
    *((unsigned char *)v3 + 1676) = *(unsigned char *)(v6 + 684);
    *((unsigned char *)v3 + 1677) = *(unsigned char *)(v6 + 692);
    *((unsigned char *)v3 + 1678) = *(_DWORD *)(v6 + 688) != 0;
    *((unsigned char *)v3 + 1679) = 0;
    if (*(unsigned char *)(p_NA + 381))
    {
      int v128 = *(_DWORD *)(p_NA + 26780);
      *((unsigned char *)v3 + 1676) = 1;
      *((unsigned char *)v3 + 1679) = v128;
    }
    *((unsigned char *)v3 + 1680) = *(unsigned char *)(v6 + 748);
    *((unsigned char *)v3 + 1681) = *(unsigned char *)(v6 + 756);
    *((unsigned char *)v3 + 1682) = *(_DWORD *)(v6 + 752) != 0;
    v3[421] = *(_DWORD *)(v6 + 760);
    *((void *)v3 + 212) = *(void *)(v315 + 328);
    memset(v355, 0, 24);
    if (Core_Get_ExtA_AT_Vel(120000, (uint64_t)v355))
    {
      *((unsigned char *)v3 + 1704) = *(unsigned char *)(v6 + 700);
      *((unsigned char *)v3 + 1705) = *(unsigned char *)(v6 + 708);
      *((unsigned char *)v3 + 1706) = *(_DWORD *)(v6 + 704) != 0;
      *((_OWORD *)v3 + 107) = *(_OWORD *)&v355[2];
    }
    memset(v367, 0, 24);
    if (Core_Get_ExtA_Heading(120000, (uint64_t)v367))
    {
      *((unsigned char *)v3 + 1728) = *(unsigned char *)(v6 + 732);
      *((unsigned char *)v3 + 1729) = *(unsigned char *)(v6 + 740);
      *((unsigned char *)v3 + 1730) = *(_DWORD *)(v6 + 736) != 0;
      *(float64x2_t *)(v3 + 434) = *(float64x2_t *)((char *)v367 + 8);
    }
    long long v351 = 0uLL;
    *(void *)unint64_t v350 = 0;
    if (Core_Get_ExtA_V_Vel(120000, (uint64_t)v350))
    {
      *((unsigned char *)v3 + 1752) = *(unsigned char *)(v6 + 716);
      *((unsigned char *)v3 + 1753) = *(unsigned char *)(v6 + 724);
      *((unsigned char *)v3 + 1754) = *(_DWORD *)(v6 + 720) != 0;
      *((_OWORD *)v3 + 110) = v351;
    }
    uint64_t v129 = 0;
    int v130 = *(_DWORD *)(v6 + 36);
    v3[444] = v130;
    v3[445] = *(_DWORD *)(v6 + 32);
    *((void *)v3 + 223) = *(void *)(v6 + 40);
    *((unsigned char *)v3 + 1792) = 0;
    char v131 = 1;
    do
    {
      char v132 = v131;
      if (*(unsigned char *)(v69 + v129 + 3))
      {
        uint64_t v133 = v69 + 8 * v129;
        if (*(double *)(v133 + 456) > 0.0)
        {
          *((unsigned char *)v3 + 1792) = 1;
          *((_WORD *)v3 + 897) = *(_WORD *)(v69 + 2 * v129 + 448);
          *((void *)v3 + 225) = *(void *)(v133 + 432);
          *((void *)v3 + 226) = *(void *)(v133 + 456);
          v3[454] = v130 - *(_DWORD *)(v69 + 4 * v129 + 488);
        }
      }
      char v131 = 0;
      uint64_t v129 = 1;
    }
    while ((v132 & 1) != 0);
    *((unsigned char *)v3 + 1820) = *(unsigned char *)(v69 + 6);
    double v134 = *(double *)(v69 + 504) * 1000000000.0;
    if (v134 <= 0.0) {
      double v135 = -0.5;
    }
    else {
      double v135 = 0.5;
    }
    double v136 = v134 + v135;
    int v137 = (int)v136;
    if (v136 < -2147483650.0) {
      int v137 = 0x80000000;
    }
    if (v136 > 2147483650.0) {
      int v137 = 0x7FFFFFFF;
    }
    v3[456] = v137;
    v3[457] = (sqrt(*(double *)(v69 + 512)) * 1000000000.0);
    *((unsigned char *)v3 + 1832) = *(unsigned char *)(v326 + 24);
    *((unsigned char *)v3 + 1833) = *(_DWORD *)(v6 + 56);
    *((void *)v3 + 230) = *(void *)(v6 + 48);
    *((_WORD *)v3 + 924) = *(_WORD *)(v6 + 62);
    *((unsigned char *)v3 + 1850) = *(_DWORD *)(v6 + 204);
    *((void *)v3 + 232) = *(void *)(v6 + 216);
    HIDWORD(v138) = *(_DWORD *)(v6 + 210);
    LODWORD(v138) = HIDWORD(v138);
    v3[466] = v138 >> 16;
    *((unsigned char *)v3 + 1868) = 0;
    if (*(unsigned char *)(v6 + 60) && (*(_DWORD *)(v333 + 8972) - 4) <= 2)
    {
      int v139 = *(unsigned __int8 *)(*(void *)(v81[6] + 56) + 8984);
      int v140 = *(unsigned __int8 *)(*(void *)(v81[6] + 56) + 8985);
      int v141 = *(unsigned __int8 *)(*(void *)(v81[6] + 56) + 8987);
      char v142 = *(unsigned char *)(*(void *)(v81[6] + 56) + 8988);
      *((unsigned char *)v3 + 1868) = 1;
      int v143 = v140 | 0x400;
      int v144 = *(__int16 *)(v270 + 32) - 127;
      do
      {
        __int16 v145 = v143;
        v143 += 256;
      }
      while (v144 > v145);
      *((_WORD *)v3 + 936) = v145;
      *((unsigned char *)v3 + 1870) = (795365 * (unint64_t)(v139 << 12)) >> 36;
      *((unsigned char *)v3 + 1869) = *v273;
      int v146 = v141 | 0x400;
      do
      {
        __int16 v147 = v146;
        v146 += 256;
      }
      while (v144 > v147);
      *((_WORD *)v3 + 938) = v147;
      *((unsigned char *)v3 + 1875) = v142;
      *((unsigned char *)v3 + 1874) = v273[3];
    }
    v3[470] = 0;
    if (*(unsigned char *)(v319 + 60)) {
      v3[470] = (int)((double)*(int *)v319 * 9.31322575e-10 * 1.0e12);
    }
    v3[471] = 0;
    *(void *)int v355 = 0;
    if (!R8_EQ(v280, (const double *)v355))
    {
      v367[0].f64[0] = 0.0;
      if (!R8_EQ(v276, v367[0].f64))
      {
        double v148 = *v276 - *v280;
        double v149 = 0.000999999999;
        if (v148 <= 0.000999999999)
        {
          double v149 = *v276 - *v280;
          if (v148 < -0.000999999999) {
            double v149 = -0.000999999999;
          }
        }
        v3[471] = (int)(v149 * 1.0e12);
      }
    }
    v3[472] = 0;
    if ((*(_DWORD *)v343 - 2) <= 4) {
      v3[472] = (int)(*(double *)(v343 + 12) * -1000000000.0 * 1000.0);
    }
    v3[473] = 0;
    *(void *)int v355 = 0;
    if (R8_EQ(v280, (const double *)v355))
    {
      uint64_t v150 = v348;
    }
    else
    {
      v367[0].f64[0] = 0.0;
      BOOL v151 = R8_EQ(v275, v367[0].f64);
      uint64_t v150 = v348;
      if (!v151)
      {
        double v152 = *v275 - *v280;
        double v153 = 0.000999999999;
        if (v152 <= 0.000999999999)
        {
          double v153 = *v275 - *v280;
          if (v152 < -0.000999999999) {
            double v153 = -0.000999999999;
          }
        }
        v3[473] = (int)(v153 * 1.0e12);
      }
    }
    v3[474] = 0;
    if ((*(_DWORD *)(v319 + 8232) - 2) <= 4)
    {
      double v154 = *(double *)(v333 + 25368);
      if (v342[17] && v342[16])
      {
        if ((unsigned __int16)*v269 - *v272 >= 0) {
          int v155 = -(((unsigned __int16)*v269 - *v272) & 0x3F);
        }
        else {
          int v155 = (*v272 - *v269) & 0x3F;
        }
        if (v155 > 31) {
          v155 -= 64;
        }
        double v154 = v154 + *(double *)(v333 + 25376) * (double)((int)*v271 - *(_DWORD *)(v319 + 8252) + 604800 * v155);
      }
      v3[474] = (int)(v154 * -1.0e12);
    }
    v3[475] = 0;
    if ((*(_DWORD *)(v343 + 3080) - 2) <= 4)
    {
      double v156 = *(double *)v274;
      if (v342[17] && v342[16])
      {
        if (*(__int16 *)(v274 + 28) - *v272 >= 0) {
          int v157 = -((*(__int16 *)(v274 + 28) - *v272) & 0x3FF);
        }
        else {
          int v157 = (*v272 - *(_WORD *)(v274 + 28)) & 0x3FF;
        }
        if (v157 > 511) {
          v157 -= 1024;
        }
        if (v157 < -512) {
          v157 += 1024;
        }
        double v158 = *v271 - (double)*(int *)(v274 + 24) + (double)(604800 * v157);
        double v156 = v156 + *(double *)(v274 + 8) * v158 + *(double *)(v274 + 16) * (v158 * v158);
      }
      v3[475] = (int)(v156 * -1.0e12);
    }
    *((_WORD *)v3 + 952) = *(_WORD *)(v150 + 2028);
    *(_OWORD *)(v3 + 478) = *(_OWORD *)(v150 + 88);
    *(_OWORD *)(v3 + 482) = *(_OWORD *)(v150 + 104);
    *(_OWORD *)(v3 + 486) = *(_OWORD *)(v150 + 120);
    *(_OWORD *)(v3 + 490) = *(_OWORD *)(v150 + 136);
    *(_OWORD *)(v3 + 494) = *(_OWORD *)(v150 + 152);
    *(_OWORD *)(v3 + 498) = *(_OWORD *)(v150 + 168);
    *(_OWORD *)(v3 + 502) = *(_OWORD *)(v150 + 184);
    *(_OWORD *)(v3 + 506) = *(_OWORD *)(v150 + 232);
    *((_WORD *)v3 + 1020) = *(_WORD *)(v150 + 248);
    *((_OWORD *)v3 + 128) = *(_OWORD *)(v150 + 200);
    *((_OWORD *)v3 + 129) = *(_OWORD *)(v150 + 216);
    uint64_t v159 = *(void *)(v81[6] + 208);
    *((_WORD *)v3 + 1040) = *(_WORD *)(v159 + 8);
    *((unsigned char *)v3 + 2082) = *(unsigned char *)(v159 + 10);
    *((unsigned char *)v3 + 2083) = *(unsigned char *)(v159 + 11);
    *((unsigned char *)v3 + 2084) = *(unsigned char *)(v159 + 12);
    *((unsigned char *)v3 + 2085) = *(unsigned char *)(v159 + 13);
    *((_WORD *)v3 + 1043) = *(_WORD *)(v159 + 14);
    *((unsigned char *)v3 + 2088) = *(_DWORD *)(v159 + 16);
    *(_DWORD *)((char *)v3 + 2089) = *(_DWORD *)(v159 + 20);
    *(_DWORD *)((char *)v3 + 2094) = 807731202;
    strcpy((char *)v3 + 2098, "241012");
    *(int32x2_t *)(v3 + 527) = vrev64_s32(vsub_s32(*(int32x2_t *)(v6 + 32), *(int32x2_t *)(v348 + 1764)));
    *((unsigned char *)v3 + 2116) = *(unsigned char *)(v150 + 74);
    *((unsigned char *)v3 + 2117) = *(unsigned char *)(v150 + 52);
    char v160 = *(unsigned char *)(v150 + 22);
    *((unsigned char *)v3 + 2118) = v160;
    if (*(unsigned char *)(v150 + 25))
    {
      v160 |= 2u;
      *((unsigned char *)v3 + 2118) = v160;
    }
    if (*(unsigned char *)(v150 + 24))
    {
      v160 += 4;
      *((unsigned char *)v3 + 2118) = v160;
    }
    if (*(unsigned char *)(v150 + 23))
    {
      v160 += 8;
      *((unsigned char *)v3 + 2118) = v160;
    }
    if (*(unsigned char *)(v150 + 27))
    {
      v160 += 16;
      *((unsigned char *)v3 + 2118) = v160;
    }
    if (*(unsigned char *)(v150 + 26)) {
      *((unsigned char *)v3 + 2118) = v160 + 32;
    }
    char v161 = *(unsigned char *)(v150 + 36);
    *((unsigned char *)v3 + 2119) = v161;
    if (*(unsigned char *)(v150 + 39))
    {
      v161 |= 2u;
      *((unsigned char *)v3 + 2119) = v161;
    }
    if (*(unsigned char *)(v150 + 38))
    {
      v161 += 4;
      *((unsigned char *)v3 + 2119) = v161;
    }
    if (*(unsigned char *)(v150 + 37))
    {
      v161 += 8;
      *((unsigned char *)v3 + 2119) = v161;
    }
    if (*(unsigned char *)(v150 + 41))
    {
      v161 += 16;
      *((unsigned char *)v3 + 2119) = v161;
    }
    if (*(unsigned char *)(v150 + 40)) {
      *((unsigned char *)v3 + 2119) = v161 + 32;
    }
    *((unsigned char *)v3 + 2120) = *(_DWORD *)(v150 + 60);
    long long v162 = *(_OWORD *)(v348 + 1776);
    long long v163 = *(_OWORD *)(v348 + 1792);
    *(_OWORD *)(v3 + 538) = *(_OWORD *)(v348 + 1804);
    *(_OWORD *)(v3 + 531) = v162;
    *(_OWORD *)(v3 + 535) = v163;
    memset(v380, 0, sizeof(v380));
    int v381 = 0;
    int v379 = 0;
    memset(v378, 0, sizeof(v378));
    bzero(v377, 0xDA0uLL);
    bzero(v376, 0xDA0uLL);
    uint64_t v164 = 0;
    int v375 = 0;
    memset(v374, 0, sizeof(v374));
    memset(v371, 0, 14);
    memset(v369, 0, sizeof(v369));
    memset(v370, 0, sizeof(v370));
    memset(v368, 0, 14);
    *(void *)&long long v165 = 0x8181818181818181;
    *((void *)&v165 + 1) = 0x8181818181818181;
    *(_OWORD *)((char *)v373 + 10) = v165;
    v372[11] = v165;
    v373[0] = v165;
    v372[9] = v165;
    v372[10] = v165;
    v372[7] = v165;
    v372[8] = v165;
    v372[5] = v165;
    v372[6] = v165;
    v372[3] = v165;
    v372[4] = v165;
    v372[1] = v165;
    v372[2] = v165;
    int v166 = (char *)v380 + 1;
    v372[0] = v165;
    do
    {
      Constell_Pruint64_t n = Get_Constell_Prn(v164);
      *(_WORD *)(v166 - 1) = 3855;
      if (*(unsigned char *)(v348 + 50)) {
        BOOL v168 = 0;
      }
      else {
        BOOL v168 = *(unsigned char *)(v346 + v164) == 0;
      }
      if (*(unsigned char *)(v348 + 51)) {
        BOOL v169 = *(unsigned char *)(v346 + v164 + 280) == 0;
      }
      else {
        BOOL v169 = 0;
      }
      switch(Constell_Prn)
      {
        case 0:
          EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x1128u);
          break;
        case 1:
          if (*(unsigned char *)(v348 + 22)) {
            goto LABEL_367;
          }
          break;
        case 2:
          char v170 = !v168;
          if (!*(unsigned char *)(v348 + 23)) {
            char v170 = 1;
          }
          if ((v170 & 1) == 0) {
            *(v166 - 1) = 4;
          }
          break;
        case 3:
          if (*(unsigned char *)(v348 + 27))
          {
            if (v168) {
              *(v166 - 1) = 8;
            }
            if (v169)
            {
              char v171 = 9;
              goto LABEL_375;
            }
          }
          break;
        case 4:
          if (*(unsigned char *)(v348 + 26) && Num_Prn_Idx_To_GNSS_Id(v164) - 6 <= 0x34)
          {
            if (v168) {
              *(v166 - 1) = 11;
            }
            if (v169)
            {
              char v171 = 13;
              goto LABEL_375;
            }
          }
          break;
        case 5:
          if (*(unsigned char *)(v348 + 24))
          {
LABEL_367:
            if (v168) {
              *(v166 - 1) = 0;
            }
            if (v169) {
              goto LABEL_374;
            }
          }
          break;
        case 6:
          char v172 = !v169;
          if (!*(unsigned char *)(v348 + 28)) {
            char v172 = 1;
          }
          if ((v172 & 1) == 0)
          {
LABEL_374:
            char v171 = 3;
LABEL_375:
            char *v166 = v171;
          }
          break;
        case 7:
          char v173 = !v168;
          if (!*(unsigned char *)(v348 + 25)) {
            char v173 = 1;
          }
          if ((v173 & 1) == 0) {
            *(v166 - 1) = 0;
          }
          break;
        default:
          break;
      }
      ++v164;
      v166 += 2;
    }
    while (v164 != 218);
    uint64_t v174 = 0;
    memset(v371, 4, 14);
    do
    {
      unsigned int v175 = *(_DWORD *)(v6 + 4 * v174 + 1000);
      unsigned int v176 = HIWORD(v175);
      if ((v175 & 0xFF00FF) == 2)
      {
        uint64_t v177 = 0;
        while (*(_DWORD *)(v15 + 4 * v177) != *(char *)(v344 + 4 * v174 + 96))
        {
          if (++v177 == 24) {
            goto LABEL_388;
          }
        }
        LOBYTE(v176) = v177 + 1;
      }
LABEL_388:
      unsigned int v178 = v175 & 0xFF00FFFF | (v176 << 16);
      if (Is_Legal(v178))
      {
        unsigned int v181 = GNSS_Id_To_Num_Prn_Idx(v178);
        if ((v181 & 0x80000000) == 0 && *(int *)(v6 + 4 * v174 + 1640) >= 10)
        {
          uint64_t v183 = 0;
          uint64_t v184 = v328 + 4 * v174;
          unsigned int v185 = *(unsigned __int8 *)(v184 + 97);
          if (v185 <= 0xF)
          {
            if (((1 << v185) & 0x6688) != 0)
            {
              uint64_t v183 = 1;
            }
            else if (((1 << v185) & 0x8044) != 0)
            {
              goto LABEL_402;
            }
          }
          *(unsigned char *)((unint64_t)&v380[v181] | v183) = v185;
          LOBYTE(v182) = *(unsigned char *)(v328 + v174 + 1760);
          LOBYTE(v180) = *(unsigned char *)(v328 + v174 + 1888);
          *(double *)&unint64_t v186 = (double)*(unint64_t *)&v180;
          double v187 = (double)v182 + *(double *)&v186 * 0.0625;
          *((double *)&v377[v181] + v183) = v187;
          LOBYTE(v187) = *(unsigned char *)(v328 + v174 + 2016);
          LOBYTE(v186) = *(unsigned char *)(v328 + v174 + 2144);
          double v180 = (double)v186;
          *((double *)&v376[v181] + v183) = (double)*(unint64_t *)&v187 + v180 * 0.0625;
          *(unsigned char *)((unint64_t)&v374[v181] | v183) = *(unsigned char *)(v328 + v174 + 864);
          if (*(unsigned char *)(v6 + v174 + 2536)) {
            *(unsigned char *)((unint64_t)&v378[v181] | v183) = 1;
          }
          if (v175 == 2) {
            *((unsigned char *)v372 + v181) = *(unsigned char *)(v184 + 99);
          }
        }
      }
      else if (*(int *)(v6 + 4 * v174 + 1640) >= 10)
      {
        uint64_t v188 = v328 + 4 * v174;
        if ((*(unsigned char *)(v188 + 99) + 7) <= 0xDu)
        {
          uint64_t v189 = (*(unsigned char *)(v188 + 99) + 7);
          v371[v189] = *(unsigned char *)(v188 + 97);
          LOBYTE(v179) = *(unsigned char *)(v328 + v174 + 1760);
          LOBYTE(v180) = *(unsigned char *)(v328 + v174 + 1888);
          *(double *)&unint64_t v190 = (double)*(unint64_t *)&v180;
          *(double *)&unint64_t v191 = (double)v179 + *(double *)&v190 * 0.0625;
          v370[v189] = *(double *)&v191;
          LOBYTE(v191) = *(unsigned char *)(v328 + v174 + 2016);
          LOBYTE(v190) = *(unsigned char *)(v328 + v174 + 2144);
          double v180 = (double)v190;
          v369[v189] = (double)v191 + v180 * 0.0625;
          v368[v189] = *(unsigned char *)(v328 + v174 + 864);
        }
      }
LABEL_402:
      ++v174;
    }
    while (v174 != 128);
    int v16 = *(_DWORD *)(v6 + 32);
    if (v16 != v341)
    {
      unsigned int v13 = v340 + 1;
      int v14 = v277;
      if (v340 == 5)
      {
LABEL_551:
        bzero(v342, 0x18D0uLL);
        bzero(v3, 0x878uLL);
        return 0;
      }
      continue;
    }
    break;
  }
  if (v340 > 3) {
    goto LABEL_551;
  }
  LOWORD(v180) = *(_WORD *)(v348 + 2028);
  Inc_GPS_TOW(-(*((double *)v342 + 7) - (double)*(unint64_t *)&v180 * 0.000000001), v271, v272);
  API_Get_UTC_Cor(0, (double *)v342 + 9);
  int v192 = v342 + 28;
  GPS_To_UTC_Time((_WORD *)v342 + 9, (unsigned __int16 *)v342 + 10, (unsigned __int16 *)v342 + 11, (unsigned __int16 *)v342 + 12, (unsigned __int16 *)v342 + 13, (unsigned __int16 *)v342 + 14, (unsigned __int16 *)v342 + 15, *((_WORD *)v342 + 16), *((double *)v342 + 5), *((double *)v342 + 9));
  if (v342[17])
  {
    if (*((_WORD *)v342 + 12) == 23 && *((_WORD *)v342 + 13) == 59)
    {
      unsigned int v193 = (unsigned __int16)*v192;
      if (v193 >= 0x3A)
      {
        v355[0] = 0;
        v350[0] = 0;
        LODWORD(v367[0].f64[0]) = 0;
        API_Get_Next_Leap_Second((unsigned int *)v355, v350, (int *)v367);
        if (!LODWORD(v367[0].f64[0]) && v350[0] == 1) {
          *int v192 = v193 + 1;
        }
      }
    }
  }
  char v349 = 0;
  unsigned int v194 = 0;
  int v195 = *(_OWORD **)(p_api + 32);
  long long v364 = v195[10];
  long long v365 = v195[11];
  v366[0] = v195[12];
  *(_OWORD *)((char *)v366 + 10) = *(_OWORD *)((char *)v195 + 202);
  long long v360 = v195[6];
  long long v361 = v195[7];
  long long v362 = v195[8];
  long long v363 = v195[9];
  long long v356 = v195[2];
  long long v357 = v195[3];
  long long v358 = v195[4];
  long long v359 = v195[5];
  uint64_t v279 = v69 + 19692;
  uint64_t v281 = v195;
  *(_OWORD *)int v355 = *v195;
  *(_OWORD *)&v355[4] = v195[1];
  while (2)
  {
    uint64_t v196 = 0;
    char v197 = -100;
    LODWORD(v198) = -1;
    do
    {
      if (*((char *)v355 + v196) <= v197)
      {
        uint64_t v198 = v198;
      }
      else
      {
        char v197 = *((unsigned char *)v355 + v196);
        uint64_t v198 = v196;
      }
      ++v196;
    }
    while (v196 != 218);
    if ((v198 & 0x80000000) == 0)
    {
      *((unsigned char *)v355 + v198) = -120;
      if (*((char *)v195 + v198) < 0
        && *(double *)&v377[v198] <= 0.0
        && *((double *)&v377[v198] + 1) <= 0.0
        || (LODWORD(v367[0].f64[0]) = 0, unsigned __int8 v199 = LongPrnIdx_To_Prn(v198, (int *)v367), LODWORD(v367[0].f64[0]) == 7))
      {
LABEL_549:
        if (v194 >= 0x80) {
          goto LABEL_561;
        }
        continue;
      }
      uint64_t v200 = v69;
      uint64_t v201 = 0;
      char v202 = (char *)v195 + 40 * v198;
      uint64_t v335 = v202 + 9376;
      int v331 = v202 + 9408;
      uint64_t v347 = v202 + 688;
      uint64_t v203 = v199 - 1;
      BOOL v288 = (int *)(v333 + 76 * (int)v203 + 47700);
      uint64_t v204 = v333 + 116 * v199;
      int v286 = (int *)(v204 - 13232);
      __int16 v285 = (int *)(v333 + 152 * (int)v203 + 25516);
      int v284 = (int *)(v333 + 88 * (int)v203 + 17712);
      double v282 = (int *)(v204 + 8);
      uint64_t v283 = (int *)(v333 + (v203 << 6) + 11932);
      uint64_t v325 = v200 + 76 * (int)v203 + 22484;
      uint64_t v287 = v199 - 193;
      int v323 = (unsigned char *)(v200 + v287 + 76);
      uint64_t v205 = v200 + 80 * v199;
      BOOL v321 = (int *)(v205 - 11024);
      uint64_t v320 = v200 + 152 * (int)v203 + 10116;
      uint64_t v318 = v200 + 88 * (int)v203 + 5592;
      __int16 v314 = (int *)(v205 + 624);
      uint64_t v316 = v200 + (v203 << 6) + 24276;
      uint64_t v293 = v333 + 52 * (int)v203 + 49828;
      uint64_t v292 = v333 + 44 * v199 + 2984;
      uint64_t v206 = 44 * v199 - 44;
      unsigned __int8 v345 = v199;
      v4[v194 + 1744] = v199;
      uint64_t v291 = v333 + v206 + 44668;
      uint64_t v207 = 36 * v199 - 36;
      uint64_t v290 = v333 + v207 + 24048;
      uint64_t v289 = v333 + v207 + 16252;
      uint64_t v332 = v333 + v206 + 7548;
      uint64_t v327 = v203;
      uint64_t v312 = v200 + 52 * (int)v203 + 23548;
      uint64_t v309 = v200 + 36 * v199 - 1732;
      unsigned __int8 v310 = (unsigned char *)(v200 + v287 + 86);
      uint64_t v308 = (int *)(v279 + v206);
      unsigned int v208 = (int *)(v200 + v207);
      __int16 v306 = (unsigned char *)(v200 + v203 + 221);
      unsigned int v307 = (unsigned char *)(v200 + v203 + 348);
      unint64_t v304 = (unsigned char *)(v200 + v203 + 96);
      uint64_t v305 = (unsigned char *)(v200 + v203 + 147);
      float32x4_t v302 = (unsigned char *)(v200 + v203 + 362);
      uint64_t v303 = (unsigned char *)(v200 + v203 + 12);
      unsigned __int8 v299 = (unsigned char *)(v200 + v203 + 183);
      int v300 = (unsigned char *)(v200 + v203 + 284);
      v297 = (unsigned char *)(v200 + v203 + 44);
      uint64_t v298 = (unsigned char *)(v200 + v203 + 120);
      float32x4_t v296 = v208 + 2190;
      double v294 = v208 + 816;
      uint64_t v295 = v208 + 6453;
      uint64_t v338 = (unsigned __int8 *)(v333 + v198 + 50616);
      unint64_t v336 = (unint64_t)&v378[v198];
      char v209 = 1;
      while (2)
      {
        char v210 = v209;
        uint64_t v211 = *((char *)&v380[v198] + v201);
        if (v211 == 15)
        {
LABEL_527:
          char v209 = 0;
          uint64_t v201 = 1;
          if ((v210 & 1) == 0) {
            goto LABEL_548;
          }
          continue;
        }
        break;
      }
      switch(LODWORD(v367[0].f64[0]))
      {
        case 1:
          if (v211 >= 4) {
            int v212 = 0;
          }
          else {
            int v212 = dword_263D81C40[v211];
          }
          int v213 = 1;
          break;
        case 2:
          unsigned int v214 = (v211 - 4);
          BOOL v215 = v214 >= 4;
          int v212 = v214 + 33;
          int v213 = 2;
          goto LABEL_433;
        case 3:
          unsigned int v216 = (v211 - 8);
          BOOL v215 = v216 >= 3;
          int v212 = v216 + 81;
          int v213 = 5;
LABEL_433:
          if (v215) {
            int v212 = 0;
          }
          break;
        case 4:
          unsigned __int8 v217 = v211 - 11;
          if (v217 >= 4u) {
            int v212 = 0;
          }
          else {
            int v212 = dword_263D81C50[(char)v217];
          }
          int v213 = 4;
          break;
        case 5:
          if (v211 >= 4) {
            int v212 = 0;
          }
          else {
            int v212 = dword_263D81C60[v211];
          }
          int v213 = 3;
          break;
        case 6:
          if (v211 == 3) {
            int v212 = 98;
          }
          else {
            int v212 = 0;
          }
          int v213 = 6;
          break;
        default:
          int v213 = 0;
          int v212 = 0;
          break;
      }
      uint64_t v218 = 0;
      uint64_t v219 = &v4[v194];
      v219[1744] = v345;
      __int16 v220 = &v4[4 * v194];
      *((_DWORD *)v220 + 84) = v213;
      char v221 = *((unsigned char *)v372 + v198);
      *((_DWORD *)v220 + 212) = v212;
      v219[1872] = v221;
      char v222 = &v4[8 * v194];
      *((void *)v222 + 250) = *((void *)&v377[v198] + v201);
      *((void *)v222 + 378) = *((void *)&v376[v198] + v201);
      v219[6224] = *((unsigned char *)&v374[v198] + v201);
      uint64_t v223 = 1952;
      while (1)
      {
        int v224 = *(_DWORD *)(v328 + 96 + v218);
        if (Is_Legal(v224))
        {
          if (GNSS_Id_To_Num_Prn_Idx(v224) == v198) {
            break;
          }
        }
        v223 += 40;
        v218 += 4;
        if (v218 == 512) {
          goto LABEL_462;
        }
      }
      uint64_t v225 = *(void *)(p_api + 128);
      int v226 = *(_DWORD *)(v225 + v218 + 12160);
      if (v226) {
        int v227 = *(_DWORD *)(v330 + 32) - v226;
      }
      else {
        int v227 = 0x7FFFFFFF;
      }
      if (v227 < 0) {
        int v227 = -v227;
      }
      if (v227 >> 5 <= 0x752)
      {
        uint64_t v228 = (void *)(v225 + v223);
        uint64_t v4 = v342;
        *(void *)&v342[8 * v194 + 4048] = v228[640];
        goto LABEL_464;
      }
LABEL_462:
      uint64_t v228 = v347;
      uint64_t v4 = v342;
      if ((*v335 & 0x80000000) == 0)
      {
        *(void *)&v342[8 * v194 + 4048] = *v331;
        uint64_t v228 = v347;
      }
LABEL_464:
      *(void *)&v4[8 * v194 + 5072] = *v228;
      v4[v194 + 6096] = *((unsigned char *)&v378[v198] + v201);
      if (*(unsigned char *)(v333 + v198 + 59772))
      {
        BOOL v229 = 1;
        char v230 = (unsigned char *)(v333 + v198 + 59990);
      }
      else
      {
        char v230 = (unsigned char *)(v333 + v198 + 59990);
        BOOL v229 = *v230 != 0;
      }
      char v231 = &v4[3 * v194];
      char v232 = (unsigned __int16 *)(v231 + 1360);
      int v233 = *((_WORD *)v231 + 680) & 0xFFFE | (v231[1362] << 16) | v229;
      *((_WORD *)v231 + 680) = *((_WORD *)v231 + 680) & 0xFFFE | v229;
      unsigned int v234 = v233 & 0xFFFFFFFD | (2 * (*v230 & 0x7F));
      *((_WORD *)v231 + 680) = v234;
      int v235 = LODWORD(v367[0].f64[0]);
      if (v229)
      {
        switch(LODWORD(v367[0].f64[0]))
        {
          case 0:
            EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x12ADu);
            int v235 = LODWORD(v367[0].f64[0]);
            break;
          case 1:
            int v252 = *v282;
            uint64_t v253 = *(void *)(v333 + 96);
            goto LABEL_535;
          case 2:
            int v252 = *v283;
            uint64_t v253 = *(void *)(v333 + 17208);
            goto LABEL_535;
          case 3:
            int v252 = *v284;
            uint64_t v253 = *(void *)(v333 + 17648);
            goto LABEL_535;
          case 4:
            int v252 = *v285;
            uint64_t v253 = *(void *)(v333 + 25488);
            goto LABEL_535;
          case 5:
            uint64_t v254 = v287;
            int v252 = *v286;
            uint64_t v253 = *(void *)(v333 + 9128);
            goto LABEL_536;
          case 6:
            int v252 = *v288;
            uint64_t v253 = *(void *)(v343 + 172);
LABEL_535:
            uint64_t v254 = v327;
LABEL_536:
            unsigned int v255 = *(unsigned __int8 *)(v253 + v254);
            if (v255)
            {
              unsigned int v255 = HIWORD(v234);
              v234 |= 0x20u;
              *((unsigned char *)v232 + 2) = v255;
              *char v232 = v234;
              LOBYTE(v255) = 1;
            }
            switch(v252)
            {
              case 3:
                unsigned int v256 = HIWORD(v234);
                *((unsigned char *)v232 + 2) = BYTE2(v234);
                *char v232 = v234 | 0x10;
                if ((v255 & 1) == 0)
                {
                  __int16 v257 = 272;
                  goto LABEL_545;
                }
                break;
              case 4:
                unsigned int v256 = HIWORD(v234);
                *((unsigned char *)v232 + 2) = BYTE2(v234);
                *char v232 = v234 | 4;
                if ((v255 & 1) == 0)
                {
                  __int16 v257 = 68;
                  goto LABEL_545;
                }
                break;
              case 5:
                unsigned int v256 = HIWORD(v234);
                *((unsigned char *)v232 + 2) = BYTE2(v234);
                *char v232 = v234 | 8;
                if ((v255 & 1) == 0)
                {
                  __int16 v257 = 136;
LABEL_545:
                  *((unsigned char *)v232 + 2) = v256;
                  *char v232 = v234 | v257;
                }
                break;
              case 6:
                *((unsigned char *)v232 + 2) = BYTE2(v234);
                *char v232 = v234 | 2;
                break;
              default:
                goto LABEL_470;
            }
            break;
          default:
            break;
        }
      }
LABEL_470:
      switch(v235)
      {
        case 0:
          EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x12DAu);
          int v235 = LODWORD(v367[0].f64[0]);
          goto LABEL_488;
        case 1:
          unint64_t v236 = v314;
          if (*v303) {
            goto LABEL_483;
          }
          int v235 = 1;
          goto LABEL_488;
        case 2:
          unint64_t v236 = (int *)v316;
          if (*v304) {
            goto LABEL_483;
          }
          int v235 = 2;
          goto LABEL_488;
        case 3:
          unint64_t v236 = (int *)v318;
          if (*v305) {
            goto LABEL_483;
          }
          int v235 = 3;
          goto LABEL_488;
        case 4:
          unint64_t v236 = (int *)v320;
          if (*v306) {
            goto LABEL_483;
          }
          int v235 = 4;
          goto LABEL_488;
        case 5:
          unint64_t v236 = v321;
          if (*v323) {
            goto LABEL_483;
          }
          int v235 = 5;
          goto LABEL_488;
        case 6:
          unint64_t v236 = (int *)v325;
          if (*v307)
          {
LABEL_483:
            int v237 = *v236;
            if (v237 == 5)
            {
              unsigned __int16 v238 = *v232 | 8;
            }
            else
            {
              if (v237 != 3) {
                goto LABEL_488;
              }
              unsigned __int16 v238 = *v232 | 0x10;
            }
            *char v232 = v238;
          }
          else
          {
            int v235 = 6;
          }
LABEL_488:
          if (*(unsigned char *)(v333 + v198 + 60208))
          {
            int v239 = *((unsigned __int8 *)v232 + 2);
            int v240 = *v232;
            *char v232 = v240 | 0x200;
            uint64_t v241 = (int *)v332;
            switch(v235)
            {
              case 0:
                EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x130Bu);
                int v235 = LODWORD(v367[0].f64[0]);
                break;
              case 1:
                goto LABEL_496;
              case 2:
                uint64_t v241 = (int *)v289;
                goto LABEL_496;
              case 3:
                uint64_t v241 = (int *)v290;
                goto LABEL_496;
              case 4:
                uint64_t v241 = (int *)v291;
                goto LABEL_496;
              case 5:
                uint64_t v241 = (int *)v292;
                goto LABEL_496;
              case 6:
                uint64_t v241 = (int *)v293;
LABEL_496:
                int v242 = v240 | (v239 << 16);
                int v243 = *v241;
                if (*v241 == 5)
                {
                  __int16 v244 = 18944;
                }
                else if (v243 == 4)
                {
                  __int16 v244 = 9728;
                }
                else
                {
                  if (v243 != 3) {
                    break;
                  }
                  __int16 v244 = -28160;
                }
                *((unsigned char *)v232 + 2) = BYTE2(v242);
                *char v232 = v242 | v244;
                break;
              default:
                break;
            }
          }
          switch(v235)
          {
            case 0:
              EvCrt_Illegal_switch_case("API_Get_Nav_Data", 0x132Cu);
              goto LABEL_521;
            case 1:
              uint64_t v245 = v294;
              if (*v297) {
                goto LABEL_516;
              }
              goto LABEL_521;
            case 2:
              uint64_t v245 = v295;
              if (*v298) {
                goto LABEL_516;
              }
              goto LABEL_521;
            case 3:
              uint64_t v245 = v296;
              if (*v299) {
                goto LABEL_516;
              }
              goto LABEL_521;
            case 4:
              uint64_t v245 = v308;
              if (*v300) {
                goto LABEL_516;
              }
              goto LABEL_521;
            case 5:
              uint64_t v245 = (int *)v309;
              if (*v310) {
                goto LABEL_516;
              }
              goto LABEL_521;
            case 6:
              uint64_t v245 = (int *)v312;
              if (!*v302) {
                goto LABEL_521;
              }
LABEL_516:
              int v246 = *v245;
              if (v246 == 5)
              {
                unsigned __int16 v247 = *v232 | 0x800;
              }
              else
              {
                if (v246 != 3) {
                  goto LABEL_521;
                }
                unsigned __int16 v247 = *v232 | 0x1000;
              }
              *char v232 = v247;
LABEL_521:
              unsigned int v248 = (*v232 | (*((unsigned __int8 *)v232 + 2) << 16)) & 0xFFFEFFFF | (*v338 << 16);
              *((unsigned char *)v232 + 2) = BYTE2(v248);
              unsigned int v249 = v248 & 0xFFFDFFFF | (*v338 << 17);
              *((unsigned char *)v232 + 2) = BYTE2(v249);
              unsigned int v250 = v249 & 0xFFFBFFFF | (*v338 << 18);
              *((unsigned char *)v232 + 2) = BYTE2(v250);
              unsigned int v251 = v250 & 0xFFF7FFFF | (*v338 << 19);
              *((unsigned char *)v232 + 2) = BYTE2(v251);
              *((unsigned char *)v232 + 2) = (v251 & 0xFFEFFFFF | (*v338 << 20)) >> 16;
              ++v194;
              if (v210)
              {
                if (!*(unsigned char *)v336) {
                  goto LABEL_527;
                }
              }
              else if (!*(unsigned char *)(v336 | 1) || *(unsigned char *)v336)
              {
LABEL_548:
                uint64_t v69 = v329;
                int v195 = v281;
                goto LABEL_549;
              }
              ++v349;
              goto LABEL_527;
            default:
              goto LABEL_521;
          }
        default:
          goto LABEL_488;
      }
    }
    break;
  }
  unint64_t v259 = 0;
  do
  {
    double v260 = v370[v259];
    if (v260 > 0.0)
    {
      double v261 = &v4[v194];
      char v262 = v371[v259];
      v261[1872] = v259 - 7;
      char v263 = v262 - 4;
      int v264 = (v262 - 4) + 33;
      if ((v263 & 0xFC) != 0) {
        int v265 = 0;
      }
      else {
        int v265 = v264;
      }
      int v266 = &v4[4 * v194];
      *((_DWORD *)v266 + 212) = v265;
      unsigned __int8 v267 = (double *)&v4[8 * v194];
      v267[250] = v260;
      double v268 = v369[v259];
      *((_DWORD *)v266 + 84) = 2;
      v267[378] = v268;
      v261[6224] = v368[v259];
      v267[506] = 0.0;
      v267[634] = -99.0;
      v261[6096] = 0;
      ++v194;
    }
    if (v259 > 0xC) {
      break;
    }
    ++v259;
  }
  while (v194 < 0x80);
LABEL_561:
  v4[331] = v194;
  v4[332] = v349;
  *(_DWORD *)uint64_t v4 = v341;
  uint64_t result = 1;
  *uint64_t v3 = v341;
  return result;
}

uint64_t API_Get_Raw_Meas_Data(void *a1)
{
  uint64_t v328 = *MEMORY[0x263EF8340];
  char v263 = (double *)(a1 + 20010);
  int v286 = a1 + 10537;
  unsigned __int8 v267 = a1 + 7180;
  bzero(a1, 0x271A0uLL);
  uint64_t v277 = *(void *)(p_api + 32);
  uint64_t v2 = *(void *)(p_api + 16);
  uint64_t v3 = *(void *)(p_api + 72);
  uint64_t v292 = *(void *)(p_api + 80);
  uint64_t v4 = *(void *)(p_api + 56);
  uint64_t v256 = v4 + 50584;
  uint64_t v264 = v4 + 47500;
  unsigned int v255 = (_WORD *)(v4 + 25388);
  uint64_t v266 = v4 + 17128;
  uint64_t v307 = v4;
  int v265 = (unsigned __int8 *)(v4 + 8984);
  uint64_t v5 = *(void *)(p_api + 96);
  uint64_t v295 = *(void *)(p_api + 88);
  uint64_t v6 = *(void *)(p_api + 128);
  uint64_t v7 = *(void *)(p_api + 168);
  uint64_t v285 = *(void *)(p_api + 48);
  *a1 = 1000000 * *(unsigned int *)(v285 + 24);
  if (*(_WORD *)(v3 + 248))
  {
    a1[1] = *(void *)(v3 + 160);
    a1[2] = *(void *)(v3 + 232);
    a1[3] = *(void *)(v3 + 80);
    a1[4] = *(void *)(v3 + 120);
    a1[5] = *(void *)(v3 + 88);
    *((float64x2_t *)a1 + 3) = vmulq_f64(vsqrtq_f64(*(float64x2_t *)(v6 + 56)), (float64x2_t)vdupq_n_s64(0x400AAF6485FFABE7uLL));
    *((double *)a1 + 8) = *(double *)(v3 + 224) * *(double *)(v3 + 224);
    *((double *)a1 + 9) = *(double *)(v3 + 208) * *(double *)(v3 + 208);
  }
  unint64_t v280 = (double *)v6;
  uint64_t v289 = v3;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v308 = (int8x16_t *)a1;
  *((_DWORD *)a1 + 20) = 0;
  uint64_t v12 = (1000000 * *(_DWORD *)(v7 + 16));
  unsigned int v13 = (double *)(v7 + 17432);
  int v14 = (double *)(v7 + 19608);
  uint64_t v15 = v7 + 7320;
  uint64_t v16 = v7 + 36872;
  uint64_t v17 = v7 + 21968;
  uint64_t v18 = v7 + 12056;
  uint64_t v19 = v7 + 7064;
  uint64_t v20 = 7208;
  uint64_t v21 = 22224;
  uint64_t v22 = 26960;
  uint64_t v23 = 7960;
  uint64_t v24 = 208;
  uint64_t v25 = 7230;
  double v26 = 3.33564095;
  double v27 = 1000000000.0 / (double)v12 * 3.33564095;
  *(double *)&uint64_t v28 = 1.0e11;
  double v29 = 0.0000508978417;
  *(double *)&uint64_t v30 = 100000.0;
  long long v31 = xmmword_263D81BF0;
  *(double *)&unint64_t v32 = -0.00000000333564095;
  double v33 = 604800.0;
  double v34 = 6.048e14;
  *(double *)&uint64_t v35 = 86400.0;
  uint64_t v296 = v2;
  while (2)
  {
    int v36 = *(unsigned __int8 *)(v2 + v20);
    if (*(unsigned char *)(v2 + v20)) {
      BOOL v37 = v36 == 7;
    }
    else {
      BOOL v37 = 1;
    }
    if (v37) {
      goto LABEL_9;
    }
    uint64_t v304 = v2 + v25;
    int v38 = *(unsigned __int8 *)(v2 + v25 - 20);
    if (v36 != 2 && v38 == 0) {
      goto LABEL_9;
    }
    uint64_t v305 = (_DWORD *)(v2 + v20);
    int v40 = (unsigned char *)(v2 + v20);
    if (v36 != *(unsigned __int8 *)(v5 + v10 + 96)) {
      goto LABEL_9;
    }
    uint64_t v302 = v2 + v25;
    if (*(unsigned __int8 *)(v2 + v25 - 21) != *(unsigned __int8 *)(v5 + v10 + 97)) {
      goto LABEL_9;
    }
    uint64_t v299 = v5 + v10;
    if (*(unsigned __int8 *)(v302 - 19) != *(unsigned __int8 *)(v5 + v10 + 99)
      || *(unsigned char *)(v2 + v25 - 20) && v38 != *(unsigned __int8 *)(v299 + 98))
    {
      goto LABEL_9;
    }
    if (*(int *)(v5 + 4 * v11 + 1248) < 10) {
      goto LABEL_9;
    }
    unsigned int v41 = v308[5].u16[4];
    if (v41 > 0xFF) {
      goto LABEL_128;
    }
    uint64_t v278 = v15;
    uint64_t v279 = v12;
    uint64_t v281 = v5;
    uint64_t v283 = v19;
    v308[5].i16[4] = v41 + 1;
    unsigned int v297 = v41;
    uint64_t v42 = (uint64_t)&v308[14 * v41 + 5].i64[1];
    *(_WORD *)(v42 + 8) = -1;
    uint64_t v276 = v7;
    uint64_t v270 = v14;
    unsigned __int8 v272 = v13;
    uint64_t v293 = v16;
    uint64_t v290 = v17;
    uint64_t v287 = v18;
    float64x2_t v274 = (float64x2_t)v31;
    unsigned int v248 = (_WORD *)(v42 + 8);
    switch(*(unsigned char *)(v302 - 21))
    {
      case 0:
        int v49 = ((*v40 - 1) & 0xFB) == 0;
        break;
      case 1:
        int v49 = 1;
        break;
      case 2:
        int v49 = 2;
        break;
      case 3:
        int v49 = 3;
        break;
      case 4:
        int v49 = 4;
        break;
      case 5:
      case 6:
      case 7:
      case 0xA:
      case 0xE:
      case 0xF:
        double v257 = v26;
        double v252 = v29;
        uint64_t v43 = v30;
        uint64_t v44 = v28;
        double v45 = v34;
        double v46 = v33;
        unint64_t v47 = v32;
        uint64_t v48 = v35;
        EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1552u);
        int v40 = v305;
        uint64_t v35 = v48;
        unint64_t v32 = v47;
        double v33 = v46;
        double v34 = v45;
        uint64_t v28 = v44;
        uint64_t v30 = v43;
        double v29 = v252;
        double v26 = v257;
        goto LABEL_24;
      case 8:
        int v49 = 8;
        break;
      case 9:
        int v49 = 9;
        break;
      case 0xB:
        int v49 = 6;
        break;
      case 0xC:
        int v49 = 5;
        break;
      case 0xD:
        int v49 = 7;
        break;
      default:
LABEL_24:
        int v49 = 0;
        break;
    }
    double v261 = (double *)v35;
    double v268 = (double *)v32;
    v308[14 * v297 + 6].i32[1] = v49;
    switch(*v40)
    {
      case 0:
      case 7:
        EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x1561u);
        int v40 = v305;
        goto LABEL_35;
      case 1:
        uint64_t v54 = &v308[14 * v297];
        int v55 = 1;
        goto LABEL_34;
      case 2:
        v308[14 * v297 + 6].i32[2] = 2;
        goto LABEL_35;
      case 3:
        uint64_t v54 = &v308[14 * v297];
        int v55 = 5;
        goto LABEL_34;
      case 4:
        uint64_t v54 = &v308[14 * v297];
        int v55 = 4;
        goto LABEL_34;
      case 5:
        uint64_t v54 = &v308[14 * v297];
        int v55 = 3;
        goto LABEL_34;
      case 6:
        uint64_t v54 = &v308[14 * v297];
        int v55 = 6;
LABEL_34:
        v54[6].i32[2] = v55;
LABEL_35:
        int v258 = *v40;
        int v52 = GM_Gen_SV_Meas_QI((uint64_t)v40);
        if (v258 == 2)
        {
          __int16 v56 = *(char *)(v302 - 19);
          uint64_t v2 = v296;
          unsigned int v57 = v297;
          uint64_t v5 = v281;
          uint64_t v53 = v278;
          uint64_t v12 = v279;
        }
        else
        {
          uint64_t v2 = v296;
          uint64_t v5 = v281;
          uint64_t v53 = v278;
          uint64_t v12 = v279;
LABEL_38:
          unsigned int v57 = v297;
          __int16 v56 = *(unsigned __int8 *)(v304 - 20);
        }
        uint64_t v58 = &v308[14 * v57];
        v58[6].i16[6] = v56;
        double v59 = *(double *)(v285 + 40) * 1000000000.0;
        v58[8].i64[0] = (uint64_t)v59;
        uint64_t v60 = v58 + 8;
        v60[-1].i64[0] = (uint64_t)v59 - v12;
        v60[-1].i64[1] = (uint64_t)v59;
        uint64_t v61 = (_WORD *)(v2 + v9);
        int v62 = *(unsigned __int16 *)(v2 + v9 + 7216);
        if ((v62 & 0x200) != 0) {
          char v63 = 9;
        }
        else {
          char v63 = 1;
        }
        if ((~v62 & 0x300) != 0) {
          char v64 = v63;
        }
        else {
          char v64 = 15;
        }
        v60->i8[8] = v64;
        uint64_t v65 = v2 + v8;
        uint64_t v253 = (uint64_t *)v60;
        *(double *)v60[1].i64 = *(double *)(v2 + v8 + 88) * 1000000000.0;
        double v66 = *(double *)&v28;
        uint64_t v16 = v293;
        uint64_t v17 = v290;
        uint64_t v67 = v287;
        uint64_t v19 = v283;
        int v259 = v52;
        if (v52 >= 10)
        {
          double v66 = *(double *)&v28;
          if (v61[3609])
          {
            unsigned int v249 = (_WORD *)(v2 + v9);
            uint64_t v245 = v2 + v8;
            double PR_Raw_Meas_Unc = NK_Get_PR_Raw_Meas_Unc(*v305, *(unsigned char *)(v2 + v25 - 18), *(unsigned char *)(v296 + v8 + 82), (unsigned __int16)v61[3609] / 0xAu, *(unsigned __int16 *)(v296 + v8 + 72));
            uint64_t v65 = v245;
            uint64_t v61 = v249;
            int v52 = v259;
            uint64_t v2 = v296;
            unsigned int v57 = v297;
            uint64_t v5 = v281;
            uint64_t v19 = v283;
            uint64_t v67 = v287;
            uint64_t v17 = v290;
            uint64_t v16 = v293;
            uint64_t v53 = v278;
            uint64_t v12 = v279;
            double v66 = PR_Raw_Meas_Unc * v26;
          }
        }
        i64 = (double *)v308[14 * v57].i64;
        i64[19] = v66;
        LOBYTE(v66) = *(unsigned char *)(v5 + v11 + 1760);
        LOBYTE(v51) = *(unsigned char *)(v5 + v11 + 1888);
        *(double *)&unint64_t v70 = (double)v51;
        double v71 = (double)*(unint64_t *)&v66 + *(double *)&v70 * 0.0625;
        i64[20] = v71;
        LOBYTE(v71) = *(unsigned char *)(v5 + v11 + 2016);
        LOBYTE(v70) = *(unsigned char *)(v5 + v11 + 2144);
        i64[21] = (double)*(unint64_t *)&v71 + (double)v70 * 0.0625;
        unsigned int v72 = *(unsigned __int8 *)(v2 + v25);
        *((unsigned char *)i64 + 184) = v72;
        *((_WORD *)i64 + 93) = v61[3614];
        i64[24] = (double)*(int *)(v65 + 52) * v29;
        int v73 = *(_DWORD *)(v65 + 56);
        i64[26] = (double)v73 * v29;
        double v74 = *(double *)&v30;
        double v75 = v305;
        if (v52 >= 10)
        {
          double v74 = *(double *)&v30;
          if (*(_WORD *)(v2 + v9 + 7220))
          {
            int v246 = v73;
            unsigned int v250 = v61;
            double DO_Raw_Meas_Unc = NK_Get_DO_Raw_Meas_Unc(*v305, *(unsigned char *)(v2 + v25 - 18), *(unsigned char *)(v296 + v8 + 82), *(unsigned __int16 *)(v2 + v9 + 7220) / 0xAu, v72, v52);
            int v73 = v246;
            uint64_t v61 = v250;
            uint64_t v2 = v296;
            unsigned int v57 = v297;
            double v75 = v305;
            uint64_t v5 = v281;
            uint64_t v19 = v283;
            uint64_t v67 = v287;
            uint64_t v17 = v290;
            uint64_t v16 = v293;
            uint64_t v53 = v278;
            uint64_t v12 = v279;
            double v74 = DO_Raw_Meas_Unc * v26;
          }
        }
        int v77 = (double *)v308[14 * v57].i64;
        v77[25] = v74;
        if (!v73) {
          double v74 = -1.0;
        }
        v77[27] = v74;
        *((_DWORD *)v77 + 60) = 2;
        __int16 v78 = v61[3608];
        if ((v78 & 0xC0) != 0)
        {
          int v79 = 4;
          uint64_t v7 = v276;
          int v14 = v270;
          unsigned int v13 = v272;
          unint64_t v32 = (unint64_t)v268;
          uint64_t v35 = (uint64_t)v261;
        }
        else
        {
          int v80 = (uint64_t *)v308;
          uint64_t v7 = v276;
          int v14 = v270;
          unsigned int v13 = v272;
          unint64_t v32 = (unint64_t)v268;
          uint64_t v35 = (uint64_t)v261;
          if ((v78 & 0x30) == 0) {
            goto LABEL_58;
          }
          int v79 = 3;
        }
        int v80 = (uint64_t *)v308;
        v308[14 * v57 + 15].i32[1] = v79;
LABEL_58:
        unint64_t v81 = &v80[28 * v57];
        *((_WORD *)v81 + 124) = v11;
        *((unsigned char *)v81 + 252) = v259 > 9;
        *((_DWORD *)v81 + 66) = 0;
        if (v259 < 15 || (unsigned int v82 = *(unsigned __int16 *)(v2 + v9 + 7222), v82 < 0x15))
        {
          v308[14 * v57 + 18].i64[1] = 0x42374876E8000000;
          double v87 = -1.0;
          unsigned int v86 = v57;
          uint64_t v15 = v53;
          uint64_t v18 = v67;
        }
        else
        {
          double v260 = (int *)(v81 + 33);
          unsigned int v251 = (float64x2_t *)&v308[14 * v57];
          v251[17].f64[1] = (double)*v253;
          float64_t v247 = *(double *)(v2 + v8 + 64);
          unsigned int v254 = v82;
          double v244 = NK_Get_DR_Raw_Meas_Unc(*(unsigned char *)(v2 + v25 - 18), *(unsigned char *)(v2 + v8 + 82), *(unsigned __int16 *)(v2 + v8 + 76))* v26;
          v83.f64[0] = v247;
          v83.f64[1] = v244;
          v251[18] = vmulq_f64(v83, v274);
          if (*(_DWORD *)(v289 + 1660) + 100 >= v254) {
            int v84 = 1;
          }
          else {
            int v84 = 2;
          }
          *double v260 = v84;
          *(void *)&v309[0] = 0;
          BOOL v85 = R8_EQ((const double *)(v276 + v24), (const double *)v309);
          uint64_t v2 = v296;
          unsigned int v86 = v297;
          double v75 = v305;
          uint64_t v35 = (uint64_t)v261;
          unint64_t v32 = (unint64_t)v268;
          uint64_t v5 = v281;
          uint64_t v19 = v283;
          uint64_t v18 = v287;
          uint64_t v17 = v290;
          uint64_t v16 = v293;
          uint64_t v15 = v278;
          uint64_t v12 = v279;
          int v14 = v270;
          unsigned int v13 = v272;
          uint64_t v7 = v276;
          double v87 = -1.0;
          if (!v85)
          {
            *(double *)v308[14 * v297 + 14].i64 = -(*(double *)(v276 + 8 * v11 + 208) * v27);
            double v87 = v244;
          }
        }
        uint64_t v88 = (uint64_t *)v308;
        *(double *)&v308[14 * v86 + 14].i64[1] = v87;
        long long v31 = (__int128)v274;
        if (*(unsigned char *)(v2 + v8 + 85))
        {
          uint64_t v89 = &v308[14 * v86 + 19];
          if (*(unsigned __int8 *)(v2 + v8 + 85) > 9u) {
            v89->i32[0] = 1;
          }
          else {
            v89->i32[0] = 2;
          }
          uint64_t v88 = (uint64_t *)v308;
        }
        else
        {
          v308[14 * v86 + 19].i32[0] = 0;
        }
        int v90 = &v88[28 * v86];
        *((_WORD *)v90 + 154) = *(_WORD *)(v2 + v9 + 7218);
        *(_DWORD *)((char *)v90 + 310) = *(_DWORD *)(v2 + v9 + 7220);
        int v91 = *(unsigned __int8 *)v75;
        if (v91 == 7) {
          goto LABEL_9;
        }
        if (v91 == 2)
        {
          int v300 = *(unsigned __int8 *)(v299 + 98);
          if (!v300)
          {
            if (*(_DWORD *)(v307 + 4 * *(char *)(v302 - 19) + 17452) == 2139062143) {
              goto LABEL_9;
            }
            LOBYTE(v300) = *(_DWORD *)(v307 + 4 * *(char *)(v302 - 19) + 17452);
            if (!(_BYTE)v300) {
              goto LABEL_9;
            }
          }
          *(unsigned char *)(v304 - 20) = v300;
        }
        else
        {
          LOBYTE(v300) = 0;
        }
        unsigned int v92 = GNSS_Id_To_Num_Pos_Idx(*v75);
        uint64_t v2 = v296;
        uint64_t v5 = v281;
        uint64_t v19 = v283;
        uint64_t v7 = v276;
        uint64_t v15 = v278;
        uint64_t v12 = v279;
        int v14 = v270;
        unsigned int v13 = v272;
        uint64_t v16 = v293;
        uint64_t v17 = v290;
        uint64_t v18 = v287;
        long long v31 = (__int128)v274;
        unint64_t v32 = (unint64_t)v268;
        uint64_t v35 = (uint64_t)v261;
        if (!v295 || !*(_DWORD *)(v295 + 192 * v92 + 176))
        {
LABEL_9:
          ++v11;
          v20 += 36;
          v10 += 4;
          v21 += 4;
          v22 += 8;
          v23 += 24;
          v9 += 36;
          v8 += 56;
          v24 += 8;
          v25 += 36;
          if (v11 == 128) {
            goto LABEL_128;
          }
          continue;
        }
        unsigned int v93 = *((unsigned __int16 *)v267 + 112);
        if (v93 <= 0xFF)
        {
          int v94 = &v308[3604].i8[104 * *((unsigned __int16 *)v267 + 112) + 8];
          *int v94 = v308[5].i8[8] - 1;
          *unsigned int v248 = v93;
          *((_WORD *)v267 + 112) = v93 + 1;
          int v95 = (unsigned __int8 *)v305;
          v94[1] = v300;
          if (*(unsigned char *)v305 == 2)
          {
            uint64_t v96 = *(int *)(v307 + 4 * *(char *)(v302 - 19) + 17508);
            if (v96 <= 3)
            {
              int v97 = dword_263D81C70[v96];
              goto LABEL_86;
            }
          }
          else
          {
            int v97 = 1;
LABEL_86:
            v308[3604].i32[26 * v93 + 3] = v97;
            int v95 = (unsigned __int8 *)v305;
          }
          int v98 = *v95;
          if (v98 != 4)
          {
            if (v98 == 2)
            {
              double v99 = *(double *)(v281 + 72) + *(double *)(v281 + 8 * v11 + 3424) * *(double *)&v268;
              double v100 = v99 + *(double *)&v261;
LABEL_91:
              if (v99 < 0.0) {
                double v99 = v100;
              }
            }
            else
            {
              double v99 = *(double *)(v281 + 32) + *(double *)(v281 + 8 * v11 + 3424) * *(double *)&v268;
            }
            double v101 = v99 * 1000000000.0;
            if (v101 < 0.0) {
              double v101 = v101 + v34;
            }
            *(double *)&v308[3605].i64[13 * v93] = v101;
            int v102 = *(unsigned __int8 *)(v283 + v11);
            if (*(unsigned char *)(v283 + v11))
            {
              double v103 = sqrt(*(double *)(v276 + v23) + *(double *)(v276 + v23 + 8));
              uint64_t v104 = (uint64_t)&v308[3604].i64[13 * v93 + 1];
              *(double *)(v104 + 80) = v103;
              *(double *)(v104 + 16) = v103 * v26;
              *(void *)(v104 + 32) = *(void *)(v287 + 8 * v11);
            }
            v308[3606].i32[26 * v93] = 0;
            int v105 = *(unsigned __int8 *)(v290 + v11);
            if (*(unsigned char *)(v290 + v11)) {
              v308[3607].i64[13 * v93] = *(void *)(v276 + v22);
            }
            int v106 = *(unsigned __int8 *)(v293 + v11);
            if (*(unsigned char *)(v293 + v11)) {
              v308[3607].i64[13 * v93 + 1] = *(void *)(v276 + v22 + 14904);
            }
            if (v102 && (*(_DWORD *)(v278 + 4 * v11) - 1) >= 0x1D) {
              *(double *)&v308[3608].i64[13 * v93] = v270[v11];
            }
            if (v105 && (*(_DWORD *)(v276 + v21) - 1) >= 0x1D) {
              v308[3608].i64[13 * v93 + 1] = *(void *)(v276 + v22 + 7552);
            }
            if (v106 && (*(_DWORD *)(v276 + v21 + 14904) - 1) >= 0x1D) {
              v308[3609].i64[13 * v93] = *(void *)(v276 + v22 + 22456);
            }
            if (v102) {
              *(double *)&v308[3609].i64[13 * v93 + 1] = sqrt(v272[v11]);
            }
            if (v105) {
              *(double *)&v308[3610].i64[13 * v93] = sqrt(*(double *)(v276 + v22 + 5376));
            }
            if (v106) {
              *(double *)&v308[3610].i64[13 * v93 + 1] = sqrt(*(double *)(v276 + v22 + 20280));
            }
            goto LABEL_9;
          }
          double v99 = *(double *)(v281 + 32) + -14.0 + *(double *)(v281 + 8 * v11 + 3424) * *(double *)&v268;
          double v100 = v99 + v33;
          goto LABEL_91;
        }
LABEL_128:
        uint64_t v107 = 0;
        BOOL v271 = (double *)(v292 + 168);
        uint64_t v273 = (double *)(v292 + 160);
        char v262 = v280 + 44;
        double v108 = 0.5;
        float64x2_t v275 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
        uint64_t v109 = v308;
        uint64_t v110 = v289;
        unsigned int v269 = (double *)(v292 + 152);
        while (2)
        {
          Constell_Pruint64_t n = Get_Constell_Prn(v107);
          unsigned __int8 v112 = Num_Prn_Idx_To_GNSS_Id(v107);
          unsigned __int8 v306 = v112;
          if (Constell_Prn == 2)
          {
            int v113 = *(_DWORD *)(v307 + 4 * v112 + 17324);
            if (v113 == 2139062143) {
              goto LABEL_250;
            }
          }
          else
          {
            if (Constell_Prn == 7) {
              break;
            }
            LOBYTE(v113) = 0;
          }
          uint64_t v114 = v110 + v107;
          if (!*(unsigned char *)(v110 + v107 + 816) || !*(unsigned char *)(v114 + 1096))
          {
            unsigned int v115 = Num_Prn_Idx_To_Num_Pos_Idx(v107);
            if (v115 - 1 <= 0xC3)
            {
              unsigned int v117 = v115;
              uint64_t v288 = v295 + 192 * v115;
              if (*(_DWORD *)(v288 + 176))
              {
                unsigned int v118 = (unsigned __int16)*v286;
                if (v118 > 0xFF) {
                  break;
                }
                *int v286 = v118 + 1;
                int v119 = &v109[5269].i32[74 * v118];
                int v120 = Constell_Prn;
                switch(Constell_Prn)
                {
                  case 0u:
                  case 7u:
                    EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x177Du);
                    if (Constell_Prn == 2) {
                      goto LABEL_143;
                    }
                    break;
                  case 1u:
                    goto LABEL_148;
                  case 2u:
                    *int v119 = 2;
LABEL_143:
                    __int16 v121 = (char)v113;
                    unsigned __int8 v122 = v306;
                    goto LABEL_150;
                  case 3u:
                    int v120 = 5;
                    goto LABEL_148;
                  case 4u:
                    int v120 = 4;
                    goto LABEL_148;
                  case 5u:
                    int v120 = 3;
                    goto LABEL_148;
                  case 6u:
                    int v120 = 6;
LABEL_148:
                    *int v119 = v120;
                    break;
                  default:
                    break;
                }
                unsigned __int8 v122 = 0;
                __int16 v121 = v306;
LABEL_150:
                uint64_t v123 = (uint64_t)&v109[5269].i64[37 * v118];
                *(_WORD *)(v123 + 4) = v121;
                *(unsigned char *)(v123 + 6) = v122;
                *(double *)v116.i64 = sqrt(*(double *)(v295 + 192 * v117 + 112) * v108);
                *(void *)(v123 + 144) = v116.i64[0];
                *(double *)(v123 + 152) = *(double *)v116.i64 * v26;
                uint64_t v124 = v307 + 20 * v107;
                int v125 = (int32x4_t *)(v124 + 51052);
                v124 += 55412;
                v116.i64[0] = *(void *)v124;
                v126.i64[0] = 0x100000001;
                v126.i64[1] = 0x100000001;
                v127.i64[0] = 0x200000002;
                v127.i64[1] = 0x200000002;
                int8x16_t v128 = (int8x16_t)vceqq_s32(*v125, v127);
                int8x16_t v129 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v128, (int8x16_t)v127), (int32x4_t)vbicq_s8((int8x16_t)vceqq_s32(*v125, v126), v128));
                *(int8x16_t *)(v123 + 160) = v129;
                v129.i32[0] = v125[1].i32[0];
                int32x4_t v130 = (int32x4_t)vextq_s8(vextq_s8(v129, v129, 4uLL), v116, 0xCuLL);
                v130.i32[3] = *(_DWORD *)(v124 + 8);
                int8x16_t v131 = (int8x16_t)vceqq_s32(v130, v126);
                int8x16_t v132 = (int8x16_t)vceqq_s32(v130, v127);
                *(int32x4_t *)(v123 + 176) = vsubq_s32((int32x4_t)vandq_s8(v132, (int8x16_t)v127), (int32x4_t)vbicq_s8(v131, v132));
                int v133 = *(_DWORD *)(v124 + 16);
                if (v133 == 2) {
                  int v134 = 2;
                }
                else {
                  int v134 = v133 == 1;
                }
                v109[5281].i32[74 * v118] = v134;
                double v135 = v280[214];
                if (v135 > 0.0 && *(double *)(v277 + 40 * v107 + 688) >= 0.0) {
                  *(double *)&v109[5281].i64[37 * v118 + 1] = v135 * Trop_Elev_MapF(v277 + 40 * v107 + 656);
                }
                if (Constell_Prn <= 7)
                {
                  if (((1 << Constell_Prn) & 0x3A) != 0)
                  {
                    double v136 = &v109->i64[37 * v118];
                    __int16 v137 = 2;
                    goto LABEL_161;
                  }
                  if (((1 << Constell_Prn) & 0x44) != 0)
                  {
                    double v136 = &v109->i64[37 * v118];
                    __int16 v137 = 1;
LABEL_161:
                    *((_WORD *)v136 + 42256) = v137;
                  }
                  else
                  {
                    v109[5282].i16[148 * v118] = 0;
                    EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x17BFu);
                  }
                }
                unsigned int v294 = v117;
                unint64_t v138 = &v109[5282].i16[148 * v118];
                if (*v138)
                {
                  unsigned int v139 = 0;
                  unsigned __int8 v140 = 0;
                  uint64_t v303 = (unsigned char *)(v114 + 816);
                  uint64_t v141 = v277 + 40 * v107;
                  uint64_t v291 = (double *)(v141 + 688);
                  uint64_t v282 = v141 + 9376;
                  uint64_t v284 = v141 + 656;
                  uint64_t v142 = v295 + 192 * v117;
                  uint64_t v298 = (double *)(v142 + 152);
                  unsigned int v301 = (double *)(v142 + 136);
                  uint64_t v143 = 15;
                  do
                  {
                    if (v139)
                    {
                      if (v139 == 1)
                      {
                        unsigned int v144 = 6114;
                        uint64_t v145 = 3;
                        int v146 = 3;
                        switch(Constell_Prn)
                        {
                          case 0u:
                          case 7u:
                            goto LABEL_170;
                          case 1u:
                          case 5u:
                            goto LABEL_173;
                          case 2u:
                          case 6u:
                            break;
                          case 3u:
                            uint64_t v145 = 9;
                            int v146 = 9;
                            goto LABEL_173;
                          case 4u:
                            int v146 = 7;
                            uint64_t v145 = 13;
                            goto LABEL_173;
                          default:
                            goto LABEL_171;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v147 = 0;
                      unsigned int v144 = 6099;
                      uint64_t v145 = 3;
                      int v148 = 1;
                      int v146 = 3;
                      switch(Constell_Prn)
                      {
                        case 0u:
                        case 7u:
LABEL_170:
                          EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", v144);
                          goto LABEL_171;
                        case 1u:
                        case 5u:
                          goto LABEL_180;
                        case 2u:
                          uint64_t v147 = 4;
                          int v148 = 4;
                          goto LABEL_180;
                        case 3u:
                          uint64_t v147 = 8;
                          int v148 = 8;
                          goto LABEL_180;
                        case 4u:
                          int v148 = 6;
                          uint64_t v147 = 11;
                          goto LABEL_180;
                        case 6u:
                          goto LABEL_173;
                        default:
LABEL_171:
                          int v148 = 0;
                          if (v143 > 0xE)
                          {
                            uint64_t v147 = v143;
                          }
                          else
                          {
                            uint64_t v147 = v143;
                            uint64_t v145 = v143;
                            int v146 = 0;
                            if (((1 << v143) & 0x66CC) != 0)
                            {
LABEL_173:
                              uint64_t v147 = v145;
                              int v148 = v146;
                              if (*(unsigned char *)(v289 + v107 + 1096))
                              {
                                uint64_t v143 = v145;
                                break;
                              }
                              goto LABEL_182;
                            }
                          }
LABEL_180:
                          if (*v303)
                          {
                            uint64_t v143 = v147;
                            break;
                          }
LABEL_182:
                          uint64_t v143 = v147;
                          v308[5282].i32[74 * v118 + 1 + v140] = v148;
                          double v149 = 0.0;
                          double v150 = 0.0;
                          if (*(_DWORD *)(v307 + 8956))
                          {
                            double v150 = 0.0;
                            if (*v291 >= 0.0)
                            {
                              double v151 = GPS_Klob_Iono_Delay((double *)(v292 + 224), v282, v284, (char *)(v307 + 8952), *(double *)(v285 + 40));
                              GPS_L1_Iono_Scale_factor();
                              double v150 = v151 * v152;
                            }
                          }
                          *(double *)&v308[5283].i64[37 * v118 + v140] = v150;
                          uint64_t v153 = 0;
                          switch(v148)
                          {
                            case 0:
                            case 2:
                              EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x188Bu);
                              goto LABEL_188;
                            case 1:
                            case 6:
                            case 8:
                              goto LABEL_189;
                            case 3:
                            case 7:
                            case 9:
                              double v149 = *(double *)(v292 + 176) * 299792458.0;
                              uint64_t v153 = *(void *)(v292 + 880);
                              goto LABEL_189;
                            case 4:
                              if (*(unsigned char *)(v289 + 1976)) {
                                double v160 = 1.5;
                              }
                              else {
                                double v160 = 3.0;
                              }
                              *(void *)&v309[0] = 0;
                              if (R8_EQ(v273, (const double *)v309)) {
                                goto LABEL_204;
                              }
                              double v321 = 0.0;
                              BOOL v161 = R8_EQ(v269, &v321);
                              double v162 = 0.0;
                              double v158 = (uint64_t *)v308;
                              if (v161) {
                                goto LABEL_207;
                              }
                              double v163 = *v269;
                              double v164 = *v273;
                              long long v312 = 0u;
                              long long v313 = 0u;
                              long long v310 = 0u;
                              long long v311 = 0u;
                              memset(v309, 0, sizeof(v309));
                              uint64_t v327 = 0;
                              long long v325 = 0u;
                              long long v326 = 0u;
                              long long v323 = 0u;
                              long long v324 = 0u;
                              long long v322 = 0u;
                              *(void *)uint64_t v320 = 0;
                              *(_OWORD *)uint64_t v318 = xmmword_263D81C00;
                              double v321 = -1.0;
                              mapu((double *)v318, 1, 1u, 2, v262, 0xCu, (double *)v309, 1, &v321, (double *)v320);
                              double v165 = sqrt(*(double *)v320);
                              double v162 = 0.0;
                              if (v165 >= v160) {
                                goto LABEL_211;
                              }
                              double v166 = (v163 - v164) * -299792458.0;
                              double v167 = v280[1941];
                              goto LABEL_210;
                            case 5:
                              *(void *)&v309[0] = 0;
                              if (R8_EQ(v271, (const double *)v309))
                              {
                                double v160 = 1.5;
LABEL_204:
                                double v162 = 0.0;
                                double v158 = (uint64_t *)v308;
                                uint64_t v156 = v296;
                              }
                              else
                              {
                                double v321 = 0.0;
                                double v158 = (uint64_t *)v308;
                                if (R8_EQ(v269, &v321))
                                {
                                  double v160 = 1.5;
                                  double v162 = 0.0;
LABEL_207:
                                  uint64_t v156 = v296;
                                }
                                else
                                {
                                  double v168 = *v269;
                                  double v169 = *v271;
                                  long long v312 = 0u;
                                  long long v313 = 0u;
                                  long long v310 = 0u;
                                  long long v311 = 0u;
                                  memset(v309, 0, sizeof(v309));
                                  uint64_t v327 = 0;
                                  long long v325 = 0u;
                                  long long v326 = 0u;
                                  long long v323 = 0u;
                                  long long v324 = 0u;
                                  long long v322 = 0u;
                                  *(void *)uint64_t v320 = 0;
                                  *(void *)&v318[2] = 0;
                                  *(void *)uint64_t v318 = 0x3FF0000000000000;
                                  unint64_t v319 = 0xBFF0000000000000;
                                  double v321 = -1.0;
                                  mapu((double *)v318, 1, 1u, 3, v262, 0xCu, (double *)v309, 1, &v321, (double *)v320);
                                  double v165 = sqrt(*(double *)v320);
                                  double v160 = 1.5;
                                  double v162 = 0.0;
                                  if (v165 < 1.5)
                                  {
                                    double v166 = (v168 - v169) * -299792458.0;
                                    double v167 = v280[1945];
LABEL_210:
                                    double v162 = v167 + v166;
                                    double v160 = v165;
                                  }
LABEL_211:
                                  uint64_t v156 = v296;
                                  double v108 = 0.5;
                                }
                              }
                              uint64_t v170 = (uint64_t)&v158[37 * v118 + 10538 + v140];
                              *(double *)(v170 + 240) = v162;
                              *(double *)(v170 + 256) = v160;
                              char v171 = v301;
                              if (!v139) {
                                char v171 = v298;
                              }
                              *(double *)&v158[37 * v118 + 10572 + v140] = *v171 * 1000000000.0;
LABEL_215:
                              char v159 = *(unsigned char *)(v156 + 32);
LABEL_216:
                              *((unsigned char *)&v158[37 * v118 + 10574] + v140++) = v159;
                              break;
                            default:
LABEL_188:
                              uint64_t v153 = 0;
LABEL_189:
                              uint64_t v154 = (uint64_t)&v308[5269].i64[37 * v118 + v140];
                              *(double *)(v154 + 240) = v149;
                              *(void *)(v154 + 256) = v153;
                              int v155 = v301;
                              if (!v139) {
                                int v155 = v298;
                              }
                              *(double *)&v308[5286].i64[37 * v118 + v140] = *v155 * 1000000000.0;
                              uint64_t v156 = v296;
                              int v157 = 1 << v148;
                              double v158 = (uint64_t *)v308;
                              if ((v157 & 0x172) != 0) {
                                goto LABEL_215;
                              }
                              if ((v157 & 0x288) != 0)
                              {
                                char v159 = *(unsigned char *)(v296 + 33);
                              }
                              else
                              {
                                EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x18AFu);
                                char v159 = 0;
                              }
                              goto LABEL_216;
                          }
                          break;
                      }
                    }
                    ++v139;
                  }
                  while (v139 < (unsigned __int16)*v138);
                }
                else
                {
                  unsigned __int8 v140 = 0;
                }
                __int16 *v138 = v140;
                uint64_t v109 = v308;
                unsigned int v172 = v294;
                switch(Constell_Prn)
                {
                  case 1u:
                    uint64_t v173 = v307 + 116 * (v306 - 1);
                    uint64_t v174 = (_DWORD *)(v173 + 3836);
                    unsigned int v175 = (int *)(v173 + 124);
                    uint64_t v176 = v307 + 44 * (v306 - 1);
                    uint64_t v177 = 7548;
                    goto LABEL_228;
                  case 2u:
                    uint64_t v174 = (_DWORD *)(v307 + 116 * (v306 - 1) + 13468);
                    unsigned int v175 = (int *)(v307 + ((unint64_t)(v306 - 1) << 6) + 11932);
                    uint64_t v176 = v307 + 36 * (v306 - 1);
                    uint64_t v177 = 16252;
                    goto LABEL_228;
                  case 3u:
                    uint64_t v180 = v307 + 88 * (v306 - 1);
                    uint64_t v174 = (_DWORD *)(v180 + 20880);
                    unsigned int v175 = (int *)(v180 + 17712);
                    uint64_t v176 = v307 + 36 * (v306 - 1);
                    uint64_t v177 = 24048;
                    goto LABEL_228;
                  case 4u:
                    uint64_t v181 = v307 + 152 * (v306 - 1);
                    uint64_t v174 = (_DWORD *)(v181 + 35092);
                    unsigned int v175 = (int *)(v181 + 25516);
                    uint64_t v176 = v307 + 44 * (v306 - 1);
                    uint64_t v177 = 44668;
                    goto LABEL_228;
                  case 5u:
                    uint64_t v182 = v307 + 116 * (v306 + 63);
                    uint64_t v174 = (_DWORD *)(v182 + 10316);
                    unsigned int v175 = (int *)(v182 + 9156);
                    uint64_t v176 = v307 + 44 * (v306 + 63);
                    uint64_t v177 = 11476;
                    goto LABEL_228;
                  case 6u:
                    uint64_t v183 = v307 + 76 * (v306 - 1);
                    uint64_t v174 = (_DWORD *)(v183 + 48764);
                    unsigned int v175 = (int *)(v183 + 47700);
                    uint64_t v176 = v307 + 52 * (v306 - 1);
                    uint64_t v177 = 49828;
LABEL_228:
                    int v184 = *v175;
                    int v185 = *(_DWORD *)(v176 + v177);
                    if (*v174 == 6) {
                      int v186 = 6;
                    }
                    else {
                      int v186 = v185;
                    }
                    if (v184) {
                      int v186 = v184;
                    }
                    unsigned int v187 = v186 - 3;
                    uint64_t v179 = v295;
                    if (v187 > 3) {
                      int v178 = 0;
                    }
                    else {
                      int v178 = dword_263D81C80[v187];
                    }
                    break;
                  default:
                    int v178 = 0;
                    uint64_t v109 = v308;
                    unsigned int v172 = v294;
                    uint64_t v179 = v295;
                    break;
                }
                v109[5269].i32[74 * v118 + 2] = v178;
                uint64_t v188 = v179 + 192 * v172;
                int v191 = *(__int16 *)(v188 + 164);
                unint64_t v190 = (__int16 *)(v188 + 164);
                int v189 = v191;
                __int16 v192 = v191;
                switch(Constell_Prn)
                {
                  case 0u:
                  case 7u:
                    EvCrt_Illegal_switch_case("API_Get_Raw_Meas_Data", 0x18FFu);
                    int v193 = 0;
                    __int16 v192 = *v190;
                    break;
                  case 1u:
                  case 5u:
                    goto LABEL_239;
                  case 2u:
                    uint64_t v203 = v179 + 192 * v172;
                    int v204 = *(__int16 *)(v203 + 172);
                    int v205 = *(_DWORD *)(v203 + 168);
                    BOOL v206 = v204 <= 0 && v205 < 1;
                    uint64_t v194 = v288;
                    if (v206)
                    {
                      *(void *)&v309[0] = 0;
                      API_Get_UTC_Cor(1, (double *)v309);
                      v318[0] = 0;
                      v320[0] = 0;
                      double v321 = 0.0;
                      __int16 v192 = *v190;
                      GPS_To_Glon_Time(0, *v190, (double)*(int *)(v179 + 192 * v172 + 160), *(double *)v309, v318, v320, &v321);
                      int v207 = v320[0] + 1461 * v318[0];
                      int v205 = (int)v321;
                    }
                    else
                    {
                      int v207 = v204 + 1461 * *(__int16 *)(v179 + 192 * v172 + 174);
                    }
                    int v193 = v205 + 86400 * v207 - 126316800;
                    goto LABEL_241;
                  case 3u:
                  case 6u:
                    v189 -= 1024;
LABEL_239:
                    int v193 = *(_DWORD *)(v179 + 192 * v172 + 160) + 604800 * v189;
                    break;
                  case 4u:
                    int v208 = *(_DWORD *)(v179 + 192 * v172 + 160);
                    if (v208 < 14) {
                      int v209 = -1357;
                    }
                    else {
                      int v209 = -1356;
                    }
                    int v210 = v209 + v189;
                    if (v208 >= 14) {
                      int v211 = -14;
                    }
                    else {
                      int v211 = 604786;
                    }
                    int v193 = v211 + v208 + 604800 * v210;
                    break;
                  default:
                    int v193 = 0;
                    break;
                }
                uint64_t v194 = v288;
LABEL_241:
                *(double *)&v109[5270].i64[37 * v118] = (double)v193;
                __int16 v316 = 0;
                long long v314 = 0u;
                long long v315 = 0u;
                long long v312 = 0u;
                long long v313 = 0u;
                long long v310 = 0u;
                long long v311 = 0u;
                memset(v309, 0, sizeof(v309));
                v317[0] = 0;
                *(_DWORD *)((char *)v317 + 3) = 0;
                uint64_t v195 = v179 + 192 * v172;
                int v197 = *(_DWORD *)(v195 + 160);
                uint64_t v196 = (int *)(v195 + 160);
                if (Comp_CurrState(0x1Eu, v192, v194, (uint64_t)v309, (double)v197 + -15.0, 0.0))
                {
                  uint64_t v198 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v198 + 24) = *(_OWORD *)((char *)v309 + 8);
                  *(void *)(v198 + 40) = *((void *)&v309[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v190, v194, (uint64_t)v309, (double)*v196 + -5.0, 0.0))
                {
                  uint64_t v199 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v199 + 48) = *(_OWORD *)((char *)v309 + 8);
                  *(void *)(v199 + 64) = *((void *)&v309[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v190, v194, (uint64_t)v309, (double)*v196 + 5.0, 0.0))
                {
                  uint64_t v200 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v200 + 72) = *(_OWORD *)((char *)v309 + 8);
                  *(void *)(v200 + 88) = *((void *)&v309[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v190, v194, (uint64_t)v309, (double)*v196 + 15.0, 0.0))
                {
                  uint64_t v201 = (uint64_t)&v109[5269].i64[37 * v118];
                  *(_OWORD *)(v201 + 96) = *(_OWORD *)((char *)v309 + 8);
                  *(void *)(v201 + 112) = *((void *)&v309[1] + 1);
                }
                uint64_t v202 = (uint64_t)&v109[5269].i64[37 * v118];
                *(float64x2_t *)(v202 + 120) = vmulq_f64(*(float64x2_t *)(v179 + 192 * v294 + 96), v275);
                *(void *)(v202 + 136) = 0;
                uint64_t v110 = v289;
              }
            }
          }
LABEL_250:
          if (++v107 != 218) {
            continue;
          }
          break;
        }
        int v212 = *(__int16 *)(v292 + 62);
        *(_WORD *)unsigned __int8 v267 = *(_WORD *)(v292 + 62);
        *((_WORD *)v267 + 1) = *(_WORD *)(v292 + 212);
        *((unsigned char *)v267 + 4) = *(unsigned char *)(v292 + 210);
        if (*(unsigned char *)(v292 + 60))
        {
          *((_WORD *)v267 + 3) = v212 - 1356;
          if (*(double *)(v292 + 48) < 14.0) {
            *((_WORD *)v267 + 3) = v212 - 1357;
          }
          *((_WORD *)v267 + 4) = v212 - 1024;
          *((_WORD *)v267 + 5) = v212 - 1024;
        }
        int v213 = *(_DWORD *)(v307 + 8972);
        if ((v213 - 3) >= 4)
        {
          uint64_t v220 = v264;
          if (v213 == 1) {
            *((unsigned char *)v267 + 16) = v265[2];
          }
        }
        else
        {
          int v214 = v265[3];
          int v215 = v212 - 127;
          if (v215 <= (v214 | 0x400)) {
            LOWORD(v215) = v214 | 0x400;
          }
          __int16 v216 = ((v215 - v214 - 769) & 0xFF00 | v214) + 1024;
          *((_WORD *)v267 + 6) = v216;
          *((_WORD *)v267 + 7) = *((_WORD *)v265 + 2);
          *((unsigned char *)v267 + 16) = v265[2];
          *((_WORD *)v267 + 12) = v216;
          *((_DWORD *)v267 + 7) = *v265 << 12;
          uint64_t v217 = *(void *)(v307 + 8976);
          v218.i64[0] = (int)v217;
          v218.i64[1] = SHIDWORD(v217);
          int8x16_t v219 = (int8x16_t)vmulq_f64(vcvtq_f64_s64(v218), (float64x2_t)xmmword_263D81C10);
          v109[3592] = vextq_s8(v219, v219, 8uLL);
          uint64_t v220 = v264;
        }
        if (*(unsigned char *)(v266 + 64))
        {
          v221.i64[0] = -*((_DWORD *)v265 + 2035);
          v221.i64[1] = *(int *)(v266 + 4);
          v109[3594] = (int8x16_t)vmulq_f64(vcvtq_f64_s64(v221), (float64x2_t)xmmword_263D81C20);
          *((unsigned char *)v267 + 58) = *(unsigned char *)v266;
          *((_WORD *)v267 + 28) = v265[8136];
        }
        if ((*(_DWORD *)(v266 + 8236) - 3) <= 3)
        {
          int v222 = (unsigned __int16)*v255;
          int v223 = *((unsigned __int16 *)v267 + 4) - 31;
          if (v223 <= v222) {
            LOWORD(v223) = *v255;
          }
          *((_WORD *)v267 + 40) = ((v223 - v222 + 63) & 0xFFC0) + v222;
          *((_DWORD *)v267 + 21) = *(_DWORD *)(v266 + 8256);
          *(float64x2_t *)(v267 + 11) = vmulq_f64(*(float64x2_t *)(v266 + 8240), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
        }
        if ((*(_DWORD *)v220 - 3) <= 3)
        {
          *((_WORD *)v267 + 52) = *(_WORD *)(v220 + 4);
          *((_DWORD *)v267 + 27) = *(_DWORD *)(v220 + 8);
          v109[3597] = (int8x16_t)vmulq_f64(*(float64x2_t *)(v220 + 12), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
        }
        if ((*(_DWORD *)(v220 + 3080) - 3) <= 3)
        {
          unsigned int v224 = *(unsigned __int16 *)(v256 + 28);
          if (v224 > 0x3FF) {
            LOWORD(v224) = v224 - 1024;
          }
          *((_WORD *)v267 + 64) = v224;
          *((_DWORD *)v267 + 33) = *(_DWORD *)(v256 + 24);
          *(float64x2_t *)(v267 + 17) = vmulq_f64(*(float64x2_t *)v256, (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
        }
        if (*(unsigned char *)(v285 + 16) && *(_DWORD *)v285)
        {
          double v225 = *(double *)(v285 + 48);
          v267[19] = llround((*(double *)(v285 + 40) - v225) * 1000000000.0)
                   + 604800000000000 * *(__int16 *)(v285 + 32)
                   - 1000000 * *(unsigned int *)(v285 + 24);
          *((double *)v267 + 20) = (double)(uint64_t)round(v225 * -1000000000.0) - v225 * -1000000000.0;
          *((double *)v267 + 21) = *(double *)(v292 + 872) * v26;
        }
        v226.f64[0] = *(float64_t *)(v285 + 56);
        v226.f64[1] = *(float64_t *)(v292 + 920);
        v109[3601] = (int8x16_t)vmulq_f64(v226, (float64x2_t)xmmword_263D81C30);
        *((double *)v267 + 24) = *(double *)(v292 + 176) * 299792458.0;
        v267[25] = *(void *)(v292 + 880);
        v267[26] = *(void *)(v110 + 2016);
        *((_DWORD *)v267 + 54) = 0;
        int v227 = *(_DWORD *)(v110 + 2024);
        uint64_t v228 = p_api;
        if (v227 >= 1)
        {
          uint64_t v229 = *(void *)(p_api + 48);
          if (*(unsigned char *)(v229 + 16) && *(int *)v229 >= 3)
          {
            int v230 = (int)*(double *)(v229 + 40) + 604800 * *(__int16 *)(v229 + 32);
            int v231 = v230 - v227;
            if (v230 <= 0) {
              int v231 = -1;
            }
          }
          else
          {
            int v231 = -1;
          }
          *((_DWORD *)v267 + 54) = v231;
        }
        uint64_t v232 = *(void *)(v228 + 56);
        unsigned int v233 = *(_DWORD *)(v232 + 8956);
        if (v233)
        {
          unsigned int v234 = (char *)(v232 + 8960);
          int v235 = *(_DWORD *)(v232 + 8952);
          int v236 = *v234;
          int v237 = v234[1];
          int v238 = v234[2];
          int v239 = v234[3];
          int v240 = v234[4];
          int v241 = v234[5];
          int v242 = v234[6];
          LODWORD(v234) = v234[7];
          v263[1] = (double)v236 * 9.31322575e-10;
          v263[2] = (double)v237 * 0.0000000074505806;
          v263[3] = (double)v238 * 0.0000000596046448;
          v263[4] = (double)v239 * 0.0000000596046448;
          v263[5] = (double)v240 * 2048.0;
          v263[6] = (double)v241 * 16384.0;
          *(_DWORD *)char v263 = v235;
          v263[7] = (double)v242 * 65536.0;
          v263[8] = (double)(int)v234 * 65536.0;
          if (v233 <= 6) {
            *((_DWORD *)v263 + 18) = dword_263D81D28[v233 - 1];
          }
        }
        return 1;
      default:
        int v50 = GM_Gen_SV_Meas_QI((uint64_t)v40);
        uint64_t v2 = v296;
        int v52 = v50;
        uint64_t v5 = v281;
        uint64_t v53 = v278;
        uint64_t v12 = v279;
        goto LABEL_38;
    }
  }
}

uint64_t API_Qual_Pos(const char *a1, int a2, unint64_t a3, int a4, uint64_t a5)
{
  LODWORD(v6) = a4;
  unint64_t v7 = a3;
  int v8 = a2;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(_DWORD **)(p_api + 72);
  uint64_t v10 = *(void *)(p_api + 80);
  uint64_t v11 = *(void *)(p_api + 168);
  char v63 = (unsigned char *)(v11 + 21660);
  uint64_t v64 = *(void *)(p_api + 128);
  uint64_t v65 = (unsigned char *)(v11 + 6756);
  memset(v71, 0, sizeof(v71));
  double v66 = (_DWORD *)(v64 + 68180);
  uint64_t v67 = v9;
  uint64_t v12 = (unsigned int *)(v64 + 27116);
  unsigned int v13 = (char *)v71;
  uint64_t v69 = (char *)v71;
  unint64_t v70 = &v72;
  v68[1] = v71;
  char v14 = 81;
  uint64_t v15 = 1u;
  do
  {
    v68[0] = v13 + 1;
    *unsigned int v13 = v14;
    unsigned int v13 = (char *)v68[0];
    if (v68[0] >= (unint64_t)v70)
    {
      unsigned int v13 = v69;
      v68[0] = v69;
    }
    char v14 = aQualPos[v15++];
  }
  while (v15 != 11);
  char v16 = *a1;
  if (*a1)
  {
    uint64_t v17 = a1 + 1;
    do
    {
      v68[0] = v13 + 1;
      *unsigned int v13 = v16;
      unsigned int v13 = (char *)v68[0];
      if (v68[0] >= (unint64_t)v70)
      {
        unsigned int v13 = v69;
        v68[0] = v69;
      }
      int v18 = *(unsigned __int8 *)v17++;
      char v16 = v18;
    }
    while (v18);
  }
  uint64_t v19 = " NM";
  if (a2) {
    uint64_t v19 = " SS";
  }
  char v20 = *v19;
  if (*v19)
  {
    uint64_t v21 = (unsigned __int8 *)(v19 + 1);
    do
    {
      v68[0] = v13 + 1;
      *unsigned int v13 = v20;
      unsigned int v13 = (char *)v68[0];
      if (v68[0] >= (unint64_t)v70)
      {
        unsigned int v13 = v69;
        v68[0] = v69;
      }
      int v22 = *v21++;
      char v20 = v22;
    }
    while (v22);
  }
  v68[0] = v13 + 1;
  *unsigned int v13 = 32;
  if (v68[0] >= (unint64_t)v70) {
    v68[0] = v69;
  }
  sprintf_2d(v68, a3);
  uint64_t v23 = (unsigned char *)v68[0]++;
  *uint64_t v23 = 32;
  if (v68[0] >= (unint64_t)v70) {
    v68[0] = v69;
  }
  sprintf_3d(v68, v6);
  if (a5) {
    int v24 = v8;
  }
  else {
    int v24 = 0;
  }
  if (v24 == 1) {
    int v25 = a5 - (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  }
  else {
    int v25 = 0;
  }
  sprintf_sp1d(v68, v25);
  uint64_t v26 = 0;
  char v27 = 32;
  uint64_t v28 = (char *)v68[0];
  uint64_t v29 = v10;
  do
  {
    v68[0] = v28 + 1;
    *uint64_t v28 = v27;
    uint64_t v28 = (char *)v68[0];
    if (v68[0] >= (unint64_t)v70)
    {
      uint64_t v28 = v69;
      v68[0] = v69;
    }
    char v27 = asc_263D652F5[++v26];
  }
  while (v26 != 2);
  if (v24)
  {
    if (v25 < v67[415])
    {
      uint64_t v59 = a5;
      unint64_t v60 = v67[415];
      uint64_t v30 = "%s %s  - Deadline up %d  FixInt %d";
LABEL_111:
      uint64_t v51 = 1;
      DbgLog_v(1, v30, v71, " TRUE ", v59, v60, v61, v62);
      return v51;
    }
    if (v7 == -1)
    {
      DbgLog_v(1, "%s %s  - Waiting for full time-out");
      return 0;
    }
  }
  int v31 = *(_DWORD *)(v10 + 4);
  if (v8)
  {
    if (v31 <= 3)
    {
      DbgLog_v(1, "%s %s  - SS FixType %d < SV_2D");
      return 0;
    }
  }
  else if (v31 <= 0)
  {
    DbgLog_v(1, "%s %s  - NM FixType %d < INT_AID");
    return 0;
  }
  uint64_t v32 = v8 ^ 1u;
  if (v7)
  {
    if (!v6) {
      LODWORD(v6) = 5 * v7;
    }
  }
  else
  {
    if (!v6) {
      LODWORD(v6) = *(double *)&v67[2 * v32 + 422];
    }
    unint64_t v7 = *(double *)&v67[2 * v32 + 418];
  }
  unsigned int v33 = 3 * v7;
  if (v6 < 3 * (int)v7) {
    unsigned int v33 = v6;
  }
  if (v24) {
    unint64_t v6 = v33;
  }
  else {
    unint64_t v6 = v6;
  }
  if (a5) {
    int v8 = 0;
  }
  if (v8 == 1)
  {
    double v34 = (unsigned int *)(v64 + 27116);
    uint64_t v35 = v11 + 61864;
    if (*(_DWORD *)(v64 + 27136))
    {
      unsigned int v36 = *v12;
      if (*v12 >= 4 && *(unsigned __int8 *)(v11 + 62033) >= 4u && *(double *)(v11 + 61880) <= 10.0)
      {
        int v37 = *(_DWORD *)(v10 + 56);
        if (v37 >= 6)
        {
          int v38 = 10000;
          if ((v37 - 7) <= 4) {
            int v38 = dword_263D81D40[v37 - 7];
          }
          if (v36 >= 0xD) {
            unsigned int v36 = 13;
          }
          int v39 = v67[415] * (v36 - 3);
          if (v39 >= 10000) {
            int v39 = 10000;
          }
          int v40 = v39 + v38;
          DbgLog_v(1, "%s %s  - SS Scaling required  %d", (const char *)v71, " info ", v39 + v38);
          unint64_t v7 = (v40 * v7) / 0x2710uLL;
          unint64_t v6 = (v40 * v6) / 0x2710uLL;
          uint64_t v35 = v11 + 61864;
          double v34 = (unsigned int *)(v64 + 27116);
          uint64_t v29 = v10;
        }
      }
    }
  }
  else
  {
    uint64_t v35 = v11 + 61864;
    double v34 = (unsigned int *)(v64 + 27116);
  }
  if (!a5 && v32)
  {
    if (v34[5]
      && *v34
      && *(unsigned __int8 *)(v35 + 169) >= 4u
      && *(double *)v35 <= 10.0
      && *(double *)(v35 + 16) <= 20.0
      && *(int *)(v29 + 56) >= 10)
    {
      int v41 = v67[415] * v34[4];
      if (v41 >= 10000) {
        int v41 = 10000;
      }
      int v42 = v41 + 10000;
      DbgLog_v(1, "%s %s  - NM Scaling required  %d", (const char *)v71, " info ", v41 + 10000);
      uint64_t v29 = v10;
      unint64_t v7 = (v42 * v7) / 0x2710uLL;
      double v34 = (unsigned int *)(v64 + 27116);
      uint64_t v35 = v11 + 61864;
      unint64_t v6 = (v42 * v6) / 0x2710uLL;
    }
    goto LABEL_84;
  }
  if (!a5)
  {
LABEL_84:
    double v43 = *(double *)(v29 + 928);
    double v45 = *(double *)(v29 + 848);
    goto LABEL_85;
  }
  double v43 = *(double *)(v29 + 928);
  if (v43 > 10.0) {
    double v43 = v43 * 1.5;
  }
  double v44 = *(double *)(v29 + 848);
  double v45 = v44 * 1.5;
  if (v44 <= 15.0) {
    double v45 = *(double *)(v29 + 848);
  }
LABEL_85:
  uint64_t v46 = v45;
  uint64_t v47 = v43;
  if (v7 < v47 || v6 < v46)
  {
    DbgLog_v(1, "%s %s  - Insufficient :  H %d %d  V %d %d");
    return 0;
  }
  if (v8)
  {
    if (!*v67 && *(int *)(v29 + 56) >= 9 && *(_DWORD *)(v29 + 32) - *v66 >= 24001 && *v34 <= 0x3C)
    {
      BOOL v49 = (double)v7 * 0.3 >= (double)*(unsigned int *)(v35 + 796) && *(double *)(v35 + 16) <= 20.0;
      if (!v49
        || (v67[17] & 0xFFFFFFFE) == 6 && *(unsigned char *)(v64 + 241)
        || *v65 + 2 >= *(unsigned __int8 *)(v29 + 385))
      {
        DbgLog_v(1, "%s %s  - Delay :  H %d %d  V %d %d  :  %d  :  %d  :  %d %d %d  :  %d %d", v71, " FALSE", v47, v7);
        return 0;
      }
    }
LABEL_110:
    uint64_t v61 = v45;
    unint64_t v62 = v6;
    uint64_t v59 = v43;
    unint64_t v60 = v7;
    uint64_t v30 = "%s %s  - NM or noDL OK :  H %d %d  V %d %d";
    goto LABEL_111;
  }
  if (!a5 || v32) {
    goto LABEL_110;
  }
  unsigned int v50 = *v34;
  if (*v34 < 0x11)
  {
    unsigned int v52 = *v65;
    BOOL v54 = v52 > 2
       || (unsigned int v53 = *v63, v53 > 2)
       || *v65 && v52 + 10 >= *(unsigned __int8 *)(v29 + 385)
       || *v63 && v53 + 10 >= *(unsigned __int8 *)(v29 + 387);
    if (v50 >= 3)
    {
      if (*(unsigned char *)(v64 + 241)) {
        BOOL v55 = 1;
      }
      else {
        BOOL v55 = *(_DWORD *)(v29 + 32) - *v66 < 7001;
      }
      if (v55) {
        BOOL v54 = 1;
      }
      if (!v54)
      {
        LODWORD(v43) = *(_DWORD *)(v35 + 800);
        double v56 = (double)*(unint64_t *)&v43;
        if ((double)v7 * 0.3 >= (double)*(unint64_t *)&v43)
        {
          LODWORD(v56) = *(_DWORD *)(v35 + 804);
          if ((double)v6 * 0.3 >= (double)*(unint64_t *)&v56 && *(_DWORD *)(v35 + 792) <= 0xAu)
          {
            int v57 = *(_DWORD *)(v29 + 56);
            if (v57 >= 8 && (v7 > 0x31 || v57 != 8) && *(unsigned __int8 *)(v11 + 1881) > 0x1Bu)
            {
              uint64_t v61 = v46;
              unint64_t v62 = v6;
              uint64_t v59 = v47;
              unint64_t v60 = v7;
              uint64_t v30 = "%s %s  - OK :  H %d %d  V %d %d";
              goto LABEL_111;
            }
          }
        }
      }
    }
    DbgLog_v(1, "%s %s  - Wait :  H %d %d  V %d %d  :  %d %d %d  :  %d %d  :  %d %d %d :  %d %d", v71, " FALSE", v47, v7, v46);
    return 0;
  }
  uint64_t v51 = 1;
  DbgLog_v(1, "%s %s  - Already waited :  H %d %d  V %d %d  :  FixTime %d > 16", v71);
  return v51;
}

uint64_t API_Set_GPS_CBinEph(char *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = Is_GN_API_Set_Allowed(a1);
  if (result)
  {
    unsigned __int8 v8 = a2 - 1;
    if ((a2 - 1) >= 0x20u)
    {
      unsigned __int8 v8 = a2 + 63;
      if ((a2 + 63) >= 0xAu)
      {
        EvCrt_v("%s FAILED:  SV = %d, Out of range !");
        return 0;
      }
    }
    if (*((unsigned __int8 *)a3 + 71) >= 2u)
    {
      EvCrt_v("%s FAILED: L5_Health = %d >1, Out of range!");
      return 0;
    }
    if (*((unsigned __int8 *)a3 + 72) >= 2u)
    {
      EvCrt_v("%s FAILED: Integrity = %d >1, Out of range!");
      return 0;
    }
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a3 + 37) - 4096) >> 13) <= 6u)
    {
      EvCrt_v("%s FAILED: ISC_L1_CA = %d <-2^12 or >=2^12, Out of range!");
      return 0;
    }
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a3 + 38) - 4096) >> 13) <= 6u)
    {
      EvCrt_v("%s FAILED: ISC_L5_Q5 = %d <-2^12 or >=2^12, Out of range!");
      return 0;
    }
    if ((*((unsigned char *)a3 + 78) - 16) <= 0xDFu)
    {
      EvCrt_v("%s FAILED: URA = %d <-16 or >15, Out of range!");
      return 0;
    }
    uint64_t v9 = *(void *)(p_api + 248);
    EvLog_nd(a1, 2, v7, a2, *a3);
    uint64_t v10 = v9 + 80 * v8;
    if ((a2 - 1) <= 0x1Fu)
    {
      uint64_t v15 = (_OWORD *)(v10 + 700);
      *uint64_t v15 = *(_OWORD *)a3;
      long long v16 = *((_OWORD *)a3 + 1);
      long long v17 = *((_OWORD *)a3 + 2);
      long long v18 = *((_OWORD *)a3 + 4);
      v15[3] = *((_OWORD *)a3 + 3);
      void v15[4] = v18;
      v15[1] = v16;
      v15[2] = v17;
      uint64_t result = 1;
      *(unsigned char *)(v9 + v8 + 12) = 1;
    }
    else
    {
      uint64_t v11 = (_OWORD *)(v10 + 4412);
      _OWORD *v11 = *(_OWORD *)a3;
      long long v12 = *((_OWORD *)a3 + 1);
      long long v13 = *((_OWORD *)a3 + 2);
      long long v14 = *((_OWORD *)a3 + 4);
      v11[3] = *((_OWORD *)a3 + 3);
      v11[4] = v14;
      v11[1] = v12;
      v11[2] = v13;
      uint64_t result = 1;
      *(unsigned char *)(v9 + v8 + 76) = 1;
    }
  }
  return result;
}

uint64_t API_Set_Ref_Time(int a1, double i, __int16 a3, double a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)p_api;
  if (*(_DWORD *)p_api > 0xBu || ((1 << v5) & 0xD2C) == 0)
  {
    EvCrt_d("API_Set_Ref_Time:  REJECTED.  Incompatible GPS Exe State ", v5);
    return 0;
  }
  uint64_t v10 = *(void *)(p_api + 48);
  int v11 = *(_DWORD *)(v10 + 28);
  int v12 = v11 - a1;
  if (v11 - a1 >= 0) {
    unsigned int v13 = v11 - a1;
  }
  else {
    unsigned int v13 = a1 - v11;
  }
  if (v13 >= 0xDBBA1) {
    EvCrt_v("API_Set_Ref_Time:  WARNING  Large Time latency (%u - %u) = %d", a1, *(_DWORD *)(v10 + 28), v11 - a1);
  }
  if (v11 != a1)
  {
    for (uint64_t i = (double)v12 * 0.001 + i; i >= 604800.0; ++a3)
      uint64_t i = i + -604800.0;
    while (i < 0.0)
    {
      uint64_t i = i + 604800.0;
      --a3;
    }
    a4 = a4 + (double)v12 * 0.00000001;
  }
  unsigned int v14 = 8;
  uint64_t v15 = 6;
  while (v15 != -1)
  {
    double v16 = TOW_stat_Promotion_timeRMSms_Table[v15];
    --v14;
    --v15;
    if (a4 <= v16) {
      goto LABEL_22;
    }
  }
  unsigned int v14 = 0;
LABEL_22:
  int v17 = *(_DWORD *)v10;
  if (*(unsigned char *)(v10 + 16)) {
    BOOL v18 = v17 < 1;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    if (v17)
    {
      if (!*(unsigned char *)(v10 + 16))
      {
        *(unsigned char *)(v10 + 16) = 1;
        *(_WORD *)(v10 + 32) = a3;
        EvLog_v("API_Set_Ref_Time:  Applied.  GPS Wk %d  ", a3);
        double v44 = 0.0;
        *(void *)double v45 = 0;
        API_Get_UTC_Cor(1, &v44);
        double v29 = v44;
        GPS_To_Glon_Time(0, *(__int16 *)(v10 + 32), *(double *)(v10 + 40), v44, (int *)v45, (int *)&v45[4], (double *)(v10 + 88));
        *(_WORD *)(v10 + 84) = *(_WORD *)&v45[4];
        *(_WORD *)(v10 + 82) = *(_WORD *)v45;
        *(unsigned char *)(v10 + 80) = 1;
        *(_DWORD *)(v10 + 76) = *(_DWORD *)v10;
        double v30 = -0.5;
        if (v29 > 0.0) {
          double v30 = 0.5;
        }
        double v31 = v29 + v30;
        if (v31 <= 2147483650.0)
        {
          if (v31 >= -2147483650.0) {
            uint64_t v32 = (int)v31;
          }
          else {
            uint64_t v32 = 0x80000000;
          }
        }
        else
        {
          uint64_t v32 = 0x7FFFFFFFLL;
        }
        GLON_Clear_SV_Ref_State_On_LeapSec_Jump((char *)v32, v10, *(void *)(p_api + 88));
        *(_DWORD *)(v10 + 96) = v32;
        EvLog_v("API_Set_Ref_Time:  Glo Time  %d  %d  %d  %g  %d", *(__int16 *)(v10 + 82), *(__int16 *)(v10 + 84), *(unsigned __int8 *)(v10 + 80), *(double *)(v10 + 88), *(_DWORD *)(v10 + 76));
        return 1;
      }
      int v19 = a3;
      double v20 = 0.0;
      goto LABEL_48;
    }
    uint64_t v22 = p_api;
    double v20 = 0.0;
  }
  else
  {
    double v21 = *(double *)(v10 + 40);
    int v19 = a3;
    double v20 = v21 - i + (double)(604800 * (*(__int16 *)(v10 + 32) - a3));
    if (v14 <= v17 && v20 * v20 <= a4 * (a4 * 25.0)) {
      goto LABEL_48;
    }
    EvLog_v("API_Set_Ref_Time: dT %g,  Sigma %g, (%g-%g), (%d-%d)", v20, a4, v21, i, *(__int16 *)(v10 + 32), a3);
    *(_DWORD *)uint64_t v10 = 0;
    *(_DWORD *)(v10 + 76) = 0;
    uint64_t v22 = p_api;
    *(_DWORD *)(*(void *)(p_api + 120) + 12) = 0;
    uint64_t v23 = *(void *)(v22 + 128);
    *(unsigned char *)(v23 + 136) = 1;
    *(_DWORD *)(v23 + 140) = 5;
  }
  if (*(_DWORD *)v22 == 8 || *(_DWORD *)v22 == 5) {
    *(_DWORD *)uint64_t v22 = 2;
  }
  EvLog_v("API_Set_Ref_Time:  Applied.  %u  %d  %g  Sigma  %g  %d  dT  %g", a1, a3, i, a4, v14, v20);
  if (!v14)
  {
    int v19 = a3;
    EvCrt_v("API_Set_Ref_Time:  WARNING: Input Ref_Sigma too big !");
    int v17 = *(_DWORD *)v10;
LABEL_48:
    EvLog_v("API_Set_Ref_Time:  Not Used.  %u  %d  %g  Sigma  %g  %d  dT  %g", a1, v19, i, a4, v17, v20);
    return 0;
  }
  *(unsigned char *)(v10 + 16) = 1;
  *(_WORD *)(v10 + 32) = a3;
  *(double *)(v10 + 40) = i;
  *(_DWORD *)uint64_t v10 = v14;
  *(void *)(v10 + 48) = 0;
  *(_DWORD *)(v10 + 100) = a1;
  if (v14 - 4 <= 4)
  {
    double v25 = -0.5;
    if (i * 1000.0 > 0.0) {
      double v25 = 0.5;
    }
    double v26 = i * 1000.0 + v25;
    if (v26 <= 2147483650.0)
    {
      if (v26 >= -2147483650.0) {
        int v27 = (int)v26;
      }
      else {
        int v27 = 0x80000000;
      }
    }
    else
    {
      int v27 = 0x7FFFFFFF;
    }
    int v33 = *(_DWORD *)(v10 + 24);
    int v34 = *(_DWORD *)(v10 + 28);
    int v35 = v27 - v33;
    LODWORD(v44) = 0;
    v45[4] = 0;
    if (Core_Load_TTick_Cal(v33, v34, v27 - v33, (unsigned int *)&v44, &v45[4]))
    {
      int v36 = v45[4];
      int v37 = v45[4] >= 0x5Au ? 6 : 7;
      unsigned int v38 = v45[4] >= 0x1Eu ? v37 : 8;
      if (v38 >= v14)
      {
        int v39 = LODWORD(v44);
        Inc_GPS_TOW((double)SLODWORD(v44) * 0.001, (double *)(v10 + 40), (__int16 *)(v10 + 32));
        *(_DWORD *)uint64_t v10 = v38;
        EvLog_v("API_Set_Ref_Time:  Calib.  %d  %g  %d  %d", v39, *(double *)(v10 + 40), v35, v36);
      }
    }
  }
  double v44 = 0.0;
  *(void *)double v45 = 0;
  API_Get_UTC_Cor(1, &v44);
  double v40 = v44;
  GPS_To_Glon_Time(0, *(__int16 *)(v10 + 32), *(double *)(v10 + 40), v44, (int *)v45, (int *)&v45[4], (double *)(v10 + 88));
  *(_WORD *)(v10 + 84) = *(_WORD *)&v45[4];
  *(_WORD *)(v10 + 82) = *(_WORD *)v45;
  *(unsigned char *)(v10 + 80) = 1;
  *(_DWORD *)(v10 + 76) = *(_DWORD *)v10;
  double v41 = -0.5;
  if (v40 > 0.0) {
    double v41 = 0.5;
  }
  double v42 = v40 + v41;
  if (v42 <= 2147483650.0)
  {
    if (v42 >= -2147483650.0) {
      uint64_t v43 = (int)v42;
    }
    else {
      uint64_t v43 = 0x80000000;
    }
  }
  else
  {
    uint64_t v43 = 0x7FFFFFFFLL;
  }
  GLON_Clear_SV_Ref_State_On_LeapSec_Jump((char *)v43, v10, *(void *)(p_api + 88));
  *(_DWORD *)(v10 + 96) = v43;
  EvLog_v("API_Set_Ref_Time:  Glo Time  %d  %d  %d  %g  %d", *(__int16 *)(v10 + 82), *(__int16 *)(v10 + 84), *(unsigned __int8 *)(v10 + 80), *(double *)(v10 + 88), *(_DWORD *)(v10 + 76));
  if (!*(_DWORD *)(v10 + 108))
  {
    *(_DWORD *)(v10 + 128) = *(_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 108) = *(_DWORD *)v10;
    *(void *)(v10 + 120) = *(void *)(v10 + 40);
    if (!*(_WORD *)(v10 + 112))
    {
      if (*(unsigned char *)(v10 + 16)) {
        *(_WORD *)(v10 + 112) = *(_WORD *)(v10 + 32);
      }
    }
  }
  return 1;
}

char *GLON_Clear_SV_Ref_State_On_LeapSec_Jump(char *result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 96);
  if (v3 >= 1 && v3 != result)
  {
    uint64_t v5 = -4608;
    do
    {
      unint64_t v6 = (_OWORD *)(a3 + v5);
      if ((*(_DWORD *)(a3 + v5 + 10928) - 1) <= 1)
      {
        v6[682] = 0uLL;
        v6[681] = 0uLL;
        v6[680] = 0uLL;
        v6[679] = 0uLL;
        v6[678] = 0uLL;
        v6[677] = 0uLL;
        v6[676] = 0uLL;
        v6[675] = 0uLL;
        v6[674] = 0uLL;
        v6[673] = 0uLL;
        v6[672] = 0uLL;
        *(_OWORD *)((char *)v6 + 10927) = 0uLL;
      }
      v5 += 192;
    }
    while (v5);
    return EvLog_v("GLON_Clear_SV_Ref_State_On_LeapSec_Jump: Leap Sec jump [prev_LS: %d curr_LS: %d], Clearing Prev Computed GLON Orbit Ref States", *(_DWORD *)(a2 + 96), result);
  }
  return result;
}

char *EvLog_GPS_IntEph(const char *a1, int a2, uint64_t a3)
{
  return EvLog_v("%s  %2d %d %3d %2d %d %3d %d %3d %3d %4d %5d %5d %4d %5d %5d %5d %5d %5d %5d %5d %5d %5d %8d %11d %10u %10u %11d %11d %11d %8d %2d %2d %5d %5d", a1, a2, *(unsigned __int8 *)(a3 + 8), *(char *)(a3 + 9), *(unsigned __int8 *)(a3 + 10), *(unsigned __int8 *)(a3 + 11), *(unsigned __int8 *)(a3 + 12), *(char *)(a3 + 13), *(char *)(a3 + 14), *(char *)(a3 + 15), *(unsigned __int16 *)(a3 + 16), *(unsigned __int16 *)(a3 + 18), *(unsigned __int16 *)(a3 + 20), *(unsigned __int16 *)(a3 + 22), *(__int16 *)(a3 + 24), *(__int16 *)(a3 + 26), *(__int16 *)(a3 + 28),
           *(__int16 *)(a3 + 30),
           *(__int16 *)(a3 + 32),
           *(__int16 *)(a3 + 34),
           *(__int16 *)(a3 + 36),
           *(__int16 *)(a3 + 38),
           *(__int16 *)(a3 + 40),
           *(_DWORD *)(a3 + 44),
           *(_DWORD *)(a3 + 48),
           *(_DWORD *)(a3 + 52),
           *(_DWORD *)(a3 + 56),
           *(_DWORD *)(a3 + 60),
           *(_DWORD *)(a3 + 64),
           *(_DWORD *)(a3 + 68),
           *(_DWORD *)(a3 + 72),
           *(unsigned __int8 *)(a3 + 76),
           *(unsigned __int8 *)(a3 + 77),
           *(__int16 *)(a3 + 78),
           *(__int16 *)(a3 + 80));
}

uint64_t Is_GPS_IntEph_Valid(uint64_t a1, int a2, uint64_t a3)
{
  if ((a2 + 53) >= 0xF6u) {
    int v3 = 5;
  }
  else {
    int v3 = (a2 - 1) < 0x20;
  }
  if (!v3)
  {
    EvCrt_v("%s FAILED: Sat_ID = %d, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 8) >= 4u)
  {
    EvCrt_v("%s FAILED: CodeOnL2 = %d >3, Out of range!");
    return 0;
  }
  if ((*(unsigned char *)(a3 + 9) - 16) <= 0xDFu)
  {
    EvCrt_v("%s FAILED: URA = %d <-16 or >15, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 10) >= 0x40u)
  {
    EvCrt_v("%s FAILED: SVHealth = %d >63, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 11) >= 2u)
  {
    EvCrt_v("%s FAILED: FitIntFlag = %d >1, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 12) >= 0x20u)
  {
    EvCrt_v("%s FAILED: AODA = %d >31, Out of range!");
    return 0;
  }
  if (*(char *)(a3 + 13) >= 2)
  {
    EvCrt_v("%s FAILED: L2Pflag = %d <0 or >1, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 16) >= 0xBDCu)
  {
    EvCrt_v("%s FAILED: Weeuint64_t k = %d >=3036, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 22) >= 0x400u)
  {
    EvCrt_v("%s FAILED: IODC = %d >1023, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a3 + 28) - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("%s FAILED: IDot = %d <-2^13 or >=2^13, Out of range!");
    return 0;
  }
  if ((*(_DWORD *)(a3 + 44) - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("%s FAILED: af0 = %d <-2^21 or >=2^21, Out of range!");
    return 0;
  }
  int v4 = *(_DWORD *)(a3 + 72);
  if ((v4 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("%s FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  double v5 = 0.0;
  if ((a2 + 53) >= 0xF6u) {
    double v5 = 0.000000314159265;
  }
  double v6 = (double)v4 * 3.57157734e-13;
  if (v6 < -0.00000198862815)
  {
    EvCrt_v("%s FAILED: OmegaDot = %e < %e rad/s, Unrealistic value!");
    return 0;
  }
  if (v6 > v5)
  {
    EvCrt_v("%s FAILED: OmegaDot = %e > %e rad/s, Unrealistic value!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 20) >= 0x93A8u)
  {
    EvCrt_v("%s FAILED: toe = %d >=37800, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a3 + 18) >= 0x93A8u)
  {
    EvCrt_v("%s FAILED: toc = %d >37800, Out of range!");
    return 0;
  }
  if (v3 == 5) {
    double v7 = 0.1;
  }
  else {
    double v7 = 0.03;
  }
  LODWORD(v5) = *(_DWORD *)(a3 + 52);
  double v8 = (double)*(unint64_t *)&v5 * 1.16415322e-10;
  if (v8 < 0.0)
  {
    EvCrt_v("%s FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v7)
  {
    EvCrt_v("%s FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  if (v3 == 5) {
    double v9 = 7000.0;
  }
  else {
    double v9 = 5800.0;
  }
  LODWORD(v8) = *(_DWORD *)(a3 + 56);
  double v10 = (double)*(unint64_t *)&v8 * 0.00000190734863;
  if (v10 < 4800.0)
  {
    EvCrt_v("%s FAILED: APowerHalf = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v9)
  {
    EvCrt_v("%s FAILED: APowerHalf = %g > %g, Unrealistic value!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 76) >= 2u)
  {
    EvCrt_v("%s FAILED: L5_Health = %d >1, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a3 + 77) >= 2u)
  {
    EvCrt_v("%s FAILED: Integrity = %d >1, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a3 + 78) - 4096) >> 13) <= 6u)
  {
    EvCrt_v("%s FAILED: ISC_L1_CA = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a3 + 80) - 4096) >> 13) <= 6u)
  {
    EvCrt_v("%s FAILED: ISC_L5_Q5 = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  return 1;
}

char *EvLog_ABDS_CNAV_Eph_El(unsigned __int8 *a1)
{
  uint64_t v4 = a1[1];
  uint64_t v2 = (char)a1[131];
  uint64_t v3 = a1[132];
  return EvLog_v("GN_ABDS_Set_CNAV_Eph_El: %2u %2u %1u %1u %6u  %4u %4u %4u %4u  %9d %8d  %6d %8d  %11D %11U %11D %11D %11D  %7d %6d  %6d %6d %8d %8d %8d %8d   %9d %8d %5d %5u  %2u %1u %1u %2u  %5d %5d %5d %5d  %1u %1u %1u %1u %1u %1u  %1d  %4d  %1u", *a1, v4, a1[2], a1[3], *((unsigned int *)a1 + 1), *((unsigned __int16 *)a1 + 4), *((unsigned __int16 *)a1 + 5), *((unsigned __int16 *)a1 + 6), *((unsigned __int16 *)a1 + 7), *((unsigned int *)a1 + 4), *((unsigned int *)a1 + 5), *((unsigned int *)a1 + 6), *((unsigned int *)a1 + 7), *((void *)a1 + 4), *((void *)a1 + 5), *((void *)a1 + 6), *((void *)a1 + 7),
           *((void *)a1 + 8),
           *((unsigned int *)a1 + 18),
           *((__int16 *)a1 + 38),
           *((__int16 *)a1 + 39),
           *((__int16 *)a1 + 40),
           *((unsigned int *)a1 + 21),
           *((unsigned int *)a1 + 22),
           *((unsigned int *)a1 + 23),
           *((unsigned int *)a1 + 24),
           *((unsigned int *)a1 + 25),
           *((unsigned int *)a1 + 26),
           *((__int16 *)a1 + 54),
           *((unsigned __int16 *)a1 + 55),
           a1[112],
           a1[113],
           a1[114],
           a1[115],
           *((__int16 *)a1 + 58),
           *((__int16 *)a1 + 59),
           *((__int16 *)a1 + 60),
           *((__int16 *)a1 + 61),
           a1[124],
           a1[125],
           a1[126],
           a1[127],
           a1[128],
           a1[129],
           (char)a1[130],
           v2,
           v3);
}

char *EvLog_ANVIC_Eph_El(unsigned __int8 *a1)
{
  return EvLog_v("GN_ANVIC_Set_Eph_El: %2u %1u %1u %1u %3u %3d  %4u %5d %5d %8d %6d %4d  %1d  %6d  %5d %10u %10u %11d %11d %11d %11d %6d %8d  %6d %6d %6d %6d %6d %6d  %1u", *a1, a1[1], a1[2], a1[3], a1[4], (char)a1[5], *((unsigned __int16 *)a1 + 3), *((unsigned __int16 *)a1 + 4), *((unsigned __int16 *)a1 + 5), *((_DWORD *)a1 + 3), *((__int16 *)a1 + 8), (char)a1[18], a1[19], *((__int16 *)a1 + 10), *((__int16 *)a1 + 11), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7),
           *((_DWORD *)a1 + 8),
           *((_DWORD *)a1 + 9),
           *((_DWORD *)a1 + 10),
           *((_DWORD *)a1 + 11),
           *((_DWORD *)a1 + 12),
           *((_DWORD *)a1 + 13),
           *((__int16 *)a1 + 28),
           *((__int16 *)a1 + 29),
           *((__int16 *)a1 + 30),
           *((__int16 *)a1 + 31),
           *((__int16 *)a1 + 32),
           *((__int16 *)a1 + 33),
           a1[68]);
}

BOOL Is_BDS_IntEph_Real(uint64_t a1)
{
  return *(_DWORD *)(a1 + 36)
      || *(_DWORD *)(a1 + 88)
      || *(_WORD *)(a1 + 92)
      || *(_DWORD *)(a1 + 40)
      || *(_DWORD *)(a1 + 44)
      || *(_DWORD *)(a1 + 112)
      || *(_DWORD *)(a1 + 108)
      || *(_DWORD *)(a1 + 104)
      || *(_DWORD *)(a1 + 100)
      || *(_WORD *)(a1 + 96)
      || *(_WORD *)(a1 + 94)
      || *(_WORD *)(a1 + 124) != 0;
}

void *GNSS_HL_System_Start_Up(uint64_t a1)
{
  int v1 = (void *)MEMORY[0x270FA5388](a1);
  int v3 = v2;
  uint64_t v4 = (uint64_t)v1;
  uint64_t v157 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int8 *)(v1[7] + 62170);
  if (v2)
  {
    uint64_t v6 = v1[9];
    int v7 = *(_DWORD *)(v1[14] + 436);
    int v8 = *(_DWORD *)(v6 + 16);
    char v9 = *(unsigned char *)(v6 + 21);
    __int16 v10 = *(_WORD *)(v6 + 1726);
    char v11 = *(unsigned char *)(v6 + 256);
    uint64_t v12 = *(void *)(v6 + 208);
    long long v107 = *(_OWORD *)(v6 + 216);
    uint64_t v13 = *(void *)(v6 + 232);
    uint64_t v14 = *(void *)(v6 + 240);
    __int16 v106 = *(_WORD *)(v6 + 248);
    long long v104 = *(_OWORD *)(v6 + 96);
    long long v105 = *(_OWORD *)(v6 + 80);
    long long v102 = *(_OWORD *)(v6 + 128);
    long long v103 = *(_OWORD *)(v6 + 112);
    long long v100 = *(_OWORD *)(v6 + 160);
    long long v101 = *(_OWORD *)(v6 + 144);
    long long v99 = *(_OWORD *)(v6 + 176);
    uint64_t v16 = *(void *)(v6 + 192);
    uint64_t v15 = *(void *)(v6 + 200);
    long long v152 = xmmword_26AA14D98;
    long long v153 = unk_26AA14DA8;
    long long v154 = xmmword_26AA14DB8;
    long long v155 = unk_26AA14DC8;
    long long v148 = xmmword_26AA14D58;
    long long v149 = unk_26AA14D68;
    long long v150 = xmmword_26AA14D78;
    long long v151 = unk_26AA14D88;
    long long v17 = *(_OWORD *)(v6 + 433);
    __src[10] = *(_OWORD *)(v6 + 417);
    __src[11] = v17;
    __src[12] = *(_OWORD *)(v6 + 449);
    *(_OWORD *)((char *)&__src[12] + 10) = *(_OWORD *)(v6 + 459);
    long long v18 = *(_OWORD *)(v6 + 369);
    __src[6] = *(_OWORD *)(v6 + 353);
    __src[7] = v18;
    long long v19 = *(_OWORD *)(v6 + 401);
    __src[8] = *(_OWORD *)(v6 + 385);
    __src[9] = v19;
    long long v20 = *(_OWORD *)(v6 + 305);
    __src[2] = *(_OWORD *)(v6 + 289);
    __src[3] = v20;
    long long v21 = *(_OWORD *)(v6 + 337);
    _OWORD __src[4] = *(_OWORD *)(v6 + 321);
    __src[5] = v21;
    long long v22 = *(_OWORD *)(v6 + 273);
    __src[0] = *(_OWORD *)(v6 + 257);
    __src[1] = v22;
    long long v23 = *(_OWORD *)(v6 + 712);
    long long v145 = *(_OWORD *)(v6 + 696);
    long long v146 = v23;
    v147[0] = *(_OWORD *)(v6 + 728);
    *(_OWORD *)((char *)v147 + 10) = *(_OWORD *)(v6 + 738);
    long long v24 = *(_OWORD *)(v6 + 648);
    long long v141 = *(_OWORD *)(v6 + 632);
    long long v142 = v24;
    long long v25 = *(_OWORD *)(v6 + 680);
    long long v143 = *(_OWORD *)(v6 + 664);
    long long v144 = v25;
    long long v26 = *(_OWORD *)(v6 + 584);
    long long v137 = *(_OWORD *)(v6 + 568);
    long long v138 = v26;
    long long v27 = *(_OWORD *)(v6 + 616);
    long long v139 = *(_OWORD *)(v6 + 600);
    long long v140 = v27;
    long long v28 = *(_OWORD *)(v6 + 552);
    long long v135 = *(_OWORD *)(v6 + 536);
    long long v136 = v28;
    long long v29 = *(_OWORD *)(v6 + 992);
    long long v132 = *(_OWORD *)(v6 + 976);
    long long v133 = v29;
    v134[0] = *(_OWORD *)(v6 + 1008);
    *(_OWORD *)((char *)v134 + 10) = *(_OWORD *)(v6 + 1018);
    long long v30 = *(_OWORD *)(v6 + 928);
    long long v128 = *(_OWORD *)(v6 + 912);
    long long v129 = v30;
    long long v31 = *(_OWORD *)(v6 + 960);
    long long v130 = *(_OWORD *)(v6 + 944);
    long long v131 = v31;
    long long v32 = *(_OWORD *)(v6 + 864);
    long long v124 = *(_OWORD *)(v6 + 848);
    long long v125 = v32;
    long long v33 = *(_OWORD *)(v6 + 896);
    long long v126 = *(_OWORD *)(v6 + 880);
    long long v127 = v33;
    long long v34 = *(_OWORD *)(v6 + 832);
    long long v122 = *(_OWORD *)(v6 + 816);
    long long v123 = v34;
    long long v35 = *(_OWORD *)(v6 + 1272);
    long long v119 = *(_OWORD *)(v6 + 1256);
    long long v120 = v35;
    v121[0] = *(_OWORD *)(v6 + 1288);
    *(_OWORD *)((char *)v121 + 10) = *(_OWORD *)(v6 + 1298);
    long long v36 = *(_OWORD *)(v6 + 1208);
    long long v115 = *(_OWORD *)(v6 + 1192);
    long long v116 = v36;
    long long v37 = *(_OWORD *)(v6 + 1240);
    long long v117 = *(_OWORD *)(v6 + 1224);
    long long v118 = v37;
    long long v38 = *(_OWORD *)(v6 + 1144);
    long long v111 = *(_OWORD *)(v6 + 1128);
    long long v112 = v38;
    long long v39 = *(_OWORD *)(v6 + 1176);
    long long v113 = *(_OWORD *)(v6 + 1160);
    long long v114 = v39;
    long long v40 = *(_OWORD *)(v6 + 1112);
    long long v109 = *(_OWORD *)(v6 + 1096);
    long long v110 = v40;
    long long v41 = *(_OWORD *)(qword_26AA2DEE0 + 16);
    v156[0] = *(_OWORD *)qword_26AA2DEE0;
    v156[1] = v41;
    long long v42 = *(_OWORD *)(qword_26AA2DEE0 + 80);
    long long v44 = *(_OWORD *)(qword_26AA2DEE0 + 32);
    long long v43 = *(_OWORD *)(qword_26AA2DEE0 + 48);
    v156[4] = *(_OWORD *)(qword_26AA2DEE0 + 64);
    v156[5] = v42;
    v156[2] = v44;
    v156[3] = v43;
    EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (uint64_t)v156);
    GNSS_HL_Data_Bases_Clear(v4);
    GNSS_HL_Data_Bases_Init((void *)v4);
    GNSS_HL_Data_Bases_Init_NV(v4);
    uint64_t v45 = *(void *)(v4 + 72);
    *(_DWORD *)(v45 + 1764) = v7;
    *(_DWORD *)(v45 + 16) = v8;
    *(unsigned char *)(v45 + 21) = v9;
    *(_WORD *)(v45 + 1726) = v10;
    *(unsigned char *)(v45 + 256) = v11;
    *(void *)(v6 + 208) = v12;
    *(_OWORD *)(v6 + 216) = v107;
    *(void *)(v6 + 232) = v13;
    *(void *)(v6 + 240) = v14;
    *(_WORD *)(v6 + 248) = v106;
    *(_OWORD *)(v6 + 80) = v105;
    *(_OWORD *)(v6 + 96) = v104;
    *(_OWORD *)(v6 + 112) = v103;
    *(_OWORD *)(v6 + 128) = v102;
    *(_OWORD *)(v6 + 144) = v101;
    *(_OWORD *)(v6 + 160) = v100;
    *(_OWORD *)(v6 + 176) = v99;
    *(void *)(v6 + 192) = v16;
    *(void *)(v6 + 200) = v15;
    *(unsigned char *)(*(void *)(v4 + 72) + 20) = 0;
    xmmword_26AA14D78 = v150;
    unk_26AA14D88 = v151;
    xmmword_26AA14D58 = v148;
    unk_26AA14D68 = v149;
    xmmword_26AA14D98 = v152;
    unk_26AA14DA8 = v153;
    xmmword_26AA14DB8 = v154;
    unk_26AA14DC8 = v155;
    uint64_t v46 = (_OWORD *)(*(void *)(v4 + 72) + 257);
    long long v47 = __src[1];
    _OWORD *v46 = __src[0];
    v46[1] = v47;
    long long v48 = __src[5];
    v46[4] = __src[4];
    v46[5] = v48;
    long long v49 = __src[3];
    v46[2] = __src[2];
    v46[3] = v49;
    long long v50 = __src[9];
    v46[8] = __src[8];
    v46[9] = v50;
    long long v51 = __src[7];
    v46[6] = __src[6];
    v46[7] = v51;
    *(_OWORD *)((char *)v46 + 202) = *(_OWORD *)((char *)&__src[12] + 10);
    long long v52 = __src[12];
    long long v53 = __src[10];
    v46[11] = __src[11];
    v46[12] = v52;
    v46[10] = v53;
    BOOL v54 = (_OWORD *)(*(void *)(v4 + 72) + 536);
    long long v55 = v136;
    _OWORD *v54 = v135;
    v54[1] = v55;
    long long v56 = v140;
    v54[4] = v139;
    v54[5] = v56;
    long long v57 = v138;
    v54[2] = v137;
    v54[3] = v57;
    long long v58 = v144;
    v54[8] = v143;
    v54[9] = v58;
    long long v59 = v142;
    v54[6] = v141;
    v54[7] = v59;
    *(_OWORD *)((char *)v54 + 202) = *(_OWORD *)((char *)v147 + 10);
    long long v60 = v147[0];
    long long v61 = v145;
    v54[11] = v146;
    v54[12] = v60;
    v54[10] = v61;
    unint64_t v62 = *(_OWORD **)(v4 + 72);
    long long v63 = v123;
    v62[51] = v122;
    v62[52] = v63;
    long long v64 = v127;
    v62[55] = v126;
    v62[56] = v64;
    long long v65 = v125;
    v62[53] = v124;
    v62[54] = v65;
    long long v66 = v131;
    v62[59] = v130;
    v62[60] = v66;
    long long v67 = v129;
    v62[57] = v128;
    v62[58] = v67;
    long long v68 = v134[0];
    long long v69 = v132;
    v62[62] = v133;
    v62[63] = v68;
    v62[61] = v69;
    *(_OWORD *)((char *)v62 + 1018) = *(_OWORD *)((char *)v134 + 10);
    unint64_t v70 = (_OWORD *)(*(void *)(v4 + 72) + 1096);
    long long v71 = v110;
    *unint64_t v70 = v109;
    v70[1] = v71;
    long long v72 = v114;
    v70[4] = v113;
    v70[5] = v72;
    long long v73 = v112;
    v70[2] = v111;
    v70[3] = v73;
    long long v74 = v118;
    v70[8] = v117;
    v70[9] = v74;
    long long v75 = v116;
    v70[6] = v115;
    v70[7] = v75;
    *(_OWORD *)((char *)v70 + 202) = *(_OWORD *)((char *)v121 + 10);
    long long v76 = v121[0];
    long long v77 = v119;
    v70[11] = v120;
    v70[12] = v76;
    v70[10] = v77;
    GN_GPS_Set_Config((uint64_t)v156);
  }
  else
  {
    GNSS_HL_Data_Bases_Init_NV((uint64_t)v1);
    GNSS_HL_Data_Bases_TimeSynch((void *)v4, v78, v79);
  }
  if (v5) {
    *(unsigned char *)(*(void *)(v4 + 56) + 62170) = 1;
  }
  int v80 = *(int **)(v4 + 8);
  uint64_t v81 = *(void *)(v4 + 16);
  int v82 = *v80;
  *(_DWORD *)uint64_t v81 = *v80;
  *(_DWORD *)(v81 + 4) = v80[4];
  *(void *)(v81 + 8) = *((void *)v80 + 3);
  uint64_t v84 = *(void *)(v4 + 72);
  uint64_t v83 = *(void *)(v4 + 80);
  int v85 = *(_DWORD *)(v84 + 1668);
  int v86 = v85 + v82;
  if (!v85) {
    int v86 = 0;
  }
  *(_DWORD *)(v84 + 1720) = v86;
  unsigned int v87 = *(unsigned __int16 *)(v84 + 248);
  if (*(_WORD *)(v84 + 248))
  {
    *(void *)(v84 + 1704) = 0;
    *(double *)(v84 + 1712) = (double)v87 * 0.000000001;
    *(void *)(v83 + 920) = 0x4163125300000000;
    *(void *)(v83 + 184) = 0;
    *(unsigned char *)(p_NA + 6) = 0;
  }
  SV_Data_Decode_Init(*(void *)(v4 + 136));
  SV_Data_Decode_Update_Wrapper(v4);
  GPS_State_Update_Init(*(void *)(v4 + 144), *(void *)(v4 + 184), *(void *)(v4 + 48), *(void **)(v4 + 56), *(void *)(v4 + 72), *(void *)(v4 + 80), *(void *)(v4 + 88));
  GLON_State_Update_Init(*(char **)(v4 + 144), *(void *)(v4 + 48), *(int **)(v4 + 56), *(void *)(v4 + 88));
  bzero(*(void **)(v4 + 120), 0xC70uLL);
  SV_Gen_Meas_Update_Wrapper(v4);
  Nav_Kalman_Update_Init(*(void *)(v4 + 128));
  Nav_Kalman_Update_Wrapper(v4);
  if (v3)
  {
    uint64_t v88 = *(void *)(v4 + 104);
    *(void *)(v88 + 248) = *(void *)(v88 + 240);
    *(unsigned char *)(v88 + 308) = 0;
    uint64_t v89 = *(void *)(v4 + 104);
    *(void *)(v89 + 320) = *(void *)(v89 + 312);
    *(unsigned char *)(v89 + 380) = 0;
    uint64_t v90 = *(void *)(v4 + 104);
    *(void *)(v90 + 392) = *(void *)(v90 + 384);
    *(unsigned char *)(v90 + 452) = 0;
  }
  uint64_t v91 = *(void *)(v4 + 152);
  *(unsigned char *)(v91 + 48) = 0;
  *(_OWORD *)(v91 + 16) = 0u;
  *(_OWORD *)(v91 + 32) = 0u;
  *(_OWORD *)uint64_t v91 = 0u;
  *(_WORD *)(v91 + 2) = -1;
  *(unsigned char *)uint64_t v91 = 1;
  Pre_Positioning_Update_Wrapper(v4);
  bzero(__src, 0x6E50uLL);
  uint64_t v92 = 568;
  do
  {
    unsigned int v93 = (char *)__src + v92;
    *(void *)unsigned int v93 = 0;
    *((_WORD *)v93 + 4) = 0;
    *(void *)(v93 + 12) = 0;
    *((void *)v93 + 6) = 0;
    *((void *)v93 + 3) = 0;
    *((void *)v93 + 4) = 0;
    v92 += 56;
    *(void *)(v93 + 38) = 0;
  }
  while (v93 + 56 != (char *)&__src[483] + 8);
  uint64_t v94 = -4608;
  do
  {
    int v95 = (char *)&__src[771] + v94 + 8;
    v95[32] = 0;
    *(_OWORD *)int v95 = 0uLL;
    *((_OWORD *)v95 + 1) = 0uLL;
    v94 += 36;
  }
  while (v94);
  uint64_t v96 = -15872;
  do
  {
    int v97 = (_OWORD *)((char *)&__src[1763] + v96 + 8);
    *(_OWORD *)((char *)v97 + 105) = 0uLL;
    v97[5] = 0uLL;
    v97[6] = 0uLL;
    v97[3] = 0uLL;
    v97[4] = 0uLL;
    v97[1] = 0uLL;
    v97[2] = 0uLL;
    *int v97 = 0uLL;
    v96 += 124;
  }
  while (v96);
  *(void *)((char *)&__src[1764] + 12) = 0;
  DWORD1(__src[1765]) = 0;
  *((void *)&__src[1763] + 1) = 0;
  *(void *)&__src[1764] = 0;
  WORD4(__src[1764]) = 0;
  uint64_t result = memcpy(*(void **)(v4 + 112), __src, 0x6E58uLL);
  *(void *)(*(void *)(v4 + 112) + 384) = *(void *)(v4 + 112);
  *(_DWORD *)uint64_t v4 = 11;
  return result;
}

const void **GNSS_HL_System_Re_Start(uint64_t a1)
{
  v55[12] = *(double *)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  int v5 = *(int **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  *(_DWORD *)(v6 + 1772) = 0;
  *(_DWORD *)uint64_t v3 = *(_DWORD *)v2;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(v2 + 16);
  *(void *)(v3 + 8) = *(void *)(v2 + 24);
  uint64_t v8 = -4608;
  do
  {
    uint64_t v9 = v3 + v8 + 11816;
    *(unsigned char *)(v9 + 32) = 0;
    *(_OWORD *)uint64_t v9 = 0uLL;
    *(_OWORD *)(v9 + 16) = 0uLL;
    v8 += 36;
  }
  while (v8);
  bzero(v4, 0x3E00uLL);
  int v10 = *(_DWORD *)(v6 + 1668);
  if (v10) {
    v10 += **(_DWORD **)(a1 + 8);
  }
  *(_DWORD *)(v6 + 1720) = v10;
  *(_WORD *)(v7 + 19) = 0;
  double v11 = 0.0;
  if (*(_DWORD *)a1 == 9)
  {
    if (*(_DWORD *)(v2 + 12)
      || (int v14 = *(_DWORD *)v2 - v5[6], v15 = *(_DWORD *)(v2 + 16) - v5[7], v14 <= 255000) && v15 <= 255000
      || (*(_DWORD *)a1 = 6,
          EvCrt_v("GNSS_HL_System_Re_Start: Deprecate SLEEP_RESTART to COMA_RESTART since Idle interval longer than %d s, Idle TTicks %d ms, Idle OS_Time %d ms", 255, v14, v15), *(_DWORD *)a1 == 9))
    {
      if (*v5 > 10
        || (*(_DWORD *)a1 = 6,
            EvCrt_v("GNSS_HL_System_Re_Start: Deprecate SLEEP_RESTART to COMA_RESTART since SUB_MS Time not achieved by the end of the previous session"), *(_DWORD *)a1 == 9))
      {
        unsigned int v16 = *(_DWORD *)(v6 + 252);
        if (v16 >= 0x191)
        {
          *(_DWORD *)a1 = 6;
          EvCrt_v("GNSS_HL_System_Re_Start: Deprecate SLEEP_RESTART to COMA_RESTART since ME Wakeup TTick Unc = %d > 400 us", v16);
        }
      }
    }
  }
  else if (*(_DWORD *)a1 == 6)
  {
    unsigned int v12 = *(unsigned __int16 *)(v6 + 248);
    if (*(_WORD *)(v6 + 248))
    {
      *(void *)(v6 + 1704) = 0;
      double v13 = (double)v12 * 0.000000001;
      *(double *)(v6 + 1712) = v13;
      *(void *)(v7 + 920) = 0x4163125300000000;
      *(void *)(v7 + 184) = 0;
      *(unsigned char *)(p_NA + 6) = 0;
      double v11 = v13 * 299792458.0 / 3.0 * (v13 * 299792458.0 / 3.0);
      goto LABEL_24;
    }
    unsigned int v17 = *(_DWORD *)(v2 + 12);
    if (v17 < 0x493E1) {
      goto LABEL_24;
    }
    double v18 = *(double *)(v6 + 1712);
    if (v18 < 0.000000175)
    {
      uint64_t v19 = 0x3E877CF447651960;
LABEL_23:
      *(void *)(v6 + 1712) = v19;
      goto LABEL_24;
    }
    if (v17 >= 0xDBBA1 && v18 < 0.0000005)
    {
      uint64_t v19 = 0x3EA0C6F7A0B5ED8ELL;
      goto LABEL_23;
    }
  }
LABEL_24:
  if (g_Test_Mode_Cfg == 1 && *v5 >= 10 && v5[19] >= 10)
  {
    signed int v20 = **(_DWORD **)(a1 + 8) % 0x29u - 20;
    Inc_GPS_TOW((double)v20 * 0.001, (double *)v5 + 5, (__int16 *)v5 + 16);
    Inc_Glon_TOD((double)v20 * 0.001, (double *)v5 + 11, (__int16 *)v5 + 42, (unsigned __int16 *)v5 + 41);
    *(void *)(v7 + 48) = *((void *)v5 + 5);
    *(_WORD *)(v7 + 62) = *((_WORD *)v5 + 16);
    *(void *)(v7 + 216) = *((void *)v5 + 11);
    *(_DWORD *)(v7 + 210) = *(int *)((char *)v5 + 82);
    EvLog_v("TestMode 1:  Error added to Time on WakeUp of %d ms", v20);
    DbgLog_v(1, "TestMode 1:  Error added to Time on WakeUp of %d ms", v20);
  }
  if (*(_DWORD *)a1 == 6)
  {
    v55[0] = 0.0;
    __int16 v54 = 0;
    int v53 = 0;
    double v21 = *(double *)(v7 + 872);
    if (v21 >= 9999000.0) {
      double v22 = (double)TOW_stat_ms[*v5];
    }
    else {
      double v22 = v21 * 0.0000100069229 + 1.0;
    }
    unsigned int v23 = *(_DWORD *)(v6 + 252);
    if (v23)
    {
      double v24 = fmax((double)v23 * 0.001, 1.0);
    }
    else
    {
      LODWORD(v21) = *(_DWORD *)(v2 + 12);
      double v24 = (double)*(unint64_t *)&v21 * 0.00006;
    }
    if (v22 + v24 <= 600000.0)
    {
      for (int i = 10; i != -1; --i)
      {
        if (TOW_stat_ms[i] >= (int)(v22 + v24)) {
          break;
        }
      }
    }
    else
    {
      int i = 0;
    }
    uint64_t v26 = v5[19];
    unsigned int j = i;
    if (v26 != *v5)
    {
      double v28 = v24 + (double)(TOW_stat_ms[v26] + 1);
      if (v28 <= 600000.0)
      {
        for (unsigned int j = 10; j != -1; --j)
        {
          if (TOW_stat_ms[j] >= (int)v28) {
            break;
          }
        }
      }
      else
      {
        unsigned int j = 0;
      }
    }
    *(_DWORD *)(v7 + 56) = i;
    *(_DWORD *)(v7 + 204) = j;
    *((unsigned char *)v5 + 4) = 0;
    *int v5 = i;
    v5[19] = j;
    if (!Core_Load_ApxTime(*(unsigned int *)(v3 + 4), &v54, v55, &v53)) {
      goto LABEL_53;
    }
    __int16 v29 = v54;
    if (v54 < 1025) {
      goto LABEL_53;
    }
    if (v53 <= i)
    {
      if (*((unsigned char *)v5 + 16)) {
        goto LABEL_53;
      }
      *((unsigned char *)v5 + 16) = 1;
      *((_WORD *)v5 + 16) = v29;
    }
    else
    {
      *int v5 = v53;
      *((unsigned char *)v5 + 4) = 0;
      *((unsigned char *)v5 + 16) = 1;
      *((void *)v5 + 3) = *(void *)v3;
      *((void *)v5 + 1) = *(void *)(v3 + 8);
      *((_WORD *)v5 + 16) = v29;
      *((double *)v5 + 5) = v55[0];
      *((void *)v5 + 6) = 0;
    }
    *(void *)long long v51 = 0;
    *(void *)long long v52 = 0;
    API_Get_UTC_Cor(1, (double *)v51);
    GPS_To_Glon_Time(0, *((__int16 *)v5 + 16), *((double *)v5 + 5), *(double *)v51, v52, &v52[1], (double *)v5 + 11);
    *((_WORD *)v5 + 42) = v52[1];
    *((_WORD *)v5 + 41) = v52[0];
    *((unsigned char *)v5 + 80) = 1;
    v5[19] = *v5;
LABEL_53:
    uint64_t v30 = *(void *)(a1 + 120);
    if (*v5 < 10 || *(int *)(v30 + 12) < 4) {
      *(_DWORD *)(v30 + 12) = 0;
    }
    else {
      *(_DWORD *)(v30 + 12) = 3;
    }
    *(unsigned char *)(v30 + 4) = 0;
  }
  SV_Gen_Meas_Update_Wrapper(a1);
  SV_Data_Decode_Update_Wrapper(a1);
  SV_State_Update_Wrapper(a1);
  uint64_t v31 = *(void *)(a1 + 128);
  v51[0] = 0;
  *(unsigned char *)(v31 + 30) = 0;
  *(_OWORD *)(v31 + 15592) = 0u;
  ++*(_DWORD *)(v31 + 27120);
  ++*(_DWORD *)(v31 + 27132);
  int v32 = *(_DWORD *)(v7 + 36);
  int v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v32;
  if (v33 >= 1)
  {
    int v34 = v33 / *(_DWORD *)(v6 + 1660);
    *(_DWORD *)(v31 + 27120) += v34;
    *(_DWORD *)(v31 + 27132) += v34;
  }
  if (*(_DWORD *)a1 == 9
    && (*(_DWORD *)(v31 + 20) - 4) <= 4
    && *(_DWORD *)(v31 + 27116)
    && *(_DWORD *)(v31 + 27128))
  {
    long long v35 = (double *)*(unsigned __int16 *)(v31 + 18);
  }
  else
  {
    long long v35 = 0;
  }
  int v36 = *(_DWORD *)(v6 + 1660);
  if (v36 * *(_DWORD *)(v31 + 27120) > (1000 * v35) && *(double *)(v7 + 360) > 0.0)
  {
    NK_Decay_Speed(v35, v36, v7 + 32, v31);
    *(void *)(v31 + 27344) = 0;
    *(_DWORD *)(v31 + 27352) = 0;
    *(void *)(v31 + 27328) = 0;
    *(_DWORD *)(v31 + 27336) = 0;
  }
  *(void *)(v31 + 27112) = 0;
  *(_DWORD *)(v31 + 27120) = 0;
  *(void *)(v31 + 152) = 0;
  *(_OWORD *)(v31 + 27128) = 0u;
  *(_DWORD *)(v31 + 160) = -1;
  *(_DWORD *)(v31 + 276) = 0;
  *(unsigned char *)(v31 + 68176) = 0;
  *(_DWORD *)(v31 + 68180) = 0;
  *(unsigned char *)(v31 + 20120) = 0;
  *(unsigned char *)(v31 + 20136) = 0;
  *(_OWORD *)(v31 + 25792) = 0u;
  *(_OWORD *)(v31 + 25808) = 0u;
  *(_OWORD *)(v31 + 25824) = 0u;
  *(_OWORD *)(v31 + 25840) = 0u;
  *(_OWORD *)(v31 + 25856) = 0u;
  *(_OWORD *)(v31 + 25872) = 0u;
  *(_OWORD *)(v31 + 25888) = 0u;
  *(_OWORD *)(v31 + 25904) = 0u;
  *(_OWORD *)(v31 + 16104) = 0u;
  *(_OWORD *)(v31 + 16120) = 0u;
  *(_OWORD *)(v31 + 16072) = 0u;
  *(_OWORD *)(v31 + 16088) = 0u;
  *(_OWORD *)(v31 + 16040) = 0u;
  *(_OWORD *)(v31 + 16056) = 0u;
  *(_OWORD *)(v31 + 16008) = 0u;
  *(_OWORD *)(v31 + 16024) = 0u;
  *(_OWORD *)(v31 + 15976) = 0u;
  *(_OWORD *)(v31 + 15992) = 0u;
  *(_OWORD *)(v31 + 15944) = 0u;
  *(_OWORD *)(v31 + 15960) = 0u;
  *(_OWORD *)(v31 + 15912) = 0u;
  *(_OWORD *)(v31 + 15928) = 0u;
  *(_OWORD *)(v31 + 15880) = 0u;
  *(_OWORD *)(v31 + 15896) = 0u;
  *(_OWORD *)(v31 + 15848) = 0u;
  *(_OWORD *)(v31 + 15864) = 0u;
  *(_OWORD *)(v31 + 15816) = 0u;
  *(_OWORD *)(v31 + 15832) = 0u;
  *(_OWORD *)(v31 + 15784) = 0u;
  *(_OWORD *)(v31 + 15800) = 0u;
  *(_OWORD *)(v31 + 15752) = 0u;
  *(_OWORD *)(v31 + 15768) = 0u;
  *(_OWORD *)(v31 + 15720) = 0u;
  *(_OWORD *)(v31 + 15736) = 0u;
  *(_OWORD *)(v31 + 15688) = 0u;
  *(_OWORD *)(v31 + 15704) = 0u;
  *(_OWORD *)(v31 + 15656) = 0u;
  *(_OWORD *)(v31 + 15672) = 0u;
  *(_OWORD *)(v31 + 15624) = 0u;
  *(_OWORD *)(v31 + 15640) = 0u;
  *(_OWORD *)(v31 + 17000) = 0u;
  *(_OWORD *)(v31 + 17016) = 0u;
  *(_OWORD *)(v31 + 16968) = 0u;
  *(_OWORD *)(v31 + 16984) = 0u;
  *(_OWORD *)(v31 + 16936) = 0u;
  *(_OWORD *)(v31 + 16952) = 0u;
  *(_OWORD *)(v31 + 16904) = 0u;
  *(_OWORD *)(v31 + 16920) = 0u;
  bzero((void *)(v31 + 18056), 0x803uLL);
  if (*(_DWORD *)a1 != 6)
  {
    LODWORD(v37) = *(_DWORD *)(v6 + 252);
    double v44 = (double)v37 * 99.9308193 * ((double)v37 * 99.9308193) + 900.0;
    uint64_t v45 = (double *)(v31 + 352);
    Apply_Q_Boost(v44, 0, 1u, v45, v51, v55);
    Apply_Q_Boost(v44, 1u, 1u, v45, v51, v55);
    Apply_Q_Boost(v44, 2u, 1u, v45, v51, v55);
    double v41 = 8.98755179;
    if (*(_WORD *)(v6 + 248)) {
      double v41 = v11;
    }
    unsigned int v42 = 4;
    long long v43 = v45;
    goto LABEL_78;
  }
  *(void *)(v7 + 864) = 0x4163125300000000;
  *(_WORD *)(v7 + 200) = 0;
  *(unsigned char *)(v7 + 202) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 168) = 0;
  *(void *)(v7 + 152) = 0;
  unsigned int v38 = *(_DWORD *)(v2 + 12);
  if (v38 <= 0x2BF1F && *v5 >= 10)
  {
    long long v39 = (double *)(v31 + 352);
    Apply_Q_Boost(4.40390038e10, 0, 1u, v39, v51, v55);
    Apply_Q_Boost(4.40390038e10, 1u, 1u, v39, v51, v55);
    Apply_Q_Boost(4.40390038e10, 2u, 1u, v39, v51, v55);
    Apply_Q_Boost(1.0, 3u, 1u, v39, v51, v55);
    double v40 = 224.688795;
    if (*(_WORD *)(v6 + 248)) {
      double v40 = v11;
    }
    Apply_Q_Boost(v40, 4u, 1u, v39, v51, v55);
    double v41 = 1.0;
    unsigned int v42 = 5;
    long long v43 = v39;
LABEL_78:
    Apply_Q_Boost(v41, v42, 1u, v43, v51, v55);
    goto LABEL_79;
  }
  *(unsigned char *)(v31 + 136) = 1;
  *(_DWORD *)(v31 + 140) = 3;
  *(_WORD *)(v31 + 240) = 256;
  *(unsigned char *)(v31 + 242) = 2;
  *(unsigned char *)(v31 + 27176) = 0;
  *(_OWORD *)(v31 + 27232) = 0u;
  *(_OWORD *)(v31 + 68160) = xmmword_263D81920;
  int v50 = *(_DWORD *)(v7 + 12);
  if (v50 != 2)
  {
    if (v50 != 3) {
      goto LABEL_79;
    }
    *(_DWORD *)(v7 + 12) = 2;
  }
  if (v38 >= 0x36EE81) {
    *(_DWORD *)(v7 + 12) = 1;
  }
LABEL_79:
  *(_DWORD *)uint64_t v6 = 0;
  Nav_Kalman_Update_Wrapper(a1);
  uint64_t result = Pre_Positioning_Update_Wrapper(a1);
  uint64_t v47 = *(void *)(a1 + 104);
  *(void *)(v47 + 248) = *(void *)(v47 + 240);
  *(unsigned char *)(v47 + 308) = 0;
  uint64_t v48 = *(void *)(a1 + 104);
  *(void *)(v48 + 320) = *(void *)(v48 + 312);
  *(unsigned char *)(v48 + 380) = 0;
  uint64_t v49 = *(void *)(a1 + 104);
  *(void *)(v49 + 392) = *(void *)(v49 + 384);
  *(unsigned char *)(v49 + 452) = 0;
  *(_DWORD *)a1 = 11;
  return result;
}

uint64_t Ga05_GetPlatformType(unsigned __int8 *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a1) {
    BOOL v2 = gp_HalExtensionIndusInstance == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (v2)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Null Pltfm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga05_GetPlatformType", 770);
      int v5 = 1;
      goto LABEL_14;
    }
  }
  else
  {
    if (!(*(unsigned int (**)(void))(*(void *)gp_HalExtensionIndusInstance + 96))()) {
      *a1 = 0;
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Platform Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga05_GetPlatformType", *a1);
      int v5 = 4;
LABEL_14:
      gnssOsa_PrintLog(__str, v5, 1, 0);
    }
  }
  return v3;
}

void Ga05_HandleResetBbResetReq(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga05_HandleResetBbResetReq");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  uint64_t v3 = gp_HalExtensionIndusInstance;
  if (gp_HalExtensionIndusInstance)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, off_2655E6E50[(char)a1]);
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 120))(v3, a1, __p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga05_HandleResetBbResetReq");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null object HalExtIndus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga05_HandleResetBbResetReq", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C6B0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Ga05_GetPlatformCalibrationGlonassGroupDelayMeters(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "ADP", 68, "Ga05_GetPlatformCalibrationGlonassGroupDelayMeters");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)gp_HalExtensionIndusInstance + 112))(gp_HalExtensionIndusInstance);
}

double Ga05_GetPlatformCalibrationL5GroupDelayMeters(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "ADP", 68, "Ga05_GetPlatformCalibrationL5GroupDelayMeters");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (gp_HalExtensionIndusInstance) {
    return (*(double (**)(uint64_t))(*(void *)gp_HalExtensionIndusInstance + 104))(gp_HalExtensionIndusInstance);
  }
  double v1 = 0.0;
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null object HalExtIndus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga05_GetPlatformCalibrationL5GroupDelayMeters", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v1;
}

uint64_t Ga05_GetDebugFeaturesBitmask(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (gp_HalExtensionIndusInstance)
  {
    uint64_t v0 = *(uint64_t (**)(void))(*(void *)gp_HalExtensionIndusInstance + 64);
    return v0();
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null object HalExtIndus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga05_GetDebugFeaturesBitmask", 770);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
}

uint64_t Ga05_GetIsStandaloneBeiDouSupportRequired(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (gp_HalExtensionIndusInstance)
  {
    uint64_t v0 = *(uint64_t (**)(void))(*(void *)gp_HalExtensionIndusInstance + 128);
    return v0();
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx null object HalExtIndus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga05_GetIsStandaloneBeiDouSupportRequired", 770);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t GncP23_30HandleEaDataInd(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND EAType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP23_30HandleEaDataInd", *(_DWORD *)(a1 + 16));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    switch(*(_DWORD *)(a1 + 16))
    {
      case 1:
        unsigned int v3 = *(_DWORD *)(a1 + 104);
        if (v3 >= 2)
        {
          if (v3 == 2)
          {
            if (GncP23_22SetTunnelEndPt(a1 + 24)) {
              goto LABEL_112;
            }
            goto LABEL_116;
          }
          if (g_LbsOsaTrace_Config < 2) {
            goto LABEL_116;
          }
          bzero(__str, 0x3C6uLL);
          unint64_t v45 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EaPos Type,%u\n", v45);
        }
        else
        {
          memset_s(&__s, 0x50uLL, 0, 0x50uLL);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v4 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:RPOS,OsTime,%u,Lat,%f,Long,%f,RmsSMaj,%f,RmsSMin,%f,RmsSMajB,%hd,HeightAvl,%u,Height,%f,RmsH,%f,T,%u,Src,%u,SrcHash,0x%llX\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GncP23_11SetWgs84RefPos", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(__int16 *)(a1 + 64), *(unsigned __int8 *)(a1 + 66), *(double *)(a1 + 72), *(double *)(a1 + 80), *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92),
              *(void *)(a1 + 96));
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
          long long v5 = *(_OWORD *)(a1 + 48);
          long long v47 = *(_OWORD *)(a1 + 32);
          LODWORD(__s) = *(_DWORD *)(a1 + 24);
          long long v48 = v5;
          *(_WORD *)uint64_t v49 = *(_WORD *)(a1 + 64);
          v49[2] = *(unsigned char *)(a1 + 66);
          *(_OWORD *)&v49[8] = *(_OWORD *)(a1 + 72);
          uint64_t v52 = *(void *)(a1 + 96);
          unsigned int v6 = *(_DWORD *)(a1 + 88);
          if (v6 >= 5)
          {
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v7 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP23_11SetWgs84RefPos", 770, *(_DWORD *)(a1 + 88));
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            unsigned int v6 = 0;
          }
          unsigned int v50 = v6;
          uint64_t v8 = *(int *)(a1 + 92);
          if v8 < 9 && ((0x1F9u >> v8))
          {
            int v10 = dword_263D81DD8[v8];
          }
          else
          {
            if (g_LbsOsaTrace_Config >= 2)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v9 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Source,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP23_11SetWgs84RefPos", 770, *(_DWORD *)(a1 + 92));
              gnssOsa_PrintLog(__str, 2, 1, 0);
            }
            int v10 = 0;
          }
          int v51 = v10;
          if (GN_AGPS_Set_Ref_Pos((uint64_t)&__s)) {
            goto LABEL_112;
          }
          if (g_LbsOsaTrace_Config < 2) {
            goto LABEL_116;
          }
          bzero(__str, 0x3C6uLL);
          mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:RefPos\n");
        }
        goto LABEL_115;
      case 2:
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v14 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:DMS,OsTime,%u,State,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GncP23_12SetDevMotionState", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        unsigned int v15 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v15 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v16 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP23_12SetDevMotionState", 770, *(_DWORD *)(a1 + 28));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          unsigned int v15 = 0;
        }
        HIDWORD(__s) = v15;
        unsigned int v17 = *(_DWORD *)(a1 + 32);
        if (v17 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v18 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 87, "GncP23_12SetDevMotionState", 770, *(_DWORD *)(a1 + 32));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          unsigned int v17 = 0;
        }
        LODWORD(v47) = v17;
        if (GN_ExtA_Set_Device_Motion_State((unsigned int *)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Dms\n");
        goto LABEL_115;
      case 3:
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v19 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:UAC,OsTime,%u,Context,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 68, "GncP23_13SetUsrActCtxt", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        unsigned int v20 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v20 >= 0xC)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v21 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Context,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 87, "GncP23_13SetUsrActCtxt", 770, *(_DWORD *)(a1 + 28));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          unsigned int v20 = 0;
        }
        HIDWORD(__s) = v20;
        unsigned int v22 = *(_DWORD *)(a1 + 32);
        if (v22 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v23 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 87, "GncP23_13SetUsrActCtxt", 770, *(_DWORD *)(a1 + 32));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          unsigned int v22 = 0;
        }
        LODWORD(v47) = v22;
        if (GN_ExtA_Set_User_Activity_Context((unsigned int *)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:UAC\n");
        goto LABEL_115;
      case 4:
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v24 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:FIV,OsTime,%u,Fiv,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 68, "GncP23_14SetFixedInVehicle", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        unsigned int v25 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v25 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v26 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Indication,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNC", 87, "GncP23_14SetFixedInVehicle", 770, *(_DWORD *)(a1 + 28));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          unsigned int v25 = 0;
        }
        HIDWORD(__s) = v25;
        unsigned int v27 = *(_DWORD *)(a1 + 32);
        if (v27 >= 4)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v28 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 87, "GncP23_14SetFixedInVehicle", 770, *(_DWORD *)(a1 + 32));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          unsigned int v27 = 0;
        }
        LODWORD(v47) = v27;
        if (GN_ExtA_Set_Fixed_In_Vehicle((unsigned int *)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FIV\n");
        goto LABEL_115;
      case 5:
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v29 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:SES,Severity,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 68, "GncP23_15SetSigEnvSev", *(_DWORD *)(a1 + 24));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        unsigned int v30 = *(_DWORD *)(a1 + 24);
        if (v30 >= 8)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v31 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SigEnv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "GncP23_15SetSigEnvSev", 770, *(_DWORD *)(a1 + 24));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          unsigned int v30 = 0;
        }
        if (GN_ExtA_Set_Sig_Env_Sev(v30)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SES\n");
        goto LABEL_115;
      case 6:
        memset_s(&__s, 0x20uLL, 0, 0x20uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v32 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:ALT,OsTime,%u,Alt,%f,RmsAlt,%f,Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 68, "GncP23_16SetAltitudeAid", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(_DWORD *)(a1 + 48));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v47 = *(_OWORD *)(a1 + 32);
        uint64_t v33 = *(int *)(a1 + 48);
        if (v33 >= 5)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v40 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNC", 87, "GncP23_16SetAltitudeAid", 770, *(_DWORD *)(a1 + 48));
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          int v34 = 0;
        }
        else
        {
          int v34 = dword_263D81DFC[v33];
        }
        LODWORD(v48) = v34;
        if (GN_ExtA_Set_Altitude((uint64_t)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Alt\n");
        goto LABEL_115;
      case 7:
        memset_s(&__s, 0x48uLL, 0, 0x48uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v35 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:RPOS,OsTime,%u,Lat,%f,Long,%f,HeightAvl,%u,Height,%.2f,Dir,%.2f,Length,%.2f,Width,%.2f,Tunnel,%u,Freeway,%u,Railway,%u,OneWay,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 68, "GncP23_17SetMapVectorSeg", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 48), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(unsigned __int8 *)(a1 + 90),
            *(unsigned __int8 *)(a1 + 91));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v47 = *(_OWORD *)(a1 + 32);
        *(void *)&long long v48 = *(void *)(a1 + 48);
        BYTE8(v48) = *(unsigned char *)(a1 + 56);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)(a1 + 64);
        *(void *)&v49[16] = *(void *)(a1 + 80);
        unsigned int v50 = *(_DWORD *)(a1 + 88);
        LOBYTE(v51) = *(unsigned char *)(a1 + 92);
        if (GN_ExtA_Set_Map_Vector_Seg((uint64_t)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Mapv\n");
        goto LABEL_115;
      case 8:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v36 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:SPDC,OsTime,%u,Dur,%u,SpdL,%.2f,SpdU,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 68, "GncP23_18SetSpeedC", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        uint64_t __s = *(void *)(a1 + 24);
        long long v47 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_Speed_Constraint((uint64_t)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SpeedC\n");
        goto LABEL_115;
      case 9:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v37 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:VEL,OsTime,%u,Vel,%.2f,RmsVel,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNC", 68, "GncP23_19SetAtVel", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v47 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_Along_Track_Vel((uint64_t)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Vel\n");
        goto LABEL_115;
      case 0xA:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v38 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:HDNG,OsTime,%u,Heading,%.2f,RmsHeading,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNC", 68, "GncP23_20SetHeading", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v47 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_User_Heading((uint64_t)&__s)) {
          goto LABEL_112;
        }
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_116;
        }
        bzero(__str, 0x3C6uLL);
        mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Heading\n");
        goto LABEL_115;
      case 0xB:
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v39 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:VEL,OsTime,%u,Vel,%.2f,RmsVel,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNC", 68, "GncP23_21SetVertVel", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v47 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_Vertical_Vel((uint64_t)&__s))
        {
LABEL_112:
          int v41 = *(_DWORD *)(a1 + 12);
          int v42 = *(_DWORD *)(a1 + 16);
          int v43 = 1;
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:VertVel\n");
LABEL_115:
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
LABEL_116:
          int v41 = *(_DWORD *)(a1 + 12);
          int v42 = *(_DWORD *)(a1 + 16);
          int v43 = 0;
        }
        GncP23_01SendApiStatus(v41, v42, v43);
        break;
      default:
        if (g_LbsOsaTrace_Config < 2) {
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EaData Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "GncP23_30HandleEaDataInd", 770, *(_DWORD *)(a1 + 16));
        int v12 = 2;
        goto LABEL_19;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 69, "GncP23_30HandleEaDataInd", 517);
    int v12 = 1;
LABEL_19:
    gnssOsa_PrintLog(__str, v12, 1, 0);
  }
  return 0;
}

uint64_t GncP23_22SetTunnelEndPt(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v6, 0, 48);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: EXTA:POS_TYPE,OsTime,%u,Lat,%f,Long,%f,RmsSMaj,%f,RmsSMin,%f,RmsSMajB,%d,HeightAvl,%d,Height,%f,RmsH,%f,PosType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP23_22SetTunnelEndPt", *(_DWORD *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32), *(__int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42), *(double *)(a1 + 48), *(double *)(a1 + 56), *(_DWORD *)(a1 + 80));
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  LODWORD(v6[0]) = *(_DWORD *)a1;
  *(_OWORD *)((char *)v6 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v6[1] + 8) = *(_OWORD *)(a1 + 24);
  WORD4(v6[2]) = *(_WORD *)(a1 + 40);
  BYTE10(v6[2]) = *(unsigned char *)(a1 + 42);
  v6[3] = *(_OWORD *)(a1 + 48);
  uint64_t v3 = GN_ExtA_Set_Tunnel_End_Point((uint64_t)v6);
  if ((v3 & 1) == 0 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA TunnelEP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP23_22SetTunnelEndPt", 257);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return v3;
}

uint64_t GncP23_01SendApiStatus(int a1, int a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v8[1] = a2;
  void v8[2] = a3;
  v8[0] = a1;
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:API_STATUS =>EaCB,Api,%u,Id,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP23_01SendApiStatus", a2, a1, a3);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return g_GnsEaCallback(0, 12, v8);
}

uint64_t GncP23_31HandleEaCbInit(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP23_31HandleEaCbInit", 517);
    int v5 = 1;
LABEL_8:
    gnssOsa_PrintLog(__str, v5, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EA_CB_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP23_31HandleEaCbInit");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t v3 = *(uint64_t (**)(void, void, void))(a1 + 16);
  if (v3) {
    goto LABEL_5;
  }
  if (!g_GnsEaCallback)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP23_31HandleEaCbInit", 513);
    int v5 = 2;
    goto LABEL_8;
  }
  if (g_LbsOsaTrace_Config < 4)
  {
    uint64_t v3 = 0;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP23_31HandleEaCbInit", 513);
    gnssOsa_PrintLog(__str, 4, 1, 0);
    uint64_t v3 = *(uint64_t (**)(void, void, void))(a1 + 16);
  }
LABEL_5:
  g_GnsEaCallbacuint64_t k = v3;
  return 0;
}

uint64_t GNS_EaInitialize(uint64_t a1)
{
  uint64_t v2 = gnssOsa_Calloc("GNS_EaInitialize", 617, 1, 0x18uLL);
  if (!v2) {
    return 6;
  }
  v2[2] = a1;
  AgpsSendFsmMsg(132, 132, 8658691, v2);
  return 1;
}

uint64_t GNS_EaWgs84RefPos(int a1, long long *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaWgs84RefPos");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Wgs84RefPos\n");
LABEL_33:
    uint64_t v16 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v17 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GNS_EaWgs84RefPos");
LABEL_35:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v16;
    }
    return v16;
  }
  if ((*((_DWORD *)a2 + 17) - 3) >= 3)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Source,%u\n", v21);
    goto LABEL_33;
  }
  if (*((_DWORD *)a2 + 16) >= 5u)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Trust,%u\n", v22);
    goto LABEL_33;
  }
  double v5 = *((double *)a2 + 1);
  if (v5 > 90.0 || v5 < -90.0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Latitude,%f\n");
    goto LABEL_33;
  }
  double v6 = *((double *)a2 + 2);
  if (v6 > 180.0 || v6 < -180.0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Longitude,%f\n");
    goto LABEL_33;
  }
  if (*((unsigned char *)a2 + 42))
  {
    double v7 = *((double *)a2 + 6);
    if (v7 > 100000.0 || v7 < -100000.0)
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 2;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Height,%f\n");
      goto LABEL_33;
    }
  }
  if (*((unsigned __int16 *)a2 + 20) - 181 <= 0xFE96)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:RmsSemiMajBrg,%d\n", v20);
      goto LABEL_33;
    }
    return 2;
  }
  uint64_t v8 = (char *)gnssOsa_Calloc("GNS_EaWgs84RefPos", 743, 1, 0x70uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    *((_DWORD *)v8 + 3) = a1;
    *((_DWORD *)v8 + 4) = 1;
    long long v10 = *a2;
    *(_OWORD *)(v8 + 40) = a2[1];
    *(_OWORD *)(v8 + 24) = v10;
    long long v11 = a2[2];
    long long v12 = a2[3];
    long long v13 = a2[4];
    *((_DWORD *)v8 + 26) = *((_DWORD *)a2 + 20);
    *(_OWORD *)(v8 + 88) = v13;
    *(_OWORD *)(v8 + 72) = v12;
    *(_OWORD *)(v8 + 56) = v11;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v14 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 73, "GNS_EaWgs84RefPos", *((_DWORD *)v9 + 4), *((_DWORD *)v9 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v9);
    if (g_LbsOsaTrace_Config < 5) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v15 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "GNS_EaWgs84RefPos");
    uint64_t v16 = 1;
    goto LABEL_35;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v19 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 68, "GNS_EaWgs84RefPos");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaDevMovState(int a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaDevMovState");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:DMS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaDevMovState", 513);
      uint64_t v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5) {
        return v10;
      }
LABEL_19:
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v12, "GNC", 68, "GNS_EaDevMovState");
LABEL_20:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v10;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 1) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:MovState,%u\n", v15);
      goto LABEL_18;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:MovReliab,%u\n", v16);
LABEL_18:
      uint64_t v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5) {
        return v10;
      }
      goto LABEL_19;
    }
    return 2;
  }
  double v5 = gnssOsa_Calloc("GNS_EaDevMovState", 833, 1, 0x70uLL);
  if (v5)
  {
    double v6 = v5;
    v5[3] = a1;
    void v5[4] = 2;
    uint64_t v7 = *a2;
    v5[8] = *((_DWORD *)a2 + 2);
    *((void *)v5 + 3) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaDevMovState", v6[4], v6[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaDevMovState");
    uint64_t v10 = 1;
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaDevMovState");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaSpeedConstraint(int a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaSpeedConstraint");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2)
  {
    double v5 = (char *)gnssOsa_Calloc("GNS_EaSpeedConstraint", 890, 1, 0x70uLL);
    if (v5)
    {
      double v6 = v5;
      *((_DWORD *)v5 + 3) = a1;
      *((_DWORD *)v5 + 4) = 8;
      long long v7 = *a2;
      *((void *)v5 + 5) = *((void *)a2 + 2);
      *(_OWORD *)(v5 + 24) = v7;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaSpeedConstraint", *((_DWORD *)v6 + 4), *((_DWORD *)v6 + 3));
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8650755, v6);
      if (g_LbsOsaTrace_Config < 5) {
        return 1;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaSpeedConstraint");
      uint64_t v10 = 1;
      goto LABEL_12;
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "GNS_EaSpeedConstraint");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    return 6;
  }
  else
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v11 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SpdC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaSpeedConstraint", 513);
    uint64_t v10 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 68, "GNS_EaSpeedConstraint");
LABEL_12:
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  return v10;
}

uint64_t GNS_EaAlongTrackVel(int a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaAlongTrackVel");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:AlongTrackVel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "GNS_EaAlongTrackVel", 513);
    uint64_t v10 = 2;
    int v11 = 2;
LABEL_11:
    gnssOsa_PrintLog(__str, v11, 1, 0);
    return v10;
  }
  double v5 = (char *)gnssOsa_Calloc("GNS_EaAlongTrackVel", 946, 1, 0x70uLL);
  if (v5)
  {
    double v6 = v5;
    *((_DWORD *)v5 + 3) = a1;
    *((_DWORD *)v5 + 4) = 9;
    long long v7 = *a2;
    *((void *)v5 + 5) = *((void *)a2 + 2);
    *(_OWORD *)(v5 + 24) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaAlongTrackVel", *((_DWORD *)v6 + 4), *((_DWORD *)v6 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaAlongTrackVel");
    uint64_t v10 = 1;
    int v11 = 5;
    goto LABEL_11;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v13 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "GNS_EaAlongTrackVel");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaUsrActCtxt(int a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaUsrActCtxt");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:UAC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaUsrActCtxt", 513);
      uint64_t v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5) {
        return v10;
      }
LABEL_19:
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v12, "GNC", 68, "GNS_EaUsrActCtxt");
LABEL_20:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v10;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 1) >= 0xCu)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Ctxt,%u\n", v15);
      goto LABEL_18;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Reliab,%u\n", v16);
LABEL_18:
      uint64_t v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5) {
        return v10;
      }
      goto LABEL_19;
    }
    return 2;
  }
  double v5 = gnssOsa_Calloc("GNS_EaUsrActCtxt", 1169, 1, 0x70uLL);
  if (v5)
  {
    double v6 = v5;
    v5[3] = a1;
    void v5[4] = 3;
    uint64_t v7 = *a2;
    v5[8] = *((_DWORD *)a2 + 2);
    *((void *)v5 + 3) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaUsrActCtxt", v6[4], v6[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaUsrActCtxt");
    uint64_t v10 = 1;
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaUsrActCtxt");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaFixedInVehicle(int a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaFixedInVehicle");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FIV\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GNS_EaFixedInVehicle", 513);
      uint64_t v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5) {
        return v10;
      }
LABEL_19:
      bzero(__str, 0x3C6uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", v12, "GNC", 68, "GNS_EaFixedInVehicle");
LABEL_20:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v10;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 1) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FivInd,%u\n", v15);
      goto LABEL_18;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:FIVReliab,%u\n", v16);
LABEL_18:
      uint64_t v10 = 2;
      gnssOsa_PrintLog(__str, 2, 1, 0);
      if (g_LbsOsaTrace_Config < 5) {
        return v10;
      }
      goto LABEL_19;
    }
    return 2;
  }
  double v5 = gnssOsa_Calloc("GNS_EaFixedInVehicle", 1258, 1, 0x70uLL);
  if (v5)
  {
    double v6 = v5;
    v5[3] = a1;
    void v5[4] = 4;
    uint64_t v7 = *a2;
    v5[8] = *((_DWORD *)a2 + 2);
    *((void *)v5 + 3) = v7;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GNS_EaFixedInVehicle", v6[4], v6[3]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v6);
    if (g_LbsOsaTrace_Config < 5) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaFixedInVehicle");
    uint64_t v10 = 1;
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaFixedInVehicle");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaSigEnvSev(int a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaSigEnvSev");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (a2 >= 8)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:SES,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GNS_EaSigEnvSev", 515, a2);
    uint64_t v9 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 68, "GNS_EaSigEnvSev");
LABEL_12:
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    double v5 = gnssOsa_Calloc("GNS_EaSigEnvSev", 1328, 1, 0x70uLL);
    if (v5)
    {
      double v6 = v5;
      v5[3] = a1;
      void v5[4] = 5;
      v5[6] = a2;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GNS_EaSigEnvSev", v6[4], v6[3]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(132, 132, 8650755, v6);
      if (g_LbsOsaTrace_Config < 5) {
        return 1;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GNS_EaSigEnvSev");
      uint64_t v9 = 1;
      goto LABEL_12;
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 68, "GNS_EaSigEnvSev");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    return 6;
  }
  return v9;
}

uint64_t GNS_EaAltitude(int a1, long long *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaAltitude");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Alt\n");
LABEL_13:
    uint64_t v6 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GNS_EaAltitude");
LABEL_15:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v6;
    }
    return v6;
  }
  double v5 = *((double *)a2 + 1);
  if (v5 > 100000.0 || v5 < -100000.0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Altitude,%f\n");
    goto LABEL_13;
  }
  if (*((double *)a2 + 2) > 100000.0)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:RMSAltitude,%f\n");
      goto LABEL_13;
    }
    return 2;
  }
  if (*((_DWORD *)a2 + 6) >= 5u)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Trust,%u\n", v15);
    goto LABEL_13;
  }
  uint64_t v8 = (char *)gnssOsa_Calloc("GNS_EaAltitude", 1424, 1, 0x70uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    *((_DWORD *)v8 + 3) = a1;
    *((_DWORD *)v8 + 4) = 6;
    long long v10 = *a2;
    *(_OWORD *)(v8 + 36) = *(long long *)((char *)a2 + 12);
    *(_OWORD *)(v8 + 24) = v10;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GNS_EaAltitude", *((_DWORD *)v9 + 4), *((_DWORD *)v9 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v9);
    if (g_LbsOsaTrace_Config < 5) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v12 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 68, "GNS_EaAltitude");
    uint64_t v6 = 1;
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "GNS_EaAltitude");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

uint64_t GNS_EaMapVectorSeg(int a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "GNS_EaMapVectorSeg");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (!a2)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:MapVecSeg\n");
LABEL_28:
    uint64_t v8 = 2;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GNS_EaMapVectorSeg");
LABEL_30:
      gnssOsa_PrintLog(__str, 5, 1, 0);
      return v8;
    }
    return v8;
  }
  double v5 = *(double *)(a2 + 8);
  if (v5 > 90.0 || v5 < -90.0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Latitude,%f\n");
    goto LABEL_28;
  }
  double v6 = *(double *)(a2 + 16);
  if (v6 > 180.0 || v6 < -180.0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Longitude,%f\n");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 32))
  {
    double v7 = *(double *)(a2 + 24);
    if (v7 > 100000.0 || v7 < -100000.0)
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 2;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Altitude,%f\n");
      goto LABEL_28;
    }
  }
  if (*(double *)(a2 + 40) > 360.0)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Direction,%f\n");
      goto LABEL_28;
    }
    return 2;
  }
  if (*(double *)(a2 + 48) > 100000.0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Length,%f\n");
    goto LABEL_28;
  }
  if (*(double *)(a2 + 56) > 100000.0)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 2;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx EXTA:Width,%f\n");
    goto LABEL_28;
  }
  uint64_t v11 = (char *)gnssOsa_Calloc("GNS_EaMapVectorSeg", 1542, 1, 0x70uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    *((_DWORD *)v11 + 3) = a1;
    *((_DWORD *)v11 + 4) = 7;
    *(_OWORD *)(v11 + 24) = *(_OWORD *)a2;
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v14 = *(_OWORD *)(a2 + 32);
    long long v15 = *(_OWORD *)(a2 + 48);
    *(void *)(v11 + 85) = *(void *)(a2 + 61);
    *(_OWORD *)(v11 + 72) = v15;
    *(_OWORD *)(v11 + 56) = v14;
    *(_OWORD *)(v11 + 40) = v13;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v16 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 73, "GNS_EaMapVectorSeg", *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 3));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(132, 132, 8650755, v12);
    if (g_LbsOsaTrace_Config < 5) {
      return 1;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v17 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GNS_EaMapVectorSeg");
    uint64_t v8 = 1;
    goto LABEL_30;
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v18 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 68, "GNS_EaMapVectorSeg");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  return 6;
}

char *NK_Get_Ext_Meas(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  uint64_t v8 = (unsigned char *)(a5 + 15411);
  uint64_t v9 = a4 + 62268;
  long long v10 = (double *)(a4 + 61304);
  uint64_t v11 = a4 + 60200;
  unsigned int v157 = 0;
  if ((*(_DWORD *)(a5 + 20) - 5) < 4)
  {
    EvLog("NK_Get_Ext_Meas: Ext Ref Pos and Alt Assist skipped in Airborne mode");
    goto LABEL_204;
  }
  double v156 = 0.0;
  uint64_t v150 = a5 + 27120;
  __int16 v155 = 0;
  int v153 = 0;
  int v154 = 0;
  if (Core_Get_Pos_LLH(a1, 150000, 0, (int *)&v157, (uint64_t)&v163, (uint64_t)&v160, (uint64_t *)&v156, (unsigned char *)&v155 + 1, &v155, &v154, &v153))
  {
    unsigned int v12 = v157;
    unsigned int v13 = a1 - v157;
    *((_DWORD *)v10 + 195) = a1 - v157;
    if (v154 == 7)
    {
      *(unsigned char *)(v9 + 16) = 1;
      *(_DWORD *)(v9 + 28) = v13;
      if (HIBYTE(v155))
      {
        *(unsigned char *)(v9 + 32) = 1;
        *(_DWORD *)(v9 + 44) = v13;
      }
    }
    unsigned int v14 = v153 - 3;
    BOOL v149 = (v153 - 3) < 2;
    if (!*(unsigned char *)(a4 + 1864))
    {
      int v17 = 1;
      goto LABEL_20;
    }
    double v15 = v160;
    if (v160 <= 4.0e10 && v14 <= 1)
    {
      uint64_t v147 = v10;
      uint64_t v16 = (_DWORD *)(v150 + 16);
      BOOL v149 = 1;
      int v17 = 1;
LABEL_40:
      int v22 = 1;
      goto LABEL_41;
    }
    double v23 = *(double *)(a4 + 1704);
    __double2 v24 = __sincos_stret(v23);
    double v25 = 1.0 / sqrt(v24.__sinval * v24.__sinval * -0.00669437999 + 1.0);
    double v26 = *(double *)(a4 + 1720);
    double v27 = v24.__cosval * (v26 + v25 * 6378137.0);
    if (v27 < 1.0) {
      double v27 = 1.0;
    }
    double v28 = (v23 - *(double *)&v163) * (v26 + v25 * (v25 * v25) * 6335439.33);
    double v29 = (*(double *)(a4 + 1712) - *((double *)&v163 + 1))
        * v27
        * ((*(double *)(a4 + 1712) - *((double *)&v163 + 1))
         * v27)
        + v28 * v28;
    if (v15 <= 4.0e10 || v29 >= fmax(v15 * 9.0, 4.0e10))
    {
      int v17 = 1;
      if (*(_DWORD *)(a4 + 1872) != 1 || v14 < 2) {
        goto LABEL_20;
      }
      if (v29 >= 22500.0)
      {
        if (v29 >= 9000000.0)
        {
          BOOL v149 = 0;
          goto LABEL_20;
        }
        int v30 = 3;
      }
      else
      {
        int v30 = 4;
      }
      uint64_t v147 = v10;
      int v153 = v30;
      if (v15 > v29) {
        double v29 = v15;
      }
      double v160 = v29;
      uint64_t v16 = (_DWORD *)(v150 + 16);
      BOOL v149 = 1;
      goto LABEL_40;
    }
    *(_DWORD *)(v9 + 20) = 24;
  }
  else
  {
    BOOL v149 = (v153 - 3) < 2;
  }
  if (*(_DWORD *)(a5 + 20) <= 4u)
  {
    unsigned int v12 = *(_DWORD *)(v150 + 24);
    if (v12)
    {
      unsigned int v157 = *(_DWORD *)(v150 + 24);
      long long v163 = *(_OWORD *)(a5 + 27152);
      double v164 = *(double *)(a5 + 27168);
      int v18 = *(_DWORD *)a4 - v12;
      if (v18 >= -999)
      {
        if (v18 > 3599999)
        {
          double v21 = 4000.0;
          double v20 = 200000.0;
        }
        else
        {
          double v19 = (double)(v18 / 1000) * 0.000277777778;
          double v20 = v19 * 30000.0 + 400.0;
          double v21 = v19 * 400.0 + 400.0;
          unsigned int v157 = a1;
          unsigned int v12 = a1;
        }
        uint64_t v147 = v10;
        double v160 = v20 * v20;
        double v161 = v20 * v20;
        uint64_t v162 = 0;
        double v156 = v21 * v21;
        int v153 = 3;
        int v22 = 2;
        __int16 v155 = 258;
        BOOL v149 = 1;
        uint64_t v16 = (_DWORD *)(v150 + 16);
        int v17 = 1;
        goto LABEL_41;
      }
    }
  }
  int v17 = 0;
  int v22 = 0;
  if (!HIBYTE(v155)) {
    goto LABEL_137;
  }
LABEL_20:
  uint64_t v16 = (_DWORD *)(v150 + 16);
  if (*(_DWORD *)(v150 + 16) && !v149)
  {
    BOOL v149 = 0;
    int v22 = v17;
    goto LABEL_137;
  }
  uint64_t v147 = v10;
  unsigned int v12 = v157;
  int v22 = v17;
LABEL_41:
  unsigned int v31 = a1 - v12;
  if ((int)(a1 - v12) >= 0) {
    unsigned int v32 = a1 - v12;
  }
  else {
    unsigned int v32 = v12 - a1;
  }
  if (v32 < 0x3E8 || v12 - *(_DWORD *)(a5 + 15484) - 1000 <= 0xFFFFF830)
  {
    *(_OWORD *)(a5 + 15464) = 0u;
    *(_DWORD *)(a5 + 15480) = a1;
    *(_DWORD *)(a5 + 15484) = v12;
    double v33 = 0.0;
    double v34 = 0.0;
    if (v32 < 0x3E8) {
      goto LABEL_82;
    }
  }
  if (*(_DWORD *)(a4 + 1868) == 3)
  {
    double v35 = v147[83];
    if (v35 <= 3.0)
    {
      double v48 = *(double *)(a4 + 1848);
      double v44 = v48 + v35 * 3.0;
      double v49 = 5.0;
      if (v147[85] <= 3.0)
      {
        double v50 = v147[84];
        if (v50 <= 3.0)
        {
          double v51 = *(double *)(a4 + 1840) * *(double *)(a4 + 1840) - v48 * v48;
          double v52 = sqrt(v51) + v50 * 3.0;
          BOOL v53 = v51 < 0.0;
          double v49 = 5.0;
          if (!v53) {
            double v49 = v52;
          }
        }
      }
      goto LABEL_76;
    }
  }
  unsigned int v145 = v32;
  uint64_t v36 = v8;
  int v37 = v17;
  uint64_t v38 = v16;
  int v39 = v22;
  int ExtA_UAC = Core_Get_ExtA_UAC(120000, (uint64_t)v158);
  int v41 = *(unsigned __int8 *)(p_NA + 381);
  if (*(unsigned char *)(p_NA + 381))
  {
    int v42 = *(_DWORD *)(p_NA + 26780);
    if (!*(unsigned char *)(v9 + 72))
    {
      *(unsigned char *)(v9 + 64) = v41;
      *(unsigned char *)(v9 + 72) = v41;
    }
    if (DWORD2(v158[0]) == 3) {
      char v43 = ExtA_UAC;
    }
    else {
      char v43 = 0;
    }
    int v22 = v39;
    uint64_t v16 = v38;
    int v17 = v37;
    if ((v43 & 1) == 0)
    {
      uint64_t v8 = v36;
      if ((v42 - 2) >= 6) {
        double v44 = 45.0;
      }
      else {
        double v44 = dbl_263D81EF8[v42 - 2];
      }
      goto LABEL_74;
    }
LABEL_63:
    double v44 = 45.0;
    uint64_t v8 = v36;
    unsigned int v32 = v145;
    switch(DWORD1(v158[0]))
    {
      case 2:
        double v44 = 2.4;
        goto LABEL_75;
      case 3:
      case 5:
        double v44 = 10.0;
        if (!v41) {
          goto LABEL_75;
        }
        int v46 = v42 - 5;
        if ((v42 - 5) >= 3) {
          goto LABEL_75;
        }
        long long v47 = (double *)&unk_263D81EC8;
        goto LABEL_321;
      case 4:
        double v44 = 4.6;
        goto LABEL_75;
      case 6:
        double v44 = 16.9;
        if (!v41) {
          goto LABEL_75;
        }
        goto LABEL_316;
      case 7:
        double v44 = 30.0;
        if (!v41) {
          goto LABEL_75;
        }
LABEL_316:
        int v46 = v42 - 5;
        if ((v42 - 5) >= 3) {
          goto LABEL_75;
        }
        long long v47 = (double *)&unk_263D81EE0;
LABEL_321:
        double v44 = v47[v46];
        break;
      case 8:
        if (!v41) {
          goto LABEL_75;
        }
        int v46 = v42 - 5;
        if ((v42 - 5) >= 3) {
          goto LABEL_75;
        }
        long long v47 = (double *)&unk_263D81EB0;
        goto LABEL_321;
      case 9:
        goto LABEL_75;
      case 0xA:
      case 0xB:
        double v44 = 54.0;
        goto LABEL_75;
      default:
        goto LABEL_74;
    }
    goto LABEL_75;
  }
  if (DWORD2(v158[0]) == 3) {
    int v45 = ExtA_UAC;
  }
  else {
    int v45 = 0;
  }
  if (v45 == 1)
  {
    int v42 = 0;
    int v22 = v39;
    uint64_t v16 = v38;
    int v17 = v37;
    goto LABEL_63;
  }
  double v44 = 45.0;
  int v22 = v39;
  uint64_t v16 = v38;
  int v17 = v37;
  uint64_t v8 = v36;
LABEL_74:
  unsigned int v32 = v145;
LABEL_75:
  double v49 = 5.0;
LABEL_76:
  int v54 = *(_DWORD *)(a5 + 15480);
  if (v54)
  {
    int v55 = a1 - v54;
    if (v55 < 0) {
      int v55 = -v55;
    }
    double v56 = (double)v55 * 0.001;
  }
  else
  {
    double v56 = 0.0;
  }
  double v34 = *(double *)(a5 + 15464) + v44 * v56;
  *(double *)(a5 + 15464) = v34;
  double v33 = *(double *)(a5 + 15472) + v49 * v56;
  *(double *)(a5 + 15472) = v33;
  *(_DWORD *)(a5 + 15480) = a1;
LABEL_82:
  double v57 = dbl_263D81EA0[v154 == 7];
  int v58 = *(_DWORD *)(a4 + 1872);
  if (!v58) {
    double v57 = 5400.0;
  }
  if (v34 > v57)
  {
    HIBYTE(v155) = 0;
    if (v22 != 1)
    {
      long long v10 = v147;
      goto LABEL_137;
    }
    int v59 = 0;
    *(_DWORD *)(v9 + 20) = 25;
    *(_DWORD *)(v9 + 36) = 25;
    double v60 = 0.0;
    long long v10 = v147;
    goto LABEL_119;
  }
  if (v154 == 7)
  {
    double v61 = v34 * v34;
    if (v58)
    {
      long long v10 = v147;
    }
    else
    {
      long long v10 = v147;
      if (v153 != 4 && (v153 != 3 || *(int *)(a4 + 20) <= 7)) {
        double v61 = fmax(v61, 4356.0);
      }
    }
    double v60 = v33 * v33;
    if (*(_DWORD *)(a5 + 20) < 5u) {
      double v60 = v60 * 0.444444444;
    }
    if (v17)
    {
      double v63 = v161;
      goto LABEL_113;
    }
  }
  else
  {
    double v62 = fmin((double)(int)(v32 / 0x3E8 * (v32 / 0x3E8)) * 225.0, 4.0e10);
    double v63 = v161;
    long long v10 = v147;
    if (v161 < v62)
    {
      double v63 = v160;
      double v161 = v160;
      if (v160 < v62)
      {
        double v160 = v62;
        double v161 = v62;
        double v63 = v62;
      }
      uint64_t v162 = 0;
    }
    if (v155 > 1u)
    {
      double v60 = 0.0;
      if (v17)
      {
        double v61 = 0.0;
        goto LABEL_113;
      }
    }
    else
    {
      uint64_t v64 = *(int *)(a5 + 20);
      if (v64 > 8) {
        double v65 = 100.0;
      }
      else {
        double v65 = dbl_263D81F28[v64];
      }
      double v60 = v65 * (double)(int)(v31 * v31);
      if (v155 == 1) {
        double v60 = v60 * 0.5;
      }
      if (v17)
      {
        double v61 = v60;
LABEL_113:
        uint64_t v66 = v162;
        double v67 = v61 + v160;
        double v68 = v63 + v61;
        *(_OWORD *)(a4 + 60224) = v163;
        double v160 = v67;
        double v161 = v68;
        *(unsigned char *)uint64_t v11 = 1;
        *(_DWORD *)(v11 + 20) = v157;
        int v69 = v153;
        *(_DWORD *)(v11 + 4) = v22;
        *(_DWORD *)(v11 + 8) = v69;
        *(double *)(v11 + 48) = v67;
        *(double *)(v11 + 56) = v68;
        *(void *)(v11 + 64) = v66;
        if (v58 || (double v70 = 4.0, v149) && *(_DWORD *)v150 <= 0x18u) {
          double v70 = 25.0;
        }
        *(double *)(v11 + 104) = v70;
        *(_DWORD *)(v11 + 12) = v155;
        int v59 = 1;
        goto LABEL_119;
      }
    }
  }
  int v59 = 0;
LABEL_119:
  unsigned int v71 = v157;
  if (HIBYTE(v155))
  {
    double v72 = v60 + v156;
    double v156 = v72;
    *(unsigned char *)(v11 + 128) = 1;
    int v73 = v153;
    *(_DWORD *)(v11 + 148) = v71;
    *(_DWORD *)(v11 + 132) = v22;
    *(_DWORD *)(v11 + 136) = v73;
    *(double *)(v11 + 152) = v164;
    *(double *)(v11 + 160) = v72;
    *(void *)(v11 + 184) = 0x4039000000000000;
    *(_DWORD *)(v11 + 140) = v155;
  }
  if (!v71) {
    int v59 = 0;
  }
  if (v59 == 1 && (!*v16 || !*(unsigned char *)(a4 + 1864)))
  {
    int v74 = v22;
    double v75 = fmax(v160 * 9.0, 4.0e10);
    double v76 = Horiz_Diff_Sqd((double *)(a4 + 1704), (const double *)(a4 + 60224));
    if (v76 <= v75)
    {
      int v77 = *(unsigned __int8 *)(a4 + 1864);
    }
    else
    {
      int v77 = 0;
      *(unsigned char *)(a4 + 1864) = 0;
    }
    int v22 = v74;
    if (v76 > 40000.0 && !v77)
    {
      *(_OWORD *)(a4 + 1704) = *(_OWORD *)(a4 + 60224);
      if (HIBYTE(v155)) {
        *(void *)(a4 + 1720) = *(void *)(v11 + 152);
      }
      Geo2ECEF(a4 + 1704, (uint64_t)&WGS84_Datum, (double *)(a4 + 1560));
      NK_Transform_State(a4 + 1512);
      if (*(_DWORD *)(a5 + 148) && !*(unsigned char *)(a5 + 136))
      {
        *(unsigned char *)(a5 + 136) = 1;
        *(_DWORD *)(a5 + 140) = 94;
      }
      *(_WORD *)(a5 + 244) = 5;
      int v22 = v74;
    }
  }
LABEL_137:
  if (*(_DWORD *)(a5 + 20) <= 4u)
  {
    int v148 = v22;
    long long v151 = 0u;
    long long v152 = 0u;
    if (!Core_Get_ExtA_Alt(6000, &v151))
    {
LABEL_183:
      int v22 = v148;
      goto LABEL_184;
    }
    *(unsigned char *)uint64_t v9 = 1;
    *(unsigned char *)(v9 + 8) = 1;
    int v78 = v151;
    uint64_t v79 = *(_DWORD **)(p_api + 8);
    if (*v79) {
      int v80 = v79[4] - (*v79 + v151);
    }
    else {
      int v80 = 0;
    }
    *(_DWORD *)(v9 + 12) = v80 + a1;
    uint64_t v159 = 0;
    memset(v158, 0, sizeof(v158));
    int ExtA_MapV = Core_Get_ExtA_MapV(30000, (uint64_t)v158);
    int v82 = a3;
    if (ExtA_MapV)
    {
      if ((_BYTE)v159)
      {
        *(unsigned char *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 8;
        EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude provided when Map Vector indicates Tunnel");
        int v82 = a3;
      }
      if (BYTE4(v159))
      {
        *(unsigned char *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 9;
        EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude provided when Map Vector indicates Bridge");
        int v82 = a3;
      }
    }
    if (HIBYTE(v155) && *(unsigned char *)(v11 + 128) && (*(_DWORD *)(v11 + 136) - 3) <= 1)
    {
      double v83 = *(double *)&v152;
      double v84 = v83 * v83;
      double v85 = *(double *)(v11 + 160);
      if (v85 < v83 * v83)
      {
        *(unsigned char *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 10;
        EvCrt_v("NK_Get_Ext_Meas:  WARNING:  DEM Altitude rejected - Worse Sigma Unc than Ref Pos, %f > %f", v83, sqrt(v85));
LABEL_152:
        int v82 = a3;
        goto LABEL_158;
      }
      double v86 = *((double *)&v151 + 1);
      double v87 = *((double *)&v151 + 1) - *(double *)(v11 + 152);
      if (v87 * v87 > (v84 + v85) * 9.0)
      {
        *(unsigned char *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 4) = 11;
        EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude rejected - Incompatible with Ref Pos, diff %f  Sigma %f %f", fabs(v87), v83, sqrt(v85));
        int v82 = a3;
        if (!*(unsigned char *)(v150 + 130) && (a3[17] - 8) >= 0xFFFFFFFD && !*(unsigned char *)(a5 + 136))
        {
          if (*(_DWORD *)(a5 + 148))
          {
            double v144 = *(double *)(a4 + 1720) - v86;
            if (v144 * v144 < v84 * 16.0)
            {
              *(unsigned char *)(a5 + 136) = 1;
              *(_DWORD *)(a5 + 140) = 98;
              EvLog_v("NK_Get_Ext_Meas:  KF Reset Type %d:  DEM Edit & KF Height near edited DEM Altitude,  diff %f  Sigma %f", 98, fabs(v144), sqrt(*(double *)(v11 + 160)));
              goto LABEL_152;
            }
          }
        }
      }
    }
LABEL_158:
    if (*(unsigned char *)(v9 + 8))
    {
      *(unsigned char *)(v11 + 128) = 1;
      *(_DWORD *)(v11 + 132) = 1;
      uint64_t v88 = *(_DWORD **)(p_api + 8);
      if (*v88) {
        int v89 = *v88 + v78 - v88[4];
      }
      else {
        int v89 = 0;
      }
      *(_DWORD *)(v11 + 148) = v89;
      double v90 = *((double *)&v151 + 1);
      *(void *)(v11 + 152) = *((void *)&v151 + 1);
      switch(DWORD2(v152))
      {
        case 0:
          if (*(double *)&v152 >= 25.0) {
            int v91 = 3;
          }
          else {
            int v91 = 4;
          }
          break;
        case 1:
          int v91 = 2;
          break;
        case 2:
          int v91 = 3;
          break;
        case 3:
          int v91 = 4;
          break;
        default:
          int v91 = 1;
          break;
      }
      *(_DWORD *)(v11 + 136) = v91;
      int v92 = *(_DWORD *)(v9 + 12);
      if (v92 < 0) {
        int v92 = -v92;
      }
      double v93 = (double)v92 * 0.001;
      if (*(unsigned char *)(v150 + 129)) {
        double v93 = v93 * 0.1;
      }
      double v94 = v93 * v93 + *(double *)&v152 * *(double *)&v152;
      *(double *)(v11 + 160) = v94;
      int v95 = *(unsigned __int8 *)(v150 + 130);
      if (*(unsigned char *)(v150 + 130))
      {
        int v96 = v82[17];
        double v97 = 25.0;
        if ((v96 - 5) < 3) {
          double v97 = dbl_263D81F70[v96 - 5];
        }
      }
      else
      {
        double v97 = 25.0;
        if (!*v82) {
          double v97 = 9.0;
        }
        int v96 = v82[17];
      }
      *(double *)(v11 + 184) = v97;
      *(_DWORD *)(v11 + 140) = 0;
      HIBYTE(v155) = 1;
      if (v95)
      {
        if ((v96 - 8) >= 0xFFFFFFFD && !*(unsigned char *)(a5 + 136))
        {
          if (*(_DWORD *)(a5 + 148))
          {
            double v142 = *(double *)(a4 + 1720) - v90;
            double v143 = v10[77];
            if (v142 * v142 > (v94 + v143 * v143) * 16.0)
            {
              *(unsigned char *)(a5 + 136) = 1;
              *(_DWORD *)(a5 + 140) = 95;
              EvLog_v("NK_Get_Ext_Meas:  KF Reset Type %d:  DEM Altitude Incompatible with current Height, diff %f  Sigma %f %f", 95, fabs(v142), sqrt(v94), v143);
            }
          }
        }
      }
    }
    goto LABEL_183;
  }
LABEL_184:
  if ((!*(_DWORD *)(v150 + 16) || *(unsigned char *)(a5 + 241)) && v10[78] > 200.0 && *(_DWORD *)(a5 + 20) <= 4u)
  {
    int v98 = HIBYTE(v155);
    if (!HIBYTE(v155) || v10[77] < 100000.0 && *(double *)(v11 + 160) > 40000.0)
    {
      *(unsigned char *)(v11 + 128) = 1;
      *(_DWORD *)(v11 + 148) = a1;
      *(void *)(v11 + 132) = 0x300000002;
      *(void *)(v11 + 160) = 0x414E848000000000;
      if (v22 && v98 && v164 > -500.0 && v164 < 6000.0)
      {
        *(double *)(v11 + 152) = v164;
        if (v149) {
          *(double *)(v11 + 160) = v156;
        }
      }
      else
      {
        long long v99 = (double *)(a4 + 1720);
        *(void *)&v158[0] = 0;
        if (R8_EQ((const double *)(a4 + 1720), (const double *)v158) || (double v100 = *v99, *v99 <= -500.0) || v100 >= 6000.0) {
          *(void *)(v11 + 152) = 0x407F400000000000;
        }
        else {
          *(double *)(v11 + 152) = v100;
        }
      }
      *(void *)(v11 + 184) = 0x4039000000000000;
      *(_DWORD *)(v11 + 140) = 2;
    }
  }
  if (!*(unsigned char *)(a4 + 1864) && *(unsigned char *)v11 && *(_DWORD *)(v11 + 4) == 1 && *(unsigned char *)(v11 + 128)) {
    *(unsigned char *)(a4 + 1864) = 1;
  }
LABEL_204:
  long long v101 = (_DWORD *)(a4 + 59932);
  if (*(unsigned char *)v11)
  {
    *uint64_t v8 = 1;
    *(_DWORD *)(a5 + 15432) = *(_DWORD *)(v11 + 20);
    *(void *)(a5 + 15440) = *(void *)(v11 + 48);
  }
  else if (*v8 && (int)(a1 - *(_DWORD *)(a5 + 15432)) > 120000)
  {
    *uint64_t v8 = 0;
  }
  long long v102 = (unsigned char *)(a4 + 60528);
  if (*(unsigned char *)(v11 + 128))
  {
    v8[1] = 1;
    *(_DWORD *)(a5 + 15448) = *(_DWORD *)(v11 + 148);
    *(void *)(a5 + 15456) = *(void *)(v11 + 160);
  }
  else if (v8[1] && (int)(a1 - *(_DWORD *)(a5 + 15448)) > 120000)
  {
    v8[1] = 0;
  }
  *(unsigned char *)(a4 + 60128) = 0;
  *(void *)&v158[0] = 0;
  *(void *)&long long v151 = 0;
  LOBYTE(v163) = 0;
  if (Core_Get_Clk_Drift(a1, 300, &v157, (double *)v158, (double *)&v151, (unsigned __int8 *)&v163))
  {
    *(unsigned char *)(a4 + 60128) = 1;
    *(_DWORD *)(a4 + 60132) = 1;
    *(_DWORD *)(a4 + 60148) = v157;
    double v103 = *(double *)v158;
    *(double *)(a4 + 60152) = *(double *)v158 * 299792458.0;
    double v104 = *(double *)&v151 * 8.98755179e16;
    *(double *)(a4 + 60160) = *(double *)&v151 * 8.98755179e16;
    *(void *)(a4 + 60184) = 0x4030000000000000;
    *(_DWORD *)(a4 + 60140) = v163;
    if (v104 < v10[87] * v10[87])
    {
      uint64_t v105 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v105 + 16) && *(int *)v105 >= 3)
      {
        int v106 = (int)*(double *)(v105 + 40) + 604800 * *(__int16 *)(v105 + 32);
        if (v106 <= 0) {
          int v107 = v106;
        }
        else {
          int v107 = v106 - 1800;
        }
      }
      else
      {
        int v107 = 0;
      }
      Core_Save_Clk_Drift(1, v107, v103);
      EvLog_v("NK_Get_Ext_Meas: Core_Save_Clk_Drift %g, Sigma(m/s) %g < %g", v103 * 1000000000.0, sqrt(*(double *)(a4 + 60160)), v10[87]);
    }
  }
  *(void *)&v158[0] = 0;
  *(void *)&long long v163 = 0;
  *long long v102 = 0;
  if (Core_Get_Speed(a1, &v157, (double *)v158, (double *)&v163, (double *)&v151))
  {
    unsigned int v108 = v157;
    unsigned int v109 = a1 - v157;
    if ((int)(a1 - v157) < 0) {
      unsigned int v109 = v157 - a1;
    }
    if (v109 <= 0x1F4)
    {
      *long long v102 = 1;
      *(_DWORD *)(a4 + 60532) = 1;
      *(_DWORD *)(a4 + 60544) = v108;
      uint64_t v110 = v163;
      *(void *)(a4 + 60552) = *(void *)&v158[0];
      *(void *)(a4 + 60560) = v110;
      *(void *)(a4 + 60584) = 0x4030000000000000;
    }
  }
  *(void *)&long long v163 = 0;
  double v156 = 0.0;
  *(unsigned char *)(a4 + 60600) = 0;
  if (Core_Get_GSpeed(a1, &v157, (double *)&v163, &v156, &v160))
  {
    unsigned int v111 = v157;
    unsigned int v112 = a1 - v157;
    if ((int)(a1 - v157) < 0) {
      unsigned int v112 = v157 - a1;
    }
    if (v112 <= 0x1F4)
    {
      *(unsigned char *)(a4 + 60600) = 1;
      *(_DWORD *)(a4 + 60604) = 1;
      *(_DWORD *)(a4 + 60616) = v111;
      double v113 = v156;
      *(void *)(a4 + 60624) = v163;
      *(double *)(a4 + 60632) = v113;
      *(void *)(a4 + 60656) = 0x4030000000000000;
    }
  }
  if (*(_DWORD *)(a5 + 20) < 5u)
  {
    memset(v158, 0, 24);
    if (Core_Get_ExtA_AT_Vel(1000, (uint64_t)v158))
    {
      *(unsigned char *)(v9 + 80) = 1;
      *(unsigned char *)(v9 + 88) = 1;
      *(_DWORD *)(v9 + 84) = 0;
      long long v114 = *(_DWORD **)(p_api + 8);
      if (*v114) {
        int v115 = LODWORD(v158[0]) + *v114 - v114[4];
      }
      else {
        int v115 = 0;
      }
      *(_DWORD *)(v9 + 92) = a1 - v115;
      double v116 = *(double *)&v158[1] * *(double *)&v158[1];
      if (*(unsigned char *)(a4 + 60600) && *(double *)(a4 + 60632) < v116)
      {
        *(unsigned char *)(v9 + 88) = 0;
        if (*(_DWORD *)(a4 + 60604) == 1)
        {
          *(_DWORD *)(v9 + 84) = 30;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: EXTA VA Along-Track Speed rejected - Worse Sigma Unc than Existing EXT Ground Speed Aiding [%d], %f > %f");
        }
        else
        {
          *(_DWORD *)(v9 + 84) = 31;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: EXTA VA Along-Track Speed rejected - Worse Sigma Unc than Existing INT Ground Speed Aiding [%d], %f > %f");
        }
      }
      else if (*v101 == 1 {
             && *(unsigned char *)(a4 + 59964)
      }
             && (*((double *)v158 + 1) >= 3.0 || *((double *)v158 + 1) >= *(double *)&v158[1] * 3.0))
      {
        *(unsigned char *)(v9 + 88) = 0;
        *(_DWORD *)(v9 + 84) = 28;
        EvCrt_v("Set_ExtA_VA_Horz_Spd: VA Along-Track Speed rejected - Discrepancy with CTXT Static Status, AT Spd %f  Sigma %f");
      }
      else
      {
        long long v151 = 0uLL;
        *(void *)&long long v152 = 0;
        if (Core_Get_ExtA_SpdC(120000, (uint64_t)&v151)
          && ((long long v117 = *(_DWORD **)(p_api + 8), !*v117) ? (v118 = 0) : (v118 = v117[4] - (v151 + *v117)),
              (int)(v118 + a1) <= SDWORD1(v151)
           && (*((double *)v158 + 1) > *(double *)&v152 || *((double *)v158 + 1) < *((double *)&v151 + 1))))
        {
          *(unsigned char *)(v9 + 88) = 0;
          *(_DWORD *)(v9 + 84) = 27;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: VA Along-Track Speed rejected - Out of Speed constrains, AT Spd %f  SpdC %f %f");
        }
        else
        {
          *(unsigned char *)(a4 + 60600) = 1;
          *(_DWORD *)(a4 + 60616) = v115;
          *(void *)(a4 + 60624) = *((void *)&v158[0] + 1);
          *(double *)(a4 + 60632) = v116;
          *(void *)(a4 + 60604) = 0x400000001;
          *(void *)(a4 + 60656) = 0x4030000000000000;
        }
      }
    }
    if (*(_DWORD *)(a5 + 20) <= 4u)
    {
      memset(v158, 0, 24);
      if (Core_Get_ExtA_V_Vel(1000, (uint64_t)v158))
      {
        *(unsigned char *)(v9 + 96) = 1;
        *(unsigned char *)(v9 + 104) = 1;
        *(_DWORD *)(v9 + 100) = 0;
        long long v119 = *(_DWORD **)(p_api + 8);
        if (*v119) {
          int v120 = LODWORD(v158[0]) + *v119 - v119[4];
        }
        else {
          int v120 = 0;
        }
        *(_DWORD *)(v9 + 108) = a1 - v120;
        double v121 = *(double *)&v158[1];
        if (*v101 == 1
          && *(unsigned char *)(a4 + 59964)
          && ((v122 = *((double *)v158 + 1), double v123 = fabs(*((double *)v158 + 1)), v123 >= 3.0)
           || v123 >= *(double *)&v158[1] * 3.0))
        {
          *(unsigned char *)(v9 + 104) = 0;
          *(_DWORD *)(v9 + 100) = 32;
          EvCrt_v("Set_ExtA_VA_Vert_Vel: VA Vert Velocity rejected - Discrepancy with CTXT Static Status, Vert vel %f  Sigma %f", v122, v121);
        }
        else
        {
          *(unsigned char *)(v11 + 200) = 1;
          *(_DWORD *)(v11 + 220) = v120;
          *(void *)(v11 + 224) = *((void *)&v158[0] + 1);
          *(double *)(v11 + 232) = v121 * v121;
          *(void *)(v11 + 204) = 0x400000001;
          *(void *)(v11 + 256) = 0x4030000000000000;
        }
      }
    }
  }
  *(void *)&long long v151 = 0;
  double v160 = 0.0;
  double v156 = 0.0;
  *(unsigned char *)(a4 + 60672) = 0;
  uint64_t result = (char *)Core_Get_Track(a1, &v157, (double *)&v151, &v156, &v160, (double *)&v163);
  if (result)
  {
    unsigned int v125 = v157;
    unsigned int v126 = a1 - v157;
    if ((int)(a1 - v157) < 0) {
      unsigned int v126 = v157 - a1;
    }
    if (v126 <= 0x1F4)
    {
      *(unsigned char *)(a4 + 60672) = 1;
      *(_DWORD *)(a4 + 60676) = 1;
      *(_DWORD *)(a4 + 60688) = v125;
      double v127 = v160;
      *(void *)(a4 + 60696) = v151;
      *(double *)(a4 + 60704) = v127;
      *(void *)(a4 + 60728) = 0x4030000000000000;
      *(double *)(a4 + 60744) = v156;
    }
  }
  if (*(_DWORD *)(a5 + 20) < 5u)
  {
    memset(v158, 0, 24);
    uint64_t result = (char *)Core_Get_ExtA_Heading(1000, (uint64_t)v158);
    if (result)
    {
      *(unsigned char *)(v9 + 112) = 1;
      *(unsigned char *)(v9 + 120) = 1;
      *(_DWORD *)(v9 + 116) = 0;
      long long v128 = *(_DWORD **)(p_api + 8);
      if (*v128) {
        int v129 = LODWORD(v158[0]) + *v128 - v128[4];
      }
      else {
        int v129 = 0;
      }
      *(_DWORD *)(v9 + 124) = a1 - v129;
      double v130 = *(double *)&v158[1] * *(double *)&v158[1];
      if (*(unsigned char *)(a4 + 60672) && *(double *)(a4 + 60704) < v130)
      {
        *(unsigned char *)(v9 + 120) = 0;
        if (*(_DWORD *)(a4 + 60676) == 1)
        {
          *(_DWORD *)(v9 + 116) = 36;
          uint64_t result = EvCrt_v("Set_ExtA_VA_Heading: EXTA VA Heading rejected - Worse Sigma Unc than Existing EXT Track Aiding [%d], %f > %f");
        }
        else
        {
          *(_DWORD *)(v9 + 116) = 37;
          uint64_t result = EvCrt_v("Set_ExtA_VA_Heading: EXTA VA Heading rejected - Worse Sigma Unc than Existing INT Track Aiding [%d], %f > %f");
        }
      }
      else
      {
        *(unsigned char *)(a4 + 60672) = 1;
        *(_DWORD *)(a4 + 60688) = v129;
        *(void *)(a4 + 60696) = *((void *)&v158[0] + 1);
        *(double *)(a4 + 60704) = v130;
        *(void *)(a4 + 60712) = *(void *)(a4 + 1856);
        *(void *)(a4 + 60676) = 0x400000001;
        *(void *)(a4 + 60728) = 0x4030000000000000;
        *(void *)(a4 + 60744) = 0x3FF0000000000000;
      }
    }
    if (*(_DWORD *)(a5 + 20) <= 4u)
    {
      memset(v158, 0, 24);
      uint64_t result = (char *)Core_Get_ExtA_SpdC(120000, (uint64_t)v158);
      if (result)
      {
        int v131 = v158[0];
        uint64_t result = (char *)mach_continuous_time();
        int v132 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)(unint64_t)result) - v131;
        if (v132 >= SDWORD1(v158[0]))
        {
          *(_DWORD *)(v9 + 132) = 2;
        }
        else
        {
          *(unsigned char *)long long v10 = 1;
          *((_DWORD *)v10 + 1) = 1;
        }
        long long v136 = *(_DWORD **)(p_api + 8);
        if (*v136) {
          int v137 = *v136 + v131 - v136[4];
        }
        else {
          int v137 = 0;
        }
        *((_DWORD *)v10 + 2) = v137;
        *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)v158 + 8);
      }
      else
      {
        if (!*(unsigned char *)(a4 + 60600) || *(_DWORD *)(a4 + 60604) != 1 || *(_DWORD *)(a4 + 60608) != 4)
        {
LABEL_301:
          if (*(unsigned char *)v10)
          {
            double v138 = v10[2];
            double v139 = *(double *)(a4 + 1848);
            if (v138 <= v139 + 0.3
              || (*(unsigned char *)long long v10 = 0,
                  *(_DWORD *)(v9 + 132) = 41,
                  uint64_t result = EvCrt_v("NK_Get_Ext_Meas:  Speed Constraint Rejected:  Lower Limit > 2D_Speed+0.3 m/s, %f > %f", v138, v139), *(unsigned char *)v10))
            {
              double v140 = v10[3];
              double v141 = *(double *)(a4 + 1840);
              if (v140 < v141 + -0.3)
              {
                *(unsigned char *)long long v10 = 0;
                *(_DWORD *)(v9 + 132) = 42;
                return EvCrt_v("NK_Get_Ext_Meas:  Speed Constraint Rejected:  Upper Limit < 3D_Speed-0.3 m/s, %f < %f", v140, v141);
              }
            }
          }
          return result;
        }
        *(unsigned char *)long long v10 = 1;
        int v133 = *(_DWORD *)(a4 + 60616);
        *((_DWORD *)v10 + 1) = 2;
        *((_DWORD *)v10 + 2) = v133;
        double v134 = *(double *)(a4 + 60624);
        double v135 = sqrt(*(double *)(a4 + 60632)) * 3.0;
        v10[2] = fmax(v134 - v135, 0.0);
        v10[3] = fmin(v134 + v135, 12.0);
        int v132 = a1 - v133;
      }
      *(unsigned char *)(v9 + 128) = 1;
      *(_DWORD *)(v9 + 140) = v132;
      goto LABEL_301;
    }
  }
  return result;
}

uint64_t XofConstellationHeader::XofConstellationHeader(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  for (uint64_t i = 0; i != 336; i += 48)
  {
    uint64_t v4 = result + i;
    *(_WORD *)(v4 + 4) = 0;
    *(_DWORD *)uint64_t v4 = 0;
    *(_OWORD *)(v4 + 8) = 0uLL;
    *(_OWORD *)(v4 + 24) = 0uLL;
    *(void *)(v4 + 40) = 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = v6 + v5;
    *(unsigned char *)uint64_t v2 = *(unsigned char *)(v6 + v5 + 3);
    *(unsigned char *)(v2 + 1) = *(unsigned char *)(v6 + v5 + 35);
    *(unsigned char *)(v2 + 2) = *(unsigned char *)(v6 + v5 + 67);
    *(unsigned char *)(v2 + 3) = *(unsigned char *)(v6 + v5 + 99);
    *(unsigned char *)(v2 + 4) = *(unsigned char *)(v6 + v5 + 131);
    uint64_t v8 = *(void *)(v6 + v5 + 304);
    *(void *)(v2 + 8) = *(void *)(v6 + v5 + 248);
    *(void *)(v2 + 16) = v8;
    uint64_t v9 = *(void *)(v6 + v5 + 416);
    *(void *)(v2 + 24) = *(void *)(v6 + v5 + 360);
    *(void *)(v2 + 32) = v9;
    v5 += 504;
    *(void *)(v2 + 40) = *(void *)(v7 + 472);
    v2 += 48;
  }
  while (v5 != 3528);
  return result;
}

uint64_t XofConstellationHeaderCodec::DecodeFromHexData(uint64_t *a1, void *a2, _DWORD *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4) {
    return 1;
  }
  while (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)v3, a2, a3) == 1)
  {
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 32), a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 64), a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 96), a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 128), a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(v3 + 160), a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(v3 + 192), a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 224, a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 280, a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 336, a2, a3) != 1) {
      break;
    }
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 392, a2, a3) != 1) {
      break;
    }
    uint64_t v7 = v3 + 448;
    if (XofIntegralType<unsigned long long>::DecodeFromHexData(v3 + 448, a2, a3) != 1) {
      break;
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      unint64_t v9 = *(char *)(v3 + 3);
      long long v10 = "   ";
      if (v9 <= 7) {
        long long v10 = off_2655E6EB0[v9];
      }
      double v11 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      if (v15 >= 0) {
        unsigned int v12 = __p;
      }
      else {
        unsigned int v12 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Decoded XOF Header constellation data for [%s]\n", (unint64_t)(v11 * (double)v8), "GNC", 68, "DecodeFromHexData", (const char *)v12);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    v3 += 504;
    if (v7 + 56 == v4) {
      return 1;
    }
  }
  return 5;
}

uint64_t XofHeader::XofHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)(a1 + 16);
  *(_WORD *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  do
  {
    uint64_t v6 = a1 + v4;
    *(_WORD *)(v6 + 20) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 24) = 0uLL;
    *(_OWORD *)(v6 + 40) = 0uLL;
    v4 += 48;
    *(void *)(v6 + 56) = 0;
  }
  while (v4 != 336);
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_WORD *)a1 = *(_WORD *)(a2 + 6);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 38);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 142);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 180);
  XofConstellationHeader::XofConstellationHeader((uint64_t)__src, (uint64_t *)(a2 + 208));
  memcpy(v5, __src, 0x150uLL);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 420);
  return a1;
}

BOOL XofHeaderCodec::Decode(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)a1, a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 32), a2, a3) != 1
    || XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 64), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 104), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 136), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<5ul,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofConstellationHeaderCodec,XofIntegralType<unsigned long long>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>>(a1, a2, a3);
}

uint64_t XofHeaderCodec::DecodeXofFormatVersion(uint64_t a1, void *a2, _WORD *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "formatVersion");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)v10, &__p, 1, 3, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v8 = 0;
  if (XofIntegralType<unsigned short>::DecodeFromHexData(v10, a2, &v8) == 1)
  {
    *a3 = v10[3];
    uint64_t v5 = 1;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Could not decode XOF format version!\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 69, "DecodeXofFormatVersion");
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    uint64_t v5 = 5;
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  return v5;
}

void sub_263C71AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned short>::DecodeFromHexData(unsigned __int16 *a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 31) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 2uLL, (unint64_t *)__str)) {
    return 5;
  }
  unsigned __int16 v8 = *(_WORD *)__str;
  a1[3] = *(_WORD *)__str;
  unint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  if (*((char *)a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((void *)a1 + 2));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 4);
  }
  int v13 = XofBaseType::ValidateUnsignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *a3 += 2;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C71CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

XofConstellationHeaderCodec::Payload *std::vector<XofConstellationHeaderCodec::Payload>::vector(XofConstellationHeaderCodec::Payload *a1, unint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  if (a2)
  {
    std::vector<XofConstellationHeaderCodec::Payload>::__vallocate[abi:ne180100](a1, a2);
    std::vector<XofConstellationHeaderCodec::Payload>::__construct_at_end(a1, a2);
  }
  return a1;
}

void sub_263C71D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<XofConstellationHeaderCodec::Payload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<XofConstellationHeaderCodec::Payload>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x82082082082083) {
    std::vector<XofConstellationHeaderCodec::Payload>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XofConstellationHeaderCodec::Payload>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[504 * v4];
  return result;
}

XofConstellationHeaderCodec::Payload *std::vector<XofConstellationHeaderCodec::Payload>::__construct_at_end(XofConstellationHeaderCodec::Payload *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = v3 + 504 * a2;
    uint64_t v5 = 504 * a2;
    do
    {
      *(void *)(v3 + 496) = 0;
      *(_OWORD *)(v3 + 464) = 0u;
      *(_OWORD *)(v3 + 480) = 0u;
      *(_OWORD *)(v3 + 432) = 0u;
      *(_OWORD *)(v3 + 448) = 0u;
      *(_OWORD *)(v3 + 400) = 0u;
      *(_OWORD *)(v3 + 416) = 0u;
      *(_OWORD *)(v3 + 368) = 0u;
      *(_OWORD *)(v3 + 384) = 0u;
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      *(_OWORD *)(v3 + 304) = 0u;
      *(_OWORD *)(v3 + 320) = 0u;
      *(_OWORD *)(v3 + 272) = 0u;
      *(_OWORD *)(v3 + 288) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      uint64_t result = XofConstellationHeaderCodec::Payload::Payload((XofConstellationHeaderCodec::Payload *)v3);
      v3 += 504;
      v5 -= 504;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *((void *)v2 + 1) = v3;
  return result;
}

void sub_263C71EC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<XofConstellationHeaderCodec::Payload>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<XofConstellationHeaderCodec::Payload>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x82082082082083) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(504 * a2);
}

XofConstellationHeaderCodec::Payload *XofConstellationHeaderCodec::Payload::Payload(XofConstellationHeaderCodec::Payload *this)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v64, "constId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v65, &v64, 0, 6, 0);
  std::string::basic_string[abi:ne180100]<0>(&v60, "brdcstAlmNumSats");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v61, &v60, 0, 197, 0);
  std::string::basic_string[abi:ne180100]<0>(&v56, "brdcstEphNumSats");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v57, &v56, 0, 197, 0);
  std::string::basic_string[abi:ne180100]<0>(&v52, "extEphNumSats");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v53, &v52, 0, 197, 0);
  std::string::basic_string[abi:ne180100]<0>(&v48, "extEphNumBlocks");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v49, &v48, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v44, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v45, &v44, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v40, "reserved2");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v41, &v40, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v36, "extEphprnBitmask");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v37, &v36, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v32, "l1CABrdcstingSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v33, &v32, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v28, "l5BrdcstingSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v29, &v28, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v24, "l1CADoNotUseSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v25, &v24, 0, -1, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "l5DoNotUseSats");
  XofIntegralType<unsigned long long>::XofIntegralType((uint64_t)v21, &__p, 0, -1, 0);
  *(_DWORD *)this = v65;
  *(_OWORD *)((char *)this + 8) = v66;
  *((void *)this + 3) = v67;
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  *((_DWORD *)this + 8) = v61;
  *(_OWORD *)((char *)this + 40) = v62;
  *((void *)this + 7) = v63;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  *((_DWORD *)this + 16) = v57;
  long long v2 = v58;
  *((void *)this + 11) = v59;
  *(_OWORD *)((char *)this + 72) = v2;
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  *((_DWORD *)this + 24) = v53;
  long long v3 = v54;
  *((void *)this + 15) = v55;
  *(_OWORD *)((char *)this + 104) = v3;
  long long v54 = 0uLL;
  uint64_t v55 = 0;
  *((_DWORD *)this + 32) = v49;
  long long v4 = v50;
  *((void *)this + 19) = v51;
  *(_OWORD *)((char *)this + 136) = v4;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  *((_DWORD *)this + 40) = v45;
  uint64_t v5 = v47;
  *(_OWORD *)((char *)this + 168) = v46;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  uint64_t v6 = v41;
  uint64_t v7 = v43;
  *((void *)this + 23) = v5;
  *((void *)this + 24) = v6;
  long long v8 = v42;
  *((void *)this + 27) = v7;
  *(_OWORD *)((char *)this + 200) = v8;
  long long v42 = 0uLL;
  uint64_t v43 = 0;
  long long v9 = v37[1];
  *((_OWORD *)this + 14) = v37[0];
  *((_OWORD *)this + 15) = v9;
  long long v10 = v38;
  *((void *)this + 34) = v39;
  *((_OWORD *)this + 16) = v10;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  long long v11 = v33[1];
  *(_OWORD *)((char *)this + 280) = v33[0];
  *(_OWORD *)((char *)this + 296) = v11;
  long long v12 = v34;
  *((void *)this + 41) = v35;
  *(_OWORD *)((char *)this + 312) = v12;
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  long long v13 = v29[1];
  *((_OWORD *)this + 21) = v29[0];
  *((_OWORD *)this + 22) = v13;
  long long v14 = v30;
  *((void *)this + 48) = v31;
  *((_OWORD *)this + 23) = v14;
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  long long v15 = v25[1];
  *(_OWORD *)((char *)this + 392) = v25[0];
  *(_OWORD *)((char *)this + 408) = v15;
  long long v16 = v26;
  *((void *)this + 55) = v27;
  *(_OWORD *)((char *)this + 424) = v16;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  long long v17 = v21[1];
  *((_OWORD *)this + 28) = v21[0];
  *((_OWORD *)this + 29) = v17;
  long long v18 = v22;
  *((void *)this + 62) = v23;
  *((_OWORD *)this + 30) = v18;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_263C724C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (*(char *)(v82 - 193) < 0) {
    operator delete(*(void **)(v82 - 216));
  }
  if (*(char *)(v82 - 225) < 0) {
    operator delete(*(void **)(v82 - 248));
  }
  if (*(char *)(v82 - 137) < 0) {
    operator delete(*(void **)(v82 - 160));
  }
  if (*(char *)(v82 - 169) < 0) {
    operator delete(*(void **)(v82 - 192));
  }
  if (*(char *)(v82 - 81) < 0) {
    operator delete(*(void **)(v82 - 104));
  }
  if (*(char *)(v82 - 113) < 0) {
    operator delete(*(void **)(v82 - 136));
  }
  if (*(char *)(v82 - 25) < 0) {
    operator delete(*(void **)(v82 - 48));
  }
  if (*(char *)(v82 - 57) < 0) {
    operator delete(*(void **)(v82 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263C72684()
{
}

void sub_263C7268C()
{
}

void sub_263C72694()
{
}

void sub_263C7269C()
{
}

void sub_263C726A4()
{
}

void sub_263C726AC()
{
}

void sub_263C726B4()
{
}

void sub_263C726BC()
{
}

void sub_263C726C4()
{
}

void sub_263C726CC()
{
}

void sub_263C726D4()
{
}

void sub_263C726DC()
{
}

void sub_263C726E4()
{
}

void sub_263C726EC()
{
}

void sub_263C726F4()
{
}

uint64_t XofIntegralType<unsigned char>::XofIntegralType(uint64_t a1, const std::string *a2, char a3, char a4, char a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(unsigned char *)a1 = a4;
  *(unsigned char *)(a1 + 1) = a3;
  *(unsigned char *)(a1 + 2) = a5;
  *(unsigned char *)(a1 + 3) = a5;
  return a1;
}

void sub_263C72794(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned long long>::XofIntegralType(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::string::operator=((std::string *)(a1 + 32), a2);
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a5;
  return a1;
}

void sub_263C72840(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<XofConstellationHeaderCodec::Payload>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>>::~__tuple_impl(v4 - 504);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>,XofIntegralType<unsigned long long>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 503) < 0) {
    operator delete(*(void **)(a1 + 480));
  }
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t XofIntegralType<unsigned char>::DecodeFromHexData(unsigned __int8 *a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if (a2[1] - *a2 == v5)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = (const char *)(a1 + 8);
      if ((char)a1[31] < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 1uLL, (unint64_t *)__str)) {
    return 5;
  }
  unsigned __int8 v8 = __str[0];
  a1[3] = __str[0];
  unint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  if ((char)a1[31] < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((void *)a1 + 2));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 8);
  }
  int v13 = XofBaseType::ValidateUnsignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  ++*a3;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C72C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unsigned __int8 v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t XofIntegralType<unsigned long long>::DecodeFromHexData(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 7)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      std::string::size_type v7 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        std::string::size_type v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer(a1, a2, v5, 8uLL, (unint64_t *)__str)) {
    return 5;
  }
  unint64_t v8 = *(void *)__str;
  *(void *)(a1 + 24) = *(void *)__str;
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 32);
  }
  int v13 = XofBaseType::ValidateUnsignedRange(a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *a3 += 8;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C72EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned int>::DecodeFromHexData(unsigned int *a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 3)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      std::string::size_type v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 39) < 0) {
        std::string::size_type v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 4uLL, (unint64_t *)__str)) {
    return 5;
  }
  unsigned int v8 = *(_DWORD *)__str;
  a1[3] = *(_DWORD *)__str;
  unint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  if (*((char *)a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 2), *((void *)a1 + 3));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 4);
  }
  int v13 = XofBaseType::ValidateUnsignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *a3 += 4;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C7308C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL XofGenericCodec::Decode<5ul,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofConstellationHeaderCodec,XofIntegralType<unsigned long long>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 168), a2, a3) == 1
      && XofConstellationHeaderCodec::DecodeFromHexData((uint64_t *)(a1 + 208), a2, a3) == 1
      && XofIntegralType<unsigned long long>::DecodeFromHexData(a1 + 232, a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 288), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 328), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 368), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 408), a2, a3) == 1;
}

uint64_t XofIntegralType<unsigned short>::XofIntegralType(uint64_t a1, const std::string *a2, __int16 a3, __int16 a4, __int16 a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(_WORD *)a1 = a4;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a5;
  *(_WORD *)(a1 + 6) = a5;
  return a1;
}

void sub_263C73254(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double BDS_BGTOInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  double v3 = (double)*(__int16 *)(a1 + 20) * 4.4408921e-16;
  *(double *)(a2 + 16) = (double)v2 * 2.91038305e-11 + (double)*(__int16 *)(a1 + 24) * 2.91038305e-11;
  *(double *)(a2 + 24) = v3;
  double result = (double)*(char *)(a1 + 22) * 3.38813179e-21;
  *(double *)(a2 + 32) = result;
  return result;
}

BOOL AzEl_SinCos(double *a1, uint64_t a2, uint64_t a3)
{
  v12[1] = *(double *)MEMORY[0x263EF8340];
  double v5 = a1[2];
  *(double *)(a3 + 8) = -v5;
  if (v5 <= -1.0)
  {
    unint64_t v7 = 0x3FF0000000000000;
LABEL_6:
    *(void *)(a3 + 8) = v7;
    double v6 = 0.0;
    goto LABEL_7;
  }
  if (v5 >= 1.0)
  {
    unint64_t v7 = 0xBFF0000000000000;
    goto LABEL_6;
  }
  double v6 = sqrt(v5 * -v5 + 1.0);
LABEL_7:
  *(double *)(a3 + 16) = v6;
  v12[0] = 0.0;
  BOOL result = R8_EQ((const double *)(a3 + 16), v12);
  if (result) {
    goto LABEL_8;
  }
  double v10 = a1[1] / v6;
  *(double *)(a2 + 8) = v10;
  double v11 = *a1 / v6;
  *(double *)(a2 + 16) = v11;
  if (v10 >= 1.0)
  {
    long long v9 = xmmword_263D81F90;
    goto LABEL_16;
  }
  if (v10 <= -1.0)
  {
    long long v9 = xmmword_263D81FA0;
    goto LABEL_16;
  }
  if (v11 >= 1.0)
  {
LABEL_8:
    long long v9 = xmmword_263D81FB0;
  }
  else
  {
    if (v11 > -1.0) {
      return result;
    }
    long long v9 = xmmword_263D81FC0;
  }
LABEL_16:
  *(_OWORD *)(a2 + 8) = v9;
  return result;
}

void *NK_Obs_Equ_SV(void *result, int a2, __int16 a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(a5 + 96) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t v8 = 4;
  if (a2) {
    int v9 = 4;
  }
  else {
    int v9 = 2;
  }
  if (result != 2) {
    int v9 = (int)result;
  }
  if ((v9 - 3) < 2)
  {
    uint64_t v15 = 0;
    *(double *)(a5 + 32) = a6;
    *(void *)(a5 + 48) = *(void *)(a4 + 24);
    *(void *)(a5 + 56) = *(void *)(a4 + 32);
    *(void *)(a5 + 64) = *(void *)(a4 + 40);
    do
    {
      *(double *)(a5 + 72 + v15) = -(*(double *)(a4 + v15) * a6);
      v15 += 8;
    }
    while (v15 != 24);
  }
  else
  {
    if (v9 == 2)
    {
      double v11 = 1.0;
      uint64_t v12 = 11;
      uint64_t v13 = 10;
      uint64_t v14 = 9;
    }
    else
    {
      if (v9 != 1) {
        return result;
      }
      unsigned __int8 v10 = HIBYTE(a3);
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      switch((char)a3)
      {
        case 0:
          BOOL result = EvCrt_Illegal_switch_case("NK_Obs_Equ_SV", 0x6Du);
          break;
        case 1:
        case 3:
        case 5:
        case 6:
        case 7:
          *(void *)a5 = 0x3FF0000000000000;
          break;
        case 2:
          *(void *)(a5 + 8) = 0x3FF0000000000000;
          break;
        case 4:
          *(void *)(a5 + 16) = 0x3FF0000000000000;
          break;
        default:
          break;
      }
      if (v10 > 0xFu || ((1 << v10) & 0xDD77) == 0) {
        *(void *)(a5 + 24) = 0x3FF0000000000000;
      }
      double v11 = *(double *)(a4 + 48);
      uint64_t v12 = 8;
      uint64_t v13 = 7;
      uint64_t v14 = 6;
      uint64_t v8 = 5;
    }
    *(double *)(a5 + 8 * v8) = v11;
    *(double *)(a5 + 8 * v14) = -*(double *)a4;
    *(double *)(a5 + 8 * v13) = -*(double *)(a4 + 8);
    *(double *)(a5 + 8 * v12) = -*(double *)(a4 + 16);
  }
  return result;
}

uint64_t GN_AGPS_Set_Alm_El(unsigned __int8 *a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Alm_El");
  if (result)
  {
    int v3 = a1[1];
    if (g_Logging_Cfg < 5) {
      EvLog_d("GN_AGPS_Set_Alm_El: ", a1[1]);
    }
    else {
      EvLog_v("GN_AGPS_Set_Alm_El: %3d %2d %3d %3d %5d %5d %5d %5d %5d %8d %8d %8d %8d %d", *a1, v3, a1[2], a1[3], *((__int16 *)a1 + 2), *((__int16 *)a1 + 3), *((unsigned __int16 *)a1 + 4), *((__int16 *)a1 + 5), *((__int16 *)a1 + 6), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7), a1[32]);
    }
    if ((v3 + 53) >= 0xF6u) {
      int v4 = 5;
    }
    else {
      int v4 = (v3 - 1) < 0x20;
    }
    if (!v4)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: Sat_ID = %d, Out of range!");
      return 0;
    }
    unsigned int v5 = *((__int16 *)a1 + 2);
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 2) - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: af0 = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    unsigned int v6 = *((__int16 *)a1 + 3);
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 3) - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: af1 = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    if (v4 == 5) {
      double v7 = 0.1;
    }
    else {
      double v7 = 0.03;
    }
    unsigned int v8 = *((unsigned __int16 *)a1 + 4);
    double v9 = (double)v8 * 0.000000476837158;
    if (v9 < 0.0)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: e = %g < %g, Unrealistic value!");
      return 0;
    }
    if (v9 > v7)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: e = %g > %g, Unrealistic value!");
      return 0;
    }
    double v10 = 0.0;
    if ((v3 + 53) >= 0xF6u) {
      double v10 = 0.000000314159265;
    }
    __int16 v11 = *((_WORD *)a1 + 6);
    double v12 = (double)v11 * 1.14290475e-11;
    if (v12 < -0.00000198862815)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: OmegaDot = %e < %e rad/s, Unrealistic value!");
      return 0;
    }
    if (v12 > v10)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: OmegaDot = %e > %e rad/s, Unrealistic value!");
      return 0;
    }
    unsigned int v13 = *((_DWORD *)a1 + 4);
    if (HIBYTE(v13))
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %u >=2^24,  Out of range !");
      return 0;
    }
    if (v4 == 5) {
      double v14 = 7000.0;
    }
    else {
      double v14 = 5800.0;
    }
    double v15 = (double)v13 * 0.00048828125;
    if (v15 < 4800.0)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %g < %g, Unrealistic value!");
      return 0;
    }
    if (v15 > v14)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %g > %g, Unrealistic value!");
      return 0;
    }
    int v16 = *((_DWORD *)a1 + 5);
    if ((v16 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: Omega0 = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v17 = *((_DWORD *)a1 + 6);
    if ((v17 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: w = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v18 = *((_DWORD *)a1 + 7);
    if ((v18 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: M0 = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v39 = 0;
    uint64_t v19 = a1[1];
    char v20 = v19 & 0x3F;
    if (v19 == 32) {
      char v20 = 0;
    }
    __int16 v24 = v8;
    char v25 = v20;
    unsigned __int8 v21 = a1[3];
    __int16 v26 = *((_WORD *)a1 + 5);
    unsigned __int8 v27 = v21;
    unsigned __int8 v28 = a1[2];
    __int16 v29 = v11;
    __int16 v30 = v13;
    char v31 = BYTE2(v13);
    __int16 v32 = v16;
    char v33 = BYTE2(v16);
    __int16 v34 = v17;
    char v35 = BYTE2(v17);
    __int16 v36 = v18;
    char v37 = BYTE2(v18);
    char v38 = (32 * v6) | (4 * (v5 & 7));
    LOBYTE(v39) = v6 >> 3;
    BYTE1(v39) = v5 >> 3;
    __int16 v23 = *a1;
    int v22 = 0;
    BYTE2(v39) = a1[32];
    return GN_AGPS_Set_Alm(v19, (uint64_t)&v22);
  }
  return result;
}

void Kep_Calc_SV_Ref_State(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  __int16 v8 = a2;
  if (*(_WORD *)(a4 + 22))
  {
    int v10 = *(_DWORD *)(a4 + 28);
    int v11 = a3 + 604800 * (a2 - *(__int16 *)(a4 + 22)) - v10;
  }
  else
  {
    int v10 = *(_DWORD *)(a4 + 28);
    int v12 = a3 - v10;
    int v13 = a3 - v10 - 604800;
    if (a3 - v10 <= 302399) {
      int v13 = a3 - v10;
    }
    if (v12 < -302400) {
      int v11 = v12 + 604800;
    }
    else {
      int v11 = v13;
    }
  }
  unsigned int v14 = *(_DWORD *)(a4 + 8);
  double v15 = *(double *)(a4 + 184);
  double v16 = v15 * v15;
  double v17 = *(double *)(a4 + 192);
  double v108 = *(double *)(a4 + 104)
       + sqrt(dbl_263D81FD0[v14 - 3 < 2]) / (v15 * (v15 * v15))
       + *(double *)(a4 + 112) * (double)v11 * 0.5;
  double v18 = *(double *)(a4 + 176) + v108 * (double)v11;
  long double v19 = sin(v18);
  unsigned int v20 = 0;
  double v21 = *(double *)(a4 + 224);
  double v22 = v18 + v21 * v19;
  do
  {
    double v23 = v22;
    double v22 = v18 + v21 * sin(v22);
  }
  while (vabdd_f64(v22, v23) > 1.0e-11 && v20++ < 0x13);
  double v25 = 1.0 - v21 * v21;
  double v26 = v16 + v17 * (double)v11;
  long double v27 = tan(v22 * 0.5);
  long double v28 = atan(sqrt((v21 + 1.0) / (1.0 - v21)) * v27);
  double v29 = v28 + v28;
  if (v29 < 0.0) {
    double v29 = v29 + 6.28318531;
  }
  __double2 v30 = __sincos_stret(v29);
  __double2 v31 = __sincos_stret(*(double *)(a4 + 216));
  double v32 = v31.__sinval * v30.__cosval + v30.__sinval * v31.__cosval;
  double v33 = v30.__cosval * v31.__cosval - v30.__sinval * v31.__sinval;
  double v34 = v33 * (v32 + v32);
  if (a1 == 1)
  {
    double v35 = v33 * v33 - v32 * v32;
    double v36 = v35 * *(double *)(a4 + 136) + *(double *)(a4 + 144) * v34;
    double v37 = v36 * v36 * -0.5 + 1.0;
    double v38 = v33 * v36;
    double v104 = v36;
    double v39 = -(v32 * v36);
    double v32 = v38 + v32 * v37;
    double v33 = v39 + v33 * v37;
    double v40 = v35 * *(double *)(a4 + 120) + *(double *)(a4 + 128) * v34;
  }
  else
  {
    double v35 = 0.0;
    double v40 = 0.0;
    double v104 = 0.0;
  }
  double v107 = 1.0 - v21 * v21;
  double v106 = v26;
  double v109 = v21 * v30.__cosval + 1.0;
  double v110 = sqrt(v25);
  double v102 = v34;
  double v103 = v40;
  double v41 = v26 * v25 / v109 + v40;
  double v42 = v33 * v41;
  double v43 = v32 * v41;
  double v44 = *(double *)(a4 + 208);
  double v101 = v35;
  if (a1 == 1)
  {
    double v105 = v35 * *(double *)(a4 + 152) + *(double *)(a4 + 160) * v34;
    double v45 = (double)v11;
    double v44 = v44 + v105 + *(double *)(a4 + 168) * (double)v11;
  }
  else
  {
    double v105 = 0.0;
    double v45 = (double)v11;
  }
  __double2 v46 = __sincos_stret(v44);
  double v47 = dbl_263D81FE0[v14 == 4];
  double v48 = *(double *)(a4 + 232) - v47;
  __double2 v49 = __sincos_stret(*(double *)(a4 + 200) + v48 * v45 - v47 * (double)v10);
  *(double *)a5 = v42 * v49.__cosval - v43 * v46.__cosval * v49.__sinval;
  *(double *)(a5 + 8) = v43 * v46.__cosval * v49.__cosval + v42 * v49.__sinval;
  double v50 = v43 * v46.__sinval;
  *(double *)(a5 + 16) = v43 * v46.__sinval;
  double v51 = v108;
  double v52 = v108 * (v109 * v109) / (v107 * v110) + *(double *)(a4 + 112) * v45 * 0.5;
  double v53 = v52 + v52;
  double v54 = v108 * (v106 * *(double *)(a4 + 224) / v110);
  double v55 = *(double *)(a4 + 192) + v54 * v30.__sinval;
  double v56 = 0.0;
  if (a1 == 1)
  {
    double v57 = *(double *)(a4 + 144) * v101 - *(double *)(a4 + 136) * v102;
    double v58 = *(double *)(a4 + 128) * v101 - *(double *)(a4 + 120) * v102;
    double v59 = v52 + v53 * v57;
    double v55 = v55 + v53 * v58;
    double v60 = *(double *)(a4 + 160) * v101 - *(double *)(a4 + 152) * v102;
    double v61 = *(double *)(a4 + 168) + v53 * v60;
  }
  else
  {
    double v59 = v108 * (v109 * v109) / (v107 * v110) + *(double *)(a4 + 112) * v45 * 0.5;
    double v57 = 0.0;
    double v60 = 0.0;
    double v58 = 0.0;
    double v61 = 0.0;
  }
  double v62 = v55 * v33 - v43 * v59;
  double v63 = v42 * v59 + v55 * v32;
  double v64 = v62 + -(v43 * v48) * v46.__cosval;
  double v65 = v63 * v46.__cosval - v50 * v61 + v42 * v48;
  double v66 = v64 * v49.__cosval - v65 * v49.__sinval;
  double v67 = v49.__cosval * v65 + v64 * v49.__sinval;
  *(double *)(a5 + 24) = v66;
  *(double *)(a5 + 32) = v67;
  double v68 = v46.__cosval * (v43 * v61) + v63 * v46.__sinval;
  *(double *)(a5 + 40) = v68;
  double v69 = v109 * (v30.__sinval * (-(v53 * v108) * *(double *)(a4 + 224)) / (v107 * v110));
  double v70 = v30.__cosval * (v54 * v52);
  if (a1 == 1)
  {
    double v71 = v69 + v69;
    double v72 = v53 * -v53;
    double v70 = v70 + (v69 + v69) * v58 + v72 * v103;
    double v69 = v69 + (v69 + v69) * v57 + v72 * v104;
    double v56 = v105 * v72 + v71 * v60;
  }
  double v73 = v59 * v55;
  double v74 = v33 * v73 + v70 * v32 + v62 * v59 + v69 * v42;
  double v75 = v70 * v33 - v73 * v32 - v63 * v59 - v69 * v43 + -(v63 * v48) * v46.__cosval + v48 * (v43 * v61) * v46.__sinval;
  double v76 = v46.__sinval * -(v63 * v61) + v74 * v46.__cosval - v68 * v61 + -v50 * v56 + v62 * v48;
  double v77 = v49.__cosval * v75 - v48 * v67 - v76 * v49.__sinval;
  double v78 = v49.__sinval * v75 + v48 * v66 + v76 * v49.__cosval;
  *(double *)(a5 + 48) = v77;
  *(double *)(a5 + 56) = v78;
  double v79 = v46.__cosval * ((v63 + v63) * v61) + v74 * v46.__sinval + v43 * v56 * v46.__cosval;
  double v80 = -(v61 * v61);
  double v81 = dbl_263D81FF0[v14 == 4];
  double v82 = v79 + v80 * v50;
  double v83 = dbl_263D82000[v14 == 4];
  *(double *)(a5 + 64) = v82;
  *(double *)(a5 + 72) = v81 * v78 + v83 * -3.0 * v66;
  *(double *)(a5 + 80) = v83 * -3.0 * v67 - v81 * v77;
  *(double *)(a5 + 88) = (v83 * -3.0 - v83) * v68;
  if (a1 != 1)
  {
    if (v11 >= 0) {
      int v87 = 302400;
    }
    else {
      int v87 = -302400;
    }
    int v88 = v87 + v11;
    if (v88 < 0) {
      int v88 = -v88;
    }
    double v85 = (double)v11;
    if (v88 > 0x1E1337F) {
      unsigned int v89 = 65500;
    }
    else {
      unsigned int v89 = v88 / 0x3E8u + 1200;
    }
    double v91 = (double)(v89 * v89);
    goto LABEL_59;
  }
  unint64_t v84 = *(char *)(a4 + 19);
  double v85 = (double)v11;
  if (v84 <= 0xF)
  {
    double v86 = (double *)((char *)&GPS_Legacy_URA_Table + 8 * v84);
LABEL_39:
    double v90 = *v86;
    goto LABEL_43;
  }
  if ((v84 + 16) <= 0x10u)
  {
    double v86 = (double *)((char *)&GPS_Modern_URA_Table + 8 * -(int)v84);
    goto LABEL_39;
  }
  double v90 = 99980001.0;
LABEL_43:
  *(double *)(a5 + 112) = v90;
  if (v11 >= 0) {
    unsigned int v92 = v11;
  }
  else {
    unsigned int v92 = -v11;
  }
  signed int v93 = -30 * *(unsigned __int8 *)(a4 + 18) + v92 / 0x3C;
  if ((*(_DWORD *)(a4 + 4) & 0xFFFFFFFE) == 4 && v14 <= 6 && ((1 << v14) & 0x58) != 0) {
    v93 -= 30 * *(unsigned __int8 *)(a4 + 18);
  }
  if (v93 < 1)
  {
    if (v11 >= 10800 && (v93 == 0 || v93 >= 0xFFFFFFC5))
    {
      double v95 = (double)((v93 + 60) * (v93 + 60)) * 0.00138888889;
      double v91 = v90 + v95 * v95;
LABEL_59:
      *(double *)(a5 + 112) = v91;
      goto LABEL_60;
    }
  }
  else
  {
    BOOL v94 = Is_Eph_Kep_Real((const double *)a4);
    double v51 = v108;
    if (v94) {
      *(double *)(a5 + 112) = *(double *)(a5 + 112) + (double)(v93 * v93) * 0.025 * ((double)(v93 * v93) * 0.025);
    }
  }
  if (v11 >= 14400 && (v93 & 0x80000000) == 0)
  {
    double v91 = *(double *)(a5 + 112) + 25.0;
    goto LABEL_59;
  }
LABEL_60:
  double v96 = v85 + (double)(*(_DWORD *)(a4 + 28) - *(_DWORD *)(a4 + 24));
  double v97 = *(double *)(a4 + 224);
  double v98 = v97 * -4.44280763e-10 * *(double *)(a4 + 184) / (v97 * v30.__cosval + 1.0);
  double v99 = *(double *)(a4 + 48);
  double v100 = v96 * *(double *)(a4 + 56);
  *(double *)(a5 + 96) = *(double *)(a4 + 40) + v96 * (v100 + v99) + v110 * v98 * v30.__sinval;
  *(double *)(a5 + 104) = v99 + v100 * 2.0 + v51 * v98 * (v30.__cosval + v97);
  *(_OWORD *)(a5 + 120) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a5 + 136) = *(_OWORD *)(a4 + 80);
  *(void *)(a5 + 152) = *(void *)(a4 + 96);
  *(_DWORD *)(a5 + 160) = a3;
  *(_WORD *)(a5 + 164) = v8;
  *(_WORD *)(a5 + 166) = *(_WORD *)(a4 + 20);
  *(_DWORD *)(a5 + 176) = a1;
  *(unsigned char *)(a5 + 188) = *(unsigned char *)(a4 + 12);
  *(void *)(a5 + 180) = *(void *)(a4 + 4);
  *(_WORD *)(a5 + 189) = *(_WORD *)(a4 + 16);
}

void GM_Inc_Local_Time(int a1, uint64_t a2)
{
  int v3 = (__int16 *)(a2 + 17956);
  int v4 = a1 - *(_DWORD *)(a2 + 17976);
  *(_DWORD *)(a2 + 17976) = a1;
  Inc_Local_Time(v4, 604800, (double *)(a2 + 17944), (__int16 *)(a2 + 17942));
  Inc_Local_Time(v4, 86400, (double *)(a2 + 17968), v3 + 2);
  int v5 = v3[2];
  if (v5 >= 1462)
  {
    __int16 v6 = *v3;
    if (v5 >= 2922) {
      __int16 v7 = 2922;
    }
    else {
      __int16 v7 = v3[2];
    }
    unsigned __int16 v8 = v5 - v7 + 1460;
    v3[2] = v5 - 1461 * (v8 / 0x5B5u) - 1461;
    *int v3 = v6 + v8 / 0x5B5u + 1;
  }
}

void DD_Assist_QZSS_Data(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = 0;
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v61 = a1 + 3654;
  uint64_t v62 = a1 + 3584;
  uint64_t v59 = a1 + 3644;
  int v60 = a2 - 241;
  do
  {
    if (!*(unsigned char *)(a3[1137] + v6)
      || *((int *)a3 + 29 * v6 + 2289) < 6
      || (v60 - *((_DWORD *)a3 + 29 * v6 + 2288)) <= 0xFFFFF806)
    {
      long long v74 = 0u;
      memset(v75, 0, 19);
      long long v72 = 0u;
      long long v73 = 0u;
      memset(v71, 0, sizeof(v71));
      long long v70 = 0u;
      if (Core_Get_QZSS_Eph((v6 - 63), a2, (int *)&v70))
      {
        uint64_t v7 = a3[1137];
        if (*(unsigned char *)(v7 + v6))
        {
          unsigned __int16 v8 = (char *)a3 + 116 * v6;
          double v9 = (int *)(v8 + 9152);
          int v10 = *((_DWORD *)v8 + 2289);
          if (SDWORD1(v70) <= v10)
          {
            int v11 = *v9;
            BOOL v12 = (int)v70 > *v9 && DWORD1(v70) == v10;
            if (!v12 && (int)a2 - v11 > -1801) {
              goto LABEL_26;
            }
          }
          else
          {
            int v11 = *v9;
          }
          if ((int)v70 - v11 <= 10799 && Is_GPS_BinEph_Real((uint64_t)v9) && !Is_GPS_BinEph_Real((uint64_t)&v70))
          {
            *double v9 = a2;
            goto LABEL_26;
          }
        }
        uint64_t v13 = a3[1129];
        if (!*(unsigned char *)(v13 + v6))
        {
          uint64_t v28 = a3[1139];
          if (*(unsigned char *)(v28 + v6))
          {
            if (*((_DWORD *)a3 + 11 * v6 + 2868) + 100 < (int)a2)
            {
              *(unsigned char *)(a3[1134] + v6) = 0;
              *(unsigned char *)(v28 + v6) = 0;
              *(unsigned char *)(v59 + v6) = -1;
              uint64_t v7 = a3[1137];
              uint64_t v13 = a3[1129];
            }
          }
        }
        long long v14 = v74;
        double v15 = (char *)a3 + 116 * v6;
        *((_OWORD *)v15 + 576) = v73;
        *((_OWORD *)v15 + 577) = v14;
        *((_OWORD *)v15 + 578) = *(_OWORD *)v75;
        long long v16 = v71[0];
        *((_OWORD *)v15 + 572) = v70;
        *((_OWORD *)v15 + 573) = v16;
        long long v17 = v72;
        *((_OWORD *)v15 + 574) = v71[1];
        *((_DWORD *)v15 + 2316) = *(_DWORD *)&v75[16];
        *((_OWORD *)v15 + 575) = v17;
        *(unsigned char *)(a3[1133] + v6) = 1;
        *(unsigned char *)(v7 + v6) = 1;
        *(unsigned char *)(v13 + v6) = 1;
        uint64_t v18 = a3[1131];
        if (*((_DWORD *)v15 + 2289) == 5)
        {
          *(_DWORD *)(v18 + 20 * v6 + 8) = 1;
          *(unsigned char *)(a3[1130] + v6) = 1;
          long double v19 = (_DWORD *)(a3[1132] + 20 * v6 + 8);
        }
        else
        {
          long double v19 = (_DWORD *)(v18 + 20 * v6 + 12);
        }
        *long double v19 = 1;
        if ((int)a2 >= 1)
        {
          *(unsigned char *)(a3[1140] + v6) = 1;
          Core_Save_QZSS_Eph((v6 - 63), 0, (long long *)v15 + 572);
          uint64_t v13 = a3[1129];
        }
        uint64_t v20 = 0;
        LODWORD(v21) = 0;
        uint64_t v22 = p_NV;
        __int16 v23 = *(_WORD *)(v13 + 8);
        *(void *)(p_NV + 6092) = *(void *)v13;
        *(_WORD *)(v22 + 6100) = v23;
        uint64_t v24 = v22 + 6088;
        __int16 v25 = -9871;
        do
        {
          int v26 = *(unsigned __int8 *)(v24 + v20) ^ HIBYTE(v25);
          __int16 v25 = -12691 * (v25 + (*(unsigned __int8 *)(v24 + v20) ^ HIBYTE(v25))) + 22719;
          uint64_t v21 = (v21 + v26);
          ++v20;
        }
        while (v20 != 40);
        *(void *)(v22 + 6080) = v21;
        uint64_t v27 = v62 + 6 * v6;
        *(_DWORD *)uint64_t v27 = 16777472;
        *(_WORD *)(v27 + 4) = 256;
        *(_WORD *)(v61 + 2 * v6) = 256;
      }
    }
LABEL_26:
    ++v6;
  }
  while (v6 != 10);
  uint64_t v29 = a4;
  if ((int)a2 >= 1)
  {
    for (uint64_t i = 0; i != 10; ++i)
    {
      if (*(unsigned char *)(a3[1129] + i)
        && !*(unsigned char *)(*(void *)(v29 + 1616) + i)
        && (!*(unsigned char *)(a3[1138] + i) || (int)a2 - *((_DWORD *)a3 + 29 * i + 2578) >= 241))
      {
        long long v74 = 0u;
        memset(v75, 0, 19);
        long long v72 = 0u;
        long long v73 = 0u;
        memset(v71, 0, sizeof(v71));
        long long v70 = 0u;
        int GPS_BinEph = EE_Get_GPS_BinEph((XofSvcsIf *)(i - 63), a2, (uint64_t)&v70);
        uint64_t v32 = a3[1138];
        if (!GPS_BinEph || (int v33 = v70, *(unsigned char *)(v32 + i)) && (int)v70 <= *((_DWORD *)a3 + 29 * i + 2578))
        {
          *(unsigned char *)(v32 + i) = 0;
        }
        else
        {
          double v34 = (char *)a3 + 116 * i;
          *((_DWORD *)v34 + 2606) = *(_DWORD *)&v75[16];
          long long v35 = v71[0];
          *(_OWORD *)(v34 + 10312) = v70;
          *(_OWORD *)(v34 + 10328) = v35;
          long long v36 = v72;
          *(_OWORD *)(v34 + 10344) = v71[1];
          *(_OWORD *)(v34 + 10360) = v36;
          long long v37 = *(_OWORD *)v75;
          long long v38 = v73;
          *(_OWORD *)(v34 + 10392) = v74;
          *(_OWORD *)(v34 + 10408) = v37;
          *(_OWORD *)(v34 + 10376) = v38;
          *(unsigned char *)(a3[1133] + i) = 1;
          *(unsigned char *)(v32 + i) = 1;
          uint64_t v39 = v62 + 6 * i;
          *(_DWORD *)uint64_t v39 = 16777472;
          *(_WORD *)(v39 + 4) = 256;
          *(_WORD *)(v61 + 2 * i) = 256;
          long long v66 = 0u;
          *(_OWORD *)double v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          v63[0] = v33;
          v63[1] = DWORD1(v70);
          LOBYTE(v64) = BYTE8(v70);
          unsigned int v40 = 21;
          uint64_t v41 = 11;
          double v42 = (char *)v71 + 8;
          *(_WORD *)((char *)&v64 + 1) = *(_WORD *)((char *)&v70 + 9);
          do
          {
            double v43 = (char *)v63 + v41;
            char *v43 = *v42;
            *(_WORD *)(v43 + 1) = *(_WORD *)(v42 + 1);
            v42 += 4;
            --v40;
            v41 += 3;
          }
          while (v40 > 1);
          *(_WORD *)&v67[15] = *(_WORD *)&v75[12];
          int v68 = *(_DWORD *)&v75[14];
          char v69 = v75[18];
          Debug_Log_GPS_Eph(2, i + 193, (uint64_t)v63);
        }
        uint64_t v29 = a4;
      }
    }
  }
  uint64_t v44 = 0;
  long long v70 = 0u;
  memset(v71, 0, 28);
  do
  {
    if (!*(unsigned char *)(a3[1139] + v44) || (int)a2 - *((_DWORD *)a3 + 11 * v44 + 2868) >= 1801)
    {
      *(_OWORD *)((unint64_t)&v70 | 0xC) = 0u;
      *(_OWORD *)(((unint64_t)&v70 | 0xC) + 0x10) = 0u;
      if (Core_Get_QZSS_Alm((v44 - 63), a2, (uint64_t)&v70))
      {
        uint64_t v45 = a3[1139];
        if (!*(unsigned char *)(v45 + v44) || (int)v70 > *((_DWORD *)a3 + 11 * v44 + 2868))
        {
          uint64_t v46 = a3[1129];
          if (!*(unsigned char *)(v46 + v44))
          {
            uint64_t v56 = a3[1137];
            if (*(unsigned char *)(v56 + v44))
            {
              if (*((_DWORD *)a3 + 29 * v44 + 2288) + 100 < (int)a2)
              {
                *(unsigned char *)(a3[1133] + v44) = 0;
                *(unsigned char *)(v56 + v44) = 0;
                uint64_t v57 = v62 + 6 * v44;
                *(_DWORD *)uint64_t v57 = 16777472;
                *(_WORD *)(v57 + 4) = 256;
                *(_WORD *)(v61 + 2 * v44) = 256;
              }
            }
          }
          double v47 = (long long *)((char *)a3 + 44 * v44);
          long long v48 = v71[0];
          v47[717] = v70;
          v47[718] = v48;
          *(long long *)((char *)v47 + 11500) = *(_OWORD *)((char *)v71 + 12);
          *(unsigned char *)(a3[1134] + v44) = 1;
          *(unsigned char *)(v45 + v44) = 1;
          *(unsigned char *)(v46 + v44) = 1;
          if ((int)a2 >= 1)
          {
            Core_Save_QZSS_Alm((v44 - 63), 0, v47 + 717);
            uint64_t v46 = a3[1129];
          }
          uint64_t v49 = 0;
          LODWORD(v50) = 0;
          uint64_t v51 = p_NV;
          __int16 v52 = *(_WORD *)(v46 + 8);
          *(void *)(p_NV + 6092) = *(void *)v46;
          *(_WORD *)(v51 + 6100) = v52;
          uint64_t v53 = v51 + 6088;
          __int16 v54 = -9871;
          do
          {
            int v55 = *(unsigned __int8 *)(v53 + v49) ^ HIBYTE(v54);
            __int16 v54 = -12691 * (v54 + (*(unsigned __int8 *)(v53 + v49) ^ HIBYTE(v54))) + 22719;
            uint64_t v50 = (v50 + v55);
            ++v49;
          }
          while (v49 != 40);
          *(void *)(v51 + 6080) = v50;
          *(unsigned char *)(v59 + v44) = -1;
        }
      }
    }
    ++v44;
  }
  while (v44 != 10);
}

uint64_t Hal34_InitPciGnssDevice(_DWORD *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = 4;
  do
  {
    uint64_t result = Hal29_GetGNSSProxyStatus();
    if (!result)
    {
      g_HalState = 0;
      return result;
    }
    --v2;
  }
  while (v2);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Proxy status failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal34_InitPciGnssDevice");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  *a1 = 6;
  return 4294967290;
}

void gnss::GnssAdaptDevice::setPVTMReport(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(a9 + 24))
  {
    long long v16 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice13setPVTMReportEbbbbbbNSt3__18functionIFvNS1_10unique_ptrINS_3FixENS1_14default_deleteIS4_EEEENS3_INS_17MeasurementReportENS5_IS8_EEEEONS1_6vectorINS_6SvInfoENS1_9allocatorISC_EEEEONSB_INS_23ReceiverBandCorrectionsENSD_ISH_EEEENS3_INS_18TimeConversionInfoENS5_ISL_EEEENS3_INS_24KlobucharModelParametersENS5_ISO_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_4;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v19, a9);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v20, a8);
    char v21 = a2;
    char v22 = a3;
    char v23 = a4;
    char v24 = a5;
    char v25 = a6;
    char v26 = a7;
    dispatch_async(v16, block);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v20);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v19);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v17 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "setPVTMReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C74C78(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDevice13setPVTMReportEbbbbbbNSt3__18functionIFvNS1_10unique_ptrINS_3FixENS1_14default_deleteIS4_EEEENS3_INS_17MeasurementReportENS5_IS8_EEEEONS1_6vectorINS_6SvInfoENS1_9allocatorISC_EEEEONSB_INS_23ReceiverBandCorrectionsENSD_ISH_EEEENS3_INS_18TimeConversionInfoENS5_ISL_EEEENS3_INS_24KlobucharModelParametersENS5_ISO_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v42[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setPVTMReport_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(void *)(a1 + 96))
    {
      if (*(unsigned char *)(v2 + 89))
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v36, (uint64_t)"setPVTMReport_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setPVTMReport_block_invoke", 2056);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v5 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "setPVTMReport_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
      else if ((*(unsigned char *)(a1 + 104) | *(unsigned char *)(a1 + 107) | *(unsigned char *)(a1 + 108) | *(unsigned char *)(a1 + 109)) | (*(unsigned char *)(a1 + 105) | *(unsigned char *)(a1 + 106)))
      {
        if (*(unsigned char *)(a1 + 105) || !*(unsigned char *)(a1 + 106))
        {
          std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
          uint64_t v14 = v2 + 168;
          if (__str != (char *)(v2 + 168))
          {
            double v15 = v41;
            uint64_t v16 = *(void *)(v2 + 192);
            if (v41 == __str)
            {
              if (v16 == v14)
              {
                (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v42);
                (*(void (**)(char *))(*(void *)v41 + 32))(v41);
                uint64_t v41 = 0;
                (*(void (**)(void, char *))(**(void **)(v2 + 192) + 24))(*(void *)(v2 + 192), __str);
                (*(void (**)(void))(**(void **)(v2 + 192) + 32))(*(void *)(v2 + 192));
                *(void *)(v2 + 192) = 0;
                uint64_t v41 = __str;
                (*(void (**)(void *, uint64_t))(v42[0] + 24))(v42, v2 + 168);
                (*(void (**)(void *))(v42[0] + 32))(v42);
              }
              else
              {
                (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 168);
                (*(void (**)(char *))(*(void *)v41 + 32))(v41);
                uint64_t v41 = *(char **)(v2 + 192);
              }
              *(void *)(v2 + 192) = v14;
            }
            else if (v16 == v14)
            {
              (*(void (**)(uint64_t, char *))(*(void *)v14 + 24))(v2 + 168, __str);
              (*(void (**)(void))(**(void **)(v2 + 192) + 32))(*(void *)(v2 + 192));
              *(void *)(v2 + 192) = v41;
              uint64_t v41 = __str;
            }
            else
            {
              uint64_t v41 = *(char **)(v2 + 192);
              *(void *)(v2 + 192) = v15;
            }
          }
          std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](__str);
          *(void *)__str = v2 + 144;
          int v40 = 0;
          std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__str, 8uLL);
          v17.i32[0] = *(_DWORD *)(a1 + 105);
          uint32x4_t v18 = vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v17)));
          v19.i64[0] = v18.u32[0];
          v19.i64[1] = v18.u32[1];
          int8x16_t v20 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v19, 0x38uLL), 0x38uLL);
          v19.i64[0] = v18.u32[2];
          v19.i64[1] = v18.u32[3];
          int8x16_t v21 = vbicq_s8((int8x16_t)xmmword_263D82150, (int8x16_t)vshrq_n_s64(vshlq_n_s64(v19, 0x38uLL), 0x38uLL));
          int8x16_t v22 = vbicq_s8((int8x16_t)xmmword_263D82160, v20);
          uint64_t v23 = 96;
          if (!*(unsigned char *)(a1 + 109)) {
            uint64_t v23 = 64;
          }
          int8x16_t v24 = vorrq_s8(v22, v21);
          *(void *)(v2 + 144) = *(void *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | v23 | *(void *)(v2 + 144) & 0xFFFFFFFFFFFFFF80 | *(unsigned __int8 *)(a1 + 104);
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v33, (uint64_t)"setPVTMReport_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
          if (g_LbsOsaTrace_Config > 3)
          {
            bzero(__str, 0x3C6uLL);
            double v25 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            uint64_t v26 = *(unsigned char *)(a1 + 109) ? 84 : 70;
            uint64_t v27 = *(unsigned char *)(a1 + 108) ? 84 : 70;
            uint64_t v28 = *(unsigned char *)(a1 + 107) ? 84 : 70;
            uint64_t v29 = *(unsigned char *)(a1 + 106) ? 84 : 70;
            uint64_t v30 = *(unsigned char *)(a1 + 105) ? 84 : 70;
            uint64_t v31 = *(unsigned char *)(a1 + 104) ? 84 : 70;
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Pvt,%c,Meas,%c,ExtMeas,%c,SvInfo,%c,BandCor,%c,TimeCon,%c\n", (unint64_t)v25, "ADP", 73, "setPVTMReport_block_invoke", v31, v30, v29, v28, v27, v26);
            gnssOsa_PrintLog(__str, 4, 1, 0);
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v32 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "setPVTMReport_block_invoke");
              gnssOsa_PrintLog(__str, 5, 1, 0);
            }
          }
        }
        else
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v34, (uint64_t)"setPVTMReport_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v10 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PVTM Invalid measReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setPVTMReport_block_invoke", 515);
            gnssOsa_PrintLog(__str, 1, 1, 0);
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v11 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setPVTMReport_block_invoke");
              gnssOsa_PrintLog(__str, 5, 1, 0);
            }
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v35, (uint64_t)"setPVTMReport_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v12 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PVTM No valid flags\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setPVTMReport_block_invoke", 515);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v13 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setPVTMReport_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v37, (uint64_t)"setPVTMReport_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx PVTM CB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setPVTMReport_block_invoke", 513);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v9 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "setPVTMReport_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v38, (uint64_t)"setPVTMReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v38);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setPVTMReport_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "setPVTMReport_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C75704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_263C757EC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnss::GnssAdaptDevice::setNmeaHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    uint64_t v6 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14setNmeaHandlerEyNSt3__18functionIFvONS1_6vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS7_IS9_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_14;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a4);
    void v9[4] = a2;
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v10);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setNmeaHandler", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C759EC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDevice14setNmeaHandlerEyNSt3__18functionIFvONS1_6vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS7_IS9_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(void *a1)
{
  v30[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNmeaHandler_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)(a1 + 5));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v26, (uint64_t)"setNmeaHandler_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setNmeaHandler_block_invoke", 2056);
        gnssOsa_PrintLog(__str, 1, 1, 0);
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "setNmeaHandler_block_invoke");
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
      }
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NmeaMask,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 73, "setNmeaHandler_block_invoke", a1[9]);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if (a1[9] < 0x400uLL)
      {
        std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)(a1 + 10));
        uint64_t v11 = v2 + 264;
        if (__str != (char *)(v2 + 264))
        {
          uint64_t v12 = v29;
          uint64_t v13 = *(void *)(v2 + 288);
          if (v29 == __str)
          {
            if (v13 == v11)
            {
              (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v30);
              (*(void (**)(char *))(*(void *)v29 + 32))(v29);
              uint64_t v29 = 0;
              (*(void (**)(void, char *))(**(void **)(v2 + 288) + 24))(*(void *)(v2 + 288), __str);
              (*(void (**)(void))(**(void **)(v2 + 288) + 32))(*(void *)(v2 + 288));
              *(void *)(v2 + 288) = 0;
              uint64_t v29 = __str;
              (*(void (**)(void *, uint64_t))(v30[0] + 24))(v30, v2 + 264);
              (*(void (**)(void *))(v30[0] + 32))(v30);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 264);
              (*(void (**)(char *))(*(void *)v29 + 32))(v29);
              uint64_t v29 = *(char **)(v2 + 288);
            }
            *(void *)(v2 + 288) = v11;
          }
          else if (v13 == v11)
          {
            (*(void (**)(uint64_t, char *))(*(void *)v11 + 24))(v2 + 264, __str);
            (*(void (**)(void))(**(void **)(v2 + 288) + 32))(*(void *)(v2 + 288));
            *(void *)(v2 + 288) = v29;
            uint64_t v29 = __str;
          }
          else
          {
            uint64_t v29 = *(char **)(v2 + 288);
            *(void *)(v2 + 288) = v12;
          }
        }
        std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](__str);
        if (a1[13] && (uint64_t v14 = a1[9]) != 0)
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v15 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Request NMEA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "setNmeaHandler_block_invoke");
            gnssOsa_PrintLog(__str, 4, 1, 0);
            uint64_t v14 = a1[9];
          }
          unsigned int v16 = Gnm_RegisterNmeaUpdates((unsigned __int16)v14, gnss::GnssAdaptDevice::Ga06_15GnssRegisterNmeaCB);
        }
        else
        {
          if (g_LbsOsaTrace_Config >= 4)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v17 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: NMEA CB null kGaNmeaNone\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "setNmeaHandler_block_invoke");
            gnssOsa_PrintLog(__str, 4, 1, 0);
          }
          unsigned int v16 = Gnm_RegisterNmeaUpdates(0, 0);
        }
        unsigned int v18 = v16;
        uint64_t v19 = (uint64_t)(a1 + 5);
        if (v16)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, v19);
          gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, v18, (uint64_t)v24, (uint64_t)"setNmeaHandler_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v20 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SetNmea,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "setNmeaHandler_block_invoke", 257, v18);
            gnssOsa_PrintLog(__str, 1, 1, 0);
            if (g_LbsOsaTrace_Config >= 5)
            {
              bzero(__str, 0x3C6uLL);
              uint64_t v21 = mach_continuous_time();
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setNmeaHandler_block_invoke");
              gnssOsa_PrintLog(__str, 5, 1, 0);
            }
          }
        }
        else
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v23, v19);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v23, (uint64_t)"setNmeaHandler_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v23);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v22 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "setNmeaHandler_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)(a1 + 5));
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v25, (uint64_t)"setNmeaHandler_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v9 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Mask,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setNmeaHandler_block_invoke", 515, a1[9]);
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 5)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v10 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "setNmeaHandler_block_invoke");
            gnssOsa_PrintLog(__str, 5, 1, 0);
          }
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v27, (uint64_t)(a1 + 5));
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v27, (uint64_t)"setNmeaHandler_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v27);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setNmeaHandler_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "setNmeaHandler_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C76394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
}

void sub_263C7646C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 80));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnss::GnssAdaptDevice::setThermalRiskState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a4);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v6, (uint64_t)"setThermalRiskState");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setThermalRiskState", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C765F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setPowerReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v4 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14setPowerReportENSt3__18functionIFvNS1_10unique_ptrINS_14PwrMeasurementENS1_14default_deleteIS4_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_19;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v8);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setPowerReport", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void sub_263C76788(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDevice14setPowerReportENSt3__18functionIFvNS1_10unique_ptrINS_14PwrMeasurementENS1_14default_deleteIS4_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v19[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setPowerReport_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(void *)(a1 + 96))
    {
      std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
      uint64_t v4 = v2 + 328;
      if (__str != (char *)(v2 + 328))
      {
        uint64_t v5 = v18;
        uint64_t v6 = *(void *)(v2 + 352);
        if (v18 == __str)
        {
          if (v6 == v4)
          {
            (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v19);
            (*(void (**)(char *))(*(void *)v18 + 32))(v18);
            unsigned int v18 = 0;
            (*(void (**)(void, char *))(**(void **)(v2 + 352) + 24))(*(void *)(v2 + 352), __str);
            (*(void (**)(void))(**(void **)(v2 + 352) + 32))(*(void *)(v2 + 352));
            *(void *)(v2 + 352) = 0;
            unsigned int v18 = __str;
            (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, v2 + 328);
            (*(void (**)(void *))(v19[0] + 32))(v19);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 328);
            (*(void (**)(char *))(*(void *)v18 + 32))(v18);
            unsigned int v18 = *(char **)(v2 + 352);
          }
          *(void *)(v2 + 352) = v4;
        }
        else if (v6 == v4)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v4 + 24))(v2 + 328, __str);
          (*(void (**)(void))(**(void **)(v2 + 352) + 32))(*(void *)(v2 + 352));
          *(void *)(v2 + 352) = v18;
          unsigned int v18 = __str;
        }
        else
        {
          unsigned int v18 = *(char **)(v2 + 352);
          *(void *)(v2 + 352) = v5;
        }
      }
      std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](__str);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ENABLE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 73, "setPowerReport_block_invoke");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      char v10 = gnss::GnssAdaptDevice::Ga01_06GnssReportPower((NSObject **)v2, 1);
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DISABLE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "setPowerReport_block_invoke");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      char v10 = gnss::GnssAdaptDevice::Ga01_06GnssReportPower((NSObject **)v2, 0);
    }
    if (v10)
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SetPwrReport success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "setPowerReport_block_invoke");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      int v13 = 1;
    }
    else
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v14 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SetPwrReport error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setPowerReport_block_invoke", 257);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      int v13 = 7;
    }
    std::function<void ()(gnss::Result)>::operator()(a1 + 40, v13);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "setPowerReport_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v16, (uint64_t)"setPowerReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setPowerReport_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setPowerReport_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C76E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga01_06GnssReportPower(NSObject **this, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (gnss::GnssAdaptDevice::Ga01_06GnssReportPower(BOOL)::v_PowerReportState == a2)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (a2) {
        uint64_t v4 = "ENABLE";
      }
      else {
        uint64_t v4 = "DISABLE";
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Ignoring %s PwrRep request\n", (unint64_t)v3, "ADP", 73, "Ga01_06GnssReportPower", v4);
      int v5 = 4;
LABEL_12:
      gnssOsa_PrintLog(__str, v5, 1, 0);
      return 0;
    }
    return 0;
  }
  Hal_SetPowerReportStatus(a2, (void (*)(BOOL))gnss::GnssAdaptDevice::Ga01_SetPowerReportStatusCb, (void (*)(double, double, double, double))gnss::GnssAdaptDevice::Ga01_03HandlePowerReportCB);
  if (gnssOsa_SemWaitTimeOut(this[45], 0x1F4u))
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      double v7 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v8 = "DISABLE";
      if (a2) {
        uint64_t v8 = "ENABLE";
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx SetPwrRep %s timeout\n", (unint64_t)v7, "ADP", 69, "Ga01_06GnssReportPower", 257, v8);
      int v5 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  gnss::GnssAdaptDevice::Ga01_06GnssReportPower(BOOL)::v_PowerReportState = a2;
  if (g_LbsOsaTrace_Config < 4) {
    return 1;
  }
  bzero(__str, 0x3C6uLL);
  double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  if (a2) {
    uint64_t v12 = "ENABLED";
  }
  else {
    uint64_t v12 = "DISABLED";
  }
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Power reporting,%s\n", (unint64_t)v11, "ADP", 73, "Ga01_06GnssReportPower", v12);
  uint64_t v9 = 1;
  gnssOsa_PrintLog(__str, 4, 1, 0);
  return v9;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_263C7716C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnss::GnssAdaptDevice::setConfigCoexistence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    double v3 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20setConfigCoexistenceEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_21_1;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    dispatch_async(v3, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setConfigCoexistence", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice20setConfigCoexistenceEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigCoexistence_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v6, (uint64_t)"setConfigCoexistence_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  if (g_LbsOsaTrace_Config > 1)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Not Supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 87, "setConfigCoexistence_block_invoke", 264);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "setConfigCoexistence_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_263C77524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setConfigDutyCycling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v3 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20setConfigDutyCyclingEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_24;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    dispatch_async(v3, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setConfigDutyCycling", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice20setConfigDutyCyclingEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigDutyCycling_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v6, (uint64_t)"setConfigDutyCycling_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  if (g_LbsOsaTrace_Config > 1)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Not Supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 87, "setConfigDutyCycling_block_invoke", 264);
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "setConfigDutyCycling_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
}

void sub_263C77874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setConfigSimulatorMode(uint64_t a1, char a2, int a3, char a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    uint64_t v8 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice22setConfigSimulatorModeEbibNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_29;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a5);
    char v13 = a2;
    int v12 = a3;
    char v14 = a4;
    dispatch_async(v8, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setConfigSimulatorMode", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice22setConfigSimulatorModeEbibNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigSimulatorMode_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v5 = 84;
      if (!*(unsigned char *)(a1 + 76)) {
        uint64_t v5 = 70;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: SimulatorEn,%c,Week,%d\n", (unint64_t)v4, "ADP", 77, "setConfigSimulatorMode_block_invoke", v5, *(_DWORD *)(a1 + 72));
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    int v6 = HSW_SetSimulatorModeCfg(*(unsigned __int8 *)(a1 + 76), *(_DWORD *)(a1 + 72), *(unsigned char *)(a1 + 77));
    uint64_t v7 = a1 + 40;
    if (v6)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, v7);
      uint64_t v8 = v14;
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v14, (uint64_t)"setConfigSimulatorMode_block_invoke");
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, v7);
      uint64_t v8 = v13;
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0xBu, (uint64_t)v13, (uint64_t)"setConfigSimulatorMode_block_invoke");
    }
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
    if (*(unsigned char *)(a1 + 76))
    {
      HSW_SetEarliestGPSWKNum(*(_WORD *)(a1 + 72));
      if (g_LbsOsaTrace_Config < 5) {
        return;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Simulation mode ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setConfigSimulatorMode_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setConfigSimulatorMode_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v15, (uint64_t)"setConfigSimulatorMode_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setConfigSimulatorMode_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v10 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "setConfigSimulatorMode_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C77DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setConfigEnableGnssConstellations(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    double v4 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice33setConfigEnableGnssConstellationsEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_33;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
    int v8 = a2;
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setConfigEnableGnssConstellations", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice33setConfigEnableGnssConstellationsEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Constellation,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 77, "setConfigEnableGnssConstellations_block_invoke", *(_DWORD *)(a1 + 72));
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    int v5 = HSW_SetConstellationCfg(*(_DWORD *)(a1 + 72));
    uint64_t v6 = a1 + 40;
    if (v5)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, v6);
      uint64_t v7 = v12;
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v12, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, v6);
      uint64_t v7 = v11;
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0xBu, (uint64_t)v11, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
    }
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v13, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setConfigEnableGnssConstellations_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C782AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setConfigRfBandEnable(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    uint64_t v6 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice21setConfigRfBandEnableEbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_39;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a4);
    char v10 = a2;
    char v11 = a3;
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setConfigRfBandEnable", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice21setConfigRfBandEnableEbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigRfBandEnable_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      int v5 = "EN";
      if (*(unsigned char *)(a1 + 72)) {
        uint64_t v6 = "EN";
      }
      else {
        uint64_t v6 = "DIS";
      }
      if (!*(unsigned char *)(a1 + 73)) {
        int v5 = "DIS";
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RFBandFamily,L1:%s,L5:%s\n", (unint64_t)v4, "ADP", 77, "setConfigRfBandEnable_block_invoke", v6, v5);
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    int v7 = HSW_SetRfBandCfg(*(unsigned char *)(a1 + 72), *(unsigned __int8 *)(a1 + 73));
    uint64_t v8 = a1 + 40;
    if (v7)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, v8);
      uint64_t v9 = v14;
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v14, (uint64_t)"setConfigRfBandEnable_block_invoke");
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, v8);
      uint64_t v9 = v13;
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0xBu, (uint64_t)v13, (uint64_t)"setConfigRfBandEnable_block_invoke");
    }
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v12 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setConfigRfBandEnable_block_invoke");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v15, (uint64_t)"setConfigRfBandEnable_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setConfigRfBandEnable_block_invoke", 1302);
      gnssOsa_PrintLog(__str, 1, 1, 0);
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setConfigRfBandEnable_block_invoke");
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
    }
  }
}

void sub_263C787B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::setConfigNetworkFreqAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v3 = *(NSObject **)(a1 + 152);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice30setConfigNetworkFreqAssistanceEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_43;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
    dispatch_async(v3, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "setConfigNetworkFreqAssistance", 513);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void ___ZN4gnss15GnssAdaptDevice30setConfigNetworkFreqAssistanceEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = g_LbsOsaTrace_Config;
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
    unsigned int v3 = g_LbsOsaTrace_Config;
  }
  if (v3 >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Not supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 73, "setConfigNetworkFreqAssistance_block_invoke");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v7, (uint64_t)"setConfigNetworkFreqAssistance_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

void sub_263C78B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::Ga01_SetPowerReportStatusCb(gnss::GnssAdaptDevice *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(this);
  if (!DeviceInstance)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Invalid Device Instance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga01_SetPowerReportStatusCb", 513);
    int v3 = 1;
    goto LABEL_7;
  }
  if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(DeviceInstance + 360)) && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx CtrlReqSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 87, "Ga01_SetPowerReportStatusCb", 257);
    int v3 = 2;
LABEL_7:
    gnssOsa_PrintLog(__str, v3, 1, 0);
  }
}

void gnss::GnssAdaptDevice::Ga01_03HandlePowerReportCB(gnss::GnssAdaptDevice *this, double a2, double a3, double a4, double a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ActiveInt_Sec,%f,AvgPwr_milliwatts,%f,LocalTime,%f,MeasInt_Seconds,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga01_03HandlePowerReportCB", a2, a3, a4, a5);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(this);
  uint64_t v11 = *(NSObject **)(DeviceInstance + 152);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBEdddd_block_invoke;
  block[3] = &__block_descriptor_tmp_61;
  void block[4] = DeviceInstance;
  *(double *)&void block[5] = a2;
  *(double *)&block[6] = a3;
  *(double *)&block[7] = a4;
  *(double *)&block[8] = a5;
  dispatch_async(v11, block);
}

void *___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBEdddd_block_invoke(uint64_t a1)
{
  void v15[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v15, *(void *)(a1 + 32) + 328);
  if (v15[3])
  {
    v9[0] = 0;
    v9[1] = v9;
    char v9[2] = 0x3002000000;
    _OWORD v9[3] = __Block_byref_object_copy_;
    void v9[4] = __Block_byref_object_dispose_;
    uint64_t v2 = operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (!v2)
    {
      uint64_t v10 = 0;
      snprintf(v13, 0x3B6uLL, "ASSERT,%s,%d,%s", "Ga01_03HandlePowerReportCB_block_invoke", 466, "Memory allocation failed for PwrMeas");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "Ga01_03HandlePowerReportCB_block_invoke", v13);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga01_03HandlePowerReportCB_block_invoke", "ga01GnssDeviceConfig.cpp", 466, "false && \"Memory allocation failed for PwrMeas\"");
    }
    v2[8] = 0;
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)(a1 + 56);
    *((_OWORD *)v2 + 1) = v3;
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 160);
    uint64_t v10 = v2;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBEdddd_block_invoke_2;
    block[3] = &unk_270ED1098;
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v15);
    void block[4] = v9;
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v12);
    _Block_object_dispose(v9, 8);
    uint64_t v5 = v10;
    uint64_t v10 = 0;
    if (v5) {
      MEMORY[0x263E6EDB0](v5, 0x1000C407A37F5ACLL);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx OnPowerReportCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga01_03HandlePowerReportCB_block_invoke", 770);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v15);
}

void sub_263C790E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Block_object_dispose(&a15, 8);
  uint64_t v22 = a20;
  a20 = 0;
  if (v22) {
    MEMORY[0x263E6EDB0](v22, 0x1000C407A37F5ACLL);
  }
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100]((void *)(v20 - 72));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    JUMPOUT(0x263E6EDB0);
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBEdddd_block_invoke_2(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  v5[0] = v2;
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
  uint64_t result = v5[0];
  v5[0] = 0;
  if (result) {
    return MEMORY[0x263E6EDB0](result, 0x1000C407A37F5ACLL);
  }
  return result;
}

void sub_263C792D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x263E6EDB0](a9, 0x1000C407A37F5ACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v1);
}

uint64_t std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void GncP02_10DataIndFromMECB(size_t a1, unsigned __int8 *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 > 8)
  {
    uint64_t v5 = gnssOsa_Calloc("GncP02_10DataIndFromMECB", 93, 1, 0x20uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      int v7 = gnssOsa_Calloc("GncP02_10DataIndFromMECB", 99, 1, a1);
      v6[2] = v7;
      if (v7)
      {
        memcpy_s("GncP02_10DataIndFromMECB", 106, v7, a1, a2, a1);
        *((_WORD *)v6 + 12) = a1;
        if (a2[2] == 77) {
          unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        }
        else {
          LODWORD(v8) = 0;
        }
        *((_DWORD *)v6 + 7) = v8;
        if (g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v9 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_BUF_RX_IND =>GNCP Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "GncP02_10DataIndFromMECB", *((unsigned __int16 *)v6 + 12));
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        AgpsSendFsmMsg(132, 132, 8655363, v6);
      }
      else
      {
        free(v6);
      }
    }
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MsgLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP02_10DataIndFromMECB", 783, a1);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

void GncP02_11StrtMEDataDelayTimr(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_GncPMeData == 1)
  {
    if (AgpsFsmStopTimer(8656134) && g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP02_11StrtMEDataDelayTimr", 1545);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    g_GncPMeData = 0;
  }
  if (AgpsFsmStartTimer(0x841506u, a1))
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP02_11StrtMEDataDelayTimr", 1544, a1);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
  }
  else
  {
    g_GncPMeData = 1;
    mach_continuous_time();
  }
}

void GncP02_13ClearMEBuf(void)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  while (g_GncPMeData)
    GncP02_14ClearCurrMEBufElem();
  g_GncPMeData = 0;
  if (g_GncPMeData)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v0 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MEDataPack,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP02_13ClearMEBuf", 770, g_GncPMeData);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    g_GncPMeData = 0;
  }
}

void GncP02_14ClearCurrMEBufElem(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_GncPMeData)
  {
    uint64_t v0 = *(void *)(g_GncPMeData + 4104);
    free((void *)g_GncPMeData);
    if (g_GncPMeData)
    {
      --g_GncPMeData;
    }
    else if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 87, "GncP02_14ClearCurrMEBufElem", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    g_GncPMeData = v0;
  }
}

BOOL GncP02_15AddMEDataElem(unsigned __int8 *a1, size_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = gnssOsa_Calloc("GncP02_15AddMEDataElem", 259, 1, 0x1010uLL);
  if (v6)
  {
    if (g_GncPMeData == 255)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEData Overflow\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP02_15AddMEDataElem");
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      GncP02_13ClearMEBuf();
    }
    v6[1025] = a3;
    *((_WORD *)v6 + 2048) = a2;
    *((void *)v6 + 513) = 0;
    memcpy_s("GncP02_15AddMEDataElem", 278, v6, 0x1000u, a1 + 8, a2);
    unint64_t v8 = &g_GncPMeData;
    uint64_t v9 = g_GncPMeData;
    if (g_GncPMeData)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = *(void *)(v9 + 4104);
      }
      while (v9);
      unint64_t v8 = (uint64_t *)(v10 + 4104);
    }
    *unint64_t v8 = (uint64_t)v6;
    ++g_GncPMeData;
  }
  return v6 != 0;
}

uint64_t GncP02_16GetMEDataFrmBuf(unsigned int a1, char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = g_GncPMeData;
  if (g_GncPMeData)
  {
    unsigned __int16 v5 = 0;
    while (1)
    {
      size_t v6 = *(unsigned __int16 *)(v3 + 4096);
      if (!v5 && v6 > a1) {
        break;
      }
      if (v6 + v5 <= a1)
      {
        g_GncPMeData = *(_DWORD *)(v3 + 4100);
        memcpy_s("GncP02_16GetMEDataFrmBuf", 352, &a2[v5], a1 - v5, (const void *)v3, v6);
        v5 += *(_WORD *)(g_GncPMeData + 4096);
        GncP02_14ClearCurrMEBufElem();
        uint64_t v3 = g_GncPMeData;
        if (g_GncPMeData) {
          continue;
        }
      }
      goto LABEL_11;
    }
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MaxBytes less than MeData in node, MaxBytes:%u, NodeDataLen:%u, PktTS:%u, PktCount:%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP02_16GetMEDataFrmBuf", a1, *(unsigned __int16 *)(g_GncPMeData + 4096), *(_DWORD *)(g_GncPMeData + 4100), g_GncPMeData);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  unsigned __int16 v5 = 0;
LABEL_11:
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MaxBytes:%u, ReadBytes:%u, LatestReadTS:%u, NumPacketsLeft:%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP02_16GetMEDataFrmBuf", a1, v5, g_GncPMeData, g_GncPMeData);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  return v5;
}

uint64_t GncP02_22HandleDataFromME(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_BUF_RX_IND Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP02_22HandleDataFromME", *(unsigned __int16 *)(a1 + 24));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    if (!*(_WORD *)(a1 + 24)) {
      goto LABEL_23;
    }
    if ((unsigned __int16)(*(_WORD *)(a1 + 24) - 4097) <= 0xF007u)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MsgLen,%u,Max,%u\n", v3);
LABEL_22:
        gnssOsa_PrintLog(__str, 2, 1, 0);
        goto LABEL_23;
      }
      goto LABEL_23;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(unsigned char *)v5 != 122 || *(unsigned char *)(v5 + 1) != 120)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ME Data nonZX MC,%u,MID,%u\n", v9);
        goto LABEL_22;
      }
LABEL_23:
      uint64_t v10 = *(void **)(a1 + 16);
      if (v10) {
        free(v10);
      }
      *(void *)(a1 + 16) = 0;
      return 0;
    }
    int v6 = *(unsigned __int8 *)(v5 + 2);
    int v7 = *(unsigned __int8 *)(v5 + 3);
    if (v6 == 66)
    {
      if (v7 == 83)
      {
        GncP02_25HandleDeRegGnssResp((unsigned __int8 *)*(unsigned __int8 *)(v5 + 8));
        goto LABEL_42;
      }
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v6 != 79)
      {
        if (v6 == 77)
        {
          if (v7 != 77) {
            goto LABEL_42;
          }
          if (GncP02_15AddMEDataElem(*(unsigned __int8 **)(a1 + 16), *(unsigned __int16 *)(v5 + 5), *(_DWORD *)(a1 + 28)))
          {
            if ((g_GncPMeData & 1) == 0)
            {
              if (WORD2(qword_26A9A1980) && HIWORD(qword_26A9A1980) >= 0x3E8u) {
                GncP02_11StrtMEDataDelayTimr(WORD2(qword_26A9A1980));
              }
              if (g_LbsOsaTrace_Config < 4) {
                goto LABEL_42;
              }
              bzero(__str, 0x3C6uLL);
              unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FixInt,%u,Timer,%u,Started,%u,Len,%u,TS,%u,NumPks,%u\n", v15, "GNC", 73);
              goto LABEL_50;
            }
            if (g_LbsOsaTrace_Config >= 4)
            {
              bzero(__str, 0x3C6uLL);
              unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Len,%u,TS,%u,NumPks,%u\n", v8);
LABEL_50:
              int v13 = 4;
              goto LABEL_41;
            }
LABEL_42:
            if (*(unsigned char *)(*(void *)(a1 + 16) + 2) == 77)
            {
              GncP16_26UpdateStateMEDataRcvd();
              if ((g_GncPMeData & 1) == 0) {
                GncP01_32ExecutePE(v14);
              }
            }
            goto LABEL_23;
          }
          if (g_LbsOsaTrace_Config < 2) {
            goto LABEL_42;
          }
          bzero(__str, 0x3C6uLL);
          mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: MEData Lost Len,%u\n");
        }
        else
        {
          if (g_LbsOsaTrace_Config < 2) {
            goto LABEL_42;
          }
          bzero(__str, 0x3C6uLL);
          unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u\n", v16);
        }
LABEL_40:
        int v13 = 2;
LABEL_41:
        gnssOsa_PrintLog(__str, v13, 1, 0);
        goto LABEL_42;
      }
      if (v7 == 84 || v7 == 66)
      {
        GncP25_04HandleTimeMarkEvent(*(unsigned __int8 **)(a1 + 16));
        goto LABEL_42;
      }
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_42;
      }
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u\n", v12);
    goto LABEL_40;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP02_22HandleDataFromME", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void GncP02_25HandleDeRegGnssResp(unsigned __int8 *a1)
{
  unsigned __int8 v1 = a1;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config <= 3)
  {
    int v3 = a1;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    int v3 = v1;
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP02_25HandleDeRegGnssResp", v1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (v1 > 0x4Cu)
  {
    if (v1 == 77)
    {
      GncP16_31UpdateStateMEPowerState(7u);
      return;
    }
    if (v1 == 119)
    {
      if (g_LbsOsaTrace_Config < 4) {
        return;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: ME Wake-up in progress\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP02_25HandleDeRegGnssResp");
      int v6 = 4;
      goto LABEL_19;
    }
    if (v1 != 109) {
      goto LABEL_17;
    }
LABEL_12:
    if (g_LbsOsaTrace_Config < 5) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP02_25HandleDeRegGnssResp");
    int v6 = 5;
    goto LABEL_19;
  }
  if (v1 == 32) {
    goto LABEL_12;
  }
  if (v1 == 67 || v1 == 71)
  {
    int SleepTimeout = HSW_GetSleepTimeout();
    GncP03_SendGNSSSleepRequest(SleepTimeout, 0);
    return;
  }
LABEL_17:
  if (g_LbsOsaTrace_Config < 2) {
    return;
  }
  bzero(__str, 0x3C6uLL);
  uint64_t v8 = mach_continuous_time();
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP02_25HandleDeRegGnssResp", 770, v3);
  int v6 = 2;
LABEL_19:
  gnssOsa_PrintLog(__str, v6, 1, 0);
}

uint64_t GncP02_31MEDataDelayTimExp(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_MEDATA_DELAY_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_31MEDataDelayTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    int v2 = g_GncPStateInfo;
    g_GncPMeData = 0;
    if (g_GncPStateInfo > 0x10u) {
      goto LABEL_20;
    }
    if (((1 << g_GncPStateInfo) & 0x10A3E) != 0)
    {
LABEL_6:
      GncP02_13ClearMEBuf();
      return 0;
    }
    if (((1 << g_GncPStateInfo) & 0xC5C1) == 0)
    {
LABEL_20:
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP02_12MEDataTimerExpiry", 262, v2);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    uint64_t v4 = g_GncPMeData;
    if (!g_GncPMeData) {
      return 0;
    }
    uint64_t v5 = g_GncPMeData;
    char v6 = g_GncPMeData;
    while ((v6 & 1) == 0)
    {
      int v7 = *(unsigned __int16 *)(v4 + 4096);
      a1 = GncP01_32ExecutePE(a1);
      char v6 = g_GncPMeData;
      uint64_t v8 = g_GncPMeData;
      uint64_t v4 = g_GncPMeData;
      if (g_GncPMeData == v5)
      {
        if (*(unsigned __int16 *)(g_GncPMeData + 4096) == v7) {
          break;
        }
        uint64_t v8 = v5;
      }
      uint64_t v5 = v8;
      if (!g_GncPMeData) {
        return 0;
      }
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: State,%hhu,NumPks,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "GncP02_12MEDataTimerExpiry", v2, v5);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    goto LABEL_6;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP02_31MEDataDelayTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP02_32StateHndlTimExp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_STATE_HNDL_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 68, "GncP02_32StateHndlTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncP16_25UpdateStateTimerExpiry(a1, a2, a3);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "GncP02_32StateHndlTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP02_33BBResetTimExp(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_GNSSBBRESET_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_33BBResetTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncP19_04MEResetTimerExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncP02_33BBResetTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t GncP02_34TimemarkSessTimExp(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_SESS_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_34TimemarkSessTimExp");
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
    GncP25_10TimemarkSessTimerExpiry();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncP02_34TimemarkSessTimExp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void *DD_Delete_Bad_NVIC_Data(void *result)
{
  uint64_t v1 = 0;
  uint64_t v2 = p_NV + 27040;
  uint64_t v3 = (_OWORD *)(p_NV + 27936);
  uint64_t v4 = result + 6228;
  uint64_t v5 = result + 5962;
  do
  {
    uint64_t v6 = result[5953];
    if (*(unsigned char *)(v6 + v1))
    {
      *(unsigned char *)(v6 + v1) = 0;
      *(unsigned char *)(result[5951] + v1) = 0;
      *(unsigned char *)(result[5955] + v1) = 0;
      *(_OWORD *)((char *)v5 + 60) = 0uLL;
      void v5[2] = 0uLL;
      v5[3] = 0uLL;
      *uint64_t v5 = 0uLL;
      v5[1] = 0uLL;
      *(unsigned char *)(result[5961] + v1) = 0;
      *(unsigned char *)(result[5958] + v1) = 1;
      *((void *)v3 - 1) = 0xFFFFFFFFLL;
      *uint64_t v3 = 0uLL;
      v3[1] = 0uLL;
      v3[2] = 0uLL;
      v3[3] = 0uLL;
      *(_OWORD *)((char *)v3 + 60) = 0uLL;
    }
    uint64_t v7 = result[5954];
    if (*(unsigned char *)(v7 + v1))
    {
      *(unsigned char *)(v7 + v1) = 0;
      *(unsigned char *)(result[5952] + v1) = 0;
      *(unsigned char *)(result[5957] + v1) = 0;
      *((unsigned char *)v4 + 48) = 0;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 2) = 0uLL;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(unsigned char *)(result[5961] + v1) = 0;
      *(void *)(v2 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = 0uLL;
      *(_OWORD *)(v2 + 16) = 0uLL;
      *(_OWORD *)(v2 + 32) = 0uLL;
      *(unsigned char *)(v2 + 48) = 0;
    }
    ++v1;
    v2 += 64;
    uint64_t v3 = (_OWORD *)((char *)v3 + 88);
    uint64_t v4 = (void *)((char *)v4 + 52);
    uint64_t v5 = (_OWORD *)((char *)v5 + 76);
  }
  while (v1 != 14);
  return result;
}

uint64_t DD_Delete_Inhib_NVIC_Data(uint64_t result, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (_OWORD *)(p_NV + 27936);
  uint64_t v4 = p_NV + 27040;
  uint64_t v5 = a2 + 6228;
  uint64_t v6 = a2 + 5962;
  do
  {
    if (*(unsigned char *)(result + v2))
    {
      *(unsigned char *)(a2[5953] + v2) = 0;
      *(unsigned char *)(a2[5951] + v2) = 0;
      *(unsigned char *)(a2[5955] + v2) = 0;
      *(_OWORD *)((char *)v6 + 60) = 0uLL;
      v6[2] = 0uLL;
      v6[3] = 0uLL;
      *uint64_t v6 = 0uLL;
      v6[1] = 0uLL;
      *(unsigned char *)(a2[5956] + v2) = 0;
      *(_OWORD *)((char *)v6 + 1124) = 0uLL;
      *(_OWORD *)((char *)v6 + 1096) = 0uLL;
      *(_OWORD *)((char *)v6 + 1112) = 0uLL;
      *(_OWORD *)((char *)v6 + 1064) = 0uLL;
      *(_OWORD *)((char *)v6 + 1080) = 0uLL;
      *(unsigned char *)(a2[5961] + v2) = 0;
      *(unsigned char *)(a2[5958] + v2) = 1;
      *((void *)v3 - 1) = 0xFFFFFFFFLL;
      *uint64_t v3 = 0uLL;
      v3[1] = 0uLL;
      v3[2] = 0uLL;
      v3[3] = 0uLL;
      *(_OWORD *)((char *)v3 + 60) = 0uLL;
      *(unsigned char *)(a2[5954] + v2) = 0;
      *(unsigned char *)(a2[5952] + v2) = 0;
      *(unsigned char *)(a2[5957] + v2) = 0;
      *((unsigned char *)v5 + 48) = 0;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)uint64_t v5 = 0uLL;
      *(void *)(v4 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(unsigned char *)(v4 + 48) = 0;
    }
    ++v2;
    uint64_t v3 = (_OWORD *)((char *)v3 + 88);
    v4 += 64;
    uint64_t v5 = (void *)((char *)v5 + 52);
    uint64_t v6 = (_OWORD *)((char *)v6 + 76);
  }
  while (v2 != 14);
  return result;
}

char *DD_Check_Age_NVIC_Data(char *result, uint64_t a2)
{
  if ((int)result < 1) {
    return result;
  }
  int v3 = (int)result;
  uint64_t v4 = 0;
  int v5 = 0;
  char v6 = 0;
  uint64_t v7 = (unsigned char *)(a2 + 62170);
  uint64_t v8 = (void *)(a2 + 47624);
  int v9 = result + 900;
  if ((int)result <= 900) {
    int v10 = 900;
  }
  else {
    int v10 = (int)result;
  }
  int v11 = v10 - 900;
  if ((int)result <= 86400) {
    int v12 = 86400;
  }
  else {
    int v12 = (int)result;
  }
  int v13 = v12 - 86400;
  uint64_t v14 = *(void *)(a2 + 47640);
  uint64_t v15 = 47696;
  do
  {
    if (!*(unsigned char *)(v14 + v4)) {
      goto LABEL_19;
    }
    int v16 = *(_DWORD *)(a2 + v15);
    if (v16 >= 1 && v16 < v13)
    {
LABEL_17:
      char v6 = 1;
      *(unsigned char *)(*v8 + v4) = 1;
      goto LABEL_19;
    }
    if (v16)
    {
      if (v16 > v9)
      {
        ++v5;
        if (!*v7) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + v15) = v11;
    }
LABEL_19:
    ++v4;
    v15 += 76;
  }
  while (v4 != 14);
  uint64_t v31 = a2 + 50552;
  if (v5 > 0)
  {
    if (*v7) {
      uint64_t v18 = "(Skipped)";
    }
    else {
      uint64_t v18 = "";
    }
    uint64_t result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future EPH, %d SVs  %s", v5, v18);
  }
  uint64_t v32 = v7;
  int v33 = 0;
  uint64_t v19 = 0;
  if (v3 <= 15724800) {
    int v20 = 15724800;
  }
  else {
    int v20 = v3;
  }
  int v21 = v20 - 15724800;
  int v34 = (v3 - (v20 - 15724800)) / 604800;
  uint64_t v22 = 49824;
  do
  {
    if (*(unsigned char *)(v8[4] + v19))
    {
      int v23 = *(_DWORD *)(a2 + v22);
      if (v23 >= 1 && v23 < v21)
      {
        char v6 = 1;
        *(unsigned char *)(v8[1] + v19) = 1;
        uint64_t result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Old ALM, SV %d age %d thresh %d", (int)v19 + 1, (v3 - v23) / 604800, v34);
      }
      else if (v23)
      {
        if (v23 > v9)
        {
          ++v33;
          int v25 = v3 - v23;
          uint64_t v26 = "(Skipped)";
          if (!*v32) {
            uint64_t v26 = "";
          }
          uint64_t result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future ALM, SV %d age %d thresh %d  %s", (int)v19 + 1, v25 / 604800, 0, v26);
          if (!*v32)
          {
            char v6 = 1;
            *(unsigned char *)(v8[1] + v19) = 1;
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + v22) = v11;
      }
    }
    ++v19;
    v22 += 52;
  }
  while (v19 != 14);
  if (v33 > 0)
  {
    if (*v32) {
      uint64_t v27 = "(Skipped)";
    }
    else {
      uint64_t v27 = "";
    }
    uint64_t result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future ALM, %d SVs  %s", v33, v27);
  }
  if (!*(_DWORD *)(v31 + 4)) {
    goto LABEL_63;
  }
  if (v3 <= 2419200) {
    int v28 = 2419200;
  }
  else {
    int v28 = v3;
  }
  int v29 = *(_DWORD *)v31;
  if (*(int *)v31 < 1 || v29 >= v28 - 2419200)
  {
    if (!v29)
    {
      *(_DWORD *)uint64_t v31 = v11;
      if ((v6 & 1) == 0) {
        return result;
      }
      goto LABEL_64;
    }
    if (v29 > v9)
    {
      uint64_t v30 = *v32 ? "(Skipped)" : "";
      uint64_t result = EvLog_v("DD_Check_Age_NVIC_Data:  Deleting Future NGTO, %d  %d  %s", v29, v9, v30);
      if (!*v32) {
        goto LABEL_55;
      }
    }
LABEL_63:
    if ((v6 & 1) == 0) {
      return result;
    }
    goto LABEL_64;
  }
LABEL_55:
  *(void *)uint64_t v31 = 0;
  *(void *)(v31 + 8) = 0;
  *(_WORD *)(v31 + 16) = 0;
  *(_OWORD *)(a2 + 50576) = 0u;
  *(_OWORD *)(a2 + 50592) = 0u;
  *(void *)(a2 + 50606) = 0;
  if ((v6 & 1) == 0) {
    return result;
  }
LABEL_64:

  return (char *)DD_Delete_Bad_NVIC_Data((void *)a2);
}

uint64_t Decode_BDS_Alm_Health_Sts(int a1)
{
  if ((a1 & 0x100) != 0)
  {
    if ((_BYTE)a1)
    {
      if ((a1 & 0xE0) != 0) {
        int v5 = 4;
      }
      else {
        int v5 = 7;
      }
      int v6 = (a1 << 26 >> 31) & 6;
      if ((a1 & 0x40) != 0) {
        int v6 = 5;
      }
      if ((a1 & 0x80) != 0) {
        unsigned int v7 = v5;
      }
      else {
        unsigned int v7 = v6;
      }
      if ((a1 & 0xE0) == 0) {
        unsigned int v7 = v5;
      }
      if ((a1 & 2) != 0) {
        unsigned int v8 = 3;
      }
      else {
        unsigned int v8 = v7;
      }
      if (a1 == 255) {
        return 2;
      }
      else {
        return v8;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if ((a1 & 0xE0) != 0) {
      int v1 = 8;
    }
    else {
      int v1 = 11;
    }
    int v2 = (a1 << 26 >> 31) & 0xA;
    if ((a1 & 0x40) != 0) {
      int v2 = 9;
    }
    if ((a1 & 0x80) != 0) {
      unsigned int v3 = v1;
    }
    else {
      unsigned int v3 = v2;
    }
    if ((a1 & 0xE0) == 0) {
      unsigned int v3 = v1;
    }
    if ((a1 & 2) != 0) {
      return 3;
    }
    else {
      return v3;
    }
  }
}

BOOL Comp_AcqAid(int a1, __int16 a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5, double a6)
{
  int v6 = *a4;
  *(unsigned char *)(a5 + 4) = v6;
  if (!v6) {
    return v6 != 0;
  }
  *(_DWORD *)a5 = a1;
  double v7 = *((double *)a4 + 5) * 65.536;
  double v8 = -0.5;
  if (v7 <= 0.0) {
    double v9 = -0.5;
  }
  else {
    double v9 = 0.5;
  }
  double v10 = v7 + v9;
  if (v10 <= 2147483650.0)
  {
    if (v10 >= -2147483650.0) {
      int v11 = (int)v10;
    }
    else {
      LOWORD(v11) = 0;
    }
  }
  else
  {
    LOWORD(v11) = -1;
  }
  *(_WORD *)(a5 + 20) = v11;
  double v12 = *((double *)a4 + 3);
  if (v12 > 0.0) {
    double v8 = 0.5;
  }
  double v13 = v12 + v8;
  if (v13 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0) {
      int v14 = (int)v13;
    }
    else {
      LOWORD(v14) = 0;
    }
  }
  else
  {
    LOWORD(v14) = -1;
  }
  *(_WORD *)(a5 + 22) = v14;
  unsigned int v15 = *((_DWORD *)a4 + 8);
  if (v15 >= a3)
  {
    *(_WORD *)(a5 + 22) = -a2;
    LOWORD(v15) = a3;
  }
  *(_WORD *)(a5 + 18) = v15;
  double v16 = *((double *)a4 + 6) * 4.0;
  double v17 = -0.5;
  if (v16 > 0.0) {
    double v17 = 0.5;
  }
  double v18 = v16 + v17;
  if (v18 <= 2147483650.0)
  {
    int v19 = (int)v18;
    if (v18 < -2147483650.0) {
      LOWORD(v19) = 0;
    }
  }
  else
  {
    LOWORD(v19) = -1;
  }
  *(_WORD *)(a5 + 38) = v19;
  unsigned int v20 = *((_DWORD *)a4 + 14);
  if (v20 >= 0xFF) {
    LOBYTE(v20) = -1;
  }
  *(unsigned char *)(a5 + 40) = v20;
  unsigned int v21 = *((_DWORD *)a4 + 1);
  *(unsigned char *)(a5 + 15) = v21 >> 6 < 0x753;
  unsigned int v22 = *((_DWORD *)a4 + 3);
  if (v22 >= 0x24988)
  {
    if (v22 > 0xDB930)
    {
      *(unsigned char *)(a5 + 14) = 0;
      goto LABEL_33;
    }
    char v23 = 2;
  }
  else
  {
    char v23 = 3;
  }
  *(unsigned char *)(a5 + 14) = v23;
LABEL_33:
  LODWORD(v18) = *((_DWORD *)a4 + 2);
  double v24 = (double)*(unint64_t *)&v18 / 299792458.0;
  int v25 = (int)(v24 * 2000.0 + 0.5);
  double v26 = a6 - v24;
  double v27 = v26 / 1.5;
  if (v26 / 1.5 <= 0.0) {
    double v27 = v26 / 1.5 + -1.0;
  }
  *(_WORD *)(a5 + 16) = v25;
  double v28 = (v26 + (double)(int)v27 * -1.5) * 1023000.0;
  *(_DWORD *)(a5 + 28) = (int)v27;
  *(_DWORD *)(a5 + 32) = (int)v28;
  *(_WORD *)(a5 + 36) = vcvtd_n_s64_f64(v28 - (double)(int)v28, 0x10uLL);
  if ((int)v27 < 0) {
    *(_DWORD *)(a5 + 28) = (int)v27 + 403200;
  }
  unsigned int v29 = *((_DWORD *)a4 + 4);
  if (v29 >= 0x1E)
  {
    if (v29 <= 0x24988) {
      int v30 = (int)(((double)v29 + 29.3052256) / 29.3052256);
    }
    else {
      LOWORD(v30) = 5115;
    }
  }
  else
  {
    LOWORD(v30) = 1;
  }
  *(_WORD *)(a5 + 26) = v30;
  if (v21 >= 0x4B1)
  {
    if (v21 <= 0x493DF) {
      unsigned int v31 = (v21 + 600) / 0x4B0;
    }
    else {
      LOBYTE(v31) = -1;
    }
  }
  else
  {
    LOBYTE(v31) = 1;
  }
  *(unsigned char *)(a5 + 24) = v31;
  *(unsigned char *)(a5 + 43) = a4[60];
  double v32 = *((double *)a4 + 8) * 8.0;
  double v33 = -0.5;
  if (v32 > 0.0) {
    double v33 = 0.5;
  }
  double v34 = v32 + v33;
  if (v34 <= 2147483650.0)
  {
    if (v34 >= -2147483650.0) {
      int v35 = (int)v34;
    }
    else {
      LOWORD(v35) = 0;
    }
  }
  else
  {
    LOWORD(v35) = -1;
  }
  *(_WORD *)(a5 + 44) = v35;
  return v6 != 0;
}

uint64_t Gnm28_01HandlePeNvBackup(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_BACKUP_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_01HandlePeNvBackup");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    if (v3)
    {
      if (!*(_WORD *)(a1 + 12))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v9 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NVSize,0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm28_01HandlePeNvBackup", 515);
          gnssOsa_PrintLog(__str, 2, 1, 0);
          unsigned int v3 = *(void **)(a1 + 16);
          if (!v3) {
            goto LABEL_22;
          }
        }
        double v10 = v3;
        goto LABEL_21;
      }
      if (gnssOsa_storeBufferToNv(0, v3, *(unsigned __int16 *)(a1 + 12)))
      {
        if (g_LbsOsaTrace_Config < 4) {
          goto LABEL_20;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success NvSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm28_01HandlePeNvBackup", *(unsigned __int16 *)(a1 + 12));
        int v5 = 4;
      }
      else
      {
        if (g_LbsOsaTrace_Config < 2) {
          goto LABEL_20;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ReqWrite,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm28_01HandlePeNvBackup", 1570, *(unsigned __int16 *)(a1 + 12));
        int v5 = 2;
      }
      gnssOsa_PrintLog(__str, v5, 1, 0);
LABEL_20:
      double v10 = *(void **)(a1 + 16);
      if (!v10)
      {
LABEL_22:
        *(void *)(a1 + 16) = 0;
        return 0;
      }
LABEL_21:
      free(v10);
      goto LABEL_22;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm28_01HandlePeNvBackup", 513);
      int v7 = 2;
      goto LABEL_13;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm28_01HandlePeNvBackup", 517);
    int v7 = 1;
LABEL_13:
    gnssOsa_PrintLog(__str, v7, 1, 0);
  }
  return 0;
}

uint64_t Gnm28_11RestorePeNv(int a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Restore PE NV initiated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_11RestorePeNv");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  unsigned int v3 = (unsigned __int16 *)gnssOsa_Calloc("Gnm28_11RestorePeNv", 97, 1, 0x20uLL);
  if (!v3)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm28_11RestorePeNv", 1537);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 0;
  }
  uint64_t v4 = v3;
  size_t size = 0;
  if ((gnssOsa_getNvSize(0, &size) & 1) == 0)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v8 = 1572;
LABEL_14:
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v7, "GNM", 87, "Gnm28_11RestorePeNv", v8);
      int v9 = 2;
LABEL_17:
      gnssOsa_PrintLog(__str, v9, 1, 0);
    }
LABEL_18:
    free(v4);
    return 0;
  }
  if (!size)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Empty file\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm28_11RestorePeNv");
      int v9 = 4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (size >= 0x10000)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm28_11RestorePeNv", 770);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    gnssOsa_clearNV(0);
    goto LABEL_18;
  }
  double v12 = gnssOsa_Calloc("Gnm28_11RestorePeNv", 132, 1, size);
  *((void *)v4 + 2) = v12;
  if (!v12)
  {
    if (g_LbsOsaTrace_Config < 2) {
      goto LABEL_18;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v8 = 1537;
    goto LABEL_14;
  }
  unsigned __int16 Nv = gnssOsa_readNv(0, v12, size);
  v4[6] = Nv;
  if (size != Nv)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v15 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ReqRead,%zu,Read,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm28_11RestorePeNv", 1571, size, v4[6]);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    double v16 = (void *)*((void *)v4 + 2);
    if (v16) {
      free(v16);
    }
    goto LABEL_18;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v14 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_REQ =>GNCP NvSize,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm28_11RestorePeNv", v4[6], a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  *((unsigned char *)v4 + 24) = a1;
  AgpsSendFsmMsg(128, 132, 8654080, v4);
  return 1;
}

uint64_t Gnm28_12HandlePeNvRestoreNoAck(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_VAR_PE_NV_RESTORE_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_12HandlePeNvRestoreNoAck");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm28_12HandlePeNvRestoreNoAck", 517);
    int v8 = 1;
LABEL_16:
    gnssOsa_PrintLog(__str, v8, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v4 = 89;
    if (!(_BYTE)g_Gnm_NVStoreCntxt) {
      uint64_t v4 = 78;
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerStart,%u,TimerStatus,%c\n", (unint64_t)v3, "GNM", 73, "Gnm28_12HandlePeNvRestoreNoAck", HIDWORD(g_Gnm_NVStoreCntxt), v4);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if ((_BYTE)g_Gnm_NVStoreCntxt)
  {
    int v5 = HIDWORD(g_Gnm_NVStoreCntxt);
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v5 >= 0xFA)
    {
      LOBYTE(g_Gnm_NVStoreCntxt) = 0;
      HIDWORD(g_Gnm_NVStoreCntxt) = 0;
      if ((_BYTE)qword_26A9CA2E8)
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v6 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Max PENvRestore attempts\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm28_12HandlePeNvRestoreNoAck");
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        LOBYTE(qword_26A9CA2E8) = 0;
        return 0;
      }
      LOBYTE(qword_26A9CA2E8) = 1;
      if (Gnm28_11RestorePeNv(1))
      {
        if (!AgpsFsmStartTimer(0x802F06u, 0xFAu))
        {
          HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                         * (double)mach_continuous_time());
          LOBYTE(g_Gnm_NVStoreCntxt) = 1;
          return 0;
        }
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v10 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm28_12HandlePeNvRestoreNoAck", 1544);
          int v8 = 2;
          goto LABEL_16;
        }
      }
    }
  }
  return 0;
}

uint64_t Gnm28_13HandlePeNvRestoreAck(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_13HandlePeNvRestoreAck");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v8 = 517;
LABEL_17:
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", v7, "GNM", 69, "Gnm28_13HandlePeNvRestoreAck", v8);
    int v9 = 1;
LABEL_18:
    gnssOsa_PrintLog(__str, v9, 1, 0);
    return 0;
  }
  if (qword_26A9CA2E8 != *(unsigned __int8 *)(a1 + 13))
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v8 = 1028;
    goto LABEL_17;
  }
  if (AgpsFsmStopTimer(8400646) && g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", 1545);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  LOBYTE(g_Gnm_NVStoreCntxt) = 0;
  HIDWORD(g_Gnm_NVStoreCntxt) = 0;
  int v4 = *(unsigned __int8 *)(a1 + 12);
  if ((v4 - 2) >= 2)
  {
    if (v4 != 1)
    {
      if (!*(unsigned char *)(a1 + 12))
      {
        if (g_LbsOsaTrace_Config >= 4)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
          int v6 = 4;
LABEL_39:
          gnssOsa_PrintLog(__str, v6, 1, 0);
        }
LABEL_40:
        LOBYTE(qword_26A9CA2E8) = 0;
        return 0;
      }
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ErrCode,%hhu\n", v13);
LABEL_31:
        int v9 = 2;
        goto LABEL_18;
      }
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fail Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    if (gnssOsa_clearNV(0))
    {
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_40;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PeNv Deleted\n");
    }
    else
    {
      if (g_LbsOsaTrace_Config < 2) {
        goto LABEL_40;
      }
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    }
LABEL_38:
    int v6 = 2;
    goto LABEL_39;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v10 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Fail Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  if ((_BYTE)qword_26A9CA2E8)
  {
    if (g_LbsOsaTrace_Config < 2) {
      goto LABEL_40;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Max PENvRestore attempts\n");
    goto LABEL_38;
  }
  LOBYTE(qword_26A9CA2E8) = 1;
  if (Gnm28_11RestorePeNv(1))
  {
    if (!AgpsFsmStartTimer(0x802F06u, 0xFAu))
    {
      HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                     * (double)mach_continuous_time());
      LOBYTE(g_Gnm_NVStoreCntxt) = 1;
      return 0;
    }
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_31;
    }
  }
  return 0;
}

double Gnm28_21InitRestorePeNv(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  LOBYTE(g_Gnm_NVStoreCntxt) = 0;
  HIDWORD(g_Gnm_NVStoreCntxt) = 0;
  LOBYTE(qword_26A9CA2E8) = 0;
  if (Gnm28_11RestorePeNv(0))
  {
    if (AgpsFsmStartTimer(0x802F06u, 0xFAu))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v1 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 87, "Gnm28_21InitRestorePeNv", 1544);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      double result = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)result;
      LOBYTE(g_Gnm_NVStoreCntxt) = 1;
    }
  }
  return result;
}

uint64_t GM_Reject_Rep_SV(uint64_t result, unsigned int a2, int *a3)
{
  *(void *)&v25[508] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = result;
    unint64_t v5 = a2;
    int v6 = (unsigned __int8 *)(result + 6);
    unint64_t v7 = v24;
    int v8 = a3;
    uint64_t v9 = a2;
    do
    {
      *unint64_t v7 = 0;
      if (Is_Legal(*(_DWORD *)(v6 - 6)) && *v8 >= 10)
      {
        unsigned int v10 = *((unsigned __int16 *)v6 + 3);
        if (v10 >= 0x2710) {
          unsigned int v10 = 10000;
        }
        *unint64_t v7 = v10 + 1000 * (*v8 + *(v6 - 2) + *v6);
      }
      v6 += 36;
      ++v8;
      ++v7;
      --v9;
    }
    while (v9);
    uint64_t v11 = 0;
    unsigned int v12 = a2 - 1;
    unint64_t v13 = (unsigned int *)v25;
    uint64_t v14 = a3 + 1;
    for (uint64_t i = (unsigned __int8 *)(v4 + 36); ; i += 36)
    {
      uint64_t v16 = v4 + 36 * v11;
      int v17 = *(_DWORD *)v16;
      double result = Is_Legal(*(_DWORD *)v16);
      if (result)
      {
        if (a3[v11] >= 10 && v11 + 1 < v5) {
          break;
        }
      }
LABEL_23:
      ++v11;
      --v12;
      ++v13;
      ++v14;
      if (v11 == v5) {
        return result;
      }
    }
    unsigned int v18 = v24[v11];
    uint64_t v19 = i;
    unsigned int v20 = v14;
    unsigned int v21 = v13;
    unsigned int v22 = v12;
    while (1)
    {
      if (__PAIR64__(v19[1], *v19) == __PAIR64__(BYTE1(v17), v17))
      {
        if (v17 == 2)
        {
          if (v19[3] != *(unsigned __int8 *)(v16 + 3)) {
            goto LABEL_22;
          }
        }
        else if (*(_DWORD *)v19 != v17)
        {
          goto LABEL_22;
        }
        if (*v20 >= 10)
        {
          if (v18 < *v21)
          {
            a3[v11] = 3;
            goto LABEL_23;
          }
          *unsigned int v20 = 3;
        }
      }
LABEL_22:
      ++v21;
      ++v20;
      v19 += 36;
      if (!--v22) {
        goto LABEL_23;
      }
    }
  }
  return result;
}

uint64_t NK_SV_Meas_AP_Stats(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v76[13] = *(double *)MEMORY[0x263EF8340];
  switch(a1)
  {
    case 3:
      double v63 = (double *)(a4 + 52752);
      uint64_t v7 = a4 + 36560;
      int v8 = (double *)(a3 + 27024);
      uint64_t v9 = (double *)(a3 + 27032);
      long long v65 = (double *)(a3 + 27040);
      unsigned int v10 = (_WORD *)(a3 + 27076);
      break;
    case 2:
      double v63 = (double *)(a4 + 52752);
      uint64_t v7 = a4 + 21656;
      int v8 = (double *)(a3 + 27000);
      uint64_t v9 = (double *)(a3 + 27008);
      long long v65 = (double *)(a3 + 27016);
      unsigned int v10 = (_WORD *)(a3 + 27074);
      break;
    case 1:
      double v63 = (double *)(a4 + 52744);
      uint64_t v7 = a4 + 6752;
      int v8 = (double *)(a3 + 26976);
      uint64_t v9 = (double *)(a3 + 26984);
      long long v65 = (double *)(a3 + 26992);
      double v71 = (_WORD *)(a3 + 27072);
      goto LABEL_8;
    default:
      gn_report_assertion_failure("");
      return 0;
  }
  double v71 = v10;
LABEL_8:
  long long v64 = (unsigned char *)(a4 + 62039);
  if (!*(_DWORD *)(a3 + 148) || !*(_DWORD *)(a3 + 27136) || *(unsigned char *)(a3 + 241) || *v8 < 0.0 || *v9 < 0.0)
  {
    *int v8 = 0.0;
    *uint64_t v9 = 0.0;
  }
  long long v66 = v9;
  double v67 = v8;
  uint64_t v11 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v68 = 0;
  memset(v76, 0, 104);
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 16) = 0;
  long long v72 = (double *)(a3 + 976);
  double v12 = 0.0;
  memset(v75, 0, sizeof(v75));
  double v13 = 0.0;
  *(void *)(v7 + 40) = 0;
  do
  {
    uint64_t v14 = v7 + v11;
    if (*(unsigned char *)(v7 + v11 + 312))
    {
      double v74 = 0.0;
      uint64_t v15 = a2 + 4 * v11;
      int v17 = *(_DWORD *)(v15 + 96);
      uint64_t v16 = (unsigned __int8 *)(v15 + 96);
      NK_Obs_Equ_SV(a1, *(unsigned __int8 *)(v14 + 440), v17, a4 + 56 * v11 + 52760, (uint64_t)v76, *(double *)(a4 + 1552));
      int v19 = *(_DWORD *)(a3 + 20);
      unsigned int v18 = *(_DWORD *)(a3 + 24);
      if (v19 == v18)
      {
LABEL_17:
        uint64_t v20 = v7 + 8 * v11;
        uint64_t v21 = 5304;
      }
      else
      {
        switch(v19)
        {
          case 0:
            break;
          case 1:
            if (!v18) {
              goto LABEL_17;
            }
            break;
          case 2:
            if (v18 <= 1) {
              goto LABEL_17;
            }
            break;
          case 3:
            if (v18 <= 2) {
              goto LABEL_17;
            }
            break;
          case 4:
            if (v18 - 5 >= 3) {
              goto LABEL_17;
            }
            break;
          case 5:
            if ((v18 & 0xFFFFFFFE) != 6) {
              goto LABEL_17;
            }
            break;
          case 6:
            if (v18 != 7) {
              goto LABEL_17;
            }
            break;
          default:
            goto LABEL_17;
        }
        uint64_t v20 = v7 + 8 * v11;
        uint64_t v21 = 7352;
      }
      char v23 = (double *)(v20 + v21);
      uint64_t v24 = 0;
      double v25 = 0.0;
      do
      {
        float64x2_t v26 = vmulq_f64(*(float64x2_t *)&v76[v24], *(float64x2_t *)(a3 + 1600 + v24 * 8));
        double v25 = v25 + v26.f64[0] + v26.f64[1];
        v24 += 2;
      }
      while (v24 != 12);
      double v27 = *v23 - v25;
      double v28 = (double *)(v7 + 8 * v11);
      v28[1607] = v27;
      invtst(v72, v76, 0xCu, v28[1335], v27, 1.0e20, &v74);
      double v29 = v74;
      if (v74 <= 0.0) {
        gn_report_assertion_failure("NK_SV_Meas_AP_Stats: -ve var");
      }
      double v30 = v28[1335];
      double v31 = v30 + v30 - fabs(v29);
      v28[1735] = v31;
      unsigned int v22 = *(_DWORD *)(v7 + 4 * v11 + 568) - 1;
      if (v22 >= 0x1D && (a1 == 2 || *(unsigned char *)(a4 + v11 + 57)))
      {
        double v32 = v28[1607];
        *(double *)(v7 + 40) = v31 / v30 + *(double *)(v7 + 40);
        if (!*((unsigned char *)v75 + v11))
        {
          *((unsigned char *)v75 + v11) = 1;
          uint64_t v33 = *(unsigned __int8 *)(a2 + v11 + 736);
          if (v33 != 255) {
            *((unsigned char *)v75 + v33) = 1;
          }
          LOBYTE(v70) = v70 + 1;
          unsigned int v34 = *v16;
          if (v34 <= 7)
          {
            if (((1 << v34) & 0xEA) != 0)
            {
              LOBYTE(v69) = v69 + 1;
            }
            else if (v34 == 2)
            {
              LOBYTE(v68) = v68 + 1;
            }
            else if (v34 == 4)
            {
              ++BYTE4(v68);
            }
          }
        }
        double v12 = v12 + v32 * v32 / v30;
        double v13 = v13 + 1.0 / v30;
        unsigned int v35 = v16[1];
        if (v35 <= 0xD)
        {
          int v36 = 1 << v35;
          if ((v36 & 0x923) != 0)
          {
            ++BYTE4(v70);
          }
          else if ((v36 & 0x2288) != 0)
          {
            ++BYTE4(v69);
          }
        }
      }
    }
    else
    {
      unsigned int v22 = *(_DWORD *)(v7 + 4 * v11 + 568) - 1;
    }
    if (v22 > 0x1C)
    {
      switch(a1)
      {
        case 3:
          uint64_t v39 = a3 + v11;
          uint64_t v40 = 24640;
          break;
        case 2:
          uint64_t v39 = a3 + v11;
          uint64_t v40 = 24512;
          break;
        case 1:
          uint64_t v39 = a3 + v11;
          uint64_t v40 = 24384;
          break;
        default:
          goto LABEL_66;
      }
      *(unsigned char *)(v39 + v40) = 0;
    }
    else
    {
      *(unsigned char *)(v14 + 312) = 0;
      ++*v71;
      switch(a1)
      {
        case 3:
          uint64_t v37 = a3 + v11;
          uint64_t v38 = 24640;
          break;
        case 2:
          uint64_t v37 = a3 + v11;
          uint64_t v38 = 24512;
          break;
        case 1:
          uint64_t v37 = a3 + v11;
          uint64_t v38 = 24384;
          break;
        default:
          goto LABEL_66;
      }
      uint64_t v41 = (unsigned char *)(v37 + v38);
      int v42 = *v41;
      if (v42 != 255) {
        unsigned char *v41 = v42 + 1;
      }
    }
LABEL_66:
    ++v11;
  }
  while (v11 != 128);
  if (a1 == 1)
  {
    *long long v64 = v69;
    v64[5] = v68;
    v64[10] = BYTE4(v68);
    v64[15] = BYTE4(v70);
    v64[20] = BYTE4(v69);
    uint64_t v44 = v66;
    double v43 = v67;
  }
  else
  {
    uint64_t v44 = v66;
    double v43 = v67;
    if (a1 == 2)
    {
      v64[1] = v69;
      v64[6] = v68;
      v64[11] = BYTE4(v68);
      v64[16] = BYTE4(v70);
      v64[21] = BYTE4(v69);
    }
    else if (a1 == 3)
    {
      double v64[2] = v69;
      v64[7] = v68;
      v64[12] = BYTE4(v68);
      v64[17] = BYTE4(v70);
      v64[22] = BYTE4(v69);
    }
  }
  double v46 = *(double *)(v7 + 40);
  if (v46 < 1.0)
  {
    *(void *)(v7 + 32) = 0;
    double v47 = *v44 * 0.98;
    *uint64_t v44 = v47;
    double *v43 = *v43 * dbl_263D82190[*v43 > 1.0];
    long long v48 = v65;
    unsigned __int8 v45 = v70;
    if (v47 < 1.0)
    {
      double *v43 = 0.0;
      *uint64_t v44 = 0.0;
    }
    goto LABEL_106;
  }
  double v49 = v12 * *(double *)(v7 + 48) / v46;
  *(double *)(v7 + 32) = v49;
  if (v49 > 3.02)
  {
    double v50 = *v43;
    if (*v43 > 11.0)
    {
      if (v50 > 1.0)
      {
        if (v49 <= v50) {
          double v49 = *v43;
        }
        double v49 = v49 * 0.1;
      }
      goto LABEL_97;
    }
    double v51 = v46 + 0.5;
    if ((int)v51 <= 4) {
      unsigned __int8 v52 = (int)v51 - 1;
    }
    else {
      unsigned __int8 v52 = 4;
    }
    double v53 = F_dist[v52];
    BOOL v55 = v49 <= v53;
    double v54 = fmin(v50, 4.0) * v53;
    BOOL v55 = v55 || v49 <= v54;
    if (!v55)
    {
      if (v50 > 1.0) {
        double v49 = v49 / v50;
      }
LABEL_97:
      if (*(_DWORD *)(a4 + 1872) != 1 && v49 > *v63) {
        *double v63 = v49;
      }
    }
  }
  if (*(unsigned char *)(a3 + 241))
  {
    *(void *)(v7 + 40) = 0;
    long long v48 = v65;
    unsigned __int8 v45 = v70;
  }
  else
  {
    unsigned __int8 v45 = v70;
    double v56 = *v44 * 0.98;
    double v57 = *(double *)(v7 + 40);
    double v58 = *(double *)(v7 + 32) / (v13 / (double)v70);
    *(double *)(v7 + 16) = v58;
    long long v48 = v65;
    *long long v65 = v58 * v57 + *v65 * *v65 * v56;
    double v59 = *(double *)(v7 + 32) * *(double *)(v7 + 40) + *v43 * v56;
    double *v43 = v59;
    double v60 = v56 + *(double *)(v7 + 40);
    *uint64_t v44 = v60;
    double *v43 = v59 / v60;
    *(double *)(v7 + 16) = sqrt(*(double *)(v7 + 16));
    *long long v65 = sqrt(*v65 / *v44);
    if (*v63 > 1.0 && *v43 > 11.0)
    {
      double v61 = *v43 / *v63;
      double *v43 = v61;
      if (v61 < 10.0) {
        double *v43 = 10.0;
      }
    }
  }
LABEL_106:
  *(double *)(v7 + 24) = *v48;
  return v45;
}

uint64_t NK_PR_Res_ReWeight(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a3 + 241)
    && *(_DWORD *)(a3 + 27120) <= *(unsigned __int16 *)(a3 + 16)
    && *(_DWORD *)(a4 + 1872) == 1)
  {
    unsigned int v4 = *(_DWORD *)(a3 + 148);
    if (v4 >= *(_DWORD *)(a3 + 152)) {
      unsigned int v4 = *(_DWORD *)(a3 + 152);
    }
    if (v4 >= *(_DWORD *)(a3 + 156)) {
      unsigned int v4 = *(_DWORD *)(a3 + 156);
    }
    if (v4 >= 0xB)
    {
      double result = 0;
      int v5 = 0;
      int v6 = 0;
      int v7 = 0;
      int v8 = 0;
      int v9 = 0;
      int v10 = 0;
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      int v14 = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v15 = (unsigned char *)(a2 + 96);
      uint64_t v16 = a2 + 736;
      int v17 = (double *)(a4 + 12056);
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      do
      {
        if (*(unsigned char *)(a4 + 7064 + result))
        {
          double v18 = v17[800];
          if (v18 > 0.0)
          {
            if (!*((unsigned char *)&v67 + result))
            {
              ++v5;
              *((unsigned char *)&v67 + result) = 1;
              uint64_t v19 = *(unsigned __int8 *)(v16 + result);
              if (v19 != 255) {
                *((unsigned char *)&v67 + v19) = 1;
              }
            }
            double v20 = *v17;
            double v21 = fabs(*v17);
            if (v21 < 20.0 && !*((unsigned char *)&v59 + result))
            {
              ++v6;
              *((unsigned char *)&v59 + result) = 1;
              uint64_t v22 = *(unsigned __int8 *)(v16 + result);
              if (v22 != 255) {
                *((unsigned char *)&v59 + v22) = 1;
              }
            }
            double v23 = v20 * v20 / v18;
            if (v23 < 16.0)
            {
              ++v12;
              if (v23 < 9.0)
              {
                ++v13;
                if (v23 < 4.0)
                {
                  ++v14;
                  if (v23 < 1.0) {
                    ++v8;
                  }
                }
              }
            }
            ++v7;
            if (v20 > 0.0) {
              ++v11;
            }
            if (*(unsigned char *)(v16 + result - 128) == 1 && *v15 != 6)
            {
              if (v21 < 10.0) {
                ++v9;
              }
              if (v20 > 25.0) {
                ++v10;
              }
            }
          }
        }
        ++result;
        v15 += 4;
        ++v17;
      }
      while (result != 128);
      if (v7 <= 0)
      {
        double v25 = 0.0;
        double v26 = 0.0;
        double v27 = 0.0;
        double v28 = 0.0;
      }
      else
      {
        double result = 0x4059000000000000;
        double v24 = 100.0 / (double)v7;
        double v25 = v24 * (double)v8;
        double v26 = v24 * (double)v14;
        double v27 = v24 * (double)v13;
        double v28 = v24 * (double)v12;
      }
      if (v5 >= 10
        && v6 >= 5
        && v7 >= 15
        && v11 >= 4
        && v10 <= 1
        && (v14 > 20 || v9 > 5 || v25 > 40.0 || v26 > 50.0 || v27 > 60.0 || v28 > 70.0))
      {
        uint64_t v49 = 0;
        double v50 = (double *)(a4 + 12056);
        double v51 = (unsigned char *)(a2 + 96);
        do
        {
          if (*(unsigned char *)(a4 + 7064 + v49))
          {
            if ((double v52 = *v50, *(unsigned char *)(a2 + 608 + v49) != 1)
              || *v51 == 6
              || (v52 > 0.0 ? (BOOL v53 = v9 < 6) : (BOOL v53 = 0), !v53 ? (v54 = 0) : (v54 = 1), v52 <= 20.0 && (v54 & 1) == 0))
            {
              double v55 = v52 * v52;
              if (v52 * v52 > v50[800])
              {
                if (v52 <= 0.0)
                {
                  double v57 = 3.0;
                  if (v52 >= -25.0)
                  {
                    double v57 = 1.0;
                    if (v52 < -5.0) {
                      double v57 = (-5.0 - v52) * 0.1 + 1.0;
                    }
                  }
                  double v56 = v55 * (v57 * v57);
                }
                else
                {
                  double v56 = v50[672] * 4.0;
                  if (v55 < v56) {
                    double v56 = v55;
                  }
                }
                v50[672] = v56;
                *(unsigned char *)(a4 + 19480 + v49) = 1;
              }
            }
          }
          ++v49;
          ++v50;
          v51 += 4;
        }
        while (v49 != 128);
      }
      return result;
    }
  }
  if (!*(_DWORD *)(a4 + 1872) && *(_DWORD *)(a3 + 20) <= 3u && *(int *)(a4 + 20) >= 7 && *(int *)(result + 68) >= 5)
  {
    uint64_t v29 = 0;
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v33 = a2 + 736;
    unsigned int v34 = (double *)(a4 + 12056);
    memset(v58, 0, sizeof(v58));
    double result = (uint64_t)v58;
    do
    {
      if (*(unsigned char *)(a4 + 7064 + v29) && v34[800] > 0.0)
      {
        if (!*((unsigned char *)&v67 + v29))
        {
          ++v32;
          *((unsigned char *)&v67 + v29) = 1;
          uint64_t v35 = *(unsigned __int8 *)(v33 + v29);
          if (v35 != 255) {
            *((unsigned char *)&v67 + v35) = 1;
          }
        }
        double v36 = fabs(*v34);
        if (v36 < 15.0 && !*((unsigned char *)&v59 + v29))
        {
          ++v31;
          *((unsigned char *)&v59 + v29) = 1;
          uint64_t v37 = *(unsigned __int8 *)(v33 + v29);
          if (v37 != 255) {
            *((unsigned char *)&v59 + v37) = 1;
          }
        }
        if (v36 < 30.0 && !*((unsigned char *)v58 + v29))
        {
          ++v30;
          *((unsigned char *)v58 + v29) = 1;
          uint64_t v38 = *(unsigned __int8 *)(v33 + v29);
          if (v38 != 255) {
            *((unsigned char *)v58 + v38) = 1;
          }
        }
      }
      ++v29;
      ++v34;
    }
    while (v29 != 128);
    if (v32 >= 5 && v30 >= 1)
    {
      uint64_t v39 = 0;
      BOOL v41 = v32 > 7 && v30 > 3;
      uint64_t v42 = a4 + 7064;
      double v43 = (double *)(a4 + 12056);
      do
      {
        double result = *(unsigned __int8 *)(v42 + v39);
        if (*(unsigned char *)(v42 + v39))
        {
          double v44 = *v43;
          if (*v43 > 10.0 && v31 <= 11)
          {
            if (v43[672] > 100.0)
            {
              v43[672] = 100.0;
              goto LABEL_81;
            }
          }
          else if (v44 <= -10.0)
          {
            if (v44 * v44 > v43[800])
            {
              if (v41) {
                v43[672] = v44 * v44;
              }
              double v48 = 3.0;
              if (v44 >= -50.0)
              {
                double v48 = 1.0;
                if (v44 < -10.0) {
                  double v48 = (-10.0 - v44) * 0.1 + 1.0;
                }
              }
              double v47 = v43[672] * (v48 * v48);
LABEL_80:
              v43[672] = v47;
LABEL_81:
              *(unsigned char *)(a4 + 19480 + v39) = 1;
            }
          }
          else
          {
            double v46 = v43[672];
            if (v46 > 400.0)
            {
              double v47 = fmin(v46 * 0.25, 400.0);
              goto LABEL_80;
            }
          }
        }
        ++v39;
        ++v43;
      }
      while (v39 != 128);
    }
  }
  return result;
}

BOOL GN_ASBAS_Set_Eph_El(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (!Is_GN_API_Set_Allowed("GN_ASBAS_Set_Eph_El")) {
    return 0;
  }
  if (g_Logging_Cfg < 5) {
    EvLog_nd("GN_ASBAS_Set_Eph_El: ", 2, v6, a1, a2);
  }
  else {
    EvLog_nd("GN_ASBAS_Set_Eph_El: ", 16, *((unsigned int *)a3 + 10), a1, a2, *a3, *((unsigned __int8 *)a3 + 2), *((unsigned int *)a3 + 1), *((unsigned int *)a3 + 2), *((unsigned int *)a3 + 3), *((unsigned int *)a3 + 4), *((unsigned int *)a3 + 5), *((unsigned int *)a3 + 6), *((unsigned int *)a3 + 7), *((unsigned int *)a3 + 8), *((unsigned int *)a3 + 9), *((unsigned int *)a3 + 10), *((unsigned int *)a3 + 11), *((unsigned __int8 *)a3 + 48));
  }
  if (a1 <= 0x77)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: SVid = %d <%d, Out of range!");
    return 0;
  }
  if (a1 >= 0x9F)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: SVid = %d >%d, Out of range!");
    return 0;
  }
  if (*a3 >> 3 >= 0x2A3u)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: to = %d >=5400, Out of range!");
    return 0;
  }
  unsigned int v7 = *((unsigned __int8 *)a3 + 2);
  if (v7 >= 0x10)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: URA = %d >15, Out of range!");
    return 0;
  }
  int v8 = *((_DWORD *)a3 + 1);
  if ((v8 - 2048) <= 0xFFFFEFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: agf0 = %d <-2^11 or >=2^11, Out of range!");
    return 0;
  }
  int v9 = *((_DWORD *)a3 + 2);
  if (v9 != (char)v9)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: agf1 = %d <-2^7 or >=2^7, Out of range!");
    return 0;
  }
  uint64_t v10 = 0;
  char v11 = 1;
  do
  {
    char v12 = v11;
    if ((*(_DWORD *)&a3[2 * v10 + 6] - 536870913) < 0xBFFFFFFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: pos[%d] = %d <-2^29 or >=2^29, Out of range!");
      return 0;
    }
    char v11 = 0;
    uint64_t v10 = 1;
  }
  while ((v12 & 1) != 0);
  int v13 = *((_DWORD *)a3 + 5);
  if ((v13 - 16777217) < 0xFDFFFFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: pos[2] = %d <-2^24 or >=2^24, Out of range!");
    return 0;
  }
  uint64_t v16 = 0;
  char v17 = 1;
  do
  {
    char v18 = v17;
    if ((*(_DWORD *)&a3[2 * v16 + 12] - 65537) < 0xFFFDFFFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: vel[%d] = %d <-2^16 or >=2^16, Out of range!");
      return 0;
    }
    char v17 = 0;
    uint64_t v16 = 1;
  }
  while ((v18 & 1) != 0);
  int v19 = *((_DWORD *)a3 + 8);
  if ((v19 - 131073) < 0xFFFBFFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: vel[2] = %d <-2^17 or >=2^17, Out of range!");
    return 0;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    if ((*(_DWORD *)&a3[2 * i + 18] - 513) < 0xFFFFFBFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: acc[%d] = %d <-2^9 or >=2^9, Out of range!");
      return 0;
    }
  }
  uint64_t v21 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v21 + 16) && *(int *)v21 >= 3) {
    int v22 = (int)*(double *)(v21 + 40) + 604800 * *(__int16 *)(v21 + 32);
  }
  else {
    int v22 = 0;
  }
  unsigned __int16 v25 = *a3;
  char v26 = v7;
  int v27 = v8;
  int v28 = v9;
  uint64_t v29 = *(void *)(a3 + 6);
  int v30 = v13;
  uint64_t v31 = *((void *)a3 + 3);
  int v32 = v19;
  uint64_t v33 = *(void *)(a3 + 18);
  int v34 = *((_DWORD *)a3 + 11);
  if (*((unsigned char *)a3 + 48)) {
    int v23 = 5;
  }
  else {
    int v23 = 3;
  }
  v24[0] = v22;
  _DWORD v24[1] = v23;
  BOOL v14 = SBAS_Set_StateTable(a1, a2, v24);
  if (v14) {
    Debug_Log_SBA_Eph(1, a1, a2, (uint64_t)v24);
  }
  return v14;
}

uint64_t G5K_Read_GNB_Meas(char **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unsigned int v4 = *a1;
  if (*a1 != v3 && v4 == v2)
  {
    *a1 = v3;
    a1[1] = v3;
    uint64_t v2 = v3;
    unsigned int v4 = v3;
  }
  unint64_t v6 = 15 * (a1[3] - v3) + (15 * (a1[3] - v3) < 0 ? 0xFuLL : 0);
  unint64_t v7 = v6 >> 4;
  if (v4 >= v2) {
    uint64_t v2 = a1[3];
  }
  else {
    LOWORD(v2) = (_WORD)v2 - 1;
  }
  unsigned __int16 v8 = (_WORD)v2 - (_WORD)v4;
  unsigned int v9 = (unsigned __int16)(v6 >> 4);
  if (v9 < v8) {
    unsigned __int16 v8 = v6 >> 4;
  }
  uint64_t result = GncP02_16GetMEDataFrmBuf(v8, v4);
  char v11 = &(*a1)[result];
  *a1 = v11;
  if (v11 >= a1[3])
  {
    int v13 = a1[1];
    char v12 = a1[2];
    if (v13 != v12)
    {
      *a1 = v12;
      unsigned __int16 v14 = ~(_WORD)v12 + (_WORD)v13;
      if (v9 < v14) {
        unsigned __int16 v14 = v7;
      }
      uint64_t result = GncP02_16GetMEDataFrmBuf(v14, v12);
      uint64_t v15 = &(*a1)[result];
      *a1 = v15;
      if (v15 >= a1[3]) {
        *a1 = a1[2];
      }
    }
  }
  return result;
}

void G5K_ME_Decode_Meas(unsigned __int8 **a1, char *a2)
{
  uint64_t v225 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)*((void *)a2 + 48);
  unsigned int v4 = a1[1];
  if (v4 == *a1) {
    goto LABEL_302;
  }
  unint64_t v6 = a2 + 28232;
  uint64_t v217 = a2 + 12344;
  int64x2_t v221 = a2 + 402;
  unint64_t v7 = a2 + 381;
  unsigned __int16 v8 = a2 + 1;
  int8x16_t v219 = a2 + 568;
  int v215 = a2 + 7764;
  unsigned int v9 = a2 + 7736;
  int64x2_t v218 = a2 + 3;
  __int16 v216 = a2 + 12356;
  int64x2_t v214 = vdupq_n_s64(0x40F5180000000000uLL);
  int64x2_t v213 = vdupq_n_s64(0x4122750000000000uLL);
  uint64_t v220 = a2 + 7736;
  while (1)
  {
    int v12 = *v4;
    uint64_t v10 = v4 + 1;
    int v11 = v12;
    a1[1] = v10;
    if (v10 >= a1[3]) {
      a1[1] = a1[2];
    }
    if (v3 < a2 || v3 >= v7)
    {
      EvCrt_v("G5K_ME_Decode_Meas: Rec Buff out of bounds");
      a2[392] = 0;
      uint64_t v3 = a2;
    }
    if (v11 != 123 && v11 != 36) {
      break;
    }
    a2[392] = 1;
    *a2 = v11;
    uint64_t v3 = a2 + 1;
LABEL_11:
    unsigned int v4 = a1[1];
    if (v4 == *a1) {
      goto LABEL_302;
    }
  }
  if (!a2[392]) {
    goto LABEL_11;
  }
  *v3++ = v11;
  if (v11 != 10) {
    goto LABEL_11;
  }
  *uint64_t v3 = 0;
  if (a2[392] && STEU_Checksum_OK(a2))
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    int v17 = 1;
    int v18 = 1;
    switch(*v8)
    {
      case 'B':
        int v14 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 9;
        int v15 = 1;
        goto LABEL_37;
      case 'C':
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 6;
        goto LABEL_37;
      case 'F':
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 5;
        goto LABEL_37;
      case 'G':
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 4;
        goto LABEL_37;
      case 'H':
        int v21 = a2[405];
        if (a2[403] | v21)
        {
          uint64_t v22 = a2[404] - v21;
          unsigned __int16 v23 = *((_WORD *)a2 + 200) + v22;
          *((_WORD *)a2 + 200) = v23;
          unsigned __int16 v24 = *((_WORD *)a2 + 198) + 1;
          *((_WORD *)a2 + 198) = v24;
          EvCrt_nd("G5K_ME_InComplete_Epoch_Check: Missed M & T", 3, v13, v22, v23, v24);
          *(_WORD *)(a2 + 403) = 0;
          a2[405] = 0;
          bzero(v219, 0x1C00uLL);
          uint64_t v25 = -4608;
          do
          {
            char v26 = &v9[v25];
            *((_OWORD *)v26 + 289) = 0uLL;
            *((_OWORD *)v26 + 288) = 0uLL;
            v9[v25 + 4640] = 0;
            v25 += 36;
          }
          while (v25);
          EvCrt_v("G5K_ME_InComplete_Epoch_Check:  Flushing M");
        }
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 3;
        int v14 = 1;
        goto LABEL_37;
      case 'I':
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 7;
        goto LABEL_37;
      case 'M':
        goto LABEL_37;
      case 'N':
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 8;
        goto LABEL_37;
      case 'T':
        int v14 = 0;
        int v15 = 0;
        int v17 = 0;
        int v18 = 2;
        int v16 = 1;
        goto LABEL_37;
      case 'W':
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 10;
LABEL_37:
        memset(v224, 0, sizeof(v224));
        int v27 = *a2;
        if (v27 != 123)
        {
          int v28 = "G5K_ME_Decode: Incorrect 1st ch";
          goto LABEL_41;
        }
        int v27 = *v8;
        if ((v27 - 123) <= 0xFFFFFFC5)
        {
          int v28 = "G5K_ME_Decode: Incorrect ID";
LABEL_41:
          EvCrt_d(v28, v27);
          goto LABEL_42;
        }
        int v54 = a2[2];
        if (v54 == 125)
        {
          int v28 = "G5K_ME_Decode: Incorrect start";
          int v27 = 125;
          goto LABEL_41;
        }
        int v202 = v15;
        int v205 = v18;
        int v208 = v14;
        int v199 = v16;
        int v196 = v17;
        int v212 = v6;
        int v55 = 0;
        uint64_t v56 = 0;
        LODWORD(v223) = 0;
        double v57 = v218;
        break;
      default:
        EvLog_v("ME_Get_Msg_Type: Unknown message type:  {%c", *v8);
        goto LABEL_42;
    }
    while (1)
    {
      if ((v54 - 112) <= 0xBFu)
      {
        EvCrt_d("G5K_ME_Decode: Illegal ch", v54);
LABEL_115:
        unint64_t v6 = v212;
        goto LABEL_42;
      }
      *((unsigned char *)&v223 + v55) = v54 - 48;
      int v54 = *v57;
      if (v54 == 125) {
        break;
      }
      if (v55 == 3) {
        goto LABEL_104;
      }
      ++v55;
LABEL_107:
      unsigned int v9 = v220;
      ++v57;
      if (v54 == 125)
      {
        int v61 = v205 - 1;
        if (!v208)
        {
          unint64_t v6 = v212;
          goto LABEL_129;
        }
        unint64_t v6 = v212;
        if ((int)v56 <= 26)
        {
          if (v56 == 15)
          {
            uint64_t v62 = 14;
            int v63 = -14;
            goto LABEL_126;
          }
          if (v56 == 21)
          {
            uint64_t v62 = 19;
            int v63 = -19;
            goto LABEL_126;
          }
        }
        else
        {
          switch(v56)
          {
            case 0x1B:
              uint64_t v62 = 27;
              int v63 = -27;
              goto LABEL_126;
            case 0x1E:
              uint64_t v62 = 29;
              int v63 = -29;
              goto LABEL_126;
            case 0x24:
              uint64_t v62 = 34;
              int v63 = -34;
LABEL_126:
              int v64 = v63 + G5K_CompMsgSize[(v205 - 1)];
              if (!v64 || (uint64_t v56 = (v64 + v62), v56 > 0x80))
              {
                uint64_t v56 = v62;
                break;
              }
              do
              {
                *((unsigned char *)v224 + v62) = 0;
                LODWORD(v62) = v62 + 1;
                --v64;
              }
              while (v64);
LABEL_129:
              if (v202)
              {
                if (v56 == 21)
                {
                  uint64_t v56 = G5K_CompMsgSize[(v205 - 1)];
                  unsigned int v65 = 21;
                  do
                    *((unsigned char *)v224 + v65++) = 0;
                  while (v56 != v65);
                  goto LABEL_133;
                }
              }
              else
              {
LABEL_133:
                if (v199)
                {
                  int v66 = -15;
                  switch((int)v56)
                  {
                    case 15:
                      goto LABEL_141;
                    case 16:
                    case 17:
                    case 19:
                    case 20:
                    case 22:
                    case 23:
                      goto LABEL_154;
                    case 18:
                      int v66 = -18;
                      goto LABEL_141;
                    case 21:
                      uint64_t v56 = 20;
                      int v66 = -20;
                      goto LABEL_141;
                    case 24:
                      uint64_t v56 = 22;
                      int v66 = -22;
                      goto LABEL_141;
                    default:
                      if (v56 != 63) {
                        goto LABEL_154;
                      }
                      int v66 = -63;
LABEL_141:
                      int v67 = v66 + G5K_CompMsgSize[(v205 - 1)];
                      if (!v67 || (v67 + v56) > 0x80) {
                        goto LABEL_154;
                      }
                      do
                      {
                        *((unsigned char *)v224 + v56) = 0;
                        uint64_t v56 = (v56 + 1);
                        --v67;
                      }
                      while (v67);
                      break;
                  }
                }
                if (v196)
                {
                  switch(v56)
                  {
                    case '6':
                      int v68 = -54;
                      break;
                    case 'E':
                      uint64_t v56 = 68;
                      int v68 = -68;
                      break;
                    case 'B':
                      uint64_t v56 = 64;
                      int v68 = -64;
                      break;
                    default:
                      goto LABEL_154;
                  }
                  int v69 = v68 + G5K_CompMsgSize[(v205 - 1)];
                  if (v69 && (v69 + v56) <= 0x80)
                  {
                    do
                    {
                      *((unsigned char *)v224 + v56) = 0;
                      uint64_t v56 = (v56 + 1);
                      --v69;
                    }
                    while (v69);
                  }
                }
              }
              break;
          }
        }
LABEL_154:
        uint64_t v70 = G5K_CompMsgSize[(v205 - 1)];
        if (v56 == v70
          || (v56 >= v70
            ? (long long v71 = "G5K_ME_Decode: Warning: {%c too long, %d < %d ")
            : (long long v71 = "G5K_ME_Decode: ERROR: {%c too short, %d < %d "),
              EvCrt_v(v71, G5K_CompMsgType[(v205 - 1)], v56, v70),
              int v61 = v205 - 1,
              v56 >= v70))
        {
          if (v56)
          {
            switch(v61)
            {
              case 0:
                int v72 = SLOBYTE(v224[0]);
                int v73 = LOBYTE(v224[0]);
                ++a2[405];
                if (v72 < 0)
                {
                  EvCrt_v("ME_dec_M: Warning: Unsupported channel index %d >= %d");
                  goto LABEL_115;
                }
                int v74 = BYTE1(v224[0]) >> 4;
                int v75 = BYTE1(v224[0]) & 0xF;
                int v222 = 0;
                int v209 = BYTE2(v224[0]);
                int v76 = Decode_SVid_STE(BYTE2(v224[0]), v74, &v222);
                int v78 = v222;
                long long v79 = 0uLL;
                if (v75 == 15 && !v222 && !v76) {
                  goto LABEL_117;
                }
                if (!(v222 | v76))
                {
                  EvLog_v("ME_dec_M: Not Supported: SVID %d Const %d Sig %d", v209, v74, v75);
                  goto LABEL_117;
                }
                if (v222)
                {
                  if (v75 == 15)
                  {
LABEL_285:
                    EvCrt_v("G5K_ME_dec_M: Illegal STE SV:  ID %d  Const %d  Sig %d", v209, v74, v75);
                    uint64_t v162 = &a2[56 * v73];
                    *((void *)v162 + 77) = 0;
                    *(_OWORD *)(v162 + 584) = 0u;
                    *(_OWORD *)(v162 + 600) = 0u;
                    *(_OWORD *)(v162 + 568) = 0u;
                    long long v163 = &a2[36 * v73 + 7736];
                    *(_OWORD *)long long v163 = 0u;
                    *((_OWORD *)v163 + 1) = 0u;
                    v163[32] = 0;
                    goto LABEL_117;
                  }
                }
                else if (v75 != 15 || v76)
                {
                  goto LABEL_285;
                }
                uint64_t v201 = *((void *)&xmmword_26AA2DE48 + 1);
                double v142 = &a2[36 * v72];
                double v143 = v142 + 7736;
                *(void *)(v142 + 7740) = 0;
                *(void *)(v142 + 7748) = 0;
                *(void *)(v142 + 7761) = 0;
                double v144 = &a2[56 * v72];
                unsigned int v145 = v144 + 568;
                *(void *)(v142 + 7756) = 0;
                *((void *)v144 + 77) = 0;
                *(_OWORD *)(v144 + 568) = 0uLL;
                *(_OWORD *)(v144 + 584) = 0uLL;
                *(_OWORD *)(v144 + 600) = 0uLL;
                v142[7736] = v78;
                v142[7737] = v75;
                if (v78 == 2) {
                  char v146 = 0;
                }
                else {
                  char v146 = v76;
                }
                if (v78 == 2) {
                  char v147 = v76;
                }
                else {
                  char v147 = 0;
                }
                v142[7738] = v146;
                v142[7739] = v147;
                LODWORD(v79) = *(_DWORD *)((char *)v224 + 3);
                int16x4_t v148 = (int16x4_t)vmovl_u8(*(uint8x8_t *)&v79).u64[0];
                *(int16x4_t *)v77.uint64_t i8 = vrev32_s16(v148);
                v77.i32[0] = v148.i32[0];
                *((_DWORD *)v142 + 1935) = vmovn_s16(v77).u32[0];
                *((_WORD *)v142 + 3872) = *(_WORD *)((char *)v224 + 7);
                int v149 = HIBYTE(v224[0]);
                unsigned int v150 = *(_DWORD *)((char *)v224 + 9);
                int v151 = *(unsigned __int16 *)((char *)v224 + 13);
                unsigned int v152 = DWORD1(v224[1]);
                *((_DWORD *)v144 + 145) = v224[1];
                *((_WORD *)v142 + 3876) = WORD5(v224[1]);
                *((_WORD *)v142 + 3873) = HIWORD(v224[1]);
                *((_DWORD *)v142 + 1937) = v224[2];
                *((_WORD *)v144 + 305) = WORD3(v224[2]);
                v144[612] = BYTE8(v224[2]);
                *(_DWORD *)(v144 + 606) = *(_DWORD *)((char *)&v224[2] + 9);
                v144[613] = BYTE13(v224[2]);
                unsigned __int16 v204 = WORD4(v224[1]);
                unsigned int v207 = v152;
                v142[7758] = BYTE7(v224[3]);
                *((_WORD *)v142 + 3878) = WORD4(v224[3]);
                *((_WORD *)v144 + 300) = WORD5(v224[3]);
                int v153 = v224[4];
                *(_DWORD *)(v144 + 602) = HIDWORD(v224[3]);
                unsigned int v154 = BYTE6(v224[3]);
                *((_DWORD *)v145 + 4) = v153;
                v142[7759] = BYTE4(v224[4]);
                *((_DWORD *)v142 + 1940) = *(_DWORD *)((char *)&v224[4] + 5);
                __int16 v155 = &v215[36 * v72];
                *(_DWORD *)__int16 v155 = *(_DWORD *)((char *)&v224[4] + 9);
                v155[4] = BYTE13(v224[4]);
                unsigned int v156 = v151 | (v149 << 16);
                v142[7754] = v154 >> 4;
                v142[7755] = v154 & 0xF;
                *(double *)&int v223 = 0.0;
                if (!(v150 | v156))
                {
                  *(void *)unsigned int v145 = 0;
                  *(_WORD *)&a2[56 * v72 + 576] = 0;
                  goto LABEL_298;
                }
                double v157 = (double)v150 * 0.001 + (double)v156 * 0.0000000596046448 * 0.001;
                uint64_t v198 = (double *)&a2[56 * v72 + 616];
                v211.f64[0] = v157;
                *uint64_t v198 = v157;
                if (v78 == 2)
                {
                  *int v212 = API_Get_UTC_Cor(1, (double *)&v223);
                  if (*(double *)&v223 <= 0.0) {
                    double v158 = -0.5;
                  }
                  else {
                    double v158 = 0.5;
                  }
                  int v159 = (int)(*(double *)&v223 + v158);
                  if (*(double *)&v223 + v158 < -2147483650.0) {
                    int v159 = 0x80000000;
                  }
                  if (*(double *)&v223 + v158 > 2147483650.0) {
                    int v159 = 0x7FFFFFFF;
                  }
                  *(double *)&int v223 = (double)v159;
                  v212[1] = v159;
                  v160.f64[0] = *v198;
                  v160.f64[1] = v211.f64[0] + -10800.0 + (double)v159;
                  if (v75 == 4) {
                    float64x2_t v160 = vaddq_f64(v160, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(v201 + 8 * v143[3] + 1920) * 0.00000000333564095), 0));
                  }
                  float64x2_t v161 = (float64x2_t)v214;
                  goto LABEL_291;
                }
                if (v78 == 4)
                {
                  v160.f64[0] = (double)v150 * 0.001 + (double)v156 * 0.0000000596046448 * 0.001;
                  v160.f64[1] = v157 + 14.0;
                  if (v75 == 12) {
                    float64x2_t v160 = vaddq_f64(v160, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(v201 + 1984) * 0.00000000333564095), 0));
                  }
                  float64x2_t v161 = (float64x2_t)v213;
LABEL_291:
                  float64x2_t v211 = vmlsq_f64(v160, v161, vrndmq_f64(vdivq_f64(v160, v161)));
                  *uint64_t v198 = v211.f64[0];
                  double v157 = v211.f64[1];
                }
                if (((1 << v75) & 0xDD77) == 0)
                {
                  double v171 = *(double *)(v201 + 1992) * 0.00000000333564095;
                  double v157 = v157 + v171 - floor((v157 + v171) / 604800.0) * 604800.0;
                  *uint64_t v198 = v211.f64[0] + v171 - floor((v211.f64[0] + v171) / 604800.0) * 604800.0;
                }
                uint64_t v164 = (int)(v157 * 0.666666667);
                *(_DWORD *)unsigned int v145 = v164;
                double v165 = v157 + (double)(int)v164 * -1.5;
                uint64_t v166 = (int)(v165 * 1000.0);
                double v167 = v165 + (double)v166 * -0.001;
                uint64_t v168 = (int)(v167 * 1023000.0);
                double v169 = &a2[56 * v72];
                double v170 = (v167 + (double)v168 * -0.000000977517107) * 1023000.0 * 10000.0;
                *((_DWORD *)v169 + 143) = v168 - v166 + (v166 << 10);
                *((_WORD *)v169 + 288) = (109951163 * (unint64_t)((int)v170 << 12)) >> 36;
                if ((int)v164 <= 403199
                  && v166 <= 0x5DB
                  && v168 <= 0x3FE
                  && (int)v170 >> 4 < 0x271)
                {
LABEL_298:
                  *(double *)&a2[56 * v72 + 592] = (double)v207 + (double)v204 * 0.0000152587891;
                  goto LABEL_117;
                }
                EvLog_nd("G5K_ME_dec_M: Code TOT out of range ", 4, v13, v164, v166, v168, (int)v170);
                break;
              case 1:
                int v80 = v224[0];
                int v81 = DWORD1(v224[0]);
                *((_DWORD *)a2 + 109) = v224[0];
                *((_DWORD *)a2 + 110) = v81;
                *((_DWORD *)a2 + 111) = WORD4(v224[0]);
                *((_DWORD *)a2 + 112) = 8 * *(_DWORD *)((char *)v224 + 10);
                char v82 = BYTE14(v224[0]);
                if (BYTE14(v224[0]) > 7u) {
                  char v82 = -1;
                }
                a2[452] = v82;
                char v184 = BYTE1(v224[1]);
                __int16 v200 = WORD1(v224[1]);
                char v210 = BYTE4(v224[1]);
                unsigned __int16 v203 = *(_WORD *)((char *)v224 + 15);
                int v206 = SBYTE5(v224[1]);
                __int16 v197 = WORD3(v224[1]);
                __int16 v195 = WORD4(v224[1]);
                __int16 v193 = WORD6(v224[1]);
                __int16 v194 = WORD5(v224[1]);
                __int16 v191 = v224[2];
                __int16 v192 = HIWORD(v224[1]);
                __int16 v189 = WORD2(v224[2]);
                __int16 v190 = WORD1(v224[2]);
                int v187 = BYTE7(v224[2]);
                int v188 = BYTE6(v224[2]);
                int v179 = BYTE10(v224[2]);
                int v180 = BYTE9(v224[2]);
                int v178 = BYTE11(v224[2]);
                __int16 v185 = WORD6(v224[2]);
                int v186 = BYTE8(v224[2]);
                int v173 = HIBYTE(v224[2]);
                int v174 = BYTE14(v224[2]);
                int v172 = LOBYTE(v224[3]);
                int v83 = BYTE1(v224[3]);
                int v84 = BYTE2(v224[3]);
                int v85 = BYTE3(v224[3]);
                char v182 = BYTE6(v224[3]);
                __int16 v183 = WORD2(v224[3]);
                __int16 v181 = *(_WORD *)((char *)&v224[3] + 7);
                *((_DWORD *)a2 + 118) = LOWORD(v224[4]) | (BYTE2(v224[4]) << 16);
                __int16 v176 = *(_WORD *)((char *)&v224[3] + 11);
                __int16 v177 = *(_WORD *)((char *)&v224[3] + 9);
                __int16 v175 = *(_WORD *)((char *)&v224[3] + 13);
                char v86 = HIBYTE(v224[3]);
                if (a2[403] && v80 == *((_DWORD *)a2 + 130) && (int v87 = *((_DWORD *)a2 + 131)) != 0)
                {
                  *((_DWORD *)a2 + 114) = v87;
                  uint64_t v88 = *((void *)a2 + 66);
                }
                else
                {
                  uint64_t v108 = mach_continuous_time();
                  uint64_t v88 = 0;
                  *((_DWORD *)a2 + 114) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v108);
                }
                *((void *)a2 + 58) = v88;
                *((_DWORD *)a2 + 126) = 0;
                a2[508] = 0;
                a2[402] = 1;
                unsigned int v109 = a2[452];
                if (v109 != 255 && !a2[453])
                {
                  API_Set_Inter_Chan_Bias_Model(v109);
                  a2[453] = 1;
                }
                double v110 = *(double **)(p_api + 72);
                v110[10] = (double)v184 + (double)v86 * 0.0078125;
                v110[11] = (double)v197 * 0.00390625;
                v110[12] = (double)v195 * 0.00390625;
                v110[13] = (double)v194 * 0.00390625;
                v110[14] = (double)v193 * 0.00390625;
                v110[15] = (double)v200 * 0.00390625;
                v110[16] = (double)v192 * 0.00390625;
                v110[17] = (double)v191 * 0.00390625;
                v110[18] = (double)v190 * 0.00390625;
                v110[19] = (double)v189 * 0.00390625;
                v110[20] = (double)(((v188 << 8) | (v187 << 16) | (v186 << 24)) >> 8) * 0.125;
                v110[21] = (double)(((v180 << 8) | (v179 << 16) | (v178 << 24)) >> 8) * 0.125;
                v110[22] = (double)v185 * 0.125;
                v110[23] = (double)(((v174 << 8) | (v173 << 16) | (v172 << 24)) >> 8) * 0.125;
                v110[24] = (double)(((v83 << 8) | (v84 << 16) | (v85 << 24)) >> 8) * 0.125;
                API_Set_TSX_ClkCorr_Params((double)v183 * 0.125, (double)v182 * 0.125, v203);
                uint64_t v111 = *(void *)(p_api + 72);
                *(double *)(v111 + 200) = (double)v181 * 0.125;
                *(double *)(v111 + 208) = (double)v177 * 0.125;
                *(double *)(v111 + 216) = (double)v176 * 0.125;
                *(double *)(v111 + 224) = (double)v175 * 0.125;
                char v112 = v210;
                if (v206 <= 0) {
                  char v112 = 0;
                }
                *(unsigned char *)(v111 + 250) = v112;
                *(unsigned char *)(v111 + 251) = v206 & ~(v206 >> 31);
                goto LABEL_117;
              case 2:
                a2[404] = v224[0];
                *((_DWORD *)a2 + 130) = *(_DWORD *)((char *)v224 + 1);
                *((_WORD *)a2 + 268) = *(_WORD *)((char *)v224 + 5);
                *((_WORD *)a2 + 270) = *(_WORD *)((char *)v224 + 7);
                a2[544] = BYTE9(v224[0]);
                *((_WORD *)a2 + 269) = WORD5(v224[0]);
                *(_WORD *)(a2 + 545) = WORD6(v224[0]);
                int v89 = BYTE14(v224[0]);
                a2[547] = BYTE14(v224[0]);
                int v90 = HIBYTE(v224[0]);
                a2[548] = HIBYTE(v224[0]);
                int v91 = LOBYTE(v224[1]);
                a2[549] = v224[1];
                int v92 = BYTE1(v224[1]);
                a2[551] = BYTE1(v224[1]);
                *(double *)&int v223 = COERCE_DOUBLE((_OWORD *)((char *)&v224[1] + 3));
                *((void *)a2 + 66) = ByteS_Ext_8(&v223);
                signed int v93 = v223;
                *((_WORD *)a2 + 277) = *(_WORD *)v223;
                *((_WORD *)a2 + 271) = *((_WORD *)v93 + 1);
                int v94 = v93[4];
                a2[550] = v94;
                a2[552] = v93[5];
                a2[553] = v93[6];
                a2[556] = v93[7];
                a2[557] = v93[8];
                a2[558] = v93[9];
                a2[559] = v93[10];
                char v95 = v93[11];
                int v223 = v93 + 11;
                a2[560] = v95;
                a2[547] = (v89 + 8) >> 4;
                a2[548] = (v90 + 8) >> 4;
                a2[549] = (v91 + 8) >> 4;
                a2[550] = (v94 + 8) >> 4;
                a2[551] = (v92 + 8) >> 4;
                LODWORD(v93) = g_GncPMeData;
                *((_DWORD *)a2 + 131) = g_GncPMeData;
                if (!v93) {
                  *((_DWORD *)a2 + 131) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                }
                                                           * (double)mach_continuous_time());
                TM_FSP_OS_Time_ms_for_TTicuint64_t k = API_Get_TM_FSP_OS_Time_ms_for_TTick(*((_DWORD *)a2 + 130));
                int v97 = *((_DWORD *)a2 + 131);
                unint64_t v6 = v212;
                if (TM_FSP_OS_Time_ms_for_TTick)
                {
                  int v98 = TM_FSP_OS_Time_ms_for_TTick;
                  unsigned int v99 = TM_FSP_OS_Time_ms_for_TTick - v97 >= 0
                      ? TM_FSP_OS_Time_ms_for_TTick - v97
                      : v97 - TM_FSP_OS_Time_ms_for_TTick;
                  if (v99 >> 3 <= 0x270)
                  {
                    if (g_Logging_Cfg >= 7) {
                      EvLog_v("TM_FSP: Replacing %u with %u delta %d", v97, TM_FSP_OS_Time_ms_for_TTick, TM_FSP_OS_Time_ms_for_TTick - v97);
                    }
                    *((_DWORD *)a2 + 131) = v98;
                    int v97 = v98;
                  }
                }
                a2[403] = 1;
                *((_DWORD *)v212 + 2) = v97;
                goto LABEL_118;
              case 3:
                uint64_t v100 = 0;
                double v101 = (int *)v216;
                while (1)
                {
                  double v102 = &a2[124 * v100 + 12464];
                  if (!*v102) {
                    break;
                  }
                  ++v100;
                  v101 += 31;
                  if (v100 == 128)
                  {
                    EvCrt_v("G5K_ME_dec_G: No empty slots!");
                    goto LABEL_115;
                  }
                }
                LODWORD(v223) = 0;
                int v113 = v224[0] & 0xF;
                int v114 = Decode_SVid_STE(BYTE1(v224[0]), LOBYTE(v224[0]) >> 4, (int *)&v223);
                if (v223 == 1 && v114 >= 1 && v114 < 33 || v223 == 5 && v114 >= 193 && v114 < 203)
                {
                  int v115 = &a2[124 * v100 + 12344];
                  *int v115 = (char)v223;
                  v115[1] = v113;
                  v115[2] = v114;
                  v115[3] = 0;
                  if (v113)
                  {
                    EvCrt_d("ME_dec_G: Illegal GPS/QZSS Signal ", v113);
                  }
                  else
                  {
                    uint64_t v135 = 0;
                    char v136 = 0;
                    int v137 = &a2[124 * v100];
                    double v138 = v137 + 12348;
                    double v139 = v137 + 12344;
                    v137[12349] = v114;
                    unsigned int v140 = WORD2(v224[0]);
                    *((_WORD *)v139 + 4) = WORD2(v224[0]);
                    double v141 = (unsigned __int16 *)v224 + 3;
                    do
                    {
                      *v101++ = *v141 | (*((unsigned __int8 *)v141 + 2) << 16);
                      v136 += ((v140 >> v135++) & 1) == 0;
                      double v141 = (unsigned __int16 *)((char *)v141 + 3);
                    }
                    while (v135 != 10);
                    v138[2] = v136;
                    unsigned char *v138 = 1;
                    ++a2[409];
                    *double v102 = 1;
                  }
                }
                else
                {
                  EvCrt_v("ME_dec_G: Illegal GPS/QZSS STE SV:  ID %d  Const %d  Sig %d");
                }
                goto LABEL_117;
              case 4:
                uint64_t v103 = 128;
                double v104 = v217;
                while (v104[120])
                {
                  v104 += 124;
                  if (!--v103)
                  {
                    EvCrt_v("G5K_ME_dec_F: No empty slots!");
                    goto LABEL_42;
                  }
                }
                LODWORD(v223) = 0;
                char v116 = v224[0] & 0xF;
                char v117 = Decode_SVid_STE(BYTE1(v224[0]), LOBYTE(v224[0]) >> 4, (int *)&v223);
                if (v223 != 2)
                {
                  EvCrt_v("ME_dec_F: Illegal F STE SV:  ID %d  Const %d  Sig %d");
                  goto LABEL_118;
                }
                char *v104 = 2;
                v104[1] = v116;
                v104[2] = 0;
                v104[3] = v117;
                v104[5] = v117;
                BOOL v45 = BYTE2(v224[0]) == 0;
                v104[6] = BYTE2(v224[0]) != 0;
                char v118 = BYTE3(v224[0]);
                if (v45) {
                  char v118 = -1;
                }
                v104[7] = v118;
                *((void *)v104 + 1) = *(void *)((char *)v224 + 5);
                *((_DWORD *)v104 + 4) = *(_DWORD *)((char *)v224 + 13);
                v104[4] = 1;
                ++a2[413];
                goto LABEL_253;
              case 5:
                uint64_t v105 = 128;
                double v104 = v217;
                while (v104[120])
                {
                  v104 += 124;
                  if (!--v105)
                  {
                    EvCrt_v("G5K_ME_dec_C: No empty slots!");
                    goto LABEL_42;
                  }
                }
                LODWORD(v223) = 0;
                int v119 = v224[0] & 0xF;
                int v120 = Decode_SVid_STE(BYTE1(v224[0]), LOBYTE(v224[0]) >> 4, (int *)&v223);
                BOOL v122 = v119 != 11 || v223 != 4 || v120 < 1;
                if (!v122 && v120 < 64)
                {
                  long long v123 = *(_OWORD *)((char *)v224 + 4);
                  *(_OWORD *)(v104 + 24) = *(_OWORD *)((char *)&v224[1] + 4);
                  long long v124 = *(_OWORD *)((char *)&v224[3] + 4);
                  *(_OWORD *)(v104 + 40) = *(_OWORD *)((char *)&v224[2] + 4);
                  *(_WORD *)double v104 = 2820;
                  v104[2] = v120;
                  v104[3] = 0;
                  v104[5] = v120;
                  *((_WORD *)v104 + 3) = WORD1(v224[0]);
                  *(_OWORD *)(v104 + 56) = v124;
                  *(_OWORD *)(v104 + 67) = *(_OWORD *)((char *)&v224[3] + 15);
                  *(_OWORD *)(v104 + 8) = v123;
                  char v125 = HIBYTE(v224[6]);
                  long long v126 = *(_OWORD *)((char *)&v224[5] + 15);
                  *(_OWORD *)(v104 + 83) = *(_OWORD *)((char *)&v224[4] + 15);
                  v104[115] = v125;
                  *(_OWORD *)(v104 + 99) = v126;
                  v104[116] = v104[83] & 3;
                  v104[4] = 1;
                  ++a2[417];
                  goto LABEL_253;
                }
                EvCrt_v("ME_dec_C: Illegal BDS STE SV:  ID %d  Const %d  Sig %d");
                goto LABEL_118;
              case 6:
                uint64_t v106 = 128;
                double v104 = v217;
                while (v104[120])
                {
                  v104 += 124;
                  if (!--v106)
                  {
                    EvCrt_v("G5K_ME_dec_I: No empty slots!");
                    goto LABEL_42;
                  }
                }
                LODWORD(v223) = 0;
                int v127 = v224[0] & 0xF;
                int v128 = Decode_SVid_STE(BYTE1(v224[0]), LOBYTE(v224[0]) >> 4, (int *)&v223);
                if (v127 == 3 && v223 == 6 && v128 >= 1 && v128 < 15)
                {
                  *(_WORD *)double v104 = 774;
                  v104[2] = v128;
                  v104[3] = 0;
                  v104[5] = v128;
                  *((_WORD *)v104 + 3) = WORD1(v224[0]);
                  v129.i32[0] = DWORD1(v224[0]);
                  long long v134 = *(_OWORD *)((char *)&v224[1] + 8);
                  *(_OWORD *)(v104 + 12) = *(_OWORD *)((char *)v224 + 8);
                  *((_DWORD *)v104 + 2) = v129.i32[0];
                  *(_OWORD *)(v104 + 28) = v134;
                  *(void *)(v104 + 41) = *(void *)((char *)&v224[2] + 5);
                  v104[49] = -1;
                  if (vmovl_u8(v129).u8[0] == 1) {
                    v104[49] = (v104[31] & 0x20) != 0;
                  }
                  v104[4] = 1;
                  ++a2[421];
LABEL_253:
                  v104[120] = 1;
                }
                else
                {
                  EvCrt_v("ME_dec_I: Illegal NVC STE SV:  ID %d  Const %d  Sig %d");
                }
                goto LABEL_118;
              case 7:
                int v107 = *(_DWORD *)((char *)v224 + 2);
                if ((v224[0] & 0xD0) == 0x10)
                {
                  if ((v224[0] & 0xF) == 0)
                  {
                    a2[408] = BYTE1(v224[0]);
                    *((_DWORD *)v217 + 3968) = v107;
                    a2[407] = 1;
                  }
                }
                else
                {
                  int v133 = LOBYTE(v224[0]) >> 4;
                  switch(v133)
                  {
                    case 2:
                    case 5:
                      break;
                    case 4:
                      a2[412] = BYTE1(v224[0]);
                      *((_DWORD *)v217 + 3969) = v107;
                      a2[411] = 1;
                      break;
                    case 6:
                      a2[416] = BYTE1(v224[0]);
                      *((_DWORD *)v217 + 3970) = v107;
                      a2[415] = 1;
                      break;
                    case 7:
                      a2[420] = BYTE1(v224[0]);
                      *((_DWORD *)v217 + 3971) = v107;
                      a2[419] = 1;
                      break;
                    default:
                      EvCrt_d("G5K_ME_dec_N: Illegal Constell ", v133);
                      break;
                  }
                }
                a2[406] = 1;
                goto LABEL_42;
              case 8:
                *((_DWORD *)a2 + 119) = v224[0];
                *((void *)v221 + 11) = *(void *)((char *)v224 + 4);
                *((_WORD *)a2 + 249) = WORD6(v224[0]);
                a2[500] = BYTE14(v224[0]);
                *((void *)a2 + 60) = *(void *)((char *)v224 + 15);
                *((_WORD *)a2 + 244) = *(_WORD *)((char *)&v224[1] + 7);
                ++a2[508];
                *((_DWORD *)a2 + 126) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                         * (double)mach_continuous_time());
                goto LABEL_42;
              case 9:
                *((_DWORD *)a2 + 106) = v224[0];
                a2[428] = BYTE4(v224[0]);
                *((_DWORD *)a2 + 108) = *(_DWORD *)((char *)v224 + 5);
                goto LABEL_42;
              default:
                goto LABEL_42;
            }
            goto LABEL_117;
          }
        }
        goto LABEL_42;
      }
    }
    if (v55 != 3)
    {
      gn_report_assertion_failure("G5K_ME_Decode: Input not N x 4 bytes");
      memset((char *)&v223 + v55 + 1, 32, (2 - v55) + 1);
    }
LABEL_104:
    if (v56 >= 0x7D)
    {
      EvCrt_v("G5K_ME_Decode: Input longer than buffer. Received  %d  Max %d bytes");
LABEL_117:
      unint64_t v6 = v212;
LABEL_118:
      unsigned int v9 = v220;
      goto LABEL_42;
    }
    int v55 = 0;
    char v58 = BYTE1(v223);
    long long v59 = (char *)v224 + v56;
    *long long v59 = (BYTE1(v223) >> 4) + 4 * (_BYTE)v223;
    char v60 = BYTE2(v223);
    v59[1] = (BYTE2(v223) >> 2) + 16 * v58;
    v59[2] = BYTE3(v223) + (v60 << 6);
    uint64_t v56 = (v56 + 3);
    int v54 = *v57;
    goto LABEL_107;
  }
  unsigned __int16 v19 = *((_WORD *)a2 + 197) + 1;
  *((_WORD *)a2 + 197) = v19;
  EvCrt_v("G5K_ME_Decode_Meas: CheckSum Err %d >%s", v19, a2);
  unsigned int v20 = *((_DWORD *)a2 + 109);
  if (v20 > 0xBB8)
  {
    if (v20 < 0xFFFFF447) {
      goto LABEL_42;
    }
  }
  else
  {
    if (*((unsigned __int16 *)a2 + 197) < 4u) {
      goto LABEL_42;
    }
    EvCrt_v("G5K_ME_Decode_Meas: GN_GPS_Hard_Reset_GNB >4 Checksum Errors in <=3000 ms !");
    GN_GPS_Hard_Reset_GNB();
  }
  *((_WORD *)a2 + 197) = 0;
LABEL_42:
  if (g_Logging_Cfg >= 1)
  {
    if (*((_DWORD *)v6 + 2) != *((_DWORD *)v6 + 3))
    {
      uint64_t v29 = (char **)qword_26AA2DF30;
      int v30 = *(char **)qword_26AA2DF30;
      char v31 = 36;
      uint64_t v32 = 1u;
      do
      {
        *uint64_t v29 = v30 + 1;
        *int v30 = v31;
        int v30 = *v29;
        if (*v29 >= v29[3])
        {
          int v30 = v29[2];
          *uint64_t v29 = v30;
        }
        char v31 = aT_0[v32++];
      }
      while (v32 != 4);
      sprintf_1u(v29, *((_DWORD *)v6 + 2));
      uint64_t v33 = (*v29)++;
      *uint64_t v33 = 32;
      if (*v29 >= v29[3]) {
        *uint64_t v29 = v29[2];
      }
      sprintf_1u(v29, *((_DWORD *)a2 + 130));
      int v34 = (*v29)++;
      *int v34 = 10;
      uint64_t v35 = *v29;
      if (*v29 >= v29[3])
      {
        uint64_t v35 = v29[2];
        *uint64_t v29 = v35;
      }
      *uint64_t v35 = 0;
      *((_DWORD *)v6 + 3) = *((_DWORD *)v6 + 2);
      unsigned int v9 = v220;
    }
    GNB_Debug_BlockMove(a2, (unsigned __int16)((_WORD)v3 - (_WORD)a2));
  }
  a2[392] = 0;
  uint64_t v3 = a2;
  if (!a2[402]) {
    goto LABEL_11;
  }
  double v36 = *a1;
  uint64_t v37 = a1[1];
  if (v37 == *a1) {
    goto LABEL_74;
  }
  if (v36 >= v37) {
    uint64_t v38 = (v36 - v37);
  }
  else {
    uint64_t v38 = (v36 - *((_DWORD *)a1 + 4) + *((_DWORD *)a1 + 6) - v37);
  }
  if (v38 >= 4)
  {
    EvCrt_nd("G5K_ME_Decode_Meas: More data after {T message", 3, v13, v37, *a1, v38);
    double v36 = *a1;
  }
  if (v37 == v36)
  {
LABEL_73:
    if (!*v221) {
      goto LABEL_301;
    }
LABEL_74:
    if (!a2[403]) {
      goto LABEL_301;
    }
    int v46 = *((_DWORD *)a2 + 130);
    if (*((_DWORD *)a2 + 109) == v46) {
      goto LABEL_301;
    }
    EvCrt_v("G5K_ME_Decode_Meas: Inconsistent TTicks %u %u", *((_DWORD *)a2 + 109), v46);
    goto LABEL_85;
  }
  uint64_t v39 = 0;
  while (1)
  {
    int v41 = *v37++;
    int v40 = v41;
    if (v37 >= a1[3]) {
      uint64_t v37 = a1[2];
    }
    uint64_t v42 = (v40 == 123) | v39;
    if (v40 != 123 && ((v39 ^ 1) & 1) == 0)
    {
      unsigned int v43 = v40 - 72;
      BOOL v122 = v43 > 0xC;
      int v44 = (1 << v43) & 0x1029;
      BOOL v45 = v122 || v44 == 0;
      uint64_t v42 = v39;
      if (!v45) {
        break;
      }
    }
    uint64_t v39 = v42;
    if (v37 == v36) {
      goto LABEL_73;
    }
  }
  if (!*v221 || !a2[403] || a2[405] || a2[409] || a2[413] || a2[417] || a2[421])
  {
    EvCrt_nd("G5K_ME_Decode_Meas: Throughput error, found next data set", 3, v13, *((unsigned int *)a2 + 109), *((unsigned int *)a2 + 130), v38);
LABEL_85:
    *(void *)&v224[0] = 0;
    a2[411] = 0;
    a2[415] = 0;
    a2[419] = 0;
    *((_WORD *)a2 + 206) = 0;
    *((_WORD *)a2 + 208) = 0;
    *((_WORD *)a2 + 210) = 0;
    *(void *)int64x2_t v221 = 0;
    bzero(v219, 0x1C00uLL);
    uint64_t v47 = -4608;
    uint64_t v48 = 12344;
    do
    {
      uint64_t v49 = &a2[v47 + 12344];
      v49[32] = 0;
      *(_OWORD *)uint64_t v49 = 0uLL;
      *((_OWORD *)v49 + 1) = 0uLL;
      double v50 = &a2[v48];
      *(_OWORD *)(v50 + 105) = 0uLL;
      *((_OWORD *)v50 + 5) = 0uLL;
      *((_OWORD *)v50 + 6) = 0uLL;
      *((_OWORD *)v50 + 3) = 0uLL;
      *((_OWORD *)v50 + 4) = 0uLL;
      *((_OWORD *)v50 + 1) = 0uLL;
      *((_OWORD *)v50 + 2) = 0uLL;
      v48 += 124;
      *(_OWORD *)double v50 = 0uLL;
      v47 += 36;
    }
    while (v47);
    *unint64_t v6 = 0;
    API_Get_UTC_Cor(1, (double *)v224);
    if (*(double *)v224 <= 0.0) {
      double v51 = -0.5;
    }
    else {
      double v51 = 0.5;
    }
    double v52 = *(double *)v224 + v51;
    if (*(double *)v224 + v51 <= 2147483650.0)
    {
      if (v52 >= -2147483650.0) {
        int v53 = (int)v52;
      }
      else {
        LOBYTE(v53) = 0;
      }
    }
    else
    {
      LOBYTE(v53) = -1;
    }
    v6[1] = v53;
    uint64_t v3 = a2;
    goto LABEL_11;
  }
  EvCrt_nd("G5K_ME_Decode_Meas: Throughput error, more data follows", 3, v13, *((unsigned int *)a2 + 109), *((unsigned int *)a2 + 130), v38);
LABEL_301:
  uint64_t v3 = a2;
LABEL_302:
  *((void *)a2 + 48) = v3;
}

uint64_t GM_Gen_SV_Meas_QI(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  int v1 = *(unsigned __int16 *)(a1 + 8);
  if ((~v1 & 0x888) == 0) {
    return 18;
  }
  if ((~v1 & 0x88) == 0) {
    return 17;
  }
  if ((~v1 & 0x848) == 0) {
    return 16;
  }
  if ((~v1 & 0x48) == 0) {
    return 15;
  }
  if ((~v1 & 0x28) == 0) {
    return 14;
  }
  if ((~v1 & 0x18) == 0) {
    return 13;
  }
  uint64_t result = 12;
  if ((~v1 & 0xC) != 0)
  {
    if ((~v1 & 0xA) != 0)
    {
      if (v1)
      {
        return 9;
      }
      else if ((_BYTE)v1)
      {
        return 2;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t Gnm52_11HandleStartTimeMarkRsp(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(unsigned char *)(a1 + 12)) {
        uint64_t v3 = 84;
      }
      else {
        uint64_t v3 = 70;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_RSP Success,%c\n", (unint64_t)v2, "GNM", 73, "Gnm52_11HandleStartTimeMarkRsp", v3);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (*(unsigned char *)(a1 + 12)) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 2;
    }
    Gnm11_00ApiStatusCB(v4, 0, 0, 18);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm52_11HandleStartTimeMarkRsp", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t Gnm52_13HandleTimeMarkEvent(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm52_13HandleTimeMarkEvent", 517);
    int v5 = 1;
LABEL_11:
    gnssOsa_PrintLog(__str, v5, 1, 0);
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm52_13HandleTimeMarkEvent");
    gnssOsa_PrintLog(__str, 4, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GpsWk,%d,GpsTOW,%.9fms,GpsTimeUnc,%.9fms,UtcCorr,%f,METTick,%u,BCTNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm52_13HandleTimeMarkEvent", *(__int16 *)(a1 + 18), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 48), *(_DWORD *)(a1 + 56), *(void *)(a1 + 64));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  if (!off_26A9CC1F8)
  {
    if (g_LbsOsaTrace_Config < 2) {
      return 0;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm52_13HandleTimeMarkEvent", 258);
    int v5 = 2;
    goto LABEL_11;
  }
  off_26A9CC1F8(0, a1 + 16);
  return 0;
}

uint64_t Gnm52_22HandleStartTimeMarkReq(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_START_TIMEMARK_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm52_22HandleStartTimeMarkReq");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    off_26A9CC1F8 = *(uint64_t (**)(void, void))(a1 + 16);
    uint64_t v3 = gnssOsa_Calloc("Gnm52_22HandleStartTimeMarkReq", 114, 1, 0xCuLL);
    if (v3)
    {
      uint64_t v4 = v3;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v5 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_REQ =>GNC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm52_22HandleStartTimeMarkReq");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      AgpsSendFsmMsg(128, 132, 8389120, v4);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm52_22HandleStartTimeMarkReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

uint64_t Gnm_StartTimeMarkSesion(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_StartTimeMarkSesion");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    uint64_t v3 = gnssOsa_Calloc("Gnm_StartTimeMarkSesion", 156, 1, 0x18uLL);
    if (v3)
    {
      v3[2] = a1;
      AgpsSendFsmMsg(128, 128, 8405248, v3);
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_StartTimeMarkSesion");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v8 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_StartTimeMarkSesion");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return 5;
    }
  }
  else if (g_LbsOsaTrace_Config < 2)
  {
    return 1;
  }
  else
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm_StartTimeMarkSesion", 258);
    uint64_t v5 = 1;
    gnssOsa_PrintLog(__str, 2, 1, 0);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_StartTimeMarkSesion");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
  return v5;
}

void Gnm03_51StartHalConnTimer(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (!(_BYTE)g_HalStatusInfo)
  {
    if (AgpsFsmStartTimer(0x803006u, 0x3A98u))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v0 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 87, "Gnm03_51StartHalConnTimer", 1544);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v1 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DurMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm03_51StartHalConnTimer", 15000);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      LOBYTE(g_HalStatusInfo) = 1;
    }
  }
}

uint64_t Gnm03_11SetHWRev(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_HW_REV_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_11SetHWRev");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    LOBYTE(g_HWStatus) = 1;
    memcpy_s("Gnm03_11SetHWRev", 247, (char *)&g_HWStatus + 4, 0x44u, (const void *)(a1 + 12), 0x44uLL);
    if (!(_BYTE)g_HWStatus) {
      goto LABEL_8;
    }
    if (DWORD1(g_HWStatus) != 3599)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ProdId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_07ValidateHWSupport", 264, DWORD1(g_HWStatus));
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
LABEL_8:
      Hal_StopConn((uint64_t)Gnm_HalStopCnf);
      Gnm03_52StartHalDisConnTimer();
      snprintf(v7, 0x3B6uLL, "ASSERT: %s %d HWS : HW not supported by stack", "Gnm03_11SetHWRev", 255);
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v4 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 69, "Gnm03_11SetHWRev", v7);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      gnssOsa_FlushLog();
      __assert_rtn("Gnm03_11SetHWRev", "gnm03HwStatus.cpp", 256, "false && \"HW not supported by stack\"");
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_11SetHWRev", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm03_52StartHalDisConnTimer(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (!BYTE1(g_HalStatusInfo))
  {
    if (AgpsFsmStartTimer(0x803106u, 0x3A98u))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v0 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 87, "Gnm03_52StartHalDisConnTimer", 1544);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
    }
    else
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v1 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DurMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm03_52StartHalDisConnTimer", 15000);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      BYTE1(g_HalStatusInfo) = 1;
    }
  }
}

void *Gnm03_12HalStartCnf(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_START_CNF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_12HalStartCnf");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    if (!(_BYTE)g_HalStatusInfo)
    {
LABEL_15:
      unsigned __int8 v8 = 0;
      byte_26A9CA0A4 = 0;
      while (1)
      {
        unsigned int v9 = v8;
        int v10 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v8 + 4);
        if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v8 + 4)) {
          break;
        }
        ++v8;
        if (v10 == 128)
        {
          uint64_t v11 = *(void **)(pg_AgpsFsmTable + 168 * v9 + 96);
          goto LABEL_20;
        }
      }
      uint64_t v11 = 0;
LABEL_20:
      if (v11 == &a_GnmInitState || v11 == &a_GnmResetState)
      {
        g_HalStatusInfo = 0;
        Gnm_03_05UpdtHWStatusGnc(1);
        Gnm35_15SendDbgCfg();
        if (v11 == &a_GnmInitState)
        {
          Gnm28_21InitRestorePeNv();
          Gnm03_04SendHWStatus((void (*)(void, uint64_t, _WORD *))*(&g_GnmCBs + 1), 0, 1);
        }
        if (g_LbsOsaTrace_Config < 3) {
          return &a_GnmActiveState;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: GNSS HW Init complete\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 77, "Gnm03_19HwStartCnf");
        gnssOsa_PrintLog(__str, 3, 1, 0);
      }
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v13 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnmState,Active\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 73, "Gnm03_12HalStartCnf", 261);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      return &a_GnmActiveState;
    }
    if (AgpsFsmStopTimer(8400902))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_53StopHalConnTimer", 1545);
        int v4 = 2;
LABEL_13:
        gnssOsa_PrintLog(__str, v4, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm03_53StopHalConnTimer");
      int v4 = 4;
      goto LABEL_13;
    }
    LOBYTE(g_HalStatusInfo) = 0;
    goto LABEL_15;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_12HalStartCnf", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void *Gnm03_14HalStopCnf(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_STOP_CNF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_14HalStopCnf");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_14HalStopCnf", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 12))
  {
    if (!BYTE1(g_HalStatusInfo))
    {
LABEL_22:
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HALStop success,starting again\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm03_14HalStopCnf");
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      ++BYTE2(g_HalStatusInfo);
      Hal_StartConn(g_GnssHw == 0, (uint64_t)Gnm_HalStartCnf);
      Gnm03_51StartHalConnTimer();
      return 0;
    }
    if (AgpsFsmStopTimer(8401158))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v3 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_54StopHalDisConnTimer", 1545);
        int v4 = 2;
LABEL_20:
        gnssOsa_PrintLog(__str, v4, 1, 0);
      }
    }
    else if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm03_54StopHalDisConnTimer");
      int v4 = 4;
      goto LABEL_20;
    }
    BYTE1(g_HalStatusInfo) = 0;
    goto LABEL_22;
  }
  char v6 = HIBYTE(g_HalStatusInfo);
  if (HIBYTE(g_HalStatusInfo) <= 4u)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HALStop fail Attempt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_14HalStopCnf", 1296, HIBYTE(g_HalStatusInfo));
      gnssOsa_PrintLog(__str, 1, 1, 0);
      char v6 = HIBYTE(g_HalStatusInfo);
    }
    HIBYTE(g_HalStatusInfo) = v6 + 1;
    Hal_StopConn((uint64_t)Gnm_HalStopCnf);
    Gnm03_52StartHalDisConnTimer();
    return 0;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HALStop fail Attempt,%u,GNSS service stopping\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm03_14HalStopCnf", 1296, HIBYTE(g_HalStatusInfo));
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  Gnm_03_05UpdtHWStatusGnc(0);
  Gnm03_60BaseBandResetReq(1);
  return &a_GnmResetState;
}

void Gnm_03_05UpdtHWStatusGnc(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("Gnm_03_05UpdtHWStatusGnc", 158, 1, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    v2[12] = a1;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_STATUS_IND =>GNC HwStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_03_05UpdtHWStatusGnc", a1);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    AgpsSendFsmMsg(128, 132, 8390147, v3);
  }
}

void Gnm03_60BaseBandResetReq(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Reason,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 69, "Gnm03_60BaseBandResetReq", a1);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  Hal_GnssBaseBandReset((uint64_t)Gnm03_BasebandResetCb);
  Ga05_HandleResetBbResetReq(a1);
}

void *Gnm03_15HandleHwStatus(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HW_STATUS_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_15HandleHwStatus");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    uint64_t result = 0;
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        return result;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v4 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          gnssOsa_PrintLog(__str, 1, 1, 0);
          if (g_LbsOsaTrace_Config >= 3)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v5 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Initializing HW Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 77, "Gnm03_06InitHWReset");
            gnssOsa_PrintLog(__str, 3, 1, 0);
          }
        }
        if (byte_26A9CA2F7)
        {
          if (AgpsFsmStopTimer(8400390) && g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v6 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm03_06InitHWReset", 1545);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          byte_26A9CA2F7 = 0;
          if (byte_26A9CA2F9) {
            byte_26A9CA2FA = 11;
          }
          Gnm10_31SendMEWakeRsp(0);
          Gnm10_29SendFwActivity(1, 0);
        }
        Gnm_03_05UpdtHWStatusGnc(2);
        if (g_LbsOsaTrace_Config < 4) {
          return &a_GnmResetState;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnmState,Active->Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm03_15HandleHwStatus", 261);
        int v8 = 4;
        goto LABEL_17;
      case 6:
        if (g_LbsOsaTrace_Config < 4) {
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v11 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ME LP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm03_15HandleHwStatus", 1297);
        gnssOsa_PrintLog(__str, 4, 1, 0);
        goto LABEL_24;
      case 7:
        Gnm03_60BaseBandResetReq(8);
        return &a_GnmResetState;
      case 8:
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v13 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          int v8 = 1;
LABEL_17:
          gnssOsa_PrintLog(__str, v8, 1, 0);
        }
        return &a_GnmResetState;
      default:
LABEL_24:
        if (g_LbsOsaTrace_Config < 4) {
          return 0;
        }
        bzero(__str, 0x3C6uLL);
        uint64_t v12 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
        int v10 = 4;
        break;
    }
    goto LABEL_20;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm03_15HandleHwStatus", 517);
    int v10 = 1;
LABEL_20:
    gnssOsa_PrintLog(__str, v10, 1, 0);
  }
  return 0;
}

void *Gnm03_16HandleHWInitFail(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_INIT_FAIL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_16HandleHWInitFail");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_16HandleHWInitFail", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
  Hal_StopConn(0);
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm03_16HandleHWInitFail", 1294);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (BYTE2(g_HalStatusInfo) <= 4u)
  {
    if (g_LbsOsaTrace_Config >= 3)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx WaitBeforeStart,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 77, "Gnm03_16HandleHWInitFail", 1291, 1000);
      gnssOsa_PrintLog(__str, 3, 1, 0);
    }
    usleep(0xF4240u);
    ++BYTE2(g_HalStatusInfo);
    Hal_StartConn(g_GnssHw == 0, (uint64_t)Gnm_HalStartCnf);
    Gnm03_51StartHalConnTimer();
    return 0;
  }
  int v7 = *(unsigned __int8 *)(a1 + 12);
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Err,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm03_20HwStartFailure", 1293, v7);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  byte_26A9CA0A4 = v7;
  Gnm_03_05UpdtHWStatusGnc(0);
  Gnm03_04SendHWStatus((void (*)(void, uint64_t, _WORD *))*(&g_GnmCBs + 1), 0, 0);
  Gnm03_60BaseBandResetReq(0);
  return &a_GnmResetState;
}

uint64_t Gnm03_17HandleGetHwInitStatus(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HW_INIT_STATUS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_17HandleGetHwInitStatus");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm03_04SendHWStatus(*(void (**)(void, uint64_t, _WORD *))(a1 + 16), *(unsigned int *)(a1 + 12), 0);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_17HandleGetHwInitStatus", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm03_04SendHWStatus(void (*a1)(void, uint64_t, _WORD *), uint64_t a2, char a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v12, 0, 70);
  if (a1)
  {
    unsigned __int8 v5 = 0;
    HIBYTE(v12[0]) = byte_26A9CA0A4;
    while (1)
    {
      unsigned int v6 = v5;
      int v7 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v5 + 4);
      if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v5 + 4)) {
        break;
      }
      ++v5;
      if (v7 == 128)
      {
        uint64_t v8 = *(void **)(pg_AgpsFsmTable + 168 * v6 + 96);
        if (a3) {
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    uint64_t v8 = 0;
    if (a3)
    {
LABEL_12:
      LOBYTE(v12[0]) = 1;
      v12[1] = WORD2(g_HWStatus);
      strncpy((char *)&v12[2], (const char *)&g_HWStatus + 8, 0x40uLL);
      LOBYTE(v12[34]) = 3;
      goto LABEL_13;
    }
LABEL_10:
    if (v8 != &a_GnmInitState && v8 != &a_GnmResetState) {
      goto LABEL_12;
    }
LABEL_13:
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HwStatusCB called\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm03_04SendHWStatus");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    a1(0, a2, v12);
  }
  else if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm03_04SendHWStatus", 258);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t Gnm03_18InitializeHw(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HW_INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_18InitializeHw");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    if (g_IsHwInit != 1)
    {
      g_GnssHw = *(unsigned char *)(a1 + 12);
      g_IsHwInit = 1;
      uint64_t v4 = *(void *)(a1 + 24);
      *(&g_GnmCBs + 1) = *(uint64_t (**)(void, void, void, void))(a1 + 16);
      qword_26A9CC208 = v4;
      g_HalCallbacks = (uint64_t (*)(void))Gnm_HardwareStatusNotif;
      Hal_StartConn(g_GnssHw == 0, (uint64_t)Gnm_HalStartCnf);
      Gnm03_51StartHalConnTimer();
      return 0;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx ExistingHw,%hhu,ReqHw,%hhu\n", v3);
LABEL_9:
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_9;
  }
  return 0;
}

uint64_t Gnm03_40DiscardResetReqGnc(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm03_40DiscardResetReqGnc");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_40DiscardResetReqGnc", 1028);
      int v4 = 2;
LABEL_8:
      gnssOsa_PrintLog(__str, v4, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_40DiscardResetReqGnc", 517);
    int v4 = 1;
    goto LABEL_8;
  }
  return 0;
}

void *Gnm03_41HandleResetReqGnc(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_41HandleResetReqGnc");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm03_60BaseBandResetReq(9);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnmState,Active->Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm03_41HandleResetReqGnc", 261);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return &a_GnmResetState;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm03_41HandleResetReqGnc", 517);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 0;
  }
}

uint64_t Gnm03_42HandleMEWakeReq(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_42HandleMEWakeReq");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm10_29SendFwActivity(1, 1);
    g_GNSS_FW_NV = *(unsigned char *)(a1 + 12);
    if (Hal_WakeUp_GNSS((void (*)(BOOL))Gnm03_HandleGNSSMEWakeResponse))
    {
      unk_26A9CA2F8 = 0;
      byte_26A9CA2F6 = 1;
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_42HandleMEWakeReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void Gnm03_HandleGNSSMEWakeResponse(int a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v1 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm03_HandleGNSSMEWakeResponse");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if ((Hal_SetCoexConfig() & 1) == 0) {
      Gnm03_60BaseBandResetReq(10);
    }
    Gnm55_RestoreVar_GNSS_FW_NV(g_GNSS_FW_NV);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 69, "Gnm03_HandleGNSSMEWakeResponse");
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

uint64_t Gnm03_43RejectMEWakeReq(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_43RejectMEWakeReq");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (a1)
  {
    Gnm10_31SendMEWakeRsp(0);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 69, "Gnm03_43RejectMEWakeReq", 517);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return 0;
}

void *Gnm03_55HandleHalConnTimeout(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_CONN_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_55HandleHalConnTimeout");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!(_BYTE)g_HalStatusInfo)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Timer not running\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm03_55HandleHalConnTimeout");
      int v6 = 4;
LABEL_12:
      gnssOsa_PrintLog(__str, v6, 1, 0);
    }
    return 0;
  }
  LOBYTE(g_HalStatusInfo) = 0;
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_55HandleHalConnTimeout", 517);
      int v6 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HAL Conn TO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_55HandleHalConnTimeout");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  Gnm03_60BaseBandResetReq(2);
  return &a_GnmResetState;
}

void *Gnm03_56HandleHalDisconnTimeout(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: FSM:GNM_HAL_DISCONN_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_56HandleHalDisconnTimeout");
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  if (!BYTE1(g_HalStatusInfo))
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Timer not running\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm03_56HandleHalDisconnTimeout");
      int v6 = 4;
LABEL_12:
      gnssOsa_PrintLog(__str, v6, 1, 0);
    }
    return 0;
  }
  BYTE1(g_HalStatusInfo) = 0;
  if (!a1)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_56HandleHalDisconnTimeout", 517);
      int v6 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: HAL Disconn TO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm03_56HandleHalDisconnTimeout");
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  Gnm03_60BaseBandResetReq(3);
  return &a_GnmResetState;
}

void Gnm03_BasebandResetCb(unsigned __int8 a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: status ,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_BasebandResetCb", a1);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
}

uint64_t GNSS_Nav_Debug_Ctl(uint64_t result)
{
  if (result)
  {
    if (g_Logging_Cfg >= 4)
    {
      uint64_t v1 = (char **)result;
      uint64_t v3 = *(char **)result;
      uint64_t v2 = *(char **)(result + 8);
      if (v2 != *(char **)result)
      {
        uint64_t v4 = *(char **)result;
        if ((unint64_t)v2 > *(void *)result) {
          uint64_t v4 = *(char **)(result + 24);
        }
        unsigned __int16 v5 = (_WORD)v4 - (_WORD)v2;
        if ((_WORD)v4 == (_WORD)v2)
        {
          if ((unint64_t)v2 >= *(void *)(result + 24))
          {
            uint64_t v2 = *(char **)(result + 16);
            *(void *)(result + 8) = v2;
LABEL_12:
            unsigned __int16 v6 = (_WORD)v3 - (_WORD)v2;
            if (v6)
            {
              uint64_t result = GN_GPS_Write_Nav_Debug(v6, v2);
              uint64_t v2 = &v1[1][result];
              v1[1] = v2;
            }
          }
        }
        else
        {
          uint64_t result = GN_GPS_Write_Nav_Debug((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
          uint64_t v2 = &v1[1][result];
          v1[1] = v2;
          if (v2 >= v1[3])
          {
            uint64_t v2 = v1[2];
            v1[1] = v2;
            if (result == v5)
            {
              uint64_t v3 = *v1;
              goto LABEL_12;
            }
          }
        }
        if (v2 == *v1)
        {
          uint64_t v7 = v1[2];
          *uint64_t v1 = v7;
          v1[1] = v7;
        }
      }
    }
  }
  return result;
}

void *GNSS_Nav_Debug_Screens(void *result)
{
  if (result)
  {
    if (g_Logging_Cfg >= 4)
    {
      uint64_t v1 = result;
      uint64_t v2 = (char **)result[35];
      if (v2)
      {
        ds_NK_Summary(result);
        if (g_GN_GNSS_Nav_Debug_Port == 1) {
          g_GN_GNSS_Nav_Debug_Port = 0;
        }
        else {
          ds_NK_Crude_Apx_Pos(v2, v1[21], v1[16]);
        }
        ds_Intermittent(v2, *(_DWORD *)v1, (double *)v1[9]);
        return (void *)GNSS_Nav_Debug_Ctl((uint64_t)v2);
      }
    }
  }
  return result;
}

uint64_t GNSS_Nav_Debug_InitWrite(uint64_t result)
{
  if (g_Logging_Cfg >= 4)
  {
    uint64_t v1 = *(void *)(result + 280);
    if (g_GN_GNSS_Nav_Debug_Port == 1) {
      ds_Config(*(char ***)(result + 280), *(void *)(result + 72), *(void *)(result + 48), *(double **)(result + 128));
    }
    return ds_NK_Summary_FirstLine(v1);
  }
  return result;
}

uint64_t GNSS_Nav_Debug_Flush_Check(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8) - *(_DWORD *)result;
  if (v1 <= 0) {
    v1 += *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  }
  if (v1 <= 0x3FF)
  {
    return GNSS_Nav_Debug_Ctl(result);
  }
  return result;
}

uint64_t *mapu(double *a1, int a2, unsigned int a3, uint64_t a4, const double *a5, unsigned int a6, double *a7, int a8, double *a9, double *a10)
{
  uint64_t v15 = a9;
  double v16 = *a9;
  uint64_t result = phiu((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (a6)
  {
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    if (a6 + 1 > 2) {
      uint64_t v20 = a6 + 1;
    }
    else {
      uint64_t v20 = 2;
    }
    uint64_t v21 = v20 - 1;
    do
    {
      v19 += v18 + 1;
      a9[v18++] = a5[v19 - 1];
    }
    while (v21 != v18);
  }
  unsigned int v22 = a3 - 2;
  if (a3 >= 2)
  {
    unsigned __int16 v23 = a10 - 1;
    unsigned int v24 = (a3 + a3 * a3) >> 1;
    if (a6 + 1 > 2) {
      uint64_t v25 = a6 + 1;
    }
    else {
      uint64_t v25 = 2;
    }
    uint64_t v26 = a3;
    int v27 = (uint64_t *)(v25 - 1);
    unsigned int v28 = a3 - 1;
    int v29 = v25 - 1;
    do
    {
      unsigned int v30 = v26 - 1;
      double v31 = 0.0;
      if (a6)
      {
        uint64_t v32 = a9;
        uint64_t result = v27;
        int v33 = v26 - 1;
        do
        {
          double v34 = *v32++;
          double v35 = a7[v33];
          double v31 = v31 + v35 * (v34 * v35);
          a7[v33] = v34 * v35;
          v33 += a8;
          uint64_t result = (uint64_t *)((char *)result - 1);
        }
        while (result);
      }
      if (v16 >= 0.0)
      {
        v23[v24--] = v31;
        LODWORD(v36) = 1;
        LODWORD(result) = v22;
        do
        {
          if (a6)
          {
            int v37 = 0;
            double v38 = 0.0;
            int v39 = v29;
            do
            {
              double v38 = v38 + a7[(int)result + v37] * a7[v28 + v37];
              v37 += a8;
              --v39;
            }
            while (v39);
          }
          else
          {
            double v38 = 0.0;
          }
          v23[v24] = v38;
          uint64_t v36 = (v36 + 1);
          --v24;
          uint64_t result = (uint64_t *)(result - 1);
        }
        while (v26 != v36);
      }
      else
      {
        v23[v26] = sqrt(v31);
      }
      --v22;
      --v28;
      --v26;
    }
    while (v30 > 1);
  }
  if (a6)
  {
    int v40 = 0;
    if (a6 + 1 > 2) {
      uint64_t v41 = a6 + 1;
    }
    else {
      uint64_t v41 = 2;
    }
    uint64_t v42 = v41 - 1;
    double v43 = 0.0;
    do
    {
      double v44 = *v15++;
      double v43 = v43 + v44 * a7[v40] * a7[v40];
      v40 += a8;
      --v42;
    }
    while (v42);
  }
  else
  {
    double v43 = 0.0;
  }
  double v45 = sqrt(v43);
  if (v16 < 0.0) {
    double v43 = v45;
  }
  *a10 = v43;
  return result;
}

uint64_t Hal32_SetPowerReport(int a1, void (*a2)(BOOL), uint64_t (*a3)(double, double, double, double))
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  _MergedGlobals_3 = (uint64_t (*)(void))a2;
  off_26AA2E1C8 = a3;
  *(void *)int v17 = 0xFE0005506742787ALL;
  v17[8] = a1;
  v17[9] = a1;
  v17[10] = 1;
  if (a1) {
    unsigned __int8 v4 = 3;
  }
  else {
    unsigned __int8 v4 = 1;
  }
  v17[11] = v4;
  __int16 v18 = 2560;
  g_HalState = 5;
  if ((int)Hal22_ZxSendToChip(v17, 0xEuLL) <= 0)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v9 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 69, "Hal32_SetPowerReport", 1282);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 4294967293;
  }
  else
  {
    char v5 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1C2u);
    if (v5 == 1)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        double v10 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v11 = "Dis";
        if (a1) {
          uint64_t v11 = "En";
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx status,%s\n", (unint64_t)v10, "HAL", 69, "Hal32_SetPowerReport", 1543, v11);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967291;
    }
    else if (v5)
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v13 = "Dis";
        if (a1) {
          uint64_t v13 = "En";
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx status,%s\n", (unint64_t)v12, "HAL", 69, "Hal32_SetPowerReport", 1541, v13);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967289;
    }
    else if (g_PowerReportStatus == 32)
    {
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (a1) {
          uint64_t v7 = "En";
        }
        else {
          uint64_t v7 = "Dis";
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Success,%s\n", (unint64_t)v6, "HAL", 73, "Hal32_SetPowerReport", v7);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
      if (_MergedGlobals_3) {
        _MergedGlobals_3(1);
      }
      return 0;
    }
    else
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        double v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v15 = "Dis";
        if (a1) {
          uint64_t v15 = "En";
        }
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx status,%s err,%x\n", (unint64_t)v14, "HAL", 69, "Hal32_SetPowerReport", 770, v15, g_PowerReportStatus);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 4294967292;
    }
  }
}

void Hal32_HandlePowerReportRsp(unsigned __int8 *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = 513;
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v2 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_11;
  }
  if (a1[2] != 66 || a1[3] != 71)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDEx,%u\n", v3, "HAL");
    goto LABEL_12;
  }
  g_PowerReportStatus = a1[8];
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v5 = 1542;
    uint64_t v6 = *__error();
    unint64_t v4 = v1;
    uint64_t v2 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
LABEL_11:
    snprintf(__str, 0x3C5uLL, v2, v4, "HAL", 69, "Hal32_HandlePowerReportRsp", v5, v6);
LABEL_12:
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
}

void Hal32_HandlePowerReportData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v16 = 513;
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unint64_t v3 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_19;
  }
  if (a2 <= 8)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v16 = 515;
    uint64_t v17 = a2;
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unint64_t v3 = "%10u %s%c %s: #%04hx length %u\n";
LABEL_19:
    snprintf(__str, 0x3C5uLL, v3, v15, "HAL", 69, "Hal32_HandlePowerReportData", v16, v17, v18);
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  uint64_t v5 = *(unsigned __int16 *)&a1[a2 - 3];
  if ((_WORD)a2 == 11)
  {
    unsigned __int16 v6 = 0;
LABEL_17:
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v17 = v5;
    uint64_t v18 = v6;
    uint64_t v16 = 771;
    unint64_t v3 = "%10u %s%c %s: #%04hx zx chksum %u, computed %u\n";
    unint64_t v15 = v14;
    goto LABEL_19;
  }
  unsigned __int16 v6 = 0;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (unsigned __int16)(a2 - 11);
  do
  {
    __int16 v9 = *v7++;
    v6 += v9;
    --v8;
  }
  while (v8);
  if (v5 != v6) {
    goto LABEL_17;
  }
  if (a1[4] != 80)
  {
    unsigned int v10 = *((_DWORD *)a1 + 2);
    double v11 = (double)*((int *)a1 + 5) * 0.000001;
    double v12 = (double)(*((_DWORD *)a1 + 6) / 1000);
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v13 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: PwrReport:ME_TTick,%u,MeasInt,%fsec,ActiveInt,%fsec,AvgPwr%fmW,ClockMain-1,%u,ClockMain-2,%u,ClockRF-1,%u,ClockRF-2,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 73, "Hal32_HandlePowerReportData", v10, v11, v11, v12, a1[148], a1[149], a1[150], a1[151]);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    if (off_26AA2E1C8) {
      off_26AA2E1C8(v11, v12, (double)v10 * 0.001, v11);
    }
  }
}

void *gnssOsa_Calloc(const char *a1, int a2, int a3, size_t size)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  uint64_t result = malloc_type_calloc(a3, size, 0x62C716FCuLL);
  if (!result)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v9 = v7 * size;
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Size,%lu,Fn,%s,Line,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 69, "gnssOsa_Calloc", 1537, v9, a1, a2);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    else
    {
      size_t v9 = v7 * size;
    }
    snprintf(v12, 0x3B6uLL, "Size,%lu,Fn,%s,Line,%d", v9, a1, a2);
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v11 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 69, "gnssOsa_Calloc", v12);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_Calloc", "agpsmacosa.cpp", 76, "false && \"Memory allocation failure\"");
  }
  return result;
}

uint64_t gnssOsa_FlushLog(void)
{
  uint64_t result = gp_Logger;
  if (gp_Logger)
  {
    unint64_t v1 = *(uint64_t (**)(void))(*(void *)gp_Logger + 48);
    return v1();
  }
  return result;
}

BOOL gnssOsa_SemAcquire(dispatch_semaphore_t dsema)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (dsema)
  {
    dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_SemAcquire", 1541);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return dsema != 0;
}

uint64_t gnssOsa_SemWaitTimeOut(NSObject *a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    dispatch_time_t v3 = dispatch_time(0, 1000000 * a2);
    return dispatch_semaphore_wait(a1, v3) != 0;
  }
  else
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 69, "gnssOsa_SemWaitTimeOut", 1543);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    return 2;
  }
}

uint64_t gnssOsa_ReleaseOSTimer(void)
{
  gnssOsa_MacEnterCriticalSection("gnssOsa_ReleaseOSTimer", 128, &g_MacTimerCriticSection);
  if (g_curTimeState == 1) {
    dispatch_suspend((dispatch_object_t)g_timerHandler);
  }
  g_curTimeState = 0;

  return gnssOsa_MacExitCriticalSection("gnssOsa_ReleaseOSTimer", 140, &g_MacTimerCriticSection);
}

uint64_t gnssOsa_MacEnterCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTE invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_MacEnterCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacEnterCriticalSection", "agpsmacosa.cpp", 757, "false && \"CRTE invalid input\"");
  }
  if (pthread_mutex_lock(a3))
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTE OS API Failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_MacEnterCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacEnterCriticalSection", "agpsmacosa.cpp", 762, "false && \"CRTE OS API Failed\"");
  }
  return 0;
}

uint64_t gnssOsa_MacExitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTX invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_MacExitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacExitCriticalSection", "agpsmacosa.cpp", 772, "false && \"CRTX invalid input\"");
  }
  if (pthread_mutex_unlock(a3))
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTX OS API Failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_MacExitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacExitCriticalSection", "agpsmacosa.cpp", 776, "false && \"CRTX OS API Failed\"");
  }
  return 0;
}

uint64_t gnssOsa_OSTimerInit(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = dispatch_source_create(MEMORY[0x263EF8400], 0, 1uLL, (dispatch_queue_t)g_TimerQueue);
  g_timerHandler = (uint64_t)v0;
  if (!v0)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", "gnssOsa_OSTimerInit", 152, "TIMC TimerHandler");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v2 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_OSTimerInit", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_OSTimerInit", "agpsmacosa.cpp", 152, "false && \"TIMC TimerHandler\"");
  }
  dispatch_source_set_event_handler_f(v0, (dispatch_function_t)gnssOsa_TimerExpiryHandler);
  return 1;
}

uint64_t gnssOsa_TimerExpiryHandler(void *a1)
{
  uint64_t v1 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v2 = &__str[v1 + 966];
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = -1;
    *((void *)v2 + 2) = 0;
    *((_DWORD *)v2 + 6) = -1;
    v1 += 32;
    v2[28] = 0;
  }
  while (v1 != 640);
  gnssOsa_MacEnterCriticalSection("gnssOsa_TimerExpiryHandler", 258, &g_MacTimerContextCriticSection);
  unsigned int v3 = 0;
  unsigned __int8 v4 = 0;
  unint64_t v5 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
  do
  {
    uint64_t v6 = &g_MacOsaTimers[32 * v4];
    if (v6[28] && *((void *)v6 + 1) <= v5)
    {
      if (g_LbsOsaTrace_Config >= 5)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerExpired Handle,%u,ExpiryNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 68, "gnssOsa_TimerExpiryHandler", *(_DWORD *)&g_MacOsaTimers[32 * v4 + 24], *((void *)v6 + 1));
        gnssOsa_PrintLog(__str, 5, 1, 0);
      }
      if (*(void *)v6)
      {
        uint64_t v8 = &__str[32 * v3 + 966];
        *(void *)uint64_t v8 = *(void *)v6;
        *((void *)v8 + 2) = *(void *)&g_MacOsaTimers[32 * v4 + 16];
        *(void *)uint64_t v6 = 0;
        *((void *)v6 + 1) = 0;
        ++v3;
        *(void *)(v6 + 21) = 0;
        *((void *)v6 + 2) = 0;
        unsigned __int8 v4 = -1;
      }
      else if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v9 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MacTimer\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "gnssOsa_TimerExpiryHandler", 770);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
    }
    ++v4;
  }
  while (v4 < 0x14u);
  gnssOsa_TimerHandler();
  uint64_t result = gnssOsa_MacExitCriticalSection("gnssOsa_TimerExpiryHandler", 290, &g_MacTimerContextCriticSection);
  if (v3)
  {
    int v11 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))&__str[32 * v11 + 966])(*(void *)&__str[32 * v11 + 982]);
      ++v11;
    }
    while (v3 > v11);
  }
  return result;
}

uint64_t gnssOsa_OSTimerDeInit(void)
{
  gnssOsa_MacEnterCriticalSection("gnssOsa_OSTimerDeInit", 160, &g_MacTimerCriticSection);
  uint64_t v0 = g_timerHandler;
  if (!dispatch_source_testcancel((dispatch_source_t)g_timerHandler))
  {
    dispatch_source_cancel(v0);
    uint64_t v0 = g_timerHandler;
  }
  if ((g_curTimeState & 1) == 0)
  {
    dispatch_resume(v0);
    uint64_t v0 = g_timerHandler;
  }
  dispatch_release(v0);
  g_timerHandler = 0;
  g_curTimeState = 0;
  gnssOsa_MacExitCriticalSection("gnssOsa_OSTimerDeInit", 182, &g_MacTimerCriticSection);
  return 1;
}

uint64_t gnssOsa_TriggerOSTimer(int64_t a1)
{
  gnssOsa_MacEnterCriticalSection("gnssOsa_TriggerOSTimer", 193, &g_MacTimerCriticSection);
  uint64_t v2 = g_timerHandler;
  dispatch_time_t v3 = dispatch_time(0, a1);
  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  if ((g_curTimeState & 1) == 0) {
    dispatch_resume((dispatch_object_t)g_timerHandler);
  }
  g_curTimeState = 1;
  gnssOsa_MacExitCriticalSection("gnssOsa_TriggerOSTimer", 207, &g_MacTimerCriticSection);
  return 1;
}

uint64_t gnssOsa_TimerHandler(void)
{
  uint64_t v0 = 0;
  unint64_t v1 = -1;
  do
  {
    if (g_MacOsaTimers[v0 + 28] && *(void *)&g_MacOsaTimers[v0 + 8] < v1) {
      unint64_t v1 = *(void *)&g_MacOsaTimers[v0 + 8];
    }
    v0 += 32;
  }
  while (v0 != 640);
  if (v1 == -1)
  {
    return gnssOsa_ReleaseOSTimer();
  }
  else
  {
    unint64_t v2 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
    BOOL v3 = v1 >= v2;
    int64_t v4 = v1 - v2;
    if (v3) {
      int64_t v5 = v4;
    }
    else {
      int64_t v5 = 0;
    }
    return gnssOsa_TriggerOSTimer(v5);
  }
}

BOOL gnssOsa_Init(void)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  double v2 = (double)v0 / (double)v1;
  *(double *)&g_MacClockTicksToMsRelatiouint64_t n = v2 * 0.000001;
  g_MacClockTicksToNs = *(void *)&v2;
  BOOL v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, -7);
  if (!v3 && g_LbsOsaTrace_Config >= 2)
  {
    bzero(&info, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: #%04hx timer queueAttr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 87, "gnssOsa_Init", 513);
    gnssOsa_PrintLog((char *)&info, 2, 1, 0);
  }
  dispatch_queue_t v5 = dispatch_queue_create("TimerQueue", v3);
  g_TimerQueue = (uint64_t)v5;
  if (v5)
  {
    gnssOsa_InitCriticalSection("gnssOsa_Init", 336, &g_MacTimerCriticSection);
    gnssOsa_InitCriticalSection("gnssOsa_Init", 337, &g_MacTimerContextCriticSection);
    gnssOsa_OSTimerInit();
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(&info, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf((char *)&info, 0x3C5uLL, "%10u %s%c %s: #%04hx Queue creation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_Init", 513);
    gnssOsa_PrintLog((char *)&info, 1, 1, 0);
  }
  return v5 != 0;
}

uint64_t gnssOsa_InitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTC invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_InitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_InitCriticalSection", "agpsmacosa.cpp", 786, "false && \"CRTC invalid input\"");
  }
  if (pthread_mutex_init(a3, 0))
  {
    snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTC OS API Failed");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_InitCriticalSection", __str);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_InitCriticalSection", "agpsmacosa.cpp", 790, "false && \"CRTC OS API Failed\"");
  }
  return 0;
}

void gnssOsa_Deinit(void)
{
  if (g_TimerQueue)
  {
    dispatch_release((dispatch_object_t)g_TimerQueue);
    g_TimerQueue = 0;
  }
  gp_Logger = 0;
}

uint64_t gnssOsa_StopAllTimers(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerStopAll\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "OSA", 68, "gnssOsa_StopAllTimers");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  gnssOsa_MacEnterCriticalSection("gnssOsa_StopAllTimers", 453, &g_MacTimerContextCriticSection);
  for (uint64_t i = 0; i != 640; i += 32)
  {
    double v2 = &g_MacOsaTimers[i];
    *double v2 = 0;
    v2[1] = 0;
    *(void *)((char *)v2 + 21) = 0;
    v2[2] = 0;
  }
  gnssOsa_TimerHandler();
  gnssOsa_MacExitCriticalSection("gnssOsa_StopAllTimers", 466, &g_MacTimerContextCriticSection);
  return 1;
}

uint64_t gnssOsa_MacDeinitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(v10, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTD invalid input");
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v8 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_MacDeinitCriticalSection", v10);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacDeinitCriticalSection", "agpsmacosa.cpp", 800, "false && \"CRTD invalid input\"");
  }
  uint64_t result = pthread_mutex_destroy(a3);
  if (result)
  {
    if (g_LbsOsaTrace_Config >= 4)
    {
      int v6 = result;
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: DeInit CriticalSec,errno,%d,%s,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 73, "gnssOsa_MacDeinitCriticalSection", v6, a1, a2);
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t gnssOsa_StartTimer(const char *a1, int a2, unsigned int *a3, void (*a4)(void *), void *a5, unsigned int a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a3) {
    BOOL v7 = a4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = !v7;
  if (v7)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v17 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx MacTimer,ReqDurationMs,%u,%s,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 69, "gnssOsa_StartTimer", 513, a6, a1, a2);
      gnssOsa_PrintLog(__s, 1, 1, 0);
    }
  }
  else
  {
    gnssOsa_MacEnterCriticalSection("gnssOsa_StartTimer", 367, &g_MacTimerContextCriticSection);
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = &g_MacOsaTimers[v12];
      if (!g_MacOsaTimers[v12 + 28]) {
        break;
      }
      v12 += 32;
      if (v12 == 640)
      {
        gnssOsa_MacExitCriticalSection("gnssOsa_StartTimer", 380, &g_MacTimerContextCriticSection);
        snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", "gnssOsa_StartTimer", 385, "Timer not started as max timer count hit");
        if (g_LbsOsaTrace_Config)
        {
          bzero(__s, 0x3C6uLL);
          uint64_t v14 = mach_continuous_time();
          snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 69, "gnssOsa_StartTimer", __str);
          gnssOsa_PrintLog(__s, 1, 1, 0);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_StartTimer", "agpsmacosa.cpp", 385, "false && \"Timer not started as max timer count hit\"");
      }
    }
    unint64_t v18 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
    unsigned int v19 = ++g_MacOsaTimerCount;
    *(void *)uint64_t v13 = a4;
    *((void *)v13 + 1) = v18 + 1000000 * a6;
    *((void *)v13 + 2) = a5;
    *((_DWORD *)v13 + 6) = v19;
    v13[28] = 1;
    *a3 = v19;
    if (g_LbsOsaTrace_Config >= 5)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v20 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: TimerStarted,Handle,%u,DurationMs,%u,CurrNs,%llu,ExpiryNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "OSA", 68, "gnssOsa_StartTimer", *((_DWORD *)v13 + 6), a6, v18, *((void *)v13 + 1));
      gnssOsa_PrintLog(__s, 5, 1, 0);
    }
    gnssOsa_TimerHandler();
    gnssOsa_MacExitCriticalSection("gnssOsa_StartTimer", 409, &g_MacTimerContextCriticSection);
  }
  return v8;
}

uint64_t gnssOsa_StopTimer(const char *a1, unsigned int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  gnssOsa_MacEnterCriticalSection("gnssOsa_StopTimer", 422, &g_MacTimerContextCriticSection);
  uint64_t v4 = 0;
  while (*(_DWORD *)&g_MacOsaTimers[v4 + 24] != a3)
  {
    v4 += 32;
    if (v4 == 640) {
      goto LABEL_8;
    }
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v5 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: TimerStopped,Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 68, "gnssOsa_StopTimer", a3);
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  int v6 = &g_MacOsaTimers[v4];
  *int v6 = 0;
  v6[1] = 0;
  *(void *)((char *)v6 + 21) = 0;
  v6[2] = 0;
LABEL_8:
  gnssOsa_TimerHandler();
  gnssOsa_MacExitCriticalSection("gnssOsa_StopTimer", 440, &g_MacTimerContextCriticSection);
  return 1;
}

BOOL AgpsInitMsgQueue(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  gnssOsa_InitCriticalSection("AgpsInitMsgQueue", 494, (_opaque_pthread_mutex_t *)(a1 + 24));
  BOOL v2 = gnssOsa_SemInit((dispatch_semaphore_s **)(a1 + 88), 0);
  if (v2)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx InitMsgQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "AgpsInitMsgQueue", 1539);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v2;
}

BOOL gnssOsa_SemInit(dispatch_semaphore_s **a1, intptr_t value)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = (dispatch_semaphore_s *)dispatch_semaphore_create(value);
  *a1 = v3;
  if (!v3 && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 69, "gnssOsa_SemInit", 1539);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v3 != 0;
}

void AgpsDeinitMsgQueue(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 68, "AgpsDeinitMsgQueue");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  gnssOsa_MacEnterCriticalSection("AgpsDeinitMsgQueue", 520, (_opaque_pthread_mutex_t *)(a1 + 24));
  for (uint64_t i = *(void ***)(a1 + 8); i; uint64_t i = *(void ***)(a1 + 8))
  {
    uint64_t v4 = i + 1;
    uint64_t v5 = i[1];
    if (!v5) {
      uint64_t v4 = (void *)(a1 + 16);
    }
    *uint64_t v4 = 0;
    *(void *)(a1 + 8) = v5;
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v6 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Event dropped Src,%u,Dest,%u,Event,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 87, "AgpsDeinitMsgQueue", 770, *(unsigned __int8 *)*i, *((unsigned __int8 *)*i + 1), *((_DWORD *)*i + 1));
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    if (*i) {
      free(*i);
    }
    free(i);
  }
  gnssOsa_MacExitCriticalSection("AgpsDeinitMsgQueue", 557, (_opaque_pthread_mutex_t *)(a1 + 24));
  if (gnssOsa_MacDeinitCriticalSection("AgpsDeinitMsgQueue", 564, (_opaque_pthread_mutex_t *)(a1 + 24))
    && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v7 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "AgpsDeinitMsgQueue", 1553);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if (!gnssOsa_DeinitCountingSem((dispatch_object_t *)(a1 + 88)))
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    uint64_t v8 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "AgpsDeinitMsgQueue", 1540);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v9 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 68, "AgpsDeinitMsgQueue");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
}

BOOL gnssOsa_DeinitCountingSem(dispatch_object_t *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  dispatch_object_t v1 = *a1;
  if (*a1)
  {
    dispatch_release(*a1);
    *a1 = 0;
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v3 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "gnssOsa_DeinitCountingSem", 1540);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return v1 != 0;
}

uint64_t AgpsEnQueueFsmMsg(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v3 = (unsigned __int8 *)result;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Src,%x,Dest,%x,EnQEvent,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 73, "AgpsEnQueueFsmMsg", *v3, v3[1], *((_DWORD *)v3 + 1));
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
    uint64_t v5 = gnssOsa_Calloc("AgpsEnQueueFsmMsg", 590, 1, 0x10uLL);
    *uint64_t v5 = v3;
    gnssOsa_MacEnterCriticalSection("AgpsEnQueueFsmMsg", 601, (_opaque_pthread_mutex_t *)(a2 + 24));
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      *(void *)(v6 + 8) = v5;
      *(void *)(a2 + 16) = v5;
      v5[1] = 0;
      if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a2 + 88)))
      {
        *(void *)(v6 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = v5;
      v5[1] = 0;
      if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a2 + 88)))
      {
LABEL_8:
        *(void *)(a2 + 16) = v6;
        free(v5);
        if (g_LbsOsaTrace_Config)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v7 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Msg,%x,ProcessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "AgpsEnQueueFsmMsg", 1548, *((_DWORD *)v3 + 1), *(unsigned __int8 *)(a2 + 4));
          gnssOsa_PrintLog(__str, 1, 1, 0);
        }
      }
    }
    return gnssOsa_MacExitCriticalSection("AgpsEnQueueFsmMsg", 646, (_opaque_pthread_mutex_t *)(a2 + 24));
  }
  return result;
}

BOOL gnssOsa_SemRelease(dispatch_semaphore_t dsema)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (dsema)
  {
    dispatch_semaphore_signal(dsema);
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_SemRelease", 1542);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  return dsema != 0;
}

unsigned __int8 *AgpsDeQueueFsmMsg(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!gnssOsa_SemAcquire(*(dispatch_semaphore_t *)(a1 + 88)) && g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v2 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "AgpsDeQueueFsmMsg", 1541);
    gnssOsa_PrintLog(__str, 1, 1, 0);
  }
  gnssOsa_MacEnterCriticalSection("AgpsDeQueueFsmMsg", 667, (_opaque_pthread_mutex_t *)(a1 + 24));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = v3 + 1;
    uint64_t v5 = v3[1];
    if (!v5) {
      uint64_t v4 = (void *)(a1 + 16);
    }
    *uint64_t v4 = 0;
    *(void *)(a1 + 8) = v5;
    gnssOsa_MacExitCriticalSection("AgpsDeQueueFsmMsg", 692, (_opaque_pthread_mutex_t *)(a1 + 24));
    uint64_t v6 = (unsigned __int8 *)*v3;
    free(v3);
    if (v6 && g_LbsOsaTrace_Config >= 5)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v7 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Src,%x,Dest,%x,DeQEvent,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 68, "AgpsDeQueueFsmMsg", *v6, v6[1], *((_DWORD *)v6 + 1));
      gnssOsa_PrintLog(__str, 5, 1, 0);
    }
  }
  else
  {
    gnssOsa_MacExitCriticalSection("AgpsDeQueueFsmMsg", 692, (_opaque_pthread_mutex_t *)(a1 + 24));
    return 0;
  }
  return v6;
}

void gnssOsa_MarkFsmMsgInvalid(int a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = (_opaque_pthread_mutex_t *)(a2 + 24);
    gnssOsa_MacEnterCriticalSection("gnssOsa_MarkFsmMsgInvalid", 723, (_opaque_pthread_mutex_t *)(a2 + 24));
    uint64_t v5 = *(void **)(a2 + 8);
    if (v5)
    {
      while (*(_DWORD *)(*v5 + 4) != a1)
      {
        uint64_t v5 = (void *)v5[1];
        if (!v5) {
          goto LABEL_10;
        }
      }
      *(unsigned char *)(*v5 + 8) = 0;
      if (g_LbsOsaTrace_Config >= 4)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v7 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 73, "gnssOsa_MarkFsmMsgInvalid", a1);
        gnssOsa_PrintLog(__str, 4, 1, 0);
      }
    }
LABEL_10:
    gnssOsa_MacExitCriticalSection("gnssOsa_MarkFsmMsgInvalid", 745, v4);
  }
  else if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v6 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx FsmCtxt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 87, "gnssOsa_MarkFsmMsgInvalid", 513);
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
}

void *memcpy_s(const char *a1, int a2, void *__dst, unsigned int a4, const void *__src, size_t __n)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (__dst && __src)
  {
    if (a4 >= __n)
    {
      uint64_t v10 = __dst;
      memcpy(__dst, __src, __n);
      return v10;
    }
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Caller,%s,line,%d\n", v8, "OSA", 69, "memcpy_s", 515, a1, a2);
LABEL_8:
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Caller,%s,line,%d\n", v9, "OSA", 69, "memcpy_s", 513, a1, a2);
    goto LABEL_8;
  }
  return 0;
}

char *strncpy_s(char *__dst, unsigned int a2, const char *__src, size_t __n)
{
  uint64_t result = 0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (__dst && __src)
  {
    if (a2 >= __n)
    {
      return strncpy(__dst, __src, __n);
    }
    else
    {
      if (g_LbsOsaTrace_Config)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v6 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "strncpy_s", 515);
        gnssOsa_PrintLog(__str, 1, 1, 0);
      }
      return 0;
    }
  }
  return result;
}

BOOL gnssOsa_CreateThread(const char *a1, int a2, _opaque_pthread_t **a3, unsigned int a4, void *(__cdecl *a5)(void *), void *a6, unsigned int a7, void *a8, int a9)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  memset(&v29, 0, sizeof(v29));
  if (a3)
  {
    if (a4)
    {
      if (pthread_attr_init(&v29))
      {
        snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Init failed");
        if (g_LbsOsaTrace_Config)
        {
          bzero(__s, 0x3C6uLL);
          uint64_t v23 = mach_continuous_time();
          snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 69, "gnssOsa_CreateThread", __str);
          gnssOsa_PrintLog(__s, 1, 1, 0);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1034, "false && \"THRD Init failed\"");
      }
      unint64_t v15 = &v29;
      if (pthread_attr_setstacksize(&v29, a4))
      {
        snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Stack Size");
        if (g_LbsOsaTrace_Config)
        {
          bzero(__s, 0x3C6uLL);
          uint64_t v16 = mach_continuous_time();
          snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "OSA", 69, "gnssOsa_CreateThread", __str);
          gnssOsa_PrintLog(__s, 1, 1, 0);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1038, "false && \"THRD Stack Size\"");
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    if (pthread_create(a3, v15, a5, a6))
    {
      snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Create failed");
      if (g_LbsOsaTrace_Config)
      {
        bzero(__s, 0x3C6uLL);
        uint64_t v22 = mach_continuous_time();
        snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "OSA", 69, "gnssOsa_CreateThread", __str);
        gnssOsa_PrintLog(__s, 1, 1, 0);
      }
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1045, "false && \"THRD Create failed\"");
    }
    int v25 = 0;
    sched_param v26 = 0;
    if (pthread_getschedparam(*a3, &v25, &v26))
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1052, "false && \"THRD pthread_getschedparam failed\"");
    }
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v18 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx Requester,%s,Handle,%p,Prio,%d,DesiredPrio,%d,Policy,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "OSA", 73, "gnssOsa_CreateThread", 1569, a1, a3, v26.sched_priority, v25, a9);
      gnssOsa_PrintLog(__s, 4, 1, 0);
    }
    if (a9 == 99)
    {
      int v25 = 4;
      int priority_max = sched_get_priority_max(4);
    }
    else
    {
      if (a9 != 1)
      {
LABEL_23:
        if (a4 && pthread_attr_destroy(v15))
        {
          snprintf(__str, 0x3B6uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Destroy failed");
          if (g_LbsOsaTrace_Config)
          {
            bzero(__s, 0x3C6uLL);
            uint64_t v24 = mach_continuous_time();
            snprintf(__s, 0x3C5uLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "OSA", 69, "gnssOsa_CreateThread", __str);
            gnssOsa_PrintLog(__s, 1, 1, 0);
          }
          gnssOsa_FlushLog();
          __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1082, "false && \"THRD Destroy failed\"");
        }
        return a3 != 0;
      }
      int priority_max = sched_get_priority_min(v25);
    }
    if (priority_max == -1)
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1069, "false && \"sched_get_priority failed\"");
    }
    v26.sched_priority = priority_max;
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__s, 0x3C6uLL);
      uint64_t v20 = mach_continuous_time();
      snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx Updated Prio,%d,Policy,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "OSA", 73, "gnssOsa_CreateThread", 1569, v26.sched_priority, v25);
      gnssOsa_PrintLog(__s, 4, 1, 0);
    }
    if (pthread_setschedparam(*a3, v25, &v26))
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1075, "false && \"pthread_setschedparam failed\"");
    }
    goto LABEL_23;
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__s, 0x3C6uLL);
    uint64_t v17 = mach_continuous_time();
    snprintf(__s, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 69, "gnssOsa_CreateThread", 513);
    gnssOsa_PrintLog(__s, 1, 1, 0);
  }
  return a3 != 0;
}

void gnssOsa_PrintLog(char *__s, int a2, int a3, size_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = gp_Logger;
  if (gp_Logger)
  {
    if (a3)
    {
      a4 = strlen(__s);
      if (!a4) {
        return;
      }
    }
    else
    {
      a4 = a4;
      if (!a4) {
        return;
      }
    }
    uint64_t v8 = 2;
    switch(a2)
    {
      case 0:
        return;
      case 1:
        goto LABEL_8;
      case 2:
        uint64_t v8 = 3;
LABEL_8:
        if (!a3) {
          goto LABEL_16;
        }
        goto LABEL_12;
      case 3:
        uint64_t v8 = 4;
        if (!a3) {
          goto LABEL_16;
        }
LABEL_12:
        std::string::basic_string[abi:ne180100](__p, __s, a4);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)gp_Logger + 16))(gp_Logger, v8, __p);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        break;
      case 4:
        uint64_t v8 = 5;
        goto LABEL_16;
      default:
        uint64_t v8 = 6;
LABEL_16:
        unint64_t v9 = *(void (**)(uint64_t, uint64_t, char *, size_t))(*(void *)gp_Logger + 32);
        v9(v4, v8, __s, a4);
        break;
    }
  }
}

void sub_263C874CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *unint64_t __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_263C87678(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DD_GLON_Alm_Set_Health_Frq(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0;
  unsigned __int8 v20 = 0;
  uint64_t result = GLON_AlmBin2Int(a1, (uint64_t)&v16);
  int v4 = BYTE3(v17) - 32;
  if (BYTE3(v17) <= 0x18u) {
    int v4 = 2139062143;
  }
  if (BYTE3(v17) >= 7u) {
    int v5 = v4;
  }
  else {
    int v5 = BYTE3(v17);
  }
  int v6 = BYTE2(v17);
  uint64_t v7 = BYTE2(v17) - 1;
  if (v7 <= 0x17)
  {
    if (BYTE6(v19))
    {
      if (g_Logging_Cfg >= 5)
      {
        int v8 = *((_DWORD *)a2 + v7 + 4332);
        if (v8 != 2139062143 && v8 != v5) {
          uint64_t result = (uint64_t)EvCrt_v("DD_GLON_Alm_Set_Health_Frq:  Error:  Ignoring apparent change of Frq Id of Slot %d from %d to %d %d %d", BYTE2(v17), v8, v5, 1, v20);
        }
      }
      uint64_t v10 = (int *)a2 + v7 + 4332;
      if (*v10 == 2139062143 && v5 != 2139062143) {
        *uint64_t v10 = v5;
      }
      uint64_t v12 = a2[1489];
      if (!*(unsigned char *)(v12 + v7) && !*(unsigned char *)(a2[2146] + v7))
      {
        *(unsigned char *)(v12 + v7) = 1;
        uint64_t result = (uint64_t)EvLog_v("DD_GLON_Alm_Set_Health_Frq:  Health U->H Alm:  Slot %d  FrqId %d", BYTE2(v17), v5);
        *(_DWORD *)(a2[1490] + 20 * v7 + 4) = 1;
      }
    }
    else
    {
      uint64_t v13 = a2[1489];
      if (*(unsigned char *)(v13 + v7))
      {
        *(unsigned char *)(v13 + v7) = 0;
        uint64_t result = (uint64_t)EvLog_v("DD_GLON_Alm_Set_Health_Frq:  Health H->U Alm:  Slot %d  FrqId %d", v6, v5);
        *(_DWORD *)(a2[1490] + 20 * v7 + 4) = 2;
      }
      uint64_t v14 = (int *)a2 + v7 + 4332;
      if (*v14 == 2139062143 && v5 <= 6) {
        *uint64_t v14 = v5;
      }
    }
  }
  return result;
}

uint64_t DD_Proc_GLON_Data(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2 + 16;
  unsigned int v7 = *(_DWORD *)(a2 + 16);
  if ((v7 & 0x80000000) != 0)
  {
    if (g_Logging_Cfg >= 5)
    {
      int v22 = *(unsigned __int8 *)(a2 + 59);
      return (uint64_t)EvLog_d("DD_Proc_GLON_Data:  GLON MSB Zero test fail", v22);
    }
  }
  else
  {
    uint64_t v11 = result;
    uint64_t v12 = *(char *)(a2 + 58) + 7;
    uint64_t v13 = (char *)*(int *)(a6 + 4 * v12 + 17424);
    uint64_t v14 = v13 - 1;
    unsigned int v15 = v7 >> 27;
    *(unsigned char *)(a2 + 59) = v7 >> 27;
    if (!(v7 >> 27)) {
      goto LABEL_47;
    }
    if (*(int *)(a4 + 76) >= 7)
    {
      int v16 = *(_DWORD *)(a6 + 8972);
      if ((v16 - 2) < 5 || (v16 - 1) <= 5 && *(unsigned char *)(a4 + 80))
      {
        uint64_t v17 = (*(_DWORD *)(a2 + 60) % 30);
        int v18 = (int)((*(_DWORD *)(a2 + 60) % 30 + (((*(_DWORD *)(a2 + 60) % 30) & 0x80u) >> 7)) << 24) >> 25;
        if ((v17 + 1) < 3) {
          int v18 = 15;
        }
        if (v18 != v7 >> 27
          && !*a3
          && !*(unsigned char *)(*(void *)(a6 + 64) + *(unsigned __int8 *)(a2 + 8))
          && ((v18 - 2) > 3u || v15 + 1 != v18))
        {
          unsigned __int8 v20 = a5;
          uint64_t result = (uint64_t)EvCrt_nd("DD_Proc_GLON_Data:  Decoded Str No error", 3, (uint64_t)a3, v7 >> 27, v18, v17);
          a5 = v20;
          *(unsigned char *)(a2 + 59) = 0;
          goto LABEL_47;
        }
      }
    }
    if (v15 == 2)
    {
      if ((v7 & 0x4000000) == 0) {
        goto LABEL_20;
      }
    }
    else if (v15 == 3)
    {
      if ((v7 & 0x800) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
      if (v15 < 5 || ((v7 >> 27) & 1) == 0) {
        goto LABEL_47;
      }
      if ((*(unsigned char *)(a2 + 26) & 8) == 0)
      {
LABEL_20:
        if (v13 != 2139062143)
        {
          *(unsigned char *)(result + v12 + 4706) = 0;
          if (!v14[*(void *)(a6 + 11912)])
          {
            if (v14[*(void *)(a6 + 17184)])
            {
              uint64_t v21 = a5;
              memset(v116, 0, sizeof(v116));
              uint64_t v117 = 0;
              char v118 = 0;
              uint64_t result = GLON_AlmBin2Int(a6 + 36 * (void)v14 + 16248, (uint64_t)v116);
              if (BYTE6(v117))
              {
                v14[*(void *)(a6 + 11912)] = 1;
                uint64_t result = (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health U->H Imm:  Slot %d  FrqId %d", v13, *(unsigned __int8 *)(a2 + 59));
                *(_DWORD *)(*(void *)(a6 + 11920) + 20 * (void)v14 + 4) = 1;
              }
              else if (g_Logging_Cfg >= 6)
              {
                uint64_t result = (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health U->U Imm:  Slot %d  FrqId %d", v13, *(unsigned __int8 *)(a2 + 59));
              }
              a5 = v21;
            }
          }
        }
LABEL_47:
        int v25 = (unsigned char *)(v11 + 6005);
        int v26 = *(unsigned __int8 *)(a2 + 59);
        if ((v26 - 1) > 4)
        {
          if ((v26 - 6) <= 9)
          {
            if (v26)
            {
              uint64_t v31 = 14;
              do
              {
                int v32 = *v25;
                if (v32 != v26 && v32 != 0) {
                  *int v25 = 0;
                }
                if (*(v25 - 1)) {
                  BOOL v34 = v26 - 1 == *(v25 - 1);
                }
                else {
                  BOOL v34 = 1;
                }
                if (!v34) {
                  *(v25 - 1) = 0;
                }
                v25 += 2;
                --v31;
              }
              while (v31);
            }
            else
            {
              uint64_t v27 = 14;
              unsigned int v28 = (unsigned char *)(v11 + 6005);
              do
              {
                int v29 = *(v28 - 1);
                if (v29 != v26 && v29 != 0) {
                  *(v28 - 1) = 0;
                }
                *unsigned int v28 = 0;
                v28 += 2;
                --v27;
              }
              while (v27);
              *(_WORD *)(v11 + 6397) = 0;
            }
          }
        }
        else
        {
          *(_DWORD *)(v11 + 6028) = 0;
          *(void *)(v11 + 6020) = 0;
          *(_OWORD *)(v11 + 6004) = 0u;
          *(unsigned char *)(v11 + 6398) = 0;
          *(_WORD *)(v11 + 6396) = 0;
        }
        int v35 = *(unsigned __int8 *)(a2 + 59);
        if ((v35 - 1) < 4)
        {
          if (v13 == 2139062143
            || (uint64_t v36 = (_WORD *)(a6 + ((void)v14 << 6) + 11988), *v36 == 4095)
            || !v14[*(void *)(a6 + 11912)]
            || !v14[*(void *)(a6 + 17168)]
            || *(_DWORD *)(a2 + 60) % 1800 < 30)
          {
            uint64_t result = (uint64_t)DD_Proc_Glon_Eph_String((char *)v11, a2, a6, a4, a5);
          }
          else
          {
            uint64_t v37 = v8;
            double v38 = a5;
            DD_Proc_Glon_Eph_Bit_Validation(v13, v35, v37, a6);
            int v39 = (unsigned __int16)*v36;
            uint64_t result = (uint64_t)DD_Proc_Glon_Eph_String((char *)v11, a2, a6, a4, v38);
            if (v39 == 4095)
            {
              uint64_t v40 = a6 + ((void)v14 << 6);
              *(_DWORD *)(v40 + 11928) = *v38;
              *(_DWORD *)(v40 + 11932) = 4;
              v14[*(void *)(a6 + 17200)] = 1;
              if (*(unsigned __int8 *)(v11 + v12 + 5508) >= 2u)
              {
                uint64_t v41 = *(void **)(a6 + 17224);
                void *v41 = 0;
                v41[1] = 0;
                v41[2] = 0;
              }
              if (*v38 >= 1) {
                uint64_t result = Core_Save_GLON_Eph(v13, 0, (long long *)(v40 + 11928));
              }
            }
          }
          goto LABEL_92;
        }
        if (v35 != 5)
        {
          if (!*(unsigned char *)(a2 + 59))
          {
            uint64_t result = (uint64_t)EvLog_d("DD_Proc_GLON_Data:  Bad string", *(unsigned __int8 *)(a2 + 9));
            goto LABEL_92;
          }
          if (*(int *)(a4 + 76) < 3) {
            goto LABEL_92;
          }
          unsigned int v56 = *(_DWORD *)(a2 + 16);
          char v57 = (int)(*(_DWORD *)(a2 + 60) - 2 * ((v56 >> 27) & 0xF) + 15) / 30 % 5 + 1;
          if (((((int)(*(_DWORD *)(a2 + 60) - 2 * ((v56 >> 27) & 0xF) + 15) / 30 % 5) + 1) & 0x100) != 0) {
            goto LABEL_92;
          }
          int v58 = (v56 >> 27) & 0xF;
          uint64_t v59 = *(char *)(a2 + 58) + 7;
          if ((v56 >> 27))
          {
            uint64_t v96 = (int)v59;
            int v97 = (unsigned char *)(v11 + 2 * (int)v59 + 6004);
            if (*v97 + 1 == v58 && *(unsigned char *)(v11 + (int)v59 + 5972))
            {
              uint64_t v98 = v11 + 24 * (int)v59;
              int v99 = *(_DWORD *)(v8 + 8);
              *(void *)(v98 + 6044) = *(void *)v8;
              *(_DWORD *)(v98 + 6052) = v99;
              if (!*(_DWORD *)(v11 + 6000))
              {
                int v100 = *(_DWORD *)(a2 + 60);
                if (v100 >= 1) {
                  *(_DWORD *)(v11 + 6000) = v100;
                }
              }
              double v101 = (unsigned char *)(v11 + 2 * v96);
              v101[6005] = v58;
              *(unsigned char *)(v11 + v96 + 5986) = v57;
              v101[6369] = *(unsigned char *)(a2 + 15);
              ++*(unsigned char *)(v11 + 6397);
              *(_DWORD *)(v11 + 4 * v96 + 6400) = *a5;
              if (!v101[6368] && !v101[6369]) {
                ++*(unsigned char *)(v11 + 6398);
              }
            }
            else
            {
              if (g_Logging_Cfg >= 7)
              {
                if (*(unsigned char *)(v11 + (int)v59 + 5972)) {
                  uint64_t result = (uint64_t)EvLog_v("DD_Proc_Glon_Alm_String:  String numbers not consecutive, 1stStrId %d  2ndStrId %d  FrqId %d  FrmId %d  StrId %d  glonALM_Str1:  0x%x ");
                }
                else {
                  uint64_t result = (uint64_t)EvLog_v("DD_Proc_Glon_Alm_String:  Clk1 not Ready, FrqId %d  FrmId %d  StrId %d  Clk1_Ready %d ");
                }
              }
              if (*v97) {
                *int v97 = 0;
              }
            }
            goto LABEL_92;
          }
          if (v58 == 14
            && ((int)(*(_DWORD *)(a2 + 60) - 2 * ((v56 >> 27) & 0xF) + 15) / 30 % 5 + 1) == 5)
          {
            uint64_t v60 = *(int *)(a6 + 4 * v59 + 17424);
            if (v60 == 2139062143 || !*(unsigned char *)(v60 + *(void *)(a6 + 11912) - 1))
            {
              if (g_Logging_Cfg >= 5) {
                uint64_t result = (uint64_t)EvLog_v("DD_Proc_Glon_Alm_String:  Rejected:  Clk2 String,  SlotNum %d  FrqId %d  FrmId %d  StrId %d  glonALM_Str1:  0x%x ", v60, *(char *)(a2 + 58), 5, 14, *(_DWORD *)(v11 + 24 * (int)v59 + 6032));
              }
              goto LABEL_92;
            }
LABEL_186:
            uint64_t v106 = v11 + 24 * (int)v59;
            uint64_t v107 = *(void *)v8;
            *(_DWORD *)(v106 + 6040) = *(_DWORD *)(v8 + 8);
            *(void *)(v106 + 6032) = v107;
            if (!*(_DWORD *)(v11 + 6000))
            {
              int v108 = *(_DWORD *)(a2 + 60);
              if (v108 >= 1) {
                *(_DWORD *)(v11 + 6000) = v108;
              }
            }
            uint64_t v109 = v11 + 2 * v59;
            *(unsigned char *)(v109 + 6004) = v58;
            *(unsigned char *)(v109 + 6368) = *(unsigned char *)(a2 + 15);
            ++*(unsigned char *)(v11 + 6396);
            *(_DWORD *)(v11 + 4 * v59 + 6400) = *a5;
            goto LABEL_92;
          }
          if (((v56 >> 19) & 0x1F) - 25 >= 0xFFFFFFE8)
          {
            uint64_t v59 = (int)v59;
            goto LABEL_186;
          }
          uint64_t result = (uint64_t)EvCrt_v("DD_Proc_Glon_Alm_String:  Rejected:  Invalid Slot %d  FrqId %d  FrmId %d  StrId %d  Word[0]: 0x%x ");
          goto LABEL_92;
        }
        unsigned int v42 = *(_DWORD *)(a2 + 20);
        unsigned int v43 = *(_DWORD *)(a2 + 24);
        uint64_t v44 = HIWORD(*(_DWORD *)(a2 + 16)) & 0x7FF;
        HIDWORD(v46) = *(_DWORD *)(a2 + 16);
        LODWORD(v46) = v42;
        int v45 = v46 >> 16;
        if (v45 < 0) {
          int v45 = (v45 ^ 0x7FFFFFFF) + 1;
        }
        unsigned int v47 = (v43 >> 20) & 0xFFC00FFF | ((v42 & 0x3FF) << 12);
        if ((v42 & 0x200) != 0) {
          unsigned int v47 = (v47 ^ 0xFFDFFFFF) + 1;
        }
        if ((v44 - 1462) < 0xFFFFFA4B)
        {
          uint64_t result = (uint64_t)EvCrt_v("DD_Proc_Glon_Clk1_String:  Rejected:  FrqId %d  NA = %d  - Out of range [1..1461]");
          goto LABEL_92;
        }
        unint64_t v61 = 0;
        uint64_t v62 = (_OWORD *)(a6 + 17112);
        uint64_t v63 = (v42 >> 10) & 0x1F;
        int v64 = (v43 >> 19) & 1;
        unsigned int v65 = (_DWORD *)(v11 + 5600);
        BOOL v66 = 1;
        do
        {
          if (v45 == *(v65 - 2) && v47 == *v65 && (int)v63 - 2 < *((unsigned __int8 *)v65 - 4))
          {
            int v67 = *((unsigned __int16 *)v65 - 6);
            BOOL v68 = __OFSUB__(v44, v67);
            LODWORD(result) = v44 - v67;
            uint64_t result = (int)result < 0 != v68 ? (result + 1461) : result;
            if ((int)result < 4) {
              break;
            }
          }
          BOOL v66 = v61 < 0xD;
          v65 += 7;
          uint64_t result = ++v61;
        }
        while (v61 != 14);
        uint64_t v69 = *(char *)(a2 + 58) + 7;
        uint64_t v70 = v11 + 28 * (int)v69;
        *(_DWORD *)(v70 + 5580) = *a5;
        long long v71 = (long long *)(v70 + 5580);
        *(_DWORD *)(v70 + 5584) = 0;
        *(_WORD *)(v70 + 5588) = v44;
        *(_DWORD *)(v70 + 5592) = v45;
        *(unsigned char *)(v70 + 5596) = v63;
        *(_DWORD *)(v70 + 5600) = v47;
        *(unsigned char *)(v70 + 5604) = v64;
        BOOL v72 = v66 || *(unsigned char *)(a2 + 15) == 0;
        *(unsigned char *)(v11 + v69 + 5972) = v72;
        if (*(unsigned char *)(a6 + 17192) || !v72)
        {
          if (!v66) {
            goto LABEL_160;
          }
          if (*(unsigned char *)(a6 + 17192))
          {
            if (*(unsigned __int8 *)(a6 + 17128) >= v63) {
              goto LABEL_140;
            }
            int v81 = *(__int16 *)(a4 + 82) - v63;
            if (v81 < 0) {
              int v81 = v63 - *(__int16 *)(a4 + 82);
            }
            if (v81 >= 2)
            {
LABEL_140:
              if (*(unsigned __int16 *)(a6 + 17120) > v44) {
                goto LABEL_160;
              }
              int v82 = *(__int16 *)(a4 + 84) - v44;
              if (v82 < 0) {
                int v82 = v44 - *(__int16 *)(a4 + 84);
              }
              if (v82 > 1)
              {
LABEL_160:
                if (g_Logging_Cfg >= 7) {
                  uint64_t result = (uint64_t)EvLog_nd("DD_Proc_Glon_Clk1_String:  Rejected: ", 6, (uint64_t)&unk_26A9CB000, *(unsigned __int8 *)(a6 + 17128), *(unsigned __int16 *)(a6 + 17120), v63, v44, *(__int16 *)(a4 + 82), *(__int16 *)(a4 + 84));
                }
                goto LABEL_92;
              }
            }
          }
          long long v83 = *v71;
          *(_OWORD *)(a6 + 17124) = *(_OWORD *)(v70 + 5592);
          _OWORD *v62 = v83;
          int v74 = a5;
          *(_DWORD *)uint64_t v62 = *a5;
          *(_DWORD *)(a6 + 17116) = 4;
          BOOL v80 = 1;
          *(unsigned char *)(a6 + 17192) = 1;
          uint64_t result = (uint64_t)EvVrb_v("DD_Proc_Glon_Clk1_String:  New Clk1:  FrqId %d  Source %d  GPS_secs %d  TauGPS %d");
        }
        else
        {
          long long v73 = *v71;
          *(_OWORD *)(a6 + 17124) = *(_OWORD *)(v70 + 5592);
          _OWORD *v62 = v73;
          int v74 = a5;
          *(_DWORD *)uint64_t v62 = *a5;
          *(_DWORD *)(a6 + 17116) = 4;
          int v75 = *(_DWORD *)(a6 + 17124);
          if (v75 >= 0) {
            unsigned int v76 = *(_DWORD *)(a6 + 17124);
          }
          else {
            unsigned int v76 = -v75;
          }
          int v77 = *(_DWORD *)(a6 + 17132);
          if (v77 >= 0) {
            unsigned int v78 = *(_DWORD *)(a6 + 17132);
          }
          else {
            unsigned int v78 = -v77;
          }
          BOOL v80 = v76 < 0x285 && v78 < 0x143;
          if (v80) {
            *(unsigned char *)(a6 + 17192) = 1;
          }
          uint64_t result = (uint64_t)EvVrb_v("DD_Proc_Glon_Clk1_String:  1st Clk1:  FrqId %d  Source %d  GPS_secs %d  TauGPS %d");
        }
        if (!*(unsigned char *)(a6 + 17192))
        {
LABEL_92:
          uint64_t v48 = 0;
          LODWORD(v49) = 0;
          uint64_t v50 = *(void *)(a6 + 11912);
          uint64_t v51 = p_NV;
          uint64_t v52 = *(void *)(v50 + 16);
          *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v50;
          *(void *)(v51 + 29188) = v52;
          uint64_t v53 = v51 + 29168;
          __int16 v54 = -9871;
          do
          {
            int v55 = *(unsigned __int8 *)(v53 + v48) ^ HIBYTE(v54);
            __int16 v54 = -12691 * (v54 + (*(unsigned __int8 *)(v53 + v48) ^ HIBYTE(v54))) + 22719;
            uint64_t v49 = (v49 + v55);
            ++v48;
          }
          while (v48 != 32);
          *(void *)(v51 + 29160) = v49;
          return result;
        }
        int v84 = v74;
        int v85 = *(__int16 *)(a4 + 84);
        int v86 = *(unsigned __int16 *)(a6 + 17120);
        int v87 = v85 - v86 + 1461;
        if (v85 - v86 >= -730) {
          int v87 = v85 - v86;
        }
        if (v85 - v86 <= 729) {
          int v88 = v87;
        }
        else {
          int v88 = v85 - v86 - 1461;
        }
        if (v88 < 0) {
          int v88 = -v88;
        }
        if (*(unsigned char *)(a4 + 80) && v88 >= 2)
        {
          *(_WORD *)(a4 + 82) = *(unsigned __int8 *)(a6 + 17128);
          *(_WORD *)(a4 + 84) = 0;
          *(unsigned char *)(a4 + 80) = 0;
          *(unsigned char *)(a4 + 105) = 1;
          goto LABEL_156;
        }
        int v102 = *(unsigned __int16 *)(a4 + 84);
        uint64_t v103 = *(unsigned __int8 *)(a6 + 17128);
        if (*(unsigned char *)(a4 + 80))
        {
          int v104 = *(__int16 *)(a4 + 82);
          if (v103 != v104)
          {
            if (v104 + 1 == v103 && v102 == 1461)
            {
              uint64_t result = (uint64_t)EvLog_nd("DD_Proc_Glon_Clk1_String:  4yrBlockNo roll-over ", 2, (uint64_t)&unk_26A9CB000, *(__int16 *)(a4 + 82), v103);
              *(_WORD *)(a4 + 84) = 1;
            }
            else
            {
              uint64_t result = (uint64_t)EvCrt_nd("DD_Proc_Glon_Clk1_String:  WARNING:  4yrBlockNo miss-match ", 2, (uint64_t)&unk_26A9CB000, *(__int16 *)(a4 + 82), v103);
            }
            *(_WORD *)(a4 + 82) = *(unsigned __int8 *)(a6 + 17128);
            int v84 = v74;
            if (!*(unsigned char *)(a4 + 80))
            {
LABEL_156:
              if (v80)
              {
                uint64_t v89 = 0;
                LODWORD(v90) = 0;
                *(_DWORD *)uint64_t v62 = *v84;
                *(_DWORD *)(a6 + 17116) = 4;
                uint64_t v91 = p_NV;
                long long v92 = *(_OWORD *)(a6 + 17124);
                *(_OWORD *)(p_NV + 29208) = *v62;
                *(_OWORD *)(v91 + 29220) = v92;
                uint64_t v93 = v91 + 29208;
                __int16 v94 = -9871;
                do
                {
                  int v95 = *(unsigned __int8 *)(v93 + v89) ^ HIBYTE(v94);
                  __int16 v94 = -12691 * (v94 + (*(unsigned __int8 *)(v93 + v89) ^ HIBYTE(v94))) + 22719;
                  uint64_t v90 = (v90 + v95);
                  ++v89;
                }
                while (v89 != 32);
                *(void *)(v91 + 29200) = v90;
              }
              goto LABEL_92;
            }
          }
LABEL_200:
          if (*(unsigned char *)(a4 + 16) && *(_DWORD *)a4) {
            goto LABEL_211;
          }
          *(void *)char v116 = 0;
          int v121 = 0;
          int v120 = 0;
          double v119 = 0.0;
          double v110 = v84;
          API_Get_UTC_Cor(1, (double *)v116);
          Glon_To_GPS_Time(*(__int16 *)(a4 + 82), *(__int16 *)(a4 + 84), *(double *)(a4 + 88), *(double *)v116, &v121, &v120, &v119);
          uint64_t result = (uint64_t)DD_Submit_WeekNum((void *)*(char *)(a2 + 58), v121, (__int16)v120, (double *)a4, v119);
          int v84 = v110;
          if (!*v110)
          {
            uint64_t v111 = *(void *)(p_api + 48);
            if (*(unsigned char *)(v111 + 16) && *(int *)v111 >= 3) {
              int v112 = (int)*(double *)(v111 + 40) + 604800 * *(__int16 *)(v111 + 32);
            }
            else {
              int v112 = 0;
            }
            int *v110 = v112;
          }
          if (*(unsigned char *)(a4 + 80) && *(unsigned char *)(a4 + 16) && *(_DWORD *)a4)
          {
LABEL_211:
            double v113 = *(double *)(a4 + 40);
            if (v113 > 31.0 && v113 < 604769.0)
            {
              int v114 = v84;
              *(void *)char v116 = 0;
              int v121 = 0;
              int v120 = 0;
              API_Get_UTC_Cor(1, (double *)v116);
              uint64_t result = Glon_To_GPS_Time(*(__int16 *)(a4 + 82), *(__int16 *)(a4 + 84), *(double *)(a4 + 88), *(double *)v116, &v121, &v120, &v119);
              int v115 = v120 + (v121 << 10);
              if (v115 == *(__int16 *)(a4 + 32))
              {
                *(_DWORD *)(a4 + 20) = *(_DWORD *)(a4 + 24);
              }
              else
              {
                uint64_t result = (uint64_t)EvCrt_v("DD_Proc_Glon_Clk1_String:  WARNING:  GLONASS Date Spoofing suspected, 4yrBlk %d  Day %d  Wk  %d != %d  FreqId %d", *(__int16 *)(a4 + 82), *(__int16 *)(a4 + 84), v115, *(__int16 *)(a4 + 32), *(char *)(a2 + 58));
                *(unsigned char *)(a4 + 80) = 0;
                *(_DWORD *)(a4 + 82) = 0;
                *(unsigned char *)(a4 + 105) = 1;
              }
              int v84 = v114;
            }
          }
          goto LABEL_156;
        }
        *(_WORD *)(a4 + 82) = v103;
        if ((__int16)v102 < 1) {
          goto LABEL_156;
        }
        if (v102 == 1461)
        {
          if (v86 != 1)
          {
LABEL_199:
            *(unsigned char *)(a4 + 80) = 1;
            goto LABEL_200;
          }
          __int16 v105 = -1;
        }
        else
        {
          if (v102 != 1 || v86 != 1461) {
            goto LABEL_199;
          }
          __int16 v105 = 1;
        }
        *(_WORD *)(a4 + 82) = v105 + v103;
        goto LABEL_199;
      }
    }
    if (!*(unsigned char *)(a2 + 15)) {
      ++*(unsigned char *)(result + v12 + 4706);
    }
    if (v13 == 2139062143)
    {
      return (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot ?  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d   (Ignored, no Slot)");
    }
    else
    {
      if (!*(unsigned char *)(a2 + 15))
      {
        uint64_t v23 = (unsigned __int8 *)(result + v12 + 4706);
        if (*v23 >= 2u)
        {
          uint64_t v24 = *(void *)(a6 + 11912);
          if (v14[v24])
          {
            v14[v24] = 0;
            uint64_t result = (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot %d  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d", v13, *(char *)(a2 + 58), *(unsigned __int8 *)(a2 + 59), 0, *v23);
            *(_DWORD *)(*(void *)(a6 + 11920) + 20 * (void)v14) = 2;
          }
        }
      }
      if (v14[*(void *)(a6 + 11912)]) {
        return (uint64_t)EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot %d  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d  (Waiting Confirmation)");
      }
    }
  }
  return result;
}

char *DD_Proc_Glon_Eph_Bit_Validation(char *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (result - 1);
  unsigned int v5 = a2 - 1;
  if (v4 <= 0x17 && v5 <= 3)
  {
    int v9 = (int)result;
    uint64_t v10 = 0;
    char v11 = 3 * v5;
    uint64_t v12 = a4 + (v4 << 6);
    uint64_t v13 = v12 + 12 * v5 + 11940;
    uint64_t v14 = (_WORD *)(v12 + 11988);
    unsigned int v15 = (char *)&MaskToStrCheck + 12 * v5;
    char v16 = 3 * a2 - 3;
    do
    {
      unsigned int v17 = (unsigned __int16)*v14;
      if (((v17 >> (v16 + v10)) & 1) == 0)
      {
        int v18 = *(_DWORD *)(a3 + 4 * v10);
        int v19 = *(_DWORD *)&v15[4 * v10];
        if (((*(_DWORD *)(v13 + 4 * v10) ^ v18) & v19) != 0) {
          uint64_t result = EvDbg_v("DD_Proc_Glon_Eph_Bit_Validation:  Fail SV %d  St %d  Wd %d  0x%x 0x%x 0x%x", v9, a2, v10, v18, *(_DWORD *)(v13 + 4 * v10), v19);
        }
        else {
          *uint64_t v14 = v17 | (1 << (v11 + v10));
        }
      }
      ++v10;
    }
    while (v10 != 3);
  }
  return result;
}

char *DD_Proc_Glon_Eph_String(char *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v8 = result;
  v45[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v9 = (char)(*(unsigned char *)(a2 + 58) + 7);
  uint64_t v10 = &result[4 * v9 + 4724];
  uint64_t v11 = (*(unsigned char *)(a2 + 59) - 1);
  uint64_t v12 = &v10[v11];
  int v13 = v10[v11];
  if (v10[v11])
  {
    if (((*(_DWORD *)&result[48 * (char)(*(unsigned char *)(a2 + 58) + 7)
                            + 4780
                            + 12 * (*(unsigned char *)(a2 + 59) - 1)] ^ *(_DWORD *)(a2 + 16)) & MaskToStrCheck[3 * *(unsigned __int8 *)(a2 + 59) - 3]) != 0)
    {
      int v13 = 0;
    }
    else
    {
      unint64_t v14 = 0;
      do
      {
        unint64_t v15 = v14;
        if (v14 == 2) {
          break;
        }
        int v16 = MaskToStrCheck[3 * *(unsigned __int8 *)(a2 + 59) - 2 + v14];
        int v17 = *(_DWORD *)&result[48 * (char)(*(unsigned char *)(a2 + 58) + 7)
                               + 4784
                               + 12 * (*(unsigned char *)(a2 + 59) - 1)
                               + 4 * v14] ^ *(_DWORD *)(a2 + 20 + 4 * v14);
        ++v14;
      }
      while ((v17 & v16) == 0);
      int v13 = v15 > 1;
    }
  }
  uint64_t v18 = (uint64_t)&result[48 * (char)(*(unsigned char *)(a2 + 58) + 7) + 4780 + 12 * (*(unsigned char *)(a2 + 59) - 1)];
  uint64_t v19 = *(void *)(a2 + 16);
  *(_DWORD *)(v18 + 8) = *(_DWORD *)(a2 + 24);
  *(void *)uint64_t v18 = v19;
  unsigned __int8 v20 = &result[4 * v9];
  v20[v11 + 5452] = *(unsigned char *)(a2 + 15);
  *((_DWORD *)v20 + 1381) = *a5;
  if (v13) {
    char v21 = *v12 + 1;
  }
  else {
    char v21 = 1;
  }
  char *v12 = v21;
  if (!*((_DWORD *)result + 1180))
  {
    int v22 = *(_DWORD *)(a2 + 60);
    if (v22 >= 1) {
      *((_DWORD *)result + 1180) = v22;
    }
  }
  int v23 = *(unsigned __int8 *)(a2 + 59);
  if (v23 == 1)
  {
    if ((*(_WORD *)&result[48 * (int)v9 + 4782] & 0x180) == 0) {
      goto LABEL_46;
    }
    *(_DWORD *)uint64_t v10 = 1;
    int v23 = *(unsigned __int8 *)(a2 + 59);
  }
  if (v23 != 4) {
    goto LABEL_46;
  }
  uint64_t v24 = &result[4 * v9 + 4727];
  unsigned int v25 = *v24;
  if (!*v24) {
    goto LABEL_24;
  }
  int v26 = (*(_DWORD *)&result[48 * (int)v9 + 4824] >> 21) & 0x1F;
  if ((v26 - 1) > 0x17)
  {
    *(_DWORD *)uint64_t v10 = 0;
    return EvCrt_v("DD_Proc_Glon_Eph_String:  WARNING:  FrqId %d  Illegal SlotId %d !", *(char *)(a2 + 58), v26);
  }
  uint64_t v27 = (int *)(a3 + 4 * v9 + 17424);
  uint64_t v28 = a3 + 4 * (v26 - 1);
  if (*v27 != 2139062143 && *(_DWORD *)(v28 + 17328) != 2139062143)
  {
LABEL_31:
    uint64_t v30 = (unsigned char *)(a4 + 80);
    int v29 = *(unsigned __int8 *)(a4 + 80);
    BOOL v31 = *(unsigned char *)(a4 + 80) == 0;
    if (v25 > 1) {
      goto LABEL_32;
    }
    goto LABEL_25;
  }
  if (v25 > 1 || !result[4 * v9 + 5455])
  {
    *(_DWORD *)(v28 + 17328) = v9 - 7;
    *uint64_t v27 = v26;
    *(_DWORD *)(a3 + 4 * v9 + 17480) = 2;
    uint64_t result = EvLog_v("DD_Proc_Glon_Eph_String:  Set Slot Num %d for FreqId %d  (Str 4)", v26, *(_DWORD *)(v28 + 17328));
    if (*(unsigned char *)(a2 + 59) != 4) {
      goto LABEL_46;
    }
    unsigned int v25 = *v24;
    goto LABEL_31;
  }
LABEL_24:
  uint64_t v30 = (unsigned char *)(a4 + 80);
  int v29 = *(unsigned __int8 *)(a4 + 80);
LABEL_25:
  if (v29 || *(unsigned char *)(a2 + 15)) {
    goto LABEL_46;
  }
  BOOL v31 = 1;
LABEL_32:
  uint64_t v32 = *(__int16 *)(a4 + 84);
  uint64_t v33 = (*(_DWORD *)&v8[48 * (int)v9 + 4824] >> 26) & 0xFFFFF83F | ((*(_DWORD *)&v8[48 * (int)v9 + 4820] & 0x1F) << 6);
  *(_WORD *)(a4 + 84) = (*(_DWORD *)&v8[48 * (int)v9 + 4824] >> 26) & 0x3F | ((*(_WORD *)&v8[48 * (int)v9 + 4820] & 0x1F) << 6);
  if (v31)
  {
    if (*(__int16 *)(a4 + 82) >= 1)
    {
      *uint64_t v30 = 1;
      uint64_t result = (char *)EvLog_nd("DD_Proc_Glon_Eph_String:  New DayNo ", 2, a3, v33, *(char *)(a2 + 58));
    }
  }
  else
  {
    if (v32 == v33) {
      goto LABEL_38;
    }
    *uint64_t v30 = 0;
    uint64_t result = (char *)EvCrt_nd("DD_Proc_Glon_Eph_String:  WARNING:  DayNo miss-match", 3, a3, v33, v32, *(char *)(a2 + 58));
  }
  if (*v30)
  {
LABEL_38:
    if (!*(unsigned char *)(a4 + 16) || !*(_DWORD *)a4)
    {
      *(void *)uint64_t v44 = 0;
      v45[0] = 0.0;
      double v43 = 0.0;
      API_Get_UTC_Cor(1, v45);
      Glon_To_GPS_Time(*(__int16 *)(a4 + 82), *(__int16 *)(a4 + 84), *(double *)(a4 + 88), v45[0], &v44[1], v44, &v43);
      uint64_t result = (char *)DD_Submit_WeekNum((void *)*(char *)(a2 + 58), v44[1], SLOWORD(v44[0]), (double *)a4, v43);
      if (!*a5)
      {
        uint64_t v34 = *(void *)(p_api + 48);
        if (*(unsigned char *)(v34 + 16) && *(int *)v34 >= 3) {
          int v35 = (int)*(double *)(v34 + 40) + 604800 * *(__int16 *)(v34 + 32);
        }
        else {
          int v35 = 0;
        }
        *a5 = v35;
      }
    }
  }
LABEL_46:
  unsigned int v36 = *v10;
  if (*v10)
  {
    uint64_t v37 = &v8[4 * v9];
    if (v37[4725])
    {
      if (v37[4726])
      {
        double v38 = &v8[4 * v9];
        if (v38[4727])
        {
          uint64_t v39 = 0;
          uint64_t v40 = &v8[v9 + 5508];
          *uint64_t v40 = v36;
          uint64_t v41 = v38 + 4725;
          do
          {
            unsigned int v42 = v41[v39];
            if (v42 < v36)
            {
              *uint64_t v40 = v42;
              unsigned int v36 = v42;
            }
            ++v39;
          }
          while (v39 != 3);
        }
      }
    }
  }
  return result;
}

uint64_t DD_Save_New_GLON_Alm(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned __int8 *)(a3 + 6005);
  if (*(unsigned __int8 *)(a3 + 6397) <= 1u && !*(unsigned char *)(a3 + 6398)) {
    return result;
  }
  uint64_t v5 = 0;
  memset(v69, 0, sizeof(v69));
  uint64_t v70 = 0;
  memset(v71, 0, 14);
  memset(v68, 0, 14);
  *(void *)&long long v6 = 0x7F7F7F7F7F7F7F7FLL;
  *((void *)&v6 + 1) = 0x7F7F7F7F7F7F7F7FLL;
  v72[0] = v6;
  v72[1] = v6;
  uint64_t v73 = 0x7F7F7F7F7F7F7F7FLL;
  unsigned int v7 = (unsigned __int8 *)(a3 + 6005);
  uint64_t v8 = 2139062143;
  v72[2] = v6;
  do
  {
    int v9 = *(v7 - 1);
    if ((v9 - 6) <= 8 && v9 + 1 == *v7 && *(unsigned char *)(a3 + 5972 + v5))
    {
      if (v8 == 2139062143) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = v8;
      }
      v71[v5] = 1;
    }
    v7 += 2;
    ++v5;
  }
  while (v5 != 14);
  uint64_t v10 = (int *)&unk_26AA2D000;
  if (v8 == 2139062143)
  {
    if (g_Logging_Cfg >= 7) {
      uint64_t result = (uint64_t)EvLog("DD_Check_GLON_Alm:  No valid Freq Id Channels for Cross-Checking Almanacs");
    }
    goto LABEL_94;
  }
  int v59 = result;
  int v11 = 0;
  unsigned int v12 = 0;
  *((_DWORD *)v69 + (int)v8) = 1;
  uint64_t v61 = a3 + 6056;
  uint64_t result = (uint64_t)v71;
  uint64_t v13 = 1;
  uint64_t v66 = a3;
  uint64_t v62 = (unsigned __int8 *)(a3 + 6005);
  while ((int)v8 >= 13)
  {
    uint64_t v25 = v13 - 1;
    unsigned __int8 v19 = 1;
    uint64_t v21 = v8;
    uint64_t v14 = v8;
LABEL_42:
    if (*(unsigned char *)(a3 + v14 + 5986) != 5 || *(unsigned char *)(a3 + 2 * v14 + 6004) != 14)
    {
      uint64_t v26 = a3 + 2 * v14;
      if (!*(unsigned char *)(v26 + 6368) && !*(unsigned char *)(v26 + 6369))
      {
        if (v4[392] == v19) {
          goto LABEL_72;
        }
        unsigned int v27 = ((*(_DWORD *)(a3 + 24 * v14 + 6032) >> 19) & 0x1F) - 1;
        if (v27 <= 0x17 && !*(unsigned char *)(a2[2148] + v27)) {
LABEL_40:
        }
          v68[v25] = 1;
      }
    }
    if (v68[v25])
    {
      *((_DWORD *)v72 + v25) = v8;
      ++v11;
    }
    if (v21 != v8)
    {
      v12 += v19;
      *((_DWORD *)v69 + (int)v21) = ++v13;
      uint64_t v8 = v21;
      if (v12 <= v4[392]) {
        continue;
      }
    }
    uint64_t v3 = a2;
    if (v11 >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      int v30 = 0;
      int v31 = 0;
      uint64_t v32 = (v13 + 1) - 1;
      do
      {
        if (v68[v28])
        {
          uint64_t v8 = *((int *)v72 + v28);
          int v33 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588);
          if (v30)
          {
            uint64_t result = (v33 - v31 - 1461);
            int v34 = v33 - v31 + 1461;
            if (v33 - v31 >= -730) {
              int v34 = v33 - v31;
            }
            if (v33 - v31 <= 730) {
              int v35 = v34;
            }
            else {
              int v35 = v33 - v31 - 1461;
            }
            if (v35 <= 0) {
              uint64_t v8 = v29;
            }
            else {
              uint64_t v8 = v8;
            }
            if (v35 > 0) {
              int v31 = v33;
            }
          }
          else
          {
            int v30 = v28 + 1;
            int v31 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588);
          }
        }
        else
        {
          uint64_t v8 = v29;
        }
        ++v28;
        uint64_t v29 = v8;
      }
      while (v32 != v28);
      goto LABEL_73;
    }
    goto LABEL_94;
  }
  uint64_t v63 = v13;
  unsigned int v64 = v12;
  int v65 = v11;
  uint64_t v14 = (int)v8;
  unint64_t v15 = (unsigned __int8 *)(a3 + (int)v8 + 5986);
  int v16 = (unsigned __int8 *)(a3 + 2 * (int)v8 + 6004);
  int v17 = (_DWORD *)(a3 + 24 * (int)v8 + 6032);
  uint64_t v18 = v61 + 24 * (int)v8;
  unsigned __int8 v19 = 1;
  uint64_t v20 = (int)v8;
  uint64_t v21 = v8;
  do
  {
    int v22 = v20++;
    if (v71[v20] && *((int *)v69 + v20) <= 0)
    {
      if (*v15 == 5 && *v16 == 14 && *(unsigned char *)(a3 + v20 + 5986) == 5 && *(unsigned char *)(a3 + 2 * v20 + 6004) == 14)
      {
        if (((*(_DWORD *)(a3 + 24 * v20 + 6032) ^ *v17) & 0x78000030) == 0)
        {
LABEL_36:
          *((_DWORD *)v69 + v20) = *((_DWORD *)v69 + (int)v8);
          ++v19;
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v24 = 0;
        while (((*(_DWORD *)(v18 + v24 * 4) ^ v17[v24]) & MaskToAlmCheck[v24]) == 0
             && ((*(_DWORD *)(v18 + v24 * 4 + 12) ^ v17[v24 + 3]) & MaskToAlmCheck[v24 + 3]) == 0)
        {
          if (++v24 == 3) {
            goto LABEL_36;
          }
        }
      }
      if (v21 == v8) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = v21;
      }
      if (v10[896] >= 7)
      {
        int v23 = v10;
        unsigned int v67 = v21;
        EvLog_v("DD_Check_GLON_Alm:  Different Almanacs, FrqId_1 %d  FrqId_2 %d  FramId %d  StrId %d ", v8 - 7, v22 - 6, *v15, *v16);
        uint64_t v21 = v67;
        uint64_t result = (uint64_t)v71;
        uint64_t v10 = v23;
        a3 = v66;
      }
    }
LABEL_20:
    v18 += 24;
  }
  while (v20 != 13);
  uint64_t v13 = v63;
  uint64_t v25 = v63 - 1;
  if (v19 < 2u)
  {
    uint64_t v4 = v62;
    unsigned int v12 = v64;
    int v11 = v65;
    goto LABEL_42;
  }
  uint64_t v4 = v62;
  unsigned int v12 = v64;
  int v11 = v65;
  if (v62[392] != v19) {
    goto LABEL_40;
  }
LABEL_72:
  uint64_t v3 = a2;
LABEL_73:
  uint64_t v36 = (int)v8;
  uint64_t v37 = (unsigned __int8 *)(a3 + (int)v8 + 5986);
  int v38 = *v37;
  if (v38 == 5 && *(unsigned char *)(a3 + 2 * (int)v8 + 6004) == 14) {
    goto LABEL_78;
  }
  uint64_t v39 = a3 + 24 * (int)v8;
  int v40 = (*(_DWORD *)(v39 + 6032) >> 19) & 0x1F;
  if ((v40 - 25) <= 0xFFFFFFE7)
  {
    uint64_t result = (uint64_t)EvCrt_v("DD_Validate_GLON_Alm:  Rejected:  FrqCh %d   Slot Number %d - Out of range", (int)v8 - 7, v40);
    goto LABEL_77;
  }
  uint64_t v41 = (v40 - 1);
  uint64_t v42 = v3[2148];
  if (*(unsigned char *)(v42 + v41))
  {
    int v43 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588) - *((unsigned __int16 *)v3 + 18 * v41 + 8128);
    int v44 = v43 - 1461;
    if (v43 <= 730) {
      int v44 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588)
    }
          - *((unsigned __int16 *)v3 + 18 * v41 + 8128);
    int v45 = v43 >= -730 ? v44 : v43 + 1461;
    if (v45 <= 0)
    {
      if (v59 >= 1 && !v45 && (v38 != 5 || *(unsigned char *)(a3 + 2 * (int)v8 + 6004) != 14 && v41 <= 0x17))
      {
        int v58 = (char *)v3 + 36 * v41;
        if (!*((_DWORD *)v58 + 4062))
        {
          *((_DWORD *)v58 + 4062) = v59;
          *((_DWORD *)v3 + 9 * v41 + 4063) = 4;
          uint64_t result = Core_Save_GLON_Alm(v40, 0, (long long *)(v58 + 16248));
LABEL_77:
          a3 = v66;
        }
      }
LABEL_78:
      if (v4[392] == v4[391]) {
        goto LABEL_93;
      }
      goto LABEL_94;
    }
  }
  if (v38 != 5 || *(unsigned char *)(a3 + 2 * (int)v8 + 6004) != 14)
  {
    uint64_t v46 = (uint64_t)v3 + 36 * v41 + 16248;
    long long v47 = *(_OWORD *)(v39 + 6032);
    *(void *)(v46 + 28) = *(void *)(v39 + 6048);
    *(_OWORD *)(v46 + 12) = v47;
    if (v10[896] >= 7)
    {
      EvLog_v("DD_Save_New_GLON_Alm:  New Alm  Slot %d  FrqId %d  FramId %d  StrId %d  Suspect_Bits %d %d  Word[0] 0x%x  NA_Clk1 %d  NA_DBnmAlm  %d ", v40, v36 + 65, *v37, *(unsigned __int8 *)(a3 + 2 * v36 + 6004), *(unsigned __int8 *)(a3 + 2 * v36 + 6368), *(unsigned __int8 *)(a3 + 2 * v36 + 6369), *(_DWORD *)(v39 + 6032), *(unsigned __int16 *)(a3 + 28 * (int)v36 + 5588), *((unsigned __int16 *)v3 + 18 * v41 + 8128));
      a3 = v66;
      uint64_t v42 = v3[2148];
    }
    uint64_t v48 = (char *)v3 + 36 * v41;
    *((_WORD *)v48 + 8128) = *(_WORD *)(a3 + 28 * (int)v36 + 5588);
    *(_DWORD *)uint64_t v46 = v59;
    *((_DWORD *)v48 + 4063) = 4;
    *(unsigned char *)(v3[2144] + v41) = 1;
    *(unsigned char *)(v42 + v41) = 1;
    uint64_t result = DD_GLON_Alm_Set_Health_Frq((uint64_t)(v48 + 16248), v3);
    a3 = v66;
    if (v59 >= 1)
    {
      uint64_t result = Core_Save_GLON_Alm(v40, 0, (long long *)((char *)v3 + 36 * v41 + 16248));
      a3 = v66;
    }
  }
LABEL_93:
  *(_DWORD *)(a3 + 6028) = 0;
  *(void *)(a3 + 6020) = 0;
  *(_OWORD *)(a3 + 6004) = 0u;
  v4[393] = 0;
  *(_WORD *)(v4 + 391) = 0;
LABEL_94:
  uint64_t v49 = 0;
  LODWORD(v50) = 0;
  uint64_t v51 = v3[1489];
  uint64_t v52 = p_NV;
  uint64_t v53 = p_NV + 29160;
  uint64_t v54 = *(void *)(v51 + 16);
  *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v51;
  *(void *)(v53 + 28) = v54;
  uint64_t v55 = v52 + 29168;
  __int16 v56 = -9871;
  do
  {
    int v57 = *(unsigned __int8 *)(v55 + v49) ^ HIBYTE(v56);
    __int16 v56 = -12691 * (v56 + (*(unsigned __int8 *)(v55 + v49) ^ HIBYTE(v56))) + 22719;
    uint64_t v50 = (v50 + v57);
    ++v49;
  }
  while (v49 != 32);
  *(void *)(v52 + 29160) = v50;
  return result;
}

void DD_Save_New_GLON_Eph(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  if (a1 >= 1)
  {
    int v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = (a1 + 10800) / 0x15180u;
    unsigned int v12 = (a1 + 10800) % 0x15180u;
    unsigned int v13 = ((22967 * (__int16)(v11 - 5839)) >> 25) + ((22967 * (__int16)(v11 - 5839)) >> 31);
    int v14 = v11 - 1461 * v13 - 5838;
    unsigned int v15 = v13 + 1;
    uint64_t v16 = a4 + 11928;
    do
    {
      if (*(unsigned char *)(*(void *)(a4 + 17168) + v9))
      {
        uint64_t v17 = *(void *)(a4 + 17200);
        if (!*(unsigned char *)(v17 + v9))
        {
          BOOL v18 = v8 == 0;
          if (v8) {
            int v19 = v7;
          }
          else {
            int v19 = v14;
          }
          if (!v8) {
            unsigned int v8 = v15;
          }
          if (v18) {
            unsigned int v10 = v12;
          }
          unsigned int v20 = (*(_DWORD *)(v16 + 56) >> 26) & 0xFFFFF83F | ((*(_DWORD *)(v16 + 52) & 0x1F) << 6);
          int v21 = *(_WORD *)(v16 + 26) & 0x7F;
          *(unsigned char *)(v17 + v9) = 1;
          if ((int)(v20 - v19) <= 730) {
            int v7 = v19;
          }
          else {
            int v7 = v19 + 1461;
          }
          *(_DWORD *)uint64_t v16 = a1
                         - ((v10 - 900 * v21 + 86400 * (v7 - v20)) & ~((int)(v10 - 900 * v21 + 86400 * (v7 - v20)) >> 31));
          *(_DWORD *)(v16 + 4) = 4;
          Core_Save_GLON_Eph((v9 + 1), 0, (long long *)v16);
        }
      }
      ++v9;
      v16 += 64;
    }
    while (v9 != 24);
  }
  uint64_t v22 = 0;
  int v89 = (char)((2 * (a3 / 1800)) | 1);
  uint64_t v23 = a5;
  uint64_t v24 = a5 + 5453;
  float64x2_t v91 = (float64x2_t)vdupq_n_s64(0x3FDF400000000000uLL);
  float64x2_t v90 = (float64x2_t)vdupq_n_s64(0x3F4F400000000000uLL);
  do
  {
    uint64_t v25 = (unsigned char *)(v23 + v22 + 5508);
    if (!*v25) {
      goto LABEL_62;
    }
    long long v96 = 0u;
    memset(v97, 0, 30);
    long long v95 = 0u;
    memset(&v99[1], 0, 46);
    v99[0] = 0u;
    uint64_t v26 = (_OWORD *)(v23 + 48 * v22 + 4780);
    long long v27 = *(_OWORD *)(v23 + 48 * v22 + 4796);
    *(_OWORD *)((char *)v99 + 12) = *v26;
    *(_OWORD *)((char *)&v99[1] + 12) = v27;
    *(_OWORD *)((char *)&v99[2] + 12) = *(_OWORD *)(v23 + 48 * v22 + 4812);
    GLON_EphBin2Int((uint64_t)v99, (uint64_t)&v95, *(int32x4_t *)((char *)&v99[2] + 12));
    uint64_t v28 = 0;
    uint64_t v29 = SBYTE12(v95);
    int v30 = BYTE12(v95);
    LOBYTE(v31) = *(unsigned char *)(v23 + 4 * v22 + 5452);
    do
    {
      if (*(unsigned __int8 *)(v24 + v28) <= v31) {
        int v31 = v31;
      }
      else {
        int v31 = *(unsigned __int8 *)(v24 + v28);
      }
      ++v28;
    }
    while (v28 != 3);
    uint64_t v32 = SBYTE12(v95) - 1;
    if (*v25 >= 2u)
    {
      int v33 = *(_DWORD *)(a4 + 4 * v22 + 17424);
LABEL_26:
      int v34 = (int *)(a4 + 4 * v22 + 17424);
      uint64_t v35 = (int)v32;
      int v36 = SBYTE12(v95);
      char v37 = BYTE12(v95);
      if (v33 != v29)
      {
LABEL_27:
        uint64_t v38 = SBYTE12(v95) - 1;
        int v39 = BYTE12(v95);
        EvLog_v("DD_Save_New_GLON_Eph:  Set Slot Num %d for FreqId %d  (Eph)", SBYTE12(v95), *(_DWORD *)(a4 + 4 * v35 + 17328));
        int v30 = v39;
        uint64_t v32 = v38;
        int v36 = SBYTE12(v95);
        char v37 = BYTE12(v95);
      }
      *(_DWORD *)(a4 + 4 * v35 + 17328) = v22 - 7;
      *int v34 = v29;
      goto LABEL_29;
    }
    if (*(unsigned char *)(*(void *)(a4 + 17176) + v32) || *(unsigned __int8 *)(*(void *)(a4 + 17168) + v32) | v31)
    {
      int v40 = (_DWORD *)(a4 + 4 * v22 + 17424);
      if (*v40 == 2139062143 || *(_DWORD *)(a4 + 4 * v32 + 17328) == 2139062143)
      {
        uint64_t v41 = v23 + 4 * v22;
        if (*(unsigned __int8 *)(v41 + 4727) > 1u || !*(unsigned char *)(v41 + 5455))
        {
          uint64_t v42 = a4 + 4 * v32;
          *(_DWORD *)(v42 + 17328) = v22 - 7;
          *int v40 = v29;
          *(_DWORD *)(a4 + 4 * v22 + 17480) = 2;
          EvLog_v("DD_Save_New_GLON_Eph:  Set Slot Num %d for FreqId %d  (Str 4)", v29, *(_DWORD *)(v42 + 17328));
        }
      }
      goto LABEL_61;
    }
    int v34 = (int *)(a4 + 4 * v22 + 17424);
    int v33 = *v34;
    uint64_t v35 = SBYTE12(v95) - 1;
    if (*v34 == 2139062143) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(a4 + 4 * v32 + 17328) == 2139062143) {
      goto LABEL_26;
    }
    int v36 = SBYTE12(v95);
    char v37 = BYTE12(v95);
LABEL_29:
    *(_DWORD *)(a4 + 4 * v22 + 17480) = 2;
    uint64_t v23 = a5;
    if ((v37 - 25) <= 0xE7u)
    {
      if (g_Logging_Cfg >= 5) {
        EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  Invalid Out-of-range GLON Slot Num %d");
      }
      goto LABEL_61;
    }
    if (a2 < 4 || (*(_DWORD *)(a4 + 8972) - 1) > 5 || v89 == BYTE13(v95))
    {
      uint64_t v43 = (v36 - 1);
      v44.i64[0] = SHIDWORD(v96);
      v44.i64[1] = v97[0];
      float64x2_t v103 = vmulq_f64(vcvtq_f64_s64(v44), v91);
      double v104 = (double)v97[1] * 0.48828125;
      double v45 = 0.0;
      uint64_t v46 = 2;
      do
      {
        double v45 = v45 + v103.f64[v46] * v103.f64[v46];
        unint64_t v47 = v46-- + 1;
      }
      while (v47 > 1);
      double v48 = sqrt(v45);
      if (v48 < 25200000.0 || v48 > 25800000.0)
      {
        double v85 = v48;
        uint64_t v84 = v37;
        int v59 = "DD_Validate_GLON_Eph:  Rejected:  SV Pos check, R %d  Mag_Pos %g";
      }
      else
      {
        v49.i64[0] = v97[2];
        v49.i64[1] = v97[3];
        float64x2_t v101 = vmulq_f64(vcvtq_f64_s64(v49), v90);
        double v102 = (double)v97[4] * 0.000953674316;
        double v50 = 0.0;
        uint64_t v51 = 2;
        do
        {
          double v50 = v50 + v101.f64[v51] * v101.f64[v51];
          unint64_t v52 = v51-- + 1;
        }
        while (v52 > 1);
        double v53 = sqrt(v50);
        if (v53 >= 2720.0 && v53 <= 4000.0)
        {
          v100[0] = (double)SLOBYTE(v97[5]) * 0.000000931322575;
          v100[1] = (double)SBYTE1(v97[5]) * 0.000000931322575;
          v100[2] = (double)SBYTE2(v97[5]) * 0.000000931322575;
          double v54 = 0.0;
          uint64_t v55 = 2;
          do
          {
            double v54 = v54 + v100[v55] * v100[v55];
            unint64_t v56 = v55-- + 1;
          }
          while (v56 > 1);
          uint64_t v87 = v43;
          double v57 = sqrt(v54);
          int v86 = v30;
          if (v57 <= 0.000009)
          {
            if ((unsigned __int16)v96 - 1462 > 0xFFFFFA4A)
            {
              if (*(unsigned char *)(*(void *)(a4 + 17168) + v43))
              {
                memset(v98, 0, 62);
                GLON_EphBin2Int(a4 + (v43 << 6) + 11928, (uint64_t)v98, (int32x4_t)0);
                int v61 = BYTE13(v95);
                int v62 = BYTE13(v98[0]);
                if (BYTE13(v95) != BYTE13(v98[0]) && g_Logging_Cfg >= 7) {
                  EvLog_v("DD_Validate_GLON_Eph:  New Eph SV %d  new Tb %d  existing Tb%d", SBYTE12(v95), BYTE13(v95), BYTE13(v98[0]));
                }
                if (v61 == v62)
                {
                  int v63 = *(unsigned __int16 *)(a4 + (v87 << 6) + 11988);
                  uint64_t v23 = a5;
                  if (v63 == 4095)
                  {
                    int v58 = 1;
                    goto LABEL_91;
                  }
                  if (g_Logging_Cfg >= 5) {
                    EvLog_v("DD_Validate_GLON_Eph:  (Adopted) Eph Binary difference with same tb SV %d tb %d checked 0x%x", SBYTE12(v95), BYTE13(v95), v63);
                  }
                  int v88 = 1;
                }
                else
                {
                  int v88 = 0;
                  uint64_t v23 = a5;
                }
              }
              else
              {
                int v88 = 0;
              }
              uint64_t v64 = a4 + (v32 << 6);
              long long v65 = *v26;
              long long v66 = v26[1];
              long long v67 = v26[2];
              BOOL v68 = (long long *)(v64 + 11928);
              *(_OWORD *)(v64 + 11972) = v67;
              *(_OWORD *)(v64 + 11956) = v66;
              *(_OWORD *)(v64 + 11940) = v65;
              *(_DWORD *)(v64 + 11928) = a1;
              *(_DWORD *)(v64 + 11932) = 4;
              if (*v25 <= 1u) {
                __int16 v69 = 0;
              }
              else {
                __int16 v69 = 4095;
              }
              *(_WORD *)(v64 + 11988) = v69;
              *(_DWORD *)(v64 + 11936) = v22 - 7;
              *(unsigned char *)(*(void *)(a4 + 17168) + v32) = 1;
              *(unsigned char *)(*(void *)(a4 + 17216) + v32) = 0;
              uint64_t v70 = *(void *)(a4 + 11912);
              int v71 = BYTE5(v96);
              if (*(unsigned char *)(v70 + v32)
                && (BOOL v72 = "DD_GLON_Alm_Set_Health_Frq:  Health H->U Eph:  Slot %d  FrqId %d ", BYTE5(v96))
                || !*(unsigned char *)(v70 + v32)
                && (BOOL v72 = "DD_GLON_Alm_Set_Health_Frq:  Health U->H Eph:  Slot %d  FrqId %d ", !BYTE5(v96)))
              {
                EvLog_v(v72, v29);
                int v71 = BYTE5(v96);
                uint64_t v70 = *(void *)(a4 + 11912);
              }
              *(unsigned char *)(v70 + v32) = v71 ^ 1;
              if (v71 != 1) {
                int v73 = 1;
              }
              else {
                int v73 = 2;
              }
              *(_DWORD *)(*(void *)(a4 + 11920) + 20 * (int)v32) = v73;
              int v58 = v88;
              if (a1 < 1) {
                goto LABEL_61;
              }
              *(unsigned char *)(*(void *)(a4 + 17200) + v32) = 1;
              Core_Save_GLON_Eph(v86, 0, v68);
              goto LABEL_91;
            }
            EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  Eph Nt check, R %d  Nt %d", v37, (unsigned __int16)v96);
            int v58 = 0;
          }
          else
          {
            EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  SV Acc check, R %d  Mag_Acc %g", v37, v57);
            int v58 = 0;
            *(unsigned char *)(*(void *)(a4 + 17224) + v87) = 1;
          }
LABEL_91:
          if (a1 >= 1)
          {
            if (v58)
            {
              uint64_t v74 = a4 + (v32 << 6);
              if (!*(_DWORD *)(v74 + 11928))
              {
                *(_DWORD *)(v74 + 11928) = a1;
                *(_DWORD *)(v74 + 11932) = 4;
                *(unsigned char *)(*(void *)(a4 + 17200) + v32) = 1;
                Core_Save_GLON_Eph(v86, 0, (long long *)(v74 + 11928));
              }
            }
          }
          goto LABEL_61;
        }
        double v85 = v53;
        uint64_t v84 = v37;
        int v59 = "DD_Validate_GLON_Eph:  Rejected:  SV Vel check, R %d  Vel_Mag %g";
      }
      unsigned int v60 = v43;
      EvCrt_v(v59, v84, *(void *)&v85);
      *(unsigned char *)(*(void *)(a4 + 17224) + v60) = 1;
    }
    else
    {
      EvCrt_v("DD_Validate_GLON_Eph:  FAIL:  Tb check, R %d  est %d  dec %d");
    }
LABEL_61:
    *uint64_t v25 = 0;
LABEL_62:
    ++v22;
    v24 += 4;
  }
  while (v22 != 14);
  uint64_t v75 = 0;
  LODWORD(v76) = 0;
  uint64_t v77 = *(void *)(a4 + 11912);
  uint64_t v78 = p_NV;
  uint64_t v79 = p_NV + 29160;
  uint64_t v80 = *(void *)(v77 + 16);
  *(_OWORD *)(p_NV + 29172) = *(_OWORD *)v77;
  *(void *)(v79 + 28) = v80;
  uint64_t v81 = v78 + 29168;
  __int16 v82 = -9871;
  do
  {
    int v83 = *(unsigned __int8 *)(v81 + v75) ^ HIBYTE(v82);
    __int16 v82 = -12691 * (v82 + (*(unsigned __int8 *)(v81 + v75) ^ HIBYTE(v82))) + 22719;
    uint64_t v76 = (v76 + v83);
    ++v75;
  }
  while (v75 != 32);
  *(void *)(v78 + 29160) = v76;
}

int *DD_Check_Age_GLON_Data(int *result, void *a2, uint64_t a3)
{
  if (*((unsigned char *)result + 80))
  {
    uint64_t v3 = result;
    if (result[19] >= 2)
    {
      uint64_t v5 = 0;
      long long v6 = (unsigned __int16 *)(a2 + 2032);
      int v7 = a2 + 2154;
      unsigned int v8 = a2 + 1498;
      uint64_t v9 = 29248;
      do
      {
        uint64_t v10 = a2[2146];
        if (*(unsigned char *)(v10 + v5))
        {
          unsigned int v11 = (*v8 >> 26) & 0xFFFFF83F | ((*(v8 - 1) & 0x1F) << 6);
          int v12 = (int)*((double *)v3 + 11) - 900 * (*((_WORD *)v8 - 15) & 0x7F);
          if (v11)
          {
            LODWORD(v13) = v12 + 86400 * (*((__int16 *)v3 + 42) - v11);
            if ((int)v13 > 63115200) {
              LODWORD(v13) = v13 - 126230400;
            }
            if ((int)v13 >= -63115200) {
              uint64_t v13 = v13;
            }
            else {
              uint64_t v13 = (v13 + 126230400);
            }
          }
          else
          {
            LODWORD(v13) = v12 + 86400;
            if (v12 >= -43200) {
              LODWORD(v13) = (int)*((double *)v3 + 11) - 900 * (*((_WORD *)v8 - 15) & 0x7F);
            }
            if ((int)v13 <= 43199) {
              uint64_t v13 = v13;
            }
            else {
              uint64_t v13 = (v13 - 86400);
            }
          }
          *((_DWORD *)v7 + v5) = v13;
          if ((int)v13 >= 0) {
            unsigned int v14 = v13;
          }
          else {
            unsigned int v14 = -(int)v13;
          }
          if (v14 >= 0x26AD)
          {
            unsigned int v15 = v8 - 14;
            *(unsigned char *)(v10 + v5) = 0;
            *(unsigned char *)(a2[2152] + v5) = 0;
            *(_OWORD *)((char *)v15 + 46) = 0u;
            v15[1] = 0u;
            v15[2] = 0u;
            *unsigned int v15 = 0u;
            *((_DWORD *)v7 + v5) = 0;
            *(unsigned char *)(a2[2145] + v5) = 1;
            *(unsigned char *)(a2[2153] + v5) = 0;
            if (g_Logging_Cfg >= 5) {
              uint64_t result = (int *)EvLog_nd("DD_Check_Age_GLON_Data:  Delete ", 2, a3, v5 + 1, v13);
            }
          }
        }
        uint64_t v16 = a2[2148];
        if (*(unsigned char *)(v16 + v5))
        {
          int v17 = *((__int16 *)v3 + 42) - *v6;
          int v18 = v17 + 1461;
          if (v17 >= -730) {
            int v18 = *((__int16 *)v3 + 42) - *v6;
          }
          if (v17 <= 729) {
            int v19 = v18;
          }
          else {
            int v19 = v17 - 1461;
          }
          if ((v19 - 183) <= 0xFFFFFF3A)
          {
            *(unsigned char *)(a2[2144] + v5) = 0;
            *(unsigned char *)(v16 + v5) = 0;
            *((_DWORD *)v6 + 6) = 0;
            *(_OWORD *)(v6 + 4) = 0u;
            *(_OWORD *)(v6 - 4) = 0u;
            *(unsigned char *)(a2[2152] + v5) = 0;
            *(unsigned char *)(a2[2153] + v5) = 0;
            uint64_t v20 = p_NV + v9;
            *(void *)(v20 - 8) = 0xFFFFFFFFLL;
            *(_OWORD *)uint64_t v20 = 0u;
            *(_OWORD *)(v20 + 16) = 0u;
            *(_DWORD *)(v20 + 32) = 0;
            if (v19 <= 182) {
              uint64_t result = (int *)EvLog_v("DD_Check_Age_GLON_Data:  Future Almanac deleted,  SV %d age %d");
            }
            else {
              uint64_t result = (int *)EvLog_v("DD_Check_Age_GLON_Data:  Old Almanac deleted,  SV %d age %d");
            }
          }
        }
        ++v5;
        v9 += 48;
        v6 += 18;
        v8 += 16;
      }
      while (v5 != 24);
    }
  }
  return result;
}

uint64_t DD_Check_GLON_Strings(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if ((int)result >= 3 && (*(_DWORD *)(a4 + 8972) - 1) <= 5)
  {
    if ((a2 % 30 + 1) >= 3) {
      char v4 = (int)((a2 % 30 + (((a2 % 30) & 0x80u) >> 7)) << 24) >> 25;
    }
    else {
      char v4 = 15;
    }
    int v5 = *(_DWORD *)(a3 + 6000);
    int v6 = a2 - v5;
    if (a2 < v5) {
      int v6 = a2 - v5 + 86400;
    }
    BOOL v7 = v6 > 24;
    BOOL v8 = v5 >= 1 && v7;
    if (a2 < 1) {
      BOOL v8 = 0;
    }
    if (v4 == 2 && result > 3 || v8)
    {
      *(_OWORD *)(a3 + 6000) = 0u;
      *(_OWORD *)(a3 + 6016) = 0u;
    }
    if (a2 >= 1 && (int v11 = *(_DWORD *)(a3 + 4720), v11 >= 1) && (v11 + 10) / 0x708u != (a2 + 10) / 0x708u
      || (a2 % 1800 >= 1771 ? (BOOL v12 = v4 == 10) : (BOOL v12 = 0), v12))
    {
      *(void *)(a3 + 5514) = 0;
      *(void *)(a3 + 5508) = 0;
      *(_OWORD *)(a3 + 4720) = 0u;
      *(_OWORD *)(a3 + 4736) = 0u;
      *(_OWORD *)(a3 + 4752) = 0u;
      *(_OWORD *)(a3 + 4764) = 0u;
    }
  }
  return result;
}

char *DD_LS_Delete_EphAlm_Str(char *result, uint64_t a2, uint64_t a3)
{
  if ((int)result >= 1 && *(unsigned char *)(a2 + 16) && *(int *)a2 >= 1)
  {
    int v4 = (int)result;
    double v5 = *(double *)(a2 + 40);
    double v6 = -0.5;
    if (v5 > 0.0) {
      double v6 = 0.5;
    }
    double v7 = v5 + v6;
    if (v7 <= 2147483650.0)
    {
      if (v7 >= -2147483650.0) {
        int v8 = (int)v7;
      }
      else {
        int v8 = 0x80000000;
      }
    }
    else
    {
      int v8 = 0x7FFFFFFF;
    }
    if ((604800 * *(__int16 *)(a2 + 32) + ~result + v8) <= 0xE0E)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = (_DWORD *)(a3 + 4 * v9);
        int v11 = v10[1381];
        if (v11 >= 1 && v11 <= v4)
        {
          v10[1181] = 0;
          *(unsigned char *)(a3 + v9 + 5508) = 0;
          v10[1381] = 0;
          uint64_t result = EvLog_v("DD_LS_Delete_EphAlm_Str:  Del Eph , Frq %2d ", (int)v9 + 1);
        }
        int v13 = v10[1600];
        if (v13 >= 1 && v13 <= v4)
        {
          unsigned int v15 = (void *)(a3 + 24 * v9);
          v15[755] = 0;
          v15[754] = 0;
          v15[756] = 0;
          *(_WORD *)(a3 + 2 * v9 + 6004) = 0;
          *(_WORD *)(a3 + 6397) = 0;
          v10[1600] = 0;
          uint64_t result = EvLog_v("DD_LS_Delete_EphAlm_Str:  Del Alm , Frq %2d ", ++v9);
        }
        else
        {
          ++v9;
        }
      }
      while (v9 != 14);
    }
  }
  return result;
}

uint64_t DD_Delete_Bad_GLON_Data(uint64_t result, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a2 + 1491;
  int v4 = a2 + 2166;
  uint64_t v5 = 30400;
  do
  {
    uint64_t v6 = a2[2145];
    if (*(unsigned char *)(v6 + v2))
    {
      unsigned int v7 = *v4 + 7;
      if (v7 <= 0xD)
      {
        uint64_t v8 = result + 4 * v7;
        *(_DWORD *)(v8 + 4724) = 0;
        uint64_t v9 = (_OWORD *)(result + 48 * v7 + 4780);
        *uint64_t v9 = 0uLL;
        v9[1] = 0uLL;
        char v9[2] = 0uLL;
        *(_DWORD *)(v8 + 5452) = 0;
        *(unsigned char *)(result + v7 + 5508) = 0;
        uint64_t v6 = a2[2145];
      }
      *(unsigned char *)(v6 + v2) = 0;
      *(unsigned char *)(a2[2143] + v2) = 0;
      *(unsigned char *)(a2[2146] + v2) = 0;
      *(_OWORD *)((char *)v3 + 46) = 0uLL;
      v3[1] = 0uLL;
      v3[2] = 0uLL;
      *uint64_t v3 = 0uLL;
      *(v4 - 24) = 0;
      *(unsigned char *)(a2[2153] + v2) = 0;
      *(unsigned char *)(a2[2150] + v2) = 1;
      uint64_t v10 = (_OWORD *)(p_NV + v5);
      *((void *)v10 - 1) = 0xFFFFFFFFLL;
      *uint64_t v10 = 0uLL;
      v10[1] = 0uLL;
      v10[2] = 0uLL;
      *(_OWORD *)((char *)v10 + 46) = 0uLL;
    }
    ++v2;
    v5 += 72;
    v3 += 4;
    ++v4;
  }
  while (v2 != 24);
  return result;
}

uint64_t DD_Delete_Inhib_GLON_Data(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  int v4 = a3 + 2031;
  uint64_t v5 = a3 + 1683;
  uint64_t v6 = a3 + 1491;
  unsigned int v7 = a3 + 2166;
  uint64_t v8 = 29248;
  uint64_t v9 = 30400;
  do
  {
    if (*(unsigned char *)(result + v3))
    {
      uint64_t v10 = (*v7 + 7);
      if (v10 <= 0xD && v3 + 1 == *((_DWORD *)a3 + v10 + 4356))
      {
        uint64_t v11 = a2 + 4 * v10;
        *(_DWORD *)(v11 + 4724) = 0;
        BOOL v12 = (_OWORD *)(a2 + 48 * v10 + 4780);
        _OWORD *v12 = 0uLL;
        v12[1] = 0uLL;
        double v12[2] = 0uLL;
        *(_DWORD *)(v11 + 5452) = 0;
        *(unsigned char *)(a2 + v10 + 5508) = 0;
      }
      *(unsigned char *)(a3[2145] + v3) = 0;
      *(unsigned char *)(a3[2143] + v3) = 0;
      *(unsigned char *)(a3[2146] + v3) = 0;
      *(_OWORD *)((char *)v6 + 46) = 0uLL;
      v6[1] = 0uLL;
      v6[2] = 0uLL;
      *uint64_t v6 = 0uLL;
      *(unsigned char *)(a3[2147] + v3) = 0;
      *(v7 - 24) = 0;
      *(_DWORD *)((char *)v5 + 111) = 0;
      *((_OWORD *)v5 + 5) = 0uLL;
      *((_OWORD *)v5 + 6) = 0uLL;
      *((_OWORD *)v5 + 3) = 0uLL;
      *((_OWORD *)v5 + 4) = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *(_OWORD *)uint64_t v5 = 0uLL;
      *(unsigned char *)(a3[2153] + v3) = 0;
      *(unsigned char *)(a3[2150] + v3) = 1;
      uint64_t v13 = p_NV;
      unsigned int v14 = (_OWORD *)(p_NV + v9);
      *unsigned int v14 = 0uLL;
      v14[1] = 0uLL;
      v14[2] = 0uLL;
      *(_OWORD *)((char *)v14 + 46) = 0uLL;
      *(unsigned char *)(a3[2144] + v3) = 0;
      *((void *)v14 - 1) = 0xFFFFFFFFLL;
      *(unsigned char *)(a3[2148] + v3) = 0;
      *((_DWORD *)v4 + 8) = 0;
      *(_OWORD *)int v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      uint64_t v15 = v13 + v8;
      *(void *)(v15 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v15 = 0uLL;
      *(_OWORD *)(v15 + 16) = 0uLL;
      *(_DWORD *)(v15 + 32) = 0;
    }
    ++v3;
    v8 += 48;
    v9 += 72;
    int v4 = (void *)((char *)v4 + 36);
    uint64_t v5 = (void *)((char *)v5 + 116);
    v6 += 4;
    ++v7;
  }
  while (v3 != 24);
  return result;
}

void *DD_Submit_WeekNum(void *result, __int16 a2, uint64_t a3, double *a4, double a5)
{
  if (!*((unsigned char *)a4 + 16))
  {
    int v7 = (int)result;
    if (*(_DWORD *)a4)
    {
      uint64_t v8 = (int)a5;
      double v9 = a4[5];
      int v10 = v8 - (int)v9;
      int v11 = v10 + 604800;
      if (v10 <= -302401) {
        __int16 v12 = a3 - 1;
      }
      else {
        __int16 v12 = a3;
      }
      if (v10 > -302401) {
        int v11 = v8 - (int)v9;
      }
      if (v10 >= 302400) {
        __int16 v13 = a3 + 1;
      }
      else {
        __int16 v13 = v12;
      }
      if (v10 >= 302400) {
        int v14 = v10 - 604800;
      }
      else {
        int v14 = v11;
      }
      if ((v14 + 129599) >= 0x2A2FF)
      {
        uint64_t v15 = ((v14 + 43200) / 86400);
        double v16 = v9 + (double)(86400 * (int)v15);
        a4[5] = v16;
        uint64_t result = EvLog_nd("DD_Submit_WeekNum(R): Day number set ", 3, a3, v15, (int)v16, v8);
      }
      __int16 v17 = v13 + (a2 << 10);
    }
    else
    {
      a4[5] = a5;
      int v18 = *((_DWORD *)a4 + 19);
      if (!v18 || (v18 >= 3 ? (int v19 = 3) : (int v19 = *((_DWORD *)a4 + 19)), *(_DWORD *)a4 = v19, v18 <= 2))
      {
        if (a5 < 86370.0 || a5 >= 518370.0)
        {
          __int16 v17 = *((_WORD *)a4 + 16);
LABEL_26:
          if (v17) {
            return EvLog_nd("DD_Submit_WeekNum(R): GPS Week No set from Glon SV", 4, a3, v7, v17, (int)a4[5], *(unsigned int *)a4);
          }
          return result;
        }
      }
      __int16 v17 = a3 + (a2 << 10);
    }
    *((_WORD *)a4 + 16) = v17;
    *((unsigned char *)a4 + 16) = 1;
    *((_DWORD *)a4 + 5) = *((_DWORD *)a4 + 6);
    goto LABEL_26;
  }
  return result;
}

uint64_t Inc_CA_Chips(uint64_t result, int *a2, int *a3)
{
  int v3 = *a2 + result;
  for (*a2 = v3; *a2 > 1534499; int v3 = *a2)
  {
    *a2 = v3 - 1534500;
    if (*a3 <= 403198) {
      int v4 = 1;
    }
    else {
      int v4 = -403199;
    }
    *a3 += v4;
  }
  if (v3 < 0)
  {
    do
    {
      *a2 = v3 + 1534500;
      if (*a3 < 1) {
        int v5 = 403199;
      }
      else {
        int v5 = -1;
      }
      *a3 += v5;
      int v3 = *a2;
    }
    while (*a2 < 0);
  }
  return result;
}

uint64_t Nav_Kalman_Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, uint64_t a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v346 = v13;
  uint64_t v350 = v14;
  uint64_t v352 = v15;
  long long v356 = v16;
  uint64_t v353 = v17;
  uint64_t v331 = v18;
  uint64_t v20 = v19;
  uint64_t v21 = v12;
  uint64_t v405 = *MEMORY[0x263EF8340];
  int v22 = *(unsigned __int8 *)(v12 + 136);
  uint64_t v339 = v19 + 19892;
  long long v325 = v19 + 15856;
  uint64_t v23 = (uint64_t)(v19 + 15508);
  uint64_t v354 = (uint64_t)(v19 + 15434);
  uint64_t v342 = (uint64_t)(v19 + 15206);
  int v341 = v19 + 15132;
  uint64_t v343 = v19 + 15062;
  *(_DWORD *)(v12 + 177) = 0;
  uint64_t v322 = v12 + 177;
  uint64_t v348 = (unsigned char *)(v12 + 136);
  *(_WORD *)(v12 + 181) = 0;
  if (v22)
  {
    *a11 = 0;
  }
  else if (*a11)
  {
    *a11 = 0;
    *(unsigned char *)(v12 + 136) = 1;
    *(_DWORD *)(v12 + 140) = 77;
  }
  long long v403 = 0u;
  memset(v404, 0, 28);
  long long v401 = 0u;
  long long v402 = 0u;
  long long v399 = 0u;
  long long v400 = 0u;
  long long v397 = 0u;
  long long v398 = 0u;
  long long v395 = 0u;
  long long v396 = 0u;
  long long v394 = 0u;
  bzero(v393, 0x50BuLL);
  memset(&v392[152], 0, 52);
  memset(&v392[116], 0, 135);
  memset(&v392[72], 0, 171);
  memset(v392, 0, 273);
  bzero(v391, 0x120BuLL);
  bzero(v390, 0x3A38uLL);
  bzero(v389, 0x3A38uLL);
  bzero(v388, 0x5B68uLL);
  memset(v387, 0, sizeof(v387));
  LOWORD(v386) = 0;
  BYTE2(v386) = 0;
  memset(v385, 0, 56);
  LOWORD(v384) = 0;
  BYTE2(v384) = 0;
  memset(v383, 0, 56);
  BYTE2(v382) = 0;
  LOWORD(v382) = 0;
  memset(v381, 0, 56);
  BYTE2(v380) = 0;
  LOWORD(v380) = 0;
  memset(v379, 0, sizeof(v379));
  BYTE2(v378) = 0;
  LOWORD(v378) = 0;
  memset(v377, 0, 56);
  BYTE2(v376) = 0;
  LOWORD(v376) = 0;
  memset(&v375[15], 0, 104);
  memset((char *)&v375[14] + 4, 0, 12);
  memset(&v375[10], 0, 53);
  memset((char *)&v375[9] + 4, 0, 12);
  memset(&v375[5], 0, 53);
  memset((char *)&v375[4] + 4, 0, 12);
  memset(v375, 0, 61);
  BYTE2(v374) = 0;
  LOWORD(v374) = 0;
  memset(v373, 0, 56);
  BYTE2(v372) = 0;
  LOWORD(v372) = 0;
  memset(&v371[7], 0, 56);
  memset((char *)&v371[6] + 4, 0, 12);
  memset(&v371[2], 0, 61);
  v371[0] = 0uLL;
  *(void *)((char *)&v371[1] + 5) = 0;
  *(void *)&v371[1] = 0;
  memset(v370, 0, 36);
  BYTE2(v369) = 0;
  LOWORD(v369) = 0;
  memset(&v368[39], 0, 112);
  memset((char *)&v368[38] + 4, 0, 12);
  memset(&v368[31], 0, 102);
  memset(v368, 0, 495);
  memset(&v367[2], 0, 229);
  memset(v360, 0, sizeof(v360));
  *(_DWORD *)((char *)__src + 3) = 0;
  LODWORD(__src[0]) = 0;
  memset(&v392[117], 0, 131);
  *((void *)&v386 + 1) = 0;
  *(void *)((char *)&v386 + 3) = 0;
  *((void *)&v384 + 1) = 0;
  *(void *)((char *)&v384 + 3) = 0;
  *((void *)&v382 + 1) = 0;
  *(void *)((char *)&v382 + 3) = 0;
  *((void *)&v380 + 1) = 0;
  *(void *)((char *)&v380 + 3) = 0;
  *((void *)&v378 + 1) = 0;
  *(void *)((char *)&v378 + 3) = 0;
  *((void *)&v376 + 1) = 0;
  *(void *)((char *)&v376 + 3) = 0;
  *((void *)&v374 + 1) = 0;
  *(void *)((char *)&v374 + 3) = 0;
  *((void *)&v372 + 1) = 0;
  *(void *)((char *)&v372 + 3) = 0;
  *((void *)&v369 + 1) = 0;
  *(void *)((char *)&v369 + 3) = 0;
  memset(v367, 0, 25);
  long long v366 = 0u;
  long long v365 = 0u;
  long long v364 = 0u;
  long long v394 = 0uLL;
  DWORD2(v395) = 0;
  *(void *)&long long v395 = 0;
  long long v396 = 0u;
  long long v397 = 0u;
  long long v398 = 0u;
  long long v399 = 0u;
  long long v400 = 0u;
  long long v401 = 0u;
  long long v402 = 0u;
  long long v403 = 0u;
  memset(v404, 0, 25);
  bzero(&v393[2], 0x509uLL);
  memset((char *)&v392[153] + 3, 0, 45);
  *(_OWORD *)((char *)&v392[72] + 2) = 0u;
  *(_OWORD *)((char *)&v392[76] + 2) = 0u;
  *(_OWORD *)((char *)&v392[80] + 2) = 0u;
  *(_OWORD *)((char *)&v392[84] + 2) = 0u;
  *(_OWORD *)((char *)&v392[88] + 2) = 0u;
  *(_OWORD *)((char *)&v392[92] + 2) = 0u;
  *(_OWORD *)((char *)&v392[96] + 2) = 0u;
  *(_OWORD *)((char *)&v392[100] + 2) = 0u;
  *(_OWORD *)((char *)&v392[104] + 2) = 0u;
  *(_OWORD *)((char *)&v392[108] + 2) = 0u;
  *(_OWORD *)((char *)&v392[110] + 3) = 0u;
  *(_OWORD *)((char *)&v392[64] + 1) = 0u;
  *(_OWORD *)((char *)v392 + 3) = 0u;
  *(_OWORD *)((char *)&v392[4] + 3) = 0u;
  *(_OWORD *)((char *)&v392[8] + 3) = 0u;
  *(_OWORD *)((char *)&v392[12] + 3) = 0u;
  *(_OWORD *)((char *)&v392[16] + 3) = 0u;
  *(_OWORD *)((char *)&v392[20] + 3) = 0u;
  *(_OWORD *)((char *)&v392[24] + 3) = 0u;
  *(_OWORD *)((char *)&v392[28] + 3) = 0u;
  *(_OWORD *)((char *)&v392[32] + 3) = 0u;
  *(_OWORD *)((char *)&v392[36] + 3) = 0u;
  *(_OWORD *)((char *)&v392[40] + 3) = 0u;
  *(_OWORD *)((char *)&v392[44] + 3) = 0u;
  *(_OWORD *)((char *)&v392[48] + 3) = 0u;
  *(_OWORD *)((char *)&v392[52] + 3) = 0u;
  *(_OWORD *)((char *)&v392[56] + 3) = 0u;
  *(_OWORD *)((char *)&v392[60] + 3) = 0u;
  bzero(&v391[6], 0x1205uLL);
  bzero((char *)v390 + 3, 0x3A35uLL);
  bzero((char *)v389 + 3, 0x3A35uLL);
  bzero((char *)v388 + 3, 0x5B65uLL);
  memset(&v387[1], 0, 19);
  memset((char *)v385 + 3, 0, 48);
  *(void *)&v385[3] = 0;
  memset((char *)v383 + 3, 0, 48);
  *(void *)&v383[3] = 0;
  memset((char *)v381 + 3, 0, 48);
  *(void *)&v381[3] = 0;
  memset((char *)v379 + 3, 0, 96);
  v379[6] = 0u;
  memset((char *)v377 + 3, 0, 53);
  memset((char *)&v375[18] + 3, 0, 48);
  *(void *)&v375[21] = 0;
  memset((char *)&v375[16] + 15, 0, 17);
  memset((char *)&v375[15] + 7, 0, 17);
  memset((char *)&v375[10] + 4, 0, 49);
  memset((char *)&v375[5] + 4, 0, 49);
  memset((char *)v375 + 4, 0, 57);
  memset((char *)v373 + 3, 0, 53);
  memset((char *)&v371[7] + 3, 0, 53);
  memset((char *)&v371[2] + 4, 0, 57);
  *(_OWORD *)((char *)v371 + 12) = 0uLL;
  *(void *)((char *)v371 + 4) = 0;
  BYTE12(v371[1]) = 0;
  *(_OWORD *)((char *)v370 + 7) = 0uLL;
  *(void *)((char *)&v370[1] + 12) = 0;
  *(void *)((char *)&v370[1] + 7) = 0;
  memset((char *)&v368[39] + 3, 0, 109);
  memset((char *)&v368[31] + 4, 0, 98);
  *(_OWORD *)((char *)&v368[29] + 15) = 0u;
  *(_OWORD *)((char *)&v368[29] + 5) = 0u;
  bzero(v363, 0x314uLL);
  __int16 v362 = 0;
  long long v361 = 0uLL;
  bzero((char *)__src + 7, 0x3E51uLL);
  long long v24 = v403;
  *((_OWORD *)v20 + 8) = v402;
  *((_OWORD *)v20 + 9) = v24;
  *((_OWORD *)v20 + 10) = v404[0];
  *(_OWORD *)(v20 + 43) = *(_OWORD *)((char *)v404 + 12);
  long long v25 = v399;
  *((_OWORD *)v20 + 4) = v398;
  *((_OWORD *)v20 + 5) = v25;
  long long v26 = v401;
  *((_OWORD *)v20 + 6) = v400;
  *((_OWORD *)v20 + 7) = v26;
  long long v27 = v395;
  *(_OWORD *)uint64_t v20 = v394;
  *((_OWORD *)v20 + 1) = v27;
  long long v28 = v397;
  *((_OWORD *)v20 + 2) = v396;
  *((_OWORD *)v20 + 3) = v28;
  *((_WORD *)v20 + 98) = 0;
  *(void *)(v20 + 47) = 0;
  memcpy((char *)v20 + 198, v393, 0x50BuLL);
  long long v29 = *(_OWORD *)&v392[156];
  *(_OWORD *)((char *)v20 + 1489) = *(_OWORD *)&v392[152];
  *(_OWORD *)((char *)v20 + 1505) = v29;
  *(_OWORD *)((char *)v20 + 1521) = *(_OWORD *)&v392[160];
  *(unsigned int *)((char *)v20 + 1537) = v392[164];
  *((unsigned char *)v20 + 1541) = 0;
  *((_WORD *)v20 + 771) = 0;
  v20[386] = 0;
  long long v30 = *(_OWORD *)&v392[144];
  *(_OWORD *)(v20 + 411) = *(_OWORD *)&v392[140];
  *(_OWORD *)(v20 + 415) = v30;
  *(void *)((char *)v20 + 1675) = *(void *)((char *)&v392[147] + 3);
  long long v31 = *(_OWORD *)&v392[128];
  *(_OWORD *)(v20 + 395) = *(_OWORD *)&v392[124];
  *(_OWORD *)(v20 + 399) = v31;
  long long v32 = *(_OWORD *)&v392[136];
  *(_OWORD *)(v20 + 403) = *(_OWORD *)&v392[132];
  *(_OWORD *)(v20 + 407) = v32;
  long long v33 = *(_OWORD *)&v392[120];
  *(_OWORD *)(v20 + 387) = *(_OWORD *)&v392[116];
  *(_OWORD *)(v20 + 391) = v33;
  *(unsigned int *)((char *)v20 + 1690) = 0;
  *(void *)((char *)v20 + 1683) = 0;
  long long v34 = *(_OWORD *)&v392[108];
  *(_OWORD *)((char *)v20 + 1822) = *(_OWORD *)&v392[104];
  *(_OWORD *)((char *)v20 + 1838) = v34;
  *(_OWORD *)((char *)v20 + 1849) = *(_OWORD *)((char *)&v392[110] + 3);
  long long v35 = *(_OWORD *)&v392[92];
  *(_OWORD *)((char *)v20 + 1758) = *(_OWORD *)&v392[88];
  *(_OWORD *)((char *)v20 + 1774) = v35;
  long long v36 = *(_OWORD *)&v392[100];
  *(_OWORD *)((char *)v20 + 1790) = *(_OWORD *)&v392[96];
  *(_OWORD *)((char *)v20 + 1806) = v36;
  long long v37 = *(_OWORD *)&v392[76];
  *(_OWORD *)((char *)v20 + 1694) = *(_OWORD *)&v392[72];
  *(_OWORD *)((char *)v20 + 1710) = v37;
  long long v38 = *(_OWORD *)&v392[84];
  *(_OWORD *)((char *)v20 + 1726) = *(_OWORD *)&v392[80];
  *(_OWORD *)((char *)v20 + 1742) = v38;
  memcpy((char *)v20 + 1865, v392, 0x111uLL);
  memcpy((char *)v20 + 2138, v391, 0x120BuLL);
  memcpy((char *)v20 + 6757, v390, 0x3A38uLL);
  memcpy((char *)v20 + 21661, v389, 0x3A38uLL);
  memcpy((char *)v20 + 36565, v388, 0x5B68uLL);
  *(_OWORD *)((char *)v20 + 59965) = *(_OWORD *)v387;
  *(unsigned int *)((char *)v20 + 59981) = *(_DWORD *)&v387[16];
  *(_OWORD *)((char *)v20 + 59985) = v386;
  long long v39 = v385[1];
  *(_OWORD *)((char *)v20 + 60001) = v385[0];
  *(_OWORD *)((char *)v20 + 60017) = v39;
  *(_OWORD *)((char *)v20 + 60033) = v385[2];
  *(void *)((char *)v20 + 60049) = *(void *)&v385[3];
  *(_OWORD *)((char *)v20 + 60057) = v384;
  long long v40 = v383[0];
  long long v41 = v383[1];
  long long v42 = v383[2];
  *(void *)((char *)v20 + 60121) = *(void *)&v383[3];
  *(_OWORD *)((char *)v20 + 60089) = v41;
  *(_OWORD *)((char *)v20 + 60105) = v42;
  *(_OWORD *)((char *)v20 + 60129) = v382;
  *(_OWORD *)((char *)v20 + 60073) = v40;
  *(void *)((char *)v20 + 60193) = *(void *)&v381[3];
  long long v43 = v381[2];
  long long v44 = v381[0];
  *(_OWORD *)((char *)v20 + 60161) = v381[1];
  *(_OWORD *)((char *)v20 + 60177) = v43;
  *(_OWORD *)((char *)v20 + 60145) = v44;
  *(_OWORD *)((char *)v20 + 60201) = v380;
  long long v45 = v379[1];
  *(_OWORD *)((char *)v20 + 60217) = v379[0];
  *(_OWORD *)((char *)v20 + 60233) = v45;
  long long v46 = v379[2];
  long long v47 = v379[3];
  long long v48 = v379[6];
  long long v49 = v379[4];
  *(_OWORD *)((char *)v20 + 60297) = v379[5];
  *(_OWORD *)((char *)v20 + 60313) = v48;
  *(_OWORD *)((char *)v20 + 60265) = v47;
  *(_OWORD *)((char *)v20 + 60281) = v49;
  *(_OWORD *)((char *)v20 + 60249) = v46;
  *(_OWORD *)((char *)v20 + 60329) = v378;
  long long v50 = v377[0];
  long long v51 = v377[1];
  long long v52 = v377[2];
  *(void *)((char *)v20 + 60393) = *(void *)&v377[3];
  *(_OWORD *)((char *)v20 + 60361) = v51;
  *(_OWORD *)((char *)v20 + 60377) = v52;
  *(_OWORD *)((char *)v20 + 60401) = v376;
  *(_OWORD *)((char *)v20 + 60345) = v50;
  long long v53 = v375[18];
  long long v54 = v375[19];
  long long v55 = v375[20];
  *(void *)((char *)v20 + 60465) = *(void *)&v375[21];
  *(_OWORD *)((char *)v20 + 60433) = v54;
  *(_OWORD *)((char *)v20 + 60449) = v55;
  *(_OWORD *)((char *)v20 + 60417) = v53;
  *((unsigned char *)v20 + 60475) = 0;
  *(_WORD *)((char *)v20 + 60473) = 0;
  v343[57] = 0;
  *((unsigned char *)v343 + 232) = 0;
  long long v56 = *(_OWORD *)((char *)&v375[16] + 8);
  *(void *)((char *)v20 + 60497) = *((void *)&v375[17] + 1);
  *(_OWORD *)((char *)v20 + 60481) = v56;
  long long v57 = v375[15];
  *(void *)((char *)v20 + 60521) = *(void *)&v375[16];
  *(_OWORD *)((char *)v20 + 60505) = v57;
  uint64_t v58 = *(void *)((char *)&v375[14] + 4);
  *(unsigned int *)((char *)v20 + 60537) = HIDWORD(v375[14]);
  *(void *)((char *)v20 + 60529) = v58;
  *((unsigned char *)v20 + 60543) = 0;
  *(_WORD *)((char *)v20 + 60541) = 0;
  v341[4] = 0;
  long long v59 = v375[10];
  long long v60 = v375[11];
  long long v61 = v375[12];
  *(void *)((char *)v20 + 60593) = *(void *)((char *)&v375[12] + 13);
  *(_OWORD *)(v20 + 15141) = v60;
  *(_OWORD *)(v20 + 15145) = v61;
  *(_OWORD *)(v20 + 15137) = v59;
  uint64_t v62 = *(void *)((char *)&v375[9] + 4);
  *(unsigned int *)((char *)v20 + 60609) = HIDWORD(v375[9]);
  *(void *)((char *)v20 + 60601) = v62;
  *((unsigned char *)v20 + 60615) = 0;
  *(_WORD *)((char *)v20 + 60613) = 0;
  v341[22] = 0;
  long long v63 = v375[5];
  long long v64 = v375[6];
  long long v65 = v375[7];
  *(void *)((char *)v20 + 60665) = *(void *)((char *)&v375[7] + 13);
  *(_OWORD *)(v20 + 15159) = v64;
  *(_OWORD *)(v20 + 15163) = v65;
  *(_OWORD *)(v20 + 15155) = v63;
  uint64_t v66 = *(void *)((char *)&v375[4] + 4);
  *(unsigned int *)((char *)v20 + 60681) = HIDWORD(v375[4]);
  *(void *)((char *)v20 + 60673) = v66;
  *((unsigned char *)v20 + 60687) = 0;
  *(_WORD *)((char *)v20 + 60685) = 0;
  v341[40] = 0;
  long long v67 = v375[0];
  long long v68 = v375[1];
  long long v69 = v375[2];
  *(_OWORD *)((char *)v20 + 60737) = *(_OWORD *)((char *)&v375[2] + 13);
  *(_OWORD *)(v20 + 15177) = v68;
  *(_OWORD *)(v20 + 15181) = v69;
  *(_OWORD *)(v20 + 15173) = v67;
  *(_OWORD *)((char *)v20 + 60753) = v374;
  long long v70 = v373[0];
  long long v71 = v373[1];
  long long v72 = v373[2];
  *(void *)((char *)v20 + 60817) = *(void *)&v373[3];
  *(_OWORD *)((char *)v20 + 60785) = v71;
  *(_OWORD *)((char *)v20 + 60801) = v72;
  *(_OWORD *)((char *)v20 + 60769) = v70;
  *(_OWORD *)((char *)v20 + 60825) = v372;
  long long v73 = v371[7];
  long long v74 = v371[8];
  long long v75 = v371[9];
  *(void *)((char *)v20 + 60889) = *(void *)&v371[10];
  *(_OWORD *)((char *)v20 + 60857) = v74;
  *(_OWORD *)((char *)v20 + 60873) = v75;
  *(_OWORD *)((char *)v20 + 60841) = v73;
  uint64_t v76 = *(void *)((char *)&v371[6] + 4);
  *(unsigned int *)((char *)v20 + 60905) = HIDWORD(v371[6]);
  *(void *)((char *)v20 + 60897) = v76;
  *((unsigned char *)v20 + 60911) = 0;
  *(_WORD *)((char *)v20 + 60909) = 0;
  *(_DWORD *)(v342 + 88) = 0;
  long long v77 = v371[2];
  long long v78 = v371[3];
  long long v79 = v371[4];
  *(_OWORD *)((char *)v20 + 60961) = *(_OWORD *)((char *)&v371[4] + 13);
  *(_OWORD *)(v20 + 15233) = v78;
  *(_OWORD *)(v20 + 15237) = v79;
  *(_OWORD *)(v20 + 15229) = v77;
  v20[15245] = 0;
  *(unsigned int *)((char *)v20 + 60977) = 0;
  *(_DWORD *)(v342 + 160) = 0;
  long long v80 = v371[0];
  *(_OWORD *)((char *)v20 + 61001) = *(_OWORD *)((char *)v371 + 13);
  *(_OWORD *)(v20 + 15247) = v80;
  long long v81 = v370[0];
  long long v82 = v370[1];
  *(unsigned int *)((char *)v20 + 61049) = v370[2];
  *(_OWORD *)((char *)v20 + 61017) = v81;
  *(_OWORD *)((char *)v20 + 61033) = v82;
  *((unsigned char *)v20 + 61055) = 0;
  *(_WORD *)((char *)v20 + 61053) = 0;
  *(unsigned char *)(v342 + 232) = 0;
  *(_OWORD *)((char *)v20 + 61057) = v369;
  long long v83 = v368[40];
  *(_OWORD *)((char *)v20 + 61073) = v368[39];
  *(_OWORD *)((char *)v20 + 61089) = v83;
  long long v84 = v368[41];
  long long v85 = v368[42];
  long long v86 = v368[45];
  long long v87 = v368[43];
  *(_OWORD *)((char *)v20 + 61153) = v368[44];
  *(_OWORD *)((char *)v20 + 61169) = v86;
  *(_OWORD *)((char *)v20 + 61121) = v85;
  *(_OWORD *)((char *)v20 + 61137) = v87;
  *(_OWORD *)((char *)v20 + 61105) = v84;
  uint64_t v88 = *(void *)((char *)&v368[38] + 4);
  *(unsigned int *)((char *)v20 + 61193) = HIDWORD(v368[38]);
  *(void *)((char *)v20 + 61185) = v88;
  *((unsigned char *)v20 + 61199) = 0;
  *(_WORD *)((char *)v20 + 61197) = 0;
  *(_DWORD *)(v342 + 376) = 0;
  long long v89 = v368[32];
  *(_OWORD *)(v20 + 15301) = v368[31];
  *(_OWORD *)(v20 + 15305) = v89;
  long long v90 = v368[33];
  long long v91 = v368[34];
  long long v92 = v368[35];
  long long v93 = v368[36];
  *(void *)((char *)v20 + 61298) = *(void *)((char *)&v368[36] + 14);
  *(_OWORD *)(v20 + 15317) = v92;
  *(_OWORD *)(v20 + 15321) = v93;
  *(_OWORD *)(v20 + 15309) = v90;
  *(_OWORD *)(v20 + 15313) = v91;
  *((void *)v20 + 7664) = 0;
  *(void *)((char *)v20 + 61306) = 0;
  *(unsigned int *)((char *)v20 + 61335) = 0;
  *(_OWORD *)(v20 + 15330) = 0u;
  memcpy((char *)v20 + 61339, v368, 0x1EFuLL);
  long long v94 = v367[15];
  *(_OWORD *)((char *)v20 + 62026) = v367[14];
  *(_OWORD *)((char *)v20 + 62042) = v94;
  *(void *)((char *)v20 + 62055) = *(void *)((char *)&v367[15] + 13);
  long long v95 = v367[11];
  *(_OWORD *)((char *)v20 + 61962) = v367[10];
  *(_OWORD *)((char *)v20 + 61978) = v95;
  long long v96 = v367[13];
  *(_OWORD *)((char *)v20 + 61994) = v367[12];
  *(_OWORD *)((char *)v20 + 62010) = v96;
  long long v97 = v367[7];
  *(_OWORD *)((char *)v20 + 61898) = v367[6];
  *(_OWORD *)((char *)v20 + 61914) = v97;
  long long v98 = v367[9];
  *(_OWORD *)((char *)v20 + 61930) = v367[8];
  *(_OWORD *)((char *)v20 + 61946) = v98;
  long long v99 = v367[3];
  *(_OWORD *)((char *)v20 + 61834) = v367[2];
  *(_OWORD *)((char *)v20 + 61850) = v99;
  long long v100 = v367[5];
  *(_OWORD *)((char *)v20 + 61866) = v367[4];
  *(_OWORD *)((char *)v20 + 61882) = v100;
  *(unsigned char *)(v23 + 31) = 0;
  long long v101 = v367[0];
  *(_OWORD *)(v23 + 64) = v366;
  *(_OWORD *)(v23 + 80) = v101;
  *(_OWORD *)(v23 + 89) = *(_OWORD *)((char *)v367 + 9);
  long long v102 = v365;
  *(_OWORD *)(v23 + 32) = v364;
  *(_OWORD *)(v23 + 48) = v102;
  *(_WORD *)((char *)v20 + 62137) = 0;
  *((unsigned char *)v20 + 62139) = 0;
  *(unsigned char *)(v23 + 108) = 0;
  *((unsigned char *)v20 + 62143) = 0;
  *(_WORD *)((char *)v20 + 62141) = 0;
  *(_DWORD *)(v23 + 112) = 0;
  *(unsigned char *)(v23 + 116) = 0;
  *(_WORD *)((char *)v20 + 62149) = 0;
  *((unsigned char *)v20 + 62151) = 0;
  *(_DWORD *)(v23 + 120) = 0;
  *(unsigned char *)(v23 + 124) = 0;
  *(_WORD *)((char *)v20 + 62157) = 0;
  *((unsigned char *)v20 + 62159) = 0;
  *(_DWORD *)(v23 + 128) = 0;
  *(unsigned char *)(v23 + 132) = 0;
  *((unsigned char *)v20 + 62167) = 0;
  *(_WORD *)((char *)v20 + 62165) = 0;
  *(_DWORD *)(v23 + 136) = 0;
  *(unsigned char *)(v23 + 140) = 0;
  *((unsigned char *)v20 + 62175) = 0;
  *(_WORD *)((char *)v20 + 62173) = 0;
  *(_DWORD *)(v23 + 144) = 0;
  *(unsigned char *)(v23 + 148) = 0;
  *((unsigned char *)v20 + 62183) = 0;
  *(_WORD *)((char *)v20 + 62181) = 0;
  *(_DWORD *)(v23 + 152) = 0;
  *(unsigned char *)(v23 + 156) = 0;
  *((unsigned char *)v20 + 62191) = 0;
  *(_WORD *)((char *)v20 + 62189) = 0;
  *(_DWORD *)(v23 + 160) = 0;
  *(unsigned char *)(v23 + 164) = 0;
  *((unsigned char *)v20 + 62199) = 0;
  *(_WORD *)((char *)v20 + 62197) = 0;
  *(_DWORD *)(v23 + 168) = 0;
  *(unsigned char *)(v23 + 172) = 0;
  *((unsigned char *)v20 + 62207) = 0;
  *(_WORD *)((char *)v20 + 62205) = 0;
  *(_DWORD *)(v23 + 176) = 0;
  *(unsigned char *)(v23 + 180) = 0;
  *((unsigned char *)v20 + 62215) = 0;
  *(_WORD *)((char *)v20 + 62213) = 0;
  *(_DWORD *)(v23 + 184) = 0;
  *(unsigned char *)(v23 + 188) = 0;
  *((unsigned char *)v20 + 62223) = 0;
  *(_WORD *)((char *)v20 + 62221) = 0;
  *(_DWORD *)(v23 + 192) = 0;
  *(unsigned char *)(v23 + 196) = 0;
  *((unsigned char *)v20 + 62231) = 0;
  *(_WORD *)((char *)v20 + 62229) = 0;
  *(_DWORD *)(v23 + 200) = 0;
  *(unsigned char *)(v23 + 204) = 0;
  *((unsigned char *)v20 + 62239) = 0;
  *(_WORD *)((char *)v20 + 62237) = 0;
  *(_DWORD *)(v23 + 208) = 0;
  *(unsigned char *)(v23 + 212) = 0;
  *((unsigned char *)v20 + 62247) = 0;
  *(_WORD *)((char *)v20 + 62245) = 0;
  *(_DWORD *)(v23 + 216) = 0;
  *(unsigned char *)(v23 + 220) = 0;
  *((unsigned char *)v20 + 62255) = 0;
  *(_WORD *)((char *)v20 + 62253) = 0;
  *(_DWORD *)(v23 + 224) = 0;
  *(unsigned char *)(v23 + 228) = 0;
  *((unsigned char *)v20 + 62263) = 0;
  *(_WORD *)((char *)v20 + 62261) = 0;
  *(_DWORD *)(v23 + 232) = 0;
  *(unsigned char *)(v23 + 236) = 0;
  *((unsigned char *)v20 + 62271) = 0;
  *(_WORD *)((char *)v20 + 62269) = 0;
  *(_DWORD *)(v23 + 240) = 0;
  *(unsigned char *)(v23 + 244) = 0;
  *((unsigned char *)v20 + 62279) = 0;
  *(_WORD *)((char *)v20 + 62277) = 0;
  *(_DWORD *)(v23 + 248) = 0;
  *(unsigned char *)(v23 + 252) = 0;
  *((unsigned char *)v20 + 62287) = 0;
  *(_WORD *)((char *)v20 + 62285) = 0;
  *(_DWORD *)(v23 + 256) = 0;
  *(unsigned char *)(v23 + 260) = 0;
  *((unsigned char *)v20 + 62295) = 0;
  *(_WORD *)((char *)v20 + 62293) = 0;
  *(_DWORD *)(v23 + 264) = 0;
  *(unsigned char *)(v23 + 268) = 0;
  *((unsigned char *)v20 + 62303) = 0;
  *(_WORD *)((char *)v20 + 62301) = 0;
  *(_DWORD *)(v23 + 272) = 0;
  *(unsigned char *)(v23 + 276) = 0;
  *((unsigned char *)v20 + 62311) = 0;
  *(_WORD *)((char *)v20 + 62309) = 0;
  *(_DWORD *)(v23 + 280) = 0;
  *(unsigned char *)(v23 + 284) = 0;
  *((unsigned char *)v20 + 62319) = 0;
  *(_WORD *)((char *)v20 + 62317) = 0;
  *(_DWORD *)(v23 + 288) = 0;
  *(unsigned char *)(v23 + 292) = 0;
  *((unsigned char *)v20 + 62327) = 0;
  *(_WORD *)((char *)v20 + 62325) = 0;
  *(_DWORD *)(v23 + 296) = 0;
  *(unsigned char *)(v23 + 300) = 0;
  *((unsigned char *)v20 + 62335) = 0;
  *(_WORD *)((char *)v20 + 62333) = 0;
  *(_DWORD *)(v23 + 304) = 0;
  *(unsigned char *)(v23 + 308) = 0;
  *((unsigned char *)v20 + 62343) = 0;
  *(_WORD *)((char *)v20 + 62341) = 0;
  *(_DWORD *)(v23 + 312) = 0;
  *(unsigned char *)(v23 + 316) = 0;
  *((unsigned char *)v20 + 62351) = 0;
  *(_WORD *)((char *)v20 + 62349) = 0;
  *(_DWORD *)(v23 + 320) = 0;
  *(unsigned char *)(v23 + 324) = 0;
  *((unsigned char *)v20 + 62359) = 0;
  *(_WORD *)((char *)v20 + 62357) = 0;
  *(_DWORD *)(v23 + 328) = 0;
  *(unsigned char *)(v23 + 332) = 0;
  *((unsigned char *)v20 + 62367) = 0;
  *(_WORD *)((char *)v20 + 62365) = 0;
  *(_DWORD *)(v23 + 336) = 0;
  *(unsigned char *)(v23 + 340) = 0;
  *((unsigned char *)v20 + 62375) = 0;
  *(_WORD *)((char *)v20 + 62373) = 0;
  *(_DWORD *)(v23 + 344) = 0;
  *(unsigned char *)(v23 + 348) = 0;
  *((unsigned char *)v20 + 62383) = 0;
  *(_WORD *)((char *)v20 + 62381) = 0;
  *(_DWORD *)(v23 + 352) = 0;
  *(unsigned char *)(v23 + 356) = 0;
  *((unsigned char *)v20 + 62391) = 0;
  *(_WORD *)((char *)v20 + 62389) = 0;
  *(_DWORD *)(v23 + 360) = 0;
  *(unsigned char *)(v23 + 364) = 0;
  *((unsigned char *)v20 + 62399) = 0;
  *(_WORD *)((char *)v20 + 62397) = 0;
  *(_DWORD *)(v23 + 368) = 0;
  *(unsigned char *)(v23 + 372) = 0;
  *((unsigned char *)v20 + 62407) = 0;
  *(_WORD *)((char *)v20 + 62405) = 0;
  *(void *)(v23 + 376) = 0;
  memcpy(v20 + 15604, v363, 0x314uLL);
  *(void *)(v20 + 15801) = 0;
  v20[15803] = 0;
  *((_OWORD *)v20 + 3951) = v361;
  *((_WORD *)v20 + 31616) = v362;
  memcpy((char *)v20 + 63234, v360, 0x142uLL);
  v325[33] = 0;
  *(_OWORD *)(v20 + 15898) = 0u;
  *(_OWORD *)(v20 + 15902) = 0u;
  *((unsigned char *)v20 + 63624) = 0;
  *(_OWORD *)(v20 + 15890) = 0u;
  *(_OWORD *)(v20 + 15894) = 0u;
  *(unsigned int *)((char *)v20 + 63625) = 0;
  v20[15907] = 0;
  *((void *)v325 + 26) = 0;
  *((unsigned char *)v325 + 216) = 0;
  v20[15911] = 0;
  *(unsigned int *)((char *)v20 + 63641) = 0;
  *((void *)v325 + 28) = 0;
  *((unsigned char *)v20 + 63720) = 0;
  *(_OWORD *)(v20 + 15922) = 0u;
  *(_OWORD *)(v20 + 15926) = 0u;
  *(_OWORD *)(v20 + 15914) = 0u;
  *(_OWORD *)(v20 + 15918) = 0u;
  v20[15931] = 0;
  *(unsigned int *)((char *)v20 + 63721) = 0;
  *((void *)v325 + 38) = 0;
  *((unsigned char *)v325 + 312) = 0;
  memcpy((char *)v20 + 63737, __src, 0x3E58uLL);
  *(unsigned int *)((char *)v20 + 79697) = 0;
  v20[19925] = 0;
  *(_OWORD *)(v339 + 34) = xmmword_263D822A0;
  *(_OWORD *)(v339 + 38) = xmmword_263D822B0;
  *((void *)v339 + 21) = 0;
  *(_OWORD *)(v23 + 364) = 0u;
  *(_OWORD *)(v23 + 336) = 0u;
  *(_OWORD *)(v23 + 352) = 0u;
  *(_OWORD *)(v23 + 304) = 0u;
  *(_OWORD *)(v23 + 320) = 0u;
  *(_OWORD *)(v23 + 272) = 0u;
  *(_OWORD *)(v23 + 288) = 0u;
  *(_OWORD *)(v23 + 240) = 0u;
  *(_OWORD *)(v23 + 256) = 0u;
  *(_OWORD *)(v23 + 208) = 0u;
  *(_OWORD *)(v23 + 224) = 0u;
  *(_OWORD *)(v23 + 176) = 0u;
  *(_OWORD *)(v23 + 192) = 0u;
  *(_OWORD *)(v23 + 144) = 0u;
  *(_OWORD *)(v23 + 160) = 0u;
  *(_OWORD *)(v23 + 112) = 0u;
  *(_OWORD *)(v23 + 128) = 0u;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  *(unsigned char *)uint64_t v23 = NK_Sample_Track_Meas((int *)v353, (_DWORD *)(v21 + 15608), (double *)(v21 + 15616), (uint64_t)v20, 0.0, v103, v104);
  *(void *)(v353 + 48) = 0;
  *(_OWORD *)(v353 + 7760) = 0u;
  *(_OWORD *)(v353 + 7744) = 0u;
  *(_OWORD *)(v353 + 7728) = 0u;
  *(_OWORD *)(v353 + 7712) = 0u;
  *(_OWORD *)(v353 + 7696) = 0u;
  *(_OWORD *)(v353 + 7680) = 0u;
  *(_OWORD *)(v353 + 7664) = 0u;
  *(_OWORD *)(v353 + 7648) = 0u;
  *(_OWORD *)(v353 + 7632) = 0u;
  *(_OWORD *)(v353 + 7616) = 0u;
  *(_OWORD *)(v353 + 7600) = 0u;
  *(_OWORD *)(v353 + 7584) = 0u;
  *(_OWORD *)(v353 + 7568) = 0u;
  *(_OWORD *)(v353 + 7552) = 0u;
  *(_OWORD *)(v353 + 7536) = 0u;
  *(_OWORD *)(v353 + 7520) = 0u;
  uint64_t v347 = (double *)(v20 + 378);
  memcpy(v20 + 378, (const void *)(a9 + 32), 0x160uLL);
  long long v105 = *(_OWORD *)(a9 + 824);
  long long v106 = *(_OWORD *)(a9 + 840);
  long long v107 = *(_OWORD *)(a9 + 856);
  *((_OWORD *)v20 + 3872) = *(_OWORD *)(a9 + 872);
  *((_OWORD *)v20 + 3871) = v107;
  *((_OWORD *)v20 + 3870) = v106;
  *((_OWORD *)v20 + 3869) = v105;
  long long v108 = *(_OWORD *)(a9 + 888);
  long long v109 = *(_OWORD *)(a9 + 904);
  long long v110 = *(_OWORD *)(a9 + 920);
  *((_OWORD *)v20 + 3876) = *(_OWORD *)(a9 + 936);
  *((_OWORD *)v20 + 3875) = v110;
  *((_OWORD *)v20 + 3874) = v109;
  *((_OWORD *)v20 + 3873) = v108;
  uint64_t v338 = v20 + 466;
  *((unsigned char *)v20 + 1864) = *(unsigned char *)(a9 + 18);
  v20[467] = *(_DWORD *)(a9 + 12);
  *(_WORD *)(v354 + 110) = *(_WORD *)(a9 + 19);
  uint64_t v111 = *(void *)(a10 + 2056);
  v20[14984] = *(_DWORD *)(a10 + 2064);
  *((void *)v20 + 7491) = v111;
  uint64_t v112 = *(void *)(a10 + 2068);
  v20[14987] = *(_DWORD *)(a10 + 2076);
  *(void *)(v20 + 14985) = v112;
  uint64_t v113 = *(void *)(a10 + 2080);
  v20[14990] = *(_DWORD *)(a10 + 2088);
  *((void *)v20 + 7494) = v113;
  NK_Get_Ext_CTXT(v20[1], (uint64_t)v20, v21, (_DWORD *)a10);
  v20[468] = *(_DWORD *)a10;
  int v114 = *(_DWORD *)(a10 + 60);
  if (v114 == 2)
  {
    unsigned int v115 = *(_DWORD *)(v21 + 20);
    uint64_t v116 = (uint64_t)v348;
    if (v115 - 2 <= 2)
    {
      if (*v338)
      {
        if (v115 > 3 || (int)v20[467] >= 2) {
          goto LABEL_25;
        }
      }
      else if (v115 > 3)
      {
        goto LABEL_25;
      }
      int v117 = 4;
      goto LABEL_23;
    }
LABEL_18:
    if (v114 == v115) {
      goto LABEL_25;
    }
    *(_DWORD *)(v21 + 20) = v114;
    *(_DWORD *)(v21 + 24) = *(_DWORD *)(a10 + 64);
    goto LABEL_24;
  }
  unsigned int v115 = *(_DWORD *)(v21 + 20);
  uint64_t v116 = (uint64_t)v348;
  if ((v114 - 5) > 3 || v115 - 5 > 3) {
    goto LABEL_18;
  }
  if (!*v338 || (int)v20[467] <= 1)
  {
    if (v115 == 5)
    {
      int v117 = 6;
    }
    else
    {
      if (v115 != 6) {
        goto LABEL_25;
      }
      int v117 = 7;
    }
LABEL_23:
    *(_DWORD *)(v21 + 20) = v117;
LABEL_24:
    NK_Set_Dynamics(*(void *)(v21 + 20), v21 + 32);
  }
LABEL_25:
  long long v358 = (unsigned __int8 *)(v116 + 19968);
  NK_Set_XO_PN(a10, v21 + 32);
  if (!*(_DWORD *)(a9 + 56))
  {
    *(unsigned char *)(v21 + 136) = 1;
    *(_DWORD *)(v21 + 140) = 20;
  }
  if (*(unsigned char *)(v21 + 7))
  {
    *(unsigned char *)(v21 + 7) = 0;
    *(unsigned char *)(v21 + 136) = 1;
    int v118 = 33;
LABEL_31:
    *(_DWORD *)(v21 + 140) = v118;
    goto LABEL_32;
  }
  if (*(_DWORD *)(v21 + 140) == 33)
  {
    int v118 = 34;
    goto LABEL_31;
  }
LABEL_32:
  double v119 = (unsigned char *)(v116 + 68040);
  NK_Check_TOW_Adjust(v21, (uint64_t)v20);
  int v120 = *(_DWORD *)(a10 + 1660);
  int v121 = (double *)*(unsigned __int16 *)(v21 + 18);
  if (v120 * *(_DWORD *)(v116 + 26984) > (1000 * v121) && *(double *)(a9 + 360) > 0.0) {
    NK_Decay_Speed(v121, v120, (uint64_t)v347, v21);
  }
  NK_Predict_State((double *)v20, v347);
  double v122 = *(double *)(a9 + 224);
  if (fabs(v122) < 1.48352986)
  {
    __double2 v123 = __sincos_stret(v122);
    double v124 = 1.0 / sqrt(v123.__sinval * v123.__sinval * -0.00669437999 + 1.0);
    double v125 = v123.__cosval * (*(double *)(a9 + 240) + v124 * 6378137.0);
    if (v125 < 1.0) {
      double v125 = 1.0;
    }
    *(double *)(v116 + 68160) = v125;
    *(double *)(v116 + 68152) = *(double *)(a9 + 240) + v124 * (v124 * v124) * 6335439.33;
  }
  unsigned int v126 = *v20;
  v20[379] = v20[1];
  *((void *)v20 + 190) = *((void *)v20 + 1);
  if (!*v119)
  {
    *double v119 = 1;
    *(_DWORD *)(v116 + 68044) = v126;
  }
  uint64_t v323 = v116 + 68040;
  NK_Get_Ext_Meas(v126, v20[4], (_DWORD *)a10, (uint64_t)v20, v21);
  int v127 = *((unsigned __int8 *)v20 + 60200);
  char v349 = (double *)(v20 + 15050);
  if (*((unsigned char *)v20 + 60200)) {
    BOOL v328 = v20[15052] - 3 < 2;
  }
  else {
    BOOL v328 = 0;
  }
  if (*(_DWORD *)(v21 + 20) <= 4u
    && (!*(unsigned char *)(v21 + 241)
     || *((unsigned char *)v20 + 60200)
     && *((unsigned char *)v343 + 80)
     && (int)v20[5] >= 4
     && *(double *)v343 <= 6250000.0
     && *((double *)v343 + 14) <= 250000.0))
  {
    *((unsigned char *)v20 + 1880) = 1;
  }
  uint64_t v337 = v116 + 27040;
  uint64_t v333 = (int64x2_t *)(v20 + 15476);
  if (!*v338 || *(unsigned char *)(v116 + 68168)) {
    goto LABEL_63;
  }
  if ((int)v20[467] < 2 || *(double *)(v354 + 200) > 30000.0 || !*(_DWORD *)(v116 + 27000))
  {
    BOOL v319 = v127 == 0;
    char v128 = !v328;
    if (v319) {
      char v128 = 1;
    }
    if ((v128 & 1) != 0 || *(double *)v343 > 900000000.0)
    {
LABEL_63:
      if (*((unsigned char *)v20 + 25) && (int)v20[5] >= 1) {
        NK_Crude_Apx_Pos(v353);
      }
    }
  }
  NK_Transform_State((uint64_t)v347);
  long long v326 = (double *)(v21 + 27528);
  uint64_t v327 = (double *)(v21 + 27624);
  uint64_t v335 = (_OWORD *)(v21 + 14208);
  if ((NK_Init_Cov_Mat(*((unsigned __int8 *)v20 + 1864), *(void *)(v21 + 20), v20[5], v349, v21 + 352, v116, (_OWORD *)(v21 + 14208), v21 + 27528, *(double *)(a10 + 1712), v21 + 27624, v333, v354) & 1) == 0)
  {
    NK_Prop_Cov_Mat(*((double *)v20 + 194), (double *)(v21 + 352));
    NK_Add_Nominal_PN(v21, (uint64_t)v347, *((unsigned __int8 *)v20 + 1488), (double *)(v21 + 32), (double *)(v21 + 352), v116, (double *)v354);
    if (*(unsigned char *)(v21 + 136)) {
      NK_Init_Cov_Mat(*((unsigned __int8 *)v20 + 1864), *(void *)(v21 + 20), v20[5], v349, v21 + 352, v116, v335, (uint64_t)v326, *(double *)(a10 + 1712), (uint64_t)v327, v333, v354);
    }
  }
  bzero(v20 + 536, 0x1200uLL);
  uint64_t v345 = (uint64_t)(v20 + 9140);
  int v355 = (unsigned __int8 *)(v353 + 96);
  uint64_t v324 = v353 + 1760;
  NK_Comp_DR_Meas(0x80u, v20[13], v353 + 96, v353 + 736, v353 + 1760, v353 + 2912, v353 + 6496, v353 + 4448, *((double *)v20 + 194), v353 + 992, v353 + 1248, v21 + 20160, v21 + 25792, v20 + 52, v20 + 9154);
  *(unsigned char *)(v354 + 109) = NK_PrePro_SV_Meas(*(void *)(v21 + 20), v352 + 50616, v352 + 50834, v353, (uint64_t)v356, v346, a10, v350, (uint64_t)a11, v352, (char *)v21, (uint64_t)v20);
  NK_Set_Environ_Severity(v353, a10, v21, (uint64_t)v20);
  NK_Set_PR_Meas_Var(v353, a10, v21, (uint64_t)v20);
  NK_Set_DO_Meas_Var(v353, a10, v21, (uint64_t)v20);
  NK_Set_DR_Meas_Var(v353, (uint64_t)v20);
  if (*(unsigned char *)v337 && *(_DWORD *)(v116 + 26992) <= 1u)
  {
    uint64_t v129 = 0;
    double v130 = (double *)(v20 + 1992);
    int v131 = (unsigned char *)(v353 + 96);
    do
    {
      if (*((unsigned char *)v20 + v129 + 6808))
      {
        double v132 = *v130;
        if (*v130 >= dbl_263D822C0[*v131 == 2]) {
          double v132 = dbl_263D822C0[*v131 == 2];
        }
        double *v130 = v132;
      }
      ++v129;
      v130 += 3;
      v131 += 4;
    }
    while (v129 != 128);
  }
  if ((*(_DWORD *)(v352 + 25344) - 2) <= 4)
  {
    if (*(unsigned __int16 *)(v352 + 25388) - *((__int16 *)v20 + 13) >= 0) {
      int v133 = -((*(unsigned __int16 *)(v352 + 25388) - *((__int16 *)v20 + 13)) & 0x3F);
    }
    else {
      int v133 = (*((_WORD *)v20 + 13) - *(_WORD *)(v352 + 25388)) & 0x3F;
    }
    if (v133 > 31) {
      v133 -= 64;
    }
    double v134 = *(double *)(v352 + 25368)
         + *(double *)(v352 + 25376) * (double)((int)*((double *)v20 + 4) - *(_DWORD *)(v352 + 25384) + 604800 * v133);
    *((double *)v20 + 187) = v134;
    *(double *)(v21 + 15544) = v134 * 299792458.0;
  }
  if ((*(_DWORD *)(v352 + 50556) - 2) >= 5)
  {
    double v138 = *(double *)(v21 + 15576);
  }
  else
  {
    if (*(__int16 *)(v352 + 50612) - *((__int16 *)v20 + 13) >= 0) {
      int v135 = -((*(__int16 *)(v352 + 50612) - *((__int16 *)v20 + 13)) & 0x3FF);
    }
    else {
      int v135 = (*((_WORD *)v20 + 13) - *(_WORD *)(v352 + 50612)) & 0x3FF;
    }
    if (v135 > 511) {
      v135 -= 1024;
    }
    if (v135 < -512) {
      v135 += 1024;
    }
    double v136 = *((double *)v20 + 4) - (double)*(int *)(v352 + 50608) + (double)(604800 * v135);
    double v137 = *(double *)(v352 + 50584) + *(double *)(v352 + 50592) * v136 + *(double *)(v352 + 50600) * (v136 * v136);
    *((double *)v20 + 188) = v137;
    double v138 = v137 * 299792458.0;
    *(double *)(v21 + 15576) = v138;
  }
  double v139 = (double)(int)v20[13];
  double v140 = *(double *)(v21 + 25920) + v139 * 299792.458;
  *(double *)(v21 + 25920) = v140;
  double v141 = *(double *)(v21 + 20112) + v139 * 299792.458;
  *(double *)(v21 + 20112) = v141;
  double v142 = *(double *)(v21 + 20128) + v139 * 299792.458;
  *(double *)(v21 + 20128) = v142;
  Corr_Old_PR_Est(v355, *v358, v358[2], v358[16], v358[32], v358[1], 128, v21 + 17032, *(double *)(v21 + 20152), v140, v141, v142, *(double *)(v21 + 20144), 0.0, 0.0, *(double *)(v21 + 15544) - *(double *)(v21 + 15592), v138 - *(double *)(v21 + 15600), v21 + 25928, v21 + 21184,
    (unsigned __int8 *)(v21 + 24256),
    (double *)(v21 + 24768));
  NK_Comp_PR_DO_Res(v353, (uint64_t)v356, v352, a10, v350, v21, (uint64_t)v20);
  if (!*((unsigned char *)v20 + 1680) || !*((unsigned char *)v20 + 1681) || !*((unsigned char *)v20 + 1682)) {
    NK_Set_Constell_Clock_Bias(v355, (uint64_t)v20, v352, *(unsigned char *)(v21 + 241), v21 + 352, v143, v144, v145, v146, v147);
  }
  int16x4_t v148 = (const double *)v353;
  NK_Comp_DR_Res(v353, v21, (uint64_t)v20);
  if (!*(unsigned char *)(v21 + 136)) {
    NK_Add_SV_ARes_PN_ClkDrift((char *)v21, (uint64_t)v20, *(double *)(a10 + 120));
  }
  uint64_t v329 = (double *)(v20 + 15336);
  unint64_t v336 = (char *)v20 + 6755;
  long long v351 = (unsigned int *)(v116 + 26984);
  uint64_t v149 = a10;
  NK_SV_PR_LvsE_Check(a10, v353, v21, v20);
  NK_Reflection_Rejection_Ped(a10, v353, v21, (int *)v20);
  NK_Reduce_Num_SV(v353, v21, v20, (uint64_t)a11);
  NK_Dopp_Outlier(v353, v21, (uint64_t)v20);
  NK_SV_Res_RTests_FDist(*(_DWORD *)(a10 + 68), v353, v21, (uint64_t)v20);
  LOWORD(v388[0]) = 0;
  v388[1074] = 0.0;
  LOBYTE(v388[1075]) = 0;
  memset(&v388[1065], 0, 65);
  v388[1086] = 0.0;
  LOBYTE(v388[1087]) = 0;
  LODWORD(v388[1076]) = 0;
  memset(&v388[1077], 0, 65);
  bzero(&v388[1], 0x213CuLL);
  memset(&v388[1088], 0, 24);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln((uint64_t)(v20 + 15808), (uint64_t)v388);
  memcpy((void *)(v331 + 3168), &v388[1], 0x400uLL);
  memcpy((void *)(v331 + 4192), &v388[131], 0x400uLL);
  NK_Least_Squares_Cross_Check(v355, v21, (uint64_t)v20, v388);
  if (*(unsigned char *)v339 && (!*((unsigned char *)v20 + 1680) || !*((unsigned char *)v20 + 1681) || !*((unsigned char *)v20 + 1682))) {
    NK_Set_Constell_Clock_Bias(v355, (uint64_t)v20, v352, *(unsigned char *)(v21 + 241), v21 + 352, v150, v151, v152, v153, v154);
  }
  __int16 v155 = (_DWORD *)(v23 + 32);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v331 + 1024, (uint64_t)v388);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v331 + 1560, (uint64_t)v388);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v331 + 2096, (uint64_t)v388);
  NK_Least_Squares_Check(v353);
  NK_Least_Squares_Publish_Soln(v331 + 2632, (uint64_t)v388);
  uint64_t v332 = (uint64_t)(v20 + 1688);
  NK_SV_Meas_IVar((void *)1, (uint64_t)v355, (uint64_t)(v20 + 13190), (double *)(v21 + 352), (uint64_t)(v20 + 1688), *((double *)v20 + 194));
  uint64_t v330 = (uint64_t)(v20 + 5414);
  NK_SV_Meas_IVar((void *)2, (uint64_t)v355, (uint64_t)(v20 + 13190), (double *)(v21 + 352), (uint64_t)(v20 + 5414), *((double *)v20 + 194));
  uint64_t v340 = (uint64_t)(v20 + 13190);
  NK_SV_Meas_IVar((void *)3, (uint64_t)v355, (uint64_t)(v20 + 13190), (double *)(v21 + 352), v345, *((double *)v20 + 194));
  NK_Bit_Sync_Check((char *)v353, v21, (uint64_t)v20, (uint64_t)a11);
  NK_Range_Chip_Check((char *)v353, v21, (uint64_t)v20, (uint64_t)a11);
  uint64_t v156 = 0;
  double v157 = v20 + 1766;
  double v158 = v343;
  int v159 = (char *)(v20 + 15613);
  do
  {
    if (*((unsigned char *)v157 + v156) && !*((unsigned char *)v20 + v156 + 57))
    {
      *((unsigned char *)v157 + v156) = 0;
      --*v336;
    }
    ++v156;
  }
  while (v156 != 128);
  unsigned int v161 = *(_DWORD *)(v21 + 20);
  unsigned int v160 = *(_DWORD *)(v21 + 24);
  if (v161 <= v160)
  {
    switch(v161)
    {
      case 0u:
        goto LABEL_255;
      case 1u:
        if (!v160) {
          break;
        }
        goto LABEL_255;
      case 2u:
        if (v160 > 1) {
          goto LABEL_255;
        }
        break;
      case 3u:
        if (v160 > 2) {
          goto LABEL_255;
        }
        break;
      case 4u:
        if (v160 - 5 < 3) {
          goto LABEL_255;
        }
        break;
      case 5u:
        if ((v160 & 0xFFFFFFFE) == 6) {
          goto LABEL_255;
        }
        break;
      case 6u:
        if (v160 != 7) {
          break;
        }
LABEL_255:
        if (*v351 <= *(unsigned __int16 *)(v21 + 16) && v20[468] == 1)
        {
          unsigned int v204 = *(_DWORD *)(v21 + 148);
          if (v204 >= *(_DWORD *)(v21 + 152)) {
            unsigned int v204 = *(_DWORD *)(v21 + 152);
          }
          if (v204 >= *(_DWORD *)(v21 + 156)) {
            unsigned int v204 = *(_DWORD *)(v21 + 156);
          }
          if (v204 > 0xA) {
            goto LABEL_111;
          }
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
  NK_SV_Res_RTests(v353, v21, (uint64_t)v20, (uint64_t)a11);
LABEL_111:
  NK_SV_Res_RTests_Riskier_SVs(v353, (uint64_t)v20);
  NK_Check_Num_SV_Res(*((unsigned __int8 *)v20 + 1864), *(void *)(v21 + 20), *(unsigned __int8 *)(v21 + 2), *((unsigned __int8 *)v20 + 60200), v20[15052], *((_DWORD *)v358 + 1758), v332, v345, *(double *)v343, v330);
  uint64_t v162 = 0;
  long long v163 = v20 + 11810;
  do
  {
    if (*((unsigned char *)v20 + v162 + 36872) && v20[v162 + 1830] - 1 <= 0x1C)
    {
      *(double *)&v163[2 * v162] = *(double *)&v163[2 * v162] + 1.0;
      *((unsigned char *)v163 + v162 - 128) = 1;
    }
    ++v162;
  }
  while (v162 != 128);
  if (*v348
    || (NK_Add_SV_ARes_PN(*(unsigned int *)(a9 + 4), *(unsigned __int8 *)(a9 + 17), v353, v21, (uint64_t)v20, *(_DWORD *)(a10 + 68)), *(unsigned char *)(v21 + 136)))
  {
    NK_Init_Cov_Mat(*((unsigned __int8 *)v20 + 1864), *(void *)(v21 + 20), v20[5], v349, v21 + 352, (uint64_t)v348, v335, (uint64_t)v326, *(double *)(a10 + 1712), (uint64_t)v327, v333, v354);
  }
  if (!*(unsigned char *)(v21 + 6) && *v336 >= 6u && !*(unsigned char *)(v21 + 241) && v20[5] - 3 <= 2)
  {
    double v164 = *(double *)(v354 + 40) * 25.0;
    *(double *)(v354 + 40) = v164;
    *(double *)(v21 + 512) = v164;
    EvLog("Nav_Kalman_Update: Freeing-up dT Synch ");
    double v165 = *(double *)v354 * 25.0;
    *(double *)uint64_t v354 = v165;
    *(double *)(v21 + 352) = v165;
    double v166 = *(double *)(v354 + 8) * 25.0;
    *(double *)(v354 + 8) = v166;
    *(double *)(v21 + 368) = v166;
    double v167 = *(double *)(v354 + 16) * 25.0;
    *(double *)(v354 + 16) = v167;
    *(double *)(v21 + 392) = v167;
  }
  NK_Get_Ext_Time(*v20, (uint64_t)v20, v21);
  NK_DeCor_Ext_Meas(v21, (uint64_t)v20);
  char v334 = NK_Tunnel_Assist(v21, (int *)v20);
  long long v357 = (float64x2_t *)(v21 + 976);
  memcpy((void *)(v21 + 976), (const void *)(v21 + 352), 0x270uLL);
  double v170 = 0.0;
  *(_OWORD *)(v21 + 1600) = 0u;
  *(_OWORD *)(v21 + 1616) = 0u;
  *(_OWORD *)(v21 + 1632) = 0u;
  *(_OWORD *)(v21 + 1648) = 0u;
  *(_OWORD *)(v21 + 1664) = 0u;
  *(_OWORD *)(v21 + 1680) = 0u;
  *(void *)(v21 + 1696) = 0;
  if (*((unsigned char *)v20 + 59984)
    && KFSt_Meas_Update(5u, 0xCu, (unsigned __int8 *)v20 + 59984, v357->f64, (_WORD *)(v21 + 27078), *((double *)v20 + 209)))
  {
    _DWORD *v155 = v20[14997];
  }
  double v171 = *(double *)(v354 + 40);
  if (v171 > 0.000000001)
  {
    if ((double v168 = *(double *)(v354 + 48), v170 = 1600000000.0, v168 < 1600000000.0)
      && (double v168 = *(double *)(v354 + 56), v168 < 1600000000.0)
      && (double v168 = *(double *)(v354 + 64), v168 < 1600000000.0)
      || *(unsigned char *)v349 && (double v168 = *(double *)v343, *(double *)v343 < 1600000000.0))
    {
      double v170 = 0.0001;
      if (*((unsigned char *)v20 + 56) == 2) {
        goto LABEL_141;
      }
      if (*((unsigned char *)v20 + 24)) {
        goto LABEL_141;
      }
      if (*((unsigned char *)v20 + 59984))
      {
        if (v20[14997] == 1)
        {
          double v168 = *((double *)v20 + 7503);
          double v169 = 0.00000004;
          if (v168 < 0.00000004) {
            goto LABEL_141;
          }
        }
      }
    }
  }
  if (*((unsigned char *)v20 + 56))
  {
    double v170 = 0.9;
    if (v171 > 0.9)
    {
      double v170 = 1.0;
      if (*v338)
      {
LABEL_141:
        unint64_t v172 = *((void *)v20 + 209);
        v389[0] = 0.0;
        memset(&__src[7], 0, 152);
        memset(&__src[3], 0, 48);
        memset(__src, 0, 40);
        *((void *)&__src[2] + 1) = 0x3FF0000000000000;
        __src[6] = v172;
        umeas((BOOL)v357, 0xCu, v170, (double *)__src, v388, v390, v389, 1.0e20);
        _DWORD *v155 = 2;
      }
    }
  }
  int v173 = (unsigned __int8 *)(v20 + 15014);
  if (*((unsigned char *)v20 + 60056))
  {
    uint64_t v174 = 0;
    int v175 = 0;
    int v176 = 0;
    int v177 = 0;
    int v178 = (unsigned char *)(v353 + 96);
    do
    {
      if (*((unsigned char *)v20 + v174 + 7064))
      {
        switch(*v178)
        {
          case 0:
          case 7:
            EvCrt_Illegal_switch_case("Nav_Kalman_Update", 0x4C1u);
            break;
          case 1:
          case 3:
          case 5:
          case 6:
            ++v175;
            break;
          case 2:
            ++v176;
            break;
          case 4:
            ++v177;
            break;
          default:
            break;
        }
      }
      ++v174;
      v178 += 4;
    }
    while (v174 != 128);
    double v171 = *((double *)v20 + 204);
    double v170 = 299792458.0;
    if (v175 || !(v176 | v177))
    {
      BOOL v179 = KFSt_Meas_Update(0, 0xCu, v173, v357->f64, (_WORD *)(v21 + 27080), v171 * 299792458.0);
      uint64_t v149 = a10;
      int16x4_t v148 = (const double *)v353;
      double v158 = v343;
      goto LABEL_154;
    }
    double v158 = v343;
    if (v176)
    {
      BOOL v179 = KFSt_Meas_Update(1u, 0xCu, v173, v357->f64, (_WORD *)(v21 + 27080), *((double *)v20 + 205) * 299792458.0);
      uint64_t v149 = a10;
      int16x4_t v148 = (const double *)v353;
LABEL_154:
      int v159 = (char *)(v20 + 15613);
      if (!v179) {
        goto LABEL_156;
      }
      goto LABEL_155;
    }
    uint64_t v149 = a10;
    int16x4_t v148 = (const double *)v353;
    int v159 = (char *)(v20 + 15613);
    if (v177
      && KFSt_Meas_Update(2u, 0xCu, v173, v357->f64, (_WORD *)(v21 + 27080), *((double *)v20 + 206) * 299792458.0))
    {
LABEL_155:
      *(_DWORD *)(v23 + 36) = v20[15015];
    }
  }
LABEL_156:
  if (*v336)
  {
    double v180 = *(double *)v354;
    if (*(double *)v354 >= 90000.0)
    {
      BOOL v181 = 0;
    }
    else
    {
      double v170 = *(double *)(v354 + 8);
      BOOL v181 = v170 < 90000.0;
    }
    if (v20[5] == 11 && (v388[0] = 0.0, !R8_EQ((const double *)v20 + 204, v388)))
    {
      *(void *)&__src[0] = 0;
      BOOL v196 = R8_EQ((const double *)v20 + 205, (const double *)__src);
      BOOL v182 = 0;
      double v170 = 900000000.0;
      if (v180 < 900000000.0 && !v196)
      {
        double v171 = *(double *)(v354 + 8);
        BOOL v182 = v171 < 900000000.0;
      }
    }
    else
    {
      BOOL v182 = 0;
    }
    BOOL v183 = !*((_DWORD *)v358 + 1758)
        && (int v194 = v159[738], v194 >= 1)
        && v159[737] >= 1
        && v159[737] + v194 < 6;
    if (v181 || v182 || v183)
    {
      *((unsigned char *)v158 + 224) = 2;
      v158[57] = 1;
      NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v352, v170, v171, v168, v169);
      double v180 = *(double *)v354;
    }
    if (v180 >= 90000.0)
    {
      BOOL v184 = 0;
    }
    else
    {
      double v170 = *(double *)(v354 + 16);
      BOOL v184 = v170 < 90000.0;
    }
    if (v20[5] == 11 && (v388[0] = 0.0, !R8_EQ((const double *)v20 + 204, v388)))
    {
      *(void *)&__src[0] = 0;
      BOOL v197 = R8_EQ((const double *)v20 + 206, (const double *)__src);
      BOOL v185 = 0;
      double v170 = 900000000.0;
      if (v180 < 900000000.0 && !v197)
      {
        double v171 = *(double *)(v354 + 16);
        BOOL v185 = v171 < 900000000.0;
      }
    }
    else
    {
      BOOL v185 = 0;
    }
    BOOL v186 = !*((_DWORD *)v358 + 1758)
        && (int v195 = v159[740], v195 >= 1)
        && v159[737] >= 1
        && v159[737] + v195 < 6;
    if (v184 || v185 || v186)
    {
      *((unsigned char *)v158 + 224) = 4;
      v158[57] = 4;
      NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v352, v170, v171, v168, v169);
    }
    if (*(double *)(v354 + 8) < 90000.0)
    {
      double v187 = *(double *)(v354 + 16);
      if (v187 < 90000.0)
      {
        *((unsigned char *)v158 + 224) = 4;
        v158[57] = 5;
        NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v352, v187, v171, v168, v169);
      }
    }
  }
  if (*((unsigned char *)v20 + 60128))
  {
    double v188 = *((double *)v20 + 208) * 299792458.0;
    double v189 = *(double *)(v354 + 32);
    if (v189 <= 80.8879661)
    {
      *((unsigned char *)v20 + 60128) = 0;
      *((unsigned char *)v20 + 60144) = 1;
      double v190 = *((double *)v20 + 7519);
      double v191 = v189 + *((double *)v20 + 7520);
      if ((v190 - v188) * (v190 - v188) > v191 * 9.0) {
        EvLog_v("Nav_Kalman_Update: WARNING: Ext ClkD %g incompatible with NK ClkD %g Unc %g", v190, v188, sqrt(v191));
      }
    }
    else if (KFSt_Meas_Update(4u, 0xCu, (unsigned __int8 *)v20 + 60128, v357->f64, (_WORD *)(v21 + 27088), v188))
    {
      *(_DWORD *)(v23 + 48) = v20[15033];
    }
  }
  *(unsigned char *)(v342 + 152) = NK_Map_Vector((int *)v20, v21, a9);
  if (*(unsigned char *)v349)
  {
    if (Horz_Meas_Update(6u, (double *)v20 + 213, (double *)v20 + 217, 0xCu, v349, (BOOL)v357, (_WORD *)(v21 + 27090)))
    {
      *(_DWORD *)(v23 + 56) = v20[15051];
      if (*(unsigned char *)(v23 + 252) && *(double *)v158 < 160000.0) {
        *(unsigned char *)(v23 + 260) = 1;
      }
      if (*(unsigned char *)(v23 + 284) && *(double *)v158 < 160000.0) {
        *(unsigned char *)(v23 + 292) = 1;
      }
    }
    else
    {
      *(_DWORD *)(v23 + 256) = 3;
      if (*(unsigned char *)(v23 + 284)) {
        *(_DWORD *)(v23 + 288) = 3;
      }
      if (v20[15052] - 3 <= 1) {
        *(_DWORD *)(p_NA + 632) = 2;
      }
      double v192 = *((double *)v158 + 6) * *((double *)v158 + 6) + *((double *)v158 + 5) * *((double *)v158 + 5);
      if (v192 > *((double *)v158 + 3))
      {
        uint64_t v193 = p_NA;
        *(double *)(p_NA + 576) = v192;
        *(double *)(v193 + 584) = v192;
      }
    }
  }
  if (*((unsigned char *)v158 + 80))
  {
    if (Vert_Meas_Update(6u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v158 + 80, v357->f64, (_WORD *)(v21 + 27092), *((double *)v20 + 215)))
    {
      *(_DWORD *)(v23 + 60) = v158[21];
      if (!*(unsigned char *)(v23 + 244) && *(unsigned char *)(v23 + 268) && *((double *)v158 + 14) < 160000.0) {
        *(unsigned char *)(v23 + 276) = 1;
      }
    }
    else if (*(unsigned char *)(v23 + 244))
    {
      *(unsigned char *)(v23 + 244) = 0;
      *(_DWORD *)(v23 + 240) = 3;
    }
    else if (v158[21] == 1)
    {
      *(_DWORD *)(v23 + 272) = 3;
    }
  }
  if (*((unsigned char *)v20 + 59964) && *((unsigned __int8 *)v20 + 21659) + *((unsigned __int8 *)v20 + 36563))
  {
    *(unsigned char *)int v341 = 1;
    v341[1] = 1;
    v341[4] = *v20;
    *(_OWORD *)(v341 + 6) = xmmword_263D822D0;
    *((void *)v341 + 7) = 0x4022000000000000;
  }
  if (*(unsigned char *)v341
    && Speed_Meas_Update(9u, (double *)v20 + 198, 0xCu, (unsigned __int8 *)v341, v357->f64, (_WORD *)(v21 + 27100), 1.0))
  {
    *(_DWORD *)(v23 + 76) = v341[1];
  }
  if (*((unsigned char *)v341 + 72))
  {
    if (*(_DWORD *)(v337 + 28) != 3)
    {
      double v198 = *(double *)(v354 + 256);
      double v199 = 0.0;
      uint64_t v200 = 3243;
      do
      {
        double v199 = v199 + *(double *)(v21 + 8 * v200) * *(double *)(v21 + 8 * v200);
        unint64_t v201 = v200 - 3240;
        --v200;
      }
      while (v201 > 1);
      if (v198 < 45.0 && *((double *)v341 + 12) > 0.75)
      {
        double v202 = *((double *)v20 + 231);
        if (v202 > 0.75 && *(double *)v325 > 0.75 && sqrt(v199) > 0.5)
        {
          long double v203 = cos(v198 * 0.0174532925);
          if (GSpeed_Meas_Update(9, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v341 + 72, (BOOL)v357, (_WORD *)(v21 + 27104), v202, *(double *)(v21 + 27280), 1.0, 1.0 / v203))
          {
            *(_DWORD *)(v23 + 84) = v341[19];
          }
          else if (*(unsigned char *)(v23 + 324))
          {
            *(unsigned char *)(v23 + 324) = 0;
            *(_DWORD *)(v23 + 320) = 3;
          }
        }
      }
    }
  }
  if (*((unsigned char *)v158 + 152))
  {
    if (Vert_Meas_Update(9u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v158 + 152, v357->f64, (_WORD *)(v21 + 27094), -*((double *)v20 + 229)))
    {
      *(_DWORD *)(v23 + 64) = v158[39];
    }
    else if (*(unsigned char *)(v23 + 340))
    {
      *(unsigned char *)(v23 + 340) = 0;
      *(_DWORD *)(v23 + 336) = 3;
    }
  }
  if (*((unsigned char *)v341 + 144))
  {
    double v205 = *((double *)v20 + 232);
    *((double *)v341 + 23) = v205;
    if (Track_Meas_Update(9, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v341 + 144, (BOOL)v357, (_WORD *)(v21 + 27108), v205, *((double *)v20 + 231), 1.0))
    {
      *(_DWORD *)(v23 + 92) = v341[37];
    }
    else if (*(unsigned char *)(v23 + 356))
    {
      *(unsigned char *)(v23 + 356) = 0;
      *(_DWORD *)(v23 + 352) = 3;
    }
  }
  int v207 = *(_DWORD *)(v21 + 20);
  unsigned int v206 = *(_DWORD *)(v21 + 24);
  if (v207 != v206)
  {
    switch(v207)
    {
      case 0:
        goto LABEL_281;
      case 1:
        if (v206) {
          goto LABEL_281;
        }
        goto LABEL_282;
      case 2:
        if (v206 <= 1) {
          goto LABEL_282;
        }
        goto LABEL_281;
      case 3:
        if (v206 <= 2) {
          goto LABEL_282;
        }
        goto LABEL_281;
      case 4:
        if (v206 - 5 >= 3) {
          goto LABEL_282;
        }
        goto LABEL_281;
      case 5:
        if ((v206 & 0xFFFFFFFE) != 6) {
          goto LABEL_282;
        }
        goto LABEL_281;
      case 6:
        if (v206 != 7) {
          goto LABEL_282;
        }
LABEL_281:
        NK_Define_Meas_Innov_Sat_Thresh((uint64_t)v20, v21, (uint64_t)v347);
        unsigned int v206 = *(_DWORD *)(v21 + 24);
LABEL_282:
        int v207 = *(_DWORD *)(v21 + 20);
        break;
      default:
        break;
    }
    if (v207 != v206)
    {
      switch(v207)
      {
        case 0:
          goto LABEL_306;
        case 1:
          if (!v206) {
            goto LABEL_315;
          }
          goto LABEL_306;
        case 2:
          if (v206 <= 1) {
            goto LABEL_315;
          }
          goto LABEL_306;
        case 3:
          if (v206 <= 2) {
            goto LABEL_315;
          }
          goto LABEL_306;
        case 4:
          if (v206 - 5 >= 3) {
            goto LABEL_315;
          }
          goto LABEL_306;
        case 5:
          if ((v206 & 0xFFFFFFFE) != 6) {
            goto LABEL_315;
          }
          goto LABEL_306;
        case 6:
          if (v206 == 7)
          {
LABEL_306:
            memset_pattern16(v20 + 7796, &unk_263D822F0, 0x400uLL);
            memset_pattern16(v20 + 11522, &unk_263D822F0, 0x400uLL);
            if (!*(unsigned char *)(v21 + 241) && *v351 <= *(unsigned __int16 *)(v21 + 16) && v20[468] == 1)
            {
              unsigned int v208 = *(_DWORD *)(v21 + 148);
              if (v208 >= *(_DWORD *)(v21 + 152)) {
                unsigned int v208 = *(_DWORD *)(v21 + 152);
              }
              if (v208 >= *(_DWORD *)(v21 + 156)) {
                unsigned int v208 = *(_DWORD *)(v21 + 156);
              }
              if (v208 >= 0xB)
              {
                NK_Meas_Outlier_Check(2, (uint64_t)v355, *((unsigned __int8 *)v20 + 56), 0, v330, v345);
                NK_Meas_ARP_Check(2u, v355, v330, (double *)v354, v327);
              }
            }
          }
          break;
        default:
          goto LABEL_315;
      }
    }
  }
  if (*v351 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1) {
    goto LABEL_323;
  }
LABEL_315:
  unsigned int v209 = *(_DWORD *)(v21 + 148);
  if (v209 >= *(_DWORD *)(v21 + 152)) {
    unsigned int v209 = *(_DWORD *)(v21 + 152);
  }
  if (v209 >= *(_DWORD *)(v21 + 156)) {
    unsigned int v209 = *(_DWORD *)(v21 + 156);
  }
  if (v209 >= 0xB && (v211 = *(_DWORD *)(v21 + 20), unsigned int v210 = *(_DWORD *)(v21 + 24), v211 != v210))
  {
    BOOL v212 = 1;
    switch(v211)
    {
      case 0:
        break;
      case 1:
        BOOL v212 = v210 != 0;
        break;
      case 2:
        BOOL v316 = v210 > 1;
        goto LABEL_605;
      case 3:
        BOOL v316 = v210 > 2;
LABEL_605:
        BOOL v212 = v316;
        break;
      case 4:
        BOOL v212 = v210 - 5 < 3;
        break;
      case 5:
        BOOL v319 = (v210 & 0xFFFFFFFE) == 6;
        goto LABEL_623;
      case 6:
        BOOL v319 = v210 == 7;
LABEL_623:
        BOOL v212 = v319;
        break;
      default:
        goto LABEL_323;
    }
  }
  else
  {
LABEL_323:
    BOOL v212 = 0;
  }
  NK_SV_Meas_Update((char *)2, (uint64_t)v355, v340, (uint64_t)v20 + 57, v330, v357, v212, (uint64_t)(v20 + 396), *((double *)v20 + 194), (uint64_t)(v20 + 15326));
  int v214 = *(_DWORD *)(v21 + 20);
  unsigned int v213 = *(_DWORD *)(v21 + 24);
  if (v214 != v213)
  {
    switch(v214)
    {
      case 0:
        goto LABEL_339;
      case 1:
        if (!v213) {
          break;
        }
        goto LABEL_339;
      case 2:
        if (v213 <= 1) {
          break;
        }
        goto LABEL_339;
      case 3:
        if (v213 <= 2) {
          break;
        }
        goto LABEL_339;
      case 4:
        if (v213 - 5 >= 3) {
          break;
        }
        goto LABEL_339;
      case 5:
        if ((v213 & 0xFFFFFFFE) != 6) {
          break;
        }
        goto LABEL_339;
      case 6:
        if (v213 == 7)
        {
LABEL_339:
          if (!*(unsigned char *)(v21 + 241) && *v351 <= *(unsigned __int16 *)(v21 + 16) && v20[468] == 1)
          {
            unsigned int v215 = *(_DWORD *)(v21 + 148);
            if (v215 >= *(_DWORD *)(v21 + 152)) {
              unsigned int v215 = *(_DWORD *)(v21 + 152);
            }
            if (v215 >= *(_DWORD *)(v21 + 156)) {
              unsigned int v215 = *(_DWORD *)(v21 + 156);
            }
            if (v215 >= 0xB) {
              NK_Meas_ARP_Check(3u, v355, v345, (double *)v354, v327);
            }
          }
        }
        break;
      default:
        break;
    }
  }
  uint64_t v344 = v158 + 20;
  if (*v351 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1) {
    goto LABEL_356;
  }
  unsigned int v216 = *(_DWORD *)(v21 + 148);
  if (v216 >= *(_DWORD *)(v21 + 152)) {
    unsigned int v216 = *(_DWORD *)(v21 + 152);
  }
  if (v216 >= *(_DWORD *)(v21 + 156)) {
    unsigned int v216 = *(_DWORD *)(v21 + 156);
  }
  if (v216 >= 0xB && (v218 = *(_DWORD *)(v21 + 20), unsigned int v217 = *(_DWORD *)(v21 + 24), v218 != v217))
  {
    BOOL v219 = 1;
    switch(v218)
    {
      case 0:
        break;
      case 1:
        BOOL v219 = v217 != 0;
        break;
      case 2:
        BOOL v317 = v217 > 1;
        goto LABEL_611;
      case 3:
        BOOL v317 = v217 > 2;
LABEL_611:
        BOOL v219 = v317;
        break;
      case 4:
        BOOL v219 = v217 - 5 < 3;
        break;
      case 5:
        BOOL v320 = (v217 & 0xFFFFFFFE) == 6;
        goto LABEL_628;
      case 6:
        BOOL v320 = v217 == 7;
LABEL_628:
        BOOL v219 = v320;
        break;
      default:
        goto LABEL_356;
    }
  }
  else
  {
LABEL_356:
    BOOL v219 = 0;
  }
  NK_SV_Meas_Update((char *)3, (uint64_t)v355, v340, (uint64_t)v20 + 57, v345, v357, v219, (uint64_t)(v20 + 396), *((double *)v20 + 194), (uint64_t)(v20 + 15326));
  NK_Update_Intermediate_Residual((void *)1, (uint64_t)v355, v21, (uint64_t)v20);
  NK_PR_Res_ReWeight(v149, (uint64_t)v148, v21, (uint64_t)v20);
  int v221 = *(_DWORD *)(v21 + 20);
  unsigned int v220 = *(_DWORD *)(v21 + 24);
  if (v221 != v220)
  {
    switch(v221)
    {
      case 0:
        goto LABEL_372;
      case 1:
        if (!v220) {
          break;
        }
        goto LABEL_372;
      case 2:
        if (v220 <= 1) {
          break;
        }
        goto LABEL_372;
      case 3:
        if (v220 <= 2) {
          break;
        }
        goto LABEL_372;
      case 4:
        if (v220 - 5 >= 3) {
          break;
        }
        goto LABEL_372;
      case 5:
        if ((v220 & 0xFFFFFFFE) != 6) {
          break;
        }
        goto LABEL_372;
      case 6:
        if (v220 == 7)
        {
LABEL_372:
          memset_pattern16(v20 + 4070, &unk_263D822F0, 0x400uLL);
          if (!*(unsigned char *)(v21 + 241) && *v351 <= *(unsigned __int16 *)(v21 + 16) && v20[468] == 1)
          {
            unsigned int v222 = *(_DWORD *)(v21 + 148);
            if (v222 >= *(_DWORD *)(v21 + 152)) {
              unsigned int v222 = *(_DWORD *)(v21 + 152);
            }
            if (v222 >= *(_DWORD *)(v21 + 156)) {
              unsigned int v222 = *(_DWORD *)(v21 + 156);
            }
            if (v222 >= 0xB)
            {
              NK_Meas_Outlier_Check(1, (uint64_t)v355, *((unsigned __int8 *)v20 + 56), v332, 0, 0);
              NK_Meas_ARP_Check(1u, v355, v332, (double *)v354, v326);
            }
          }
        }
        break;
      default:
        break;
    }
  }
  if (*v351 <= *(unsigned __int16 *)(v21 + 16))
  {
    uint64_t v225 = (uint64_t)(v20 + 15613);
    if (v20[468] != 1) {
      goto LABEL_390;
    }
    unsigned int v226 = *(_DWORD *)(v21 + 148);
    if (v226 >= *(_DWORD *)(v21 + 152)) {
      unsigned int v226 = *(_DWORD *)(v21 + 152);
    }
    if (v226 >= *(_DWORD *)(v21 + 156)) {
      unsigned int v226 = *(_DWORD *)(v21 + 156);
    }
    if (v226 >= 0xB && (v228 = *(_DWORD *)(v21 + 20), unsigned int v227 = *(_DWORD *)(v21 + 24), v228 != v227))
    {
      int v223 = v158;
      BOOL v224 = 1;
      switch(v228)
      {
        case 0:
          break;
        case 1:
          BOOL v224 = v227 != 0;
          break;
        case 2:
          BOOL v318 = v227 > 1;
          goto LABEL_617;
        case 3:
          BOOL v318 = v227 > 2;
LABEL_617:
          BOOL v224 = v318;
          break;
        case 4:
          BOOL v224 = v227 - 5 < 3;
          break;
        case 5:
          BOOL v321 = (v227 & 0xFFFFFFFE) == 6;
          goto LABEL_633;
        case 6:
          BOOL v321 = v227 == 7;
LABEL_633:
          BOOL v224 = v321;
          break;
        default:
          goto LABEL_390;
      }
    }
    else
    {
LABEL_390:
      int v223 = v158;
      BOOL v224 = 0;
    }
  }
  else
  {
    int v223 = v158;
    BOOL v224 = 0;
    uint64_t v225 = (uint64_t)(v20 + 15613);
  }
  NK_SV_Meas_Update((char *)1, (uint64_t)v355, v340, (uint64_t)v20 + 57, v332, v357, v224, (uint64_t)(v20 + 396), 0.0, (uint64_t)(v20 + 15326));
  *(unsigned char *)(v23 + 372) = *(unsigned char *)(v342 + 481);
  NK_Reject_DO_For_Rejected_PR(v340, (uint64_t)v355, v21, (uint64_t)v20);
  *(_OWORD *)(v20 + 13186) = 0u;
  int v230 = *(_DWORD *)(v21 + 20);
  unsigned int v229 = *(_DWORD *)(v21 + 24);
  if (v230 == v229) {
    goto LABEL_413;
  }
  switch(v230)
  {
    case 0:
      break;
    case 1:
      if (!v229) {
        goto LABEL_413;
      }
      break;
    case 2:
      if (v229 <= 1) {
        goto LABEL_413;
      }
      break;
    case 3:
      if (v229 <= 2) {
        goto LABEL_413;
      }
      break;
    case 4:
      if (v229 - 5 >= 3) {
        goto LABEL_413;
      }
      break;
    case 5:
      if ((v229 & 0xFFFFFFFE) != 6) {
        goto LABEL_413;
      }
      break;
    case 6:
      if (v229 != 7) {
        goto LABEL_413;
      }
      break;
    default:
      goto LABEL_413;
  }
  if (*v351 > *(unsigned __int16 *)(v21 + 16) || v20[468] != 1) {
    goto LABEL_413;
  }
  unsigned int v231 = *(_DWORD *)(v21 + 148);
  if (v231 >= *(_DWORD *)(v21 + 152)) {
    unsigned int v231 = *(_DWORD *)(v21 + 152);
  }
  if (v231 >= *(_DWORD *)(v21 + 156)) {
    unsigned int v231 = *(_DWORD *)(v21 + 156);
  }
  if (v231 <= 0xA) {
LABEL_413:
  }
    NK_SV_Meas_Check(v148, v21, (uint64_t)v20);
  unsigned int v232 = NK_SV_Meas_AP_Stats((void *)1, (uint64_t)v148, v21, (uint64_t)v20);
  *(unsigned char *)(v23 + 1) = v232;
  *(unsigned char *)(v23 + 2) = 0;
  unsigned int v233 = v223;
  if (v232)
  {
    char v234 = v232 - 1;
    *(unsigned char *)(v23 + 2) = v232 - 1;
    if (*(unsigned char *)(v23 + 7))
    {
      if (*(unsigned char *)(v23 + 12) && !*(_DWORD *)(v23 + 40))
      {
        char v234 = v232 - 2;
        *(unsigned char *)(v23 + 2) = v232 - 2;
      }
      if (*(unsigned char *)(v23 + 17) && !*(_DWORD *)(v23 + 44)) {
        *(unsigned char *)(v23 + 2) = v234 - 1;
      }
    }
    if (!*(unsigned char *)(v21 + 6)) {
      *(unsigned char *)(v21 + 6) = 1;
    }
  }
  if (*((double *)v20 + 848) > 10000.0 && *(unsigned char *)v349 && v20[15051] == 1)
  {
    char v235 = *((double *)v223 + 3) >= 900000000.0 ? 1 : v334 | v328;
    if ((v235 & 1) == 0)
    {
      int64x2_t v236 = vdupq_n_s64(0x41E2A05F20000000uLL);
      *(int64x2_t *)int v223 = v236;
      *(int64x2_t *)(v223 + 6) = v236;
      uint64_t v237 = p_NA;
      *(int64x2_t *)(p_NA + 576) = v236;
      if (*((unsigned char *)v223 + 80))
      {
        double v238 = dbl_263D822E0[*(_DWORD *)(v21 + 20) < 5u];
        if (*((double *)v223 + 15) < v238)
        {
          *((double *)v223 + 14) = v238;
          *((double *)v223 + 15) = v238;
          *(double *)(v237 + 624) = v238;
        }
      }
      if ((int)v20[467] >= 2) {
        v20[467] = 1;
      }
      *(unsigned char *)(v21 + 136) = 1;
      *(_DWORD *)(v21 + 140) = 38;
    }
  }
  if (v232 >= 3 && *v351 >= 0x1F && *((unsigned __int8 *)v20 + 1881) >= 0x1Bu)
  {
    char v239 = *(unsigned char *)v349 ? v334 | v328 : 1;
    if ((v239 & 1) == 0 && v20[15051] == 1)
    {
      *(_WORD *)(p_NA + 8) = 0;
      *(unsigned char *)char v349 = 0;
      *(_DWORD *)(v23 + 256) = 21;
      unsigned char *v344 = 0;
      *(_DWORD *)(v23 + 272) = 21;
      if ((int)v20[467] >= 2) {
        v20[467] = 1;
      }
      *(unsigned char *)(v21 + 136) = 1;
      *(_DWORD *)(v21 + 140) = 39;
    }
  }
  char v240 = NK_SV_Meas_AP_Stats((void *)2, v353, v21, (uint64_t)v20);
  *(unsigned char *)(v23 + 3) = v240;
  *(unsigned char *)(v23 + 5) = v240;
  char v241 = NK_SV_Meas_AP_Stats((void *)3, v353, v21, (uint64_t)v20);
  *(unsigned char *)(v23 + 4) = v241;
  *(unsigned char *)(v23 + 5) = *(unsigned char *)(v23 + 3) + v241;
  *(unsigned char *)(v23 + 10) = *(unsigned char *)(v23 + 9) + *(unsigned char *)(v23 + 8);
  *(unsigned char *)(v23 + 15) = *(unsigned char *)(v23 + 14) + *(unsigned char *)(v23 + 13);
  *(unsigned char *)(v23 + 20) = *(unsigned char *)(v23 + 19) + *(unsigned char *)(v23 + 18);
  *(unsigned char *)(v23 + 25) = *(unsigned char *)(v23 + 24) + *(unsigned char *)(v23 + 23);
  *(unsigned char *)(v23 + 30) = *(unsigned char *)(v23 + 29) + *(unsigned char *)(v23 + 28);
  int v242 = NK_VVel_Aiding_Required(v21, (uint64_t)v20, (uint64_t)(v341 + 56));
  *((unsigned char *)v341 + 224) = v242;
  if (v242
    && Vert_Meas_Update(9u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v341 + 224, v357->f64, (_WORD *)(v21 + 27094), -*((double *)v20 + 229)))
  {
    *(_DWORD *)(v23 + 64) = v341[57];
  }
  int v243 = (long long *)(v21 + 1600);
  int v244 = NK_AltP_Aiding_Required(v21, (uint64_t)v20, v342);
  *(unsigned char *)uint64_t v342 = v244;
  if (v244
    && Vert_Meas_Update(6u, (double *)v20 + 217, 0xCu, (unsigned __int8 *)v342, v357->f64, (_WORD *)(v21 + 27092), *((double *)v20 + 215)))
  {
    *(_DWORD *)(v23 + 60) = *(_DWORD *)(v342 + 4);
  }
  *(unsigned char *)(v342 + 72) = 0;
  NK_Comp_DOPS(v21, (uint64_t)v20);
  uint64_t v245 = (const double *)(v225 + 12);
  long long v246 = *v243;
  *(_OWORD *)(v225 + 28) = *(_OWORD *)(v21 + 1616);
  *(_OWORD *)(v225 + 12) = v246;
  long long v247 = *(_OWORD *)(v21 + 1632);
  long long v248 = *(_OWORD *)(v21 + 1648);
  long long v249 = *(_OWORD *)(v21 + 1664);
  *(_OWORD *)(v225 + 92) = *(_OWORD *)(v21 + 1680);
  *(_OWORD *)(v225 + 76) = v249;
  *(_OWORD *)(v225 + 60) = v248;
  *(_OWORD *)(v225 + 44) = v247;
  NK_Comp_Sol_Acc(v21, (uint64_t)v20);
  NK_Static_Filter(v21, (uint64_t)v20, a9);
  long long v250 = *v243;
  *(_OWORD *)(v225 + 28) = *(_OWORD *)(v21 + 1616);
  *(_OWORD *)(v225 + 12) = v250;
  long long v251 = *(_OWORD *)(v21 + 1632);
  long long v252 = *(_OWORD *)(v21 + 1648);
  long long v253 = *(_OWORD *)(v21 + 1664);
  *(_OWORD *)(v225 + 92) = *(_OWORD *)(v21 + 1680);
  *(_OWORD *)(v225 + 76) = v253;
  *(_OWORD *)(v225 + 60) = v252;
  *(_OWORD *)(v225 + 44) = v251;
  *(_OWORD *)(v21 + 1632) = 0u;
  *(_OWORD *)(v21 + 1648) = 0u;
  *(_OWORD *)(v21 + 1664) = 0u;
  *(_OWORD *)(v21 + 1680) = 0u;
  *int v243 = 0u;
  *(_OWORD *)(v21 + 1616) = 0u;
  NK_Validate_Cor((char *)v23, v329, v354, (uint64_t)(v20 + 434), *(void *)(v21 + 20), *v20, (unsigned char *)(v21 + 241), v338, (uint64_t)v348, (_WORD *)(v21 + 244), (uint64_t)a11, v225 + 12, (double *)v20 + 7692, (double *)v20 + 7680, v225, (uint64_t)(v20 + 15640), v20 + 15664, (unsigned int *)(v225 + 208), v20 + 15666,
    v20 + 15667,
    (unsigned int *)(v225 + 220),
    (uint64_t)v335);
  NK_ARP_Kalman(v355, (unsigned __int8 *)(v353 + 736), (uint64_t)v20, v21);
  if (*v329 > 1000000000.0)
  {
    *(void *)(v225 + 12) = 0;
    *(unsigned char *)uint64_t v225 = 0;
  }
  if (!*(unsigned char *)(v23 + 12) && !*(_DWORD *)(v23 + 36) && *((unsigned char *)v233 + 224) == 2 && !v233[57]
    || *((double *)v20 + 7669) > 1000000000.0)
  {
    *(void *)(v225 + 20) = 0;
    *(unsigned char *)(v225 + 1) = 0;
  }
  if (!*(unsigned char *)(v23 + 17) && !*(_DWORD *)(v23 + 36) && *((unsigned char *)v233 + 224) == 4 && !v233[57]
    || *((double *)v20 + 7670) > 1000000000.0)
  {
    *(void *)(v225 + 28) = 0;
    *(unsigned char *)(v225 + 2) = 0;
  }
  unsigned __int8 *v358 = *(unsigned char *)v225;
  v358[2] = *(unsigned char *)(v225 + 1);
  v358[16] = *(unsigned char *)(v225 + 2);
  v358[32] = *(unsigned char *)(v225 + 3);
  v358[1] = *(unsigned char *)(v225 + 6);
  *(void *)(v21 + 25920) = *(void *)(v225 + 12);
  unsigned int v254 = (const double *)(v225 + 20);
  *(void *)(v21 + 20112) = *(void *)(v225 + 20);
  unsigned int v255 = (const double *)(v225 + 28);
  *(void *)(v21 + 20128) = *(void *)(v225 + 28);
  *(void *)(v21 + 20144) = *(void *)(v225 + 36);
  long long v256 = *((_OWORD *)v20 + 3907);
  *(void *)(v21 + 25944) = *((void *)v20 + 7816);
  *(_OWORD *)(v21 + 25928) = v256;
  NK_Correct_State((double *)(v225 + 12), (unsigned char *)v225, v347);
  NK_Transform_State((uint64_t)v347);
  NK_Heading(v21, (int *)v20, *(_DWORD *)(a10 + 68));
  NK_DT_Synch_ProcNoise(v21, (uint64_t)v20);
  double v257 = *((double *)v20 + 209);
  double v258 = -0.5;
  if (v257 > 0.0) {
    double v258 = 0.5;
  }
  double v259 = v257 + v258;
  if (v259 <= 2147483650.0)
  {
    if (v259 >= -2147483650.0)
    {
      int v260 = (int)v259;
      double v261 = v20 + 15613;
      if (!(int)v259) {
        goto LABEL_482;
      }
      goto LABEL_475;
    }
    int v260 = 0x80000000;
  }
  else
  {
    int v260 = 0x7FFFFFFF;
  }
  double v261 = v20 + 15613;
LABEL_475:
  double v262 = (double)v260;
  double v263 = (double)v260 * 0.001;
  Inc_GPS_TOW(v263, (double *)v20 + 191, (__int16 *)v20 + 771);
  v388[0] = 0.0;
  if (!R8_EQ((const double *)v20 + 204, v388)) {
    *((double *)v20 + 204) = *((double *)v20 + 204) + *((double *)v20 + 208) * v263;
  }
  v388[0] = 0.0;
  if (!R8_EQ((const double *)v20 + 205, v388)) {
    *((double *)v20 + 205) = *((double *)v20 + 205) + *((double *)v20 + 208) * v263;
  }
  v388[0] = 0.0;
  if (!R8_EQ((const double *)v20 + 206, v388)) {
    *((double *)v20 + 206) = *((double *)v20 + 206) + *((double *)v20 + 208) * v263;
  }
  *((double *)v20 + 209) = *((double *)v20 + 209) - v262;
LABEL_482:
  NK_Set_Fix_Type(v261, (double *)v20 + 7680, v23, (uint64_t)v348, *(_DWORD *)(a10 + 1660), v261[52], v261[55], *(void *)(v21 + 20), *(double *)v233, *((double *)v233 + 14), *(unsigned __int16 *)(v21 + 16), v334 | v328, *((_DWORD *)v358 + 1758), v20[5], (unsigned char *)(v21 + 241), (_DWORD *)v358 + 1753, v351, (_DWORD *)(v21 + 27112), (int *)v20 + 15459,
    (int *)v20 + 15460);
  NK_Set_TTFF(v21, (uint64_t)v20);
  NK_Check_State(v324, v21, (uint64_t)v20);
  NK_Limited_Reset(v21, (uint64_t)v20, *(void *)(a10 + 60), *(double *)(a10 + 1712));
  if (*((unsigned char *)v20 + 1680))
  {
    uint64_t v264 = (unsigned __int8 *)v353;
  }
  else
  {
    uint64_t v264 = (unsigned __int8 *)v353;
    if (*(unsigned char *)(v23 + 7) && (v388[0] = 0.0, !R8_EQ(v245, v388)))
    {
      *((unsigned char *)v20 + 1680) = 1;
    }
    else
    {
      v388[0] = 0.0;
      if (R8_EQ(v245, v388))
      {
        *(void *)&__src[0] = 0;
        if (!R8_EQ((const double *)v20 + 204, (const double *)__src)) {
          *((void *)v20 + 204) = 0;
        }
      }
    }
  }
  if (!*((unsigned char *)v20 + 1681))
  {
    if (*(unsigned char *)(v23 + 12) && (v388[0] = 0.0, !R8_EQ(v254, v388)))
    {
      *((unsigned char *)v20 + 1681) = 1;
    }
    else
    {
      v388[0] = 0.0;
      if (R8_EQ(v254, v388))
      {
        *(void *)&__src[0] = 0;
        uint64_t v265 = a9;
        if (!R8_EQ((const double *)v20 + 205, (const double *)__src)) {
          *((void *)v20 + 205) = 0;
        }
        goto LABEL_486;
      }
    }
  }
  uint64_t v265 = a9;
LABEL_486:
  if (*((unsigned char *)v20 + 1682)) {
    goto LABEL_487;
  }
  if (*(unsigned char *)(v23 + 17))
  {
    v388[0] = 0.0;
    if (!R8_EQ(v255, v388))
    {
      *((unsigned char *)v20 + 1682) = 1;
      goto LABEL_487;
    }
  }
  v388[0] = 0.0;
  if (!R8_EQ(v255, v388))
  {
LABEL_487:
    uint64_t v266 = (uint64_t)a11;
    goto LABEL_488;
  }
  *(void *)&__src[0] = 0;
  uint64_t v266 = (uint64_t)a11;
  if (!R8_EQ((const double *)v20 + 206, (const double *)__src)) {
    *((void *)v20 + 206) = 0;
  }
LABEL_488:
  NK_Final_Check(v21, (uint64_t)v20, (_DWORD *)a10, v266, (uint64_t)v264, *(void *)(a10 + 60), *(double *)(a10 + 1704), *(double *)(a10 + 1712));
  NK_Set_Accuracy(*(_DWORD *)(a10 + 1764), v324, *(_DWORD *)(a10 + 68), v21, (uint64_t)v20);
  NK_Set_TOW_Status(v21, (uint64_t)v20);
  if (*((unsigned char *)v20 + 1540))
  {
    int v267 = v20[384];
    if (v267 >= 3 && (!R8_EQ((const double *)v20 + 191, (const double *)v20 + 4) || v267 != v20[5]))
    {
      LODWORD(__src[0]) = 0;
      LODWORD(v390[0]) = 0;
      v388[0] = 0.0;
      API_Get_UTC_Cor(1, v388);
      GPS_To_Glon_Time(0, *((__int16 *)v20 + 13), *((double *)v20 + 191), v388[0], (int *)v390, (int *)__src, (double *)v20 + 212);
      *((_WORD *)v20 + 845) = LOWORD(v390[0]);
      *((_WORD *)v20 + 846) = __src[0];
      *((unsigned char *)v20 + 1688) = 1;
      signed int v268 = v20[384];
      if ((int)v20[421] < v268 && (*(_DWORD *)(v352 + 8972) - 2) <= 4) {
        v20[421] = v268;
      }
    }
  }
  NK_Publish_Nav_Soln((uint64_t)v264, (uint64_t)v20, v21, v265);
  if (*((unsigned char *)v20 + 1864)) {
    *(unsigned char *)(v21 + 28) = 1;
  }
  NK_Validate_Fix(v264, v21, (uint64_t)v20, a10);
  *(unsigned char *)uint64_t v265 = *(unsigned char *)(v354 + 96);
  int v269 = *(unsigned __int8 *)(v354 + 97);
  *(unsigned char *)(v265 + 1) = v269;
  *(_WORD *)(v265 + 19) = *(_WORD *)(v354 + 110);
  if (v269)
  {
    *(void *)(v21 + 27344) = *(void *)(v265 + 368);
    *(_DWORD *)(v337 + 176) = *v20;
  }
  if (*v351)
  {
    unsigned int v270 = *(unsigned __int8 *)(v23 + 401);
    BOOL v271 = v358 + 7012;
    if (v270 <= 2) {
      ++*((_DWORD *)v358 + 1755);
    }
  }
  else
  {
    BOOL v271 = v358 + 7012;
    *((_DWORD *)v358 + 1755) = 0;
  }
  if (*(double *)(v21 + 27344) < 10.0 || *((_DWORD *)v358 + 1755) < 4u)
  {
    if (*v271 >= 0x10u)
    {
      *(unsigned char *)uint64_t v337 = 0;
      *(_DWORD *)(v337 + 4) = *v20;
      *(double *)(v21 + 27184) = *((double *)v20 + 208) * 299792458.0;
      *(void *)(v21 + 27192) = *((void *)v20 + 231);
    }
  }
  else
  {
    *(unsigned char *)uint64_t v337 = 1;
  }
  unsigned int v272 = v20[469];
  if (v272 && !*(_DWORD *)(v266 + 4)) {
    *(_DWORD *)(v266 + 4) = v272;
  }
  *(void *)(a12 + 24) = *(void *)(v265 + 32);
  *(void *)(a12 + 8) = *(void *)(v265 + 40);
  *(_WORD *)(a12 + 32) = *(_WORD *)(v265 + 62);
  *(unsigned char *)(a12 + 16) = *(unsigned char *)(v265 + 60);
  *(void *)(a12 + 40) = *(void *)(v265 + 48);
  *(_DWORD *)a12 = *(_DWORD *)(v265 + 56);
  double v273 = *v329;
  double v274 = *((double *)v20 + 7669);
  int v275 = *v329 > v274;
  if (*v329 > v274) {
    double v273 = *((double *)v20 + 7669);
  }
  if (v273 > *((double *)v20 + 7670)) {
    int v275 = 2;
  }
  if (v275 == 1)
  {
    uint64_t v276 = (void *)(v265 + 160);
  }
  else if (v275)
  {
    uint64_t v276 = (void *)(v265 + 168);
  }
  else
  {
    uint64_t v276 = (void *)(v265 + 152);
  }
  *(void *)(a12 + 48) = *v276;
  *(_DWORD *)(a12 + 82) = *(_DWORD *)(v265 + 210);
  *(unsigned char *)(a12 + 80) = *(unsigned char *)(v265 + 208);
  *(void *)(a12 + 88) = *(void *)(v265 + 216);
  *(_DWORD *)(a12 + 76) = *(_DWORD *)(v265 + 204);
  *(void *)(a12 + 56) = *(void *)(v265 + 184);
  *(unsigned char *)(a12 + 4) = *((unsigned char *)v20 + 24);
  double v277 = *(double *)(v354 + 216);
  if (v277 >= 9999000.0)
  {
    uint64_t v279 = (int)v20[5];
    if (v279 >= 0xC) {
      __assert_rtn("Generate_DollarG_Message", "Nav_Kalman_Update.cpp", 3115, "FALSE");
    }
    unsigned int v278 = dword_263D82360[v279];
  }
  else
  {
    unsigned int v278 = (int)fmin(v277 * 0.00000333564095, 999999999.0);
  }
  unint64_t v280 = (char *)g_CB_GDbg;
  char v281 = 36;
  uint64_t v282 = 1u;
  do
  {
    g_CB_GDbg = (uint64_t)(v280 + 1);
    *unint64_t v280 = v281;
    unint64_t v280 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
    {
      unint64_t v280 = (char *)qword_26AA2DC78;
      g_CB_GDbg = qword_26AA2DC78;
    }
    char v281 = aG_0[v282++];
  }
  while (v282 != 4);
  sprintf_2d(&g_CB_GDbg, (int)((*((double *)v20 + 191) + 0.0005) * 1000.0));
  uint64_t v283 = (unsigned char *)g_CB_GDbg++;
  unsigned char *v283 = 32;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    g_CB_GDbg = qword_26AA2DC78;
  }
  sprintf_1u(&g_CB_GDbg, v20[1]);
  uint64_t v284 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v284 = 32;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    g_CB_GDbg = qword_26AA2DC78;
  }
  sprintf_2d(&g_CB_GDbg, v278);
  uint64_t v285 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v285 = 32;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80) {
    g_CB_GDbg = qword_26AA2DC78;
  }
  sprintf_1u(&g_CB_GDbg, *v20);
  int v286 = (unsigned char *)g_CB_GDbg++;
  *int v286 = 10;
  uint64_t v287 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AA2DC80)
  {
    uint64_t v287 = (unsigned char *)qword_26AA2DC78;
    g_CB_GDbg = qword_26AA2DC78;
  }
  unsigned char *v287 = 0;
  GNB_Debug_Flush_Check();
  if (!*(_DWORD *)(v21 + 152))
  {
    *(_DWORD *)(v21 + 183) = *(_DWORD *)v322;
    *(_WORD *)(v21 + 187) = *(_WORD *)(v322 + 4);
  }
  uint64_t result = (uint64_t)NK_Set_Aid_Data((_DWORD *)v21, (int *)v20, v21 + 280);
  int v289 = v20[384];
  if (v289 >= 1)
  {
    uint64_t result = Core_Save_ApxTime(*((unsigned __int8 *)v20 + 1540), v289, *((_WORD *)v20 + 771), v20[379], *((double *)v20 + 191));
    int v290 = *(_DWORD *)(v352 + 8972);
    if (v290 != 3 && (v290 - 7) >= 0xFFFFFFFB)
    {
      uint64_t v291 = 0;
      LODWORD(v292) = 0;
      uint64_t v293 = p_NV;
      uint64_t v294 = *(void *)(v352 + 8984);
      *(_OWORD *)(p_NV + 168) = *(_OWORD *)(v352 + 8968);
      *(void *)(v293 + 184) = v294;
      uint64_t v295 = v293 + 168;
      __int16 v296 = -9871;
      do
      {
        int v297 = *(unsigned __int8 *)(v295 + v291) ^ HIBYTE(v296);
        __int16 v296 = -12691 * (v296 + (*(unsigned __int8 *)(v295 + v291) ^ HIBYTE(v296))) + 22719;
        uint64_t v292 = (v292 + v297);
        ++v291;
      }
      while (v291 != 24);
      *(void *)(v293 + 160) = v292;
    }
  }
  if (*(unsigned char *)(a12 + 16) && *(__int16 *)(a12 + 32) >= 1717 && (int)v20[384] >= 9 && *v20 != *(_DWORD *)(v323 + 4))
  {
    double v298 = *((double *)v20 + 191) * 1000.0;
    double v299 = -0.5;
    if (v298 > 0.0) {
      double v299 = 0.5;
    }
    double v300 = v298 + v299;
    if (v300 <= 2147483650.0)
    {
      if (v300 >= -2147483650.0) {
        int v301 = (int)v300;
      }
      else {
        int v301 = 0x80000000;
      }
    }
    else
    {
      int v301 = 0x7FFFFFFF;
    }
    uint64_t v302 = 0;
    LODWORD(v303) = 0;
    uint64_t v304 = p_NV;
    uint64_t v305 = (void *)(p_NV + 33192);
    *(_DWORD *)(p_NV + 33200) = v301 - *v20;
    *(double *)((char *)v305 + 12) = *v347;
    uint64_t v306 = v304 + 33200;
    __int16 v307 = -9871;
    do
    {
      int v308 = *(unsigned __int8 *)(v306 + v302) ^ HIBYTE(v307);
      __int16 v307 = -12691 * (v307 + (*(unsigned __int8 *)(v306 + v302) ^ HIBYTE(v307))) + 22719;
      uint64_t v303 = (v303 + v308);
      ++v302;
    }
    while (v302 != 16);
    *uint64_t v305 = v303;
  }
  int v309 = v20[467];
  if (v309 == 3)
  {
    if (*v271 && (int)v20[384] >= 3)
    {
      if (*(double *)(v354 + 264) < 10.0)
      {
        uint64_t result = Core_Save_Clk_Drift(1, (int)*((double *)v20 + 191) + 604800 * *((__int16 *)v20 + 771), *((double *)v20 + 208));
        *(void *)(a10 + 1704) = *((void *)v20 + 208);
        double v310 = (double)*(unsigned __int16 *)(a10 + 248) * 0.000000001;
        if (!*(_WORD *)(a10 + 248)) {
          double v310 = 0.0000001;
        }
        *(double *)(a10 + 1712) = v310;
      }
      if (*(double *)(v354 + 200) < 400.0)
      {
        *((_DWORD *)v358 + 1760) = v20[378];
        long long v311 = *(_OWORD *)(v20 + 426);
        *(void *)(v21 + 27168) = *((void *)v20 + 215);
        *(_OWORD *)(v21 + 27152) = v311;
      }
    }
  }
  else if (v309 <= 1)
  {
    if (*(_WORD *)(a10 + 248))
    {
      *(double *)(a10 + 1712) = (double)*(unsigned __int16 *)(a10 + 248) * 0.000000001;
    }
    else if (*v351 >= 0x385)
    {
      *(void *)(a10 + 1712) = 0x3EA0C6F7A0B5ED8ELL;
    }
  }
  if (v20[468] == 1)
  {
    if (*((unsigned char *)v20 + 1540))
    {
      if ((int)v20[384] >= 10 && v20[467] == 3 && *v271 >= 0xAu)
      {
        double v312 = *((double *)v20 + 207);
        if (fabs(v312) <= 0.000000066712819
          && *(double *)(v354 + 200) <= 10.0
          && *(double *)(v354 + 208) <= 10.0
          && *(double *)(v354 + 224) <= 1.0)
        {
          uint64_t result = Core_Save_Clk_L5L1(1, (int)*((double *)v20 + 191) + 604800 * *((__int16 *)v20 + 771), v312);
        }
      }
    }
  }
  uint64_t v313 = *((void *)v20 + 7491);
  *(_DWORD *)(a10 + 2064) = v20[14984];
  *(void *)(a10 + 2056) = v313;
  uint64_t v314 = *(void *)(v20 + 14985);
  *(_DWORD *)(a10 + 2076) = v20[14987];
  *(void *)(a10 + 2068) = v314;
  uint64_t v315 = *((void *)v20 + 7494);
  *(_DWORD *)(a10 + 2088) = v20[14990];
  *(void *)(a10 + 2080) = v315;
  return result;
}

uint64_t XofAlmanacData::Decode(uint64_t **a1, void *a2, _DWORD *a3, unsigned __int8 *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v8 = a4[17];
  memset(v27, 0, sizeof(v27));
  XofGpsQzssAlmCodec::XofGpsQzssAlmCodec((XofGpsQzssAlmCodec *)v27);
  int v9 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGpsQzssAlmanac>,XofGpsQzssAlmCodec>((uint64_t)a1, a2, a3, v8, 0, (uint64_t)v27, a1);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v27);
  if (v9 != 1) {
    return 5;
  }
  int v10 = a4[113];
  memset(v26, 0, sizeof(v26));
  XofGpsQzssAlmCodec::XofGpsQzssAlmCodec((XofGpsQzssAlmCodec *)v26);
  int v11 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGpsQzssAlmanac>,XofGpsQzssAlmCodec>((uint64_t)a1, a2, a3, v10, 2u, (uint64_t)v26, a1 + 9);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v26);
  if (v11 != 1) {
    return 5;
  }
  int v12 = a4[161];
  memset(v24, 0, sizeof(v24));
  uint64_t v25 = 0;
  XofGalileoAlmCodec::XofGalileoAlmCodec((XofGalileoAlmCodec *)v24);
  int v13 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGalileoAlmanac>,XofGalileoAlmCodec>((uint64_t)a1, a2, a3, v12, 3u, (uint64_t)v24, a1 + 6);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v24);
  if (v13 != 1) {
    return 5;
  }
  int v14 = a4[209];
  bzero(v23, 0x280uLL);
  XofGlonassAlmCodec::XofGlonassAlmCodec((XofGlonassAlmCodec *)v23);
  int v15 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGlonassAlmanac>,XofGlonassAlmCodec>((uint64_t)a1, a2, a3, v14, 4u, (uint64_t)v23, a1 + 3);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>::~__tuple_impl((uint64_t)v23);
  if (v15 != 1) {
    return 5;
  }
  int v16 = a4[257];
  bzero(v22, 0x250uLL);
  XofBeidouAlmCodec::XofBeidouAlmCodec((XofBeidouAlmCodec *)v22);
  int v17 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofBeidouAlmanac>,XofBeidouAlmCodec>((uint64_t)a1, a2, a3, v16, 5u, (uint64_t)v22, a1 + 12);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v22);
  if (v17 != 1) {
    return 5;
  }
  int v18 = a4[305];
  bzero(v21, 0x230uLL);
  XofNavicAlmCodec::XofNavicAlmCodec((XofNavicAlmCodec *)v21);
  int v19 = XofAlmanacData::DecodeSVs<std::map<unsigned char,XofNavicAlmanac>,XofNavicAlmCodec>((uint64_t)a1, a2, a3, v18, 6u, (uint64_t)v21, a1 + 15);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)v21);
  if (v19 == 1) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C8F908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGpsQzssAlmanac>,XofGpsQzssAlmCodec>(uint64_t a1, void *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 1;
  }
  int v10 = 0;
  long long v53 = a7 + 1;
  uint64_t v66 = a6 + 40;
  uint64_t v67 = a6 + 8;
  long long v51 = (unsigned __int8 *)(a6 + 64);
  long long v52 = (unsigned __int8 *)(a6 + 32);
  uint64_t v64 = a6 + 104;
  uint64_t v65 = a6 + 72;
  long long v49 = (unsigned __int16 *)(a6 + 128);
  long long v50 = (unsigned __int8 *)(a6 + 96);
  uint64_t v62 = a6 + 168;
  uint64_t v63 = a6 + 136;
  long long v46 = (__int16 *)(a6 + 192);
  long long v47 = (__int16 *)(a6 + 160);
  long long v45 = (unsigned __int16 *)(a6 + 224);
  uint64_t v60 = a6 + 232;
  uint64_t v61 = a6 + 200;
  long long v11 = 0uLL;
  long long v71 = (int *)(a6 + 296);
  long long v72 = (unsigned int *)(a6 + 256);
  uint64_t v58 = a6 + 312;
  uint64_t v59 = a6 + 272;
  long long v69 = (int *)(a6 + 376);
  long long v70 = (int *)(a6 + 336);
  uint64_t v56 = a6 + 392;
  uint64_t v57 = a6 + 352;
  uint64_t v55 = a6 + 424;
  long long v34 = (__int16 *)(a6 + 448);
  long long v35 = (__int16 *)(a6 + 416);
  uint64_t v54 = a6 + 456;
  while (1)
  {
    int v68 = v10;
    *(_OWORD *)long long v90 = v11;
    *(_OWORD *)&v90[16] = v11;
    *(_OWORD *)long long v89 = v11;
    *(_OWORD *)&v89[16] = v11;
    *(_OWORD *)&v88[16] = v11;
    *(_OWORD *)&v88[32] = v11;
    long long v87 = v11;
    *(_OWORD *)uint64_t v88 = v11;
    *(_OWORD *)&v85[32] = v11;
    long long v86 = v11;
    *(_OWORD *)long long v85 = v11;
    *(_OWORD *)&v85[16] = v11;
    long long v83 = v11;
    long long v84 = v11;
    *(_OWORD *)long long v82 = v11;
    *(_OWORD *)&v82[16] = v11;
    *(_OWORD *)long long v81 = v11;
    *(_OWORD *)&v81[16] = v11;
    *(_OWORD *)long long v80 = v11;
    *(_OWORD *)&v80[16] = v11;
    *(_OWORD *)long long v79 = v11;
    *(_OWORD *)&v79[16] = v11;
    *(_OWORD *)&v78[16] = v11;
    *(_OWORD *)&v77[16] = v11;
    *(_OWORD *)long long v78 = v11;
    *(_OWORD *)&double v76[16] = v11;
    *(_OWORD *)long long v77 = v11;
    *(_OWORD *)&char __str[16] = v11;
    *(_OWORD *)uint64_t v76 = v11;
    *(_OWORD *)__str = v11;
    XofGpsQzssAlmCodec::XofGpsQzssAlmCodec((XofGpsQzssAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0) {
      operator delete(*(void **)v67);
    }
    *(_OWORD *)uint64_t v67 = *(_OWORD *)&__str[8];
    *(void *)(v67 + 16) = *(void *)&__str[24];
    __str[31] = 0;
    char __str[8] = 0;
    *(_DWORD *)(a6 + 32) = *(_DWORD *)v76;
    if (*(char *)(a6 + 63) < 0) {
      operator delete(*(void **)v66);
    }
    *(_OWORD *)uint64_t v66 = *(_OWORD *)&v76[8];
    *(void *)(v66 + 16) = *(void *)&v76[24];
    v76[31] = 0;
    v76[8] = 0;
    *(_DWORD *)(a6 + 64) = *(_DWORD *)v77;
    if (*(char *)(a6 + 95) < 0) {
      operator delete(*(void **)v65);
    }
    *(_OWORD *)uint64_t v65 = *(_OWORD *)&v77[8];
    *(void *)(v65 + 16) = *(void *)&v77[24];
    v77[31] = 0;
    v77[8] = 0;
    *(_DWORD *)(a6 + 96) = *(_DWORD *)v78;
    if (*(char *)(a6 + 127) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)uint64_t v64 = *(_OWORD *)&v78[8];
    *(void *)(v64 + 16) = *(void *)&v78[24];
    v78[31] = 0;
    v78[8] = 0;
    *(void *)(a6 + 128) = *(void *)v79;
    if (*(char *)(a6 + 159) < 0) {
      operator delete(*(void **)v63);
    }
    *(_OWORD *)uint64_t v63 = *(_OWORD *)&v79[8];
    *(void *)(v63 + 16) = *(void *)&v79[24];
    v79[31] = 0;
    v79[8] = 0;
    *(void *)(a6 + 160) = *(void *)v80;
    if (*(char *)(a6 + 191) < 0) {
      operator delete(*(void **)v62);
    }
    *(_OWORD *)uint64_t v62 = *(_OWORD *)&v80[8];
    *(void *)(v62 + 16) = *(void *)&v80[24];
    v80[31] = 0;
    v80[8] = 0;
    *(void *)(a6 + 192) = *(void *)v81;
    if (*(char *)(a6 + 223) < 0) {
      operator delete(*(void **)v61);
    }
    *(_OWORD *)uint64_t v61 = *(_OWORD *)&v81[8];
    *(void *)(v61 + 16) = *(void *)&v81[24];
    v81[31] = 0;
    v81[8] = 0;
    *(void *)(a6 + 224) = *(void *)v82;
    if (*(char *)(a6 + 255) < 0) {
      operator delete(*(void **)v60);
    }
    *(_OWORD *)uint64_t v60 = *(_OWORD *)&v82[8];
    *(void *)(v60 + 16) = *(void *)&v82[24];
    v82[31] = 0;
    v82[8] = 0;
    *(_OWORD *)long long v72 = v83;
    if (*(char *)(a6 + 295) < 0) {
      operator delete(*(void **)v59);
    }
    *(_OWORD *)uint64_t v59 = v84;
    *(void *)(v59 + 16) = *(void *)v85;
    v85[7] = 0;
    LOBYTE(v84) = 0;
    *(_OWORD *)long long v71 = *(_OWORD *)&v85[8];
    if (*(char *)(a6 + 335) < 0) {
      operator delete(*(void **)v58);
    }
    *(_OWORD *)uint64_t v58 = *(_OWORD *)&v85[24];
    *(void *)(v58 + 16) = *(void *)&v85[40];
    v85[47] = 0;
    v85[24] = 0;
    *(_OWORD *)long long v70 = v86;
    if (*(char *)(a6 + 375) < 0) {
      operator delete(*(void **)v57);
    }
    *(_OWORD *)uint64_t v57 = v87;
    *(void *)(v57 + 16) = *(void *)v88;
    v88[7] = 0;
    LOBYTE(v87) = 0;
    *(_OWORD *)long long v69 = *(_OWORD *)&v88[8];
    if (*(char *)(a6 + 415) < 0) {
      operator delete(*(void **)v56);
    }
    *(_OWORD *)uint64_t v56 = *(_OWORD *)&v88[24];
    *(void *)(v56 + 16) = *(void *)&v88[40];
    v88[47] = 0;
    v88[24] = 0;
    *(void *)(a6 + 416) = *(void *)v89;
    if (*(char *)(a6 + 447) < 0) {
      operator delete(*(void **)v55);
    }
    *(_OWORD *)uint64_t v55 = *(_OWORD *)&v89[8];
    *(void *)(v55 + 16) = *(void *)&v89[24];
    v89[31] = 0;
    v89[8] = 0;
    *(void *)(a6 + 448) = *(void *)v90;
    if (*(char *)(a6 + 479) < 0) {
      operator delete(*(void **)v54);
    }
    *(_OWORD *)uint64_t v54 = *(_OWORD *)&v90[8];
    *(void *)(v54 + 16) = *(void *)&v90[24];
    v90[31] = 0;
    v90[8] = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v52, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v51, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v50, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v49, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v46, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v45, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v72, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v71, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v70, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v69, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v34, a2, a3) != 1)
    {
      break;
    }
    unsigned int v12 = *(unsigned __int8 *)(a6 + 3);
    int v13 = v53;
    int v14 = *v53;
    if (*v53)
    {
      int v15 = v53;
      int v16 = *v53;
      do
      {
        unsigned int v17 = *((unsigned __int8 *)v16 + 28);
        BOOL v18 = v17 >= v12;
        if (v17 >= v12) {
          int v19 = (uint64_t **)v16;
        }
        else {
          int v19 = (uint64_t **)(v16 + 1);
        }
        if (v18) {
          int v15 = (uint64_t **)v16;
        }
        int v16 = *v19;
      }
      while (*v19);
      int v13 = v53;
      if (v15 != v53 && v12 >= *((unsigned __int8 *)v15 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v12);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    char v20 = *(unsigned char *)(a6 + 35);
    char v21 = *(unsigned char *)(a6 + 67);
    __int16 v43 = *(_WORD *)(a6 + 134);
    char v44 = *(unsigned char *)(a6 + 99);
    __int16 v41 = *(_WORD *)(a6 + 198);
    __int16 v42 = *(_WORD *)(a6 + 166);
    int v39 = *(_DWORD *)(a6 + 308);
    int v40 = *(_DWORD *)(a6 + 268);
    int v37 = *(_DWORD *)(a6 + 388);
    int v38 = *(_DWORD *)(a6 + 348);
    __int16 v36 = *(_WORD *)(a6 + 422);
    int v22 = v13;
    __int16 v23 = *(_WORD *)(a6 + 454);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t **)v14;
          unsigned int v24 = *((unsigned __int8 *)v14 + 28);
          if (v24 <= v12) {
            break;
          }
          int v14 = *v13;
          int v22 = v13;
          if (!*v13) {
            goto LABEL_63;
          }
        }
        if (v24 >= v12) {
          break;
        }
        int v14 = v13[1];
        if (!v14)
        {
          int v22 = v13 + 1;
          goto LABEL_63;
        }
      }
    }
    else
    {
LABEL_63:
      uint64_t v25 = operator new(0x40uLL);
      v25[28] = v12;
      v25[32] = v12;
      v25[33] = v20;
      v25[34] = v21;
      v25[35] = v44;
      *((_WORD *)v25 + 18) = v43;
      *((_WORD *)v25 + 19) = v42;
      *((_WORD *)v25 + 20) = v41;
      *((_DWORD *)v25 + 11) = v40;
      *((_DWORD *)v25 + 12) = v39;
      *((_DWORD *)v25 + 13) = v38;
      *((_DWORD *)v25 + 14) = v37;
      *((_WORD *)v25 + 30) = v36;
      *((_WORD *)v25 + 31) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v13, v22, (uint64_t *)v25);
    }
    int v10 = v68 + 1;
    long long v11 = 0uLL;
    if (v68 + 1 == a4) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v27 = mach_continuous_time();
    if (a5 > 7) {
      uint64_t v28 = "   ";
    }
    else {
      uint64_t v28 = off_2655E6F10[a5];
    }
    double v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v74 >= 0) {
      long long v30 = __p;
    }
    else {
      long long v30 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v68 + 1);
    if (v74 < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGalileoAlmanac>,XofGalileoAlmCodec>(uint64_t a1, void *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 1;
  }
  int v10 = 0;
  uint64_t v58 = a7 + 1;
  uint64_t v72 = a6 + 40;
  uint64_t v73 = a6 + 8;
  uint64_t v56 = (unsigned __int16 *)(a6 + 64);
  uint64_t v57 = (unsigned __int8 *)(a6 + 32);
  long long v75 = (unsigned int *)(a6 + 96);
  uint64_t v70 = a6 + 112;
  uint64_t v71 = a6 + 72;
  uint64_t v55 = (unsigned __int16 *)(a6 + 136);
  long long v53 = (__int16 *)(a6 + 168);
  uint64_t v68 = a6 + 176;
  uint64_t v69 = a6 + 144;
  long long v51 = (unsigned __int8 *)(a6 + 232);
  long long v52 = (__int16 *)(a6 + 200);
  uint64_t v66 = a6 + 240;
  uint64_t v67 = a6 + 208;
  uint64_t v65 = a6 + 272;
  long long v49 = (__int16 *)(a6 + 296);
  long long v50 = (unsigned __int8 *)(a6 + 264);
  long long v11 = 0uLL;
  long long v48 = (__int16 *)(a6 + 328);
  uint64_t v63 = a6 + 336;
  uint64_t v64 = a6 + 304;
  long long v47 = (__int16 *)(a6 + 360);
  __int16 v36 = (__int16 *)(a6 + 392);
  uint64_t v61 = a6 + 400;
  uint64_t v62 = a6 + 368;
  long long v34 = (__int16 *)(a6 + 456);
  long long v35 = (__int16 *)(a6 + 424);
  uint64_t v59 = a6 + 464;
  uint64_t v60 = a6 + 432;
  while (1)
  {
    int v74 = v10;
    uint64_t v105 = 0;
    long long v103 = v11;
    long long v104 = v11;
    long long v101 = v11;
    long long v102 = v11;
    long long v99 = v11;
    long long v100 = v11;
    long long v97 = v11;
    long long v98 = v11;
    long long v95 = v11;
    long long v96 = v11;
    long long v93 = v11;
    long long v94 = v11;
    long long v91 = v11;
    long long v92 = v11;
    long long v89 = v11;
    long long v90 = v11;
    long long v87 = v11;
    long long v88 = v11;
    long long v85 = v11;
    long long v86 = v11;
    long long v83 = v11;
    long long v84 = v11;
    long long v82 = v11;
    *(_OWORD *)&v80[16] = v11;
    long long v81 = v11;
    *(_OWORD *)&v79[16] = v11;
    *(_OWORD *)long long v80 = v11;
    *(_OWORD *)&char __str[16] = v11;
    *(_OWORD *)long long v79 = v11;
    *(_OWORD *)__str = v11;
    XofGalileoAlmCodec::XofGalileoAlmCodec((XofGalileoAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0) {
      operator delete(*(void **)v73);
    }
    *(_OWORD *)uint64_t v73 = *(_OWORD *)&__str[8];
    *(void *)(v73 + 16) = *(void *)&__str[24];
    __str[31] = 0;
    char __str[8] = 0;
    *(_DWORD *)(a6 + 32) = *(_DWORD *)v79;
    if (*(char *)(a6 + 63) < 0) {
      operator delete(*(void **)v72);
    }
    *(_OWORD *)uint64_t v72 = *(_OWORD *)&v79[8];
    *(void *)(v72 + 16) = *(void *)&v79[24];
    v79[31] = 0;
    v79[8] = 0;
    *(void *)(a6 + 64) = *(void *)v80;
    if (*(char *)(a6 + 95) < 0) {
      operator delete(*(void **)v71);
    }
    *(_OWORD *)uint64_t v71 = *(_OWORD *)&v80[8];
    *(void *)(v71 + 16) = *(void *)&v80[24];
    v80[31] = 0;
    v80[8] = 0;
    *(_OWORD *)long long v75 = v81;
    if (*(char *)(a6 + 135) < 0) {
      operator delete(*(void **)v70);
    }
    *(_OWORD *)uint64_t v70 = v82;
    *(void *)(v70 + 16) = v83;
    BYTE7(v83) = 0;
    LOBYTE(v82) = 0;
    *(void *)(a6 + 136) = *((void *)&v83 + 1);
    if (*(char *)(a6 + 167) < 0) {
      operator delete(*(void **)v69);
    }
    *(_OWORD *)uint64_t v69 = v84;
    *(void *)(v69 + 16) = v85;
    BYTE7(v85) = 0;
    LOBYTE(v84) = 0;
    *(void *)(a6 + 168) = *((void *)&v85 + 1);
    if (*(char *)(a6 + 199) < 0) {
      operator delete(*(void **)v68);
    }
    *(_OWORD *)uint64_t v68 = v86;
    *(void *)(v68 + 16) = v87;
    BYTE7(v87) = 0;
    LOBYTE(v86) = 0;
    *(void *)(a6 + 200) = *((void *)&v87 + 1);
    if (*(char *)(a6 + 231) < 0) {
      operator delete(*(void **)v67);
    }
    *(_OWORD *)uint64_t v67 = v88;
    *(void *)(v67 + 16) = v89;
    BYTE7(v89) = 0;
    LOBYTE(v88) = 0;
    *(_DWORD *)(a6 + 232) = DWORD2(v89);
    if (*(char *)(a6 + 263) < 0) {
      operator delete(*(void **)v66);
    }
    *(_OWORD *)uint64_t v66 = v90;
    *(void *)(v66 + 16) = v91;
    BYTE7(v91) = 0;
    LOBYTE(v90) = 0;
    *(_DWORD *)(a6 + 264) = DWORD2(v91);
    if (*(char *)(a6 + 295) < 0) {
      operator delete(*(void **)v65);
    }
    *(_OWORD *)uint64_t v65 = v92;
    *(void *)(v65 + 16) = v93;
    BYTE7(v93) = 0;
    LOBYTE(v92) = 0;
    *(void *)(a6 + 296) = *((void *)&v93 + 1);
    if (*(char *)(a6 + 327) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)uint64_t v64 = v94;
    *(void *)(v64 + 16) = v95;
    BYTE7(v95) = 0;
    LOBYTE(v94) = 0;
    *(void *)(a6 + 328) = *((void *)&v95 + 1);
    if (*(char *)(a6 + 359) < 0) {
      operator delete(*(void **)v63);
    }
    *(_OWORD *)uint64_t v63 = v96;
    *(void *)(v63 + 16) = v97;
    BYTE7(v97) = 0;
    LOBYTE(v96) = 0;
    *(void *)(a6 + 360) = *((void *)&v97 + 1);
    if (*(char *)(a6 + 391) < 0) {
      operator delete(*(void **)v62);
    }
    *(_OWORD *)uint64_t v62 = v98;
    *(void *)(v62 + 16) = v99;
    BYTE7(v99) = 0;
    LOBYTE(v98) = 0;
    *(void *)(a6 + 392) = *((void *)&v99 + 1);
    if (*(char *)(a6 + 423) < 0) {
      operator delete(*(void **)v61);
    }
    *(_OWORD *)uint64_t v61 = v100;
    *(void *)(v61 + 16) = v101;
    BYTE7(v101) = 0;
    LOBYTE(v100) = 0;
    *(void *)(a6 + 424) = *((void *)&v101 + 1);
    if (*(char *)(a6 + 455) < 0) {
      operator delete(*(void **)v60);
    }
    *(_OWORD *)uint64_t v60 = v102;
    *(void *)(v60 + 16) = v103;
    BYTE7(v103) = 0;
    LOBYTE(v102) = 0;
    *(void *)(a6 + 456) = *((void *)&v103 + 1);
    if (*(char *)(a6 + 487) < 0) {
      operator delete(*(void **)v59);
    }
    *(_OWORD *)uint64_t v59 = v104;
    *(void *)(v59 + 16) = v105;
    HIBYTE(v105) = 0;
    LOBYTE(v104) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v57, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v56, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v75, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v55, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v53, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v52, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v51, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v50, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v49, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v48, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v36, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v34, a2, a3) != 1)
    {
      break;
    }
    unsigned int v12 = *(unsigned __int8 *)(a6 + 3);
    int v13 = v58;
    int v14 = *v58;
    if (*v58)
    {
      int v15 = v58;
      int v16 = *v58;
      do
      {
        unsigned int v17 = *((unsigned __int8 *)v16 + 28);
        BOOL v18 = v17 >= v12;
        if (v17 >= v12) {
          int v19 = (uint64_t **)v16;
        }
        else {
          int v19 = (uint64_t **)(v16 + 1);
        }
        if (v18) {
          int v15 = (uint64_t **)v16;
        }
        int v16 = *v19;
      }
      while (*v19);
      int v13 = v58;
      if (v15 != v58 && v12 >= *((unsigned __int8 *)v15 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v12);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    char v20 = *(unsigned char *)(a6 + 35);
    __int16 v21 = *(_WORD *)(a6 + 142);
    __int16 v45 = *(_WORD *)(a6 + 174);
    int v46 = *(_DWORD *)(a6 + 108);
    char v43 = *(unsigned char *)(a6 + 235);
    __int16 v44 = *(_WORD *)(a6 + 206);
    __int16 v41 = *(_WORD *)(a6 + 302);
    char v42 = *(unsigned char *)(a6 + 267);
    __int16 v39 = *(_WORD *)(a6 + 366);
    __int16 v40 = *(_WORD *)(a6 + 334);
    __int16 v37 = *(_WORD *)(a6 + 430);
    __int16 v38 = *(_WORD *)(a6 + 398);
    int v22 = v13;
    __int16 v23 = *(_WORD *)(a6 + 462);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t **)v14;
          unsigned int v24 = *((unsigned __int8 *)v14 + 28);
          if (v24 <= v12) {
            break;
          }
          int v14 = *v13;
          int v22 = v13;
          if (!*v13) {
            goto LABEL_66;
          }
        }
        if (v24 >= v12) {
          break;
        }
        int v14 = v13[1];
        if (!v14)
        {
          int v22 = v13 + 1;
          goto LABEL_66;
        }
      }
    }
    else
    {
LABEL_66:
      uint64_t v25 = operator new(0x40uLL);
      v25[28] = v12;
      v25[32] = v12;
      v25[33] = v20;
      *((_DWORD *)v25 + 9) = v46;
      *((_WORD *)v25 + 20) = v21;
      *((_WORD *)v25 + 21) = v45;
      *((_WORD *)v25 + 22) = v44;
      v25[46] = v43;
      v25[47] = v42;
      *((_WORD *)v25 + 24) = v41;
      *((_WORD *)v25 + 25) = v40;
      *((_WORD *)v25 + 26) = v39;
      *((_WORD *)v25 + 27) = v38;
      *((_WORD *)v25 + 28) = v37;
      *((_WORD *)v25 + 29) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v13, v22, (uint64_t *)v25);
    }
    int v10 = v74 + 1;
    long long v11 = 0uLL;
    if (v74 + 1 == a4) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v27 = mach_continuous_time();
    if (a5 > 7) {
      uint64_t v28 = "   ";
    }
    else {
      uint64_t v28 = off_2655E6F10[a5];
    }
    double v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v77 >= 0) {
      long long v30 = __p;
    }
    else {
      long long v30 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v74 + 1);
    if (v77 < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofGlonassAlmanac>,XofGlonassAlmCodec>(uint64_t a1, void *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 1;
  }
  int v10 = 0;
  uint64_t v72 = a6 + 8;
  long long v53 = a7 + 1;
  uint64_t v71 = a6 + 40;
  long long v51 = (unsigned __int8 *)(a6 + 64);
  long long v52 = (unsigned __int8 *)(a6 + 32);
  uint64_t v70 = a6 + 72;
  long long v50 = (unsigned __int8 *)(a6 + 96);
  long long v49 = (unsigned __int16 *)(a6 + 128);
  uint64_t v68 = a6 + 136;
  uint64_t v69 = a6 + 104;
  int v46 = (unsigned __int8 *)(a6 + 192);
  long long v47 = (unsigned __int8 *)(a6 + 160);
  uint64_t v66 = a6 + 200;
  uint64_t v67 = a6 + 168;
  char v77 = (int *)(a6 + 224);
  uint64_t v76 = (unsigned int *)(a6 + 264);
  uint64_t v64 = a6 + 280;
  uint64_t v65 = a6 + 240;
  long long v75 = (int *)(a6 + 304);
  int v74 = (int *)(a6 + 344);
  uint64_t v62 = a6 + 360;
  uint64_t v63 = a6 + 320;
  long long v34 = (char *)(a6 + 384);
  uint64_t v60 = a6 + 424;
  uint64_t v61 = a6 + 392;
  uint64_t v58 = a6 + 488;
  uint64_t v59 = a6 + 456;
  uint64_t v56 = a6 + 552;
  uint64_t v57 = a6 + 520;
  uint64_t v54 = a6 + 616;
  uint64_t v55 = a6 + 584;
  while (1)
  {
    int v73 = v10;
    bzero(__str, 0x280uLL);
    XofGlonassAlmCodec::XofGlonassAlmCodec((XofGlonassAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0) {
      operator delete(*(void **)v72);
    }
    *(_OWORD *)uint64_t v72 = v81;
    *(void *)(v72 + 16) = v82;
    HIBYTE(v82) = 0;
    LOBYTE(v81) = 0;
    *(_DWORD *)(a6 + 32) = v83;
    if (*(char *)(a6 + 63) < 0) {
      operator delete(*(void **)v71);
    }
    *(_OWORD *)uint64_t v71 = v84;
    *(void *)(v71 + 16) = v85;
    HIBYTE(v85) = 0;
    LOBYTE(v84) = 0;
    *(_DWORD *)(a6 + 64) = v86;
    if (*(char *)(a6 + 95) < 0) {
      operator delete(*(void **)v70);
    }
    *(_OWORD *)uint64_t v70 = v87;
    *(void *)(v70 + 16) = v88;
    HIBYTE(v88) = 0;
    LOBYTE(v87) = 0;
    *(_DWORD *)(a6 + 96) = v89;
    if (*(char *)(a6 + 127) < 0) {
      operator delete(*(void **)v69);
    }
    *(_OWORD *)uint64_t v69 = v90;
    *(void *)(v69 + 16) = v91;
    HIBYTE(v91) = 0;
    LOBYTE(v90) = 0;
    *(void *)(a6 + 128) = v92;
    if (*(char *)(a6 + 159) < 0) {
      operator delete(*(void **)v68);
    }
    *(_OWORD *)uint64_t v68 = v93;
    *(void *)(v68 + 16) = v94;
    HIBYTE(v94) = 0;
    LOBYTE(v93) = 0;
    *(_DWORD *)(a6 + 160) = v95;
    if (*(char *)(a6 + 191) < 0) {
      operator delete(*(void **)v67);
    }
    *(_OWORD *)uint64_t v67 = v96;
    *(void *)(v67 + 16) = v97;
    HIBYTE(v97) = 0;
    LOBYTE(v96) = 0;
    *(_DWORD *)(a6 + 192) = v98;
    if (*(char *)(a6 + 223) < 0) {
      operator delete(*(void **)v66);
    }
    *(_OWORD *)uint64_t v66 = v99;
    *(void *)(v66 + 16) = v100;
    HIBYTE(v100) = 0;
    LOBYTE(v99) = 0;
    *(_OWORD *)char v77 = v101;
    if (*(char *)(a6 + 263) < 0) {
      operator delete(*(void **)v65);
    }
    *(_OWORD *)uint64_t v65 = v102;
    *(void *)(v65 + 16) = v103;
    HIBYTE(v103) = 0;
    LOBYTE(v102) = 0;
    *(_OWORD *)uint64_t v76 = v104;
    if (*(char *)(a6 + 303) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)uint64_t v64 = v105;
    *(void *)(v64 + 16) = v106;
    HIBYTE(v106) = 0;
    LOBYTE(v105) = 0;
    *(_OWORD *)long long v75 = v107;
    if (*(char *)(a6 + 343) < 0) {
      operator delete(*(void **)v63);
    }
    *(_OWORD *)uint64_t v63 = v108;
    *(void *)(v63 + 16) = v109;
    HIBYTE(v109) = 0;
    LOBYTE(v108) = 0;
    *(_OWORD *)int v74 = v110;
    if (*(char *)(a6 + 383) < 0) {
      operator delete(*(void **)v62);
    }
    *(_OWORD *)uint64_t v62 = v111;
    *(void *)(v62 + 16) = v112;
    HIBYTE(v112) = 0;
    LOBYTE(v111) = 0;
    *(_DWORD *)(a6 + 384) = v113;
    if (*(char *)(a6 + 415) < 0) {
      operator delete(*(void **)v61);
    }
    *(_OWORD *)uint64_t v61 = v114;
    *(void *)(v61 + 16) = v115;
    HIBYTE(v115) = 0;
    LOBYTE(v114) = 0;
    *(_DWORD *)(a6 + 416) = v116;
    if (*(char *)(a6 + 447) < 0) {
      operator delete(*(void **)v60);
    }
    *(_OWORD *)uint64_t v60 = v117;
    *(void *)(v60 + 16) = v118;
    HIBYTE(v118) = 0;
    LOBYTE(v117) = 0;
    *(void *)(a6 + 448) = v119;
    if (*(char *)(a6 + 479) < 0) {
      operator delete(*(void **)v59);
    }
    *(_OWORD *)uint64_t v59 = v120;
    *(void *)(v59 + 16) = v121;
    HIBYTE(v121) = 0;
    LOBYTE(v120) = 0;
    *(void *)(a6 + 480) = v122;
    if (*(char *)(a6 + 511) < 0) {
      operator delete(*(void **)v58);
    }
    *(_OWORD *)uint64_t v58 = v123;
    *(void *)(v58 + 16) = v124;
    HIBYTE(v124) = 0;
    LOBYTE(v123) = 0;
    *(void *)(a6 + 512) = v125;
    if (*(char *)(a6 + 543) < 0) {
      operator delete(*(void **)v57);
    }
    *(_OWORD *)uint64_t v57 = v126;
    *(void *)(v57 + 16) = v127;
    HIBYTE(v127) = 0;
    LOBYTE(v126) = 0;
    *(_DWORD *)(a6 + 544) = v128;
    if (*(char *)(a6 + 575) < 0) {
      operator delete(*(void **)v56);
    }
    *(_OWORD *)uint64_t v56 = v129;
    *(void *)(v56 + 16) = v130;
    HIBYTE(v130) = 0;
    LOBYTE(v129) = 0;
    *(_DWORD *)(a6 + 576) = v131;
    if (*(char *)(a6 + 607) < 0) {
      operator delete(*(void **)v55);
    }
    *(_OWORD *)uint64_t v55 = v132;
    *(void *)(v55 + 16) = v133;
    HIBYTE(v133) = 0;
    LOBYTE(v132) = 0;
    *(void *)(a6 + 608) = v134;
    if (*(char *)(a6 + 639) < 0) {
      operator delete(*(void **)v54);
    }
    *(_OWORD *)uint64_t v54 = v135;
    *(void *)(v54 + 16) = v136;
    HIBYTE(v136) = 0;
    LOBYTE(v135) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v52, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v51, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v50, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v49, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v46, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v77, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v76, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v75, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v74, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v34, a2, a3) != 1
      || !XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>(a6, a2, a3))
    {
      break;
    }
    unsigned int v11 = *(unsigned __int8 *)(a6 + 3);
    unsigned int v12 = v53;
    int v13 = *v53;
    if (*v53)
    {
      int v14 = v53;
      int v15 = *v53;
      do
      {
        unsigned int v16 = *((unsigned __int8 *)v15 + 28);
        BOOL v17 = v16 >= v11;
        if (v16 >= v11) {
          BOOL v18 = (uint64_t **)v15;
        }
        else {
          BOOL v18 = (uint64_t **)(v15 + 1);
        }
        if (v17) {
          int v14 = (uint64_t **)v15;
        }
        int v15 = *v18;
      }
      while (*v18);
      unsigned int v12 = v53;
      if (v14 != v53 && v11 >= *((unsigned __int8 *)v14 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v11);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    char v44 = *(unsigned char *)(a6 + 67);
    char v45 = *(unsigned char *)(a6 + 35);
    __int16 v42 = *(_WORD *)(a6 + 134);
    char v43 = *(unsigned char *)(a6 + 99);
    int v40 = *(_DWORD *)(a6 + 236);
    char v41 = *(unsigned char *)(a6 + 163);
    int v38 = *(_DWORD *)(a6 + 316);
    int v39 = *(_DWORD *)(a6 + 276);
    char v36 = *(unsigned char *)(a6 + 387);
    int v37 = *(_DWORD *)(a6 + 356);
    uint64_t v19 = *(unsigned __int16 *)(a6 + 454);
    uint64_t v20 = *(unsigned __int16 *)(a6 + 486);
    uint64_t v21 = *(unsigned __int16 *)(a6 + 518);
    uint64_t v35 = *(unsigned __int8 *)(a6 + 547);
    int v22 = v12;
    uint64_t v23 = *(unsigned __int8 *)(a6 + 579);
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v12 = (uint64_t **)v13;
          unsigned int v24 = *((unsigned __int8 *)v13 + 28);
          if (v24 <= v11) {
            break;
          }
          int v13 = *v12;
          int v22 = v12;
          if (!*v12) {
            goto LABEL_72;
          }
        }
        if (v24 >= v11) {
          break;
        }
        int v13 = v12[1];
        if (!v13)
        {
          int v22 = v12 + 1;
          goto LABEL_72;
        }
      }
    }
    else
    {
LABEL_72:
      uint64_t v25 = (char *)operator new(0x48uLL);
      v25[28] = v11;
      v25[32] = v11;
      v25[33] = v45;
      v25[34] = v44;
      v25[35] = v43;
      *((_WORD *)v25 + 18) = v42;
      v25[38] = v41;
      *((_DWORD *)v25 + 10) = v40;
      *((_DWORD *)v25 + 11) = v39;
      *((_DWORD *)v25 + 12) = v38;
      *((_DWORD *)v25 + 13) = v37;
      v25[56] = v36;
      *(void *)(v25 + 58) = v19 | (v20 << 16) | (v21 << 32) | (v35 << 48) | (v23 << 56);
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v12, v22, (uint64_t *)v25);
    }
    int v10 = v73 + 1;
    if (v73 + 1 == a4) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v27 = mach_continuous_time();
    if (a5 > 7) {
      uint64_t v28 = "   ";
    }
    else {
      uint64_t v28 = off_2655E6F10[a5];
    }
    double v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v79 >= 0) {
      long long v30 = __p;
    }
    else {
      long long v30 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v73 + 1);
    if (v79 < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofBeidouAlmanac>,XofBeidouAlmCodec>(uint64_t a1, void *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 1;
  }
  int v8 = 0;
  uint64_t v69 = a6 + 8;
  long long v52 = a7 + 1;
  uint64_t v68 = a6 + 40;
  long long v47 = (unsigned __int8 *)(a6 + 64);
  long long v48 = (unsigned __int8 *)(a6 + 32);
  uint64_t v67 = a6 + 72;
  int v38 = (unsigned __int8 *)(a6 + 96);
  uint64_t v65 = a6 + 136;
  uint64_t v66 = a6 + 104;
  uint64_t v35 = (unsigned __int8 *)(a6 + 160);
  char v36 = (unsigned __int8 *)(a6 + 128);
  long long v34 = (unsigned __int16 *)(a6 + 192);
  uint64_t v63 = a6 + 200;
  uint64_t v64 = a6 + 168;
  int v73 = (unsigned int *)(a6 + 224);
  uint64_t v72 = (unsigned int *)(a6 + 264);
  uint64_t v61 = a6 + 280;
  uint64_t v62 = a6 + 240;
  uint64_t v71 = (int *)(a6 + 304);
  uint64_t v59 = a6 + 360;
  uint64_t v60 = a6 + 320;
  long long v50 = (_OWORD *)(a6 + 384);
  long long v51 = (_OWORD *)(a6 + 344);
  long long v49 = (_OWORD *)(a6 + 424);
  uint64_t v57 = a6 + 440;
  uint64_t v58 = a6 + 400;
  uint64_t v55 = a6 + 504;
  uint64_t v56 = a6 + 472;
  uint64_t v53 = a6 + 568;
  uint64_t v54 = a6 + 536;
  while (1)
  {
    int v70 = v8;
    bzero(__str, 0x250uLL);
    XofBeidouAlmCodec::XofBeidouAlmCodec((XofBeidouAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0) {
      operator delete(*(void **)v69);
    }
    *(_OWORD *)uint64_t v69 = v79;
    *(void *)(v69 + 16) = v80;
    HIBYTE(v80) = 0;
    LOBYTE(v79) = 0;
    *(_DWORD *)(a6 + 32) = v81;
    if (*(char *)(a6 + 63) < 0) {
      operator delete(*(void **)v68);
    }
    *(_OWORD *)uint64_t v68 = v82;
    *(void *)(v68 + 16) = v83;
    HIBYTE(v83) = 0;
    LOBYTE(v82) = 0;
    *(_DWORD *)(a6 + 64) = v84;
    if (*(char *)(a6 + 95) < 0) {
      operator delete(*(void **)v67);
    }
    *(_OWORD *)uint64_t v67 = v85;
    *(void *)(v67 + 16) = v86;
    HIBYTE(v86) = 0;
    LOBYTE(v85) = 0;
    *(_DWORD *)(a6 + 96) = v87;
    if (*(char *)(a6 + 127) < 0) {
      operator delete(*(void **)v66);
    }
    *(_OWORD *)uint64_t v66 = v88;
    *(void *)(v66 + 16) = v89;
    HIBYTE(v89) = 0;
    LOBYTE(v88) = 0;
    *(_DWORD *)(a6 + 128) = v90;
    if (*(char *)(a6 + 159) < 0) {
      operator delete(*(void **)v65);
    }
    *(_OWORD *)uint64_t v65 = v91;
    *(void *)(v65 + 16) = v92;
    HIBYTE(v92) = 0;
    LOBYTE(v91) = 0;
    *(_DWORD *)(a6 + 160) = v93;
    if (*(char *)(a6 + 191) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)uint64_t v64 = v94;
    *(void *)(v64 + 16) = v95;
    HIBYTE(v95) = 0;
    LOBYTE(v94) = 0;
    *(void *)(a6 + 192) = v96;
    if (*(char *)(a6 + 223) < 0) {
      operator delete(*(void **)v63);
    }
    *(_OWORD *)uint64_t v63 = v97;
    *(void *)(v63 + 16) = v98;
    HIBYTE(v98) = 0;
    LOBYTE(v97) = 0;
    *(_OWORD *)int v73 = v99;
    if (*(char *)(a6 + 263) < 0) {
      operator delete(*(void **)v62);
    }
    *(_OWORD *)uint64_t v62 = v100;
    *(void *)(v62 + 16) = v101;
    HIBYTE(v101) = 0;
    LOBYTE(v100) = 0;
    *(_OWORD *)uint64_t v72 = v102;
    if (*(char *)(a6 + 303) < 0) {
      operator delete(*(void **)v61);
    }
    *(_OWORD *)uint64_t v61 = v103;
    *(void *)(v61 + 16) = v104;
    HIBYTE(v104) = 0;
    LOBYTE(v103) = 0;
    *(_OWORD *)uint64_t v71 = v105;
    if (*(char *)(a6 + 343) < 0) {
      operator delete(*(void **)v60);
    }
    *(_OWORD *)uint64_t v60 = v106;
    *(void *)(v60 + 16) = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    _OWORD *v51 = v108;
    if (*(char *)(a6 + 383) < 0) {
      operator delete(*(void **)v59);
    }
    *(_OWORD *)uint64_t v59 = v109;
    *(void *)(v59 + 16) = v110;
    HIBYTE(v110) = 0;
    LOBYTE(v109) = 0;
    _OWORD *v50 = v111;
    if (*(char *)(a6 + 423) < 0) {
      operator delete(*(void **)v58);
    }
    *(_OWORD *)uint64_t v58 = v112;
    *(void *)(v58 + 16) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(v112) = 0;
    *long long v49 = v114;
    if (*(char *)(a6 + 463) < 0) {
      operator delete(*(void **)v57);
    }
    *(_OWORD *)uint64_t v57 = v115;
    *(void *)(v57 + 16) = v116;
    HIBYTE(v116) = 0;
    LOBYTE(v115) = 0;
    *(void *)(a6 + 464) = v117;
    if (*(char *)(a6 + 495) < 0) {
      operator delete(*(void **)v56);
    }
    *(_OWORD *)uint64_t v56 = v118;
    *(void *)(v56 + 16) = v119;
    HIBYTE(v119) = 0;
    LOBYTE(v118) = 0;
    *(void *)(a6 + 496) = v120;
    if (*(char *)(a6 + 527) < 0) {
      operator delete(*(void **)v55);
    }
    *(_OWORD *)uint64_t v55 = v121;
    *(void *)(v55 + 16) = v122;
    HIBYTE(v122) = 0;
    LOBYTE(v121) = 0;
    *(void *)(a6 + 528) = v123;
    if (*(char *)(a6 + 559) < 0) {
      operator delete(*(void **)v54);
    }
    *(_OWORD *)uint64_t v54 = v124;
    *(void *)(v54 + 16) = v125;
    HIBYTE(v125) = 0;
    LOBYTE(v124) = 0;
    *(void *)(a6 + 560) = v126;
    if (*(char *)(a6 + 591) < 0) {
      operator delete(*(void **)v53);
    }
    *(_OWORD *)uint64_t v53 = v127;
    *(void *)(v53 + 16) = v128;
    HIBYTE(v128) = 0;
    LOBYTE(v127) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v48, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v47, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v38, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v36, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v34, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v73, a2, a3) != 1
      || XofIntegralType<unsigned int>::DecodeFromHexData(v72, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v71, a2, a3) != 1
      || !XofGenericCodec::Decode<10ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a6, a2, a3))
    {
      break;
    }
    unsigned int v9 = *(unsigned __int8 *)(a6 + 3);
    int v10 = v52;
    unsigned int v11 = *v52;
    if (*v52)
    {
      unsigned int v12 = v52;
      int v13 = *v52;
      do
      {
        unsigned int v14 = *((unsigned __int8 *)v13 + 28);
        BOOL v15 = v14 >= v9;
        if (v14 >= v9) {
          unsigned int v16 = (uint64_t **)v13;
        }
        else {
          unsigned int v16 = (uint64_t **)(v13 + 1);
        }
        if (v15) {
          unsigned int v12 = (uint64_t **)v13;
        }
        int v13 = *v16;
      }
      while (*v16);
      int v10 = v52;
      if (v12 != v52 && v9 >= *((unsigned __int8 *)v12 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v9);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    char v17 = *(unsigned char *)(a6 + 35);
    char v18 = *(unsigned char *)(a6 + 67);
    char v19 = *(unsigned char *)(a6 + 131);
    int v20 = *(_DWORD *)(a6 + 236);
    int v21 = *(_DWORD *)(a6 + 276);
    int v45 = *(_DWORD *)(a6 + 316);
    char v46 = *(unsigned char *)(a6 + 99);
    int v43 = *(_DWORD *)(a6 + 396);
    int v44 = *(_DWORD *)(a6 + 356);
    __int16 v41 = *(_WORD *)(a6 + 470);
    int v42 = *(_DWORD *)(a6 + 436);
    __int16 v39 = *(_WORD *)(a6 + 534);
    __int16 v40 = *(_WORD *)(a6 + 502);
    int v22 = v10;
    __int16 v23 = *(_WORD *)(a6 + 566);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          int v10 = (uint64_t **)v11;
          unsigned int v24 = *((unsigned __int8 *)v11 + 28);
          if (v24 <= v9) {
            break;
          }
          unsigned int v11 = *v10;
          int v22 = v10;
          if (!*v10) {
            goto LABEL_66;
          }
        }
        if (v24 >= v9) {
          break;
        }
        unsigned int v11 = v10[1];
        if (!v11)
        {
          int v22 = v10 + 1;
          goto LABEL_66;
        }
      }
    }
    else
    {
LABEL_66:
      uint64_t v25 = operator new(0x48uLL);
      v25[28] = v9;
      v25[32] = v9;
      v25[33] = v17;
      v25[34] = v18;
      v25[35] = v46;
      v25[36] = v19;
      *((_DWORD *)v25 + 10) = v20;
      *((_DWORD *)v25 + 11) = v21;
      *((_DWORD *)v25 + 12) = v45;
      *((_DWORD *)v25 + 13) = v44;
      *((_DWORD *)v25 + 14) = v43;
      *((_DWORD *)v25 + 15) = v42;
      *((_WORD *)v25 + 32) = v41;
      *((_WORD *)v25 + 33) = v40;
      *((_WORD *)v25 + 34) = v39;
      *((_WORD *)v25 + 35) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v10, v22, (uint64_t *)v25);
    }
    int v8 = v70 + 1;
    if (v70 + 1 == a4) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v27 = mach_continuous_time();
    if (a5 > 7) {
      uint64_t v28 = "   ";
    }
    else {
      uint64_t v28 = off_2655E6F10[a5];
    }
    double v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v77 >= 0) {
      long long v30 = __p;
    }
    else {
      long long v30 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v70 + 1);
    if (v77 < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

uint64_t XofAlmanacData::DecodeSVs<std::map<unsigned char,XofNavicAlmanac>,XofNavicAlmCodec>(uint64_t a1, void *a2, _DWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 1;
  }
  int v8 = 0;
  uint64_t v71 = a6 + 8;
  uint64_t v55 = a7 + 1;
  uint64_t v70 = a6 + 40;
  __int16 v40 = (unsigned __int16 *)(a6 + 64);
  __int16 v41 = (unsigned __int16 *)(a6 + 32);
  __int16 v39 = (unsigned __int16 *)(a6 + 96);
  uint64_t v68 = a6 + 104;
  uint64_t v69 = a6 + 72;
  int v73 = (int *)(a6 + 160);
  uint64_t v66 = a6 + 176;
  uint64_t v67 = a6 + 136;
  char v36 = (__int16 *)(a6 + 200);
  int v37 = (char *)(a6 + 128);
  uint64_t v64 = a6 + 240;
  uint64_t v65 = a6 + 208;
  long long v34 = (unsigned __int8 *)(a6 + 264);
  uint64_t v35 = (unsigned __int8 *)(a6 + 232);
  uint64_t v62 = a6 + 312;
  uint64_t v63 = a6 + 272;
  uint64_t v53 = (_OWORD *)(a6 + 336);
  uint64_t v54 = (_OWORD *)(a6 + 296);
  uint64_t v60 = a6 + 392;
  uint64_t v61 = a6 + 352;
  long long v51 = (_OWORD *)(a6 + 416);
  long long v52 = (_OWORD *)(a6 + 376);
  uint64_t v58 = a6 + 464;
  uint64_t v59 = a6 + 432;
  long long v50 = (_OWORD *)(a6 + 520);
  uint64_t v56 = a6 + 536;
  uint64_t v57 = a6 + 496;
  while (1)
  {
    int v72 = v8;
    bzero(__str, 0x230uLL);
    XofNavicAlmCodec::XofNavicAlmCodec((XofNavicAlmCodec *)__str);
    *(_DWORD *)a6 = *(_DWORD *)__str;
    if (*(char *)(a6 + 31) < 0) {
      operator delete(*(void **)v71);
    }
    *(_OWORD *)uint64_t v71 = v79;
    *(void *)(v71 + 16) = v80;
    HIBYTE(v80) = 0;
    LOBYTE(v79) = 0;
    *(void *)(a6 + 32) = v81;
    if (*(char *)(a6 + 63) < 0) {
      operator delete(*(void **)v70);
    }
    *(_OWORD *)uint64_t v70 = v82;
    *(void *)(v70 + 16) = v83;
    HIBYTE(v83) = 0;
    LOBYTE(v82) = 0;
    *(void *)(a6 + 64) = v84;
    if (*(char *)(a6 + 95) < 0) {
      operator delete(*(void **)v69);
    }
    *(_OWORD *)uint64_t v69 = v85;
    *(void *)(v69 + 16) = v86;
    HIBYTE(v86) = 0;
    LOBYTE(v85) = 0;
    *(void *)(a6 + 96) = v87;
    if (*(char *)(a6 + 127) < 0) {
      operator delete(*(void **)v68);
    }
    *(_OWORD *)uint64_t v68 = v88;
    *(void *)(v68 + 16) = v89;
    HIBYTE(v89) = 0;
    LOBYTE(v88) = 0;
    *(_DWORD *)(a6 + 128) = v90;
    if (*(char *)(a6 + 159) < 0) {
      operator delete(*(void **)v67);
    }
    *(_OWORD *)uint64_t v67 = v91;
    *(void *)(v67 + 16) = v92;
    HIBYTE(v92) = 0;
    LOBYTE(v91) = 0;
    *(_OWORD *)int v73 = v93;
    if (*(char *)(a6 + 199) < 0) {
      operator delete(*(void **)v66);
    }
    *(_OWORD *)uint64_t v66 = v94;
    *(void *)(v66 + 16) = v95;
    HIBYTE(v95) = 0;
    LOBYTE(v94) = 0;
    *(void *)(a6 + 200) = v96;
    if (*(char *)(a6 + 231) < 0) {
      operator delete(*(void **)v65);
    }
    *(_OWORD *)uint64_t v65 = v97;
    *(void *)(v65 + 16) = v98;
    HIBYTE(v98) = 0;
    LOBYTE(v97) = 0;
    *(_DWORD *)(a6 + 232) = v99;
    if (*(char *)(a6 + 263) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)uint64_t v64 = v100;
    *(void *)(v64 + 16) = v101;
    HIBYTE(v101) = 0;
    LOBYTE(v100) = 0;
    *(_DWORD *)(a6 + 264) = v102;
    if (*(char *)(a6 + 295) < 0) {
      operator delete(*(void **)v63);
    }
    *(_OWORD *)uint64_t v63 = v103;
    *(void *)(v63 + 16) = v104;
    HIBYTE(v104) = 0;
    LOBYTE(v103) = 0;
    _OWORD *v54 = v105;
    if (*(char *)(a6 + 335) < 0) {
      operator delete(*(void **)v62);
    }
    *(_OWORD *)uint64_t v62 = v106;
    *(void *)(v62 + 16) = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    *uint64_t v53 = v108;
    if (*(char *)(a6 + 375) < 0) {
      operator delete(*(void **)v61);
    }
    *(_OWORD *)uint64_t v61 = v109;
    *(void *)(v61 + 16) = v110;
    HIBYTE(v110) = 0;
    LOBYTE(v109) = 0;
    *long long v52 = v111;
    if (*(char *)(a6 + 415) < 0) {
      operator delete(*(void **)v60);
    }
    *(_OWORD *)uint64_t v60 = v112;
    *(void *)(v60 + 16) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(v112) = 0;
    _OWORD *v51 = v114;
    if (*(char *)(a6 + 455) < 0) {
      operator delete(*(void **)v59);
    }
    *(_OWORD *)uint64_t v59 = v115;
    *(void *)(v59 + 16) = v116;
    HIBYTE(v116) = 0;
    LOBYTE(v115) = 0;
    *(void *)(a6 + 456) = v117;
    if (*(char *)(a6 + 487) < 0) {
      operator delete(*(void **)v58);
    }
    *(_OWORD *)uint64_t v58 = v118;
    *(void *)(v58 + 16) = v119;
    HIBYTE(v119) = 0;
    LOBYTE(v118) = 0;
    *(void *)(a6 + 488) = v120;
    if (*(char *)(a6 + 519) < 0) {
      operator delete(*(void **)v57);
    }
    *(_OWORD *)uint64_t v57 = v121;
    *(void *)(v57 + 16) = v122;
    HIBYTE(v122) = 0;
    LOBYTE(v121) = 0;
    _OWORD *v50 = v123;
    if (*(char *)(a6 + 559) < 0) {
      operator delete(*(void **)v56);
    }
    *(_OWORD *)uint64_t v56 = v124;
    *(void *)(v56 + 16) = v125;
    HIBYTE(v125) = 0;
    LOBYTE(v124) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a6, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v41, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v40, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v39, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v37, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v73, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v36, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v35, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v34, a2, a3) != 1
      || !XofGenericCodec::Decode<9ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>(a6, a2, a3))
    {
      break;
    }
    unsigned int v9 = *(unsigned __int8 *)(a6 + 3);
    int v10 = v55;
    unsigned int v11 = *v55;
    if (*v55)
    {
      unsigned int v12 = v55;
      int v13 = *v55;
      do
      {
        unsigned int v14 = *((unsigned __int8 *)v13 + 28);
        BOOL v15 = v14 >= v9;
        if (v14 >= v9) {
          unsigned int v16 = (uint64_t **)v13;
        }
        else {
          unsigned int v16 = (uint64_t **)(v13 + 1);
        }
        if (v15) {
          unsigned int v12 = (uint64_t **)v13;
        }
        int v13 = *v16;
      }
      while (*v16);
      int v10 = v55;
      if (v12 != v55 && v9 >= *((unsigned __int8 *)v12 + 28))
      {
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v31 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Almanac data: Satellite Id [ %d ]\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "DecodeSVs", v9);
          gnssOsa_PrintLog(__str, 2, 1, 0);
        }
        return 5;
      }
    }
    __int16 v48 = *(_WORD *)(a6 + 70);
    __int16 v49 = *(_WORD *)(a6 + 38);
    char v17 = *(unsigned char *)(a6 + 131);
    int v18 = *(_DWORD *)(a6 + 172);
    __int16 v19 = *(_WORD *)(a6 + 206);
    char v20 = *(unsigned char *)(a6 + 235);
    char v46 = *(unsigned char *)(a6 + 267);
    __int16 v47 = *(_WORD *)(a6 + 102);
    int v21 = *(_DWORD *)(a6 + 348);
    int v44 = *(_DWORD *)(a6 + 388);
    int v45 = *(_DWORD *)(a6 + 308);
    __int16 v42 = *(_WORD *)(a6 + 462);
    int v43 = *(_DWORD *)(a6 + 428);
    int v22 = v10;
    __int16 v23 = *(_WORD *)(a6 + 494);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          int v10 = (uint64_t **)v11;
          unsigned int v24 = *((unsigned __int8 *)v11 + 28);
          if (v24 <= v9) {
            break;
          }
          unsigned int v11 = *v10;
          int v22 = v10;
          if (!*v10) {
            goto LABEL_63;
          }
        }
        if (v24 >= v9) {
          break;
        }
        unsigned int v11 = v10[1];
        if (!v11)
        {
          int v22 = v10 + 1;
          goto LABEL_63;
        }
      }
    }
    else
    {
LABEL_63:
      uint64_t v25 = operator new(0x48uLL);
      v25[28] = v9;
      v25[32] = v9;
      v25[33] = v17;
      *((_WORD *)v25 + 17) = v49;
      *((_WORD *)v25 + 18) = v48;
      *((_WORD *)v25 + 19) = v47;
      *((_DWORD *)v25 + 10) = v18;
      *((_WORD *)v25 + 22) = v19;
      v25[46] = v20;
      v25[47] = v46;
      *((_DWORD *)v25 + 12) = v45;
      *((_DWORD *)v25 + 13) = v21;
      *((_DWORD *)v25 + 14) = v44;
      *((_DWORD *)v25 + 15) = v43;
      *((_WORD *)v25 + 32) = v42;
      *((_WORD *)v25 + 33) = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v10, v22, (uint64_t *)v25);
    }
    int v8 = v72 + 1;
    if (v72 + 1 == a4) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v27 = mach_continuous_time();
    if (a5 > 7) {
      uint64_t v28 = "   ";
    }
    else {
      uint64_t v28 = off_2655E6F10[a5];
    }
    double v29 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    if (v77 >= 0) {
      long long v30 = __p;
    }
    else {
      long long v30 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Almanac decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v72 + 1);
    if (v77 < 0) {
      operator delete(__p[0]);
    }
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}

void XofGpsQzssAlmCodec::XofGpsQzssAlmCodec(XofGpsQzssAlmCodec *this)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v72, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v73, &v72, 1, 202, 0);
  std::string::basic_string[abi:ne180100]<0>(&v68, "weekNo");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v69, &v68, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v64, "toa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v65, &v64, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v60, "svHealth");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v61, &v60, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v56, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v57, &v56, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v52, "deltaI");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v53, &v52, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v48, "omegaDot");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v49, &v48, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v44, "reserved");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v45, &v44, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v40, "sqrtA");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v41, &v40, 0, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v36, "omega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v37, &v36, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v32, "w");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v33, &v32, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v28, "m");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v29, &v28, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v24, "af0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v25, &v24, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "af1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v21, &__p, -1024, 1023, 0);
  *(_OWORD *)((char *)this + 8) = v74;
  *(_OWORD *)((char *)this + 40) = v70;
  *(_OWORD *)((char *)this + 72) = v66;
  *(_OWORD *)((char *)this + 104) = v62;
  *(_OWORD *)((char *)this + 136) = v58;
  *(_OWORD *)((char *)this + 168) = v54;
  *(_OWORD *)((char *)this + 200) = v50;
  *(_OWORD *)((char *)this + 232) = v46;
  long long v2 = v42;
  *((_OWORD *)this + 16) = v41;
  *((_OWORD *)this + 17) = v2;
  long long v3 = v38;
  *(_OWORD *)((char *)this + 296) = v37;
  *(_OWORD *)((char *)this + 312) = v3;
  long long v4 = v34;
  *((_OWORD *)this + 21) = v33;
  *((_OWORD *)this + 22) = v4;
  long long v5 = v30;
  *(_OWORD *)((char *)this + 376) = v29;
  *(_DWORD *)this = v73;
  *((void *)this + 3) = v75;
  long long v74 = 0uLL;
  uint64_t v75 = 0;
  *((_DWORD *)this + 8) = v69;
  *((void *)this + 7) = v71;
  uint64_t v71 = 0;
  long long v70 = 0uLL;
  *((_DWORD *)this + 16) = v65;
  *((void *)this + 11) = v67;
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  *((_DWORD *)this + 24) = v61;
  uint64_t v6 = v63;
  long long v62 = 0uLL;
  uint64_t v63 = 0;
  uint64_t v7 = v57;
  uint64_t v8 = v59;
  *((void *)this + 15) = v6;
  *((void *)this + 16) = v7;
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  uint64_t v9 = v53;
  uint64_t v10 = v55;
  *((void *)this + 19) = v8;
  *((void *)this + 20) = v9;
  long long v54 = 0uLL;
  uint64_t v55 = 0;
  uint64_t v11 = v49;
  uint64_t v12 = v51;
  *((void *)this + 23) = v10;
  *((void *)this + 24) = v11;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  uint64_t v13 = v45;
  uint64_t v14 = v47;
  *((void *)this + 27) = v12;
  *((void *)this + 28) = v13;
  *((void *)this + 31) = v14;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  *((void *)this + 36) = v43;
  long long v42 = 0uLL;
  uint64_t v43 = 0;
  *((void *)this + 41) = v39;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  *((void *)this + 46) = v35;
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  uint64_t v15 = v31;
  *(_OWORD *)((char *)this + 392) = v5;
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  uint64_t v16 = v25;
  *((void *)this + 51) = v15;
  *((void *)this + 52) = v16;
  uint64_t v17 = v27;
  *(_OWORD *)((char *)this + 424) = *(_OWORD *)v26;
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  uint64_t v18 = v21;
  *((void *)this + 55) = v17;
  *((void *)this + 56) = v18;
  long long v19 = v22;
  *((void *)this + 59) = v23;
  *(_OWORD *)((char *)this + 456) = v19;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
}

void sub_263C93110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (*(char *)(v86 - 193) < 0) {
    operator delete(*(void **)(v86 - 216));
  }
  if (*(char *)(v86 - 225) < 0) {
    operator delete(*(void **)(v86 - 248));
  }
  if (*(char *)(v86 - 137) < 0) {
    operator delete(*(void **)(v86 - 160));
  }
  if (*(char *)(v86 - 169) < 0) {
    operator delete(*(void **)(v86 - 192));
  }
  if (*(char *)(v86 - 81) < 0) {
    operator delete(*(void **)(v86 - 104));
  }
  if (*(char *)(v86 - 113) < 0) {
    operator delete(*(void **)(v86 - 136));
  }
  if (*(char *)(v86 - 25) < 0) {
    operator delete(*(void **)(v86 - 48));
  }
  if (*(char *)(v86 - 57) < 0) {
    operator delete(*(void **)(v86 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263C9330C()
{
}

void sub_263C93314()
{
}

void sub_263C9331C()
{
}

void sub_263C93324()
{
}

void sub_263C9332C()
{
}

void sub_263C93334()
{
}

void sub_263C9333C()
{
}

void sub_263C93344()
{
}

void sub_263C9334C()
{
}

void sub_263C93354()
{
}

void sub_263C9335C()
{
}

void sub_263C93364()
{
}

void sub_263C9336C()
{
}

void sub_263C93374()
{
}

void sub_263C9337C()
{
}

void sub_263C93384()
{
}

void sub_263C9338C()
{
}

void sub_263C93394()
{
}

void sub_263C9339C()
{
}

uint64_t XofIntegralType<short>::XofIntegralType(uint64_t a1, const std::string *a2, __int16 a3, __int16 a4, __int16 a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(_WORD *)a1 = a4;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a5;
  *(_WORD *)(a1 + 6) = a5;
  return a1;
}

void sub_263C9343C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<unsigned int>::XofIntegralType(uint64_t a1, const std::string *a2, int a3, int a4, int a5)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::string::operator=((std::string *)(a1 + 16), a2);
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a5;
  return a1;
}

void sub_263C934E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<int>::XofIntegralType(uint64_t a1, const std::string *a2, int a3, int a4, int a5)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::string::operator=((std::string *)(a1 + 16), a2);
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a5;
  return a1;
}

void sub_263C93594(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofGalileoAlmCodec::XofGalileoAlmCodec(XofGalileoAlmCodec *this)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v85, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v86, &v85, 1, 36, 0);
  std::string::basic_string[abi:ne180100]<0>(&v81, "iod");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v82, &v81, 0, 15, 0);
  std::string::basic_string[abi:ne180100]<0>(&v77, "reserved");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v78, &v77, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v73, "absToa");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v74, &v73, 0, 0x7FFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v69, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v70, &v69, 0, 2047, 0);
  std::string::basic_string[abi:ne180100]<0>(&v65, "deltaI");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v66, &v65, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v61, "omegaDot");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v62, &v61, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v57, "healthINAV");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v58, &v57, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v53, "healthFNAV");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v54, &v53, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v49, "deltaSqrtA");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v50, &v49, -4096, 4095, 0);
  std::string::basic_string[abi:ne180100]<0>(&v45, "omega0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v46, &v45, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v41, "w");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v42, &v41, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v37, "m");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v38, &v37, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v33, "af0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v34, &v33, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "af1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v30, &__p, -4096, 4095, 0);
  *(_DWORD *)this = v86;
  *(_OWORD *)((char *)this + 8) = v87;
  *((void *)this + 3) = v88;
  long long v87 = 0uLL;
  uint64_t v88 = 0;
  *((_DWORD *)this + 8) = v82;
  *(_OWORD *)((char *)this + 40) = v83;
  uint64_t v2 = v84;
  uint64_t v84 = 0;
  long long v83 = 0uLL;
  uint64_t v3 = v78;
  uint64_t v4 = v80;
  *((void *)this + 7) = v2;
  *((void *)this + 8) = v3;
  long long v5 = v79;
  *((void *)this + 11) = v4;
  *(_OWORD *)((char *)this + 72) = v5;
  long long v79 = 0uLL;
  uint64_t v80 = 0;
  long long v6 = v75;
  uint64_t v7 = v76;
  *((_OWORD *)this + 6) = v74;
  *((_OWORD *)this + 7) = v6;
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  uint64_t v8 = v70;
  uint64_t v9 = v72;
  *((void *)this + 16) = v7;
  *((void *)this + 17) = v8;
  *((_OWORD *)this + 9) = v71;
  long long v71 = 0uLL;
  uint64_t v72 = 0;
  uint64_t v10 = v66;
  uint64_t v11 = v68;
  *((void *)this + 20) = v9;
  *((void *)this + 21) = v10;
  *((_OWORD *)this + 11) = v67;
  long long v67 = 0uLL;
  uint64_t v68 = 0;
  uint64_t v12 = v62;
  uint64_t v13 = v64;
  *((void *)this + 24) = v11;
  *((void *)this + 25) = v12;
  long long v14 = v63;
  *((void *)this + 28) = v13;
  *((_OWORD *)this + 13) = v14;
  long long v63 = 0uLL;
  uint64_t v64 = 0;
  *((_DWORD *)this + 58) = v58;
  long long v15 = v59;
  *((void *)this + 32) = v60;
  *((_OWORD *)this + 15) = v15;
  long long v59 = 0uLL;
  uint64_t v60 = 0;
  *((_DWORD *)this + 66) = v54;
  uint64_t v16 = v56;
  *((_OWORD *)this + 17) = v55;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  uint64_t v17 = v50;
  uint64_t v18 = v52;
  *((void *)this + 36) = v16;
  *((void *)this + 37) = v17;
  *((_OWORD *)this + 19) = v51;
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  uint64_t v19 = v46;
  uint64_t v20 = v48;
  *((void *)this + 40) = v18;
  *((void *)this + 41) = v19;
  *((_OWORD *)this + 21) = v47;
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  uint64_t v21 = v42;
  uint64_t v22 = v44;
  *((void *)this + 44) = v20;
  *((void *)this + 45) = v21;
  *((_OWORD *)this + 23) = v43;
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  uint64_t v23 = v38;
  uint64_t v24 = v40;
  *((void *)this + 48) = v22;
  *((void *)this + 49) = v23;
  *((_OWORD *)this + 25) = v39;
  long long v39 = 0uLL;
  uint64_t v40 = 0;
  uint64_t v25 = v34;
  *((void *)this + 52) = v24;
  *((void *)this + 53) = v25;
  uint64_t v26 = v36;
  *((_OWORD *)this + 27) = *(_OWORD *)v35;
  v35[0] = 0;
  v35[1] = 0;
  uint64_t v36 = 0;
  uint64_t v27 = v30;
  *((void *)this + 56) = v26;
  *((void *)this + 57) = v27;
  long long v28 = v31;
  *((void *)this + 60) = v32;
  *((_OWORD *)this + 29) = v28;
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36) < 0) {
      operator delete(v35[0]);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)v59);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)v71);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete((void *)v75);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80) < 0) {
    operator delete((void *)v79);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88) < 0) {
    operator delete((void *)v87);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
}

void sub_263C93D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a87 < 0) {
    operator delete(a86);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  if (*(char *)(v87 - 193) < 0) {
    operator delete(*(void **)(v87 - 216));
  }
  if (*(char *)(v87 - 233) < 0) {
    operator delete(*(void **)(v87 - 256));
  }
  if (*(char *)(v87 - 137) < 0) {
    operator delete(*(void **)(v87 - 160));
  }
  if (*(char *)(v87 - 169) < 0) {
    operator delete(*(void **)(v87 - 192));
  }
  if (*(char *)(v87 - 81) < 0) {
    operator delete(*(void **)(v87 - 104));
  }
  if (*(char *)(v87 - 113) < 0) {
    operator delete(*(void **)(v87 - 136));
  }
  if (*(char *)(v87 - 25) < 0) {
    operator delete(*(void **)(v87 - 48));
  }
  if (*(char *)(v87 - 57) < 0) {
    operator delete(*(void **)(v87 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263C93F4C()
{
}

void sub_263C93F54()
{
}

void sub_263C93F5C()
{
}

void sub_263C93F64()
{
}

void sub_263C93F6C()
{
}

void sub_263C93F74()
{
}

void sub_263C93F7C()
{
}

void sub_263C93F84()
{
}

void sub_263C93F8C()
{
}

void sub_263C93F94()
{
}

void sub_263C93F9C()
{
}

void sub_263C93FA4()
{
}

void sub_263C93FAC()
{
}

void sub_263C93FB4()
{
}

void sub_263C93FBC()
{
}

void sub_263C93FC4()
{
}

void sub_263C93FCC()
{
}

void sub_263C93FD4()
{
}

void sub_263C93FDC()
{
}

void sub_263C93FE4()
{
}

void sub_263C93FEC()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofGlonassAlmCodec::XofGlonassAlmCodec(XofGlonassAlmCodec *this)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v99, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v100, &v99, 1, 24, 0);
  std::string::basic_string[abi:ne180100]<0>(&v95, "weekNo");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v96, &v95, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v91, "toa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v92, &v91, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v87, "iod");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v88, &v87, 0, 3, 0);
  std::string::basic_string[abi:ne180100]<0>(&v83, "n");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v84, &v83, 1, 1461, 0);
  std::string::basic_string[abi:ne180100]<0>(&v79, "h");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v80, &v79, 0, 31, 0);
  std::string::basic_string[abi:ne180100]<0>(&v75, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v76, &v75, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "lambda");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v72, &v71, -1048576, 0xFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v67, "t");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v68, &v67, 0, 0x1FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v63, "deltaI");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v64, &v63, -131072, 0x1FFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v59, "deltaT");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v60, &v59, -2097152, 0x1FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v55, "deltaTDot");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v56, &v55, -64, 63, 0);
  std::string::basic_string[abi:ne180100]<0>(&v51, "reserved2");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v52, &v51, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v47, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v48, &v47, 0, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v43, "w");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v44, &v43, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v39, "time");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v40, &v39, -512, 511, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "can");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v36, &v35, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v31, "m");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v32, &v31, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reserved3");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v28, &__p, 0, 0xFFFF, 0);
  *(_DWORD *)this = v100;
  *(_OWORD *)((char *)this + 8) = v101;
  *((void *)this + 3) = v102;
  long long v101 = 0uLL;
  uint64_t v102 = 0;
  *((_DWORD *)this + 8) = v96;
  *(_OWORD *)((char *)this + 40) = v97;
  *((void *)this + 7) = v98;
  uint64_t v98 = 0;
  long long v97 = 0uLL;
  *((_DWORD *)this + 16) = v92;
  long long v2 = v93;
  *((void *)this + 11) = v94;
  *(_OWORD *)((char *)this + 72) = v2;
  long long v93 = 0uLL;
  uint64_t v94 = 0;
  *((_DWORD *)this + 24) = v88;
  uint64_t v3 = v90;
  *(_OWORD *)((char *)this + 104) = v89;
  long long v89 = 0uLL;
  uint64_t v90 = 0;
  uint64_t v4 = v84;
  uint64_t v5 = v86;
  *((void *)this + 15) = v3;
  *((void *)this + 16) = v4;
  long long v6 = v85;
  *((void *)this + 19) = v5;
  *(_OWORD *)((char *)this + 136) = v6;
  long long v85 = 0uLL;
  uint64_t v86 = 0;
  *((_DWORD *)this + 40) = v80;
  long long v7 = v81;
  *((void *)this + 23) = v82;
  *(_OWORD *)((char *)this + 168) = v7;
  long long v81 = 0uLL;
  uint64_t v82 = 0;
  *((_DWORD *)this + 48) = v76;
  long long v8 = v77;
  *((void *)this + 27) = v78;
  *(_OWORD *)((char *)this + 200) = v8;
  long long v77 = 0uLL;
  uint64_t v78 = 0;
  long long v9 = v72;
  long long v10 = v73;
  *((void *)this + 32) = v74;
  *((_OWORD *)this + 14) = v9;
  *((_OWORD *)this + 15) = v10;
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  *(_OWORD *)((char *)this + 264) = v68;
  long long v11 = v69;
  *((void *)this + 37) = v70;
  *(_OWORD *)((char *)this + 280) = v11;
  long long v69 = 0uLL;
  uint64_t v70 = 0;
  long long v12 = v64;
  long long v13 = v65;
  *((void *)this + 42) = v66;
  *((_OWORD *)this + 19) = v12;
  *((_OWORD *)this + 20) = v13;
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  *(_OWORD *)((char *)this + 344) = v60;
  long long v14 = v61;
  *((void *)this + 47) = v62;
  *(_OWORD *)((char *)this + 360) = v14;
  long long v61 = 0uLL;
  uint64_t v62 = 0;
  *((_DWORD *)this + 96) = v56;
  long long v15 = v57;
  *((void *)this + 51) = v58;
  *(_OWORD *)((char *)this + 392) = v15;
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  *((_DWORD *)this + 104) = v52;
  uint64_t v16 = v54;
  *(_OWORD *)((char *)this + 424) = v53;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  uint64_t v17 = v48;
  uint64_t v18 = v50;
  *((void *)this + 55) = v16;
  *((void *)this + 56) = v17;
  *(_OWORD *)((char *)this + 456) = v49;
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  uint64_t v19 = v44;
  uint64_t v20 = v46;
  *((void *)this + 59) = v18;
  *((void *)this + 60) = v19;
  *(_OWORD *)((char *)this + 488) = v45;
  long long v45 = 0uLL;
  uint64_t v46 = 0;
  uint64_t v21 = v40;
  uint64_t v22 = v42;
  *((void *)this + 63) = v20;
  *((void *)this + 64) = v21;
  long long v23 = v41;
  *((void *)this + 67) = v22;
  *(_OWORD *)((char *)this + 520) = v23;
  long long v41 = 0uLL;
  uint64_t v42 = 0;
  *((_DWORD *)this + 136) = v36;
  long long v24 = v37;
  *((void *)this + 71) = v38;
  *(_OWORD *)((char *)this + 552) = v24;
  long long v37 = 0uLL;
  uint64_t v38 = 0;
  *((_DWORD *)this + 144) = v32;
  long long v25 = *(_OWORD *)v33;
  *((void *)this + 75) = v34;
  *(_OWORD *)((char *)this + 584) = v25;
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  *((void *)this + 76) = v28;
  long long v26 = v29;
  *((void *)this + 79) = v30;
  *(_OWORD *)((char *)this + 616) = v26;
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete((void *)v77);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete((void *)v85);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)v89);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)v93);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98) < 0) {
    operator delete((void *)v97);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete((void *)v101);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
}

void sub_263C9497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  if (SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (*(char *)(v86 - 193) < 0) {
    operator delete(*(void **)(v86 - 216));
  }
  if (*(char *)(v86 - 225) < 0) {
    operator delete(*(void **)(v86 - 248));
  }
  if (*(char *)(v86 - 137) < 0) {
    operator delete(*(void **)(v86 - 160));
  }
  if (*(char *)(v86 - 169) < 0) {
    operator delete(*(void **)(v86 - 192));
  }
  if (*(char *)(v86 - 81) < 0) {
    operator delete(*(void **)(v86 - 104));
  }
  if (*(char *)(v86 - 113) < 0) {
    operator delete(*(void **)(v86 - 136));
  }
  if (*(char *)(v86 - 25) < 0) {
    operator delete(*(void **)(v86 - 48));
  }
  if (*(char *)(v86 - 57) < 0) {
    operator delete(*(void **)(v86 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263C94C18()
{
}

void sub_263C94C20()
{
}

void sub_263C94C28()
{
}

void sub_263C94C30()
{
}

void sub_263C94C38()
{
}

void sub_263C94C40()
{
}

void sub_263C94C48()
{
}

void sub_263C94C50()
{
}

void sub_263C94C58()
{
}

void sub_263C94C60()
{
}

void sub_263C94C68()
{
}

void sub_263C94C70()
{
}

void sub_263C94C78()
{
}

void sub_263C94C80()
{
}

void sub_263C94C88()
{
}

void sub_263C94C90()
{
}

void sub_263C94C98()
{
}

void sub_263C94CA0()
{
}

void sub_263C94CA8()
{
}

void sub_263C94CB0()
{
}

void sub_263C94CB8()
{
}

void sub_263C94CC0()
{
}

void sub_263C94CC8()
{
}

void sub_263C94CD0()
{
}

void sub_263C94CD8()
{
}

void sub_263C94CE0()
{
}

void sub_263C94CE8()
{
}

void sub_263C94CF0()
{
}

void sub_263C94CF8()
{
}

uint64_t XofIntegralType<signed char>::XofIntegralType(uint64_t a1, const std::string *a2, char a3, char a4, char a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(unsigned char *)a1 = a4;
  *(unsigned char *)(a1 + 1) = a3;
  *(unsigned char *)(a1 + 2) = a5;
  *(unsigned char *)(a1 + 3) = a5;
  return a1;
}

void sub_263C94D98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  if (*(char *)(a1 + 543) < 0) {
    operator delete(*(void **)(a1 + 520));
  }
  if (*(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofBeidouAlmCodec::XofBeidouAlmCodec(XofBeidouAlmCodec *this)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v83, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v84, &v83, 1, 63, 0);
  std::string::basic_string[abi:ne180100]<0>(&v79, "weekNum");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v80, &v79, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v75, "toa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v76, &v75, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "iod");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v72, &v71, 0, 3, 0);
  std::string::basic_string[abi:ne180100]<0>(&v67, "almToa");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v68, &v67, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v63, "reserved1");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v64, &v63, 0, 255, 0);
  std::string::basic_string[abi:ne180100]<0>(&v59, "reserved2");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v60, &v59, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v55, "sqrtA");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v56, &v55, 0, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v51, "e");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v52, &v51, 0, 0x1FFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v47, "w");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v48, &v47, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v43, "m");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v44, &v43, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v39, "omega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v40, &v39, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v35, "omegaDot");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v36, &v35, -65536, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v31, "deltaI");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v32, &v31, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v27, "a0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v28, &v27, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v23, "a1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v24, &v23, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "svHealth");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v20, &__p, 0, 511, 0);
  *(_OWORD *)((char *)this + 8) = v85;
  *(_OWORD *)((char *)this + 40) = v81;
  *(_OWORD *)((char *)this + 72) = v77;
  *(_OWORD *)((char *)this + 104) = v73;
  *(_OWORD *)((char *)this + 136) = v69;
  *(_OWORD *)((char *)this + 168) = v65;
  *(_OWORD *)((char *)this + 200) = v61;
  long long v2 = v57;
  *((_OWORD *)this + 14) = v56;
  *((_OWORD *)this + 15) = v2;
  long long v3 = v53;
  *(_OWORD *)((char *)this + 264) = v52;
  *(_OWORD *)((char *)this + 280) = v3;
  long long v4 = v49;
  *((_OWORD *)this + 19) = v48;
  *((_OWORD *)this + 20) = v4;
  long long v5 = v45;
  *(_OWORD *)((char *)this + 344) = v44;
  *(_OWORD *)((char *)this + 360) = v5;
  long long v6 = v41;
  *((_OWORD *)this + 24) = v40;
  *((_OWORD *)this + 25) = v6;
  long long v7 = v37;
  *(_OWORD *)((char *)this + 424) = v36;
  *(_DWORD *)this = v84;
  *((void *)this + 3) = v86;
  long long v85 = 0uLL;
  uint64_t v86 = 0;
  *((_DWORD *)this + 8) = v80;
  *((void *)this + 7) = v82;
  uint64_t v82 = 0;
  long long v81 = 0uLL;
  *((_DWORD *)this + 16) = v76;
  *((void *)this + 11) = v78;
  long long v77 = 0uLL;
  uint64_t v78 = 0;
  *((_DWORD *)this + 24) = v72;
  *((void *)this + 15) = v74;
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  *((_DWORD *)this + 32) = v68;
  *((void *)this + 19) = v70;
  long long v69 = 0uLL;
  uint64_t v70 = 0;
  *((_DWORD *)this + 40) = v64;
  uint64_t v8 = v66;
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  uint64_t v9 = v60;
  uint64_t v10 = v62;
  *((void *)this + 23) = v8;
  *((void *)this + 24) = v9;
  *((void *)this + 27) = v10;
  long long v61 = 0uLL;
  uint64_t v62 = 0;
  *((void *)this + 32) = v58;
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  *((void *)this + 37) = v54;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  *((void *)this + 42) = v50;
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  *((void *)this + 47) = v46;
  long long v45 = 0uLL;
  uint64_t v46 = 0;
  *((void *)this + 52) = v42;
  long long v41 = 0uLL;
  uint64_t v42 = 0;
  uint64_t v11 = v38;
  *(_OWORD *)((char *)this + 440) = v7;
  long long v37 = 0uLL;
  uint64_t v38 = 0;
  uint64_t v12 = v32;
  uint64_t v13 = v34;
  *((void *)this + 57) = v11;
  *((void *)this + 58) = v12;
  *(_OWORD *)((char *)this + 472) = v33;
  long long v33 = 0uLL;
  uint64_t v34 = 0;
  uint64_t v14 = v28;
  uint64_t v15 = v30;
  *((void *)this + 61) = v13;
  *((void *)this + 62) = v14;
  long long v16 = v29;
  *((void *)this + 65) = v15;
  *(_OWORD *)((char *)this + 504) = v16;
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  *((void *)this + 66) = v24;
  long long v17 = *(_OWORD *)v25;
  *((void *)this + 69) = v26;
  *(_OWORD *)((char *)this + 536) = v17;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  *((void *)this + 70) = v20;
  long long v18 = v21;
  *((void *)this + 73) = v22;
  *(_OWORD *)((char *)this + 568) = v18;
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete((void *)v77);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete((void *)v85);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
}

void sub_263C95684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (*(char *)(v85 - 193) < 0) {
    operator delete(*(void **)(v85 - 216));
  }
  if (*(char *)(v85 - 225) < 0) {
    operator delete(*(void **)(v85 - 248));
  }
  if (*(char *)(v85 - 137) < 0) {
    operator delete(*(void **)(v85 - 160));
  }
  if (*(char *)(v85 - 169) < 0) {
    operator delete(*(void **)(v85 - 192));
  }
  if (*(char *)(v85 - 81) < 0) {
    operator delete(*(void **)(v85 - 104));
  }
  if (*(char *)(v85 - 113) < 0) {
    operator delete(*(void **)(v85 - 136));
  }
  if (*(char *)(v85 - 25) < 0) {
    operator delete(*(void **)(v85 - 48));
  }
  if (*(char *)(v85 - 57) < 0) {
    operator delete(*(void **)(v85 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263C958E0()
{
}

void sub_263C958E8()
{
}

void sub_263C958F0()
{
}

void sub_263C958F8()
{
}

void sub_263C95900()
{
}

void sub_263C95908()
{
}

void sub_263C95910()
{
}

void sub_263C95918()
{
}

void sub_263C95920()
{
}

void sub_263C95928()
{
}

void sub_263C95930()
{
}

void sub_263C95938()
{
}

void sub_263C95940()
{
}

void sub_263C95948()
{
}

void sub_263C95950()
{
}

void sub_263C95958()
{
}

void sub_263C95960()
{
}

void sub_263C95968()
{
}

void sub_263C95970()
{
}

void sub_263C95978()
{
}

void sub_263C95980()
{
}

void sub_263C95988()
{
}

void sub_263C95990()
{
}

void sub_263C95998()
{
}

void sub_263C959A0()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void XofNavicAlmCodec::XofNavicAlmCodec(XofNavicAlmCodec *this)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v80, "svId");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v81, &v80, 1, 14, 0);
  std::string::basic_string[abi:ne180100]<0>(&v76, "weekNo");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v77, &v76, 0, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v72, "toa");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v73, &v72, 0, 37799, 0);
  std::string::basic_string[abi:ne180100]<0>(&v68, "e");
  XofIntegralType<unsigned short>::XofIntegralType((uint64_t)&v69, &v68, 0, 0xFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v64, "intSigCor");
  XofIntegralType<signed char>::XofIntegralType((uint64_t)&v65, &v64, -128, 127, 0);
  std::string::basic_string[abi:ne180100]<0>(&v60, "i0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v61, &v60, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v56, "omegaDot");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v57, &v56, -32768, 0x7FFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v52, "L5Health");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v53, &v52, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v48, "SHealth");
  XofIntegralType<unsigned char>::XofIntegralType((uint64_t)&v49, &v48, 0, 1, 0);
  std::string::basic_string[abi:ne180100]<0>(&v44, "sqrtA");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v45, &v44, 0, 0xFFFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v40, "omega0");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v41, &v40, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v36, "w");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v37, &v36, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v32, "m");
  XofIntegralType<int>::XofIntegralType((uint64_t)&v33, &v32, -8388608, 0x7FFFFF, 0);
  std::string::basic_string[abi:ne180100]<0>(&v28, "af0");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v29, &v28, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&v24, "af1");
  XofIntegralType<short>::XofIntegralType((uint64_t)&v25, &v24, -1024, 1023, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reserved2");
  XofIntegralType<unsigned int>::XofIntegralType((uint64_t)&v21, &__p, 0, -1, 0);
  *(_OWORD *)((char *)this + 8) = v82;
  *(_OWORD *)((char *)this + 40) = v78;
  *(_OWORD *)((char *)this + 72) = v74;
  *(_OWORD *)((char *)this + 104) = v70;
  *(_OWORD *)((char *)this + 136) = v66;
  long long v2 = v62;
  *((_OWORD *)this + 10) = v61;
  *((_OWORD *)this + 11) = v2;
  *((_OWORD *)this + 13) = v58;
  *((_OWORD *)this + 15) = v54;
  *((_OWORD *)this + 17) = v50;
  *(_OWORD *)((char *)this + 296) = v45;
  *(_OWORD *)((char *)this + 312) = v46;
  long long v3 = v42;
  *((_OWORD *)this + 21) = v41;
  *((_OWORD *)this + 22) = v3;
  *(_OWORD *)((char *)this + 376) = v37;
  *(_OWORD *)((char *)this + 392) = v38;
  long long v4 = v34;
  *((_OWORD *)this + 26) = v33;
  *((_OWORD *)this + 27) = v4;
  *((_OWORD *)this + 29) = v30;
  *((_OWORD *)this + 31) = *(_OWORD *)v26;
  long long v5 = v22;
  *(_OWORD *)((char *)this + 520) = v21;
  *(_DWORD *)this = v81;
  uint64_t v6 = v83;
  long long v82 = 0uLL;
  uint64_t v83 = 0;
  uint64_t v7 = v77;
  uint64_t v8 = v79;
  *((void *)this + 3) = v6;
  *((void *)this + 4) = v7;
  uint64_t v79 = 0;
  long long v78 = 0uLL;
  uint64_t v9 = v73;
  uint64_t v10 = v75;
  *((void *)this + 7) = v8;
  *((void *)this + 8) = v9;
  long long v74 = 0uLL;
  uint64_t v75 = 0;
  uint64_t v11 = v69;
  uint64_t v12 = v71;
  *((void *)this + 11) = v10;
  *((void *)this + 12) = v11;
  *((void *)this + 15) = v12;
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  *((_DWORD *)this + 32) = v65;
  *((void *)this + 19) = v67;
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  uint64_t v13 = v63;
  long long v62 = 0uLL;
  uint64_t v63 = 0;
  uint64_t v14 = v57;
  uint64_t v15 = v59;
  *((void *)this + 24) = v13;
  *((void *)this + 25) = v14;
  *((void *)this + 28) = v15;
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  *((_DWORD *)this + 58) = v53;
  *((void *)this + 32) = v55;
  long long v54 = 0uLL;
  uint64_t v55 = 0;
  *((_DWORD *)this + 66) = v49;
  *((void *)this + 36) = v51;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  *((void *)this + 41) = v47;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  *((void *)this + 46) = v43;
  long long v42 = 0uLL;
  uint64_t v43 = 0;
  *((void *)this + 51) = v39;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  uint64_t v16 = v35;
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  uint64_t v17 = v29;
  uint64_t v18 = v31;
  *((void *)this + 56) = v16;
  *((void *)this + 57) = v17;
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  uint64_t v19 = v25;
  *((void *)this + 60) = v18;
  *((void *)this + 61) = v19;
  *((void *)this + 64) = v27;
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  *((void *)this + 69) = v23;
  *(_OWORD *)((char *)this + 536) = v5;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v82);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
}

void sub_263C961EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a85);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (*(char *)(v85 - 193) < 0) {
    operator delete(*(void **)(v85 - 216));
  }
  if (*(char *)(v85 - 225) < 0) {
    operator delete(*(void **)(v85 - 248));
  }
  if (*(char *)(v85 - 137) < 0) {
    operator delete(*(void **)(v85 - 160));
  }
  if (*(char *)(v85 - 169) < 0) {
    operator delete(*(void **)(v85 - 192));
  }
  if (*(char *)(v85 - 81) < 0) {
    operator delete(*(void **)(v85 - 104));
  }
  if (*(char *)(v85 - 113) < 0) {
    operator delete(*(void **)(v85 - 136));
  }
  if (*(char *)(v85 - 25) < 0) {
    operator delete(*(void **)(v85 - 48));
  }
  if (*(char *)(v85 - 57) < 0) {
    operator delete(*(void **)(v85 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_263C96428()
{
}

void sub_263C96430()
{
}

void sub_263C96438()
{
}

void sub_263C96440()
{
}

void sub_263C96448()
{
}

void sub_263C96450()
{
}

void sub_263C96458()
{
}

void sub_263C96460()
{
}

void sub_263C96468()
{
}

void sub_263C96470()
{
}

void sub_263C96478()
{
}

void sub_263C96480()
{
}

void sub_263C96488()
{
}

void sub_263C96490()
{
}

void sub_263C96498()
{
}

void sub_263C964A0()
{
}

void sub_263C964A8()
{
}

void sub_263C964B0()
{
}

void sub_263C964B8()
{
}

void sub_263C964C0()
{
}

void sub_263C964C8()
{
}

void sub_263C964D0()
{
}

void sub_263C964D8()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>::~__tuple_impl(uint64_t a1)
{
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t XofIntegralType<short>::DecodeFromHexData(__int16 *a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 1)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 31) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 2uLL, (unint64_t *)__str)) {
    return 5;
  }
  __int16 v8 = *(_WORD *)__str;
  a1[3] = *(_WORD *)__str;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  if (*((char *)a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((void *)a1 + 2));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 4);
  }
  int v13 = XofBaseType::ValidateSignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *a3 += 2;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C967F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<int>::DecodeFromHexData(int *a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if ((unint64_t)(a2[1] - (*a2 + v5)) <= 3)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = (const char *)(a1 + 4);
      if (*((char *)a1 + 39) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 4uLL, (unint64_t *)__str)) {
    return 5;
  }
  int v8 = *(_DWORD *)__str;
  a1[3] = *(_DWORD *)__str;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  if (*((char *)a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 2), *((void *)a1 + 3));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 4);
  }
  int v13 = XofBaseType::ValidateSignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *a3 += 4;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C969D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XofIntegralType<signed char>::DecodeFromHexData(char *a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if (a2[1] - *a2 == v5)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = a1 + 8;
      if (a1[31] < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Insufficient data to decode, in the buffer! Field decoding is %s\n", (unint64_t)v6, "GNC", 87, "DecodeFromHexData", v7);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    return 5;
  }
  *(void *)__str = 0;
  if (!XofBaseType::CopyDataFromBuffer((int)a1, a2, v5, 1uLL, (unint64_t *)__str)) {
    return 5;
  }
  char v8 = __str[0];
  a1[3] = __str[0];
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  if (a1[31] < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a1 + 1), *((void *)a1 + 2));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 8);
  }
  int v13 = XofBaseType::ValidateSignedRange((uint64_t)a1, v8, v9, v10, v11, (const char *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  ++*a3;
  if (v13) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263C96BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL XofGenericCodec::Decode<12ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 416), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 448), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 480), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 512), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 544), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 576), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 608), a2, a3) == 1;
}

BOOL XofGenericCodec::Decode<10ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 344), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 384), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 424), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 464), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 496), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 528), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 560), a2, a3) == 1;
}

BOOL XofGenericCodec::Decode<9ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 296), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 336), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 376), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 416), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 456), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 488), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 520), a2, a3) == 1;
}

uint64_t *std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      long long v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      long long v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              long long v3 = (uint64_t *)v2[2];
            }
            char v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            long long v3 = v9[2];
            long long v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *long long v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *long long v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            long long v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          long long v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        long long v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *long long v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t Get_Constell_Prn(unsigned int a1)
{
  if (a1 < 0x20) {
    return 1;
  }
  if (a1 < 0x38) {
    return 2;
  }
  if (a1 < 0x5C) {
    return 3;
  }
  if (a1 < 0x9B) {
    return 4;
  }
  if (a1 < 0xA5) {
    return 5;
  }
  if (a1 < 0xB3) {
    return 6;
  }
  if (a1 < 0xDA) {
    return 7;
  }
  gn_report_assertion_failure("Get_Constell_Prn:");
  return 0;
}

uint64_t Get_Constell_Pos(unsigned int a1)
{
  if (a1 < 0x20) {
    return 1;
  }
  if (a1 < 0x38) {
    return 2;
  }
  if (a1 < 0x5C) {
    return 3;
  }
  if (a1 < 0x9B) {
    return 4;
  }
  if (a1 < 0xA5) {
    return 5;
  }
  if (a1 < 0xB3) {
    return 6;
  }
  if (a1 < 0xC5) {
    return 7;
  }
  gn_report_assertion_failure("Get_Constell_Pos:");
  return 0;
}

uint64_t LongPrnIdx_To_Prn(unsigned int a1, int *a2)
{
  BOOL v3 = __OFSUB__(a1, 31);
  uint64_t result = a1 - 31;
  if (((int)result < 0) ^ v3 | (result == 0))
  {
    if (a2) {
      *a2 = 1;
    }
    return a1 + 1;
  }
  else
  {
    if (a1 <= 0x37)
    {
      if (!a2) {
        return result;
      }
      int v5 = 2;
      goto LABEL_9;
    }
    uint64_t result = a1 - 91;
    if (a1 <= 0x5B)
    {
      if (a2) {
        *a2 = 3;
      }
      return a1 - 55;
    }
    if (a1 <= 0x9A)
    {
      if (!a2) {
        return result;
      }
      int v5 = 4;
      goto LABEL_9;
    }
    uint64_t result = a1 - 164;
    if (a1 > 0xA4)
    {
      if (a1 <= 0xB2)
      {
        if (!a2) {
          return result;
        }
        int v5 = 6;
LABEL_9:
        *a2 = v5;
        return result;
      }
      if (a1 > 0xD9)
      {
        if (a2) {
          *a2 = 0;
        }
        gn_report_assertion_failure("LPrn_2_Prn:");
        return 0;
      }
      else
      {
        if (a2) {
          *a2 = 7;
        }
        return a1 - 59;
      }
    }
    else
    {
      if (a2) {
        *a2 = 5;
      }
      return a1 + 38;
    }
  }
}

uint64_t LongPrnIdx_To_ShortPrnIdx(uint64_t result, _DWORD *a2)
{
  if ((result & 0x80000000) != 0)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = 0;
      return result;
    }
    return 0;
  }
  if (result <= 0x1F)
  {
    if (a2) {
      *a2 = 1;
    }
    return result;
  }
  if (result <= 0x37)
  {
    if (a2) {
      *a2 = 2;
    }
    return (result - 32);
  }
  if (result <= 0x5B)
  {
    if (a2) {
      *a2 = 3;
    }
    return (result - 56);
  }
  if (result <= 0x9A)
  {
    if (a2) {
      *a2 = 4;
    }
    return (result - 92);
  }
  if (result <= 0xA4)
  {
    if (a2) {
      *a2 = 5;
    }
    return (result - 155);
  }
  if (result <= 0xB2)
  {
    if (a2) {
      *a2 = 6;
    }
    return (result - 165);
  }
  if (result > 0xD9)
  {
    if (a2) {
      *a2 = 0;
    }
    gn_report_assertion_failure("LPrn_2_SPrn:");
    return 0;
  }
  if (a2) {
    *a2 = 7;
  }
  return (result - 179);
}

uint64_t GNSS_Id_To_Num_Prn_Idx(int a1)
{
  unsigned __int8 v1 = a1;
  int v2 = a1;
  int v3 = BYTE2(a1);
  if (!BYTE2(a1)) {
    gn_report_assertion_failure("Id_2_NPrn: 0");
  }
  if ((v2 - 1) > 6)
  {
    uint64_t v6 = 0;
    uint64_t v7 = "Id_2_NPrn: 1";
    goto LABEL_9;
  }
  int v4 = v3 - Prn_Offset[v1];
  int v5 = Num_Prn[v2 - 1];
  uint64_t v6 = (v4 + v5);
  if (v4 + v5 < 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = "Id_2_NPrn: 2";
    goto LABEL_9;
  }
  if (v6 >= 0xDA)
  {
    uint64_t v6 = 217;
    uint64_t v7 = "Id_2_NPrn: 3";
LABEL_9:
    gn_report_assertion_failure(v7);
  }
  return v6;
}

uint64_t Num_Prn_Idx_To_GNSS_Id(int a1)
{
  Constell_Pruint64_t n = Get_Constell_Prn(a1);
  if (!Constell_Prn)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_Id: 1";
    goto LABEL_7;
  }
  int v3 = Prn_Offset[Constell_Prn] + a1;
  int v4 = Num_Prn[Constell_Prn - 1];
  uint64_t v5 = (v3 - v4);
  if (v3 - v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_Id: 2";
    goto LABEL_7;
  }
  if (v5 >= 0x100)
  {
    uint64_t v5 = 255;
    uint64_t v6 = "NPrn_2_Id: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t GNSS_Id_To_Num_Pos_Idx(int a1)
{
  unsigned __int8 v1 = a1;
  int v2 = a1;
  int v3 = BYTE2(a1);
  if (!BYTE2(a1)) {
    gn_report_assertion_failure("Id_2_NPos: 0");
  }
  if ((v2 - 1) > 6)
  {
    uint64_t v6 = 0;
    uint64_t v7 = "Id_2_NPos: 1";
    goto LABEL_9;
  }
  int v4 = v3 - Prn_Offset[v1];
  int v5 = Num_Pos[v2 - 1];
  uint64_t v6 = (v4 + v5);
  if (v4 + v5 < 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = "Id_2_NPos: 2";
    goto LABEL_9;
  }
  if (v6 >= 0xC5)
  {
    uint64_t v6 = 196;
    uint64_t v7 = "Id_2_NPos: 3";
LABEL_9:
    gn_report_assertion_failure(v7);
  }
  return v6;
}

uint64_t Num_Pos_Idx_To_GNSS_Id(int a1)
{
  int Constell_Pos = Get_Constell_Pos(a1);
  if (!Constell_Pos)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_Id: 1";
    goto LABEL_7;
  }
  int v3 = Prn_Offset[Constell_Pos] + a1;
  int v4 = Num_Pos[Constell_Pos - 1];
  uint64_t v5 = (v3 - v4);
  if (v3 - v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_Id: 2";
    goto LABEL_7;
  }
  if (v5 >= 0x100)
  {
    uint64_t v5 = 255;
    uint64_t v6 = "NPos_2_Id: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t GNSS_SVId_Constell_To_Num_Pos_Idx(int a1, int a2)
{
  if (a2 < 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = "Id&C_2_NPos: 1";
    goto LABEL_7;
  }
  int v2 = a1 - Prn_Offset[a2];
  int v3 = Num_Pos[a2 - 1];
  uint64_t v4 = (v2 + v3);
  if (v2 + v3 < 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = "Id&C_2_NPos: 2";
    goto LABEL_7;
  }
  if (v4 >= 0xC5)
  {
    uint64_t v4 = 196;
    uint64_t v5 = "Id&C_2_NPos: 3";
LABEL_7:
    gn_report_assertion_failure(v5);
  }
  return v4;
}

uint64_t Num_Pos_Idx_To_Num_Prn_Idx(int a1)
{
  int Constell_Pos = Get_Constell_Pos(a1);
  if (!Constell_Pos)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_NPrn: 1";
    goto LABEL_7;
  }
  int v3 = a1 - Num_Pos[Constell_Pos - 1];
  int v4 = Num_Prn[Constell_Pos - 1];
  uint64_t v5 = (v3 + v4);
  if (v3 + v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_NPrn: 2";
    goto LABEL_7;
  }
  if (v5 >= 0xDA)
  {
    uint64_t v5 = 217;
    uint64_t v6 = "NPos_2_NPrn: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t Num_Prn_Idx_To_Num_Pos_Idx(int a1)
{
  Constell_Pruint64_t n = Get_Constell_Prn(a1);
  if (!Constell_Prn)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_NPos: 1";
    goto LABEL_7;
  }
  int v3 = a1 - Num_Prn[Constell_Prn - 1];
  int v4 = Num_Pos[Constell_Prn - 1];
  uint64_t v5 = (v3 + v4);
  if (v3 + v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_NPos: 2";
    goto LABEL_7;
  }
  if (v5 >= 0xC5)
  {
    uint64_t v5 = 196;
    uint64_t v6 = "NPrn_2_NPos: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

char **STEU_Encode(char **a1, char a2, unsigned __int8 *a3, unint64_t *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = (unsigned char *)*a4;
  int v6 = (*(_DWORD *)a4 - (int)a3) % 3;
  if (v6)
  {
    if (v6 == 1)
    {
      *uint64_t v5 = 0;
      uint64_t v5 = (unsigned char *)(*a4 + 1);
      *a4 = (unint64_t)v5;
    }
    *uint64_t v5 = 0;
    ++*a4;
  }
  uint64_t v7 = (*a1)++;
  *uint64_t v7 = 123;
  int v8 = *a1;
  if (*a1 >= a1[3]) {
    int v8 = a1[2];
  }
  *a1 = v8 + 1;
  *int v8 = a2;
  uint64_t v9 = *a1;
  if (*a1 >= a1[3])
  {
    uint64_t v9 = a1[2];
    *a1 = v9;
  }
  void v16[4] = 0;
  unint64_t v10 = *a4;
  do
  {
    unsigned int v11 = *a3;
    int v12 = (v11 >> 2) + 48;
    unsigned __int8 v13 = a3[1];
    v16[1] = ((v13 >> 4) & 0xCF | (16 * (v11 & 3))) + 48;
    LOBYTE(v11) = a3[2];
    double v16[2] = ((v11 >> 6) & 0xC3 | (4 * (v13 & 0xF))) + 48;
    v16[3] = (v11 & 0x3F) + 48;
    uint64_t v14 = 1;
    do
    {
      *a1 = v9 + 1;
      *uint64_t v9 = v12;
      uint64_t v9 = *a1;
      if (*a1 >= a1[3])
      {
        uint64_t v9 = a1[2];
        *a1 = v9;
      }
      int v12 = v16[v14++];
    }
    while (v12);
    a3 += 3;
  }
  while ((unint64_t)a3 < v10);
  *a4 = (unint64_t)a3;

  return STEU_Add_Checksum_LF((uint64_t)a1, v8);
}

char **STEU_Add_Checksum_LF(uint64_t a1, char *a2)
{
  int v3 = *(char **)a1;
  if (*(char **)a1 == a2)
  {
    unint64_t v7 = 0;
  }
  else
  {
    unsigned __int8 v4 = 0;
    do
    {
      char v6 = *a2++;
      char v5 = v6;
      if ((unint64_t)a2 >= *(void *)(a1 + 24)) {
        a2 = *(char **)(a1 + 16);
      }
      v4 += v5;
    }
    while (a2 != v3);
    unint64_t v7 = v4;
  }
  *(void *)a1 = v3 + 1;
  *int v3 = 125;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  uint64_t result = sprintf_02x((char **)a1, v7);
  uint64_t v9 = (unsigned char *)(*(void *)a1)++;
  *uint64_t v9 = 10;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  return result;
}

char **STEU_Encode_c(char **a1, char a2, int a3, unsigned __int8 *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v5 = (*a1)++;
  *char v5 = 123;
  char v6 = *a1;
  if (*a1 >= a1[3]) {
    char v6 = a1[2];
  }
  *a1 = v6 + 1;
  *char v6 = 99;
  unint64_t v7 = *a1;
  if (*a1 >= a1[3]) {
    unint64_t v7 = a1[2];
  }
  *a1 = v7 + 1;
  *unint64_t v7 = a2;
  int v8 = *a1;
  if (*a1 >= a1[3])
  {
    int v8 = a1[2];
    *a1 = v8;
  }
  void v15[4] = 0;
  uint64_t v9 = &a4[a3];
  do
  {
    unsigned int v10 = *a4;
    int v11 = (v10 >> 2) + 48;
    unsigned __int8 v12 = a4[1];
    v15[1] = ((v12 >> 4) & 0xCF | (16 * (v10 & 3))) + 48;
    LOBYTE(v10) = a4[2];
    v15[2] = ((v10 >> 6) & 0xC3 | (4 * (v12 & 0xF))) + 48;
    v15[3] = (v10 & 0x3F) + 48;
    uint64_t v13 = 1;
    do
    {
      *a1 = v8 + 1;
      *int v8 = v11;
      int v8 = *a1;
      if (*a1 >= a1[3])
      {
        int v8 = a1[2];
        *a1 = v8;
      }
      int v11 = v15[v13++];
    }
    while (v11);
    a4 += 3;
  }
  while (a4 < v9);

  return STEU_Add_Checksum_LF((uint64_t)a1, v6);
}

void *GNSS_Write_NMEA(void *result)
{
  if (result)
  {
    unsigned __int8 v1 = result;
    int v3 = (char *)*result;
    int v2 = (char *)result[1];
    if (v2 != (char *)*result)
    {
      if ((unint64_t)v2 > *result) {
        int v3 = (char *)result[3];
      }
      unsigned __int16 v4 = (_WORD)v3 - (_WORD)v2;
      uint64_t result = (void *)GN_GPS_Write_NMEA((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
      unsigned int v5 = result;
      if (g_Logging_Cfg >= 7) {
        uint64_t result = (void *)GN_GPS_Write_Nav_Debug((uint64_t)result, (char *)v1[1]);
      }
      char v6 = (char *)(v1[1] + v5);
      v1[1] = v6;
      if ((unint64_t)v6 >= v1[3])
      {
        char v6 = (char *)v1[2];
        v1[1] = v6;
        if (v5 == v4)
        {
          uint64_t result = (void *)GN_GPS_Write_NMEA((unsigned __int16)(*(_WORD *)v1 - (_WORD)v6), v6);
          unsigned int v7 = result;
          if (g_Logging_Cfg >= 8) {
            uint64_t result = (void *)GN_GPS_Write_Nav_Debug((uint64_t)result, (char *)v1[1]);
          }
          char v6 = (char *)(v1[1] + v7);
          v1[1] = v6;
        }
      }
      if (v6 == (char *)*v1)
      {
        uint64_t v8 = v1[2];
        *unsigned __int8 v1 = v8;
        v1[1] = v8;
      }
    }
  }
  return result;
}

char **NMEA_Encode(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v905 = *MEMORY[0x263EF8340];
  if (!result || !a2) {
    return result;
  }
  uint64_t v4 = (uint64_t)result;
  unsigned int v5 = (*result)++;
  *unsigned int v5 = 36;
  char v6 = *result;
  if (*result >= result[3]) {
    char v6 = result[2];
  }
  uint64_t v890 = result + 2;
  char v7 = 71;
  uint64_t v8 = 1u;
  uint64_t v9 = v6;
  do
  {
    uint64_t *result = v9 + 1;
    *uint64_t v9 = v7;
    uint64_t v9 = *result;
    if (*result >= result[3])
    {
      uint64_t v9 = result[2];
      uint64_t *result = v9;
    }
    char v7 = aGpgga[v8++];
  }
  while (v8 != 7);
  sprintf_HHMMSS(result, a2);
  if (*(unsigned char *)(a2 + 330) && (unsigned int v10 = *(_DWORD *)(a2 + 304)) != 0)
  {
    sprintf_LatLon((char **)v4, *(double *)(a2 + 104), *(double *)(a2 + 112));
    unint64_t v11 = 0x323132313630uLL >> (8 * v10);
    if (v10 >= 6) {
      LOBYTE(v11) = 48;
    }
    unsigned __int8 v12 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v12 = v11;
    uint64_t v13 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v13 = *v890;
    }
    *(void *)uint64_t v4 = v13 + 1;
    *uint64_t v13 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(a2 + 332), v904, 0, 0);
    uint64_t v14 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v14 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_DOP(v4, *(double *)(a2 + 272));
    uint64_t v15 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v15 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v16 = *(double *)(a2 + 128) * 1000.0;
    double v17 = -0.5;
    if (v16 > 0.0) {
      double v17 = 0.5;
    }
    double v18 = v16 + v17;
    if (v18 <= 2147483650.0)
    {
      if (v18 >= -2147483650.0) {
        unsigned int v19 = (int)v18;
      }
      else {
        unsigned int v19 = 0x80000000;
      }
    }
    else
    {
      unsigned int v19 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v19, 4);
    uint64_t v23 = *(char **)v4;
    char v24 = 44;
    uint64_t v25 = 1u;
    do
    {
      *(void *)uint64_t v4 = v23 + 1;
      *uint64_t v23 = v24;
      uint64_t v23 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v23 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v23;
      }
      char v24 = aM_0[v25++];
    }
    while (v25 != 4);
    double v26 = (*(double *)(a2 + 120) - *(double *)(a2 + 128)) * 1000.0;
    double v27 = -0.5;
    if (v26 > 0.0) {
      double v27 = 0.5;
    }
    double v28 = v26 + v27;
    if (v28 <= 2147483650.0)
    {
      if (v28 >= -2147483650.0) {
        unsigned int v29 = (int)v28;
      }
      else {
        unsigned int v29 = 0x80000000;
      }
    }
    else
    {
      unsigned int v29 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v29, 4);
    long long v30 = *(char **)v4;
    char v31 = 44;
    uint64_t v32 = 1u;
    do
    {
      *(void *)uint64_t v4 = v30 + 1;
      *long long v30 = v31;
      long long v30 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        long long v30 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v30;
      }
      char v31 = aM_0[v32++];
    }
    while (v32 != 4);
    *(void *)uint64_t v4 = v30 + 1;
    *long long v30 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
  }
  else
  {
    uint64_t v20 = 0;
    long long v21 = *(char **)v4;
    char v22 = 44;
    do
    {
      *(void *)uint64_t v4 = v21 + 1;
      *long long v21 = v22;
      long long v21 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        long long v21 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v21;
      }
      char v22 = a00MM[++v20];
    }
    while (v20 != 16);
  }
  NMEA_Add_checksum(v4, v6);
  long long v33 = (unsigned char *)(*(void *)v4)++;
  *long long v33 = 36;
  long long v34 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    long long v34 = *v890;
  }
  char v35 = 71;
  uint64_t v36 = 1u;
  long long v37 = v34;
  do
  {
    *(void *)uint64_t v4 = v37 + 1;
    *long long v37 = v35;
    long long v37 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      long long v37 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v37;
    }
    char v35 = aGpgll[v36++];
  }
  while (v36 != 7);
  int v38 = *(_DWORD *)(a2 + 304);
  if (*(unsigned char *)(a2 + 330)) {
    BOOL v39 = v38 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39)
  {
    uint64_t v40 = 0;
    char v41 = 44;
    do
    {
      *(void *)uint64_t v4 = v37 + 1;
      *long long v37 = v41;
      long long v37 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        long long v37 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v37;
      }
      char v41 = asc_263D6BBD5[++v40];
    }
    while (v40 != 4);
    sprintf_HHMMSS((void *)v4, a2);
    goto LABEL_68;
  }
  sprintf_LatLon((char **)v4, *(double *)(a2 + 104), *(double *)(a2 + 112));
  sprintf_HHMMSS((void *)v4, a2);
  if ((v38 - 1) > 4)
  {
LABEL_68:
    long long v42 = "V,N";
    goto LABEL_69;
  }
  long long v42 = off_2655E6F50[v38 - 1];
LABEL_69:
  char v43 = *v42;
  if (*v42)
  {
    std::string v44 = *(char **)v4;
    long long v45 = (unsigned __int8 *)(v42 + 1);
    do
    {
      *(void *)uint64_t v4 = v44 + 1;
      *std::string v44 = v43;
      std::string v44 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        std::string v44 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v44;
      }
      int v46 = *v45++;
      char v43 = v46;
    }
    while (v46);
  }
  NMEA_Add_checksum(v4, v34);
  int v903 = 0;
  uint64_t v902 = 0;
  int v901 = 0;
  uint64_t v900 = 0;
  int v899 = 0;
  uint64_t v898 = 0;
  int v897 = 0;
  uint64_t v896 = 0;
  int v895 = 0;
  uint64_t v894 = 0;
  int v893 = 0;
  uint64_t v892 = 0;
  uint64_t v47 = *(unsigned __int8 *)(a2 + 331);
  if (*(unsigned char *)(a2 + 331))
  {
    uint64_t v48 = 0;
    int v49 = 0;
    uint64_t v50 = 0;
    int v51 = 0;
    int v52 = 0;
    int v53 = 0;
    int v54 = 0;
    int v55 = 0;
    int v56 = 0;
    do
    {
      if (*(unsigned char *)(a2 + 6096 + v48)
        && (uint64_t v57 = *(unsigned __int8 *)(a2 + v48 + 1744), *(unsigned char *)(a2 + v48 + 1744))
        && ((int v58 = *(_DWORD *)(a2 + 4 * v48 + 336), v57 == v50) ? (v59 = v58 == v49) : (v59 = 0), !v59))
      {
        switch(v58)
        {
          case 1:
            if (v56 <= 11) {
              *((unsigned char *)&v902 + v56++) = v57;
            }
            int v49 = 1;
            break;
          case 2:
            if (v55 <= 11) {
              *((unsigned char *)&v900 + v55++) = v57;
            }
            int v49 = 2;
            break;
          case 3:
            if (v54 <= 11) {
              *((unsigned char *)&v898 + v54++) = v57;
            }
            int v49 = 3;
            break;
          case 4:
            if (v53 <= 11) {
              *((unsigned char *)&v896 + v53++) = v57;
            }
            int v49 = 4;
            break;
          case 5:
            if (v52 <= 11) {
              *((unsigned char *)&v894 + v52++) = v57;
            }
            int v49 = 5;
            break;
          case 6:
            if (v51 <= 11) {
              *((unsigned char *)&v892 + v51++) = v57;
            }
            int v49 = 6;
            break;
          default:
            int v49 = *(_DWORD *)(a2 + 4 * v48 + 336);
            break;
        }
      }
      else
      {
        uint64_t v57 = v50;
      }
      ++v48;
      uint64_t v50 = v57;
    }
    while (v47 != v48);
  }
  else
  {
    int v56 = 0;
    int v55 = 0;
    int v54 = 0;
    int v53 = 0;
    int v52 = 0;
    int v51 = 0;
  }
  int v869 = v51;
  int v870 = v52;
  int v871 = v53;
  int v872 = v54;
  uint64_t v868 = a3;
  char v882 = 0;
  uint64_t v60 = a2;
  if (*(unsigned char *)(a2 + 328) == 1) {
    char v61 = 77;
  }
  else {
    char v61 = 65;
  }
  char v878 = v61;
  int v62 = *(_DWORD *)(a2 + 304);
  if (!*(unsigned char *)(a2 + 330)) {
    int v62 = 0;
  }
  int v876 = v62;
  unsigned int v63 = v62 & 0xFFFFFFFE;
  if (v63 == 2) {
    char v64 = 50;
  }
  else {
    char v64 = 49;
  }
  if (v63 == 4) {
    char v65 = 51;
  }
  else {
    char v65 = v64;
  }
  char v875 = v65;
  BOOL v886 = v56 > 0;
  char v66 = 1;
  int v873 = v56;
  int v880 = v55;
  do
  {
    char v67 = v66;
    BOOL v39 = (v66 & 1) == 0;
    std::string v68 = "GP";
    if (v39) {
      std::string v68 = "GN";
    }
    int v888 = *(unsigned __int8 *)v68;
    v874 = v68 + 1;
    unsigned int v69 = 1;
    char v884 = v67;
    do
    {
      if ((v67 & (v69 != 1)) == 0)
      {
        long long v70 = (unsigned __int8 *)&v900;
        uint64_t v71 = (unsigned __int8 *)&v902;
        int v72 = v69;
        int v73 = v55;
        int v74 = v886;
        int v75 = v56;
        switch(v69)
        {
          case 1u:
            goto LABEL_131;
          case 2u:
            goto LABEL_129;
          case 3u:
            long long v70 = (unsigned __int8 *)&v894;
            int v72 = 5;
            int v73 = v870;
            goto LABEL_129;
          case 4u:
            long long v70 = (unsigned __int8 *)&v896;
            int v72 = v69;
            int v73 = v871;
            goto LABEL_129;
          case 5u:
            long long v70 = (unsigned __int8 *)&v898;
            int v72 = 3;
            int v73 = v872;
            goto LABEL_129;
          case 6u:
            long long v70 = (unsigned __int8 *)&v892;
            int v72 = v69;
            int v73 = v869;
LABEL_129:
            if (v73 >= 1)
            {
              int v74 = 1;
              uint64_t v71 = v70;
              int v75 = v73;
LABEL_131:
              std::string v76 = (unsigned char *)(*(void *)v4)++;
              unsigned char *v76 = 36;
              uint64_t v77 = *(char **)v4;
              if (*(void *)v4 >= *(void *)(v4 + 24)) {
                uint64_t v77 = *v890;
              }
              long long v78 = v77;
              if (v888)
              {
                uint64_t v79 = v874;
                long long v78 = v77;
                char v80 = v888;
                do
                {
                  *(void *)uint64_t v4 = v78 + 1;
                  *long long v78 = v80;
                  long long v78 = *(char **)v4;
                  if (*(void *)v4 >= *(void *)(v4 + 24))
                  {
                    long long v78 = *(char **)(v4 + 16);
                    *(void *)uint64_t v4 = v78;
                  }
                  int v81 = *(unsigned __int8 *)v79++;
                  char v80 = v81;
                }
                while (v81);
              }
              uint64_t v82 = 0;
              char v83 = 71;
              do
              {
                *(void *)uint64_t v4 = v78 + 1;
                *long long v78 = v83;
                long long v78 = *(char **)v4;
                if (*(void *)v4 >= *(void *)(v4 + 24))
                {
                  long long v78 = *(char **)(v4 + 16);
                  *(void *)uint64_t v4 = v78;
                }
                char v83 = aGsa[++v82];
              }
              while (v82 != 4);
              *(void *)uint64_t v4 = v78 + 1;
              *long long v78 = v878;
              uint64_t v84 = *(char **)v4;
              if (*(void *)v4 >= *(void *)(v4 + 24)) {
                uint64_t v84 = *v890;
              }
              *(void *)uint64_t v4 = v84 + 1;
              *uint64_t v84 = 44;
              uint64_t v85 = *(char **)v4;
              if (*(void *)v4 >= *(void *)(v4 + 24)) {
                uint64_t v85 = *v890;
              }
              *(void *)uint64_t v4 = v85 + 1;
              *uint64_t v85 = v875;
              uint64_t v86 = *(char **)v4;
              if (*(void *)v4 >= *(void *)(v4 + 24)) {
                uint64_t v86 = *v890;
              }
              *(void *)uint64_t v4 = v86 + 1;
              *uint64_t v86 = 44;
              uint64_t v87 = *(char **)v4;
              if (*(void *)v4 >= *(void *)(v4 + 24))
              {
                uint64_t v87 = *(char **)(v4 + 16);
                *(void *)uint64_t v4 = v87;
              }
              if (v876)
              {
                if (v75 <= 0) {
                  goto LABEL_162;
                }
                uint64_t v88 = v75;
                do
                {
                  unsigned int v90 = *v71++;
                  unsigned int v89 = v90;
                  if (v90)
                  {
                    switch(v72)
                    {
                      case 1:
                      case 4:
                      case 5:
                      case 6:
                        break;
                      case 2:
                        v89 += 64;
                        break;
                      case 3:
                        v89 -= 192;
                        break;
                      default:
                        unsigned int v89 = 0;
                        break;
                    }
                    sprintf_02d((void *)v4, v89);
                    std::string v91 = (unsigned char *)(*(void *)v4)++;
                    *std::string v91 = 44;
                    uint64_t v87 = *(char **)v4;
                    if (*(void *)v4 >= *(void *)(v4 + 24))
                    {
                      uint64_t v87 = *(char **)(v4 + 16);
                      *(void *)uint64_t v4 = v87;
                    }
                  }
                  --v88;
                }
                while (v88);
                uint64_t v60 = a2;
                int v56 = v873;
                if (v75 < 12)
                {
LABEL_162:
                  int v92 = v75 - 12;
                  do
                  {
                    *(void *)uint64_t v4 = v87 + 1;
                    *uint64_t v87 = 44;
                    uint64_t v87 = *(char **)v4;
                    if (*(void *)v4 >= *(void *)(v4 + 24))
                    {
                      uint64_t v87 = *(char **)(v4 + 16);
                      *(void *)uint64_t v4 = v87;
                    }
                  }
                  while (!__CFADD__(v92++, 1));
                }
              }
              else
              {
                for (unsigned int i = 15; i > 1; --i)
                {
                  *(void *)uint64_t v4 = v87 + 1;
                  *uint64_t v87 = 44;
                  uint64_t v87 = *(char **)v4;
                  if (*(void *)v4 >= *(void *)(v4 + 24))
                  {
                    uint64_t v87 = *(char **)(v4 + 16);
                    *(void *)uint64_t v4 = v87;
                  }
                }
              }
              if (v74 && *(double *)(v60 + 272) < 99.99)
              {
                sprintf_DOP(v4, *(double *)(v60 + 288));
                std::string v95 = (unsigned char *)(*(void *)v4)++;
                *std::string v95 = 44;
                if (*(void *)v4 >= *(void *)(v4 + 24)) {
                  *(void *)uint64_t v4 = *(void *)(v4 + 16);
                }
                sprintf_DOP(v4, *(double *)(a2 + 272));
                int v96 = (unsigned char *)(*(void *)v4)++;
                *int v96 = 44;
                if (*(void *)v4 >= *(void *)(v4 + 24)) {
                  *(void *)uint64_t v4 = *(void *)(v4 + 16);
                }
                sprintf_DOP(v4, *(double *)(a2 + 280));
              }
              else
              {
                *(void *)uint64_t v4 = v87 + 1;
                *uint64_t v87 = 44;
                long long v97 = *(char **)v4;
                if (*(void *)v4 >= *(void *)(v4 + 24)) {
                  long long v97 = *v890;
                }
                *(void *)uint64_t v4 = v97 + 1;
                *long long v97 = 44;
                if (*(void *)v4 >= *(void *)(v4 + 24)) {
                  *(void *)uint64_t v4 = *(void *)(v4 + 16);
                }
              }
              if (v882)
              {
                uint64_t v98 = (unsigned char *)(*(void *)v4)++;
                *uint64_t v98 = 44;
                if (*(void *)v4 >= *(void *)(v4 + 24)) {
                  *(void *)uint64_t v4 = *(void *)(v4 + 16);
                }
                sprintf1da((void *)v4, v69, v904, 0, 0);
              }
              NMEA_Add_checksum(v4, v77);
              uint64_t v60 = a2;
              int v55 = v880;
              char v67 = v884;
            }
            break;
          default:
            EvCrt_Illegal_switch_default("NMEA_Encode_GSA", 0x279u);
            char v67 = v884;
            uint64_t v60 = a2;
            break;
        }
      }
      ++v69;
    }
    while (v69 != 7);
    char v66 = 0;
    char v882 = 1;
  }
  while ((v67 & 1) != 0);
  std::string v99 = (unsigned char *)(*(void *)v4)++;
  unsigned char *v99 = 36;
  int v100 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    int v100 = *v890;
  }
  uint64_t v101 = 0;
  char v102 = 71;
  uint64_t v103 = v100;
  do
  {
    *(void *)uint64_t v4 = v103 + 1;
    *uint64_t v103 = v102;
    uint64_t v103 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      uint64_t v103 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v103;
    }
    char v102 = aGn[++v101];
  }
  while (v101 != 2);
  uint64_t v104 = 0;
  char v105 = 71;
  do
  {
    *(void *)uint64_t v4 = v103 + 1;
    *uint64_t v103 = v105;
    uint64_t v103 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      uint64_t v103 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v103;
    }
    char v105 = aGst[++v104];
  }
  while (v104 != 4);
  sprintf_HHMMSS((void *)v4, a2);
  uint64_t v106 = a2;
  if (*(unsigned char *)(a2 + 332))
  {
    double v107 = *(double *)(a2 + 256);
    if (v107 > 0.0)
    {
      sprintf_AccEst((void *)v4, v107);
      uint64_t v106 = a2;
    }
  }
  long long v108 = (unsigned char *)(*(void *)v4)++;
  *long long v108 = 44;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    *(void *)uint64_t v4 = *(void *)(v4 + 16);
  }
  sprintf_AccEst((void *)v4, *(double *)(v106 + 208));
  long long v109 = (unsigned char *)(*(void *)v4)++;
  *long long v109 = 44;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    *(void *)uint64_t v4 = *(void *)(v4 + 16);
  }
  sprintf_AccEst((void *)v4, *(double *)(a2 + 216));
  uint64_t v110 = (unsigned char *)(*(void *)v4)++;
  unsigned char *v110 = 44;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    *(void *)uint64_t v4 = *(void *)(v4 + 16);
  }
  int v111 = (int)*(double *)(a2 + 224);
  if (v111 >= 0) {
    unsigned int v112 = (int)*(double *)(a2 + 224);
  }
  else {
    unsigned int v112 = -v111;
  }
  sprintf1da((void *)v4, v112, v904, 0, v111 >> 31);
  uint64_t v113 = (unsigned char *)(*(void *)v4)++;
  unsigned char *v113 = 44;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    *(void *)uint64_t v4 = *(void *)(v4 + 16);
  }
  sprintf_AccEst((void *)v4, *(double *)(a2 + 184));
  long long v114 = (unsigned char *)(*(void *)v4)++;
  *long long v114 = 44;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    *(void *)uint64_t v4 = *(void *)(v4 + 16);
  }
  sprintf_AccEst((void *)v4, *(double *)(a2 + 192));
  long long v115 = (unsigned char *)(*(void *)v4)++;
  *long long v115 = 44;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    *(void *)uint64_t v4 = *(void *)(v4 + 16);
  }
  sprintf_AccEst((void *)v4, *(double *)(a2 + 200));
  NMEA_Add_checksum(v4, v100);
  uint64_t v116 = a2;
  uint64_t v117 = 0;
  uint64_t v877 = a2 + 1744;
  do
  {
    long long v118 = &NMEA_Encode_GSV(Cyc_buffer *,GN_GPS_Nav_Data const*)::GSV_Types[2 * v117];
    int v120 = *v118;
    int v119 = v118[1];
    uint64_t v879 = v117;
    switch(*v118)
    {
      case 0:
        EvCrt_Illegal_switch_case("NMEA_Encode_GSV", 0x328u);
        uint64_t v116 = a2;
        goto LABEL_330;
      case 1:
        long long v121 = "GP";
        goto LABEL_228;
      case 2:
        long long v121 = "GL";
        goto LABEL_228;
      case 3:
        long long v121 = "GQ";
        goto LABEL_228;
      case 4:
        long long v121 = "GB";
        goto LABEL_228;
      case 5:
        long long v121 = "GA";
        goto LABEL_228;
      case 6:
        long long v121 = "GI";
        goto LABEL_228;
      default:
        long long v121 = "";
LABEL_228:
        if (!*(unsigned char *)(v116 + 331)) {
          goto LABEL_330;
        }
        uint64_t v122 = 0;
        signed int v123 = 0;
        do
        {
          if (*(unsigned char *)(v877 + v122))
          {
            uint64_t v124 = v877 + 4 * v122;
            if (*(_DWORD *)(v124 - 1408) == v120 && *(_DWORD *)(v124 - 896) == v119) {
              ++v123;
            }
          }
          ++v122;
        }
        while (*(unsigned __int8 *)(v116 + 331) != v122);
        if (v123 <= 0) {
          goto LABEL_330;
        }
        int v125 = 0;
        unsigned int v126 = ((v123 - 1) >> 2) + 1;
        signed int v885 = v123;
        int v887 = *(unsigned __int8 *)v121;
        int v881 = v121 + 1;
        unsigned int v127 = 1;
        unsigned int v883 = v126;
        break;
    }
    do
    {
      uint64_t v128 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v128 = 36;
      uint64_t v129 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v129 = *v890;
      }
      uint64_t v130 = v129;
      if (v887)
      {
        int v131 = v881;
        uint64_t v130 = v129;
        char v132 = v887;
        do
        {
          *(void *)uint64_t v4 = v130 + 1;
          char *v130 = v132;
          uint64_t v130 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            uint64_t v130 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v130;
          }
          int v133 = *(unsigned __int8 *)v131++;
          char v132 = v133;
        }
        while (v133);
      }
      uint64_t v134 = 0;
      char v135 = 71;
      do
      {
        *(void *)uint64_t v4 = v130 + 1;
        char *v130 = v135;
        uint64_t v130 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v130 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v130;
        }
        char v135 = aGsv[++v134];
      }
      while (v134 != 4);
      v889 = v129;
      sprintf1da((void *)v4, v126, v904, 0, 0);
      uint64_t v136 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v136 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, v127, v904, 0, 0);
      uint64_t v137 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v137 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_02d((void *)v4, v123);
      uint64_t v138 = a2;
      int v139 = *(unsigned __int8 *)(a2 + 331);
      if (v125 < v139)
      {
        int v140 = 0;
        for (int j = v125; j < v139; ++j)
        {
          uint64_t v142 = v138 + v125;
          if (!*(unsigned char *)(v142 + 1744)
            || (uint64_t v143 = v138 + 4 * v125, *(_DWORD *)(v143 + 336) != v120)
            || *(_DWORD *)(v143 + 848) != v119)
          {
            ++v125;
            continue;
          }
          double v144 = (unsigned char *)(*(void *)v4)++;
          *double v144 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          unsigned int v145 = *(unsigned __int8 *)(v142 + 1744);
          switch(*(_DWORD *)(v143 + 336))
          {
            case 1:
            case 4:
            case 5:
            case 6:
              break;
            case 2:
              v145 += 64;
              break;
            case 3:
              v145 -= 192;
              break;
            default:
              unsigned int v145 = 0;
              break;
          }
          sprintf_02d((void *)v4, v145);
          double v146 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v146 = 44;
          double v147 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            double v147 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v147;
          }
          uint64_t v138 = a2;
          double v148 = *(double *)(a2 + 8 * v125 + 5072);
          if (v148 >= -5.0)
          {
            double v151 = v148 * 10.0;
            if (v151 <= 0.0) {
              double v152 = -0.5;
            }
            else {
              double v152 = 0.5;
            }
            double v153 = v151 + v152;
            if (v153 <= 2147483650.0)
            {
              if (v153 >= -2147483650.0) {
                unsigned int v154 = (int)v153;
              }
              else {
                unsigned int v154 = 0x80000000;
              }
            }
            else
            {
              unsigned int v154 = 0x7FFFFFFF;
            }
            sprintf_2f(v4, v154);
            __int16 v155 = (unsigned char *)(*(void *)v4)++;
            unsigned char *v155 = 44;
            if (*(void *)v4 >= *(void *)(v4 + 24)) {
              *(void *)uint64_t v4 = *(void *)(v4 + 16);
            }
            double v156 = *(double *)(a2 + 8 * v125 + 4048) * 10.0;
            if (v156 <= 0.0) {
              double v157 = -0.5;
            }
            else {
              double v157 = 0.5;
            }
            double v158 = v156 + v157;
            if (v158 <= 2147483650.0)
            {
              if (v158 >= -2147483650.0) {
                unsigned int v159 = (int)v158;
              }
              else {
                unsigned int v159 = 0x80000000;
              }
            }
            else
            {
              unsigned int v159 = 0x7FFFFFFF;
            }
            sprintf_2f(v4, v159);
            double v150 = (char **)v4;
            uint64_t v138 = a2;
          }
          else
          {
            *(void *)uint64_t v4 = v147 + 1;
            char *v147 = 44;
            uint64_t v149 = *(char **)v4;
            double v150 = v890;
            if (*(void *)v4 < *(void *)(v4 + 24)) {
              goto LABEL_291;
            }
          }
          uint64_t v149 = *v150;
LABEL_291:
          *(void *)uint64_t v4 = v149 + 1;
          *uint64_t v149 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          double v160 = *(double *)(v138 + 8 * v125 + 2000);
          if (v160 > 0.0)
          {
            double v161 = v160 * 10.0;
            if (v161 <= 0.0) {
              double v162 = -0.5;
            }
            else {
              double v162 = 0.5;
            }
            double v163 = v161 + v162;
            if (v163 <= 2147483650.0)
            {
              if (v163 >= -2147483650.0) {
                unsigned int v164 = (int)v163;
              }
              else {
                unsigned int v164 = 0x80000000;
              }
            }
            else
            {
              unsigned int v164 = 0x7FFFFFFF;
            }
            sprintf_2f(v4, v164);
            uint64_t v138 = a2;
          }
          ++v125;
          if (v140 > 2) {
            break;
          }
          ++v140;
          int v139 = *(unsigned __int8 *)(v138 + 331);
        }
      }
      double v165 = (unsigned char *)(*(void *)v4)++;
      *double v165 = 44;
      double v166 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        double v166 = *v890;
      }
      char v167 = 48;
      if (v119 <= 48)
      {
        signed int v123 = v885;
        switch(v119)
        {
          case 17:
          case 33:
          case 34:
            goto LABEL_320;
          case 18:
          case 35:
LABEL_312:
            char v167 = 51;
            break;
          case 19:
          case 36:
LABEL_318:
            char v167 = 53;
            break;
          case 20:
LABEL_321:
            char v167 = 56;
            break;
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
            break;
          default:
            signed int v123 = v885;
            break;
        }
      }
      else if (v119 > 80)
      {
        signed int v123 = v885;
        if (v119 <= 82)
        {
          if (v119 != 81)
          {
LABEL_320:
            char v167 = 49;
            goto LABEL_324;
          }
          char v167 = 55;
        }
        else if (v119 == 83 || v119 == 97)
        {
          char v167 = 50;
        }
        else if (v119 == 98)
        {
          goto LABEL_320;
        }
      }
      else
      {
        signed int v123 = v885;
        switch(v119)
        {
          case '1':
          case 'A':
            goto LABEL_320;
          case '2':
          case 'B':
            goto LABEL_312;
          case '3':
          case 'C':
            goto LABEL_318;
          case '4':
            goto LABEL_321;
          case 'D':
            char v167 = 54;
            break;
          default:
            break;
        }
      }
LABEL_324:
      *(void *)uint64_t v4 = v166 + 1;
      char *v166 = v167;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      NMEA_Add_checksum(v4, v889);
      unsigned int v126 = v883;
      BOOL v39 = v127++ == v883;
      uint64_t v116 = a2;
    }
    while (!v39);
LABEL_330:
    uint64_t v117 = v879 + 1;
  }
  while (v879 != 10);
  double v168 = (unsigned char *)(*(void *)v4)++;
  *double v168 = 36;
  double v169 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    double v169 = *v890;
  }
  char v170 = 71;
  uint64_t v171 = 1u;
  unint64_t v172 = v169;
  do
  {
    *(void *)uint64_t v4 = v172 + 1;
    *unint64_t v172 = v170;
    unint64_t v172 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      unint64_t v172 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v172;
    }
    char v170 = aGprmc[v171++];
  }
  while (v171 != 7);
  sprintf_HHMMSS((void *)v4, a2);
  uint64_t v173 = a2;
  if (*(unsigned char *)(a2 + 330)) {
    int v174 = *(_DWORD *)(a2 + 304);
  }
  else {
    int v174 = 0;
  }
  if (v174)
  {
    if (v174 <= 0) {
      char v175 = 86;
    }
    else {
      char v175 = 65;
    }
    int v176 = (char *)(*(void *)v4)++;
    char *v176 = v175;
    int v177 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      int v177 = *v890;
    }
    *(void *)uint64_t v4 = v177 + 1;
    char *v177 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_LatLon((char **)v4, *(double *)(a2 + 104), *(double *)(a2 + 112));
    double v178 = *(double *)(a2 + 136) * 1.94279547 * 1000.0;
    double v179 = -0.5;
    if (v178 > 0.0) {
      double v179 = 0.5;
    }
    double v180 = v178 + v179;
    if (v180 <= 2147483650.0)
    {
      if (v180 >= -2147483650.0) {
        unsigned int v181 = (int)v180;
      }
      else {
        unsigned int v181 = 0x80000000;
      }
    }
    else
    {
      unsigned int v181 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v181, 4);
    BOOL v185 = (unsigned char *)(*(void *)v4)++;
    *BOOL v185 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v186 = *(double *)(a2 + 144) * 10.0;
    double v187 = -0.5;
    if (v186 > 0.0) {
      double v187 = 0.5;
    }
    double v188 = v186 + v187;
    if (v188 <= 2147483650.0)
    {
      if (v188 >= -2147483650.0) {
        unsigned int v189 = (int)v188;
      }
      else {
        unsigned int v189 = 0x80000000;
      }
    }
    else
    {
      unsigned int v189 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v189);
    double v190 = (unsigned char *)(*(void *)v4)++;
    *double v190 = 44;
    BOOL v183 = *(char **)v4;
    uint64_t v173 = a2;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      BOOL v183 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v183;
    }
  }
  else
  {
    uint64_t v182 = 0;
    BOOL v183 = *(char **)v4;
    char v184 = 86;
    do
    {
      *(void *)uint64_t v4 = v183 + 1;
      char *v183 = v184;
      BOOL v183 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        BOOL v183 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v183;
      }
      char v184 = aV[++v182];
    }
    while (v182 != 8);
  }
  if (*(unsigned char *)(v173 + 17))
  {
    sprintf_02d((void *)v4, *(unsigned __int16 *)(a2 + 22));
    sprintf_02d((void *)v4, *(unsigned __int16 *)(a2 + 20));
    sprintf_02d((void *)v4, *(unsigned __int16 *)(a2 + 18) - 2000);
    BOOL v183 = *(char **)v4;
  }
  *(void *)uint64_t v4 = v183 + 1;
  char *v183 = 44;
  double v191 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    double v191 = *v890;
  }
  *(void *)uint64_t v4 = v191 + 1;
  *double v191 = 44;
  double v192 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    double v192 = *v890;
  }
  *(void *)uint64_t v4 = v192 + 1;
  *double v192 = 44;
  uint64_t v193 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    uint64_t v193 = *v890;
  }
  unint64_t v194 = 0x44414441454EuLL >> (8 * v174);
  if (v174 >= 6) {
    LOBYTE(v194) = 78;
  }
  *(void *)uint64_t v4 = v193 + 1;
  *uint64_t v193 = v194;
  int v195 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    int v195 = *v890;
  }
  uint64_t v196 = 0;
  char v197 = 44;
  do
  {
    *(void *)uint64_t v4 = v195 + 1;
    *int v195 = v197;
    int v195 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      int v195 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v195;
    }
    char v197 = aV_0[++v196];
  }
  while (v196 != 2);
  NMEA_Add_checksum(v4, v169);
  double v198 = (unsigned char *)(*(void *)v4)++;
  *double v198 = 36;
  double v199 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    double v199 = *v890;
  }
  char v200 = 71;
  uint64_t v201 = 1u;
  double v202 = v199;
  do
  {
    *(void *)uint64_t v4 = v202 + 1;
    *double v202 = v200;
    double v202 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      double v202 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v202;
    }
    char v200 = aGpvtg[v201++];
  }
  while (v201 != 7);
  int v203 = *(_DWORD *)(a2 + 304);
  if (*(unsigned char *)(a2 + 330)) {
    BOOL v204 = v203 == 0;
  }
  else {
    BOOL v204 = 1;
  }
  if (v204)
  {
    char v205 = 44;
    uint64_t v206 = 1u;
    uint64_t v207 = v868;
    do
    {
      *(void *)uint64_t v4 = v202 + 1;
      *double v202 = v205;
      double v202 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v202 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v202;
      }
      char v205 = aTMNKN[v206++];
    }
    while (v206 != 14);
  }
  else
  {
    double v208 = *(double *)(a2 + 144) * 10.0;
    double v209 = -0.5;
    if (v208 > 0.0) {
      double v209 = 0.5;
    }
    double v210 = v208 + v209;
    if (v210 <= 2147483650.0)
    {
      if (v210 >= -2147483650.0) {
        unsigned int v211 = (int)v210;
      }
      else {
        unsigned int v211 = 0x80000000;
      }
    }
    else
    {
      unsigned int v211 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v211);
    BOOL v212 = *(char **)v4;
    char v213 = 44;
    uint64_t v214 = 1u;
    do
    {
      *(void *)uint64_t v4 = v212 + 1;
      *BOOL v212 = v213;
      BOOL v212 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        BOOL v212 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v212;
      }
      char v213 = aT_2[v214++];
    }
    while (v214 != 4);
    char v215 = 44;
    uint64_t v216 = 1u;
    do
    {
      *(void *)uint64_t v4 = v212 + 1;
      *BOOL v212 = v215;
      BOOL v212 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        BOOL v212 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v212;
      }
      char v215 = aM_0[v216++];
    }
    while (v216 != 4);
    double v217 = *(double *)(a2 + 136) * 1.94279547 * 1000.0;
    double v218 = -0.5;
    if (v217 > 0.0) {
      double v218 = 0.5;
    }
    double v219 = v217 + v218;
    if (v219 <= 2147483650.0)
    {
      if (v219 >= -2147483650.0) {
        unsigned int v220 = (int)v219;
      }
      else {
        unsigned int v220 = 0x80000000;
      }
    }
    else
    {
      unsigned int v220 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v220, 4);
    int v221 = *(char **)v4;
    char v222 = 44;
    uint64_t v223 = 1u;
    do
    {
      *(void *)uint64_t v4 = v221 + 1;
      *int v221 = v222;
      int v221 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        int v221 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v221;
      }
      char v222 = aN_2[v223++];
    }
    while (v223 != 4);
    double v224 = *(double *)(a2 + 136) * 3.6 * 1000.0;
    double v225 = -0.5;
    if (v224 > 0.0) {
      double v225 = 0.5;
    }
    double v226 = v224 + v225;
    if (v226 <= 2147483650.0)
    {
      if (v226 >= -2147483650.0) {
        unsigned int v227 = (int)v226;
      }
      else {
        unsigned int v227 = 0x80000000;
      }
    }
    else
    {
      unsigned int v227 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v227, 4);
    int v228 = *(char **)v4;
    char v229 = 44;
    uint64_t v230 = 1u;
    do
    {
      *(void *)uint64_t v4 = v228 + 1;
      *int v228 = v229;
      int v228 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        int v228 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v228;
      }
      char v229 = aK[v230++];
    }
    while (v230 != 4);
    int v231 = v203 - 1;
    uint64_t v207 = v868;
    switch(v231)
    {
      case 0:
        *(void *)uint64_t v4 = v228 + 1;
        char v232 = 69;
        goto LABEL_446;
      case 1:
      case 3:
        *(void *)uint64_t v4 = v228 + 1;
        char v232 = 65;
        goto LABEL_446;
      case 2:
      case 4:
        *(void *)uint64_t v4 = v228 + 1;
        char v232 = 68;
LABEL_446:
        *int v228 = v232;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          goto LABEL_447;
        }
        break;
      default:
        *(void *)uint64_t v4 = v228 + 1;
        *int v228 = 78;
        uint64_t v207 = v868;
        if (*(void *)v4 < *(void *)(v4 + 24)) {
          break;
        }
LABEL_447:
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
        break;
    }
  }
  NMEA_Add_checksum(v4, v199);
  unsigned int v233 = (unsigned char *)(*(void *)v4)++;
  *unsigned int v233 = 36;
  char v234 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    char v234 = *v890;
  }
  uint64_t v235 = 0;
  char v236 = 71;
  uint64_t v237 = v234;
  do
  {
    *(void *)uint64_t v4 = v237 + 1;
    *uint64_t v237 = v236;
    uint64_t v237 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      uint64_t v237 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v237;
    }
    char v236 = aGn[++v235];
  }
  while (v235 != 2);
  uint64_t v238 = 0;
  char v239 = 90;
  do
  {
    *(void *)uint64_t v4 = v237 + 1;
    *uint64_t v237 = v239;
    uint64_t v237 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      uint64_t v237 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v237;
    }
    char v239 = aZcd[++v238];
  }
  while (v238 != 4);
  unsigned int v240 = *(_DWORD *)(a2 + 4);
  unsigned int v241 = v240 % 0x3E8;
  sprintf1da((void *)v4, v240 / 0x3E8, v904, 0, 0);
  int v242 = (unsigned char *)(*(void *)v4)++;
  *int v242 = 46;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    *(void *)uint64_t v4 = *(void *)(v4 + 16);
  }
  sprintf_03d(v4, v241);
  uint64_t v243 = 0;
  int v244 = *(char **)v4;
  char v245 = 44;
  do
  {
    *(void *)uint64_t v4 = v244 + 1;
    *int v244 = v245;
    int v244 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      int v244 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v244;
    }
    char v245 = asc_263D6BC83[++v243];
  }
  while (v243 != 2);
  NMEA_Add_checksum(v4, v234);
  long long v246 = (unsigned char *)(*(void *)v4)++;
  unsigned char *v246 = 36;
  long long v247 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    long long v247 = *v890;
  }
  uint64_t v248 = 0;
  char v249 = 71;
  long long v250 = v247;
  do
  {
    *(void *)uint64_t v4 = v250 + 1;
    *long long v250 = v249;
    long long v250 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      long long v250 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v250;
    }
    char v249 = aGn[++v248];
  }
  while (v248 != 2);
  uint64_t v251 = 0;
  char v252 = 90;
  do
  {
    *(void *)uint64_t v4 = v250 + 1;
    *long long v250 = v252;
    long long v250 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      long long v250 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v250;
    }
    char v252 = aZda[++v251];
  }
  while (v251 != 4);
  sprintf_HHMMSS((void *)v4, a2);
  if (*(unsigned char *)(a2 + 17))
  {
    sprintf_02d((void *)v4, *(unsigned __int16 *)(a2 + 22));
    long long v253 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v253 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_02d((void *)v4, *(unsigned __int16 *)(a2 + 20));
    unsigned int v254 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v254 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_02d((void *)v4, *(unsigned __int16 *)(a2 + 18));
    unsigned int v255 = *(char **)v4;
  }
  else
  {
    uint64_t v256 = 0;
    unsigned int v255 = *(char **)v4;
    char v257 = 44;
    do
    {
      *(void *)uint64_t v4 = v255 + 1;
      *unsigned int v255 = v257;
      unsigned int v255 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v255 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v255;
      }
      char v257 = asc_263D6BC8B[++v256];
    }
    while (v256 != 2);
  }
  uint64_t v258 = 0;
  char v259 = 44;
  do
  {
    *(void *)uint64_t v4 = v255 + 1;
    *unsigned int v255 = v259;
    unsigned int v255 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      unsigned int v255 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v255;
    }
    char v259 = asc_263D6BC8B[++v258];
  }
  while (v258 != 2);
  NMEA_Add_checksum(v4, v247);
  int v260 = (unsigned char *)(*(void *)v4)++;
  *int v260 = 36;
  double v261 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24)) {
    double v261 = *v890;
  }
  char v262 = 80;
  uint64_t v263 = 1u;
  uint64_t v264 = v261;
  do
  {
    *(void *)uint64_t v4 = v264 + 1;
    char *v264 = v262;
    uint64_t v264 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      uint64_t v264 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v264;
    }
    char v262 = aPdbga[v263++];
  }
  while (v263 != 7);
  sprintf_HHMMSS((void *)v4, a2);
  int v265 = *(_DWORD *)(a2 + 300);
  if (v265 >= 0) {
    unsigned int v266 = *(_DWORD *)(a2 + 300);
  }
  else {
    unsigned int v266 = -v265;
  }
  sprintf1da((void *)v4, v266, v904, 0, v265 >> 31);
  int v267 = (unsigned char *)(*(void *)v4)++;
  *int v267 = 44;
  signed int v268 = *(char **)v4;
  if (*(void *)v4 >= *(void *)(v4 + 24))
  {
    signed int v268 = *(char **)(v4 + 16);
    *(void *)uint64_t v4 = v268;
  }
  int v269 = *(_DWORD *)(a2 + 304);
  if (v269)
  {
    if (v269 >= 0) {
      unsigned int v270 = *(_DWORD *)(a2 + 304);
    }
    else {
      unsigned int v270 = -v269;
    }
    sprintf1da((void *)v4, v270, v904, 0, v269 >> 31);
    BOOL v271 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v271 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(a2 + 329), v904, 0, 0);
    unsigned int v272 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v272 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(a2 + 330), v904, 0, 0);
    double v273 = (unsigned char *)(*(void *)v4)++;
    *double v273 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 208));
    double v274 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v274 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 216));
    int v275 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v275 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v276 = (int)*(double *)(a2 + 224);
    if (v276 >= 0) {
      unsigned int v277 = (int)*(double *)(a2 + 224);
    }
    else {
      unsigned int v277 = -v276;
    }
    sprintf1da((void *)v4, v277, v904, 0, v276 >> 31);
    unsigned int v278 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v278 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 200));
    uint64_t v279 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v279 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 232));
    unint64_t v280 = (unsigned char *)(*(void *)v4)++;
    *unint64_t v280 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 240));
    char v281 = (unsigned char *)(*(void *)v4)++;
    *char v281 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 248));
    uint64_t v282 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v282 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 160) * 1000.0);
    uint64_t v283 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v283 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 168) * 1000000000.0);
    uint64_t v284 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v284 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 176) * 1000000000.0);
    uint64_t v285 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v285 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v286 = *(double *)(a2 + 152) * 1000.0;
    double v287 = -0.5;
    if (v286 > 0.0) {
      double v287 = 0.5;
    }
    double v288 = v286 + v287;
    if (v288 <= 2147483650.0)
    {
      if (v288 >= -2147483650.0) {
        unsigned int v289 = (int)v288;
      }
      else {
        unsigned int v289 = 0x80000000;
      }
    }
    else
    {
      unsigned int v289 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v289, 4);
    uint64_t v292 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v292 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v293 = *(_DWORD *)(a2 + 308);
    if (v293 >= 0) {
      unsigned int v294 = *(_DWORD *)(a2 + 308);
    }
    else {
      unsigned int v294 = -v293;
    }
    sprintf1da((void *)v4, v294, v904, 0, v293 >> 31);
    uint64_t v295 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v295 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v296 = *(_DWORD *)(a2 + 312);
    if (v296 >= 0) {
      unsigned int v297 = *(_DWORD *)(a2 + 312);
    }
    else {
      unsigned int v297 = -v296;
    }
    sprintf1da((void *)v4, v297, v904, 0, v296 >> 31);
    double v298 = (unsigned char *)(*(void *)v4)++;
    *double v298 = 44;
    double v299 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      double v299 = *v890;
    }
    uint64_t v300 = 0;
    char v301 = 48;
    do
    {
      *(void *)uint64_t v4 = v299 + 1;
      *double v299 = v301;
      double v299 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v299 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v299;
      }
      char v301 = a0x_0[++v300];
    }
    while (v300 != 2);
    unint64_t v302 = *(unsigned int *)(a2 + 324);
    LOBYTE(v904[0]) = hexTABLE[v302 >> 28];
    HIBYTE(v904[0]) = hexTABLE[(v302 >> 24) & 0xF];
    hex6(v4, v302, v904, 2);
    uint64_t v303 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v303 = 44;
    uint64_t v304 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v304 = *v890;
    }
    uint64_t v305 = 0;
    char v306 = 48;
    do
    {
      *(void *)uint64_t v4 = v304 + 1;
      *uint64_t v304 = v306;
      uint64_t v304 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v304 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v304;
      }
      char v306 = a0x_0[++v305];
    }
    while (v305 != 2);
    sprintf_03x((char **)v4, *(unsigned int *)(a2 + 296));
    __int16 v307 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v307 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v308 = *(_DWORD *)(a2 + 316);
    if (v308 >= 0) {
      unsigned int v309 = *(_DWORD *)(a2 + 316);
    }
    else {
      unsigned int v309 = -v308;
    }
    sprintf1da((void *)v4, v309, v904, 0, v308 >> 31);
  }
  else
  {
    char v290 = 48;
    uint64_t v291 = 1u;
    do
    {
      *(void *)uint64_t v4 = v268 + 1;
      *signed int v268 = v290;
      signed int v268 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        signed int v268 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v268;
      }
      char v290 = a0_1[v291++];
    }
    while (v291 != 20);
  }
  uint64_t result = NMEA_Add_checksum(v4, v261);
  if (v207 && *(_DWORD *)v207 == *(_DWORD *)a2 && *(_DWORD *)(v207 + 4) == *(_DWORD *)(a2 + 4))
  {
    double v310 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v310 = 36;
    long long v311 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      long long v311 = *v890;
    }
    char v312 = 80;
    uint64_t v313 = 1u;
    uint64_t v314 = v311;
    do
    {
      *(void *)uint64_t v4 = v314 + 1;
      char *v314 = v312;
      uint64_t v314 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v314 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v314;
      }
      char v312 = aPdbgc[v313++];
    }
    while (v313 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    uint64_t v315 = *(char **)v4;
    if (*(unsigned char *)(v207 + 16))
    {
      *(void *)uint64_t v4 = v315 + 1;
      *uint64_t v315 = 65;
      BOOL v316 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        BOOL v316 = *v890;
      }
      *(void *)uint64_t v4 = v316 + 1;
      *BOOL v316 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 17), v904, 0, 0);
      BOOL v317 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v317 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 18), v904, 0, 0);
      BOOL v318 = (unsigned char *)(*(void *)v4)++;
      *BOOL v318 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_3f(v4, *(_DWORD *)(v207 + 20) / 10, 3);
      BOOL v319 = (unsigned char *)(*(void *)v4)++;
      *BOOL v319 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 24), v904, 0, 0);
      BOOL v320 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v320 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 25), v904, 0, 0);
      BOOL v321 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v321 = 44;
      uint64_t v315 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v315 = *v890;
      }
    }
    else
    {
      char v322 = 78;
      uint64_t v323 = 1u;
      do
      {
        *(void *)uint64_t v4 = v315 + 1;
        *uint64_t v315 = v322;
        uint64_t v315 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v315 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v315;
        }
        char v322 = aN_4[v323++];
      }
      while (v323 != 8);
    }
    if (*(unsigned char *)(v207 + 26))
    {
      *(void *)uint64_t v4 = v315 + 1;
      *uint64_t v315 = 65;
      uint64_t v324 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v324 = *v890;
      }
      *(void *)uint64_t v4 = v324 + 1;
      *uint64_t v324 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 27), v904, 0, 0);
      long long v325 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v325 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 28), v904, 0, 0);
      long long v326 = (unsigned char *)(*(void *)v4)++;
      *long long v326 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_3f(v4, *(_DWORD *)(v207 + 32) / 10, 3);
      uint64_t v327 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v327 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 36), v904, 0, 0);
      BOOL v328 = (unsigned char *)(*(void *)v4)++;
      *BOOL v328 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 37), v904, 0, 0);
      uint64_t v329 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v329 = 44;
      uint64_t v315 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v315 = *v890;
      }
    }
    else
    {
      char v330 = 78;
      uint64_t v331 = 1u;
      do
      {
        *(void *)uint64_t v4 = v315 + 1;
        *uint64_t v315 = v330;
        uint64_t v315 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v315 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v315;
        }
        char v330 = aN_4[v331++];
      }
      while (v331 != 8);
    }
    if (*(unsigned char *)(v207 + 38))
    {
      *(void *)uint64_t v4 = v315 + 1;
      *uint64_t v315 = 65;
      uint64_t v332 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v332 = *v890;
      }
      *(void *)uint64_t v4 = v332 + 1;
      char *v332 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 39), v904, 0, 0);
      uint64_t v333 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v333 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 40), v904, 0, 0);
      char v334 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v334 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_3f(v4, *(_DWORD *)(v207 + 44) / 10, 3);
      uint64_t v335 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v335 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 48), v904, 0, 0);
      unint64_t v336 = (unsigned char *)(*(void *)v4)++;
      *unint64_t v336 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 49), v904, 0, 0);
    }
    else
    {
      char v337 = 78;
      uint64_t v338 = 1u;
      do
      {
        *(void *)uint64_t v4 = v315 + 1;
        *uint64_t v315 = v337;
        uint64_t v315 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v315 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v315;
        }
        char v337 = aN_5[v338++];
      }
      while (v338 != 7);
    }
    NMEA_Add_checksum(v4, v311);
    uint64_t v339 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v339 = 36;
    uint64_t v340 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v340 = *v890;
    }
    char v341 = 80;
    uint64_t v342 = 1u;
    uint64_t v343 = v340;
    do
    {
      *(void *)uint64_t v4 = v343 + 1;
      char *v343 = v341;
      uint64_t v343 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v343 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v343;
      }
      char v341 = aPdbgd[v342++];
    }
    while (v342 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    uint64_t v344 = *(char **)v4;
    if (*(unsigned char *)(v207 + 50))
    {
      *(void *)uint64_t v4 = v344 + 1;
      char *v344 = 65;
      uint64_t v345 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v345 = *v890;
      }
      *(void *)uint64_t v4 = v345 + 1;
      char *v345 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 51), v904, 0, 0);
      uint64_t v346 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v346 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 52), v904, 0, 0);
      uint64_t v347 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v347 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_3f(v4, *(_DWORD *)(v207 + 56) / 10, 3);
      uint64_t v348 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v348 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v349 = *(double *)(v207 + 64) * 100.0;
      double v350 = -0.5;
      if (v349 > 0.0) {
        double v350 = 0.5;
      }
      double v351 = v349 + v350;
      if (v351 <= 2147483650.0)
      {
        if (v351 >= -2147483650.0) {
          unsigned int v352 = (int)v351;
        }
        else {
          unsigned int v352 = 0x80000000;
        }
      }
      else
      {
        unsigned int v352 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v352, 3);
      int v355 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v355 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v356 = *(double *)(v207 + 72) * 100.0;
      double v357 = -0.5;
      if (v356 > 0.0) {
        double v357 = 0.5;
      }
      double v358 = v356 + v357;
      if (v358 <= 2147483650.0)
      {
        if (v358 >= -2147483650.0) {
          unsigned int v359 = (int)v358;
        }
        else {
          unsigned int v359 = 0x80000000;
        }
      }
      else
      {
        unsigned int v359 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v359, 3);
      long long v360 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v360 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 80), v904, 0, 0);
    }
    else
    {
      char v353 = 78;
      uint64_t v354 = 1u;
      do
      {
        *(void *)uint64_t v4 = v344 + 1;
        char *v344 = v353;
        uint64_t v344 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v344 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v344;
        }
        char v353 = aN_4[v354++];
      }
      while (v354 != 8);
    }
    NMEA_Add_checksum(v4, v340);
    long long v361 = (unsigned char *)(*(void *)v4)++;
    *long long v361 = 36;
    __int16 v362 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      __int16 v362 = *v890;
    }
    char v363 = 80;
    uint64_t v364 = 1u;
    long long v365 = v362;
    do
    {
      *(void *)uint64_t v4 = v365 + 1;
      *long long v365 = v363;
      long long v365 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        long long v365 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v365;
      }
      char v363 = aPdbge[v364++];
    }
    while (v364 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    uint64_t v366 = 0;
    v367 = *(char **)v4;
    char v368 = 65;
    do
    {
      *(void *)uint64_t v4 = v367 + 1;
      char *v367 = v368;
      v367 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v367 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v367;
      }
      char v368 = aA[++v366];
    }
    while (v366 != 2);
    sprintf1da((void *)v4, *(unsigned __int8 *)(v207 + 81), v904, 0, 0);
    long long v369 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v369 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 82), v904, 0, 0);
    uint64_t v370 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v370 = 44;
    uint64_t v371 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v371 = *v890;
    }
    *(void *)uint64_t v4 = v371 + 1;
    char *v371 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 84), v904, 0, 0);
    long long v372 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v372 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 86), v904, 0, 0);
    v373 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v373 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 90), v904, 0, 0);
    long long v374 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v374 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 92), v904, 0, 0);
    int v375 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v375 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 93), v904, 0, 0);
    long long v376 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v376 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 95), v904, 0, 0);
    BOOL v377 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v377 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 96), v904, 0, 0);
    long long v378 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v378 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v379 = *(char *)(v868 + 97);
    if (v379 >= 0) {
      unsigned int v380 = *(char *)(v868 + 97);
    }
    else {
      unsigned int v380 = -v379;
    }
    sprintf1da((void *)v4, v380, v904, 0, (v379 >> 7) & 1);
    int v381 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v381 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 98), v904, 0, 0);
    long long v382 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v382 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 99), v904, 0, 0);
    uint64_t v383 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v383 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 100), v904, 0, 0);
    long long v384 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v384 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 102), v904, 0, 0);
    uint64_t v385 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v385 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 104), v904, 0, 0);
    long long v386 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v386 = 44;
    uint64_t v387 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v387 = *v890;
    }
    uint64_t v388 = 0;
    char v389 = 82;
    do
    {
      *(void *)uint64_t v4 = v387 + 1;
      char *v387 = v389;
      uint64_t v387 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v387 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v387;
      }
      char v389 = aR_0[++v388];
    }
    while (v388 != 2);
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 106), v904, 0, 0);
    uint64_t v390 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v390 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 108), v904, 0, 0);
    int v391 = (unsigned char *)(*(void *)v4)++;
    *int v391 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 110), v904, 0, 0);
    __int16 v392 = (unsigned char *)(*(void *)v4)++;
    *__int16 v392 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 112), v904, 0, 0);
    double v393 = (unsigned char *)(*(void *)v4)++;
    *double v393 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 113), v904, 0, 0);
    long long v394 = (unsigned char *)(*(void *)v4)++;
    *long long v394 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 114), v904, 0, 0);
    long long v395 = (unsigned char *)(*(void *)v4)++;
    *long long v395 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 115), v904, 0, 0);
    long long v396 = (unsigned char *)(*(void *)v4)++;
    *long long v396 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 116), v904, 0, 0);
    long long v397 = (unsigned char *)(*(void *)v4)++;
    *long long v397 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v398 = *(double *)(v868 + 120) * 10.0;
    double v399 = -0.5;
    if (v398 > 0.0) {
      double v399 = 0.5;
    }
    double v400 = v398 + v399;
    if (v400 <= 2147483650.0)
    {
      if (v400 >= -2147483650.0) {
        unsigned int v401 = (int)v400;
      }
      else {
        unsigned int v401 = 0x80000000;
      }
    }
    else
    {
      unsigned int v401 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v401);
    long long v402 = (unsigned char *)(*(void *)v4)++;
    *long long v402 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v403 = *(double *)(v868 + 128) * 10.0;
    double v404 = -0.5;
    if (v403 > 0.0) {
      double v404 = 0.5;
    }
    double v405 = v403 + v404;
    if (v405 <= 2147483650.0)
    {
      if (v405 >= -2147483650.0) {
        unsigned int v406 = (int)v405;
      }
      else {
        unsigned int v406 = 0x80000000;
      }
    }
    else
    {
      unsigned int v406 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v406);
    uint64_t v407 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v407 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v408 = *(double *)(v868 + 136) * 10.0;
    double v409 = -0.5;
    if (v408 > 0.0) {
      double v409 = 0.5;
    }
    double v410 = v408 + v409;
    if (v410 <= 2147483650.0)
    {
      if (v410 >= -2147483650.0) {
        unsigned int v411 = (int)v410;
      }
      else {
        unsigned int v411 = 0x80000000;
      }
    }
    else
    {
      unsigned int v411 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v411);
    BOOL v412 = (unsigned char *)(*(void *)v4)++;
    *BOOL v412 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v413 = *(double *)(v868 + 144) * 10.0;
    double v414 = -0.5;
    if (v413 > 0.0) {
      double v414 = 0.5;
    }
    double v415 = v413 + v414;
    if (v415 <= 2147483650.0)
    {
      if (v415 >= -2147483650.0) {
        unsigned int v416 = (int)v415;
      }
      else {
        unsigned int v416 = 0x80000000;
      }
    }
    else
    {
      unsigned int v416 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v416);
    long long v417 = (unsigned char *)(*(void *)v4)++;
    *long long v417 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 152), v904, 0, 0);
    long long v418 = (unsigned char *)(*(void *)v4)++;
    *long long v418 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 153), v904, 0, 0);
    long long v419 = (unsigned char *)(*(void *)v4)++;
    *long long v419 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 154), v904, 0, 0);
    long long v420 = (unsigned char *)(*(void *)v4)++;
    *long long v420 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 155), v904, 0, 0);
    long long v421 = (unsigned char *)(*(void *)v4)++;
    *long long v421 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 156), v904, 0, 0);
    long long v422 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v422 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 157), v904, 0, 0);
    long long v423 = (unsigned char *)(*(void *)v4)++;
    *long long v423 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 158), v904, 0, 0);
    long long v424 = (unsigned char *)(*(void *)v4)++;
    *long long v424 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 159), v904, 0, 0);
    NMEA_Add_checksum(v4, v362);
    if (*(unsigned char *)(v868 + 160)) {
      NMEA_Encode_PDBGE_Constell((char **)v4, 1, a2, v868);
    }
    if (*(unsigned char *)(v868 + 200)) {
      NMEA_Encode_PDBGE_Constell((char **)v4, 5, a2, v868);
    }
    if (*(unsigned char *)(v868 + 240)) {
      NMEA_Encode_PDBGE_Constell((char **)v4, 2, a2, v868);
    }
    if (*(unsigned char *)(v868 + 280)) {
      NMEA_Encode_PDBGE_Constell((char **)v4, 3, a2, v868);
    }
    if (*(unsigned char *)(v868 + 320)) {
      NMEA_Encode_PDBGE_Constell((char **)v4, 4, a2, v868);
    }
    if (*(unsigned char *)(v868 + 360)) {
      NMEA_Encode_PDBGE_Constell((char **)v4, 6, a2, v868);
    }
    if (*(unsigned char *)(v868 + 400)) {
      NMEA_Encode_PDBGE_Constell((char **)v4, 7, a2, v868);
    }
    long long v425 = (unsigned char *)(*(void *)v4)++;
    *long long v425 = 36;
    long long v426 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      long long v426 = *v890;
    }
    char v427 = 80;
    uint64_t v428 = 1u;
    v429 = v426;
    do
    {
      *(void *)uint64_t v4 = v429 + 1;
      char *v429 = v427;
      v429 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v429 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v429;
      }
      char v427 = aPdbgi[v428++];
    }
    while (v428 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    uint64_t v430 = 0;
    uint64_t v431 = *(char **)v4;
    char v432 = 65;
    do
    {
      *(void *)uint64_t v4 = v431 + 1;
      *uint64_t v431 = v432;
      uint64_t v431 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v431 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v431;
      }
      char v432 = aA[++v430];
    }
    while (v430 != 2);
    int v433 = *(_DWORD *)(v868 + 440);
    if (v433 >= 0) {
      unsigned int v434 = *(_DWORD *)(v868 + 440);
    }
    else {
      unsigned int v434 = -v433;
    }
    sprintf1da((void *)v4, v434, v904, 0, v433 >> 31);
    uint64_t v435 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v435 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 444), v904, 0, 0);
    uint64_t v436 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v436 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 446), v904, 0, 0);
    unint64_t v437 = (unsigned char *)(*(void *)v4)++;
    *unint64_t v437 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_2d((void *)v4, *(_DWORD *)(v868 + 448));
    char v438 = (unsigned char *)(*(void *)v4)++;
    *char v438 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    for (uint64_t k = 452; k != 458; ++k)
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + k), v904, 0, 0);
    char v440 = (unsigned char *)(*(void *)v4)++;
    *char v440 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 458), v904, 0, 0);
    BOOL v441 = (unsigned char *)(*(void *)v4)++;
    *BOOL v441 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v442 = *(double *)(v868 + 464) * 10.0;
    double v443 = -0.5;
    if (v442 > 0.0) {
      double v443 = 0.5;
    }
    double v444 = v442 + v443;
    if (v444 <= 2147483650.0)
    {
      if (v444 >= -2147483650.0) {
        unsigned int v445 = (int)v444;
      }
      else {
        unsigned int v445 = 0x80000000;
      }
    }
    else
    {
      unsigned int v445 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v445);
    unsigned int v446 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v446 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v868 + 472));
    unsigned int v447 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v447 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v868 + 480));
    uint64_t v448 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v448 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v868 + 488));
    uint64_t v449 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v449 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 496), v904, 0, 0);
    unsigned int v450 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v450 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 497), v904, 0, 0);
    NMEA_Add_checksum(v4, v426);
    if (*(unsigned char *)(v868 + 504)) {
      NMEA_Encode_PDBGI_Constell((char **)v4, 1, a2, v868);
    }
    if (*(unsigned char *)(v868 + 600)) {
      NMEA_Encode_PDBGI_Constell((char **)v4, 5, a2, v868);
    }
    if (*(unsigned char *)(v868 + 696)) {
      NMEA_Encode_PDBGI_Constell((char **)v4, 2, a2, v868);
    }
    if (*(unsigned char *)(v868 + 792)) {
      NMEA_Encode_PDBGI_Constell((char **)v4, 3, a2, v868);
    }
    if (*(unsigned char *)(v868 + 888)) {
      NMEA_Encode_PDBGI_Constell((char **)v4, 4, a2, v868);
    }
    if (*(unsigned char *)(v868 + 984)) {
      NMEA_Encode_PDBGI_Constell((char **)v4, 6, a2, v868);
    }
    if (*(unsigned char *)(v868 + 1080)) {
      NMEA_Encode_PDBGI_Constell((char **)v4, 7, a2, v868);
    }
    char v451 = (unsigned char *)(*(void *)v4)++;
    *char v451 = 36;
    v452 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      v452 = *v890;
    }
    char v453 = 80;
    uint64_t v454 = 1u;
    unsigned int v455 = v452;
    do
    {
      *(void *)uint64_t v4 = v455 + 1;
      *unsigned int v455 = v453;
      unsigned int v455 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v455 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v455;
      }
      char v453 = aPdbgm[v454++];
    }
    while (v454 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    v456 = *(char **)v4;
    if (*(unsigned char *)(v868 + 1176))
    {
      *(void *)uint64_t v4 = v456 + 1;
      char *v456 = 65;
      char v457 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        char v457 = *v890;
      }
      *(void *)uint64_t v4 = v457 + 1;
      *char v457 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1177), v904, 0, 0);
      uint64_t v458 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v458 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1178), v904, 0, 0);
      v459 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v459 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_3f(v4, *(_DWORD *)(v868 + 1180) / 10, 3);
      uint64_t v460 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v460 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1184), v904, 0, 0);
      uint64_t v461 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v461 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v462 = *(double *)(v868 + 1192) * 10.0;
      double v463 = -0.5;
      if (v462 > 0.0) {
        double v463 = 0.5;
      }
      double v464 = v462 + v463;
      if (v464 <= 2147483650.0)
      {
        if (v464 >= -2147483650.0) {
          unsigned int v465 = (int)v464;
        }
        else {
          unsigned int v465 = 0x80000000;
        }
      }
      else
      {
        unsigned int v465 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v465);
      uint64_t v468 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v468 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v469 = *(double *)(v868 + 1200) * 10.0;
      double v470 = -0.5;
      if (v469 > 0.0) {
        double v470 = 0.5;
      }
      double v471 = v469 + v470;
      if (v471 <= 2147483650.0)
      {
        if (v471 >= -2147483650.0) {
          unsigned int v472 = (int)v471;
        }
        else {
          unsigned int v472 = 0x80000000;
        }
      }
      else
      {
        unsigned int v472 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v472);
      uint64_t v473 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v473 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v474 = *(double *)(v868 + 1208) * 10.0;
      double v475 = -0.5;
      if (v474 > 0.0) {
        double v475 = 0.5;
      }
      double v476 = v474 + v475;
      if (v476 <= 2147483650.0)
      {
        if (v476 >= -2147483650.0) {
          unsigned int v477 = (int)v476;
        }
        else {
          unsigned int v477 = 0x80000000;
        }
      }
      else
      {
        unsigned int v477 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v477);
      unsigned int v478 = (unsigned char *)(*(void *)v4)++;
      *unsigned int v478 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 1216), v904, 0, 0);
      char v479 = (unsigned char *)(*(void *)v4)++;
      *char v479 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 1218), v904, 0, 0);
      uint64_t v480 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v480 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1220), v904, 0, 0);
      double v481 = (unsigned char *)(*(void *)v4)++;
      *double v481 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1221), v904, 0, 0);
      v482 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v482 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1222), v904, 0, 0);
      char v483 = (unsigned char *)(*(void *)v4)++;
      *char v483 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1223), v904, 0, 0);
      uint64_t v484 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v484 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1224), v904, 0, 0);
      v485 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v485 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1225), v904, 0, 0);
    }
    else
    {
      char v466 = 78;
      uint64_t v467 = 1u;
      do
      {
        *(void *)uint64_t v4 = v456 + 1;
        char *v456 = v466;
        v456 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v456 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v456;
        }
        char v466 = aN_6[v467++];
      }
      while (v467 != 15);
    }
    NMEA_Add_checksum(v4, v452);
    if (*(unsigned char *)(v868 + 1232)) {
      NMEA_Encode_PDBGO((char **)v4, 1, a2, (unint64_t *)v868);
    }
    if (*(unsigned char *)(v868 + 1288)) {
      NMEA_Encode_PDBGO((char **)v4, 5, a2, (unint64_t *)v868);
    }
    if (*(unsigned char *)(v868 + 1344)) {
      NMEA_Encode_PDBGO((char **)v4, 2, a2, (unint64_t *)v868);
    }
    if (*(unsigned char *)(v868 + 1400)) {
      NMEA_Encode_PDBGO((char **)v4, 3, a2, (unint64_t *)v868);
    }
    if (*(unsigned char *)(v868 + 1456)) {
      NMEA_Encode_PDBGO((char **)v4, 4, a2, (unint64_t *)v868);
    }
    if (*(unsigned char *)(v868 + 1512)) {
      NMEA_Encode_PDBGO((char **)v4, 6, a2, (unint64_t *)v868);
    }
    if (*(unsigned char *)(v868 + 1568)) {
      NMEA_Encode_PDBGO((char **)v4, 7, a2, (unint64_t *)v868);
    }
    v486 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v486 = 36;
    uint64_t v487 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v487 = *v890;
    }
    char v488 = 80;
    uint64_t v489 = 1u;
    uint64_t v490 = v487;
    do
    {
      *(void *)uint64_t v4 = v490 + 1;
      *uint64_t v490 = v488;
      uint64_t v490 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v490 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v490;
      }
      char v488 = aPdbgp[v489++];
    }
    while (v489 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    uint64_t v491 = *(char **)v4;
    if (*(unsigned char *)(v868 + 1624))
    {
      *(void *)uint64_t v4 = v491 + 1;
      *uint64_t v491 = 65;
      v492 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v492 = *v890;
      }
      *(void *)uint64_t v4 = v492 + 1;
      char *v492 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1625), v904, 0, 0);
      char v493 = (unsigned char *)(*(void *)v4)++;
      *char v493 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1627), v904, 0, 0);
      uint64_t v494 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v494 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_3f(v4, *(_DWORD *)(v868 + 1628) / 10, 3);
      v495 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v495 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1632), v904, 0, 0);
      char v496 = (unsigned char *)(*(void *)v4)++;
      *char v496 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1633), v904, 0, 0);
      char v497 = (unsigned char *)(*(void *)v4)++;
      *char v497 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1634), v904, 0, 0);
      uint64_t v498 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v498 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v499 = *(double *)(v868 + 1640) * 10.0;
      double v500 = -0.5;
      if (v499 > 0.0) {
        double v500 = 0.5;
      }
      double v501 = v499 + v500;
      if (v501 <= 2147483650.0)
      {
        if (v501 >= -2147483650.0) {
          unsigned int v502 = (int)v501;
        }
        else {
          unsigned int v502 = 0x80000000;
        }
      }
      else
      {
        unsigned int v502 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v502);
      double v505 = (unsigned char *)(*(void *)v4)++;
      *double v505 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v506 = *(double *)(v868 + 1648) * 10.0;
      double v507 = -0.5;
      if (v506 > 0.0) {
        double v507 = 0.5;
      }
      double v508 = v506 + v507;
      if (v508 <= 2147483650.0)
      {
        if (v508 >= -2147483650.0) {
          unsigned int v509 = (int)v508;
        }
        else {
          unsigned int v509 = 0x80000000;
        }
      }
      else
      {
        unsigned int v509 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v509);
      v510 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v510 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v511 = *(double *)(v868 + 1656) * 10.0;
      double v512 = -0.5;
      if (v511 > 0.0) {
        double v512 = 0.5;
      }
      double v513 = v511 + v512;
      if (v513 <= 2147483650.0)
      {
        if (v513 >= -2147483650.0) {
          unsigned int v514 = (int)v513;
        }
        else {
          unsigned int v514 = 0x80000000;
        }
      }
      else
      {
        unsigned int v514 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v514);
      uint64_t v515 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v515 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v516 = *(_DWORD *)(v868 + 1664);
      if (v516 >= 0) {
        unsigned int v517 = *(_DWORD *)(v868 + 1664);
      }
      else {
        unsigned int v517 = -v516;
      }
      sprintf1da((void *)v4, v517, v904, 0, v516 >> 31);
      uint64_t v518 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v518 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v519 = *(_DWORD *)(v868 + 1668);
      if (v519 >= 0) {
        unsigned int v520 = *(_DWORD *)(v868 + 1668);
      }
      else {
        unsigned int v520 = -v519;
      }
      sprintf1da((void *)v4, v520, v904, 0, v519 >> 31);
      char v521 = (unsigned char *)(*(void *)v4)++;
      *char v521 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1672), v904, 0, 0);
      uint64_t v522 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v522 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 1674), v904, 0, 0);
      uint64_t v523 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v523 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1626), v904, 0, 0);
    }
    else
    {
      char v503 = 78;
      uint64_t v504 = 1u;
      do
      {
        *(void *)uint64_t v4 = v491 + 1;
        *uint64_t v491 = v503;
        uint64_t v491 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v491 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v491;
        }
        char v503 = aN_6[v504++];
      }
      while (v504 != 15);
    }
    NMEA_Add_checksum(v4, v487);
    uint64_t v524 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v524 = 36;
    uint64_t v525 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v525 = *v890;
    }
    char v526 = 80;
    uint64_t v527 = 1u;
    unsigned int v528 = v525;
    do
    {
      *(void *)uint64_t v4 = v528 + 1;
      *unsigned int v528 = v526;
      unsigned int v528 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v528 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v528;
      }
      char v526 = aPdbgs[v527++];
    }
    while (v527 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    double v529 = *(char **)v4;
    if (*(unsigned char *)(v868 + 1676))
    {
      *(void *)uint64_t v4 = v529 + 1;
      *double v529 = 65;
      int v530 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        int v530 = *v890;
      }
      *(void *)uint64_t v4 = v530 + 1;
      *int v530 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1677), v904, 0, 0);
      double v531 = (unsigned char *)(*(void *)v4)++;
      *double v531 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1678), v904, 0, 0);
      v532 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v532 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1679), v904, 0, 0);
    }
    else
    {
      uint64_t v533 = 0;
      char v534 = 78;
      do
      {
        *(void *)uint64_t v4 = v529 + 1;
        *double v529 = v534;
        double v529 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v529 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v529;
        }
        char v534 = aN_7[++v533];
      }
      while (v533 != 4);
    }
    NMEA_Add_checksum(v4, v525);
    v535 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v535 = 36;
    uint64_t v536 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v536 = *v890;
    }
    char v537 = 80;
    uint64_t v538 = 1u;
    double v539 = v536;
    do
    {
      *(void *)uint64_t v4 = v539 + 1;
      *double v539 = v537;
      double v539 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v539 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v539;
      }
      char v537 = aPdbgf[v538++];
    }
    while (v538 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    v540 = *(char **)v4;
    if (*(unsigned char *)(v868 + 1680))
    {
      *(void *)uint64_t v4 = v540 + 1;
      char *v540 = 65;
      char v541 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        char v541 = *v890;
      }
      *(void *)uint64_t v4 = v541 + 1;
      *char v541 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1681), v904, 0, 0);
      uint64_t v542 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v542 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1682), v904, 0, 0);
      uint64_t v543 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v543 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v544 = *(_DWORD *)(v868 + 1684);
      if (v544 >= 0) {
        unsigned int v545 = *(_DWORD *)(v868 + 1684);
      }
      else {
        unsigned int v545 = -v544;
      }
      sprintf1da((void *)v4, v545, v904, 0, v544 >> 31);
      char v546 = (unsigned char *)(*(void *)v4)++;
      *char v546 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v547 = *(double *)(v868 + 1688) * 100.0;
      double v548 = -0.5;
      if (v547 > 0.0) {
        double v548 = 0.5;
      }
      double v549 = v547 + v548;
      if (v549 <= 2147483650.0)
      {
        if (v549 >= -2147483650.0) {
          unsigned int v550 = (int)v549;
        }
        else {
          unsigned int v550 = 0x80000000;
        }
      }
      else
      {
        unsigned int v550 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v550, 3);
      v553 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v553 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v554 = *(double *)(v868 + 1696) * 100.0;
      double v555 = -0.5;
      if (v554 > 0.0) {
        double v555 = 0.5;
      }
      double v556 = v554 + v555;
      if (v556 <= 2147483650.0)
      {
        if (v556 >= -2147483650.0) {
          unsigned int v557 = (int)v556;
        }
        else {
          unsigned int v557 = 0x80000000;
        }
      }
      else
      {
        unsigned int v557 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v557, 3);
    }
    else
    {
      char v551 = 78;
      uint64_t v552 = 1u;
      do
      {
        *(void *)uint64_t v4 = v540 + 1;
        char *v540 = v551;
        v540 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v540 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v540;
        }
        char v551 = aN_5[v552++];
      }
      while (v552 != 7);
    }
    NMEA_Add_checksum(v4, v536);
    char v558 = (unsigned char *)(*(void *)v4)++;
    *char v558 = 36;
    uint64_t v559 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v559 = *v890;
    }
    char v560 = 80;
    uint64_t v561 = 1u;
    v562 = v559;
    do
    {
      *(void *)uint64_t v4 = v562 + 1;
      char *v562 = v560;
      v562 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v562 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v562;
      }
      char v560 = aPdbgt[v561++];
    }
    while (v561 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    sprintf_1u((void *)v4, *(_DWORD *)(v868 + 1776));
    v563 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v563 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_1u((void *)v4, *(_DWORD *)(v868 + 1780));
    v564 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v564 = 44;
    double v565 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      double v565 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v565;
    }
    if (*(unsigned char *)(v868 + 1792))
    {
      int v566 = *(__int16 *)(v868 + 1794);
      if (v566 >= 0) {
        unsigned int v567 = *(__int16 *)(v868 + 1794);
      }
      else {
        unsigned int v567 = -v566;
      }
      sprintf1da((void *)v4, v567, v904, 0, (v566 >> 15) & 1);
      uint64_t v568 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v568 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v569 = *(double *)(v868 + 1800) * 1000.0;
      double v570 = -0.5;
      if (v569 > 0.0) {
        double v570 = 0.5;
      }
      double v571 = v569 + v570;
      if (v571 <= 2147483650.0)
      {
        if (v571 >= -2147483650.0) {
          unsigned int v572 = (int)v571;
        }
        else {
          unsigned int v572 = 0x80000000;
        }
      }
      else
      {
        unsigned int v572 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v572, 4);
      double v575 = (unsigned char *)(*(void *)v4)++;
      *double v575 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v576 = *(double *)(v868 + 1808) * 1000.0;
      double v577 = -0.5;
      if (v576 > 0.0) {
        double v577 = 0.5;
      }
      double v578 = v576 + v577;
      if (v578 <= 2147483650.0)
      {
        if (v578 >= -2147483650.0) {
          unsigned int v579 = (int)v578;
        }
        else {
          unsigned int v579 = 0x80000000;
        }
      }
      else
      {
        unsigned int v579 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v579, 4);
      double v580 = (unsigned char *)(*(void *)v4)++;
      *double v580 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_1u((void *)v4, *(_DWORD *)(v868 + 1816));
      unsigned int v581 = (unsigned char *)(*(void *)v4)++;
      *unsigned int v581 = 44;
      double v565 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v565 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v565;
      }
    }
    else
    {
      uint64_t v573 = 0;
      char v574 = 44;
      do
      {
        *(void *)uint64_t v4 = v565 + 1;
        *double v565 = v574;
        double v565 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v565 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v565;
        }
        char v574 = asc_263D6BBD5[++v573];
      }
      while (v573 != 4);
    }
    if (*(unsigned char *)(v868 + 1820))
    {
      int v582 = *(_DWORD *)(v868 + 1824);
      if (v582 >= 0) {
        unsigned int v583 = *(_DWORD *)(v868 + 1824);
      }
      else {
        unsigned int v583 = -v582;
      }
      sprintf1da((void *)v4, v583, v904, 0, v582 >> 31);
      double v584 = (unsigned char *)(*(void *)v4)++;
      *double v584 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_1u((void *)v4, *(_DWORD *)(v868 + 1828));
      unsigned int v585 = (unsigned char *)(*(void *)v4)++;
      *unsigned int v585 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
    }
    else
    {
      uint64_t v586 = 0;
      char v587 = 44;
      do
      {
        *(void *)uint64_t v4 = v565 + 1;
        *double v565 = v587;
        double v565 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v565 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v565;
        }
        char v587 = asc_263D6BC8B[++v586];
      }
      while (v586 != 2);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1832), v904, 0, 0);
    v588 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v588 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1833), v904, 0, 0);
    char v589 = (unsigned char *)(*(void *)v4)++;
    *char v589 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v590 = *(double *)(v868 + 1840) * 1000.0;
    double v591 = -0.5;
    if (v590 > 0.0) {
      double v591 = 0.5;
    }
    double v592 = v590 + v591;
    if (v592 <= 2147483650.0)
    {
      if (v592 >= -2147483650.0) {
        unsigned int v593 = (int)v592;
      }
      else {
        unsigned int v593 = 0x80000000;
      }
    }
    else
    {
      unsigned int v593 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v593, 4);
    v594 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v594 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v595 = *(__int16 *)(v868 + 1848);
    if (v595 >= 0) {
      unsigned int v596 = *(__int16 *)(v868 + 1848);
    }
    else {
      unsigned int v596 = -v595;
    }
    sprintf1da((void *)v4, v596, v904, 0, (v595 >> 15) & 1);
    uint64_t v597 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v597 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1850), v904, 0, 0);
    char v598 = (unsigned char *)(*(void *)v4)++;
    *char v598 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v599 = *(double *)(v868 + 1856) * 1000.0;
    double v600 = -0.5;
    if (v599 > 0.0) {
      double v600 = 0.5;
    }
    double v601 = v599 + v600;
    if (v601 <= 2147483650.0)
    {
      if (v601 >= -2147483650.0) {
        unsigned int v602 = (int)v601;
      }
      else {
        unsigned int v602 = 0x80000000;
      }
    }
    else
    {
      unsigned int v602 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v602, 4);
    v603 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v603 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v604 = *(__int16 *)(v868 + 1864);
    if (v604 >= 0) {
      unsigned int v605 = *(__int16 *)(v868 + 1864);
    }
    else {
      unsigned int v605 = -v604;
    }
    sprintf1da((void *)v4, v605, v904, 0, (v604 >> 15) & 1);
    double v606 = (unsigned char *)(*(void *)v4)++;
    *double v606 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v607 = *(__int16 *)(v868 + 1866);
    if (v607 >= 0) {
      unsigned int v608 = *(__int16 *)(v868 + 1866);
    }
    else {
      unsigned int v608 = -v607;
    }
    sprintf1da((void *)v4, v608, v904, 0, (v607 >> 15) & 1);
    double v609 = (unsigned char *)(*(void *)v4)++;
    *double v609 = 44;
    double v610 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      double v610 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v610;
    }
    if (*(unsigned char *)(v868 + 1868))
    {
      int v611 = *(char *)(v868 + 1869);
      if (v611 >= 0) {
        unsigned int v612 = *(char *)(v868 + 1869);
      }
      else {
        unsigned int v612 = -v611;
      }
      sprintf1da((void *)v4, v612, v904, 0, (v611 >> 7) & 1);
      v613 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v613 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v614 = *(char *)(v868 + 1870);
      if (v614 >= 0) {
        unsigned int v615 = *(char *)(v868 + 1870);
      }
      else {
        unsigned int v615 = -v614;
      }
      sprintf1da((void *)v4, v615, v904, 0, (v614 >> 7) & 1);
      double v616 = (unsigned char *)(*(void *)v4)++;
      *double v616 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v617 = *(__int16 *)(v868 + 1872);
      if (v617 >= 0) {
        unsigned int v618 = *(__int16 *)(v868 + 1872);
      }
      else {
        unsigned int v618 = -v617;
      }
      sprintf1da((void *)v4, v618, v904, 0, (v617 >> 15) & 1);
      v619 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v619 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v620 = *(char *)(v868 + 1874);
      if (v620 >= 0) {
        unsigned int v621 = *(char *)(v868 + 1874);
      }
      else {
        unsigned int v621 = -v620;
      }
      sprintf1da((void *)v4, v621, v904, 0, (v620 >> 7) & 1);
      v622 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v622 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v623 = *(char *)(v868 + 1875);
      if (v623 >= 0) {
        unsigned int v624 = *(char *)(v868 + 1875);
      }
      else {
        unsigned int v624 = -v623;
      }
      sprintf1da((void *)v4, v624, v904, 0, (v623 >> 7) & 1);
      v625 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v625 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v626 = *(__int16 *)(v868 + 1876);
      if (v626 >= 0) {
        unsigned int v627 = *(__int16 *)(v868 + 1876);
      }
      else {
        unsigned int v627 = -v626;
      }
      sprintf1da((void *)v4, v627, v904, 0, (v626 >> 15) & 1);
      uint64_t v628 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v628 = 44;
      double v610 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v610 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v610;
      }
    }
    else
    {
      char v629 = 44;
      uint64_t v630 = 1u;
      do
      {
        *(void *)uint64_t v4 = v610 + 1;
        *double v610 = v629;
        double v610 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v610 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v610;
        }
        char v629 = asc_263D6BCE3[v630++];
      }
      while (v630 != 7);
    }
    int v631 = *(_DWORD *)(v868 + 1880);
    if (v631)
    {
      if (v631 >= 0) {
        unsigned int v632 = *(_DWORD *)(v868 + 1880);
      }
      else {
        unsigned int v632 = -v631;
      }
      sprintf1da((void *)v4, v632, v904, 0, v631 >> 31);
      double v610 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v610 + 1;
    *double v610 = 44;
    uint64_t v633 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      uint64_t v633 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v633;
    }
    int v634 = *(_DWORD *)(v868 + 1884);
    if (v634)
    {
      if (v634 >= 0) {
        unsigned int v635 = *(_DWORD *)(v868 + 1884);
      }
      else {
        unsigned int v635 = -v634;
      }
      sprintf1da((void *)v4, v635, v904, 0, v634 >> 31);
      uint64_t v633 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v633 + 1;
    *uint64_t v633 = 44;
    char v636 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      char v636 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v636;
    }
    int v637 = *(_DWORD *)(v868 + 1888);
    if (v637)
    {
      if (v637 >= 0) {
        unsigned int v638 = *(_DWORD *)(v868 + 1888);
      }
      else {
        unsigned int v638 = -v637;
      }
      sprintf1da((void *)v4, v638, v904, 0, v637 >> 31);
      char v636 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v636 + 1;
    *char v636 = 44;
    v639 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      v639 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v639;
    }
    int v640 = *(_DWORD *)(v868 + 1892);
    if (v640)
    {
      if (v640 >= 0) {
        unsigned int v641 = *(_DWORD *)(v868 + 1892);
      }
      else {
        unsigned int v641 = -v640;
      }
      sprintf1da((void *)v4, v641, v904, 0, v640 >> 31);
      v639 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v639 + 1;
    char *v639 = 44;
    v642 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      v642 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v642;
    }
    int v643 = *(_DWORD *)(v868 + 1896);
    if (v643)
    {
      if (v643 >= 0) {
        unsigned int v644 = *(_DWORD *)(v868 + 1896);
      }
      else {
        unsigned int v644 = -v643;
      }
      sprintf1da((void *)v4, v644, v904, 0, v643 >> 31);
      v642 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v642 + 1;
    char *v642 = 44;
    char v645 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      char v645 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v645;
    }
    int v646 = *(_DWORD *)(v868 + 1900);
    if (v646)
    {
      if (v646 >= 0) {
        unsigned int v647 = *(_DWORD *)(v868 + 1900);
      }
      else {
        unsigned int v647 = -v646;
      }
      sprintf1da((void *)v4, v647, v904, 0, v646 >> 31);
      char v645 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v645 + 1;
    *char v645 = 44;
    uint64_t v648 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      uint64_t v648 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v648;
    }
    unint64_t v649 = *(void *)(v868 + 1784);
    if (v649)
    {
      sprintf_1U((void *)v4, v649);
      uint64_t v648 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v648 + 1;
    *uint64_t v648 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 1904), v904, 0, 0);
    NMEA_Add_checksum(v4, v559);
    char v650 = (unsigned char *)(*(void *)v4)++;
    *char v650 = 36;
    v651 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      v651 = *v890;
    }
    char v652 = 80;
    uint64_t v653 = 1u;
    char v654 = v651;
    do
    {
      *(void *)uint64_t v4 = v654 + 1;
      *char v654 = v652;
      char v654 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        char v654 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v654;
      }
      char v652 = aPdbgv[v653++];
    }
    while (v653 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    v655 = *(char **)v4;
    if (*(unsigned char *)(v868 + 1704))
    {
      *(void *)uint64_t v4 = v655 + 1;
      char *v655 = 65;
      uint64_t v656 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v656 = *v890;
      }
      *(void *)uint64_t v4 = v656 + 1;
      *uint64_t v656 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1705), v904, 0, 0);
      char v657 = (unsigned char *)(*(void *)v4)++;
      *char v657 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1706), v904, 0, 0);
      int v658 = (unsigned char *)(*(void *)v4)++;
      *int v658 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v659 = *(double *)(v868 + 1712) * 100.0;
      double v660 = -0.5;
      if (v659 > 0.0) {
        double v660 = 0.5;
      }
      double v661 = v659 + v660;
      if (v661 <= 2147483650.0)
      {
        if (v661 >= -2147483650.0) {
          unsigned int v662 = (int)v661;
        }
        else {
          unsigned int v662 = 0x80000000;
        }
      }
      else
      {
        unsigned int v662 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v662, 3);
      v665 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v665 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v666 = *(double *)(v868 + 1720) * 100.0;
      double v667 = -0.5;
      if (v666 > 0.0) {
        double v667 = 0.5;
      }
      double v668 = v666 + v667;
      if (v668 <= 2147483650.0)
      {
        if (v668 >= -2147483650.0) {
          unsigned int v669 = (int)v668;
        }
        else {
          unsigned int v669 = 0x80000000;
        }
      }
      else
      {
        unsigned int v669 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v669, 3);
      v670 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v670 = 44;
      v655 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v655 = *v890;
      }
    }
    else
    {
      char v663 = 78;
      uint64_t v664 = 1u;
      do
      {
        *(void *)uint64_t v4 = v655 + 1;
        char *v655 = v663;
        v655 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v655 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v655;
        }
        char v663 = aN_5[v664++];
      }
      while (v664 != 7);
    }
    if (*(unsigned char *)(v868 + 1728))
    {
      *(void *)uint64_t v4 = v655 + 1;
      char *v655 = 65;
      v671 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v671 = *v890;
      }
      *(void *)uint64_t v4 = v671 + 1;
      char *v671 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1729), v904, 0, 0);
      v672 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v672 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1730), v904, 0, 0);
      char v673 = (unsigned char *)(*(void *)v4)++;
      *char v673 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v674 = *(double *)(v868 + 1736) * 100.0;
      double v675 = -0.5;
      if (v674 > 0.0) {
        double v675 = 0.5;
      }
      double v676 = v674 + v675;
      if (v676 <= 2147483650.0)
      {
        if (v676 >= -2147483650.0) {
          unsigned int v677 = (int)v676;
        }
        else {
          unsigned int v677 = 0x80000000;
        }
      }
      else
      {
        unsigned int v677 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v677, 3);
      v680 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v680 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v681 = *(double *)(v868 + 1744) * 100.0;
      double v682 = -0.5;
      if (v681 > 0.0) {
        double v682 = 0.5;
      }
      double v683 = v681 + v682;
      if (v683 <= 2147483650.0)
      {
        if (v683 >= -2147483650.0) {
          unsigned int v684 = (int)v683;
        }
        else {
          unsigned int v684 = 0x80000000;
        }
      }
      else
      {
        unsigned int v684 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v684, 3);
      uint64_t v685 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v685 = 44;
      v655 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v655 = *v890;
      }
    }
    else
    {
      char v678 = 78;
      uint64_t v679 = 1u;
      do
      {
        *(void *)uint64_t v4 = v655 + 1;
        char *v655 = v678;
        v655 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v655 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v655;
        }
        char v678 = aN_5[v679++];
      }
      while (v679 != 7);
    }
    if (*(unsigned char *)(v868 + 1752))
    {
      *(void *)uint64_t v4 = v655 + 1;
      char *v655 = 65;
      char v686 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        char v686 = *v890;
      }
      *(void *)uint64_t v4 = v686 + 1;
      *char v686 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1753), v904, 0, 0);
      int v687 = (unsigned char *)(*(void *)v4)++;
      *int v687 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 1754), v904, 0, 0);
      uint64_t v688 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v688 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v689 = *(double *)(v868 + 1760) * 100.0;
      double v690 = -0.5;
      if (v689 > 0.0) {
        double v690 = 0.5;
      }
      double v691 = v689 + v690;
      if (v691 <= 2147483650.0)
      {
        if (v691 >= -2147483650.0) {
          unsigned int v692 = (int)v691;
        }
        else {
          unsigned int v692 = 0x80000000;
        }
      }
      else
      {
        unsigned int v692 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v692, 3);
      v695 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v695 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v696 = *(double *)(v868 + 1768) * 100.0;
      double v697 = -0.5;
      if (v696 > 0.0) {
        double v697 = 0.5;
      }
      double v698 = v696 + v697;
      if (v698 <= 2147483650.0)
      {
        if (v698 >= -2147483650.0) {
          unsigned int v699 = (int)v698;
        }
        else {
          unsigned int v699 = 0x80000000;
        }
      }
      else
      {
        unsigned int v699 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v699, 3);
      char v700 = (unsigned char *)(*(void *)v4)++;
      *char v700 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
    }
    else
    {
      char v693 = 78;
      uint64_t v694 = 1u;
      do
      {
        *(void *)uint64_t v4 = v655 + 1;
        char *v655 = v693;
        v655 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v655 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v655;
        }
        char v693 = aN_8[v694++];
      }
      while (v694 != 6);
    }
    NMEA_Add_checksum(v4, v651);
    v701 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v701 = 36;
    v702 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      v702 = *v890;
    }
    char v703 = 80;
    uint64_t v704 = 1u;
    uint64_t v705 = v702;
    do
    {
      *(void *)uint64_t v4 = v705 + 1;
      *uint64_t v705 = v703;
      uint64_t v705 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v705 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v705;
      }
      char v703 = aPdbgx[v704++];
    }
    while (v704 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    double v706 = *(double *)(v868 + 1912) * 100.0;
    double v707 = -0.5;
    if (v706 > 0.0) {
      double v707 = 0.5;
    }
    double v708 = v706 + v707;
    if (v708 <= 2147483650.0)
    {
      if (v708 >= -2147483650.0) {
        unsigned int v709 = (int)v708;
      }
      else {
        unsigned int v709 = 0x80000000;
      }
    }
    else
    {
      unsigned int v709 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v709, 3);
    uint64_t v710 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v710 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v711 = *(double *)(v868 + 1920) * 100.0;
    double v712 = -0.5;
    if (v711 > 0.0) {
      double v712 = 0.5;
    }
    double v713 = v711 + v712;
    if (v713 <= 2147483650.0)
    {
      if (v713 >= -2147483650.0) {
        unsigned int v714 = (int)v713;
      }
      else {
        unsigned int v714 = 0x80000000;
      }
    }
    else
    {
      unsigned int v714 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v714, 3);
    v715 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v715 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v716 = *(double *)(v868 + 1928) * 100.0;
    double v717 = -0.5;
    if (v716 > 0.0) {
      double v717 = 0.5;
    }
    double v718 = v716 + v717;
    if (v718 <= 2147483650.0)
    {
      if (v718 >= -2147483650.0) {
        unsigned int v719 = (int)v718;
      }
      else {
        unsigned int v719 = 0x80000000;
      }
    }
    else
    {
      unsigned int v719 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v719, 3);
    v720 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v720 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v721 = *(double *)(v868 + 1936) * 100.0;
    double v722 = -0.5;
    if (v721 > 0.0) {
      double v722 = 0.5;
    }
    double v723 = v721 + v722;
    if (v723 <= 2147483650.0)
    {
      if (v723 >= -2147483650.0) {
        unsigned int v724 = (int)v723;
      }
      else {
        unsigned int v724 = 0x80000000;
      }
    }
    else
    {
      unsigned int v724 = 0x7FFFFFFF;
    }
    sprintf_3f(v4, v724, 3);
    char v725 = (unsigned char *)(*(void *)v4)++;
    *char v725 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v726 = *(double *)(v868 + 1944) * 1000.0;
    double v727 = -0.5;
    if (v726 > 0.0) {
      double v727 = 0.5;
    }
    double v728 = v726 + v727;
    if (v728 <= 2147483650.0)
    {
      if (v728 >= -2147483650.0) {
        unsigned int v729 = (int)v728;
      }
      else {
        unsigned int v729 = 0x80000000;
      }
    }
    else
    {
      unsigned int v729 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v729, 4);
    v730 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v730 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v731 = *(double *)(v868 + 1952) * 1000.0;
    double v732 = -0.5;
    if (v731 > 0.0) {
      double v732 = 0.5;
    }
    double v733 = v731 + v732;
    if (v733 <= 2147483650.0)
    {
      if (v733 >= -2147483650.0) {
        unsigned int v734 = (int)v733;
      }
      else {
        unsigned int v734 = 0x80000000;
      }
    }
    else
    {
      unsigned int v734 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v734, 4);
    v735 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v735 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v736 = *(double *)(v868 + 1960) * 1000.0;
    double v737 = -0.5;
    if (v736 > 0.0) {
      double v737 = 0.5;
    }
    double v738 = v736 + v737;
    if (v738 <= 2147483650.0)
    {
      if (v738 >= -2147483650.0) {
        unsigned int v739 = (int)v738;
      }
      else {
        unsigned int v739 = 0x80000000;
      }
    }
    else
    {
      unsigned int v739 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v739, 4);
    uint64_t v740 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v740 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v741 = *(double *)(v868 + 1968) * 1000.0;
    double v742 = -0.5;
    if (v741 > 0.0) {
      double v742 = 0.5;
    }
    double v743 = v741 + v742;
    if (v743 <= 2147483650.0)
    {
      if (v743 >= -2147483650.0) {
        unsigned int v744 = (int)v743;
      }
      else {
        unsigned int v744 = 0x80000000;
      }
    }
    else
    {
      unsigned int v744 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v744, 4);
    v745 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v745 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v746 = *(double *)(v868 + 1976) * 1000.0;
    double v747 = -0.5;
    if (v746 > 0.0) {
      double v747 = 0.5;
    }
    double v748 = v746 + v747;
    if (v748 <= 2147483650.0)
    {
      if (v748 >= -2147483650.0) {
        unsigned int v749 = (int)v748;
      }
      else {
        unsigned int v749 = 0x80000000;
      }
    }
    else
    {
      unsigned int v749 = 0x7FFFFFFF;
    }
    sprintf_4f(v4, v749, 4);
    v750 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v750 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v751 = *(double *)(v868 + 1984) * 10.0;
    double v752 = -0.5;
    if (v751 > 0.0) {
      double v752 = 0.5;
    }
    double v753 = v751 + v752;
    if (v753 <= 2147483650.0)
    {
      if (v753 >= -2147483650.0) {
        unsigned int v754 = (int)v753;
      }
      else {
        unsigned int v754 = 0x80000000;
      }
    }
    else
    {
      unsigned int v754 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v754);
    v755 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v755 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v756 = *(double *)(v868 + 1992) * 10.0;
    double v757 = -0.5;
    if (v756 > 0.0) {
      double v757 = 0.5;
    }
    double v758 = v756 + v757;
    if (v758 <= 2147483650.0)
    {
      if (v758 >= -2147483650.0) {
        unsigned int v759 = (int)v758;
      }
      else {
        unsigned int v759 = 0x80000000;
      }
    }
    else
    {
      unsigned int v759 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v759);
    v760 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v760 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v761 = *(double *)(v868 + 2000) * 10.0;
    double v762 = -0.5;
    if (v761 > 0.0) {
      double v762 = 0.5;
    }
    double v763 = v761 + v762;
    if (v763 <= 2147483650.0)
    {
      if (v763 >= -2147483650.0) {
        unsigned int v764 = (int)v763;
      }
      else {
        unsigned int v764 = 0x80000000;
      }
    }
    else
    {
      unsigned int v764 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v764);
    char v765 = (unsigned char *)(*(void *)v4)++;
    *char v765 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v766 = *(double *)(v868 + 2008) * 10.0;
    double v767 = -0.5;
    if (v766 > 0.0) {
      double v767 = 0.5;
    }
    double v768 = v766 + v767;
    if (v768 <= 2147483650.0)
    {
      if (v768 >= -2147483650.0) {
        unsigned int v769 = (int)v768;
      }
      else {
        unsigned int v769 = 0x80000000;
      }
    }
    else
    {
      unsigned int v769 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v769);
    uint64_t v770 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v770 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v771 = *(double *)(v868 + 2016) * 10.0;
    double v772 = -0.5;
    if (v771 > 0.0) {
      double v772 = 0.5;
    }
    double v773 = v771 + v772;
    if (v773 <= 2147483650.0)
    {
      if (v773 >= -2147483650.0) {
        unsigned int v774 = (int)v773;
      }
      else {
        unsigned int v774 = 0x80000000;
      }
    }
    else
    {
      unsigned int v774 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v774);
    char v775 = (unsigned char *)(*(void *)v4)++;
    *char v775 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v776 = *(double *)(v868 + 2024) * 10.0;
    double v777 = -0.5;
    if (v776 > 0.0) {
      double v777 = 0.5;
    }
    double v778 = v776 + v777;
    if (v778 <= 2147483650.0)
    {
      if (v778 >= -2147483650.0) {
        unsigned int v779 = (int)v778;
      }
      else {
        unsigned int v779 = 0x80000000;
      }
    }
    else
    {
      unsigned int v779 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v779);
    char v780 = (unsigned char *)(*(void *)v4)++;
    *char v780 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v781 = *(double *)(v868 + 2032) * 10.0;
    double v782 = -0.5;
    if (v781 > 0.0) {
      double v782 = 0.5;
    }
    double v783 = v781 + v782;
    if (v783 <= 2147483650.0)
    {
      if (v783 >= -2147483650.0) {
        unsigned int v784 = (int)v783;
      }
      else {
        unsigned int v784 = 0x80000000;
      }
    }
    else
    {
      unsigned int v784 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v784);
    v785 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v785 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 2040), v904, 0, 0);
    char v786 = (unsigned char *)(*(void *)v4)++;
    *char v786 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v787 = *(double *)(v868 + 2048) * 10.0;
    double v788 = -0.5;
    if (v787 > 0.0) {
      double v788 = 0.5;
    }
    double v789 = v787 + v788;
    if (v789 <= 2147483650.0)
    {
      if (v789 >= -2147483650.0) {
        unsigned int v790 = (int)v789;
      }
      else {
        unsigned int v790 = 0x80000000;
      }
    }
    else
    {
      unsigned int v790 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v790);
    char v791 = (unsigned char *)(*(void *)v4)++;
    *char v791 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v792 = *(double *)(v868 + 2056) * 10.0;
    double v793 = -0.5;
    if (v792 > 0.0) {
      double v793 = 0.5;
    }
    double v794 = v792 + v793;
    if (v794 <= 2147483650.0)
    {
      if (v794 >= -2147483650.0) {
        unsigned int v795 = (int)v794;
      }
      else {
        unsigned int v795 = 0x80000000;
      }
    }
    else
    {
      unsigned int v795 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v795);
    uint64_t v796 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v796 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v797 = *(double *)(v868 + 2064) * 10.0;
    double v798 = -0.5;
    if (v797 > 0.0) {
      double v798 = 0.5;
    }
    double v799 = v797 + v798;
    if (v799 <= 2147483650.0)
    {
      if (v799 >= -2147483650.0) {
        unsigned int v800 = (int)v799;
      }
      else {
        unsigned int v800 = 0x80000000;
      }
    }
    else
    {
      unsigned int v800 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v800);
    v801 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v801 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v802 = *(double *)(v868 + 2072) * 10.0;
    double v803 = -0.5;
    if (v802 > 0.0) {
      double v803 = 0.5;
    }
    double v804 = v802 + v803;
    if (v804 <= 2147483650.0)
    {
      if (v804 >= -2147483650.0) {
        unsigned int v805 = (int)v804;
      }
      else {
        unsigned int v805 = 0x80000000;
      }
    }
    else
    {
      unsigned int v805 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v805);
    v806 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v806 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v807 = *(double *)(a2 + 56) * 1000000000.0 * 10.0;
    double v808 = -0.5;
    if (v807 > 0.0) {
      double v808 = 0.5;
    }
    double v809 = v807 + v808;
    if (v809 <= 2147483650.0)
    {
      if (v809 >= -2147483650.0) {
        unsigned int v810 = (int)v809;
      }
      else {
        unsigned int v810 = 0x80000000;
      }
    }
    else
    {
      unsigned int v810 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v810);
    v811 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v811 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 168) * 1000000000.0);
    char v812 = (unsigned char *)(*(void *)v4)++;
    *char v812 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    double v813 = *(double *)(a2 + 64) * 1000000000.0 * 10.0;
    double v814 = -0.5;
    if (v813 > 0.0) {
      double v814 = 0.5;
    }
    double v815 = v813 + v814;
    if (v815 <= 2147483650.0)
    {
      if (v815 >= -2147483650.0) {
        unsigned int v816 = (int)v815;
      }
      else {
        unsigned int v816 = 0x80000000;
      }
    }
    else
    {
      unsigned int v816 = 0x7FFFFFFF;
    }
    sprintf_2f(v4, v816);
    v817 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v817 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(a2 + 176) * 1000000000.0);
    NMEA_Add_checksum(v4, v702);
    char v818 = (unsigned char *)(*(void *)v4)++;
    *char v818 = 36;
    v819 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      v819 = *v890;
    }
    char v820 = 80;
    uint64_t v821 = 1u;
    uint64_t v822 = v819;
    do
    {
      *(void *)uint64_t v4 = v822 + 1;
      *uint64_t v822 = v820;
      uint64_t v822 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v822 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v822;
      }
      char v820 = aPdbgy[v821++];
    }
    while (v821 != 7);
    sprintf_HHMMSS((void *)v4, a2);
    char v823 = *(unsigned char *)(v868 + 2082);
    v824 = *(char **)v4;
    if (v823)
    {
      char v825 = (unsigned __int8 *)(v868 + 2083);
      do
      {
        *(void *)uint64_t v4 = v824 + 1;
        char *v824 = v823;
        v824 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v824 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v824;
        }
        int v826 = *v825++;
        char v823 = v826;
      }
      while (v826);
    }
    *(void *)uint64_t v4 = v824 + 1;
    char *v824 = 58;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_04x((char **)v4, *(unsigned __int16 *)(v868 + 2086));
    double v827 = (unsigned char *)(*(void *)v4)++;
    *double v827 = 45;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    unint64_t v828 = *(unsigned __int8 *)(v868 + 2088);
    v904[0] = 12336;
    hex6(v4, v828, v904, 2);
    char v829 = (unsigned char *)(*(void *)v4)++;
    *char v829 = 45;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 2089), v904, 0, 0);
    uint64_t v830 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v830 = 46;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_02d((void *)v4, *(unsigned __int8 *)(v868 + 2090));
    v831 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v831 = 46;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 2091), v904, 0, 0);
    char v832 = (unsigned char *)(*(void *)v4)++;
    *char v832 = 46;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 2092), v904, 0, 0);
    uint64_t v833 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v833 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int16 *)(v868 + 2094), v904, 0, 0);
    v834 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v834 = 46;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_2d((void *)v4, *(unsigned __int8 *)(v868 + 2096));
    v835 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v835 = 46;
    char v836 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      char v836 = *v890;
    }
    char v837 = *(unsigned char *)(v868 + 2097);
    *(void *)uint64_t v4 = v836 + 1;
    *char v836 = v837;
    v838 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      v838 = *v890;
    }
    *(void *)uint64_t v4 = v838 + 1;
    char *v838 = 46;
    char v839 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      char v839 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v839;
    }
    char v840 = *(unsigned char *)(v868 + 2098);
    if (v840)
    {
      v841 = (unsigned __int8 *)(v868 + 2099);
      do
      {
        *(void *)uint64_t v4 = v839 + 1;
        *char v839 = v840;
        char v839 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          char v839 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v839;
        }
        int v842 = *v841++;
        char v840 = v842;
      }
      while (v842);
    }
    *(void *)uint64_t v4 = v839 + 1;
    *char v839 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v843 = *(_DWORD *)(v868 + 2108);
    if (v843 >= 0) {
      unsigned int v844 = *(_DWORD *)(v868 + 2108);
    }
    else {
      unsigned int v844 = -v843;
    }
    sprintf1da((void *)v4, v844, v904, 0, v843 >> 31);
    double v845 = (unsigned char *)(*(void *)v4)++;
    *double v845 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v846 = *(_DWORD *)(v868 + 2112);
    if (v846 >= 0) {
      unsigned int v847 = *(_DWORD *)(v868 + 2112);
    }
    else {
      unsigned int v847 = -v846;
    }
    sprintf1da((void *)v4, v847, v904, 0, v846 >> 31);
    uint64_t v848 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v848 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 2116), v904, 0, 0);
    v849 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v849 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 2117), v904, 0, 0);
    char v850 = (unsigned char *)(*(void *)v4)++;
    *char v850 = 44;
    uint64_t v851 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v851 = *v890;
    }
    uint64_t v852 = 0;
    char v853 = 48;
    do
    {
      *(void *)uint64_t v4 = v851 + 1;
      *uint64_t v851 = v853;
      uint64_t v851 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        uint64_t v851 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v851;
      }
      char v853 = a0x_0[++v852];
    }
    while (v852 != 2);
    sprintf_1X((char **)v4, *(unsigned __int8 *)(v868 + 2118));
    char v854 = (unsigned char *)(*(void *)v4)++;
    *char v854 = 44;
    v855 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      v855 = *v890;
    }
    uint64_t v856 = 0;
    char v857 = 48;
    do
    {
      *(void *)uint64_t v4 = v855 + 1;
      char *v855 = v857;
      v855 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v855 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v855;
      }
      char v857 = a0x_0[++v856];
    }
    while (v856 != 2);
    sprintf_1X((char **)v4, *(unsigned __int8 *)(v868 + 2119));
    uint64_t v858 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v858 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf1da((void *)v4, *(unsigned __int8 *)(v868 + 2120), v904, 0, 0);
    v859 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v859 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    nzet(v4, 0xAu, v904, 0, 0, 0);
    v860 = (unsigned char *)(*(void *)v4)++;
    unsigned char *v860 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v861 = *(_DWORD *)(v868 + 2128) - *(_DWORD *)(v868 + 2124);
    if (v861 >= 0) {
      unsigned int v862 = *(_DWORD *)(v868 + 2128) - *(_DWORD *)(v868 + 2124);
    }
    else {
      unsigned int v862 = *(_DWORD *)(v868 + 2124) - *(_DWORD *)(v868 + 2128);
    }
    sprintf1da((void *)v4, v862, v904, 0, v861 >> 31);
    for (uint64_t m = 0; m != 36; m += 4)
    {
      char v865 = (unsigned char *)(*(void *)v4)++;
      *char v865 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      uint64_t v864 = v868 + 2132;
      int v866 = *(_DWORD *)(v868 + 2132 + m) - *(_DWORD *)(v868 + 2124);
      if (v866 >= 0) {
        unsigned int v867 = *(_DWORD *)(v864 + m) - *(_DWORD *)(v868 + 2124);
      }
      else {
        unsigned int v867 = *(_DWORD *)(v868 + 2124) - *(_DWORD *)(v864 + m);
      }
      sprintf1da((void *)v4, v867, v904, 0, v866 >> 31);
    }
    return NMEA_Add_checksum(v4, v819);
  }
  return result;
}

char **NMEA_Encode_PDBGE_Constell(char **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  char v7 = (*a1)++;
  *char v7 = 36;
  uint64_t v8 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v8 = a1[2];
  }
  char v9 = 80;
  uint64_t v10 = 1u;
  unint64_t v11 = v8;
  do
  {
    *a1 = v11 + 1;
    char *v11 = v9;
    unint64_t v11 = *a1;
    if (*a1 >= a1[3])
    {
      unint64_t v11 = a1[2];
      *a1 = v11;
    }
    char v9 = aPdbge[v10++];
  }
  while (v10 != 7);
  int v58 = v8;
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      unsigned __int8 v12 = (unsigned __int16 *)(a4 + 162);
      uint64_t v13 = (unsigned __int8 *)(a4 + 164);
      uint64_t v14 = (unsigned __int16 *)(a4 + 166);
      uint64_t v15 = (unsigned __int16 *)(a4 + 168);
      double v16 = (unsigned __int16 *)(a4 + 170);
      double v17 = (unsigned __int16 *)(a4 + 172);
      double v18 = (unsigned __int16 *)(a4 + 174);
      unsigned int v19 = (unsigned __int8 *)(a4 + 176);
      uint64_t v20 = (unsigned __int8 *)(a4 + 177);
      long long v21 = (double *)(a4 + 184);
      char v22 = (double *)(a4 + 192);
      uint64_t v23 = "G,";
      goto LABEL_16;
    case 2:
      unsigned __int8 v12 = (unsigned __int16 *)(a4 + 242);
      uint64_t v13 = (unsigned __int8 *)(a4 + 244);
      uint64_t v14 = (unsigned __int16 *)(a4 + 246);
      uint64_t v15 = (unsigned __int16 *)(a4 + 248);
      double v16 = (unsigned __int16 *)(a4 + 250);
      double v17 = (unsigned __int16 *)(a4 + 252);
      double v18 = (unsigned __int16 *)(a4 + 254);
      unsigned int v19 = (unsigned __int8 *)(a4 + 256);
      uint64_t v20 = (unsigned __int8 *)(a4 + 257);
      long long v21 = (double *)(a4 + 264);
      char v22 = (double *)(a4 + 272);
      uint64_t v23 = "R,";
      goto LABEL_16;
    case 3:
      unsigned __int8 v12 = (unsigned __int16 *)(a4 + 282);
      uint64_t v13 = (unsigned __int8 *)(a4 + 284);
      uint64_t v14 = (unsigned __int16 *)(a4 + 286);
      uint64_t v15 = (unsigned __int16 *)(a4 + 288);
      double v16 = (unsigned __int16 *)(a4 + 290);
      double v17 = (unsigned __int16 *)(a4 + 292);
      double v18 = (unsigned __int16 *)(a4 + 294);
      unsigned int v19 = (unsigned __int8 *)(a4 + 296);
      uint64_t v20 = (unsigned __int8 *)(a4 + 297);
      long long v21 = (double *)(a4 + 304);
      char v22 = (double *)(a4 + 312);
      uint64_t v23 = "E,";
      goto LABEL_16;
    case 4:
      unsigned __int8 v12 = (unsigned __int16 *)(a4 + 322);
      uint64_t v13 = (unsigned __int8 *)(a4 + 324);
      uint64_t v14 = (unsigned __int16 *)(a4 + 326);
      uint64_t v15 = (unsigned __int16 *)(a4 + 328);
      double v16 = (unsigned __int16 *)(a4 + 330);
      double v17 = (unsigned __int16 *)(a4 + 332);
      double v18 = (unsigned __int16 *)(a4 + 334);
      unsigned int v19 = (unsigned __int8 *)(a4 + 336);
      uint64_t v20 = (unsigned __int8 *)(a4 + 337);
      long long v21 = (double *)(a4 + 344);
      char v22 = (double *)(a4 + 352);
      uint64_t v23 = "C,";
      goto LABEL_16;
    case 5:
      unsigned __int8 v12 = (unsigned __int16 *)(a4 + 202);
      uint64_t v13 = (unsigned __int8 *)(a4 + 204);
      uint64_t v14 = (unsigned __int16 *)(a4 + 206);
      uint64_t v15 = (unsigned __int16 *)(a4 + 208);
      double v16 = (unsigned __int16 *)(a4 + 210);
      double v17 = (unsigned __int16 *)(a4 + 212);
      double v18 = (unsigned __int16 *)(a4 + 214);
      unsigned int v19 = (unsigned __int8 *)(a4 + 216);
      uint64_t v20 = (unsigned __int8 *)(a4 + 217);
      long long v21 = (double *)(a4 + 224);
      char v22 = (double *)(a4 + 232);
      uint64_t v23 = "Q,";
      goto LABEL_16;
    case 6:
      unsigned __int8 v12 = (unsigned __int16 *)(a4 + 362);
      uint64_t v13 = (unsigned __int8 *)(a4 + 364);
      uint64_t v14 = (unsigned __int16 *)(a4 + 366);
      uint64_t v15 = (unsigned __int16 *)(a4 + 368);
      double v16 = (unsigned __int16 *)(a4 + 370);
      double v17 = (unsigned __int16 *)(a4 + 372);
      double v18 = (unsigned __int16 *)(a4 + 374);
      unsigned int v19 = (unsigned __int8 *)(a4 + 376);
      uint64_t v20 = (unsigned __int8 *)(a4 + 377);
      long long v21 = (double *)(a4 + 384);
      char v22 = (double *)(a4 + 392);
      uint64_t v23 = "N,";
      goto LABEL_16;
    case 7:
      unsigned __int8 v12 = (unsigned __int16 *)(a4 + 402);
      uint64_t v13 = (unsigned __int8 *)(a4 + 404);
      uint64_t v14 = (unsigned __int16 *)(a4 + 406);
      uint64_t v15 = (unsigned __int16 *)(a4 + 408);
      double v16 = (unsigned __int16 *)(a4 + 410);
      double v17 = (unsigned __int16 *)(a4 + 412);
      double v18 = (unsigned __int16 *)(a4 + 414);
      unsigned int v19 = (unsigned __int8 *)(a4 + 416);
      uint64_t v20 = (unsigned __int8 *)(a4 + 417);
      long long v21 = (double *)(a4 + 424);
      char v22 = (double *)(a4 + 432);
      uint64_t v23 = "S,";
LABEL_16:
      double v35 = *v21;
      unsigned int v32 = *v20;
      unsigned int v31 = *v19;
      unsigned int v30 = *v18;
      unsigned int v29 = *v17;
      unsigned int v28 = *v16;
      unsigned int v27 = *v15;
      unsigned int v26 = *v14;
      unsigned int v25 = *v13;
      unsigned int v24 = *v12;
      double v36 = *v22;
      char v37 = *v23;
      if (*v23)
      {
        int v38 = *a1;
        BOOL v39 = (unsigned __int8 *)(v23 + 1);
        do
        {
          *a1 = v38 + 1;
          char *v38 = v37;
          int v38 = *a1;
          if (*a1 >= a1[3])
          {
            int v38 = a1[2];
            *a1 = v38;
          }
          int v40 = *v39++;
          char v37 = v40;
        }
        while (v40);
      }
      double v33 = v35 * 100.0;
      double v34 = v36 * 100.0;
      break;
    default:
      unsigned int v24 = 0;
      unsigned int v25 = 0;
      unsigned int v26 = 0;
      unsigned int v27 = 0;
      unsigned int v28 = 0;
      unsigned int v29 = 0;
      unsigned int v30 = 0;
      unsigned int v31 = 0;
      unsigned int v32 = 0;
      double v33 = 0.0;
      double v34 = 0.0;
      break;
  }
  sprintf1da(a1, v24, v59, 0, 0);
  char v41 = (*a1)++;
  char *v41 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v25, v59, 0, 0);
  long long v42 = (*a1)++;
  *long long v42 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v26, v59, 0, 0);
  char v43 = (*a1)++;
  char *v43 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v27, v59, 0, 0);
  std::string v44 = (*a1)++;
  *std::string v44 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v28, v59, 0, 0);
  long long v45 = (*a1)++;
  char *v45 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v29, v59, 0, 0);
  int v46 = (*a1)++;
  char *v46 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v30, v59, 0, 0);
  uint64_t v47 = (*a1)++;
  char *v47 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v31, v59, 0, 0);
  uint64_t v48 = (*a1)++;
  *uint64_t v48 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, v32, v59, 0, 0);
  int v49 = (*a1)++;
  *int v49 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v50 = -0.5;
  if (v33 > 0.0) {
    double v50 = 0.5;
  }
  double v51 = v33 + v50;
  if (v51 <= 2147483650.0)
  {
    if (v51 >= -2147483650.0) {
      unsigned int v52 = (int)v51;
    }
    else {
      unsigned int v52 = 0x80000000;
    }
  }
  else
  {
    unsigned int v52 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)a1, v52, 3);
  int v53 = (*a1)++;
  *int v53 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v54 = -0.5;
  if (v34 > 0.0) {
    double v54 = 0.5;
  }
  double v55 = v34 + v54;
  if (v55 <= 2147483650.0)
  {
    if (v55 >= -2147483650.0) {
      unsigned int v56 = (int)v55;
    }
    else {
      unsigned int v56 = 0x80000000;
    }
  }
  else
  {
    unsigned int v56 = 0x7FFFFFFF;
  }
  sprintf_3f((uint64_t)a1, v56, 3);

  return NMEA_Add_checksum((uint64_t)a1, v58);
}

char **NMEA_Encode_PDBGI_Constell(char **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  char v7 = (*a1)++;
  *char v7 = 36;
  uint64_t v8 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v8 = a1[2];
  }
  char v9 = 80;
  uint64_t v10 = 1u;
  unint64_t v11 = v8;
  do
  {
    *a1 = v11 + 1;
    char *v11 = v9;
    unint64_t v11 = *a1;
    if (*a1 >= a1[3])
    {
      unint64_t v11 = a1[2];
      *a1 = v11;
    }
    char v9 = aPdbgi[v10++];
  }
  while (v10 != 7);
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      unsigned __int8 v12 = (long long *)(a4 + 504);
      uint64_t v13 = "G,";
      goto LABEL_15;
    case 2:
      unsigned __int8 v12 = (long long *)(a4 + 696);
      uint64_t v13 = "R,";
      goto LABEL_15;
    case 3:
      unsigned __int8 v12 = (long long *)(a4 + 792);
      uint64_t v13 = "E,";
      goto LABEL_15;
    case 4:
      unsigned __int8 v12 = (long long *)(a4 + 888);
      uint64_t v13 = "C,";
      goto LABEL_15;
    case 5:
      unsigned __int8 v12 = (long long *)(a4 + 600);
      uint64_t v13 = "Q,";
      goto LABEL_15;
    case 6:
      unsigned __int8 v12 = (long long *)(a4 + 984);
      uint64_t v13 = "N,";
      goto LABEL_15;
    case 7:
      unsigned __int8 v12 = (long long *)(a4 + 1080);
      uint64_t v13 = "S,";
LABEL_15:
      long long v14 = v12[3];
      long long v67 = v12[2];
      long long v68 = v14;
      long long v15 = v12[5];
      long long v69 = v12[4];
      long long v70 = v15;
      long long v16 = v12[1];
      long long v65 = *v12;
      long long v66 = v16;
      char v17 = *v13;
      if (*v13)
      {
        double v18 = *a1;
        unsigned int v19 = (unsigned __int8 *)(v13 + 1);
        do
        {
          *a1 = v18 + 1;
          *double v18 = v17;
          double v18 = *a1;
          if (*a1 >= a1[3])
          {
            double v18 = a1[2];
            *a1 = v18;
          }
          int v20 = *v19++;
          char v17 = v20;
        }
        while (v20);
      }
      break;
    default:
      break;
  }
  sprintf1da(a1, BYTE1(v65), v71, 0, 0);
  long long v21 = (*a1)++;
  *long long v21 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE2(v65), v71, 0, 0);
  char v22 = (*a1)++;
  *char v22 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE3(v65), v71, 0, 0);
  uint64_t v23 = (*a1)++;
  *uint64_t v23 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE4(v65), v71, 0, 0);
  unsigned int v24 = (*a1)++;
  *unsigned int v24 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE6(v65), v71, 0, 0);
  unsigned int v25 = (*a1)++;
  *unsigned int v25 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE7(v65), v71, 0, 0);
  unsigned int v26 = (*a1)++;
  char *v26 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE8(v65), v71, 0, 0);
  unsigned int v27 = (*a1)++;
  *unsigned int v27 = 44;
  unsigned int v28 = *a1;
  if (*a1 >= a1[3]) {
    unsigned int v28 = a1[2];
  }
  for (uint64_t i = 9; i != 17; ++i)
  {
    char v30 = *((unsigned char *)&v65 + i);
    if (v30)
    {
      *a1 = v28 + 1;
      *unsigned int v28 = v30;
      unsigned int v28 = *a1;
      if (*a1 >= a1[3])
      {
        unsigned int v28 = a1[2];
        *a1 = v28;
      }
    }
  }
  *a1 = v28 + 1;
  *unsigned int v28 = 44;
  unsigned int v31 = *a1;
  if (*a1 >= a1[3]) {
    unsigned int v31 = a1[2];
  }
  for (uint64_t j = 17; j != 25; ++j)
  {
    char v33 = *((unsigned char *)&v65 + j);
    if (v33)
    {
      *a1 = v31 + 1;
      *unsigned int v31 = v33;
      unsigned int v31 = *a1;
      if (*a1 >= a1[3])
      {
        unsigned int v31 = a1[2];
        *a1 = v31;
      }
    }
  }
  *a1 = v31 + 1;
  *unsigned int v31 = 44;
  double v34 = *a1;
  if (*a1 >= a1[3]) {
    double v34 = a1[2];
  }
  for (uint64_t k = 25; k != 33; ++k)
  {
    char v36 = *((unsigned char *)&v65 + k);
    if (v36)
    {
      *a1 = v34 + 1;
      *double v34 = v36;
      double v34 = *a1;
      if (*a1 >= a1[3])
      {
        double v34 = a1[2];
        *a1 = v34;
      }
    }
  }
  *a1 = v34 + 1;
  *double v34 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v37 = -0.5;
  if (*((double *)&v67 + 1) * 10.0 > 0.0) {
    double v37 = 0.5;
  }
  double v38 = *((double *)&v67 + 1) * 10.0 + v37;
  if (v38 <= 2147483650.0)
  {
    if (v38 >= -2147483650.0) {
      unsigned int v39 = (int)v38;
    }
    else {
      unsigned int v39 = 0x80000000;
    }
  }
  else
  {
    unsigned int v39 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v39);
  int v40 = (*a1)++;
  *int v40 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v41 = -0.5;
  if (*(double *)&v68 * 10.0 > 0.0) {
    double v41 = 0.5;
  }
  double v42 = *(double *)&v68 * 10.0 + v41;
  if (v42 <= 2147483650.0)
  {
    if (v42 >= -2147483650.0) {
      unsigned int v43 = (int)v42;
    }
    else {
      unsigned int v43 = 0x80000000;
    }
  }
  else
  {
    unsigned int v43 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v43);
  std::string v44 = (*a1)++;
  *std::string v44 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v45 = -0.5;
  if (*((double *)&v68 + 1) * 10.0 > 0.0) {
    double v45 = 0.5;
  }
  double v46 = *((double *)&v68 + 1) * 10.0 + v45;
  if (v46 <= 2147483650.0)
  {
    if (v46 >= -2147483650.0) {
      unsigned int v47 = (int)v46;
    }
    else {
      unsigned int v47 = 0x80000000;
    }
  }
  else
  {
    unsigned int v47 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v47);
  uint64_t v48 = (*a1)++;
  *uint64_t v48 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v49 = -0.5;
  if (*(double *)&v69 * 10.0 > 0.0) {
    double v49 = 0.5;
  }
  double v50 = *(double *)&v69 * 10.0 + v49;
  if (v50 <= 2147483650.0)
  {
    if (v50 >= -2147483650.0) {
      unsigned int v51 = (int)v50;
    }
    else {
      unsigned int v51 = 0x80000000;
    }
  }
  else
  {
    unsigned int v51 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v51);
  unsigned int v52 = (*a1)++;
  *unsigned int v52 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v53 = -0.5;
  if (*((double *)&v69 + 1) * 10.0 > 0.0) {
    double v53 = 0.5;
  }
  double v54 = *((double *)&v69 + 1) * 10.0 + v53;
  if (v54 <= 2147483650.0)
  {
    if (v54 >= -2147483650.0) {
      unsigned int v55 = (int)v54;
    }
    else {
      unsigned int v55 = 0x80000000;
    }
  }
  else
  {
    unsigned int v55 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v55);
  unsigned int v56 = (*a1)++;
  char *v56 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  double v57 = -0.5;
  if (*(double *)&v70 * 10.0 > 0.0) {
    double v57 = 0.5;
  }
  double v58 = *(double *)&v70 * 10.0 + v57;
  if (v58 <= 2147483650.0)
  {
    if (v58 >= -2147483650.0) {
      unsigned int v59 = (int)v58;
    }
    else {
      unsigned int v59 = 0x80000000;
    }
  }
  else
  {
    unsigned int v59 = 0x7FFFFFFF;
  }
  sprintf_2f((uint64_t)a1, v59);
  uint64_t v60 = (*a1)++;
  *uint64_t v60 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE8(v70), v71, 0, 0);
  char v61 = (*a1)++;
  *char v61 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE9(v70), v71, 0, 0);
  int v62 = (*a1)++;
  char *v62 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, BYTE10(v70), v71, 0, 0);
  unsigned int v63 = (*a1)++;
  *unsigned int v63 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }

  return NMEA_Add_checksum((uint64_t)a1, v8);
}

char **NMEA_Encode_PDBGO(char **a1, int a2, uint64_t a3, unint64_t *a4)
{
  char v7 = (*a1)++;
  *char v7 = 36;
  uint64_t v8 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v8 = a1[2];
  }
  char v9 = a1 + 2;
  char v10 = 80;
  uint64_t v11 = 1u;
  unsigned __int8 v12 = v8;
  do
  {
    *a1 = v12 + 1;
    char *v12 = v10;
    unsigned __int8 v12 = *a1;
    if (*a1 >= a1[3])
    {
      unsigned __int8 v12 = a1[2];
      *a1 = v12;
    }
    char v10 = aPdbgo[v11++];
  }
  while (v11 != 7);
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      uint64_t v13 = a4 + 155;
      long long v14 = a4 + 156;
      long long v15 = a4 + 157;
      long long v16 = a4 + 158;
      char v17 = a4 + 159;
      double v18 = a4 + 160;
      unsigned int v19 = "G,";
      goto LABEL_23;
    case 2:
      uint64_t v13 = a4 + 169;
      long long v14 = a4 + 170;
      long long v15 = a4 + 171;
      long long v16 = a4 + 172;
      char v17 = a4 + 173;
      double v18 = a4 + 174;
      unsigned int v19 = "R,";
      goto LABEL_23;
    case 3:
      uint64_t v13 = a4 + 176;
      long long v14 = a4 + 177;
      long long v15 = a4 + 178;
      long long v16 = a4 + 179;
      char v17 = a4 + 180;
      double v18 = a4 + 181;
      unsigned int v19 = "E,";
      goto LABEL_23;
    case 4:
      uint64_t v13 = a4 + 183;
      long long v14 = a4 + 184;
      long long v15 = a4 + 185;
      long long v16 = a4 + 186;
      char v17 = a4 + 187;
      double v18 = a4 + 188;
      unsigned int v19 = "C,";
      goto LABEL_23;
    case 5:
      uint64_t v13 = a4 + 162;
      long long v14 = a4 + 163;
      long long v15 = a4 + 164;
      long long v16 = a4 + 165;
      char v17 = a4 + 166;
      double v18 = a4 + 167;
      unsigned int v19 = "Q,";
      goto LABEL_23;
    case 6:
      uint64_t v13 = a4 + 190;
      long long v14 = a4 + 191;
      long long v15 = a4 + 192;
      long long v16 = a4 + 193;
      char v17 = a4 + 194;
      double v18 = a4 + 195;
      unsigned int v19 = "N,";
      goto LABEL_23;
    case 7:
      uint64_t v13 = a4 + 197;
      long long v14 = a4 + 198;
      long long v15 = a4 + 199;
      long long v16 = a4 + 200;
      char v17 = a4 + 201;
      double v18 = a4 + 202;
      unsigned int v19 = "S,";
LABEL_23:
      unint64_t v25 = *v17;
      unint64_t v29 = *v16;
      unint64_t v30 = *v15;
      unint64_t v26 = *v14;
      unint64_t v31 = *v13;
      unint64_t v24 = *v18;
      char v32 = *v19;
      char v33 = *a1;
      if (*v19)
      {
        double v34 = (unsigned __int8 *)(v19 + 1);
        do
        {
          *a1 = v33 + 1;
          *char v33 = v32;
          char v33 = *a1;
          if (*a1 >= a1[3])
          {
            char v33 = a1[2];
            *a1 = v33;
          }
          int v35 = *v34++;
          char v32 = v35;
        }
        while (v35);
      }
      uint64_t v36 = 0;
      char v37 = 66;
      do
      {
        *a1 = v33 + 1;
        *char v33 = v37;
        char v33 = *a1;
        if (*a1 >= a1[3])
        {
          char v33 = a1[2];
          *a1 = v33;
        }
        char v37 = aB_0[++v36];
      }
      while (v36 != 2);
      if (v31)
      {
        uint64_t v38 = 0;
        char v39 = 48;
        do
        {
          *a1 = v33 + 1;
          *char v33 = v39;
          char v33 = *a1;
          if (*a1 >= a1[3])
          {
            char v33 = a1[2];
            *a1 = v33;
          }
          char v39 = a0x_0[++v38];
        }
        while (v38 != 2);
        sprintf_1X(a1, v31);
        char v33 = *a1;
      }
      *a1 = v33 + 1;
      *char v33 = 44;
      int v40 = *a1;
      if (*a1 >= a1[3]) {
        int v40 = *v9;
      }
      if (v30)
      {
        uint64_t v41 = 0;
        char v42 = 48;
        do
        {
          *a1 = v40 + 1;
          *int v40 = v42;
          int v40 = *a1;
          if (*a1 >= a1[3])
          {
            int v40 = a1[2];
            *a1 = v40;
          }
          char v42 = a0x_0[++v41];
        }
        while (v41 != 2);
        sprintf_1X(a1, v30);
        int v40 = *a1;
      }
      *a1 = v40 + 1;
      *int v40 = 44;
      unsigned int v27 = *a1;
      if (*a1 >= a1[3]) {
        unsigned int v27 = *v9;
      }
      if (!v29) {
        goto LABEL_55;
      }
      uint64_t v43 = 0;
      char v44 = 48;
      do
      {
        *a1 = v27 + 1;
        *unsigned int v27 = v44;
        unsigned int v27 = *a1;
        if (*a1 >= a1[3])
        {
          unsigned int v27 = a1[2];
          *a1 = v27;
        }
        char v44 = a0x_0[++v43];
      }
      while (v43 != 2);
      sprintf_1X(a1, v29);
      unsigned int v28 = a1;
LABEL_54:
      unsigned int v27 = *v28;
LABEL_55:
      *a1 = v27 + 1;
      *unsigned int v27 = 44;
      double v45 = *a1;
      if (*a1 >= a1[3]) {
        double v45 = *v9;
      }
      uint64_t v46 = 0;
      char v47 = 69;
      do
      {
        *a1 = v45 + 1;
        char *v45 = v47;
        double v45 = *a1;
        if (*a1 >= a1[3])
        {
          double v45 = a1[2];
          *a1 = v45;
        }
        char v47 = aE_2[++v46];
      }
      while (v46 != 2);
      if (v26)
      {
        uint64_t v48 = 0;
        char v49 = 48;
        do
        {
          *a1 = v45 + 1;
          char *v45 = v49;
          double v45 = *a1;
          if (*a1 >= a1[3])
          {
            double v45 = a1[2];
            *a1 = v45;
          }
          char v49 = a0x_0[++v48];
        }
        while (v48 != 2);
        sprintf_1X(a1, v26);
        double v45 = *a1;
      }
      *a1 = v45 + 1;
      char *v45 = 44;
      double v50 = *a1;
      if (*a1 >= a1[3]) {
        double v50 = *v9;
      }
      uint64_t v51 = 0;
      char v52 = 82;
      do
      {
        *a1 = v50 + 1;
        char *v50 = v52;
        double v50 = *a1;
        if (*a1 >= a1[3])
        {
          double v50 = a1[2];
          *a1 = v50;
        }
        char v52 = aR_0[++v51];
      }
      while (v51 != 2);
      if (v25)
      {
        uint64_t v53 = 0;
        char v54 = 48;
        do
        {
          *a1 = v50 + 1;
          char *v50 = v54;
          double v50 = *a1;
          if (*a1 >= a1[3])
          {
            double v50 = a1[2];
            *a1 = v50;
          }
          char v54 = a0x_0[++v53];
        }
        while (v53 != 2);
        sprintf_1X(a1, v25);
        double v50 = *a1;
      }
      *a1 = v50 + 1;
      char *v50 = 44;
      unsigned int v55 = *a1;
      if (*a1 >= a1[3])
      {
        unsigned int v55 = a1[2];
        *a1 = v55;
      }
      if (v24)
      {
        uint64_t v56 = 0;
        char v57 = 48;
        do
        {
          *a1 = v55 + 1;
          *unsigned int v55 = v57;
          unsigned int v55 = *a1;
          if (*a1 >= a1[3])
          {
            unsigned int v55 = a1[2];
            *a1 = v55;
          }
          char v57 = a0x_0[++v56];
        }
        while (v56 != 2);
        sprintf_1X(a1, v24);
      }
      return NMEA_Add_checksum((uint64_t)a1, v8);
    default:
      uint64_t v20 = 0;
      long long v21 = *a1;
      char v22 = 66;
      do
      {
        *a1 = v21 + 1;
        *long long v21 = v22;
        long long v21 = *a1;
        if (*a1 >= a1[3])
        {
          long long v21 = a1[2];
          *a1 = v21;
        }
        char v22 = aB_0[++v20];
      }
      while (v20 != 2);
      *a1 = v21 + 1;
      *long long v21 = 44;
      uint64_t v23 = *a1;
      if (*a1 >= a1[3]) {
        uint64_t v23 = *v9;
      }
      unint64_t v24 = 0;
      unint64_t v25 = 0;
      unint64_t v26 = 0;
      *a1 = v23 + 1;
      *uint64_t v23 = 44;
      unsigned int v27 = *a1;
      unsigned int v28 = a1 + 2;
      if (*a1 < a1[3]) {
        goto LABEL_55;
      }
      goto LABEL_54;
  }
}

uint64_t sprintf_LatLon(char **a1, double a2, double a3)
{
  int v6 = (int)a2;
  double v7 = fabs((a2 - (double)(int)a2) * 60.0);
  if (v6 >= 0) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = -v6;
  }
  double v9 = v7 * 1000000.0;
  double v10 = -0.5;
  if (v9 > 0.0) {
    double v10 = 0.5;
  }
  double v11 = v9 + v10;
  if (v11 > 2147483650.0)
  {
    sprintf_02d(a1, v8);
    signed int v12 = 0x7FFFFFFF;
    goto LABEL_13;
  }
  if (v11 >= -2147483650.0)
  {
    signed int v12 = (int)v11;
    sprintf_02d(a1, v8);
    if (v12 >= 10000000) {
      goto LABEL_13;
    }
  }
  else
  {
    sprintf_02d(a1, v8);
    signed int v12 = 0x80000000;
  }
  uint64_t v13 = (*a1)++;
  *uint64_t v13 = 48;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
LABEL_13:
  sprintf_7f((uint64_t)a1, v12, 7);
  long long v14 = ",N,";
  if (a2 < 0.0) {
    long long v14 = ",S,";
  }
  char v15 = *v14;
  if (*v14)
  {
    long long v16 = *a1;
    char v17 = (unsigned __int8 *)(v14 + 1);
    do
    {
      *a1 = v16 + 1;
      *long long v16 = v15;
      long long v16 = *a1;
      if (*a1 >= a1[3])
      {
        long long v16 = a1[2];
        *a1 = v16;
      }
      int v18 = *v17++;
      char v15 = v18;
    }
    while (v18);
  }
  double v19 = fabs((a3 - (double)(int)a3) * 60.0);
  if ((int)a3 >= 0) {
    unsigned int v20 = (int)a3;
  }
  else {
    unsigned int v20 = -(int)a3;
  }
  double v21 = v19 * 1000000.0;
  double v22 = -0.5;
  if (v21 > 0.0) {
    double v22 = 0.5;
  }
  double v23 = v21 + v22;
  if (v23 > 2147483650.0)
  {
    sprintf_03d((uint64_t)a1, v20);
    signed int v24 = 0x7FFFFFFF;
    goto LABEL_32;
  }
  if (v23 >= -2147483650.0)
  {
    signed int v24 = (int)v23;
    sprintf_03d((uint64_t)a1, v20);
    if (v24 >= 10000000) {
      goto LABEL_32;
    }
  }
  else
  {
    sprintf_03d((uint64_t)a1, v20);
    signed int v24 = 0x80000000;
  }
  unint64_t v25 = (*a1)++;
  *unint64_t v25 = 48;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
LABEL_32:
  uint64_t result = sprintf_7f((uint64_t)a1, v24, 7);
  unsigned int v27 = ",E,";
  if (a3 < 0.0) {
    unsigned int v27 = ",W,";
  }
  char v28 = *v27;
  if (*v27)
  {
    unint64_t v29 = *a1;
    unint64_t v30 = (unsigned __int8 *)(v27 + 1);
    do
    {
      *a1 = v29 + 1;
      *unint64_t v29 = v28;
      unint64_t v29 = *a1;
      if (*a1 >= a1[3])
      {
        unint64_t v29 = a1[2];
        *a1 = v29;
      }
      int v31 = *v30++;
      char v28 = v31;
    }
    while (v31);
  }
  return result;
}

void *sprintf_HHMMSS(void *result, uint64_t a2)
{
  int v2 = result;
  if (*(unsigned char *)(a2 + 16))
  {
    sprintf_02d(result, *(unsigned __int16 *)(a2 + 24));
    sprintf_02d(v2, *(unsigned __int16 *)(a2 + 26));
    sprintf_02d(v2, *(unsigned __int16 *)(a2 + 28));
    uint64_t v4 = (unsigned char *)(*v2)++;
    *uint64_t v4 = 46;
    if (*v2 >= v2[3]) {
      *int v2 = v2[2];
    }
    uint64_t result = (void *)sprintf_03d((uint64_t)v2, *(unsigned __int16 *)(a2 + 30));
  }
  unsigned int v5 = (unsigned char *)(*v2)++;
  *unsigned int v5 = 44;
  if (*v2 >= v2[3]) {
    *int v2 = v2[2];
  }
  return result;
}

char **NMEA_Add_checksum(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char **)a1 == a2)
  {
    unint64_t v5 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      int v4 = *a2;
      if (v4 == 32)
      {
        LOBYTE(v4) = 48;
        *a2 = 48;
      }
      if ((unint64_t)++a2 >= *(void *)(a1 + 24)) {
        a2 = *(unsigned char **)(a1 + 16);
      }
      v3 ^= v4;
    }
    while (a2 != *(unsigned char **)a1);
    unint64_t v5 = v3;
  }
  *(void *)a1 = a2 + 1;
  *a2 = 42;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  uint64_t result = sprintf_02x((char **)a1, v5);
  double v7 = (unsigned char *)(*(void *)a1)++;
  *double v7 = 10;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  return result;
}

uint64_t sprintf_DOP(uint64_t result, double a2)
{
  if (a2 < 99.0)
  {
    double v2 = a2 * 100.0;
    double v3 = -0.5;
    if (v2 > 0.0) {
      double v3 = 0.5;
    }
    double v4 = v2 + v3;
    if (v4 <= 2147483650.0)
    {
      if (v4 >= -2147483650.0) {
        unsigned int v5 = (int)v4;
      }
      else {
        unsigned int v5 = 0x80000000;
      }
    }
    else
    {
      unsigned int v5 = 0x7FFFFFFF;
    }
    return sprintf_3f(result, v5, 3);
  }
  return result;
}

void *sprintf_AccEst(void *result, double a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 < 99999.0)
  {
    if (a2 <= 9.9)
    {
      if (a2 <= 0.99)
      {
        if (a2 <= 0.099)
        {
          double v14 = a2 * 1000.0;
          double v15 = -0.5;
          if (v14 > 0.0) {
            double v15 = 0.5;
          }
          double v16 = v14 + v15;
          if (v16 <= 2147483650.0)
          {
            if (v16 >= -2147483650.0) {
              unsigned int v17 = (int)v16;
            }
            else {
              unsigned int v17 = 0x80000000;
            }
          }
          else
          {
            unsigned int v17 = 0x7FFFFFFF;
          }
          return (void *)sprintf_4f((uint64_t)result, v17, 4);
        }
        else
        {
          double v9 = a2 * 100.0;
          double v10 = -0.5;
          if (v9 > 0.0) {
            double v10 = 0.5;
          }
          double v11 = v9 + v10;
          if (v11 <= 2147483650.0)
          {
            if (v11 >= -2147483650.0) {
              unsigned int v12 = (int)v11;
            }
            else {
              unsigned int v12 = 0x80000000;
            }
          }
          else
          {
            unsigned int v12 = 0x7FFFFFFF;
          }
          return (void *)sprintf_3f((uint64_t)result, v12, 3);
        }
      }
      else
      {
        double v5 = a2 * 10.0;
        double v6 = -0.5;
        if (v5 > 0.0) {
          double v6 = 0.5;
        }
        double v7 = v5 + v6;
        if (v7 <= 2147483650.0)
        {
          if (v7 >= -2147483650.0) {
            unsigned int v8 = (int)v7;
          }
          else {
            unsigned int v8 = 0x80000000;
          }
        }
        else
        {
          unsigned int v8 = 0x7FFFFFFF;
        }
        return (void *)sprintf_2f((uint64_t)result, v8);
      }
    }
    else
    {
      double v2 = -0.5;
      if (a2 > 0.0) {
        double v2 = 0.5;
      }
      double v3 = v2 + a2;
      if (v3 <= 2147483650.0)
      {
        if (v3 >= -2147483650.0) {
          int v4 = (int)v3;
        }
        else {
          int v4 = 0x80000000;
        }
      }
      else
      {
        int v4 = 0x7FFFFFFF;
      }
      if (v4 >= 0) {
        unsigned int v13 = v4;
      }
      else {
        unsigned int v13 = -v4;
      }
      return sprintf1da(result, v13, v18, 0, v4 >> 31);
    }
  }
  return result;
}

void ECEF2Geo(double *a1, uint64_t a2, uint64_t a3)
{
  v25[3] = *(double *)MEMORY[0x263EF8340];
  double v5 = *a1;
  if (*(_WORD *)a2)
  {
    double v6 = v5 + *(double *)(a2 + 48);
    double v7 = a1[1];
    double v8 = a1[2];
    double v9 = v7 + *(double *)(a2 + 56);
    double v10 = v8 + *(double *)(a2 + 64);
    if (*(unsigned char *)(a2 + 2))
    {
      uint64_t v11 = 0;
      unsigned int v12 = (double *)(a2 + 88);
      do
      {
        double v13 = v7 * *(v12 - 1) + *(v12 - 2) * v5;
        double v14 = *v12;
        v12 += 3;
        v25[v11++] = v13 + v14 * v8;
      }
      while (v11 != 3);
      double v5 = v6 + v25[0];
      double v9 = v9 + v25[1];
      double v10 = v10 + v25[2];
    }
    else
    {
      double v5 = v5 + *(double *)(a2 + 48);
    }
  }
  else
  {
    double v9 = a1[1];
    double v10 = a1[2];
  }
  double v15 = v9 * v9 + v5 * v5;
  double v16 = *(double *)(a2 + 24);
  double v17 = 1.0 / *(double *)(a2 + 16);
  double v18 = v15 * v17;
  double v19 = v10 * v10 * v17;
  int v22 = 3;
  do
  {
    double v20 = *(double *)(a2 + 32);
    double v21 = *(double *)(a2 + 40) * v19;
    double v16 = v16
        - ((v21 + v21) * (v16 * (v16 * v16))
         + v21 * (v16 * v16) * (v16 * v16)
         + (v18 + v21 - v20) * (v16 * v16)
         + v20 * -2.0 * v16
         - v20)
        / (v20 * -2.0
         + (v21 + v21) * 3.0 * (v16 * v16)
         + v21 * 4.0 * (v16 * (v16 * v16))
         + (v18 + v21 - v20 + v18 + v21 - v20) * v16);
    --v22;
  }
  while (v22);
  double v23 = v16 + 1.0;
  if (fabs(v5) >= 0.001 || fabs(v9) >= 0.001)
  {
    *(long double *)(a3 + 8) = atan2(v9, v5);
  }
  else
  {
    *(void *)(a3 + 8) = 0;
    double v24 = 0.0;
    if (fabs(v10) < 0.001) {
      goto LABEL_16;
    }
  }
  double v24 = atan2(v10 * v23, sqrt(v15));
LABEL_16:
  *(double *)a3 = v24;
  *(double *)(a3 + 16) = *(double *)(a2 + 8)
                       * (sqrt(v19 + v18 / (v23 * v23))
                        * (1.0 - v16 * *(double *)(a2 + 40) / *(double *)(a2 + 24)));
}

BOOL NK_Body_Frame_Meas(unsigned int a1, double *a2, const double *a3, const double (*a4)[3], double a5, unsigned int a6, double *a7)
{
  v29[33] = *(double *)MEMORY[0x263EF8340];
  double v10 = &v27[2];
  ECEF2FSD_RotM(a4, a5, (double (*)[3])v27);
  uint64_t v11 = 0;
  double v12 = *a2;
  double v13 = a2[1];
  double v14 = a2[2];
  do
  {
    double v15 = *(v10 - 1) * v13 + *(v10 - 2) * v12;
    double v16 = *v10;
    v10 += 3;
    v27[v11 + 9] = v15 + v16 * v14;
    ++v11;
  }
  while (v11 != 3);
  uint64_t v17 = 0;
  double v24 = 0.0;
  double v18 = &v27[2];
  do
  {
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    uint64_t v19 = *((void *)v18 - 1);
    *((double *)v25 + a1) = *(v18 - 2);
    *((void *)v25 + a1 + 1) = v19;
    uint64_t v20 = *(void *)v18;
    v18 += 3;
    *((void *)&v25[1] + a1) = v20;
    *((double *)v25 + a6) = v27[v17 + 9];
    BOOL result = umeas((BOOL)a7, a6, a3[v17++], (double *)v25, v29, v28, &v24, 1.0e20);
  }
  while (v17 != 3);
  return result;
}

uint64_t NK_Static_Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v126[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2 + 59928;
  uint64_t v6 = a1 + 27116;
  unsigned int v7 = *(_DWORD *)(a1 + 27120);
  if (v7 <= *(unsigned __int16 *)(a1 + 16) && *(_DWORD *)(a2 + 1872) == 1)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 148);
    if (v8 >= *(_DWORD *)(a1 + 152)) {
      unsigned int v8 = *(_DWORD *)(a1 + 152);
    }
    if (v8 >= *(_DWORD *)(a1 + 156)) {
      unsigned int v8 = *(_DWORD *)(a1 + 156);
    }
    BOOL v9 = v8 > 0xA;
  }
  else
  {
    BOOL v9 = 0;
  }
  memcpy(__dst, (const void *)(a1 + 976), sizeof(__dst));
  uint64_t v10 = 0;
  double v11 = *(double *)(a2 + 1584) - *(double *)&__dst[696];
  double v12 = *(double *)(a2 + 1592) - *(double *)&__dst[704];
  double v13 = *(double *)(a2 + 1600) - *(double *)&__dst[712];
  double v14 = (double *)(a2 + 1752);
  do
  {
    double v15 = v12 * *(v14 - 1) + *(v14 - 2) * v11;
    double v16 = *v14;
    v14 += 3;
    *(double *)&v126[v10++] = v15 + v16 * v13;
  }
  while (v10 != 3);
  double v18 = *(double *)v126;
  double v17 = *(double *)&v126[1];
  double v19 = sqrt(v17 * v17 + v18 * v18);
  double v20 = *(double *)(v5 + 1488);
  double v21 = *(double *)(v5 + 1496);
  *(double *)(a1 + 27216) = v19;
  *(double *)(a1 + 27240) = *(double *)(a1 + 27240) * 0.6 + v19 * 0.4;
  double v22 = 4.0;
  if (v19 < 8.0)
  {
    double v22 = 2.0;
    if (v19 >= 6.0) {
      double v22 = 3.0;
    }
  }
  double v23 = v20 + v21;
  double v24 = *(double *)(a1 + 27232);
  if (*(_DWORD *)v6 >= 3u
    && (v19 > v24 ? (BOOL v25 = v22 * v22 <= v23) : (BOOL v25 = 1), !v25 ? (_ZF = *(unsigned char *)(a1 + 241) == 0) : (_ZF = 0), _ZF))
  {
    double v27 = 10.0;
    if (v19 <= 10.0)
    {
      double v31 = v24 + 0.5;
      if (v19 > v31 && v19 < 8.0) {
        double v27 = v31;
      }
      else {
        double v27 = v19;
      }
    }
  }
  else
  {
    double v27 = 6.0;
    if (v19 <= 6.0 || v24 >= 6.0)
    {
      if (*(_DWORD *)(v6 + 88) == 3)
      {
        double v29 = v24 + -0.003;
        double v27 = v19;
        if (v19 > v24 + -0.003) {
          goto LABEL_40;
        }
        double v30 = 0.003;
      }
      else
      {
        double v29 = v24 + -0.01;
        double v27 = v19;
        if (v19 > v24 + -0.01) {
          goto LABEL_40;
        }
        double v30 = 0.01;
      }
      BOOL v25 = v24 <= v30;
      double v27 = *(double *)(a1 + 27232);
      if (!v25) {
        double v27 = v29;
      }
    }
  }
LABEL_40:
  *(double *)(a1 + 27232) = v27;
  int v33 = *(_DWORD *)(v5 + 16);
  if (v33 == 1 && *(_DWORD *)(v5 + 12) != 1)
  {
    int v34 = *(unsigned __int8 *)(v6 + 134);
  }
  else
  {
    *(unsigned char *)(v6 + 133) = v27 <= 4.0;
    int v34 = v27 > 4.0;
    *(unsigned char *)(v6 + 134) = v34;
    if (v33 != 1)
    {
      if (v27 > 4.0) {
        int v35 = 8;
      }
      else {
        int v35 = 4;
      }
      *(_DWORD *)(v5 + 12) = v35;
      *(_DWORD *)(v5 + 16) = 0;
    }
  }
  long long v114 = (double *)(a2 + 1736);
  LOBYTE(v36) = *(_DWORD *)(v5 + 4) == 1 && *(unsigned char *)(v5 + 36) != 0;
  unsigned int v37 = *(_DWORD *)(v6 + 240);
  if (v37 == 20)
  {
    unsigned int v37 = 19;
    *(_DWORD *)(v6 + 240) = 19;
  }
  else if (!v37)
  {
    *(_OWORD *)(a1 + 27504) = 0u;
    *(_OWORD *)(a1 + 27488) = 0u;
    *(_OWORD *)(a1 + 27472) = 0u;
    *(_OWORD *)(a1 + 27456) = 0u;
    *(_OWORD *)(a1 + 27440) = 0u;
    *(_OWORD *)(a1 + 27424) = 0u;
    *(_OWORD *)(a1 + 27408) = 0u;
    *(_OWORD *)(a1 + 27392) = 0u;
    *(_OWORD *)(a1 + 27376) = 0u;
    *(_OWORD *)(a1 + 27360) = 0u;
    goto LABEL_57;
  }
  uint64_t v38 = v37;
  do
  {
    *(void *)(a1 + 27360 + 8 * v38) = *(void *)(a1 + 8 * (v38 - 1) + 27360);
    --v38;
  }
  while (v38);
LABEL_57:
  double v39 = dbl_263D82500[v34 == 0];
  *(void *)(a1 + 27360) = *(void *)(a2 + 1848);
  uint64_t v40 = v37 + 1;
  *(_DWORD *)(v6 + 240) = v40;
  long long v41 = *(_OWORD *)(a1 + 27472);
  v124[6] = *(_OWORD *)(a1 + 27456);
  v124[7] = v41;
  long long v42 = *(_OWORD *)(a1 + 27504);
  v124[8] = *(_OWORD *)(a1 + 27488);
  v124[9] = v42;
  long long v43 = *(_OWORD *)(a1 + 27408);
  v124[2] = *(_OWORD *)(a1 + 27392);
  v124[3] = v43;
  long long v44 = *(_OWORD *)(a1 + 27440);
  v124[4] = *(_OWORD *)(a1 + 27424);
  v124[5] = v44;
  long long v45 = *(_OWORD *)(a1 + 27376);
  v124[0] = *(_OWORD *)(a1 + 27360);
  v124[1] = v45;
  uint64_t result = (uint64_t)VecSortAscR8((double *)v124, 0, v37);
  unsigned int v47 = v40 >> 1;
  if (v40)
  {
    double v48 = *((double *)v124 + v47);
  }
  else
  {
    if (!v40)
    {
      double v50 = 0.0;
      goto LABEL_71;
    }
    double v48 = (*((double *)v124 + v47 - 1) + *((double *)v124 + v47)) * 0.5;
  }
  char v49 = (double *)(a1 + 27360);
  double v50 = 0.0;
  uint64_t v51 = v40;
  do
  {
    double v52 = *v49++;
    double v53 = v52;
    if (v52 > v48 * 4.3512 && v48 > 1.0 && v40 == 20) {
      double v53 = v48;
    }
    double v50 = v50 + v53;
    --v51;
  }
  while (v51);
LABEL_71:
  double v56 = v39 * 1.5;
  *(double *)(a1 + 27520) = v50 / (double)v40;
  if (v19 >= 3.0 || v23 >= v56 * 3.0 * (v56 * 3.0))
  {
    *(_WORD *)(v6 + 136) = 0;
    goto LABEL_134;
  }
  int v57 = *(unsigned __int16 *)(v6 + 136);
  if (v57 == 5)
  {
    unsigned __int16 v59 = 4;
    *(_WORD *)(v6 + 136) = 4;
    goto LABEL_80;
  }
  if (!*(_WORD *)(v6 + 136))
  {
    int v58 = 0;
    *(_WORD *)(a1 + 27272) = 0;
    *(void *)(a1 + 27264) = 0;
    *(void *)(a1 + 27256) = 0;
    goto LABEL_82;
  }
  unsigned __int16 v59 = *(_WORD *)(v6 + 136);
  if ((__int16)v57 >= 1)
  {
LABEL_80:
    int v58 = 0;
    int v57 = 0;
    uint64_t v60 = v59 - 1;
    char v61 = (_WORD *)(a1 + 2 * v59 + 27264);
    do
    {
      uint64_t v62 = a1 + 2 * v60;
      int v63 = *(__int16 *)(v62 + 27254);
      *(v61 - 5) = *(_WORD *)(v62 + 27254);
      LODWORD(v62) = *(__int16 *)(v62 + 27264);
      *v61-- = v62;
      v57 += v63;
      v58 += v62;
      unint64_t v64 = v60-- + 1;
    }
    while (v64 > 1);
    goto LABEL_82;
  }
  int v57 = 0;
  int v58 = 0;
LABEL_82:
  double v65 = -0.5;
  if (v18 * 1000.0 <= 0.0) {
    double v66 = -0.5;
  }
  else {
    double v66 = 0.5;
  }
  double v67 = v18 * 1000.0 + v66;
  if (v67 <= 2147483650.0)
  {
    if (v67 >= -2147483650.0) {
      int v68 = (int)v67;
    }
    else {
      LOWORD(v68) = 0;
    }
  }
  else
  {
    LOWORD(v68) = -1;
  }
  *(_WORD *)(v6 + 138) = v68;
  if (v17 * 1000.0 > 0.0) {
    double v65 = 0.5;
  }
  double v69 = v17 * 1000.0 + v65;
  if (v69 <= 2147483650.0)
  {
    if (v69 >= -2147483650.0) {
      int v70 = (int)v69;
    }
    else {
      LOWORD(v70) = 0;
    }
  }
  else
  {
    LOWORD(v70) = -1;
  }
  *(_WORD *)(v6 + 148) = v70;
  __int16 v71 = *(_WORD *)(v6 + 136) + 1;
  *(_WORD *)(v6 + 136) = v71;
  if ((v36 & 1) == 0)
  {
    signed int v72 = ((v57 + (__int16)v68) * (v57 + (__int16)v68) + (v58 + (__int16)v70) * (v58 + (__int16)v70))
        / (v71 * v71);
    if (v71 < 5)
    {
      if (v71 < 3)
      {
        BOOL v77 = 0;
        goto LABEL_124;
      }
    }
    else
    {
      double v73 = -0.5;
      if (v56 * 1000.0 > 0.0) {
        double v73 = 0.5;
      }
      double v74 = v56 * 1000.0 + v73;
      if (v74 <= 2147483650.0)
      {
        double v78 = -2147483650.0;
        if (v74 > -2147483650.0) {
          double v78 = v74;
        }
        int v75 = (int)v78;
        if (v74 < -2147483650.0) {
          int v76 = 0x80000000;
        }
        else {
          int v76 = (int)v74;
        }
      }
      else
      {
        int v75 = 0x7FFFFFFF;
        int v76 = 0x7FFFFFFF;
      }
      if (v72 < v76 * v75)
      {
        BOOL v77 = 1;
LABEL_124:
        int v36 = v23 * 9.0 + v19 * v19 < dbl_263D82510[v34 == 0] || v77;
        if (v19 * v19 > v23 * 9.0) {
          int v36 = 0;
        }
        goto LABEL_129;
      }
    }
    double v79 = -0.5;
    if (v39 * 1000.0 > 0.0) {
      double v79 = 0.5;
    }
    double v80 = v39 * 1000.0 + v79;
    if (v80 <= 2147483650.0)
    {
      double v83 = -2147483650.0;
      if (v80 > -2147483650.0) {
        double v83 = v39 * 1000.0 + v79;
      }
      int v81 = (int)v83;
      if (v80 < -2147483650.0) {
        int v82 = 0x80000000;
      }
      else {
        int v82 = (int)v80;
      }
    }
    else
    {
      int v81 = 0x7FFFFFFF;
      int v82 = 0x7FFFFFFF;
    }
    BOOL v77 = v72 < v82 * v81;
    goto LABEL_124;
  }
  int v36 = 1;
LABEL_129:
  if (*(_DWORD *)(v5 + 4) != 1)
  {
    if (v36) {
      int v84 = 2;
    }
    else {
      int v84 = 3;
    }
    *(_DWORD *)uint64_t v5 = v84;
    *(_DWORD *)(v5 + 4) = 0;
  }
LABEL_134:
  switch(*(_DWORD *)(v6 + 88))
  {
    case 0:
      char v85 = !v9;
      if (v19 > 2.0) {
        char v85 = 1;
      }
      if ((v85 & 1) == 0)
      {
        int v86 = 1;
        goto LABEL_159;
      }
      break;
    case 1:
      int v87 = *(_DWORD *)(v6 + 92);
      *(_DWORD *)(v6 + 92) = v87 + 1;
      if (v7 || v19 > 3.0) {
        goto LABEL_157;
      }
      if (v87 >= 1)
      {
        *(_DWORD *)(v6 + 88) = 2;
        goto LABEL_144;
      }
      break;
    case 2:
LABEL_144:
      if (v7 || v19 > 3.0) {
        goto LABEL_157;
      }
      char v88 = v36 ^ 1;
      if (v19 <= v39) {
        char v88 = 0;
      }
      if ((v88 & 1) == 0)
      {
        *(_DWORD *)(v6 + 88) = 3;
        goto LABEL_156;
      }
      break;
    case 3:
      if (v7 || v19 > 3.0)
      {
LABEL_157:
        *(void *)(v6 + 88) = 0;
      }
      else
      {
        if (v19 > v56) {
          goto LABEL_158;
        }
        char v89 = v36 ^ 1;
        if (v19 <= v39) {
          char v89 = 0;
        }
        if (v89)
        {
LABEL_158:
          int v86 = 2;
LABEL_159:
          *(_DWORD *)(v6 + 88) = v86;
        }
        else
        {
LABEL_156:
          *(_DWORD *)(v6 + 108) = *(_DWORD *)a2;
        }
      }
      break;
    default:
      uint64_t result = gn_report_assertion_failure("switch/case error NK_Static_Filter.c");
      break;
  }
  if (*(unsigned char *)(v6 + 133)) {
    char v90 = 1;
  }
  else {
    char v90 = v36;
  }
  if ((v90 & 1) != 0 || *(unsigned char *)(v6 + 134) && v19 < 3.0 && v23 < 4.0 && *(_DWORD *)v6 >= 3u)
  {
    LOBYTE(v117.f64[0]) = 0;
    LODWORD(v119) = 0;
    LOBYTE(v115) = 0;
    if (Core_Get_Static_Status((unsigned __int8 *)&v115))
    {
      char v92 = v115 < 0xAu ? 1 : v36;
      if ((v92 & 1) == 0)
      {
        EvLog_nd("NKSF:  Static override", 2, v91, v115, *(unsigned int *)(v6 + 88));
        *(_DWORD *)(v6 + 88) = 3;
        *(_DWORD *)(v6 + 108) = *(_DWORD *)a2;
      }
    }
    uint64_t result = Core_Get_Ped_Status(&v119, &v117);
    if (result)
    {
      uint64_t v94 = v115;
      if (LODWORD(v119) == 2 && v115 > 2u)
      {
LABEL_180:
        if (*(unsigned char *)(v6 + 134))
        {
          *(_WORD *)(v6 + 133) = 1;
          *(double *)(a1 + 27232) = v19;
          *(_DWORD *)(a1 + 20) = 2;
          uint64_t result = (uint64_t)EvLog_nd("NK_Static_Filter:  PED_STOPPED:  Car -> Ped override", 2, v93, v94, LOBYTE(v117.f64[0]));
        }
        *(_DWORD *)(v6 + 88) = 3;
        *(_DWORD *)(v6 + 108) = *(_DWORD *)a2;
        goto LABEL_183;
      }
      switch(LODWORD(v119))
      {
        case 3:
          if (*(unsigned char *)(v6 + 133)) {
            uint64_t result = (uint64_t)EvLog_nd("NK_Static_Filter:  PED_NOT_PED:  Ped -> Car indication", 2, v93, v115, LOBYTE(v117.f64[0]));
          }
          break;
        case 2:
          if (*(unsigned char *)(v6 + 134))
          {
            *(_WORD *)(v6 + 133) = 1;
            *(double *)(a1 + 27232) = v19;
            *(_DWORD *)(a1 + 20) = 2;
            uint64_t result = (uint64_t)EvLog_nd("NK_Static_Filter:  PED_WALKING:  Car -> Ped override", 2, v93, v94, LOBYTE(v117.f64[0]));
          }
          *(_DWORD *)(v6 + 88) = 2;
          break;
        case 1:
          goto LABEL_180;
        default:
          break;
      }
    }
  }
LABEL_183:
  if (!v9 || (int v95 = *(_DWORD *)(v6 + 88), v95 != 3) && (v95 != 2 || !*(unsigned char *)(v6 + 134)))
  {
    *(unsigned char *)(v6 + 132) = 0;
    return result;
  }
  LOWORD(v117.f64[0]) = 0;
  v121[0] = 0;
  uint64_t v120 = 0;
  memset(&v121[4], 0, 32);
  long long v122 = 0u;
  int v123 = 0;
  *(void *)&v121[8] = *(void *)(a2 + 1720);
  *(void *)&v121[16] = 0x4010000000000000;
  HIDWORD(v119) = 2;
  LOBYTE(v119) = 1;
  *(void *)((char *)&v122 + 4) = 0x412E848000000000;
  uint64_t result = Vert_Meas_Update(6u, v114, 0xCu, (unsigned __int8 *)&v119, (double *)__dst, &v117, *(double *)&v121[8]);
  int v96 = *(_DWORD *)(v6 + 220);
  if (v96 && *(unsigned char *)(v6 + 134) && *(_DWORD *)v6)
  {
    v96 += *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v6 + 220) = v96;
  }
  if (!*(unsigned char *)(v5 + 36))
  {
    double v119 = 0.0;
    uint64_t v120 = 0;
    *(void *)long long v121 = 0;
    __asm { FMOV            V0.2D, #4.0 }
    long long v115 = _Q0;
    uint64_t v116 = 0x4010000000000000;
    if (v96 && *(_DWORD *)a2 - v96 <= 30000)
    {
      uint64_t v100 = 27328;
    }
    else
    {
      if (*(int *)(v6 + 160) < 2 || *(_DWORD *)a2 - *(_DWORD *)(v6 + 180) > 30000)
      {
        char v102 = 0;
        uint64_t v101 = (double *)(a2 + 1856);
LABEL_201:
        uint64_t v103 = 0;
        double v104 = *v101;
        *(unsigned char *)(v6 + 132) = v102;
        float64x2_t v105 = *(float64x2_t *)(a2 + 1584);
        float64x2_t v117 = vsubq_f64(v105, *(float64x2_t *)&__dst[696]);
        double v106 = *(double *)(a2 + 1600);
        double v118 = v106 - *(double *)&__dst[712];
        do
        {
          *(double *)&v121[8 * v103] = *((double *)&v117 + v103 + 2) - *(double *)(a3 + 120 + 8 * v103);
          unint64_t v107 = v103 + 3;
          --v103;
        }
        while (v107 > 1);
        uint64_t v108 = 0;
        float64x2_t v117 = v105;
        double v118 = v106;
        do
        {
          *(double *)&v121[8 * v108] = *((double *)&v117 + v108 + 2) - *(double *)(a3 + 120 + 8 * v108);
          unint64_t v109 = v108 + 3;
          --v108;
        }
        while (v109 > 1);
        uint64_t result = NK_Body_Frame_Meas(9u, &v119, (const double *)&v115, (const double (*)[3])v114, v104 * 0.0174532925, 0xCu, (double *)__dst);
        goto LABEL_206;
      }
      uint64_t v100 = 27280;
    }
    uint64_t v101 = (double *)(a1 + v100);
    char v102 = 1;
    goto LABEL_201;
  }
LABEL_206:
  long long v110 = *(_OWORD *)&__dst[672];
  *(_OWORD *)(a1 + 1632) = *(_OWORD *)&__dst[656];
  *(_OWORD *)(a1 + 1648) = v110;
  long long v111 = *(_OWORD *)&__dst[704];
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)&__dst[688];
  *(_OWORD *)(a1 + 1680) = v111;
  long long v112 = *(_OWORD *)&__dst[640];
  *(_OWORD *)(a1 + 1600) = *(_OWORD *)&__dst[624];
  *(_OWORD *)(a1 + 1616) = v112;
  return result;
}

BOOL Is_Eph_Kep_Real(const double *a1)
{
  v14[1] = *(double *)MEMORY[0x263EF8340];
  v14[0] = 0.0;
  if (!R8_EQ(a1 + 24, v14)) {
    return 1;
  }
  double v13 = 0.0;
  if (!R8_EQ(a1 + 29, &v13)) {
    return 1;
  }
  double v12 = 0.0;
  if (!R8_EQ(a1 + 21, &v12)) {
    return 1;
  }
  double v11 = 0.0;
  if (!R8_EQ(a1 + 14, &v11)) {
    return 1;
  }
  double v10 = 0.0;
  if (!R8_EQ(a1 + 13, &v10)) {
    return 1;
  }
  double v9 = 0.0;
  if (!R8_EQ(a1 + 17, &v9)) {
    return 1;
  }
  double v8 = 0.0;
  if (!R8_EQ(a1 + 18, &v8)) {
    return 1;
  }
  double v7 = 0.0;
  if (!R8_EQ(a1 + 19, &v7)) {
    return 1;
  }
  double v6 = 0.0;
  if (!R8_EQ(a1 + 20, &v6)) {
    return 1;
  }
  double v5 = 0.0;
  if (!R8_EQ(a1 + 15, &v5)) {
    return 1;
  }
  double v4 = 0.0;
  if (!R8_EQ(a1 + 16, &v4)) {
    return 1;
  }
  double v3 = 0.0;
  return !R8_EQ(a1 + 7, &v3);
}

double *Comp_GSpeed_Partial(double a1, double a2, double *result, double *a4)
{
  if (fabs(a1) > 0.0001 || fabs(a2) > 0.0001)
  {
    double v10 = 1.0 / sqrt(a1 * a1 + a2 * a2);
    *a4 = v10 * (*result * a1 + result[3] * a2);
    a4[1] = v10 * (result[1] * a1 + result[4] * a2);
    double v9 = v10 * (result[2] * a1);
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    double v9 = 1.0;
  }
  a4[2] = v9;
  return result;
}

void AzEl_RadDeg(uint64_t a1, uint64_t a2)
{
  long double v4 = asin(*(long double *)(a2 + 8));
  *(long double *)(a2 + 24) = v4;
  *(long double *)(a2 + 32) = v4 * 57.2957795;
  *(_DWORD *)a2 = (int)(v4 * 57.2957795 + 0.5) - (v4 * 57.2957795 < -0.5);
  long double v5 = *(double *)(a1 + 8);
  long double v6 = *(double *)(a1 + 16);
  if (fabs(v5) > 0.00001 || fabs(v6) > 0.00001)
  {
    double v8 = atan2(v5, v6);
    double v9 = v8 * 57.2957795;
    if (v8 * 57.2957795 < 0.0) {
      double v9 = v8 * 57.2957795 + 360.0;
    }
    *(double *)(a1 + 24) = v8;
    *(double *)(a1 + 32) = v9;
    int v7 = (int)(v9 + 0.5);
    if (v7 == 360) {
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(_DWORD *)a1 = v7;
}

void Hal02_RouteZxPkt(unsigned __int8 *a1, size_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_16;
  }
  if (!a2)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_16:
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  if (g_LbsOsaTrace_Config >= 4)
  {
    bzero(__str, 0x3C6uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (g_IsSPIEnabled) {
      long double v5 = "SPI";
    }
    else {
      long double v5 = "PCIe";
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: %s:Rcvd,size %u,zx%c%c%c 0x%x 0x%x\n", (unint64_t)v4, "HAL", 73, "Hal02_RouteZxPkt", v5, a2, a1[2], a1[3], a1[4], a1[5], a1[6]);
    gnssOsa_PrintLog(__str, 4, 1, 0);
  }
  unsigned int v6 = a1[2];
  if (v6 <= 0x4C)
  {
    switch(v6)
    {
      case 'B':
        int v9 = a1[3];
        if (v9 == 83) {
          goto LABEL_28;
        }
        if (v9 != 89)
        {
          Hal02_HandleResp(a1, a2);
          return;
        }
        break;
      case 'D':
        int v10 = a1[3];
        if (v10 == 67)
        {
          Hal_GetMEAnalyticsDataResponse(a1, a2);
          return;
        }
        if (word_26A9CA200 != 3599)
        {
          if (g_LbsOsaTrace_Config >= 2)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v11 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx GnssHw\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 87, "Hal02_CheckDebugConfigMsg", 515);
            gnssOsa_PrintLog(__str, 2, 1, 0);
          }
          goto LABEL_39;
        }
        if (v10 != 77 && v10 != 70)
        {
LABEL_39:
          GnssDbgMgr_WriteLog(a2, a1);
          return;
        }
        break;
      case 'I':
        Hal29_HandleProxyResponse(a1, a2);
        return;
      default:
LABEL_28:
        int v7 = (void (*)(size_t, unsigned __int8 *))qword_26A9CA170;
        if (!qword_26A9CA170) {
          return;
        }
        goto LABEL_29;
    }
LABEL_10:
    int v7 = (void (*)(size_t, unsigned __int8 *))g_CbList;
    if (!g_CbList) {
      return;
    }
LABEL_29:
    v7(a2, a1);
    return;
  }
  switch(a1[2])
  {
    case 'O':
      int v8 = a1[3];
      if (v8 == 66 || v8 == 84) {
        goto LABEL_28;
      }
      if (v8 == 80) {
        Hal32_HandlePowerReportData(a1, a2);
      }
      break;
    case 'T':
    case 'V':
    case 'X':
      goto LABEL_10;
    default:
      goto LABEL_28;
  }
}

void Hal02_HandleResp(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
LABEL_12:
    int v4 = 1;
LABEL_13:
    gnssOsa_PrintLog(__str, v4, 1, 0);
    return;
  }
  if (!a2)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
    goto LABEL_12;
  }
  if ((Hal11_HandleEvent(a1[3], a1, a2) & 1) == 0)
  {
    switch(g_HalState)
    {
      case 0:
      case 1:
        return;
      case 2:
      case 3:
        Hal15_HandleRevResp(a1);
        break;
      case 4:
        Hal29_HandleProxyResponse(a1, a2);
        break;
      case 5:
        Hal32_HandlePowerReportRsp(a1);
        break;
      case 6:
      case 7:
        Hal_CoexConfigRespone(a1);
        break;
      default:
        if (g_LbsOsaTrace_Config >= 2)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v5 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx State,%u,MC,%c,MID,%c,MIDE,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 87, "Hal02_HandleResp", 262, g_HalState, a1[2], a1[3], a1[4]);
          int v4 = 2;
          goto LABEL_13;
        }
        break;
    }
  }
}

void Hal02_07ChipRead(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (g_LbsOsaTrace_Config >= 5)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v0 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: transPrep success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 68, "Hal02_07ChipRead");
    gnssOsa_PrintLog(__str, 5, 1, 0);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)gp_Comm + 48))(gp_Comm))
  {
    do
    {
      unsigned int Data = Hal_CommsItfReadData(g_ReadBuffer, 0x3000u);
      if (Data)
      {
        unsigned int v2 = Data;
        if ((Data & 0x80000000) != 0) {
          goto LABEL_14;
        }
        if (Data > 0x3000)
        {
          if (g_LbsOsaTrace_Config)
          {
            bzero(__str, 0x3C6uLL);
            uint64_t v3 = mach_continuous_time();
            snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx NumOfBytesRead,%u,Maxbufsize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal02_07ChipRead", 772, v2, 12288);
            gnssOsa_PrintLog(__str, 1, 1, 0);
          }
          memset_s(g_ReadBuffer, 0x3000uLL, 0, 0x3000uLL);
        }
        else
        {
          Hal02_06ParsezxPacket(g_ReadBuffer, (unsigned __int16)Data);
        }
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(void *)gp_Comm + 48))(gp_Comm) & 1) != 0);
  }
  if (g_LbsOsaTrace_Config)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v4 = mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal02_07ChipRead", 1281);
    gnssOsa_PrintLog(__str, 1, 1, 0);
LABEL_14:
    if (g_LbsOsaTrace_Config >= 4)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v5 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RdrThrd exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal02_07ChipRead");
      gnssOsa_PrintLog(__str, 4, 1, 0);
    }
  }
}

void Hal02_06ParsezxPacket(unsigned __int8 *a1, size_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_9;
  }
  if (!a2)
  {
    if (!g_LbsOsaTrace_Config) {
      return;
    }
    bzero(__str, 0x3C6uLL);
    mach_continuous_time();
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len\n");
LABEL_9:
    gnssOsa_PrintLog(__str, 1, 1, 0);
    return;
  }
  uint64_t v3 = a1;
  if (_MergedGlobals_4)
  {
    memcpy_s("Hal02_06ParsezxPacket", 280, &g_ProccessBuff, 0x4000u, &g_PrevBuff, (unsigned __int16)_MergedGlobals_4);
    memcpy_s("Hal02_06ParsezxPacket", 281, (char *)&g_ProccessBuff + (unsigned __int16)_MergedGlobals_4, 0x4000 - (unsigned __int16)_MergedGlobals_4, v3, a2);
    int v4 = (unsigned __int16)_MergedGlobals_4;
    uint64_t v3 = (unsigned __int8 *)&g_ProccessBuff;
  }
  else
  {
    int v4 = 0;
  }
  int v5 = 0;
  int v6 = v4 + a2;
  _MergedGlobals_4 = 0;
  uint64_t v7 = &qword_26A9CA000;
  int v8 = "HAL";
  int v9 = &unk_26AA36000;
  while (1)
  {
    size_t v10 = (unsigned __int16)v6;
    uint64_t v11 = &v3[(unsigned __int16)v5];
    if ((unsigned __int16)v6 <= 7u)
    {
      int v30 = 300;
      goto LABEL_48;
    }
    if (*v11 != 122 || v11[1] != 120)
    {
      ++v5;
      --v6;
      int v17 = v9[119] + 1;
      v9[119] = v17;
      HIDWORD(v18) = 652835029 * v17;
      LODWORD(v18) = 652835029 * v17;
      if ((v18 >> 3) <= 0x418937 && g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v20 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx Err,%u\n", (unint64_t)(*((double *)v7 + 41) * (double)v20), v8, 87, "Hal02_06ParsezxPacket", 770, v9[119]);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      goto LABEL_45;
    }
    int v12 = v11[5];
    int v13 = v11[6];
    if (v11[7] != (v11[3] + v11[2] + v11[4] + v12 + v13))
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        int v21 = (v11[3] + v11[2] + v11[4] + v12 + v13);
        bzero(__str, 0x3C6uLL);
        double v22 = *((double *)v7 + 41) * (double)mach_continuous_time();
        int v23 = v11[7];
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx rcvd,0x%02x,computed,0x%02x,Pktloss,%u\n", (unint64_t)v22, v8, 87, "Hal02_06ParsezxPacket", 781, v23, v21, ++dword_26AA361D8);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      ++v5;
      --v6;
      goto LABEL_45;
    }
    double v14 = v8;
    unsigned int v15 = v12 | (v13 << 8);
    if (v15 >= 0xFF8)
    {
      if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        double v16 = *((double *)v7 + 41) * (double)mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx len,%u,Pktloss,%u\n", (unint64_t)v16, v14, 87, "Hal02_06ParsezxPacket", 783, v15, ++dword_26AA361D8);
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      ++v5;
      --v6;
      int v8 = v14;
      goto LABEL_41;
    }
    unsigned int v24 = v15 + 9;
    size_t v10 = (unsigned __int16)v6;
    if ((unsigned __int16)v6 < (unsigned __int16)(v15 + 9)) {
      break;
    }
    if (v3[(unsigned __int16)v5 + 8 + (unint64_t)v15] == 10)
    {
      uint64_t v7 = &qword_26A9CA000;
      int v8 = v14;
      int v9 = &unk_26AA36000;
      if (dword_26AA361DC)
      {
        if (dword_26AA361DC >= 0x41 && g_LbsOsaTrace_Config >= 5)
        {
          bzero(__str, 0x3C6uLL);
          uint64_t v25 = mach_continuous_time();
          snprintf(__str, 0x3C5uLL, "%10u %s%c %s: zx pkt recd ,prev invalid data,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), v8, 68, "Hal02_06ParsezxPacket", dword_26AA361DC);
          gnssOsa_PrintLog(__str, 5, 1, 0);
        }
        dword_26AA361DC = 0;
      }
      if (g_RouteZxData)
      {
        g_RouteZxData(&v3[(unsigned __int16)v5], v24);
      }
      else if (g_LbsOsaTrace_Config >= 2)
      {
        bzero(__str, 0x3C6uLL);
        uint64_t v29 = mach_continuous_time();
        snprintf(__str, 0x3C5uLL, "%10u %s%c %s: RouteZxData is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), v8, 87, "Hal02_06ParsezxPacket");
        gnssOsa_PrintLog(__str, 2, 1, 0);
      }
      v6 -= v24;
      v5 += v24;
      goto LABEL_45;
    }
    int v8 = v14;
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v26 = mach_continuous_time();
      double v27 = &v3[(unsigned __int16)v5];
      int v28 = v27[2];
      LODWORD(v27) = v27[3];
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,Pktloss,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), v14, 87, "Hal02_06ParsezxPacket", 782, v28, v27, ++dword_26AA361D8);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    ++v5;
    --v6;
    uint64_t v7 = &qword_26A9CA000;
LABEL_41:
    int v9 = (_DWORD *)&unk_26AA36000;
LABEL_45:
    if (!(_WORD)v6) {
      return;
    }
  }
  int v30 = 350;
LABEL_48:
  memcpy_s("Hal02_06ParsezxPacket", v30, &g_PrevBuff, 0x1000u, &v3[(unsigned __int16)v5], v10);
  _MergedGlobals_4 = v6;
}

void Hal02_AsyncReadCb(unsigned __int8 *a1, size_t a2)
{
  int v2 = a2;
  uint64_t v3 = a1;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2 > 0x3000)
  {
    if (g_LbsOsaTrace_Config >= 2)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v4 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: #%04hx v_RxBufferSize %u,processing %u bytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal02_AsyncReadCb", 772, v2, 12288);
      gnssOsa_PrintLog(__str, 2, 1, 0);
    }
    a1 = v3;
    a2 = 12288;
  }
  else
  {
    a2 = (unsigned __int16)a2;
  }
  Hal02_06ParsezxPacket(a1, a2);
  if (v3) {
    free(v3);
  }
}

void Hal02_SPI_ReadCb(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a2 > 0x3000)
  {
    if (g_LbsOsaTrace_Config)
    {
      bzero(__str, 0x3C6uLL);
      uint64_t v3 = mach_continuous_time();
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: v_RxBufferSize %u - out of range error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal02_SPI_ReadCb", a2);
      gnssOsa_PrintLog(__str, 1, 1, 0);
    }
  }
  else
  {
    Hal02_06ParsezxPacket(a1, (unsigned __int16)a2);
  }
}

uint64_t Hal02_DeInitParser(void)
{
  uint64_t result = memset_s(&g_PrevBuff, 0x1000uLL, 0, 0x1000uLL);
  _MergedGlobals_4 = 0;
  g_RouteZxunsigned int Data = (uint64_t (*)(unsigned __int8 *, unsigned __int16))Hal02_RouteZxPkt;
  return result;
}

uint64_t GN_AGLON_Set_Eph_El(char *a1)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGLON_Set_Eph_El");
  if (result)
  {
    int v3 = *a1;
    if (g_Logging_Cfg < 5) {
      EvLog_d("GN_AGLON_Set_Eph_El: ", v3);
    }
    else {
      EvLog_v("GN_AGLON_Set_Eph_El: %2d %2d %2d %4d %d %2d  %2d %d %d %d  %9d %9d %9d  %8d %8d %8d  %3d %3d %3d  %3d %8d %5d  %d", v3, a1[1], a1[2], *((unsigned __int16 *)a1 + 2), a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7), *((_DWORD *)a1 + 8), a1[36], a1[37],
    }
        a1[38],
        a1[39],
        *((_DWORD *)a1 + 10),
        *((__int16 *)a1 + 22),
        a1[46]);
    char v4 = *a1;
    if ((*a1 - 25) <= 0xE7u)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloN = %d <%d or >%d, Out of range!");
      return 0;
    }
    unsigned int v5 = a1[2];
    if (v5 - 96 <= 0xFFFFFFA0)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloTb = %d <1 or >95, Out of range!");
      return 0;
    }
    unsigned int v6 = *((unsigned __int16 *)a1 + 2);
    if (v6 >= 0x5B6)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloNT = %d >%d, Out of range!");
      return 0;
    }
    unsigned int v7 = a1[6];
    if (v7 >= 2)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloLuint64_t n = %d >1, Out of range!");
      return 0;
    }
    unsigned int v8 = a1[7];
    if (v8 >= 0x10)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloFT = %d >15, Out of range!");
      return 0;
    }
    unsigned int v9 = a1[8];
    if (v9 >= 0x20)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloEuint64_t n = %d >31, Out of range!");
      return 0;
    }
    unsigned int v10 = a1[9];
    if (v10 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloP1 = %d <0 or >3, Out of range!");
      return 0;
    }
    unsigned int v11 = a1[11];
    if (v11 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloM = %d <0 or >3, Out of range!");
      return 0;
    }
    int v12 = *((_DWORD *)a1 + 3);
    if ((v12 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloX = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    int v13 = *((_DWORD *)a1 + 4);
    if ((v13 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloY = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    int v14 = *((_DWORD *)a1 + 5);
    if ((v14 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZ = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    int v15 = *((_DWORD *)a1 + 6);
    if ((v15 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloXdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v16 = *((_DWORD *)a1 + 7);
    if ((v16 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloYdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v17 = *((_DWORD *)a1 + 8);
    if ((v17 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    char v18 = a1[36];
    if ((v18 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloXdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    char v19 = a1[37];
    if ((v19 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloYdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    char v20 = a1[38];
    if ((v20 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    char v21 = a1[39];
    if ((v21 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloDeltaTau = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    int v22 = *((_DWORD *)a1 + 10);
    if ((v22 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloDeltaTau = %d <-2^21 or >=2^21, Out of range!");
      return 0;
    }
    __int16 v23 = *((_WORD *)a1 + 22);
    if ((unsigned __int16)((unsigned __int16)(v23 - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloGamma = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    int v24 = a1[1];
    if ((a1[1] - 7) < 0xF2u) {
      int v24 = 2139062143;
    }
    int v28 = v24;
    if (a1[46]) {
      int v25 = 5;
    }
    else {
      int v25 = 3;
    }
    int v26 = 0;
    int v27 = v25;
    char v29 = v4;
    char v30 = v5;
    __int16 v32 = v6;
    BOOL v35 = v7 != 0;
    char v37 = v8;
    char v38 = v9;
    char v39 = v10;
    char v40 = a1[10];
    char v41 = v11;
    int v42 = v12;
    int v43 = v13;
    int v44 = v14;
    int v45 = v15;
    int v46 = v16;
    int v47 = v17;
    char v48 = v18;
    char v49 = v19;
    char v50 = v20;
    char v51 = v21;
    int v52 = v22;
    __int16 v53 = v23;
    char v34 = 0;
    char v36 = 0;
    __int16 v33 = v7 != 0;
    __int16 v31 = 1500 * (v5 & 3) + 10000 * (v5 >> 2);
    memset(v58, 0, 62);
    GLON_EphInt2Bin((uint64_t)&v26, (uint64_t)v58);
    uint64_t v54 = 0;
    *(_OWORD *)&v57[4] = 0u;
    BYTE4(v54) = BYTE8(v58[0]);
    long long v55 = *(_OWORD *)((char *)v58 + 12);
    long long v56 = *(_OWORD *)((char *)&v58[1] + 12);
    *(_OWORD *)int v57 = *(_OWORD *)((char *)&v58[2] + 12);
    v57[16] = v27 == 5;
    return GN_AGLON_Set_Eph(*a1, (uint64_t)&v54);
  }
  return result;
}

double BDS_AlmInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 11) << 12;
  uint64_t v2 = *(void *)(a1 + 12);
  v3.i64[0] = v2;
  v3.i64[1] = HIDWORD(v2);
  float64x2_t v4 = vmulq_f64(vcvtq_f64_u64(v3), (float64x2_t)xmmword_263D82520);
  uint64_t v5 = *(void *)(a1 + 20);
  v3.i64[0] = (int)v5;
  v3.i64[1] = SHIDWORD(v5);
  *(float64x2_t *)(a2 + 16) = v4;
  *(float64x2_t *)(a2 + 32) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)vdupq_n_s64(0x3E9921FB54442D28uLL));
  v4.f64[0] = *(float64_t *)(a1 + 28);
  v3.i64[0] = SLODWORD(v4.f64[0]);
  v3.i64[1] = SHIDWORD(v4.f64[0]);
  *(float64x2_t *)(a2 + 48) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)xmmword_263D82530);
  v4.f64[0] = (double)*(__int16 *)(a1 + 36) * 0.00000599211245;
  double v6 = (double)*(__int16 *)(a1 + 38) * 0.000000953674316;
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 8);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a1 + 42);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a1 + 10);
  *(float64_t *)(a2 + 64) = v4.f64[0];
  *(double *)(a2 + 72) = v6;
  double result = (double)*(__int16 *)(a1 + 40) * 3.63797881e-12;
  *(double *)(a2 + 80) = result;
  return result;
}

double XofGpsQzssEphemeris::XofGpsQzssEphemeris(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 7) = 0;
  *(void *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)a1 = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 67);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 99);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 134);
  *(_WORD *)(a1 + 6) = *(_WORD *)(a2 + 166);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 204);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 238);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 267);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 334);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 366);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 398);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 459);
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 491);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 526);
  int v3 = *(_DWORD *)(a2 + 604);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 564);
  *(_DWORD *)(a1 + 32) = v3;
  int v4 = *(_DWORD *)(a2 + 684);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 644);
  *(_DWORD *)(a1 + 40) = v4;
  int v5 = *(_DWORD *)(a2 + 764);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 724);
  *(_DWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 804);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 838);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 870);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 902);
  *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 934);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 966);
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 998);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 1030);
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 1062);
  return result;
}

BOOL XofGpsQzssEphemerisCodec::Decode(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a1, a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 32), a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 64), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 96), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 128), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 160), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 192), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 232), a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 264), a2, a3) == 1
      && XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 296), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 328), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 360), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 392), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 424), a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 456), a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 488), a2, a3) == 1
      && XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 520), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 552), a2, a3) == 1
      && XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 592), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 632), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 672), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 712), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 752), a2, a3) == 1
      && XofIntegralType<int>::DecodeFromHexData((int *)(a1 + 792), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 832), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 864), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 896), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 928), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 960), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 992), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1024), a2, a3) == 1
      && XofIntegralType<short>::DecodeFromHexData((__int16 *)(a1 + 1056), a2, a3) == 1;
}

BOOL XofGlonassChannelMapCodec::Decode(uint64_t a1, void *a2, _DWORD *a3)
{
  return XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a1, a2, a3) == 1
      && XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 32), a2, a3) == 1;
}

double XofBeidouEphemeris::XofBeidouEphemeris(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 14) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 119) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 132) = 0;
  *(unsigned char *)a1 = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 35);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 70);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 139);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 203);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 235);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 267);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 299);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 331);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 363);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 398);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 430);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 459);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 491);
  int v3 = *(_DWORD *)(a2 + 636);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 596);
  *(_DWORD *)(a1 + 28) = v3;
  int v4 = *(_DWORD *)(a2 + 716);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 676);
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v5 = *(void *)(a2 + 824);
  *(void *)(a1 + 40) = *(void *)(a2 + 768);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 936);
  *(void *)(a1 + 56) = *(void *)(a2 + 880);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 992);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 1036);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 1070);
  *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 1102);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 1134);
  *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 1166);
  LODWORD(v6) = *(_DWORD *)(a2 + 1244);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 1204);
  *(_DWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 1324);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 1284);
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 1404);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 1364);
  *(_DWORD *)(a1 + 112) = v6;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a2 + 1438);
  *(_WORD *)(a1 + 118) = *(_WORD *)(a2 + 1470);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 1502);
  *(_WORD *)(a1 + 122) = *(_WORD *)(a2 + 1534);
  *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 1566);
  *(unsigned char *)(a1 + 126) = *(unsigned char *)(a2 + 523);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 1598);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 1627);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 1659);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 1691);
  *(unsigned char *)(a1 + 133) = *(unsigned char *)(a2 + 1723);
  return result;
}

BOOL XofGenericCodec::Decode<0ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a1, a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 32), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 64), a2, a3) != 1
    || XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 96), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 136), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 168), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<6ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>(a1, a2, a3);
}

double XofGalileoEphemeris::XofGalileoEphemeris(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)a1 = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 67);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 195);
  *(_WORD *)(a1 + 6) = *(_WORD *)(a2 + 230);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 262);
  int v3 = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 371);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 403);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 438);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 470);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 502);
  int v4 = *(_DWORD *)(a2 + 580);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 540);
  *(_DWORD *)(a1 + 32) = v4;
  int v5 = *(_DWORD *)(a2 + 660);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 620);
  *(_DWORD *)(a1 + 40) = v5;
  int v6 = *(_DWORD *)(a2 + 740);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 700);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 780);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 814);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 846);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 878);
  *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 910);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 942);
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 974);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 1006);
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 1038);
  return result;
}

BOOL XofGenericCodec::Decode<0ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a1, a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 32), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 64), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 96), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 128), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 160), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<6ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a1, a2, a3);
}

double XofNavicEphemeris::XofNavicEphemeris(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 18) = 0;
  *(void *)(a1 + 10) = 0;
  *(void *)(a1 + 2) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(unsigned char *)a1 = *(unsigned char *)(a2 + 3);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 38);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 70);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 99);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 131);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 195);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 227);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 331);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 372);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 406);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 435);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 470);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 502);
  int v3 = *(_DWORD *)(a2 + 580);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 540);
  *(_DWORD *)(a1 + 28) = v3;
  int v4 = *(_DWORD *)(a2 + 660);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 620);
  *(_DWORD *)(a1 + 36) = v4;
  int v5 = *(_DWORD *)(a2 + 740);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 700);
  *(_DWORD *)(a1 + 44) = v5;
  int v6 = *(_DWORD *)(a2 + 820);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 780);
  *(_DWORD *)(a1 + 52) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 854);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 886);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 982);
  *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 1014);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 918);
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 950);
  return result;
}

BOOL XofNavicEphemerisCodec::Decode(uint64_t a1, void *a2, _DWORD *a3)
{
  if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a1, a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 32), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 64), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 96), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 128), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 160), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 192), a2, a3) != 1
    || XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)(a1 + 224), a2, a3) != 1
    || XofIntegralType<unsigned int>::DecodeFromHexData((unsigned int *)(a1 + 256), a2, a3) != 1
    || XofIntegralType<unsigned short>::DecodeFromHexData((unsigned __int16 *)(a1 + 296), a2, a3) != 1
    || XofIntegralType<signed char>::DecodeFromHexData((char *)(a1 + 328), a2, a3) != 1)
  {
    return 0;
  }

  return XofGenericCodec::Decode<11ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>(a1, a2, a3);
}

uint64_t XofBrdcstEph::Decode(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  int v3 = v2;
  uint64_t v5 = v4;
  unsigned int v7 = v6;
  uint64_t v8 = v1;
  v23[136] = *MEMORY[0x263EF8340];
  bzero(v23, 0x440uLL);
  XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec((XofGpsQzssEphemerisCodec *)v23);
  int v9 = XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofGpsQzssEphemeris>,XofGpsQzssEphemerisCodec>(v8, v7, v3, v5, (uint64_t)v23, 0, (uint64_t *)v8);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v23);
  if (v9 != 1) {
    return 5;
  }
  bzero(v22, 0x250uLL);
  XofSbasEphemerisCodec::XofSbasEphemerisCodec((XofSbasEphemerisCodec *)v22);
  int v10 = XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofSbasEphemeris>,XofSbasEphemerisCodec>(v8, v7, v3, v5, (uint64_t)v22, 1u, (uint64_t **)(v8 + 120));
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>>::~__tuple_impl((uint64_t)v22);
  if (v10 != 1) {
    return 5;
  }
  bzero(v21, 0x440uLL);
  XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec((XofGpsQzssEphemerisCodec *)v21);
  int v11 = XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofGpsQzssEphemeris>,XofGpsQzssEphemerisCodec>(v8, v7, v3, v5, (uint64_t)v21, 2u, (uint64_t *)(v8 + 72));
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v21);
  if (v11 != 1) {
    return 5;
  }
  bzero(v20, 0x428uLL);
  XofGalileoEphemerisCodec::XofGalileoEphemerisCodec((XofGalileoEphemerisCodec *)v20);
  int v12 = XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofGalileoEphemeris>,XofGalileoEphemerisCodec>(v8, v7, v3, v5, (uint64_t)v20, 3u, (uint64_t *)(v8 + 48));
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v20);
  if (v12 != 1) {
    return 5;
  }
  bzero(v19, 0x2D8uLL);
  XofGlonassBrdcastEphemerisCodec::XofGlonassBrdcastEphemerisCodec((XofGlonassBrdcastEphemerisCodec *)v19);
  int v13 = XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofGlonassBrdcastEphemeris>,XofGlonassBrdcastEphemerisCodec>(v8, v7, v3, v5, (uint64_t)v19, 4u, (uint64_t **)(v8 + 24));
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>>::~__tuple_impl((uint64_t)v19);
  if (v13 != 1) {
    return 5;
  }
  bzero(v18, 0x700uLL);
  XofBeidouEphemerisCodec::XofBeidouEphemerisCodec((XofBeidouEphemerisCodec *)v18);
  int v14 = XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofBeidouEphemeris>,XofBeidouEphemerisCodec>(v8, v7, v3, v5, (uint64_t)v18, 5u, (uint64_t *)(v8 + 96));
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul,32ul,33ul,34ul,35ul,36ul,37ul,38ul,39ul,40ul,41ul,42ul,43ul,44ul,45ul,46ul,47ul,48ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<long long>,XofIntegralType<unsigned long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<long long>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>>::~__tuple_impl((uint64_t)v18);
  if (v14 != 1) {
    return 5;
  }
  bzero(v17, 0x410uLL);
  XofNavicEphemerisCodec::XofNavicEphemerisCodec((XofNavicEphemerisCodec *)v17);
  int v15 = XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofNavicEphemeris>,XofNavicEphemerisCodec>(v8, v7, v3, v5, (uint64_t)v17, 6u, (uint64_t *)(v8 + 144));
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)v17);
  if (v15 == 1) {
    return 1;
  }
  else {
    return 5;
  }
}

void sub_263CA51CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned int>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofGpsQzssEphemeris>,XofGpsQzssEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4 + 48 * (int)a6;
  int v9 = *(unsigned __int8 *)(v7 + 18);
  uint64_t v8 = (unsigned __int8 *)(v7 + 18);
  if (!v9) {
    return 1;
  }
  int v15 = 0;
  uint64_t v32 = (int)a6;
  int v16 = a7 + 1;
  while (1)
  {
    bzero(__str, 0x440uLL);
    XofGpsQzssEphemerisCodec::XofGpsQzssEphemerisCodec((XofGpsQzssEphemerisCodec *)__str);
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,std::tuple<XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>(a5, (uint64_t)__str);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul,31ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned short>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned short>,XofIntegralType<signed char>,XofIntegralType<signed char>,XofIntegralType<unsigned short>,XofIntegralType<unsigned int>,XofIntegralType<unsigned int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>>::~__tuple_impl((uint64_t)__str);
    if (!XofGpsQzssEphemerisCodec::Decode(a5, a2, a3))
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 5;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v24 = mach_continuous_time();
      if (a6 > 7) {
        int v25 = "   ";
      }
      else {
        int v25 = off_2655E6F78[v32];
      }
      double v28 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v25);
      if ((SBYTE7(v34) & 0x80u) == 0) {
        char v29 = __p;
      }
      else {
        char v29 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Broadcast Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v28 * (double)v24), "GNC", 87, "DecodeSVs", (const char *)v29, v15 + 1);
      if (SBYTE7(v34) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_36;
    }
    unsigned int v17 = *(unsigned __int8 *)(a5 + 3);
    uint64_t v18 = *v16;
    if (*v16)
    {
      char v19 = v16;
      do
      {
        unsigned int v20 = *(unsigned __int8 *)(v18 + 28);
        BOOL v21 = v20 >= v17;
        if (v20 >= v17) {
          int v22 = (uint64_t *)v18;
        }
        else {
          int v22 = (uint64_t *)(v18 + 8);
        }
        if (v21) {
          char v19 = (void *)v18;
        }
        uint64_t v18 = *v22;
      }
      while (*v22);
      if (v19 != v16 && v17 >= *((unsigned __int8 *)v19 + 28)) {
        break;
      }
    }
    XofGpsQzssEphemeris::XofGpsQzssEphemeris((uint64_t)__p, a5);
    __str[0] = v17;
    long long v41 = v35;
    long long v42 = v36;
    uint64_t v43 = v37;
    long long v39 = *(_OWORD *)__p;
    long long v40 = v34;
    std::__tree<std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssEphemeris>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssEphemeris>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char,XofGpsQzssEphemeris>>(a7, v17, (uint64_t)__str);
    if (++v15 >= *v8) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config < 2) {
    return 5;
  }
  bzero(__str, 0x3C6uLL);
  uint64_t v26 = mach_continuous_time();
  if (a6 > 7) {
    int v27 = "   ";
  }
  else {
    int v27 = off_2655E6F78[v32];
  }
  double v30 = *(double *)&g_MacClockTicksToMsRelation;
  std::string::basic_string[abi:ne180100]<0>(__p, v27);
  if ((SBYTE7(v34) & 0x80u) == 0) {
    __int16 v31 = __p;
  }
  else {
    __int16 v31 = (void **)__p[0];
  }
  snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Ephemeris data: Satellite Id = [ %s ]\n", (unint64_t)(v30 * (double)v26), "GNC", 87, "DecodeSVs", (const char *)v31);
  if (SBYTE7(v34) < 0) {
    operator delete(__p[0]);
  }
LABEL_36:
  gnssOsa_PrintLog(__str, 2, 1, 0);
  return 5;
}

uint64_t XofBrdcstEph::DecodeSVs<std::map<unsigned char,XofSbasEphemeris>,XofSbasEphemerisCodec>(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t **a7)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  long long v40 = (unsigned char *)(a4 + 48 * (int)a6 + 18);
  if (!*v40) {
    return 1;
  }
  int v8 = 0;
  uint64_t v35 = (int)a6;
  uint64_t v72 = a5 + 8;
  long long v55 = a7 + 1;
  uint64_t v71 = a5 + 40;
  char v51 = (unsigned __int16 *)(a5 + 64);
  int v52 = (unsigned __int8 *)(a5 + 32);
  uint64_t v70 = a5 + 72;
  long long v41 = (__int16 *)(a5 + 96);
  uint64_t v68 = a5 + 136;
  uint64_t v69 = a5 + 104;
  char v38 = (unsigned __int8 *)(a5 + 160);
  long long v39 = (char *)(a5 + 128);
  BOOL v77 = (int *)(a5 + 192);
  uint64_t v66 = a5 + 208;
  uint64_t v67 = a5 + 168;
  int v76 = (int *)(a5 + 232);
  int v75 = (int *)(a5 + 272);
  uint64_t v64 = a5 + 288;
  uint64_t v65 = a5 + 248;
  double v74 = (int *)(a5 + 312);
  uint64_t v62 = a5 + 368;
  uint64_t v63 = a5 + 328;
  __int16 v53 = (_OWORD *)(a5 + 392);
  uint64_t v54 = (_OWORD *)(a5 + 352);
  uint64_t v60 = a5 + 440;
  uint64_t v61 = a5 + 408;
  uint64_t v58 = a5 + 504;
  uint64_t v59 = a5 + 472;
  uint64_t v56 = a5 + 568;
  uint64_t v57 = a5 + 536;
  while (1)
  {
    int v73 = v8;
    bzero(__str, 0x250uLL);
    XofSbasEphemerisCodec::XofSbasEphemerisCodec((XofSbasEphemerisCodec *)__str);
    *(_DWORD *)a5 = *(_DWORD *)__str;
    if (*(char *)(a5 + 31) < 0) {
      operator delete(*(void **)v72);
    }
    *(_OWORD *)uint64_t v72 = v83;
    *(void *)(v72 + 16) = v84;
    HIBYTE(v84) = 0;
    LOBYTE(v83) = 0;
    *(_DWORD *)(a5 + 32) = v85;
    if (*(char *)(a5 + 63) < 0) {
      operator delete(*(void **)v71);
    }
    *(_OWORD *)uint64_t v71 = v86;
    *(void *)(v71 + 16) = v87;
    HIBYTE(v87) = 0;
    LOBYTE(v86) = 0;
    *(void *)(a5 + 64) = v88;
    if (*(char *)(a5 + 95) < 0) {
      operator delete(*(void **)v70);
    }
    *(_OWORD *)uint64_t v70 = v89;
    *(void *)(v70 + 16) = v90;
    HIBYTE(v90) = 0;
    LOBYTE(v89) = 0;
    *(void *)(a5 + 96) = v91;
    if (*(char *)(a5 + 127) < 0) {
      operator delete(*(void **)v69);
    }
    *(_OWORD *)uint64_t v69 = v92;
    *(void *)(v69 + 16) = v93;
    HIBYTE(v93) = 0;
    LOBYTE(v92) = 0;
    *(_DWORD *)(a5 + 128) = v94;
    if (*(char *)(a5 + 159) < 0) {
      operator delete(*(void **)v68);
    }
    *(_OWORD *)uint64_t v68 = v95;
    *(void *)(v68 + 16) = v96;
    HIBYTE(v96) = 0;
    LOBYTE(v95) = 0;
    *(_DWORD *)(a5 + 160) = v97;
    if (*(char *)(a5 + 191) < 0) {
      operator delete(*(void **)v67);
    }
    *(_OWORD *)uint64_t v67 = v98;
    *(void *)(v67 + 16) = v99;
    HIBYTE(v99) = 0;
    LOBYTE(v98) = 0;
    *(_OWORD *)BOOL v77 = v100;
    if (*(char *)(a5 + 231) < 0) {
      operator delete(*(void **)v66);
    }
    *(_OWORD *)uint64_t v66 = v101;
    *(void *)(v66 + 16) = v102;
    HIBYTE(v102) = 0;
    LOBYTE(v101) = 0;
    *(_OWORD *)int v76 = v103;
    if (*(char *)(a5 + 271) < 0) {
      operator delete(*(void **)v65);
    }
    *(_OWORD *)uint64_t v65 = v104;
    *(void *)(v65 + 16) = v105;
    HIBYTE(v105) = 0;
    LOBYTE(v104) = 0;
    *(_OWORD *)int v75 = v106;
    if (*(char *)(a5 + 311) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)uint64_t v64 = v107;
    *(void *)(v64 + 16) = v108;
    HIBYTE(v108) = 0;
    LOBYTE(v107) = 0;
    *(_OWORD *)double v74 = v109;
    if (*(char *)(a5 + 351) < 0) {
      operator delete(*(void **)v63);
    }
    *(_OWORD *)uint64_t v63 = v110;
    *(void *)(v63 + 16) = v111;
    HIBYTE(v111) = 0;
    LOBYTE(v110) = 0;
    _OWORD *v54 = v112;
    if (*(char *)(a5 + 391) < 0) {
      operator delete(*(void **)v62);
    }
    *(_OWORD *)uint64_t v62 = v113;
    *(void *)(v62 + 16) = v114;
    HIBYTE(v114) = 0;
    LOBYTE(v113) = 0;
    *__int16 v53 = v115;
    if (*(char *)(a5 + 431) < 0) {
      operator delete(*(void **)v61);
    }
    *(_OWORD *)uint64_t v61 = v116;
    *(void *)(v61 + 16) = v117;
    HIBYTE(v117) = 0;
    LOBYTE(v116) = 0;
    *(void *)(a5 + 432) = v118;
    if (*(char *)(a5 + 463) < 0) {
      operator delete(*(void **)v60);
    }
    *(_OWORD *)uint64_t v60 = v119;
    *(void *)(v60 + 16) = v120;
    HIBYTE(v120) = 0;
    LOBYTE(v119) = 0;
    *(void *)(a5 + 464) = v121;
    if (*(char *)(a5 + 495) < 0) {
      operator delete(*(void **)v59);
    }
    *(_OWORD *)uint64_t v59 = v122;
    *(void *)(v59 + 16) = v123;
    HIBYTE(v123) = 0;
    LOBYTE(v122) = 0;
    *(void *)(a5 + 496) = v124;
    if (*(char *)(a5 + 527) < 0) {
      operator delete(*(void **)v58);
    }
    *(_OWORD *)uint64_t v58 = v125;
    *(void *)(v58 + 16) = v126;
    HIBYTE(v126) = 0;
    LOBYTE(v125) = 0;
    *(_DWORD *)(a5 + 528) = v127;
    if (*(char *)(a5 + 559) < 0) {
      operator delete(*(void **)v57);
    }
    *(_OWORD *)uint64_t v57 = v128;
    *(void *)(v57 + 16) = v129;
    HIBYTE(v129) = 0;
    LOBYTE(v128) = 0;
    *(_DWORD *)(a5 + 560) = v130;
    if (*(char *)(a5 + 591) < 0) {
      operator delete(*(void **)v56);
    }
    *(_OWORD *)uint64_t v56 = v131;
    *(void *)(v56 + 16) = v132;
    HIBYTE(v132) = 0;
    LOBYTE(v131) = 0;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>>::~__tuple_impl((uint64_t)__str);
    if (XofIntegralType<unsigned char>::DecodeFromHexData((unsigned __int8 *)a5, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v52, a2, a3) != 1
      || XofIntegralType<unsigned short>::DecodeFromHexData(v51, a2, a3) != 1
      || XofIntegralType<short>::DecodeFromHexData(v41, a2, a3) != 1
      || XofIntegralType<signed char>::DecodeFromHexData(v39, a2, a3) != 1
      || XofIntegralType<unsigned char>::DecodeFromHexData(v38, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v77, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v76, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v75, a2, a3) != 1
      || XofIntegralType<int>::DecodeFromHexData(v74, a2, a3) != 1
      || !XofGenericCodec::Decode<10ul,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>,XofIntegralType<unsigned short>,XofIntegralType<short>,XofIntegralType<signed char>,XofIntegralType<unsigned char>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<int>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<short>,XofIntegralType<unsigned char>,XofIntegralType<unsigned char>>(a5, a2, a3))
    {
      if (g_LbsOsaTrace_Config < 2) {
        return 5;
      }
      bzero(__str, 0x3C6uLL);
      uint64_t v27 = mach_continuous_time();
      if (a6 > 7) {
        double v28 = "   ";
      }
      else {
        double v28 = off_2655E6F78[v35];
      }
      double v29 = *(double *)&g_MacClockTicksToMsRelation;
      std::string::basic_string[abi:ne180100]<0>(__p, v28);
      if (v81 >= 0) {
        double v30 = __p;
      }
      else {
        double v30 = (void **)__p[0];
      }
      snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Broadcast Ephemeris decode failure, constellation Id = [ %s ], sequence Id = [ %d ]\n", (unint64_t)(v29 * (double)v27), "GNC", 87, "DecodeSVs", (const char *)v30, v73 + 1);
      if (v81 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_78;
    }
    unsigned int v9 = *(unsigned __int8 *)(a5 + 3);
    int v10 = v55;
    int v11 = *v55;
    if (*v55)
    {
      int v12 = v55;
      int v13 = *v55;
      do
      {
        unsigned int v14 = *((unsigned __int8 *)v13 + 28);
        BOOL v15 = v14 >= v9;
        if (v14 >= v9) {
          int v16 = (uint64_t **)v13;
        }
        else {
          int v16 = (uint64_t **)(v13 + 1);
        }
        if (v15) {
          int v12 = (uint64_t **)v13;
        }
        int v13 = *v16;
      }
      while (*v16);
      int v10 = v55;
      if (v12 != v55 && v9 >= *((unsigned __int8 *)v12 + 28)) {
        break;
      }
    }
    char v17 = *(unsigned char *)(a5 + 35);
    __int16 v18 = *(_WORD *)(a5 + 70);
    char v19 = *(unsigned char *)(a5 + 131);
    char v20 = *(unsigned char *)(a5 + 163);
    int v21 = *(_DWORD *)(a5 + 204);
    int v49 = *(_DWORD *)(a5 + 244);
    __int16 v50 = *(_WORD *)(a5 + 102);
    int v47 = *(_DWORD *)(a5 + 324);
    int v48 = *(_DWORD *)(a5 + 284);
    int v45 = *(_DWORD *)(a5 + 404);
    int v46 = *(_DWORD *)(a5 + 364);
    __int16 v43 = *(_WORD *)(a5 + 470);
    __int16 v44 = *(_WORD *)(a5 + 438);
    __int16 v42 = *(_WORD *)(a5 + 502);
    int v22 = v10;
    char v23 = *(unsigned char *)(a5 + 531);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          int v10 = (uint64_t **)v11;
          unsigned int v24 = *((unsigned __int8 *)v11 + 28);
          if (v24 <= v9) {
            break;
          }
          int v11 = *v10;
          int v22 = v10;
          if (!*v10) {
            goto LABEL_66;
          }
        }
        if (v24 >= v9) {
          break;
        }
        int v11 = v10[1];
        if (!v11)
        {
          int v22 = v10 + 1;
          goto LABEL_66;
        }
      }
    }
    else
    {
LABEL_66:
      int v25 = operator new(0x48uLL);
      v25[28] = v9;
      v25[32] = v9;
      v25[33] = v17;
      *((_WORD *)v25 + 17) = v18;
      *((_WORD *)v25 + 18) = v50;
      v25[38] = v19;
      unsigned char v25[39] = v20;
      *((_DWORD *)v25 + 10) = v21;
      *((_DWORD *)v25 + 11) = v49;
      *((_DWORD *)v25 + 12) = v48;
      *((_DWORD *)v25 + 13) = v47;
      *((_DWORD *)v25 + 14) = v46;
      *((_DWORD *)v25 + 15) = v45;
      *((_WORD *)v25 + 32) = v44;
      *((_WORD *)v25 + 33) = v43;
      *((_WORD *)v25 + 34) = v42;
      v25[70] = v23;
      std::__tree<std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,XofGpsQzssAlmanac>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,XofGpsQzssAlmanac>>>::__insert_node_at(a7, (uint64_t)v10, v22, (uint64_t *)v25);
    }
    int v8 = v73 + 1;
    if (v73 + 1 >= *v40) {
      return 1;
    }
  }
  if (g_LbsOsaTrace_Config >= 2)
  {
    bzero(__str, 0x3C6uLL);
    uint64_t v31 = mach_continuous_time();
    if (a6 > 7) {
      uint64_t v32 = "   ";
    }
    else {
      uint64_t v32 = off_2655E6F78[v35];
    }
    double v33 = *(double *)&g_MacClockTicksToMsRelation;
    std::string::basic_string[abi:ne180100]<0>(__p, v32);
    if (v81 >= 0) {
      long long v34 = __p;
    }
    else {
      long long v34 = (void **)__p[0];
    }
    snprintf(__str, 0x3C5uLL, "%10u %s%c %s: Duplicate entry found for Broadcast Ephemeris data: Satellite Id = [ %s ]\n", (unint64_t)(v33 * (double)v31), "GNC", 87, "DecodeSVs", (const char *)v34);
    if (v81 < 0) {
      operator delete(__p[0]);
    }
LABEL_78:
    gnssOsa_PrintLog(__str, 2, 1, 0);
  }
  return 5;
}