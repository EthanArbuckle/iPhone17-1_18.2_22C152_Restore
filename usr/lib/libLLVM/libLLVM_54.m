const char *sub_1CD29B938(uint64_t a1)
{
  uint64_t v1;

  if (*(unsigned char *)a1 != 15)
  {
    a1 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
    if (!a1) {
      return "";
    }
  }
  v1 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (v1) {
    return (const char *)(*(void *)(v1 + 8) + 24);
  }
  else {
    return 0;
  }
}

void sub_1CD29B98C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) <= 4u
    || !*(unsigned char *)(a2 + 40)
    || *(_DWORD *)(a2 + 24) != 1)
  {
    *a3 = 0;
    a3[16] = 0;
    return;
  }
  v4 = *(void **)(*(void *)(a2 + 32) + 8);
  v6 = (unsigned __int8 *)(v4 + 3);
  unint64_t v5 = *v4;
  memset(&v19, 0, sizeof(v19));
  if (v5)
  {
    std::string::resize(&v19, (v5 + 1) >> 1, 0);
    v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v8 = &v19;
    }
    else {
      v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v5 & 1) == 0)
    {
LABEL_13:
      if (v5 >= 2)
      {
        unint64_t v10 = v5 >> 1;
        v11 = v6 + 1;
        do
        {
          int v12 = (unsigned __int16)word_1CFAC4A4C[*(v11 - 1)];
          int v13 = (unsigned __int16)word_1CFAC4A4C[*v11];
          if (v12 == 0xFFFF || v13 == 0xFFFF) {
            break;
          }
          v11 += 2;
          v8->__r_.__value_.__s.__data_[0] = v13 | (16 * v12);
          v8 = (std::string *)((char *)v8 + 1);
          --v10;
        }
        while (v10);
      }
      goto LABEL_20;
    }
    int v9 = (unsigned __int16)word_1CFAC4A4C[*v6];
    if (v9 != 0xFFFF)
    {
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v7 = &v19;
      }
      v8->__r_.__value_.__s.__data_[0] = v9;
      v8 = (std::string *)((char *)&v7->__r_.__value_.__l.__data_ + 1);
      v6 = (unsigned __int8 *)v4 + 25;
      --v5;
      goto LABEL_13;
    }
  }
LABEL_20:
  int v15 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  v16 = (void *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v19.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v19.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v18 = &v19;
    }
    else {
      v18 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    memcpy(&__dst, v18, size);
  }
  *(_OWORD *)a3 = __dst;
  a3[16] = 1;
  if (v15 < 0) {
    operator delete(v16);
  }
}

uint64_t sub_1CD29BB3C(uint64_t a1, llvm::Module *a2)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC362814(a2, (uint64_t *)&v103);
  if (v104 == v106)
  {
    *(void *)(a1 + 8) = 0;
    return result;
  }
  if (*(void *)(a1 + 8) && *(unsigned char *)(*(void *)(a1 + 16) + 2108))
  {
    v103 = "llvm.dbg.cu";
    __int16 v107 = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a2, (const char **)&v103);
    uint64_t v6 = NamedMetadata;
    if (NamedMetadata && (v44 = *(uint64_t **)(NamedMetadata + 48), uint64_t v45 = *((unsigned int *)v44 + 2), v45))
    {
      uint64_t v7 = 0;
      uint64_t v46 = *v44;
      do
      {
        if (*(_DWORD *)(*(void *)(v46 + 8 * v7) + 36)) {
          break;
        }
        ++v7;
      }
      while (v45 != v7);
    }
    else
    {
      LODWORD(v7) = 0;
    }
    v103 = "llvm.dbg.cu";
    __int16 v107 = 259;
    uint64_t v8 = llvm::Module::getNamedMetadata(a2, (const char **)&v103);
    if (v8) {
      int v9 = *(_DWORD *)(*(void *)(v8 + 48) + 8);
    }
    else {
      int v9 = 0;
    }
    if (v9 == v7)
    {
      BOOL v15 = 0;
    }
    else
    {
      int v10 = 0;
      do
      {
        uint64_t v11 = (v7 + 1);
        if (v6)
        {
          uint64_t v12 = *(void *)(v6 + 48);
          unsigned int v13 = *(_DWORD *)(v12 + 8);
          if (v13 > (int)v7 + 1)
          {
            unsigned int v14 = ~v7 + v13;
            do
            {
              if (*(_DWORD *)(*(void *)(*(void *)v12 + 8 * v11) + 36)) {
                break;
              }
              ++v11;
              --v14;
            }
            while (v14);
          }
        }
        ++v10;
        LODWORD(v7) = v11;
      }
      while (v9 != v11);
      BOOL v15 = v10 == 1;
    }
    *(unsigned char *)(a1 + 4480) = v15;
    v99[0] = 0;
    v99[1] = 0;
    unsigned int v100 = 0;
    for (i = (void *)*((void *)a2 + 2); i != (void *)((char *)a2 + 8); i = (void *)i[1])
    {
      if (i) {
        v17 = (unsigned int *)(i - 7);
      }
      else {
        v17 = 0;
      }
      v103 = &v105;
      uint64_t v104 = 0x100000000;
      llvm::GlobalVariable::getDebugInfo(v17, (uint64_t)&v103);
      v18 = (char *)v103;
      if (v104)
      {
        uint64_t v60 = 8 * v104;
        do
        {
          uint64_t v61 = *(void *)v18;
          v101[0] = *(void *)(*(void *)v18 - 8 * *(unsigned int *)(*(void *)v18 + 8));
          v62 = sub_1CD8ABE40((uint64_t)v99, v101);
          v63 = *(unsigned int **)(v61 - 8 * *(unsigned int *)(v61 + 8) + 8);
          unint64_t v64 = *((unsigned int *)v62 + 4);
          if (v64 >= *((unsigned int *)v62 + 5)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v65 = (unsigned int **)(v62[1] + 16 * v64);
          *v65 = v17;
          v65[1] = v63;
          ++*((_DWORD *)v62 + 4);
          v18 += 8;
          v60 -= 8;
        }
        while (v60);
        v18 = (char *)v103;
      }
      if (v18 != (char *)&v105) {
        free(v18);
      }
    }
    if (*(unsigned char *)(a1 + 3550))
    {
      if (*(unsigned char *)(a1 + 3549)) {
        uint64_t v70 = a1 + 3552;
      }
      else {
        uint64_t v70 = a1 + 2992;
      }
      uint64_t v71 = *(void *)(a1 + 8);
      v103 = "str_offsets_base";
      __int16 v107 = 259;
      *(void *)(v70 + 320) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v71 + 264), (const llvm::Twine *)&v103, 1);
    }
    uint64_t v19 = *(void *)(a1 + 8);
    if (*(unsigned __int16 *)(*(void *)(*(void *)(v19 + 272) + 8) + 1624) >= 5u)
    {
      uint64_t v72 = *(unsigned char *)(a1 + 3549) ? a1 + 3552 : a1 + 2992;
      v103 = "rnglists_table_base";
      __int16 v107 = 259;
      *(void *)(v72 + 328) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v19 + 264), (const llvm::Twine *)&v103, 1);
      uint64_t v19 = *(void *)(a1 + 8);
      if (*(unsigned char *)(a1 + 3549))
      {
        v103 = "rnglists_dwo_table_base";
        __int16 v107 = 259;
        *(void *)(a1 + 3320) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v19 + 264), (const llvm::Twine *)&v103, 1);
        uint64_t v19 = *(void *)(a1 + 8);
      }
    }
    v103 = "addr_table_base";
    __int16 v107 = 259;
    *(void *)(a1 + 4544) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v19 + 264), (const llvm::Twine *)&v103, 1);
    uint64_t v20 = *(void *)(a1 + 8);
    v103 = "loclists_table_base";
    __int16 v107 = 259;
    *(void *)(a1 + 2640) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v20 + 264), (const llvm::Twine *)&v103, 1);
    sub_1CC362814(a2, (uint64_t *)&v103);
    unsigned int v21 = v104;
    int v22 = v106;
    if (v104 == v106) {
      goto LABEL_55;
    }
    v23 = (void **)v103;
LABEL_28:
    uint64_t v24 = *(void *)(*v23[6] + 8 * v21);
    v25 = (void *)(v24 - 8 * *(unsigned int *)(v24 + 8));
    uint64_t v26 = v25[7];
    if (v26) {
      uint64_t v27 = v26 - 8 * *(unsigned int *)(v26 + 8);
    }
    else {
      uint64_t v27 = 0;
    }
    while (v27 != v26)
    {
      if (**(unsigned __int8 **)(*(void *)v27 - 8 * *(unsigned int *)(*(void *)v27 + 8)) - 20 < 0xFFFFFFFD) {
        goto LABEL_65;
      }
      v27 += 8;
    }
    uint64_t v28 = v25[4];
    if (!v28 || !*(_DWORD *)(v28 + 8))
    {
      uint64_t v29 = v25[5];
      if (!v29 || !*(_DWORD *)(v29 + 8))
      {
        uint64_t v30 = v25[6];
        if (!v30 || !*(_DWORD *)(v30 + 8))
        {
          uint64_t v31 = v25[8];
          if (!v31 || !*(_DWORD *)(v31 + 8)) {
            goto LABEL_36;
          }
        }
      }
    }
LABEL_65:
    v47 = (uint64_t *)sub_1CD29AE80((uint64_t *)a1, *(void *)(*v23[6] + 8 * v21));
    v48 = 0;
    uint64_t v49 = *(unsigned int *)(v24 + 8);
    uint64_t v50 = *(void *)(v24 - 8 * v49 + 48);
    if (v50) {
      v48 = (uint64_t *)(v50 - 8 * *(unsigned int *)(v50 + 8));
    }
    if (v48 == (uint64_t *)v50)
    {
      uint64_t v51 = -v49;
      goto LABEL_69;
    }
    while (1)
    {
      uint64_t v89 = *v48;
      v101[0] = *(void *)(*v48 - 8 * *(unsigned int *)(*v48 + 8));
      v90 = sub_1CD8ABE40((uint64_t)v99, v101);
      v91 = *(llvm::DIExpression **)(v89 - 8 * *(unsigned int *)(v89 + 8) + 8);
      v95 = v90;
      if (!*((_DWORD *)v90 + 4)) {
        break;
      }
      if (v91 && (llvm::DIExpression::isConstant(v91) & 0xFF00000000) != 0)
      {
        unint64_t v92 = *((unsigned int *)v95 + 4);
        goto LABEL_148;
      }
LABEL_144:
      if (++v48 == (uint64_t *)v50)
      {
        uint64_t v73 = *(unsigned int *)(v24 + 8);
        uint64_t v51 = -v73;
        uint64_t v50 = *(void *)(v24 - 8 * v73 + 48);
LABEL_69:
        uint64_t v52 = 0;
        v97[0] = 0;
        v97[1] = 0;
        int v98 = 0;
        if (v50) {
          uint64_t v52 = v50 - 8 * *(unsigned int *)(v50 + 8);
        }
        if (v52 != v50)
        {
          do
          {
            uint64_t v94 = *(void *)(*(void *)v52 - 8 * *(unsigned int *)(*(void *)v52 + 8));
            uint64_t v96 = v94;
            sub_1CD8AC148((uint64_t)v101, (uint64_t)v97, &v96);
            if (v102)
            {
              v74 = sub_1CD8ABE40((uint64_t)v99, &v96);
              unint64_t v76 = *((unsigned int *)v74 + 4);
              unint64_t v77 = 126 - 2 * __clz(v76);
              if (v76) {
                uint64_t v78 = v77;
              }
              else {
                uint64_t v78 = 0;
              }
              sub_1CD2A5E90((__n128 *)v74[1], v74[1] + 16 * v76, v78, 1, v75);
              v79 = (uint64_t *)v74[1];
              uint64_t v80 = *((unsigned int *)v74 + 4);
              v81 = &v79[2 * v80];
              uint64_t v82 = (uint64_t)v79;
              if (v80)
              {
                unint64_t v83 = 0;
                uint64_t v84 = 16 * v80 - 16;
                while (v84 != v83)
                {
                  uint64_t v86 = v79[v83 / 8 + 1];
                  uint64_t v87 = v79[v83 / 8 + 3];
                  v83 += 16;
                  if (v86 == v87)
                  {
                    uint64_t v82 = (uint64_t)&v79[v83 / 8 - 2];
                    goto LABEL_134;
                  }
                }
              }
              else
              {
LABEL_134:
                if ((uint64_t *)v82 != v81)
                {
                  uint64_t v88 = v82 + 32;
                  if ((uint64_t *)(v82 + 32) != v81)
                  {
                    do
                    {
                      if (*(void *)(v82 + 8) != *(void *)(v88 + 8))
                      {
                        *(_OWORD *)(v82 + 16) = *(_OWORD *)v88;
                        v82 += 16;
                      }
                      v88 += 16;
                    }
                    while ((uint64_t *)v88 != v81);
                    v79 = (uint64_t *)v74[1];
                  }
                  v81 = (uint64_t *)(v82 + 16);
                }
              }
              unint64_t v85 = (char *)v81 - (char *)v79;
              *((_DWORD *)v74 + 4) = v85 >> 4;
              sub_1CD8A5AAC(v47, v94, v79, (v85 >> 4));
            }
            v52 += 8;
          }
          while (v52 != v50);
          uint64_t v51 = -(uint64_t)*(unsigned int *)(v24 + 8);
        }
        uint64_t v53 = *(void *)(v24 + 8 * v51 + 32);
        if (v53) {
          v54 = (uint64_t *)(v53 - 8 * *(unsigned int *)(v53 + 8));
        }
        else {
          v54 = 0;
        }
        if (v54 != (uint64_t *)v53)
        {
          do
          {
            uint64_t v59 = *v54++;
            sub_1CD2B35BC(v47, v59);
          }
          while (v54 != (uint64_t *)v53);
          uint64_t v51 = -(uint64_t)*(unsigned int *)(v24 + 8);
        }
        uint64_t v55 = *(void *)(v24 + 8 * v51 + 40);
        if (v55) {
          v56 = (uint64_t *)(v55 - 8 * *(unsigned int *)(v55 + 8));
        }
        else {
          v56 = 0;
        }
        if (v56 != (uint64_t *)v55)
        {
          do
          {
            int v57 = *(unsigned __int8 *)*v56;
            if ((v57 - 11) < 4 || v57 == 33) {
              sub_1CD2B35BC(v47, *v56);
            }
            ++v56;
          }
          while (v56 != (uint64_t *)v55);
          uint64_t v51 = -(uint64_t)*(unsigned int *)(v24 + 8);
        }
        uint64_t v58 = *(void *)(v24 + 8 * v51 + 56);
        if (v58) {
          v42 = (uint64_t *)(v58 - 8 * *(unsigned int *)(v58 + 8));
        }
        else {
          v42 = 0;
        }
        while (v42 != (uint64_t *)v58)
        {
          uint64_t v36 = *v42;
          v37 = *(unsigned __int8 **)(*v42 - 8 * *(unsigned int *)(*v42 + 8));
          if (*v37 - 17 >= 3)
          {
            uint64_t v38 = sub_1CD2B352C(v47, v37);
            if (v38)
            {
              uint64_t v39 = v38;
              v40 = (void *)sub_1CD2977C8((unint64_t)v47, v36);
              v40[5] = v39 & 0xFFFFFFFFFFFFFFFBLL;
              v41 = *(void **)(v39 + 32);
              if (v41)
              {
                void *v40 = *v41;
                void *v41 = v40;
              }
              *(void *)(v39 + 32) = v40;
            }
          }
          ++v42;
        }
        MEMORY[0x1D25D9CD0](v97[0], 8);
LABEL_36:
        uint64_t v32 = v21 + 1;
        if (v23)
        {
          v33 = v23[6];
          unsigned int v34 = *((_DWORD *)v33 + 2);
          if (v34 > v21 + 1)
          {
            unsigned int v35 = ~v21 + v34;
            do
            {
              if (*(_DWORD *)(*(void *)(*v33 + 8 * v32) + 36)) {
                break;
              }
              ++v32;
              --v35;
            }
            while (v35);
          }
        }
        unsigned int v21 = v32;
        if (v32 == v22)
        {
LABEL_55:
          uint64_t v43 = v99[0];
          if (v100)
          {
            uint64_t v66 = 40 * v100;
            uint64_t v67 = v99[0] + 24;
            do
            {
              uint64_t v68 = *(void *)(v67 - 24);
              if (v68 != -4096 && v68 != -8192)
              {
                v69 = *(void **)(v67 - 16);
                if ((void *)v67 != v69) {
                  free(v69);
                }
              }
              v67 += 40;
              v66 -= 40;
            }
            while (v66);
          }
          return MEMORY[0x1D25D9CD0](v43, 8);
        }
        goto LABEL_28;
      }
    }
    unint64_t v92 = 0;
LABEL_148:
    if (v92 >= *((unsigned int *)v95 + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v93 = (void *)(v95[1] + 16 * v92);
    void *v93 = 0;
    v93[1] = v91;
    ++*((_DWORD *)v95 + 4);
    goto LABEL_144;
  }
  return result;
}

void sub_1CD29C420(uint64_t a1)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 2968);
  if (v2) {
    sub_1CD29D60C(a1, v2);
  }
  *(void *)(a1 + 2968) = 0;
  uint64_t v3 = *(void *)(a1 + 560);
  uint64_t v4 = *(void *)(a1 + 568);
  while (v3 != v4)
  {
    sub_1CD2984A0(*(uint64_t **)(v3 + 8));
    v3 += 16;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 && *(unsigned char *)(*(void *)(a1 + 16) + 2108))
  {
    v138 = (void *)(*(uint64_t (**)(void))(**(void **)(v5 + 248) + 24))(*(void *)(v5 + 248));
    uint64_t v6 = *(unsigned int *)(a1 + 2824);
    if (v6)
    {
      uint64_t v7 = *(unsigned __int8 ***)(a1 + 2816);
      uint64_t v8 = 8 * v6;
      do
      {
        int v9 = *v7;
        int v10 = (void *)sub_1CD29AE80((uint64_t *)a1, *(void *)&(*v7)[-8 * *((unsigned int *)*v7 + 2) + 40]);
        sub_1CD297D60(v10, v9);
        uint64_t v11 = (void *)v10[41];
        if (v11 && *(unsigned char *)(v10[9] + 48)) {
          sub_1CD297D60(v11, v9);
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    uint64_t v12 = *(unsigned int *)(a1 + 664);
    if (v12)
    {
      uint64_t v73 = *(uint64_t **)(a1 + 656);
      v74 = &v73[v12];
      do
      {
        unint64_t v75 = *(void *)(*v73 + 24);
        if (v75)
        {
          while (1)
          {
            int v76 = *(unsigned __int16 *)(v75 + 28);
            if (v76 == 17 || v76 == 65 || v76 == 74) {
              break;
            }
            unint64_t v77 = 0;
            uint64_t v80 = *(void *)(v75 + 40);
            if ((v80 & 4) == 0)
            {
              unint64_t v75 = v80 & 0xFFFFFFFFFFFFFFF8;
              if (v75) {
                continue;
              }
            }
            goto LABEL_93;
          }
          unint64_t v77 = (const char *)v75;
        }
        else
        {
          unint64_t v77 = 0;
        }
LABEL_93:
        v142 = v77;
        uint64_t v139 = 0;
        if (sub_1CD40EE24((uint64_t *)(a1 + 584), &v142, &v139)) {
          uint64_t v78 = *(uint64_t **)(v139 + 8);
        }
        else {
          uint64_t v78 = 0;
        }
        uint64_t v79 = *v73++;
        sub_1CD297E14(v78, v79);
      }
      while (v73 != v74);
    }
    unsigned int v13 = *(unint64_t **)(a1 + 568);
    unsigned int v14 = *(unint64_t **)(a1 + 560);
    if ((unint64_t)((char *)v13 - (char *)v14) >= 0x11)
    {
      uint64_t v81 = *(void *)(*(void *)(a1 + 8) + 248);
      char v82 = *(unsigned char *)(v81 + 1215);
      if (v82 >= 0) {
        uint64_t v15 = v81 + 1192;
      }
      else {
        uint64_t v15 = *(void *)(v81 + 1192);
      }
      uint64_t v83 = *(void *)(v81 + 1200);
      if (v82 >= 0) {
        uint64_t v16 = v82 & 0x7F;
      }
      else {
        uint64_t v16 = v83;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    if (v14 != v13)
    {
      while (1)
      {
        unint64_t v17 = v14[1];
        if (*(_DWORD *)(*(void *)(v17 + 72) + 36) == 3) {
          goto LABEL_29;
        }
        sub_1CD2B5E1C(v14[1]);
        unint64_t v18 = *(void *)(v17 + 328);
        if (v18)
        {
          v97 = *(void **)(v17 + 40);
          if (v97 && *v97 >= 8uLL)
          {
            unsigned int v98 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624);
            sub_1CD29B4B0(a1, *(void *)(v17 + 72), v17);
            uint64_t v99 = *(void *)(*(void *)(a1 + 8) + 248);
            char v100 = *(unsigned char *)(v99 + 1215);
            if (v100 >= 0) {
              v101 = (void *)(v99 + 1192);
            }
            else {
              v101 = *(void **)(v99 + 1192);
            }
            size_t v102 = *(void *)(v99 + 1200);
            if (v100 >= 0) {
              size_t v103 = v100 & 0x7F;
            }
            else {
              size_t v103 = v102;
            }
            if (v98 <= 4) {
              int v104 = 8496;
            }
            else {
              int v104 = 118;
            }
            sub_1CD2B2780((uint64_t *)v17, v17 + 8, v104, v101, v103);
            uint64_t v105 = *(void *)(*(void *)(a1 + 8) + 248);
            char v106 = *(unsigned char *)(v105 + 1215);
            if (v106 >= 0) {
              __int16 v107 = (void *)(v105 + 1192);
            }
            else {
              __int16 v107 = *(void **)(v105 + 1192);
            }
            size_t v108 = *(void *)(v105 + 1200);
            if (v106 >= 0) {
              size_t v109 = v106 & 0x7F;
            }
            else {
              size_t v109 = v108;
            }
            sub_1CD2B2780((uint64_t *)v18, v18 + 8, v104, v107, v109);
            uint64_t v110 = *(void *)(a1 + 8);
            llvm::MD5::MD5((llvm::MD5 *)&v142);
            uint64_t v146 = v110;
            unint64_t v147 = v17;
            uint64_t v148 = 0;
            uint64_t v149 = 0;
            int v150 = 0;
            unint64_t v111 = sub_1CD8A57DC((int *)&v142, v15, v16, v17 + 8);
            MEMORY[0x1D25D9CD0](v148, 8);
            if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) < 5u)
            {
              unint64_t v137 = v137 & 0xFFFFFFFF00000000 | 0x10007;
              sub_1CD2B2724(v17, (unint64_t *)(v17 + 16), 8497, 65543, v111);
              unint64_t v136 = v136 & 0xFFFFFFFF00000000 | 0x10007;
              sub_1CD2B2724(v18, (unint64_t *)(v18 + 16), 8497, 65543, v111);
              if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) <= 4u
                && *(_DWORD *)(a1 + 3800))
              {
                sub_1CD2B636C(v18, v18 + 8, 8498, *(void **)(v138[19] + 8), *(void *)(v138[19] + 8));
              }
            }
            else
            {
              *(void *)(v17 + 544) = v111;
              *(void *)(v18 + 544) = v111;
            }
            char v19 = 1;
          }
          else
          {
            sub_1CD29B4B0(a1, *(void *)(v18 + 72), *(void *)(v17 + 328));
            char v19 = 0;
          }
        }
        else
        {
          char v19 = 0;
          unint64_t v18 = v17;
        }
        int v20 = *(_DWORD *)(v17 + 448);
        if (v20 == 1) {
          goto LABEL_20;
        }
        if (v20) {
          break;
        }
LABEL_25:
        if (((v19 & 1) != 0
           || *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) >= 5u)
          && *(_DWORD *)(a1 + 4520))
        {
          sub_1CD8A6A18(v18);
        }
        if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) >= 5u)
        {
          if (*(unsigned char *)(v18 + 316)) {
            sub_1CD8B0E7C(v18);
          }
          if (*(_DWORD *)(a1 + 1192) && !*(unsigned char *)(a1 + 3549)) {
            sub_1CD2B636C(v18, v18 + 8, 140, *(void **)(a1 + 2640), *(void *)(v138[40] + 8));
          }
        }
        if (!*(void *)(*v14 - 8 * *(unsigned int *)(*v14 + 8) + 64)) {
          goto LABEL_29;
        }
        if (*(unsigned char *)(a1 + 3536))
        {
          if (!*(unsigned char *)(a1 + 3549))
          {
            uint64_t v127 = v18 + 8;
            v113 = *(void **)(v18 + 344);
            uint64_t v128 = *(void *)(v138[21] + 8);
            if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) <= 4u) {
              int v129 = 8473;
            }
            else {
              int v129 = 121;
            }
            unint64_t v130 = v18;
            goto LABEL_174;
          }
          uint64_t v112 = v17 + 8;
          v113 = *(void **)(v18 + 344);
          uint64_t v114 = *(void *)(v138[36] + 8);
          unint64_t v115 = v17;
          int v116 = 121;
        }
        else
        {
          v113 = *(void **)(v18 + 344);
          if (!*(unsigned char *)(a1 + 3549))
          {
            uint64_t v127 = v18 + 8;
            uint64_t v128 = *(void *)(v138[20] + 8);
            unint64_t v130 = v18;
            int v129 = 67;
LABEL_174:
            sub_1CD2B636C(v130, v127, v129, v113, v128);
            goto LABEL_29;
          }
          uint64_t v112 = v17 + 8;
          uint64_t v114 = *(void *)(v138[35] + 8);
          unint64_t v115 = v17;
          int v116 = 67;
        }
        sub_1CD8B0D34(v115, v112, v116, (uint64_t)v113, v114);
LABEL_29:
        v14 += 2;
        if (v14 == v13) {
          goto LABEL_30;
        }
      }
      if (*(unsigned char *)(a1 + 3532))
      {
        v142 = 0;
        sub_1CD2938A0(v18, (unint64_t *)(v18 + 16), 17, 1, &v142);
      }
      else
      {
LABEL_20:
        *(void *)(v18 + 488) = **(void **)(v17 + 440);
      }
      v140[0] = v141;
      v140[1] = (void *)0x200000000;
      if (*(_DWORD *)(v17 + 448)) {
        sub_1CD298D88((uint64_t)v140, (const void **)(v17 + 440));
      }
      sub_1CD294F94(v18, v18 + 8, (uint64_t)v140);
      if (v140[0] != v141) {
        free(v140[0]);
      }
      goto LABEL_25;
    }
LABEL_30:
    sub_1CC362814(*(llvm::Module **)(*(void *)(a1 + 16) + 2064), (uint64_t *)&v142);
    unsigned int v21 = v143;
    int v22 = v144;
    if (v143 != v144)
    {
      v23 = v142;
      uint64_t v24 = *((void *)v142 + 6);
      do
      {
        uint64_t v25 = *(void *)(*(void *)v24 + 8 * v21);
        if (*(void *)(v25 + 40))
        {
          sub_1CD29AE80((uint64_t *)a1, v25);
          uint64_t v24 = *((void *)v23 + 6);
        }
        uint64_t v26 = v21 + 1;
        unsigned int v27 = *(_DWORD *)(v24 + 8);
        if (v27 > v21 + 1)
        {
          unsigned int v28 = ~v21 + v27;
          do
          {
            if (*(_DWORD *)(*(void *)(*(void *)v24 + 8 * v26) + 36)) {
              break;
            }
            ++v26;
            --v28;
          }
          while (v28);
        }
        unsigned int v21 = v26;
      }
      while (v26 != v22);
    }
    sub_1CD2B0578(a1 + 2992);
    if (*(unsigned char *)(a1 + 3549) && (sub_1CD2B0578(a1 + 3552), *(unsigned char *)(a1 + 3549)))
    {
      sub_1CD8A71E4(a1);
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 8);
      unsigned int v30 = *(unsigned __int16 *)(*(void *)(*(void *)(v29 + 272) + 8) + 1624);
      uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(v29 + 248) + 24))(*(void *)(v29 + 248));
      uint64_t v32 = (uint64_t *)(v31 + 136);
      if (v30 >= 5) {
        uint64_t v32 = (uint64_t *)(v31 + 320);
      }
      sub_1CD2A26C4(a1, *v32);
    }
    if (*(unsigned char *)(a1 + 3549)) {
      uint64_t v33 = 3552;
    }
    else {
      uint64_t v33 = 2992;
    }
    if (*(unsigned char *)(a1 + 3549)) {
      uint64_t v34 = a1 + 3552;
    }
    else {
      uint64_t v34 = a1 + 2992;
    }
    uint64_t v35 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
    sub_1CD29125C(v34 + 104, *(void *)(a1 + v33), *(void *)(v35 + 72));
    if (*(unsigned char *)(a1 + 3549)) {
      uint64_t v37 = a1 + 3552;
    }
    else {
      uint64_t v37 = a1 + 2992;
    }
    uint64_t v38 = *(unsigned int *)(v37 + 160);
    if (v38)
    {
      uint64_t v39 = *(void ***)(v37 + 152);
      uint64_t v40 = 8 * v38;
      do
      {
        v41 = *v39++;
        sub_1CD2B045C((uint64_t *)v37, v41, 0);
        v40 -= 8;
      }
      while (v40);
    }
    if (byte_1EBCFED70) {
      sub_1CD29D7F8(a1, v36);
    }
    int v42 = *(unsigned __int8 *)(a1 + 3549);
    uint64_t v43 = *(void *)(a1 + 8);
    unsigned int v44 = *(unsigned __int16 *)(*(void *)(*(void *)(v43 + 272) + 8) + 1624);
    uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(v43 + 248) + 24))(*(void *)(v43 + 248));
    uint64_t v46 = (uint64_t *)(v45 + 152);
    if (v44 >= 5) {
      uint64_t v46 = (uint64_t *)(v45 + 312);
    }
    if (v42) {
      uint64_t v47 = a1 + 3552;
    }
    else {
      uint64_t v47 = a1 + 2992;
    }
    sub_1CD2A35C8((llvm::mcdwarf *)a1, v47, *v46);
    int v48 = *(unsigned __int8 *)(a1 + 3549);
    uint64_t v49 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
    uint64_t v50 = (uint64_t *)(v49 + 168);
    uint64_t v51 = (uint64_t *)(v49 + 160);
    if (v48)
    {
      uint64_t v51 = (uint64_t *)(v49 + 280);
      uint64_t v50 = (uint64_t *)(v49 + 288);
    }
    if (*(unsigned char *)(a1 + 3536)) {
      uint64_t v52 = v50;
    }
    else {
      uint64_t v52 = v51;
    }
    uint64_t v53 = *(void **)(a1 + 560);
    v54 = *(void **)(a1 + 568);
    if (v53 != v54)
    {
      uint64_t v55 = *v52;
      do
      {
        uint64_t v56 = v53[1];
        if (*(void *)(v56 + 328)) {
          uint64_t v57 = *(void *)(v56 + 328);
        }
        else {
          uint64_t v57 = v53[1];
        }
        uint64_t v58 = *(void *)(*v53 - 8 * *(unsigned int *)(*v53 + 8) + 64);
        if (v58 && *(_DWORD *)(v58 + 8))
        {
          (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 272) + 168))(*(void *)(*(void *)(a1 + 8) + 272), v55, 0);
          (*(void (**)(void, void, void))(**(void **)(*(void *)(a1 + 8) + 272) + 192))(*(void *)(*(void *)(a1 + 8) + 272), *(void *)(v57 + 344), 0);
          if (*(unsigned char *)(a1 + 3536))
          {
            uint64_t v131 = *(void *)(a1 + 8);
            uint64_t v132 = *(void *)(v131 + 272);
            v142 = "Macro information version";
            __int16 v145 = 259;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v132 + 112))(v132, &v142, 1);
            (*(void (**)(void))(**(void **)(v131 + 272) + 520))();
            v133 = *(void **)(v131 + 272);
            if (*(unsigned char *)(v133[1] + 1626) == 1)
            {
              v142 = "Flags: 64 bit, debug_line_offset present";
              __int16 v145 = 259;
              (*(void (**)(void *, const char **, uint64_t))(*v133 + 112))(v133, &v142, 1);
              uint64_t v134 = 3;
            }
            else
            {
              v142 = "Flags: 32 bit, debug_line_offset present";
              __int16 v145 = 259;
              (*(void (**)(void *, const char **, uint64_t))(*v133 + 112))(v133, &v142, 1);
              uint64_t v134 = 2;
            }
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v131 + 272) + 520))(*(void *)(v131 + 272), v134, 1);
            uint64_t v135 = *(void *)(v131 + 272);
            v142 = "debug_line_offset";
            __int16 v145 = 259;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v135 + 112))(v135, &v142, 1);
            if (*(unsigned char *)(a1 + 3549)) {
              sub_1CD8A1280(v131, 0);
            }
            else {
              sub_1CD28B2B4(v131, *(llvm::MCSymbol **)(v57 + 320), 0);
            }
          }
          sub_1CD8A7E58(a1, v58, v57);
          uint64_t v117 = *(void *)(*(void *)(a1 + 8) + 272);
          v142 = "End Of Macro List Mark";
          __int16 v145 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v117 + 112))(v117, &v142, 1);
          (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520))();
        }
        v53 += 2;
      }
      while (v53 != v54);
    }
    if (*(unsigned char *)(a1 + 3550))
    {
      if (*(unsigned char *)(a1 + 3549)) {
        uint64_t v84 = a1 + 3552;
      }
      else {
        uint64_t v84 = a1 + 2992;
      }
      uint64_t v85 = *(void *)(a1 + 8);
      uint64_t v86 = (*(uint64_t (**)(void))(**(void **)(v85 + 248) + 24))(*(void *)(v85 + 248));
      sub_1CD8AE18C(v84 + 176, v85, *(void *)(v86 + 296), *(void *)(v84 + 320));
      uint64_t v59 = *(void *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248))
                      + 296);
    }
    else
    {
      uint64_t v59 = 0;
    }
    if (*(unsigned char *)(a1 + 3549)) {
      uint64_t v60 = 3552;
    }
    else {
      uint64_t v60 = 2992;
    }
    if (*(unsigned char *)(a1 + 3549)) {
      uint64_t v61 = a1 + 3552;
    }
    else {
      uint64_t v61 = a1 + 2992;
    }
    uint64_t v62 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
    sub_1CD2B1064(v61 + 176, *(void *)(a1 + v60), *(void *)(v62 + 128), v59, 1);
    if (*(unsigned char *)(a1 + 3549))
    {
      sub_1CD8A74A8(a1);
      uint64_t v87 = *(unsigned int *)(a1 + 3152);
      if (v87)
      {
        uint64_t v88 = *(void ***)(a1 + 3144);
        uint64_t v89 = 8 * v87;
        do
        {
          v90 = *v88++;
          sub_1CD2B045C((uint64_t *)(a1 + 2992), v90, 1);
          v89 -= 8;
        }
        while (v89);
      }
      uint64_t v91 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
      sub_1CD29125C(a1 + 3096, *(void *)(a1 + 2992), *(void *)(v91 + 240));
      uint64_t v92 = *(void *)(a1 + 8);
      v93 = *(llvm::MCStreamer **)(v92 + 272);
      uint64_t v94 = (*(uint64_t (**)(void))(**(void **)(v92 + 248) + 24))(*(void *)(v92 + 248));
      llvm::MCDwarfDwoLineTable::Emit((llvm::MCDwarfLineTableHeader *)(a1 + 4008), v93, 981773, *(void *)(v94 + 256));
      uint64_t v95 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
      sub_1CD2A35C8((llvm::mcdwarf *)a1, a1 + 2992, *(void *)(v95 + 328));
    }
    uint64_t v63 = *(void *)(a1 + 8);
    uint64_t v64 = (*(uint64_t (**)(void))(**(void **)(v63 + 248) + 24))(*(void *)(v63 + 248));
    sub_1CD279D58(a1 + 4512, v63, *(void *)(v64 + 304));
    int v65 = *(_DWORD *)(a1 + 3544);
    if (v65 == 2)
    {
      uint64_t v66 = *(void *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248))
                      + 192);
      (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 272) + 168))(*(void *)(*(void *)(a1 + 8) + 272), v66, 0);
      sub_1CD277490(*(void *)(a1 + 8), a1 + 4744, "Names", (char *)5, *(void *)(v66 + 8), &unk_1CFB336C4, 1);
      uint64_t v67 = *(void *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248))
                      + 200);
      (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 272) + 168))(*(void *)(*(void *)(a1 + 8) + 272), v67, 0);
      sub_1CD277490(*(void *)(a1 + 8), a1 + 4936, "ObjC", (char *)4, *(void *)(v67 + 8), &unk_1CFB336C4, 1);
      uint64_t v68 = *(void *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248))
                      + 208);
      (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 272) + 168))(*(void *)(*(void *)(a1 + 8) + 272), v68, 0);
      sub_1CD277490(*(void *)(a1 + 8), a1 + 5128, "namespac", (char *)8, *(void *)(v68 + 8), &unk_1CFB336C4, 1);
      uint64_t v69 = *(void *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248))
                      + 216);
      (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 272) + 168))(*(void *)(*(void *)(a1 + 8) + 272), v69, 0);
      sub_1CD277490(*(void *)(a1 + 8), a1 + 5320, "types", (char *)5, *(void *)(v69 + 8), &unk_1CFB336B8, 3);
    }
    else if (v65 == 3)
    {
      unint64_t v96 = *(unsigned int *)(a1 + 3152);
      if (v96) {
        sub_1CD89ADE8(*(void *)(a1 + 8), a1 + 4552, a1, *(uint64_t **)(a1 + 3144), v96);
      }
    }
    uint64_t v70 = *(void *)(a1 + 560);
    uint64_t v71 = *(void *)(a1 + 568);
    while (v70 != v71)
    {
      uint64_t v72 = *(void **)(v70 + 8);
      if (sub_1CD2982E8(v72))
      {
        int v118 = *(_DWORD *)(v72[9] + 52);
        uint64_t v119 = *(void *)(a1 + 8);
        uint64_t v120 = *(void *)(v119 + 272);
        uint64_t v121 = (*(uint64_t (**)(void))(**(void **)(v119 + 248) + 24))(*(void *)(v119 + 248));
        v122 = (void *)(v121 + 360);
        if (v118 != 1) {
          v122 = (void *)(v121 + 176);
        }
        (*(void (**)(uint64_t, void, void))(*(void *)v120 + 168))(v120, *v122, 0);
        sub_1CD8A7674(a1, v118 == 1, (uint64_t)"Names", 5, (uint64_t)v72, (uint64_t)(v72 + 47));
        uint64_t v123 = *(void *)(a1 + 8);
        uint64_t v124 = *(void *)(v123 + 272);
        uint64_t v125 = (*(uint64_t (**)(void))(**(void **)(v123 + 248) + 24))(*(void *)(v123 + 248));
        v126 = (void *)(v125 + 368);
        if (v118 != 1) {
          v126 = (void *)(v125 + 112);
        }
        (*(void (**)(uint64_t, void, void))(*(void *)v124 + 168))(v124, *v126, 0);
        sub_1CD8A7674(a1, v118 == 1, (uint64_t)"Types", 5, (uint64_t)v72, (uint64_t)(v72 + 51));
      }
      v70 += 16;
    }
  }
}

void sub_1CD29D60C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 8) + 272);
  uint64_t v4 = v3[1];
  if ((*(unsigned int (**)(void *))(*v3 + 96))(v3)) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = *(_DWORD *)(a2 + 312);
  }
  uint64_t v6 = *(char **)(v4 + 1480);
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v6;
        unsigned int v8 = *((_DWORD *)v6 + 8);
        if (v5 >= v8) {
          break;
        }
        uint64_t v6 = *(char **)v7;
        int v10 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_11;
        }
      }
      if (v8 >= v5) {
        goto LABEL_7;
      }
      uint64_t v6 = (char *)*((void *)v7 + 1);
    }
    while (v6);
    int v10 = (uint64_t **)(v7 + 8);
  }
  else
  {
    int v10 = (uint64_t **)(v4 + 1480);
    uint64_t v7 = (char *)(v4 + 1480);
  }
LABEL_11:
  uint64_t v11 = v7;
  uint64_t v7 = (char *)operator new(0x228uLL);
  *((_DWORD *)v7 + 8) = v5;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 248) = 0u;
  *((void *)v7 + 65) = 0;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_OWORD *)(v7 + 280) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 296) = 0u;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(_OWORD *)(v7 + 424) = 0u;
  *(_OWORD *)(v7 + 440) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 488) = 0u;
  *(_OWORD *)(v7 + 504) = 0u;
  *((void *)v7 + 6) = v7 + 64;
  *((_DWORD *)v7 + 15) = 3;
  *((void *)v7 + 17) = v7 + 152;
  *((_DWORD *)v7 + 37) = 3;
  *((void *)v7 + 47) = 0;
  *((void *)v7 + 46) = 0;
  *((void *)v7 + 48) = 0x1000000000;
  *((_OWORD *)v7 + 25) = 0u;
  *((_OWORD *)v7 + 26) = 0u;
  *((_OWORD *)v7 + 27) = 0u;
  *(void *)(v7 + 445) = 0;
  v7[497] = 1;
  *((void *)v7 + 64) = 0;
  *((void *)v7 + 63) = 0;
  *((_DWORD *)v7 + 130) = 0;
  *((void *)v7 + 66) = 0;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 67) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v11;
  *int v10 = (uint64_t *)v7;
  uint64_t v12 = (uint64_t *)v7;
  uint64_t v13 = **(void **)(v4 + 1472);
  if (v13)
  {
    *(void *)(v4 + 1472) = v13;
    uint64_t v12 = *v10;
  }
  sub_1CB8358B8(*(uint64_t **)(v4 + 1480), v12);
  ++*(void *)(v4 + 1488);
LABEL_7:
  int v9 = *(llvm::MCSymbol **)(*(void *)(a2 + 440) + 16 * *(unsigned int *)(a2 + 448) - 8);

  llvm::MCLineSection::addEndEntry((llvm::MCLineSection *)(v7 + 504), v9);
}

uint64_t sub_1CD29D7F8(uint64_t a1, __n128 a2)
{
  v114[0] = 0;
  v114[1] = 0;
  int v115 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v116 = 0;
  uint64_t v3 = *(uint64_t ***)(a1 + 608);
  uint64_t v4 = *(uint64_t ***)(a1 + 616);
  if (v3 == v4)
  {
    uint64_t v5 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    unsigned int v113 = 0;
    goto LABEL_77;
  }
  do
  {
    uint64_t v6 = *v3;
    uint64_t v7 = **v3;
    unint64_t AssociatedFragment = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 && (v6[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v6 + 2) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v6[3]);
      uint64_t v7 = *v6 & 7 | AssociatedFragment;
      void *v6 = v7;
    }
    if (!AssociatedFragment) {
      goto LABEL_11;
    }
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 && (v6[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v6 + 2) |= 4u;
      unint64_t v9 = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v6[3]);
      void *v6 = *v6 & 7 | v9;
    }
    if ((_UNKNOWN *)v9 == llvm::MCSymbol::AbsolutePseudoFragment)
    {
LABEL_11:
      v108[0] = 0;
LABEL_12:
      uint64_t v12 = sub_1CD8A7D30((uint64_t)v114, v108);
      a2 = *(__n128 *)v3;
      unint64_t v13 = *(unsigned int *)(v12 + 8);
      if (v13 >= *(unsigned int *)(v12 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(__n128 *)(*(void *)v12 + 16 * v13) = a2;
      ++*(_DWORD *)(v12 + 8);
      goto LABEL_9;
    }
    int v10 = *v3;
    unint64_t v11 = **v3 & 0xFFFFFFFFFFFFFFF8;
    if (!v11 && (v10[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v10 + 2) |= 4u;
      unint64_t v11 = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v10[3]);
      *int v10 = *v10 & 7 | v11;
    }
    v108[0] = *(void *)(v11 + 16);
    if (*(unsigned char *)(v108[0] + 220)) {
      goto LABEL_12;
    }
LABEL_9:
    v3 += 2;
  }
  while (v3 != v4);
  uint64_t v5 = 0;
  uint64_t v14 = v116;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  unsigned int v113 = 0;
  uint64_t v106 = v117;
  if (v116 != v117)
  {
    uint64_t v15 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    do
    {
      unint64_t v16 = *(unsigned int *)(v14 + 16);
      if (v16)
      {
        unint64_t v17 = *(llvm::MCSection **)v14;
        unint64_t v18 = (unint64_t **)(v14 + 8);
        char v19 = *(__n128 **)(v14 + 8);
        int v20 = &v19[v16];
        if (*(void *)v14)
        {
          v108[0] = a1;
          if (v16 < 0x81)
          {
LABEL_49:
            sub_1CD2AC0DC(v19, &v19[v16], v108, v16, 0, 0, a2);
          }
          else
          {
            unint64_t v35 = v16;
            while (1)
            {
              __n128 v36 = (__n128 *)operator new(16 * v35, v15);
              if (v36) {
                break;
              }
              BOOL v37 = v35 > 1;
              v35 >>= 1;
              if (!v37) {
                goto LABEL_49;
              }
            }
            uint64_t v38 = v36;
            sub_1CD2AC0DC(v19, &v19[v16], v108, v16, v36, v35, a2);
            operator delete(v38);
          }
          uint64_t v39 = llvm::MCStreamer::endSection(*(llvm::MCContext ***)(*(void *)(a1 + 8) + 272), v17);
          unint64_t v40 = *(unsigned int *)(v14 + 16);
          if (v40 >= *(unsigned int *)(v14 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v41 = (uint64_t *)(*(void *)(v14 + 8) + 16 * v40);
          uint64_t *v41 = v39;
          v41[1] = 0;
          uint64_t v42 = (*(_DWORD *)(v14 + 16) + 1);
          *(_DWORD *)(v14 + 16) = v42;
          if (v42 >= 2)
          {
            unint64_t v43 = **v18;
            for (uint64_t i = 1; i != v42; ++i)
            {
              uint64_t v45 = &(*v18)[2 * i];
              if (v45[1] != *(v45 - 1))
              {
                unint64_t v46 = *v45;
                uint64_t v47 = sub_1CD4F7F5C((uint64_t)&v111, (uint64_t *)v45 - 1);
                int v48 = v47;
                uint64_t v50 = (__n128 *)v47[2];
                unint64_t v49 = v47[3];
                if ((unint64_t)v50 >= v49)
                {
                  unint64_t v102 = v43;
                  unint64_t v104 = v46;
                  uint64_t v52 = (__n128 *)v47[1];
                  uint64_t v53 = v50 - v52;
                  unint64_t v54 = v53 + 1;
                  if ((unint64_t)(v53 + 1) >> 60) {
LABEL_130:
                  }
                    abort();
                  uint64_t v55 = v49 - (void)v52;
                  if (v55 >> 3 > v54) {
                    unint64_t v54 = v55 >> 3;
                  }
                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  unint64_t v101 = v54;
                  if (v54)
                  {
                    if (v54 >> 60) {
LABEL_131:
                    }
                      sub_1CB833614();
                    uint64_t v56 = (char *)operator new(16 * v54);
                  }
                  else
                  {
                    uint64_t v56 = 0;
                  }
                  uint64_t v57 = &v56[16 * v53];
                  *(void *)uint64_t v57 = v102;
                  *((void *)v57 + 1) = v104;
                  uint64_t v58 = (__n128 *)v57;
                  if (v50 == v52)
                  {
                    unint64_t v59 = v101;
                  }
                  else
                  {
                    unint64_t v59 = v101;
                    do
                    {
                      a2 = v50[-1];
                      v58[-1] = a2;
                      --v58;
                      --v50;
                    }
                    while (v50 != v52);
                    uint64_t v50 = (__n128 *)v48[1];
                  }
                  uint64_t v51 = (__n128 *)(v57 + 16);
                  v48[1] = v58;
                  v48[2] = v57 + 16;
                  v48[3] = &v56[16 * v59];
                  if (v50) {
                    operator delete(v50);
                  }
                }
                else
                {
                  v50->n128_u64[0] = v43;
                  v50->n128_u64[1] = v46;
                  uint64_t v51 = v50 + 1;
                }
                v48[2] = v51;
                unint64_t v43 = *v45;
                uint64_t v15 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
              }
            }
          }
        }
        else
        {
          do
          {
            unint64_t v21 = v19->n128_u64[0];
            int v22 = sub_1CD4F7F5C((uint64_t)&v111, &v19->n128_i64[1]);
            v23 = v22;
            uint64_t v25 = (__n128 *)v22[2];
            unint64_t v24 = v22[3];
            if ((unint64_t)v25 >= v24)
            {
              unsigned int v27 = (__n128 *)v22[1];
              uint64_t v28 = v25 - v27;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 60) {
                goto LABEL_130;
              }
              uint64_t v30 = v24 - (void)v27;
              if (v30 >> 3 > v29) {
                unint64_t v29 = v30 >> 3;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v29;
              }
              if (v31)
              {
                if (v31 >> 60) {
                  goto LABEL_131;
                }
                uint64_t v32 = (char *)operator new(16 * v31);
              }
              else
              {
                uint64_t v32 = 0;
              }
              uint64_t v33 = (unint64_t *)&v32[16 * v28];
              unint64_t *v33 = v21;
              v33[1] = 0;
              uint64_t v34 = (__n128 *)v33;
              if (v25 != v27)
              {
                do
                {
                  a2 = v25[-1];
                  v34[-1] = a2;
                  --v34;
                  --v25;
                }
                while (v25 != v27);
                uint64_t v25 = (__n128 *)v23[1];
              }
              uint64_t v26 = (__n128 *)(v33 + 2);
              v23[1] = v34;
              v23[2] = v33 + 2;
              v23[3] = &v32[16 * v31];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              v25->n128_u64[0] = v21;
              v25->n128_u64[1] = 0;
              uint64_t v26 = v25 + 1;
            }
            v23[2] = v26;
            ++v19;
            uint64_t v15 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          }
          while (v19 != v20);
        }
      }
      v14 += 152;
    }
    while (v14 != v106);
    uint64_t v5 = v111;
  }
LABEL_77:
  uint64_t v60 = *(void *)(a1 + 8);
  uint64_t v61 = *(void *)(v60 + 272);
  uint64_t v62 = (*(uint64_t (**)(void))(**(void **)(v60 + 248) + 24))(*(void *)(v60 + 248));
  (*(void (**)(uint64_t, void, void))(*(void *)v61 + 168))(v61, *(void *)(v62 + 144), 0);
  uint64_t v63 = (uint64_t *)(v5 + 32 * v113);
  if (v112)
  {
    if (v113)
    {
      uint64_t v65 = 32 * v113;
      uint64_t v64 = (uint64_t *)v5;
      while ((*v64 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v64 += 4;
        v65 -= 32;
        if (!v65) {
          goto LABEL_83;
        }
      }
    }
    else
    {
      uint64_t v64 = (uint64_t *)v5;
    }
  }
  else
  {
LABEL_83:
    uint64_t v64 = (uint64_t *)(v5 + 32 * v113);
  }
  uint64_t v66 = *(int *)(*(void *)(*(void *)(a1 + 8) + 256) + 8);
  uint64_t v67 = (uint64_t *)(v5 + 32 * v113);
  if (v64 == v67)
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v68 = 0;
    uint64_t v70 = 0;
    __int16 v107 = v67;
    do
    {
      uint64_t v71 = *v64;
      if (v68 >= v70)
      {
        uint64_t v72 = v68 - v69;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 61) {
          goto LABEL_130;
        }
        if (((char *)v70 - (char *)v69) >> 2 > v73) {
          unint64_t v73 = ((char *)v70 - (char *)v69) >> 2;
        }
        if ((unint64_t)((char *)v70 - (char *)v69) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v73;
        }
        if (v74)
        {
          if (v74 >> 61) {
            goto LABEL_131;
          }
          unint64_t v75 = (char *)operator new(8 * v74);
        }
        else
        {
          unint64_t v75 = 0;
        }
        int v76 = (uint64_t *)&v75[8 * v72];
        *int v76 = v71;
        unint64_t v77 = v76 + 1;
        while (v68 != v69)
        {
          uint64_t v78 = *--v68;
          *--int v76 = v78;
        }
        uint64_t v70 = (uint64_t *)&v75[8 * v74];
        if (v69) {
          operator delete(v69);
        }
        uint64_t v69 = v76;
        uint64_t v68 = v77;
        uint64_t v67 = v107;
      }
      else
      {
        *v68++ = v71;
      }
      uint64_t v79 = v64 + 4;
      uint64_t v64 = v63;
      if (v79 != v63)
      {
        uint64_t v64 = v79;
        while ((*v64 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v64 += 4;
          if (v64 == v63)
          {
            uint64_t v64 = v63;
            break;
          }
        }
      }
    }
    while (v64 != v67);
  }
  unint64_t v80 = 126 - 2 * __clz(v68 - v69);
  if (v68 == v69) {
    uint64_t v81 = 0;
  }
  else {
    uint64_t v81 = v80;
  }
  sub_1CD2AD06C(v69, v68, v81, 1);
  if (v68 != v69)
  {
    uint64_t v82 = 1 << (63 - __clz((2 * v66)));
    uint64_t v103 = -v82;
    int v105 = v82 - 1;
    uint64_t v83 = v69;
    do
    {
      uint64_t v110 = 0;
      uint64_t v110 = *v83;
      uint64_t v84 = v110;
      uint64_t v85 = sub_1CD4F7F5C((uint64_t)&v111, &v110);
      uint64_t v86 = *(void *)(v84 + 328);
      if (v86)
      {
        uint64_t v110 = *(void *)(v84 + 328);
        uint64_t v84 = v86;
      }
      uint64_t v87 = *(void **)(*(void *)(a1 + 8) + 272);
      int v88 = 12;
      if (*(unsigned char *)(v87[1] + 1626)) {
        int v88 = 24;
      }
      unsigned int v89 = ((v105 + v88) & v103) - v88;
      v108[0] = (uint64_t)"Length of ARange Set";
      __int16 v109 = 259;
      (*(void (**)(void))(*v87 + 1248))();
      uint64_t v90 = *(void *)(*(void *)(a1 + 8) + 272);
      v108[0] = (uint64_t)"DWARF Arange version number";
      __int16 v109 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v90 + 112))(v90, v108, 1);
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520))();
      uint64_t v91 = *(void *)(*(void *)(a1 + 8) + 272);
      v108[0] = (uint64_t)"Offset Into Debug Info Section";
      __int16 v109 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v91 + 112))(v91, v108, 1);
      sub_1CD8A7D10(*(void *)(a1 + 8), *(unsigned char *)(a1 + 3533), v84);
      uint64_t v92 = *(void *)(*(void *)(a1 + 8) + 272);
      v108[0] = (uint64_t)"Address Size (in bytes)";
      __int16 v109 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v92 + 112))(v92, v108, 1);
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520))();
      uint64_t v93 = *(void *)(*(void *)(a1 + 8) + 272);
      v108[0] = (uint64_t)"Segment Size (in bytes)";
      __int16 v109 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v93 + 112))(v93, v108, 1);
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520))();
      llvm::MCStreamer::emitFill(*(llvm::MCStreamer **)(*(void *)(a1 + 8) + 272), (llvm::MCConstantExpr *)v89, 0xFFu);
      uint64_t v95 = (uint64_t *)v85[1];
      uint64_t v94 = (uint64_t *)v85[2];
      while (v95 != v94)
      {
        uint64_t v96 = *(void *)(a1 + 8);
        llvm::MCSymbolRefExpr::create(*v95, 0, *(void *)(v96 + 264), 0);
        (*(void (**)(void))(**(void **)(v96 + 272) + 512))();
        uint64_t v97 = v95[1];
        if (v97)
        {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 8) + 272) + 840))(*(void *)(*(void *)(a1 + 8) + 272), v97, *v95, v66);
        }
        else
        {
          sub_1CD4531A0((uint64_t *)(a1 + 632), v95);
          (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520))();
        }
        v95 += 2;
      }
      uint64_t v98 = *(void *)(*(void *)(a1 + 8) + 272);
      v108[0] = (uint64_t)"ARange terminator";
      __int16 v109 = 259;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v98 + 112))(v98, v108, 1);
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520))();
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520))();
      ++v83;
    }
    while (v83 != v68);
  }
  if (v69) {
    operator delete(v69);
  }
  uint64_t v99 = v111;
  sub_1CD6A1B6C(v111, v113);
  MEMORY[0x1D25D9CD0](v99, 8);
  return sub_1CD719F64((uint64_t)v114);
}

uint64_t sub_1CD29E438(int8x8_t *a1, void *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t result = sub_1CD297EF0(a2, (uint64_t)a3);
  if (!result)
  {
    int8x8_t v9 = a1[20];
    if (v9)
    {
      unint64_t v10 = 0x9DDFEA08EB382D69 * (((8 * a4) + 8) ^ HIDWORD(a4));
      unint64_t v11 = 0x9DDFEA08EB382D69 * (HIDWORD(a4) ^ (v10 >> 47) ^ v10);
      unint64_t v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v9);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL) {
        uint64_t v14 = v12 < *(void *)&v9 ? v12 : v12 % *(void *)&v9;
      }
      else {
        uint64_t v14 = (*(void *)&v9 - 1) & v12;
      }
      uint64_t v15 = *(void **)(*(void *)&a1[19] + 8 * v14);
      if (v15)
      {
        while (1)
        {
          uint64_t v15 = (void *)*v15;
          if (!v15) {
            break;
          }
          unint64_t v16 = v15[1];
          if (v16 == v12)
          {
            if (v15[2] == a4)
            {
              return sub_1CD297F88(a2, a3);
            }
          }
          else
          {
            if (v13.u32[0] <= 1uLL)
            {
              v16 &= *(void *)&v9 - 1;
            }
            else if (v16 >= *(void *)&v9)
            {
              v16 %= *(void *)&v9;
            }
            if (v16 != v14) {
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD29E57C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = *(void *)result;
  if (v2 >= *(_DWORD *)(result + 12))
  {
    unint64_t v6 = v3 + 8 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      sub_1CD2A991C();
    }
    sub_1CD2A991C();
  }
  uint64_t v4 = *(unsigned int *)(result + 8);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v3 + 8 * v4) = v5;
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

void sub_1CD29E604(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    sub_1CD8ACB34();
  }
  unint64_t v6 = (void *)(*(void *)a1 + 112 * v5);
  uint64_t v7 = *a2;
  uint64_t v8 = *a3;
  uint64_t v9 = *(void *)a4;
  v6[2] = v6 + 4;
  unsigned int v10 = *(_DWORD *)(a4 + 8);
  void *v6 = v7;
  v6[1] = v8;
  v6[3] = 0x100000000;
  sub_1CD2A9CF0((uint64_t)(v6 + 2), v9, v9 + 80 * v10);
  sub_1CD2A9DE0((uint64_t)v6);
  ++*(_DWORD *)(a1 + 8);
}

BOOL sub_1CD29E6A8(int8x8_t *this, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(llvm::DILocation **)(a2 + 56);
  unint64_t v31 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v31, (unsigned __int8 *)v9, 2);
    uint64_t v9 = v31;
  }
  LexicalScope = llvm::LexicalScopes::findLexicalScope(this, v9);
  if (!LexicalScope) {
    goto LABEL_10;
  }
  unint64_t v11 = LexicalScope;
  if (!*((_DWORD *)LexicalScope + 22)) {
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)LexicalScope[10];
  if (sub_1CD28C8DC(a4, a2, v12)) {
    goto LABEL_6;
  }
  if (*(void *)(v12 + 24) != v8)
  {
LABEL_10:
    BOOL v13 = 0;
    goto LABEL_11;
  }
  unint64_t v18 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v18 || (*(unsigned char *)v18 & 4) == 0)
  {
    while ((*(_WORD *)(v18 + 44) & 4) != 0)
      unint64_t v18 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v18 != v8 + 48)
  {
    while (1)
    {
      if (*(_WORD *)(v18 + 44)) {
        goto LABEL_6;
      }
      char v19 = *(llvm::DILocation **)(v18 + 56);
      uint64_t v30 = v19;
      if (v19)
      {
        llvm::MetadataTracking::track((uint64_t)&v30, (unsigned __int8 *)v19, 2);
        if (v30) {
          break;
        }
      }
LABEL_47:
      unint64_t v18 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
      if (!v18 || (*(unsigned char *)v18 & 4) == 0)
      {
        while ((*(_WORD *)(v18 + 44) & 4) != 0)
          unint64_t v18 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v18 == v8 + 48) {
        goto LABEL_6;
      }
    }
    if ((*(unsigned char *)(*(void *)(v18 + 16) + 8) & 0x10) != 0)
    {
      int v21 = 4;
    }
    else if (*((void *)v31 - *((unsigned int *)v31 + 2)) == *((void *)v30 - *((unsigned int *)v30 + 2)))
    {
      int v21 = 1;
    }
    else
    {
      int v20 = llvm::LexicalScopes::findLexicalScope(this, v30);
      int v21 = 1;
      if (v20
        && v20 != v11
        && (*((_DWORD *)v11 + 44) >= *((_DWORD *)v20 + 44) || *((_DWORD *)v11 + 45) <= *((_DWORD *)v20 + 45)))
      {
        int v21 = 0;
      }
    }
    if (v30)
    {
      int v22 = *(unsigned __int8 *)v30;
      if ((v22 - 4) > 0x1E)
      {
        if ((v22 - 3) >= 0xFFFFFFFE) {
          v23 = v30;
        }
        else {
          v23 = 0;
        }
        if ((v22 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v24 = (unint64_t)v23 + 8;
LABEL_59:
          uint64_t v32 = &v30;
          sub_1CC5FA668(v24 + 16, &v32);
          goto LABEL_46;
        }
        if (v22 == 3) {
          *((void *)v30 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v30 + 1) & 0x7F) == 2 || *((_DWORD *)v30 + 3))
      {
        uint64_t v25 = *((void *)v30 + 2);
        if ((v25 & 4) != 0)
        {
          unint64_t v24 = v25 & 0xFFFFFFFFFFFFFFF8;
          if (v24) {
            goto LABEL_59;
          }
        }
      }
    }
LABEL_46:
    if ((v21 | 4) != 4) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_6:
  if (a3)
  {
    if (*(void *)(v8 + 64) != *(void *)(v8 + 72))
    {
LABEL_8:
      BOOL v13 = !sub_1CD28C8DC(a4, a3, *(void *)(v11[10] + 16 * *((unsigned int *)v11 + 22) - 8));
      goto LABEL_11;
    }
    uint64_t v26 = *(unsigned char **)(a2 + 32);
    if (**(_WORD **)(a2 + 16) == 14)
    {
      uint64_t v27 = *(unsigned int *)(a2 + 40);
      if (v27 == 2) {
        goto LABEL_67;
      }
      uint64_t v28 = &v26[32 * v27];
      v26 += 64;
    }
    else
    {
      uint64_t v28 = v26 + 32;
    }
    BOOL v13 = 1;
    while (*v26 == 1)
    {
      v26 += 32;
      if (v26 == v28) {
        goto LABEL_11;
      }
    }
    goto LABEL_8;
  }
LABEL_67:
  BOOL v13 = 1;
LABEL_11:
  if (v31)
  {
    int v14 = *(unsigned __int8 *)v31;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        unint64_t v16 = v31;
      }
      else {
        unint64_t v16 = 0;
      }
      if ((v14 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v17 = (unint64_t)v16 + 8;
LABEL_21:
        uint64_t v32 = &v31;
        sub_1CC5FA668(v17 + 16, &v32);
        return v13;
      }
      if (v14 == 3) {
        *((void *)v31 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v31 + 1) & 0x7F) == 2 || *((_DWORD *)v31 + 3))
    {
      uint64_t v29 = *((void *)v31 + 2);
      if ((v29 & 4) != 0)
      {
        unint64_t v17 = v29 & 0xFFFFFFFFFFFFFFF8;
        if (v17) {
          goto LABEL_21;
        }
      }
    }
  }
  return v13;
}

uint64_t sub_1CD29EA08(int8x8_t *a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  sub_1CD29E438(a1, a2, a4, *(void *)(a3 + 8));
  int v6 = *a4;
  if (v6 == 25) {
    operator new();
  }
  if (v6 == 26) {
    operator new();
  }
  return *(void *)(*(void *)&a1[82] + 8 * a1[83].u32[0] - 8);
}

void *sub_1CD29EBEC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = result;
  unsigned int v10 = *(uint64_t *****)(*(void *)(a2 + 24) + 32);
  unint64_t v11 = *v10;
  if ((*((unsigned char *)*v10 + 23) & 0x20) == 0) {
    goto LABEL_29;
  }
  uint64_t v12 = ***v11;
  v75[0] = (uint64_t)*v10;
  int v13 = *(_DWORD *)(v12 + 2496);
  if (!v13)
  {
    uint64_t v53 = 0;
LABEL_65:
    uint64_t result = sub_1CC609054(v12 + 2480, (uint64_t)v75, v75, v53);
    uint64_t v54 = v75[0];
    result[3] = 0;
    result[4] = 0;
    *uint64_t result = v54;
    result[1] = result + 3;
    result[2] = 0x100000000;
    goto LABEL_12;
  }
  uint64_t v14 = *(void *)(v12 + 2480);
  int v15 = v13 - 1;
  unsigned int v16 = v15 & ((v11 >> 4) ^ (v11 >> 9));
  uint64_t result = (void *)(v14 + 40 * v16);
  unint64_t v17 = (void ***)*result;
  if ((uint64_t ***)*result != v11)
  {
    unint64_t v18 = 0;
    int v19 = 1;
    while (v17 != (void ***)-4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == (void ***)-8192;
      }
      if (v20) {
        unint64_t v18 = result;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      uint64_t result = (void *)(v14 + 40 * v16);
      unint64_t v17 = (void ***)*result;
      if ((uint64_t ***)*result == v11) {
        goto LABEL_12;
      }
    }
    if (v18) {
      uint64_t v53 = v18;
    }
    else {
      uint64_t v53 = result;
    }
    goto LABEL_65;
  }
LABEL_12:
  uint64_t v22 = *((unsigned int *)result + 4);
  if (v22)
  {
    v23 = (void *)(result[1] + 8);
    uint64_t v24 = 16 * v22;
    char v25 = 1;
    while (*((_DWORD *)v23 - 2))
    {
      v23 += 2;
      v24 -= 16;
      if (!v24) {
        goto LABEL_30;
      }
    }
    uint64_t v26 = *v23;
    if (v26)
    {
      if (*(_DWORD *)(*(void *)(v26 - 8 * *(unsigned int *)(v26 + 8) + 40) + 36))
      {
        if ((*(unsigned char *)(v26 + 43) & 0x20) == 0) {
          goto LABEL_96;
        }
        uint64_t result = (void *)llvm::MachineInstr::isCandidateForCallSiteEntry(a2, 1);
        if (!result) {
          goto LABEL_96;
        }
        __int16 v27 = *(_WORD *)(a2 + 44);
        uint64_t v28 = *(void *)(*(void *)(a2 + 16) + 8);
        if ((v27 & 0xC) == 0 || (v27 & 4) != 0)
        {
          if ((v27 & 8) == 0 && (v28 & 0x20000) != 0) {
            goto LABEL_96;
          }
        }
        else
        {
          if ((v28 & 0x20000) == 0)
          {
            uint64_t v29 = a2;
            while ((*(_WORD *)(v29 + 44) & 8) != 0)
            {
              uint64_t v29 = *(void *)(v29 + 8);
              if ((*(unsigned char *)(*(void *)(v29 + 16) + 10) & 2) != 0) {
                goto LABEL_27;
              }
            }
            goto LABEL_93;
          }
LABEL_27:
          if ((v27 & 8) == 0)
          {
LABEL_96:
            char v25 = 0;
            goto LABEL_30;
          }
        }
LABEL_93:
        uint64_t v63 = *(void *)((uint64_t (*)(uint64_t ***))(*v10[2])[13])(v10[2]);
        if ((*(unsigned int (**)(void))(v63 + 1136))())
        {
          unint64_t v73 = (unsigned __int8 *)a2;
          uint64_t v74 = 0;
          sub_1CD290568((uint64_t)(v9 + 46), (uint64_t *)&v73, &v74, (uint64_t)v75);
        }
        unint64_t v73 = (unsigned __int8 *)a2;
        uint64_t v74 = 0;
        uint64_t result = sub_1CD290568((uint64_t)(v9 + 49), (uint64_t *)&v73, &v74, (uint64_t)v75);
        goto LABEL_96;
      }
    }
  }
LABEL_29:
  char v25 = 1;
LABEL_30:
  if (!v9[1]) {
    goto LABEL_40;
  }
  uint64_t v30 = v9[2];
  if (!*(unsigned char *)(v30 + 2108)) {
    goto LABEL_40;
  }
  v9[7] = a2;
  uint64_t v31 = v9[46];
  uint64_t v32 = *((unsigned int *)v9 + 96);
  if (!v32) {
    goto LABEL_38;
  }
  LODWORD(v33) = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v34 = (uint64_t *)(v31 + 16 * v33);
  uint64_t v35 = *v34;
  if (*v34 != a2)
  {
    int v36 = 1;
    while (v35 != -4096)
    {
      int v37 = v33 + v36++;
      uint64_t v33 = v37 & (v32 - 1);
      uint64_t v35 = *(void *)(v31 + 16 * v33);
      if (v35 == a2)
      {
        uint64_t v34 = (uint64_t *)(v31 + 16 * v33);
        goto LABEL_39;
      }
    }
LABEL_38:
    uint64_t v34 = (uint64_t *)(v31 + 16 * v32);
  }
LABEL_39:
  if (v34 != (uint64_t *)(v31 + 16 * v32) && !v34[1])
  {
    uint64_t v47 = v9[4];
    if (!v47)
    {
      int v48 = *(llvm::MCContext **)(v30 + 2056);
      unint64_t v49 = (llvm::MCContext *)(v30 + 8);
      if (v48) {
        uint64_t v50 = v48;
      }
      else {
        uint64_t v50 = v49;
      }
      v75[0] = (uint64_t)"tmp";
      __int16 v76 = 259;
      uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v50, (const llvm::Twine *)v75, 1);
      v9[4] = TempSymbol;
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9[1] + 272) + 192))(*(void *)(v9[1] + 272), TempSymbol, 0);
      uint64_t v47 = v9[4];
    }
    v34[1] = v47;
  }
LABEL_40:
  if (v9[7]) {
    char v38 = v25;
  }
  else {
    char v38 = 1;
  }
  if (v38 & 1) != 0 || (*(unsigned char *)(*(void *)(a2 + 16) + 8) & 0x10) != 0 || (*(_WORD *)(a2 + 44)) {
    return result;
  }
  unint64_t v40 = (unsigned __int8 **)(a2 + 56);
  uint64_t v39 = *(unsigned __int8 **)(a2 + 56);
  uint64_t v42 = (unsigned __int8 **)(v9 + 3);
  v41 = (unsigned __int8 *)v9[3];
  uint64_t result = (void *)v9[1];
  uint64_t v43 = *(void *)(result[34] + 8);
  int v44 = *(_DWORD *)(v43 + 1500);
  if (v39 == v41)
  {
    if (v39)
    {
      if (!v44)
      {
        int v52 = *((_DWORD *)v39 + 1);
        if (v52) {
          return (void *)sub_1CD29F5E4((uint64_t)result, v52, *((unsigned __int16 *)v39 + 1), *(unsigned __int8 **)&v39[-8 * *((unsigned int *)v39 + 2)], 0, *(_DWORD *)(v43 + 1632), *(unsigned __int16 *)(v43 + 1624), a8, v9[393]);
        }
      }
    }
    return result;
  }
  if (!v39)
  {
    if (v44)
    {
      if (dword_1EBCFF130 == 1 || dword_1EBCFF130 != 2 && (v9[4] || (uint64_t v67 = v9[5]) != 0 && v67 != *(void *)(a2 + 24)))
      {
        if (v41)
        {
          uint64_t v55 = *(unsigned __int8 **)&v41[-8 * *((unsigned int *)v41 + 2)];
          uint64_t v56 = *((unsigned __int16 *)v41 + 1);
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
        }
        return (void *)sub_1CD29F5E4((uint64_t)result, 0, v56, v55, 0, *(_DWORD *)(v43 + 1632), *(unsigned __int16 *)(v43 + 1624), a8, v9[393]);
      }
    }
    return result;
  }
  if (!(*((_DWORD *)v39 + 1) | v44)) {
    return result;
  }
  uint64_t v45 = v9 + 6;
  if (v39 != (unsigned __int8 *)v9[6])
  {
    int v46 = 0;
    goto LABEL_78;
  }
  unint64_t v73 = 0;
  if (&v73 != (unsigned __int8 **)v45)
  {
    int v57 = *v39;
    if ((v57 - 4) > 0x1E)
    {
      if ((v57 - 3) >= 0xFFFFFFFE) {
        uint64_t v64 = v39;
      }
      else {
        uint64_t v64 = 0;
      }
      if ((v57 - 3) > 0xFFFFFFFD)
      {
        unint64_t v65 = (unint64_t)(v64 + 8);
        goto LABEL_105;
      }
      if (v57 == 3) {
        *((void *)v39 + 1) = 0;
      }
    }
    else if ((v39[1] & 0x7F) == 2 || *((_DWORD *)v39 + 3))
    {
      uint64_t v72 = *((void *)v39 + 2);
      if ((v72 & 4) != 0)
      {
        unint64_t v65 = v72 & 0xFFFFFFFFFFFFFFF8;
        if (v65)
        {
LABEL_105:
          v75[0] = (uint64_t)(v9 + 6);
          sub_1CC5FA668(v65 + 16, v75);
          uint64_t v66 = v73;
          *uint64_t v45 = (uint64_t)v73;
          if (v66) {
            llvm::MetadataTracking::retrack((uint64_t)&v73, v66, (uint64_t)(v9 + 6));
          }
          goto LABEL_77;
        }
      }
    }
    *uint64_t v45 = 0;
  }
LABEL_77:
  v41 = *v42;
  int v46 = 5;
LABEL_78:
  if (v41) {
    int v44 = *((_DWORD *)v41 + 1);
  }
  int v58 = *((_DWORD *)*v40 + 1);
  if (v58) {
    BOOL v59 = v58 == v44;
  }
  else {
    BOOL v59 = 1;
  }
  int v60 = !v59;
  uint64_t result = (void *)sub_1CD29F5E4(v9[1], v58, *((unsigned __int16 *)*v40 + 1), *(unsigned __int8 **)&(*v40)[-8 * *((unsigned int *)*v40 + 2)], v46 | v60, *(_DWORD *)(*(void *)(*(void *)(v9[1] + 272) + 8) + 1632), *(unsigned __int16 *)(*(void *)(*(void *)(v9[1] + 272) + 8) + 1624), a8, v9[393]);
  if (v40 != v42)
  {
    uint64_t v61 = *v40;
    if (*((_DWORD *)*v40 + 1))
    {
      uint64_t v62 = *v42;
      if (!*v42)
      {
LABEL_89:
        uint64_t *v42 = v61;
        return (void *)llvm::MetadataTracking::track((uint64_t)(v9 + 3), v61, 2);
      }
      int v68 = *v62;
      if ((v68 - 4) > 0x1E)
      {
        if ((v68 - 3) >= 0xFFFFFFFE) {
          uint64_t v71 = *v42;
        }
        else {
          uint64_t v71 = 0;
        }
        if ((v68 - 3) <= 0xFFFFFFFD)
        {
          if (v68 == 3) {
            *((void *)v62 + 1) = 0;
          }
          goto LABEL_89;
        }
        unint64_t v70 = (unint64_t)(v71 + 8);
      }
      else
      {
        if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
          goto LABEL_89;
        }
        uint64_t v69 = *((void *)v62 + 2);
        if ((v69 & 4) == 0) {
          goto LABEL_89;
        }
        unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFF8;
        if (!v70) {
          goto LABEL_89;
        }
      }
      v75[0] = (uint64_t)(v9 + 3);
      uint64_t result = (void *)sub_1CC5FA668(v70 + 16, v75);
      uint64_t v61 = *v40;
      uint64_t *v42 = *v40;
      if (v61) {
        return (void *)llvm::MetadataTracking::track((uint64_t)(v9 + 3), v61, 2);
      }
    }
  }
  return result;
}

uint64_t sub_1CD29F234@<X0>(uint64_t result@<X0>, unsigned __int8 ***a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  int v44 = 0;
  unsigned int v5 = (uint64_t ****)(a2 + 40);
  int v6 = (uint64_t ***)a2[41];
  if (v6 == (uint64_t ***)(a2 + 40)) {
    goto LABEL_47;
  }
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    for (uint64_t i = v6[7]; i != (uint64_t **)(v6 + 6); uint64_t i = (uint64_t **)i[1])
    {
      if ((i[2][1] & 0x10) == 0 && (*((_WORD *)i + 22) & 1) == 0)
      {
        uint64_t v12 = (unsigned __int8 **)(i + 7);
        unint64_t v11 = (unsigned __int8 *)i[7];
        if (v11)
        {
          if (*((_DWORD *)v11 + 1))
          {
            *a4 = v11;
            uint64_t result = llvm::MetadataTracking::track((uint64_t)a4, v11, 2);
            if (!v44) {
              goto LABEL_20;
            }
            int v34 = *v44;
            if ((v34 - 4) > 0x1E)
            {
              if ((v34 - 3) >= 0xFFFFFFFE) {
                int v37 = v44;
              }
              else {
                int v37 = 0;
              }
              if ((v34 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v36 = (unint64_t)(v37 + 8);
                goto LABEL_53;
              }
              if (v34 == 3) {
                *((void *)v44 + 1) = 0;
              }
            }
            else if ((v44[1] & 0x7F) == 2 || *((_DWORD *)v44 + 3))
            {
              uint64_t v35 = *((void *)v44 + 2);
              if ((v35 & 4) != 0)
              {
                unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
                if (v36)
                {
LABEL_53:
                  uint64_t v45 = &v44;
                  uint64_t result = sub_1CC5FA668(v36 + 16, &v45);
                }
              }
            }
LABEL_20:
            if (!*a4) {
              goto LABEL_47;
            }
            uint64_t v14 = *a2;
            uint64_t v15 = **(void **)**a2;
            uint64_t v45 = *a2;
            int v16 = *(_DWORD *)(v15 + 2496);
            if (v16)
            {
              uint64_t v17 = *(void *)(v15 + 2480);
              int v18 = v16 - 1;
              unsigned int v19 = v18 & ((v14 >> 4) ^ (v14 >> 9));
              BOOL v20 = (unsigned __int8 ***)(v17 + 40 * v19);
              unsigned int v21 = *v20;
              if (*v20 == v14)
              {
LABEL_23:
                uint64_t v22 = v20[1];
                if (*(_DWORD *)v22)
                {
                  uint64_t v23 = 16 * *((unsigned int *)v20 + 4) - 16;
                  do
                  {
                    int v24 = *((_DWORD *)v22 + 4);
                    v22 += 2;
                    v23 -= 16;
                  }
                  while (v24);
                }
                sub_1CD29AE80(v9, *(void *)&v22[1][-8 * *((unsigned int *)v22[1] + 2) + 40]);
                uint64_t v26 = *a4;
                do
                {
                  __int16 v27 = v26;
                  uint64_t v28 = *((unsigned int *)v26 + 2);
                  if (v28 != 2) {
                    break;
                  }
                  uint64_t v26 = (unsigned __int8 *)*((void *)v26 - 1);
                }
                while (v26);
                for (uint64_t j = *(void *)&v27[-8 * v28];
                      (*(unsigned char *)j & 0xFE) == 0x12;
                return sub_1CD29F5E4(v9[1], *(_DWORD *)(j + 28), 0, (unsigned __int8 *)j, 1, a3, *(unsigned __int16 *)(*(void *)(*(void *)(v9[1] + 272) + 8) + 1624), v25, v9[393]);
              }
              uint64_t v30 = 0;
              int v31 = 1;
              while (v21 != (unsigned __int8 **)-4096)
              {
                if (v30) {
                  BOOL v32 = 0;
                }
                else {
                  BOOL v32 = v21 == (unsigned __int8 **)-8192;
                }
                if (v32) {
                  uint64_t v30 = v20;
                }
                unsigned int v33 = v19 + v31++;
                unsigned int v19 = v33 & v18;
                BOOL v20 = (unsigned __int8 ***)(v17 + 40 * v19);
                unsigned int v21 = *v20;
                if (*v20 == v14) {
                  goto LABEL_23;
                }
              }
              if (v30) {
                char v38 = v30;
              }
              else {
                char v38 = v20;
              }
            }
            else
            {
              char v38 = 0;
            }
            BOOL v20 = (unsigned __int8 ***)sub_1CC609054(v15 + 2480, (uint64_t)&v45, (uint64_t *)&v45, v38);
            uint64_t v39 = (uint64_t)v45;
            v20[3] = 0;
            v20[4] = 0;
            *BOOL v20 = (unsigned __int8 **)v39;
            v20[1] = (unsigned __int8 **)(v20 + 3);
            v20[2] = (unsigned __int8 **)0x100000000;
            goto LABEL_23;
          }
          if (v12 != &v44)
          {
            if (!v44) {
              goto LABEL_14;
            }
            int v40 = *v44;
            if ((v40 - 4) > 0x1E)
            {
              if ((v40 - 3) >= 0xFFFFFFFE) {
                uint64_t v43 = v44;
              }
              else {
                uint64_t v43 = 0;
              }
              if ((v40 - 3) <= 0xFFFFFFFD)
              {
                if (v40 == 3) {
                  *((void *)v44 + 1) = 0;
                }
LABEL_14:
                int v44 = v11;
LABEL_15:
                uint64_t result = llvm::MetadataTracking::track((uint64_t)&v44, v11, 2);
                goto LABEL_8;
              }
              unint64_t v42 = (unint64_t)(v43 + 8);
            }
            else
            {
              if ((v44[1] & 0x7F) != 2 && !*((_DWORD *)v44 + 3)) {
                goto LABEL_14;
              }
              uint64_t v41 = *((void *)v44 + 2);
              if ((v41 & 4) == 0) {
                goto LABEL_14;
              }
              unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
              if (!v42) {
                goto LABEL_14;
              }
            }
            uint64_t v45 = &v44;
            uint64_t result = sub_1CC5FA668(v42 + 16, &v45);
            unint64_t v11 = *v12;
            int v44 = v11;
            if (v11) {
              goto LABEL_15;
            }
          }
        }
      }
LABEL_8:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*((_WORD *)i + 22) & 8) != 0)
          uint64_t i = (uint64_t **)i[1];
      }
    }
    int v6 = (uint64_t ***)v6[1];
    if (v6 != (uint64_t ***)v5) {
      continue;
    }
    break;
  }
  int v13 = v44;
  *a4 = v44;
  if (v13)
  {
    uint64_t result = llvm::MetadataTracking::retrack((uint64_t)&v44, v13, (uint64_t)a4);
    goto LABEL_20;
  }
LABEL_47:
  *a4 = 0;
  return result;
}

uint64_t sub_1CD29F5E4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  if (!a4)
  {
    uint64_t v13 = 1;
    goto LABEL_15;
  }
  int v10 = *a4;
  unint64_t v11 = a4;
  if (v10 != 15)
  {
    unint64_t v11 = *(unsigned __int8 **)&a4[-8 * *((unsigned int *)a4 + 2)];
    if (!v11) {
      goto LABEL_8;
    }
  }
  if (*(void *)&v11[-8 * *((unsigned int *)v11 + 2)])
  {
    if (!a2) {
      goto LABEL_12;
    }
  }
  else if (!a2)
  {
    goto LABEL_12;
  }
  if (a7 >= 4 && v10 == 19)
  {
LABEL_8:
    uint64_t v12 = *(void *)(a9 + 8 * a6);
LABEL_13:
    a4 = *(unsigned __int8 **)&a4[-8 * *((unsigned int *)a4 + 2)];
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v12 = *(void *)(a9 + 8 * a6);
  if (v10 != 15) {
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v13 = sub_1CD293A58(v12, (uint64_t)a4);
LABEL_15:
  uint64_t v14 = *(void *)(a1 + 272);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 712);

  return v15(v14, v13);
}

unsigned __int8 ***sub_1CD29F74C(uint64_t *a1, unsigned __int8 ***a2)
{
  a1[370] = (uint64_t)a2;
  uint64_t v4 = *a2;
  uint64_t v5 = **(void **)**a2;
  uint64_t v35 = *a2;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 2480);
    int v8 = v6 - 1;
    unsigned int v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t result = (unsigned __int8 ***)(v7 + 40 * v9);
    unint64_t v11 = *result;
    if (*result == v4) {
      goto LABEL_3;
    }
    int v24 = 0;
    int v25 = 1;
    while (v11 != (unsigned __int8 **)-4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v11 == (unsigned __int8 **)-8192;
      }
      if (v26) {
        int v24 = result;
      }
      unsigned int v27 = v9 + v25++;
      unsigned int v9 = v27 & v8;
      uint64_t result = (unsigned __int8 ***)(v7 + 40 * v9);
      unint64_t v11 = *result;
      if (*result == v4) {
        goto LABEL_3;
      }
    }
    if (v24) {
      int v31 = v24;
    }
    else {
      int v31 = result;
    }
  }
  else
  {
    int v31 = 0;
  }
  uint64_t result = (unsigned __int8 ***)sub_1CC609054(v5 + 2480, (uint64_t)&v35, (uint64_t *)&v35, v31);
  BOOL v32 = v35;
  result[3] = 0;
  result[4] = 0;
  *uint64_t result = v32;
  result[1] = (unsigned __int8 **)(result + 3);
  result[2] = (unsigned __int8 **)0x100000000;
LABEL_3:
  uint64_t v12 = result[1];
  if (*(_DWORD *)v12)
  {
    uint64_t v13 = 16 * *((unsigned int *)result + 4) - 16;
    do
    {
      int v14 = *((_DWORD *)v12 + 4);
      v12 += 2;
      v13 -= 16;
    }
    while (v14);
  }
  uint64_t v15 = *(void *)&v12[1][-8 * *((unsigned int *)v12[1] + 2) + 40];
  if (*(_DWORD *)(v15 + 36))
  {
    uint64_t v16 = sub_1CD29AE80(a1, v15);
    uint64_t v17 = *(void **)(a1[1] + 272);
    uint64_t v18 = v17[1];
    int v19 = (*(uint64_t (**)(void *))(*v17 + 96))(v17);
    int v20 = *(_DWORD *)(v16 + 312);
    if (v19) {
      int v20 = 0;
    }
    *(_DWORD *)(v18 + 1632) = v20;
    uint64_t result = (unsigned __int8 ***)sub_1CD29F234((uint64_t)a1, a2, *(_DWORD *)(*(void *)(*(void *)(a1[1] + 272) + 8) + 1632), &v34);
    unsigned int v21 = (unsigned __int8 **)(a1 + 6);
    if (&v34 != v21)
    {
      uint64_t v22 = *v21;
      if (*v21)
      {
        int v28 = *v22;
        if ((v28 - 4) > 0x1E)
        {
          if ((v28 - 3) >= 0xFFFFFFFE) {
            unsigned int v33 = *v21;
          }
          else {
            unsigned int v33 = 0;
          }
          if ((v28 - 3) < 0xFFFFFFFE)
          {
            if (v28 == 3) {
              *((void *)v22 + 1) = 0;
            }
            goto LABEL_11;
          }
          unint64_t v30 = (unint64_t)(v33 + 8);
        }
        else
        {
          if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
            goto LABEL_11;
          }
          uint64_t v29 = *((void *)v22 + 2);
          if ((v29 & 4) == 0) {
            goto LABEL_11;
          }
          unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
          if (!v30) {
            goto LABEL_11;
          }
        }
        uint64_t v35 = v21;
        uint64_t result = (unsigned __int8 ***)sub_1CC5FA668(v30 + 16, &v35);
      }
LABEL_11:
      uint64_t v23 = v34;
      *unsigned int v21 = v34;
      if (v23) {
        return (unsigned __int8 ***)llvm::MetadataTracking::retrack((uint64_t)&v34, v23, (uint64_t)v21);
      }
      return result;
    }
    if (v34) {
      return (unsigned __int8 ***)llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
    }
  }
  return result;
}

double sub_1CD29F9AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2968);
  if (v2) {
    sub_1CD29D60C(a1, v2);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 2960) = 0u;
  return result;
}

uint64_t sub_1CD29F9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v396 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(uint64_t ****)a2;
  if ((*(unsigned char *)(*(void *)a2 + 23) & 0x20) == 0) {
    goto LABEL_9;
  }
  uint64_t v4 = ***v3;
  v376 = *(void **)a2;
  int v5 = *(_DWORD *)(v4 + 2496);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 2480);
    int v7 = v5 - 1;
    unsigned int v8 = v7 & ((v3 >> 4) ^ (v3 >> 9));
    unsigned int v9 = (uint64_t ****)(v6 + 40 * v8);
    int v10 = *v9;
    if (*v9 == v3) {
      goto LABEL_4;
    }
    __int16 v76 = 0;
    int v77 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      if (v76) {
        BOOL v78 = 0;
      }
      else {
        BOOL v78 = v10 == (uint64_t ***)-8192;
      }
      if (v78) {
        __int16 v76 = v9;
      }
      unsigned int v79 = v8 + v77++;
      unsigned int v8 = v79 & v7;
      unsigned int v9 = (uint64_t ****)(v6 + 40 * v8);
      int v10 = *v9;
      if (*v9 == v3) {
        goto LABEL_4;
      }
    }
    if (v76) {
      v202 = v76;
    }
    else {
      v202 = v9;
    }
  }
  else
  {
    v202 = 0;
  }
  unsigned int v9 = (uint64_t ****)sub_1CC609054(v4 + 2480, (uint64_t)&v376, (uint64_t *)&v376, v202);
  v203 = (uint64_t ***)v376;
  v9[3] = 0;
  v9[4] = 0;
  *unsigned int v9 = v203;
  v9[1] = (uint64_t ***)(v9 + 3);
  v9[2] = (uint64_t ***)0x100000000;
LABEL_4:
  uint64_t v11 = *((unsigned int *)v9 + 4);
  if (!v11)
  {
LABEL_9:
    uint64_t v14 = 0;
    goto LABEL_10;
  }
  uint64_t v12 = (uint64_t *)(v9[1] + 1);
  uint64_t v13 = 16 * v11;
  uint64_t v14 = 0;
  while (*((_DWORD *)v12 - 2))
  {
    v12 += 2;
    v13 -= 16;
    if (!v13) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = *v12;
LABEL_10:
  uint64_t v15 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(*(void *)(v15 + 272) + 8) + 1632) = 0;
  uint64_t v16 = *(void *)(a1 + 240);
  uint64_t result = sub_1CD29B8B0((uint64_t *)(a1 + 536), *(void *)(v14 - 8 * *(unsigned int *)(v14 + 8) + 40));
  if (*(_DWORD *)(*(void *)(result + 72) + 36) != 3)
  {
    uint64_t v18 = (uint64_t *)result;
    uint64_t v355 = v16;
    v361[0] = 0;
    v361[1] = 0;
    int v362 = 0;
    v376 = (void *)1;
    uint64_t v19 = 8;
    int64x2_t v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)((char *)&v376 + v19) = v20;
      v19 += 24;
    }
    while (v19 != 104);
    uint64_t v21 = *(void *)(v15 + 280);
    uint64_t v22 = *(unsigned int *)(v21 + 776);
    if (v22)
    {
      uint64_t v312 = 32 * v22;
      v313 = (const llvm::DILocation **)(*(void *)(v21 + 768) + 24);
      do
      {
        if (*(v313 - 3))
        {
          v314 = *((_DWORD *)*v313 + 2) == 2 ? (void *)*((void *)*v313 - 1) : 0;
          v371 = *(v313 - 3);
          v372 = v314;
          sub_1CD2A9540((uint64_t)&v386, (uint64_t)v361, &v371);
          LexicalScope = llvm::LexicalScopes::findLexicalScope((int8x8_t *)(a1 + 64), *v313);
          if (LexicalScope)
          {
            sub_1CD29E438((int8x8_t *)a1, v18, (unsigned __int8 *)v371, LexicalScope[1]);
            operator new();
          }
        }
        v313 += 4;
        v312 -= 32;
      }
      while (v312);
    }
    if ((v376 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v377, 8);
    }
    uint64_t v23 = *(long long **)(a1 + 296);
    if (v23 == *(long long **)(a1 + 304))
    {
LABEL_17:
      int v24 = *(long long **)(a1 + 344);
      int v25 = *(long long **)(a1 + 352);
      if (v24 == v25)
      {
LABEL_18:
        uint64_t v26 = *(void *)(v14 - 8 * *(unsigned int *)(v14 + 8) + 56);
        if (v26) {
          unsigned int v27 = (unint64_t *)(v26 - 8 * *(unsigned int *)(v26 + 8));
        }
        else {
          unsigned int v27 = 0;
        }
        for (; v27 != (unint64_t *)v26; ++v27)
        {
          v204 = (unsigned __int8 *)*v27;
          long long v386 = *v27;
          sub_1CD2ABD98((uint64_t)v361, &v386, (uint64_t)&v376);
          if (v378[0])
          {
            v205 = (void *)(a1 + 72);
            int v206 = *v204;
            if (v206 == 25)
            {
              int8x8_t v207 = *(int8x8_t *)(a1 + 80);
              if (v207)
              {
                unint64_t v208 = *(void *)&v204[-8 * *((unsigned int *)v204 + 2)];
                unint64_t v209 = 0x9DDFEA08EB382D69 * (((8 * v208) + 8) ^ HIDWORD(v208));
                unint64_t v210 = 0x9DDFEA08EB382D69 * (HIDWORD(v208) ^ (v209 >> 47) ^ v209);
                unint64_t v211 = 0x9DDFEA08EB382D69 * (v210 ^ (v210 >> 47));
                uint8x8_t v212 = (uint8x8_t)vcnt_s8(v207);
                v212.i16[0] = vaddlv_u8(v212);
                if (v212.u32[0] > 1uLL) {
                  uint64_t v213 = v211 < *(void *)&v207 ? v211 : v211 % *(void *)&v207;
                }
                else {
                  uint64_t v213 = v211 & (*(void *)&v207 - 1);
                }
                v214 = *(void **)(*v205 + 8 * v213);
                if (v214)
                {
                  v215 = (void *)*v214;
                  if (*v214)
                  {
                    do
                    {
                      unint64_t v216 = v215[1];
                      if (v216 == v211)
                      {
                        if (v215[2] == v208) {
                          goto LABEL_313;
                        }
                      }
                      else
                      {
                        if (v212.u32[0] <= 1uLL)
                        {
                          v216 &= *(void *)&v207 - 1;
                        }
                        else if (v216 >= *(void *)&v207)
                        {
                          v216 %= *(void *)&v207;
                        }
                        if (v216 != v213) {
                          break;
                        }
                      }
                      v215 = (void *)*v215;
                    }
                    while (v215);
                  }
                }
              }
            }
            else if (v206 == 26)
            {
              v376 = *(void **)&v204[-8 * *((unsigned int *)v204 + 2)];
              v215 = sub_1CC2E0EE8(v205, &v376);
              if (v215) {
LABEL_313:
              }
                sub_1CD29EA08((int8x8_t *)a1, v18, (uint64_t)(v215 + 3), v204);
            }
          }
        }
        uint64_t v28 = *(void *)(a1 + 8);
        uint64_t v29 = *(void *)(v28 + 376);
        uint64_t v30 = *(void *)(v28 + 384);
        while (v29 != v30)
        {
          sub_1CD294700((uint64_t)v18, *(void *)(v29 + 8), *(void *)(v29 + 16));
          v29 += 24;
        }
        uint64_t v31 = v18[9];
        if (!*(unsigned char *)(v31 + 49) && *(_DWORD *)(v31 + 36) == 2 && !*(_DWORD *)(a1 + 200) && !*(unsigned char *)(a1 + 4481)) {
          goto LABEL_71;
        }
        uint64_t v32 = *(unsigned int *)(a1 + 200);
        if (v32)
        {
          unsigned int v33 = *(uint64_t **)(a1 + 192);
          int v34 = &v33[v32];
          do
          {
            uint64_t v35 = *v33;
            uint64_t v36 = *(void *)(*v33 + 8);
            uint64_t v37 = *(unsigned int *)(v36 + 8);
            uint64_t v38 = *(void *)(v36 - 8 * v37 + 56);
            if (v38) {
              uint64_t v39 = (uint64_t *)(v38 - 8 * *(unsigned int *)(v38 + 8));
            }
            else {
              uint64_t v39 = 0;
            }
            if (v39 != (uint64_t *)v38)
            {
              do
              {
                uint64_t v201 = *v39;
                long long v386 = (unint64_t)*v39;
                sub_1CD2ABD98((uint64_t)v361, &v386, (uint64_t)&v376);
                if (v378[0])
                {
                  v348 = *(llvm::DILocalScope **)(v201 - 8 * *(unsigned int *)(v201 + 8));
                  if (!sub_1CD297EF0(v18, v201))
                  {
                    llvm::LexicalScopes::getOrCreateAbstractScope((int8x8_t *)(a1 + 64), (unint64_t)v348);
                    sub_1CD297F88(v18, (unsigned __int8 *)v201);
                  }
                }
                ++v39;
              }
              while (v39 != (uint64_t *)v38);
              uint64_t v36 = *(void *)(v35 + 8);
              uint64_t v37 = *(unsigned int *)(v36 + 8);
            }
            uint64_t v40 = *(void *)(v36 - 8 * v37 + 40);
            if (*(unsigned char *)(a1 + 3549)) {
              BOOL v41 = byte_1EBCFEEF0 == 0;
            }
            else {
              BOOL v41 = 0;
            }
            if (v41)
            {
              uint64_t v43 = v18;
              if (!*(unsigned char *)(v40 + 48)) {
                goto LABEL_38;
              }
            }
            unint64_t v42 = (uint64_t *)sub_1CD29AE80((uint64_t *)a1, v40);
            uint64_t v43 = v42;
            int v44 = (uint64_t *)v42[41];
            if (!v44) {
              goto LABEL_38;
            }
            if (!byte_1EBCFEEF0) {
              unint64_t v42 = v18;
            }
            sub_1CD297A8C(v42, v35);
            int v305 = *(unsigned __int8 *)(v43[9] + 48);
            uint64_t v43 = v44;
            if (v305) {
LABEL_38:
            }
              sub_1CD297A8C(v43, v35);
            ++v33;
          }
          while (v33 != v34);
        }
        uint64_t v45 = *(void *)(a1 + 2664);
        uint64_t v46 = *(unsigned int *)(a1 + 2676);
        if (v45 == *(void *)(a1 + 2656))
        {
          uint64_t v47 = v355;
          if (v46)
          {
            int v48 = 0;
            uint64_t v49 = 8 * v46;
            uint64_t v50 = *(uint64_t **)(a1 + 2664);
            while (*v50 != v14)
            {
              if (*v50 == -2) {
                int v48 = v50;
              }
              ++v50;
              v49 -= 8;
              if (!v49)
              {
                if (!v48) {
                  goto LABEL_48;
                }
                uint64_t *v48 = v14;
                --*(_DWORD *)(a1 + 2680);
                goto LABEL_50;
              }
            }
            goto LABEL_52;
          }
LABEL_48:
          unsigned int v51 = *(_DWORD *)(a1 + 2672);
          if (v46 < v51)
          {
            *(_DWORD *)(a1 + 2676) = v46 + 1;
            *(void *)(v45 + 8 * v46) = v14;
            goto LABEL_50;
          }
        }
        else
        {
          unsigned int v51 = *(_DWORD *)(a1 + 2672);
          uint64_t v47 = v355;
        }
        if (3 * v51 <= 4 * ((int)v46 - *(_DWORD *)(a1 + 2680)))
        {
          if (v51 >= 0x40) {
            v51 *= 2;
          }
          else {
            unsigned int v51 = 128;
          }
        }
        else if (v51 - v46 >= v51 >> 3)
        {
LABEL_75:
          unsigned int v68 = v51 - 1;
          unsigned int v69 = (v51 - 1) & ((v14 >> 4) ^ (v14 >> 9));
          unint64_t v70 = (uint64_t *)(v45 + 8 * v69);
          uint64_t v71 = *v70;
          if (*v70 != -1)
          {
            uint64_t v72 = 0;
            int v73 = 1;
            while (v71 != v14)
            {
              if (v72) {
                BOOL v74 = 0;
              }
              else {
                BOOL v74 = v71 == -2;
              }
              if (v74) {
                uint64_t v72 = v70;
              }
              unsigned int v75 = v69 + v73++;
              unsigned int v69 = v75 & v68;
              unint64_t v70 = (uint64_t *)(v45 + 8 * (v75 & v68));
              uint64_t v71 = *v70;
              if (*v70 == -1) {
                goto LABEL_98;
              }
            }
            goto LABEL_52;
          }
          uint64_t v72 = 0;
LABEL_98:
          if (v72) {
            unint64_t v80 = v72;
          }
          else {
            unint64_t v80 = v70;
          }
          if (*v80 == v14)
          {
LABEL_52:
            unint64_t v53 = sub_1CD2973CC(v18, v14, v47);
            uint64_t v54 = v18;
            uint64_t v55 = (void *)v18[41];
            if (v55 && *(_DWORD *)(a1 + 200) && *(unsigned char *)(v18[9] + 48)) {
              sub_1CD2973CC(v55, v14, v47);
            }
            if ((*(unsigned char *)(v14 + 43) & 0x20) != 0 && (*(_DWORD *)(v14 + 44) & 8) != 0)
            {
              uint64_t v56 = v18[24];
              if (*(_WORD *)(*(void *)(*(void *)(*(void *)(v56 + 8) + 272) + 8) + 1624) == 4) {
                int v57 = *(_DWORD *)(v56 + 5512) == 2 ? 122 : 8471;
              }
              else {
                int v57 = 122;
              }
              sub_1CD2B26C0((unint64_t)v18, v53, v57);
              uint64_t v58 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
              uint64_t v59 = a2 + 320;
              uint64_t v60 = *(void *)(a2 + 328);
              if (v60 != a2 + 320)
              {
                uint64_t v61 = v58;
                do
                {
                  for (unint64_t i = *(void *)(v60 + 56); i != v60 + 48; unint64_t i = *(void *)(i + 8))
                  {
                    uint64_t v63 = *(unsigned __int16 **)(i + 16);
                    unsigned int v64 = *v63;
                    if (v64 == 20) {
                      continue;
                    }
                    uint64_t v65 = *((void *)v63 + 1);
                    if ((v65 & 0x80) == 0) {
                      continue;
                    }
                    BOOL v304 = v64 > 0x1F;
                    unsigned int v219 = (1 << v64) & 0x8E000000;
                    if (!v304 && v219 != 0) {
                      continue;
                    }
                    __int16 v221 = *(_WORD *)(i + 44);
                    if (v221) {
                      continue;
                    }
                    if ((v221 & 0xC) == 0 || (v221 & 4) != 0)
                    {
                      if ((v65 & 0x20000) == 0) {
                        goto LABEL_364;
                      }
                    }
                    else
                    {
                      unint64_t v222 = i;
                      if ((v65 & 0x20000) == 0)
                      {
                        while ((*(_WORD *)(v222 + 44) & 8) != 0)
                        {
                          unint64_t v222 = *(void *)(v222 + 8);
                          if ((*(unsigned char *)(*(void *)(v222 + 16) + 10) & 2) != 0) {
                            goto LABEL_363;
                          }
                        }
                        goto LABEL_364;
                      }
                    }
LABEL_363:
                    if ((v221 & 8) == 0) {
                      goto LABEL_67;
                    }
LABEL_364:
                    uint64_t v233 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v61 + 1280))(v61, i);
                    if (*(unsigned char *)v233 != 10
                      && (*(unsigned char *)v233 || (*(_DWORD *)(v233 + 4) - 1) > 0x3FFFFFFE))
                    {
                      continue;
                    }
                    if (!*(unsigned char *)v233)
                    {
                      if (!*(_DWORD *)(v233 + 4)) {
                        continue;
                      }
                      int v356 = *(_DWORD *)(v233 + 4);
                      goto LABEL_395;
                    }
                    v234 = *(uint64_t ****)(v233 + 16);
                    if (v234) {
                      BOOL v235 = *((unsigned char *)v234 + 16) == 0;
                    }
                    else {
                      BOOL v235 = 0;
                    }
                    if (!v235 || (*((unsigned char *)v234 + 23) & 0x20) == 0) {
                      continue;
                    }
                    uint64_t v236 = ***v234;
                    v376 = *(void **)(v233 + 16);
                    int v237 = *(_DWORD *)(v236 + 2496);
                    unsigned int v238 = v234 >> 4;
                    if (!v237)
                    {
                      unsigned int v357 = v234 >> 4;
                      v276 = 0;
LABEL_451:
                      v242 = sub_1CC609054(v236 + 2480, (uint64_t)&v376, (uint64_t *)&v376, v276);
                      v277 = v376;
                      v242[3] = 0;
                      v242[4] = 0;
                      void *v242 = v277;
                      v242[1] = v242 + 3;
                      v242[2] = 0x100000000;
                      unsigned int v238 = v357;
                      goto LABEL_376;
                    }
                    uint64_t v239 = *(void *)(v236 + 2480);
                    int v240 = v237 - 1;
                    unsigned int v241 = v240 & (v238 ^ (v234 >> 9));
                    v242 = (void *)(v239 + 40 * v241);
                    v243 = (void ***)*v242;
                    if ((uint64_t ***)*v242 != v234)
                    {
                      v259 = 0;
                      int v260 = 1;
                      while (v243 != (void ***)-4096)
                      {
                        if (v259) {
                          BOOL v261 = 0;
                        }
                        else {
                          BOOL v261 = v243 == (void ***)-8192;
                        }
                        if (v261) {
                          v259 = v242;
                        }
                        unsigned int v262 = v241 + v260++;
                        unsigned int v241 = v262 & v240;
                        v242 = (void *)(v239 + 40 * v241);
                        v243 = (void ***)*v242;
                        if ((uint64_t ***)*v242 == v234) {
                          goto LABEL_376;
                        }
                      }
                      unsigned int v357 = v234 >> 4;
                      if (v259) {
                        v276 = v259;
                      }
                      else {
                        v276 = v242;
                      }
                      goto LABEL_451;
                    }
LABEL_376:
                    uint64_t v244 = *((unsigned int *)v242 + 4);
                    if (!v244) {
                      continue;
                    }
                    v245 = (void *)(v242[1] + 8);
                    uint64_t v246 = 16 * v244;
                    while (*((_DWORD *)v245 - 2))
                    {
                      v245 += 2;
                      v246 -= 16;
                      if (!v246) {
                        goto LABEL_65;
                      }
                    }
                    if (!*v245) {
                      continue;
                    }
                    if ((*((unsigned char *)v234 + 23) & 0x20) == 0)
                    {
LABEL_453:
                      int v356 = 0;
LABEL_395:
                      uint64_t v352 = 0;
                      goto LABEL_396;
                    }
                    uint64_t v263 = ***v234;
                    v376 = v234;
                    int v264 = *(_DWORD *)(v263 + 2496);
                    if (v264)
                    {
                      uint64_t v265 = *(void *)(v263 + 2480);
                      int v266 = v264 - 1;
                      unsigned int v267 = v266 & (v238 ^ (v234 >> 9));
                      v268 = (uint64_t ****)(v265 + 40 * v267);
                      v269 = *v268;
                      if (*v268 == v234) {
                        goto LABEL_438;
                      }
                      v288 = 0;
                      int v289 = 1;
                      while (v269 != (uint64_t ***)-4096)
                      {
                        if (v288) {
                          BOOL v290 = 0;
                        }
                        else {
                          BOOL v290 = v269 == (uint64_t ***)-8192;
                        }
                        if (v290) {
                          v288 = v268;
                        }
                        unsigned int v291 = v267 + v289++;
                        unsigned int v267 = v291 & v266;
                        v268 = (uint64_t ****)(v265 + 40 * v267);
                        v269 = *v268;
                        if (*v268 == v234) {
                          goto LABEL_438;
                        }
                      }
                      if (v288) {
                        v301 = v288;
                      }
                      else {
                        v301 = v268;
                      }
                    }
                    else
                    {
                      v301 = 0;
                    }
                    v268 = (uint64_t ****)sub_1CC609054(v263 + 2480, (uint64_t)&v376, (uint64_t *)&v376, v301);
                    v302 = (uint64_t ***)v376;
                    v268[3] = 0;
                    v268[4] = 0;
                    *v268 = v302;
                    v268[1] = (uint64_t ***)(v268 + 3);
                    v268[2] = (uint64_t ***)0x100000000;
LABEL_438:
                    uint64_t v270 = *((unsigned int *)v268 + 4);
                    if (!v270) {
                      goto LABEL_453;
                    }
                    v271 = (uint64_t *)(v268[1] + 1);
                    uint64_t v272 = 16 * v270;
                    while (*((_DWORD *)v271 - 2))
                    {
                      int v356 = 0;
                      uint64_t v352 = 0;
                      v271 += 2;
                      v272 -= 16;
                      if (!v272) {
                        goto LABEL_396;
                      }
                    }
                    int v356 = 0;
                    uint64_t v352 = *v271;
LABEL_396:
                    int v248 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v61 + 1136))(v61, i);
                    unint64_t v249 = i;
                    if ((*(_WORD *)(i + 44) & 4) != 0)
                    {
                      unint64_t v249 = i;
                      do
                        unint64_t v249 = *(void *)v249 & 0xFFFFFFFFFFFFFFF8;
                      while ((*(_WORD *)(v249 + 44) & 4) != 0);
                    }
                    int v349 = v248;
                    if (v248)
                    {
                      uint64_t v250 = v54[24];
                      if (*(_WORD *)(*(void *)(*(void *)(*(void *)(v250 + 8) + 272) + 8) + 1624) == 4
                        && *(_DWORD *)(v250 + 5512) != 2)
                      {
                        uint64_t v345 = sub_1CD28F6F0(a1, v249);
                      }
                      else
                      {
                        uint64_t v345 = 0;
                      }
                      uint64_t v251 = sub_1CD28F688(a1, v249);
                    }
                    else
                    {
                      uint64_t v345 = sub_1CD28F6F0(a1, v249);
                      uint64_t v251 = 0;
                    }
                    v350 = (llvm::DILocalScope *)sub_1CD8A6260(v54, v53, v352, v349, v345, v251, v356);
                    if (*(unsigned char *)(a1 + 3551))
                    {
                      v376 = v378;
                      uint64_t v377 = 0x400000000;
                      v337 = *(uint64_t **)(*(void *)(i + 24) + 32);
                      *(void *)&long long v386 = i;
                      v379 = 0;
                      if (sub_1CD4678E0(v337 + 93, &v386, &v379))
                      {
                        v273 = v379;
                        v274 = (void ***)v337[93];
                        uint64_t v275 = *((unsigned int *)v337 + 190);
                      }
                      else
                      {
                        v274 = (void ***)v337[93];
                        uint64_t v275 = *((unsigned int *)v337 + 190);
                        v273 = &v274[4 * v275];
                      }
                      if (v273 != &v274[4 * v275])
                      {
                        uint64_t v333 = *(void *)i;
                        uint64_t v335 = *(void *)(i + 24);
                        v380 = 0;
                        v379 = 0;
                        LODWORD(v381) = 0;
                        uint64_t v384 = 0;
                        v382 = 0;
                        v383 = 0;
                        Impl = llvm::DIExpression::getImpl(**(void ***)*v337, 0, 0, 0, 1);
                        uint64_t v278 = *((unsigned int *)v273 + 4);
                        if (v278)
                        {
                          v358 = (int *)v273[1];
                          uint64_t v342 = 8 * v278;
                          do
                          {
                            int v279 = *v358;
                            v371 = &v373;
                            LODWORD(v373) = v279;
                            v374 = Impl;
                            v372 = (void *)0x200000001;
                            LODWORD(v386) = v279;
                            *((void *)&v386 + 1) = (char *)&v387 + 8;
                            *(void *)&long long v387 = 0x200000000;
                            sub_1CD41F46C((uint64_t)&v386 + 8, (uint64_t)&v371);
                            sub_1CD8A9E00((uint64_t)&v379, (int *)&v386, (uint64_t)&v386 + 8);
                            if (*((long long **)&v386 + 1) != (long long *)((char *)&v387 + 8)) {
                              free(*((void **)&v386 + 1));
                            }
                            if (v371 != &v373) {
                              free(v371);
                            }
                            v358 += 2;
                            v342 -= 8;
                          }
                          while (v342);
                        }
                        uint64_t v280 = *(void *)(i + 32);
                        uint64_t v281 = *(void *)(i + 16);
                        unsigned int v282 = *(unsigned __int8 *)(v281 + 4);
                        uint64_t v283 = *(void *)(v281 + 8);
                        uint64_t v284 = *(unsigned int *)(i + 40);
                        if ((v283 & 2) != 0)
                        {
                          if (v284 != v282)
                          {
                            unsigned int v285 = v282;
                            do
                            {
                              int v300 = *(_DWORD *)(v280 + 32 * v282);
                              if ((v300 & 0x10000FF) != 0x1000000) {
                                break;
                              }
                              v285 += (v300 & 0x2000000) == 0;
                              if (v284 - 1 == v282) {
                                break;
                              }
                              ++v282;
                            }
                            while ((v300 & 0x2000000) == 0);
                            goto LABEL_465;
                          }
                        }
                        else
                        {
                          unsigned int v285 = v282;
LABEL_465:
                          if (v285 != v284)
                          {
                            v286 = (_DWORD *)(v280 + 32 * v285 + 4);
                            uint64_t v287 = 32 * v284 - 32 * v285;
                            do
                            {
                              if ((*(v286 - 1) & 0x100000FF) == 0x10000000)
                              {
                                LODWORD(v386) = *v286;
                                uint64_t v359 = v287;
                                sub_1CD8A9D90((uint64_t)&v379, &v386);
                                uint64_t v287 = v359;
                              }
                              v286 += 8;
                              v287 -= 32;
                            }
                            while (v287);
                            uint64_t v283 = *(void *)(*(void *)(i + 16) + 8);
                          }
                        }
                        v353 = (void ***)v337[41];
                        if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
                        {
                          unint64_t v299 = i;
                          if ((v283 & 0x20000) == 0)
                          {
                            while ((*(_WORD *)(v299 + 44) & 8) != 0)
                            {
                              unint64_t v299 = *(void *)(v299 + 8);
                              if ((*(unsigned char *)(*(void *)(v299 + 16) + 10) & 2) != 0) {
                                goto LABEL_486;
                              }
                            }
                            goto LABEL_487;
                          }
LABEL_486:
                          if (sub_1CD2A4D50(*(void *)(i + 8), (uint64_t)&v379, (uint64_t)&v376)) {
                            goto LABEL_487;
                          }
                        }
                        else
                        {
                          if ((v283 & 0x20000) != 0) {
                            goto LABEL_486;
                          }
LABEL_487:
                          v293 = (void *)(v333 & 0xFFFFFFFFFFFFFFF8);
                          for (uint64_t j = (void *)(v335 + 48); j != v293; uint64_t j = (void *)(v335 + 48))
                          {
                            if (!sub_1CD2A4D50((uint64_t)v293, (uint64_t)&v379, (uint64_t)&v376)) {
                              goto LABEL_495;
                            }
                            v293 = (void *)(*v293 & 0xFFFFFFFFFFFFFFF8);
                          }
                          if ((void ***)v335 == v353)
                          {
                            v295 = **(void ***)*v337;
                            long long v386 = xmmword_1CFB33840;
                            v296 = llvm::DIExpression::getImpl(v295, &v386, 2, 0, 1);
                            v297 = v382;
                            v298 = v383;
                            v354 = v383;
                            v360 = v296;
                            while (v297 != (int **)v298)
                            {
                              sub_1CD2A54B4(((unint64_t)*(unsigned int *)v297 << 32) | 1, v360, v297[1], *((unsigned int *)v297 + 4), (uint64_t)&v376);
                              v297 += 7;
                              v298 = v354;
                            }
                          }
                        }
LABEL_495:
                        sub_1CD8AA4DC((uint64_t)&v379);
                      }
                      sub_1CD8A647C((unint64_t)v54, (uint64_t)v350, (uint64_t)&v376);
                      sub_1CD578584((char **)&v376);
                      continue;
                    }
LABEL_65:
                    ;
                  }
                  uint64_t v60 = *(void *)(v60 + 8);
                }
                while (v60 != v59);
              }
            }
LABEL_67:
            int v66 = *(_DWORD *)(a1 + 3336);
            if (v66 || *(_DWORD *)(a1 + 3340))
            {
              v252 = (_DWORD *)(a1 + 3328);
              uint64_t v253 = *(unsigned int *)(a1 + 3344);
              if (v253 > 4 * v66 && v253 >= 0x41)
              {
                sub_1CD8ACCFC(v252);
              }
              else
              {
                if (v253)
                {
                  uint64_t v254 = *(void *)v252 + 48;
                  uint64_t v255 = 112 * v253;
                  do
                  {
                    uint64_t v256 = *(void *)(v254 - 48);
                    if (v256 != -4096)
                    {
                      if (v256 != -8192)
                      {
                        v257 = *(void **)(v254 - 16);
                        if ((void *)v254 != v257) {
                          free(v257);
                        }
                        sub_1CB833A08(v254 - 40, *(void **)(v254 - 32));
                      }
                      *(void *)(v254 - 48) = -4096;
                    }
                    v254 += 112;
                    v255 -= 112;
                  }
                  while (v255);
                }
                *(void *)(a1 + 3336) = 0;
              }
            }
            int v67 = *(_DWORD *)(a1 + 3360);
            if (!v67 && !*(_DWORD *)(a1 + 3364)) {
              goto LABEL_71;
            }
            v306 = (_DWORD *)(a1 + 3352);
            uint64_t v307 = *(unsigned int *)(a1 + 3368);
            if (v307 > 4 * v67 && v307 >= 0x41)
            {
              sub_1CD8ACDB0(v306);
            }
            else
            {
              if (v307)
              {
                uint64_t v308 = *(void *)v306 + 24;
                uint64_t v309 = 56 * v307;
                while (1)
                {
                  uint64_t v310 = *(void *)(v308 - 24);
                  if (v310 == -8192) {
                    goto LABEL_532;
                  }
                  if (v310 != -4096) {
                    break;
                  }
LABEL_533:
                  v308 += 56;
                  v309 -= 56;
                  if (!v309) {
                    goto LABEL_534;
                  }
                }
                v311 = *(void **)(v308 - 16);
                if ((void *)v308 != v311) {
                  free(v311);
                }
LABEL_532:
                *(void *)(v308 - 24) = -4096;
                goto LABEL_533;
              }
LABEL_534:
              *(void *)(a1 + 3360) = 0;
            }
LABEL_71:
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 2960) = 0;
            return MEMORY[0x1D25D9CD0](v361[0], 8);
          }
          if (*v80 == -2) {
            --*(_DWORD *)(a1 + 2680);
          }
          else {
            ++*(_DWORD *)(a1 + 2676);
          }
          *unint64_t v80 = v14;
LABEL_50:
          unsigned int v52 = *(_DWORD *)(a1 + 2824);
          if (v52 >= *(_DWORD *)(a1 + 2828)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 2816) + 8 * v52) = v14;
          ++*(_DWORD *)(a1 + 2824);
          goto LABEL_52;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 2656), v51);
        unsigned int v51 = *(_DWORD *)(a1 + 2672);
        uint64_t v45 = *(void *)(a1 + 2664);
        goto LABEL_75;
      }
      while (1)
      {
        v318 = v18;
        long long v386 = *v24;
        uint64_t v319 = *((void *)v24 + 2);
        if (v319)
        {
          v320 = (unsigned __int8 *)v386;
          NonLexicalBlockFileScope = (void *)llvm::DILocalScope::getNonLexicalBlockFileScope(*(void *)(v386 - 8 * *(unsigned int *)(v386 + 8)));
          if (*((void *)&v386 + 1))
          {
            v376 = NonLexicalBlockFileScope;
            uint64_t v377 = *((void *)&v386 + 1);
            v322 = sub_1CD2A76FC((void *)(a1 + 112), &v376);
            if (v322)
            {
              uint64_t v317 = (uint64_t)(v322 + 4);
              goto LABEL_555;
            }
          }
          else
          {
            v376 = NonLexicalBlockFileScope;
            v316 = sub_1CC2E0EE8((void *)(a1 + 72), &v376);
            if (v316)
            {
              uint64_t v317 = (uint64_t)(v316 + 3);
LABEL_555:
              sub_1CD2A9540((uint64_t)&v376, (uint64_t)v361, &v386);
              sub_1CD28F688(a1, v319);
              sub_1CD29EA08((int8x8_t *)a1, v318, v317, v320);
            }
          }
        }
        int v24 = (long long *)((char *)v24 + 24);
        uint64_t v18 = v318;
        if (v24 == v25) {
          goto LABEL_18;
        }
      }
    }
    v331 = *(long long **)(a1 + 304);
    while (1)
    {
      long long v365 = *v23;
      v376 = 0;
      if (sub_1CD2A95D0(v361, &v365, &v376)) {
        goto LABEL_108;
      }
      v329 = (void **)(v23 + 1);
      if (!sub_1CD28D4C0(a1 + 272, (uint64_t)(v23 + 1))) {
        goto LABEL_108;
      }
      v160 = (unsigned __int8 *)v365;
      unint64_t v161 = *(void *)(v365 - 8 * *(unsigned int *)(v365 + 8));
      if (*((void *)&v365 + 1))
      {
        int8x8_t v162 = *(int8x8_t *)(a1 + 120);
        if (v162)
        {
          unint64_t v163 = 0x9DDFEA08EB382D69 * (((8 * v161) + 8) ^ HIDWORD(v161));
          unint64_t v164 = 0x9DDFEA08EB382D69 * (HIDWORD(v161) ^ (v163 >> 47) ^ v163);
          unint64_t v165 = 0x9DDFEA08EB382D69 * (((8 * DWORD2(v365)) + 8) ^ HIDWORD(*((void *)&v365 + 1)));
          unint64_t v166 = 0x9DDFEA08EB382D69 * (HIDWORD(*((void *)&v365 + 1)) ^ (v165 >> 47) ^ v165);
          unint64_t v167 = 0x9DDFEA08EB382D69 * (v166 ^ (v166 >> 47)) + 0x1E1D57147BCD7FB7 * (v164 ^ (v164 >> 47));
          uint8x8_t v168 = (uint8x8_t)vcnt_s8(v162);
          v168.i16[0] = vaddlv_u8(v168);
          if (v168.u32[0] <= 1uLL) {
            uint64_t v169 = (*(void *)&v162 - 1) & v167;
          }
          else {
            uint64_t v169 = v167 < *(void *)&v162 ? v167 : v167 % *(void *)&v162;
          }
          v170 = *(void **)(*(void *)(a1 + 112) + 8 * v169);
          if (v170)
          {
            while (1)
            {
              v170 = (void *)*v170;
              if (!v170) {
                break;
              }
              unint64_t v171 = v170[1];
              if (v171 == v167)
              {
                if (v170[2] == v161 && v170[3] == *((void *)&v365 + 1))
                {
                  uint64_t v173 = (uint64_t)(v170 + 4);
                  goto LABEL_252;
                }
              }
              else
              {
                if (v168.u32[0] <= 1uLL)
                {
                  v171 &= *(void *)&v162 - 1;
                }
                else if (v171 >= *(void *)&v162)
                {
                  v171 %= *(void *)&v162;
                }
                if (v171 != v169) {
                  goto LABEL_108;
                }
              }
            }
          }
        }
        goto LABEL_108;
      }
      v376 = *(void **)(v365 - 8 * *(unsigned int *)(v365 + 8));
      v225 = sub_1CC2E0EE8((void *)(a1 + 72), &v376);
      if (!v225) {
        goto LABEL_108;
      }
      uint64_t v173 = (uint64_t)(v225 + 3);
LABEL_252:
      v326 = (int8x8_t *)(a1 + 64);
      v327 = (uint64_t *)(a1 + 416);
      sub_1CD2A9540((uint64_t)&v376, (uint64_t)v361, &v365);
      uint64_t v328 = sub_1CD29EA08((int8x8_t *)a1, v18, v173, v160);
      v174 = (void *)*((void *)v23 + 2);
      unint64_t v175 = *v174 & 0xFFFFFFFFFFFFFFF8;
      int v176 = *((_DWORD *)v23 + 6);
      if (v176 == 2)
      {
        uint64_t v177 = v174[2];
        if ((v177 & 4) == 0) {
          goto LABEL_254;
        }
        unint64_t v218 = v177 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        unint64_t v218 = 0;
        if (v176 != 1) {
          goto LABEL_254;
        }
      }
      if (sub_1CD29E6A8(v326, v175, v218, v327)) {
        sub_1CD299984(v328, v175);
      }
LABEL_254:
      if (*(unsigned char *)(a1 + 3534))
      {
        v325 = v160;
        uint64_t v178 = *(void *)(a1 + 8);
        v363[0] = a1 + 1184;
        v363[1] = v178;
        v363[2] = v328;
        v363[3] = v175;
        uint64_t v179 = *(unsigned int *)(a1 + 1192);
        uint64_t v180 = *(unsigned int *)(a1 + 1304);
        if (v179 >= *(_DWORD *)(a1 + 1196))
        {
          sub_1CD8AA524(a1 + 1184, (uint64_t)v18, v180);
        }
        else
        {
          v181 = (uint64_t **)(*(void *)(a1 + 1184) + 24 * v179);
          *v181 = v18;
          v181[1] = 0;
          v181[2] = (uint64_t *)v180;
          *(_DWORD *)(a1 + 1192) = v179 + 1;
        }
        v363[4] = v179;
        __int16 v364 = 0;
        v376 = v378;
        uint64_t v377 = 0x800000000;
        *(void *)&long long v386 = &v387;
        *((void *)&v386 + 1) = 0x400000000;
        uint64_t v182 = *((unsigned int *)v23 + 6);
        v336 = v23;
        v330 = v18;
        if (!v182)
        {
          uint64_t v223 = 0;
          uint64_t v224 = 0;
          goto LABEL_340;
        }
        uint64_t v338 = 0;
        v142 = (llvm::DILocalScope *)*((void *)v23 + 2);
        v341 = (llvm::DILocalScope *)((char *)v142 + 16 * v182);
        char v339 = 1;
        v332 = v142;
        unint64_t v334 = 0;
        do
        {
          uint64_t v81 = *(void *)v142;
          uint64_t v82 = v386;
          unsigned int v83 = DWORD2(v386);
          if (DWORD2(v386))
          {
            uint64_t v84 = 0;
            unint64_t v85 = (v142 - v332) >> 4;
            uint64_t v86 = v386 + 88 * DWORD2(v386);
            uint64_t v87 = 88 * DWORD2(v386);
            uint64_t v88 = v87 - 88;
            while (*(void *)(v386 + v84) > v85)
            {
              v84 += 88;
              v88 -= 88;
              if (v87 == v84) {
                goto LABEL_116;
              }
            }
            uint64_t v86 = v386 + v84;
            if (v87 - 88 != v84)
            {
              uint64_t v105 = v86 + 88;
              do
              {
                if (*(void *)v105 > v85)
                {
                  *(void *)uint64_t v86 = *(void *)v105;
                  *(void *)(v86 + 8) = *(void *)(v105 + 8);
                  sub_1CD2A5BA0(v86 + 16, v105 + 16);
                  *(unsigned char *)(v86 + 80) = *(unsigned char *)(v105 + 80);
                  v86 += 88;
                }
                v105 += 88;
                v88 -= 88;
              }
              while (v88);
              uint64_t v82 = v386;
              unsigned int v83 = DWORD2(v386);
              uint64_t v23 = v336;
            }
          }
          else
          {
            unsigned int v83 = 0;
            uint64_t v86 = v386;
          }
LABEL_116:
          uint64_t v89 = v82 + 88 * v83;
          if (v89 != v86)
          {
            do
            {
              uint64_t v93 = *(void **)(v89 - 72);
              if ((void *)(v89 - 56) != v93) {
                free(v93);
              }
              v89 -= 88;
            }
            while (v89 != v86);
            uint64_t v82 = v386;
          }
          unint64_t v90 = v81 & 0xFFFFFFFFFFFFFFF8;
          DWORD2(v386) = -1171354717 * ((unint64_t)(v86 - v82) >> 3);
          uint64_t v91 = *(void *)v142;
          if ((*(void *)v142 & 4) != 0) {
            uint64_t v92 = sub_1CD28F6F0(a1, v81 & 0xFFFFFFFFFFFFFFF8);
          }
          else {
            uint64_t v92 = sub_1CD28F688(a1, v81 & 0xFFFFFFFFFFFFFFF8);
          }
          uint64_t v94 = v92;
          uint64_t v368 = v92;
          uint64_t v95 = (void *)((char *)v142 + 16);
          v346 = (llvm::DILocalScope *)((char *)v142 + 16);
          if ((llvm::DILocalScope *)((char *)v142 + 16) == (llvm::DILocalScope *)(*((void *)v23 + 2)
                                                                                 + 16 * *((unsigned int *)v23 + 6)))
          {
            uint64_t v98 = *(void *)(a1 + 8);
            LODWORD(v379) = *(_DWORD *)(*(void *)(*(void *)(v98 + 280) + 320) + 196)
                          - *(_DWORD *)(*(void *)(*(void *)(v98 + 280) + 320) + 192)
                          + 2;
            uint64_t v99 = *(void *)(sub_1CD2817E4(v98 + 352, (int *)&v379) + 8);
            uint64_t v367 = v99;
            uint64_t v91 = *(void *)v142;
            unint64_t v100 = v334;
            if ((*(void *)v142 & 4) != 0) {
              unint64_t v100 = *(void *)v142 & 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v334 = v100;
          }
          else
          {
            unint64_t v96 = *v95 & 0xFFFFFFFFFFFFFFF8;
            if ((*v95 & 4) != 0) {
              uint64_t v97 = sub_1CD28F6F0(a1, v96);
            }
            else {
              uint64_t v97 = sub_1CD28F688(a1, v96);
            }
            uint64_t v99 = v97;
            uint64_t v367 = v97;
          }
          if ((v91 & 4) == 0)
          {
            int v101 = **(unsigned __int16 **)(v90 + 16);
            if ((v101 - 13) > 1) {
              goto LABEL_147;
            }
            uint64_t v102 = *(void *)(v90 + 32);
            if (v101 != 14)
            {
              uint64_t v104 = v102 + 32;
              goto LABEL_144;
            }
            uint64_t v103 = *(unsigned int *)(v90 + 40);
            if (v103 == 2)
            {
LABEL_147:
              sub_1CD299B18(v90, (uint64_t)&v379);
              uint64_t v106 = *((void *)v142 + 1);
              v369.i64[0] = v106;
              unsigned int v107 = DWORD2(v386);
              if (DWORD2(v386) >= HIDWORD(v386)) {
                sub_1CD8AC8A8();
              }
              uint64_t v108 = v386;
              __int16 v109 = (uint64_t *)(v386 + 88 * DWORD2(v386));
              *__int16 v109 = v106;
              v109[1] = (uint64_t)v379;
              v109[3] = 0x200000000;
              v109[2] = (uint64_t)(v109 + 4);
              uint64_t v110 = (uint64_t)(v109 + 2);
              if (v381) {
                sub_1CD298860(v110, (uint64_t)&v380);
              }
              *(unsigned char *)(v108 + 88 * v107 + 80) = v385;
              ++DWORD2(v386);
              uint64_t v111 = 32;
              if (**(_WORD **)(v90 + 16) != 14) {
                uint64_t v111 = 96;
              }
              uint64_t v112 = *(void *)(*(void *)(v90 + 32) + v111 + 16);
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v112 + 24), *(uint64_t **)(v112 + 32), &v369);
              BOOL v113 = v370 == 0;
              unint64_t v114 = v338;
              if (!v338) {
                unint64_t v114 = v90;
              }
              uint64_t v338 = v114;
              if (v380 != &v382) {
                free(v380);
              }
              v339 &= v113;
            }
            else
            {
              uint64_t v104 = v102 + 32 * v103;
              v102 += 64;
LABEL_144:
              while (*(unsigned char *)v102 || *(_DWORD *)(v102 + 4))
              {
                v102 += 32;
                if (v102 == v104) {
                  goto LABEL_147;
                }
              }
              char v339 = 0;
            }
          }
          if (DWORD2(v386)) {
            BOOL v115 = v94 == v99;
          }
          else {
            BOOL v115 = 1;
          }
          if (!v115)
          {
            unsigned int v116 = 0;
            v379 = &v381;
            v380 = (void *)0x400000000;
            uint64_t v117 = 88 * DWORD2(v386);
            uint64_t v118 = v386 + 8;
            unint64_t v119 = v386 + 8;
            do
            {
              uint64_t v120 = v379;
              if (v116 >= HIDWORD(v380))
              {
                v303 = (char *)v379 + 80 * v116;
                BOOL v304 = (unint64_t)v379 <= v119 && (unint64_t)v303 > v119;
                if (!v304) {
                  sub_1CD8AC9EC();
                }
                sub_1CD8AC9EC();
              }
              int v121 = (int)v380;
              v122 = (char *)v379 + 80 * v380;
              void *v122 = *(void *)v119;
              v122[2] = 0x200000000;
              v122[1] = v122 + 3;
              uint64_t v123 = (uint64_t)(v122 + 1);
              if (*(_DWORD *)(v119 + 16)) {
                sub_1CD298860(v123, v119 + 8);
              }
              v120[80 * v121 + 72] = *(unsigned char *)(v119 + 72);
              unsigned int v116 = v380 + 1;
              LODWORD(v380) = v380 + 1;
              v119 += 88;
              v118 += 88;
              v117 -= 88;
            }
            while (v117);
            uint64_t v124 = *(void *)(a1 + 8);
            uint64_t v125 = *(void *)(v124 + 280);
            unsigned int v126 = *(_DWORD *)(v125 + 640);
            BOOL v127 = v126 > 3 || v126 == 2;
            if (v127
              || v368 != *(void *)(v124 + 520)
              || (uint64_t v143 = *(void *)(v125 + 328), *(void *)(*(void *)(v90 + 24) + 192) == *(void *)(v143 + 192)))
            {
              sub_1CD29E604((uint64_t)&v376, &v368, &v367, (uint64_t)&v379);
              uint64_t v23 = v336;
            }
            else
            {
              v369.i64[0] = v368;
              uint64_t v144 = v125 + 320;
              uint64_t v23 = v336;
              if (v143 != v125 + 320)
              {
                while (1)
                {
                  if (*(unsigned char *)(v143 + 200) && v143 != *(void *)(*(void *)(*(void *)(a1 + 8) + 280) + 328)) {
                    v369.i64[0] = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)v143);
                  }
                  if (*(void *)(v143 + 192) == *(void *)(*(void *)(v90 + 24) + 192)) {
                    break;
                  }
                  if (*(unsigned char *)(v143 + 201))
                  {
                    uint64_t EndSymbol = llvm::MachineBasicBlock::getEndSymbol((llvm::MachineBasicBlock *)v143);
                    sub_1CD29E604((uint64_t)&v376, v369.i64, &EndSymbol, (uint64_t)&v379);
                  }
                  uint64_t v143 = *(void *)(v143 + 8);
                  if (v143 == v144) {
                    goto LABEL_172;
                  }
                }
                sub_1CD29E604((uint64_t)&v376, v369.i64, &v367, (uint64_t)&v379);
              }
            }
LABEL_172:
            uint64_t v128 = (char **)v376;
            int v129 = v377;
            unint64_t v130 = (char *)v376 + 112 * v377;
            if (v130 - 112 != v376 && *((void *)v130 - 27) == *((void *)v130 - 14))
            {
              unsigned int v131 = *((_DWORD *)v130 - 50);
              if (v131 == *((_DWORD *)v130 - 22))
              {
                if (v131)
                {
                  uint64_t v132 = *((void *)v130 - 26);
                  uint64_t v133 = v132 + 80 * v131;
                  uint64_t v134 = *((void *)v130 - 12);
                  while (1)
                  {
                    uint64_t v135 = *(unsigned int *)(v132 + 16);
                    if (v135 != *(_DWORD *)(v134 + 16)) {
                      break;
                    }
                    if (v135)
                    {
                      uint64_t v136 = 24 * v135;
                      unint64_t v137 = (_DWORD *)(*(void *)(v134 + 8) + 16);
                      v138 = (_DWORD *)(*(void *)(v132 + 8) + 16);
                      while (2)
                      {
                        if (*(v138 - 4) == *(v137 - 4))
                        {
                          switch(*(v138 - 4))
                          {
                            case 1:
                            case 2:
                            case 3:
                              if (*((void *)v138 - 1) == *((void *)v137 - 1)) {
                                goto LABEL_183;
                              }
                              break;
                            case 4:
                              if (*v138 == *v137 && v138[1] == v137[1]) {
                                goto LABEL_183;
                              }
                              break;
                            default:
                              if (*(unsigned __int8 *)v138 == *(unsigned __int8 *)v137 && v138[1] == v137[1])
                              {
LABEL_183:
                                v137 += 6;
                                v138 += 6;
                                v136 -= 24;
                                if (v136) {
                                  continue;
                                }
                                goto LABEL_184;
                              }
                              break;
                          }
                        }
                        goto LABEL_188;
                      }
                    }
LABEL_184:
                    if (*(void *)v132 != *(void *)v134
                      || *(unsigned __int8 *)(v132 + 72) != *(unsigned __int8 *)(v134 + 72))
                    {
                      break;
                    }
                    v132 += 80;
                    v134 += 80;
                    if (v132 == v133) {
                      goto LABEL_187;
                    }
                  }
                }
                else
                {
LABEL_187:
                  *((void *)v130 - 27) = *((void *)v130 - 13);
                  LODWORD(v377) = v129 - 1;
                  sub_1CD2A9C60(&v128[14 * (v129 - 1) + 2]);
                }
              }
            }
LABEL_188:
            uint64_t v139 = (uint64_t *)v379;
            if (v380)
            {
              uint64_t v140 = 10 * v380;
              do
              {
                v141 = (char *)v139[v140 - 9];
                if (&v139[v140 - 7] != (uint64_t *)v141) {
                  free(v141);
                }
                v140 -= 10;
              }
              while (v140 * 8);
              uint64_t v139 = (uint64_t *)v379;
            }
            if (v139 != &v381) {
              free(v139);
            }
          }
          v142 = v346;
        }
        while (v346 != v341);
        uint64_t v223 = v338;
        uint64_t v224 = v334;
        if (v339)
        {
LABEL_340:
          if (sub_1CD29E6A8(v326, v223, v224, v327))
          {
            if (v377 == 1)
            {
              int v197 = 1;
              goto LABEL_287;
            }
            uint64_t v228 = *(void *)(a1 + 8);
            uint64_t v229 = *(void *)(v228 + 280);
            unsigned int v230 = *(_DWORD *)(v229 + 640);
            if (v230 <= 3 && v230 != 2)
            {
              v198 = v376;
              if (*(void *)v376 == *(void *)(v228 + 520)) {
                v232 = (uint64_t *)(v229 + 328);
              }
              else {
                v232 = (uint64_t *)((**v329 & 0xFFFFFFFFFFFFFFF8) + 24);
              }
              v196 = (char *)v376 + 112;
              uint64_t v185 = *v232;
              while (1)
              {
                v183 = v196;
                if (!*(unsigned char *)(v185 + 201))
                {
                  do
                  {
                    uint64_t v184 = *(void *)(v185 + 32);
                    uint64_t v185 = *(void *)(v185 + 8);
                    if (v185 == v184 + 320) {
                      uint64_t v186 = 0;
                    }
                    else {
                      uint64_t v186 = v185;
                    }
                  }
                  while (!*(unsigned char *)(v186 + 201));
                }
                uint64_t v187 = *(void *)(v185 + 8);
                if (v187 == *(void *)(v185 + 32) + 320 || v187 == 0) {
                  break;
                }
                uint64_t v189 = v198[1];
                if (v189 != llvm::MachineBasicBlock::getEndSymbol((llvm::MachineBasicBlock *)v185)) {
                  break;
                }
                v191 = *(void *)(v185 + 8) == *(void *)(v185 + 32) + 320
                     ? 0
                     : *(llvm::MachineBasicBlock **)(v185 + 8);
                uint64_t v190 = v198[14];
                if (v190 != llvm::MachineBasicBlock::getSymbol(v191)) {
                  break;
                }
                uint64_t v192 = *((unsigned int *)v198 + 6);
                if (v192 != *((_DWORD *)v198 + 34)) {
                  break;
                }
                if (v192)
                {
                  uint64_t v193 = v198[2];
                  uint64_t v194 = v198[16];
                  uint64_t v195 = 80 * v192;
                  while (sub_1CD2A760C(v193, v194))
                  {
                    v193 += 80;
                    v194 += 80;
                    v195 -= 80;
                    if (!v195) {
                      goto LABEL_281;
                    }
                  }
                  break;
                }
LABEL_281:
                if (*(void *)(v185 + 8) == *(void *)(v185 + 32) + 320) {
                  uint64_t v185 = 0;
                }
                else {
                  uint64_t v185 = *(void *)(v185 + 8);
                }
                v196 = v183 + 112;
                int v197 = 1;
                v198 = v183;
                if (v183 + 112 == (char *)v376 + 112 * v377) {
                  goto LABEL_287;
                }
              }
            }
          }
        }
        int v197 = 0;
LABEL_287:
        v199 = (char *)v386;
        if (DWORD2(v386))
        {
          uint64_t v226 = 88 * DWORD2(v386);
          do
          {
            v227 = *(char **)&v199[v226 - 72];
            if (&v199[v226 - 56] != v227) {
              free(v227);
            }
            v226 -= 88;
          }
          while (v226);
          v199 = (char *)v386;
        }
        if (v199 != (char *)&v387) {
          free(v199);
        }
        if (v197)
        {
          uint64_t v258 = *((void *)v376 + 2);
          v371 = *(void **)v258;
          v372 = &v374;
          uint64_t v373 = 0x200000000;
          if (*(_DWORD *)(v258 + 16)) {
            sub_1CD298860((uint64_t)&v372, v258 + 8);
          }
          char v375 = *(unsigned char *)(v258 + 72);
          sub_1CD8A759C();
        }
        v200 = *(llvm::DILocalScope **)&v325[-8 * *((unsigned int *)v325 + 2) + 24];
        if (*(unsigned char *)v200 != 11) {
          v200 = 0;
        }
        v347 = v200;
        v217 = (char *)v376;
        if (!v377) {
          goto LABEL_422;
        }
        v344 = (char *)v376 + 112 * v377;
        v158 = v389;
        do
        {
          uint64_t v147 = *(void *)(a1 + 8);
          uint64_t v148 = v363[0];
          unint64_t v149 = *(void *)(v363[0] + 112);
          long long v386 = *(_OWORD *)v217;
          unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v148 + 1440) - *(void *)(v148 + 1432)) >> 3);
          *(void *)&long long v387 = *(void *)(v363[0] + 1160);
          *((void *)&v387 + 1) = v150;
          uint64_t v151 = *(unsigned int *)(v363[0] + 120);
          if (v151 >= *(_DWORD *)(v363[0] + 124))
          {
            BOOL v247 = v149 + 32 * v151 > (unint64_t)&v386;
            if (v149 > (unint64_t)&v386 || !v247) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v152 = (long long *)(v149 + 32 * *(unsigned int *)(v363[0] + 120));
          long long v153 = v387;
          long long *v152 = v386;
          v152[1] = v153;
          ++*(_DWORD *)(v148 + 120);
          char v154 = *(unsigned char *)(v148 + 1464);
          v379 = &unk_1F264A040;
          v380 = (void *)(v148 + 1152);
          uint64_t v381 = v148 + 1432;
          LOBYTE(v382) = v154;
          LOBYTE(v152) = *(_WORD *)(*(void *)(*(void *)(v147 + 272) + 8) + 1624);
          BYTE8(v386) = 0;
          *(void *)&long long v387 = v330;
          v155 = v158;
          *((void *)&v387 + 1) = v158;
          uint64_t v388 = 0x200000000;
          v389[4] = 0;
          unsigned int v390 = 0;
          __int16 v391 = (v152 & 0xF) << 9;
          __int16 v392 = 0;
          *(void *)&long long v386 = &unk_1F2649C00;
          v393 = 0;
          v394 = &v379;
          char v395 = 0;
          uint64_t v156 = *((void *)v217 + 2);
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)v156 + 24), *(uint64_t **)(*(void *)v156 + 32), &v369);
          if (v370)
          {
            uint64_t v323 = *((unsigned int *)v217 + 6);
            if (v323)
            {
              uint64_t v343 = 80 * v323;
              do
              {
                sub_1CD2A2090(v147, (uint64_t)v347, v156, &v386);
                v156 += 80;
                v343 -= 80;
              }
              while (v343);
            }
          }
          else
          {
            sub_1CD2A2090(v147, (uint64_t)v347, v156, &v386);
          }
          if (v390 >= 0x10000 && (unsigned __int16)v390 != 0) {
            sub_1CD8AD320(&v386, (unsigned __int16)v390, HIWORD(v390));
          }
          v158 = v155;
          if (HIBYTE(v392))
          {
            LOBYTE(v364) = v392;
            if (!HIBYTE(v364)) {
              HIBYTE(v364) = 1;
            }
          }
          v159 = v393;
          v393 = 0;
          if (v159) {
            sub_1CD2A7EDC(v159);
          }
          *(void *)&long long v386 = &unk_1F2649AF8;
          if (*((void **)&v387 + 1) != v155) {
            free(*((void **)&v387 + 1));
          }
          sub_1CD290888(v148);
          v217 += 112;
          uint64_t v23 = v336;
        }
        while (v217 != v344);
        v217 = (char *)v376;
        if (v377)
        {
          uint64_t v146 = 112 * v377;
          uint64_t v18 = v330;
          do
          {
            sub_1CD2A9C60((char **)&v217[v146 - 96]);
            v146 -= 112;
          }
          while (v146);
          v217 = (char *)v376;
        }
        else
        {
LABEL_422:
          uint64_t v18 = v330;
        }
        if (v217 != v378) {
          free(v217);
        }
        sub_1CD2908F0(v363);
      }
LABEL_108:
      v23 += 6;
      if (v23 == v331) {
        goto LABEL_17;
      }
    }
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 2960) = 0;
  return result;
}

uint64_t sub_1CD2A1D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 1296);
  uint64_t v6 = (a3 - v5) >> 5;
  uint64_t v7 = *(void *)(a1 + 2616);
  uint64_t v8 = v6 + 1;
  uint64_t v9 = *(unsigned int *)(a1 + 1304);
  if (v6 + 1 == v9) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 2624) - v7) >> 3);
  }
  else {
    unint64_t v10 = *(void *)(v5 + 32 * v8 + 24);
  }
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void **)(a1 + 8);
  int v13 = *(_DWORD *)(v12[32] + 8);
  uint64_t v14 = *(void *)(v5 + 32 * v6 + 16);
  uint64_t v15 = *(void *)(a1 + 2336) + v14;
  uint64_t v16 = (void *)(v5 + 32 * v8 + 16);
  if (v8 == v9) {
    uint64_t v16 = (void *)(a1 + 2344);
  }
  uint64_t v17 = *v16 - v14;
  char v18 = *(unsigned char *)(*(void *)(v12[36] + 2064) + 272) ^ 1;
  __int16 v19 = *(unsigned __int8 *)(v12[33] + 1626) | 0x100;
  *(void *)&long long v51 = v15;
  *((void *)&v51 + 1) = v17;
  char v52 = v18;
  char v53 = v13;
  char v54 = v13;
  __int16 v55 = v19;
  sub_1CC6A2264((uint64_t)&v47, &v51, 0);
  uint64_t result = sub_1CC6A2264((uint64_t)&v45, &v51, *((unint64_t *)&v51 + 1));
  if (v47 != v45 || v48 != v46)
  {
    unint64_t v21 = 0;
    uint64_t v22 = (long long *)(v7 + 24 * v11);
    uint64_t v23 = (long long *)(v7 + 24 * v10);
    do
    {
      uint64_t v24 = v49;
      if (v22 == v23)
      {
        HIBYTE(v42) = 0;
        LOBYTE(__p[0]) = 0;
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v35 = v49;
        if (*((char *)v22 + 23) < 0)
        {
          sub_1CB8BDF7C((uint64_t)__p, *(const void **)v22, *((void *)v22 + 1));
        }
        else
        {
          long long v36 = *v22;
          uint64_t v42 = *((void *)v22 + 2);
          *(_OWORD *)__p = v36;
        }
        uint64_t v22 = (long long *)((char *)v22 + 24);
        uint64_t v24 = v35;
      }
      __int16 v44 = 260;
      v43[0] = __p;
      (**(void (***)(uint64_t, uint64_t, void *))a2)(a2, v24, v43);
      if (SHIBYTE(v42) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v25 = 0;
      ++v21;
      char v26 = 1;
      do
      {
        char v27 = v26;
        int v28 = v50[v25];
        if (v28 != 255)
        {
          if (v28 == 8)
          {
            for (int i = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(*(void *)(a4 + 568) + 16 * *(void *)&v50[8 * v25 + 14] + 8)); i; --i)
              uint64_t v22 = (long long *)((char *)v22 + 24 * (v22 != v23));
          }
          else
          {
            uint64_t v29 = &v47 + v25;
            unint64_t v32 = v29[6];
            uint64_t v31 = v29 + 6;
            for (unint64_t j = v32; v21 < j; unint64_t j = *v31)
            {
              uint64_t v33 = *(unsigned __int8 *)(v15 + v21);
              if (v22 == v23)
              {
                HIBYTE(v42) = 0;
                LOBYTE(__p[0]) = 0;
                uint64_t v22 = v23;
              }
              else
              {
                unsigned int v39 = *(unsigned __int8 *)(v15 + v21);
                if (*((char *)v22 + 23) < 0)
                {
                  sub_1CB8BDF7C((uint64_t)__p, *(const void **)v22, *((void *)v22 + 1));
                }
                else
                {
                  long long v37 = *v22;
                  uint64_t v42 = *((void *)v22 + 2);
                  *(_OWORD *)__p = v37;
                }
                uint64_t v22 = (long long *)((char *)v22 + 24);
                uint64_t v33 = v39;
              }
              __int16 v44 = 260;
              v43[0] = __p;
              (**(void (***)(uint64_t, uint64_t, void *))a2)(a2, v33, v43);
              if (SHIBYTE(v42) < 0) {
                operator delete(__p[0]);
              }
              ++v21;
            }
          }
          unint64_t v21 = *(void *)&v50[8 * v25 + 30];
        }
        char v26 = 0;
        uint64_t v25 = 1;
      }
      while ((v27 & 1) != 0);
      uint64_t result = (uint64_t)sub_1CC6A144C(&v47);
    }
    while (v47 != v45 || v48 != v46);
  }
  return result;
}

void sub_1CD2A2090(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v23 = a2;
  uint64_t v7 = *(void *)a3;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 32);
    unint64_t v21 = *(uint64_t **)(v7 + 24);
    uint64_t v22 = v8;
    sub_1CD2B0120(a4, v7);
    uint64_t v9 = *(void **)(v7 + 24);
    if (((*(void *)(v7 + 32) - (void)v9) & 0x7FFFFFFF8) != 0 && *v9 == 4099)
    {
      uint64_t v14 = *(void *)(*(void *)(a3 + 8) + 16);
      *(void *)&long long v16 = v14;
      sub_1CD2AF890((uint64_t)a4, &v16, v7);
      sub_1CD8AD84C((uint64_t)a4, &v21);
      uint64_t v15 = (void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 176))(*(void *)(*(void *)(a1 + 280) + 16));
      if (!sub_1CD2AECCC((uint64_t)a4, v15, (uint64_t)&v21, HIDWORD(v14))) {
        return;
      }
LABEL_14:
      sub_1CD2AF934((uint64_t)a4, (llvm::DIExpression::ExprOperand *)&v21);
      return;
    }
  }
  *(void *)&long long v19 = a4;
  *((void *)&v19 + 1) = &v23;
  uint64_t v20 = a1;
  uint64_t v10 = *(void *)(a3 + 8);
  if (!*(unsigned char *)(a3 + 72))
  {
    if (!sub_1CD2A221C((uint64_t *)&v19, v10, &v21)) {
      return;
    }
    goto LABEL_14;
  }
  unsigned int v11 = *(_DWORD *)(a3 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + 24 * v11;
    while (*(_DWORD *)v10 || HIDWORD(*(void *)(v10 + 16)) != 0)
    {
      v10 += 24;
      if (v10 == v12) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    long long v16 = v19;
    uint64_t v17 = v20;
    uint64_t v18 = a3;
    sub_1CD2AF968((uint64_t)a4, (llvm::DIExpression::ExprOperand *)&v21, (uint64_t (*)(uint64_t, void, llvm::DIExpression::ExprOperand *))sub_1CD2ABE28, (uint64_t)&v16);
  }
}

uint64_t sub_1CD2A221C(uint64_t *a1, uint64_t a2, void *a3)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      uint64_t v6 = HIDWORD(*(void *)(a2 + 16));
      if (!*(void *)(a2 + 16))
      {
        uint64_t v7 = (unsigned int *)(*a1 + 80);
        unint64_t v8 = (*v7 | ((unint64_t)*(unsigned __int16 *)(*a1 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x200000000;
        unsigned int *v7 = *v7;
        *((_WORD *)v7 + 2) = WORD2(v8);
      }
      uint64_t v9 = *(void *)(*(void *)(a1[2] + 280) + 16);
      uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 176))(v9);
      char v11 = sub_1CD2AECCC(*a1, v10, (uint64_t)a3, v6);
      uint64_t result = 0;
      if (v11) {
        return 1;
      }
      return result;
    case 1:
      uint64_t v17 = *(void *)a1[1];
      if (v17 && (*(_DWORD *)(v17 + 52) - 5) <= 1)
      {
        uint64_t v18 = *a1;
        uint64_t v19 = *(void *)(a2 + 8);
        unint64_t v20 = (*(unsigned int *)(v18 + 80) | ((unint64_t)*(unsigned __int16 *)(v18 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
        *(_DWORD *)(v18 + 80) = *(_DWORD *)(v18 + 80);
        *(_WORD *)(v18 + 84) = WORD2(v20);
        (**(void (***)(uint64_t, uint64_t, void))v18)(v18, 17, 0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 8))(v18, v19);
      }
      else
      {
        unint64_t v21 = (void (***)(void))*a1;
        unint64_t v22 = *(void *)(a2 + 8);
        uint64_t v23 = (unsigned int *)(*a1 + 80);
        unint64_t v24 = (*v23 | ((unint64_t)*(unsigned __int16 *)(*a1 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
        unsigned int *v23 = *v23;
        *((_WORD *)v23 + 2) = WORD2(v24);
        sub_1CD2AE980(v21, v22);
      }
      return 1;
    case 2:
      uint64_t v13 = a1[2];
      if (*(unsigned __int16 *)(*(void *)(*(void *)(v13 + 272) + 8) + 1624) >= 4u
        && *(_DWORD *)(*(void *)(v13 + 576) + 5512) != 3
        && *a3 == a3[1])
      {
        sub_1CD8AD464(*a1, *(void *)(a2 + 8) + 24, v13);
        return 1;
      }
      uint64_t v14 = *(void *)(a2 + 8);
      long long v16 = *(void **)(v14 + 32);
      uint64_t v15 = (llvm::detail::DoubleAPFloat *)(v14 + 32);
      if (v16 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v15, (llvm::APInt *)&v29);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v15, (uint64_t)&v29);
      }
      if (v30 < 0x41)
      {
        uint64_t v25 = *a1;
        uint64_t v26 = *(void *)(a2 + 8);
        int v28 = *(void **)(v26 + 32);
        char v27 = (llvm::detail::DoubleAPFloat *)(v26 + 32);
        if (v28 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v27, (llvm::APInt *)&v29);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v27, (uint64_t)&v29);
        }
        sub_1CD2AEBAC(v25, (uint64_t)&v29);
        if (v30 >= 0x41 && v29) {
          MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
        return 1;
      }
      if (v29) {
        MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      }
      return 0;
    case 4:
      sub_1CD8ADE6C((unsigned int *)*a1, *(void *)(a2 + 16), *(uint64_t *)(a2 + 16) >> 32);
      return 1;
    default:
      return 1;
  }
}

uint64_t sub_1CD2A2528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 272);
  v16[0] = "Loc expr size";
  __int16 v17 = 259;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v16, 1);
  uint64_t v7 = *(llvm::MCStreamer **)(*(void *)(a1 + 8) + 272);
  uint64_t v8 = *(void *)(a1 + 1296);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = ((a2 - v8) >> 5) + 1;
  uint64_t v11 = *(unsigned int *)(a1 + 1304);
  if (*(unsigned __int16 *)(*((void *)v7 + 1) + 1624) >= 5u)
  {
    uint64_t v15 = (void *)(v8 + 32 * v10 + 16);
    if (v10 == v11) {
      uint64_t v15 = (void *)(a1 + 2344);
    }
    llvm::MCStreamer::emitULEB128IntValue(v7, *v15 - v9, 0);
  }
  else
  {
    if (v10 == v11) {
      uint64_t v12 = *(void *)(a1 + 2344);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 32 * v10 + 16);
    }
    if ((unint64_t)(v12 - v9) >> 16) {
      return (*(uint64_t (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v7 + 520))(v7, 0, 2);
    }
    (*(void (**)(llvm::MCStreamer *))(*(void *)v7 + 520))(v7);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  v16[0] = &unk_1F264A070;
  v16[1] = v13;
  return sub_1CD2A1D1C(a1, (uint64_t)v16, a2, a3);
}

uint64_t sub_1CD2A26C4(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(result + 1192)) {
    return result;
  }
  uint64_t v2 = result;
  (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(result + 8) + 272) + 168))(*(void *)(*(void *)(result + 8) + 272), a2, 0);
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t result = *(void *)(v4 + 272);
  if (*(unsigned __int16 *)(*(void *)(result + 8) + 1624) >= 5u)
  {
    uint64_t v5 = llvm::mcdwarf::emitListsTableHeaderStart((llvm::mcdwarf *)result, 0);
    uint64_t v6 = *(void *)(v4 + 272);
    v109[0] = "Offset entry count";
    LOWORD(v112) = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v109, 1);
    (*(void (**)(void))(**(void **)(v4 + 272) + 520))();
    uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v4 + 272) + 192))(*(void *)(v4 + 272), *(void *)(v2 + 2640), 0);
    uint64_t v7 = *(unsigned int *)(v2 + 1192);
    if (!v7)
    {
      uint64_t v3 = v5;
      if (v5) {
        return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(v2 + 8) + 272) + 192))(*(void *)(*(void *)(v2 + 8) + 272), v3, 0);
      }
      return result;
    }
    uint64_t v8 = 24 * v7;
    uint64_t v9 = (uint64_t *)(*(void *)(v2 + 1184) + 8);
    do
    {
      uint64_t v11 = *v9;
      v9 += 3;
      uint64_t v10 = v11;
      uint64_t v12 = *(void **)(v4 + 272);
      if (*(unsigned char *)(v12[1] + 1626)) {
        uint64_t v13 = 8;
      }
      else {
        uint64_t v13 = 4;
      }
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, uint64_t))(*v12 + 840))(v12, v10, *(void *)(v2 + 2640), v13);
      v8 -= 24;
    }
    while (v8);
    uint64_t v3 = v5;
  }
  unsigned int v14 = *(_DWORD *)(v2 + 1192);
  if (!v14) {
    goto LABEL_103;
  }
  uint64_t v15 = *(uint64_t **)(v2 + 1184);
  uint64_t v92 = v3;
  uint64_t v93 = &v15[3 * v14];
  uint64_t v94 = (uint64_t *)(v2 + 3472);
  uint64_t v95 = v2 + 4512;
  uint64_t v100 = v2;
  do
  {
    uint64_t v16 = *(void *)(v2 + 1184);
    uint64_t v17 = 1 - 0x5555555555555555 * (((uint64_t)v15 - v16) >> 3);
    if (v17 == *(_DWORD *)(v2 + 1192)) {
      uint64_t v18 = *(unsigned int *)(v2 + 1304);
    }
    else {
      uint64_t v18 = *(void *)(v16 + 24 * v17 + 16);
    }
    uint64_t v19 = *(void *)(v2 + 8);
    uint64_t v20 = *(void *)(v2 + 1296);
    uint64_t v21 = v15[1];
    uint64_t v22 = v15[2];
    uint64_t v103 = v15;
    uint64_t v23 = *v15;
    uint64_t v24 = *(unsigned int *)(*(void *)(v19 + 256) + 8);
    uint64_t v25 = *(void **)(v19 + 272);
    unsigned int v104 = *(unsigned __int16 *)(v25[1] + 1624);
    (*(void (**)(void *, uint64_t, void))(*v25 + 192))(v25, v21, 0);
    v109[0] = 0;
    v109[1] = 0;
    int v110 = 0;
    uint64_t v112 = 0;
    BOOL v113 = 0;
    __p = 0;
    if (v22 != v18)
    {
      uint64_t v96 = v23;
      int v101 = (unint64_t **)(v20 + 32 * v18);
      uint64_t v26 = (unint64_t **)(v20 + 32 * v22);
      do
      {
        char v27 = *v26;
        unint64_t AssociatedFragment = **v26 & 0xFFFFFFFFFFFFFFF8;
        if (!AssociatedFragment && (v27[1] & 0x1C00) == 0x800)
        {
          *((_DWORD *)v27 + 2) |= 4u;
          unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v27[3]);
          *char v27 = *v27 & 7 | AssociatedFragment;
        }
        uint64_t v29 = *(void *)(AssociatedFragment + 16);
        uint64_t v114 = v29;
        v115[0] = 0;
        sub_1CD2A7DE8((uint64_t)&v105, (uint64_t)v109, &v114, v115);
        unsigned int v30 = v105;
        if (v107)
        {
          uint64_t v33 = v112;
          if (v112 >= v113)
          {
            uint64_t v35 = (uint64_t *)__p;
            uint64_t v36 = ((char *)v112 - (unsigned char *)__p) >> 5;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 59) {
              goto LABEL_108;
            }
            uint64_t v38 = (char *)v113 - (unsigned char *)__p;
            if (((char *)v113 - (unsigned char *)__p) >> 4 > v37) {
              unint64_t v37 = v38 >> 4;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39 >> 59) {
LABEL_109:
            }
              sub_1CB833614();
            uint64_t v40 = (char *)operator new(32 * v39);
            BOOL v41 = (uint64_t *)&v40[32 * v36];
            uint64_t *v41 = v29;
            v41[1] = 0;
            int v34 = v41 + 4;
            v41[2] = 0;
            v41[3] = 0;
            if (v33 == v35)
            {
              __p = &v40[32 * v36];
              uint64_t v112 = v41 + 4;
              BOOL v113 = (uint64_t *)&v40[32 * v39];
            }
            else
            {
              do
              {
                long long v58 = *((_OWORD *)v33 - 2);
                v33 -= 4;
                *((_OWORD *)v41 - 2) = v58;
                v41 -= 4;
                v41[2] = v33[2];
                v41[3] = v33[3];
                v33[1] = 0;
                v33[2] = 0;
                v33[3] = 0;
              }
              while (v33 != v35);
              uint64_t v33 = (uint64_t *)__p;
              uint64_t v59 = v112;
              __p = v41;
              uint64_t v112 = v34;
              BOOL v113 = (uint64_t *)&v40[32 * v39];
              while (v59 != v33)
              {
                uint64_t v60 = (void *)*(v59 - 3);
                if (v60)
                {
                  *(v59 - 2) = (uint64_t)v60;
                  operator delete(v60);
                }
                v59 -= 4;
              }
            }
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            int v34 = v112 + 4;
            *uint64_t v112 = v29;
            v33[1] = 0;
            v33[2] = 0;
            v33[3] = 0;
          }
          uint64_t v112 = v34;
          unint64_t v32 = (char *)__p;
          int v31 = ((unint64_t)((char *)v34 - (unsigned char *)__p) >> 5) - 1;
          *((_DWORD *)v30 + 2) = v31;
        }
        else
        {
          int v31 = *((_DWORD *)v105 + 2);
          unint64_t v32 = (char *)__p;
        }
        uint64_t v42 = &v32[32 * v31];
        unint64_t v45 = *((void *)v42 + 3);
        __int16 v44 = v42 + 24;
        unint64_t v43 = v45;
        uint64_t v46 = v44 - 1;
        unint64_t v47 = (unint64_t ***)*(v44 - 1);
        if ((unint64_t)v47 >= v45)
        {
          unsigned __int8 v49 = (unint64_t ****)(v44 - 2);
          uint64_t v50 = (void *)*(v44 - 2);
          uint64_t v51 = v47 - (unint64_t ***)v50;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61) {
LABEL_108:
          }
            abort();
          uint64_t v53 = v43 - (void)v50;
          if (v53 >> 2 > v52) {
            unint64_t v52 = v53 >> 2;
          }
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v52;
          }
          if (v54)
          {
            if (v54 >> 61) {
              goto LABEL_109;
            }
            __int16 v55 = (char *)operator new(8 * v54);
          }
          else
          {
            __int16 v55 = 0;
          }
          uint64_t v56 = (unint64_t ***)&v55[8 * v51];
          char *v56 = v26;
          uint64_t v48 = v56 + 1;
          if (v47 != v50)
          {
            do
            {
              int v57 = *--v47;
              *--uint64_t v56 = v57;
            }
            while (v47 != v50);
            unint64_t v47 = *v49;
          }
          *unsigned __int8 v49 = v56;
          *uint64_t v46 = v48;
          void *v44 = &v55[8 * v54];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          void *v47 = v26;
          uint64_t v48 = v47 + 1;
        }
        *uint64_t v46 = v48;
        v26 += 4;
        uint64_t v2 = v100;
      }
      while (v26 != v101);
      uint64_t v61 = (void ***)__p;
      uint64_t v98 = v112;
      if (__p == v112) {
        goto LABEL_91;
      }
      char v99 = 0;
      uint64_t v62 = *(void *)(v96 + 488);
      uint64_t v97 = v62;
LABEL_63:
      if (v62)
      {
        uint64_t v63 = v62;
        if ((v99 & (v104 < 5)) == 1)
        {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v19 + 272) + 520))(*(void *)(v19 + 272), -1, v24);
          (*(void (**)(void))(**(void **)(v19 + 272) + 520))();
          char v99 = 0;
          uint64_t v63 = v62;
        }
      }
      else
      {
        uint64_t v64 = **v61[1];
        unint64_t v65 = *(void *)v64 & 0xFFFFFFFFFFFFFFF8;
        if (!v65 && (*(_DWORD *)(v64 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v64 + 8) |= 4u;
          unint64_t v65 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v64 + 24));
          *(void *)uint64_t v64 = *(void *)v64 & 7 | v65;
        }
        uint64_t v114 = *(void *)(v65 + 16);
        uint64_t v105 = 0;
        uint64_t v63 = 0;
        if (sub_1CCBE5534(v94, &v114, &v105)
          && v105 != (const char *)(*(void *)(v100 + 3472) + 16 * *(unsigned int *)(v100 + 3488)))
        {
          uint64_t v63 = *((void *)v105 + 1);
        }
        if (v104 > 4)
        {
          if (v63 == v64 && (unint64_t)((char *)v61[2] - (char *)v61[1]) < 9)
          {
            uint64_t v63 = 0;
          }
          else
          {
            uint64_t v84 = *(void *)(v19 + 272);
            __int16 v108 = 261;
            uint64_t v105 = "DW_LLE_base_addressx";
            uint64_t v106 = 20;
            char v99 = 1;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v84 + 112))(v84, &v105, 1);
            (*(void (**)(void))(**(void **)(v19 + 272) + 520))();
            uint64_t v85 = *(void *)(v19 + 272);
            uint64_t v105 = "  base address index";
            __int16 v108 = 259;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v85 + 112))(v85, &v105, 1);
            unsigned int v86 = sub_1CD89C358(v95, v63, 0);
            llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v19 + 272), v86, 0);
          }
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v19 + 272) + 520))(*(void *)(v19 + 272), -1, v24);
          uint64_t v66 = *(void *)(v19 + 272);
          uint64_t v105 = "  base address";
          __int16 v108 = 259;
          char v99 = 1;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v66 + 112))(v66, &v105, 1);
          int v67 = *(uint64_t **)(v19 + 272);
          unint64_t v68 = llvm::MCSymbolRefExpr::create(v63, 0, v67[1], 0);
          (*(void (**)(uint64_t *, unint64_t, uint64_t, void))(*v67 + 512))(v67, v68, v24, 0);
        }
      }
      uint64_t v102 = v61;
      unsigned int v69 = v61[1];
      unint64_t v70 = v61[2];
      while (1)
      {
        if (v69 == v70)
        {
          uint64_t v61 = v102 + 4;
          uint64_t v62 = v97;
          if (v102 + 4 == (void ***)v98) {
            break;
          }
          goto LABEL_63;
        }
        uint64_t v71 = *v69;
        uint64_t v73 = **v69;
        uint64_t v72 = (*v69)[1];
        BOOL v74 = *(uint64_t **)(v19 + 272);
        if (v63)
        {
          if (v104 < 5)
          {
            (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*v74 + 840))(*(void *)(v19 + 272), **v69, v63, v24);
            (*(void (**)(void))(**(void **)(v19 + 272) + 840))();
            goto LABEL_84;
          }
          __int16 v108 = 261;
          uint64_t v105 = "DW_LLE_offset_pair";
          uint64_t v106 = 18;
          (*(void (**)(uint64_t *, const char **, uint64_t))(*v74 + 112))(v74, &v105, 1);
          (*(void (**)(void))(**(void **)(v19 + 272) + 520))();
          uint64_t v78 = *(void *)(v19 + 272);
          uint64_t v105 = "  starting offset";
          __int16 v108 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v78 + 112))(v78, &v105, 1);
          (*(void (**)(void))(**(void **)(v19 + 272) + 848))();
          uint64_t v79 = *(void *)(v19 + 272);
          uint64_t v105 = "  ending offset";
          __int16 v108 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v79 + 112))(v79, &v105, 1);
          unint64_t v80 = *(void (**)(void))(**(void **)(v19 + 272) + 848);
        }
        else
        {
          if (v104 < 5)
          {
            unint64_t v75 = llvm::MCSymbolRefExpr::create(**v69, 0, v74[1], 0);
            (*(void (**)(uint64_t *, unint64_t, uint64_t, void))(*v74 + 512))(v74, v75, v24, 0);
            __int16 v76 = *(uint64_t **)(v19 + 272);
            unint64_t v77 = llvm::MCSymbolRefExpr::create(v72, 0, v76[1], 0);
            (*(void (**)(uint64_t *, unint64_t, uint64_t, void))(*v76 + 512))(v76, v77, v24, 0);
            goto LABEL_84;
          }
          __int16 v108 = 261;
          uint64_t v105 = "DW_LLE_startx_length";
          uint64_t v106 = 20;
          (*(void (**)(uint64_t *, const char **, uint64_t))(*v74 + 112))(v74, &v105, 1);
          (*(void (**)(void))(**(void **)(v19 + 272) + 520))();
          uint64_t v81 = *(void *)(v19 + 272);
          uint64_t v105 = "  start index";
          __int16 v108 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v81 + 112))(v81, &v105, 1);
          unsigned int v82 = sub_1CD89C358(v95, v73, 0);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v19 + 272), v82, 0);
          uint64_t v83 = *(void *)(v19 + 272);
          uint64_t v105 = "  length";
          __int16 v108 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v83 + 112))(v83, &v105, 1);
          unint64_t v80 = *(void (**)(void))(**(void **)(v19 + 272) + 848);
        }
        v80();
LABEL_84:
        sub_1CD2A2528(v100, (uint64_t)v71, *v103);
        ++v69;
      }
    }
LABEL_91:
    uint64_t v87 = *(void *)(v19 + 272);
    if (v104 >= 5)
    {
      __int16 v108 = 261;
      uint64_t v105 = "DW_LLE_end_of_list";
      uint64_t v106 = 18;
      (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v87 + 112))(v87, &v105, 1);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v87 + 520))(v87, 0, v24);
    }
    (*(void (**)(void))(**(void **)(v19 + 272) + 520))();
    uint64_t v88 = (uint64_t *)__p;
    if (__p)
    {
      uint64_t v89 = v112;
      unint64_t v90 = __p;
      if (v112 != __p)
      {
        do
        {
          uint64_t v91 = (void *)*(v89 - 3);
          if (v91)
          {
            *(v89 - 2) = (uint64_t)v91;
            operator delete(v91);
          }
          v89 -= 4;
        }
        while (v89 != v88);
        unint64_t v90 = __p;
      }
      uint64_t v112 = v88;
      operator delete(v90);
    }
    uint64_t result = MEMORY[0x1D25D9CD0](v109[0], 8);
    uint64_t v15 = v103 + 3;
  }
  while (v103 + 3 != v93);
  uint64_t v3 = v92;
LABEL_103:
  if (v3) {
    return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(v2 + 8) + 272) + 192))(*(void *)(*(void *)(v2 + 8) + 272), v3, 0);
  }
  return result;
}

llvm::mcdwarf *sub_1CD2A35C8(llvm::mcdwarf *result, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a2 + 248)) {
    return result;
  }
  uint64_t v4 = result;
  (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)result + 1) + 272) + 168))(*(void *)(*((void *)result + 1) + 272), a3, 0);
  uint64_t v5 = 0;
  uint64_t v6 = *((void *)v4 + 1);
  uint64_t result = *(llvm::mcdwarf **)(v6 + 272);
  uint64_t v96 = v4;
  if (*(unsigned __int16 *)(*((void *)result + 1) + 1624) >= 5u)
  {
    uint64_t v7 = llvm::mcdwarf::emitListsTableHeaderStart(result, 0);
    uint64_t v8 = *(void *)(v6 + 272);
    v111[0] = "Offset entry count";
    LOWORD(v114) = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 112))(v8, v111, 1);
    (*(void (**)(void))(**(void **)(v6 + 272) + 520))();
    uint64_t result = (llvm::mcdwarf *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 272) + 192))(*(void *)(v6 + 272), *(void *)(a2 + 328), 0);
    uint64_t v9 = *(unsigned int *)(a2 + 248);
    if (!v9)
    {
      uint64_t v5 = v7;
      if (v7) {
        return (llvm::mcdwarf *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(*((void *)v4 + 1)
      }
                                                                                                 + 272)
                                                                                   + 192))(*(void *)(*((void *)v4 + 1) + 272), v5, 0);
      return result;
    }
    uint64_t v10 = *(uint64_t **)(a2 + 240);
    uint64_t v11 = v9 << 6;
    do
    {
      uint64_t v13 = *v10;
      v10 += 8;
      uint64_t v12 = v13;
      unsigned int v14 = *(void **)(v6 + 272);
      if (*(unsigned char *)(v14[1] + 1626)) {
        uint64_t v15 = 8;
      }
      else {
        uint64_t v15 = 4;
      }
      uint64_t result = (llvm::mcdwarf *)(*(uint64_t (**)(void *, uint64_t, void, uint64_t))(*v14 + 840))(v14, v12, *(void *)(a2 + 328), v15);
      v11 -= 64;
    }
    while (v11);
    uint64_t v4 = v96;
    uint64_t v5 = v7;
  }
  uint64_t v16 = *(unsigned int *)(a2 + 248);
  if (!v16) {
    goto LABEL_109;
  }
  uint64_t v17 = *(void *)(a2 + 240);
  uint64_t v93 = v5;
  uint64_t v94 = v17 + (v16 << 6);
  uint64_t v97 = (uint64_t)v4 + 4512;
  uint64_t v98 = (uint64_t *)((char *)v4 + 3472);
  do
  {
    uint64_t v18 = *((void *)v4 + 1);
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void **)(v18 + 272);
    unsigned int v106 = *(unsigned __int16 *)(v20[1] + 1624);
    if (*(unsigned char *)(*(void *)(v19 + 72) + 56)) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = *(unsigned __int16 *)(v20[1] + 1624) > 4u;
    }
    int v22 = v21;
    int v102 = v22;
    uint64_t v23 = *(unsigned int *)(*(void *)(v18 + 256) + 8);
    (*(void (**)(void))(*v20 + 192))();
    int v112 = 0;
    v111[0] = 0;
    v111[1] = 0;
    uint64_t v114 = 0;
    BOOL v115 = 0;
    __p = 0;
    uint64_t v95 = v17;
    uint64_t v24 = *(unsigned int *)(v17 + 24);
    if (v24)
    {
      uint64_t v99 = v19;
      uint64_t v25 = *(unint64_t ***)(v17 + 16);
      uint64_t v26 = &v25[2 * v24];
      unsigned int v101 = v23;
      do
      {
        char v27 = *v25;
        unint64_t AssociatedFragment = **v25 & 0xFFFFFFFFFFFFFFF8;
        if (!AssociatedFragment && (v27[1] & 0x1C00) == 0x800)
        {
          *((_DWORD *)v27 + 2) |= 4u;
          unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v27[3]);
          *char v27 = *v27 & 7 | AssociatedFragment;
        }
        uint64_t v29 = *(void *)(AssociatedFragment + 16);
        uint64_t v116 = v29;
        v117[0] = 0;
        sub_1CD2A7DE8((uint64_t)&v107, (uint64_t)v111, &v116, v117);
        unsigned int v30 = v107;
        if (v109)
        {
          uint64_t v33 = v114;
          if (v114 >= v115)
          {
            uint64_t v35 = (uint64_t *)__p;
            uint64_t v36 = ((char *)v114 - (unsigned char *)__p) >> 5;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 59) {
              goto LABEL_114;
            }
            uint64_t v38 = (char *)v115 - (unsigned char *)__p;
            if (((char *)v115 - (unsigned char *)__p) >> 4 > v37) {
              unint64_t v37 = v38 >> 4;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39 >> 59) {
LABEL_115:
            }
              sub_1CB833614();
            uint64_t v40 = (char *)operator new(32 * v39);
            BOOL v41 = (uint64_t *)&v40[32 * v36];
            uint64_t *v41 = v29;
            v41[1] = 0;
            uint64_t v42 = &v40[32 * v39];
            int v34 = v41 + 4;
            v41[2] = 0;
            v41[3] = 0;
            if (v33 == v35)
            {
              __p = v41;
              uint64_t v114 = v41 + 4;
              BOOL v115 = (uint64_t *)&v40[32 * v39];
            }
            else
            {
              do
              {
                long long v60 = *((_OWORD *)v33 - 2);
                v33 -= 4;
                *((_OWORD *)v41 - 2) = v60;
                v41 -= 4;
                v41[2] = v33[2];
                v41[3] = v33[3];
                v33[1] = 0;
                v33[2] = 0;
                v33[3] = 0;
              }
              while (v33 != v35);
              uint64_t v33 = (uint64_t *)__p;
              uint64_t v61 = v114;
              __p = v41;
              uint64_t v114 = v34;
              BOOL v115 = (uint64_t *)v42;
              while (v61 != v33)
              {
                uint64_t v62 = (void *)*(v61 - 3);
                if (v62)
                {
                  *(v61 - 2) = (uint64_t)v62;
                  operator delete(v62);
                }
                v61 -= 4;
              }
            }
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            int v34 = v114 + 4;
            *uint64_t v114 = v29;
            v33[1] = 0;
            v33[2] = 0;
            v33[3] = 0;
          }
          uint64_t v114 = v34;
          unint64_t v32 = (char *)__p;
          int v31 = ((unint64_t)((char *)v34 - (unsigned char *)__p) >> 5) - 1;
          *((_DWORD *)v30 + 2) = v31;
        }
        else
        {
          int v31 = *((_DWORD *)v107 + 2);
          unint64_t v32 = (char *)__p;
        }
        unint64_t v43 = &v32[32 * v31];
        unint64_t v46 = *((void *)v43 + 3);
        unint64_t v45 = v43 + 24;
        unint64_t v44 = v46;
        unint64_t v47 = v45 - 1;
        uint64_t v48 = (unint64_t ***)*(v45 - 1);
        if ((unint64_t)v48 >= v46)
        {
          uint64_t v50 = v26;
          uint64_t v51 = (unint64_t ****)(v45 - 2);
          unint64_t v52 = (void *)*(v45 - 2);
          uint64_t v53 = v48 - (unint64_t ***)v52;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61) {
LABEL_114:
          }
            abort();
          uint64_t v55 = v44 - (void)v52;
          if (v55 >> 2 > v54) {
            unint64_t v54 = v55 >> 2;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v54;
          }
          if (v56)
          {
            if (v56 >> 61) {
              goto LABEL_115;
            }
            int v57 = (char *)operator new(8 * v56);
          }
          else
          {
            int v57 = 0;
          }
          long long v58 = (unint64_t ***)&v57[8 * v53];
          *long long v58 = v25;
          unsigned __int8 v49 = v58 + 1;
          if (v48 != v52)
          {
            do
            {
              uint64_t v59 = *--v48;
              *--long long v58 = v59;
            }
            while (v48 != v52);
            uint64_t v48 = *v51;
          }
          *uint64_t v51 = v58;
          void *v47 = v49;
          *unint64_t v45 = &v57[8 * v56];
          uint64_t v26 = v50;
          if (v48) {
            operator delete(v48);
          }
          uint64_t v23 = v101;
        }
        else
        {
          void *v48 = v25;
          unsigned __int8 v49 = v48 + 1;
        }
        void *v47 = v49;
        v25 += 2;
      }
      while (v25 != v26);
      uint64_t v63 = (uint64_t *)__p;
      unsigned int v104 = v114;
      if (__p == v114) {
        goto LABEL_97;
      }
      char v105 = 0;
      uint64_t v100 = *(void *)(v99 + 488);
      int v64 = v102;
      if (v100) {
        int v64 = 0;
      }
      int v103 = v64;
LABEL_69:
      if (v103)
      {
        uint64_t v65 = **(void **)v63[1];
        unint64_t v66 = *(void *)v65 & 0xFFFFFFFFFFFFFFF8;
        if (!v66 && (*(_DWORD *)(v65 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v65 + 8) |= 4u;
          unint64_t v66 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v65 + 24));
          *(void *)uint64_t v65 = *(void *)v65 & 7 | v66;
        }
        uint64_t v116 = *(void *)(v66 + 16);
        char v107 = 0;
        uint64_t v67 = 0;
        if (sub_1CCBE5534(v98, &v116, &v107)
          && v107 != (const char *)(*((void *)v96 + 434) + 16 * *((unsigned int *)v96 + 872)))
        {
          uint64_t v67 = *((void *)v107 + 1);
        }
        if (v106 > 4)
        {
          if (v67 == v65 && (unint64_t)(v63[2] - v63[1]) < 9)
          {
            uint64_t v67 = 0;
          }
          else
          {
            uint64_t v85 = *(void *)(v18 + 272);
            __int16 v110 = 261;
            char v107 = "DW_RLE_base_addressx";
            uint64_t v108 = 20;
            char v105 = 1;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v85 + 112))(v85, &v107, 1);
            (*(void (**)(void))(**(void **)(v18 + 272) + 520))();
            uint64_t v86 = *(void *)(v18 + 272);
            char v107 = "  base address index";
            __int16 v110 = 259;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v86 + 112))(v86, &v107, 1);
            unsigned int v87 = sub_1CD89C358(v97, v67, 0);
            llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v18 + 272), v87, 0);
          }
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 272) + 520))(*(void *)(v18 + 272), -1, v23);
          uint64_t v68 = *(void *)(v18 + 272);
          char v107 = "  base address";
          __int16 v110 = 259;
          char v105 = 1;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v68 + 112))(v68, &v107, 1);
          unsigned int v69 = *(uint64_t **)(v18 + 272);
          unint64_t v70 = llvm::MCSymbolRefExpr::create(v67, 0, v69[1], 0);
          (*(void (**)(uint64_t *, unint64_t, uint64_t, void))(*v69 + 512))(v69, v70, v23, 0);
        }
      }
      else
      {
        uint64_t v67 = v100;
        if ((v105 & (v106 < 5)) == 1)
        {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 272) + 520))(*(void *)(v18 + 272), -1, v23);
          (*(void (**)(void))(**(void **)(v18 + 272) + 520))();
          char v105 = 0;
          uint64_t v67 = v100;
        }
      }
      uint64_t v72 = (uint64_t **)v63[1];
      uint64_t v71 = (uint64_t **)v63[2];
      while (1)
      {
        if (v72 == v71)
        {
          v63 += 4;
          if (v63 == v104) {
            break;
          }
          goto LABEL_69;
        }
        uint64_t v74 = **v72;
        uint64_t v73 = (*v72)[1];
        unint64_t v75 = *(uint64_t **)(v18 + 272);
        if (v67)
        {
          if (v106 < 5)
          {
            (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*v75 + 840))(*(void *)(v18 + 272), **v72, v67, v23);
            (*(void (**)(void))(**(void **)(v18 + 272) + 840))();
            goto LABEL_90;
          }
          __int16 v110 = 261;
          char v107 = "DW_RLE_offset_pair";
          uint64_t v108 = 18;
          (*(void (**)(uint64_t *, const char **, uint64_t))(*v75 + 112))(v75, &v107, 1);
          (*(void (**)(void))(**(void **)(v18 + 272) + 520))();
          uint64_t v79 = *(void *)(v18 + 272);
          char v107 = "  starting offset";
          __int16 v110 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v79 + 112))(v79, &v107, 1);
          (*(void (**)(void))(**(void **)(v18 + 272) + 848))();
          uint64_t v80 = *(void *)(v18 + 272);
          char v107 = "  ending offset";
          __int16 v110 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v80 + 112))(v80, &v107, 1);
          uint64_t v81 = *(void (**)(void))(**(void **)(v18 + 272) + 848);
        }
        else
        {
          if (v106 < 5)
          {
            unint64_t v76 = llvm::MCSymbolRefExpr::create(**v72, 0, v75[1], 0);
            (*(void (**)(uint64_t *, unint64_t, uint64_t, void))(*v75 + 512))(v75, v76, v23, 0);
            unint64_t v77 = *(uint64_t **)(v18 + 272);
            unint64_t v78 = llvm::MCSymbolRefExpr::create(v73, 0, v77[1], 0);
            (*(void (**)(uint64_t *, unint64_t, uint64_t, void))(*v77 + 512))(v77, v78, v23, 0);
            goto LABEL_90;
          }
          __int16 v110 = 261;
          char v107 = "DW_RLE_startx_length";
          uint64_t v108 = 20;
          (*(void (**)(uint64_t *, const char **, uint64_t))(*v75 + 112))(v75, &v107, 1);
          (*(void (**)(void))(**(void **)(v18 + 272) + 520))();
          uint64_t v82 = *(void *)(v18 + 272);
          char v107 = "  start index";
          __int16 v110 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v82 + 112))(v82, &v107, 1);
          unsigned int v83 = sub_1CD89C358(v97, v74, 0);
          llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(v18 + 272), v83, 0);
          uint64_t v84 = *(void *)(v18 + 272);
          char v107 = "  length";
          __int16 v110 = 259;
          (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v84 + 112))(v84, &v107, 1);
          uint64_t v81 = *(void (**)(void))(**(void **)(v18 + 272) + 848);
        }
        v81();
LABEL_90:
        ++v72;
      }
    }
LABEL_97:
    uint64_t v88 = *(void *)(v18 + 272);
    if (v106 >= 5)
    {
      __int16 v110 = 261;
      char v107 = "DW_RLE_end_of_list";
      uint64_t v108 = 18;
      (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v88 + 112))(v88, &v107, 1);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v88 + 520))(v88, 0, v23);
    }
    (*(void (**)(void))(**(void **)(v18 + 272) + 520))();
    uint64_t v4 = v96;
    uint64_t v89 = (uint64_t *)__p;
    if (__p)
    {
      unint64_t v90 = v114;
      uint64_t v91 = __p;
      if (v114 != __p)
      {
        do
        {
          uint64_t v92 = (void *)*(v90 - 3);
          if (v92)
          {
            *(v90 - 2) = (uint64_t)v92;
            operator delete(v92);
          }
          v90 -= 4;
        }
        while (v90 != v89);
        uint64_t v91 = __p;
      }
      uint64_t v114 = v89;
      operator delete(v91);
    }
    uint64_t result = (llvm::mcdwarf *)MEMORY[0x1D25D9CD0](v111[0], 8);
    uint64_t v17 = v95 + 64;
  }
  while (v95 + 64 != v94);
  uint64_t v5 = v93;
LABEL_109:
  if (v5) {
    return (llvm::mcdwarf *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(*((void *)v4 + 1)
  }
                                                                                             + 272)
                                                                               + 192))(*(void *)(*((void *)v4 + 1) + 272), v5, 0);
  return result;
}

void sub_1CD2A4490(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t __n, uint64_t a6)
{
  int v9 = *(_DWORD *)(a1 + 3544);
  if (v9 == 2 || v9 != 1 && !*(_DWORD *)(a2 + 52))
  {
    if (*(unsigned char *)(a1 + 3549)) {
      uint64_t v10 = a1 + 3552;
    }
    else {
      uint64_t v10 = a1 + 2992;
    }
    uint64_t v11 = sub_1CD2B0F98(v10 + 176, *(void *)(a1 + 8), a4, __n);
    int v12 = *(_DWORD *)(a1 + 3544);
    if (v12 == 2)
    {
      uint64_t v29 = v11;
      uint64_t v13 = (void *)*sub_1CD2ADC9C((uint64_t *)(a3 + 96), (unsigned __int8 *)(v11 + 32), *(void *)v11, &v29, (uint64_t (**)(unint64_t, void))(a3 + 128));
      *(void *)(a3 + 80) += 16;
      if (((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3 + 16 > *(void *)(a3 + 8) - *(void *)a3)
      {
        unsigned int v26 = *(_DWORD *)(a3 + 24) >> 7;
        if (v26 >= 0x1E) {
          LOBYTE(v26) = 30;
        }
        uint64_t v27 = 4096 << v26;
        unsigned int v14 = operator new(4096 << v26, (std::align_val_t)8uLL);
        unsigned int v28 = *(_DWORD *)(a3 + 24);
        if (v28 >= *(_DWORD *)(a3 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a3 + 16) + 8 * v28) = v14;
        ++*(_DWORD *)(a3 + 24);
        *(void *)(a3 + 8) = (char *)v14 + v27;
      }
      else
      {
        unsigned int v14 = (void *)((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      *(void *)a3 = v14 + 2;
      *unsigned int v14 = &unk_1F2649438;
      v14[1] = a6;
      uint64_t v16 = (void *)v13[4];
      unint64_t v15 = v13[5];
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = (void *)v13[3];
        uint64_t v19 = v16 - v18;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          abort();
        }
        uint64_t v21 = v15 - (void)v18;
        if (v21 >> 2 > v20) {
          unint64_t v20 = v21 >> 2;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          if (v22 >> 61) {
            sub_1CB833614();
          }
          uint64_t v23 = (char *)operator new(8 * v22);
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[8 * v19];
        *(void *)uint64_t v24 = v14;
        uint64_t v17 = v24 + 8;
        if (v16 != v18)
        {
          do
          {
            uint64_t v25 = *--v16;
            *((void *)v24 - 1) = v25;
            v24 -= 8;
          }
          while (v16 != v18);
          uint64_t v16 = (void *)v13[3];
        }
        v13[3] = v24;
        v13[4] = v17;
        v13[5] = &v23[8 * v22];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        void *v16 = v14;
        uint64_t v17 = v16 + 1;
      }
      v13[4] = v17;
    }
    else if (v12 == 3)
    {
      sub_1CD8AD164(a1 + 4552, v11, a6);
    }
  }
}

void sub_1CD2A4700(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t __n, uint64_t a6)
{
  int v9 = *(_DWORD *)(a1 + 3544);
  if (v9 == 2 || v9 != 1 && !*(_DWORD *)(a2 + 52))
  {
    if (*(unsigned char *)(a1 + 3549)) {
      uint64_t v10 = a1 + 3552;
    }
    else {
      uint64_t v10 = a1 + 2992;
    }
    uint64_t v11 = sub_1CD2B0F98(v10 + 176, *(void *)(a1 + 8), a4, __n);
    int v12 = *(_DWORD *)(a1 + 3544);
    if (v12 == 2)
    {
      sub_1CD2ADECC(a3, v11, a6);
    }
    else if (v12 == 3)
    {
      sub_1CD8AD164(a1 + 4552, v11, a6);
    }
  }
}

uint64_t sub_1CD2A47E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 3472;
  unint64_t AssociatedFragment = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a2 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
    *(void *)a2 = *(void *)a2 & 7 | AssociatedFragment;
  }
  uint64_t v7 = *(void *)(AssociatedFragment + 16);
  uint64_t v8 = a2;
  uint64_t result = sub_1CCBE54A0(v4, &v7, &v8, (uint64_t)v9);
  if (v9[16]
    && (*(unsigned char *)(a1 + 3549)
     || *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) >= 5u))
  {
    return sub_1CD89C358(a1 + 4512, a2, 0);
  }
  return result;
}

uint64_t sub_1CD2A48BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    uint64_t v4 = *(void **)(a1 + 168);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 176);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 168);
    }
    *(void *)(a1 + 176) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void **)(a1 + 144);
  if (v8)
  {
    *(void *)(a1 + 152) = v8;
    operator delete(v8);
  }
  if (*(_DWORD *)(a1 + 108))
  {
    uint64_t v17 = *(unsigned int *)(a1 + 104);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 8 * v17;
      do
      {
        uint64_t v20 = *(void *)(*(void *)(a1 + 96) + v18);
        if (v20) {
          BOOL v21 = v20 == -8;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21)
        {
          unint64_t v22 = *(void **)(v20 + 24);
          if (v22)
          {
            *(void *)(v20 + 32) = v22;
            operator delete(v22);
          }
        }
        v18 += 8;
      }
      while (v19 != v18);
    }
  }
  free(*(void **)(a1 + 96));
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  if (v9)
  {
    uint64_t v10 = *(uint64_t **)(a1 + 16);
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v10++;
      MEMORY[0x1D25D9CD0](v12, 8);
      v11 -= 8;
    }
    while (v11);
  }
  uint64_t v13 = *(uint64_t **)(a1 + 64);
  uint64_t v14 = *(unsigned int *)(a1 + 72);
  if (v14)
  {
    uint64_t v23 = 16 * v14;
    do
    {
      uint64_t v24 = *v13;
      v13 += 2;
      MEMORY[0x1D25D9CD0](v24, 8);
      v23 -= 16;
    }
    while (v23);
    uint64_t v13 = *(uint64_t **)(a1 + 64);
  }
  if (v13 != (uint64_t *)(a1 + 80)) {
    free(v13);
  }
  unint64_t v15 = *(void **)(a1 + 16);
  if (v15 != (void *)(a1 + 32)) {
    free(v15);
  }
  return a1;
}

uint64_t sub_1CD2A4A14(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 432), 8);
  sub_1CD2989F8((unsigned int *)(a1 + 408));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 408), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 384), 8);
  sub_1CD2A4BC8(a1 + 360);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 360), 8);
  sub_1CD2A4C30(a1 + 336);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 336), 8);
  uint64_t v2 = *(char **)(a1 + 240);
  uint64_t v3 = *(unsigned int *)(a1 + 248);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5) {
        free(v5);
      }
      v4 -= 64;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 240);
  }
  if (v2 != (char *)(a1 + 256)) {
    free(v2);
  }
  free(*(void **)(a1 + 176));
  uint64_t v6 = *(char **)(a1 + 152);
  uint64_t v7 = *(unsigned int *)(a1 + 160);
  if (v7)
  {
    uint64_t v16 = 8 * v7;
    uint64_t v17 = v6 - 8;
    do
    {
      uint64_t v18 = *(void *)&v17[v16];
      *(void *)&v17[v16] = 0;
      if (v18)
      {
        uint64_t v19 = sub_1CD298954(v18);
        MEMORY[0x1D25D9CE0](v19, 0x10F1C4015B411C3);
      }
      v16 -= 8;
    }
    while (v16);
    uint64_t v6 = *(char **)(a1 + 152);
  }
  if (v6 != (char *)(a1 + 168)) {
    free(v6);
  }
  sub_1CD290C80(a1 + 104);
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9++;
      MEMORY[0x1D25D9CD0](v11, 8);
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = *(uint64_t **)(a1 + 72);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    uint64_t v20 = 16 * v13;
    do
    {
      uint64_t v21 = *v12;
      v12 += 2;
      MEMORY[0x1D25D9CD0](v21, 8);
      v20 -= 16;
    }
    while (v20);
    uint64_t v12 = *(uint64_t **)(a1 + 72);
  }
  if (v12 != (uint64_t *)(a1 + 88)) {
    free(v12);
  }
  uint64_t v14 = *(void **)(a1 + 24);
  if (v14 != (void *)(a1 + 40)) {
    free(v14);
  }
  return a1;
}

void sub_1CD2A4BC8(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 56 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      if ((*(void *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4) {
          free(v4);
        }
      }
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

void sub_1CD2A4C30(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 112 * v1;
    uint64_t v3 = *(void *)a1 + 48;
    do
    {
      uint64_t v4 = *(void *)(v3 - 48);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v6 = v3;
        uint64_t v7 = v2;
        uint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5) {
          free(v5);
        }
        sub_1CB833A08(v6 - 40, *(void **)(v6 - 32));
        uint64_t v3 = v6;
        uint64_t v2 = v7;
      }
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
}

void sub_1CD2A4CC0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v4 - 10);
        if (v4 - 64 != v6) {
          free(v6);
        }
        v4 -= 96;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CD2A4D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(_WORD *)v3 == 20) {
    return 1;
  }
  uint64_t v7 = *(void *)(v3 + 8);
  if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
  {
    if ((v7 & 0x80) != 0) {
      return 0;
    }
    uint64_t v10 = a1;
    uint64_t result = 0;
    while ((*(_WORD *)(v10 + 44) & 8) != 0)
    {
      uint64_t v10 = *(void *)(v10 + 8);
      if ((*(unsigned char *)(*(void *)(v10 + 16) + 8) & 0x80) != 0) {
        return result;
      }
    }
  }
  else if ((v7 & 0x80) != 0)
  {
    return 0;
  }
  if (*(void *)(a2 + 24) != *(void *)(a2 + 32))
  {
    if (!*(_DWORD *)(a1 + 40)) {
      return 1;
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 32);
    Impl = llvm::DIExpression::getImpl(***(void ****)v11, 0, 0, 0, 1);
    unint64_t v70 = (void *)(*(uint64_t (**)(void))(**(void **)(v11 + 16) + 176))(*(void *)(v11 + 16));
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(v11 + 16) + 104))(*(void *)(v11 + 16));
    uint64_t v69 = v11;
    uint64_t v68 = (*(uint64_t (**)(void))(**(void **)(v11 + 16) + 120))(*(void *)(v11 + 16));
    v78[0] = 0;
    v78[1] = 0;
    int v79 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v80 = 0;
    uint64_t v84 = 1;
    uint64_t v85 = -1;
    uint64_t v86 = -1;
    unsigned int v87 = v89;
    uint64_t v88 = 0x400000000;
    if (**(unsigned __int16 **)(a1 + 16) - 13 < 5 || (uint64_t v14 = *(unsigned int *)(a1 + 40), !v14))
    {
LABEL_101:
      if ((v84 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v85, 4);
      }
      sub_1CD8AA4DC((uint64_t)v78);
      return 1;
    }
    uint64_t v71 = v13;
    unint64_t v66 = Impl;
    uint64_t v72 = a3;
    uint64_t v73 = a2;
    unsigned int v15 = 0;
    uint64_t v67 = a1;
    uint64_t v16 = *(_DWORD **)(a1 + 32);
    uint64_t v17 = &v16[8 * v14];
    do
    {
      if ((*v16 & 0x10000FF) == 0x1000000 && (v16[1] - 1) <= 0x3FFFFFFE)
      {
        uint64_t v19 = *(unsigned int **)(v73 + 24);
        uint64_t v18 = *(unsigned int **)(v73 + 32);
        while (1)
        {
          if (v19 == v18) {
            goto LABEL_52;
          }
          unsigned int v20 = *v19;
          unsigned int v21 = v16[1];
          if (*v19 == v21) {
            break;
          }
          BOOL v32 = v20 - 1 > 0x3FFFFFFE || v21 - 1 > 0x3FFFFFFE;
          if (!v32 && llvm::MCRegisterInfo::regsOverlap(v70 + 1, *v19, v21)) {
            break;
          }
LABEL_47:
          v19 += 14;
        }
        if (v84)
        {
          int v22 = 4;
          uint64_t v23 = &v85;
        }
        else
        {
          int v22 = v86;
          if (!v86)
          {
            uint64_t v33 = 0;
LABEL_45:
            *sub_1CB834EC4((uint64_t)&v84, (uint64_t)v19, v19, v33) = *v19;
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v87 + v88) = *v19;
            unsigned int v15 = v88 + 1;
            LODWORD(v88) = v88 + 1;
            goto LABEL_47;
          }
          uint64_t v23 = (uint64_t *)v85;
        }
        int v24 = v22 - 1;
        unsigned int v25 = v24 & (37 * v20);
        unsigned int v26 = (_DWORD *)v23 + v25;
        int v27 = *v26;
        if (v20 == *v26) {
          goto LABEL_47;
        }
        unsigned int v28 = 0;
        int v29 = 1;
        while (v27 != -1)
        {
          if (v28) {
            BOOL v30 = 0;
          }
          else {
            BOOL v30 = v27 == -2;
          }
          if (v30) {
            unsigned int v28 = v26;
          }
          unsigned int v31 = v25 + v29++;
          unsigned int v25 = v31 & v24;
          unsigned int v26 = (_DWORD *)v23 + v25;
          int v27 = *v26;
          if (v20 == *v26) {
            goto LABEL_47;
          }
        }
        if (v28) {
          uint64_t v33 = v28;
        }
        else {
          uint64_t v33 = v26;
        }
        goto LABEL_45;
      }
LABEL_52:
      v16 += 8;
    }
    while (v16 != v17);
    int v34 = (int *)v87;
    uint64_t v35 = v73;
    if (!v15)
    {
LABEL_99:
      if (v34 != (int *)v89) {
        free(v34);
      }
      goto LABEL_101;
    }
    uint64_t v36 = (int *)((char *)v87 + 4 * v15);
    uint64_t v37 = v67;
    uint64_t v38 = v71;
    while (1)
    {
      int v77 = *v34;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v38 + 1240))(v74, v38, v37);
      if (v76) {
        break;
      }
LABEL_58:
      if (++v34 == v36)
      {
        if (v88)
        {
          uint64_t v61 = (int *)v87;
          uint64_t v62 = 4 * v88;
          do
          {
            int v63 = *v61++;
            int v95 = v63;
            sub_1CD8A9D90(v35, &v95);
            v62 -= 4;
          }
          while (v62);
        }
        uint64_t v64 = v80;
        for (uint64_t i = v81; v64 != i; v64 += 56)
          sub_1CD2A58C8(v35, *(_DWORD *)v64, v66, *(llvm::DIExpression ***)(v64 + 8), *(unsigned int *)(v64 + 16));
        sub_1CD8AA204((uint64_t)v78);
        int v34 = (int *)v87;
        goto LABEL_99;
      }
    }
    if (LOBYTE(v74[0]))
    {
      if (LOBYTE(v74[0]) != 1) {
        goto LABEL_58;
      }
      uint64_t v39 = v74[2];
      uint64_t v40 = v75;
      uint64_t v41 = sub_1CD8AA0E8(v35, &v77);
      uint64_t v42 = *(unsigned int *)(v41 + 8);
      if (v42)
      {
        unint64_t v43 = *(int **)v41;
        uint64_t v44 = *(void *)v41 + 16 * v42;
        while (1)
        {
          int v45 = *v43;
          if (!v40) {
            break;
          }
          unint64_t v46 = (llvm::DIExpression *)*((void *)v43 + 1);
          unint64_t v47 = v40;
          if (((*((void *)v46 + 4) - *((void *)v46 + 3)) & 0x7FFFFFFF8) == 0) {
            goto LABEL_70;
          }
          uint64_t v48 = (void *)*((void *)v40 + 3);
          if (((*((void *)v40 + 4) - (void)v48) & 0x7FFFFFFF8) == 0 || *v48 != 4099)
          {
            unint64_t v47 = sub_1CD2A5A0C(v40, v46);
            goto LABEL_70;
          }
LABEL_66:
          v43 += 4;
          if (v43 == (int *)v44) {
            goto LABEL_81;
          }
        }
        unint64_t v47 = 0;
LABEL_70:
        LODWORD(v83) = 1;
        *((void *)&v83 + 1) = v39;
        uint64_t v99 = v47;
        uint64_t v100 = v102;
        uint64_t v101 = 0x200000000;
        sub_1CD78EA30((uint64_t *)&v100, &v83);
        char v103 = 0;
        unsigned __int8 v49 = v99;
        unint64_t v90 = v99;
        uint64_t v91 = v93;
        uint64_t v92 = 0x200000000;
        char v50 = v101;
        if (v101)
        {
          sub_1CD298860((uint64_t)&v91, (uint64_t)&v100);
          char v50 = v103;
          unsigned __int8 v49 = v90;
          int v51 = v92;
        }
        else
        {
          int v51 = 0;
        }
        char v94 = v50;
        int v95 = v45;
        uint64_t v96 = v49;
        v97[0] = v98;
        v97[1] = (void *)0x200000000;
        if (v51)
        {
          sub_1CD298860((uint64_t)v97, (uint64_t)&v91);
          char v50 = v94;
        }
        v98[48] = v50;
        if (v91 != v93) {
          free(v91);
        }
        sub_1CD8AA25C(v72, (unint64_t)&v95);
        if (v97[0] != v98) {
          free(v97[0]);
        }
        if (v100 != v102) {
          free(v100);
        }
        goto LABEL_66;
      }
LABEL_81:
      uint64_t v35 = v73;
      uint64_t v37 = v67;
    }
    else
    {
      uint64_t v52 = HIDWORD(v74[0]);
      int v53 = *(_DWORD *)(v68 + 88);
      int v54 = (*(uint64_t (**)(void *, uint64_t))(*v70 + 552))(v70, v69);
      BOOL v56 = v52 == v53 || v52 == v54;
      if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(*v70 + 136))(v70, v52, v69) & 1) != 0 || v56)
      {
        uint64_t v59 = v75;
        uint64_t v60 = sub_1CD8AA0E8(v35, &v77);
        sub_1CD2A54B4(!v56 | (unint64_t)(v52 << 32), v59, *(int **)v60, *(unsigned int *)(v60 + 8), v72);
      }
      else
      {
        int v57 = v75;
        uint64_t v58 = sub_1CD8AA0E8(v35, &v77);
        sub_1CD2A58C8((uint64_t)v78, v52, v57, *(llvm::DIExpression ***)v58, *(unsigned int *)(v58 + 8));
      }
    }
    uint64_t v38 = v71;
    goto LABEL_58;
  }
  return 0;
}

void sub_1CD2A54B4(uint64_t a1, llvm::DIExpression *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v5 = a3;
    uint64_t v8 = &a3[4 * a4];
    while (1)
    {
      int v9 = *v5;
      if (!a2) {
        break;
      }
      uint64_t v10 = (llvm::DIExpression *)*((void *)v5 + 1);
      uint64_t v11 = a2;
      if (((*((void *)v10 + 4) - *((void *)v10 + 3)) & 0x7FFFFFFF8) == 0) {
        goto LABEL_11;
      }
      uint64_t v12 = (void *)*((void *)a2 + 3);
      if (((*((void *)a2 + 4) - (void)v12) & 0x7FFFFFFF8) == 0 || *v12 != 4099)
      {
        uint64_t v11 = sub_1CD2A5A0C(a2, v10);
        goto LABEL_11;
      }
LABEL_7:
      v5 += 4;
      if (v5 == v8) {
        return;
      }
    }
    uint64_t v11 = 0;
LABEL_11:
    LODWORD(v17) = 0;
    uint64_t v18 = a1;
    unsigned int v28 = v11;
    int v29 = v31;
    uint64_t v30 = 0x200000000;
    sub_1CD78EA30((uint64_t *)&v29, &v17);
    char v32 = 0;
    uint64_t v13 = v28;
    uint64_t v19 = v28;
    unsigned int v20 = v22;
    uint64_t v21 = 0x200000000;
    char v14 = v30;
    if (v30)
    {
      sub_1CD298860((uint64_t)&v20, (uint64_t)&v29);
      char v14 = v32;
      uint64_t v13 = v19;
      int v15 = v21;
    }
    else
    {
      int v15 = 0;
    }
    char v23 = v14;
    int v24 = v9;
    unsigned int v25 = v13;
    v26[0] = v27;
    v26[1] = (void *)0x200000000;
    if (v15)
    {
      sub_1CD298860((uint64_t)v26, (uint64_t)&v20);
      char v14 = v23;
    }
    v27[48] = v14;
    if (v20 != v22) {
      free(v20);
    }
    sub_1CD8AA25C(a5, (unint64_t)&v24);
    if (v26[0] != v27) {
      free(v26[0]);
    }
    if (v29 != v31) {
      free(v29);
    }
    goto LABEL_7;
  }
}

uint64_t sub_1CD2A5690(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6 > 0x492492492492492) {
    sub_1CB833614();
  }
  uint64_t v9 = 56 * v6;
  uint64_t v10 = (char *)operator new(56 * v6);
  uint64_t v11 = &v10[56 * v3];
  __p = v10;
  uint64_t v18 = v11;
  unsigned int v20 = &v10[v9];
  *(_DWORD *)uint64_t v11 = *a2;
  *((void *)v11 + 1) = v11 + 24;
  *((void *)v11 + 2) = 0x200000000;
  if (*(_DWORD *)(a3 + 8)) {
    sub_1CD4684F0((uint64_t)(v11 + 8), a3);
  }
  uint64_t v19 = v11 + 56;
  sub_1CD8A9F1C(a1, &__p);
  uint64_t v12 = a1[1];
  uint64_t v13 = v18;
  for (uint64_t i = v19; i != v13; i -= 56)
  {
    int v15 = (char *)*((void *)i - 6);
    if (i - 32 != v15) {
      free(v15);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

uint64_t sub_1CD2A57FC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  if (a2 + 56 == v4)
  {
    uint64_t v8 = a2;
  }
  else
  {
    uint64_t v5 = *a1 + 8 * ((a2 - *a1) >> 3) + 64;
    do
    {
      *(_DWORD *)(v5 - 64) = *(_DWORD *)(v5 - 8);
      sub_1CD4684F0(v5 - 56, v5);
      uint64_t v6 = v5 + 56;
      uint64_t v7 = v5 + 48;
      v5 += 56;
    }
    while (v7 != v4);
    uint64_t v4 = a1[1];
    uint64_t v8 = v6 - 64;
  }
  while (v4 != v8)
  {
    uint64_t v9 = *(void **)(v4 - 48);
    if ((void *)(v4 - 32) != v9) {
      free(v9);
    }
    v4 -= 56;
  }
  a1[1] = v8;
  return a2;
}

void sub_1CD2A58C8(uint64_t a1, int a2, llvm::DIExpression *a3, llvm::DIExpression **a4, uint64_t a5)
{
  void v16[4] = *MEMORY[0x1E4F143B8];
  int v14 = a2;
  v15[0] = v16;
  v15[1] = (void *)0x200000000;
  uint64_t v8 = sub_1CD8A9E00(a1, &v14, (uint64_t)v15);
  if (v15[0] != v16) {
    free(v15[0]);
  }
  if (a5)
  {
    uint64_t v9 = (unsigned int *)&a4[2 * a5];
    do
    {
      uint64_t v10 = *(unsigned int *)a4;
      uint64_t v11 = sub_1CD2A5A0C(a3, a4[1]);
      unint64_t v12 = *(unsigned int *)(v8 + 16);
      if (v12 >= *(unsigned int *)(v8 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v13 = (void *)(*(void *)(v8 + 8) + 16 * v12);
      *uint64_t v13 = v10;
      v13[1] = v11;
      ++*(_DWORD *)(v8 + 16);
      a4 += 2;
    }
    while (a4 != (llvm::DIExpression **)v9);
  }
}

llvm::DIExpression *sub_1CD2A5A0C(llvm::DIExpression *a1, llvm::DIExpression *a2)
{
  uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  int64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    uint64_t v10 = v7;
    unint64_t v12 = v8;
    memmove(v7, v5, v6);
    uint64_t v11 = v8;
  }
  if (llvm::DIExpression::isImplicit(a1) && llvm::DIExpression::isImplicit(a2))
  {
    sub_1CD8AA2EC((uint64_t)&v10);
    uint64_t v7 = v10;
    uint64_t v8 = v11;
  }
  if (v8 != v7)
  {
    a1 = llvm::DIExpression::append(a1, v7, (v8 - v7) >> 3);
    if (!v7) {
      return a1;
    }
    goto LABEL_10;
  }
  if (v7) {
LABEL_10:
  }
    operator delete(v7);
  return a1;
}

uint64_t sub_1CD2A5AF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = v5 + v6;
      *(_DWORD *)uint64_t v7 = *(_DWORD *)(v5 + v6);
      *(void *)(v7 + 8) = *(void *)(v5 + v6 + 8);
      *(void *)(a3 + v6 + 16) = a3 + v6 + 32;
      uint64_t result = a3 + v6 + 16;
      *(void *)(v7 + 24) = 0x200000000;
      if (*(_DWORD *)(v5 + v6 + 24)) {
        uint64_t result = sub_1CD2A5BA0(result, v8 + 16);
      }
      *(unsigned char *)(v7 + 80) = *(unsigned char *)(v8 + 80);
      v6 += 88;
    }
    while (v8 + 88 != a2);
  }
  return result;
}

uint64_t sub_1CD2A5BA0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    uint64_t v3 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *(const void **)a2, 24 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          uint64_t v16 = a2;
          memmove(*(void **)a1, v3, 24 * v7);
          uint64_t v8 = v15;
          a2 = v16;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 24 * v8), (const void *)(*(void *)a2 + 24 * v8), *(void *)a2 + 24 * v9 - (*(void *)a2 + 24 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = a2;
      unint64_t v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        uint64_t v3 = *(const void **)v11;
      }
      *(void *)a1 = v3;
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v6 = (_DWORD *)(v11 + 8);
      *(void *)(a1 + 8) = v14;
      *(void *)uint64_t v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
    }
    _DWORD *v6 = 0;
  }
  return a1;
}

void sub_1CD2A5CE8(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0x492492492492492) {
      abort();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v21 = a1 + 2;
    if (v10 > 0x492492492492492) {
      sub_1CB833614();
    }
    uint64_t v11 = 56 * v10;
    unint64_t v12 = (char *)operator new(56 * v10);
    uint64_t v13 = &v12[56 * v7];
    __p = v12;
    uint64_t v18 = v13;
    unsigned int v20 = &v12[v11];
    *(_DWORD *)uint64_t v13 = *a2;
    *((void *)v13 + 1) = v13 + 24;
    *((void *)v13 + 2) = 0x200000000;
    if (a2[4]) {
      sub_1CD4684F0((uint64_t)(v13 + 8), (uint64_t)(a2 + 2));
    }
    uint64_t v19 = v13 + 56;
    sub_1CD8A9F1C(a1, &__p);
    uint64_t v6 = a1[1];
    uint64_t v14 = v18;
    for (uint64_t i = v19; i != v14; i -= 56)
    {
      uint64_t v16 = (char *)*((void *)i - 6);
      if (i - 32 != v16) {
        free(v16);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v5 = *a2;
    *(void *)(v5 + 8) = v5 + 24;
    *(void *)(v5 + 16) = 0x200000000;
    if (a2[4]) {
      sub_1CD4684F0(v5 + 8, (uint64_t)(a2 + 2));
    }
    uint64_t v6 = v5 + 56;
  }
  a1[1] = v6;
}

double sub_1CD2A5E90(__n128 *a1, unint64_t a2, uint64_t a3, char a4, __n128 FragmentInfo)
{
__n128 sub_1CD2A6D80(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 a6)
{
  result.n128_u64[0] = sub_1CD2A7488(a1, a2, a3, a4, a6).n128_u64[0];
  unint64_t v12 = a5->n128_u64[1];
  unint64_t v13 = a4->n128_u64[1];
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    if (!v13) {
      return result;
    }
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v12 + 24), *(uint64_t **)(v12 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v13 + 24), (uint64_t *)*(void *)(v13 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1]) {
        return result;
      }
    }
    else if (!v22)
    {
      return result;
    }
  }
  __n128 result = *a4;
  *a4 = *a5;
  *a5 = result;
  unint64_t v15 = a4->n128_u64[1];
  unint64_t v16 = a3->n128_u64[1];
  if (v15 && v16)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v16 + 24), (uint64_t *)*(void *)(v16 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1]) {
        return result;
      }
    }
    else if (!v22)
    {
      return result;
    }
  }
  else if (!v16)
  {
    return result;
  }
  __n128 result = *a3;
  *a3 = *a4;
  *a4 = result;
  unint64_t v17 = a3->n128_u64[1];
  unint64_t v18 = a2->n128_u64[1];
  if (v17 && v18)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v17 + 24), *(uint64_t **)(v17 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v18 + 24), (uint64_t *)*(void *)(v18 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1]) {
        return result;
      }
    }
    else if (!v22)
    {
      return result;
    }
  }
  else if (!v18)
  {
    return result;
  }
  __n128 result = *a2;
  *a2 = *a3;
  *a3 = result;
  unint64_t v19 = a2->n128_u64[1];
  unint64_t v20 = a1->n128_u64[1];
  if (v19 && v20)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v19 + 24), *(uint64_t **)(v19 + 32), &v23);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v20 + 24), (uint64_t *)*(void *)(v20 + 32), &v21).u64[0];
    if (v24 && v22)
    {
      if (v23.i64[1] >= (unint64_t)v21.i64[1]) {
        return result;
      }
    }
    else if (!v22)
    {
      return result;
    }
  }
  else if (!v20)
  {
    return result;
  }
  __n128 result = *a1;
  *a1 = *a2;
  *a2 = result;
  return result;
}

__n128 sub_1CD2A6F70(__n128 *a1, __n128 *a2, __n128 *a3, __n128 result)
{
  unint64_t v7 = a2->n128_u64[1];
  unint64_t v8 = a1->n128_u64[1];
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (!v8) {
      goto LABEL_31;
    }
    goto LABEL_7;
  }
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v7 + 24), *(uint64_t **)(v7 + 32), &v21);
  result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v8 + 24), (uint64_t *)*(void *)(v8 + 32), &v19).u64[0];
  if (v22) {
    BOOL v12 = v20 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (v21.i64[1] >= (unint64_t)v19.i64[1]) {
      goto LABEL_31;
    }
LABEL_7:
    unint64_t v10 = a3->n128_u64[1];
    if (v7) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (!v7) {
        goto LABEL_24;
      }
    }
    else
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), &v21);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v7 + 24), *(uint64_t **)(v7 + 32), &v19);
      if (v22 && v20)
      {
        if (v21.i64[1] >= (unint64_t)v19.i64[1]) {
          goto LABEL_24;
        }
      }
      else if (!v20)
      {
LABEL_24:
        __n128 result = *a1;
        *a1 = *a2;
        *a2 = result;
        unint64_t v13 = a3->n128_u64[1];
        unint64_t v14 = a2->n128_u64[1];
        if (v13 && v14)
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v13 + 24), *(uint64_t **)(v13 + 32), &v21);
          result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v14 + 24), (uint64_t *)*(void *)(v14 + 32), &v19).u64[0];
          if (v22 && v20)
          {
            if (v21.i64[1] >= (unint64_t)v19.i64[1]) {
              return result;
            }
          }
          else if (!v20)
          {
            return result;
          }
        }
        else if (!v14)
        {
          return result;
        }
        __n128 result = *a2;
        *a2 = *a3;
LABEL_57:
        *a3 = result;
        return result;
      }
    }
    __n128 result = *a1;
    *a1 = *a3;
    goto LABEL_57;
  }
  if (v20) {
    goto LABEL_7;
  }
LABEL_31:
  unint64_t v15 = a3->n128_u64[1];
  if (v7) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    if (!v7) {
      return result;
    }
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v21);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v7 + 24), (uint64_t *)*(void *)(v7 + 32), &v19).u64[0];
    if (v22 && v20)
    {
      if (v21.i64[1] >= (unint64_t)v19.i64[1]) {
        return result;
      }
    }
    else if (!v20)
    {
      return result;
    }
  }
  __n128 result = *a2;
  *a2 = *a3;
  *a3 = result;
  unint64_t v17 = a2->n128_u64[1];
  unint64_t v18 = a1->n128_u64[1];
  if (v17 && v18)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v17 + 24), *(uint64_t **)(v17 + 32), &v21);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v18 + 24), (uint64_t *)*(void *)(v18 + 32), &v19).u64[0];
    if (v22 && v20)
    {
      if (v21.i64[1] >= (unint64_t)v19.i64[1]) {
        return result;
      }
    }
    else if (!v20)
    {
      return result;
    }
LABEL_59:
    __n128 result = *a1;
    *a1 = *a2;
    *a2 = result;
    return result;
  }
  if (v18) {
    goto LABEL_59;
  }
  return result;
}

BOOL sub_1CD2A71BC(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = a2[-1].n128_i64[1];
      unint64_t v8 = a1->n128_u64[1];
      if (v7) {
        BOOL v9 = v8 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v7 + 24), *(uint64_t **)(v7 + 32), &v27);
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8 + 24), *(uint64_t **)(v8 + 32), &v25);
        if (v28 && v26)
        {
          if (v27.i64[1] >= (unint64_t)v25.i64[1]) {
            return 1;
          }
        }
        else if (!v26)
        {
          return 1;
        }
        goto LABEL_53;
      }
      if (v8)
      {
LABEL_53:
        __n128 v23 = *a1;
        *a1 = v3[-1];
        v3[-1] = v23;
        return 1;
      }
      return result;
    case 3:
      sub_1CD2A6F70(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CD2A7488(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CD2A6D80(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v10 = a1 + 2;
      sub_1CD2A6F70(a1, a1 + 1, a1 + 2, a3);
      BOOL v11 = a1 + 3;
      if (&a1[3] == v3) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      char v24 = v3;
      break;
  }
LABEL_11:
  unint64_t v14 = v11->n128_u64[1];
  unint64_t v15 = v10->n128_u64[1];
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    if (!v15) {
      goto LABEL_42;
    }
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v14 + 24), *(uint64_t **)(v14 + 32), &v27);
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v25);
    if (v28) {
      BOOL v17 = v26 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      if (!v26) {
        goto LABEL_42;
      }
    }
    else if (v27.i64[1] >= (unint64_t)v25.i64[1])
    {
      goto LABEL_42;
    }
  }
  unint64_t v19 = v11->n128_u64[0];
  unint64_t v18 = v11->n128_u64[1];
  __n128 *v11 = *v10;
  char v20 = a1;
  if (v10 == a1) {
    goto LABEL_41;
  }
  uint64_t v21 = v12;
  while (1)
  {
    uint64_t v22 = *(uint64_t *)((char *)&a1[1].n128_i64[1] + v21);
    if (v18 && v22)
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v18 + 24), *(uint64_t **)(v18 + 32), &v27);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v22 + 24), *(uint64_t **)(v22 + 32), &v25);
      if (v28 && v26)
      {
        if (v27.i64[1] >= (unint64_t)v25.i64[1])
        {
          char v20 = (__n128 *)((char *)a1 + v21 + 32);
          goto LABEL_40;
        }
      }
      else if (!v26)
      {
LABEL_39:
        char v20 = v10;
LABEL_40:
        uint64_t v3 = v24;
LABEL_41:
        v20->n128_u64[0] = v19;
        v20->n128_u64[1] = v18;
        if (++v13 == 8) {
          return &v11[1] == v3;
        }
LABEL_42:
        unint64_t v10 = v11;
        v12 += 16;
        if (++v11 == v3) {
          return 1;
        }
        goto LABEL_11;
      }
    }
    else if (!v22)
    {
      goto LABEL_39;
    }
    --v10;
    *(__n128 *)((char *)a1 + v21 + 32) = *(__n128 *)((char *)a1 + v21 + 16);
    v21 -= 16;
    if (v21 == -32)
    {
      char v20 = a1;
      goto LABEL_40;
    }
  }
}

__n128 sub_1CD2A7488(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 a5)
{
  result.n128_u64[0] = sub_1CD2A6F70(a1, a2, a3, a5).n128_u64[0];
  unint64_t v10 = a4->n128_u64[1];
  unint64_t v11 = a3->n128_u64[1];
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (!v11) {
      return result;
    }
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), &v19);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v11 + 24), (uint64_t *)*(void *)(v11 + 32), &v17).u64[0];
    if (v20 && v18)
    {
      if (v19.i64[1] >= (unint64_t)v17.i64[1]) {
        return result;
      }
    }
    else if (!v18)
    {
      return result;
    }
  }
  __n128 result = *a3;
  *a3 = *a4;
  *a4 = result;
  unint64_t v13 = a3->n128_u64[1];
  unint64_t v14 = a2->n128_u64[1];
  if (v13 && v14)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v13 + 24), *(uint64_t **)(v13 + 32), &v19);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v14 + 24), (uint64_t *)*(void *)(v14 + 32), &v17).u64[0];
    if (v20 && v18)
    {
      if (v19.i64[1] >= (unint64_t)v17.i64[1]) {
        return result;
      }
    }
    else if (!v18)
    {
      return result;
    }
  }
  else if (!v14)
  {
    return result;
  }
  __n128 result = *a2;
  *a2 = *a3;
  *a3 = result;
  unint64_t v15 = a2->n128_u64[1];
  unint64_t v16 = a1->n128_u64[1];
  if (v15 && v16)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), &v19);
    result.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v16 + 24), (uint64_t *)*(void *)(v16 + 32), &v17).u64[0];
    if (v20 && v18)
    {
      if (v19.i64[1] >= (unint64_t)v17.i64[1]) {
        return result;
      }
    }
    else if (!v18)
    {
      return result;
    }
  }
  else if (!v16)
  {
    return result;
  }
  __n128 result = *a1;
  *a1 = *a2;
  *a2 = result;
  return result;
}

BOOL sub_1CD2A760C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 == *(_DWORD *)(a2 + 16))
  {
    if (v2)
    {
      uint64_t v3 = (_DWORD *)(*(void *)(a1 + 8) + 16);
      unint64_t v4 = (_DWORD *)(*(void *)(a2 + 8) + 16);
      uint64_t v5 = 24 * v2;
      while (*(v3 - 4) == *(v4 - 4))
      {
        switch(*(v3 - 4))
        {
          case 1:
          case 2:
          case 3:
            if (*((void *)v3 - 1) != *((void *)v4 - 1)) {
              return 0;
            }
            break;
          case 4:
            if (*v3 != *v4 || v3[1] != v4[1]) {
              return 0;
            }
            break;
          default:
            if (*(unsigned __int8 *)v3 != *(unsigned __int8 *)v4 || v3[1] != v4[1]) {
              return 0;
            }
            break;
        }
        v3 += 6;
        v4 += 6;
        v5 -= 24;
        if (!v5) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      if (*(void *)a1 == *(void *)a2) {
        return *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
      }
    }
  }
  return 0;
}

void *sub_1CD2A76FC(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = a2[1];
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v5 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v4 >> 47) ^ v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v3) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x1E1D57147BCD7FB7 * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v2);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] <= 1uLL) {
    uint64_t v10 = v8 & (*(void *)&v2 - 1);
  }
  else {
    uint64_t v10 = v8 < *(void *)&v2 ? v8 : v8 % *(void *)&v2;
  }
  unint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  __n128 result = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = result[1];
      if (v13 == v8)
      {
        if (result[2] == *a2 && result[3] == v3) {
          return result;
        }
      }
      else
      {
        if (v9.u32[0] <= 1uLL)
        {
          v13 &= *(void *)&v2 - 1;
        }
        else if (v13 >= *(void *)&v2)
        {
          v13 %= *(void *)&v2;
        }
        if (v13 != v10) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1CD2A7828()
{
}

void sub_1CD2A78A8(uint64_t a1, uint64_t a2, llvm::Twine *this)
{
  unsigned int v5 = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  int v27 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = v6;
  int v33 = 0;
  char v26 = &unk_1F2646FA8;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  do
  {
    uint64_t v7 = a2 >> 7;
    if ((unint64_t)a2 <= 0x3F)
    {
      ++v5;
LABEL_4:
      char v8 = 0;
      int v9 = 1;
      goto LABEL_5;
    }
    uint64_t v12 = ((unint64_t)a2 >> 6) & 1;
    if (v7 != -1) {
      LODWORD(v12) = 0;
    }
    ++v5;
    if (v12 == 1) {
      goto LABEL_4;
    }
    int v9 = 0;
    char v8 = 0x80;
LABEL_5:
    char v10 = v8 | a2 & 0x7F;
    unint64_t v11 = v30;
    if ((unint64_t)v30 >= v29)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v26, v10);
    }
    else
    {
      ++v30;
      char *v11 = v10;
    }
    a2 = v7;
  }
  while (!v9);
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v13 = v5;
    unint64_t v14 = *(int64x2_t **)(a1 + 16);
    llvm::Twine::str(this, __p);
    unint64_t v15 = v14->u64[1];
    if (v15 >= v14[1].i64[0])
    {
      uint64_t v22 = sub_1CBF4ECB4(v14, (uint64_t)__p);
      int v23 = SHIBYTE(v25);
      v14->i64[1] = (uint64_t)v22;
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v16 = *(_OWORD *)__p;
      *(void *)(v15 + 16) = v25;
      *(_OWORD *)unint64_t v15 = v16;
      v14->i64[1] = v15 + 24;
    }
    if (v13 >= 2)
    {
      uint64_t v17 = v13 - 1;
      do
      {
        char v18 = *(int64x2_t **)(a1 + 16);
        HIBYTE(v25) = 0;
        LOBYTE(__p[0]) = 0;
        unint64_t v19 = v18->u64[1];
        if (v19 >= v18[1].i64[0])
        {
          uint64_t v21 = sub_1CBF4ECB4(v18, (uint64_t)__p);
        }
        else
        {
          long long v20 = *(_OWORD *)__p;
          *(void *)(v19 + 16) = v25;
          *(_OWORD *)unint64_t v19 = v20;
          __p[1] = 0;
          uint64_t v25 = 0;
          __p[0] = 0;
          uint64_t v21 = (char *)(v19 + 24);
        }
        v18->i64[1] = (uint64_t)v21;
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        --v17;
      }
      while (v17);
    }
  }
  char v26 = &unk_1F2646B98;
  if (v33 == 1)
  {
    if (v28) {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8077774924);
    }
  }
}

void sub_1CD2A7AB8(uint64_t a1, unint64_t a2, llvm::Twine *this, unsigned int a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  int v33 = 0;
  char v37 = 0;
  uint64_t v38 = 0;
  uint64_t v40 = v8;
  int v39 = 0;
  uint64_t v32 = &unk_1F2646FA8;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  BOOL v36 = 0;
  unsigned int v9 = 1;
  do
  {
    unsigned int v10 = v9;
    BOOL v11 = v9 < a4 || a2 > 0x7F;
    if (v11) {
      char v12 = 0x80;
    }
    else {
      char v12 = 0;
    }
    char v13 = v12 & 0x80 | a2 & 0x7F;
    unint64_t v14 = v36;
    if ((unint64_t)v36 >= v35)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v32, v13);
    }
    else
    {
      ++v36;
      *unint64_t v14 = v13;
    }
    unsigned int v9 = v10 + 1;
    BOOL v11 = a2 > 0x7F;
    a2 >>= 7;
  }
  while (v11);
  unsigned int v15 = v10;
  if (v10 < a4)
  {
    unsigned int v16 = a4 - 1;
    if (v10 < a4 - 1)
    {
      unsigned int v17 = a4 - v9;
      do
      {
        char v18 = v36;
        if ((unint64_t)v36 >= v35)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v32, 128);
        }
        else
        {
          ++v36;
          char *v18 = 0x80;
        }
        --v17;
      }
      while (v17);
      unsigned int v15 = v16;
    }
    unint64_t v19 = v36;
    if ((unint64_t)v36 >= v35)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v32, 0);
    }
    else
    {
      ++v36;
      *unint64_t v19 = 0;
    }
    ++v15;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    long long v20 = *(int64x2_t **)(a1 + 16);
    llvm::Twine::str(this, __p);
    unint64_t v21 = v20->u64[1];
    if (v21 >= v20[1].i64[0])
    {
      uint64_t v28 = sub_1CBF4ECB4(v20, (uint64_t)__p);
      int v29 = SHIBYTE(v31);
      v20->i64[1] = (uint64_t)v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v22 = *(_OWORD *)__p;
      *(void *)(v21 + 16) = v31;
      *(_OWORD *)unint64_t v21 = v22;
      v20->i64[1] = v21 + 24;
    }
    if (v15 >= 2)
    {
      uint64_t v23 = v15 - 1;
      do
      {
        char v24 = *(int64x2_t **)(a1 + 16);
        HIBYTE(v31) = 0;
        LOBYTE(__p[0]) = 0;
        unint64_t v25 = v24->u64[1];
        if (v25 >= v24[1].i64[0])
        {
          int v27 = sub_1CBF4ECB4(v24, (uint64_t)__p);
        }
        else
        {
          long long v26 = *(_OWORD *)__p;
          *(void *)(v25 + 16) = v31;
          *(_OWORD *)unint64_t v25 = v26;
          __p[1] = 0;
          uint64_t v31 = 0;
          __p[0] = 0;
          int v27 = (char *)(v25 + 24);
        }
        v24->i64[1] = (uint64_t)v27;
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        --v23;
      }
      while (v23);
    }
  }
  uint64_t v32 = &unk_1F2646B98;
  if (v39 == 1)
  {
    if (v34) {
      MEMORY[0x1D25D9CB0](v34, 0x1000C8077774924);
    }
  }
}

uint64_t sub_1CD2A7D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 8) + 272) + 112))(*(void *)(*(void *)(a1 + 8) + 272), a3, 1);
  unint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 520);

  return v4();
}

void *sub_1CD2A7DE8(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    uint64_t v11 = *(void *)a2;
    unsigned int v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
    __n128 result = (void *)(*(void *)a2 + 16 * v13);
    uint64_t v14 = *result;
    if (*a3 == *result)
    {
LABEL_6:
      char v12 = 0;
      goto LABEL_4;
    }
    unsigned int v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        unsigned int v15 = result;
      }
      unsigned int v18 = v13 + v16++;
      unsigned int v13 = v18 & (v8 - 1);
      __n128 result = (void *)(v11 + 16 * v13);
      uint64_t v14 = *result;
      if (*a3 == *result) {
        goto LABEL_6;
      }
    }
    if (v15) {
      unsigned int v9 = v15;
    }
    else {
      unsigned int v9 = result;
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  __n128 result = sub_1CCBE1E8C(a2, (uint64_t)a3, a3, v9);
  *__n128 result = *a3;
  *((_DWORD *)result + 2) = *a4;
  uint64_t v11 = *(void *)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v12 = 1;
LABEL_4:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v11 + 16 * v8;
  *(unsigned char *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_1CD2A7EDC(void **a1)
{
  unint64_t v3 = a1 + 7;
  sub_1CB8338B8(&v3);
  if (*a1 != a1 + 3) {
    free(*a1);
  }
  return MEMORY[0x1D25D9CE0](a1, 0x10A0C40A6FFF1EALL);
}

void sub_1CD2A7F40(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 40 * a2;
    do
    {
      uint64_t v6 = *(unsigned __int8 **)v4;
      size_t v7 = *(void *)(v4 + 8);
      int v8 = *(_DWORD *)(v4 + 16);
      *(void *)&long long v15 = *(void *)v4;
      *((void *)&v15 + 1) = v7;
      long long v16 = *(_OWORD *)(v4 + 24);
      BOOL v17 = &unk_1F2649D18;
      char v19 = 1;
      int v18 = v8;
      unsigned int v9 = *(_DWORD *)(a3 + 176);
      unint64_t v10 = *(void *)(a3 + 168);
      if (v9 >= *(_DWORD *)(a3 + 180))
      {
        BOOL v14 = v10 + 48 * v9 > (unint64_t)&v15;
        if (v10 <= (unint64_t)&v15 && v14) {
          sub_1CD8AAAD4();
        }
        sub_1CD8AAAD4();
      }
      uint64_t v11 = v10 + 48 * *(unsigned int *)(a3 + 176);
      long long v12 = v16;
      *(_OWORD *)uint64_t v11 = v15;
      *(_OWORD *)(v11 + 16) = v12;
      *(void *)(v11 + 32) = &unk_1F2649D38;
      int v13 = v18;
      *(unsigned char *)(v11 + 44) = v19;
      *(_DWORD *)(v11 + 40) = v13;
      *(void *)(v11 + 32) = &unk_1F2649D18;
      ++*(_DWORD *)(a3 + 176);
      llvm::cl::AddLiteralOption(*(void *)(a3 + 160), v6, v7);
      v4 += 40;
    }
    while (v4 != v5);
  }
}

void sub_1CD2A80CC(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 40 * a2;
    do
    {
      sub_1CD8ABB20(*(unsigned __int8 **)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_1CD2A8118(unint64_t a1, int8x16_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    int v8 = a2;
    i8 = (long long *)a2[-1].i8;
    unsigned int v9 = (int8x16_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v9;
          uint64_t v10 = (char *)v8 - (char *)v9;
          uint64_t v11 = v8 - v9;
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a2[-1].i64[1] + 24), *(uint64_t **)(a2[-1].i64[1] + 32), &v118);
                unint64_t v52 = v118.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 8) + 32), &v117);
                if (v52 < v117.i64[1])
                {
                  int8x16_t v118 = *(int8x16_t *)a1;
                  *(int8x16_t *)a1 = a2[-1];
                  a2[-1] = v118;
                }
                break;
              case 3:
                sub_1CD2A8CB0((long long *)a1, (long long *)(a1 + 16), i8);
                break;
              case 4:
                sub_1CD2A9150(a1, a1 + 16, a1 + 32, (uint64_t)i8);
                break;
              case 5:
                unint64_t v53 = (int8x16_t *)(a1 + 16);
                int v54 = (int8x16_t *)(a1 + 32);
                uint64_t v55 = (int8x16_t *)(a1 + 48);
                sub_1CD2A9150(a1, a1 + 16, a1 + 32, a1 + 48);
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a2[-1].i64[1] + 24), *(uint64_t **)(a2[-1].i64[1] + 32), &v118);
                unint64_t v56 = v118.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 56) + 24), *(uint64_t **)(*(void *)(a1 + 56) + 32), &v117);
                if (v56 < v117.i64[1])
                {
                  int8x16_t v118 = *v55;
                  int8x16_t v57 = v118;
                  *uint64_t v55 = a2[-1];
                  a2[-1] = v57;
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 56) + 24), *(uint64_t **)(*(void *)(a1 + 56) + 32), &v118);
                  unint64_t v58 = v118.u64[1];
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 40) + 24), *(uint64_t **)(*(void *)(a1 + 40) + 32), &v117);
                  if (v58 < v117.i64[1])
                  {
                    int8x16_t v59 = *v54;
                    int8x16_t *v54 = *v55;
                    *uint64_t v55 = v59;
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 40) + 24), *(uint64_t **)(*(void *)(a1 + 40) + 32), &v118);
                    unint64_t v60 = v118.u64[1];
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 24) + 24), *(uint64_t **)(*(void *)(a1 + 24) + 32), &v117);
                    if (v60 < v117.i64[1])
                    {
                      int8x16_t v61 = *v53;
                      *unint64_t v53 = *v54;
                      int8x16_t *v54 = v61;
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 24) + 24), *(uint64_t **)(*(void *)(a1 + 24) + 32), &v118);
                      unint64_t v62 = v118.u64[1];
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 8) + 32), &v117);
                      if (v62 < v117.i64[1])
                      {
                        int8x16_t v118 = *(int8x16_t *)a1;
                        *(int8x16_t *)a1 = *v53;
                        *unint64_t v53 = v118;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 383)
          {
            if (a4)
            {
              if ((int8x16_t *)a1 != v8)
              {
                uint64_t v63 = (void *)(a1 + 16);
                if ((int8x16_t *)(a1 + 16) != a2)
                {
                  uint64_t v64 = 0;
                  uint64_t v65 = (void *)a1;
                  do
                  {
                    unint64_t v66 = v63;
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v65[3] + 24), *(uint64_t **)(v65[3] + 32), &v118);
                    unint64_t v67 = v118.u64[1];
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v65[1] + 24), *(uint64_t **)(v65[1] + 32), &v117);
                    if (v67 < v117.i64[1])
                    {
                      uint64_t v68 = *v66;
                      uint64_t v69 = v65[3];
                      uint64_t v70 = v64;
                      while (1)
                      {
                        *(_OWORD *)(a1 + v70 + 16) = *(_OWORD *)(a1 + v70);
                        if (!v70) {
                          break;
                        }
                        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v69 + 24), *(uint64_t **)(v69 + 32), &v118);
                        unint64_t v71 = v118.u64[1];
                        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + v70 - 8) + 24), *(uint64_t **)(*(void *)(a1 + v70 - 8) + 32), &v117);
                        v70 -= 16;
                        if (v71 >= v117.i64[1])
                        {
                          unint64_t v72 = (void *)(a1 + v70 + 16);
                          goto LABEL_77;
                        }
                      }
                      unint64_t v72 = (void *)a1;
LABEL_77:
                      *unint64_t v72 = v68;
                      v72[1] = v69;
                    }
                    uint64_t v63 = v66 + 2;
                    v64 += 16;
                    uint64_t v65 = v66;
                  }
                  while (v66 + 2 != (void *)a2);
                }
              }
            }
            else if ((int8x16_t *)a1 != v8)
            {
              BOOL v102 = (int8x16_t *)(a1 + 16);
              while (v102 != a2)
              {
                unint64_t v103 = (uint64_t *)v102;
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 24) + 24), *(uint64_t **)(*(void *)(a1 + 24) + 32), &v118);
                unint64_t v104 = v118.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 8) + 32), &v117);
                if (v104 < v117.i64[1])
                {
                  uint64_t v105 = *v103;
                  uint64_t v106 = *(void *)(a1 + 24);
                  char v107 = v103;
                  do
                  {
                    *(_OWORD *)char v107 = *((_OWORD *)v107 - 1);
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v106 + 24), *(uint64_t **)(v106 + 32), &v118);
                    unint64_t v109 = v118.u64[1];
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(v107 - 3) + 24), *(uint64_t **)(*(v107 - 3) + 32), &v117);
                    uint64_t v108 = v107 - 2;
                    v107 -= 2;
                  }
                  while (v109 < v117.i64[1]);
                  *uint64_t v108 = v105;
                  v108[1] = v106;
                }
                BOOL v102 = (int8x16_t *)(v103 + 2);
                a1 = (unint64_t)v103;
              }
            }
            return;
          }
          if (!a3)
          {
            if ((int8x16_t *)a1 != v8)
            {
              int64_t v73 = (unint64_t)(v11 - 2) >> 1;
              int64_t v74 = v73;
              do
              {
                int64_t v75 = v74;
                if (v73 >= v74)
                {
                  uint64_t v76 = (2 * v74) | 1;
                  unint64_t v77 = (uint64_t *)(a1 + 16 * v76);
                  if (2 * v74 + 2 < v11)
                  {
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v77[1] + 24), *(uint64_t **)(v77[1] + 32), &v118);
                    unint64_t v78 = v118.u64[1];
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v77[3] + 24), *(uint64_t **)(v77[3] + 32), &v117);
                    v77 += 2 * (v78 < v117.i64[1]);
                    if (v78 < v117.i64[1]) {
                      uint64_t v76 = 2 * v75 + 2;
                    }
                  }
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v77[1] + 24), *(uint64_t **)(v77[1] + 32), &v118);
                  unint64_t v79 = v118.u64[1];
                  uint64_t v80 = *(void *)(a1 + 16 * v75 + 8);
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v80 + 24), *(uint64_t **)(v80 + 32), &v117);
                  if (v79 >= v117.i64[1])
                  {
                    uint64_t v81 = (uint64_t *)(a1 + 16 * v75);
                    uint64_t v114 = *v81;
                    do
                    {
                      int64_t v82 = v77;
                      *(_OWORD *)uint64_t v81 = *(_OWORD *)v77;
                      if (v73 < v76) {
                        break;
                      }
                      uint64_t v83 = (2 * v76) | 1;
                      unint64_t v77 = (uint64_t *)(a1 + 16 * v83);
                      uint64_t v84 = 2 * v76 + 2;
                      if (v84 < v11)
                      {
                        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v77[1] + 24), *(uint64_t **)(v77[1] + 32), &v118);
                        unint64_t v85 = v118.u64[1];
                        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v77[3] + 24), *(uint64_t **)(v77[3] + 32), &v117);
                        v77 += 2 * (v85 < v117.i64[1]);
                        if (v85 < v117.i64[1]) {
                          uint64_t v83 = v84;
                        }
                      }
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v77[1] + 24), *(uint64_t **)(v77[1] + 32), &v118);
                      unint64_t v86 = v118.u64[1];
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v80 + 24), *(uint64_t **)(v80 + 32), &v117);
                      uint64_t v81 = v82;
                      uint64_t v76 = v83;
                    }
                    while (v86 >= v117.i64[1]);
                    *int64_t v82 = v114;
                    v82[1] = v80;
                  }
                }
                int64_t v74 = v75 - 1;
              }
              while (v75);
              do
              {
                uint64_t v87 = 0;
                long long v116 = *(_OWORD *)a1;
                unint64_t v88 = (_OWORD *)a1;
                do
                {
                  BOOL v89 = (int8x16_t *)&v88[v87 + 1];
                  uint64_t v90 = (2 * v87) | 1;
                  uint64_t v91 = 2 * v87 + 2;
                  if (v91 < v11)
                  {
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v89->i64[1] + 24), *(uint64_t **)(v89->i64[1] + 32), &v118);
                    unint64_t v92 = v118.u64[1];
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v89[1].i64[1] + 24), *(uint64_t **)(v89[1].i64[1] + 32), &v117);
                    v89 += v92 < v117.i64[1];
                    if (v92 < v117.i64[1]) {
                      uint64_t v90 = v91;
                    }
                  }
                  *unint64_t v88 = *v89;
                  unint64_t v88 = v89;
                  uint64_t v87 = v90;
                }
                while (v90 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                unint64_t v93 = (long long *)a2[-1].i8;
                BOOL v5 = v89 == &a2[-1];
                --a2;
                if (v5)
                {
                  *BOOL v89 = (int8x16_t)v116;
                }
                else
                {
                  *BOOL v89 = (int8x16_t)*v93;
                  long long *v93 = v116;
                  uint64_t v94 = (uint64_t)v89[1].i64 - a1;
                  if (v94 >= 17)
                  {
                    unint64_t v95 = (((unint64_t)v94 >> 4) - 2) >> 1;
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 16 * v95 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 16 * v95 + 8) + 32), &v118);
                    unint64_t v96 = v118.u64[1];
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v89->i64[1] + 24), *(uint64_t **)(v89->i64[1] + 32), &v117);
                    if (v96 < v117.i64[1])
                    {
                      uint64_t v97 = v89->i64[0];
                      uint64_t v98 = v89->i64[1];
                      do
                      {
                        unint64_t v99 = v89;
                        BOOL v89 = (int8x16_t *)(a1 + 16 * v95);
                        *unint64_t v99 = *v89;
                        if (!v95) {
                          break;
                        }
                        unint64_t v95 = (v95 - 1) >> 1;
                        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 16 * v95 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 16 * v95 + 8) + 32), &v118);
                        unint64_t v100 = v118.u64[1];
                        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v98 + 24), *(uint64_t **)(v98 + 32), &v117);
                      }
                      while (v100 < v117.i64[1]);
                      v89->i64[0] = v97;
                      v89->i64[1] = v98;
                    }
                  }
                }
              }
              while (v11-- > 2);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          int v13 = (long long *)(a1 + 16 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0x801)
          {
            sub_1CD2A8CB0(v13, (long long *)a1, i8);
          }
          else
          {
            sub_1CD2A8CB0((long long *)a1, v13, i8);
            sub_1CD2A8CB0((long long *)(a1 + 16), v13 - 1, (long long *)a2[-2].i8);
            sub_1CD2A8CB0((long long *)(a1 + 32), (long long *)(a1 + 16 + 16 * v12), (long long *)a2[-3].i8);
            sub_1CD2A8CB0(v13 - 1, v13, (long long *)(a1 + 16 + 16 * v12));
            int8x16_t v118 = *(int8x16_t *)a1;
            *(_OWORD *)a1 = *v13;
            *int v13 = (__int128)v118;
          }
          --a3;
          if (a4) {
            break;
          }
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 - 8) + 24), *(uint64_t **)(*(void *)(a1 - 8) + 32), &v118);
          unint64_t v14 = v118.u64[1];
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 8) + 32), &v117);
          if (v14 < v117.i64[1]) {
            break;
          }
          uint64_t v35 = *(void *)(a1 + 8);
          uint64_t v113 = *(void *)a1;
          BOOL v36 = *(uint64_t **)(v35 + 24);
          char v37 = *(uint64_t **)(v35 + 32);
          llvm::DIExpression::getFragmentInfo(v36, v37, &v118);
          unint64_t v38 = v118.u64[1];
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8[-1].i64[1] + 24), *(uint64_t **)(v8[-1].i64[1] + 32), &v117);
          if (v38 >= v117.i64[1])
          {
            uint64_t v41 = (int8x16_t *)(a1 + 16);
            do
            {
              unsigned int v9 = v41;
              if (v41 >= v8) {
                break;
              }
              llvm::DIExpression::getFragmentInfo(v36, v37, &v118);
              unint64_t v42 = v118.u64[1];
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9->i64[1] + 24), *(uint64_t **)(v9->i64[1] + 32), &v117);
              uint64_t v41 = v9 + 1;
            }
            while (v42 >= v117.i64[1]);
          }
          else
          {
            int v39 = (int8x16_t *)a1;
            do
            {
              unsigned int v9 = v39 + 1;
              llvm::DIExpression::getFragmentInfo(v36, v37, &v118);
              unint64_t v40 = v118.u64[1];
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v39[1].i64[1] + 24), *(uint64_t **)(v39[1].i64[1] + 32), &v117);
              ++v39;
            }
            while (v40 >= v117.i64[1]);
          }
          unint64_t v43 = v8;
          if (v9 < v8)
          {
            uint64_t v44 = v8;
            do
            {
              unint64_t v43 = v44 - 1;
              llvm::DIExpression::getFragmentInfo(v36, v37, &v118);
              unint64_t v45 = v118.u64[1];
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v44[-1].i64[1] + 24), *(uint64_t **)(v44[-1].i64[1] + 32), &v117);
              --v44;
            }
            while (v45 < v117.i64[1]);
          }
          while (v9 < v43)
          {
            int8x16_t v118 = *v9;
            *unsigned int v9 = *v43;
            *unint64_t v43 = v118;
            unint64_t v46 = *(uint64_t **)(v35 + 24);
            unint64_t v47 = *(uint64_t **)(v35 + 32);
            do
            {
              BOOL v48 = v9++;
              llvm::DIExpression::getFragmentInfo(v46, v47, &v118);
              unint64_t v49 = v118.u64[1];
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48[1].i64[1] + 24), *(uint64_t **)(v48[1].i64[1] + 32), &v117);
            }
            while (v49 >= v117.i64[1]);
            do
            {
              unint64_t v50 = v43--;
              llvm::DIExpression::getFragmentInfo(v46, v47, &v118);
              unint64_t v51 = v118.u64[1];
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50[-1].i64[1] + 24), *(uint64_t **)(v50[-1].i64[1] + 32), &v117);
            }
            while (v51 < v117.i64[1]);
          }
          BOOL v4 = (unint64_t)&v9[-1] >= a1;
          BOOL v5 = &v9[-1] == (int8x16_t *)a1;
          if (&v9[-1] != (int8x16_t *)a1) {
            *(int8x16_t *)a1 = v9[-1];
          }
          a4 = 0;
          v9[-1].i64[0] = v113;
          v9[-1].i64[1] = v35;
        }
        uint64_t v112 = a3;
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)a1;
        uint64_t v17 = *(void *)(a1 + 8);
        do
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + v15 + 24) + 24), *(uint64_t **)(*(void *)(a1 + v15 + 24) + 32), &v118);
          unint64_t v18 = v118.u64[1];
          char v19 = *(uint64_t **)(v17 + 24);
          long long v20 = *(uint64_t **)(v17 + 32);
          llvm::DIExpression::getFragmentInfo(v19, v20, &v117);
          v15 += 16;
        }
        while (v18 < v117.i64[1]);
        unint64_t v21 = (int8x16_t *)(a1 + v15);
        long long v22 = a2;
        if (v15 == 16)
        {
          unint64_t v25 = a2;
          while (v21 < v25)
          {
            uint64_t v23 = v25 - 1;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v25[-1].i64[1] + 24), *(uint64_t **)(v25[-1].i64[1] + 32), &v118);
            unint64_t v26 = v118.u64[1];
            llvm::DIExpression::getFragmentInfo(v19, v20, &v117);
            unint64_t v25 = v23;
            if (v26 < v117.i64[1]) {
              goto LABEL_21;
            }
          }
          uint64_t v23 = v25;
        }
        else
        {
          do
          {
            uint64_t v23 = v22 - 1;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v22[-1].i64[1] + 24), *(uint64_t **)(v22[-1].i64[1] + 32), &v118);
            unint64_t v24 = v118.u64[1];
            llvm::DIExpression::getFragmentInfo(v19, v20, &v117);
            long long v22 = v23;
          }
          while (v24 >= v117.i64[1]);
        }
LABEL_21:
        unsigned int v9 = v21;
        if (v21 < v23)
        {
          int v27 = v23;
          do
          {
            int8x16_t v118 = *v9;
            *unsigned int v9 = *v27;
            *int v27 = v118;
            do
            {
              uint64_t v28 = v9[1].i64[1];
              ++v9;
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v28 + 24), *(uint64_t **)(v28 + 32), &v118);
              unint64_t v29 = v118.u64[1];
              unint64_t v30 = *(uint64_t **)(v17 + 24);
              uint64_t v31 = *(uint64_t **)(v17 + 32);
              llvm::DIExpression::getFragmentInfo(v30, v31, &v117);
            }
            while (v29 < v117.i64[1]);
            do
            {
              uint64_t v32 = v27[-1].i64[1];
              --v27;
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v32 + 24), *(uint64_t **)(v32 + 32), &v118);
              unint64_t v33 = v118.u64[1];
              llvm::DIExpression::getFragmentInfo(v30, v31, &v117);
            }
            while (v33 >= v117.i64[1]);
          }
          while (v9 < v27);
        }
        if (&v9[-1] != (int8x16_t *)a1) {
          *(int8x16_t *)a1 = v9[-1];
        }
        v9[-1].i64[0] = v16;
        v9[-1].i64[1] = v17;
        a3 = v112;
        int v8 = a2;
        if (v21 >= v23) {
          break;
        }
LABEL_32:
        sub_1CD2A8118(a1, &v9[-1], v112, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = sub_1CD2A8E3C(a1, (int8x16_t *)v9[-1].i64);
      if (sub_1CD2A8E3C((uint64_t)v9, a2)) {
        break;
      }
      if (!v34) {
        goto LABEL_32;
      }
    }
    a2 = v9 - 1;
    if (!v34) {
      continue;
    }
    break;
  }
}

void sub_1CD2A8CB0(long long *a1, long long *a2, long long *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  size_t v7 = *(uint64_t **)(v6 + 24);
  int v8 = *(uint64_t **)(v6 + 32);
  llvm::DIExpression::getFragmentInfo(v7, v8, &v19);
  unint64_t v9 = v19.u64[1];
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((void *)a1 + 1) + 24), *(uint64_t **)(*((void *)a1 + 1) + 32), &v18);
  if (v9 >= v18.i64[1])
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((void *)a3 + 1) + 24), *(uint64_t **)(*((void *)a3 + 1) + 32), &v19);
    unint64_t v12 = v19.u64[1];
    llvm::DIExpression::getFragmentInfo(v7, v8, &v18);
    if (v12 < v18.i64[1])
    {
      long long v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((void *)a2 + 1) + 24), *(uint64_t **)(*((void *)a2 + 1) + 32), &v19);
      unint64_t v14 = v19.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((void *)a1 + 1) + 24), *(uint64_t **)(*((void *)a1 + 1) + 32), &v18);
      if (v14 < v18.i64[1])
      {
        long long v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  else
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((void *)a3 + 1) + 24), *(uint64_t **)(*((void *)a3 + 1) + 32), &v19);
    unint64_t v10 = v19.u64[1];
    llvm::DIExpression::getFragmentInfo(v7, v8, &v18);
    if (v10 >= v18.i64[1])
    {
      long long v16 = *a1;
      *a1 = *a2;
      *a2 = v16;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((void *)a3 + 1) + 24), *(uint64_t **)(*((void *)a3 + 1) + 32), &v19);
      unint64_t v17 = v19.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*((void *)a2 + 1) + 24), *(uint64_t **)(*((void *)a2 + 1) + 32), &v18);
      if (v17 >= v18.i64[1]) {
        return;
      }
      long long v11 = *a2;
      *a2 = *a3;
    }
    else
    {
      long long v11 = *a1;
      *a1 = *a3;
    }
    *a3 = v11;
  }
}

BOOL sub_1CD2A8E3C(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(a2 - 1) + 24), *(uint64_t **)(*(a2 - 1) + 32), &v31);
      unint64_t v6 = v31.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 8) + 32), &v30);
      if (v6 < v30.i64[1])
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_1CD2A8CB0((long long *)a1, (long long *)(a1 + 16), (long long *)a2 - 1);
      return 1;
    case 4:
      sub_1CD2A9150(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      int8x16_t v19 = (long long *)(a1 + 16);
      long long v20 = (long long *)(a1 + 32);
      unint64_t v21 = (long long *)(a1 + 48);
      sub_1CD2A9150(a1, a1 + 16, a1 + 32, a1 + 48);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(a2 - 1) + 24), *(uint64_t **)(*(a2 - 1) + 32), &v31);
      unint64_t v22 = v31.u64[1];
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 56) + 24), *(uint64_t **)(*(void *)(a1 + 56) + 32), &v30);
      if (v22 < v30.i64[1])
      {
        long long v23 = *v21;
        *unint64_t v21 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v23;
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 56) + 24), *(uint64_t **)(*(void *)(a1 + 56) + 32), &v31);
        unint64_t v24 = v31.u64[1];
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 40) + 24), *(uint64_t **)(*(void *)(a1 + 40) + 32), &v30);
        if (v24 < v30.i64[1])
        {
          long long v25 = *v20;
          *long long v20 = *v21;
          *unint64_t v21 = v25;
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 40) + 24), *(uint64_t **)(*(void *)(a1 + 40) + 32), &v31);
          unint64_t v26 = v31.u64[1];
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 24) + 24), *(uint64_t **)(*(void *)(a1 + 24) + 32), &v30);
          if (v26 < v30.i64[1])
          {
            long long v27 = *v19;
            *int8x16_t v19 = *v20;
            *long long v20 = v27;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 24) + 24), *(uint64_t **)(*(void *)(a1 + 24) + 32), &v31);
            unint64_t v28 = v31.u64[1];
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a1 + 8) + 24), *(uint64_t **)(*(void *)(a1 + 8) + 32), &v30);
            if (v28 < v30.i64[1])
            {
              long long v29 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *int8x16_t v19 = v29;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = (void *)(a1 + 32);
      sub_1CD2A8CB0((long long *)a1, (long long *)(a1 + 16), (long long *)(a1 + 32));
      unint64_t v9 = (void *)(a1 + 48);
      if ((void *)(a1 + 48) == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 48;
      break;
  }
  while (1)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9[1] + 24), *(uint64_t **)(v9[1] + 32), &v31);
    unint64_t v12 = v31.u64[1];
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8[1] + 24), *(uint64_t **)(v8[1] + 32), &v30);
    if (v12 < v30.i64[1])
    {
      uint64_t v13 = *v9;
      uint64_t v14 = v9[1];
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(a1 + v15) = *(_OWORD *)(a1 + v15 - 16);
        v15 -= 16;
        if (!v15) {
          break;
        }
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v14 + 24), *(uint64_t **)(v14 + 32), &v31);
        unint64_t v17 = v31.u64[1];
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(v16 - 24) + 24), *(uint64_t **)(*(void *)(v16 - 24) + 32), &v30);
        if (v17 >= v30.i64[1])
        {
          int8x16_t v18 = (void *)(a1 + v15);
          goto LABEL_13;
        }
      }
      int8x16_t v18 = (void *)a1;
LABEL_13:
      void *v18 = v13;
      v18[1] = v14;
      if (++v10 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v11 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

int8x16_t sub_1CD2A9150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CD2A8CB0((long long *)a1, (long long *)a2, (long long *)a3);
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a4 + 8) + 24), *(uint64_t **)(*(void *)(a4 + 8) + 32), &v15);
  unint64_t v8 = v15.u64[1];
  result.i64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(*(void *)(a3 + 8) + 24), (uint64_t *)*(void *)(*(void *)(a3 + 8) + 32), &v14).u64[0];
  if (v8 < v14.i64[1])
  {
    long long v10 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a3 + 8) + 24), *(uint64_t **)(*(void *)(a3 + 8) + 32), &v15);
    unint64_t v11 = v15.u64[1];
    result.i64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(*(void *)(a2 + 8) + 24), (uint64_t *)*(void *)(*(void *)(a2 + 8) + 32), &v14).u64[0];
    if (v11 < v14.i64[1])
    {
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(a2 + 8) + 24), *(uint64_t **)(*(void *)(a2 + 8) + 32), &v15);
      unint64_t v13 = v15.u64[1];
      result.i64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(*(void *)(a1 + 8) + 24), (uint64_t *)*(void *)(*(void *)(a1 + 8) + 32), &v14).u64[0];
      if (v13 < v14.i64[1])
      {
        int8x16_t result = *(int8x16_t *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(int8x16_t *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1CD2A9258(unsigned __int8 *a1, uint64_t a2)
{
  for (uint64_t i = 5381; a2; --a2)
  {
    int v3 = *a1++;
    uint64_t i = (33 * i + v3);
  }
  return i;
}

void **sub_1CD2A927C(void **result)
{
  uint64_t v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    unint64_t v8 = result;
    uint64_t v3 = 16 * v2;
    uint64_t v4 = (char *)(v1 - 2);
    do
    {
      uint64_t v5 = *(void *)&v4[v3];
      *(void *)&v4[v3] = 0;
      if (v5)
      {
        uint64_t v6 = sub_1CD2B23B8(v5);
        MEMORY[0x1D25D9CE0](v6, 0x10F1C401404827BLL);
      }
      v3 -= 16;
    }
    while (v3);
    int8x16_t result = v8;
    uint64_t v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    long long v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

void *sub_1CD2A9310(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int8x16_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD8ABD90(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *int8x16_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD2A93DC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CD2A9474(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int8x16_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD8AC290(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD2A9540(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD2A95D0((uint64_t *)a2, a3, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD2A96B8(a2, (uint64_t)a3, a3, v10);
    int v7 = (void *)result;
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1CD2A95D0(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a2[1];
    unint64_t v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    BOOL v12 = (void *)(*a1 + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (*a2 == *v12 && v5 == v14)
    {
LABEL_22:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v14 == -8192;
        }
        if (v18 && v13 == -8192) {
          uint64_t v16 = v12;
        }
        unsigned int v20 = v11 + v17++;
        unsigned int v11 = v20 & v10;
        BOOL v12 = (void *)(v4 + 16 * (v20 & v10));
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        if (*a2 == *v12 && v5 == v14) {
          goto LABEL_22;
        }
      }
      uint64_t result = 0;
      if (v16) {
        BOOL v12 = v16;
      }
    }
  }
  else
  {
    BOOL v12 = 0;
    uint64_t result = 0;
  }
  *a3 = v12;
  return result;
}

void *sub_1CD2A96B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_7;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_7:
    sub_1CD2A9778(a1, v7);
    int v9 = 0;
    sub_1CD2A95D0((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void sub_1CD2A9778(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    sub_1CD2A985C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    memset_pattern16(v9, &unk_1CFAC3070, 16 * v10);
  }
}

void sub_1CD2A985C(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6) {
    memset_pattern16(*(void **)a1, &unk_1CFAC3070, 16 * v6);
  }
  while (a2 != a3)
  {
    uint64_t v7 = a2[1];
    if ((*a2 != -4096 || v7 != -4096) && (*a2 != -8192 || v7 != -8192))
    {
      int v9 = 0;
      sub_1CD2A95D0((uint64_t *)a1, a2, &v9);
      unsigned int v8 = v9;
      *int v9 = *a2;
      v8[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 2;
  }
}

void sub_1CD2A991C()
{
}

uint64_t sub_1CD2A99FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = v5 + v6;
      uint64_t v9 = *(void *)(v5 + v6 + 8);
      *(void *)uint64_t v7 = *(void *)(v5 + v6);
      *(void *)(v7 + 8) = v9;
      *(void *)(a3 + v6 + 16) = a3 + v6 + 32;
      uint64_t result = a3 + v6 + 16;
      *(void *)(v7 + 24) = 0x200000000;
      if (*(_DWORD *)(v5 + v6 + 24)) {
        uint64_t result = sub_1CD2A5BA0(result, v8 + 16);
      }
      *(unsigned char *)(v7 + 80) = *(unsigned char *)(v8 + 80);
      v6 += 88;
    }
    while (v8 + 88 != a2);
  }
  return result;
}

void sub_1CD2A9A9C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 112 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v4;
      *(void *)(a2 + 16) = a2 + 32;
      uint64_t v6 = (char **)(a2 + 16);
      *(void *)(a2 + 24) = 0x100000000;
      unsigned int v7 = *(_DWORD *)(v4 + 24);
      if (v7) {
        BOOL v8 = a2 == v4;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        uint64_t v9 = *(void *)(v4 + 16);
        if (v9 == v4 + 32)
        {
          if (v7 > 1) {
            sub_1CD8AC9EC();
          }
          uint64_t v10 = v9 + 80 * v7;
          unsigned int v11 = *v6;
          uint64_t v12 = v9 + 8;
          do
          {
            uint64_t v13 = v12 - 8;
            *(void *)unsigned int v11 = *(void *)(v12 - 8);
            *((void *)v11 + 1) = v11 + 24;
            *((void *)v11 + 2) = 0x200000000;
            if (*(_DWORD *)(v12 + 8)) {
              sub_1CD2A5BA0((uint64_t)(v11 + 8), v12);
            }
            v11[72] = *(unsigned char *)(v12 + 64);
            v11 += 80;
            v12 += 80;
          }
          while (v13 + 80 != v10);
          uint64_t v14 = *(void *)(v4 + 16);
          *(_DWORD *)(a2 + 24) = v7;
          uint64_t v15 = *(unsigned int *)(v4 + 24);
          if (v15)
          {
            uint64_t v16 = 80 * v15;
            do
            {
              int v17 = *(void **)(v14 + v16 - 72);
              if ((void *)(v14 + v16 - 56) != v17) {
                free(v17);
              }
              v16 -= 80;
            }
            while (v16);
          }
          *(_DWORD *)(v4 + 24) = 0;
        }
        else
        {
          sub_1CD8ACC20(v6, (char **)(v4 + 16));
        }
      }
      v4 += 112;
      a2 += 112;
    }
    while (v4 != v5);
    uint64_t v18 = *((unsigned int *)a1 + 2);
    if (v18)
    {
      uint64_t v19 = *a1 - 96;
      uint64_t v20 = 112 * v18;
      do
      {
        sub_1CD2A9C60((char **)(v19 + v20));
        v20 -= 112;
      }
      while (v20);
    }
  }
}

char **sub_1CD2A9C60(char **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v3 = 80 * v2;
    do
    {
      uint64_t v4 = *(char **)&v1[v3 - 72];
      if (&v1[v3 - 56] != v4)
      {
        BOOL v8 = result;
        uint64_t v5 = v3;
        uint64_t v6 = v1;
        free(v4);
        uint64_t v3 = v5;
        uint64_t v1 = v6;
        uint64_t result = v8;
      }
      v3 -= 80;
    }
    while (v3);
    uint64_t v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    unsigned int v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

uint64_t sub_1CD2A9CF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 4);
  uint64_t v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12)) {
    sub_1CD8AC9EC();
  }
  if (a2 != a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)result + 80 * v7;
    do
    {
      uint64_t v10 = a2 + v8;
      uint64_t v11 = v9 + v8;
      *(void *)uint64_t v11 = *(void *)(a2 + v8);
      *(void *)(v9 + v8 + 8) = v9 + v8 + 24;
      uint64_t result = v9 + v8 + 8;
      *(void *)(v11 + 16) = 0x200000000;
      if (*(_DWORD *)(a2 + v8 + 16)) {
        uint64_t result = sub_1CD298860(result, v10 + 8);
      }
      *(unsigned char *)(v11 + 72) = *(unsigned char *)(v10 + 72);
      v8 += 80;
    }
    while (v10 + 80 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

void sub_1CD2A9DE0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v3 = *(unsigned int *)(a1 + 24);
  unint64_t v4 = 126 - 2 * __clz(v3);
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  sub_1CD2A9F2C(v2, (uint64_t)&v2[10 * v3], v5, 1);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v6 + 80 * v7;
    uint64_t v10 = 80 * v7 - 80;
    while (v10 != v8)
    {
      uint64_t v11 = *(void *)(v6 + v8);
      uint64_t v12 = *(void *)(v6 + v8 + 80);
      v8 += 80;
      if (v11 == v12)
      {
        uint64_t v13 = v6 + v8 - 80;
        uint64_t v14 = v10 - v8;
        if (v10 != v8)
        {
          uint64_t v15 = (unsigned char *)(v6 + v8 + 152);
          do
          {
            uint64_t v16 = *((void *)v15 - 9);
            if (*(void *)v13 != v16)
            {
              *(void *)(v13 + 80) = v16;
              v13 += 80;
              sub_1CD2A5BA0(v13 + 8, (uint64_t)(v15 - 64));
              *(unsigned char *)(v13 + 72) = *v15;
            }
            v15 += 80;
            v14 -= 80;
          }
          while (v14);
          uint64_t v6 = *(void *)(a1 + 16);
          LODWORD(v7) = *(_DWORD *)(a1 + 24);
        }
        uint64_t v9 = v13 + 80;
        break;
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  uint64_t v17 = v6 + 80 * v7;
  if (v17 != v9)
  {
    uint64_t v18 = v9;
    do
    {
      uint64_t v19 = *(void **)(v17 - 72);
      if ((void *)(v17 - 56) != v19) {
        free(v19);
      }
      v17 -= 80;
    }
    while (v17 != v18);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v9 = v18;
  }
  *(_DWORD *)(a1 + 24) = -858993459 * ((unint64_t)(v9 - v6) >> 4);
}

void sub_1CD2A9F2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
void sub_1CD2AA328(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 80;
    if (a1 + 80 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        uint64_t v7 = v4;
        uint64_t v8 = *(void *)(v6 + 80);
        if (sub_1CD8ACCB0(*(uint64_t **)(v8 + 24), *(uint64_t **)(v8 + 32), *(void *)v6))
        {
          uint64_t v13 = v8;
          v14[0] = v15;
          v14[1] = (void *)0x200000000;
          if (*(_DWORD *)(v6 + 96)) {
            sub_1CD2A5BA0((uint64_t)v14, v6 + 88);
          }
          char v16 = *(unsigned char *)(v6 + 152);
          uint64_t v9 = *(void *)v6;
          uint64_t v10 = v5;
          while (1)
          {
            *(void *)(a1 + v10 + 80) = v9;
            uint64_t v11 = a1 + v10 + 8;
            sub_1CD2A5BA0(a1 + v10 + 88, v11);
            *(unsigned char *)(a1 + v10 + 152) = *(unsigned char *)(a1 + v10 + 72);
            if (!v10) {
              break;
            }
            uint64_t v9 = *(void *)(a1 + v10 - 80);
            v10 -= 80;
            if (!sub_1CD8ACCB0(*(uint64_t **)(v13 + 24), *(uint64_t **)(v13 + 32), v9))
            {
              uint64_t v12 = a1 + v10 + 80;
              goto LABEL_12;
            }
          }
          uint64_t v12 = a1;
LABEL_12:
          *(void *)uint64_t v12 = v13;
          sub_1CD2A5BA0(v11, (uint64_t)v14);
          *(unsigned char *)(v12 + 72) = v16;
          if (v14[0] != v15) {
            free(v14[0]);
          }
        }
        uint64_t v4 = v7 + 80;
        v5 += 80;
        uint64_t v6 = v7;
      }
      while (v7 + 80 != a2);
    }
  }
}

void sub_1CD2AA4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 80;
    if (a1 + 80 != a2)
    {
      uint64_t v5 = (unsigned char *)(a1 + 152);
      do
      {
        uint64_t v6 = v4;
        uint64_t v7 = *(void *)(v3 + 80);
        if (sub_1CD8ACCB0(*(uint64_t **)(v7 + 24), *(uint64_t **)(v7 + 32), *(void *)v3))
        {
          uint64_t v12 = v7;
          v13[0] = v14;
          v13[1] = (void *)0x200000000;
          if (*(_DWORD *)(v3 + 96)) {
            sub_1CD2A5BA0((uint64_t)v13, v3 + 88);
          }
          char v15 = *(unsigned char *)(v3 + 152);
          uint64_t v8 = *(void *)v3;
          uint64_t v9 = v5;
          do
          {
            uint64_t v10 = v9;
            *((void *)v9 - 9) = v8;
            sub_1CD2A5BA0((uint64_t)(v9 - 64), (uint64_t)(v9 - 144));
            char v11 = *(v9 - 80);
            v9 -= 80;
            *uint64_t v10 = v11;
            uint64_t v8 = *((void *)v10 - 29);
          }
          while (sub_1CD8ACCB0(*(uint64_t **)(v12 + 24), *(uint64_t **)(v12 + 32), v8));
          *((void *)v9 - 9) = v12;
          sub_1CD2A5BA0((uint64_t)(v9 - 64), (uint64_t)v13);
          *uint64_t v9 = v15;
          if (v13[0] != v14) {
            free(v13[0]);
          }
        }
        uint64_t v4 = v6 + 80;
        v5 += 80;
        uint64_t v3 = v6;
      }
      while (v6 + 80 != a2);
    }
  }
}

void sub_1CD2AA610(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)a1;
  BOOL v8 = sub_1CD8ACCB0(*(uint64_t **)(*(void *)a2 + 24), *(uint64_t **)(*(void *)a2 + 32), *(void *)a1);
  uint64_t v9 = *(void *)a3;
  BOOL v10 = sub_1CD8ACCB0(*(uint64_t **)(*(void *)a3 + 24), *(uint64_t **)(*(void *)a3 + 32), v6);
  if (v8)
  {
    if (v10)
    {
      uint64_t v16 = v18;
      uint64_t v17 = 0x200000000;
      if (*(_DWORD *)(a1 + 16))
      {
        sub_1CD2A5BA0((uint64_t)&v16, a1 + 8);
        uint64_t v9 = *(void *)a3;
      }
      char v19 = *(unsigned char *)(a1 + 72);
      *(void *)a1 = v9;
      sub_1CD2A5BA0(a1 + 8, (uint64_t)(a3 + 8));
      *(unsigned char *)(a1 + 72) = a3[72];
      *(void *)a3 = v7;
      uint64_t v11 = (uint64_t)(a3 + 8);
LABEL_6:
      sub_1CD2A5BA0(v11, (uint64_t)&v16);
      a3[72] = v19;
LABEL_7:
      if (v16 != v18) {
        free(v16);
      }
      return;
    }
    uint64_t v16 = v18;
    uint64_t v17 = 0x200000000;
    if (*(_DWORD *)(a1 + 16))
    {
      sub_1CD2A5BA0((uint64_t)&v16, a1 + 8);
      uint64_t v6 = *(void *)a2;
    }
    char v19 = *(unsigned char *)(a1 + 72);
    *(void *)a1 = v6;
    sub_1CD2A5BA0(a1 + 8, a2 + 8);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)a2 = v7;
    sub_1CD2A5BA0(a2 + 8, (uint64_t)&v16);
    *(unsigned char *)(a2 + 72) = v19;
    if (v16 != v18) {
      free(v16);
    }
    uint64_t v12 = *(void *)a3;
    uint64_t v13 = *(void *)a2;
    if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)a3 + 24), *(uint64_t **)(*(void *)a3 + 32), *(void *)a2))
    {
      uint64_t v16 = v18;
      uint64_t v17 = 0x200000000;
      if (*(_DWORD *)(a2 + 16))
      {
        sub_1CD2A5BA0((uint64_t)&v16, a2 + 8);
        uint64_t v12 = *(void *)a3;
      }
      char v19 = *(unsigned char *)(a2 + 72);
      *(void *)a2 = v12;
      sub_1CD2A5BA0(a2 + 8, (uint64_t)(a3 + 8));
      *(unsigned char *)(a2 + 72) = a3[72];
      *(void *)a3 = v13;
      uint64_t v11 = (uint64_t)(a3 + 8);
      goto LABEL_6;
    }
  }
  else if (v10)
  {
    uint64_t v16 = v18;
    uint64_t v17 = 0x200000000;
    if (*(_DWORD *)(a2 + 16))
    {
      sub_1CD2A5BA0((uint64_t)&v16, a2 + 8);
      uint64_t v9 = *(void *)a3;
    }
    char v19 = *(unsigned char *)(a2 + 72);
    *(void *)a2 = v9;
    sub_1CD2A5BA0(a2 + 8, (uint64_t)(a3 + 8));
    *(unsigned char *)(a2 + 72) = a3[72];
    *(void *)a3 = v6;
    sub_1CD2A5BA0((uint64_t)(a3 + 8), (uint64_t)&v16);
    a3[72] = v19;
    if (v16 != v18) {
      free(v16);
    }
    uint64_t v14 = *(void *)a2;
    uint64_t v15 = *(void *)a1;
    if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)a2 + 24), *(uint64_t **)(*(void *)a2 + 32), *(void *)a1))
    {
      uint64_t v16 = v18;
      uint64_t v17 = 0x200000000;
      if (*(_DWORD *)(a1 + 16))
      {
        sub_1CD2A5BA0((uint64_t)&v16, a1 + 8);
        uint64_t v14 = *(void *)a2;
      }
      char v19 = *(unsigned char *)(a1 + 72);
      *(void *)a1 = v14;
      sub_1CD2A5BA0(a1 + 8, a2 + 8);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)a2 = v15;
      sub_1CD2A5BA0(a2 + 8, (uint64_t)&v16);
      *(unsigned char *)(a2 + 72) = v19;
      goto LABEL_7;
    }
  }
}

unint64_t sub_1CD2AA950(uint64_t *a1, unint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v17 = *a1;
  v18[0] = v19;
  v18[1] = (void *)0x200000000;
  if (*((_DWORD *)a1 + 4))
  {
    sub_1CD2A5BA0((uint64_t)v18, (uint64_t)(a1 + 1));
    uint64_t v4 = v17;
  }
  char v20 = *((unsigned char *)a1 + 72);
  uint64_t v5 = *(uint64_t **)(v4 + 24);
  uint64_t v6 = *(uint64_t **)(v4 + 32);
  if (sub_1CD8ACCB0(v5, v6, *(void *)(a2 - 80)))
  {
    unint64_t v7 = (unint64_t)a1;
    do
    {
      uint64_t v8 = *(void *)(v7 + 80);
      v7 += 80;
    }
    while (!sub_1CD8ACCB0(v5, v6, v8));
  }
  else
  {
    unint64_t v16 = (unint64_t)(a1 + 10);
    do
    {
      unint64_t v7 = v16;
      if (v16 >= a2) {
        break;
      }
      v16 += 80;
    }
    while (!sub_1CD8ACCB0(v5, v6, *(void *)v7));
  }
  if (v7 < a2)
  {
    do
    {
      uint64_t v9 = *(void *)(a2 - 80);
      a2 -= 80;
    }
    while (sub_1CD8ACCB0(v5, v6, v9));
  }
  if (v7 < a2)
  {
    uint64_t v10 = *(void *)v7;
    do
    {
      uint64_t v21 = v10;
      v22[0] = v23;
      v22[1] = (void *)0x200000000;
      if (*(_DWORD *)(v7 + 16)) {
        sub_1CD2A5BA0((uint64_t)v22, v7 + 8);
      }
      char v24 = *(unsigned char *)(v7 + 72);
      *(void *)unint64_t v7 = *(void *)a2;
      sub_1CD2A5BA0(v7 + 8, a2 + 8);
      *(unsigned char *)(v7 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)a2 = v21;
      sub_1CD2A5BA0(a2 + 8, (uint64_t)v22);
      *(unsigned char *)(a2 + 72) = v24;
      if (v22[0] != v23) {
        free(v22[0]);
      }
      uint64_t v4 = v17;
      uint64_t v11 = *(uint64_t **)(v17 + 24);
      uint64_t v12 = *(uint64_t **)(v17 + 32);
      do
      {
        uint64_t v13 = *(void *)(v7 + 80);
        v7 += 80;
        uint64_t v10 = v13;
      }
      while (!sub_1CD8ACCB0(v11, v12, v13));
      do
      {
        uint64_t v14 = *(void *)(a2 - 80);
        a2 -= 80;
      }
      while (sub_1CD8ACCB0(v11, v12, v14));
    }
    while (v7 < a2);
  }
  if ((uint64_t *)(v7 - 80) != a1)
  {
    *a1 = *(void *)(v7 - 80);
    sub_1CD2A5BA0((uint64_t)(a1 + 1), v7 - 72);
    *((unsigned char *)a1 + 72) = *(unsigned char *)(v7 - 8);
    uint64_t v4 = v17;
  }
  *(void *)(v7 - 80) = v4;
  sub_1CD2A5BA0(v7 - 72, (uint64_t)v18);
  *(unsigned char *)(v7 - 8) = v20;
  if (v18[0] != v19) {
    free(v18[0]);
  }
  return v7;
}

unint64_t sub_1CD2AABA8(uint64_t a1, unint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  uint64_t v15 = *(void *)a1;
  v16[0] = v17;
  v16[1] = (void *)0x200000000;
  if (*(_DWORD *)(a1 + 16)) {
    sub_1CD2A5BA0((uint64_t)v16, a1 + 8);
  }
  uint64_t v5 = 0;
  char v18 = *(unsigned char *)(a1 + 72);
  do
  {
    uint64_t v6 = *(void *)(a1 + v5 + 80);
    v5 += 80;
  }
  while (sub_1CD8ACCB0(*(uint64_t **)(v6 + 24), *(uint64_t **)(v6 + 32), v4));
  unint64_t v7 = a1 + v5;
  if (v5 == 80)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      uint64_t v9 = *(void *)(a2 - 80);
      a2 -= 80;
    }
    while (!sub_1CD8ACCB0(*(uint64_t **)(v9 + 24), *(uint64_t **)(v9 + 32), v4));
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a2 - 80);
      a2 -= 80;
    }
    while (!sub_1CD8ACCB0(*(uint64_t **)(v8 + 24), *(uint64_t **)(v8 + 32), v4));
  }
  if (v7 >= a2)
  {
    unint64_t v10 = a1 + v5;
  }
  else
  {
    unint64_t v10 = a1 + v5;
    unint64_t v11 = a2;
    do
    {
      uint64_t v19 = v6;
      v20[0] = v21;
      v20[1] = (void *)0x200000000;
      if (*(_DWORD *)(v10 + 16)) {
        sub_1CD2A5BA0((uint64_t)v20, v10 + 8);
      }
      char v22 = *(unsigned char *)(v10 + 72);
      *(void *)unint64_t v10 = *(void *)v11;
      sub_1CD2A5BA0(v10 + 8, v11 + 8);
      *(unsigned char *)(v10 + 72) = *(unsigned char *)(v11 + 72);
      *(void *)unint64_t v11 = v19;
      sub_1CD2A5BA0(v11 + 8, (uint64_t)v20);
      *(unsigned char *)(v11 + 72) = v22;
      if (v20[0] != v21) {
        free(v20[0]);
      }
      uint64_t v4 = v15;
      do
      {
        uint64_t v12 = *(void *)(v10 + 80);
        v10 += 80;
        uint64_t v6 = v12;
      }
      while (sub_1CD8ACCB0(*(uint64_t **)(v12 + 24), *(uint64_t **)(v12 + 32), v15));
      do
      {
        uint64_t v13 = *(void *)(v11 - 80);
        v11 -= 80;
      }
      while (!sub_1CD8ACCB0(*(uint64_t **)(v13 + 24), *(uint64_t **)(v13 + 32), v15));
    }
    while (v10 < v11);
  }
  if (v10 - 80 != a1)
  {
    *(void *)a1 = *(void *)(v10 - 80);
    sub_1CD2A5BA0(a1 + 8, v10 - 72);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(v10 - 8);
    uint64_t v4 = v15;
  }
  *(void *)(v10 - 80) = v4;
  sub_1CD2A5BA0(v10 - 72, (uint64_t)v16);
  *(unsigned char *)(v10 - 8) = v18;
  if (v16[0] != v17) {
    free(v16[0]);
  }
  return v10 - 80;
}

BOOL sub_1CD2AADF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v15 = *(a2 - 10);
      uint64_t v16 = *(void *)a1;
      if (sub_1CD8ACCB0(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), *(void *)a1))
      {
        uint64_t v17 = v19;
        uint64_t v18 = 0x200000000;
        if (*(_DWORD *)(a1 + 16))
        {
          sub_1CD2A5BA0((uint64_t)&v17, a1 + 8);
          uint64_t v15 = *(a2 - 10);
        }
        char v20 = *(unsigned char *)(a1 + 72);
        *(void *)a1 = v15;
        sub_1CD2A5BA0(a1 + 8, (uint64_t)(a2 - 9));
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 - 8);
        *(a2 - 10) = v16;
        sub_1CD2A5BA0((uint64_t)(a2 - 9), (uint64_t)&v17);
        *((unsigned char *)a2 - 8) = v20;
        if (v17 != v19) {
          free(v17);
        }
      }
      return 1;
    case 3uLL:
      sub_1CD2AA610(a1, a1 + 80, (unsigned char *)a2 - 80);
      return 1;
    case 4uLL:
      sub_1CD2AB1E0(a1, (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 160), (unsigned char *)a2 - 80);
      return 1;
    case 5uLL:
      sub_1CD2AB42C(a1, a1 + 80, a1 + 160, (uint64_t *)(a1 + 240), (unsigned char *)a2 - 80);
      return 1;
    default:
      uint64_t v6 = (uint64_t *)(a1 + 160);
      sub_1CD2AA610(a1, a1 + 80, (unsigned char *)(a1 + 160));
      unint64_t v7 = (uint64_t *)(a1 + 240);
      if ((uint64_t *)(a1 + 240) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    uint64_t v10 = *v7;
    if (sub_1CD8ACCB0(*(uint64_t **)(*v7 + 24), *(uint64_t **)(*v7 + 32), *v6))
    {
      uint64_t v17 = v19;
      uint64_t v18 = 0x200000000;
      if (*((_DWORD *)v7 + 4)) {
        sub_1CD2A5BA0((uint64_t)&v17, (uint64_t)(v7 + 1));
      }
      char v20 = *((unsigned char *)v7 + 72);
      uint64_t v11 = *v6;
      uint64_t v12 = v8;
      while (1)
      {
        *(void *)(a1 + v12 + 240) = v11;
        uint64_t v13 = a1 + v12 + 168;
        sub_1CD2A5BA0(a1 + v12 + 248, v13);
        *(unsigned char *)(a1 + v12 + 312) = *(unsigned char *)(a1 + v12 + 232);
        if (v12 == -160) {
          break;
        }
        uint64_t v11 = *(void *)(a1 + v12 + 80);
        v12 -= 80;
        if (!sub_1CD8ACCB0(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), v11))
        {
          uint64_t v14 = a1 + v12 + 240;
          goto LABEL_13;
        }
      }
      uint64_t v14 = a1;
LABEL_13:
      *(void *)uint64_t v14 = v10;
      sub_1CD2A5BA0(v13, (uint64_t)&v17);
      *(unsigned char *)(v14 + 72) = v20;
      if (v17 != v19) {
        free(v17);
      }
      if (++v9 == 8) {
        return v7 + 10 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 80;
    BOOL result = 1;
    v7 += 10;
    if (v7 == a2) {
      return result;
    }
  }
}

void sub_1CD2AB0F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  v5[0] = v6;
  v5[1] = (void *)0x200000000;
  if (*((_DWORD *)a1 + 4)) {
    sub_1CD2A5BA0((uint64_t)v5, (uint64_t)(a1 + 1));
  }
  char v7 = *((unsigned char *)a1 + 72);
  *a1 = *a2;
  sub_1CD2A5BA0((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
  *a2 = v4;
  sub_1CD2A5BA0((uint64_t)(a2 + 1), (uint64_t)v5);
  *((unsigned char *)a2 + 72) = v7;
  if (v5[0] != v6) {
    free(v5[0]);
  }
}

void sub_1CD2AB1E0(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_1CD2AA610(a1, (uint64_t)a2, a3);
  uint64_t v8 = *(void *)a4;
  uint64_t v9 = *a3;
  if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)a4 + 24), *(uint64_t **)(*(void *)a4 + 32), *a3))
  {
    uint64_t v14 = v16;
    uint64_t v15 = 0x200000000;
    if (*((_DWORD *)a3 + 4))
    {
      sub_1CD2A5BA0((uint64_t)&v14, (uint64_t)(a3 + 1));
      uint64_t v8 = *(void *)a4;
    }
    char v17 = *((unsigned char *)a3 + 72);
    *a3 = v8;
    sub_1CD2A5BA0((uint64_t)(a3 + 1), (uint64_t)(a4 + 8));
    *((unsigned char *)a3 + 72) = a4[72];
    *(void *)a4 = v9;
    sub_1CD2A5BA0((uint64_t)(a4 + 8), (uint64_t)&v14);
    a4[72] = v17;
    if (v14 != v16) {
      free(v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *a2;
    if (sub_1CD8ACCB0(*(uint64_t **)(*a3 + 24), *(uint64_t **)(*a3 + 32), *a2))
    {
      uint64_t v14 = v16;
      uint64_t v15 = 0x200000000;
      if (*((_DWORD *)a2 + 4))
      {
        sub_1CD2A5BA0((uint64_t)&v14, (uint64_t)(a2 + 1));
        uint64_t v10 = *a3;
      }
      char v17 = *((unsigned char *)a2 + 72);
      *a2 = v10;
      sub_1CD2A5BA0((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
      *((unsigned char *)a2 + 72) = *((unsigned char *)a3 + 72);
      *a3 = v11;
      sub_1CD2A5BA0((uint64_t)(a3 + 1), (uint64_t)&v14);
      *((unsigned char *)a3 + 72) = v17;
      if (v14 != v16) {
        free(v14);
      }
      uint64_t v12 = *a2;
      uint64_t v13 = *(void *)a1;
      if (sub_1CD8ACCB0(*(uint64_t **)(*a2 + 24), *(uint64_t **)(*a2 + 32), *(void *)a1))
      {
        uint64_t v14 = v16;
        uint64_t v15 = 0x200000000;
        if (*(_DWORD *)(a1 + 16))
        {
          sub_1CD2A5BA0((uint64_t)&v14, a1 + 8);
          uint64_t v12 = *a2;
        }
        char v17 = *(unsigned char *)(a1 + 72);
        *(void *)a1 = v12;
        sub_1CD2A5BA0(a1 + 8, (uint64_t)(a2 + 1));
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *a2 = v13;
        sub_1CD2A5BA0((uint64_t)(a2 + 1), (uint64_t)&v14);
        *((unsigned char *)a2 + 72) = v17;
        if (v14 != v16) {
          free(v14);
        }
      }
    }
  }
}

void sub_1CD2AB42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned char *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  sub_1CD2AB1E0(a1, (uint64_t *)a2, (uint64_t *)a3, a4);
  uint64_t v10 = *(void *)a5;
  uint64_t v11 = *a4;
  if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)a5 + 24), *(uint64_t **)(*(void *)a5 + 32), *a4))
  {
    uint64_t v18 = v20;
    uint64_t v19 = 0x200000000;
    if (*((_DWORD *)a4 + 4))
    {
      sub_1CD2A5BA0((uint64_t)&v18, (uint64_t)(a4 + 1));
      uint64_t v10 = *(void *)a5;
    }
    char v21 = *((unsigned char *)a4 + 72);
    *a4 = v10;
    sub_1CD2A5BA0((uint64_t)(a4 + 1), (uint64_t)(a5 + 8));
    *((unsigned char *)a4 + 72) = a5[72];
    *(void *)a5 = v11;
    sub_1CD2A5BA0((uint64_t)(a5 + 8), (uint64_t)&v18);
    a5[72] = v21;
    if (v18 != v20) {
      free(v18);
    }
    uint64_t v12 = *a4;
    uint64_t v13 = *(void *)a3;
    if (sub_1CD8ACCB0(*(uint64_t **)(*a4 + 24), *(uint64_t **)(*a4 + 32), *(void *)a3))
    {
      uint64_t v18 = v20;
      uint64_t v19 = 0x200000000;
      if (*(_DWORD *)(a3 + 16))
      {
        sub_1CD2A5BA0((uint64_t)&v18, a3 + 8);
        uint64_t v12 = *a4;
      }
      char v21 = *(unsigned char *)(a3 + 72);
      *(void *)a3 = v12;
      sub_1CD2A5BA0(a3 + 8, (uint64_t)(a4 + 1));
      *(unsigned char *)(a3 + 72) = *((unsigned char *)a4 + 72);
      *a4 = v13;
      sub_1CD2A5BA0((uint64_t)(a4 + 1), (uint64_t)&v18);
      *((unsigned char *)a4 + 72) = v21;
      if (v18 != v20) {
        free(v18);
      }
      uint64_t v14 = *(void *)a3;
      uint64_t v15 = *(void *)a2;
      if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)a3 + 24), *(uint64_t **)(*(void *)a3 + 32), *(void *)a2))
      {
        uint64_t v18 = v20;
        uint64_t v19 = 0x200000000;
        if (*(_DWORD *)(a2 + 16))
        {
          sub_1CD2A5BA0((uint64_t)&v18, a2 + 8);
          uint64_t v14 = *(void *)a3;
        }
        char v21 = *(unsigned char *)(a2 + 72);
        *(void *)a2 = v14;
        sub_1CD2A5BA0(a2 + 8, a3 + 8);
        *(unsigned char *)(a2 + 72) = *(unsigned char *)(a3 + 72);
        *(void *)a3 = v15;
        sub_1CD2A5BA0(a3 + 8, (uint64_t)&v18);
        *(unsigned char *)(a3 + 72) = v21;
        if (v18 != v20) {
          free(v18);
        }
        uint64_t v16 = *(void *)a2;
        uint64_t v17 = *(void *)a1;
        if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)a2 + 24), *(uint64_t **)(*(void *)a2 + 32), *(void *)a1))
        {
          uint64_t v18 = v20;
          uint64_t v19 = 0x200000000;
          if (*(_DWORD *)(a1 + 16))
          {
            sub_1CD2A5BA0((uint64_t)&v18, a1 + 8);
            uint64_t v16 = *(void *)a2;
          }
          char v21 = *(unsigned char *)(a1 + 72);
          *(void *)a1 = v16;
          sub_1CD2A5BA0(a1 + 8, a2 + 8);
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
          *(void *)a2 = v17;
          sub_1CD2A5BA0(a2 + 8, (uint64_t)&v18);
          *(unsigned char *)(a2 + 72) = v21;
          if (v18 != v20) {
            free(v18);
          }
        }
      }
    }
  }
}

void sub_1CD2AB718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    uint64_t v6 = a2 - a1;
    uint64_t v7 = (a2 - a1) / 80;
    if (a2 - a1 >= 81)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      uint64_t v10 = a1 + 80 * v8;
      do
      {
        sub_1CD2ABB80(a1, v7, v10);
        v10 -= 80;
        --v9;
      }
      while (v9);
    }
    BOOL v36 = (uint64_t *)a1;
    if (a2 != a3)
    {
      uint64_t v11 = a1 + 8;
      uint64_t v12 = a2;
      do
      {
        uint64_t v13 = *(void *)v12;
        uint64_t v14 = *v36;
        if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)v12 + 24), *(uint64_t **)(*(void *)v12 + 32), *v36))
        {
          uint64_t v44 = v13;
          unint64_t v45 = v47;
          uint64_t v46 = 0x200000000;
          if (*(_DWORD *)(v12 + 16))
          {
            sub_1CD2A5BA0((uint64_t)&v45, v12 + 8);
            uint64_t v15 = v36;
            uint64_t v14 = *v36;
          }
          else
          {
            uint64_t v15 = v36;
          }
          char v48 = *(unsigned char *)(v12 + 72);
          *(void *)uint64_t v12 = v14;
          sub_1CD2A5BA0(v12 + 8, v11);
          *(unsigned char *)(v12 + 72) = *((unsigned char *)v15 + 72);
          *uint64_t v15 = v44;
          sub_1CD2A5BA0(v11, (uint64_t)&v45);
          *((unsigned char *)v15 + 72) = v48;
          if (v45 != v47) {
            free(v45);
          }
          sub_1CD2ABB80((uint64_t)v36, v7, (uint64_t)v36);
        }
        v12 += 80;
      }
      while (v12 != a3);
    }
    uint64_t v16 = v36;
    if (v6 >= 81)
    {
      uint64_t v17 = a2;
      do
      {
        if (v7 < 2) {
          break;
        }
        uint64_t v37 = v17;
        uint64_t v40 = *v16;
        v41[0] = v42;
        v41[1] = (void *)0x200000000;
        if (*((_DWORD *)v16 + 4)) {
          sub_1CD2A5BA0((uint64_t)v41, (uint64_t)(v36 + 1));
        }
        uint64_t v18 = 0;
        char v43 = *((unsigned char *)v16 + 72);
        uint64_t v19 = v16;
        do
        {
          char v20 = &v19[10 * v18 + 10];
          uint64_t v21 = (2 * v18) | 1;
          uint64_t v18 = 2 * v18 + 2;
          if (v18 < v7)
          {
            uint64_t v23 = *v20;
            uint64_t v24 = v20[10];
            BOOL v25 = sub_1CD8ACCB0(*(uint64_t **)(*v20 + 24), *(uint64_t **)(*v20 + 32), v24);
            if (v25) {
              uint64_t v22 = v24;
            }
            else {
              uint64_t v22 = v23;
            }
            if (v25) {
              v20 += 10;
            }
            else {
              uint64_t v18 = v21;
            }
          }
          else
          {
            uint64_t v22 = *v20;
            uint64_t v18 = v21;
          }
          *uint64_t v19 = v22;
          sub_1CD2A5BA0((uint64_t)(v19 + 1), (uint64_t)(v20 + 1));
          *((unsigned char *)v19 + 72) = *((unsigned char *)v20 + 72);
          uint64_t v19 = v20;
        }
        while (v18 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        uint64_t v17 = v37 - 80;
        if (v20 == (uint64_t *)(v37 - 80))
        {
          *char v20 = v40;
          sub_1CD2A5BA0((uint64_t)(v20 + 1), (uint64_t)v41);
          *((unsigned char *)v20 + 72) = v43;
          uint64_t v16 = v36;
        }
        else
        {
          *char v20 = *(void *)(v37 - 80);
          sub_1CD2A5BA0((uint64_t)(v20 + 1), v37 - 72);
          *((unsigned char *)v20 + 72) = *(unsigned char *)(v37 - 8);
          *(void *)(v37 - 80) = v40;
          sub_1CD2A5BA0(v37 - 72, (uint64_t)v41);
          *(unsigned char *)(v37 - 8) = v43;
          uint64_t v16 = v36;
          uint64_t v26 = (char *)v20 - (char *)v36 + 80;
          if (v26 >= 81)
          {
            unint64_t v27 = (v26 / 0x50uLL - 2) >> 1;
            unint64_t v38 = &v36[10 * v27];
            uint64_t v28 = *v38;
            uint64_t v29 = *v20;
            if (sub_1CD8ACCB0(*(uint64_t **)(*v38 + 24), *(uint64_t **)(*v38 + 32), *v20))
            {
              uint64_t v44 = v29;
              unint64_t v45 = v47;
              uint64_t v46 = 0x200000000;
              if (*((_DWORD *)v20 + 4))
              {
                sub_1CD2A5BA0((uint64_t)&v45, (uint64_t)(v20 + 1));
                int8x16_t v30 = &v36[10 * v27];
                uint64_t v28 = *v38;
              }
              else
              {
                int8x16_t v30 = &v36[10 * v27];
              }
              char v48 = *((unsigned char *)v20 + 72);
              do
              {
                uint64_t v32 = v30;
                *char v20 = v28;
                uint64_t v39 = (uint64_t)(v30 + 1);
                sub_1CD2A5BA0((uint64_t)(v20 + 1), (uint64_t)(v30 + 1));
                *((unsigned char *)v20 + 72) = *((unsigned char *)v32 + 72);
                uint64_t v33 = v44;
                if (!v27) {
                  break;
                }
                unint64_t v27 = (v27 - 1) >> 1;
                BOOL v34 = &v36[10 * v27];
                uint64_t v28 = *v34;
                BOOL v35 = sub_1CD8ACCB0(*(uint64_t **)(*v34 + 24), *(uint64_t **)(*v34 + 32), v44);
                int8x16_t v30 = v34;
                char v20 = v32;
              }
              while (v35);
              *uint64_t v32 = v33;
              sub_1CD2A5BA0(v39, (uint64_t)&v45);
              *((unsigned char *)v32 + 72) = v48;
              if (v45 != v47) {
                free(v45);
              }
            }
          }
        }
        if (v41[0] != v42) {
          free(v41[0]);
        }
      }
      while (v7-- > 2);
    }
  }
}

void sub_1CD2ABB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    int64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a3 - a1) >> 4)))
    {
      int64_t v8 = (0x999999999999999ALL * ((a3 - a1) >> 4)) | 1;
      uint64_t v9 = a1 + 80 * v8;
      int64_t v10 = 0x999999999999999ALL * ((a3 - a1) >> 4) + 2;
      if (v10 >= a2)
      {
        uint64_t v12 = *(void *)v9;
      }
      else
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *(void *)(v9 + 80);
        BOOL v13 = sub_1CD8ACCB0(*(uint64_t **)(*(void *)v9 + 24), *(uint64_t **)(*(void *)v9 + 32), v12);
        if (v13) {
          v9 += 80;
        }
        else {
          uint64_t v12 = v11;
        }
        if (v13) {
          int64_t v8 = v10;
        }
      }
      uint64_t v14 = *(void *)v4;
      if (!sub_1CD8ACCB0(*(uint64_t **)(v12 + 24), *(uint64_t **)(v12 + 32), *(void *)v4))
      {
        uint64_t v20 = v14;
        v21[0] = v22;
        v21[1] = (void *)0x200000000;
        if (*(_DWORD *)(v4 + 16))
        {
          sub_1CD2A5BA0((uint64_t)v21, v4 + 8);
          uint64_t v12 = *(void *)v9;
        }
        char v23 = *(unsigned char *)(v4 + 72);
        while (1)
        {
          uint64_t v15 = v9;
          *(void *)uint64_t v4 = v12;
          uint64_t v16 = v9 + 8;
          sub_1CD2A5BA0(v4 + 8, v9 + 8);
          *(unsigned char *)(v4 + 72) = *(unsigned char *)(v9 + 72);
          if (v6 < v8) {
            break;
          }
          uint64_t v17 = (2 * v8) | 1;
          uint64_t v9 = a1 + 80 * v17;
          int64_t v8 = 2 * v8 + 2;
          if (v8 >= a2)
          {
            uint64_t v12 = *(void *)v9;
            int64_t v8 = v17;
          }
          else
          {
            uint64_t v12 = *(void *)v9;
            uint64_t v19 = *(void *)(v9 + 80);
            if (sub_1CD8ACCB0(*(uint64_t **)(*(void *)v9 + 24), *(uint64_t **)(*(void *)v9 + 32), v19))
            {
              uint64_t v12 = v19;
              v9 += 80;
            }
            else
            {
              int64_t v8 = v17;
            }
          }
          uint64_t v18 = v20;
          uint64_t v4 = v15;
          if (sub_1CD8ACCB0(*(uint64_t **)(v12 + 24), *(uint64_t **)(v12 + 32), v20)) {
            goto LABEL_25;
          }
        }
        uint64_t v18 = v20;
LABEL_25:
        *(void *)uint64_t v15 = v18;
        sub_1CD2A5BA0(v16, (uint64_t)v21);
        *(unsigned char *)(v15 + 72) = v23;
        if (v21[0] != v22) {
          free(v21[0]);
        }
      }
    }
  }
}

uint64_t sub_1CD2ABD98@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v10 = 0;
  uint64_t result = sub_1CD2A95D0((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD2A96B8(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(void *)(result + 8) = a2[1];
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CD2ABE28(uint64_t *a1, unsigned int a2, void *a3)
{
  return sub_1CD2A221C(a1, *(void *)(a1[3] + 8) + 24 * a2, a3);
}

void sub_1CD2ABE3C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x1AF286BCA1AF286) {
      abort();
    }
    unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0xD79435E50D7943) {
      unint64_t v10 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v21 = a1 + 2;
    if (v10 > 0x1AF286BCA1AF286) {
      sub_1CB833614();
    }
    uint64_t v11 = 152 * v10;
    uint64_t v12 = (char *)operator new(152 * v10);
    BOOL v13 = &v12[152 * v7];
    __p = v12;
    uint64_t v18 = v13;
    uint64_t v20 = &v12[v11];
    *(void *)BOOL v13 = *(void *)a2;
    *((void *)v13 + 1) = v13 + 24;
    *((void *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD4684F0((uint64_t)(v13 + 8), a2 + 8);
    }
    uint64_t v19 = v13 + 152;
    sub_1CD8ACE64(a1, &__p);
    int64_t v6 = (void *)a1[1];
    uint64_t v14 = v18;
    for (uint64_t i = v19; i != v14; i -= 152)
    {
      uint64_t v16 = (char *)*((void *)i - 18);
      if (i - 128 != v16) {
        free(v16);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *uint64_t v5 = *(void *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD4684F0((uint64_t)(v5 + 1), a2 + 8);
    }
    int64_t v6 = v5 + 19;
  }
  a1[1] = (uint64_t)v6;
}

void *sub_1CD2ABFE8(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    uint64_t v16 = 0;
LABEL_11:
    uint64_t result = sub_1CCB9CE80(a2, (uint64_t)a3, a3, v16);
    *uint64_t result = *a3;
    *((_DWORD *)result + 2) = *a4;
    uint64_t v9 = *(void *)a2;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    char v13 = 1;
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)a2;
  unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
  uint64_t result = (void *)(*(void *)a2 + 16 * v10);
  uint64_t v12 = *result;
  if (*a3 != *result)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v12 != -4096)
    {
      if (v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -8192;
      }
      if (v17) {
        uint64_t v14 = result;
      }
      unsigned int v18 = v10 + v15++;
      unsigned int v10 = v18 & (v8 - 1);
      uint64_t result = (void *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a3 == *result) {
        goto LABEL_3;
      }
    }
    if (v14) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = result;
    }
    goto LABEL_11;
  }
LABEL_3:
  char v13 = 0;
LABEL_4:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a1 + 16) = v13;
  return result;
}

__n128 sub_1CD2AC0DC(__n128 *a1, __n128 *a2, uint64_t *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = (char *)a1;
    if (a4 == 2)
    {
      uint64_t v11 = a2 - 1;
      unint64_t v10 = a2[-1].n128_u64[0];
      uint64_t v12 = *a3;
      if (v10
        && (char v13 = (uint64_t *)(*(void *)(*(void *)(v12 + 8) + 272) + 88),
            uint64_t v56 = 0,
            unint64_t v57 = v10,
            sub_1CC48C528(v13, &v57, &v56)))
      {
        int v14 = *(_DWORD *)(v56 + 8);
      }
      else
      {
        int v14 = 0;
      }
      unint64_t v34 = *(void *)v9;
      if (*(void *)v9)
      {
        BOOL v35 = (uint64_t *)(*(void *)(*(void *)(v12 + 8) + 272) + 88);
        uint64_t v56 = 0;
        unint64_t v57 = v34;
        if (sub_1CC48C528(v35, &v57, &v56)) {
          LODWORD(v34) = *(_DWORD *)(v56 + 8);
        }
        else {
          LODWORD(v34) = 0;
        }
      }
      if (v14 - 1 < (v34 - 1))
      {
        uint64_t result = *(__n128 *)v9;
        *(__n128 *)uint64_t v9 = *v11;
        __n128 *v11 = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v37 = (char *)a5;
      unint64_t v38 = a4 >> 1;
      uint64_t v39 = &a1[a4 >> 1];
      unint64_t v40 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        __n128 v41 = sub_1CD2AC50C(a1, v39, a3, v40, a5, result);
        unint64_t v42 = (__n128 *)&v37[16 * v38];
        result.n128_u64[0] = sub_1CD2AC50C((__n128 *)&v9[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v42, v41).n128_u64[0];
        char v43 = &v37[16 * a4];
        uint64_t v44 = v42;
        while (v44 != (__n128 *)v43)
        {
          uint64_t v45 = *a3;
          unint64_t v46 = v44->n128_u64[0];
          if (v44->n128_u64[0]
            && (unint64_t v47 = (uint64_t *)(*(void *)(*(void *)(v45 + 8) + 272) + 88),
                uint64_t v56 = 0,
                unint64_t v57 = v46,
                sub_1CC48C528(v47, &v57, &v56)))
          {
            int v48 = *(_DWORD *)(v56 + 8);
          }
          else
          {
            int v48 = 0;
          }
          unint64_t v49 = *(void *)v37;
          if (*(void *)v37)
          {
            unint64_t v50 = (uint64_t *)(*(void *)(*(void *)(v45 + 8) + 272) + 88);
            uint64_t v56 = 0;
            unint64_t v57 = v49;
            if (sub_1CC48C528(v50, &v57, &v56)) {
              LODWORD(v49) = *(_DWORD *)(v56 + 8);
            }
            else {
              LODWORD(v49) = 0;
            }
          }
          if (v48 - 1 >= (v49 - 1))
          {
            __n128 v52 = *(__n128 *)v37;
            v37 += 16;
            uint64_t result = v52;
          }
          else
          {
            __n128 v51 = *v44++;
            uint64_t result = v51;
          }
          *(__n128 *)uint64_t v9 = result;
          v9 += 16;
          if (v37 == (char *)v42)
          {
            if (v44 != (__n128 *)v43)
            {
              uint64_t v53 = 0;
              do
              {
                uint64_t result = v44[v53];
                *(__n128 *)&v9[v53 * 16] = result;
                ++v53;
              }
              while (&v44[v53] != (__n128 *)v43);
            }
            return result;
          }
        }
        if (v37 != (char *)v42)
        {
          uint64_t v54 = 0;
          do
          {
            uint64_t result = *(__n128 *)&v37[v54];
            *(__n128 *)&v9[v54] = result;
            v54 += 16;
          }
          while (&v37[v54] != (char *)v42);
        }
      }
      else
      {
        sub_1CD2AC0DC(a1, v39, a3, v40, a5, a6);
        sub_1CD2AC0DC(&v9[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37, a6);
        sub_1CD2AC904(v9, &v9[16 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v37, a6);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v16 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v17 = 0;
        unsigned int v18 = a1;
        do
        {
          uint64_t v19 = v16;
          uint64_t v20 = *a3;
          unint64_t v21 = v18[1].n128_u64[0];
          if (v21
            && (uint64_t v22 = (uint64_t *)(*(void *)(*(void *)(v20 + 8) + 272) + 88),
                uint64_t v56 = 0,
                unint64_t v57 = v21,
                sub_1CC48C528(v22, &v57, &v56)))
          {
            int v23 = *(_DWORD *)(v56 + 8);
          }
          else
          {
            int v23 = 0;
          }
          unint64_t v24 = v18->n128_u64[0];
          if (v18->n128_u64[0])
          {
            BOOL v25 = (uint64_t *)(*(void *)(*(void *)(v20 + 8) + 272) + 88);
            uint64_t v56 = 0;
            unint64_t v57 = v24;
            if (sub_1CC48C528(v25, &v57, &v56)) {
              LODWORD(v24) = *(_DWORD *)(v56 + 8);
            }
            else {
              LODWORD(v24) = 0;
            }
          }
          if (v23 - 1 < (v24 - 1))
          {
            __n128 v55 = *v19;
            unint64_t v26 = v19->n128_u64[0];
            uint64_t v27 = v17;
            while (1)
            {
              *(_OWORD *)&v9[v27 + 16] = *(_OWORD *)&v9[v27];
              if (!v27) {
                break;
              }
              uint64_t v28 = *a3;
              if (v26
                && (uint64_t v29 = (uint64_t *)(*(void *)(*(void *)(v28 + 8) + 272) + 88),
                    uint64_t v56 = 0,
                    unint64_t v57 = v26,
                    sub_1CC48C528(v29, &v57, &v56)))
              {
                int v30 = *(_DWORD *)(v56 + 8);
              }
              else
              {
                int v30 = 0;
              }
              unint64_t v31 = *(void *)&v9[v27 - 16];
              if (v31)
              {
                uint64_t v32 = (uint64_t *)(*(void *)(*(void *)(v28 + 8) + 272) + 88);
                uint64_t v56 = 0;
                unint64_t v57 = v31;
                if (sub_1CC48C528(v32, &v57, &v56)) {
                  LODWORD(v31) = *(_DWORD *)(v56 + 8);
                }
                else {
                  LODWORD(v31) = 0;
                }
              }
              v27 -= 16;
              if (v30 - 1 >= (v31 - 1))
              {
                uint64_t v33 = (__n128 *)&v9[v27 + 16];
                goto LABEL_32;
              }
            }
            uint64_t v33 = (__n128 *)v9;
LABEL_32:
            uint64_t result = v55;
            __n128 *v33 = v55;
          }
          uint64_t v16 = v19 + 1;
          v17 += 16;
          unsigned int v18 = v19;
        }
        while (&v19[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1CD2AC50C(__n128 *a1, __n128 *a2, uint64_t *a3, unint64_t a4, __n128 *a5, __n128 result)
{
  if (a4)
  {
    int64_t v6 = a5;
    uint64_t v9 = a1;
    if (a4 == 2)
    {
      uint64_t v11 = a2 - 1;
      unint64_t v10 = a2[-1].n128_u64[0];
      uint64_t v12 = *a3;
      if (v10
        && (char v13 = (uint64_t *)(*(void *)(*(void *)(v12 + 8) + 272) + 88),
            uint64_t v52 = 0,
            unint64_t v53 = v10,
            sub_1CC48C528(v13, &v53, &v52)))
      {
        int v14 = *(_DWORD *)(v52 + 8);
      }
      else
      {
        int v14 = 0;
      }
      unint64_t v36 = v9->n128_u64[0];
      if (v9->n128_u64[0])
      {
        uint64_t v37 = (uint64_t *)(*(void *)(*(void *)(v12 + 8) + 272) + 88);
        uint64_t v52 = 0;
        unint64_t v53 = v36;
        if (sub_1CC48C528(v37, &v53, &v52)) {
          LODWORD(v36) = *(_DWORD *)(v52 + 8);
        }
        else {
          LODWORD(v36) = 0;
        }
      }
      if (v14 - 1 >= (v36 - 1))
      {
        __n128 *v6 = *v9;
        uint64_t result = *v11;
      }
      else
      {
        __n128 *v6 = *v11;
        uint64_t result = *v9;
      }
      v6[1] = result;
    }
    else if (a4 == 1)
    {
      uint64_t result = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v38 = &a1[a4 >> 1];
      sub_1CD2AC0DC(a1, v38, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t v39 = a2;
      sub_1CD2AC0DC(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v40 = &v9[a4 >> 1];
      while (v40 != v39)
      {
        uint64_t v41 = *a3;
        unint64_t v42 = v40->n128_u64[0];
        if (v40->n128_u64[0]
          && (char v43 = (uint64_t *)(*(void *)(*(void *)(v41 + 8) + 272) + 88),
              uint64_t v52 = 0,
              unint64_t v53 = v42,
              sub_1CC48C528(v43, &v53, &v52)))
        {
          int v44 = *(_DWORD *)(v52 + 8);
        }
        else
        {
          int v44 = 0;
        }
        unint64_t v45 = v9->n128_u64[0];
        if (v9->n128_u64[0])
        {
          unint64_t v46 = (uint64_t *)(*(void *)(*(void *)(v41 + 8) + 272) + 88);
          uint64_t v52 = 0;
          unint64_t v53 = v45;
          if (sub_1CC48C528(v46, &v53, &v52)) {
            LODWORD(v45) = *(_DWORD *)(v52 + 8);
          }
          else {
            LODWORD(v45) = 0;
          }
        }
        if (v44 - 1 >= (v45 - 1))
        {
          __n128 v48 = *v9++;
          uint64_t result = v48;
        }
        else
        {
          __n128 v47 = *v40++;
          uint64_t result = v47;
        }
        *v6++ = result;
        uint64_t v39 = a2;
        if (v9 == v38)
        {
          if (v40 != a2)
          {
            uint64_t v49 = 0;
            do
            {
              uint64_t result = v40[v49];
              v6[v49++] = result;
            }
            while (&v40[v49] != a2);
          }
          return result;
        }
      }
      if (v9 != v38)
      {
        uint64_t v50 = 0;
        do
        {
          uint64_t result = v9[v50];
          v6[v50++] = result;
        }
        while (&v9[v50] != v38);
      }
    }
    else if (a1 != a2)
    {
      int v15 = a1 + 1;
      uint64_t result = *a1;
      *a5 = *a1;
      if (&a1[1] != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a5;
        do
        {
          unsigned int v18 = v17;
          uint64_t v19 = *a3;
          unint64_t v20 = v15->n128_u64[0];
          if (v15->n128_u64[0]
            && (unint64_t v21 = (uint64_t *)(*(void *)(*(void *)(v19 + 8) + 272) + 88),
                uint64_t v52 = 0,
                unint64_t v53 = v20,
                sub_1CC48C528(v21, &v53, &v52)))
          {
            int v22 = *(_DWORD *)(v52 + 8);
          }
          else
          {
            int v22 = 0;
          }
          unint64_t v23 = v17->n128_u64[0];
          if (v17->n128_u64[0])
          {
            unint64_t v24 = (uint64_t *)(*(void *)(*(void *)(v19 + 8) + 272) + 88);
            uint64_t v52 = 0;
            unint64_t v53 = v23;
            if (sub_1CC48C528(v24, &v53, &v52)) {
              LODWORD(v23) = *(_DWORD *)(v52 + 8);
            }
            else {
              LODWORD(v23) = 0;
            }
          }
          ++v17;
          unsigned int v25 = v23 - 1;
          unint64_t v26 = v18 + 1;
          if (v22 - 1 < v25)
          {
            __n128 *v17 = *v18;
            unint64_t v26 = v6;
            if (v18 != v6)
            {
              uint64_t v27 = v16;
              while (1)
              {
                uint64_t v28 = *a3;
                unint64_t v29 = v15->n128_u64[0];
                if (v15->n128_u64[0]
                  && (int v30 = (uint64_t *)(*(void *)(*(void *)(v28 + 8) + 272) + 88),
                      uint64_t v52 = 0,
                      unint64_t v53 = v29,
                      sub_1CC48C528(v30, &v53, &v52)))
                {
                  int v31 = *(_DWORD *)(v52 + 8);
                }
                else
                {
                  int v31 = 0;
                }
                uint64_t v32 = (__n128 *)((char *)v6 + v27 - 16);
                unint64_t v33 = v32->n128_u64[0];
                if (v32->n128_u64[0])
                {
                  unint64_t v34 = (uint64_t *)(*(void *)(*(void *)(v28 + 8) + 272) + 88);
                  uint64_t v52 = 0;
                  unint64_t v53 = v33;
                  if (sub_1CC48C528(v34, &v53, &v52)) {
                    LODWORD(v33) = *(_DWORD *)(v52 + 8);
                  }
                  else {
                    LODWORD(v33) = 0;
                  }
                }
                if (v31 - 1 >= (v33 - 1)) {
                  break;
                }
                *(__n128 *)((char *)v6 + v27) = *v32;
                v27 -= 16;
                if (!v27)
                {
                  unint64_t v26 = v6;
                  goto LABEL_35;
                }
              }
              unint64_t v26 = (__n128 *)((char *)v6 + v27);
            }
          }
LABEL_35:
          __n128 v35 = *v15++;
          result.n128_u64[0] = v35.n128_u64[0];
          *unint64_t v26 = v35;
          v16 += 16;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

char *sub_1CD2AC904(char *result, char *a2, char *a3, uint64_t *a4, int64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v102 = a6;
  if (!a6) {
    return result;
  }
  uint64_t v11 = a4;
  int v14 = result;
  while (a5 > a8 && v102 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v15 = 0;
    uint64_t v16 = -a5;
    while (1)
    {
      uint64_t v17 = *v11;
      uint64_t v18 = *(void *)a2;
      if (*(void *)a2
        && (uint64_t v19 = (uint64_t *)(*(void *)(*(void *)(v17 + 8) + 272) + 88),
            uint64_t v104 = 0,
            *(void *)&long long v105 = v18,
            uint64_t result = (char *)sub_1CC48C528(v19, &v105, &v104),
            result))
      {
        int v20 = *(_DWORD *)(v104 + 8);
      }
      else
      {
        int v20 = 0;
      }
      uint64_t v21 = *(void *)&v14[v15];
      if (v21)
      {
        int v22 = (uint64_t *)(*(void *)(*(void *)(v17 + 8) + 272) + 88);
        uint64_t v104 = 0;
        *(void *)&long long v105 = v21;
        uint64_t result = (char *)sub_1CC48C528(v22, &v105, &v104);
        if (result) {
          LODWORD(v21) = *(_DWORD *)(v104 + 8);
        }
        else {
          LODWORD(v21) = 0;
        }
      }
      if (v20 - 1 < (v21 - 1)) {
        break;
      }
      v15 += 16;
      BOOL v79 = __CFADD__(v16++, 1);
      if (v79) {
        return result;
      }
    }
    uint64_t v23 = -v16;
    uint64_t v100 = a8;
    BOOL v101 = a3;
    if (-v16 >= v102)
    {
      unint64_t v99 = &v14[v15];
      if (v16 == -1)
      {
        long long v105 = *(_OWORD *)&v14[v15];
        *(_OWORD *)&v14[v15] = *(_OWORD *)a2;
        *(_OWORD *)a2 = v105;
        return result;
      }
      if (v16 > 0) {
        uint64_t v23 = 1 - v16;
      }
      unint64_t v36 = a3;
      unint64_t v26 = v23 >> 1;
      unsigned int v25 = &v14[16 * (v23 >> 1) + v15];
      uint64_t v37 = a2;
      a2 = v36;
      unint64_t v96 = a7;
      __srca = v37;
      uint64_t v38 = v36 - v37;
      if (v38)
      {
        unint64_t v39 = v38 >> 4;
        uint64_t v40 = *v11;
        a2 = __srca;
        do
        {
          uint64_t v41 = &a2[16 * (v39 >> 1)];
          uint64_t v42 = *(void *)v41;
          if (*(void *)v41
            && (char v43 = (uint64_t *)(*(void *)(*(void *)(v40 + 8) + 272) + 88),
                uint64_t v104 = 0,
                *(void *)&long long v105 = v42,
                sub_1CC48C528(v43, &v105, &v104)))
          {
            int v44 = *(_DWORD *)(v104 + 8);
          }
          else
          {
            int v44 = 0;
          }
          uint64_t v45 = *(void *)v25;
          if (*(void *)v25)
          {
            unint64_t v46 = (uint64_t *)(*(void *)(*(void *)(v40 + 8) + 272) + 88);
            uint64_t v104 = 0;
            *(void *)&long long v105 = v45;
            if (sub_1CC48C528(v46, &v105, &v104)) {
              LODWORD(v45) = *(_DWORD *)(v104 + 8);
            }
            else {
              LODWORD(v45) = 0;
            }
          }
          unsigned int v47 = v45 - 1;
          if (v44 - 1 >= v47) {
            v39 >>= 1;
          }
          else {
            v39 += ~(v39 >> 1);
          }
          if (v44 - 1 < v47) {
            a2 = v41 + 16;
          }
        }
        while (v39);
      }
      unint64_t v34 = __srca;
      uint64_t v35 = (a2 - __srca) >> 4;
      goto LABEL_58;
    }
    if (v102 >= 0) {
      uint64_t v24 = v102;
    }
    else {
      uint64_t v24 = v102 + 1;
    }
    unsigned int v25 = a2;
    uint64_t v95 = v24 >> 1;
    a2 += 16 * (v24 >> 1);
    unint64_t v26 = (v25 - v14 - v15) >> 4;
    if (&v14[v15] != v25)
    {
      unint64_t v96 = a7;
      __src = v25;
      unint64_t v99 = &v14[v15];
      unsigned int v25 = &v14[v15];
      do
      {
        uint64_t v27 = *v11;
        uint64_t v28 = *(void *)a2;
        if (*(void *)a2
          && (unint64_t v29 = (uint64_t *)(*(void *)(*(void *)(v27 + 8) + 272) + 88),
              uint64_t v104 = 0,
              *(void *)&long long v105 = v28,
              sub_1CC48C528(v29, &v105, &v104)))
        {
          int v30 = *(_DWORD *)(v104 + 8);
        }
        else
        {
          int v30 = 0;
        }
        int v31 = &v25[16 * (v26 >> 1)];
        uint64_t v32 = *(void *)v31;
        if (*(void *)v31)
        {
          unint64_t v33 = (uint64_t *)(*(void *)(*(void *)(v27 + 8) + 272) + 88);
          uint64_t v104 = 0;
          *(void *)&long long v105 = v32;
          if (sub_1CC48C528(v33, &v105, &v104)) {
            LODWORD(v32) = *(_DWORD *)(v104 + 8);
          }
          else {
            LODWORD(v32) = 0;
          }
        }
        if (v30 - 1 < (v32 - 1))
        {
          v26 >>= 1;
        }
        else
        {
          unsigned int v25 = v31 + 16;
          v26 += ~(v26 >> 1);
        }
        uint64_t v11 = a4;
      }
      while (v26);
      unint64_t v26 = (v25 - v14 - v15) >> 4;
      unint64_t v34 = __src;
      uint64_t v35 = v95;
LABEL_58:
      a7 = v96;
      if (v25 == v34)
      {
        unsigned int v25 = v34;
        unint64_t v53 = a2;
      }
      else if (v34 == a2)
      {
        a2 = v34;
        unint64_t v53 = v25;
      }
      else if (v25 + 16 == v34)
      {
        long long v105 = *(_OWORD *)v25;
        int64_t v54 = a2 - v34;
        memmove(v25, v34, a2 - v34);
        unint64_t v53 = &v25[v54];
        *(_OWORD *)&v25[v54] = v105;
      }
      else if (v34 + 16 == a2)
      {
        unint64_t v53 = v25 + 16;
        long long v105 = *((_OWORD *)a2 - 1);
        if (a2 - 16 != v25) {
          memmove(v25 + 16, v25, a2 - 16 - v25);
        }
        *(_OWORD *)unsigned int v25 = v105;
      }
      else
      {
        uint64_t v48 = (v34 - v25) >> 4;
        if (v48 == (a2 - v34) >> 4)
        {
          uint64_t v49 = 0;
          do
          {
            long long v105 = *(_OWORD *)&v25[v49];
            *(_OWORD *)&v25[v49] = *(_OWORD *)&v34[v49];
            uint64_t v50 = (uint64_t)&v25[v49 + 16];
            *(_OWORD *)&v34[v49] = v105;
            uint64_t v51 = (uint64_t)&v34[v49 + 16];
            v49 += 16;
            BOOL v52 = (char *)v50 == v34 || v51 == (void)a2;
          }
          while (!v52);
          unint64_t v53 = v34;
        }
        else
        {
          uint64_t v55 = (a2 - v34) >> 4;
          uint64_t v56 = (v34 - v25) >> 4;
          do
          {
            uint64_t v57 = v56;
            uint64_t v56 = v55;
            uint64_t v55 = v57 % v55;
          }
          while (v55);
          if (v56)
          {
            unint64_t v58 = &v25[16 * v56];
            do
            {
              long long v59 = *((_OWORD *)v58 - 1);
              v58 -= 16;
              long long v105 = v59;
              unint64_t v60 = &v58[16 * v48];
              int8x16_t v61 = v58;
              do
              {
                unint64_t v62 = v61;
                int8x16_t v61 = v60;
                *(_OWORD *)unint64_t v62 = *(_OWORD *)v60;
                BOOL v63 = __OFSUB__(v48, (a2 - v60) >> 4);
                uint64_t v65 = v48 - ((a2 - v60) >> 4);
                char v64 = (v65 < 0) ^ v63;
                unint64_t v60 = &v25[16 * v65];
                if (v64) {
                  unint64_t v60 = &v61[16 * v48];
                }
              }
              while (v60 != v58);
              *(_OWORD *)int8x16_t v61 = v105;
            }
            while (v58 != v25);
          }
          unint64_t v53 = &v25[16 * ((a2 - v34) >> 4)];
        }
      }
      goto LABEL_87;
    }
    unint64_t v99 = v25;
    unint64_t v53 = a2;
    uint64_t v35 = v24 >> 1;
LABEL_87:
    a5 = -(uint64_t)(v26 + v16);
    uint64_t v66 = v102 - v35;
    if ((uint64_t)(v35 + v26) >= (uint64_t)(v102 - (v35 + v26) - v16))
    {
      uint64_t result = (char *)sub_1CD2AC904(v53, a2, v101, v11, -(uint64_t)(v26 + v16), v102 - v35, a7, v100);
      a2 = v25;
      a8 = v100;
      uint64_t v66 = v35;
      a5 = v26;
      a3 = v53;
      int v14 = v99;
    }
    else
    {
      unint64_t v67 = v25;
      a8 = v100;
      uint64_t result = (char *)sub_1CD2AC904(v99, v67, v53, v11, v26, v35, a7, v100);
      int v14 = v53;
      a3 = v101;
    }
    uint64_t v102 = v66;
    if (!v66) {
      return result;
    }
  }
  if (a5 <= v102)
  {
    if (v14 == a2) {
      return result;
    }
    uint64_t v81 = 0;
    do
    {
      *(_OWORD *)&a7[v81] = *(_OWORD *)&v14[v81];
      v81 += 16;
    }
    while (&v14[v81] != a2);
    if (!v81) {
      return result;
    }
    int64_t v82 = &a7[v81];
    uint64_t v83 = a7;
    while (1)
    {
      if (a2 == a3) {
        return (char *)memmove(v14, v83, a7 - v83 + v81);
      }
      uint64_t v84 = *v11;
      uint64_t v85 = *(void *)a2;
      if (!*(void *)a2) {
        break;
      }
      unint64_t v86 = a7;
      uint64_t v87 = (uint64_t *)(*(void *)(*(void *)(v84 + 8) + 272) + 88);
      uint64_t v104 = 0;
      *(void *)&long long v105 = v85;
      uint64_t result = (char *)sub_1CC48C528(v87, &v105, &v104);
      if (!result) {
        goto LABEL_126;
      }
      int v88 = *(_DWORD *)(v104 + 8);
LABEL_127:
      uint64_t v89 = *(void *)v83;
      if (*(void *)v83)
      {
        uint64_t v90 = (uint64_t *)(*(void *)(*(void *)(v84 + 8) + 272) + 88);
        uint64_t v104 = 0;
        *(void *)&long long v105 = v89;
        uint64_t result = (char *)sub_1CC48C528(v90, &v105, &v104);
        if (result) {
          LODWORD(v89) = *(_DWORD *)(v104 + 8);
        }
        else {
          LODWORD(v89) = 0;
        }
      }
      if (v88 - 1 >= (v89 - 1))
      {
        long long v93 = *(_OWORD *)v83;
        v83 += 16;
        long long v92 = v93;
      }
      else
      {
        long long v91 = *(_OWORD *)a2;
        a2 += 16;
        long long v92 = v91;
      }
      *(_OWORD *)int v14 = v92;
      v14 += 16;
      a7 = v86;
      if (v82 == v83) {
        return result;
      }
    }
    unint64_t v86 = a7;
LABEL_126:
    int v88 = 0;
    goto LABEL_127;
  }
  if (a2 != a3)
  {
    uint64_t v68 = 0;
    do
    {
      *(_OWORD *)&a7[v68] = *(_OWORD *)&a2[v68];
      v68 += 16;
    }
    while (&a2[v68] != a3);
    if (v68)
    {
      uint64_t v69 = &a7[v68];
      uint64_t v70 = a3 - 16;
      while (a2 != v14)
      {
        uint64_t v71 = *((void *)v69 - 2);
        uint64_t v72 = *v11;
        int64_t v73 = a7;
        if (v71
          && (int64_t v74 = (uint64_t *)(*(void *)(*(void *)(v72 + 8) + 272) + 88),
              uint64_t v104 = 0,
              *(void *)&long long v105 = v71,
              uint64_t result = (char *)sub_1CC48C528(v74, &v105, &v104),
              result))
        {
          int v75 = *(_DWORD *)(v104 + 8);
        }
        else
        {
          int v75 = 0;
        }
        uint64_t v76 = *((void *)a2 - 2);
        if (v76)
        {
          unint64_t v77 = (uint64_t *)(*(void *)(*(void *)(v72 + 8) + 272) + 88);
          uint64_t v104 = 0;
          *(void *)&long long v105 = v76;
          uint64_t result = (char *)sub_1CC48C528(v77, &v105, &v104);
          if (result) {
            LODWORD(v76) = *(_DWORD *)(v104 + 8);
          }
          else {
            LODWORD(v76) = 0;
          }
        }
        unsigned int v78 = v76 - 1;
        BOOL v79 = v75 - 1 >= v78;
        if (v75 - 1 >= v78) {
          uint64_t v80 = v69 - 16;
        }
        else {
          uint64_t v80 = a2 - 16;
        }
        if (v79) {
          v69 -= 16;
        }
        else {
          a2 -= 16;
        }
        *(_OWORD *)uint64_t v70 = *(_OWORD *)v80;
        v70 -= 16;
        a7 = v73;
        BOOL v52 = v69 == v73;
        uint64_t v11 = a4;
        if (v52) {
          return result;
        }
      }
      if (v69 != a7)
      {
        uint64_t v94 = 0;
        do
        {
          *(_OWORD *)&v70[v94] = *(_OWORD *)&v69[v94 - 16];
          v94 -= 16;
        }
        while (&v69[v94] != a7);
      }
    }
  }
  return result;
}

uint64_t *sub_1CD2AD06C(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(_DWORD *)(v39 + 312) < *(_DWORD *)(*v10 + 312))
                {
                  *unint64_t v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                uint64_t result = sub_1CD2AD798(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CD2ADA2C(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t v41 = v10 + 1;
                uint64_t v42 = v10 + 2;
                char v43 = v10 + 3;
                uint64_t result = sub_1CD2ADA2C(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(_DWORD *)(v44 + 312) < *(_DWORD *)(v45 + 312))
                {
                  *char v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unsigned int v48 = *(_DWORD *)(*v43 + 312);
                  if (v48 < *(_DWORD *)(*v42 + 312))
                  {
                    uint64_t *v42 = v46;
                    *char v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(_DWORD *)(*v41 + 312))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(_DWORD *)(*v10 + 312))
                      {
                        *unint64_t v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                uint64_t v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  uint64_t v55 = v51;
                  unsigned int v58 = *(_DWORD *)(v56 + 312);
                  if (v58 < *(_DWORD *)(v57 + 312))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        int8x16_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(_DWORD *)(v57 + 312));
                    int8x16_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *int8x16_t v61 = v56;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                uint64_t v9 = v51;
                unsigned int v92 = *(_DWORD *)(v90 + 312);
                if (v92 < *(_DWORD *)(v91 + 312))
                {
                  do
                  {
                    *uint64_t v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(_DWORD *)(v91 + 312));
                  *uint64_t v51 = v90;
                }
                uint64_t v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(_DWORD *)(v67 + 312) < *(_DWORD *)(v66[1] + 312))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t result = &v10[v64];
                  uint64_t v68 = *result;
                  unsigned int v69 = *(_DWORD *)(*result + 312);
                  if (*(_DWORD *)(v67 + 312) >= v69)
                  {
                    do
                    {
                      uint64_t v70 = v66;
                      *uint64_t result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      uint64_t v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(_DWORD *)(v67 + 312) < *(_DWORD *)(v66[1] + 312))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      uint64_t result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(_DWORD *)(v67 + 312) >= v69);
                    *uint64_t v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                int v75 = v10;
                do
                {
                  uint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  unint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    uint64_t result = (uint64_t *)*(unsigned int *)(v78 + 312);
                    if (result < *(_DWORD *)(v77[1] + 312))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *int v75 = v78;
                  int v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *unint64_t v77 = v74;
                }
                else
                {
                  *unint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    unsigned int v87 = *(_DWORD *)(*v77 + 312);
                    if (*(_DWORD *)(*v84 + 312) < v87)
                    {
                      do
                      {
                        int v88 = v84;
                        *unint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        unint64_t v77 = v88;
                      }
                      while (*(_DWORD *)(*v84 + 312) < v87);
                      *int v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          int v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CD2AD798(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CD2AD798(v9 + 1, v14 - 1, a2 - 2);
            sub_1CD2AD798(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = sub_1CD2AD798(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            *int v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CD2AD798(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(v16 + 312);
          if (*(_DWORD *)(*(v9 - 1) + 312) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 312))
          {
            int v31 = v9 + 1;
            do
            {
              unint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(_DWORD *)(*v10 + 312));
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v30 + 312));
          }
          uint64_t v32 = a2;
          if (v10 < a2)
          {
            uint64_t v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(_DWORD *)(v33 + 312));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              *unint64_t v10 = v35;
              *uint64_t v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(_DWORD *)(v36 + 312));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(_DWORD *)(v37 + 312));
            }
            while (v10 < v32);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v38;
          }
          a4 = 0;
          *uint64_t v38 = v16;
        }
        unsigned int v17 = *(_DWORD *)(v16 + 312);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 312) < v17);
        int v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 312) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 312) >= v17);
        }
        if (v20 >= v21)
        {
          unint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          unint64_t v10 = &v9[v18];
          unsigned int v25 = v21;
          do
          {
            *unint64_t v10 = v24;
            uint64_t *v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(_DWORD *)(v26 + 312) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(_DWORD *)(v27 + 312) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *uint64_t v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CD2AD06C(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CD2AD820(v9, v10 - 1);
      uint64_t result = (uint64_t *)sub_1CD2AD820(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CD2AD798(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)(*a2 + 312);
  unsigned int v6 = *(_DWORD *)(*result + 312);
  uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)(*a3 + 312);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 312) < *(_DWORD *)(*result + 312))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 312) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CD2AD820(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 312) < *(_DWORD *)(*a1 + 312))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CD2AD798(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CD2ADA2C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      int v20 = a1 + 3;
      sub_1CD2ADA2C(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 312) < *(_DWORD *)(v22 + 312))
      {
        *int v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unsigned int v25 = *(_DWORD *)(*v20 + 312);
        if (v25 < *(_DWORD *)(*v19 + 312))
        {
          *uint64_t v19 = v23;
          *int v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 312))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 312))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CD2AD798(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 312);
    if (v14 < *(_DWORD *)(*v8 + 312))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 312))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unsigned int v17 = a1;
LABEL_13:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CD2ADA2C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CD2AD798(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 312) < *(_DWORD *)(*a3 + 312))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 312) < *(_DWORD *)(*a2 + 312))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 312) < *(_DWORD *)(*a1 + 312))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1CD2ADAC4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v5 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v6)
      {
        unsigned int v8 = *(char **)a1;
        uint64_t v9 = *(char **)a1;
        if (v6)
        {
          uint64_t v10 = 0;
          do
          {
            sub_1CD2ADC40((uint64_t *)&v8[v10], (uint64_t *)&v5[v10]);
            v10 += 16;
          }
          while (16 * v6 != v10);
          uint64_t v7 = *(unsigned int *)(a1 + 8);
          uint64_t v9 = &v8[v10];
          unsigned int v8 = *(char **)a1;
        }
        uint64_t v11 = &v8[16 * v7];
        while (v11 != v9)
        {
          uint64_t v13 = *((void *)v11 - 2);
          v11 -= 16;
          uint64_t v12 = v13;
          *(void *)uint64_t v11 = 0;
          if (v13)
          {
            uint64_t v14 = sub_1CD2B23B8(v12);
            MEMORY[0x1D25D9CE0](v14, 0x10F1C401404827BLL);
          }
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          sub_1CD8A8D6C(a1);
          sub_1CD8AD0F4();
        }
        if (v7)
        {
          uint64_t v15 = *(uint64_t **)a1;
          uint64_t v16 = 16 * v7;
          do
          {
            unsigned int v17 = sub_1CD2ADC40(v15, (uint64_t *)v5);
            v5 += 16;
            uint64_t v15 = v17 + 2;
            v16 -= 16;
          }
          while (v16);
        }
        else
        {
          uint64_t v7 = 0;
        }
        uint64_t v18 = *(unsigned int *)(a2 + 8);
        if (v7 != v18)
        {
          uint64_t v19 = (_OWORD *)(*(void *)a1 + 16 * v7);
          int v20 = (long long *)(*(void *)a2 + 16 * v7);
          uint64_t v21 = 16 * v18 - 16 * v7;
          do
          {
            long long v22 = *v20;
            *(void *)v20++ = 0;
            *v19++ = v22;
            v21 -= 16;
          }
          while (v21);
        }
      }
      *(_DWORD *)(a1 + 8) = v6;
      sub_1CD8A8D6C(a2);
    }
    else
    {
      sub_1CD8AD05C((char **)a1, (char **)a2);
    }
  }
  return a1;
}

uint64_t *sub_1CD2ADC40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    uint64_t v6 = sub_1CD2B23B8(v5);
    MEMORY[0x1D25D9CE0](v6, 0x10F1C401404827BLL);
  }
  a1[1] = a2[1];
  return a1;
}

uint64_t *sub_1CD2ADC9C(uint64_t *a1, unsigned __int8 *a2, size_t __n, uint64_t *a4, uint64_t (**a5)(unint64_t, void))
{
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (!v9)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    unsigned int v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *a1 = (uint64_t)v25;
    unsigned int v9 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  int v10 = 0;
  if (__n)
  {
    size_t v11 = __n;
    uint64_t v12 = a2;
    do
    {
      int v13 = *v12++;
      int v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  uint64_t v14 = *a1;
  unsigned int v15 = v9 - 1;
  uint64_t v16 = *a1 + 8 * v9 + 8;
  int v17 = -1;
  int v18 = 1;
  int v19 = v10;
  while (1)
  {
    uint64_t v20 = v19 & v15;
    uint64_t v21 = *(void **)(v14 + 8 * v20);
    if (!v21) {
      break;
    }
    if (v21 == (void *)-8)
    {
      if (v17 == -1) {
        int v17 = v19 & v15;
      }
    }
    else if (*(_DWORD *)(v16 + 4 * v20) == v10 {
           && __n == *v21
    }
           && (!__n || !memcmp(a2, (char *)v21 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v19 = v18 + v20;
    ++v18;
  }
  uint64_t v22 = v17;
  if (v17 == -1)
  {
    uint64_t v22 = v20;
    uint64_t v20 = v20;
  }
  else
  {
    uint64_t v20 = v17;
  }
  *(_DWORD *)(v16 + 4 * v22) = v10;
  uint64_t v21 = *(void **)(v14 + 8 * v20);
LABEL_17:
  uint64_t i = (uint64_t *)(v14 + 8 * v20);
  if (v21)
  {
    if (v21 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  uint64_t v26 = sub_1CB906F34((uint64_t *)a1[3], __n + 57, 3);
  uint64_t v27 = v26;
  uint64_t v28 = v26 + 56;
  if (__n) {
    memcpy((void *)(v26 + 56), a2, __n);
  }
  *(unsigned char *)(v28 + __n) = 0;
  *(void *)uint64_t v27 = __n;
  uint64_t v29 = *v32;
  uint64_t v30 = *v33;
  *(void *)(v27 + 8) = *v32;
  *(_DWORD *)(v27 + 16) = v30((v29 & 0xFFFFFFFFFFFFFFF8) + 32, *(void *)(v29 & 0xFFFFFFFFFFFFFFF8));
  *(void *)(v27 + 32) = 0;
  *(void *)(v27 + 40) = 0;
  *(void *)(v27 + 24) = 0;
  uint64_t *i = v27;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v20));
        !*i || *i == -8;
  return i;
}

void sub_1CD2ADECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v5 = (void *)*sub_1CD2ADC9C((uint64_t *)(a1 + 96), (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32), *(void *)(a2 & 0xFFFFFFFFFFFFFFF8), &v21, (uint64_t (**)(unint64_t, void))(a1 + 128));
  *(void *)(a1 + 80) += 16;
  if (((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 16 > *(void *)(a1 + 8) - *(void *)a1)
  {
    unsigned int v18 = *(_DWORD *)(a1 + 24) >> 7;
    if (v18 >= 0x1E) {
      LOBYTE(v18) = 30;
    }
    uint64_t v19 = 4096 << v18;
    uint64_t v6 = operator new(4096 << v18, (std::align_val_t)8uLL);
    unsigned int v20 = *(_DWORD *)(a1 + 24);
    if (v20 >= *(_DWORD *)(a1 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v20) = v6;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = (char *)v6 + v19;
  }
  else
  {
    uint64_t v6 = (void *)((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a1 = v6 + 2;
  void *v6 = &unk_1F2649468;
  v6[1] = a3;
  unsigned int v8 = (void *)v5[4];
  unint64_t v7 = v5[5];
  if ((unint64_t)v8 < v7)
  {
    void *v8 = v6;
    uint64_t v16 = v8 + 1;
  }
  else
  {
    unsigned int v9 = (void *)v5[3];
    uint64_t v10 = v8 - v9;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v12 = v7 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_1CB833614();
      }
      uint64_t v14 = (char *)operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unsigned int v15 = &v14[8 * v10];
    *(void *)unsigned int v15 = v6;
    uint64_t v16 = v15 + 8;
    if (v8 != v9)
    {
      do
      {
        uint64_t v17 = *--v8;
        *((void *)v15 - 1) = v17;
        v15 -= 8;
      }
      while (v8 != v9);
      unsigned int v8 = (void *)v5[3];
    }
    v5[3] = v15;
    v5[4] = v16;
    v5[5] = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  v5[4] = v16;
}

void sub_1CD2AE0A8()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Use base address specifiers in debug_ranges";
  v4.n128_u64[1] = 43;
  LOBYTE(v3) = 0;
  *(void *)&long long v2 = &v3;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFEC30, "use-dwarf-ranges-base-address-specifier", &v1, &v4, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFEC30, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Generate dwarf aranges";
  v4.n128_u64[1] = 22;
  LOBYTE(v3) = 0;
  *(void *)&long long v2 = &v3;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFECF0, "generate-arange-section", &v1, &v4, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFECF0, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Generate DWARF4 type units.";
  v4.n128_u64[1] = 27;
  LOBYTE(v3) = 0;
  *(void *)&long long v2 = &v3;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFEDB0, "generate-type-units", &v1, &v4, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFEDB0, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable cross-cu references in DWO files";
  v4.n128_u64[1] = 39;
  LOBYTE(v3) = 0;
  *(void *)&long long v2 = &v3;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFEE70, "split-dwarf-cross-cu-references", &v1, &v4, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFEE70, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Make an absence of debug location information explicit.";
  *((void *)&v2 + 1) = 55;
  v4.n128_u64[0] = (unint64_t)&v5;
  uint64_t v5 = "Default";
  uint64_t v6 = 7;
  int v7 = 0;
  unsigned int v8 = "At top of block or after label";
  uint64_t v9 = 30;
  uint64_t v10 = "Enable";
  uint64_t v11 = 6;
  int v12 = 1;
  unint64_t v13 = "In all cases";
  uint64_t v14 = 12;
  unsigned int v15 = "Disable";
  uint64_t v16 = 7;
  int v17 = 2;
  unsigned int v18 = "Never";
  uint64_t v19 = 5;
  v4.n128_u64[1] = 0x400000003;
  int v0 = 0;
  uint64_t v1 = &v0;
  sub_1CD8AA8A4((llvm::cl::Option *)&unk_1EBCFF0B0, "use-unknown-locations", &v3, &v2, (uint64_t)&v4, &v1);
  if ((const char **)v4.n128_u64[0] != &v5) {
    free((void *)v4.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD8A6C94, &unk_1EBCFF0B0, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Output dwarf accelerator tables.";
  *((void *)&v2 + 1) = 32;
  v4.n128_u64[0] = (unint64_t)&v5;
  uint64_t v5 = "Default";
  uint64_t v6 = 7;
  int v7 = 0;
  unsigned int v8 = "Default for platform";
  uint64_t v9 = 20;
  uint64_t v10 = "Disable";
  uint64_t v11 = 7;
  int v12 = 1;
  unint64_t v13 = "Disabled.";
  uint64_t v14 = 9;
  unsigned int v15 = "Apple";
  uint64_t v16 = 5;
  unsigned int v18 = "Apple";
  uint64_t v19 = 5;
  unsigned int v20 = "Dwarf";
  uint64_t v21 = 5;
  int v17 = 2;
  int v22 = 3;
  uint64_t v23 = "DWARF";
  uint64_t v24 = 5;
  v4.n128_u64[1] = 0x400000004;
  int v0 = 0;
  uint64_t v1 = &v0;
  sub_1CD8AABB8(&v3, &v2, (uint64_t)&v4, &v1);
  if ((const char **)v4.n128_u64[0] != &v5) {
    free((void *)v4.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD8A6C98, &qword_1EBCFF308, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Use inlined strings rather than string section.";
  *((void *)&v2 + 1) = 47;
  v4.n128_u64[0] = (unint64_t)&v5;
  uint64_t v5 = "Default";
  uint64_t v6 = 7;
  int v7 = 0;
  unsigned int v8 = "Default for platform";
  uint64_t v9 = 20;
  uint64_t v10 = "Enable";
  uint64_t v11 = 6;
  int v12 = 1;
  unint64_t v13 = "Enabled";
  uint64_t v14 = 7;
  unsigned int v15 = "Disable";
  uint64_t v16 = 7;
  int v17 = 2;
  unsigned int v18 = "Disabled";
  uint64_t v19 = 8;
  v4.n128_u64[1] = 0x400000003;
  int v0 = 0;
  uint64_t v1 = &v0;
  sub_1CD8AA8A4((llvm::cl::Option *)&unk_1EBCFF560, "dwarf-inlined-strings", &v3, &v2, (uint64_t)&v4, &v1);
  if ((const char **)v4.n128_u64[0] != &v5) {
    free((void *)v4.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD8A6C94, &unk_1EBCFF560, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Disable emission .debug_ranges section.";
  v4.n128_u64[1] = 39;
  LOBYTE(v3) = 0;
  *(void *)&long long v2 = &v3;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFEF30, "no-dwarf-ranges-section", &v1, &v4, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFEF30, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Use sections+offset as references rather than labels.";
  *((void *)&v2 + 1) = 53;
  v4.n128_u64[0] = (unint64_t)&v5;
  uint64_t v5 = "Default";
  uint64_t v6 = 7;
  int v7 = 0;
  unsigned int v8 = "Default for platform";
  uint64_t v9 = 20;
  uint64_t v10 = "Enable";
  uint64_t v11 = 6;
  int v12 = 1;
  unint64_t v13 = "Enabled";
  uint64_t v14 = 7;
  unsigned int v15 = "Disable";
  uint64_t v16 = 7;
  int v17 = 2;
  unsigned int v18 = "Disabled";
  uint64_t v19 = 8;
  v4.n128_u64[1] = 0x400000003;
  int v0 = 0;
  uint64_t v1 = &v0;
  sub_1CD8AB09C(&v3, &v2, (uint64_t)&v4, &v1);
  if ((const char **)v4.n128_u64[0] != &v5) {
    free((void *)v4.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD8A6C94, &qword_1EBCFF7B8, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Emit the GNU .debug_macro format with DWARF <5";
  v4.n128_u64[1] = 46;
  LOBYTE(v3) = 0;
  *(void *)&long long v2 = &v3;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFEFF0, "use-gnu-debug-macro", &v1, &v4, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFEFF0, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Enable use of the DWARFv5 DW_OP_convert operator";
  *((void *)&v2 + 1) = 48;
  v4.n128_u64[0] = (unint64_t)&v5;
  uint64_t v5 = "Default";
  uint64_t v6 = 7;
  int v7 = 0;
  unsigned int v8 = "Default for platform";
  uint64_t v9 = 20;
  uint64_t v10 = "Enable";
  uint64_t v11 = 6;
  int v12 = 1;
  unint64_t v13 = "Enabled";
  uint64_t v14 = 7;
  unsigned int v15 = "Disable";
  uint64_t v16 = 7;
  int v17 = 2;
  unsigned int v18 = "Disabled";
  uint64_t v19 = 8;
  v4.n128_u64[1] = 0x400000003;
  int v0 = 0;
  uint64_t v1 = &v0;
  sub_1CD8AB254(&v3, &v2, (uint64_t)&v4, &v1);
  if ((const char **)v4.n128_u64[0] != &v5) {
    free((void *)v4.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD8A6C94, &qword_1EBCFFA10, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Which DWARF linkage-name attributes to emit.";
  *((void *)&v2 + 1) = 44;
  v4.n128_u64[0] = (unint64_t)&v5;
  uint64_t v5 = "Default";
  uint64_t v6 = 7;
  int v7 = 0;
  unsigned int v8 = "Default for platform";
  uint64_t v9 = 20;
  uint64_t v10 = "All";
  uint64_t v11 = 3;
  int v12 = 1;
  unint64_t v13 = "All";
  uint64_t v14 = 3;
  unsigned int v15 = "Abstract";
  uint64_t v16 = 8;
  int v17 = 2;
  unsigned int v18 = "Abstract subprograms";
  uint64_t v19 = 20;
  v4.n128_u64[1] = 0x400000003;
  int v0 = 0;
  uint64_t v1 = &v0;
  sub_1CD8AB40C(&v3, &v2, (uint64_t)&v4, &v1);
  if ((const char **)v4.n128_u64[0] != &v5) {
    free((void *)v4.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD8A6C9C, &qword_1EBCFFC68, &dword_1CB82C000);
  int v3 = 1;
  *(void *)&long long v2 = "Always use DW_AT_ranges in DWARFv5 whenever it could allow more address pool entry sharing to reduce "
                   "relocations/object size";
  *((void *)&v2 + 1) = 124;
  v4.n128_u64[0] = (unint64_t)&v5;
  v4.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
}

uint64_t sub_1CD2AE980(void (***a1)(void), unint64_t a2)
{
  if (a2 <= 0x1F)
  {
    __n128 v4 = (uint64_t (*)(void))**a1;
LABEL_3:
    return v4();
  }
  uint64_t v6 = **a1;
  if (a2 == -1)
  {
    v6();
    __n128 v4 = (uint64_t (*)(void))**a1;
    goto LABEL_3;
  }
  v6();
  int v7 = (*a1)[2];

  return ((uint64_t (*)(void (***)(void), unint64_t))v7)(a1, a2);
}

uint64_t sub_1CD2AEAA0(uint64_t a1, int a2, int a3)
{
  if (a2 <= 31)
  {
    (**(void (***)(uint64_t, void, void))a1)(a1, (a2 + 112), 0);
  }
  else
  {
    (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 146, 0);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 16))(a1, a2);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 8);

  return v6(a1, a3);
}

uint64_t sub_1CD2AEBAC(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (*(unsigned int *)(result + 80) | ((unint64_t)*(unsigned __int16 *)(result + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
  *(_DWORD *)(result + 80) = *(_DWORD *)(result + 80);
  *(_WORD *)(result + 84) = WORD2(v2);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = result;
    unsigned int v5 = 0;
    if (v3 >= 0x41) {
      uint64_t v6 = *(unint64_t **)a2;
    }
    else {
      uint64_t v6 = (unint64_t *)a2;
    }
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    do
    {
      unint64_t v8 = *v6;
      unint64_t v9 = (*(unsigned int *)(v4 + 80) | ((unint64_t)*(unsigned __int16 *)(v4 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
      *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 80);
      *(_WORD *)(v4 + 84) = WORD2(v9);
      BOOL result = sub_1CD2AE980((void (***)(void))v4, v8);
      if (v3 <= 0x40 && !v5) {
        break;
      }
      if ((((unint64_t)*(unsigned __int16 *)(v4 + 84) << 32) & 0x180000000000) != 0) {
        (**(void (***)(uint64_t, uint64_t, void))v4)(v4, 159, 0);
      }
      ++v6;
      unsigned int v10 = v7 >= 0x40 ? 64 : v7;
      BOOL result = (uint64_t)sub_1CD8AD320((void *)v4, v10, v5);
      v5 += 64;
      v7 -= 64;
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t sub_1CD2AECCC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v5 = (uint64_t **)a3;
  int8x16_t FragmentInfo = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)a3, (uint64_t *)*(void *)(a3 + 8), &v118);
  if (v119) {
    __int32 v9 = v118.i32[0];
  }
  else {
    __int32 v9 = -2;
  }
  unsigned int v113 = v9;
  uint64_t v10 = a4;
  uint64_t v114 = a2;
  uint64_t v115 = a4;
  if (a4 - 1 >= 0x3FFFFFFF)
  {
    if (!(*(unsigned int (**)(uint64_t, void *, void, int8x16_t))(*(void *)a1 + 72))(a1, a2, a4, FragmentInfo))goto LABEL_116; {
    unsigned int v107 = *(_DWORD *)(a1 + 32);
    }
    if (v107 >= *(_DWORD *)(a1 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)(a1 + 24) + 16 * v107) = xmmword_1CDB15620;
    ++*(_DWORD *)(a1 + 32);
    goto LABEL_169;
  }
  uint64_t v11 = a2 + 1;
  unsigned int DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum((uint64_t)(a2 + 1), a4, 0);
  if ((DwarfRegNum & 0x80000000) == 0)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    if (v13 >= *(_DWORD *)(a1 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v14 = (void *)(*(void *)(a1 + 24) + 16 * v13);
    *uint64_t v14 = DwarfRegNum;
    v14[1] = 0;
    ++*(_DWORD *)(a1 + 32);
    goto LABEL_8;
  }
  uint64_t v35 = a2[7];
  uint64_t v36 = *(unsigned int *)(a2[1] + 24 * a4 + 8);
  if (*(_WORD *)(v35 + 2 * v36))
  {
    unsigned __int16 v37 = *(_WORD *)(v35 + 2 * v36) + a4;
    uint64_t v38 = (unsigned __int16 *)(v35 + 2 * v36 + 2);
    while (1)
    {
      unsigned int v39 = v37;
      unsigned int v40 = llvm::MCRegisterInfo::getDwarfRegNum((uint64_t)v11, v37, 0);
      if ((v40 & 0x80000000) == 0) {
        break;
      }
      int v41 = *v38++;
      unsigned __int16 v37 = v41 + v39;
      if (!v41) {
        goto LABEL_45;
      }
    }
    unsigned int v101 = v40;
    uint64_t v102 = (unsigned __int16 *)(a2[12] + 4 * llvm::MCRegisterInfo::getSubRegIndex(v11, v39, a4));
    int v103 = v102[1];
    int v104 = *v102;
    unsigned int v105 = *(_DWORD *)(a1 + 32);
    if (v105 >= *(_DWORD *)(a1 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v106 = (void *)(*(void *)(a1 + 24) + 16 * v105);
    *uint64_t v106 = v101;
    v106[1] = "super-register";
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 80) = v103 | (v104 << 16);
LABEL_169:
    uint64_t v10 = a4;
    goto LABEL_8;
  }
LABEL_45:
  uint64_t v42 = a2;
  uint64_t v43 = *(unsigned int *)(v42[33]
                        + 24
                        * (*(unsigned __int16 *)(*llvm::TargetRegisterInfo::getMinimalPhysRegClass((uint64_t)a2, a4, 1u)
                                               + 24)
                         + *((_DWORD *)v42 + 68) * ((v42[31] - v42[30]) >> 3)));
  if (v43 > 0x39) {
    operator new();
  }
  uint64_t v110 = v5;
  v116.i64[0] = (v43 << 58) | 1;
  uint64_t v44 = (_WORD *)(v114[7] + 2 * *(unsigned int *)(v114[1] + 24 * a4 + 4));
  if (!*v44)
  {
    BOOL v82 = 0;
    goto LABEL_114;
  }
  unsigned int v45 = 0;
  unsigned __int16 v46 = *v44 + a4;
  uint64_t v111 = (v43 << 58) | 1;
  unsigned int v112 = v43;
  do
  {
    uint64_t v47 = (unsigned __int16 *)(v42[12] + 4 * llvm::MCRegisterInfo::getSubRegIndex(v11, v10, v46));
    LODWORD(v48) = v47[1];
    unsigned int v49 = *v47;
    unsigned int v50 = llvm::MCRegisterInfo::getDwarfRegNum((uint64_t)v11, v46, 0);
    if ((v50 & 0x80000000) != 0)
    {
      unsigned int v52 = v45;
      uint64_t v10 = v115;
      goto LABEL_92;
    }
    unsigned int v51 = v50;
    unint64_t v120 = v111;
    unsigned int v52 = v49 + v48;
    sub_1CB9F9F38(&v120, v49, v49 + v48);
    unsigned int v53 = v113 - v49;
    if (v113 > v49)
    {
      if (v120)
      {
        if (v116.i8[0])
        {
          if (((v120 >> 1) & ~(-1 << (v120 >> 58)) & ((-1 << ((unint64_t)v116.i64[0] >> 58)) | ~((unint64_t)v116.i64[0] >> 1))) == 0) {
            goto LABEL_90;
          }
LABEL_81:
          BOOL v71 = v49 >= v45;
          uint64_t v72 = v49 - v45;
          if (v72 != 0 && v71)
          {
            unint64_t v78 = *(unsigned int *)(a1 + 32);
            if (v78 >= *(unsigned int *)(a1 + 36)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v79 = (uint64_t *)(*(void *)(a1 + 24) + 16 * v78);
            uint64_t *v79 = (v72 << 32) | 0xFFFFFFFFLL;
            v79[1] = (uint64_t)"no DWARF register encoding";
            unsigned int v73 = *(_DWORD *)(a1 + 32) + 1;
            *(_DWORD *)(a1 + 32) = v73;
          }
          else
          {
            unsigned int v73 = *(_DWORD *)(a1 + 32);
            if (!v49 && v113 <= v48)
            {
              if (v73 >= *(_DWORD *)(a1 + 36)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unint64_t v74 = v51;
              goto LABEL_89;
            }
          }
          if (v53 >= v48) {
            uint64_t v48 = v48;
          }
          else {
            uint64_t v48 = v53;
          }
          if (v73 >= *(_DWORD *)(a1 + 36)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v74 = v51 | (unint64_t)(v48 << 32);
LABEL_89:
          int v75 = (unint64_t *)(*(void *)(a1 + 24) + 16 * v73);
          *int v75 = v74;
          v75[1] = (unint64_t)"sub-register";
          ++*(_DWORD *)(a1 + 32);
          goto LABEL_90;
        }
        unint64_t v63 = v120 >> 58;
        unint64_t v64 = *(unsigned int *)(v116.i64[0] + 64);
      }
      else
      {
        if ((v116.i8[0] & 1) == 0)
        {
          unsigned int v54 = *(_DWORD *)(v120 + 8);
          unsigned int v55 = *(_DWORD *)(v116.i64[0] + 8);
          if (v55 >= v54) {
            uint64_t v56 = v54;
          }
          else {
            uint64_t v56 = v55;
          }
          if (v56)
          {
            uint64_t v57 = *(uint64_t **)v120;
            unsigned int v58 = *(uint64_t **)v116.i64[0];
            uint64_t v59 = v56;
            while (1)
            {
              uint64_t v61 = *v57++;
              uint64_t v60 = v61;
              uint64_t v62 = *v58++;
              if ((v60 & ~v62) != 0) {
                break;
              }
              if (!--v59) {
                goto LABEL_59;
              }
            }
          }
          else
          {
LABEL_59:
            if (v54 <= v55) {
              goto LABEL_90;
            }
            while (!*(void *)(*(void *)v120 + 8 * v56))
            {
              LODWORD(v56) = v56 + 1;
              if (v54 == v56) {
                goto LABEL_90;
              }
            }
          }
          goto LABEL_81;
        }
        unint64_t v63 = *(unsigned int *)(v120 + 64);
        unint64_t v64 = (unint64_t)v116.i64[0] >> 58;
      }
      if (v64 < v63) {
        unint64_t v63 = v64;
      }
      if (v63)
      {
        uint64_t v65 = 0;
        while (1)
        {
          char v66 = v65;
          unint64_t v67 = (v120 >> 1) & ~(-1 << (v120 >> 58));
          if ((v120 & 1) == 0)
          {
            char v66 = v65 & 0x3F;
            unint64_t v67 = *(void *)(*(void *)v120 + 8 * (v65 >> 6));
          }
          if ((v67 >> v66))
          {
            char v68 = v65;
            unint64_t v69 = ((unint64_t)v116.i64[0] >> 1) & ~(-1 << ((unint64_t)v116.i64[0] >> 58));
            if ((v116.i8[0] & 1) == 0)
            {
              char v68 = v65 & 0x3F;
              unint64_t v69 = *(void *)(*(void *)v116.i64[0] + 8 * (v65 >> 6));
            }
            if (((v69 >> v68) & 1) == 0) {
              break;
            }
          }
          if (v63 == ++v65) {
            goto LABEL_78;
          }
        }
      }
      else
      {
LABEL_78:
        if (v120) {
          unint64_t v70 = v120 >> 58;
        }
        else {
          LODWORD(v70) = *(_DWORD *)(v120 + 64);
        }
        if (v63 == v70) {
          goto LABEL_90;
        }
        while (1)
        {
          char v80 = v63;
          unint64_t v81 = (v120 >> 1) & ~(-1 << (v120 >> 58));
          if ((v120 & 1) == 0)
          {
            char v80 = v63 & 0x3F;
            unint64_t v81 = *(void *)(*(void *)v120 + 8 * (v63 >> 6));
          }
          if ((v81 >> v80)) {
            break;
          }
          LODWORD(v63) = v63 + 1;
          if (v70 == v63) {
            goto LABEL_90;
          }
        }
      }
      goto LABEL_81;
    }
LABEL_90:
    sub_1CB9F9F38((unint64_t *)&v116, v49, v52);
    unint64_t v76 = v120;
    uint64_t v42 = v114;
    uint64_t v10 = v115;
    if ((v120 & 1) == 0 && v120)
    {
      if (*(void *)v120 != v120 + 16) {
        free(*(void **)v120);
      }
      MEMORY[0x1D25D9CE0](v76, 0x1080C40EF38A13ELL);
    }
    unsigned int v45 = v52;
LABEL_92:
    int v77 = (unsigned __int16)v44[1];
    ++v44;
    v46 += v77;
  }
  while (v77);
  BOOL v82 = v52 != 0;
  if (v52 && v112 > v52)
  {
    unsigned int v108 = *(_DWORD *)(a1 + 32);
    if (v108 >= *(_DWORD *)(a1 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v109 = (unint64_t *)(*(void *)(a1 + 24) + 16 * v108);
    *unint64_t v109 = ((unint64_t)(v112 - v52) << 32) | 0xFFFFFFFF;
    v109[1] = (unint64_t)"no DWARF register encoding";
    ++*(_DWORD *)(a1 + 32);
    BOOL v82 = 1;
    uint64_t v10 = v115;
  }
LABEL_114:
  uint64_t v83 = v116.i64[0];
  unsigned int v5 = v110;
  if ((v116.i8[0] & 1) == 0 && v116.i64[0])
  {
    if (*(void *)v116.i64[0] != v116.i64[0] + 16) {
      free(*(void **)v116.i64[0]);
    }
    MEMORY[0x1D25D9CE0](v83, 0x1080C40EF38A13ELL);
  }
  if (!v82)
  {
LABEL_116:
    uint64_t result = 0;
    unsigned int v85 = *(_DWORD *)(a1 + 80);
    uint64_t v84 = a1 + 80;
    uint64_t v86 = *(unsigned __int16 *)(v84 + 4);
    *(_DWORD *)uint64_t v84 = v85;
    *(_WORD *)(v84 + 4) = ((v85 | (unint64_t)(v86 << 32)) & 0xFFFFFFF8FFFFFFFFLL) >> 32;
    return result;
  }
LABEL_8:
  unsigned int v15 = *v5;
  uint64_t v16 = v5[1];
  if (*v5 != v16 && *v15 != 4096)
  {
    int v17 = 1;
    goto LABEL_13;
  }
  int v17 = 0;
  int v18 = 0;
  if (*(unsigned char *)(a1 + 8))
  {
LABEL_13:
    int v18 = v17;
    if (*(_DWORD *)(a1 + 32) < 2u) {
      goto LABEL_16;
    }
    if (*(unsigned char *)(a1 + 8))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
      unint64_t v19 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
      *(unsigned char *)(a1 + 8) = 0;
    }
    else
    {
      unint64_t v19 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 80) = v19;
    unint64_t v23 = (v19 & 0xFFFFFFF8FFFFFFFFLL) >> 32;
    goto LABEL_119;
  }
LABEL_16:
  unint64_t v20 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
  if ((v20 & 0x10000000000) != 0)
  {
    if ((v20 & 0x4000000000) == 0) {
      goto LABEL_22;
    }
LABEL_26:
    llvm::DIExpression::getFragmentInfo(*v5, v5[1], &v116);
    uint64_t v24 = *(unsigned int *)(a1 + 32);
    if (v24)
    {
      LODWORD(v25) = 0;
      int v26 = v117;
      unint64_t v27 = v116.i64[0];
      uint64_t v28 = 16 * v24;
      uint64_t v29 = (unsigned int *)(*(void *)(a1 + 24) + 4);
      do
      {
        int v30 = *(v29 - 1);
        unsigned int v31 = *v29;
        if ((v30 & 0x80000000) == 0) {
          sub_1CD8AD22C((uint64_t (***)(void))a1, v30);
        }
        unint64_t v25 = v31 + v25;
        if (v26 && v27 < v25) {
          break;
        }
        unsigned int v32 = *v29;
        v29 += 4;
        sub_1CD8AD320((void *)a1, v32, 0);
        v28 -= 16;
      }
      while (v28);
      unint64_t v20 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
    }
    if ((v20 & 0x4000000000) != 0)
    {
      sub_1CD8AD630((uint64_t *)a1);
      unint64_t v20 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
      if ((v20 & 0x8000000000) == 0)
      {
        uint64_t v99 = (v20 >> 40) & 1;
        if ((v20 & 0x180000000000) == 0) {
          LODWORD(v99) = 1;
        }
        if (((v18 | v99) & 1) == 0)
        {
          (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 159, 0);
          LODWORD(v20) = *(_DWORD *)(a1 + 80);
        }
      }
    }
    *(_DWORD *)(a1 + 32) = 0;
    uint64_t v33 = *v5;
    if ((_WORD)v20) {
      BOOL v34 = v33 == v5[1];
    }
    else {
      BOOL v34 = 1;
    }
    if (v34 || *v33 == 4096) {
      return 1;
    }
    goto LABEL_152;
  }
  if ((v20 & 0x700000000) == 0x200000000) {
    char v21 = 1;
  }
  else {
    char v21 = v18;
  }
  if ((v20 & 0x4000000000) != 0 || (v21 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_22:
  if ((v20 & 0x180000000000) != 0 || (v116.i64[0] = (uint64_t)*v5, v15 == v16))
  {
LABEL_23:
    if (*(_DWORD *)(a1 + 32) >= 2u) {
      goto LABEL_24;
    }
    int v87 = **(_DWORD **)(a1 + 24);
    int v88 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 72))(a1, v114, v10);
    if (v15 != v16)
    {
      if (*v15 == 16)
      {
        long long v93 = *v5;
        unsigned int v92 = v5[1];
        if (*v5 != v92)
        {
          unint64_t v94 = v15[1];
          v116.i64[0] = (uint64_t)*v5;
          uint64_t v95 = &v93[llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v116)];
          if (v95 != v92)
          {
            uint64_t v96 = *v95;
            if (v96 == 34 && v94 >> 31 == 0)
            {
              for (unint64_t i = 3; i > 1; --i)
              {
                v93 += llvm::DIExpression::ExprOperand::getSize(v5);
                *unsigned int v5 = v93;
              }
              LODWORD(v89) = v94;
              if (!v88) {
                goto LABEL_127;
              }
              goto LABEL_148;
            }
            if (v96 == 28)
            {
              LODWORD(v89) = 0;
              if (!*(_WORD *)(a1 + 80) && v94 <= 0x80000000)
              {
                for (unint64_t j = 3; j > 1; --j)
                {
                  v93 += llvm::DIExpression::ExprOperand::getSize(v5);
                  *unsigned int v5 = v93;
                }
                LODWORD(v89) = -(int)v94;
                if (!v88) {
                  goto LABEL_127;
                }
                goto LABEL_148;
              }
              goto LABEL_147;
            }
          }
        }
      }
      else if (*v15 == 35)
      {
        unint64_t v89 = v15[1];
        if (!(v89 >> 31))
        {
          if (*v5 != v5[1])
          {
            uint64_t v90 = *v5;
            *unsigned int v5 = &v90[llvm::DIExpression::ExprOperand::getSize(v5)];
            if (!v88)
            {
LABEL_127:
              sub_1CD2AEAA0(a1, v87, v89);
LABEL_149:
              *(_DWORD *)(a1 + 32) = 0;
              uint64_t result = 1;
              if (!*(_WORD *)(a1 + 80) || *v5 == v5[1] || **v5 == 4096) {
                return result;
              }
LABEL_152:
              sub_1CD8AD768((void **)a1);
              return 1;
            }
LABEL_148:
            (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 145, 0);
            (*(void (**)(uint64_t, void))(*(void *)a1 + 8))(a1, (int)v89);
            goto LABEL_149;
          }
LABEL_147:
          if (!v88) {
            goto LABEL_127;
          }
          goto LABEL_148;
        }
      }
    }
    LODWORD(v89) = 0;
    goto LABEL_147;
  }
  uint64_t v91 = v15;
  while (*v91 != 159)
  {
    v91 += llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v116);
    v116.i64[0] = (uint64_t)v91;
    if (v91 == v16) {
      goto LABEL_23;
    }
  }
LABEL_24:
  uint64_t result = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 80) = v20;
  unint64_t v23 = (v20 & 0xFFFFFFF8FFFFFFFFLL) >> 32;
LABEL_119:
  *(_WORD *)(a1 + 84) = v23;
  return result;
}

uint64_t sub_1CD2AF890(uint64_t result, unsigned char *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t v4 = (*(unsigned int *)(result + 80) | ((unint64_t)*(unsigned __int16 *)(result + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x200000000;
    *(_DWORD *)(result + 80) = *(_DWORD *)(result + 80);
    *(_WORD *)(result + 84) = WORD2(v4);
  }
  unsigned int v3 = *(void **)(a3 + 24);
  if (((*(void *)(a3 + 32) - (void)v3) & 0x7FFFFFFF8) != 0 && *v3 == 4099)
  {
    uint64_t v5 = *(unsigned __int16 *)(result + 84);
    unint64_t v6 = *(unsigned int *)(result + 80) | (unint64_t)(v5 << 32);
    unsigned int v7 = (v5 >> 6) & 6;
    unint64_t v8 = v6 & 0xFFFFFE3FFFFFFFFFLL;
    *(_DWORD *)(result + 80) = v8;
    *(_WORD *)(result + 84) = (v8 | ((unint64_t)(v7 | 1) << 38)) >> 32;
    if (!*a2)
    {
      *(_DWORD *)(result + 80) = v8;
      *(_WORD *)(result + 84) = (v8 | ((unint64_t)(v7 | 3) << 38)) >> 32;
    }
  }
  return result;
}

uint64_t sub_1CD2AF934(uint64_t a1, llvm::DIExpression::ExprOperand *a2)
{
  return sub_1CD2AF968(a1, a2, (uint64_t (*)(uint64_t, void, llvm::DIExpression::ExprOperand *))sub_1CD2B02A4, (uint64_t)&v3);
}

uint64_t sub_1CD2AF968(uint64_t a1, llvm::DIExpression::ExprOperand *this, uint64_t (*a3)(uint64_t, void, llvm::DIExpression::ExprOperand *), uint64_t a4)
{
  uint64_t v5 = *(void *)this;
  unint64_t v6 = (uint64_t *)*((void *)this + 1);
  if (*(uint64_t **)this != v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unsigned int Size = llvm::DIExpression::ExprOperand::getSize((uint64_t **)this);
      *(void *)this = v5 + 8 * Size;
      uint64_t v13 = *(void *)v5;
      if ((unint64_t)(*(void *)v5 - 80) <= 0x1F)
      {
LABEL_26:
        (**(void (***)(uint64_t, void, void))a1)(a1, *(void *)v5, 0);
      }
      else if ((unint64_t)(v13 - 112) <= 0x1F)
      {
        sub_1CD2AEAA0(a1, v13 - 112, *(_DWORD *)(v5 + 8));
      }
      else if (v13 > 143)
      {
        uint64_t v19 = v10;
        uint64_t v40 = v11;
        if (v13 == 159)
        {
          unint64_t v20 = (*(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80);
          *(_WORD *)(a1 + 84) = WORD2(v20);
LABEL_20:
          uint64_t v11 = v40;
          uint64_t v10 = v19;
        }
        else
        {
          switch(v13)
          {
            case 4097:
              uint64_t v32 = *(void *)(v5 + 8);
              unsigned __int8 v33 = *(unsigned char *)(v5 + 16);
              if ((((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32) & 0x1E0000000000) >= 0x80000000001
                && *(unsigned char *)(*(void *)(*(void *)(a1 + 16) + 192) + 3537))
              {
                (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 168, 0);
                unsigned int v39 = sub_1CD8AD8FC(*(void *)(a1 + 16), v32, v33);
                (*(void (**)(uint64_t, void))(*(void *)a1 + 32))(a1, v39);
                goto LABEL_20;
              }
              if ((_BYTE)v19 && (unint64_t v34 = *(void *)(v40 + 8), v34 < *(void *)(v5 + 8)))
              {
                if (*(unsigned char *)(v5 + 16) == 7)
                {
                  sub_1CD8ADC64((void (***)(void))a1, v34);
                }
                else if (*(unsigned char *)(v5 + 16) == 5)
                {
                  sub_1CD8AD9A4((uint64_t (***)(void, uint64_t, void))a1, v34);
                }
                uint64_t v11 = 0;
                uint64_t v10 = 0;
              }
              else
              {
                uint64_t v10 = 1;
                uint64_t v11 = v5;
              }
              break;
            case 4098:
              int v35 = *(unsigned __int8 *)(a1 + 87);
              *(unsigned char *)(a1 + 86) = *(void *)(v5 + 8);
              if (!v35) {
                *(unsigned char *)(a1 + 87) = 1;
              }
              goto LABEL_20;
            case 4099:
            case 4100:
LABEL_45:
              __break(1u);
              (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 146, 0);
              (*(void (**)(uint64_t, void))(*(void *)a1 + 16))(a1, *(void *)(v5 + 8));
              uint64_t v23 = *(void *)(v5 + 16);
LABEL_24:
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v23);
              break;
            case 4101:
              if (a3(a4, *(unsigned int *)(v5 + 8), this)) {
                break;
              }
              uint64_t result = 0;
              unsigned int v37 = *(_DWORD *)(a1 + 80);
              uint64_t v36 = a1 + 80;
              uint64_t v38 = *(unsigned __int16 *)(v36 + 4);
              *(_DWORD *)uint64_t v36 = v37;
              *(_WORD *)(v36 + 4) = ((v37 | (unint64_t)(v38 << 32)) & 0xFFFFFFF8FFFFFFFFLL) >> 32;
              return result;
            default:
              uint64_t v27 = *(unsigned int *)(a1 + 80);
              unint64_t v28 = v27 | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
              unsigned int v29 = (unsigned __int16)*(_DWORD *)(a1 + 80);
              if (v29 >= *(_DWORD *)(v5 + 8) - *(_DWORD *)(a1 + 72) + *(_DWORD *)(v5 + 16)) {
                unsigned int v29 = *(_DWORD *)(v5 + 8) - *(_DWORD *)(a1 + 72) + *(_DWORD *)(v5 + 16);
              }
              if ((_WORD)v27) {
                unsigned int v30 = v29;
              }
              else {
                unsigned int v30 = *(_DWORD *)(v5 + 8) - *(_DWORD *)(a1 + 72) + *(_DWORD *)(v5 + 16);
              }
              if ((v28 & 0x700000000) == 0x300000000 && (v28 & 0x180000000000) != 0)
              {
                (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 159, 0);
                LODWORD(v27) = *(_DWORD *)(a1 + 80);
              }
              sub_1CD8AD320((void *)a1, v30, WORD1(v27));
              __int16 v31 = *(_WORD *)(a1 + 84);
              *(_DWORD *)(a1 + 80) = 0;
              *(_WORD *)(a1 + 84) = v31 & 0xFFF8;
              return 1;
          }
        }
      }
      else
      {
        switch(v13)
        {
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 19:
          case 21:
          case 23:
          case 25:
          case 31:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
            goto LABEL_45;
          case 16:
            sub_1CD2AE980((void (***)(void))a1, *(void *)(v5 + 8));
            goto LABEL_10;
          case 17:
            (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 17, 0);
            uint64_t v23 = *(void *)(v5 + 8);
            goto LABEL_24;
          case 18:
          case 20:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 32:
          case 33:
          case 34:
          case 36:
          case 37:
          case 38:
          case 39:
          case 48:
            goto LABEL_26;
          case 22:
            (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 22, 0);
            goto LABEL_10;
          case 24:
            (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 24, 0);
            goto LABEL_10;
          case 35:
            (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 35, 0);
            (*(void (**)(uint64_t, void))(*(void *)a1 + 16))(a1, *(void *)(v5 + 8));
            goto LABEL_10;
          default:
            char v21 = (uint64_t *)(v5 + 8 * Size);
            unint64_t v22 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
            if ((v22 & 0x700000000) == 0x200000000) {
              goto LABEL_22;
            }
            v41[0] = v21;
            v41[1] = v6;
            if (v21 == v6) {
              goto LABEL_34;
            }
            break;
        }
        do
        {
          unsigned int v24 = llvm::DIExpression::ExprOperand::getSize(v41);
          unint64_t v25 = &v21[v24];
          v41[0] = v25;
          if (*v21 != 4096 && *v21 != 6)
          {
LABEL_22:
            (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 6, 0);
            goto LABEL_10;
          }
          v21 += v24;
        }
        while (v25 != v6);
LABEL_34:
        *(_DWORD *)(a1 + 80) = v22;
        *(_WORD *)(a1 + 84) = (v22 & 0xFFFFFFF8FFFFFFFFLL | 0x200000000) >> 32;
      }
LABEL_10:
      uint64_t v5 = *(void *)this;
      unint64_t v6 = (uint64_t *)*((void *)this + 1);
    }
    while (*(uint64_t **)this != v6);
  }
  unint64_t v14 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32);
  uint64_t v15 = v14 & 0x10700000000;
  uint64_t v16 = v14 & 0x180000000000;
  if (v15 == 0x300000000 && v16 != 0) {
    (**(void (***)(uint64_t, uint64_t, void))a1)(a1, 159, 0);
  }
  return 1;
}

void *sub_1CD2B0100(void *result)
{
  unsigned int v1 = *((_DWORD *)result + 20);
  if (v1 >= 0x10000 && (unsigned __int16)v1 != 0) {
    return sub_1CD8AD320(result, (unsigned __int16)v1, HIWORD(v1));
  }
  return result;
}

void sub_1CD2B0120(void *a1, uint64_t a2)
{
  if (a2)
  {
    char v3 = *(uint64_t **)(a2 + 24);
    unint64_t v4 = *(uint64_t **)(a2 + 32);
    llvm::DIExpression::getFragmentInfo(v3, v4, &v7);
    if (v8)
    {
      llvm::DIExpression::getFragmentInfo(v3, v4, &v7);
      uint64_t v5 = v7.i64[1];
      unint64_t v6 = a1[9];
      if (v7.i64[1] > v6) {
        sub_1CD8AD320(a1, v7.i32[2] - v6, 0);
      }
      a1[9] = v5;
    }
  }
}

char *sub_1CD2B01B0(char **a1, int a2, char a3)
{
  char v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9 >> 60) {
    sub_1CB833614();
  }
  int v12 = (char *)operator new(16 * v9);
  uint64_t v13 = &v12[16 * v5];
  *(_DWORD *)uint64_t v13 = a2;
  v13[4] = a3;
  *((void *)v13 + 1) = 0;
  unint64_t v14 = v13 + 16;
  if (v4 == v3)
  {
    uint64_t v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      uint64_t v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

uint64_t *sub_1CD2B02A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)(a1 + 5);
  a1[4] = 0x400000000;
  a1[11] = 0;
  a1[9] = (uint64_t)(a1 + 11);
  a1[10] = 0;
  a1[12] = 1;
  a1[13] = (uint64_t)(a1 + 1);
  *((_DWORD *)a1 + 30) = 64;
  unint64_t v9 = malloc_type_calloc(0x41uLL, 8uLL, 0x6D9A4F0CuLL);
  if (!v9) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v9[64] = -1;
  a1[14] = (uint64_t)v9;
  *((_DWORD *)a1 + 37) = 0;
  *(uint64_t *)((char *)a1 + 140) = 0;
  *(uint64_t *)((char *)a1 + 132) = 0;
  *(uint64_t *)((char *)a1 + 124) = 0;
  a1[19] = (uint64_t)(a1 + 21);
  a1[20] = 0x100000000;
  uint64_t v10 = *a1;
  a1[22] = 0;
  a1[23] = 0;
  *((_DWORD *)a1 + 48) = 0;
  *((_DWORD *)a1 + 49) = 32;
  a1[25] = a5;
  a1[26] = a3;
  a1[27] = a4;
  a1[28] = 0;
  *((_DWORD *)a1 + 58) = 0;
  *((unsigned char *)a1 + 236) = *(unsigned char *)(*(void *)(v10 + 256) + 424);
  a1[30] = (uint64_t)(a1 + 32);
  a1[31] = 0x100000000;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_DWORD *)a1 + 88) = 0;
  a1[45] = 0;
  a1[46] = 0;
  *((_DWORD *)a1 + 94) = 0;
  a1[48] = 0;
  a1[49] = 0;
  *((_DWORD *)a1 + 100) = 0;
  a1[51] = 0;
  a1[52] = 0;
  *((_DWORD *)a1 + 106) = 0;
  *((_DWORD *)a1 + 112) = 0;
  a1[54] = 0;
  a1[55] = 0;
  return a1;
}

uint64_t sub_1CD2B03D4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = *(void *)result;
  if (v2 >= *(_DWORD *)(result + 12))
  {
    unint64_t v6 = v3 + 8 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      sub_1CD8ADFC8();
    }
    sub_1CD8ADFC8();
  }
  uint64_t v4 = *(unsigned int *)(result + 8);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v3 + 8 * v4) = v5;
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

void sub_1CD2B045C(uint64_t *a1, void *a2, uint64_t a3)
{
  if (*(_DWORD *)(a2[9] + 36) != 3)
  {
    if (a2[7])
    {
      uint64_t v4 = (void *)a2[2];
      if (v4)
      {
        if (*v4 >= 8uLL)
        {
          (*(void (**)(void))(**(void **)(*a1 + 272) + 168))(*(void *)(*a1 + 272));
          (*(void (**)(void *, uint64_t))(*a2 + 48))(a2, a3);
          sub_1CD28B4F0(*a1, (uint64_t)(a2 + 1));
          if (a2[23])
          {
            int8x16_t v7 = *(void (**)(void))(**(void **)(*a1 + 272) + 192);
            v7();
          }
        }
      }
    }
  }
}

uint64_t sub_1CD2B0578(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 160);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)result;
    unint64_t v3 = 0;
    uint64_t v4 = *(uint64_t **)(result + 152);
    uint64_t v5 = 8 * v1;
    do
    {
      uint64_t v6 = *v4;
      if (*(_DWORD *)(*(void *)(*v4 + 72) + 36) != 3)
      {
        int8x16_t v7 = *(void **)(v6 + 16);
        if (!v7 || *v7 < 8uLL) {
          return result;
        }
        *(void *)(v6 + 64) = v3;
        uint64_t result = sub_1CD2B061C(v2, v6);
        v3 += result;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
    if (HIDWORD(v3))
    {
      uint64_t result = sub_1CD2871A4(*v2);
      if ((result & 1) == 0) {
        llvm::report_fatal_error((llvm *)"The generated debug information is too large for the 32-bit DWARF format.", (const llvm::Twine *)1);
      }
    }
  }
  return result;
}

uint64_t sub_1CD2B061C(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(*(void *)(*a1 + 272) + 8) + 1626)) {
    int v3 = 12;
  }
  else {
    int v3 = 4;
  }
  uint64_t v4 = a2 + 8;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  int v6 = ((*(_DWORD *)(*(void *)(*(void *)(*a1 + 248) + 248) + 4) << 13) + 57344) & 0xFF0000 | (*(unsigned __int8 *)(*(void *)(*(void *)(*a1 + 272) + 8) + 1626) << 24) | *(unsigned __int16 *)(*(void *)(*(void *)(*a1 + 272) + 8) + 1624);
  __int16 v9 = *(unsigned __int8 *)(*(void *)(*a1 + 256) + 424);
  int v8 = v6;
  return sub_1CD29181C(v4, (unsigned int *)&v8, a1 + 13, v5 + v3);
}

uint64_t sub_1CD2B06EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v4 = (uint64_t **)sub_1CD2B099C((uint64_t *)(a1 + 336), &v14);
  unsigned int v5 = *(unsigned __int16 *)(a3[1] + 32);
  unsigned int v13 = v5;
  if (v5)
  {
    int v8 = v4[2];
    if (v8)
    {
      __int16 v9 = v4 + 2;
      do
      {
        unsigned int v10 = *((_DWORD *)v8 + 8);
        BOOL v11 = v10 >= v5;
        if (v10 >= v5) {
          int v12 = (uint64_t **)v8;
        }
        else {
          int v12 = (uint64_t **)(v8 + 1);
        }
        if (v11) {
          __int16 v9 = (uint64_t **)v8;
        }
        int v8 = *v12;
      }
      while (*v12);
      if (v9 != v4 + 2 && *((_DWORD *)v9 + 8) <= v5)
      {
        sub_1CD8A6FC4((uint64_t)v9[5], (uint64_t)a3);
        return 0;
      }
    }
    uint64_t v15 = &v13;
    sub_1CD2B0D30(v4 + 1, &v13, (uint64_t)&std::piecewise_construct, &v15)[5] = a3;
  }
  else
  {
    unsigned int v6 = *((_DWORD *)v4 + 10);
    if (v6 >= *((_DWORD *)v4 + 11)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v4[4][v6] = (uint64_t)a3;
    ++*((_DWORD *)v4 + 10);
  }
  return 1;
}

uint64_t sub_1CD2B07F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t)(a1 + 30);
  uint64_t v6 = *a1;
  __int16 v9 = "debug_ranges";
  __int16 v10 = 259;
  v11[0] = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v6 + 264), (const llvm::Twine *)&v9, 1);
  v11[1] = a2;
  v12[0] = v13;
  v12[1] = (void *)0x200000000;
  if (*(_DWORD *)(a3 + 8)) {
    sub_1CD298D88((uint64_t)v12, (const void **)a3);
  }
  sub_1CD2B08EC(v7, (unint64_t)v11);
  if (v12[0] != v13) {
    free(v12[0]);
  }
  return (*((_DWORD *)a1 + 62) - 1);
}

uint64_t sub_1CD2B08EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    unint64_t v9 = v5 + (v4 << 6);
    if (v5 <= a2 && v9 > a2)
    {
      unint64_t v11 = a2 - v5;
      sub_1CD2B0E1C(a1, v8);
      unint64_t v5 = *(void *)a1;
      a2 = *(void *)a1 + v11;
    }
    else
    {
      sub_1CD2B0E1C(a1, v8);
      unint64_t v5 = *(void *)a1;
    }
  }
  unint64_t v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  *(_OWORD *)unint64_t v6 = *(_OWORD *)a2;
  *(void *)(v6 + 24) = 0x200000000;
  *(void *)(v6 + 16) = v6 + 32;
  uint64_t result = v6 + 16;
  if (*(_DWORD *)(a2 + 24)) {
    uint64_t result = sub_1CD298D88(result, (const void **)(a2 + 16));
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void *sub_1CD2B099C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v8 = 0;
  char v4 = sub_1CD2B0A28(a1, a2, &v8);
  unint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD2B0AC8((uint64_t)a1, (uint64_t)a2, a2, v8);
    uint64_t v6 = *a2;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *unint64_t v5 = v6;
    v5[1] = v5 + 2;
    v5[4] = v5 + 6;
    *((_DWORD *)v5 + 11) = 8;
  }
  return v5;
}

uint64_t sub_1CD2B0A28(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 112 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 112 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_13;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_13:
  *a3 = v7;
  return result;
}

void *sub_1CD2B0AC8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD2B0B7C(a1, v7);
  unint64_t v9 = 0;
  sub_1CD2B0A28((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD2B0B7C(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(112 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD2B0C54(a1, v4, v4 + 112 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 112 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 14;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

void sub_1CD2B0C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 112 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 14;
      v8 -= 112;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      sub_1CD2B0A28((uint64_t *)a1, (void *)a2, &v11);
      unint64_t v9 = v11;
      void *v11 = *(void *)a2;
      sub_1CD8AE0C0(v9 + 1, a2 + 8);
      ++*(_DWORD *)(a1 + 8);
      uint64_t v10 = *(void **)(a2 + 32);
      if ((void *)(a2 + 48) != v10) {
        free(v10);
      }
      sub_1CB833A08(a2 + 8, *(void **)(a2 + 16));
    }
    a2 += 112;
  }
}

uint64_t **sub_1CD2B0D30(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v13 = *a2;
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v6;
        unsigned int v14 = *((_DWORD *)v6 + 8);
        if (v13 >= v14) {
          break;
        }
        uint64_t v6 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_3;
        }
      }
      if (v14 >= v13) {
        return v8;
      }
      uint64_t v6 = v8[1];
    }
    while (v6);
    int v7 = v8 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_3:
  unint64_t v9 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x30uLL);
  *((_DWORD *)v8 + 8) = **a4;
  v8[5] = 0;
  void *v8 = 0;
  v8[1] = 0;
  v8[2] = v9;
  void *v7 = (uint64_t *)v8;
  uint64_t v10 = (uint64_t *)**a1;
  uint64_t v11 = (uint64_t *)v8;
  if (v10)
  {
    *a1 = v10;
    uint64_t v11 = *v7;
  }
  sub_1CB8358B8(a1[1], v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

void sub_1CD2B0E1C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(v5 << 6, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v7 = v6;
  sub_1CD2B0ED4((uint64_t *)a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CD2B0ED4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1 + (v2 << 6);
    uint64_t v5 = (void *)(a2 + 16);
    uint64_t v6 = *a1 + 16;
    do
    {
      *((_OWORD *)v5 - 1) = *(_OWORD *)(v6 - 16);
      *uint64_t v5 = v5 + 2;
      v5[1] = 0x200000000;
      if (*(_DWORD *)(v6 + 8)) {
        sub_1CD298D88((uint64_t)v5, (const void **)v6);
      }
      uint64_t v7 = v6 - 16;
      v5 += 8;
      v6 += 64;
    }
    while (v7 + 64 != v4);
    uint64_t v8 = *((unsigned int *)a1 + 2);
    if (v8)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = v8 << 6;
      do
      {
        uint64_t v11 = *(void **)(v9 + v10 - 48);
        if ((void *)(v9 + v10 - 32) != v11) {
          free(v11);
        }
        v10 -= 64;
      }
      while (v10);
    }
  }
}

uint64_t sub_1CD2B0F98(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t __n)
{
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  int v17 = a3;
  size_t v18 = __n;
  uint64_t v7 = sub_1CD2B1458((uint64_t *)a1, a3, __n, &v19);
  uint64_t result = *v7;
  if (v9)
  {
    *(_DWORD *)(result + 24) = -1;
    uint64_t v10 = *(void *)(a1 + 48);
    *(void *)(result + 16) = v10;
    if (*(unsigned char *)(a1 + 60))
    {
      __int16 v16 = 261;
      uint64_t v12 = *(void *)(a1 + 40);
      v15[0] = *(void *)(a1 + 32);
      v15[1] = v12;
      unsigned int v13 = v7;
      uint64_t v14 = result;
      uint64_t v11 = sub_1CD2819B4(a2, (const llvm::Twine *)v15);
      uint64_t v7 = v13;
      uint64_t result = v14;
      uint64_t v10 = *(void *)(a1 + 48);
    }
    else
    {
      uint64_t v11 = 0;
    }
    *(void *)(result + 8) = v11;
    *(void *)(a1 + 48) = __n + v10 + 1;
    return *v7;
  }
  return result;
}

void sub_1CD2B1064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v42[64] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 12))
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(a2 + 272) + 168))(*(void *)(a2 + 272), a3, 0);
    uint64_t v40 = v42;
    uint64_t v41 = 0x4000000000;
    if (*(_DWORD *)(a1 + 12) >= 0x41u) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9)
    {
      for (unint64_t i = *(uint64_t **)a1; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      unint64_t i = *(uint64_t **)a1;
    }
    uint64_t v12 = *(void *)a1 + 8 * v9;
    unsigned int v13 = v41;
    if (i != (uint64_t *)v12)
    {
      uint64_t v14 = *i;
      do
      {
        if (v13 >= HIDWORD(v41)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v40 + v13) = v14;
        unsigned int v13 = v41 + 1;
        LODWORD(v41) = v41 + 1;
        do
        {
          uint64_t v15 = i[1];
          ++i;
          uint64_t v14 = v15;
          if (v15) {
            BOOL v16 = v14 == -8;
          }
          else {
            BOOL v16 = 1;
          }
        }
        while (v16);
      }
      while (i != (uint64_t *)v12);
    }
    unint64_t v17 = 126 - 2 * __clz(v13);
    if (v13) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    sub_1CD2B1674((uint64_t *)v40, (uint64_t *)v40 + v13, v18, 1);
    if (v41)
    {
      long long v19 = (char *)v40;
      uint64_t v20 = 8 * v41;
      do
      {
        if (*(unsigned char *)(a1 + 60)) {
          (*(void (**)(void, void, void))(**(void **)(a2 + 272) + 192))(*(void *)(a2 + 272), *(void *)(*(void *)v19 + 8), 0);
        }
        uint64_t v21 = *(void *)(a2 + 272);
        uint64_t v22 = *(void *)v19 + 16;
        v38[0] = "string offset=";
        v38[2] = v22;
        __int16 v39 = 3075;
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v21 + 112))(v21, v38, 1);
        v19 += 8;
        (*(void (**)(void))(**(void **)(a2 + 272) + 488))();
        v20 -= 8;
      }
      while (v20);
    }
    if (a4)
    {
      sub_1CD42769C((uint64_t)&v40, *(unsigned int *)(a1 + 56));
      uint64_t v23 = *(unsigned int *)(a1 + 8);
      if (v23)
      {
        for (unint64_t j = *(uint64_t **)a1; !*j || *j == -8; ++j)
          ;
      }
      else
      {
        unint64_t j = *(uint64_t **)a1;
      }
      uint64_t v26 = *(void *)a1 + 8 * v23;
      if (j != (uint64_t *)v26)
      {
        uint64_t v27 = *j;
        do
        {
          uint64_t v28 = *(unsigned int *)(v27 + 24);
          if (v28 != -1) {
            *((void *)v40 + v28) = v27;
          }
          do
          {
            uint64_t v29 = j[1];
            ++j;
            uint64_t v27 = v29;
            if (v29) {
              BOOL v30 = v27 == -8;
            }
            else {
              BOOL v30 = 1;
            }
          }
          while (v30);
        }
        while (j != (uint64_t *)v26);
      }
      (*(void (**)(void, uint64_t, void))(**(void **)(a2 + 272) + 168))(*(void *)(a2 + 272), a4, 0);
      uint64_t v31 = sub_1CD2871BC(a2);
      if (v41)
      {
        uint64_t v32 = v31;
        unsigned __int8 v33 = (char *)v40;
        uint64_t v34 = 8 * v41;
        do
        {
          if (a5)
          {
            uint64_t v35 = *(void *)(*(void *)v33 + 24);
            long long v36 = *(_OWORD *)(*(void *)v33 + 8);
            uint64_t v37 = v35;
            sub_1CD28B41C(a2, (uint64_t)&v36);
          }
          else
          {
            (*(void (**)(void, void, uint64_t))(**(void **)(a2 + 272) + 520))(*(void *)(a2 + 272), *(void *)(*(void *)v33 + 16), v32);
          }
          v33 += 8;
          v34 -= 8;
        }
        while (v34);
      }
    }
    if (v40 != v42) {
      free(v40);
    }
  }
}

uint64_t *sub_1CD2B1458(uint64_t *a1, unsigned __int8 *a2, size_t __n, long long *a4)
{
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v23 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v23) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v23[16] = 2;
    *a1 = (uint64_t)v23;
    unsigned int v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  uint64_t v29 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    uint64_t v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *a1;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *a1 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    long long v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 {
           && __n == *v19
    }
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  long long v19 = *(void **)(v12 + 8 * v18);
LABEL_17:
  unint64_t i = (uint64_t *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  uint64_t v24 = sub_1CB906F34((uint64_t *)a1[3], __n + 33, 3);
  uint64_t v25 = v24;
  uint64_t v26 = v24 + 32;
  if (__n) {
    memcpy((void *)(v24 + 32), a2, __n);
  }
  *(unsigned char *)(v26 + __n) = 0;
  *(void *)uint64_t v25 = __n;
  long long v27 = *v29;
  *(void *)(v25 + 24) = *((void *)v29 + 2);
  *(_OWORD *)(v25 + 8) = v27;
  uint64_t *i = v25;
  ++*((_DWORD *)a1 + 3);
  for (unint64_t i = (uint64_t *)(*a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_1CD2B1674(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  size_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          size_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(void *)(v39 + 16) < *(void *)(*v10 + 16))
                {
                  *uint64_t v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                uint64_t result = sub_1CD2B1DA0(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CD2B2034(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t v41 = v10 + 1;
                uint64_t v42 = v10 + 2;
                uint64_t v43 = v10 + 3;
                uint64_t result = sub_1CD2B2034(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(void *)(v44 + 16) < *(void *)(v45 + 16))
                {
                  *uint64_t v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unint64_t v48 = *(void *)(*v43 + 16);
                  if (v48 < *(void *)(*v42 + 16))
                  {
                    uint64_t *v42 = v46;
                    *uint64_t v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(void *)(*v41 + 16))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(void *)(*v10 + 16))
                      {
                        *uint64_t v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                unsigned int v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  unsigned int v55 = v51;
                  unint64_t v58 = *(void *)(v56 + 16);
                  if (v58 < *(void *)(v57 + 16))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        uint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(void *)(v57 + 16));
                    uint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *uint64_t v61 = v56;
                  }
                  unsigned int v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                size_t v9 = v51;
                unint64_t v92 = *(void *)(v90 + 16);
                if (v92 < *(void *)(v91 + 16))
                {
                  do
                  {
                    *unsigned int v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(void *)(v91 + 16));
                  *unsigned int v51 = v90;
                }
                unsigned int v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  char v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(void *)(v67 + 16) < *(void *)(v66[1] + 16))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t result = &v10[v64];
                  uint64_t v68 = *result;
                  unint64_t v69 = *(void *)(*result + 16);
                  if (*(void *)(v67 + 16) >= v69)
                  {
                    do
                    {
                      unint64_t v70 = v66;
                      *uint64_t result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      char v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(void *)(v67 + 16) < *(void *)(v66[1] + 16))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      uint64_t result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(void *)(v67 + 16) >= v69);
                    *unint64_t v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                int v75 = v10;
                do
                {
                  unint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  int v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    uint64_t result = *(uint64_t **)(v78 + 16);
                    if ((unint64_t)result < *(void *)(v77[1] + 16))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *int v75 = v78;
                  int v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *int v77 = v74;
                }
                else
                {
                  *int v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    unint64_t v87 = *(void *)(*v77 + 16);
                    if (*(void *)(*v84 + 16) < v87)
                    {
                      do
                      {
                        int v88 = v84;
                        *int v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        int v77 = v88;
                      }
                      while (*(void *)(*v84 + 16) < v87);
                      *int v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CD2B1DA0(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CD2B1DA0(v9 + 1, v14 - 1, a2 - 2);
            sub_1CD2B1DA0(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = sub_1CD2B1DA0(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *size_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CD2B1DA0(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unint64_t v17 = *(void *)(v16 + 16);
          if (*(void *)(*(v9 - 1) + 16) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(void *)(*(a2 - 1) + 16))
          {
            uint64_t v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(void *)(*v10 + 16));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(void *)(v30 + 16));
          }
          uint64_t v32 = a2;
          if (v10 < a2)
          {
            uint64_t v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(void *)(v33 + 16));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              *uint64_t v10 = v35;
              *uint64_t v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(void *)(v36 + 16));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(void *)(v37 + 16));
            }
            while (v10 < v32);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *size_t v9 = *v38;
          }
          a4 = 0;
          *uint64_t v38 = v16;
        }
        unint64_t v17 = *(void *)(v16 + 16);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(void *)(v19 + 16) < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(void *)(v23 + 16) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(void *)(v22 + 16) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          uint64_t v25 = v21;
          do
          {
            *uint64_t v10 = v24;
            uint64_t *v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(void *)(v26 + 16) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(void *)(v27 + 16) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *size_t v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CD2B1674(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CD2B1E28(v9, v10 - 1);
      uint64_t result = (uint64_t *)sub_1CD2B1E28(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CD2B1DA0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = *(void *)(*a2 + 16);
  unint64_t v6 = *(void *)(*result + 16);
  uint64_t v7 = *a3;
  unint64_t v8 = *(void *)(*a3 + 16);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(void *)(*a2 + 16) < *(void *)(*result + 16))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(void *)(*a3 + 16) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CD2B1E28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(void *)(v6 + 16) < *(void *)(*a1 + 16))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CD2B1DA0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CD2B2034(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      sub_1CD2B2034(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(void *)(v21 + 16) < *(void *)(v22 + 16))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unint64_t v25 = *(void *)(*v20 + 16);
        if (v25 < *(void *)(*v19 + 16))
        {
          *uint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(void *)(*v18 + 16))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(void *)(*a1 + 16))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_1CD2B1DA0(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unint64_t v14 = *(void *)(*v9 + 16);
    if (v14 < *(void *)(*v8 + 16))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(void *)(v13 + 16))
        {
          unint64_t v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unint64_t v17 = a1;
LABEL_13:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CD2B2034(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CD2B1DA0(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(void *)(*a4 + 16) < *(void *)(*a3 + 16))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(void *)(*a3 + 16) < *(void *)(*a2 + 16))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(void *)(*a2 + 16) < *(void *)(*a1 + 16))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

double sub_1CD2B20CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *(_WORD *)(*(void *)(*(void *)(a2 + 272) + 8) + 1624);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)&double result = 0x200000000;
  *(void *)(a1 + 32) = 0x200000000;
  *(void *)(a1 + 72) = 0;
  unint64_t v6 = ((unint64_t)*(unsigned __int16 *)(a1 + 84) << 32) & 0xE00000000000;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = (unsigned __int16)((v6 | ((unint64_t)(v4 & 0xF) << 41)) >> 32);
  *(void *)a1 = &unk_1F264A1E8;
  *(void *)(a1 + 88) = a2;
  *(void *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

unint64_t sub_1CD2B2148(uint64_t a1, unsigned int a2)
{
  v5[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 120)) {
    uint64_t v3 = (unint64_t *)(a1 + 104);
  }
  else {
    uint64_t v3 = *(unint64_t **)(a1 + 96);
  }
  v5[0] = 0xB000000000001;
  v5[1] = a2;
  return sub_1CD298EC8(v3, v2 + 80, (int *)v5);
}

unint64_t sub_1CD2B21C4(uint64_t a1, uint64_t a2)
{
  v5[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 120)) {
    uint64_t v3 = (unint64_t *)(a1 + 104);
  }
  else {
    uint64_t v3 = *(unint64_t **)(a1 + 96);
  }
  v5[0] = 0xD000000000001;
  v5[1] = a2;
  return sub_1CD298EC8(v3, v2 + 80, (int *)v5);
}

unint64_t sub_1CD2B2240(uint64_t a1, uint64_t a2)
{
  v5[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 120)) {
    uint64_t v3 = (unint64_t *)(a1 + 104);
  }
  else {
    uint64_t v3 = *(unint64_t **)(a1 + 96);
  }
  v5[0] = 0xF000000000001;
  v5[1] = a2;
  return sub_1CD298EC8(v3, v2 + 80, (int *)v5);
}

BOOL sub_1CD2B22BC(uint64_t a1, uint64_t a2, int a3)
{
  return (*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 552))(a2, *(void *)(*(void *)(a1 + 88) + 280)) == a3;
}

double sub_1CD2B2320(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_WORD *)(a1 + 36) = a2;
  *(unsigned char *)(a1 + 38) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 48) = a1 | 4;
  *(void *)a1 = &unk_1F264A248;
  *(void *)(a1 + 8) = (a1 + 8) | 4;
  *(void *)(a1 + 72) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 104) = 0x400000000;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = a1 + 160;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 168) = 1;
  *(void *)(a1 + 176) = a4;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = a5;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 200) = a6;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  return result;
}

uint64_t sub_1CD2B23B8(uint64_t a1)
{
  *(void *)a1 = &unk_1F264A248;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 288), 8);
  uint64_t v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(void *)(a1 + 272) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(void *)(a1 + 248) = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 216), 8);
  uint64_t v4 = *(unsigned int *)(a1 + 104);
  if (v4)
  {
    unint64_t v5 = *(uint64_t **)(a1 + 96);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      MEMORY[0x1D25D9CD0](v7, 8);
      v6 -= 8;
    }
    while (v6);
  }
  unint64_t v8 = *(uint64_t **)(a1 + 144);
  uint64_t v9 = *(unsigned int *)(a1 + 152);
  if (v9)
  {
    uint64_t v12 = 16 * v9;
    do
    {
      uint64_t v13 = *v8;
      v8 += 2;
      MEMORY[0x1D25D9CD0](v13, 8);
      v12 -= 16;
    }
    while (v12);
    unint64_t v8 = *(uint64_t **)(a1 + 144);
  }
  if (v8 != (uint64_t *)(a1 + 160)) {
    free(v8);
  }
  uint64_t v10 = *(void **)(a1 + 96);
  if (v10 != (void *)(a1 + 112)) {
    free(v10);
  }
  return a1;
}

uint64_t sub_1CD2B2554(void *a1, unsigned __int8 *a2)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 80))(a1) || (uint64_t result = sub_1CD8A70D8(), result))
  {
    int v4 = *a2;
    if (v4 == 17)
    {
      if ((a2[44] & 8) != 0) {
        return 0;
      }
    }
    else if ((v4 - 11) >= 4 && v4 != 33)
    {
      return 0;
    }
    return *(unsigned char *)(a1[24] + 3535) == 0;
  }
  return result;
}

uint64_t sub_1CD2B25F0(void *a1, unsigned __int8 *a2)
{
  if (sub_1CD2B2554(a1, a2)) {
    int v4 = (uint64_t *)(a1[25] + 432);
  }
  else {
    int v4 = a1 + 27;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2;
  if (sub_1CB915048(v4, &v7, &v6)) {
    return *(void *)(v6 + 8);
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD2B2658(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (sub_1CD2B2554(a1, a2)) {
    uint64_t v6 = a1[25] + 432;
  }
  else {
    uint64_t v6 = (uint64_t)(a1 + 27);
  }
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  return sub_1CD2B6558(v6, &v9, &v10, (uint64_t)v8);
}

unint64_t sub_1CD2B26C0(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = (unint64_t *)(a2 + 8);
  if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8) + 1624) >= 4u)
  {
    uint64_t v6 = 1;
    __int16 v4 = 25;
  }
  else
  {
    uint64_t v6 = 1;
    __int16 v4 = 12;
  }
  return sub_1CD2938A0(a1, v3, a3, v4, &v6);
}

unint64_t sub_1CD2B2724(unint64_t a1, unint64_t *a2, int a3, int a4, unint64_t a5)
{
  if (HIDWORD(a5)) {
    __int16 v5 = 7;
  }
  else {
    __int16 v5 = 6;
  }
  if (a5 >= 0x10000) {
    __int16 v6 = v5;
  }
  else {
    __int16 v6 = 5;
  }
  if (a5 >= 0x100) {
    __int16 v7 = v6;
  }
  else {
    __int16 v7 = 11;
  }
  if ((*(void *)&a4 & 0xFF0000) != 0) {
    __int16 v7 = a4;
  }
  unint64_t v9 = a5;
  return sub_1CD2938A0(a1, a2, a3, v7, &v9);
}

uint64_t *sub_1CD2B2780(uint64_t *result, uint64_t a2, int a3, void *a4, size_t a5)
{
  if (*(_DWORD *)(result[9] + 36) != 3)
  {
    unint64_t v9 = result;
    if (*(unsigned char *)(result[24] + 3531))
    {
      uint64_t v15 = (unint64_t *)(a2 + 8);
      uint64_t v16 = (void *)sub_1CB906F34(result + 10, 16, 3);
      if (a5)
      {
        unint64_t v17 = (void *)sub_1CB906F34(v9 + 10, a5, 0);
        memmove(v17, a4, a5);
      }
      else
      {
        unint64_t v17 = 0;
      }
      void *v16 = v17;
      v16[1] = a5;
      uint64_t v23 = v16;
      return (uint64_t *)sub_1CD8AE590((uint64_t)v9, v15, a3, 8, (uint64_t *)&v23);
    }
    else
    {
      int v10 = (*(uint64_t (**)(uint64_t *))(*result + 80))(result);
      if (v10) {
        __int16 v11 = 7938;
      }
      else {
        __int16 v11 = 14;
      }
      uint64_t v12 = v9[25] + 176;
      uint64_t v13 = v9[22];
      if (*(unsigned char *)(v9[24] + 3550)) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == 0;
      }
      if (v14) {
        uint64_t v18 = sub_1CD2B0F98(v12, v13, (unsigned __int8 *)a4, a5);
      }
      else {
        uint64_t v18 = sub_1CD8AE148(v12, v13, (unsigned __int8 *)a4, a5);
      }
      if (*(unsigned char *)(v9[24] + 3550))
      {
        unsigned int v19 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v20 = HIBYTE(v19);
        unsigned int v21 = HIWORD(v19);
        if (v19 <= 0xFF) {
          __int16 v22 = 37;
        }
        else {
          __int16 v22 = 38;
        }
        if (v21) {
          __int16 v22 = 39;
        }
        if (v20) {
          __int16 v11 = 40;
        }
        else {
          __int16 v11 = v22;
        }
      }
      uint64_t v23 = (void *)v18;
      return (uint64_t *)sub_1CD2B2924((unint64_t)v9, (unint64_t *)(a2 + 8), a3, v11, &v23);
    }
  }
  return result;
}

unint64_t sub_1CD2B2924(unint64_t result, unint64_t *a2, int a3, __int16 a4, void *a5)
{
  __int16 v5 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_3;
  }
  if ((*(_WORD *)(*(void *)(*(void *)(result + 176) + 248) + 1064) & 0x40) == 0) {
    goto LABEL_3;
  }
  unsigned int v6 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  unint64_t v13 = result;
  int v10 = a5;
  __int16 v11 = a4;
  __int16 v9 = a3;
  unsigned int v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  unsigned int v8 = v7;
  __int16 v5 = a2;
  uint64_t result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    int v14 = 2;
    __int16 v15 = a3;
    __int16 v16 = a4;
    uint64_t v17 = *a5;
    return sub_1CD298EC8(v5, result + 80, &v14);
  }
  return result;
}

unint64_t sub_1CD2B2A00(unint64_t a1, unint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 160) += 16;
  uint64_t v10 = *(void *)(a1 + 80);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 16 > *(void *)(a1 + 88) - v10)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 104) >> 7;
    if (v13 >= 0x1E) {
      LOBYTE(v13) = 30;
    }
    uint64_t v14 = 4096 << v13;
    __int16 v11 = operator new(4096 << v13, (std::align_val_t)8uLL);
    unsigned int v15 = *(_DWORD *)(a1 + 104);
    if (v15 >= *(_DWORD *)(a1 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 96) + 8 * v15) = v11;
    ++*(_DWORD *)(a1 + 104);
    *(void *)(a1 + 88) = (char *)v11 + v14;
  }
  else
  {
    __int16 v11 = (void *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)(a1 + 80) = v11 + 2;
  void *v11 = a4;
  v11[1] = a5;
  __int16 v16 = v11;
  return sub_1CD2B2B1C(a1, a2, a3, 6, &v16);
}

unint64_t sub_1CD2B2B1C(unint64_t result, unint64_t *a2, int a3, __int16 a4, void *a5)
{
  __int16 v5 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_3;
  }
  if ((*(_WORD *)(*(void *)(*(void *)(result + 176) + 248) + 1064) & 0x40) == 0) {
    goto LABEL_3;
  }
  unsigned int v7 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  unint64_t v14 = result;
  __int16 v11 = a4;
  __int16 v12 = a3;
  uint64_t v10 = a5;
  unsigned int v8 = llvm::dwarf::AttributeVersion(a3);
  a5 = v10;
  a4 = v11;
  LOWORD(a3) = v12;
  unsigned int v9 = v8;
  __int16 v5 = a2;
  uint64_t result = v14;
  if (v9 <= v7)
  {
LABEL_3:
    uint64_t v6 = *a5;
    int v15 = 6;
    __int16 v16 = a3;
    __int16 v17 = a4;
    uint64_t v18 = v6;
    return sub_1CD298EC8(v5, result + 80, &v15);
  }
  return result;
}

unint64_t sub_1CD2B2BF0(unint64_t a1, unint64_t a2, int a3, unint64_t a4)
{
  unint64_t v29 = a4;
  unint64_t v4 = a2;
  while (1)
  {
    unsigned int v5 = *(unsigned __int16 *)(v4 + 28) - 17;
    BOOL v6 = v5 > 0x39;
    uint64_t v7 = (1 << v5) & 0x201000000000001;
    if (!v6 && v7 != 0) {
      break;
    }
    unint64_t v10 = 0;
    uint64_t v9 = *(void *)(v4 + 40);
    if ((v9 & 4) == 0)
    {
      unint64_t v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if (v4) {
        continue;
      }
    }
    goto LABEL_9;
  }
  unint64_t v10 = *(void *)(v4 + 40) & ((uint64_t)(*(void *)(v4 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
LABEL_9:
  if (a4)
  {
    while (1)
    {
      unsigned int v11 = *(unsigned __int16 *)(a4 + 28) - 17;
      BOOL v6 = v11 > 0x39;
      uint64_t v12 = (1 << v11) & 0x201000000000001;
      if (!v6 && v12 != 0) {
        break;
      }
      unint64_t v15 = 0;
      uint64_t v14 = *(void *)(a4 + 40);
      if ((v14 & 4) == 0)
      {
        a4 = v14 & 0xFFFFFFFFFFFFFFF8;
        if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0) {
          continue;
        }
      }
      goto LABEL_17;
    }
    unint64_t v15 = *(void *)(a4 + 40) & ((uint64_t)(*(void *)(a4 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v15 = 0;
  }
LABEL_17:
  if (!v10)
  {
    unint64_t v19 = a1 + 8;
    while (1)
    {
      unsigned int v20 = *(unsigned __int16 *)(v19 + 28) - 17;
      BOOL v6 = v20 > 0x39;
      uint64_t v21 = (1 << v20) & 0x201000000000001;
      if (!v6 && v21 != 0) {
        break;
      }
      unint64_t v10 = 0;
      uint64_t v23 = *(void *)(v19 + 40);
      if ((v23 & 4) == 0)
      {
        unint64_t v19 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (v19) {
          continue;
        }
      }
      goto LABEL_18;
    }
    unint64_t v10 = *(void *)(v19 + 40) & ((uint64_t)(*(void *)(v19 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  }
LABEL_18:
  if (!v15)
  {
    unint64_t v28 = a1;
    int v27 = a3;
    unint64_t v25 = a2;
    unint64_t v26 = v10;
    unint64_t v24 = sub_1CD2913D4(a1 + 8);
    a2 = v25;
    unint64_t v10 = v26;
    a3 = v27;
    unint64_t v15 = v24;
    a1 = v28;
  }
  __int16 v16 = (unint64_t *)(a2 + 8);
  if (v15 == v10) {
    __int16 v17 = 19;
  }
  else {
    __int16 v17 = 16;
  }
  return sub_1CD2B2D68(a1, v16, a3, v17, &v29);
}

unint64_t sub_1CD2B2D68(unint64_t result, unint64_t *a2, int a3, __int16 a4, void *a5)
{
  unsigned int v5 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_3;
  }
  if ((*(_WORD *)(*(void *)(*(void *)(result + 176) + 248) + 1064) & 0x40) == 0) {
    goto LABEL_3;
  }
  unsigned int v6 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  unint64_t v13 = result;
  unint64_t v10 = a5;
  __int16 v11 = a4;
  __int16 v9 = a3;
  unsigned int v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  unsigned int v8 = v7;
  unsigned int v5 = a2;
  uint64_t result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    int v14 = 7;
    __int16 v15 = a3;
    __int16 v16 = a4;
    uint64_t v17 = *a5;
    return sub_1CD298EC8(v5, result + 80, &v14);
  }
  return result;
}

uint64_t sub_1CD2B2E44(uint64_t a1, __int16 a2, uint64_t a3, unsigned __int8 *a4)
{
  *(void *)(a1 + 160) += 48;
  uint64_t v8 = *(void *)(a1 + 80);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 48 > *(void *)(a1 + 88) - v8)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 104) >> 7;
    if (v12 >= 0x1E) {
      LOBYTE(v12) = 30;
    }
    uint64_t v13 = 4096 << v12;
    uint64_t v9 = (uint64_t)operator new(4096 << v12, (std::align_val_t)8uLL);
    unsigned int v14 = *(_DWORD *)(a1 + 104);
    if (v14 >= *(_DWORD *)(a1 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 96) + 8 * v14) = v9;
    ++*(_DWORD *)(a1 + 104);
    *(void *)(a1 + 88) = v9 + v13;
  }
  else
  {
    uint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 80) = v9 + 48;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = v9 | 4;
  *(_DWORD *)(v9 + 24) = -1;
  *(_WORD *)(v9 + 28) = a2;
  *(unsigned char *)(v9 + 30) = 0;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = a3;
  unint64_t v10 = *(uint64_t **)(a3 + 32);
  if (v10)
  {
    *(void *)uint64_t v9 = *v10;
    *unint64_t v10 = v9;
  }
  *(void *)(a3 + 32) = v9;
  if (a4) {
    sub_1CD2B2658((void *)a1, a4, v9);
  }
  return v9;
}

unint64_t sub_1CD2B2F80(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v8 = *(void **)(a1 + 176);
  int v9 = ((*(_DWORD *)(*(void *)(v8[31] + 248) + 4) << 13) + 57344) & 0xFF0000 | (*(unsigned __int8 *)(*(void *)(v8[34] + 8) + 1626) << 24) | *(unsigned __int16 *)(*(void *)(v8[34] + 8) + 1624);
  __int16 v16 = *(unsigned __int8 *)(v8[32] + 424);
  int v15 = v9;
  sub_1CD29277C(a4, (unsigned int *)&v15);
  unint64_t v10 = *(uint64_t **)(a1 + 272);
  if ((unint64_t)v10 >= *(void *)(a1 + 280))
  {
    __int16 v11 = sub_1CBC13470((void **)(a1 + 264), &v17);
    uint64_t v4 = v17;
  }
  else
  {
    *unint64_t v10 = v4;
    __int16 v11 = v10 + 1;
  }
  *(void *)(a1 + 272) = v11;
  if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8) + 1624) <= 3u)
  {
    unsigned int v14 = *(_DWORD *)(v4 + 8);
    if (v14 >= 0x100)
    {
      if (v14 < 0x10000) {
        __int16 v12 = 3;
      }
      else {
        __int16 v12 = 4;
      }
    }
    else
    {
      __int16 v12 = 10;
    }
  }
  else
  {
    __int16 v12 = 24;
  }
  return sub_1CD2B3090(a1, (unint64_t *)(a2 + 8), a3, v12, &v17);
}

unint64_t sub_1CD2B3090(unint64_t result, unint64_t *a2, int a3, __int16 a4, void *a5)
{
  unsigned int v5 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_3;
  }
  if ((*(_WORD *)(*(void *)(*(void *)(result + 176) + 248) + 1064) & 0x40) == 0) {
    goto LABEL_3;
  }
  unsigned int v7 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  unint64_t v14 = result;
  __int16 v11 = a4;
  __int16 v12 = a3;
  unint64_t v10 = a5;
  unsigned int v8 = llvm::dwarf::AttributeVersion(a3);
  a5 = v10;
  a4 = v11;
  LOWORD(a3) = v12;
  unsigned int v9 = v8;
  unsigned int v5 = a2;
  uint64_t result = v14;
  if (v9 <= v7)
  {
LABEL_3:
    uint64_t v6 = *a5;
    int v15 = 9;
    __int16 v16 = a3;
    __int16 v17 = a4;
    uint64_t v18 = v6;
    return sub_1CD298EC8(v5, result + 80, &v15);
  }
  return result;
}

unint64_t sub_1CD2B3164(unint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = result;
    unsigned int v7 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 64))(result, a4);
    unsigned int v8 = (unint64_t *)(a2 + 8);
    if (v7 < 0x10000) {
      __int16 v9 = 5;
    }
    else {
      __int16 v9 = 6;
    }
    if (v7 >= 0x100) {
      __int16 v10 = v9;
    }
    else {
      __int16 v10 = 11;
    }
    uint64_t v13 = v7;
    sub_1CD2938A0(v6, v8, 58, v10, &v13);
    if (a3 < 0x10000) {
      __int16 v11 = 5;
    }
    else {
      __int16 v11 = 6;
    }
    if (a3 >= 0x100) {
      __int16 v12 = v11;
    }
    else {
      __int16 v12 = 11;
    }
    uint64_t v13 = a3;
    return sub_1CD2938A0(v6, v8, 59, v12, &v13);
  }
  return result;
}

unint64_t sub_1CD2B3238(unint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)a3 + 2);
  if (v4 > 0x40)
  {
    uint64_t v9 = a1 + 80;
    __int16 v11 = a3;
    uint64_t v12 = sub_1CB906F34((uint64_t *)(a1 + 80), 16, 3);
    *(void *)uint64_t v12 = 0;
    *(_DWORD *)(v12 + 8) = 0;
    unsigned int v13 = *((_DWORD *)v11 + 2);
    if (v13 >= 0x41) {
      __int16 v11 = (uint64_t *)*v11;
    }
    uint64_t v27 = a1;
    unint64_t v14 = (unsigned __int8 *)sub_1CD27A518(*(void *)(a1 + 176));
    if (v13 >= 8)
    {
      unsigned int v18 = 0;
      unsigned int v19 = v13 >> 3;
      int v20 = *v14;
      int v21 = v19 - 1;
      if (v19 <= 1) {
        int v22 = 1;
      }
      else {
        int v22 = v19;
      }
      do
      {
        if (v20)
        {
          char v23 = v19 + ~(_BYTE)v18;
          int v24 = v21 + 7;
          if (v21 >= 0) {
            int v24 = v21;
          }
          uint64_t v25 = (uint64_t)v24 >> 3;
        }
        else
        {
          uint64_t v25 = v18 >> 3;
          char v23 = v18;
        }
        uint64_t v26 = ((unint64_t)v11[v25] >> (8 * (v23 & 7u)));
        v29[0] = 0xB000000000001;
        v29[1] = v26;
        sub_1CD298EC8((unint64_t *)v12, v9, (int *)v29);
        ++v18;
        --v21;
      }
      while (v22 != v18);
    }
    unsigned int v15 = *(_DWORD *)(v12 + 8);
    if (v15 < 0x10000) {
      __int16 v16 = 3;
    }
    else {
      __int16 v16 = 4;
    }
    if (v15 >= 0x100) {
      __int16 v17 = v16;
    }
    else {
      __int16 v17 = 10;
    }
    return sub_1CD8AEC28(v27, a2, 28, v17, v12);
  }
  else
  {
    uint64_t v5 = *a3 << -(char)v4 >> -(char)v4;
    if (a4) {
      uint64_t v5 = *a3;
    }
    unint64_t v6 = (unint64_t *)(a2 + 8);
    v29[0] = v5;
    if (a4) {
      __int16 v7 = 15;
    }
    else {
      __int16 v7 = 13;
    }
    return sub_1CD2938A0(a1, v6, 28, v7, v29);
  }
}

uint64_t *sub_1CD2B33E8(uint64_t *result, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (a4)
  {
    unsigned int v4 = a3 + 1;
    BOOL v5 = *a3 == 1;
    if (*a3 != 1) {
      unsigned int v4 = a3;
    }
    if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(result[24] + 8) + 272) + 8) + 1624) <= 3u) {
      int v6 = 8199;
    }
    else {
      int v6 = 110;
    }
    return sub_1CD2B2780(result, a2, v6, v4, a4 - v5);
  }
  return result;
}

unint64_t sub_1CD2B3434(unint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v5 = (uint64_t *)result;
  if (a3) {
    int v6 = (uint64_t *)(a3 - 8 * *(unsigned int *)(a3 + 8));
  }
  else {
    int v6 = 0;
  }
  while (v6 != (uint64_t *)a3)
  {
    uint64_t v7 = *v6;
    int v8 = *(unsigned __int8 *)*v6;
    if (v8 == 22)
    {
      uint64_t result = sub_1CD8AEE9C(v5, a2, v7);
    }
    else if (v8 == 23)
    {
      uint64_t result = (unint64_t)sub_1CD8AEFAC(v5, a2, v7);
    }
    ++v6;
  }
  return result;
}

unint64_t sub_1CD2B34BC(unint64_t result, uint64_t a2, char a3)
{
  int v3 = a3 & 3;
  switch(v3)
  {
    case 1:
      unsigned int v4 = (unint64_t *)(a2 + 8);
      uint64_t v5 = 3;
LABEL_6:
      uint64_t v6 = v5;
      return sub_1CD2938A0(result, v4, 50, 11, &v6);
    case 3:
      unsigned int v4 = (unint64_t *)(a2 + 8);
      uint64_t v5 = 1;
      goto LABEL_6;
    case 2:
      unsigned int v4 = (unint64_t *)(a2 + 8);
      uint64_t v5 = 2;
      goto LABEL_6;
  }
  return result;
}

uint64_t sub_1CD2B352C(uint64_t *a1, unsigned __int8 *a2)
{
  if (!a2) {
    return (uint64_t)(a1 + 1);
  }
  int v2 = *a2;
  if (v2 == 15) {
    return (uint64_t)(a1 + 1);
  }
  switch(*a2)
  {
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
      goto LABEL_8;
    case 0xFu:
    case 0x10u:
    case 0x12u:
    case 0x13u:
      goto LABEL_7;
    case 0x11u:
      return sub_1CD2B37E8(a1, (uint64_t)a2, 0);
    case 0x14u:
      return sub_1CD2B36B4(a1, (uint64_t)a2);
    case 0x15u:
      return sub_1CD2B3910(a1, (uint64_t)a2);
    default:
      if (v2 == 33) {
LABEL_8:
      }
        uint64_t result = sub_1CD2B35BC(a1);
      else {
LABEL_7:
      }
        uint64_t result = sub_1CD2B25F0(a1, a2);
      break;
  }
  return result;
}

uint64_t sub_1CD2B35BC(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 2);
    if (v4 != 71) {
      break;
    }
    if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[24] + 8) + 272) + 8) + 1624) >= 5u) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v2 = *(void *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 24);
    if (!v2) {
      return 0;
    }
  }
  if (v4 == 55 && *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[24] + 8) + 272) + 8) + 1624) <= 2u) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v5 = *(unsigned __int8 **)(v2 - 8 * *(unsigned int *)(v2 + 8) + 8);
  uint64_t v6 = sub_1CD2B352C(a1, v5);
  uint64_t result = sub_1CD2B25F0(a1, (unsigned __int8 *)v2);
  if (!result)
  {
    int v8 = (uint64_t *)sub_1CD2913D4(v6);
    return sub_1CD2B4460(v8, v5, v6, (unsigned __int8 *)v2);
  }
  return result;
}

uint64_t sub_1CD2B36B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1CD2B352C(a1, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  uint64_t v5 = sub_1CD2B25F0(a1, (unsigned __int8 *)a2);
  if (!v5)
  {
    uint64_t v5 = sub_1CD2B2E44((uint64_t)a1, 57, v4, (unsigned __int8 *)a2);
    uint64_t v7 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v7 && (v8 = *(size_t **)(v7 + 8), (size_t v9 = *v8) != 0))
    {
      __int16 v10 = (unsigned __int8 *)(v8 + 3);
      sub_1CD2B2780(a1, v5, 3, v8 + 3, *v8);
    }
    else
    {
      __int16 v10 = "(anonymous namespace)";
      size_t v9 = 21;
    }
    sub_1CD8A8DD8(a1[24], a1[9], v10, v9, v5);
    (*(void (**)(uint64_t *, unsigned __int8 *, size_t, uint64_t, void))(*a1 + 24))(a1, v10, v9, v5, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
    if (*(unsigned char *)(a2 + 24)) {
      sub_1CD2B26C0((unint64_t)a1, v5, 137);
    }
  }
  return v5;
}

uint64_t sub_1CD2B37E8(void *a1, uint64_t a2, int a3)
{
  char v3 = a3;
  if (a3) {
    uint64_t v6 = (uint64_t)(a1 + 1);
  }
  else {
    uint64_t v6 = sub_1CD2B352C(a1, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  }
  uint64_t v7 = sub_1CD2B25F0(a1, (unsigned __int8 *)a2);
  if (v7) {
    return v7;
  }
  if (*(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48) && (v3 & 1) == 0)
  {
    uint64_t v6 = (uint64_t)(a1 + 1);
    sub_1CD2B37E8(a1);
  }
  uint64_t v8 = sub_1CD2B2E44((uint64_t)a1, 46, v6, (unsigned __int8 *)a2);
  uint64_t v9 = v8;
  if ((*(unsigned char *)(a2 + 44) & 8) == 0)
  {
    unint64_t v11 = v8;
    while (1)
    {
      unsigned int v12 = *(unsigned __int16 *)(v11 + 28) - 17;
      BOOL v13 = v12 > 0x39;
      uint64_t v14 = (1 << v12) & 0x201000000000001;
      if (!v13 && v14 != 0) {
        break;
      }
      unint64_t v17 = 0;
      uint64_t v16 = *(void *)(v11 + 40);
      if ((v16 & 4) == 0)
      {
        unint64_t v11 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v11) {
          continue;
        }
      }
      goto LABEL_18;
    }
    unint64_t v17 = *(void *)(v11 + 40) & ((uint64_t)(*(void *)(v11 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
LABEL_18:
    sub_1CD2B4EB0(v17, a2, v9, 0);
  }
  return v9;
}

uint64_t sub_1CD2B3910(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1CD2B352C(a1, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  uint64_t v5 = sub_1CD2B25F0(a1, (unsigned __int8 *)a2);
  if (!v5)
  {
    uint64_t v5 = sub_1CD2B2E44((uint64_t)a1, 30, v4, (unsigned __int8 *)a2);
    uint64_t v7 = *(unsigned int *)(a2 + 8);
    uint64_t v8 = -v7;
    uint64_t v9 = *(void *)(a2 - 8 * v7 + 16);
    if (v9)
    {
      __int16 v10 = *(size_t **)(v9 + 8);
      if (*v10)
      {
        sub_1CD2B2780(a1, v5, 3, v10 + 3, *v10);
        uint64_t v11 = a2 - 8 * *(unsigned int *)(a2 + 8);
        uint64_t v12 = *(void *)(v11 + 16);
        if (v12)
        {
          BOOL v13 = *(uint64_t **)(v12 + 8);
          uint64_t v16 = *v13;
          uint64_t v14 = v13 + 3;
          uint64_t v15 = v16;
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v14 = 0;
        }
        (*(void (**)(uint64_t *, void *, uint64_t, uint64_t, void))(*a1 + 24))(a1, v14, v15, v5, *(void *)(v11 + 8));
        uint64_t v8 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
    }
    uint64_t v17 = *(void *)(a2 + 8 * v8 + 24);
    if (v17)
    {
      int v24 = *(size_t **)(v17 + 8);
      if (*v24)
      {
        sub_1CD2B2780(a1, v5, 15873, v24 + 3, *v24);
        uint64_t v8 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
    }
    uint64_t v18 = *(void *)(a2 + 8 * v8 + 32);
    if (v18)
    {
      unsigned int v19 = *(size_t **)(v18 + 8);
      if (*v19)
      {
        sub_1CD2B2780(a1, v5, 15872, v19 + 3, *v19);
        uint64_t v8 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
    }
    uint64_t v20 = *(void *)(a2 + 8 * v8 + 40);
    if (v20)
    {
      int v21 = *(size_t **)(v20 + 8);
      if (*v21) {
        sub_1CD2B2780(a1, v5, 15879, v21 + 3, *v21);
      }
    }
    uint64_t v22 = a2;
    if (*(unsigned char *)a2 == 15 || (uint64_t v22 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
    {
      unsigned int v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, v22);
      if (v25 < 0x10000) {
        __int16 v26 = 5;
      }
      else {
        __int16 v26 = 6;
      }
      if (v25 >= 0x100) {
        __int16 v27 = v26;
      }
      else {
        __int16 v27 = 11;
      }
      uint64_t v30 = v25;
      sub_1CD2938A0((unint64_t)a1, (unint64_t *)(v5 + 8), 58, v27, &v30);
    }
    unsigned int v23 = *(_DWORD *)(a2 + 24);
    if (v23)
    {
      if (v23 < 0x10000) {
        __int16 v28 = 5;
      }
      else {
        __int16 v28 = 6;
      }
      if (v23 >= 0x100) {
        __int16 v29 = v28;
      }
      else {
        __int16 v29 = 11;
      }
      uint64_t v30 = *(unsigned int *)(a2 + 24);
      sub_1CD2938A0((unint64_t)a1, (unint64_t *)(v5 + 8), 59, v29, &v30);
    }
    if (*(unsigned char *)(a2 + 28)) {
      sub_1CD2B26C0((unint64_t)a1, v5, 60);
    }
  }
  return v5;
}

unint64_t sub_1CD2B3B8C(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a3 - 8 * *(unsigned int *)(a3 + 8));
  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t v8 = *(size_t **)(v7 + 8);
    size_t v11 = *v8;
    uint64_t v9 = v8 + 3;
    size_t v10 = v11;
  }
  else
  {
    size_t v10 = 0;
    uint64_t v9 = 0;
  }
  unint64_t v12 = *(void *)(a3 + 32);
  uint64_t v13 = *(unsigned __int16 *)(a2 + 28);
  if (v13 > 0x33) {
    goto LABEL_97;
  }
  if (((1 << v13) & 0x8080000880004) == 0)
  {
    if (v13 == 4)
    {
      sub_1CD2B4AC4((uint64_t)a1, a2, a3);
      if (!v10) {
        goto LABEL_99;
      }
      goto LABEL_98;
    }
    if (v13 == 1)
    {
      sub_1CD8AFAEC(a1, a2, a3);
      if (!v10) {
        goto LABEL_99;
      }
      goto LABEL_98;
    }
    goto LABEL_97;
  }
  size_t v73 = v10;
  if (v13 == 51)
  {
    uint64_t v14 = v6[8];
    if (v14)
    {
      unint64_t v15 = sub_1CD8B02FC(a1, a2, v6[8]);
      sub_1CD2B2BF0((unint64_t)a1, a2, 21, v15);
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (v13 <= 0x17 && ((1 << v13) & 0x880004) != 0)
    {
      sub_1CD2B3434((unint64_t)a1, a2, v6[6]);
      uint64_t v14 = 0;
    }
  }
  unint64_t v74 = v12;
  uint64_t v16 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 32);
  if (v16) {
    uint64_t v17 = (uint64_t *)(v16 - 8 * *(unsigned int *)(v16 + 8));
  }
  else {
    uint64_t v17 = 0;
  }
  while (v17 != (uint64_t *)v16)
  {
    uint64_t v18 = (unsigned __int8 *)*v17;
    if (*v17)
    {
      unsigned int v19 = *v18;
      if (v19 > 0x10)
      {
        if (v19 == 27)
        {
          uint64_t v26 = sub_1CD2B2E44((uint64_t)a1, *((_WORD *)v18 + 1), a2, 0);
          uint64_t v27 = *(void *)&v18[-8 * *((unsigned int *)v18 + 2)];
          if (v27)
          {
            __int16 v28 = *(size_t **)(v27 + 8);
            size_t v31 = *v28;
            __int16 v29 = v28 + 3;
            size_t v30 = v31;
          }
          else
          {
            size_t v30 = 0;
            __int16 v29 = 0;
          }
          sub_1CD2B2780(a1, v26, 16360, v29, v30);
          uint64_t v34 = *((unsigned int *)v18 + 2);
          if (*(void *)&v18[-8 * v34 + 32])
          {
            unint64_t v35 = sub_1CD2B35BC(a1);
            sub_1CD2B2BF0((unint64_t)a1, v26, 73, v35);
            uint64_t v34 = *((unsigned int *)v18 + 2);
          }
          sub_1CD2B3164((unint64_t)a1, v26, *((_DWORD *)v18 + 6), *(void *)&v18[-8 * v34 + 8]);
          uint64_t v36 = *((unsigned int *)v18 + 2);
          uint64_t v37 = -v36;
          uint64_t v38 = *(void *)&v18[-8 * v36 + 16];
          if (v38)
          {
            uint64_t v39 = *(size_t **)(v38 + 8);
            if (*v39)
            {
              sub_1CD2B2780(a1, v26, 16361, v39 + 3, *v39);
              uint64_t v37 = -(uint64_t)*((unsigned int *)v18 + 2);
            }
          }
          uint64_t v40 = *(void *)&v18[8 * v37 + 24];
          if (v40)
          {
            uint64_t v41 = *(size_t **)(v40 + 8);
            if (*v41) {
              sub_1CD2B2780(a1, v26, 16362, v41 + 3, *v41);
            }
          }
          unsigned int v42 = *((_DWORD *)v18 + 7);
          if (v42)
          {
            if (v42 < 0x10000) {
              __int16 v43 = 5;
            }
            else {
              __int16 v43 = 6;
            }
            if (v42 >= 0x100) {
              __int16 v44 = v43;
            }
            else {
              __int16 v44 = 11;
            }
            unint64_t v75 = *((unsigned int *)v18 + 7);
            sub_1CD2938A0((unint64_t)a1, (unint64_t *)(v26 + 8), 16363, v44, &v75);
          }
          goto LABEL_52;
        }
        if (v19 != 17) {
          goto LABEL_29;
        }
        sub_1CD2B37E8(a1, *v17, 0);
      }
      else
      {
        if (v19 != 12)
        {
          if (v19 == 13)
          {
            if (*((_WORD *)v18 + 1) == 51)
            {
              uint64_t v20 = sub_1CD2B2E44((uint64_t)a1, 51, a2, 0);
              sub_1CD2B3B8C(a1, v20, v18);
            }
            goto LABEL_52;
          }
LABEL_29:
          if (v13 != 43) {
            goto LABEL_52;
          }
          uint64_t v32 = sub_1CD2B25F0(a1, (unsigned __int8 *)*v17);
          if (!v32) {
            goto LABEL_52;
          }
          unint64_t v33 = v32;
          unint64_t v24 = sub_1CD2B2E44((uint64_t)a1, 44, a2, 0);
          unint64_t v23 = (unint64_t)a1;
          int v25 = 68;
          unint64_t v22 = v33;
LABEL_32:
          sub_1CD2B2BF0(v23, v24, v25, v22);
          goto LABEL_52;
        }
        if (*((_WORD *)v18 + 1) == 42)
        {
          uint64_t v21 = sub_1CD2B2E44((uint64_t)a1, 42, a2, 0);
          unint64_t v22 = sub_1CD2B35BC(a1);
          unint64_t v23 = (unint64_t)a1;
          unint64_t v24 = v21;
          int v25 = 65;
          goto LABEL_32;
        }
        if ((v18[29] & 0x10) == 0)
        {
          uint64_t v45 = a1;
          if (v13 == 51)
          {
            uint64_t v46 = sub_1CD2B2E44((uint64_t)a1, 25, a2, 0);
            uint64_t v47 = *(void *)&v18[-8 * *((unsigned int *)v18 + 2) + 32];
            if (!v47) {
              goto LABEL_75;
            }
            uint64_t v48 = *(void *)(v47 + 128);
            if (!v48 || *(unsigned char *)(v48 + 16) != 16) {
              goto LABEL_75;
            }
            uint64_t v72 = v46;
            int v49 = sub_1CD28F7C0(*(void *)(v14 + 24 - 8 * *(unsigned int *)(v14 + 8)));
            uint64_t v50 = (unint64_t *)(v48 + 24);
            unsigned int v51 = *(_DWORD *)(v48 + 32);
            if (v49)
            {
              if (v51 >= 0x41) {
                uint64_t v50 = (unint64_t *)*v50;
              }
              unint64_t v52 = *v50;
              if (v52 >= 0x100)
              {
                if (v52 >= 0x10000)
                {
                  if (HIDWORD(v52)) {
                    __int16 v53 = 7;
                  }
                  else {
                    __int16 v53 = 6;
                  }
                }
                else
                {
                  __int16 v53 = 5;
                }
LABEL_74:
                unint64_t v75 = v52;
                sub_1CD2938A0((unint64_t)a1, (unint64_t *)(v72 + 8), 22, v53, &v75);
                uint64_t v46 = v72;
LABEL_75:
                uint64_t v45 = a1;
LABEL_76:
                sub_1CD8B02FC(v45, v46, (uint64_t)v18);
                goto LABEL_52;
              }
            }
            else
            {
              if (v51 > 0x40) {
                unint64_t v52 = *(void *)*v50;
              }
              else {
                unint64_t v52 = (uint64_t)(*v50 << -(char)v51) >> -(char)v51;
              }
              if (v52 != (char)v52)
              {
                __int16 v53 = 7;
                goto LABEL_74;
              }
            }
            __int16 v53 = 11;
            goto LABEL_74;
          }
          uint64_t v46 = a2;
          goto LABEL_76;
        }
        sub_1CD2B4CC0(a1, *v17);
      }
    }
LABEL_52:
    ++v17;
  }
  int v54 = *(_DWORD *)(a3 + 28);
  if ((v54 & 8) != 0)
  {
    sub_1CD2B26C0((unint64_t)a1, a2, 16356);
    int v54 = *(_DWORD *)(a3 + 28);
  }
  size_t v10 = v73;
  unint64_t v12 = v74;
  if ((v54 & 0x8000) != 0) {
    sub_1CD2B26C0((unint64_t)a1, a2, 137);
  }
  if (*(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 40))
  {
    unint64_t v55 = sub_1CD2B35BC(a1);
    sub_1CD2B2BF0((unint64_t)a1, a2, 29, v55);
  }
  if ((*(unsigned char *)(a3 + 29) & 2) != 0) {
    sub_1CD2B26C0((unint64_t)a1, a2, 16364);
  }
  if ((*(_WORD *)(*(void *)(a1[22] + 248) + 1064) & 0x40) != 0
    && *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[24] + 8) + 272) + 8) + 1624) < 5u
    || (unsigned int v56 = *(_DWORD *)(a3 + 28), (v56 & 0xC00000) == 0))
  {
LABEL_97:
    if (!v10) {
      goto LABEL_99;
    }
LABEL_98:
    sub_1CD2B2780(a1, a2, 3, v9, v10);
    goto LABEL_99;
  }
  if ((v56 & 0x400000) != 0) {
    uint64_t v57 = 5;
  }
  else {
    uint64_t v57 = (v56 >> 21) & 4;
  }
  unint64_t v75 = v57;
  sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 54, 11, &v75);
  if (v73) {
    goto LABEL_98;
  }
LABEL_99:
  uint64_t v58 = *(unsigned int *)(a3 + 8);
  if (*(_DWORD *)(a3 + 52) == 30)
  {
    uint64_t v59 = *(void *)(a3 - 8 * v58 + 56);
    if (v59)
    {
      sub_1CD2B2780(a1, a2, 110, (void *)(*(void *)(v59 + 8) + 24), **(void **)(v59 + 8));
      LODWORD(v58) = *(_DWORD *)(a3 + 8);
    }
  }
  unint64_t result = sub_1CD2B48E8((uint64_t)a1, a2, *(void *)(a3 - 8 * v58 + 104));
  if (v13 <= 0x17 && ((1 << v13) & 0x880014) != 0)
  {
    int v61 = *(_DWORD *)(a3 + 28);
    if (v12 >= 8)
    {
      if (v13 != 4 && (v61 & 4) != 0) {
        goto LABEL_118;
      }
      int64_t v62 = (unint64_t *)(a2 + 8);
      if (v12 >= 0x800)
      {
        if (v12 >= 0x80000)
        {
          if (v12 >> 35) {
            __int16 v65 = 7;
          }
          else {
            __int16 v65 = 6;
          }
        }
        else
        {
          __int16 v65 = 5;
        }
      }
      else
      {
        __int16 v65 = 11;
      }
      unint64_t v75 = v12 >> 3;
      __int16 v64 = v65;
      unint64_t v63 = (unint64_t)a1;
    }
    else
    {
      if ((v61 & 4) != 0)
      {
LABEL_118:
        int v66 = *(_DWORD *)(a3 + 28);
        if ((v66 & 4) != 0)
        {
          sub_1CD2B26C0((unint64_t)a1, a2, 60);
          int v66 = *(_DWORD *)(a3 + 28);
        }
        unint64_t result = sub_1CD2B34BC((unint64_t)a1, a2, v66);
        if ((*(unsigned char *)(a3 + 28) & 4) == 0)
        {
          uint64_t v67 = a3;
          if (*(unsigned char *)a3 != 15) {
            uint64_t v67 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8));
          }
          unint64_t result = sub_1CD2B3164((unint64_t)a1, a2, *(_DWORD *)(a3 + 24), v67);
        }
        unsigned int v68 = *(_DWORD *)(a3 + 52);
        if (v68)
        {
          if (v68 < 0x10000) {
            __int16 v69 = 5;
          }
          else {
            __int16 v69 = 6;
          }
          if (v68 >= 0x100) {
            __int16 v70 = v69;
          }
          else {
            __int16 v70 = 11;
          }
          unint64_t v75 = *(unsigned int *)(a3 + 52);
          unint64_t result = sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 16358, v70, &v75);
        }
        unint64_t v71 = *(unsigned int *)(a3 + 48);
        if (v71 >= 8)
        {
          unint64_t v75 = v71 >> 3;
          return sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 136, 15, &v75);
        }
        return result;
      }
      int64_t v62 = (unint64_t *)(a2 + 8);
      unint64_t v75 = 0;
      unint64_t v63 = (unint64_t)a1;
      __int16 v64 = 11;
    }
    sub_1CD2938A0(v63, v62, 11, v64, &v75);
    goto LABEL_118;
  }
  return result;
}

void sub_1CD2B436C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  if (v4)
  {
    uint64_t v6 = *(void **)(v4 + 8);
    size_t v9 = *v6;
    uint64_t v7 = (unsigned __int8 *)(v6 + 3);
    size_t v8 = v9;
    if (v9)
    {
      if ((*(unsigned char *)(a3 + 28) & 4) == 0)
      {
        sub_1CD2A4700(a1[24], a1[9], a1[24] + 5320, v7, v8, a4);
        if (!a2 || (unsigned int v13 = *a2, v13 == 20) || v13 <= 0x1F && ((1 << v13) & 0x80018000) != 0)
        {
          uint64_t v14 = *(void (**)(uint64_t *, uint64_t, uint64_t, unsigned __int8 *))(*a1 + 32);
          v14(a1, a3, a4, a2);
        }
      }
    }
  }
}

uint64_t sub_1CD2B4460(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7 = sub_1CD2B2E44((uint64_t)a1, *((_WORD *)a4 + 1), a3, a4);
  sub_1CD2B436C(a1, a2, (uint64_t)a4, v7);
  unsigned int v8 = *a4;
  if (v8 <= 0xC)
  {
    if (v8 == 11)
    {
      sub_1CD8AF32C(a1, v7, (uint64_t)a4);
      return v7;
    }
    goto LABEL_7;
  }
  if (v8 == 13)
  {
    unint64_t v10 = a1[24];
    if (*(unsigned char *)(v10 + 3535) && (a4[28] & 4) == 0)
    {
      size_t v11 = &a4[-8 * *((unsigned int *)a4 + 2)];
      uint64_t v12 = *((void *)v11 + 7);
      if (*((void *)v11 + 2))
      {
        if (!v12)
        {
          (*(void (**)(uint64_t *, uint64_t, unsigned __int8 *))(*a1 + 72))(a1, v7, a4);
          return v7;
        }
        goto LABEL_16;
      }
      if (v12)
      {
LABEL_16:
        unint64_t v13 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
        sub_1CD8A898C(v10, v13, *(void *)(v12 + 8) + 24, **(void **)(v12 + 8), v7, (uint64_t)a4);
        return v7;
      }
    }
    sub_1CD2B3B8C(a1, v7, (uint64_t)a4);
    return v7;
  }
  if (v8 == 14)
  {
    sub_1CD8AF7F4((unint64_t)a1, v7, (uint64_t)a4);
    return v7;
  }
  if (v8 != 33)
  {
LABEL_7:
    sub_1CD2B45F8(a1, v7, (uint64_t)a4);
    return v7;
  }
  sub_1CD8AF450(a1, v7, (uint64_t)a4);
  return v7;
}

unint64_t sub_1CD2B45F8(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 - 8 * *(unsigned int *)(a3 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    unsigned int v8 = *(size_t **)(v7 + 8);
    size_t v11 = *v8;
    unint64_t v10 = v8 + 3;
    size_t v9 = v11;
  }
  else
  {
    size_t v9 = 0;
    unint64_t v10 = 0;
  }
  unint64_t v12 = *(void *)(a3 + 32);
  unsigned int v13 = *(unsigned __int16 *)(a2 + 28);
  if (*(void *)(v6 + 24))
  {
    unint64_t v14 = sub_1CD2B35BC(a1);
    sub_1CD2B2BF0((unint64_t)a1, a2, 73, v14);
  }
  if (v9) {
    sub_1CD2B2780(a1, a2, 3, v10, v9);
  }
  unint64_t result = sub_1CD2B48E8((uint64_t)a1, a2, *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 40));
  if (v13 == 22
    && *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[24] + 8) + 272) + 8) + 1624) >= 5u)
  {
    unint64_t v16 = *(unsigned int *)(a3 + 48);
    if (v16 >= 8)
    {
      unint64_t v20 = v16 >> 3;
      unint64_t result = sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 136, 15, &v20);
    }
  }
  if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v13), (int16x4_t)0x420010001F000FLL)) & 1) == 0 && v12 >= 8)
  {
    if (v12 >= 0x800)
    {
      if (v12 >= 0x80000)
      {
        if (v12 >> 35) {
          __int16 v17 = 7;
        }
        else {
          __int16 v17 = 6;
        }
      }
      else
      {
        __int16 v17 = 5;
      }
    }
    else
    {
      __int16 v17 = 11;
    }
    unint64_t v20 = v12 >> 3;
    unint64_t result = sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 11, v17, &v20);
  }
  if (v13 == 31)
  {
    unint64_t v18 = sub_1CD2B35BC(a1);
    unint64_t result = sub_1CD2B2BF0((unint64_t)a1, a2, 29, v18);
  }
  if ((*(unsigned char *)(a3 + 28) & 4) == 0)
  {
    uint64_t v19 = a3;
    if (*(unsigned char *)a3 != 15) {
      uint64_t v19 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8));
    }
    unint64_t result = sub_1CD2B3164((unint64_t)a1, a2, *(_DWORD *)(a3 + 24), v19);
  }
  if ((*(void *)(a3 + 52) & 0xFF00000000) != 0)
  {
    unint64_t v20 = *(void *)(a3 + 52);
    unint64_t result = sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 51, 6, &v20);
  }
  if (*(_WORD *)(a3 + 2) == 17152)
  {
    unint64_t v20 = *(_DWORD *)(a3 + 4) & 0xF;
    unint64_t result = sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 15876, 11, &v20);
    if (*(_WORD *)(a3 + 2) == 17152)
    {
      unint64_t result = sub_1CD2B26C0((unint64_t)a1, a2, 15877);
      if (*(_WORD *)(a3 + 2) == 17152)
      {
        unint64_t v20 = (unsigned __int16)((unint64_t)*(unsigned int *)(a3 + 4) >> 5);
        unint64_t result = sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a2 + 8), 15878, 5, &v20);
        if (*(_WORD *)(a3 + 2) == 17152)
        {
          if ((*(unsigned char *)(a3 + 6) & 0x20) == 0
            || (unint64_t result = sub_1CD2B26C0((unint64_t)a1, a2, 15880), *(_WORD *)(a3 + 2) == 17152))
          {
            if ((*(unsigned char *)(a3 + 6) & 0x40) != 0) {
              return sub_1CD2B26C0((unint64_t)a1, a2, 15881);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD2B48E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(unsigned int *)(a3 + 8);
    if (v3)
    {
      uint64_t v4 = a2;
      uint64_t v5 = -8 * v3;
      uint64_t v13 = a3;
      unint64_t v14 = (uint64_t *)result;
      do
      {
        uint64_t v6 = (uint64_t *)(*(void *)(a3 + v5) - 8 * *(unsigned int *)(*(void *)(a3 + v5) + 8));
        uint64_t v7 = *v6;
        unsigned int v8 = (uint64_t *)result;
        uint64_t v9 = sub_1CD2B2E44(result, 24576, v4, 0);
        sub_1CD2B2780(v8, v9, 3, (void *)(*(void *)(v7 + 8) + 24), **(void **)(v7 + 8));
        uint64_t v10 = v6[1];
        if (*(unsigned char *)v10 == 1)
        {
          UniqueInteger = (uint64_t *)llvm::Constant::getUniqueInteger(*(llvm::Constant **)(v10 + 128));
          sub_1CD2B3238((unint64_t)v14, v9, UniqueInteger, 1);
        }
        else if (!*(unsigned char *)v10)
        {
          sub_1CD2B2780(v14, v9, 28, (void *)(*(void *)(v10 + 8) + 24), **(void **)(v10 + 8));
        }
        v5 += 8;
        uint64_t v4 = a2;
        a3 = v13;
        unint64_t result = (uint64_t)v14;
      }
      while (v5);
    }
  }
  return result;
}

unint64_t sub_1CD2B49DC(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = (unsigned int *)(a3 + 8);
    uint64_t v3 = *(unsigned int *)(a3 + 8);
    if (v3 >= 2)
    {
      unint64_t v6 = result;
      uint64_t v7 = v3 - 1;
      uint64_t v8 = a3 + 8;
      do
      {
        uint64_t v9 = *(void *)(v8 - 8 * *v4);
        if (v9)
        {
          uint64_t v10 = sub_1CD2B2E44(v6, 5, a2, 0);
          unint64_t v11 = sub_1CD2B35BC(v6);
          unint64_t result = sub_1CD2B2BF0(v6, v10, 73, v11);
          if ((*(unsigned char *)(v9 + 28) & 0x40) != 0) {
            unint64_t result = sub_1CD2B26C0(v6, v10, 52);
          }
        }
        else
        {
          unint64_t result = sub_1CD2B2E44(v6, 24, a2, 0);
        }
        v8 += 8;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1CD2B4AC4(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)result;
  uint64_t v6 = a3 - 8 * *(unsigned int *)(a3 + 8);
  if (*(void *)(v6 + 24))
  {
    unint64_t result = sub_1CD28F7C0(*(void *)(v6 + 24));
    int v23 = result;
    if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v5[24] + 8) + 272) + 8) + 1624) >= 3u)
    {
      unint64_t v7 = sub_1CD2B35BC(v5);
      unint64_t result = sub_1CD2B2BF0((unint64_t)v5, a2, 73, v7);
      if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v5[24] + 8) + 272) + 8) + 1624) >= 4u
        && (*(unsigned char *)(a3 + 31) & 1) != 0)
      {
        unint64_t result = sub_1CD2B26C0((unint64_t)v5, a2, 109);
      }
    }
  }
  else
  {
    int v23 = 0;
  }
  uint64_t v8 = a3 - 8 * *(unsigned int *)(a3 + 8);
  uint64_t v9 = *(unsigned __int8 **)(v8 + 8);
  if (v9)
  {
    unsigned int v10 = *v9;
    BOOL v11 = v10 > 0x1F;
    unsigned int v12 = (0x80118000 >> v10) & 1;
    if (v11) {
      int v13 = 0;
    }
    else {
      int v13 = v12;
    }
  }
  else
  {
    int v13 = 1;
  }
  uint64_t v14 = *(void *)(v8 + 32);
  if (v14) {
    unint64_t v15 = (uint64_t *)(v14 - 8 * *(unsigned int *)(v14 + 8));
  }
  else {
    unint64_t v15 = 0;
  }
  while (v15 != (uint64_t *)v14)
  {
    uint64_t v16 = *v15;
    if (*v15 && *(unsigned char *)v16 == 10)
    {
      uint64_t v17 = sub_1CD2B2E44((uint64_t)v5, 40, a2, 0);
      uint64_t v18 = *(void *)(v16 - 8 * *(unsigned int *)(v16 + 8));
      if (v18)
      {
        uint64_t v19 = *(size_t **)(v18 + 8);
        size_t v22 = *v19;
        uint64_t v21 = v19 + 3;
        size_t v20 = v22;
      }
      else
      {
        size_t v20 = 0;
        uint64_t v21 = 0;
      }
      sub_1CD2B2780(v5, v17, 3, v21, v20);
      unint64_t result = sub_1CD2B3238((unint64_t)v5, v17, (uint64_t *)(v16 + 24), v23);
      if (v13) {
        unint64_t result = (*(uint64_t (**)(uint64_t *, void *, size_t, uint64_t, unsigned __int8 *))(*v5 + 24))(v5, v21, v20, v17, v9);
      }
    }
    ++v15;
  }
  return result;
}

uint64_t sub_1CD2B4CC0(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = sub_1CD2B352C(a1, *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  uint64_t v5 = sub_1CD2B25F0(a1, (unsigned __int8 *)a2);
  if (v5) {
    return v5;
  }
  uint64_t v6 = sub_1CD2B2E44((uint64_t)a1, *(_WORD *)(a2 + 2), v4, (unsigned __int8 *)a2);
  uint64_t v7 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  uint64_t v8 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  if (v7)
  {
    uint64_t v9 = *(size_t **)(v7 + 8);
    size_t v12 = *v9;
    unsigned int v10 = v9 + 3;
    size_t v11 = v12;
  }
  else
  {
    size_t v11 = 0;
    unsigned int v10 = 0;
  }
  sub_1CD2B2780(a1, v6, 3, v10, v11);
  unint64_t v13 = sub_1CD2B35BC(a1);
  sub_1CD2B2BF0((unint64_t)a1, v6, 73, v13);
  uint64_t v14 = a2;
  if (*(unsigned char *)a2 != 15) {
    uint64_t v14 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  }
  sub_1CD2B3164((unint64_t)a1, v6, *(_DWORD *)(a2 + 24), v14);
  sub_1CD2B26C0((unint64_t)a1, v6, 63);
  sub_1CD2B26C0((unint64_t)a1, v6, 60);
  sub_1CD2B34BC((unint64_t)a1, v6, *(_DWORD *)(a2 + 28));
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  uint64_t v16 = -v15;
  uint64_t v17 = *(void *)(a2 - 8 * v15 + 32);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 128);
    if (v18)
    {
      if (*(unsigned char *)(v18 + 16) == 16)
      {
        uint64_t v19 = (uint64_t *)(v18 + 24);
        int v20 = sub_1CD28F7C0(v8);
        sub_1CD2B3238((unint64_t)a1, v6, v19, v20);
        uint64_t v16 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
    }
  }
  uint64_t v21 = *(void *)(a2 + 8 * v16 + 32);
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 128);
    if (v22)
    {
      if (*(unsigned char *)(v22 + 16) == 17) {
        sub_1CD8AEDBC((unint64_t)a1, v6, v22);
      }
    }
  }
  unint64_t v23 = *(unsigned int *)(a2 + 48);
  if (v23 >= 8)
  {
    unint64_t v25 = v23 >> 3;
    sub_1CD2938A0((unint64_t)a1, (unint64_t *)(v6 + 8), 136, 15, &v25);
  }
  return v6;
}

unint64_t sub_1CD2B4EB0(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4 = a4;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (!*(unsigned char *)(*(void *)(a1 + 72) + 49))
    {
      LOBYTE(v8) = 1;
      goto LABEL_4;
    }
    uint64_t v23 = 0;
    unint64_t v8 = 0;
    uint64_t v14 = (unsigned int *)(a2 + 8);
  }
  else
  {
    uint64_t v14 = (unsigned int *)(a2 + 8);
    uint64_t v15 = a2 - 8 * *(unsigned int *)(a2 + 8);
    uint64_t v16 = *(void *)(v15 + 48);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 - 8 * *(unsigned int *)(v16 + 8) + 32);
      uint64_t v18 = *(void *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 24);
      if (v18)
      {
        uint64_t v19 = *(void *)(*(void *)(v15 + 32) - 8 * *(unsigned int *)(*(void *)(v15 + 32) + 8) + 24);
        uint64_t v20 = *(unsigned int *)(v18 + 8);
        if (v20 && v19 != 0)
        {
          uint64_t v55 = *(unsigned int *)(v19 + 8);
          if (v55)
          {
            uint64_t v56 = *(void *)(v19 - 8 * v55);
            if (v56)
            {
              if (*(void *)(v18 - 8 * v20) != v56)
              {
                unint64_t v57 = sub_1CD2B35BC(a1);
                sub_1CD2B2BF0(a1, a3, 73, v57);
              }
            }
          }
        }
      }
      unint64_t v8 = sub_1CD2B25F0((void *)a1, (unsigned __int8 *)v16);
      if (*(unsigned char *)(*(void *)(a1 + 192) + 3530)
        && (uint64_t v22 = *(void *)(v16 - 8 * *(unsigned int *)(v16 + 8) + 24)) != 0)
      {
        uint64_t v23 = **(void **)(v22 + 8);
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v39 = v16;
      if (*(unsigned char *)v16 != 15) {
        uint64_t v39 = *(void *)(v16 - 8 * *(unsigned int *)(v16 + 8));
      }
      int v40 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)a1 + 64))(a1, v39);
      uint64_t v41 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v41 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      unsigned int v42 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)a1 + 64))(a1, v41);
      if (v40 != v42)
      {
        if (v42 < 0x10000) {
          __int16 v43 = 5;
        }
        else {
          __int16 v43 = 6;
        }
        if (v42 >= 0x100) {
          __int16 v44 = v43;
        }
        else {
          __int16 v44 = 11;
        }
        uint64_t v72 = v42;
        sub_1CD2938A0(a1, (unint64_t *)(a3 + 8), 58, v44, &v72);
      }
      unsigned int v45 = *(_DWORD *)(a2 + 24);
      if (v45 != *(_DWORD *)(v16 + 24))
      {
        if (v45 < 0x10000) {
          __int16 v46 = 5;
        }
        else {
          __int16 v46 = 6;
        }
        if (v45 >= 0x100) {
          __int16 v47 = v46;
        }
        else {
          __int16 v47 = 11;
        }
        uint64_t v72 = *(unsigned int *)(a2 + 24);
        sub_1CD2938A0(a1, (unint64_t *)(a3 + 8), 59, v47, &v72);
      }
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v8 = 0;
    }
  }
  uint64_t v48 = *v14;
  if (v48 < 0xA) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = *(void *)(a2 - 8 * v48 + 72);
  }
  sub_1CD2B3434(a1, a3, v49);
  uint64_t v50 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  if (v50)
  {
    unsigned int v51 = *(void **)(v50 + 8);
    uint64_t v54 = *v51;
    __int16 v53 = v51 + 3;
    uint64_t v52 = v54;
  }
  else
  {
    uint64_t v52 = 0;
    __int16 v53 = 0;
  }
  if (!v23)
  {
    if (*(unsigned char *)(*(void *)(a1 + 192) + 3530)
      || (uint64_t v58 = (uint64_t *)(*(void *)(a1 + 200) + 384),
          uint64_t v72 = a2,
          uint64_t v70 = 0,
          sub_1CB915048(v58, &v72, &v70))
      && *(void *)(v70 + 8))
    {
      sub_1CD2B33E8((uint64_t *)a1, a3, v53, v52);
    }
  }
  if (v8) {
    return sub_1CD2B2BF0(a1, a3, 71, v8);
  }
LABEL_4:
  uint64_t v9 = *(unsigned int *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 - 8 * v9 + 16);
  if (v10)
  {
    size_t v11 = *(size_t **)(v10 + 8);
    if (*v11)
    {
      sub_1CD2B2780((uint64_t *)a1, a3, 3, v11 + 3, *v11);
      LODWORD(v9) = *(_DWORD *)(a2 + 8);
    }
  }
  if (v9 >= 0xC) {
    uint64_t v12 = *(void *)(a2 - 8 * v9 + 88);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t result = sub_1CD2B48E8(a1, a3, v12);
  if ((v8 & 1) == 0)
  {
    uint64_t v24 = a2;
    if (*(unsigned char *)a2 != 15) {
      uint64_t v24 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    }
    unint64_t result = sub_1CD2B3164(a1, a3, *(_DWORD *)(a2 + 24), v24);
  }
  if ((v4 & 1) == 0)
  {
    if (*(unsigned char *)(a2 + 41))
    {
      unsigned int v25 = *(unsigned __int16 *)(*(void *)(a1 + 72) + 24);
      BOOL v26 = v25 > 0x10;
      int v27 = (1 << v25) & 0x11002;
      if (!v26 && v27 != 0) {
        sub_1CD2B26C0(a1, a3, 39);
      }
    }
    if ((*(unsigned char *)(a2 + 45) & 8) != 0) {
      sub_1CD2B26C0(a1, a3, 16366);
    }
    uint64_t v29 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
    if (v29)
    {
      uint64_t v30 = *(void *)(v29 - 8 * *(unsigned int *)(v29 + 8) + 24);
      unint64_t v31 = *(unsigned __int8 *)(v29 + 52);
      if (v31 >= 2)
      {
        uint64_t v72 = v31;
        sub_1CD2938A0(a1, (unint64_t *)(a3 + 8), 54, 11, &v72);
      }
      if (v30)
      {
        uint64_t v32 = *(unsigned int *)(v30 + 8);
        if (v32)
        {
          if (*(void *)(v30 - 8 * v32))
          {
            unint64_t v59 = sub_1CD2B35BC(a1);
            sub_1CD2B2BF0(a1, a3, 73, v59);
          }
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    int v33 = *(_DWORD *)(a2 + 44);
    if ((v33 & 3) != 0)
    {
      uint64_t v72 = v33 & 3;
      sub_1CD2938A0(a1, (unint64_t *)(a3 + 8), 76, 11, &v72);
      if (*(_DWORD *)(a2 + 32) != -1)
      {
        uint64_t v60 = sub_1CB906F34((uint64_t *)(a1 + 80), 16, 3);
        *(void *)uint64_t v60 = 0;
        *(_DWORD *)(v60 + 8) = 0;
        uint64_t v72 = 0xB000000000001;
        uint64_t v73 = 16;
        sub_1CD298EC8((unint64_t *)v60, a1 + 80, (int *)&v72);
        uint64_t v61 = *(unsigned int *)(a2 + 32);
        uint64_t v72 = 0xF000000000001;
        uint64_t v73 = v61;
        sub_1CD298EC8((unint64_t *)v60, a1 + 80, (int *)&v72);
        sub_1CD2B2F80(a1, a3, 77, v60);
      }
      uint64_t v62 = *(unsigned int *)(a2 + 8);
      if (v62 < 9) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = *(void *)(a2 - 8 * v62 + 64);
      }
      uint64_t v70 = a3;
      uint64_t v71 = v63;
      sub_1CD4729F8((uint64_t)&v72, a1 + 288, &v70, &v71);
      int v33 = *(_DWORD *)(a2 + 44);
    }
    if ((v33 & 8) == 0)
    {
      sub_1CD2B26C0(a1, a3, 60);
      sub_1CD2B49DC(a1, a3, v30);
    }
    uint64_t v34 = *(unsigned int *)(a2 + 8);
    if (v34 >= 0xB)
    {
      uint64_t v64 = *(void *)(a2 - 8 * v34 + 80);
      if (v64) {
        uint64_t v65 = v64 - 8 * *(unsigned int *)(v64 + 8);
      }
      else {
        uint64_t v65 = 0;
      }
      while (v65 != v64)
      {
        v65 += 8;
        unint64_t v68 = sub_1CD2B2E44(a1, 49, a3, 0);
        unint64_t v69 = sub_1CD2B35BC(a1);
        sub_1CD2B2BF0(a1, v68, 73, v69);
      }
    }
    if ((*(unsigned char *)(a2 + 40) & 0x40) != 0) {
      sub_1CD2B26C0(a1, a3, 52);
    }
    if ((*(unsigned char *)(a2 + 44) & 4) == 0) {
      sub_1CD2B26C0(a1, a3, 63);
    }
    if (*(unsigned char *)(*(void *)(a1 + 192) + 3548))
    {
      if ((*(unsigned char *)(a2 + 44) & 0x10) != 0) {
        sub_1CD2B26C0(a1, a3, 16353);
      }
      unsigned int v35 = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 368))(*(void *)(a1 + 176));
      if (v35)
      {
        uint64_t v72 = v35;
        sub_1CD2938A0(a1, (unint64_t *)(a3 + 8), 16355, 12, &v72);
      }
    }
    int v36 = *(_DWORD *)(a2 + 40);
    if ((v36 & 0x2000) != 0)
    {
      sub_1CD2B26C0(a1, a3, 119);
      int v36 = *(_DWORD *)(a2 + 40);
    }
    if ((v36 & 0x4000) != 0)
    {
      sub_1CD2B26C0(a1, a3, 120);
      int v36 = *(_DWORD *)(a2 + 40);
    }
    if ((v36 & 0x100000) != 0)
    {
      sub_1CD2B26C0(a1, a3, 135);
      int v36 = *(_DWORD *)(a2 + 40);
    }
    unint64_t result = sub_1CD2B34BC(a1, a3, v36);
    if ((*(unsigned char *)(a2 + 40) & 0x80) != 0) {
      unint64_t result = sub_1CD2B26C0(a1, a3, 99);
    }
    int v37 = *(_DWORD *)(a2 + 44);
    if ((v37 & 0x100) != 0)
    {
      unint64_t result = sub_1CD2B26C0(a1, a3, 106);
      int v37 = *(_DWORD *)(a2 + 44);
    }
    if ((v37 & 0x20) != 0)
    {
      unint64_t result = sub_1CD2B26C0(a1, a3, 103);
      int v37 = *(_DWORD *)(a2 + 44);
    }
    if ((v37 & 0x40) != 0)
    {
      unint64_t result = sub_1CD2B26C0(a1, a3, 102);
      int v37 = *(_DWORD *)(a2 + 44);
    }
    if ((v37 & 0x80) != 0) {
      unint64_t result = sub_1CD2B26C0(a1, a3, 104);
    }
    uint64_t v38 = *(unsigned int *)(a2 + 8);
    if (v38 >= 0xD)
    {
      uint64_t v66 = *(void *)(a2 - 8 * v38 + 96);
      if (v66)
      {
        uint64_t v67 = *(size_t **)(v66 + 8);
        if (*v67) {
          unint64_t result = (unint64_t)sub_1CD2B2780((uint64_t *)a1, a3, 86, v67 + 3, *v67);
        }
      }
    }
    if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8) + 1624) >= 5u
      && (*(unsigned char *)(a2 + 45) & 2) != 0)
    {
      return sub_1CD2B26C0(a1, a3, 138);
    }
  }
  return result;
}

void sub_1CD2B5704(unint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a1;
  unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 6) == 2 && v6 != 0)
  {
    unint64_t v15 = sub_1CD2B25F0((void *)*a1, (unsigned __int8 *)(a3 & 0xFFFFFFFFFFFFFFF8));
    if (v15)
    {
      unint64_t v16 = a1[1];
      sub_1CD2B2BF0(v5, v16, a2, v15);
    }
    return;
  }
  if ((a3 & 6) != 4 || !v6)
  {
    if ((a3 & 6) != 0 || !v6) {
      return;
    }
    if (a2 == 34)
    {
      uint64_t v19 = *(void *)a1[2];
      if (v19 != -1)
      {
        unsigned int v20 = *(_DWORD *)(v6 + 32);
        uint64_t v21 = v20 > 0x40 ? **(void **)(v6 + 24) : (uint64_t)(*(void *)(v6 + 24) << -(char)v20) >> -(char)v20;
        if (v21 == v19) {
          return;
        }
      }
    }
    else if (a2 == 55)
    {
      unsigned int v17 = *(_DWORD *)(v6 + 32);
      if (v17 > 0x40) {
        unint64_t v18 = **(void **)(v6 + 24);
      }
      else {
        unint64_t v18 = (uint64_t)(*(void *)(v6 + 24) << -(char)v17) >> -(char)v17;
      }
      if (v18 == -1) {
        return;
      }
      uint64_t v22 = (unint64_t *)(a1[1] + 8);
      if (HIDWORD(v18)) {
        __int16 v23 = 7;
      }
      else {
        __int16 v23 = 6;
      }
      if (v18 >= 0x10000) {
        __int16 v24 = v23;
      }
      else {
        __int16 v24 = 5;
      }
      if (v18 >= 0x100) {
        __int16 v25 = v24;
      }
      else {
        __int16 v25 = 11;
      }
      unsigned int v35 = (void *)v18;
      __int16 v26 = v25;
      unint64_t v27 = v5;
      int v28 = 55;
LABEL_46:
      sub_1CD2938A0(v27, v22, v28, v26, &v35);
      return;
    }
    uint64_t v22 = (unint64_t *)(a1[1] + 8);
    unsigned int v29 = *(_DWORD *)(v6 + 32);
    if (v29 > 0x40) {
      uint64_t v30 = **(void **)(v6 + 24);
    }
    else {
      uint64_t v30 = (uint64_t)(*(void *)(v6 + 24) << -(char)v29) >> -(char)v29;
    }
    unsigned int v35 = (void *)v30;
    unint64_t v27 = v5;
    int v28 = a2;
    __int16 v26 = 13;
    goto LABEL_46;
  }
  *(void *)(v5 + 160) += 16;
  uint64_t v8 = *(void *)(v5 + 80);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 16 > *(void *)(v5 + 88) - v8)
  {
    unsigned int v31 = *(_DWORD *)(v5 + 104) >> 7;
    if (v31 >= 0x1E) {
      LOBYTE(v31) = 30;
    }
    uint64_t v32 = 4096 << v31;
    uint64_t v9 = (uint64_t)operator new(4096 << v31, (std::align_val_t)8uLL);
    unsigned int v33 = *(_DWORD *)(v5 + 104);
    if (v33 >= *(_DWORD *)(v5 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v5 + 96) + 8 * v33) = v9;
    ++*(_DWORD *)(v5 + 104);
    *(void *)(v5 + 88) = v9 + v32;
  }
  else
  {
    uint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v5 + 80) = v9 + 16;
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 8) = 0;
  uint64_t v10 = *(void *)(v5 + 176);
  uint64_t v11 = (*(uint64_t (**)(unint64_t))(*(void *)v5 + 56))(v5);
  char v12 = *(_WORD *)(*(void *)(*(void *)(v10 + 272) + 8) + 1624);
  char v36 = 0;
  uint64_t v37 = v11;
  uint64_t v38 = v40;
  uint64_t v39 = 0x200000000;
  v40[4] = 0;
  __int16 v43 = 0;
  uint64_t v44 = v10;
  uint64_t v45 = v9;
  uint64_t v46 = 0;
  int v47 = 0;
  char v48 = 0;
  __int16 v42 = ((v12 & 0xF) << 9) | 2;
  unsigned int v41 = 0;
  uint64_t v13 = *(void *)(v6 + 32);
  v34[0] = *(void *)(v6 + 24);
  v34[1] = v13;
  unsigned int v35 = &unk_1F264A1E8;
  sub_1CD2AF934((uint64_t)&v35, (llvm::DIExpression::ExprOperand *)v34);
  uint64_t v14 = a1[1];
  if (v41 >= 0x10000 && (_WORD)v41) {
    sub_1CD8AD320(&v35, (unsigned __int16)v41, HIWORD(v41));
  }
  sub_1CD2B2F80(v5, v14, a2, v45);
  unsigned int v35 = &unk_1F2649AF8;
  if (v38 != v40) {
    free(v38);
  }
}

void sub_1CD2B5AEC(unint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a1;
  unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 4) != 0 || !v6)
  {
    if (v6 && (a3 & 4) != 0)
    {
      uint64_t isConstant = llvm::DIExpression::isConstant((llvm::DIExpression *)(a3 & 0xFFFFFFFFFFFFFFF8));
      if ((isConstant & 0xFF00000000) == 0 || isConstant)
      {
        *(void *)(v5 + 160) += 16;
        uint64_t v12 = *(void *)(v5 + 80);
        if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 16 > *(void *)(v5 + 88) - v12)
        {
          unsigned int v19 = *(_DWORD *)(v5 + 104) >> 7;
          if (v19 >= 0x1E) {
            LOBYTE(v19) = 30;
          }
          uint64_t v20 = 4096 << v19;
          uint64_t v13 = (uint64_t)operator new(4096 << v19, (std::align_val_t)8uLL);
          unsigned int v21 = *(_DWORD *)(v5 + 104);
          if (v21 >= *(_DWORD *)(v5 + 108)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v5 + 96) + 8 * v21) = v13;
          ++*(_DWORD *)(v5 + 104);
          *(void *)(v5 + 88) = v13 + v20;
        }
        else
        {
          uint64_t v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v5 + 80) = v13 + 16;
        *(void *)uint64_t v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        uint64_t v14 = *(void *)(v5 + 176);
        uint64_t v15 = (*(uint64_t (**)(unint64_t))(*(void *)v5 + 56))(v5);
        char v16 = *(_WORD *)(*(void *)(*(void *)(v14 + 272) + 8) + 1624);
        char v24 = 0;
        uint64_t v25 = v15;
        __int16 v26 = v28;
        uint64_t v27 = 0x200000000;
        v28[4] = 0;
        __int16 v31 = 0;
        uint64_t v32 = v14;
        uint64_t v33 = v13;
        uint64_t v34 = 0;
        int v35 = 0;
        char v36 = 0;
        __int16 v30 = ((v16 & 0xF) << 9) | 2;
        unsigned int v29 = 0;
        uint64_t v17 = *(void *)(v6 + 32);
        v22[0] = *(void *)(v6 + 24);
        v22[1] = v17;
        __int16 v23 = &unk_1F264A1E8;
        sub_1CD2AF934((uint64_t)&v23, (llvm::DIExpression::ExprOperand *)v22);
        uint64_t v18 = a1[1];
        if (v29 >= 0x10000 && (_WORD)v29) {
          sub_1CD8AD320(&v23, (unsigned __int16)v29, HIWORD(v29));
        }
        sub_1CD2B2F80(v5, v18, a2, v33);
        __int16 v23 = &unk_1F2649AF8;
        if (v26 != v28) {
          free(v26);
        }
      }
      else if (a2 != 34 || (uint64_t v10 = *(void *)a1[2], v10 == -1) || *(void *)(*(void *)(v6 + 24) + 8) != v10)
      {
        uint64_t v11 = (unint64_t *)(a1[1] + 8);
        __int16 v23 = *(void **)(*(void *)(v6 + 24) + 8);
        sub_1CD2938A0(v5, v11, a2, 13, &v23);
      }
    }
  }
  else
  {
    unint64_t v7 = sub_1CD2B25F0((void *)*a1, (unsigned __int8 *)(a3 & 0xFFFFFFFFFFFFFFF8));
    if (v7)
    {
      unint64_t v8 = a1[1];
      sub_1CD2B2BF0(v5, v8, a2, v7);
    }
  }
}

unint64_t sub_1CD2B5E1C(unint64_t result)
{
  uint64_t v1 = *(void *)(result + 288);
  uint64_t v2 = *(unsigned int *)(result + 304);
  uint64_t v3 = (unint64_t *)(v1 + 16 * v2);
  if (*(_DWORD *)(result + 296))
  {
    if (v2)
    {
      uint64_t v6 = 16 * v2;
      char v4 = *(unint64_t **)(result + 288);
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        v6 -= 16;
        if (!v6) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      char v4 = *(unint64_t **)(result + 288);
    }
  }
  else
  {
LABEL_2:
    char v4 = (unint64_t *)(v1 + 16 * v2);
  }
  for (i = (unint64_t *)(v1 + 16 * v2); v4 != i; unint64_t result = v11)
  {
    unint64_t v11 = result;
    unint64_t v7 = v4;
    unint64_t v8 = (unsigned __int8 *)v4[1];
    if (v8)
    {
      unint64_t v9 = *v4;
      unint64_t v10 = sub_1CD2B25F0((void *)result, v8);
      if (v10) {
        sub_1CD2B2BF0(v11, v9, 29, v10);
      }
    }
    char v4 = v3;
    if (v7 + 2 != v3)
    {
      char v4 = v7 + 2;
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        if (v4 == v3)
        {
          char v4 = v3;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD2B5F24(void *a1, int a2)
{
  uint64_t v4 = a1[22];
  if (*(unsigned char *)(a1[24] + 3533))
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    v19[0] = "Length of Unit";
    __int16 v20 = 259;
    sub_1CD8A12C4(v4);
  }
  else
  {
    int v5 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    uint64_t v6 = "debug_info_dwo";
    if (!v5) {
      uint64_t v6 = "debug_info";
    }
    char v7 = 1;
    HIBYTE(v20) = 1;
    if (*v6)
    {
      v19[0] = v6;
      char v7 = 3;
    }
    LOBYTE(v20) = v7;
    uint64_t v17 = "Length of Unit";
    __int16 v18 = 259;
    a1[23] = (*(uint64_t (**)(void, void *, const char **))(**(void **)(v4 + 272) + 1256))(*(void *)(v4 + 272), v19, &v17);
  }
  uint64_t v8 = *(void *)(a1[22] + 272);
  v19[0] = "DWARF version number";
  __int16 v20 = 259;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 112))(v8, v19, 1);
  unsigned int v9 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[24] + 8) + 272) + 8) + 1624);
  (*(void (**)(void))(**(void **)(a1[22] + 272) + 520))();
  if (v9 >= 5)
  {
    uint64_t v15 = *(void *)(a1[22] + 272);
    v19[0] = "DWARF Unit Type";
    __int16 v20 = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v15 + 112))(v15, v19, 1);
    (*(void (**)(void))(**(void **)(a1[22] + 272) + 520))();
    uint64_t v16 = *(void *)(a1[22] + 272);
    v19[0] = "Address Size (in bytes)";
    __int16 v20 = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v16 + 112))(v16, v19, 1);
    (*(void (**)(void))(**(void **)(a1[22] + 272) + 520))();
  }
  uint64_t v10 = *(void *)(a1[22] + 272);
  v19[0] = "Offset Into Abbrev. Section";
  __int16 v20 = 259;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 112))(v10, v19, 1);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1[22] + 248) + 24))(*(void *)(a1[22] + 248));
  uint64_t v12 = a1[22];
  if (a2) {
    uint64_t result = sub_1CD8A1280(v12, 0);
  }
  else {
    uint64_t result = sub_1CD28B2B4(v12, *(llvm::MCSymbol **)(*(void *)(v11 + 72) + 8), 0);
  }
  if (v9 <= 4)
  {
    uint64_t v14 = *(void *)(a1[22] + 272);
    v19[0] = "Address Size (in bytes)";
    __int16 v20 = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v14 + 112))(v14, v19, 1);
    return (*(uint64_t (**)(void))(**(void **)(a1[22] + 272) + 520))();
  }
  return result;
}

unint64_t sub_1CD2B636C(unint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  unsigned int v9 = (unint64_t *)(a2 + 8);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8);
  if (*(unsigned __int16 *)(v10 + 1624) <= 3u)
  {
    if (*(unsigned char *)(v10 + 1626) == 1) {
      __int16 v11 = 7;
    }
    else {
      __int16 v11 = 6;
    }
  }
  else
  {
    __int16 v11 = 23;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 176) + 256) + 424))
  {
    __int16 v18 = a4;
    return sub_1CD29397C(a1, (unint64_t *)(a2 + 8), a3, v11, &v18);
  }
  else
  {
    *(void *)(a1 + 160) += 16;
    uint64_t v12 = *(void *)(a1 + 80);
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 16 > *(void *)(a1 + 88) - v12)
    {
      unsigned int v15 = *(_DWORD *)(a1 + 104) >> 7;
      if (v15 >= 0x1E) {
        LOBYTE(v15) = 30;
      }
      uint64_t v16 = 4096 << v15;
      uint64_t v13 = operator new(4096 << v15, (std::align_val_t)8uLL);
      unsigned int v17 = *(_DWORD *)(a1 + 104);
      if (v17 >= *(_DWORD *)(a1 + 108)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 96) + 8 * v17) = v13;
      ++*(_DWORD *)(a1 + 104);
      *(void *)(a1 + 88) = (char *)v13 + v16;
    }
    else
    {
      uint64_t v13 = (void *)((v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)(a1 + 80) = v13 + 2;
    *uint64_t v13 = a4;
    v13[1] = a5;
    __int16 v18 = v13;
    return sub_1CD2B2B1C(a1, v9, a3, v11, &v18);
  }
}

uint64_t sub_1CD2B64EC(void *a1)
{
  if (!*(unsigned char *)(*(void *)(a1[22] + 256) + 424) || ((*(uint64_t (**)(void))(*a1 + 80))() & 1) != 0) {
    return 0;
  }
  else {
    return *(void *)(a1[7] + 8);
  }
}

uint64_t sub_1CD2B6558@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CB915048((uint64_t *)a1, a2, &v12);
  unsigned int v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CBF74714(a1, (uint64_t)a2, a2, v12);
    unsigned int v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(void *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *sub_1CD2B65EC(void *result, uint64_t a2)
{
  *uint64_t result = &unk_1F264A318;
  result[1] = a2;
  result[2] = *(void *)(a2 + 288);
  return result;
}

uint64_t sub_1CD2B662C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_1CD8A0F5C(*(void *)(*a1 + 8), *(_DWORD *)a1[1], "@TType");
  if (*(unsigned char *)a1[2])
  {
    uint64_t v3 = *(void *)(v2 + 8);
    v8[0] = "ttbaseref";
    __int16 v9 = 259;
    uint64_t TempSymbol = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v3 + 264), (const llvm::Twine *)v8, 1);
    (*(void (**)(void))(**(void **)(*(void *)(v2 + 8) + 272) + 848))();
    (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(v2 + 8) + 272) + 192))(*(void *)(*(void *)(v2 + 8) + 272), TempSymbol, 0);
  }
  uint64_t v5 = *(void *)(v2 + 8);
  v8[0] = "cst_begin";
  __int16 v9 = 259;
  uint64_t v6 = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v5 + 264), (const llvm::Twine *)v8, 1);
  sub_1CD8A0F5C(*(void *)(v2 + 8), *(_DWORD *)a1[4], "Call site");
  (*(void (**)(void))(**(void **)(*(void *)(v2 + 8) + 272) + 848))();
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(v2 + 8) + 272) + 192))(*(void *)(*(void *)(v2 + 8) + 272), v6, 0);
}

uint64_t *sub_1CD2B67F0(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  __int16 v9 = result;
  while (2)
  {
    char v10 = a2 - 1;
    unint64_t i = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          __int16 v9 = i;
          uint64_t v12 = (char *)a2 - (char *)i;
          uint64_t v13 = a2 - i;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v119 = *i;
                uint64_t v121 = *(void *)(*i + 96);
                uint64_t v120 = *(void *)(*i + 104);
                if (v121 == v120) {
                  return result;
                }
                uint64_t v122 = *(a2 - 1);
                unint64_t v123 = *(int **)(v122 + 96);
                uint64_t v124 = v121 + 4;
                break;
              case 3:
                return sub_1CD2B75D4(i, i + 1, a2 - 1);
              case 4:
                return sub_1CD2B7994(i, i + 1, i + 2, a2 - 1);
              case 5:
                return sub_1CD2B7440(i, i + 1, i + 2, i + 3, a2 - 1);
              default:
                JUMPOUT(0);
            }
            while (v123 != *(int **)(v122 + 104))
            {
              int v125 = *v123;
              int v126 = *(_DWORD *)(v124 - 4);
              if (*v123 < v126) {
                break;
              }
              ++v123;
              BOOL v127 = v126 < v125 || v124 == v120;
              v124 += 4;
              if (v127) {
                return result;
              }
            }
            uint64_t *i = v122;
            *(a2 - 1) = v119;
            return result;
          }
          if (v12 <= 191)
          {
            BOOL v128 = i + 1;
            BOOL v130 = i == a2 || v128 == a2;
            if (a4)
            {
              if (!v130)
              {
                unint64_t v131 = i;
                do
                {
                  unint64_t v132 = v131;
                  unint64_t v131 = v128;
                  uint64_t v134 = *(void *)(*v132 + 96);
                  uint64_t v133 = *(void *)(*v132 + 104);
                  if (v134 != v133)
                  {
                    uint64_t v135 = v132[1];
                    unint64_t v136 = *(int **)(v135 + 96);
                    uint64_t v137 = v134 + 4;
                    while (v136 != *(int **)(v135 + 104))
                    {
                      int v138 = *v136;
                      int v139 = *(_DWORD *)(v137 - 4);
                      if (*v136 < v139) {
                        break;
                      }
                      ++v136;
                      BOOL v140 = v139 < v138 || v137 == v133;
                      v137 += 4;
                      if (v140) {
                        goto LABEL_218;
                      }
                    }
                    v132[1] = *v132;
                    v141 = i;
                    if (v132 != i)
                    {
                      while (1)
                      {
                        v141 = v132;
                        uint64_t v143 = *--v132;
                        uint64_t v142 = v143;
                        uint64_t v145 = *(void *)(v143 + 96);
                        uint64_t v144 = *(void *)(v143 + 104);
                        if (v145 == v144) {
                          break;
                        }
                        int8x16_t v146 = *(int **)(v135 + 96);
                        uint64_t v147 = v145 + 4;
                        while (v146 != *(int **)(v135 + 104))
                        {
                          int v148 = *v146;
                          uint64_t result = (uint64_t *)*(unsigned int *)(v147 - 4);
                          if (*v146 < (int)result) {
                            break;
                          }
                          ++v146;
                          BOOL v149 = (int)result < v148 || v147 == v144;
                          v147 += 4;
                          if (v149) {
                            goto LABEL_217;
                          }
                        }
                        uint64_t *v141 = v142;
                        if (v132 == i)
                        {
                          v141 = i;
                          break;
                        }
                      }
                    }
LABEL_217:
                    uint64_t *v141 = v135;
                  }
LABEL_218:
                  BOOL v128 = v131 + 1;
                }
                while (v131 + 1 != a2);
              }
            }
            else if (!v130)
            {
              do
              {
                unint64_t v218 = v9;
                __int16 v9 = v128;
                uint64_t v220 = *(void *)(*v218 + 96);
                uint64_t v219 = *(void *)(*v218 + 104);
                if (v220 != v219)
                {
                  uint64_t v221 = v218[1];
                  unint64_t v222 = *(int **)(v221 + 96);
                  uint64_t v223 = v220 + 4;
                  while (v222 != *(int **)(v221 + 104))
                  {
                    int v224 = *v222;
                    int v225 = *(_DWORD *)(v223 - 4);
                    if (*v222 < v225) {
                      break;
                    }
                    ++v222;
                    BOOL v226 = v225 < v224 || v223 == v219;
                    v223 += 4;
                    if (v226) {
                      goto LABEL_339;
                    }
                  }
                  *__int16 v9 = *v218;
                  while (1)
                  {
                    uint64_t v227 = *(v218 - 1);
                    uint64_t v229 = *(void *)(v227 + 96);
                    uint64_t v228 = *(void *)(v227 + 104);
                    if (v229 == v228) {
                      break;
                    }
                    unsigned int v230 = v218--;
                    v231 = *(int **)(v221 + 96);
                    uint64_t v232 = v229 + 4;
                    while (v231 != *(int **)(v221 + 104))
                    {
                      int v233 = *v231;
                      int v234 = *(_DWORD *)(v232 - 4);
                      if (*v231 < v234) {
                        break;
                      }
                      ++v231;
                      BOOL v235 = v234 < v233 || v232 == v228;
                      v232 += 4;
                      if (v235)
                      {
                        unint64_t v218 = v230;
                        goto LABEL_338;
                      }
                    }
                    *unsigned int v230 = v227;
                  }
LABEL_338:
                  *unint64_t v218 = v221;
                }
LABEL_339:
                BOOL v128 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (i != a2)
            {
              int64_t v150 = (unint64_t)(v13 - 2) >> 1;
              int64_t v151 = v150;
              do
              {
                int64_t v152 = v151;
                if (v150 >= v151)
                {
                  uint64_t v153 = (2 * v151) | 1;
                  char v154 = &i[v153];
                  if (2 * v152 + 2 < v13)
                  {
                    uint64_t v155 = v154[1];
                    uint64_t v156 = *(void *)(v155 + 96);
                    uint64_t v157 = *(void *)(v155 + 104);
                    if (v156 != v157)
                    {
                      v158 = *(int **)(*v154 + 96);
                      uint64_t v159 = v156 + 4;
                      while (v158 != *(int **)(*v154 + 104))
                      {
                        int v160 = *v158;
                        int v161 = *(_DWORD *)(v159 - 4);
                        if (*v158 < v161) {
                          break;
                        }
                        ++v158;
                        BOOL v162 = v161 < v160 || v159 == v157;
                        v159 += 4;
                        if (v162) {
                          goto LABEL_235;
                        }
                      }
                      ++v154;
                      uint64_t v153 = 2 * v152 + 2;
                    }
                  }
LABEL_235:
                  uint64_t v163 = *v154;
                  uint64_t v164 = i[v152];
                  uint64_t result = *(uint64_t **)(v164 + 96);
                  unint64_t v165 = *(uint64_t **)(v164 + 104);
                  if (result == v165)
                  {
LABEL_244:
                    i[v152] = v163;
                    if (v150 >= v153)
                    {
                      while (1)
                      {
                        uint64_t v171 = 2 * v153;
                        uint64_t v153 = (2 * v153) | 1;
                        v170 = &i[v153];
                        uint64_t v172 = v171 + 2;
                        if (v172 < v13)
                        {
                          uint64_t v173 = v170[1];
                          uint64_t v174 = *(void *)(v173 + 96);
                          uint64_t v175 = *(void *)(v173 + 104);
                          if (v174 != v175)
                          {
                            int v176 = *(uint64_t **)(*v170 + 96);
                            uint64_t result = *(uint64_t **)(*v170 + 104);
                            uint64_t v177 = v174 + 4;
                            while (v176 != result)
                            {
                              int v178 = *(_DWORD *)v176;
                              int v179 = *(_DWORD *)(v177 - 4);
                              if (*(_DWORD *)v176 < v179) {
                                break;
                              }
                              int v176 = (uint64_t *)((char *)v176 + 4);
                              BOOL v180 = v179 < v178 || v177 == v175;
                              v177 += 4;
                              if (v180) {
                                goto LABEL_261;
                              }
                            }
                            ++v170;
                            uint64_t v153 = v172;
                          }
                        }
LABEL_261:
                        uint64_t v181 = *v170;
                        uint64_t v182 = *(void *)(v164 + 96);
                        uint64_t v183 = *(void *)(v164 + 104);
                        if (v182 != v183) {
                          break;
                        }
LABEL_270:
                        *char v154 = v181;
                        char v154 = v170;
                        if (v150 < v153) {
                          goto LABEL_246;
                        }
                      }
                      uint64_t result = *(uint64_t **)(v181 + 96);
                      uint64_t v184 = v182 + 4;
                      while (result != *(uint64_t **)(v181 + 104))
                      {
                        int v185 = *(_DWORD *)result;
                        int v186 = *(_DWORD *)(v184 - 4);
                        if (*(_DWORD *)result < v186) {
                          break;
                        }
                        uint64_t result = (uint64_t *)((char *)result + 4);
                        BOOL v187 = v186 < v185 || v184 == v183;
                        v184 += 4;
                        if (v187) {
                          goto LABEL_270;
                        }
                      }
                    }
                    v170 = v154;
LABEL_246:
                    uint64_t *v170 = v164;
                  }
                  else
                  {
                    unint64_t v166 = *(int **)(v163 + 96);
                    uint64_t result = (uint64_t *)((char *)result + 4);
                    while (v166 != *(int **)(v163 + 104))
                    {
                      int v167 = *v166;
                      int v168 = *((_DWORD *)result - 1);
                      if (*v166 < v168) {
                        break;
                      }
                      ++v166;
                      BOOL v169 = v168 < v167 || result == v165;
                      uint64_t result = (uint64_t *)((char *)result + 4);
                      if (v169) {
                        goto LABEL_244;
                      }
                    }
                  }
                }
                int64_t v151 = v152 - 1;
              }
              while (v152);
              do
              {
                uint64_t v188 = 0;
                uint64_t v189 = *i;
                uint64_t v190 = i;
                do
                {
                  v191 = v190;
                  v190 += v188 + 1;
                  uint64_t v192 = 2 * v188;
                  uint64_t v188 = (2 * v188) | 1;
                  uint64_t v193 = v192 + 2;
                  if (v193 < v13)
                  {
                    uint64_t v194 = v190[1];
                    uint64_t v195 = *(void *)(v194 + 96);
                    uint64_t v196 = *(void *)(v194 + 104);
                    if (v195 != v196)
                    {
                      uint64_t result = *(uint64_t **)(*v190 + 96);
                      uint64_t v197 = v195 + 4;
                      while (result != *(uint64_t **)(*v190 + 104))
                      {
                        int v198 = *(_DWORD *)result;
                        int v199 = *(_DWORD *)(v197 - 4);
                        if (*(_DWORD *)result < v199) {
                          break;
                        }
                        uint64_t result = (uint64_t *)((char *)result + 4);
                        BOOL v200 = v199 < v198 || v197 == v196;
                        v197 += 4;
                        if (v200) {
                          goto LABEL_285;
                        }
                      }
                      ++v190;
                      uint64_t v188 = v193;
                    }
                  }
LABEL_285:
                  uint64_t *v191 = *v190;
                }
                while (v188 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                if (v190 == --a2)
                {
                  *uint64_t v190 = v189;
                }
                else
                {
                  *uint64_t v190 = *a2;
                  *a2 = v189;
                  uint64_t v201 = (char *)v190 - (char *)i + 8;
                  if (v201 >= 9)
                  {
                    uint64_t v202 = *v190;
                    uint64_t result = *(uint64_t **)(*v190 + 96);
                    v203 = *(uint64_t **)(*v190 + 104);
                    if (result != v203)
                    {
                      unint64_t v204 = ((unint64_t)v201 >> 3) - 2;
                      unint64_t v205 = v204 >> 1;
                      int v206 = &i[v204 >> 1];
                      uint64_t v207 = *v206;
                      unint64_t v208 = *(int **)(*v206 + 96);
                      uint64_t result = (uint64_t *)((char *)result + 4);
                      while (v208 != *(int **)(*v206 + 104))
                      {
                        int v209 = *v208;
                        int v210 = *((_DWORD *)result - 1);
                        if (*v208 < v210) {
                          break;
                        }
                        ++v208;
                        BOOL v211 = v210 < v209 || result == v203;
                        uint64_t result = (uint64_t *)((char *)result + 4);
                        if (v211) {
                          goto LABEL_312;
                        }
                      }
                      while (1)
                      {
                        *uint64_t v190 = v207;
                        if (v204 < 2) {
                          break;
                        }
                        uint64_t v190 = v206;
                        uint64_t result = *(uint64_t **)(v202 + 96);
                        unint64_t v216 = *(uint64_t **)(v202 + 104);
                        if (result == v216)
                        {
LABEL_310:
                          int v206 = v190;
                          break;
                        }
                        unint64_t v204 = v205 - 1;
                        unint64_t v205 = (v205 - 1) >> 1;
                        int v206 = &i[v205];
                        uint64_t v207 = *v206;
                        v214 = *(int **)(*v206 + 96);
                        uint64_t result = (uint64_t *)((char *)result + 4);
                        while (v214 != *(int **)(*v206 + 104))
                        {
                          int v212 = *v214;
                          int v213 = *((_DWORD *)result - 1);
                          if (*v214 < v213) {
                            break;
                          }
                          ++v214;
                          BOOL v215 = v213 < v212 || result == v216;
                          uint64_t result = (uint64_t *)((char *)result + 4);
                          if (v215) {
                            goto LABEL_310;
                          }
                        }
                      }
                      *int v206 = v202;
                    }
                  }
                }
LABEL_312:
                ;
              }
              while (v13-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unsigned int v15 = &i[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            sub_1CD2B75D4(v9, &v9[(unint64_t)v13 >> 1], a2 - 1);
            sub_1CD2B75D4(v9 + 1, v15 - 1, a2 - 2);
            sub_1CD2B75D4(v9 + 2, &v9[v14 + 1], a2 - 3);
            uint64_t result = sub_1CD2B75D4(v15 - 1, v15, &v9[v14 + 1]);
            uint64_t v16 = *v9;
            *__int16 v9 = *v15;
            *unsigned int v15 = v16;
          }
          else
          {
            uint64_t result = sub_1CD2B75D4(&v9[(unint64_t)v13 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v17 = *v9;
          if (a4)
          {
            unsigned int v19 = *(int **)(v17 + 96);
            __int16 v18 = *(int **)(v17 + 104);
            goto LABEL_12;
          }
          unsigned int v19 = *(int **)(v17 + 96);
          __int16 v18 = *(int **)(v17 + 104);
          if (v19 != v18) {
            break;
          }
LABEL_43:
          uint64_t v45 = *(void *)(*v10 + 96);
          uint64_t v44 = *(void *)(*v10 + 104);
          if (v45 == v44)
          {
LABEL_52:
            for (unint64_t i = v9 + 1; i < a2; ++i)
            {
              uint64_t v52 = *(void *)(*i + 96);
              uint64_t v51 = *(void *)(*i + 104);
              if (v52 != v51)
              {
                uint64_t v53 = v52 + 4;
                uint64_t v54 = *(int **)(v17 + 96);
                while (v54 != v18)
                {
                  int v55 = *v54;
                  int v56 = *(_DWORD *)(v53 - 4);
                  if (*v54 < v56) {
                    break;
                  }
                  ++v54;
                  BOOL v57 = v56 < v55 || v53 == v51;
                  v53 += 4;
                  if (v57) {
                    goto LABEL_63;
                  }
                }
                break;
              }
LABEL_63:
              ;
            }
          }
          else
          {
            uint64_t v46 = v45 + 4;
            int v47 = *(int **)(v17 + 96);
            while (v47 != v18)
            {
              int v48 = *v47;
              int v49 = *(_DWORD *)(v46 - 4);
              if (*v47 < v49) {
                break;
              }
              ++v47;
              BOOL v50 = v49 < v48 || v46 == v44;
              v46 += 4;
              if (v50) {
                goto LABEL_52;
              }
            }
            unint64_t i = v9;
            do
            {
LABEL_110:
              uint64_t v85 = i[1];
              ++i;
              uint64_t v87 = *(void *)(v85 + 96);
              uint64_t v86 = *(void *)(v85 + 104);
            }
            while (v87 == v86);
            uint64_t v88 = v87 + 4;
            unint64_t v89 = *(int **)(v17 + 96);
            while (v89 != v18)
            {
              int v90 = *v89;
              int v91 = *(_DWORD *)(v88 - 4);
              if (*v89 < v91) {
                break;
              }
              ++v89;
              BOOL v92 = v91 < v90 || v88 == v86;
              v88 += 4;
              if (v92) {
                goto LABEL_110;
              }
            }
          }
          if (i < a2) {
            long long v93 = a2 - 1;
          }
          else {
            long long v93 = a2;
          }
          if (v45 != v44 && i < a2)
          {
            long long v93 = a2 - 1;
            do
            {
              uint64_t v94 = v45 + 4;
              uint64_t v95 = *(int **)(v17 + 96);
              while (v95 != v18)
              {
                int v96 = *v95;
                int v97 = *(_DWORD *)(v94 - 4);
                if (*v95 < v97) {
                  break;
                }
                ++v95;
                BOOL v98 = v97 < v96 || v94 == v44;
                v94 += 4;
                if (v98) {
                  goto LABEL_136;
                }
              }
              uint64_t v99 = *--v93;
              uint64_t v45 = *(void *)(v99 + 96);
              uint64_t v44 = *(void *)(v99 + 104);
            }
            while (v45 != v44);
          }
LABEL_136:
          if (i < v93)
          {
            uint64_t v100 = *i;
            uint64_t v101 = *v93;
            do
            {
              uint64_t *i = v101;
              uint64_t *v93 = v100;
              uint64_t v102 = *(int **)(v17 + 104);
              do
              {
LABEL_139:
                uint64_t v103 = i[1];
                ++i;
                uint64_t v100 = v103;
                uint64_t v105 = *(void *)(v103 + 96);
                uint64_t v104 = *(void *)(v103 + 104);
              }
              while (v105 == v104);
              uint64_t v106 = v105 + 4;
              unsigned int v107 = *(int **)(v17 + 96);
              while (v107 != v102)
              {
                int v108 = *v107;
                int v109 = *(_DWORD *)(v106 - 4);
                if (*v107 < v109) {
                  break;
                }
                ++v107;
                BOOL v110 = v109 < v108 || v106 == v104;
                v106 += 4;
                if (v110) {
                  goto LABEL_139;
                }
              }
              while (1)
              {
                uint64_t v115 = *--v93;
                uint64_t v101 = v115;
                uint64_t v117 = *(void *)(v115 + 96);
                uint64_t v116 = *(void *)(v115 + 104);
                if (v117 == v116) {
                  break;
                }
                uint64_t v111 = v117 + 4;
                unsigned int v112 = *(int **)(v17 + 96);
                while (v112 != v102)
                {
                  int v113 = *v112;
                  uint64_t result = (uint64_t *)*(unsigned int *)(v111 - 4);
                  if (*v112 < (int)result) {
                    break;
                  }
                  ++v112;
                  BOOL v114 = (int)result < v113 || v111 == v116;
                  v111 += 4;
                  if (v114) {
                    goto LABEL_159;
                  }
                }
              }
LABEL_159:
              ;
            }
            while (i < v93);
          }
          int8x16_t v118 = i - 1;
          BOOL v4 = i - 1 >= v9;
          BOOL v5 = i - 1 == v9;
          if (i - 1 != v9) {
            *__int16 v9 = *v118;
          }
          a4 = 0;
          *int8x16_t v118 = v17;
        }
        uint64_t v39 = 0;
        uint64_t v40 = *(void *)(*(v9 - 1) + 96);
        while (v40 + v39 * 4 != *(void *)(*(v9 - 1) + 104))
        {
          int v41 = *(_DWORD *)(v40 + v39 * 4);
          int v42 = v19[v39];
          if (v41 < v42) {
            break;
          }
          ++v39;
          if (v42 < v41 || &v19[v39] == v18) {
            goto LABEL_43;
          }
        }
LABEL_12:
        __int16 v20 = v9 + 1;
        if (v19 != v18)
        {
          unsigned int v21 = v19 + 1;
          uint64_t v22 = v9;
LABEL_14:
          __int16 v23 = v22;
          uint64_t v22 = v20;
          uint64_t v24 = v23[1];
          uint64_t v25 = *(int **)(v24 + 96);
          __int16 v26 = *(int **)(v24 + 104);
          uint64_t v27 = v19 + 1;
          do
          {
            if (v25 == v26 || (int v28 = *v25, v29 = *(v27 - 1), *v25 < v29))
            {
              __int16 v20 = v22 + 1;
              goto LABEL_14;
            }
            ++v25;
          }
          while (v29 >= v28 && v27++ != v18);
          __int16 v31 = a2;
          if (v23 != v9)
          {
LABEL_25:
            uint64_t v32 = *--v31;
            uint64_t v34 = *(int **)(v32 + 96);
            uint64_t v33 = *(int **)(v32 + 104);
            int v35 = v21;
            while (v34 != v33)
            {
              int v36 = *v34;
              int v37 = *(v35 - 1);
              if (*v34 < v37) {
                break;
              }
              ++v34;
              if (v37 < v36 || v35++ == v18) {
                goto LABEL_25;
              }
            }
            goto LABEL_79;
          }
          __int16 v20 = v22;
        }
        if (v20 >= a2)
        {
          uint64_t v22 = v20;
          __int16 v31 = a2;
        }
        else
        {
          __int16 v31 = a2;
          while (1)
          {
            uint64_t v59 = *--v31;
            uint64_t v58 = v59;
            if (v19 != v18) {
              break;
            }
LABEL_76:
            if (v20 >= v31) {
              goto LABEL_77;
            }
          }
          uint64_t v62 = v58 + 96;
          uint64_t v61 = *(int **)(v58 + 96);
          uint64_t v60 = *(int **)(v62 + 8);
          uint64_t v63 = v19 + 1;
          while (v61 != v60)
          {
            int v64 = *v61;
            int v65 = *(v63 - 1);
            if (*v61 < v65) {
              break;
            }
            ++v61;
            if (v65 < v64 || v63++ == v18) {
              goto LABEL_76;
            }
          }
LABEL_77:
          uint64_t v22 = v20;
        }
LABEL_79:
        unint64_t i = v22;
        if (v22 < v31)
        {
          uint64_t v67 = *v31;
          unint64_t i = v22;
          unint64_t v68 = v31;
          do
          {
            uint64_t v69 = *i;
            *i++ = v67;
            *unint64_t v68 = v69;
            uint64_t v70 = *(void *)(v17 + 96);
            uint64_t v71 = *(void *)(v17 + 104);
            if (v70 != v71)
            {
              while (1)
              {
                uint64_t v72 = *(int **)(*i + 96);
                uint64_t v73 = v70 + 4;
                while (v72 != *(int **)(*i + 104))
                {
                  int v74 = *v72;
                  int v75 = *(_DWORD *)(v73 - 4);
                  if (*v72 < v75) {
                    break;
                  }
                  ++v72;
                  BOOL v76 = v75 < v74 || v73 == v71;
                  v73 += 4;
                  if (v76) {
                    goto LABEL_92;
                  }
                }
                ++i;
              }
            }
            do
            {
LABEL_92:
              uint64_t v77 = *--v68;
              uint64_t v67 = v77;
            }
            while (v70 == v71);
            uint64_t v78 = *(int **)(v67 + 96);
            uint64_t v79 = v70 + 4;
            while (v78 != *(int **)(v67 + 104))
            {
              int v80 = *v78;
              int v81 = *(_DWORD *)(v79 - 4);
              if (*v78 < v81) {
                break;
              }
              ++v78;
              BOOL v82 = v81 < v80 || v79 == v71;
              v79 += 4;
              if (v82) {
                goto LABEL_92;
              }
            }
          }
          while (i < v68);
        }
        unint64_t v83 = i - 1;
        if (i - 1 != v9) {
          *__int16 v9 = *v83;
        }
        *unint64_t v83 = v17;
        if (v22 >= v31) {
          break;
        }
LABEL_108:
        uint64_t result = (uint64_t *)sub_1CD2B67F0(v9, i - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v84 = sub_1CD2B7768(v9, i - 1);
      uint64_t result = (uint64_t *)sub_1CD2B7768(i, a2);
      if (result) {
        break;
      }
      if (!v84) {
        goto LABEL_108;
      }
    }
    a2 = i - 1;
    if (!v84) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CD2B7440(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1CD2B7994(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  uint64_t v13 = *(void *)(*a4 + 96);
  uint64_t v12 = *(void *)(*a4 + 104);
  if (v13 != v12)
  {
    unint64_t v14 = *(int **)(*a5 + 96);
    uint64_t v15 = v13 + 4;
    while (v14 != *(int **)(*a5 + 104))
    {
      int v16 = *v14;
      int v17 = *(_DWORD *)(v15 - 4);
      if (*v14 < v17) {
        break;
      }
      ++v14;
      BOOL v18 = v17 < v16 || v15 == v12;
      v15 += 4;
      if (v18) {
        return result;
      }
    }
    *a4 = *a5;
    *a5 = v11;
    uint64_t v19 = *a3;
    uint64_t v21 = *(void *)(*a3 + 96);
    uint64_t v20 = *(void *)(*a3 + 104);
    if (v21 != v20)
    {
      uint64_t v22 = *(int **)(*a4 + 96);
      uint64_t v23 = v21 + 4;
      while (v22 != *(int **)(*a4 + 104))
      {
        int v24 = *v22;
        int v25 = *(_DWORD *)(v23 - 4);
        if (*v22 < v25) {
          break;
        }
        ++v22;
        BOOL v26 = v25 < v24 || v23 == v20;
        v23 += 4;
        if (v26) {
          return result;
        }
      }
      *a3 = *a4;
      *a4 = v19;
      uint64_t v27 = *a2;
      uint64_t v29 = *(void *)(*a2 + 96);
      uint64_t v28 = *(void *)(*a2 + 104);
      if (v29 != v28)
      {
        __int16 v30 = *(int **)(*a3 + 96);
        uint64_t v31 = v29 + 4;
        while (v30 != *(int **)(*a3 + 104))
        {
          int v32 = *v30;
          int v33 = *(_DWORD *)(v31 - 4);
          if (*v30 < v33) {
            break;
          }
          ++v30;
          BOOL v34 = v33 < v32 || v31 == v28;
          v31 += 4;
          if (v34) {
            return result;
          }
        }
        *a2 = *a3;
        *a3 = v27;
        uint64_t v35 = *a1;
        uint64_t v37 = *(void *)(*a1 + 96);
        uint64_t v36 = *(void *)(*a1 + 104);
        if (v37 != v36)
        {
          uint64_t v38 = *(int **)(*a2 + 96);
          uint64_t v39 = v37 + 4;
          while (v38 != *(int **)(*a2 + 104))
          {
            int v40 = *v38;
            int v41 = *(_DWORD *)(v39 - 4);
            if (*v38 < v41) {
              break;
            }
            ++v38;
            BOOL v42 = v41 < v40 || v39 == v36;
            v39 += 4;
            if (v42) {
              return result;
            }
          }
          *a1 = *a2;
          *a2 = v35;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CD2B75D4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  uint64_t v6 = *(void *)(*a2 + 96);
  uint64_t v5 = *(void *)(*a2 + 104);
  uint64_t v7 = *(void *)(*result + 96);
  uint64_t v8 = *(void *)(*result + 104);
  if (v7 == v8)
  {
LABEL_10:
    if (v6 != v5)
    {
      uint64_t v13 = *(int **)(*a3 + 96);
      uint64_t v14 = v6 + 4;
      while (v13 != *(int **)(*a3 + 104))
      {
        int v15 = *v13;
        int v16 = *(_DWORD *)(v14 - 4);
        if (*v13 < v16) {
          break;
        }
        ++v13;
        BOOL v17 = v16 < v15 || v14 == v5;
        v14 += 4;
        if (v17) {
          return result;
        }
      }
      *a2 = *a3;
      *a3 = v3;
      uint64_t v30 = *result;
      uint64_t v32 = *(void *)(*result + 96);
      uint64_t v31 = *(void *)(*result + 104);
      if (v32 != v31)
      {
        int v33 = *(int **)(*a2 + 96);
        uint64_t v34 = v32 + 4;
        while (v33 != *(int **)(*a2 + 104))
        {
          int v35 = *v33;
          int v36 = *(_DWORD *)(v34 - 4);
          if (*v33 < v36) {
            break;
          }
          ++v33;
          BOOL v37 = v36 < v35 || v34 == v31;
          v34 += 4;
          if (v37) {
            return result;
          }
        }
        *uint64_t result = *a2;
        *a2 = v30;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    while (v6 + v9 != v5)
    {
      int v10 = *(_DWORD *)(v6 + v9);
      int v11 = *(_DWORD *)(v7 + v9);
      if (v10 < v11) {
        break;
      }
      v9 += 4;
      if (v11 < v10 || v9 + v7 == v8) {
        goto LABEL_10;
      }
    }
    if (v6 != v5)
    {
      BOOL v18 = *(int **)(*a3 + 96);
      uint64_t v19 = v6 + 4;
      while (v18 != *(int **)(*a3 + 104))
      {
        int v20 = *v18;
        int v21 = *(_DWORD *)(v19 - 4);
        if (*v18 < v21) {
          break;
        }
        ++v18;
        BOOL v22 = v21 < v20 || v19 == v5;
        v19 += 4;
        if (v22) {
          goto LABEL_29;
        }
      }
      *uint64_t result = *a3;
      goto LABEL_51;
    }
LABEL_29:
    *uint64_t result = v3;
    *a2 = v4;
    uint64_t v24 = *(void *)(v4 + 96);
    uint64_t v23 = *(void *)(v4 + 104);
    if (v24 != v23)
    {
      int v25 = *(int **)(*a3 + 96);
      uint64_t v26 = v24 + 4;
      while (v25 != *(int **)(*a3 + 104))
      {
        int v27 = *v25;
        int v28 = *(_DWORD *)(v26 - 4);
        if (*v25 < v28) {
          break;
        }
        ++v25;
        BOOL v29 = v28 < v27 || v26 == v23;
        v26 += 4;
        if (v29) {
          return result;
        }
      }
      *a2 = *a3;
LABEL_51:
      *a3 = v4;
    }
  }
  return result;
}

BOOL sub_1CD2B7768(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      uint64_t v8 = *(void *)(*a1 + 96);
      uint64_t v7 = *(void *)(*a1 + 104);
      if (v8 != v7)
      {
        uint64_t v9 = *(a2 - 1);
        int v10 = *(int **)(v9 + 96);
        uint64_t v11 = v8 + 4;
        do
        {
          if (v10 == *(int **)(v9 + 104) || (int v12 = *v10, v13 = *(_DWORD *)(v11 - 4), *v10 < v13))
          {
            *a1 = v9;
            *(a2 - 1) = v6;
            return 1;
          }
          ++v10;
          BOOL v14 = v13 < v12 || v11 == v7;
          v11 += 4;
        }
        while (!v14);
      }
      return result;
    case 3:
      sub_1CD2B75D4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CD2B7994(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CD2B7440(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v15 = a1 + 2;
      sub_1CD2B75D4(a1, a1 + 1, a1 + 2);
      int v16 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v17 = 0;
      break;
  }
  while (1)
  {
    uint64_t v19 = *(void *)(*v15 + 96);
    uint64_t v18 = *(void *)(*v15 + 104);
    if (v19 != v18)
    {
      uint64_t v20 = *v16;
      int v21 = *(int **)(*v16 + 96);
      uint64_t v22 = v19 + 4;
      while (v21 != *(int **)(*v16 + 104))
      {
        int v23 = *v21;
        int v24 = *(_DWORD *)(v22 - 4);
        if (*v21 < v24) {
          break;
        }
        ++v21;
        BOOL v25 = v24 < v23 || v22 == v18;
        v22 += 4;
        if (v25) {
          goto LABEL_38;
        }
      }
      uint64_t *v16 = *v15;
      uint64_t v26 = a1;
      if (v15 != a1)
      {
        while (1)
        {
          uint64_t v26 = v15;
          uint64_t v28 = *--v15;
          uint64_t v27 = v28;
          uint64_t v30 = *(void *)(v28 + 96);
          uint64_t v29 = *(void *)(v28 + 104);
          if (v30 == v29) {
            break;
          }
          uint64_t v31 = *(int **)(v20 + 96);
          uint64_t v32 = v30 + 4;
          while (v31 != *(int **)(v20 + 104))
          {
            int v33 = *v31;
            int v34 = *(_DWORD *)(v32 - 4);
            if (*v31 < v34) {
              break;
            }
            ++v31;
            BOOL v35 = v34 < v33 || v32 == v29;
            v32 += 4;
            if (v35) {
              goto LABEL_37;
            }
          }
          *uint64_t v26 = v27;
          if (v15 == a1)
          {
            uint64_t v26 = a1;
            break;
          }
        }
      }
LABEL_37:
      *uint64_t v26 = v20;
      if (++v17 == 8) {
        return v16 + 1 == a2;
      }
    }
LABEL_38:
    int v15 = v16++;
    if (v16 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CD2B7994(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CD2B75D4(a1, a2, a3);
  uint64_t v9 = *a3;
  uint64_t v11 = *(void *)(*a3 + 96);
  uint64_t v10 = *(void *)(*a3 + 104);
  if (v11 != v10)
  {
    int v12 = *(int **)(*a4 + 96);
    uint64_t v13 = v11 + 4;
    while (v12 != *(int **)(*a4 + 104))
    {
      int v14 = *v12;
      int v15 = *(_DWORD *)(v13 - 4);
      if (*v12 < v15) {
        break;
      }
      ++v12;
      BOOL v16 = v15 < v14 || v13 == v10;
      v13 += 4;
      if (v16) {
        return result;
      }
    }
    *a3 = *a4;
    *a4 = v9;
    uint64_t v17 = *a2;
    uint64_t v19 = *(void *)(*a2 + 96);
    uint64_t v18 = *(void *)(*a2 + 104);
    if (v19 != v18)
    {
      uint64_t v20 = *(int **)(*a3 + 96);
      uint64_t v21 = v19 + 4;
      while (v20 != *(int **)(*a3 + 104))
      {
        int v22 = *v20;
        int v23 = *(_DWORD *)(v21 - 4);
        if (*v20 < v23) {
          break;
        }
        ++v20;
        BOOL v24 = v23 < v22 || v21 == v18;
        v21 += 4;
        if (v24) {
          return result;
        }
      }
      *a2 = *a3;
      *a3 = v17;
      uint64_t v25 = *a1;
      uint64_t v27 = *(void *)(*a1 + 96);
      uint64_t v26 = *(void *)(*a1 + 104);
      if (v27 != v26)
      {
        uint64_t v28 = *(int **)(*a2 + 96);
        uint64_t v29 = v27 + 4;
        while (v28 != *(int **)(*a2 + 104))
        {
          int v30 = *v28;
          int v31 = *(_DWORD *)(v29 - 4);
          if (*v28 < v31) {
            break;
          }
          ++v28;
          BOOL v32 = v31 < v30 || v29 == v26;
          v29 += 4;
          if (v32) {
            return result;
          }
        }
        *a1 = *a2;
        *a2 = v25;
      }
    }
  }
  return result;
}

void sub_1CD2B7AC8()
{
}

void sub_1CD2B7B24()
{
}

uint64_t sub_1CD2B7B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 272);
  uint64_t v7 = *(unsigned int *)(*(void *)(a2 + 504) + 4);
  uint64_t v8 = *(llvm::MCContext **)((*(uint64_t (**)(void))(**(void **)(a4 + 248) + 24))(*(void *)(a4 + 248))
                           + 840);
  BOOL v37 = ".note.gc";
  __int16 v38 = 259;
  __int16 v40 = 257;
  uint64_t ELFSection = llvm::MCContext::getELFSection(v8, (const llvm::Twine *)&v37, 1, 0, 0, (const llvm::Twine *)v39, 0, -1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 168))(v6, ELFSection, 0);
  uint64_t v11 = *(void *)(a3 + 88);
  uint64_t v35 = *(void *)(a3 + 96);
  if (v11 != v35)
  {
    unint64_t v12 = (unint64_t)(v7 + 7) >> 3;
    if (v12 == 4) {
      uint64_t v13 = 2;
    }
    else {
      uint64_t v13 = 3;
    }
    uint64_t v34 = v13;
    while (1)
    {
      int v14 = *(void **)v11;
      uint64_t v15 = *(void *)(*(void *)v11 + 8);
      uint64_t v16 = *(void *)(a1 + 8);
      char v17 = *(unsigned char *)(v15 + 31);
      size_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = v17 & 0x7F;
      if (v17 >= 0) {
        uint64_t v20 = v17 & 0x7F;
      }
      else {
        uint64_t v20 = *(void *)(v15 + 16);
      }
      char v21 = *(unsigned char *)(v16 + 31);
      int v22 = v21;
      uint64_t v23 = v21 & 0x7F;
      if (v22 < 0) {
        uint64_t v23 = *(void *)(v16 + 16);
      }
      if (v20 != v23) {
        goto LABEL_21;
      }
      BOOL v24 = (const void **)(v15 + 8);
      uint64_t v27 = *(void *)(v16 + 8);
      uint64_t v25 = v16 + 8;
      uint64_t v26 = v27;
      uint64_t v28 = (unsigned __int8 *)(v22 >= 0 ? v25 : v26);
      if ((v17 & 0x80) == 0) {
        break;
      }
      uint64_t result = memcmp(*v24, v28, v18);
      if (!result) {
        goto LABEL_23;
      }
LABEL_21:
      v11 += 8;
      if (v11 == v35) {
        return result;
      }
    }
    if ((v17 & 0x7F) != 0)
    {
      while (*(unsigned __int8 *)v24 == *v28)
      {
        BOOL v24 = (const void **)((char *)v24 + 1);
        ++v28;
        if (!--v19) {
          goto LABEL_23;
        }
      }
      goto LABEL_21;
    }
LABEL_23:
    sub_1CD27C664(a4, v34, 0);
    v39[0] = "safe point count";
    __int16 v40 = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v39, 1);
    (*(void (**)(void))(**(void **)(a4 + 272) + 520))();
    uint64_t v29 = (uint64_t *)v14[6];
    int v30 = (uint64_t *)v14[7];
    while (v29 != v30)
    {
      v39[0] = "safe point address";
      __int16 v40 = 259;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v39, 1);
      uint64_t v31 = *v29;
      v29 += 2;
      llvm::MCSymbolRefExpr::create(v31, 0, *(void *)(a4 + 264), 0);
      (*(void (**)(void))(**(void **)(a4 + 272) + 512))();
    }
    v39[0] = "stack frame size (in words)";
    __int16 v40 = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v39, 1);
    (*(void (**)(void))(**(void **)(a4 + 272) + 520))();
    v39[0] = "stack arity";
    __int16 v40 = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v39, 1);
    (*(void (**)(void))(**(void **)(a4 + 272) + 520))();
    v39[0] = "live root count";
    __int16 v40 = 259;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v39, 1);
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a4 + 272) + 520))();
    uint64_t v32 = v14[3];
    uint64_t v33 = v14[4];
    while (v32 != v33)
    {
      v39[0] = "stack index (offset / wordsize)";
      __int16 v40 = 259;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 112))(v6, v39, 1);
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a4 + 272) + 520))();
      v32 += 16;
    }
    goto LABEL_21;
  }
  return result;
}

void sub_1CD2B80A0()
{
  qword_1EBD00118 = (uint64_t)"erlang";
  unk_1EBD00120 = 6;
  qword_1EBD00128 = (uint64_t)"erlang-compatible garbage collector";
  unk_1EBD00130 = 35;
  qword_1EBD00138 = (uint64_t)sub_1CD2B7AC8;
  qword_1EBD00148 = (uint64_t)&qword_1EBD00118;
  qword_1EBD00140 = 0;
  int v0 = (uint64_t *)llvm::Registry<llvm::GCMetadataPrinter>::Tail;
  if (!llvm::Registry<llvm::GCMetadataPrinter>::Tail) {
    int v0 = &llvm::Registry<llvm::GCMetadataPrinter>::Head;
  }
  *int v0 = (uint64_t)&qword_1EBD00140;
  llvm::Registry<llvm::GCMetadataPrinter>::Tail = (uint64_t)&qword_1EBD00140;
}

void sub_1CD2B8108()
{
}

void sub_1CD2B8164()
{
}

void sub_1CD2B8178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 272);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a4 + 248) + 24))(*(void *)(a4 + 248));
  (*(void (**)(uint64_t, void, void))(*(void *)v6 + 168))(v6, *(void *)(v7 + 24), 0);
  sub_1CD2B8A78(a2, a4, "code_begin");
  uint64_t v8 = *(void *)(a4 + 272);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a4 + 248) + 24))(*(void *)(a4 + 248));
  (*(void (**)(uint64_t, void, void))(*(void *)v8 + 168))(v8, *(void *)(v9 + 32), 0);

  sub_1CD2B8A78(a2, a4, "data_begin");
}

uint64_t sub_1CD2B8290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = ((unint64_t)*(unsigned int *)(*(void *)(a2 + 504) + 4) + 7) >> 3;
  uint64_t v9 = *(void *)(a4 + 272);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a4 + 248) + 24))(*(void *)(a4 + 248));
  (*(void (**)(uint64_t, void, void))(*(void *)v9 + 168))(v9, *(void *)(v10 + 24), 0);
  sub_1CD2B8A78(a2, a4, "code_end");
  uint64_t v11 = *(void *)(a4 + 272);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a4 + 248) + 24))(*(void *)(a4 + 248));
  (*(void (**)(uint64_t, void, void))(*(void *)v11 + 168))(v11, *(void *)(v12 + 32), 0);
  sub_1CD2B8A78(a2, a4, "data_end");
  (*(void (**)(void))(**(void **)(a4 + 272) + 520))();
  uint64_t v13 = *(void *)(a4 + 272);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a4 + 248) + 24))(*(void *)(a4 + 248));
  (*(void (**)(uint64_t, void, void))(*(void *)v13 + 168))(v13, *(void *)(v14 + 32), 0);
  sub_1CD2B8A78(a2, a4, "frametable");
  uint64_t v15 = *(uint64_t **)(a3 + 88);
  uint64_t v16 = *(uint64_t **)(a3 + 96);
  uint64_t v82 = a1;
  int v17 = 0;
  if (v15 == v16) {
    goto LABEL_21;
  }
  uint64_t v18 = *(void *)(a1 + 8);
  char v19 = *(unsigned char *)(v18 + 31);
  int v20 = v19;
  char v21 = (unsigned __int8 **)(v18 + 8);
  uint64_t v22 = *(void *)(v18 + 16);
  uint64_t v23 = v19 & 0x7F;
  if (v20 >= 0) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = v22;
  }
  do
  {
    uint64_t v25 = *v15;
    uint64_t v26 = *(void *)(*v15 + 8);
    char v27 = *(unsigned char *)(v26 + 31);
    size_t v28 = *(void *)(v26 + 16);
    uint64_t v29 = v27 & 0x7F;
    if (v27 >= 0) {
      uint64_t v30 = v27 & 0x7F;
    }
    else {
      uint64_t v30 = *(void *)(v26 + 16);
    }
    if (v30 == v24)
    {
      uint64_t v31 = (const void **)(v26 + 8);
      if (v20 >= 0) {
        uint64_t v32 = (unsigned __int8 *)v21;
      }
      else {
        uint64_t v32 = *v21;
      }
      if (v27 < 0)
      {
        if (memcmp(*v31, v32, v28)) {
          goto LABEL_19;
        }
LABEL_18:
        v17 += (*(void *)(v25 + 56) - *(void *)(v25 + 48)) >> 4;
        goto LABEL_19;
      }
      if ((v27 & 0x7F) == 0) {
        goto LABEL_18;
      }
      while (*(unsigned __int8 *)v31 == *v32)
      {
        uint64_t v31 = (const void **)((char *)v31 + 1);
        ++v32;
        if (!--v29) {
          goto LABEL_18;
        }
      }
    }
LABEL_19:
    ++v15;
  }
  while (v15 != v16);
  a1 = v82;
  if (v17 >= 0x10000)
  {
    int v74 = " Too much descriptor for ocaml GC";
LABEL_64:
    llvm::report_fatal_error((llvm *)v74, (const llvm::Twine *)1);
  }
LABEL_21:
  (*(void (**)(void, void, uint64_t))(**(void **)(a4 + 272) + 520))(*(void *)(a4 + 272), v17, 2);
  if (v8 == 4) {
    uint64_t v33 = 2;
  }
  else {
    uint64_t v33 = 3;
  }
  uint64_t result = sub_1CD27C664(a4, v33, 0);
  int v36 = *(llvm::Value ****)(a3 + 88);
  uint64_t v35 = *(llvm::Value ****)(a3 + 96);
  if (v36 != v35)
  {
    int v81 = v35;
    while (1)
    {
      BOOL v37 = *v36;
      __int16 v38 = (*v36)[1];
      uint64_t v39 = *(void *)(a1 + 8);
      char v40 = *((unsigned char *)v38 + 31);
      size_t v41 = *((void *)v38 + 2);
      uint64_t v42 = v40 & 0x7F;
      if (v40 >= 0) {
        uint64_t v43 = v40 & 0x7F;
      }
      else {
        uint64_t v43 = *((void *)v38 + 2);
      }
      char v44 = *(unsigned char *)(v39 + 31);
      int v45 = v44;
      uint64_t v46 = v44 & 0x7F;
      if (v45 < 0) {
        uint64_t v46 = *(void *)(v39 + 16);
      }
      if (v43 != v46) {
        goto LABEL_59;
      }
      int v47 = (const void **)((char *)v38 + 8);
      BOOL v50 = *(unsigned __int8 **)(v39 + 8);
      int v48 = (unsigned __int8 *)(v39 + 8);
      int v49 = v50;
      if (v45 >= 0) {
        uint64_t v51 = v48;
      }
      else {
        uint64_t v51 = v49;
      }
      if (v40 < 0)
      {
        uint64_t result = memcmp(*v47, v51, v41);
        if (result) {
          goto LABEL_59;
        }
      }
      else if ((v40 & 0x7F) != 0)
      {
        while (*(unsigned __int8 *)v47 == *v51)
        {
          int v47 = (const void **)((char *)v47 + 1);
          ++v51;
          if (!--v42) {
            goto LABEL_41;
          }
        }
        goto LABEL_59;
      }
LABEL_41:
      unint64_t v104 = (unint64_t)v37[2];
      if (v104 >= 0x10000)
      {
        Name = llvm::Value::getName(*v37);
        __int16 v95 = 1283;
        v94[0] = (uint64_t)"Function '";
        v94[2] = (uint64_t)Name;
        v94[3] = v79;
        v92[0] = (uint64_t)"' is too large for the ocaml GC! Frame size ";
        __int16 v93 = 259;
        sub_1CD3E3950(v94, v92, (uint64_t)v96);
        __int16 v91 = 268;
        v90[0] = (uint64_t)&v104;
        sub_1CD3E3950(v96, v90, (uint64_t)v98);
        uint64_t v88 = ">= 65536.\n(";
        __int16 v89 = 259;
        sub_1CD3E3950(v98, (uint64_t *)&v88, (uint64_t)v100);
        int v80 = *v36;
        __int16 v87 = 266;
        uint64_t v85 = v80;
        uint64_t v86 = &v85;
        sub_1CD3E3950(v100, (uint64_t *)&v86, (uint64_t)v101);
        unint64_t v83 = ")";
        __int16 v84 = 259;
        uint64_t v77 = (uint64_t *)&v83;
        goto LABEL_66;
      }
      uint64_t v52 = *v37;
      if ((*((unsigned char *)*v37 + 23) & 0x10) == 0)
      {
        uint64_t v62 = 0;
        uint64_t v63 = &byte_1CFBCE98E;
        goto LABEL_51;
      }
      uint64_t v53 = ***(void ***)v52;
      uint64_t v54 = *(void *)(v53 + 152);
      uint64_t v55 = *(unsigned int *)(v53 + 168);
      if (!v55) {
        goto LABEL_49;
      }
      LODWORD(v56) = (v55 - 1) & ((v52 >> 4) ^ (v52 >> 9));
      BOOL v57 = (llvm::Value **)(v54 + 16 * v56);
      uint64_t v58 = *v57;
      if (*v57 != v52) {
        break;
      }
LABEL_50:
      uint64_t v61 = v57[1];
      uint64_t v64 = *(void *)v61;
      uint64_t v63 = (char *)v61 + 16;
      uint64_t v62 = v64;
LABEL_51:
      uint64_t v65 = *(void *)(a4 + 272);
      v102[0] = "live roots for ";
      v102[2] = v63;
      v102[3] = v62;
      __int16 v103 = 1283;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v65 + 112))(v65, v102, 1);
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a4 + 272) + 152))(*(void *)(a4 + 272));
      uint64_t v67 = (uint64_t *)(*v36)[6];
      uint64_t v66 = (uint64_t *)(*v36)[7];
      if (v67 != v66)
      {
        while (1)
        {
          unint64_t v68 = *v36;
          uint64_t v69 = (*v36)[4] - (*v36)[3];
          v90[0] = v69 >> 4;
          if ((unint64_t)v69 >= 0xFFFF1) {
            break;
          }
          uint64_t v70 = *(uint64_t **)(a4 + 272);
          unint64_t v71 = llvm::MCSymbolRefExpr::create(*v67, 0, v70[1], 0);
          (*(void (**)(uint64_t *, unint64_t, unint64_t, void))(*v70 + 512))(v70, v71, v8, 0);
          (*(void (**)(void))(**(void **)(a4 + 272) + 520))();
          (*(void (**)(void))(**(void **)(a4 + 272) + 520))();
          uint64_t v72 = (*v36)[3];
          uint64_t v73 = (*v36)[4];
          while (v72 != v73)
          {
            if (*((int *)v72 + 1) >= 0x10000)
            {
              int v74 = "GC root stack offset is outside of fixed stack frame and out of range for ocaml GC!";
              goto LABEL_64;
            }
            (*(void (**)(void))(**(void **)(a4 + 272) + 520))(*(void *)(a4 + 272));
            uint64_t v72 = (llvm::Value *)((char *)v72 + 16);
          }
          uint64_t result = sub_1CD27C664(a4, v33, 0);
          v67 += 2;
          if (v67 == v66) {
            goto LABEL_58;
          }
        }
        int v75 = llvm::Value::getName(*v68);
        __int16 v99 = 1283;
        v98[0] = (uint64_t)"Function '";
        v98[2] = (uint64_t)v75;
        v98[3] = v76;
        v96[0] = (uint64_t)"' is too large for the ocaml GC! Live root count ";
        __int16 v97 = 259;
        sub_1CD3E3950(v98, v96, (uint64_t)v100);
        __int16 v95 = 266;
        v94[0] = (uint64_t)v90;
        sub_1CD3E3950(v100, v94, (uint64_t)v101);
        v92[0] = (uint64_t)" >= 65536.";
        __int16 v93 = 259;
        uint64_t v77 = v92;
LABEL_66:
        sub_1CD3E3950(v101, v77, (uint64_t)v102);
        llvm::report_fatal_error((llvm *)v102, (const llvm::Twine *)1);
      }
LABEL_58:
      uint64_t v35 = v81;
      a1 = v82;
LABEL_59:
      if (++v36 == v35) {
        return result;
      }
    }
    int v59 = 1;
    while (v58 != (llvm::Value *)-4096)
    {
      int v60 = v56 + v59++;
      uint64_t v56 = v60 & (v55 - 1);
      uint64_t v58 = *(llvm::Value **)(v54 + 16 * v56);
      if (v58 == v52)
      {
        BOOL v57 = (llvm::Value **)(v54 + 16 * v56);
        goto LABEL_50;
      }
    }
LABEL_49:
    BOOL v57 = (llvm::Value **)(v54 + 16 * v55);
    goto LABEL_50;
  }
  return result;
}

void sub_1CD2B8A78(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  v36[16] = *MEMORY[0x1E4F143B8];
  memset(&v33, 0, sizeof(v33));
  std::string::append(&v33, "caml");
  int v6 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v33.__r_.__value_.__l.__size_;
  std::string::size_type v8 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v33.__r_.__value_.__l.__size_;
  }
  char v10 = *(unsigned char *)(a1 + 191);
  if (v10 >= 0) {
    uint64_t v11 = (std::string *)(a1 + 168);
  }
  else {
    uint64_t v11 = *(std::string **)(a1 + 168);
  }
  if (v10 >= 0) {
    size_t v12 = v10 & 0x7F;
  }
  else {
    size_t v12 = *(void *)(a1 + 176);
  }
  uint64_t v13 = (char *)v11 + v12;
  uint64_t v14 = (char *)memchr(v11, 46, v12);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v13;
  }
  std::string::size_type v16 = v15 - (char *)v11;
  if (v6 < 0)
  {
    if (v15 == (char *)v11) {
      goto LABEL_39;
    }
    int v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
    std::string::size_type v18 = (v33.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    LOBYTE(v6) = *((unsigned char *)&v33.__r_.__value_.__s + 23);
    std::string::size_type v8 = size;
  }
  else
  {
    if (v15 == (char *)v11) {
      goto LABEL_39;
    }
    int v17 = &v33;
    std::string::size_type v18 = 22;
  }
  if (v17 <= v11 && (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + v8 + 1) > v11)
  {
    sub_1CC028D80(&__p, (char *)v11, v15, v15 - (char *)v11);
    if (v35 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v35 >= 0) {
      std::string::size_type v25 = HIBYTE(v35) & 0x7F;
    }
    else {
      std::string::size_type v25 = v35;
    }
    std::string::append(&v33, p_p, v25);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    if (v18 - v8 < v16)
    {
      std::string::__grow_by(&v33, v18, v8 + v16 - v18, v8, v8, 0, 0);
      v33.__r_.__value_.__l.__size_ = v8;
      LOBYTE(v6) = *((unsigned char *)&v33.__r_.__value_.__s + 23);
    }
    int v20 = &v33;
    if ((v6 & 0x80u) != 0) {
      int v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    char v21 = (char *)v20 + v8;
    std::string::size_type v22 = v16;
    do
    {
      std::string::value_type v23 = v11->__r_.__value_.__s.__data_[0];
      uint64_t v11 = (std::string *)((char *)v11 + 1);
      *v21++ = v23;
      --v22;
    }
    while (v22);
    *char v21 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      v33.__r_.__value_.__l.__size_ = v8 + v16;
    }
    else {
      *((unsigned char *)&v33.__r_.__value_.__s + 23) = (v8 + v16) & 0x7F;
    }
  }
LABEL_39:
  std::string::append(&v33, "__");
  std::string::append(&v33, a3);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v26 = &v33;
  }
  else {
    uint64_t v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  std::string::value_type v27 = __toupper(v26->__r_.__value_.__s.__data_[v9]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v28 = &v33;
  }
  else {
    size_t v28 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  v28->__r_.__value_.__s.__data_[v9] = v27;
  __p = v36;
  long long v35 = xmmword_1CFAC3020;
  __int16 v32 = 260;
  v31[0] = &v33;
  llvm::Mangler::getNameWithPrefix((uint64_t)&__p, v31, a1 + 272);
  uint64_t v29 = *(llvm::MCContext **)(a2 + 264);
  __int16 v32 = 261;
  v31[0] = __p;
  v31[1] = (void *)v35;
  uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v29, (unsigned __int8 ***)v31);
  (*(void (**)(void))(**(void **)(a2 + 272) + 304))();
  (*(void (**)(void, uint64_t, void))(**(void **)(a2 + 272) + 192))(*(void *)(a2 + 272), Symbol, 0);
  if (__p != v36) {
    free(__p);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1CD2B8DA8()
{
  qword_1EBD00150 = (uint64_t)"ocaml";
  *(void *)algn_1EBD00158 = 5;
  qword_1EBD00160 = (uint64_t)"ocaml 3.10-compatible collector";
  unk_1EBD00168 = 31;
  qword_1EBD00170 = (uint64_t)sub_1CD2B8108;
  qword_1EBD00180 = (uint64_t)&qword_1EBD00150;
  qword_1EBD00178 = 0;
  int v0 = (uint64_t *)llvm::Registry<llvm::GCMetadataPrinter>::Tail;
  if (!llvm::Registry<llvm::GCMetadataPrinter>::Tail) {
    int v0 = &llvm::Registry<llvm::GCMetadataPrinter>::Head;
  }
  *int v0 = (uint64_t)&qword_1EBD00178;
  llvm::Registry<llvm::GCMetadataPrinter>::Tail = (uint64_t)&qword_1EBD00178;
}

void sub_1CD2B8E10(void *a1)
{
  v53[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(a1[1] + 288) + 2064);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v51 = v1 + 24;
  if (v2 == v1 + 24)
  {
    int v17 = 0;
    uint64_t v4 = 0;
    std::string::size_type v18 = 0;
    __p = 0;
    goto LABEL_69;
  }
  BOOL v50 = 0;
  uint64_t v46 = 0;
  __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    if (v2) {
      int v6 = (llvm::Value *)(v2 - 56);
    }
    else {
      int v6 = 0;
    }
    v53[0] = v6;
    unsigned int v7 = 1;
    while (1)
    {
      uint64_t v8 = v53[--v7];
      unsigned int v52 = v7;
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        break;
      }
LABEL_23:
      if (!v7)
      {
        char v16 = 1;
        goto LABEL_26;
      }
    }
    while (1)
    {
      uint64_t v10 = *(void *)(v9 + 24);
      unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 4) {
        goto LABEL_20;
      }
      if (v11 >= 0x1C) {
        break;
      }
      if (v11 <= 0x14)
      {
        if (llvm::Value::stripPointerCasts(*(llvm::Value **)(v9 + 24)) != v6) {
          goto LABEL_25;
        }
        if (v52 >= 4uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v53[v52] = v10;
        unsigned int v7 = ++v52;
      }
LABEL_20:
      uint64_t v9 = *(void *)(v9 + 8);
      if (!v9) {
        goto LABEL_23;
      }
    }
    unsigned int v12 = v11 - 33;
    BOOL v13 = v12 > 0x33;
    uint64_t v14 = (1 << v12) & 0x8000000000041;
    BOOL v15 = v13 || v14 == 0;
    if (!v15 && v10 - 32 == v9) {
      goto LABEL_20;
    }
LABEL_25:
    char v16 = 0;
LABEL_26:
    if (v16)
    {
      int v17 = v5;
      std::string::size_type v18 = v3;
      goto LABEL_48;
    }
    if ((*((_DWORD *)v6 + 8) & 0x300) != 0x100
      || (uint64_t Symbol = (unsigned char *)llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), v6),
          (uint64_t v29 = sub_1CD8B3460((uint64_t)a1, Symbol)) == 0))
    {
LABEL_29:
      std::string::size_type v18 = v3;
      goto LABEL_30;
    }
    uint64_t v30 = v29;
    if (v3 < v46)
    {
      *v3++ = v29;
      goto LABEL_29;
    }
    uint64_t v31 = v3 - __p;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 61) {
      goto LABEL_86;
    }
    if (((char *)v46 - (char *)__p) >> 2 > v32) {
      unint64_t v32 = ((char *)v46 - (char *)__p) >> 2;
    }
    unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    if ((unint64_t)((char *)v46 - (char *)__p) < 0x7FFFFFFFFFFFFFF8) {
      unint64_t v33 = v32;
    }
    unint64_t v47 = v33;
    if (!v33)
    {
      uint64_t v34 = 0;
      goto LABEL_62;
    }
    if (v33 >> 61) {
      goto LABEL_87;
    }
    uint64_t v34 = (char *)operator new(8 * v33);
LABEL_62:
    long long v35 = (uint64_t *)&v34[8 * v31];
    *long long v35 = v30;
    int v36 = v35 + 1;
    while (v3 != __p)
    {
      uint64_t v37 = *--v3;
      *--long long v35 = v37;
    }
    uint64_t v46 = (uint64_t *)&v34[8 * v47];
    if (__p) {
      operator delete(__p);
    }
    __p = v35;
    std::string::size_type v18 = v36;
LABEL_30:
    uint64_t v19 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), v6);
    uint64_t v20 = v19;
    if (v5 < v50)
    {
      *uint64_t v5 = v19;
      int v17 = v5 + 1;
      goto LABEL_48;
    }
    char v21 = v18;
    uint64_t v22 = v5 - v4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61) {
LABEL_86:
    }
      abort();
    if (((char *)v50 - (char *)v4) >> 2 > v23) {
      unint64_t v23 = ((char *)v50 - (char *)v4) >> 2;
    }
    if ((unint64_t)((char *)v50 - (char *)v4) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24)
    {
      if (!(v24 >> 61))
      {
        std::string::size_type v25 = (char *)operator new(8 * v24);
        goto LABEL_42;
      }
LABEL_87:
      sub_1CB833614();
    }
    std::string::size_type v25 = 0;
LABEL_42:
    uint64_t v26 = (uint64_t *)&v25[8 * v22];
    *uint64_t v26 = v20;
    int v17 = v26 + 1;
    while (v5 != v4)
    {
      uint64_t v27 = *--v5;
      *--uint64_t v26 = v27;
    }
    BOOL v50 = (uint64_t *)&v25[8 * v24];
    if (v4) {
      operator delete(v4);
    }
    uint64_t v4 = v26;
    std::string::size_type v18 = v21;
LABEL_48:
    uint64_t v2 = *(void *)(v2 + 8);
    uint64_t v3 = v18;
    uint64_t v5 = v17;
  }
  while (v2 != v51);
LABEL_69:
  if (v4 != v17 || __p != v18 || a1[2] != a1[3])
  {
    uint64_t v38 = *(void *)(a1[1] + 272);
    (*(void (**)(uint64_t, void, void))(*(void *)v38 + 168))(v38, *(void *)(*(void *)(*(void *)(a1[1] + 264) + 168) + 704), 0);
    if (v4 != v17)
    {
      uint64_t v39 = v4;
      do
      {
        uint64_t v40 = *v39++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 360))(v38, v40);
      }
      while (v39 != v17);
    }
    (*(void (**)(uint64_t, void, void))(*(void *)v38 + 168))(v38, *(void *)(*(void *)(*(void *)(a1[1] + 264) + 168) + 712), 0);
    if (__p != v18)
    {
      size_t v41 = __p;
      do
      {
        uint64_t v42 = *v41++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 360))(v38, v42);
      }
      while (v41 != v18);
    }
    (*(void (**)(uint64_t, void, void))(*(void *)v38 + 168))(v38, *(void *)(*(void *)(*(void *)(a1[1] + 264) + 168) + 720), 0);
    uint64_t v43 = (uint64_t *)a1[2];
    char v44 = (uint64_t *)a1[3];
    while (v43 != v44)
    {
      uint64_t v45 = *v43++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 360))(v38, v45);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (v4) {
    operator delete(v4);
  }
}

char *sub_1CD2B93A8(char **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unsigned int v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF8];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  unsigned int v12 = a1[1];
  unsigned int v11 = a1[2];
  if (a5 <= (v11 - v12) >> 3)
  {
    uint64_t v18 = (v12 - v7) >> 3;
    if (v18 >= a5)
    {
      uint64_t v19 = &a3[a5];
      uint64_t v20 = a1[1];
    }
    else
    {
      uint64_t v19 = &a3[v18];
      uint64_t v20 = a1[1];
      if (v19 != a4)
      {
        char v21 = v19;
        uint64_t v22 = a1[1];
        do
        {
          uint64_t v23 = *v21++;
          *(void *)uint64_t v22 = v23;
          v22 += 8;
          v20 += 8;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if (v12 - v7 < 1) {
        return v7;
      }
    }
    unint64_t v24 = &v7[8 * a5];
    std::string::size_type v25 = &v20[-8 * a5];
    uint64_t v26 = v20;
    if (v25 < v12)
    {
      uint64_t v26 = v20;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while (v25 < v12);
    }
    a1[1] = v26;
    if (v20 != v24) {
      memmove(&v20[-8 * ((v20 - v24) >> 3)], v7, v20 - v24);
    }
    if (v19 != v9)
    {
      size_t v28 = v7;
      do
      {
        uint64_t v29 = *v9++;
        *(void *)size_t v28 = v29;
        v28 += 8;
      }
      while (v9 != v19);
    }
    return v7;
  }
  unint64_t v13 = a5 + ((v12 - v5) >> 3);
  if (v13 >> 61) {
    abort();
  }
  uint64_t v14 = v11 - v5;
  uint64_t v15 = v14 >> 2;
  if (v14 >> 2 <= v13) {
    uint64_t v15 = v13;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 >> 61) {
      sub_1CB833614();
    }
    int v17 = (char *)operator new(8 * v16);
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v30 = &v17[8 * (v6 >> 3)];
  uint64_t v31 = &v30[8 * a5];
  uint64_t v32 = 8 * a5;
  unint64_t v33 = v30;
  do
  {
    uint64_t v34 = *v9++;
    *(void *)unint64_t v33 = v34;
    v33 += 8;
    v32 -= 8;
  }
  while (v32);
  long long v35 = *a1;
  if (v7 == *a1)
  {
    uint64_t v37 = v30;
  }
  else
  {
    int v36 = v7;
    uint64_t v37 = v30;
    do
    {
      uint64_t v38 = *((void *)v36 - 1);
      v36 -= 8;
      *((void *)v37 - 1) = v38;
      v37 -= 8;
    }
    while (v36 != v35);
    unsigned int v12 = a1[1];
  }
  uint64_t v39 = &v17[8 * v16];
  if (v12 != v7) {
    memmove(v31, v7, v12 - v7);
  }
  uint64_t v40 = *a1;
  *a1 = v37;
  a1[1] = &v31[v12 - v7];
  a1[2] = v39;
  if (v40) {
    operator delete(v40);
  }
  return v30;
}

uint64_t sub_1CD2B95B4(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  uint64_t v4 = *(void *)(a2 + 512);
  uint64_t v5 = *(void *)(a2 + 520);
  int v6 = *(unsigned __int8 *)(a2 + 636);
  unsigned int v7 = *(uint64_t ****)a2;
  int v8 = sub_1CD89E0AC(*(void *)(a1 + 8));
  BOOL v9 = 0;
  if (v8) {
    BOOL v9 = *(unsigned char *)(a2 + 355) != 0;
  }
  *(unsigned char *)(a1 + 26) = v9;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
  int v11 = *(_DWORD *)(v10 + 948);
  if ((*((_WORD *)v7 + 9) & 8) != 0)
  {
    int v14 = *((_DWORD *)v7 + 5);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = (llvm::Value **)*(v7 - 1);
    }
    else {
      uint64_t v15 = (llvm::Value **)&v7[-4 * (v14 & 0x7FFFFFF)];
    }
    unint64_t v16 = llvm::Value::stripPointerCasts(*v15);
    if (*((unsigned char *)v16 + 16)) {
      unint64_t v13 = 0;
    }
    else {
      unint64_t v13 = v16;
    }
    uint64_t result = (uint64_t)llvm::classifyEHPersonality(v13, v17);
    if ((*((_WORD *)v7 + 9) & 8) != 0 && !result)
    {
      llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v7 + 14));
      uint64_t result = 0;
      BOOL v18 = 1;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v13 = 0;
  }
  if (v4 != v5)
  {
    if (v11 == 255)
    {
      BOOL v18 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  BOOL v18 = 0;
  if (v6 && v11 != 255) {
LABEL_18:
  }
    BOOL v18 = v13 != 0;
LABEL_19:
  *(unsigned char *)(a1 + 24) = v18;
  if (*(_DWORD *)(v10 + 952) == 255) {
    BOOL v18 = 0;
  }
  *(unsigned char *)(a1 + 25) = v18;
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(void *)(v19 + 256);
  if (*(_DWORD *)(v20 + 412) != 4 || ((int v21 = *(_DWORD *)(v20 + 420), v21 != 6) ? (v22 = v21 == 0) : (v22 = 1), v22))
  {
    if (v6 || result != 7) {
      goto LABEL_29;
    }
    uint64_t v26 = *(uint64_t ****)a2;
    if ((*(unsigned char *)(*(void *)a2 + 23) & 0x10) == 0)
    {
      uint64_t v39 = 0;
      int v36 = &byte_1CFBCE98E;
LABEL_49:
      uint64_t result = sub_1CD8B37F8(a1, *(unsigned int *)(*(void *)(a2 + 96) + 680), (uint64_t)v36, v39);
LABEL_29:
      *(unsigned char *)(a1 + 25) = v6;
      *(unsigned char *)(a1 + 24) = 0;
      return result;
    }
    uint64_t v27 = ***v26;
    uint64_t v28 = *(void *)(v27 + 152);
    uint64_t v29 = *(unsigned int *)(v27 + 168);
    if (v29)
    {
      LODWORD(v30) = (v29 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      uint64_t v31 = (uint64_t ****)(v28 + 16 * v30);
      uint64_t v32 = *v31;
      if (*v31 == v26) {
        goto LABEL_42;
      }
      int v33 = 1;
      while (v32 != (uint64_t ***)-4096)
      {
        int v34 = v30 + v33++;
        uint64_t v30 = v34 & (v29 - 1);
        uint64_t v32 = *(uint64_t ****)(v28 + 16 * v30);
        if (v32 == v26)
        {
          uint64_t v31 = (uint64_t ****)(v28 + 16 * v30);
          goto LABEL_42;
        }
      }
    }
    uint64_t v31 = (uint64_t ****)(v28 + 16 * v29);
LABEL_42:
    long long v35 = v31[1];
    uint64_t v38 = (uint64_t)*v35;
    int v36 = (char *)(v35 + 2);
    uint64_t v37 = v38;
    if (v38)
    {
      int v40 = *v36;
      if (v40 == 1) {
        uint64_t v39 = v37 - 1;
      }
      else {
        uint64_t v39 = v37;
      }
      if (v40 == 1) {
        int v36 = (char *)v31[1] + 17;
      }
    }
    else
    {
      uint64_t v39 = 0;
    }
    goto LABEL_49;
  }
  uint64_t v23 = *(void *)(a2 + 328);
  uint64_t v24 = *(void *)(v19 + 328);
  std::string::size_type v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80);

  return v25(a1, v23, v24);
}

void sub_1CD2B986C(uint64_t a1, uint64_t a2)
{
  v16[24] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 272);
  uint64_t v3 = *(void *)(a2 + 96);
  int v14 = v16;
  uint64_t v15 = 0x800000000;
  uint64_t v4 = *(unsigned int *)(v3 + 568);
  v9[0] = 0;
  v9[1] = 0;
  int v10 = 0;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    for (uint64_t i = 0; i != v4; ++i)
    {
      *(void *)&long long v8 = 0;
      *(void *)&long long v8 = *(void *)(*(void *)(v3 + 560) + v5) & 0xFFFFFFFFFFFFFFF8;
      *((_DWORD *)sub_1CD3CDD24(v9, &v8) + 2) = i;
      v5 += 24;
    }
  }
  *(void *)&long long v8 = *(void *)(a2 + 328);
  *((_DWORD *)sub_1CD3CDD24(v9, &v8) + 2) = -1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 520))(v7, 0xFFFFFFFFLL, 4);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 520))(v7, (int)v4, 4);
  int v11 = &v13;
  uint64_t v12 = 0x400000000;
  operator new[]();
}

uint64_t sub_1CD2BA1CC(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = *(uint64_t *****)(result + 32);
  uint64_t v2 = *v1;
  if ((*((unsigned char *)*v1 + 23) & 0x10) != 0)
  {
    uint64_t v3 = ***v2;
    uint64_t v4 = *(void *)(v3 + 152);
    uint64_t v5 = *(unsigned int *)(v3 + 168);
    if (v5)
    {
      LODWORD(v6) = (v5 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
      long long v8 = *v7;
      if (*v7 == v2)
      {
LABEL_10:
        int v11 = v7[1];
        int v14 = (unsigned __int8 **)*v11;
        uint64_t v12 = (char *)(v11 + 2);
        uint64_t v13 = v14;
        if (v14 && *v12 == 1)
        {
          uint64_t v13 = (unsigned __int8 **)((char *)v13 - 1);
          uint64_t v12 = (char *)v7[1] + 17;
        }
        goto LABEL_13;
      }
      int v9 = 1;
      while (v8 != (uint64_t ***)-4096)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & (v5 - 1);
        long long v8 = *(uint64_t ****)(v4 + 16 * v6);
        if (v8 == v2)
        {
          uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
          goto LABEL_10;
        }
      }
    }
    uint64_t v7 = (uint64_t ****)(v4 + 16 * v5);
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  uint64_t v12 = &byte_1CFBCE98E;
LABEL_13:
  uint64_t v15 = (llvm::MCContext *)v1[3];
  unint64_t v16 = "dtor";
  __int16 v21 = 1283;
  int v17 = *(unsigned __int8 *)(result + 190);
  if (!*(unsigned char *)(result + 190)) {
    unint64_t v16 = "catch";
  }
  v20[0] = "?";
  v20[2] = v16;
  uint64_t v18 = 4;
  if (!v17) {
    uint64_t v18 = 5;
  }
  v20[3] = v18;
  v22[0] = v20;
  void v22[2] = "$";
  __int16 v23 = 770;
  uint64_t v19 = *(unsigned int *)(result + 24);
  v24[0] = v22;
  v24[2] = v19;
  __int16 v25 = 2306;
  v26[0] = v24;
  v26[2] = "@?0?";
  __int16 v27 = 770;
  v28[0] = v26;
  v28[2] = v12;
  v28[3] = v13;
  __int16 v29 = 1282;
  v30[0] = (unsigned __int8 **)v28;
  v30[1] = v13;
  v30[2] = (unsigned __int8 **)"@4HA";
  __int16 v31 = 770;
  return llvm::MCContext::getOrCreateSymbol(v15, v30);
}

double sub_1CD2BA374(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, int a5)
{
  unint64_t v9 = *(void *)(a3 + 56);
  uint64_t v10 = *a4 + 48;
  long long v21 = a2;
  *(void *)&long long v22 = a3;
  *((void *)&v22 + 1) = a4;
  LOBYTE(v25) = 0;
  HIDWORD(v25) = a5;
  *(void *)&long long v24 = 0;
  long long v23 = v9;
  DWORD2(v24) = a5;
  sub_1CD2BA44C((uint64_t *)&v21);
  long long v16 = a2;
  *(void *)&long long v17 = a4;
  *((void *)&v17 + 1) = a4;
  LOBYTE(v20) = 0;
  HIDWORD(v20) = a5;
  *(void *)&long long v19 = 0;
  long long v18 = (unint64_t)v10;
  DWORD2(v19) = a5;
  sub_1CD2BA44C((uint64_t *)&v16);
  long long v11 = v24;
  *(_OWORD *)(a1 + 32) = v23;
  *(_OWORD *)(a1 + 48) = v11;
  long long v12 = v22;
  *(_OWORD *)a1 = v21;
  *(_OWORD *)(a1 + 16) = v12;
  long long v13 = v16;
  *(_OWORD *)(a1 + 88) = v17;
  double result = *(double *)&v18;
  long long v15 = v19;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v15;
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 72) = v13;
  return result;
}

uint64_t *sub_1CD2BA44C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  if (v2 == v3)
  {
LABEL_36:
    int v15 = *((_DWORD *)a1 + 17);
    if (*((_DWORD *)a1 + 14) == v15)
    {
      a1[1] = 0;
    }
    else
    {
      a1[5] = a1[1];
      a1[6] = 0;
      *((_DWORD *)a1 + 14) = v15;
    }
    return a1;
  }
  char v4 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 56);
      a1[4] = v5;
    }
    else
    {
      uint64_t v5 = a1[4];
    }
    uint64_t v6 = v2 + 48;
    if (v5 != v2 + 48) {
      break;
    }
LABEL_35:
    uint64_t v2 = *(void *)(v2 + 8);
    a1[2] = v2;
    char v4 = 1;
    if (v2 == v3) {
      goto LABEL_36;
    }
  }
  while (1)
  {
    if (*((unsigned char *)a1 + 64) || *((_DWORD *)a1 + 14) == *((_DWORD *)a1 + 17)) {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)(*(void *)(v5 + 16) + 8);
    if ((*(_WORD *)(v5 + 44) & 0xC) == 0 || (*(_WORD *)(v5 + 44) & 4) != 0) {
      break;
    }
    uint64_t v11 = v5;
    if ((v7 & 0x80) != 0) {
      goto LABEL_27;
    }
    while ((*(_WORD *)(v11 + 44) & 8) != 0)
    {
      uint64_t v11 = *(void *)(v11 + 8);
      if ((*(unsigned char *)(*(void *)(v11 + 16) + 8) & 0x80) != 0) {
        goto LABEL_27;
      }
    }
LABEL_14:
    if (**(_WORD **)(v5 + 16) == 4)
    {
      uint64_t v9 = *(void *)(*(void *)(v5 + 32) + 16);
      if (v9 == a1[1])
      {
        *((unsigned char *)a1 + 64) = 0;
      }
      else
      {
        uint64_t v12 = *a1;
        uint64_t v18 = 0;
        if (sub_1CD45B528(*(void *)(v12 + 72), *(_DWORD *)(v12 + 88), v9, &v18)) {
          uint64_t v13 = v18;
        }
        else {
          uint64_t v13 = *(void *)(v12 + 72) + 24 * *(unsigned int *)(v12 + 88);
        }
        if (*(void *)(*a1 + 72) + 24 * *(unsigned int *)(*a1 + 88) != v13)
        {
          int v14 = *(_DWORD *)(v13 + 8);
          *((unsigned char *)a1 + 64) = 1;
          if (v14 != *((_DWORD *)a1 + 14))
          {
            a1[5] = a1[1];
            a1[6] = v9;
            *((_DWORD *)a1 + 14) = v14;
            a1[1] = *(void *)(v13 + 16);
            uint64_t v16 = a1[4];
            if (!v16 || (*(unsigned char *)v16 & 4) == 0)
            {
              while ((*(_WORD *)(v16 + 44) & 8) != 0)
                uint64_t v16 = *(void *)(v16 + 8);
            }
            goto LABEL_50;
          }
          a1[1] = *(void *)(v13 + 16);
        }
      }
    }
    uint64_t v10 = a1[4];
    if (!v10 || (*(unsigned char *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
        uint64_t v10 = *(void *)(v10 + 8);
    }
    uint64_t v5 = *(void *)(v10 + 8);
    a1[4] = v5;
    if (v5 == v6)
    {
      uint64_t v2 = a1[2];
      uint64_t v3 = a1[3];
      goto LABEL_35;
    }
  }
  if ((v7 & 0x80) == 0) {
    goto LABEL_14;
  }
LABEL_27:
  if (sub_1CD8B1390(v5)) {
    goto LABEL_14;
  }
  a1[5] = a1[1];
  a1[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a1 + 17);
  a1[1] = 0;
  uint64_t v16 = a1[4];
  if (!v16 || (*(unsigned char *)v16 & 4) == 0)
  {
    while ((*(_WORD *)(v16 + 44) & 8) != 0)
      uint64_t v16 = *(void *)(v16 + 8);
  }
LABEL_50:
  a1[4] = *(void *)(v16 + 8);
  return a1;
}

uint64_t sub_1CD2BA6A8(uint64_t a1, _DWORD *a2)
{
  *(void *)uint64_t v26 = 0;
  if (sub_1CD553C1C(*(void *)(a1 + 1088), *(_DWORD *)(a1 + 1104), (uint64_t)a2, 0, v26)) {
    BOOL v4 = *(void *)v26 == *(void *)(a1 + 1088) + 24 * *(unsigned int *)(a1 + 1104);
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return *(unsigned int *)(*(void *)v26 + 16);
  }
  uint64_t v7 = a1 + 1088;
  long long v8 = &a2[-2 * a2[2]];
  uint64_t v9 = *((void *)v8 + 2);
  if (!v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    goto LABEL_23;
  }
  uint64_t v12 = *(unint64_t **)(v9 + 8);
  unint64_t v13 = *v12;
  uint64_t v10 = v12 + 3;
  unint64_t v11 = v13;
  if (v13)
  {
    unint64_t v14 = (v11 - 1);
    if ((int)v11 - 1 >= 0 && *((unsigned char *)v10 + v11 - 1) == 62)
    {
      int v15 = 0;
      do
      {
        int v16 = *((unsigned __int8 *)v10 + v14);
        if (v16 == 60)
        {
          if (!--v15)
          {
            if (v11 >= v14) {
              unint64_t v11 = v14;
            }
            break;
          }
        }
        else if (v16 == 62)
        {
          ++v15;
        }
      }
      while ((uint64_t)v14-- > 0);
    }
  }
LABEL_23:
  uint64_t v18 = (llvm::DIScope *)*((void *)v8 + 1);
  if (v18 && *(unsigned char *)v18 == 13)
  {
    int v19 = sub_1CD8B7838(a1, (uint64_t)v18, 0);
    int v20 = sub_1CD8B7934(a1, a2, (uint64_t)v18);
    v26[0] = 5634;
    *(_DWORD *)&v26[1] = v19;
    *(_DWORD *)&v26[3] = v20;
    uint64_t v21 = a1 + 544;
    __int16 v27 = v10;
    unint64_t v28 = v11;
    long long v22 = sub_1CD3C0A20((void *)(a1 + 560), v26);
  }
  else
  {
    int v24 = sub_1CD8B7700(a1, v18);
    int v25 = sub_1CD8B7838(a1, *(void *)&a2[-2 * a2[2] + 8], 0);
    v26[0] = 5633;
    *(_DWORD *)&v26[1] = v24;
    *(_DWORD *)&v26[3] = v25;
    uint64_t v21 = a1 + 544;
    __int16 v27 = v10;
    unint64_t v28 = v11;
    long long v22 = sub_1CD3C0850((void *)(a1 + 560), v26);
  }
  uint64_t v5 = sub_1CD8FA504(v21, v22, v23);
  v29[0] = (uint64_t)a2;
  v29[1] = 0;
  int v30 = v5;
  sub_1CD884C54((uint64_t)v26, v7, v29, &v30);
  return v5;
}

void sub_1CD2BA8A0(std::string *this, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3)
  {
    for (uint64_t i = 16 * a3; i; i -= 16)
    {
      size_t v8 = *(void *)(a2 + i - 8);
      if (v8 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_37;
      }
      uint64_t v9 = *(const void **)(a2 + i - 16);
      if (v8 >= 0x17)
      {
        uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v11 = v8 | 7;
        }
        uint64_t v12 = v11 + 1;
        p_dst = (void **)operator new(v11 + 1);
        std::string::size_type v23 = v8;
        int64_t v24 = v12 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v24) = *(void *)(a2 + i - 8);
        p_dst = (void **)&__dst;
        if (!v8) {
          goto LABEL_11;
        }
      }
      memmove(p_dst, v9, v8);
LABEL_11:
      *((unsigned char *)p_dst + v8) = 0;
      if (v24 >= 0) {
        unint64_t v13 = (const std::string::value_type *)&__dst;
      }
      else {
        unint64_t v13 = (const std::string::value_type *)__dst;
      }
      if (v24 >= 0) {
        std::string::size_type v14 = HIBYTE(v24) & 0x7F;
      }
      else {
        std::string::size_type v14 = v23;
      }
      std::string::append(this, v13, v14);
      if (SHIBYTE(v24) < 0) {
        operator delete(__dst);
      }
      std::string::append(this, "::");
    }
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
LABEL_37:
  }
    abort();
  if (a5 >= 0x17)
  {
    uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v16 = a5 | 7;
    }
    uint64_t v17 = v16 + 1;
    int v15 = (void **)operator new(v16 + 1);
    std::string::size_type v23 = a5;
    int64_t v24 = v17 | 0x8000000000000000;
    long long __dst = v15;
    goto LABEL_27;
  }
  HIBYTE(v24) = a5;
  int v15 = (void **)&__dst;
  if (a5) {
LABEL_27:
  }
    memmove(v15, a4, a5);
  *((unsigned char *)v15 + a5) = 0;
  if (v24 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&__dst;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)__dst;
  }
  if (v24 >= 0) {
    std::string::size_type v19 = HIBYTE(v24) & 0x7F;
  }
  else {
    std::string::size_type v19 = v23;
  }
  std::string::append(this, v18, v19);
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst);
  }
}

uint64_t sub_1CD2BAA70(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6)
{
  v51[4] = *MEMORY[0x1E4F143B8];
  int v35 = sub_1CD8B7838(a1, a3, 0);
  uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  int v49 = v51;
  uint64_t v50 = 0x800000000;
  if (!v11)
  {
    int v17 = 0;
    unsigned int v13 = 0;
    int v14 = 3;
    goto LABEL_12;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 8);
  if (v12)
  {
    int v14 = sub_1CD8B7838(a1, *(void *)(v11 - 8 * v12), 0);
    unsigned int v13 = 1;
    if ((a5 & 1) == 0) {
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v13 = 0;
    int v14 = 3;
    if ((a5 & 1) == 0)
    {
LABEL_4:
      uint64_t v15 = *(unsigned int *)(v11 + 8);
      if (v15 > v13)
      {
        uint64_t v16 = *(void *)(v11 - 8 * v15 + 8 * v13);
        if (v16)
        {
          if (*(unsigned char *)v16 == 12 && *(_WORD *)(v16 + 2) == 15)
          {
            int v17 = sub_1CD8BECB0(a1, v16, a2);
            ++v13;
            goto LABEL_12;
          }
        }
      }
    }
  }
  int v17 = 0;
LABEL_12:
  unint64_t v18 = v13;
  if (!v11) {
    goto LABEL_14;
  }
LABEL_13:
  for (unint64_t i = *(unsigned int *)(v11 + 8); v18 < i; unint64_t i = 0)
  {
    int v20 = sub_1CD8B7838(a1, *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8 * v18), 0);
    if (v50 >= (unint64_t)HIDWORD(v50)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v49 + v50) = v20;
    LODWORD(v50) = v50 + 1;
    ++v18;
    if (v11) {
      goto LABEL_13;
    }
LABEL_14:
    ;
  }
  unsigned int v21 = v50;
  if (!v50)
  {
    __int16 v45 = 4609;
    unint64_t v47 = 0;
    int v48 = 0;
    __p = 0;
    goto LABEL_27;
  }
  long long v22 = v49;
  std::string::size_type v23 = (char *)v49 + 4 * v50;
  if (*((_DWORD *)v23 - 1) != 3)
  {
    __int16 v45 = 4609;
    __p = 0;
    unint64_t v47 = 0;
    goto LABEL_26;
  }
  *((_DWORD *)v23 - 1) = 0;
  long long v22 = v49;
  unsigned int v21 = v50;
  __int16 v45 = 4609;
  unint64_t v47 = 0;
  int v48 = 0;
  __p = 0;
  if (v50)
  {
LABEL_26:
    __p = operator new(4 * v21);
    int v48 = (char *)__p + 4 * v21;
    memcpy(__p, v22, 4 * v21);
    unint64_t v47 = v48;
  }
LABEL_27:
  uint64_t v24 = a1 + 544;
  int v25 = (void *)(a1 + 560);
  uint64_t v26 = sub_1CD3BFBA0(v25, &v45);
  int v28 = sub_1CD8FA504(v24, v26, v27);
  char v29 = 0;
  int v30 = v35;
  switch(*(unsigned char *)(a2 + 52))
  {
    case 0xB1:
      char v29 = 7;
      break;
    case 0xB2:
      char v29 = 2;
      break;
    case 0xB3:
      char v29 = 4;
      break;
    case 0xB4:
      break;
    case 0xB5:
      char v29 = 11;
      break;
    default:
      char v29 = 0;
      int v30 = v35;
      break;
  }
  __int16 v36 = 4105;
  int v37 = v14;
  int v38 = v30;
  int v39 = v17;
  char v40 = v29;
  char v41 = a6;
  __int16 v42 = v50;
  int v43 = v28;
  int v44 = a4;
  __int16 v31 = sub_1CD3BF9D0(v25, &v36);
  uint64_t v33 = sub_1CD8FA504(v24, v31, v32);
  if (__p)
  {
    unint64_t v47 = __p;
    operator delete(__p);
  }
  if (v49 != v51) {
    free(v49);
  }
  return v33;
}

uint64_t sub_1CD2BADE4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  BOOL v4 = *(void **)result;
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    BOOL v4 = *(void **)result;
    while (*v4 != a2)
    {
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        BOOL v4 = &v2[v3];
        break;
      }
    }
  }
  if (v3 == v4 - v2)
  {
    if (v3 >= *(_DWORD *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v2[v3] = a2;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_1CD2BAE88(uint64_t a1)
{
  (*(void (**)(void, uint64_t, void, uint64_t, void))(**(void **)(a1 + 440) + 640))(*(void *)(a1 + 440), 4, 0, 1, 0);
  uint64_t v2 = *(void *)(a1 + 440);
  BOOL v4 = "Debug section magic";
  __int16 v5 = 259;
  (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v2 + 112))(v2, &v4, 1);
  return (*(uint64_t (**)(void))(**(void **)(a1 + 440) + 520))();
}

uint64_t sub_1CD2BAF78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const llvm::MCSymbol *)a2;
  if (a2)
  {
    unint64_t AssociatedFragment = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a2 + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
      *(void *)uint64_t v2 = *(void *)v2 & 7 | AssociatedFragment;
    }
    uint64_t v5 = *(void *)(AssociatedFragment + 16);
    if (*(_DWORD *)(v5 + 216)) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *(const llvm::MCSymbol **)(v5 + 232);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
  AssociativeCOFFSection = llvm::MCContext::getAssociativeCOFFSection(*(llvm::MCContext **)(*(void *)(a1 + 440) + 8), *(llvm::MCSectionCOFF **)(v6 + 384), v2, 0xFFFFFFFF);
  (*(void (**)(void, llvm::MCSectionCOFF *, void))(**(void **)(a1 + 440) + 168))(*(void *)(a1 + 440), AssociativeCOFFSection, 0);
  uint64_t result = sub_1CD4C96F8((uint64_t)v9, a1 + 896, (uint64_t *)&AssociativeCOFFSection);
  if (v9[16])
  {
    return sub_1CD2BAE88(a1);
  }
  return result;
}

uint64_t *sub_1CD2BB0B4(uint64_t a1)
{
  v33[19] = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(a1 + 544) + 56))();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 440);
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
    (*(void (**)(uint64_t, void, void))(*(void *)v3 + 168))(v3, *(void *)(v4 + 392), 0);
    sub_1CD2BAE88(a1);
    sub_1CD8FFB7C(v33, *(void *)(a1 + 608), *(unsigned int *)(a1 + 616));
    v20[2] = v33;
    unsigned int v21 = &unk_1F264A718;
    uint64_t v5 = *(void *)(a1 + 440);
    v20[0] = &unk_1F264A690;
    v20[1] = v5;
    int v25 = &unk_1F264D0C0;
    char v26 = 0;
    char v27 = 0;
    char v28 = 0;
    char v29 = 0;
    int v30 = v32;
    uint64_t v31 = 0x200000000;
    v32[3] = 0;
    v32[4] = 0;
    v32[5] = v20;
    v32[6] = 0;
    uint64_t v6 = operator new(8uLL);
    __p = v6;
    void *v6 = &v25;
    std::string::size_type v23 = v6 + 1;
    uint64_t v24 = v6 + 1;
    if ((*(unsigned int (**)(void *))(v33[0] + 56))(v33))
    {
      LODWORD(v7) = 4096;
      while (1)
      {
        long long v19 = *(_OWORD *)(v33[17] + 16 * ((v7 & 0x7FFFFFFF) - 4096));
        size_t v8 = (llvm *)sub_1CD8F974C(&v19, v7, &v21, 0, &v18);
        if (v18) {
          break;
        }
        int v9 = ((v7 + 1) & 0x7FFFFFFF) - 4096;
        int v10 = (*(uint64_t (**)(void *))(v33[0] + 56))(v33);
        BOOL v11 = v9 == v10;
        uint64_t v12 = v9 != v10;
        if (v11) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = (v7 + 1);
        }
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        unint64_t v7 = v13 | (v12 << 32);
        if (!HIDWORD(v7)) {
          goto LABEL_11;
        }
      }
      uint64_t v17 = v18;
      uint64_t v18 = 0;
      int v14 = (llvm::raw_ostream *)llvm::errs(v8);
      uint64_t v15 = "error: ";
      __int16 v16 = 259;
      llvm::logAllUnhandledErrors((llvm::raw_ostream *)&v17, v14, (uint64_t)&v15);
      uint64_t result = sub_1CC950BC0(&v17);
      __break(1u);
    }
    else
    {
LABEL_11:
      int v25 = &unk_1F264D0C0;
      if (v30 != v32) {
        free(v30);
      }
      unsigned int v21 = &unk_1F264A718;
      if (__p)
      {
        std::string::size_type v23 = __p;
        operator delete(__p);
      }
      return sub_1CD8C2C9C(v33);
    }
  }
  return result;
}

void sub_1CD2BB3C4(uint64_t a1, void *__src, unint64_t a3, int a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a3 >= (65279 - a4)) {
    size_t v5 = (65279 - a4);
  }
  else {
    size_t v5 = a3;
  }
  if (v5 >= 0x21) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v5) {
    memcpy(v6, __src, v5);
  }
  if (v5 + 1 > 0x20) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  v6[v5] = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 488))(a1, v6);
}

void sub_1CD2BB518(int8x8_t *a1, uint64_t a2)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)&a1[1] + 280);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 112))(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v5);
  uint64_t v8 = *(unsigned int *)(v4 + 776);
  if (v8)
  {
    uint64_t v9 = *(void *)(v4 + 768);
    uint64_t v10 = v9 + 32 * v8;
    uint64_t v11 = v7 + 8;
    uint64_t v12 = (char **)v34;
    do
    {
      if (*(void *)v9)
      {
        uint64_t v13 = *(void *)(v9 + 24);
        int v14 = *(_DWORD *)(v13 + 8) == 2 ? *(void **)(v13 - 8) : 0;
        uint64_t v37 = *(void *)v9;
        v38[0] = v14;
        sub_1CD2ABD98(a2, &v37, (uint64_t)&v33);
        LexicalScope = llvm::LexicalScopes::findLexicalScope(a1 + 8, *(const llvm::DILocation **)(v9 + 24));
        if (LexicalScope)
        {
          uint64_t v16 = (uint64_t)LexicalScope;
          uint64_t v32 = 0;
          uint64_t v17 = *(llvm::DIExpression **)(v9 + 8);
          if (!v17)
          {
            char v28 = v12;
            int v18 = 0;
            char v27 = 0;
LABEL_12:
            unsigned int v31 = 0;
            uint64_t v30 = v6;
            int v19 = (*(uint64_t (**)(uint64_t, void, void, unsigned int *))(*(void *)v6 + 232))(v6, *(void *)(*(void *)&a1[1] + 280), *(unsigned int *)(v9 + 16), &v31);
            uint64_t v29 = v11;
            __int16 CodeViewRegNum = llvm::MCRegisterInfo::getCodeViewRegNum(v11, v31);
            v38[0] = v39;
            v38[1] = (void *)0x100000000;
            WORD2(v37) = 0;
            LODWORD(v37) = (2 * (v18 + v19)) | 1;
            HIWORD(v37) = CodeViewRegNum;
            uint64_t v21 = *(unsigned int *)(v16 + 88);
            if (v21)
            {
              long long v22 = *(uint64_t **)(v16 + 80);
              std::string::size_type v23 = &v22[2 * v21];
              do
              {
                uint64_t v24 = sub_1CD28F688((uint64_t)a1, *v22);
                uint64_t v25 = sub_1CD28F6F0((uint64_t)a1, v22[1]);
                if (!v25) {
                  uint64_t v25 = *(void *)(*(void *)&a1[1] + 448);
                }
                uint64_t v33 = v25;
                sub_1CCD94EF8((uint64_t)v38, v24, &v33);
                v22 += 2;
              }
              while (v22 != v23);
            }
            v34[0] = &v35;
            v34[1] = 0x100000000;
            char v36 = 0;
            uint64_t v33 = *(void *)v9;
            uint64_t v12 = v28;
            sub_1CD8BCD84((uint64_t)v28, (uint64_t)&v37);
            if (v27) {
              char v36 = 1;
            }
            sub_1CD8B7B04((uint64_t)a1, (uint64_t)&v33, v16);
            sub_1CD8C2CF8(v28);
            uint64_t v6 = v30;
            if (v38[0] != v39) {
              free(v38[0]);
            }
            uint64_t v11 = v29;
            goto LABEL_8;
          }
          char v26 = (void *)*((void *)v17 + 3);
          if (((*((void *)v17 + 4) - (void)v26) & 0x7FFFFFFF8) == 8 && *v26 == 6)
          {
            char v28 = v12;
            int v18 = 0;
            char v27 = 1;
            goto LABEL_12;
          }
          if (llvm::DIExpression::extractIfOffset(v17, &v32))
          {
            char v28 = v12;
            char v27 = 0;
            int v18 = v32;
            goto LABEL_12;
          }
        }
      }
LABEL_8:
      v9 += 32;
    }
    while (v9 != v10);
  }
}

void sub_1CD2BB83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 8) + 280) + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  uint64_t v8 = *(unsigned int *)(a3 + 8);
  if (v8)
  {
    uint64_t v9 = *(void **)a3;
    uint64_t v10 = *(void *)a3 + 16 * v8;
    uint64_t v33 = v7 + 8;
    while (1)
    {
      if ((*v9 & 4) != 0) {
        goto LABEL_49;
      }
      sub_1CD8A2940(*v9 & 0xFFFFFFFFFFFFFFF8, &v38);
      if (!v42) {
        goto LABEL_49;
      }
      unsigned int v11 = v39;
      if (*(unsigned char *)(a2 + 64)) {
        break;
      }
      if (v39 != 2) {
        goto LABEL_12;
      }
      if (*(void *)(v38.i64[1] + 8)) {
        goto LABEL_11;
      }
      *(unsigned char *)(a2 + 64) = 1;
      uint64_t v16 = *(unsigned int *)(a2 + 16);
      if (v16)
      {
        uint64_t v17 = *(void *)(a2 + 8);
        uint64_t v18 = 40 * v16;
        do
        {
          int v19 = *(void **)(v17 + v18 - 32);
          if ((void *)(v17 + v18 - 16) != v19) {
            free(v19);
          }
          v18 -= 40;
        }
        while (v18);
      }
      *(_DWORD *)(a2 + 16) = 0;
      sub_1CD2BB83C(a1, a2, a3);
      int v12 = 1;
LABEL_45:
      if (v42)
      {
        if ((void *)v38.i64[1] != v40) {
          free((void *)v38.i64[1]);
        }
      }
      if ((v12 | 4) != 4) {
        return;
      }
LABEL_49:
      v9 += 2;
      if (v9 == (void *)v10) {
        return;
      }
    }
    if (!v39 || *(void *)(v38.i64[1] + 8 * v39 - 8))
    {
LABEL_11:
      int v12 = 4;
      goto LABEL_45;
    }
    unsigned int v11 = --v39;
LABEL_12:
    int v12 = 4;
    if (v11 <= 1 && v38.i32[0])
    {
      uint64_t v35 = v37;
      uint64_t v36 = 0x100000000;
      unsigned __int16 CodeViewRegNum = llvm::MCRegisterInfo::getCodeViewRegNum(v33, v38.u32[0]);
      HIWORD(v34) = CodeViewRegNum;
      char v14 = v34 & 0xFE | (v39 != 0);
      LODWORD(v34) = v34 & 0xFFFFFFFE | (v39 != 0);
      if (v39) {
        uint64_t v15 = *(void *)(v38.i64[1] + 8 * v39 - 8);
      }
      else {
        LODWORD(v15) = 0;
      }
      LODWORD(v20) = (2 * v15) | v14 & 1;
      if (v41) {
        unint64_t v20 = (v40[2] << 30) & 0xFFFFFFFE00000000 | v20 | 0x100000000;
      }
      else {
        unint64_t v20 = v20;
      }
      LODWORD(v34) = v20;
      WORD2(v34) = WORD2(v20);
      unsigned int v21 = *(_DWORD *)(a2 + 16);
      if (!v21
        || (uint64_t v22 = *(void *)(a2 + 8) + 40 * v21,
            unint64_t v23 = *(unsigned int *)(v22 - 40) | ((unint64_t)*(unsigned __int16 *)(v22 - 36) << 32),
            ((*(_DWORD *)(v22 - 40) ^ v20) & 1) != 0)
        || ((v23 ^ v20) & 0x100000000) != 0
        || ((unint64_t)((uint64_t)*(int *)(v22 - 40) << 16) >> 17) != ((unint64_t)((uint64_t)(int)v20 << 16) >> 17)
        || ((v23 >> 33) & 0x7FFF) != ((v20 >> 33) & 0x7FFF)
        || *(unsigned __int16 *)(v22 - 34) != CodeViewRegNum)
      {
        sub_1CD8BCD84(a2 + 8, (uint64_t)&v34);
      }
      if (v35 != v37) {
        free(v35);
      }
      uint64_t v24 = sub_1CD28F688(a1, *v9 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v25 = v9[1];
      if (v25 == -1)
      {
        uint64_t v28 = *(void *)(*(void *)(a1 + 8) + 448);
      }
      else
      {
        uint64_t v26 = *(void *)(*(void *)a3 + 16 * v25);
        unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8;
        if ((v26 & 4) != 0) {
          uint64_t v28 = sub_1CD28F6F0(a1, v27);
        }
        else {
          uint64_t v28 = sub_1CD28F688(a1, v27);
        }
      }
      uint64_t v34 = v28;
      uint64_t v29 = *(void *)(a2 + 8) + 40 * *(unsigned int *)(a2 + 16);
      uint64_t v30 = (void *)(v29 - 32);
      uint64_t v31 = *(unsigned int *)(v29 - 24);
      if (v31 && (uint64_t v32 = *v30 + 16 * v31, *(void *)(v32 - 8) == v24)) {
        *(void *)(v32 - 8) = v28;
      }
      else {
        sub_1CCD94EF8((uint64_t)v30, v24, &v34);
      }
      int v12 = 0;
    }
    goto LABEL_45;
  }
}

uint64_t sub_1CD2BBCEC(uint64_t a1, uint64_t a2)
{
  v42[4] = *MEMORY[0x1E4F143B8];
  char v40 = v42;
  uint64_t v41 = 0x800000000;
  uint64_t v4 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  if (v4) {
    uint64_t v5 = (void *)(v4 - 8 * *(unsigned int *)(v4 + 8));
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 == (void *)v4) {
    goto LABEL_14;
  }
  do
  {
    int v6 = sub_1CD8B7838(a1, *v5, 0);
    if (v41 >= (unint64_t)HIDWORD(v41)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v40 + v41) = v6;
    uint64_t v7 = (v41 + 1);
    LODWORD(v41) = v41 + 1;
    ++v5;
  }
  while (v5 != (void *)v4);
  if (v7 <= 1)
  {
LABEL_12:
    if (v7)
    {
      uint64_t v8 = (int *)v40;
      uint64_t v10 = v7;
      goto LABEL_16;
    }
LABEL_14:
    LOWORD(v11) = 0;
    __int16 v36 = 4609;
    int8x16_t v38 = 0;
    unsigned int v39 = 0;
    __p = 0;
    int v12 = 3;
    goto LABEL_20;
  }
  uint64_t v8 = (int *)v40;
  uint64_t v9 = (char *)v40 + 4 * v7;
  if (*((_DWORD *)v9 - 1) == 3)
  {
    *((_DWORD *)v9 - 1) = 0;
    LODWORD(v7) = v41;
    goto LABEL_12;
  }
  uint64_t v10 = v7;
LABEL_16:
  int v14 = *v8;
  uint64_t v13 = v8 + 1;
  int v12 = v14;
  __int16 v36 = 4609;
  int8x16_t v38 = 0;
  unsigned int v39 = 0;
  __p = 0;
  uint64_t v11 = v10 - 1;
  if (v10 != 1)
  {
    uint64_t v15 = (char *)operator new(4 * v11);
    uint64_t v16 = v15;
    __p = v15;
    unsigned int v39 = &v15[4 * v11];
    size_t v17 = 4 * v10 - 4;
    if (v7 != 1) {
      memcpy(v15, v13, v17);
    }
    int8x16_t v38 = &v16[v17];
  }
LABEL_20:
  uint64_t v18 = a1 + 544;
  int v19 = (void *)(a1 + 560);
  unint64_t v20 = sub_1CD3BFBA0(v19, &v36);
  int v22 = sub_1CD8FA504(v18, v20, v21);
  char v23 = 0;
  switch(*(unsigned char *)(a2 + 52))
  {
    case 0xB1:
      char v23 = 7;
      break;
    case 0xB2:
      char v23 = 2;
      break;
    case 0xB3:
      char v23 = 4;
      break;
    case 0xB4:
      break;
    case 0xB5:
      char v23 = 11;
      break;
    default:
      char v23 = 0;
      break;
  }
  uint64_t v24 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(v24 + 8);
    if (!v25) {
      goto LABEL_31;
    }
    uint64_t v24 = *(void *)(v24 - 8 * v25);
    if (!v24) {
      goto LABEL_32;
    }
    if (*(unsigned char *)v24 == 13) {
      LODWORD(v24) = (*(_DWORD *)(v24 + 28) >> 26) & 1;
    }
    else {
LABEL_31:
    }
      LOBYTE(v24) = 0;
  }
LABEL_32:
  __int16 v30 = 4104;
  int v31 = v12;
  char v32 = v23;
  char v33 = v24;
  __int16 v34 = v11;
  int v35 = v22;
  uint64_t v26 = sub_1CD3BF800(v19, &v30);
  uint64_t v28 = sub_1CD8FA504(v18, v26, v27);
  if (__p)
  {
    int8x16_t v38 = (char *)__p;
    operator delete(__p);
  }
  if (v40 != v42) {
    free(v40);
  }
  return v28;
}

uint64_t sub_1CD2BBFFC(uint64_t a1)
{
  uint64_t v2 = a1 - 8 * *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3) {
    uint64_t result = (**(void **)(v3 + 8) != 0) << 9;
  }
  else {
    uint64_t result = 0;
  }
  uint64_t v5 = *(unsigned __int8 **)(v2 + 8);
  if (v5)
  {
    int v6 = *v5;
    if (v6 == 13) {
      uint64_t result = result | 8;
    }
    else {
      uint64_t result = result;
    }
    if (*(_WORD *)(a1 + 2) == 4)
    {
      if (v6 == 17) {
        return result | 0x100;
      }
      else {
        return result;
      }
    }
    else
    {
      while (1)
      {
        int v7 = *v5;
        if (v7 == 17) {
          break;
        }
        if ((v7 - 11) < 4 || v7 == 33 || (v7 & 0xFE) == 0x12 || v7 == 20 || v7 == 21)
        {
          unsigned int v9 = *((_DWORD *)v5 + 2);
          v5 += 8;
          uint64_t v8 = v9;
        }
        else
        {
          if (v7 != 31) {
            return result;
          }
          uint64_t v8 = *((unsigned int *)v5 + 2);
        }
        uint64_t v5 = *(unsigned __int8 **)&v5[-8 * v8];
        if (!v5) {
          return result;
        }
      }
      return result | 0x100;
    }
  }
  return result;
}

unsigned int *sub_1CD2BC0C8(unsigned int *result)
{
  uint64_t v1 = result;
  unsigned int v2 = result[2];
  if (!v2 && !result[3]) {
    return result;
  }
  uint64_t v3 = result[4];
  uint64_t v4 = *(void ***)result;
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_24:
      *((void *)v1 + 1) = 0;
      return result;
    }
    uint64_t v10 = 16 * v3;
    uint64_t result = (unsigned int *)(v4 + 1);
    while (1)
    {
      uint64_t v11 = *((void *)result - 1);
      if (v11 == -8192) {
        goto LABEL_22;
      }
      if (v11 != -4096) {
        break;
      }
LABEL_23:
      result += 4;
      v10 -= 16;
      if (!v10) {
        goto LABEL_24;
      }
    }
    uint64_t result = (unsigned int *)sub_1CD2BF1D4((void ***)result);
LABEL_22:
    *((void *)result - 1) = -4096;
    goto LABEL_23;
  }
  uint64_t result = (unsigned int *)(v4 + 1);
  uint64_t v5 = 16 * v3;
  do
  {
    if ((*((void *)result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
      uint64_t result = (unsigned int *)sub_1CD2BF1D4((void ***)result);
    }
    result += 4;
    v5 -= 16;
  }
  while (v5);
  if (!v2)
  {
    if (v1[4])
    {
      uint64_t result = (unsigned int *)MEMORY[0x1D25D9CD0](*(void *)v1, 8);
      *(void *)uint64_t v1 = 0;
      *((void *)v1 + 1) = 0;
      v1[4] = 0;
      return result;
    }
    goto LABEL_24;
  }
  int v6 = 1 << (33 - __clz(v2 - 1));
  if (v6 <= 64) {
    unsigned int v7 = 64;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v7 == v1[4])
  {
    *((void *)v1 + 1) = 0;
    uint64_t v8 = 16 * v7;
    unsigned int v9 = *(void **)v1;
    do
    {
      *unsigned int v9 = -4096;
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)v1, 8);
    unint64_t v12 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
    unint64_t v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    LODWORD(v13) = (((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8)) + 1;
    v1[4] = v13;
    uint64_t result = (unsigned int *)operator new(16 * v13, (std::align_val_t)8uLL);
    *(void *)uint64_t v1 = result;
    *((void *)v1 + 1) = 0;
    uint64_t v14 = v1[4];
    if (v14)
    {
      uint64_t v15 = 16 * v14;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 4;
        v15 -= 16;
      }
      while (v15);
    }
  }
  return result;
}

void sub_1CD2BC264(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v4 = (void *)(a1 + 48);
  *(void *)(a1 + 104) = 0;
  uint64_t v5 = (void *)(a1 + 104);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v6 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 32);
  if (v6) {
    unsigned int v7 = (uint64_t *)(v6 - 8 * *(unsigned int *)(v6 + 8));
  }
  else {
    unsigned int v7 = 0;
  }
  while (v7 != (uint64_t *)v6)
  {
    uint64_t v8 = (unsigned __int8 *)*v7;
    if (!*v7) {
      goto LABEL_52;
    }
    int v9 = *v8;
    switch(v9)
    {
      case 12:
        unsigned int v11 = *((unsigned __int16 *)v8 + 1);
        if (v11 <= 0x15)
        {
          if (v11 == 15)
          {
            uint64_t v24 = *(void *)&v8[-8 * *((unsigned int *)v8 + 2) + 16];
            if (v24)
            {
              uint64_t v25 = *(void **)(v24 + 8);
              if (*v25 == 15)
              {
                uint64_t v26 = v25[3];
                uint64_t v27 = *(void *)((char *)v25 + 31);
                if (v26 == 0x705F6C6274765F5FLL && v27 == 0x657079745F727470) {
                  *(_DWORD *)(a1 + 96) = sub_1CD8B7838((uint64_t)a2, *v7, 0);
                }
              }
            }
          }
          else if (v11 == 13)
          {
            sub_1CD8BEF08(a2, a1, (llvm::DIDerivedType *)*v7);
          }
        }
        else
        {
          if (v11 == 22)
          {
            uint64_t v16 = *(void **)(a1 + 112);
            unint64_t v29 = *(void *)(a1 + 120);
            if ((unint64_t)v16 >= v29)
            {
              __int16 v30 = (void *)*v5;
              uint64_t v31 = ((uint64_t)v16 - *v5) >> 3;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_76;
              }
              uint64_t v33 = v29 - (void)v30;
              if (v33 >> 2 > v32) {
                unint64_t v32 = v33 >> 2;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v22 = v32;
              }
              if (v22)
              {
                if (v22 >> 61) {
                  goto LABEL_77;
                }
                char v23 = (char *)operator new(8 * v22);
              }
              else
              {
                char v23 = 0;
              }
              __int16 v34 = &v23[8 * v31];
              *(void *)__int16 v34 = v8;
              size_t v17 = v34 + 8;
              if (v16 != v30)
              {
                do
                {
                  uint64_t v42 = *--v16;
                  *((void *)v34 - 1) = v42;
                  v34 -= 8;
                }
                while (v16 != v30);
LABEL_48:
                uint64_t v16 = (void *)*v5;
              }
LABEL_49:
              *(void *)(a1 + 104) = v34;
              *(void *)(a1 + 112) = v17;
              *(void *)(a1 + 120) = &v23[8 * v22];
              if (v16) {
                operator delete(v16);
              }
LABEL_51:
              *(void *)(a1 + 112) = v17;
              break;
            }
LABEL_16:
            void *v16 = v8;
            size_t v17 = v16 + 1;
            goto LABEL_51;
          }
          if (v11 == 28)
          {
            unint64_t v13 = *(void **)(a1 + 8);
            unint64_t v12 = *(void *)(a1 + 16);
            if ((unint64_t)v13 >= v12)
            {
              __int16 v36 = *(void **)a1;
              uint64_t v37 = ((uint64_t)v13 - *(void *)a1) >> 3;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61) {
LABEL_76:
              }
                abort();
              uint64_t v39 = v12 - (void)v36;
              if (v39 >> 2 > v38) {
                unint64_t v38 = v39 >> 2;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                if (v40 >> 61) {
LABEL_77:
                }
                  sub_1CB833614();
                uint64_t v41 = (char *)operator new(8 * v40);
              }
              else
              {
                uint64_t v41 = 0;
              }
              uint64_t v43 = &v41[8 * v37];
              *(void *)uint64_t v43 = v8;
              uint64_t v14 = v43 + 8;
              if (v13 != v36)
              {
                do
                {
                  uint64_t v44 = *--v13;
                  *((void *)v43 - 1) = v44;
                  v43 -= 8;
                }
                while (v13 != v36);
                unint64_t v13 = *(void **)a1;
              }
              *(void *)a1 = v43;
              *(void *)(a1 + 8) = v14;
              *(void *)(a1 + 16) = &v41[8 * v40];
              if (v13) {
                operator delete(v13);
              }
            }
            else
            {
              *unint64_t v13 = v8;
              uint64_t v14 = v13 + 1;
            }
            *(void *)(a1 + 8) = v14;
          }
        }
        break;
      case 13:
        uint64_t v16 = *(void **)(a1 + 112);
        unint64_t v15 = *(void *)(a1 + 120);
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = (void *)*v5;
          uint64_t v19 = ((uint64_t)v16 - *v5) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            goto LABEL_76;
          }
          uint64_t v21 = v15 - (void)v18;
          if (v21 >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 61) {
              goto LABEL_77;
            }
            char v23 = (char *)operator new(8 * v22);
          }
          else
          {
            char v23 = 0;
          }
          __int16 v34 = &v23[8 * v19];
          *(void *)__int16 v34 = v8;
          size_t v17 = v34 + 8;
          if (v16 != v18)
          {
            do
            {
              uint64_t v35 = *--v16;
              *((void *)v34 - 1) = v35;
              v34 -= 8;
            }
            while (v16 != v18);
            goto LABEL_48;
          }
          goto LABEL_49;
        }
        goto LABEL_16;
      case 17:
        uint64_t v46 = *(void *)&v8[-8 * *((unsigned int *)v8 + 2) + 16];
        uint64_t v10 = (unint64_t *)sub_1CD8BF0B4(v4, &v46);
        sub_1CD486FFC(v10, (uint64_t)v8);
        break;
    }
LABEL_52:
    ++v7;
  }
}

BOOL sub_1CD2BC5FC(uint64_t a1)
{
  uint64_t v1 = a1 - 8 * *(unsigned int *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2 && **(void **)(v2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 56);
  return (!v3 || !**(void **)(v3 + 8)) && (*(unsigned char *)(a1 + 28) & 4) == 0;
}

unint64_t sub_1CD2BC644(uint64_t a1, uint64_t a2)
{
  v116[31] = *MEMORY[0x1E4F143B8];
  sub_1CD2BC264((uint64_t)&v107, (_OWORD *)a1, a2);
  sub_1CD8F87A4((uint64_t)v116);
  sub_1CD8F88BC((uint64_t)v116, 0);
  int v2 = 0;
  uint64_t v3 = v107;
  uint64_t v4 = v108;
  if (v107 != v108)
  {
    int v2 = 0;
    do
    {
      uint64_t v5 = *v3;
      int v6 = *((_DWORD *)*v3 + 7);
      if ((v6 & 0x20) != 0)
      {
        unsigned int VBPtrOffset = llvm::DIDerivedType::getVBPtrOffset(*v3);
        unint64_t v9 = *((void *)v5 + 5);
        if ((~v6 & 0x24) != 0) {
          __int16 v10 = 5121;
        }
        else {
          __int16 v10 = 5122;
        }
        uint64_t v11 = v6 & 3;
        __int16 v12 = 1;
        unsigned int v13 = VBPtrOffset;
        switch(v11)
        {
          case 1:
            break;
          case 2:
            __int16 v12 = 2;
            break;
          case 3:
            __int16 v12 = 3;
            break;
          default:
            if (*(_WORD *)(a2 + 2) == 2) {
              __int16 v12 = 1;
            }
            else {
              __int16 v12 = 3;
            }
            break;
        }
        int v16 = sub_1CD8B7838(a1, ((void *)v5 - *((unsigned int *)v5 + 2))[3], 0);
        int v17 = sub_1CD8BF534(a1);
        LOWORD(v103) = v10;
        WORD1(v103) = v12;
        HIDWORD(v103) = v16;
        LODWORD(__p) = v17;
        unint64_t v105 = v13;
        unint64_t v106 = (v9 >> 2);
        sub_1CD8F8C70((uint64_t)v116, (__int16 *)&v103);
      }
      else
      {
        __int16 v7 = 1;
        switch(v6 & 3)
        {
          case 1:
            break;
          case 2:
            __int16 v7 = 2;
            break;
          case 3:
            __int16 v7 = 3;
            break;
          default:
            if (*(_WORD *)(a2 + 2) == 2) {
              __int16 v7 = 1;
            }
            else {
              __int16 v7 = 3;
            }
            break;
        }
        int v14 = sub_1CD8B7838(a1, ((void *)v5 - *((unsigned int *)v5 + 2))[3], 0);
        unint64_t v15 = (void *)(*((void *)v5 + 5) >> 3);
        LOWORD(v103) = 5120;
        WORD1(v103) = v7;
        HIDWORD(v103) = v14;
        __p = v15;
        sub_1CD8F8B58((uint64_t)v116, (__int16 *)&v103);
      }
      ++v2;
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v18 = v109;
  uint64_t v19 = v110;
  if (v109 != v110)
  {
    uint64_t v20 = a1;
    while (2)
    {
      uint64_t v21 = *v18;
      int v22 = sub_1CD8B7838(v20, *(void *)(*v18 - 8 * *(unsigned int *)(*v18 + 8) + 24), 0);
      char v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = (void *)(v21 - 8 * *(unsigned int *)(v21 + 8));
      uint64_t v26 = v25[2];
      if (v26)
      {
        uint64_t v27 = *(void ***)(v26 + 8);
        uint64_t v28 = (char *)*v27;
        uint64_t v24 = v27 + 3;
        char v23 = v28;
      }
      int v29 = *(_DWORD *)(v21 + 28);
      __int16 v30 = 1;
      switch(v29 & 3)
      {
        case 1:
          goto LABEL_34;
        case 2:
          __int16 v30 = 2;
LABEL_34:
          if ((v29 & 0x1000) == 0) {
            goto LABEL_35;
          }
          goto LABEL_56;
        case 3:
          __int16 v30 = 3;
          if ((v29 & 0x1000) != 0) {
            goto LABEL_56;
          }
          goto LABEL_35;
        default:
          if (*(_WORD *)(a2 + 2) == 2) {
            __int16 v30 = 1;
          }
          else {
            __int16 v30 = 3;
          }
          if ((v29 & 0x1000) != 0)
          {
LABEL_56:
            LOWORD(v103) = 5390;
            WORD1(v103) = v30;
            HIDWORD(v103) = v22;
            __p = v24;
            unint64_t v105 = (unint64_t)v23;
            sub_1CD8F8EA0((uint64_t)v116, (__int16 *)&v103);
          }
          else
          {
LABEL_35:
            if (v26) {
              BOOL v31 = (*(_DWORD *)(v21 + 28) & 0x40) == 0;
            }
            else {
              BOOL v31 = 1;
            }
            if (!v31
              && (uint64_t v32 = *(void *)(v26 + 8), *(void *)v32 >= 6uLL)
              && ((v33 = *(_DWORD *)(v32 + 24), int v34 = *(unsigned __int16 *)(v32 + 28), v33 == 1953527391)
                ? (BOOL v35 = v34 == 9330)
                : (BOOL v35 = 0),
                  v35))
            {
              int v36 = sub_1CD8B7838(v20, v25[3], 0);
              LOWORD(v103) = 5129;
              *(_DWORD *)((char *)&v103 + 2) = v36;
              sub_1CD8F8D88((uint64_t)v116, (__int16 *)&v103);
            }
            else
            {
              uint64_t v37 = v18[1];
              unint64_t v38 = v37 + *(void *)(v21 + 40);
              if ((v29 & 0x80000) != 0)
              {
                uint64_t v39 = v25[4];
                uint64_t v40 = v37 + *(void *)(v21 + 40);
                if (v39)
                {
                  uint64_t v41 = *(void *)(v39 + 128);
                  uint64_t v40 = v37 + *(void *)(v21 + 40);
                  if (v41)
                  {
                    uint64_t v40 = v37 + *(void *)(v21 + 40);
                    if (*(unsigned char *)(v41 + 16) == 16)
                    {
                      uint64_t v42 = (void *)(v41 + 24);
                      if (*(_DWORD *)(v41 + 32) >= 0x41u) {
                        uint64_t v42 = (void *)*v42;
                      }
                      uint64_t v40 = *v42 + v37;
                    }
                  }
                }
                char v43 = v38 - v40;
                uint64_t v44 = *(void *)(v21 + 32);
                LOWORD(v103) = 4613;
                *(_DWORD *)((char *)&v103 + 2) = v22;
                BYTE6(v103) = v44;
                HIBYTE(v103) = v43;
                __int16 v45 = sub_1CD3C0680((void *)(a1 + 560), (__int16 *)&v103);
                int v22 = sub_1CD8FA504(a1 + 544, v45, v46);
                unint64_t v38 = v40;
                uint64_t v20 = a1;
              }
              LOWORD(v103) = 5389;
              WORD1(v103) = v30;
              HIDWORD(v103) = v22;
              __p = (void *)(v38 >> 3);
              unint64_t v105 = (unint64_t)v24;
              unint64_t v106 = (unint64_t)v23;
              sub_1CD8F90D0((uint64_t)v116, (__int16 *)&v103);
            }
          }
          ++v2;
          v18 += 2;
          if (v18 == v19) {
            goto LABEL_58;
          }
          continue;
      }
    }
  }
  uint64_t v20 = a1;
LABEL_58:
  unint64_t v47 = v111;
  __int16 v93 = v112;
  if (v111 != v112)
  {
    uint64_t v92 = v20 + 544;
    __int16 v91 = (void *)(v20 + 560);
    do
    {
      int v49 = (_DWORD **)(v47 + 1);
      unint64_t v48 = v47[1];
      if ((v48 & 4) != 0)
      {
        unint64_t v51 = v48 & 0xFFFFFFFFFFFFFFF8;
        int v49 = *(_DWORD ***)v51;
        uint64_t v50 = *(void *)v51 + 8 * *(unsigned int *)(v51 + 8);
      }
      else
      {
        uint64_t v50 = (uint64_t)&v49[v48 > 7];
      }
      uint64_t v94 = v47;
      unsigned int v52 = *(uint64_t **)(*v47 + 8);
      uint64_t v96 = *v52;
      __int16 v97 = v52 + 3;
      if (v49 != (_DWORD **)v50)
      {
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v53 = 0;
        while (2)
        {
          BOOL v57 = *v49;
          int v58 = sub_1CD8B7934(v20, *v49, a2);
          int v59 = v58;
          unsigned int v60 = v57[10];
          if ((v60 & 0x40000) != 0) {
            int v61 = (*(_DWORD *)(*(void *)(*(void *)(*(void *)(v20 + 16) + 2064) + 504) + 4) >> 3) * v57[8];
          }
          else {
            int v61 = -1;
          }
          int v62 = 1;
          switch(v60 & 3)
          {
            case 1u:
              goto LABEL_76;
            case 2u:
              int v62 = 2;
LABEL_76:
              if ((v60 & 0x1000) == 0) {
                goto LABEL_77;
              }
              goto LABEL_81;
            case 3u:
              int v62 = 3;
              if ((v60 & 0x1000) != 0) {
                goto LABEL_81;
              }
              goto LABEL_77;
            default:
              if (*(_WORD *)(a2 + 2) == 2) {
                int v62 = 1;
              }
              else {
                int v62 = 3;
              }
              if ((v60 & 0x1000) != 0)
              {
LABEL_81:
                int v63 = 8;
              }
              else
              {
LABEL_77:
                int v63 = v57[11] & 3;
                if (v63)
                {
                  if (v63 == 2)
                  {
                    int v63 = 24;
                    int v64 = 20;
                  }
                  else
                  {
                    int v63 = 16;
                    int v64 = 4;
                  }
                  if ((v60 & 0x40000) == 0) {
                    int v63 = v64;
                  }
                }
              }
              unsigned int v65 = (v63 | v62) & 0xFFFFFEFF | (((v60 >> 6) & 1) << 8);
              if (v56 >= v55)
              {
                uint64_t v66 = ((char *)v56 - (char *)v53) >> 5;
                unint64_t v67 = v66 + 1;
                if ((unint64_t)(v66 + 1) >> 59) {
                  goto LABEL_120;
                }
                if (((char *)v55 - (char *)v53) >> 4 > v67) {
                  unint64_t v67 = ((char *)v55 - (char *)v53) >> 4;
                }
                if ((unint64_t)((char *)v55 - (char *)v53) >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v68 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v68 = v67;
                }
                if (v68)
                {
                  if (v68 >> 59) {
                    sub_1CB833614();
                  }
                  uint64_t v69 = (char *)operator new(32 * v68);
                }
                else
                {
                  uint64_t v69 = 0;
                }
                uint64_t v70 = &v69[32 * v66];
                *(_WORD *)uint64_t v70 = 5393;
                *(_DWORD *)(v70 + 2) = v59;
                *((_WORD *)v70 + 3) = v65;
                *((_DWORD *)v70 + 2) = v61;
                *((void *)v70 + 2) = v97;
                *((void *)v70 + 3) = v96;
                if (v56 == v53)
                {
                  uint64_t v53 = (__int16 *)&v69[32 * v66];
                  uint64_t v20 = a1;
                }
                else
                {
                  unint64_t v71 = (__int16 *)&v69[32 * v66];
                  uint64_t v20 = a1;
                  do
                  {
                    long long v72 = *((_OWORD *)v56 - 1);
                    *((_OWORD *)v71 - 2) = *((_OWORD *)v56 - 2);
                    *((_OWORD *)v71 - 1) = v72;
                    v71 -= 16;
                    v56 -= 16;
                  }
                  while (v56 != v53);
                  uint64_t v56 = v53;
                  uint64_t v53 = v71;
                }
                uint64_t v55 = (__int16 *)&v69[32 * v68];
                uint64_t v54 = (__int16 *)(v70 + 32);
                if (v56) {
                  operator delete(v56);
                }
              }
              else
              {
                __int16 *v56 = 5393;
                *(_DWORD *)(v56 + 1) = v58;
                v56[3] = v65;
                *((_DWORD *)v56 + 2) = v61;
                uint64_t v54 = v56 + 16;
                *((void *)v56 + 2) = v97;
                *((void *)v56 + 3) = v96;
              }
              ++v2;
              ++v49;
              uint64_t v56 = v54;
              if (v49 == (_DWORD **)v50) {
                goto LABEL_105;
              }
              continue;
          }
        }
      }
      uint64_t v53 = 0;
      uint64_t v54 = 0;
LABEL_105:
      uint64_t v73 = (char *)v54 - (char *)v53;
      if ((char *)v54 - (char *)v53 == 32)
      {
        sub_1CD8F9300((uint64_t)v116, v53);
        int v74 = v94;
      }
      else
      {
        LOWORD(v103) = 4614;
        unint64_t v105 = 0;
        unint64_t v106 = 0;
        __p = 0;
        if (v54 != v53)
        {
          if (v73 < 0) {
LABEL_120:
          }
            abort();
          __p = operator new((char *)v54 - (char *)v53);
          unint64_t v105 = (unint64_t)__p;
          int v75 = (char *)__p + 32 * (v73 >> 5);
          unint64_t v106 = (unint64_t)v75;
          memcpy(__p, v53, (char *)v54 - (char *)v53);
          unint64_t v105 = (unint64_t)v75;
        }
        uint64_t v76 = sub_1CD3C1160(v91, &v103);
        int v78 = sub_1CD8FA504(v92, v76, v77);
        v99[0] = 5391;
        v99[1] = (unint64_t)v73 >> 5;
        int v100 = v78;
        uint64_t v101 = v97;
        uint64_t v102 = v96;
        sub_1CD8F8FB8((uint64_t)v116, v99);
        int v74 = v94;
        if (__p)
        {
          unint64_t v105 = (unint64_t)__p;
          operator delete(__p);
        }
      }
      if (v53) {
        operator delete(v53);
      }
      unint64_t v47 = v74 + 2;
    }
    while (v47 != v93);
  }
  uint64_t v79 = v114;
  for (unint64_t i = v115; v79 != i; ++v79)
  {
    uint64_t v81 = *v79;
    int v82 = sub_1CD8B7838(a1, *v79, 0);
    unint64_t v83 = 0;
    __int16 v84 = 0;
    uint64_t v85 = *(void *)(v81 - 8 * *(unsigned int *)(v81 + 8) + 16);
    if (v85)
    {
      uint64_t v86 = *(void ***)(v85 + 8);
      __int16 v87 = *v86;
      __int16 v84 = v86 + 3;
      unint64_t v83 = (unint64_t)v87;
    }
    LOWORD(v103) = 5392;
    *(_DWORD *)((char *)&v103 + 2) = v82;
    __p = v84;
    unint64_t v105 = v83;
    sub_1CD8F91E8((uint64_t)v116, (__int16 *)&v103);
    ++v2;
  }
  unsigned int v88 = sub_1CD8FA6A4(a1 + 544, v116);
  uint64_t v89 = v113;
  sub_1CD3BC238((uint64_t)v116);
  sub_1CD8C2D70((uint64_t)&v107);
  return v88 | (unint64_t)(v89 << 32);
}

uint64_t sub_1CD2BCEB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  v74[22] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 24)) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v73 = 0;
  int v10 = sub_1CD8C3544(*(void *)(result + 736), *(_DWORD *)(result + 752), a2, &v73);
  uint64_t v11 = *(void *)(v9 + 736);
  unsigned int v12 = *(_DWORD *)(v9 + 752);
  unsigned int v13 = (llvm::DIScope *)(v11 + 96 * v12);
  if (v10) {
    int v14 = v73;
  }
  else {
    int v14 = (llvm::DIScope *)(v11 + 96 * v12);
  }
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v73 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)(v9 + 760), *(_DWORD *)(v9 + 776), v15, &v73);
  uint64_t v16 = 0;
  if (result && v73 != (llvm::DIScope *)(*(void *)(v9 + 760) + 16 * *(unsigned int *)(v9 + 776))) {
    uint64_t v16 = *((void *)v73 + 1);
  }
  if (**(unsigned char **)(a2 + 8) == 18) {
    int v17 = *(llvm::DIScope **)(a2 + 8);
  }
  else {
    int v17 = 0;
  }
  if (*(_DWORD *)(a2 + 88) != 1
    || (v13 == v14 ? (BOOL v18 = v16 == 0) : (BOOL v18 = 0),
        !v18 ? (int v19 = 0) : (int v19 = 1),
        (uint64_t result = sub_1CD28F6F0(v9, *(void *)(*(void *)(a2 + 80) + 8))) == 0
     || (v17 ? (BOOL v20 = v19 == 0) : (BOOL v20 = 0), !v20)))
  {
    if (v13 == v14)
    {
      if (!v16) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t result = sub_1CD8C001C(a4, *((void *)v14 + 1), *((void *)v14 + 1) + 72 * *((unsigned int *)v14 + 4));
      if (!v16) {
        goto LABEL_26;
      }
    }
    uint64_t result = (uint64_t)sub_1CD3D61B4(a5, *(unsigned char **)v16, (unsigned char *)(*(void *)v16 + 16 * *(unsigned int *)(v16 + 8)));
LABEL_26:
    uint64_t v21 = *(unsigned int *)(a2 + 40);
    if (v21)
    {
      int v22 = *(uint64_t **)(a2 + 32);
      uint64_t v23 = 8 * v21;
      do
      {
        uint64_t v24 = *v22++;
        uint64_t result = sub_1CD2BCEB8(v9, v24, a3, a4, a5);
        v23 -= 8;
      }
      while (v23);
    }
    return result;
  }
  unint64_t v25 = *(void *)(v9 + 696);
  uint64_t v65 = 0;
  long long v67 = 0u;
  uint64_t v68 = 0;
  memset(v70, 0, sizeof(v70));
  memset(v64, 0, sizeof(v64));
  int v62 = (uint64_t *)(v25 + 184);
  v63[0] = v64;
  v63[1] = 0x100000000;
  uint64_t v66 = (char *)&v67 + 8;
  DWORD1(v67) = 1;
  uint64_t v69 = (char *)v70 + 8;
  DWORD1(v70[0]) = 1;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  int v59 = v17;
  uint64_t v73 = v17;
  sub_1CD8C2E14((uint64_t)v74, (uint64_t)v63);
  uint64_t v26 = v73;
  unint64_t v27 = 0x9DDFEA08EB382D69 * (((8 * v73) + 8) ^ ((unint64_t)v73 >> 32));
  unint64_t v28 = 0x9DDFEA08EB382D69 * (((unint64_t)v73 >> 32) ^ (v27 >> 47) ^ v27);
  unint64_t v29 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
  unint64_t v61 = v25;
  int8x8_t v30 = *(int8x8_t *)(v25 + 192);
  if (v30)
  {
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      unint64_t v25 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
      if (v29 >= *(void *)&v30) {
        unint64_t v25 = v29 % *(void *)&v30;
      }
    }
    else
    {
      unint64_t v25 = v29 & (*(void *)&v30 - 1);
    }
    uint64_t v32 = *(void ***)(*v62 + 8 * v25);
    if (v32)
    {
      for (unint64_t i = *v32; i; unint64_t i = (void *)*i)
      {
        unint64_t v34 = i[1];
        if (v34 == v29)
        {
          if ((llvm::DIScope *)i[2] == v73)
          {
            char v58 = 1;
            goto LABEL_86;
          }
        }
        else
        {
          if (v31.u32[0] > 1uLL)
          {
            if (v34 >= *(void *)&v30) {
              v34 %= *(void *)&v30;
            }
          }
          else
          {
            v34 &= *(void *)&v30 - 1;
          }
          if (v34 != v25) {
            break;
          }
        }
      }
    }
  }
  unint64_t v60 = (unint64_t)v30;
  unint64_t i = operator new(0xC8uLL);
  void *i = 0;
  i[1] = v29;
  i[2] = v26;
  sub_1CD8C2E14((uint64_t)(i + 3), (uint64_t)v74);
  unint64_t v35 = v60;
  int v36 = (void *)v61;
  float v37 = (float)(unint64_t)(*(void *)(v61 + 208) + 1);
  float v38 = *(float *)(v61 + 216);
  if (!v60 || (float)(v38 * (float)v60) < v37)
  {
    BOOL v39 = 1;
    if (v60 >= 3) {
      BOOL v39 = (v60 & (v60 - 1)) != 0;
    }
    unint64_t v40 = v39 | (2 * v60);
    unint64_t v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41) {
      size_t prime = v41;
    }
    else {
      size_t prime = v40;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v43 = *(int8x8_t *)(v61 + 192);
    if (prime > *(void *)&v43) {
      goto LABEL_60;
    }
    if (prime < *(void *)&v43)
    {
      unint64_t v44 = vcvtps_u32_f32((float)*(unint64_t *)(v61 + 208) / *(float *)(v61 + 216));
      if (*(void *)&v43 < 3uLL || (uint8x8_t v45 = (uint8x8_t)vcnt_s8(v43), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        size_t v47 = prime;
        unint64_t v44 = std::__next_prime(v44);
        size_t prime = v47;
        int v36 = (void *)v61;
      }
      else
      {
        uint64_t v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2) {
          unint64_t v44 = v46;
        }
      }
      if (prime <= v44) {
        size_t prime = v44;
      }
      if (prime < *(void *)&v43) {
LABEL_60:
      }
        sub_1CD3F1760((uint64_t)v62, prime);
    }
    unint64_t v35 = v36[24];
    if ((v35 & (v35 - 1)) != 0)
    {
      if (v29 >= v35) {
        unint64_t v25 = v29 % v35;
      }
      else {
        unint64_t v25 = v29;
      }
    }
    else
    {
      unint64_t v25 = (v35 - 1) & v29;
    }
  }
  uint64_t v48 = *v62;
  int v49 = *(void **)(*v62 + 8 * v25);
  if (v49)
  {
    void *i = *v49;
LABEL_84:
    *int v49 = i;
    goto LABEL_85;
  }
  void *i = v36[25];
  v36[25] = i;
  *(void *)(v48 + 8 * v25) = v36 + 25;
  if (*i)
  {
    unint64_t v50 = *(void *)(*i + 8);
    if ((v35 & (v35 - 1)) != 0)
    {
      if (v50 >= v35) {
        v50 %= v35;
      }
    }
    else
    {
      v50 &= v35 - 1;
    }
    int v49 = (void *)(*v62 + 8 * v50);
    goto LABEL_84;
  }
LABEL_85:
  char v58 = 0;
  ++v36[26];
LABEL_86:
  sub_1CD8C2EC0((uint64_t)v74);
  uint64_t result = (uint64_t)sub_1CD8C2EC0((uint64_t)v63);
  if ((v58 & 1) == 0)
  {
    unint64_t v51 = *(uint64_t **)(a2 + 80);
    i[21] = sub_1CD28F688(v9, *v51);
    i[22] = sub_1CD28F6F0(v9, v51[1]);
    uint64_t result = (uint64_t)llvm::DIScope::getName(v59);
    i[23] = result;
    i[24] = v52;
    if (v13 == v14)
    {
      if (!v16)
      {
LABEL_89:
        unsigned int v53 = *(_DWORD *)(a3 + 8);
        if (v53 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v53) = i + 3;
        ++*(_DWORD *)(a3 + 8);
        uint64_t v54 = *(unsigned int *)(a2 + 40);
        if (v54)
        {
          uint64_t v55 = *(uint64_t **)(a2 + 32);
          uint64_t v56 = 8 * v54;
          do
          {
            uint64_t v57 = *v55++;
            uint64_t result = sub_1CD2BCEB8(v9, v57, i + 18, i + 3, i + 14);
            v56 -= 8;
          }
          while (v56);
        }
        return result;
      }
    }
    else
    {
      uint64_t result = sub_1CD8C0BD0((uint64_t)(i + 3), (uint64_t)v14 + 8);
      if (!v16) {
        goto LABEL_89;
      }
    }
    uint64_t result = sub_1CD4684F0((uint64_t)(i + 14), v16);
    goto LABEL_89;
  }
  return result;
}

void sub_1CD2BD4B0(int8x8_t *a1, void *a2)
{
  uint64_t v4 = (uint64_t ***)*a2;
  unsigned int v5 = *a2 >> 4;
  if ((*(unsigned char *)(*a2 + 23) & 0x20) != 0)
  {
    uint64_t v6 = ***v4;
    unint64_t v77 = (uint64_t ***)*a2;
    int v7 = *(_DWORD *)(v6 + 2496);
    if (v7)
    {
      uint64_t v8 = *(void *)(v6 + 2480);
      int v9 = v7 - 1;
      unsigned int v10 = v9 & (v5 ^ (v4 >> 9));
      uint64_t v11 = (uint64_t ****)(v8 + 40 * v10);
      unsigned int v12 = *v11;
      if (*v11 == v4) {
        goto LABEL_12;
      }
      unsigned int v13 = 0;
      int v14 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == (uint64_t ***)-8192;
        }
        if (v15) {
          unsigned int v13 = v11;
        }
        unsigned int v16 = v10 + v14++;
        unsigned int v10 = v16 & v9;
        uint64_t v11 = (uint64_t ****)(v8 + 40 * v10);
        unsigned int v12 = *v11;
        if (*v11 == v4) {
          goto LABEL_12;
        }
      }
      if (v13) {
        long long v67 = v13;
      }
      else {
        long long v67 = v11;
      }
    }
    else
    {
      long long v67 = 0;
    }
    uint64_t v68 = sub_1CC609054(v6 + 2480, (uint64_t)&v77, (uint64_t *)&v77, v67);
    uint64_t v69 = (uint64_t)v77;
    v68[3] = 0;
    v68[4] = 0;
    *uint64_t v68 = v69;
    v68[1] = v68 + 3;
    v68[2] = 0x100000000;
  }
LABEL_12:
  sub_1CD8BCE18(a1);
  uint64_t v17 = (uint64_t)a1[30];
  if (v17) {
    sub_1CD2BCEB8((uint64_t)a1, v17, *(void *)&a1[87] + 224, *(void *)&a1[87] + 64, (unsigned int *)(*(void *)&a1[87] + 152));
  }
  sub_1CD8C0110((char **)&a1[92]);
  if (!*(unsigned char *)(*(void *)&a1[87] + 345))
  {
    uint64_t v18 = ***v4;
    unint64_t v77 = v4;
    int v19 = *(_DWORD *)(v18 + 2496);
    if (v19)
    {
      uint64_t v20 = *(void *)(v18 + 2480);
      int v21 = v19 - 1;
      unsigned int v22 = v21 & (v5 ^ (v4 >> 9));
      uint64_t v23 = (uint64_t ****)(v20 + 40 * v22);
      uint64_t v24 = *v23;
      if (*v23 == v4) {
        goto LABEL_25;
      }
      unint64_t v25 = 0;
      int v26 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v24 == (uint64_t ***)-8192;
        }
        if (v27) {
          unint64_t v25 = v23;
        }
        unsigned int v28 = v22 + v26++;
        unsigned int v22 = v28 & v21;
        uint64_t v23 = (uint64_t ****)(v20 + 40 * v22);
        uint64_t v24 = *v23;
        if (*v23 == v4) {
          goto LABEL_25;
        }
      }
      if (v25) {
        uint64_t v71 = v25;
      }
      else {
        uint64_t v71 = v23;
      }
    }
    else
    {
      uint64_t v71 = 0;
    }
    uint64_t v23 = (uint64_t ****)sub_1CC609054(v18 + 2480, (uint64_t)&v77, (uint64_t *)&v77, v71);
    uint64_t v72 = (uint64_t)v77;
    v23[3] = 0;
    v23[4] = 0;
    char *v23 = (uint64_t ***)v72;
    v23[1] = (uint64_t ***)(v23 + 3);
    v23[2] = (uint64_t ***)0x100000000;
LABEL_25:
    unint64_t v29 = v23[1];
    if (*(_DWORD *)v29)
    {
      uint64_t v30 = 16 * *((unsigned int *)v23 + 4) - 16;
      do
      {
        int v31 = *((_DWORD *)v29 + 4);
        v29 += 2;
        v30 -= 16;
      }
      while (v31);
    }
    if ((*((unsigned char *)v29[1] + 43) & 2) == 0)
    {
      uint64_t v70 = (void *)sub_1CD8C3F50((uint64_t)&a1[116], (uint64_t)v4);
      if (*(void **)&a1[120] != v70) {
        sub_1CD8C3FB8((uint64_t)&a1[116], v70);
      }
      goto LABEL_77;
    }
  }
  uint64_t v32 = a2 + 40;
  uint64_t v73 = a2;
  int v74 = a2 + 40;
  int v33 = (void *)a2[41];
  while (v33 != v32)
  {
    unint64_t v34 = v33 + 6;
    for (uint64_t i = v33[7]; (void *)i != v34; uint64_t i = *(void *)(i + 8))
    {
      unint64_t v36 = *(void *)(i + 48);
      BOOL v37 = v36 >= 8;
      float v38 = (unsigned char *)(v36 & 0xFFFFFFFFFFFFFFF8);
      if (!v37 || (*(void *)(i + 48) & 7) != 3 || v38 == 0) {
        goto LABEL_41;
      }
      if (!v38[6]) {
        goto LABEL_41;
      }
      unint64_t v41 = *(unsigned __int8 **)&v38[8 * *(int *)v38 + 8 + 8 * (v38[5] + v38[4])];
      if (!v41) {
        goto LABEL_41;
      }
      uint64_t v42 = (void *)a1[87];
      uint64_t v43 = sub_1CD28F688((uint64_t)a1, i);
      uint64_t v44 = sub_1CD28F6F0((uint64_t)a1, i);
      uint64_t v45 = v44;
      int v46 = *v41;
      if ((v46 - 11) >= 4 && v46 != 33) {
        unint64_t v41 = 0;
      }
      uint64_t v48 = (uint64_t *)v42[35];
      unint64_t v47 = v42[36];
      if ((unint64_t)v48 < v47)
      {
        uint64_t *v48 = v43;
        v48[1] = v44;
        v48[2] = (uint64_t)v41;
        v42[35] = v48 + 3;
LABEL_41:
        if ((*(unsigned char *)i & 4) != 0) {
          continue;
        }
        goto LABEL_67;
      }
      uint64_t v76 = v33;
      int v49 = (void *)v42[34];
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (v48 - v49) + 1;
      if (v50 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_90;
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (void)v49) >> 3);
      if (2 * v51 > v50) {
        unint64_t v50 = 2 * v51;
      }
      if (v51 >= 0x555555555555555) {
        unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
      }
      unint64_t v75 = v50;
      if (v50)
      {
        if (v50 > 0xAAAAAAAAAAAAAAALL) {
          sub_1CB833614();
        }
        uint64_t v52 = v44;
        unsigned int v53 = (char *)operator new(24 * v50);
        uint64_t v45 = v52;
      }
      else
      {
        unsigned int v53 = 0;
      }
      uint64_t v54 = (uint64_t *)&v53[8 * (v48 - v49)];
      uint64_t *v54 = v43;
      v54[1] = v45;
      v54[2] = (uint64_t)v41;
      uint64_t v55 = v54;
      if (v48 != v49)
      {
        do
        {
          long long v56 = *(_OWORD *)(v48 - 3);
          *(v55 - 1) = *(v48 - 1);
          *(_OWORD *)(v55 - 3) = v56;
          v55 -= 3;
          v48 -= 3;
        }
        while (v48 != v49);
        uint64_t v48 = (uint64_t *)v42[34];
      }
      uint64_t v57 = v54 + 3;
      v42[34] = v55;
      v42[35] = v54 + 3;
      v42[36] = &v53[24 * v75];
      if (v48) {
        operator delete(v48);
      }
      v42[35] = v57;
      int v33 = v76;
      if (i) {
        goto LABEL_41;
      }
LABEL_67:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
    int v33 = (void *)v33[1];
    uint64_t v32 = v74;
  }
  char v58 = (unsigned char *)v73[76];
  int v59 = (unsigned char *)v73[77];
  uint64_t v60 = v59 - v58;
  if (v59 == v58)
  {
    unint64_t v61 = 0;
    int v64 = 0;
    int v62 = 0;
  }
  else
  {
    if (v60 < 0) {
LABEL_90:
    }
      abort();
    unint64_t v61 = (char *)operator new(v59 - v58);
    int v62 = &v61[16 * (v60 >> 4)];
    size_t v63 = v60 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v61, v58, v63);
    int v64 = &v61[v63];
  }
  uint64_t v65 = (void *)a1[87];
  uint64_t v66 = (void *)v65[31];
  if (v66)
  {
    v65[32] = v66;
    operator delete(v66);
  }
  v65[31] = v61;
  v65[32] = v64;
  v65[33] = v62;
  *(void *)(*(void *)&a1[87] + 304) = *(void *)(*(void *)&a1[1] + 448);
LABEL_77:
  a1[87] = 0;
}

void *sub_1CD2BD99C(uint64_t a1, uint64_t a2, llvm::APInt *a3, void **a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1CD8BBCF4(a1, 0x1107u);
  uint64_t v9 = *(void *)(a1 + 440);
  v25[0] = "Type";
  __int16 v27 = 259;
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 112))(v9, v25, 1);
  uint64_t v10 = *(void *)(a1 + 440);
  uint64_t v11 = sub_1CD8B7838(a1, a2, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 520))(v10, v11, 4);
  uint64_t v12 = *(void *)(a1 + 440);
  v25[0] = "Value";
  __int16 v27 = 259;
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v12 + 112))(v12, v25, 1);
  uint64_t v23 = &unk_1F26437B0;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(v24, v32, 10, 1);
  v24[6] = 0;
  v25[0] = v26;
  v25[1] = (void *)0x200000000;
  uint64_t v28 = 0;
  unint64_t v29 = &v23;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  __int16 v21 = 257;
  sub_1CD8F8200(a3, v25, (uint64_t)v20, &v22);
  (*(void (**)(void))(**(void **)(a1 + 440) + 504))();
  uint64_t v13 = *(void *)(a1 + 440);
  v20[0] = "Name";
  __int16 v21 = 259;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 112))(v13, v20, 1);
  char v14 = *((unsigned char *)a4 + 23);
  BOOL v15 = v14 < 0;
  if (v14 >= 0) {
    unsigned int v16 = a4;
  }
  else {
    unsigned int v16 = *a4;
  }
  unint64_t v17 = v14 & 0x7F;
  if (v15) {
    unint64_t v18 = (unint64_t)a4[1];
  }
  else {
    unint64_t v18 = v17;
  }
  sub_1CD2BB3C4(*(void *)(a1 + 440), v16, v18, 3840);
  (*(void (**)(void))(**(void **)(a1 + 440) + 640))();
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 440) + 192))(*(void *)(a1 + 440), v8, 0);
  if (v25[0] != v26) {
    free(v25[0]);
  }
  return sub_1CD049224(&v23);
}

uint64_t sub_1CD2BDCAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 488))();
}

uint64_t sub_1CD2BDCDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 536))();
}

uint64_t sub_1CD2BDD0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 504))();
}

uint64_t sub_1CD2BDD3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a2, 1);
}

uint64_t sub_1CD2BDD68(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), a2, 1);
}

uint64_t sub_1CD2BDD94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

double sub_1CD2BDDBC@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!a2) {
    return result;
  }
  if (a2 <= 0xFFF) {
    uint64_t v4 = sub_1CD8FB72C(a2);
  }
  else {
    uint64_t v4 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
  }
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v6 = v4;
  size_t v7 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v13) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_12;
    }
  }
  memmove(p_dst, v6, v7);
LABEL_12:
  *((unsigned char *)p_dst + v7) = 0;
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)a3 = __dst;
  *(void *)(a3 + 16) = v13;
  return result;
}

void sub_1CD2BDED8()
{
}

void sub_1CD2BDEEC(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;
        sub_1CD487110(v4 - 1);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CD2BDF74(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 16)
  {
    double result = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (result)
    {
      uint64_t v5 = sub_1CD8C3AD8(result);
      double result = MEMORY[0x1D25D9CE0](v5, 0x10E0C40A125B3FFLL);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t *sub_1CD2BDFE8(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    uint64_t v5 = (void ***)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t v5 = sub_1CD2BF1D4(v5);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void *sub_1CD2BE04C(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x98uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  sub_1CD8C0B40((uint64_t)(i + 3), (uint64_t)(a3 + 1));
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v20) {
      goto LABEL_55;
    }
    if (prime < *(void *)&v20)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v20 < 3uLL || (uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < *(void *)&v20) {
LABEL_55:
      }
        sub_1CD3F1760(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    void *i = *v25;
LABEL_52:
    void *v25 = i;
    goto LABEL_53;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_52;
  }
LABEL_53:
  ++*(void *)(a1 + 24);
  return i;
}

char *sub_1CD2BE338(char **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_1CB833614();
  }
  uint8x8_t v10 = (char *)operator new(16 * v7);
  uint64_t v11 = &v10[16 * v3];
  uint64_t v12 = &v10[16 * v7];
  uint64_t v13 = *a2;
  uint64_t v14 = *a3;
  *a3 = 0;
  *(void *)uint64_t v11 = v13;
  *((void *)v11 + 1) = v14;
  float v15 = v11 + 16;
  BOOL v16 = *a1;
  unint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
  }
  else
  {
    do
    {
      uint64_t v18 = *((void *)v17 - 2);
      v17 -= 16;
      *((void *)v11 - 2) = v18;
      v11 -= 16;
      uint64_t v19 = *((void *)v17 + 1);
      *((void *)v17 + 1) = 0;
      *((void *)v11 + 1) = v19;
    }
    while (v17 != v16);
    unint64_t v17 = *a1;
    int8x8_t v20 = a1[1];
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    while (v20 != v17)
    {
      uint64_t v21 = *((void *)v20 - 1);
      *((void *)v20 - 1) = 0;
      if (v21)
      {
        uint64_t v22 = sub_1CD8C3AD8(v21);
        MEMORY[0x1D25D9CE0](v22, 0x10E0C40A125B3FFLL);
      }
      v20 -= 16;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v15;
}

void *sub_1CD2BE464(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v2;
  if (v7 >> 3 > v5) {
    unint64_t v5 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8 >> 60) {
    sub_1CB833614();
  }
  uint8x8_t v10 = (char *)operator new(16 * v8);
  uint64_t v11 = &v10[16 * v4];
  uint64_t v12 = a2[1];
  uint64_t v13 = &v10[16 * v8];
  *(void *)uint64_t v11 = *a2;
  *((void *)v11 + 1) = v12;
  a2[1] = 0;
  uint64_t v14 = v11 + 16;
  if (v3 == v2)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (!v2) {
      return v14;
    }
    goto LABEL_14;
  }
  float v15 = v3;
  do
  {
    uint64_t v16 = *(v15 - 2);
    v15 -= 2;
    *((void *)v11 - 2) = v16;
    v11 -= 16;
    *((void *)v11 + 1) = v15[1];
    v15[1] = 0;
  }
  while (v15 != v2);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v13;
  do
  {
    sub_1CD487110(v3 - 1);
    v3 -= 2;
  }
  while (v3 != v2);
  if (v2) {
LABEL_14:
  }
    operator delete(v2);
  return v14;
}

unint64_t sub_1CD2BE56C(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (uint64_t *)result;
  while (2)
  {
    uint8x8_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v42 = *(a2 - 1);
                uint64_t v43 = *v10;
                if (*(unsigned __int16 *)(*(void *)v42 + 32) < *(unsigned __int16 *)(*(void *)*v10 + 32))
                {
                  *uint8x8_t v10 = v42;
                  *(a2 - 1) = v43;
                }
                break;
              case 3:
                double result = (unint64_t)sub_1CD2BED84(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                double result = (unint64_t)sub_1CD2BF07C(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t v44 = v10 + 1;
                uint64_t v45 = v10 + 2;
                int v46 = v10 + 3;
                double result = (unint64_t)sub_1CD2BF07C(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = v10[3];
                if (*(unsigned __int16 *)(*(void *)v47 + 32) < *(unsigned __int16 *)(*(void *)v48 + 32))
                {
                  *int v46 = v47;
                  *(a2 - 1) = v48;
                  uint64_t v49 = *v46;
                  uint64_t v50 = *v45;
                  if (*(unsigned __int16 *)(*(void *)*v46 + 32) < *(unsigned __int16 *)(*(void *)*v45 + 32))
                  {
                    *uint64_t v45 = v49;
                    *int v46 = v50;
                    uint64_t v51 = *v44;
                    if (*(unsigned __int16 *)(*(void *)v49 + 32) < *(unsigned __int16 *)(*(void *)*v44 + 32))
                    {
                      v10[1] = v49;
                      v10[2] = v51;
                      uint64_t v52 = *v10;
                      if (*(unsigned __int16 *)(*(void *)v49 + 32) < *(unsigned __int16 *)(*(void *)*v10 + 32))
                      {
                        *uint8x8_t v10 = v49;
                        v10[1] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v53 = v10 + 1;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 8;
                uint64_t v57 = v10;
                do
                {
                  uint64_t v59 = *v57;
                  uint64_t v58 = v57[1];
                  uint64_t v57 = v53;
                  if (*(unsigned __int16 *)(*(void *)v58 + 32) < *(unsigned __int16 *)(*(void *)v59 + 32))
                  {
                    uint64_t v60 = v56;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v60) = v59;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        int v62 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v59 = *(uint64_t *)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while (*(unsigned __int16 *)(*(void *)v58 + 32) < *(unsigned __int16 *)(*(void *)v59 + 32));
                    int v62 = (uint64_t *)((char *)v10 + v61);
LABEL_85:
                    uint64_t *v62 = v58;
                  }
                  unsigned int v53 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
            else if (!v55)
            {
              do
              {
                uint64_t v94 = *v9;
                uint64_t v93 = v9[1];
                unint64_t v9 = v53;
                if (*(unsigned __int16 *)(*(void *)v93 + 32) < *(unsigned __int16 *)(*(void *)v94 + 32))
                {
                  do
                  {
                    *unsigned int v53 = v94;
                    uint64_t v94 = *(v53 - 2);
                    --v53;
                  }
                  while (*(unsigned __int16 *)(*(void *)v93 + 32) < *(unsigned __int16 *)(*(void *)v94 + 32));
                  *unsigned int v53 = v93;
                }
                unsigned int v53 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (unint64_t)(v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  long long v67 = &v10[v66];
                  uint64_t v68 = *v67;
                  if (2 * v65 + 2 < v12)
                  {
                    uint64_t v69 = v67[1];
                    uint64_t v70 = *(void *)v68;
                    double result = *(unsigned __int16 *)(*(void *)v68 + 32);
                    if (result < *(unsigned __int16 *)(*(void *)v69 + 32))
                    {
                      uint64_t v70 = *(void *)v69;
                      uint64_t v68 = v67[1];
                      ++v67;
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v70 = *(void *)v68;
                  }
                  uint64_t v71 = &v10[v65];
                  uint64_t v72 = *v71;
                  if (*(unsigned __int16 *)(v70 + 32) >= *(unsigned __int16 *)(*(void *)*v71 + 32))
                  {
                    do
                    {
                      uint64_t v73 = v67;
                      *uint64_t v71 = v68;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v74 = (2 * v66) | 1;
                      long long v67 = &v10[v74];
                      uint64_t v66 = 2 * v66 + 2;
                      uint64_t v68 = *v67;
                      if (v66 < v12)
                      {
                        uint64_t v75 = v67[1];
                        uint64_t v76 = *(void *)v68;
                        if (*(unsigned __int16 *)(*(void *)v68 + 32) >= *(unsigned __int16 *)(*(void *)v75 + 32))
                        {
                          uint64_t v66 = v74;
                        }
                        else
                        {
                          uint64_t v76 = *(void *)v75;
                          uint64_t v68 = v67[1];
                          ++v67;
                        }
                      }
                      else
                      {
                        uint64_t v76 = *(void *)v68;
                        uint64_t v66 = v74;
                      }
                      double result = *(unsigned __int16 *)(*(void *)v72 + 32);
                      uint64_t v71 = v73;
                    }
                    while (*(unsigned __int16 *)(v76 + 32) >= result);
                    *uint64_t v73 = v72;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              do
              {
                uint64_t v77 = 0;
                uint64_t v78 = *v10;
                uint64_t v79 = v10;
                do
                {
                  int v80 = &v79[v77];
                  uint64_t v83 = v80[1];
                  uint64_t v81 = v80 + 1;
                  uint64_t v82 = v83;
                  uint64_t v84 = (2 * v77) | 1;
                  uint64_t v85 = 2 * v77 + 2;
                  if (v85 < v12)
                  {
                    double result = *(unsigned __int16 *)(*(void *)v82 + 32);
                    if (result < *(unsigned __int16 *)(*(void *)v81[1] + 32))
                    {
                      uint64_t v82 = v81[1];
                      ++v81;
                      uint64_t v84 = v85;
                    }
                  }
                  uint64_t *v79 = v82;
                  uint64_t v79 = v81;
                  uint64_t v77 = v84;
                }
                while (v84 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v81 == --a2)
                {
                  uint64_t *v81 = v78;
                }
                else
                {
                  uint64_t *v81 = *a2;
                  *a2 = v78;
                  uint64_t v86 = (char *)v81 - (char *)v10 + 8;
                  if (v86 >= 9)
                  {
                    unint64_t v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                    unsigned int v88 = &v10[v87];
                    uint64_t v89 = *v88;
                    uint64_t v90 = *v81;
                    if (*(unsigned __int16 *)(*(void *)*v88 + 32) < *(unsigned __int16 *)(*(void *)*v81 + 32))
                    {
                      do
                      {
                        __int16 v91 = v88;
                        uint64_t *v81 = v89;
                        if (!v87) {
                          break;
                        }
                        unint64_t v87 = (v87 - 1) >> 1;
                        unsigned int v88 = &v10[v87];
                        uint64_t v89 = *v88;
                        uint64_t v81 = v91;
                      }
                      while (*(unsigned __int16 *)(*(void *)*v88 + 32) < *(unsigned __int16 *)(*(void *)v90 + 32));
                      uint64_t *v91 = v90;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CD2BED84(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CD2BED84(v9 + 1, v14 - 1, a2 - 2);
            sub_1CD2BED84(v9 + 2, &v9[v13 + 1], a2 - 3);
            double result = (unint64_t)sub_1CD2BED84(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *unint64_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            double result = (unint64_t)sub_1CD2BED84(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          uint64_t v17 = *(void *)*v9;
          if (a4) {
            break;
          }
          unsigned int v18 = *(unsigned __int16 *)(v17 + 32);
          if (*(unsigned __int16 *)(*(void *)*(v9 - 1) + 32) < v18) {
            goto LABEL_13;
          }
          if (v18 >= *(unsigned __int16 *)(*(void *)*(a2 - 1) + 32))
          {
            uint64_t v33 = v9 + 1;
            do
            {
              uint8x8_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v18 >= *(unsigned __int16 *)(*(void *)*v10 + 32));
          }
          else
          {
            uint8x8_t v10 = v9;
            do
            {
              uint64_t v32 = v10[1];
              ++v10;
            }
            while (v18 >= *(unsigned __int16 *)(*(void *)v32 + 32));
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
              uint64_t v35 = *--v34;
            while (v18 < *(unsigned __int16 *)(*(void *)v35 + 32));
          }
          if (v10 < v34)
          {
            uint64_t v36 = *v10;
            uint64_t v37 = *v34;
            do
            {
              *uint8x8_t v10 = v37;
              *unint64_t v34 = v36;
              unsigned int v38 = *(unsigned __int16 *)(*(void *)v16 + 32);
              do
              {
                uint64_t v39 = v10[1];
                ++v10;
                uint64_t v36 = v39;
              }
              while (v38 >= *(unsigned __int16 *)(*(void *)v39 + 32));
              do
              {
                uint64_t v40 = *--v34;
                uint64_t v37 = v40;
              }
              while (v38 < *(unsigned __int16 *)(*(void *)v40 + 32));
            }
            while (v10 < v34);
          }
          unint64_t v41 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *unint64_t v9 = *v41;
          }
          a4 = 0;
          uint64_t *v41 = v16;
        }
        unsigned int v18 = *(unsigned __int16 *)(v17 + 32);
LABEL_13:
        uint64_t v19 = 0;
        do
          uint64_t v20 = v9[++v19];
        while (*(unsigned __int16 *)(*(void *)v20 + 32) < v18);
        uint64_t v21 = &v9[v19];
        uint64_t v22 = a2;
        if (v19 == 1)
        {
          uint64_t v22 = a2;
          do
          {
            if (v21 >= v22) {
              break;
            }
            uint64_t v24 = *--v22;
          }
          while (*(unsigned __int16 *)(*(void *)v24 + 32) >= v18);
        }
        else
        {
          do
            uint64_t v23 = *--v22;
          while (*(unsigned __int16 *)(*(void *)v23 + 32) >= v18);
        }
        if (v21 >= v22)
        {
          uint8x8_t v10 = &v9[v19];
        }
        else
        {
          uint64_t v25 = *v22;
          uint8x8_t v10 = v21;
          unint64_t v26 = v22;
          do
          {
            *uint8x8_t v10 = v25;
            *unint64_t v26 = v20;
            unsigned int v27 = *(unsigned __int16 *)(*(void *)v16 + 32);
            do
            {
              uint64_t v28 = v10[1];
              ++v10;
              uint64_t v20 = v28;
            }
            while (*(unsigned __int16 *)(*(void *)v28 + 32) < v27);
            do
            {
              uint64_t v29 = *--v26;
              uint64_t v25 = v29;
            }
            while (*(unsigned __int16 *)(*(void *)v29 + 32) >= v27);
          }
          while (v10 < v26);
        }
        uint64_t v30 = v10 - 1;
        if (v10 - 1 != v9) {
          *unint64_t v9 = *v30;
        }
        *uint64_t v30 = v16;
        if (v21 >= v22) {
          break;
        }
LABEL_34:
        double result = sub_1CD2BE56C(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1CD2BEE2C(v9, v10 - 1);
      double result = sub_1CD2BEE2C(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CD2BED84(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(unsigned __int16 *)(*(void *)*a2 + 32);
  uint64_t v6 = *a3;
  unsigned int v7 = *(unsigned __int16 *)(*(void *)*a3 + 32);
  if (v5 >= *(unsigned __int16 *)(*(void *)*result + 32))
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      uint64_t v8 = *result;
      if (*(unsigned __int16 *)(*(void *)*a2 + 32) < *(unsigned __int16 *)(*(void *)*result + 32))
      {
        *double result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *double result = v3;
      *a2 = v4;
      if (*(unsigned __int16 *)(*(void *)*a3 + 32) >= *(unsigned __int16 *)(*(void *)v4 + 32)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *double result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CD2BEE2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(unsigned __int16 *)(*(void *)v6 + 32) < *(unsigned __int16 *)(*(void *)*a1 + 32))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CD2BED84(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CD2BF07C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v17 = a1 + 1;
      unsigned int v18 = a1 + 2;
      uint64_t v19 = a1 + 3;
      sub_1CD2BF07C(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if (*(unsigned __int16 *)(*(void *)v20 + 32) < *(unsigned __int16 *)(*(void *)v21 + 32))
      {
        *uint64_t v19 = v20;
        *(a2 - 1) = v21;
        uint64_t v22 = *v19;
        uint64_t v23 = *v18;
        if (*(unsigned __int16 *)(*(void *)*v19 + 32) < *(unsigned __int16 *)(*(void *)*v18 + 32))
        {
          uint64_t *v18 = v22;
          *uint64_t v19 = v23;
          uint64_t v24 = *v17;
          if (*(unsigned __int16 *)(*(void *)v22 + 32) < *(unsigned __int16 *)(*(void *)*v17 + 32))
          {
            a1[1] = v22;
            a1[2] = v24;
            uint64_t v25 = *a1;
            if (*(unsigned __int16 *)(*(void *)v22 + 32) < *(unsigned __int16 *)(*(void *)*a1 + 32))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CD2BED84(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    if (*(unsigned __int16 *)(*(void *)*v9 + 32) < *(unsigned __int16 *)(*(void *)*v8 + 32))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (*(unsigned __int16 *)(*(void *)v12 + 32) >= *(unsigned __int16 *)(*(void *)v13 + 32))
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      uint64_t *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CD2BF07C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CD2BED84(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(unsigned __int16 *)(*(void *)*a4 + 32) < *(unsigned __int16 *)(*(void *)*a3 + 32))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(unsigned __int16 *)(*(void *)*a3 + 32) < *(unsigned __int16 *)(*(void *)*a2 + 32))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(unsigned __int16 *)(*(void *)*a2 + 32) < *(unsigned __int16 *)(*(void *)*a1 + 32))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void *sub_1CD2BF12C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  unsigned int v5 = a2;
  if (a2 + 2 != v4)
  {
    unsigned int v5 = a2;
    do
    {
      uint64_t v7 = v5 + 2;
      uint64_t v6 = v5[2];
      uint64_t v8 = v5[3];
      void v5[3] = 0;
      uint64_t v9 = v5[1];
      *unsigned int v5 = v6;
      v5[1] = v8;
      if (v9)
      {
        uint64_t v10 = sub_1CD8C3AD8(v9);
        MEMORY[0x1D25D9CE0](v10, 0x10E0C40A125B3FFLL);
      }
      v5 += 2;
    }
    while (v7 + 2 != v4);
  }
  sub_1CD2BDF74(a1, (uint64_t)v5);
  return a2;
}

void ***sub_1CD2BF1D4(void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2) {
      free(*v2);
    }
    MEMORY[0x1D25D9CE0](v2, 0x1080C40ABB4582ELL);
  }
  return a1;
}

void ***sub_1CD2BF230(void ***result, void ***a2, void ***a3)
{
  uint64_t v4 = result;
  result[1] = 0;
  uint64_t v5 = *((unsigned int *)result + 4);
  if (v5)
  {
    uint64_t v6 = *result;
    uint64_t v7 = 16 * v5;
    do
    {
      uint64_t *v6 = (void *)-4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    uint64_t v8 = a2 + 1;
    do
    {
      uint64_t v9 = (uint64_t)*(v8 - 1);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v13 = 0;
        sub_1CD40EA84((uint64_t)*v4, *((_DWORD *)v4 + 4), v9, &v13);
        uint64_t v11 = v13;
        *uint64_t v13 = *(v8 - 1);
        uint64_t v12 = *v8;
        uint64_t *v8 = 0;
        v11[1] = v12;
        ++*((_DWORD *)v4 + 2);
        BOOL result = sub_1CD2BF1D4(v8);
      }
      uint64_t v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t sub_1CD2BF2FC(llvm::IntegerType ******a1, uint64_t a2)
{
  if (sub_1CD2BF48C(a1, a2)) {
    return 1;
  }
  int v4 = **(unsigned __int16 **)(a2 + 16);
  if (v4 == 116)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 40);
    if (!v6) {
      goto LABEL_11;
    }
    uint64_t v7 = (_DWORD *)(*(void *)(a2 + 32) + 16);
    while (*((unsigned char *)v7 - 16) != 17)
    {
      v7 += 8;
      if (!--v6) {
        goto LABEL_11;
      }
    }
    if (*v7 != 2524) {
      goto LABEL_11;
    }
  }
  else if (v4 != 213)
  {
    goto LABEL_4;
  }
  if (sub_1CD2BFE20(a1, a2)) {
    return 1;
  }
  int v4 = **(unsigned __int16 **)(a2 + 16);
LABEL_4:
  if (v4 > 117)
  {
    switch(v4)
    {
      case 'v':
      case '|':
      case '~':
        if (sub_1CD2C0D84(a1, a2)) {
          return 1;
        }
        goto LABEL_11;
      case 'x':
        if (sub_1CD2BFFCC(a1, a2)) {
          return 1;
        }
        goto LABEL_11;
      default:
        goto LABEL_11;
    }
  }
  if (v4 == 77)
  {
    if ((sub_1CD2C088C((uint64_t)a1, a2) & 1) == 0) {
      goto LABEL_11;
    }
    return 1;
  }
  if (v4 == 82)
  {
    if ((sub_1CD2C03E8((uint64_t *)a1, a2) & 1) == 0) {
      goto LABEL_11;
    }
    return 1;
  }
  if (v4 == 76 && (sub_1CD2C01EC((uint64_t *)a1, a2) & 1) != 0) {
    return 1;
  }
LABEL_11:

  return sub_1CC6EDF10((uint64_t *)a1, (unsigned __int16 **)a2);
}

uint64_t sub_1CD2BF48C(llvm::IntegerType ******a1, uint64_t a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  int v4 = **(unsigned __int16 **)(a2 + 16);
  BOOL v5 = (v4 - 45) > 0x16 || ((1 << (v4 - 45)) & 0x700007) == 0;
  if (v5 && (v4 - 127) >= 3) {
    return 0;
  }
  uint64_t v8 = (uint64_t)(*a1)[1][5];
  uint64_t v9 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
  if ((v9 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
    uint64_t v11 = *(void *)(v11 + 24);
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (**(_WORD **)(v12 + 16) != 51) {
    return 0;
  }
  uint64_t v13 = *(void *)(v12 + 32);
  if ((v9 & 0x80000000) != 0) {
    uint64_t v14 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v14 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v9);
  }
  unsigned int v15 = *(_DWORD *)(v13 + 68);
  unsigned int v16 = *(_DWORD *)(v13 + 100);
  uint64_t v17 = *v14;
  if (!v17)
  {
LABEL_22:
    sub_1CC73C824(v15, (uint64_t)(*a1)[1][5], 0, 0, (uint64_t)&v87);
    if (!(_BYTE)v90)
    {
      sub_1CC73C824(v16, v8, 0, 0, (uint64_t)&v82);
      if (!v86)
      {
        if (!(_BYTE)v90) {
          return 0;
        }
        char v18 = 1;
LABEL_103:
        if (v88 >= 0x41 && v87) {
          MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
        }
        if ((v18 & 1) == 0) {
          goto LABEL_28;
        }
        return 0;
      }
      if (v83 >= 0x41 && v82) {
        MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
      }
      if (!(_BYTE)v90) {
        goto LABEL_28;
      }
    }
    char v18 = 0;
    goto LABEL_103;
  }
  while ((*(unsigned char *)(v17 + 3) & 1) != 0)
  {
    uint64_t v17 = *(void *)(v17 + 24);
    if (!v17) {
      goto LABEL_22;
    }
  }
  while (1)
  {
    uint64_t v17 = *(void *)(v17 + 24);
    if (!v17) {
      break;
    }
    if ((*(unsigned char *)(v17 + 3) & 1) == 0) {
      goto LABEL_22;
    }
  }
LABEL_28:
  unsigned int v19 = *(_DWORD *)(*(void *)(a2 + 32) + 68);
  uint64_t v20 = *(void *)(v12 + 32);
  unsigned int v21 = *(_DWORD *)(v20 + 164);
  sub_1CC73DA2C(**(unsigned __int16 **)(a2 + 16), *(_DWORD *)(v20 + 132), v19, v8, (uint64_t)&v82);
  if (!(_BYTE)v85) {
    goto LABEL_29;
  }
  sub_1CC73DA2C(**(unsigned __int16 **)(a2 + 16), v21, v19, v8, (uint64_t)&v79);
  int v47 = v81;
  if (v81)
  {
    int v78 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    if (v78 < 0 && (uint64_t v50 = v78 & 0x7FFFFFFF, v50 < *(_DWORD *)(v8 + 432))) {
      unint64_t v51 = *(void *)(*(void *)(v8 + 424) + 8 * v50);
    }
    else {
      unint64_t v51 = 0;
    }
    int v76 = *(_DWORD *)(*(void *)(v12 + 32) + 48);
    uint64_t v52 = *a1;
    v52[5] = *(llvm::IntegerType *****)(a2 + 24);
    v52[6] = (llvm::IntegerType ****)a2;
    unsigned int v53 = *a1;
    unint64_t v87 = (void *)v51;
    LODWORD(v88) = 0;
    if (v83 > 0x40) {
      uint64_t v54 = *(void *)v82;
    }
    else {
      uint64_t v54 = (uint64_t)((void)v82 << -(uint64_t)v83) >> -(uint64_t)v83;
    }
    uint64_t v73 = (llvm::IntegerType *)v54;
    unint64_t v55 = (unsigned __int16)(v51 >> 19);
    if ((v51 & 2) == 0) {
      unint64_t v55 = (v51 >> 19);
    }
    if ((v51 & 4) == 0) {
      unint64_t v55 = (unsigned __int16)(v51 >> 3);
    }
    if (v51) {
      unint64_t v56 = (v51 >> 3);
    }
    else {
      unint64_t v56 = v55;
    }
    uint64_t v57 = (llvm::ConstantInt *)llvm::IntegerType::get(***v53[1], (llvm::LLVMContext *)v56);
    uint64_t v58 = llvm::ConstantInt::get(v57, (unint64_t)v73, (const llvm::APInt *)1);
    uint64_t v59 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v53)[2])(v53, &v87, v58);
    uint64_t v72 = v60;
    uint64_t v74 = (llvm::IntegerType *)v59;
    uint64_t v61 = *a1;
    unint64_t v87 = (void *)v51;
    LODWORD(v88) = 0;
    if (v80 > 0x40) {
      uint64_t v62 = *v79;
    }
    else {
      uint64_t v62 = (uint64_t)((void)v79 << -(uint64_t)v80) >> -(uint64_t)v80;
    }
    uint64_t v71 = (llvm::IntegerType *)v62;
    int64_t v63 = ***v61[1];
    if (v51)
    {
      int64_t v64 = (llvm::ConstantInt *)llvm::IntegerType::get(v63, (llvm::LLVMContext *)(v51 >> 3));
    }
    else
    {
      if ((v51 & 4) != 0)
      {
        if ((v51 & 2) != 0) {
          unint64_t v69 = (unsigned __int16)(v51 >> 19);
        }
        else {
          unint64_t v69 = (v51 >> 19);
        }
      }
      else
      {
        unint64_t v69 = (unsigned __int16)(v51 >> 3);
      }
      int64_t v64 = (llvm::ConstantInt *)llvm::IntegerType::get(v63, (llvm::LLVMContext *)v69);
    }
    int64_t v65 = llvm::ConstantInt::get(v64, (unint64_t)v71, (const llvm::APInt *)1);
    uint64_t v66 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v61)[2])(v61, &v87, v65);
    long long v67 = *a1;
    v100[0] = v78;
    v100[2] = 1;
    LODWORD(v87) = v76;
    int v89 = 2;
    unsigned int v90 = v15;
    int v91 = 0;
    unsigned int v92 = v16;
    int v93 = 0;
    uint64_t v94 = v74;
    uint64_t v95 = v72;
    int v96 = 1;
    uint64_t v97 = v66;
    uint64_t v98 = v68;
    int v99 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, _DWORD *, uint64_t, void **, uint64_t, void))(*v67)[4])(v67, 51, v100, 1, &v87, 5, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (v81 && v80 >= 0x41 && v79) {
      MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
    }
    if (!(_BYTE)v85) {
      return 1;
    }
  }
  else if (!(_BYTE)v85)
  {
    goto LABEL_29;
  }
  if (v83 >= 0x41 && v82) {
    MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
  }
  if (v47) {
    return 1;
  }
LABEL_29:
  unint64_t v87 = &v89;
  uint64_t v88 = 0x400000000;
  uint64_t v22 = *(void *)(a2 + 32) + 32;
  uint64_t v82 = &v85;
  unsigned int v84 = 4;
  uint64_t v85 = v22;
  unsigned int v23 = 1;
  do
  {
    uint64_t v24 = *((void *)v82 + v23 - 1);
    unsigned int v83 = v23 - 1;
    uint64_t v25 = *(unsigned int *)(v24 + 4);
    sub_1CC73DA2C(**(unsigned __int16 **)(a2 + 16), *(_DWORD *)(v24 + 4), v19, v8, (uint64_t)&v79);
    if (v81)
    {
      if (v80 > 0x40) {
        uint64_t v48 = *v79;
      }
      else {
        uint64_t v48 = (uint64_t)((void)v79 << -(uint64_t)v80) >> -(uint64_t)v80;
      }
      if (v88 >= (unint64_t)HIDWORD(v88)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v49 = (char *)v87 + 16 * v88;
      *uint64_t v49 = v24;
      v49[1] = v48;
      uint64_t v33 = &v88;
    }
    else
    {
      if ((v25 & 0x80000000) != 0) {
        unint64_t v26 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v26 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v25);
      }
      uint64_t v27 = *v26;
      if (!v27) {
        goto LABEL_58;
      }
      while ((*(unsigned char *)(v27 + 3) & 1) != 0)
      {
        uint64_t v27 = *(void *)(v27 + 24);
        if (!v27) {
          goto LABEL_58;
        }
      }
      while (1)
      {
        uint64_t v27 = *(void *)(v27 + 24);
        if (!v27) {
          break;
        }
        if ((*(unsigned char *)(v27 + 3) & 1) == 0) {
          goto LABEL_58;
        }
      }
      if ((v25 & 0x80000000) != 0) {
        uint64_t v28 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v28 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v25);
      }
      uint64_t v29 = *v28;
      if ((*(unsigned char *)(v29 + 3) & 1) == 0) {
        uint64_t v29 = *(void *)(v29 + 24);
      }
      uint64_t v30 = *(void *)(v29 + 8);
      if (**(_WORD **)(v30 + 16) != 51)
      {
LABEL_58:
        uint64_t v6 = 0;
        goto LABEL_59;
      }
      if (v83 >= (unint64_t)v84) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v82 + v83) = *(void *)(v30 + 32) + 128;
      unsigned int v31 = v83 + 1;
      unsigned int v83 = v31;
      uint64_t v32 = *(void *)(v30 + 32);
      if (v31 >= v84) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v82 + v31) = v32 + 160;
      uint64_t v33 = (uint64_t *)&v83;
    }
    ++*(_DWORD *)v33;
    if (v81 && v80 >= 0x41 && v79) {
      MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
    }
    unsigned int v23 = v83;
  }
  while (v83);
  unsigned int v75 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if ((v75 & 0x80000000) != 0 && (unint64_t v34 = v75 & 0x7FFFFFFF, v34 < *(unsigned int *)(v8 + 432))) {
    uint64_t v35 = *(uint64_t **)(*(void *)(v8 + 424) + 8 * v34);
  }
  else {
    uint64_t v35 = 0;
  }
  if (v88)
  {
    uint64_t v36 = (uint64_t *)v87;
    uint64_t v77 = (uint64_t *)((char *)v87 + 16 * v88);
    do
    {
      uint64_t v37 = *(void *)(*v36 + 8);
      unsigned int v38 = *a1;
      v38[5] = *(llvm::IntegerType *****)(v37 + 24);
      v38[6] = (llvm::IntegerType ****)v37;
      uint64_t v39 = *a1;
      uint64_t v79 = v35;
      unsigned int v80 = 0;
      uint64_t v40 = ((unint64_t)v35 >> 3);
      if ((v35 & 1) == 0)
      {
        if ((v35 & 4) != 0)
        {
          uint64_t v70 = 0xFFFFLL;
          if ((v35 & 2) == 0) {
            uint64_t v70 = 0xFFFFFFFFLL;
          }
          uint64_t v40 = v70 & ((unint64_t)v35 >> 19);
        }
        else
        {
          uint64_t v40 = (unsigned __int16)((unint64_t)v35 >> 3);
        }
      }
      unint64_t v41 = v36[1];
      uint64_t v42 = (llvm::ConstantInt *)llvm::IntegerType::get(***v39[1], (llvm::LLVMContext *)v40);
      uint64_t v43 = llvm::ConstantInt::get(v42, v41, (const llvm::APInt *)1);
      ((void (*)(llvm::IntegerType *****, uint64_t **, void *))(*v39)[2])(v39, &v79, v43);
      unsigned int v45 = *(_DWORD *)(*(void *)(v44 + 32) + 4);
      ((void (*)(llvm::IntegerType *****, uint64_t))(*a1[2])[4])(a1[2], v37);
      uint64_t v46 = *v36;
      v36 += 2;
      llvm::MachineOperand::setReg(v46, v45);
      ((void (*)(llvm::IntegerType *****, uint64_t))(*a1[2])[5])(a1[2], v37);
    }
    while (v36 != v77);
  }
  ((void (*)(llvm::IntegerType *****, uint64_t))(*a1[2])[4])(a1[2], v12);
  llvm::MachineOperand::setReg(*(void *)(v12 + 32), v75);
  ((void (*)(llvm::IntegerType *****, uint64_t))(*a1[2])[5])(a1[2], v12);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  uint64_t v6 = 1;
LABEL_59:
  if (v82 != &v85) {
    free(v82);
  }
  if (v87 != &v89) {
    free(v87);
  }
  return v6;
}

BOOL sub_1CD2BFE20(llvm::ConstantInt ******a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = 64;
  if (**(_WORD **)(a2 + 16) == 213) {
    uint64_t v5 = 32;
  }
  int v6 = *(_DWORD *)(v4 + 4);
  sub_1CC6DEE8C((uint64_t)a1[3], (const char *)*(unsigned int *)(v4 + v5 + 4), (uint64_t)&v20);
  unsigned int v7 = v21;
  if (v21 > 0x40)
  {
    __int32 v9 = llvm::APInt::countPopulationSlowCase((uint64_t)&v20);
  }
  else
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v20);
    v8.i16[0] = vaddlv_u8(v8);
    __int32 v9 = v8.i32[0];
  }
  unsigned int v10 = v23;
  if (v23 > 0x40)
  {
    __int32 v12 = llvm::APInt::countPopulationSlowCase((uint64_t)&v22);
  }
  else
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v22);
    v11.i16[0] = vaddlv_u8(v11);
    __int32 v12 = v11.i32[0];
  }
  __int32 v13 = v12 + v9;
  if (v13 == v7)
  {
    llvm::APInt::reverseBits((unsigned int *)&v22, (llvm::APInt *)&v18);
    unsigned int v15 = *a1;
    v15[5] = *(llvm::ConstantInt *****)(a2 + 24);
    v15[6] = (llvm::ConstantInt ****)a2;
    unsigned int v16 = *a1;
    v17[0] = v6;
    v17[2] = 1;
    sub_1CC737454(v16, (uint64_t)v17, (llvm::LLVMContext *)&v18);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (v19 >= 0x41 && v18) {
      MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
    unsigned int v10 = v23;
  }
  if (v10 >= 0x41 && *(void *)&v22) {
    MEMORY[0x1D25D9CB0](*(void *)&v22, 0x1000C8000313F17);
  }
  if (v21 >= 0x41 && *(void *)&v20) {
    MEMORY[0x1D25D9CB0](*(void *)&v20, 0x1000C8000313F17);
  }
  return v13 == v7;
}

uint64_t sub_1CD2BFFCC(llvm::IntegerType ******a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) != 120) {
    return 0;
  }
  uint64_t v4 = *a1;
  v4[5] = *(llvm::IntegerType *****)(a2 + 24);
  v4[6] = (llvm::IntegerType ****)a2;
  uint64_t v5 = (uint64_t)(*a1)[1][5];
  unsigned int v6 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if ((v6 & 0x80000000) != 0 && (v6 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v5 + 432)) {
    unint64_t v7 = *(void *)(*(void *)(v5 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  if ((v7 & 0xFFFFFFFFFFFFFFF9) != 0 && (v7 & 6) == 2)
  {
    sub_1CC73C210(v6, v5, (uint64_t)&v21);
    if (!(_BYTE)v23) {
      return 0;
    }
    if (v22 >= 0x41)
    {
      if (v21) {
        MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
      }
      return 0;
    }
    unint64_t v10 = v21 << -(char)v22 >> -(char)v22;
    uint8x8_t v11 = *a1;
    __int32 v12 = (llvm::LLVMContext *)(unsigned __int16)(v7 >> 3);
    __int32 v13 = (llvm::LLVMContext *)(unsigned __int16)(v7 >> 19);
    if ((v7 & 2) == 0) {
      __int32 v13 = (llvm::LLVMContext *)(v7 >> 19);
    }
    if ((v7 & 4) != 0) {
      __int32 v12 = v13;
    }
    if (v7) {
      uint64_t v14 = (llvm::LLVMContext *)(v7 >> 3);
    }
    else {
      uint64_t v14 = v12;
    }
    uint64_t v8 = 1;
    uint64_t v21 = (8 * (void)v14) | 1;
    LODWORD(v22) = 0;
    unsigned int v15 = (llvm::ConstantInt *)llvm::IntegerType::get(***v11[1], v14);
    unsigned int v16 = llvm::ConstantInt::get(v15, v10, (const llvm::APInt *)1);
    uint64_t v17 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v11)[2])(v11, &v21, v16);
    uint64_t v18 = *a1;
    v20[0] = v6;
    v20[2] = 1;
    uint64_t v21 = v17;
    uint64_t v22 = v19;
    int v23 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*v18)[4])(v18, 81, v20, 1, &v21, 1, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  }
  return v8;
}

uint64_t sub_1CD2C01EC(uint64_t *a1, uint64_t a2)
{
  if (**(_WORD **)(a2 + 16) == 76)
  {
    uint64_t v4 = *a1;
    *(void *)(v4 + 40) = *(void *)(a2 + 24);
    *(void *)(v4 + 48) = a2;
    uint64_t v5 = *(void *)(a2 + 32);
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 0)
    {
      uint64_t v7 = *(void *)(*(void *)(*a1 + 8) + 40);
      if ((v6 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432))
      {
        uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
        if ((v8 == 513 || v8 == 257) && *(_DWORD *)(a2 + 40) == 3)
        {
          uint64_t v9 = *(unsigned int *)(v5 + 68);
          sub_1CC73C210(v9, *(void *)(*(void *)(*a1 + 8) + 40), (uint64_t)&v19);
          if ((_BYTE)v21)
          {
            if (v20 >= 0x41)
            {
              if (v19) {
                MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
              }
            }
            else if (!(v19 << -(uint64_t)v20 >> -(uint64_t)v20))
            {
              goto LABEL_16;
            }
          }
          if ((v9 & 0x80000000) != 0) {
            unint64_t v10 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v10 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v9);
          }
          uint64_t v11 = *v10;
          if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
            uint64_t v11 = *(void *)(v11 + 24);
          }
          uint64_t v12 = *(void *)(v11 + 8);
          if (**(_WORD **)(v12 + 16) != 121) {
            return 0;
          }
          uint64_t v16 = *(void *)(*(void *)(v12 + 32) + 48);
          if (!v16) {
            return 0;
          }
          uint64_t v17 = *(_UNKNOWN **)(v16 + 32) == &unk_1CFB2E344 ? *(void *)(v16 + 40) : v16 + 24;
          if ((*(unsigned char *)(v17 + 28) & 7) != 3) {
            return 0;
          }
LABEL_16:
          uint64_t v15 = *a1;
          uint64_t v13 = 1;
          v18[0] = v6;
          v18[2] = 1;
          LODWORD(v19) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
          int v21 = 0;
          (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v15 + 32))(v15, 126, v18, 1, &v19, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return v13;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CD2C03E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) != 82) {
    return 0;
  }
  uint64_t v3 = *a1;
  *(void *)(v3 + 40) = *(void *)(a2 + 24);
  *(void *)(v3 + 48) = a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*(void *)(*a1 + 8) + 40);
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)(v6 + 4);
  uint64_t v8 = *(unsigned int *)(v6 + 36);
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v5 + 432)) {
    uint64_t v9 = *(void *)(*(void *)(v5 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    uint64_t v9 = 0;
  }
  if ((v8 & 0x80000000) != 0) {
    unint64_t v10 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v10 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v8);
  }
  uint64_t v11 = *v10;
  if (v11)
  {
    if (*(unsigned char *)(v11 + 3) & 1) != 0 || (uint64_t v11 = *(void *)(v11 + 24)) != 0 && (*(unsigned char *)(v11 + 3))
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12)
      {
        if (**(_WORD **)(v12 + 16) == 82 && *(_DWORD *)(v12 + 40) == 2)
        {
          int v22 = *(_DWORD *)(*(void *)(v12 + 32) + 36);
          *(void *)(v4 + 40) = *(void *)(a2 + 24);
          *(void *)(v4 + 48) = a2;
          uint64_t v23 = *a1;
          uint64_t v20 = 1;
          LODWORD(v44) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
          LODWORD(v45) = 1;
          LODWORD(v47) = v22;
          v49[0] = 0;
          sub_1CC7382B0(v23);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return v20;
        }
      }
    }
  }
  if ((v8 & 0x80000000) != 0) {
    uint64_t v13 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v13 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v8);
  }
  uint64_t v14 = *v13;
  if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
    uint64_t v14 = *(void *)(v14 + 24);
  }
  uint64_t v15 = (uint64_t *)((v8 & 0x80000000) != 0
                  ? *(void *)(v5 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                  : *(void *)(v5 + 272) + 8 * v8);
  uint64_t v16 = *v15;
  if (!*v15) {
    return 0;
  }
  uint64_t v17 = *(void *)(v14 + 8);
  int v18 = **(unsigned __int16 **)(v17 + 16);
  while ((*(unsigned char *)(v16 + 3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v16 + 24);
    if (!v16) {
      return 0;
    }
  }
  unsigned int v19 = *(_DWORD *)(v17 + 40) - 1;
  uint64_t v20 = 0;
  while (1)
  {
    uint64_t v16 = *(void *)(v16 + 24);
    if (!v16) {
      break;
    }
    if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
      return v20;
    }
  }
  if (v18 == 77 && (v9 & 1) != 0)
  {
LABEL_40:
    int v25 = *(_DWORD *)(*(void *)(v17 + 32) + 36);
    if ((v25 & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v26 = v25 & 0x7FFFFFFF;
    if (v26 >= *(_DWORD *)(v5 + 432)) {
      return 0;
    }
    uint64_t v27 = *(void *)(*(void *)(v5 + 424) + 8 * v26);
    if (v27 != 257 && v27 != 129) {
      return 0;
    }
    uint64_t v44 = v46;
    uint64_t v45 = 0x800000000;
    if (v19)
    {
      LODWORD(v28) = 0;
      for (unsigned int i = 1; i <= v19; ++i)
      {
        if (v28 >= HIDWORD(v45)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v44 + v28) = *(_DWORD *)(*(void *)(v17 + 32) + 32 * i + 4);
        unint64_t v28 = (v45 + 1);
        LODWORD(v45) = v45 + 1;
      }
    }
    else
    {
      unint64_t v28 = 0;
    }
    uint64_t v30 = *a1;
    if (v18 == 77)
    {
      LODWORD(v47) = v7;
      LODWORD(v48) = 1;
      sub_1CC73661C(v30, (uint64_t)&v47, (int *)v44, v28);
    }
    else
    {
      v43[0] = v7;
      v43[2] = 1;
      unsigned int v31 = (int *)v44;
      int v47 = v49;
      uint64_t v48 = 0x800000000;
      if (v28 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v28)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 4 * v28;
        do
        {
          int v34 = *v31++;
          uint64_t v35 = &v49[v32];
          *uint64_t v35 = v34;
          v35[4] = 0;
          v32 += 6;
          v33 -= 4;
        }
        while (v33);
        int v36 = v48;
      }
      else
      {
        int v36 = 0;
      }
      LODWORD(v48) = v36 + v28;
      (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t))(*(void *)v30 + 32))(v30, 77, v43, 1);
      if (v47 != v49) {
        free(v47);
      }
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (v44 != v46) {
      free(v44);
    }
    return 1;
  }
  if (v18 != 76) {
    return 0;
  }
  uint64_t v20 = 0;
  if ((v9 & 0xFFFFFFFFFFFFFFF9) != 0 && (v9 & 4) != 0)
  {
    uint64_t v24 = 0x800000000000000;
    if ((v9 & 2) == 0) {
      uint64_t v24 = 0x8000000000000;
    }
    if ((v24 & v9) != 0)
    {
      int v38 = v9;
      uint64_t v39 = *(void *)(*(void *)(*a1 + 8) + 40);
      uint64_t v41 = v17;
      uint64_t v42 = a1;
      int v37 = **(unsigned __int16 **)(v17 + 16);
      int v40 = *(_DWORD *)(v17 + 40) - 1;
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      unsigned int v19 = v40;
      uint64_t v17 = v41;
      a1 = v42;
      int v18 = v37;
      LODWORD(v9) = v38;
      uint64_t v5 = v39;
    }
    if (v19 != (unsigned __int16)(v9 >> 3)) {
      return 0;
    }
    goto LABEL_40;
  }
  return v20;
}

uint64_t sub_1CD2C088C(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) != 77) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(unsigned int *)(v5 + 36);
  if ((v6 & 0x80000000) != 0) {
    int v7 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    int v7 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v6);
  }
  int v8 = *(_DWORD *)(a2 + 40);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *v7;
  if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
    uint64_t v10 = *(void *)(v10 + 24);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (*(_DWORD *)(v11 + 40) == v8)
  {
    uint64_t v12 = (v8 - 1);
    if (v8 != 1)
    {
      int v13 = 0;
      while (1)
      {
        uint64_t v5 = *(void *)(a2 + 32);
        uint64_t v14 = *(unsigned int *)(v5 + 32 * (v13 + 1) + 4);
        if ((v14 & 0x80000000) != 0) {
          uint64_t v15 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v15 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v14);
        }
        uint64_t v16 = *v15;
        if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
          uint64_t v16 = *(void *)(v16 + 24);
        }
        uint64_t v17 = *(void *)(v16 + 8);
        if (v17 != v11 || **(_WORD **)(v17 + 16) != 74) {
          break;
        }
        if (v13 != llvm::MachineInstr::findRegisterDefOperandIdx(v11, v14, 0, 0, 0))
        {
          uint64_t v5 = *(void *)(a2 + 32);
          break;
        }
        unsigned int v18 = v13 + 2;
        ++v13;
        if (v18 > v12) {
          goto LABEL_20;
        }
      }
      uint64_t v9 = *(void **)a1;
      goto LABEL_32;
    }
LABEL_20:
    v9[5] = *(void *)(a2 + 24);
    v9[6] = a2;
    int v20 = *(_DWORD *)(*(void *)(v11 + 32) + 32 * v12 + 4);
    if (v20 < 0 && (unsigned int v21 = *(_DWORD *)(v4 + 432), (v20 & 0x7FFFFFFFu) < v21))
    {
      uint64_t v22 = *(void *)(v4 + 424);
      uint64_t v23 = *(void *)(v22 + 8 * (v20 & 0x7FFFFFFF));
      int v24 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0
        && ((v24 & 0x80000000) == 0 || (v24 & 0x7FFFFFFFu) >= v21 || v23 != *(void *)(v22 + 8 * (v24 & 0x7FFFFFFF))))
      {
        LODWORD(v46) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        unsigned int v47 = 1;
        LODWORD(v49) = v20;
        v51[0] = 0;
        sub_1CC7382B0((uint64_t)v9);
LABEL_29:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        return 1;
      }
    }
    else
    {
      int v24 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    }
    LODWORD(v46) = v24;
    unsigned int v47 = 1;
    LODWORD(v49) = v20;
    v51[0] = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v9 + 32))(v9, 19, &v46, 1, &v49, 1, 0);
    goto LABEL_29;
  }
LABEL_32:
  uint64_t v25 = *(void *)(v9[1] + 40);
  int v26 = *(_DWORD *)(v5 + 4);
  if (v26 < 0 && (uint64_t v27 = v26 & 0x7FFFFFFF, v27 < *(_DWORD *)(v25 + 432))) {
    uint64_t v28 = *(void *)(*(void *)(v25 + 424) + 8 * v27);
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v49 = v51;
  uint64_t v50 = 0x400000000;
  if (*(_DWORD *)(a2 + 40) < 2u)
  {
    uint64_t v39 = v51;
LABEL_62:
    int v40 = *(void **)a1;
    void v40[5] = *(void *)(a2 + 24);
    v40[6] = a2;
    uint64_t v41 = *(void **)a1;
    uint64_t v19 = 1;
    v45[0] = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    v45[2] = 1;
    LODWORD(v46) = *v39;
    int v48 = 0;
    (*(void (**)(void *, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*v41 + 32))(v41, 19, v45, 1, &v46, 1, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  }
  else
  {
    unint64_t v29 = 1;
    uint64_t v30 = 36;
    while (1)
    {
      uint64_t v31 = *(unsigned int *)(*(void *)(a2 + 32) + v30);
      uint64_t v32 = (uint64_t *)((v31 & 0x80000000) != 0
                      ? *(void *)(v25 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8
                      : *(void *)(v25 + 272) + 8 * v31);
      uint64_t v33 = *v32;
      if (!v33) {
        break;
      }
      if ((*(unsigned char *)(v33 + 3) & 1) == 0)
      {
        uint64_t v33 = *(void *)(v33 + 24);
        if (!v33 || (*(unsigned char *)(v33 + 3) & 1) == 0) {
          break;
        }
      }
      uint64_t v34 = *(void *)(v33 + 8);
      if (!v34) {
        break;
      }
      if (**(_WORD **)(v34 + 16) != 205) {
        break;
      }
      if (*(_DWORD *)(v34 + 40) != 3) {
        break;
      }
      uint64_t v35 = *(void *)(v34 + 32);
      int v36 = *(_DWORD *)(v35 + 36);
      sub_1CC73C210(*(_DWORD *)(v35 + 68), v25, (uint64_t)&v46);
      if (!(_BYTE)v48) {
        break;
      }
      if (v47 >= 0x41)
      {
        if (v46) {
          MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
        break;
      }
      uint64_t v37 = 0;
      if (v36 < 0)
      {
        if ((v36 & 0x7FFFFFFFu) >= *(_DWORD *)(v25 + 432)) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = *(void *)(*(void *)(v25 + 424) + 8 * (v36 & 0x7FFFFFFF));
        }
      }
      uint64_t v19 = 0;
      if (v29 - 1 != v46 << -(char)v47 >> -(char)v47 || v28 != v37) {
        goto LABEL_71;
      }
      if (v50 >= (unint64_t)HIDWORD(v50)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v49 + v50) = v36;
      uint64_t v38 = (v50 + 1);
      LODWORD(v50) = v50 + 1;
      ++v29;
      v30 += 32;
      if (v29 >= *(unsigned int *)(a2 + 40))
      {
        uint64_t v39 = v49;
        if (!v38) {
          goto LABEL_62;
        }
        uint64_t v42 = 0;
        uint64_t v43 = 4 * v38;
        while (*(_DWORD *)v49 == *(_DWORD *)((char *)v49 + v42))
        {
          v42 += 4;
          if (v43 == v42) {
            goto LABEL_62;
          }
        }
        break;
      }
    }
    uint64_t v19 = 0;
  }
LABEL_71:
  if (v49 != v51) {
    free(v49);
  }
  return v19;
}

uint64_t sub_1CD2C0D84(llvm::IntegerType ******a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **(unsigned __int16 **)(a2 + 16);
  if (v4 != 126 && v4 != 124 && v4 != 118) {
    return 0;
  }
  uint64_t v5 = *a1;
  v5[5] = *(llvm::IntegerType *****)(a2 + 24);
  v5[6] = (llvm::IntegerType ****)a2;
  uint64_t v6 = (*a1)[1][5];
  uint64_t v7 = *(void *)(a2 + 32);
  int v8 = *(_DWORD *)(v7 + 4);
  int v9 = *(_DWORD *)(v7 + 36);
  if (v8 < 0 && (v8 & 0x7FFFFFFFu) < *((_DWORD *)v6 + 108)) {
    unint64_t v10 = (unint64_t)v6[53][v8 & 0x7FFFFFFF];
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v10;
  if ((v9 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v11 = v9 & 0x7FFFFFFF;
  if ((v9 & 0x7FFFFFFFu) >= *((_DWORD *)v6 + 108) || v6[53][v11] != (llvm::IntegerType *)9) {
    return 0;
  }
  int v13 = v6[3][2 * v11 + 1];
  if ((*((unsigned char *)v13 + 3) & 1) == 0) {
    int v13 = (llvm::IntegerType *)*((void *)v13 + 3);
  }
  if ((**(_WORD **)(*((void *)v13 + 1) + 16) & 0xFFFE) != 0x86) {
    return 0;
  }
  unint64_t v15 = sub_1CB8F1DC4(&v37);
  if (v14 == 1) {
  if (v15 <= 0x10)
  }
    unint64_t v16 = v37;
  else {
    unint64_t v16 = 129;
  }
  uint64_t v17 = *a1;
  unint64_t v48 = v16;
  int v49 = 0;
  unint64_t v18 = (unsigned __int16)(v16 >> 19);
  if ((v16 & 2) == 0) {
    unint64_t v18 = (v16 >> 19);
  }
  if ((v16 & 4) == 0) {
    unint64_t v18 = (unsigned __int16)(v16 >> 3);
  }
  if (v16) {
    unint64_t v19 = (v16 >> 3);
  }
  else {
    unint64_t v19 = v18;
  }
  uint64_t v20 = llvm::IntegerType::get(***v17[1], (llvm::LLVMContext *)v19);
  uint64_t v22 = *(llvm::ConstantInt **)v20;
  unsigned int v23 = *(_DWORD *)(v20 + 8);
  LODWORD(v40) = v23 >> 8;
  if (v23 >> 8 >= 0x41) {
    operator new[]();
  }
  uint64_t v39 = 0;
  int v24 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v39, v21);
  if (v40 >= 0x41 && v39) {
    MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
  }
  uint64_t v26 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v17)[2])(v17, &v48, v24);
  if (v4 == 124) {
    unint64_t v27 = -1;
  }
  else {
    unint64_t v27 = 1;
  }
  uint64_t v28 = *a1;
  uint64_t v39 = v16;
  LODWORD(v40) = 0;
  uint64_t v36 = v25;
  if (v16)
  {
    unint64_t v29 = (v16 >> 3);
  }
  else if ((v16 & 4) != 0)
  {
    if ((v16 & 2) != 0) {
      unint64_t v29 = (unsigned __int16)(v16 >> 19);
    }
    else {
      unint64_t v29 = (v16 >> 19);
    }
  }
  else
  {
    unint64_t v29 = (unsigned __int16)(v16 >> 3);
  }
  uint64_t v30 = (llvm::ConstantInt *)llvm::IntegerType::get(***v28[1], (llvm::LLVMContext *)v29);
  uint64_t v31 = llvm::ConstantInt::get(v30, v27, (const llvm::APInt *)1);
  uint64_t v32 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v28)[2])(v28, &v39, v31);
  uint64_t v34 = *a1;
  if (v16 == v37)
  {
    LODWORD(v48) = v8;
    int v49 = 1;
    LODWORD(v39) = v9;
    int v41 = 0;
    uint64_t v42 = v32;
    uint64_t v43 = v33;
    int v44 = 1;
    uint64_t v45 = v26;
    uint64_t v46 = v36;
    int v47 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v34)[4])(v34, 136, &v48, 1, &v39, 3, 0);
  }
  else
  {
    v38[0] = v8;
    v38[2] = 1;
    unint64_t v48 = v16;
    int v49 = 0;
    LODWORD(v39) = v9;
    int v41 = 0;
    uint64_t v42 = v32;
    uint64_t v43 = v33;
    int v44 = 1;
    uint64_t v45 = v26;
    uint64_t v46 = v36;
    int v47 = 1;
    uint64_t v39 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v34)[4])(v34, 136, &v48, 1, &v39, 3, 0);
    uint64_t v40 = v35;
    int v41 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*v34)[4])(v34, v4, v38, 1, &v39, 1, 0);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return 1;
}

uint64_t sub_1CD2C1210(llvm::IntegerType ******a1, llvm::MachineInstr *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(*((void *)a2 + 4) + 4);
  if (v4 < 0 && (uint64_t v5 = a1[1], v6 = v4 & 0x7FFFFFFF, v6 < *((_DWORD *)v5 + 108))) {
    unint64_t v7 = (unint64_t)v5[53][v6];
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v106 = v7;
  unsigned int v8 = sub_1CB8F1DC4(&v106);
  unsigned int v10 = v8;
  if (v9 != 1 && v8 <= 0x40)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = (uint64_t)(*a1)[1][5];
    uint64_t v13 = *(unsigned int *)(*((void *)a2 + 4) + 4);
    v11[5] = (llvm::IntegerType ****)*((void *)a2 + 3);
    v11[6] = (llvm::IntegerType ****)a2;
    if (v8 == 64) {
      unint64_t v14 = -1;
    }
    else {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    }
    if ((v13 & 0x80000000) != 0) {
      unint64_t v15 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v15 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v13);
    }
    uint64_t v16 = *v15;
    if (v16)
    {
      if (*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3))
      {
        uint64_t v17 = *(void *)(v16 + 8);
        if (v17)
        {
          if (**(_WORD **)(v17 + 16) == 127 && *(_DWORD *)(v17 + 40) == 3)
          {
            uint64_t v23 = *(void *)(v17 + 32);
            uint64_t v24 = *(unsigned int *)(v23 + 36);
            sub_1CC73C210(*(_DWORD *)(v23 + 68), v12, (uint64_t)&v107);
            if ((_BYTE)v109)
            {
              if (v108 >= 0x41)
              {
                if (v107) {
                  MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
                }
              }
              else
              {
                if ((v24 & 0x80000000) != 0) {
                  uint64_t v25 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v25 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v24);
                }
                uint64_t v26 = *v25;
                if (v26)
                {
                  while ((*(unsigned char *)(v26 + 3) & 1) != 0)
                  {
                    uint64_t v26 = *(void *)(v26 + 24);
                    if (!v26) {
                      goto LABEL_15;
                    }
                  }
                  uint64_t v30 = v107 << -(uint64_t)v108 >> -(uint64_t)v108;
                  while (1)
                  {
                    uint64_t v26 = *(void *)(v26 + 24);
                    if (!v26) {
                      break;
                    }
                    if ((*(unsigned char *)(v26 + 3) & 1) == 0) {
                      goto LABEL_15;
                    }
                  }
                  if ((v24 & 0x80000000) != 0) {
                    uint64_t v32 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v32 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v24);
                  }
                  uint64_t v33 = *v32;
                  if (!v33) {
                    return 0;
                  }
                  if ((*(unsigned char *)(v33 + 3) & 1) == 0)
                  {
                    uint64_t v33 = *(void *)(v33 + 24);
                    if (!v33 || (*(unsigned char *)(v33 + 3) & 1) == 0) {
                      return 0;
                    }
                  }
                  uint64_t v34 = *(void *)(v33 + 8);
                  if (!v34) {
                    return 0;
                  }
                  if (**(_WORD **)(v34 + 16) != 128) {
                    return 0;
                  }
                  if (*(_DWORD *)(v34 + 40) != 3) {
                    return 0;
                  }
                  uint64_t v35 = *(void *)(v34 + 32);
                  uint64_t v31 = *(unsigned int *)(v35 + 36);
                  sub_1CC73C210(*(_DWORD *)(v35 + 68), v12, (uint64_t)&v107);
                  if (!(_BYTE)v109) {
                    return 0;
                  }
                  if (v108 < 0x41)
                  {
                    if ((v31 & 0x80000000) != 0) {
                      uint64_t v36 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v36 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v31);
                    }
                    uint64_t v37 = *v36;
                    if (!v37) {
                      return 0;
                    }
                    while ((*(unsigned char *)(v37 + 3) & 1) != 0)
                    {
                      uint64_t v37 = *(void *)(v37 + 24);
                      if (!v37) {
                        return 0;
                      }
                    }
                    while (1)
                    {
                      uint64_t v37 = *(void *)(v37 + 24);
                      if (!v37) {
                        break;
                      }
                      uint64_t v21 = 0;
                      if ((*(unsigned char *)(v37 + 3) & 1) == 0) {
                        return v21;
                      }
                    }
                    if (v107 << -(uint64_t)v108 >> -(uint64_t)v108 != v30) {
                      return 0;
                    }
                    unint64_t v45 = v14 << v30;
LABEL_87:
                    uint64_t v46 = (*a1)[1];
                    if ((*v46[45] & 0x20) == 0) {
                      goto LABEL_89;
                    }
                    unint64_t v113 = v106;
                    unint64_t v114 = v106;
                    unint64_t v115 = v106;
                    LODWORD(v107) = 65;
                    int v108 = &v113;
                    uint64_t v109 = 3;
                    uint64_t v110 = 0;
                    uint64_t v111 = 0;
                    uint64_t v47 = ((uint64_t (*)(llvm::IntegerType ***))(*v46[2])[21])(v46[2]);
                    if (!sub_1CC72D410(v47, (uint64_t)&v107))
                    {
LABEL_89:
                      unint64_t v48 = v45 & v14;
                      if ((v24 & 0x80000000) != 0) {
                        int v49 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        int v49 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v24);
                      }
                      uint64_t v50 = *v49;
                      if (v50
                        && ((*(unsigned char *)(v50 + 3) & 1) != 0
                         || (uint64_t v50 = *(void *)(v50 + 24)) != 0 && (*(unsigned char *)(v50 + 3) & 1) != 0))
                      {
                        unint64_t v51 = *(llvm::MachineInstr **)(v50 + 8);
                      }
                      else
                      {
                        unint64_t v51 = 0;
                      }
                      uint64_t v52 = *a1;
                      uint64_t v21 = 1;
                      LODWORD(v113) = v13;
                      LODWORD(v114) = 1;
                      LODWORD(v107) = v31;
                      LODWORD(v109) = 0;
                      unint64_t v104 = v106;
                      int v105 = 0;
                      unsigned int v53 = (llvm::LLVMContext *)(unsigned __int16)(v106 >> 3);
                      uint64_t v54 = (llvm::LLVMContext *)(unsigned __int16)(v106 >> 19);
                      if ((v106 & 2) == 0) {
                        uint64_t v54 = (llvm::LLVMContext *)(v106 >> 19);
                      }
                      if ((v106 & 4) != 0) {
                        unsigned int v53 = v54;
                      }
                      if (v106) {
                        unint64_t v55 = (llvm::LLVMContext *)(v106 >> 3);
                      }
                      else {
                        unint64_t v55 = v53;
                      }
                      unint64_t v56 = (llvm::ConstantInt *)llvm::IntegerType::get(***v52[1], v55);
                      uint64_t v57 = llvm::ConstantInt::get(v56, v48, (const llvm::APInt *)1);
                      uint64_t v110 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v52)[2])(v52, &v104, v57);
                      uint64_t v111 = v58;
                      int v112 = 1;
                      ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v52)[4])(v52, 65, &v113, 1, &v107, 2, 0);
                      llvm::MachineInstr::eraseFromParent(a2);
                      llvm::MachineInstr::eraseFromParent(v51);
                      return v21;
                    }
                    return 0;
                  }
                  goto LABEL_203;
                }
              }
            }
          }
        }
      }
    }
LABEL_15:
    if ((v13 & 0x80000000) != 0) {
      unint64_t v18 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v18 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v13);
    }
    uint64_t v19 = *v18;
    if (!v19) {
      return 0;
    }
    if ((*(unsigned char *)(v19 + 3) & 1) == 0)
    {
      uint64_t v19 = *(void *)(v19 + 24);
      if (!v19 || (*(unsigned char *)(v19 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v20 = *(void *)(v19 + 8);
    if (!v20) {
      return 0;
    }
    if (**(_WORD **)(v20 + 16) != 128) {
      return 0;
    }
    if (*(_DWORD *)(v20 + 40) != 3) {
      return 0;
    }
    uint64_t v27 = *(void *)(v20 + 32);
    uint64_t v24 = *(unsigned int *)(v27 + 36);
    sub_1CC73C210(*(_DWORD *)(v27 + 68), v12, (uint64_t)&v107);
    if (!(_BYTE)v109) {
      return 0;
    }
    if (v108 < 0x41)
    {
      if ((v24 & 0x80000000) != 0) {
        uint64_t v28 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v28 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v24);
      }
      uint64_t v29 = *v28;
      if (!v29) {
        return 0;
      }
      while ((*(unsigned char *)(v29 + 3) & 1) != 0)
      {
        uint64_t v29 = *(void *)(v29 + 24);
        if (!v29) {
          return 0;
        }
      }
      uint64_t v31 = v107 << -(uint64_t)v108 >> -(uint64_t)v108;
      while (1)
      {
        uint64_t v29 = *(void *)(v29 + 24);
        if (!v29) {
          break;
        }
        uint64_t v21 = 0;
        if ((*(unsigned char *)(v29 + 3) & 1) == 0) {
          return v21;
        }
      }
      uint64_t v38 = (uint64_t *)((v24 & 0x80000000) != 0
                      ? *(void *)(v12 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8
                      : *(void *)(v12 + 272) + 8 * v24);
      uint64_t v39 = *v38;
      if (!v39) {
        return 0;
      }
      if ((*(unsigned char *)(v39 + 3) & 1) == 0)
      {
        uint64_t v39 = *(void *)(v39 + 24);
        if (!v39 || (*(unsigned char *)(v39 + 3) & 1) == 0) {
          return 0;
        }
      }
      uint64_t v40 = *(void *)(v39 + 8);
      if (!v40) {
        return 0;
      }
      if (**(_WORD **)(v40 + 16) != 127) {
        return 0;
      }
      if (*(_DWORD *)(v40 + 40) != 3) {
        return 0;
      }
      uint64_t v41 = *(void *)(v40 + 32);
      uint64_t v42 = *(unsigned int *)(v41 + 36);
      sub_1CC73C210(*(_DWORD *)(v41 + 68), v12, (uint64_t)&v107);
      if (!(_BYTE)v109) {
        return 0;
      }
      if (v108 < 0x41)
      {
        if ((v42 & 0x80000000) != 0) {
          uint64_t v43 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v43 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v42);
        }
        uint64_t v44 = *v43;
        if (!v44) {
          return 0;
        }
        while ((*(unsigned char *)(v44 + 3) & 1) != 0)
        {
          uint64_t v44 = *(void *)(v44 + 24);
          if (!v44) {
            return 0;
          }
        }
        while (1)
        {
          uint64_t v44 = *(void *)(v44 + 24);
          if (!v44) {
            break;
          }
          uint64_t v21 = 0;
          if ((*(unsigned char *)(v44 + 3) & 1) == 0) {
            return v21;
          }
        }
        if (v107 << -(uint64_t)v108 >> -(uint64_t)v108 != v31) {
          return 0;
        }
        unint64_t v45 = v14 >> v31;
        LODWORD(v31) = v42;
        goto LABEL_87;
      }
    }
LABEL_203:
    if (v107) {
      MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
    }
    return 0;
  }
  if (v9 == 1) {
  if (v10 > 0x40)
  }
    return 0;
  uint64_t v59 = *a1;
  uint64_t v60 = (uint64_t)(*a1)[1][5];
  uint64_t v61 = *(unsigned int *)(*((void *)a2 + 4) + 4);
  v59[5] = (llvm::IntegerType ****)*((void *)a2 + 3);
  v59[6] = (llvm::IntegerType ****)a2;
  if (v10 == 64) {
    unint64_t v62 = -1;
  }
  else {
    unint64_t v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
  }
  if ((v61 & 0x80000000) != 0) {
    int64_t v63 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
  }
  else {
    int64_t v63 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v61);
  }
  uint64_t v64 = *v63;
  if (v64)
  {
    if (*(unsigned char *)(v64 + 3) & 1) != 0 || (uint64_t v64 = *(void *)(v64 + 24)) != 0 && (*(unsigned char *)(v64 + 3))
    {
      uint64_t v65 = *(void *)(v64 + 8);
      if (v65)
      {
        if (**(_WORD **)(v65 + 16) == 127 && *(_DWORD *)(v65 + 40) == 3)
        {
          uint64_t v73 = *(void *)(v65 + 32);
          uint64_t v70 = *(unsigned int *)(v73 + 36);
          sub_1CC73C210(*(_DWORD *)(v73 + 68), v60, (uint64_t)&v107);
          if ((_BYTE)v109)
          {
            if (v108 > 0x40)
            {
              if (v107) {
                MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
              }
            }
            else
            {
              if ((v70 & 0x80000000) != 0) {
                uint64_t v74 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v74 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v70);
              }
              uint64_t v75 = *v74;
              if (v75)
              {
                while ((*(unsigned char *)(v75 + 3) & 1) != 0)
                {
                  uint64_t v75 = *(void *)(v75 + 24);
                  if (!v75) {
                    goto LABEL_138;
                  }
                }
                uint64_t v76 = v107 << -(uint64_t)v108 >> -(uint64_t)v108;
                while (1)
                {
                  uint64_t v75 = *(void *)(v75 + 24);
                  if (!v75) {
                    break;
                  }
                  if ((*(unsigned char *)(v75 + 3) & 1) == 0) {
                    goto LABEL_138;
                  }
                }
                if ((v70 & 0x80000000) != 0) {
                  int v78 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
                }
                else {
                  int v78 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v70);
                }
                uint64_t v79 = *v78;
                if (!v79) {
                  return 0;
                }
                if ((*(unsigned char *)(v79 + 3) & 1) == 0)
                {
                  uint64_t v79 = *(void *)(v79 + 24);
                  if (!v79 || (*(unsigned char *)(v79 + 3) & 1) == 0) {
                    return 0;
                  }
                }
                uint64_t v80 = *(void *)(v79 + 8);
                if (!v80) {
                  return 0;
                }
                if (**(_WORD **)(v80 + 16) != 128) {
                  return 0;
                }
                if (*(_DWORD *)(v80 + 40) != 3) {
                  return 0;
                }
                uint64_t v81 = *(void *)(v80 + 32);
                uint64_t v82 = *(unsigned int *)(v81 + 36);
                sub_1CC73C210(*(_DWORD *)(v81 + 68), v60, (uint64_t)&v107);
                if (!(_BYTE)v109) {
                  return 0;
                }
                if (v108 > 0x40) {
                  goto LABEL_203;
                }
                if ((v82 & 0x80000000) != 0) {
                  unsigned int v83 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8);
                }
                else {
                  unsigned int v83 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v82);
                }
                uint64_t v84 = *v83;
                if (!v84) {
                  return 0;
                }
                while ((*(unsigned char *)(v84 + 3) & 1) != 0)
                {
                  uint64_t v84 = *(void *)(v84 + 24);
                  if (!v84) {
                    return 0;
                  }
                }
                while (1)
                {
                  uint64_t v84 = *(void *)(v84 + 24);
                  if (!v84) {
                    break;
                  }
                  uint64_t v21 = 0;
                  if ((*(unsigned char *)(v84 + 3) & 1) == 0) {
                    return v21;
                  }
                }
                if (v107 << -(uint64_t)v108 >> -(uint64_t)v108 != v76) {
                  return 0;
                }
                unint64_t v91 = v62 << v76;
                LODWORD(v76) = v82;
                goto LABEL_214;
              }
            }
          }
        }
      }
    }
  }
LABEL_138:
  if ((v61 & 0x80000000) != 0) {
    uint64_t v66 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v66 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v61);
  }
  uint64_t v67 = *v66;
  if (!v67) {
    return 0;
  }
  if ((*(unsigned char *)(v67 + 3) & 1) == 0)
  {
    uint64_t v67 = *(void *)(v67 + 24);
    if (!v67 || (*(unsigned char *)(v67 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v68 = *(void *)(v67 + 8);
  if (!v68) {
    return 0;
  }
  if (**(_WORD **)(v68 + 16) != 128) {
    return 0;
  }
  if (*(_DWORD *)(v68 + 40) != 3) {
    return 0;
  }
  uint64_t v69 = *(void *)(v68 + 32);
  uint64_t v70 = *(unsigned int *)(v69 + 36);
  sub_1CC73C210(*(_DWORD *)(v69 + 68), v60, (uint64_t)&v107);
  if (!(_BYTE)v109) {
    return 0;
  }
  if (v108 > 0x40) {
    goto LABEL_203;
  }
  if ((v70 & 0x80000000) != 0) {
    uint64_t v71 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v71 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v70);
  }
  uint64_t v72 = *v71;
  if (!v72) {
    return 0;
  }
  while ((*(unsigned char *)(v72 + 3) & 1) != 0)
  {
    uint64_t v72 = *(void *)(v72 + 24);
    if (!v72) {
      return 0;
    }
  }
  uint64_t v77 = v107 << -(uint64_t)v108 >> -(uint64_t)v108;
  while (1)
  {
    uint64_t v72 = *(void *)(v72 + 24);
    if (!v72) {
      break;
    }
    uint64_t v21 = 0;
    if ((*(unsigned char *)(v72 + 3) & 1) == 0) {
      return v21;
    }
  }
  uint64_t v85 = (uint64_t *)((v70 & 0x80000000) != 0
                  ? *(void *)(v60 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8
                  : *(void *)(v60 + 272) + 8 * v70);
  uint64_t v86 = *v85;
  if (!v86) {
    return 0;
  }
  if ((*(unsigned char *)(v86 + 3) & 1) == 0)
  {
    uint64_t v86 = *(void *)(v86 + 24);
    if (!v86 || (*(unsigned char *)(v86 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v87 = *(void *)(v86 + 8);
  if (!v87) {
    return 0;
  }
  if (**(_WORD **)(v87 + 16) != 127) {
    return 0;
  }
  if (*(_DWORD *)(v87 + 40) != 3) {
    return 0;
  }
  uint64_t v88 = *(void *)(v87 + 32);
  uint64_t v76 = *(unsigned int *)(v88 + 36);
  sub_1CC73C210(*(_DWORD *)(v88 + 68), v60, (uint64_t)&v107);
  if (!(_BYTE)v109) {
    return 0;
  }
  if (v108 > 0x40) {
    goto LABEL_203;
  }
  if ((v76 & 0x80000000) != 0) {
    int v89 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
  }
  else {
    int v89 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v76);
  }
  uint64_t v90 = *v89;
  if (!v90) {
    return 0;
  }
  while ((*(unsigned char *)(v90 + 3) & 1) != 0)
  {
    uint64_t v90 = *(void *)(v90 + 24);
    if (!v90) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v90 = *(void *)(v90 + 24);
    if (!v90) {
      break;
    }
    uint64_t v21 = 0;
    if ((*(unsigned char *)(v90 + 3) & 1) == 0) {
      return v21;
    }
  }
  if (v107 << -(uint64_t)v108 >> -(uint64_t)v108 != v77) {
    return 0;
  }
  unint64_t v91 = v62 >> v77;
LABEL_214:
  unsigned int v92 = (*a1)[1];
  if ((*v92[45] & 0x20) != 0)
  {
    unint64_t v113 = v106;
    unint64_t v114 = v106;
    unint64_t v115 = v106;
    LODWORD(v107) = 65;
    int v108 = &v113;
    uint64_t v109 = 3;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v93 = ((uint64_t (*)(llvm::IntegerType ***))(*v92[2])[21])(v92[2]);
    if (sub_1CC72D410(v93, (uint64_t)&v107)) {
      return 0;
    }
  }
  unint64_t v94 = v91 & v62;
  if ((v70 & 0x80000000) != 0) {
    uint64_t v95 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v95 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v70);
  }
  uint64_t v96 = *v95;
  if (v96 && ((*(unsigned char *)(v96 + 3) & 1) != 0 || (uint64_t v96 = *(void *)(v96 + 24)) != 0 && (*(unsigned char *)(v96 + 3) & 1) != 0)) {
    uint64_t v97 = *(llvm::MachineInstr **)(v96 + 8);
  }
  else {
    uint64_t v97 = 0;
  }
  uint64_t v98 = *a1;
  LODWORD(v113) = v61;
  LODWORD(v114) = 1;
  LODWORD(v107) = v76;
  LODWORD(v109) = 0;
  unint64_t v104 = v106;
  int v105 = 0;
  unint64_t v99 = (unsigned __int16)(v106 >> 19);
  if ((v106 & 2) == 0) {
    unint64_t v99 = (v106 >> 19);
  }
  if ((v106 & 4) == 0) {
    unint64_t v99 = (unsigned __int16)(v106 >> 3);
  }
  if (v106) {
    unint64_t v100 = (v106 >> 3);
  }
  else {
    unint64_t v100 = v99;
  }
  uint64_t v101 = (llvm::ConstantInt *)llvm::IntegerType::get(***v98[1], (llvm::LLVMContext *)v100);
  uint64_t v102 = llvm::ConstantInt::get(v101, v94, (const llvm::APInt *)1);
  uint64_t v110 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v98)[2])(v98, &v104, v102);
  uint64_t v111 = v103;
  int v112 = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v98)[4])(v98, 65, &v113, 1, &v107, 2, 0);
  llvm::MachineInstr::eraseFromParent(a2);
  llvm::MachineInstr::eraseFromParent(v97);
  return 1;
}

uint64_t sub_1CD2C1F30(uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7 = a3;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a3 < 0 && (a3 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a5 + 432)) {
    unint64_t v9 = *(void *)(*(void *)(a5 + 424) + 8 * (a3 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v10 = 0;
  unint64_t v48 = v9;
  while (1)
  {
    unint64_t v11 = byte_1CFB33910[v10];
    int8x8_t v12 = (int8x8_t)(a4 / v11);
    if (!(a4 % v11)) {
      break;
    }
    if (++v10 == 4) {
      return 0;
    }
  }
  uint64_t v13 = 0;
  v49[0] = byte_1CFB33910[v10];
  v49[1] = a4 / v11;
  if (v11 <= 0x11 && (unint64_t)(*(void *)&v12 - 18) >= 0xFFFFFFFFFFFFFFEFLL)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] != 1)
    {
      uint64_t v43 = 0;
      while (*(void *)&v12 != byte_1CFB33910[v43])
      {
        uint64_t v13 = 0;
        if (++v43 == 4) {
          return v13;
        }
      }
    }
    LOBYTE(v13) = 0;
    uint64_t v15 = 0;
    *(void *)(a6 + 40) = *(void *)(a2 + 24);
    *(void *)(a6 + 48) = a2;
    uint64_t v16 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
    do
    {
      char v17 = v13;
      unint64_t v18 = v49[v15];
      unint64_t v19 = v18 - 1;
      if (v18 != 1)
      {
        if (v18 && (v18 & v19) == 0)
        {
          unint64_t v33 = sub_1CB8F1DC4(&v48);
          if (v34 == 1)
          {
            unint64_t v45 = v33;
            unint64_t v33 = v45;
          }
          unint64_t v35 = 63 - __clz(v18);
          if (v33 <= v35) {
            return 0;
          }
          unint64_t v55 = v48;
          int v56 = 0;
          v50[0] = v7;
          int v51 = 0;
          unint64_t v46 = v48;
          int v47 = 0;
          uint64_t v36 = (llvm::LLVMContext *)(unsigned __int16)(v48 >> 3);
          uint64_t v37 = (llvm::LLVMContext *)(unsigned __int16)(v48 >> 19);
          if ((v48 & 2) == 0) {
            uint64_t v37 = (llvm::LLVMContext *)(v48 >> 19);
          }
          if ((v48 & 4) != 0) {
            uint64_t v36 = v37;
          }
          if (v48) {
            uint64_t v38 = (llvm::LLVMContext *)(v48 >> 3);
          }
          else {
            uint64_t v38 = v36;
          }
          uint64_t v39 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a6 + 8), v38);
          uint64_t v40 = llvm::ConstantInt::get(v39, v35, (const llvm::APInt *)1);
          uint64_t v52 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a6 + 16))(a6, &v46, v40);
          uint64_t v53 = v41;
          int v54 = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a6 + 32))(a6, 127, &v55, 1, v50, 2, v16);
        }
        else
        {
          uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
          v20.i16[0] = vaddlv_u8(v20);
          if (v20.u32[0] != 1) {
            llvm::llvm_unreachable_internal((llvm *)"Invalid multiply factor", 0, 0);
          }
          unint64_t v21 = sub_1CB8F1DC4(&v48);
          if (v22 == 1)
          {
            unint64_t v44 = v21;
            unint64_t v21 = v44;
          }
          unint64_t v23 = 63 - __clz(v19);
          if (v21 <= v23) {
            return 0;
          }
          unint64_t v55 = v48;
          int v56 = 0;
          v50[0] = v7;
          int v51 = 0;
          unint64_t v46 = v48;
          int v47 = 0;
          uint64_t v24 = (llvm::LLVMContext *)(unsigned __int16)(v48 >> 3);
          uint64_t v25 = (llvm::LLVMContext *)(unsigned __int16)(v48 >> 19);
          if ((v48 & 2) == 0) {
            uint64_t v25 = (llvm::LLVMContext *)(v48 >> 19);
          }
          if ((v48 & 4) != 0) {
            uint64_t v24 = v25;
          }
          if (v48) {
            uint64_t v26 = (llvm::LLVMContext *)(v48 >> 3);
          }
          else {
            uint64_t v26 = v24;
          }
          uint64_t v27 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a6 + 8), v26);
          uint64_t v28 = llvm::ConstantInt::get(v27, v23, (const llvm::APInt *)1);
          uint64_t v52 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a6 + 16))(a6, &v46, v28);
          uint64_t v53 = v29;
          int v54 = 1;
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a6 + 32))(a6, 127, &v55, 1, v50, 2, 0);
          unint64_t v55 = v48;
          int v56 = 0;
          v50[0] = v7;
          int v51 = 0;
          uint64_t v52 = v30;
          uint64_t v53 = v31;
          int v54 = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a6 + 32))(a6, 45, &v55, 1, v50, 2, v16);
        }
        int v7 = *(_DWORD *)(*(void *)(v32 + 32) + 4);
      }
      uint64_t v13 = 1;
      uint64_t v15 = 1;
    }
    while ((v17 & 1) == 0);
    LODWORD(v55) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    int v56 = 1;
    v50[0] = v7;
    int v51 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a6 + 32))(a6, 19, &v55, 1, v50, 1, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  }
  return v13;
}

BOOL sub_1CD2C23BC(llvm::IntegerType ******a1, uint64_t a2, unsigned int a3)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  int v7 = (*a1)[1];
  uint64_t v8 = (uint64_t)v7[5];
  v6[5] = *(llvm::IntegerType *****)(a2 + 24);
  v6[6] = (llvm::IntegerType ****)a2;
  unint64_t v9 = v7[43];
  uint64_t v10 = ((uint64_t (*)(llvm::IntegerType ***))(*v9)[42])(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 16);
  uint64_t v12 = ((uint64_t (*)(llvm::IntegerType ***))(*v9)[42])(v9);
  unsigned int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 56))(v12, v11);
  if (v13)
  {
    unint64_t v14 = (v13 - 1) | (((unint64_t)v13 - 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    unint64_t v16 = (v15 | (v15 >> 8) | ((v15 | (v15 >> 8)) >> 16)) + 1;
  }
  else
  {
    unint64_t v16 = 0;
  }
  uint64_t v17 = a3;
  uint64_t v18 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * a3 + 4);
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v20 = v18 & 0x7FFFFFFF;
    if (v20 >= *(_DWORD *)(v8 + 432)) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = *(void *)(*(void *)(v8 + 424) + 8 * v20);
    }
    unint64_t v98 = v21;
    unint64_t v19 = (uint64_t *)(*(void *)(v8 + 24) + 16 * v20 + 8);
  }
  else
  {
    unint64_t v98 = 0;
    unint64_t v19 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v18);
  }
  uint64_t v22 = *v19;
  if (!v22) {
    return 0;
  }
  if ((*(unsigned char *)(v22 + 3) & 1) == 0)
  {
    uint64_t v22 = *(void *)(v22 + 24);
    if (!v22 || (*(unsigned char *)(v22 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v23 = *(void *)(v22 + 8);
  if (!v23) {
    return 0;
  }
  if (**(_WORD **)(v23 + 16) != 128) {
    return 0;
  }
  if (*(_DWORD *)(v23 + 40) != 3) {
    return 0;
  }
  uint64_t v26 = *(void *)(v23 + 32);
  unint64_t v27 = *(unsigned int *)(v26 + 36);
  sub_1CC73C210(*(_DWORD *)(v26 + 68), v8, (uint64_t)&v99);
  if (!(_BYTE)v101) {
    return 0;
  }
  if (v100 >= 0x41) {
    goto LABEL_128;
  }
  unint64_t v28 = 63 - __clz(v16);
  uint64_t v29 = (uint64_t)(v99 << -(uint64_t)v100) >> -(uint64_t)v100;
  unint64_t v31 = sub_1CB8F1DC4(&v98);
  if (v30 == 1) {
  if (v31 < v29 + (unint64_t)v28)
  }
    return 0;
  if ((v27 & 0x80000000) != 0) {
    uint64_t v32 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v32 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v27);
  }
  uint64_t v33 = *v32;
  uint64_t v97 = v29;
  if (v33)
  {
    if (*(unsigned char *)(v33 + 3) & 1) != 0 || (uint64_t v33 = *(void *)(v33 + 24)) != 0 && (*(unsigned char *)(v33 + 3))
    {
      uint64_t v34 = *(void *)(v33 + 8);
      if (v34)
      {
        if (**(_WORD **)(v34 + 16) == 45 && *(_DWORD *)(v34 + 40) == 3)
        {
          uint64_t v36 = *(void *)(v34 + 32);
          uint64_t v35 = v34 + 32;
          unsigned int v37 = *(_DWORD *)(v36 + 36);
          sub_1CC73C210(*(_DWORD *)(v36 + 68), v8, (uint64_t)&v99);
          if ((_BYTE)v101)
          {
            char v43 = v100;
            if (v100 < 0x41) {
              goto LABEL_48;
            }
            if (v99) {
              MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)v35 + 36), v8, (uint64_t)&v99);
          if ((_BYTE)v101)
          {
            char v44 = v100;
            if (v100 < 0x41)
            {
LABEL_50:
              uint64_t v45 = (uint64_t)(v99 << -v44) >> -v44;
              unsigned int v37 = *(_DWORD *)(*(void *)v35 + 68);
              goto LABEL_51;
            }
            if (v99) {
              MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  if ((v27 & 0x80000000) != 0) {
    uint64_t v38 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v38 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v27);
  }
  uint64_t v39 = *v38;
  if (!v39) {
    goto LABEL_40;
  }
  if ((*(unsigned char *)(v39 + 3) & 1) == 0)
  {
    uint64_t v39 = *(void *)(v39 + 24);
    if (!v39 || (*(unsigned char *)(v39 + 3) & 1) == 0) {
      goto LABEL_40;
    }
  }
  uint64_t v40 = *(void *)(v39 + 8);
  if (!v40 || **(_WORD **)(v40 + 16) != 66 || *(_DWORD *)(v40 + 40) != 3) {
    goto LABEL_40;
  }
  uint64_t v41 = *(void *)(v40 + 32);
  uint64_t v35 = v40 + 32;
  unsigned int v37 = *(_DWORD *)(v41 + 36);
  sub_1CC73C210(*(_DWORD *)(v41 + 68), v8, (uint64_t)&v99);
  if (!(_BYTE)v101)
  {
LABEL_39:
    sub_1CC73C210(*(_DWORD *)(*(void *)v35 + 36), v8, (uint64_t)&v99);
    if (!(_BYTE)v101)
    {
LABEL_40:
      uint64_t v42 = 0;
      uint64_t v96 = 0;
      goto LABEL_68;
    }
    char v44 = v100;
    if (v100 >= 0x41)
    {
      if (v99) {
        MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
      }
      goto LABEL_40;
    }
    goto LABEL_50;
  }
  char v43 = v100;
  if (v100 >= 0x41)
  {
    if (v99) {
      MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
    }
    goto LABEL_39;
  }
LABEL_48:
  uint64_t v45 = (uint64_t)(v99 << -v43) >> -v43;
LABEL_51:
  unsigned int v47 = sub_1CB8F1DC4(&v98);
  if (v46 == 1) {
  LODWORD(v100) = v47;
  }
  if (v47 > 0x40) {
    operator new[]();
  }
  if (v47) {
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
  }
  else {
    unint64_t v48 = 0;
  }
  uint64_t v42 = v45;
  unsigned int v49 = __clz(__rbit64(v48 & v45));
  if (v47 >= v49) {
    unsigned int v50 = v49;
  }
  else {
    unsigned int v50 = v47;
  }
  if (v97 <= v50
    && ((v27 & 0x80000000) == 0
      ? (uint64_t v52 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v27))
      : (uint64_t v52 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8)),
        (uint64_t v53 = *v52) != 0
     && ((*(unsigned char *)(v53 + 3) & 1) != 0 || (uint64_t v53 = *(void *)(v53 + 24)) != 0 && (*(unsigned char *)(v53 + 3) & 1) != 0)))
  {
    uint64_t v51 = *(void *)(v53 + 8);
  }
  else
  {
    uint64_t v51 = 0;
  }
  if (v97 > v50) {
    return 0;
  }
  uint64_t v96 = v51;
  unint64_t v27 = v37;
LABEL_68:
  unint64_t v54 = v27 >> 31;
  if (v27 >> 31) {
    unint64_t v55 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v55 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v27);
  }
  uint64_t v56 = *v55;
  if (v56)
  {
    if (*(unsigned char *)(v56 + 3) & 1) != 0 || (uint64_t v56 = *(void *)(v56 + 24)) != 0 && (*(unsigned char *)(v56 + 3))
    {
      uint64_t v57 = *(void *)(v56 + 8);
      if (v57)
      {
        if (**(_WORD **)(v57 + 16) == 47 && *(_DWORD *)(v57 + 40) == 3)
        {
          sub_1CC73C210(*(_DWORD *)(*(void *)(v57 + 32) + 68), v8, (uint64_t)&v99);
          if ((_BYTE)v101)
          {
            uint64_t v95 = v42;
            char v65 = v100;
            if (v100 < 0x41) {
              goto LABEL_96;
            }
            if (v99) {
              MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v57 + 32) + 36), v8, (uint64_t)&v99);
          if (!(_BYTE)v101) {
            goto LABEL_77;
          }
          uint64_t v95 = v42;
          char v65 = v100;
          if (v100 < 0x41)
          {
LABEL_96:
            uint64_t v64 = (uint64_t)(v99 << -v65) >> -v65;
            goto LABEL_97;
          }
          if (v99) {
            MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
          }
        }
      }
    }
  }
LABEL_77:
  if (v54) {
    uint64_t v58 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v58 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v27);
  }
  uint64_t v59 = *v58;
  if (!v59) {
    return 0;
  }
  if ((*(unsigned char *)(v59 + 3) & 1) == 0)
  {
    uint64_t v59 = *(void *)(v59 + 24);
    if (!v59 || (*(unsigned char *)(v59 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v60 = *(void *)(v59 + 8);
  if (!v60) {
    return 0;
  }
  if (**(_WORD **)(v60 + 16) != 127) {
    return 0;
  }
  if (*(_DWORD *)(v60 + 40) != 3) {
    return 0;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v60 + 32) + 68), v8, (uint64_t)&v99);
  if (!(_BYTE)v101) {
    return 0;
  }
  if (v100 >= 0x41)
  {
LABEL_128:
    if (v99) {
      MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
    }
    return 0;
  }
  unint64_t v61 = (uint64_t)(v99 << -(uint64_t)v100) >> -(uint64_t)v100;
  if ((v61 & 0x8000000000000000) != 0) {
    return 0;
  }
  unint64_t v63 = sub_1CB8F1DC4(&v98);
  if (v62 == 1) {
  if (v61 >= v63)
  }
    return 0;
  uint64_t v95 = v42;
  uint64_t v64 = 1 << v61;
LABEL_97:
  unsigned int v67 = sub_1CB8F1DC4(&v98);
  if (v66 == 1) {
  if (v67 > 0x40)
  }
    operator new[]();
  if (v67) {
    unint64_t v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
  }
  else {
    unint64_t v68 = 0;
  }
  unsigned int v69 = __clz(__rbit64(v68 & v64));
  if (v67 >= v69) {
    unsigned int v70 = v69;
  }
  else {
    unsigned int v70 = v67;
  }
  BOOL v24 = v97 <= v70;
  if (v97 <= v70)
  {
    if (v54) {
      uint64_t v71 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v71 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v27);
    }
    uint64_t v72 = *v71;
    if (v72 && ((*(unsigned char *)(v72 + 3) & 1) != 0 || (uint64_t v72 = *(void *)(v72 + 24)) != 0 && (*(unsigned char *)(v72 + 3) & 1) != 0)) {
      uint64_t v73 = *(void *)(v72 + 8);
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = *a1;
    unint64_t v99 = v98;
    LODWORD(v100) = 0;
    if (v98)
    {
      unint64_t v75 = (v98 >> 3);
    }
    else if ((v98 & 4) != 0)
    {
      if ((v98 & 2) != 0) {
        unint64_t v75 = (unsigned __int16)(v98 >> 19);
      }
      else {
        unint64_t v75 = (v98 >> 19);
      }
    }
    else
    {
      unint64_t v75 = (unsigned __int16)(v98 >> 3);
    }
    uint64_t v76 = (llvm::ConstantInt *)llvm::IntegerType::get(***v74[1], (llvm::LLVMContext *)v75);
    uint64_t v77 = llvm::ConstantInt::get(v76, v64 >> v97, (const llvm::APInt *)1);
    uint64_t v78 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v74)[2])(v74, &v99, v77);
    uint64_t v79 = *a1;
    int v80 = *(_DWORD *)(*(void *)(v73 + 32) + 36);
    unint64_t v105 = v98;
    int v106 = 0;
    LODWORD(v99) = v80;
    int v101 = 0;
    uint64_t v102 = v78;
    uint64_t v103 = v81;
    int v104 = 1;
    uint64_t v82 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v79)[4])(v79, 47, &v105, 1, &v99, 2, 0);
    uint64_t v84 = v83;
    if (v95 >> v97)
    {
      unint64_t v85 = v82;
      uint64_t v86 = *a1;
      unint64_t v99 = v98;
      LODWORD(v100) = 0;
      if (v98)
      {
        unint64_t v87 = (v98 >> 3);
      }
      else if ((v98 & 4) != 0)
      {
        if ((v98 & 2) != 0) {
          unint64_t v87 = (unsigned __int16)(v98 >> 19);
        }
        else {
          unint64_t v87 = (v98 >> 19);
        }
      }
      else
      {
        unint64_t v87 = (unsigned __int16)(v98 >> 3);
      }
      uint64_t v88 = (llvm::ConstantInt *)llvm::IntegerType::get(***v86[1], (llvm::LLVMContext *)v87);
      int v89 = llvm::ConstantInt::get(v88, v95 >> v97, (const llvm::APInt *)1);
      uint64_t v90 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v86)[2])(v86, &v99, v89);
      unint64_t v91 = *a1;
      uint64_t v92 = **(unsigned __int16 **)(v96 + 16);
      unint64_t v105 = v98;
      int v106 = 0;
      unint64_t v99 = v85;
      uint64_t v100 = v84;
      int v101 = 1;
      uint64_t v102 = v90;
      uint64_t v103 = v93;
      int v104 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v91)[4])(v91, v92, &v105, 1, &v99, 2, 0);
      uint64_t v84 = v94;
    }
    ((void (*)(llvm::IntegerType *****, uint64_t))(*a1[2])[5])(a1[2], a2);
    llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 32 * v17, *(_DWORD *)(*(void *)(v84 + 32) + 4));
    ((void (*)(llvm::IntegerType *****, uint64_t))(*a1[2])[5])(a1[2], a2);
  }
  return v24;
}

uint64_t sub_1CD2C2FF4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(void *)(a2 + 32) + 32 * a3;
}

uint64_t sub_1CD2C3004(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  if ((v6 & 0x80000000) != 0) {
    int v7 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    int v7 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if (!v8
    || (*(unsigned char *)(v8 + 3) & 1) == 0 && ((uint64_t v8 = *(void *)(v8 + 24)) == 0 || (*(unsigned char *)(v8 + 3) & 1) == 0)
    || (uint64_t v8 = *(void *)(v8 + 8)) == 0)
  {
    int v10 = 0;
    return v10 & v8;
  }
  if (**(_WORD **)(v8 + 16) == 165)
  {
    *a3 = *(void *)(v8 + 32) + 32;
    uint64_t v9 = *(void *)(v8 + 32);
    *a4 = v9 + 64;
    if (!*(unsigned char *)(v9 + 64))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v12 = *(unsigned int *)(v9 + 68);
      unsigned int v13 = (uint64_t *)((v12 & 0x80000000) != 0
                      ? *(void *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8
                      : *(void *)(v11 + 272) + 8 * v12);
      uint64_t v14 = *v13;
      if (v14)
      {
        if (*(unsigned char *)(v14 + 3) & 1) != 0 || (uint64_t v14 = *(void *)(v14 + 24)) != 0 && (*(unsigned char *)(v14 + 3))
        {
          uint64_t v15 = *(void *)(v14 + 8);
          if (v15)
          {
            if (**(_WORD **)(v15 + 16) == 168)
            {
              uint64_t v16 = *(void *)(v15 + 32);
              if (!*(unsigned char *)(v16 + 32))
              {
                uint64_t v17 = *(unsigned int *)(v16 + 36);
                if ((v17 & 0x80000000) != 0) {
                  uint64_t v18 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v18 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v17);
                }
                uint64_t v8 = *v18;
                if (!v8) {
                  goto LABEL_9;
                }
                if (*(unsigned char *)(v8 + 3)) {
                  goto LABEL_21;
                }
                uint64_t v8 = *(void *)(v8 + 24);
                if (!v8) {
                  goto LABEL_9;
                }
                if (*(unsigned char *)(v8 + 3))
                {
LABEL_21:
                  uint64_t v8 = *(void *)(v8 + 8);
                  if (!v8) {
                    goto LABEL_9;
                  }
                  if (**(_WORD **)(v8 + 16) == 121
                    && sub_1CB844168(*(void *)(*(void *)(v8 + 32) + 48), 1.0))
                  {
                    *a4 = *(void *)(v15 + 32) + 64;
                    int v10 = 1;
                    LODWORD(v8) = 1;
                    return v10 & v8;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  LODWORD(v8) = 0;
LABEL_9:
  int v10 = 1;
  return v10 & v8;
}

unint64_t sub_1CD2C31B4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_1CC73C210(a3, *(void *)(a1 + 48), (uint64_t)&v8);
  if (v10)
  {
    if (v9 > 0x40)
    {
      if (v8) {
        MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
      }
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      unint64_t v6 = (v8 << -(char)v9 >> -(char)v9) & 0xFFFFFFFFFFFFFF00;
      uint64_t v7 = (v8 << -(char)v9 >> -(char)v9);
      uint64_t v3 = 1;
    }
    unint64_t v4 = v7 | v6;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

__n128 sub_1CD2C3254@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *a3 = *(_OWORD *)a2;
  a3[1] = v6;
  return result;
}

__n128 sub_1CD2C32A8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *a3 = *(_OWORD *)a2;
  a3[1] = v6;
  return result;
}

uint64_t sub_1CD2C32FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v94[0] = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, a3);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, a4);
  unsigned int v93 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, a5) + 4);
  uint64_t v12 = *(void *)(a1 + 48);
  sub_1CD2C3C98(v12, &v93);
  LODWORD(a5) = v93;
  sub_1CC73C210(v93, v12, (uint64_t)&v84);
  if ((_BYTE)v85)
  {
    if (DWORD2(v84) > 0x40)
    {
      if ((void)v84) {
        MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
      }
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      unint64_t v16 = ((uint64_t)((void)v84 << -BYTE8(v84)) >> -BYTE8(v84)) & 0xFFFFFFFFFFFFFF00;
      uint64_t v17 = ((uint64_t)((void)v84 << -BYTE8(v84)) >> -BYTE8(v84));
      uint64_t v14 = 1;
    }
    uint64_t v15 = v17 | v16;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  if (v14) {
    BOOL v18 = v15 < 0;
  }
  else {
    BOOL v18 = 0;
  }
  char v19 = v18;
  unsigned int v92 = *(_DWORD *)(v10 + 4);
  uint64_t v20 = *(void *)(a1 + 48);
  sub_1CD2C3C98(v20, &v92);
  uint64_t v21 = v92;
  sub_1CC73C210(v92, v20, (uint64_t)&v84);
  if ((_BYTE)v85)
  {
    if (DWORD2(v84) > 0x40)
    {
      if ((void)v84) {
        MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
      }
      unint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v24 = ((uint64_t)((void)v84 << -BYTE8(v84)) >> -BYTE8(v84)) & 0xFFFFFFFFFFFFFF00;
      uint64_t v25 = ((uint64_t)((void)v84 << -BYTE8(v84)) >> -BYTE8(v84));
      uint64_t v22 = 1;
    }
    unint64_t v23 = v25 | v24;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
  }
  uint64_t v26 = *(void *)(a1 + 48);
  if ((v21 & 0x80000000) != 0) {
    unint64_t v27 = (uint64_t *)(*(void *)(v26 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v27 = (uint64_t *)(*(void *)(v26 + 272) + 8 * v21);
  }
  uint64_t v28 = *v27;
  if (v28)
  {
    if (*(unsigned char *)(v28 + 3) & 1) != 0 || (uint64_t v28 = *(void *)(v28 + 24)) != 0 && (*(unsigned char *)(v28 + 3))
    {
      uint64_t v29 = *(void *)(v28 + 8);
      if ((v19 & 1) == 0) {
        goto LABEL_28;
      }
LABEL_22:
      if (v22)
      {
        unsigned int v30 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v23);
        int v31 = 0;
        char v32 = 0;
        int v33 = 0;
        unsigned int v35 = (v34 >> 24) & 0xFFF00 | 7;
        unsigned int v79 = v30;
        unint64_t v80 = v34;
      }
      else
      {
        int v31 = 2;
        v94[0] = 2;
        uint64_t v36 = (_OWORD *)(*(void *)(v29 + 32)
                       + 32 * llvm::MachineInstr::findRegisterDefOperandIdx(v29, v21, 0, 0, 0));
        long long v37 = v36[1];
        v91[0] = *v36;
        v91[1] = v37;
        (*(void (**)(long long *__return_ptr, uint64_t, _OWORD *))(*(void *)a1 + 32))(&v84, a1, v91);
        uint64_t v38 = *(void **)(a1 + 64);
        unint64_t v89 = 129;
        int v90 = 0;
        LODWORD(v81) = DWORD1(v84);
        LODWORD(v82) = 0;
        sub_1CC738034(v38, 118, &v89, (int *)&v81);
        char v32 = 0;
        int v33 = 0;
        unsigned int v35 = 0;
        unsigned int v79 = *(_DWORD *)(*(void *)(v39 + 32) + 4);
        unint64_t v80 = 0;
      }
      goto LABEL_52;
    }
  }
  uint64_t v29 = 0;
  if (v19) {
    goto LABEL_22;
  }
LABEL_28:
  if (!v22) {
    unint64_t v23 = 0;
  }
  unsigned int v79 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), v23);
  unsigned int v35 = (v40 >> 24) & 0xFFF00 | 7;
  unint64_t v41 = v40;
  uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 16);
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 184))(v42);
  sub_1CC73C210(a5, *(void *)(a1 + 48), (uint64_t)&v84);
  unint64_t v80 = v41;
  if ((_BYTE)v85)
  {
    if (DWORD2(v84) < 0x41)
    {
      a5 = (uint64_t)((void)v84 << -(uint64_t)DWORD2(v84)) >> -(uint64_t)DWORD2(v84);
      if (!a5 && ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)) & 1) != 0)
      {
        int v31 = 4;
        v94[0] = 4;
        char v32 = 1;
        int v33 = 1;
        goto LABEL_52;
      }
      unint64_t v54 = *(llvm::IntegerType ******)(a1 + 64);
      unint64_t v55 = 257;
      if (a5 < 0x10000) {
        unint64_t v55 = 129;
      }
      *(void *)&long long v84 = v55;
      DWORD2(v84) = 0;
      uint64_t v56 = (llvm::ConstantInt *)llvm::IntegerType::get(***v54[1], (llvm::LLVMContext *)(v55 >> 3));
      uint64_t v57 = llvm::ConstantInt::get(v56, a5, (const llvm::APInt *)1);
      ((void (*)(llvm::IntegerType *****, long long *, void *))(*v54)[2])(v54, &v84, v57);
      goto LABEL_45;
    }
    if ((void)v84) {
      MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
    }
  }
  if ((a5 - 1) <= 0x3FFFFFFE)
  {
    uint64_t v44 = *(void *)(a1 + 56);
    unsigned int RegSizeInBits = *(_DWORD *)(*(void *)(v44 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v43, a5, v44) + 24)
                               + *(_DWORD *)(v44 + 272)
                               * ((*(void *)(v44 + 248) - *(void *)(v44 + 240)) >> 3)));
LABEL_35:
    uint64_t v47 = *(void *)(a1 + 64);
    *(void *)&long long v81 = (8 * RegSizeInBits) | 1;
    DWORD2(v81) = 0;
    LODWORD(v84) = a5;
    LODWORD(v85) = 0;
    uint64_t v48 = sub_1CC7382B0(v47);
    uint64_t v49 = *(void *)(a1 + 64);
    DWORD2(v81) = 0;
    *(void *)&long long v84 = v48;
    *((void *)&v84 + 1) = v50;
    LODWORD(v85) = 1;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v49 + 32))(v49, 19, &v81, 1, &v84, 1, 0);
    LODWORD(a5) = *(_DWORD *)(*(void *)(v51 + 32) + 4);
    goto LABEL_36;
  }
  unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 56), a5, *(void *)(a1 + 48));
  if ((a5 & 0x80000000) == 0) {
    goto LABEL_35;
  }
  uint64_t v46 = *(void *)(a1 + 48);
  if ((a5 & 0x7FFFFFFF) >= *(_DWORD *)(v46 + 432)
    || (*(void *)(*(void *)(v46 + 424) + 8 * (a5 & 0x7FFFFFFF)) & 1) == 0)
  {
    goto LABEL_35;
  }
LABEL_36:
  if (RegSizeInBits >= 0x21)
  {
    uint64_t v52 = *(void *)(a1 + 64);
    *(void *)&long long v81 = 257;
    DWORD2(v81) = 0;
    LODWORD(v84) = a5;
    LODWORD(v85) = 0;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v52 + 32))(v52, 119, &v81, 1, &v84, 1, 0);
LABEL_45:
    LODWORD(a5) = *(_DWORD *)(*(void *)(v53 + 32) + 4);
  }
  if ((a5 - 1) <= 0x3FFFFFFE)
  {
    uint64_t v58 = *(void *)(a1 + 56);
    int v59 = *(_DWORD *)(*(void *)(v58 + 264)
                    + 24
                    * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v43, a5, v58) + 24)
                     + *(_DWORD *)(v58 + 272) * ((*(void *)(v58 + 248) - *(void *)(v58 + 240)) >> 3)));
  }
  else
  {
    int v59 = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 56), a5, *(void *)(a1 + 48));
  }
  int v33 = 0;
  if (v59 == 16) {
    int v31 = 6;
  }
  else {
    int v31 = 8;
  }
  v94[0] = v31;
  char v32 = 1;
LABEL_52:
  unsigned int v88 = *(_DWORD *)(v11 + 4);
  uint64_t v60 = *(void *)(a1 + 48);
  sub_1CD2C3C98(v60, &v88);
  uint64_t v61 = v88;
  sub_1CC73C210(v88, v60, (uint64_t)&v84);
  if ((_BYTE)v85)
  {
    if (DWORD2(v84) < 0x41)
    {
      unsigned int v72 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), (uint64_t)((void)v84 << -BYTE8(v84)) >> -BYTE8(v84));
      unsigned int v69 = (v73 >> 24) & 0xFFF00 | 7;
      unint64_t v70 = v73;
      goto LABEL_61;
    }
    if ((void)v84) {
      MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
    }
  }
  uint64_t v62 = *(void *)(a1 + 48);
  if ((v61 & 0x80000000) != 0) {
    unint64_t v63 = (uint64_t *)(*(void *)(v62 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v63 = (uint64_t *)(*(void *)(v62 + 272) + 8 * v61);
  }
  uint64_t v64 = *v63;
  if (v64 && ((*(unsigned char *)(v64 + 3) & 1) != 0 || (uint64_t v64 = *(void *)(v64 + 24)) != 0 && (*(unsigned char *)(v64 + 3) & 1) != 0)) {
    uint64_t v65 = *(void *)(v64 + 8);
  }
  else {
    uint64_t v65 = 0;
  }
  v31 |= 1u;
  v94[0] = v31;
  uint64_t v66 = (_OWORD *)(*(void *)(v65 + 32)
                 + 32 * llvm::MachineInstr::findRegisterDefOperandIdx(v65, v61, 0, 0, 0));
  long long v67 = v66[1];
  v87[0] = *v66;
  v87[1] = v67;
  (*(void (**)(long long *__return_ptr, uint64_t, _OWORD *))(*(void *)a1 + 40))(&v84, a1, v87);
  unint64_t v68 = *(void **)(a1 + 64);
  unint64_t v89 = 129;
  int v90 = 0;
  LODWORD(v81) = DWORD1(v84);
  LODWORD(v82) = 0;
  sub_1CC738034(v68, 118, &v89, (int *)&v81);
  unsigned int v69 = 0;
  unint64_t v70 = 0;
  unsigned int v72 = *(_DWORD *)(*(void *)(v71 + 32) + 4);
LABEL_61:
  long long v84 = __PAIR64__(v79, v35);
  long long v85 = v80;
  LOBYTE(v86) = 1;
  long long v81 = __PAIR64__(v72, v69);
  long long v82 = v70;
  LOBYTE(v83) = 1;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if ((result & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, long long *, long long *, int *))(*(void *)a1 + 288))(a1, a2, &v84, &v81, v94);
    if (!result)
    {
      char v78 = 0;
      uint64_t v77 = (unsigned char *)a6;
      goto LABEL_66;
    }
    int v31 = v94[0];
  }
  long long v75 = v85;
  *(_OWORD *)a6 = v84;
  *(_OWORD *)(a6 + 16) = v75;
  *(void *)(a6 + 32) = v86;
  *(_DWORD *)(a6 + 73) = v89;
  *(_DWORD *)(a6 + 76) = *(_DWORD *)((char *)&v89 + 3);
  long long v76 = v82;
  *(_OWORD *)(a6 + 80) = v81;
  *(_OWORD *)(a6 + 96) = v76;
  *(void *)(a6 + 112) = v83;
  *(_DWORD *)(a6 + 40) = v33;
  *(_DWORD *)(a6 + 44) = a5;
  *(void *)(a6 + 48) = 0;
  *(void *)(a6 + 56) = 0;
  *(void *)(a6 + 64) = 0;
  *(unsigned char *)(a6 + 72) = v32;
  *(_DWORD *)(a6 + 120) = v31;
  uint64_t v77 = (unsigned char *)(a6 + 160);
  char v78 = 1;
  *(unsigned char *)(a6 + 128) = 0;
LABEL_66:
  *uint64_t v77 = 0;
  *(unsigned char *)(a6 + 168) = v78;
  return result;
}

uint64_t sub_1CD2C3C98(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *a2;
  if ((v2 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 272) + 8 * v2);
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    if (*(unsigned char *)(v4 + 3) & 1) != 0 || (uint64_t v4 = *(void *)(v4 + 24)) != 0 && (*(unsigned char *)(v4 + 3))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        if (**(_WORD **)(v5 + 16) == 119 && *(_DWORD *)(v5 + 40) == 2)
        {
          uint64_t v2 = *(unsigned int *)(*(void *)(v5 + 32) + 36);
          *a2 = v2;
        }
      }
    }
  }
  if ((v2 & 0x80000000) != 0) {
    long long v6 = (uint64_t *)(*(void *)(result + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  }
  else {
    long long v6 = (uint64_t *)(*(void *)(result + 272) + 8 * v2);
  }
  uint64_t v7 = *v6;
  if (v7)
  {
    if (*(unsigned char *)(v7 + 3) & 1) != 0 || (uint64_t v7 = *(void *)(v7 + 24)) != 0 && (*(unsigned char *)(v7 + 3))
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        if (**(_WORD **)(v8 + 16) == 81 && *(_DWORD *)(v8 + 40) == 2)
        {
          uint64_t v2 = *(unsigned int *)(*(void *)(v8 + 32) + 36);
          *a2 = v2;
        }
      }
    }
  }
  uint64_t v9 = *(void *)(result + 24);
  uint64_t v10 = *(void *)(result + 272);
  uint64_t v11 = (uint64_t *)(v10 + 8 * v2);
  if ((int)v2 < 0) {
    uint64_t v11 = (uint64_t *)(v9 + 16 * (v2 & 0x7FFFFFFF) + 8);
  }
  uint64_t v12 = *v11;
  if (v12)
  {
    if (*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v12 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v12 + 3))
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13 && **(_WORD **)(v13 + 16) == 80 && *(_DWORD *)(v13 + 40) == 2)
      {
        uint64_t v19 = *(unsigned int *)(*(void *)(v13 + 32) + 36);
        uint64_t v20 = (uint64_t *)((int)v19 < 0 ? v9 + 16 * (v19 & 0x7FFFFFFF) + 8 : v10 + 8 * v19);
        uint64_t v21 = *v20;
        if (v21)
        {
          if (*(unsigned char *)(v21 + 3) & 1) != 0 || (uint64_t v21 = *(void *)(v21 + 24)) != 0 && (*(unsigned char *)(v21 + 3))
          {
            uint64_t v22 = *(void *)(v21 + 8);
            if (v22)
            {
              if (**(_WORD **)(v22 + 16) == 81 && *(_DWORD *)(v22 + 40) == 2)
              {
                uint64_t v2 = *(unsigned int *)(*(void *)(v22 + 32) + 36);
                *a2 = v2;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v14 = (uint64_t *)(v10 + 8 * v2);
  uint64_t v15 = v9 + 16 * (v2 & 0x7FFFFFFF) + 8;
  if ((int)v2 < 0) {
    unint64_t v16 = (uint64_t *)v15;
  }
  else {
    unint64_t v16 = v14;
  }
  uint64_t v17 = *v16;
  if (v17)
  {
    if (*(unsigned char *)(v17 + 3) & 1) != 0 || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3))
    {
      uint64_t v18 = *(void *)(v17 + 8);
      if (v18 && **(_WORD **)(v18 + 16) == 126 && *(_DWORD *)(v18 + 40) == 2) {
        *a2 = *(_DWORD *)(*(void *)(v18 + 32) + 36);
      }
    }
  }
  return result;
}

uint64_t sub_1CD2C3ED4(uint64_t result, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4 = *(void *)(result + 48);
  uint64_t v5 = *(unsigned int *)(a2 + 4);
  if ((v5 & 0x80000000) != 0) {
    long long v6 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    long long v6 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if ((*(unsigned char *)(v7 + 3) & 1) == 0) {
    uint64_t v7 = *(void *)(v7 + 24);
  }
  uint64_t v8 = *(void *)(v7 + 8);
  int v9 = **(unsigned __int16 **)(v8 + 16);
  if (v9 == 77)
  {
    if (a4)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 1; i <= a4; unint64_t i = (v10++ + 2))
        a3[v10] = *(void *)(v8 + 32) + 32 * i;
    }
  }
  else if (v9 == 18)
  {
    unint64_t v12 = *(unsigned int *)(v8 + 40);
    if (v12 >= 2)
    {
      unint64_t v13 = 1;
      uint64_t v14 = 32;
      do
      {
        *a3++ = *(void *)(v8 + 32) + v14;
        v13 += 2;
        v14 += 64;
      }
      while (v13 < v12);
    }
  }
  return result;
}

uint64_t sub_1CD2C3F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(v2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if ((*(unsigned char *)(v5 + 3) & 1) == 0) {
    uint64_t v5 = *(void *)(v5 + 24);
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 8) + 368))(*(void *)(a1 + 8), **(unsigned __int16 **)(v6 + 16)))
  {
    return *(unsigned int *)(*(void *)(v6 + 32) + 48);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1CD2C4034(uint64_t a1, uint64_t a2)
{
  return sub_1CD2C4048(*(_DWORD *)(a2 + 4), 16, 0, *(void *)(a1 + 48));
}

uint64_t sub_1CD2C4048(unsigned int a1, int a2, int a3, uint64_t a4)
{
  if ((a1 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a1);
  }
  uint64_t v7 = *v6;
  if (v7)
  {
    if ((*(unsigned char *)(v7 + 3) & 1) == 0)
    {
      uint64_t v7 = *(void *)(v7 + 24);
      if (!v7) {
        goto LABEL_6;
      }
      if ((*(unsigned char *)(v7 + 3) & 1) == 0)
      {
        uint64_t v7 = 0;
        goto LABEL_6;
      }
    }
    uint64_t v7 = *(void *)(v7 + 8);
  }
LABEL_6:
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < *(_DWORD *)(a4 + 432)) {
    unint64_t v8 = *(void *)(*(void *)(a4 + 424) + 8 * (a1 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v14 = v8;
  int v9 = **(unsigned __int16 **)(v7 + 16);
  uint64_t v10 = sub_1CB8F1DC4(&v14);
  if (v11 == 1)
  {
    uint64_t v13 = v10;
    uint64_t v10 = v13;
  }
  if (v10 == a2) {
    return ((v9 - 121) < 0x40) & (0xE7039C0000004001 >> (v9 - 121)) ^ a3 ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD2C4158(uint64_t a1, uint64_t a2)
{
  return sub_1CD2C4048(*(_DWORD *)(a2 + 4), 16, 1, *(void *)(a1 + 48));
}

__n128 sub_1CD2C416C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int32 a6, int a7)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a5;
  unint64_t v15 = (8 * a5) | 1;
  uint64_t v16 = a1[8];
  v47.n128_u64[0] = v15;
  v47.n128_u32[2] = 0;
  (*(void (**)(uint64_t, uint64_t, __n128 *, uint64_t, void, void, void))(*(void *)v16 + 32))(v16, 68, &v47, 1, 0, 0, 0);
  unsigned __int32 v44 = *(_DWORD *)(*(void *)(v17 + 32) + 4);
  uint64_t v18 = *(void *)(*(void *)(a1[8] + 8) + 16);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 184))(v18);
  unsigned int v22 = *(_DWORD *)(a2 + 4);
  uint64_t v21 = (unsigned __int32 *)(a2 + 4);
  unsigned int v20 = v22;
  if (v22 - 1 <= 0x3FFFFFFE)
  {
    uint64_t v23 = a1[7];
    unsigned int RegSizeInBits = *(_DWORD *)(*(void *)(v23 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v19, v20, v23)
                                                     + 24)
                               + *(_DWORD *)(v23 + 272)
                               * ((*(void *)(v23 + 248) - *(void *)(v23 + 240)) >> 3)));
  }
  else
  {
    unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a1[7], v20, a1[6]);
  }
  if (RegSizeInBits <= a5)
  {
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v26 = a1[8];
    uint64_t v45 = (8 * (unsigned __int16)(RegSizeInBits / a5)) | (unint64_t)(v14 << 19) | 4;
    int v46 = 0;
    v47.n128_u32[0] = *v21;
    v48.n128_u32[0] = 0;
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __n128 *, uint64_t, void))(*(void *)v26 + 32))(v26, 19, &v45, 1, &v47, 1, 0);
    uint64_t v28 = (void *)a1[8];
    v47.n128_u64[0] = v27;
    v47.n128_u64[1] = v29;
    v48.n128_u32[0] = 1;
    sub_1CC7363F0(v28, v15, (int *)&v47);
    uint64_t v31 = v30;
  }
  unsigned __int32 v32 = v44;
  if (a7)
  {
    result.n128_u32[0] = a6;
    result.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)result.n128_u64[0]);
    result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
    unsigned __int32 v33 = 2 * result.n128_u32[0];
  }
  else
  {
    unsigned __int32 v33 = 0;
  }
  if (a4)
  {
    unsigned int v34 = 0;
    unsigned __int32 v35 = 0;
    while ((a7 & 1) == 0)
    {
      if ((a6 >> v35))
      {
        if (RegSizeInBits > a5) {
          goto LABEL_16;
        }
LABEL_18:
        uint64_t v42 = v21;
        goto LABEL_17;
      }
      unsigned __int32 v36 = v32;
LABEL_12:
      v47.n128_u64[1] = 0;
      v47.n128_u32[0] = 0;
      v47.n128_u32[1] = v36;
      __n128 v48 = 0uLL;
      uint64_t v37 = *(unsigned int *)(a3 + 8);
      unint64_t v38 = *(void *)a3;
      if (v37 >= *(_DWORD *)(a3 + 12))
      {
        BOOL v43 = v38 + 32 * v37 > (unint64_t)&v47;
        if (v38 <= (unint64_t)&v47 && v43) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v39 = (__n128 *)(v38 + 32 * *(unsigned int *)(a3 + 8));
      __n128 result = v47;
      __n128 v40 = v48;
      *uint64_t v39 = v47;
      v39[1] = v40;
      ++*(_DWORD *)(a3 + 8);
      if (a4 == ++v35) {
        return result;
      }
    }
    if (v35 >= v33)
    {
      unsigned __int32 v32 = v44;
      unsigned __int32 v36 = v44;
      goto LABEL_12;
    }
    unsigned __int32 v32 = v44;
    if (RegSizeInBits <= a5) {
      goto LABEL_18;
    }
LABEL_16:
    uint64_t v41 = v34++;
    uint64_t v42 = (unsigned __int32 *)(*(void *)(v31 + 32) + 32 * v41 + 4);
LABEL_17:
    unsigned __int32 v36 = *v42;
    goto LABEL_12;
  }
  return result;
}

__n128 sub_1CD2C44E0(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = a1[6];
  uint64_t v7 = *(unsigned int *)(a2 + 4);
  if ((v7 & 0x80000000) != 0) {
    unint64_t v8 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v8 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v7);
  }
  uint64_t v9 = *v8;
  if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
    uint64_t v9 = *(void *)(v9 + 24);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  int v11 = **(unsigned __int16 **)(v10 + 16);
  if (v11 == 77)
  {
    if (*(_DWORD *)(v10 + 40) >= 2u)
    {
      unsigned int v12 = *(_DWORD *)(a3 + 8);
      unint64_t v13 = 1;
      uint64_t v14 = 36;
      do
      {
        unsigned __int32 v15 = *(_DWORD *)(*(void *)(v10 + 32) + v14);
        v48.n128_u64[1] = 0;
        v48.n128_u32[0] = 0;
        v48.n128_u32[1] = v15;
        __n128 v49 = 0uLL;
        unint64_t v16 = *(void *)a3;
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          BOOL v35 = v16 + 32 * v12 > (unint64_t)&v48;
          if (v16 <= (unint64_t)&v48 && v35) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v17 = (__n128 *)(v16 + 32 * *(unsigned int *)(a3 + 8));
        __n128 result = v48;
        __n128 v19 = v49;
        __n128 *v17 = v48;
        v17[1] = v19;
        unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v12;
        ++v13;
        v14 += 32;
      }
      while (v13 < *(unsigned int *)(v10 + 40));
    }
    return result;
  }
  if (v11 == 18)
  {
    if (*(_DWORD *)(v10 + 40) >= 2u)
    {
      unsigned int v37 = 1;
      do
      {
        unsigned __int32 v38 = *(_DWORD *)(*(void *)(v10 + 32) + 32 * v37 + 4);
        v48.n128_u64[1] = 0;
        v48.n128_u32[0] = 0;
        v48.n128_u32[1] = v38;
        __n128 v49 = 0uLL;
        unint64_t v39 = sub_1CB8968D4(a3, (unint64_t)&v48, 1);
        __n128 v40 = (_OWORD *)(*(void *)a3 + 32 * *(unsigned int *)(a3 + 8));
        __n128 result = *(__n128 *)v39;
        long long v41 = *(_OWORD *)(v39 + 16);
        _OWORD *v40 = *(_OWORD *)v39;
        v40[1] = v41;
        ++*(_DWORD *)(a3 + 8);
        v37 += 2;
      }
      while (v37 < *(_DWORD *)(v10 + 40));
    }
  }
  else
  {
    int v20 = *(_DWORD *)(*(void *)(v10 + 32) + 4);
    if (v20 < 0 && (uint64_t v21 = v20 & 0x7FFFFFFF, v21 < *(_DWORD *)(v6 + 432))) {
      unint64_t v22 = *(void *)(*(void *)(v6 + 424) + 8 * v21);
    }
    else {
      unint64_t v22 = 0;
    }
    uint64_t v23 = 0x800000000000000;
    if ((v22 & 2) == 0) {
      uint64_t v23 = 0x8000000000000;
    }
    if ((v23 & v22) != 0)
    {
      unsigned int v42 = a4;
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      a4 = v42;
    }
    unsigned int v24 = (unsigned __int16)(v22 >> 3);
    if ((v22 & 2) != 0)
    {
      char v43 = 35;
      char v44 = 19;
      if ((v22 & 4) == 0) {
        char v43 = 19;
      }
      unint64_t v45 = v22 >> v43;
      if ((v22 & 4) == 0) {
        char v44 = 3;
      }
      if (v22) {
        char v44 = 3;
      }
      unint64_t v26 = (8 * (unsigned __int16)(v22 >> v44)) & 0xFFFFF8000007FFFFLL | ((v45 & 0xFFFFFF) << 19) | 2;
    }
    else
    {
      char v25 = 3;
      if ((v22 & 1) == 0) {
        char v25 = 19;
      }
      unint64_t v26 = v22 & 0x8000000000000000 | (8 * (v22 >> v25)) | 1;
    }
    unint64_t v47 = v26;
    uint64_t v27 = *(void *)(v10 + 32);
    if (v24 >= a4) {
      int v28 = a4;
    }
    else {
      int v28 = v24;
    }
    unsigned int v30 = sub_1CB8F1DC4(&v47);
    if (v29 == 1) {
    uint64_t v31 = *(unsigned __int8 **)(v10 + 56);
    }
    int v46 = v31;
    if (v31) {
      llvm::MetadataTracking::track((uint64_t)&v46, v31, 2);
    }
    result.n128_u64[0] = sub_1CD2C416C(a1, v27, a3, v28, v30, 0xFFFFFFFF, 0).n128_u64[0];
    if (v46)
    {
      int v32 = *v46;
      if ((v32 - 4) <= 0x1E)
      {
        if ((v46[1] & 0x7F) != 2 && !*((_DWORD *)v46 + 3)) {
          return result;
        }
        uint64_t v33 = *((void *)v46 + 2);
        if ((v33 & 4) == 0) {
          return result;
        }
        unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
        if (!v34) {
          return result;
        }
LABEL_45:
        v48.n128_u64[0] = (unint64_t)&v46;
        sub_1CC5FA668(v34 + 16, &v48);
        return result;
      }
      if ((v32 - 3) >= 0xFFFFFFFE) {
        unsigned __int32 v36 = v46;
      }
      else {
        unsigned __int32 v36 = 0;
      }
      if ((v32 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v34 = (unint64_t)(v36 + 8);
        goto LABEL_45;
      }
      if (v32 == 3) {
        *((void *)v46 + 1) = 0;
      }
    }
  }
  return result;
}

__n128 sub_1CD2C486C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a4 == 1)
  {
    __n128 result = *(__n128 *)a3;
    long long v38 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a3;
    *(_OWORD *)(a5 + 16) = v38;
  }
  else
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 16);
    uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 184))(v9);
    unint64_t v55 = v57;
    uint64_t v56 = 0x400000000;
    uint64_t v10 = &v52;
    uint64_t v52 = v54;
    uint64_t v53 = 0x400000000;
    if (a4)
    {
      uint64_t v11 = 32 * a4;
      unsigned int v12 = (unsigned int *)(a3 + 4);
      while (1)
      {
        unsigned int v14 = *v12;
        v12 += 8;
        unsigned int v13 = v14;
        if (v14 - 1 <= 0x3FFFFFFE)
        {
          uint64_t v15 = *(void *)(a1 + 56);
          unsigned int RegSizeInBits = *(_DWORD *)(*(void *)(v15 + 264)
                                    + 24
                                    * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v49, v13, v15)+ 24)+ *(_DWORD *)(v15 + 272)* ((*(void *)(v15 + 248) - *(void *)(v15 + 240)) >> 3)));
        }
        else
        {
          unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 56), v13, *(void *)(a1 + 48));
        }
        if (v53 >= (unint64_t)HIDWORD(v53)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v52 + v53) = RegSizeInBits;
        LODWORD(v53) = v53 + 1;
        if ((v13 & 0x80000000) == 0) {
          break;
        }
        uint64_t v17 = *(void *)(a1 + 48);
        if ((v13 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v17 + 432)) {
          break;
        }
        uint64_t v18 = *(void *)(*(void *)(v17 + 424) + 8 * (v13 & 0x7FFFFFFF));
        if ((v18 & 0xFFFFFFFFFFFFFFF9) == 0) {
          break;
        }
        if ((v18 & 1) == 0)
        {
          uint64_t v48 = *(void *)(a1 + 64);
          unint64_t v50 = (8 * RegSizeInBits) | 1;
          int v51 = 0;
          LODWORD(v58) = v13;
          v60[0] = 0;
          sub_1CC7382B0(v48);
          goto LABEL_43;
        }
LABEL_11:
        if (v56 >= (unint64_t)HIDWORD(v56)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v55 + v56) = v13;
        LODWORD(v56) = v56 + 1;
        v11 -= 32;
        if (!v11)
        {
          LOBYTE(v10) = *(_DWORD *)v52 == 16;
          goto LABEL_14;
        }
      }
      uint64_t v46 = *(void *)(a1 + 64);
      unint64_t v50 = (8 * RegSizeInBits) | 1;
      int v51 = 0;
      LODWORD(v58) = v13;
      v60[0] = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v46 + 32))(v46, 19, &v50, 1, &v58, 1, 0);
LABEL_43:
      unsigned int v13 = *(_DWORD *)(*(void *)(v47 + 32) + 4);
      goto LABEL_11;
    }
LABEL_14:
    unint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 56) + 240)
                    + 8
                    * (*(unsigned int (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 248))(*(void *)(a1 + 8), a4, v10 & 1));
    (*(void (**)(void))(**(void **)(a1 + 8) + 264))();
    int v20 = (unsigned int *)v52;
    if (v53)
    {
      uint64_t v21 = 0;
      while (*(_DWORD *)v52 == *(_DWORD *)((char *)v52 + v21))
      {
        v21 += 4;
        if (4 * v53 == v21) {
          goto LABEL_18;
        }
      }
      unsigned int v22 = v56;
      if (v56)
      {
        unint64_t v39 = 0;
        do
        {
          __n128 v40 = v55;
          unsigned int v41 = *((_DWORD *)v55 + v39);
          if (v41 - 1 <= 0x3FFFFFFE)
          {
            uint64_t v42 = *(void *)(a1 + 56);
            int v43 = *(_DWORD *)(*(void *)(v42 + 264)
                            + 24
                            * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v49, v41, v42) + 24)
                             + *(_DWORD *)(v42 + 272)
                             * ((*(void *)(v42 + 248) - *(void *)(v42 + 240)) >> 3)));
          }
          else
          {
            int v43 = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 56), v41, *(void *)(a1 + 48));
          }
          if (v43 == 16)
          {
            uint64_t v44 = *(void *)(a1 + 64);
            unint64_t v50 = 257;
            int v51 = 0;
            LODWORD(v58) = v40[v39];
            v60[0] = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v44 + 32))(v44, 118, &v50, 1, &v58, 1, 0);
            v40[v39] = *(_DWORD *)(*(void *)(v45 + 32) + 4);
          }
          ++v39;
          unsigned int v22 = v56;
        }
        while (v39 < v56);
        int v20 = (unsigned int *)v52;
      }
    }
    else
    {
LABEL_18:
      unsigned int v22 = v56;
    }
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v50 = (8 * (unsigned __int16)v22) | ((unint64_t)*v20 << 19) | 4;
    int v51 = 0;
    unsigned int v24 = (int *)v55;
    unsigned int v25 = v22;
    uint64_t v58 = v60;
    uint64_t v59 = 0x800000000;
    if (v22 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v22)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 4 * v22;
      do
      {
        int v28 = *v24++;
        unint64_t v29 = &v60[v26];
        *unint64_t v29 = v28;
        v29[4] = 0;
        v26 += 6;
        v27 -= 4;
      }
      while (v27);
      int v30 = v59;
    }
    else
    {
      int v30 = 0;
    }
    LODWORD(v59) = v30 + v25;
    uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(void *)v23 + 32))(v23, 77, &v50, 1);
    uint64_t v33 = v32;
    if (v58 != v60) {
      free(v58);
    }
    uint64_t v34 = *(void *)(a1 + 64);
    unint64_t v50 = v19;
    int v51 = 2;
    uint64_t v58 = v31;
    uint64_t v59 = v33;
    v60[0] = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v34 + 32))(v34, 19, &v50, 1, &v58, 1, 0);
    int v37 = *(_DWORD *)(*(void *)(v36 + 32) + 4);
    *(_DWORD *)a5 = 0;
    *(_DWORD *)(a5 + 4) = v37;
    *(void *)(a5 + 16) = 0;
    *(void *)(a5 + 24) = 0;
    *(void *)(a5 + 8) = 0;
    if (v52 != v54) {
      free(v52);
    }
    if (v55 != v57) {
      free(v55);
    }
  }
  return result;
}

uint64_t sub_1CD2C4E60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(a3 + 32) + 32 * v3 + 4), a1[6], (uint64_t)&v16);
    int v8 = v18;
    if (v18)
    {
      if (v17 > 0x40)
      {
        if (v16) {
          MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
        }
        int v14 = 0;
        int v15 = 0;
      }
      else
      {
        int v14 = (v16 << -(char)v17 >> -(char)v17) & 0xFFFFFF00;
        int v15 = (v16 << -(char)v17 >> -(char)v17);
      }
      int v8 = v15 | v14;
    }
    v7.i32[0] = v8;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    __int32 v10 = v9.i32[0] << *(unsigned char *)(a2 + 96);
    uint64_t v11 = v10 + (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 200))(a1, a2, a3);
    uint64_t v12 = 0x100000000;
  }
  return v12 | v11;
}

void sub_1CD2C4F78(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18, unsigned int a19)
{
  unsigned char v89[16] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = *(unsigned int *)(a2 + 24);
  if (v21 != -1)
  {
    sub_1CC73C210(*(_DWORD *)(a3[4] + 32 * v21 + 4), a1[6], (uint64_t)&v79);
    if (LOBYTE(v80[0]))
    {
      if (DWORD2(v79) > 0x40 && (void)v79) {
        MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
      }
    }
  }
  unint64_t v87 = v89;
  uint64_t v88 = 0x1000000000;
  (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1[1] + 288))(a1[1], a2, *(void *)(a3[3] + 32), a18, a19);
  (*(void (**)(_OWORD *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(*a1 + 96))(v73, a1, a3, a9, a10);
  long long v71 = v73[0];
  long long v72 = v73[1];
  long long v84 = v86;
  uint64_t v85 = 0x800000000;
  if (a12)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(*a1 + 96))(&v79, a1, a3, a11, a12);
    if (a18 == 7)
    {
      if (v79 == 1)
      {
        unint64_t v47 = *(void *)&v80[0];
      }
      else
      {
        sub_1CC73C210(DWORD1(v79), a1[6], (uint64_t)&v81);
        if (LOBYTE(v83[0]))
        {
          if (v82 > 0x40)
          {
            if (v81) {
              MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
            }
            unint64_t v57 = 0;
            uint64_t v58 = 0;
          }
          else
          {
            unint64_t v57 = ((uint64_t)((void)v81 << -(char)v82) >> -(char)v82) & 0xFFFFFFFFFFFFFF00;
            uint64_t v58 = ((uint64_t)((void)v81 << -(char)v82) >> -(char)v82);
          }
          unint64_t v47 = v58 | v57;
        }
        else
        {
          unint64_t v47 = 0;
        }
      }
      LODWORD(v81) = 1;
      uint64_t v82 = 0;
      v83[0] = v47;
      unsigned int v22 = &v81;
      uint64_t v23 = (char *)v84;
      if (v85 < HIDWORD(v85)) {
        goto LABEL_6;
      }
      if (v84 > &v81 || (char *)v84 + 32 * v85 <= (char *)&v81) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
    else
    {
      unsigned int v22 = (void **)&v79;
      uint64_t v23 = (char *)v84;
      if (v85 < HIDWORD(v85))
      {
LABEL_6:
        unsigned int v24 = &v23[32 * v85];
        long long v25 = *((_OWORD *)v22 + 1);
        *(_OWORD *)unsigned int v24 = *(_OWORD *)v22;
        *((_OWORD *)v24 + 1) = v25;
        LODWORD(v85) = v85 + 1;
        goto LABEL_7;
      }
      if (v84 > &v79 || (char *)v84 + 32 * v85 <= (char *)&v79) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
LABEL_7:
  long long v81 = v83;
  uint64_t v82 = 0x800000000;
  if (a14)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, void *, uint64_t))(*a1 + 96))(&v79, a1, a3, a13);
    if (v82 >= HIDWORD(v82))
    {
      if (v81 > &v79 || (char *)v81 + 32 * v82 <= (char *)&v79) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v48 = (char *)v81 + 32 * v82;
    long long v49 = v80[0];
    _OWORD *v48 = v79;
    v48[1] = v49;
    LODWORD(v82) = v82 + 1;
  }
  *(void *)&long long v79 = v80;
  *((void *)&v79 + 1) = 0x1000000000;
  long long v26 = *(_OWORD *)(a5 + 16);
  v69[0] = *(_OWORD *)a5;
  v69[1] = v26;
  uint64_t v70 = *(void *)(a5 + 32);
  long long v27 = *(_OWORD *)(a6 + 16);
  v67[0] = *(_OWORD *)a6;
  v67[1] = v27;
  uint64_t v68 = *(void *)(a6 + 32);
  long long v28 = *a7;
  long long v29 = a7[1];
  uint64_t v66 = *((void *)a7 + 4);
  v65[0] = v28;
  v65[1] = v29;
  v77[0] = &unk_1F264A928;
  char v78 = v77;
  v75[0] = &unk_1F264A970;
  long long v76 = v75;
  (*(void (**)(uint64_t *, uint64_t, void *, void, _OWORD *, _OWORD *, _OWORD *))(*a1 + 352))(a1, a2, a3, a4, v69, v67, v65);
  if (v76 == v75)
  {
    (*(void (**)(void *))(v75[0] + 32))(v75);
  }
  else if (v76)
  {
    (*(void (**)(void))(*v76 + 40))();
  }
  if (v78 == v77)
  {
    (*(void (**)(void *))(v77[0] + 32))(v77);
  }
  else if (v78)
  {
    (*(void (**)(void))(*v78 + 40))();
  }
  uint64_t v31 = a1[2];
  int v30 = (unint64_t *)a1[3];
  uint64_t v32 = *(void *)(a1[5] + 8) + 48 * a4;
  uint64_t v33 = *(llvm::MachineFunction **)(v31 + 32);
  uint64_t v34 = (unsigned __int8 *)a3[7];
  v74[0] = v34;
  if (v34) {
    llvm::MetadataTracking::track((uint64_t)v74, v34, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v33, v32, v74, 0);
  if (v74[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v74, v74[0]);
  }
  uint64_t v36 = *(void *)(v31 + 40);
  *((void *)MachineInstr + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)MachineInstr + 10);
  if (v38)
  {
    uint64_t v50 = *((void *)MachineInstr + 4);
    uint64_t v51 = *(void *)(v37 + 40);
    uint64_t v52 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v50)
      {
        uint64_t v53 = *(unsigned int *)(v50 + 4);
        if ((int)v53 >= 0) {
          unint64_t v54 = (uint64_t *)(*(void *)(v51 + 272) + 8 * v53);
        }
        else {
          unint64_t v54 = (uint64_t *)(*(void *)(v51 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
        }
        uint64_t v55 = *v54;
        if (*v54)
        {
          uint64_t v56 = *(void *)(v55 + 16);
          *(void *)(v55 + 16) = v50;
          *(void *)(v50 + 16) = v56;
          if (*(unsigned char *)(v50 + 3))
          {
            *(void *)(v50 + 24) = v55;
          }
          else
          {
            *(void *)(v50 + 24) = 0;
            unint64_t v54 = (uint64_t *)(v56 + 24);
          }
        }
        else
        {
          *(void *)(v50 + 16) = v50;
          *(void *)(v50 + 24) = 0;
        }
        uint64_t *v54 = v50;
      }
      v50 += 32;
      v52 -= 32;
    }
    while (v52);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, MachineInstr);
  }
  unint64_t v40 = *v30 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v40 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v30;
  *(void *)(v40 + 8) = MachineInstr;
  *int v30 = *v30 & 7 | (unint64_t)MachineInstr;
  if (!a16)
  {
    sub_1CD2C4E60(a1, a2, (uint64_t)a3);
    uint64_t v41 = (*(uint64_t (**)(void))(*(void *)a1[1] + 256))();
    uint64_t v42 = a1[6];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v42, "", 0);
    *(void *)(*(void *)(v42 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v41 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v44 = *(void *)(v42 + 8);
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
    }
    memset(&v74[1], 0, 24);
    HIDWORD(v74[0]) = IncompleteVirtualRegister;
    LODWORD(v74[0]) = 0x1000000;
    llvm::MachineInstr::addOperand(MachineInstr, v33, (const llvm::MachineOperand *)v74);
  }
  uint64_t v45 = (const llvm::MachineOperand *)v79;
  if (DWORD2(v79))
  {
    uint64_t v46 = 32 * DWORD2(v79);
    do
    {
      llvm::MachineInstr::addOperand(MachineInstr, v33, v45);
      uint64_t v45 = (const llvm::MachineOperand *)((char *)v45 + 32);
      v46 -= 32;
    }
    while (v46);
    uint64_t v45 = (const llvm::MachineOperand *)v79;
  }
  *(void *)a8 = v33;
  *(void *)(a8 + 8) = MachineInstr;
  *(unsigned char *)(a8 + 16) = 1;
  if (v45 != (const llvm::MachineOperand *)v80) {
    free(v45);
  }
  if (v81 != v83) {
    free(v81);
  }
  if (v84 != v86) {
    free(v84);
  }
  if (v87 != v89) {
    free(v87);
  }
}

BOOL sub_1CD2C5930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CD2C5948(a2, a3, *(void *)(a1 + 48), 1u);
}

BOOL sub_1CD2C5948(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 28);
  if (v4 == -1) {
    return 0;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 32 * v4 + 4), a3, (uint64_t)&v11);
  if (v12 >= 0x41) {
    uint64_t v6 = v11;
  }
  else {
    uint64_t v6 = &v11;
  }
  BOOL v7 = (*v6 & a4) != 0;
  if (v12 >= 0x41 && v13 != 0 && v11 != 0) {
    MEMORY[0x1D25D9CB0]();
  }
  return v7;
}

BOOL sub_1CD2C59EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CD2C5948(a2, a3, *(void *)(a1 + 48), 2u);
}

BOOL sub_1CD2C5A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CD2C5948(a2, a3, *(void *)(a1 + 48), 8u);
}

BOOL sub_1CD2C5A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CD2C5948(a2, a3, *(void *)(a1 + 48), 0x10u);
}

BOOL sub_1CD2C5A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CD2C5948(a2, a3, *(void *)(a1 + 48), 0x40u);
}

void sub_1CD2C5A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(llvm::MachineFunction **)(*(void *)(*(void *)(a4 + 8) + 24) + 32);
  uint64_t v6 = *(void *)(a3 + 48);
  if ((v6 & 7) != 0)
  {
    unint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a3 + 48) = v6 & 0xFFFFFFFFFFFFFFF8;
  }
  int v8 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 272);
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    uint64_t v13 = v8();
    v16[0] = v13 | 4;
    v16[1] = 0;
    char v18 = 0;
    if (v13) {
      int v14 = *(_DWORD *)(v13 + 12);
    }
    else {
      int v14 = 0;
    }
    int v17 = v14;
    __int16 v15 = *(_WORD *)(v7 + 32);
    long long v19 = 0u;
    long long v20 = 0u;
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v5, (uint64_t)v16, v15, 16, 3, &v19, 0, 1, 0, 0, 0);
  }
  else
  {
    uint64_t v9 = v8();
    v21[0] = v9 | 4;
    v21[1] = 0;
    char v23 = 0;
    if (v9) {
      int v10 = *(_DWORD *)(v9 + 12);
    }
    else {
      int v10 = 0;
    }
    int v22 = v10;
    __int16 v11 = *(_WORD *)(v7 + 32);
    long long v19 = 0u;
    long long v20 = 0u;
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v5, (uint64_t)v21, v11, 16, 3, &v19, 0, 1, 0, 0, 0);
  }
  llvm::MachineInstr::addMemOperand(*(llvm::MachineInstr **)(a4 + 8), v5, MachineMemOperand);
}

void *sub_1CD2C5BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, a3, *(unsigned int *)(a2 + 40));
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v10 + 16) + 184))(*(void *)(v10 + 16));
  __n128 result = (void *)llvm::MachineInstr::getNumExplicitOperands((uint64_t)a5);
  if (result)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = result;
    do
    {
      uint64_t v16 = a5[4] + v13;
      if (!*(unsigned char *)v16)
      {
        __n128 result = (void *)sub_1CC73B398(v10, *(void **)(a1 + 56), *(void **)(a1 + 48), *(void *)(a1 + 40), v11, (uint64_t)a5, a5[2], v16, v14);
        if (result != *(_DWORD *)(v16 + 4)) {
          __n128 result = (void *)llvm::MachineOperand::setReg(v16, result);
        }
      }
      ++v14;
      v13 += 32;
    }
    while (v15 != v14);
  }
  uint64_t v17 = a3;
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    uint64_t v18 = *(unsigned int *)(*(void *)(a3 + 32) + 4);
    uint64_t v108 = a5[4];
    unsigned int v19 = *(_DWORD *)(v108 + 4);
    uint64_t v106 = (*(uint64_t (**)(void))(**(void **)(v10 + 16) + 184))(*(void *)(v10 + 16));
    if ((v18 - 1) <= 0x3FFFFFFE)
    {
      uint64_t v20 = *(void *)(a1 + 56);
      unsigned int RegSizeInBits = *(_DWORD *)(*(void *)(v20 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v106, v18, v20)
                                                       + 24)
                                 + *(_DWORD *)(v20 + 272)
                                 * ((*(void *)(v20 + 248) - *(void *)(v20 + 240)) >> 3)));
    }
    else
    {
      unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 56), v18, *(void *)(a1 + 48));
    }
    if (v19 - 1 <= 0x3FFFFFFE)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      unsigned int v23 = *(_DWORD *)(*(void *)(v22 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v106, v19, v22) + 24)
                       + *(_DWORD *)(v22 + 272) * ((*(void *)(v22 + 248) - *(void *)(v22 + 240)) >> 3)));
    }
    else
    {
      unsigned int v23 = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 56), v19, *(void *)(a1 + 48));
    }
    if (*(unsigned char *)(a2 + 8)) {
      int v24 = 32;
    }
    else {
      int v24 = 16;
    }
    unsigned int v114 = v24;
    uint64_t v111 = *(void *)(v10 + 736);
    uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 264))(*(void *)(a1 + 8));
    __int16 v110 = v25;
    if (*(unsigned char *)(a2 + 8)) {
      int v26 = HIDWORD(v25);
    }
    else {
      int v26 = v25;
    }
    if (RegSizeInBits > v23
      || (unsigned int v36 = v19, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2, a3)))
    {
      int v113 = v26;
      uint64_t v27 = *(void *)(a1 + 48);
      unsigned int v107 = v19;
      unsigned int v105 = v23;
      if ((v18 & 0x80000000) != 0) {
        long long v28 = (uint64_t *)(*(void *)(v27 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
      }
      else {
        long long v28 = (uint64_t *)(*(void *)(v27 + 272) + 8 * v18);
      }
      uint64_t v29 = *v28;
      if (!*v28) {
        goto LABEL_28;
      }
      uint64_t v30 = *(void *)(a1 + 56);
      while ((*(unsigned char *)(v29 + 3) & 1) != 0)
      {
        uint64_t v29 = *(void *)(v29 + 24);
        if (!v29) {
          goto LABEL_28;
        }
      }
      uint64_t v32 = (void *)(v29 + 8);
      uint64_t v31 = *(void *)(v29 + 8);
      if (**(_WORD **)(v31 + 16) != 19) {
        goto LABEL_28;
      }
      int v72 = 0;
LABEL_70:
      unsigned int v73 = *(_DWORD *)(*(void *)(v31 + 32) + 4);
      int v74 = v73 - 1 <= 0x3FFFFFFE
          ? *(_DWORD *)(*(void *)(v30 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v106, v73, v30) + 24)
                       + *(_DWORD *)(v30 + 272) * ((*(void *)(v30 + 248) - *(void *)(v30 + 240)) >> 3)))
          : llvm::TargetRegisterInfo::getRegSizeInBits(v30, v73, v27);
      if (!v72 || v72 == v74)
      {
        while (1)
        {
          uint64_t v29 = *(void *)(v29 + 24);
          if (!v29) {
            break;
          }
          if ((*(unsigned char *)(v29 + 3) & 1) == 0)
          {
            uint64_t v31 = *(void *)(v29 + 8);
            if (v31 != *v32)
            {
              uint64_t v32 = (void *)(v29 + 8);
              int v72 = v74;
              if (**(_WORD **)(v31 + 16) != 19) {
                goto LABEL_28;
              }
              goto LABEL_70;
            }
          }
        }
        if (v74 != v114) {
          goto LABEL_28;
        }
        uint64_t v119 = &v121;
        uint64_t v120 = 0x800000000;
        uint64_t v75 = *(void *)(a1 + 48);
        unsigned int v19 = v107;
        if ((v18 & 0x80000000) != 0) {
          long long v76 = (uint64_t *)(*(void *)(v75 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        }
        else {
          long long v76 = (uint64_t *)(*(void *)(v75 + 272) + 8 * v18);
        }
        int v26 = v113;
        uint64_t v77 = *v76;
        if (*v76)
        {
          while ((*(unsigned char *)(v77 + 3) & 1) != 0)
          {
            uint64_t v77 = *(void *)(v77 + 24);
            if (!v77) {
              goto LABEL_108;
            }
          }
          unsigned int v78 = 0;
          uint64_t v79 = *(void *)(v77 + 8);
          unsigned int v80 = 8;
LABEL_87:
          if (v78 >= v80) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v119 + v78) = v79;
          unsigned int v78 = v120 + 1;
          LODWORD(v120) = v120 + 1;
          uint64_t v81 = v77;
          while (1)
          {
            uint64_t v81 = *(void *)(v81 + 24);
            if (!v81) {
              break;
            }
            if ((*(unsigned char *)(v81 + 3) & 1) == 0)
            {
              uint64_t v79 = *(void *)(v81 + 8);
              if (v79 != *(void *)(v77 + 8))
              {
                unsigned int v80 = HIDWORD(v120);
                uint64_t v77 = v81;
                goto LABEL_87;
              }
            }
          }
          uint64_t v82 = (unsigned __int8 ***)v119;
          if (v78)
          {
            uint64_t v109 = (unsigned __int8 ***)((char *)v119 + 8 * v78);
            unsigned int v83 = a7;
            do
            {
              int v84 = *(_DWORD *)(a2 + 12);
              if (v84)
              {
                int v85 = 0;
                int v86 = 0;
                unint64_t v87 = *v82;
                uint64_t v88 = (*v82)[4];
                unint64_t v89 = (unsigned int *)(v88 + 32);
                while (((*((_DWORD *)v88 + 8) >> 8) & 0xFFF) - v113 != v85)
                {
                  v86 += (v83 >> v85++) & 1;
                  if (v84 == v85) {
                    goto LABEL_104;
                  }
                }
                if ((v83 >> v85))
                {
                  __int16 v90 = v86 + v113;
                  llvm::MachineOperand::setReg((uint64_t)(v88 + 32), v107);
                  int v91 = (v90 & 0xFFF) << 8;
                  if (v105 == v114) {
                    int v91 = 0;
                  }
                  *unint64_t v89 = *v89 & 0xFFF000FF | v91;
                }
                else
                {
                  unsigned int v98 = *((_DWORD *)v88 + 1);
                  uint64_t v99 = *(void *)(a1 + 48);
                  uint64_t v100 = *(void *)(*(void *)(v99 + 24) + 16 * (v98 & 0x7FFFFFFF));
                  if ((v100 & 4) != 0) {
                    unint64_t v101 = 0;
                  }
                  else {
                    unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8;
                  }
                  unsigned int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v99, v101, "", 0);
                  sub_1CB85AA4C(*(void *)(a1 + 16), *(unint64_t **)(a1 + 24), v87 + 7, *(void *)(*(void *)(a1 + 40) + 8) + 480, VirtualRegister);
                  uint64_t v103 = *(void **)(a1 + 48);
                  if (v111)
                  {
                    sub_1CC6EE548(v111, (uint64_t)v103, v98);
                    llvm::MachineRegisterInfo::replaceRegWith(*(void **)(a1 + 48), v98, VirtualRegister);
                    sub_1CC6EE76C((llvm::SmallPtrSetImplBase *)v111);
                  }
                  else
                  {
                    llvm::MachineRegisterInfo::replaceRegWith(v103, v98, VirtualRegister);
                  }
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v87);
                  unsigned int v83 = a7;
                }
              }
LABEL_104:
              ++v82;
            }
            while (v82 != v109);
            uint64_t v82 = (unsigned __int8 ***)v119;
            int v26 = v113;
          }
          if (v82 != (unsigned __int8 ***)&v121) {
            free(v82);
          }
        }
LABEL_108:
        unsigned int v36 = v107;
        uint64_t v17 = a3;
      }
      else
      {
LABEL_28:
        uint64_t v33 = (*(uint64_t (**)(void, void, BOOL))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 12), *(unsigned char *)(a2 + 8) == 0);
        uint64_t v34 = *(unsigned int *)(a2 + 12);
        BOOL v35 = (unsigned __int8 *)a5[7];
        uint64_t v116 = v35;
        unsigned int v19 = v107;
        if (v35) {
          llvm::MetadataTracking::track((uint64_t)&v116, v35, 2);
        }
        LOBYTE(v104) = *(unsigned char *)(a2 + 96);
        unsigned int v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int8 **, void, uint64_t, void, int))(*(void *)a1 + 296))(a1, v108, v34, v114, &v116, a7, v33, *(unsigned __int8 *)(a2 + 8), v104);
        uint64_t v17 = a3;
        if (v116) {
          llvm::MetadataTracking::untrack((uint64_t)&v116, v116);
        }
        int v26 = v113;
      }
    }
    uint64_t v37 = *(void *)(a1 + 64);
    LODWORD(v117) = v18;
    int v118 = 1;
    LODWORD(v119) = v36;
    LODWORD(v121) = 0;
    __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v37 + 32))(v37, 19, &v117, 1, &v119, 1, 0);
    uint64_t v38 = *(void *)(v17 + 32);
    if ((*(_DWORD *)(v38 + 32) & 0x10000FF) == 0x1000000)
    {
      uint64_t v39 = *(void *)(a1 + 48);
      uint64_t v40 = *(unsigned int *)(v38 + 36);
      uint64_t v41 = (uint64_t *)((v40 & 0x80000000) != 0
                      ? *(void *)(v39 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8
                      : *(void *)(v39 + 272) + 8 * v40);
      uint64_t v42 = *v41;
      if (v42)
      {
        while ((*(unsigned char *)(v42 + 3) & 1) != 0)
        {
          uint64_t v42 = *(void *)(v42 + 24);
          if (!v42) {
            return result;
          }
        }
        int v43 = sub_1CD2C4E60((uint64_t *)a1, a2, v17);
        uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))();
        uint64_t v45 = *(void *)(a1 + 64);
        uint64_t v117 = v44;
        int v118 = 2;
        uint64_t v46 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v45 + 32))(v45, 19, &v117, 1, 0, 0, 0);
        uint64_t v48 = v47;
        uint64_t v120 = 0;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        LODWORD(v119) = (((v26 + v43) << 8) + 1048320) & 0xFFF00;
        HIDWORD(v119) = v19;
        llvm::MachineInstr::addOperand(v47, v46, (const llvm::MachineOperand *)&v119);
        uint64_t v49 = *(void *)(a1 + 64);
        if (!*(unsigned char *)(a2 + 8))
        {
          LODWORD(v117) = *(_DWORD *)(v38 + 36);
          int v118 = 1;
          uint64_t v119 = v46;
          uint64_t v120 = (uint64_t)v48;
          LODWORD(v121) = 1;
          return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v49 + 32))(v49, 19, &v117, 1, &v119, 1, 0);
        }
        uint64_t v117 = 129;
        int v118 = 0;
        uint64_t v50 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v49 + 32))(v49, 19, &v117, 1, 0, 0, 0);
        uint64_t v52 = v51;
        int v53 = *(_DWORD *)(*((void *)v48 + 4) + 4);
        uint64_t v120 = 0;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        LODWORD(v119) = (v110 & 0xFFF) << 8;
        HIDWORD(v119) = v53;
        llvm::MachineInstr::addOperand(v51, v50, (const llvm::MachineOperand *)&v119);
        unint64_t v54 = *(void **)(a1 + 48);
        uint64_t v55 = *(unsigned int *)(v38 + 36);
        if (v111)
        {
          sub_1CC6EE548(v111, *(void *)(a1 + 48), *(_DWORD *)(v38 + 36));
          uint64_t v56 = *(void **)(a1 + 48);
          uint64_t v57 = *(unsigned int *)(v38 + 36);
          unsigned int v58 = *(_DWORD *)(*((void *)v52 + 4) + 4);
          uint64_t v59 = (*(uint64_t (**)(void))(**(void **)(*v56 + 16) + 176))(*(void *)(*v56 + 16));
          if ((v57 & 0x80000000) != 0) {
            uint64_t v60 = (uint64_t *)(v56[3] + 16 * (v57 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v60 = (uint64_t *)(v56[34] + 8 * v57);
          }
          uint64_t v61 = *v60;
          if (*v60)
          {
            do
            {
              uint64_t v62 = *(void *)(v61 + 24);
              if (v58 - 1 <= 0x3FFFFFFE) {
                llvm::MachineOperand::substPhysReg((unsigned int *)v61, v58, v59);
              }
              else {
                llvm::MachineOperand::setReg(v61, v58);
              }
              uint64_t v61 = v62;
            }
            while (v62);
          }
          unint64_t v63 = *(void **)(v111 + 8);
          __n128 result = *(void **)(v111 + 16);
          uint64_t v64 = 24;
          if (result == v63) {
            uint64_t v64 = 28;
          }
          uint64_t v65 = *(unsigned int *)(v111 + v64);
          uint64_t v66 = *(unint64_t **)(v111 + 16);
          if (v65)
          {
            uint64_t v67 = 0;
            while (result[v67] >= 0xFFFFFFFFFFFFFFFELL)
            {
              if (v65 == ++v67) {
                goto LABEL_66;
              }
            }
            uint64_t v66 = &result[v67];
          }
          uint64_t v68 = &result[v65];
          if (v66 != v68)
          {
            unint64_t v69 = *v66;
LABEL_58:
            (*(void (**)(uint64_t, unint64_t))(*(void *)v111 + 40))(v111, v69);
            uint64_t v70 = v66 + 1;
            while (v70 != v68)
            {
              unint64_t v71 = *v70++;
              unint64_t v69 = v71;
              if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                uint64_t v66 = v70 - 1;
                goto LABEL_58;
              }
            }
            unint64_t v63 = *(void **)(v111 + 8);
            __n128 result = *(void **)(v111 + 16);
          }
LABEL_66:
          if (result != v63)
          {
            uint64_t v96 = *(unsigned int *)(v111 + 24);
            if (v96 >= 0x21 && 4 * (*(_DWORD *)(v111 + 28) - *(_DWORD *)(v111 + 32)) < v96) {
              return llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v111 + 8));
            }
            __n128 result = memset(result, 255, 8 * v96);
          }
          *(_DWORD *)(v111 + 28) = 0;
          *(_DWORD *)(v111 + 32) = 0;
        }
        else
        {
          unsigned int v92 = *(_DWORD *)(*((void *)v52 + 4) + 4);
          uint64_t v93 = (*(uint64_t (**)(void))(**(void **)(*v54 + 16) + 176))(*(void *)(*v54 + 16));
          if ((v55 & 0x80000000) != 0) {
            uint64_t v94 = (void **)(v54[3] + 16 * (v55 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v94 = (void **)(v54[34] + 8 * v55);
          }
          __n128 result = *v94;
          if (*v94)
          {
            do
            {
              uint64_t v95 = (void *)result[3];
              if (v92 - 1 <= 0x3FFFFFFE) {
                llvm::MachineOperand::substPhysReg((unsigned int *)result, v92, v93);
              }
              else {
                llvm::MachineOperand::setReg((uint64_t)result, v92);
              }
              __n128 result = v95;
            }
            while (v95);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD2C67F0(uint64_t *a1, uint64_t a2, int a3, int a4, unsigned __int8 **a5, unsigned __int32 a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  LODWORD(v10) = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = v43;
  uint64_t v42 = 0x400000000;
  uint64_t v13 = *a5;
  uint64_t v37 = v13;
  if (v13)
  {
    uint64_t v34 = a2;
    llvm::MetadataTracking::track((uint64_t)&v37, v13, 2);
    a2 = v34;
  }
  __n128 v14 = sub_1CD2C416C(a1, a2, (uint64_t)&v41, a3, v10, a6, a9);
  if (v37) {
    llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
  }
  uint64_t v38 = v40;
  uint64_t v39 = 0x400000000;
  if (v42)
  {
    LODWORD(v15) = 0;
    uint64_t v10 = v10;
    uint64_t v16 = 32 * v42;
    uint64_t v17 = (int *)((char *)v41 + 4);
    do
    {
      int v19 = *v17;
      v17 += 8;
      int v18 = v19;
      if ((v19 & 0x80000000) == 0
        || (uint64_t v20 = a1[6], (v18 & 0x7FFFFFFFu) >= *(_DWORD *)(v20 + 432))
        || (*(void *)(*(void *)(v20 + 424) + 8 * (v18 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) == 0)
      {
        uint64_t v32 = a1[8];
        uint64_t v35 = (8 * v10) | 1;
        int v36 = 0;
        LODWORD(v44) = v18;
        v46[0] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void, __n128))(*(void *)v32 + 32))(v32, 19, &v35, 1, &v44, 1, 0, v14);
        int v18 = *(_DWORD *)(*(void *)(v33 + 32) + 4);
        LODWORD(v15) = v39;
      }
      if (v15 >= HIDWORD(v39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v38 + v15) = v18;
      unint64_t v15 = (v39 + 1);
      LODWORD(v39) = v39 + 1;
      v16 -= 32;
    }
    while (v16);
    uint64_t v21 = (int *)v38;
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v10 = v10;
    uint64_t v21 = (int *)v40;
  }
  uint64_t v22 = a1[8];
  uint64_t v35 = (8 * (unsigned __int16)a3) | (unint64_t)(v10 << 19) | 4;
  int v36 = 0;
  uint64_t v44 = v46;
  uint64_t v45 = 0x800000000;
  if (v15 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v15)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 4 * v15;
    do
    {
      int v25 = *v21++;
      int v26 = &v46[v23];
      *int v26 = v25;
      void v26[4] = 0;
      v23 += 6;
      v24 -= 4;
    }
    while (v24);
    int v27 = v45;
  }
  else
  {
    int v27 = 0;
  }
  LODWORD(v45) = v27 + v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v22 + 32))(v22, 77, &v35, 1);
  uint64_t v29 = v28;
  if (v44 != v46) {
    free(v44);
  }
  uint64_t v30 = *(unsigned int *)(*(void *)(v29 + 32) + 4);
  if (v38 != v40) {
    free(v38);
  }
  if (v41 != v43) {
    free(v41);
  }
  return v30;
}

void sub_1CD2C6B3C()
{
}

void *sub_1CD2C6B50()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F264A928;
  return result;
}

void sub_1CD2C6B88(uint64_t a1, void *a2)
{
  *a2 = &unk_1F264A928;
}

void sub_1CD2C6BB0(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFF00000 | 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v2;
}

void sub_1CD2C6BD0()
{
}

void *sub_1CD2C6BE4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F264A970;
  return result;
}

void sub_1CD2C6C1C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F264A970;
}

__n128 sub_1CD2C6C44@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1CD2C6C50()
{
}

void sub_1CD2C6CC8()
{
}

void sub_1CD2C6E0C()
{
}

void sub_1CD2C6E9C()
{
}

void sub_1CD2C6F14()
{
}

BOOL sub_1CD2C6F8C(uint64_t a1)
{
  uint64_t v2 = 0;
  do
  {
    long long v3 = (unsigned __int8 *)(&off_1E685A720)[v2];
    if (v3) {
      size_t v4 = strlen((&off_1E685A720)[v2]);
    }
    else {
      size_t v4 = 0;
    }
    uint64_t NamedValue = llvm::Module::getNamedValue(a1, v3, v4);
    if (NamedValue) {
      break;
    }
  }
  while (v2++ != 28);
  return NamedValue != 0;
}

BOOL sub_1CD2C7004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v5 = a2 + 16 * a3;
  do
  {
    uint64_t v6 = *(unsigned __int8 **)v3;
    unint64_t v7 = *(void *)(v3 + 8);
    v3 += 16;
    uint64_t NamedValue = llvm::Module::getNamedValue(a1, v6, v7);
    BOOL v10 = NamedValue == 0;
    BOOL result = NamedValue != 0;
    BOOL v10 = !v10 || v3 == v5;
  }
  while (!v10);
  return result;
}

void sub_1CD2C7060(void *a1, char a2)
{
  v12[4] = *(llvm::ValueAsMetadata **)MEMORY[0x1E4F143B8];
  unsigned int v11 = 0;
  uint64_t v2 = a1[1];
  if (v2)
  {
    do
    {
      uint64_t v5 = *(llvm::ValueAsMetadata **)(v2 + 24);
      BOOL v6 = sub_1CD2C914C((uint64_t)v5);
      if (v5) {
        BOOL v7 = !v6;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        if (v11 >= 4uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v12[v11++] = v5;
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
    if (v11)
    {
      if (a2)
      {
        int v8 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(**(void **)*a1 + 1912), 0);
        BOOL v10 = (llvm::Value *)llvm::ConstantPointerNull::get(v8, v9);
      }
      else
      {
        BOOL v10 = (llvm::Value *)((void *)v12[0] - 4 * (*((_DWORD *)v12[0] + 5) & 0x7FFFFFF))[4];
      }
      llvm::Value::doRAUW(v12[0], v10, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
}

void sub_1CD2C71F4(unint64_t a1, const llvm::Function **a2, uint64_t a3, llvm::CallGraph *this, uint64_t a5)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (void *)*((void *)this + 2);
  if (!v9) {
    goto LABEL_12;
  }
  BOOL v10 = (void *)((char *)this + 16);
  do
  {
    unint64_t v11 = v9[4];
    BOOL v12 = v11 >= a1;
    if (v11 >= a1) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v9 + 1;
    }
    if (v12) {
      BOOL v10 = v9;
    }
    uint64_t v9 = (void *)*v13;
  }
  while (*v13);
  if (v10 == (void *)((char *)this + 16) || v10[4] > a1) {
LABEL_12:
  }
    BOOL v10 = (void *)((char *)this + 16);
  uint64_t v14 = v10[5];
  for (uint64_t i = *(void *)(v14 + 16); ; uint64_t i = *(void *)(v14 + 16))
  {
    uint64_t v16 = *(void *)(v14 + 24);
    if (i == v16) {
      break;
    }
    --*(_DWORD *)(*(void *)(v16 - 8) + 40);
    sub_1CBFA986C(v14 + 16, v16 - 40);
  }
  sub_1CD2C73A8((char *)this, v14);
  uint64_t v17 = *(char **)(a5 + 16);
  int v18 = *(char **)(a5 + 24);
  int v19 = (void *)(a5 + 16);
  __src = v24;
  uint64_t v23 = 0x800000000;
  sub_1CD4570C8((uint64_t)&__src, v17, v18);
  if (a3)
  {
    uint64_t v20 = 8 * a3;
    do
    {
      inserted = llvm::CallGraph::getOrInsertFunction(this, *a2);
      if (v23 >= (unint64_t)HIDWORD(v23)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__src + v23) = inserted;
      LODWORD(v23) = v23 + 1;
      sub_1CD2C73A8((char *)this, (uint64_t)inserted);
      ++a2;
      v20 -= 8;
    }
    while (v20);
  }
  sub_1CBFAFDE4(v19, (char *)__src, (char *)__src + 8 * v23, v23);
  if (__src != v24) {
    free(__src);
  }
}

char *sub_1CD2C73A8(char *this, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = v2 + 72;
  uint64_t v4 = *(void *)(v2 + 80);
  if (v4 == v2 + 72) {
    return this;
  }
  BOOL v6 = this;
  while (1)
  {
    uint64_t v7 = v4 - 24;
    if (!v4) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(v7 + 48);
    if (v8 != v7 + 40) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      return this;
    }
  }
  while (1)
  {
    if (v8) {
      uint64_t v9 = v8 - 24;
    }
    else {
      uint64_t v9 = 0;
    }
    unsigned int v10 = *(unsigned __int8 *)(v9 + 16) - 33;
    BOOL v11 = v10 > 0x33;
    uint64_t v12 = (1 << v10) & 0x8000000000041;
    if (!v11 && v12 != 0)
    {
      uint64_t v14 = *(void *)(v8 - 56);
      if (!v14
        || *(unsigned char *)(v14 + 16)
        || *(void *)(v14 + 24) != *(void *)(v8 + 48)
        || ((v18 = *(_DWORD *)(v14 + 36) - 124, v11 = v18 > 4, int v19 = (1 << v18) & 0x19, !v11)
          ? (BOOL v20 = v19 == 0)
          : (BOOL v20 = 1),
            !v20))
      {
        inserted = (uint64_t *)*((void *)v6 + 11);
LABEL_19:
        this = sub_1CBFA7A30(a2, (int32x2_t ****)(v8 - 24), (uint64_t)inserted);
        goto LABEL_20;
      }
      if ((*(unsigned char *)(v14 + 33) & 0x20) == 0)
      {
        inserted = llvm::CallGraph::getOrInsertFunction((llvm::CallGraph *)v6, (const llvm::Function *)v14);
        goto LABEL_19;
      }
    }
LABEL_20:
    uint64_t v8 = *(void *)(v8 + 8);
    uint64_t v16 = v4 - 24;
    if (!v4) {
      uint64_t v16 = 0;
    }
    if (v8 == v16 + 40) {
      break;
    }
LABEL_27:
    if (v4 == v3) {
      return this;
    }
  }
  while (1)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      return this;
    }
    uint64_t v17 = v4 - 24;
    if (!v4) {
      uint64_t v17 = 0;
    }
    uint64_t v8 = *(void *)(v17 + 48);
    if (v8 != v17 + 40) {
      goto LABEL_27;
    }
  }
}

void sub_1CD2C7514(uint64_t a1, uint64_t a2)
{
  v230[8] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v228 = v230;
  uint64_t v229 = 0x800000000;
  int v225 = v227;
  uint64_t v226 = 0x200000000;
  uint64_t v4 = a2 + 72;
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5 == a2 + 72) {
    goto LABEL_112;
  }
  while (1)
  {
    uint64_t v6 = v5 - 24;
    if (!v5) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(v6 + 48);
    if (v7 != v6 + 40) {
      break;
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_112;
    }
  }
  char v8 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = (void *)(a1 + 8);
  uint64_t v11 = a1 + 24;
  uint64_t v12 = (void *)(a1 + 120);
  uint64_t v13 = (const llvm::Value *)(a1 + 136);
  uint64_t v14 = a1 + 88;
  uint64_t v15 = a1 + 104;
  uint64_t v16 = a1 + 56;
  while (1)
  {
    uint64_t v17 = v7 - 24;
    if (v7) {
      uint64_t v18 = v7 - 24;
    }
    else {
      uint64_t v18 = 0;
    }
    if (*(unsigned char *)(v18 + 16) == 84)
    {
      uint64_t v19 = *(void *)(v18 - 32);
      if (v19)
      {
        if (!*(unsigned char *)(v19 + 16)
          && *(void *)(v19 + 24) == *(void *)(v18 + 72)
          && (*(unsigned char *)(v19 + 33) & 0x20) != 0)
        {
          int v22 = *(_DWORD *)(*(void *)(v7 - 56) + 36);
          switch(v22)
          {
            case 29:
              uint64_t v196 = v10;
              int v199 = v13;
              uint64_t v207 = v9;
              uint64_t v210 = v11;
              v203 = v12;
              uint64_t v28 = *(void *)(v17 - 32 * (*(_DWORD *)(v7 - 4) & 0x7FFFFFF));
              uint64_t v216 = v15;
              uint64_t v219 = v14;
              uint64_t v213 = v16;
              if (v28)
              {
                if (*(_DWORD *)(*(void *)(v28 - 32) + 36) == 36)
                {
                  sub_1CD2C8A54(v28);
                  uint64_t v16 = v213;
                  uint64_t v15 = v216;
                  uint64_t v14 = v219;
                  if (v29)
                  {
                    uint64_t v12 = v203;
                    uint64_t v9 = v207;
                    unsigned int v10 = v196;
                    uint64_t v13 = v199;
                    uint64_t v11 = v210;
                    break;
                  }
                }
              }
              if (*(void *)a1)
              {
                uint64_t v194 = "coroutine should have exactly one defining @llvm.coro.begin";
                goto LABEL_279;
              }
              *(void *)(v7 + 40) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v7 + 40), **(uint64_t ***)(v7 - 24), 0, 39);
              *(void *)(v7 + 40) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v7 + 40), **(uint64_t ***)(v7 - 24), 0, 19);
              *(void *)(v7 + 40) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v7 + 40), **(uint64_t ***)(v7 - 24), -1, 24);
              *(void *)a1 = v17;
LABEL_76:
              uint64_t v12 = v203;
              uint64_t v9 = v207;
              unsigned int v10 = v196;
              goto LABEL_77;
            case 30:
            case 31:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 47:
              break;
            case 32:
            case 33:
              unint64_t v23 = *(unsigned int *)(a1 + 16);
              uint64_t v202 = v12;
              uint64_t v206 = v9;
              uint64_t v210 = v11;
              uint64_t v213 = v16;
              int v199 = v13;
              uint64_t v216 = v15;
              uint64_t v219 = v14;
              if (v23 >= *(unsigned int *)(a1 + 20)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a1 + 8) + 8 * v23) = v17;
              unsigned int v24 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 16) = v24;
              if (*(_DWORD *)(*(void *)(v7 - 56) + 36) == 33)
              {
                uint64_t v46 = v10;
                sub_1CD8C4E2C(v7 - 24);
                unsigned int v10 = v46;
                unsigned int v24 = *(_DWORD *)(a1 + 16);
              }
              int v25 = v10;
              uint64_t v26 = *(void *)(*v10 + 8 * v24 - 8);
              if ((llvm::Constant::isOneValue(*(llvm::Constant **)(v26
                                                                                   - 32
                                                                                   * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF)
                                                                                   + 32)) & 1) != 0)
                goto LABEL_30;
              uint64_t v11 = v210;
              uint64_t v16 = v213;
              uint64_t v13 = v199;
              uint64_t v15 = v216;
              uint64_t v14 = v219;
              if (*(_DWORD *)(*(void *)(v7 - 56) + 36) == 32)
              {
                unsigned int v10 = v25;
                if (*(_DWORD *)(a1 + 16) < 2u)
                {
                  uint64_t v12 = v202;
                  uint64_t v9 = v206;
                }
                else
                {
                  if ((llvm::Constant::isOneValue(*(llvm::Constant **)(*(void *)*v25
                                                                                       - 32
                                                                                       * (*(_DWORD *)(*(void *)*v25 + 20) & 0x7FFFFFF)
                                                                                       + 32)) & 1) == 0)
                  {
                    uint64_t v194 = "Only one coro.end can be marked as fallthrough";
                    goto LABEL_279;
                  }
                  int v43 = *(uint64_t **)(a1 + 8);
                  uint64_t v44 = &v43[*(unsigned int *)(a1 + 16)];
                  uint64_t v45 = *v43;
                  *int v43 = *(v44 - 1);
                  *(v44 - 1) = v45;
LABEL_30:
                  uint64_t v12 = v202;
                  uint64_t v9 = v206;
                  unsigned int v10 = v25;
LABEL_77:
                  uint64_t v11 = v210;
                  uint64_t v16 = v213;
                  uint64_t v13 = v199;
                  uint64_t v15 = v216;
                  uint64_t v14 = v219;
                }
              }
              else
              {
                uint64_t v12 = v202;
                uint64_t v9 = v206;
                unsigned int v10 = v25;
              }
              break;
            case 34:
              if (v229 >= (unint64_t)HIDWORD(v229)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v228 + v229) = v17;
              LODWORD(v229) = v229 + 1;
              break;
            case 45:
              if (!*(void *)(v7 - 16))
              {
                if (v226 >= (unint64_t)HIDWORD(v226)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v225 + v226) = v17;
                LODWORD(v226) = v226 + 1;
              }
              break;
            case 46:
              unint64_t v30 = *(unsigned int *)(a1 + 64);
              if (v30 >= *(unsigned int *)(a1 + 68)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a1 + 56) + 8 * v30) = v17;
              ++*(_DWORD *)(a1 + 64);
              break;
            case 48:
              unint64_t v31 = *(unsigned int *)(a1 + 128);
              v203 = v12;
              uint64_t v207 = v9;
              uint64_t v196 = v10;
              int v199 = v13;
              uint64_t v210 = v11;
              uint64_t v213 = v16;
              uint64_t v216 = v15;
              uint64_t v219 = v14;
              if (v31 >= *(unsigned int *)(a1 + 132)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a1 + 120) + 8 * v31) = v17;
              ++*(_DWORD *)(a1 + 128);
              if (!llvm::Constant::isOneValue(*(llvm::Constant **)(v17
                                                                                - 32
                                                                                * (*(_DWORD *)(v7 - 4) & 0x7FFFFFF)
                                                                                + 32)))
                goto LABEL_76;
              unsigned int v10 = v196;
              uint64_t v13 = v199;
              uint64_t v11 = v210;
              uint64_t v16 = v213;
              uint64_t v15 = v216;
              uint64_t v14 = v219;
              if (v8)
              {
                uint64_t v194 = "Only one suspend point can be marked as final";
                goto LABEL_279;
              }
              uint64_t v9 = *(unsigned int *)(a1 + 128) - 1;
              char v8 = 1;
              uint64_t v12 = v203;
              break;
            case 49:
              uint64_t v214 = v16;
              uint64_t v217 = v15;
              uint64_t v220 = v14;
              uint64_t v197 = v10;
              BOOL v200 = v13;
              uint64_t v208 = v9;
              uint64_t v211 = v11;
              unint64_t v204 = v12;
              uint64_t v33 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v17 - 32 * (*(_DWORD *)(v7 - 4) & 0x7FFFFFF) + 64));
              uint64_t v34 = *((void *)v33 + 3);
              uint64_t v35 = *(void **)(v34 + 16);
              if (*v35) {
                BOOL v36 = *(unsigned char *)(*v35 + 8) == 15;
              }
              else {
                BOOL v36 = 0;
              }
              if (!v36
                || ((v37 = ***(void ***)v33 + 1912, (uint64_t v38 = *(void *)(*v35 + 24)) != 0)
                  ? (BOOL v39 = v38 == v37)
                  : (BOOL v39 = 1),
                    !v39))
              {
                uint64_t v194 = "llvm.coro.suspend.async resume function projection function must return an i8* type";
                goto LABEL_279;
              }
              if (*(_DWORD *)(v34 + 12) != 2
                || (uint64_t v40 = v35[1], *(unsigned char *)(v40 + 8) != 15)
                || ((v41 = *(void *)(v40 + 24)) != 0 ? (BOOL v42 = v41 == v37) : (BOOL v42 = 1), !v42))
              {
                uint64_t v194 = "llvm.coro.suspend.async resume function projection function must take one i8* type as parameter";
                goto LABEL_279;
              }
              unint64_t v32 = *(unsigned int *)(a1 + 128);
              uint64_t v12 = v204;
              uint64_t v9 = v208;
              unsigned int v10 = v197;
              uint64_t v13 = v200;
              uint64_t v11 = v211;
              uint64_t v16 = v214;
              uint64_t v15 = v217;
              uint64_t v14 = v220;
              if (v32 >= *(unsigned int *)(a1 + 132)) {
LABEL_84:
              }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_69:
              *(void *)(*(void *)(a1 + 120) + 8 * v32) = v17;
              ++*(_DWORD *)(a1 + 128);
              break;
            case 50:
              unint64_t v32 = *(unsigned int *)(a1 + 128);
              if (v32 >= *(unsigned int *)(a1 + 132)) {
                goto LABEL_84;
              }
              goto LABEL_69;
            default:
              if (v22 == 20)
              {
                unint64_t v27 = *(unsigned int *)(a1 + 96);
                if (v27 >= *(unsigned int *)(a1 + 100)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(a1 + 88) + 8 * v27) = v17;
                ++*(_DWORD *)(a1 + 96);
              }
              break;
          }
        }
      }
    }
    uint64_t v7 = *(void *)(v7 + 8);
    uint64_t v20 = v5 - 24;
    if (!v5) {
      uint64_t v20 = 0;
    }
    if (v7 == v20 + 40) {
      break;
    }
LABEL_23:
    if (v5 == v4) {
      goto LABEL_87;
    }
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      break;
    }
    uint64_t v21 = v5 - 24;
    if (!v5) {
      uint64_t v21 = 0;
    }
    uint64_t v7 = *(void *)(v21 + 48);
    if (v7 != v21 + 40) {
      goto LABEL_23;
    }
  }
LABEL_87:
  if (!*(void *)a1)
  {
LABEL_112:
    uint64_t v79 = (llvm::UndefValue *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)a2 + 1912), 0);
    uint64_t v81 = llvm::UndefValue::get(v79, v80);
    if (v229)
    {
      llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)v228, v81, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    if (*(_DWORD *)(a1 + 128))
    {
      int v84 = *(llvm::UndefValue ****)(a1 + 120);
      int v85 = *v84;
      int v86 = llvm::UndefValue::get(**v84, v82);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v85, v86, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    uint64_t v87 = *(unsigned int *)(a1 + 16);
    if (v87)
    {
      uint64_t v88 = *(llvm ***)(a1 + 8);
      uint64_t v89 = 8 * v87;
      do
      {
        __int16 v90 = *v88++;
        llvm::changeToUnreachable(v90, 0, 0, 0, v83);
        v89 -= 8;
      }
      while (v89);
    }
    goto LABEL_257;
  }
  uint64_t v47 = *(void *)(*(void *)a1 - 32 * (*(_DWORD *)(*(void *)a1 + 20) & 0x7FFFFFF));
  int v48 = *(_DWORD *)(*(void *)(v47 - 32) + 36);
  unint64_t v205 = v12;
  uint64_t v209 = v9;
  if (v48 == 36)
  {
    uint64_t v49 = 0;
    *(_DWORD *)(a1 + 200) = 0;
    *(unsigned char *)(a1 + 292) = v8 & 1;
    *(void *)(a1 + 256) = 0;
    if (*(unsigned char *)(*(void *)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) + 32) + 16) != 19) {
      uint64_t v49 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) + 32));
    }
    *(void *)(a1 + 264) = v49;
    *(void *)(a1 + 272) = 0;
    uint64_t v50 = *(unsigned int *)(a1 + 128);
    if (v50)
    {
      uint64_t v51 = *(uint64_t **)(a1 + 120);
      uint64_t v52 = 8 * v50;
      while (1)
      {
        uint64_t v53 = *v51;
        if (!*v51 || *(_DWORD *)(*(void *)(v53 - 32) + 36) != 48) {
          break;
        }
        uint64_t v54 = *(void *)(v53 - 32 * (*(_DWORD *)(v53 + 20) & 0x7FFFFFF));
        BOOL v55 = sub_1CD2C9100(v54);
        if (!v54 || !v55)
        {
          uint64_t v56 = *(void *)a1;
          uint64_t v57 = *(uint64_t ***)(*(void *)(*(void *)(v53 + 40) + 56) + 40);
          llvm::Intrinsic::getType(*v57, 45, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v57, 45, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v57, "llvm.coro.save", (const char *)0xE, Type, 0);
          uint64_t v60 = (uint64_t **)v59;
          if (v59) {
            uint64_t v61 = *(uint64_t ***)(v59 + 24);
          }
          else {
            uint64_t v61 = 0;
          }
          uint64_t v224 = v56;
          __int16 v223 = 257;
          uint64_t v62 = (char *)operator new(0x90uLL);
          unint64_t v63 = (llvm::Value *)(v62 + 64);
          *((_DWORD *)v62 + 21) = *((_DWORD *)v62 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v62 = 0;
          *((void *)v62 + 1) = 0;
          *((void *)v62 + 2) = 0;
          *((void *)v62 + 3) = v62 + 64;
          *((void *)v62 + 4) = 0;
          *((void *)v62 + 5) = 0;
          *((void *)v62 + 6) = 0;
          *((void *)v62 + 7) = v62 + 64;
          *((void *)v62 + 8) = *v61[2];
          *((void *)v62 + 9) = 0;
          uint64_t v64 = (llvm::Value ***)(v62 + 72);
          v62[80] = 84;
          v62[81] = 0;
          *((_WORD *)v62 + 41) = 0;
          *((_DWORD *)v62 + 21) = 2;
          *(_OWORD *)(v62 + 88) = 0u;
          uint64_t v65 = v62 + 88;
          *(_OWORD *)(v62 + 104) = 0u;
          *((_DWORD *)v62 + 30) = 0;
          uint64_t v66 = *(void *)(v53 + 40);
          *((void *)v62 + 13) = v66;
          *(_WORD *)(v66 + 18) &= ~0x8000u;
          if ((v62[87] & 0x10) != 0)
          {
            uint64_t v77 = *(void *)(v66 + 56);
            if (v77)
            {
              unsigned int v78 = *(llvm::ValueSymbolTable **)(v77 + 104);
              if (v78) {
                llvm::ValueSymbolTable::reinsertValue(v78, v63);
              }
            }
          }
          uint64_t v67 = *(void *)(v53 + 24);
          *((void *)v62 + 11) = v67;
          *((void *)v62 + 12) = v53 + 24;
          *(void *)(v67 + 8) = v65;
          *(void *)(v53 + 24) = v65;
          *((void *)v62 + 16) = 0;
          llvm::CallInst::init((uint64_t ***)v63, v61, v60, &v224, 1, 0, 0, v222);
          uint64_t v68 = *(_DWORD *)(v53 + 20) & 0x7FFFFFF;
          uint64_t v69 = -v68;
          uint64_t v70 = (llvm::Value **)(v53 - 32 * v68);
          if (*v70)
          {
            uint64_t v71 = v53 + 32 * v69;
            unsigned int v73 = *(void **)(v71 + 16);
            int v72 = (void *)(v71 + 16);
            *unsigned int v73 = *(v72 - 1);
            uint64_t v74 = *(v72 - 1);
            if (v74) {
              *(void *)(v74 + 16) = *v72;
            }
          }
          *uint64_t v70 = v63;
          uint64_t v75 = *v64;
          uint64_t v76 = v53 + 32 * v69;
          *(void *)(v76 + 8) = *v64;
          if (v75) {
            v75[2] = (llvm::Value *)(v76 + 8);
          }
          *(void *)(v76 + 16) = v64;
          *uint64_t v64 = v70;
        }
        ++v51;
        v52 -= 8;
        if (!v52) {
          goto LABEL_252;
        }
      }
      uint64_t v194 = "coro.id must be paired with coro.suspend";
      goto LABEL_279;
    }
    goto LABEL_252;
  }
  if ((v48 - 38) < 2)
  {
    int v91 = (void *)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF));
    if (*(unsigned char *)(*v91 + 16) != 16)
    {
      uint64_t v194 = "size argument to coro.id.retcon.* must be constant";
      goto LABEL_279;
    }
    if (*(unsigned char *)(v91[4] + 16) != 16)
    {
      uint64_t v194 = "alignment argument to coro.id.retcon.* must be constant";
      goto LABEL_279;
    }
    unsigned int v92 = (uint64_t ***)v91[12];
    unint64_t v93 = llvm::GlobalPtrAuthInfo::analyze(v92, v13);
    if (v94) {
      unsigned int v92 = *(uint64_t ****)(*(void *)(v93 - 32) - 32 * (*(_DWORD *)(*(void *)(v93 - 32) + 20) & 0x7FFFFFF));
    }
    uint64_t v95 = llvm::Value::stripPointerCasts((llvm::Value *)v92);
    if (v95) {
      BOOL v96 = *((unsigned char *)v95 + 16) == 0;
    }
    else {
      BOOL v96 = 0;
    }
    if (!v96)
    {
      uint64_t v194 = "llvm.coro.id.retcon.* prototype not a Function";
      goto LABEL_279;
    }
    uint64_t v97 = *((void *)v95 + 3);
    if (*(_DWORD *)(*(void *)(v47 - 32) + 36) == 38)
    {
      uint64_t v98 = **(void **)(v97 + 16);
      int v99 = *(_DWORD *)(v98 + 8);
      if (v99 != 15
        && ((v99 & 0x1FF) != 0x110 || !*(_DWORD *)(v98 + 12) || *(unsigned char *)(**(void **)(v98 + 16) + 8) != 15))
      {
        uint64_t v194 = "llvm.coro.id.retcon prototype must return pointer as first result";
        goto LABEL_279;
      }
      if (v98 != **(void **)(*(void *)(*(void *)(*(void *)(v47 + 40) + 56) + 24) + 16))
      {
        uint64_t v194 = "llvm.coro.id.retcon prototype return type must be same ascurrent function return type";
        goto LABEL_279;
      }
    }
    if (*(_DWORD *)(v97 + 12) == 1 || *(unsigned char *)(*(void *)(*(void *)(v97 + 16) + 8) + 8) != 15)
    {
      uint64_t v194 = "llvm.coro.id.retcon.* prototype must take pointer as its first parameter";
      goto LABEL_279;
    }
    uint64_t v100 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) + 128));
    if (v100) {
      BOOL v101 = *((unsigned char *)v100 + 16) == 0;
    }
    else {
      BOOL v101 = 0;
    }
    if (!v101)
    {
      uint64_t v194 = "llvm.coro.* allocator not a Function";
      goto LABEL_279;
    }
    uint64_t v102 = *((void *)v100 + 3);
    uint64_t v103 = *(void **)(v102 + 16);
    if (*(unsigned char *)(*v103 + 8) != 15)
    {
      uint64_t v194 = "llvm.coro.* allocator must return a pointer";
      goto LABEL_279;
    }
    if (*(_DWORD *)(v102 + 12) != 2 || *(unsigned char *)(v103[1] + 8) != 13)
    {
      uint64_t v194 = "llvm.coro.* allocator must take integer as only param";
      goto LABEL_279;
    }
    int v104 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) + 160));
    if (v104) {
      BOOL v105 = *((unsigned char *)v104 + 16) == 0;
    }
    else {
      BOOL v105 = 0;
    }
    if (!v105)
    {
      uint64_t v194 = "llvm.coro.* deallocator not a Function";
      goto LABEL_279;
    }
    uint64_t v106 = *((void *)v104 + 3);
    unsigned int v107 = *(void **)(v106 + 16);
    if (*(unsigned char *)(*v107 + 8) != 7)
    {
      uint64_t v194 = "llvm.coro.* deallocator must return void";
      goto LABEL_279;
    }
    if (*(_DWORD *)(v106 + 12) != 2 || *(unsigned char *)(v107[1] + 8) != 15)
    {
      uint64_t v194 = "llvm.coro.* deallocator must take pointer as only param";
      goto LABEL_279;
    }
    if (v48 == 38) {
      int v108 = 1;
    }
    else {
      int v108 = 2;
    }
    *(_DWORD *)(a1 + 200) = v108;
    *(void *)(a1 + 264) = sub_1CD8C4F00(v47);
    unint64_t v110 = llvm::GlobalPtrAuthInfo::analyze(*(uint64_t ****)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) + 96), v109);
    unint64_t v111 = v110;
    uint64_t v113 = v112;
    if (v112) {
      unint64_t v114 = v110;
    }
    else {
      unint64_t v114 = 0;
    }
    *(void *)(a1 + 256) = v114;
    *(void *)(a1 + 272) = llvm::Value::stripPointerCasts(*(llvm::Value **)(v47
                                                                           - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF)
                                                                           + 128));
    *(void *)(a1 + 280) = llvm::Value::stripPointerCasts(*(llvm::Value **)(v47
                                                                           - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF)
                                                                           + 160));
    *(void *)(a1 + 288) = 0;
    *(unsigned char *)(a1 + 296) = 0;
    if (v113)
    {
      uint64_t v115 = *(void *)(v111 - 32);
      uint64_t v116 = *(_DWORD *)(v115 + 20) & 0x7FFFFFF;
      uint64_t v117 = -v116;
      uint64_t v118 = *(void *)(v115 - 32 * v116 + 64);
      unsigned int v119 = *(unsigned __int8 *)(v118 + 16);
      if (v118) {
        BOOL v120 = v119 == 16;
      }
      else {
        BOOL v120 = 0;
      }
      if (!v120)
      {
        if (v118) {
          BOOL v187 = v119 == 17;
        }
        else {
          BOOL v187 = 0;
        }
        if (v187)
        {
          if (sub_1CB844168(v118, 0.0)) {
            goto LABEL_182;
          }
          uint64_t v115 = *(void *)(v111 - 32);
          uint64_t v117 = -(uint64_t)(*(_DWORD *)(v115 + 20) & 0x7FFFFFF);
        }
        else
        {
          BOOL v128 = v119 > 0x14;
          int v188 = (1 << v119) & 0x1C2000;
          if (!v128 && v188 != 0) {
            goto LABEL_182;
          }
        }
LABEL_168:
        uint64_t v122 = *(void *)(v115 + 32 * v117 + 64);
        if (v122) {
          BOOL v123 = *(unsigned char *)(v122 + 16) == 16;
        }
        else {
          BOOL v123 = 0;
        }
        if (v123)
        {
          uint64_t v124 = (void *)(v122 + 24);
          uint64_t v125 = *(unsigned int *)(v122 + 32);
          if (v125 >= 0x41)
          {
            int v126 = 0;
            int64_t v127 = (unint64_t)(v125 + 63) >> 6;
            do
            {
              BOOL v128 = v127-- < 1;
              if (v128) {
                break;
              }
              unint64_t v129 = *(void *)(*v124 + 8 * v127);
              v126 += __clz(v129);
            }
            while (!v129);
            int v130 = v125 | 0xFFFFFFC0;
            if ((v125 & 0x3F) == 0) {
              int v130 = 0;
            }
            if ((v125 - v126 - v130) > 0x40) {
              goto LABEL_303;
            }
            uint64_t v124 = (void *)*v124;
          }
          if (*v124 == 1) {
            goto LABEL_182;
          }
        }
LABEL_303:
        uint64_t v194 = "ptrauth-signed prototype must not have address diversity";
        goto LABEL_279;
      }
      uint64_t v121 = *(unsigned int *)(v118 + 32);
      if (v121 < 0x41)
      {
        if (!*(void *)(v118 + 24)) {
          goto LABEL_182;
        }
        goto LABEL_168;
      }
      int v190 = 0;
      int64_t v191 = (unint64_t)(v121 + 63) >> 6;
      do
      {
        BOOL v128 = v191-- < 1;
        if (v128) {
          break;
        }
        unint64_t v192 = *(void *)(*(void *)(v118 + 24) + 8 * v191);
        v190 += __clz(v192);
      }
      while (!v192);
      int v193 = v121 | 0xFFFFFFC0;
      if ((v121 & 0x3F) == 0) {
        int v193 = 0;
      }
      if (v190 + v193 != v121) {
        goto LABEL_168;
      }
    }
LABEL_182:
    uint64_t v201 = sub_1CD2C8AB0(a1);
    uint64_t v221 = v131;
    uint64_t v133 = *(unsigned int *)(a1 + 128);
    if (v133)
    {
      uint64_t v134 = *(void *)(*(void *)(a1 + 264) + 24);
      uint64_t v215 = *(void *)(v134 + 16) + 16;
      uint64_t v218 = ((8 * *(unsigned int *)(v134 + 12) - 8) >> 3) - 1;
      uint64_t v135 = *(uint64_t ***)(a1 + 120);
      int v212 = &v135[v133];
      BOOL v198 = v131 != 0;
      uint64_t v195 = 8 * v131 - 8;
      while (1)
      {
        unint64_t v136 = *v135;
        if (!*v135 || *(_DWORD *)(*(v136 - 4) + 36) != 50)
        {
          uint64_t v194 = "coro.id.retcon.* must be paired with coro.suspend.retcon";
          goto LABEL_279;
        }
        int v137 = *((unsigned __int8 *)v136 + 16);
        if (v137 == 84)
        {
          uint64_t v138 = 0;
        }
        else if (v137 == 39)
        {
          uint64_t v138 = (*((_DWORD *)v136 + 20) + 1);
        }
        else
        {
          uint64_t v138 = 2;
        }
        int v139 = *((_DWORD *)v136 + 5);
        uint64_t v140 = v139 & 0x7FFFFFF;
        v141 = &v136[-4 * v140];
        if (v139 < 0 && (uint64_t v167 = *(v141 - 1), (v167 & 0xFFFFFFFF0) != 0)) {
          uint64_t v142 = (*((_DWORD *)v141 - 3) - *(_DWORD *)((char *)v141 - v167));
        }
        else {
          uint64_t v142 = 0;
        }
        uint64_t v143 = (uint64_t)&v136[-4 * v138 - 4 + -4 * v142];
        BOOL v36 = v141 == (uint64_t *)v143;
        BOOL v144 = v141 != (uint64_t *)v143;
        if (!v36 && v221 != 0)
        {
          uint64_t v147 = 32 * v140 - 32 * v138 - 32 * v142 - 64;
          int v148 = (void **)(v141 + 1);
          uint64_t v149 = v195;
          int64_t v150 = (llvm::CastInst ***)v201;
          while (1)
          {
            int64_t v152 = (llvm::Value **)(v148 - 1);
            int64_t v151 = (llvm::CastInst ***)*(v148 - 1);
            if (*v151 != *v150)
            {
              if (!llvm::CastInst::isBitCastable(*v151, *v150, v132))
              {
                uint64_t v194 = "argument to coro.suspend.retcon does not match corresponding prototype function result";
                goto LABEL_279;
              }
              uint64_t v153 = (char *)operator new(0x60uLL);
              *((_DWORD *)v153 + 13) = *((_DWORD *)v153 + 13) & 0x38000000 | 1;
              *(void *)uint64_t v153 = 0;
              *((void *)v153 + 1) = 0;
              *((void *)v153 + 2) = 0;
              *((void *)v153 + 3) = v153 + 32;
              char v154 = *v152;
              uint64_t v155 = *v150;
              __int16 v223 = 257;
              uint64_t v156 = llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v153 + 32), v154, (llvm::Type *)v155, v222, (llvm::Instruction *)v136);
              if (*v152)
              {
                *v148[1] = *v148;
                if (*v148) {
                  (*v148)[2] = v148[1];
                }
              }
              *(v148 - 1) = v156;
              uint64_t v159 = (void *)*((void *)v153 + 5);
              v158 = (llvm::Value ***)(v153 + 40);
              uint64_t v157 = v159;
              *int v148 = v159;
              if (v159) {
                v157[2] = v148;
              }
              v148[1] = v158;
              int *v158 = v152;
            }
            BOOL v144 = v147 != 0;
            BOOL v146 = v149 != 0;
            if (v147)
            {
              ++v150;
              uint64_t v160 = v149;
              v149 -= 8;
              v147 -= 32;
              v148 += 4;
              if (v160) {
                continue;
              }
            }
            goto LABEL_206;
          }
        }
        BOOL v146 = v198;
LABEL_206:
        if (v144 || v146)
        {
          uint64_t v194 = "wrong number of arguments to coro.suspend.retcon";
          goto LABEL_279;
        }
        uint64_t v161 = *v136;
        v222[0] = (const char *)v161;
        int v162 = *(unsigned __int8 *)(v161 + 8);
        if (v162 == 7)
        {
          uint64_t v164 = 0;
          uint64_t v163 = 0;
        }
        else if (v162 == 16)
        {
          uint64_t v163 = *(const char ***)(v161 + 16);
          uint64_t v164 = *(unsigned int *)(v161 + 12);
        }
        else
        {
          uint64_t v163 = v222;
          uint64_t v164 = 1;
        }
        if (v164 != v218)
        {
          uint64_t v194 = "wrong number of results from coro.suspend.retcon";
          goto LABEL_279;
        }
        uint64_t v165 = v218;
        unint64_t v166 = (const char **)v215;
        if (v218) {
          break;
        }
LABEL_217:
        if (++v135 == v212) {
          goto LABEL_252;
        }
      }
      while (*v163 == *v166)
      {
        ++v166;
        ++v163;
        if (!--v165) {
          goto LABEL_217;
        }
      }
      uint64_t v194 = "result from coro.suspend.retcon does not match corresponding prototype function param";
LABEL_279:
      llvm::report_fatal_error((llvm *)v194, (const llvm::Twine *)1);
    }
    goto LABEL_252;
  }
  uint64_t v168 = v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF);
  if (*(unsigned char *)(*(void *)v168 + 16) != 16)
  {
    uint64_t v194 = "size argument to coro.id.async must be constant";
    goto LABEL_279;
  }
  if (*(unsigned char *)(*(void *)(v168 + 32) + 16) != 16)
  {
    uint64_t v194 = "alignment argument to coro.id.async must be constant";
    goto LABEL_279;
  }
  if (*(unsigned char *)(*(void *)(v168 + 64) + 16) != 16)
  {
    uint64_t v194 = "storage argument offset to coro.id.async must be constant";
    goto LABEL_279;
  }
  BOOL v169 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v168 + 96));
  if (v169) {
    BOOL v170 = *((unsigned char *)v169 + 16) == 3;
  }
  else {
    BOOL v170 = 0;
  }
  if (!v170)
  {
    uint64_t v194 = "llvm.coro.id.async async function pointer not a global";
    goto LABEL_279;
  }
  uint64_t v171 = *(void *)v169;
  if (*(void *)v169) {
    BOOL v172 = *(unsigned char *)(*(void *)v169 + 8) == 15;
  }
  else {
    BOOL v172 = 0;
  }
  if (!v172 || *(void *)(v171 + 24))
  {
    uint64_t v173 = **(void **)(v171 + 16);
    if ((~*(_DWORD *)(v173 + 8) & 0x300) != 0
      || *(_DWORD *)(v173 + 12) != 2
      || (uint64_t v174 = *(void **)(v173 + 16), *(_DWORD *)(*v174 + 8) != 8205)
      || *(_DWORD *)(v174[1] + 8) != 8205)
    {
      uint64_t v194 = "llvm.coro.id.async async function pointer argument's type is not <{i32, i32}>";
      goto LABEL_279;
    }
  }
  *(_DWORD *)(a1 + 200) = 3;
  *(void *)(a1 + 264) = sub_1CD8C4E98(v47);
  uint64_t v175 = *(void *)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) + 64);
  int v176 = (void *)(v175 + 24);
  if (*(_DWORD *)(v175 + 32) >= 0x41u) {
    int v176 = (void *)*v176;
  }
  *(_DWORD *)(a1 + 276) = *v176;
  uint64_t v177 = *(void *)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF));
  int v178 = (void *)(v177 + 24);
  if (*(_DWORD *)(v177 + 32) >= 0x41u) {
    int v178 = (void *)*v178;
  }
  *(void *)(a1 + 280) = *v178;
  uint64_t v179 = *(void *)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) + 32);
  BOOL v180 = (unint64_t *)(v179 + 24);
  if (*(_DWORD *)(v179 + 32) >= 0x41u) {
    BOOL v180 = (unint64_t *)*v180;
  }
  unint64_t v181 = *v180;
  uint64_t v182 = 1 << (__clz(v181) ^ 0x3Fu);
  if (v181) {
    uint64_t v183 = v182;
  }
  else {
    uint64_t v183 = 1;
  }
  *(void *)(a1 + 288) = v183;
  *(void *)(a1 + 312) = llvm::Value::stripPointerCasts(*(llvm::Value **)(v47
                                                                         - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF)
                                                                         + 96));
  *(_DWORD *)(a1 + 272) = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
LABEL_252:
  if (v229)
  {
    llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)v228, *(llvm::Value **)a1, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (!*(_DWORD *)(a1 + 200))
  {
    if (*(unsigned char *)(a1 + 292))
    {
      uint64_t v184 = *(unsigned int *)(a1 + 128);
      if (v209 != v184 - 1)
      {
        uint64_t v185 = *v205 + 8 * v184;
        uint64_t v186 = *(void *)(*v205 + 8 * v209);
        *(void *)(*v205 + 8 * v209) = *(void *)(v185 - 8);
        *(void *)(v185 - 8) = v186;
      }
    }
  }
  if (v226) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_257:
  if (v225 != v227) {
    free(v225);
  }
  if (v228 != v230) {
    free(v228);
  }
}

uint64_t sub_1CD2C8A54(uint64_t a1)
{
  uint64_t v1 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 96));
  if (v1) {
    BOOL v2 = *((unsigned char *)v1 + 16) == 3;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  if (*(unsigned char *)(*((void *)v1 - 4) + 16) == 9) {
    return *((void *)v1 - 4);
  }
  return 0;
}

uint64_t sub_1CD2C8AB0(uint64_t a1)
{
  uint64_t v1 = **(void **)(*(void *)(*(void *)(*(void *)(*(void *)a1 + 40) + 56) + 24) + 16);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 8) == 16;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return *(void *)(v1 + 16) + 8;
  }
  else {
    return 0;
  }
}

char *sub_1CD2C8AF8(char *result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    uint64_t v5 = (void *)*((void *)result + 2);
    uint64_t v3 = result + 16;
    uint64_t v4 = v5;
    if (!v5) {
      goto LABEL_13;
    }
    unint64_t v6 = *(void *)(*(void *)(a2 + 40) + 56);
    uint64_t v7 = v4;
    char v8 = v3;
    do
    {
      unint64_t v9 = v7[4];
      BOOL v10 = v9 >= v6;
      if (v9 >= v6) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = v7 + 1;
      }
      if (v10) {
        char v8 = (char *)v7;
      }
      uint64_t v7 = (void *)*v11;
    }
    while (*v11);
    if (v8 == v3 || *((void *)v8 + 4) > v6) {
LABEL_13:
    }
      char v8 = v3;
    uint64_t v12 = *((void *)v8 + 5);
    if (!v4) {
      goto LABEL_25;
    }
    uint64_t v13 = v3;
    do
    {
      unint64_t v14 = v4[4];
      BOOL v15 = v14 >= a3;
      if (v14 >= a3) {
        uint64_t v16 = v4;
      }
      else {
        uint64_t v16 = v4 + 1;
      }
      if (v15) {
        uint64_t v13 = (char *)v4;
      }
      uint64_t v4 = (void *)*v16;
    }
    while (*v16);
    if (v13 == v3 || *((void *)v13 + 4) > a3) {
LABEL_25:
    }
      uint64_t v13 = v3;
    return sub_1CBFA7A30(v12, (int32x2_t ****)a2, *((void *)v13 + 5));
  }
  return result;
}

void LLVMAddCoroEarlyPass()
{
}

void LLVMAddCoroSplitPass()
{
}

void LLVMAddCoroElidePass()
{
}

void LLVMAddCoroCleanupPass()
{
}

uint64_t LLVMPassManagerBuilderAddCoroutinePassesToExtensionPoints(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v11[0] = &unk_1F264A9B8;
  v11[1] = sub_1CD2C6C50;
  uint64_t v12 = v11;
  llvm::PassManagerBuilder::addExtension(a1, 0, v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  v9[0] = &unk_1F264A9B8;
  v9[1] = sub_1CD2C6CC8;
  BOOL v10 = v9;
  llvm::PassManagerBuilder::addExtension(a1, 6, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
  v7[0] = &unk_1F264A9B8;
  v7[1] = sub_1CD2C6E0C;
  char v8 = v7;
  llvm::PassManagerBuilder::addExtension(a1, 9, v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  v5[0] = &unk_1F264A9B8;
  v5[1] = sub_1CD2C6E9C;
  unint64_t v6 = v5;
  llvm::PassManagerBuilder::addExtension(a1, 3, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  v3[0] = &unk_1F264A9B8;
  v3[1] = sub_1CD2C6F14;
  uint64_t v4 = v3;
  llvm::PassManagerBuilder::addExtension(a1, 4, v3);
  uint64_t result = (uint64_t)v4;
  if (v4 == v3) {
    return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

BOOL sub_1CD2C9100(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 45;
}

BOOL sub_1CD2C914C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 35;
}

double sub_1CD2C9198(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_1CD8C4C3C(a1, a2);
  uint64_t v3 = *(void *)(v2 + 8);
  *(void *)(v2 + 40) = v2 + 56;
  *(void *)&double result = 0x200000000;
  *(void *)(v2 + 48) = 0x200000000;
  *(void *)(v2 + 104) = v3;
  *(void *)(v2 + 112) = v2 + 160;
  *(void *)(v2 + 120) = v2 + 168;
  *(void *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 140) = 512;
  *(unsigned char *)(v2 + 142) = 7;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = &unk_1F2616E88;
  *(void *)(v2 + 168) = &unk_1F2617008;
  return result;
}

uint64_t sub_1CD2C922C(uint64_t a1, llvm::PointerType *a2, const llvm::APInt *a3)
{
  uint64_t v3 = a2;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 14);
  if (!v5) {
    goto LABEL_25;
  }
  if (*(_DWORD *)(v5 + 8))
  {
    uint64_t v5 = *(void *)(v5 + 40);
    if (!v5) {
      goto LABEL_25;
    }
    int v6 = *(_DWORD *)(v5 + 40);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v70 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v70 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v70;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      uint64_t v8 = __ROR8__(qword_1EBCBE580 ^ 0x7A48DC6FE7EA5090, 30);
      unint64_t v9 = 0x9DDFEA08EB382D69
         * ((qword_1EBCBE580 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                       * ((v8 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580
                                                                                       - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580 - 0x2D69957673248ED7))));
      unsigned int v10 = -348639895 * ((v9 >> 47) ^ v9);
      for (int i = 1; ; ++i)
      {
        unsigned int v12 = v10 & (v6 - 1);
        uint64_t v13 = (uint64_t *)(v7 + 24 * v12);
        uint64_t v14 = *v13;
        if (*v13 == -1)
        {
          if ("coroutine.presplit" == (char *)-1) {
            goto LABEL_23;
          }
        }
        else if (v14 == -2)
        {
          if ("coroutine.presplit" == (char *)-2) {
            goto LABEL_23;
          }
        }
        else if (v13[1] == 18)
        {
          a2 = (llvm::PointerType *)*(unsigned __int16 *)(v14 + 16);
          BOOL v15 = *(void *)v14 == 0x6E6974756F726F63 && *(void *)(v14 + 8) == 0x6C70736572702E65;
          if (v15 && a2 == 29801)
          {
LABEL_23:
            LODWORD(v5) = 1;
            goto LABEL_25;
          }
        }
        if (v14 == -1) {
          break;
        }
        unsigned int v10 = i + v12;
      }
    }
  }
  LODWORD(v5) = 0;
LABEL_25:
  if ((*((_DWORD *)v3 + 8) & 0xFu) - 7 < 2) {
    int v17 = v5;
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (char *)v3 + 72;
  for (unint64_t j = (char *)*((void *)v3 + 10); j != v18; unint64_t j = (char *)*((void *)j + 1))
  {
    uint64_t v20 = j - 24;
    if (!j) {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *((void *)v20 + 6);
    if ((char *)v21 != v20 + 40)
    {
      while (1)
      {
        uint64_t v22 = v21;
        uint64_t v21 = *(void *)(v21 + 8);
        unint64_t v23 = j - 24;
        if (!j) {
          unint64_t v23 = 0;
        }
        if ((char *)v21 == v23 + 40)
        {
          unint64_t v27 = (char *)*((void *)j + 1);
          unint64_t j = (char *)v3 + 72;
          if (v27 != v18)
          {
            while (1)
            {
              uint64_t v28 = v27 - 24;
              if (!v27) {
                uint64_t v28 = 0;
              }
              uint64_t v21 = *((void *)v28 + 6);
              if ((char *)v21 != v28 + 40) {
                break;
              }
              unint64_t v27 = (char *)*((void *)v27 + 1);
              if (v27 == v18)
              {
                unint64_t j = (char *)v3 + 72;
                goto LABEL_37;
              }
            }
            unint64_t j = v27;
          }
        }
LABEL_37:
        uint64_t v24 = v22 - 24;
        uint64_t v25 = v22 ? v22 - 24 : 0;
        if (*(unsigned char *)(v25 + 16) == 84)
        {
          uint64_t v26 = *(void *)(v25 - 32);
          if (v26)
          {
            if (!*(unsigned char *)(v26 + 16)
              && *(void *)(v26 + 24) == *(void *)(v25 + 72)
              && (*(unsigned char *)(v26 + 33) & 0x20) != 0)
            {
              break;
            }
          }
        }
LABEL_47:
        if (j == v18) {
          return 0;
        }
      }
      switch(*(_DWORD *)(*(void *)(v22 - 56) + 36))
      {
        case 0x15:
          uint64_t v37 = *(uint64_t **)(a1 + 8);
          uint64_t v38 = *v37;
          uint64_t v29 = *(llvm::Value **)(*v37 + 1560);
          if (!v29)
          {
            uint64_t v79 = *(llvm::ConstantInt **)(v38 + 1888);
            unsigned int v39 = *(_DWORD *)(v38 + 1896);
            LODWORD(v88) = v39 >> 8;
            if (v39 >> 8 > 0x40) {
              operator new[]();
            }
            if (v39 <= 0xFF) {
              char v40 = 0;
            }
            else {
              char v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
            }
            uint64_t v87 = (const char *)(v40 & 1);
            unsigned int v80 = (llvm::Instruction *)llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v87, a3);
            if (v88 >= 0x41)
            {
              if (v87) {
                MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
              }
            }
            uint64_t v29 = v80;
            *(void *)(v38 + 1560) = v80;
          }
          goto LABEL_74;
        case 0x1B:
          unint64_t v30 = (llvm::Value *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)v25, a2);
          goto LABEL_73;
        case 0x1C:
          uint64_t v41 = *((void *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v24
                                                                           - 32 * (*(_DWORD *)(v22 - 4) & 0x7FFFFFF)))
                - 4);
          BOOL v42 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v24 - 32 * (*(_DWORD *)(v22 - 4) & 0x7FFFFFF) + 32));
          uint64_t v81 = *(llvm::Instruction **)(*((void *)v42 - 4)
                                      - 32 * (*(_DWORD *)(*((void *)v42 - 4) + 20) & 0x7FFFFFF)
                                      + 32);
          if (llvm::Constant::isElementWiseEqual(*(llvm::Constant **)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF) + 32), v81))goto LABEL_76; {
          int v43 = *(llvm::PoisonValue **)v41;
          }
          uint64_t v87 = *(const char **)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF));
          unint64_t v88 = (unint64_t)v81;
          uint64_t v29 = (llvm::Value *)llvm::ConstantStruct::get(v43, (llvm::Type *)&v87, 2);
          uint64_t v44 = (llvm::ValueAsMetadata *)v41;
          goto LABEL_75;
        case 0x1D:
        case 0x23:
          uint64_t v29 = *(llvm::Value **)(v24 - 32 * (*(_DWORD *)(v22 - 4) & 0x7FFFFFF) + 32);
          goto LABEL_74;
        case 0x20:
        case 0x32:
          if (!v17) {
            goto LABEL_47;
          }
          unint64_t v30 = llvm::UndefValue::get(*(llvm::UndefValue **)(v22 - 24), a2);
LABEL_73:
          uint64_t v29 = v30;
LABEL_74:
          uint64_t v44 = (llvm::ValueAsMetadata *)(v22 - 24);
          goto LABEL_75;
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
          unint64_t v30 = (llvm::Value *)llvm::ConstantTokenNone::get(*(llvm::ConstantTokenNone **)(a1 + 8), a2);
          goto LABEL_73;
        case 0x2F:
          *(void *)(a1 + 88) = *(void *)(v22 + 16);
          *(void *)(a1 + 96) = v22;
          unint64_t v31 = *(unsigned __int8 **)(v22 + 24);
          int v85 = v31;
          if (v31)
          {
            llvm::MetadataTracking::track((uint64_t)&v85, v31, 2);
            uint64_t v32 = (uint64_t)v85;
          }
          else
          {
            uint64_t v32 = 0;
          }
          sub_1CB8461A4(a1 + 40, 0, v32);
          if (!v85) {
            goto LABEL_61;
          }
          int v58 = *v85;
          if ((v58 - 4) > 0x1E)
          {
            if ((v58 - 3) >= 0xFFFFFFFE) {
              uint64_t v65 = v85;
            }
            else {
              uint64_t v65 = 0;
            }
            if ((v58 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v60 = (unint64_t)(v65 + 8);
LABEL_115:
              uint64_t v87 = (const char *)&v85;
              sub_1CC5FA668(v60 + 16, &v87);
              goto LABEL_61;
            }
            if (v58 == 3) {
              *((void *)v85 + 1) = 0;
            }
          }
          else if ((v85[1] & 0x7F) == 2 || *((_DWORD *)v85 + 3))
          {
            uint64_t v59 = *((void *)v85 + 2);
            if ((v59 & 4) != 0)
            {
              unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
              if (v60) {
                goto LABEL_115;
              }
            }
          }
LABEL_61:
          uint64_t v33 = (llvm::Instruction **)(v24 - 32 * (*(_DWORD *)(v22 - 4) & 0x7FFFFFF));
          uint64_t v34 = *v33;
          uint64_t v35 = (uint64_t)v33[4];
          unsigned int v36 = *(_DWORD *)(v35 + 32);
          unsigned int v78 = v34;
          if (v36 > 0x40) {
            LODWORD(v35) = **(_DWORD **)(v35 + 24);
          }
          else {
            uint64_t v35 = (uint64_t)(*(void *)(v35 + 24) << -(char)v36) >> -(char)v36;
          }
          unsigned int v73 = v35;
          uint64_t v45 = **(uint64_t ***)(v22 - 24);
          uint64_t v87 = (const char *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(a1 + 104) + 1912), 0);
          unint64_t v88 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(a1 + 104) + 1912), 0);
          uint64_t v75 = (llvm::PointerType *)llvm::StructType::get(v45, (uint64_t)&v87, 2, 0);
          unint64_t v46 = llvm::PointerType::get(v75, 0);
          *(void *)(a1 + 88) = *(void *)(v22 + 16);
          *(void *)(a1 + 96) = v22;
          uint64_t v47 = *(unsigned __int8 **)(v22 + 24);
          int v85 = v47;
          if (v47)
          {
            llvm::MetadataTracking::track((uint64_t)&v85, v47, 2);
            uint64_t v48 = (uint64_t)v85;
          }
          else
          {
            uint64_t v48 = 0;
          }
          sub_1CB8461A4(a1 + 40, 0, v48);
          uint64_t v49 = v46;
          if (!v85) {
            goto LABEL_81;
          }
          int v61 = *v85;
          if ((v61 - 4) > 0x1E)
          {
            if ((v61 - 3) >= 0xFFFFFFFE) {
              uint64_t v66 = v85;
            }
            else {
              uint64_t v66 = 0;
            }
            if ((v61 - 3) < 0xFFFFFFFE)
            {
              uint64_t v49 = v46;
              if (v61 == 3) {
                *((void *)v85 + 1) = 0;
              }
LABEL_81:
              __int16 v86 = 257;
              uint64_t v50 = v78;
              if (*(void *)v78 != v49)
              {
                if (*((unsigned __int8 *)v78 + 16) <= 0x14u)
                {
                  uint64_t v52 = (*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(a1 + 112)
                                                                                                 + 224))(*(void *)(a1 + 112), 49, v78, v49);
                  uint64_t v50 = (const llvm::APInt *)v52;
                  if (!v52 || *(unsigned __int8 *)(v52 + 16) < 0x1Cu) {
                    goto LABEL_87;
                  }
                  uint64_t v82 = (llvm::Value *)v52;
                  (*(void (**)(void, uint64_t, unsigned __int8 **, void, void))(**(void **)(a1 + 120)
                                                                                              + 16))(*(void *)(a1 + 120), v52, &v85, *(void *)(a1 + 88), *(void *)(a1 + 96));
                  uint64_t v67 = *(unsigned int *)(a1 + 48);
                  if (v67)
                  {
                    uint64_t v68 = *(void *)(a1 + 40);
                    uint64_t v72 = v68 + 16 * v67;
                    do
                    {
                      llvm::Instruction::setMetadata(v82, *(_DWORD *)v68, *(llvm::MDNode **)(v68 + 8));
                      v68 += 16;
                    }
                    while (v68 != v72);
                  }
                }
                else
                {
                  __int16 v89 = 257;
                  uint64_t v82 = llvm::CastInst::Create(49, (uint64_t)v78, v49, &v87, 0);
                  (*(void (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
                  uint64_t v51 = *(unsigned int *)(a1 + 48);
                  if (v51)
                  {
                    uint64_t v64 = *(void *)(a1 + 40);
                    uint64_t v71 = v64 + 16 * v51;
                    do
                    {
                      llvm::Instruction::setMetadata(v82, *(_DWORD *)v64, *(llvm::MDNode **)(v64 + 8));
                      v64 += 16;
                    }
                    while (v64 != v71);
                  }
                }
                uint64_t v50 = v82;
              }
LABEL_87:
              __int16 v89 = 257;
              uint64_t v53 = sub_1CC5812D4((uint64_t *)(a1 + 40), (uint64_t)v75, v50, 0, v73, (uint64_t)&v87);
              uint64_t v76 = *(llvm::Type **)(*((void *)v75 + 2) + 8 * v73);
              unsigned int v83 = (llvm::Instruction *)v53;
              __int16 v86 = 257;
              char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 56) + 40) + 272), v76, 1);
              uint64_t v54 = operator new(0x60uLL);
              v54[13] = v54[13] & 0x38000000 | 1;
              *(void *)uint64_t v54 = 0;
              *((void *)v54 + 1) = 0;
              *((void *)v54 + 2) = 0;
              *((void *)v54 + 3) = v54 + 8;
              __int16 v89 = 257;
              BOOL v55 = (llvm::Instruction *)(v54 + 8);
              llvm::LoadInst::LoadInst((llvm::Value *)(v54 + 8), (uint64_t)v76, (uint64_t)v83, &v87, 0, Alignment, 0);
              (*(void (**)(void, llvm::Instruction *, unsigned __int8 **, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v55, &v85, *(void *)(a1 + 88), *(void *)(a1 + 96));
              uint64_t v56 = *(unsigned int *)(a1 + 48);
              if (v56)
              {
                uint64_t v57 = *(llvm::MDNode ***)(a1 + 40);
                size_t v77 = (size_t)&v57[2 * v56];
                do
                {
                  int v84 = (llvm::Instruction *)v57;
                  llvm::Instruction::setMetadata(v55, *(_DWORD *)v57, v57[1]);
                  uint64_t v57 = (llvm::MDNode **)((char *)v84 + 16);
                }
                while ((llvm::Instruction *)((char *)v84 + 16) != (llvm::Instruction *)v77);
              }
              uint64_t v44 = (llvm::ValueAsMetadata *)(v22 - 24);
              uint64_t v29 = v55;
LABEL_75:
              llvm::Value::doRAUW(v44, v29, (llvm::Value *)1);
LABEL_76:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            unint64_t v63 = (unint64_t)(v66 + 8);
          }
          else
          {
            if ((v85[1] & 0x7F) != 2 && !*((_DWORD *)v85 + 3)) {
              goto LABEL_81;
            }
            uint64_t v62 = *((void *)v85 + 2);
            if ((v62 & 4) == 0) {
              goto LABEL_81;
            }
            unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
            if (!v63) {
              goto LABEL_81;
            }
          }
          uint64_t v87 = (const char *)&v85;
          sub_1CC5FA668(v63 + 16, &v87);
          uint64_t v49 = v46;
          goto LABEL_81;
        default:
          goto LABEL_47;
      }
    }
  }
  return 0;
}

void sub_1CD2C9E3C()
{
}

uint64_t sub_1CD2C9ED8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBD00188;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F264AA00;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD00190, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD2C9E3C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBD00190, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD2C9F8C()
{
}

void sub_1CD2C9FC8(llvm::Pass *this)
{
  *(void *)this = &unk_1F264AA00;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56)) {
      free(v3);
    }
    MEMORY[0x1D25D9CE0]();
  }

  llvm::Pass::~Pass(this);
}

void sub_1CD2CA064(llvm::Pass *this)
{
  *(void *)this = &unk_1F264AA00;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56)) {
      free(v3);
    }
    MEMORY[0x1D25D9CE0]();
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD2CA114()
{
  return "Coroutine Cleanup";
}

uint64_t sub_1CD2CA124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v3[6] = xmmword_1E685A868;
  v3[7] = *(_OWORD *)&off_1E685A878;
  v3[8] = xmmword_1E685A888;
  v3[9] = *(_OWORD *)&off_1E685A898;
  v3[2] = xmmword_1E685A828;
  void v3[3] = *(_OWORD *)&off_1E685A838;
  v3[4] = xmmword_1E685A848;
  v3[5] = *(_OWORD *)&off_1E685A858;
  v3[0] = xmmword_1E685A808;
  v3[1] = *(_OWORD *)&off_1E685A818;
  if (sub_1CD2C7004(a2, (uint64_t)v3, 10)) {
    operator new();
  }
  return 0;
}

uint64_t sub_1CD2CA220(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 32)) {
    *(unsigned char *)(a2 + 160) = 1;
  }
  return result;
}

uint64_t sub_1CD2CA238(uint64_t a1, llvm::PointerType *a2, const llvm::APInt *a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return sub_1CD2C922C(result, a2, a3);
  }
  return result;
}

void *sub_1CD2CA248(void *a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CD8C4C3C((uint64_t)a1, a2);
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 40) = v3 + 56;
  *(void *)(v3 + 48) = 0x200000000;
  *(void *)(v3 + 104) = v4;
  *(void *)(v3 + 112) = v3 + 160;
  *(void *)(v3 + 120) = v3 + 168;
  *(void *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 136) = 0;
  *(_WORD *)(v3 + 140) = 512;
  *(unsigned char *)(v3 + 142) = 7;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = &unk_1F2616E88;
  *(void *)(v3 + 168) = &unk_1F2617008;
  uint64_t v5 = (uint64_t **)(*v4 + 1576);
  uint64_t v8 = a1[2];
  int v6 = (llvm::PointerType *)llvm::FunctionType::get(v5, (uint64_t)&v8, 1, 0);
  a1[22] = llvm::PointerType::get(v6, 0);
  a1[23] = 0;
  return a1;
}

uint64_t sub_1CD2CA320(uint64_t a1, llvm::Function *this)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  unsigned int v121 = 0;
  uint64_t v2 = (char *)this + 72;
  uint64_t v3 = (char *)*((void *)this + 10);
  if (v3 == (char *)this + 72)
  {
LABEL_6:
    char v8 = 0;
    return v8 & 1;
  }
  while (1)
  {
    int v6 = v3 - 24;
    if (!v3) {
      int v6 = 0;
    }
    uint64_t v7 = (char *)*((void *)v6 + 6);
    if (v7 != v6 + 40) {
      break;
    }
    uint64_t v3 = (char *)*((void *)v3 + 1);
    if (v3 == v2) {
      goto LABEL_6;
    }
  }
  uint64_t v115 = 0;
  char v8 = 0;
  char v118 = 0;
  unsigned int v119 = (llvm::Function *)((char *)this + 112);
  uint64_t v120 = a1 + 40;
  do
  {
    unint64_t v9 = v7;
    uint64_t v7 = (char *)*((void *)v7 + 1);
    unsigned int v10 = v3 - 24;
    if (!v3) {
      unsigned int v10 = 0;
    }
    if (v7 == v10 + 40)
    {
      uint64_t v18 = *((void *)v3 + 1);
      uint64_t v3 = v2;
      if ((char *)v18 != v2)
      {
        while (1)
        {
          uint64_t v19 = v18 - 24;
          if (!v18) {
            uint64_t v19 = 0;
          }
          uint64_t v7 = *(char **)(v19 + 48);
          if (v7 != (char *)(v19 + 40)) {
            break;
          }
          uint64_t v18 = *(void *)(v18 + 8);
          if ((char *)v18 == v2)
          {
            uint64_t v3 = v2;
            goto LABEL_11;
          }
        }
        uint64_t v3 = (char *)v18;
      }
    }
LABEL_11:
    uint64_t v11 = (uint64_t)(v9 - 24);
    if (v9) {
      unsigned int v12 = v9 - 24;
    }
    else {
      unsigned int v12 = 0;
    }
    unsigned int v13 = v12[16] - 33;
    BOOL v14 = v13 > 0x33;
    uint64_t v15 = (1 << v13) & 0x8000000000041;
    if (!v14 && v15 != 0)
    {
      uint64_t v17 = *((void *)v9 - 7);
      if (v17)
      {
        if (!*(unsigned char *)(v17 + 16) && *(void *)(v17 + 24) == *((void *)v9 + 6))
        {
          switch(*(_DWORD *)(v17 + 36))
          {
            case 0x1E:
              char v8 = 1;
              sub_1CD2CB324(a1, v11, 1);
              break;
            case 0x1F:
              uint64_t v38 = *(unsigned __int8 **)&v12[-32 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF)];
              unsigned int v39 = *(llvm::PointerType **)(a1 + 16);
              unint64_t v40 = llvm::PointerType::get(v39, 0);
              *(void *)(a1 + 88) = *((void *)v12 + 5);
              *(void *)(a1 + 96) = v12 + 24;
              uint64_t v41 = (unsigned __int8 *)*((void *)v12 + 6);
              BOOL v123 = v41;
              if (v41)
              {
                llvm::MetadataTracking::track((uint64_t)&v123, v41, 2);
                uint64_t v42 = (uint64_t)v123;
              }
              else
              {
                uint64_t v42 = 0;
              }
              sub_1CB8461A4(v120, 0, v42);
              if (!v123) {
                goto LABEL_55;
              }
              int v71 = *v123;
              if ((v71 - 4) > 0x1E)
              {
                if ((v71 - 3) >= 0xFFFFFFFE) {
                  uint64_t v82 = v123;
                }
                else {
                  uint64_t v82 = 0;
                }
                if ((v71 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v73 = (unint64_t)(v82 + 8);
LABEL_127:
                  uint64_t v125 = (const char *)&v123;
                  sub_1CC5FA668(v73 + 16, &v125);
                  goto LABEL_55;
                }
                if (v71 == 3) {
                  *((void *)v123 + 1) = 0;
                }
              }
              else if ((v123[1] & 0x7F) == 2 || *((_DWORD *)v123 + 3))
              {
                uint64_t v72 = *((void *)v123 + 2);
                if ((v72 & 4) != 0)
                {
                  unint64_t v73 = v72 & 0xFFFFFFFFFFFFFFF8;
                  if (v73) {
                    goto LABEL_127;
                  }
                }
              }
LABEL_55:
              __int16 v124 = 257;
              if (*(void *)v38 != v40)
              {
                if (v38[16] <= 0x14u)
                {
                  uint64_t v38 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 112) + 224))(*(void *)(a1 + 112), 49, v38, v40);
                  if (v38) {
                    BOOL v54 = v38[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v54 = 0;
                  }
                  if (v54)
                  {
                    (*(void (**)(void, unsigned __int8 *, unsigned __int8 **, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v38, &v123, *(void *)(a1 + 88), *(void *)(a1 + 96));
                    uint64_t v84 = *(unsigned int *)(a1 + 48);
                    if (v84)
                    {
                      uint64_t v85 = *(void *)(a1 + 40);
                      uint64_t v86 = v85 + 16 * v84;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v38, *(_DWORD *)v85, *(llvm::MDNode **)(v85 + 8));
                        v85 += 16;
                      }
                      while (v85 != v86);
                    }
                  }
                }
                else
                {
                  __int16 v128 = 257;
                  uint64_t v38 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v38, v40, &v125, 0);
                  (*(void (**)(void, unsigned __int8 *, unsigned __int8 **, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v38, &v123, *(void *)(a1 + 88), *(void *)(a1 + 96));
                  uint64_t v43 = *(unsigned int *)(a1 + 48);
                  if (v43)
                  {
                    uint64_t v77 = *(void *)(a1 + 40);
                    uint64_t v78 = v77 + 16 * v43;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v38, *(_DWORD *)v77, *(llvm::MDNode **)(v77 + 8));
                      v77 += 16;
                    }
                    while (v77 != v78);
                  }
                }
              }
              __int16 v124 = 257;
              char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 56) + 40) + 272), v39, 1);
              uint64_t v56 = operator new(0x60uLL);
              v56[13] = v56[13] & 0x38000000 | 1;
              uint64_t v57 = (llvm::Instruction *)(v56 + 8);
              *(void *)uint64_t v56 = 0;
              *((void *)v56 + 1) = 0;
              *((void *)v56 + 2) = 0;
              *((void *)v56 + 3) = v56 + 8;
              __int16 v128 = 257;
              llvm::LoadInst::LoadInst((llvm::Value *)(v56 + 8), (uint64_t)v39, (uint64_t)v38, &v125, 0, Alignment, 0);
              (*(void (**)(void, llvm::Instruction *, unsigned __int8 **, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v57, &v123, *(void *)(a1 + 88), *(void *)(a1 + 96));
              uint64_t v58 = *(unsigned int *)(a1 + 48);
              if (v58)
              {
                uint64_t v62 = *(void *)(a1 + 40);
                uint64_t v63 = v62 + 16 * v58;
                do
                {
                  llvm::Instruction::setMetadata(v57, *(_DWORD *)v62, *(llvm::MDNode **)(v62 + 8));
                  v62 += 16;
                }
                while (v62 != v63);
              }
              uint64_t v59 = *(void *)(a1 + 32);
              __int16 v128 = 257;
              unint64_t v60 = sub_1CB845F20(v120, 32, v57, v59, (uint64_t)&v125);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, v60, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            case 0x20:
            case 0x21:
              if ((llvm::Constant::isOneValue(*(llvm::Constant **)&v12[-32
                                                                                       * (*((_DWORD *)v12 + 5) & 0x7FFFFFF)
                                                                                       + 32]) & 1) == 0)
                *((void *)v9 + 5) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v9 + 5, **((uint64_t ***)v9 - 3), -1, 24);
              goto LABEL_50;
            case 0x23:
              if (v121 >= 4uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v122[v121++] = v12;
              goto LABEL_50;
            case 0x24:
              sub_1CD2C8A54((uint64_t)(v9 - 24));
              if (v37) {
                goto LABEL_50;
              }
              for (uint64_t i = *((void *)v9 - 2); i; uint64_t i = *(void *)(i + 8))
              {
                uint64_t v65 = *(void *)(i + 24);
                BOOL v66 = sub_1CD2CB3B4(v65);
                if (v65) {
                  BOOL v67 = !v66;
                }
                else {
                  BOOL v67 = 1;
                }
                if (!v67) {
                  *(void *)(v65 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v65 + 64), **(uint64_t ***)v65, -1, 24);
                }
              }
              sub_1CD8C559C((llvm::Type ***)v12);
              char v8 = 1;
              uint64_t v115 = v12;
              break;
            case 0x25:
            case 0x26:
            case 0x27:
              char v8 = 1;
              *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v119, **(uint64_t ***)this, -1, "coroutine.presplit", 0x12uLL, "1", 1uLL);
              break;
            case 0x28:
              if (!*(void *)(a1 + 184))
              {
                uint64_t v44 = *(uint64_t **)(a1 + 104);
                unint64_t v117 = *(void *)(*(void *)(*((void *)v12 + 5) + 56) + 40);
                unint64_t v114 = (llvm::PointerType *)llvm::StructType::create(v44, "NoopCoro.Frame", 0xEuLL);
                uint64_t v45 = (const char *)llvm::PointerType::get(v114, 0);
                unint64_t v46 = (uint64_t **)(*v44 + 1576);
                uint64_t v125 = v45;
                uint64_t v47 = (llvm::PointerType *)llvm::FunctionType::get(v46, (uint64_t)&v125, 1, 0);
                uint64_t v125 = (const char *)llvm::PointerType::get(v47, 0);
                int v126 = v125;
                llvm::StructType::setBody((uint64_t)v114, (uint64_t)&v125, 2, 0);
                uint64_t v125 = "NoopCoro.ResumeDestroy";
                __int16 v128 = 259;
                uint64_t v48 = operator new(0x80uLL);
                *((_DWORD *)v48 + 7) = *((_DWORD *)v48 + 7) & 0x38000000 | 0x40000000;
                *(void *)uint64_t v48 = 0;
                llvm::Function::Function((unint64_t *)v48 + 1, v47, 8, (llvm::Type *)0xFFFFFFFFLL, &v125, v117);
                *((_WORD *)v48 + 13) = *((_WORD *)v48 + 13) & 0xC00F | 0x80;
                uint64_t v125 = "entry";
                __int16 v128 = 259;
                operator new();
              }
              *(void *)(a1 + 88) = *((void *)v12 + 5);
              *(void *)(a1 + 96) = v12 + 24;
              uint64_t v49 = (unsigned __int8 *)*((void *)v12 + 6);
              BOOL v123 = v49;
              if (v49)
              {
                llvm::MetadataTracking::track((uint64_t)&v123, v49, 2);
                uint64_t v50 = (uint64_t)v123;
              }
              else
              {
                uint64_t v50 = 0;
              }
              sub_1CB8461A4(v120, 0, v50);
              if (!v123) {
                goto LABEL_64;
              }
              int v74 = *v123;
              if ((v74 - 4) > 0x1E)
              {
                if ((v74 - 3) >= 0xFFFFFFFE) {
                  unsigned int v83 = v123;
                }
                else {
                  unsigned int v83 = 0;
                }
                if ((v74 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v76 = (unint64_t)(v83 + 8);
LABEL_133:
                  uint64_t v125 = (const char *)&v123;
                  sub_1CC5FA668(v76 + 16, &v125);
                  goto LABEL_64;
                }
                if (v74 == 3) {
                  *((void *)v123 + 1) = 0;
                }
              }
              else if ((v123[1] & 0x7F) == 2 || *((_DWORD *)v123 + 3))
              {
                uint64_t v75 = *((void *)v123 + 2);
                if ((v75 & 4) != 0)
                {
                  unint64_t v76 = v75 & 0xFFFFFFFFFFFFFFF8;
                  if (v76) {
                    goto LABEL_133;
                  }
                }
              }
LABEL_64:
              uint64_t v51 = *(unsigned __int8 **)(a1 + 184);
              uint64_t v52 = *(void *)(a1 + 16);
              __int16 v124 = 257;
              if (*(void *)v51 != v52)
              {
                if (v51[16] <= 0x14u)
                {
                  uint64_t v61 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 112)
                                                                                               + 224))(*(void *)(a1 + 112), 49, v51, v52);
                  uint64_t v51 = (unsigned __int8 *)v61;
                  if (v61)
                  {
                    if (*(unsigned __int8 *)(v61 + 16) >= 0x1Cu)
                    {
                      (*(void (**)(void, uint64_t, unsigned __int8 **, void, void))(**(void **)(a1 + 120)
                                                                                                  + 16))(*(void *)(a1 + 120), v61, &v123, *(void *)(a1 + 88), *(void *)(a1 + 96));
                      uint64_t v87 = *(unsigned int *)(a1 + 48);
                      if (v87)
                      {
                        uint64_t v88 = *(void *)(a1 + 40);
                        uint64_t v89 = v88 + 16 * v87;
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v51, *(_DWORD *)v88, *(llvm::MDNode **)(v88 + 8));
                          v88 += 16;
                        }
                        while (v88 != v89);
                      }
                    }
                  }
                }
                else
                {
                  __int16 v128 = 257;
                  uint64_t v51 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v51, v52, &v125, 0);
                  (*(void (**)(void, unsigned __int8 *, unsigned __int8 **, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v51, &v123, *(void *)(a1 + 88), *(void *)(a1 + 96));
                  uint64_t v53 = *(unsigned int *)(a1 + 48);
                  if (v53)
                  {
                    uint64_t v79 = *(void *)(a1 + 40);
                    uint64_t v80 = v79 + 16 * v53;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v51, *(_DWORD *)v79, *(llvm::MDNode **)(v79 + 8));
                      v79 += 16;
                    }
                    while (v79 != v80);
                  }
                }
              }
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, (llvm::Value *)v51, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            case 0x2B:
              uint64_t v20 = (const llvm::APInt **)&v12[-32 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF)];
              uint64_t v21 = v20[4];
              uint64_t v22 = (unint64_t *)((char *)v21 + 24);
              if (*((_DWORD *)v21 + 8) >= 0x41u) {
                uint64_t v22 = (unint64_t *)*v22;
              }
              uint64_t v116 = *v20;
              unint64_t v23 = *v22;
              unint64_t v24 = __clz(*v22) ^ 0x3F;
              uint64_t v25 = **(void **)(a1 + 104) + 1912;
              uint64_t v26 = *(uint64_t **)(a1 + 8);
              uint64_t v125 = *(const char **)(a1 + 176);
              int v126 = v125;
              uint64_t v127 = v25;
              unint64_t v27 = (llvm::StructType *)llvm::StructType::get(v26, (uint64_t)&v125, 3, 0);
              StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(void *)a1 + 272), v27);
              uint64_t v29 = 1 << v24;
              if (!v23) {
                uint64_t v29 = 1;
              }
              uint64_t v30 = (v29 + *((void *)StructLayout + 4) - 1) & -v29;
              unsigned int v31 = llvm::Constant::isOneValue(*(llvm::Constant **)&v12[-32
                                                                                    * (*((_DWORD *)v12 + 5) & 0x7FFFFFF)
                                                                                    + 64]);
              uint64_t v32 = 0;
              if (v31) {
                uint64_t v33 = -v30;
              }
              else {
                LODWORD(v33) = v30;
              }
              *(void *)(a1 + 88) = *((void *)v12 + 5);
              *(void *)(a1 + 96) = v12 + 24;
              uint64_t v34 = (unsigned __int8 *)*((void *)v12 + 6);
              BOOL v123 = v34;
              if (v34)
              {
                llvm::MetadataTracking::track((uint64_t)&v123, v34, 2);
                uint64_t v32 = (uint64_t)v123;
              }
              uint64_t v35 = (uint64_t *)v120;
              sub_1CB8461A4(v120, 0, v32);
              if (!v123) {
                goto LABEL_42;
              }
              int v68 = *v123;
              if ((v68 - 4) > 0x1E)
              {
                if ((v68 - 3) >= 0xFFFFFFFE) {
                  uint64_t v81 = v123;
                }
                else {
                  uint64_t v81 = 0;
                }
                if ((v68 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v70 = (unint64_t)(v81 + 8);
LABEL_121:
                  uint64_t v125 = (const char *)&v123;
                  sub_1CC5FA668(v70 + 16, &v125);
                  uint64_t v35 = (uint64_t *)v120;
                  goto LABEL_42;
                }
                uint64_t v35 = (uint64_t *)v120;
                if (v68 == 3) {
                  *((void *)v123 + 1) = 0;
                }
              }
              else
              {
                uint64_t v35 = (uint64_t *)v120;
                if ((v123[1] & 0x7F) == 2 || *((_DWORD *)v123 + 3))
                {
                  uint64_t v69 = *((void *)v123 + 2);
                  if ((v69 & 4) != 0)
                  {
                    unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFF8;
                    if (v70) {
                      goto LABEL_121;
                    }
                  }
                }
              }
LABEL_42:
              __int16 v128 = 257;
              unsigned int v36 = sub_1CB844364(v35, v25, v116, v33, (uint64_t)&v125);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, v36, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            case 0x2C:
              sub_1CD2CB324(a1, v11, 0);
              goto LABEL_50;
            case 0x30:
              if (llvm::Constant::isOneValue(*(llvm::Constant **)&v12[-32
                                                                                   * (*((_DWORD *)v12 + 5) & 0x7FFFFFF)
                                                                                   + 32]))
                *((void *)v9 + 5) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v9 + 5, **((uint64_t ***)v9 - 3), -1, 24);
              char v118 = 1;
LABEL_50:
              char v8 = 1;
              break;
            default:
              break;
          }
        }
      }
    }
  }
  while (v3 != v2);
  if (v115 && v121)
  {
    uint64_t v90 = v122;
    int v91 = v115 + 8;
    uint64_t v92 = 8 * v121;
    do
    {
      uint64_t v93 = *v90;
      uint64_t v94 = *(_DWORD *)(*v90 + 20) & 0x7FFFFFF;
      uint64_t v95 = -v94;
      BOOL v96 = (char **)(*v90 - 32 * v94);
      if (*v96)
      {
        uint64_t v97 = v93 + 32 * v95;
        int v99 = *(void **)(v97 + 16);
        uint64_t v98 = (void *)(v97 + 16);
        *int v99 = *(v98 - 1);
        uint64_t v100 = *(v98 - 1);
        if (v100) {
          *(void *)(v100 + 16) = *v98;
        }
      }
      *BOOL v96 = v115;
      uint64_t v101 = *((void *)v115 + 1);
      uint64_t v102 = v93 + 32 * v95;
      *(void *)(v102 + 8) = v101;
      if (v101) {
        *(void *)(v101 + 16) = v102 + 8;
      }
      *(void *)(v102 + 16) = v91;
      void *v91 = v96;
      ++v90;
      v92 -= 8;
    }
    while (v92);
  }
  if (v118)
  {
    if ((*((_WORD *)this + 9) & 1) == 0)
    {
      uint64_t v103 = *((void *)this + 11);
      goto LABEL_161;
    }
    llvm::Function::BuildLazyArguments(this);
    uint64_t v103 = *((void *)this + 11);
    if (*((_WORD *)this + 9))
    {
      llvm::Function::BuildLazyArguments(this);
      uint64_t v104 = *((void *)this + 11);
    }
    else
    {
LABEL_161:
      uint64_t v104 = v103;
    }
    uint64_t v105 = v104 + 40 * *((void *)this + 12);
    while (v103 != v105)
    {
      if (*(unsigned char *)(*(void *)v103 + 8) == 15)
      {
        uint64_t v107 = *(void *)(v103 + 24);
        uint64_t v110 = *(void *)(v107 + 112);
        int v108 = (uint64_t *)(v107 + 112);
        uint64_t v109 = v110;
        if (v110)
        {
          int v111 = *(_DWORD *)(v103 + 32);
          if ((v111 + 2) < *(_DWORD *)(v109 + 8))
          {
            uint64_t v112 = *(void *)(v109 + 8 * (v111 + 2) + 40);
            if (v112)
            {
              if ((*(unsigned char *)(v112 + 14) & 8) != 0)
              {
                uint64_t v106 = *(void *)(v103 + 24);
                *(void *)(v106 + 112) = llvm::AttributeList::removeAttributeAtIndex(v108, **(uint64_t ***)v106, v111 + 1, 19);
              }
            }
          }
        }
      }
      v103 += 40;
    }
  }
  return v8 & 1;
}

void sub_1CD2CB1D4()
{
}

uint64_t sub_1CD2CB270(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBD00198;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F264AAA0;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD001A0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD2CB1D4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBD001A0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

llvm::BitCastInst *sub_1CD2CB324(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_1CD8C4CBC(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), a3, (llvm::Instruction *)a2);
  uint64_t v5 = (llvm::BitCastInst **)(a2 - 32);
  if (*(void *)(a2 - 32))
  {
    **(void **)(a2 - 16) = *(void *)(a2 - 24);
    uint64_t v6 = *(void *)(a2 - 24);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(a2 - 16);
    }
  }
  *uint64_t v5 = result;
  if (result)
  {
    uint64_t v8 = *((void *)result + 1);
    uint64_t result = (llvm::BitCastInst *)((char *)result + 8);
    uint64_t v7 = v8;
    *(void *)(a2 - 24) = v8;
    if (v8) {
      *(void *)(v7 + 16) = a2 - 24;
    }
    *(void *)(a2 - 16) = result;
    *(void *)uint64_t result = v5;
  }
  *(_WORD *)(a2 + 18) = *(_WORD *)(a2 + 18) & 0xF003 | 0x20;
  return result;
}

BOOL sub_1CD2CB3B4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 29;
}

void sub_1CD2CB400()
{
}

void sub_1CD2CB43C(llvm::Pass *this)
{
  *(void *)this = &unk_1F264AAA0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56)) {
      free(v3);
    }
    MEMORY[0x1D25D9CE0]();
  }

  llvm::Pass::~Pass(this);
}

void sub_1CD2CB4D8(llvm::Pass *this)
{
  *(void *)this = &unk_1F264AAA0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56)) {
      free(v3);
    }
    MEMORY[0x1D25D9CE0]();
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD2CB588()
{
  return "Lower early coroutine intrinsics";
}

uint64_t sub_1CD2CB598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  _OWORD v3[10] = xmmword_1E685A948;
  v3[11] = *(_OWORD *)&off_1E685A958;
  v3[12] = xmmword_1E685A968;
  v3[6] = xmmword_1E685A908;
  v3[7] = *(_OWORD *)&off_1E685A918;
  v3[8] = xmmword_1E685A928;
  v3[9] = *(_OWORD *)&off_1E685A938;
  v3[2] = xmmword_1E685A8C8;
  void v3[3] = *(_OWORD *)&off_1E685A8D8;
  v3[4] = xmmword_1E685A8E8;
  v3[5] = *(_OWORD *)&off_1E685A8F8;
  v3[0] = xmmword_1E685A8A8;
  v3[1] = *(_OWORD *)&off_1E685A8B8;
  if (sub_1CD2C7004(a2, (uint64_t)v3, 13)) {
    operator new();
  }
  return 0;
}

void sub_1CD2CB6AC(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CD2CB6F8(uint64_t a1, llvm::Function *a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return sub_1CD2CA320(result, a2);
  }
  return result;
}

void sub_1CD2CB708(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  uint64_t v5 = (void **)((char *)this + 208);
  uint64_t v4 = (void *)*((void *)this + 26);
  *((_DWORD *)this + 12) = 0;
  uint64_t v6 = (void *)*((void *)this + 27);
  if (v6 == v4) {
    goto LABEL_2;
  }
  uint64_t v36 = *((unsigned int *)this + 56);
  if (v36 < 0x21 || 4 * (*((_DWORD *)this + 57) - *((_DWORD *)this + 58)) >= v36)
  {
    memset(v6, 255, 8 * v36);
LABEL_2:
    *((_DWORD *)this + 57) = 0;
    *((_DWORD *)this + 58) = 0;
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear(v5);
LABEL_3:
  uint64_t v7 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v7) {
      return;
    }
    uint64_t v9 = i - 24;
    if (!i) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    if (v10 != v9 + 40) {
      break;
    }
  }
  while (1)
  {
    if (v10) {
      uint64_t v11 = v10 - 24;
    }
    else {
      uint64_t v11 = 0;
    }
    BOOL v12 = sub_1CD2CD488(v11);
    if (v12) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v10)
    {
      if (v12)
      {
        sub_1CD2C8A54(v13);
        if (v14)
        {
          if (llvm::Value::stripPointerCasts(*(llvm::Value **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 64)) != *(llvm::Value **)(*(void *)(v13 + 40) + 56))
          {
            unint64_t v15 = *((unsigned int *)this + 12);
            if (v15 >= *((unsigned int *)this + 13)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*((void *)this + 5) + 8 * v15) = v13;
            ++*((_DWORD *)this + 12);
          }
        }
      }
    }
    BOOL v16 = sub_1CD2CD4D4(v11);
    if (!v10) {
      goto LABEL_59;
    }
    if (!v16) {
      goto LABEL_59;
    }
    uint64_t v17 = *(void *)(v11 + 8);
    if (!v17) {
      goto LABEL_59;
    }
    if (*(void *)(v17 + 8)) {
      goto LABEL_59;
    }
    uint64_t v18 = *(void *)(v17 + 24);
    if (*(unsigned char *)(v18 + 16) != 31 || (*(_DWORD *)(v18 + 20) & 0x7FFFFFE) != 6) {
      goto LABEL_59;
    }
    uint64_t v19 = *((void *)this + 27);
    uint64_t v20 = *((unsigned int *)this + 57);
    if (v19 != *((void *)this + 26))
    {
      unsigned int v24 = *((_DWORD *)this + 56);
      goto LABEL_38;
    }
    if (!v20)
    {
LABEL_35:
      unsigned int v24 = *((_DWORD *)this + 56);
      if (v20 < v24)
      {
        *((_DWORD *)this + 57) = v20 + 1;
        *(void *)(v19 + 8 * v20) = v18;
        goto LABEL_59;
      }
LABEL_38:
      if (3 * v24 <= 4 * ((int)v20 - *((_DWORD *)this + 58)))
      {
        if (v24 >= 0x40) {
          v24 *= 2;
        }
        else {
          unsigned int v24 = 128;
        }
      }
      else if (v24 - v20 >= v24 >> 3)
      {
        goto LABEL_40;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v5, v24);
      unsigned int v24 = *((_DWORD *)this + 56);
      uint64_t v19 = *((void *)this + 27);
LABEL_40:
      unsigned int v25 = v24 - 1;
      unsigned int v26 = (v24 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      unint64_t v27 = (void *)(v19 + 8 * v26);
      uint64_t v28 = *v27;
      if (*v27 == -1)
      {
        uint64_t v29 = 0;
LABEL_52:
        if (v29) {
          uint64_t v33 = v29;
        }
        else {
          uint64_t v33 = v27;
        }
        if (*v33 != v18)
        {
          if (*v33 == -2) {
            --*((_DWORD *)this + 58);
          }
          else {
            ++*((_DWORD *)this + 57);
          }
          void *v33 = v18;
        }
      }
      else
      {
        uint64_t v29 = 0;
        int v30 = 1;
        while (v28 != v18)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -2;
          }
          if (v31) {
            uint64_t v29 = v27;
          }
          unsigned int v32 = v26 + v30++;
          unsigned int v26 = v32 & v25;
          unint64_t v27 = (void *)(v19 + 8 * (v32 & v25));
          uint64_t v28 = *v27;
          if (*v27 == -1) {
            goto LABEL_52;
          }
        }
      }
      goto LABEL_59;
    }
    uint64_t v21 = 0;
    uint64_t v22 = 8 * v20;
    unint64_t v23 = (void *)*((void *)this + 27);
    while (*v23 != v18)
    {
      if (*v23 == -2) {
        uint64_t v21 = v23;
      }
      ++v23;
      v22 -= 8;
      if (!v22)
      {
        if (!v21) {
          goto LABEL_35;
        }
        *uint64_t v21 = v18;
        --*((_DWORD *)this + 58);
        break;
      }
    }
LABEL_59:
    uint64_t v10 = *(void *)(v10 + 8);
    uint64_t v34 = i - 24;
    if (!i) {
      uint64_t v34 = 0;
    }
    if (v10 == v34 + 40) {
      break;
    }
LABEL_66:
    if (i == v7) {
      return;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v7) {
      break;
    }
    uint64_t v35 = i - 24;
    if (!i) {
      uint64_t v35 = 0;
    }
    uint64_t v10 = *(void *)(v35 + 48);
    if (v10 != v35 + 40) {
      goto LABEL_66;
    }
  }
}

void sub_1CD2CBA58(uint64_t a1, void *a2, uint64_t a3, llvm::DominatorTree *a4)
{
  v295[32] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 144) = 0;
  uint64_t v5 = a1 + 144;
  uint64_t v6 = (void *)(a1 + 88);
  *(_DWORD *)(a1 + 96) = 0;
  v277 = (_DWORD *)(a1 + 96);
  uint64_t v7 = (void *)(a1 + 112);
  *(_DWORD *)(a1 + 120) = 0;
  uint64_t v8 = (_DWORD *)(a1 + 120);
  uint64_t v9 = a1 + 136;
  uint64_t v10 = a1 + 184;
  sub_1CD8C583C((_DWORD *)(a1 + 184));
  uint64_t v275 = a2;
  for (uint64_t i = a2[1]; i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v12 = *(void *)(i + 24);
    BOOL v13 = sub_1CD2CB3B4(v12);
    if (v12) {
      BOOL v14 = !v13;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      BOOL v15 = sub_1CD2CD5B4(v12);
      if (v12) {
        BOOL v16 = !v15;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16) {
        continue;
      }
      unint64_t v17 = *(unsigned int *)(a1 + 120);
      if (v17 >= *(unsigned int *)(a1 + 124)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v18 = v7;
      uint64_t v19 = v8;
    }
    else
    {
      unint64_t v17 = *(unsigned int *)(a1 + 96);
      if (v17 >= *(unsigned int *)(a1 + 100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v18 = v6;
      uint64_t v19 = v277;
    }
    *(void *)(*v18 + 8 * v17) = v12;
    ++*v19;
  }
  v274 = v8;
  uint64_t v270 = (llvm::ValueAsMetadata ***)v7;
  v273 = (llvm::ValueAsMetadata ***)v6;
  uint64_t v20 = a1;
  uint64_t v21 = *v277;
  if (v21)
  {
    uint64_t v22 = (const char **)*v6;
    uint64_t v23 = *v6 + 8 * v21;
    while (1)
    {
      int v289 = *v22;
      uint64_t v24 = *((void *)v289 + 1);
      if (v24) {
        break;
      }
LABEL_39:
      if (++v22 == (const char **)v23) {
        goto LABEL_40;
      }
    }
    while (1)
    {
      uint64_t v25 = *(void *)(v24 + 24);
      BOOL v26 = sub_1CD2CD600(v25);
      if (v25) {
        BOOL v27 = !v26;
      }
      else {
        BOOL v27 = 1;
      }
      if (v27) {
        goto LABEL_35;
      }
      uint64_t v28 = *(void *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) + 32);
      unsigned int v29 = *(_DWORD *)(v28 + 32);
      if (v29 > 0x40)
      {
        if (!**(_DWORD **)(v28 + 24))
        {
LABEL_32:
          unint64_t v32 = *(unsigned int *)(v20 + 144);
          if (v32 >= *(unsigned int *)(v20 + 148)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          BOOL v31 = (void *)v9;
          uint64_t v33 = (_DWORD *)v5;
          goto LABEL_34;
        }
      }
      else if (!((uint64_t)(*(void *)(v28 + 24) << -(char)v29) >> -(char)v29))
      {
        goto LABEL_32;
      }
      int v30 = sub_1CD4B2114(v10, (uint64_t *)&v289);
      BOOL v31 = v30 + 1;
      uint64_t v33 = v30 + 2;
      unint64_t v32 = *((unsigned int *)v30 + 4);
      if (v32 >= *((unsigned int *)v30 + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v20 = a1;
LABEL_34:
      *(void *)(*v31 + 8 * v32) = v25;
      ++*v33;
LABEL_35:
      uint64_t v24 = *(void *)(v24 + 8);
      if (!v24) {
        goto LABEL_39;
      }
    }
  }
LABEL_40:
  sub_1CD2C8A54((uint64_t)v275);
  uint64_t v35 = v34;
  LODWORD(v289) = 0;
  Value = llvm::ConstantExpr::getExtractValue(v34, (unsigned int *)&v289, 1, 0);
  sub_1CD2CD520(Value, v9);
  if (!*v274)
  {
    BOOL v66 = 0;
    int v67 = 1;
    goto LABEL_452;
  }
  uint64_t v272 = v35;
  uint64_t v37 = *(void *)(v275[5] + 56);
  uint64_t v284 = v288;
  unsigned int v285 = v288;
  uint64_t v286 = 8;
  int v287 = 0;
  uint64_t v38 = v37 + 72;
  uint64_t v39 = *(void *)(v37 + 80);
  if (v39 != v37 + 72)
  {
    unsigned int v40 = 8;
    while (1)
    {
      uint64_t v41 = v39 ? v39 - 24 : 0;
      uint64_t v42 = *(void *)(v41 + 40);
      if (v42 == v41 + 40)
      {
        uint64_t v44 = 0;
      }
      else
      {
        uint64_t v43 = v42 ? v42 - 24 : 0;
        uint64_t v44 = *(unsigned __int8 *)(v43 + 16) - 29 >= 0xB ? 0 : v43;
      }
      int v45 = *(unsigned __int8 *)(v44 + 16);
      if (v45 != 30) {
        break;
      }
LABEL_55:
      uint64_t v39 = *(void *)(v39 + 8);
      if (v39 == v38) {
        goto LABEL_100;
      }
    }
    switch(*(unsigned char *)(v44 + 16))
    {
      case 0x1E:
LABEL_536:
        __break(1u);
        JUMPOUT(0x1CD2CD240);
      case 0x1F:
        int v46 = (*(_DWORD *)(v44 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_59;
      case 0x20:
        int v46 = (*(_DWORD *)(v44 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_59;
      case 0x21:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_55;
      case 0x27:
        int v46 = *(_DWORD *)(v44 + 80) + 1;
LABEL_59:
        if (!v46) {
          goto LABEL_60;
        }
        goto LABEL_55;
      default:
LABEL_60:
        if ((v45 - 33) < 6) {
          goto LABEL_55;
        }
        uint64_t v47 = v285;
        uint64_t v48 = HIDWORD(v286);
        if (v285 != v284) {
          goto LABEL_71;
        }
        if (!HIDWORD(v286)) {
          goto LABEL_69;
        }
        uint64_t v49 = 0;
        uint64_t v50 = 8 * HIDWORD(v286);
        uint64_t v51 = (uint64_t *)v285;
        break;
    }
    do
    {
      if (*v51 == v41) {
        goto LABEL_55;
      }
      if (*v51 == -2) {
        uint64_t v49 = v51;
      }
      ++v51;
      v50 -= 8;
    }
    while (v50);
    if (v49)
    {
      *uint64_t v49 = v41;
      --v287;
      goto LABEL_55;
    }
LABEL_69:
    if (HIDWORD(v286) < v40)
    {
      ++HIDWORD(v286);
      *(void *)&v285[8 * v48] = v41;
      goto LABEL_55;
    }
LABEL_71:
    if (3 * v40 <= 4 * (HIDWORD(v286) - v287))
    {
      if (v40 >= 0x40) {
        v40 *= 2;
      }
      else {
        unsigned int v40 = 128;
      }
    }
    else if (v40 - HIDWORD(v286) >= v40 >> 3)
    {
      goto LABEL_73;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v284, v40);
    unsigned int v40 = v286;
    uint64_t v47 = v285;
LABEL_73:
    unsigned int v52 = v40 - 1;
    unsigned int v53 = (v40 - 1) & ((v41 >> 4) ^ (v41 >> 9));
    BOOL v54 = &v47[8 * v53];
    uint64_t v55 = *(void *)v54;
    if (*(void *)v54 == -1)
    {
      uint64_t v56 = 0;
LABEL_85:
      if (v56) {
        unint64_t v60 = v56;
      }
      else {
        unint64_t v60 = (uint64_t *)v54;
      }
      if (*v60 != v41)
      {
        if (*v60 == -2) {
          --v287;
        }
        else {
          ++HIDWORD(v286);
        }
        *unint64_t v60 = v41;
      }
    }
    else
    {
      uint64_t v56 = 0;
      int v57 = 1;
      while (v55 != v41)
      {
        if (v56) {
          BOOL v58 = 0;
        }
        else {
          BOOL v58 = v55 == -2;
        }
        if (v58) {
          uint64_t v56 = (uint64_t *)v54;
        }
        unsigned int v59 = v53 + v57++;
        unsigned int v53 = v59 & v52;
        BOOL v54 = &v47[8 * (v59 & v52)];
        uint64_t v55 = *(void *)v54;
        if (*(void *)v54 == -1) {
          goto LABEL_85;
        }
      }
    }
    goto LABEL_55;
  }
LABEL_100:
  int v279 = v283;
  uint64_t v280 = v283;
  uint64_t v281 = 8;
  int v282 = 0;
  uint64_t v61 = *(void *)(a1 + 184);
  uint64_t v62 = *(unsigned int *)(a1 + 200);
  uint64_t v63 = (uint64_t *)(v61 + 56 * v62);
  if (*(_DWORD *)(a1 + 192))
  {
    if (v62)
    {
      uint64_t v64 = 56 * v62;
      uint64_t v65 = *(uint64_t **)(a1 + 184);
      while ((*v65 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v65 += 7;
        v64 -= 56;
        if (!v64) {
          goto LABEL_105;
        }
      }
    }
    else
    {
      uint64_t v65 = *(uint64_t **)(a1 + 184);
    }
  }
  else
  {
LABEL_105:
    uint64_t v65 = (uint64_t *)(v61 + 56 * v62);
  }
  int v68 = (uint64_t *)(v61 + 56 * v62);
  if (v65 == v68)
  {
    BOOL v66 = *v277 == 0;
    uint64_t v35 = v272;
    goto LABEL_447;
  }
  uint64_t v69 = (const char *)&v292;
  uint64_t v5 = -2;
  do
  {
    uint64_t v70 = *((unsigned int *)v65 + 4);
    if (!v70) {
      goto LABEL_169;
    }
    int v71 = (const llvm::Value **)v65[1];
    uint64_t v72 = &v71[v70];
    while (1)
    {
      unint64_t v73 = v69;
      int v74 = *v71;
      uint64_t v75 = v285 == v284 ? (uint64_t *)((char *)&v286 + 4) : &v286;
      uint64_t v76 = *(unsigned int *)v75;
      if (v76)
      {
        uint64_t v77 = 8 * v76;
        uint64_t v78 = (unint64_t *)v285;
        while (*v78 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v78;
          v77 -= 8;
          if (!v77) {
            goto LABEL_137;
          }
        }
      }
      else
      {
        uint64_t v78 = (unint64_t *)v285;
      }
      uint64_t v79 = &v285[8 * v76];
      if (v78 == (unint64_t *)v79) {
        break;
      }
      unint64_t v80 = *v78;
LABEL_123:
      uint64_t v81 = *(void *)(v80 + 40);
      if (v81 == v80 + 40)
      {
        unsigned int v83 = 0;
      }
      else
      {
        uint64_t v82 = (unsigned __int8 *)(v81 - 24);
        if (!v81) {
          uint64_t v82 = 0;
        }
        if (v82[16] - 29 >= 0xB) {
          unsigned int v83 = 0;
        }
        else {
          unsigned int v83 = (const llvm::Instruction *)v82;
        }
      }
      if (llvm::DominatorTree::dominates(a4, v74, v83))
      {
        uint64_t v84 = v78 + 1;
        while (v84 != (unint64_t *)v79)
        {
          unint64_t v85 = *v84++;
          unint64_t v80 = v85;
          if (v85 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v78 = v84 - 1;
            goto LABEL_123;
          }
        }
        break;
      }
      ++v71;
      uint64_t v69 = v73;
      uint64_t v5 = -2;
      if (v71 == v72) {
        goto LABEL_169;
      }
    }
LABEL_137:
    uint64_t v86 = *v65;
    uint64_t v87 = v280;
    uint64_t v88 = HIDWORD(v281);
    if (v280 != v279)
    {
      unsigned int v92 = v281;
      uint64_t v69 = v73;
      uint64_t v5 = -2;
LABEL_148:
      if (3 * v92 <= 4 * (HIDWORD(v281) - v282))
      {
        if (v92 >= 0x40) {
          v92 *= 2;
        }
        else {
          unsigned int v92 = 128;
        }
      }
      else if (v92 - HIDWORD(v281) >= v92 >> 3)
      {
        goto LABEL_150;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v279, v92);
      unsigned int v92 = v281;
      uint64_t v87 = v280;
LABEL_150:
      unsigned int v93 = v92 - 1;
      unsigned int v94 = (v92 - 1) & ((v86 >> 4) ^ (v86 >> 9));
      uint64_t v95 = &v87[8 * v94];
      uint64_t v96 = *(void *)v95;
      if (*(void *)v95 == -1)
      {
        uint64_t v97 = 0;
LABEL_162:
        if (v97) {
          uint64_t v101 = v97;
        }
        else {
          uint64_t v101 = v95;
        }
        if (*(void *)v101 != v86)
        {
          if (*(void *)v101 == -2) {
            --v282;
          }
          else {
            ++HIDWORD(v281);
          }
          *(void *)uint64_t v101 = v86;
        }
      }
      else
      {
        uint64_t v97 = 0;
        int v98 = 1;
        while (v96 != v86)
        {
          if (v97) {
            BOOL v99 = 0;
          }
          else {
            BOOL v99 = v96 == -2;
          }
          if (v99) {
            uint64_t v97 = v95;
          }
          unsigned int v100 = v94 + v98++;
          unsigned int v94 = v100 & v93;
          uint64_t v95 = &v87[8 * (v100 & v93)];
          uint64_t v96 = *(void *)v95;
          if (*(void *)v95 == -1) {
            goto LABEL_162;
          }
        }
      }
      goto LABEL_169;
    }
    uint64_t v69 = v73;
    uint64_t v5 = -2;
    if (HIDWORD(v281))
    {
      uint64_t v89 = 0;
      uint64_t v90 = 8 * HIDWORD(v281);
      int v91 = v280;
      while (*v91 != v86)
      {
        if (*v91 == -2) {
          uint64_t v89 = v91;
        }
        ++v91;
        v90 -= 8;
        if (!v90)
        {
          if (!v89) {
            goto LABEL_145;
          }
          *uint64_t v89 = v86;
          --v282;
          goto LABEL_169;
        }
      }
      goto LABEL_169;
    }
LABEL_145:
    unsigned int v92 = v281;
    if (HIDWORD(v281) >= v281) {
      goto LABEL_148;
    }
    ++HIDWORD(v281);
    *(void *)&v280[8 * v88] = v86;
LABEL_169:
    uint64_t v102 = *v65;
    uint64_t v103 = v279;
    if (v280 == v279)
    {
      int v104 = HIDWORD(v281);
      uint64_t v105 = &v280[8 * HIDWORD(v281)];
      if (HIDWORD(v281))
      {
        uint64_t v106 = 0;
        while (*(void *)&v280[v106] != v102)
        {
          v106 += 8;
          if (8 * HIDWORD(v281) == v106) {
            goto LABEL_188;
          }
        }
        uint64_t v105 = &v280[v106];
      }
LABEL_188:
      uint64_t v103 = v280;
    }
    else
    {
      int v107 = v281 - 1;
      unsigned int v108 = (v281 - 1) & ((v102 >> 4) ^ (v102 >> 9));
      uint64_t v105 = &v280[8 * v108];
      uint64_t v109 = *(void *)v105;
      if (*(void *)v105 == -1)
      {
        uint64_t v110 = 0;
LABEL_201:
        if (v110) {
          uint64_t v105 = v110;
        }
        int v104 = HIDWORD(v281);
        if (*(void *)v105 != v102) {
          uint64_t v105 = &v280[8 * v281];
        }
      }
      else
      {
        uint64_t v110 = 0;
        int v111 = 1;
        while (v109 != v102)
        {
          if (v110) {
            BOOL v112 = 0;
          }
          else {
            BOOL v112 = v109 == -2;
          }
          if (v112) {
            uint64_t v110 = v105;
          }
          unsigned int v113 = v108 + v111++;
          unsigned int v108 = v113 & v107;
          uint64_t v105 = &v280[8 * (v113 & v107)];
          uint64_t v109 = *(void *)v105;
          if (*(void *)v105 == -1) {
            goto LABEL_201;
          }
        }
        int v104 = HIDWORD(v281);
      }
    }
    if (v280 == v103) {
      int v114 = v104;
    }
    else {
      int v114 = v281;
    }
    if (v105 != &v280[8 * v114]) {
      goto LABEL_193;
    }
    int v289 = 0;
    if (sub_1CD4A7E9C(*(void *)(a1 + 184), *(_DWORD *)(a1 + 200), v102, &v289)) {
      uint64_t v116 = v289;
    }
    else {
      uint64_t v116 = (const char *)(*(void *)(a1 + 184) + 56 * *(unsigned int *)(a1 + 200));
    }
    int v117 = *((_DWORD *)v116 + 4);
    v293 = v295;
    v295[0] = *(void *)(v102 + 40);
    uint64_t v294 = 0x2000000001;
    int v289 = v69;
    uint64_t v290 = (uint64_t)v69;
    *(void *)&long long v291 = 32;
    DWORD2(v291) = 0;
    uint64_t v118 = *((unsigned int *)v116 + 4);
    if (v118)
    {
      unsigned int v119 = 0;
      uint64_t v120 = *((void *)v116 + 1);
      uint64_t v121 = v120 + 8 * v118;
      unsigned int v122 = 32;
      BOOL v123 = v69;
      uint64_t v124 = (uint64_t)v69;
      while (2)
      {
        uint64_t v125 = *(void *)(*(void *)v120 + 40);
        if ((const char *)v124 == v123)
        {
          if (v119)
          {
            int v126 = 0;
            uint64_t v127 = 8 * v119;
            __int16 v128 = v123;
            while (*(void *)v128 != v125)
            {
              if (*(void *)v128 == -2) {
                int v126 = (char *)v128;
              }
              v128 += 8;
              v127 -= 8;
              if (!v127)
              {
                if (!v126) {
                  goto LABEL_219;
                }
                *(void *)int v126 = v125;
                --DWORD2(v291);
                goto LABEL_242;
              }
            }
            goto LABEL_242;
          }
LABEL_219:
          if (v122 > v119)
          {
            DWORD1(v291) = v119 + 1;
            *(void *)&v123[8 * v119] = v125;
            goto LABEL_242;
          }
        }
        if (3 * v122 <= 4 * (v119 - DWORD2(v291)))
        {
          if (v122 >= 0x40) {
            v122 *= 2;
          }
          else {
            unsigned int v122 = 128;
          }
        }
        else if (v122 - v119 >= v122 >> 3)
        {
          goto LABEL_223;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v289, v122);
        unsigned int v122 = v291;
        uint64_t v124 = v290;
LABEL_223:
        unsigned int v129 = v122 - 1;
        unsigned int v130 = (v122 - 1) & ((v125 >> 4) ^ (v125 >> 9));
        uint64_t v131 = (void *)(v124 + 8 * v130);
        uint64_t v132 = *v131;
        if (*v131 == -1)
        {
          uint64_t v133 = 0;
LABEL_235:
          if (v133) {
            int v137 = v133;
          }
          else {
            int v137 = v131;
          }
          if (*v137 != v125)
          {
            if (*v137 == -2) {
              --DWORD2(v291);
            }
            else {
              ++DWORD1(v291);
            }
            *int v137 = v125;
          }
        }
        else
        {
          uint64_t v133 = 0;
          int v134 = 1;
          while (v132 != v125)
          {
            if (v133) {
              BOOL v135 = 0;
            }
            else {
              BOOL v135 = v132 == -2;
            }
            if (v135) {
              uint64_t v133 = v131;
            }
            unsigned int v136 = v130 + v134++;
            unsigned int v130 = v136 & v129;
            uint64_t v131 = (void *)(v124 + 8 * (v136 & v129));
            uint64_t v132 = *v131;
            if (*v131 == -1) {
              goto LABEL_235;
            }
          }
        }
LABEL_242:
        BOOL v123 = v289;
        uint64_t v124 = v290;
        unsigned int v119 = DWORD1(v291);
        unsigned int v122 = v291;
        v120 += 8;
        if (v120 == v121)
        {
          unsigned int v138 = v294;
          goto LABEL_251;
        }
        continue;
      }
    }
    unsigned int v138 = 1;
LABEL_251:
    int v139 = 32 * v117 + 32;
    do
    {
      while (1)
      {
        uint64_t v140 = *((void *)v293 + v138 - 1);
        LODWORD(v294) = v138 - 1;
        uint64_t v141 = v290;
        uint64_t v142 = DWORD1(v291);
        if ((const char *)v290 == v289)
        {
          if (DWORD1(v291))
          {
            uint64_t v143 = 0;
            uint64_t v144 = 8 * DWORD1(v291);
            uint64_t v145 = (void *)v290;
            while (*v145 != v140)
            {
              if (*v145 == -2) {
                uint64_t v143 = v145;
              }
              ++v145;
              v144 -= 8;
              if (!v144)
              {
                if (!v143) {
                  goto LABEL_260;
                }
                *uint64_t v143 = v140;
                --DWORD2(v291);
                goto LABEL_284;
              }
            }
            goto LABEL_377;
          }
LABEL_260:
          unsigned int v146 = v291;
          if (DWORD1(v291) < v291)
          {
            ++DWORD1(v291);
            *(void *)(v290 + 8 * v142) = v140;
            goto LABEL_284;
          }
        }
        else
        {
          unsigned int v146 = v291;
        }
        if (3 * v146 <= 4 * (DWORD1(v291) - DWORD2(v291)))
        {
          if (v146 >= 0x40) {
            v146 *= 2;
          }
          else {
            unsigned int v146 = 128;
          }
LABEL_383:
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v289, v146);
          unsigned int v146 = v291;
          uint64_t v141 = v290;
          goto LABEL_265;
        }
        if (v146 - DWORD1(v291) < v146 >> 3) {
          goto LABEL_383;
        }
LABEL_265:
        unsigned int v147 = v146 - 1;
        unsigned int v148 = (v146 - 1) & ((v140 >> 4) ^ (v140 >> 9));
        uint64_t v149 = (void *)(v141 + 8 * v148);
        uint64_t v150 = *v149;
        if (*v149 != -1)
        {
          int64_t v151 = 0;
          int v152 = 1;
          while (v150 != v140)
          {
            if (v151) {
              BOOL v153 = 0;
            }
            else {
              BOOL v153 = v150 == -2;
            }
            if (v153) {
              int64_t v151 = v149;
            }
            unsigned int v154 = v148 + v152++;
            unsigned int v148 = v154 & v147;
            uint64_t v149 = (void *)(v141 + 8 * (v154 & v147));
            uint64_t v150 = *v149;
            if (*v149 == -1) {
              goto LABEL_277;
            }
          }
          goto LABEL_377;
        }
        int64_t v151 = 0;
LABEL_277:
        if (v151) {
          uint64_t v155 = v151;
        }
        else {
          uint64_t v155 = v149;
        }
        if (*v155 == v140) {
          goto LABEL_377;
        }
        if (*v155 == -2) {
          --DWORD2(v291);
        }
        else {
          ++DWORD1(v291);
        }
        void *v155 = v140;
LABEL_284:
        uint64_t v156 = v284;
        if (v285 == v284)
        {
          int v157 = HIDWORD(v286);
          v158 = &v285[8 * HIDWORD(v286)];
          if (HIDWORD(v286))
          {
            uint64_t v159 = 0;
            while (*(void *)&v285[v159] != v140)
            {
              v159 += 8;
              if (8 * HIDWORD(v286) == v159) {
                goto LABEL_303;
              }
            }
            v158 = &v285[v159];
          }
LABEL_303:
          uint64_t v156 = v285;
        }
        else
        {
          int v160 = v286 - 1;
          unsigned int v161 = (v286 - 1) & ((v140 >> 4) ^ (v140 >> 9));
          v158 = &v285[8 * v161];
          uint64_t v162 = *(void *)v158;
          if (*(void *)v158 == -1)
          {
            uint64_t v163 = 0;
LABEL_352:
            if (v163) {
              v158 = v163;
            }
            int v157 = HIDWORD(v286);
            if (*(void *)v158 != v140) {
              v158 = &v285[8 * v286];
            }
          }
          else
          {
            uint64_t v163 = 0;
            int v164 = 1;
            while (v162 != v140)
            {
              if (v163) {
                BOOL v165 = 0;
              }
              else {
                BOOL v165 = v162 == -2;
              }
              if (v165) {
                uint64_t v163 = v158;
              }
              unsigned int v166 = v161 + v164++;
              unsigned int v161 = v166 & v160;
              v158 = &v285[8 * (v166 & v160)];
              uint64_t v162 = *(void *)v158;
              if (*(void *)v158 == -1) {
                goto LABEL_352;
              }
            }
            int v157 = HIDWORD(v286);
          }
        }
        if (v285 == v156) {
          int v167 = v157;
        }
        else {
          int v167 = v286;
        }
        if (v158 != &v285[8 * v167] || (--v139, !v139))
        {
          char v200 = 1;
          goto LABEL_395;
        }
        uint64_t v170 = *(void *)(v140 + 40);
        uint64_t v169 = v140 + 40;
        uint64_t v168 = v170;
        if (v170 == v169)
        {
          uint64_t v172 = 0;
        }
        else
        {
          uint64_t v171 = v168 - 24;
          if (!v168) {
            uint64_t v171 = 0;
          }
          uint64_t v172 = *(unsigned __int8 *)(v171 + 16) - 29 >= 0xB ? 0 : v171;
        }
        if (*(unsigned char *)(v172 + 16) == 31)
        {
          uint64_t v174 = *(void *)(a1 + 208);
          uint64_t v173 = *(void *)(a1 + 216);
          if (v173 == v174)
          {
            uint64_t v175 = *(unsigned int *)(a1 + 228);
            int v176 = (void *)(v173 + 8 * v175);
            if (v175)
            {
              uint64_t v177 = 0;
              uint64_t v178 = 8 * v175;
              while (*(void *)(v173 + v177) != v172)
              {
                v177 += 8;
                if (v178 == v177) {
                  goto LABEL_335;
                }
              }
              int v176 = (void *)(v173 + v177);
            }
LABEL_335:
            uint64_t v174 = *(void *)(a1 + 216);
          }
          else
          {
            uint64_t v179 = *(unsigned int *)(a1 + 224);
            int v180 = v179 - 1;
            unsigned int v181 = (v179 - 1) & ((v172 >> 4) ^ (v172 >> 9));
            int v176 = (void *)(v173 + 8 * v181);
            uint64_t v182 = *v176;
            if (*v176 == -1)
            {
              uint64_t v183 = 0;
LABEL_358:
              if (v183) {
                int v176 = v183;
              }
              if (*v176 != v172) {
                int v176 = (void *)(v173 + 8 * v179);
              }
            }
            else
            {
              uint64_t v183 = 0;
              int v184 = 1;
              while (v182 != v172)
              {
                if (v183) {
                  BOOL v185 = 0;
                }
                else {
                  BOOL v185 = v182 == -2;
                }
                if (v185) {
                  uint64_t v183 = v176;
                }
                unsigned int v186 = v181 + v184++;
                unsigned int v181 = v186 & v180;
                int v176 = (void *)(v173 + 8 * (v186 & v180));
                uint64_t v182 = *v176;
                if (*v176 == -1) {
                  goto LABEL_358;
                }
              }
            }
          }
          BOOL v14 = v173 == v174;
          BOOL v187 = (unsigned int *)(a1 + 224);
          if (v14) {
            BOOL v187 = (unsigned int *)(a1 + 228);
          }
          if (v176 != (void *)(v173 + 8 * *v187)) {
            break;
          }
        }
        if (v168 == v169)
        {
          uint64_t v193 = 0;
          uint64_t v194 = 0;
LABEL_375:
          int v199 = 0;
        }
        else
        {
          uint64_t v193 = v168 - 24;
          if (v168) {
            uint64_t v195 = v168 - 24;
          }
          else {
            uint64_t v195 = 0;
          }
          int v196 = *(unsigned __int8 *)(v195 + 16);
          int v197 = v196 - 29;
          if ((v196 - 29) >= 0xB) {
            uint64_t v194 = 0;
          }
          else {
            uint64_t v194 = (llvm::Instruction *)v195;
          }
          if (v196 != 30)
          {
            int v198 = 0;
            switch(v197)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_372;
              case 1:
                goto LABEL_536;
              case 2:
                int v198 = (*(_DWORD *)(v195 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_372;
              case 3:
              case 9:
                int v198 = (*(_DWORD *)(v195 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_372;
              case 4:
                int v198 = 2;
                goto LABEL_372;
              case 7:
                int v198 = *(_WORD *)(v195 + 18) & 1;
                goto LABEL_372;
              case 8:
                int v198 = 1;
                goto LABEL_372;
              case 10:
                int v198 = *(_DWORD *)(v195 + 80) + 1;
                goto LABEL_372;
              default:
                uint64_t v193 = 0;
                goto LABEL_375;
            }
          }
          if ((*(_DWORD *)(v195 + 20) & 0x7FFFFFF) == 3) {
            int v198 = 2;
          }
          else {
            int v198 = 1;
          }
LABEL_372:
          int v199 = v198;
        }
        sub_1CD4B2F9C((uint64_t)&v293, v194, 0, v193, v199);
LABEL_377:
        unsigned int v138 = v294;
        if (!v294) {
          goto LABEL_394;
        }
      }
      int v188 = *(_DWORD *)(v172 + 20);
      if ((v188 & 0x40000000) != 0) {
        uint64_t v189 = *(void *)(v172 - 8);
      }
      else {
        uint64_t v189 = v172 - 32 * (v188 & 0x7FFFFFF);
      }
      if (v294 >= (unint64_t)HIDWORD(v294)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v293 + v294) = *(void *)(v189 + 96);
      unsigned int v190 = v294 + 1;
      LODWORD(v294) = v294 + 1;
      int v191 = *(_DWORD *)(v172 + 20);
      if ((v191 & 0x40000000) != 0) {
        uint64_t v192 = *(void *)(v172 - 8);
      }
      else {
        uint64_t v192 = v172 - 32 * (v191 & 0x7FFFFFF);
      }
      if (v190 >= HIDWORD(v294)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v293 + v190) = *(void *)(v192 + 160);
      unsigned int v138 = v294 + 1;
      LODWORD(v294) = v138;
    }
    while (v138);
LABEL_394:
    char v200 = 0;
LABEL_395:
    if ((const char *)v290 != v289) {
      free((void *)v290);
    }
    if (v293 != v295) {
      free(v293);
    }
    if ((v200 & 1) == 0)
    {
      uint64_t v201 = *v65;
      uint64_t v202 = v280;
      uint64_t v203 = HIDWORD(v281);
      if (v280 == v279)
      {
        if (HIDWORD(v281))
        {
          unint64_t v204 = 0;
          uint64_t v205 = 8 * HIDWORD(v281);
          uint64_t v206 = (uint64_t *)v280;
          while (*v206 != v201)
          {
            if (*v206 == -2) {
              unint64_t v204 = v206;
            }
            ++v206;
            v205 -= 8;
            if (!v205)
            {
              if (!v204) {
                goto LABEL_408;
              }
              uint64_t *v204 = v201;
              --v282;
              goto LABEL_193;
            }
          }
          goto LABEL_193;
        }
LABEL_408:
        unsigned int v207 = v281;
        if (HIDWORD(v281) < v281)
        {
          ++HIDWORD(v281);
          *(void *)&v280[8 * v203] = v201;
          goto LABEL_193;
        }
      }
      else
      {
        unsigned int v207 = v281;
      }
      if (3 * v207 <= 4 * (HIDWORD(v281) - v282))
      {
        if (v207 >= 0x40) {
          v207 *= 2;
        }
        else {
          unsigned int v207 = 128;
        }
      }
      else if (v207 - HIDWORD(v281) >= v207 >> 3)
      {
        goto LABEL_414;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v279, v207);
      unsigned int v207 = v281;
      uint64_t v202 = v280;
LABEL_414:
      unsigned int v208 = v207 - 1;
      unsigned int v209 = (v207 - 1) & ((v201 >> 4) ^ (v201 >> 9));
      uint64_t v210 = &v202[8 * v209];
      uint64_t v211 = *(void *)v210;
      if (*(void *)v210 == -1)
      {
        int v212 = 0;
LABEL_427:
        if (v212) {
          uint64_t v216 = v212;
        }
        else {
          uint64_t v216 = (uint64_t *)v210;
        }
        if (*v216 != v201)
        {
          if (*v216 == -2) {
            --v282;
          }
          else {
            ++HIDWORD(v281);
          }
          *uint64_t v216 = v201;
        }
      }
      else
      {
        int v212 = 0;
        int v213 = 1;
        while (v211 != v201)
        {
          if (v212) {
            BOOL v214 = 0;
          }
          else {
            BOOL v214 = v211 == -2;
          }
          if (v214) {
            int v212 = (uint64_t *)v210;
          }
          unsigned int v215 = v209 + v213++;
          unsigned int v209 = v215 & v208;
          uint64_t v210 = &v202[8 * (v215 & v208)];
          uint64_t v211 = *(void *)v210;
          if (*(void *)v210 == -1) {
            goto LABEL_427;
          }
        }
      }
    }
LABEL_193:
    uint64_t v115 = v65 + 7;
    uint64_t v65 = v63;
    if (v115 != v63)
    {
      uint64_t v65 = v115;
      while ((*v65 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v65 += 7;
        if (v65 == v63)
        {
          uint64_t v65 = v63;
          break;
        }
      }
    }
  }
  while (v65 != v68);
  BOOL v66 = *v277 == HIDWORD(v281) - v282;
  uint64_t v35 = v272;
  if (v280 != v279) {
    free(v280);
  }
LABEL_447:
  if (v285 != v284) {
    free(v285);
  }
  if (v66) {
    int v67 = 2;
  }
  else {
    int v67 = 1;
  }
LABEL_452:
  LODWORD(v289) = v67;
  uint64_t v217 = llvm::ConstantExpr::getExtractValue(v35, (unsigned int *)&v289, 1, 0);
  uint64_t v218 = *(void *)(a1 + 184);
  uint64_t v219 = *(unsigned int *)(a1 + 200);
  uint64_t v220 = (void *)(v218 + 56 * v219);
  if (*(_DWORD *)(a1 + 192))
  {
    if (v219)
    {
      uint64_t v221 = 56 * v219;
      unint64_t v222 = *(void **)(a1 + 184);
      while ((*v222 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v222 += 7;
        v221 -= 56;
        if (!v221) {
          goto LABEL_457;
        }
      }
    }
    else
    {
      unint64_t v222 = *(void **)(a1 + 184);
    }
  }
  else
  {
LABEL_457:
    unint64_t v222 = (void *)(v218 + 56 * v219);
  }
  __int16 v223 = (void *)(v218 + 56 * v219);
LABEL_460:
  while (v222 != v223)
  {
    sub_1CD2CD520(v217, (uint64_t)(v222 + 1));
    uint64_t v224 = v222 + 7;
    unint64_t v222 = v220;
    if (v224 != v220)
    {
      unint64_t v222 = v224;
      while ((*v222 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v222 += 7;
        if (v222 == v220)
        {
          unint64_t v222 = v220;
          goto LABEL_460;
        }
      }
    }
  }
  if (v66)
  {
    uint64_t v225 = *((void *)Value + 14);
    if (v225)
    {
      if (*(_DWORD *)(v225 + 8) >= 3u)
      {
        uint64_t v226 = *(void *)(v225 + 56);
        if (v226)
        {
          if ((*(unsigned char *)(v226 + 21) & 0x10) != 0)
          {
            uint64_t v227 = (void *)(v226 + 48);
            uint64_t v228 = 8 * *(unsigned int *)(v226 + 8) - 8 * *(unsigned int *)(v226 + 32);
            if (v228)
            {
              unint64_t v229 = v228 >> 3;
              do
              {
                unint64_t v230 = v229 >> 1;
                v231 = &v227[v229 >> 1];
                uint64_t v232 = *v231;
                if (*v231) {
                  LODWORD(v232) = *(_DWORD *)(v232 + 12);
                }
                int v233 = v231 + 1;
                v229 += ~v230;
                if ((int)v232 < 76) {
                  uint64_t v227 = v233;
                }
                else {
                  unint64_t v229 = v230;
                }
              }
              while (v229);
            }
            int v234 = *(llvm::Type **)(*v227 + 16);
            if (v234)
            {
              unsigned int Alignment = (unsigned __int16)llvm::AttributeSetNode::getAlignment((llvm::AttributeSetNode *)v226);
              if (Alignment <= 0x100) {
                unsigned __int8 v237 = 0;
              }
              else {
                unsigned __int8 v237 = Alignment;
              }
              unsigned int v238 = *(uint64_t ****)(v275[5] + 56);
              uint64_t v239 = **v238;
              uint64_t v240 = *(void *)(*(void *)(*(void *)(**(void **)(a1 + 40) + 40) + 56) + 80);
              uint64_t v241 = v240 - 24;
              if (!v240) {
                uint64_t v241 = 0;
              }
              uint64_t v242 = v241 + 40;
              for (uint64_t j = *(void *)(v241 + 48); j != v242; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v5 = j - 24;
                if (j) {
                  uint64_t v244 = j - 24;
                }
                else {
                  uint64_t v244 = 0;
                }
                if (*(unsigned char *)(v244 + 16) != 59) {
                  break;
                }
              }
              uint64_t v245 = *v239;
              uint64_t v246 = *(llvm::Value **)(*v239 + 1568);
              if (!v246)
              {
                v269 = *(llvm::ConstantInt **)(v245 + 1888);
                LODWORD(v290) = *(_DWORD *)(v245 + 1896) >> 8;
                if (v290 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v289);
                }
                int v289 = 0;
                uint64_t v246 = (llvm::Value *)llvm::ConstantInt::get(v269, (llvm::LLVMContext *)&v289, v235);
                if (v290 >= 0x41 && v289) {
                  MEMORY[0x1D25D9CB0](v289, 0x1000C8000313F17);
                }
                *(void *)(v245 + 1568) = v246;
              }
              if (*v274)
              {
                llvm::Value::doRAUW(**v270, v246, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              BOOL v247 = (uint64_t *)v238[5];
              int v248 = llvm::ArrayType::get((llvm::ArrayType *)(*v239 + 1912), v234);
              unint64_t v249 = operator new(0x68uLL);
              v249[13] = v249[13] & 0x38000000 | 1;
              *(void *)unint64_t v249 = 0;
              *((void *)v249 + 1) = 0;
              *((void *)v249 + 2) = 0;
              *((void *)v249 + 3) = v249 + 8;
              uint64_t v250 = (llvm::Type *)*((unsigned int *)v247 + 69);
              LOWORD(v292) = 257;
              llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v249 + 8), v248, v250, 0, &v289, (llvm::Instruction *)v5);
              *((_WORD *)v249 + 25) = *((_WORD *)v249 + 25) & 0xFFC0 | v237;
              uint64_t v251 = operator new(0x60uLL);
              v252 = (llvm::BitCastInst *)(v251 + 8);
              v251[13] = v251[13] & 0x38000000 | 1;
              *(void *)uint64_t v251 = 0;
              *((void *)v251 + 1) = 0;
              *((void *)v251 + 2) = 0;
              *((void *)v251 + 3) = v251 + 8;
              uint64_t v253 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*v239 + 1912), 0);
              int v289 = "vFrame";
              LOWORD(v292) = 259;
              llvm::BitCastInst::BitCastInst(v252, (llvm::Value *)(v249 + 8), v253, &v289, (llvm::Instruction *)v5);
              if (*v277)
              {
                llvm::Value::doRAUW(**v273, v252, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              uint64_t v254 = *(void *)(*((void *)v249 + 9) + 56);
              uint64_t v255 = v254 + 72;
              for (uint64_t k = *(void *)(v254 + 80); k != v255; uint64_t k = *(void *)(k + 8))
              {
                uint64_t v257 = k - 24;
                if (!k) {
                  uint64_t v257 = 0;
                }
                uint64_t v258 = *(void *)(v257 + 48);
                if (v258 != v257 + 40)
                {
                  while (1)
                  {
                    uint64_t v259 = v258 - 24;
                    if (!v258) {
                      uint64_t v259 = 0;
                    }
                    int v260 = *(unsigned __int8 *)(v259 + 16);
                    if (v260 == 84) {
                      uint64_t v261 = v259;
                    }
                    else {
                      uint64_t v261 = 0;
                    }
                    if (v258 && v260 == 84 && (*(_WORD *)(v261 + 18) & 3u) - 1 <= 1)
                    {
                      int v262 = *(_DWORD *)(v261 + 20);
                      if ((v262 & 0x40000000) != 0)
                      {
                        int v264 = *(const char ***)(v261 - 8);
                        uint64_t v263 = v262 & 0x7FFFFFF;
                      }
                      else
                      {
                        uint64_t v263 = v262 & 0x7FFFFFF;
                        int v264 = (const char **)(v261 - 32 * v263);
                      }
                      if (v263)
                      {
                        uint64_t v265 = 32 * v263;
                        while (1)
                        {
                          int v289 = *v264;
                          uint64_t v290 = -1;
                          long long v291 = 0u;
                          long long v292 = 0u;
                          v293 = v249 + 8;
                          uint64_t v294 = -1;
                          memset(v295, 0, 32);
                          if (llvm::AAResults::alias(a3, (uint64_t)&v289, (uint64_t)&v293)) {
                            break;
                          }
                          v264 += 4;
                          v265 -= 32;
                          if (!v265) {
                            goto LABEL_521;
                          }
                        }
                        __int16 v266 = *(_WORD *)(v261 + 18);
                        if ((v266 & 3) != 2) {
                          *(_WORD *)(v261 + 18) = v266 & 0xFFFC;
                        }
                      }
                    }
LABEL_521:
                    uint64_t v258 = *(void *)(v258 + 8);
                    uint64_t v267 = k - 24;
                    if (!k) {
                      uint64_t v267 = 0;
                    }
                    if (v258 == v267 + 40) {
                      break;
                    }
LABEL_528:
                    if (k == v255) {
                      goto LABEL_529;
                    }
                  }
                  while (1)
                  {
                    uint64_t k = *(void *)(k + 8);
                    if (k == v255) {
                      goto LABEL_529;
                    }
                    uint64_t v268 = k - 24;
                    if (!k) {
                      uint64_t v268 = 0;
                    }
                    uint64_t v258 = *(void *)(v268 + 48);
                    if (v258 != v268 + 40) {
                      goto LABEL_528;
                    }
                  }
                }
              }
LABEL_529:
              sub_1CD2C7060(v275, 1);
            }
          }
        }
      }
    }
  }
}

void *sub_1CD2CD298(void *a1)
{
  uint64_t v2 = (void *)a1[27];
  if (v2 != (void *)a1[26]) {
    free(v2);
  }
  sub_1CD4B24BC((uint64_t)(a1 + 23));
  MEMORY[0x1D25D9CD0](a1[23], 8);
  uint64_t v3 = (void *)a1[17];
  if (v3 != a1 + 19) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[14];
  if (v4 != a1 + 16) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[11];
  if (v5 != a1 + 13) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[5];
  if (v6 != a1 + 7) {
    free(v6);
  }
  return a1;
}

void sub_1CD2CD334(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CD2CD3D4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBD001A8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F264AB40;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD001B0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD2CD334;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBD001B0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL sub_1CD2CD488(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 36;
}

BOOL sub_1CD2CD4D4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 48;
}

llvm::detail::IEEEFloat *sub_1CD2CD520(llvm::detail::IEEEFloat *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(llvm::Constant ****)a2;
    uint64_t v6 = ***(llvm::Constant ****)a2;
    if (*(llvm::Constant **)result != v6)
    {
      uint64_t result = sub_1CC56C0C0((llvm *)0x31, result, v6, 0);
      uint64_t v2 = *(unsigned int *)(a2 + 8);
      if (!v2) {
        return result;
      }
      uint64_t v4 = result;
      uint64_t v5 = *(llvm::Constant ****)a2;
    }
    uint64_t v7 = &v5[v2];
    do
    {
      uint64_t v8 = (llvm::Instruction *)*v5++;
      uint64_t result = (llvm::detail::IEEEFloat *)llvm::replaceAndRecursivelySimplify(v8, v4, 0, 0, 0, 0);
    }
    while (v5 != v7);
  }
  return result;
}

BOOL sub_1CD2CD5B4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 21;
}

BOOL sub_1CD2CD600(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 47;
}

void sub_1CD2CD64C()
{
}

void sub_1CD2CD688(llvm::Pass *this)
{
  *(void *)this = &unk_1F264AB40;
  uint64_t v2 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = (void *)v2[27];
    if (v3 != (void *)v2[26]) {
      free(v3);
    }
    sub_1CD4B24BC((uint64_t)(v2 + 23));
    MEMORY[0x1D25D9CD0](v2[23], 8);
    uint64_t v4 = (void *)v2[17];
    if (v4 != v2 + 19) {
      free(v4);
    }
    uint64_t v5 = (void *)v2[14];
    if (v5 != v2 + 16) {
      free(v5);
    }
    uint64_t v6 = (void *)v2[11];
    if (v6 != v2 + 13) {
      free(v6);
    }
    uint64_t v7 = (void *)v2[5];
    if (v7 != v2 + 7) {
      free(v7);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10E0C40A43390BELL);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CD2CD774(llvm::Pass *this)
{
  *(void *)this = &unk_1F264AB40;
  uint64_t v2 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = (void *)v2[27];
    if (v3 != (void *)v2[26]) {
      free(v3);
    }
    sub_1CD4B24BC((uint64_t)(v2 + 23));
    MEMORY[0x1D25D9CD0](v2[23], 8);
    uint64_t v4 = (void *)v2[17];
    if (v4 != v2 + 19) {
      free(v4);
    }
    uint64_t v5 = (void *)v2[14];
    if (v5 != v2 + 16) {
      free(v5);
    }
    uint64_t v6 = (void *)v2[11];
    if (v6 != v2 + 13) {
      free(v6);
    }
    uint64_t v7 = (void *)v2[5];
    if (v7 != v2 + 7) {
      free(v7);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10E0C40A43390BELL);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD2CD874()
{
  return "Coroutine Elision";
}

uint64_t sub_1CD2CD884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v3[0] = xmmword_1E685A978;
  v3[1] = *(_OWORD *)&off_1E685A988;
  if (sub_1CD2C7004(a2, (uint64_t)v3, 2)) {
    operator new();
  }
  return 0;
}

void sub_1CD2CDA20(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CD2CDA70(uint64_t a1, void *a2)
{
  v67[1] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v4 = a2[14];
  if (!v4 || !*(_DWORD *)(v4 + 8) || (uint64_t v5 = *(void *)(v4 + 40)) == 0)
  {
LABEL_30:
    uint64_t v6 = 0;
    goto LABEL_31;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 40);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 24);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v62 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v62 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v62;
      __cxa_guard_release(&qword_1EBCBE588);
    }
    uint64_t v8 = __ROR8__(qword_1EBCBE580 ^ 0x7A48DC6FE7EA5090, 30);
    unint64_t v9 = 0x9DDFEA08EB382D69
       * ((qword_1EBCBE580 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                     * ((v8 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580
                                                                                     - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580 - 0x2D69957673248ED7))));
    unsigned int v10 = -348639895 * ((v9 >> 47) ^ v9);
    for (int i = 1; ; ++i)
    {
      unsigned int v12 = v10 & (v6 - 1);
      BOOL v13 = (uint64_t *)(v7 + 24 * v12);
      uint64_t v14 = *v13;
      if (*v13 == -1)
      {
        if ("coroutine.presplit" == (char *)-1) {
          goto LABEL_24;
        }
      }
      else if (v14 == -2)
      {
        if ("coroutine.presplit" == (char *)-2) {
          goto LABEL_24;
        }
      }
      else if (v13[1] == 18)
      {
        BOOL v15 = *(void *)v14 == 0x6E6974756F726F63 && *(void *)(v14 + 8) == 0x6C70736572702E65;
        if (v15 && *(_WORD *)(v14 + 16) == 29801)
        {
LABEL_24:
          uint64_t v65 = v67;
          uint64_t v66 = 0x100000000;
          unint64_t v17 = a2 + 9;
          for (uint64_t j = (void *)a2[10]; ; uint64_t j = (void *)j[1])
          {
            if (j == v17) {
              goto LABEL_87;
            }
            uint64_t v19 = j - 3;
            if (!j) {
              uint64_t v19 = 0;
            }
            uint64_t v20 = (void *)v19[6];
            if (v20 != v19 + 5) {
              break;
            }
          }
          while (1)
          {
            if (v20) {
              uint64_t v40 = (uint64_t)(v20 - 3);
            }
            else {
              uint64_t v40 = 0;
            }
            BOOL v41 = sub_1CD2CD600(v40);
            if (!v41) {
              uint64_t v40 = 0;
            }
            if (v20 && v41)
            {
              uint64_t v42 = *(void *)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF) + 32);
              unsigned int v43 = *(_DWORD *)(v42 + 32);
              if (v43 > 0x40) {
                LODWORD(v42) = **(_DWORD **)(v42 + 24);
              }
              else {
                uint64_t v42 = (uint64_t)(*(void *)(v42 + 24) << -(char)v43) >> -(char)v43;
              }
              if (v42 == -1)
              {
                if (v66 >= (unint64_t)HIDWORD(v66)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v65 + v66) = v40;
                LODWORD(v66) = v66 + 1;
              }
            }
            uint64_t v20 = (void *)v20[1];
            uint64_t v44 = j - 3;
            if (!j) {
              uint64_t v44 = 0;
            }
            if (v20 == v44 + 5) {
              break;
            }
LABEL_69:
            if (j == v17) {
              goto LABEL_70;
            }
          }
          while (1)
          {
            uint64_t j = (void *)j[1];
            if (j == v17) {
              break;
            }
            int v45 = j - 3;
            if (!j) {
              int v45 = 0;
            }
            uint64_t v20 = (void *)v45[6];
            if (v20 != v45 + 5) {
              goto LABEL_69;
            }
          }
LABEL_70:
          if (!v66)
          {
LABEL_87:
            uint64_t v6 = 0;
            goto LABEL_93;
          }
          uint64_t v46 = *(void *)(a2[5] + 112);
          unsigned int v47 = *(_DWORD *)(v46 + 32);
          if (v47 <= 1) {
            uint64_t v48 = 1;
          }
          else {
            uint64_t v48 = v47;
          }
          if (v47 <= 0x12) {
            size_t v49 = v48;
          }
          else {
            size_t v49 = 19;
          }
          uint64_t v64 = *(uint64_t **)(a2[5] + 112);
          uint64_t v50 = *(unsigned int *)(v46 + 8);
          if (v50)
          {
            uint64_t v51 = 0;
            int v52 = 0;
            do
              int v52 = 33 * v52 + aCoroDevirtTrig[v51++];
            while (v49 != v51);
            unsigned int v53 = v50 - 1;
            uint64_t v54 = *v64;
            uint64_t v63 = *(unsigned int *)(v46 + 8);
            uint64_t v55 = *v64 + 8 * v50 + 8;
            int v56 = 1;
            int v57 = v52;
            while (1)
            {
              uint64_t v58 = v57 & v53;
              unsigned int v59 = *(void **)(v54 + 8 * v58);
              if (v59 != (void *)-8)
              {
                if (!v59) {
                  goto LABEL_91;
                }
                if (*(_DWORD *)(v55 + 4 * v58) == v52
                  && v49 == *v59
                  && !memcmp("coro.devirt.trigger", (char *)v59 + *((unsigned int *)v64 + 5), v49))
                {
                  break;
                }
              }
              int v57 = v56 + v58;
              ++v56;
            }
            if (v58 == -1
              || (int)v58 == v63
              || (uint64_t v60 = *(void *)(*(void *)(v54 + 8 * (int)v58) + 8)) == 0)
            {
LABEL_91:
              uint64_t v61 = 0;
              goto LABEL_92;
            }
            if (*(unsigned char *)(v60 + 16)) {
              uint64_t v61 = 0;
            }
            else {
              uint64_t v61 = *(llvm::detail::IEEEFloat **)(*(void *)(v54 + 8 * (int)v58) + 8);
            }
          }
          else
          {
            uint64_t v61 = 0;
          }
LABEL_92:
          sub_1CD2CD520(v61, (uint64_t)&v65);
          uint64_t v6 = 1;
LABEL_93:
          if (v65 != v67) {
            free(v65);
          }
          break;
        }
      }
      if (v14 == -1) {
        goto LABEL_30;
      }
      unsigned int v10 = i + v12;
    }
  }
LABEL_31:
  uint64_t v21 = *(llvm::SmallPtrSetImplBase **)(a1 + 32);
  *((_DWORD *)v21 + 12) = 0;
  sub_1CD2CB708(v21, (uint64_t)a2);
  if (*(_DWORD *)(*(void *)(a1 + 32) + 48))
  {
    uint64_t v22 = *(uint64_t **)(a1 + 8);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    if (v23 == v24)
    {
LABEL_35:
      uint64_t v25 = 0;
    }
    else
    {
      while (*(char **)v23 != llvm::AAResultsWrapperPass::ID)
      {
        v23 += 16;
        if (v23 == v24) {
          goto LABEL_35;
        }
      }
      uint64_t v25 = *(void *)(v23 + 8);
    }
    uint64_t v26 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v25 + 96))(v25, llvm::AAResultsWrapperPass::ID);
    BOOL v27 = *(uint64_t **)(a1 + 8);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    if (v28 == v29)
    {
LABEL_41:
      uint64_t v30 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v28 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v28 += 16;
        if (v28 == v29) {
          goto LABEL_41;
        }
      }
      uint64_t v30 = *(void *)(v28 + 8);
    }
    uint64_t v31 = *(void *)(v26 + 32);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v30 + 96))(v30, &llvm::DominatorTreeWrapperPass::ID);
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v34 = *(unsigned int *)(v33 + 48);
    if (v34)
    {
      uint64_t v35 = (llvm::DominatorTree *)(v32 + 32);
      uint64_t v36 = *(void ***)(v33 + 40);
      uint64_t v37 = 8 * v34;
      do
      {
        uint64_t v38 = *v36++;
        sub_1CD2CBA58(*(void *)(a1 + 32), v38, v31, v35);
        v37 -= 8;
      }
      while (v37);
      return 1;
    }
  }
  return v6;
}

llvm *sub_1CD2CE04C(llvm *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8 = llvm::dbgs(a1);
  unint64_t v9 = (void *)*((void *)v8 + 4);
  if (a3 <= *((void *)v8 + 3) - (void)v9)
  {
    if (a3)
    {
      memcpy(v9, a2, a3);
      unint64_t v9 = (void *)(*((void *)v8 + 4) + a3);
      *((void *)v8 + 4) = v9;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, (const char *)a2, a3);
    unint64_t v9 = (void *)*((void *)v8 + 4);
  }
  if (*((void **)v8 + 3) == v9)
  {
    unint64_t v9 = llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    *(unsigned char *)unint64_t v9 = 58;
    ++*((void *)v8 + 4);
  }
  uint64_t v10 = *(unsigned int *)(a4 + 64);
  if (v10)
  {
    uint64_t v13 = 0;
    while (1)
    {
      if ((*(void *)(*(void *)a4 + 8 * (v13 >> 6)) >> v13))
      {
        unint64_t v9 = llvm::dbgs((llvm *)v9);
        uint64_t v14 = (llvm::raw_ostream *)v9;
        BOOL v15 = (unsigned char *)v9[4];
        if ((unsigned char *)v9[3] == v15)
        {
          unint64_t v9 = llvm::raw_ostream::write((llvm::raw_ostream *)v9, " ", 1uLL);
        }
        else
        {
          *BOOL v15 = 32;
          ++v9[4];
        }
        BOOL v16 = *(uint64_t ****)(*(void *)a1 + 8 * v13);
        if ((*((unsigned char *)v16 + 23) & 0x10) != 0) {
          break;
        }
      }
LABEL_14:
      if (++v13 == v10) {
        goto LABEL_8;
      }
    }
    uint64_t v17 = ***v16;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      uint64_t v21 = (uint64_t ****)(v18 + 16 * v20);
      uint64_t v22 = *v21;
      if (*v21 == v16) {
        goto LABEL_26;
      }
      int v23 = 1;
      while (v22 != (uint64_t ***)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        uint64_t v22 = *(uint64_t ****)(v18 + 16 * v20);
        if (v22 == v16)
        {
          uint64_t v21 = (uint64_t ****)(v18 + 16 * v20);
          goto LABEL_26;
        }
      }
    }
    uint64_t v21 = (uint64_t ****)(v18 + 16 * v19);
LABEL_26:
    uint64_t v25 = (size_t *)v21[1];
    size_t v28 = *v25;
    uint64_t v26 = v25 + 2;
    size_t v27 = v28;
    unint64_t v9 = (void *)*((void *)v14 + 4);
    if (v28 <= *((void *)v14 + 3) - (void)v9)
    {
      if (v27)
      {
        unint64_t v9 = memcpy(v9, v26, v27);
        *((void *)v14 + 4) += v27;
      }
    }
    else
    {
      unint64_t v9 = llvm::raw_ostream::write(v14, (const char *)v26, v27);
    }
    goto LABEL_14;
  }
LABEL_8:
  uint64_t result = llvm::dbgs((llvm *)v9);
  unsigned int v12 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v12)
  {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *unsigned int v12 = 10;
    ++*((void *)result + 4);
  }
  return result;
}

llvm *sub_1CD2CE2A0(unsigned int *a1)
{
  uint64_t v1 = a1[70];
  if (v1)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(uint64_t ****)(*(void *)v4 + 8 * v5);
      uint64_t v7 = llvm::dbgs((llvm *)a1);
      uint64_t v8 = v7;
      if ((*((unsigned char *)v6 + 23) & 0x10) != 0) {
        break;
      }
      int v23 = (void *)((char *)v7 + 32);
      uint64_t v22 = (_WORD *)*((void *)v7 + 4);
      uint64_t v21 = (void *)((char *)v8 + 24);
LABEL_19:
      if (*v21 - (void)v22 > 1uLL)
      {
        *uint64_t v22 = 2618;
        *v23 += 2;
      }
      else
      {
        llvm::raw_ostream::write(v8, ":\n", 2uLL);
      }
      sub_1CD2CE04C((llvm *)v4, "   Consumes", 0xBuLL, *((void *)v4 + 34) + 152 * v5);
      a1 = (unsigned int *)sub_1CD2CE04C((llvm *)v4, "      Kills", 0xBuLL, *((void *)v4 + 34) + 152 * v5++ + 72);
      if (v5 == v1) {
        goto LABEL_2;
      }
    }
    uint64_t v9 = ***v6;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v13 == v6) {
        goto LABEL_15;
      }
      int v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v6)
        {
          uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_15;
        }
      }
    }
    uint64_t v13 = (uint64_t ****)(v10 + 16 * v11);
LABEL_15:
    uint64_t v17 = (size_t *)v13[1];
    size_t v20 = *v17;
    uint64_t v18 = v17 + 2;
    size_t v19 = v20;
    uint64_t v21 = (void *)((char *)v7 + 24);
    int v23 = (void *)((char *)v7 + 32);
    uint64_t v22 = (_WORD *)*((void *)v7 + 4);
    if (v20 <= *((void *)v8 + 3) - (void)v22)
    {
      if (v19)
      {
        memcpy(v22, v18, v19);
        uint64_t v22 = (_WORD *)(*v23 + v19);
        void *v23 = v22;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, (const char *)v18, v19);
      uint64_t v22 = (_WORD *)*((void *)v8 + 4);
    }
    goto LABEL_19;
  }
LABEL_2:
  uint64_t result = llvm::dbgs((llvm *)a1);
  uint64_t v3 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v3)
  {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *uint64_t v3 = 10;
    ++*((void *)result + 4);
  }
  return result;
}

void sub_1CD2CE4C4(_DWORD *a1, uint64_t a2, char a3)
{
  v104[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t ***)(*(void *)(a2 + 40) + 56);
  uint64_t v7 = **v6;
  uint64_t v89 = v91;
  uint64_t v90 = 0x200000000;
  uint64_t v94 = v7;
  uint64_t v95 = &v103;
  uint64_t v96 = v104;
  uint64_t v97 = 0;
  int v98 = 0;
  __int16 v99 = 512;
  char v100 = 7;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = &unk_1F2616E88;
  v104[0] = &unk_1F2617008;
  uint64_t v8 = v6[10];
  uint64_t v9 = v8 - 3;
  if (!v8) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (uint64_t)(v9 + 5);
  for (uint64_t i = v9[6]; i != v10; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v12 = i - 24;
    if (!i) {
      uint64_t v12 = 0;
    }
    if (*(unsigned char *)(v12 + 16) != 83)
    {
      unsigned int v13 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v14 = v13 > 0x38;
      uint64_t v15 = (1 << v13) & 0x100060000000001;
      if (v14 || v15 == 0) {
        uint64_t v10 = i;
      }
      else {
        uint64_t v10 = *(void *)(i + 8);
      }
      break;
    }
  }
  uint64_t v84 = v10;
  if (sub_1CC82F368(&v84))
  {
    do
      uint64_t v84 = *(void *)(v84 + 8);
    while ((sub_1CC82F368(&v84) & 1) != 0);
  }
  uint64_t v17 = v6[10];
  if (v17) {
    uint64_t v18 = (uint64_t)(v17 - 3);
  }
  else {
    uint64_t v18 = 0;
  }
  sub_1CBF5385C((uint64_t)&v89, v18, v84);
  size_t v19 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  size_t v20 = *(unsigned __int8 **)(*v19 + 24);
  int v21 = *v20;
  if ((v21 - 4) < 0x1C || (v21 - 33) < 2) {
    goto LABEL_21;
  }
  uint64_t v22 = v19[8];
  if (v21 == 32) {
    size_t v20 = (unsigned __int8 *)**((void **)v20 + 3);
  }
  appended = *(llvm::DIExpression **)(v22 + 24);
  int v24 = *(_DWORD *)(*(void *)(a2 - 32) + 36);
  unsigned int v83 = (llvm::Instruction *)*((void *)v20 + 16);
  unint64_t v80 = v83;
  if (!v83) {
    goto LABEL_21;
  }
  BOOL v25 = v24 != 58;
  uint64_t v26 = v83;
  while (1)
  {
    unsigned int v27 = *((unsigned __int8 *)v26 + 16);
    if (v27 < 0x1C) {
      break;
    }
    switch(v27)
    {
      case 'S':
        int v28 = *((_DWORD *)v26 + 5);
        if ((v28 & 0x7FFFFFF) != 1) {
          goto LABEL_21;
        }
        if ((v28 & 0x40000000) != 0) {
          uint64_t v29 = (llvm::Instruction **)*((void *)v26 - 1);
        }
        else {
          uint64_t v29 = (llvm::Instruction **)((char *)v26 - 32);
        }
        uint64_t v26 = *v29;
        goto LABEL_43;
      case '=':
        uint64_t v26 = (llvm::Instruction *)*((void *)v26 - 8);
LABEL_43:
        unsigned int v83 = v26;
        break;
      case '<':
        uint64_t v26 = (llvm::Instruction *)*((void *)v26 - 4);
        unsigned int v83 = v26;
        if (!v25) {
          appended = llvm::DIExpression::prepend(appended, (const llvm::DIExpression *)1, 0);
        }
        break;
      default:
        unint64_t v85 = v87;
        uint64_t v86 = 0x1000000000;
        uint64_t v81 = &v83;
        uint64_t v82 = 0;
        if (appended) {
          unint64_t NumLocationOperands = llvm::DIExpression::getNumLocationOperands(appended);
        }
        else {
          unint64_t NumLocationOperands = 0;
        }
        uint64_t v31 = llvm::salvageDebugInfoImpl(v26, NumLocationOperands, (unsigned int *)&v85, (uint64_t)&v81);
        if (v31) {
          BOOL v32 = v82 == 0;
        }
        else {
          BOOL v32 = 0;
        }
        int v33 = !v32;
        if (v32)
        {
          unsigned int v83 = (llvm::Instruction *)v31;
          appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v85, v86, 0, 0);
        }
        if (v81 != &v83) {
          free(v81);
        }
        if (v85 != v87) {
          free(v85);
        }
        uint64_t v26 = v83;
        if (v33)
        {
          if (!v83) {
            goto LABEL_21;
          }
          goto LABEL_62;
        }
        break;
    }
    BOOL v25 = 0;
    if (!v26) {
      goto LABEL_21;
    }
  }
LABEL_62:
  if ((a3 & 1) != 0
    || byte_1EBD00238
    || *((unsigned char *)v26 + 16) != 21
    || (uint64_t v34 = *(void *)(*((void *)v26 + 3) + 112)) != 0
    && (unsigned int v35 = *((_DWORD *)v26 + 8) + 2, v35 < *(_DWORD *)(v34 + 8))
    && (uint64_t v63 = *(void *)(v34 + 8 * v35 + 40)) != 0
    && (*(unsigned char *)(v63 + 19) & 0x40) != 0)
  {
    uint64_t v37 = v26;
    goto LABEL_92;
  }
  uint64_t v36 = sub_1CD68C958(a1, (uint64_t *)&v83);
  uint64_t v37 = (llvm::Instruction *)v36[1];
  if (!v37)
  {
    uint64_t v38 = v36;
    uint64_t v39 = *(llvm::Type **)v26;
    if ((*((unsigned char *)v26 + 23) & 0x10) != 0)
    {
      uint64_t v40 = **(void **)v39;
      uint64_t v41 = *(void *)(v40 + 152);
      uint64_t v42 = *(unsigned int *)(v40 + 168);
      if (!v42) {
        goto LABEL_75;
      }
      LODWORD(v43) = (v42 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      uint64_t v44 = (llvm::Instruction **)(v41 + 16 * v43);
      int v45 = *v44;
      if (*v44 != v26)
      {
        int v46 = 1;
        while (v45 != (llvm::Instruction *)-4096)
        {
          int v47 = v43 + v46++;
          uint64_t v43 = v47 & (v42 - 1);
          int v45 = *(llvm::Instruction **)(v41 + 16 * v43);
          if (v45 == v26)
          {
            uint64_t v44 = (llvm::Instruction **)(v41 + 16 * v43);
            goto LABEL_76;
          }
        }
LABEL_75:
        uint64_t v44 = (llvm::Instruction **)(v41 + 16 * v42);
      }
LABEL_76:
      uint64_t v48 = v44[1];
      uint64_t v51 = *(void *)v48;
      size_t v49 = (char *)v48 + 16;
      uint64_t v50 = v51;
    }
    else
    {
      uint64_t v50 = 0;
      size_t v49 = &byte_1CFBCE98E;
    }
    __int16 v88 = 773;
    unint64_t v85 = v49;
    uint64_t v86 = v50;
    v87[0] = ".debug";
    int v52 = sub_1CD63F438((uint64_t)&v89, v39, 0, 0, (uint64_t)&v85);
    v38[1] = v52;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v92 + 56) + 40) + 272), *(llvm::Type **)v26, 1);
    uint64_t v54 = (char *)operator new(0x80uLL);
    *((_DWORD *)v54 + 21) = *((_DWORD *)v54 + 21) & 0x38000000 | 2;
    *(void *)uint64_t v54 = 0;
    *((void *)v54 + 2) = 0;
    *((void *)v54 + 1) = 0;
    *((void *)v54 + 5) = 0;
    *((void *)v54 + 6) = 0;
    *((void *)v54 + 4) = 0;
    uint64_t v55 = (llvm::Instruction **)(v54 + 32);
    *((void *)v54 + 8) = ***(void ***)v26 + 1576;
    int v56 = (llvm::Instruction *)(v54 + 64);
    *((void *)v54 + 3) = v54 + 64;
    *((void *)v54 + 7) = v54 + 64;
    *((void *)v54 + 9) = 0;
    v54[80] = 61;
    v54[81] = 0;
    *((_WORD *)v54 + 41) = 0;
    *((_DWORD *)v54 + 21) = 2;
    *(_OWORD *)(v54 + 88) = 0u;
    *(_OWORD *)(v54 + 104) = 0u;
    *((_DWORD *)v54 + 30) = 0;
    *(void *)uint64_t v54 = v26;
    uint64_t v59 = *((void *)v26 + 1);
    uint64_t v58 = (void *)((char *)v26 + 8);
    uint64_t v57 = v59;
    *((void *)v54 + 1) = v59;
    if (v59) {
      *(void *)(v57 + 16) = v54 + 8;
    }
    *((void *)v54 + 2) = v58;
    *uint64_t v58 = v54;
    if (*((void *)v54 + 4))
    {
      **((void **)v54 + 6) = *((void *)v54 + 5);
      uint64_t v79 = *((void *)v54 + 5);
      if (v79) {
        *(void *)(v79 + 16) = *((void *)v54 + 6);
      }
    }
    *uint64_t v55 = v52;
    if (v52)
    {
      uint64_t v62 = *((void *)v52 + 1);
      uint64_t v61 = (llvm::Instruction ***)((char *)v52 + 8);
      uint64_t v60 = v62;
      *((void *)v54 + 5) = v62;
      if (v62) {
        *(void *)(v60 + 16) = v54 + 40;
      }
      *((void *)v54 + 6) = v61;
      *uint64_t v61 = v55;
    }
    *((_WORD *)v54 + 41) = 2 * (Alignment & 0x3F);
    v54[124] = 1;
    __int16 v88 = 257;
    (*(void (**)(void *, llvm::Instruction *, void **, uint64_t, uint64_t))(*v96 + 16))(v96, v56, &v85, v92, v93);
    if (v90)
    {
      uint64_t v77 = (llvm::MDNode **)v89;
      uint64_t v78 = (llvm::MDNode **)((char *)v89 + 16 * v90);
      do
      {
        llvm::Instruction::setMetadata(v56, *(_DWORD *)v77, v77[1]);
        v77 += 2;
      }
      while (v77 != v78);
    }
    uint64_t v37 = (llvm::Instruction *)v38[1];
  }
  unsigned int v83 = v37;
  if (appended && llvm::DIExpression::isComplex(appended)) {
    appended = llvm::DIExpression::prepend(appended, (const llvm::DIExpression *)1, 0);
  }
LABEL_92:
  llvm::DbgVariableIntrinsic::replaceVariableLocationOp((uint64_t **)a2, v80, v37);
  sub_1CD4FB76C(a2, (uint64_t)appended);
  int v64 = *(_DWORD *)(*(void *)(a2 - 32) + 36);
  if (v64 != 55 && v64 != 58)
  {
    unsigned int v65 = *((unsigned __int8 *)v83 + 16);
    if (v83 && v65 == 33)
    {
      uint64_t v66 = *((void *)v83 - 12);
      uint64_t v67 = v66 + 40;
      for (uint64_t j = *(void *)(v66 + 48); j != v67; uint64_t j = *(void *)(j + 8))
      {
        FirstNonPHIOrDbg = (char *)(j - 24);
        if (j) {
          uint64_t v70 = j - 24;
        }
        else {
          uint64_t v70 = 0;
        }
        if (*(unsigned char *)(v70 + 16) != 83) {
          goto LABEL_120;
        }
      }
      goto LABEL_125;
    }
    if (v83 && v65 == 39)
    {
      uint64_t v71 = *((void *)v83 - 4 * *((unsigned int *)v83 + 20) - 8);
      uint64_t v72 = v71 + 40;
      for (uint64_t k = *(void *)(v71 + 48); k != v72; uint64_t k = *(void *)(k + 8))
      {
        FirstNonPHIOrDbg = (char *)(k - 24);
        if (k) {
          uint64_t v74 = k - 24;
        }
        else {
          uint64_t v74 = 0;
        }
        if (*(unsigned char *)(v74 + 16) != 83) {
          goto LABEL_120;
        }
      }
LABEL_125:
      FirstNonPHIOrDbg = 0;
LABEL_120:
      llvm::Instruction::moveBefore((llvm::Instruction *)a2, (llvm::Instruction *)FirstNonPHIOrDbg);
    }
    else if (v83 && v65 >= 0x1C)
    {
      llvm::Instruction::moveAfter((llvm::Instruction *)a2, v83);
    }
    else if (v65 == 21)
    {
      uint64_t v75 = v6[10];
      if (v75) {
        uint64_t v76 = (llvm::BasicBlock *)(v75 - 3);
      }
      else {
        uint64_t v76 = 0;
      }
      FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v76, 1);
      goto LABEL_120;
    }
  }
LABEL_21:
  if (v89 != v91) {
    free(v89);
  }
}

void sub_1CD2CEC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v10 = v8;
  uint64_t v1481 = *MEMORY[0x1E4F143B8];
  BOOL v11 = v9[50] == 3 && v9[32] == 0;
  uint64_t v1290 = (uint64_t)v9;
  v1279 = (llvm::Function *)v8;
  if (v11)
  {
    v1278 = v9 + 66;
LABEL_104:
    uint64_t v80 = v9[4];
    if (!v80)
    {
LABEL_105:
      __base = &v1370;
      uint64_t v1369 = 0x2000000000;
      uint64_t v81 = v10 + 72;
      uint64_t v82 = *(void *)(v10 + 80);
      if (v82 != v81)
      {
        unsigned int v83 = 0;
        do
        {
          uint64_t v84 = v82 - 24;
          if (!v82) {
            uint64_t v84 = 0;
          }
          if (*(void *)(v84 + 40) != v84 + 40)
          {
            for (uint64_t i = *(void *)(v84 + 48); ; uint64_t i = *(void *)(i + 8))
            {
              uint64_t v86 = i ? i - 24 : 0;
              if (!i || *(unsigned char *)(v86 + 16) != 83 || (*(_DWORD *)(i - 4) & 0x7FFFFFF) != 1) {
                break;
              }
              if (v83 >= HIDWORD(v1369)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__base + v83) = i - 24;
              unsigned int v83 = v1369 + 1;
              LODWORD(v1369) = v1369 + 1;
            }
          }
          uint64_t v82 = *(void *)(v82 + 8);
        }
        while (v82 != v81);
        if (v83)
        {
          do
          {
            uint64_t v87 = (_DWORD *)*((void *)__base + v83 - 1);
            LODWORD(v1369) = v83 - 1;
            int v88 = v87[5];
            if ((v88 & 0x40000000) != 0) {
              uint64_t v89 = (llvm::Value **)*((void *)v87 - 1);
            }
            else {
              uint64_t v89 = (llvm::Value **)&v87[-8 * (v88 & 0x7FFFFFF)];
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v87, *v89, (llvm::Value *)1);
            unsigned int v83 = v1369;
          }
          while (v1369);
        }
      }
      if (__base != &v1370) {
        free(__base);
      }
      v1390 = &v1392;
      v1391 = (void *)0x800000000;
      uint64_t v90 = *((void *)v1279 + 10);
      uint64_t v1283 = v81;
      if (v90 != v81)
      {
        unsigned int v91 = 0;
        do
        {
          if (v90) {
            uint64_t v92 = v90 - 24;
          }
          else {
            uint64_t v92 = 0;
          }
          uint64_t v93 = *(void *)(v92 + 48);
          if (v93 && *(unsigned char *)(v93 - 8) == 83 && (*(_DWORD *)(v93 - 4) & 0x7FFFFFE) != 0)
          {
            if (v91 >= HIDWORD(v1391)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1390 + v91) = v92;
            unsigned int v91 = v1391 + 1;
            LODWORD(v1391) = v1391 + 1;
          }
          uint64_t v90 = *(void *)(v90 + 8);
        }
        while (v90 != v81);
        uint64_t v124 = (unint64_t *)v1390;
        if (v91)
        {
          v1300 = (unint64_t *)((char *)v1390 + 8 * v91);
          uint64_t v4 = 0x200000000;
          do
          {
            uint64_t v125 = (llvm::BasicBlock *)*v124;
            uint64_t v126 = *v124 + 40;
            uint64_t v127 = *(void **)(*v124 + 48);
            __int16 v128 = v127;
            if (v127 == (void *)v126) {
              goto LABEL_250;
            }
            while (1)
            {
              uint64_t v129 = v128 ? (uint64_t)(v128 - 3) : 0;
              if (*(unsigned char *)(v129 + 16) != 83) {
                break;
              }
              __int16 v128 = (void *)v128[1];
              if (v128 == (void *)v126) {
                goto LABEL_238;
              }
            }
            if (*((unsigned char *)v128 - 8) == 79)
            {
              for (uint64_t j = *((void *)v125 + 1); j; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v131 = *(void *)(j + 24);
                unsigned int v132 = *(unsigned __int8 *)(v131 + 16);
                if (v131) {
                  BOOL v133 = v132 >= 0x1C;
                }
                else {
                  BOOL v133 = 0;
                }
                if (v133 && v132 - 29 < 0xB) {
                  break;
                }
              }
              __s2 = v1340;
              uint64_t v1339 = 0x800000000;
              sub_1CBF846A4((uint64_t)&__s2, j, 0);
              if (v1339)
              {
                uint64_t v135 = 0;
                do
                {
                  uint64_t v136 = *(void *)((char *)__s2 + v135);
                  uint64_t v137 = *(void *)(v136 + 40);
                  if (v137 != v136 + 40)
                  {
                    if (v137) {
                      uint64_t v138 = v137 - 24;
                    }
                    else {
                      uint64_t v138 = 0;
                    }
                    unsigned int v139 = *(unsigned __int8 *)(v138 + 16) - 40;
                    if (v139 < 0xFFFFFFF5) {
                      uint64_t v138 = 0;
                    }
                    if (v137)
                    {
                      if (*(unsigned char *)(v138 + 16) == 38 && v139 >= 0xFFFFFFF5)
                      {
                        __base = "unreachable";
                        LOWORD(v1372) = 259;
                        operator new();
                      }
                    }
                  }
                  v135 += 8;
                }
                while (8 * v1339 != v135);
              }
              if (__s2 != v1340) {
                free(__s2);
              }
              uint64_t v127 = (void *)*((void *)v125 + 6);
            }
            while (1)
            {
LABEL_238:
              if (v127 == (void *)v126) {
                goto LABEL_250;
              }
              uint64_t v141 = (uint64_t)(v127 - 3);
              uint64_t v142 = v127 ? (uint64_t)(v127 - 3) : 0;
              if (*(unsigned char *)(v142 + 16) != 83) {
                break;
              }
              uint64_t v127 = (void *)v127[1];
            }
            if (*((unsigned char *)v127 - 8) != 94)
            {
LABEL_250:
              uint64_t v141 = 0;
              uint64_t v145 = 0;
              char v1305 = 1;
            }
            else
            {
              uint64_t v143 = *(v127 - 3);
              LOWORD(v1372) = 257;
              uint64_t v144 = operator new(0x48uLL);
              v144[1] = v143;
              uint64_t v145 = (llvm::Value *)(v144 + 1);
              *uint64_t v144 = 0;
              v144[2] = 0;
              v144[3] = 0x4000000000000053;
              *((_OWORD *)v144 + 2) = 0u;
              unsigned int v146 = (char *)(v144 + 4);
              *((_OWORD *)v144 + 3) = 0u;
              *((_DWORD *)v144 + 16) = 0;
              uint64_t v147 = v127[2];
              v144[6] = v147;
              *(_WORD *)(v147 + 18) &= ~0x8000u;
              if ((*((unsigned char *)v144 + 31) & 0x10) != 0)
              {
                uint64_t v201 = *(void *)(v147 + 56);
                if (v201)
                {
                  uint64_t v202 = *(llvm::ValueSymbolTable **)(v201 + 104);
                  if (v202) {
                    llvm::ValueSymbolTable::reinsertValue(v202, v145);
                  }
                }
              }
              uint64_t v148 = *v127;
              v144[4] = *v127;
              v144[5] = v127;
              *(void *)(v148 + 8) = v146;
              *uint64_t v127 = v146;
              *((_DWORD *)v144 + 17) = 1;
              llvm::Value::setNameImpl(v145, (const char **)&__base);
              if (!*((unsigned char *)v144 + 24))
              {
                if ((*((unsigned char *)v144 + 31) & 0x10) == 0) {
                  goto LABEL_329;
                }
                uint64_t v203 = ***(void ***)v145;
                uint64_t v204 = *(void *)(v203 + 152);
                uint64_t v205 = *(unsigned int *)(v203 + 168);
                if (v205)
                {
                  LODWORD(v206) = (v205 - 1) & ((v145 >> 4) ^ (v145 >> 9));
                  unsigned int v207 = (llvm::Value **)(v204 + 16 * v206);
                  unsigned int v208 = *v207;
                  if (*v207 != v145)
                  {
                    int v209 = 1;
                    do
                    {
                      if (v208 == (llvm::Value *)-4096) {
                        goto LABEL_321;
                      }
                      int v210 = v206 + v209++;
                      uint64_t v206 = v210 & (v205 - 1);
                      unsigned int v208 = *(llvm::Value **)(v204 + 16 * v206);
                    }
                    while (v208 != v145);
                    unsigned int v207 = (llvm::Value **)(v204 + 16 * v206);
                  }
                }
                else
                {
LABEL_321:
                  unsigned int v207 = (llvm::Value **)(v204 + 16 * v205);
                }
                uint64_t v211 = v207[1];
                unint64_t v214 = *(void *)v211;
                int v212 = (char *)v211 + 16;
                unint64_t v213 = v214;
                if (v214 >= 5
                  && (*(_DWORD *)v212 == *(_DWORD *)"llvm." ? (BOOL v215 = v212[4] == aLlvm_1[4]) : (BOOL v215 = 0), v215))
                {
                  *((_DWORD *)v144 + 10) |= 0x2000u;
                  int v216 = llvm::Function::lookupIntrinsicID(v212, v213);
                }
                else
                {
LABEL_329:
                  int v216 = 0;
                  *((_DWORD *)v144 + 10) &= ~0x2000u;
                }
                *((_DWORD *)v144 + 11) = v216;
              }
              uint64_t v149 = *((unsigned int *)v144 + 17);
              uint64_t v150 = operator new(40 * v149);
              *uint64_t v144 = v150;
              if (v149)
              {
                int64_t v151 = &v150[4 * v149];
                do
                {
                  *uint64_t v150 = 0;
                  v150[1] = 0;
                  v150[2] = 0;
                  v150[3] = v145;
                  v150 += 4;
                }
                while (v150 != v151);
              }
              llvm::Value::takeName((int32x2_t ****)v145, (llvm::Value *)(v127 - 3));
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v127 - 3), v145, (llvm::Value *)1);
              char v1305 = 0;
            }
            for (uint64_t k = *((void *)v125 + 1); k; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v153 = *(void *)(k + 24);
              unsigned int v154 = *(unsigned __int8 *)(v153 + 16);
              if (v153) {
                BOOL v155 = v154 >= 0x1C;
              }
              else {
                BOOL v155 = 0;
              }
              if (v155 && v154 - 29 < 0xB) {
                break;
              }
            }
            __base = &v1370;
            uint64_t v1369 = 0x800000000;
            sub_1CBF846A4((uint64_t)&__base, k, 0);
            if (v1369)
            {
              v158 = (llvm **)__base;
              uint64_t v159 = (llvm **)((char *)__base + 8 * v1369);
              do
              {
                int v160 = *v158;
                LODWORD(v1413) = 0;
                memset(__dst, 0, sizeof(__dst));
                BYTE4(v1413) = 1;
                __int16 v1341 = 257;
                unsigned int v161 = (llvm::Value *)llvm::ehAwareSplitEdge(v160, v125, v141, (uint64_t)v145, (uint64_t)__dst, (llvm::MemorySSAUpdater *)&__s2, v157);
                uint64_t v162 = (uint64_t)v161;
                if ((*((unsigned char *)v125 + 23) & 0x10) != 0)
                {
                  uint64_t v163 = ***(void ***)v125;
                  uint64_t v164 = *(void *)(v163 + 152);
                  uint64_t v165 = *(unsigned int *)(v163 + 168);
                  if (v165)
                  {
                    LODWORD(v166) = (v165 - 1) & ((v125 >> 4) ^ (v125 >> 9));
                    int v167 = (llvm::BasicBlock **)(v164 + 16 * v166);
                    uint64_t v168 = *v167;
                    if (*v167 != v125)
                    {
                      int v169 = 1;
                      do
                      {
                        if (v168 == (llvm::BasicBlock *)-4096) {
                          goto LABEL_270;
                        }
                        int v170 = v166 + v169++;
                        uint64_t v166 = v170 & (v165 - 1);
                        uint64_t v168 = *(llvm::BasicBlock **)(v164 + 16 * v166);
                      }
                      while (v168 != v125);
                      int v167 = (llvm::BasicBlock **)(v164 + 16 * v166);
                    }
                  }
                  else
                  {
LABEL_270:
                    int v167 = (llvm::BasicBlock **)(v164 + 16 * v165);
                  }
                  uint64_t v171 = v167[1];
                  uint64_t v174 = *(void *)v171;
                  uint64_t v173 = (char *)v171 + 16;
                  uint64_t v172 = v174;
                }
                else
                {
                  uint64_t v172 = 0;
                  uint64_t v173 = &byte_1CFBCE98E;
                }
                __s2 = v173;
                uint64_t v1339 = v172;
                v1340[0] = ".from.";
                __int16 v1341 = 773;
                if ((*((unsigned char *)v160 + 23) & 0x10) != 0)
                {
                  uint64_t v175 = ***(void ***)v160;
                  uint64_t v176 = *(void *)(v175 + 152);
                  uint64_t v177 = *(unsigned int *)(v175 + 168);
                  if (v177)
                  {
                    LODWORD(v178) = (v177 - 1) & ((v160 >> 4) ^ (v160 >> 9));
                    uint64_t v179 = (llvm **)(v176 + 16 * v178);
                    int v180 = *v179;
                    if (*v179 != v160)
                    {
                      int v181 = 1;
                      do
                      {
                        if (v180 == (llvm *)-4096) {
                          goto LABEL_279;
                        }
                        int v182 = v178 + v181++;
                        uint64_t v178 = v182 & (v177 - 1);
                        int v180 = *(llvm **)(v176 + 16 * v178);
                      }
                      while (v180 != v160);
                      uint64_t v179 = (llvm **)(v176 + 16 * v178);
                    }
                  }
                  else
                  {
LABEL_279:
                    uint64_t v179 = (llvm **)(v176 + 16 * v177);
                  }
                  uint64_t v183 = v179[1];
                  unsigned int v186 = *(void **)v183;
                  BOOL v185 = (char *)v183 + 16;
                  int v184 = v186;
                }
                else
                {
                  int v184 = 0;
                  BOOL v185 = &byte_1CFBCE98E;
                }
                __dst[0] = &__s2;
                __dst[2] = v185;
                __dst[3] = v184;
                LOWORD(v1413) = 1282;
                llvm::Value::setNameImpl(v161, (const char **)__dst);
                if (v162 && !*(unsigned char *)(v162 + 16))
                {
                  if ((*(unsigned char *)(v162 + 23) & 0x10) == 0) {
                    goto LABEL_302;
                  }
                  uint64_t v187 = ***(void ***)v162;
                  uint64_t v188 = *(void *)(v187 + 152);
                  uint64_t v189 = *(unsigned int *)(v187 + 168);
                  if (v189)
                  {
                    LODWORD(v190) = (v189 - 1) & ((v162 >> 4) ^ (v162 >> 9));
                    int v191 = (uint64_t *)(v188 + 16 * v190);
                    uint64_t v192 = *v191;
                    if (*v191 != v162)
                    {
                      int v193 = 1;
                      do
                      {
                        if (v192 == -4096) {
                          goto LABEL_294;
                        }
                        int v194 = v190 + v193++;
                        uint64_t v190 = v194 & (v189 - 1);
                        uint64_t v192 = *(void *)(v188 + 16 * v190);
                      }
                      while (v192 != v162);
                      int v191 = (uint64_t *)(v188 + 16 * v190);
                    }
                  }
                  else
                  {
LABEL_294:
                    int v191 = (uint64_t *)(v188 + 16 * v189);
                  }
                  uint64_t v195 = (void *)v191[1];
                  unint64_t v198 = *v195;
                  int v196 = v195 + 2;
                  unint64_t v197 = v198;
                  if (v198 >= 5
                    && (*(_DWORD *)v196 == *(_DWORD *)"llvm." ? (BOOL v199 = v196[4] == aLlvm_1[4]) : (BOOL v199 = 0), v199))
                  {
                    *(_DWORD *)(v162 + 32) |= 0x2000u;
                    int v200 = llvm::Function::lookupIntrinsicID(v196, v197);
                  }
                  else
                  {
LABEL_302:
                    int v200 = 0;
                    *(_DWORD *)(v162 + 32) &= ~0x2000u;
                  }
                  *(_DWORD *)(v162 + 36) = v200;
                }
                sub_1CD2DA6B8((uint64_t ***)v125, v162, (uint64_t)v160, (uint64_t **)v145);
                ++v158;
              }
              while (v158 != v159);
            }
            if ((v1305 & 1) == 0) {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            uint64_t v81 = v1283;
            if (__base != &v1370) {
              free(__base);
            }
            ++v124;
          }
          while (v124 != v1300);
          uint64_t v124 = (unint64_t *)v1390;
        }
        if (v124 != &v1392) {
          free(v124);
        }
      }
      __base = &v1370;
      uint64_t v1369 = 0x2000000000;
      uint64_t v217 = *((void *)v1279 + 10);
      if (v217 == v81)
      {
        unint64_t v218 = 0;
        v1387 = v1389;
        uint64_t v1388 = 0x2000000000;
      }
      else
      {
        LODWORD(v219) = 0;
        do
        {
          if (v217) {
            uint64_t v220 = v217 - 24;
          }
          else {
            uint64_t v220 = 0;
          }
          if (v219 >= HIDWORD(v1369)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__base + v219) = v220;
          size_t v219 = (v1369 + 1);
          LODWORD(v1369) = v1369 + 1;
          uint64_t v217 = *(void *)(v217 + 8);
        }
        while (v217 != v81);
        if (v219 >= 2)
        {
          qsort(__base, v219, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CB848318);
          LODWORD(v219) = v1369;
        }
        v1387 = v1389;
        uint64_t v1388 = 0x2000000000;
        if (v219)
        {
          unsigned int v221 = v219;
          if (v219 < 0x21)
          {
            unsigned int v241 = 0;
            uint64_t v224 = v1389;
          }
          else
          {
            if (v219 <= 0x41uLL) {
              unsigned int v222 = 65;
            }
            else {
              unsigned int v222 = v219;
            }
            __int16 v223 = (char *)malloc_type_malloc(152 * v222, 0x4065EBACuLL);
            if (!v223) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            uint64_t v224 = v223;
            uint64_t v225 = (char *)v1387;
            if (v1388)
            {
              unsigned int __valb = v222;
              uint64_t v226 = 0;
              uint64_t v227 = 152 * v1388;
              do
              {
                uint64_t v228 = &v224[v226];
                unint64_t v229 = &v225[v226];
                unint64_t v230 = &v224[v226 + 16];
                *(void *)uint64_t v228 = v230;
                *((void *)v228 + 1) = 0x600000000;
                if (v225 != v224)
                {
                  unsigned int v231 = *((_DWORD *)v229 + 2);
                  if (v231)
                  {
                    uint64_t v232 = &v225[v226];
                    uint64_t v234 = (uint64_t)&v225[v226 + 16];
                    int v233 = *(const void **)&v225[v226];
                    if ((const void *)v234 == v233)
                    {
                      if (v231 >= 7) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      memcpy(v230, v233, 8 * *((unsigned int *)v229 + 2));
                      *((_DWORD *)v228 + 2) = v231;
                    }
                    else
                    {
                      int v240 = *((_DWORD *)v232 + 3);
                      *(void *)uint64_t v228 = v233;
                      *((_DWORD *)v228 + 2) = v231;
                      *((_DWORD *)v228 + 3) = v240;
                      *(void *)uint64_t v232 = v234;
                      *((_DWORD *)v232 + 3) = 0;
                    }
                    *((_DWORD *)v229 + 2) = 0;
                  }
                }
                *((_DWORD *)v228 + 16) = *((_DWORD *)v229 + 16);
                *((void *)v228 + 9) = v228 + 88;
                *((void *)v228 + 10) = 0x600000000;
                unsigned int v235 = *((_DWORD *)v229 + 20);
                if (v235 && v229 != v228)
                {
                  uint64_t v236 = *(const void **)&v225[v226 + 72];
                  uint64_t v237 = (uint64_t)&v225[v226 + 88];
                  if ((const void *)v237 == v236)
                  {
                    if (v235 >= 7) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    memcpy(v228 + 88, v236, 8 * *((unsigned int *)v229 + 20));
                    *((_DWORD *)v228 + 20) = v235;
                  }
                  else
                  {
                    int v239 = *(_DWORD *)&v225[v226 + 84];
                    *((void *)v228 + 9) = v236;
                    *((_DWORD *)v228 + 20) = v235;
                    *((_DWORD *)v228 + 21) = v239;
                    *(void *)&v225[v226 + 72] = v237;
                    *(_DWORD *)&v225[v226 + 84] = 0;
                  }
                  *((_DWORD *)v229 + 20) = 0;
                }
                unsigned int v238 = &v224[v226];
                *((_DWORD *)v238 + 34) = *(_DWORD *)&v225[v226 + 136];
                *((_WORD *)v238 + 72) = *(_WORD *)&v225[v226 + 144];
                v226 += 152;
              }
              while (v227 != v226);
              uint64_t v225 = (char *)v1387;
              unsigned int v221 = v219;
              unsigned int v222 = __valb;
              if (v1388)
              {
                uint64_t v242 = 152 * v1388;
                do
                {
                  v243 = &v225[v242];
                  uint64_t v244 = *(char **)&v225[v242 - 80];
                  if (&v225[v242 - 64] != v244) {
                    free(v244);
                  }
                  uint64_t v245 = (char *)*((void *)v243 - 19);
                  if (v243 - 136 != v245) {
                    free(v245);
                  }
                  v242 -= 152;
                }
                while (v242);
                uint64_t v225 = (char *)v1387;
              }
            }
            if (v225 != v1389) {
              free(v225);
            }
            v1387 = v224;
            HIDWORD(v1388) = v222;
            unsigned int v241 = v1388;
          }
          if (v241 != v219)
          {
            uint64_t v246 = 152 * v241;
            uint64_t v247 = 152 * v221;
            do
            {
              int v248 = &v224[v246];
              *((_OWORD *)v248 + 4) = 0uLL;
              *((_OWORD *)v248 + 5) = 0uLL;
              *((void *)v248 + 18) = 0;
              *((_OWORD *)v248 + 7) = 0uLL;
              *((_OWORD *)v248 + 8) = 0uLL;
              *((_OWORD *)v248 + 6) = 0uLL;
              *((_OWORD *)v248 + 2) = 0uLL;
              *((_OWORD *)v248 + 3) = 0uLL;
              *(_OWORD *)&v224[v246 + 16] = 0uLL;
              *(void *)int v248 = &v224[v246 + 16];
              *((void *)v248 + 1) = 0x600000000;
              *((void *)v248 + 9) = &v224[v246 + 88];
              v247 -= 152;
              v224 += 152;
              *((_DWORD *)v248 + 21) = 6;
            }
            while (v246 != v247);
          }
          uint64_t v249 = 0;
          LODWORD(v1388) = v219;
          uint64_t v250 = (v219 + 63) >> 6;
          uint64_t v251 = 136;
          do
          {
            v252 = (char *)v1387;
            uint64_t v253 = (char *)v1387 + v251;
            uint64_t v254 = (char *)v1387 + v251 - 136;
            uint64_t v255 = *(unsigned int *)((char *)v1387 + v251 - 128);
            if ((*(_DWORD *)((unsigned char *)v1387 + v251 - 72) & 0x3F) != 0) {
              *(void *)(*v254 + 8 * v255 - 8) &= ~(-1 << (*(_DWORD *)((unsigned char *)v1387 + v251 - 72) & 0x3F));
            }
            *((_DWORD *)v253 - 18) = v219;
            unsigned int v256 = (v219 + 63) >> 6;
            LOBYTE(v257) = v219;
            if (v255 != v250)
            {
              uint64_t v258 = &v252[v251];
              if (v255 > v250)
              {
                *((_DWORD *)v258 - 32) = v250;
                unsigned int v256 = (v219 + 63) >> 6;
                LOBYTE(v257) = v219;
              }
              else
              {
                if (v250 > *(_DWORD *)&v252[v251 - 124]) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v250 != v255) {
                  bzero((void *)(*v254 + 8 * v255), 8 * (v250 - v255));
                }
                unsigned int v256 = (v219 + 63) >> 6;
                *((_DWORD *)v258 - 32) = v250;
                int v257 = *((_DWORD *)v253 - 18);
              }
            }
            int v259 = v257 & 0x3F;
            if (v259) {
              *(void *)(*v254 + 8 * v256 - 8) &= ~(-1 << v259);
            }
            int v260 = &v252[v251 - 64];
            uint64_t v261 = *(unsigned int *)&v252[v251 - 56];
            if ((*(_DWORD *)&v252[v251] & 0x3F) != 0) {
              *(void *)(*(void *)v260 + 8 * v261 - 8) &= ~(-1 << (*(_DWORD *)&v252[v251] & 0x3F));
            }
            int v262 = &v252[v251];
            *(_DWORD *)&v252[v251] = v219;
            unsigned int v263 = (v219 + 63) >> 6;
            LOBYTE(v264) = v219;
            if (v261 != v250)
            {
              if (v261 > v250)
              {
                *((_DWORD *)v262 - 14) = v250;
                unsigned int v263 = (v219 + 63) >> 6;
                LOBYTE(v264) = v219;
              }
              else
              {
                if (v250 > *(_DWORD *)&v252[v251 - 52]) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v250 != v261) {
                  bzero((void *)(*(void *)v260 + 8 * v261), 8 * (v250 - v261));
                }
                unsigned int v263 = (v219 + 63) >> 6;
                *((_DWORD *)v262 - 14) = v250;
                int v264 = *(_DWORD *)&v252[v251];
              }
            }
            int v265 = v264 & 0x3F;
            if (v265) {
              *(void *)(*(void *)v260 + 8 * v263 - 8) &= ~(-1 << v265);
            }
            *(void *)(*v254 + 8 * (v249 >> 6)) |= 1 << v249;
            ++v249;
            v251 += 152;
            unint64_t v218 = v219;
          }
          while (v219 != v249);
          char __vala = 0;
          goto LABEL_415;
        }
        unint64_t v218 = 0;
      }
      char __vala = 1;
LABEL_415:
      uint64_t v266 = *(unsigned int *)(v1290 + 16);
      if (v266)
      {
        uint64_t v267 = *(void *)(v1290 + 8);
        uint64_t v268 = v267 + 8 * v266;
        v269 = __base;
        unint64_t v270 = v1369;
        v271 = v1387;
        do
        {
          if (v270)
          {
            uint64_t v272 = v269;
            unint64_t v273 = v270;
            do
            {
              unint64_t v274 = v273 >> 1;
              uint64_t v275 = (unint64_t *)&v272[8 * (v273 >> 1)];
              unint64_t v277 = *v275;
              v276 = v275 + 1;
              v273 += ~(v273 >> 1);
              if (v277 < *(void *)(*(void *)v267 + 40)) {
                uint64_t v272 = v276;
              }
              else {
                unint64_t v273 = v274;
              }
            }
            while (v273);
          }
          else
          {
            uint64_t v272 = v269;
          }
          v271[152 * ((v272 - v269) >> 3) + 145] = 1;
          v267 += 8;
        }
        while (v267 != v268);
      }
      unint64_t v1282 = v218;
      uint64_t v278 = *(unsigned int *)(v1290 + 128);
      if (v278)
      {
        int v362 = *(uint64_t **)(v1290 + 120);
        v363 = &v362[v278];
        do
        {
          uint64_t v364 = *v362;
          unint64_t v365 = v1369;
          if (v1369)
          {
            v366 = __base;
            do
            {
              unint64_t v367 = v365 >> 1;
              uint64_t v368 = (unint64_t *)&v366[8 * (v365 >> 1)];
              unint64_t v370 = *v368;
              int8x16_t v369 = v368 + 1;
              v365 += ~(v365 >> 1);
              if (v370 < *(void *)(v364 + 40)) {
                v366 = v369;
              }
              else {
                unint64_t v365 = v367;
              }
            }
            while (v365);
          }
          else
          {
            v366 = __base;
          }
          v371 = (char *)v1387 + 152 * ((v366 - (unsigned char *)__base) >> 3);
          v371[144] = 1;
          v372 = v371 + 72;
          uint64_t v373 = (unsigned int *)(v371 + 136);
          unsigned int v374 = *((_DWORD *)v371 + 16);
          if (*((_DWORD *)v371 + 34) < v374)
          {
            int v396 = *((_DWORD *)v371 + 34) & 0x3F;
            uint64_t v397 = *((unsigned int *)v371 + 20);
            if (v396) {
              *(void *)(*v372 + 8 * v397 - 8) &= ~(-1 << v396);
            }
            unsigned int v398 = v397;
            *uint64_t v373 = v374;
            unsigned int v399 = v374 + 63;
            if (v397 != (v374 + 63) >> 6)
            {
              uint64_t v400 = v399 >> 6;
              if (v397 > v400)
              {
                *((_DWORD *)v371 + 20) = v400;
                unsigned int v398 = v399 >> 6;
              }
              else
              {
                if (v400 > *((_DWORD *)v371 + 21)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v400 != v397) {
                  bzero((void *)(*v372 + 8 * v397), 8 * (v400 - v397));
                }
                unsigned int v398 = v400;
                *((_DWORD *)v371 + 20) = v400;
                unsigned int v374 = *v373;
              }
            }
            int v401 = v374 & 0x3F;
            if (v401) {
              *(void *)(*v372 + 8 * v398 - 8) &= ~(-1 << v401);
            }
          }
          uint64_t v375 = *((unsigned int *)v371 + 2);
          if (v375)
          {
            v376 = *(uint64_t **)v371;
            uint64_t v377 = (void *)*v372;
            do
            {
              uint64_t v378 = *v376++;
              *v377++ |= v378;
              --v375;
            }
            while (v375);
          }
          if (v364 && *(_DWORD *)(*(void *)(v364 - 32) + 36) == 48)
          {
            uint64_t v379 = *(void *)(v364 - 32 * (*(_DWORD *)(v364 + 20) & 0x7FFFFFF));
            BOOL v380 = sub_1CD2C9100(v379);
            if (v379 && v380)
            {
              unint64_t v382 = v1369;
              if (v1369)
              {
                v383 = __base;
                do
                {
                  unint64_t v384 = v382 >> 1;
                  char v385 = (unint64_t *)&v383[8 * (v382 >> 1)];
                  unint64_t v387 = *v385;
                  long long v386 = v385 + 1;
                  v382 += ~(v382 >> 1);
                  if (v387 < *(void *)(v379 + 40)) {
                    v383 = v386;
                  }
                  else {
                    unint64_t v382 = v384;
                  }
                }
                while (v382);
              }
              else
              {
                v383 = __base;
              }
              uint64_t v388 = (char *)v1387 + 152 * ((v383 - (unsigned char *)__base) >> 3);
              v388[144] = 1;
              v389 = v388 + 72;
              unsigned int v390 = (unsigned int *)(v388 + 136);
              unsigned int v391 = *((_DWORD *)v388 + 16);
              if (*((_DWORD *)v388 + 34) < v391)
              {
                int v402 = *((_DWORD *)v388 + 34) & 0x3F;
                uint64_t v403 = *((unsigned int *)v388 + 20);
                if (v402) {
                  *(void *)(*v389 + 8 * v403 - 8) &= ~(-1 << v402);
                }
                unsigned int v404 = v403;
                *unsigned int v390 = v391;
                unsigned int v405 = v391 + 63;
                if (v403 != (v391 + 63) >> 6)
                {
                  uint64_t v406 = v405 >> 6;
                  if (v403 > v406)
                  {
                    *((_DWORD *)v388 + 20) = v406;
                    unsigned int v404 = v405 >> 6;
                  }
                  else
                  {
                    if (v406 > *((_DWORD *)v388 + 21)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v406 != v403) {
                      bzero((void *)(*v389 + 8 * v403), 8 * (v406 - v403));
                    }
                    unsigned int v404 = v406;
                    *((_DWORD *)v388 + 20) = v406;
                    unsigned int v391 = *v390;
                  }
                }
                int v407 = v391 & 0x3F;
                if (v407) {
                  *(void *)(*v389 + 8 * v404 - 8) &= ~(-1 << v407);
                }
              }
              uint64_t v392 = *((unsigned int *)v388 + 2);
              if (v392)
              {
                v393 = *(uint64_t **)v388;
                v394 = (void *)*v389;
                do
                {
                  uint64_t v395 = *v393++;
                  *v394++ |= v395;
                  --v392;
                }
                while (v392);
              }
            }
          }
          ++v362;
        }
        while (v362 != v363);
      }
      if (__vala)
      {
LABEL_428:
        uint64_t v279 = **(void **)v1279;
        v1358 = v1360;
        uint64_t v4 = 0x200000000;
        uint64_t v1359 = 0x200000000;
        v1360[6] = v279;
        v1360[7] = &v1366;
        v1360[8] = &v1367;
        v1360[9] = 0;
        int v1361 = 0;
        __int16 v1362 = 512;
        char v1363 = 7;
        v1360[5] = 0;
        v1360[4] = 0;
        uint64_t v1365 = 0;
        uint64_t v1364 = 0;
        v1366 = &unk_1F2616E88;
        v1367 = &unk_1F2617008;
        uint64_t v5 = 1;
        __s2 = (void *)1;
        for (uint64_t m = 8; m != 136; m += 16)
          *(void **)((char *)&__s2 + m) = (void *)-4096;
        v1343 = &v1345;
        uint64_t v1344 = 0x800000000;
        v1346 = &v1348;
        uint64_t v1347 = 0x800000000;
        char v1349 = 0;
        long long v1350 = 0u;
        unsigned int v1351 = 0;
        long long v1352 = 0u;
        unsigned int v1353 = 0;
        long long v1354 = 0u;
        int v1355 = 0;
        long long v1356 = 0u;
        unsigned int v1357 = 0;
        v1335 = &v1337;
        uint64_t v1336 = 0x400000000;
        v1332 = &v1334;
        uint64_t v1333 = 0x400000000;
        uint64_t v281 = 1;
        __dst[0] = (void *)1;
        uint64_t v282 = v1283;
        do
        {
          __dst[v281] = (void *)-4096;
          v281 += 2;
        }
        while (v281 != 17);
        int v283 = 0;
        v1428 = (char *)&v1430;
        uint64_t v1429 = 0x800000000;
        uint64_t v6 = 0x1000000000;
        do
        {
          for (uint64_t n = *((void *)v1279 + 10); ; uint64_t n = *(void *)(n + 8))
          {
            if (n == v282) {
              goto LABEL_478;
            }
            uint64_t v285 = n - 24;
            if (!n) {
              uint64_t v285 = 0;
            }
            uint64_t v286 = *(void *)(v285 + 48);
            if (v286 != v285 + 40) {
              break;
            }
          }
          while (1)
          {
            if (v286) {
              uint64_t v287 = v286 - 24;
            }
            else {
              uint64_t v287 = 0;
            }
            int v288 = *(unsigned __int8 *)(v287 + 16);
            if (v288 == 85
              || (v288 != 62 ? (BOOL v289 = (v288 - 66) >= 0xD) : (BOOL v289 = 0),
                  v289 ? (BOOL v290 = (v288 - 41) >= 0x12) : (BOOL v290 = 0),
                  v290 ? (BOOL v291 = (v288 - 81) > 1) : (BOOL v291 = 0),
                  !v291))
            {
              for (iuint64_t i = *(void *)(v287 + 8); ii; iuint64_t i = *(void *)(ii + 8))
              {
                uint64_t v293 = *(void *)(ii + 24);
                if (sub_1CD2D9D84((uint64_t)&__base, v287, v293))
                {
                  v1390 = (void *)v287;
                  uint64_t v294 = sub_1CD8C59B4((uint64_t)__dst, (uint64_t *)&v1390);
                  unint64_t v295 = *(unsigned int *)(v294 + 8);
                  if (v295 >= *(unsigned int *)(v294 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v294 + 8 * v295) = v293;
                  ++*(_DWORD *)(v294 + 8);
                }
              }
              v1390 = &v1392;
              v1391 = (void *)0x1000000000;
              llvm::findDbgValues((uint64_t)&v1390, (uint64_t ***)v287);
              v296 = (uint64_t *)v1390;
              if (v1391)
              {
                uint64_t v297 = 8 * v1391;
                do
                {
                  uint64_t v298 = *v296;
                  if (sub_1CD2D9D84((uint64_t)&__base, v287, *v296))
                  {
                    v1461.__r_.__value_.__r.__words[0] = v287;
                    uint64_t v299 = sub_1CD8C59B4((uint64_t)__dst, (uint64_t *)&v1461);
                    unint64_t v300 = *(unsigned int *)(v299 + 8);
                    if (v300 >= *(unsigned int *)(v299 + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)v299 + 8 * v300) = v298;
                    ++*(_DWORD *)(v299 + 8);
                  }
                  ++v296;
                  v297 -= 8;
                }
                while (v297);
                v296 = (uint64_t *)v1390;
              }
              if (v296 != (uint64_t *)&v1392) {
                free(v296);
              }
            }
            uint64_t v286 = *(void *)(v286 + 8);
            uint64_t v301 = n - 24;
            if (!n) {
              uint64_t v301 = 0;
            }
            if (v286 == v301 + 40) {
              break;
            }
LABEL_477:
            if (n == v282) {
              goto LABEL_478;
            }
          }
          while (1)
          {
            uint64_t n = *(void *)(n + 8);
            if (n == v282) {
              break;
            }
            uint64_t v302 = n - 24;
            if (!n) {
              uint64_t v302 = 0;
            }
            uint64_t v286 = *(void *)(v302 + 48);
            if (v286 != v302 + 40) {
              goto LABEL_477;
            }
          }
LABEL_478:
          if (!v1429) {
            break;
          }
          int v1301 = v283;
          v303 = v1428;
          __valc = &v1428[40 * v1429];
          do
          {
            uint64_t v304 = *((unsigned int *)v303 + 4);
            if (v304)
            {
              int v305 = 0;
              v306 = 0;
              uint64_t v308 = *(llvm::Value **)v303;
              uint64_t v307 = (uint64_t *)*((void *)v303 + 1);
              uint64_t v309 = &v307[v304];
              unsigned int v310 = (*(void *)v303 >> 4) ^ (*(void *)v303 >> 9);
              while (1)
              {
                v311 = (llvm::ValueAsMetadata *)*v307;
                if (v306 != *(llvm::BasicBlock **)(*v307 + 40)) {
                  break;
                }
LABEL_540:
                if (*((unsigned char *)v311 + 16) == 83)
                {
                  llvm::Value::doRAUW(v311, v305, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                llvm::User::replaceUsesOfWith(v311, v308, v305);
                if (++v307 == v309) {
                  goto LABEL_547;
                }
              }
              v306 = *(llvm::BasicBlock **)(*v307 + 40);
              BOOL v312 = sub_1CD2DAE24(*v307);
              uint64_t SinglePredecessor = (uint64_t)v306;
              if (v312) {
                uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v306);
              }
              v314 = (llvm::Value *)llvm::Instruction::clone(v308);
              int v305 = v314;
              if ((*((unsigned char *)v308 + 23) & 0x10) != 0)
              {
                uint64_t v315 = ***(void ***)v308;
                uint64_t v316 = *(void *)(v315 + 152);
                uint64_t v317 = *(unsigned int *)(v315 + 168);
                if (v317)
                {
                  LODWORD(v318) = (v317 - 1) & v310;
                  uint64_t v319 = (llvm::Value **)(v316 + 16 * v318);
                  v320 = *v319;
                  if (*v319 != v308)
                  {
                    int v321 = 1;
                    do
                    {
                      if (v320 == (llvm::Value *)-4096) {
                        goto LABEL_492;
                      }
                      int v322 = v318 + v321++;
                      uint64_t v318 = v322 & (v317 - 1);
                      v320 = *(llvm::Value **)(v316 + 16 * v318);
                    }
                    while (v320 != v308);
                    uint64_t v319 = (llvm::Value **)(v316 + 16 * v318);
                  }
                }
                else
                {
LABEL_492:
                  uint64_t v319 = (llvm::Value **)(v316 + 16 * v317);
                }
                uint64_t v323 = v319[1];
                v326 = *(void **)v323;
                v325 = (char *)v323 + 16;
                v324 = v326;
              }
              else
              {
                v324 = 0;
                v325 = &byte_1CFBCE98E;
              }
              LOWORD(v1394) = 261;
              v1390 = v325;
              v1391 = v324;
              llvm::Value::setNameImpl(v314, (const char **)&v1390);
              if (v305 && !*((unsigned char *)v305 + 16))
              {
                if ((*((unsigned char *)v305 + 23) & 0x10) == 0) {
                  goto LABEL_521;
                }
                uint64_t v330 = ***(void ***)v305;
                uint64_t v331 = *(void *)(v330 + 152);
                uint64_t v332 = *(unsigned int *)(v330 + 168);
                if (v332)
                {
                  LODWORD(v333) = (v332 - 1) & ((v305 >> 4) ^ (v305 >> 9));
                  unint64_t v334 = (llvm::Value **)(v331 + 16 * v333);
                  uint64_t v335 = *v334;
                  if (*v334 != v305)
                  {
                    int v336 = 1;
                    do
                    {
                      if (v335 == (llvm::Value *)-4096) {
                        goto LABEL_513;
                      }
                      int v337 = v333 + v336++;
                      uint64_t v333 = v337 & (v332 - 1);
                      uint64_t v335 = *(llvm::Value **)(v331 + 16 * v333);
                    }
                    while (v335 != v305);
                    unint64_t v334 = (llvm::Value **)(v331 + 16 * v333);
                  }
                }
                else
                {
LABEL_513:
                  unint64_t v334 = (llvm::Value **)(v331 + 16 * v332);
                }
                uint64_t v338 = v334[1];
                unint64_t v341 = *(void *)v338;
                char v339 = (char *)v338 + 16;
                unint64_t v340 = v341;
                if (v341 >= 5
                  && (*(_DWORD *)v339 == *(_DWORD *)"llvm." ? (BOOL v342 = v339[4] == aLlvm_1[4]) : (BOOL v342 = 0), v342))
                {
                  *((_DWORD *)v305 + 8) |= 0x2000u;
                  int v343 = llvm::Function::lookupIntrinsicID(v339, v340);
                }
                else
                {
LABEL_521:
                  int v343 = 0;
                  *((_DWORD *)v305 + 8) &= ~0x2000u;
                }
                *((_DWORD *)v305 + 9) = v343;
                if (v312) {
                  goto LABEL_497;
                }
              }
              else if (v312)
              {
LABEL_497:
                uint64_t v327 = *(void *)(SinglePredecessor + 40);
                if (v327 == SinglePredecessor + 40)
                {
                  uint64_t v329 = 0;
                }
                else
                {
                  if (v327) {
                    uint64_t v328 = v327 - 24;
                  }
                  else {
                    uint64_t v328 = 0;
                  }
                  if (*(unsigned __int8 *)(v328 + 16) - 29 >= 0xB) {
                    uint64_t v329 = 0;
                  }
                  else {
                    uint64_t v329 = v328;
                  }
                }
LABEL_538:
                uint64_t v350 = *(void *)(v329 + 40);
                *((void *)v305 + 5) = v350;
                *(_WORD *)(v350 + 18) &= ~0x8000u;
                if ((*((unsigned char *)v305 + 23) & 0x10) != 0)
                {
                  uint64_t v353 = *(void *)(v350 + 56);
                  if (v353)
                  {
                    v354 = *(llvm::ValueSymbolTable **)(v353 + 104);
                    if (v354) {
                      llvm::ValueSymbolTable::reinsertValue(v354, v305);
                    }
                  }
                }
                uint64_t v352 = *(void *)(v329 + 24);
                v351 = (void *)(v329 + 24);
                *((void *)v305 + 3) = v352;
                *((void *)v305 + 4) = v351;
                *(void *)(v352 + 8) = (char *)v305 + 24;
                void *v351 = (char *)v305 + 24;
                goto LABEL_540;
              }
              uint64_t v344 = SinglePredecessor + 40;
              for (juint64_t j = *(void *)(SinglePredecessor + 48); ; juint64_t j = *(void *)(jj + 8))
              {
                if (jj == v344) {
                  goto LABEL_535;
                }
                uint64_t v346 = jj - 24;
                if (!jj) {
                  uint64_t v346 = 0;
                }
                if (*(unsigned char *)(v346 + 16) != 83) {
                  break;
                }
              }
              unsigned int v347 = *(unsigned __int8 *)(jj - 8) - 38;
              BOOL v291 = v347 > 0x38;
              uint64_t v348 = (1 << v347) & 0x100060000000001;
              if (v291 || v348 == 0) {
                uint64_t v344 = jj;
              }
              else {
                uint64_t v344 = *(void *)(jj + 8);
              }
LABEL_535:
              if (v344) {
                uint64_t v329 = v344 - 24;
              }
              else {
                uint64_t v329 = 0;
              }
              goto LABEL_538;
            }
LABEL_547:
            v303 += 40;
          }
          while (v303 != __valc);
          sub_1CD8C5AC0((uint64_t)__dst);
          int v283 = v1301 + 1;
          uint64_t v282 = v1283;
        }
        while (v1301 != 3);
        sub_1CD8C2CF8(&v1428);
        if (((uint64_t)__dst[0] & 1) == 0) {
          MEMORY[0x1D25D9CD0](__dst[1], 8);
        }
        int v355 = *(_DWORD *)(v1290 + 200);
        int v356 = v1279;
        if ((v355 - 1) < 3) {
          goto LABEL_854;
        }
        __dst[0] = &__dst[2];
        __dst[1] = (void *)0x100000000;
        HIDWORD(v1417) = 0;
        uint64_t v1413 = 0;
        __dst[3] = 0;
        int v1414 = 0;
        LOBYTE(v1417) = 0;
        v1415 = 0;
        v1416 = v1279;
        sub_1CC5A43B0((uint64_t)__dst, 0);
        unsigned int v357 = &v1394;
        v1390 = &v1394;
        v1391 = &v1394;
        LODWORD(v1393) = 0;
        kuint64_t k = *((void *)v1279 + 10);
        uint64_t v359 = (void *)(kk - 24);
        if (!kk) {
          uint64_t v359 = 0;
        }
        unint64_t v1392 = 0x100000004;
        v1394 = v359;
        uint64_t v360 = *(unsigned int *)(v1290 + 128);
        if (!v360)
        {
          v361 = &v1394;
          goto LABEL_812;
        }
        uint64_t v494 = *(void *)(v1290 + 120);
        uint64_t v495 = v494 + 8 * v360;
        while (2)
        {
          uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)(*(void *)v494 + 40));
          uint64_t v497 = SingleSuccessor;
          v498 = (char *)v1391;
          uint64_t v499 = HIDWORD(v1392);
          if (v1391 != v1390)
          {
            unsigned int v503 = v1392;
            goto LABEL_783;
          }
          if (HIDWORD(v1392))
          {
            v500 = 0;
            uint64_t v501 = 8 * HIDWORD(v1392);
            v502 = (uint64_t *)v1391;
            do
            {
              if (*v502 == SingleSuccessor) {
                goto LABEL_804;
              }
              if (*v502 == -2) {
                v500 = v502;
              }
              ++v502;
              v501 -= 8;
            }
            while (v501);
            if (v500)
            {
              uint64_t *v500 = SingleSuccessor;
              LODWORD(v1393) = v1393 - 1;
              goto LABEL_804;
            }
          }
          unsigned int v503 = v1392;
          if (HIDWORD(v1392) < v1392)
          {
            ++HIDWORD(v1392);
            *((void *)v1391 + v499) = SingleSuccessor;
            goto LABEL_804;
          }
LABEL_783:
          if (3 * v503 <= 4 * (HIDWORD(v1392) - (int)v1393))
          {
            if (v503 >= 0x40) {
              v503 *= 2;
            }
            else {
              unsigned int v503 = 128;
            }
          }
          else if (v503 - HIDWORD(v1392) >= v503 >> 3)
          {
LABEL_785:
            unsigned int v504 = v503 - 1;
            unsigned int v505 = (v503 - 1) & ((v497 >> 4) ^ (v497 >> 9));
            v506 = &v498[8 * v505];
            uint64_t v507 = *(void *)v506;
            if (*(void *)v506 == -1)
            {
              v508 = 0;
LABEL_797:
              if (v508) {
                v512 = v508;
              }
              else {
                v512 = (uint64_t *)v506;
              }
              if (*v512 != v497)
              {
                if (*v512 == -2) {
                  LODWORD(v1393) = v1393 - 1;
                }
                else {
                  ++HIDWORD(v1392);
                }
                uint64_t *v512 = v497;
              }
            }
            else
            {
              v508 = 0;
              int v509 = 1;
              while (v507 != v497)
              {
                if (v508) {
                  BOOL v510 = 0;
                }
                else {
                  BOOL v510 = v507 == -2;
                }
                if (v510) {
                  v508 = (uint64_t *)v506;
                }
                unsigned int v511 = v505 + v509++;
                unsigned int v505 = v511 & v504;
                v506 = &v498[8 * (v511 & v504)];
                uint64_t v507 = *(void *)v506;
                if (*(void *)v506 == -1) {
                  goto LABEL_797;
                }
              }
            }
LABEL_804:
            v494 += 8;
            if (v494 != v495) {
              continue;
            }
            unsigned int v357 = v1390;
            v361 = v1391;
            for (kuint64_t k = *((void *)v1279 + 10); ; kuint64_t k = *(void *)(kk + 8))
            {
LABEL_812:
              if (kk == v282) {
                goto LABEL_849;
              }
              uint64_t v513 = kk - 24;
              if (!kk) {
                uint64_t v513 = 0;
              }
              uint64_t v514 = *(void *)(v513 + 48);
              if (v514 != v513 + 40) {
                break;
              }
            }
            while (1)
            {
              uint64_t v515 = v514 - 24;
              if (!v514) {
                uint64_t v515 = 0;
              }
              int v516 = *(unsigned __int8 *)(v515 + 16);
              if (v516 == 59) {
                uint64_t v517 = v515;
              }
              else {
                uint64_t v517 = 0;
              }
              if (v514 && v516 == 59)
              {
                if (v1391 == v1390) {
                  v518 = (unint64_t *)((char *)&v1392 + 4);
                }
                else {
                  v518 = &v1392;
                }
                uint64_t v519 = *(unsigned int *)v518;
                if (v519)
                {
                  uint64_t v520 = 8 * v519;
                  v521 = (unint64_t *)v1391;
                  while (*v521 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v521;
                    v520 -= 8;
                    if (!v520) {
                      goto LABEL_840;
                    }
                  }
                }
                else
                {
                  v521 = (unint64_t *)v1391;
                }
                v522 = (unint64_t *)((char *)v1391 + 8 * v519);
                if (v521 != v522)
                {
                  while (1)
                  {
                    v1468 = &v1470;
                    uint64_t v1469 = 0x100000000;
                    if (*(void *)(v517 + 8)) {
                      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
                    }
                    v523 = v521 + 1;
                    int v356 = v1279;
                    do
                    {
                      if (v523 == v522) {
                        goto LABEL_840;
                      }
                      unint64_t v524 = *v523++;
                    }
                    while (v524 > 0xFFFFFFFFFFFFFFFDLL);
                    v521 = v523 - 1;
                  }
                }
              }
LABEL_840:
              uint64_t v514 = *(void *)(v514 + 8);
              uint64_t v525 = kk - 24;
              if (!kk) {
                uint64_t v525 = 0;
              }
              if (v514 == v525 + 40) {
                break;
              }
LABEL_847:
              if (kk == v1283) {
                goto LABEL_848;
              }
            }
            while (1)
            {
              kuint64_t k = *(void *)(kk + 8);
              if (kk == v1283) {
                break;
              }
              uint64_t v526 = kk - 24;
              if (!kk) {
                uint64_t v526 = 0;
              }
              uint64_t v514 = *(void *)(v526 + 48);
              if (v514 != v526 + 40) {
                goto LABEL_847;
              }
            }
LABEL_848:
            v361 = v1391;
            unsigned int v357 = v1390;
LABEL_849:
            if (v361 != v357) {
              free(v361);
            }
            sub_1CBF8FF88((uint64_t *)&__dst[3]);
            if (__dst[0] != &__dst[2]) {
              free(__dst[0]);
            }
            int v355 = *(_DWORD *)(v1290 + 200);
LABEL_854:
            v527 = (void **)v1278;
            if (v355 == 3 && !*(_DWORD *)(v1290 + 128))
            {
LABEL_856:
              if (*((_WORD *)v356 + 9))
              {
                llvm::Function::BuildLazyArguments(v356);
                __int16 v815 = *((_WORD *)v356 + 9);
                v529 = (void *)*((void *)v356 + 11);
                std::string::size_type v7 = 0x2000000000;
                uint64_t v531 = v1283;
                if (v815)
                {
                  v528 = v1279;
                  llvm::Function::BuildLazyArguments(v1279);
                  v530 = (void *)*((void *)v1279 + 11);
                }
                else
                {
                  v530 = v529;
                  v528 = v1279;
                }
              }
              else
              {
                v528 = v356;
                v529 = (void *)*((void *)v356 + 11);
                v530 = v529;
                std::string::size_type v7 = 0x2000000000;
                uint64_t v531 = v1283;
              }
              v532 = &v530[5 * *((void *)v528 + 12)];
              while (v529 != v532)
              {
                for (muint64_t m = v529[1]; mm; muint64_t m = *(void *)(mm + 8))
                {
                  uint64_t v534 = *(void *)(mm + 24);
                  uint64_t v535 = *(void *)(v529[3] + 80);
                  if (v535) {
                    unint64_t v536 = v535 - 24;
                  }
                  else {
                    unint64_t v536 = 0;
                  }
                  if (sub_1CD2DACC0((uint64_t)&__base, v536, *(void *)(mm + 24)))
                  {
                    __dst[0] = v529;
                    uint64_t v537 = sub_1CD8C59B4((uint64_t)&__s2, (uint64_t *)__dst);
                    unint64_t v538 = *(unsigned int *)(v537 + 8);
                    if (v538 >= *(unsigned int *)(v537 + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)v537 + 8 * v538) = v534;
                    ++*(_DWORD *)(v537 + 8);
                  }
                }
                v529 += 5;
              }
              uint64_t v539 = *((void *)v1279 + 10);
              if (v539 != v531)
              {
                while (1)
                {
                  uint64_t v540 = v539 - 24;
                  if (!v539) {
                    uint64_t v540 = 0;
                  }
                  uint64_t v541 = *(void *)(v540 + 48);
                  if (v541 != v540 + 40) {
                    break;
                  }
                  uint64_t v539 = *(void *)(v539 + 8);
                  if (v539 == v1283) {
                    goto LABEL_876;
                  }
                }
                while (2)
                {
                  if (v541) {
                    v595 = (void *)(v541 - 24);
                  }
                  else {
                    v595 = 0;
                  }
                  if (sub_1CD2CD488((uint64_t)v595)
                    || sub_1CD2C9100((uint64_t)v595)
                    || sub_1CD2CD4D4((uint64_t)v595)
                    || v595 == *(void **)v1290
                    || !*(_DWORD *)(v1290 + 200) && *(void **)(v1290 + 264) == v595)
                  {
                    goto LABEL_983;
                  }
                  int v598 = *((unsigned __int8 *)v595 + 16);
                  if (v598 != 84
                    || (uint64_t v599 = *(v595 - 4)) == 0
                    || *(unsigned char *)(v599 + 16)
                    || *(void *)(v599 + 24) != v595[9]
                    || (*(unsigned char *)(v599 + 33) & 0x20) == 0)
                  {
                    BOOL v600 = sub_1CD2DBA80((uint64_t)v595);
                    if (v598 != 59 && !v600) {
                      goto LABEL_1003;
                    }
                    goto LABEL_983;
                  }
                  int v605 = *(_DWORD *)(v599 + 36);
                  if (v605 == 22) {
                    v606 = (uint64_t **)(v541 - 24);
                  }
                  else {
                    v606 = 0;
                  }
                  if (v541 && v605 == 22)
                  {
                    __dst[0] = &v1413;
                    __dst[1] = &v1413;
                    __dst[2] = (void *)8;
                    LODWORD(__dst[3]) = 0;
                    v607 = v606[1];
                    if (v607)
                    {
                      unsigned int v608 = 8;
                      do
                      {
                        uint64_t v609 = v607[3];
                        BOOL v610 = sub_1CD2DBA34(v609);
                        if (v609) {
                          BOOL v611 = !v610;
                        }
                        else {
                          BOOL v611 = 1;
                        }
                        if (!v611)
                        {
                          uint64_t v612 = *(void *)(v609 + 40);
                          v613 = (char *)__dst[1];
                          uint64_t v614 = HIDWORD(__dst[2]);
                          if (__dst[1] != __dst[0]) {
                            goto LABEL_1032;
                          }
                          if (!HIDWORD(__dst[2])) {
                            goto LABEL_1030;
                          }
                          v615 = 0;
                          uint64_t v616 = 8 * HIDWORD(__dst[2]);
                          v617 = __dst[1];
                          do
                          {
                            if (*v617 == v612) {
                              goto LABEL_1053;
                            }
                            if (*v617 == -2) {
                              v615 = v617;
                            }
                            ++v617;
                            v616 -= 8;
                          }
                          while (v616);
                          if (v615)
                          {
                            void *v615 = v612;
                            --LODWORD(__dst[3]);
                          }
                          else
                          {
LABEL_1030:
                            if (HIDWORD(__dst[2]) >= v608)
                            {
LABEL_1032:
                              if (3 * v608 <= 4 * (HIDWORD(__dst[2]) - LODWORD(__dst[3])))
                              {
                                if (v608 >= 0x40) {
                                  v608 *= 2;
                                }
                                else {
                                  unsigned int v608 = 128;
                                }
                              }
                              else if (v608 - HIDWORD(__dst[2]) >= v608 >> 3)
                              {
                                goto LABEL_1034;
                              }
                              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)__dst, v608);
                              unsigned int v608 = __dst[2];
                              v613 = (char *)__dst[1];
LABEL_1034:
                              unsigned int v618 = v608 - 1;
                              unsigned int v619 = (v608 - 1) & ((v612 >> 4) ^ (v612 >> 9));
                              v620 = &v613[8 * v619];
                              uint64_t v621 = *(void *)v620;
                              if (*(void *)v620 == -1)
                              {
                                v622 = 0;
LABEL_1046:
                                if (v622) {
                                  v626 = v622;
                                }
                                else {
                                  v626 = v620;
                                }
                                if (*(void *)v626 != v612)
                                {
                                  if (*(void *)v626 == -2) {
                                    --LODWORD(__dst[3]);
                                  }
                                  else {
                                    ++HIDWORD(__dst[2]);
                                  }
                                  *(void *)v626 = v612;
                                }
                              }
                              else
                              {
                                v622 = 0;
                                int v623 = 1;
                                while (v621 != v612)
                                {
                                  if (v622) {
                                    BOOL v624 = 0;
                                  }
                                  else {
                                    BOOL v624 = v621 == -2;
                                  }
                                  if (v624) {
                                    v622 = v620;
                                  }
                                  unsigned int v625 = v619 + v623++;
                                  unsigned int v619 = v625 & v618;
                                  v620 = &v613[8 * (v625 & v618)];
                                  uint64_t v621 = *(void *)v620;
                                  if (*(void *)v620 == -1) {
                                    goto LABEL_1046;
                                  }
                                }
                              }
                              goto LABEL_1053;
                            }
                            ++HIDWORD(__dst[2]);
                            *((void *)__dst[1] + v614) = v612;
                          }
                        }
LABEL_1053:
                        v607 = (uint64_t *)v607[1];
                      }
                      while (v607);
                    }
                    char v627 = sub_1CD2DB654((uint64_t)v606[5], (uint64_t)__dst);
                    if (__dst[1] != __dst[0]) {
                      free(__dst[1]);
                    }
                    if ((v627 & 1) == 0)
                    {
                      if (v1336 >= (unint64_t)HIDWORD(v1336)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v1335 + v1336) = v606;
                      LODWORD(v1336) = v1336 + 1;
                      goto LABEL_983;
                    }
                    uint64_t v628 = 0;
                    uint64_t v629 = **v606;
                    __dst[0] = &__dst[2];
                    __dst[1] = (void *)0x200000000;
                    uint64_t v1417 = v629;
                    v1418 = &v1426;
                    v1419 = &v1427;
                    uint64_t v1420 = 0;
                    int v1421 = 0;
                    __int16 v1422 = 512;
                    char v1423 = 7;
                    v1415 = 0;
                    v1416 = 0;
                    uint64_t v1424 = 0;
                    uint64_t v1425 = 0;
                    v1426 = &unk_1F2616E88;
                    v1427 = &unk_1F2617008;
                    v1415 = v606[5];
                    v1416 = (llvm::Function *)(v606 + 3);
                    v630 = (unsigned __int8 *)v606[6];
                    v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)v630;
                    if (v630)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v1461, v630, 2);
                      uint64_t v628 = v1461.__r_.__value_.__r.__words[0];
                    }
                    sub_1CB8461A4((uint64_t)__dst, 0, v628);
                    if (!v1461.__r_.__value_.__r.__words[0]) {
                      goto LABEL_1071;
                    }
                    int v647 = *v1461.__r_.__value_.__l.__data_;
                    if ((v647 - 4) > 0x1E)
                    {
                      if ((v647 - 3) >= 0xFFFFFFFE) {
                        std::string::size_type v650 = v1461.__r_.__value_.__r.__words[0];
                      }
                      else {
                        std::string::size_type v650 = 0;
                      }
                      if ((v647 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v649 = v650 + 8;
LABEL_1119:
                        v1390 = &v1461;
                        sub_1CC5FA668(v649 + 16, &v1390);
                        std::string::size_type v7 = 0x2000000000;
                        goto LABEL_1071;
                      }
                      std::string::size_type v7 = 0x2000000000;
                      if (v647 == 3) {
                        *(void *)(v1461.__r_.__value_.__r.__words[0] + 8) = 0;
                      }
                    }
                    else
                    {
                      std::string::size_type v7 = 0x2000000000;
                      if ((*(unsigned char *)(v1461.__r_.__value_.__r.__words[0] + 1) & 0x7F) == 2
                        || *(_DWORD *)(v1461.__r_.__value_.__r.__words[0] + 12))
                      {
                        uint64_t v648 = *(void *)(v1461.__r_.__value_.__r.__words[0] + 16);
                        if ((v648 & 4) != 0)
                        {
                          unint64_t v649 = v648 & 0xFFFFFFFFFFFFFFF8;
                          if (v649) {
                            goto LABEL_1119;
                          }
                        }
                      }
                    }
LABEL_1071:
                    v633 = (void *)sub_1CD8C4F74(v1290, (uint64_t *)__dst, (llvm::CastInst *)v606[-4 * (*((_DWORD *)v606 + 5) & 0x7FFFFFF)], 0, v631, v632);
                    v634 = v606[1];
                    if (!v634)
                    {
                      unsigned int v635 = v1333;
LABEL_1097:
                      if (v635 >= HIDWORD(v1333)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v1332 + v635) = v606;
                      LODWORD(v1333) = v1333 + 1;
                      if (__dst[0] != &__dst[2]) {
                        free(__dst[0]);
                      }
                      for (nuint64_t n = v633[1]; nn; nuint64_t n = *(void *)(nn + 8))
                      {
                        uint64_t v646 = *(void *)(nn + 24);
                        if (sub_1CD2D9D84((uint64_t)&__base, (uint64_t)v633, v646))
                        {
                          __dst[0] = v633;
                          uint64_t v644 = sub_1CD8C59B4((uint64_t)&__s2, (uint64_t *)__dst);
                          unint64_t v645 = *(unsigned int *)(v644 + 8);
                          if (v645 >= *(unsigned int *)(v644 + 12)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(*(void *)v644 + 8 * v645) = v646;
                          ++*(_DWORD *)(v644 + 8);
                        }
                      }
                      goto LABEL_983;
                    }
                    while (1)
                    {
                      v642 = (llvm::ValueAsMetadata *)v634[3];
                      if (sub_1CD2DBA80((uint64_t)v642))
                      {
                        llvm::Value::doRAUW(v642, (llvm::Value *)v633, (llvm::Value *)1);
                        goto LABEL_1095;
                      }
                      v1415 = (uint64_t *)*((void *)v642 + 5);
                      v1416 = (llvm::ValueAsMetadata *)((char *)v642 + 24);
                      v636 = (unsigned __int8 *)*((void *)v642 + 6);
                      v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)v636;
                      if (v636)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v1461, v636, 2);
                        uint64_t v637 = v1461.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        uint64_t v637 = 0;
                      }
                      sub_1CB8461A4((uint64_t)__dst, 0, v637);
                      if (v1461.__r_.__value_.__r.__words[0])
                      {
                        int v638 = *v1461.__r_.__value_.__l.__data_;
                        if ((v638 - 4) > 0x1E)
                        {
                          if ((v638 - 3) >= 0xFFFFFFFE) {
                            std::string::size_type v641 = v1461.__r_.__value_.__r.__words[0];
                          }
                          else {
                            std::string::size_type v641 = 0;
                          }
                          if ((v638 - 3) < 0xFFFFFFFE)
                          {
                            std::string::size_type v7 = 0x2000000000;
                            if (v638 == 3) {
                              *(void *)(v1461.__r_.__value_.__r.__words[0] + 8) = 0;
                            }
                            goto LABEL_1076;
                          }
                          unint64_t v640 = v641 + 8;
                        }
                        else
                        {
                          std::string::size_type v7 = 0x2000000000;
                          if ((*(unsigned char *)(v1461.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
                            && !*(_DWORD *)(v1461.__r_.__value_.__r.__words[0] + 12))
                          {
                            goto LABEL_1076;
                          }
                          uint64_t v639 = *(void *)(v1461.__r_.__value_.__r.__words[0] + 16);
                          if ((v639 & 4) == 0) {
                            goto LABEL_1076;
                          }
                          unint64_t v640 = v639 & 0xFFFFFFFFFFFFFFF8;
                          if (!v640) {
                            goto LABEL_1076;
                          }
                        }
                        v1390 = &v1461;
                        sub_1CC5FA668(v640 + 16, &v1390);
                        std::string::size_type v7 = 0x2000000000;
                      }
LABEL_1076:
                      sub_1CD8C5034(v1290, (uint64_t *)__dst, (uint64_t)v633, 0);
LABEL_1095:
                      if (v1333 >= (unint64_t)HIDWORD(v1333)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v1332 + v1333) = v642;
                      unsigned int v635 = v1333 + 1;
                      LODWORD(v1333) = v1333 + 1;
                      v634 = (uint64_t *)v634[1];
                      if (!v634) {
                        goto LABEL_1097;
                      }
                    }
                  }
                  if (!sub_1CD2DBA80((uint64_t)v595))
                  {
LABEL_1003:
                    for (uint64_t i1 = v595[1]; i1; uint64_t i1 = *(void *)(i1 + 8))
                    {
                      uint64_t v602 = *(void *)(i1 + 24);
                      if (sub_1CD2D9D84((uint64_t)&__base, (uint64_t)v595, v602))
                      {
                        if (*(unsigned char *)(*v595 + 8) == 12)
                        {
                          v889 = "token definition is separated from the use by a suspend point";
LABEL_2147:
                          llvm::report_fatal_error((llvm *)v889, (const llvm::Twine *)1);
                        }
                        __dst[0] = v595;
                        uint64_t v603 = sub_1CD8C59B4((uint64_t)&__s2, (uint64_t *)__dst);
                        unint64_t v604 = *(unsigned int *)(v603 + 8);
                        if (v604 >= *(unsigned int *)(v603 + 12)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(*(void *)v603 + 8 * v604) = v602;
                        ++*(_DWORD *)(v603 + 8);
                      }
                    }
                  }
LABEL_983:
                  uint64_t v541 = *(void *)(v541 + 8);
                  uint64_t v596 = v539 - 24;
                  if (!v539) {
                    uint64_t v596 = 0;
                  }
                  if (v541 != v596 + 40)
                  {
LABEL_990:
                    if (v539 == v1283) {
                      goto LABEL_876;
                    }
                    continue;
                  }
                  break;
                }
                while (1)
                {
                  uint64_t v539 = *(void *)(v539 + 8);
                  if (v539 == v1283) {
                    break;
                  }
                  uint64_t v597 = v539 - 24;
                  if (!v539) {
                    uint64_t v597 = 0;
                  }
                  uint64_t v541 = *(void *)(v597 + 48);
                  if (v541 != v597 + 40) {
                    goto LABEL_990;
                  }
                }
              }
LABEL_876:
              if (!v1344) {
                goto LABEL_895;
              }
              v542 = v1343;
              v543 = &v1343[5 * v1344];
              while (1)
              {
                uint64_t v544 = *v542;
                v1390 = (void *)v544;
                __dst[0] = &__dst[2];
                __dst[1] = (void *)0x1000000000;
                llvm::findDbgValues((uint64_t)__dst, (uint64_t ***)v544);
                v545 = (uint64_t *)__dst[0];
                if (!LODWORD(__dst[1])) {
                  goto LABEL_892;
                }
                uint64_t v546 = 8 * LODWORD(__dst[1]);
                do
                {
                  uint64_t v547 = *v545;
                  if (*(unsigned char *)(v544 + 16) == 21)
                  {
                    uint64_t v548 = *(void *)(*(void *)(v544 + 24) + 80);
                    if (v548) {
                      unint64_t v549 = v548 - 24;
                    }
                    else {
                      unint64_t v549 = 0;
                    }
                    if ((sub_1CD2DACC0((uint64_t)&__base, v549, *v545) & 1) == 0) {
                      goto LABEL_887;
                    }
                  }
                  else if (!sub_1CD2D9D84((uint64_t)&__base, v544, *v545))
                  {
                    goto LABEL_887;
                  }
                  uint64_t v550 = sub_1CD8C59B4((uint64_t)&__s2, (uint64_t *)&v1390);
                  unint64_t v551 = *(unsigned int *)(v550 + 8);
                  if (v551 >= *(unsigned int *)(v550 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v550 + 8 * v551) = v547;
                  ++*(_DWORD *)(v550 + 8);
LABEL_887:
                  ++v545;
                  v546 -= 8;
                }
                while (v546);
                v545 = (uint64_t *)__dst[0];
LABEL_892:
                if (v545 != (uint64_t *)&__dst[2]) {
                  free(v545);
                }
                v542 += 5;
                if (v542 == v543)
                {
LABEL_895:
                  if ((*(_DWORD *)(v1290 + 200) - 1) >= 3) {
                    goto LABEL_1137;
                  }
                  v552 = *(const llvm::Value **)v1290;
                  v1468 = &v1470;
                  uint64_t v1469 = 0x100000000;
                  int v1476 = 0;
                  v1471[1] = 0;
                  v1471[0] = 0;
                  int v1472 = 0;
                  char v1475 = 0;
                  uint64_t v1473 = 0;
                  v1474 = v1279;
                  sub_1CC5A43B0((uint64_t)&v1468, 0);
                  __dst[0] = (void *)1;
                  uint64_t v553 = 1;
                  int64x2_t v554 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                  do
                  {
                    *(int64x2_t *)&__dst[v553] = v554;
                    v553 += 2;
                  }
                  while (v553 != 33);
                  __src = v1437;
                  uint64_t v1436 = 0x2000000000;
                  v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1461.__r_.__value_.__r.__words[2];
                  v1461.__r_.__value_.__l.__size_ = 0x2000000000;
                  sub_1CD2DBACC((uint64_t)&v1390, (uint64_t)&__s2);
                  v555 = (unint64_t *)v1390;
                  if (v1391)
                  {
                    v556 = (unint64_t *)((char *)v1390 + 8 * v1391);
                    do
                    {
                      for (uint64_t i2 = *(void *)(*v555 + 8); i2; uint64_t i2 = *(void *)(i2 + 8))
                      {
                        v558 = *(void ***)(i2 + 24);
                        v1477 = v558;
                        if (v558[5] == *((void **)v552 + 5)
                          && (llvm::DominatorTree::dominates((llvm::DominatorTree *)&v1468, v552, (const llvm::Instruction *)v558) & 1) == 0)
                        {
                          if ((uint64_t)__dst[0])
                          {
                            int v559 = 32;
                            v560 = &__dst[1];
                          }
                          else
                          {
                            int v559 = (int)__dst[2];
                            if (!LODWORD(__dst[2]))
                            {
                              v569 = 0;
LABEL_919:
                              v570 = sub_1CC872F3C((uint64_t)__dst, (uint64_t)&v1477, &v1477, v569);
                              void *v570 = v1477;
                              if (v1436 >= (unint64_t)HIDWORD(v1436)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *((void *)__src + v1436) = v1477;
                              LODWORD(v1436) = v1436 + 1;
                              if (LODWORD(v1461.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v1461.__r_.__value_.__r.__words[1])) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *(void *)(v1461.__r_.__value_.__r.__words[0]
                                        + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1])) = v1477;
                              ++LODWORD(v1461.__r_.__value_.__r.__words[1]);
                              continue;
                            }
                            v560 = (void **)__dst[1];
                          }
                          int v561 = v559 - 1;
                          unsigned int v562 = ((v1477 >> 4) ^ (v1477 >> 9)) & v561;
                          v563 = (llvm::DominatorTree **)&v560[v562];
                          v564 = *v563;
                          if (v1477 != (void **)*v563)
                          {
                            v565 = 0;
                            int v566 = 1;
                            while (v564 != (llvm::DominatorTree *)-4096)
                            {
                              if (v565) {
                                BOOL v567 = 0;
                              }
                              else {
                                BOOL v567 = v564 == (llvm::DominatorTree *)-8192;
                              }
                              if (v567) {
                                v565 = v563;
                              }
                              unsigned int v568 = v562 + v566++;
                              unsigned int v562 = v568 & v561;
                              v563 = (llvm::DominatorTree **)&v560[v562];
                              v564 = *v563;
                              if (v1477 == (void **)*v563) {
                                goto LABEL_922;
                              }
                            }
                            if (v565) {
                              v569 = v565;
                            }
                            else {
                              v569 = v563;
                            }
                            goto LABEL_919;
                          }
                        }
LABEL_922:
                        ;
                      }
                      ++v555;
                    }
                    while (v555 != v556);
                    v555 = (unint64_t *)v1390;
                  }
                  if (v555 != &v1392) {
                    free(v555);
                  }
                  unsigned int v571 = v1461.__r_.__value_.__r.__words[1];
                  if (!LODWORD(v1461.__r_.__value_.__r.__words[1])) {
                    goto LABEL_961;
                  }
                  while (2)
                  {
                    uint64_t v572 = *(void *)(v1461.__r_.__value_.__r.__words[0] + 8 * v571-- - 8);
                    LODWORD(v1461.__r_.__value_.__r.__words[1]) = v571;
                    uint64_t v573 = *(void *)(v572 + 8);
                    if (!v573) {
                      goto LABEL_960;
                    }
                    while (2)
                    {
                      v1390 = *(void **)(v573 + 24);
                      if ((llvm::DominatorTree::dominates((llvm::DominatorTree *)&v1468, v552, (const llvm::Instruction *)v1390) & 1) == 0)
                      {
                        if ((uint64_t)__dst[0])
                        {
                          int v574 = 32;
                          v575 = &__dst[1];
LABEL_938:
                          int v576 = v574 - 1;
                          unsigned int v577 = ((v1390 >> 4) ^ (v1390 >> 9)) & v576;
                          v578 = &v575[v577];
                          v579 = *v578;
                          if (v1390 != *v578)
                          {
                            v580 = 0;
                            int v581 = 1;
                            while (v579 != (void *)-4096)
                            {
                              if (v580) {
                                BOOL v582 = 0;
                              }
                              else {
                                BOOL v582 = v579 == (void *)-8192;
                              }
                              if (v582) {
                                v580 = v578;
                              }
                              unsigned int v583 = v577 + v581++;
                              unsigned int v577 = v583 & v576;
                              v578 = &v575[v577];
                              v579 = *v578;
                              if (v1390 == *v578) {
                                goto LABEL_954;
                              }
                            }
                            if (v580) {
                              v584 = v580;
                            }
                            else {
                              v584 = v578;
                            }
                            goto LABEL_951;
                          }
                        }
                        else
                        {
                          int v574 = (int)__dst[2];
                          if (LODWORD(__dst[2]))
                          {
                            v575 = (void **)__dst[1];
                            goto LABEL_938;
                          }
                          v584 = 0;
LABEL_951:
                          v585 = sub_1CC872F3C((uint64_t)__dst, (uint64_t)&v1390, &v1390, v584);
                          void *v585 = v1390;
                          if (v1436 >= (unint64_t)HIDWORD(v1436)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)__src + v1436) = v1390;
                          LODWORD(v1436) = v1436 + 1;
                          if (LODWORD(v1461.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v1461.__r_.__value_.__r.__words[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(v1461.__r_.__value_.__r.__words[0]
                                    + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1])) = v1390;
                          ++LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        }
                      }
LABEL_954:
                      uint64_t v573 = *(void *)(v573 + 8);
                      if (v573) {
                        continue;
                      }
                      break;
                    }
                    unsigned int v571 = v1461.__r_.__value_.__r.__words[1];
LABEL_960:
                    if (v571) {
                      continue;
                    }
                    break;
                  }
LABEL_961:
                  v1390 = &v1392;
                  v1391 = (void *)0x4000000000;
                  sub_1CB935BDC((unsigned int *)&v1390, __src, (unsigned char *)__src + 8 * v1436);
                  v1477 = &v1468;
                  unint64_t v586 = 126 - 2 * __clz(v1391);
                  if (v1391) {
                    uint64_t v587 = v586;
                  }
                  else {
                    uint64_t v587 = 0;
                  }
                  sub_1CD2DBBEC((uint64_t)v1390, (const llvm::Instruction **)v1390 + v1391, (llvm::DominatorTree **)&v1477, v587, 1);
                  uint64_t v588 = *((void *)v552 + 4);
                  if (v588) {
                    BOOL v589 = v588 == *((void *)v552 + 5) + 40;
                  }
                  else {
                    BOOL v589 = 1;
                  }
                  if (v589) {
                    v590 = 0;
                  }
                  else {
                    v590 = (llvm::Instruction *)(v588 - 24);
                  }
                  v591 = (llvm::Instruction **)v1390;
                  if (v1391)
                  {
                    uint64_t v651 = 8 * v1391;
                    do
                    {
                      v652 = *v591++;
                      llvm::Instruction::moveBefore(v652, v590);
                      v651 -= 8;
                    }
                    while (v651);
                    v591 = (llvm::Instruction **)v1390;
                  }
                  if (v591 != (llvm::Instruction **)&v1392) {
                    free(v591);
                  }
                  if ((std::string::size_type *)v1461.__r_.__value_.__l.__data_ != &v1461.__r_.__value_.__r.__words[2]) {
                    free(v1461.__r_.__value_.__l.__data_);
                  }
                  if (__src != v1437) {
                    free(__src);
                  }
                  if (((uint64_t)__dst[0] & 1) == 0) {
                    MEMORY[0x1D25D9CD0](__dst[1], 8);
                  }
                  sub_1CBF8FF88(v1471);
                  if (v1468 != &v1470) {
                    free(v1468);
                  }
LABEL_1137:
                  v653 = **(uint64_t ***)v1279;
                  uint64_t v654 = *((void *)v1279 + 5);
                  LODWORD(v1283) = v1279 >> 4;
                  if ((*((unsigned char *)v1279 + 23) & 0x10) != 0)
                  {
                    uint64_t v655 = *(void *)(*v653 + 152);
                    uint64_t v656 = *(unsigned int *)(*v653 + 168);
                    if (v656)
                    {
                      LODWORD(v657) = (v656 - 1) & ((v1279 >> 4) ^ (v1279 >> 9));
                      v658 = (llvm::Function **)(v655 + 16 * v657);
                      v659 = *v658;
                      if (*v658 != v1279)
                      {
                        int v660 = 1;
                        do
                        {
                          if (v659 == (llvm::Function *)-4096) {
                            goto LABEL_1404;
                          }
                          int v661 = v657 + v660++;
                          uint64_t v657 = v661 & (v656 - 1);
                          v659 = *(llvm::Function **)(v655 + 16 * v657);
                        }
                        while (v659 != v1279);
                        v658 = (llvm::Function **)(v655 + 16 * v657);
                      }
                    }
                    else
                    {
LABEL_1404:
                      v658 = (llvm::Function **)(v655 + 16 * v656);
                    }
                    v762 = (unint64_t *)v658[1];
                    unint64_t v765 = *v762;
                    v764 = v762 + 2;
                    size_t v763 = v765;
                    __dst[0] = &__dst[3];
                    *(_OWORD *)&__dst[1] = xmmword_1CDC7F9D0;
                    if (v765 >= 0x21) {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    }
                    v766 = 0;
                    if (v763)
                    {
                      memcpy(__dst[0], v764, v763);
                      v766 = (char *)__dst[1];
                    }
                  }
                  else
                  {
                    size_t v763 = 0;
                    v766 = 0;
                    __dst[0] = &__dst[3];
                    *(_OWORD *)&__dst[1] = xmmword_1CDC7F9D0;
                  }
                  v767 = (void *)(v654 + 272);
                  __dst[1] = &v766[v763];
                  if (__dst[2] < &v766[v763 + 6]) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  v768 = (char *)__dst[0] + (unint64_t)&v766[v763];
                  *((_WORD *)v768 + 2) = 25965;
                  *(_DWORD *)v768 = 1634879022;
                  __dst[1] = (char *)__dst[1] + 6;
                  v769 = (llvm::PointerType *)llvm::StructType::create(v653, (unsigned __int8 *)__dst[0], (size_t)__dst[1]);
                  if (__dst[0] != &__dst[3]) {
                    free(__dst[0]);
                  }
                  uint64_t v1285 = 0;
                  uint64_t v770 = v1290;
                  int v771 = *(_DWORD *)(v1290 + 200);
                  __int16 v772 = (63 - __clz(*(void *)(v1290 + 288))) | 0x100;
                  if (v771 == 3) {
                    __int16 v773 = v772;
                  }
                  else {
                    __int16 v773 = 0;
                  }
                  v1390 = v767;
                  v1391 = v653;
                  unint64_t v1392 = 0;
                  LOWORD(v1393) = 0;
                  WORD1(v1393) = v773;
                  v1394 = (char *)&v1395 + 8;
                  *(void *)&long long v1395 = 0x800000000;
                  uint64_t v1410 = 0;
                  uint64_t v1409 = 0;
                  int v1411 = 0;
                  v774 = *(llvm::AllocaInst **)(v1290 + 264);
                  if (v771) {
                    uint64_t v775 = 0;
                  }
                  else {
                    uint64_t v775 = *(void *)(v1290 + 264);
                  }
                  uint64_t v1324 = v775;
                  if (!v771)
                  {
                    v776 = (void *)llvm::PointerType::get(v769, 0);
                    v777 = (uint64_t **)(*v653 + 1576);
                    __dst[0] = v776;
                    v778 = (llvm::PointerType *)llvm::FunctionType::get(v777, (uint64_t)__dst, 1, 0);
                    v779 = (llvm::Type *)llvm::PointerType::get(v778, 0);
                    sub_1CD2DC7AC((uint64_t)&v1390, v779, 0, 1, 0);
                    sub_1CD2DC7AC((uint64_t)&v1390, v779, 0, 1, 0);
                    if (v774)
                    {
                      int v780 = sub_1CD2DC9EC((uint64_t)&v1390, v774, 1);
                      __dst[0] = v774;
                      if (!v1351)
                      {
                        v788 = 0;
                        goto LABEL_1434;
                      }
                      unsigned int v781 = (v1351 - 1) & ((v774 >> 4) ^ (v774 >> 9));
                      v782 = (uint64_t *)(v1350 + 16 * v781);
                      v783 = (void *)*v782;
                      if (v774 != (llvm::AllocaInst *)*v782)
                      {
                        v784 = 0;
                        int v785 = 1;
                        while (v783 != (void *)-4096)
                        {
                          if (v784) {
                            BOOL v786 = 0;
                          }
                          else {
                            BOOL v786 = v783 == (void *)-8192;
                          }
                          if (v786) {
                            v784 = v782;
                          }
                          unsigned int v787 = v781 + v785++;
                          unsigned int v781 = v787 & (v1351 - 1);
                          v782 = (uint64_t *)(v1350 + 16 * v781);
                          v783 = (void *)*v782;
                          if (v775 == *v782) {
                            goto LABEL_1435;
                          }
                        }
                        if (v784) {
                          v788 = v784;
                        }
                        else {
                          v788 = v782;
                        }
LABEL_1434:
                        v782 = sub_1CBFFD5B4((uint64_t)&v1350, (uint64_t)__dst, (uint64_t *)__dst, v788);
                        uint64_t *v782 = (uint64_t)__dst[0];
                        *((_DWORD *)v782 + 2) = 0;
                      }
LABEL_1435:
                      *((_DWORD *)v782 + 2) = v780;
                    }
                    uint64_t v770 = v1290;
                    unsigned int v789 = 64 - __clz(*(unsigned int *)(v1290 + 128) - 1);
                    if (v789 <= 1) {
                      uint64_t v790 = 1;
                    }
                    else {
                      uint64_t v790 = v789;
                    }
                    v791 = (llvm::Type *)llvm::IntegerType::get((llvm::IntegerType *)v653, (llvm::LLVMContext *)v790);
                    uint64_t v1285 = sub_1CD2DC7AC((uint64_t)&v1390, v791, 0, 0, 0);
                  }
                  v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1461.__r_.__value_.__r.__words[2];
                  v1461.__r_.__value_.__l.__size_ = 0x400000000;
                  if (*(unsigned __int8 *)(v770 + 248) | byte_1EBD00238)
                  {
                    v1477 = 0;
                    uint64_t v1478 = 0;
                    LODWORD(v1479) = 0;
                    uint64_t v792 = *(unsigned int *)(v770 + 128);
                    if (v792)
                    {
                      uint64_t v793 = *(void *)(v1290 + 120);
                      uint64_t v794 = v793 + 8 * v792;
                      do
                      {
                        for (uint64_t i3 = *(void *)(*(void *)v793 + 8); i3; uint64_t i3 = *(void *)(i3 + 8))
                        {
                          uint64_t v796 = *(void *)(i3 + 24);
                          if (v796) {
                            BOOL v797 = *(unsigned char *)(v796 + 16) == 31;
                          }
                          else {
                            BOOL v797 = 0;
                          }
                          if (v797)
                          {
                            __dst[0] = *(void **)(i3 + 24);
                            int v798 = *(_DWORD *)(v796 + 20);
                            if ((v798 & 0x40000000) != 0) {
                              uint64_t v799 = *(void *)(v796 - 8);
                            }
                            else {
                              uint64_t v799 = v796 - 32 * (v798 & 0x7FFFFFF);
                            }
                            uint64_t v800 = *(void *)(v799 + 32);
                            sub_1CD467E2C((uint64_t)&v1477, (uint64_t *)__dst)[1] = v800;
                            int v801 = *(_DWORD *)(v796 + 20);
                            if ((v801 & 0x40000000) != 0) {
                              uint64_t v802 = *(void *)(v796 - 8);
                            }
                            else {
                              uint64_t v802 = v796 - 32 * (v801 & 0x7FFFFFF);
                            }
                            v803 = (void *)(v802 + 32);
                            uint64_t v804 = *(void *)(v802 + 96);
                            if (*(void *)(v802 + 32))
                            {
                              **(void **)(v802 + 48) = *(void *)(v802 + 40);
                              uint64_t v808 = *(void *)(v802 + 40);
                              if (v808) {
                                *(void *)(v808 + 16) = *(void *)(v802 + 48);
                              }
                            }
                            void *v803 = v804;
                            if (v804)
                            {
                              uint64_t v807 = *(void *)(v804 + 8);
                              v805 = (void *)(v804 + 8);
                              uint64_t v806 = v807;
                              *(void *)(v802 + 40) = v807;
                              if (v807) {
                                *(void *)(v806 + 16) = v802 + 40;
                              }
                              *(void *)(v802 + 48) = v805;
                              void *v805 = v803;
                            }
                          }
                        }
                        v793 += 8;
                      }
                      while (v793 != v794);
                    }
                    v1468 = &v1470;
                    uint64_t v1469 = 0x400000000;
                    if (v1347 >= 5) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    unsigned int v812 = 0;
                    if (v1347)
                    {
                      v813 = v1346;
                      uint64_t v814 = 40 * v1347;
                      do
                      {
                        if (v812 >= HIDWORD(v1469)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v1468 + v812) = *v813;
                        unsigned int v812 = v1469 + 1;
                        LODWORD(v1469) = v1469 + 1;
                        v813 += 5;
                        v814 -= 40;
                      }
                      while (v814);
                    }
                    llvm::StackLifetime::StackLifetime((llvm::StackLifetime *)__dst, (uint64_t)v1279, v1468, v812, 0);
                  }
                  if (v1347)
                  {
                    v809 = (void **)v1346;
                    uint64_t v810 = 40 * v1347;
                    do
                    {
                      v811 = *v809;
                      __dst[0] = &__dst[2];
                      __dst[2] = v811;
                      __dst[1] = (void *)0x400000001;
                      sub_1CD770550((uint64_t)&v1461, (uint64_t)__dst);
                      if (__dst[0] != &__dst[2]) {
                        free(__dst[0]);
                      }
                      v809 += 5;
                      v810 -= 40;
                    }
                    while (v810);
                  }
                  if (LODWORD(v1461.__r_.__value_.__r.__words[1]))
                  {
                    uint64_t v816 = v1461.__r_.__value_.__r.__words[0];
                    std::string::size_type v817 = v1461.__r_.__value_.__r.__words[0] + 48 * LODWORD(v1461.__r_.__value_.__r.__words[1]);
                    while (1)
                    {
                      __dst[0] = &__dst[2];
                      __dst[1] = (void *)0x400000000;
                      v818 = (llvm::AllocaInst **)&__dst[2];
                      if (*(_DWORD *)(v816 + 8))
                      {
                        sub_1CBC5C404((uint64_t)__dst, v816);
                        v818 = (llvm::AllocaInst **)__dst[0];
                      }
                      int v819 = sub_1CD2DC9EC((uint64_t)&v1390, *v818, 0);
                      v820 = (void **)__dst[0];
                      if (LODWORD(__dst[1])) {
                        break;
                      }
LABEL_1505:
                      if (v820 != &__dst[2]) {
                        free(v820);
                      }
                      v816 += 48;
                      if (v816 == v817) {
                        goto LABEL_1508;
                      }
                    }
                    int v821 = v819;
                    v822 = (void **)((char *)__dst[0] + 8 * LODWORD(__dst[1]));
                    while (2)
                    {
                      v823 = *v820;
                      v1468 = *v820;
                      if (v1351)
                      {
                        unsigned int v824 = (v1351 - 1) & ((v823 >> 4) ^ (v823 >> 9));
                        v825 = (uint64_t *)(v1350 + 16 * v824);
                        uint64_t v826 = *v825;
                        if (v823 != (void *)*v825)
                        {
                          v827 = 0;
                          int v828 = 1;
                          while (v826 != -4096)
                          {
                            if (v827) {
                              BOOL v829 = 0;
                            }
                            else {
                              BOOL v829 = v826 == -8192;
                            }
                            if (v829) {
                              v827 = v825;
                            }
                            unsigned int v830 = v824 + v828++;
                            unsigned int v824 = v830 & (v1351 - 1);
                            v825 = (uint64_t *)(v1350 + 16 * v824);
                            uint64_t v826 = *v825;
                            if (v823 == (void *)*v825) {
                              goto LABEL_1502;
                            }
                          }
                          if (v827) {
                            v831 = v827;
                          }
                          else {
                            v831 = v825;
                          }
LABEL_1501:
                          v825 = sub_1CBFFD5B4((uint64_t)&v1350, (uint64_t)&v1468, (uint64_t *)&v1468, v831);
                          uint64_t *v825 = (uint64_t)v1468;
                          *((_DWORD *)v825 + 2) = 0;
                        }
LABEL_1502:
                        *((_DWORD *)v825 + 2) = v821;
                        if (++v820 == v822)
                        {
                          v820 = (void **)__dst[0];
                          goto LABEL_1505;
                        }
                        continue;
                      }
                      break;
                    }
                    v831 = 0;
                    goto LABEL_1501;
                  }
LABEL_1508:
                  sub_1CD48219C(&v1461.__r_.__value_.__l.__data_);
                  if (!*(_DWORD *)(v1290 + 200) && v1324)
                  {
                    memset(__dst, 0, 20);
                    v1461.__r_.__value_.__s.__data_[0] = 0;
                    sub_1CD2DAE74((uint64_t)&v1346, &v1324, (uint64_t *)__dst, (char *)&v1461);
                    sub_1CD8C5E20((uint64_t)__dst);
                    MEMORY[0x1D25D9CD0](__dst[0], 8);
                  }
                  if (!v1344)
                  {
LABEL_1512:
                    __dst[0] = &__dst[2];
                    __dst[1] = (void *)0x800000000;
                    if (v1395 >= 9) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    unsigned int v852 = 0;
                    if (v1395)
                    {
                      v856 = (int8x16_t *)v1394;
                      uint64_t v857 = 48 * v1395;
                      do
                      {
                        if (v852 >= HIDWORD(__dst[1]))
                        {
                          __int8 v860 = v856[2].i8[0];
                          *(int8x16_t *)&v1461.__r_.__value_.__l.__data_ = vextq_s8(*v856, *v856, 8uLL);
                          v1461.__r_.__value_.__r.__words[2] = (std::string::size_type)v856;
                          LOBYTE(v1463) = v860;
                          unint64_t v861 = sub_1CD59E054((uint64_t)__dst, (unint64_t)&v1461, 1);
                          v862 = (char *)__dst[0] + 40 * LODWORD(__dst[1]);
                          uint64_t v863 = *(void *)(v861 + 32);
                          long long v864 = *(_OWORD *)(v861 + 16);
                          *(_OWORD *)v862 = *(_OWORD *)v861;
                          *((_OWORD *)v862 + 1) = v864;
                          *((void *)v862 + 4) = v863;
                        }
                        else
                        {
                          v858 = (int8x16_t *)((char *)__dst[0] + 40 * v852);
                          __int8 v859 = v856[2].i8[0];
                          int8x16_t *v858 = vextq_s8(*v856, *v856, 8uLL);
                          v858[1].i64[0] = (uint64_t)v856;
                          v858[2].i8[0] = v859;
                        }
                        unsigned int v852 = ++LODWORD(__dst[1]);
                        v856 += 3;
                        v857 -= 48;
                      }
                      while (v857);
                    }
                    unint64_t v1392 = llvm::performOptimizedStructLayout((unint64_t *)__dst[0], v852);
                    LOBYTE(v1393) = v853;
                    unsigned int v854 = __dst[1];
                    if (LODWORD(__dst[1]))
                    {
                      uint64_t v865 = 0;
                      v866 = (char *)__dst[0];
                      v867 = (char *)__dst[0] + 40 * LODWORD(__dst[1]);
                      do
                      {
                        uint64_t v868 = *(void *)((unsigned char *)__dst[0] + v865) & ~(-1 << *(unsigned char *)(*(void *)((char *)__dst[0] + v865 + 16)
                                                                                          + 33));
                        BOOL v855 = v868 != 0;
                        if (v868) {
                          BOOL v869 = 1;
                        }
                        else {
                          BOOL v869 = 40 * LODWORD(__dst[1]) - 40 == v865;
                        }
                        v865 += 40;
                      }
                      while (!v869);
                      v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1461.__r_.__value_.__r.__words[2];
                      v1461.__r_.__value_.__l.__size_ = 0x1000000000;
                      if (LODWORD(__dst[1]) >= 0xC) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1295 = v769;
                      uint64_t v870 = 0;
                      do
                      {
                        uint64_t v871 = *((void *)v866 + 2);
                        uint64_t v872 = *(void *)v866;
                        if (*(void *)v866 != v870
                          && (v868
                           || ((v870 + (1 << *(unsigned char *)(v871 + 33)) - 1) & -(1 << *(unsigned char *)(v871 + 33))) != v872))
                        {
                          v873 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)v1391 + 1912), (llvm::Type *)(*(void *)v866 - v870));
                          if (LODWORD(v1461.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v1461.__r_.__value_.__r.__words[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(v1461.__r_.__value_.__r.__words[0]
                                    + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1])) = v873;
                          ++LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        }
                        *(void *)(v871 + 8) = v872;
                        uint64_t v874 = LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        unsigned int v875 = HIDWORD(v1461.__r_.__value_.__r.__words[1]);
                        *(void *)(v871 + 24) = LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        if (v874 >= v875) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(v1461.__r_.__value_.__r.__words[0] + 8 * v874) = *(void *)(v871 + 16);
                        unsigned int v854 = ++LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        v876 = *(llvm::Type **)(v871 + 40);
                        if (v876)
                        {
                          v877 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)v1391 + 1912), v876);
                          if (LODWORD(v1461.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v1461.__r_.__value_.__r.__words[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(v1461.__r_.__value_.__r.__words[0]
                                    + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1])) = v877;
                          unsigned int v854 = ++LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        }
                        uint64_t v870 = *(void *)v871 + v872;
                        v866 += 40;
                      }
                      while (v866 != v867);
                      v769 = v1295;
                    }
                    else
                    {
                      BOOL v855 = 0;
                      v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1461.__r_.__value_.__r.__words[2];
                      v1461.__r_.__value_.__l.__size_ = 0x1000000000;
                    }
                    llvm::StructType::setBody((uint64_t)v769, (uint64_t)v1461.__r_.__value_.__l.__data_, v854, v855);
                    BYTE1(v1393) = 1;
                    if ((std::string::size_type *)v1461.__r_.__value_.__l.__data_ != &v1461.__r_.__value_.__r.__words[2]) {
                      free(v1461.__r_.__value_.__l.__data_);
                    }
                    if (__dst[0] != &__dst[2]) {
                      free(__dst[0]);
                    }
                    char v1349 = 1;
                    if (v1344)
                    {
                      v878 = v1343;
                      uint64_t v879 = 40 * v1344;
                      do
                      {
                        uint64_t v880 = *v878;
                        v878 += 5;
                        sub_1CD2DEEE8((uint64_t)&v1390, (uint64_t)&__s2, v880);
                        v879 -= 40;
                      }
                      while (v879);
                    }
                    if (v1347)
                    {
                      v881 = (uint64_t *)v1346;
                      uint64_t v882 = 40 * v1347;
                      do
                      {
                        uint64_t v883 = *v881;
                        v881 += 5;
                        sub_1CD2DEEE8((uint64_t)&v1390, (uint64_t)&__s2, v883);
                        v882 -= 40;
                      }
                      while (v882);
                    }
                    char v1349 = 0;
                    unsigned int v884 = v1393;
                    *(unsigned char *)(v1290 + 216) = v1393;
                    unint64_t v885 = v1392;
                    *(void *)(v1290 + 224) = v1392;
                    int v886 = *(_DWORD *)(v1290 + 200);
                    if ((v886 - 1) < 2)
                    {
                      uint64_t v890 = *(void *)(*(void *)v1290 - 32 * (*(_DWORD *)(*(void *)v1290 + 20) & 0x7FFFFFF));
                      v891 = (void *)(v890 - 32 * (*(_DWORD *)(v890 + 20) & 0x7FFFFFF));
                      v892 = (unint64_t *)(*v891 + 24);
                      uint64_t v411 = (uint64_t)__dst;
                      if (*(_DWORD *)(*v891 + 32) >= 0x41u) {
                        v892 = (unint64_t *)*v892;
                      }
                      if (v885 <= *v892)
                      {
                        uint64_t v897 = v891[4];
                        v898 = (unint64_t *)(v897 + 24);
                        if (*(_DWORD *)(v897 + 32) >= 0x41u) {
                          v898 = (unint64_t *)*v898;
                        }
                        unint64_t v899 = *v898;
                        unsigned int v900 = __clz(v899) ^ 0x3F;
                        if (v899) {
                          unsigned int v901 = v900;
                        }
                        else {
                          unsigned int v901 = 0;
                        }
                        BOOL v893 = v901 >= v884;
                      }
                      else
                      {
                        BOOL v893 = 0;
                      }
                      *(unsigned char *)(v1290 + 296) = v893;
                    }
                    else
                    {
                      uint64_t v411 = (uint64_t)__dst;
                      if (v886)
                      {
                        if (v886 == 3)
                        {
                          uint64_t v887 = ((1 << v884) + *(void *)(v1290 + 280) - 1) & -(1 << v884);
                          unsigned __int8 v888 = 63 - __clz(*(void *)(v1290 + 288));
                          *(void *)(v1290 + 296) = v887;
                          *(void *)(v1290 + 304) = (v885 + (1 << v888) + v887 - 1) & -(1 << v888);
                          if (v884 > v888)
                          {
                            v889 = "The alignment requirment of frame variables cannot be higher than the alignment of th"
                                   "e async function context";
                            goto LABEL_2147;
                          }
                        }
                      }
                      else
                      {
                        v894 = (char *)v1394 + 48 * v1285;
                        uint64_t v895 = *((void *)v894 + 1);
                        uint64_t v896 = *((void *)v894 + 3);
                        LOBYTE(v894) = v894[32];
                        *(_DWORD *)(v1290 + 280) = v896;
                        *(_DWORD *)(v1290 + 284) = 1 << (char)v894;
                        *(_DWORD *)(v1290 + 288) = v895;
                        *(void *)(v1290 + 224) = (v885 + (1 << v884) - 1) & -(1 << v884);
                      }
                    }
                    MEMORY[0x1D25D9CD0](v1409, 8);
                    if (v1394 != (char *)&v1395 + 8) {
                      free(v1394);
                    }
                    uint64_t v902 = 0;
                    *(void *)(v1290 + 208) = v769;
                    v903 = *(unsigned __int8 **)v1290;
                    uint64_t v904 = *(void *)(*(void *)v1290 + 32);
                    if (v904) {
                      BOOL v905 = v904 == *(void *)(*(void *)v1290 + 40) + 40;
                    }
                    else {
                      BOOL v905 = 1;
                    }
                    if (v905) {
                      v906 = 0;
                    }
                    else {
                      v906 = (uint64_t **)(v904 - 24);
                    }
                    uint64_t v907 = **v906;
                    __dst[0] = &__dst[2];
                    __dst[1] = (void *)0x200000000;
                    uint64_t v1417 = v907;
                    v1418 = &v1426;
                    v1419 = &v1427;
                    uint64_t v1420 = 0;
                    int v1421 = 0;
                    __int16 v1422 = 512;
                    char v1423 = 7;
                    v1416 = 0;
                    v1415 = 0;
                    uint64_t v1425 = 0;
                    uint64_t v1424 = 0;
                    v1426 = &unk_1F2616E88;
                    v1427 = &unk_1F2617008;
                    v1415 = v906[5];
                    v1416 = (llvm::Function *)(v906 + 3);
                    v908 = (unsigned __int8 *)v906[6];
                    v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)v908;
                    if (v908)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v1461, v908, 2);
                      uint64_t v902 = v1461.__r_.__value_.__r.__words[0];
                    }
                    sub_1CB8461A4((uint64_t)__dst, 0, v902);
                    if (v1461.__r_.__value_.__r.__words[0])
                    {
                      int v933 = *v1461.__r_.__value_.__l.__data_;
                      if ((v933 - 4) > 0x1E)
                      {
                        if ((v933 - 3) >= 0xFFFFFFFE) {
                          std::string::size_type v940 = v1461.__r_.__value_.__r.__words[0];
                        }
                        else {
                          std::string::size_type v940 = 0;
                        }
                        if ((v933 - 3) < 0xFFFFFFFE)
                        {
                          if (v933 == 3) {
                            *(void *)(v1461.__r_.__value_.__r.__words[0] + 8) = 0;
                          }
                          goto LABEL_1610;
                        }
                        unint64_t v935 = v940 + 8;
                      }
                      else
                      {
                        if ((*(unsigned char *)(v1461.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
                          && !*(_DWORD *)(v1461.__r_.__value_.__r.__words[0] + 12))
                        {
                          goto LABEL_1610;
                        }
                        uint64_t v934 = *(void *)(v1461.__r_.__value_.__r.__words[0] + 16);
                        if ((v934 & 4) == 0) {
                          goto LABEL_1610;
                        }
                        unint64_t v935 = v934 & 0xFFFFFFFFFFFFFFF8;
                        if (!v935) {
                          goto LABEL_1610;
                        }
                      }
                      v1390 = &v1461;
                      sub_1CC5FA668(v935 + 16, &v1390);
                    }
LABEL_1610:
                    unint64_t v909 = llvm::PointerType::get(*(llvm::PointerType **)(v1290 + 208), 0);
                    v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)"FramePtr";
                    LOWORD(v1463) = 259;
                    if (*(void *)v903 == v909)
                    {
LABEL_1616:
                      uint64_t v911 = v1290;
                    }
                    else
                    {
                      if (v903[16] > 0x14u)
                      {
                        LOWORD(v1394) = 257;
                        v903 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v903, v909, (const char **)&v1390, 0);
                        (*((void (**)(void **, unsigned __int8 *, std::string *, uint64_t *, llvm::Function *))*v1419
                         + 2))(v1419, v903, &v1461, v1415, v1416);
                        if (LODWORD(__dst[1]))
                        {
                          v938 = (llvm::MDNode **)__dst[0];
                          v939 = (llvm::MDNode **)((char *)__dst[0] + 16 * LODWORD(__dst[1]));
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v903, *(_DWORD *)v938, v938[1]);
                            v938 += 2;
                          }
                          while (v938 != v939);
                        }
                        uint64_t v411 = (uint64_t)__dst;
                        goto LABEL_1616;
                      }
                      uint64_t v910 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1418
                              + 28))(v1418, 49, v903, v909);
                      v903 = (unsigned __int8 *)v910;
                      if (!v910 || *(unsigned __int8 *)(v910 + 16) < 0x1Cu) {
                        goto LABEL_1616;
                      }
                      (*((void (**)(void **, uint64_t, std::string *, uint64_t *, llvm::Function *))*v1419 + 2))(v1419, v910, &v1461, v1415, v1416);
                      if (LODWORD(__dst[1]))
                      {
                        v1274 = (llvm::MDNode **)__dst[0];
                        v1275 = (llvm::MDNode **)((char *)__dst[0] + 16 * LODWORD(__dst[1]));
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v903, *(_DWORD *)v1274, v1274[1]);
                          v1274 += 2;
                        }
                        while (v1274 != v1275);
                      }
                      uint64_t v411 = (uint64_t)__dst;
                      uint64_t v911 = v1290;
                      std::string::size_type v7 = 0x2000000000;
                    }
                    *(void *)(v911 + 232) = v903;
                    uint64_t v410 = (uint64_t)__dst[0];
                    if (__dst[0] != &__dst[2]) {
LABEL_2155:
                    }
                      free((void *)v410);
                    if ((*((unsigned char *)v1279 + 23) & 0x20) == 0) {
                      goto LABEL_1846;
                    }
                    uint64_t v912 = ***(void ***)v1279;
                    __dst[0] = v1279;
                    int v913 = *(_DWORD *)(v912 + 2496);
                    if (!v913)
                    {
                      v936 = 0;
                      goto LABEL_1658;
                    }
                    uint64_t v914 = *(void *)(v912 + 2480);
                    int v915 = v913 - 1;
                    unsigned int v916 = v915 & (v1283 ^ (v1279 >> 9));
                    v917 = (llvm::Function **)(v914 + 40 * v916);
                    v918 = *v917;
                    if (*v917 != v1279)
                    {
                      v919 = 0;
                      int v920 = 1;
                      while (v918 != (llvm::Function *)-4096)
                      {
                        if (v919) {
                          BOOL v921 = 0;
                        }
                        else {
                          BOOL v921 = v918 == (llvm::Function *)-8192;
                        }
                        if (v921) {
                          v919 = v917;
                        }
                        unsigned int v922 = v916 + v920++;
                        unsigned int v916 = v922 & v915;
                        v917 = (llvm::Function **)(v914 + 40 * v916);
                        v918 = *v917;
                        if (*v917 == v1279) {
                          goto LABEL_1629;
                        }
                      }
                      if (v919) {
                        v936 = v919;
                      }
                      else {
                        v936 = v917;
                      }
LABEL_1658:
                      v917 = (llvm::Function **)sub_1CC609054(v912 + 2480, (uint64_t)__dst, (uint64_t *)__dst, v936);
                      v937 = (llvm::Function *)__dst[0];
                      v917[4] = 0;
                      v917[3] = 0;
                      *v917 = v937;
                      v917[1] = (llvm::Function *)(v917 + 3);
                      v917[2] = (llvm::Function *)0x100000000;
                    }
LABEL_1629:
                    uint64_t v923 = *((unsigned int *)v917 + 4);
                    if (!v923) {
                      goto LABEL_1846;
                    }
                    v924 = (void *)((char *)v917[1] + 8);
                    uint64_t v925 = 16 * v923;
                    while (*((_DWORD *)v924 - 2))
                    {
                      v924 += 2;
                      v925 -= 16;
                      if (!v925) {
                        goto LABEL_1846;
                      }
                    }
                    uint64_t v926 = *v924;
                    if (!*v924) {
                      goto LABEL_1846;
                    }
                    uint64_t v927 = *(void *)(v926 - 8 * *(unsigned int *)(v926 + 8) + 40);
                    if (!v927) {
                      goto LABEL_1846;
                    }
                    unsigned int v928 = *(_DWORD *)(v927 + 24);
                    BOOL v291 = v928 > 0x21;
                    uint64_t v929 = (1 << v928) & 0x206000010;
                    if (v291 || v929 == 0) {
                      goto LABEL_1846;
                    }
                    llvm::DIBuilder::DIBuilder((uint64_t)__dst, *((void **)v1279 + 5), 0, 0);
                    if (*(_DWORD *)(v1290 + 200)) {
                      v931 = 0;
                    }
                    else {
                      v931 = *(llvm **)(v1290 + 264);
                    }
                    llvm::FindDbgDeclareUses(v931, &v1323);
                    if (v1323 < 8) {
                      goto LABEL_1845;
                    }
                    unint64_t v932 = v1323 & 0xFFFFFFFFFFFFFFF8;
                    if ((v1323 & 4) != 0 && v932)
                    {
                      if (!*(_DWORD *)(v932 + 8)) {
                        goto LABEL_1845;
                      }
LABEL_1672:
                      unint64_t v932 = **(void **)v932;
                    }
                    else if ((v1323 & 4) != 0)
                    {
                      goto LABEL_1672;
                    }
                    uint64_t v941 = *(void *)(*(void *)(v932 - 32 * (*(_DWORD *)(v932 + 20) & 0x7FFFFFF) + 32) + 24);
                    uint64_t v942 = *(void *)(v941 - 8 * *(unsigned int *)(v941 + 8));
                    uint64_t v943 = v942;
                    if (*(unsigned char *)v942 != 15) {
                      uint64_t v943 = *(void *)(v942 - 8 * *(unsigned int *)(v942 + 8));
                    }
                    uint64_t v1298 = v943;
                    uint64_t v1286 = *(void *)(v941 - 8 * *(unsigned int *)(v941 + 8));
                    uint64_t v944 = *(void *)(v932 + 48);
                    unsigned int v1303 = *(_DWORD *)(v941 + 24);
                    StructType = (unsigned __int8 *)llvm::DIBuilder::createStructType((uint64_t)__dst, (unsigned char *)v926, "__coro_frame_ty", 0xFuLL, v943, v1303, 8 * *(void *)(v1290 + 224), 8 * (1 << *(unsigned char *)(v1290 + 216)), 0x40u, 0, 0, 0, 0, "", 0);
                    v1322 = StructType;
                    v946 = *(llvm::Instruction **)(v1290 + 208);
                    v1468 = &v1470;
                    uint64_t v1469 = v6;
                    uint64_t v947 = *((void *)v1279 + 5) + 272;
                    LOWORD(v1391) = 0;
                    WORD2(v1392) = 0;
                    long long v1395 = xmmword_1CD96EEC0;
                    v1394 = &v1396;
                    v1397 = v1399;
                    v1398 = (void **)v6;
                    memset(&v1406[10], 0, 24);
                    v1406[13] = v1407;
                    v1406[14] = 0x800000000;
                    v1407[16] = 0;
                    v1407[17] = &v1408;
                    v1407[18] = 0x800000000;
                    sub_1CB94E404((uint64_t)&v1390, v947);
                    p_s2 = 0;
                    uint64_t v1328 = 0;
                    LODWORD(v1329) = 0;
                    sub_1CD2DBACC((uint64_t)&v1461, (uint64_t)&__s2);
                    v948 = (llvm **)v1461.__r_.__value_.__r.__words[0];
                    v1306 = v946;
                    uint64_t v1293 = v944;
                    if (LODWORD(v1461.__r_.__value_.__r.__words[1]))
                    {
                      std::string::size_type v949 = v1461.__r_.__value_.__r.__words[0] + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1]);
                      while (1)
                      {
                        v950 = *v948;
                        if (!v1329) {
                          goto LABEL_1686;
                        }
                        unsigned int v951 = ((v950 >> 4) ^ (v950 >> 9)) & (v1329 - 1);
                        v952 = (llvm *)p_s2[2 * v951];
                        if (v950 != v952) {
                          break;
                        }
LABEL_1679:
                        if (v951 == v1329) {
                          goto LABEL_1686;
                        }
LABEL_1680:
                        if (++v948 == (llvm **)v949)
                        {
                          v948 = (llvm **)v1461.__r_.__value_.__r.__words[0];
                          goto LABEL_1699;
                        }
                      }
                      int v953 = 1;
                      while (v952 != (llvm *)-4096)
                      {
                        unsigned int v954 = v951 + v953++;
                        unsigned int v951 = v954 & (v1329 - 1);
                        v952 = (llvm *)p_s2[2 * v951];
                        if (v950 == v952) {
                          goto LABEL_1679;
                        }
                      }
LABEL_1686:
                      llvm::FindDbgDeclareUses(*v948, (unint64_t *)&v1320);
                      if ((v1320 & 4) != 0)
                      {
                        v955 = *(llvm::Value ***)((unint64_t)v1320 & 0xFFFFFFFFFFFFFFF8);
                        v956 = &v955[*(unsigned int *)(((unint64_t)v1320 & 0xFFFFFFFFFFFFFFF8) + 8)];
                      }
                      else
                      {
                        v955 = &v1320;
                        v956 = &v1320 + ((unint64_t)v1320 > 7);
                      }
                      if (v955 != v956)
                      {
                        do
                        {
                          if (((*(void *)(*(void *)(((void *)*v955 - 4 * (*((_DWORD *)*v955 + 5) & 0x7FFFFFF))[8]
                                                       + 24)
                                           + 32)
                               - *(void *)(*(void *)(((void *)*v955 - 4 * (*((_DWORD *)*v955 + 5) & 0x7FFFFFF))[8]
                                                       + 24)
                                           + 24)) & 0x7FFFFFFF8) == 0)
                            goto LABEL_1693;
                          ++v955;
                        }
                        while (v955 != v956);
                        v955 = v956;
                      }
LABEL_1693:
                      if ((v1320 & 4) != 0) {
                        v957 = (llvm::Value **)(*(void *)((unint64_t)v1320 & 0xFFFFFFFFFFFFFFF8)
                      }
                                              + 8
                                              * *(unsigned int *)(((unint64_t)v1320 & 0xFFFFFFFFFFFFFFF8) + 8));
                      else {
                        v957 = &v1320 + ((unint64_t)v1320 > 7);
                      }
                      if (v955 != v957)
                      {
                        uint64_t v958 = *(void *)(((void *)*v955 - 4 * (*((_DWORD *)*v955 + 5) & 0x7FFFFFF))[4] + 24);
                        uint64_t v1324 = (uint64_t)v950;
                        uint64_t v1325 = v958;
                        sub_1CD4729F8((uint64_t)&v1477, (uint64_t)&p_s2, &v1324, &v1325);
                      }
                      sub_1CD487110((uint64_t *)&v1320);
                      goto LABEL_1680;
                    }
LABEL_1699:
                    if (v948 != (llvm **)&v1461.__r_.__value_.__r.__words[2]) {
                      free(v948);
                    }
                    uint64_t v959 = *(unsigned int *)(v1290 + 280);
                    v1477 = 0;
                    uint64_t v1478 = 0;
                    LODWORD(v1479) = 0;
                    LODWORD(v1461.__r_.__value_.__l.__data_) = 0;
                    v1461.__r_.__value_.__l.__size_ = (std::string::size_type)"__resume_fn";
                    v1461.__r_.__value_.__r.__words[2] = 11;
                    sub_1CD8C5FC8((uint64_t)&v1477, &v1461, &v1461.__r_.__value_.__r.__words[1], (uint64_t)&v1324);
                    LODWORD(v1461.__r_.__value_.__l.__data_) = 1;
                    v1461.__r_.__value_.__l.__size_ = (std::string::size_type)"__destroy_fn";
                    v1461.__r_.__value_.__r.__words[2] = 12;
                    sub_1CD8C5FC8((uint64_t)&v1477, &v1461, &v1461.__r_.__value_.__r.__words[1], (uint64_t)&v1324);
                    LODWORD(v1461.__r_.__value_.__l.__data_) = v959;
                    v1461.__r_.__value_.__l.__size_ = (std::string::size_type)"__coro_index";
                    v1461.__r_.__value_.__r.__words[2] = 12;
                    sub_1CD8C5FC8((uint64_t)&v1477, &v1461, &v1461.__r_.__value_.__r.__words[1], (uint64_t)&v1324);
                    v960 = (uint64_t *)*((void *)v946 + 2);
                    uint64_t v961 = *v960;
                    uint64_t v962 = v960[1];
                    uint64_t v963 = v960[v959];
                    uint64_t v1324 = 0;
                    uint64_t v1325 = 0;
                    int v1326 = 0;
                    uint64_t v965 = sub_1CB83544C((uint64_t)&v1390, v961);
                    if (v964 == 1) {
                    BasicType = llvm::DIBuilder::createBasicType((uint64_t)__dst, "__resume_fn", (void *)0xB, v965, 1, 0);
                    }
                    LODWORD(v1320) = 0;
                    *(void *)&long long v1321 = BasicType;
                    sub_1CD4893B8((uint64_t)&v1461, (uint64_t)&v1324, &v1320, &v1321);
                    uint64_t v968 = sub_1CB83544C((uint64_t)&v1390, v962);
                    if (v967 == 1) {
                    v969 = llvm::DIBuilder::createBasicType((uint64_t)__dst, "__destroy_fn", (void *)0xC, v968, 1, 0);
                    }
                    LODWORD(v1320) = 1;
                    *(void *)&long long v1321 = v969;
                    sub_1CD4893B8((uint64_t)&v1461, (uint64_t)&v1324, &v1320, &v1321);
                    unint64_t v971 = sub_1CB83544C((uint64_t)&v1390, v963);
                    if (v970 == 1) {
                    uint64_t v972 = v1298;
                    }
                    if (v971 >= 8)
                    {
                      int v975 = sub_1CB83544C((uint64_t)&v1390, v963);
                      if (v974 == 1) {
                      uint64_t v973 = v975;
                      }
                    }
                    else
                    {
                      uint64_t v973 = 8;
                    }
                    v976 = llvm::DIBuilder::createBasicType((uint64_t)__dst, "__coro_index", (void *)0xC, v973, 8, 0);
                    LODWORD(v1320) = v959;
                    *(void *)&long long v1321 = v976;
                    sub_1CD4893B8((uint64_t)&v1461, (uint64_t)&v1324, &v1320, &v1321);
                    sub_1CD2DBACC((uint64_t)&v1461, (uint64_t)&__s2);
                    v977 = (std::string *)v1461.__r_.__value_.__r.__words[0];
                    if (LODWORD(v1461.__r_.__value_.__r.__words[1]))
                    {
                      std::string::size_type v978 = v1461.__r_.__value_.__r.__words[0] + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1]);
                      do
                      {
                        std::string::size_type v979 = v977->__r_.__value_.__r.__words[0];
                        v1316.__r_.__value_.__r.__words[0] = v977->__r_.__value_.__r.__words[0];
                        if (v1329)
                        {
                          unsigned int v980 = (v979 >> 4) ^ (v979 >> 9);
                          unsigned int v981 = v980 & (v1329 - 1);
                          v982 = p_s2[2 * v981];
                          if ((void *)v979 == v982)
                          {
LABEL_1716:
                            if (v981 != v1329)
                            {
                              if (v1351)
                              {
                                LODWORD(v984) = (v1351 - 1) & v980;
                                v983 = (uint64_t *)(v1350 + 16 * v984);
                                uint64_t v985 = *v983;
                                if (v979 != *v983)
                                {
                                  int v996 = 1;
                                  while (v985 != -4096)
                                  {
                                    int v997 = v984 + v996++;
                                    uint64_t v984 = v997 & (v1351 - 1);
                                    uint64_t v985 = *(void *)(v1350 + 16 * v984);
                                    if (v979 == v985)
                                    {
                                      v983 = (uint64_t *)(v1350 + 16 * v984);
                                      goto LABEL_1735;
                                    }
                                  }
                                  v983 = (uint64_t *)(v1350 + 16 * v1351);
LABEL_1735:
                                  std::string::size_type v7 = 0x2000000000;
                                }
                              }
                              else
                              {
                                v983 = (uint64_t *)v1350;
                              }
                              int v986 = *((_DWORD *)v983 + 2);
                              v987 = sub_1CD467E2C((uint64_t)&p_s2, (uint64_t *)&v1316);
                              uint64_t v988 = *(void *)(v987[1] - 8 * *(unsigned int *)(v987[1] + 8) + 8);
                              if (v988)
                              {
                                v990 = *(uint64_t **)(v988 + 8);
                                uint64_t v991 = *v990;
                                v989 = v990 + 3;
                                uint64_t v988 = v991;
                              }
                              else
                              {
                                v989 = 0;
                              }
                              LODWORD(v1320) = v986;
                              *(void *)&long long v1321 = v989;
                              *((void *)&v1321 + 1) = v988;
                              sub_1CD8C5FC8((uint64_t)&v1477, &v1320, &v1321, (uint64_t)&v1318);
                              v992 = sub_1CD467E2C((uint64_t)&p_s2, (uint64_t *)&v1316);
                              uint64_t v993 = *(void *)(v992[1] - 8 * *(unsigned int *)(v992[1] + 8) + 24);
                              LODWORD(v1318) = v986;
                              *((void *)&v1318 + 1) = v993;
                              sub_1CD4893B8((uint64_t)&v1320, (uint64_t)&v1324, &v1318, (void *)&v1318 + 1);
                            }
                          }
                          else
                          {
                            int v994 = 1;
                            while (v982 != (void *)-4096)
                            {
                              unsigned int v995 = v981 + v994++;
                              unsigned int v981 = v995 & (v1329 - 1);
                              v982 = p_s2[2 * v981];
                              if ((void *)v979 == v982) {
                                goto LABEL_1716;
                              }
                            }
                          }
                        }
                        v977 = (std::string *)((char *)v977 + 8);
                      }
                      while (v977 != (std::string *)v978);
                      v977 = (std::string *)v1461.__r_.__value_.__r.__words[0];
                      uint64_t v972 = v1298;
                      v946 = v1306;
                    }
                    if (v977 != (std::string *)&v1461.__r_.__value_.__r.__words[2]) {
                      free(v977);
                    }
                    v1320 = 0;
                    *(void *)&long long v1321 = 0;
                    DWORD2(v1321) = 0;
                    LODWORD(v1318) = 0;
                    *(void *)((char *)&v1318 + 4) = 8;
                    sub_1CCC8FC8C((uint64_t)&v1320, &v1318, (long long *)((char *)&v1318 + 4), (uint64_t)&v1461);
                    LODWORD(v1318) = 1;
                    *(void *)((char *)&v1318 + 4) = 0x800000008;
                    sub_1CCC8FC8C((uint64_t)&v1320, &v1318, (long long *)((char *)&v1318 + 4), (uint64_t)&v1461);
                    uint64_t v998 = *(void *)(v1290 + 284);
                    LODWORD(v1318) = v959;
                    *(void *)((char *)&v1318 + 4) = v998;
                    sub_1CCC8FC8C((uint64_t)&v1320, &v1318, (long long *)((char *)&v1318 + 4), (uint64_t)&v1461);
                    sub_1CD2DBACC((uint64_t)&v1461, (uint64_t)&__s2);
                    v999 = (std::string *)v1461.__r_.__value_.__r.__words[0];
                    if (LODWORD(v1461.__r_.__value_.__r.__words[1]))
                    {
                      std::string::size_type v1001 = v1461.__r_.__value_.__r.__words[0] + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1]);
                      uint64_t v1000 = v1303;
                      do
                      {
                        std::string::size_type v1002 = v999->__r_.__value_.__r.__words[0];
                        unsigned int v1003 = v999->__r_.__value_.__r.__words[0] >> 4;
                        if (v1351)
                        {
                          LODWORD(v1004) = (v1003 ^ (v1002 >> 9)) & (v1351 - 1);
                          v1005 = (uint64_t *)(v1350 + 16 * v1004);
                          uint64_t v1006 = *v1005;
                          if (v1002 == *v1005) {
                            goto LABEL_1748;
                          }
                          int v1007 = 1;
                          while (v1006 != -4096)
                          {
                            int v1008 = v1004 + v1007++;
                            uint64_t v1004 = v1008 & (v1351 - 1);
                            uint64_t v1006 = *(void *)(v1350 + 16 * v1004);
                            if (v1002 == v1006)
                            {
                              v1005 = (uint64_t *)(v1350 + 16 * v1004);
                              goto LABEL_1748;
                            }
                          }
                          v1005 = (uint64_t *)(v1350 + 16 * v1351);
                        }
                        else
                        {
                          v1005 = (uint64_t *)v1350;
                        }
LABEL_1748:
                        if (v1353)
                        {
                          LODWORD(v1009) = (v1353 - 1) & (v1003 ^ (v1002 >> 9));
                          v1010 = (uint64_t *)(v1352 + 16 * v1009);
                          uint64_t v1011 = *v1010;
                          if (v1002 == *v1010) {
                            goto LABEL_1755;
                          }
                          int v1012 = 1;
                          while (v1011 != -4096)
                          {
                            int v1013 = v1009 + v1012++;
                            uint64_t v1009 = v1013 & (v1353 - 1);
                            uint64_t v1011 = *(void *)(v1352 + 16 * v1009);
                            if (v1002 == v1011)
                            {
                              v1010 = (uint64_t *)(v1352 + 16 * v1009);
                              goto LABEL_1755;
                            }
                          }
                          v1010 = (uint64_t *)(v1352 + 16 * v1353);
                        }
                        else
                        {
                          v1010 = (uint64_t *)v1352;
                        }
LABEL_1755:
                        if (v1357)
                        {
                          LODWORD(v1014) = (v1357 - 1) & (v1003 ^ (v1002 >> 9));
                          v1015 = (uint64_t *)(v1356 + 16 * v1014);
                          uint64_t v1016 = *v1015;
                          if (v1002 == *v1015) {
                            goto LABEL_1762;
                          }
                          int v1017 = 1;
                          while (v1016 != -4096)
                          {
                            int v1018 = v1014 + v1017++;
                            uint64_t v1014 = v1018 & (v1357 - 1);
                            uint64_t v1016 = *(void *)(v1356 + 16 * v1014);
                            if (v1002 == v1016)
                            {
                              v1015 = (uint64_t *)(v1356 + 16 * v1014);
                              goto LABEL_1762;
                            }
                          }
                          v1015 = (uint64_t *)(v1356 + 16 * v1357);
                        }
                        else
                        {
                          v1015 = (uint64_t *)v1356;
                        }
LABEL_1762:
                        int v1019 = *((_DWORD *)v1005 + 2);
                        uint64_t v1020 = *((unsigned int *)v1010 + 2);
                        uint64_t v1021 = v1015[1];
                        LODWORD(v1316.__r_.__value_.__l.__data_) = v1019;
                        *(std::string::size_type *)((char *)v1316.__r_.__value_.__r.__words + 4) = v1020 | (v1021 << 32);
                        sub_1CCC8FC8C((uint64_t)&v1320, &v1316, (std::string::size_type *)((char *)v1316.__r_.__value_.__r.__words + 4), (uint64_t)&v1318);
                        v999 = (std::string *)((char *)v999 + 8);
                      }
                      while (v999 != (std::string *)v1001);
                      v999 = (std::string *)v1461.__r_.__value_.__r.__words[0];
                      uint64_t v972 = v1298;
                    }
                    else
                    {
                      uint64_t v1000 = v1303;
                    }
                    if (v999 != (std::string *)&v1461.__r_.__value_.__r.__words[2]) {
                      free(v999);
                    }
                    long long v1318 = 0uLL;
                    int v1319 = 0;
                    int v1317 = 0;
                    unsigned int v1022 = *((_DWORD *)v946 + 3);
                    if (!v1022)
                    {
LABEL_1770:
                      Impl = llvm::MDTuple::getImpl((uint64_t)__dst[1], v1468, v1469, 0, 1);
                      llvm::DIBuilder::replaceArrays((uint64_t)__dst, &v1322, Impl, 0);
                      v1024 = sub_1CC582A74((uint64_t *)__dst[1], (uint64_t)&v1447, (unsigned char *)v1286, "__coro_frame", 0xCuLL, 0, v972, v1000, (uint64_t)v1322, 1, 64, 0, 0);
                      if (*(unsigned char *)v1286 == 17)
                      {
                        uint64_t v1025 = *(void *)(v1286 - 8 * *(unsigned int *)(v1286 + 8) + 56);
                        if (v1025) {
                          v1026 = (char *)(v1025 - 8 * *(unsigned int *)(v1025 + 8));
                        }
                        else {
                          v1026 = 0;
                        }
                        v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1461.__r_.__value_.__r.__words[2];
                        v1461.__r_.__value_.__l.__size_ = v7;
                        sub_1CD8C63AC((uint64_t)&v1461, v1026, (char *)v1025);
                        if (LODWORD(v1461.__r_.__value_.__r.__words[1]) >= HIDWORD(v1461.__r_.__value_.__r.__words[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(v1461.__r_.__value_.__r.__words[0]
                                  + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1])) = v1024;
                        ++LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        v1064 = llvm::MDTuple::getImpl(**(void **)v1279, v1461.__r_.__value_.__l.__data_, LODWORD(v1461.__r_.__value_.__r.__words[1]), 0, 1);
                        llvm::MDNode::replaceOperandWith((llvm::MDNode *)v1286, 7, v1064);
                        if ((std::string::size_type *)v1461.__r_.__value_.__l.__data_ != &v1461.__r_.__value_.__r.__words[2]) {
                          free(v1461.__r_.__value_.__l.__data_);
                        }
                      }
                      v1065 = *(llvm::ValueAsMetadata **)(v1290 + 232);
                      v1066 = llvm::DIExpression::getImpl((void *)__dst[1], 0, 0, 0, 1);
                      uint64_t v1067 = sub_1CD2DF718(v1290);
                      llvm::DIBuilder::insertDeclare((uint64_t)__dst, v1065, (uint64_t)v1024, (uint64_t)v1066, v1293, *(void *)(v1067 + 40), v1067);
                      MEMORY[0x1D25D9CD0](v1318, 8);
                      MEMORY[0x1D25D9CD0](v1320, 4);
                      MEMORY[0x1D25D9CD0](v1324, 8);
                      MEMORY[0x1D25D9CD0](v1477, 8);
                      MEMORY[0x1D25D9CD0](p_s2, 8);
                      llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v1390);
                      uint64_t v411 = (uint64_t)__dst;
                      if (v1468 != &v1470) {
                        free(v1468);
                      }
LABEL_1845:
                      sub_1CD487110((uint64_t *)&v1323);
                      sub_1CC2DBB1C((uint64_t)__dst);
LABEL_1846:
                      v1320 = *(llvm::Value **)v1290;
                      v1068 = **(void ***)v1320;
                      v1390 = &v1392;
                      v1391 = (void *)v4;
                      *(void *)__vale = v1068;
                      v1397 = v1068;
                      v1398 = &v1405;
                      v1399[0] = v1406;
                      v1399[1] = 0;
                      int v1400 = 0;
                      __int16 v1401 = 512;
                      char v1402 = 7;
                      uint64_t v1396 = 0;
                      *((void *)&v1395 + 1) = 0;
                      uint64_t v1404 = 0;
                      uint64_t v1403 = 0;
                      v1405 = &unk_1F2616E88;
                      v1406[0] = &unk_1F2617008;
                      *(void *)&long long v1318 = *(void *)(v1290 + 208);
                      v1316.__r_.__value_.__r.__words[0] = *(void *)(v1290 + 232);
                      uint64_t v1069 = *(void *)(*((void *)v1320 + 5) + 56);
                      v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1461.__r_.__value_.__r.__words[2];
                      v1461.__r_.__value_.__l.__size_ = 0x100000000;
                      int v1467 = 0;
                      uint64_t v1463 = 0;
                      uint64_t v1462 = 0;
                      int v1464 = 0;
                      *(unsigned char *)(v411 + 1408) = 0;
                      uint64_t v1465 = 0;
                      uint64_t v1466 = v1069;
                      sub_1CC5A43B0((uint64_t)&v1461, 0);
                      v1468 = (void *)v5;
                      for (uint64_t i4 = 8; i4 != 72; i4 += 16)
                        *(void **)((char *)&v1468 + i4) = (void *)-4096;
                      p_s2 = &__s2;
                      uint64_t v1328 = *(void *)__vale;
                      v1329 = &v1390;
                      v1330 = &v1318;
                      v1331 = &v1316;
                      if (!v1344)
                      {
LABEL_1849:
                        uint64_t v1071 = *(void *)(sub_1CD2DF718(v1290) + 40);
                        uint64_t v1072 = sub_1CD2DF718(v1290);
                        __dst[0] = "AllocaSpillBB";
                        LOWORD(v1413) = 259;
                        llvm::BasicBlock::splitBasicBlock(v1071, v1072 + 24, (uint64_t)__dst, 0);
                      }
                      v1073 = v1343;
                      v1296 = (llvm::SmallPtrSetImplBase *)&v1343[5 * v1344];
                      while (2)
                      {
                        v1074 = (uint64_t ***)*v1073;
                        unsigned int v1075 = *v1073 >> 4;
                        if (v1353)
                        {
                          LODWORD(v1076) = (v1075 ^ (v1074 >> 9)) & (v1353 - 1);
                          v1077 = (uint64_t ****)(v1352 + 16 * v1076);
                          v1078 = *v1077;
                          if (v1074 == *v1077) {
                            goto LABEL_1858;
                          }
                          int v1079 = 1;
                          while (v1078 != (uint64_t ***)-4096)
                          {
                            int v1080 = v1076 + v1079++;
                            uint64_t v1076 = v1080 & (v1353 - 1);
                            v1078 = *(uint64_t ****)(v1352 + 16 * v1076);
                            if (v1074 == v1078)
                            {
                              v1077 = (uint64_t ****)(v1352 + 16 * v1076);
                              goto LABEL_1858;
                            }
                          }
                          v1077 = (uint64_t ****)(v1352 + 16 * v1353);
                        }
                        else
                        {
                          v1077 = (uint64_t ****)v1352;
                        }
LABEL_1858:
                        unint64_t v1081 = (unint64_t)v1077[1];
                        if (*((unsigned char *)v1074 + 16) != 21 || v1074 == 0)
                        {
                          if (sub_1CD2DAE24(*v1073))
                          {
                            uint64_t v1083 = llvm::BasicBlock::getSingleSuccessor((llvm::BasicBlock *)v1074[5]);
                            uint64_t v1084 = *(void *)(v1083 + 48);
                            if (v1084 != v1083 + 40)
                            {
                              while (1)
                              {
                                uint64_t v1086 = v1084 - 24;
                                uint64_t v1085 = v1084 ? v1084 - 24 : 0;
                                if (*(unsigned char *)(v1085 + 16) != 83) {
                                  goto LABEL_1903;
                                }
                                ParamByValType = 0;
                                uint64_t v1086 = 0;
                                uint64_t v1084 = *(void *)(v1084 + 8);
                                if (v1084 == v1083 + 40) {
                                  goto LABEL_1904;
                                }
                              }
                            }
                          }
                          else
                          {
                            if ((llvm::DominatorTree::dominates((llvm::DominatorTree *)&v1461, v1320, (const llvm::Instruction *)v1074) & 1) == 0)
                            {
                              uint64_t v1086 = sub_1CD2DF718(v1290);
                              goto LABEL_1903;
                            }
                            int v1095 = *((unsigned __int8 *)v1074 + 16);
                            if (v1095 != 33 || v1074 == 0)
                            {
                              if (v1095 == 83)
                              {
                                v1097 = v1074[5];
                                v1100 = v1097[5];
                                v1098 = (uint64_t *)(v1097 + 5);
                                v1099 = v1100;
                                if (v1100 != v1098)
                                {
                                  uint64_t v1101 = v1099 ? (uint64_t)(v1099 - 3) : 0;
                                  unsigned int v1102 = *(unsigned __int8 *)(v1101 + 16) - 40;
                                  uint64_t v1103 = v1102 >= 0xFFFFFFF5 ? v1101 : 0;
                                  if (v1099)
                                  {
                                    if (*(unsigned char *)(v1103 + 16) == 38 && v1102 >= 0xFFFFFFF5)
                                    {
                                      uint64_t v1251 = *(void *)(v1103 + 40);
                                      LOWORD(v1413) = 257;
                                      llvm::BasicBlock::splitBasicBlock(v1251, v1103 + 24, (uint64_t)__dst, 0);
                                    }
                                  }
                                }
                                for (i5 = v1074[5][6]; ; i5 = (uint64_t *)i5[1])
                                {
                                  if (i5 == v1098) {
                                    goto LABEL_2073;
                                  }
                                  v1106 = i5 - 3;
                                  if (!i5) {
                                    v1106 = 0;
                                  }
                                  if (*((unsigned char *)v1106 + 16) != 83) {
                                    break;
                                  }
                                }
                                unsigned int v1238 = *((unsigned __int8 *)i5 - 8) - 38;
                                BOOL v291 = v1238 > 0x38;
                                uint64_t v1239 = (1 << v1238) & 0x100060000000001;
                                if (v291 || v1239 == 0) {
                                  v1098 = i5;
                                }
                                else {
                                  v1098 = (uint64_t *)i5[1];
                                }
LABEL_2073:
                                ParamByValType = 0;
                                if (v1098) {
                                  uint64_t v1086 = (uint64_t)(v1098 - 3);
                                }
                                else {
                                  uint64_t v1086 = 0;
                                }
                              }
                              else
                              {
                                ParamByValType = 0;
                                v1233 = v1074[4];
                                if (v1233) {
                                  BOOL v1234 = v1233 == v1074[5] + 5;
                                }
                                else {
                                  BOOL v1234 = 1;
                                }
                                if (v1234) {
                                  uint64_t v1086 = 0;
                                }
                                else {
                                  uint64_t v1086 = (uint64_t)(v1233 - 3);
                                }
                              }
                              goto LABEL_1904;
                            }
                            v1244 = (llvm *)v1074[5];
                            v1245 = (llvm::BasicBlock *)*(v1074 - 12);
                            LOWORD(v1413) = 257;
                            uint64_t v1246 = llvm::SplitEdge(v1244, v1245, 0, 0, 0, (llvm::MemorySSAUpdater *)__dst, v1094);
                            uint64_t v1247 = *(void *)(v1246 + 40);
                            if (v1247 != v1246 + 40)
                            {
                              ParamByValType = 0;
                              if (v1247) {
                                uint64_t v1248 = v1247 - 24;
                              }
                              else {
                                uint64_t v1248 = 0;
                              }
                              if (*(unsigned __int8 *)(v1248 + 16) - 29 >= 0xB) {
                                uint64_t v1086 = 0;
                              }
                              else {
                                uint64_t v1086 = v1248;
                              }
                              goto LABEL_1904;
                            }
                          }
                          ParamByValType = 0;
                          uint64_t v1086 = 0;
                          goto LABEL_1904;
                        }
                        uint64_t v1086 = sub_1CD2DF718(v1290);
                        v1087 = (uint64_t *)v1074[3];
                        v1087[14] = llvm::AttributeList::removeAttributeAtIndex(v1087 + 14, *(uint64_t **)*v1087, *((_DWORD *)v1074 + 8) + 1, 22);
                        if (*((unsigned char *)*v1074 + 8) == 15)
                        {
                          v1088 = v1074[3];
                          v1091 = v1088[14];
                          v1089 = (llvm::AttributeList *)(v1088 + 14);
                          v1090 = v1091;
                          if (v1091)
                          {
                            int v1092 = *((_DWORD *)v1074 + 8);
                            if ((v1092 + 2) < *((_DWORD *)v1090 + 2))
                            {
                              uint64_t v1093 = v1090[(v1092 + 2) + 5];
                              if (v1093)
                              {
                                if ((*(unsigned char *)(v1093 + 20) & 0x20) != 0)
                                {
                                  ParamByValType = (llvm::Instruction *)llvm::AttributeList::getParamByValType(v1089, v1092);
                                  goto LABEL_1904;
                                }
                              }
                            }
                          }
                        }
LABEL_1903:
                        ParamByValType = 0;
LABEL_1904:
                        if (v1351)
                        {
                          LODWORD(v1107) = (v1351 - 1) & (v1075 ^ (v1074 >> 9));
                          uint64_t v1108 = v1350 + 16 * v1107;
                          v1109 = *(uint64_t ****)v1108;
                          if (v1074 == *(uint64_t ****)v1108) {
                            goto LABEL_1911;
                          }
                          int v1110 = 1;
                          while (v1109 != (uint64_t ***)-4096)
                          {
                            int v1111 = v1107 + v1110++;
                            uint64_t v1107 = v1111 & (v1351 - 1);
                            v1109 = *(uint64_t ****)(v1350 + 16 * v1107);
                            if (v1074 == v1109)
                            {
                              uint64_t v1108 = v1350 + 16 * v1107;
                              goto LABEL_1911;
                            }
                          }
                          uint64_t v1108 = v1350 + 16 * v1351;
                        }
                        else
                        {
                          uint64_t v1108 = v1350;
                        }
LABEL_1911:
                        unsigned int v1112 = *(_DWORD *)(v1108 + 8);
                        *((void *)&v1395 + 1) = *(void *)(v1086 + 40);
                        uint64_t v1396 = v1086 + 24;
                        v1113 = *(llvm::DominatorTree **)(v1086 + 48);
                        v1477 = (void **)v1113;
                        if (v1113)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v1477, (unsigned __int8 *)v1113, 2);
                          v1114 = (llvm::DominatorTree *)v1477;
                        }
                        else
                        {
                          v1114 = 0;
                        }
                        sub_1CB8461A4((uint64_t)&v1390, 0, (uint64_t)v1114);
                        if (v1477)
                        {
                          int v1235 = *(unsigned __int8 *)v1477;
                          if ((v1235 - 4) > 0x1E)
                          {
                            if ((v1235 - 3) >= 0xFFFFFFFE) {
                              v1243 = v1477;
                            }
                            else {
                              v1243 = 0;
                            }
                            if ((v1235 - 3) < 0xFFFFFFFE)
                            {
                              if (v1235 == 3) {
                                v1477[1] = 0;
                              }
                              goto LABEL_1914;
                            }
                            unint64_t v1237 = (unint64_t)(v1243 + 1);
                          }
                          else
                          {
                            if ((*((unsigned char *)v1477 + 1) & 0x7F) != 2 && !*((_DWORD *)v1477 + 3)) {
                              goto LABEL_1914;
                            }
                            unint64_t v1236 = (unint64_t)v1477[2];
                            if ((v1236 & 4) == 0) {
                              goto LABEL_1914;
                            }
                            unint64_t v1237 = v1236 & 0xFFFFFFFFFFFFFFF8;
                            if (!v1237) {
                              goto LABEL_1914;
                            }
                          }
                          __dst[0] = &v1477;
                          sub_1CC5FA668(v1237 + 16, __dst);
                        }
LABEL_1914:
                        if ((*((unsigned char *)v1074 + 23) & 0x10) != 0)
                        {
                          uint64_t v1115 = ***v1074;
                          uint64_t v1116 = *(void *)(v1115 + 152);
                          uint64_t v1117 = *(unsigned int *)(v1115 + 168);
                          if (v1117)
                          {
                            LODWORD(v1118) = (v1117 - 1) & (v1075 ^ (v1074 >> 9));
                            v1119 = (uint64_t ****)(v1116 + 16 * v1118);
                            v1120 = *v1119;
                            if (*v1119 != v1074)
                            {
                              int v1121 = 1;
                              do
                              {
                                if (v1120 == (uint64_t ***)-4096) {
                                  goto LABEL_1921;
                                }
                                int v1122 = v1118 + v1121++;
                                uint64_t v1118 = v1122 & (v1117 - 1);
                                v1120 = *(uint64_t ****)(v1116 + 16 * v1118);
                              }
                              while (v1120 != v1074);
                              v1119 = (uint64_t ****)(v1116 + 16 * v1118);
                            }
                          }
                          else
                          {
LABEL_1921:
                            v1119 = (uint64_t ****)(v1116 + 16 * v1117);
                          }
                          v1123 = v1119[1];
                          v1126 = *v1123;
                          v1125 = (char *)(v1123 + 2);
                          v1124 = v1126;
                        }
                        else
                        {
                          v1124 = 0;
                          v1125 = &byte_1CFBCE98E;
                        }
                        char v1127 = 63 - __clz(v1081);
                        __dst[0] = v1125;
                        __dst[1] = v1124;
                        __dst[2] = ".spill.addr";
                        LOWORD(v1413) = 773;
                        v1128 = sub_1CC5812D4((uint64_t *)&v1390, v1318, (const llvm::APInt *)v1316.__r_.__value_.__l.__data_, 0, v1112, (uint64_t)__dst);
                        if (ParamByValType)
                        {
                          __int16 v1480 = 257;
                          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)&v1395 + 1) + 56)+ 40)+ 272), ParamByValType, 1);
                          v1130 = (char *)operator new(0x60uLL);
                          *((_DWORD *)v1130 + 13) = *((_DWORD *)v1130 + 13) & 0x38000000 | 1;
                          v1131 = (llvm::Instruction *)(v1130 + 32);
                          *(void *)v1130 = 0;
                          *((void *)v1130 + 1) = 0;
                          *((void *)v1130 + 2) = 0;
                          *((void *)v1130 + 3) = v1130 + 32;
                          LOWORD(v1413) = 257;
                          llvm::LoadInst::LoadInst((llvm::Value *)(v1130 + 32), (uint64_t)ParamByValType, (uint64_t)v1074, (const char **)__dst, 0, Alignment, 0);
                          (*(void (**)(void, char *, void ***, void, uint64_t))(*(void *)v1399[0] + 16))(v1399[0], v1130 + 32, &v1477, *((void *)&v1395 + 1), v1396);
                          if (v1391)
                          {
                            v1241 = (llvm::MDNode **)v1390;
                            v1242 = (llvm::MDNode **)((char *)v1390 + 16 * v1391);
                            do
                            {
                              llvm::Instruction::setMetadata(v1131, *(_DWORD *)v1241, v1241[1]);
                              v1241 += 2;
                            }
                            while (v1241 != v1242);
                          }
                          v1132 = (char *)operator new(0x80uLL);
                          *((_DWORD *)v1132 + 21) = *((_DWORD *)v1132 + 21) & 0x38000000 | 2;
                          *(void *)v1132 = 0;
                          *((void *)v1132 + 2) = 0;
                          *((void *)v1132 + 1) = 0;
                          *((void *)v1132 + 5) = 0;
                          *((void *)v1132 + 6) = 0;
                          *((void *)v1132 + 4) = 0;
                          *((void *)v1132 + 8) = ***((void ***)v1130 + 4) + 1576;
                          v1133 = (llvm::Instruction *)(v1132 + 64);
                          *((void *)v1132 + 3) = v1132 + 64;
                          *((void *)v1132 + 7) = v1132 + 64;
                          *((void *)v1132 + 9) = 0;
                          v1132[80] = 61;
                          v1132[81] = 0;
                          *((_DWORD *)v1132 + 21) = 2;
                          *(_OWORD *)(v1132 + 88) = 0u;
                          *(_OWORD *)(v1132 + 104) = 0u;
                          *((_DWORD *)v1132 + 30) = 0;
                          uint64_t v1136 = *((void *)v1130 + 5);
                          v1135 = v1130 + 40;
                          uint64_t v1134 = v1136;
                          *(void *)v1132 = v1131;
                          *((void *)v1132 + 1) = v1136;
                          if (v1136) {
                            *(void *)(v1134 + 16) = v1132 + 8;
                          }
                          *((void *)v1132 + 2) = v1135;
                          void *v1135 = v1132;
                          *((void *)v1132 + 4) = v1128;
                          if (v1128)
                          {
                            v1139 = v1128[1];
                            v1138 = v1128 + 1;
                            v1137 = v1139;
                            *((void *)v1132 + 5) = v1139;
                            if (v1139) {
                              v1137[2] = (uint64_t *)(v1132 + 40);
                            }
                            *((void *)v1132 + 6) = v1138;
                            void *v1138 = v1132 + 32;
                          }
                          *((_WORD *)v1132 + 41) = 2 * (v1127 & 0x3F);
                          v1132[124] = 1;
                          LOWORD(v1413) = 257;
                          (*(void (**)(void, llvm::Instruction *, void **, void, uint64_t))(*(void *)v1399[0] + 16))(v1399[0], v1133, __dst, *((void *)&v1395 + 1), v1396);
                          if (v1391)
                          {
                            v1140 = (llvm::MDNode **)v1390;
                            v1141 = (llvm::MDNode **)((char *)v1390 + 16 * v1391);
                            do
                            {
                              llvm::Instruction::setMetadata(v1133, *(_DWORD *)v1140, v1140[1]);
                              v1140 += 2;
                            }
                            while (v1140 != v1141);
                          }
                        }
                        else
                        {
                          v1142 = (char *)operator new(0x80uLL);
                          *((_DWORD *)v1142 + 21) = *((_DWORD *)v1142 + 21) & 0x38000000 | 2;
                          *(void *)v1142 = 0;
                          *((void *)v1142 + 2) = 0;
                          *((void *)v1142 + 1) = 0;
                          *((void *)v1142 + 5) = 0;
                          *((void *)v1142 + 6) = 0;
                          *((void *)v1142 + 4) = 0;
                          v1143 = (uint64_t ****)(v1142 + 32);
                          *((void *)v1142 + 8) = ***v1074 + 1576;
                          v1144 = (llvm::Instruction *)(v1142 + 64);
                          *((void *)v1142 + 3) = v1142 + 64;
                          *((void *)v1142 + 7) = v1142 + 64;
                          *((void *)v1142 + 9) = 0;
                          v1142[80] = 61;
                          v1142[81] = 0;
                          *((_WORD *)v1142 + 41) = 0;
                          *((_DWORD *)v1142 + 21) = 2;
                          *(_OWORD *)(v1142 + 88) = 0u;
                          *(_OWORD *)(v1142 + 104) = 0u;
                          *((_DWORD *)v1142 + 30) = 0;
                          *(void *)v1142 = v1074;
                          v1145 = v1074 + 1;
                          v1146 = v1074[1];
                          *((void *)v1142 + 1) = v1146;
                          if (v1146) {
                            v1146[2] = (uint64_t *)(v1142 + 8);
                          }
                          *((void *)v1142 + 2) = v1145;
                          void *v1145 = v1142;
                          if (*((void *)v1142 + 4))
                          {
                            **((void **)v1142 + 6) = *((void *)v1142 + 5);
                            uint64_t v1252 = *((void *)v1142 + 5);
                            if (v1252) {
                              *(void *)(v1252 + 16) = *((void *)v1142 + 6);
                            }
                          }
                          *v1143 = v1128;
                          if (v1128)
                          {
                            v1149 = v1128[1];
                            v1148 = (uint64_t *****)(v1128 + 1);
                            v1147 = v1149;
                            *((void *)v1142 + 5) = v1149;
                            if (v1149) {
                              v1147[2] = (uint64_t *)(v1142 + 40);
                            }
                            *((void *)v1142 + 6) = v1148;
                            *v1148 = v1143;
                          }
                          *((_WORD *)v1142 + 41) = 2 * (v1127 & 0x3F);
                          v1142[124] = 1;
                          LOWORD(v1413) = 257;
                          (*(void (**)(void, llvm::Instruction *, void **, void, uint64_t))(*(void *)v1399[0] + 16))(v1399[0], v1144, __dst, *((void *)&v1395 + 1), v1396);
                          if (v1391)
                          {
                            v1249 = (llvm::MDNode **)v1390;
                            v1250 = (llvm::MDNode **)((char *)v1390 + 16 * v1391);
                            do
                            {
                              llvm::Instruction::setMetadata(v1144, *(_DWORD *)v1249, v1249[1]);
                              v1249 += 2;
                            }
                            while (v1249 != v1250);
                          }
                        }
                        uint64_t v1150 = *((unsigned int *)v1073 + 4);
                        if (!v1150)
                        {
LABEL_2052:
                          v1073 += 5;
                          if (v1073 == (uint64_t *)v1296) {
                            goto LABEL_1849;
                          }
                          continue;
                        }
                        break;
                      }
                      uint64_t v1151 = 0;
                      v1152 = 0;
                      v1153 = (llvm::ValueAsMetadata **)v1073[1];
                      v1154 = &v1153[v1150];
                      char v1299 = v1127;
                      v1304 = v1074;
                      while (2)
                      {
                        v1155 = *v1153;
                        uint64_t v1156 = *((void *)*v1153 + 5);
                        if (v1151 == v1156)
                        {
LABEL_1946:
                          BOOL v1157 = sub_1CD2E0564((uint64_t)v1155);
                          if (v1155) {
                            BOOL v1158 = !v1157;
                          }
                          else {
                            BOOL v1158 = 1;
                          }
                          if (!v1158) {
                            sub_1CD2CE4C4(&v1468, (uint64_t)v1155, *(unsigned char *)(v1290 + 248));
                          }
                          if (v1155 && *((unsigned char *)v1155 + 16) == 83)
                          {
                            llvm::Value::doRAUW(v1155, v1152, (llvm::Value *)1);
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                          }
                          llvm::User::replaceUsesOfWith(v1155, (llvm::Value *)v1074, v1152);
                          if (++v1153 == v1154) {
                            goto LABEL_2052;
                          }
                          continue;
                        }
                        break;
                      }
                      uint64_t v1159 = v1156 + 40;
                      uint64_t v1160 = *(void *)(v1156 + 48);
                      if (v1160 == v1156 + 40)
                      {
                        v1161 = ParamByValType;
                      }
                      else
                      {
                        v1161 = ParamByValType;
                        while (1)
                        {
                          uint64_t v1162 = v1160 - 24;
                          if (!v1160) {
                            uint64_t v1162 = 0;
                          }
                          if (*(unsigned char *)(v1162 + 16) != 83) {
                            break;
                          }
                          uint64_t v1160 = *(void *)(v1160 + 8);
                          if (v1160 == v1159) {
                            goto LABEL_1969;
                          }
                        }
                        unsigned int v1163 = *(unsigned __int8 *)(v1160 - 8) - 38;
                        BOOL v291 = v1163 > 0x38;
                        uint64_t v1164 = (1 << v1163) & 0x100060000000001;
                        if (v291 || v1164 == 0) {
                          uint64_t v1159 = v1160;
                        }
                        else {
                          uint64_t v1159 = *(void *)(v1160 + 8);
                        }
                      }
LABEL_1969:
                      v1166 = 0;
                      if (v1159) {
                        uint64_t v1167 = v1159 - 24;
                      }
                      else {
                        uint64_t v1167 = 0;
                      }
                      *((void *)&v1395 + 1) = *(void *)(v1167 + 40);
                      uint64_t v1396 = v1167 + 24;
                      v1168 = *(llvm::DominatorTree **)(v1167 + 48);
                      v1477 = (void **)v1168;
                      if (v1168)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v1477, (unsigned __int8 *)v1168, 2);
                        v1166 = (llvm::DominatorTree *)v1477;
                      }
                      sub_1CB8461A4((uint64_t)&v1390, 0, (uint64_t)v1166);
                      if (v1477)
                      {
                        int v1206 = *(unsigned __int8 *)v1477;
                        if ((v1206 - 4) > 0x1E)
                        {
                          if ((v1206 - 3) >= 0xFFFFFFFE) {
                            v1209 = v1477;
                          }
                          else {
                            v1209 = 0;
                          }
                          if ((v1206 - 3) < 0xFFFFFFFE)
                          {
                            if (v1206 == 3) {
                              v1477[1] = 0;
                            }
                            goto LABEL_1975;
                          }
                          unint64_t v1208 = (unint64_t)(v1209 + 1);
                        }
                        else
                        {
                          if ((*((unsigned char *)v1477 + 1) & 0x7F) != 2 && !*((_DWORD *)v1477 + 3)) {
                            goto LABEL_1975;
                          }
                          unint64_t v1207 = (unint64_t)v1477[2];
                          if ((v1207 & 4) == 0) {
                            goto LABEL_1975;
                          }
                          unint64_t v1208 = v1207 & 0xFFFFFFFFFFFFFFF8;
                          if (!v1208) {
                            goto LABEL_1975;
                          }
                        }
                        __dst[0] = &v1477;
                        sub_1CC5FA668(v1208 + 16, __dst);
                      }
LABEL_1975:
                      v1170 = sub_1CD2DFABC((unsigned int **)&p_s2, *v1073, v1169);
                      uint64_t v1171 = (uint64_t)v1170;
                      v1172 = (uint64_t ***)*v1073;
                      if ((*(unsigned char *)(*v1073 + 23) & 0x10) != 0)
                      {
                        uint64_t v1173 = ***v1172;
                        uint64_t v1174 = *(void *)(v1173 + 152);
                        uint64_t v1175 = *(unsigned int *)(v1173 + 168);
                        if (v1175)
                        {
                          LODWORD(v1176) = (v1175 - 1) & ((v1172 >> 4) ^ (v1172 >> 9));
                          v1177 = (uint64_t ****)(v1174 + 16 * v1176);
                          v1178 = *v1177;
                          if (*v1177 != v1172)
                          {
                            int v1179 = 1;
                            do
                            {
                              if (v1178 == (uint64_t ***)-4096) {
                                goto LABEL_1982;
                              }
                              int v1180 = v1176 + v1179++;
                              uint64_t v1176 = v1180 & (v1175 - 1);
                              v1178 = *(uint64_t ****)(v1174 + 16 * v1176);
                            }
                            while (v1178 != v1172);
                            v1177 = (uint64_t ****)(v1174 + 16 * v1176);
                          }
                        }
                        else
                        {
LABEL_1982:
                          v1177 = (uint64_t ****)(v1174 + 16 * v1175);
                        }
                        v1181 = v1177[1];
                        v1184 = *v1181;
                        v1183 = (char *)(v1181 + 2);
                        v1182 = v1184;
                      }
                      else
                      {
                        v1182 = 0;
                        v1183 = &byte_1CFBCE98E;
                      }
                      __dst[0] = v1183;
                      __dst[1] = v1182;
                      __dst[2] = ".reload.addr";
                      LOWORD(v1413) = 773;
                      llvm::Value::setNameImpl((llvm::Value *)v1170, (const char **)__dst);
                      if (v1171 && !*(unsigned char *)(v1171 + 16))
                      {
                        if ((*(unsigned char *)(v1171 + 23) & 0x10) == 0) {
                          goto LABEL_2034;
                        }
                        uint64_t v1210 = ***(void ***)v1171;
                        uint64_t v1211 = *(void *)(v1210 + 152);
                        uint64_t v1212 = *(unsigned int *)(v1210 + 168);
                        if (v1212)
                        {
                          LODWORD(v1213) = (v1212 - 1) & ((v1171 >> 4) ^ (v1171 >> 9));
                          v1214 = (uint64_t *)(v1211 + 16 * v1213);
                          uint64_t v1215 = *v1214;
                          if (*v1214 != v1171)
                          {
                            int v1216 = 1;
                            do
                            {
                              if (v1215 == -4096) {
                                goto LABEL_2026;
                              }
                              int v1217 = v1213 + v1216++;
                              uint64_t v1213 = v1217 & (v1212 - 1);
                              uint64_t v1215 = *(void *)(v1211 + 16 * v1213);
                            }
                            while (v1215 != v1171);
                            v1214 = (uint64_t *)(v1211 + 16 * v1213);
                          }
                        }
                        else
                        {
LABEL_2026:
                          v1214 = (uint64_t *)(v1211 + 16 * v1212);
                        }
                        v1218 = (void *)v1214[1];
                        unint64_t v1221 = *v1218;
                        v1219 = v1218 + 2;
                        unint64_t v1220 = v1221;
                        if (v1221 >= 5
                          && (*(_DWORD *)v1219 == *(_DWORD *)"llvm." ? (BOOL v1222 = v1219[4] == aLlvm_1[4]) : (BOOL v1222 = 0),
                              v1222))
                        {
                          *(_DWORD *)(v1171 + 32) |= 0x2000u;
                          int v1223 = llvm::Function::lookupIntrinsicID(v1219, v1220);
                        }
                        else
                        {
LABEL_2034:
                          int v1223 = 0;
                          *(_DWORD *)(v1171 + 32) &= ~0x2000u;
                        }
                        *(_DWORD *)(v1171 + 36) = v1223;
                        if (v1161) {
                          goto LABEL_2036;
                        }
LABEL_1987:
                        uint64_t v1185 = *v1073;
                        unsigned int v1186 = *v1073 >> 4;
                        if (!v1351)
                        {
                          v1187 = (uint64_t *)v1350;
                          goto LABEL_1990;
                        }
                        LODWORD(v1188) = (v1186 ^ (v1185 >> 9)) & (v1351 - 1);
                        v1187 = (uint64_t *)(v1350 + 16 * v1188);
                        uint64_t v1189 = *v1187;
                        if (v1185 != *v1187)
                        {
                          int v1231 = 1;
                          while (v1189 != -4096)
                          {
                            int v1232 = v1188 + v1231++;
                            uint64_t v1188 = v1232 & (v1351 - 1);
                            uint64_t v1189 = *(void *)(v1350 + 16 * v1188);
                            if (v1185 == v1189)
                            {
                              v1187 = (uint64_t *)(v1350 + 16 * v1188);
                              goto LABEL_1990;
                            }
                          }
                          v1187 = (uint64_t *)(v1350 + 16 * v1351);
                        }
LABEL_1990:
                        if ((*(unsigned char *)(v1185 + 23) & 0x10) != 0)
                        {
                          uint64_t v1190 = ***(void ***)v1185;
                          uint64_t v1191 = *(void *)(v1190 + 152);
                          uint64_t v1192 = *(unsigned int *)(v1190 + 168);
                          if (v1192)
                          {
                            LODWORD(v1193) = (v1192 - 1) & (v1186 ^ (v1185 >> 9));
                            v1194 = (uint64_t *)(v1191 + 16 * v1193);
                            uint64_t v1195 = *v1194;
                            if (*v1194 != v1185)
                            {
                              int v1196 = 1;
                              do
                              {
                                if (v1195 == -4096) {
                                  goto LABEL_1997;
                                }
                                int v1197 = v1193 + v1196++;
                                uint64_t v1193 = v1197 & (v1192 - 1);
                                uint64_t v1195 = *(void *)(v1191 + 16 * v1193);
                              }
                              while (v1195 != v1185);
                              v1194 = (uint64_t *)(v1191 + 16 * v1193);
                            }
                          }
                          else
                          {
LABEL_1997:
                            v1194 = (uint64_t *)(v1191 + 16 * v1192);
                          }
                          v1198 = (uint64_t *)v1194[1];
                          uint64_t v1201 = *v1198;
                          v1200 = (llvm::DominatorTree *)(v1198 + 2);
                          uint64_t v1199 = v1201;
                        }
                        else
                        {
                          uint64_t v1199 = 0;
                          v1200 = (llvm::DominatorTree *)&byte_1CFBCE98E;
                        }
                        uint64_t v1202 = *(void *)(*(void *)(v1318 + 16) + 8 * *((unsigned int *)v1187 + 2));
                        v1477 = (void **)v1200;
                        uint64_t v1478 = v1199;
                        v1479 = ".reload";
                        __int16 v1480 = 773;
                        v1203 = operator new(0x60uLL);
                        v1203[13] = v1203[13] & 0x38000000 | 1;
                        v1152 = (llvm::Value *)(v1203 + 8);
                        *(void *)v1203 = 0;
                        *((void *)v1203 + 1) = 0;
                        *((void *)v1203 + 2) = 0;
                        *((void *)v1203 + 3) = v1203 + 8;
                        LOWORD(v1413) = 257;
                        llvm::LoadInst::LoadInst((llvm::Value *)(v1203 + 8), v1202, v1171, (const char **)__dst, 0, v1299, 0);
                        (*(void (**)(void, llvm::Value *, void ***, void, uint64_t))(*(void *)v1399[0]
                                                                                                 + 16))(v1399[0], v1152, &v1477, *((void *)&v1395 + 1), v1396);
                        if (v1391)
                        {
                          v1204 = (llvm::MDNode **)v1390;
                          v1205 = (llvm::MDNode **)((char *)v1390 + 16 * v1391);
                          do
                          {
                            llvm::Instruction::setMetadata(v1152, *(_DWORD *)v1204, v1204[1]);
                            v1204 += 2;
                          }
                          while (v1204 != v1205);
                        }
                      }
                      else
                      {
                        if (!v1161) {
                          goto LABEL_1987;
                        }
LABEL_2036:
                        v1152 = (llvm::Value *)v1171;
                      }
                      llvm::FindDbgDeclareUses((llvm *)v1074, (unint64_t *)&v1477);
                      if ((v1477 & 4) != 0)
                      {
                        v1224 = *(void ****)((unint64_t)v1477 & 0xFFFFFFFFFFFFFFF8);
                        v1225 = (llvm::DominatorTree **)&v1224[*(unsigned int *)(((unint64_t)v1477 & 0xFFFFFFFFFFFFFFF8)
                                                                               + 8)];
                      }
                      else
                      {
                        v1224 = &v1477;
                        v1225 = (llvm::DominatorTree **)&(&v1477)[(unint64_t)v1477 > 7];
                      }
                      while (v1224 != (void ***)v1225)
                      {
                        uint64_t v1227 = (uint64_t)*v1224++;
                        uint64_t v1226 = v1227;
                        llvm::DIBuilder::DIBuilder((uint64_t)__dst, *(void **)(*(void *)(v1156 + 56) + 40), 0, 0);
                        uint64_t v1229 = *(void *)(v1227 + 48);
                        if (v1396) {
                          uint64_t v1230 = v1396 - 24;
                        }
                        else {
                          uint64_t v1230 = 0;
                        }
                        uint64_t v1228 = v1226 - 32 * (*(_DWORD *)(v1226 + 20) & 0x7FFFFFF);
                        llvm::DIBuilder::insertDeclare((uint64_t)__dst, v1152, *(void *)(*(void *)(v1228 + 32) + 24), *(void *)(*(void *)(v1228 + 64) + 24), v1229, *(void *)(v1230 + 40), v1230);
                        sub_1CC2DBB1C((uint64_t)__dst);
                        sub_1CD2CE4C4(&v1468, v1226, *(unsigned char *)(v1290 + 248));
                      }
                      sub_1CD487110((uint64_t *)&v1477);
                      uint64_t v1151 = v1156;
                      v1074 = v1304;
                      goto LABEL_1946;
                    }
                    unsigned int __vald = 0;
                    unsigned int v1027 = 0;
                    while (2)
                    {
                      if (!DWORD2(v1321)) {
                        goto LABEL_1777;
                      }
                      unsigned int v1028 = (DWORD2(v1321) - 1) & (37 * v1027);
                      int v1029 = *((_DWORD *)v1320 + 3 * v1028);
                      if (v1027 != v1029)
                      {
                        int v1060 = 1;
                        while (v1029 != -1)
                        {
                          unsigned int v1061 = v1028 + v1060++;
                          unsigned int v1028 = v1061 & (DWORD2(v1321) - 1);
                          int v1029 = *((_DWORD *)v1320 + 3 * v1028);
                          if (v1027 == v1029) {
                            goto LABEL_1776;
                          }
                        }
                        goto LABEL_1777;
                      }
LABEL_1776:
                      if (v1028 == DWORD2(v1321)) {
                        goto LABEL_1777;
                      }
                      memset(&v1461, 0, sizeof(v1461));
                      uint64_t v1030 = *(void *)(*((void *)v946 + 2) + 8 * v1027);
                      uint64_t v1031 = sub_1CB83544C((uint64_t)&v1390, v1030);
                      int v1032 = sub_1CD54B9DC((uint64_t *)&v1320, &v1317)[1];
                      int v1033 = sub_1CD54B9DC((uint64_t *)&v1320, &v1317)[2];
                      if (v1479)
                      {
                        unsigned int v1034 = (37 * v1317) & (v1479 - 1);
                        int v1035 = (int)v1477[3 * v1034];
                        if (v1317 == v1035)
                        {
LABEL_1781:
                          if (v1034 == v1479) {
                            break;
                          }
                          v1043 = sub_1CD8C6344((uint64_t *)&v1477, &v1317);
                          v1044 = (const void *)*((void *)v1043 + 1);
                          if (!v1044)
                          {
                            memset(&v1316, 0, sizeof(v1316));
                            goto LABEL_1817;
                          }
                          std::string::size_type v1052 = *((void *)v1043 + 2);
                          if (v1052 > 0x7FFFFFFFFFFFFFF7) {
LABEL_2153:
                          }
                            abort();
                          if (v1052 >= 0x17)
                          {
                            uint64_t v1054 = (v1052 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v1052 | 7) != 0x17) {
                              uint64_t v1054 = v1052 | 7;
                            }
                            uint64_t v1055 = v1054 + 1;
                            v1053 = (std::string *)operator new(v1054 + 1);
                            unint64_t v1056 = v1055 | 0x8000000000000000;
                            uint64_t v1000 = v1303;
                            v1316.__r_.__value_.__l.__size_ = v1052;
                            v1316.__r_.__value_.__r.__words[2] = v1056;
                            v1316.__r_.__value_.__r.__words[0] = (std::string::size_type)v1053;
                          }
                          else
                          {
                            *((unsigned char *)&v1316.__r_.__value_.__s + 23) = *((void *)v1043 + 2);
                            v1053 = &v1316;
                            if (!v1052) {
                              goto LABEL_1816;
                            }
                          }
                          memmove(v1053, v1044, v1052);
LABEL_1816:
                          v1053->__r_.__value_.__s.__data_[v1052] = 0;
LABEL_1817:
                          v946 = v1306;
                          if (SHIBYTE(v1461.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v1461.__r_.__value_.__l.__data_);
                          }
                          std::string v1461 = v1316;
                          v1036 = (void *)*((void *)sub_1CD52C224((uint64_t)&v1324, &v1317) + 1);
LABEL_1820:
                          StructType = v1322;
                          if ((v1461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            v1057 = &v1461;
                          }
                          else {
                            v1057 = (std::string *)v1461.__r_.__value_.__r.__words[0];
                          }
                          if ((v1461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            size_t size = *((unsigned char *)&v1461.__r_.__value_.__s + 23) & 0x7F;
                          }
                          else {
                            size_t size = v1461.__r_.__value_.__l.__size_;
                          }
                          uint64_t MemberType = llvm::DIBuilder::createMemberType((uint64_t)__dst, v1322, (unsigned __int8 *)v1057, size, v972, v1000, v1031, 8 * v1032, (8 * v1033), 64, (uint64_t)v1036, 0);
                          if (v1469 >= (unint64_t)HIDWORD(v1469)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v1468 + v1469) = MemberType;
                          LODWORD(v1469) = v1469 + 1;
                          if (SHIBYTE(v1461.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v1461.__r_.__value_.__l.__data_);
                          }
                          unsigned int v1027 = v1317;
                          unsigned int v1022 = *((_DWORD *)v946 + 3);
LABEL_1777:
                          int v1317 = ++v1027;
                          if (v1027 >= v1022) {
                            goto LABEL_1770;
                          }
                          continue;
                        }
                        int v1062 = 1;
                        while (v1035 != -1)
                        {
                          unsigned int v1063 = v1034 + v1062++;
                          unsigned int v1034 = v1063 & (v1479 - 1);
                          int v1035 = (int)v1477[3 * v1034];
                          if (v1317 == v1035) {
                            goto LABEL_1781;
                          }
                        }
                      }
                      break;
                    }
                    v1036 = sub_1CD2DF09C((uint64_t)__dst, v1030, (llvm::DataLayout *)&v1390, (uint64_t)StructType, v1000, (uint64_t)&v1318);
                    uint64_t v1037 = v1036[-*((unsigned int *)v1036 + 2) + 2];
                    if (!v1037)
                    {
                      memset(&v1316, 0, sizeof(v1316));
LABEL_1795:
                      if (SHIBYTE(v1461.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v1461.__r_.__value_.__l.__data_);
                      }
                      std::string v1461 = v1316;
                      std::to_string(&v1315, __vald);
                      v1048 = std::string::insert(&v1315, 0, "_");
                      std::string::size_type v1049 = v1048->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v1316.__r_.__value_.__l.__data_ = *(_OWORD *)&v1048->__r_.__value_.__l.__data_;
                      v1316.__r_.__value_.__r.__words[2] = v1049;
                      v1048->__r_.__value_.__l.__size_ = 0;
                      v1048->__r_.__value_.__r.__words[2] = 0;
                      v1048->__r_.__value_.__r.__words[0] = 0;
                      if ((v1316.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        v1050 = &v1316;
                      }
                      else {
                        v1050 = (std::string *)v1316.__r_.__value_.__r.__words[0];
                      }
                      if ((v1316.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v1051 = *((unsigned char *)&v1316.__r_.__value_.__s + 23) & 0x7F;
                      }
                      else {
                        std::string::size_type v1051 = v1316.__r_.__value_.__l.__size_;
                      }
                      std::string::append(&v1461, (const std::string::value_type *)v1050, v1051);
                      if (SHIBYTE(v1316.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v1316.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v1315.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v1315.__r_.__value_.__l.__data_);
                      }
                      ++__vald;
                      goto LABEL_1820;
                    }
                    v1038 = *(unint64_t **)(v1037 + 8);
                    unint64_t v1041 = *v1038;
                    v1040 = v1038 + 3;
                    std::string::size_type v1039 = v1041;
                    if (v1041 > 0x7FFFFFFFFFFFFFF7) {
                      goto LABEL_2153;
                    }
                    if (v1039 >= 0x17)
                    {
                      uint64_t v1045 = (v1039 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v1039 | 7) != 0x17) {
                        uint64_t v1045 = v1039 | 7;
                      }
                      uint64_t v1046 = v1045 + 1;
                      v1042 = (std::string *)operator new(v1045 + 1);
                      unint64_t v1047 = v1046 | 0x8000000000000000;
                      uint64_t v972 = v1298;
                      v1316.__r_.__value_.__l.__size_ = v1039;
                      v1316.__r_.__value_.__r.__words[2] = v1047;
                      v1316.__r_.__value_.__r.__words[0] = (std::string::size_type)v1042;
                    }
                    else
                    {
                      *((unsigned char *)&v1316.__r_.__value_.__s + 23) = v1039;
                      v1042 = &v1316;
                      if (!v1039) {
                        goto LABEL_1794;
                      }
                    }
                    memmove(v1042, v1040, v1039);
LABEL_1794:
                    v1042->__r_.__value_.__s.__data_[v1039] = 0;
                    uint64_t v1000 = v1303;
                    v946 = v1306;
                    goto LABEL_1795;
                  }
                  v832 = (llvm::Type ***)v1343;
                  v833 = (llvm::Type ***)&v1343[5 * v1344];
                  while (2)
                  {
                    v834 = *v832;
                    v835 = **v832;
                    if (*((unsigned char *)*v832 + 16) == 21 && *((unsigned char *)v835 + 8) == 15)
                    {
                      v836 = v834[3];
                      uint64_t v839 = *((void *)v836 + 14);
                      v837 = (llvm::Type *)((char *)v836 + 112);
                      uint64_t v838 = v839;
                      if (v839)
                      {
                        int v840 = *((_DWORD *)v834 + 8);
                        if ((v840 + 2) < *(_DWORD *)(v838 + 8))
                        {
                          uint64_t v851 = *(void *)(v838 + 8 * (v840 + 2) + 40);
                          if (v851)
                          {
                            if ((*(unsigned char *)(v851 + 20) & 0x20) != 0) {
                              v835 = (llvm::Type *)llvm::AttributeList::getParamByValType(v837, v840);
                            }
                          }
                        }
                      }
                    }
                    int v841 = sub_1CD2DC7AC((uint64_t)&v1390, v835, 0, 0, 1);
                    v842 = *v832;
                    __dst[0] = *v832;
                    if (v1351)
                    {
                      unsigned int v843 = (v1351 - 1) & ((v842 >> 4) ^ (v842 >> 9));
                      v844 = (uint64_t *)(v1350 + 16 * v843);
                      v845 = (void *)*v844;
                      if (v842 != (llvm::Type **)*v844)
                      {
                        v846 = 0;
                        int v847 = 1;
                        while (v845 != (void *)-4096)
                        {
                          if (v846) {
                            BOOL v848 = 0;
                          }
                          else {
                            BOOL v848 = v845 == (void *)-8192;
                          }
                          if (v848) {
                            v846 = v844;
                          }
                          unsigned int v849 = v843 + v847++;
                          unsigned int v843 = v849 & (v1351 - 1);
                          v844 = (uint64_t *)(v1350 + 16 * v843);
                          v845 = (void *)*v844;
                          if (v842 == (llvm::Type **)*v844) {
                            goto LABEL_1534;
                          }
                        }
                        if (v846) {
                          v850 = v846;
                        }
                        else {
                          v850 = v844;
                        }
LABEL_1533:
                        v844 = sub_1CBFFD5B4((uint64_t)&v1350, (uint64_t)__dst, (uint64_t *)__dst, v850);
                        uint64_t *v844 = (uint64_t)__dst[0];
                        *((_DWORD *)v844 + 2) = 0;
                      }
LABEL_1534:
                      *((_DWORD *)v844 + 2) = v841;
                      v832 += 5;
                      if (v832 == v833) {
                        goto LABEL_1512;
                      }
                      continue;
                    }
                    break;
                  }
                  v850 = 0;
                  goto LABEL_1533;
                }
              }
            }
            for (uint64_t i6 = *((void *)v356 + 10); ; uint64_t i6 = *(void *)(i6 + 8))
            {
              if (i6 == v1283) {
                goto LABEL_856;
              }
              uint64_t v593 = i6 - 24;
              if (!i6) {
                uint64_t v593 = 0;
              }
              uint64_t v594 = *(void *)(v593 + 48);
              if (v594 != v593 + 40) {
                break;
              }
            }
            int8x16_t v1277 = (int8x16_t)vdupq_n_s64(3uLL);
            while (1)
            {
              if (v594) {
                v662 = (unsigned __int8 *)(v594 - 24);
              }
              else {
                v662 = 0;
              }
              int v663 = v662[16];
              if (v663 == 59) {
                v664 = v662;
              }
              else {
                v664 = 0;
              }
              v1468 = v664;
              if (!v594) {
                goto LABEL_1157;
              }
              if (v663 != 59 || v664 == *v527) {
                goto LABEL_1157;
              }
              v1390 = &v1392;
              v1391 = (void *)0x100000000;
              HIDWORD(v1397) = 0;
              uint64_t v1393 = 0;
              v1394 = 0;
              LODWORD(v1395) = 0;
              LOBYTE(v1397) = 0;
              *((void *)&v1395 + 1) = 0;
              uint64_t v1396 = (uint64_t)v356;
              sub_1CC5A43B0((uint64_t)&v1390, 0);
              BOOL v668 = (*(_DWORD *)(v1290 + 200) - 4) < 0xFFFFFFFD;
              uint64_t v669 = *((void *)v356 + 5);
              v670 = *(llvm::Value **)v1290;
              __dst[1] = 0;
              __dst[2] = 0;
              __dst[0] = (void *)(v669 + 272);
              __dst[3] = &v1414;
              uint64_t v1413 = 0x800000000;
              p_src = &__src;
              v1432 = &__src;
              uint64_t v1433 = 8;
              int v1434 = 0;
              unsigned int v1441 = 1;
              uint64_t v1440 = 0;
              v1442 = (llvm::DominatorTree *)&v1390;
              v1443 = v670;
              uint64_t v1445 = 0;
              uint64_t v1446 = 0;
              unsigned int v1447 = 0;
              p_base = &__base;
              v1448 = (uint64_t *)v1452;
              v1449 = v1452;
              uint64_t v1450 = 4;
              int v1451 = 0;
              v1453 = v1457;
              v1454 = v1457;
              uint64_t v1455 = 2;
              int v1456 = 0;
              char v1458 = 0;
              BOOL v1459 = v668;
              __int16 v1460 = 0;
              uint64_t v671 = *(void *)v664;
              unsigned int v672 = *(_DWORD *)(*(void *)v664 + 8);
              if ((v672 & 0xFE) == 0x12) {
                unsigned int v672 = *(_DWORD *)(**(void **)(v671 + 16) + 8);
              }
              uint64_t v673 = *(void *)(v669 + 504);
              if (v672 < 0x100) {
                goto LABEL_1177;
              }
              unsigned int v674 = v672 >> 8;
              unint64_t v675 = *(unsigned int *)(v669 + 512);
              uint64_t v676 = *(void *)(v669 + 504);
              if (v675)
              {
                uint64_t v676 = v673;
                unint64_t v677 = v675;
                do
                {
                  unint64_t v678 = v677 >> 1;
                  uint64_t v679 = v676 + 16 * (v677 >> 1);
                  unsigned int v680 = *(_DWORD *)(v679 + 8);
                  uint64_t v681 = v679 + 16;
                  v677 += ~(v677 >> 1);
                  if (v680 < v674) {
                    uint64_t v676 = v681;
                  }
                  else {
                    unint64_t v677 = v678;
                  }
                }
                while (v677);
              }
              if (v676 == v673 + 16 * v675 || *(_DWORD *)(v676 + 8) != v674) {
LABEL_1177:
              }
                uint64_t v676 = v673;
              uint64_t v682 = llvm::IntegerType::get(*(llvm::IntegerType **)v671, (llvm::LLVMContext *)*(unsigned int *)(v676 + 12));
              if ((*(_DWORD *)(v671 + 8) & 0xFE) == 0x12)
              {
                v761 = (llvm::Type *)*(unsigned int *)(v671 + 32);
                if (*(_DWORD *)(v671 + 8) == 19) {
                  llvm::ScalableVectorType::get((uint64_t **)v682, v761);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v682, v761);
                }
              }
              BOOL v1439 = 1;
              unint64_t v683 = *(unsigned int *)(v682 + 8);
              unint64_t v684 = v683 >> 8;
              if (v683 >> 8 >= 0x41) {
                operator new[]();
              }
              if (v1441 >= 0x41 && v1440) {
                MEMORY[0x1D25D9CB0](v1440, 0x1000C8000313F17);
              }
              uint64_t v1440 = 0;
              unsigned int v1441 = v684;
              *(int8x16_t *)&__dst[1] = vandq_s8(*(int8x16_t *)&__dst[1], v1277);
              llvm::detail::PtrUseVisitorBase::enqueueUsers((llvm::detail::PtrUseVisitorBase *)__dst, (llvm::Instruction *)v664);
              unsigned int v690 = v1413;
              if (v1413) {
                break;
              }
LABEL_1184:
              if (!HIBYTE(v1460))
              {
                if (v1459 && (LODWORD(v691) = HIDWORD(v1455), HIDWORD(v1455) != v1456))
                {
                  if (v1449 == v1448) {
                    v744 = (uint64_t *)((char *)&v1450 + 4);
                  }
                  else {
                    v744 = &v1450;
                  }
                  uint64_t v745 = *(unsigned int *)v744;
                  if (v745)
                  {
                    uint64_t v756 = 8 * v745;
                    v746 = (uint64_t *)v1449;
                    while ((unint64_t)*v746 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v746;
                      v756 -= 8;
                      if (!v756) {
                        goto LABEL_1363;
                      }
                    }
                  }
                  else
                  {
                    v746 = (uint64_t *)v1449;
                  }
                  v747 = (unint64_t *)((char *)v1449 + 8 * v745);
                  if (v746 != (uint64_t *)v747)
                  {
                    uint64_t v748 = *v746;
                    while (1)
                    {
                      if (v1454 == v1453) {
                        uint64_t v691 = v691;
                      }
                      else {
                        uint64_t v691 = v1455;
                      }
                      if (v691)
                      {
                        uint64_t v749 = 8 * v691;
                        v750 = (uint64_t *)v1454;
                        while ((unint64_t)*v750 >= 0xFFFFFFFFFFFFFFFELL)
                        {
                          ++v750;
                          v749 -= 8;
                          if (!v749) {
                            goto LABEL_1352;
                          }
                        }
                      }
                      else
                      {
                        v750 = (uint64_t *)v1454;
                      }
                      v751 = (uint64_t *)((char *)v1454 + 8 * v691);
                      if (v750 != v751)
                      {
                        if (sub_1CD2D9D84((uint64_t)p_base, *v750, v748))
                        {
LABEL_1366:
                          int v743 = 1;
                          goto LABEL_1367;
                        }
                        for (i7 = v750 + 1; i7 != v751; ++i7)
                        {
                          if ((unint64_t)*i7 < 0xFFFFFFFFFFFFFFFELL
                            && (sub_1CD2D9D84((uint64_t)p_base, *i7, v748) & 1) != 0)
                          {
                            goto LABEL_1366;
                          }
                        }
                      }
LABEL_1352:
                      v753 = (unint64_t *)(v746 + 1);
                      do
                      {
                        if (v753 == v747)
                        {
                          int v743 = 0;
                          goto LABEL_1367;
                        }
                        unint64_t v754 = *v753++;
                        uint64_t v748 = v754;
                      }
                      while (v754 > 0xFFFFFFFFFFFFFFFDLL);
                      LODWORD(v691) = HIDWORD(v1455);
                      v746 = (uint64_t *)(v753 - 1);
                    }
                  }
                }
                else
                {
                  if (((uint64_t)__dst[2] & 4) != 0)
                  {
                    int v743 = 1;
                    goto LABEL_1367;
                  }
                  v692 = (uint64_t *)v1449;
                  v693 = v1448;
                  unsigned int v694 = HIDWORD(v1450);
                  unsigned int v695 = v1450;
                  if (v1449 == v1448) {
                    uint64_t v696 = HIDWORD(v1450);
                  }
                  else {
                    uint64_t v696 = v1450;
                  }
                  v697 = (uint64_t *)v1449;
                  if (v696)
                  {
                    uint64_t v755 = 8 * v696;
                    v697 = (uint64_t *)v1449;
                    do
                    {
                      if ((unint64_t)*v697 < 0xFFFFFFFFFFFFFFFELL) {
                        goto LABEL_1192;
                      }
                      ++v697;
                      v755 -= 8;
                    }
                    while (v755);
                    int v743 = 0;
                    goto LABEL_1367;
                  }
LABEL_1192:
                  v698 = (unint64_t *)((char *)v1449 + 8 * v696);
                  if (v697 != (uint64_t *)v698)
                  {
                    uint64_t v699 = *v697;
                    while (1)
                    {
                      if (v692 == v693) {
                        uint64_t v700 = v694;
                      }
                      else {
                        uint64_t v700 = v695;
                      }
                      v701 = v692;
                      if (v700)
                      {
                        uint64_t v702 = 8 * v700;
                        v701 = v692;
                        while ((unint64_t)*v701 >= 0xFFFFFFFFFFFFFFFELL)
                        {
                          ++v701;
                          v702 -= 8;
                          if (!v702) {
                            goto LABEL_1209;
                          }
                        }
                      }
                      v703 = &v692[v700];
                      if (v701 != v703)
                      {
                        if (sub_1CD2D9D84((uint64_t)p_base, v699, *v701)) {
                          goto LABEL_1366;
                        }
                        for (i8 = v701 + 1; i8 != v703; ++i8)
                        {
                          if ((unint64_t)*i8 < 0xFFFFFFFFFFFFFFFELL
                            && (sub_1CD2D9D84((uint64_t)p_base, v699, *i8) & 1) != 0)
                          {
                            goto LABEL_1366;
                          }
                        }
                      }
LABEL_1209:
                      v705 = (unint64_t *)(v697 + 1);
                      do
                      {
                        if (v705 == v698)
                        {
                          int v743 = 0;
                          goto LABEL_1367;
                        }
                        unint64_t v706 = *v705++;
                        uint64_t v699 = v706;
                      }
                      while (v706 > 0xFFFFFFFFFFFFFFFDLL);
                      v692 = (uint64_t *)v1449;
                      v693 = v1448;
                      unsigned int v694 = HIDWORD(v1450);
                      v697 = (uint64_t *)(v705 - 1);
                      unsigned int v695 = v1450;
                    }
                  }
                }
LABEL_1363:
                int v743 = 0;
LABEL_1367:
                LOBYTE(v1460) = v743;
                if (!HIBYTE(v1460)) {
                  HIBYTE(v1460) = 1;
                }
                goto LABEL_1369;
              }
              int v743 = v1460;
LABEL_1369:
              if (v743)
              {
                v757 = (void *)(v1445 + 32 * v1447);
                if (v1446)
                {
                  if (!v1447)
                  {
                    uint64_t v758 = v1445;
                    goto LABEL_1377;
                  }
                  uint64_t v759 = 32 * v1447;
                  uint64_t v758 = v1445;
                  do
                  {
                    if ((*(void *)v758 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                      goto LABEL_1377;
                    }
                    v758 += 32;
                    v759 -= 32;
                  }
                  while (v759);
                }
                uint64_t v758 = v1445 + 32 * v1447;
LABEL_1377:
                while (v758 != v1445 + 32 * v1447)
                {
                  if (!*(unsigned char *)(v758 + 24))
                  {
                    v889 = "Unable to handle an alias with unknown offset created before CoroBegin.";
                    goto LABEL_2147;
                  }
                  v760 = (void *)(v758 + 32);
                  uint64_t v758 = v1445 + 32 * v1447;
                  if (v760 != v757)
                  {
                    while ((*v760 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      v760 += 4;
                      if (v760 == v757)
                      {
                        uint64_t v758 = v1445 + 32 * v1447;
                        goto LABEL_1377;
                      }
                    }
                    uint64_t v758 = (uint64_t)v760;
                  }
                }
                memset(&v1461, 0, 20);
                sub_1CD8C5E20((uint64_t)&v1461);
                MEMORY[0x1D25D9CD0](0, 8);
                LODWORD(v1461.__r_.__value_.__r.__words[2]) = v1447;
                if (v1447)
                {
                  v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(32 * v1447, (std::align_val_t)8uLL);
                  sub_1CD8C5EA8((uint64_t)&v1461, &v1445);
                }
                else
                {
                  *(_OWORD *)&v1461.__r_.__value_.__l.__data_ = 0uLL;
                }
                LOBYTE(v1477) = v1458;
                sub_1CD2DAE74((uint64_t)&v1346, (uint64_t *)&v1468, (uint64_t *)&v1461, (char *)&v1477);
                sub_1CD8C5E20((uint64_t)&v1461);
                MEMORY[0x1D25D9CD0](v1461.__r_.__value_.__r.__words[0], 8);
              }
              if (v1454 != v1453) {
                free(v1454);
              }
              int v356 = v1279;
              if (v1449 != v1448) {
                free(v1449);
              }
              sub_1CD8C5E20((uint64_t)&v1445);
              MEMORY[0x1D25D9CD0](v1445, 8);
              if (v1441 >= 0x41 && v1440) {
                MEMORY[0x1D25D9CB0](v1440, 0x1000C8000313F17);
              }
              if (v1432 != p_src) {
                free(v1432);
              }
              sub_1CCEA0168((char **)&__dst[3]);
              sub_1CBF8FF88(&v1393);
              if (v1390 != &v1392) {
                free(v1390);
              }
              v527 = (void **)v1278;
LABEL_1157:
              uint64_t v594 = *(void *)(v594 + 8);
              uint64_t v666 = i6 - 24;
              if (!i6) {
                uint64_t v666 = 0;
              }
              if (v594 == v666 + 40)
              {
                do
                {
                  uint64_t i6 = *(void *)(i6 + 8);
                  if (i6 == v1283) {
                    goto LABEL_856;
                  }
                  uint64_t v667 = i6 - 24;
                  if (!i6) {
                    uint64_t v667 = 0;
                  }
                  uint64_t v594 = *(void *)(v667 + 48);
                }
                while (v594 == v667 + 40);
              }
              if (i6 == v1283) {
                goto LABEL_856;
              }
            }
            while (1)
            {
              v707 = __dst[3];
              v708 = (char *)__dst[3] + 24 * v690;
              unsigned int v709 = *((_DWORD *)v708 - 2);
              uint64_t v710 = *((void *)v708 - 3);
              uint64_t v711 = *((void *)v708 - 2);
              *((_DWORD *)v708 - 2) = 0;
              unsigned int v712 = v690 - 1;
              LODWORD(v1413) = v712;
              if (LODWORD(v707[3 * v712 + 2]) >= 0x41)
              {
                uint64_t v713 = v707[3 * v712 + 1];
                if (v713) {
                  MEMORY[0x1D25D9CB0](v713, 0x1000C8000313F17);
                }
              }
              unint64_t v714 = v710 & 0xFFFFFFFFFFFFFFF8;
              v1438 = (void *)(v710 & 0xFFFFFFFFFFFFFFF8);
              BOOL v1439 = (v710 & 4) != 0;
              if ((v710 & 4) != 0)
              {
                if (v1441 >= 0x41 && v1440)
                {
                  MEMORY[0x1D25D9CB0](v1440, 0x1000C8000313F17);
                  unint64_t v714 = (unint64_t)v1438;
                }
                uint64_t v1440 = v711;
                unsigned int v1441 = v709;
                unsigned int v709 = 0;
              }
              uint64_t v715 = *(void *)(v714 + 24);
              v716 = (char *)v1449;
              uint64_t v717 = HIDWORD(v1450);
              if (v1449 != v1448) {
                break;
              }
              if (!HIDWORD(v1450)) {
                goto LABEL_1229;
              }
              v718 = 0;
              uint64_t v719 = 8 * HIDWORD(v1450);
              v720 = (uint64_t *)v1449;
              do
              {
                if (*v720 == v715) {
                  goto LABEL_1253;
                }
                if (*v720 == -2) {
                  v718 = v720;
                }
                ++v720;
                v719 -= 8;
              }
              while (v719);
              if (v718)
              {
                uint64_t *v718 = v715;
                --v1451;
              }
              else
              {
LABEL_1229:
                unsigned int v721 = v1450;
                if (HIDWORD(v1450) >= v1450) {
                  goto LABEL_1232;
                }
                ++HIDWORD(v1450);
                *((void *)v1449 + v717) = v715;
              }
LABEL_1253:
              switch(*(unsigned char *)(v715 + 16))
              {
                case '!':
                case '\'':
                  goto LABEL_1267;
                case '=':
                  if ((llvm::DominatorTree::dominates(v1442, v1443, (const llvm::Instruction *)v715) & 1) == 0) {
                    char v1458 = 1;
                  }
                  if (*(void *)(v715 - 64) != *v1438) {
                    goto LABEL_1254;
                  }
                  std::string::size_type v733 = *(void *)(v715 - 32);
                  if (!v733 || *(unsigned char *)(v733 + 16) != 59) {
                    goto LABEL_1315;
                  }
                  v1461.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1461.__r_.__value_.__r.__words[2];
                  HIDWORD(v1461.__r_.__value_.__r.__words[1]) = 4;
                  unsigned int v734 = 1;
                  v1461.__r_.__value_.__r.__words[2] = v733;
                  do
                  {
                    uint64_t v735 = *(void *)(v1461.__r_.__value_.__r.__words[0] + 8 * v734-- - 8);
                    LODWORD(v1461.__r_.__value_.__r.__words[1]) = v734;
                    uint64_t v736 = *(void *)(v735 + 8);
                    if (v736)
                    {
                      do
                      {
                        uint64_t v737 = *(void *)(v736 + 24);
                        int v738 = *(unsigned __int8 *)(v737 + 16);
                        if (v737 && v738 == 60)
                        {
                          llvm::detail::PtrUseVisitorBase::enqueueUsers((llvm::detail::PtrUseVisitorBase *)__dst, *(llvm::Instruction **)(v736 + 24));
                          sub_1CD2DB1FC((uint64_t)__dst, (const llvm::Use **)v737);
                        }
                        else if (v737 && v738 == 61)
                        {
                          if (*(void *)(v737 - 32) != v735) {
                            goto LABEL_1311;
                          }
                        }
                        else if (v738 == 84)
                        {
                          uint64_t v739 = *(void *)(v737 - 32);
                          if (!v739
                            || *(unsigned char *)(v739 + 16)
                            || *(void *)(v739 + 24) != *(void *)(v737 + 72)
                            || (*(unsigned char *)(v739 + 33) & 0x20) == 0
                            || !llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v736 + 24)))
                          {
LABEL_1311:
                            char v740 = 0;
                            goto LABEL_1312;
                          }
                        }
                        else
                        {
                          char v740 = 0;
                          if (!v737 || v738 != 77) {
                            goto LABEL_1312;
                          }
                          if (LODWORD(v1461.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v1461.__r_.__value_.__r.__words[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(v1461.__r_.__value_.__r.__words[0]
                                    + 8 * LODWORD(v1461.__r_.__value_.__r.__words[1])) = v737;
                          ++LODWORD(v1461.__r_.__value_.__r.__words[1]);
                        }
                        uint64_t v736 = *(void *)(v736 + 8);
                      }
                      while (v736);
                      unsigned int v734 = v1461.__r_.__value_.__r.__words[1];
                    }
                  }
                  while (v734);
                  char v740 = 1;
LABEL_1312:
                  if ((std::string::size_type *)v1461.__r_.__value_.__l.__data_ != &v1461.__r_.__value_.__r.__words[2])
                  {
                    char v741 = v740;
                    free(v1461.__r_.__value_.__l.__data_);
                    char v740 = v741;
                  }
                  if ((v740 & 1) == 0) {
LABEL_1315:
                  }
                    __dst[2] = (void *)((uint64_t)__dst[2] & 3 | (unint64_t)v715 | 4);
                  goto LABEL_1254;
                case '>':
                  if (!*(void *)(v715 + 8)) {
                    goto LABEL_1305;
                  }
                  if ((llvm::detail::PtrUseVisitorBase::adjustOffsetForGEP((llvm::detail::PtrUseVisitorBase *)__dst, (llvm::GetElementPtrInst *)v715, v685, v686, v687, v688, v689) & 1) == 0)
                  {
                    BOOL v1439 = 0;
                    if (v1441 >= 0x41 && v1440) {
                      MEMORY[0x1D25D9CB0](v1440, 0x1000C8000313F17);
                    }
                    uint64_t v1440 = 0;
                    unsigned int v1441 = 1;
                  }
LABEL_1304:
                  llvm::detail::PtrUseVisitorBase::enqueueUsers((llvm::detail::PtrUseVisitorBase *)__dst, (llvm::Instruction *)v715);
LABEL_1305:
                  sub_1CD2DB1FC((uint64_t)__dst, (const llvm::Use **)v715);
                  goto LABEL_1254;
                case 'K':
                  goto LABEL_1315;
                case 'M':
                case 'N':
                case 'S':
                case 'U':
                  goto LABEL_1304;
                case 'T':
                  uint64_t v732 = *(void *)(v715 - 32);
                  if (!v732 || *(unsigned char *)(v732 + 16) || *(void *)(v732 + 24) != *(void *)(v715 + 72)) {
                    goto LABEL_1267;
                  }
                  int v742 = *(_DWORD *)(v732 + 36);
                  if (v742 > 196)
                  {
                    if (v742 <= 312 && (v742 == 197 || v742 == 199))
                    {
LABEL_1325:
                      if ((llvm::DominatorTree::dominates(v1442, v1443, (const llvm::Instruction *)v715) & 1) == 0) {
                        char v1458 = 1;
                      }
                      goto LABEL_1254;
                    }
                  }
                  else
                  {
                    if ((v742 - 56) < 3) {
                      goto LABEL_1254;
                    }
                    if (!v742)
                    {
LABEL_1267:
                      sub_1CD2DB0C4((uint64_t)__dst, v715);
                      goto LABEL_1254;
                    }
                    if (v742 == 194) {
                      goto LABEL_1325;
                    }
                  }
                  sub_1CD2DB434((uint64_t)__dst, (llvm::Instruction *)v715);
LABEL_1254:
                  if (((uint64_t)__dst[2] & 4) != 0
                    && (llvm::DominatorTree::dominates(v1442, v1443, (const llvm::Instruction *)((unint64_t)__dst[2] & 0xFFFFFFFFFFFFFFF8)) & 1) == 0)
                  {
                    char v1458 = 1;
                  }
                  char v731 = (char)__dst[1];
                  if (v709 >= 0x41 && v711) {
                    MEMORY[0x1D25D9CB0](v711, 0x1000C8000313F17);
                  }
                  if ((v731 & 4) != 0) {
                    goto LABEL_1184;
                  }
                  unsigned int v690 = v1413;
                  if (!v1413) {
                    goto LABEL_1184;
                  }
                  break;
                default:
                  goto LABEL_1254;
              }
            }
            unsigned int v721 = v1450;
LABEL_1232:
            if (3 * v721 <= 4 * (HIDWORD(v1450) - v1451))
            {
              if (v721 >= 0x40) {
                v721 *= 2;
              }
              else {
                unsigned int v721 = 128;
              }
            }
            else if (v721 - HIDWORD(v1450) >= v721 >> 3)
            {
              goto LABEL_1234;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1448, v721);
            unsigned int v721 = v1450;
            v716 = (char *)v1449;
LABEL_1234:
            unsigned int v722 = v721 - 1;
            unsigned int v723 = (v721 - 1) & ((v715 >> 4) ^ (v715 >> 9));
            v724 = &v716[8 * v723];
            uint64_t v725 = *(void *)v724;
            if (*(void *)v724 == -1)
            {
              v726 = 0;
LABEL_1246:
              if (v726) {
                v730 = v726;
              }
              else {
                v730 = (uint64_t *)v724;
              }
              if (*v730 != v715)
              {
                if (*v730 == -2) {
                  --v1451;
                }
                else {
                  ++HIDWORD(v1450);
                }
                uint64_t *v730 = v715;
              }
            }
            else
            {
              v726 = 0;
              int v727 = 1;
              while (v725 != v715)
              {
                if (v726) {
                  BOOL v728 = 0;
                }
                else {
                  BOOL v728 = v725 == -2;
                }
                if (v728) {
                  v726 = (uint64_t *)v724;
                }
                unsigned int v729 = v723 + v727++;
                unsigned int v723 = v729 & v722;
                v724 = &v716[8 * (v729 & v722)];
                uint64_t v725 = *(void *)v724;
                if (*(void *)v724 == -1) {
                  goto LABEL_1246;
                }
              }
            }
            goto LABEL_1253;
          }
          break;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1390, v503);
        unsigned int v503 = v1392;
        v498 = (char *)v1391;
        goto LABEL_785;
      }
      uint64_t v408 = 0;
      int v409 = 0;
      uint64_t v410 = 152;
      uint64_t v411 = -1;
      while (1)
      {
        int v412 = v409;
        uint64_t v1284 = v408;
        uint64_t v413 = *((void *)__base + v408);
        uint64_t v414 = *(void *)(v413 + 40);
        if (v414 != v413 + 40) {
          break;
        }
LABEL_758:
        if (v1284 + 1 < v1282) {
          uint64_t v408 = v1284 + 1;
        }
        else {
          uint64_t v408 = 0;
        }
        int v409 = (v1284 + 1 < v1282) & v412;
        if (v1284 + 1 >= v1282 && (v412 & 1) == 0) {
          goto LABEL_428;
        }
      }
      if (v414) {
        v415 = (llvm::SmallPtrSetImplBase *)(v414 - 24);
      }
      else {
        v415 = 0;
      }
      int v416 = *((unsigned __int8 *)v415 + 16);
      int v417 = v416 - 29;
      if (v416 != 30)
      {
        unsigned int v493 = 2;
        switch(v417)
        {
          case 1:
LABEL_2154:
            __break(1u);
            goto LABEL_2155;
          case 2:
            unsigned int v493 = (*((_DWORD *)v415 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_765;
          case 3:
          case 9:
            unsigned int v493 = (*((_DWORD *)v415 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_765;
          case 4:
            goto LABEL_623;
          case 7:
            unsigned int v493 = *((_WORD *)v415 + 9) & 1;
            goto LABEL_765;
          case 8:
            unsigned int v493 = 1;
            goto LABEL_623;
          case 10:
            unsigned int v493 = *((_DWORD *)v415 + 20) + 1;
LABEL_765:
            if (!v493) {
              goto LABEL_758;
            }
            goto LABEL_623;
          default:
            goto LABEL_758;
        }
      }
      if ((*((_DWORD *)v415 + 5) & 0x7FFFFFF) == 3) {
        unsigned int v493 = 2;
      }
      else {
        unsigned int v493 = 1;
      }
LABEL_623:
      uint64_t v418 = 0;
      v1302 = (char *)v1387 + 152 * v408;
      v1280 = (char *)v415 - 64;
      v1281 = (char *)v415 + 32;
      uint64_t v1291 = v493;
      v1292 = (char *)v415 - 32;
      v1294 = v415;
      while (1)
      {
        int v419 = *((unsigned __int8 *)v415 + 16);
        if (v419 == 30)
        {
          v483 = &v1292[-32 * v418];
        }
        else
        {
          uint64_t v482 = (v419 - 31);
          v483 = v1292;
          switch(v482)
          {
            case 1:
            case 7:
              int v488 = *((_DWORD *)v415 + 5);
              if ((v488 & 0x40000000) != 0) {
                v489 = (char *)*((void *)v1294 - 1);
              }
              else {
                v489 = (char *)v1294 - 32 * (v488 & 0x7FFFFFF);
              }
              v483 = &v489[32 * (v418 + 1)];
              break;
            case 2:
              uint64_t v490 = -64;
              if (!v418) {
                uint64_t v490 = -96;
              }
              v483 = (char *)v415 + v490;
              break;
            case 3:
            case 4:
              goto LABEL_2154;
            case 5:
              if ((*((_WORD *)v415 + 9) & 1) == 0)
              {
                unint64_t v420 = 0;
                goto LABEL_628;
              }
              uint64_t v491 = *((_DWORD *)v1294 + 5) & 0x7FFFFFF;
              v492 = v1281;
              goto LABEL_756;
            case 6:
              break;
            case 8:
              if (v418)
              {
                v483 = &v1292[32 * v418 - 32 + -32 * *((unsigned int *)v1294 + 20)];
              }
              else
              {
                uint64_t v491 = *((unsigned int *)v1294 + 20);
                v492 = v1280;
LABEL_756:
                v483 = &v492[-32 * v491];
              }
              break;
            default:
              int v484 = *((_DWORD *)v415 + 5);
              if ((v484 & 0x40000000) != 0) {
                v485 = (char *)*((void *)v415 - 1);
              }
              else {
                v485 = (char *)v415 - 32 * (v484 & 0x7FFFFFF);
              }
              v483 = &v485[32 * (2 * v418) + 32];
              break;
          }
        }
        unint64_t v420 = *(void *)v483;
LABEL_628:
        unint64_t v421 = v1369;
        if (v1369)
        {
          v422 = __base;
          do
          {
            unint64_t v423 = v421 >> 1;
            v424 = (unint64_t *)&v422[8 * (v421 >> 1)];
            unint64_t v426 = *v424;
            v425 = v424 + 1;
            v421 += ~(v421 >> 1);
            if (v426 < v420) {
              v422 = v425;
            }
            else {
              unint64_t v421 = v423;
            }
          }
          while (v421);
        }
        else
        {
          v422 = __base;
        }
        unint64_t v1297 = v422 - (unsigned char *)__base;
        uint64_t v427 = (v422 - (unsigned char *)__base) >> 3;
        v428 = v1387;
        v429 = (void **)((char *)v1387 + 152 * v427);
        __dst[0] = &__dst[2];
        __dst[1] = (void *)0x600000000;
        unint64_t v430 = *((unsigned int *)v429 + 2);
        if (__dst != v429 && v430 != 0)
        {
          if (v430 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(&__dst[2], *v429, 8 * *((unsigned int *)v429 + 2));
          LODWORD(__dst[1]) = v430;
        }
        LODWORD(v1417) = *((_DWORD *)v429 + 16);
        v432 = &v428[152 * v427];
        v433 = v432 + 72;
        __s2 = v1340;
        uint64_t v1339 = 0x600000000;
        unint64_t v434 = *((unsigned int *)v432 + 20);
        if (&__s2 != (void **)(v432 + 72) && v434 != 0)
        {
          uint64_t v436 = *((unsigned int *)v432 + 20);
          if (v434 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v1340, *(const void **)v433, 8 * v436);
          LODWORD(v1339) = v434;
        }
        v437 = &v428[152 * v427];
        int v439 = *((_DWORD *)v437 + 34);
        v438 = (unsigned int *)(v437 + 136);
        int v1342 = v439;
        v440 = v1302;
        unsigned int v441 = *((_DWORD *)v1302 + 16);
        if (*((_DWORD *)v429 + 16) < v441)
        {
          int v465 = v429[8] & 0x3F;
          uint64_t v466 = *((unsigned int *)v429 + 2);
          if (v465) {
            *((void *)*v429 + v466 - 1) &= ~(-1 << v465);
          }
          unsigned int v467 = v466;
          *((_DWORD *)v429 + 16) = v441;
          unsigned int v468 = v441 + 63;
          if (v466 != (v441 + 63) >> 6)
          {
            uint64_t v469 = v468 >> 6;
            if (v466 <= v469)
            {
              if (v469 > *((_DWORD *)v429 + 3)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v469 != v466)
              {
                int v1287 = v466;
                bzero((char *)*v429 + 8 * v466, 8 * (v469 - v466));
                LODWORD(v466) = v1287;
              }
              v467 += v469 - v466;
              *((_DWORD *)v429 + 2) = v467;
              unsigned int v441 = *((_DWORD *)v429 + 16);
              v440 = v1302;
            }
            else
            {
              *((_DWORD *)v429 + 2) = v469;
              unsigned int v467 = v468 >> 6;
            }
          }
          int v470 = v441 & 0x3F;
          if (v470) {
            *((void *)*v429 + v467 - 1) &= ~(-1 << v470);
          }
        }
        uint64_t v442 = *((unsigned int *)v440 + 2);
        if (v442)
        {
          v443 = *(uint64_t **)v440;
          v444 = *v429;
          do
          {
            uint64_t v445 = *v443++;
            *v444++ |= v445;
            --v442;
          }
          while (v442);
        }
        unsigned int v446 = *v438;
        unsigned int v447 = *((_DWORD *)v1302 + 34);
        if (*v438 < v447)
        {
          uint64_t v471 = *((unsigned int *)v433 + 2);
          if ((v446 & 0x3F) != 0) {
            *(void *)(*(void *)v433 + 8 * v471 - 8) &= ~(-1 << (v446 & 0x3F));
          }
          unsigned int v472 = v471;
          unsigned int *v438 = v447;
          unsigned int v473 = v447 + 63;
          if (v471 != (v447 + 63) >> 6)
          {
            uint64_t v474 = v473 >> 6;
            if (v471 <= v474)
            {
              if (v474 > *((_DWORD *)v433 + 3)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v474 != v471)
              {
                int v1288 = v412;
                int v475 = v471;
                bzero((void *)(*(void *)v433 + 8 * v471), 8 * (v474 - v471));
                LODWORD(v471) = v475;
                int v412 = v1288;
                v440 = v1302;
              }
              v472 += v474 - v471;
              *((_DWORD *)v433 + 2) = v472;
              unsigned int v447 = *v438;
            }
            else
            {
              *((_DWORD *)v433 + 2) = v474;
              unsigned int v472 = v473 >> 6;
            }
          }
          if ((v447 & 0x3F) != 0) {
            *(void *)(*(void *)v433 + 8 * v472 - 8) &= ~(-1 << (v447 & 0x3F));
          }
          unsigned int v446 = v447;
        }
        uint64_t v448 = *((unsigned int *)v1302 + 20);
        if (v448)
        {
          v449 = (uint64_t *)*((void *)v1302 + 9);
          v450 = *(void **)v433;
          do
          {
            uint64_t v451 = *v449++;
            *v450++ |= v451;
            --v448;
          }
          while (v448);
        }
        if (v1302[144])
        {
          unsigned int v452 = *((_DWORD *)v440 + 16);
          if (v446 < v452)
          {
            uint64_t v486 = *((unsigned int *)v433 + 2);
            if ((v446 & 0x3F) != 0) {
              *(void *)(*(void *)v433 + 8 * v486 - 8) &= ~(-1 << (v446 & 0x3F));
            }
            unsigned int v476 = v486;
            unsigned int *v438 = v452;
            unsigned int v477 = v452 + 63;
            if (v486 != (v452 + 63) >> 6)
            {
              uint64_t v478 = v477 >> 6;
              if (v486 <= v478)
              {
                if (v478 > *((_DWORD *)v433 + 3)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v478 != v486)
                {
                  int v1289 = v486;
                  bzero((void *)(*(void *)v433 + 8 * v486), 8 * (v478 - v486));
                  LODWORD(v486) = v1289;
                }
                v476 += v478 - v486;
                *((_DWORD *)v433 + 2) = v476;
                unsigned int v452 = *v438;
                v440 = v1302;
              }
              else
              {
                *((_DWORD *)v433 + 2) = v478;
                unsigned int v476 = v477 >> 6;
              }
            }
            if ((v452 & 0x3F) != 0) {
              *(void *)(*(void *)v433 + 8 * v476 - 8) &= ~(-1 << (v452 & 0x3F));
            }
          }
          else
          {
            unsigned int v452 = v446;
          }
          uint64_t v453 = *((unsigned int *)v440 + 2);
          if (v453)
          {
            v454 = *(uint64_t **)v440;
            v455 = *(void **)v433;
            do
            {
              uint64_t v456 = *v454++;
              *v455++ |= v456;
              --v453;
            }
            while (v453);
          }
          unsigned int v446 = v452;
        }
        if (v428[152 * v427 + 144])
        {
          unsigned int v457 = *((_DWORD *)v429 + 16);
          if (v446 < v457)
          {
            uint64_t v487 = *((unsigned int *)v433 + 2);
            if ((v446 & 0x3F) != 0) {
              *(void *)(*(void *)v433 + 8 * v487 - 8) &= ~(-1 << (v446 & 0x3F));
            }
            unsigned int v479 = v487;
            unsigned int *v438 = v457;
            unsigned int v480 = v457 + 63;
            if (v487 != (v457 + 63) >> 6)
            {
              uint64_t v481 = v480 >> 6;
              if (v487 <= v481)
              {
                if (v481 > *((_DWORD *)v433 + 3)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v481 != v487) {
                  bzero((void *)(*(void *)v433 + 8 * v487), 8 * (v481 - v487));
                }
                unsigned int v479 = v481;
                *((_DWORD *)v433 + 2) = v481;
                unsigned int v457 = *v438;
              }
              else
              {
                *((_DWORD *)v433 + 2) = v481;
                unsigned int v479 = v480 >> 6;
              }
            }
            v415 = v1294;
            if ((v457 & 0x3F) != 0) {
              *(void *)(*(void *)v433 + 8 * v479 - 8) &= ~(-1 << (v457 & 0x3F));
            }
          }
          else
          {
            unsigned int v457 = v446;
            v415 = v1294;
          }
          uint64_t v458 = *((unsigned int *)v429 + 2);
          if (v458)
          {
            v459 = (uint64_t *)*v429;
            v460 = *(void **)v433;
            do
            {
              uint64_t v461 = *v459++;
              *v460++ |= v461;
              --v458;
            }
            while (v458);
          }
          unsigned int v446 = v457;
        }
        else if (v428[152 * v427 + 145])
        {
          uint64_t v464 = *((unsigned int *)v433 + 2);
          v415 = v1294;
          if (v464) {
            bzero(*(void **)v433, 8 * v464);
          }
        }
        else
        {
          v415 = v1294;
          *(void *)(*(void *)v433 + 8 * (v427 >> 6)) &= ~(1 << (v1297 >> 3));
        }
        v462 = __s2;
        if (v446 == v1342)
        {
          if (!memcmp(*(const void **)v433, __s2, 8 * *((unsigned int *)v433 + 2))) {
            BOOL v463 = *((_DWORD *)v429 + 16) != v1417
          }
                || memcmp(*v429, __dst[0], 8 * *((unsigned int *)v429 + 2)) != 0;
          else {
            BOOL v463 = 1;
          }
        }
        else
        {
          BOOL v463 = 1;
        }
        if (v462 != v1340) {
          free(v462);
        }
        if (__dst[0] != &__dst[2]) {
          free(__dst[0]);
        }
        v412 |= v463;
        ++v418;
        uint64_t v410 = 152;
        if (v418 == v1291) {
          goto LABEL_758;
        }
      }
    }
    uint64_t v94 = *(uint64_t **)(v1290 + 8);
    uint64_t v95 = &v94[v80];
    uint64_t v4 = 0x800000000;
    while (1)
    {
      uint64_t v96 = *v94;
      __base = "CoroEnd";
      LOWORD(v1372) = 259;
      sub_1CD2D9CD0(v96, (uint64_t)&__base);
      if (v96)
      {
        if (*(_DWORD *)(*(void *)(v96 - 32) + 36) == 33)
        {
          uint64_t v97 = sub_1CD8C50E4(v96);
          if (v97) {
            break;
          }
        }
      }
LABEL_144:
      if (++v94 == v95) {
        goto LABEL_105;
      }
    }
    uint64_t __val = (uint64_t)v97;
    int v98 = 0;
    uint64_t v99 = **(void **)v96;
    __base = &v1370;
    uint64_t v1369 = 0x200000000;
    uint64_t v1376 = v99;
    v1377 = &v1385;
    v1378 = v1386;
    uint64_t v1379 = 0;
    int v1380 = 0;
    __int16 v1381 = 512;
    char v1382 = 7;
    uint64_t v1374 = 0;
    v1375 = 0;
    uint64_t v1383 = 0;
    uint64_t v1384 = 0;
    v1385 = &unk_1F2616E88;
    v1386[0] = &unk_1F2617008;
    uint64_t v1374 = *(void *)(v96 + 40);
    v1375 = (char *)(v96 + 24);
    char v100 = *(void **)(v96 + 48);
    __s2 = v100;
    if (v100)
    {
      llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v100, 2);
      int v98 = __s2;
    }
    sub_1CB8461A4((uint64_t)&__base, 0, (uint64_t)v98);
    if (!__s2)
    {
LABEL_150:
      int v101 = *(_DWORD *)(v96 + 20);
      int v102 = *(unsigned __int8 *)(v96 + 16);
      if (v102 == 84)
      {
        uint64_t v103 = 0;
      }
      else if (v102 == 39)
      {
        uint64_t v103 = (*(_DWORD *)(v96 + 80) + 1);
      }
      else
      {
        uint64_t v103 = 2;
      }
      uint64_t v104 = v101 & 0x7FFFFFF;
      uint64_t v105 = (void *)(v96 - 32 * v104);
      if (v101 < 0 && (uint64_t v123 = *(v105 - 1), (v123 & 0xFFFFFFFF0) != 0)) {
        uint64_t v106 = (*((_DWORD *)v105 - 3) - *(_DWORD *)((char *)v105 - v123));
      }
      else {
        uint64_t v106 = 0;
      }
      uint64_t v107 = v96 - 32 * v103 - 32 * v106 - 32;
      __dst[0] = &__dst[2];
      __dst[1] = (void *)0x800000000;
      unsigned int v108 = &__dst[2];
      unint64_t v109 = v107 - (void)v105;
      if ((unint64_t)(v107 - (void)v105) >= 0x101) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v105 != (void *)v107)
      {
        uint64_t v110 = &__dst[2];
        uint64_t v111 = 32 * v104 - 32 * v103 - 32 * v106 - 32;
        do
        {
          BOOL v112 = (void *)*v105;
          v105 += 4;
          *v110++ = v112;
          v111 -= 32;
        }
        while (v111);
        unsigned int v108 = (void **)__dst[0];
      }
      LODWORD(__dst[1]) = v109 >> 5;
      unsigned int v113 = *(unsigned __int8 **)(v96 + 48);
      v1314 = v113;
      if (v113) {
        llvm::MetadataTracking::track((uint64_t)&v1314, v113, 2);
      }
      uint64_t v114 = sub_1CD8C6650(&v1314, __val, (void **)v108 + 3, (v109 >> 5) - 3, (uint64_t *)&__base);
      uint64_t v10 = (uint64_t)v1279;
      if (!v1314) {
        goto LABEL_165;
      }
      int v115 = *v1314;
      if ((v115 - 4) > 0x1E)
      {
        if ((v115 - 3) >= 0xFFFFFFFE) {
          uint64_t v116 = v1314;
        }
        else {
          uint64_t v116 = 0;
        }
        if ((v115 - 3) < 0xFFFFFFFE)
        {
          if (v115 == 3) {
            *((void *)v1314 + 1) = 0;
          }
          goto LABEL_165;
        }
        unint64_t v117 = (unint64_t)(v116 + 8);
      }
      else
      {
        if ((v1314[1] & 0x7F) != 2 && !*((_DWORD *)v1314 + 3)) {
          goto LABEL_165;
        }
        uint64_t v122 = *((void *)v1314 + 2);
        if ((v122 & 4) == 0) {
          goto LABEL_165;
        }
        unint64_t v117 = v122 & 0xFFFFFFFFFFFFFFF8;
        if (!v117) {
          goto LABEL_165;
        }
      }
      __s2 = &v1314;
      sub_1CC5FA668(v117 + 16, &__s2);
LABEL_165:
      __s2 = "MustTailCall.Before.CoroEnd";
      __int16 v1341 = 259;
      sub_1CD2D9CD0(v114, (uint64_t)&__s2);
      if (__dst[0] != &__dst[2]) {
        free(__dst[0]);
      }
      if (__base != &v1370) {
        free(__base);
      }
      goto LABEL_144;
    }
    int v118 = *(unsigned __int8 *)__s2;
    if ((v118 - 4) > 0x1E)
    {
      if ((v118 - 3) >= 0xFFFFFFFE) {
        uint64_t v121 = __s2;
      }
      else {
        uint64_t v121 = 0;
      }
      if ((v118 - 3) < 0xFFFFFFFE)
      {
        if (v118 == 3) {
          *((void *)__s2 + 1) = 0;
        }
        goto LABEL_150;
      }
      unint64_t v120 = (unint64_t)v121 + 8;
    }
    else
    {
      if ((*((unsigned char *)__s2 + 1) & 0x7F) != 2 && !*((_DWORD *)__s2 + 3)) {
        goto LABEL_150;
      }
      uint64_t v119 = *((void *)__s2 + 2);
      if ((v119 & 4) == 0) {
        goto LABEL_150;
      }
      unint64_t v120 = v119 & 0xFFFFFFFFFFFFFFF8;
      if (!v120) {
        goto LABEL_150;
      }
    }
    __dst[0] = &__s2;
    sub_1CC5FA668(v120 + 16, __dst);
    goto LABEL_150;
  }
  __dst[0] = &__dst[2];
  __dst[1] = (void *)0x400000000;
  if (*(unsigned char *)(v8 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v8);
    uint64_t v12 = *(llvm::ValueAsMetadata **)(v10 + 88);
    if (*(_WORD *)(v10 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v10);
      unsigned int v13 = *(llvm::ValueAsMetadata **)(v10 + 88);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = *(llvm::ValueAsMetadata **)(v8 + 88);
  }
  unsigned int v13 = v12;
LABEL_8:
  BOOL v14 = (llvm::ValueAsMetadata *)((char *)v13 + 40 * *(void *)(v10 + 96));
  while (1)
  {
    if (v12 == v14) {
      goto LABEL_42;
    }
    uint64_t v15 = *(void *)(*((void *)v12 + 3) + 112);
    if (v15)
    {
      unsigned int v16 = *((_DWORD *)v12 + 8) + 2;
      if (v16 < *(_DWORD *)(v15 + 8))
      {
        uint64_t v17 = *(void *)(v15 + 8 * v16 + 40);
        if (v17)
        {
          if (*(char *)(v17 + 19) < 0) {
            break;
          }
        }
      }
    }
    uint64_t v12 = (llvm::ValueAsMetadata *)((char *)v12 + 40);
  }
  uint64_t v18 = *(void *)(v10 + 80);
  if (v18) {
    size_t v19 = (llvm::BasicBlock *)(v18 - 24);
  }
  else {
    size_t v19 = 0;
  }
  FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v19, 1);
  int v21 = 0;
  uint64_t v22 = **(void **)FirstNonPHIOrDbg;
  __base = &v1370;
  uint64_t v1369 = 0x200000000;
  uint64_t v1376 = v22;
  v1377 = &v1385;
  v1378 = v1386;
  uint64_t v1379 = 0;
  int v1380 = 0;
  __int16 v1381 = 512;
  char v1382 = 7;
  v1375 = 0;
  uint64_t v1374 = 0;
  uint64_t v1384 = 0;
  uint64_t v1383 = 0;
  v1385 = &unk_1F2616E88;
  v1386[0] = &unk_1F2617008;
  uint64_t v1374 = *((void *)FirstNonPHIOrDbg + 5);
  v1375 = FirstNonPHIOrDbg + 24;
  int v23 = (void *)*((void *)FirstNonPHIOrDbg + 6);
  v1390 = v23;
  if (v23)
  {
    llvm::MetadataTracking::track((uint64_t)&v1390, (unsigned __int8 *)v23, 2);
    int v21 = v1390;
  }
  sub_1CB8461A4((uint64_t)&__base, 0, (uint64_t)v21);
  if (!v1390) {
    goto LABEL_21;
  }
  int v1268 = *(unsigned __int8 *)v1390;
  if ((v1268 - 4) > 0x1E)
  {
    if ((v1268 - 3) >= 0xFFFFFFFE) {
      v1273 = v1390;
    }
    else {
      v1273 = 0;
    }
    if ((v1268 - 3) < 0xFFFFFFFE)
    {
      if (v1268 == 3) {
        *((void *)v1390 + 1) = 0;
      }
      goto LABEL_21;
    }
    unint64_t v1270 = (unint64_t)v1273 + 8;
  }
  else
  {
    if ((*((unsigned char *)v1390 + 1) & 0x7F) != 2 && !*((_DWORD *)v1390 + 3)) {
      goto LABEL_21;
    }
    uint64_t v1269 = *((void *)v1390 + 2);
    if ((v1269 & 4) == 0) {
      goto LABEL_21;
    }
    unint64_t v1270 = v1269 & 0xFFFFFFFFFFFFFFF8;
    if (!v1270) {
      goto LABEL_21;
    }
  }
  __s2 = &v1390;
  sub_1CC5FA668(v1270 + 16, &__s2);
  uint64_t v10 = (uint64_t)v1279;
LABEL_21:
  uint64_t v24 = *(void *)v12;
  if (*(void *)(*(void *)v12 + 24)) {
    BOOL v25 = **(llvm::Type ***)(v24 + 16);
  }
  else {
    BOOL v25 = (llvm::Type *)llvm::PointerType::get(**(uint64_t ****)v10, 0);
  }
  uint64_t v26 = (llvm::Type *)(*(_DWORD *)(v24 + 8) >> 8);
  __int16 v1341 = 257;
  unsigned int v27 = sub_1CD63F438((uint64_t)&__base, v25, v26, 0, (uint64_t)&__s2);
  llvm::Value::doRAUW(v12, v27, (llvm::Value *)1);
  NullValue = llvm::Constant::getNullValue(v25, v28, v29);
  char v31 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v1374 + 56) + 40) + 272), *(llvm::Type **)NullValue, 1);
  BOOL v32 = (char *)operator new(0x80uLL);
  *((_DWORD *)v32 + 21) = *((_DWORD *)v32 + 21) & 0x38000000 | 2;
  *(void *)BOOL v32 = 0;
  *((void *)v32 + 2) = 0;
  *((void *)v32 + 1) = 0;
  *((void *)v32 + 5) = 0;
  *((void *)v32 + 6) = 0;
  *((void *)v32 + 4) = 0;
  int v33 = (llvm::Instruction **)(v32 + 32);
  *((void *)v32 + 8) = ***(void ***)NullValue + 1576;
  uint64_t v34 = (llvm::Instruction *)(v32 + 64);
  *((void *)v32 + 3) = v32 + 64;
  *((void *)v32 + 7) = v32 + 64;
  *((void *)v32 + 9) = 0;
  v32[80] = 61;
  v32[81] = 0;
  *((_WORD *)v32 + 41) = 0;
  *((_DWORD *)v32 + 21) = 2;
  *(_OWORD *)(v32 + 88) = 0u;
  *(_OWORD *)(v32 + 104) = 0u;
  *((_DWORD *)v32 + 30) = 0;
  *(void *)BOOL v32 = NullValue;
  uint64_t v37 = *((void *)NullValue + 1);
  uint64_t v36 = (void *)((char *)NullValue + 8);
  uint64_t v35 = v37;
  *((void *)v32 + 1) = v37;
  if (v37) {
    *(void *)(v35 + 16) = v32 + 8;
  }
  *((void *)v32 + 2) = v36;
  *uint64_t v36 = v32;
  if (*((void *)v32 + 4))
  {
    **((void **)v32 + 6) = *((void *)v32 + 5);
    uint64_t v1276 = *((void *)v32 + 5);
    if (v1276) {
      *(void *)(v1276 + 16) = *((void *)v32 + 6);
    }
  }
  _DWORD *v33 = v27;
  if (v27)
  {
    uint64_t v38 = (llvm::Instruction ***)((char *)v27 + 8);
    uint64_t v39 = *((void *)v27 + 1);
    *((void *)v32 + 5) = v39;
    if (v39) {
      *(void *)(v39 + 16) = v32 + 40;
    }
    *((void *)v32 + 6) = v38;
    *uint64_t v38 = v33;
  }
  *((_WORD *)v32 + 41) = 2 * (v31 & 0x3F);
  v32[124] = 1;
  __int16 v1341 = 257;
  (*(void (**)(void *, llvm::Instruction *, void **, uint64_t, char *))(*v1378 + 16))(v1378, v34, &__s2, v1374, v1375);
  if (v1369)
  {
    v1271 = (llvm::MDNode **)__base;
    v1272 = (llvm::MDNode **)((char *)__base + 16 * v1369);
    do
    {
      llvm::Instruction::setMetadata(v34, *(_DWORD *)v1271, v1271[1]);
      v1271 += 2;
    }
    while (v1271 != v1272);
  }
  uint64_t v40 = *(unsigned int *)(v1290 + 128);
  if (v40)
  {
    uint64_t v41 = *(uint64_t ****)(v1290 + 120);
    uint64_t v42 = 8 * v40;
    do
    {
      uint64_t v43 = *v41++;
      sub_1CD2D9E94(v43, (uint64_t)v27, v1290);
      v42 -= 8;
    }
    while (v42);
  }
  uint64_t v44 = *(unsigned int *)(v1290 + 16);
  if (!v44)
  {
LABEL_39:
    uint64_t v10 = (uint64_t)v1279;
    if (LODWORD(__dst[1]) >= HIDWORD(__dst[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)__dst[0] + LODWORD(__dst[1])) = v27;
    ++LODWORD(__dst[1]);
    sub_1CD2D9DE8((uint64_t)v27, v1290);
    if (__base != &v1370) {
      free(__base);
    }
LABEL_42:
    uint64_t v45 = *(void *)(v10 + 80);
    if (v45) {
      uint64_t v46 = v45 - 24;
    }
    else {
      uint64_t v46 = 0;
    }
    uint64_t v47 = v46 + 40;
    for (uint64_t i9 = *(void *)(v46 + 48); i9 != v47; uint64_t i9 = *(void *)(i9 + 8))
    {
      uint64_t v49 = i9 - 24;
      if (!i9) {
        uint64_t v49 = 0;
      }
      int v50 = *(unsigned __int8 *)(v49 + 16);
      if (v50 == 59) {
        uint64_t v51 = v49;
      }
      else {
        uint64_t v51 = 0;
      }
      if (i9)
      {
        if (v50 == 59)
        {
          __int16 v52 = *(_WORD *)(v51 + 18);
          if ((v52 & 0x80) != 0)
          {
            *(_WORD *)(v51 + 18) = v52 & 0xFF7F;
            if (LODWORD(__dst[1]) >= (unint64_t)HIDWORD(__dst[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__dst[0] + LODWORD(__dst[1])) = v51;
            ++LODWORD(__dst[1]);
            sub_1CD2D9DE8(v51, v1290);
          }
        }
      }
    }
    if (LODWORD(__dst[1]))
    {
      __base = &v1370;
      uint64_t v1369 = 0x100000000;
      HIDWORD(v1376) = 0;
      uint64_t v1372 = 0;
      uint64_t v1371 = 0;
      int v1373 = 0;
      LOBYTE(v1376) = 0;
      uint64_t v1374 = 0;
      v1375 = (char *)v1279;
      sub_1CC5A43B0((uint64_t)&__base, 0);
      llvm::PromoteMemToReg(__dst[0], LODWORD(__dst[1]), &__base, 0);
      sub_1CBF8FF88(&v1371);
      if (__base != &v1370) {
        free(__base);
      }
    }
    if (__dst[0] != &__dst[2]) {
      free(__dst[0]);
    }
    uint64_t v53 = v1290;
    v1278 = (unsigned int *)(v1290 + 264);
    if (!*(_DWORD *)(v1290 + 200) && *(void *)(v1290 + 264))
    {
      uint64_t v54 = *(void *)(*(void *)v1290 - 32 * (*(_DWORD *)(*(void *)v1290 + 20) & 0x7FFFFFF));
      uint64_t v55 = *(void *)(v54 - 32 * (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) + 32);
      int v56 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)v54 + 1912), 0);
      uint64_t v58 = llvm::ConstantPointerNull::get(v56, v57);
      uint64_t v59 = v54 - 32 * (*(_DWORD *)(v54 + 20) & 0x7FFFFFF);
      uint64_t v60 = (void *)(v59 + 32);
      if (*(void *)(v59 + 32))
      {
        **(void **)(v59 + 48) = *(void *)(v59 + 40);
        uint64_t v61 = *(void *)(v59 + 40);
        if (v61) {
          *(void *)(v61 + 16) = *(void *)(v59 + 48);
        }
      }
      *uint64_t v60 = v58;
      if (v58)
      {
        uint64_t v64 = v58[1];
        uint64_t v62 = v58 + 1;
        uint64_t v63 = v64;
        *(void *)(v59 + 40) = v64;
        if (v64) {
          *(void *)(v63 + 16) = v59 + 40;
        }
        *(void *)(v59 + 48) = v62;
        void *v62 = v60;
      }
      uint64_t v53 = v1290;
      if (*(unsigned char *)(v55 + 16) != 59)
      {
        if (!*(void *)(v55 + 8)) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        uint64_t v65 = *(void *)(v54 + 8);
        do
        {
          uint64_t v66 = *(void *)(v65 + 24);
          if (*(unsigned char *)(v66 + 16) == 84)
          {
            uint64_t v67 = *(void *)(v66 - 32);
            if (v67)
            {
              if (!*(unsigned char *)(v67 + 16)
                && *(void *)(v67 + 24) == *(void *)(v66 + 72)
                && (*(unsigned char *)(v67 + 33) & 0x20) != 0
                && *(_DWORD *)(v67 + 36) == 29)
              {
                break;
              }
            }
          }
          uint64_t v65 = *(void *)(v65 + 8);
        }
        while (v65);
        uint64_t v69 = v66 + 32;
        uint64_t v68 = *(void *)(v66 + 32);
        uint64_t v70 = *(void *)(v69 + 8) + 40;
        if (v68) {
          BOOL v71 = v68 == v70;
        }
        else {
          BOOL v71 = 1;
        }
        if (v71) {
          uint64_t v72 = 0;
        }
        else {
          uint64_t v72 = (llvm::Instruction *)(v68 - 24);
        }
        llvm::Instruction::moveBefore((llvm::Instruction *)v55, v72);
        uint64_t v53 = v1290;
      }
    }
    uint64_t v73 = *(unsigned int *)(v53 + 128);
    if (v73)
    {
      uint64_t v74 = *(uint64_t **)(v53 + 120);
      uint64_t v75 = 8 * v73;
      do
      {
        uint64_t v76 = *v74;
        if (*v74 && *(_DWORD *)(*(void *)(v76 - 32) + 36) == 48)
        {
          uint64_t v77 = *(void *)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF));
          BOOL v78 = sub_1CD2C9100(v77);
          if (v77 && v78)
          {
            __base = "CoroSave";
            LOWORD(v1372) = 259;
            sub_1CD2D9CD0(v77, (uint64_t)&__base);
          }
        }
        __base = "CoroSuspend";
        LOWORD(v1372) = 259;
        sub_1CD2D9CD0(v76, (uint64_t)&__base);
        ++v74;
        v75 -= 8;
      }
      while (v75);
      uint64_t v9 = (unsigned int *)v1290;
    }
    else
    {
      uint64_t v9 = (unsigned int *)v53;
    }
    uint64_t v10 = (uint64_t)v1279;
    goto LABEL_104;
  }
  v1253 = *(uint64_t **)(v1290 + 8);
  v1254 = &v1253[v44];
  while (1)
  {
    uint64_t v1255 = *v1253;
    uint64_t v1256 = *v1253 + 24;
    uint64_t v1374 = *(void *)(*v1253 + 40);
    v1375 = (char *)v1256;
    v1257 = *(void **)(v1255 + 48);
    v1390 = v1257;
    if (v1257)
    {
      llvm::MetadataTracking::track((uint64_t)&v1390, (unsigned __int8 *)v1257, 2);
      v1258 = v1390;
    }
    else
    {
      v1258 = 0;
    }
    sub_1CB8461A4((uint64_t)&__base, 0, (uint64_t)v1258);
    if (!v1390) {
      goto LABEL_2108;
    }
    int v1264 = *(unsigned __int8 *)v1390;
    if ((v1264 - 4) > 0x1E)
    {
      if ((v1264 - 3) >= 0xFFFFFFFE) {
        v1267 = v1390;
      }
      else {
        v1267 = 0;
      }
      if ((v1264 - 3) < 0xFFFFFFFE)
      {
        if (v1264 == 3) {
          *((void *)v1390 + 1) = 0;
        }
        goto LABEL_2108;
      }
      unint64_t v1266 = (unint64_t)v1267 + 8;
    }
    else
    {
      if ((*((unsigned char *)v1390 + 1) & 0x7F) != 2 && !*((_DWORD *)v1390 + 3)) {
        goto LABEL_2108;
      }
      uint64_t v1265 = *((void *)v1390 + 2);
      if ((v1265 & 4) == 0) {
        goto LABEL_2108;
      }
      unint64_t v1266 = v1265 & 0xFFFFFFFFFFFFFFF8;
      if (!v1266) {
        goto LABEL_2108;
      }
    }
    __s2 = &v1390;
    sub_1CC5FA668(v1266 + 16, &__s2);
LABEL_2108:
    LOWORD(v1394) = 257;
    char v1259 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v1374 + 56) + 40) + 272), v25, 1);
    v1260 = operator new(0x60uLL);
    v1260[13] = v1260[13] & 0x38000000 | 1;
    v1261 = (llvm::Instruction *)(v1260 + 8);
    *(void *)v1260 = 0;
    *((void *)v1260 + 1) = 0;
    *((void *)v1260 + 2) = 0;
    *((void *)v1260 + 3) = v1260 + 8;
    __int16 v1341 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v1260 + 8), (uint64_t)v25, (uint64_t)v27, (const char **)&__s2, 0, v1259, 0);
    (*(void (**)(void *, llvm::Instruction *, void **, uint64_t, char *))(*v1378 + 16))(v1378, v1261, &v1390, v1374, v1375);
    if (v1369)
    {
      v1262 = (llvm::MDNode **)__base;
      v1263 = (llvm::MDNode **)((char *)__base + 16 * v1369);
      do
      {
        llvm::Instruction::setMetadata(v1261, *(_DWORD *)v1262, v1262[1]);
        v1262 += 2;
      }
      while (v1262 != v1263);
    }
    sub_1CD2DA444((uint64_t *)&__base, (llvm::PointerType **)v1261, v1290);
    if (++v1253 == v1254) {
      goto LABEL_39;
    }
  }
}

void sub_1CD2D9CD0(uint64_t a1, uint64_t a2)
{
  sub_1CD2DA54C(a1, (const char **)a2);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  if (v6 == 1)
  {
    v13[0] = "After";
    __int16 v7 = 259;
    goto LABEL_5;
  }
  if (!*(unsigned char *)(a2 + 32))
  {
    __int16 v7 = 256;
LABEL_5:
    __int16 v14 = v7;
    goto LABEL_10;
  }
  uint64_t v8 = *(const char **)(a2 + 8);
  if (*(unsigned char *)(a2 + 33) == 1)
  {
    uint64_t v9 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v6) = 2;
    uint64_t v9 = (const char *)a2;
  }
  v13[0] = "After";
  v13[2] = v9;
  v13[3] = v8;
  LOBYTE(v14) = 3;
  HIBYTE(v14) = v6;
LABEL_10:
  uint64_t v10 = v5 + 40;
  if (v4) {
    BOOL v11 = v4 == v10;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v4 - 24;
  }
  sub_1CD2DA54C(v12, v13);
}

uint64_t sub_1CD2D9D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleSuccessor = *(llvm::BasicBlock **)(a2 + 40);
  if (sub_1CD2DAE24(a2)) {
    uint64_t SingleSuccessor = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(SingleSuccessor);
  }

  return sub_1CD2DACC0(a1, (unint64_t)SingleSuccessor, a3);
}

uint64_t sub_1CD2D9DE8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = v2;
      int v6 = (void *)(v2 + 8);
      uint64_t v2 = *(void *)(v2 + 8);
      uint64_t result = v6[2];
      if ((*(unsigned char *)(result + 16) & 0xFE) != 0x3C)
      {
        uint64_t result = sub_1CD2D9E94((uint64_t **)result, v4, a2);
        if (*(void *)v5)
        {
          **(void **)(v5 + 16) = *(void *)(v5 + 8);
          uint64_t v7 = *(void *)(v5 + 8);
          if (v7) {
            *(void *)(v7 + 16) = *(void *)(v5 + 16);
          }
        }
        *(void *)uint64_t v5 = result;
        if (result)
        {
          uint64_t v9 = *(void *)(result + 8);
          result += 8;
          uint64_t v8 = v9;
          void *v6 = v9;
          if (v9) {
            *(void *)(v8 + 16) = v6;
          }
          *(void *)(v5 + 16) = result;
          *(void *)uint64_t result = v5;
        }
      }
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CD2D9E94(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  v66[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(llvm::Type **)(a2 + 64);
  uint64_t v8 = **a1;
  uint64_t v51 = v53;
  uint64_t v52 = 0x200000000;
  uint64_t v56 = v8;
  uint64_t v57 = &v65;
  uint64_t v58 = v66;
  uint64_t v59 = 0;
  int v60 = 0;
  __int16 v61 = 512;
  char v62 = 7;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = &unk_1F2616E88;
  v66[0] = &unk_1F2617008;
  uint64_t v9 = (unsigned __int8 *)a1[6];
  uint64_t v54 = a1[5];
  uint64_t v55 = (char *)(a1 + 3);
  v47[0] = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)v47, v9, 2);
    uint64_t v6 = v47[0];
  }
  sub_1CB8461A4((uint64_t)&v51, 0, v6);
  if (v47[0])
  {
    int v38 = *(unsigned __int8 *)v47[0];
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        uint64_t v45 = v47[0];
      }
      else {
        uint64_t v45 = 0;
      }
      if ((v38 - 3) < 0xFFFFFFFE)
      {
        if (v38 == 3) {
          *(void *)(v47[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v40 = v45 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v47[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v47[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v39 = *(void *)(v47[0] + 16);
      if ((v39 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if (!v40) {
        goto LABEL_4;
      }
    }
    v49[0] = (const char *)v47;
    sub_1CC5FA668(v40 + 16, v49);
  }
LABEL_4:
  __int16 v48 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v54[7] + 40) + 272), v7, 1);
  BOOL v11 = operator new(0x60uLL);
  v11[13] = v11[13] & 0x38000000 | 1;
  uint64_t v12 = (llvm::Instruction *)(v11 + 8);
  *(void *)BOOL v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = v11 + 8;
  __int16 v50 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v11 + 8), (uint64_t)v7, a2, v49, 0, Alignment, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, char *))(*v58 + 16))(v58, v12, v47, v54, v55);
  if (v52)
  {
    uint64_t v36 = (llvm::MDNode **)v51;
    uint64_t v37 = (llvm::MDNode **)((char *)v51 + 16 * v52);
    do
    {
      llvm::Instruction::setMetadata(v12, *(_DWORD *)v36, v36[1]);
      v36 += 2;
    }
    while (v36 != v37);
  }
  uint64_t v13 = sub_1CD2DA444((uint64_t *)&v51, (llvm::PointerType **)v12, a3);
  if (*((unsigned char *)a1 + 16) != 84)
  {
    FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg((llvm::BasicBlock *)*(a1 - 12), 1);
    uint64_t v54 = (uint64_t *)*((void *)FirstNonPHIOrDbg + 5);
    uint64_t v55 = FirstNonPHIOrDbg + 24;
    uint64_t v18 = (unsigned __int8 *)*((void *)FirstNonPHIOrDbg + 6);
    v47[0] = v18;
    if (!v18)
    {
      uint64_t v14 = 0;
      goto LABEL_16;
    }
    goto LABEL_37;
  }
  uint64_t v14 = 0;
  uint64_t v15 = a1[4];
  if (v15) {
    BOOL v16 = v15 == a1[5] + 5;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v15 - 3;
  }
  uint64_t v54 = (uint64_t *)v17[5];
  uint64_t v55 = (char *)(v17 + 3);
  uint64_t v18 = (unsigned __int8 *)v17[6];
  v47[0] = v18;
  if (v18)
  {
LABEL_37:
    llvm::MetadataTracking::track((uint64_t)v47, v18, 2);
    uint64_t v14 = v47[0];
  }
LABEL_16:
  sub_1CB8461A4((uint64_t)&v51, 0, v14);
  if (!v47[0]) {
    goto LABEL_17;
  }
  int v41 = *(unsigned __int8 *)v47[0];
  if ((v41 - 4) > 0x1E)
  {
    if ((v41 - 3) >= 0xFFFFFFFE) {
      uint64_t v46 = v47[0];
    }
    else {
      uint64_t v46 = 0;
    }
    if ((v41 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v43 = v46 + 8;
LABEL_58:
      v49[0] = (const char *)v47;
      sub_1CC5FA668(v43 + 16, v49);
      goto LABEL_17;
    }
    if (v41 == 3) {
      *(void *)(v47[0] + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(v47[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v47[0] + 12))
  {
    uint64_t v42 = *(void *)(v47[0] + 16);
    if ((v42 & 4) != 0)
    {
      unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
      if (v43) {
        goto LABEL_58;
      }
    }
  }
LABEL_17:
  size_t v20 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v7, 0, 0, 0);
  int v21 = (llvm::ConstantPointerNull *)llvm::PointerType::get(v20, 0);
  int v23 = (uint64_t **)llvm::ConstantPointerNull::get(v21, v22);
  __int16 v50 = 257;
  uint64_t v24 = sub_1CB845BAC((uint64_t *)&v51, (uint64_t **)v20, v23, 0, 0, (uint64_t)v49, 0);
  unsigned int v25 = *(_DWORD *)(a3 + 176);
  if (v25 >= *(_DWORD *)(a3 + 180)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a3 + 168) + 8 * v25) = v24;
  ++*(_DWORD *)(a3 + 176);
  char v26 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v54[7] + 40) + 272), *(llvm::Type **)v24, 1);
  unsigned int v27 = (char *)operator new(0x80uLL);
  *((_DWORD *)v27 + 21) = *((_DWORD *)v27 + 21) & 0x38000000 | 2;
  *(void *)unsigned int v27 = 0;
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 5) = 0;
  *((void *)v27 + 6) = 0;
  *((void *)v27 + 4) = 0;
  *((void *)v27 + 8) = ***(void ***)v24 + 1576;
  int v28 = (llvm::Instruction *)(v27 + 64);
  *((void *)v27 + 3) = v27 + 64;
  *((void *)v27 + 7) = v27 + 64;
  *((void *)v27 + 9) = 0;
  v27[80] = 61;
  v27[81] = 0;
  *((_DWORD *)v27 + 21) = 2;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_OWORD *)(v27 + 104) = 0u;
  *((_DWORD *)v27 + 30) = 0;
  uint64_t v29 = (void *)(v24 + 8);
  uint64_t v30 = *(void *)(v24 + 8);
  *(void *)unsigned int v27 = v24;
  *((void *)v27 + 1) = v30;
  if (v30) {
    *(void *)(v30 + 16) = v27 + 8;
  }
  *((void *)v27 + 2) = v29;
  *uint64_t v29 = v27;
  *((void *)v27 + 4) = a2;
  if (a2)
  {
    uint64_t v33 = *(void *)(a2 + 8);
    BOOL v32 = (void *)(a2 + 8);
    uint64_t v31 = v33;
    *((void *)v27 + 5) = v33;
    if (v33) {
      *(void *)(v31 + 16) = v27 + 40;
    }
    *((void *)v27 + 6) = v32;
    *BOOL v32 = v27 + 32;
  }
  *((_WORD *)v27 + 41) = 2 * (v26 & 0x3F);
  v27[124] = 1;
  __int16 v50 = 257;
  (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, char *))(*v58 + 16))(v58, v28, v49, v54, v55);
  uint64_t v34 = (llvm::MDNode **)v51;
  if (v52)
  {
    uint64_t v44 = (llvm::MDNode **)((char *)v51 + 16 * v52);
    do
    {
      llvm::Instruction::setMetadata(v28, *(_DWORD *)v34, v34[1]);
      v34 += 2;
    }
    while (v34 != v44);
    uint64_t v34 = (llvm::MDNode **)v51;
  }
  if (v34 != (llvm::MDNode **)v53) {
    free(v34);
  }
  return v13;
}

uint64_t sub_1CD2DA444(uint64_t *a1, llvm::PointerType **a2, uint64_t a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t **)llvm::PointerType::get(*a2, 0);
  v14[0] = *a2;
  uint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v6, (uint64_t)v14, 1, 0);
  uint64_t v8 = (llvm::ConstantPointerNull *)llvm::PointerType::get(v7, 0);
  uint64_t v10 = (uint64_t **)llvm::ConstantPointerNull::get(v8, v9);
  v16[0] = (uint64_t)a2;
  __int16 v15 = 257;
  uint64_t v11 = sub_1CB845BAC(a1, (uint64_t **)v7, v10, v16, 1, (uint64_t)v14, 0);
  unsigned int v12 = *(_DWORD *)(a3 + 176);
  if (v12 >= *(_DWORD *)(a3 + 180)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a3 + 168) + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 176);
  return v11;
}

void sub_1CD2DA54C(uint64_t a1, const char **a2)
{
  uint64_t v4 = *(llvm::Value **)(a1 + 40);
  uint64_t v5 = (void **)*((void *)v4 + 6);
  if (v5) {
    uint64_t v6 = v5 - 3;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != (void **)a1 || !llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(a1 + 40)))
  {
    llvm::BasicBlock::splitBasicBlock((uint64_t)v4, a1 + 24, (uint64_t)a2, 0);
  }
  llvm::Value::setNameImpl(v4, a2);
  if (!*((unsigned char *)v4 + 16))
  {
    if ((*((unsigned char *)v4 + 23) & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v7 = ***(void ***)v4;
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = *(unsigned int *)(v7 + 168);
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v11 = (llvm::Value **)(v8 + 16 * v10);
      unsigned int v12 = *v11;
      if (*v11 == v4)
      {
LABEL_18:
        __int16 v15 = v11[1];
        unint64_t v18 = *(void *)v15;
        BOOL v16 = (char *)v15 + 16;
        unint64_t v17 = v18;
        if (v18 >= 5 && *(_DWORD *)v16 == *(_DWORD *)"llvm." && v16[4] == aLlvm_1[4])
        {
          *((_DWORD *)v4 + 8) |= 0x2000u;
          int v20 = llvm::Function::lookupIntrinsicID(v16, v17);
LABEL_26:
          *((_DWORD *)v4 + 9) = v20;
          return;
        }
LABEL_25:
        int v20 = 0;
        *((_DWORD *)v4 + 8) &= ~0x2000u;
        goto LABEL_26;
      }
      int v13 = 1;
      while (v12 != (llvm::Value *)-4096)
      {
        int v14 = v10 + v13++;
        uint64_t v10 = v14 & (v9 - 1);
        unsigned int v12 = *(llvm::Value **)(v8 + 16 * v10);
        if (v12 == v4)
        {
          uint64_t v11 = (llvm::Value **)(v8 + 16 * v10);
          goto LABEL_18;
        }
      }
    }
    uint64_t v11 = (llvm::Value **)(v8 + 16 * v9);
    goto LABEL_18;
  }
}

uint64_t ***sub_1CD2DA6B8(uint64_t ***result, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = a4;
  int v102 = result;
  uint64_t v6 = result[6];
  if (v6) {
    uint64_t v7 = v6 - 3;
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v101 = (result >> 4) ^ (result >> 9);
  do
  {
    int v8 = *((_DWORD *)v7 + 5);
    uint64_t v9 = v8 & 0x7FFFFFF;
    if ((v8 & 0x7FFFFFF) != 0)
    {
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = &v7[-4 * v9];
        if ((v8 & 0x40000000) != 0) {
          uint64_t v11 = (uint64_t **)*(v7 - 1);
        }
        if ((&v11[4 * *((unsigned int *)v7 + 15)])[v10] == (uint64_t *)a2) {
          break;
        }
        if (v9 == ++v10) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      LODWORD(v10) = -1;
    }
    if ((v8 & 0x40000000) != 0) {
      unsigned int v12 = (uint64_t **)*(v7 - 1);
    }
    else {
      unsigned int v12 = &v7[-4 * v9];
    }
    uint64_t v13 = v10;
    int v14 = v12[4 * v10];
    __int16 v15 = (uint64_t **)*v14;
    if ((*((unsigned char *)v14 + 23) & 0x10) != 0)
    {
      uint64_t v16 = **v15;
      uint64_t v17 = *(void *)(v16 + 152);
      uint64_t v18 = *(unsigned int *)(v16 + 168);
      if (v18)
      {
        LODWORD(v19) = (v18 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        int v20 = (uint64_t *)(v17 + 16 * v19);
        int v21 = (uint64_t *)*v20;
        if ((uint64_t *)*v20 == v14)
        {
LABEL_23:
          uint64_t v24 = (void *)v20[1];
          uint64_t v27 = *v24;
          char v26 = (char *)(v24 + 2);
          uint64_t v25 = v27;
          goto LABEL_24;
        }
        int v22 = 1;
        while (v21 != (uint64_t *)-4096)
        {
          int v23 = v19 + v22++;
          uint64_t v19 = v23 & (v18 - 1);
          int v21 = *(uint64_t **)(v17 + 16 * v19);
          if (v21 == v14)
          {
            int v20 = (uint64_t *)(v17 + 16 * v19);
            goto LABEL_23;
          }
        }
      }
      int v20 = (uint64_t *)(v17 + 16 * v18);
      goto LABEL_23;
    }
    uint64_t v25 = 0;
    char v26 = &byte_1CFBCE98E;
LABEL_24:
    v104[0] = v26;
    v104[1] = v25;
    v104[2] = ".";
    __int16 v105 = 773;
    if ((*((unsigned char *)result + 23) & 0x10) != 0)
    {
      uint64_t v28 = ***result;
      uint64_t v29 = *(void *)(v28 + 152);
      uint64_t v30 = *(unsigned int *)(v28 + 168);
      if (v30)
      {
        LODWORD(v31) = (v30 - 1) & v101;
        BOOL v32 = (uint64_t ****)(v29 + 16 * v31);
        uint64_t v33 = *v32;
        if (*v32 == result)
        {
LABEL_32:
          uint64_t v36 = v32[1];
          uint64_t v39 = (const char *)*v36;
          int v38 = (const char *)(v36 + 2);
          uint64_t v37 = v39;
          goto LABEL_33;
        }
        int v34 = 1;
        while (v33 != (uint64_t ***)-4096)
        {
          int v35 = v31 + v34++;
          uint64_t v31 = v35 & (v30 - 1);
          uint64_t v33 = *(uint64_t ****)(v29 + 16 * v31);
          if (v33 == result)
          {
            BOOL v32 = (uint64_t ****)(v29 + 16 * v31);
            goto LABEL_32;
          }
        }
      }
      BOOL v32 = (uint64_t ****)(v29 + 16 * v30);
      goto LABEL_32;
    }
    uint64_t v37 = 0;
    int v38 = &byte_1CFBCE98E;
LABEL_33:
    v106[0] = (const char *)v104;
    v106[2] = v38;
    v106[3] = v37;
    __int16 v107 = 1282;
    unint64_t v40 = *(uint64_t **)(a2 + 48);
    int v41 = operator new(0x48uLL);
    uint64_t v42 = v41;
    v41[1] = v15;
    unint64_t v43 = (llvm::Value *)(v41 + 1);
    void *v41 = 0;
    v41[2] = 0;
    uint64_t v44 = v41 + 2;
    v41[3] = 0x4000000000000053;
    *((_OWORD *)v41 + 2) = 0u;
    uint64_t v45 = (char *)(v41 + 4);
    *((_OWORD *)v41 + 3) = 0u;
    *((_DWORD *)v41 + 16) = 0;
    if (v40)
    {
      uint64_t v80 = v40[2];
      v41[6] = v80;
      *(_WORD *)(v80 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v41 + 31) & 0x10) != 0)
      {
        uint64_t v90 = *(void *)(v80 + 56);
        if (v90)
        {
          unsigned int v91 = *(llvm::ValueSymbolTable **)(v90 + 104);
          if (v91) {
            llvm::ValueSymbolTable::reinsertValue(v91, v43);
          }
        }
      }
      uint64_t v81 = *v40;
      v42[4] = *v40;
      void v42[5] = v40;
      *(void *)(v81 + 8) = v45;
      uint64_t *v40 = (uint64_t)v45;
    }
    *((_DWORD *)v42 + 17) = 1;
    llvm::Value::setNameImpl(v43, v106);
    if (!*((unsigned char *)v42 + 24))
    {
      if ((*((unsigned char *)v42 + 31) & 0x10) == 0) {
        goto LABEL_106;
      }
      uint64_t v82 = ***(void ***)v43;
      uint64_t v83 = *(void *)(v82 + 152);
      uint64_t v84 = *(unsigned int *)(v82 + 168);
      if (!v84) {
        goto LABEL_98;
      }
      LODWORD(v85) = (v84 - 1) & ((v43 >> 4) ^ (v43 >> 9));
      uint64_t v86 = (llvm::Value **)(v83 + 16 * v85);
      uint64_t v87 = *v86;
      if (*v86 != v43)
      {
        int v88 = 1;
        while (v87 != (llvm::Value *)-4096)
        {
          int v89 = v85 + v88++;
          uint64_t v85 = v89 & (v84 - 1);
          uint64_t v87 = *(llvm::Value **)(v83 + 16 * v85);
          if (v87 == v43)
          {
            uint64_t v86 = (llvm::Value **)(v83 + 16 * v85);
            goto LABEL_99;
          }
        }
LABEL_98:
        uint64_t v86 = (llvm::Value **)(v83 + 16 * v84);
      }
LABEL_99:
      uint64_t v92 = v86[1];
      unint64_t v95 = *(void *)v92;
      uint64_t v93 = (char *)v92 + 16;
      unint64_t v94 = v95;
      if (v95 >= 5 && (*(_DWORD *)v93 == *(_DWORD *)"llvm." ? (BOOL v96 = v93[4] == aLlvm_1[4]) : (BOOL v96 = 0), v96))
      {
        *((_DWORD *)v42 + 10) |= 0x2000u;
        int v97 = llvm::Function::lookupIntrinsicID(v93, v94);
      }
      else
      {
LABEL_106:
        int v97 = 0;
        *((_DWORD *)v42 + 10) &= ~0x2000u;
      }
      *((_DWORD *)v42 + 11) = v97;
    }
    uint64_t v46 = *((unsigned int *)v42 + 17);
    uint64_t v47 = operator new(40 * v46);
    void *v42 = v47;
    if (v46)
    {
      __int16 v48 = v47;
      do
      {
        void *v48 = 0;
        v48[1] = 0;
        v48[2] = 0;
        v48[3] = v43;
        v48 += 4;
      }
      while (v48 != &v47[4 * v46]);
    }
    int v49 = *((_DWORD *)v42 + 7);
    uint64_t v50 = v49 & 0x7FFFFFF;
    if ((v49 & 0x7FFFFFF) == *((_DWORD *)v42 + 17))
    {
      unsigned int v70 = v50 + (v50 >> 1);
      if (v70 <= 2) {
        uint64_t v71 = 2;
      }
      else {
        uint64_t v71 = v70;
      }
      *((_DWORD *)v42 + 17) = v71;
      if ((v49 & 0x40000000) != 0) {
        uint64_t v72 = v47;
      }
      else {
        uint64_t v72 = (uint64_t *)((char *)v43 - 32 * v50);
      }
      __p = v72;
      uint64_t v73 = operator new(40 * v71);
      void *v42 = v73;
      uint64_t v74 = v73;
      do
      {
        void *v74 = 0;
        v74[1] = 0;
        v74[2] = 0;
        v74[3] = v43;
        v74 += 4;
      }
      while (v74 != &v73[4 * v71]);
      int v75 = *((_DWORD *)v42 + 7);
      if ((v75 & 0x40000000) != 0) {
        uint64_t v76 = (uint64_t)v73;
      }
      else {
        uint64_t v76 = (uint64_t)v43 - 32 * (v75 & 0x7FFFFFF);
      }
      uint64_t v99 = v76;
      sub_1CC5E4108((uint64_t)v106, __p, &__p[4 * v50], v76);
      if (v50)
      {
        memmove((void *)(v99 + 32 * v71), &__p[4 * v50], 8 * v50);
        uint64_t v77 = 4 * v50;
        do
        {
          BOOL v78 = &__p[v77];
          if (__p[v77 - 4])
          {
            *(void *)*(v78 - 2) = *(v78 - 3);
            uint64_t v79 = *(v78 - 3);
            if (v79) {
              *(void *)(v79 + 16) = *(v78 - 2);
            }
          }
          v77 -= 4;
        }
        while (v77 * 8);
      }
      operator delete(__p);
      int v49 = *((_DWORD *)v42 + 7);
      uint64_t v4 = a4;
    }
    uint64_t v51 = (v49 + 1) & 0x7FFFFFF;
    *((_DWORD *)v42 + 7) = v49 & 0xF8000000 | (v49 + 1) & 0x7FFFFFF;
    uint64_t result = v102;
    if ((v49 & 0x40000000) != 0) {
      uint64_t v52 = (char *)*v42;
    }
    else {
      uint64_t v52 = (char *)v43 - 32 * v51;
    }
    uint64_t v53 = (v51 - 1);
    uint64_t v54 = &v52[32 * v53];
    if (*(void *)v54)
    {
      **((void **)v54 + 2) = *((void *)v54 + 1);
      uint64_t v68 = *((void *)v54 + 1);
      if (v68) {
        *(void *)(v68 + 16) = *((void *)v54 + 2);
      }
    }
    *(void *)uint64_t v54 = v14;
    uint64_t v57 = v14[1];
    uint64_t v56 = (char **)(v14 + 1);
    uint64_t v55 = v57;
    *((void *)v54 + 1) = v57;
    if (v57) {
      *(void *)(v55 + 16) = v54 + 8;
    }
    *(void *)&v52[32 * v53 + 16] = v56;
    llvm::ConstantPointerNull *v56 = v54;
    int v58 = *((_DWORD *)v42 + 7);
    uint64_t v59 = v58 & 0x7FFFFFF;
    if ((v58 & 0x40000000) != 0) {
      int v60 = (char *)*v42;
    }
    else {
      int v60 = (char *)v43 - 32 * v59;
    }
    *(void *)&v60[32 * *((unsigned int *)v42 + 17) + 8 * (v59 - 1)] = a3;
    int v61 = *((_DWORD *)v7 + 5);
    if ((v61 & 0x40000000) != 0) {
      char v62 = (uint64_t **)*(v7 - 1);
    }
    else {
      char v62 = &v7[-4 * (v61 & 0x7FFFFFF)];
    }
    uint64_t v63 = &v62[4 * v13];
    if (*v63)
    {
      *void v63[2] = (uint64_t)v63[1];
      uint64_t v69 = v63[1];
      if (v69) {
        _OWORD v69[2] = (uint64_t)v63[2];
      }
    }
    uint64_t *v63 = (uint64_t *)v43;
    uint64_t v64 = *v44;
    v63[1] = (uint64_t *)*v44;
    if (v64) {
      *(void *)(v64 + 16) = v63 + 1;
    }
    v62[4 * v13 + 2] = v44;
    uint64_t *v44 = (uint64_t)v63;
    uint64_t v65 = v7[4];
    if (v65) {
      BOOL v66 = v65 == v7[5] + 5;
    }
    else {
      BOOL v66 = 1;
    }
    if (v66) {
      uint64_t v67 = 0;
    }
    else {
      uint64_t v67 = v65 - 3;
    }
    if (*((unsigned char *)v67 + 16) == 83) {
      uint64_t v7 = (uint64_t **)v67;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  while (v7 != v4);
  return result;
}

uint64_t sub_1CD2DACC0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  if (a3 && v5 == 83)
  {
    if ((*(_DWORD *)(a3 + 20) & 0x7FFFFFE) != 0) {
      return 0;
    }
    uint64_t SinglePredecessor = *(llvm::BasicBlock **)(a3 + 40);
  }
  else
  {
    uint64_t SinglePredecessor = *(llvm::BasicBlock **)(a3 + 40);
    if (v5 == 84)
    {
      uint64_t v8 = *(void *)(a3 - 32);
      if (v8)
      {
        if (!*(unsigned char *)(v8 + 16)
          && *(void *)(v8 + 24) == *(void *)(a3 + 72)
          && (*(unsigned char *)(v8 + 33) & 0x20) != 0
          && *(_DWORD *)(v8 + 36) == 50
          || !*(unsigned char *)(v8 + 16)
          && *(void *)(v8 + 24) == *(void *)(a3 + 72)
          && (*(unsigned char *)(v8 + 33) & 0x20) != 0
          && *(_DWORD *)(v8 + 36) == 49)
        {
          uint64_t SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(SinglePredecessor);
        }
      }
    }
  }
  unint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = *(void **)a1;
    unint64_t v11 = *(unsigned int *)(a1 + 8);
    do
    {
      unint64_t v12 = v11 >> 1;
      uint64_t v13 = &v10[v11 >> 1];
      unint64_t v15 = *v13;
      int v14 = v13 + 1;
      v11 += ~(v11 >> 1);
      if (v15 < a2) {
        uint64_t v10 = v14;
      }
      else {
        unint64_t v11 = v12;
      }
    }
    while (v11);
    uint64_t v16 = *(void **)a1;
    do
    {
      unint64_t v17 = v9 >> 1;
      uint64_t v18 = &v16[v9 >> 1];
      unint64_t v20 = *v18;
      uint64_t v19 = v18 + 1;
      v9 += ~(v9 >> 1);
      if (v20 < (unint64_t)SinglePredecessor) {
        uint64_t v16 = v19;
      }
      else {
        unint64_t v9 = v17;
      }
    }
    while (v9);
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    uint64_t v16 = *(void **)a1;
  }
  return (*(void *)(*(void *)(*(void *)(a1 + 272) + 152 * (((uint64_t)v16 - *(void *)a1) >> 3) + 72)
                    + 8 * ((((unint64_t)v10 - *(void *)a1) >> 9) & 0x3FFFFFF)) >> (((unint64_t)v10
                                                                                           - *(void *)a1) >> 3)) & 1;
}

BOOL sub_1CD2DAE24(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 48) < 3;
}

void sub_1CD2DAE74(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 12);
  if (v8 >= v9)
  {
    if (v9 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    if (((2 * v9) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v17 = (2 * v9) | 1;
    }
    uint64_t v18 = (char *)malloc_type_malloc(40 * v17, 0x4065EBACuLL);
    if (!v18) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v19 = v18;
    uint64_t v20 = *a2;
    int v21 = &v18[40 * *(unsigned int *)(a1 + 8)];
    uint64_t v22 = *a3;
    *a3 = 0;
    int v23 = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = 0;
    char v24 = *a4;
    *(void *)int v21 = v20;
    uint64_t v25 = a3[1];
    a3[1] = 0;
    *((void *)v21 + 1) = v22;
    v36[0] = 0;
    *((void *)v21 + 2) = v25;
    v36[1] = 0;
    *((_DWORD *)v21 + 6) = v23;
    int v37 = 0;
    v21[32] = v24;
    sub_1CD8C5E20((uint64_t)v36);
    MEMORY[0x1D25D9CD0](0, 8);
    char v26 = *(char **)a1;
    unsigned int v27 = *(_DWORD *)(a1 + 8);
    if (v27)
    {
      uint64_t v28 = &v26[40 * v27];
      uint64_t v29 = v19;
      do
      {
        uint64_t v30 = *(void *)v26;
        *((void *)v29 + 1) = 0;
        *((void *)v29 + 2) = 0;
        *(void *)uint64_t v29 = v30;
        *((_DWORD *)v29 + 6) = 0;
        *((void *)v29 + 1) = *((void *)v26 + 1);
        *((void *)v26 + 1) = 0;
        *((_DWORD *)v29 + 4) = *((_DWORD *)v26 + 4);
        *((_DWORD *)v26 + 4) = 0;
        LODWORD(v30) = *((_DWORD *)v29 + 5);
        *((_DWORD *)v29 + 5) = *((_DWORD *)v26 + 5);
        *((_DWORD *)v26 + 5) = v30;
        LODWORD(v30) = *((_DWORD *)v29 + 6);
        *((_DWORD *)v29 + 6) = *((_DWORD *)v26 + 6);
        *((_DWORD *)v26 + 6) = v30;
        v29[32] = v26[32];
        v26 += 40;
        v29 += 40;
      }
      while (v26 != v28);
      char v26 = *(char **)a1;
      uint64_t v31 = *(unsigned int *)(a1 + 8);
      if (v31)
      {
        BOOL v32 = v26 - 32;
        uint64_t v33 = 40 * v31;
        do
        {
          sub_1CD8C5E20((uint64_t)&v32[v33]);
          MEMORY[0x1D25D9CD0](*(void *)&v32[v33], 8);
          v33 -= 40;
        }
        while (v33);
        char v26 = *(char **)a1;
      }
    }
    if (v26 != (char *)(a1 + 16)) {
      free(v26);
    }
    *(void *)a1 = v19;
    int v16 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 12) = v17;
  }
  else
  {
    uint64_t v10 = *a2;
    uint64_t v11 = *(void *)a1 + 40 * v8;
    uint64_t v12 = *a3;
    *a3 = 0;
    int v13 = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = 0;
    char v14 = *a4;
    *(void *)uint64_t v11 = v10;
    uint64_t v15 = a3[1];
    a3[1] = 0;
    *(void *)(v11 + 8) = v12;
    v34[0] = 0;
    *(void *)(v11 + 16) = v15;
    v34[1] = 0;
    *(_DWORD *)(v11 + 24) = v13;
    int v35 = 0;
    *(unsigned char *)(v11 + 32) = v14;
    sub_1CD8C5E20((uint64_t)v34);
    MEMORY[0x1D25D9CD0](0, 8);
    int v16 = *(_DWORD *)(a1 + 8) + 1;
  }
  *(_DWORD *)(a1 + 8) = v16;
}

uint64_t sub_1CD2DB0C4(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 84)
  {
    uint64_t v5 = 0;
  }
  else if (v4 == 39)
  {
    uint64_t v5 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v5 = 2;
  }
  uint64_t v6 = 0;
  int v7 = *(_DWORD *)(a2 + 20);
  uint64_t v8 = -(uint64_t)(v7 & 0x7FFFFFF);
  if (v7 < 0)
  {
    char v14 = (char *)(a2 - 32 * (v7 & 0x7FFFFFF));
    uint64_t v15 = *((void *)v14 - 1);
    if ((v15 & 0xFFFFFFFF0) != 0) {
      uint64_t v6 = (*((_DWORD *)v14 - 3) - *(_DWORD *)&v14[-v15]);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  unint64_t v9 = -32 * v5 - 32 * v6 - 32 * v8 - 32;
  if ((v9 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v9 >> 5);
    uint64_t v12 = a2;
    do
    {
      if (**(void **)(a1 + 328) == *(void *)(v12 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
        && (sub_1CBF5BC2C(a2, v10, 22) & 1) == 0)
      {
        *(void *)(a1 + 16) = *(void *)(a1 + 16) & 3 | a2 | 4;
      }
      ++v10;
      v12 += 32;
    }
    while (v11 != v10);
  }
  uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 360), *(const llvm::Value **)(a1 + 368), (const llvm::Instruction *)a2);
  if ((result & 1) == 0) {
    *(unsigned char *)(a1 + 520) = 1;
  }
  return result;
}

uint64_t sub_1CD2DB1FC(uint64_t a1, const llvm::Use **a2)
{
  uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 360), *(const llvm::Value **)(a1 + 368), (const llvm::Instruction *)a2);
  if (result) {
    return result;
  }
  uint64_t v5 = a2[1];
  if (!v5) {
    return result;
  }
  while (1)
  {
    uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 360), *(const llvm::Value **)(a1 + 368), v5);
    if (result) {
      break;
    }
    uint64_t v5 = (const llvm::Use *)*((void *)v5 + 1);
    if (!v5) {
      return result;
    }
  }
  if (!*(unsigned char *)(a1 + 336)) {
    goto LABEL_7;
  }
  char v14 = 0;
  uint64_t result = sub_1CD41F538(*(void *)(a1 + 384), *(_DWORD *)(a1 + 400), (uint64_t)a2, &v14);
  if (result) {
    BOOL v7 = v14 == (llvm::Instruction *)(*(void *)(a1 + 384) + 32 * *(unsigned int *)(a1 + 400));
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (!*((unsigned char *)v14 + 24)) {
      return result;
    }
    uint64_t v8 = *((unsigned int *)v14 + 4);
    if (v8 > 0x40)
    {
      uint64_t result = memcmp(*((const void **)v14 + 1), *(const void **)(a1 + 344), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
      if (!result) {
        return result;
      }
    }
    else if (*((void *)v14 + 1) == *(void *)(a1 + 344))
    {
      return result;
    }
LABEL_7:
    char v14 = (llvm::Instruction *)a2;
    uint64_t result = (uint64_t)sub_1CD8C5B24(a1 + 384, (uint64_t *)&v14);
    if (*(unsigned char *)(result + 24))
    {
      uint64_t v6 = result;
      if (*(_DWORD *)(result + 16) >= 0x41u)
      {
        uint64_t result = *(void *)(result + 8);
        if (result) {
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        }
      }
      *(unsigned char *)(v6 + 24) = 0;
    }
    return result;
  }
  unint64_t v9 = (const void **)(a1 + 344);
  char v14 = (llvm::Instruction *)a2;
  uint64_t result = (uint64_t)sub_1CD8C5B24(a1 + 384, (uint64_t *)&v14);
  uint64_t v10 = result;
  uint64_t v11 = (void **)(result + 8);
  if (*(unsigned char *)(result + 24))
  {
    if (*(_DWORD *)(result + 16) > 0x40u || *(_DWORD *)(a1 + 352) > 0x40u)
    {
      if (v11 != (void **)v9)
      {
        uint64_t result = llvm::APInt::reallocate(result + 8, *(_DWORD *)(a1 + 352));
        uint64_t v13 = *(unsigned int *)(v10 + 16);
        if (v13 <= 0x40) {
          _DWORD *v11 = (void *)*v9;
        }
        else {
          return (uint64_t)memcpy(*v11, *v9, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
    }
    else
    {
      *(void *)(result + 8) = *(void *)(a1 + 344);
      *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 352);
    }
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)(result + 16) = v12;
    if (v12 > 0x40) {
      operator new[]();
    }
    _DWORD *v11 = (void *)*v9;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

void sub_1CD2DB434(uint64_t a1, llvm::Instruction *a2)
{
  int v4 = *(_DWORD *)(*((void *)a2 - 4) + 36);
  if (v4 != 168)
  {
    if ((v4 - 167) >= 2)
    {
      sub_1CD2DB0C4(a1, (uint64_t)a2);
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 336)) {
    return;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 352);
  if (v5 > 0x40)
  {
    int v6 = 0;
    int64_t v7 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      if (v7-- < 1) {
        break;
      }
      unint64_t v9 = *(void *)(*(void *)(a1 + 344) + 8 * v7);
      v6 += __clz(v9);
    }
    while (!v9);
    int v10 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v10 = 0;
    }
    if (v6 + v10 != v5) {
      return;
    }
  }
  else if (*(void *)(a1 + 344))
  {
    return;
  }
  uint64_t v11 = *(void *)(a1 + 480);
  uint64_t v12 = *(unsigned int *)(a1 + 492);
  if (v11 != *(void *)(a1 + 472))
  {
    unsigned int v16 = *(_DWORD *)(a1 + 488);
    goto LABEL_27;
  }
  if (!v12)
  {
LABEL_24:
    unsigned int v16 = *(_DWORD *)(a1 + 488);
    if (v12 < v16)
    {
      *(_DWORD *)(a1 + 492) = v12 + 1;
      *(void *)(v11 + 8 * v12) = a2;
      return;
    }
LABEL_27:
    if (3 * v16 <= 4 * ((int)v12 - *(_DWORD *)(a1 + 496)))
    {
      if (v16 >= 0x40) {
        v16 *= 2;
      }
      else {
        unsigned int v16 = 128;
      }
    }
    else if (v16 - v12 >= v16 >> 3)
    {
      goto LABEL_29;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 472), v16);
    unsigned int v16 = *(_DWORD *)(a1 + 488);
    uint64_t v11 = *(void *)(a1 + 480);
LABEL_29:
    unsigned int v17 = v16 - 1;
    unsigned int v18 = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v19 = (llvm::Instruction **)(v11 + 8 * v18);
    uint64_t v20 = *v19;
    if (*v19 == (llvm::Instruction *)-1)
    {
      int v21 = 0;
LABEL_41:
      if (v21) {
        uint64_t v25 = v21;
      }
      else {
        uint64_t v25 = v19;
      }
      if (*v25 != a2)
      {
        if (*v25 == (llvm::Instruction *)-2) {
          --*(_DWORD *)(a1 + 496);
        }
        else {
          ++*(_DWORD *)(a1 + 492);
        }
        llvm::Type *v25 = a2;
      }
    }
    else
    {
      int v21 = 0;
      int v22 = 1;
      while (v20 != a2)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == (llvm::Instruction *)-2;
        }
        if (v23) {
          int v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = (llvm::Instruction **)(v11 + 8 * (v24 & v17));
        uint64_t v20 = *v19;
        if (*v19 == (llvm::Instruction *)-1) {
          goto LABEL_41;
        }
      }
    }
    return;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v12;
  uint64_t v15 = *(void **)(a1 + 480);
  while ((llvm::Instruction *)*v15 != a2)
  {
    if (*v15 == -2) {
      uint64_t v13 = v15;
    }
    ++v15;
    v14 -= 8;
    if (!v14)
    {
      if (!v13) {
        goto LABEL_24;
      }
      *uint64_t v13 = a2;
      --*(_DWORD *)(a1 + 496);
      return;
    }
  }
}

uint64_t sub_1CD2DB654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  if (v4 == *(void *)a2)
  {
    if (v5)
    {
      int v6 = 0;
      uint64_t v7 = 8 * v5;
      uint64_t v8 = *(void **)(a2 + 8);
      while (*v8 != a1)
      {
        if (*v8 == -2) {
          int v6 = v8;
        }
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          if (!v6) {
            goto LABEL_9;
          }
          void *v6 = a1;
          --*(_DWORD *)(a2 + 24);
          goto LABEL_33;
        }
      }
      return 0;
    }
LABEL_9:
    unsigned int v9 = *(_DWORD *)(a2 + 16);
    if (v5 < v9)
    {
      *(_DWORD *)(a2 + 20) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a1;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(a2 + 16);
  }
  if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(a2 + 24)))
  {
    if (v9 >= 0x40) {
      v9 *= 2;
    }
    else {
      unsigned int v9 = 128;
    }
    goto LABEL_85;
  }
  if (v9 - v5 < v9 >> 3)
  {
LABEL_85:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v9);
    unsigned int v9 = *(_DWORD *)(a2 + 16);
    uint64_t v4 = *(void *)(a2 + 8);
  }
  unsigned int v10 = v9 - 1;
  unsigned int v11 = (v9 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v12 = (void *)(v4 + 8 * v11);
  uint64_t v13 = *v12;
  if (*v12 != -1)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != a1)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -2;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
      uint64_t v13 = *v12;
      if (*v12 == -1) {
        goto LABEL_26;
      }
    }
    return 0;
  }
  uint64_t v14 = 0;
LABEL_26:
  if (v14) {
    unsigned int v18 = v14;
  }
  else {
    unsigned int v18 = v12;
  }
  if (*v18 == a1) {
    return 0;
  }
  if (*v18 == -2) {
    --*(_DWORD *)(a2 + 24);
  }
  else {
    ++*(_DWORD *)(a2 + 20);
  }
  void *v18 = a1;
LABEL_33:
  uint64_t v19 = *(void *)(a1 + 48);
  if (v19) {
    uint64_t v20 = v19 - 24;
  }
  else {
    uint64_t v20 = 0;
  }
  if (sub_1CD2DAE24(v20)) {
    return 1;
  }
  uint64_t v22 = *(void *)(a1 + 40);
  if (v22 == a1 + 40) {
    return 0;
  }
  if (v22) {
    uint64_t v23 = v22 - 24;
  }
  else {
    uint64_t v23 = 0;
  }
  int v24 = *(unsigned __int8 *)(v23 + 16);
  int v25 = v24 - 29;
  if (v24 == 30)
  {
    if ((*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v40 = 2;
    }
    else {
      unsigned int v40 = 1;
    }
  }
  else
  {
    unsigned int v40 = 2;
    uint64_t result = 0;
    switch(v25)
    {
      case 0:
      case 5:
      case 6:
        return result;
      case 1:
LABEL_86:
        __break(1u);
        goto LABEL_87;
      case 2:
        unsigned int v40 = (*(_DWORD *)(v23 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
      case 9:
LABEL_87:
        unsigned int v40 = (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) - 1;
        break;
      case 4:
        goto LABEL_47;
      case 7:
        unsigned int v40 = *(_WORD *)(v23 + 18) & 1;
        break;
      case 8:
        unsigned int v40 = 1;
        goto LABEL_47;
      case 10:
        unsigned int v40 = *(_DWORD *)(v23 + 80) + 1;
        break;
      default:
        return 0;
    }
    if (!v40) {
      return 0;
    }
  }
LABEL_47:
  int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = v40 - 1;
  uint64_t v29 = v23 - 64;
  do
  {
    int v30 = *(unsigned __int8 *)(v23 + 16);
    if (v30 == 30)
    {
      uint64_t v33 = (uint64_t *)(v23 - 32 - 32 * v27);
    }
    else
    {
      uint64_t v32 = (v30 - 31);
      uint64_t v33 = (uint64_t *)(v23 - 32);
      switch(v32)
      {
        case 1:
        case 7:
          int v37 = *(_DWORD *)(v23 + 20);
          if ((v37 & 0x40000000) != 0) {
            uint64_t v38 = *(void *)(v23 - 8);
          }
          else {
            uint64_t v38 = v23 - 32 * (v37 & 0x7FFFFFF);
          }
          uint64_t v36 = v38 + 32 * v27;
          goto LABEL_60;
        case 2:
          uint64_t v39 = -64;
          if (!v27) {
            uint64_t v39 = -96;
          }
          uint64_t v33 = (uint64_t *)(v23 + v39);
          break;
        case 3:
        case 4:
          goto LABEL_86;
        case 5:
          if ((*(_WORD *)(v23 + 18) & 1) == 0)
          {
            uint64_t v31 = 0;
            goto LABEL_52;
          }
          uint64_t v33 = (uint64_t *)(v23 + 32 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
          break;
        case 6:
          break;
        case 8:
          if (v27) {
            uint64_t v33 = (uint64_t *)(v29 - 32 * *(unsigned int *)(v23 + 80));
          }
          else {
            uint64_t v33 = (uint64_t *)(v23 - 64 - 32 * *(unsigned int *)(v23 + 80));
          }
          break;
        default:
          int v34 = *(_DWORD *)(v23 + 20);
          if ((v34 & 0x40000000) != 0) {
            uint64_t v35 = *(void *)(v23 - 8);
          }
          else {
            uint64_t v35 = v23 - 32 * (v34 & 0x7FFFFFF);
          }
          uint64_t v36 = v35 + 32 * (v26 & 0xFFFFFFFE);
LABEL_60:
          uint64_t v33 = (uint64_t *)(v36 + 32);
          break;
      }
    }
    uint64_t v31 = *v33;
LABEL_52:
    uint64_t result = sub_1CD2DB654(v31, a2);
    if (result) {
      break;
    }
    v26 += 2;
    v29 += 32;
    BOOL v16 = v28 == v27++;
  }
  while (!v16);
  return result;
}

BOOL sub_1CD2DBA34(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 23;
}

BOOL sub_1CD2DBA80(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 24;
}

uint64_t sub_1CD2DBACC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = result + 16;
  *(void *)(result + 8) = 0x800000000;
  uint64_t v2 = *(unsigned int *)(a2 + 144);
  if (v2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = *(void **)(a2 + 136);
    uint64_t v5 = 40 * v2;
    do
    {
      if (v3 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)result + 8 * v3) = *v4;
      unsigned int v3 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v3;
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  else
  {
    unsigned int v3 = 0;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 480);
  if (v6)
  {
    uint64_t v7 = *(void **)(a2 + 472);
    uint64_t v8 = 40 * v6;
    do
    {
      if (v3 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)result + 8 * v3) = *v7;
      unsigned int v3 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v3;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1CD2DBBEC(uint64_t result, const llvm::Instruction **a2, llvm::DominatorTree **a3, uint64_t a4, char a5)
{
  unsigned int v11 = (const llvm::Instruction **)result;
  while (2)
  {
    uint64_t v80 = a2 - 1;
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = llvm::DominatorTree::dominates(*a3, *(a2 - 1), *v11);
                if (result)
                {
                  unsigned int v40 = *v11;
                  _DWORD *v11 = *(a2 - 1);
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                uint64_t result = sub_1CD2DC44C(v11, v11 + 1, v80, a3);
                break;
              case 4:
                uint64_t result = sub_1CD2DC6F8(v11, v11 + 1, v11 + 2, v80, a3);
                break;
              case 5:
                uint64_t result = sub_1CD2DC370(v11, v11 + 1, v11 + 2, v11 + 3, v80, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            int v41 = v11 + 1;
            BOOL v43 = v11 == a2 || v41 == a2;
            if (a5)
            {
              if (!v43)
              {
                uint64_t v44 = 0;
                uint64_t v45 = v11;
                do
                {
                  uint64_t v47 = *v45;
                  uint64_t v46 = v45[1];
                  uint64_t v45 = v41;
                  uint64_t result = llvm::DominatorTree::dominates(*a3, v46, v47);
                  if (result)
                  {
                    __int16 v48 = *v45;
                    uint64_t v49 = v44;
                    while (1)
                    {
                      *(const llvm::Instruction **)((char *)v11 + v49 + 8) = *(const llvm::Instruction **)((char *)v11 + v49);
                      if (!v49) {
                        break;
                      }
                      uint64_t result = llvm::DominatorTree::dominates(*a3, v48, *(const llvm::Instruction **)((char *)v11 + v49 - 8));
                      v49 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v50 = (const llvm::Instruction **)((char *)v11 + v49 + 8);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v50 = v11;
LABEL_79:
                    *uint64_t v50 = v48;
                  }
                  int v41 = v45 + 1;
                  v44 += 8;
                }
                while (v45 + 1 != a2);
              }
            }
            else if (!v43)
            {
              do
              {
                uint64_t v74 = *v11;
                uint64_t v73 = v11[1];
                unsigned int v11 = v41;
                uint64_t result = llvm::DominatorTree::dominates(*a3, v73, v74);
                if (result)
                {
                  int v75 = *v11;
                  uint64_t v76 = v11;
                  do
                  {
                    uint64_t v77 = v76;
                    BOOL v78 = *--v76;
                    *uint64_t v77 = v78;
                    uint64_t result = llvm::DominatorTree::dominates(*a3, v75, *(v77 - 2));
                  }
                  while ((result & 1) != 0);
                  *uint64_t v76 = v75;
                }
                int v41 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v51 = (unint64_t)(v14 - 2) >> 1;
              uint64_t v79 = a2;
              int64_t v81 = v51;
              do
              {
                int64_t v52 = v51;
                if (v81 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v11[v53];
                  if (2 * v51 + 2 < v14 && llvm::DominatorTree::dominates(*a3, *v54, v54[1]))
                  {
                    ++v54;
                    uint64_t v53 = 2 * v52 + 2;
                  }
                  uint64_t v55 = &v11[v52];
                  uint64_t result = llvm::DominatorTree::dominates(*a3, *v54, *v55);
                  if ((result & 1) == 0)
                  {
                    uint64_t v56 = *v55;
                    do
                    {
                      uint64_t v57 = v54;
                      *uint64_t v55 = *v54;
                      if (v81 < v53) {
                        break;
                      }
                      uint64_t v58 = (2 * v53) | 1;
                      uint64_t v54 = &v11[v58];
                      uint64_t v59 = 2 * v53 + 2;
                      if (v59 < v14 && llvm::DominatorTree::dominates(*a3, *v54, v54[1]))
                      {
                        ++v54;
                        uint64_t v58 = v59;
                      }
                      uint64_t result = llvm::DominatorTree::dominates(*a3, *v54, v56);
                      uint64_t v55 = v57;
                      uint64_t v53 = v58;
                    }
                    while (!result);
                    *uint64_t v57 = v56;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              int v60 = v79;
              do
              {
                int v61 = v60;
                uint64_t v62 = 0;
                uint64_t v82 = *v11;
                uint64_t v63 = v11;
                do
                {
                  uint64_t v64 = &v63[v62 + 1];
                  uint64_t v65 = (2 * v62) | 1;
                  uint64_t v66 = 2 * v62 + 2;
                  if (v66 < v14)
                  {
                    uint64_t result = llvm::DominatorTree::dominates(*a3, *v64, v63[v62 + 2]);
                    if (result)
                    {
                      ++v64;
                      uint64_t v65 = v66;
                    }
                  }
                  uint64_t *v63 = *v64;
                  uint64_t v63 = v64;
                  uint64_t v62 = v65;
                }
                while (v65 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                int v60 = v61 - 1;
                if (v64 == v61 - 1)
                {
                  *uint64_t v64 = v82;
                }
                else
                {
                  *uint64_t v64 = *v60;
                  *int v60 = v82;
                  uint64_t v67 = (char *)v64 - (char *)v11 + 8;
                  if (v67 >= 9)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 3) - 2) >> 1;
                    uint64_t v69 = &v11[v68];
                    uint64_t result = llvm::DominatorTree::dominates(*a3, *v69, *v64);
                    if (result)
                    {
                      unsigned int v70 = *v64;
                      do
                      {
                        uint64_t v71 = v69;
                        *uint64_t v64 = *v69;
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        uint64_t v69 = &v11[v68];
                        uint64_t result = llvm::DominatorTree::dominates(*a3, *v69, v70);
                        uint64_t v64 = v71;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v71 = v70;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          BOOL v16 = &v11[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CD2DC44C(v16, v11, v80, a3);
          }
          else
          {
            sub_1CD2DC44C(v11, v16, v80, a3);
            sub_1CD2DC44C(v11 + 1, v16 - 1, a2 - 2, a3);
            sub_1CD2DC44C(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            sub_1CD2DC44C(v16 - 1, v16, &v11[v15 + 1], a3);
            unsigned int v17 = *v11;
            _DWORD *v11 = *v16;
            void *v16 = v17;
          }
          --a4;
          if (a5 & 1) != 0 || (llvm::DominatorTree::dominates(*a3, *(v11 - 1), *v11)) {
            break;
          }
          uint64_t v31 = *v11;
          uint64_t result = llvm::DominatorTree::dominates(*a3, *v11, *v80);
          if (result)
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v32 = v12[1];
              ++v12;
              uint64_t result = llvm::DominatorTree::dominates(*a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v33 = v11 + 1;
            do
            {
              uint64_t v12 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
              uint64_t result = llvm::DominatorTree::dominates(*a3, v31, *v12);
            }
            while (!result);
          }
          int v34 = a2;
          if (v12 < a2)
          {
            int v34 = a2;
            do
            {
              uint64_t v35 = *--v34;
              uint64_t result = llvm::DominatorTree::dominates(*a3, v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v34)
          {
            uint64_t v36 = *v12;
            *uint64_t v12 = *v34;
            *int v34 = v36;
            do
            {
              int v37 = v12[1];
              ++v12;
            }
            while (!llvm::DominatorTree::dominates(*a3, v31, v37));
            do
            {
              uint64_t v38 = *--v34;
              uint64_t result = llvm::DominatorTree::dominates(*a3, v31, v38);
            }
            while ((result & 1) != 0);
          }
          uint64_t v39 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            _DWORD *v11 = *v39;
          }
          a5 = 0;
          *uint64_t v39 = v31;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *v11;
        do
          char v20 = llvm::DominatorTree::dominates(*a3, v11[++v18], v19);
        while ((v20 & 1) != 0);
        int v21 = &v11[v18];
        uint64_t v22 = a2;
        if (v18 == 1)
        {
          uint64_t v22 = a2;
          do
          {
            if (v21 >= v22) {
              break;
            }
            int v24 = *--v22;
          }
          while ((llvm::DominatorTree::dominates(*a3, v24, v19) & 1) == 0);
        }
        else
        {
          do
            uint64_t v23 = *--v22;
          while (!llvm::DominatorTree::dominates(*a3, v23, v19));
        }
        uint64_t v12 = &v11[v18];
        if (v21 < v22)
        {
          int v25 = v22;
          do
          {
            int v26 = *v12;
            *uint64_t v12 = *v25;
            llvm::Type *v25 = v26;
            do
            {
              uint64_t v27 = v12[1];
              ++v12;
            }
            while ((llvm::DominatorTree::dominates(*a3, v27, v19) & 1) != 0);
            do
              uint64_t v28 = *--v25;
            while (!llvm::DominatorTree::dominates(*a3, v28, v19));
          }
          while (v12 < v25);
        }
        uint64_t v29 = v12 - 1;
        if (v12 - 1 != v11) {
          _DWORD *v11 = *v29;
        }
        *uint64_t v29 = v19;
        if (v21 >= v22) {
          break;
        }
LABEL_31:
        uint64_t result = sub_1CD2DBBEC(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v30 = sub_1CD2DC530(v11, v12 - 1, a3);
      uint64_t result = sub_1CD2DC530(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v12 - 1;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CD2DC370(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, const llvm::Value **a5, llvm::DominatorTree **a6)
{
  sub_1CD2DC6F8(a1, a2, a3, a4, a6);
  uint64_t result = llvm::DominatorTree::dominates(*a6, *a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = llvm::DominatorTree::dominates(*a6, *a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = llvm::DominatorTree::dominates(*a6, *a3, *a2);
      if (result)
      {
        unint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = llvm::DominatorTree::dominates(*a6, *a2, *a1);
        if (result)
        {
          BOOL v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD2DC44C(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, llvm::DominatorTree **a4)
{
  char v8 = llvm::DominatorTree::dominates(*a4, *a2, *a1);
  uint64_t result = llvm::DominatorTree::dominates(*a4, *a3, *a2);
  if (v8)
  {
    unsigned int v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = llvm::DominatorTree::dominates(*a4, *a3, v10);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    unsigned int v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = llvm::DominatorTree::dominates(*a4, *a2, *a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_1CD2DC530(const llvm::Instruction **a1, const llvm::Instruction **a2, llvm::DominatorTree **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (llvm::DominatorTree::dominates(*a3, *(a2 - 1), *a1))
      {
        char v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1CD2DC44C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CD2DC6F8(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CD2DC370(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = a1 + 2;
      sub_1CD2DC44C(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (llvm::DominatorTree::dominates(*a3, *v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        unint64_t v15 = (const llvm::Instruction **)((char *)a1 + v14);
        *(const llvm::Instruction **)((char *)a1 + v14 + 24) = *(const llvm::Instruction **)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((llvm::DominatorTree::dominates(*a3, v13, v15[1]) & 1) == 0)
        {
          BOOL v16 = (const llvm::Instruction **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      BOOL v16 = a1;
LABEL_12:
      const llvm::Instruction *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CD2DC6F8(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, llvm::DominatorTree **a5)
{
  sub_1CD2DC44C(a1, a2, a3, a5);
  uint64_t result = llvm::DominatorTree::dominates(*a5, *a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = llvm::DominatorTree::dominates(*a5, *a3, *a2);
    if (result)
    {
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = llvm::DominatorTree::dominates(*a5, *a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1CD2DC7AC(uint64_t a1, llvm::Type *a2, __int16 a3, int a4, int a5)
{
  unsigned int v10 = *(llvm::DataLayout **)a1;
  unint64_t v11 = (unint64_t)(sub_1CB83544C(*(void *)a1, (uint64_t)a2) + 7) >> 3;
  BOOL v13 = v12 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v10, a2, 1);
  uint64_t v16 = ((1 << Alignment) + v11 - 1) & -(1 << Alignment);
  if (!v13)
  {
    if (v16) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!v16) {
    return 0;
  }
LABEL_3:
  unsigned __int8 v17 = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)a1, a2, 1);
  if (!a5)
  {
    if ((a3 & 0xFF00) != 0) {
      unsigned __int8 v19 = a3;
    }
    else {
      unsigned __int8 v19 = v17;
    }
    if (*(unsigned char *)(a1 + 27))
    {
      unsigned int v18 = *(unsigned __int8 *)(a1 + 26);
      goto LABEL_15;
    }
    uint64_t v22 = 0;
    if (!a4) {
      goto LABEL_26;
    }
LABEL_28:
    uint64_t v23 = ((1 << v19) + *(void *)(a1 + 16) - 1) & -(1 << v19);
    *(void *)(a1 + 16) = v23 + v16;
    goto LABEL_29;
  }
  if (!*(unsigned char *)(a1 + 27))
  {
    uint64_t v22 = 0;
    if ((a3 & 0xFF00) != 0) {
      unsigned __int8 v19 = a3;
    }
    else {
      unsigned __int8 v19 = v17;
    }
    if (!a4) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  unsigned int v18 = *(unsigned __int8 *)(a1 + 26);
  if (v18 < v17) {
    unsigned __int8 v17 = *(unsigned char *)(a1 + 26);
  }
  if ((a3 & 0xFF00) != 0) {
    unsigned __int8 v19 = a3;
  }
  else {
    unsigned __int8 v19 = v17;
  }
LABEL_15:
  uint64_t v20 = (((1 << v19) + (1 << v18) - 1) & -(1 << v19)) - (1 << v18);
  BOOL v21 = v18 >= v19;
  if (v18 >= v19)
  {
    uint64_t v22 = 0;
  }
  else
  {
    unsigned __int8 v19 = v18;
    uint64_t v22 = v20;
  }
  if (!v21) {
    v16 += v20;
  }
  if (a4) {
    goto LABEL_28;
  }
LABEL_26:
  uint64_t v23 = -1;
LABEL_29:
  unint64_t v24 = *(void *)(a1 + 32);
  *(void *)&long long v32 = v16;
  *((void *)&v32 + 1) = v23;
  long long v33 = (unint64_t)a2;
  LOBYTE(v34) = v19;
  BYTE1(v34) = v17;
  *((void *)&v34 + 1) = v22;
  unsigned int v25 = *(_DWORD *)(a1 + 40);
  if (v25 >= *(_DWORD *)(a1 + 44))
  {
    BOOL v31 = v24 + 48 * v25 > (unint64_t)&v32;
    if (v24 <= (unint64_t)&v32 && v31) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v26 = (_OWORD *)(v24 + 48 * *(unsigned int *)(a1 + 40));
  long long v27 = v32;
  long long v28 = v34;
  v26[1] = v33;
  v26[2] = v28;
  *int v26 = v27;
  uint64_t v29 = (*(_DWORD *)(a1 + 40) + 1);
  *(_DWORD *)(a1 + 40) = v29;
  return v29 - 1;
}

uint64_t sub_1CD2DC9EC(uint64_t a1, llvm::AllocaInst *this, int a3)
{
  uint64_t v6 = (llvm::ArrayType *)*((void *)this + 8);
  if (llvm::AllocaInst::isArrayAllocation(this))
  {
    uint64_t v7 = *((void *)this - 4);
    if (v7) {
      BOOL v8 = *(unsigned char *)(v7 + 16) == 16;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      llvm::report_fatal_error((llvm *)"Coroutines cannot handle non static allocas yet", (const llvm::Twine *)1);
    }
    unsigned int v9 = (llvm::Type **)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u) {
      unsigned int v9 = (llvm::Type **)*v9;
    }
    uint64_t v6 = llvm::ArrayType::get(v6, *v9);
  }
  __int16 v10 = *((_WORD *)this + 9) & 0x3F | 0x100;

  return sub_1CD2DC7AC(a1, v6, v10, a3, 0);
}

uint64_t sub_1CD2DCAA0(uint64_t result, llvm::Type ***a2, const llvm::DataLayout ****a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
  while (2)
  {
    uint64_t v149 = (uint64_t)a2;
    int64_t v151 = a2 - 5;
    uint64_t v140 = (uint64_t)(a2 - 15);
    uint64_t v141 = (uint64_t)(a2 - 10);
    unint64_t v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = v11;
          uint64_t v13 = (uint64_t)a2 - v11;
          unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
          if (!(!v6 & v5))
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                llvm::AllocaInst::getAllocationSizeInBits(*(a2 - 5), ***a3, (uint64_t)&v162);
                unint64_t v112 = v162;
                uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v12, ***a3, (uint64_t)&v162);
                if (v112 > (unint64_t)v162)
                {
                  *(void *)&long long v162 = *(void *)v12;
                  BOOL v133 = (llvm::Type **)v162;
                  int v134 = *(llvm::Type ***)(v12 + 8);
                  *(void *)(v12 + 8) = 0;
                  int v135 = *(_DWORD *)(v12 + 16);
                  int v136 = *(_DWORD *)(v12 + 20);
                  *(void *)(v12 + 16) = 0;
                  uint64_t v137 = a2;
                  int v138 = *(_DWORD *)(v12 + 24);
                  *(_DWORD *)(v12 + 24) = 0;
                  char v165 = *(unsigned char *)(v12 + 32);
                  char v139 = v165;
                  *(void *)uint64_t v12 = *(v137 - 5);
                  sub_1CD8C5F50(v12 + 8, (uint64_t)(v137 - 4));
                  *(unsigned char *)(v12 + 32) = *((unsigned char *)v137 - 8);
                  *(v137 - 5) = v133;
                  sub_1CD8C5E20((uint64_t)(v137 - 4));
                  MEMORY[0x1D25D9CD0](*(v137 - 4), 8);
                  *(v137 - 4) = v134;
                  *((void *)&v162 + 1) = 0;
                  *((_DWORD *)v137 - 6) = v135;
                  LODWORD(v163) = 0;
                  *((_DWORD *)v137 - 5) = v136;
                  HIDWORD(v163) = 0;
                  *((_DWORD *)v137 - 4) = v138;
                  int v164 = 0;
                  *((unsigned char *)v137 - 8) = v139;
                  sub_1CD8C5E20((uint64_t)&v162 + 8);
                  uint64_t result = MEMORY[0x1D25D9CD0](0, 8);
                }
                break;
              case 3uLL:
                uint64_t result = sub_1CD2DE398(v12, v12 + 40, (uint64_t)v151, a3);
                break;
              case 4uLL:
                uint64_t result = sub_1CD2DEBD4(v12, v12 + 40, v12 + 80, (uint64_t)v151, a3);
                break;
              case 5uLL:
                uint64_t result = sub_1CD2DDF90(v12, v12 + 40, v12 + 80, v12 + 120, (uint64_t)v151, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 959)
          {
            if (a5)
            {
              if ((llvm::Type ***)v12 != a2)
              {
                unsigned int v113 = (_OWORD *)(v12 + 40);
                if ((llvm::Type ***)(v12 + 40) != a2)
                {
                  uint64_t v114 = 0;
                  int v115 = (llvm::Type ***)v12;
                  do
                  {
                    uint64_t v116 = v113;
                    llvm::AllocaInst::getAllocationSizeInBits(v115[5], ***a3, (uint64_t)&v162);
                    unint64_t v117 = v162;
                    uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*v115, ***a3, (uint64_t)&v162);
                    if (v117 > (unint64_t)v162)
                    {
                      long long v162 = *v116;
                      uint64_t v163 = v115[7];
                      v115[6] = 0;
                      v115[7] = 0;
                      int v164 = *((_DWORD *)v115 + 16);
                      *((_DWORD *)v115 + 16) = 0;
                      uint64_t v118 = v114;
                      char v165 = *((unsigned char *)v115 + 72);
                      while (1)
                      {
                        uint64_t v119 = v12 + v118;
                        *(void *)(v12 + v118 + 40) = *(void *)(v12 + v118);
                        uint64_t v120 = v12 + v118 + 8;
                        sub_1CD8C5F50(v12 + v118 + 48, v120);
                        *(unsigned char *)(v12 + v118 + 72) = *(unsigned char *)(v12 + v118 + 32);
                        uint64_t v121 = v162;
                        if (!v118) {
                          break;
                        }
                        llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v162, ***a3, (uint64_t)&v157);
                        uint64_t v122 = v157;
                        llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)(v119 - 40), ***a3, (uint64_t)&v157);
                        v118 -= 40;
                        if (v122 <= v157)
                        {
                          uint64_t v123 = v12 + v118 + 40;
                          goto LABEL_118;
                        }
                      }
                      uint64_t v123 = v12;
LABEL_118:
                      *(void *)uint64_t v123 = v121;
                      sub_1CD8C5E20(v120);
                      MEMORY[0x1D25D9CD0](*(void *)(v119 + 8), 8);
                      *(_DWORD *)(v123 + 24) = 0;
                      *(void *)(v119 + 8) = 0;
                      *(void *)(v123 + 16) = 0;
                      *(void *)(v119 + 8) = *((void *)&v162 + 1);
                      *((void *)&v162 + 1) = 0;
                      *(void *)(v123 + 16) = v163;
                      uint64_t v163 = 0;
                      *(_DWORD *)(v123 + 24) = v164;
                      int v164 = 0;
                      *(unsigned char *)(v123 + 32) = v165;
                      sub_1CD8C5E20((uint64_t)&v162 + 8);
                      uint64_t result = MEMORY[0x1D25D9CD0](0, 8);
                      a2 = (llvm::Type ***)v149;
                    }
                    unsigned int v113 = (_OWORD *)((char *)v116 + 40);
                    v114 += 40;
                    int v115 = (llvm::Type ***)v116;
                  }
                  while ((llvm::Type ***)((char *)v116 + 40) != a2);
                }
              }
            }
            else if ((llvm::Type ***)v12 != a2)
            {
              uint64_t v124 = (long long *)(v12 + 40);
              if ((llvm::Type ***)(v12 + 40) != a2)
              {
                uint64_t v125 = (unsigned char *)(v12 + 72);
                do
                {
                  uint64_t v126 = v124;
                  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)(v12 + 40), ***a3, (uint64_t)&v162);
                  unint64_t v127 = v162;
                  uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v12, ***a3, (uint64_t)&v162);
                  if (v127 > (unint64_t)v162)
                  {
                    long long v162 = *v126;
                    int v155 = *(void *)(v12 + 56);
                    uint64_t v163 = *(llvm::Type ***)(v12 + 56);
                    *(void *)(v12 + 48) = 0;
                    *(void *)(v12 + 56) = 0;
                    int v164 = *(_DWORD *)(v12 + 64);
                    *(_DWORD *)(v12 + 64) = 0;
                    __int16 v128 = v125;
                    char v165 = *(unsigned char *)(v12 + 72);
                    do
                    {
                      uint64_t v129 = v128;
                      *((void *)v128 - 4) = *((void *)v128 - 9);
                      sub_1CD8C5F50((uint64_t)(v128 - 24), (uint64_t)(v128 - 64));
                      char v130 = *(v128 - 40);
                      v128 -= 40;
                      *uint64_t v129 = v130;
                      uint64_t v131 = v162;
                      llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v162, ***a3, (uint64_t)&v157);
                      unsigned int v132 = v157;
                      llvm::AllocaInst::getAllocationSizeInBits(*((llvm::Type ***)v129 - 14), ***a3, (uint64_t)&v157);
                    }
                    while (v132 > v157);
                    *((void *)v128 - 4) = v131;
                    sub_1CD8C5E20((uint64_t)(v128 - 24));
                    MEMORY[0x1D25D9CD0](*((void *)v128 - 3), 8);
                    *((void *)v128 - 3) = 0;
                    *((void *)v128 - 2) = 0;
                    *((_DWORD *)v128 - 2) = 0;
                    *((void *)v128 - 3) = *((void *)&v162 + 1);
                    *((void *)&v162 + 1) = 0;
                    *((_DWORD *)v128 - 4) = v155;
                    *((_DWORD *)v128 - 3) = HIDWORD(v163);
                    uint64_t v163 = 0;
                    *((_DWORD *)v128 - 2) = v164;
                    int v164 = 0;
                    *__int16 v128 = v165;
                    sub_1CD8C5E20((uint64_t)&v162 + 8);
                    uint64_t result = MEMORY[0x1D25D9CD0](0, 8);
                    a2 = (llvm::Type ***)v149;
                  }
                  uint64_t v124 = (long long *)((char *)v126 + 40);
                  v125 += 40;
                  uint64_t v12 = (uint64_t)v126;
                }
                while ((llvm::Type ***)((char *)v126 + 40) != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if ((llvm::Type ***)v12 != a2)
            {
              int64_t v70 = (v14 - 2) >> 1;
              int64_t v71 = v70;
              do
              {
                int64_t v72 = v71;
                if (v70 >= v71)
                {
                  uint64_t v73 = (2 * v71) | 1;
                  uint64_t v74 = (llvm::Type ***)(v12 + 40 * v73);
                  if (2 * v71 + 2 < (uint64_t)v14)
                  {
                    llvm::AllocaInst::getAllocationSizeInBits(*v74, ***a3, (uint64_t)&v162);
                    unint64_t v75 = v162;
                    llvm::AllocaInst::getAllocationSizeInBits(v74[5], ***a3, (uint64_t)&v162);
                    if (v75 > (unint64_t)v162)
                    {
                      v74 += 5;
                      uint64_t v73 = 2 * v72 + 2;
                    }
                  }
                  uint64_t v76 = v12 + 40 * v72;
                  llvm::AllocaInst::getAllocationSizeInBits(*v74, ***a3, (uint64_t)&v162);
                  unint64_t v77 = v162;
                  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v76, ***a3, (uint64_t)&v162);
                  if (v77 <= (unint64_t)v162)
                  {
                    int64_t v153 = v70;
                    uint64_t v154 = v14;
                    *(void *)&long long v162 = *(void *)v76;
                    uint64_t v78 = v12 + 40 * v72;
                    *((void *)&v162 + 1) = *(void *)(v78 + 8);
                    *(void *)(v78 + 8) = 0;
                    int v146 = *(_DWORD *)(v78 + 16);
                    LODWORD(v163) = v146;
                    *(_DWORD *)(v78 + 16) = 0;
                    HIDWORD(v163) = *(_DWORD *)(v78 + 20);
                    *(_DWORD *)(v78 + 20) = 0;
                    int v164 = *(_DWORD *)(v78 + 24);
                    *(_DWORD *)(v78 + 24) = 0;
                    char v165 = *(unsigned char *)(v78 + 32);
                    while (1)
                    {
                      uint64_t v79 = v74;
                      int64_t v81 = *v74;
                      uint64_t v80 = (uint64_t)(v74 + 1);
                      *(void *)uint64_t v76 = v81;
                      sub_1CD8C5F50(v76 + 8, v80);
                      *(unsigned char *)(v76 + 32) = *((unsigned char *)v79 + 32);
                      if (v70 < v73) {
                        break;
                      }
                      uint64_t v152 = v80;
                      uint64_t v82 = (2 * v73) | 1;
                      uint64_t v74 = (llvm::Type ***)(v12 + 40 * v82);
                      if (2 * v73 + 2 < v154)
                      {
                        llvm::AllocaInst::getAllocationSizeInBits(*v74, ***a3, (uint64_t)&v157);
                        uint64_t v83 = v157;
                        llvm::AllocaInst::getAllocationSizeInBits(v74[5], ***a3, (uint64_t)&v157);
                        if (v83 > v157)
                        {
                          v74 += 5;
                          uint64_t v82 = 2 * v73 + 2;
                        }
                      }
                      llvm::AllocaInst::getAllocationSizeInBits(*v74, ***a3, (uint64_t)&v157);
                      uint64_t v84 = v157;
                      uint64_t v85 = (llvm::Type **)v162;
                      llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v162, ***a3, (uint64_t)&v157);
                      uint64_t v76 = (uint64_t)v79;
                      uint64_t v73 = v82;
                      int64_t v70 = v153;
                      if (v84 > v157)
                      {
                        uint64_t v80 = v152;
                        goto LABEL_70;
                      }
                    }
                    uint64_t v85 = (llvm::Type **)v162;
LABEL_70:
                    char *v79 = v85;
                    sub_1CD8C5E20(v80);
                    MEMORY[0x1D25D9CD0](v79[1], 8);
                    *(void *)uint64_t v80 = 0;
                    *(void *)(v80 + 8) = 0;
                    *(_DWORD *)(v80 + 16) = 0;
                    v79[1] = (llvm::Type **)*((void *)&v162 + 1);
                    *((_DWORD *)v79 + 4) = v146;
                    *((_DWORD *)v79 + 5) = HIDWORD(v163);
                    *((void *)&v162 + 1) = 0;
                    uint64_t v163 = 0;
                    *((_DWORD *)v79 + 6) = v164;
                    int v164 = 0;
                    *((unsigned char *)v79 + 32) = v165;
                    sub_1CD8C5E20((uint64_t)&v162 + 8);
                    MEMORY[0x1D25D9CD0](0, 8);
                    unint64_t v14 = v154;
                  }
                }
                int64_t v71 = v72 - 1;
              }
              while (v72);
              uint64_t v86 = v149;
              do
              {
                uint64_t v150 = v86;
                uint64_t v87 = 0;
                int v88 = *(llvm::Type ***)v12;
                int v160 = 0;
                uint64_t v158 = 0;
                uint64_t v159 = 0;
                uint64_t v89 = *(void *)(v12 + 8);
                int v157 = (llvm::AllocaInst *)v88;
                uint64_t v158 = v89;
                *(void *)(v12 + 8) = 0;
                LODWORD(v89) = *(_DWORD *)(v12 + 20);
                LODWORD(v159) = *(_DWORD *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = 0;
                LODWORD(v88) = HIDWORD(v159);
                HIDWORD(v159) = v89;
                *(_DWORD *)(v12 + 20) = v88;
                LODWORD(v88) = v160;
                int v160 = *(_DWORD *)(v12 + 24);
                *(_DWORD *)(v12 + 24) = v88;
                char v161 = *(unsigned char *)(v12 + 32);
                int64_t v90 = (v14 - 2) >> 1;
                uint64_t v91 = v12;
                unint64_t v92 = v14;
                do
                {
                  uint64_t v93 = v91 + 40 * v87 + 40;
                  uint64_t v94 = (2 * v87) | 1;
                  uint64_t v95 = 2 * v87 + 2;
                  if (v95 < (uint64_t)v14)
                  {
                    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v93, ***a3, (uint64_t)&v162);
                    unint64_t v96 = v162;
                    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)(v93 + 40), ***a3, (uint64_t)&v162);
                    if (v96 > (unint64_t)v162) {
                      v93 += 40;
                    }
                    unint64_t v14 = v92;
                    if (v96 > (unint64_t)v162) {
                      uint64_t v94 = v95;
                    }
                  }
                  *(void *)uint64_t v91 = *(void *)v93;
                  sub_1CD8C5F50(v91 + 8, v93 + 8);
                  *(unsigned char *)(v91 + 32) = *(unsigned char *)(v93 + 32);
                  uint64_t v91 = v93;
                  uint64_t v87 = v94;
                }
                while (v94 <= v90);
                uint64_t v97 = v150 - 40;
                if (v93 == v150 - 40)
                {
                  *(void *)uint64_t v93 = v157;
                  sub_1CD8C5E20(v93 + 8);
                  MEMORY[0x1D25D9CD0](*(void *)(v93 + 8), 8);
                  uint64_t v98 = 0;
                  *(void *)(v93 + 8) = 0;
                  *(void *)(v93 + 16) = 0;
                  *(_DWORD *)(v93 + 24) = 0;
                  *(void *)(v93 + 8) = v158;
                  *(void *)(v93 + 16) = v159;
                  *(_DWORD *)(v93 + 24) = v160;
                  *(unsigned char *)(v93 + 32) = v161;
                  uint64_t v158 = 0;
                  uint64_t v159 = 0;
                  int v160 = 0;
                }
                else
                {
                  *(void *)uint64_t v93 = *(void *)(v150 - 40);
                  sub_1CD8C5F50(v93 + 8, v150 - 32);
                  *(unsigned char *)(v93 + 32) = *(unsigned char *)(v150 - 8);
                  *(void *)(v150 - 40) = v157;
                  sub_1CD8C5E20(v150 - 32);
                  MEMORY[0x1D25D9CD0](*(void *)(v150 - 32), 8);
                  uint64_t v98 = 0;
                  *(void *)(v150 - 32) = 0;
                  *(void *)(v150 - 24) = 0;
                  *(_DWORD *)(v150 - 16) = 0;
                  *(void *)(v150 - 32) = v158;
                  uint64_t v158 = 0;
                  *(_DWORD *)(v150 - 24) = v159;
                  LODWORD(v159) = 0;
                  int v99 = *(_DWORD *)(v150 - 20);
                  *(_DWORD *)(v150 - 20) = HIDWORD(v159);
                  HIDWORD(v159) = v99;
                  int v100 = *(_DWORD *)(v150 - 16);
                  *(_DWORD *)(v150 - 16) = v160;
                  int v160 = v100;
                  *(unsigned char *)(v150 - 8) = v161;
                  uint64_t v101 = v93 - v12 + 40;
                  if (v101 >= 41)
                  {
                    unint64_t v102 = (v101 / 0x28uLL - 2) >> 1;
                    unint64_t v103 = v12 + 40 * v102;
                    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v103, ***a3, (uint64_t)&v162);
                    unint64_t v104 = v162;
                    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v93, ***a3, (uint64_t)&v162);
                    if (v104 > (unint64_t)v162)
                    {
                      __int16 v105 = *(llvm::Type ***)v93;
                      uint64_t v163 = 0;
                      int v164 = 0;
                      uint64_t v106 = *(void *)(v93 + 8);
                      long long v162 = (unint64_t)v105;
                      *((void *)&v162 + 1) = v106;
                      *(void *)(v93 + 8) = 0;
                      LODWORD(v163) = *(_DWORD *)(v93 + 16);
                      *(_DWORD *)(v93 + 16) = 0;
                      LODWORD(v105) = HIDWORD(v163);
                      HIDWORD(v163) = *(_DWORD *)(v93 + 20);
                      *(_DWORD *)(v93 + 20) = v105;
                      LODWORD(v105) = v164;
                      int v164 = *(_DWORD *)(v93 + 24);
                      *(_DWORD *)(v93 + 24) = v105;
                      char v165 = *(unsigned char *)(v93 + 32);
                      while (1)
                      {
                        uint64_t v107 = v103;
                        *(void *)uint64_t v93 = *(void *)v103;
                        uint64_t v108 = v103 + 8;
                        sub_1CD8C5F50(v93 + 8, v103 + 8);
                        *(unsigned char *)(v93 + 32) = *(unsigned char *)(v103 + 32);
                        if (!v102) {
                          break;
                        }
                        unint64_t v102 = (v102 - 1) >> 1;
                        unint64_t v103 = v12 + 40 * v102;
                        llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v103, ***a3, (uint64_t)v156);
                        unint64_t v109 = v156[0];
                        uint64_t v110 = v162;
                        llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v162, ***a3, (uint64_t)v156);
                        uint64_t v93 = v107;
                        BOOL v111 = v109 > v156[0];
                        unint64_t v14 = v92;
                        if (!v111) {
                          goto LABEL_89;
                        }
                      }
                      uint64_t v110 = v162;
LABEL_89:
                      *(void *)uint64_t v107 = v110;
                      sub_1CD8C5E20(v108);
                      MEMORY[0x1D25D9CD0](*(void *)(v107 + 8), 8);
                      *(void *)uint64_t v108 = 0;
                      *(void *)(v108 + 8) = 0;
                      *(_DWORD *)(v108 + 16) = 0;
                      *(void *)(v107 + 8) = *((void *)&v162 + 1);
                      *(void *)(v107 + 16) = v163;
                      *((void *)&v162 + 1) = 0;
                      uint64_t v163 = 0;
                      *(_DWORD *)(v107 + 24) = v164;
                      int v164 = 0;
                      *(unsigned char *)(v107 + 32) = v165;
                      sub_1CD8C5E20((uint64_t)&v162 + 8);
                      MEMORY[0x1D25D9CD0](0, 8);
                      uint64_t v98 = v158;
                      uint64_t v97 = v150 - 40;
                    }
                    else
                    {
                      uint64_t v98 = 0;
                    }
                  }
                }
                sub_1CD8C5E20((uint64_t)&v158);
                uint64_t result = MEMORY[0x1D25D9CD0](v98, 8);
                uint64_t v86 = v97;
                BOOL v111 = (uint64_t)v14-- <= 2;
              }
              while (!v111);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = (void *)(v12 + 40 * (v14 >> 1));
          if ((unint64_t)v13 >= 0x1401)
          {
            sub_1CD2DE398(v12, v12 + 40 * (v14 >> 1), (uint64_t)v151, a3);
            uint64_t v17 = 5 * v15;
            uint64_t v18 = v12 + 40 * v15;
            sub_1CD2DE398(v12 + 40, v18 - 40, v141, a3);
            sub_1CD2DE398(v12 + 80, v12 + 40 + 8 * v17, v140, a3);
            sub_1CD2DE398(v18 - 40, v12 + 40 * (v14 >> 1), v12 + 40 + 8 * v17, a3);
            *(void *)&long long v162 = *(void *)v12;
            uint64_t v19 = v162;
            uint64_t v144 = *(void *)(v12 + 8);
            *(void *)(v12 + 8) = 0;
            int v20 = *(_DWORD *)(v12 + 16);
            int v142 = *(_DWORD *)(v12 + 20);
            *(void *)(v12 + 16) = 0;
            int v21 = *(_DWORD *)(v12 + 24);
            *(_DWORD *)(v12 + 24) = 0;
            char v165 = *(unsigned char *)(v12 + 32);
            char v22 = v165;
            *(void *)uint64_t v12 = *v16;
            sub_1CD8C5F50(v12 + 8, v18 + 8);
            *(unsigned char *)(v12 + 32) = *(unsigned char *)(v18 + 32);
            void *v16 = v19;
            sub_1CD8C5E20(v18 + 8);
            MEMORY[0x1D25D9CD0](*(void *)(v18 + 8), 8);
            *(void *)(v18 + 8) = v144;
            *((void *)&v162 + 1) = 0;
            *(_DWORD *)(v18 + 16) = v20;
            LODWORD(v163) = 0;
            *(_DWORD *)(v18 + 20) = v142;
            HIDWORD(v163) = 0;
            *(_DWORD *)(v18 + 24) = v21;
            a2 = (llvm::Type ***)v149;
            int v164 = 0;
            *(unsigned char *)(v18 + 32) = v22;
            sub_1CD8C5E20((uint64_t)&v162 + 8);
            MEMORY[0x1D25D9CD0](0, 8);
          }
          else
          {
            sub_1CD2DE398(v12 + 40 * (v14 >> 1), v12, (uint64_t)v151, a3);
          }
          --a4;
          if (a5) {
            break;
          }
          llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)(v12 - 40), ***a3, (uint64_t)&v162);
          unint64_t v23 = v162;
          llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v12, ***a3, (uint64_t)&v162);
          if (v23 > (unint64_t)v162) {
            break;
          }
          __int16 v48 = *(llvm::AllocaInst **)v12;
          int v160 = 0;
          uint64_t v158 = 0;
          uint64_t v159 = 0;
          uint64_t v49 = *(void *)(v12 + 8);
          int v157 = v48;
          uint64_t v158 = v49;
          *(void *)(v12 + 8) = 0;
          int v50 = *(_DWORD *)(v12 + 20);
          LODWORD(v159) = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(v12 + 16) = 0;
          LODWORD(v49) = HIDWORD(v159);
          HIDWORD(v159) = v50;
          *(_DWORD *)(v12 + 20) = v49;
          LODWORD(v49) = v160;
          int v160 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v12 + 24) = v49;
          char v161 = *(unsigned char *)(v12 + 32);
          llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v48, ***a3, (uint64_t)&v162);
          unint64_t v51 = v162;
          llvm::AllocaInst::getAllocationSizeInBits(*v151, ***a3, (uint64_t)&v162);
          if (v51 > (unint64_t)v162)
          {
            unint64_t v11 = v12;
            do
            {
              llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v48, ***a3, (uint64_t)&v162);
              unint64_t v52 = v162;
              uint64_t v53 = *(llvm::Type ***)(v11 + 40);
              v11 += 40;
              llvm::AllocaInst::getAllocationSizeInBits(v53, ***a3, (uint64_t)&v162);
            }
            while (v52 <= (unint64_t)v162);
          }
          else
          {
            unint64_t v54 = v12 + 40;
            do
            {
              unint64_t v11 = v54;
              if (v54 >= (unint64_t)a2) {
                break;
              }
              llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v48, ***a3, (uint64_t)&v162);
              unint64_t v55 = v162;
              v54 += 40;
              llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v11, ***a3, (uint64_t)&v162);
            }
            while (v55 <= (unint64_t)v162);
          }
          unint64_t v56 = (unint64_t)a2;
          if (v11 < (unint64_t)a2)
          {
            unint64_t v56 = (unint64_t)a2;
            do
            {
              llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v48, ***a3, (uint64_t)&v162);
              unint64_t v57 = v162;
              uint64_t v58 = *(llvm::Type ***)(v56 - 40);
              v56 -= 40;
              llvm::AllocaInst::getAllocationSizeInBits(v58, ***a3, (uint64_t)&v162);
            }
            while (v57 > (unint64_t)v162);
          }
          while (v11 < v56)
          {
            *(void *)&long long v162 = *(void *)v11;
            uint64_t v59 = v162;
            uint64_t v60 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = 0;
            int v61 = *(_DWORD *)(v11 + 24);
            *(_DWORD *)(v11 + 24) = 0;
            char v165 = *(unsigned char *)(v11 + 32);
            char v62 = v165;
            *(void *)unint64_t v11 = *(void *)v56;
            uint64_t v63 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = 0;
            sub_1CD8C5F50(v11 + 8, v56 + 8);
            *(unsigned char *)(v11 + 32) = *(unsigned char *)(v56 + 32);
            *(void *)unint64_t v56 = v59;
            sub_1CD8C5E20(v56 + 8);
            MEMORY[0x1D25D9CD0](*(void *)(v56 + 8), 8);
            *(void *)(v56 + 8) = v60;
            *((void *)&v162 + 1) = 0;
            *(void *)(v56 + 16) = v63;
            uint64_t v163 = 0;
            *(_DWORD *)(v56 + 24) = v61;
            int v164 = 0;
            *(unsigned char *)(v56 + 32) = v62;
            sub_1CD8C5E20((uint64_t)&v162 + 8);
            MEMORY[0x1D25D9CD0](0, 8);
            __int16 v48 = v157;
            do
            {
              llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v157, ***a3, (uint64_t)&v162);
              unint64_t v64 = v162;
              uint64_t v65 = *(llvm::Type ***)(v11 + 40);
              v11 += 40;
              llvm::AllocaInst::getAllocationSizeInBits(v65, ***a3, (uint64_t)&v162);
            }
            while (v64 <= (unint64_t)v162);
            do
            {
              llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v157, ***a3, (uint64_t)&v162);
              unint64_t v66 = v162;
              uint64_t v67 = *(llvm::Type ***)(v56 - 40);
              v56 -= 40;
              llvm::AllocaInst::getAllocationSizeInBits(v67, ***a3, (uint64_t)&v162);
            }
            while (v66 > (unint64_t)v162);
          }
          if (v11 - 40 != v12)
          {
            *(void *)uint64_t v12 = *(void *)(v11 - 40);
            sub_1CD8C5F50(v12 + 8, v11 - 32);
            *(unsigned char *)(v12 + 32) = *(unsigned char *)(v11 - 8);
            __int16 v48 = v157;
          }
          *(void *)(v11 - 40) = v48;
          sub_1CD8C5E20(v11 - 32);
          MEMORY[0x1D25D9CD0](*(void *)(v11 - 32), 8);
          *(void *)(v11 - 32) = 0;
          *(void *)(v11 - 24) = 0;
          *(_DWORD *)(v11 - 16) = 0;
          *(void *)(v11 - 32) = v158;
          uint64_t v158 = 0;
          *(_DWORD *)(v11 - 24) = v159;
          LODWORD(v159) = 0;
          int v68 = *(_DWORD *)(v11 - 20);
          *(_DWORD *)(v11 - 20) = HIDWORD(v159);
          HIDWORD(v159) = v68;
          int v69 = *(_DWORD *)(v11 - 16);
          *(_DWORD *)(v11 - 16) = v160;
          int v160 = v69;
          *(unsigned char *)(v11 - 8) = v161;
          sub_1CD8C5E20((uint64_t)&v158);
          uint64_t result = MEMORY[0x1D25D9CD0](0, 8);
          a5 = 0;
          a2 = (llvm::Type ***)v149;
        }
        uint64_t v24 = 0;
        unsigned int v25 = *(llvm::AllocaInst **)v12;
        int v160 = 0;
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        uint64_t v26 = *(void *)(v12 + 8);
        int v157 = v25;
        uint64_t v158 = v26;
        *(void *)(v12 + 8) = 0;
        int v27 = *(_DWORD *)(v12 + 20);
        LODWORD(v159) = *(_DWORD *)(v12 + 16);
        *(_DWORD *)(v12 + 16) = 0;
        LODWORD(v26) = HIDWORD(v159);
        HIDWORD(v159) = v27;
        *(_DWORD *)(v12 + 20) = v26;
        LODWORD(v26) = v160;
        int v160 = *(_DWORD *)(v12 + 24);
        *(_DWORD *)(v12 + 24) = v26;
        char v161 = *(unsigned char *)(v12 + 32);
        do
        {
          llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)(v12 + v24 + 40), ***a3, (uint64_t)&v162);
          unint64_t v28 = v162;
          llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v25, ***a3, (uint64_t)&v162);
          v24 += 40;
        }
        while (v28 > (unint64_t)v162);
        unint64_t v29 = v12 + v24;
        BOOL v30 = a2;
        if (v24 == 40)
        {
          BOOL v30 = a2;
          do
          {
            if (v29 >= (unint64_t)v30) {
              break;
            }
            BOOL v31 = *(v30 - 5);
            v30 -= 5;
            llvm::AllocaInst::getAllocationSizeInBits(v31, ***a3, (uint64_t)&v162);
            unint64_t v32 = v162;
            llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v25, ***a3, (uint64_t)&v162);
          }
          while (v32 <= (unint64_t)v162);
        }
        else
        {
          do
          {
            long long v33 = *(v30 - 5);
            v30 -= 5;
            llvm::AllocaInst::getAllocationSizeInBits(v33, ***a3, (uint64_t)&v162);
            unint64_t v34 = v162;
            llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v25, ***a3, (uint64_t)&v162);
          }
          while (v34 <= (unint64_t)v162);
        }
        uint64_t v145 = a4;
        uint64_t v147 = v12;
        uint64_t v143 = v12 + 8;
        unint64_t v11 = v29;
        if (v29 < (unint64_t)v30)
        {
          unint64_t v35 = (unint64_t)v30;
          do
          {
            *(void *)&long long v162 = *(void *)v11;
            uint64_t v36 = v162;
            uint64_t v37 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = 0;
            int v38 = *(_DWORD *)(v11 + 24);
            *(_DWORD *)(v11 + 24) = 0;
            char v165 = *(unsigned char *)(v11 + 32);
            char v39 = v165;
            *(void *)unint64_t v11 = *(void *)v35;
            uint64_t v40 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = 0;
            sub_1CD8C5F50(v11 + 8, v35 + 8);
            *(unsigned char *)(v11 + 32) = *(unsigned char *)(v35 + 32);
            *(void *)unint64_t v35 = v36;
            sub_1CD8C5E20(v35 + 8);
            MEMORY[0x1D25D9CD0](*(void *)(v35 + 8), 8);
            *(void *)(v35 + 8) = v37;
            *((void *)&v162 + 1) = 0;
            *(void *)(v35 + 16) = v40;
            uint64_t v163 = 0;
            *(_DWORD *)(v35 + 24) = v38;
            int v164 = 0;
            *(unsigned char *)(v35 + 32) = v39;
            sub_1CD8C5E20((uint64_t)&v162 + 8);
            MEMORY[0x1D25D9CD0](0, 8);
            unsigned int v25 = v157;
            do
            {
              int v41 = *(llvm::Type ***)(v11 + 40);
              v11 += 40;
              llvm::AllocaInst::getAllocationSizeInBits(v41, ***a3, (uint64_t)&v162);
              unint64_t v42 = v162;
              llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v157, ***a3, (uint64_t)&v162);
            }
            while (v42 > (unint64_t)v162);
            do
            {
              BOOL v43 = *(llvm::Type ***)(v35 - 40);
              v35 -= 40;
              llvm::AllocaInst::getAllocationSizeInBits(v43, ***a3, (uint64_t)&v162);
              unint64_t v44 = v162;
              llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v157, ***a3, (uint64_t)&v162);
            }
            while (v44 <= (unint64_t)v162);
          }
          while (v11 < v35);
        }
        unint64_t v10 = v147;
        a2 = (llvm::Type ***)v149;
        if (v11 - 40 != v147)
        {
          *(void *)uint64_t v147 = *(void *)(v11 - 40);
          sub_1CD8C5F50(v143, v11 - 32);
          *(unsigned char *)(v147 + 32) = *(unsigned char *)(v11 - 8);
          unsigned int v25 = v157;
        }
        *(void *)(v11 - 40) = v25;
        sub_1CD8C5E20(v11 - 32);
        MEMORY[0x1D25D9CD0](*(void *)(v11 - 32), 8);
        *(void *)(v11 - 32) = 0;
        *(void *)(v11 - 24) = 0;
        *(_DWORD *)(v11 - 16) = 0;
        *(void *)(v11 - 32) = v158;
        uint64_t v158 = 0;
        *(_DWORD *)(v11 - 24) = v159;
        LODWORD(v159) = 0;
        int v45 = *(_DWORD *)(v11 - 20);
        *(_DWORD *)(v11 - 20) = HIDWORD(v159);
        HIDWORD(v159) = v45;
        int v46 = *(_DWORD *)(v11 - 16);
        *(_DWORD *)(v11 - 16) = v160;
        int v160 = v46;
        *(unsigned char *)(v11 - 8) = v161;
        sub_1CD8C5E20((uint64_t)&v158);
        MEMORY[0x1D25D9CD0](0, 8);
        a4 = v145;
        if (v29 >= (unint64_t)v30) {
          break;
        }
LABEL_32:
        uint64_t result = sub_1CD2DCAA0(v147, v11 - 40, a3, v145, a5 & 1);
        a5 = 0;
      }
      BOOL v47 = sub_1CD2DE824(v147, v11 - 40, a3);
      uint64_t result = sub_1CD2DE824(v11, v149, a3);
      if (result) {
        break;
      }
      if (!v47) {
        goto LABEL_32;
      }
    }
    a2 = (llvm::Type ***)(v11 - 40);
    if (!v47) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CD2DDF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::DataLayout ****a6)
{
  sub_1CD2DEBD4(a1, a2, a3, a4, a6);
  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a5, ***a6, (uint64_t)&v37);
  uint64_t v12 = v37;
  uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a4, ***a6, (uint64_t)&v37);
  if (v12 > v37)
  {
    uint64_t v34 = *(void *)(a4 + 8);
    uint64_t v37 = *(llvm::Type ***)a4;
    unint64_t v14 = v37;
    *(void *)(a4 + 8) = 0;
    int v35 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = 0;
    char v41 = *(unsigned char *)(a4 + 32);
    char v15 = v41;
    *(void *)a4 = *(void *)a5;
    uint64_t v16 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = 0;
    sub_1CD8C5F50(a4 + 8, a5 + 8);
    *(unsigned char *)(a4 + 32) = *(unsigned char *)(a5 + 32);
    *(void *)a5 = v14;
    sub_1CD8C5E20(a5 + 8);
    MEMORY[0x1D25D9CD0](*(void *)(a5 + 8), 8);
    *(void *)(a5 + 8) = v34;
    uint64_t v38 = 0;
    *(void *)(a5 + 16) = v16;
    uint64_t v39 = 0;
    *(_DWORD *)(a5 + 24) = v35;
    int v40 = 0;
    *(unsigned char *)(a5 + 32) = v15;
    sub_1CD8C5E20((uint64_t)&v38);
    MEMORY[0x1D25D9CD0](0, 8);
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a4, ***a6, (uint64_t)&v37);
    uint64_t v17 = v37;
    uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a3, ***a6, (uint64_t)&v37);
    if (v17 > v37)
    {
      uint64_t v37 = *(llvm::Type ***)a3;
      uint64_t v18 = v37;
      uint64_t v19 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      int v36 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = 0;
      char v41 = *(unsigned char *)(a3 + 32);
      char v20 = v41;
      *(void *)a3 = *(void *)a4;
      uint64_t v21 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      sub_1CD8C5F50(a3 + 8, a4 + 8);
      *(unsigned char *)(a3 + 32) = *(unsigned char *)(a4 + 32);
      *(void *)a4 = v18;
      sub_1CD8C5E20(a4 + 8);
      MEMORY[0x1D25D9CD0](*(void *)(a4 + 8), 8);
      *(void *)(a4 + 8) = v19;
      uint64_t v38 = 0;
      *(void *)(a4 + 16) = v21;
      uint64_t v39 = 0;
      *(_DWORD *)(a4 + 24) = v36;
      int v40 = 0;
      *(unsigned char *)(a4 + 32) = v20;
      sub_1CD8C5E20((uint64_t)&v38);
      MEMORY[0x1D25D9CD0](0, 8);
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a3, ***a6, (uint64_t)&v37);
      char v22 = v37;
      uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a6, (uint64_t)&v37);
      if (v22 > v37)
      {
        uint64_t v37 = *(llvm::Type ***)a2;
        unint64_t v23 = v37;
        uint64_t v24 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = 0;
        int v25 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = 0;
        char v41 = *(unsigned char *)(a2 + 32);
        char v26 = v41;
        *(void *)a2 = *(void *)a3;
        uint64_t v27 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = 0;
        sub_1CD8C5F50(a2 + 8, a3 + 8);
        *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 32);
        *(void *)a3 = v23;
        sub_1CD8C5E20(a3 + 8);
        MEMORY[0x1D25D9CD0](*(void *)(a3 + 8), 8);
        *(void *)(a3 + 8) = v24;
        uint64_t v38 = 0;
        *(void *)(a3 + 16) = v27;
        uint64_t v39 = 0;
        *(_DWORD *)(a3 + 24) = v25;
        int v40 = 0;
        *(unsigned char *)(a3 + 32) = v26;
        sub_1CD8C5E20((uint64_t)&v38);
        MEMORY[0x1D25D9CD0](0, 8);
        llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a6, (uint64_t)&v37);
        unint64_t v28 = v37;
        uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a1, ***a6, (uint64_t)&v37);
        if (v28 > v37)
        {
          uint64_t v37 = *(llvm::Type ***)a1;
          unint64_t v29 = v37;
          uint64_t v30 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          int v31 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = 0;
          char v41 = *(unsigned char *)(a1 + 32);
          char v32 = v41;
          *(void *)a1 = *(void *)a2;
          uint64_t v33 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = 0;
          sub_1CD8C5F50(a1 + 8, a2 + 8);
          *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
          *(void *)a2 = v29;
          sub_1CD8C5E20(a2 + 8);
          MEMORY[0x1D25D9CD0](*(void *)(a2 + 8), 8);
          *(void *)(a2 + 8) = v30;
          uint64_t v38 = 0;
          *(void *)(a2 + 16) = v33;
          uint64_t v39 = 0;
          *(_DWORD *)(a2 + 24) = v31;
          int v40 = 0;
          *(unsigned char *)(a2 + 32) = v32;
          sub_1CD8C5E20((uint64_t)&v38);
          return MEMORY[0x1D25D9CD0](0, 8);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD2DE398(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::DataLayout ****a4)
{
  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a4, (uint64_t)&v41);
  BOOL v8 = v41;
  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a1, ***a4, (uint64_t)&v41);
  unsigned int v9 = **a4;
  if (v8 > v41)
  {
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a3, *v9, (uint64_t)&v41);
    uint64_t v12 = v41;
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a4, (uint64_t)&v41);
    uint64_t v13 = a1 + 8;
    if (v12 > v41)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      char v41 = *(llvm::Type ***)a1;
      unint64_t v14 = v41;
      *(void *)(a1 + 8) = 0;
      int v16 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = 0;
      char v45 = *(unsigned char *)(a1 + 32);
      char v17 = v45;
      *(void *)a1 = *(void *)a3;
      uint64_t v18 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      sub_1CD8C5F50(v13, a3 + 8);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a3 + 32);
      *(void *)a3 = v14;
      sub_1CD8C5E20(a3 + 8);
      MEMORY[0x1D25D9CD0](*(void *)(a3 + 8), 8);
      *(void *)(a3 + 8) = v15;
      uint64_t v42 = 0;
      *(void *)(a3 + 16) = v18;
      uint64_t v43 = 0;
      *(_DWORD *)(a3 + 24) = v16;
      int v44 = 0;
      *(unsigned char *)(a3 + 32) = v17;
LABEL_6:
      sub_1CD8C5E20((uint64_t)&v42);
      return MEMORY[0x1D25D9CD0](0, 8);
    }
    uint64_t v31 = *(void *)(a1 + 8);
    char v41 = *(llvm::Type ***)a1;
    uint64_t v30 = v41;
    *(void *)(a1 + 8) = 0;
    int v32 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = 0;
    char v45 = *(unsigned char *)(a1 + 32);
    char v33 = v45;
    *(void *)a1 = *(void *)a2;
    uint64_t v34 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    sub_1CD8C5F50(v13, a2 + 8);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)a2 = v30;
    sub_1CD8C5E20(a2 + 8);
    MEMORY[0x1D25D9CD0](*(void *)(a2 + 8), 8);
    *(void *)(a2 + 8) = v31;
    uint64_t v42 = 0;
    *(void *)(a2 + 16) = v34;
    uint64_t v43 = 0;
    *(_DWORD *)(a2 + 24) = v32;
    int v44 = 0;
    *(unsigned char *)(a2 + 32) = v33;
    sub_1CD8C5E20((uint64_t)&v42);
    MEMORY[0x1D25D9CD0](0, 8);
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a3, ***a4, (uint64_t)&v41);
    int v35 = v41;
    uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a4, (uint64_t)&v41);
    if (v35 > v41)
    {
      uint64_t v37 = *(void *)(a2 + 8);
      char v41 = *(llvm::Type ***)a2;
      int v36 = v41;
      *(void *)(a2 + 8) = 0;
      int v38 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      char v45 = *(unsigned char *)(a2 + 32);
      char v39 = v45;
      *(void *)a2 = *(void *)a3;
      uint64_t v40 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      sub_1CD8C5F50(a2 + 8, a3 + 8);
      *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 32);
      *(void *)a3 = v36;
      sub_1CD8C5E20(a3 + 8);
      MEMORY[0x1D25D9CD0](*(void *)(a3 + 8), 8);
      *(void *)(a3 + 8) = v37;
      uint64_t v42 = 0;
      *(void *)(a3 + 16) = v40;
      uint64_t v43 = 0;
      *(_DWORD *)(a3 + 24) = v38;
      int v44 = 0;
      *(unsigned char *)(a3 + 32) = v39;
      goto LABEL_6;
    }
  }
  else
  {
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a3, *v9, (uint64_t)&v41);
    unint64_t v10 = v41;
    uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a4, (uint64_t)&v41);
    if (v10 > v41)
    {
      uint64_t v20 = *(void *)(a2 + 8);
      char v41 = *(llvm::Type ***)a2;
      uint64_t v19 = v41;
      *(void *)(a2 + 8) = 0;
      int v21 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      char v45 = *(unsigned char *)(a2 + 32);
      char v22 = v45;
      *(void *)a2 = *(void *)a3;
      uint64_t v23 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      sub_1CD8C5F50(a2 + 8, a3 + 8);
      *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 32);
      *(void *)a3 = v19;
      sub_1CD8C5E20(a3 + 8);
      MEMORY[0x1D25D9CD0](*(void *)(a3 + 8), 8);
      *(void *)(a3 + 8) = v20;
      uint64_t v42 = 0;
      *(void *)(a3 + 16) = v23;
      uint64_t v43 = 0;
      *(_DWORD *)(a3 + 24) = v21;
      int v44 = 0;
      *(unsigned char *)(a3 + 32) = v22;
      sub_1CD8C5E20((uint64_t)&v42);
      MEMORY[0x1D25D9CD0](0, 8);
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a4, (uint64_t)&v41);
      uint64_t v24 = v41;
      uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a1, ***a4, (uint64_t)&v41);
      if (v24 > v41)
      {
        char v41 = *(llvm::Type ***)a1;
        int v25 = v41;
        uint64_t v26 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        int v27 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = 0;
        char v45 = *(unsigned char *)(a1 + 32);
        char v28 = v45;
        *(void *)a1 = *(void *)a2;
        uint64_t v29 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        sub_1CD8C5F50(a1 + 8, a2 + 8);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)a2 = v25;
        sub_1CD8C5E20(a2 + 8);
        MEMORY[0x1D25D9CD0](*(void *)(a2 + 8), 8);
        *(void *)(a2 + 8) = v26;
        uint64_t v42 = 0;
        *(void *)(a2 + 16) = v29;
        uint64_t v43 = 0;
        *(_DWORD *)(a2 + 24) = v27;
        int v44 = 0;
        *(unsigned char *)(a2 + 32) = v28;
        goto LABEL_6;
      }
    }
  }
  return result;
}

BOOL sub_1CD2DE824(uint64_t a1, uint64_t a2, const llvm::DataLayout ****a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)(a2 - 40), ***a3, (uint64_t)v28);
      BOOL v8 = v28[0];
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a1, ***a3, (uint64_t)v28);
      if (v8 > v28[0])
      {
        v28[0] = *(llvm::AllocaInst **)a1;
        unsigned int v9 = v28[0];
        uint64_t v10 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        int v11 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = 0;
        char v31 = *(unsigned char *)(a1 + 32);
        char v12 = v31;
        *(void *)a1 = *(void *)(a2 - 40);
        uint64_t v13 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        sub_1CD8C5F50(a1 + 8, a2 - 32);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 - 8);
        *(void *)(a2 - 40) = v9;
        sub_1CD8C5E20(a2 - 32);
        MEMORY[0x1D25D9CD0](*(void *)(a2 - 32), 8);
        *(void *)(a2 - 32) = v10;
        v28[1] = 0;
        *(void *)(a2 - 24) = v13;
        uint64_t v29 = 0;
        *(_DWORD *)(a2 - 16) = v11;
        int v30 = 0;
        *(unsigned char *)(a2 - 8) = v12;
        sub_1CD8C5E20((uint64_t)&v28[1]);
        MEMORY[0x1D25D9CD0](0, 8);
      }
      return 1;
    case 3uLL:
      sub_1CD2DE398(a1, a1 + 40, a2 - 40, a3);
      return 1;
    case 4uLL:
      sub_1CD2DEBD4(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1CD2DDF90(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      unint64_t v14 = (llvm::Type ***)(a1 + 80);
      sub_1CD2DE398(a1, a1 + 40, a1 + 80, a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  do
  {
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)v15, ***a3, (uint64_t)v28);
    uint64_t v18 = v28[0];
    llvm::AllocaInst::getAllocationSizeInBits(*v14, ***a3, (uint64_t)v28);
    if (v18 > v28[0])
    {
      int v26 = v17;
      *(_OWORD *)char v28 = *(_OWORD *)v15;
      uint64_t v29 = *(void *)(v15 + 16);
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      int v30 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = 0;
      uint64_t v19 = v16;
      char v31 = *(unsigned char *)(v15 + 32);
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(void *)(a1 + v19 + 120) = *(void *)(a1 + v19 + 80);
        uint64_t v21 = a1 + v19 + 88;
        sub_1CD8C5F50(a1 + v19 + 128, v21);
        *(unsigned char *)(a1 + v19 + 152) = *(unsigned char *)(a1 + v19 + 112);
        char v22 = v28[0];
        if (v19 == -80) {
          break;
        }
        llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)v28[0], ***a3, (uint64_t)v27);
        unint64_t v23 = v27[0];
        llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)(v20 + 40), ***a3, (uint64_t)v27);
        v19 -= 40;
        if (v23 <= v27[0])
        {
          uint64_t v24 = a1 + v19 + 120;
          goto LABEL_14;
        }
      }
      uint64_t v24 = a1;
LABEL_14:
      *(void *)uint64_t v24 = v22;
      sub_1CD8C5E20(v21);
      MEMORY[0x1D25D9CD0](*(void *)(v20 + 88), 8);
      *(void *)(v24 + 16) = 0;
      *(llvm::AllocaInst **)(v20 + 88) = v28[1];
      v28[1] = 0;
      int v25 = HIDWORD(v29);
      *(_DWORD *)(v24 + 16) = v29;
      *(_DWORD *)(v24 + 20) = v25;
      uint64_t v29 = 0;
      *(_DWORD *)(v24 + 24) = v30;
      int v30 = 0;
      int v17 = v26 + 1;
      *(unsigned char *)(v24 + 32) = v31;
      sub_1CD8C5E20((uint64_t)&v28[1]);
      MEMORY[0x1D25D9CD0](0, 8);
      if (v26 == 7) {
        return v15 + 40 == a2;
      }
    }
    unint64_t v14 = (llvm::Type ***)v15;
    v16 += 40;
    v15 += 40;
  }
  while (v15 != a2);
  return 1;
}

uint64_t sub_1CD2DEBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::DataLayout ****a5)
{
  sub_1CD2DE398(a1, a2, a3, a5);
  llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a4, ***a5, (uint64_t)&v29);
  uint64_t v10 = v29;
  uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a3, ***a5, (uint64_t)&v29);
  if (v10 > v29)
  {
    uint64_t v13 = *(void *)(a3 + 8);
    uint64_t v29 = *(llvm::Type ***)a3;
    char v12 = v29;
    *(void *)(a3 + 8) = 0;
    int v28 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = 0;
    char v33 = *(unsigned char *)(a3 + 32);
    char v14 = v33;
    *(void *)a3 = *(void *)a4;
    uint64_t v15 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    sub_1CD8C5F50(a3 + 8, a4 + 8);
    *(unsigned char *)(a3 + 32) = *(unsigned char *)(a4 + 32);
    *(void *)a4 = v12;
    sub_1CD8C5E20(a4 + 8);
    MEMORY[0x1D25D9CD0](*(void *)(a4 + 8), 8);
    *(void *)(a4 + 8) = v13;
    uint64_t v30 = 0;
    *(void *)(a4 + 16) = v15;
    uint64_t v31 = 0;
    *(_DWORD *)(a4 + 24) = v28;
    int v32 = 0;
    *(unsigned char *)(a4 + 32) = v14;
    sub_1CD8C5E20((uint64_t)&v30);
    MEMORY[0x1D25D9CD0](0, 8);
    llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a3, ***a5, (uint64_t)&v29);
    uint64_t v16 = v29;
    uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a5, (uint64_t)&v29);
    if (v16 > v29)
    {
      uint64_t v29 = *(llvm::Type ***)a2;
      int v17 = v29;
      uint64_t v18 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      int v19 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      char v33 = *(unsigned char *)(a2 + 32);
      char v20 = v33;
      *(void *)a2 = *(void *)a3;
      uint64_t v21 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      sub_1CD8C5F50(a2 + 8, a3 + 8);
      *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 32);
      *(void *)a3 = v17;
      sub_1CD8C5E20(a3 + 8);
      MEMORY[0x1D25D9CD0](*(void *)(a3 + 8), 8);
      *(void *)(a3 + 8) = v18;
      uint64_t v30 = 0;
      *(void *)(a3 + 16) = v21;
      uint64_t v31 = 0;
      *(_DWORD *)(a3 + 24) = v19;
      int v32 = 0;
      *(unsigned char *)(a3 + 32) = v20;
      sub_1CD8C5E20((uint64_t)&v30);
      MEMORY[0x1D25D9CD0](0, 8);
      llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a2, ***a5, (uint64_t)&v29);
      char v22 = v29;
      uint64_t result = llvm::AllocaInst::getAllocationSizeInBits(*(llvm::Type ***)a1, ***a5, (uint64_t)&v29);
      if (v22 > v29)
      {
        uint64_t v29 = *(llvm::Type ***)a1;
        unint64_t v23 = v29;
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        int v25 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = 0;
        char v33 = *(unsigned char *)(a1 + 32);
        char v26 = v33;
        *(void *)a1 = *(void *)a2;
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        sub_1CD8C5F50(a1 + 8, a2 + 8);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)a2 = v23;
        sub_1CD8C5E20(a2 + 8);
        MEMORY[0x1D25D9CD0](*(void *)(a2 + 8), 8);
        *(void *)(a2 + 8) = v24;
        uint64_t v30 = 0;
        *(void *)(a2 + 16) = v27;
        uint64_t v31 = 0;
        *(_DWORD *)(a2 + 24) = v25;
        int v32 = 0;
        *(unsigned char *)(a2 + 32) = v26;
        sub_1CD8C5E20((uint64_t)&v30);
        return MEMORY[0x1D25D9CD0](0, 8);
      }
    }
  }
  return result;
}

uint64_t sub_1CD2DEEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 816);
  uint64_t v6 = *(unsigned int *)(a2 + 832);
  unsigned int v7 = a3 >> 4;
  if (v6)
  {
    LODWORD(v8) = (v6 - 1) & (v7 ^ (a3 >> 9));
    unsigned int v9 = (uint64_t *)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a3) {
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v6 - 1);
      uint64_t v10 = *(void *)(v5 + 16 * v8);
      if (v10 == a3)
      {
        unsigned int v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  unsigned int v9 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  uint64_t v13 = *(void *)(a1 + 32) + 48 * *((unsigned int *)v9 + 2);
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v15 = *(void *)(v13 + 24);
  char v16 = *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 40);
  v29[0] = a3;
  if (v6)
  {
    int v18 = v6 - 1;
    unsigned int v19 = v18 & (v7 ^ (a3 >> 9));
    char v20 = (uint64_t *)(v5 + 16 * v19);
    uint64_t v21 = *v20;
    if (*v20 == a3) {
      goto LABEL_23;
    }
    char v22 = 0;
    int v23 = 1;
    while (v21 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        char v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      char v20 = (uint64_t *)(v5 + 16 * v19);
      uint64_t v21 = *v20;
      if (*v20 == a3) {
        goto LABEL_23;
      }
    }
    if (v22) {
      char v26 = v22;
    }
    else {
      char v26 = v20;
    }
  }
  else
  {
    char v26 = 0;
  }
  char v20 = sub_1CBFFD5B4(a2 + 816, (uint64_t)v29, v29, v26);
  *char v20 = v29[0];
  *((_DWORD *)v20 + 2) = 0;
LABEL_23:
  *((_DWORD *)v20 + 2) = v15;
  uint64_t v30 = a3;
  uint64_t v31 = 1 << v16;
  sub_1CD6C0B48((uint64_t)v29, a2 + 840, &v30, &v31);
  uint64_t v27 = (1 << v16) + v17;
  if (!v17) {
    uint64_t v27 = 0;
  }
  uint64_t v30 = a3;
  uint64_t v31 = v27;
  sub_1CD6C0B48((uint64_t)v29, a2 + 864, &v30, &v31);
  uint64_t v30 = a3;
  uint64_t v31 = v14;
  return sub_1CD6C0B48((uint64_t)v29, a2 + 888, &v30, &v31);
}

void *sub_1CD2DF09C(uint64_t a1, uint64_t a2, llvm::DataLayout *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v80 = 0;
  if ((sub_1CD40EA84(*(void *)a6, *(_DWORD *)(a6 + 16), a2, &v80) & 1) == 0 || (BasicType = (void *)v80[1]) == 0)
  {
    uint64_t v14 = sub_1CD2DF770(v10);
    char v16 = (unsigned __int8 *)v14;
    size_t v17 = v15;
    unsigned int v18 = *(_DWORD *)(v10 + 8);
    if (v18 == 13)
    {
      unint64_t v19 = (unint64_t)*(unsigned int *)(v10 + 8) >> 8;
      uint64_t v20 = a1;
      uint64_t v21 = v16;
      char v22 = (void *)v17;
      int v23 = 5;
LABEL_15:
      BasicType = llvm::DIBuilder::createBasicType(v20, v21, v22, v19, v23, 64);
LABEL_16:
      StructType = (void *)v10;
      *(void *)&long long v78 = BasicType;
      sub_1CD4729F8((uint64_t)&v80, a6, (uint64_t *)&StructType, &v78);
      return BasicType;
    }
    if (v18 <= 6)
    {
      uint64_t v25 = sub_1CB83544C((uint64_t)a3, v10);
      if (v24 == 1) {
      uint64_t v20 = a1;
      }
      uint64_t v21 = v16;
      char v22 = (void *)v17;
      unint64_t v19 = v25;
      int v23 = 4;
      goto LABEL_15;
    }
    int v26 = *(_DWORD *)(v10 + 8);
    if (v26 == 16)
    {
      uint64_t v29 = a4;
      if (*(unsigned char *)a4 != 15) {
        uint64_t v29 = *(void *)(a4 - 8 * *(unsigned int *)(a4 + 8));
      }
      uint64_t v31 = sub_1CB83544C((uint64_t)a3, v10);
      if (v30 == 1) {
      char Alignment = llvm::DataLayout::getAlignment(a3, (llvm::Type *)v10, 0);
      }
      StructType = (void *)llvm::DIBuilder::createStructType(a1, (unsigned char *)a4, v16, v17, v29, a5, v31, 1 << Alignment, 0x40u, 0, 0, 0, 0, "", 0);
      uint64_t v80 = &v82;
      uint64_t v81 = 0x1000000000;
      if (*(_DWORD *)(v10 + 12))
      {
        int64_t v72 = a3;
        uint64_t v73 = a1;
        unint64_t v38 = 0;
        do
        {
          uint64_t v39 = sub_1CD2DF09C(v73, *(void *)(*(void *)(v10 + 16) + 8 * v38), a3, a4, a5, a6);
          uint64_t v40 = v39;
          uint64_t v41 = *(void *)(v39 - 8 * *(unsigned int *)(v39 + 8) + 16);
          if (v41)
          {
            uint64_t v43 = *(void **)(v41 + 8);
            size_t v44 = *v43;
            uint64_t v42 = (unsigned __int8 *)(v43 + 3);
            size_t v71 = v44;
          }
          else
          {
            size_t v71 = 0;
            uint64_t v42 = 0;
          }
          char v45 = (unsigned int *)v10;
          uint64_t v46 = a4;
          if (*(unsigned char *)a4 != 15) {
            uint64_t v46 = *(void *)(a4 - 8 * *(unsigned int *)(a4 + 8));
          }
          uint64_t v47 = *(void *)(v39 + 32);
          int v48 = *(_DWORD *)(v39 + 48);
          StructLayout = llvm::DataLayout::getStructLayout(v72, (llvm::StructType *)v45);
          uint64_t MemberType = llvm::DIBuilder::createMemberType(v73, (unsigned char *)a4, v42, v71, v46, a5, v47, v48, 8 * *((void *)StructLayout + v38 + 2), 64, v40, 0);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v80[v81] = MemberType;
          uint64_t v33 = (v81 + 1);
          LODWORD(v81) = v81 + 1;
          ++v38;
          uint64_t v10 = (uint64_t)v45;
          a3 = v72;
        }
        while (v38 < v45[3]);
        uint64_t v34 = v80;
        a1 = v73;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = &v82;
      }
      Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), v34, v33, 0, 1);
      llvm::DIBuilder::replaceArrays(a1, (unsigned __int8 **)&StructType, Impl, 0);
      BasicType = StructType;
      unint64_t v52 = v80;
      if (v80 == &v82) {
        goto LABEL_16;
      }
LABEL_63:
      free(v52);
      goto LABEL_16;
    }
    if (v26 == 15)
    {
      uint64_t v28 = sub_1CB83544C((uint64_t)a3, v10);
      if (v27 == 1) {
      uint64_t v20 = a1;
      }
      uint64_t v21 = v16;
      char v22 = (void *)v17;
      unint64_t v19 = v28;
      int v23 = 1;
      goto LABEL_15;
    }
    StructType = v79;
    long long v78 = xmmword_1CDC7F9D0;
    LODWORD(v81) = 0;
    char v85 = 0;
    uint64_t v86 = 0;
    p_StructType = &StructType;
    int v87 = 0;
    uint64_t v80 = (uint64_t *)&unk_1F2646FA8;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    if (!v14)
    {
      size_t v35 = 0;
      int v36 = 0;
      char v37 = 0;
      long long __dst = 0;
      size_t v75 = 0;
      unint64_t v76 = 0;
      goto LABEL_46;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v15 >= 0x17)
    {
      uint64_t v54 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v54 = v15 | 7;
      }
      unint64_t v55 = a3;
      uint64_t v56 = a1;
      uint64_t v57 = v10;
      uint64_t v58 = v54 + 1;
      p_dst = (void **)operator new(v54 + 1);
      unint64_t v59 = v58 | 0x8000000000000000;
      uint64_t v10 = v57;
      a1 = v56;
      a3 = v55;
      size_t v75 = v17;
      unint64_t v76 = v59;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v76) = v15;
      p_dst = (void **)&__dst;
      if (!v15) {
        goto LABEL_45;
      }
    }
    memmove(p_dst, v16, v17);
LABEL_45:
    *((unsigned char *)p_dst + v17) = 0;
    char v37 = HIBYTE(v76);
    int v36 = (const char *)__dst;
    size_t v35 = v75;
LABEL_46:
    BOOL v60 = v37 < 0;
    if (v37 >= 0) {
      int v61 = (const char *)&__dst;
    }
    else {
      int v61 = v36;
    }
    size_t v62 = v37 & 0x7F;
    if (v60) {
      size_t v63 = v35;
    }
    else {
      size_t v63 = v62;
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)&v80, v61, v63);
    if (v83 == v84) {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v80, "_", 1uLL);
    }
    else {
      *v84++ = 95;
    }
    unint64_t v64 = sub_1CB83544C((uint64_t)a3, v10);
    if (v65 == 1)
    {
      unint64_t v66 = v84;
      if ((unint64_t)(v83 - v84) > 8)
      {
        v84[8] = 32;
        *unint64_t v66 = *(void *)"vscale x ";
        v84 += 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v80, "vscale x ", 9uLL);
      }
    }
    sub_1CD098D14((llvm::raw_ostream *)&v80, v64, 0, 0, 0);
    if (SHIBYTE(v76) < 0) {
      operator delete(__dst);
    }
    uint64_t v67 = (unsigned __int8 *)*p_StructType;
    int v68 = p_StructType[1];
    uint64_t v70 = sub_1CB83544C((uint64_t)a3, v10);
    if (v69 == 1) {
    BasicType = llvm::DIBuilder::createBasicType(a1, v67, v68, v70, 1, 64);
    }
    uint64_t v80 = (uint64_t *)&unk_1F2646B98;
    if (v87 == 1 && v82) {
      MEMORY[0x1D25D9CB0](v82, 0x1000C8077774924);
    }
    unint64_t v52 = StructType;
    if (StructType == v79) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }
  return BasicType;
}

uint64_t sub_1CD2DF718(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 232);
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    uint64_t v8 = v1 + 32;
    uint64_t v7 = *(void *)(v1 + 32);
    uint64_t v9 = *(void *)(v8 + 8) + 40;
    if (v7) {
      BOOL v10 = v7 == v9;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 0;
    }
    else {
      return v7 - 24;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 24) + 80);
    if (v3) {
      uint64_t v4 = v3 - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 48);
    if (v5) {
      return v5 - 24;
    }
    else {
      return 0;
    }
  }
}

const char *sub_1CD2DF770(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 == 13)
  {
    uint64_t v3 = v30;
    uint64_t v27 = &v28;
    uint64_t v28 = v30;
    long long v29 = xmmword_1CDB15990;
    LODWORD(v22) = 0;
    char v24 = 0;
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v21 = (unsigned __int8 *)&unk_1F2646FA8;
    *((void *)&v22 + 1) = 0;
    v23[0] = 0;
    v23[1] = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v21, "__int_", 6uLL);
    sub_1CD098D14((llvm::raw_ostream *)&v21, (unint64_t)*(unsigned int *)(a1 + 8) >> 8, 0, 0, 0);
    uint64_t v4 = llvm::MDString::get(*(uint64_t **)a1, (unsigned __int8 *)*v27, (size_t)v27[1])[1] + 24;
    uint64_t v21 = (unsigned __int8 *)&unk_1F2646B98;
    if (v26 == 1 && *((void *)&v22 + 1)) {
      MEMORY[0x1D25D9CB0](*((void *)&v22 + 1), 0x1000C8077774924);
    }
    uint64_t v5 = v28;
LABEL_4:
    if (v5 != v3) {
      free(v5);
    }
    return (const char *)v4;
  }
  if (v2 > 6)
  {
    if (v2 == 16)
    {
      uint64_t v13 = *(unint64_t **)(a1 + 24);
      if (!v13) {
        return "__LiteralStructType_";
      }
      unint64_t v16 = *v13;
      uint64_t v14 = v13 + 2;
      size_t v15 = v16;
      uint64_t v3 = v23;
      uint64_t v21 = (unsigned __int8 *)v23;
      long long v22 = xmmword_1CDB15990;
      if (v16 >= 0x11) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      uint64_t v17 = 0;
      int v11 = (unsigned __int8 *)v23;
      if (v15)
      {
        memcpy(v23, v14, v15);
        int v11 = v21;
        uint64_t v17 = v22;
      }
      size_t v18 = v17 + v15;
      *(void *)&long long v22 = v17 + v15;
      if (v17 + v15)
      {
        do
        {
          int v19 = *v11;
          if (v19 == 58 || v19 == 46) {
            unsigned __int8 *v11 = 95;
          }
          ++v11;
          --v18;
        }
        while (v18);
        int v11 = v21;
        size_t v12 = v22;
      }
      else
      {
        size_t v12 = 0;
      }
      BOOL v10 = *(uint64_t **)a1;
    }
    else
    {
      if (v2 != 15) {
        return "UnknownType";
      }
      if (!*(void *)(a1 + 24)) {
        return "PointerType";
      }
      uint64_t v7 = (void *)sub_1CD2DF770(**(void **)(a1 + 16));
      if (v8 == 11 && *v7 == 0x546E776F6E6B6E55 && *(void *)((char *)v7 + 3) == 0x657079546E776F6ELL) {
        return "PointerType";
      }
      uint64_t v3 = v23;
      uint64_t v21 = (unsigned __int8 *)v23;
      long long v22 = xmmword_1CDB15990;
      v30[4] = 773;
      uint64_t v28 = v7;
      *(void *)&long long v29 = v8;
      *((void *)&v29 + 1) = "_Ptr";
      llvm::Twine::toVector((uint64_t)&v28, (uint64_t)&v21);
      BOOL v10 = *(uint64_t **)a1;
      int v11 = v21;
      size_t v12 = v22;
    }
    uint64_t v4 = llvm::MDString::get(v10, v11, v12)[1] + 24;
    uint64_t v5 = v21;
    goto LABEL_4;
  }
  uint64_t v6 = "__floating_type_";
  if (v2 == 3) {
    uint64_t v6 = "__double_";
  }
  if (v2 == 2) {
    return "__float_";
  }
  else {
    return v6;
  }
}

unsigned int *sub_1CD2DFABC(unsigned int **a1, uint64_t a2, const llvm::APInt *a3)
{
  v109[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)*a1 + 102);
  uint64_t v6 = (*a1)[208];
  unsigned int v7 = a2 >> 4;
  if (v6)
  {
    LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
    uint64_t v9 = (uint64_t *)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v6 - 1);
      uint64_t v10 = *(void *)(v5 + 16 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  uint64_t v9 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  uint64_t v13 = *((unsigned int *)v9 + 2);
  uint64_t v14 = *(void *)a1[1];
  size_t v15 = *(llvm::ConstantInt **)(v14 + 1960);
  unsigned int v16 = *(_DWORD *)(v14 + 1968);
  unsigned int v105 = v16 >> 8;
  if (v16 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v104 = 0;
  size_t v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v104, a3);
  if (v105 >= 0x41 && v104) {
    MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
  }
  uint64_t v19 = *(void *)a1[1];
  uint64_t v20 = *(llvm::ConstantInt **)(v19 + 1960);
  unint64_t v21 = *(unsigned int *)(v19 + 1968);
  unsigned int v105 = v21 >> 8;
  if (v21 >> 8 > 0x40) {
    operator new[]();
  }
  if (v21 <= 0xFF) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
  }
  unint64_t v104 = (const char *)(v22 & v13);
  char v24 = (unsigned int *)llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v104, v17);
  if (v105 >= 0x41 && v104) {
    MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
  }
  uint64_t v107 = v109;
  v109[0] = v18;
  v109[1] = v24;
  uint64_t v108 = 0x300000002;
  unsigned int v25 = 2;
  if (!a2 || *(unsigned char *)(a2 + 16) != 59) {
    goto LABEL_27;
  }
  uint64_t v26 = *(void *)(a2 - 32);
  if (!v26 || *(unsigned char *)(v26 + 16) != 16) {
    llvm::report_fatal_error((llvm *)"Coroutines cannot handle non static allocas yet", (const llvm::Twine *)1);
  }
  uint64_t v27 = (void *)(v26 + 24);
  if (*(_DWORD *)(v26 + 32) >= 0x41u) {
    uint64_t v27 = (void *)*v27;
  }
  if (*v27 < 2uLL)
  {
    unsigned int v25 = 2;
LABEL_27:
    int v32 = v109;
    goto LABEL_28;
  }
  uint64_t v28 = *(void *)a1[1];
  long long v29 = *(llvm::ConstantInt **)(v28 + 1960);
  unsigned int v30 = *(_DWORD *)(v28 + 1968);
  unsigned int v105 = v30 >> 8;
  if (v30 >> 8 >= 0x41) {
    operator new[]();
  }
  char v24 = 0;
  unint64_t v104 = 0;
  uint64_t v31 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v104, v23);
  if (v105 >= 0x41 && v104) {
    MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
  }
  if (v108 >= HIDWORD(v108)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v107 + v108) = v31;
  unsigned int v25 = v108 + 1;
  LODWORD(v108) = v108 + 1;
  int v32 = (uint64_t *)v107;
LABEL_28:
  uint64_t v33 = (uint64_t *)a1[2];
  uint64_t v34 = *(void *)a1[3];
  size_t v35 = *(uint64_t **)a1[4];
  __int16 v106 = 257;
  uint64_t v36 = sub_1CC57EEA0(v33, v34, v35, v32, v25, (uint64_t)&v104);
  int v37 = 1;
  if (a2 && *(unsigned char *)(a2 + 16) == 59)
  {
    char v24 = *a1;
    unint64_t v104 = 0;
    if (sub_1CD40EA84(*((void *)v24 + 108), v24[220], a2, &v104)) {
      unint64_t v38 = v104;
    }
    else {
      unint64_t v38 = (const char *)(*((void *)v24 + 108) + 16 * v24[220]);
    }
    if (*((void *)v38 + 1))
    {
      uint64_t v39 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
      uint64_t v40 = *(void *)a2;
      unsigned int v41 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v41 & 0xFE) == 0x12) {
        unsigned int v41 = *(_DWORD *)(**(void **)(v40 + 16) + 8);
      }
      uint64_t v42 = *(void *)(v39 + 504);
      if (v41 < 0x100) {
        goto LABEL_45;
      }
      unsigned int v43 = v41 >> 8;
      unint64_t v44 = *(unsigned int *)(v39 + 512);
      uint64_t v45 = *(void *)(v39 + 504);
      if (v44)
      {
        uint64_t v45 = v42;
        unint64_t v46 = v44;
        do
        {
          unint64_t v47 = v46 >> 1;
          uint64_t v48 = v45 + 16 * (v46 >> 1);
          unsigned int v49 = *(_DWORD *)(v48 + 8);
          uint64_t v50 = v48 + 16;
          v46 += ~(v46 >> 1);
          if (v49 < v43) {
            uint64_t v45 = v50;
          }
          else {
            unint64_t v46 = v47;
          }
        }
        while (v46);
      }
      if (v45 == v42 + 16 * v44 || *(_DWORD *)(v45 + 8) != v43) {
LABEL_45:
      }
        uint64_t v45 = v42;
      unint64_t v51 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v40, (llvm::LLVMContext *)*(unsigned int *)(v45 + 4));
      unint64_t v52 = (llvm::ConstantInt *)v51;
      if ((*(_DWORD *)(v40 + 8) & 0xFE) == 0x12)
      {
        uint64_t v94 = (llvm::Type *)*(unsigned int *)(v40 + 32);
        if (*(_DWORD *)(v40 + 8) == 19) {
          llvm::ScalableVectorType::get(v51, v94);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v51, v94);
        }
        unint64_t v52 = v95;
      }
      uint64_t v53 = a1[2];
      __int16 v103 = 257;
      if (*(llvm::ConstantInt **)v36 == v52)
      {
        uint64_t v54 = (unsigned __int8 *)v36;
      }
      else if (*(unsigned __int8 *)(v36 + 16) <= 0x14u)
      {
        uint64_t v54 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, llvm::ConstantInt *))(**((void **)v53 + 9) + 224))(*((void *)v53 + 9), 47, v36, v52);
        if (v54) {
          BOOL v68 = v54[16] >= 0x1Cu;
        }
        else {
          BOOL v68 = 0;
        }
        if (v68)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)v53 + 10) + 16))(*((void *)v53 + 10), v54, v102, *((void *)v53 + 6), *((void *)v53 + 7));
          uint64_t v96 = v53[2];
          if (v96)
          {
            uint64_t v97 = *(void *)v53;
            uint64_t v98 = v97 + 16 * v96;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v54, *(_DWORD *)v97, *(llvm::MDNode **)(v97 + 8));
              v97 += 16;
            }
            while (v97 != v98);
          }
        }
      }
      else
      {
        __int16 v106 = 257;
        uint64_t v54 = (unsigned __int8 *)llvm::CastInst::Create(47, v36, (uint64_t)v52, &v104, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)v53 + 10) + 16))(*((void *)v53 + 10), v54, v102, *((void *)v53 + 6), *((void *)v53 + 7));
        uint64_t v55 = v53[2];
        if (v55)
        {
          uint64_t v56 = *(void *)v53;
          uint64_t v57 = v56 + 16 * v55;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v54, *(_DWORD *)v56, *(llvm::MDNode **)(v56 + 8));
            v56 += 16;
          }
          while (v56 != v57);
        }
      }
      int v69 = llvm::ConstantInt::get(v52, ~(-1 << *(_WORD *)(a2 + 18)), 0);
      uint64_t v70 = (uint64_t)a1[2];
      __int16 v106 = 257;
      size_t v71 = sub_1CB844A3C(v70, v54, (uint64_t)v69, (uint64_t)&v104, 0, 0);
      uint64_t v72 = (uint64_t)a1[2];
      __int16 v106 = 257;
      uint64_t v74 = sub_1CC2427E8(v72, (uint64_t)v69, (uint64_t)&v104, v73);
      __int16 v103 = 257;
      size_t v75 = sub_1CBF52474(v72, v71, (uint64_t)v74, (uint64_t)v102);
      char v24 = (unsigned int *)v75;
      unint64_t v76 = a1[2];
      uint64_t v77 = *(void *)a2;
      __int16 v103 = 257;
      if (*(void *)v75 != v77)
      {
        if (*((unsigned __int8 *)v75 + 16) <= 0x14u)
        {
          char v24 = (unsigned int *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**((void **)v76 + 9) + 224))(*((void *)v76 + 9), 48, v75, v77);
          if (v24) {
            BOOL v81 = *((unsigned __int8 *)v24 + 16) >= 0x1Cu;
          }
          else {
            BOOL v81 = 0;
          }
          if (v81)
          {
            (*(void (**)(void, unsigned int *, void *, void, void))(**((void **)v76 + 10) + 16))(*((void *)v76 + 10), v24, v102, *((void *)v76 + 6), *((void *)v76 + 7));
            uint64_t v82 = v76[2];
            if (v82)
            {
              uint64_t v83 = *(void *)v76;
              uint64_t v84 = v83 + 16 * v82;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v83, *(llvm::MDNode **)(v83 + 8));
                v83 += 16;
              }
              while (v83 != v84);
            }
          }
        }
        else
        {
          __int16 v106 = 257;
          char v24 = (unsigned int *)llvm::CastInst::Create(48, (uint64_t)v75, v77, &v104, 0);
          (*(void (**)(void, unsigned int *, void *, void, void))(**((void **)v76 + 10) + 16))(*((void *)v76 + 10), v24, v102, *((void *)v76 + 6), *((void *)v76 + 7));
          uint64_t v78 = v76[2];
          if (v78)
          {
            uint64_t v79 = *(void *)v76;
            uint64_t v80 = v79 + 16 * v78;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v79, *(llvm::MDNode **)(v79 + 8));
              v79 += 16;
            }
            while (v79 != v80);
          }
        }
      }
LABEL_98:
      int v37 = 0;
      goto LABEL_61;
    }
    uint64_t v58 = *(uint64_t ***)a2;
    if (*(void *)(v36 + 72) == *(void *)a2) {
      goto LABEL_61;
    }
    if ((*(unsigned char *)(a2 + 23) & 0x10) == 0)
    {
      uint64_t v87 = 0;
      uint64_t v86 = &byte_1CFBCE98E;
LABEL_88:
      uint64_t v89 = a1[2];
      v102[0] = v86;
      v102[1] = v87;
      v102[2] = ".cast";
      __int16 v103 = 773;
      if (*(uint64_t ***)v36 == v58)
      {
        char v24 = (unsigned int *)v36;
      }
      else if (*(unsigned __int8 *)(v36 + 16) <= 0x14u)
      {
        char v24 = (unsigned int *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t **))(**((void **)v89 + 9)
                                                                                              + 224))(*((void *)v89 + 9), 49, v36, v58);
        if (v24) {
          BOOL v93 = *((unsigned __int8 *)v24 + 16) >= 0x1Cu;
        }
        else {
          BOOL v93 = 0;
        }
        if (v93)
        {
          (*(void (**)(void, unsigned int *, void *, void, void))(**((void **)v89 + 10) + 16))(*((void *)v89 + 10), v24, v102, *((void *)v89 + 6), *((void *)v89 + 7));
          uint64_t v99 = v89[2];
          if (v99)
          {
            uint64_t v100 = *(void *)v89;
            uint64_t v101 = v100 + 16 * v99;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v100, *(llvm::MDNode **)(v100 + 8));
              v100 += 16;
            }
            while (v100 != v101);
          }
        }
      }
      else
      {
        __int16 v106 = 257;
        char v24 = (unsigned int *)llvm::CastInst::Create(49, v36, (uint64_t)v58, &v104, 0);
        (*(void (**)(void, unsigned int *, void *, void, void))(**((void **)v89 + 10) + 16))(*((void *)v89 + 10), v24, v102, *((void *)v89 + 6), *((void *)v89 + 7));
        uint64_t v90 = v89[2];
        if (v90)
        {
          uint64_t v91 = *(void *)v89;
          uint64_t v92 = v91 + 16 * v90;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v91, *(llvm::MDNode **)(v91 + 8));
            v91 += 16;
          }
          while (v91 != v92);
        }
      }
      goto LABEL_98;
    }
    uint64_t v59 = **v58;
    uint64_t v60 = *(void *)(v59 + 152);
    uint64_t v61 = *(unsigned int *)(v59 + 168);
    if (v61)
    {
      LODWORD(v62) = (v61 - 1) & (v7 ^ (a2 >> 9));
      size_t v63 = (uint64_t *)(v60 + 16 * v62);
      uint64_t v64 = *v63;
      if (*v63 == a2)
      {
LABEL_87:
        char v85 = (void *)v63[1];
        uint64_t v88 = *v85;
        uint64_t v86 = (char *)(v85 + 2);
        uint64_t v87 = v88;
        goto LABEL_88;
      }
      int v65 = 1;
      while (v64 != -4096)
      {
        int v66 = v62 + v65++;
        uint64_t v62 = v66 & (v61 - 1);
        uint64_t v64 = *(void *)(v60 + 16 * v62);
        if (v64 == a2)
        {
          size_t v63 = (uint64_t *)(v60 + 16 * v62);
          goto LABEL_87;
        }
      }
    }
    size_t v63 = (uint64_t *)(v60 + 16 * v61);
    goto LABEL_87;
  }
LABEL_61:
  if (v107 != v109) {
    free(v107);
  }
  if (v37) {
    return (unsigned int *)v36;
  }
  else {
    return v24;
  }
}

BOOL sub_1CD2E0564(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 55;
}

uint64_t sub_1CD2E05B0(uint64_t a1, llvm::Use *a2)
{
  return llvm::DominatorTree::dominates(*(llvm::DominatorTree **)a1, **(const llvm::Value ***)(a1 + 8), a2);
}

uint64_t sub_1CD2E05C4(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  LODWORD(v2) = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    uint64_t v5 = v4 - 24;
  }
  else {
    uint64_t v5 = 0;
  }
  if (sub_1CD2DAE24(v5)) {
    return 1;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7 == a1 + 40) {
    return 1;
  }
  if (v7) {
    uint64_t v8 = v7 - 24;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(unsigned __int8 *)(v8 + 16);
  uint64_t result = 1;
  if (v9 != 30)
  {
    unsigned int v23 = 2;
    switch(*(unsigned char *)(v8 + 16))
    {
      case 0x1D:
      case 0x22:
      case 0x23:
        return result;
      case 0x1E:
LABEL_50:
        __break(1u);
        goto LABEL_51;
      case 0x1F:
        unsigned int v23 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_48;
      case 0x20:
      case 0x26:
        unsigned int v23 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_48;
      case 0x21:
        goto LABEL_17;
      case 0x24:
        unsigned int v23 = *(_WORD *)(v8 + 18) & 1;
        goto LABEL_48;
      case 0x25:
        unsigned int v23 = 1;
        goto LABEL_17;
      case 0x27:
LABEL_51:
        unsigned int v23 = *(_DWORD *)(v8 + 80) + 1;
LABEL_48:
        if (!v23) {
          return result;
        }
        goto LABEL_17;
      default:
        return 1;
    }
  }
  if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3) {
    unsigned int v23 = 2;
  }
  else {
    unsigned int v23 = 1;
  }
LABEL_17:
  int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v2 = (v2 - 1);
  uint64_t v12 = 1;
  uint64_t v13 = v8 - 64;
  uint64_t v14 = v23;
  do
  {
    if (v9 == 30)
    {
      uint64_t v17 = (uint64_t *)(v8 - 32 - 32 * v11);
    }
    else
    {
      uint64_t v17 = (uint64_t *)(v8 - 32);
      switch(v9)
      {
        case ' ':
        case '&':
          int v20 = *(_DWORD *)(v8 + 20);
          if ((v20 & 0x40000000) != 0) {
            uint64_t v21 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v21 = v8 - 32 * (v20 & 0x7FFFFFF);
          }
          uint64_t v17 = (uint64_t *)(v21 + 32 * v12);
          break;
        case '!':
          uint64_t v22 = -64;
          if (v12 == 1) {
            uint64_t v22 = -96;
          }
          uint64_t v17 = (uint64_t *)(v8 + v22);
          break;
        case '""':
        case '#':
          goto LABEL_50;
        case '$':
          if ((*(_WORD *)(v8 + 18) & 1) == 0)
          {
            uint64_t v15 = 0;
            goto LABEL_22;
          }
          uint64_t v17 = (uint64_t *)(v8 + 32 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
          break;
        case '%':
          break;
        case '\'':
          if (v12 == 1) {
            uint64_t v17 = (uint64_t *)(v8 - 64 - 32 * *(unsigned int *)(v8 + 80));
          }
          else {
            uint64_t v17 = (uint64_t *)(v13 - 32 * *(unsigned int *)(v8 + 80));
          }
          break;
        default:
          int v18 = *(_DWORD *)(v8 + 20);
          if ((v18 & 0x40000000) != 0) {
            uint64_t v19 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v19 = v8 - 32 * (v18 & 0x7FFFFFF);
          }
          uint64_t v17 = (uint64_t *)(v19 + 32 * (v10 & 0xFFFFFFFE) + 32);
          break;
      }
    }
    uint64_t v15 = *v17;
LABEL_22:
    uint64_t result = sub_1CD2E05C4(v15, v2);
    ++v11;
    if (result) {
      BOOL v16 = v14 == v12;
    }
    else {
      BOOL v16 = 1;
    }
    ++v12;
    v10 += 2;
    v13 += 32;
  }
  while (!v16);
  return result;
}

uint64_t sub_1CD2E0864()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable the optimization which would reuse the storage in the coroutine          fra"
                                     "me for allocas whose liferanges are not overlapped, for testing purposes";
  v3.n128_u64[1] = 155;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBD001B8, "reuse-storage-in-coroutine-frame", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD001B8, &dword_1CB82C000);
}

uint64_t sub_1CD2E08F0(uint64_t result, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 <= 1) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = v4;
  }
  if (a4 < v5) {
    unint64_t v5 = a4;
  }
  if (a4 <= v4) {
    unint64_t v5 = a4;
  }
  if ((v4 & 0x80000000) == 0) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = a4;
  }
  uint64_t v8 = *(unsigned int *)(result + 8);
  if (v8)
  {
    uint64_t v9 = result;
    int v10 = 0;
    if (v7)
    {
      size_t v11 = v7;
      uint64_t v12 = a3;
      do
      {
        int v13 = *v12++;
        int v10 = 33 * v10 + v13;
        --v11;
      }
      while (v11);
    }
    uint64_t v14 = *(void *)result;
    uint64_t v15 = *(void *)result + 8 * v8 + 8;
    int v16 = 1;
    int v17 = v10;
    while (1)
    {
      uint64_t v18 = v17 & (v8 - 1);
      uint64_t v19 = *(void **)(v14 + 8 * v18);
      if (v19 != (void *)-8)
      {
        if (!v19) {
          return result;
        }
        if (*(_DWORD *)(v15 + 4 * v18) == v10 && v7 == *v19)
        {
          if (!v7) {
            break;
          }
          uint64_t result = memcmp(a3, (char *)v19 + *(unsigned int *)(v9 + 20), v7);
          if (!result) {
            break;
          }
        }
      }
      int v17 = v16 + v18;
      ++v16;
    }
    if (v18 != -1 && (int)v18 != v8)
    {
      uint64_t v20 = *(void *)(*(void *)(v14 + 8 * (int)v18) + 8);
      if (v20)
      {
        if (!*(unsigned char *)(v20 + 16) && *(void *)(v20 + 8))
        {
          unsigned int v21 = *(_DWORD *)(a2 + 8);
          if (v21 >= *(_DWORD *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a2 + 8 * v21) = v20;
          ++*(_DWORD *)(a2 + 8);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD2E0A70(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    uint64_t v2 = *(llvm::Value **)(v1 - 32 * (*(_DWORD *)(v1 + 20) & 0x7FFFFFF));
    __n128 v3 = llvm::Value::stripPointerCasts(v2);
    uint64_t v4 = *(void *)(v1 + 8);
    while (v4)
    {
      unint64_t v5 = *(llvm::ValueAsMetadata **)(v4 + 24);
      uint64_t v4 = *(void *)(v4 + 8);
      if (v5 && *((unsigned char *)v5 + 16) == 77 && *(void *)v5 == *(void *)v3)
      {
        llvm::Value::doRAUW(v5, v3, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1, v2, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return result;
}

void sub_1CD2E0BD0(uint64_t a1, llvm *this, uint64_t a3, llvm::MemorySSAUpdater *a4, llvm::MemorySSAUpdater *a5)
{
  char v5 = (char)a4;
  uint64_t v6 = this;
  v127[15] = *MEMORY[0x1E4F143B8];
  llvm::removeUnreachableBlocks(this, 0, 0, a4, a5);
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x400000000;
  *(void *)(a1 + 56) = a1 + 72;
  *(void *)(a1 + 64) = 0x200000000;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 0x200000000;
  *(void *)(a1 + 120) = a1 + 136;
  unint64_t v117 = (void *)(a1 + 120);
  *(void *)(a1 + 128) = 0x400000000;
  *(void *)(a1 + 168) = a1 + 184;
  *(void *)(a1 + 176) = 0x200000000;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 248) = v5;
  sub_1CD2C7514(a1, (uint64_t)v6);
  if (*(void *)a1)
  {
    uint64_t v118 = a1;
    uint64_t v116 = v6;
    if (*(_DWORD *)(a1 + 200) || (unint64_t v10 = *(unsigned int *)(a1 + 128), !v10)) {
LABEL_4:
    }
      sub_1CD2CEC38((uint64_t)v6, a1, v8, v9);
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *(void *)(*v117 + 8 * v11);
      if ((llvm::Constant::isOneValue(*(llvm::Constant **)(v12
                                                                           - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)
                                                                           + 32)) & 1) != 0)
        goto LABEL_236;
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = (void *)(v12 + 24);
      uint64_t v15 = *(llvm::BasicBlock **)(v12 + 40);
      if (*((void *)v15 + 6) == v12 + 24 || !*v14)
      {
        uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v15);
        if (!SinglePredecessor) {
          goto LABEL_236;
        }
        uint64_t v18 = *(void *)(SinglePredecessor + 40);
        if (v18 == SinglePredecessor + 40)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v19 = v18 ? v18 - 24 : 0;
          uint64_t v16 = *(unsigned __int8 *)(v19 + 16) - 29 >= 0xB ? 0 : v19;
        }
      }
      else
      {
        uint64_t v16 = *v14 - 24;
      }
      unsigned int v20 = *(unsigned __int8 *)(v16 + 16) - 33;
      BOOL v56 = v20 > 0x33;
      uint64_t v21 = (1 << v20) & 0x8000000000041;
      if (!v56 && v21 != 0)
      {
        unsigned int v23 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v16 - 32));
        BOOL v24 = sub_1CD2CD600((uint64_t)v23);
        BOOL v25 = !v23 || !v24;
        if (!v25 && *((void *)v23 - 4 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF)) == v13) {
          break;
        }
      }
LABEL_236:
      if (++v11 == v10)
      {
        sub_1CD42769C((uint64_t)v117, v10);
        uint64_t v6 = v116;
        goto LABEL_4;
      }
    }
    uint64_t v26 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
    if (sub_1CD2C9100(v26)) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = *(void *)(v16 + 40);
    uint64_t v29 = *(void *)(v27 + 32);
    uint64_t v30 = *(void *)(v27 + 40);
    if (v29) {
      BOOL v31 = v29 == v30 + 40;
    }
    else {
      BOOL v31 = 1;
    }
    if (v31) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29 - 24;
    }
    if (v30 == v28)
    {
      if ((sub_1CD2E7790(v32, v16) & 1) == 0) {
        goto LABEL_234;
      }
      goto LABEL_235;
    }
    if (sub_1CD2E7790(v32, 0)) {
      goto LABEL_235;
    }
    for (uint64_t i = *(void *)(v28 + 48); i != v28 + 40; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v34 = i - 24;
      if (i) {
        uint64_t v35 = i - 24;
      }
      else {
        uint64_t v35 = 0;
      }
      if (*(unsigned char *)(v35 + 16) != 83) {
        goto LABEL_49;
      }
    }
    uint64_t v34 = 0;
LABEL_49:
    if (sub_1CD2E7790(v34, v16)) {
      goto LABEL_235;
    }
    uint64_t v119 = &v123;
    uint64_t v120 = (llvm::Type *)&v123;
    int v122 = 0;
    uint64_t v124 = v127;
    unsigned int v126 = 8;
    uint64_t v121 = 0x100000008;
    uint64_t v123 = v30;
    unsigned int v36 = 1;
    v127[0] = v28;
    while (1)
    {
      uint64_t v37 = *((void *)v124 + v36 - 1);
      unsigned int v125 = v36 - 1;
      unint64_t v38 = v120;
      uint64_t v39 = HIDWORD(v121);
      if (v120 == v119)
      {
        if (HIDWORD(v121))
        {
          uint64_t v40 = 0;
          uint64_t v41 = 8 * HIDWORD(v121);
          uint64_t v42 = v120;
          do
          {
            if (*(void *)v42 == v37) {
              goto LABEL_83;
            }
            if (*(void *)v42 == -2) {
              uint64_t v40 = v42;
            }
            uint64_t v42 = (llvm::Type *)((char *)v42 + 8);
            v41 -= 8;
          }
          while (v41);
          if (v40)
          {
            *(void *)uint64_t v40 = v37;
            --v122;
            goto LABEL_83;
          }
        }
        unsigned int v43 = v121;
        if (HIDWORD(v121) < v121)
        {
          ++HIDWORD(v121);
          *((void *)v120 + v39) = v37;
          goto LABEL_83;
        }
      }
      else
      {
        unsigned int v43 = v121;
      }
      if (3 * v43 <= 4 * (HIDWORD(v121) - v122))
      {
        if (v43 >= 0x40) {
          v43 *= 2;
        }
        else {
          unsigned int v43 = 128;
        }
      }
      else if (v43 - HIDWORD(v121) >= v43 >> 3)
      {
        goto LABEL_64;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v119, v43);
      unsigned int v43 = v121;
      unint64_t v38 = v120;
LABEL_64:
      unsigned int v44 = v43 - 1;
      unsigned int v45 = (v43 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      unint64_t v46 = (void *)((char *)v38 + 8 * v45);
      uint64_t v47 = *v46;
      if (*v46 == -1)
      {
        uint64_t v48 = 0;
      }
      else
      {
        uint64_t v48 = 0;
        int v49 = 1;
        do
        {
          if (v47 == v37) {
            goto LABEL_83;
          }
          if (v48) {
            BOOL v50 = 0;
          }
          else {
            BOOL v50 = v47 == -2;
          }
          if (v50) {
            uint64_t v48 = v46;
          }
          unsigned int v51 = v45 + v49++;
          unsigned int v45 = v51 & v44;
          unint64_t v46 = (void *)((char *)v38 + 8 * (v51 & v44));
          uint64_t v47 = *v46;
        }
        while (*v46 != -1);
      }
      if (v48) {
        unint64_t v52 = v48;
      }
      else {
        unint64_t v52 = v46;
      }
      if (*v52 != v37)
      {
        if (*v52 == -2) {
          --v122;
        }
        else {
          ++HIDWORD(v121);
        }
        *unint64_t v52 = v37;
      }
      do
      {
LABEL_83:
        uint64_t v37 = *(void *)(v37 + 8);
        if (!v37) {
          goto LABEL_133;
        }
        uint64_t v53 = *(void *)(v37 + 24);
        unsigned int v54 = *(unsigned __int8 *)(v53 + 16);
        if (v53) {
          BOOL v55 = v54 >= 0x1C;
        }
        else {
          BOOL v55 = 0;
        }
        BOOL v56 = !v55 || v54 - 29 > 0xA;
      }
      while (v56);
LABEL_91:
      uint64_t v57 = *(void *)(v53 + 40);
      uint64_t v58 = (llvm::Type *)v119;
      if (v120 == v119)
      {
        unsigned int v59 = HIDWORD(v121);
        uint64_t v60 = (llvm::Type *)((char *)v120 + 8 * HIDWORD(v121));
        if (HIDWORD(v121))
        {
          uint64_t v61 = 0;
          while (*(void *)((char *)v120 + v61) != v57)
          {
            v61 += 8;
            if (8 * HIDWORD(v121) == v61) {
              goto LABEL_110;
            }
          }
          uint64_t v60 = (llvm::Type *)((char *)v120 + v61);
        }
LABEL_110:
        uint64_t v58 = v120;
      }
      else
      {
        int v62 = v121 - 1;
        unsigned int v63 = (v121 - 1) & ((v57 >> 4) ^ (v57 >> 9));
        uint64_t v60 = (llvm::Type *)((char *)v120 + 8 * v63);
        uint64_t v64 = *(void *)v60;
        if (*(void *)v60 == -1)
        {
          int v65 = 0;
LABEL_127:
          if (v65) {
            uint64_t v60 = v65;
          }
          unsigned int v59 = HIDWORD(v121);
          if (*(void *)v60 != v57) {
            uint64_t v60 = (llvm::Type *)((char *)v120 + 8 * v121);
          }
        }
        else
        {
          int v65 = 0;
          int v66 = 1;
          while (v64 != v57)
          {
            if (v65) {
              BOOL v67 = 0;
            }
            else {
              BOOL v67 = v64 == -2;
            }
            if (v67) {
              int v65 = v60;
            }
            unsigned int v68 = v63 + v66++;
            unsigned int v63 = v68 & v62;
            uint64_t v60 = (llvm::Type *)((char *)v120 + 8 * (v68 & v62));
            uint64_t v64 = *(void *)v60;
            if (*(void *)v60 == -1) {
              goto LABEL_127;
            }
          }
          unsigned int v59 = HIDWORD(v121);
        }
      }
      if (v120 == v58) {
        unsigned int v69 = v59;
      }
      else {
        unsigned int v69 = v121;
      }
      if (v60 == (llvm::Type *)((char *)v120 + 8 * v69))
      {
        if (v125 >= (unint64_t)v126) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v124 + v125++) = v57;
      }
      while (1)
      {
        uint64_t v37 = *(void *)(v37 + 8);
        if (!v37) {
          break;
        }
        uint64_t v53 = *(void *)(v37 + 24);
        unsigned int v70 = *(unsigned __int8 *)(v53 + 16);
        if (v53) {
          BOOL v71 = v70 >= 0x1C;
        }
        else {
          BOOL v71 = 0;
        }
        if (v71 && v70 - 29 < 0xB) {
          goto LABEL_91;
        }
      }
LABEL_133:
      unsigned int v36 = v125;
      if (!v125)
      {
        uint64_t v74 = (llvm::Type *)v119;
        uint64_t v73 = v120;
        if (v120 == v119)
        {
          unsigned int v75 = HIDWORD(v121);
          unint64_t v76 = (char *)v119 + 8 * HIDWORD(v121);
          if (HIDWORD(v121))
          {
            uint64_t v77 = 0;
            while (*(void *)((char *)v119 + v77) != v30)
            {
              v77 += 8;
              if (8 * HIDWORD(v121) == v77) {
                goto LABEL_160;
              }
            }
            unint64_t v76 = (char *)v119 + v77;
          }
LABEL_160:
          char v85 = (llvm::Type *)v119;
        }
        else
        {
          int v78 = v121 - 1;
          unsigned int v79 = (v121 - 1) & ((v30 >> 4) ^ (v30 >> 9));
          unint64_t v76 = (char *)v120 + 8 * v79;
          uint64_t v80 = *(void *)v76;
          if (*(void *)v76 == -1)
          {
            BOOL v81 = 0;
LABEL_162:
            if (v81) {
              unint64_t v76 = v81;
            }
            unsigned int v75 = HIDWORD(v121);
            if (*(void *)v76 != v30) {
              unint64_t v76 = (char *)v120 + 8 * v121;
            }
          }
          else
          {
            BOOL v81 = 0;
            int v82 = 1;
            while (v80 != v30)
            {
              if (v81) {
                BOOL v83 = 0;
              }
              else {
                BOOL v83 = v80 == -2;
              }
              if (v83) {
                BOOL v81 = v76;
              }
              unsigned int v84 = v79 + v82++;
              unsigned int v79 = v84 & v78;
              unint64_t v76 = (char *)v120 + 8 * (v84 & v78);
              uint64_t v80 = *(void *)v76;
              if (*(void *)v76 == -1) {
                goto LABEL_162;
              }
            }
            unsigned int v75 = HIDWORD(v121);
          }
          char v85 = v120;
        }
        int v86 = v121;
        if (v85 == v119) {
          unsigned int v87 = v75;
        }
        else {
          unsigned int v87 = v121;
        }
        if (v76 != (char *)v85 + 8 * v87)
        {
          *(void *)unint64_t v76 = -2;
          ++v122;
          uint64_t v74 = (llvm::Type *)v119;
          uint64_t v73 = v120;
          char v85 = v120;
        }
        if (v85 == v74)
        {
          uint64_t v88 = (void *)((char *)v74 + 8 * v75);
          if (v75)
          {
            uint64_t v89 = 0;
            uint64_t v90 = 8 * v75;
            while (*(void *)((char *)v74 + v89) != v28)
            {
              v89 += 8;
              if (v90 == v89) {
                goto LABEL_190;
              }
            }
            uint64_t v88 = (void *)((char *)v74 + v89);
          }
LABEL_190:
          uint64_t v98 = v74;
        }
        else
        {
          int v91 = v86 - 1;
          unsigned int v92 = (v86 - 1) & ((v28 >> 4) ^ (v28 >> 9));
          uint64_t v88 = (void *)((char *)v73 + 8 * v92);
          uint64_t v93 = *v88;
          if (*v88 == -1)
          {
            uint64_t v94 = 0;
LABEL_192:
            if (v94) {
              uint64_t v88 = v94;
            }
            if (*v88 != v28)
            {
              uint64_t v99 = (uint64_t *)((char *)&v121 + 4);
              if (v73 != v74) {
                uint64_t v99 = &v121;
              }
              uint64_t v88 = (void *)((char *)v73 + 8 * *(unsigned int *)v99);
            }
          }
          else
          {
            uint64_t v94 = 0;
            int v95 = 1;
            while (v93 != v28)
            {
              if (v94) {
                BOOL v96 = 0;
              }
              else {
                BOOL v96 = v93 == -2;
              }
              if (v96) {
                uint64_t v94 = v88;
              }
              unsigned int v97 = v92 + v95++;
              unsigned int v92 = v97 & v91;
              uint64_t v88 = (void *)((char *)v73 + 8 * (v97 & v91));
              uint64_t v93 = *v88;
              if (*v88 == -1) {
                goto LABEL_192;
              }
            }
          }
          uint64_t v98 = v73;
        }
        unsigned int v100 = HIDWORD(v121);
        unsigned int v101 = v121;
        if (v98 == v74) {
          unsigned int v102 = HIDWORD(v121);
        }
        else {
          unsigned int v102 = v121;
        }
        if (v88 != (void *)((char *)v98 + 8 * v102))
        {
          *uint64_t v88 = -2;
          ++v122;
          uint64_t v74 = (llvm::Type *)v119;
          uint64_t v73 = v120;
          unsigned int v100 = HIDWORD(v121);
          unsigned int v101 = v121;
          uint64_t v98 = v120;
        }
        if (v98 == v74) {
          uint64_t v103 = v100;
        }
        else {
          uint64_t v103 = v101;
        }
        unint64_t v104 = v98;
        if (v103)
        {
          uint64_t v105 = 8 * v103;
          unint64_t v104 = v98;
          while (*(void *)v104 >= 0xFFFFFFFFFFFFFFFELL)
          {
            unint64_t v104 = (llvm::Type *)((char *)v104 + 8);
            v105 -= 8;
            if (!v105) {
              goto LABEL_227;
            }
          }
        }
        __int16 v106 = (void *)((char *)v98 + 8 * v103);
        if (v104 == (llvm::Type *)v106)
        {
LABEL_227:
          int v115 = 1;
        }
        else
        {
          unint64_t v107 = *(void *)v104;
          while (1)
          {
            unint64_t v108 = v107 + 40;
            for (uint64_t j = *(void *)(v107 + 48); j != v108; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v110 = j - 24;
              if (j) {
                uint64_t v111 = j - 24;
              }
              else {
                uint64_t v111 = 0;
              }
              if (*(unsigned char *)(v111 + 16) != 83) {
                goto LABEL_222;
              }
            }
            uint64_t v110 = 0;
LABEL_222:
            int v112 = sub_1CD2E7790(v110, 0);
            if (v112) {
              break;
            }
            unsigned int v113 = (unint64_t *)((char *)v104 + 8);
            do
            {
              if (v113 == v106) {
                goto LABEL_228;
              }
              unint64_t v114 = *v113++;
              unint64_t v107 = v114;
            }
            while (v114 > 0xFFFFFFFFFFFFFFFDLL);
            unint64_t v104 = (llvm::Type *)(v113 - 1);
          }
LABEL_228:
          int v115 = v112 ^ 1;
        }
        if (v124 != v127)
        {
          free(v124);
          uint64_t v74 = (llvm::Type *)v119;
          uint64_t v73 = v120;
        }
        if (v73 != v74) {
          free(v73);
        }
        if (v115)
        {
LABEL_234:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, ((llvm::Value **)v23 - 4 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF))[4], (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
LABEL_235:
        a1 = v118;
        goto LABEL_236;
      }
    }
  }
}

void sub_1CD2E69AC(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CD2E6A4C(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBD00278;
  *(_DWORD *)(a1 + 24) = 3;
  *(void *)a1 = &unk_1F264AC08;
  *(unsigned char *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 29) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD00280, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CD2E69AC;
    v6[1] = &PassRegistry;
    char v5 = v6;
    std::__call_once(&qword_1EBD00280, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

llvm::Function *sub_1CD2E6B04(llvm::Function *result, uint64_t a2, uint64_t a3)
{
  v126[1] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 200) != 3 || *(_DWORD *)(a2 + 128) != 0)
  {
    uint64_t v89 = result;
    if (*(_DWORD *)(a2 + 176))
    {
      uint64_t v5 = **(void **)(a2 + 168);
      uint64_t v6 = (llvm::ValueAsMetadata *)v5;
      if (a3)
      {
        uint64_t v110 = 2;
        uint64_t v111 = 0;
        int v112 = (int32x2_t ****)v5;
        if (v5 != -8192 && v5 != -4096 && v5 != 0) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v110);
        }
        unint64_t v109 = (unint64_t **)&unk_1F2615EC8;
        uint64_t v113 = a3;
        uint64_t v8 = sub_1CC4CFF80(a3, &v109);
        if (v112 != (int32x2_t ****)-8192 && v112 != (int32x2_t ****)-4096 && v112)
        {
          unint64_t v9 = v110 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v110 & 0xFFFFFFFFFFFFFFF8) = v111;
          if (v111)
          {
            *uint64_t v111 = *v111 & 7 | v9;
          }
          else
          {
            unint64_t v10 = v112;
            uint64_t v11 = ***v112;
            unint64_t v12 = (unint64_t)v11[303];
            if (v12 <= v9)
            {
              uint64_t v13 = v11[305].u32[0];
              if (v12 + 16 * v13 > v9)
              {
                unsigned int v14 = v13 - 1;
                LODWORD(v15) = v14 & ((v112 >> 4) ^ (v112 >> 9));
                uint64_t v16 = (int32x2_t *****)(v12 + 16 * v15);
                int v17 = *v16;
                if (v112 != *v16)
                {
                  int v18 = 1;
                  do
                  {
                    if (v17 == (int32x2_t ****)-4096) {
                      goto LABEL_25;
                    }
                    int v19 = v15 + v18++;
                    uint64_t v15 = v19 & v14;
                    int v17 = *(int32x2_t *****)(v12 + 16 * v15);
                  }
                  while (v112 != v17);
                  uint64_t v16 = (int32x2_t *****)(v12 + 16 * v15);
                }
                unsigned __int8 *v16 = (int32x2_t ****)-8192;
                v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                unint64_t v10 = v112;
LABEL_25:
                *((unsigned char *)v10 + 17) &= ~1u;
              }
            }
          }
        }
        uint64_t v6 = (llvm::ValueAsMetadata *)v8[7];
      }
      uint64_t v20 = 0;
      uint64_t v21 = **(void **)v6;
      uint64_t v93 = &v95;
      uint64_t v94 = 0x200000000;
      uint64_t v98 = v21;
      uint64_t v99 = &v107;
      unsigned int v100 = &v108;
      uint64_t v101 = 0;
      int v102 = 0;
      __int16 v103 = 512;
      char v104 = 7;
      uint64_t v96 = 0;
      unsigned int v97 = 0;
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      unint64_t v107 = &unk_1F2616E88;
      unint64_t v108 = &unk_1F2617008;
      uint64_t v96 = *((void *)v6 + 5);
      unsigned int v97 = (char *)v6 + 24;
      uint64_t v22 = (unsigned __int8 *)*((void *)v6 + 6);
      v90[0] = v22;
      if (v22)
      {
        llvm::MetadataTracking::track((uint64_t)v90, v22, 2);
        uint64_t v20 = v90[0];
      }
      sub_1CB8461A4((uint64_t)&v93, 0, v20);
      if (!v90[0])
      {
LABEL_31:
        int v23 = *(unsigned __int8 *)(v5 + 16);
        if (v23 == 84)
        {
          uint64_t v24 = 0;
        }
        else if (v23 == 39)
        {
          uint64_t v24 = (*(_DWORD *)(v5 + 80) + 1);
        }
        else
        {
          uint64_t v24 = 2;
        }
        int v25 = *(_DWORD *)(v5 + 20);
        if (v25 < 0 && (uint64_t v86 = v5 - 32 * (v25 & 0x7FFFFFF), v87 = *(void *)(v86 - 8), (v87 & 0xFFFFFFFF0) != 0))
        {
          uint64_t v27 = -(uint64_t)(v25 & 0x7FFFFFF);
          uint64_t v26 = (*(_DWORD *)(v86 - 12) - *(_DWORD *)(v86 - v87));
        }
        else
        {
          uint64_t v26 = 0;
          uint64_t v27 = -(uint64_t)(v25 & 0x7FFFFFF);
        }
        if (v5 - 32 * v24 - 32 * v26 - 32 != v5 + 32 * v27)
        {
          uint64_t v28 = *((void *)v6 - 4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
          uint64_t v29 = *(llvm::Type **)v28;
          uint64_t v30 = v89;
          if (*((_WORD *)v89 + 9))
          {
            llvm::Function::BuildLazyArguments(v89);
            uint64_t v30 = v89;
            BOOL v31 = (llvm::Instruction *)*((void *)v89 + 11);
            if (*((_WORD *)v89 + 9))
            {
              llvm::Function::BuildLazyArguments(v89);
              uint64_t v30 = v89;
              uint64_t v32 = (llvm::Instruction *)*((void *)v89 + 11);
              goto LABEL_39;
            }
          }
          else
          {
            BOOL v31 = (llvm::Instruction *)*((void *)v89 + 11);
          }
          uint64_t v32 = v31;
LABEL_39:
          uint64_t v33 = (llvm::Instruction *)((char *)v32 + 40 * *((void *)v30 + 12));
          while (v31 != v33)
          {
            int v34 = *((unsigned __int8 *)v31 + 16);
            if (v31 && v34 == 21)
            {
              uint64_t v35 = *(void *)(*((void *)v31 + 3) + 112);
              if (v35)
              {
                unsigned int v36 = *((_DWORD *)v31 + 8) + 2;
                if (v36 < *(_DWORD *)(v35 + 8))
                {
                  uint64_t v37 = *(void *)(v35 + 8 * v36 + 40);
                  if (v37)
                  {
                    if (*(char *)(v37 + 19) < 0) {
                      goto LABEL_78;
                    }
                  }
                }
              }
            }
            else if (v31 && v34 == 59 && (*((_WORD *)v31 + 9) & 0x80) != 0)
            {
              goto LABEL_78;
            }
            BOOL v31 = (llvm::Instruction *)((char *)v31 + 40);
          }
          uint64_t v47 = *((void *)v89 + 10);
          if (v47) {
            uint64_t v48 = (llvm::BasicBlock *)(v47 - 24);
          }
          else {
            uint64_t v48 = 0;
          }
          FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v48, 1);
          uint64_t v50 = 0;
          uint64_t v51 = **(void **)FirstNonPHIOrDbg;
          unint64_t v109 = &v111;
          uint64_t v110 = 0x200000000;
          uint64_t v116 = v51;
          unint64_t v117 = &v125;
          uint64_t v118 = v126;
          uint64_t v119 = 0;
          int v120 = 0;
          __int16 v121 = 512;
          char v122 = 7;
          uint64_t v114 = 0;
          int v115 = 0;
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          unsigned int v125 = &unk_1F2616E88;
          v126[0] = &unk_1F2617008;
          uint64_t v114 = *((void *)FirstNonPHIOrDbg + 5);
          int v115 = FirstNonPHIOrDbg + 24;
          unint64_t v52 = (unsigned __int8 *)*((void *)FirstNonPHIOrDbg + 6);
          unsigned int v92 = v52;
          if (v52)
          {
            llvm::MetadataTracking::track((uint64_t)&v92, v52, 2);
            uint64_t v50 = (uint64_t)v92;
          }
          sub_1CB8461A4((uint64_t)&v109, 0, v50);
          if (!v92) {
            goto LABEL_76;
          }
          int v76 = *v92;
          if ((v76 - 4) > 0x1E)
          {
            if ((v76 - 3) >= 0xFFFFFFFE) {
              unsigned int v84 = v92;
            }
            else {
              unsigned int v84 = 0;
            }
            if ((v76 - 3) < 0xFFFFFFFE)
            {
              if (v76 == 3) {
                *((void *)v92 + 1) = 0;
              }
LABEL_76:
              __int16 v91 = 257;
              BOOL v31 = sub_1CB935044((uint64_t *)&v109, v29, 0, (uint64_t)v90);
              *((_WORD *)v31 + 9) |= 0x80u;
              if (v109 != &v111) {
                free(v109);
              }
LABEL_78:
              char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v96 + 56) + 40) + 272), *(llvm::Type **)v28, 1);
              unsigned int v54 = (char *)operator new(0x80uLL);
              *((_DWORD *)v54 + 21) = *((_DWORD *)v54 + 21) & 0x38000000 | 2;
              *(void *)unsigned int v54 = 0;
              *((void *)v54 + 2) = 0;
              *((void *)v54 + 1) = 0;
              *((void *)v54 + 5) = 0;
              *((void *)v54 + 6) = 0;
              *((void *)v54 + 4) = 0;
              *((void *)v54 + 8) = ***(void ***)v28 + 1576;
              BOOL v55 = (llvm::Instruction *)(v54 + 64);
              *((void *)v54 + 3) = v54 + 64;
              *((void *)v54 + 7) = v54 + 64;
              *((void *)v54 + 9) = 0;
              v54[80] = 61;
              v54[81] = 0;
              *((_WORD *)v54 + 41) = 0;
              *((_DWORD *)v54 + 21) = 2;
              *(_OWORD *)(v54 + 88) = 0u;
              *(_OWORD *)(v54 + 104) = 0u;
              *((_DWORD *)v54 + 30) = 0;
              *(void *)unsigned int v54 = v28;
              uint64_t v58 = *(void *)(v28 + 8);
              uint64_t v57 = (void *)(v28 + 8);
              uint64_t v56 = v58;
              *((void *)v54 + 1) = v58;
              if (v58) {
                *(void *)(v56 + 16) = v54 + 8;
              }
              *((void *)v54 + 2) = v57;
              *uint64_t v57 = v54;
              if (*((void *)v54 + 4))
              {
                **((void **)v54 + 6) = *((void *)v54 + 5);
                uint64_t v88 = *((void *)v54 + 5);
                if (v88) {
                  *(void *)(v88 + 16) = *((void *)v54 + 6);
                }
              }
              *((void *)v54 + 4) = v31;
              unsigned int v59 = (void *)((char *)v31 + 8);
              uint64_t v60 = *((void *)v31 + 1);
              *((void *)v54 + 5) = v60;
              if (v60) {
                *(void *)(v60 + 16) = v54 + 40;
              }
              *((void *)v54 + 6) = v59;
              *unsigned int v59 = v54 + 32;
              *((_WORD *)v54 + 41) = 2 * (Alignment & 0x3F);
              v54[124] = 1;
              LOWORD(v113) = 257;
              (*((void (**)(void **, llvm::Instruction *, unint64_t ***, uint64_t, char *))*v100 + 2))(v100, v55, &v109, v96, v97);
              if (v94)
              {
                unsigned int v79 = (llvm::MDNode **)v93;
                uint64_t v80 = (llvm::MDNode **)((char *)v93 + 16 * v94);
                do
                {
                  llvm::Instruction::setMetadata(v55, *(_DWORD *)v79, v79[1]);
                  v79 += 2;
                }
                while (v79 != v80);
              }
              uint64_t v61 = v31;
              goto LABEL_94;
            }
            unint64_t v78 = (unint64_t)(v84 + 8);
          }
          else
          {
            if ((v92[1] & 0x7F) != 2 && !*((_DWORD *)v92 + 3)) {
              goto LABEL_76;
            }
            uint64_t v77 = *((void *)v92 + 2);
            if ((v77 & 4) == 0) {
              goto LABEL_76;
            }
            unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFF8;
            if (!v78) {
              goto LABEL_76;
            }
          }
          v90[0] = &v92;
          sub_1CC5FA668(v78 + 16, v90);
          goto LABEL_76;
        }
        unint64_t v38 = *(llvm::Type **)v5;
        uint64_t v39 = v89;
        if (*((_WORD *)v89 + 9))
        {
          llvm::Function::BuildLazyArguments(v89);
          uint64_t v39 = v89;
          uint64_t v40 = (llvm::Instruction *)*((void *)v89 + 11);
          if (*((_WORD *)v89 + 9))
          {
            llvm::Function::BuildLazyArguments(v89);
            uint64_t v39 = v89;
            uint64_t v41 = (llvm::Instruction *)*((void *)v89 + 11);
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v40 = (llvm::Instruction *)*((void *)v89 + 11);
        }
        uint64_t v41 = v40;
LABEL_56:
        uint64_t v42 = (llvm::Instruction *)((char *)v41 + 40 * *((void *)v39 + 12));
        while (v40 != v42)
        {
          int v43 = *((unsigned __int8 *)v40 + 16);
          if (v40 && v43 == 21)
          {
            uint64_t v44 = *(void *)(*((void *)v40 + 3) + 112);
            if (v44)
            {
              unsigned int v45 = *((_DWORD *)v40 + 8) + 2;
              if (v45 < *(_DWORD *)(v44 + 8))
              {
                uint64_t v46 = *(void *)(v44 + 8 * v45 + 40);
                if (v46)
                {
                  if (*(char *)(v46 + 19) < 0) {
                    goto LABEL_93;
                  }
                }
              }
            }
          }
          else if (v40 && v43 == 59 && (*((_WORD *)v40 + 9) & 0x80) != 0)
          {
            goto LABEL_93;
          }
          uint64_t v40 = (llvm::Instruction *)((char *)v40 + 40);
        }
        uint64_t v62 = *((void *)v89 + 10);
        if (v62) {
          unsigned int v63 = (llvm::BasicBlock *)(v62 - 24);
        }
        else {
          unsigned int v63 = 0;
        }
        uint64_t v64 = llvm::BasicBlock::getFirstNonPHIOrDbg(v63, 1);
        uint64_t v65 = 0;
        uint64_t v66 = **(void **)v64;
        unint64_t v109 = &v111;
        uint64_t v110 = 0x200000000;
        uint64_t v116 = v66;
        unint64_t v117 = &v125;
        uint64_t v118 = v126;
        uint64_t v119 = 0;
        int v120 = 0;
        __int16 v121 = 512;
        char v122 = 7;
        uint64_t v114 = 0;
        int v115 = 0;
        uint64_t v123 = 0;
        uint64_t v124 = 0;
        unsigned int v125 = &unk_1F2616E88;
        v126[0] = &unk_1F2617008;
        uint64_t v114 = *((void *)v64 + 5);
        int v115 = v64 + 24;
        BOOL v67 = (unsigned __int8 *)*((void *)v64 + 6);
        unsigned int v92 = v67;
        if (v67)
        {
          llvm::MetadataTracking::track((uint64_t)&v92, v67, 2);
          uint64_t v65 = (uint64_t)v92;
        }
        sub_1CB8461A4((uint64_t)&v109, 0, v65);
        if (!v92) {
          goto LABEL_91;
        }
        int v81 = *v92;
        if ((v81 - 4) > 0x1E)
        {
          if ((v81 - 3) >= 0xFFFFFFFE) {
            char v85 = v92;
          }
          else {
            char v85 = 0;
          }
          if ((v81 - 3) < 0xFFFFFFFE)
          {
            if (v81 == 3) {
              *((void *)v92 + 1) = 0;
            }
LABEL_91:
            __int16 v91 = 257;
            uint64_t v40 = sub_1CB935044((uint64_t *)&v109, v38, 0, (uint64_t)v90);
            *((_WORD *)v40 + 9) |= 0x80u;
            if (v109 != &v111) {
              free(v109);
            }
LABEL_93:
            __int16 v91 = 257;
            char v68 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v96 + 56) + 40) + 272), v38, 1);
            unsigned int v69 = operator new(0x60uLL);
            v69[13] = v69[13] & 0x38000000 | 1;
            uint64_t v61 = (llvm::Instruction *)(v69 + 8);
            *(void *)unsigned int v69 = 0;
            *((void *)v69 + 1) = 0;
            *((void *)v69 + 2) = 0;
            *((void *)v69 + 3) = v69 + 8;
            LOWORD(v113) = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v69 + 8), (uint64_t)v38, (uint64_t)v40, (const char **)&v109, 0, v68, 0);
            (*((void (**)(void **, llvm::Instruction *, void *, uint64_t, char *))*v100 + 2))(v100, v61, v90, v96, v97);
            if (v94)
            {
              uint64_t v73 = (llvm::MDNode **)v93;
              uint64_t v74 = (llvm::MDNode **)((char *)v93 + 16 * v94);
              do
              {
                llvm::Instruction::setMetadata(v61, *(_DWORD *)v73, v73[1]);
                v73 += 2;
              }
              while (v73 != v74);
            }
LABEL_94:
            llvm::Value::doRAUW(v6, v61, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          unint64_t v83 = (unint64_t)(v85 + 8);
        }
        else
        {
          if ((v92[1] & 0x7F) != 2 && !*((_DWORD *)v92 + 3)) {
            goto LABEL_91;
          }
          uint64_t v82 = *((void *)v92 + 2);
          if ((v82 & 4) == 0) {
            goto LABEL_91;
          }
          unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
          if (!v83) {
            goto LABEL_91;
          }
        }
        v90[0] = &v92;
        sub_1CC5FA668(v83 + 16, v90);
        goto LABEL_91;
      }
      int v70 = *(unsigned __int8 *)v90[0];
      if ((v70 - 4) > 0x1E)
      {
        if ((v70 - 3) >= 0xFFFFFFFE) {
          uint64_t v75 = v90[0];
        }
        else {
          uint64_t v75 = 0;
        }
        if ((v70 - 3) < 0xFFFFFFFE)
        {
          if (v70 == 3) {
            *(void *)(v90[0] + 8) = 0;
          }
          goto LABEL_31;
        }
        unint64_t v72 = v75 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v90[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v90[0] + 12)) {
          goto LABEL_31;
        }
        uint64_t v71 = *(void *)(v90[0] + 16);
        if ((v71 & 4) == 0) {
          goto LABEL_31;
        }
        unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFF8;
        if (!v72) {
          goto LABEL_31;
        }
      }
      unint64_t v109 = (unint64_t **)v90;
      sub_1CC5FA668(v72 + 16, &v109);
      goto LABEL_31;
    }
    if (!a3) {
      *(_DWORD *)(a2 + 176) = 0;
    }
  }
  return result;
}

void sub_1CD2E76AC()
{
}

llvm::raw_ostream *sub_1CD2E76C0(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0x19uLL)
  {
    qmemcpy(v4, "While splitting coroutine ", 26);
    *((void *)this + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(this, "While splitting coroutine ", 0x1AuLL);
  }
  uint64_t result = (llvm::raw_ostream *)llvm::Value::printAsOperand(*(llvm::Value **)(a1 + 24), this, 0, *(const llvm::Module **)(*(void *)(a1 + 24) + 40));
  uint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v6)
  {
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    unsigned char *v6 = 10;
    ++*((void *)this + 4);
  }
  return result;
}

uint64_t sub_1CD2E7790(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    if (a1 == a2) {
      return 0;
    }
    int v2 = *(unsigned __int8 *)(a1 + 16);
    if (v2 == 84) {
      break;
    }
    uint64_t v3 = 1;
    if (v2 == 33 || v2 == 39) {
      return v3;
    }
LABEL_10:
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      BOOL v6 = v5 == *(void *)(a1 + 40) + 40;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      a1 = 0;
    }
    else {
      a1 = v5 - 24;
    }
  }
  uint64_t v4 = *(void *)(a1 - 32);
  if (v4 && !*(unsigned char *)(v4 + 16) && *(void *)(v4 + 24) == *(void *)(a1 + 72) && (*(unsigned char *)(v4 + 33) & 0x20) != 0) {
    goto LABEL_10;
  }
  return 1;
}

void sub_1CD2E7814(uint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  v25[3] = *MEMORY[0x1E4F143B8];
  v9[0] = a1;
  v9[1] = 0;
  uint64_t v9[2] = a2;
  void v9[3] = a3;
  int v10 = a4;
  int v13 = 128;
  uint64_t v5 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  uint64_t v6 = 0;
  uint64_t v11 = v5;
  uint64_t v12 = 0;
  do
  {
    size_t v7 = &v5[v6];
    *(void *)&v5[v6 + 8] = 2;
    *((void *)v7 + 2) = 0;
    *((void *)v7 + 3) = -4096;
    *(void *)size_t v7 = &unk_1F2615EC8;
    *((void *)v7 + 4) = 0;
    v6 += 64;
  }
  while (v6 != 0x2000);
  LOBYTE(v14) = 0;
  char v15 = 0;
  uint64_t v8 = **a1;
  uint64_t v16 = v18;
  uint64_t v17 = 0x200000000;
  v18[6] = v8;
  v18[7] = &v24;
  v18[8] = v25;
  v18[9] = 0;
  int v19 = 0;
  __int16 v20 = 512;
  char v21 = 7;
  _DWORD v18[4] = 0;
  v18[5] = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &unk_1F2616E88;
  v25[1] = 0;
  v25[2] = 0;
  v25[0] = &unk_1F2617008;
  sub_1CD2E7BD8((uint64_t)v9);
}

llvm::Instruction *sub_1CD2E7B50(uint64_t *a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v5 = *(void *)(a2 + 208);
  int v10 = "ResumeFn.addr";
  __int16 v11 = 259;
  uint64_t v6 = sub_1CC5812D4(a1, v5, a3, 0, 0, (uint64_t)&v10);
  uint64_t v8 = llvm::ConstantPointerNull::get(**(llvm::ConstantPointerNull ***)(*(void *)(a2 + 208) + 16), v7);
  return sub_1CC27BF8C(a1, (uint64_t)v8, (uint64_t)v6, 0, 0);
}

void sub_1CD2E7BD8(uint64_t a1)
{
  v204[9] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 8)) {
    *(void *)(a1 + 8) = sub_1CD2EB4E4(*(uint64_t ****)a1, *(void *)(a1 + 24), *(uint64_t **)(a1 + 16), (uint64_t *)(*(void *)(*(void *)a1 + 40) + 24), *(void **)(a1 + 248));
  }
  int v196 = &v198;
  uint64_t v197 = 0x600000000;
  int v2 = *(uint64_t ****)a1;
  if (*(unsigned char *)(*(void *)a1 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)a1);
    uint64_t v3 = (llvm::UndefValue **)v2[11];
    if (*((_WORD *)v2 + 9))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v2);
      uint64_t v4 = (llvm::UndefValue **)v2[11];
LABEL_6:
      for (uint64_t i = &v4[5 * (void)v2[12]]; v3 != i; v3 += 5)
      {
        uint64_t v24 = operator new(0x60uLL);
        int v25 = (llvm::FreezeInst *)(v24 + 8);
        v24[13] = v24[13] & 0x38000000 | 1;
        *(void *)uint64_t v24 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
        *((void *)v24 + 3) = v24 + 8;
        uint64_t v27 = llvm::UndefValue::get(*v3, v26);
        LOWORD(v203) = 257;
        llvm::FreezeInst::FreezeInst(v25, v27, (const char **)&v199, 0);
        if (v197 >= (unint64_t)HIDWORD(v197)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v196 + v197) = v25;
        LODWORD(v197) = v197 + 1;
        uint64_t v28 = *((void *)v196 + v197 - 1);
        int v200 = (void *)2;
        uint64_t v201 = 0;
        uint64_t v202 = (int32x2_t ****)v3;
        if (v3 != (llvm::UndefValue **)-8192 && v3 != (llvm::UndefValue **)-4096 && v3) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v200);
        }
        BOOL v199 = &unk_1F2615EC8;
        uint64_t v203 = a1 + 40;
        uint64_t v29 = sub_1CC4CFF80(a1 + 40, &v199);
        if (v202 != (int32x2_t ****)-8192 && v202 != (int32x2_t ****)-4096 && v202)
        {
          unint64_t v30 = (unint64_t)v200 & 0xFFFFFFFFFFFFFFF8;
          *(void *)((unint64_t)v200 & 0xFFFFFFFFFFFFFFF8) = v201;
          if (v201)
          {
            *(void *)uint64_t v201 = *(void *)v201 & 7 | v30;
          }
          else
          {
            BOOL v31 = v202;
            uint64_t v32 = ***v202;
            unint64_t v33 = (unint64_t)v32[303];
            if (v33 <= v30)
            {
              uint64_t v34 = v32[305].u32[0];
              if (v33 + 16 * v34 > v30)
              {
                unsigned int v35 = v34 - 1;
                LODWORD(v36) = v35 & ((v202 >> 4) ^ (v202 >> 9));
                uint64_t v37 = (int32x2_t *****)(v33 + 16 * v36);
                unint64_t v38 = *v37;
                if (v202 != *v37)
                {
                  int v39 = 1;
                  do
                  {
                    if (v38 == (int32x2_t ****)-4096) {
                      goto LABEL_46;
                    }
                    int v40 = v36 + v39++;
                    uint64_t v36 = v40 & v35;
                    unint64_t v38 = *(int32x2_t *****)(v33 + 16 * v36);
                  }
                  while (v202 != v38);
                  uint64_t v37 = (int32x2_t *****)(v33 + 16 * v36);
                }
                const llvm::Instruction *v37 = (int32x2_t ****)-8192;
                v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                BOOL v31 = v202;
LABEL_46:
                *((unsigned char *)v31 + 17) &= ~1u;
              }
            }
          }
        }
        uint64_t v41 = v29[7];
        if (v41 != v28)
        {
          if (v41 && v41 != -8192 && v41 != -4096)
          {
            unint64_t v42 = v29[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v42 = v29[6];
            int v43 = (unint64_t *)v29[6];
            if (v43)
            {
              *int v43 = *v43 & 7 | v42;
            }
            else
            {
              uint64_t v44 = v29[7];
              unsigned int v45 = ***(int32x2_t ****)v44;
              unint64_t v46 = (unint64_t)v45[303];
              if (v46 <= v42)
              {
                uint64_t v47 = v45[305].u32[0];
                if (v46 + 16 * v47 > v42)
                {
                  unsigned int v48 = v47 - 1;
                  LODWORD(v49) = v48 & ((v44 >> 4) ^ (v44 >> 9));
                  uint64_t v50 = (uint64_t *)(v46 + 16 * v49);
                  uint64_t v51 = *v50;
                  if (v44 != *v50)
                  {
                    int v52 = 1;
                    do
                    {
                      if (v51 == -4096) {
                        goto LABEL_67;
                      }
                      int v53 = v49 + v52++;
                      uint64_t v49 = v53 & v48;
                      uint64_t v51 = *(void *)(v46 + 16 * v49);
                    }
                    while (v44 != v51);
                    uint64_t v50 = (uint64_t *)(v46 + 16 * v49);
                  }
                  *uint64_t v50 = -8192;
                  v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v44 = v29[7];
LABEL_67:
                  *(unsigned char *)(v44 + 17) &= ~1u;
                }
              }
            }
          }
          v29[7] = v28;
          if (v28 != -8192 && v28 != -4096 && v28) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v29 + 5));
          }
        }
      }
      uint64_t v6 = *(_DWORD **)(a1 + 24);
      if ((v6[50] - 1) < 2)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        if (*(_WORD *)(v7 + 18))
        {
          llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 8));
          uint64_t v6 = *(_DWORD **)(a1 + 24);
        }
        uint64_t v8 = *(void *)(v7 + 88);
        uint64_t v9 = *(void *)(*(void *)v6 - 32 * (*(_DWORD *)(*(void *)v6 + 20) & 0x7FFFFFF));
        int v10 = *(int32x2_t *****)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 64);
        int v200 = (void *)2;
        uint64_t v201 = 0;
        uint64_t v202 = v10;
        if (v10 != (int32x2_t ****)-8192 && v10 != (int32x2_t ****)-4096 && v10 != 0) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v200);
        }
        BOOL v199 = &unk_1F2615EC8;
        uint64_t v203 = a1 + 40;
        uint64_t v12 = sub_1CC4CFF80(a1 + 40, &v199);
        if (v202 != (int32x2_t ****)-8192 && v202 != (int32x2_t ****)-4096 && v202)
        {
          unint64_t v13 = (unint64_t)v200 & 0xFFFFFFFFFFFFFFF8;
          *(void *)((unint64_t)v200 & 0xFFFFFFFFFFFFFFF8) = v201;
          if (v201)
          {
            *(void *)uint64_t v201 = *(void *)v201 & 7 | v13;
          }
          else
          {
            uint64_t v14 = v202;
            char v15 = ***v202;
            unint64_t v16 = (unint64_t)v15[303];
            if (v16 <= v13)
            {
              uint64_t v17 = v15[305].u32[0];
              if (v16 + 16 * v17 > v13)
              {
                unsigned int v18 = v17 - 1;
                LODWORD(v19) = v18 & ((v202 >> 4) ^ (v202 >> 9));
                __int16 v20 = (int32x2_t *****)(v16 + 16 * v19);
                char v21 = *v20;
                if (v202 != *v20)
                {
                  int v22 = 1;
                  do
                  {
                    if (v21 == (int32x2_t ****)-4096) {
                      goto LABEL_28;
                    }
                    int v23 = v19 + v22++;
                    uint64_t v19 = v23 & v18;
                    char v21 = *(int32x2_t *****)(v16 + 16 * v19);
                  }
                  while (v202 != v21);
                  __int16 v20 = (int32x2_t *****)(v16 + 16 * v19);
                }
                *__int16 v20 = (int32x2_t ****)-8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v14 = v202;
LABEL_28:
                *((unsigned char *)v14 + 17) &= ~1u;
              }
            }
          }
        }
        uint64_t v54 = v12[7];
        if (v54 != v8)
        {
          if (v54 && v54 != -8192 && v54 != -4096)
          {
            unint64_t v95 = v12[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v95 = v12[6];
            uint64_t v96 = (unint64_t *)v12[6];
            if (v96)
            {
              *uint64_t v96 = *v96 & 7 | v95;
            }
            else
            {
              uint64_t v97 = v12[7];
              uint64_t v98 = ***(int32x2_t ****)v97;
              unint64_t v99 = (unint64_t)v98[303];
              if (v99 <= v95)
              {
                uint64_t v100 = v98[305].u32[0];
                if (v99 + 16 * v100 > v95)
                {
                  unsigned int v101 = v100 - 1;
                  LODWORD(v102) = v101 & ((v97 >> 4) ^ (v97 >> 9));
                  __int16 v103 = (uint64_t *)(v99 + 16 * v102);
                  uint64_t v104 = *v103;
                  if (v97 != *v103)
                  {
                    int v105 = 1;
                    do
                    {
                      if (v104 == -4096) {
                        goto LABEL_136;
                      }
                      int v106 = v102 + v105++;
                      uint64_t v102 = v106 & v101;
                      uint64_t v104 = *(void *)(v99 + 16 * v102);
                    }
                    while (v97 != v104);
                    __int16 v103 = (uint64_t *)(v99 + 16 * v102);
                  }
                  uint64_t *v103 = -8192;
                  v98[304] = vadd_s32(v98[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v97 = v12[7];
LABEL_136:
                  *(unsigned char *)(v97 + 17) &= ~1u;
                }
              }
            }
          }
          v12[7] = v8;
          if (v8 != -8192 && v8 != -4096 && v8) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v12 + 5));
          }
        }
      }
      int v193 = &v195;
      uint64_t v194 = 0x400000000;
      BOOL v55 = *(llvm::GlobalValue **)(a1 + 8);
      int v56 = *((_DWORD *)v55 + 8);
      *((_DWORD *)v55 + 8) = v56 & 0xFFFFFFF0;
      if ((v56 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v55) & 1) == 0) {
        *((_DWORD *)v55 + 8) |= 0x4000u;
      }
      int v57 = v56 & 0xF;
      llvm::CloneFunctionInto(*(void *)(a1 + 8), *(void *)a1, a1 + 40, 0, (uint64_t)&v193, "");
      uint64_t v59 = *(void *)(a1 + 8);
      uint64_t v60 = **(uint64_t ***)v59;
      if ((*(unsigned char *)(v59 + 23) & 0x20) == 0) {
        goto LABEL_147;
      }
      uint64_t v61 = *v60;
      BOOL v199 = *(void **)(a1 + 8);
      int v62 = *(_DWORD *)(v61 + 2496);
      if (v62)
      {
        uint64_t v63 = *(void *)(v61 + 2480);
        int v64 = v62 - 1;
        unsigned int v65 = v64 & ((v59 >> 4) ^ (v59 >> 9));
        uint64_t v66 = (void *)(v63 + 40 * v65);
        uint64_t v67 = *v66;
        if (*v66 == v59)
        {
LABEL_91:
          uint64_t v72 = *((unsigned int *)v66 + 4);
          if (v72)
          {
            uint64_t v73 = (unsigned int **)(v66[1] + 8);
            uint64_t v74 = 16 * v72;
            while (*((_DWORD *)v73 - 2))
            {
              v73 += 2;
              v74 -= 16;
              if (!v74) {
                goto LABEL_147;
              }
            }
            uint64_t v75 = *v73;
            if (*v73)
            {
              uint64_t v76 = *(void *)(a1 + 248);
              if (v76)
              {
                uint64_t v77 = *(unsigned __int8 **)(v76 + 48);
                v204[0] = v77;
                if (v77)
                {
                  llvm::MetadataTracking::track((uint64_t)v204, v77, 2);
                  unint64_t v78 = (unsigned __int8 *)v204[0];
                  if (v204[0])
                  {
                    unsigned int v79 = v75;
                    if (*(unsigned char *)v75 != 15) {
                      unsigned int v79 = *(unsigned int **)&v75[-2 * v75[2]];
                    }
                    uint64_t v80 = *(unsigned int **)(v204[0] - 8 * *(unsigned int *)(v204[0] + 8));
                    if (*(unsigned char *)v80 != 15) {
                      uint64_t v80 = *(unsigned int **)&v80[-2 * v80[2]];
                    }
                    if (v79 == v80) {
                      v75[7] = *(_DWORD *)(v204[0] + 4);
                    }
                    int v81 = *v78;
                    if ((v81 - 4) > 0x1E)
                    {
                      if ((v81 - 3) >= 0xFFFFFFFE) {
                        unint64_t v107 = v78;
                      }
                      else {
                        unint64_t v107 = 0;
                      }
                      if ((v81 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v108 = (unint64_t)(v107 + 8);
LABEL_143:
                        BOOL v199 = v204;
                        sub_1CC5FA668(v108 + 16, &v199);
                        goto LABEL_109;
                      }
                      if (v81 == 3) {
                        *((void *)v78 + 1) = 0;
                      }
                    }
                    else if ((v78[1] & 0x7F) == 2 || *((_DWORD *)v78 + 3))
                    {
                      uint64_t v191 = *((void *)v78 + 2);
                      if ((v191 & 4) != 0)
                      {
                        unint64_t v108 = v191 & 0xFFFFFFFFFFFFFFF8;
                        if (v108) {
                          goto LABEL_143;
                        }
                      }
                    }
                  }
                }
              }
LABEL_109:
              uint64_t v82 = &v75[-2 * v75[2]];
              if (!*((void *)v82 + 6))
              {
                uint64_t v83 = *((void *)v82 + 5);
                if (v83)
                {
                  if (*(_DWORD *)(v83 + 24) == 30)
                  {
                    unsigned int v84 = *(uint64_t ****)(a1 + 8);
                    if ((*((unsigned char *)v84 + 23) & 0x10) != 0)
                    {
                      uint64_t v85 = ***v84;
                      uint64_t v86 = *(void *)(v85 + 152);
                      uint64_t v87 = *(unsigned int *)(v85 + 168);
                      if (v87)
                      {
                        LODWORD(v88) = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
                        uint64_t v89 = (uint64_t ****)(v86 + 16 * v88);
                        uint64_t v90 = *v89;
                        if (*v89 != v84)
                        {
                          int v91 = 1;
                          do
                          {
                            if (v90 == (uint64_t ***)-4096) {
                              goto LABEL_144;
                            }
                            int v92 = v88 + v91++;
                            uint64_t v88 = v92 & (v87 - 1);
                            uint64_t v90 = *(uint64_t ****)(v86 + 16 * v88);
                          }
                          while (v90 != v84);
                          uint64_t v89 = (uint64_t ****)(v86 + 16 * v88);
                        }
                      }
                      else
                      {
LABEL_144:
                        uint64_t v89 = (uint64_t ****)(v86 + 16 * v87);
                      }
                      unint64_t v109 = v89[1];
                      size_t v112 = (size_t)*v109;
                      uint64_t v110 = (unsigned __int8 *)(v109 + 2);
                      size_t v111 = v112;
                    }
                    else
                    {
                      size_t v111 = 0;
                      uint64_t v110 = (unsigned __int8 *)&byte_1CFBCE98E;
                    }
                    uint64_t v113 = (llvm::Metadata *)llvm::MDString::get(v60, v110, v111);
                    llvm::MDNode::replaceOperandWith((llvm::MDNode *)v75, 3, v113);
                  }
                }
              }
            }
          }
LABEL_147:
          uint64_t v114 = *(llvm::GlobalValue **)(a1 + 8);
          int v115 = *((_DWORD *)v114 + 8);
          if ((v57 - 7) >= 2) {
            unsigned int v116 = *((_DWORD *)v114 + 8);
          }
          else {
            unsigned int v116 = v115 & 0xFFFFFFC0;
          }
          unsigned int v117 = v116 & 0xFFFFFFF0 | v57;
          *((_DWORD *)v114 + 8) = v117;
          if ((v57 - 7) >= 2)
          {
            if (v115 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v114))
            {
LABEL_152:
              uint64_t v118 = *(llvm::GlobalValue **)(a1 + 8);
              int v119 = *((_DWORD *)v118 + 8);
              unsigned int v120 = v119 & 0xFFFFFFCF | v56 & 0x30;
              *((_DWORD *)v118 + 8) = v120;
              if ((v119 & 0xFu) - 7 >= 2)
              {
                if (v56 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v118))
                {
LABEL_154:
                  *(_DWORD *)(*(void *)(a1 + 8) + 32) = *(_DWORD *)(*(void *)(a1 + 8) + 32) & 0xFFFFFF3F | v56 & 0xC0;
                  *(_DWORD *)(*(void *)(a1 + 8) + 32) = *(_DWORD *)(*(void *)(a1 + 8) + 32) & 0xFFFFFCFF | v56 & 0x300;
                  uint64_t v121 = *(void *)(*(void *)(a1 + 8) + 112);
                  uint64_t v192 = 0;
                  uint64_t v122 = *(void *)(a1 + 24);
                  int v123 = *(_DWORD *)(v122 + 200);
                  if ((v123 - 1) >= 2)
                  {
                    if (v123 == 3)
                    {
                      uint64_t v136 = *(void *)(*(void *)a1 + 112);
                      if (v136)
                      {
                        unsigned int v137 = *(_DWORD *)(v122 + 276) + 2;
                        if (v137 < *(_DWORD *)(v136 + 8))
                        {
                          uint64_t v178 = *(void *)(v136 + 8 * v137 + 40);
                          if (v178)
                          {
                            if ((*(unsigned char *)(v178 + 19) & 0x40) != 0)
                            {
                              uint64_t v179 = *(void *)(*(void *)(a1 + 248)
                                               - 32 * (*(_DWORD *)(*(void *)(a1 + 248) + 20) & 0x7FFFFFF));
                              int v180 = (void *)(v179 + 24);
                              if (*(_DWORD *)(v179 + 32) >= 0x41u) {
                                int v180 = (void *)*v180;
                              }
                              unsigned int v181 = *(_DWORD *)v180;
                              int v182 = *(_DWORD *)v180;
                              BOOL v199 = v60;
                              int v200 = &v202;
                              uint64_t v201 = 0x800000000;
                              unint64_t v183 = llvm::Attribute::get(v60, 0x3Eu, 0);
                              sub_1CC50F4B4((unsigned int *)&v200, 62, v183);
                              uint64_t v192 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v192, (llvm::LLVMContext *)v60, v182 + 1, (const llvm::AttrBuilder *)&v199);
                              if (v200 != &v202) {
                                free(v200);
                              }
                              if (v181 >= 0x100)
                              {
                                BOOL v199 = v60;
                                int v200 = &v202;
                                uint64_t v201 = 0x800000000;
                                unint64_t v184 = llvm::Attribute::get(v60, 0x40u, 0);
                                sub_1CC50F4B4((unsigned int *)&v200, 64, v184);
                                uint64_t v192 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v192, (llvm::LLVMContext *)v60, (v181 >> 8) + 1, (const llvm::AttrBuilder *)&v199);
                                if (v200 != &v202) {
                                  free(v200);
                                }
                              }
                            }
                          }
                        }
                      }
                      uint64_t v138 = *(void *)(*(void *)a1 + 112);
                      if (v138 && *(_DWORD *)(v138 + 8))
                      {
                        uint64_t v139 = *(void *)(v138 + 40);
                        BOOL v199 = v60;
                        int v200 = &v202;
                        uint64_t v201 = 0x800000000;
                        if (v139)
                        {
                          uint64_t v140 = (char *)(v139 + 48);
                          uint64_t v141 = (char *)(v139 + 48 + 8 * *(unsigned int *)(v139 + 8));
                        }
                        else
                        {
                          uint64_t v140 = 0;
                          uint64_t v141 = 0;
                        }
                      }
                      else
                      {
                        uint64_t v140 = 0;
                        uint64_t v141 = 0;
                        BOOL v199 = v60;
                        int v200 = &v202;
                        uint64_t v201 = 0x800000000;
                      }
                      sub_1CC512940((uint64_t)&v200, (uint64_t)&v202, v140, v141);
                      uint64_t v192 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v192, (llvm::LLVMContext *)v60, -1, (const llvm::AttrBuilder *)&v199);
                      if (v200 != &v202) {
                        free(v200);
                      }
                    }
                    else if (!v123)
                    {
                      if (v121 && *(_DWORD *)(v121 + 8))
                      {
                        uint64_t v124 = *(void *)(v121 + 40);
                        BOOL v199 = v60;
                        int v200 = &v202;
                        uint64_t v201 = 0x800000000;
                        if (v124)
                        {
                          unsigned int v125 = (char *)(v124 + 48);
                          unsigned int v126 = (char *)(v124 + 48 + 8 * *(unsigned int *)(v124 + 8));
                        }
                        else
                        {
                          unsigned int v125 = 0;
                          unsigned int v126 = 0;
                        }
                      }
                      else
                      {
                        unsigned int v125 = 0;
                        unsigned int v126 = 0;
                        BOOL v199 = v60;
                        int v200 = &v202;
                        uint64_t v201 = 0x800000000;
                      }
                      sub_1CC512940((uint64_t)&v200, (uint64_t)&v202, v125, v126);
                      uint64_t v192 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v192, (llvm::LLVMContext *)v60, -1, (const llvm::AttrBuilder *)&v199);
                      if (v200 != &v202) {
                        free(v200);
                      }
                      uint64_t v142 = *(void *)(a1 + 24);
                      uint64_t v130 = *(void *)(v142 + 224);
                      unsigned __int8 v135 = *(unsigned char *)(v142 + 216);
LABEL_183:
                      sub_1CD2EB718((llvm::AttributeList *)&v192, v60, v130, v135);
                    }
                    if ((*(_DWORD *)(*(void *)(a1 + 24) + 200) | 2) == 2 && v194)
                    {
                      uint64_t v143 = (llvm **)v193;
                      uint64_t v144 = 8 * v194;
                      do
                      {
                        uint64_t v145 = *v143++;
                        llvm::changeToUnreachable(v145, 0, 0, 0, v58);
                        v144 -= 8;
                      }
                      while (v144);
                    }
                    *(void *)(*(void *)(a1 + 8) + 112) = v192;
                    uint64_t v146 = *(void *)(a1 + 24);
                    int v147 = *(_DWORD *)(v146 + 200);
                    if ((v147 - 1) >= 2)
                    {
                      if (v147) {
                        int v148 = *(_DWORD *)(v146 + 272);
                      }
                      else {
                        LOWORD(v148) = 8;
                      }
                    }
                    else
                    {
                      int v148 = (*(unsigned __int16 *)(*(void *)(v146 + 264) + 18) >> 4) & 0x3FF;
                    }
                    *(_WORD *)(*(void *)(a1 + 8) + 18) = *(_WORD *)(*(void *)(a1 + 8) + 18) & 0xC00F | (16 * v148);
                    uint64_t v149 = *(int32x2_t *****)(v146 + 240);
                    int v200 = (void *)2;
                    uint64_t v201 = 0;
                    uint64_t v202 = v149;
                    if (v149 != (int32x2_t ****)-8192 && v149 != (int32x2_t ****)-4096 && v149 != 0) {
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v200);
                    }
                    BOOL v199 = &unk_1F2615EC8;
                    uint64_t v203 = a1 + 40;
                    int64_t v151 = sub_1CC4CFF80(a1 + 40, &v199);
                    if (v202 != (int32x2_t ****)-8192 && v202 != (int32x2_t ****)-4096 && v202)
                    {
                      unint64_t v152 = (unint64_t)v200 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)((unint64_t)v200 & 0xFFFFFFFFFFFFFFF8) = v201;
                      if (v201)
                      {
                        *(void *)uint64_t v201 = *(void *)v201 & 7 | v152;
                      }
                      else
                      {
                        int64_t v153 = v202;
                        uint64_t v154 = ***v202;
                        unint64_t v155 = (unint64_t)v154[303];
                        if (v155 <= v152)
                        {
                          uint64_t v156 = v154[305].u32[0];
                          if (v155 + 16 * v156 > v152)
                          {
                            unsigned int v157 = v156 - 1;
                            LODWORD(v158) = v157 & ((v202 >> 4) ^ (v202 >> 9));
                            uint64_t v159 = (int32x2_t *****)(v155 + 16 * v158);
                            int v160 = *v159;
                            if (v202 != *v159)
                            {
                              int v161 = 1;
                              do
                              {
                                if (v160 == (int32x2_t ****)-4096) {
                                  goto LABEL_211;
                                }
                                int v162 = v158 + v161++;
                                uint64_t v158 = v162 & v157;
                                int v160 = *(int32x2_t *****)(v155 + 16 * v158);
                              }
                              while (v202 != v160);
                              uint64_t v159 = (int32x2_t *****)(v155 + 16 * v158);
                            }
                            *uint64_t v159 = (int32x2_t ****)-8192;
                            v154[304] = vadd_s32(v154[304], (int32x2_t)0x1FFFFFFFFLL);
                            int64_t v153 = v202;
LABEL_211:
                            *((unsigned char *)v153 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    uint64_t v163 = (uint64_t *)v151[7];
                    uint64_t v164 = *(void *)(a1 + 16);
                    uint64_t v165 = *(void *)(*(void *)(a1 + 8) + 80);
                    if (v165) {
                      uint64_t v166 = v165 - 24;
                    }
                    else {
                      uint64_t v166 = 0;
                    }
                    int v167 = *(unsigned __int8 *)(v164 + 32);
                    if (v167 == 1)
                    {
                      BOOL v199 = "entry";
                      __int16 v168 = 259;
                    }
                    else
                    {
                      if (*(unsigned char *)(v164 + 32))
                      {
                        int v169 = *(int32x2_t *****)(v164 + 8);
                        if (*(unsigned char *)(v164 + 33) == 1) {
                          uint64_t v164 = *(void *)v164;
                        }
                        else {
                          LOBYTE(v167) = 2;
                        }
                        BOOL v199 = "entry";
                        uint64_t v201 = v164;
                        uint64_t v202 = v169;
                        LOBYTE(v203) = 3;
                        BYTE1(v203) = v167;
LABEL_225:
                        llvm::Value::setNameImpl((llvm::Value *)v163, (const char **)&v199);
                        if (v163 && !*((unsigned char *)v163 + 16))
                        {
                          if ((*((unsigned char *)v163 + 23) & 0x10) == 0) {
                            goto LABEL_255;
                          }
                          uint64_t v170 = **(void **)*v163;
                          uint64_t v171 = *(void *)(v170 + 152);
                          uint64_t v172 = *(unsigned int *)(v170 + 168);
                          if (v172)
                          {
                            LODWORD(v173) = (v172 - 1) & ((v163 >> 4) ^ (v163 >> 9));
                            uint64_t v174 = (uint64_t **)(v171 + 16 * v173);
                            uint64_t v175 = *v174;
                            if (*v174 != v163)
                            {
                              int v176 = 1;
                              do
                              {
                                if (v175 == (uint64_t *)-4096) {
                                  goto LABEL_247;
                                }
                                int v177 = v173 + v176++;
                                uint64_t v173 = v177 & (v172 - 1);
                                uint64_t v175 = *(uint64_t **)(v171 + 16 * v173);
                              }
                              while (v175 != v163);
                              uint64_t v174 = (uint64_t **)(v171 + 16 * v173);
                            }
                          }
                          else
                          {
LABEL_247:
                            uint64_t v174 = (uint64_t **)(v171 + 16 * v172);
                          }
                          BOOL v185 = v174[1];
                          unint64_t v188 = *v185;
                          unsigned int v186 = v185 + 2;
                          unint64_t v187 = v188;
                          if (v188 >= 5
                            && (*(_DWORD *)v186 == *(_DWORD *)"llvm." ? (BOOL v189 = v186[4] == aLlvm_1[4]) : (BOOL v189 = 0), v189))
                          {
                            *((_DWORD *)v163 + 8) |= 0x2000u;
                            int v190 = llvm::Function::lookupIntrinsicID(v186, v187);
                          }
                          else
                          {
LABEL_255:
                            int v190 = 0;
                            *((_DWORD *)v163 + 8) &= ~0x2000u;
                          }
                          *((_DWORD *)v163 + 9) = v190;
                        }
                        sub_1CC19E208(*(void *)(v166 + 56) + 72, (uint64_t *)(v166 + 24), v163[7] + 72, v163 + 3);
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                      }
                      __int16 v168 = 256;
                    }
                    LOWORD(v203) = v168;
                    goto LABEL_225;
                  }
                  uint64_t v192 = *(void *)(*(void *)(v122 + 264) + 112);
                  uint64_t v127 = *(void *)(*(void *)v122 - 32 * (*(_DWORD *)(*(void *)v122 + 20) & 0x7FFFFFF));
                  __int16 v128 = (void *)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF));
                  uint64_t v129 = (uint64_t *)(*v128 + 24);
                  if (*(_DWORD *)(*v128 + 32) >= 0x41u) {
                    uint64_t v129 = (uint64_t *)*v129;
                  }
                  uint64_t v130 = *v129;
                  uint64_t v131 = v128[4];
                  unsigned int v132 = (unint64_t *)(v131 + 24);
                  if (*(_DWORD *)(v131 + 32) >= 0x41u) {
                    unsigned int v132 = (unint64_t *)*v132;
                  }
                  unint64_t v133 = *v132;
                  unint64_t v134 = __clz(v133) ^ 0x3F;
                  if (v133) {
                    unsigned __int8 v135 = v134;
                  }
                  else {
                    unsigned __int8 v135 = 0;
                  }
                  goto LABEL_183;
                }
                unsigned int v120 = *((_DWORD *)v118 + 8);
              }
              *((_DWORD *)v118 + 8) = v120 | 0x4000;
              goto LABEL_154;
            }
            unsigned int v117 = *((_DWORD *)v114 + 8);
          }
          *((_DWORD *)v114 + 8) = v117 | 0x4000;
          goto LABEL_152;
        }
        char v68 = 0;
        int v69 = 1;
        while (v67 != -4096)
        {
          if (v68) {
            BOOL v70 = 0;
          }
          else {
            BOOL v70 = v67 == -8192;
          }
          if (v70) {
            char v68 = v66;
          }
          unsigned int v71 = v65 + v69++;
          unsigned int v65 = v71 & v64;
          uint64_t v66 = (void *)(v63 + 40 * v65);
          uint64_t v67 = *v66;
          if (*v66 == v59) {
            goto LABEL_91;
          }
        }
        if (v68) {
          uint64_t v93 = v68;
        }
        else {
          uint64_t v93 = v66;
        }
      }
      else
      {
        uint64_t v93 = 0;
      }
      uint64_t v66 = sub_1CC609054(v61 + 2480, (uint64_t)&v199, (uint64_t *)&v199, v93);
      uint64_t v94 = v199;
      v66[4] = 0;
      v66[3] = 0;
      *uint64_t v66 = v94;
      v66[1] = v66 + 3;
      void v66[2] = 0x100000000;
      goto LABEL_91;
    }
  }
  else
  {
    uint64_t v3 = (llvm::UndefValue **)v2[11];
  }
  uint64_t v4 = v3;
  goto LABEL_6;
}

uint64_t ***sub_1CD2EB4E4(uint64_t ***a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  uint64_t v9 = a1[5];
  if (*(_DWORD *)(a2 + 200) == 3) {
    uint64_t v10 = llvm::FunctionType::get((uint64_t **)(****(void ****)(a5[5] + 56) + 1576), *(void *)(*a5 + 16), *(unsigned int *)(*a5 + 12), 0);
  }
  else {
    uint64_t v10 = sub_1CD8C6D7C(a2);
  }
  __int16 v11 = (llvm::PointerType *)v10;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v12 = ***a1;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      unint64_t v16 = (uint64_t ****)(v13 + 16 * v15);
      uint64_t v17 = *v16;
      if (*v16 == a1)
      {
LABEL_11:
        __int16 v20 = v16[1];
        int v23 = *v20;
        int v22 = (const char *)(v20 + 2);
        char v21 = v23;
        goto LABEL_12;
      }
      int v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        uint64_t v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == a1)
        {
          unint64_t v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_11;
        }
      }
    }
    unint64_t v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_11;
  }
  char v21 = 0;
  int v22 = &byte_1CFBCE98E;
LABEL_12:
  int v24 = *((unsigned __int8 *)a3 + 32);
  if (v24 == 1)
  {
    uint64_t v34 = v22;
    unsigned int v35 = v21;
    __int16 v25 = 261;
    goto LABEL_16;
  }
  if (!*((unsigned char *)a3 + 32))
  {
    __int16 v25 = 256;
LABEL_16:
    __int16 v38 = v25;
    goto LABEL_21;
  }
  uint64_t v26 = a3[1];
  if (*((unsigned char *)a3 + 33) == 1)
  {
    uint64_t v27 = (uint64_t *)*a3;
  }
  else
  {
    LOBYTE(v24) = 2;
    uint64_t v27 = a3;
  }
  uint64_t v34 = v22;
  unsigned int v35 = v21;
  uint64_t v36 = v27;
  uint64_t v37 = v26;
  LOBYTE(v38) = 5;
  HIBYTE(v38) = v24;
LABEL_21:
  uint64_t v28 = (char *)operator new(0x80uLL);
  uint64_t v29 = (uint64_t ***)(v28 + 8);
  *((_DWORD *)v28 + 7) = *((_DWORD *)v28 + 7) & 0x38000000 | 0x40000000;
  *(void *)uint64_t v28 = 0;
  llvm::Function::Function((unint64_t *)v28 + 1, v11, 7, (llvm::Type *)0xFFFFFFFFLL, &v34, 0);
  if (*(_DWORD *)(a2 + 200) != 3)
  {
    *((void *)v28 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v28 + 15, **((uint64_t ***)v28 + 1), 1, 39);
    if (*(_DWORD *)(a2 + 200) != 3) {
      *((void *)v28 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v28 + 15, **v29, 1, 19);
    }
  }
  *((void *)v28 + 6) = v9;
  if ((v28[31] & 0x10) != 0)
  {
    unint64_t v30 = (llvm::ValueSymbolTable *)v9[14];
    if (v30) {
      llvm::ValueSymbolTable::reinsertValue(v30, (llvm::Value *)v29);
    }
  }
  uint64_t v31 = *a4;
  *((void *)v28 + 8) = *a4;
  *((void *)v28 + 9) = a4;
  uint64_t v32 = v28 + 64;
  *(void *)(v31 + 8) = v32;
  *a4 = (uint64_t)v32;
  return v29;
}

void sub_1CD2EB718(llvm::AttributeList *a1, uint64_t *a2, uint64_t a3, unsigned __int8 a4)
{
  v12[8] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  unint64_t v8 = llvm::Attribute::get(a2, 0x27u, 0);
  sub_1CC50F4B4((unsigned int *)v11, 39, v8);
  unint64_t v9 = llvm::Attribute::get(v10, 0x13u, 0);
  sub_1CC50F4B4((unsigned int *)v11, 19, v9);
  llvm::AttrBuilder::addAlignmentAttr((uint64_t)&v10, a4 | 0x100);
  llvm::AttrBuilder::addDereferenceableAttr((llvm::AttrBuilder *)&v10, a3);
  *(void *)a1 = llvm::AttributeList::addAttributesAtIndex(a1, (llvm::LLVMContext *)a2, 1, (const llvm::AttrBuilder *)&v10);
  if (v11[0] != v12) {
    free(v11[0]);
  }
}

void sub_1CD2EB828(uint64_t **a1, uint64_t a2, const llvm::APInt *a3, int a4, char *a5)
{
  v150[1] = *MEMORY[0x1E4F143B8];
  unsigned int v10 = llvm::Constant::isOneValue((llvm::Constant *)a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4]);
  __int16 v11 = 0;
  if (v10)
  {
    uint64_t v12 = **a1;
    uint64_t v13 = (void **)v124;
    uint64_t v122 = (void **)v124;
    uint64_t v123 = 0x200000000;
    v129[0] = v12;
    v129[1] = &v133;
    v129[2] = v134;
    v129[3] = 0;
    LODWORD(v130) = 0;
    WORD2(v130) = 512;
    BYTE6(v130) = 7;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    unint64_t v133 = &unk_1F2616E88;
    v134[0] = &unk_1F2617008;
    uint64_t v14 = a1[6];
    uint64_t v127 = a1[5];
    uint64_t v128 = (uint64_t)(a1 + 3);
    v107[0] = v14;
    if (v14)
    {
      llvm::MetadataTracking::track((uint64_t)v107, (unsigned __int8 *)v14, 2);
      __int16 v11 = v107[0];
    }
    sub_1CB8461A4((uint64_t)&v122, 0, (uint64_t)v11);
    if (!v107[0])
    {
LABEL_5:
      int v15 = *(_DWORD *)(a2 + 200);
      if ((v15 - 1) >= 2)
      {
        if (!v15)
        {
          sub_1CD2E7B50((uint64_t *)&v122, a2, a3);
          if ((a4 & 1) == 0)
          {
LABEL_17:
            int v24 = v122;
LABEL_28:
            if (v24 != v13) {
              free(v24);
            }
            uint64_t v25 = *(void *)**a1;
            if (a4)
            {
              uint64_t v26 = *(llvm::Value **)(v25 + 1560);
              if (!v26)
              {
                uint64_t v27 = *(llvm::ConstantInt **)(v25 + 1888);
                unsigned int v28 = *(_DWORD *)(v25 + 1896);
                LODWORD(v123) = v28 >> 8;
                if (v28 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v28 <= 0xFF) {
                  LOBYTE(v29) = 0;
                }
                else {
                  unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
                }
                uint64_t v122 = (void **)(v29 & 1);
                uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v122, v19);
                if (v123 >= 0x41)
                {
                  if (v122) {
                    MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
                  }
                }
                *(void *)(v25 + 1560) = v26;
              }
            }
            else
            {
              uint64_t v26 = *(llvm::Value **)(v25 + 1568);
              if (!v26)
              {
                uint64_t v37 = *(llvm::ConstantInt **)(v25 + 1888);
                unsigned int v38 = *(_DWORD *)(v25 + 1896);
                LODWORD(v123) = v38 >> 8;
                if (v38 >> 8 > 0x40) {
                  operator new[]();
                }
                uint64_t v122 = 0;
                uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v122, v19);
                if (v123 >= 0x41 && v122) {
                  MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
                }
                *(void *)(v25 + 1568) = v26;
              }
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, v26, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
        }
      }
      else if (!*(unsigned char *)(a2 + 296))
      {
        sub_1CD8C5034(a2, (uint64_t *)&v122, (uint64_t)a3, a5);
      }
      sub_1CC233A58((char *)a1, 1, (uint64_t *)v107);
      if (v108[8])
      {
        LLVMBuildCleanupRet_0((uint64_t *)&v122, *(llvm::Value **)v107[0], 0);
        uint64_t v36 = (uint64_t)a1[5];
        v137[8] = 257;
        llvm::BasicBlock::splitBasicBlock(v36, (uint64_t)(a1 + 3), (uint64_t)v136, 0);
      }
      goto LABEL_17;
    }
    int v30 = *(unsigned __int8 *)v107[0];
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        int v39 = v107[0];
      }
      else {
        int v39 = 0;
      }
      if ((v30 - 3) < 0xFFFFFFFE)
      {
        if (v30 == 3) {
          *((void *)v107[0] + 1) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v32 = (unint64_t)v39 + 8;
    }
    else
    {
      if ((*((unsigned char *)v107[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v107[0] + 3)) {
        goto LABEL_5;
      }
      uint64_t v31 = *((void *)v107[0] + 2);
      if ((v31 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v32) {
        goto LABEL_5;
      }
    }
    v136[0] = v107;
    sub_1CC5FA668(v32 + 16, v136);
    goto LABEL_5;
  }
  uint64_t v16 = **a1;
  uint64_t v13 = (void **)v108;
  v107[0] = v108;
  v107[1] = (void *)0x200000000;
  uint64_t v111 = v16;
  size_t v112 = &v120;
  uint64_t v113 = &v121;
  uint64_t v114 = 0;
  int v115 = 0;
  __int16 v116 = 512;
  char v117 = 7;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  unsigned int v120 = &unk_1F2616E88;
  uint64_t v121 = &unk_1F2617008;
  uint64_t v17 = (uint64_t *)(a1 + 3);
  int v18 = a1[6];
  unint64_t v109 = a1[5];
  uint64_t v110 = (void ***)(a1 + 3);
  v136[0] = v18;
  if (v18)
  {
    llvm::MetadataTracking::track((uint64_t)v136, (unsigned __int8 *)v18, 2);
    __int16 v11 = v136[0];
  }
  sub_1CB8461A4((uint64_t)v107, 0, (uint64_t)v11);
  if (!v136[0]) {
    goto LABEL_11;
  }
  int v33 = *(unsigned __int8 *)v136[0];
  if ((v33 - 4) > 0x1E)
  {
    if ((v33 - 3) >= 0xFFFFFFFE) {
      int v40 = v136[0];
    }
    else {
      int v40 = 0;
    }
    if ((v33 - 3) < 0xFFFFFFFE)
    {
      if (v33 == 3) {
        *((void *)v136[0] + 1) = 0;
      }
      goto LABEL_11;
    }
    unint64_t v35 = (unint64_t)v40 + 8;
  }
  else
  {
    if ((*((unsigned char *)v136[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v136[0] + 3)) {
      goto LABEL_11;
    }
    uint64_t v34 = *((void *)v136[0] + 2);
    if ((v34 & 4) == 0) {
      goto LABEL_11;
    }
    unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
    if (!v35) {
      goto LABEL_11;
    }
  }
  uint64_t v122 = v136;
  sub_1CC5FA668(v35 + 16, &v122);
LABEL_11:
  switch(*(_DWORD *)(a2 + 200))
  {
    case 0:
      if (a4) {
        goto LABEL_26;
      }
      int v24 = (void **)v107[0];
      goto LABEL_28;
    case 1:
      if (!*(unsigned char *)(a2 + 296)) {
        sub_1CD8C5034(a2, (uint64_t *)v107, (uint64_t)a3, a5);
      }
      uint64_t v42 = **(void **)(sub_1CD8C6D7C(a2) + 16);
      if (v42 && *(unsigned char *)(v42 + 8) == 16)
      {
        int v43 = llvm::ConstantPointerNull::get(**(llvm::ConstantPointerNull ***)(v42 + 16), v41);
        unsigned int v45 = llvm::UndefValue::get((llvm::UndefValue *)v42, v44);
        LODWORD(v136[0]) = 0;
        LOWORD(v125) = 257;
        unint64_t v46 = sub_1CC2411F8((uint64_t)v107, (uint64_t)v45, (uint64_t)v43, v136, 1, (uint64_t)&v122);
      }
      else
      {
        unint64_t v46 = (llvm::Value *)llvm::ConstantPointerNull::get((llvm::ConstantPointerNull *)v42, v41);
      }
      sub_1CC57CCA8((uint64_t *)v107, v46);
      goto LABEL_27;
    case 2:
      if (!*(unsigned char *)(a2 + 296)) {
        sub_1CD8C5034(a2, (uint64_t *)v107, (uint64_t)a3, a5);
      }
LABEL_26:
      LLVMBuildRetVoid_0((uint64_t *)v107);
      goto LABEL_27;
    case 3:
      uint64_t v20 = 0;
      uint64_t v21 = **a1;
      v136[0] = v137;
      v136[1] = (void *)0x200000000;
      uint64_t v140 = v21;
      uint64_t v141 = &v149;
      uint64_t v142 = v150;
      uint64_t v143 = 0;
      int v144 = 0;
      __int16 v145 = 512;
      char v146 = 7;
      uint64_t v147 = 0;
      uint64_t v148 = 0;
      uint64_t v149 = &unk_1F2616E88;
      v150[0] = &unk_1F2617008;
      int v22 = (unsigned __int8 *)a1[6];
      uint64_t v138 = a1[5];
      uint64_t v139 = (void ***)(a1 + 3);
      v105[0] = v22;
      if (v22)
      {
        llvm::MetadataTracking::track((uint64_t)v105, v22, 2);
        uint64_t v20 = v105[0];
      }
      sub_1CB8461A4((uint64_t)v136, 0, v20);
      if (!v105[0]) {
        goto LABEL_21;
      }
      int v66 = *(unsigned __int8 *)v105[0];
      if ((v66 - 4) > 0x1E)
      {
        if ((v66 - 3) >= 0xFFFFFFFE) {
          uint64_t v69 = v105[0];
        }
        else {
          uint64_t v69 = 0;
        }
        if ((v66 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v68 = v69 + 8;
LABEL_120:
          uint64_t v122 = (void **)v105;
          sub_1CC5FA668(v68 + 16, &v122);
          goto LABEL_21;
        }
        if (v66 == 3) {
          *(void *)(v105[0] + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v105[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v105[0] + 12))
      {
        uint64_t v67 = *(void *)(v105[0] + 16);
        if ((v67 & 4) != 0)
        {
          unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
          if (v68) {
            goto LABEL_120;
          }
        }
      }
LABEL_21:
      if (*((_DWORD *)*(a1 - 4) + 9) != 33 || !sub_1CD8C50E4((uint64_t)a1))
      {
        LLVMBuildRetVoid_0((uint64_t *)v136);
        if (v136[0] != v137) {
          free(v136[0]);
        }
LABEL_27:
        uint64_t v23 = (uint64_t)a1[5];
        LOWORD(v125) = 257;
        llvm::BasicBlock::splitBasicBlock(v23, (uint64_t)(a1 + 3), (uint64_t)&v122, 0);
      }
      uint64_t v47 = (llvm::BasicBlock *)a1[5];
      uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v47);
      uint64_t v49 = *(void *)(SinglePredecessor + 40);
      if (v49) {
        uint64_t v50 = v49 - 24;
      }
      else {
        uint64_t v50 = 0;
      }
      if (*(unsigned __int8 *)(v50 + 16) - 29 >= 0xB) {
        uint64_t v50 = 0;
      }
      uint64_t v51 = *(void *)(v50 + 24);
      if (v51) {
        uint64_t v52 = v51 - 24;
      }
      else {
        uint64_t v52 = 0;
      }
      int v53 = (uint64_t *)(v52 + 24);
      if (v51) {
        uint64_t v54 = (uint64_t *)(v52 + 24);
      }
      else {
        uint64_t v54 = 0;
      }
      if (v17 != v54)
      {
        BOOL v55 = (uint64_t *)v54[1];
        if (v55 != v17)
        {
          *((_WORD *)v47 + 9) &= ~0x8000u;
          if (v47 != (llvm::BasicBlock *)SinglePredecessor)
          {
            int v56 = (void *)*((void *)v47 + 7);
            if (v56) {
              int v57 = (llvm::ValueSymbolTable *)v56[13];
            }
            else {
              int v57 = 0;
            }
            uint64_t v58 = *(llvm::ValueSymbolTable **)(SinglePredecessor + 56);
            if (v58) {
              uint64_t v58 = (llvm::ValueSymbolTable *)*((void *)v58 + 13);
            }
            if (v57 == v58)
            {
              if (v54 != v55)
              {
                do
                {
                  uint64_t v59 = v53 - 3;
                  if (!v53) {
                    uint64_t v59 = 0;
                  }
                  v59[5] = (uint64_t)v47;
                  int v53 = (uint64_t *)v53[1];
                }
                while (v53 != v55);
              }
            }
            else
            {
              unint64_t v99 = v58;
              if (v54 != v55)
              {
                unint64_t v95 = v54;
                uint64_t v94 = v55;
                do
                {
                  uint64_t v74 = (llvm::Value *)(v53 - 3);
                  uint64_t v96 = v53;
                  if (!v53) {
                    uint64_t v74 = 0;
                  }
                  uint64_t v102 = v74;
                  int v98 = *((_DWORD *)v74 + 5) & 0x10000000;
                  if (v99 && v98)
                  {
                    uint64_t v75 = ***(void ***)v74;
                    uint64_t v76 = *(void *)(v75 + 152);
                    uint64_t v77 = *(unsigned int *)(v75 + 168);
                    if (v77)
                    {
                      LODWORD(v78) = (v77 - 1) & ((v102 >> 4) ^ (v102 >> 9));
                      unsigned int v79 = (llvm::Value **)(v76 + 16 * v78);
                      uint64_t v80 = *v79;
                      if (*v79 != v102)
                      {
                        int v81 = 1;
                        do
                        {
                          if (v80 == (llvm::Value *)-4096) {
                            goto LABEL_157;
                          }
                          int v82 = v78 + v81++;
                          uint64_t v78 = v82 & (v77 - 1);
                          uint64_t v80 = *(llvm::Value **)(v76 + 16 * v78);
                        }
                        while (v80 != v102);
                        unsigned int v79 = (llvm::Value **)(v76 + 16 * v78);
                      }
                    }
                    else
                    {
LABEL_157:
                      unsigned int v79 = (llvm::Value **)(v76 + 16 * v77);
                    }
                    uint64_t v83 = *((unsigned int *)v99 + 2);
                    if (v83)
                    {
                      unsigned int v84 = (size_t *)v79[1];
                      uint64_t v97 = *((unsigned int *)v99 + 5);
                      __s1 = (char *)v84 + v97;
                      __uint64_t n = *v84;
                      int v85 = 0;
                      if (*v84)
                      {
                        size_t v86 = *v84;
                        uint64_t v87 = (unsigned __int8 *)v84 + v97;
                        do
                        {
                          int v88 = *v87++;
                          int v85 = 33 * v85 + v88;
                          --v86;
                        }
                        while (v86);
                      }
                      unsigned int v103 = v83 - 1;
                      uint64_t v89 = *(void *)v99;
                      uint64_t v101 = *(void *)v99 + 8 * v83 + 8;
                      int v90 = 1;
                      int v91 = v85;
                      while (1)
                      {
                        uint64_t v92 = v91 & v103;
                        uint64_t v93 = *(void **)(v89 + 8 * v92);
                        if (v93 != (void *)-8)
                        {
                          if (!v93) {
                            goto LABEL_171;
                          }
                          if (*(_DWORD *)(v101 + 4 * v92) == v85
                            && __n == *v93
                            && (!__n || !memcmp(__s1, (char *)v93 + v97, __n)))
                          {
                            break;
                          }
                        }
                        int v91 = v90 + v92;
                        ++v90;
                      }
                      *(void *)(v89 + 8 * (int)v92) = -8;
                      *(int32x2_t *)((char *)v99 + 12) = vadd_s32(*(int32x2_t *)((char *)v99 + 12), (int32x2_t)0x1FFFFFFFFLL);
                    }
                  }
LABEL_171:
                  *((void *)v102 + 5) = v47;
                  if (v57 && v98) {
                    llvm::ValueSymbolTable::reinsertValue(v57, v102);
                  }
                  uint64_t v54 = v95;
                  int v53 = (uint64_t *)v96[1];
                  BOOL v55 = v94;
                }
                while (v53 != v94);
              }
            }
          }
          if (v55 != v54)
          {
            uint64_t v60 = *v55;
            uint64_t v61 = *v54;
            *(void *)(v61 + 8) = v55;
            *BOOL v55 = v61;
            uint64_t v62 = *v17;
            *(void *)(v60 + 8) = v17;
            uint64_t *v54 = v62;
            *(void *)(v62 + 8) = v54;
            uint64_t *v17 = v60;
          }
        }
      }
      uint64_t v63 = (unsigned __int8 *)a1[6];
      uint64_t v138 = a1[5];
      uint64_t v139 = (void ***)(a1 + 3);
      v105[0] = v63;
      if (v63)
      {
        llvm::MetadataTracking::track((uint64_t)v105, v63, 2);
        uint64_t v64 = v105[0];
      }
      else
      {
        uint64_t v64 = 0;
      }
      sub_1CB8461A4((uint64_t)v136, 0, v64);
      if (!v105[0])
      {
LABEL_102:
        LLVMBuildRetVoid_0((uint64_t *)v136);
        uint64_t v122 = 0;
        uint64_t v123 = 0;
        v124[1] = 0;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        uint64_t v127 = v129;
        uint64_t v128 = 0x400000000;
        uint64_t v130 = &v132;
        uint64_t v131 = 0x800000000;
        v134[22] = v135;
        v134[23] = 0x800000000;
        v135[64] = 1;
        uint64_t v65 = (uint64_t)a1[5];
        __int16 v106 = 257;
        llvm::BasicBlock::splitBasicBlock(v65, (uint64_t)(a1 + 3), (uint64_t)v105, 0);
      }
      int v70 = *(unsigned __int8 *)v105[0];
      if ((v70 - 4) > 0x1E)
      {
        if ((v70 - 3) >= 0xFFFFFFFE) {
          uint64_t v73 = v105[0];
        }
        else {
          uint64_t v73 = 0;
        }
        if ((v70 - 3) < 0xFFFFFFFE)
        {
          if (v70 == 3) {
            *(void *)(v105[0] + 8) = 0;
          }
          goto LABEL_102;
        }
        unint64_t v72 = v73 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v105[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v105[0] + 12)) {
          goto LABEL_102;
        }
        uint64_t v71 = *(void *)(v105[0] + 16);
        if ((v71 & 4) == 0) {
          goto LABEL_102;
        }
        unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFF8;
        if (!v72) {
          goto LABEL_102;
        }
      }
      uint64_t v122 = (void **)v105;
      sub_1CC5FA668(v72 + 16, &v122);
      goto LABEL_102;
    default:
      goto LABEL_27;
  }
}

void *sub_1CD2EC5C8(void *result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 40) != a2 + 40)
  {
    uint64_t v3 = *(void *)(a2 + 48);
    uint64_t v4 = v3 - 24;
    uint64_t v5 = v3 ? v3 - 24 : 0;
    if (v3 && *(unsigned char *)(v5 + 16) == 83)
    {
      uint64_t v7 = (uint64_t)result;
      do
      {
        uint64_t v8 = sub_1CBF73380(v4, v7);
        uint64_t v11 = v8;
        uint64_t v12 = 0;
        if (sub_1CBA0E618(a3, &v11, &v12) && v12 != *(void *)a3 + 16 * *(unsigned int *)(a3 + 16)) {
          uint64_t v8 = *(void *)(v12 + 8);
        }
        uint64_t v12 = v4;
        uint64_t result = sub_1CC080DE0((uint64_t *)a3, &v12);
        result[1] = v8;
        uint64_t v9 = *(void *)(v4 + 32);
        uint64_t v4 = v9 - 24;
        if (v9) {
          uint64_t v10 = v9 - 24;
        }
        else {
          uint64_t v10 = 0;
        }
      }
      while (v9 && *(unsigned char *)(v10 + 16) == 83);
    }
  }
  return result;
}

uint64_t sub_1CD2EC6A4(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  if (*(_DWORD *)(a4 + 200) == 3) {
    int v9 = 4;
  }
  else {
    int v9 = 3;
  }
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 56) = 128;
  uint64_t v10 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 56);
  if (v11)
  {
    uint64_t v12 = v11 << 6;
    uint64_t v13 = v10 + 16;
    do
    {
      *(v13 - 1) = 2;
      *uint64_t v13 = 0;
      v13[1] = -4096;
      v13[2] = 0;
      *(v13 - 2) = &unk_1F2615EC8;
      v13 += 8;
      v10 += 64;
      v12 -= 64;
    }
    while (v12);
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v14 = **a2;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x200000000;
  *(void *)(a1 + 168) = v14;
  *(void *)(a1 + 176) = a1 + 224;
  *(void *)(a1 + 184) = a1 + 232;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 204) = 512;
  *(unsigned char *)(a1 + 206) = 7;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = &unk_1F2616E88;
  *(void *)(a1 + 232) = &unk_1F2617008;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a6;
  return a1;
}

void sub_1CD2EC7E4()
{
}

void sub_1CD2EC828(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD2EC860()
{
  return "Coroutine Splitting";
}

uint64_t sub_1CD2EC874(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  v5[0] = xmmword_1E685A998;
  v5[1] = *(_OWORD *)&off_1E685A9A8;
  void v5[2] = xmmword_1E685A9B8;
  *(unsigned char *)(a1 + 28) = sub_1CD2C7004(v3, (uint64_t)v5, 3);
  return 0;
}

uint64_t sub_1CD2EC8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v101[2] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 28))
  {
    LOBYTE(v28) = 0;
    return v28 & 1;
  }
  unint64_t v99 = v101;
  uint64_t v100 = 0x200000000;
  uint64_t v3 = **(void **)a2;
  sub_1CD2E08F0(*(void *)(v3 + 112), (uint64_t)&v99, "llvm.coro.prepare.retcon", 0x18uLL);
  sub_1CD2E08F0(*(void *)(v3 + 112), (uint64_t)&v99, "llvm.coro.prepare.async", 0x17uLL);
  uint64_t v96 = (unint64_t *)v98;
  uint64_t v97 = 0x400000000;
  uint64_t v86 = a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v9 = a2 + 16;
  if (v10 == v11) {
    goto LABEL_39;
  }
  uint64_t v4 = 0x7A48DC6FE7EA5090;
  uint64_t v5 = &llvm::hashing::detail::fixed_seed_override;
  uint64_t v6 = 0x6E6974756F726F63;
  uint64_t v7 = 0x6C70736572702E65;
  uint64_t v8 = 29801;
  do
  {
    unint64_t v12 = *(void *)(*(void *)v10 + 8);
    if (!v12) {
      goto LABEL_29;
    }
    uint64_t v13 = *(void *)(v12 + 112);
    if (!v13) {
      goto LABEL_29;
    }
    if (!*(_DWORD *)(v13 + 8)) {
      goto LABEL_29;
    }
    uint64_t v14 = *(void *)(v13 + 40);
    if (!v14) {
      goto LABEL_29;
    }
    int v15 = *(_DWORD *)(v14 + 40);
    if (!v15) {
      goto LABEL_29;
    }
    uint64_t v16 = *(void *)(v14 + 24);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      *(void *)unsigned int v84 = v9;
      int v26 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v8 = 29801;
      uint64_t v7 = 0x6C70736572702E65;
      uint64_t v6 = 0x6E6974756F726F63;
      uint64_t v5 = &llvm::hashing::detail::fixed_seed_override;
      uint64_t v4 = 0x7A48DC6FE7EA5090;
      uint64_t v9 = *(void *)v84;
      if (v26)
      {
        unint64_t v27 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v27 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v27;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v8 = 29801;
        uint64_t v7 = 0x6C70736572702E65;
        uint64_t v6 = 0x6E6974756F726F63;
        uint64_t v5 = &llvm::hashing::detail::fixed_seed_override;
        uint64_t v4 = 0x7A48DC6FE7EA5090;
        uint64_t v9 = *(void *)v84;
      }
    }
    uint64_t v17 = __ROR8__(qword_1EBCBE580 ^ 0x7A48DC6FE7EA5090, 30);
    unint64_t v18 = 0x9DDFEA08EB382D69
        * ((qword_1EBCBE580 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                      * ((v17 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580
                                                                                       - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v17 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580 - 0x2D69957673248ED7))));
    unsigned int v19 = -348639895 * ((v18 >> 47) ^ v18);
    for (int i = 1; ; ++i)
    {
      unsigned int v21 = v19 & (v15 - 1);
      int v22 = (uint64_t *)(v16 + 24 * v21);
      uint64_t v23 = *v22;
      if (*v22 == -1)
      {
        if ("coroutine.presplit" == (char *)-1) {
          goto LABEL_27;
        }
        goto LABEL_13;
      }
      if (v23 != -2) {
        break;
      }
      if ("coroutine.presplit" == (char *)-2) {
        goto LABEL_27;
      }
LABEL_13:
      if (v23 == -1) {
        goto LABEL_29;
      }
      unsigned int v19 = i + v21;
    }
    if (v22[1] != 18) {
      goto LABEL_13;
    }
    BOOL v24 = *(void *)v23 == 0x6E6974756F726F63 && *(void *)(v23 + 8) == 0x6C70736572702E65;
    if (!v24 || *(_WORD *)(v23 + 16) != 29801) {
      goto LABEL_13;
    }
LABEL_27:
    if (v97 >= (unint64_t)HIDWORD(v97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v96[v97] = v12;
    LODWORD(v97) = v97 + 1;
LABEL_29:
    v10 += 8;
  }
  while (v10 != v11);
  if (!v97)
  {
LABEL_39:
    if (v100) {
      goto LABEL_41;
    }
LABEL_40:
    LOBYTE(v28) = 0;
    goto LABEL_119;
  }
LABEL_41:
  unint64_t v29 = *(uint64_t **)(a1 + 8);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  if (v30 == v31)
  {
LABEL_44:
    uint64_t v32 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v30 != &llvm::CallGraphWrapperPass::ID)
    {
      v30 += 16;
      if (v30 == v31) {
        goto LABEL_44;
      }
    }
    uint64_t v32 = *(void *)(v30 + 8);
  }
  int v33 = *(char **)((*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 96))(v32, &llvm::CallGraphWrapperPass::ID, v4, v5, v6, v7, v8)+ 32);
  if (v97)
  {
    int v82 = *(uint64_t ***)v33;
    uint64_t v34 = *(uint64_t **)(*(void *)v33 + 112);
    unsigned int v35 = *((_DWORD *)v34 + 8);
    if (v35 <= 1) {
      uint64_t v36 = 1;
    }
    else {
      uint64_t v36 = v35;
    }
    if (v35 <= 0x12) {
      size_t v37 = v36;
    }
    else {
      size_t v37 = 19;
    }
    uint64_t v83 = *((unsigned int *)v34 + 2);
    if (!v83) {
      goto LABEL_70;
    }
    uint64_t v38 = 0;
    int v39 = 0;
    do
      int v39 = 33 * v39 + aCoroDevirtTrig[v38++];
    while (v37 != v38);
    uint64_t v40 = *v34;
    uint64_t v41 = *v34 + 8 * v83 + 8;
    int v42 = 1;
    int v43 = v39;
    while (1)
    {
      uint64_t v44 = v43 & (v83 - 1);
      unsigned int v45 = *(void **)(v40 + 8 * v44);
      if (v45 != (void *)-8)
      {
        if (!v45) {
          goto LABEL_70;
        }
        if (*(_DWORD *)(v41 + 4 * v44) == v39
          && v37 == *v45
          && !memcmp("coro.devirt.trigger", (char *)v45 + *((unsigned int *)v34 + 5), v37))
        {
          break;
        }
      }
      int v43 = v42 + v44;
      ++v42;
    }
    if (v44 == -1
      || (int)v44 == v83
      || (uint64_t v49 = *(void *)(*(void *)(v40 + 8 * (int)v44) + 8)) == 0
      || *(unsigned char *)(v49 + 16))
    {
LABEL_70:
      uint64_t v50 = **v82;
      uint64_t v51 = (uint64_t **)(v50 + 1576);
      __src[0] = (void *)llvm::PointerType::get((llvm::PointerType *)(v50 + 1912), 0);
      uint64_t v52 = (llvm::PointerType *)llvm::FunctionType::get(v51, (uint64_t)__src, 1, 0);
      __src[0] = "coro.devirt.trigger";
      __int16 v90 = 259;
      int v53 = operator new(0x80uLL);
      *((_DWORD *)v53 + 7) = *((_DWORD *)v53 + 7) & 0x38000000 | 0x40000000;
      *(void *)int v53 = 0;
      llvm::Function::Function((unint64_t *)v53 + 1, v52, 8, (llvm::Type *)0xFFFFFFFFLL, (const char **)__src, (unint64_t)v82);
      *((void *)v53 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v53 + 15, **((uint64_t ***)v53 + 1), -1, 2);
      __src[0] = "entry";
      __int16 v90 = 259;
      operator new();
    }
    uint64_t v54 = v96;
    BOOL v55 = (char *)&v96[v97];
LABEL_72:
    unint64_t v56 = *v54;
    int v57 = (uint64_t *)(*v54 + 112);
    uint64_t v58 = *v57;
    if (!*v57) {
      goto LABEL_99;
    }
    if (!*(_DWORD *)(v58 + 8)) {
      goto LABEL_99;
    }
    uint64_t v59 = *(void *)(v58 + 40);
    if (!v59) {
      goto LABEL_99;
    }
    int v60 = *(_DWORD *)(v59 + 40);
    if (!v60) {
      goto LABEL_99;
    }
    uint64_t v61 = *(void *)(v59 + 24);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      int v85 = v57;
      int v76 = __cxa_guard_acquire(&qword_1EBCBE588);
      int v57 = v85;
      if (v76)
      {
        unint64_t v77 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v77 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v77;
        __cxa_guard_release(&qword_1EBCBE588);
        int v57 = v85;
      }
    }
    uint64_t v62 = __ROR8__(qword_1EBCBE580 ^ 0x7A48DC6FE7EA5090, 30);
    unint64_t v63 = 0x9DDFEA08EB382D69
        * ((qword_1EBCBE580 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                      * ((v62 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580
                                                                                       - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v62 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580 - 0x2D69957673248ED7))));
    unsigned int v64 = -348639895 * ((v63 >> 47) ^ v63);
    for (int j = 1; ; ++j)
    {
      unsigned int v66 = v64 & (v60 - 1);
      uint64_t v67 = (uint64_t *)(v61 + 24 * v66);
      uint64_t v68 = *v67;
      if (*v67 == -1)
      {
        if ("coroutine.presplit" == (char *)-1) {
          goto LABEL_94;
        }
      }
      else if (v68 == -2)
      {
        if ("coroutine.presplit" == (char *)-2) {
          goto LABEL_94;
        }
      }
      else if (v67[1] == 18)
      {
        BOOL v69 = *(void *)v68 == 0x6E6974756F726F63 && *(void *)(v68 + 8) == 0x6C70736572702E65;
        if (v69 && *(_WORD *)(v68 + 16) == 29801)
        {
LABEL_94:
          uint64_t v71 = v67[2];
          if (!v71 || *(_DWORD *)(v71 + 16) != 1) {
            goto LABEL_99;
          }
          int v72 = *(unsigned __int8 *)(v71 + *(unsigned int *)(v71 + 12) + 25);
          if (v72 == 48)
          {
            sub_1CD2ED6E4(v56, (uint64_t)v33, 0);
          }
          else
          {
            if (v72 == 50)
            {
              *(void *)(v56 + 112) = llvm::AttributeList::removeAttributeAtIndex(v57, **(uint64_t ***)v56, -1, "coroutine.presplit", 0x12uLL);
              goto LABEL_107;
            }
LABEL_99:
            *(void *)(v56 + 112) = llvm::AttributeList::removeAttributeAtIndex(v57, **(uint64_t ***)v56, -1, "coroutine.presplit", 0x12uLL);
            uint64_t v93 = (const llvm::Function **)v95;
            uint64_t v94 = 0x400000000;
            sub_1CD2E0BD0((uint64_t)__src, (llvm *)v56, (uint64_t)&v93, (llvm::MemorySSAUpdater *)*(unsigned __int8 *)(a1 + 29), v73);
            if (__src[0])
            {
              if (v89) {
                sub_1CD2EB828(*(uint64_t ***)__src[1], (uint64_t)__src, v92, 0, v33);
              }
              llvm::removeUnreachableBlocks((llvm *)v56, 0, 0, v74, v75);
              sub_1CD2C71F4(v56, v93, v94, (llvm::CallGraph *)v33, v86);
            }
            if (v91 == 3) {
              sub_1CD2ED6E4(v56, (uint64_t)v33, 1);
            }
            sub_1CD8C6DFC(__src);
            if (v93 != (const llvm::Function **)v95) {
              free(v93);
            }
          }
LABEL_107:
          if (++v54 == (unint64_t *)v55)
          {
            if (v100)
            {
              uint64_t v78 = v99;
              uint64_t v79 = 8 * v100;
              do
              {
                uint64_t v80 = *v78++;
                sub_1CD2ED434(*(void *)(v80 + 8), (uint64_t)v33);
                v79 -= 8;
              }
              while (v79);
              LOBYTE(v28) = 1;
            }
            else
            {
              LOBYTE(v28) = 1;
            }
            goto LABEL_119;
          }
          goto LABEL_72;
        }
      }
      if (v68 == -1) {
        goto LABEL_99;
      }
      unsigned int v64 = j + v66;
    }
  }
  if (!v100) {
    goto LABEL_40;
  }
  int v28 = 0;
  unint64_t v46 = v99;
  uint64_t v47 = 8 * v100;
  do
  {
    uint64_t v48 = *v46++;
    v28 |= sub_1CD2ED434(*(void *)(v48 + 8), (uint64_t)v33);
    v47 -= 8;
  }
  while (v47);
LABEL_119:
  if (v96 != (unint64_t *)v98) {
    free(v96);
  }
  if (v99 != v101) {
    free(v99);
  }
  return v28 & 1;
}

uint64_t sub_1CD2ED434(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v30 = (void *)(a2 + 16);
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = *(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    uint64_t v4 = llvm::Value::stripPointerCasts(v3);
    uint64_t v5 = v4;
    if (v4) {
      BOOL v6 = *((unsigned char *)v4 + 16) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      uint64_t v9 = (void *)*v30;
      if (!*v30) {
        goto LABEL_18;
      }
      unint64_t v10 = *(void *)(*(void *)(v2 + 40) + 56);
      uint64_t v11 = (void *)*v30;
      unint64_t v12 = v30;
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= v10;
        if (v13 >= v10) {
          int v15 = v11;
        }
        else {
          int v15 = v11 + 1;
        }
        if (v14) {
          unint64_t v12 = v11;
        }
        uint64_t v11 = (void *)*v15;
      }
      while (*v15);
      if (v12 == v30 || v12[4] > v10) {
LABEL_18:
      }
        unint64_t v12 = v30;
      if (!v9) {
        goto LABEL_30;
      }
      uint64_t v16 = v30;
      do
      {
        unint64_t v17 = v9[4];
        BOOL v18 = v17 >= (unint64_t)v4;
        if (v17 >= (unint64_t)v4) {
          unsigned int v19 = v9;
        }
        else {
          unsigned int v19 = v9 + 1;
        }
        if (v18) {
          uint64_t v16 = v9;
        }
        uint64_t v9 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v30 || v16[4] > (unint64_t)v4) {
LABEL_30:
      }
        uint64_t v16 = v30;
      uint64_t v8 = (llvm::CallGraphNode *)v12[5];
      uint64_t v7 = v16[5];
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    uint64_t v20 = *(void *)(v2 + 8);
    while (v20)
    {
      uint64_t v21 = *(void *)(v20 + 24);
      uint64_t v20 = *(void *)(v20 + 8);
      if (v21 && *(unsigned char *)(v21 + 16) == 77 && *(void *)v21 == *(void *)v4)
      {
        if (v8)
        {
          for (uint64_t i = *(void *)(v21 + 8); i; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v23 = *(void *)(i + 24);
            unsigned int v24 = *(unsigned __int8 *)(v23 + 16);
            if (v24 >= 0x1C)
            {
              unsigned int v25 = v24 - 33;
              BOOL v26 = v25 > 0x33;
              uint64_t v27 = (1 << v25) & 0x8000000000041;
              BOOL v28 = v26 || v27 == 0;
              if (!v28 && v23 - 32 == i)
              {
                llvm::CallGraphNode::removeCallEdgeFor(v8, *(uint64_t *****)(i + 24));
                sub_1CBFA7A30((uint64_t)v8, (int32x2_t ****)v23, v7);
              }
            }
          }
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v21, v5, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v2, v3, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return 0;
}

char *sub_1CD2ED6E4(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  BOOL v6 = *(uint64_t **)(a1 + 40);
  uint64_t v8 = *(uint64_t ***)a1;
  uint64_t v7 = (llvm::AttributeList *)(a1 + 112);
  uint64_t v9 = *v8;
  if (a3) {
    unint64_t v10 = "2";
  }
  else {
    unint64_t v10 = "1";
  }
  *(void *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v7, v9, -1, "coroutine.presplit", 0x12uLL, (unsigned __int8 *)v10, 1uLL);
  sub_1CD8C4C3C((uint64_t)v40, v6);
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11) {
    unint64_t v12 = (llvm::BasicBlock *)(v11 - 24);
  }
  else {
    unint64_t v12 = 0;
  }
  if (a3)
  {
    FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v12, 1);
  }
  else
  {
    BOOL v14 = (void *)*((void *)v12 + 5);
    if (v14 == (void *)((char *)v12 + 40))
    {
      FirstNonPHIOrDbgOrLifetime = 0;
    }
    else
    {
      int v15 = (char *)(v14 - 3);
      if (v14) {
        uint64_t v16 = v14 - 3;
      }
      else {
        uint64_t v16 = 0;
      }
      if (*((unsigned __int8 *)v16 + 16) - 29 >= 0xB) {
        FirstNonPHIOrDbgOrLifetime = 0;
      }
      else {
        FirstNonPHIOrDbgOrLifetime = v15;
      }
    }
  }
  unint64_t v17 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(*v9 + 1912), 0);
  unsigned int v19 = llvm::ConstantPointerNull::get(v17, v18);
  uint64_t v20 = (uint64_t **)sub_1CD8C4CBC((uint64_t)v40, (uint64_t)v19, -1, (llvm::Instruction *)FirstNonPHIOrDbgOrLifetime);
  uint64_t v21 = *v9;
  int v22 = (uint64_t **)(*v9 + 1576);
  v41[0] = (const char *)llvm::PointerType::get((llvm::PointerType *)(v21 + 1912), 0);
  uint64_t v23 = (uint64_t **)llvm::FunctionType::get(v22, (uint64_t)v41, 1, 0);
  int v39 = v19;
  __int16 v42 = 257;
  unsigned int v24 = (char *)operator new(0x90uLL);
  unsigned int v25 = v24;
  BOOL v26 = (llvm::Value *)(v24 + 64);
  *((_DWORD *)v24 + 21) = *((_DWORD *)v24 + 21) & 0x38000000 | 2;
  *(void *)unsigned int v24 = 0;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = 0;
  *((void *)v24 + 3) = v24 + 64;
  *((void *)v24 + 4) = 0;
  *((void *)v24 + 5) = 0;
  *((void *)v24 + 6) = 0;
  *((void *)v24 + 7) = v24 + 64;
  *((void *)v24 + 8) = *v23[2];
  *((void *)v24 + 9) = 0;
  v24[80] = 84;
  v24[81] = 0;
  *((_WORD *)v24 + 41) = 0;
  *((_DWORD *)v24 + 21) = 2;
  *(_OWORD *)(v24 + 88) = 0u;
  uint64_t v27 = v24 + 88;
  *((_DWORD *)v24 + 30) = 0;
  *(_OWORD *)(v24 + 104) = 0u;
  if (FirstNonPHIOrDbgOrLifetime)
  {
    uint64_t v34 = *((void *)FirstNonPHIOrDbgOrLifetime + 5);
    unsigned int v35 = (uint64_t *)(FirstNonPHIOrDbgOrLifetime + 24);
    *((void *)v24 + 13) = v34;
    *(_WORD *)(v34 + 18) &= ~0x8000u;
    if ((v24[87] & 0x10) != 0)
    {
      uint64_t v37 = *(void *)(v34 + 56);
      if (v37)
      {
        uint64_t v38 = *(llvm::ValueSymbolTable **)(v37 + 104);
        if (v38) {
          llvm::ValueSymbolTable::reinsertValue(v38, v26);
        }
      }
    }
    uint64_t v36 = *v35;
    v25[11] = *v35;
    v25[12] = v35;
    *(void *)(v36 + 8) = v27;
    *unsigned int v35 = (uint64_t)v27;
  }
  v25[16] = 0;
  llvm::CallInst::init((uint64_t ***)v26, v23, v20, (uint64_t *)&v39, 1, 0, 0, v41);
  BOOL v28 = *(void **)(a2 + 16);
  if (!v28) {
    goto LABEL_29;
  }
  unint64_t v29 = (void *)(a2 + 16);
  do
  {
    unint64_t v30 = v28[4];
    BOOL v31 = v30 >= a1;
    if (v30 >= a1) {
      uint64_t v32 = v28;
    }
    else {
      uint64_t v32 = v28 + 1;
    }
    if (v31) {
      unint64_t v29 = v28;
    }
    BOOL v28 = (void *)*v32;
  }
  while (*v32);
  if (v29 == (void *)(a2 + 16) || v29[4] > a1) {
LABEL_29:
  }
    unint64_t v29 = (void *)(a2 + 16);
  return sub_1CBFA7A30(v29[5], (int32x2_t ****)v26, *(void *)(a2 + 88));
}

void llvm::initializeLoadStoreVectorizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD00290, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD2EDA10;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBD00290, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD2EDA10(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeSCEVAAWrapperPassPass(a1, a2);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v4);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CD2EDAD8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBD00288;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F264ACB8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD00290, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD2EDA10;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBD00290, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

double sub_1CD2EDB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t ***a6, uint64_t a7)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = a7;
  *(void *)(a1 + 48) = *(void *)(a2 + 40) + 272;
  uint64_t v7 = ***a6;
  *(void *)(a1 + 56) = a1 + 72;
  *(void *)&double result = 0x200000000;
  *(void *)(a1 + 64) = 0x200000000;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = a1 + 176;
  *(void *)(a1 + 136) = a1 + 184;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 156) = 512;
  *(unsigned char *)(a1 + 158) = 7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = &unk_1F2616E88;
  *(void *)(a1 + 184) = &unk_1F2617008;
  return result;
}

uint64_t sub_1CD2EDC28(uint64_t a1)
{
  v147[24] = *MEMORY[0x1E4F143B8];
  uint64_t v123 = *(unsigned char **)a1;
  sub_1CCD3822C((uint64_t)&v123, (uint64_t)&v132);
  uint64_t v1 = v128;
  uint64_t v123 = v128;
  uint64_t v2 = __src;
  if (__src == v132)
  {
    uint64_t v124 = v128;
    uint64_t v3 = __src;
  }
  else
  {
    unsigned int v77 = v134;
    uint64_t v1 = malloc_type_malloc(8 * v134, 0x4065EBACuLL);
    if (!v1)
    {
      if (v77) {
        goto LABEL_195;
      }
      uint64_t v1 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v1) {
        goto LABEL_195;
      }
    }
    uint64_t v124 = v1;
    uint64_t v3 = v132;
    uint64_t v2 = __src;
  }
  unsigned int v4 = v135;
  unsigned int v125 = v134;
  if (v2 == v3) {
    unsigned int v5 = v135;
  }
  else {
    unsigned int v5 = v134;
  }
  if (v5)
  {
    memmove(v1, v2, 8 * v5);
    unsigned int v4 = v135;
  }
  unsigned int v6 = v138;
  unsigned int v126 = v4;
  int v127 = v136;
  uint64_t v129 = v131;
  uint64_t v130 = 0x800000000;
  if (v138)
  {
    if (v138 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v131, v137, 24 * v138);
    LODWORD(v130) = v6;
  }
  uint64_t v7 = v119;
  uint64_t v114 = v119;
  uint64_t v8 = v141;
  if (v141 != v140)
  {
    unsigned int v78 = v142;
    uint64_t v7 = malloc_type_malloc(8 * v142, 0x4065EBACuLL);
    if (v7 || !v78 && (uint64_t v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      int v115 = v7;
      uint64_t v9 = v140;
      uint64_t v8 = v141;
      goto LABEL_13;
    }
LABEL_195:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v115 = v119;
  uint64_t v9 = v141;
LABEL_13:
  unsigned int v116 = v142;
  unsigned int v10 = v143;
  if (v8 == v9) {
    unsigned int v11 = v143;
  }
  else {
    unsigned int v11 = v142;
  }
  if (v11)
  {
    memmove(v7, v8, 8 * v11);
    unsigned int v10 = v143;
  }
  unsigned int v117 = v10;
  int v118 = v144;
  unsigned int v120 = v122;
  uint64_t v121 = 0x800000000;
  uint64_t v12 = v146;
  if (v146)
  {
    if (v146 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v122, v145, 24 * v146);
    LODWORD(v121) = v12;
  }
  int v13 = 0;
LABEL_22:
  if (v130 != v12)
  {
LABEL_32:
    int v81 = v13;
    uint64_t v17 = *((void *)v129 + 3 * v130 - 3);
    int v98 = 0;
    uint64_t v99 = 0;
    int v100 = 0;
    uint64_t v102 = 0;
    long long __p = 0uLL;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    int v95 = 0;
    v96[1] = 0;
    uint64_t v97 = 0;
    v96[0] = 0;
    v108[0] = 0;
    v108[1] = 0;
    int v109 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v110 = 0;
    uint64_t v18 = v17 + 40;
    v103[0] = 0;
    v103[1] = 0;
    int v104 = 0;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    uint64_t v105 = 0;
    for (uint64_t i = *(void *)(v17 + 48); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v18)
      {
        p_p = 0;
        uint64_t v84 = 0;
        int v85 = 0;
        sub_1CBFCBCC4((uint64_t)&p_p, (uint64_t)v108);
        long long v86 = 0uLL;
        uint64_t v87 = 0;
        sub_1CD2EFC54(&v86, v110, v111, 0x2E8BA2E8BA2E8BA3 * ((v111 - v110) >> 3));
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        int v90 = 0;
        sub_1CBFCBCC4((uint64_t)&v88, (uint64_t)v103);
        long long v91 = 0uLL;
        uint64_t v92 = 0;
        sub_1CD2EFC54(&v91, v105, v106, 0x2E8BA2E8BA2E8BA3 * ((v106 - v105) >> 3));
        uint64_t v113 = (void **)&v105;
        sub_1CC68FCC0(&v113);
        MEMORY[0x1D25D9CD0](v103[0], 8);
        v103[0] = (void **)&v110;
        sub_1CC68FCC0(v103);
        MEMORY[0x1D25D9CD0](v108[0], 8);
        MEMORY[0x1D25D9CD0](v98, 8);
        int v98 = p_p;
        uint64_t v99 = v84;
        p_p = 0;
        uint64_t v84 = 0;
        int v100 = v85;
        int v85 = 0;
        uint64_t v66 = __p;
        if ((void)__p)
        {
          uint64_t v70 = *((void *)&__p + 1);
          uint64_t v71 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
            {
              int v72 = *(void **)(v70 - 80);
              if ((void *)(v70 - 64) != v72) {
                free(v72);
              }
              v70 -= 88;
            }
            while (v70 != v66);
            uint64_t v71 = (void *)__p;
          }
          *((void *)&__p + 1) = v66;
          operator delete(v71);
        }
        long long __p = v86;
        uint64_t v102 = v87;
        uint64_t v87 = 0;
        long long v86 = 0uLL;
        MEMORY[0x1D25D9CD0](v93, 8);
        uint64_t v93 = v88;
        uint64_t v94 = v89;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        int v95 = v90;
        int v90 = 0;
        uint64_t v67 = (char *)v96[0];
        if (v96[0])
        {
          uint64_t v73 = (char *)v96[1];
          uint64_t v74 = v96[0];
          if (v96[1] != v96[0])
          {
            do
            {
              uint64_t v75 = (char *)*((void *)v73 - 10);
              if (v73 - 64 != v75) {
                free(v75);
              }
              v73 -= 88;
            }
            while (v73 != v67);
            uint64_t v74 = v96[0];
          }
          v96[1] = v67;
          operator delete(v74);
        }
        *(_OWORD *)uint64_t v96 = v91;
        uint64_t v97 = v92;
        uint64_t v92 = 0;
        long long v91 = 0uLL;
        v108[0] = (void **)&v91;
        sub_1CC68FCC0(v108);
        MEMORY[0x1D25D9CD0](v88, 8);
        v108[0] = (void **)&v86;
        sub_1CC68FCC0(v108);
        MEMORY[0x1D25D9CD0](p_p, 8);
        int v68 = sub_1CD2EED90(a1, __p, *((uint64_t *)&__p + 1));
        int v69 = sub_1CD2EED90(a1, (uint64_t)v96[0], (uint64_t)v96[1]);
        p_p = v96;
        sub_1CC68FCC0(&p_p);
        MEMORY[0x1D25D9CD0](v93, 8);
        p_p = (void **)&__p;
        sub_1CC68FCC0(&p_p);
        MEMORY[0x1D25D9CD0](v98, 8);
        LODWORD(v130) = v130 - 1;
        if (v130) {
          sub_1CC82F454((llvm::SmallPtrSetImplBase *)&v123);
        }
        int v13 = v81 | v68 | v69;
        uint64_t v12 = v121;
        goto LABEL_22;
      }
      if (i) {
        uint64_t v20 = i - 24;
      }
      else {
        uint64_t v20 = 0;
      }
      int v21 = *(unsigned __int8 *)(v20 + 16);
      uint64_t v22 = (v21 - 33);
      if (v22 <= 0x37)
      {
        if (((1 << (v21 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v24 = *(void *)(v20 + 64);
          if (!v24 || (*(unsigned char *)(v24 + 20) & 4) == 0 && (*(unsigned char *)(v24 + 17) & 0x10) == 0)
          {
            LODWORD(v113) = 7;
            if (sub_1CC5CB59C(v20, (__int32 *)&v113, 1uLL))
            {
              uint64_t v57 = *(void *)(v20 - 32);
              if (!v57
                || *(unsigned char *)(v57 + 16)
                || *(void *)(v57 + 24) != *(void *)(v20 + 72)
                || *(_DWORD *)(v57 + 36) != 7)
              {
                goto LABEL_62;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v20, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v20, 44))
            {
              goto LABEL_62;
            }
          }
        }
        else
        {
          if (((1 << (v21 - 33)) & 0x808001C8000010) != 0) {
            goto LABEL_62;
          }
          if (v22 != 28) {
            goto LABEL_41;
          }
          if ((*(_WORD *)(v20 + 18) & 0x301) != 0) {
            goto LABEL_62;
          }
        }
        int v21 = *(unsigned __int8 *)(v20 + 16);
      }
LABEL_41:
      uint64_t v23 = (v21 - 33);
      if (v23 > 0x37) {
        continue;
      }
      if (((1 << v23) & 0x8000000000041) != 0)
      {
        uint64_t v25 = *(void *)(v20 + 64);
        if (v25 && (*(unsigned char *)(v25 + 17) & 0x30) != 0) {
          continue;
        }
        int v26 = *(_DWORD *)(v20 + 20);
        if (v26 < 0
          && (uint64_t v58 = v20 - 32 * (v26 & 0x7FFFFFF), v61 = *(void *)(v58 - 8), v59 = v58 - 8, (v60 = v61) != 0))
        {
          uint64_t v62 = -v60;
          while (1)
          {
            unsigned int v63 = *(_DWORD *)(*(void *)(v59 + v62) + 8);
            BOOL v33 = v63 > 7;
            int v64 = (1 << v63) & 0x83;
            if (v33 || v64 == 0) {
              break;
            }
            v62 += 16;
            if (!v62) {
              goto LABEL_56;
            }
          }
        }
        else
        {
LABEL_56:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v20, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(v20, 44) & 1) != 0)
          {
            continue;
          }
        }
      }
      else if (v23 == 27)
      {
        if ((*(_WORD *)(v20 + 18) & 0x301) == 0) {
          continue;
        }
      }
      else if (((1 << v23) & 0x808001D0000010) == 0)
      {
        continue;
      }
LABEL_62:
      int v27 = *(unsigned __int8 *)(v20 + 16);
      if (v27 == 60) {
        uint64_t v28 = v20;
      }
      else {
        uint64_t v28 = 0;
      }
      if (i && v27 == 60)
      {
        int v29 = *(unsigned __int8 *)(v28 + 16);
        if (v29 == 60 || v29 == 61)
        {
          __int16 v30 = *(_WORD *)(v28 + 18);
          if (v30 & 0x380) != 0 || (v30) {
            continue;
          }
        }
        else if (v29 - 63) < 3 || (*(_WORD *)(v28 + 18))
        {
          continue;
        }
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 1072))(**(void **)(a1 + 40), v28))
        {
          uint64_t v31 = *(void *)v28;
          int v32 = *(_DWORD *)(*(void *)v28 + 8);
          if ((v32 & 0xFE) == 0x12) {
            int v32 = *(_DWORD *)(**(void **)(v31 + 16) + 8);
          }
          BOOL v33 = v32 > 0x14u;
          int v34 = (1 << v32) & 0x10A07F;
          if (!v33 && v34 != 0)
          {
            uint64_t v37 = sub_1CB83544C(*(void *)(a1 + 48), *(void *)v28);
            if (v36 == 1) {
            if ((v37 & 7) == 0
            }
              && ((*(_DWORD *)(v31 + 8) & 0xFE) != 0x12 || *(unsigned char *)(**(void **)(v31 + 16) + 8) != 15))
            {
              uint64_t v79 = *(llvm **)(v28 - 32);
              unsigned int v38 = *(_DWORD *)(*(void *)v79 + 8);
              if ((v38 & 0xFE) == 0x12) {
                unsigned int v38 = *(_DWORD *)(**(void **)(*(void *)v79 + 16) + 8);
              }
              unsigned int v39 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 40) + 1064))(**(void **)(a1 + 40), v38 >> 8);
              uint64_t v40 = (*(_DWORD *)(v31 + 8) & 0xFE) == 0x12 ? v31 : 0;
              if (v37 <= v39 >> 1
                && (!v40
                 || (*(unsigned int (**)(void, void, uint64_t, void))(***(void ***)(a1 + 40) + 1120))(**(void **)(a1 + 40), v39 / v37, v37, v37 >> 3)))
              {
                UnderlyingObject = llvm::getUnderlyingObject(v79, (const llvm::Value *)6);
                if (UnderlyingObject && *((unsigned char *)UnderlyingObject + 16) == 85) {
                  UnderlyingObject = (llvm *)*((void *)UnderlyingObject - 12);
                }
                uint64_t v113 = (void **)UnderlyingObject;
                __int16 v42 = v108;
LABEL_126:
                uint64_t v55 = sub_1CD2EF810((uint64_t)v42, (uint64_t *)&v113);
                unint64_t v56 = *(unsigned int *)(v55 + 8);
                if (v56 >= *(unsigned int *)(v55 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)v55 + 8 * v56) = v28;
                ++*(_DWORD *)(v55 + 8);
                continue;
              }
            }
          }
        }
      }
      else
      {
        if (v27 == 61) {
          uint64_t v28 = v20;
        }
        else {
          uint64_t v28 = 0;
        }
        if (i && v27 == 61)
        {
          int v43 = *(unsigned __int8 *)(v28 + 16);
          if (v43 == 60 || v43 == 61)
          {
            __int16 v44 = *(_WORD *)(v28 + 18);
            if (v44 & 0x380) != 0 || (v44) {
              continue;
            }
          }
          else if (v43 - 63) < 3 || (*(_WORD *)(v28 + 18))
          {
            continue;
          }
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 1080))(**(void **)(a1 + 40), v28))
          {
            uint64_t v45 = **(void **)(v28 - 64);
            int v46 = *(_DWORD *)(v45 + 8);
            if ((v46 & 0xFE) == 0x12) {
              int v46 = *(_DWORD *)(**(void **)(v45 + 16) + 8);
            }
            BOOL v33 = v46 > 0x14u;
            int v47 = (1 << v46) & 0x10A07F;
            BOOL v48 = v33 || v47 == 0;
            if (!v48 && ((*(_DWORD *)(v45 + 8) & 0xFE) != 0x12 || *(unsigned char *)(**(void **)(v45 + 16) + 8) != 15))
            {
              uint64_t v50 = sub_1CB83544C(*(void *)(a1 + 48), **(void **)(v28 - 64));
              if (v49 == 1) {
              if ((v50 & 7) == 0)
              }
              {
                uint64_t v80 = *(llvm **)(v28 - 32);
                unsigned int v51 = *(_DWORD *)(*(void *)v80 + 8);
                if ((v51 & 0xFE) == 0x12) {
                  unsigned int v51 = *(_DWORD *)(**(void **)(*(void *)v80 + 16) + 8);
                }
                unsigned int v52 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 40) + 1064))(**(void **)(a1 + 40), v51 >> 8);
                uint64_t v53 = (*(_DWORD *)(v45 + 8) & 0xFE) == 0x12 ? v45 : 0;
                if (v50 <= v52 >> 1
                  && (!v53
                   || (*(unsigned int (**)(void, void, uint64_t, void))(***(void ***)(a1 + 40) + 1128))(**(void **)(a1 + 40), v52 / v50, v50, v50 >> 3)))
                {
                  uint64_t v54 = llvm::getUnderlyingObject(v80, (const llvm::Value *)6);
                  if (v54 && *((unsigned char *)v54 + 16) == 85) {
                    uint64_t v54 = (llvm *)*((void *)v54 - 12);
                  }
                  uint64_t v113 = (void **)v54;
                  __int16 v42 = v103;
                  goto LABEL_126;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v12)
  {
    BOOL v14 = v120;
    int v15 = v129;
    while (*(void *)v15 == *(void *)v14 && v15[4] == v14[4])
    {
      v15 += 6;
      v14 += 6;
      if (v15 == (_DWORD *)((char *)v129 + 24 * v12)) {
        goto LABEL_167;
      }
    }
    goto LABEL_32;
  }
LABEL_167:
  if (v120 != v122) {
    free(v120);
  }
  if (v115 != v114) {
    free(v115);
  }
  if (v129 != v131) {
    free(v129);
  }
  if (v124 != v123) {
    free(v124);
  }
  if (v145 != v147) {
    free(v145);
  }
  if (v141 != v140) {
    free(v141);
  }
  if (v137 != &v139) {
    free(v137);
  }
  if (__src != v132) {
    free(__src);
  }
  return v13 & 1;
}

void sub_1CD2EE944()
{
}

void sub_1CD2EE984(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD2EE9BC()
{
  return "GPU Load and Store Vectorizer";
}

void sub_1CD2EE9CC(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CD2EEA84(llvm::FunctionPass *a1, uint64_t a2)
{
  v38[15] = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 112);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 15) & 4) != 0) {
      return 0;
    }
  }
  unsigned int v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_7:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(char **)v6 != llvm::AAResultsWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::AAResultsWrapperPass::ID);
  unsigned int v11 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_13:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_13;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  uint64_t v15 = *(void *)(v10 + 32);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  if (v18 == v19)
  {
LABEL_18:
    uint64_t v20 = 0;
  }
  else
  {
    while (*(char **)v18 != llvm::ScalarEvolutionWrapperPass::ID)
    {
      v18 += 16;
      if (v18 == v19) {
        goto LABEL_18;
      }
    }
    uint64_t v20 = *(void *)(v18 + 8);
  }
  uint64_t v21 = v16 + 32;
  uint64_t v22 = *(uint64_t ****)((*(uint64_t (**)(uint64_t, char *))(*(void *)v20 + 96))(v20, llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  if (v24 == v25)
  {
LABEL_23:
    uint64_t v26 = 0;
  }
  else
  {
    while (*(char **)v24 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v24 += 16;
      if (v24 == v25) {
        goto LABEL_23;
      }
    }
    uint64_t v26 = *(void *)(v24 + 8);
  }
  int v27 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v26 + 96))(v26, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v27, (const Function *)a2);
  int v29 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  if (v30 == v31)
  {
LABEL_28:
    uint64_t v32 = 0;
  }
  else
  {
    while (*(char **)v30 != llvm::AssumptionCacheTracker::ID)
    {
      v30 += 16;
      if (v30 == v31) {
        goto LABEL_28;
      }
    }
    uint64_t v32 = *(void *)(v30 + 8);
  }
  BOOL v33 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v32 + 96))(v32, llvm::AssumptionCacheTracker::ID);
  uint64_t AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v33, (llvm::Function *)a2);
  sub_1CD2EDB88((uint64_t)v36, a2, v15, AssumptionCache, v21, v22, (uint64_t)TTI);
  uint64_t v9 = sub_1CD2EDC28((uint64_t)v36);
  if (v37 != v38) {
    free(v37);
  }
  return v9;
}

uint64_t sub_1CD2EED90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v138[8] = *MEMORY[0x1E4F143B8];
  if (a2 == a3)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    uint64_t v3 = a2;
    int v4 = 0;
    do
    {
      unsigned int v5 = *(_DWORD *)(v3 + 16);
      if (v5 >= 2)
      {
        unsigned int v6 = 0;
        LODWORD(v7) = *(_DWORD *)(v3 + 16);
        uint64_t v115 = v3;
        unsigned int v116 = v7;
        do
        {
          int v118 = v7 - 64;
          unsigned int v119 = v6;
          if (v7 >= 0x40) {
            uint64_t v7 = 64;
          }
          else {
            uint64_t v7 = v7;
          }
          uint64_t v120 = v7;
          unsigned int v8 = v5 - v6;
          uint64_t v9 = *(void *)(v3 + 8);
          int v136 = (__int32 *)v138;
          if (v8 >= 0x40) {
            unsigned int v8 = 64;
          }
          uint64_t v137 = 0x1000000000;
          __s = (__int32 *)v135;
          __uint64_t n = 0x1000000000;
          if (v8)
          {
            int v117 = v4;
            uint64_t v10 = 0;
            uint64_t v11 = v9 + 8 * v6;
            uint64_t v124 = v11;
            uint64_t v12 = v120;
            do
            {
              int v121 = -1;
              *(_DWORD *)&v132[4 * v10 + 128] = -1;
              do
              {
                uint64_t v13 = v12--;
                if (v10 != v12)
                {
                  uint64_t v14 = *(void *)(v11 + 8 * v10);
                  int v15 = *(unsigned __int8 *)(v14 + 16);
                  if (v14) {
                    BOOL v16 = v15 == 60;
                  }
                  else {
                    BOOL v16 = 0;
                  }
                  int v17 = !v16;
                  unsigned int v18 = v15 - 62;
                  if (v14) {
                    BOOL v19 = v18 >= 0xFFFFFFFE;
                  }
                  else {
                    BOOL v19 = 0;
                  }
                  if (v19) {
                    uint64_t v20 = *(llvm::GlobalValue **)(v14 - 32);
                  }
                  else {
                    uint64_t v20 = 0;
                  }
                  uint64_t v21 = 0;
                  uint64_t v22 = *(unsigned __int8 **)(v11 + 8 * v12);
                  int v23 = v22[16];
                  if (v22) {
                    BOOL v24 = v23 == 60;
                  }
                  else {
                    BOOL v24 = 0;
                  }
                  int v25 = !v24;
                  if (v22 && (v23 - 62) >= 0xFFFFFFFE) {
                    uint64_t v21 = (llvm::GlobalValue *)*((void *)v22 - 4);
                  }
                  unsigned int v26 = sub_1CD2F2478(*(void *)(v11 + 8 * v10));
                  int v27 = sub_1CD2F2478((uint64_t)v22);
                  if (!v20 || !v21 || v26 != v27) {
                    goto LABEL_44;
                  }
                  if (v17) {
                    uint64_t v14 = *(void *)(v14 - 64);
                  }
                  if (v25) {
                    uint64_t v22 = (unsigned __int8 *)*((void *)v22 - 8);
                  }
                  if (v20 == v21) {
                    goto LABEL_44;
                  }
                  uint64_t v28 = *(void *)v14;
                  uint64_t v29 = *(void *)v22;
                  if (((*(_DWORD *)(v28 + 8) & 0xFE) == 18) != ((*(_DWORD *)(*(void *)v22 + 8) & 0xFE) == 18)) {
                    goto LABEL_44;
                  }
                  uint64_t v122 = v28;
                  uint64_t v30 = sub_1CB83544C(*(void *)(a1 + 48), v28) + 7;
                  BOOL v32 = v31 == 1;
                  if (((sub_1CB83544C(*(void *)(a1 + 48), v29) + 7) ^ (unint64_t)v30) > 7
                    || ((v32 ^ (v33 == 1)) & 1) != 0)
                  {
                    goto LABEL_44;
                  }
                  uint64_t v34 = v122;
                  if ((*(_DWORD *)(v122 + 8) & 0xFE) == 0x12) {
                    uint64_t v34 = **(void **)(v122 + 16);
                  }
                  uint64_t v35 = sub_1CB83544C(*(void *)(a1 + 48), v34);
                  if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12) {
                    uint64_t v29 = **(void **)(v29 + 16);
                  }
                  BOOL v37 = v36 == 1;
                  if (((sub_1CB83544C(*(void *)(a1 + 48), v29) + 7) ^ (unint64_t)(v35 + 7)) > 7
                    || ((v37 ^ (v38 == 1)) & 1) != 0)
                  {
LABEL_44:
                    uint64_t v11 = v124;
                  }
                  else
                  {
                    uint64_t v39 = *(void *)(a1 + 48);
                    if (!v26) {
                      goto LABEL_64;
                    }
                    uint64_t v40 = *(unsigned int *)(v39 + 240);
                    uint64_t v41 = *(void *)(v39 + 232);
                    if (v40)
                    {
                      uint64_t v41 = *(void *)(v39 + 232);
                      unint64_t v42 = *(unsigned int *)(v39 + 240);
                      do
                      {
                        unint64_t v43 = v42 >> 1;
                        uint64_t v44 = v41 + 16 * (v42 >> 1);
                        unsigned int v45 = *(_DWORD *)(v44 + 8);
                        uint64_t v46 = v44 + 16;
                        v42 += ~(v42 >> 1);
                        if (v45 < v26) {
                          uint64_t v41 = v46;
                        }
                        else {
                          unint64_t v42 = v43;
                        }
                      }
                      while (v42);
                    }
                    if (v41 == *(void *)(v39 + 232) + 16 * v40 || *(_DWORD *)(v41 + 8) != v26) {
LABEL_64:
                    }
                      uint64_t v41 = *(void *)(v39 + 232);
                    unsigned int v47 = *(_DWORD *)(v41 + 4);
                    uint64_t v51 = sub_1CB83544C(v39, v122);
                    if (v48 == 1) {
                    if (v47 > 0x40)
                    }
                      operator new[]();
                    unint64_t v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
                    if (!v47) {
                      unint64_t v52 = 0;
                    }
                    LODWORD(v126) = v47;
                    unsigned int v125 = (char *)(v52 & ((unint64_t)(v51 + 7) >> 3));
                    int v53 = sub_1CD2F24C8(a1, v20, v21, (uint64_t)&v125, 0, v49, v50);
                    if (v126 >= 0x41 && v125) {
                      MEMORY[0x1D25D9CB0](v125, 0x1000C8000313F17);
                    }
                    uint64_t v11 = v124;
                    if (v53)
                    {
                      if (v121 == -1) {
                        goto LABEL_81;
                      }
                      if (v13 > v10)
                      {
                        unsigned int v54 = v121 - v12;
                        if (v121 - (int)v12 < 0) {
                          unsigned int v54 = v12 - v121;
                        }
                        unsigned int v55 = v121 - v10;
                        if (v121 - (int)v10 < 0) {
                          unsigned int v55 = v10 - v121;
                        }
                        if (v54 <= v55)
                        {
LABEL_81:
                          if (__n >= (unint64_t)HIDWORD(__n)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          __s[__n] = v12;
                          LODWORD(__n) = __n + 1;
                          if (v137 >= (unint64_t)HIDWORD(v137)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          v136[v137] = v10;
                          LODWORD(v137) = v137 + 1;
                          *(_DWORD *)&v132[4 * v10 + 128] = v12;
                          int v121 = v12;
                        }
                      }
                    }
                  }
                }
              }
              while (v13 > 1);
              ++v10;
              uint64_t v12 = v120;
            }
            while (v10 != v120);
            unint64_t v56 = v136;
            unsigned int v125 = v129;
            unsigned int v126 = v129;
            uint64_t v127 = 16;
            int v128 = 0;
            int v57 = 0;
            if (v137)
            {
              uint64_t v58 = &v136[v137];
              uint64_t v3 = v115;
              do
              {
                uint64_t v59 = *v56;
                uint64_t v60 = *(void *)(v11 + 8 * v59);
                if (v126 == v125)
                {
                  unsigned int v61 = HIDWORD(v127);
                  uint64_t v62 = &v126[8 * HIDWORD(v127)];
                  if (HIDWORD(v127))
                  {
                    uint64_t v63 = 0;
                    while (*(void *)&v126[v63] != v60)
                    {
                      v63 += 8;
                      if (8 * HIDWORD(v127) == v63) {
                        goto LABEL_109;
                      }
                    }
                    uint64_t v62 = &v126[v63];
                  }
LABEL_109:
                  uint64_t v71 = v126;
                }
                else
                {
                  int v64 = v127 - 1;
                  unsigned int v65 = (v127 - 1) & ((v60 >> 4) ^ (v60 >> 9));
                  uint64_t v62 = &v126[8 * v65];
                  uint64_t v66 = *(void *)v62;
                  if (*(void *)v62 == -1)
                  {
                    uint64_t v67 = 0;
LABEL_111:
                    if (v67) {
                      uint64_t v62 = v67;
                    }
                    unsigned int v61 = HIDWORD(v127);
                    if (*(void *)v62 != v60) {
                      uint64_t v62 = &v126[8 * v127];
                    }
                  }
                  else
                  {
                    uint64_t v67 = 0;
                    int v68 = 1;
                    while (v66 != v60)
                    {
                      if (v67) {
                        BOOL v69 = 0;
                      }
                      else {
                        BOOL v69 = v66 == -2;
                      }
                      if (v69) {
                        uint64_t v67 = v62;
                      }
                      unsigned int v70 = v65 + v68++;
                      unsigned int v65 = v70 & v64;
                      uint64_t v62 = &v126[8 * (v70 & v64)];
                      uint64_t v66 = *(void *)v62;
                      if (*(void *)v62 == -1) {
                        goto LABEL_111;
                      }
                    }
                    unsigned int v61 = HIDWORD(v127);
                  }
                  uint64_t v71 = v125;
                }
                if (v126 == v71) {
                  int v72 = v61;
                }
                else {
                  int v72 = v127;
                }
                if (v62 == &v126[8 * v72])
                {
                  if (__n)
                  {
                    uint64_t v73 = 0;
                    int v74 = v127 - 1;
                    if (v126 == v125) {
                      int v75 = v61;
                    }
                    else {
                      int v75 = v127;
                    }
                    int v76 = &v126[8 * v75];
                    while (1)
                    {
                      if (v59 == __s[v73])
                      {
                        uint64_t v77 = *(void *)(v11 + 8 * v136[v73]);
                        if (v126 == v71)
                        {
                          unsigned int v78 = &v126[8 * v61];
                          if (v61)
                          {
                            uint64_t v79 = 8 * v61;
                            uint64_t v80 = v126;
                            while (*(void *)v80 != v77)
                            {
                              v80 += 8;
                              v79 -= 8;
                              if (!v79) {
                                goto LABEL_153;
                              }
                            }
                            unsigned int v78 = v80;
                          }
                        }
                        else
                        {
                          unsigned int v81 = ((v77 >> 4) ^ (v77 >> 9)) & v74;
                          int v82 = &v126[8 * v81];
                          uint64_t v83 = *(void *)v82;
                          if (*(void *)v82 == -1)
                          {
                            uint64_t v84 = 0;
LABEL_146:
                            if (v84) {
                              int v82 = v84;
                            }
                            uint64_t v88 = *(void *)v82;
                          }
                          else
                          {
                            uint64_t v84 = 0;
                            int v85 = 1;
                            while (v83 != v77)
                            {
                              if (v84) {
                                BOOL v86 = 0;
                              }
                              else {
                                BOOL v86 = v83 == -2;
                              }
                              if (v86) {
                                uint64_t v84 = v82;
                              }
                              unsigned int v87 = v81 + v85++;
                              unsigned int v81 = v87 & v74;
                              int v82 = &v126[8 * (v87 & v74)];
                              uint64_t v83 = *(void *)v82;
                              if (*(void *)v82 == -1) {
                                goto LABEL_146;
                              }
                            }
                            uint64_t v88 = *(void *)(v11 + 8 * v136[v73]);
                          }
                          unsigned int v78 = v88 == v77 ? v82 : v76;
                          uint64_t v71 = v125;
                        }
LABEL_153:
                        int v89 = v126 == v71 ? v61 : v127;
                        if (v78 == &v126[8 * v89]) {
                          break;
                        }
                      }
                      if (++v73 == __n) {
                        goto LABEL_158;
                      }
                    }
                  }
                  else
                  {
LABEL_158:
                    uint64_t v130 = v132;
                    uint64_t v131 = 0x1000000000;
                    if (v59 == -1)
                    {
                      unsigned int v109 = 0;
                      uint64_t v110 = (uint64_t **)v132;
                    }
                    else
                    {
                      while (1)
                      {
                        int v90 = &__s[__n];
                        long long v91 = wmemchr(__s, v59, __n);
                        uint64_t v92 = v91 ? v91 : v90;
                        if (v92 == &__s[__n])
                        {
                          uint64_t v93 = &v136[v137];
                          uint64_t v94 = wmemchr(v136, v59, v137);
                          int v95 = v94 ? v94 : v93;
                          if (v95 == &v136[v137]) {
                            break;
                          }
                        }
                        uint64_t v96 = *(void *)(v11 + 8 * (int)v59);
                        uint64_t v97 = v125;
                        if (v126 == v125)
                        {
                          int v98 = HIDWORD(v127);
                          uint64_t v99 = &v126[8 * HIDWORD(v127)];
                          if (HIDWORD(v127))
                          {
                            uint64_t v100 = 0;
                            while (*(void *)&v126[v100] != v96)
                            {
                              v100 += 8;
                              if (8 * HIDWORD(v127) == v100) {
                                goto LABEL_186;
                              }
                            }
                            uint64_t v99 = &v126[v100];
                          }
LABEL_186:
                          uint64_t v97 = v126;
                        }
                        else
                        {
                          int v101 = v127 - 1;
                          unsigned int v102 = (v127 - 1) & ((v96 >> 4) ^ (v96 >> 9));
                          uint64_t v99 = &v126[8 * v102];
                          uint64_t v103 = *(void *)v99;
                          if (*(void *)v99 == -1)
                          {
                            int v104 = 0;
LABEL_195:
                            if (v104) {
                              uint64_t v99 = v104;
                            }
                            int v98 = HIDWORD(v127);
                            if (*(void *)v99 != v96) {
                              uint64_t v99 = &v126[8 * v127];
                            }
                          }
                          else
                          {
                            int v104 = 0;
                            int v105 = 1;
                            while (v103 != v96)
                            {
                              if (v104) {
                                BOOL v106 = 0;
                              }
                              else {
                                BOOL v106 = v103 == -2;
                              }
                              if (v106) {
                                int v104 = v99;
                              }
                              unsigned int v107 = v102 + v105++;
                              unsigned int v102 = v107 & v101;
                              uint64_t v99 = &v126[8 * (v107 & v101)];
                              uint64_t v103 = *(void *)v99;
                              if (*(void *)v99 == -1) {
                                goto LABEL_195;
                              }
                            }
                            int v98 = HIDWORD(v127);
                          }
                        }
                        if (v126 == v97) {
                          int v108 = v98;
                        }
                        else {
                          int v108 = v127;
                        }
                        unsigned int v109 = v131;
                        if (v99 == &v126[8 * v108])
                        {
                          if (v131 >= HIDWORD(v131)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v130 + v131) = v96;
                          unsigned int v109 = v131 + 1;
                          LODWORD(v131) = v131 + 1;
                          LODWORD(v59) = *(_DWORD *)&v132[4 * (int)v59 + 128];
                          if (v59 != -1) {
                            continue;
                          }
                        }
                        goto LABEL_203;
                      }
                      unsigned int v109 = v131;
LABEL_203:
                      uint64_t v110 = (uint64_t **)v130;
                    }
                    if (*((unsigned char *)*v110 + 16) == 60) {
                      int v111 = sub_1CD2EFD88(a1, v110, v109, (uint64_t)&v125);
                    }
                    else {
                      int v111 = sub_1CD2F125C(a1, (unsigned __int16 **)v110, v109, (uint64_t)&v125);
                    }
                    int v112 = v111;
                    if (v130 != v132) {
                      free(v130);
                    }
                    v57 |= v112;
                  }
                }
                ++v56;
              }
              while (v56 != v58);
              int v4 = v117;
              if (v126 != v125) {
                free(v126);
              }
            }
            else
            {
              int v4 = v117;
              uint64_t v3 = v115;
            }
            unsigned int v6 = v119;
          }
          else
          {
            int v57 = 0;
          }
          if (__s != (__int32 *)v135)
          {
            free(__s);
            unsigned int v6 = v119;
          }
          if (v136 != (__int32 *)v138)
          {
            free(v136);
            unsigned int v6 = v119;
          }
          v4 |= v57;
          v6 += 64;
          LODWORD(v7) = v118;
          unsigned int v5 = v116;
        }
        while (v6 < v116);
      }
      v3 += 88;
    }
    while (v3 != a3);
  }
  return v4 & 1;
}

uint64_t sub_1CD2EF810(uint64_t a1, uint64_t *a2)
{
  v51[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v43 = *a2;
  int v44 = 0;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)a1;
    unsigned int v7 = v5 - 1;
    uint64_t v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v9 = (void *)(*(void *)a1 + 16 * v8);
    uint64_t v10 = *v9;
    if (v4 == *v9)
    {
LABEL_11:
      unsigned int v15 = *(_DWORD *)(v6 + 16 * v8 + 8);
      uint64_t v16 = *(void *)(a1 + 24);
      return v16 + 88 * v15 + 8;
    }
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != -4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -8192;
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      int v14 = v8 + v12++;
      uint64_t v8 = v14 & v7;
      uint64_t v9 = (void *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if (v4 == *v9) {
        goto LABEL_11;
      }
    }
    if (v11) {
      unsigned int v18 = v11;
    }
    else {
      unsigned int v18 = v9;
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  BOOL v19 = sub_1CC21DC7C(a1, (uint64_t)&v43, &v43, v18);
  *BOOL v19 = v43;
  *((_DWORD *)v19 + 2) = v44;
  unsigned int v45 = v47;
  uint64_t v46 = 0x800000000;
  uint64_t v20 = *a2;
  uint64_t v48 = *a2;
  uint64_t v49 = v51;
  uint64_t v50 = 0x800000000;
  uint64_t v22 = *(uint64_t **)(a1 + 32);
  unint64_t v21 = *(void *)(a1 + 40);
  if ((unint64_t)v22 >= v21)
  {
    int v25 = *(uint64_t **)(a1 + 24);
    unint64_t v26 = 0x2E8BA2E8BA2E8BA3 * (v22 - v25) + 1;
    if (v26 > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    unint64_t v27 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21 - (void)v25) >> 3);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x1745D1745D1745DLL) {
      unint64_t v28 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    uint64_t v29 = 88 * v28;
    uint64_t v30 = (char *)operator new(88 * v28);
    int v31 = (uint64_t *)&v30[8 * (v22 - v25)];
    *int v31 = v20;
    v31[1] = (uint64_t)(v31 + 3);
    v31[2] = 0x800000000;
    BOOL v24 = v31 + 11;
    if (v22 == v25)
    {
      *(void *)(a1 + 24) = v31;
      *(void *)(a1 + 32) = v24;
      *(void *)(a1 + 40) = &v30[v29];
    }
    else
    {
      uint64_t v41 = &v30[v29];
      unint64_t v42 = v19;
      uint64_t v32 = 0;
      do
      {
        int v33 = &v22[v32];
        uint64_t v34 = &v31[v32];
        *(v34 - 11) = v22[v32 - 11];
        uint64_t v35 = &v31[v32 - 8];
        v31[v32 - 10] = (uint64_t)v35;
        *(v34 - 9) = 0x800000000;
        unsigned int v36 = v22[v32 - 9];
        if (v36) {
          BOOL v37 = v34 == v33;
        }
        else {
          BOOL v37 = 1;
        }
        if (!v37)
        {
          int v38 = (uint64_t *)*(v33 - 10);
          if (v33 - 8 == v38)
          {
            if (v36 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v35, v38, 8 * LODWORD(v22[v32 - 9]));
            *((_DWORD *)v34 - 18) = v36;
          }
          else
          {
            v31[v32 - 10] = (uint64_t)v38;
            *((_DWORD *)v34 - 18) = v36;
            *((_DWORD *)v34 - 17) = *((_DWORD *)&v22[v32 - 8] - 1);
            *(v33 - 10) = (uint64_t)(v33 - 8);
            *((_DWORD *)&v22[v32 - 8] - 1) = 0;
          }
          *((_DWORD *)v33 - 18) = 0;
        }
        v32 -= 11;
      }
      while (&v22[v32] != v25);
      uint64_t v22 = *(uint64_t **)(a1 + 24);
      uint64_t v39 = *(uint64_t **)(a1 + 32);
      *(void *)(a1 + 24) = &v31[v32];
      *(void *)(a1 + 32) = v24;
      *(void *)(a1 + 40) = v41;
      if (v39 == v22)
      {
        BOOL v19 = v42;
      }
      else
      {
        BOOL v19 = v42;
        do
        {
          uint64_t v40 = (uint64_t *)*(v39 - 10);
          if (v39 - 8 != v40) {
            free(v40);
          }
          v39 -= 11;
        }
        while (v39 != v22);
      }
    }
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *uint64_t v22 = v20;
    v22[1] = (uint64_t)(v22 + 3);
    void v22[2] = 0x800000000;
    if (v22 != &v48)
    {
      int v23 = v50;
      if (v50)
      {
        if (v49 == v51)
        {
          if (v50 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v22 + 3, v51, 8 * v50);
          *((_DWORD *)v22 + 4) = v23;
        }
        else
        {
          v22[1] = (uint64_t)v49;
          *((_DWORD *)v22 + 4) = v23;
          *((_DWORD *)v22 + 5) = HIDWORD(v50);
          uint64_t v49 = v51;
          HIDWORD(v50) = 0;
        }
        LODWORD(v50) = 0;
      }
    }
    BOOL v24 = v22 + 11;
  }
  *(void *)(a1 + 32) = v24;
  if (v49 != v51) {
    free(v49);
  }
  if (v45 != v47) {
    free(v45);
  }
  uint64_t v16 = *(void *)(a1 + 24);
  unsigned int v15 = -1171354717 * ((unint64_t)(*(void *)(a1 + 32) - v16) >> 3) - 1;
  *((_DWORD *)v19 + 2) = v15;
  return v16 + 88 * v15 + 8;
}

void *sub_1CD2EFC54(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x2E8BA2E8BA2E8BBLL) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 11 * a4;
    double result = operator new(88 * a4);
    uint64_t v8 = result;
    void *v6 = result;
    v6[1] = result;
    void v6[2] = &result[v7];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        uint64_t v11 = &v8[v9 / 8];
        void *v11 = *(void *)(a2 + v9);
        int v12 = &v8[v9 / 8 + 3];
        v8[v9 / 8 + 1] = v12;
        void v11[2] = 0x800000000;
        unsigned int v13 = *(_DWORD *)(a2 + v9 + 16);
        if (v13) {
          BOOL v14 = v11 == (void *)v10;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14)
        {
          if (v13 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          double result = memcpy(v12, *(const void **)(v10 + 8), 8 * *(unsigned int *)(a2 + v9 + 16));
          *((_DWORD *)v11 + 4) = v13;
        }
        v9 += 88;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1CD2EFD88(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  int v228 = 0;
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    uint64_t v8 = *a2;
    if (a3)
    {
      uint64_t v9 = 8 * a3;
      uint64_t v10 = a2;
      do
      {
        uint64_t v11 = **v10;
        int v12 = (*(_DWORD *)(v11 + 8) & 0xFE) == 0x12
            ? *(unsigned __int8 *)(**(void **)(v11 + 16) + 8)
            : *(_DWORD *)(v11 + 8);
        if (v12 == 13) {
          break;
        }
        if (v12 == 15)
        {
          unsigned int v13 = *a2;
          BOOL v14 = **(llvm::IntegerType ***)(*(void *)a1 + 40);
          uint64_t v16 = (llvm::LLVMContext *)sub_1CB83544C(*(void *)(a1 + 48), **v10);
          if (v15 == 1) {
          uint64_t v11 = llvm::IntegerType::get(v14, v16);
          }
          uint64_t v8 = v13;
          break;
        }
        ++v10;
        v9 -= 8;
      }
      while (v9);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v18 = sub_1CB83544C(*(void *)(a1 + 48), v11);
    if (v17 == 1) {
    uint64_t v19 = *(void *)*(v8 - 4);
    }
    unsigned int v20 = *(_DWORD *)(v19 + 8);
    if ((v20 & 0xFE) == 0x12) {
      unsigned int v20 = *(_DWORD *)(**(void **)(v19 + 16) + 8);
    }
    unint64_t v21 = &a2[a3];
    uint64_t v22 = v20 >> 8;
    unsigned int v23 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 1064))(**(void **)(a1 + 40), v22);
    if (!v18
      || (a3 & 0xFFFFFFFE) == 0
      || (v24.i32[0] = v18, uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24), v25.i16[0] = vaddlv_u8(v25), v25.i32[0] > 1u)
      || (uint64_t v26 = v23 / v18, v26 <= 1))
    {
      if (!a3) {
        goto LABEL_176;
      }
      while (1)
      {
        uint64_t v39 = *(void *)(a4 + 8);
        uint64_t v40 = *a2;
        uint64_t v41 = *(unsigned int *)(a4 + 20);
        if (v39 == *(void *)a4)
        {
          if (v41)
          {
            unint64_t v42 = 0;
            uint64_t v43 = 8 * v41;
            int v44 = *(uint64_t ***)(a4 + 8);
            do
            {
              if (*v44 == v40) {
                goto LABEL_72;
              }
              if (*v44 == (uint64_t *)-2) {
                unint64_t v42 = v44;
              }
              ++v44;
              v43 -= 8;
            }
            while (v43);
            if (v42)
            {
              void *v42 = v40;
              --*(_DWORD *)(a4 + 24);
              goto LABEL_72;
            }
          }
          unsigned int v45 = *(_DWORD *)(a4 + 16);
          if (v41 < v45)
          {
            *(_DWORD *)(a4 + 20) = v41 + 1;
            *(void *)(v39 + 8 * v41) = v40;
            goto LABEL_72;
          }
        }
        else
        {
          unsigned int v45 = *(_DWORD *)(a4 + 16);
        }
        if (3 * v45 <= 4 * ((int)v41 - *(_DWORD *)(a4 + 24)))
        {
          if (v45 >= 0x40) {
            v45 *= 2;
          }
          else {
            unsigned int v45 = 128;
          }
        }
        else if (v45 - v41 >= v45 >> 3)
        {
          goto LABEL_53;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v45);
        unsigned int v45 = *(_DWORD *)(a4 + 16);
        uint64_t v39 = *(void *)(a4 + 8);
LABEL_53:
        unsigned int v46 = v45 - 1;
        unsigned int v47 = (v45 - 1) & ((v40 >> 4) ^ (v40 >> 9));
        uint64_t v48 = (uint64_t **)(v39 + 8 * v47);
        uint64_t v49 = *v48;
        if (*v48 == (uint64_t *)-1)
        {
          uint64_t v50 = 0;
LABEL_65:
          if (v50) {
            unsigned int v54 = v50;
          }
          else {
            unsigned int v54 = v48;
          }
          if (*v54 != v40)
          {
            if (*v54 == (uint64_t *)-2) {
              --*(_DWORD *)(a4 + 24);
            }
            else {
              ++*(_DWORD *)(a4 + 20);
            }
            llvm *v54 = v40;
          }
        }
        else
        {
          uint64_t v50 = 0;
          int v51 = 1;
          while (v49 != v40)
          {
            if (v50) {
              BOOL v52 = 0;
            }
            else {
              BOOL v52 = v49 == (uint64_t *)-2;
            }
            if (v52) {
              uint64_t v50 = v48;
            }
            unsigned int v53 = v47 + v51++;
            unsigned int v47 = v53 & v46;
            uint64_t v48 = (uint64_t **)(v39 + 8 * (v53 & v46));
            uint64_t v49 = *v48;
            if (*v48 == (uint64_t *)-1) {
              goto LABEL_65;
            }
          }
        }
LABEL_72:
        if (++a2 == v21) {
          goto LABEL_176;
        }
      }
    }
    uint64_t v226 = (const llvm::DataLayout *)v8;
    unint64_t v27 = *((unsigned __int16 *)v8 + 9);
    uint64_t v227 = sub_1CD2F3F04(a1, a2, a3);
    if (v28 == 1)
    {
      uint64_t v71 = *v227;
      uint64_t v72 = *(void *)(a4 + 8);
      uint64_t v73 = *(unsigned int *)(a4 + 20);
      if (v72 == *(void *)a4)
      {
        if (v73)
        {
          int v74 = 0;
          uint64_t v75 = 8 * v73;
          int v76 = *(void **)(a4 + 8);
          do
          {
            if (*v76 == v71) {
              goto LABEL_176;
            }
            if (*v76 == -2) {
              int v74 = v76;
            }
            ++v76;
            v75 -= 8;
          }
          while (v75);
          if (v74)
          {
            int v78 = 0;
            void *v74 = v71;
            --*(_DWORD *)(a4 + 24);
            return (v228 | v78) & 1;
          }
        }
        unsigned int v77 = *(_DWORD *)(a4 + 16);
        if (v73 < v77)
        {
          int v78 = 0;
          *(_DWORD *)(a4 + 20) = v73 + 1;
          *(void *)(v72 + 8 * v73) = v71;
          return (v228 | v78) & 1;
        }
      }
      else
      {
        unsigned int v77 = *(_DWORD *)(a4 + 16);
      }
      if (3 * v77 <= 4 * ((int)v73 - *(_DWORD *)(a4 + 24)))
      {
        if (v77 >= 0x40) {
          v77 *= 2;
        }
        else {
          unsigned int v77 = 128;
        }
      }
      else if (v77 - v73 >= v77 >> 3)
      {
LABEL_181:
        unsigned int v105 = v77 - 1;
        unsigned int v106 = (v77 - 1) & ((v71 >> 4) ^ (v71 >> 9));
        unsigned int v107 = (void *)(v72 + 8 * v106);
        uint64_t v108 = *v107;
        if (*v107 == -1)
        {
          unsigned int v109 = 0;
        }
        else
        {
          unsigned int v109 = 0;
          int v110 = 1;
          do
          {
            if (v108 == v71) {
              goto LABEL_176;
            }
            if (v109) {
              BOOL v111 = 0;
            }
            else {
              BOOL v111 = v108 == -2;
            }
            if (v111) {
              unsigned int v109 = v107;
            }
            unsigned int v112 = v106 + v110++;
            unsigned int v106 = v112 & v105;
            unsigned int v107 = (void *)(v72 + 8 * (v112 & v105));
            uint64_t v108 = *v107;
          }
          while (*v107 != -1);
        }
        if (v109) {
          uint64_t v124 = v109;
        }
        else {
          uint64_t v124 = v107;
        }
        if (*v124 != v71)
        {
          if (*v124 == -2) {
            --*(_DWORD *)(a4 + 24);
          }
          else {
            ++*(_DWORD *)(a4 + 20);
          }
          int v78 = 0;
          *uint64_t v124 = v71;
          return (v228 | v78) & 1;
        }
LABEL_176:
        int v78 = 0;
        return (v228 | v78) & 1;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v77);
      unsigned int v77 = *(_DWORD *)(a4 + 16);
      uint64_t v72 = *(void *)(a4 + 8);
      goto LABEL_181;
    }
    uint64_t v29 = v28;
    if (!v28)
    {
      while (1)
      {
        uint64_t v55 = *(void *)(a4 + 8);
        unint64_t v56 = *a2;
        uint64_t v57 = *(unsigned int *)(a4 + 20);
        if (v55 == *(void *)a4)
        {
          if (v57)
          {
            uint64_t v58 = 0;
            uint64_t v59 = 8 * v57;
            uint64_t v60 = *(uint64_t ***)(a4 + 8);
            do
            {
              if (*v60 == v56) {
                goto LABEL_112;
              }
              if (*v60 == (uint64_t *)-2) {
                uint64_t v58 = v60;
              }
              ++v60;
              v59 -= 8;
            }
            while (v59);
            if (v58)
            {
              *uint64_t v58 = v56;
              --*(_DWORD *)(a4 + 24);
              goto LABEL_112;
            }
          }
          unsigned int v61 = *(_DWORD *)(a4 + 16);
          if (v57 < v61)
          {
            *(_DWORD *)(a4 + 20) = v57 + 1;
            *(void *)(v55 + 8 * v57) = v56;
            goto LABEL_112;
          }
        }
        else
        {
          unsigned int v61 = *(_DWORD *)(a4 + 16);
        }
        if (3 * v61 <= 4 * ((int)v57 - *(_DWORD *)(a4 + 24)))
        {
          if (v61 >= 0x40) {
            v61 *= 2;
          }
          else {
            unsigned int v61 = 128;
          }
        }
        else if (v61 - v57 >= v61 >> 3)
        {
          goto LABEL_93;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v61);
        unsigned int v61 = *(_DWORD *)(a4 + 16);
        uint64_t v55 = *(void *)(a4 + 8);
LABEL_93:
        unsigned int v62 = v61 - 1;
        unsigned int v63 = (v61 - 1) & ((v56 >> 4) ^ (v56 >> 9));
        int v64 = (uint64_t **)(v55 + 8 * v63);
        unsigned int v65 = *v64;
        if (*v64 == (uint64_t *)-1)
        {
          uint64_t v66 = 0;
LABEL_105:
          if (v66) {
            unsigned int v70 = v66;
          }
          else {
            unsigned int v70 = v64;
          }
          if (*v70 != v56)
          {
            if (*v70 == (uint64_t *)-2) {
              --*(_DWORD *)(a4 + 24);
            }
            else {
              ++*(_DWORD *)(a4 + 20);
            }
            *unsigned int v70 = v56;
          }
        }
        else
        {
          uint64_t v66 = 0;
          int v67 = 1;
          while (v65 != v56)
          {
            if (v66) {
              BOOL v68 = 0;
            }
            else {
              BOOL v68 = v65 == (uint64_t *)-2;
            }
            if (v68) {
              uint64_t v66 = v64;
            }
            unsigned int v69 = v63 + v67++;
            unsigned int v63 = v69 & v62;
            int v64 = (uint64_t **)(v55 + 8 * (v69 & v62));
            unsigned int v65 = *v64;
            if (*v64 == (uint64_t *)-1) {
              goto LABEL_105;
            }
          }
        }
LABEL_112:
        if (++a2 == v21) {
          goto LABEL_176;
        }
      }
    }
    int v30 = *(unsigned __int8 *)(v11 + 8);
    uint64_t v31 = v30 == 18 ? v11 : 0;
    uint64_t v225 = v31;
    if (v31)
    {
      if ((v30 & 0xFE) == 0x12) {
        uint64_t v11 = **(void **)(v11 + 16);
      }
      uint64_t v28 = (*(_DWORD *)(v31 + 32) * v28);
      uint64_t v32 = (llvm::FixedVectorType *)v11;
    }
    else
    {
      uint64_t v32 = (llvm::FixedVectorType *)v11;
    }
    double v33 = llvm::FixedVectorType::get(v32, (llvm::Type *)v28);
    uint64_t v35 = v34;
    unsigned int v36 = v18 >> 3;
    unsigned int v37 = (*(uint64_t (**)(void, uint64_t, uint64_t, void, llvm::PointerType *, double))(***(void ***)(a1 + 40) + 1120))(**(void **)(a1 + 40), v26, v18, (v18 >> 3) * v29, v34, v33);
    if (v26 >= v29 && (v26 == v37 || v37 >= v29)) {
      break;
    }
    a3 = v29 - v37;
    a2 = (uint64_t **)&v227[v37];
    v228 |= sub_1CD2EFD88(a1);
  }
  unint64_t v79 = __clz(1 << (v27 >> 1));
  uint64_t v80 = v227;
  do
  {
    uint64_t v81 = *(void *)(a4 + 8);
    uint64_t v82 = *v80;
    uint64_t v83 = *(unsigned int *)(a4 + 20);
    if (v81 != *(void *)a4)
    {
      unsigned int v87 = *(_DWORD *)(a4 + 16);
      goto LABEL_142;
    }
    if (!v83)
    {
LABEL_139:
      unsigned int v87 = *(_DWORD *)(a4 + 16);
      if (v83 < v87)
      {
        *(_DWORD *)(a4 + 20) = v83 + 1;
        *(void *)(v81 + 8 * v83) = v82;
        goto LABEL_163;
      }
LABEL_142:
      if (3 * v87 <= 4 * ((int)v83 - *(_DWORD *)(a4 + 24)))
      {
        if (v87 >= 0x40) {
          v87 *= 2;
        }
        else {
          unsigned int v87 = 128;
        }
      }
      else if (v87 - v83 >= v87 >> 3)
      {
        goto LABEL_144;
      }
      unint64_t v224 = v79;
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v87);
      unint64_t v79 = v224;
      unsigned int v87 = *(_DWORD *)(a4 + 16);
      uint64_t v81 = *(void *)(a4 + 8);
LABEL_144:
      unsigned int v88 = v87 - 1;
      unsigned int v89 = (v87 - 1) & ((v82 >> 4) ^ (v82 >> 9));
      int v90 = (void *)(v81 + 8 * v89);
      uint64_t v91 = *v90;
      if (*v90 == -1)
      {
        uint64_t v92 = 0;
LABEL_156:
        if (v92) {
          uint64_t v96 = v92;
        }
        else {
          uint64_t v96 = v90;
        }
        if (*v96 != v82)
        {
          if (*v96 == -2) {
            --*(_DWORD *)(a4 + 24);
          }
          else {
            ++*(_DWORD *)(a4 + 20);
          }
          *uint64_t v96 = v82;
        }
      }
      else
      {
        uint64_t v92 = 0;
        int v93 = 1;
        while (v91 != v82)
        {
          if (v92) {
            BOOL v94 = 0;
          }
          else {
            BOOL v94 = v91 == -2;
          }
          if (v94) {
            uint64_t v92 = v90;
          }
          unsigned int v95 = v89 + v93++;
          unsigned int v89 = v95 & v88;
          int v90 = (void *)(v81 + 8 * (v95 & v88));
          uint64_t v91 = *v90;
          if (*v90 == -1) {
            goto LABEL_156;
          }
        }
      }
      goto LABEL_163;
    }
    uint64_t v84 = 0;
    uint64_t v85 = 8 * v83;
    BOOL v86 = *(void **)(a4 + 8);
    while (*v86 != v82)
    {
      if (*v86 == -2) {
        uint64_t v84 = v86;
      }
      ++v86;
      v85 -= 8;
      if (!v85)
      {
        if (!v84) {
          goto LABEL_139;
        }
        *uint64_t v84 = v82;
        --*(_DWORD *)(a4 + 24);
        break;
      }
    }
LABEL_163:
    ++v80;
  }
  while (v80 != &v227[v29]);
  uint64_t v97 = v79 ^ 0x3F;
  if (!sub_1CD2F4B3C((void ***)a1, v36 * v29, v22, v79 ^ 0x3Fu))
  {
    uint64_t v99 = v226;
    goto LABEL_193;
  }
  uint64_t v99 = v226;
  uint64_t v100 = *((void *)v226 - 4);
  unsigned int v101 = *(_DWORD *)(*(void *)v100 + 8);
  if ((v101 & 0xFE) == 0x12) {
    unsigned int v101 = *(_DWORD *)(**(void **)(*(void *)v100 + 16) + 8);
  }
  uint64_t v102 = *(void *)(a1 + 48);
  if (*(_DWORD *)(v102 + 4) != v101 >> 8) {
    goto LABEL_205;
  }
  unsigned __int8 v103 = llvm::getOrEnforceKnownAlignment(v100, 258, (unsigned __int8 *)v102, v226, 0, *(const llvm::DataLayout **)(a1 + 24));
  if (v97 > v103) {
    goto LABEL_176;
  }
  uint64_t v97 = v103;
LABEL_193:
  if (((*(uint64_t (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 40) + 1088))(**(void **)(a1 + 40), v36 * v29, v97, v22) & 1) == 0)
  {
LABEL_205:
    int v123 = sub_1CD2EFD88(a1);
    int v78 = v123 | sub_1CD2EFD88(a1);
    return (v228 | v78) & 1;
  }
  uint64_t v113 = sub_1CD2F4BE8(v227, v29);
  uint64_t v114 = 0;
  uint64_t v115 = a1 + 56;
  uint64_t v116 = v113 - 24;
  if (!v113) {
    uint64_t v116 = 0;
  }
  *(void *)(a1 + 104) = *(void *)(v116 + 40);
  *(void *)(a1 + 112) = v116 + 24;
  int v117 = *(void **)(v116 + 48);
  unint64_t v229 = v117;
  if (v117)
  {
    llvm::MetadataTracking::track((uint64_t)&v229, (unsigned __int8 *)v117, 2);
    uint64_t v114 = v229;
  }
  sub_1CB8461A4(a1 + 56, 0, (uint64_t)v114);
  if (v229)
  {
    int v217 = *(unsigned __int8 *)v229;
    if ((v217 - 4) > 0x1E)
    {
      if ((v217 - 3) >= 0xFFFFFFFE) {
        uint64_t v220 = v229;
      }
      else {
        uint64_t v220 = 0;
      }
      if ((v217 - 3) < 0xFFFFFFFE)
      {
        if (v217 == 3) {
          *((void *)v229 + 1) = 0;
        }
        goto LABEL_199;
      }
      unint64_t v219 = (unint64_t)v220 + 8;
    }
    else
    {
      if ((*((unsigned char *)v229 + 1) & 0x7F) != 2 && !*((_DWORD *)v229 + 3)) {
        goto LABEL_199;
      }
      uint64_t v218 = *((void *)v229 + 2);
      if ((v218 & 4) == 0) {
        goto LABEL_199;
      }
      unint64_t v219 = v218 & 0xFFFFFFFFFFFFFFF8;
      if (!v219) {
        goto LABEL_199;
      }
    }
    int v233 = &v229;
    sub_1CC5FA668(v219 + 16, &v233);
  }
LABEL_199:
  int v118 = (llvm::Value *)*((void *)v99 - 4);
  unint64_t v119 = llvm::PointerType::get(v35, (llvm::Type *)v22);
  __int16 v232 = 257;
  if (*(void *)v118 != v119)
  {
    if (*((unsigned __int8 *)v118 + 16) <= 0x14u)
    {
      int v118 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, unint64_t))(**(void **)(a1 + 128) + 224))(*(void *)(a1 + 128), 49, v118, v119);
      if (v118) {
        BOOL v125 = *((unsigned __int8 *)v118 + 16) >= 0x1Cu;
      }
      else {
        BOOL v125 = 0;
      }
      if (v125)
      {
        (*(void (**)(void, llvm::Value *, void **, void, void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), v118, &v229, *(void *)(a1 + 104), *(void *)(a1 + 112));
        uint64_t v221 = *(unsigned int *)(a1 + 64);
        if (v221)
        {
          uint64_t v222 = *(void *)(a1 + 56);
          uint64_t v223 = v222 + 16 * v221;
          do
          {
            llvm::Instruction::setMetadata(v118, *(_DWORD *)v222, *(llvm::MDNode **)(v222 + 8));
            v222 += 16;
          }
          while (v222 != v223);
        }
        uint64_t v115 = a1 + 56;
      }
    }
    else
    {
      v237[0] = 257;
      int v118 = llvm::CastInst::Create(49, (uint64_t)v118, v119, (const char **)&v233, 0);
      (*(void (**)(void, llvm::Value *, void **, void, void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), v118, &v229, *(void *)(a1 + 104), *(void *)(a1 + 112));
      uint64_t v120 = *(unsigned int *)(a1 + 64);
      if (v120)
      {
        uint64_t v121 = *(void *)(a1 + 56);
        uint64_t v122 = v121 + 16 * v120;
        do
        {
          llvm::Instruction::setMetadata(v118, *(_DWORD *)v121, *(llvm::MDNode **)(v121 + 8));
          v121 += 16;
        }
        while (v121 != v122);
      }
    }
  }
  __int16 v232 = 257;
  unsigned int v126 = operator new(0x60uLL);
  v126[13] = v126[13] & 0x38000000 | 1;
  uint64_t v127 = (llvm::Instruction *)(v126 + 8);
  *(void *)unsigned int v126 = 0;
  *((void *)v126 + 1) = 0;
  *((void *)v126 + 2) = 0;
  *((void *)v126 + 3) = v126 + 8;
  v237[0] = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v126 + 8), (uint64_t)v35, (uint64_t)v118, (const char **)&v233, 0, v97, 0);
  (*(void (**)(void, llvm::Instruction *, void **, void, void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), v127, &v229, *(void *)(a1 + 104), *(void *)(a1 + 112));
  uint64_t v128 = *(unsigned int *)(a1 + 64);
  if (v128)
  {
    uint64_t v215 = *(void *)(a1 + 56);
    uint64_t v216 = v215 + 16 * v128;
    do
    {
      llvm::Instruction::setMetadata(v127, *(_DWORD *)v215, *(llvm::MDNode **)(v215 + 8));
      v215 += 16;
    }
    while (v215 != v216);
  }
  sub_1CD2F4C94(v127, (llvm::MDNode **)v227, v29);
  uint64_t v130 = v226;
  if (v29)
  {
    uint64_t v131 = 0;
    while (1)
    {
      uint64_t v132 = (llvm::ValueAsMetadata *)v227[v131];
      if (v225)
      {
        int v133 = *(_DWORD *)(v225 + 32);
        int v233 = &v235;
        uint64_t v234 = 0x800000000;
        sub_1CCA47BAC((uint64_t)&v233, v133 * (int)v131, v133 + v133 * (int)v131);
        if ((*((unsigned char *)v132 + 23) & 0x10) != 0)
        {
          uint64_t v135 = ***(void ***)v132;
          uint64_t v136 = *(void *)(v135 + 152);
          uint64_t v137 = *(unsigned int *)(v135 + 168);
          if (!v137) {
            goto LABEL_241;
          }
          LODWORD(v138) = (v137 - 1) & ((v132 >> 4) ^ (v132 >> 9));
          uint64_t v139 = (llvm::ValueAsMetadata **)(v136 + 16 * v138);
          uint64_t v140 = *v139;
          if (*v139 != v132)
          {
            int v141 = 1;
            while (v140 != (llvm::ValueAsMetadata *)-4096)
            {
              int v142 = v138 + v141++;
              uint64_t v138 = v142 & (v137 - 1);
              uint64_t v140 = *(llvm::ValueAsMetadata **)(v136 + 16 * v138);
              if (v140 == v132)
              {
                uint64_t v139 = (llvm::ValueAsMetadata **)(v136 + 16 * v138);
                goto LABEL_242;
              }
            }
LABEL_241:
            uint64_t v139 = (llvm::ValueAsMetadata **)(v136 + 16 * v137);
          }
LABEL_242:
          uint64_t v156 = v139[1];
          uint64_t v159 = *(void *)v156;
          uint64_t v158 = (char *)v156 + 16;
          uint64_t v157 = v159;
        }
        else
        {
          uint64_t v157 = 0;
          uint64_t v158 = &byte_1CFBCE98E;
        }
        int v160 = v233;
        int v161 = (llvm::Type *)v234;
        __int16 v232 = 261;
        unint64_t v229 = v158;
        uint64_t v230 = v157;
        int v162 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v127, v134);
        uint64_t v163 = sub_1CB935A74(a1 + 56, (uint64_t)v127, (uint64_t)v162, v160, v161, (uint64_t)&v229);
        if (v233 != &v235) {
          free(v233);
        }
        uint64_t v115 = a1 + 56;
        goto LABEL_249;
      }
      uint64_t v143 = **(void **)(a1 + 120);
      int v144 = *(llvm::ConstantInt **)(v143 + 1960);
      unint64_t v145 = *(unsigned int *)(v143 + 1968);
      LODWORD(v234) = v145 >> 8;
      if (v145 >> 8 > 0x40) {
        operator new[]();
      }
      if (v145 <= 0xFF) {
        unint64_t v146 = 0;
      }
      else {
        unint64_t v146 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v145) + 63);
      }
      int v233 = (void *)(v146 & v131);
      uint64_t v147 = (unsigned __int8 *)llvm::ConstantInt::get(v144, (llvm::LLVMContext *)&v233, v129);
      uint64_t v130 = v226;
      if (v234 >= 0x41 && v233) {
        MEMORY[0x1D25D9CB0](v233, 0x1000C8000313F17);
      }
      if ((*((unsigned char *)v132 + 23) & 0x10) == 0)
      {
        uint64_t v165 = 0;
        uint64_t v166 = &byte_1CFBCE98E;
        goto LABEL_248;
      }
      uint64_t v148 = ***(void ***)v132;
      uint64_t v149 = *(void *)(v148 + 152);
      uint64_t v150 = *(unsigned int *)(v148 + 168);
      if (!v150) {
        goto LABEL_246;
      }
      LODWORD(v151) = (v150 - 1) & ((v132 >> 4) ^ (v132 >> 9));
      unint64_t v152 = (llvm::ValueAsMetadata **)(v149 + 16 * v151);
      int64_t v153 = *v152;
      if (*v152 != v132) {
        break;
      }
LABEL_247:
      uint64_t v164 = v152[1];
      uint64_t v167 = *(void *)v164;
      uint64_t v166 = (char *)v164 + 16;
      uint64_t v165 = v167;
LABEL_248:
      v237[0] = 261;
      int v233 = v166;
      uint64_t v234 = v165;
      uint64_t v163 = sub_1CB8445F4(v115, (unsigned __int8 *)v127, v147, (uint64_t)&v233);
LABEL_249:
      __int16 v168 = *(uint64_t ***)v132;
      if (*(void *)v163 != *(void *)v132)
      {
        v237[0] = 257;
        uint64_t v163 = sub_1CC240E88(v115, (uint64_t)v163, (uint64_t)v168, (uint64_t)&v233);
      }
      llvm::Value::doRAUW(v132, v163, (llvm::Value *)1);
      if (++v131 == v29) {
        goto LABEL_258;
      }
    }
    int v154 = 1;
    while (v153 != (llvm::ValueAsMetadata *)-4096)
    {
      int v155 = v151 + v154++;
      uint64_t v151 = v155 & (v150 - 1);
      int64_t v153 = *(llvm::ValueAsMetadata **)(v149 + 16 * v151);
      if (v153 == v132)
      {
        unint64_t v152 = (llvm::ValueAsMetadata **)(v149 + 16 * v151);
        goto LABEL_247;
      }
    }
LABEL_246:
    unint64_t v152 = (llvm::ValueAsMetadata **)(v149 + 16 * v150);
    goto LABEL_247;
  }
LABEL_258:
  if (!v118 || *((unsigned __int8 *)v118 + 16) < 0x1Cu || v118 == *((llvm::Value **)v130 - 4)) {
    int v118 = v127;
  }
  int v233 = v237;
  uint64_t v234 = (uint64_t)v237;
  uint64_t v235 = 16;
  int v236 = 0;
  unint64_t v229 = v231;
  HIDWORD(v230) = 16;
  v231[0] = v118;
  unsigned int v169 = 1;
  while (2)
  {
    uint64_t v170 = *((void *)v229 + --v169);
    LODWORD(v230) = v169;
    int v171 = *(_DWORD *)(v170 + 20);
    uint64_t v172 = v171 & 0x7FFFFFF;
    if ((v171 & 0x7FFFFFF) != 0)
    {
      uint64_t v173 = 0;
      while (2)
      {
        int v174 = *(_DWORD *)(v170 + 20);
        if ((v174 & 0x40000000) != 0) {
          uint64_t v175 = *(void *)(v170 - 8);
        }
        else {
          uint64_t v175 = v170 - 32 * (v174 & 0x7FFFFFF);
        }
        uint64_t v176 = *(void *)(v175 + 32 * v173);
        unsigned int v177 = *(unsigned __int8 *)(v176 + 16);
        if (v177 == 83 || v176 == 0 || v177 < 0x1C) {
          goto LABEL_319;
        }
        uint64_t v180 = *(void *)(v176 + 40);
        if (v180 != *((void *)v118 + 5)) {
          goto LABEL_319;
        }
        int v181 = *(__int16 *)(v180 + 18);
        if ((v181 & 0x80000000) == 0)
        {
          uint64_t v196 = *(void *)(v180 + 48);
          if (v196 != v180 + 40)
          {
            int v197 = 0;
            do
            {
              uint64_t v198 = v196 - 24;
              if (!v196) {
                uint64_t v198 = 0;
              }
              *(_DWORD *)(v198 + 56) = v197++;
              uint64_t v196 = *(void *)(v196 + 8);
            }
            while (v196 != v180 + 40);
          }
          *(_WORD *)(v180 + 18) = v181 | 0x8000;
        }
        if (*(_DWORD *)(v176 + 56) < *((_DWORD *)v118 + 14)) {
          goto LABEL_319;
        }
        uint64_t v182 = v234;
        uint64_t v183 = HIDWORD(v235);
        if ((void *)v234 == v233)
        {
          if (HIDWORD(v235))
          {
            unint64_t v184 = 0;
            uint64_t v185 = 8 * HIDWORD(v235);
            unsigned int v186 = (void *)v234;
            while (*v186 != v176)
            {
              if (*v186 == -2) {
                unint64_t v184 = v186;
              }
              ++v186;
              v185 -= 8;
              if (!v185)
              {
                if (!v184) {
                  goto LABEL_287;
                }
                *unint64_t v184 = v176;
                --v236;
                break;
              }
            }
LABEL_317:
            if (v230 >= (unint64_t)HIDWORD(v230)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v229 + v230) = v176;
            unsigned int v169 = v230 + 1;
            LODWORD(v230) = v230 + 1;
LABEL_319:
            if (++v173 == v172) {
              goto LABEL_328;
            }
            continue;
          }
LABEL_287:
          unsigned int v187 = v235;
          if (HIDWORD(v235) < v235)
          {
            ++HIDWORD(v235);
            *(void *)(v234 + 8 * v183) = v176;
            goto LABEL_317;
          }
        }
        else
        {
          unsigned int v187 = v235;
        }
        break;
      }
      if (3 * v187 <= 4 * (HIDWORD(v235) - v236))
      {
        if (v187 >= 0x40) {
          v187 *= 2;
        }
        else {
          unsigned int v187 = 128;
        }
      }
      else if (v187 - HIDWORD(v235) >= v187 >> 3)
      {
        goto LABEL_292;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v233, v187);
      unsigned int v187 = v235;
      uint64_t v182 = v234;
LABEL_292:
      unsigned int v188 = v187 - 1;
      unsigned int v189 = (v187 - 1) & ((v176 >> 4) ^ (v176 >> 9));
      int v190 = (void *)(v182 + 8 * v189);
      uint64_t v191 = *v190;
      if (*v190 == -1)
      {
        uint64_t v192 = 0;
LABEL_310:
        if (v192) {
          BOOL v199 = v192;
        }
        else {
          BOOL v199 = v190;
        }
        if (*v199 != v176)
        {
          if (*v199 == -2) {
            --v236;
          }
          else {
            ++HIDWORD(v235);
          }
          void *v199 = v176;
        }
      }
      else
      {
        uint64_t v192 = 0;
        int v193 = 1;
        while (v191 != v176)
        {
          if (v192) {
            BOOL v194 = 0;
          }
          else {
            BOOL v194 = v191 == -2;
          }
          if (v194) {
            uint64_t v192 = v190;
          }
          unsigned int v195 = v189 + v193++;
          unsigned int v189 = v195 & v188;
          int v190 = (void *)(v182 + 8 * (v195 & v188));
          uint64_t v191 = *v190;
          if (*v190 == -1) {
            goto LABEL_310;
          }
        }
      }
      goto LABEL_317;
    }
LABEL_328:
    if (v169) {
      continue;
    }
    break;
  }
  uint64_t v200 = *((void *)v118 + 5) + 40;
  if ((llvm::Value *)((char *)v118 + 24) != (llvm::Value *)v200)
  {
    uint64_t v201 = (char *)v118 + 24;
    do
    {
      if (v201) {
        uint64_t v202 = v201 - 24;
      }
      else {
        uint64_t v202 = 0;
      }
      uint64_t v203 = v233;
      if ((void *)v234 == v233)
      {
        unsigned int v204 = HIDWORD(v235);
        uint64_t v205 = (char *)(v234 + 8 * HIDWORD(v235));
        if (HIDWORD(v235))
        {
          uint64_t v206 = 0;
          while (*(char **)(v234 + v206) != v202)
          {
            v206 += 8;
            if (8 * HIDWORD(v235) == v206) {
              goto LABEL_353;
            }
          }
          uint64_t v205 = (char *)(v234 + v206);
        }
LABEL_353:
        uint64_t v203 = (void *)v234;
      }
      else
      {
        int v207 = v235 - 1;
        unsigned int v208 = (v235 - 1) & ((v202 >> 4) ^ (v202 >> 9));
        uint64_t v205 = (char *)(v234 + 8 * v208);
        int v209 = *(char **)v205;
        if (*(void *)v205 == -1)
        {
          int v210 = 0;
LABEL_362:
          if (v210) {
            uint64_t v205 = v210;
          }
          unsigned int v204 = HIDWORD(v235);
          if (*(char **)v205 != v202) {
            uint64_t v205 = (char *)(v234 + 8 * v235);
          }
        }
        else
        {
          int v210 = 0;
          int v211 = 1;
          while (v209 != v202)
          {
            if (v210) {
              BOOL v212 = 0;
            }
            else {
              BOOL v212 = v209 == (char *)-2;
            }
            if (v212) {
              int v210 = v205;
            }
            unsigned int v213 = v208 + v211++;
            unsigned int v208 = v213 & v207;
            uint64_t v205 = (char *)(v234 + 8 * (v213 & v207));
            int v209 = *(char **)v205;
            if (*(void *)v205 == -1) {
              goto LABEL_362;
            }
          }
          unsigned int v204 = HIDWORD(v235);
        }
      }
      if ((void *)v234 == v203) {
        unsigned int v214 = v204;
      }
      else {
        unsigned int v214 = v235;
      }
      if (v205 != (char *)(v234 + 8 * v214)) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      uint64_t v201 = (char *)*((void *)v201 + 1);
    }
    while (v201 != (char *)v200);
  }
  if (v229 != v231) {
    free(v229);
  }
  if ((void *)v234 != v233) {
    free((void *)v234);
  }
  sub_1CD2F4D94(v227, v29);
  int v78 = 1;
  return (v228 | v78) & 1;
}

uint64_t sub_1CD2F125C(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4)
{
  for (int i = 0; ; int i = v183 | sub_1CD2F125C(a1))
  {
    int v183 = i;
    uint64_t v9 = *a2;
    if (a3)
    {
      uint64_t v10 = 8 * a3;
      uint64_t v11 = a2;
      do
      {
        uint64_t v12 = **((void **)*v11 - 8);
        int v13 = (*(_DWORD *)(v12 + 8) & 0xFE) == 0x12
            ? *(unsigned __int8 *)(**(void **)(v12 + 16) + 8)
            : *(_DWORD *)(v12 + 8);
        if (v13 == 13) {
          break;
        }
        if (v13 == 15)
        {
          BOOL v14 = *a2;
          unsigned int v15 = **(llvm::IntegerType ***)(*(void *)a1 + 40);
          int v17 = (llvm::LLVMContext *)sub_1CB83544C(*(void *)(a1 + 48), **((void **)*v11 - 8));
          if (v16 == 1) {
          uint64_t v12 = llvm::IntegerType::get(v15, v17);
          }
          uint64_t v9 = v14;
          break;
        }
        ++v11;
        v10 -= 8;
      }
      while (v10);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v19 = sub_1CB83544C(*(void *)(a1 + 48), v12);
    if (v18 == 1) {
    uint64_t v20 = **((void **)v9 - 4);
    }
    unsigned int v21 = *(_DWORD *)(v20 + 8);
    if ((v21 & 0xFE) == 0x12) {
      unsigned int v21 = *(_DWORD *)(**(void **)(v20 + 16) + 8);
    }
    uint64_t v22 = &a2[a3];
    unsigned int v177 = v21 >> 8;
    unsigned int v23 = (*(uint64_t (**)(void))(***(void ***)(a1 + 40) + 1064))(**(void **)(a1 + 40));
    if (!v19
      || (a3 & 0xFFFFFFFE) == 0
      || (v24.i32[0] = v19, uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24), v25.i16[0] = vaddlv_u8(v25), v25.i32[0] > 1u)
      || (uint64_t v26 = v23 / v19, v26 <= 1))
    {
      if (!a3) {
        goto LABEL_176;
      }
      while (1)
      {
        uint64_t v38 = *(void *)(a4 + 8);
        uint64_t v39 = *a2;
        uint64_t v40 = *(unsigned int *)(a4 + 20);
        if (v38 != *(void *)a4) {
          break;
        }
        if (!v40) {
          goto LABEL_48;
        }
        uint64_t v41 = 0;
        uint64_t v42 = 8 * v40;
        uint64_t v43 = *(unsigned __int16 ***)(a4 + 8);
        do
        {
          if (*v43 == v39) {
            goto LABEL_72;
          }
          if (*v43 == (unsigned __int16 *)-2) {
            uint64_t v41 = v43;
          }
          ++v43;
          v42 -= 8;
        }
        while (v42);
        if (v41)
        {
          char *v41 = v39;
          --*(_DWORD *)(a4 + 24);
        }
        else
        {
LABEL_48:
          unsigned int v44 = *(_DWORD *)(a4 + 16);
          if (v40 >= v44) {
            goto LABEL_51;
          }
          *(_DWORD *)(a4 + 20) = v40 + 1;
          *(void *)(v38 + 8 * v40) = v39;
        }
LABEL_72:
        if (++a2 == v22) {
          goto LABEL_176;
        }
      }
      unsigned int v44 = *(_DWORD *)(a4 + 16);
LABEL_51:
      if (3 * v44 <= 4 * ((int)v40 - *(_DWORD *)(a4 + 24)))
      {
        if (v44 >= 0x40) {
          v44 *= 2;
        }
        else {
          unsigned int v44 = 128;
        }
      }
      else if (v44 - v40 >= v44 >> 3)
      {
        goto LABEL_53;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v44);
      unsigned int v44 = *(_DWORD *)(a4 + 16);
      uint64_t v38 = *(void *)(a4 + 8);
LABEL_53:
      unsigned int v45 = v44 - 1;
      unsigned int v46 = (v44 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      unsigned int v47 = (unsigned __int16 **)(v38 + 8 * v46);
      uint64_t v48 = *v47;
      if (*v47 == (unsigned __int16 *)-1)
      {
        uint64_t v49 = 0;
LABEL_65:
        if (v49) {
          unsigned int v53 = v49;
        }
        else {
          unsigned int v53 = v47;
        }
        if (*v53 != v39)
        {
          if (*v53 == (unsigned __int16 *)-2) {
            --*(_DWORD *)(a4 + 24);
          }
          else {
            ++*(_DWORD *)(a4 + 20);
          }
          *unsigned int v53 = v39;
        }
      }
      else
      {
        uint64_t v49 = 0;
        int v50 = 1;
        while (v48 != v39)
        {
          if (v49) {
            BOOL v51 = 0;
          }
          else {
            BOOL v51 = v48 == (unsigned __int16 *)-2;
          }
          if (v51) {
            uint64_t v49 = v47;
          }
          unsigned int v52 = v46 + v50++;
          unsigned int v46 = v52 & v45;
          unsigned int v47 = (unsigned __int16 **)(v38 + 8 * (v52 & v45));
          uint64_t v48 = *v47;
          if (*v47 == (unsigned __int16 *)-1) {
            goto LABEL_65;
          }
        }
      }
      goto LABEL_72;
    }
    uint64_t v176 = (const llvm::DataLayout *)v9;
    unint64_t v27 = v9[9];
    uint64_t v182 = sub_1CD2F3F04(a1, a2, a3);
    if (v28 == 1)
    {
      uint64_t v70 = *v182;
      uint64_t v71 = *(void *)(a4 + 8);
      uint64_t v72 = *(unsigned int *)(a4 + 20);
      if (v71 == *(void *)a4)
      {
        if (v72)
        {
          uint64_t v73 = 0;
          uint64_t v74 = 8 * v72;
          uint64_t v75 = *(void **)(a4 + 8);
          do
          {
            if (*v75 == v70) {
              goto LABEL_176;
            }
            if (*v75 == -2) {
              uint64_t v73 = v75;
            }
            ++v75;
            v74 -= 8;
          }
          while (v74);
          if (v73)
          {
            int v77 = 0;
            *uint64_t v73 = v70;
            --*(_DWORD *)(a4 + 24);
            return (v183 | v77) & 1;
          }
        }
        unsigned int v76 = *(_DWORD *)(a4 + 16);
        if (v72 < v76)
        {
          int v77 = 0;
          *(_DWORD *)(a4 + 20) = v72 + 1;
          *(void *)(v71 + 8 * v72) = v70;
          return (v183 | v77) & 1;
        }
      }
      else
      {
        unsigned int v76 = *(_DWORD *)(a4 + 16);
      }
      if (3 * v76 <= 4 * ((int)v72 - *(_DWORD *)(a4 + 24)))
      {
        if (v76 >= 0x40) {
          v76 *= 2;
        }
        else {
          unsigned int v76 = 128;
        }
      }
      else if (v76 - v72 >= v76 >> 3)
      {
        goto LABEL_181;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v76);
      unsigned int v76 = *(_DWORD *)(a4 + 16);
      uint64_t v71 = *(void *)(a4 + 8);
LABEL_181:
      unsigned int v102 = v76 - 1;
      unsigned int v103 = (v76 - 1) & ((v70 >> 4) ^ (v70 >> 9));
      int v104 = (void *)(v71 + 8 * v103);
      uint64_t v105 = *v104;
      if (*v104 == -1)
      {
        unsigned int v106 = 0;
LABEL_193:
        if (v106) {
          int v110 = v106;
        }
        else {
          int v110 = v104;
        }
        if (*v110 != v70)
        {
          if (*v110 == -2) {
            --*(_DWORD *)(a4 + 24);
          }
          else {
            ++*(_DWORD *)(a4 + 20);
          }
          int v77 = 0;
          *int v110 = v70;
          return (v183 | v77) & 1;
        }
      }
      else
      {
        unsigned int v106 = 0;
        int v107 = 1;
        while (v105 != v70)
        {
          if (v106) {
            BOOL v108 = 0;
          }
          else {
            BOOL v108 = v105 == -2;
          }
          if (v108) {
            unsigned int v106 = v104;
          }
          unsigned int v109 = v103 + v107++;
          unsigned int v103 = v109 & v102;
          int v104 = (void *)(v71 + 8 * (v109 & v102));
          uint64_t v105 = *v104;
          if (*v104 == -1) {
            goto LABEL_193;
          }
        }
      }
LABEL_176:
      int v77 = 0;
      return (v183 | v77) & 1;
    }
    uint64_t v29 = v28;
    if (!v28)
    {
      while (1)
      {
        uint64_t v54 = *(void *)(a4 + 8);
        uint64_t v55 = *a2;
        uint64_t v56 = *(unsigned int *)(a4 + 20);
        if (v54 != *(void *)a4) {
          break;
        }
        if (!v56) {
          goto LABEL_88;
        }
        uint64_t v57 = 0;
        uint64_t v58 = 8 * v56;
        uint64_t v59 = *(unsigned __int16 ***)(a4 + 8);
        do
        {
          if (*v59 == v55) {
            goto LABEL_112;
          }
          if (*v59 == (unsigned __int16 *)-2) {
            uint64_t v57 = v59;
          }
          ++v59;
          v58 -= 8;
        }
        while (v58);
        if (v57)
        {
          *uint64_t v57 = v55;
          --*(_DWORD *)(a4 + 24);
        }
        else
        {
LABEL_88:
          unsigned int v60 = *(_DWORD *)(a4 + 16);
          if (v56 >= v60) {
            goto LABEL_91;
          }
          *(_DWORD *)(a4 + 20) = v56 + 1;
          *(void *)(v54 + 8 * v56) = v55;
        }
LABEL_112:
        if (++a2 == v22) {
          goto LABEL_176;
        }
      }
      unsigned int v60 = *(_DWORD *)(a4 + 16);
LABEL_91:
      if (3 * v60 <= 4 * ((int)v56 - *(_DWORD *)(a4 + 24)))
      {
        if (v60 >= 0x40) {
          v60 *= 2;
        }
        else {
          unsigned int v60 = 128;
        }
      }
      else if (v60 - v56 >= v60 >> 3)
      {
        goto LABEL_93;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v60);
      unsigned int v60 = *(_DWORD *)(a4 + 16);
      uint64_t v54 = *(void *)(a4 + 8);
LABEL_93:
      unsigned int v61 = v60 - 1;
      unsigned int v62 = (v60 - 1) & ((v55 >> 4) ^ (v55 >> 9));
      unsigned int v63 = (unsigned __int16 **)(v54 + 8 * v62);
      int v64 = *v63;
      if (*v63 == (unsigned __int16 *)-1)
      {
        unsigned int v65 = 0;
LABEL_105:
        if (v65) {
          unsigned int v69 = v65;
        }
        else {
          unsigned int v69 = v63;
        }
        if (*v69 != v55)
        {
          if (*v69 == (unsigned __int16 *)-2) {
            --*(_DWORD *)(a4 + 24);
          }
          else {
            ++*(_DWORD *)(a4 + 20);
          }
          _DWORD *v69 = v55;
        }
      }
      else
      {
        unsigned int v65 = 0;
        int v66 = 1;
        while (v64 != v55)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == (unsigned __int16 *)-2;
          }
          if (v67) {
            unsigned int v65 = v63;
          }
          unsigned int v68 = v62 + v66++;
          unsigned int v62 = v68 & v61;
          unsigned int v63 = (unsigned __int16 **)(v54 + 8 * (v68 & v61));
          int v64 = *v63;
          if (*v63 == (unsigned __int16 *)-1) {
            goto LABEL_105;
          }
        }
      }
      goto LABEL_112;
    }
    int v30 = *(unsigned __int8 *)(v12 + 8);
    uint64_t v31 = v30 == 18 ? v12 : 0;
    uint64_t v175 = v31;
    if (v31)
    {
      uint64_t v32 = (llvm::FixedVectorType *)v12;
      if ((v30 & 0xFE) == 0x12) {
        uint64_t v32 = **(llvm::FixedVectorType ***)(v12 + 16);
      }
      uint64_t v28 = (*(_DWORD *)(v31 + 32) * v28);
    }
    else
    {
      uint64_t v32 = (llvm::FixedVectorType *)v12;
    }
    double v33 = llvm::FixedVectorType::get(v32, (llvm::Type *)v28);
    unsigned int v34 = v19 >> 3;
    int v174 = v35;
    unsigned int v36 = (*(uint64_t (**)(void, uint64_t, uint64_t, void, double))(***(void ***)(a1 + 40) + 1128))(**(void **)(a1 + 40), v26, v19, (v19 >> 3) * v29, v33);
    if (v26 >= v29 && (v26 == v36 || v36 >= v29)) {
      break;
    }
    a3 = v29 - v36;
    a2 = (unsigned __int16 **)&v182[v36];
  }
  uint64_t v171 = __clz(1 << (v27 >> 1)) ^ 0x3F;
  int v78 = v182;
  do
  {
    uint64_t v79 = *(void *)(a4 + 8);
    uint64_t v80 = *v78;
    uint64_t v81 = *(unsigned int *)(a4 + 20);
    if (v79 != *(void *)a4)
    {
      unsigned int v85 = *(_DWORD *)(a4 + 16);
      goto LABEL_142;
    }
    if (!v81)
    {
LABEL_139:
      unsigned int v85 = *(_DWORD *)(a4 + 16);
      if (v81 < v85)
      {
        *(_DWORD *)(a4 + 20) = v81 + 1;
        *(void *)(v79 + 8 * v81) = v80;
        goto LABEL_163;
      }
LABEL_142:
      if (3 * v85 <= 4 * ((int)v81 - *(_DWORD *)(a4 + 24)))
      {
        if (v85 >= 0x40) {
          v85 *= 2;
        }
        else {
          unsigned int v85 = 128;
        }
      }
      else if (v85 - v81 >= v85 >> 3)
      {
        goto LABEL_144;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v85);
      unsigned int v85 = *(_DWORD *)(a4 + 16);
      uint64_t v79 = *(void *)(a4 + 8);
LABEL_144:
      unsigned int v86 = v85 - 1;
      unsigned int v87 = (v85 - 1) & ((v80 >> 4) ^ (v80 >> 9));
      unsigned int v88 = (void *)(v79 + 8 * v87);
      uint64_t v89 = *v88;
      if (*v88 == -1)
      {
        int v90 = 0;
LABEL_156:
        if (v90) {
          BOOL v94 = v90;
        }
        else {
          BOOL v94 = v88;
        }
        if (*v94 != v80)
        {
          if (*v94 == -2) {
            --*(_DWORD *)(a4 + 24);
          }
          else {
            ++*(_DWORD *)(a4 + 20);
          }
          *BOOL v94 = v80;
        }
      }
      else
      {
        int v90 = 0;
        int v91 = 1;
        while (v89 != v80)
        {
          if (v90) {
            BOOL v92 = 0;
          }
          else {
            BOOL v92 = v89 == -2;
          }
          if (v92) {
            int v90 = v88;
          }
          unsigned int v93 = v87 + v91++;
          unsigned int v87 = v93 & v86;
          unsigned int v88 = (void *)(v79 + 8 * (v93 & v86));
          uint64_t v89 = *v88;
          if (*v88 == -1) {
            goto LABEL_156;
          }
        }
      }
      goto LABEL_163;
    }
    uint64_t v82 = 0;
    uint64_t v83 = 8 * v81;
    uint64_t v84 = *(void **)(a4 + 8);
    while (*v84 != v80)
    {
      if (*v84 == -2) {
        uint64_t v82 = v84;
      }
      ++v84;
      v83 -= 8;
      if (!v83)
      {
        if (!v82) {
          goto LABEL_139;
        }
        *uint64_t v82 = v80;
        --*(_DWORD *)(a4 + 24);
        break;
      }
    }
LABEL_163:
    ++v78;
  }
  while (v78 != &v182[v29]);
  uint64_t v95 = v171;
  if (!sub_1CD2F4B3C((void ***)a1, v34 * v29, v177, v171)) {
    goto LABEL_201;
  }
  uint64_t v97 = *((void *)v176 - 4);
  unsigned int v98 = *(_DWORD *)(*(void *)v97 + 8);
  if ((v98 & 0xFE) == 0x12) {
    unsigned int v98 = *(_DWORD *)(**(void **)(*(void *)v97 + 16) + 8);
  }
  uint64_t v99 = *(void *)(a1 + 48);
  if (*(_DWORD *)(v99 + 4) != v98 >> 8) {
    goto LABEL_250;
  }
  unsigned __int8 v100 = llvm::getOrEnforceKnownAlignment(v97, 258, (unsigned __int8 *)v99, v176, 0, *(const llvm::DataLayout **)(a1 + 24));
  if (v171 > v100) {
    goto LABEL_176;
  }
  uint64_t v95 = v100;
LABEL_201:
  if (((*(uint64_t (**)(void, void, uint64_t, void))(***(void ***)(a1 + 40) + 1096))(**(void **)(a1 + 40), v34 * v29, v95, v177) & 1) == 0)
  {
LABEL_250:
    int v145 = sub_1CD2F125C(a1);
    int v77 = v145 | sub_1CD2F125C(a1);
    return (v183 | v77) & 1;
  }
  sub_1CD2F4BE8(v182, v29);
  uint64_t v111 = 0;
  unsigned int v112 = (uint64_t *)(a1 + 56);
  uint64_t v114 = v113 - 24;
  if (!v113) {
    uint64_t v114 = 0;
  }
  *(void *)(a1 + 104) = *(void *)(v114 + 40);
  *(void *)(a1 + 112) = v114 + 24;
  uint64_t v115 = *(unsigned __int8 **)(v114 + 48);
  v184[0] = v115;
  if (v115)
  {
    llvm::MetadataTracking::track((uint64_t)v184, v115, 2);
    uint64_t v111 = v184[0];
  }
  sub_1CB8461A4(a1 + 56, 0, v111);
  if (v184[0])
  {
    int v163 = *(unsigned __int8 *)v184[0];
    if ((v163 - 4) > 0x1E)
    {
      if ((v163 - 3) >= 0xFFFFFFFE) {
        uint64_t v166 = v184[0];
      }
      else {
        uint64_t v166 = 0;
      }
      if ((v163 - 3) < 0xFFFFFFFE)
      {
        if (v163 == 3) {
          *(void *)(v184[0] + 8) = 0;
        }
        goto LABEL_207;
      }
      unint64_t v165 = v166 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v184[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v184[0] + 12)) {
        goto LABEL_207;
      }
      uint64_t v164 = *(void *)(v184[0] + 16);
      if ((v164 & 4) == 0) {
        goto LABEL_207;
      }
      unint64_t v165 = v164 & 0xFFFFFFFFFFFFFFF8;
      if (!v165) {
        goto LABEL_207;
      }
    }
    unsigned int v186 = (const char *)v184;
    sub_1CC5FA668(v165 + 16, &v186);
  }
LABEL_207:
  int v118 = (unsigned __int8 *)llvm::PoisonValue::get(v174, v116);
  uint64_t v119 = v175;
  uint64_t v180 = a1 + 56;
  __int16 v172 = v95;
  if (!v175)
  {
    if (!v29) {
      goto LABEL_268;
    }
    uint64_t v146 = 0;
    while (1)
    {
      uint64_t v147 = *(unsigned __int8 **)(v182[v146] - 64);
      uint64_t v148 = *(const llvm::APInt **)v147;
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
        break;
      }
      uint64_t v149 = (const llvm::APInt *)v12;
      if (v148 != (const llvm::APInt *)v12) {
        goto LABEL_257;
      }
LABEL_258:
      uint64_t v150 = **(void **)(a1 + 120);
      uint64_t v151 = *(llvm::ConstantInt **)(v150 + 1960);
      unint64_t v152 = *(unsigned int *)(v150 + 1968);
      unsigned int v187 = v152 >> 8;
      if (v152 >> 8 > 0x40) {
        operator new[]();
      }
      if (v152 <= 0xFF) {
        unint64_t v153 = 0;
      }
      else {
        unint64_t v153 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v152) + 63);
      }
      unsigned int v186 = (const char *)(v153 & v146);
      int v154 = (unsigned __int8 *)llvm::ConstantInt::get(v151, (llvm::LLVMContext *)&v186, v149);
      unsigned int v112 = (uint64_t *)(a1 + 56);
      if (v187 >= 0x41 && v186) {
        MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
      }
      __int16 v188 = 257;
      int v118 = (unsigned __int8 *)sub_1CB84478C(v180, v118, v147, v154, (uint64_t)&v186);
      if (v29 == ++v146) {
        goto LABEL_268;
      }
    }
    uint64_t v149 = **(const llvm::APInt ***)(v12 + 16);
    if (v148 == v149) {
      goto LABEL_258;
    }
LABEL_257:
    __int16 v188 = 257;
    uint64_t v147 = (unsigned __int8 *)sub_1CC240E88((uint64_t)v112, (uint64_t)v147, (uint64_t)v149, (uint64_t)&v186);
    goto LABEL_258;
  }
  if (v29)
  {
    uint64_t v120 = 0;
    int v170 = *(_DWORD *)(v175 + 32);
    while (1)
    {
      uint64_t v181 = *(unsigned int *)(v119 + 32);
      uint64_t v173 = v120;
      if (v181) {
        break;
      }
LABEL_248:
      uint64_t v120 = v173 + 1;
      uint64_t v119 = v175;
      if (v173 + 1 == v29) {
        goto LABEL_268;
      }
    }
    uint64_t v121 = 0;
    size_t v179 = v182[v120];
    int v178 = v170 * v120;
    while (2)
    {
      uint64_t v122 = *(unsigned __int8 **)(v179 - 64);
      uint64_t v123 = **(void **)(a1 + 120);
      uint64_t v124 = *(llvm::ConstantInt **)(v123 + 1960);
      unint64_t v125 = *(unsigned int *)(v123 + 1968);
      unsigned int v187 = v125 >> 8;
      if (v125 >> 8 > 0x40) {
        operator new[]();
      }
      if (v125 <= 0xFF) {
        unint64_t v126 = 0;
      }
      else {
        unint64_t v126 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v125) + 63);
      }
      unsigned int v186 = (const char *)(v126 & v121);
      uint64_t v127 = (unsigned __int8 *)llvm::ConstantInt::get(v124, (llvm::LLVMContext *)&v186, v117);
      if (v187 >= 0x41 && v186) {
        MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
      }
      __int16 v188 = 257;
      uint64_t v128 = sub_1CB8445F4((uint64_t)v112, v122, v127, (uint64_t)&v186);
      uint64_t v130 = (unsigned __int8 *)v128;
      uint64_t v131 = *(void *)v128;
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
      {
        uint64_t v132 = **(void **)(v12 + 16);
        if (v131 == v132) {
          goto LABEL_231;
        }
      }
      else
      {
        uint64_t v132 = v12;
        if (v131 == v12) {
          goto LABEL_231;
        }
      }
      __int16 v185 = 257;
      if (v131 != v132)
      {
        if (*((unsigned __int8 *)v128 + 16) <= 0x14u)
        {
          uint64_t v130 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(a1 + 128) + 224))(*(void *)(a1 + 128), 49, v128, v132);
          if (v130) {
            BOOL v136 = v130[16] >= 0x1Cu;
          }
          else {
            BOOL v136 = 0;
          }
          if (v136)
          {
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), v130, v184, *(void *)(a1 + 104), *(void *)(a1 + 112));
            uint64_t v142 = *(unsigned int *)(a1 + 64);
            if (v142)
            {
              uint64_t v143 = *(void *)(a1 + 56);
              uint64_t v144 = v143 + 16 * v142;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v130, *(_DWORD *)v143, *(llvm::MDNode **)(v143 + 8));
                v143 += 16;
              }
              while (v143 != v144);
            }
          }
        }
        else
        {
          __int16 v188 = 257;
          uint64_t v130 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v128, v132, &v186, 0);
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), v130, v184, *(void *)(a1 + 104), *(void *)(a1 + 112));
          uint64_t v133 = *(unsigned int *)(a1 + 64);
          if (v133)
          {
            uint64_t v134 = *(void *)(a1 + 56);
            uint64_t v135 = v134 + 16 * v133;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v130, *(_DWORD *)v134, *(llvm::MDNode **)(v134 + 8));
              v134 += 16;
            }
            while (v134 != v135);
          }
        }
      }
LABEL_231:
      uint64_t v137 = **(void **)(a1 + 120);
      uint64_t v138 = *(llvm::ConstantInt **)(v137 + 1960);
      unint64_t v139 = *(unsigned int *)(v137 + 1968);
      unsigned int v187 = v139 >> 8;
      if (v139 >> 8 > 0x40) {
        operator new[]();
      }
      if (v139 <= 0xFF) {
        LODWORD(v140) = 0;
      }
      else {
        unint64_t v140 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v139) + 63);
      }
      unsigned int v186 = (const char *)(v140 & (v178 + v121));
      int v141 = (unsigned __int8 *)llvm::ConstantInt::get(v138, (llvm::LLVMContext *)&v186, v129);
      unsigned int v112 = (uint64_t *)(a1 + 56);
      if (v187 >= 0x41 && v186) {
        MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
      }
      __int16 v188 = 257;
      int v118 = (unsigned __int8 *)sub_1CB84478C(v180, v118, v130, v141, (uint64_t)&v186);
      if (++v121 == v181) {
        goto LABEL_248;
      }
      continue;
    }
  }
LABEL_268:
  int v155 = (unsigned __int8 *)*((void *)v176 - 4);
  unint64_t v156 = llvm::PointerType::get(v174, (llvm::Type *)v177);
  __int16 v185 = 257;
  if (*(void *)v155 == v156) {
    goto LABEL_278;
  }
  if (v155[16] > 0x14u)
  {
    __int16 v188 = 257;
    int v155 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v155, v156, &v186, 0);
    (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), v155, v184, *(void *)(a1 + 104), *(void *)(a1 + 112));
    uint64_t v157 = *(unsigned int *)(a1 + 64);
    if (v157)
    {
      uint64_t v158 = *(void *)(a1 + 56);
      uint64_t v159 = v158 + 16 * v157;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v155, *(_DWORD *)v158, *(llvm::MDNode **)(v158 + 8));
        v158 += 16;
      }
      while (v158 != v159);
    }
    goto LABEL_278;
  }
  int v155 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 128) + 224))(*(void *)(a1 + 128), 49, v155, v156);
  if (v155 && v155[16] >= 0x1Cu)
  {
    (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), v155, v184, *(void *)(a1 + 104), *(void *)(a1 + 112));
    uint64_t v167 = *(unsigned int *)(a1 + 64);
    if (v167)
    {
      uint64_t v168 = *(void *)(a1 + 56);
      uint64_t v169 = v168 + 16 * v167;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v155, *(_DWORD *)v168, *(llvm::MDNode **)(v168 + 8));
        v168 += 16;
      }
      while (v168 != v169);
    }
    __int16 v161 = v172;
    unsigned int v112 = (uint64_t *)v180;
  }
  else
  {
LABEL_278:
    __int16 v161 = v172;
  }
  int v162 = sub_1CC27BF8C(v112, (uint64_t)v118, (uint64_t)v155, v161 | 0x100u, 0);
  sub_1CD2F4C94(v162, (llvm::MDNode **)v182, v29);
  sub_1CD2F4D94(v182, v29);
  int v77 = 1;
  return (v183 | v77) & 1;
}

uint64_t sub_1CD2F2478(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 60 || (uint64_t result = 0xFFFFFFFFLL, a1) && v2 == 61)
  {
    uint64_t v4 = **(void **)(a1 - 32);
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    if ((v5 & 0xFE) == 0x12) {
      unsigned int v5 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
    }
    return v5 >> 8;
  }
  return result;
}

uint64_t sub_1CD2F24C8(uint64_t a1, llvm::GlobalValue *a2, llvm::GlobalValue *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  unsigned int v13 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v13 & 0xFE) == 0x12) {
    unsigned int v13 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v13 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v14 = v13 >> 8;
  uint64_t v15 = *(unsigned int *)(v12 + 240);
  uint64_t v16 = *(void *)(v12 + 232);
  if (v15)
  {
    uint64_t v16 = *(void *)(v12 + 232);
    unint64_t v17 = *(unsigned int *)(v12 + 240);
    do
    {
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = v16 + 16 * (v17 >> 1);
      unsigned int v20 = *(_DWORD *)(v19 + 8);
      uint64_t v21 = v19 + 16;
      v17 += ~(v17 >> 1);
      if (v20 < v14) {
        uint64_t v16 = v21;
      }
      else {
        unint64_t v17 = v18;
      }
    }
    while (v17);
  }
  if (v16 == *(void *)(v12 + 232) + 16 * v15 || *(_DWORD *)(v16 + 8) != v14) {
LABEL_12:
  }
    uint64_t v16 = *(void *)(v12 + 232);
  unsigned int v22 = *(_DWORD *)(v16 + 4);
  unsigned int v213 = v22;
  if (v22 > 0x40) {
    operator new[]();
  }
  unint64_t v212 = 0;
  unsigned int v211 = v22;
  __src = 0;
  unsigned int v23 = llvm::Value::stripAndAccumulateConstantOffsets(a2, (llvm::DataLayout *)v12, (llvm::APInt *)&v212, 0, 0, 0, a7);
  uint8x8_t v25 = llvm::Value::stripAndAccumulateConstantOffsets(a3, *(llvm::DataLayout **)(a1 + 48), (llvm::APInt *)&__src, 0, 0, 0, v24);
  int v27 = sub_1CB83544C(*(void *)(a1 + 48), *(void *)v23) + 7;
  if (v26 == 1) {
  unint64_t v29 = (sub_1CB83544C(*(void *)(a1 + 48), *(void *)v25) + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  if (v28 == 1) {
  if ((v27 & 0xFFFFFFF8) != v29)
  }
  {
    uint64_t v37 = 0;
    goto LABEL_127;
  }
  unsigned int v30 = v27 & 0xFFFFFFF8;
  llvm::APInt::sextOrTrunc((uint64_t)&v212, v30, (uint64_t)&v223);
  if (v213 >= 0x41 && v212) {
    MEMORY[0x1D25D9CB0](v212, 0x1000C8000313F17);
  }
  unint64_t v212 = v223;
  unsigned int v213 = v224;
  llvm::APInt::sextOrTrunc((uint64_t)&__src, v30, (uint64_t)&v223);
  if (v211 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  __src = (void *)v223;
  unsigned int v211 = v224;
  llvm::APInt::sextOrTrunc(a4, v30, (uint64_t)&v223);
  if (*(_DWORD *)(a4 + 8) >= 0x41u && *(void *)a4) {
    MEMORY[0x1D25D9CB0](*(void *)a4, 0x1000C8000313F17);
  }
  unint64_t v32 = v223;
  *(void *)a4 = v223;
  unsigned int v33 = v224;
  *(_DWORD *)(a4 + 8) = v224;
  unsigned int v34 = v211;
  if (v211 >= 0x41) {
    operator new[]();
  }
  if (v211) {
    unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v211;
  }
  else {
    unint64_t v35 = 0;
  }
  uint64_t v36 = v35 & ((unint64_t)__src - v212);
  if (v23 == v25)
  {
    uint64_t v37 = v36 == v32;
    goto LABEL_127;
  }
  unsigned int v205 = v211;
  if (v33 >= 0x41) {
    operator new[]();
  }
  if (v33) {
    unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
  }
  else {
    unint64_t v38 = 0;
  }
  uint64_t v39 = (void *)(v38 & (*(void *)a4 - v36));
  unsigned int v209 = v33;
  unsigned int v208 = v39;
  uint64_t v40 = *(void *)(a1 + 32);
  uint64_t v41 = *(void *)(v40 + 104);
  unsigned int v42 = *(_DWORD *)(v40 + 120);
  if (!v42)
  {
LABEL_46:
    uint64_t v45 = v41 + 48 * v42;
    goto LABEL_47;
  }
  unsigned int v43 = v42 - 1;
  unsigned int v44 = (v42 - 1) & ((v23 >> 4) ^ (v23 >> 9));
  uint64_t v45 = v41 + 48 * v44;
  unsigned int v46 = *(llvm::GlobalValue **)(v45 + 24);
  if (v46 != v23)
  {
    int v47 = 1;
    while (v46 != (llvm::GlobalValue *)-4096)
    {
      unsigned int v48 = v44 + v47++;
      unsigned int v44 = v48 & v43;
      uint64_t v45 = v41 + 48 * (v48 & v43);
      unsigned int v46 = *(llvm::GlobalValue **)(v45 + 24);
      if (v46 == v23) {
        goto LABEL_47;
      }
    }
    goto LABEL_46;
  }
LABEL_47:
  if (v45 != v41 + 48 * v42)
  {
    SCEVIter = *(const llvm::APInt **)(v45 + 40);
    if (SCEVIter)
    {
      if (v42) {
        goto LABEL_50;
      }
LABEL_56:
      uint64_t v51 = v41 + 48 * v42;
      goto LABEL_57;
    }
  }
  SCEVIter = (const llvm::APInt *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 32), (unint64_t)v23);
  uint64_t v40 = *(void *)(a1 + 32);
  uint64_t v41 = *(void *)(v40 + 104);
  unsigned int v42 = *(_DWORD *)(v40 + 120);
  if (!v42) {
    goto LABEL_56;
  }
LABEL_50:
  unsigned int v50 = (v42 - 1) & ((v25 >> 4) ^ (v25 >> 9));
  uint64_t v51 = v41 + 48 * v50;
  unsigned int v52 = *(llvm::GlobalValue **)(v51 + 24);
  if (v52 != v25)
  {
    int v53 = 1;
    while (v52 != (llvm::GlobalValue *)-4096)
    {
      unsigned int v54 = v50 + v53++;
      unsigned int v50 = v54 & (v42 - 1);
      uint64_t v51 = v41 + 48 * v50;
      unsigned int v52 = *(llvm::GlobalValue **)(v51 + 24);
      if (v52 == v25) {
        goto LABEL_57;
      }
    }
    goto LABEL_56;
  }
LABEL_57:
  if (v51 == v41 + 48 * v42 || (uint64_t v55 = *(llvm::SCEV **)(v51 + 40)) == 0)
  {
    uint64_t v55 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v40, (unint64_t)v25);
    uint64_t v40 = *(void *)(a1 + 32);
  }
  uint64_t v56 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)v40, (llvm::LLVMContext *)&v208, v31);
  unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v40, v56);
  uint64_t v58 = *(void *)(a1 + 32);
  unint64_t v223 = (unint64_t)&v225;
  uint64_t v225 = (uint64_t)SCEVIter;
  unint64_t v226 = Constant;
  uint64_t v224 = 0x200000002;
  uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(v58, (unint64_t **)&v223, 0, 0);
  if ((uint64_t *)v223 != &v225) {
    free((void *)v223);
  }
  if ((llvm::SCEV *)AddExpr == v55
    || Constant == llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 32), v55, SCEVIter, 0, 0))
  {
    uint64_t v37 = 1;
    goto LABEL_121;
  }
  unsigned int v207 = v209;
  if (v209 > 0x40) {
    operator new[]();
  }
  uint64_t v206 = v208;
  int v60 = *((unsigned __int8 *)v23 + 16);
  int v61 = *((unsigned __int8 *)v25 + 16);
  if (v61 == 62) {
    unsigned int v62 = v25;
  }
  else {
    unsigned int v62 = 0;
  }
  if (v60 == 62) {
    unsigned int v63 = v23;
  }
  else {
    unsigned int v63 = 0;
  }
  if (v60 != 62 || v61 != 62)
  {
    uint64_t v37 = 0;
    if (a5 == 3 || v60 != 85 || v61 != 85) {
      goto LABEL_118;
    }
    if (*((void *)v23 - 12) == *((void *)v25 - 12))
    {
      uint64_t v86 = (a5 + 1);
      uint64_t v87 = *((void *)v23 - 8);
      uint64_t v88 = *((void *)v25 - 8);
      LODWORD(v224) = v209;
      unint64_t v223 = (unint64_t)v208;
      if (sub_1CD2F24C8(a1, v87, v88, &v223, v86))
      {
        uint64_t v89 = *((void *)v23 - 4);
        uint64_t v90 = *((void *)v25 - 4);
        unsigned int v220 = v207;
        if (v207 > 0x40) {
          operator new[]();
        }
        uint64_t v219 = (uint64_t)v206;
        uint64_t v37 = sub_1CD2F24C8(a1, v89, v90, &v219, v86);
        if (v220 >= 0x41 && v219) {
          MEMORY[0x1D25D9CB0](v219, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      if (v224 < 0x41) {
        goto LABEL_118;
      }
      unint64_t v91 = v223;
      if (!v223) {
        goto LABEL_118;
      }
LABEL_144:
      MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
      goto LABEL_118;
    }
    goto LABEL_117;
  }
  int v64 = *((_DWORD *)v63 + 5);
  uint64_t v65 = v64 & 0x7FFFFFF;
  int v66 = *((_DWORD *)v62 + 5);
  if ((v64 & 0x7FFFFFF) != (v66 & 0x7FFFFFF)) {
    goto LABEL_117;
  }
  BOOL v67 = (void *)((char *)v63 - 32 * v65);
  unsigned int v68 = (void *)((char *)v62 - 32 * v65);
  if (*v67 != *v68) {
    goto LABEL_117;
  }
  uint64_t v69 = 24;
  if (*((unsigned char *)v63 + 16) == 62) {
    uint64_t v69 = 64;
  }
  uint64_t v70 = *(void *)((char *)v63 + v69);
  if ((v64 & 0x40000000) != 0) {
    BOOL v67 = (void *)*((void *)v63 - 1);
  }
  uint64_t v71 = (llvm::Constant **)(v67 + 4);
  int v217 = (llvm::Constant **)(v67 + 4);
  uint64_t v218 = v70 | 4;
  uint64_t v72 = 24;
  if (*((unsigned char *)v62 + 16) == 62) {
    uint64_t v72 = 64;
  }
  uint64_t v73 = *(void *)((char *)v62 + v72);
  if ((v66 & 0x40000000) != 0) {
    unsigned int v68 = (void *)*((void *)v62 - 1);
  }
  uint64_t v74 = (llvm::Constant **)(v68 + 4);
  v216[0] = v68 + 4;
  v216[1] = v73 | 4;
  int v75 = v65 - 2;
  if (v65 != 2)
  {
    do
    {
      if (*v217 != *(llvm::Constant **)v216[0]) {
        goto LABEL_117;
      }
      sub_1CB8460E4((uint64_t)&v217);
      sub_1CB8460E4((uint64_t)v216);
      --v75;
    }
    while (v75);
    uint64_t v74 = (llvm::Constant **)v216[0];
    uint64_t v71 = v217;
  }
  unsigned int v76 = *v71;
  int v77 = *((unsigned __int8 *)*v71 + 16) <= 0x1Bu ? 0 : *v71;
  int v78 = *v74;
  uint64_t v79 = *((unsigned __int8 *)*v74 + 16) <= 0x1Bu ? 0 : *v74;
  BOOL v80 = !v77 || v79 == 0;
  if (v80 || *((unsigned __int8 *)v77 + 16) != *((unsigned __int8 *)v79 + 16) || *(void *)v77 != *(void *)v79) {
    goto LABEL_117;
  }
  unsigned int v81 = v207 - 1;
  if (v207 >= 0x41) {
    uint64_t v82 = (void **)((char *)v206 + 8 * (v81 >> 6));
  }
  else {
    uint64_t v82 = &v206;
  }
  if (((1 << v81) & (unint64_t)*v82) == 0)
  {
    uint64_t v84 = v78;
    int v78 = v76;
    goto LABEL_147;
  }
  if (v207 > 0x40)
  {
    if ((*((void *)v206 + ((v207 - 1) >> 6)) & (1 << v81)) != 0
      && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v206) == v81)
    {
      uint64_t v37 = 0;
      goto LABEL_118;
    }
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v206);
    goto LABEL_112;
  }
  if ((void *)(1 << v81) == v206)
  {
LABEL_117:
    uint64_t v37 = 0;
    goto LABEL_118;
  }
  if (v207) {
    unint64_t v83 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v207;
  }
  else {
    unint64_t v83 = 0;
  }
  uint64_t v206 = (void *)(v83 & ~(unint64_t)v206);
LABEL_112:
  llvm::APInt::operator++((uint64_t)&v206);
  uint64_t v84 = v76;
LABEL_147:
  BOOL v92 = *(llvm::DataLayout **)(a1 + 48);
  unsigned int v93 = (llvm::Type *)(v218 & 0xFFFFFFFFFFFFFFF8);
  if ((v218 & 4) == 0 || !v93)
  {
    AggregateElement = *v217;
    if (!*v217 || *((unsigned char *)AggregateElement + 16) != 16) {
      AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
    }
    uint64_t v97 = (unsigned int *)*((void *)AggregateElement + 3);
    uint64_t v95 = (unsigned int *)((char *)AggregateElement + 24);
    uint64_t v96 = v97;
    if (v95[2] < 0x41) {
      uint64_t v96 = v95;
    }
    unsigned int v93 = *(llvm::Type **)(*((void *)v93 + 2) + 8 * *v96);
  }
  unint64_t v98 = (unint64_t)(sub_1CB83544C((uint64_t)v92, (uint64_t)v93) + 7) >> 3;
  BOOL v100 = v99 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v92, v93, 1);
  unint64_t v103 = ((1 << Alignment) + v98 - 1) & -(1 << Alignment);
  if (v100) {
  if (llvm::APInt::urem((uint64_t **)&v206, v103))
  }
    goto LABEL_117;
  int v104 = *(llvm::Type **)v78;
  if ((*(_DWORD *)(*(void *)v78 + 8) & 0xFE) == 0x12) {
    int v104 = (llvm::Type *)**((void **)v104 + 2);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v104);
  llvm::APInt::udiv((llvm::APInt *)&v206, v103, (uint64_t)&v223);
  unsigned int v106 = v224;
  if (v224 < PrimitiveSizeInBits)
  {
    if (PrimitiveSizeInBits > 0x40) {
      operator new[]();
    }
    unsigned int v215 = PrimitiveSizeInBits;
    unint64_t v117 = v223 & (0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
    unint64_t v214 = v117;
    if (v224 >= 0x41 && v223) {
      MEMORY[0x1D25D9CB0](v223, 0x1000C8000313F17);
    }
    unsigned int v106 = PrimitiveSizeInBits;
    unint64_t v107 = v117;
  }
  else
  {
    unsigned int v215 = v224;
    if (v224 > 0x40) {
      operator new[]();
    }
    unint64_t v107 = v223;
    unint64_t v214 = v223;
  }
  int v108 = *((unsigned __int8 *)v78 + 16);
  if ((v108 - 67) > 1)
  {
    uint64_t v37 = 0;
    goto LABEL_248;
  }
  unint64_t v204 = v107;
  int v109 = *((_DWORD *)v78 + 5);
  if ((v109 & 0x40000000) != 0) {
    int v110 = (unint64_t *)*((void *)v78 - 1);
  }
  else {
    int v110 = (unint64_t *)((char *)v78 - 32 * (v109 & 0x7FFFFFF));
  }
  unint64_t v111 = *v110;
  int v112 = *((_DWORD *)v84 + 5);
  if ((v112 & 0x40000000) != 0) {
    uint64_t v113 = (unint64_t *)*((void *)v84 - 1);
  }
  else {
    uint64_t v113 = (unint64_t *)((char *)v84 - 32 * (v112 & 0x7FFFFFF));
  }
  uint64_t v37 = 0;
  unint64_t v114 = *v113;
  if (!*v113) {
    goto LABEL_247;
  }
  unsigned int v115 = *(unsigned __int8 *)(v114 + 16);
  if (v115 < 0x1C) {
    goto LABEL_247;
  }
  uint64_t v116 = *(void *)v111;
  if (*(void *)v111 != *(void *)v114) {
    goto LABEL_173;
  }
  if (v115 == 41
    && ((int v118 = *(_DWORD *)(v114 + 20), (v118 & 0x40000000) != 0)
      ? (unint64_t v119 = *(void *)(v114 - 8))
      : (unint64_t v119 = v114 - 32 * (v118 & 0x7FFFFFF)),
        (uint64_t v120 = *(void *)(v119 + 32), *(unsigned char *)(v120 + 16) == 16)
     && ((unsigned int v121 = *(_DWORD *)(v120 + 32), v121 > 0x40)
       ? (uint64_t v122 = **(void **)(v120 + 24))
       : (uint64_t v122 = (uint64_t)(*(void *)(v120 + 24) << -(char)v121) >> -(char)v121),
         (uint64_t)(v204 << -(char)v106) >> -(char)v106 <= v122)))
  {
    unsigned int v203 = *(unsigned __int8 *)(v114 + 17);
    if (v108 == 68) {
      int v123 = (v203 >> 2) & 1;
    }
    else {
      int v123 = (v203 >> 1) & 1;
    }
  }
  else
  {
    LOBYTE(v123) = 0;
  }
  if (*(unsigned __int8 *)(v111 + 16) <= 0x1Bu) {
    unint64_t v124 = 0;
  }
  else {
    unint64_t v124 = v111;
  }
  if ((v123 & 1) != 0 || !v124 || v115 != 41 || *(unsigned char *)(v124 + 16) != 41) {
    goto LABEL_202;
  }
  if (v108 != 68)
  {
    if ((*(unsigned char *)(v124 + 17) & 2) != 0 && (*(unsigned char *)(v114 + 17) & 2) != 0) {
      goto LABEL_252;
    }
LABEL_202:
    if ((*(_DWORD *)(v116 + 8) & 0xFE) == 0x12) {
      uint64_t v116 = **(void **)(v116 + 16);
    }
    unsigned int v126 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v116);
    if ((v123 & 1) == 0) {
      goto LABEL_205;
    }
LABEL_215:
    uint64_t v133 = *(void *)(a1 + 32);
    uint64_t v134 = *(void *)(v133 + 104);
    unsigned int v135 = *(_DWORD *)(v133 + 120);
    if (v135)
    {
      unsigned int v136 = v135 - 1;
      unsigned int v137 = (v135 - 1) & ((v111 >> 4) ^ (v111 >> 9));
      uint64_t v138 = v134 + 48 * v137;
      uint64_t v139 = *(void *)(v138 + 24);
      if (v139 == v111)
      {
LABEL_222:
        if (v138 == v134 + 48 * v135 || (uint64_t v142 = *(void *)(v138 + 40)) == 0)
        {
          uint64_t v142 = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 32), v111);
          uint64_t v133 = *(void *)(a1 + 32);
          uint64_t v134 = *(void *)(v133 + 104);
          unsigned int v135 = *(_DWORD *)(v133 + 120);
        }
        if (v135)
        {
          unsigned int v143 = (v135 - 1) & ((v114 >> 4) ^ (v114 >> 9));
          uint64_t v144 = v134 + 48 * v143;
          uint64_t v145 = *(void *)(v144 + 24);
          if (v145 == v114) {
            goto LABEL_232;
          }
          int v146 = 1;
          while (v145 != -4096)
          {
            unsigned int v147 = v143 + v146++;
            unsigned int v143 = v147 & (v135 - 1);
            uint64_t v144 = v134 + 48 * v143;
            uint64_t v145 = *(void *)(v144 + 24);
            if (v145 == v114) {
              goto LABEL_232;
            }
          }
        }
        uint64_t v144 = v134 + 48 * v135;
LABEL_232:
        if (v144 == v134 + 48 * v135 || (uint64_t v148 = *(void *)(v144 + 40)) == 0)
        {
          uint64_t v148 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v133, v114);
          uint64_t v133 = *(void *)(a1 + 32);
        }
        if (v126 > 0x40)
        {
          if (v215 != v126) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v223, (uint64_t)&v214);
        }
        else
        {
          if (v215 >= 0x41) {
            uint64_t v149 = (unint64_t *)v214;
          }
          else {
            uint64_t v149 = &v214;
          }
          unint64_t v150 = *v149;
          LODWORD(v224) = v126;
          unint64_t v151 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v126;
          if (!v126) {
            unint64_t v151 = 0;
          }
          unint64_t v223 = v151 & v150;
        }
        unint64_t v152 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)v133, (llvm::LLVMContext *)&v223, v125);
        unint64_t v153 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v133, v152);
        if (v224 >= 0x41 && v223) {
          MEMORY[0x1D25D9CB0](v223, 0x1000C8000313F17);
        }
        uint64_t v154 = *(void *)(a1 + 32);
        unint64_t v223 = (unint64_t)&v225;
        uint64_t v225 = v142;
        unint64_t v226 = v153;
        uint64_t v224 = 0x200000002;
        uint64_t v155 = llvm::ScalarEvolution::getAddExpr(v154, (unint64_t **)&v223, 0, 0);
        if ((uint64_t *)v223 != &v225) {
          free((void *)v223);
        }
        uint64_t v37 = v155 == v148;
        unsigned int v106 = v215;
        goto LABEL_247;
      }
      int v140 = 1;
      while (v139 != -4096)
      {
        unsigned int v141 = v137 + v140++;
        unsigned int v137 = v141 & v136;
        uint64_t v138 = v134 + 48 * (v141 & v136);
        uint64_t v139 = *(void *)(v138 + 24);
        if (v139 == v111) {
          goto LABEL_222;
        }
      }
    }
    uint64_t v138 = v134 + 48 * v135;
    goto LABEL_222;
  }
  if ((*(unsigned char *)(v124 + 17) & 4) == 0 || (*(unsigned char *)(v114 + 17) & 4) == 0) {
    goto LABEL_202;
  }
LABEL_252:
  char v156 = 0;
  uint64_t v157 = 0;
  char v158 = 0;
  unint64_t v223 = 0x100000000;
  do
  {
    char v159 = 0;
    uint64_t v160 = *((unsigned int *)&v223 + v157);
    char v161 = v156;
    uint64_t v219 = 0x100000000;
    int v163 = &v219;
    uint64_t v164 = 1;
    do
    {
      char v165 = v159;
      if (v158)
      {
LABEL_255:
        char v158 = 1;
        goto LABEL_264;
      }
      int v166 = *(_DWORD *)(v124 + 20);
      if ((v166 & 0x40000000) != 0) {
        unint64_t v167 = *(void *)(v124 - 8);
      }
      else {
        unint64_t v167 = v124 - 32 * (v166 & 0x7FFFFFF);
      }
      int v168 = *(_DWORD *)(v114 + 20);
      if ((v168 & 0x40000000) != 0) {
        unint64_t v169 = *(void *)(v114 - 8);
      }
      else {
        unint64_t v169 = v114 - 32 * (v168 & 0x7FFFFFF);
      }
      uint64_t v170 = *(unsigned int *)v163;
      if (*(void *)(v167 + 32 * v160) != *(void *)(v169 + 32 * v170)) {
        goto LABEL_263;
      }
      if ((v166 & 0x40000000) != 0) {
        unint64_t v171 = *(void *)(v124 - 8);
      }
      else {
        unint64_t v171 = v124 - 32 * (v166 & 0x7FFFFFF);
      }
      if ((v168 & 0x40000000) != 0) {
        unint64_t v172 = *(void *)(v114 - 8);
      }
      else {
        unint64_t v172 = v114 - 32 * (v168 & 0x7FFFFFF);
      }
      BOOL v162 = v160 != 1;
      uint64_t v173 = *(void *)(v171 + 32 * v162);
      uint64_t v174 = *(void *)(v172 + 32 * (v170 != 1));
      if (*(unsigned __int8 *)(v173 + 16) <= 0x1Bu) {
        uint64_t v175 = 0;
      }
      else {
        uint64_t v175 = *(void *)(v171 + 32 * v162);
      }
      if (*(unsigned __int8 *)(v174 + 16) <= 0x1Bu) {
        uint64_t v176 = 0;
      }
      else {
        uint64_t v176 = v174;
      }
      if (v176 && *(unsigned char *)(v176 + 16) == 41)
      {
        if (v108 == 68)
        {
          if ((*(unsigned char *)(v176 + 17) & 4) == 0) {
            goto LABEL_296;
          }
        }
        else if ((*(unsigned char *)(v176 + 17) & 2) == 0)
        {
          goto LABEL_296;
        }
        int v177 = *(_DWORD *)(v176 + 20);
        if ((v177 & 0x40000000) != 0) {
          uint64_t v178 = *(void *)(v176 - 8);
        }
        else {
          uint64_t v178 = v176 - 32 * (v177 & 0x7FFFFFF);
        }
        uint64_t v179 = *(void *)(v178 + 32);
        if (*(unsigned char *)(v179 + 16) == 16)
        {
          unsigned int v180 = *(_DWORD *)(v179 + 32);
          uint64_t v181 = v180 > 0x40
               ? **(void **)(v179 + 24)
               : (uint64_t)(*(void *)(v179 + 24) << -(char)v180) >> -(char)v180;
          uint64_t v182 = (v177 & 0x40000000) != 0 ? *(void **)(v176 - 8) : (void *)(v176 - 32 * (v177 & 0x7FFFFFF));
          if (*v182 == v173 && (uint64_t)(v204 << -(char)v106) >> -(char)v106 == v181) {
            goto LABEL_255;
          }
        }
      }
LABEL_296:
      if (!v175 || *(unsigned char *)(v175 + 16) != 41) {
        goto LABEL_263;
      }
      if (v108 == 68)
      {
        if ((*(unsigned char *)(v175 + 17) & 4) != 0) {
          goto LABEL_302;
        }
      }
      else if ((*(unsigned char *)(v175 + 17) & 2) != 0)
      {
LABEL_302:
        int v183 = *(_DWORD *)(v175 + 20);
        if ((v183 & 0x40000000) != 0) {
          uint64_t v184 = *(void *)(v175 - 8);
        }
        else {
          uint64_t v184 = v175 - 32 * (v183 & 0x7FFFFFF);
        }
        uint64_t v185 = *(void *)(v184 + 32);
        if (*(unsigned char *)(v185 + 16) == 16)
        {
          unsigned int v186 = *(_DWORD *)(v185 + 32);
          uint64_t v187 = v186 > 0x40
               ? **(void **)(v185 + 24)
               : (uint64_t)(*(void *)(v185 + 24) << -(char)v186) >> -(char)v186;
          __int16 v188 = (v183 & 0x40000000) != 0 ? *(void **)(v175 - 8) : (void *)(v175 - 32 * (v183 & 0x7FFFFFF));
          if (*v188 == v174 && !(((uint64_t)(v204 << -(char)v106) >> -(char)v106) + v187)) {
            goto LABEL_255;
          }
        }
      }
      if (!v176 || *(unsigned char *)(v176 + 16) != 41) {
        goto LABEL_263;
      }
      if (v108 == 68)
      {
        if ((*(unsigned char *)(v175 + 17) & 4) == 0 || (*(unsigned char *)(v176 + 17) & 4) == 0) {
          goto LABEL_263;
        }
      }
      else if ((*(unsigned char *)(v175 + 17) & 2) == 0 || (*(unsigned char *)(v176 + 17) & 2) == 0)
      {
        goto LABEL_263;
      }
      int v189 = *(_DWORD *)(v175 + 20);
      if ((v189 & 0x40000000) != 0) {
        uint64_t v190 = *(void *)(v175 - 8);
      }
      else {
        uint64_t v190 = v175 - 32 * (v189 & 0x7FFFFFF);
      }
      if (*(unsigned char *)(*(void *)(v190 + 32) + 16) == 16)
      {
        int v191 = *(_DWORD *)(v176 + 20);
        uint64_t v192 = (v191 & 0x40000000) != 0 ? *(void *)(v176 - 8) : v176 - 32 * (v191 & 0x7FFFFFF);
        if (*(unsigned char *)(*(void *)(v192 + 32) + 16) == 16)
        {
          uint64_t v193 = (v189 & 0x40000000) != 0 ? *(void *)(v175 - 8) : v175 - 32 * (v189 & 0x7FFFFFF);
          uint64_t v194 = *(void *)(v193 + 32);
          unsigned int v195 = *(_DWORD *)(v194 + 32);
          uint64_t v196 = v195 > 0x40
               ? **(void **)(v194 + 24)
               : (uint64_t)(*(void *)(v194 + 24) << -(char)v195) >> -(char)v195;
          uint64_t v197 = (v191 & 0x40000000) != 0 ? *(void *)(v176 - 8) : v176 - 32 * (v191 & 0x7FFFFFF);
          uint64_t v198 = *(void *)(v197 + 32);
          unsigned int v199 = *(_DWORD *)(v198 + 32);
          uint64_t v200 = v199 > 0x40
               ? **(void **)(v198 + 24)
               : (uint64_t)(*(void *)(v198 + 24) << -(char)v199) >> -(char)v199;
          uint64_t v201 = (v189 & 0x40000000) != 0 ? *(void **)(v175 - 8) : (void *)(v175 - 32 * (v189 & 0x7FFFFFF));
          uint64_t v202 = (v191 & 0x40000000) != 0 ? *(void **)(v176 - 8) : (void *)(v176 - 32 * (v191 & 0x7FFFFFF));
          if (*v201 == *v202 && (uint64_t)(v204 << -(char)v106) >> -(char)v106 == v200 - v196) {
            goto LABEL_255;
          }
        }
      }
LABEL_263:
      char v158 = 0;
LABEL_264:
      int v163 = (uint64_t *)((char *)&v219 + 4 * v164);
      char v159 = 1;
      uint64_t v164 = 2;
    }
    while ((v165 & 1) == 0);
    char v156 = 1;
    uint64_t v157 = 1;
  }
  while ((v161 & 1) == 0);
  if ((*(_DWORD *)(v116 + 8) & 0xFE) == 0x12) {
    uint64_t v116 = **(void **)(v116 + 16);
  }
  unsigned int v126 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v116);
  if (v158) {
    goto LABEL_215;
  }
LABEL_205:
  unsigned int v220 = v126;
  if (v126 > 0x40) {
    operator new[]();
  }
  unsigned int v222 = v126;
  uint64_t v219 = 0;
  uint64_t v221 = 0;
  uint64_t v128 = *(void *)(a1 + 16);
  unint64_t v127 = *(void *)(a1 + 24);
  unint64_t v129 = v114;
  if (!*(void *)(v114 + 40))
  {
    if (*(unsigned __int8 *)(v111 + 16) < 0x1Cu || (unint64_t v129 = v111, !*(void *)(v111 + 40))) {
      unint64_t v129 = 0;
    }
  }
  unint64_t v223 = *(void *)(a1 + 48);
  uint64_t v224 = v128;
  uint64_t v225 = v129;
  unint64_t v226 = v127;
  uint64_t v227 = 0;
  char v228 = 1;
  sub_1CC15FBF8(v111, (int8x8_t *)&v219, 0, (const llvm::DataLayout **)&v223);
  LODWORD(v224) = v106;
  if (v106) {
    unint64_t v130 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
  }
  else {
    unint64_t v130 = 0;
  }
  unint64_t v223 = v130 & v219;
  if (v108 == 68) {
    unint64_t v131 = v223 & ~(1 << (v126 - 1));
  }
  else {
    unint64_t v131 = v223;
  }
  BOOL v132 = v131 < v204;
  if (v222 >= 0x41 && v221) {
    MEMORY[0x1D25D9CB0](v221, 0x1000C8000313F17);
  }
  if (v220 >= 0x41 && v219) {
    MEMORY[0x1D25D9CB0](v219, 0x1000C8000313F17);
  }
  if (!v132) {
    goto LABEL_215;
  }
LABEL_173:
  uint64_t v37 = 0;
LABEL_247:
  unsigned int v34 = v205;
LABEL_248:
  if (v106 >= 0x41)
  {
    unint64_t v91 = v214;
    if (v214) {
      goto LABEL_144;
    }
  }
LABEL_118:
  if (v207 >= 0x41 && v206) {
    MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
  }
LABEL_121:
  if (v209 >= 0x41 && v208) {
    MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
  }
  if (v34 >= 0x41 && v36) {
    MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
  }
LABEL_127:
  if (v211 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v213 >= 0x41 && v212) {
    MEMORY[0x1D25D9CB0](v212, 0x1000C8000313F17);
  }
  return v37;
}

void *sub_1CD2F3F04(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  unsigned int v143 = v145;
  uint64_t v144 = 0x1000000000;
  int v140 = v142;
  uint64_t v141 = 0x1000000000;
  int v137 = *(unsigned __int8 *)(*a2 + 16);
  uint64_t v5 = sub_1CD2F4BE8(a2, a3);
  uint64_t v135 = a3;
  if ((const llvm::Instruction *)v5 == v6)
  {
    unsigned int v32 = 0;
    goto LABEL_181;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = 8 * a3;
  uint64_t v10 = &v4[a3];
  uint64_t v134 = v4;
  do
  {
    if (v7) {
      uint64_t v11 = v7 - 24;
    }
    else {
      uint64_t v11 = 0;
    }
    if ((*(unsigned char *)(v11 + 16) & 0xFE) == 0x3C)
    {
      if (v135)
      {
        uint64_t v12 = v9;
        unsigned int v13 = v4;
        while (*v13 != v11)
        {
          ++v13;
          v12 -= 8;
          if (!v12)
          {
            unsigned int v13 = v10;
            break;
          }
        }
      }
      else
      {
        unsigned int v13 = v4;
      }
      if (v135 != v13 - v4)
      {
        uint64_t v17 = v141;
        if (v141 >= (unint64_t)HIDWORD(v141)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v18 = &v140;
        goto LABEL_44;
      }
    }
    if (!llvm::isGuaranteedToTransferExecutionToSuccessor((llvm *)v11, v6)) {
      break;
    }
    int v14 = *(unsigned __int8 *)(v11 + 16);
    uint64_t v15 = (v14 - 33);
    if (v15 <= 0x37)
    {
      if (((1 << (v14 - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v19 = *(void *)(v11 + 64);
        if (!v19 || (*(unsigned char *)(v19 + 20) & 4) == 0 && (*(unsigned char *)(v19 + 17) & 0x10) == 0)
        {
          LODWORD(v146) = 7;
          if (sub_1CC5CB59C(v11, (__int32 *)&v146, 1uLL))
          {
            uint64_t v22 = *(void *)(v11 - 32);
            if (!v22) {
              goto LABEL_42;
            }
            if (*(unsigned char *)(v22 + 16)) {
              goto LABEL_42;
            }
            if (*(void *)(v22 + 24) != *(void *)(v11 + 72)) {
              goto LABEL_42;
            }
            uint64_t v4 = v134;
            if (*(_DWORD *)(v22 + 36) != 7) {
              goto LABEL_42;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v11, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44))
          {
            goto LABEL_42;
          }
        }
      }
      else
      {
        if (((1 << (v14 - 33)) & 0x808001C8000010) != 0) {
          goto LABEL_42;
        }
        if (v15 != 28) {
          goto LABEL_19;
        }
        if ((*(_WORD *)(v11 + 18) & 0x301) != 0) {
          goto LABEL_42;
        }
      }
      int v14 = *(unsigned __int8 *)(v11 + 16);
    }
LABEL_19:
    uint64_t v16 = (v14 - 33);
    if (v16 > 0x37) {
      goto LABEL_45;
    }
    if (((1 << v16) & 0x8000000000041) != 0)
    {
      uint64_t v20 = *(void *)(v11 + 64);
      if (!v20 || (*(unsigned char *)(v20 + 17) & 0x30) == 0)
      {
        int v21 = *(_DWORD *)(v11 + 20);
        if (v21 < 0)
        {
          uint64_t v23 = v11 - 32 * (v21 & 0x7FFFFFF);
          uint64_t v26 = *(void *)(v23 - 8);
          uint64_t v24 = v23 - 8;
          uint64_t v25 = v26;
          if (v26)
          {
            uint64_t v27 = -v25;
            do
            {
              unsigned int v28 = *(_DWORD *)(*(void *)(v24 + v27) + 8);
              BOOL v29 = v28 > 7;
              int v30 = (1 << v28) & 0x83;
              if (v29 || v30 == 0) {
                goto LABEL_42;
              }
              v27 += 16;
            }
            while (v27);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v11, 45) & 1) == 0
          && (llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44) & 1) == 0)
        {
          goto LABEL_42;
        }
      }
    }
    else
    {
      if (v16 != 27)
      {
        if (((1 << v16) & 0x808001D0000010) == 0) {
          goto LABEL_45;
        }
LABEL_42:
        uint64_t v17 = v144;
        if (v144 >= (unint64_t)HIDWORD(v144)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v18 = &v143;
LABEL_44:
        *((void *)*v18 + v17) = v11;
        ++*((_DWORD *)v18 + 2);
        uint64_t v4 = v134;
        goto LABEL_45;
      }
      if ((*(_WORD *)(v11 + 18) & 0x301) != 0) {
        goto LABEL_42;
      }
    }
LABEL_45:
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while ((const llvm::Instruction *)v7 != v8);
  unsigned int v32 = v141;
  if (v141)
  {
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    uint64_t v133 = v141;
    while (1)
    {
      unint64_t v35 = (uint64_t ***)*((void *)v140 + v33);
      if (v34)
      {
        uint64_t v36 = v34[5];
        int v37 = *((__int16 *)v36 + 9);
        if ((v37 & 0x80000000) == 0)
        {
          uint64_t v95 = v36[6];
          if (v95 != (uint64_t *)(v36 + 5))
          {
            int v96 = 0;
            do
            {
              uint64_t v97 = v95 - 3;
              if (!v95) {
                uint64_t v97 = 0;
              }
              *((_DWORD *)v97 + 14) = v96++;
              uint64_t v95 = (uint64_t *)v95[1];
            }
            while (v95 != (uint64_t *)(v36 + 5));
          }
          *((_WORD *)v36 + 9) = v37 | 0x8000;
        }
        if (*((_DWORD *)v34 + 14) < *((_DWORD *)v35 + 14)) {
          break;
        }
      }
      if (v144)
      {
        unint64_t v38 = (uint64_t ****)v143;
        uint64_t v39 = (uint64_t ****)((char *)v143 + 8 * v144);
        while (2)
        {
          uint64_t v40 = *v38;
          if (v34)
          {
            uint64_t v41 = v34[5];
            int v42 = *((__int16 *)v41 + 9);
            if ((v42 & 0x80000000) == 0)
            {
              int v77 = v41[6];
              if (v77 != (uint64_t *)(v41 + 5))
              {
                int v78 = 0;
                do
                {
                  uint64_t v79 = v77 - 3;
                  if (!v77) {
                    uint64_t v79 = 0;
                  }
                  *((_DWORD *)v79 + 14) = v78++;
                  int v77 = (uint64_t *)v77[1];
                }
                while (v77 != (uint64_t *)(v41 + 5));
              }
              *((_WORD *)v41 + 9) = v42 | 0x8000;
            }
            if (*((_DWORD *)v34 + 14) < *((_DWORD *)v40 + 14)) {
              goto LABEL_167;
            }
          }
          if (*((unsigned char *)v40 + 16) == 60) {
            unsigned int v43 = v40;
          }
          else {
            unsigned int v43 = 0;
          }
          if (*((unsigned char *)v35 + 16) == 60) {
            unsigned int v44 = v35;
          }
          else {
            unsigned int v44 = 0;
          }
          if (v43) {
            BOOL v45 = v44 == 0;
          }
          else {
            BOOL v45 = 1;
          }
          if (!v45) {
            goto LABEL_155;
          }
          if (v137 != 60)
          {
            unsigned int v46 = v40[5];
            int v47 = *((__int16 *)v46 + 9);
            if ((v47 & 0x80000000) == 0)
            {
              BOOL v80 = v46[6];
              if (v80 != (uint64_t *)(v46 + 5))
              {
                int v81 = 0;
                do
                {
                  uint64_t v82 = v80 - 3;
                  if (!v80) {
                    uint64_t v82 = 0;
                  }
                  *((_DWORD *)v82 + 14) = v81++;
                  BOOL v80 = (uint64_t *)v80[1];
                }
                while (v80 != (uint64_t *)(v46 + 5));
              }
              *((_WORD *)v46 + 9) = v47 | 0x8000;
            }
            if (*((_DWORD *)v40 + 14) < *((_DWORD *)v35 + 14)) {
              goto LABEL_155;
            }
            if (!v43 || (*((unsigned char *)v43 + 23) & 0x20) == 0) {
              goto LABEL_141;
            }
            uint64_t v48 = ***v43;
            *(void *)&long long v146 = v43;
            int v49 = *(_DWORD *)(v48 + 2496);
            if (!v49)
            {
              unint64_t v91 = 0;
              goto LABEL_160;
            }
            uint64_t v50 = *(void *)(v48 + 2480);
            int v51 = v49 - 1;
            unsigned int v52 = v51 & ((v43 >> 4) ^ (v43 >> 9));
            int v53 = (void *)(v50 + 40 * v52);
            uint64_t v54 = *v53;
            if ((uint64_t ***)*v53 != v43)
            {
              uint64_t v55 = 0;
              int v56 = 1;
              while (v54 != -4096)
              {
                if (v55) {
                  BOOL v57 = 0;
                }
                else {
                  BOOL v57 = v54 == -8192;
                }
                if (v57) {
                  uint64_t v55 = v53;
                }
                unsigned int v58 = v52 + v56++;
                unsigned int v52 = v58 & v51;
                int v53 = (void *)(v50 + 40 * v52);
                uint64_t v54 = *v53;
                if ((uint64_t ***)*v53 == v43) {
                  goto LABEL_98;
                }
              }
              if (v55) {
                unint64_t v91 = v55;
              }
              else {
                unint64_t v91 = v53;
              }
LABEL_160:
              int v53 = sub_1CC609054(v48 + 2480, (uint64_t)&v146, (uint64_t *)&v146, v91);
              uint64_t v92 = v146;
              v53[4] = 0;
              v53[3] = 0;
              *int v53 = v92;
              v53[1] = v53 + 3;
              v53[2] = 0x100000000;
            }
LABEL_98:
            uint64_t v59 = *((unsigned int *)v53 + 4);
            if (!v59) {
              goto LABEL_141;
            }
            int v60 = (void *)(v53[1] + 8);
            uint64_t v61 = 16 * v59;
            while (*((_DWORD *)v60 - 2) != 6)
            {
              v60 += 2;
              v61 -= 16;
              if (!v61) {
                goto LABEL_141;
              }
            }
LABEL_140:
            if (!*v60) {
              goto LABEL_141;
            }
LABEL_155:
            if (++v38 == v39) {
              goto LABEL_167;
            }
            continue;
          }
          break;
        }
        unsigned int v62 = v35[5];
        int v63 = *((__int16 *)v62 + 9);
        if ((v63 & 0x80000000) == 0)
        {
          unint64_t v83 = v62[6];
          if (v83 != (uint64_t *)(v62 + 5))
          {
            int v84 = 0;
            do
            {
              unsigned int v85 = v83 - 3;
              if (!v83) {
                unsigned int v85 = 0;
              }
              *((_DWORD *)v85 + 14) = v84++;
              unint64_t v83 = (uint64_t *)v83[1];
            }
            while (v83 != (uint64_t *)(v62 + 5));
          }
          *((_WORD *)v62 + 9) = v63 | 0x8000;
        }
        if (*((_DWORD *)v35 + 14) < *((_DWORD *)v40 + 14)) {
          goto LABEL_155;
        }
        if (!v44 || (*((unsigned char *)v44 + 23) & 0x20) == 0)
        {
LABEL_141:
          uint64_t v86 = *(void *)(a1 + 8);
          llvm::MemoryLocation::getOrNone(v35, (uint64_t)&v146);
          v138[0] = v146;
          v138[1] = v147;
          v138[2] = v148[0];
          char v139 = 1;
          *(void *)&long long v146 = 1;
          uint64_t v87 = 8;
          do
          {
            uint64_t v88 = (char *)&v146 + v87;
            *(_OWORD *)uint64_t v88 = xmmword_1CFAC3060;
            *((_OWORD *)v88 + 1) = xmmword_1CFAC3060;
            v87 += 40;
          }
          while (v88 + 40 != (char *)v149);
          v149[0] = &v153;
          v149[1] = 0;
          unint64_t v150 = v152;
          uint64_t v151 = 0x400000000;
          unint64_t v153 = &unk_1F2600DB8;
          uint64_t v89 = 504;
          uint64_t v154 = 1;
          do
          {
            *(void *)((char *)&v146 + v89) = -4096;
            v89 += 16;
          }
          while (v89 != 632);
          char ModRefInfo = llvm::AAResults::getModRefInfo(v86, (llvm::Instruction *)v40, v138, (uint64_t)&v146);
          if ((v154 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v155, 8);
          }
          if (v150 != v152) {
            free(v150);
          }
          if ((v146 & 1) == 0) {
            MEMORY[0x1D25D9CD0](*((void *)&v146 + 1), 8);
          }
          if (v137 == 60)
          {
            if ((ModRefInfo & 2) != 0) {
              goto LABEL_168;
            }
          }
          else if ((ModRefInfo & 3) != 0)
          {
            goto LABEL_170;
          }
          goto LABEL_155;
        }
        uint64_t v64 = ***v44;
        *(void *)&long long v146 = v44;
        int v65 = *(_DWORD *)(v64 + 2496);
        if (v65)
        {
          uint64_t v66 = *(void *)(v64 + 2480);
          int v67 = v65 - 1;
          unsigned int v68 = v67 & ((v44 >> 4) ^ (v44 >> 9));
          uint64_t v69 = (void *)(v66 + 40 * v68);
          uint64_t v70 = *v69;
          if ((uint64_t ***)*v69 != v44)
          {
            uint64_t v71 = 0;
            int v72 = 1;
            while (v70 != -4096)
            {
              if (v71) {
                BOOL v73 = 0;
              }
              else {
                BOOL v73 = v70 == -8192;
              }
              if (v73) {
                uint64_t v71 = v69;
              }
              unsigned int v74 = v68 + v72++;
              unsigned int v68 = v74 & v67;
              uint64_t v69 = (void *)(v66 + 40 * v68);
              uint64_t v70 = *v69;
              if ((uint64_t ***)*v69 == v44) {
                goto LABEL_117;
              }
            }
            if (v71) {
              unsigned int v93 = v71;
            }
            else {
              unsigned int v93 = v69;
            }
LABEL_164:
            uint64_t v69 = sub_1CC609054(v64 + 2480, (uint64_t)&v146, (uint64_t *)&v146, v93);
            uint64_t v94 = v146;
            v69[4] = 0;
            v69[3] = 0;
            void *v69 = v94;
            v69[1] = v69 + 3;
            _OWORD v69[2] = 0x100000000;
          }
LABEL_117:
          uint64_t v75 = *((unsigned int *)v69 + 4);
          if (!v75) {
            goto LABEL_141;
          }
          int v60 = (void *)(v69[1] + 8);
          uint64_t v76 = 16 * v75;
          while (*((_DWORD *)v60 - 2) != 6)
          {
            v60 += 2;
            v76 -= 16;
            if (!v76) {
              goto LABEL_141;
            }
          }
          goto LABEL_140;
        }
        unsigned int v93 = 0;
        goto LABEL_164;
      }
LABEL_167:
      uint64_t v40 = v34;
LABEL_168:
      if (v137 == 60 && v40) {
        break;
      }
LABEL_170:
      ++v33;
      unsigned int v34 = v40;
      unsigned int v32 = v133;
      if (v33 == v133) {
        goto LABEL_180;
      }
    }
    unsigned int v32 = v33;
LABEL_180:
    uint64_t v4 = v134;
  }
LABEL_181:
  unint64_t v98 = (uint64_t *)v140;
  int v99 = v148;
  *(void *)&long long v146 = v148;
  *((void *)&v146 + 1) = v148;
  *(void *)&long long v147 = 8;
  DWORD2(v147) = 0;
  if (v32)
  {
    unsigned int v100 = 8;
    unsigned int v101 = v148;
    unsigned int v102 = (char *)v140 + 8 * v32;
    while (2)
    {
      uint64_t v103 = *v98;
      uint64_t v104 = DWORD1(v147);
      if (v101 == v99)
      {
        if (DWORD1(v147))
        {
          uint64_t v105 = 0;
          uint64_t v106 = 8 * DWORD1(v147);
          unint64_t v107 = v99;
          while (*v107 != v103)
          {
            if (*v107 == -2) {
              uint64_t v105 = v107;
            }
            ++v107;
            v106 -= 8;
            if (!v106)
            {
              if (!v105) {
                goto LABEL_191;
              }
              *uint64_t v105 = v103;
              --DWORD2(v147);
              goto LABEL_213;
            }
          }
          goto LABEL_213;
        }
LABEL_191:
        if (DWORD1(v147) < v100)
        {
          ++DWORD1(v147);
          *((void *)v99 + v104) = v103;
          goto LABEL_213;
        }
      }
      if (3 * v100 <= 4 * (DWORD1(v147) - DWORD2(v147)))
      {
        if (v100 >= 0x40) {
          v100 *= 2;
        }
        else {
          unsigned int v100 = 128;
        }
      }
      else if (v100 - DWORD1(v147) >= v100 >> 3)
      {
        goto LABEL_195;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v146, v100);
      unsigned int v100 = v147;
      unsigned int v101 = (_OWORD *)*((void *)&v146 + 1);
LABEL_195:
      unsigned int v108 = v100 - 1;
      unsigned int v109 = (v100 - 1) & ((v103 >> 4) ^ (v103 >> 9));
      int v110 = (void *)v101 + v109;
      uint64_t v111 = *v110;
      if (*v110 == -1)
      {
        int v112 = 0;
LABEL_207:
        if (v112) {
          int v110 = v112;
        }
        if (*v110 != v103)
        {
          if (*v110 == -2) {
            --DWORD2(v147);
          }
          else {
            ++DWORD1(v147);
          }
          *int v110 = v103;
        }
      }
      else
      {
        int v112 = 0;
        int v113 = 1;
        while (v111 != v103)
        {
          if (v112) {
            BOOL v114 = 0;
          }
          else {
            BOOL v114 = v111 == -2;
          }
          if (v114) {
            int v112 = v110;
          }
          unsigned int v115 = v109 + v113++;
          unsigned int v109 = v115 & v108;
          int v110 = (void *)v101 + (v115 & v108);
          uint64_t v111 = *v110;
          if (*v110 == -1) {
            goto LABEL_207;
          }
        }
      }
LABEL_213:
      unsigned int v101 = (_OWORD *)*((void *)&v146 + 1);
      int v99 = (_OWORD *)v146;
      if (++v98 == (uint64_t *)v102) {
        goto LABEL_222;
      }
      continue;
    }
  }
  unsigned int v101 = v148;
LABEL_222:
  uint64_t v116 = 0;
  if (v135)
  {
    int v117 = v147 - 1;
    if (v101 == v99) {
      unsigned int v118 = DWORD1(v147);
    }
    else {
      unsigned int v118 = v147;
    }
    unint64_t v119 = (void *)v101 + v118;
    uint64_t v120 = v101;
    while (1)
    {
      uint64_t v121 = v4[v116];
      if (v120 == v99)
      {
        uint64_t v122 = (void *)v99 + DWORD1(v147);
        if (DWORD1(v147))
        {
          uint64_t v123 = 0;
          while (*(void *)((char *)v99 + v123) != v121)
          {
            v123 += 8;
            if (8 * DWORD1(v147) == v123) {
              goto LABEL_246;
            }
          }
          uint64_t v122 = (void *)((char *)v99 + v123);
LABEL_246:
          unsigned int v131 = DWORD1(v147);
        }
        else
        {
          unsigned int v131 = 0;
        }
        uint64_t v120 = v99;
      }
      else
      {
        unsigned int v124 = v117 & ((v121 >> 4) ^ (v121 >> 9));
        uint64_t v122 = (void *)v101 + v124;
        uint64_t v125 = *v122;
        if (*v122 == -1)
        {
          unsigned int v126 = 0;
LABEL_250:
          if (v126) {
            uint64_t v122 = v126;
          }
          uint64_t v130 = *v122;
        }
        else
        {
          unsigned int v126 = 0;
          int v127 = 1;
          while (v125 != v121)
          {
            if (v126) {
              BOOL v128 = 0;
            }
            else {
              BOOL v128 = v125 == -2;
            }
            if (v128) {
              unsigned int v126 = v122;
            }
            unsigned int v129 = v124 + v127++;
            unsigned int v124 = v129 & v117;
            uint64_t v122 = (void *)v101 + (v129 & v117);
            uint64_t v125 = *v122;
            if (*v122 == -1) {
              goto LABEL_250;
            }
          }
          uint64_t v130 = v4[v116];
        }
        if (v130 != v121) {
          uint64_t v122 = v119;
        }
        unsigned int v131 = DWORD1(v147);
        uint64_t v120 = v101;
      }
      if (v120 != v99) {
        unsigned int v131 = v147;
      }
      if (v122 == (void *)((char *)v120 + 8 * v131)) {
        break;
      }
      if (++v116 == v135)
      {
        unsigned int v101 = v120;
        goto LABEL_262;
      }
    }
    unsigned int v101 = v120;
  }
LABEL_262:
  if (v101 != v99) {
    free(v101);
  }
  if (v140 != v142) {
    free(v140);
  }
  if (v143 != v145) {
    free(v143);
  }
  return v4;
}

uint64_t sub_1CD2F4B3C(void ***a1, unsigned int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!((1 << a4) % (unint64_t)a2)) {
    return 0;
  }
  char v6 = 0;
  unsigned int v4 = (*(uint64_t (**)(void, void, void, uint64_t, void, char *))(**a1[5] + 600))(*a1[5], *(*a1)[5], 8 * a2, a3, a4, &v6) ^ 1;
  if (v6) {
    return v4;
  }
  else {
    return 1;
  }
}

uint64_t sub_1CD2F4BE8(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = *a1 + 24;
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(void *)(v5 + 48);
  if (v7 != v6)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = v7 - 24;
      if (!v7) {
        uint64_t v9 = 0;
      }
      if (a2)
      {
        uint64_t v10 = 8 * a2;
        uint64_t v11 = a1;
        while (*v11 != v9)
        {
          ++v11;
          v10 -= 8;
          if (!v10)
          {
            uint64_t v11 = &a1[a2];
            break;
          }
        }
      }
      else
      {
        uint64_t v11 = a1;
      }
      if (a2 != v11 - a1)
      {
        if (!v8) {
          uint64_t result = v9 + 24;
        }
        if (a2 == v8 + 1) {
          return result;
        }
        ++v8;
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
  }
  return result;
}

void sub_1CD2F4C94(llvm *a1, llvm::MDNode **a2, uint64_t a3)
{
  v6[8] = *(llvm::MDNode **)MEMORY[0x1E4F143B8];
  if ((unint64_t)(8 * a3) >= 0x41) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3)
  {
    uint64_t v3 = v6;
    uint64_t v4 = 8 * a3;
    do
    {
      uint64_t v5 = *a2++;
      *v3++ = v5;
      v4 -= 8;
    }
    while (v4);
  }
  llvm::propagateMetadata(a1, v6, a3);
}

void sub_1CD2F4D94(uint64_t *a1, uint64_t a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  if (a2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t v5 = *a1;
      if (*a1) {
        BOOL v6 = *(unsigned __int8 *)(*a1 + 16) - 62 >= 0xFFFFFFFE;
      }
      else {
        BOOL v6 = 0;
      }
      if (v6) {
        uint64_t v7 = *(void *)(v5 - 32);
      }
      else {
        uint64_t v7 = 0;
      }
      if (v3 >= 0x10) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v12[v3] = v5;
      unsigned int v3 = ++v11;
      if (*(unsigned char *)(v7 + 16) == 62 && v7 != 0)
      {
        if (v3 >= 0x10) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v12[v3] = v7;
        unsigned int v3 = ++v11;
      }
      ++a1;
      v4 -= 8;
    }
    while (v4);
    uint64_t v9 = v12;
    if (v3)
    {
      uint64_t v10 = 8 * v3;
      do
      {
        if (!*(void *)(*v9 + 8)) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
}

uint64_t llvm::LoopVectorizeHints::allowVectorization(llvm::LoopVectorizeHints *this, llvm::Function *a2, llvm::Loop *a3, int a4)
{
  int v6 = *((_DWORD *)this + 10);
  if (v6 == -1) {
    llvm::Loop::getLoopID(*((llvm::Loop **)this + 13));
  }
  if (v6 && (!a4 || v6 == 1))
  {
    if (*((_DWORD *)this + 14) == 1)
    {
      uint64_t v7 = *****((void *****)this + 14);
      if (*(void *)(v7 + 128)
        || (uint64_t result = (*(uint64_t (**)(void, llvm::Function *))(**(void **)(v7 + 72) + 48))(*(void *)(v7 + 72), a2), result))
      {
        llvm::LoopVectorizeHints::vectorizeAnalysisPassName(this);
        llvm::Loop::getStartLoc(a3);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    llvm::LoopVectorizeHints::emitRemarkWithHints(this);
    return 0;
  }
  return result;
}

uint64_t llvm::LoopVectorizeHints::emitRemarkWithHints(llvm::LoopVectorizeHints *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *****((void *****)this + 14);
  if (*(void *)(v2 + 128)
    || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2 + 72) + 48))(*(void *)(v2 + 72)),
        result))
  {
    if (!*((_DWORD *)this + 10)) {
      llvm::Loop::getStartLoc(*((llvm::Loop **)this + 13));
    }
    llvm::Loop::getStartLoc(*((llvm::Loop **)this + 13));
  }
  return result;
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeOuterLoop(llvm::LoopVectorizationLegality *this)
{
  uint64_t v2 = *****((void *****)this + 8);
  if (!*(void *)(v2 + 128)) {
    sub_1CC421DEC(*(void *)(v2 + 72), (uint64_t)"loop-vectorize", 14);
  }
  unsigned int v3 = *(llvm::Loop **)this;
  uint64_t v4 = *(void *)(*(void *)this + 32);
  uint64_t v5 = *(void *)(*(void *)this + 40);
  if (v5 != v4)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)v4 + 40);
      if (v6 == *(void *)v4 + 40
        || (v6 ? (uint64_t v7 = v6 - 24) : (uint64_t v7 = 0),
            (v8 = *(unsigned __int8 *)(v7 + 16) - 40, v8 >= 0xFFFFFFF5) ? (uint64_t v9 = v7) : (uint64_t v9 = 0),
            !v6 || (*(unsigned char *)(v9 + 16) == 30 ? (BOOL v10 = v8 > 0xFFFFFFF4) : (BOOL v10 = 0), !v10)))
      {
        uint64_t v27 = *((void *)this + 8);
        unsigned int v28 = *(void *****)this;
        BOOL v29 = "Unsupported basic block terminator";
        uint64_t v30 = 34;
        goto LABEL_35;
      }
      if (!byte_1EBD0D9F0
        && (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 3
        && !llvm::Loop::isLoopInvariant(*(void *)this, *(void *)(v9 - 96)))
      {
        int v11 = (uint64_t *)*((void *)this + 1);
        int v12 = *((_DWORD *)v11 + 4);
        if (!v12) {
          llvm::reportVectorizationFailure((uint64_t)"Unsupported conditional branch", 30, (uint64_t)"loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((void *)this + 8), *(void *)this);
        }
        uint64_t v13 = *(void *)(v9 - 32);
        uint64_t v14 = *v11;
        unsigned int v15 = v12 - 1;
        uint64_t v16 = ((v13 >> 4) ^ (v13 >> 9)) & v15;
        uint64_t v17 = *(void *)(v14 + 16 * v16);
        if (v13 == v17)
        {
LABEL_25:
          uint64_t v20 = *(void *)(v14 + 16 * v16 + 8);
          if (v20 && **(void **)(v20 + 32) == v13) {
            goto LABEL_36;
          }
        }
        else
        {
          int v18 = 1;
          while (v17 != -4096)
          {
            int v19 = v16 + v18++;
            uint64_t v16 = v19 & v15;
            uint64_t v17 = *(void *)(v14 + 16 * v16);
            if (v13 == v17) {
              goto LABEL_25;
            }
          }
        }
        uint64_t v21 = *(void *)(v9 - 64);
        uint64_t v22 = ((v21 >> 4) ^ (v21 >> 9)) & v15;
        uint64_t v23 = *(void *)(v14 + 16 * v22);
        if (v21 != v23)
        {
          int v24 = 1;
          while (v23 != -4096)
          {
            int v25 = v22 + v24++;
            uint64_t v22 = v25 & v15;
            uint64_t v23 = *(void *)(v14 + 16 * v22);
            if (v21 == v23) {
              goto LABEL_31;
            }
          }
LABEL_33:
          uint64_t v27 = *((void *)this + 8);
          unsigned int v28 = *(void *****)this;
          BOOL v29 = "Unsupported conditional branch";
          uint64_t v30 = 30;
LABEL_35:
          llvm::reportVectorizationFailure((uint64_t)v29, v30, (uint64_t)"loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, v27, (uint64_t)v28);
        }
LABEL_31:
        uint64_t v26 = *(void *)(v14 + 16 * v22 + 8);
        if (!v26 || **(void **)(v26 + 32) != v21) {
          goto LABEL_33;
        }
      }
LABEL_36:
      v4 += 8;
      if (v4 == v5)
      {
        unsigned int v3 = *(llvm::Loop **)this;
        break;
      }
    }
  }
  if ((sub_1CD2F5D78(v3, v3) & 1) == 0) {
    llvm::reportVectorizationFailure((uint64_t)"Outer loop contains divergent loops", 35, (uint64_t)"loop control flow is not understood by vectorizer", 49, (uint64_t)"CFGNotUnderstood", 16, *((void *)this + 8), *(void *)this);
  }
  if ((llvm::LoopVectorizationLegality::setupOuterLoopInductions(this) & 1) == 0) {
    llvm::reportVectorizationFailure((uint64_t)"Unsupported outer loop Phi(s)", 29, (uint64_t)"Unsupported outer loop Phi(s)", 29, (uint64_t)"UnsupportedPhi", 14, *((void *)this + 8), *(void *)this);
  }
  return 1;
}

uint64_t sub_1CD2F5D78(llvm::Loop *a1, llvm::Loop *a2)
{
  if (a1 == a2)
  {
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    if (v4 == v5)
    {
      return 1;
    }
    else
    {
      uint64_t v6 = v4 + 8;
      do
      {
        uint64_t result = sub_1CD2F5D78(*(void *)(v6 - 8), a2);
        if (result) {
          BOOL v7 = v6 == v5;
        }
        else {
          BOOL v7 = 1;
        }
        v6 += 8;
      }
      while (!v7);
    }
  }
  else
  {
    uint64_t result = llvm::Loop::getCanonicalInductionVariable(a1);
    if (result) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
    }
  }
  return result;
}

uint64_t llvm::LoopVectorizationLegality::addInductionPhi(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v92 = a2;
  uint64_t v8 = sub_1CD8C7BC0(a1 + 128, &v92);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = a3[2];
  if (v10 != v11)
  {
    BOOL v12 = v10 == -4096 || v10 == 0;
    if (!v12 && v10 != -8192)
    {
      unint64_t v37 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v37 = *(void *)(v8 + 8);
      unint64_t v38 = *(unint64_t **)(v8 + 8);
      if (v38)
      {
        *unint64_t v38 = *v38 & 7 | v37;
      }
      else
      {
        uint64_t v39 = *(void *)(v8 + 16);
        uint64_t v40 = ***(int32x2_t ****)v39;
        unint64_t v41 = (unint64_t)v40[303];
        if (v41 <= v37)
        {
          uint64_t v42 = v40[305].u32[0];
          if (v41 + 16 * v42 > v37)
          {
            unsigned int v43 = v42 - 1;
            LODWORD(v44) = v43 & ((v39 >> 4) ^ (v39 >> 9));
            BOOL v45 = (uint64_t *)(v41 + 16 * v44);
            uint64_t v46 = *v45;
            if (v39 == *v45)
            {
LABEL_56:
              *BOOL v45 = -8192;
              v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v39 = *(void *)(v8 + 16);
            }
            else
            {
              int v47 = 1;
              while (v46 != -4096)
              {
                int v48 = v44 + v47++;
                uint64_t v44 = v48 & v43;
                uint64_t v46 = *(void *)(v41 + 16 * v44);
                if (v39 == v46)
                {
                  BOOL v45 = (uint64_t *)(v41 + 16 * v44);
                  goto LABEL_56;
                }
              }
            }
            *(unsigned char *)(v39 + 17) &= ~1u;
          }
        }
      }
      uint64_t v11 = a3[2];
    }
    *(void *)(v8 + 16) = v11;
    if (v11 != -4096 && v11 != -8192 && v11 != 0)
    {
      uint64_t v14 = *a3;
      unsigned int v15 = (void *)(*a3 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 + 8) = *v15;
      *unsigned int v15 = v8;
      *(void *)uint64_t v8 = v14 & 0xFFFFFFFFFFFFFFF8 | *(void *)v8 & 7;
      uint64_t v16 = *(uint64_t **)(v8 + 8);
      if (v16) {
        uint64_t *v16 = *v16 & 7 | (v8 + 8);
      }
    }
  }
  __n128 v17 = *(__n128 *)(a3 + 3);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 5);
  *(__n128 *)(v8 + 24) = v17;
  if ((uint64_t *)v8 != a3)
  {
    int v18 = (void **)(v8 + 56);
    uint64_t v19 = *((unsigned int *)a3 + 16);
    uint64_t v20 = *(unsigned int *)(v8 + 64);
    if (v20 >= v19)
    {
      if (v19) {
        memmove(*v18, (const void *)a3[7], 8 * v19);
      }
    }
    else
    {
      if (*(_DWORD *)(v8 + 68) < v19)
      {
        *(_DWORD *)(v8 + 64) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v20) {
        memmove(*v18, (const void *)a3[7], 8 * v20);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *((unsigned int *)a3 + 16);
      if (v20 != v21) {
        memcpy((char *)*v18 + 8 * v20, (const void *)(a3[7] + 8 * v20), 8 * v21 - 8 * v20);
      }
    }
    *(_DWORD *)(v9 + 64) = v19;
  }
  if (*((_DWORD *)a3 + 16))
  {
    uint64_t v22 = *(void *)a3[7];
    uint64_t v23 = *(void *)(a1 + 184);
    uint64_t v24 = *(unsigned int *)(a1 + 196);
    if (v23 == *(void *)(a1 + 176))
    {
      if (v24)
      {
        int v25 = 0;
        uint64_t v26 = 8 * v24;
        uint64_t v27 = *(void **)(a1 + 184);
        while (*v27 != v22)
        {
          if (*v27 == -2) {
            int v25 = v27;
          }
          ++v27;
          v26 -= 8;
          if (!v26)
          {
            if (!v25) {
              goto LABEL_31;
            }
            void *v25 = v22;
            --*(_DWORD *)(a1 + 200);
            goto LABEL_66;
          }
        }
        goto LABEL_66;
      }
LABEL_31:
      unsigned int v28 = *(_DWORD *)(a1 + 192);
      if (v24 < v28)
      {
        *(_DWORD *)(a1 + 196) = v24 + 1;
        *(void *)(v23 + 8 * v24) = v22;
        goto LABEL_66;
      }
    }
    else
    {
      unsigned int v28 = *(_DWORD *)(a1 + 192);
    }
    if (3 * v28 <= 4 * ((int)v24 - *(_DWORD *)(a1 + 200)))
    {
      if (v28 >= 0x40) {
        v28 *= 2;
      }
      else {
        unsigned int v28 = 128;
      }
    }
    else if (v28 - v24 >= v28 >> 3)
    {
      goto LABEL_36;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 176), v28);
    unsigned int v28 = *(_DWORD *)(a1 + 192);
    uint64_t v23 = *(void *)(a1 + 184);
LABEL_36:
    unsigned int v29 = v28 - 1;
    unsigned int v30 = (v28 - 1) & ((v22 >> 4) ^ (v22 >> 9));
    uint64_t v31 = (void *)(v23 + 8 * v30);
    uint64_t v32 = *v31;
    if (*v31 == -1)
    {
      uint64_t v33 = 0;
LABEL_59:
      if (v33) {
        int v49 = v33;
      }
      else {
        int v49 = v31;
      }
      if (*v49 != v22)
      {
        if (*v49 == -2) {
          --*(_DWORD *)(a1 + 200);
        }
        else {
          ++*(_DWORD *)(a1 + 196);
        }
        *int v49 = v22;
      }
    }
    else
    {
      uint64_t v33 = 0;
      int v34 = 1;
      while (v32 != v22)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == -2;
        }
        if (v35) {
          uint64_t v33 = v31;
        }
        unsigned int v36 = v30 + v34++;
        unsigned int v30 = v36 & v29;
        uint64_t v31 = (void *)(v23 + 8 * (v36 & v29));
        uint64_t v32 = *v31;
        if (*v31 == -1) {
          goto LABEL_59;
        }
      }
    }
  }
LABEL_66:
  uint64_t v50 = *(llvm::Type **)a2;
  if (*(unsigned __int8 *)(*(void *)a2 + 8) >= 7u)
  {
    uint64_t v51 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
    unsigned int v52 = *(llvm::Type **)(a1 + 384);
    v17.n128_f64[0] = sub_1CD2F6774(*(void *)(v51 + 504), *(_DWORD *)(v51 + 512), *(llvm::Type **)a2);
    uint64_t v54 = v53;
    if (v52)
    {
      sub_1CD2F6774(*(void *)(v51 + 504), *(_DWORD *)(v51 + 512), v52);
      uint64_t v56 = v55;
      BOOL v57 = (*(_DWORD *)(v54 + 8) & 0xFE) == 0x12 ? **(llvm::Type ***)(v54 + 16) : (llvm::Type *)v54;
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v57);
      uint64_t v59 = (*(_DWORD *)(v56 + 8) & 0xFE) == 0x12 ? **(llvm::Type ***)(v56 + 16) : (llvm::Type *)v56;
      if (PrimitiveSizeInBits <= llvm::Type::getPrimitiveSizeInBits(v59)) {
        uint64_t v54 = v56;
      }
    }
    *(void *)(a1 + 384) = v54;
  }
  if (*((_DWORD *)a3 + 6) == 1)
  {
    uint64_t v60 = a3[4];
    if (!*(_WORD *)(v60 + 24))
    {
      uint64_t v76 = *(void *)(v60 + 32);
      if (v76)
      {
        uint64_t v77 = *(unsigned int *)(v76 + 32);
        if (v77 > 0x40)
        {
          int v79 = 0;
          int64_t v80 = (unint64_t)(v77 + 63) >> 6;
          do
          {
            BOOL v81 = v80-- < 1;
            if (v81) {
              break;
            }
            unint64_t v82 = *(void *)(*(void *)(v76 + 24) + 8 * v80);
            v79 += __clz(v82);
          }
          while (!v82);
          int v83 = v77 | 0xFFFFFFC0;
          if ((v77 & 0x3F) == 0) {
            int v83 = 0;
          }
          if (v79 + v83 != v77 - 1) {
            goto LABEL_77;
          }
        }
        else if (*(void *)(v76 + 24) != 1)
        {
          goto LABEL_77;
        }
        uint64_t v84 = a3[2];
        unsigned int v85 = *(unsigned __int8 *)(v84 + 16);
        if (v85 > 0x14) {
          goto LABEL_77;
        }
        if (v85 != 16)
        {
          if (v85 == 17)
          {
            if ((sub_1CB844168(v84, 0.0) & 1) == 0) {
              goto LABEL_77;
            }
          }
          else if (v85 - 18 >= 3 && v85 != 13)
          {
            goto LABEL_77;
          }
          goto LABEL_126;
        }
        uint64_t v86 = *(unsigned int *)(v84 + 32);
        if (v86 < 0x41)
        {
          if (*(void *)(v84 + 24)) {
            goto LABEL_77;
          }
          goto LABEL_126;
        }
        int v88 = 0;
        int64_t v89 = (unint64_t)(v86 + 63) >> 6;
        do
        {
          BOOL v81 = v89-- < 1;
          if (v81) {
            break;
          }
          unint64_t v90 = *(void *)(*(void *)(v84 + 24) + 8 * v89);
          v88 += __clz(v90);
        }
        while (!v90);
        int v91 = v86 | 0xFFFFFFC0;
        if ((v86 & 0x3F) == 0) {
          int v91 = 0;
        }
        if (v88 + v91 == v86)
        {
LABEL_126:
          if (!*(void *)(a1 + 72) || v50 == *(llvm::Type **)(a1 + 384)) {
            *(void *)(a1 + 72) = a2;
          }
        }
      }
    }
  }
LABEL_77:
  uint64_t result = (*(uint64_t (**)(void, __n128))(**(void **)(*(void *)(a1 + 16) + 104) + 8))(*(void *)(*(void *)(a1 + 16) + 104), v17);
  if (result)
  {
    uint64_t v62 = *(void *)(a4 + 8);
    uint64_t v63 = *(unsigned int *)(a4 + 20);
    if (v62 == *(void *)a4)
    {
      if (v63)
      {
        uint64_t v64 = 0;
        uint64_t v65 = 8 * v63;
        uint64_t v66 = *(uint64_t **)(a4 + 8);
        do
        {
          if (*v66 == a2) {
            goto LABEL_114;
          }
          if (*v66 == -2) {
            uint64_t v64 = v66;
          }
          ++v66;
          v65 -= 8;
        }
        while (v65);
        if (v64)
        {
          *uint64_t v64 = a2;
          --*(_DWORD *)(a4 + 24);
          goto LABEL_114;
        }
      }
      unsigned int v67 = *(_DWORD *)(a4 + 16);
      if (v63 < v67)
      {
        *(_DWORD *)(a4 + 20) = v63 + 1;
        *(void *)(v62 + 8 * v63) = a2;
        goto LABEL_114;
      }
    }
    else
    {
      unsigned int v67 = *(_DWORD *)(a4 + 16);
    }
    if (3 * v67 <= 4 * ((int)v63 - *(_DWORD *)(a4 + 24)))
    {
      if (v67 >= 0x40) {
        v67 *= 2;
      }
      else {
        unsigned int v67 = 128;
      }
    }
    else if (v67 - v63 >= v67 >> 3)
    {
      goto LABEL_91;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v67);
    unsigned int v67 = *(_DWORD *)(a4 + 16);
    uint64_t v62 = *(void *)(a4 + 8);
LABEL_91:
    unsigned int v68 = v67 - 1;
    unsigned int v69 = (v67 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v70 = (uint64_t *)(v62 + 8 * v69);
    uint64_t v71 = *v70;
    if (*v70 == -1)
    {
      int v72 = 0;
LABEL_107:
      if (v72) {
        int v78 = v72;
      }
      else {
        int v78 = v70;
      }
      if (*v78 != a2)
      {
        if (*v78 == -2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        *int v78 = a2;
      }
    }
    else
    {
      int v72 = 0;
      int v73 = 1;
      while (v71 != a2)
      {
        if (v72) {
          BOOL v74 = 0;
        }
        else {
          BOOL v74 = v71 == -2;
        }
        if (v74) {
          int v72 = v70;
        }
        unsigned int v75 = v69 + v73++;
        unsigned int v69 = v75 & v68;
        uint64_t v70 = (uint64_t *)(v62 + 8 * (v75 & v68));
        uint64_t v71 = *v70;
        if (*v70 == -1) {
          goto LABEL_107;
        }
      }
    }
LABEL_114:
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  return result;
}

double sub_1CD2F6774(uint64_t a1, unsigned int a2, llvm::Type *this)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  int v5 = v4 & 0xFE;
  if (v4 == 15)
  {
    if (v5 == 18) {
      unsigned int v4 = *(_DWORD *)(**((void **)this + 2) + 8);
    }
    if (v4 < 0x100) {
      goto LABEL_13;
    }
    unsigned int v6 = v4 >> 8;
    uint64_t v7 = a1;
    if (a2)
    {
      uint64_t v7 = a1;
      unint64_t v8 = a2;
      do
      {
        unint64_t v9 = v8 >> 1;
        uint64_t v10 = v7 + 16 * (v8 >> 1);
        unsigned int v11 = *(_DWORD *)(v10 + 8);
        uint64_t v12 = v10 + 16;
        v8 += ~(v8 >> 1);
        if (v11 < v6) {
          uint64_t v7 = v12;
        }
        else {
          unint64_t v8 = v9;
        }
      }
      while (v8);
    }
    if (v7 == a1 + 16 * a2 || *(_DWORD *)(v7 + 8) != v6) {
LABEL_13:
    }
      uint64_t v7 = a1;
    uint64_t v13 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)this, (llvm::LLVMContext *)*(unsigned int *)(v7 + 4));
    if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    {
      uint64_t v16 = (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32));
      return llvm::VectorType::get(v13, v16);
    }
  }
  else
  {
    unsigned int v15 = this;
    if (v5 == 18) {
      unsigned int v15 = (llvm::Type *)**((void **)this + 2);
    }
    llvm::Type::getPrimitiveSizeInBits(v15);
  }
  return result;
}

void llvm::LoopVectorizationLegality::canVectorizeInstrs(llvm::LoopVectorizationLegality *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::DominatorTree *a7)
{
  v324[2] = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(*(void *)this + 32);
  uint64_t v301 = *(uint64_t **)(*(void *)this + 40);
  if (v301 == v8)
  {
LABEL_468:
    if (!*((void *)this + 9))
    {
      if (*((void *)this + 19) == *((void *)this + 20))
      {
        uint64_t v263 = *((void *)this + 8);
        uint64_t v264 = *(void *)this;
        uint64_t v286 = 0;
        int v265 = "Did not find one integer induction var";
        uint64_t v266 = "loop induction variable could not be identified";
        uint64_t v267 = "NoInductionVariable";
        uint64_t v268 = 38;
        uint64_t v269 = 47;
        uint64_t v270 = 19;
        goto LABEL_520;
      }
      uint64_t v264 = *(void *)this;
      if (!*((void *)this + 48))
      {
        uint64_t v263 = *((void *)this + 8);
        uint64_t v286 = 0;
        int v265 = "Did not find one integer induction var";
        uint64_t v266 = "integer loop induction variable could not be identified";
        uint64_t v267 = "NoIntegerInductionVariable";
        uint64_t v268 = 38;
        uint64_t v269 = 55;
        uint64_t v270 = 26;
        goto LABEL_520;
      }
    }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  uint64_t v304 = *v8;
  unint64_t v300 = &v309;
  v296 = &v311;
  BOOL v291 = (llvm::SmallPtrSetImplBase *)v313;
  long long v292 = (llvm::LoopVectorizationLegality *)((char *)this + 392);
  uint64_t v299 = v315;
  unint64_t v295 = &v317;
  uint64_t v298 = v324;
  BOOL v290 = (char *)this + 336;
  BOOL v289 = (llvm::LoopVectorizationLegality *)((char *)this + 240);
  uint64_t v293 = (uint64_t)this + 80;
  uint64_t v294 = &v320;
  uint64_t v297 = (char *)&v310;
  while (1)
  {
    uint64_t v302 = v8;
    uint64_t v9 = *v8 + 40;
    uint64_t v305 = *v8;
    uint64_t v10 = *(void *)(*v8 + 48);
    if (v10 != v9) {
      break;
    }
LABEL_467:
    unint64_t v8 = v302 + 1;
    if (v302 + 1 == v301) {
      goto LABEL_468;
    }
  }
  uint64_t v303 = v9;
  while (1)
  {
    if (v10) {
      unsigned int v11 = (llvm::FixedVectorType **)(v10 - 24);
    }
    else {
      unsigned int v11 = 0;
    }
    int v12 = *((unsigned __int8 *)v11 + 16);
    if (v12 == 83) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v307 = (llvm::InductionDescriptor *)v13;
    if (!v10 || v12 != 83)
    {
      if (v12 == 84) {
        uint64_t v23 = (uint64_t)v11;
      }
      else {
        uint64_t v23 = 0;
      }
      BOOL v24 = v12 != 84 || v10 == 0;
      if (!v24)
      {
        if (!llvm::getVectorIntrinsicIDForCall(v23, *((uint64_t **)this + 4)) && !sub_1CBF63B28(v23))
        {
          uint64_t v25 = *(void *)(v23 - 32);
          if (!v25 || *(unsigned char *)(v25 + 16) || *(void *)(v25 + 24) != *(void *)(v23 + 72)) {
            goto LABEL_478;
          }
          if (!*((void *)this + 4)) {
            goto LABEL_517;
          }
          uint64_t v308 = v297;
          uint64_t v309 = 0x800000000;
          sub_1CC076744((void **)v23, (uint64_t)&v308);
          unsigned int v26 = v309;
          if (v309)
          {
            char v27 = 1;
            unsigned int v28 = (char *)v308;
            goto LABEL_47;
          }
          uint64_t v63 = *(uint64_t ****)(v23 - 32);
          if (!v63 || *((unsigned char *)v63 + 16) || v63[3] != *(uint64_t ***)(v23 + 72)) {
            uint64_t v63 = 0;
          }
          if ((*((unsigned char *)v63 + 23) & 0x10) != 0)
          {
            uint64_t v64 = ***v63;
            uint64_t v65 = *(void *)(v64 + 152);
            uint64_t v66 = *(unsigned int *)(v64 + 168);
            if (v66)
            {
              LODWORD(v67) = (v66 - 1) & ((v63 >> 4) ^ (v63 >> 9));
              unsigned int v68 = (uint64_t ****)(v65 + 16 * v67);
              unsigned int v69 = *v68;
              if (*v68 != v63)
              {
                int v70 = 1;
                do
                {
                  if (v69 == (uint64_t ***)-4096) {
                    goto LABEL_175;
                  }
                  int v71 = v67 + v70++;
                  uint64_t v67 = v71 & (v66 - 1);
                  unsigned int v69 = *(uint64_t ****)(v65 + 16 * v67);
                }
                while (v69 != v63);
                unsigned int v68 = (uint64_t ****)(v65 + 16 * v67);
              }
            }
            else
            {
LABEL_175:
              unsigned int v68 = (uint64_t ****)(v65 + 16 * v66);
            }
            uint64_t v104 = v68[1];
            size_t v107 = (size_t)*v104;
            uint64_t v106 = (char *)(v104 + 2);
            size_t v105 = v107;
          }
          else
          {
            size_t v105 = 0;
            uint64_t v106 = &byte_1CFBCE98E;
          }
          unsigned int v108 = (uint64_t *)*((void *)this + 4);
          uint64_t v109 = *v108;
          if (!llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*v108, v106, v105))
          {
            char v27 = 0;
            goto LABEL_179;
          }
          uint64_t v316 = 0;
          uint64_t v307 = 0;
          __uint64_t n = v105;
          llvm::TargetLibraryInfoImpl::getWidestVF(v109, v106, v105, &v316, &v307);
          uint64_t v306 = 2;
          unsigned int v244 = v316;
          if (v316 >= 2)
          {
            *(void *)uint64_t v287 = *v108;
            unsigned int v245 = 2;
            char v27 = 1;
            do
            {
              llvm::TargetLibraryInfoImpl::getVectorizedFunction(*(uint64_t *)v287, v106, __n, (int *)&v306);
              v27 &= v246 == 0;
              v245 *= 2;
              LODWORD(v306) = v245;
            }
            while (v245 <= v244);
          }
          else
          {
            char v27 = 1;
          }
          uint64_t v306 = 0x100000001;
          if (HIDWORD(v307) == 1)
          {
            unsigned int v247 = v307;
            if (v307)
            {
              *(void *)uint64_t v287 = *v108;
              unsigned int v248 = 1;
              size_t v249 = __n;
              do
              {
                llvm::TargetLibraryInfoImpl::getVectorizedFunction(*(uint64_t *)v287, v106, v249, (int *)&v306);
                v27 &= v250 == 0;
                v248 *= 2;
                LODWORD(v306) = v248;
              }
              while (v248 <= v247);
            }
          }
          unsigned int v26 = v309;
          unsigned int v28 = (char *)v308;
          if (v309)
          {
LABEL_47:
            uint64_t v29 = 208 * v26;
            unsigned int v30 = v28 - 208;
            do
            {
              sub_1CD49DEA4((uint64_t)&v30[v29]);
              v29 -= 208;
            }
            while (v29);
LABEL_179:
            unsigned int v28 = (char *)v308;
          }
          if (v28 != v297) {
            free(v28);
          }
          if ((v27 & 1) == 0)
          {
LABEL_478:
            uint64_t v253 = (void *)*((void *)this + 4);
            if (!v253) {
              goto LABEL_517;
            }
            uint64_t v254 = *(uint64_t ****)(v23 - 32);
            if (!v254
              || *((unsigned char *)v254 + 16)
              || v254[3] != *(uint64_t ***)(v23 + 72)
              || *(unsigned __int8 *)(*(void *)v23 + 8) > 6u)
            {
              goto LABEL_517;
            }
            if ((*((unsigned char *)v254 + 23) & 0x10) != 0)
            {
              uint64_t v255 = ***v254;
              uint64_t v256 = *(void *)(v255 + 152);
              uint64_t v257 = *(unsigned int *)(v255 + 168);
              if (v257)
              {
                LODWORD(v258) = (v257 - 1) & ((v254 >> 4) ^ (v254 >> 9));
                int v259 = (uint64_t ****)(v256 + 16 * v258);
                int v260 = *v259;
                if (*v259 != v254)
                {
                  int v261 = 1;
                  do
                  {
                    if (v260 == (uint64_t ***)-4096) {
                      goto LABEL_493;
                    }
                    int v262 = v258 + v261++;
                    uint64_t v258 = v262 & (v257 - 1);
                    int v260 = *(uint64_t ****)(v256 + 16 * v258);
                  }
                  while (v260 != v254);
                  int v259 = (uint64_t ****)(v256 + 16 * v258);
                }
              }
              else
              {
LABEL_493:
                int v259 = (uint64_t ****)(v256 + 16 * v257);
              }
              v271 = v259[1];
              size_t v274 = (size_t)*v271;
              uint64_t v272 = (char *)(v271 + 2);
              size_t v273 = v274;
            }
            else
            {
              size_t v273 = 0;
              uint64_t v272 = &byte_1CFBCE98E;
            }
            uint64_t v275 = sub_1CC154CDC(v272, v273);
            if (!v276) {
              goto LABEL_517;
            }
            unint64_t v277 = v275;
            size_t v278 = v276;
            uint64_t v279 = &llvm::TargetLibraryInfoImpl::StandardNames;
            unint64_t v280 = 468;
            do
            {
              uint64_t v281 = &v279[2 * (v280 >> 1)];
              size_t v282 = (size_t)v281[1];
              if (v278 >= v282) {
                size_t v283 = (size_t)v281[1];
              }
              else {
                size_t v283 = v278;
              }
              if (v283 && (int v284 = memcmp(*v281, v277, v283)) != 0)
              {
                int v285 = (v284 >> 31) | 1;
              }
              else
              {
                if (v282 < v278) {
                  int v285 = -1;
                }
                else {
                  int v285 = 1;
                }
                if (v282 == v278) {
                  int v285 = 0;
                }
              }
              if (v285 == -1) {
                v280 += ~(v280 >> 1);
              }
              else {
                v280 >>= 1;
              }
              if (v285 == -1) {
                uint64_t v279 = v281 + 2;
              }
            }
            while (v280);
            if (v279 != &llvm::TargetLibraryInfoImpl::StandardNames + 936
              && v279[1] == (char *)v278
              && !memcmp(*v279, v277, v278)
              && sub_1CD78B778(v253, (unint64_t)((char *)v279 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 4))
            {
              uint64_t v263 = *((void *)this + 8);
              uint64_t v264 = *(void *)this;
              uint64_t v286 = (llvm::FixedVectorType **)v23;
              int v265 = "Found a non-intrinsic callsite";
              uint64_t v266 = "library call cannot be vectorized. Try compiling with -fno-math-errno, -ffast-math, or similar flags";
              uint64_t v267 = "CantVectorizeLibcall";
              uint64_t v268 = 30;
              uint64_t v269 = 100;
            }
            else
            {
LABEL_517:
              uint64_t v263 = *((void *)this + 8);
              uint64_t v264 = *(void *)this;
              uint64_t v286 = (llvm::FixedVectorType **)v23;
              int v265 = "Found a non-intrinsic callsite";
              uint64_t v266 = "call instruction cannot be vectorized";
              uint64_t v267 = "CantVectorizeLibcall";
              uint64_t v268 = 30;
LABEL_518:
              uint64_t v269 = 37;
            }
            uint64_t v270 = 20;
LABEL_520:
            llvm::reportVectorizationFailure((uint64_t)v265, v268, (uint64_t)v266, v269, (uint64_t)v267, v270, v263, v264);
          }
        }
        int v110 = *(llvm::ScalarEvolution **)(*((void *)this + 2) + 88);
        uint64_t v111 = llvm::getVectorIntrinsicIDForCall(v23, *((uint64_t **)this + 4));
        int v112 = *(unsigned __int8 *)(v23 + 16);
        if (v112 == 84)
        {
          uint64_t v113 = 0;
        }
        else if (v112 == 39)
        {
          uint64_t v113 = (*(_DWORD *)(v23 + 80) + 1);
        }
        else
        {
          uint64_t v113 = 2;
        }
        int v114 = *(_DWORD *)(v23 + 20);
        if (v114 < 0
          && (uint64_t v251 = v23 - 32 * (v114 & 0x7FFFFFF), v252 = *(void *)(v251 - 8), (v252 & 0xFFFFFFFF0) != 0))
        {
          uint64_t v116 = -(uint64_t)(v114 & 0x7FFFFFF);
          uint64_t v115 = (*(_DWORD *)(v251 - 12) - *(_DWORD *)(v251 - v252));
        }
        else
        {
          uint64_t v115 = 0;
          uint64_t v116 = -(uint64_t)(v114 & 0x7FFFFFF);
        }
        unint64_t v117 = -32 * v113 - 32 * v115 - 32 * v116 - 32;
        if ((v117 & 0x1FFFFFFFE0) != 0)
        {
          uint64_t v118 = 0;
          uint64_t v119 = (v117 >> 5);
          uint64_t v120 = v23;
          while (1)
          {
            if (llvm::hasVectorInstrinsicScalarOpd(v111, v118))
            {
              SCEV = (const llvm::SCEV *)llvm::PredicatedScalarEvolution::getSCEV(*((int8x16_t **)this + 2), *(llvm::Value **)(v120 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF)));
              if (llvm::ScalarEvolution::getLoopDisposition(v110, SCEV, *(const llvm::Loop **)this) != 1) {
                break;
              }
            }
            ++v118;
            v120 += 32;
            if (v119 == v118) {
              goto LABEL_192;
            }
          }
          uint64_t v263 = *((void *)this + 8);
          uint64_t v264 = *(void *)this;
          uint64_t v286 = (llvm::FixedVectorType **)v23;
          int v265 = "Found unvectorizable intrinsic";
          uint64_t v266 = "intrinsic instruction cannot be vectorized";
          uint64_t v267 = "CantVectorizeIntrinsic";
          uint64_t v268 = 30;
          uint64_t v269 = 42;
          uint64_t v270 = 22;
          goto LABEL_520;
        }
      }
LABEL_192:
      unsigned int v122 = *((unsigned __int8 *)*v11 + 8);
      BOOL v124 = v122 <= 0x14 && ((1 << v122) & 0x10A07F) != 0 || v122 == 7;
      if (!v124 || (int v125 = *((unsigned __int8 *)v11 + 16), v125 == 89))
      {
        uint64_t v263 = *((void *)this + 8);
        uint64_t v264 = *(void *)this;
        uint64_t v286 = v11;
        int v265 = "Found unvectorizable type";
        uint64_t v266 = "instruction return type cannot be vectorized";
        uint64_t v267 = "CantVectorizeInstructionReturnType";
        uint64_t v268 = 25;
        uint64_t v269 = 44;
        uint64_t v270 = 34;
        goto LABEL_520;
      }
      if (v125 == 61) {
        unsigned int v126 = v11;
      }
      else {
        unsigned int v126 = 0;
      }
      if (v10 && v125 == 61)
      {
        int v127 = *(unsigned __int8 **)*(v126 - 8);
        unsigned int v128 = v127[8];
        BOOL v129 = v128 > 0x14;
        int v130 = (1 << v128) & 0x10A07F;
        if (v129 || v130 == 0)
        {
          uint64_t v263 = *((void *)this + 8);
          uint64_t v264 = *(void *)this;
          uint64_t v286 = v126;
          int v265 = "Store instruction cannot be vectorized";
          uint64_t v266 = "store instruction cannot be vectorized";
          uint64_t v267 = "CantVectorizeStore";
          uint64_t v268 = 38;
          uint64_t v269 = 38;
          uint64_t v270 = 18;
          goto LABEL_520;
        }
        if ((*((unsigned char *)v126 + 23) & 0x20) != 0)
        {
          uint64_t v132 = **(void **)*v126;
          uint64_t v308 = v126;
          int v133 = *(_DWORD *)(v132 + 2496);
          if (!v133)
          {
            unsigned int v213 = 0;
            goto LABEL_358;
          }
          uint64_t v134 = *(void *)(v132 + 2480);
          int v135 = v133 - 1;
          unsigned int v136 = v135 & ((v126 >> 4) ^ (v126 >> 9));
          int v137 = (void *)(v134 + 40 * v136);
          uint64_t v138 = (void ***)*v137;
          if ((llvm::FixedVectorType **)*v137 != v126)
          {
            char v139 = 0;
            int v140 = 1;
            while (v138 != (void ***)-4096)
            {
              if (v139) {
                BOOL v141 = 0;
              }
              else {
                BOOL v141 = v138 == (void ***)-8192;
              }
              if (v141) {
                char v139 = v137;
              }
              unsigned int v142 = v136 + v140++;
              unsigned int v136 = v142 & v135;
              int v137 = (void *)(v134 + 40 * v136);
              uint64_t v138 = (void ***)*v137;
              if ((llvm::FixedVectorType **)*v137 == v126) {
                goto LABEL_221;
              }
            }
            if (v139) {
              unsigned int v213 = v139;
            }
            else {
              unsigned int v213 = v137;
            }
LABEL_358:
            int v137 = sub_1CC609054(v132 + 2480, (uint64_t)&v308, (uint64_t *)&v308, v213);
            unint64_t v214 = v308;
            v137[4] = 0;
            v137[3] = 0;
            *int v137 = v214;
            v137[1] = v137 + 3;
            v137[2] = 0x100000000;
          }
LABEL_221:
          uint64_t v143 = *((unsigned int *)v137 + 4);
          if (v143)
          {
            uint64_t v144 = (void *)(v137[1] + 8);
            uint64_t v145 = 16 * v143;
            while (*((_DWORD *)v144 - 2) != 9)
            {
              v144 += 2;
              v145 -= 16;
              if (!v145) {
                goto LABEL_259;
              }
            }
            if (*v144)
            {
              double v162 = llvm::FixedVectorType::get((llvm::FixedVectorType *)v127, (llvm::Type *)2);
              if (((*(uint64_t (**)(void, uint64_t, unint64_t, double))(***((void ***)this + 3)
                                                                                         + 336))(**((void **)this + 3), v163, ((unint64_t)*((unsigned __int16 *)v126 + 9) >> 1) & 0x3F, v162) & 1) == 0)
              {
                uint64_t v263 = *((void *)this + 8);
                uint64_t v264 = *(void *)this;
                uint64_t v286 = v126;
                int v265 = "nontemporal store instruction cannot be vectorized";
                uint64_t v267 = "CantVectorizeNontemporalStore";
                uint64_t v268 = 50;
                uint64_t v266 = "nontemporal store instruction cannot be vectorized";
                uint64_t v269 = 50;
                uint64_t v270 = 29;
                goto LABEL_520;
              }
            }
          }
        }
        goto LABEL_259;
      }
      if (v125 == 60) {
        long long v146 = (unsigned __int16 *)v11;
      }
      else {
        long long v146 = 0;
      }
      if (!v10 || v125 != 60)
      {
        if (v122 <= 6)
        {
          BOOL v161 = (v125 - 59) < 0xFFFFFFEE && v24;
          if (!v161 && *((unsigned __int8 *)v11 + 17) <= 0xFDu) {
            *(unsigned char *)(*((void *)this + 58) + 96) = 1;
          }
        }
        goto LABEL_259;
      }
      if ((*((unsigned char *)v146 + 23) & 0x20) == 0)
      {
LABEL_259:
        uint64_t v166 = *(void *)this;
        uint64_t v168 = *((void *)this + 49);
        uint64_t v167 = *((void *)this + 50);
        if (v167 == v168)
        {
          uint64_t v169 = *((unsigned int *)this + 103);
          uint64_t v170 = (llvm::FixedVectorType ***)(v167 + 8 * v169);
          uint64_t v9 = v303;
          if (v169)
          {
            uint64_t v171 = 0;
            uint64_t v172 = 8 * v169;
            while (*(llvm::FixedVectorType ***)(v167 + v171) != v11)
            {
              v171 += 8;
              if (v172 == v171) {
                goto LABEL_280;
              }
            }
            uint64_t v170 = (llvm::FixedVectorType ***)(v167 + v171);
          }
LABEL_280:
          uint64_t v168 = *((void *)this + 50);
        }
        else
        {
          uint64_t v173 = *((unsigned int *)this + 102);
          int v174 = v173 - 1;
          unsigned int v175 = (v173 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          uint64_t v170 = (llvm::FixedVectorType ***)(v167 + 8 * v175);
          uint64_t v176 = *v170;
          uint64_t v9 = v303;
          int v177 = 0;
          if (*v170 == (llvm::FixedVectorType **)-1)
          {
LABEL_275:
            if (v177) {
              uint64_t v170 = v177;
            }
            if (*v170 != v11) {
              uint64_t v170 = (llvm::FixedVectorType ***)(v167 + 8 * v173);
            }
          }
          else
          {
            int v178 = 1;
            while (v176 != v11)
            {
              if (v177) {
                BOOL v179 = 0;
              }
              else {
                BOOL v179 = v176 == (llvm::FixedVectorType **)-2;
              }
              if (v179) {
                int v177 = v170;
              }
              unsigned int v180 = v175 + v178++;
              unsigned int v175 = v180 & v174;
              uint64_t v170 = (llvm::FixedVectorType ***)(v167 + 8 * (v180 & v174));
              uint64_t v176 = *v170;
              if (*v170 == (llvm::FixedVectorType **)-1) {
                goto LABEL_275;
              }
            }
          }
        }
        if (v167 == v168) {
          uint64_t v181 = (char *)this + 412;
        }
        else {
          uint64_t v181 = (char *)this + 408;
        }
        if (v170 != (llvm::FixedVectorType ***)(v167 + 8 * *(unsigned int *)v181)) {
          goto LABEL_421;
        }
        uint64_t v182 = v11[1];
        if (!v182) {
          goto LABEL_421;
        }
        int v183 = (unsigned int *)(v166 + 76);
        uint64_t v184 = (unsigned int *)(v166 + 72);
        uint64_t v187 = v166 + 56;
        uint64_t v186 = *(void *)(v166 + 56);
        uint64_t v185 = *(void *)(v187 + 8);
        if (v185 == v186) {
          __int16 v188 = v183;
        }
        else {
          __int16 v188 = v184;
        }
        uint64_t v189 = v185;
        while (1)
        {
          uint64_t v190 = *(void *)(*((void *)v182 + 3) + 40);
          if (v189 == v186)
          {
            uint64_t v191 = *v183;
            uint64_t v192 = (void *)(v186 + 8 * v191);
            if (v191)
            {
              uint64_t v193 = 0;
              uint64_t v194 = 8 * v191;
              while (*(void *)(v186 + v193) != v190)
              {
                v193 += 8;
                if (v194 == v193) {
                  goto LABEL_308;
                }
              }
              uint64_t v192 = (void *)(v186 + v193);
            }
LABEL_308:
            uint64_t v189 = v186;
          }
          else
          {
            int v195 = *v184 - 1;
            unsigned int v196 = v195 & ((v190 >> 4) ^ (v190 >> 9));
            uint64_t v192 = (void *)(v185 + 8 * v196);
            uint64_t v197 = *v192;
            if (*v192 == -1)
            {
              uint64_t v198 = 0;
LABEL_310:
              if (v198) {
                uint64_t v192 = v198;
              }
              if (*v192 != v190) {
                uint64_t v192 = (void *)(v185 + 8 * *v188);
              }
            }
            else
            {
              uint64_t v198 = 0;
              int v199 = 1;
              while (v197 != v190)
              {
                if (v198) {
                  BOOL v200 = 0;
                }
                else {
                  BOOL v200 = v197 == -2;
                }
                if (v200) {
                  uint64_t v198 = v192;
                }
                unsigned int v201 = v196 + v199++;
                unsigned int v196 = v201 & v195;
                uint64_t v192 = (void *)(v185 + 8 * (v201 & v195));
                uint64_t v197 = *v192;
                if (*v192 == -1) {
                  goto LABEL_310;
                }
              }
            }
            uint64_t v189 = v185;
          }
          uint64_t v202 = v189 == v186 ? v183 : v184;
          if (v192 == (void *)(v189 + 8 * *v202)) {
            break;
          }
          uint64_t v182 = (llvm::FixedVectorType *)*((void *)v182 + 1);
          if (!v182) {
            goto LABEL_421;
          }
        }
        if (!(*(unsigned int (**)(void))(**(void **)(*((void *)this + 2) + 104) + 8))(*(void *)(*((void *)this + 2) + 104)))
        {
          uint64_t v263 = *((void *)this + 8);
          uint64_t v264 = *(void *)this;
          uint64_t v286 = v11;
          int v265 = "Value cannot be used outside the loop";
          uint64_t v266 = "value cannot be used outside the loop";
          uint64_t v267 = "ValueUsedOutsideLoop";
          uint64_t v268 = 37;
          goto LABEL_518;
        }
        uint64_t v17 = *((void *)this + 50);
        uint64_t v18 = *((unsigned int *)this + 103);
        if (v17 != *((void *)this + 49))
        {
          unsigned int v205 = *((_DWORD *)this + 102);
LABEL_333:
          if (3 * v205 <= 4 * ((int)v18 - *((_DWORD *)this + 104)))
          {
            if (v205 >= 0x40) {
              v205 *= 2;
            }
            else {
              unsigned int v205 = 128;
            }
          }
          else if (v205 - v18 >= v205 >> 3)
          {
            goto LABEL_335;
          }
          llvm::SmallPtrSetImplBase::Grow(v292, v205);
          unsigned int v205 = *((_DWORD *)this + 102);
          uint64_t v17 = *((void *)this + 50);
LABEL_335:
          unsigned int v206 = v205 - 1;
          unsigned int v207 = (v205 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          unint64_t v41 = (llvm::FixedVectorType ***)(v17 + 8 * v207);
          unsigned int v208 = *v41;
          if (*v41 != (llvm::FixedVectorType **)-1)
          {
            unsigned int v43 = 0;
            int v209 = 1;
            while (v208 != v11)
            {
              if (v43) {
                BOOL v210 = 0;
              }
              else {
                BOOL v210 = v208 == (llvm::FixedVectorType **)-2;
              }
              if (v210) {
                unsigned int v43 = v41;
              }
              unsigned int v211 = v207 + v209++;
              unsigned int v207 = v211 & v206;
              unint64_t v41 = (llvm::FixedVectorType ***)(v17 + 8 * (v211 & v206));
              unsigned int v208 = *v41;
              if (*v41 == (llvm::FixedVectorType **)-1) {
                goto LABEL_347;
              }
            }
            goto LABEL_421;
          }
LABEL_346:
          unsigned int v43 = 0;
LABEL_347:
          if (v43) {
            unint64_t v212 = v43;
          }
          else {
            unint64_t v212 = v41;
          }
          if (*v212 != v11)
          {
            if (*v212 == (llvm::FixedVectorType **)-2) {
              --*((_DWORD *)this + 104);
            }
            else {
              ++*((_DWORD *)this + 103);
            }
            *unint64_t v212 = v11;
          }
          goto LABEL_421;
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v203 = 8 * v18;
          unint64_t v204 = (llvm::FixedVectorType ***)*((void *)this + 50);
          do
          {
            if (*v204 == v11) {
              goto LABEL_421;
            }
            if (*v204 == (llvm::FixedVectorType **)-2) {
              uint64_t v19 = v204;
            }
            ++v204;
            v203 -= 8;
          }
          while (v203);
          if (v19)
          {
LABEL_354:
            *uint64_t v19 = v11;
            --*((_DWORD *)this + 104);
            goto LABEL_421;
          }
        }
        unsigned int v205 = *((_DWORD *)this + 102);
        if (v18 >= v205) {
          goto LABEL_333;
        }
LABEL_31:
        *((_DWORD *)this + 103) = v18 + 1;
        *(void *)(v17 + 8 * v18) = v11;
        goto LABEL_421;
      }
      uint64_t v147 = ***(void ***)v146;
      uint64_t v308 = v146;
      int v148 = *(_DWORD *)(v147 + 2496);
      if (v148)
      {
        uint64_t v149 = *(void *)(v147 + 2480);
        int v150 = v148 - 1;
        unsigned int v151 = v150 & ((v146 >> 4) ^ (v146 >> 9));
        unint64_t v152 = (unsigned __int16 **)(v149 + 40 * v151);
        unint64_t v153 = *v152;
        if (*v152 != v146)
        {
          uint64_t v154 = 0;
          int v155 = 1;
          while (v153 != (unsigned __int16 *)-4096)
          {
            if (v154) {
              BOOL v156 = 0;
            }
            else {
              BOOL v156 = v153 == (unsigned __int16 *)-8192;
            }
            if (v156) {
              uint64_t v154 = v152;
            }
            unsigned int v157 = v151 + v155++;
            unsigned int v151 = v157 & v150;
            unint64_t v152 = (unsigned __int16 **)(v149 + 40 * v151);
            unint64_t v153 = *v152;
            if (*v152 == v146) {
              goto LABEL_242;
            }
          }
          if (v154) {
            unsigned int v215 = v154;
          }
          else {
            unsigned int v215 = v152;
          }
LABEL_362:
          unint64_t v152 = (unsigned __int16 **)sub_1CC609054(v147 + 2480, (uint64_t)&v308, (uint64_t *)&v308, v215);
          uint64_t v216 = (unsigned __int16 *)v308;
          v152[4] = 0;
          v152[3] = 0;
          llvm::ConstantInt *v152 = v216;
          v152[1] = (unsigned __int16 *)(v152 + 3);
          v152[2] = (unsigned __int16 *)0x100000000;
        }
LABEL_242:
        uint64_t v158 = *((unsigned int *)v152 + 4);
        if (v158)
        {
          char v159 = v152[1] + 4;
          uint64_t v160 = 16 * v158;
          while (*((_DWORD *)v159 - 2) != 9)
          {
            v159 += 2;
            v160 -= 16;
            if (!v160) {
              goto LABEL_259;
            }
          }
          if (*v159)
          {
            double v164 = llvm::FixedVectorType::get(*v11, (llvm::Type *)2);
            if (((*(uint64_t (**)(void, uint64_t, unint64_t, double))(***((void ***)this + 3)
                                                                                       + 344))(**((void **)this + 3), v165, ((unint64_t)v146[9] >> 1) & 0x3F, v164) & 1) == 0)
            {
              uint64_t v263 = *((void *)this + 8);
              uint64_t v264 = *(void *)this;
              uint64_t v286 = (llvm::FixedVectorType **)v146;
              int v265 = "nontemporal load instruction cannot be vectorized";
              uint64_t v267 = "CantVectorizeNontemporalLoad";
              uint64_t v268 = 49;
              uint64_t v266 = "nontemporal load instruction cannot be vectorized";
              uint64_t v269 = 49;
              uint64_t v270 = 28;
              goto LABEL_520;
            }
          }
        }
        goto LABEL_259;
      }
      unsigned int v215 = 0;
      goto LABEL_362;
    }
    unsigned int v14 = *((unsigned __int8 *)*v13 + 8);
    if (v14 >= 7 && v14 != 13 && v14 != 15)
    {
      uint64_t v263 = *((void *)this + 8);
      uint64_t v264 = *(void *)this;
      uint64_t v286 = 0;
      int v265 = "Found a non-int non-pointer PHI";
      uint64_t v266 = "loop control flow is not understood by vectorizer";
      uint64_t v267 = "CFGNotUnderstood";
      uint64_t v268 = 31;
LABEL_471:
      uint64_t v269 = 49;
      uint64_t v270 = 16;
      goto LABEL_520;
    }
    if (v305 == v304)
    {
      if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) != 2)
      {
        uint64_t v263 = *((void *)this + 8);
        uint64_t v264 = *(void *)this;
        uint64_t v286 = v13;
        int v265 = "Found an invalid PHI";
        uint64_t v266 = "loop control flow is not understood by vectorizer";
        uint64_t v267 = "CFGNotUnderstood";
        uint64_t v268 = 20;
        goto LABEL_471;
      }
      *(_OWORD *)unint64_t v300 = 0u;
      *((_OWORD *)v300 + 1) = 0u;
      *((_OWORD *)v300 + 2) = 0u;
      *((_WORD *)v300 + 24) = 0;
      uint64_t v308 = (void *)6;
      v313[0] = v299;
      v313[1] = v299;
      v313[2] = 8;
      int v314 = 0;
      if (!llvm::RecurrenceDescriptor::isReductionPHI((llvm::RecurrenceDescriptor *)v13, *(llvm::PHINode **)this, (llvm::Loop *)&v308, *((llvm::RecurrenceDescriptor **)this + 59), *((llvm::DemandedBits **)this + 60), *((llvm::AssumptionCache **)this + 5), a7))
      {
        void *v295 = 0;
        v295[1] = 0;
        *((_DWORD *)v295 + 4) = 0;
        v294[1] = 0;
        v294[2] = 0;
        *uint64_t v294 = 0;
        uint64_t v316 = 6;
        int v322 = v298;
        uint64_t v323 = 0x200000000;
        int v47 = v307;
        if (llvm::InductionDescriptor::isInductionPHI(v307, *(llvm::PHINode **)this, *((int8x16_t **)this + 2), (llvm::PredicatedScalarEvolution *)&v316, 0))
        {
          llvm::LoopVectorizationLegality::addInductionPhi((uint64_t)this, (uint64_t)v47, &v316, (uint64_t)v292);
          if (v319 == 3)
          {
            if (v321)
            {
              if ((*(unsigned char *)(v321 + 17) & 2) == 0)
              {
                uint64_t v48 = *((void *)this + 57);
                if (!*(void *)(v48 + 8)) {
                  *(void *)(v48 + 8) = v321;
                }
              }
            }
          }
          goto LABEL_404;
        }
        if (!llvm::RecurrenceDescriptor::isFixedOrderRecurrence((uint64_t)v47, *(void *)this))
        {
          if (!llvm::InductionDescriptor::isInductionPHI(v47, *(llvm::PHINode **)this, *((int8x16_t **)this + 2), (llvm::PredicatedScalarEvolution *)&v316, (llvm::InductionDescriptor *)1))
          {
            uint64_t v286 = (llvm::FixedVectorType **)v47;
            llvm::reportVectorizationFailure((uint64_t)"Found an unidentified PHI", 25, (uint64_t)"value that could not be identified as reduction is used outside the loop", 72, (uint64_t)"NonReductionValueUsedOutsideLoop", 32, *((void *)this + 8), *(void *)this);
          }
          llvm::LoopVectorizationLegality::addInductionPhi((uint64_t)this, (uint64_t)v47, &v316, (uint64_t)v292);
          goto LABEL_404;
        }
        uint64_t v49 = *((void *)this + 50);
        uint64_t v50 = *((unsigned int *)this + 103);
        if (v49 != *((void *)this + 49))
        {
          unsigned int v54 = *((_DWORD *)this + 102);
          goto LABEL_160;
        }
        if (v50)
        {
          uint64_t v51 = 0;
          uint64_t v52 = 8 * v50;
          uint64_t v53 = (llvm::InductionDescriptor **)*((void *)this + 50);
          do
          {
            if (*v53 == v47) {
              goto LABEL_372;
            }
            if (*v53 == (llvm::InductionDescriptor *)-2) {
              uint64_t v51 = v53;
            }
            ++v53;
            v52 -= 8;
          }
          while (v52);
          if (v51)
          {
            *uint64_t v51 = v47;
            --*((_DWORD *)this + 104);
            goto LABEL_372;
          }
        }
        unsigned int v54 = *((_DWORD *)this + 102);
        if (v50 < v54)
        {
          *((_DWORD *)this + 103) = v50 + 1;
          *(void *)(v49 + 8 * v50) = v47;
          goto LABEL_372;
        }
LABEL_160:
        if (3 * v54 <= 4 * ((int)v50 - *((_DWORD *)this + 104)))
        {
          if (v54 >= 0x40) {
            v54 *= 2;
          }
          else {
            unsigned int v54 = 128;
          }
        }
        else if (v54 - v50 >= v54 >> 3)
        {
LABEL_162:
          unsigned int v96 = v54 - 1;
          unsigned int v97 = (v54 - 1) & ((v47 >> 4) ^ (v47 >> 9));
          unint64_t v98 = (llvm::InductionDescriptor **)(v49 + 8 * v97);
          int v99 = *v98;
          if (*v98 == (llvm::InductionDescriptor *)-1)
          {
            unsigned int v100 = 0;
LABEL_365:
            if (v100) {
              int v217 = v100;
            }
            else {
              int v217 = v98;
            }
            if (*v217 != v47)
            {
              if (*v217 == (llvm::InductionDescriptor *)-2) {
                --*((_DWORD *)this + 104);
              }
              else {
                ++*((_DWORD *)this + 103);
              }
              llvm::Constant *v217 = v47;
            }
          }
          else
          {
            unsigned int v100 = 0;
            int v101 = 1;
            while (v99 != v47)
            {
              if (v100) {
                BOOL v102 = 0;
              }
              else {
                BOOL v102 = v99 == (llvm::InductionDescriptor *)-2;
              }
              if (v102) {
                unsigned int v100 = v98;
              }
              unsigned int v103 = v97 + v101++;
              unsigned int v97 = v103 & v96;
              unint64_t v98 = (llvm::InductionDescriptor **)(v49 + 8 * (v103 & v96));
              int v99 = *v98;
              if (*v98 == (llvm::InductionDescriptor *)-1) {
                goto LABEL_365;
              }
            }
          }
LABEL_372:
          uint64_t v218 = *((void *)this + 31);
          uint64_t v219 = *((unsigned int *)this + 65);
          if (v218 == *((void *)this + 30))
          {
            if (v219)
            {
              unsigned int v220 = 0;
              uint64_t v221 = 8 * v219;
              unsigned int v222 = (llvm::InductionDescriptor **)*((void *)this + 31);
              do
              {
                if (*v222 == v47) {
                  goto LABEL_404;
                }
                if (*v222 == (llvm::InductionDescriptor *)-2) {
                  unsigned int v220 = v222;
                }
                ++v222;
                v221 -= 8;
              }
              while (v221);
              if (v220)
              {
                *unsigned int v220 = v47;
                --*((_DWORD *)this + 66);
                goto LABEL_404;
              }
            }
            unsigned int v223 = *((_DWORD *)this + 64);
            if (v219 < v223)
            {
              *((_DWORD *)this + 65) = v219 + 1;
              *(void *)(v218 + 8 * v219) = v47;
LABEL_404:
              if (v322 != v298) {
                free(v322);
              }
              if (v318 && v318 != (int32x2_t ****)-8192 && v318 != (int32x2_t ****)-4096)
              {
                unint64_t v233 = v316 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v316 & 0xFFFFFFFFFFFFFFF8) = v317;
                if (v317)
                {
                  *uint64_t v317 = *v317 & 7 | v233;
                }
                else
                {
                  uint64_t v234 = v318;
                  uint64_t v235 = ***v318;
                  unint64_t v236 = (unint64_t)v235[303];
                  if (v236 <= v233)
                  {
                    uint64_t v237 = v235[305].u32[0];
                    if (v236 + 16 * v237 > v233)
                    {
                      unsigned int v238 = v237 - 1;
                      LODWORD(v239) = v238 & ((v318 >> 4) ^ (v318 >> 9));
                      int v240 = (int32x2_t *****)(v236 + 16 * v239);
                      unsigned int v241 = *v240;
                      if (v318 != *v240)
                      {
                        int v242 = 1;
                        do
                        {
                          if (v241 == (int32x2_t ****)-4096) {
                            goto LABEL_418;
                          }
                          int v243 = v239 + v242++;
                          uint64_t v239 = v243 & v238;
                          unsigned int v241 = *(int32x2_t *****)(v236 + 16 * v239);
                        }
                        while (v318 != v241);
                        int v240 = (int32x2_t *****)(v236 + 16 * v239);
                      }
                      *int v240 = (int32x2_t ****)-8192;
                      v235[304] = vadd_s32(v235[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v234 = v318;
LABEL_418:
                      *((unsigned char *)v234 + 17) &= ~1u;
                    }
                  }
                }
              }
              sub_1CD48CFE4((llvm::ValueHandleBase *)&v308);
              goto LABEL_421;
            }
          }
          else
          {
            unsigned int v223 = *((_DWORD *)this + 64);
          }
          if (3 * v223 <= 4 * ((int)v219 - *((_DWORD *)this + 66)))
          {
            if (v223 >= 0x40) {
              v223 *= 2;
            }
            else {
              unsigned int v223 = 128;
            }
          }
          else if (v223 - v219 >= v223 >> 3)
          {
            goto LABEL_385;
          }
          llvm::SmallPtrSetImplBase::Grow(v289, v223);
          unsigned int v223 = *((_DWORD *)this + 64);
          uint64_t v218 = *((void *)this + 31);
LABEL_385:
          unsigned int v224 = v223 - 1;
          unsigned int v225 = (v223 - 1) & ((v47 >> 4) ^ (v47 >> 9));
          unint64_t v226 = (llvm::InductionDescriptor **)(v218 + 8 * v225);
          uint64_t v227 = *v226;
          if (*v226 == (llvm::InductionDescriptor *)-1)
          {
            char v228 = 0;
LABEL_397:
            if (v228) {
              __int16 v232 = v228;
            }
            else {
              __int16 v232 = v226;
            }
            if (*v232 != v47)
            {
              if (*v232 == (llvm::InductionDescriptor *)-2) {
                --*((_DWORD *)this + 66);
              }
              else {
                ++*((_DWORD *)this + 65);
              }
              char *v232 = v47;
            }
          }
          else
          {
            char v228 = 0;
            int v229 = 1;
            while (v227 != v47)
            {
              if (v228) {
                BOOL v230 = 0;
              }
              else {
                BOOL v230 = v227 == (llvm::InductionDescriptor *)-2;
              }
              if (v230) {
                char v228 = v226;
              }
              unsigned int v231 = v225 + v229++;
              unsigned int v225 = v231 & v224;
              unint64_t v226 = (llvm::InductionDescriptor **)(v218 + 8 * (v231 & v224));
              uint64_t v227 = *v226;
              if (*v226 == (llvm::InductionDescriptor *)-1) {
                goto LABEL_397;
              }
            }
          }
          goto LABEL_404;
        }
        llvm::SmallPtrSetImplBase::Grow(v292, v54);
        unsigned int v54 = *((_DWORD *)this + 102);
        uint64_t v49 = *((void *)this + 50);
        goto LABEL_162;
      }
      if (v312)
      {
        uint64_t v31 = *((void *)this + 57);
        if (!*(void *)(v31 + 8)) {
          *(void *)(v31 + 8) = v312;
        }
      }
      uint64_t v32 = v311;
      uint64_t v33 = *((void *)this + 50);
      uint64_t v34 = *((unsigned int *)this + 103);
      if (v33 == *((void *)this + 49))
      {
        if (v34)
        {
          BOOL v35 = 0;
          uint64_t v36 = 8 * v34;
          unint64_t v37 = (void *)*((void *)this + 50);
          do
          {
            if (*v37 == v311) {
              goto LABEL_131;
            }
            if (*v37 == -2) {
              BOOL v35 = v37;
            }
            ++v37;
            v36 -= 8;
          }
          while (v36);
          if (v35)
          {
            *BOOL v35 = v311;
            --*((_DWORD *)this + 104);
            goto LABEL_131;
          }
        }
        unsigned int v38 = *((_DWORD *)this + 102);
        if (v34 < v38)
        {
          *((_DWORD *)this + 103) = v34 + 1;
          *(void *)(v33 + 8 * v34) = v32;
LABEL_131:
          uint64_t v73 = sub_1CD8C7D04(v293, (uint64_t *)&v307);
          uint64_t v74 = v73;
          uint64_t v75 = *(void *)(v73 + 16);
          uint64_t v76 = v310;
          if (v75 != v310)
          {
            BOOL v77 = v75 == -4096 || v75 == 0;
            if (!v77 && v75 != -8192)
            {
              unint64_t v84 = *(void *)v73 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v84 = *(void *)(v73 + 8);
              unsigned int v85 = *(unint64_t **)(v73 + 8);
              if (v85)
              {
                *unsigned int v85 = *v85 & 7 | v84;
              }
              else
              {
                uint64_t v86 = *(void *)(v73 + 16);
                uint64_t v87 = ***(int32x2_t ****)v86;
                unint64_t v88 = (unint64_t)v87[303];
                if (v88 <= v84)
                {
                  uint64_t v89 = v87[305].u32[0];
                  if (v88 + 16 * v89 > v84)
                  {
                    unsigned int v90 = v89 - 1;
                    LODWORD(v91) = v90 & ((v86 >> 4) ^ (v86 >> 9));
                    uint64_t v92 = (uint64_t *)(v88 + 16 * v91);
                    uint64_t v93 = *v92;
                    if (v86 != *v92)
                    {
                      int v94 = 1;
                      do
                      {
                        if (v93 == -4096) {
                          goto LABEL_157;
                        }
                        int v95 = v91 + v94++;
                        uint64_t v91 = v95 & v90;
                        uint64_t v93 = *(void *)(v88 + 16 * v91);
                      }
                      while (v86 != v93);
                      uint64_t v92 = (uint64_t *)(v88 + 16 * v91);
                    }
                    *uint64_t v92 = -8192;
                    v87[304] = vadd_s32(v87[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v86 = *(void *)(v73 + 16);
LABEL_157:
                    *(unsigned char *)(v86 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v76 = v310;
            }
            *(void *)(v73 + 16) = v76;
            if (v76 != -4096 && v76 != -8192 && v76 != 0)
            {
              unint64_t v79 = (unint64_t)v308;
              int64_t v80 = (void *)((unint64_t)v308 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v73 + 8) = *(void *)((unint64_t)v308 & 0xFFFFFFFFFFFFFFF8);
              *int64_t v80 = v73;
              *(void *)uint64_t v73 = v79 & 0xFFFFFFFFFFFFFFF8 | *(void *)v73 & 7;
              BOOL v81 = *(uint64_t **)(v73 + 8);
              if (v81) {
                uint64_t *v81 = *v81 & 7 | (v73 + 8);
              }
            }
          }
          long long v82 = *(_OWORD *)v296;
          long long v83 = *((_OWORD *)v296 + 1);
          *(_WORD *)(v73 + 56) = *((_WORD *)v296 + 16);
          *(_OWORD *)(v73 + 40) = v83;
          *(_OWORD *)(v73 + 24) = v82;
          if (&v308 != (void **)v73) {
            llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v73 + 64), v291);
          }
          *(_DWORD *)(v74 + 160) = v315[16];
          sub_1CD48CFE4((llvm::ValueHandleBase *)&v308);
          goto LABEL_421;
        }
      }
      else
      {
        unsigned int v38 = *((_DWORD *)this + 102);
      }
      if (3 * v38 <= 4 * ((int)v34 - *((_DWORD *)this + 104)))
      {
        if (v38 >= 0x40) {
          v38 *= 2;
        }
        else {
          unsigned int v38 = 128;
        }
      }
      else if (v38 - v34 >= v38 >> 3)
      {
        goto LABEL_99;
      }
      llvm::SmallPtrSetImplBase::Grow(v292, v38);
      unsigned int v38 = *((_DWORD *)this + 102);
      uint64_t v33 = *((void *)this + 50);
LABEL_99:
      unsigned int v55 = v38 - 1;
      unsigned int v56 = (v38 - 1) & ((v32 >> 4) ^ (v32 >> 9));
      BOOL v57 = (void *)(v33 + 8 * v56);
      uint64_t v58 = *v57;
      if (*v57 == -1)
      {
        uint64_t v59 = 0;
LABEL_124:
        if (v59) {
          int v72 = v59;
        }
        else {
          int v72 = v57;
        }
        if (*v72 != v32)
        {
          if (*v72 == -2) {
            --*((_DWORD *)this + 104);
          }
          else {
            ++*((_DWORD *)this + 103);
          }
          *int v72 = v32;
        }
      }
      else
      {
        uint64_t v59 = 0;
        int v60 = 1;
        while (v58 != v32)
        {
          if (v59) {
            BOOL v61 = 0;
          }
          else {
            BOOL v61 = v58 == -2;
          }
          if (v61) {
            uint64_t v59 = v57;
          }
          unsigned int v62 = v56 + v60++;
          unsigned int v56 = v62 & v55;
          BOOL v57 = (void *)(v33 + 8 * (v62 & v55));
          uint64_t v58 = *v57;
          if (*v57 == -1) {
            goto LABEL_124;
          }
        }
      }
      goto LABEL_131;
    }
    uint64_t v17 = *((void *)this + 50);
    uint64_t v18 = *((unsigned int *)this + 103);
    if (v17 == *((void *)this + 49))
    {
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 8 * v18;
        uint64_t v21 = (llvm::FixedVectorType ***)*((void *)this + 50);
        do
        {
          if (*v21 == v11) {
            goto LABEL_421;
          }
          if (*v21 == (llvm::FixedVectorType **)-2) {
            uint64_t v19 = v21;
          }
          ++v21;
          v20 -= 8;
        }
        while (v20);
        if (v19) {
          goto LABEL_354;
        }
      }
      unsigned int v22 = *((_DWORD *)this + 102);
      if (v18 < v22) {
        goto LABEL_31;
      }
    }
    else
    {
      unsigned int v22 = *((_DWORD *)this + 102);
    }
    if (3 * v22 <= 4 * ((int)v18 - *((_DWORD *)this + 104))) {
      break;
    }
    if (v22 - v18 < v22 >> 3) {
      goto LABEL_426;
    }
LABEL_68:
    unsigned int v39 = v22 - 1;
    unsigned int v40 = (v22 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    unint64_t v41 = (llvm::FixedVectorType ***)(v17 + 8 * v40);
    uint64_t v42 = *v41;
    if (*v41 == (llvm::FixedVectorType **)-1) {
      goto LABEL_346;
    }
    unsigned int v43 = 0;
    int v44 = 1;
    while (v42 != v11)
    {
      if (v43) {
        BOOL v45 = 0;
      }
      else {
        BOOL v45 = v42 == (llvm::FixedVectorType **)-2;
      }
      if (v45) {
        unsigned int v43 = v41;
      }
      unsigned int v46 = v40 + v44++;
      unsigned int v40 = v46 & v39;
      unint64_t v41 = (llvm::FixedVectorType ***)(v17 + 8 * (v46 & v39));
      uint64_t v42 = *v41;
      if (*v41 == (llvm::FixedVectorType **)-1) {
        goto LABEL_347;
      }
    }
LABEL_421:
    uint64_t v10 = *(void *)(v10 + 8);
    if (v10 == v9) {
      goto LABEL_467;
    }
  }
  if (v22 >= 0x40) {
    v22 *= 2;
  }
  else {
    unsigned int v22 = 128;
  }
LABEL_426:
  llvm::SmallPtrSetImplBase::Grow(v292, v22);
  unsigned int v22 = *((_DWORD *)this + 102);
  uint64_t v17 = *((void *)this + 50);
  goto LABEL_68;
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeMemory(llvm::LoopVectorizationLegality *this)
{
  v16[34] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*((void *)this + 6) + 24);
  if (!v2) {
    sub_1CB920400();
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 48))(v2, *(void *)this);
  *((void *)this + 7) = v3;
  uint64_t v4 = *(void *)(v3 + 56);
  if (v4)
  {
    int v5 = (uint64_t ***)*((void *)this + 8);
    uint64_t v6 = *(void *)***v5;
    if (*(void *)(v6 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v6 + 72) + 48))(*(void *)(v6 + 72)))
    {
      uint64_t v9 = llvm::LoopVectorizeHints::vectorizeAnalysisPassName(*((llvm::LoopVectorizeHints **)this + 58));
      sub_1CD8C8E38((uint64_t)v13, (uint64_t)v9, v4);
      v13[0] = &unk_1F26165E0;
      llvm::OptimizationRemarkEmitter::emit(v5, (llvm::DiagnosticInfoOptimizationBase *)v13);
      v13[0] = &unk_1F2616800;
      uint64_t v10 = (char *)v14;
      if (v15)
      {
        unint64_t v11 = (unint64_t)v15 << 6;
        do
        {
          int v12 = (void **)&v10[v11];
          if (v10[v11 - 17] < 0) {
            operator delete(*(v12 - 5));
          }
          if (*((char *)v12 - 41) < 0) {
            operator delete(*(v12 - 8));
          }
          v11 -= 64;
        }
        while (v11);
        uint64_t v10 = (char *)v14;
      }
      if (v10 != (char *)v16) {
        free(v10);
      }
    }
  }
  uint64_t v7 = *((void *)this + 7);
  if (!*(unsigned char *)(v7 + 48)) {
    return 0;
  }
  if (*(unsigned char *)(v7 + 50)) {
    llvm::reportVectorizationFailure((uint64_t)"Stores to a uniform address", 27, (uint64_t)"write to a loop invariant address could not be vectorized", 57, (uint64_t)"CantVectorizeStoreToLoopInvariantAddress", 40, *((void *)this + 8), *(void *)this);
  }
  **((_DWORD **)this + 57) = *(_DWORD *)(*(void *)(v7 + 8) + 288);
  llvm::PredicatedScalarEvolution::addPredicate(*((void *)this + 2), *(void *)(*(void *)v7 + 104));
  return 1;
}

BOOL llvm::LoopVectorizationLegality::canVectorizeFPMath(llvm::LoopVectorizationLegality *this, int a2)
{
  v44[2] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*((void *)this + 57) + 8)) {
    return 1;
  }
  if (!byte_1EBD0D570)
  {
    BOOL result = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *((void *)this + 58);
  int v4 = *(_DWORD *)(v3 + 40);
  if (v4 == -1) {
    llvm::Loop::getLoopID(*(llvm::Loop **)(v3 + 104));
  }
  BOOL v6 = v4 == 1;
  BOOL result = *(_DWORD *)(v3 + 8) > 1u || v6;
  if (!result)
  {
LABEL_10:
    if (!a2) {
      return result;
    }
    uint64_t v7 = *((void *)this + 19);
    for (uint64_t i = *((void *)this + 20); v7 != i; v7 += 96)
    {
      sub_1CD761168((uint64_t)&v38, v7 + 8);
      if (v41 == 3 && v42)
      {
        char v9 = *(unsigned char *)(v42 + 17);
        if (v43 != v44)
        {
          char v37 = *(unsigned char *)(v42 + 17);
          free(v43);
          char v9 = v37;
        }
        if (v40 && v40 != (int32x2_t ****)-8192 && v40 != (int32x2_t ****)-4096)
        {
          unint64_t v10 = v38 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v38 & 0xFFFFFFFFFFFFFFF8) = v39;
          if (v39)
          {
            *unsigned int v39 = *v39 & 7 | v10;
          }
          else
          {
            unint64_t v11 = v40;
            int v12 = ***v40;
            unint64_t v13 = (unint64_t)v12[303];
            if (v13 <= v10)
            {
              uint64_t v14 = v12[305].u32[0];
              if (v13 + 16 * v14 > v10)
              {
                unsigned int v15 = v14 - 1;
                LODWORD(v16) = v15 & ((v40 >> 4) ^ (v40 >> 9));
                uint64_t v17 = (int32x2_t *****)(v13 + 16 * v16);
                uint64_t v18 = *v17;
                if (v40 == *v17)
                {
LABEL_27:
                  llvm::LLVMContext *v17 = (int32x2_t ****)-8192;
                  v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
                  unint64_t v11 = v40;
                }
                else
                {
                  int v19 = 1;
                  while (v18 != (int32x2_t ****)-4096)
                  {
                    int v20 = v16 + v19++;
                    uint64_t v16 = v20 & v15;
                    uint64_t v18 = *(int32x2_t *****)(v13 + 16 * v16);
                    if (v40 == v18)
                    {
                      uint64_t v17 = (int32x2_t *****)(v13 + 16 * v16);
                      goto LABEL_27;
                    }
                  }
                }
                *((unsigned char *)v11 + 17) &= ~1u;
              }
            }
          }
        }
        if ((v9 & 2) == 0) {
          return 0;
        }
      }
      else
      {
        if (v43 != v44) {
          free(v43);
        }
        if (v40 && v40 != (int32x2_t ****)-8192 && v40 != (int32x2_t ****)-4096)
        {
          unint64_t v21 = v38 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v38 & 0xFFFFFFFFFFFFFFF8) = v39;
          if (v39)
          {
            *unsigned int v39 = *v39 & 7 | v21;
          }
          else
          {
            unsigned int v22 = v40;
            uint64_t v23 = ***v40;
            unint64_t v24 = (unint64_t)v23[303];
            if (v24 <= v21)
            {
              uint64_t v25 = v23[305].u32[0];
              if (v24 + 16 * v25 > v21)
              {
                unsigned int v26 = v25 - 1;
                LODWORD(v27) = v26 & ((v40 >> 4) ^ (v40 >> 9));
                unsigned int v28 = (int32x2_t *****)(v24 + 16 * v27);
                uint64_t v29 = *v28;
                if (v40 == *v28)
                {
LABEL_42:
                  *unsigned int v28 = (int32x2_t ****)-8192;
                  v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                  unsigned int v22 = v40;
                }
                else
                {
                  int v30 = 1;
                  while (v29 != (int32x2_t ****)-4096)
                  {
                    int v31 = v27 + v30++;
                    uint64_t v27 = v31 & v26;
                    uint64_t v29 = *(int32x2_t *****)(v24 + 16 * v27);
                    if (v40 == v29)
                    {
                      unsigned int v28 = (int32x2_t *****)(v24 + 16 * v27);
                      goto LABEL_42;
                    }
                  }
                }
                *((unsigned char *)v22 + 17) &= ~1u;
              }
            }
          }
        }
      }
    }
    uint64_t v33 = *((void *)this + 13);
    uint64_t v32 = *((void *)this + 14);
    if (v33 != v32)
    {
      uint64_t v34 = v33 + 176;
      do
      {
        if (*(void *)(v34 - 128)) {
          BOOL v35 = *(unsigned char *)(v34 - 111) == 0;
        }
        else {
          BOOL v35 = 0;
        }
        BOOL result = !v35;
        BOOL v36 = !result || v34 == v32;
        v34 += 176;
      }
      while (!v36);
      return result;
    }
    return 1;
  }
  return result;
}

BOOL llvm::LoopVectorizationLegality::isCastedInductionVariable(llvm::LoopVectorizationLegality *this, const llvm::Value *a2)
{
  uint64_t v2 = 0;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    uint64_t v4 = *((void *)this + 22);
    uint64_t v3 = *((void *)this + 23);
    if (v3 == v4)
    {
      uint64_t v5 = *((unsigned int *)this + 49);
      BOOL v6 = (const llvm::Value **)(v3 + 8 * v5);
      if (v5)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 8 * v5;
        while (*(const llvm::Value **)(v3 + v7) != a2)
        {
          v7 += 8;
          if (v8 == v7) {
            goto LABEL_21;
          }
        }
        BOOL v6 = (const llvm::Value **)(v3 + v7);
      }
LABEL_21:
      uint64_t v4 = *((void *)this + 23);
    }
    else
    {
      uint64_t v9 = *((unsigned int *)this + 48);
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      BOOL v6 = (const llvm::Value **)(v3 + 8 * v11);
      int v12 = *v6;
      if (*v6 == (const llvm::Value *)-1)
      {
        unint64_t v13 = 0;
LABEL_27:
        if (v13) {
          BOOL v6 = v13;
        }
        if (*v6 != a2) {
          BOOL v6 = (const llvm::Value **)(v3 + 8 * v9);
        }
      }
      else
      {
        unint64_t v13 = 0;
        int v14 = 1;
        while (v12 != a2)
        {
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v12 == (const llvm::Value *)-2;
          }
          if (v15) {
            unint64_t v13 = v6;
          }
          unsigned int v16 = v11 + v14++;
          unsigned int v11 = v16 & v10;
          BOOL v6 = (const llvm::Value **)(v3 + 8 * (v16 & v10));
          int v12 = *v6;
          if (*v6 == (const llvm::Value *)-1) {
            goto LABEL_27;
          }
        }
      }
    }
    BOOL v15 = v3 == v4;
    uint64_t v17 = 192;
    if (v15) {
      uint64_t v17 = 196;
    }
    return v6 != (const llvm::Value **)(v3 + 8 * *(unsigned int *)((char *)this + v17));
  }
  return v2;
}

uint64_t llvm::LoopVectorizationLegality::blockCanBePredicated(int a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::SmallPtrSetImplBase *this)
{
  uint64_t v5 = a2 + 40;
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 != a2 + 40)
  {
    do
    {
      if (v6) {
        uint64_t v10 = v6 - 24;
      }
      else {
        uint64_t v10 = 0;
      }
      int v11 = *(_DWORD *)(v10 + 20);
      if ((v11 & 0x40000000) != 0)
      {
        unint64_t v13 = *(uint64_t **)(v10 - 8);
        uint64_t v12 = v11 & 0x7FFFFFF;
        if (v12)
        {
LABEL_9:
          for (uint64_t i = 32 * v12; i; i -= 32)
          {
            uint64_t v15 = *v13;
            if (*v13) {
              BOOL v16 = *(unsigned __int8 *)(*v13 + 16) > 0x14u;
            }
            else {
              BOOL v16 = 1;
            }
            if (!v16)
            {
              unsigned int v97 = v101;
              unint64_t v98 = v101;
              uint64_t v99 = 4;
              int v100 = 0;
              BOOL v17 = sub_1CC565AD0(v15, (uint64_t)&v97);
              if (v98 == v97)
              {
                if (v17) {
                  return 0;
                }
              }
              else
              {
                BOOL v96 = v17;
                free(v98);
                if (v96) {
                  return 0;
                }
              }
            }
            v13 += 4;
          }
        }
      }
      else
      {
        uint64_t v12 = v11 & 0x7FFFFFF;
        unint64_t v13 = (uint64_t *)(v10 - 32 * v12);
        if (v12) {
          goto LABEL_9;
        }
      }
      if (v6)
      {
        if (*(unsigned char *)(v10 + 16) == 84)
        {
          uint64_t v18 = *(void *)(v10 - 32);
          if (v18)
          {
            if (!*(unsigned char *)(v18 + 16) && *(void *)(v18 + 24) == *(void *)(v10 + 72) && *(_DWORD *)(v18 + 36) == 7)
            {
              uint64_t v19 = *((void *)this + 1);
              uint64_t v20 = *((unsigned int *)this + 5);
              if (v19 != *(void *)this)
              {
                unsigned int v24 = *((_DWORD *)this + 4);
LABEL_154:
                if (3 * v24 <= 4 * ((int)v20 - *((_DWORD *)this + 6)))
                {
                  if (v24 >= 0x40) {
                    v24 *= 2;
                  }
                  else {
                    unsigned int v24 = 128;
                  }
                }
                else if (v24 - v20 >= v24 >> 3)
                {
LABEL_156:
                  unsigned int v77 = v24 - 1;
                  unsigned int v78 = (v24 - 1) & ((v10 >> 4) ^ (v10 >> 9));
                  unint64_t v79 = (uint64_t *)(v19 + 8 * v78);
                  uint64_t v80 = *v79;
                  if (*v79 != -1)
                  {
                    BOOL v81 = 0;
                    int v82 = 1;
                    while (v80 != v10)
                    {
                      if (v81) {
                        BOOL v83 = 0;
                      }
                      else {
                        BOOL v83 = v80 == -2;
                      }
                      if (v83) {
                        BOOL v81 = v79;
                      }
                      unsigned int v84 = v78 + v82++;
                      unsigned int v78 = v84 & v77;
                      unint64_t v79 = (uint64_t *)(v19 + 8 * (v84 & v77));
                      uint64_t v80 = *v79;
                      if (*v79 == -1) {
                        goto LABEL_189;
                      }
                    }
                    goto LABEL_89;
                  }
                  BOOL v81 = 0;
LABEL_189:
                  if (v81) {
                    unsigned int v85 = v81;
                  }
                  else {
                    unsigned int v85 = v79;
                  }
                  if (*v85 == v10) {
                    goto LABEL_89;
                  }
                  if (*v85 == -2) {
                    --*((_DWORD *)this + 6);
                  }
                  else {
                    ++*((_DWORD *)this + 5);
                  }
                  goto LABEL_195;
                }
                llvm::SmallPtrSetImplBase::Grow(this, v24);
                unsigned int v24 = *((_DWORD *)this + 4);
                uint64_t v19 = *((void *)this + 1);
                goto LABEL_156;
              }
              if (v20)
              {
                unint64_t v21 = 0;
                uint64_t v22 = 8 * v20;
                uint64_t v23 = (uint64_t *)*((void *)this + 1);
                while (*v23 != v10)
                {
                  if (*v23 == -2) {
                    unint64_t v21 = v23;
                  }
                  ++v23;
                  v22 -= 8;
                  if (!v22)
                  {
                    if (!v21) {
                      goto LABEL_34;
                    }
                    *unint64_t v21 = v10;
                    --*((_DWORD *)this + 6);
                    goto LABEL_89;
                  }
                }
                goto LABEL_89;
              }
LABEL_34:
              unsigned int v24 = *((_DWORD *)this + 4);
              if (v20 >= v24) {
                goto LABEL_154;
              }
              *((_DWORD *)this + 5) = v20 + 1;
              goto LABEL_108;
            }
          }
        }
      }
      if (sub_1CC9E8BD8(v10)) {
        goto LABEL_89;
      }
      int v25 = *(unsigned __int8 *)(v10 + 16);
      uint64_t v26 = (v25 - 33);
      if (v26 <= 0x37)
      {
        if (((1 << (v25 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v27 = *(void *)(v10 + 64);
          if (v27 && ((*(unsigned char *)(v27 + 20) & 4) != 0 || (*(unsigned char *)(v27 + 17) & 0x10) != 0)) {
            goto LABEL_77;
          }
          LODWORD(v97) = 7;
          if ((!sub_1CC5CB59C(v10, (__int32 *)&v97, 1uLL)
             || (uint64_t v87 = *(void *)(v10 - 32)) != 0
             && !*(unsigned char *)(v87 + 16)
             && *(void *)(v87 + 24) == *(void *)(v10 + 72)
             && *(_DWORD *)(v87 + 36) == 7)
            && ((llvm::CallBase::hasFnAttrOnCalledFunction(v10, 66) & 1) != 0
             || (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44) & 1) != 0))
          {
            goto LABEL_77;
          }
          goto LABEL_49;
        }
        if (((1 << (v25 - 33)) & 0x808001C8000010) != 0) {
          goto LABEL_49;
        }
        if (v26 == 28)
        {
          if ((*(_WORD *)(v10 + 18) & 0x301) == 0)
          {
LABEL_77:
            int v25 = *(unsigned __int8 *)(v10 + 16);
            goto LABEL_78;
          }
LABEL_49:
          uint64_t result = 0;
          int v29 = *(unsigned __int8 *)(v10 + 16);
          if (v29 == 60) {
            uint64_t v30 = v10;
          }
          else {
            uint64_t v30 = 0;
          }
          if (!v6 || v29 != 60) {
            return result;
          }
          uint64_t v31 = *(void *)(v30 - 32);
          uint64_t v33 = *a3;
          uint64_t v32 = a3[1];
          if (v32 == *a3)
          {
            uint64_t v34 = *((unsigned int *)a3 + 5);
            BOOL v35 = (void *)(v32 + 8 * v34);
            if (v34)
            {
              uint64_t v36 = 0;
              while (*(void *)(v32 + v36) != v31)
              {
                v36 += 8;
                if (8 * v34 == v36) {
                  goto LABEL_73;
                }
              }
              BOOL v35 = (void *)(v32 + v36);
            }
LABEL_73:
            uint64_t v33 = a3[1];
          }
          else
          {
            uint64_t v37 = *((unsigned int *)a3 + 4);
            int v38 = v37 - 1;
            unsigned int v39 = (v37 - 1) & ((v31 >> 4) ^ (v31 >> 9));
            BOOL v35 = (void *)(v32 + 8 * v39);
            uint64_t v40 = *v35;
            if (*v35 == -1)
            {
              int v41 = 0;
LABEL_168:
              if (v41) {
                BOOL v35 = v41;
              }
              LODWORD(v34) = *((_DWORD *)a3 + 5);
              if (*v35 != v31) {
                BOOL v35 = (void *)(v32 + 8 * v37);
              }
            }
            else
            {
              int v41 = 0;
              int v42 = 1;
              while (v40 != v31)
              {
                if (v41) {
                  BOOL v43 = 0;
                }
                else {
                  BOOL v43 = v40 == -2;
                }
                if (v43) {
                  int v41 = v35;
                }
                unsigned int v44 = v39 + v42++;
                unsigned int v39 = v44 & v38;
                BOOL v35 = (void *)(v32 + 8 * (v44 & v38));
                uint64_t v40 = *v35;
                if (*v35 == -1) {
                  goto LABEL_168;
                }
              }
              LODWORD(v34) = *((_DWORD *)a3 + 5);
            }
          }
          unsigned int v45 = *((_DWORD *)a3 + 4);
          if (v32 == v33) {
            unsigned int v45 = v34;
          }
          if (v35 == (void *)(v32 + 8 * v45))
          {
            uint64_t v55 = *(void *)(a4 + 8);
            uint64_t v56 = *(unsigned int *)(a4 + 20);
            if (v55 != *(void *)a4)
            {
              unsigned int v60 = *(_DWORD *)(a4 + 16);
LABEL_140:
              if (3 * v60 <= 4 * ((int)v56 - *(_DWORD *)(a4 + 24)))
              {
                if (v60 >= 0x40) {
                  v60 *= 2;
                }
                else {
                  unsigned int v60 = 128;
                }
              }
              else if (v60 - v56 >= v60 >> 3)
              {
                goto LABEL_142;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v60);
              unsigned int v60 = *(_DWORD *)(a4 + 16);
              uint64_t v55 = *(void *)(a4 + 8);
LABEL_142:
              unsigned int v69 = v60 - 1;
              unsigned int v70 = (v60 - 1) & ((v30 >> 4) ^ (v30 >> 9));
              int v71 = (uint64_t *)(v55 + 8 * v70);
              uint64_t v72 = *v71;
              if (*v71 == -1)
              {
                uint64_t v73 = 0;
LABEL_181:
                if (v73) {
                  uint64_t v86 = v73;
                }
                else {
                  uint64_t v86 = v71;
                }
                if (*v86 != v30)
                {
                  if (*v86 == -2) {
                    --*(_DWORD *)(a4 + 24);
                  }
                  else {
                    ++*(_DWORD *)(a4 + 20);
                  }
                  *uint64_t v86 = v30;
                }
              }
              else
              {
                uint64_t v73 = 0;
                int v74 = 1;
                while (v72 != v30)
                {
                  if (v73) {
                    BOOL v75 = 0;
                  }
                  else {
                    BOOL v75 = v72 == -2;
                  }
                  if (v75) {
                    uint64_t v73 = v71;
                  }
                  unsigned int v76 = v70 + v74++;
                  unsigned int v70 = v76 & v69;
                  int v71 = (uint64_t *)(v55 + 8 * (v76 & v69));
                  uint64_t v72 = *v71;
                  if (*v71 == -1) {
                    goto LABEL_181;
                  }
                }
              }
              goto LABEL_89;
            }
            if (v56)
            {
              BOOL v57 = 0;
              uint64_t v58 = 8 * v56;
              uint64_t v59 = *(uint64_t **)(a4 + 8);
              while (*v59 != v30)
              {
                if (*v59 == -2) {
                  BOOL v57 = v59;
                }
                ++v59;
                v58 -= 8;
                if (!v58)
                {
                  if (!v57) {
                    goto LABEL_123;
                  }
                  *BOOL v57 = v30;
LABEL_199:
                  --*(_DWORD *)(a4 + 24);
                  goto LABEL_89;
                }
              }
              goto LABEL_89;
            }
LABEL_123:
            unsigned int v60 = *(_DWORD *)(a4 + 16);
            if (v56 >= v60) {
              goto LABEL_140;
            }
            *(_DWORD *)(a4 + 20) = v56 + 1;
            *(void *)(v55 + 8 * v56) = v30;
            goto LABEL_89;
          }
          goto LABEL_77;
        }
      }
LABEL_78:
      uint64_t v46 = (v25 - 33);
      if (v46 <= 0x37)
      {
        if (((1 << (v25 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v47 = *(void *)(v10 + 64);
          if (!v47 || (*(unsigned char *)(v47 + 17) & 0x30) == 0)
          {
            int v48 = *(_DWORD *)(v10 + 20);
            if (v48 < 0)
            {
              uint64_t v88 = v10 - 32 * (v48 & 0x7FFFFFF);
              uint64_t v91 = *(void *)(v88 - 8);
              uint64_t v89 = v88 - 8;
              uint64_t v90 = v91;
              if (v91)
              {
                uint64_t v92 = -v90;
                while (1)
                {
                  unsigned int v93 = *(_DWORD *)(*(void *)(v89 + v92) + 8);
                  BOOL v16 = v93 > 7;
                  int v94 = (1 << v93) & 0x83;
                  if (v16 || v94 == 0) {
                    break;
                  }
                  v92 += 16;
                  if (!v92) {
                    goto LABEL_94;
                  }
                }
LABEL_96:
                uint64_t result = 0;
                if (!v6 || v25 != 61) {
                  return result;
                }
                uint64_t v19 = *(void *)(a4 + 8);
                uint64_t v20 = *(unsigned int *)(a4 + 20);
                if (v19 != *(void *)a4)
                {
                  unsigned int v53 = *(_DWORD *)(a4 + 16);
LABEL_126:
                  if (3 * v53 <= 4 * ((int)v20 - *(_DWORD *)(a4 + 24)))
                  {
                    if (v53 >= 0x40) {
                      v53 *= 2;
                    }
                    else {
                      unsigned int v53 = 128;
                    }
                  }
                  else if (v53 - v20 >= v53 >> 3)
                  {
                    goto LABEL_128;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v53);
                  unsigned int v53 = *(_DWORD *)(a4 + 16);
                  uint64_t v19 = *(void *)(a4 + 8);
LABEL_128:
                  unsigned int v61 = v53 - 1;
                  unsigned int v62 = (v53 - 1) & ((v10 >> 4) ^ (v10 >> 9));
                  uint64_t v63 = (uint64_t *)(v19 + 8 * v62);
                  uint64_t v64 = *v63;
                  if (*v63 != -1)
                  {
                    uint64_t v65 = 0;
                    int v66 = 1;
                    while (v64 != v10)
                    {
                      if (v65) {
                        BOOL v67 = 0;
                      }
                      else {
                        BOOL v67 = v64 == -2;
                      }
                      if (v67) {
                        uint64_t v65 = v63;
                      }
                      unsigned int v68 = v62 + v66++;
                      unsigned int v62 = v68 & v61;
                      uint64_t v63 = (uint64_t *)(v19 + 8 * (v68 & v61));
                      uint64_t v64 = *v63;
                      if (*v63 == -1) {
                        goto LABEL_174;
                      }
                    }
                    goto LABEL_89;
                  }
                  uint64_t v65 = 0;
LABEL_174:
                  if (v65) {
                    unsigned int v85 = v65;
                  }
                  else {
                    unsigned int v85 = v63;
                  }
                  if (*v85 == v10) {
                    goto LABEL_89;
                  }
                  if (*v85 == -2) {
                    --*(_DWORD *)(a4 + 24);
                  }
                  else {
                    ++*(_DWORD *)(a4 + 20);
                  }
LABEL_195:
                  *unsigned int v85 = v10;
                  goto LABEL_89;
                }
                if (v20)
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = 8 * v20;
                  uint64_t v52 = *(uint64_t **)(a4 + 8);
                  while (*v52 != v10)
                  {
                    if (*v52 == -2) {
                      uint64_t v50 = v52;
                    }
                    ++v52;
                    v51 -= 8;
                    if (!v51)
                    {
                      if (!v50) {
                        goto LABEL_106;
                      }
                      *uint64_t v50 = v10;
                      goto LABEL_199;
                    }
                  }
                  goto LABEL_89;
                }
LABEL_106:
                unsigned int v53 = *(_DWORD *)(a4 + 16);
                if (v20 >= v53) {
                  goto LABEL_126;
                }
                *(_DWORD *)(a4 + 20) = v20 + 1;
LABEL_108:
                *(void *)(v19 + 8 * v20) = v10;
                goto LABEL_89;
              }
            }
LABEL_94:
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 45))
            {
              int v25 = *(unsigned __int8 *)(v10 + 16);
            }
            else
            {
              hasFnAttrOnCalledFunctiouint64_t n = llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44);
              int v25 = *(unsigned __int8 *)(v10 + 16);
              if ((hasFnAttrOnCalledFunction & 1) == 0) {
                goto LABEL_96;
              }
            }
          }
        }
        else
        {
          if (v46 == 27)
          {
            if ((*(_WORD *)(v10 + 18) & 0x301) != 0) {
              return 0;
            }
            goto LABEL_89;
          }
          if (((1 << (v25 - 33)) & 0x808001D0000010) != 0) {
            goto LABEL_96;
          }
        }
      }
      if (v6 && v25 == 84)
      {
        uint64_t v54 = *(void *)(v10 + 64);
        if (!v54 || (*(unsigned char *)(v54 + 16) & 0x20) == 0)
        {
          uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v10, 37);
          if (!result) {
            return result;
          }
        }
      }
      else if (v6 && v25 == 36 || v6 && v25 == 38)
      {
        if ((*(_WORD *)(v10 + 18) & 1) == 0) {
          return 0;
        }
      }
      else if (v25 == 34)
      {
        return 0;
      }
LABEL_89:
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
  }
  return 1;
}

uint64_t llvm::LoopVectorizationLegality::canVectorizeWithIfConvert(llvm::LoopVectorizationLegality *this)
{
  if (!byte_1EBD00318) {
    llvm::reportVectorizationFailure((uint64_t)"If-conversion is disabled", 25, (uint64_t)"if-conversion is disabled", 25, (uint64_t)"IfConversionDisabled", 20, *((void *)this + 8), *(void *)this);
  }
  if (*(void *)(*(void *)this + 40) != *(void *)(*(void *)this + 32)) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  return 1;
}

void llvm::LoopVectorizationLegality::canVectorizeLoopCFG(llvm::LoopVectorizationLegality *this, llvm::Loop *a2)
{
  uint64_t v2 = *****((void *****)this + 8);
  if (!*(void *)(v2 + 128)) {
    sub_1CC421DEC(*(void *)(v2 + 72), (uint64_t)"loop-vectorize", 14);
  }
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
}

void llvm::LoopVectorizationLegality::canVectorize(llvm::LoopVectorizationLegality *this)
{
  uint64_t v2 = *****((void *****)this + 8);
  if (!*(void *)(v2 + 128))
  {
    sub_1CC421DEC(*(void *)(v2 + 72), (uint64_t)"loop-vectorize", 14);
    llvm::LoopVectorizationLegality::canVectorizeLoopNestCFG(this, *(llvm::Loop **)this);
  }
  llvm::LoopVectorizationLegality::canVectorizeLoopNestCFG(this, *(llvm::Loop **)this);
}

void sub_1CD2F9D74(void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a1) >> 5);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)*a1) >> 5);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x155555555555555) {
      unint64_t v10 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      int v11 = (char *)operator new(96 * v10);
    }
    else
    {
      int v11 = 0;
    }
    uint64_t v12 = &v11[96 * v7];
    unint64_t v13 = &v11[96 * v10];
    *(void *)uint64_t v12 = *a2;
    uint64_t v6 = v12 + 96;
    sub_1CD7610B0((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
    uint64_t v15 = (char *)*a1;
    int v14 = (char *)a1[1];
    if (v14 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 12);
        v14 -= 96;
        *((void *)v12 - 12) = v16;
        v12 -= 96;
        sub_1CD7610B0((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
      }
      while (v14 != v15);
      int v14 = (char *)*a1;
      BOOL v17 = (char *)a1[1];
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
      if (v17 != v14)
      {
        int32x2_t v18 = (int32x2_t)0x1FFFFFFFFLL;
        do
        {
          uint64_t v19 = (char *)*((void *)v17 - 4);
          if (v19 != v17 - 16)
          {
            uint64_t v33 = v17;
            int32x2_t v34 = v18;
            free(v19);
            int32x2_t v18 = v34;
            BOOL v17 = v33;
          }
          uint64_t v20 = *((void *)v17 - 9);
          if (v20 && v20 != -8192 && v20 != -4096)
          {
            unint64_t v21 = *((void *)v17 - 11) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v21 = *((void *)v17 - 10);
            uint64_t v22 = (unint64_t *)*((void *)v17 - 10);
            if (v22)
            {
              *uint64_t v22 = *v22 & 7 | v21;
            }
            else
            {
              uint64_t v23 = *((void *)v17 - 9);
              unsigned int v24 = ***(int32x2_t ****)v23;
              unint64_t v25 = (unint64_t)v24[303];
              if (v25 <= v21)
              {
                uint64_t v26 = v24[305].u32[0];
                if (v25 + 16 * v26 > v21)
                {
                  unsigned int v27 = v26 - 1;
                  LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
                  int v29 = (uint64_t *)(v25 + 16 * v28);
                  uint64_t v30 = *v29;
                  if (v23 == *v29)
                  {
LABEL_30:
                    *int v29 = -8192;
                    v24[304] = vadd_s32(v24[304], v18);
                    uint64_t v23 = *((void *)v17 - 9);
                  }
                  else
                  {
                    int v31 = 1;
                    while (v30 != -4096)
                    {
                      int v32 = v28 + v31++;
                      uint64_t v28 = v32 & v27;
                      uint64_t v30 = *(void *)(v25 + 16 * v28);
                      if (v23 == v30)
                      {
                        int v29 = (uint64_t *)(v25 + 16 * v28);
                        goto LABEL_30;
                      }
                    }
                  }
                  *(unsigned char *)(v23 + 17) &= ~1u;
                }
              }
            }
          }
          v17 -= 96;
        }
        while (v17 != v14);
      }
    }
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 12;
    sub_1CD7610B0((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  }
  a1[1] = v6;
}

void sub_1CD2F9FEC(void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 22;
    sub_1CD8C8D7C((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
    goto LABEL_19;
  }
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (unsigned char *)*a1) >> 4);
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x1745D1745D1745DLL) {
    abort();
  }
  unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - (void)*a1) >> 4);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v10 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 > 0x1745D1745D1745DLL) {
      sub_1CB833614();
    }
    int v11 = (char *)operator new(176 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v12 = &v11[176 * v7];
  unint64_t v13 = &v11[176 * v10];
  *(void *)uint64_t v12 = *a2;
  uint64_t v6 = v12 + 176;
  sub_1CD8C8D7C((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
  uint64_t v15 = (char *)*a1;
  int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  do
  {
    uint64_t v16 = *((void *)v14 - 22);
    v14 -= 176;
    *((void *)v12 - 22) = v16;
    v12 -= 176;
    sub_1CD8C8D7C((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  int v14 = (char *)*a1;
  BOOL v17 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v14)
  {
    do
    {
      int32x2_t v18 = v17 - 176;
      sub_1CD48CFE4((llvm::ValueHandleBase *)(v17 - 168));
      BOOL v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
LABEL_19:
  a1[1] = v6;
}

uint64_t sub_1CD2FA174()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  LOBYTE(v3) = 1;
  *(void *)&long long v1 = &v3;
  LODWORD(v4) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable if-conversion during vectorization.";
  v5.n128_u64[1] = 42;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBD00298, "enable-if-conversion", (unsigned char **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD00298, &dword_1CB82C000);
  LOBYTE(v3) = 1;
  *(void *)&long long v1 = &v3;
  LODWORD(v4) = 1;
  v5.n128_u64[0] = (unint64_t)"Allow enabling loop hints to reorder FP operations during vectorization.";
  v5.n128_u64[1] = 72;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::HintsAllowReordering, "hints-allow-reordering", (unsigned char **)&v1, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::HintsAllowReordering, &dword_1CB82C000);
  int v3 = 1;
  LODWORD(v4) = 16;
  *(void *)&long long v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"The maximum number of SCEV checks allowed.";
  v5.n128_u64[1] = 42;
  sub_1CBF7A9F8((uint64_t)&unk_1EBD0D5B0, "vectorize-scev-check-threshold", (int **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD0D5B0, &dword_1CB82C000);
  int v3 = 1;
  LODWORD(v4) = 128;
  *(void *)&long long v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"The maximum number of SCEV checks allowed with a vectorize(enable) pragma";
  v5.n128_u64[1] = 73;
  sub_1CBF7A9F8((uint64_t)&unk_1EBD0D670, "pragma-vectorize-scev-check-threshold", (int **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD0D670, &dword_1CB82C000);
  int v2 = 1;
  int v3 = -1;
  *(void *)&long long v1 = "Control whether the compiler can use scalable vectors to vectorize a loop";
  *((void *)&v1 + 1) = 73;
  unint64_t v4 = &v3;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "off";
  v6[1] = 3;
  int v7 = 0;
  unint64_t v8 = "Scalable vectorization is disabled.";
  uint64_t v9 = 35;
  unint64_t v10 = "preferred";
  uint64_t v11 = 9;
  int v12 = 1;
  unint64_t v13 = "Scalable vectorization is available and favored when the cost is inconclusive.";
  uint64_t v14 = 78;
  uint64_t v15 = "on";
  uint64_t v16 = 2;
  int v17 = 1;
  int32x2_t v18 = "Scalable vectorization is available and favored when the cost is inconclusive.";
  uint64_t v19 = 78;
  v5.n128_u64[1] = 0x400000003;
  sub_1CD8C888C(&v4, &v2, &v1, (uint64_t)&v5);
  if ((void *)v5.n128_u64[0] != v6) {
    free((void *)v5.n128_u64[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD8C7100, &qword_1EBD00358, &dword_1CB82C000);
}

unsigned __int8 *llvm::InnerLoopVectorizer::setDebugLocFromInst(unsigned __int8 *result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = (uint64_t)(result + 104);
  }
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu)
  {
    uint64_t v9 = *(void *)v4;
    uint64_t v10 = *(unsigned int *)(v4 + 8);
    if (v10)
    {
      uint64_t v18 = 0;
      uint64_t v11 = v9 + 16 * v10;
      uint64_t v19 = 16 * v10;
      uint64_t v20 = 16 * v10 - 16;
      while (*(_DWORD *)(v9 + v18))
      {
        v18 += 16;
        if (v19 == v18) {
          goto LABEL_13;
        }
      }
      uint64_t v11 = v9 + v18;
      if (v20 != v18)
      {
        unint64_t v25 = (void *)(v11 + 24);
        uint64_t v26 = v19 - v18 - 16;
        do
        {
          int v27 = *((_DWORD *)v25 - 2);
          if (v27)
          {
            *(_DWORD *)uint64_t v11 = v27;
            *(void *)(v11 + 8) = *v25;
            v11 += 16;
          }
          v25 += 2;
          v26 -= 16;
        }
        while (v26);
      }
    }
    else
    {
      uint64_t v11 = *(void *)v4;
    }
LABEL_13:
    *(_DWORD *)(v4 + 8) = (unint64_t)(v11 - v9) >> 4;
    return result;
  }
  uint64_t v6 = *(unsigned __int8 **)(a2 + 48);
  if (v6)
  {
    int v7 = result;
    if (llvm::Function::isDebugInfoForProfiling(*(llvm::Function **)(*(void *)(a2 + 40) + 56))
      && !sub_1CBF63B28(a2)
      && !byte_1EBD064B8)
    {
      uint64_t result = (unsigned __int8 *)sub_1CD8856D0((uint64_t)v6, *((_DWORD *)v7 + 22) * *((_DWORD *)v7 + 24));
      if (!v21) {
        return result;
      }
      uint64_t v22 = (uint64_t)result;
      int v29 = result;
      if (result)
      {
        llvm::MetadataTracking::track((uint64_t)&v29, result, 2);
        uint64_t v22 = (uint64_t)v29;
      }
      uint64_t result = (unsigned __int8 *)sub_1CB8461A4(v4, 0, v22);
      int v12 = v29;
      if (!v29) {
        return result;
      }
      int v13 = *v29;
      if ((v13 - 4) > 0x1E)
      {
        if ((v13 - 3) >= 0xFFFFFFFE) {
          unsigned int v24 = v29;
        }
        else {
          unsigned int v24 = 0;
        }
        if ((v13 - 3) < 0xFFFFFFFE)
        {
LABEL_50:
          if (v13 == 3) {
            *((void *)v12 + 1) = 0;
          }
          return result;
        }
        unint64_t v15 = (unint64_t)(v24 + 8);
      }
      else
      {
        if ((v29[1] & 0x7F) != 2 && !*((_DWORD *)v29 + 3)) {
          return result;
        }
        uint64_t v23 = *((void *)v29 + 2);
        if ((v23 & 4) == 0) {
          return result;
        }
        unint64_t v15 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (!v15) {
          return result;
        }
      }
      int v17 = &v29;
      goto LABEL_29;
    }
    uint64_t v28 = v6;
    llvm::MetadataTracking::track((uint64_t)&v28, v6, 2);
    uint64_t v8 = (uint64_t)v28;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v28 = 0;
  }
  uint64_t result = (unsigned __int8 *)sub_1CB8461A4(v4, 0, v8);
  int v12 = v28;
  if (!v28) {
    return result;
  }
  int v13 = *v28;
  if ((v13 - 4) > 0x1E)
  {
    if ((v13 - 3) >= 0xFFFFFFFE) {
      uint64_t v16 = v28;
    }
    else {
      uint64_t v16 = 0;
    }
    if ((v13 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v15 = (unint64_t)(v16 + 8);
LABEL_28:
      int v17 = &v28;
LABEL_29:
      uint64_t v30 = v17;
      return (unsigned __int8 *)sub_1CC5FA668(v15 + 16, &v30);
    }
    goto LABEL_50;
  }
  if ((v28[1] & 0x7F) == 2 || *((_DWORD *)v28 + 3))
  {
    uint64_t v14 = *((void *)v28 + 2);
    if ((v14 & 4) != 0)
    {
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if (v15) {
        goto LABEL_28;
      }
    }
  }
  return result;
}

void llvm::reportVectorizationFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  llvm::LoopVectorizeHints::LoopVectorizeHints((uint64_t)&v8, a8, 1, a7);
}

void sub_1CD2FA804(int a1, int a2, int a3, llvm::Loop *this)
{
}

void llvm::reportVectorizationInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  llvm::LoopVectorizeHints::LoopVectorizeHints((uint64_t)&v6, a6, 1, a5);
}

void llvm::InnerLoopVectorizer::addNewMetadata(llvm::InnerLoopVectorizer *this, llvm::Instruction *a2, const llvm::Instruction *a3)
{
  int v3 = (llvm::LoopVersioning *)*((void *)this + 10);
  if (v3)
  {
    if ((*((unsigned char *)a3 + 16) & 0xFE) == 0x3C) {
      llvm::LoopVersioning::annotateInstWithNoAlias(v3, a2, a3);
    }
  }
}

void llvm::InnerLoopVectorizer::collectPoisonGeneratingRecipes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v50[16] = *MEMORY[0x1E4F143B8];
  unsigned int v44 = v48;
  unsigned int v45 = v48;
  uint64_t v46 = 16;
  int v47 = 0;
  v38[0] = **(void ***)(a2 + 320);
  sub_1CD8C916C((uint64_t *)v38, v42);
  sub_1CD8C91F4((llvm::SmallPtrSetImplBase *)v42, v38);
  sub_1CD8D5BDC((uint64_t)v34, (llvm::SmallPtrSetImplBase *)v38);
  sub_1CD8D5BDC((uint64_t)v30, (llvm::SmallPtrSetImplBase *)v40);
  uint64_t v4 = v50;
  while (1)
  {
    if (v36 - v35 != v32 - v31) {
      goto LABEL_20;
    }
    if (v35 == v36) {
      break;
    }
    uint64_t v5 = v31 + 16;
    uint64_t v6 = v35 + 16;
    while (1)
    {
      uint64_t v7 = v6 - 16;
      if (*(void *)(v6 - 16) != *(void *)(v5 - 16)) {
        break;
      }
      int v8 = *(unsigned __int8 *)(v5 + 8);
      if (*(unsigned char *)(v6 + 8)) {
        BOOL v9 = v8 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        if ((*(unsigned char *)(v6 + 8) == 0) == (v8 != 0)) {
          break;
        }
      }
      else if (*(void *)(v6 - 8) != *(void *)(v5 - 8) || *(void *)v6 != *(void *)v5)
      {
        break;
      }
      v5 += 32;
      v6 += 32;
      if (v7 + 32 == v36) {
        goto LABEL_51;
      }
    }
LABEL_20:
    uint64_t v11 = *(void *)(v36 - 32);
    uint64_t v12 = v11 + 200;
    uint64_t v13 = *(void *)(v11 + 208);
    uint64_t v29 = v11 + 200;
    if (v13 != v11 + 200)
    {
      do
      {
        if (v13) {
          uint64_t v14 = v13 - 24;
        }
        else {
          uint64_t v14 = 0;
        }
        int v15 = *(unsigned __int8 *)(v14 + 8);
        if (v15 == 10) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = 0;
        }
        if (v13 && v15 == 10)
        {
          uint64_t v17 = *(void *)(v16 + 16);
          unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
          if ((v17 & 4) != 0) {
            unint64_t v18 = **(void **)v18;
          }
          if (*(void *)(**(void **)(v16 + 48) + 48))
          {
            uint64_t v19 = *(void *)(v18 + 40);
            if (*(unsigned char *)(v16 + 160)) {
              BOOL v20 = v19 == 0;
            }
            else {
              BOOL v20 = 1;
            }
            if (!v20) {
              llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(v19 + 40), **(llvm::BasicBlock ***)(a1 + 392), *(llvm::Loop **)(*(void *)(a1 + 392) + 40), v3);
            }
          }
        }
        else
        {
          if (v15 == 3) {
            uint64_t v21 = v14;
          }
          else {
            uint64_t v21 = 0;
          }
          if (v13)
          {
            if (v15 == 3)
            {
              if (*(void *)(**(void **)(v21 + 48) + 48))
              {
                uint64_t v22 = *(void *)(v21 + 96);
                int v23 = *(_DWORD *)(v22 + 16);
                if (v23 >= 1)
                {
                  unsigned int v24 = v4;
                  uint64_t v25 = v2;
                  for (int i = 0; i != v23; ++i)
                  {
                    LODWORD(v49) = i + *(_DWORD *)(v22 + 32);
                    uint64_t v27 = sub_1CD4D6838((uint64_t *)(v22 + 8), &v49);
                    if (v27) {
                      llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(v27 + 40), **(llvm::BasicBlock ***)(a1 + 392), *(llvm::Loop **)(*(void *)(a1 + 392) + 40), v3);
                    }
                  }
                  uint64_t v2 = v25;
                  uint64_t v4 = v24;
                  uint64_t v12 = v29;
                }
              }
            }
          }
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != v12);
    }
    sub_1CD8DAA80((uint64_t)v34);
  }
LABEL_51:
  sub_1CD8D55E4(&v33);
  sub_1CD8D55E4(v30);
  sub_1CD8D55E4(&v37);
  sub_1CD8D55E4(v34);
  sub_1CD8D55E4(&v41);
  sub_1CD8D55E4(v40);
  sub_1CD8D55E4(&v39);
  sub_1CD8D55E4(v38);
  sub_1CD8D55E4(&v43);
  sub_1CD8D55E4(v42);
  if (v45 != v44) {
    free(v45);
  }
}

void llvm::InnerLoopVectorizer::addMetadata(llvm::InnerLoopVectorizer *a1, llvm::Instruction **a2, uint64_t a3, llvm::Instruction *a4)
{
  if (a3)
  {
    uint64_t v7 = 8 * a3;
    do
    {
      if (*a2) {
        BOOL v8 = *((unsigned __int8 *)*a2 + 16) >= 0x1Cu;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        llvm::InnerLoopVectorizer::addMetadata(a1, *a2, a4);
      }
      ++a2;
      v7 -= 8;
    }
    while (v7);
  }
}

uint64_t llvm::InnerLoopVectorizer::getReductionResumeValue(uint64_t a1, uint64_t a2)
{
  return *(void *)(sub_1CD8C92F4(a1 + 552, a2) + 8);
}

llvm::Instruction *llvm::VPTransformState::get(llvm::VPTransformState *this, llvm::VPValue *a2, unsigned int a3)
{
  BOOL v43 = a2;
  unsigned int v44 = a2;
  uint64_t v6 = (uint64_t *)((char *)this + 32);
  unint64_t v41 = 0;
  if (sub_1CD7D38CC((uint64_t *)this + 4, &v44, &v41)
    && v41 != *((void *)this + 4) + 40 * *((unsigned int *)this + 12)
    && *(_DWORD *)(v41 + 16) > a3
    && *(void *)(*(void *)(v41 + 8) + 8 * a3))
  {
    return *(llvm::Instruction **)(sub_1CD8D9F1C(v6, &v43)[1] + 8 * a3);
  }
  if (!sub_1CD319158((uint64_t)this, (uint64_t)a2, a3, 0))
  {
    uint64_t v7 = (llvm::Instruction *)(*(uint64_t (**)(void, void))(**((void **)this + 39) + 24))(*((void *)this + 39), *((void *)a2 + 5));
LABEL_13:
    sub_1CD8C9514((uint64_t)this, a2, (uint64_t)v7, a3);
    return v7;
  }
  unint64_t v41 = a3;
  char v42 = 0;
  uint64_t v7 = llvm::VPTransformState::get((uint64_t)this, (uint64_t)a2, (unsigned int *)&v41);
  if (*((_DWORD *)this + 1) != 1 && *(_DWORD *)this == 1) {
    goto LABEL_13;
  }
  if (a2 && *((unsigned char *)a2 + 8) == 4 && *((unsigned char *)a2 + 56))
  {
    uint64_t v9 = 0;
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = (*(_DWORD *)this - 1);
  }
  BOOL v10 = sub_1CD319158((uint64_t)this, (uint64_t)a2, a3 | (unint64_t)(v9 << 32), 0);
  if (v10) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = 0;
  }
  unint64_t v41 = __PAIR64__(v11, a3);
  char v42 = 0;
  uint64_t v12 = llvm::VPTransformState::get((uint64_t)this, (uint64_t)a2, (unsigned int *)&v41);
  uint64_t v13 = (uint64_t ***)v12;
  uint64_t v14 = *((void *)this + 34);
  if (*((unsigned char *)v12 + 16) == 83)
  {
    uint64_t v15 = *((void *)v12 + 5);
    uint64_t v16 = v15 + 40;
    for (uint64_t i = *(void *)(v15 + 48); i != v16; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v18 = i - 24;
      if (i) {
        uint64_t v19 = i - 24;
      }
      else {
        uint64_t v19 = 0;
      }
      if (*(unsigned char *)(v19 + 16) != 83) {
        goto LABEL_29;
      }
    }
    uint64_t v18 = 0;
LABEL_29:
    uint64_t v20 = v18 + 24;
    if (!v18) {
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v20 = *((void *)v12 + 4);
  }
  uint64_t v21 = 0;
  int v22 = !v10;
  uint64_t v24 = *(void *)(v14 + 48);
  uint64_t v23 = *(void *)(v14 + 56);
  if (v20) {
    uint64_t v25 = v20 - 24;
  }
  else {
    uint64_t v25 = 0;
  }
  *(void *)(v14 + 48) = *(void *)(v25 + 40);
  *(void *)(v14 + 56) = v25 + 24;
  uint64_t v26 = *(unsigned __int8 **)(v25 + 48);
  unsigned int v44 = (llvm::VPValue *)v26;
  if (v26)
  {
    llvm::MetadataTracking::track((uint64_t)&v44, v26, 2);
    uint64_t v21 = (uint64_t)v44;
  }
  int v27 = v8 | v22;
  sub_1CB8461A4(v14, 0, v21);
  if (!v44) {
    goto LABEL_37;
  }
  int v37 = *(unsigned __int8 *)v44;
  if ((v37 - 4) > 0x1E)
  {
    if ((v37 - 3) >= 0xFFFFFFFE) {
      uint64_t v40 = v44;
    }
    else {
      uint64_t v40 = 0;
    }
    if ((v37 - 3) < 0xFFFFFFFE)
    {
      if (v37 == 3) {
        *((void *)v44 + 1) = 0;
      }
      goto LABEL_37;
    }
    unint64_t v39 = (unint64_t)v40 + 8;
    goto LABEL_60;
  }
  if ((*((unsigned char *)v44 + 1) & 0x7F) == 2 || *((_DWORD *)v44 + 3))
  {
    uint64_t v38 = *((void *)v44 + 2);
    if ((v38 & 4) != 0)
    {
      unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
      if (v39)
      {
LABEL_60:
        unint64_t v41 = (unint64_t)&v44;
        sub_1CC5FA668(v39 + 16, &v41);
      }
    }
  }
LABEL_37:
  if (v27)
  {
    uint64_t v7 = (llvm::Instruction *)(*(uint64_t (**)(void, llvm::Instruction *))(**((void **)this + 39) + 24))(*((void *)this + 39), v7);
    sub_1CD8C9514((uint64_t)this, a2, (uint64_t)v7, a3);
  }
  else
  {
    uint64_t v28 = *v13;
    uint64_t v29 = *(llvm::Type **)this;
    if (HIDWORD(*(void *)this) == 1) {
      llvm::ScalableVectorType::get(v28, v29);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v28, v29);
    }
    uint64_t v32 = llvm::PoisonValue::get(v30, v31);
    sub_1CD8C9514((uint64_t)this, a2, (uint64_t)v32, a3);
    if (*(_DWORD *)this)
    {
      unsigned int v33 = 0;
      do
      {
        uint64_t v34 = *((void *)this + 39);
        unint64_t v41 = __PAIR64__(v33, a3);
        char v42 = 0;
        llvm::InnerLoopVectorizer::packScalarIntoVectorValue(v34, a2, (unsigned int *)&v41, (llvm::Type ***)this);
        ++v33;
      }
      while (v33 < *(_DWORD *)this);
    }
    uint64_t v7 = (llvm::Instruction *)llvm::VPTransformState::get(this, a2, a3);
  }
  uint64_t v35 = *((void *)this + 34);
  if (v24)
  {
    sub_1CBF5385C(v35, v24, v23);
  }
  else
  {
    *(void *)(v35 + 48) = 0;
    *(void *)(v35 + 56) = 0;
  }
  return v7;
}

void llvm::InnerLoopVectorizer::vectorizeInterleaveGroup(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, llvm::VPTransformState *a5, uint64_t a6, uint64_t a7, uint64_t a8, llvm::VPValue *a9)
{
  v138[2] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *((void *)a2 + 5);
  if (!v12 || (uint64_t v13 = (uint64_t ***)*((void *)a2 + 5), *(unsigned char *)(v12 + 16) != 60)) {
    uint64_t v13 = *(uint64_t ****)(v12 - 64);
  }
  uint64_t v114 = *(void *)(*(void *)(*(void *)(v12 + 40) + 56) + 40);
  uint64_t v14 = *v13;
  unint64_t v15 = *(void *)(a1 + 88);
  uint64_t v118 = *a2;
  uint64_t v16 = (llvm::Type *)(v118 * v15);
  uint64_t v17 = *v13;
  if (HIDWORD(v15) == 1) {
    llvm::ScalableVectorType::get(v17, v16);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v17, v16);
  }
  uint64_t v121 = v18;
  unsigned int v136 = v138;
  uint64_t v137 = 0x200000000;
  uint64_t v115 = v12;
  unsigned int v19 = sub_1CD4D5A00((uint64_t)a2, v12);
  if (*((unsigned char *)a2 + 4)) {
    v19 += (*(_DWORD *)(a1 + 88) - 1) * *a2;
  }
  unint64_t v117 = a2;
  uint64_t v119 = (uint64_t)v14;
  if (*(_DWORD *)(a1 + 96))
  {
    unsigned int v62 = 0;
    uint64_t v63 = -v19;
    do
    {
      uint64_t v132 = (void *)v62;
      LOBYTE(v133) = 0;
      uint64_t v64 = llvm::VPTransformState::get((uint64_t)a5, a6, (unsigned int *)&v132);
      llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, (uint64_t)v64, 0, 0);
      uint64_t v65 = llvm::Value::stripPointerCasts(v64);
      int v67 = 0;
      if (v65 && *((unsigned char *)v65 + 16) == 62) {
        int v67 = (*((unsigned __int8 *)v65 + 17) >> 1) & 1;
      }
      uint64_t v68 = **(void **)(a1 + 168);
      unsigned int v69 = *(llvm::ConstantInt **)(v68 + 1960);
      unint64_t v70 = *(unsigned int *)(v68 + 1968);
      unsigned int v133 = v70 >> 8;
      if (v70 >> 8 > 0x40) {
        operator new[]();
      }
      if (v70 <= 0xFF) {
        unint64_t v71 = 0;
      }
      else {
        unint64_t v71 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v70) + 63);
      }
      uint64_t v132 = (void *)(v71 & v63);
      uint64_t v72 = (const char *)llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v132, v66);
      uint64_t v14 = (uint64_t **)v119;
      if (v133 >= 0x41 && v132) {
        MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
      }
      __int16 v135 = 257;
      uint64_t v73 = sub_1CB930F7C((uint64_t *)(a1 + 104), v119, (uint64_t *)v64, v72, (uint64_t)&v132);
      int v74 = (unsigned __int8 *)v73;
      if (v67) {
        char v75 = 2;
      }
      else {
        char v75 = 0;
      }
      *((unsigned char *)v73 + 17) = *((unsigned char *)v73 + 17) & 0xFD | v75;
      unsigned int v76 = *(_DWORD *)(*(void *)v73 + 8);
      if ((v76 & 0xFE) == 0x12) {
        unsigned int v76 = *(_DWORD *)(**(void **)(*(void *)v73 + 16) + 8);
      }
      unint64_t v77 = llvm::PointerType::get(v121, (llvm::Type *)(v76 >> 8));
      __int16 v131 = 257;
      if (*(void *)v74 != v77)
      {
        if (v74[16] <= 0x14u)
        {
          int v74 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 176) + 224))(*(void *)(a1 + 176), 49, v74, v77);
          if (v74) {
            BOOL v81 = v74[16] >= 0x1Cu;
          }
          else {
            BOOL v81 = 0;
          }
          if (v81)
          {
            (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v74, &v128, *(void *)(a1 + 152), *(void *)(a1 + 160));
            uint64_t v82 = *(unsigned int *)(a1 + 112);
            if (v82)
            {
              uint64_t v83 = *(void *)(a1 + 104);
              uint64_t v84 = v83 + 16 * v82;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v74, *(_DWORD *)v83, *(llvm::MDNode **)(v83 + 8));
                v83 += 16;
              }
              while (v83 != v84);
            }
            uint64_t v14 = (uint64_t **)v119;
          }
        }
        else
        {
          __int16 v135 = 257;
          int v74 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v74, v77, (const char **)&v132, 0);
          (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v74, &v128, *(void *)(a1 + 152), *(void *)(a1 + 160));
          uint64_t v78 = *(unsigned int *)(a1 + 112);
          if (v78)
          {
            uint64_t v79 = *(void *)(a1 + 104);
            uint64_t v80 = v79 + 16 * v78;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v74, *(_DWORD *)v79, *(llvm::MDNode **)(v79 + 8));
              v79 += 16;
            }
            while (v79 != v80);
          }
        }
      }
      if (v137 >= (unint64_t)HIDWORD(v137)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v136[v137] = v74;
      LODWORD(v137) = v137 + 1;
      ++v62;
    }
    while (v62 < *(_DWORD *)(a1 + 96));
  }
  uint64_t v20 = a9;
  uint64_t v111 = (const llvm::DataLayout *)(v114 + 272);
  llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, v115, 0, 0);
  unint64_t v112 = (unint64_t)llvm::PoisonValue::get(v121, v21);
  uint64_t v22 = (uint64_t)v117;
  LODWORD(v132) = *v117 + v117[8] - 1;
  uint64_t v23 = (uint64_t *)(v117 + 2);
  uint64_t BitMaskForGaps = 0;
  if (!sub_1CD4D6838((uint64_t *)v117 + 1, &v132))
  {
    if (*(_DWORD *)(*(void *)(a1 + 400) + 120)) {
      uint64_t BitMaskForGaps = (uint64_t)llvm::createBitMaskForGaps(a1 + 104, *(_DWORD *)(a1 + 88), v117);
    }
    else {
      uint64_t BitMaskForGaps = 0;
    }
  }
  if (*(unsigned char *)(v115 + 16) == 60)
  {
    BOOL v124 = v126;
    uint64_t v125 = 0x200000000;
    if (*(_DWORD *)(a1 + 96))
    {
      unint64_t v25 = 0;
      uint64_t v116 = a1 + 104;
      do
      {
        if ((unint64_t)a9 | BitMaskForGaps)
        {
          uint64_t v26 = (llvm::Instruction *)BitMaskForGaps;
          if (v20)
          {
            int v27 = v20;
            uint64_t v28 = (llvm::PoisonValue **)llvm::VPTransformState::get(a5, v20, v25);
            llvm::createReplicatedMask(v118, *(_DWORD *)(a1 + 88), (uint64_t)&v132);
            uint64_t v29 = v132;
            uint64_t v30 = (llvm::Type *)v133;
            unsigned int v128 = "interleaved.mask";
            __int16 v131 = 259;
            uint64_t v32 = llvm::PoisonValue::get(*v28, v31);
            uint64_t v26 = sub_1CB935A74(v116, (uint64_t)v28, (uint64_t)v32, v29, v30, (uint64_t)&v128);
            if (v132 != v134) {
              free(v132);
            }
            if (BitMaskForGaps)
            {
              __int16 v135 = 257;
              uint64_t v26 = sub_1CB844E98(v116, 28, (uint64_t)v26, BitMaskForGaps, (uint64_t)&v132, 0);
            }
            uint64_t v20 = v27;
          }
          unsigned int v33 = (uint64_t *)v136[v25];
          uint64_t v34 = (uint64_t)v117;
          char v35 = *((unsigned char *)v117 + 5);
          uint64_t v132 = "wide.masked.vec";
          __int16 v135 = 259;
          MaskedLoad = (llvm::Instruction *)llvm::IRBuilderBase::CreateMaskedLoad(v116, v121, v33, v35, (uint64_t)v26, (llvm::UndefValue *)v112, (uint64_t)&v132);
        }
        else
        {
          int v37 = v20;
          uint64_t v38 = v136[v25];
          char v39 = *(unsigned char *)(v22 + 5);
          unsigned int v128 = "wide.vec";
          __int16 v131 = 259;
          uint64_t v40 = operator new(0x60uLL);
          v40[13] = v40[13] & 0x38000000 | 1;
          MaskedLoad = (llvm::Instruction *)(v40 + 8);
          *(void *)uint64_t v40 = 0;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = 0;
          *((void *)v40 + 3) = v40 + 8;
          __int16 v135 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v40 + 8), (uint64_t)v121, v38, (const char **)&v132, 0, v39, 0);
          (*(void (**)(void, llvm::Instruction *, void **, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), MaskedLoad, &v128, *(void *)(a1 + 152), *(void *)(a1 + 160));
          uint64_t v41 = *(unsigned int *)(a1 + 112);
          if (v41)
          {
            uint64_t v42 = *(void *)(a1 + 104);
            uint64_t v43 = v42 + 16 * v41;
            do
            {
              llvm::Instruction::setMetadata(MaskedLoad, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
              v42 += 16;
            }
            while (v42 != v43);
          }
          uint64_t v34 = (uint64_t)v117;
          uint64_t v20 = v37;
        }
        llvm::InterleaveGroup<llvm::Instruction>::addMetadata(v34, MaskedLoad);
        if (v125 >= (unint64_t)HIDWORD(v125)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v124 + v125) = MaskedLoad;
        LODWORD(v125) = v125 + 1;
        ++v25;
        uint64_t v22 = (uint64_t)v117;
      }
      while (v25 < *(unsigned int *)(a1 + 96));
    }
    if (v118)
    {
      uint64_t v44 = 0;
      unsigned int v45 = 0;
      uint64_t v46 = (llvm::IRBuilderBase *)(a1 + 104);
      int v47 = v134;
      int v48 = "reverse";
      do
      {
        LODWORD(v132) = *(_DWORD *)(v22 + 32) + v44;
        uint64_t v49 = sub_1CD4D6838(v23, &v132);
        if (v49)
        {
          uint64_t v50 = (uint64_t ***)v49;
          uint64_t v113 = v47;
          unsigned int v122 = v46;
          llvm::createStrideMask(v44, v118, *(_DWORD *)(a1 + 88), (uint64_t)&v132);
          if (*(_DWORD *)(a1 + 96))
          {
            unint64_t v52 = 0;
            do
            {
              unsigned int v53 = v48;
              uint64_t v54 = (llvm::PoisonValue **)*((void *)v124 + v52);
              uint64_t v55 = v132;
              uint64_t v56 = (llvm::Type *)v133;
              unsigned int v128 = "strided.vec";
              __int16 v131 = 259;
              BOOL v57 = llvm::PoisonValue::get(*v54, v51);
              BitOrPointerCast = (llvm::Type ***)sub_1CB935A74((uint64_t)v122, (uint64_t)v54, (uint64_t)v57, v55, v56, (uint64_t)&v128);
              uint64_t v59 = *v50;
              if (*v50 == (uint64_t **)v119)
              {
                int v48 = v53;
              }
              else
              {
                unsigned int v60 = *(llvm::Type **)(a1 + 88);
                if ((unint64_t)v60 >> 32 == 1) {
                  llvm::ScalableVectorType::get(v59, v60);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v59, v60);
                }
                int v48 = v53;
                BitOrPointerCast = (llvm::Type ***)llvm::InnerLoopVectorizer::createBitOrPointerCast((llvm::InnerLoopVectorizer *)a1, BitOrPointerCast, v61, v111);
              }
              if (*((unsigned char *)v117 + 4))
              {
                unsigned int v128 = v48;
                __int16 v131 = 259;
                BitOrPointerCast = (llvm::Type ***)llvm::IRBuilderBase::CreateVectorReverse(v122, (void **)BitOrPointerCast, (const llvm::Twine *)&v128);
              }
              sub_1CD8C9514((uint64_t)a5, *(void **)(a3 + 8 * v45), (uint64_t)BitOrPointerCast, v52++);
            }
            while (v52 < *(unsigned int *)(a1 + 96));
          }
          int v47 = v113;
          if (v132 != v113) {
            free(v132);
          }
          ++v45;
          uint64_t v22 = (uint64_t)v117;
          uint64_t v46 = v122;
        }
        uint64_t v44 = (v44 + 1);
      }
      while (v44 != v118);
    }
    if (v124 != v126) {
      free(v124);
    }
    goto LABEL_54;
  }
  unsigned int v85 = *(llvm::Type **)(a1 + 88);
  if ((unint64_t)v85 >> 32 == 1) {
    llvm::ScalableVectorType::get(v14, v85);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, v85);
  }
  uint64_t v87 = v86;
  uint64_t v88 = a7;
  uint64_t v123 = llvm::createBitMaskForGaps(a1 + 104, *(_DWORD *)(a1 + 88), v117);
  if (!*(_DWORD *)(a1 + 96)) {
    goto LABEL_54;
  }
  unint64_t v89 = 0;
  do
  {
    unsigned int v128 = v130;
    uint64_t v129 = 0x400000000;
    unsigned int v90 = v118;
    if (!v118)
    {
      uint64_t v91 = v130;
      goto LABEL_111;
    }
    for (uint64_t i = 0; i != v118; ++i)
    {
      LODWORD(v132) = i + *(_DWORD *)(v22 + 32);
      if (!sub_1CD4D6838(v23, &v132))
      {
        int v94 = (void **)llvm::PoisonValue::get(v87, v93);
LABEL_106:
        VectorReverse = v94;
        goto LABEL_107;
      }
      VectorReverse = (void **)llvm::VPTransformState::get(a5, *(llvm::VPValue **)(v88 + 8 * i), v89);
      if (*(unsigned char *)(v22 + 4))
      {
        uint64_t v132 = "reverse";
        __int16 v135 = 259;
        VectorReverse = (void **)llvm::IRBuilderBase::CreateVectorReverse((llvm::IRBuilderBase *)(a1 + 104), VectorReverse, (const llvm::Twine *)&v132);
      }
      if (*VectorReverse != v87)
      {
        int v94 = (void **)llvm::InnerLoopVectorizer::createBitOrPointerCast((llvm::InnerLoopVectorizer *)a1, (llvm::Type ***)VectorReverse, (llvm::Type **)v87, v111);
        goto LABEL_106;
      }
LABEL_107:
      if (v129 >= (unint64_t)HIDWORD(v129)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v128 + v129) = VectorReverse;
      unsigned int v90 = v129 + 1;
      LODWORD(v129) = v129 + 1;
    }
    uint64_t v91 = v128;
LABEL_111:
    BOOL v96 = (llvm::PoisonValue **)llvm::concatenateVectors(a1 + 104, v91, v90);
    llvm::createInterleaveMask(*(unsigned int *)(a1 + 88), v118, (uint64_t)&v132);
    unsigned int v97 = v132;
    unint64_t v98 = (llvm::Type *)v133;
    BOOL v124 = "interleaved.vec";
    __int16 v127 = 259;
    int v100 = llvm::PoisonValue::get(*v96, v99);
    int v101 = sub_1CB935A74(a1 + 104, (uint64_t)v96, (uint64_t)v100, v97, v98, (uint64_t)&v124);
    if (v132 != v134) {
      free(v132);
    }
    if ((unint64_t)a9 | (unint64_t)v123)
    {
      BOOL v102 = v123;
      uint64_t v88 = a7;
      if (a9)
      {
        unsigned int v103 = (llvm::PoisonValue **)llvm::VPTransformState::get(a5, a9, v89);
        llvm::createReplicatedMask(v118, *(_DWORD *)(a1 + 88), (uint64_t)&v132);
        uint64_t v104 = v132;
        size_t v105 = (llvm::Type *)v133;
        BOOL v124 = "interleaved.mask";
        __int16 v127 = 259;
        size_t v107 = llvm::PoisonValue::get(*v103, v106);
        BOOL v102 = sub_1CB935A74(a1 + 104, (uint64_t)v103, (uint64_t)v107, v104, v105, (uint64_t)&v124);
        if (v132 != v134) {
          free(v132);
        }
        if (v123)
        {
          __int16 v135 = 257;
          BOOL v102 = sub_1CB844E98(a1 + 104, 28, (uint64_t)v102, (uint64_t)v123, (uint64_t)&v132, 0);
        }
        uint64_t v22 = (uint64_t)v117;
        uint64_t v88 = a7;
      }
      MaskedStore = (llvm *)llvm::IRBuilderBase::CreateMaskedStore(a1 + 104, v101, (uint64_t *)v136[v89], *(unsigned char *)(v22 + 5), (uint64_t)v102);
    }
    else
    {
      unint64_t v112 = v112 & 0xFFFFFFFFFFFF0000 | *(unsigned __int8 *)(v22 + 5) | 0x100;
      MaskedStore = sub_1CC27BF8C((uint64_t *)(a1 + 104), (uint64_t)v101, v136[v89], *(unsigned __int8 *)(v22 + 5) | 0x100u, 0);
      uint64_t v88 = a7;
    }
    llvm::InterleaveGroup<llvm::Instruction>::addMetadata(v22, MaskedStore);
    if (v128 != v130) {
      free(v128);
    }
    ++v89;
  }
  while (v89 < *(unsigned int *)(a1 + 96));
LABEL_54:
  if (v136 != v138) {
    free(v136);
  }
}

char **llvm::InnerLoopVectorizer::scalarizeInstruction(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t result = (char **)sub_1CC9E8BD8((uint64_t)a2);
  if (result)
  {
    BOOL v13 = !*(_DWORD *)a4 && *(_DWORD *)(a4 + 4) == 0;
    if (!v13 || *(unsigned char *)(a4 + 8) != 0) {
      return result;
    }
  }
  int v15 = *(unsigned __int8 *)(*(void *)a2 + 8);
  uint64_t v16 = (llvm::Value *)llvm::Instruction::clone(a2);
  uint64_t v17 = v16;
  if (v15 != 7)
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      uint64_t v28 = 0;
      int v27 = &byte_1CFBCE98E;
      goto LABEL_20;
    }
    uint64_t v18 = ***(void ***)a2;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v22 = (llvm::Instruction **)(v19 + 16 * v21);
      uint64_t v23 = *v22;
      if (*v22 == a2)
      {
LABEL_19:
        uint64_t v26 = v22[1];
        uint64_t v29 = *(void *)v26;
        int v27 = (char *)v26 + 16;
        uint64_t v28 = v29;
LABEL_20:
        __int16 v83 = 773;
        uint64_t v80 = v27;
        uint64_t v81 = v28;
        uint64_t v82 = ".cloned";
        llvm::Value::setNameImpl(v16, &v80);
        if (!v17 || *((unsigned char *)v17 + 16)) {
          goto LABEL_22;
        }
        if ((*((unsigned char *)v17 + 23) & 0x10) == 0) {
          goto LABEL_107;
        }
        uint64_t v66 = ***(void ***)v17;
        uint64_t v67 = *(void *)(v66 + 152);
        uint64_t v68 = *(unsigned int *)(v66 + 168);
        if (v68)
        {
          LODWORD(v69) = (v68 - 1) & ((v17 >> 4) ^ (v17 >> 9));
          unint64_t v70 = (llvm::Value **)(v67 + 16 * v69);
          unint64_t v71 = *v70;
          if (*v70 == v17)
          {
LABEL_100:
            int v74 = v70[1];
            unint64_t v77 = *(void *)v74;
            char v75 = (char *)v74 + 16;
            unint64_t v76 = v77;
            if (v77 >= 5 && *(_DWORD *)v75 == *(_DWORD *)"llvm." && v75[4] == aLlvm_1[4])
            {
              *((_DWORD *)v17 + 8) |= 0x2000u;
              int v79 = llvm::Function::lookupIntrinsicID(v75, v76);
LABEL_108:
              *((_DWORD *)v17 + 9) = v79;
              goto LABEL_22;
            }
LABEL_107:
            int v79 = 0;
            *((_DWORD *)v17 + 8) &= ~0x2000u;
            goto LABEL_108;
          }
          int v72 = 1;
          while (v71 != (llvm::Value *)-4096)
          {
            int v73 = v69 + v72++;
            uint64_t v69 = v73 & (v68 - 1);
            unint64_t v71 = *(llvm::Value **)(v67 + 16 * v69);
            if (v71 == v17)
            {
              unint64_t v70 = (llvm::Value **)(v67 + 16 * v69);
              goto LABEL_100;
            }
          }
        }
        unint64_t v70 = (llvm::Value **)(v67 + 16 * v68);
        goto LABEL_100;
      }
      int v24 = 1;
      while (v23 != (llvm::Instruction *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        uint64_t v23 = *(llvm::Instruction **)(v19 + 16 * v21);
        if (v23 == a2)
        {
          uint64_t v22 = (llvm::Instruction **)(v19 + 16 * v21);
          goto LABEL_19;
        }
      }
    }
    uint64_t v22 = (llvm::Instruction **)(v19 + 16 * v20);
    goto LABEL_19;
  }
LABEL_22:
  uint64_t v31 = *(void *)(a6 + 328);
  uint64_t v30 = *(void *)(a6 + 336);
  if (v30 == v31)
  {
    uint64_t v32 = *(unsigned int *)(a6 + 348);
    unsigned int v33 = (void *)(v30 + 8 * v32);
    if (v32)
    {
      uint64_t v34 = 0;
      while (*(void *)(v30 + v34) != a3)
      {
        v34 += 8;
        if (8 * v32 == v34) {
          goto LABEL_40;
        }
      }
      unsigned int v33 = (void *)(v30 + v34);
    }
LABEL_40:
    uint64_t v31 = *(void *)(a6 + 336);
    goto LABEL_47;
  }
  uint64_t v35 = *(unsigned int *)(a6 + 344);
  int v36 = v35 - 1;
  unsigned int v37 = (v35 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  unsigned int v33 = (void *)(v30 + 8 * v37);
  uint64_t v38 = *v33;
  if (*v33 != -1)
  {
    char v39 = 0;
    int v40 = 1;
    while (v38 != a3)
    {
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v38 == -2;
      }
      if (v41) {
        char v39 = v33;
      }
      unsigned int v42 = v37 + v40++;
      unsigned int v37 = v42 & v36;
      unsigned int v33 = (void *)(v30 + 8 * (v42 & v36));
      uint64_t v38 = *v33;
      if (*v33 == -1) {
        goto LABEL_42;
      }
    }
LABEL_46:
    LODWORD(v32) = *(_DWORD *)(a6 + 348);
    goto LABEL_47;
  }
  char v39 = 0;
LABEL_42:
  if (v39) {
    unsigned int v33 = v39;
  }
  if (*v33 == a3) {
    goto LABEL_46;
  }
  LODWORD(v32) = *(_DWORD *)(a6 + 348);
  unsigned int v33 = (void *)(v30 + 8 * v35);
LABEL_47:
  if (v30 == v31) {
    unsigned int v43 = v32;
  }
  else {
    unsigned int v43 = *(_DWORD *)(a6 + 344);
  }
  if (v33 != (void *)(v30 + 8 * v43)) {
    llvm::Instruction::dropPoisonGeneratingFlags(v17);
  }
  if (*((void *)a2 + 6)) {
    llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, (uint64_t)a2, 0, 0);
  }
  uint64_t v44 = *(unsigned int *)(a3 + 56);
  if (v44)
  {
    unint64_t v50 = 0;
    uint64_t v51 = *(uint64_t **)(a3 + 48);
    uint64_t v52 = 32 * v44;
    do
    {
      uint64_t v80 = *(const char **)a4;
      LODWORD(v81) = *(_DWORD *)(a4 + 8);
      uint64_t v53 = *v51;
      if (*v51) {
        BOOL v54 = *(unsigned char *)(*v51 + 8) == 4;
      }
      else {
        BOOL v54 = 0;
      }
      if (v54 && *(unsigned char *)(v53 + 56))
      {
        LOBYTE(v81) = 0;
        HIDWORD(v80) = 0;
      }
      uint64_t v55 = llvm::VPTransformState::get(a6, v53, (unsigned int *)&v80);
      int v56 = *((_DWORD *)v17 + 5);
      if ((v56 & 0x40000000) != 0) {
        BOOL v57 = (_DWORD *)*((void *)v17 - 1);
      }
      else {
        BOOL v57 = (_DWORD *)((char *)v17 - 32 * (v56 & 0x7FFFFFF));
      }
      uint64_t v58 = &v57[v50 / 4];
      if (*(void *)&v57[v50 / 4])
      {
        **((void **)v58 + 2) = *((void *)v58 + 1);
        uint64_t v59 = *((void *)v58 + 1);
        if (v59) {
          *(void *)(v59 + 16) = *((void *)v58 + 2);
        }
      }
      *(void *)uint64_t v58 = v55;
      if (v55)
      {
        uint64_t v62 = *((void *)v55 + 1);
        unsigned int v60 = (void *)((char *)v55 + 8);
        uint64_t v61 = v62;
        uint64_t v63 = &v57[v50 / 4];
        *((void *)v63 + 1) = v62;
        if (v62) {
          *(void *)(v61 + 16) = v63 + 2;
        }
        *((void *)v63 + 2) = v60;
        *unsigned int v60 = v58;
      }
      ++v51;
      v50 += 32;
    }
    while (v52 != v50);
  }
  unsigned int v45 = *(llvm::LoopVersioning **)(a1 + 80);
  if (v45 && (*((unsigned char *)a2 + 16) & 0xFE) == 0x3C) {
    llvm::LoopVersioning::annotateInstWithNoAlias(v45, v17, a2);
  }
  uint64_t v46 = *(uint64_t **)(a6 + 272);
  __int16 v83 = 257;
  (*(void (**)(uint64_t, llvm::Value *, const char **, uint64_t, uint64_t))(*(void *)v46[10] + 16))(v46[10], v17, &v80, v46[6], v46[7]);
  uint64_t v47 = *((unsigned int *)v46 + 2);
  if (v47)
  {
    uint64_t v64 = *v46;
    uint64_t v65 = v64 + 16 * v47;
    do
    {
      llvm::Instruction::setMetadata(v17, *(_DWORD *)v64, *(llvm::MDNode **)(v64 + 8));
      v64 += 16;
    }
    while (v64 != v65);
  }
  if (a3) {
    uint64_t v48 = a3 + 96;
  }
  else {
    uint64_t v48 = 0;
  }
  sub_1CD8C9704((_DWORD *)a6, v48, (uint64_t)v17, a4);
  uint64_t result = (char **)sub_1CBF698E4((uint64_t)v17);
  if (result && v17) {
    uint64_t result = llvm::AssumptionCache::registerAssumption(*(char ***)(a1 + 64), (uint64_t)v17);
  }
  if (a5)
  {
    unsigned int v49 = *(_DWORD *)(a1 + 336);
    if (v49 >= *(_DWORD *)(a1 + 340)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 328) + 8 * v49) = v17;
    ++*(_DWORD *)(a1 + 336);
  }
  return result;
}

llvm::Instruction *llvm::InnerLoopVectorizer::getOrCreateVectorTripCount(llvm::InnerLoopVectorizer *this, llvm::BasicBlock *a2)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (llvm::Instruction *)*((void *)this + 48);
  if (v2) {
    return v2;
  }
  TripCount = (llvm::ConstantInt **)llvm::InnerLoopVectorizer::getOrCreateTripCount(this, a2);
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)a2 + 5);
  if (v8) {
    uint64_t v9 = (uint64_t **)(v8 - 24);
  }
  else {
    uint64_t v9 = 0;
  }
  if (*((unsigned __int8 *)v9 + 16) - 29 >= 0xB) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = **v9;
  v28[0] = v29;
  v28[1] = (void *)0x200000000;
  v29[6] = v10;
  v29[7] = &v35;
  v29[8] = v36;
  v29[9] = 0;
  int v30 = 0;
  __int16 v31 = 512;
  char v32 = 7;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = &unk_1F2616E88;
  v36[0] = &unk_1F2617008;
  v29[4] = v9[5];
  v29[5] = v9 + 3;
  unsigned int v11 = (unsigned __int8 *)v9[6];
  v24[0] = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)v24, v11, 2);
    uint64_t v7 = v24[0];
  }
  sub_1CB8461A4((uint64_t)v28, 0, v7);
  if (v24[0])
  {
    int v20 = *(unsigned __int8 *)v24[0];
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        uint64_t v23 = v24[0];
      }
      else {
        uint64_t v23 = 0;
      }
      if ((v20 - 3) < 0xFFFFFFFE)
      {
        if (v20 == 3) {
          *(void *)(v24[0] + 8) = 0;
        }
        goto LABEL_11;
      }
      unint64_t v22 = v23 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v24[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v24[0] + 12)) {
        goto LABEL_11;
      }
      uint64_t v21 = *(void *)(v24[0] + 16);
      if ((v21 & 4) == 0) {
        goto LABEL_11;
      }
      unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
      if (!v22) {
        goto LABEL_11;
      }
    }
    v26[0] = v24;
    sub_1CC5FA668(v22 + 16, v26);
  }
LABEL_11:
  uint64_t v12 = *TripCount;
  StepForVF = llvm::createStepForVF((llvm::IRBuilderBase *)v28, *TripCount, *((void *)this + 11), *((unsigned int *)this + 24));
  if (*(unsigned char *)(*((void *)this + 50) + 124))
  {
    RuntimeVF = llvm::getRuntimeVF((llvm::IRBuilderBase *)v28, v12, *((void *)this + 11) & 0xFFFFFFFF00000000 | (*((_DWORD *)this + 24)* *((void *)this + 11)));
    int v15 = llvm::ConstantInt::get(v12, 1uLL, 0);
    __int16 v27 = 257;
    uint64_t v16 = sub_1CB84494C((uint64_t)v28, (uint64_t)RuntimeVF, (uint64_t)v15, (uint64_t)v26, 0, 0);
    v24[0] = "n.rnd.up";
    __int16 v25 = 259;
    TripCount = (llvm::ConstantInt **)sub_1CB844A3C((uint64_t)v28, TripCount, (uint64_t)v16, (uint64_t)v24, 0, 0);
  }
  v26[0] = "n.mod.vf";
  __int16 v27 = 259;
  Select = (llvm::ConstantInt **)sub_1CC57DDE0((uint64_t)v28, (uint64_t)TripCount, (uint64_t)StepForVF, (uint64_t)v26);
  if (sub_1CD8C9B4C(*((void *)this + 50)))
  {
    uint64_t v18 = llvm::ConstantInt::get(*Select, 0, 0);
    __int16 v27 = 257;
    uint64_t v19 = sub_1CB845F20((uint64_t)v28, 32, Select, (uint64_t)v18, (uint64_t)v26);
    __int16 v27 = 257;
    Select = (llvm::ConstantInt **)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v28, v19, StepForVF, (llvm::Value *)Select, (const llvm::Twine *)v26, 0);
  }
  v26[0] = "n.vec";
  __int16 v27 = 259;
  uint64_t v2 = sub_1CB84494C((uint64_t)v28, (uint64_t)TripCount, (uint64_t)Select, (uint64_t)v26, 0, 0);
  *((void *)this + 48) = v2;
  if (v28[0] != v29) {
    free(v28[0]);
  }
  return v2;
}

uint64_t llvm::InnerLoopVectorizer::emitMemRuntimeChecks(llvm::InnerLoopVectorizer *this, llvm::BasicBlock *a2)
{
  if (byte_1EBD0DAB0) {
    return 0;
  }
  uint64_t v5 = sub_1CD8CA18C(*((void *)this + 68), (int)a2, *((llvm::BasicBlock **)this + 30));
  uint64_t v2 = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 56) + 112);
    if (v6 && ((*(unsigned char *)(v6 + 17) & 4) != 0 || *(char *)(v6 + 13) < 0) || *((unsigned char *)this + 536))
    {
      uint64_t v7 = *****((void *****)this + 9);
      if (*(void *)(v7 + 128)
        || (*(unsigned int (**)(void))(**(void **)(v7 + 72) + 48))(*(void *)(v7 + 72)))
      {
        llvm::Loop::getStartLoc(*((llvm::Loop **)this + 1));
      }
    }
    unsigned int v8 = *((_DWORD *)this + 72);
    if (v8 >= *((_DWORD *)this + 73)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 35) + 8 * v8) = v2;
    ++*((_DWORD *)this + 72);
    *((unsigned char *)this + 408) = 1;
    if (!*(unsigned char *)(*(void *)(*(void *)(*((void *)this + 49) + 56) + 8) + 360)) {
      operator new();
    }
  }
  return v2;
}

llvm::ConstantExpr *sub_1CD2FD218(uint64_t a1, uint64_t ***a2, llvm::Instruction *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 && *(_WORD *)(a1 + 24) == 14) {
    return *(llvm::ConstantExpr **)(a1 - 8);
  }
  sub_1CC2B6C4C((uint64_t)v10, a2, (uint64_t)((*a2)[5] + 34), (uint64_t)"induction", 1);
  uint64_t v6 = a1;
  while (2)
  {
    switch(*(_WORD *)(v6 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v8 = (llvm::Type **)(v6 + 40);
        goto LABEL_12;
      case 4:
        unsigned int v8 = (llvm::Type **)(v6 + 48);
        goto LABEL_12;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v7 = *(uint64_t **)(v6 + 32);
        goto LABEL_7;
      case 6:
        uint64_t v7 = (uint64_t *)(v6 + 40);
LABEL_7:
        uint64_t v6 = *v7;
        continue;
      case 0xE:
        unsigned int v8 = *(llvm::Type ***)(v6 - 8);
        goto LABEL_12;
      default:
        unsigned int v8 = *(llvm::Type ***)(v6 + 32);
LABEL_12:
        uint64_t v5 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v10, (llvm::Instruction **)a1, *v8, a3);
        sub_1CC2B7040((uint64_t)v10);
        break;
    }
    return v5;
  }
}

llvm::Instruction *sub_1CD2FD36C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v31 = a1;
  uint64_t v9 = 0;
  switch(*(_DWORD *)(a5 + 24))
  {
    case 1:
      if (*(unsigned char *)(a4 + 16) != 16) {
        goto LABEL_6;
      }
      unsigned int v10 = *(_DWORD *)(a4 + 32);
      if (!v10) {
        goto LABEL_14;
      }
      uint64_t v11 = (llvm::APInt *)(a4 + 24);
      if (v10 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase(v11) != v10) {
          goto LABEL_6;
        }
LABEL_14:
        __int16 v33 = 257;
        return sub_1CB84494C((uint64_t)a1, a3, a2, (uint64_t)v32, 0, 0);
      }
      if (*(void *)v11 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v10) {
        goto LABEL_14;
      }
LABEL_6:
      uint64_t v12 = sub_1CD31D81C((uint64_t *)&v31, a2, (llvm::Instruction *)a4);
      uint64_t v9 = v12;
      if (a3 && *(unsigned char *)(a3 + 16) == 16)
      {
        uint64_t v13 = *(unsigned int *)(a3 + 32);
        if (v13 > 0x40)
        {
          int v20 = 0;
          int64_t v21 = (unint64_t)(v13 + 63) >> 6;
          do
          {
            BOOL v22 = v21-- < 1;
            if (v22) {
              break;
            }
            unint64_t v23 = *(void *)(*(void *)(a3 + 24) + 8 * v21);
            v20 += __clz(v23);
          }
          while (!v23);
          int v24 = v13 | 0xFFFFFFC0;
          if ((v13 & 0x3F) == 0) {
            int v24 = 0;
          }
          if (v20 + v24 == v13) {
            return v9;
          }
        }
        else if (!*(void *)(a3 + 24))
        {
          return v9;
        }
      }
      if (v12 && *((unsigned char *)v12 + 16) == 16)
      {
        uint64_t v25 = *((unsigned int *)v12 + 8);
        if (v25 <= 0x40)
        {
          if (*((void *)v12 + 3)) {
            goto LABEL_25;
          }
          return (llvm::Instruction *)a3;
        }
        int v27 = 0;
        int64_t v28 = (unint64_t)(v25 + 63) >> 6;
        do
        {
          BOOL v22 = v28-- < 1;
          if (v22) {
            break;
          }
          unint64_t v29 = *(void *)(*((void *)v12 + 3) + 8 * v28);
          v27 += __clz(v29);
        }
        while (!v29);
        int v30 = v25 | 0xFFFFFFC0;
        if ((v25 & 0x3F) == 0) {
          int v30 = 0;
        }
        if (v27 + v30 == v25) {
          return (llvm::Instruction *)a3;
        }
      }
LABEL_25:
      __int16 v33 = 257;
      return sub_1CB844A3C((uint64_t)a1, (void *)a3, (uint64_t)v12, (uint64_t)v32, 0, 0);
    case 2:
      uint64_t v14 = *(void *)(a5 + 48);
      int v15 = sub_1CD31D81C((uint64_t *)&v31, a2, (llvm::Instruction *)a4);
      __int16 v33 = 257;
      return sub_1CB930F7C(a1, v14, (uint64_t *)a3, (const char *)v15, (uint64_t)v32);
    case 3:
      uint64_t v17 = *(void *)(a5 + 40);
      __int16 v33 = 257;
      uint64_t v18 = sub_1CB843C88((uint64_t)a1, a4, a2, (uint64_t)v32, 0);
      uint64_t v19 = *(unsigned __int8 *)(v17 + 16) - 28;
      v32[0] = "induction";
      __int16 v33 = 259;
      return sub_1CB844E98((uint64_t)a1, v19, a3, v18, (uint64_t)v32, 0);
    default:
      return v9;
  }
}

void llvm::InnerLoopVectorizer::fixupIVUsers(llvm::InnerLoopVectorizer *this, llvm::PHINode *a2, const llvm::InductionDescriptor *a3, llvm::Value *a4, llvm::Value *a5, llvm::BasicBlock *a6, llvm::BasicBlock *a7)
{
}

uint64_t llvm::LoopVectorizationCostModel::getVectorCallCost(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  v73[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 - 32);
  if (!v8 || *(unsigned char *)(v8 + 16) || *(void *)(v8 + 24) != *(void *)(a2 + 72)) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t ***)a2;
  unsigned int v10 = v73;
  unint64_t v71 = v73;
  uint64_t v72 = 0x400000000;
  uint64_t v68 = v70;
  uint64_t v69 = 0x400000000;
  int v11 = *(_DWORD *)(a2 + 20);
  uint64_t v12 = v11 & 0x7FFFFFF;
  uint64_t v13 = (void **)(a2 - 32 * v12);
  int v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 84)
  {
    uint64_t v15 = 0;
  }
  else if (v14 == 39)
  {
    uint64_t v15 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v15 = 2;
  }
  if (v11 < 0 && (uint64_t v53 = (uint64_t)*(v13 - 1), (v53 & 0xFFFFFFFF0) != 0)) {
    uint64_t v16 = (*((_DWORD *)v13 - 3) - *(_DWORD *)((char *)v13 - v53));
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v59 = v70;
  if (v13 == (void **)(a2 - 32 * v15 - 32 * v16 - 32))
  {
    unsigned int v18 = 0;
    int v20 = v70;
  }
  else
  {
    uint64_t v17 = v9;
    unsigned int v18 = 0;
    uint64_t v19 = 32 * v12 - 32 * v15 - 32 * v16 - 32;
    do
    {
      if (v18 >= HIDWORD(v69)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v68[v18] = **v13;
      unsigned int v18 = v69 + 1;
      LODWORD(v69) = v69 + 1;
      v13 += 4;
      v19 -= 32;
    }
    while (v19);
    int v20 = v68;
    uint64_t v9 = v17;
  }
  uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t **, unsigned char *, void, void))(***(void ***)(a1 + 616)
                                                                                        + 960))(**(void **)(a1 + 616), v8, v9, v20, v18, 0);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  unint64_t v25 = a3 & 0xFFFFFFFF00000000;
  if ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1)
  {
    int v27 = *((unsigned __int8 *)v9 + 8);
    int v56 = a4;
    BOOL v57 = v73;
    uint64_t v58 = a1;
    uint64_t v54 = v21;
    if (v27 == 7 || v27 == 9)
    {
      uint64_t v55 = v9;
    }
    else
    {
      if (v25 == 0x100000000) {
        llvm::ScalableVectorType::get(v9, (llvm::Type *)a3);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, (llvm::Type *)a3);
      }
      uint64_t v55 = v28;
    }
    if (v69)
    {
      unsigned int v43 = (uint64_t ***)v68;
      uint64_t v44 = 8 * v69;
      do
      {
        unsigned int v45 = *v43;
        int v46 = *((unsigned __int8 *)*v43 + 8);
        if (v46 != 7 && v46 != 9)
        {
          uint64_t v48 = *v43;
          if (v25 == 0x100000000) {
            llvm::ScalableVectorType::get(v48, (llvm::Type *)a3);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v48, (llvm::Type *)a3);
          }
          unsigned int v45 = v49;
        }
        if (v72 >= (unint64_t)HIDWORD(v72)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v71[v72] = v45;
        LODWORD(v72) = v72 + 1;
        ++v43;
        v44 -= 8;
      }
      while (v44);
    }
    unint64_t ScalarizationOverhead = llvm::LoopVectorizationCostModel::getScalarizationOverhead(v58, a2, a3);
    int v31 = v30;
    uint64_t v65 = a3;
    LODWORD(v66) = 0;
    uint64_t v60 = v54;
    uint64_t v61 = v24;
    sub_1CB90C9D4((uint64_t)&v60, (uint64_t)&v65);
    if (__OFADD__(v60, ScalarizationOverhead)) {
      int64_t v32 = ((uint64_t)(v60 + ScalarizationOverhead) >> 63) ^ 0x8000000000000000;
    }
    else {
      int64_t v32 = v60 + ScalarizationOverhead;
    }
    if (v31 == 1) {
      int v33 = 1;
    }
    else {
      int v33 = v61;
    }
    uint64_t v34 = v56;
    unsigned char *v56 = 1;
    sub_1CD8CB164(a2, a3, 0, &v65);
    uint64_t v60 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
    uint64_t v61 = a2;
    uint64_t v62 = v64;
    uint64_t v63 = 0x800000000;
    sub_1CC076744((void **)a2, (uint64_t)&v62);
    uint64_t v35 = sub_1CD8CB328((uint64_t)&v60, (uint64_t)&v65);
    int v36 = v62;
    if (v63)
    {
      uint64_t v37 = 208 * v63;
      uint64_t v38 = (char *)v62 - 208;
      do
      {
        sub_1CD49DEA4((uint64_t)&v38[v37]);
        v37 -= 208;
      }
      while (v37);
      int v36 = v62;
    }
    unsigned int v10 = v57;
    uint64_t v39 = v58;
    if (v36 != v64) {
      free(v36);
    }
    int v40 = v55;
    if (!*(void *)(v39 + 624)) {
      goto LABEL_69;
    }
    uint64_t v41 = *(void *)(a2 + 64);
    if (!v41 || (*(unsigned char *)(v41 + 14) & 0x10) == 0)
    {
      if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 20)) {
        goto LABEL_62;
      }
      uint64_t v41 = *(void *)(a2 + 64);
      if (!v41)
      {
LABEL_48:
        char v42 = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 4) ^ 1;
LABEL_63:
        if ((v42 & 1) == 0 && v35)
        {
          uint64_t v50 = (*(uint64_t (**)(void, void, uint64_t **, void *, void, void))(***(void ***)(v39 + 616)
                                                                                                + 960))(**(void **)(v39 + 616), 0, v40, v71, v72, 0);
          BOOL v52 = v50 < v32;
          if (v33 != v51) {
            BOOL v52 = v33 > v51;
          }
          if (v52)
          {
            *uint64_t v34 = 0;
            int64_t v32 = v50;
          }
        }
LABEL_69:
        if (v66 != &v67) {
          free(v66);
        }
        uint64_t v22 = v32;
        goto LABEL_18;
      }
    }
    if ((*(unsigned char *)(v41 + 12) & 0x10) == 0) {
      goto LABEL_48;
    }
LABEL_62:
    char v42 = 0;
    goto LABEL_63;
  }
LABEL_18:
  if (v68 != (void *)v59) {
    free(v68);
  }
  if (v71 != v10) {
    free(v71);
  }
  return v22;
}

uint64_t llvm::LoopVectorizationCostModel::getVectorIntrinsicCost(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v5 = a1;
  v49[6] = *MEMORY[0x1E4F143B8];
  int v6 = llvm::getVectorIntrinsicIDForCall(a2, *(uint64_t **)(a1 + 624));
  uint64_t v7 = *(void *)a2;
  unint64_t v8 = (unint64_t)a3 & 0xFFFFFFFF00000000;
  BOOL v9 = ((unint64_t)a3 & 0xFFFFFFFF00000000) != 0x100000000 && a3 == 1;
  char v10 = v9;
  if (!v9 && ((*(_DWORD *)(v7 + 8) & 0xFD) == 0xD || *(_DWORD *)(v7 + 8) <= 6u))
  {
    uint64_t v12 = *(uint64_t ***)a2;
    if (v8 == 0x100000000) {
      llvm::ScalableVectorType::get(v12, a3);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, a3);
    }
    uint64_t v7 = v13;
  }
  if (sub_1CB845E74(a2))
  {
    if ((unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1 == 127) {
      LODWORD(v14) = -1;
    }
    else {
      unint64_t v14 = (unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1;
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  int v15 = *(_DWORD *)(a2 + 20);
  uint64_t v16 = (char *)(a2 - 32 * (v15 & 0x7FFFFFF));
  int v17 = *(unsigned __int8 *)(a2 + 16);
  if (v17 == 84)
  {
    uint64_t v18 = 0;
  }
  else if (v17 == 39)
  {
    uint64_t v18 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v18 = 2;
  }
  if (v15 < 0 && (uint64_t v35 = *((void *)v16 - 1), (v35 & 0xFFFFFFFF0) != 0)) {
    uint64_t v19 = (*((_DWORD *)v16 - 3) - *(_DWORD *)&v16[-v35]);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v47 = v49;
  uint64_t v48 = 0x600000000;
  sub_1CD77B118((uint64_t)&v47, v16, (char *)(a2 - 32 * v18 - 32 * v19 - 32));
  uint64_t v20 = *(void *)(a2 - 32);
  uint64_t v21 = *(void *)(v20 + 24);
  __src = v46;
  uint64_t v45 = 0x600000000;
  uint64_t v22 = *(unsigned int *)(v21 + 12);
  if (v22 == 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = v47;
    uint64_t v25 = v48;
    uint64_t v26 = v46;
  }
  else
  {
    uint64_t v36 = v7;
    int v37 = v6;
    uint64_t v38 = v5;
    LODWORD(v23) = 0;
    int v27 = (uint64_t ***)(*(void *)(v21 + 16) + 8);
    uint64_t v28 = 8 * v22 - 8;
    do
    {
      unint64_t v29 = *v27;
      if ((v10 & 1) == 0 && ((v29[1] & 0xFD) == 0xD || *((_DWORD *)v29 + 2) <= 6u))
      {
        int v31 = *v27;
        if (v8 == 0x100000000) {
          llvm::ScalableVectorType::get(v31, a3);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, a3);
        }
        unint64_t v29 = v32;
        LODWORD(v23) = v45;
      }
      if (v23 >= HIDWORD(v45)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__src + v23) = v29;
      uint64_t v23 = (v45 + 1);
      LODWORD(v45) = v45 + 1;
      ++v27;
      v28 -= 8;
    }
    while (v28);
    uint64_t v26 = (char *)__src;
    uint64_t v20 = *(void *)(a2 - 32);
    uint64_t v24 = v47;
    uint64_t v25 = v48;
    if (!v20)
    {
      uint64_t v5 = v38;
      int v6 = v37;
      uint64_t v7 = v36;
      goto LABEL_48;
    }
    uint64_t v5 = v38;
    int v6 = v37;
    uint64_t v7 = v36;
    if (*(unsigned char *)(v20 + 16)) {
      goto LABEL_47;
    }
  }
  if (*(void *)(v20 + 24) != *(void *)(a2 + 72))
  {
LABEL_47:
    uint64_t v20 = 0;
    goto LABEL_48;
  }
  if ((*(unsigned char *)(v20 + 33) & 0x20) != 0) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = 0;
  }
LABEL_48:
  llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)v39, v6, v7, v24, v25, v26, v23, v14, v20, 0, 1);
  uint64_t v33 = (*(uint64_t (**)(void))(***(void ***)(v5 + 616) + 952))();
  if (v42 != &v43) {
    free(v42);
  }
  if (v40 != &v41) {
    free(v40);
  }
  if (__src != v46) {
    free(__src);
  }
  if (v47 != v49) {
    free(v47);
  }
  return v33;
}

void llvm::InnerLoopVectorizer::truncateToMinimalBitwidths(llvm::InnerLoopVectorizer *this, llvm::VPTransformState *a2)
{
  v99[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 50);
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v80 = *(void *)(v2 + 40);
  if (v3 == v80) {
    return;
  }
  uint64_t v81 = (char *)a2 + 32;
  do
  {
    uint64_t v6 = *((void *)a2 + 40);
    v85[0] = *(void **)v3;
    uint64_t v7 = (llvm::VPValue *)sub_1CD4F8350((uint64_t *)(v6 + 184), v85)[1];
    if (*((void *)a2 + 4) + 40 * *((unsigned int *)a2 + 12) != sub_1CD31D9AC((uint64_t)v81, (uint64_t)v7)
      && *((_DWORD *)this + 24))
    {
      for (unint64_t i = 0; i < *((unsigned int *)this + 24); ++i)
      {
        BOOL v9 = llvm::VPTransformState::get(a2, v7, i);
        uint64_t v10 = (uint64_t)v9;
        if (!*((void *)v9 + 1) || *((unsigned __int8 *)v9 + 16) < 0x1Cu) {
          continue;
        }
        int v11 = *(llvm::IntegerType ***)v9;
        uint64_t v12 = (uint64_t **)llvm::IntegerType::get(**(llvm::IntegerType ***)v9, (llvm::LLVMContext *)*(unsigned int *)(v3 + 8));
        uint64_t v13 = v12;
        unint64_t v14 = (llvm::Type *)*((unsigned int *)v11 + 8);
        if (*((unsigned char *)v11 + 8) == 19) {
          llvm::ScalableVectorType::get(v12, v14);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, v14);
        }
        uint64_t v16 = (uint64_t)v15;
        if (v15 == v11) {
          continue;
        }
        uint64_t v17 = 0;
        uint64_t v18 = **(void **)v10;
        v85[0] = v86;
        v85[1] = (void *)0x200000000;
        uint64_t v89 = v18;
        unsigned int v90 = &v98;
        uint64_t v91 = v99;
        uint64_t v92 = 0;
        int v93 = 0;
        __int16 v94 = 512;
        char v95 = 7;
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        unint64_t v98 = &unk_1F2616E88;
        v99[0] = &unk_1F2617008;
        uint64_t v87 = *(void *)(v10 + 40);
        uint64_t v88 = v10 + 24;
        uint64_t v19 = *(unsigned __int8 **)(v10 + 48);
        uint64_t v84 = v19;
        if (v19)
        {
          llvm::MetadataTracking::track((uint64_t)&v84, v19, 2);
          uint64_t v17 = (uint64_t)v84;
        }
        sub_1CB8461A4((uint64_t)v85, 0, v17);
        if (v84)
        {
          int v39 = *v84;
          if ((v39 - 4) > 0x1E)
          {
            if ((v39 - 3) >= 0xFFFFFFFE) {
              uint64_t v68 = v84;
            }
            else {
              uint64_t v68 = 0;
            }
            if ((v39 - 3) < 0xFFFFFFFE)
            {
              if (v39 == 3) {
                *((void *)v84 + 1) = 0;
              }
              goto LABEL_17;
            }
            unint64_t v41 = (unint64_t)(v68 + 8);
          }
          else
          {
            if ((v84[1] & 0x7F) != 2 && !*((_DWORD *)v84 + 3)) {
              goto LABEL_17;
            }
            uint64_t v40 = *((void *)v84 + 2);
            if ((v40 & 4) == 0) {
              goto LABEL_17;
            }
            unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
            if (!v41) {
              goto LABEL_17;
            }
          }
          v82[0] = &v84;
          sub_1CC5FA668(v41 + 16, v82);
        }
LABEL_17:
        unsigned int v20 = *(unsigned __int8 *)(v10 + 16);
        uint64_t v21 = v20 - 28;
        if (v20 >= 0x1C && v20 - 41 <= 0x11)
        {
          int64_t v32 = *(unsigned __int8 **)(v10 - 64);
          if (!v32 || v32[16] != 67 || (uint64_t v33 = (llvm::Instruction *)*((void *)v32 - 4), *(void *)v33 != v16))
          {
            __int16 v83 = 257;
            uint64_t v33 = sub_1CB844B8C((uint64_t)v85, v32, v16, (uint64_t)v82);
          }
          uint64_t v34 = *(unsigned __int8 **)(v10 - 32);
          if (!v34 || v34[16] != 67 || (uint64_t v35 = (llvm::Instruction *)*((void *)v34 - 4), *(void *)v35 != v16))
          {
            __int16 v83 = 257;
            uint64_t v35 = sub_1CB844B8C((uint64_t)v85, v34, v16, (uint64_t)v82);
          }
          __int16 v83 = 257;
          uint64_t v36 = sub_1CB844E98((uint64_t)v85, v21, (uint64_t)v33, (uint64_t)v35, (uint64_t)v82, 0);
          uint64_t v37 = (uint64_t)v36;
          unsigned int v38 = *(unsigned __int8 *)(v10 + 16);
          if (v38 < 0x1C)
          {
            if (v38 == 5)
            {
              unsigned int v69 = *(unsigned __int16 *)(v10 + 18);
              if (v69 <= 0x1B && ((1 << v69) & 0xC180000) != 0) {
                goto LABEL_108;
              }
            }
          }
          else
          {
            if (v38 > 0x37 || ((1 << v38) & 0xC1800000000000) == 0) {
              goto LABEL_42;
            }
LABEL_108:
            int v70 = *((unsigned __int8 *)v36 + 16);
            if ((v70 - 54) < 2 || (v70 - 47) <= 1) {
              *((unsigned char *)v36 + 17) = *((unsigned char *)v36 + 17) & 0xFD | *(unsigned char *)(v10 + 17) & 2;
            }
          }
LABEL_42:
          if (sub_1CB845E74(v10) && sub_1CB845E74(v37)) {
            *(unsigned char *)(v37 + 17) = *(unsigned char *)(v10 + 17) & 0xFE | *(unsigned char *)(v37 + 17) & 1;
          }
          if (*(unsigned char *)(v10 + 16) == 62 && v37 && *(unsigned char *)(v37 + 16) == 62) {
            *(unsigned char *)(v37 + 17) |= *(unsigned char *)(v10 + 17) & 2;
          }
LABEL_93:
          llvm::Value::takeName((int32x2_t ****)v37, (llvm::Value *)v10);
          __int16 v83 = 257;
          uint64_t v67 = sub_1CB844B8C((uint64_t)v85, (unsigned __int8 *)v37, (uint64_t)v11, (uint64_t)v82);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, v67, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        if (v20 == 85)
        {
          int v79 = *(llvm::Value **)(v10 - 96);
          uint64_t v47 = *(unsigned __int8 **)(v10 - 64);
          if (!v47 || v47[16] != 67 || (uint64_t v48 = (llvm::Instruction *)*((void *)v47 - 4), *(void *)v48 != v16))
          {
            __int16 v83 = 257;
            uint64_t v48 = sub_1CB844B8C((uint64_t)v85, v47, v16, (uint64_t)v82);
          }
          unsigned int v49 = *(unsigned __int8 **)(v10 - 32);
          if (!v49 || v49[16] != 67 || (uint64_t v50 = (llvm::Instruction *)*((void *)v49 - 4), *(void *)v50 != v16))
          {
            __int16 v83 = 257;
            uint64_t v50 = sub_1CB844B8C((uint64_t)v85, v49, v16, (uint64_t)v82);
          }
          __int16 v83 = 257;
          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v85, v79, v48, v50, (const llvm::Twine *)v82, 0);
          goto LABEL_92;
        }
        if (v20 == 81)
        {
          __int16 v42 = *(_WORD *)(v10 + 18);
          uint64_t v43 = *(unsigned __int8 **)(v10 - 64);
          if (!v43 || v43[16] != 67 || (uint64_t v44 = (llvm::Instruction *)*((void *)v43 - 4), *(void *)v44 != v16))
          {
            __int16 v83 = 257;
            uint64_t v44 = sub_1CB844B8C((uint64_t)v85, v43, v16, (uint64_t)v82);
          }
          uint64_t v45 = *(unsigned __int8 **)(v10 - 32);
          if (!v45 || v45[16] != 67 || (int v46 = (llvm::Instruction *)*((void *)v45 - 4), *(void *)v46 != v16))
          {
            __int16 v83 = 257;
            int v46 = sub_1CB844B8C((uint64_t)v85, v45, v16, (uint64_t)v82);
          }
          __int16 v83 = 257;
          Select = sub_1CB845F20((uint64_t)v85, v42 & 0x3F, v44, (uint64_t)v46, (uint64_t)v82);
          goto LABEL_92;
        }
        if (v20 >= 0x1C && v20 - 66 <= 0xC)
        {
          if (v20 == 66)
          {
            int v51 = *(unsigned __int8 **)(v10 - 32);
            if (v51)
            {
              if (v51[16] == 67)
              {
                uint64_t v37 = *((void *)v51 - 4);
                if (*(void *)v37 == v16) {
                  goto LABEL_93;
                }
              }
            }
            __int16 v83 = 257;
            uint64_t v52 = v16;
LABEL_87:
            Select = sub_1CB844B8C((uint64_t)v85, v51, v52, (uint64_t)v82);
          }
          else
          {
            if (v20 == 67)
            {
              int v51 = *(unsigned __int8 **)(v10 - 32);
              if (*((_DWORD *)v11[3] + 2) >> 8 >= *(_DWORD *)(*(void *)(v16 + 24) + 8) >> 8) {
                uint64_t v52 = v16;
              }
              else {
                uint64_t v52 = (uint64_t)v11;
              }
              __int16 v83 = 257;
              goto LABEL_87;
            }
            uint64_t v65 = *(unsigned __int8 **)(v10 - 32);
            if (*((_DWORD *)v11[3] + 2) >> 8 >= *(_DWORD *)(*(void *)(v16 + 24) + 8) >> 8) {
              uint64_t v66 = v16;
            }
            else {
              uint64_t v66 = (uint64_t)v11;
            }
            __int16 v83 = 257;
            Select = sub_1CB845504((uint64_t)v85, v65, v66, (uint64_t)v82);
          }
LABEL_92:
          uint64_t v37 = (uint64_t)Select;
          goto LABEL_93;
        }
        switch(v20)
        {
          case 'Y':
            uint64_t v60 = *(unsigned __int8 **)(v10 - 64);
            uint64_t v61 = (llvm::Type *)*(unsigned int *)(*(void *)v60 + 32);
            if (*(unsigned char *)(*(void *)v60 + 8) == 19) {
              llvm::ScalableVectorType::get(v13, v61);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v13, v61);
            }
            __int16 v83 = 257;
            uint64_t v63 = (unsigned __int8 *)sub_1CB844B8C((uint64_t)v85, v60, v62, (uint64_t)v82);
            uint64_t v64 = *(unsigned __int8 **)v10;
            __int16 v83 = 257;
            Select = sub_1CB8445F4((uint64_t)v85, v63, v64, (uint64_t)v82);
            goto LABEL_92;
          case 'Z':
            uint64_t v53 = *(unsigned __int8 **)(v10 - 96);
            uint64_t v54 = (llvm::Type *)*(unsigned int *)(*(void *)v53 + 32);
            if (*(unsigned char *)(*(void *)v53 + 8) == 19) {
              llvm::ScalableVectorType::get(v13, v54);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v13, v54);
            }
            __int16 v83 = 257;
            int v56 = (unsigned __int8 *)sub_1CB844B8C((uint64_t)v85, v53, v55, (uint64_t)v82);
            BOOL v57 = *(unsigned __int8 **)(v10 - 64);
            __int16 v83 = 257;
            uint64_t v58 = (unsigned __int8 *)sub_1CB844B8C((uint64_t)v85, v57, (uint64_t)v13, (uint64_t)v82);
            uint64_t v59 = *(unsigned __int8 **)(v10 - 32);
            __int16 v83 = 257;
            Select = sub_1CB84478C((uint64_t)v85, v56, v58, v59, (uint64_t)v82);
            goto LABEL_92;
          case '[':
            uint64_t v22 = *(unsigned __int8 **)(v10 - 64);
            uint64_t v23 = (llvm::Type *)*(unsigned int *)(*(void *)v22 + 32);
            if (*(unsigned char *)(*(void *)v22 + 8) == 19) {
              llvm::ScalableVectorType::get(v13, v23);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v13, v23);
            }
            __int16 v83 = 257;
            uint64_t v78 = sub_1CB844B8C((uint64_t)v85, v22, v24, (uint64_t)v82);
            uint64_t v25 = *(unsigned __int8 **)(v10 - 32);
            uint64_t v26 = (llvm::Type *)*(unsigned int *)(*(void *)v25 + 32);
            if (*(unsigned char *)(*(void *)v25 + 8) == 19) {
              llvm::ScalableVectorType::get(v13, v26);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v13, v26);
            }
            __int16 v83 = 257;
            uint64_t v28 = sub_1CB844B8C((uint64_t)v85, v25, v27, (uint64_t)v82);
            unint64_t v29 = *(void **)(v10 + 64);
            int v30 = (llvm::Type *)*(unsigned int *)(v10 + 72);
            __int16 v83 = 257;
            Select = sub_1CB935A74((uint64_t)v85, (uint64_t)v78, (uint64_t)v28, v29, v30, (uint64_t)v82);
            goto LABEL_92;
        }
        if (v85[0] != v86) {
          free(v85[0]);
        }
      }
    }
    v3 += 16;
  }
  while (v3 != v80);
  uint64_t v71 = *((void *)this + 50);
  uint64_t v72 = *(void ***)(v71 + 32);
  for (int j = *(void ***)(v71 + 40); v72 != j; v72 += 2)
  {
    uint64_t v74 = *((void *)a2 + 40);
    v85[0] = *v72;
    char v75 = (llvm::VPValue *)sub_1CD4F8350((uint64_t *)(v74 + 184), v85)[1];
    if (*((void *)a2 + 4) + 40 * *((unsigned int *)a2 + 12) != sub_1CD31D9AC((uint64_t)v81, (uint64_t)v75)
      && *((_DWORD *)this + 24))
    {
      unint64_t v76 = 0;
      do
      {
        unint64_t v77 = llvm::VPTransformState::get(a2, v75, v76);
        if (v77 && *((unsigned char *)v77 + 16) == 67 && !*((void *)v77 + 1)) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        ++v76;
      }
      while (v76 < *((unsigned int *)this + 24));
    }
  }
}

void llvm::InnerLoopVectorizer::fixCrossIterationPHIs(llvm::InnerLoopVectorizer *this, llvm::VPTransformState *a2)
{
  uint64_t v4 = **((void **)a2 + 40);
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 8) == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    if (*(_DWORD *)(v4 + 80) != 1)
    {
      uint64_t v4 = 0;
      goto LABEL_13;
    }
    uint64_t v4 = **(void **)(v4 + 72);
    if (*(unsigned char *)(v4 + 8) != 1) {
      goto LABEL_13;
    }
  }
  do
  {
    uint64_t v4 = *(void *)(v4 + 200);
    if (v4) {
      BOOL v6 = *(unsigned char *)(v4 + 8) == 1;
    }
    else {
      BOOL v6 = 0;
    }
  }
  while (v6);
LABEL_13:
  uint64_t v7 = v4 + 200;
  uint64_t v8 = *(void *)(v4 + 208);
  if (v8 != v4 + 200)
  {
    uint64_t v9 = *(void *)(v4 + 208);
    while (1)
    {
      uint64_t v10 = v9 - 24;
      if (!v9) {
        uint64_t v10 = 0;
      }
      if (*(unsigned __int8 *)(v10 + 8) - 13 > 7) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      if (v9 == v7)
      {
        uint64_t v9 = v7;
        break;
      }
    }
    while (v8 != v9)
    {
      if (v8) {
        uint64_t v11 = v8 - 24;
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = *(unsigned __int8 *)(v11 + 8);
      if (v8 && v12 == 20) {
        llvm::InnerLoopVectorizer::fixReduction((uint64_t)this, v11, (uint64_t)a2);
      }
      if (v8)
      {
        if (v12 == 15) {
          llvm::InnerLoopVectorizer::fixFixedOrderRecurrence((uint64_t)this, v11, a2);
        }
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
  }
}

uint64_t llvm::InnerLoopVectorizer::sinkScalarOperands(llvm::InnerLoopVectorizer *this, llvm::Instruction *a2)
{
  v65[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 5);
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  int v4 = *((_DWORD *)v3 + 4);
  if (!v4)
  {
LABEL_7:
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = *v3;
  unsigned int v6 = v4 - 1;
  uint64_t v7 = ((v2 >> 4) ^ (v2 >> 9)) & (v4 - 1);
  uint64_t v8 = *(void *)(v5 + 16 * v7);
  if (v2 != v8)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v7 + v9++;
      uint64_t v7 = v10 & v6;
      uint64_t v8 = *(void *)(v5 + 16 * v7);
      if (v2 == v8) {
        goto LABEL_6;
      }
    }
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v11 = *(void *)(v5 + 16 * v7 + 8);
LABEL_8:
  int v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0)
  {
    unint64_t v14 = (uint64_t *)*((void *)a2 - 1);
    uint64_t v13 = v12 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v13 = v12 & 0x7FFFFFF;
    unint64_t v14 = (uint64_t *)((char *)a2 - 32 * v13);
  }
  v58[0] = 0;
  v58[1] = 0;
  int v59 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  long long __p = 0;
  sub_1CD7782B0((uint64_t)v58, v14, &v14[4 * v13]);
  uint64_t v63 = v65;
  uint64_t v64 = 0x800000000;
  uint64_t v15 = v2 + 40;
  do
  {
    sub_1CD8CBFC0((uint64_t)v58, (uint64_t *)v63, (uint64_t *)v63 + v64);
    LODWORD(v64) = 0;
    uint64_t v16 = __p;
    uint64_t v17 = v61;
    if (__p == v61) {
      break;
    }
    char v18 = 0;
    do
    {
      uint64_t v19 = *(v17 - 1);
      sub_1CD58C650((uint64_t)v58);
      unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 != 83 && v20 >= 0x1C && v19 != 0)
      {
        uint64_t v23 = *(void *)(v19 + 40);
        uint64_t v25 = *(void *)(v11 + 56);
        uint64_t v24 = *(void *)(v11 + 64);
        if (v24 == v25)
        {
          uint64_t v26 = *(unsigned int *)(v11 + 76);
          uint64_t v27 = (void *)(v24 + 8 * v26);
          if (v26)
          {
            uint64_t v28 = 0;
            uint64_t v29 = 8 * v26;
            while (*(void *)(v24 + v28) != v23)
            {
              v28 += 8;
              if (v29 == v28) {
                goto LABEL_39;
              }
            }
            uint64_t v27 = (void *)(v24 + v28);
          }
LABEL_39:
          uint64_t v25 = *(void *)(v11 + 64);
        }
        else
        {
          uint64_t v30 = *(unsigned int *)(v11 + 72);
          int v31 = v30 - 1;
          unsigned int v32 = (v30 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          uint64_t v27 = (void *)(v24 + 8 * v32);
          uint64_t v33 = *v27;
          if (*v27 == -1)
          {
            uint64_t v34 = 0;
LABEL_61:
            if (v34) {
              uint64_t v27 = v34;
            }
            if (*v27 != v23) {
              uint64_t v27 = (void *)(v24 + 8 * v30);
            }
          }
          else
          {
            uint64_t v34 = 0;
            int v35 = 1;
            while (v33 != v23)
            {
              if (v34) {
                BOOL v36 = 0;
              }
              else {
                BOOL v36 = v33 == -2;
              }
              if (v36) {
                uint64_t v34 = v27;
              }
              unsigned int v37 = v32 + v35++;
              unsigned int v32 = v37 & v31;
              uint64_t v27 = (void *)(v24 + 8 * (v37 & v31));
              uint64_t v33 = *v27;
              if (*v27 == -1) {
                goto LABEL_61;
              }
            }
          }
        }
        if (v24 == v25) {
          unsigned int v38 = (unsigned int *)(v11 + 76);
        }
        else {
          unsigned int v38 = (unsigned int *)(v11 + 72);
        }
        if (v27 != (void *)(v24 + 8 * *v38)
          && (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v19) & 1) == 0)
        {
          if (*(void *)(v19 + 40) == v2)
          {
            int v54 = *(_DWORD *)(v19 + 20);
            if ((v54 & 0x40000000) != 0)
            {
              int v56 = *(uint64_t **)(v19 - 8);
              uint64_t v55 = v54 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v55 = v54 & 0x7FFFFFF;
              int v56 = (uint64_t *)(v19 - 32 * v55);
            }
            sub_1CD7782B0((uint64_t)v58, v56, &v56[4 * v55]);
          }
          else
          {
            uint64_t v39 = *(void *)(v19 + 8);
            if (v39)
            {
              while (1)
              {
                uint64_t v40 = *(void *)(v39 + 24);
                unint64_t v41 = (void *)(v40 + 40);
                if (v40 && *(unsigned char *)(v40 + 16) == 83)
                {
                  int v42 = *(_DWORD *)(v40 + 20);
                  if ((v42 & 0x40000000) != 0) {
                    uint64_t v43 = *(void *)(v40 - 8);
                  }
                  else {
                    uint64_t v43 = v40 - 32 * (v42 & 0x7FFFFFF);
                  }
                  unint64_t v41 = (void *)(v43
                                 + 32 * *(unsigned int *)(v40 + 60)
                                 + 8 * ((unint64_t)(v39 - v43) >> 5));
                }
                if (*v41 != v2) {
                  break;
                }
                uint64_t v39 = *(void *)(v39 + 8);
                if (!v39) {
                  goto LABEL_65;
                }
              }
              if (v64 >= (unint64_t)HIDWORD(v64)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v63 + v64) = v19;
              LODWORD(v64) = v64 + 1;
            }
            else
            {
LABEL_65:
              uint64_t v44 = v2 + 40;
              if (*(void *)(v2 + 48) != v15)
              {
                uint64_t v44 = *(void *)(v2 + 48);
                while (1)
                {
                  uint64_t v45 = v44 - 24;
                  if (!v44) {
                    uint64_t v45 = 0;
                  }
                  if (*(unsigned char *)(v45 + 16) != 83) {
                    break;
                  }
                  uint64_t v44 = *(void *)(v44 + 8);
                  if (v44 == v15)
                  {
                    uint64_t v44 = v2 + 40;
                    goto LABEL_77;
                  }
                }
                unsigned int v46 = *(unsigned __int8 *)(v44 - 8) - 38;
                BOOL v47 = v46 > 0x38;
                uint64_t v48 = (1 << v46) & 0x100060000000001;
                if (!v47 && v48 != 0) {
                  uint64_t v44 = *(void *)(v44 + 8);
                }
              }
LABEL_77:
              if (v44) {
                uint64_t v50 = (llvm::Instruction *)(v44 - 24);
              }
              else {
                uint64_t v50 = 0;
              }
              llvm::Instruction::moveBefore((llvm::Instruction *)v19, v50);
              int v51 = *(_DWORD *)(v19 + 20);
              if ((v51 & 0x40000000) != 0)
              {
                uint64_t v53 = *(uint64_t **)(v19 - 8);
                uint64_t v52 = v51 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v52 = v51 & 0x7FFFFFF;
                uint64_t v53 = (uint64_t *)(v19 - 32 * v52);
              }
              sub_1CD7782B0((uint64_t)v58, v53, &v53[4 * v52]);
              char v18 = 1;
            }
          }
        }
      }
      uint64_t v16 = __p;
      uint64_t v17 = v61;
    }
    while (__p != v61);
  }
  while ((v18 & 1) != 0);
  if (v63 != v65)
  {
    free(v63);
    uint64_t v16 = __p;
  }
  if (v16)
  {
    uint64_t v61 = v16;
    operator delete(v16);
  }
  return MEMORY[0x1D25D9CD0](v58[0], 8);
}

void llvm::InnerLoopVectorizer::fixReduction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v256[2] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(uint64_t **)(a2 + 136);
  uint64_t v7 = *(void *)(a2 + 152);
  unsigned int v241 = *(_DWORD *)(v7 + 32);
  uint64_t v247 = 6;
  unsigned int v248 = 0;
  uint64_t v8 = *(unsigned __int8 **)(v7 + 16);
  size_t v249 = v8;
  if (v8 != (unsigned __int8 *)-8192 && v8 != (unsigned __int8 *)-4096 && v8 != 0)
  {
    unint64_t v10 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v248 = *(unint64_t **)v10;
    *(void *)unint64_t v10 = &v247;
    uint64_t v247 = v10 | 6;
    if (v248) {
      *unsigned int v248 = *v248 & 7 | (unint64_t)&v248;
    }
    uint64_t v8 = v249;
  }
  uint64_t v11 = *(void *)(v7 + 24);
  llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, (uint64_t)v8, 0, 0);
  int v12 = *(llvm::VPValue **)(*(void *)(a2 + 48) + 8);
  uint64_t v13 = *(void *)llvm::VPTransformState::get((llvm::VPTransformState *)a3, v12, 0);
  llvm::InnerLoopVectorizer::clearReductionWrapFlags((llvm::InnerLoopVectorizer *)a1, (const llvm::RecurrenceDescriptor *)v7, (llvm::VPTransformState *)a3);
  int v242 = (llvm *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 256);
  uint64_t v15 = v14 + 40;
  for (uint64_t i = *(void *)(v14 + 48); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v15) {
      goto LABEL_21;
    }
    uint64_t v17 = i - 24;
    if (!i) {
      uint64_t v17 = 0;
    }
    if (*(unsigned char *)(v17 + 16) != 83) {
      break;
    }
  }
  unsigned int v18 = *(unsigned __int8 *)(i - 8) - 38;
  BOOL v19 = v18 > 0x38;
  uint64_t v20 = (1 << v18) & 0x100060000000001;
  if (v19 || v20 == 0) {
    uint64_t v15 = i;
  }
  else {
    uint64_t v15 = *(void *)(i + 8);
  }
LABEL_21:
  uint64_t v22 = 0;
  if (v15) {
    uint64_t v23 = v15 - 24;
  }
  else {
    uint64_t v23 = 0;
  }
  *(void *)(a1 + 152) = *(void *)(v23 + 40);
  *(void *)(a1 + 160) = v23 + 24;
  uint64_t v24 = *(unsigned __int8 **)(v23 + 48);
  v244[0] = v24;
  if (v24)
  {
    llvm::MetadataTracking::track((uint64_t)v244, v24, 2);
    uint64_t v22 = v244[0];
  }
  sub_1CB8461A4((uint64_t)v242, 0, v22);
  if (!v244[0])
  {
LABEL_27:
    uint64_t v243 = v7;
    llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, v11, 0, 0);
    uint64_t v25 = 0;
    uint64_t v240 = *v6;
    uint64_t v26 = *(void *)(*(void *)(a2 + 88) + 40);
    if (v26)
    {
      if (*(unsigned char *)(v26 + 216))
      {
        uint64_t v25 = *(void *)(v26 + 40);
        if (!v25) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(*(void *)(a2 + 88) + 40);
      }
      if (*(unsigned char *)(v25 + 8) == 1)
      {
        do
        {
          uint64_t v25 = *(void *)(v25 + 208);
          if (v25) {
            BOOL v27 = *(unsigned char *)(v25 + 8) == 1;
          }
          else {
            BOOL v27 = 0;
          }
        }
        while (v27);
      }
    }
LABEL_36:
    unsigned int v238 = (llvm::Value *)v6;
    uint64_t v239 = a2;
    uint64_t v230 = v11;
    uint64_t v246 = v25;
    uint64_t v28 = sub_1CD645138((_DWORD *)(a3 + 104), &v246)[1];
    if (*(unsigned char *)(*(void *)(a1 + 400) + 124) && !*(unsigned char *)(a2 + 160) && *(_DWORD *)(a1 + 96))
    {
      unint64_t v29 = 0;
      uint64_t v30 = (llvm::VPValue *)(a2 + 96);
      do
      {
        uint64_t v31 = *((void *)llvm::VPTransformState::get((llvm::VPTransformState *)a3, v12, v29) + 1);
        if (v31)
        {
          uint64_t v32 = 0;
          do
          {
            if (*(unsigned char *)(*(void *)(v31 + 24) + 16) == 85) {
              uint64_t v32 = *(void *)(v31 + 24);
            }
            uint64_t v31 = *(void *)(v31 + 8);
          }
          while (v31);
        }
        else
        {
          uint64_t v32 = 0;
        }
        v244[0] = v12;
        uint64_t v250 = 0;
        int v33 = sub_1CD7D38CC((uint64_t *)(a3 + 32), v244, &v250);
        uint64_t v34 = v250;
        if (!v33) {
          uint64_t v34 = (const char *)(*(void *)(a3 + 32) + 40 * *(unsigned int *)(a3 + 48));
        }
        *(void *)(*((void *)v34 + 1) + 8 * v29) = v32;
        if (byte_1EA61E3E8
          || (uint64_t v35 = v28,
              BOOL v36 = *(uint64_t **)(a1 + 56),
              uint64_t Opcode = llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v243 + 32)),
              uint64_t v38 = *v36,
              uint64_t v28 = v35,
              (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v38 + 1144))(v38, Opcode, v240, 0)))
        {
          uint64_t v39 = llvm::VPTransformState::get((llvm::VPTransformState *)a3, v30, v29);
          sub_1CC45E7A4((uint64_t)v39, v28, v32);
        }
        ++v29;
      }
      while (v29 < *(unsigned int *)(a1 + 96));
    }
    unsigned int v40 = *(_DWORD *)(a1 + 88);
    if (*(_DWORD *)(a1 + 92) == 1)
    {
      uint64_t v41 = v243;
      uint64_t v42 = v239;
      if (!v40) {
        goto LABEL_171;
      }
    }
    else
    {
      uint64_t v41 = v243;
      uint64_t v42 = v239;
      if (v40 < 2) {
        goto LABEL_171;
      }
    }
    uint64_t v43 = *(uint64_t ***)(v41 + 48);
    if ((uint64_t **)v240 == v43) {
      goto LABEL_171;
    }
    uint64_t v44 = *(llvm::Type **)(a1 + 88);
    if ((unint64_t)v44 >> 32 == 1) {
      llvm::ScalableVectorType::get(v43, v44);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v43, v44);
    }
    uint64_t v46 = v45;
    uint64_t v47 = 0;
    uint64_t v48 = *(void *)(v28 + 40);
    if (v48) {
      uint64_t v49 = v48 - 24;
    }
    else {
      uint64_t v49 = 0;
    }
    if (*(unsigned __int8 *)(v49 + 16) - 29 >= 0xB) {
      uint64_t v49 = 0;
    }
    *(void *)(a1 + 152) = *(void *)(v49 + 40);
    *(void *)(a1 + 160) = v49 + 24;
    uint64_t v50 = *(unsigned __int8 **)(v49 + 48);
    v244[0] = v50;
    if (v50)
    {
      llvm::MetadataTracking::track((uint64_t)v244, v50, 2);
      uint64_t v47 = v244[0];
    }
    sub_1CB8461A4((uint64_t)v242, 0, v47);
    if (v244[0])
    {
      int v79 = *(unsigned __int8 *)v244[0];
      if ((v79 - 4) > 0x1E)
      {
        if ((v79 - 3) >= 0xFFFFFFFE) {
          uint64_t v82 = v244[0];
        }
        else {
          uint64_t v82 = 0;
        }
        if ((v79 - 3) < 0xFFFFFFFE)
        {
          if (v79 == 3) {
            *(void *)(v244[0] + 8) = 0;
          }
          goto LABEL_67;
        }
        unint64_t v81 = v82 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v244[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v244[0] + 12)) {
          goto LABEL_67;
        }
        uint64_t v80 = *(void *)(v244[0] + 16);
        if ((v80 & 4) == 0) {
          goto LABEL_67;
        }
        unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (!v81) {
          goto LABEL_67;
        }
      }
      uint64_t v250 = (const char *)v244;
      sub_1CC5FA668(v81 + 16, &v250);
    }
LABEL_67:
    uint64_t v51 = *(unsigned int *)(a1 + 96);
    uint64_t v253 = v256;
    int v255 = 2;
    if (v51 > 2)
    {
      int v254 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v51)
    {
      bzero(v256, 8 * v51);
      int v254 = v51;
      unint64_t v52 = 0;
      do
      {
        uint64_t v53 = llvm::VPTransformState::get((llvm::VPTransformState *)a3, v12, v52);
        v253[v52] = v53;
        int v54 = (unsigned __int8 *)v253[v52];
        __int16 v245 = 257;
        if (*(void *)v54 != v46)
        {
          if (v54[16] <= 0x14u)
          {
            int v54 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 176) + 224))(*(void *)(a1 + 176), 38, v54, v46);
            if (v54) {
              BOOL v58 = v54[16] >= 0x1Cu;
            }
            else {
              BOOL v58 = 0;
            }
            if (v58)
            {
              (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184)
                                                                                          + 16))(*(void *)(a1 + 184), v54, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
              uint64_t v70 = *(unsigned int *)(a1 + 112);
              if (v70)
              {
                uint64_t v71 = *(void *)(a1 + 104);
                uint64_t v72 = v71 + 16 * v70;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v54, *(_DWORD *)v71, *(llvm::MDNode **)(v71 + 8));
                  v71 += 16;
                }
                while (v71 != v72);
              }
            }
          }
          else
          {
            __int16 v252 = 257;
            int v54 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v54, v46, &v250, 0);
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v54, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
            uint64_t v55 = *(unsigned int *)(a1 + 112);
            if (v55)
            {
              uint64_t v56 = *(void *)(a1 + 104);
              uint64_t v57 = v56 + 16 * v55;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v54, *(_DWORD *)v56, *(llvm::MDNode **)(v56 + 8));
                v56 += 16;
              }
              while (v56 != v57);
            }
          }
        }
        if (*(unsigned char *)(v243 + 56))
        {
          __int16 v245 = 257;
          int v59 = v54;
          if (*(void *)v54 != v13)
          {
            if (v54[16] <= 0x14u)
            {
              int v59 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 176) + 224))(*(void *)(a1 + 176), 40, v54, v13);
              if (v59) {
                BOOL v64 = v59[16] >= 0x1Cu;
              }
              else {
                BOOL v64 = 0;
              }
              if (v64)
              {
                (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184)
                                                                                            + 16))(*(void *)(a1 + 184), v59, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
                uint64_t v65 = *(unsigned int *)(a1 + 112);
                if (v65)
                {
                  uint64_t v66 = *(void *)(a1 + 104);
                  uint64_t v233 = v66 + 16 * v65;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v59, *(_DWORD *)v66, *(llvm::MDNode **)(v66 + 8));
                    v66 += 16;
                  }
                  while (v66 != v233);
                }
              }
            }
            else
            {
              __int16 v252 = 257;
              int v59 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v54, v13, &v250, 0);
              (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184)
                                                                                          + 16))(*(void *)(a1 + 184), v59, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
              uint64_t v60 = *(unsigned int *)(a1 + 112);
              if (v60)
              {
                uint64_t v61 = *(void *)(a1 + 104);
                uint64_t v231 = v61 + 16 * v60;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v59, *(_DWORD *)v61, *(llvm::MDNode **)(v61 + 8));
                  v61 += 16;
                }
                while (v61 != v231);
              }
            }
          }
        }
        else
        {
          __int16 v245 = 257;
          int v59 = v54;
          if (*(void *)v54 != v13)
          {
            if (v54[16] <= 0x14u)
            {
              int v59 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 176) + 224))(*(void *)(a1 + 176), 39, v54, v13);
              if (v59) {
                BOOL v67 = v59[16] >= 0x1Cu;
              }
              else {
                BOOL v67 = 0;
              }
              if (v67)
              {
                (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184)
                                                                                            + 16))(*(void *)(a1 + 184), v59, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
                uint64_t v73 = *(unsigned int *)(a1 + 112);
                if (v73)
                {
                  uint64_t v74 = *(void *)(a1 + 104);
                  uint64_t v234 = v74 + 16 * v73;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v59, *(_DWORD *)v74, *(llvm::MDNode **)(v74 + 8));
                    v74 += 16;
                  }
                  while (v74 != v234);
                }
              }
            }
            else
            {
              __int16 v252 = 257;
              int v59 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v54, v13, &v250, 0);
              (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184)
                                                                                          + 16))(*(void *)(a1 + 184), v59, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
              uint64_t v62 = *(unsigned int *)(a1 + 112);
              if (v62)
              {
                uint64_t v63 = *(void *)(a1 + 104);
                uint64_t v232 = v63 + 16 * v62;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v59, *(_DWORD *)v63, *(llvm::MDNode **)(v63 + 8));
                  v63 += 16;
                }
                while (v63 != v232);
              }
            }
          }
        }
        uint64_t v68 = *(void *)(v253[v52] + 8);
        while (v68)
        {
          unsigned int v69 = *(llvm::User **)(v68 + 24);
          uint64_t v68 = *(void *)(v68 + 8);
          if (v69 != (llvm::User *)v54)
          {
            llvm::User::replaceUsesOfWith(v69, (llvm::Value *)v253[v52], (llvm::Value *)v59);
            v253[v52] = v59;
          }
        }
        ++v52;
      }
      while (v52 < *(unsigned int *)(a1 + 96));
    }
    else
    {
      int v254 = 0;
    }
    uint64_t v83 = *(void *)(a1 + 256);
    uint64_t v84 = v83 + 40;
    for (uint64_t j = *(void *)(v83 + 48); ; uint64_t j = *(void *)(j + 8))
    {
      if (j == v84) {
        goto LABEL_161;
      }
      uint64_t v86 = j - 24;
      if (!j) {
        uint64_t v86 = 0;
      }
      if (*(unsigned char *)(v86 + 16) != 83) {
        break;
      }
    }
    unsigned int v87 = *(unsigned __int8 *)(j - 8) - 38;
    BOOL v19 = v87 > 0x38;
    uint64_t v88 = (1 << v87) & 0x100060000000001;
    if (v19 || v88 == 0) {
      uint64_t v84 = j;
    }
    else {
      uint64_t v84 = *(void *)(j + 8);
    }
LABEL_161:
    uint64_t v90 = 0;
    if (v84) {
      uint64_t v91 = v84 - 24;
    }
    else {
      uint64_t v91 = 0;
    }
    *(void *)(a1 + 152) = *(void *)(v91 + 40);
    *(void *)(a1 + 160) = v91 + 24;
    uint64_t v92 = *(unsigned __int8 **)(v91 + 48);
    v244[0] = v92;
    if (v92)
    {
      llvm::MetadataTracking::track((uint64_t)v244, v92, 2);
      uint64_t v90 = v244[0];
    }
    sub_1CB8461A4((uint64_t)v242, 0, v90);
    if (!v244[0]) {
      goto LABEL_167;
    }
    int v204 = *(unsigned __int8 *)v244[0];
    if ((v204 - 4) > 0x1E)
    {
      if ((v204 - 3) >= 0xFFFFFFFE) {
        uint64_t v215 = v244[0];
      }
      else {
        uint64_t v215 = 0;
      }
      if ((v204 - 3) < 0xFFFFFFFE)
      {
        if (v204 == 3) {
          *(void *)(v244[0] + 8) = 0;
        }
        goto LABEL_167;
      }
      unint64_t v206 = v215 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v244[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v244[0] + 12)) {
        goto LABEL_167;
      }
      uint64_t v205 = *(void *)(v244[0] + 16);
      if ((v205 & 4) == 0) {
        goto LABEL_167;
      }
      unint64_t v206 = v205 & 0xFFFFFFFFFFFFFFF8;
      if (!v206) {
        goto LABEL_167;
      }
    }
    uint64_t v250 = (const char *)v244;
    sub_1CC5FA668(v206 + 16, &v250);
LABEL_167:
    if (*(_DWORD *)(a1 + 96))
    {
      unint64_t v179 = 0;
      do
      {
        unsigned int v180 = (unsigned __int8 *)v253[v179];
        __int16 v245 = 257;
        if (*(void *)v180 != v46)
        {
          if (v180[16] <= 0x14u)
          {
            unsigned int v180 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 176) + 224))(*(void *)(a1 + 176), 38, v180, v46);
            if (v180) {
              BOOL v183 = v180[16] >= 0x1Cu;
            }
            else {
              BOOL v183 = 0;
            }
            if (v183)
            {
              (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184)
                                                                                          + 16))(*(void *)(a1 + 184), v180, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
              uint64_t v187 = *(unsigned int *)(a1 + 112);
              if (v187)
              {
                uint64_t v188 = *(void *)(a1 + 104);
                uint64_t v237 = v188 + 16 * v187;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v180, *(_DWORD *)v188, *(llvm::MDNode **)(v188 + 8));
                  v188 += 16;
                }
                while (v188 != v237);
              }
            }
          }
          else
          {
            __int16 v252 = 257;
            unsigned int v180 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v180, v46, &v250, 0);
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v180, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
            uint64_t v181 = *(unsigned int *)(a1 + 112);
            if (v181)
            {
              uint64_t v182 = *(void *)(a1 + 104);
              uint64_t v236 = v182 + 16 * v181;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v180, *(_DWORD *)v182, *(llvm::MDNode **)(v182 + 8));
                v182 += 16;
              }
              while (v182 != v236);
            }
          }
        }
        v253[v179] = v180;
        uint64_t v184 = v253[v179];
        v244[0] = v12;
        uint64_t v250 = 0;
        int v185 = sub_1CD7D38CC((uint64_t *)(a3 + 32), v244, &v250);
        uint64_t v186 = v250;
        if (!v185) {
          uint64_t v186 = (const char *)(*(void *)(a3 + 32) + 40 * *(unsigned int *)(a3 + 48));
        }
        *(void *)(*((void *)v186 + 1) + 8 * v179++) = v184;
      }
      while (v179 < *(unsigned int *)(a1 + 96));
    }
    if (v253 != v256) {
      free(v253);
    }
    uint64_t v41 = v243;
    uint64_t v42 = v239;
LABEL_171:
    int v93 = llvm::VPTransformState::get((llvm::VPTransformState *)a3, v12, 0);
    uint64_t v94 = llvm::RecurrenceDescriptor::getOpcode(v241);
    uint64_t v95 = *(void *)(a1 + 256);
    uint64_t v96 = *(void *)(v95 + 40);
    if (v96 == v95 + 40)
    {
      uint64_t v97 = 0;
    }
    else
    {
      if (v96) {
        uint64_t v98 = v96 - 24;
      }
      else {
        uint64_t v98 = 0;
      }
      if (*(unsigned __int8 *)(v98 + 16) - 29 >= 0xB) {
        uint64_t v97 = 0;
      }
      else {
        uint64_t v97 = v98;
      }
    }
    llvm::InnerLoopVectorizer::setDebugLocFromInst((unsigned __int8 *)a1, v97, 0, 0);
    if (*(unsigned char *)(v42 + 161))
    {
      int v93 = llvm::VPTransformState::get((llvm::VPTransformState *)a3, v12, *(_DWORD *)(a1 + 96) - 1);
    }
    else
    {
      int v235 = *(_DWORD *)(a1 + 200);
      uint64_t v229 = *(void *)(a1 + 192);
      char v227 = *(unsigned char *)(a1 + 205);
      char v228 = *(unsigned char *)(a1 + 204);
      char v226 = *(unsigned char *)(a1 + 206);
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(v41 + 36);
      if (*(_DWORD *)(a1 + 96) >= 2u)
      {
        unsigned int v100 = 1;
        do
        {
          int v101 = llvm::VPTransformState::get((llvm::VPTransformState *)a3, v12, v100);
          if ((v94 - 55) > 0xFFFFFFFD)
          {
            if (v241 - 15 > 1) {
              MinMaxOp = llvm::createMinMaxOp(v242, v241, v93, v101);
            }
            else {
              MinMaxOp = llvm::createSelectCmpOp(v242, v249, v241, v93, v101);
            }
          }
          else
          {
            uint64_t v250 = "bin.rdx";
            __int16 v252 = 259;
            MinMaxOp = sub_1CB844E98((uint64_t)v242, v94, (uint64_t)v101, (uint64_t)v93, (uint64_t)&v250, 0);
          }
          int v93 = MinMaxOp;
          ++v100;
        }
        while (v100 < *(_DWORD *)(a1 + 96));
      }
      *(_DWORD *)(a1 + 200) = v235;
      *(void *)(a1 + 192) = v229;
      *(unsigned char *)(a1 + 204) = v228;
      *(unsigned char *)(a1 + 205) = v227;
      *(unsigned char *)(a1 + 206) = v226;
      uint64_t v41 = v243;
      uint64_t v42 = v239;
    }
    unsigned int v103 = *(_DWORD *)(a1 + 88);
    if (*(_DWORD *)(a1 + 92) == 1)
    {
      if (!v103) {
        goto LABEL_197;
      }
    }
    else if (v103 < 2)
    {
      goto LABEL_197;
    }
    if (*(unsigned char *)(v42 + 160)
      || (TargetReduction = llvm::createTargetReduction(v242, *(llvm::IRBuilderBase **)(a1 + 56), (const llvm::TargetTransformInfo *)v41, v93, v238, v99), int v93 = (llvm::Instruction *)TargetReduction, v240 == *(void *)(v41 + 48)))
    {
LABEL_197:
      uint64_t v105 = 0;
      if (*(unsigned char *)(*(void *)(**(void **)(v42 + 48) + 40) + 16) == 83) {
        uint64_t v106 = *(void *)(**(void **)(v42 + 48) + 40);
      }
      else {
        uint64_t v106 = 0;
      }
      uint64_t v250 = "bc.merge.rdx";
      __int16 v252 = 259;
      uint64_t v107 = *(void *)(a1 + 248);
      uint64_t v108 = *(void *)(v107 + 40);
      if (v108 != v107 + 40)
      {
        uint64_t v109 = v108 - 24;
        if (v108) {
          uint64_t v110 = v108 - 24;
        }
        else {
          uint64_t v110 = 0;
        }
        if (*(unsigned __int8 *)(v110 + 16) - 29 >= 0xB) {
          uint64_t v105 = 0;
        }
        else {
          uint64_t v105 = v109;
        }
      }
      uint64_t v111 = operator new(0x48uLL);
      unint64_t v112 = v111;
      v111[1] = v240;
      uint64_t v113 = (llvm::Value *)(v111 + 1);
      *uint64_t v111 = 0;
      void v111[2] = 0;
      v111[3] = 0x4000000000000053;
      *((_OWORD *)v111 + 2) = 0u;
      uint64_t v114 = (char *)(v111 + 4);
      *((_OWORD *)v111 + 3) = 0u;
      *((_DWORD *)v111 + 16) = 0;
      if (v105)
      {
        uint64_t v195 = *(void *)(v105 + 40);
        unsigned int v196 = (uint64_t *)(v105 + 24);
        v111[6] = v195;
        *(_WORD *)(v195 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v111 + 31) & 0x10) != 0)
        {
          uint64_t v216 = *(void *)(v195 + 56);
          if (v216)
          {
            int v217 = *(llvm::ValueSymbolTable **)(v216 + 104);
            if (v217) {
              llvm::ValueSymbolTable::reinsertValue(v217, v113);
            }
          }
        }
        uint64_t v197 = *v196;
        v112[4] = *v196;
        v112[5] = v196;
        *(void *)(v197 + 8) = v114;
        uint64_t *v196 = (uint64_t)v114;
      }
      *((_DWORD *)v112 + 17) = 2;
      llvm::Value::setNameImpl(v113, &v250);
      if (!*((unsigned char *)v112 + 24))
      {
        if ((*((unsigned char *)v112 + 31) & 0x10) == 0) {
          goto LABEL_392;
        }
        uint64_t v207 = ***(void ***)v113;
        uint64_t v208 = *(void *)(v207 + 152);
        uint64_t v209 = *(unsigned int *)(v207 + 168);
        if (v209)
        {
          LODWORD(v210) = (v209 - 1) & ((v113 >> 4) ^ (v113 >> 9));
          unsigned int v211 = (llvm::Value **)(v208 + 16 * v210);
          unint64_t v212 = *v211;
          if (*v211 != v113)
          {
            int v213 = 1;
            do
            {
              if (v212 == (llvm::Value *)-4096) {
                goto LABEL_384;
              }
              int v214 = v210 + v213++;
              uint64_t v210 = v214 & (v209 - 1);
              unint64_t v212 = *(llvm::Value **)(v208 + 16 * v210);
            }
            while (v212 != v113);
            unsigned int v211 = (llvm::Value **)(v208 + 16 * v210);
          }
        }
        else
        {
LABEL_384:
          unsigned int v211 = (llvm::Value **)(v208 + 16 * v209);
        }
        uint64_t v218 = v211[1];
        unint64_t v221 = *(void *)v218;
        uint64_t v219 = (char *)v218 + 16;
        unint64_t v220 = v221;
        if (v221 >= 5 && (*(_DWORD *)v219 == *(_DWORD *)"llvm." ? (BOOL v222 = v219[4] == aLlvm_1[4]) : (BOOL v222 = 0), v222))
        {
          *((_DWORD *)v112 + 10) |= 0x2000u;
          int v223 = llvm::Function::lookupIntrinsicID(v219, v220);
        }
        else
        {
LABEL_392:
          int v223 = 0;
          *((_DWORD *)v112 + 10) &= ~0x2000u;
        }
        *((_DWORD *)v112 + 11) = v223;
      }
      uint64_t v115 = *((unsigned int *)v112 + 17);
      uint64_t v116 = operator new(40 * v115);
      *unint64_t v112 = v116;
      if (v115)
      {
        unint64_t v117 = &v116[4 * v115];
        do
        {
          *uint64_t v116 = 0;
          v116[1] = 0;
          v116[2] = 0;
          v116[3] = v113;
          v116 += 4;
        }
        while (v116 != v117);
      }
      uint64_t v118 = *(void *)(*(void *)(a1 + 248) + 8);
      if (v118)
      {
        while (1)
        {
          uint64_t v119 = *(void *)(v118 + 24);
          unsigned int v120 = *(unsigned __int8 *)(v119 + 16);
          BOOL v121 = v119 && v120 >= 0x1C;
          if (v121 && v120 - 29 < 0xB) {
            break;
          }
          uint64_t v118 = *(void *)(v118 + 8);
          if (!v118) {
            goto LABEL_222;
          }
        }
        uint64_t v123 = (char **)((char *)v93 + 8);
LABEL_224:
        uint64_t v124 = *(void *)(v119 + 40);
        if (v124 == *(void *)(a1 + 256))
        {
          int v128 = *((_DWORD *)v112 + 7);
          if ((v128 & 0x7FFFFFF) == *((_DWORD *)v112 + 17))
          {
            llvm::PHINode::growOperands(v113);
            int v128 = *((_DWORD *)v112 + 7);
          }
          uint64_t v129 = (v128 + 1) & 0x7FFFFFF;
          *((_DWORD *)v112 + 7) = v128 & 0xF8000000 | (v128 + 1) & 0x7FFFFFF;
          if ((v128 & 0x40000000) != 0) {
            int v130 = (char *)*v112;
          }
          else {
            int v130 = (char *)v113 - 32 * v129;
          }
          uint64_t v131 = (v129 - 1);
          uint64_t v132 = &v130[32 * v131];
          if (*(void *)v132)
          {
            **((void **)v132 + 2) = *((void *)v132 + 1);
            uint64_t v156 = *((void *)v132 + 1);
            if (v156) {
              *(void *)(v156 + 16) = *((void *)v132 + 2);
            }
          }
          *(void *)uint64_t v132 = v93;
          if (v93)
          {
            unsigned int v133 = *v123;
            uint64_t v134 = &v130[32 * v131];
            *((void *)v134 + 1) = *v123;
            if (v133) {
              *((void *)v133 + 2) = v134 + 8;
            }
            *((void *)v134 + 2) = v123;
            *uint64_t v123 = v132;
          }
          int v135 = *((_DWORD *)v112 + 7);
          uint64_t v136 = v135 & 0x7FFFFFF;
          if ((v135 & 0x40000000) != 0) {
            uint64_t v137 = (char *)*v112;
          }
          else {
            uint64_t v137 = (char *)v113 - 32 * v136;
          }
        }
        else
        {
          if (!v106) {
            goto LABEL_247;
          }
          int v125 = *(_DWORD *)(v106 + 20);
          if ((v125 & 0x40000000) != 0)
          {
            uint64_t v127 = *(void *)(v106 - 8);
            uint64_t v126 = v125 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v126 = v125 & 0x7FFFFFF;
            uint64_t v127 = v106 - 32 * v126;
          }
          uint64_t v138 = (void *)(v127 + 32 * *(unsigned int *)(v106 + 60));
          if (v126)
          {
            uint64_t v139 = 8 * v126;
            int v140 = v138;
            do
            {
              if (*v140 == v124) {
                goto LABEL_246;
              }
              ++v140;
              v139 -= 8;
            }
            while (v139);
            int v140 = &v138[v126];
          }
          else
          {
            int v140 = v138;
          }
LABEL_246:
          if (v126 != v140 - v138) {
            BOOL v141 = (unsigned __int8 *)sub_1CBF73380(v106, v124);
          }
          else {
LABEL_247:
          }
            BOOL v141 = v249;
          int v142 = *((_DWORD *)v112 + 7);
          if ((v142 & 0x7FFFFFF) == *((_DWORD *)v112 + 17))
          {
            llvm::PHINode::growOperands(v113);
            int v142 = *((_DWORD *)v112 + 7);
          }
          uint64_t v143 = (v142 + 1) & 0x7FFFFFF;
          *((_DWORD *)v112 + 7) = v142 & 0xF8000000 | (v142 + 1) & 0x7FFFFFF;
          if ((v142 & 0x40000000) != 0) {
            uint64_t v144 = (char *)*v112;
          }
          else {
            uint64_t v144 = (char *)v113 - 32 * v143;
          }
          uint64_t v145 = (v143 - 1);
          long long v146 = &v144[32 * v145];
          if (*(void *)v146)
          {
            **((void **)v146 + 2) = *((void *)v146 + 1);
            uint64_t v155 = *((void *)v146 + 1);
            if (v155) {
              *(void *)(v155 + 16) = *((void *)v146 + 2);
            }
          }
          *(void *)long long v146 = v141;
          if (v141)
          {
            uint64_t v149 = *((void *)v141 + 1);
            int v148 = (char **)(v141 + 8);
            uint64_t v147 = v149;
            int v150 = &v144[32 * v145];
            *((void *)v150 + 1) = v149;
            if (v149) {
              *(void *)(v147 + 16) = v150 + 8;
            }
            *((void *)v150 + 2) = v148;
            *int v148 = v146;
          }
          int v151 = *((_DWORD *)v112 + 7);
          uint64_t v136 = v151 & 0x7FFFFFF;
          if ((v151 & 0x40000000) != 0) {
            uint64_t v137 = (char *)*v112;
          }
          else {
            uint64_t v137 = (char *)v113 - 32 * v136;
          }
        }
        *(void *)&v137[32 * *((unsigned int *)v112 + 17) + 8 * (v136 - 1)] = v124;
        while (1)
        {
          uint64_t v118 = *(void *)(v118 + 8);
          if (!v118) {
            break;
          }
          uint64_t v119 = *(void *)(v118 + 24);
          unsigned int v152 = *(unsigned __int8 *)(v119 + 16);
          if (v119) {
            BOOL v153 = v152 >= 0x1C;
          }
          else {
            BOOL v153 = 0;
          }
          if (v153 && v152 - 29 < 0xB) {
            goto LABEL_224;
          }
        }
      }
LABEL_222:
      uint64_t v250 = (const char *)v243;
      uint64_t v251 = v113;
      sub_1CD8DAAF4(a1 + 552, (uint64_t *)&v250, (uint64_t *)&v251);
      if ((sub_1CD8C9B4C(*(void *)(a1 + 400)) & 1) != 0
        || *(void *)(*(void *)(a1 + 264) + 40) == *(void *)(a1 + 264) + 40
        || ((uint64_t v157 = *(void *)(*(void *)(a1 + 264) + 48), v158 = v157 - 24, v157)
          ? (uint64_t v159 = v157 - 24)
          : (uint64_t v159 = 0),
            !v157 || *(unsigned char *)(v159 + 16) != 83))
      {
LABEL_223:
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
      }
      uint64_t v160 = (uint64_t *)((char *)v93 + 8);
      while (1)
      {
        int v161 = *(_DWORD *)(v158 + 20);
        if ((v161 & 0x40000000) != 0)
        {
          uint64_t v163 = *(char **)(v158 - 8);
          uint64_t v162 = v161 & 0x7FFFFFF;
          if ((*(_DWORD *)(v158 + 20) & 0x7FFFFFF) != 0)
          {
LABEL_287:
            uint64_t v164 = 32 * v162;
            uint64_t v165 = v163;
            do
            {
              if (*(void *)v165 == v230) {
                goto LABEL_293;
              }
              v165 += 32;
              v164 -= 32;
            }
            while (v164);
            uint64_t v165 = &v163[32 * v162];
            goto LABEL_293;
          }
        }
        else
        {
          uint64_t v162 = v161 & 0x7FFFFFF;
          uint64_t v163 = (char *)(v158 - 32 * v162);
          if ((*(_DWORD *)(v158 + 20) & 0x7FFFFFF) != 0) {
            goto LABEL_287;
          }
        }
        uint64_t v165 = v163;
LABEL_293:
        if (v162 != (v165 - v163) >> 5)
        {
          uint64_t v166 = *(void *)(a1 + 256);
          if (v162 == *(_DWORD *)(v158 + 60))
          {
            llvm::PHINode::growOperands((llvm::PHINode *)v158);
            int v161 = *(_DWORD *)(v158 + 20);
          }
          uint64_t v167 = (v161 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v158 + 20) = v161 & 0xF8000000 | (v161 + 1) & 0x7FFFFFF;
          if ((v161 & 0x40000000) != 0) {
            uint64_t v168 = *(void *)(v158 - 8);
          }
          else {
            uint64_t v168 = v158 - 32 * v167;
          }
          uint64_t v169 = (v167 - 1);
          uint64_t v170 = v168 + 32 * v169;
          if (*(void *)v170)
          {
            **(void **)(v170 + 16) = *(void *)(v170 + 8);
            uint64_t v178 = *(void *)(v170 + 8);
            if (v178) {
              *(void *)(v178 + 16) = *(void *)(v170 + 16);
            }
          }
          *(void *)uint64_t v170 = v93;
          if (v93)
          {
            uint64_t v171 = *v160;
            uint64_t v172 = v168 + 32 * v169;
            *(void *)(v172 + 8) = *v160;
            if (v171) {
              *(void *)(v171 + 16) = v172 + 8;
            }
            *(void *)(v172 + 16) = v160;
            uint64_t *v160 = v170;
          }
          int v173 = *(_DWORD *)(v158 + 20);
          uint64_t v174 = v173 & 0x7FFFFFF;
          if ((v173 & 0x40000000) != 0) {
            uint64_t v175 = *(void *)(v158 - 8);
          }
          else {
            uint64_t v175 = v158 - 32 * v174;
          }
          *(void *)(v175 + 32 * *(unsigned int *)(v158 + 60) + 8 * (v174 - 1)) = v166;
        }
        uint64_t v176 = *(void *)(v158 + 32);
        uint64_t v158 = v176 - 24;
        if (v176) {
          uint64_t v177 = v176 - 24;
        }
        else {
          uint64_t v177 = 0;
        }
        if (!v176 || *(unsigned char *)(v177 + 16) != 83) {
          goto LABEL_223;
        }
      }
    }
    if (*(unsigned char *)(v41 + 56))
    {
      __int16 v245 = 257;
      if (*(void *)TargetReduction == v240) {
        goto LABEL_197;
      }
      if (*(unsigned __int8 *)(TargetReduction + 16) > 0x14u)
      {
        __int16 v252 = 257;
        int v93 = llvm::CastInst::Create(40, TargetReduction, v240, &v250, 0);
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v93, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
        uint64_t v192 = *(unsigned int *)(a1 + 112);
        if (v192)
        {
          uint64_t v193 = *(void *)(a1 + 104);
          uint64_t v194 = v193 + 16 * v192;
          do
          {
            llvm::Instruction::setMetadata(v93, *(_DWORD *)v193, *(llvm::MDNode **)(v193 + 8));
            v193 += 16;
          }
          while (v193 != v194);
        }
        goto LABEL_197;
      }
      uint64_t v202 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 176) + 224))(*(void *)(a1 + 176), 40, TargetReduction, v240);
      int v93 = (llvm::Instruction *)v202;
      if (!v202 || *(unsigned __int8 *)(v202 + 16) < 0x1Cu) {
        goto LABEL_197;
      }
      (*(void (**)(void, uint64_t, void *, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v202, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
      uint64_t v203 = *(unsigned int *)(a1 + 112);
      if (v203)
      {
        uint64_t v224 = *(void *)(a1 + 104);
        uint64_t v225 = v224 + 16 * v203;
        do
        {
          llvm::Instruction::setMetadata(v93, *(_DWORD *)v224, *(llvm::MDNode **)(v224 + 8));
          v224 += 16;
        }
        while (v224 != v225);
      }
    }
    else
    {
      __int16 v245 = 257;
      if (*(void *)TargetReduction == v240) {
        goto LABEL_197;
      }
      if (*(unsigned __int8 *)(TargetReduction + 16) > 0x14u)
      {
        __int16 v252 = 257;
        int v93 = llvm::CastInst::Create(39, TargetReduction, v240, &v250, 0);
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v93, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
        uint64_t v189 = *(unsigned int *)(a1 + 112);
        if (v189)
        {
          uint64_t v190 = *(void *)(a1 + 104);
          uint64_t v191 = v190 + 16 * v189;
          do
          {
            llvm::Instruction::setMetadata(v93, *(_DWORD *)v190, *(llvm::MDNode **)(v190 + 8));
            v190 += 16;
          }
          while (v190 != v191);
        }
        goto LABEL_197;
      }
      uint64_t v198 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 176) + 224))(*(void *)(a1 + 176), 39, TargetReduction, v240);
      int v93 = (llvm::Instruction *)v198;
      if (!v198 || *(unsigned __int8 *)(v198 + 16) < 0x1Cu) {
        goto LABEL_197;
      }
      (*(void (**)(void, uint64_t, void *, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), v198, v244, *(void *)(a1 + 152), *(void *)(a1 + 160));
      uint64_t v199 = *(unsigned int *)(a1 + 112);
      if (v199)
      {
        uint64_t v200 = *(void *)(a1 + 104);
        uint64_t v201 = v200 + 16 * v199;
        do
        {
          llvm::Instruction::setMetadata(v93, *(_DWORD *)v200, *(llvm::MDNode **)(v200 + 8));
          v200 += 16;
        }
        while (v200 != v201);
      }
    }
    uint64_t v42 = v239;
    goto LABEL_197;
  }
  int v75 = *(unsigned __int8 *)v244[0];
  if ((v75 - 4) > 0x1E)
  {
    if ((v75 - 3) >= 0xFFFFFFFE) {
      uint64_t v78 = v244[0];
    }
    else {
      uint64_t v78 = 0;
    }
    if ((v75 - 3) < 0xFFFFFFFE)
    {
      if (v75 == 3) {
        *(void *)(v244[0] + 8) = 0;
      }
      goto LABEL_27;
    }
    unint64_t v77 = v78 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v244[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v244[0] + 12)) {
      goto LABEL_27;
    }
    uint64_t v76 = *(void *)(v244[0] + 16);
    if ((v76 & 4) == 0) {
      goto LABEL_27;
    }
    unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
    if (!v77) {
      goto LABEL_27;
    }
  }
  uint64_t v250 = (const char *)v244;
  sub_1CC5FA668(v77 + 16, &v250);
  goto LABEL_27;
}

void llvm::InnerLoopVectorizer::fixFixedOrderRecurrence(uint64_t a1, uint64_t a2, llvm::VPTransformState *this)
{
  unsigned int v6 = *(llvm::VPValue **)(*(void *)(a2 + 48) + 8);
  uint64_t v7 = llvm::VPTransformState::get(this, v6, *(_DWORD *)(a1 + 96) - 1);
  int v9 = (unsigned __int8 *)v7;
  uint64_t v10 = **(void **)(a1 + 168);
  unsigned int v11 = *(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    if (v11) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v22 = v7;
    goto LABEL_21;
  }
  if (v11 < 2) {
    goto LABEL_20;
  }
LABEL_3:
  int v12 = *(llvm::ConstantInt **)(v10 + 1960);
  unsigned int v13 = *(_DWORD *)(v10 + 1968);
  unsigned int v114 = v13 >> 8;
  if (v13 >> 8 > 0x40) {
    operator new[]();
  }
  if (v13 <= 0xFF) {
    LOBYTE(v14) = 0;
  }
  else {
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
  }
  uint64_t v113 = (const char *)(v14 & 1);
  uint64_t v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v113, v8);
  if (v114 >= 0x41 && v113) {
    MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
  }
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)(*(void *)(a1 + 256) + 40);
  if (v17) {
    uint64_t v18 = v17 - 24;
  }
  else {
    uint64_t v18 = 0;
  }
  if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB) {
    uint64_t v18 = 0;
  }
  *(void *)(a1 + 152) = *(void *)(v18 + 40);
  *(void *)(a1 + 160) = v18 + 24;
  BOOL v19 = *(unsigned __int8 **)(v18 + 48);
  uint64_t v116 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track((uint64_t)&v116, v19, 2);
    uint64_t v16 = (uint64_t)v116;
  }
  sub_1CB8461A4(a1 + 104, 0, v16);
  if (v116)
  {
    int v94 = *v116;
    if ((v94 - 4) > 0x1E)
    {
      if ((v94 - 3) >= 0xFFFFFFFE) {
        uint64_t v98 = v116;
      }
      else {
        uint64_t v98 = 0;
      }
      if ((v94 - 3) < 0xFFFFFFFE)
      {
        if (v94 == 3) {
          *((void *)v116 + 1) = 0;
        }
        goto LABEL_16;
      }
      unint64_t v96 = (unint64_t)(v98 + 8);
    }
    else
    {
      if ((v116[1] & 0x7F) != 2 && !*((_DWORD *)v116 + 3)) {
        goto LABEL_16;
      }
      uint64_t v95 = *((void *)v116 + 2);
      if ((v95 & 4) == 0) {
        goto LABEL_16;
      }
      unint64_t v96 = v95 & 0xFFFFFFFFFFFFFFF8;
      if (!v96) {
        goto LABEL_16;
      }
    }
    uint64_t v113 = (const char *)&v116;
    sub_1CC5FA668(v96 + 16, &v113);
  }
LABEL_16:
  RuntimeVF = llvm::getRuntimeVF((llvm::IRBuilderBase *)(a1 + 104), (llvm::ConstantInt *)(v10 + 1960), *(void *)(a1 + 88));
  __int16 v115 = 257;
  uint64_t v21 = (unsigned __int8 *)sub_1CB84494C(a1 + 104, (uint64_t)RuntimeVF, (uint64_t)v15, (uint64_t)&v113, 0, 0);
  uint64_t v113 = "vector.recur.extract";
  __int16 v115 = 259;
  uint64_t v22 = sub_1CB8445F4(a1 + 104, v9, v21, (uint64_t)&v113);
  unsigned int v23 = *(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    if (v23) {
      goto LABEL_25;
    }
  }
  else if (v23 >= 2)
  {
LABEL_25:
    uint64_t v28 = llvm::getRuntimeVF((llvm::IRBuilderBase *)(a1 + 104), (llvm::ConstantInt *)(v10 + 1960), *(void *)(a1 + 88));
    unint64_t v29 = *(llvm::ConstantInt **)(v10 + 1960);
    unsigned int v30 = *(_DWORD *)(v10 + 1968);
    unsigned int v114 = v30 >> 8;
    if (v30 >> 8 > 0x40) {
      operator new[]();
    }
    if (v30 <= 0xFF) {
      LOBYTE(v31) = 0;
    }
    else {
      unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v30) + 63);
    }
    uint64_t v113 = (const char *)(v31 & 2);
    uint64_t v32 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v113, v27);
    if (v114 >= 0x41 && v113) {
      MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
    }
    __int16 v115 = 257;
    int v33 = (unsigned __int8 *)sub_1CB84494C(a1 + 104, (uint64_t)v28, (uint64_t)v32, (uint64_t)&v113, 0, 0);
    uint64_t v113 = "vector.recur.extract.for.phi";
    __int16 v115 = 259;
    uint64_t v25 = sub_1CB8445F4(a1 + 104, v9, v33, (uint64_t)&v113);
    goto LABEL_31;
  }
LABEL_21:
  unsigned int v24 = *(_DWORD *)(a1 + 96);
  if (v24 < 2)
  {
    uint64_t v26 = 0;
    goto LABEL_32;
  }
  uint64_t v25 = llvm::VPTransformState::get(this, v6, v24 - 2);
LABEL_31:
  uint64_t v26 = v25;
LABEL_32:
  uint64_t v34 = 0;
  uint64_t v35 = *(void *)(*(void *)(a1 + 248) + 48);
  if (v35) {
    uint64_t v36 = v35 - 24;
  }
  else {
    uint64_t v36 = 0;
  }
  *(void *)(a1 + 152) = *(void *)(v36 + 40);
  *(void *)(a1 + 160) = v36 + 24;
  unsigned int v37 = *(unsigned __int8 **)(v36 + 48);
  uint64_t v116 = v37;
  if (v37)
  {
    llvm::MetadataTracking::track((uint64_t)&v116, v37, 2);
    uint64_t v34 = (uint64_t)v116;
  }
  sub_1CB8461A4(a1 + 104, 0, v34);
  if (v116)
  {
    int v91 = *v116;
    if ((v91 - 4) > 0x1E)
    {
      if ((v91 - 3) >= 0xFFFFFFFE) {
        uint64_t v97 = v116;
      }
      else {
        uint64_t v97 = 0;
      }
      if ((v91 - 3) < 0xFFFFFFFE)
      {
        if (v91 == 3) {
          *((void *)v116 + 1) = 0;
        }
        goto LABEL_38;
      }
      unint64_t v93 = (unint64_t)(v97 + 8);
    }
    else
    {
      if ((v116[1] & 0x7F) != 2 && !*((_DWORD *)v116 + 3)) {
        goto LABEL_38;
      }
      uint64_t v92 = *((void *)v116 + 2);
      if ((v92 & 4) == 0) {
        goto LABEL_38;
      }
      unint64_t v93 = v92 & 0xFFFFFFFFFFFFFFF8;
      if (!v93) {
        goto LABEL_38;
      }
    }
    uint64_t v113 = (const char *)&v116;
    sub_1CC5FA668(v93 + 16, &v113);
  }
LABEL_38:
  uint64_t v38 = *(uint64_t **)(a2 + 136);
  uint64_t v39 = *v38;
  uint64_t v113 = "scalar.recur.init";
  __int16 v115 = 259;
  unsigned int v40 = sub_1CB93113C(a1 + 104, v39, 2, (uint64_t)&v113);
  uint64_t v41 = v40;
  uint64_t v42 = *(void *)(a1 + 248);
  uint64_t v43 = *(void *)(v42 + 8);
  if (v43)
  {
    uint64_t v44 = *(llvm::Instruction **)(**(void **)(a2 + 48) + 40);
    while (1)
    {
      uint64_t v45 = *(void *)(v43 + 24);
      unsigned int v46 = *(unsigned __int8 *)(v45 + 16);
      BOOL v47 = v45 && v46 >= 0x1C;
      if (v47 && v46 - 29 < 0xB) {
        break;
      }
      uint64_t v43 = *(void *)(v43 + 8);
      if (!v43) {
        goto LABEL_79;
      }
    }
    LODWORD(v49) = *((_DWORD *)v40 + 15);
LABEL_50:
    uint64_t v50 = *(void *)(v45 + 40);
    if (v50 == *(void *)(a1 + 256)) {
      uint64_t v51 = v22;
    }
    else {
      uint64_t v51 = v44;
    }
    int v52 = *((_DWORD *)v41 + 5);
    if ((v52 & 0x7FFFFFF) == v49)
    {
      llvm::PHINode::growOperands(v41);
      int v52 = *((_DWORD *)v41 + 5);
    }
    uint64_t v53 = (v52 + 1) & 0x7FFFFFF;
    *((_DWORD *)v41 + 5) = v52 & 0xF8000000 | (v52 + 1) & 0x7FFFFFF;
    if ((v52 & 0x40000000) != 0) {
      int v54 = (_DWORD *)*((void *)v41 - 1);
    }
    else {
      int v54 = (_DWORD *)((char *)v41 - 32 * v53);
    }
    uint64_t v55 = (v53 - 1);
    uint64_t v56 = &v54[8 * v55];
    if (*(void *)v56)
    {
      **((void **)v56 + 2) = *((void *)v56 + 1);
      uint64_t v68 = *((void *)v56 + 1);
      if (v68) {
        *(void *)(v68 + 16) = *((void *)v56 + 2);
      }
    }
    *(void *)uint64_t v56 = v51;
    if (v51)
    {
      uint64_t v59 = *((void *)v51 + 1);
      BOOL v58 = (void *)((char *)v51 + 8);
      uint64_t v57 = v59;
      uint64_t v60 = &v54[8 * v55];
      *((void *)v60 + 1) = v59;
      if (v59) {
        *(void *)(v57 + 16) = v60 + 2;
      }
      *((void *)v60 + 2) = v58;
      *BOOL v58 = v56;
    }
    int v61 = *((_DWORD *)v41 + 5);
    uint64_t v62 = v61 & 0x7FFFFFF;
    if ((v61 & 0x40000000) != 0) {
      uint64_t v63 = (_DWORD *)*((void *)v41 - 1);
    }
    else {
      uint64_t v63 = (_DWORD *)((char *)v41 - 32 * v62);
    }
    unsigned int v64 = v62 - 1;
    uint64_t v49 = *((unsigned int *)v41 + 15);
    *(void *)&v63[8 * v49 + 2 * v64] = v50;
    while (1)
    {
      uint64_t v43 = *(void *)(v43 + 8);
      if (!v43) {
        break;
      }
      uint64_t v45 = *(void *)(v43 + 24);
      unsigned int v65 = *(unsigned __int8 *)(v45 + 16);
      if (v45) {
        BOOL v66 = v65 >= 0x1C;
      }
      else {
        BOOL v66 = 0;
      }
      if (v66 && v65 - 29 < 0xB) {
        goto LABEL_50;
      }
    }
    uint64_t v42 = *(void *)(a1 + 248);
  }
LABEL_79:
  sub_1CC45E7A4((uint64_t)v38, v42, (uint64_t)v41);
  uint64_t v113 = "scalar.recur";
  __int16 v115 = 259;
  llvm::Value::setNameImpl((llvm::Value *)v38, &v113);
  if (!*((unsigned char *)v38 + 16))
  {
    if ((*((unsigned char *)v38 + 23) & 0x10) == 0) {
      goto LABEL_163;
    }
    uint64_t v99 = **(void **)*v38;
    uint64_t v100 = *(void *)(v99 + 152);
    uint64_t v101 = *(unsigned int *)(v99 + 168);
    if (v101)
    {
      LODWORD(v102) = (v101 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      unsigned int v103 = (uint64_t **)(v100 + 16 * v102);
      uint64_t v104 = *v103;
      if (*v103 == v38)
      {
LABEL_156:
        uint64_t v107 = v103[1];
        unint64_t v110 = *v107;
        uint64_t v108 = v107 + 2;
        unint64_t v109 = v110;
        if (v110 >= 5 && *(_DWORD *)v108 == *(_DWORD *)"llvm." && v108[4] == aLlvm_1[4])
        {
          *((_DWORD *)v38 + 8) |= 0x2000u;
          int v112 = llvm::Function::lookupIntrinsicID(v108, v109);
LABEL_164:
          *((_DWORD *)v38 + 9) = v112;
          goto LABEL_80;
        }
LABEL_163:
        int v112 = 0;
        *((_DWORD *)v38 + 8) &= ~0x2000u;
        goto LABEL_164;
      }
      int v105 = 1;
      while (v104 != (uint64_t *)-4096)
      {
        int v106 = v102 + v105++;
        uint64_t v102 = v106 & (v101 - 1);
        uint64_t v104 = *(uint64_t **)(v100 + 16 * v102);
        if (v104 == v38)
        {
          unsigned int v103 = (uint64_t **)(v100 + 16 * v102);
          goto LABEL_156;
        }
      }
    }
    unsigned int v103 = (uint64_t **)(v100 + 16 * v101);
    goto LABEL_156;
  }
LABEL_80:
  if ((sub_1CD8C9B4C(*(void *)(a1 + 400)) & 1) == 0
    && *(void *)(*(void *)(a1 + 264) + 40) != *(void *)(a1 + 264) + 40)
  {
    uint64_t v69 = *(void *)(*(void *)(a1 + 264) + 48);
    uint64_t v70 = v69 - 24;
    uint64_t v71 = v69 ? v69 - 24 : 0;
    if (v69 && *(unsigned char *)(v71 + 16) == 83)
    {
      uint64_t v72 = (uint64_t *)((char *)v26 + 8);
      do
      {
        int v73 = *(_DWORD *)(v70 + 20);
        if ((v73 & 0x40000000) != 0)
        {
          int v75 = *(char **)(v70 - 8);
          uint64_t v74 = v73 & 0x7FFFFFF;
          if ((*(_DWORD *)(v70 + 20) & 0x7FFFFFF) != 0)
          {
LABEL_91:
            uint64_t v76 = 32 * v74;
            unint64_t v77 = v75;
            while (*(uint64_t **)v77 != v38)
            {
              v77 += 32;
              v76 -= 32;
              if (!v76)
              {
                unint64_t v77 = &v75[32 * v74];
                goto LABEL_97;
              }
            }
            goto LABEL_97;
          }
        }
        else
        {
          uint64_t v74 = v73 & 0x7FFFFFF;
          int v75 = (char *)(v70 - 32 * v74);
          if ((*(_DWORD *)(v70 + 20) & 0x7FFFFFF) != 0) {
            goto LABEL_91;
          }
        }
        unint64_t v77 = v75;
LABEL_97:
        if (v74 != (v77 - v75) >> 5)
        {
          uint64_t v78 = *(void *)(a1 + 256);
          if (v74 == *(_DWORD *)(v70 + 60))
          {
            llvm::PHINode::growOperands((llvm::PHINode *)v70);
            int v73 = *(_DWORD *)(v70 + 20);
          }
          uint64_t v79 = (v73 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v70 + 20) = v73 & 0xF8000000 | (v73 + 1) & 0x7FFFFFF;
          if ((v73 & 0x40000000) != 0) {
            uint64_t v80 = *(void *)(v70 - 8);
          }
          else {
            uint64_t v80 = v70 - 32 * v79;
          }
          uint64_t v81 = (v79 - 1);
          uint64_t v82 = v80 + 32 * v81;
          if (*(void *)v82)
          {
            **(void **)(v82 + 16) = *(void *)(v82 + 8);
            uint64_t v90 = *(void *)(v82 + 8);
            if (v90) {
              *(void *)(v90 + 16) = *(void *)(v82 + 16);
            }
          }
          *(void *)uint64_t v82 = v26;
          if (v26)
          {
            uint64_t v83 = *v72;
            uint64_t v84 = v80 + 32 * v81;
            *(void *)(v84 + 8) = *v72;
            if (v83) {
              *(void *)(v83 + 16) = v84 + 8;
            }
            *(void *)(v84 + 16) = v72;
            *uint64_t v72 = v82;
          }
          int v85 = *(_DWORD *)(v70 + 20);
          uint64_t v86 = v85 & 0x7FFFFFF;
          if ((v85 & 0x40000000) != 0) {
            uint64_t v87 = *(void *)(v70 - 8);
          }
          else {
            uint64_t v87 = v70 - 32 * v86;
          }
          *(void *)(v87 + 32 * *(unsigned int *)(v70 + 60) + 8 * (v86 - 1)) = v78;
        }
        uint64_t v88 = *(void *)(v70 + 32);
        uint64_t v70 = v88 - 24;
        if (v88) {
          uint64_t v89 = v88 - 24;
        }
        else {
          uint64_t v89 = 0;
        }
      }
      while (v88 && *(unsigned char *)(v89 + 16) == 83);
    }
  }
}

uint64_t llvm::InnerLoopVectorizer::useOrderedReductions(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(a2 + 57) != 0) & ~llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(*(void *)(a1 + 400) + 664));
}

void llvm::LoopVectorizationCostModel::collectLoopScalars(uint64_t a1, unint64_t a2)
{
  v29[8] = *MEMORY[0x1E4F143B8];
  v15[0] = a2;
  if (HIDWORD(a2) != 1)
  {
    v22[8] = 1;
    int64x2_t v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v24 = v23;
    int64x2_t v25 = v23;
    int64x2_t v26 = v23;
    BOOL v27 = v29;
    uint64_t v28 = 0x800000000;
    v15[2] = 1;
    int64x2_t v16 = v23;
    int64x2_t v17 = v23;
    int64x2_t v18 = v23;
    int64x2_t v19 = v23;
    uint64_t v20 = v22;
    uint64_t v21 = 0x800000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  uint64_t v3 = sub_1CD8DABD0(a1 + 176, (int *)v15);
  uint64_t v4 = a1 + 152;
  uint64_t v5 = sub_1CD8DABD0(a1 + 152, (int *)v15);
  unsigned int v6 = (unint64_t *)*((void *)v5 + 2);
  if (v6 == *((unint64_t **)v5 + 1)) {
    uint64_t v7 = v5 + 7;
  }
  else {
    uint64_t v7 = v5 + 6;
  }
  uint64_t v8 = *v7;
  int v9 = &v6[v8];
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v6;
      v10 -= 8;
      if (!v10)
      {
        unsigned int v6 = v9;
        break;
      }
    }
  }
  unsigned int v11 = sub_1CD8DABD0(v4, (int *)v15);
  uint64_t v12 = *((void *)v11 + 2);
  if (v12 == *((void *)v11 + 1)) {
    unsigned int v13 = v11 + 7;
  }
  else {
    unsigned int v13 = v11 + 6;
  }
  unint64_t v14 = (unint64_t *)(v12 + 8 * *v13);

  sub_1CC002B9C((llvm::SmallPtrSetImplBase *)(v3 + 2), v6, v9, v14);
}

void sub_1CD302E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 16);
  if (v6 != 62 && (v6 != 77 || *(unsigned char *)(*(void *)a3 + 8) != 15)
    || llvm::Loop::isLoopInvariant(*(void *)(**(void **)a1 + 584), a3))
  {
    return;
  }
  uint64_t v34 = a3;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7 + 8;
  unsigned int v9 = a3 >> 4;
  if (*(unsigned char *)v7)
  {
    int v10 = 8;
  }
  else
  {
    int v10 = *(_DWORD *)(v7 + 16);
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)(v7 + 8);
  }
  int v11 = v10 - 1;
  unsigned int v12 = v11 & (v9 ^ (a3 >> 9));
  uint64_t v13 = *(void *)(v8 + 8 * v12);
  if (v13 == a3) {
    return;
  }
  int v14 = 1;
  while (v13 != -4096)
  {
    unsigned int v15 = v12 + v14++;
    unsigned int v12 = v15 & v11;
    uint64_t v13 = *(void *)(v8 + 8 * v12);
    if (v13 == a3) {
      return;
    }
  }
LABEL_14:
  int v16 = sub_1CD8CE880(**(void **)(a1 + 16), a2, **(void **)(*(void *)(a1 + 16) + 8));
  if (a2 && *(unsigned char *)(a2 + 16) == 61 && *(void *)(a2 - 64) == a3)
  {
    if (v16 != 5) {
      goto LABEL_18;
    }
  }
  else if (v16 == 4)
  {
    goto LABEL_18;
  }
  uint64_t v32 = *(void *)(a3 + 8);
  if (!v32)
  {
LABEL_46:
    sub_1CC04D4E0(*(void *)(a1 + 24), &v34);
    return;
  }
  while ((*(unsigned char *)(*(void *)(v32 + 24) + 16) & 0xFE) == 0x3C)
  {
    uint64_t v32 = *(void *)(v32 + 8);
    if (!v32) {
      goto LABEL_46;
    }
  }
LABEL_18:
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(v17 + 8);
  uint64_t v19 = *(unsigned int *)(v17 + 20);
  if (v18 != *(void *)v17)
  {
    unsigned int v23 = *(_DWORD *)(v17 + 16);
    goto LABEL_29;
  }
  if (!v19)
  {
LABEL_26:
    unsigned int v23 = *(_DWORD *)(v17 + 16);
    if (v19 < v23)
    {
      *(_DWORD *)(v17 + 20) = v19 + 1;
      *(void *)(v18 + 8 * v19) = a3;
      return;
    }
LABEL_29:
    if (3 * v23 <= 4 * ((int)v19 - *(_DWORD *)(v17 + 24)))
    {
      if (v23 >= 0x40) {
        v23 *= 2;
      }
      else {
        unsigned int v23 = 128;
      }
    }
    else if (v23 - v19 >= v23 >> 3)
    {
      goto LABEL_31;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v17, v23);
    unsigned int v23 = *(_DWORD *)(v17 + 16);
    uint64_t v18 = *(void *)(v17 + 8);
LABEL_31:
    unsigned int v24 = v23 - 1;
    unsigned int v25 = (v23 - 1) & (v9 ^ (a3 >> 9));
    int64x2_t v26 = (uint64_t *)(v18 + 8 * v25);
    uint64_t v27 = *v26;
    if (*v26 == -1)
    {
      uint64_t v28 = 0;
LABEL_48:
      if (v28) {
        int v33 = v28;
      }
      else {
        int v33 = v26;
      }
      if (*v33 != a3)
      {
        if (*v33 == -2) {
          --*(_DWORD *)(v17 + 24);
        }
        else {
          ++*(_DWORD *)(v17 + 20);
        }
        uint64_t *v33 = a3;
      }
    }
    else
    {
      uint64_t v28 = 0;
      int v29 = 1;
      while (v27 != a3)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v27 == -2;
        }
        if (v30) {
          uint64_t v28 = v26;
        }
        unsigned int v31 = v25 + v29++;
        unsigned int v25 = v31 & v24;
        int64x2_t v26 = (uint64_t *)(v18 + 8 * (v31 & v24));
        uint64_t v27 = *v26;
        if (*v26 == -1) {
          goto LABEL_48;
        }
      }
    }
    return;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 8 * v19;
  uint64_t v22 = *(uint64_t **)(v17 + 8);
  while (*v22 != a3)
  {
    if (*v22 == -2) {
      uint64_t v20 = v22;
    }
    ++v22;
    v21 -= 8;
    if (!v21)
    {
      if (!v20) {
        goto LABEL_26;
      }
      *uint64_t v20 = a3;
      --*(_DWORD *)(v17 + 24);
      return;
    }
  }
}

uint64_t llvm::LoopVectorizationCostModel::isScalarWithPredication(uint64_t a1, uint64_t a2, llvm::Type *a3, llvm::DominatorTree *a4)
{
  if (!*(unsigned char *)(a1 + 124)) {
    llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(a2 + 40), **(llvm::BasicBlock ***)(a1 + 608), *(llvm::Loop **)(*(void *)(a1 + 608) + 40), a4);
  }
  uint64_t result = 0;
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 <= 0x3D)
  {
    if (((1 << v7) & 0xD800000000000) != 0)
    {
      int v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0) {
        uint64_t v9 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v9 = a2 - 32 * (v8 & 0x7FFFFFF);
      }
      uint64_t v17 = *(void *)(v9 + 32);
      if (v17) {
        BOOL v18 = *(unsigned char *)(v17 + 16) == 16;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18) {
        return 1;
      }
      uint64_t v19 = *(unsigned int *)(v17 + 32);
      if (v19 > 0x40)
      {
        int v21 = 0;
        int64_t v22 = (unint64_t)(v19 + 63) >> 6;
        do
        {
          if (v22-- < 1) {
            break;
          }
          unint64_t v24 = *(void *)(*(void *)(v17 + 24) + 8 * v22);
          v21 += __clz(v24);
        }
        while (!v24);
        int v25 = v19 | 0xFFFFFFC0;
        if ((v19 & 0x3F) == 0) {
          int v25 = 0;
        }
        return v21 + v25 == v19;
      }
      else
      {
        return *(void *)(v17 + 24) == 0;
      }
    }
    if (((1 << v7) & 0x3000000000000000) == 0) {
      return result;
    }
    uint64_t v10 = *(void *)(a1 + 608);
    uint64_t v12 = *(void *)(v10 + 488);
    uint64_t v11 = *(void *)(v10 + 496);
    if (v11 == v12)
    {
      uint64_t v13 = *(unsigned int *)(v10 + 508);
      int v14 = (void *)(v11 + 8 * v13);
      if (v13)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v13;
        while (*(void *)(v11 + v15) != a2)
        {
          v15 += 8;
          if (v16 == v15) {
            goto LABEL_43;
          }
        }
        int v14 = (void *)(v11 + v15);
      }
LABEL_43:
      uint64_t v12 = *(void *)(v10 + 496);
    }
    else
    {
      uint64_t v26 = *(unsigned int *)(v10 + 504);
      int v27 = v26 - 1;
      unsigned int v28 = (v26 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      int v14 = (void *)(v11 + 8 * v28);
      uint64_t v29 = *v14;
      if (*v14 == -1)
      {
        BOOL v30 = 0;
LABEL_50:
        if (v30) {
          int v14 = v30;
        }
        if (*v14 != a2) {
          int v14 = (void *)(v11 + 8 * v26);
        }
      }
      else
      {
        BOOL v30 = 0;
        int v31 = 1;
        while (v29 != a2)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -2;
          }
          if (v32) {
            BOOL v30 = v14;
          }
          unsigned int v33 = v28 + v31++;
          unsigned int v28 = v33 & v27;
          int v14 = (void *)(v11 + 8 * (v33 & v27));
          uint64_t v29 = *v14;
          if (*v14 == -1) {
            goto LABEL_50;
          }
        }
      }
    }
    BOOL v18 = v11 == v12;
    uint64_t v34 = 504;
    if (v18) {
      uint64_t v34 = 508;
    }
    if (v14 == (void *)(v11 + 8 * *(unsigned int *)(v10 + v34))) {
      return 0;
    }
    if (a2 && v7 == 60)
    {
      uint64_t v35 = *(llvm::Value **)(a2 - 32);
      uint64_t v36 = (uint64_t ***)a2;
    }
    else
    {
      uint64_t v35 = 0;
      if (a2 && v7 == 61) {
        uint64_t v35 = *(llvm::Value **)(a2 - 32);
      }
      uint64_t v36 = *(uint64_t ****)(a2 - 64);
    }
    unsigned int v37 = *v36;
    BOOL v39 = ((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 && a3 != 0;
    if (a3 > 1 || (unsigned int v40 = *v36, v39))
    {
      if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000) {
        llvm::ScalableVectorType::get(v37, a3);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v37, a3);
      }
      unsigned int v40 = v41;
      unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
    }
    uint64_t v42 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1)) ^ 0x3F;
    if (a2 && v7 == 60)
    {
      uint64_t v43 = *(llvm::LoopVectorizationLegality **)(a1 + 608);
    }
    else
    {
      uint64_t v43 = *(llvm::LoopVectorizationLegality **)(a1 + 608);
      if (v7 != 60)
      {
        if (llvm::LoopVectorizationLegality::isConsecutivePtr(v43, (llvm::Type *)v37, v35)
          && ((*(uint64_t (**)(void, uint64_t **, uint64_t))(***(void ***)(a1 + 616) + 320))(**(void **)(a1 + 616), v37, v42) & 1) != 0)
        {
          return 0;
        }
        int v44 = (*(uint64_t (**)(void, uint64_t **, uint64_t))(***(void ***)(a1 + 616) + 360))(**(void **)(a1 + 616), v40, v42);
        return v44 ^ 1u;
      }
    }
    if (llvm::LoopVectorizationLegality::isConsecutivePtr(v43, (llvm::Type *)v37, v35)
      && ((*(uint64_t (**)(void, uint64_t **, uint64_t))(***(void ***)(a1 + 616) + 328))(**(void **)(a1 + 616), v37, v42) & 1) != 0)
    {
      return 0;
    }
    int v44 = (*(uint64_t (**)(void, uint64_t **, uint64_t))(***(void ***)(a1 + 616) + 368))(**(void **)(a1 + 616), v40, v42);
    return v44 ^ 1u;
  }
  return result;
}

uint64_t llvm::LoopVectorizationCostModel::interleavedAccessCanBeWidened(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(*(void *)(a1 + 672) + 48);
  uint64_t v47 = 0;
  uint64_t v48 = a2;
  uint64_t v5 = 0;
  if (sub_1CD3C8538(v4, &v48, &v47)) {
    uint64_t v5 = *(uint64_t **)(v47 + 8);
  }
  int v6 = (llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40) + 272);
  if (!a2 || (unsigned int v7 = (llvm::Type **)a2, *(unsigned char *)(a2 + 16) != 60)) {
    unsigned int v7 = *(llvm::Type ***)(a2 - 64);
  }
  int v8 = *v7;
  uint64_t v9 = sub_1CC5CA218(v6, *v7);
  int v11 = v10;
  BOOL v13 = v9 == sub_1CB83544C((uint64_t)v6, (uint64_t)v8) && v11 == v12;
  if (!v13) {
    return 0;
  }
  int v14 = *(_DWORD *)v5;
  BOOL v15 = sub_1CBFB72C8((uint64_t)v6, (uint64_t)v8);
  if (v14)
  {
    int v17 = v15;
    int v18 = 0;
    do
    {
      LODWORD(v48) = v18 + *((_DWORD *)v5 + 8);
      uint64_t v19 = sub_1CD4D6838(v5 + 1, &v48);
      if (v19)
      {
        if (*(unsigned char *)(v19 + 16) != 60) {
          uint64_t v19 = *(void *)(v19 - 64);
        }
        uint64_t v20 = *(void *)v19;
        int v21 = sub_1CBFB72C8((uint64_t)v6, *(void *)v19);
        if (v17 != v21) {
          return 0;
        }
        if ((v21 & v17) == 1)
        {
          unsigned int v22 = *((_DWORD *)v8 + 2);
          if ((v22 & 0xFE) == 0x12) {
            unsigned int v22 = *(_DWORD *)(**((void **)v8 + 2) + 8);
          }
          int v23 = *(_DWORD *)(v20 + 8);
          if ((v23 & 0xFE) == 0x12) {
            int v23 = *(_DWORD *)(**(void **)(v20 + 16) + 8);
          }
          if ((v23 ^ v22) > 0xFF) {
            return 0;
          }
        }
      }
    }
    while (v14 != ++v18);
  }
  if (!*(unsigned char *)(a1 + 124)) {
    llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(a2 + 40), **(llvm::BasicBlock ***)(a1 + 608), *(llvm::Loop **)(*(void *)(a1 + 608) + 40), v16);
  }
  uint64_t v24 = *(void *)(a1 + 608);
  uint64_t v26 = *(void *)(v24 + 488);
  uint64_t v25 = *(void *)(v24 + 496);
  if (v25 == v26)
  {
    uint64_t v27 = *(unsigned int *)(v24 + 508);
    unsigned int v28 = (void *)(v25 + 8 * v27);
    if (v27)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 8 * v27;
      while (*(void *)(v25 + v29) != a2)
      {
        v29 += 8;
        if (v30 == v29) {
          goto LABEL_44;
        }
      }
      unsigned int v28 = (void *)(v25 + v29);
    }
LABEL_44:
    uint64_t v26 = *(void *)(v24 + 496);
  }
  else
  {
    uint64_t v31 = *(unsigned int *)(v24 + 504);
    int v32 = v31 - 1;
    unsigned int v33 = (v31 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v28 = (void *)(v25 + 8 * v33);
    uint64_t v34 = *v28;
    if (*v28 == -1)
    {
      uint64_t v35 = 0;
LABEL_63:
      if (v35) {
        unsigned int v28 = v35;
      }
      if (*v28 != a2) {
        unsigned int v28 = (void *)(v25 + 8 * v31);
      }
    }
    else
    {
      uint64_t v35 = 0;
      int v36 = 1;
      while (v34 != a2)
      {
        if (v35) {
          BOOL v37 = 0;
        }
        else {
          BOOL v37 = v34 == -2;
        }
        if (v37) {
          uint64_t v35 = v28;
        }
        unsigned int v38 = v33 + v36++;
        unsigned int v33 = v38 & v32;
        unsigned int v28 = (void *)(v25 + 8 * (v38 & v32));
        uint64_t v34 = *v28;
        if (*v28 == -1) {
          goto LABEL_63;
        }
      }
    }
  }
  BOOL v13 = v25 == v26;
  uint64_t v39 = 504;
  if (v13) {
    uint64_t v39 = 508;
  }
  BOOL v40 = v28 != (void *)(v25 + 8 * *(unsigned int *)(v24 + v39));
  int v41 = *(unsigned __int8 *)(a2 + 16);
  if (v41 == 60)
  {
    LODWORD(v48) = *(_DWORD *)v5 + *((_DWORD *)v5 + 8) - 1;
    if (sub_1CD4D6838(v5 + 1, &v48)) {
      BOOL v42 = 0;
    }
    else {
      BOOL v42 = *(_DWORD *)(a1 + 120) != 0;
    }
    int v41 = *(unsigned __int8 *)(a2 + 16);
  }
  else
  {
    BOOL v42 = 0;
  }
  BOOL v43 = v41 == 61 && *((_DWORD *)v5 + 4) < *(_DWORD *)v5;
  if (!v40 && !v42 && !v43) {
    return 1;
  }
  if (*((unsigned char *)v5 + 4)) {
    return 0;
  }
  if (a2 && v41 == 60)
  {
    uint64_t v45 = *(llvm::Type **)a2;
    LODWORD(v46) = __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1)) ^ 0x3F;
    return (*(uint64_t (**)(void, llvm::Type *, void))(***(void ***)(a1 + 616) + 328))(**(void **)(a1 + 616), v45, v46);
  }
  uint64_t v45 = **(llvm::Type ***)(a2 - 64);
  uint64_t v46 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1)) ^ 0x3F;
  if (v41 == 60) {
    return (*(uint64_t (**)(void, llvm::Type *, void))(***(void ***)(a1 + 616) + 328))(**(void **)(a1 + 616), v45, v46);
  }
  return (*(uint64_t (**)(void, llvm::Type *, uint64_t))(***(void ***)(a1 + 616) + 320))(**(void **)(a1 + 616), v45, v46);
}

void llvm::LoopVectorizationCostModel::collectLoopUniforms(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v2 = sub_1CD8DABD0(a1 + 152, (int *)&v12);
  uint64_t v3 = (void *)*((void *)v2 + 2);
  if (v3 != *((void **)v2 + 1))
  {
    uint64_t v4 = v2[6];
    if (v4 >= 0x21 && 4 * (v2[7] - v2[8]) < v4)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v2 + 1);
LABEL_3:
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      int v8 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = 0;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
    }
    memset(v3, 255, 8 * v4);
  }
  v2[7] = 0;
  v2[8] = 0;
  goto LABEL_3;
}

uint64_t llvm::LoopVectorizationCostModel::computeFeasibleMaxVF(uint64_t a1, unsigned __int32 a2, uint64_t a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  llvm::computeMinimumValueSizes(*(void *)(*(void *)(a1 + 584) + 32), (uint64_t)(*(void *)(*(void *)(a1 + 584) + 40) - *(void *)(*(void *)(a1 + 584) + 32)) >> 3, *(llvm::DemandedBits **)(a1 + 632), *(void **)(a1 + 616), &v27);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  *(void *)(a1 + 8) = v27;
  *(void *)&long long v27 = 0;
  *(void *)(a1 + 16) = *((void *)&v27 + 1);
  *((void *)&v27 + 1) = 0;
  *(_DWORD *)(a1 + 24) = v28;
  LODWORD(v28) = 0;
  int v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(void *)(a1 + 40) = v8;
    operator delete(v8);
  }
  *(_OWORD *)(a1 + 32) = v29;
  *(void *)(a1 + 48) = v30;
  uint64_t v30 = 0;
  long long v29 = 0uLL;
  sub_1CD456CB4(&v27);
  unint64_t SmallestAndWidestTypes = llvm::LoopVectorizationCostModel::getSmallestAndWidestTypes((llvm::LoopVectorizationCostModel *)a1);
  int v10 = SmallestAndWidestTypes;
  unint64_t v11 = HIDWORD(SmallestAndWidestTypes);
  unint64_t v12 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 608) + 56) + 16) + 200);
  uint64_t v13 = 1 << ~__clz(v12 / HIDWORD(SmallestAndWidestTypes));
  if (HIDWORD(SmallestAndWidestTypes) <= v12) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v26 = v14;
  uint64_t MaxLegalScalableVF = llvm::LoopVectorizationCostModel::getMaxLegalScalableVF((llvm::LoopVectorizationCostModel *)a1, v14);
  uint64_t v25 = MaxLegalScalableVF;
  if (!a3) {
    goto LABEL_26;
  }
  unint64_t v16 = a3 & 0xFFFFFFFF00000000;
  if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
    unsigned int v17 = MaxLegalScalableVF;
  }
  else {
    unsigned int v17 = v14;
  }
  if (a3 <= v17)
  {
    if (v16 == 0x100000000) {
      return a3;
    }
    else {
      return a3;
    }
  }
  if (v16 == 0x100000000)
  {
    char v18 = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 1176))(**(void **)(a1 + 616));
    if (byte_1EBD010C0) {
      char v19 = 1;
    }
    else {
      char v19 = v18;
    }
    uint64_t v20 = *****(void *****)(a1 + 648);
    if (*(void *)(v20 + 128))
    {
      if (v19) {
LABEL_18:
      }
        llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 584));
    }
    else
    {
      int v21 = (*(uint64_t (**)(void))(**(void **)(v20 + 72) + 48))(*(void *)(v20 + 72));
      if (v19)
      {
        if (v21) {
          goto LABEL_18;
        }
        goto LABEL_26;
      }
      if (!v21)
      {
LABEL_26:
        unint64_t MaximizedVFForTarget = llvm::LoopVectorizationCostModel::getMaximizedVFForTarget(a1, a2, v10, v11, &v26, a4);
        if (MaximizedVFForTarget) {
          uint64_t v14 = MaximizedVFForTarget;
        }
        else {
          uint64_t v14 = 1;
        }
        llvm::LoopVectorizationCostModel::getMaximizedVFForTarget(a1, a2, v10, v11, &v25, a4);
        return v14;
      }
    }
    llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 584));
  }
  uint64_t v22 = *****(void *****)(a1 + 648);
  if (*(void *)(v22 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v22 + 72) + 48))(*(void *)(v22 + 72)))
  {
    llvm::Loop::getStartLoc(*(llvm::Loop **)(a1 + 584));
  }
  return v14;
}

unint64_t llvm::LoopVectorizationCostModel::getMaximizedVFForTarget(uint64_t a1, unsigned __int32 a2, int a3, unsigned int a4, _DWORD *a5, int a6)
{
  v63[0] = a3;
  v68[8] = *MEMORY[0x1E4F143B8];
  int v11 = a5[1];
  if (v11 == 1) {
    uint64_t v12 = 2;
  }
  else {
    uint64_t v12 = 1;
  }
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 616) + 696))(**(void **)(a1 + 616), v12);
  unint64_t v15 = v13;
  int v17 = v16;
  unint64_t v18 = (unint64_t)(v11 == 1) << 32;
  if (v11 != 1 || a5[1] == 1)
  {
    uint64_t v20 = 1 << ~__clz(v13 / a4);
    if (v13 >= a4) {
      uint64_t v20 = v20;
    }
    else {
      uint64_t v20 = 0;
    }
    BOOL v21 = v20 < *a5;
    uint64_t v22 = (llvm::Type *)(v18 | v20);
    if (v21) {
      unint64_t v23 = (unint64_t)v22;
    }
    else {
      unint64_t v23 = *(void *)a5;
    }
    if (!v23) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v23 = *(void *)a5;
    if (!*(void *)a5)
    {
LABEL_25:
      unint64_t v28 = 0;
      LODWORD(v23) = 1;
      return v23 | (v28 << 32);
    }
  }
  if (a2 - 1 >= v23
    || a6 && (v14.i32[0] = a2, uint8x8_t v24 = (uint8x8_t)vcnt_s8(v14), v24.i16[0] = vaddlv_u8(v24), v24.i32[0] > 1u))
  {
    BOOL v25 = 0;
    unint64_t v26 = v23 & 0xFFFFFFFF00000000;
    unsigned int v27 = v63[0];
    if (v63[0] <= 0x20u && v63[0] < a4 && v26 != 0x100000000)
    {
      if (*(_DWORD *)(*(void *)(a1 + 664) + 88))
      {
        BOOL v25 = 0;
      }
      else
      {
        long long v29 = ****(llvm::IntegerType *****)(*(void *)(a1 + 584) + 32);
        uint64_t v30 = (llvm::FixedVectorType *)llvm::IntegerType::get(v29, (llvm::LLVMContext *)v63[0]);
        llvm::FixedVectorType::get(v30, (llvm::Type *)v23);
        int v32 = (llvm::FixedVectorType *)llvm::IntegerType::get(v29, (llvm::LLVMContext *)v63[0]);
        if (v17 == 1) {
        uint64_t v33 = 1 << ~__clz(v15 / v63[0]);
        }
        if (v15 >= v63[0]) {
          uint64_t v34 = (llvm::Type *)v33;
        }
        else {
          uint64_t v34 = 0;
        }
        v35.n128_f64[0] = llvm::FixedVectorType::get(v32, v34);
        uint64_t v36 = (*(uint64_t (**)(__n128))(***(void ***)(a1 + 616) + 888))(v35);
        int v38 = v37;
        BOOL v25 = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 888))() < v36;
        if (v39 != v38) {
          BOOL v25 = v39 < v38;
        }
        unsigned int v27 = v63[0];
      }
    }
    unint64_t v28 = HIDWORD(v23);
    if (byte_1EBD00A00
      || v25
      || !word_1EBD00988
      && (*(unsigned int (**)(void))(***(void ***)(a1 + 616) + 728))(**(void **)(a1 + 616)))
    {
      if (v11 != 1 || a5[1] == 1)
      {
        uint64_t v42 = 1 << ~__clz(v15 / v27);
        if (v15 >= v27) {
          uint64_t v42 = v42;
        }
        else {
          uint64_t v42 = 0;
        }
        BOOL v43 = v42 < *a5;
        unint64_t v44 = v18 | v42;
        if (v43) {
          unint64_t v41 = v44;
        }
        else {
          unint64_t v41 = *(void *)a5;
        }
      }
      else
      {
        unint64_t v41 = *(void *)a5;
      }
      BOOL v66 = v68;
      uint64_t v67 = 0x800000000;
      BOOL v45 = HIDWORD(v41) != 1 && v26 == 0x100000000;
      unsigned int v46 = 2 * v23;
      if (v45 || v46 > v41)
      {
        unint64_t v49 = 0;
        uint64_t v48 = v68;
      }
      else
      {
        LODWORD(v49) = 0;
        do
        {
          if (v49 >= HIDWORD(v67)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v66[v49] = v26 | v46;
          unint64_t v49 = (v67 + 1);
          LODWORD(v67) = v67 + 1;
          v46 *= 2;
        }
        while (v46 <= v41);
        uint64_t v48 = v66;
      }
      llvm::LoopVectorizationCostModel::calculateRegisterUsage(a1, (uint64_t)v48, v49, &v63[1]);
      LODWORD(v50) = v64;
      while (1)
      {
        uint64_t v50 = (v50 - 1);
        if ((int)v50 < 0) {
          break;
        }
        uint64_t v51 = *(void *)&v63[1] + 176 * v50;
        uint64_t v52 = *(unsigned int *)(v51 + 136);
        if (v52)
        {
          uint64_t v53 = *(unsigned int **)(v51 + 128);
          int v54 = &v53[2 * v52];
          char v55 = 1;
          do
          {
            v55 &= v53[1] <= (*(unsigned int (**)(void, void))(***(void ***)(a1 + 616) + 672))(**(void **)(a1 + 616), *v53);
            v53 += 2;
          }
          while (v53 != v54);
          if ((v55 & 1) == 0) {
            continue;
          }
        }
        uint64_t v56 = &v66[v50];
        LODWORD(v23) = *v56;
        unint64_t v28 = v56[1];
        break;
      }
      unint64_t v57 = (*(uint64_t (**)(void, void, BOOL))(***(void ***)(a1 + 616) + 736))(**(void **)(a1 + 616), v63[0], v11 == 1);
      if (v57)
      {
        BOOL v58 = HIDWORD(v57) != 1 && v28 == 1;
        if (!v58 && v23 < v57)
        {
          LODWORD(v23) = v57;
          unint64_t v28 = HIDWORD(v57);
        }
      }
      sub_1CD8D665C((_DWORD *)(a1 + 560));
      sub_1CD8D66B4((_DWORD *)(a1 + 152));
      sub_1CD8D66B4((_DWORD *)(a1 + 176));
      uint64_t v60 = *(uint64_t **)&v63[1];
      if (v64)
      {
        uint64_t v61 = 176 * v64;
        uint64_t v62 = *(void *)&v63[1] - 176;
        do
        {
          sub_1CD8D6BD4(v62 + v61);
          v61 -= 176;
        }
        while (v61);
        uint64_t v60 = *(uint64_t **)&v63[1];
      }
      if (v60 != &v65) {
        free(v60);
      }
      if (v66 != v68) {
        free(v66);
      }
    }
  }
  else
  {
    unint64_t v28 = 0;
    unint64_t v23 = 1 << ~__clz(a2);
  }
  return v23 | (v28 << 32);
}

uint64_t llvm::LoopVectorizationCostModel::computeMaxVF(uint64_t a1, uint64_t a2)
{
  if (**(unsigned char **)(*(void *)(*(void *)(a1 + 608) + 56) + 8))
  {
    uint64_t SmallConstantTripCount = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 88))(**(void **)(a1 + 616));
    if (SmallConstantTripCount)
    {
      uint64_t v6 = *(void *)(a1 + 648);
      uint64_t v7 = *(void *)(a1 + 584);
      int v8 = "runtime pointer checks needed. Not enabled for divergent target";
      uint64_t v9 = "CantVersionLoopWithDivergentTarget";
      uint64_t v10 = 63;
      uint64_t v11 = 34;
      goto LABEL_4;
    }
  }
  uint64_t SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantTripCount(*(llvm::ScalarEvolution **)(*(void *)(a1 + 592) + 88), *(const llvm::Loop **)(a1 + 584));
  if (SmallConstantTripCount == 1)
  {
    uint64_t v6 = *(void *)(a1 + 648);
    uint64_t v7 = *(void *)(a1 + 584);
    int v8 = "loop trip count is one, irrelevant for vectorization";
    uint64_t v9 = "SingleIterationLoop";
    uint64_t v10 = 52;
    uint64_t v11 = 19;
LABEL_4:
    llvm::reportVectorizationFailure(SmallConstantTripCount, v5, (uint64_t)v8, v10, (uint64_t)v9, v11, v6, v7);
  }
  int v14 = *(_DWORD *)(a1 + 120);
  if (!v14) {
    return llvm::LoopVectorizationCostModel::computeFeasibleMaxVF(a1, SmallConstantTripCount, a2, 0);
  }
  if ((v14 - 1) >= 2
    || (llvm::LoopVectorizationCostModel::runtimeChecksRequired((llvm::LoopVectorizationCostModel *)a1, v5) & 1) == 0)
  {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock();
  }
  return 0;
}

uint64_t llvm::LoopVectorizationCostModel::calculateRegisterUsage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  v290[4] = *MEMORY[0x1E4F143B8];
  sub_1CBFCBAB0((uint64_t)v261, *(void *)(a1 + 584));
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v261, *(llvm::LoopInfo **)(a1 + 600));
  v285[0] = 1;
  for (uint64_t i = 1; i != 5; ++i)
    LODWORD(v285[i]) = -1;
  v286[0] = &v287;
  v286[1] = 0x400000000;
  v288[0] = 1;
  for (uint64_t j = 12; j != 16; ++j)
    LODWORD(v285[j]) = -1;
  v289[0] = v290;
  v289[1] = 0x400000000;
  size_t v282 = v284;
  uint64_t v283 = 0x4000000000;
  uint64_t v258 = 0;
  uint64_t v259 = 0;
  unsigned int v260 = 0;
  uint64_t v253 = v257;
  int v254 = v257;
  uint64_t v255 = 8;
  int v256 = 0;
  unsigned int v248 = v252;
  size_t v249 = v252;
  uint64_t v250 = 8;
  int v251 = 0;
  int v8 = v264;
  uint64_t v239 = (char *)__p;
  int v234 = a3;
  if (v264 == __p)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v245 = 0;
    uint64_t v246 = 0;
    int v247 = 0;
LABEL_162:
    uint64_t v66 = v10 + 16 * v9;
    uint64_t v67 = v66;
    goto LABEL_163;
  }
  do
  {
    uint64_t v11 = (llvm::BasicBlock *)*((void *)v8 - 1);
    v8 -= 8;
    llvm::BasicBlock::instructionsWithoutDebug(v11, 1, (uint64_t)v269);
    *(_OWORD *)unint64_t v277 = *(_OWORD *)v269;
    if (v271[0])
    {
      if ((unsigned char *)v271[0] == &v269[16])
      {
        uint64_t v281 = &v278;
        (*(void (**)(unsigned char *))(*(void *)&v269[16] + 24))(&v269[16]);
      }
      else
      {
        uint64_t v281 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v271[0] + 16))();
      }
    }
    else
    {
      uint64_t v281 = 0;
    }
    *(_OWORD *)int v265 = *(_OWORD *)&v271[1];
    if ((void)v273)
    {
      if ((void *)v273 == &v271[3])
      {
        *(void *)&long long v267 = &v265[16];
        (*(void (**)(void *))(v271[3] + 24))(&v271[3]);
      }
      else
      {
        *(void *)&long long v267 = (*(uint64_t (**)(void))(*(void *)v273 + 16))();
      }
    }
    else
    {
      *(void *)&long long v267 = 0;
    }
    uint64_t v12 = (char *)v277[0];
    while (v12 != *(char **)v265)
    {
      if (v12) {
        unint64_t v13 = v12 - 24;
      }
      else {
        unint64_t v13 = 0;
      }
      if (v283 >= (unint64_t)HIDWORD(v283)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v282 + v283) = v13;
      LODWORD(v283) = v283 + 1;
      int v14 = *((_DWORD *)v13 + 5);
      if ((v14 & 0x40000000) != 0)
      {
        int v16 = (uint64_t *)*((void *)v13 - 1);
        uint64_t v15 = v14 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v15 = v14 & 0x7FFFFFF;
        int v16 = (uint64_t *)&v13[-32 * v15];
      }
      int v17 = &v16[4 * v15];
      if (v15)
      {
        do
        {
          if (*(unsigned __int8 *)(*v16 + 16) <= 0x1Bu) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = *v16;
          }
          uint64_t v245 = v18;
          if (!v18) {
            goto LABEL_123;
          }
          uint64_t v19 = *(void *)(a1 + 584);
          uint64_t v20 = *(void *)(v18 + 40);
          uint64_t v22 = *(void *)(v19 + 56);
          uint64_t v21 = *(void *)(v19 + 64);
          if (v21 == v22)
          {
            uint64_t v23 = *(unsigned int *)(v19 + 76);
            uint8x8_t v24 = (void *)(v21 + 8 * v23);
            if (v23)
            {
              uint64_t v25 = 0;
              uint64_t v26 = 8 * v23;
              while (*(void *)(v21 + v25) != v20)
              {
                v25 += 8;
                if (v26 == v25) {
                  goto LABEL_49;
                }
              }
              uint8x8_t v24 = (void *)(v21 + v25);
            }
LABEL_49:
            uint64_t v22 = *(void *)(v19 + 64);
          }
          else
          {
            uint64_t v27 = *(unsigned int *)(v19 + 72);
            int v28 = v27 - 1;
            unsigned int v29 = (v27 - 1) & ((v20 >> 4) ^ (v20 >> 9));
            uint8x8_t v24 = (void *)(v21 + 8 * v29);
            uint64_t v30 = *v24;
            if (*v24 == -1)
            {
              uint64_t v31 = 0;
LABEL_111:
              if (v31) {
                uint8x8_t v24 = v31;
              }
              if (*v24 != v20) {
                uint8x8_t v24 = (void *)(v21 + 8 * v27);
              }
            }
            else
            {
              uint64_t v31 = 0;
              int v32 = 1;
              while (v30 != v20)
              {
                if (v31) {
                  BOOL v33 = 0;
                }
                else {
                  BOOL v33 = v30 == -2;
                }
                if (v33) {
                  uint64_t v31 = v24;
                }
                unsigned int v34 = v29 + v32++;
                unsigned int v29 = v34 & v28;
                uint8x8_t v24 = (void *)(v21 + 8 * (v34 & v28));
                uint64_t v30 = *v24;
                if (*v24 == -1) {
                  goto LABEL_111;
                }
              }
            }
          }
          if (v21 == v22) {
            uint64_t v35 = 76;
          }
          else {
            uint64_t v35 = 72;
          }
          if (v24 == (void *)(v21 + 8 * *(unsigned int *)(v19 + v35)))
          {
            int v37 = v249;
            uint64_t v38 = HIDWORD(v250);
            if (v249 != v248)
            {
              unsigned int v46 = v250;
LABEL_90:
              if (3 * v46 <= 4 * (HIDWORD(v250) - v251))
              {
                if (v46 >= 0x40) {
                  v46 *= 2;
                }
                else {
                  unsigned int v46 = 128;
                }
              }
              else if (v46 - HIDWORD(v250) >= v46 >> 3)
              {
                goto LABEL_92;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v248, v46);
              unsigned int v46 = v250;
              int v37 = v249;
LABEL_92:
              unsigned int v55 = v46 - 1;
              unsigned int v56 = (v46 - 1) & ((v18 >> 4) ^ (v18 >> 9));
              unint64_t v57 = &v37[v56];
              uint64_t v58 = *v57;
              if (*v57 != -1)
              {
                uint64_t v59 = 0;
                int v60 = 1;
                while (v58 != v18)
                {
                  if (v59) {
                    BOOL v61 = 0;
                  }
                  else {
                    BOOL v61 = v58 == -2;
                  }
                  if (v61) {
                    uint64_t v59 = v57;
                  }
                  unsigned int v62 = v56 + v60++;
                  unsigned int v56 = v62 & v55;
                  unint64_t v57 = &v37[v62 & v55];
                  uint64_t v58 = *v57;
                  if (*v57 == -1) {
                    goto LABEL_116;
                  }
                }
                goto LABEL_123;
              }
              uint64_t v59 = 0;
LABEL_116:
              if (v59) {
                uint64_t v63 = v59;
              }
              else {
                uint64_t v63 = v57;
              }
              if (*v63 == v18) {
                goto LABEL_123;
              }
              if (*v63 == -2) {
                --v251;
              }
              else {
                ++HIDWORD(v250);
              }
LABEL_122:
              uint64_t *v63 = v18;
              goto LABEL_123;
            }
            if (HIDWORD(v250))
            {
              BOOL v43 = 0;
              uint64_t v44 = 8 * HIDWORD(v250);
              BOOL v45 = (uint64_t *)v249;
              while (*v45 != v18)
              {
                if (*v45 == -2) {
                  BOOL v43 = v45;
                }
                ++v45;
                v44 -= 8;
                if (!v44)
                {
                  if (!v43) {
                    goto LABEL_72;
                  }
                  *BOOL v43 = v18;
                  --v251;
                  goto LABEL_123;
                }
              }
              goto LABEL_123;
            }
LABEL_72:
            unsigned int v46 = v250;
            if (HIDWORD(v250) >= v250) {
              goto LABEL_90;
            }
            ++HIDWORD(v250);
          }
          else
          {
            int v36 = v283;
            *((_DWORD *)sub_1CCDE2304(&v258, &v245) + 2) = v36;
            uint64_t v18 = v245;
            int v37 = v254;
            uint64_t v38 = HIDWORD(v255);
            if (v254 != v253)
            {
              unsigned int v42 = v255;
LABEL_76:
              if (3 * v42 <= 4 * (HIDWORD(v255) - v256))
              {
                if (v42 >= 0x40) {
                  v42 *= 2;
                }
                else {
                  unsigned int v42 = 128;
                }
              }
              else if (v42 - HIDWORD(v255) >= v42 >> 3)
              {
LABEL_78:
                unsigned int v47 = v42 - 1;
                unsigned int v48 = (v42 - 1) & ((v18 >> 4) ^ (v18 >> 9));
                unint64_t v49 = &v37[v48];
                uint64_t v50 = *v49;
                if (*v49 != -1)
                {
                  uint64_t v51 = 0;
                  int v52 = 1;
                  while (v50 != v18)
                  {
                    if (v51) {
                      BOOL v53 = 0;
                    }
                    else {
                      BOOL v53 = v50 == -2;
                    }
                    if (v53) {
                      uint64_t v51 = v49;
                    }
                    unsigned int v54 = v48 + v52++;
                    unsigned int v48 = v54 & v47;
                    unint64_t v49 = &v37[v54 & v47];
                    uint64_t v50 = *v49;
                    if (*v49 == -1) {
                      goto LABEL_104;
                    }
                  }
                  goto LABEL_123;
                }
                uint64_t v51 = 0;
LABEL_104:
                if (v51) {
                  uint64_t v63 = v51;
                }
                else {
                  uint64_t v63 = v49;
                }
                if (*v63 == v18) {
                  goto LABEL_123;
                }
                if (*v63 == -2) {
                  --v256;
                }
                else {
                  ++HIDWORD(v255);
                }
                goto LABEL_122;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v253, v42);
              unsigned int v42 = v255;
              int v37 = v254;
              goto LABEL_78;
            }
            if (HIDWORD(v255))
            {
              int v39 = 0;
              uint64_t v40 = 8 * HIDWORD(v255);
              unint64_t v41 = v254;
              while (*v41 != v245)
              {
                if (*v41 == -2) {
                  int v39 = v41;
                }
                ++v41;
                v40 -= 8;
                if (!v40)
                {
                  if (!v39) {
                    goto LABEL_62;
                  }
                  *int v39 = v245;
                  --v256;
                  goto LABEL_123;
                }
              }
              goto LABEL_123;
            }
LABEL_62:
            unsigned int v42 = v255;
            if (HIDWORD(v255) >= v255) {
              goto LABEL_76;
            }
            ++HIDWORD(v255);
          }
          v37[v38] = v18;
LABEL_123:
          v16 += 4;
        }
        while (v16 != v17);
      }
      unsigned int v64 = (char *)v277[1];
      uint64_t v12 = (char *)*((void *)v277[0] + 1);
      v277[0] = v12;
      while (v12 != v64)
      {
        if (!v281) {
          sub_1CB920400();
        }
        char v65 = (*(uint64_t (**)(void))(*v281 + 48))();
        uint64_t v12 = (char *)v277[0];
        if (v65) {
          break;
        }
        uint64_t v12 = (char *)*((void *)v277[0] + 1);
        v277[0] = v12;
        unsigned int v64 = (char *)v277[1];
      }
    }
    if ((unsigned char *)v267 == &v265[16])
    {
      (*(void (**)(unsigned char *))(*(void *)&v265[16] + 32))(&v265[16]);
    }
    else if ((void)v267)
    {
      (*(void (**)(void))(*(void *)v267 + 40))();
    }
    if (v281 == &v278)
    {
      (*(void (**)(uint64_t *))(v278 + 32))(&v278);
    }
    else if (v281)
    {
      (*(void (**)(void))(*v281 + 40))();
    }
    if ((void *)v273 == &v271[3])
    {
      (*(void (**)(void *))(v271[3] + 32))(&v271[3]);
    }
    else if ((void)v273)
    {
      (*(void (**)(void))(*(void *)v273 + 40))();
    }
    if ((unsigned char *)v271[0] == &v269[16])
    {
      (*(void (**)(unsigned char *))(*(void *)&v269[16] + 32))(&v269[16]);
    }
    else if (v271[0])
    {
      (*(void (**)(void))(*(void *)v271[0] + 40))();
    }
  }
  while (v8 != v239);
  uint64_t v245 = 0;
  uint64_t v246 = 0;
  int v247 = 0;
  uint64_t v10 = v258;
  unsigned int v9 = v260;
  if (!v259) {
    goto LABEL_162;
  }
  uint64_t v67 = v258 + 16 * v260;
  if (v260)
  {
    uint64_t v231 = 0;
    while ((*(void *)(v258 + v231) | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v231 += 16;
      if (16 * v260 == v231)
      {
        uint64_t v66 = v258 + 16 * v260;
        goto LABEL_163;
      }
    }
    uint64_t v66 = v258 + v231;
  }
  else
  {
    uint64_t v66 = v258;
  }
LABEL_163:
  uint64_t v68 = v10 + 16 * v9;
LABEL_164:
  while (v66 != v68)
  {
    uint64_t v69 = sub_1CD8DAFE8((uint64_t)&v245, (int *)(v66 + 8));
    unint64_t v70 = v69[4];
    if (v70 >= v69[5]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)v69 + 1) + 8 * v70) = *(void *)v66;
    ++v69[4];
    uint64_t v71 = v66 + 16;
    uint64_t v66 = v67;
    if (v71 != v67)
    {
      uint64_t v66 = v71;
      while ((*(void *)v66 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v66 += 16;
        if (v66 == v67)
        {
          uint64_t v66 = v67;
          goto LABEL_164;
        }
      }
    }
  }
  v277[0] = &v280;
  v277[1] = &v280;
  uint64_t v278 = 8;
  int v279 = 0;
  memset(v276, 0, 40);
  long long v275 = 0u;
  long long v274 = 0u;
  long long v273 = 0u;
  long long v272 = 0u;
  memset(v271, 0, sizeof(v271));
  long long v270 = 0u;
  *(_OWORD *)&v269[8] = 0u;
  uint64_t v72 = 8;
  *(void *)uint64_t v269 = 1;
  do
  {
    *(_DWORD *)&v269[v72] = -1;
    v72 += 8;
  }
  while (v72 != 40);
  v271[0] = &v271[2];
  v271[1] = 0x400000000;
  *(void *)&long long v273 = 1;
  for (uint64_t k = 96; k != 128; k += 8)
    *(_DWORD *)&v269[k] = -1;
  *((void *)&v275 + 1) = &v276[1];
  v276[0] = 0x400000000;
  *a4 = a4 + 2;
  a4[1] = 0x800000000;
  sub_1CD8DB2E8(a4, a3, v269);
  sub_1CD8D6BD4((uint64_t)v269);
  memset(v268, 0, 32);
  long long v267 = 0u;
  long long v266 = 0u;
  *(_OWORD *)&v265[8] = 0u;
  *(void *)int v265 = 1;
  for (uint64_t m = 8; m != 40; m += 8)
    *(_DWORD *)&v265[m] = -1;
  *(void *)&long long v267 = v268;
  *((void *)&v267 + 1) = 0x400000000;
  *(void *)uint64_t v269 = &v269[16];
  *(void *)&v269[8] = 0x800000000;
  sub_1CD8DB4D4((uint64_t)v269, a3, v265);
  if ((unsigned char *)v267 != v268) {
    free((void *)v267);
  }
  if ((v265[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v265[8], 4);
  }
  int v235 = *(void **)(a1 + 616);
  unsigned int v244 = 0;
  unsigned int v75 = v283;
  if (v283)
  {
    unsigned int v76 = 0;
    uint64_t v241 = a3;
    unsigned int v232 = v283;
    while (1)
    {
      unsigned int v237 = v76;
      uint64_t v238 = *((void *)v282 + v76);
      unint64_t v77 = sub_1CD8DAFE8((uint64_t)&v245, (int *)&v244);
      uint64_t v78 = v77[4];
      if (v78)
      {
        uint64_t v83 = (uint64_t *)*((void *)v77 + 1);
        uint64_t v84 = &v83[v78];
        int v85 = v279;
        do
        {
          uint64_t v86 = *v83;
          uint64_t v87 = v277[0];
          if (v277[1] == v277[0])
          {
            unsigned int v88 = HIDWORD(v278);
            uint64_t v89 = (char *)v277[1] + 8 * HIDWORD(v278);
            if (HIDWORD(v278))
            {
              uint64_t v90 = 0;
              while (*(void *)((char *)v277[1] + v90) != v86)
              {
                v90 += 8;
                if (8 * HIDWORD(v278) == v90) {
                  goto LABEL_211;
                }
              }
              uint64_t v89 = (char *)v277[1] + v90;
            }
LABEL_211:
            uint64_t v87 = v277[1];
          }
          else
          {
            int v91 = v278 - 1;
            unsigned int v92 = (v278 - 1) & ((v86 >> 4) ^ (v86 >> 9));
            uint64_t v89 = (char *)v277[1] + 8 * v92;
            uint64_t v93 = *(void *)v89;
            if (*(void *)v89 == -1)
            {
              int v94 = 0;
LABEL_219:
              if (v94) {
                uint64_t v89 = v94;
              }
              unsigned int v88 = HIDWORD(v278);
              if (*(void *)v89 != v86) {
                uint64_t v89 = (char *)v277[1] + 8 * v278;
              }
            }
            else
            {
              int v94 = 0;
              int v95 = 1;
              while (v93 != v86)
              {
                if (v94) {
                  BOOL v96 = 0;
                }
                else {
                  BOOL v96 = v93 == -2;
                }
                if (v96) {
                  int v94 = v89;
                }
                unsigned int v97 = v92 + v95++;
                unsigned int v92 = v97 & v91;
                uint64_t v89 = (char *)v277[1] + 8 * (v97 & v91);
                uint64_t v93 = *(void *)v89;
                if (*(void *)v89 == -1) {
                  goto LABEL_219;
                }
              }
              unsigned int v88 = HIDWORD(v278);
            }
          }
          unsigned int v98 = v278;
          if (v277[1] == v87) {
            unsigned int v98 = v88;
          }
          if (v89 != (char *)v277[1] + 8 * v98)
          {
            *(void *)uint64_t v89 = -2;
            int v279 = ++v85;
          }
          ++v83;
        }
        while (v83 != v84);
      }
      uint64_t v79 = v253;
      if (v254 == v253)
      {
        int v80 = HIDWORD(v255);
        uint64_t v81 = &v254[8 * HIDWORD(v255)];
        if (HIDWORD(v255))
        {
          uint64_t v82 = 0;
          while (*(void *)&v254[v82] != v238)
          {
            v82 += 8;
            if (8 * HIDWORD(v255) == v82) {
              goto LABEL_237;
            }
          }
          uint64_t v81 = &v254[v82];
        }
LABEL_237:
        uint64_t v79 = v254;
      }
      else
      {
        int v99 = v255 - 1;
        unsigned int v100 = (v255 - 1) & ((v238 >> 4) ^ (v238 >> 9));
        uint64_t v81 = &v254[8 * v100];
        uint64_t v101 = *(void *)v81;
        if (*(void *)v81 == -1)
        {
          uint64_t v102 = 0;
LABEL_403:
          if (v102) {
            uint64_t v81 = v102;
          }
          int v80 = HIDWORD(v255);
          if (*(void *)v81 != v238) {
            uint64_t v81 = &v254[8 * v255];
          }
        }
        else
        {
          uint64_t v102 = 0;
          int v103 = 1;
          while (v101 != v238)
          {
            if (v102) {
              BOOL v104 = 0;
            }
            else {
              BOOL v104 = v101 == -2;
            }
            if (v104) {
              uint64_t v102 = v81;
            }
            unsigned int v105 = v100 + v103++;
            unsigned int v100 = v105 & v99;
            uint64_t v81 = &v254[8 * (v105 & v99)];
            uint64_t v101 = *(void *)v81;
            if (*(void *)v81 == -1) {
              goto LABEL_403;
            }
          }
          int v80 = HIDWORD(v255);
        }
      }
      if (v254 == v79) {
        int v106 = v80;
      }
      else {
        int v106 = v255;
      }
      if (v81 == &v254[8 * v106]) {
        goto LABEL_421;
      }
      uint64_t v107 = *(void *)(a1 + 688);
      uint64_t v108 = *(void *)(a1 + 680);
      if (v107 == v108)
      {
        uint64_t v109 = *(unsigned int *)(a1 + 700);
        unint64_t v110 = (void *)(v107 + 8 * v109);
        if (v109)
        {
          uint64_t v111 = 0;
          uint64_t v112 = 8 * v109;
          while (*(void *)(v107 + v111) != v238)
          {
            v111 += 8;
            if (v112 == v111) {
              goto LABEL_260;
            }
          }
          unint64_t v110 = (void *)(v107 + v111);
        }
LABEL_260:
        uint64_t v108 = *(void *)(a1 + 688);
      }
      else
      {
        uint64_t v113 = *(unsigned int *)(a1 + 696);
        int v114 = v113 - 1;
        unsigned int v115 = (v113 - 1) & ((v238 >> 4) ^ (v238 >> 9));
        unint64_t v110 = (void *)(v107 + 8 * v115);
        uint64_t v116 = *v110;
        if (*v110 == -1)
        {
          unint64_t v117 = 0;
LABEL_409:
          if (v117) {
            unint64_t v110 = v117;
          }
          if (*v110 != v238) {
            unint64_t v110 = (void *)(v107 + 8 * v113);
          }
        }
        else
        {
          unint64_t v117 = 0;
          int v118 = 1;
          while (v116 != v238)
          {
            if (v117) {
              BOOL v119 = 0;
            }
            else {
              BOOL v119 = v116 == -2;
            }
            if (v119) {
              unint64_t v117 = v110;
            }
            unsigned int v120 = v115 + v118++;
            unsigned int v115 = v120 & v114;
            unint64_t v110 = (void *)(v107 + 8 * (v120 & v114));
            uint64_t v116 = *v110;
            if (*v110 == -1) {
              goto LABEL_409;
            }
          }
        }
      }
      BOOL v33 = v107 == v108;
      BOOL v121 = (unsigned int *)(a1 + 700);
      if (!v33) {
        BOOL v121 = (unsigned int *)(a1 + 696);
      }
      if (v110 != (void *)(v107 + 8 * *v121)) {
        goto LABEL_421;
      }
      if (v234) {
        break;
      }
LABEL_265:
      unsigned int v122 = (char *)v277[1];
      uint64_t v123 = HIDWORD(v278);
      if (v277[1] != v277[0])
      {
        unsigned int v127 = v278;
        unsigned int v75 = v232;
LABEL_389:
        if (3 * v127 <= 4 * (HIDWORD(v278) - v279))
        {
          if (v127 >= 0x40) {
            v127 *= 2;
          }
          else {
            unsigned int v127 = 128;
          }
        }
        else if (v127 - HIDWORD(v278) >= v127 >> 3)
        {
          goto LABEL_391;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v277, v127);
        unsigned int v127 = v278;
        unsigned int v122 = (char *)v277[1];
LABEL_391:
        unsigned int v191 = v127 - 1;
        unsigned int v192 = (v127 - 1) & ((v238 >> 4) ^ (v238 >> 9));
        uint64_t v193 = &v122[8 * v192];
        uint64_t v194 = *(void *)v193;
        if (*(void *)v193 == -1)
        {
          uint64_t v195 = 0;
LABEL_414:
          if (v195) {
            uint64_t v199 = v195;
          }
          else {
            uint64_t v199 = v193;
          }
          if (*(void *)v199 != v238)
          {
            if (*(void *)v199 == -2) {
              --v279;
            }
            else {
              ++HIDWORD(v278);
            }
            *(void *)uint64_t v199 = v238;
          }
        }
        else
        {
          uint64_t v195 = 0;
          int v196 = 1;
          while (v194 != v238)
          {
            if (v195) {
              BOOL v197 = 0;
            }
            else {
              BOOL v197 = v194 == -2;
            }
            if (v197) {
              uint64_t v195 = v193;
            }
            unsigned int v198 = v192 + v196++;
            unsigned int v192 = v198 & v191;
            uint64_t v193 = &v122[8 * (v198 & v191)];
            uint64_t v194 = *(void *)v193;
            if (*(void *)v193 == -1) {
              goto LABEL_414;
            }
          }
        }
        goto LABEL_421;
      }
      unsigned int v75 = v232;
      if (HIDWORD(v278))
      {
        uint64_t v124 = 0;
        uint64_t v125 = 8 * HIDWORD(v278);
        uint64_t v126 = v277[1];
        while (*v126 != v238)
        {
          if (*v126 == -2) {
            uint64_t v124 = v126;
          }
          ++v126;
          v125 -= 8;
          if (!v125)
          {
            if (!v124) {
              goto LABEL_273;
            }
            *uint64_t v124 = v238;
            --v279;
            goto LABEL_421;
          }
        }
        goto LABEL_421;
      }
LABEL_273:
      unsigned int v127 = v278;
      if (HIDWORD(v278) >= v278) {
        goto LABEL_389;
      }
      ++HIDWORD(v278);
      *((void *)v277[1] + v123) = v238;
LABEL_421:
      unsigned int v76 = v237 + 1;
      unsigned int v244 = v237 + 1;
      if (v237 + 1 >= v75)
      {
        LODWORD(a3) = v234;
        goto LABEL_429;
      }
    }
    uint64_t v128 = 0;
    while (1)
    {
      *(void *)int v265 = 1;
      for (uint64_t n = 8; n != 40; n += 8)
        *(_DWORD *)&v265[n] = -1;
      *(void *)&long long v267 = v268;
      *((void *)&v267 + 1) = 0x400000000;
      uint64_t v130 = a2 + 8 * v128;
      if (*(_DWORD *)(v130 + 4) == 1 || *(_DWORD *)v130 != 1) {
        break;
      }
      if (v277[1] == v277[0]) {
        uint64_t v131 = (uint64_t *)((char *)&v278 + 4);
      }
      else {
        uint64_t v131 = &v278;
      }
      uint64_t v132 = *(unsigned int *)v131;
      if (v132)
      {
        uint64_t v133 = 8 * v132;
        uint64_t v134 = (unint64_t *)v277[1];
        while (*v134 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v134;
          v133 -= 8;
          if (!v133) {
            goto LABEL_372;
          }
        }
      }
      else
      {
        uint64_t v134 = (unint64_t *)v277[1];
      }
      int v135 = (unint64_t *)((char *)v277[1] + 8 * v132);
      if (v134 != v135)
      {
        uint64_t v136 = (void *)*v134;
LABEL_291:
        unsigned int v243 = 0;
        unsigned int v243 = (*(uint64_t (**)(void, void, void))(***(void ***)(a1 + 616) + 680))(**(void **)(a1 + 616), 0, *v136);
        uint64_t v137 = sub_1CD8CD08C((uint64_t)v265, &v243);
        uint64_t v138 = v267 + 8 * DWORD2(v267);
        uint64_t v139 = (_DWORD *)sub_1CD8CD0EC((uint64_t)v265, &v243);
        if (v137 == v138) {
          int v140 = 1;
        }
        else {
          int v140 = *v139 + 1;
        }
        *uint64_t v139 = v140;
        BOOL v141 = v134 + 1;
        while (v141 != v135)
        {
          unint64_t v142 = *v141++;
          uint64_t v136 = (void *)v142;
          if (v142 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v134 = v141 - 1;
            goto LABEL_291;
          }
        }
      }
LABEL_372:
      int v185 = (unsigned int *)v267;
      if (DWORD2(v267))
      {
        uint64_t v186 = 8 * DWORD2(v267);
        do
        {
          uint64_t v187 = sub_1CD8CD08C(*(void *)v269 + 88 * v128, v185);
          uint64_t v188 = *(void *)v269 + 88 * v128;
          if (v187 == *(void *)(v188 + 40) + 8 * *(unsigned int *)(v188 + 48))
          {
            unsigned int v189 = v185[1];
          }
          else
          {
            unsigned int v190 = *(_DWORD *)sub_1CD8CD0EC(v188, v185);
            if (v190 <= v185[1]) {
              unsigned int v189 = v185[1];
            }
            else {
              unsigned int v189 = v190;
            }
            uint64_t v188 = *(void *)v269 + 88 * v128;
          }
          *(_DWORD *)sub_1CD8CD0EC(v188, v185) = v189;
          v185 += 2;
          v186 -= 8;
        }
        while (v186);
        int v185 = (unsigned int *)v267;
      }
      if (v185 != (unsigned int *)v268) {
        free(v185);
      }
      if ((v265[0] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v265[8], 4);
      }
      if (++v128 == v241) {
        goto LABEL_265;
      }
    }
    sub_1CD8CD1A0(a1, *(void *)v130);
    if (v277[1] == v277[0]) {
      uint64_t v143 = (uint64_t *)((char *)&v278 + 4);
    }
    else {
      uint64_t v143 = &v278;
    }
    uint64_t v144 = *(unsigned int *)v143;
    if (v144)
    {
      uint64_t v145 = 8 * v144;
      long long v146 = (unint64_t *)v277[1];
      while (*v146 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v146;
        v145 -= 8;
        if (!v145) {
          goto LABEL_372;
        }
      }
    }
    else
    {
      long long v146 = (unint64_t *)v277[1];
    }
    uint64_t v147 = (unint64_t *)((char *)v277[1] + 8 * v144);
    if (v146 == v147) {
      goto LABEL_372;
    }
    int v148 = (uint64_t ***)*v146;
LABEL_309:
    uint64_t v149 = *(void *)(a1 + 848);
    uint64_t v150 = *(void *)(a1 + 840);
    if (v149 == v150)
    {
      uint64_t v151 = *(unsigned int *)(a1 + 860);
      unsigned int v152 = (uint64_t ****)(v149 + 8 * v151);
      if (v151)
      {
        uint64_t v153 = 0;
        uint64_t v154 = 8 * v151;
        while (*(uint64_t ****)(v149 + v153) != v148)
        {
          v153 += 8;
          if (v154 == v153) {
            goto LABEL_327;
          }
        }
        unsigned int v152 = (uint64_t ****)(v149 + v153);
      }
LABEL_327:
      uint64_t v150 = *(void *)(a1 + 848);
    }
    else
    {
      uint64_t v155 = *(unsigned int *)(a1 + 856);
      int v156 = v155 - 1;
      unsigned int v157 = (v155 - 1) & ((v148 >> 4) ^ (v148 >> 9));
      unsigned int v152 = (uint64_t ****)(v149 + 8 * v157);
      uint64_t v158 = *v152;
      if (*v152 == (uint64_t ***)-1)
      {
        uint64_t v159 = 0;
LABEL_336:
        if (v159) {
          unsigned int v152 = v159;
        }
        if (*v152 != v148) {
          unsigned int v152 = (uint64_t ****)(v149 + 8 * v155);
        }
      }
      else
      {
        uint64_t v159 = 0;
        int v160 = 1;
        while (v158 != v148)
        {
          if (v159) {
            BOOL v161 = 0;
          }
          else {
            BOOL v161 = v158 == (uint64_t ***)-2;
          }
          if (v161) {
            uint64_t v159 = v152;
          }
          unsigned int v162 = v157 + v160++;
          unsigned int v157 = v162 & v156;
          unsigned int v152 = (uint64_t ****)(v149 + 8 * (v162 & v156));
          uint64_t v158 = *v152;
          if (*v152 == (uint64_t ***)-1) {
            goto LABEL_336;
          }
        }
      }
    }
    BOOL v33 = v149 == v150;
    uint64_t v163 = (unsigned int *)(a1 + 860);
    if (!v33) {
      uint64_t v163 = (unsigned int *)(a1 + 856);
    }
    if (v152 != (uint64_t ****)(v149 + 8 * *v163))
    {
LABEL_331:
      uint64_t v164 = v146 + 1;
      while (v164 != v147)
      {
        unint64_t v165 = *v164++;
        int v148 = (uint64_t ***)v165;
        if (v165 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          long long v146 = v164 - 1;
          goto LABEL_309;
        }
      }
      goto LABEL_372;
    }
    if (sub_1CD8CD258(a1, (uint64_t)v148, *(void *)v130))
    {
      unsigned int v243 = 0;
      unsigned int v243 = (*(uint64_t (**)(void, void, uint64_t **))(***(void ***)(a1 + 616) + 680))(**(void **)(a1 + 616), 0, *v148);
      uint64_t v233 = sub_1CD8CD08C((uint64_t)v265, &v243);
      uint64_t v166 = v267 + 8 * DWORD2(v267);
      uint64_t v167 = (_DWORD *)sub_1CD8CD0EC((uint64_t)v265, &v243);
      if (v233 == v166) {
        int v168 = 1;
      }
      else {
        int v168 = *v167 + 1;
      }
    }
    else
    {
      unsigned int v243 = 0;
      unsigned int v243 = (*(uint64_t (**)(void, uint64_t, uint64_t **))(***(void ***)(a1 + 616) + 680))(**(void **)(a1 + 616), 1, *v148);
      uint64_t v169 = sub_1CD8CD08C((uint64_t)v265, &v243);
      uint64_t v170 = *v148;
      unint64_t v171 = *(void *)v130;
      unsigned int v172 = *((unsigned __int8 *)*v148 + 8);
      if (v169 == (void)v267 + 8 * DWORD2(v267))
      {
        if (v172 == 12 || (v172 <= 0x14 ? (BOOL v175 = ((1 << v172) & 0x10A07F) == 0) : (BOOL v175 = 1), v175))
        {
          int v173 = 0;
        }
        else
        {
          if (HIDWORD(v171) == 1) {
            v177.n128_f64[0] = llvm::ScalableVectorType::get(v170, (llvm::Type *)v171);
          }
          else {
            v177.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v170, (llvm::Type *)v171);
          }
          int v178 = (*(uint64_t (**)(void, uint64_t, __n128))(*(void *)*v235 + 488))(*v235, v176, v177);
          if (v179) {
            int v173 = 0;
          }
          else {
            int v173 = v178;
          }
        }
        *(_DWORD *)sub_1CD8CD0EC((uint64_t)v265, &v243) = v173;
        goto LABEL_331;
      }
      if (v172 == 12 || (v172 <= 0x14 ? (BOOL v180 = ((1 << v172) & 0x10A07F) == 0) : (BOOL v180 = 1), v180))
      {
        int v174 = 0;
      }
      else
      {
        if (HIDWORD(v171) == 1) {
          v182.n128_f64[0] = llvm::ScalableVectorType::get(v170, (llvm::Type *)v171);
        }
        else {
          v182.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v170, (llvm::Type *)v171);
        }
        int v183 = (*(uint64_t (**)(void, uint64_t, __n128))(*(void *)*v235 + 488))(*v235, v181, v182);
        if (v184) {
          int v174 = 0;
        }
        else {
          int v174 = v183;
        }
      }
      uint64_t v167 = (_DWORD *)sub_1CD8CD0EC((uint64_t)v265, &v243);
      int v168 = *v167 + v174;
    }
    *uint64_t v167 = v168;
    goto LABEL_331;
  }
LABEL_429:
  if (a3)
  {
    uint64_t v201 = 0;
    uint64_t v240 = a3;
    do
    {
      *(void *)int v265 = 1;
      for (iuint64_t i = 8; ii != 40; ii += 8)
        *(_DWORD *)&v265[ii] = -1;
      *(void *)&long long v267 = v268;
      *((void *)&v267 + 1) = 0x400000000;
      if (v249 == v248) {
        uint64_t v203 = (uint64_t *)((char *)&v250 + 4);
      }
      else {
        uint64_t v203 = &v250;
      }
      uint64_t v204 = *(unsigned int *)v203;
      if (v204)
      {
        uint64_t v205 = 8 * v204;
        unint64_t v206 = v249;
        while (*(void *)v206 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v206 += 8;
          v205 -= 8;
          if (!v205) {
            goto LABEL_485;
          }
        }
      }
      else
      {
        unint64_t v206 = v249;
      }
      uint64_t v207 = &v249[8 * v204];
      if (v206 != v207)
      {
        uint64_t v208 = a2 + 8 * v201;
        uint64_t v209 = *(uint64_t ****)v206;
LABEL_455:
        if (*(_DWORD *)(v208 + 4) == 1 || *(_DWORD *)v208 != 1)
        {
          unsigned int v211 = *v209;
          unsigned int v212 = *((unsigned __int8 *)*v209 + 8);
          if (v212 == 12
            || ((v222 = v212 > 0x14, int v213 = (1 << v212) & 0x10A07F, !v222) ? (v214 = v213 == 0) : (v214 = 1), v214))
          {
            int v210 = 0;
          }
          else
          {
            uint64_t v215 = *(llvm::Type **)v208;
            if (HIDWORD(*(void *)v208) == 1) {
              v217.n128_f64[0] = llvm::ScalableVectorType::get(v211, v215);
            }
            else {
              v217.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v211, v215);
            }
            int v218 = (*(uint64_t (**)(void, uint64_t, __n128))(*(void *)*v235 + 488))(*v235, v216, v217);
            if (v219) {
              int v210 = 0;
            }
            else {
              int v210 = v218;
            }
          }
        }
        else
        {
          int v210 = 1;
        }
        unsigned int v244 = 0;
        unsigned int v220 = *(_DWORD *)v208;
        BOOL v222 = *(_DWORD *)(v208 + 4) == 1 && v220 != 0 || v220 > 1;
        uint64_t v223 = v222;
        unsigned int v244 = (*(uint64_t (**)(void, uint64_t, uint64_t **))(***(void ***)(a1 + 616) + 680))(**(void **)(a1 + 616), v223, *v209);
        uint64_t v224 = sub_1CD8CD08C((uint64_t)v265, &v244);
        uint64_t v225 = v267 + 8 * DWORD2(v267);
        char v226 = (int *)sub_1CD8CD0EC((uint64_t)v265, &v244);
        int v227 = *v226;
        if (v224 == v225) {
          int v227 = 0;
        }
        *char v226 = v227 + v210;
        char v228 = (unint64_t *)(v206 + 8);
        while (v228 != (unint64_t *)v207)
        {
          unint64_t v229 = *v228++;
          uint64_t v209 = (uint64_t ***)v229;
          if (v229 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v206 = (char *)(v228 - 1);
            goto LABEL_455;
          }
        }
      }
LABEL_485:
      sub_1CD8D69F0((uint64_t)v285, v265);
      sub_1CD8D6AE4((uint64_t)v286, (uint64_t)&v267);
      uint64_t v230 = (void *)(*(void *)v269 + 88 * v201);
      if (v230 != v288) {
        sub_1CD8D69F0((uint64_t)v288, (_DWORD *)(*(void *)v269 + 88 * v201));
      }
      sub_1CD8D6AE4((uint64_t)v289, (uint64_t)(v230 + 5));
      sub_1CD8CD318(*a4 + 176 * v201, v285);
      if ((unsigned char *)v267 != v268) {
        free((void *)v267);
      }
      if ((v265[0] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v265[8], 4);
      }
      ++v201;
    }
    while (v201 != v240);
  }
  sub_1CD8DB6F8((char **)v269);
  if (v277[1] != v277[0]) {
    free(v277[1]);
  }
  sub_1CD56A8A4(&v245);
  if (v249 != v248) {
    free(v249);
  }
  if (v254 != v253) {
    free(v254);
  }
  MEMORY[0x1D25D9CD0](v258, 8);
  if (v282 != v284) {
    free(v282);
  }
  sub_1CD8D6BD4((uint64_t)v285);
  if (__p)
  {
    uint64_t v264 = (char *)__p;
    operator delete(__p);
  }
  return MEMORY[0x1D25D9CD0](v262, 8);
}

void llvm::LoopVectorizationCostModel::selectVectorizationFactor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v84[6] = *MEMORY[0x1E4F143B8];
  llvm::LoopVectorizationCostModel::expectedCost(a1, 1uLL, 0, (uint64_t)&v69);
  uint64_t v7 = a1;
  *(void *)uint64_t v81 = 1;
  *(_OWORD *)&v81[8] = v69;
  *(_OWORD *)a3 = *(_OWORD *)v81;
  uint64_t v67 = a3;
  *(void *)(a3 + 16) = *(void *)&v81[16];
  uint64_t v8 = *(void *)(a1 + 664);
  int v9 = *(_DWORD *)(v8 + 40);
  uint64_t v68 = a1;
  if (v9 == -1) {
    llvm::Loop::getLoopID(*(llvm::Loop **)(v8 + 104));
  }
  if (v9 == 1)
  {
    unint64_t v10 = *(void *)(a2 + 160);
    if (!v10) {
      unint64_t v10 = *(unsigned int *)(a2 + 8);
    }
    if (v10 >= 2)
    {
      *(void *)(a3 + 8) = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)(a3 + 16) = 0;
    }
    int v11 = 1;
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v82 = (uint64_t **)v84;
  uint64_t v83 = 0x300000000;
  uint64_t v12 = *(void *)(a2 + 160);
  if (v12) {
    unint64_t v13 = *(char **)(a2 + 144);
  }
  else {
    unint64_t v13 = *(char **)a2;
  }
  uint64_t v14 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 8);
  uint64_t v15 = (char *)(a2 + 152);
  uint64_t v16 = v7 + 1160;
  while (v12)
  {
    if (v13 == v15) {
      goto LABEL_37;
    }
LABEL_18:
    if (v12) {
      int v17 = v13 + 28;
    }
    else {
      int v17 = v13;
    }
    if (*((_DWORD *)v17 + 1) == 1 || *(_DWORD *)v17 != 1)
    {
      llvm::LoopVectorizationCostModel::expectedCost(v7, *(void *)v17, (uint64_t)&v82, (uint64_t)&v69);
      *(void *)int v80 = *(void *)v17;
      *(_OWORD *)&v80[8] = v69;
      if ((((_BYTE)v70 == 0) & ~v11) == 0)
      {
        if (llvm::LoopVectorizationCostModel::isMoreProfitable(v68, (unsigned int *)v80, (unsigned int *)v81))
        {
          unint64_t v20 = sub_1CD483108(v16, (unint64_t)v80);
          uint64_t v21 = *(void *)(v68 + 1160) + 24 * *(unsigned int *)(v68 + 1168);
          long long v22 = *(_OWORD *)v20;
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
          *(_OWORD *)uint64_t v21 = v22;
          ++*(_DWORD *)(v68 + 1168);
        }
        if (llvm::LoopVectorizationCostModel::isMoreProfitable(v68, (unsigned int *)v80, (unsigned int *)v67))
        {
          *(_OWORD *)uint64_t v67 = *(_OWORD *)v80;
          *(void *)(v67 + 16) = *(void *)&v80[16];
        }
      }
      uint64_t v7 = v68;
    }
    if (v12)
    {
      uint64_t v18 = (char *)*((void *)v13 + 1);
      uint64_t v19 = v13;
      if (v18)
      {
        do
        {
          unint64_t v13 = v18;
          uint64_t v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v13 = (char *)*((void *)v19 + 2);
          BOOL v39 = *(void *)v13 == (void)v19;
          uint64_t v19 = v13;
        }
        while (!v39);
      }
    }
    else
    {
      v13 += 8;
    }
  }
  if (v13 != (char *)v14) {
    goto LABEL_18;
  }
LABEL_37:
  if (v83)
  {
    int v23 = 0;
    *(void *)&v80[8] = 0;
    *(void *)&v80[16] = 0;
    *(void *)int v80 = &v80[8];
    uint8x8_t v24 = (unint64_t *)v82;
    uint64_t v25 = (unint64_t *)&v82[2 * v83];
    while (1)
    {
      *((_DWORD *)sub_1CD4FD4E8((uint64_t **)v80, *v24, (uint64_t **)v24) + 10) = v23++;
LABEL_52:
      v24 += 2;
      if (v24 == v25) {
        break;
      }
      uint64_t v26 = *(void **)&v80[8];
      if (*(void *)&v80[8])
      {
        unint64_t v27 = *v24;
        do
        {
          unint64_t v28 = v26[4];
          if (v27 >= v28)
          {
            if (v28 >= v27) {
              goto LABEL_52;
            }
            ++v26;
          }
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
    }
    *(void *)&long long v69 = v80;
    unint64_t v29 = 126 - 2 * __clz(v83);
    if (v83) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    sub_1CD31F570(v82, (uint64_t)&v82[2 * v83], (uint64_t ***)&v69, v30, 1);
    uint64_t v31 = 0;
    int v32 = 0;
    while (1)
    {
      if (v31) {
        uint64_t v33 = v31;
      }
      else {
        uint64_t v33 = v83 != 0;
      }
      if (v31) {
        unsigned int v34 = v32;
      }
      else {
        unsigned int v34 = v82;
      }
      uint64_t v35 = *v34;
      uint64_t v36 = 16 * v33;
      if (v83 == v33)
      {
        if (!v83) {
          break;
        }
        int v37 = v82;
        uint64_t v38 = v34;
        while (*v38 == *v37)
        {
          BOOL v39 = *((_DWORD *)v38 + 2) == *((_DWORD *)v37 + 2) && *((_DWORD *)v38 + 3) == *((_DWORD *)v37 + 3);
          if (!v39) {
            break;
          }
          v38 += 2;
          v37 += 2;
          if (v38 == &v34[2 * v83]) {
            goto LABEL_75;
          }
        }
      }
      if (v82[2 * v33] != v35) {
        break;
      }
      if (v83 >= (unint64_t)(v33 + 1)) {
        uint64_t v31 = v33 + 1;
      }
      else {
        uint64_t v31 = v83;
      }
      int v32 = v82;
      if (!v83)
      {
        sub_1CD40B1BC(*(void **)&v80[8]);
        uint64_t v7 = v68;
        goto LABEL_38;
      }
    }
LABEL_75:
    long long __p = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    DWORD2(v69) = 0;
    char v73 = 0;
    uint64_t v74 = 0;
    *(void *)&long long v69 = &unk_1F2646F30;
    p_p = &__p;
    int v75 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v70 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v69, "Instruction with invalid costs prevented vectorization at VF=(", 0x3EuLL);
    if (v33)
    {
      uint64_t v40 = (_DWORD *)v34 + 3;
      do
      {
        unint64_t v41 = ", ";
        if (*(v40 - 1) == *((_DWORD *)v34 + 2))
        {
          if (*v40 == *((_DWORD *)v34 + 3)) {
            unint64_t v41 = "";
          }
          else {
            unint64_t v41 = ", ";
          }
        }
        size_t v42 = strlen(v41);
        if (v42 <= v71 - v72)
        {
          if (v42)
          {
            memcpy(v72, v41, v42);
            v72 += v42;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v69, v41, v42);
        }
        if (*v40 == 1)
        {
          BOOL v43 = v72;
          if ((unint64_t)(v71 - v72) > 8)
          {
            v72[8] = 32;
            *(void *)BOOL v43 = *(void *)"vscale x ";
            v72 += 9;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v69, "vscale x ", 9uLL);
          }
        }
        sub_1CD098D14((llvm::raw_ostream *)&v69, *(v40 - 1), 0, 0, 0);
        v40 += 4;
        v36 -= 16;
      }
      while (v36);
    }
    if ((unint64_t)(v71 - v72) > 1)
    {
      *(_WORD *)uint64_t v72 = 14889;
      uint64_t v44 = v72 + 2;
      v72 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v69, "):", 2uLL);
      uint64_t v44 = v72;
    }
    if (*((unsigned char *)v35 + 16) != 84 || v35 == 0)
    {
      if (v71 == v44)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v69, " ", 1uLL);
        unsigned int v46 = v72;
      }
      else
      {
        char *v44 = 32;
        unsigned int v46 = ++v72;
      }
      OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*((unsigned __int8 *)v35 + 16)
                                                                        - 28));
      size_t v48 = strlen(OpcodeName);
      size_t v49 = v48;
      if (v48 > v71 - v46)
      {
        uint64_t v50 = OpcodeName;
        size_t v51 = v48;
LABEL_121:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v69, v50, v51);
        goto LABEL_122;
      }
      if (v48)
      {
        memcpy(v46, OpcodeName, v48);
        uint64_t v66 = &v72[v49];
        goto LABEL_135;
      }
    }
    else
    {
      if ((unint64_t)(v71 - v44) > 8)
      {
        v44[8] = 32;
        *(void *)uint64_t v44 = *(void *)" call to ";
        v72 += 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v69, " call to ", 9uLL);
      }
      int v52 = (uint64_t ***)*(v35 - 4);
      if (!v52 || *((unsigned char *)v52 + 16) || v52[3] != (uint64_t **)v35[9]) {
        int v52 = 0;
      }
      if ((*((unsigned char *)v52 + 23) & 0x10) != 0)
      {
        uint64_t v53 = ***v52;
        uint64_t v54 = *(void *)(v53 + 152);
        uint64_t v55 = *(unsigned int *)(v53 + 168);
        if (v55)
        {
          LODWORD(v56) = (v55 - 1) & ((v52 >> 4) ^ (v52 >> 9));
          unint64_t v57 = (uint64_t ****)(v54 + 16 * v56);
          uint64_t v58 = *v57;
          if (*v57 != v52)
          {
            int v59 = 1;
            do
            {
              if (v58 == (uint64_t ***)-4096) {
                goto LABEL_118;
              }
              int v60 = v56 + v59++;
              uint64_t v56 = v60 & (v55 - 1);
              uint64_t v58 = *(uint64_t ****)(v54 + 16 * v56);
            }
            while (v58 != v52);
            unint64_t v57 = (uint64_t ****)(v54 + 16 * v56);
          }
        }
        else
        {
LABEL_118:
          unint64_t v57 = (uint64_t ****)(v54 + 16 * v55);
        }
        BOOL v61 = v57[1];
        size_t v63 = (size_t)*v61;
        uint64_t v50 = (const char *)(v61 + 2);
        size_t v62 = v63;
        if (v63 > v71 - v72)
        {
          size_t v51 = v62;
          goto LABEL_121;
        }
        if (v62)
        {
          memcpy(v72, v50, v62);
          uint64_t v66 = &v72[v62];
LABEL_135:
          uint64_t v72 = v66;
        }
      }
    }
LABEL_122:
    if (v72 != v70)
    {
      uint64_t v72 = v70;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v69, v70);
    }
    if (v79 >= 0) {
      unsigned int v64 = &__p;
    }
    else {
      unsigned int v64 = __p;
    }
    if (v79 >= 0) {
      uint64_t v65 = HIBYTE(v79) & 0x7F;
    }
    else {
      uint64_t v65 = v78;
    }
    llvm::reportVectorizationInfo((uint64_t)v64, v65, (uint64_t)"InvalidCost", 11, *(void *)(v68 + 648), *(void *)(v68 + 584));
  }
LABEL_38:
  if (!byte_1EA61E0E8 && *(_DWORD *)v7) {
    llvm::reportVectorizationFailure(v7, v6, (uint64_t)"store that is conditionally executed prevents vectorization", 59, (uint64_t)"ConditionalStore", 16, *(void *)(v7 + 648), *(void *)(v7 + 584));
  }
  if (v82 != v84) {
    free(v82);
  }
}

uint64_t llvm::LoopVectorizationCostModel::expectedCost@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v4 = *(void *)(result + 584);
  uint64_t v5 = *(llvm::BasicBlock ***)(v4 + 32);
  uint64_t v67 = *(llvm::BasicBlock ***)(v4 + 40);
  if (v67 != v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = &v82;
    uint64_t v8 = &v85;
    int v9 = &v79;
    unint64_t v10 = &v88;
    int v11 = (unsigned int *)(result + 700);
    uint64_t v12 = (unsigned int *)(result + 696);
    unint64_t v13 = (unsigned int *)(result + 860);
    uint64_t v74 = (unsigned int *)(result + 856);
    BOOL v14 = HIDWORD(a2) == 1;
    if (!a2) {
      BOOL v14 = 0;
    }
    if (a2 > 1) {
      BOOL v14 = 1;
    }
    BOOL v73 = v14;
    BOOL v15 = a2 == 1 && HIDWORD(a2) != 1;
    BOOL v66 = v15;
    uint64_t v65 = (unsigned int *)(result + 860);
    do
    {
      long long v69 = *v5;
      llvm::BasicBlock::instructionsWithoutDebug(*v5, 1, (uint64_t)&v84);
      long long v81 = v84;
      if (v86)
      {
        if (v86 == v8)
        {
          uint64_t v83 = (uint64_t)v7;
          (*(void (**)(uint64_t *, uint64_t *))(v85 + 24))(v8, v7);
        }
        else
        {
          uint64_t v83 = (*(uint64_t (**)(uint64_t *))(*v86 + 16))(v86);
        }
      }
      else
      {
        uint64_t v83 = 0;
      }
      long long v78 = v87;
      if (v89)
      {
        if (v89 == v10)
        {
          uint64_t v80 = (uint64_t)v9;
          (*(void (**)(uint64_t *, uint64_t *))(v88 + 24))(v10, v9);
        }
        else
        {
          uint64_t v80 = (*(uint64_t (**)(uint64_t *))(*v89 + 16))(v89);
        }
      }
      else
      {
        uint64_t v80 = 0;
      }
      uint64_t v17 = v81;
      if ((void)v81 == (void)v78)
      {
        uint64_t v71 = 0;
        int64_t v72 = 0;
      }
      else
      {
        uint64_t v71 = 0;
        int64_t v72 = 0;
        do
        {
          if (v17) {
            uint64_t v18 = v17 - 24;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = *(void *)(v6 + 688);
          uint64_t v20 = *(void *)(v6 + 680);
          if (v19 == v20)
          {
            uint64_t v21 = *v11;
            long long v22 = (void *)(v19 + 8 * v21);
            if (v21)
            {
              uint64_t v23 = 0;
              uint64_t v24 = 8 * v21;
              while (*(void *)(v19 + v23) != v18)
              {
                v23 += 8;
                if (v24 == v23) {
                  goto LABEL_43;
                }
              }
              long long v22 = (void *)(v19 + v23);
            }
LABEL_43:
            uint64_t v20 = *(void *)(v6 + 688);
          }
          else
          {
            uint64_t v25 = *v12;
            int v26 = v25 - 1;
            unsigned int v27 = (v25 - 1) & ((v18 >> 4) ^ (v18 >> 9));
            long long v22 = (void *)(v19 + 8 * v27);
            uint64_t v28 = *v22;
            if (*v22 == -1)
            {
              unint64_t v29 = 0;
LABEL_67:
              if (v29) {
                long long v22 = v29;
              }
              if (*v22 != v18) {
                long long v22 = (void *)(v19 + 8 * v25);
              }
            }
            else
            {
              unint64_t v29 = 0;
              int v30 = 1;
              while (v28 != v18)
              {
                if (v29) {
                  BOOL v31 = 0;
                }
                else {
                  BOOL v31 = v28 == -2;
                }
                if (v31) {
                  unint64_t v29 = v22;
                }
                unsigned int v32 = v27 + v30++;
                unsigned int v27 = v32 & v26;
                long long v22 = (void *)(v19 + 8 * (v32 & v26));
                uint64_t v28 = *v22;
                if (*v22 == -1) {
                  goto LABEL_67;
                }
              }
            }
          }
          if (v19 == v20) {
            uint64_t v33 = v11;
          }
          else {
            uint64_t v33 = v12;
          }
          if (v22 != (void *)(v19 + 8 * *v33)) {
            goto LABEL_76;
          }
          if (!v73) {
            goto LABEL_81;
          }
          uint64_t v34 = *(void *)(v6 + 848);
          uint64_t v35 = *(void *)(v6 + 840);
          if (v34 == v35)
          {
            uint64_t v36 = *v13;
            int v37 = (void *)(v34 + 8 * v36);
            if (v36)
            {
              uint64_t v38 = 0;
              uint64_t v39 = 8 * v36;
              while (*(void *)(v34 + v38) != v18)
              {
                v38 += 8;
                if (v39 == v38) {
                  goto LABEL_72;
                }
              }
              int v37 = (void *)(v34 + v38);
            }
LABEL_72:
            uint64_t v35 = *(void *)(v6 + 848);
          }
          else
          {
            uint64_t v40 = *v74;
            int v41 = v40 - 1;
            unsigned int v42 = (v40 - 1) & ((v18 >> 4) ^ (v18 >> 9));
            int v37 = (void *)(v34 + 8 * v42);
            uint64_t v43 = *v37;
            if (*v37 == -1)
            {
              uint64_t v44 = 0;
LABEL_85:
              if (v44) {
                int v37 = v44;
              }
              if (*v37 != v18) {
                int v37 = (void *)(v34 + 8 * v40);
              }
            }
            else
            {
              uint64_t v44 = 0;
              int v45 = 1;
              while (v43 != v18)
              {
                if (v44) {
                  BOOL v46 = 0;
                }
                else {
                  BOOL v46 = v43 == -2;
                }
                if (v46) {
                  uint64_t v44 = v37;
                }
                unsigned int v47 = v42 + v45++;
                unsigned int v42 = v47 & v41;
                int v37 = (void *)(v34 + 8 * (v47 & v41));
                uint64_t v43 = *v37;
                if (*v37 == -1) {
                  goto LABEL_85;
                }
              }
            }
          }
          BOOL v31 = v34 == v35;
          size_t v48 = v74;
          if (v31) {
            size_t v48 = v13;
          }
          if (v37 == (void *)(v34 + 8 * *v48))
          {
LABEL_81:
            uint64_t v50 = v10;
            size_t v51 = v9;
            int v52 = v8;
            uint64_t v53 = v7;
            llvm::LoopVectorizationCostModel::getInstructionCost(v6, v18, a2, (uint64_t)&v75);
            int v54 = v76;
            if (v76 || !word_1EBD00F88)
            {
              if (a3 && v76)
              {
                uint64_t v56 = *(unsigned int *)(a3 + 8);
                if (v56 >= *(_DWORD *)(a3 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unint64_t v57 = (uint64_t *)(*(void *)a3 + 16 * v56);
                *unint64_t v57 = v18;
                v57[1] = a2;
                ++*(_DWORD *)(a3 + 8);
              }
              int v58 = v71;
              if (v54 == 1) {
                int v58 = 1;
              }
              LODWORD(v71) = v58;
              uint64_t v55 = v75;
            }
            else
            {
              uint64_t v55 = dword_1EBD01000;
            }
            uint64_t v7 = v53;
            BOOL v59 = __OFADD__(v72, v55);
            int64_t v60 = v72 + v55;
            if (v59) {
              int64_t v60 = (v60 >> 63) ^ 0x8000000000000000;
            }
            int64_t v72 = v60;
            BYTE4(v71) |= v77;
            uint64_t v17 = v81;
            uint64_t v8 = v52;
            int v9 = v51;
            unint64_t v10 = v50;
            unint64_t v13 = v65;
          }
LABEL_76:
          do
          {
            uint64_t v17 = *(void *)(v17 + 8);
            *(void *)&long long v81 = v17;
            if (v17 == *((void *)&v81 + 1)) {
              break;
            }
            if (!v83)
            {
              sub_1CB920400();
              return llvm::LoopVectorizationCostModel::isCandidateForEpilogueVectorization(v62, v63);
            }
            char v49 = (*(uint64_t (**)(void))(*(void *)v83 + 48))();
            uint64_t v17 = v81;
          }
          while ((v49 & 1) == 0);
        }
        while (v17 != (void)v78);
      }
      if ((uint64_t *)v80 == v9)
      {
        (*(void (**)(uint64_t *))(v79 + 32))(v9);
      }
      else if (v80)
      {
        (*(void (**)(void))(*(void *)v80 + 40))();
      }
      if ((uint64_t *)v83 == v7)
      {
        (*(void (**)(uint64_t *))(v82 + 32))(v7);
      }
      else if (v83)
      {
        (*(void (**)(void))(*(void *)v83 + 40))();
      }
      if (v89 == v10)
      {
        (*(void (**)(uint64_t *))(v88 + 32))(v10);
      }
      else if (v89)
      {
        (*(void (**)(void))(*v89 + 40))();
      }
      uint64_t result = (uint64_t)v86;
      if (v86 == v8)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *))(v85 + 32))(v8);
      }
      else if (v86)
      {
        uint64_t result = (*(uint64_t (**)(void))(*v86 + 40))();
      }
      if (v66) {
        llvm::LoopAccessInfo::blockNeedsPredication(v69, **(llvm::BasicBlock ***)(v6 + 608), *(llvm::Loop **)(*(void *)(v6 + 608) + 40), v16);
      }
      if (v71 == 1) {
        *(_DWORD *)(a4 + 8) = 1;
      }
      int64_t v61 = *(void *)a4 + v72;
      if (__OFADD__(*(void *)a4, v72)) {
        int64_t v61 = (v61 >> 63) ^ 0x8000000000000000;
      }
      *(void *)a4 = v61;
      *(unsigned char *)(a4 + 16) |= BYTE4(v71);
      ++v5;
    }
    while (v5 != v67);
  }
  return result;
}

uint64_t llvm::LoopVectorizationCostModel::isCandidateForEpilogueVectorization(uint64_t a1, uint64_t a2)
{
  if (*(void *)(**(void **)(a2 + 32) + 40) == **(void **)(a2 + 32) + 40
    || ((v3 = *(void *)(**(void **)(a2 + 32) + 48), v4 = v3 - 24, v3) ? (uint64_t v5 = v3 - 24) : (uint64_t v5 = 0),
        !v3 || *(unsigned char *)(v5 + 16) != 83))
  {
LABEL_39:
    if (*(void *)(*(void *)(a1 + 608) + 152) != *(void *)(*(void *)(a1 + 608) + 160)) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
    }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock();
  }
  uint64_t v6 = *(void *)(a1 + 608);
  uint64_t v8 = *(void *)(v6 + 240);
  uint64_t v7 = *(void *)(v6 + 248);
  uint64_t v9 = 256;
  if (v7 == v8) {
    uint64_t v9 = 260;
  }
  unint64_t v10 = (void *)(v7 + 8 * *(unsigned int *)(v6 + v9));
  while (1)
  {
    if (v7 == v8)
    {
      uint64_t v11 = *(unsigned int *)(v6 + 260);
      uint64_t v12 = (void *)(v7 + 8 * v11);
      if (v11)
      {
        uint64_t v13 = 8 * v11;
        BOOL v14 = *(void **)(v6 + 248);
        while (*v14 != v4)
        {
          ++v14;
          v13 -= 8;
          if (!v13) {
            goto LABEL_33;
          }
        }
        uint64_t v12 = v14;
      }
    }
    else
    {
      uint64_t v15 = *(unsigned int *)(v6 + 256);
      int v16 = v15 - 1;
      unsigned int v17 = (v15 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v12 = (void *)(v7 + 8 * v17);
      uint64_t v18 = *v12;
      if (*v12 == -1)
      {
        uint64_t v19 = 0;
LABEL_29:
        if (v19) {
          uint64_t v12 = v19;
        }
        if (*v12 != v4) {
          uint64_t v12 = (void *)(v7 + 8 * v15);
        }
      }
      else
      {
        uint64_t v19 = 0;
        int v20 = 1;
        while (v18 != v4)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v18 == -2;
          }
          if (v21) {
            uint64_t v19 = v12;
          }
          unsigned int v22 = v17 + v20++;
          unsigned int v17 = v22 & v16;
          uint64_t v12 = (void *)(v7 + 8 * (v22 & v16));
          uint64_t v18 = *v12;
          if (*v12 == -1) {
            goto LABEL_29;
          }
        }
      }
    }
LABEL_33:
    if (v12 != v10) {
      return 0;
    }
    uint64_t v23 = *(void *)(v4 + 32);
    uint64_t v4 = v23 - 24;
    if (v23) {
      uint64_t v24 = v23 - 24;
    }
    else {
      uint64_t v24 = 0;
    }
    if (!v23 || *(unsigned char *)(v24 + 16) != 83) {
      goto LABEL_39;
    }
  }
}

BOOL llvm::LoopVectorizationCostModel::isEpilogueVectorizationProfitable(uint64_t a1, unsigned int a2)
{
  return (*(unsigned int (**)(void))(***(void ***)(a1 + 616) + 816))(**(void **)(a1 + 616)) > 1
      && dword_1EBD007C0 <= a2;
}

uint64_t llvm::LoopVectorizationCostModel::selectEpilogueVectorizationFactor@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = 0;
  long long v29 = 1uLL;
  if (!byte_1EBD00640) {
    goto LABEL_44;
  }
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 120)) {
    goto LABEL_44;
  }
  uint64_t result = llvm::LoopVectorizationCostModel::isCandidateForEpilogueVectorization(result, *(void *)(result + 584));
  if ((result & 1) == 0) {
    goto LABEL_44;
  }
  uint64_t v8 = dword_1EBD00700;
  if (dword_1EBD00700 < 2)
  {
    uint64_t v12 = *(void *)(*(void *)(**(void **)(*(void *)(v5 + 584) + 32) + 56) + 112);
    if (v12 && ((*(unsigned char *)(v12 + 17) & 4) != 0 || *(char *)(v12 + 13) < 0)) {
      goto LABEL_44;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v5 + 616) + 816))(**(void **)(v5 + 616), a2);
    if (result < 2 || dword_1EBD007C0 > a2) {
      goto LABEL_44;
    }
    unint64_t v14 = a2 & 0xFFFFFFFF00000000;
    unsigned int v27 = a2;
    if ((a2 & 0xFFFFFFFF00000000) == 0x100000000)
    {
      uint64_t result = llvm::LoopVectorizationCostModel::getVScaleForTuning((llvm::LoopVectorizationCostModel *)v5);
      if ((result & 0xFF00000000) != 0) {
        int v26 = result;
      }
      else {
        int v26 = 1;
      }
      unsigned int v27 = v26 * a2;
    }
    unsigned int v15 = *(_DWORD *)(v5 + 1168);
    if (!v15) {
      goto LABEL_44;
    }
    int v16 = *(long long **)(v5 + 1160);
    uint64_t v28 = (long long *)((char *)v16 + 24 * v15);
    while (1)
    {
      int v17 = *((_DWORD *)v16 + 1);
      if (v14 != 0x100000000 || v17 == 1)
      {
        if (v14 != 0x100000000 && v17 == 1) {
          goto LABEL_39;
        }
        unsigned int v19 = *(_DWORD *)v16;
      }
      else
      {
        unsigned int v19 = *(_DWORD *)v16;
        if (*(_DWORD *)v16 < v27) {
          goto LABEL_30;
        }
      }
      if (v19 < a2)
      {
LABEL_30:
        BOOL v20 = DWORD1(v29) != 1 && v29 == 1;
        if (v20
          || (uint64_t result = llvm::LoopVectorizationCostModel::isMoreProfitable(v5, (unsigned int *)v16, (unsigned int *)&v29),
              result))
        {
          uint64_t v21 = *(unsigned int *)(a3 + 96);
          if (v21)
          {
            unsigned int v22 = *(void **)(a3 + 88);
            uint64_t v23 = 8 * v21;
            int v24 = *(_DWORD *)v16;
            int v25 = *((_DWORD *)v16 + 1);
            while (1)
            {
              uint64_t result = sub_1CD8D72A4(*v22 + 8, v24, v25, &v31);
              if (result) {
                break;
              }
              ++v22;
              v23 -= 8;
              if (!v23) {
                goto LABEL_39;
              }
            }
            long long v29 = *v16;
            uint64_t v30 = *((void *)v16 + 2);
          }
        }
      }
LABEL_39:
      int v16 = (long long *)((char *)v16 + 24);
      if (v16 == v28) {
        goto LABEL_44;
      }
    }
  }
  uint64_t v9 = *(unsigned int *)(a3 + 96);
  if (!v9)
  {
LABEL_44:
    *(_OWORD *)a4 = v29;
    *(void *)(a4 + 16) = v30;
    return result;
  }
  unint64_t v10 = *(void **)(a3 + 88);
  uint64_t v11 = 8 * v9;
  while (1)
  {
    uint64_t result = sub_1CD8D72A4(*v10 + 8, v8, 0, &v31);
    if (result) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      goto LABEL_44;
    }
  }
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = v8;
  return result;
}

void *llvm::LoopVectorizationCostModel::collectElementTypesForWidening(llvm::LoopVectorizationCostModel *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v52 = (void **)((char *)this + 1000);
  uint64_t result = (void *)*((void *)this + 126);
  if (result != *((void **)this + 125))
  {
    uint64_t v50 = *((unsigned int *)this + 254);
    if (v50 >= 0x21 && 4 * (*((_DWORD *)this + 255) - *((_DWORD *)this + 256)) < v50)
    {
      uint64_t result = llvm::SmallPtrSetImplBase::shrink_and_clear(v52);
      goto LABEL_3;
    }
    uint64_t result = memset(result, 255, 8 * v50);
  }
  *(void *)((char *)this + 1020) = 0;
LABEL_3:
  uint64_t v3 = *((void *)this + 73);
  uint64_t v4 = *(llvm::BasicBlock ***)(v3 + 32);
  uint64_t v53 = *(llvm::BasicBlock ***)(v3 + 40);
  if (v53 == v4) {
    return result;
  }
  while (2)
  {
    llvm::BasicBlock::instructionsWithoutDebug(*v4, 1, (uint64_t)&v62);
    long long v59 = v62;
    if (v64)
    {
      if (v64 == v63)
      {
        int64_t v61 = v60;
        (*(void (**)(void *, void *))(v63[0] + 24))(v63, v60);
      }
      else
      {
        int64_t v61 = (void *)(*(uint64_t (**)(void))(*v64 + 16))();
      }
    }
    else
    {
      int64_t v61 = 0;
    }
    long long v56 = v65;
    if (v67)
    {
      if (v67 == v66)
      {
        int v58 = v57;
        (*(void (**)(void *, void *))(v66[0] + 24))(v66, v57);
      }
      else
      {
        int v58 = (void *)(*(uint64_t (**)(void))(*v67 + 16))();
      }
    }
    else
    {
      int v58 = 0;
    }
    uint64_t v5 = v59;
LABEL_15:
    while (v5 != (void)v56)
    {
      if (v5) {
        uint64_t v6 = v5 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *((void *)this + 86);
      uint64_t v8 = *((void *)this + 85);
      if (v7 == v8)
      {
        uint64_t v9 = *((unsigned int *)this + 175);
        unint64_t v10 = (void *)(v7 + 8 * v9);
        if (v9)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 8 * v9;
          while (*(void *)(v7 + v11) != v6)
          {
            v11 += 8;
            if (v12 == v11) {
              goto LABEL_37;
            }
          }
          unint64_t v10 = (void *)(v7 + v11);
        }
LABEL_37:
        uint64_t v8 = *((void *)this + 86);
      }
      else
      {
        uint64_t v13 = *((unsigned int *)this + 174);
        int v14 = v13 - 1;
        unsigned int v15 = (v13 - 1) & ((v6 >> 4) ^ (v6 >> 9));
        unint64_t v10 = (void *)(v7 + 8 * v15);
        uint64_t v16 = *v10;
        if (*v10 == -1)
        {
          int v17 = 0;
LABEL_84:
          if (v17) {
            unint64_t v10 = v17;
          }
          if (*v10 != v6) {
            unint64_t v10 = (void *)(v7 + 8 * v13);
          }
        }
        else
        {
          int v17 = 0;
          int v18 = 1;
          while (v16 != v6)
          {
            if (v17) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v16 == -2;
            }
            if (v19) {
              int v17 = v10;
            }
            unsigned int v20 = v15 + v18++;
            unsigned int v15 = v20 & v14;
            unint64_t v10 = (void *)(v7 + 8 * (v20 & v14));
            uint64_t v16 = *v10;
            if (*v10 == -1) {
              goto LABEL_84;
            }
          }
        }
      }
      if (v7 == v8) {
        uint64_t v21 = (char *)this + 700;
      }
      else {
        uint64_t v21 = (char *)this + 696;
      }
      if (v10 != (void *)(v7 + 8 * *(unsigned int *)v21)) {
        goto LABEL_42;
      }
      int v23 = *(unsigned __int8 *)(v6 + 16);
      if ((v23 - 60) > 0x17 || ((1 << (v23 - 60)) & 0x800003) == 0) {
        goto LABEL_42;
      }
      uint64_t v25 = *(void *)v6;
      if (v23 == 83) {
        uint64_t v26 = v6;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v5 && v23 == 83)
      {
        uint64_t v42 = *((void *)this + 76);
        uint64_t v54 = 0;
        uint64_t v55 = v26;
        if (sub_1CD3C8538((uint64_t *)(v42 + 80), &v55, &v54))
        {
          uint64_t v43 = v54;
          uint64_t v44 = *(void *)(v42 + 80);
          uint64_t v45 = *(unsigned int *)(v42 + 96);
        }
        else
        {
          uint64_t v44 = *(void *)(v42 + 80);
          uint64_t v45 = *(unsigned int *)(v42 + 96);
          uint64_t v43 = v44 + 16 * v45;
        }
        if (v43 == v44 + 16 * v45) {
          goto LABEL_42;
        }
        uint64_t v46 = sub_1CD8CD010(*((void *)this + 76) + 80, v26);
        if (byte_1EA61E268) {
          goto LABEL_42;
        }
        uint64_t v47 = v46;
        if (!llvm::LoopVectorizeHints::allowReordering(*((llvm::LoopVectorizeHints **)this + 83)))
        {
          if (*(unsigned char *)(v47 + 65)) {
            goto LABEL_42;
          }
        }
        size_t v48 = (void *)*((void *)this + 77);
        uint64_t Opcode = llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v47 + 40));
        if ((*(uint64_t (**)(void, uint64_t, void, void))(*(void *)*v48 + 1136))(*v48, Opcode, *(void *)(v47 + 56), 0))goto LABEL_42; {
        uint64_t v25 = *(void *)(v47 + 56);
        }
        int v23 = *(unsigned __int8 *)(v6 + 16);
LABEL_57:
        if (v23 == 61) {
          uint64_t v25 = **(void **)(v6 - 64);
        }
        goto LABEL_59;
      }
      if (v5) {
        goto LABEL_57;
      }
LABEL_59:
      uint64_t v27 = *((void *)this + 126);
      uint64_t v28 = *((unsigned int *)this + 255);
      if (v27 != *((void *)this + 125))
      {
        unsigned int v32 = *((_DWORD *)this + 254);
LABEL_70:
        if (3 * v32 <= 4 * ((int)v28 - *((_DWORD *)this + 256)))
        {
          if (v32 >= 0x40) {
            v32 *= 2;
          }
          else {
            unsigned int v32 = 128;
          }
        }
        else if (v32 - v28 >= v32 >> 3)
        {
          goto LABEL_72;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v52, v32);
        unsigned int v32 = *((_DWORD *)this + 254);
        uint64_t v27 = *((void *)this + 126);
LABEL_72:
        unsigned int v33 = v32 - 1;
        unsigned int v34 = (v32 - 1) & ((v25 >> 4) ^ (v25 >> 9));
        uint64_t v35 = (void *)(v27 + 8 * v34);
        uint64_t v36 = *v35;
        if (*v35 == -1)
        {
          int v37 = 0;
LABEL_89:
          if (v37) {
            int v41 = v37;
          }
          else {
            int v41 = v35;
          }
          if (*v41 != v25)
          {
            if (*v41 == -2) {
              --*((_DWORD *)this + 256);
            }
            else {
              ++*((_DWORD *)this + 255);
            }
            void *v41 = v25;
          }
        }
        else
        {
          int v37 = 0;
          int v38 = 1;
          while (v36 != v25)
          {
            if (v37) {
              BOOL v39 = 0;
            }
            else {
              BOOL v39 = v36 == -2;
            }
            if (v39) {
              int v37 = v35;
            }
            unsigned int v40 = v34 + v38++;
            unsigned int v34 = v40 & v33;
            uint64_t v35 = (void *)(v27 + 8 * (v40 & v33));
            uint64_t v36 = *v35;
            if (*v35 == -1) {
              goto LABEL_89;
            }
          }
        }
        goto LABEL_42;
      }
      if (v28)
      {
        long long v29 = 0;
        uint64_t v30 = 8 * v28;
        uint64_t v31 = (void *)*((void *)this + 126);
        while (*v31 != v25)
        {
          if (*v31 == -2) {
            long long v29 = v31;
          }
          ++v31;
          v30 -= 8;
          if (!v30)
          {
            if (!v29) {
              goto LABEL_67;
            }
            *long long v29 = v25;
            --*((_DWORD *)this + 256);
            goto LABEL_42;
          }
        }
        goto LABEL_42;
      }
LABEL_67:
      unsigned int v32 = *((_DWORD *)this + 254);
      if (v28 >= v32) {
        goto LABEL_70;
      }
      *((_DWORD *)this + 255) = v28 + 1;
      *(void *)(v27 + 8 * v28) = v25;
LABEL_42:
      uint64_t v5 = *(void *)(v59 + 8);
      *(void *)&long long v59 = v5;
      if (v5 != *((void *)&v59 + 1))
      {
        while (v61)
        {
          char v22 = (*(uint64_t (**)(void))(*v61 + 48))();
          uint64_t v5 = v59;
          if ((v22 & 1) == 0)
          {
            uint64_t v5 = *(void *)(v59 + 8);
            *(void *)&long long v59 = v5;
            if (v5 != *((void *)&v59 + 1)) {
              continue;
            }
          }
          goto LABEL_15;
        }
        sub_1CB920400();
        return (void *)llvm::LoopVectorizationCostModel::selectInterleaveCount();
      }
    }
    if (v58 == v57)
    {
      (*(void (**)(void *))(v57[0] + 32))(v57);
    }
    else if (v58)
    {
      (*(void (**)(void))(*v58 + 40))();
    }
    if (v61 == v60)
    {
      (*(void (**)(void *))(v60[0] + 32))(v60);
    }
    else if (v61)
    {
      (*(void (**)(void))(*v61 + 40))();
    }
    if (v67 == v66)
    {
      (*(void (**)(void *))(v66[0] + 32))(v66);
    }
    else if (v67)
    {
      (*(void (**)(void))(*v67 + 40))();
    }
    uint64_t result = v64;
    if (v64 == v63)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(v63[0] + 32))(v63);
    }
    else if (v64)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*v64 + 40))();
    }
    if (++v4 != v53) {
      continue;
    }
    return result;
  }
}

uint64_t llvm::LoopVectorizationCostModel::selectInterleaveCount(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 120) || *(_DWORD *)(*(void *)(*(void *)(a1 + 608) + 56) + 40) != -1) {
    return 1;
  }
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = sub_1CD30A65C(*(llvm::ScalarEvolution **)(*(void *)(a1 + 592) + 88), *(const llvm::Loop **)(a1 + 584));
  unsigned int v8 = v7;
  uint64_t v9 = *(void *)(a1 + 608);
  uint64_t v10 = *(void *)(v9 + 104);
  uint64_t v11 = *(void *)(v9 + 112);
  uint64_t v12 = v7 & 0xFF00000000;
  BOOL v13 = (v7 & 0xFF00000000) != 0 && dword_1EBD00C40 > v7;
  if (!v13 || (uint64_t v14 = 1, byte_1EBD013C0) && v10 != v11 && v6 != 1 && a2 == 1)
  {
    if (a3
      || (llvm::LoopVectorizationCostModel::expectedCost(a1, a2, 0, (uint64_t)&v80), uint64_t v14 = 1, !v81)
      && (a3 = v80) != 0)
    {
      BOOL v74 = v10 != v11;
      uint64_t v76 = v10;
      unint64_t v79 = a2;
      llvm::LoopVectorizationCostModel::calculateRegisterUsage(a1, (uint64_t)&v79, 1uLL, &v80);
      unsigned int v15 = v80;
      sub_1CD8D6960(v83, v80);
      sub_1CD8D6960(v85, v15 + 22);
      uint64_t v16 = (uint64_t *)v80;
      if (v81)
      {
        uint64_t v17 = 176 * v81;
        int v18 = (char *)v80 - 176;
        do
        {
          sub_1CD8D6BD4((uint64_t)&v18[v17]);
          v17 -= 176;
        }
        while (v17);
        uint64_t v16 = (uint64_t *)v80;
      }
      uint64_t v75 = v12;
      if (v16 != &v82) {
        free(v16);
      }
      int v77 = v6;
      if (v87)
      {
        uint64_t v21 = v86;
        uint64_t v22 = 8 * v87;
        int v23 = (int *)(v86 + 1);
        uint64_t v24 = v22;
        do
        {
          int v25 = *v23;
          if (*v23 <= 1) {
            int v25 = 1;
          }
          int *v23 = v25;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        BOOL v27 = v6 != 1 && a2 == 1;
        BOOL v78 = v27;
        unsigned int v19 = -1;
        do
        {
          int v28 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 616) + 672))(**(void **)(a1 + 616), *v21);
          long long v29 = (unsigned __int16 *)&unk_1EBD00D48;
          if (v78) {
            long long v29 = (unsigned __int16 *)&unk_1EBD00C88;
          }
          int v30 = *v29;
          uint64_t v31 = (int *)&unk_1EBD00D00;
          if (!v78) {
            uint64_t v31 = (int *)&unk_1EBD00DC0;
          }
          int v32 = *v31;
          if (v30) {
            int v33 = v32;
          }
          else {
            int v33 = v28;
          }
          unsigned int v34 = v21[1];
          uint64_t v35 = sub_1CD8CD08C((uint64_t)v83, v21);
          if (v35 == v83[5] + 8 * v84) {
            int v36 = 0;
          }
          else {
            int v36 = *(_DWORD *)sub_1CD8CD0EC((uint64_t)v83, v21);
          }
          unsigned int v37 = v33 - v36;
          uint64_t v38 = 1 << ~__clz(v37 / v34);
          if (v34 > v37) {
            LODWORD(v38) = 0;
          }
          unsigned int v39 = v37 - 1;
          unsigned int v40 = v34 - 1;
          if (v34 - 1 <= 1) {
            unsigned int v40 = 1;
          }
          uint64_t v41 = 1 << ~__clz(v39 / v40);
          if (v40 <= v39) {
            unsigned int v42 = v41;
          }
          else {
            unsigned int v42 = 0;
          }
          if (!byte_1EBD01540) {
            unsigned int v42 = v38;
          }
          if (v42 < v19) {
            unsigned int v19 = v42;
          }
          v21 += 2;
          v22 -= 8;
        }
        while (v22);
      }
      else
      {
        unsigned int v19 = -1;
      }
      unsigned int v43 = (*(uint64_t (**)(void, unint64_t))(***(void ***)(a1 + 616) + 816))(**(void **)(a1 + 616), a2);
      uint64_t v45 = (unsigned __int16 *)&unk_1EBD00EC8;
      if (v77 != 1 && a2 == 1) {
        uint64_t v45 = (unsigned __int16 *)&unk_1EBD00E08;
      }
      int v46 = *v45;
      uint64_t v47 = (unsigned int *)&unk_1EBD00F40;
      if (v77 != 1 && a2 == 1) {
        uint64_t v47 = (unsigned int *)&unk_1EBD00E80;
      }
      unsigned int v48 = *v47;
      if (!v46) {
        unsigned int v48 = v43;
      }
      unsigned int v49 = v8 / a2;
      if (v48 < v8 / a2) {
        unsigned int v49 = v48;
      }
      if (v49 <= 1) {
        unsigned int v49 = 1;
      }
      if (v75) {
        unsigned int v48 = v49;
      }
      if (v19 <= 1) {
        unsigned int v50 = 1;
      }
      else {
        unsigned int v50 = v19;
      }
      if (v19 <= v48) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = v48;
      }
      BOOL v52 = v77 == 1 || a2 >= 2;
      if (!v52 || (uint64_t v14 = v51, v76 == v11))
      {
        if (v77 != 1 && a2 == 1)
        {
          uint64_t v53 = *(void *)(a1 + 584);
          uint64_t v54 = *(llvm::LoopAccessInfo ***)(v53 + 32);
          if (*(void *)(v53 + 40) != (void)v54) {
            llvm::LoopAccessInfo::blockNeedsPredication(*v54, **(llvm::BasicBlock ***)(a1 + 608), *(llvm::Loop **)(*(void *)(a1 + 608) + 40), v44);
          }
          BOOL v55 = **(unsigned char **)(*(void *)(*(void *)(a1 + 608) + 56) + 8) != 0;
        }
        else
        {
          BOOL v55 = 0;
        }
        int v56 = (*(uint64_t (**)(void, BOOL))(***(void ***)(a1 + 616) + 552))(**(void **)(a1 + 616), v74);
        if (v55 || a3 >= dword_1EBD01180)
        {
          if (v56) {
            uint64_t v14 = v51;
          }
          else {
            uint64_t v14 = 1;
          }
        }
        else
        {
          uint64_t v57 = 1 << ~__clz(dword_1EBD01180 / a3);
          if (v51 >= v57) {
            uint64_t v57 = v57;
          }
          else {
            uint64_t v57 = v51;
          }
          int v58 = *(void **)(a1 + 608);
          uint64_t v59 = v58[7];
          unsigned int v60 = *(_DWORD *)(v59 + 32);
          if (*(_DWORD *)(v59 + 36) <= 1u) {
            unsigned int v61 = 1;
          }
          else {
            unsigned int v61 = *(_DWORD *)(v59 + 36);
          }
          unsigned int v62 = v51 / v61;
          if (v60 <= 1) {
            unsigned int v63 = 1;
          }
          else {
            unsigned int v63 = v60;
          }
          unsigned int v64 = v51 / v63;
          if (v76 != v11)
          {
            uint64_t v65 = v58[13];
            uint64_t v66 = v58[14];
            if (v65 != v66)
            {
              uint64_t v67 = v65;
              while ((*(_DWORD *)(v67 + 40) - 15) >= 2)
              {
                v67 += 176;
                if (v67 == v66) {
                  goto LABEL_103;
                }
              }
LABEL_113:
              uint64_t v14 = 1;
              goto LABEL_112;
            }
LABEL_103:
            unsigned int v68 = 0;
            long long v69 = *(void **)(a1 + 584);
            do
            {
              long long v69 = (void *)*v69;
              ++v68;
            }
            while (v69);
            if (v68 >= 2)
            {
              while (v65 != v66)
              {
                if (*(unsigned char *)(v65 + 65)) {
                  goto LABEL_113;
                }
                v65 += 176;
              }
              if (dword_1EA61E1A8 >= v57) {
                uint64_t v57 = v57;
              }
              else {
                uint64_t v57 = dword_1EA61E1A8;
              }
              if (dword_1EA61E1A8 < v62) {
                unsigned int v62 = dword_1EA61E1A8;
              }
              if (dword_1EA61E1A8 < v64) {
                unsigned int v64 = dword_1EA61E1A8;
              }
            }
          }
          if (v62 <= v64) {
            uint64_t v14 = v64;
          }
          else {
            uint64_t v14 = v62;
          }
          if (byte_1EBD01300) {
            BOOL v70 = v14 > v57;
          }
          else {
            BOOL v70 = 0;
          }
          if (!v70)
          {
            if (byte_1EBD013C0) {
              BOOL v71 = v77 == 1;
            }
            else {
              BOOL v71 = 1;
            }
            if (!v71 && a2 == 1)
            {
              unsigned int v73 = v51 >> 1;
              if (v51 >> 1 <= v57) {
                unsigned int v73 = v57;
              }
              if ((v56 ^ 1)) {
                uint64_t v14 = v57;
              }
              else {
                uint64_t v14 = v73;
              }
            }
            else
            {
              uint64_t v14 = v57;
            }
          }
        }
      }
LABEL_112:
      sub_1CD8D6BD4((uint64_t)v83);
    }
  }
  return v14;
}

unint64_t sub_1CD30A65C(llvm::ScalarEvolution *a1, const llvm::Loop *a2)
{
  unsigned int SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantTripCount(a1, a2);
  if (SmallConstantTripCount)
  {
    unsigned int v6 = SmallConstantTripCount >> 8;
    BOOL v7 = 1;
  }
  else
  {
    if (byte_1EBD01240) {
      llvm::getLoopEstimatedTripCount(a2, 0, v5);
    }
    unsigned int v6 = 0;
    unsigned int SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount((const llvm::Loop **)a1, a2);
    BOOL v7 = SmallConstantTripCount != 0;
    if (SmallConstantTripCount) {
      unsigned int v6 = SmallConstantTripCount >> 8;
    }
  }
  return ((unint64_t)v7 << 32) | SmallConstantTripCount | (v6 << 8);
}

BOOL llvm::LoopVectorizationCostModel::useEmulatedMaskMemRefHack(_DWORD *a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 60) {
    return 1;
  }
  if (v2 == 61) {
    return *a1 > dword_1EBD01480;
  }
  return 0;
}

uint64_t llvm::LoopVectorizationCostModel::computePredInstDiscount(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v7 = 0;
  unint64_t v8 = 0;
  v76[8] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v76;
  unsigned int v73 = v76;
  unsigned int v75 = 8;
  v76[0] = a2;
  uint64_t v10 = a4;
  unint64_t v64 = a4 & 0xFFFFFFFF00000000;
  BOOL v12 = (a4 & 0xFFFFFFFF00000000) != 0x100000000 && a4 == 1;
  BOOL v65 = v12;
  unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
  unsigned int v13 = 1;
  do
  {
    uint64_t v14 = (_DWORD *)*((void *)v73 + v13 - 1);
    unsigned int v74 = v13 - 1;
    BOOL v70 = v14;
    unint64_t v68 = 0;
    if (sub_1CD45B528(*(void *)a3, *(_DWORD *)(a3 + 16), (uint64_t)v14, &v68)) {
      BOOL v15 = v68 == *(void *)a3 + 24 * *(unsigned int *)(a3 + 16);
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15) {
      goto LABEL_12;
    }
    unsigned int v63 = v9;
    int v62 = v7;
    llvm::LoopVectorizationCostModel::getInstructionCost(a1, (uint64_t)v14, a4, (uint64_t)&v68);
    unint64_t v58 = v68;
    uint64_t v59 = v69;
    llvm::LoopVectorizationCostModel::getInstructionCost(a1, (uint64_t)v14, 1uLL, (uint64_t)&v68);
    uint64_t v71 = v10;
    LODWORD(v72) = 0;
    sub_1CB90C9D4((uint64_t)&v71, (uint64_t)&v68);
    int64_t v16 = v71;
    int v17 = v72;
    if (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, (uint64_t)v14, (llvm::Type *)a4, v18))
    {
      int v19 = *(unsigned __int8 *)(*(void *)v14 + 8);
      if (v19 != 7)
      {
        unsigned int v20 = *(void **)(a1 + 616);
        if (v19 != 9 && !v65)
        {
          int v56 = *(uint64_t ***)v14;
          if (v64 == 0x100000000) {
            llvm::ScalableVectorType::get(v56, (llvm::Type *)a4);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v56, (llvm::Type *)a4);
          }
        }
        unsigned int v69 = a4;
        if (a4 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v68);
        }
        unint64_t v21 = v67;
        if (!a4) {
          unint64_t v21 = 0;
        }
        unint64_t v68 = v21;
        uint64_t v22 = (*(uint64_t (**)(void))(*(void *)*v20 + 528))(*v20);
        int v24 = v23;
        if (__OFADD__(v16, v22)) {
          unint64_t v25 = ((v16 + v22) >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v25 = v16 + v22;
        }
        if (v69 >= 0x41 && v68) {
          MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
        }
        uint64_t v71 = (*(uint64_t (**)(void, uint64_t, void, void))(***(void ***)(a1 + 616) + 856))(**(void **)(a1 + 616), 55, 0, 0);
        uint64_t v72 = v26;
        unint64_t v68 = v10;
        unsigned int v69 = 0;
        sub_1CB90C9D4((uint64_t)&v68, (uint64_t)&v71);
        if (v24 == 1 || v69 == 1) {
          int v17 = 1;
        }
        if (__OFADD__(v25, v68)) {
          int64_t v16 = ((uint64_t)(v25 + v68) >> 63) ^ 0x8000000000000000;
        }
        else {
          int64_t v16 = v25 + v68;
        }
      }
    }
    int v28 = v14[5];
    if ((v28 & 0x40000000) != 0)
    {
      int v30 = (uint64_t *)*((void *)v14 - 1);
      uint64_t v29 = v28 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v29 = v28 & 0x7FFFFFF;
      int v30 = (uint64_t *)&v14[-8 * v29];
    }
    uint64_t v60 = v10;
    unint64_t v61 = v8;
    if (v29)
    {
      uint64_t v38 = &v30[4 * v29];
      do
      {
        uint64_t v39 = *v30;
        if (*v30) {
          BOOL v40 = *(unsigned __int8 *)(*v30 + 16) >= 0x1Cu;
        }
        else {
          BOOL v40 = 0;
        }
        if (v40)
        {
          uint64_t v41 = *(void *)(v39 + 8);
          if (!v41
            || *(void *)(v41 + 8)
            || *(void *)(a2 + 40) != *(void *)(v39 + 40)
            || sub_1CD8CD258(a1, *v30, a4)
            || (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, v39, (llvm::Type *)a4, v50) & 1) != 0)
          {
            goto LABEL_63;
          }
          int v51 = *(_DWORD *)(v39 + 20);
          if ((v51 & 0x40000000) != 0)
          {
            uint64_t v53 = *(uint64_t **)(v39 - 8);
            uint64_t v52 = v51 & 0x7FFFFFF;
            if (v52)
            {
LABEL_92:
              uint64_t v54 = 32 * v52;
              while (1)
              {
                BOOL v55 = *v53 && *(unsigned __int8 *)(*v53 + 16) >= 0x1Cu;
                if (v55 && sub_1CD8CBF00(a1, *v53, a4)) {
                  break;
                }
                v53 += 4;
                v54 -= 32;
                if (!v54) {
                  goto LABEL_101;
                }
              }
LABEL_63:
              if (sub_1CD30AD2C(a1, v39, a4))
              {
                unsigned int v42 = *(void **)(a1 + 616);
                uint64_t v43 = *(void *)v39;
                int v44 = *(unsigned __int8 *)(v43 + 8);
                BOOL v45 = v44 == 7 || v44 == 9;
                if (!v45 && !v65)
                {
                  if (v64 == 0x100000000) {
                    llvm::ScalableVectorType::get((uint64_t **)v43, (llvm::Type *)a4);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v43, (llvm::Type *)a4);
                  }
                  uint64_t v43 = v49;
                }
                unsigned int v69 = a4;
                if (a4 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v68);
                }
                unint64_t v46 = v67;
                if (!a4) {
                  unint64_t v46 = 0;
                }
                unint64_t v68 = v46;
                uint64_t v47 = (*(uint64_t (**)(void, uint64_t, unint64_t *, void, uint64_t))(*(void *)*v42 + 528))(*v42, v43, &v68, 0, 1);
                if (v48 == 1) {
                  int v17 = 1;
                }
                if (__OFADD__(v16, v47)) {
                  int64_t v16 = ((v16 + v47) >> 63) ^ 0x8000000000000000;
                }
                else {
                  v16 += v47;
                }
                if (v69 >= 0x41 && v68) {
                  MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
                }
              }
              goto LABEL_80;
            }
          }
          else
          {
            uint64_t v52 = v51 & 0x7FFFFFF;
            uint64_t v53 = (uint64_t *)(v39 - 32 * v52);
            if (v52) {
              goto LABEL_92;
            }
          }
LABEL_101:
          if (v74 >= (unint64_t)v75) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v73 + v74++) = v39;
        }
LABEL_80:
        v30 += 4;
      }
      while (v30 != v38);
    }
    if (v16 >= 0) {
      uint64_t v31 = v16;
    }
    else {
      uint64_t v31 = v16 + 1;
    }
    uint64_t v32 = v31 >> 1;
    BOOL v33 = __OFSUB__(v58, v31 >> 1);
    int64_t v34 = v58 - (v31 >> 1);
    if (v33) {
      int64_t v34 = (v34 >> 63) ^ 0x8000000000000000;
    }
    BOOL v35 = v59 == 1 || v17 == 1;
    int v7 = v62;
    if (v35) {
      int v7 = 1;
    }
    BOOL v33 = __OFADD__(v61, v34);
    uint64_t v36 = v61 + v34;
    if (v33) {
      unint64_t v8 = (v36 >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v8 = v36;
    }
    unsigned int v37 = sub_1CD4CB550(a3, (uint64_t *)&v70);
    v37[1] = v32;
    *((_DWORD *)v37 + 4) = v17;
    uint64_t v9 = v63;
    uint64_t v10 = v60;
LABEL_12:
    unsigned int v13 = v74;
  }
  while (v74);
  if (v73 != v9) {
    free(v73);
  }
  if (v7) {
    return 0;
  }
  else {
    return v8;
  }
}

BOOL sub_1CD30AD2C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL result = 0;
  unint64_t v6 = HIDWORD(a3);
  if (*(unsigned __int8 *)(a2 + 16) <= 0x1Bu) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = a2;
  }
  BOOL v8 = a3 != 1 || v6 == 1;
  if (v8 && v7)
  {
    uint64_t v9 = *(void *)(a1 + 584);
    uint64_t v10 = *(void *)(v7 + 40);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v11 = *(void *)(v9 + 64);
    if (v11 == v12)
    {
      uint64_t v13 = *(unsigned int *)(v9 + 76);
      uint64_t v14 = (void *)(v11 + 8 * v13);
      if (v13)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v13;
        while (*(void *)(v11 + v15) != v10)
        {
          v15 += 8;
          if (v16 == v15) {
            goto LABEL_28;
          }
        }
        uint64_t v14 = (void *)(v11 + v15);
      }
LABEL_28:
      uint64_t v12 = *(void *)(v9 + 64);
    }
    else
    {
      uint64_t v17 = *(unsigned int *)(v9 + 72);
      int v18 = v17 - 1;
      unsigned int v19 = (v17 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v14 = (void *)(v11 + 8 * v19);
      uint64_t v20 = *v14;
      if (*v14 == -1)
      {
        unint64_t v21 = 0;
LABEL_36:
        if (v21) {
          uint64_t v14 = v21;
        }
        if (*v14 != v10) {
          uint64_t v14 = (void *)(v11 + 8 * v17);
        }
      }
      else
      {
        unint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v10)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            unint64_t v21 = v14;
          }
          unsigned int v24 = v19 + v22++;
          unsigned int v19 = v24 & v18;
          uint64_t v14 = (void *)(v11 + 8 * (v24 & v18));
          uint64_t v20 = *v14;
          if (*v14 == -1) {
            goto LABEL_36;
          }
        }
      }
    }
    BOOL v8 = v11 == v12;
    uint64_t v25 = 72;
    if (v8) {
      uint64_t v25 = 76;
    }
    if (v14 == (void *)(v11 + 8 * *(unsigned int *)(v9 + v25)) || llvm::Loop::isLoopInvariant(v9, v7))
    {
      return 0;
    }
    else
    {
      uint64_t v29 = 0;
      if (sub_1CD8D65A0(*(void *)(a1 + 176), *(_DWORD *)(a1 + 192), a3, v6, &v29))
      {
        uint64_t v26 = v29;
        uint64_t v27 = *(void *)(a1 + 176);
        unsigned int v28 = *(_DWORD *)(a1 + 192);
      }
      else
      {
        uint64_t v27 = *(void *)(a1 + 176);
        unsigned int v28 = *(_DWORD *)(a1 + 192);
        uint64_t v26 = v27 + 72 * v28;
      }
      return v26 == v27 + 72 * v28 || !sub_1CD8CD258(a1, v7, a3);
    }
  }
  return result;
}

void llvm::LoopVectorizationCostModel::getReductionPatternCost(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (!*(_DWORD *)(a1 + 304) || HIDWORD(a3) != 1 && a3 == 1 || (*(_DWORD *)(a4 + 8) & 0xFE) != 0x12) {
    goto LABEL_27;
  }
  uint64_t v205 = a2;
  if (a2)
  {
    unsigned int v11 = *(unsigned __int8 *)(a2 + 16);
    if (v11 > 0x1B) {
      unsigned int v12 = v11 - 28;
    }
    else {
      unsigned int v12 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v12 == 39 || (uint64_t v13 = a2, v12 == 40))
    {
      uint64_t v14 = *(void *)(a2 + 8);
      if (!v14) {
        goto LABEL_27;
      }
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15)
      {
        uint64_t v16 = *(void *)(a2 + 8);
        while (*(void *)(v15 + 24) == *(void *)(v16 + 24))
        {
          uint64_t v16 = *(void *)(v16 + 8);
          uint64_t v15 = *(void *)(v15 + 8);
          if (!v15) {
            goto LABEL_17;
          }
        }
        goto LABEL_27;
      }
LABEL_17:
      uint64_t v13 = *(void *)(v14 + 24);
      uint64_t v205 = v13;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  int v17 = *(unsigned __int8 *)(v13 + 16);
  if (v17 == 45 || v17 == 5 && *(_WORD *)(v13 + 18) == 17)
  {
    uint64_t v18 = *(void *)(v13 + 8);
    uint64_t v19 = *(void *)(v18 + 24);
    if (*(unsigned char *)(v19 + 16) == 41)
    {
      uint64_t v20 = *(void *)(v18 + 8);
      if (v20)
      {
        while (*(void *)(v20 + 24) == *(void *)(v18 + 24))
        {
          uint64_t v18 = *(void *)(v18 + 8);
          uint64_t v20 = *(void *)(v20 + 8);
          if (!v20) {
            goto LABEL_25;
          }
        }
        goto LABEL_27;
      }
LABEL_25:
      uint64_t v205 = v19;
      uint64_t v13 = v19;
    }
  }
  unint64_t v206 = 0;
  if ((sub_1CD40EA84(*(void *)(a1 + 536), *(_DWORD *)(a1 + 552), v13, &v206) & 1) == 0)
  {
LABEL_27:
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 16) = 0;
    return;
  }
  uint64_t v21 = sub_1CD4F8350((uint64_t *)(a1 + 536), &v205)[1];
  uint64_t v204 = v21;
  int v22 = *(unsigned __int8 *)(v21 + 16);
  uint64_t v23 = v21;
  while (v22 != 83)
  {
    uint64_t v23 = sub_1CD4F8350((uint64_t *)(a1 + 536), &v204)[1];
    uint64_t v204 = v23;
    int v22 = *(unsigned __int8 *)(v23 + 16);
  }
  uint64_t v24 = sub_1CD8CD010(*(void *)(a1 + 608) + 80, v23);
  uint64_t v25 = *(void *)(a1 + 616);
  llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v24 + 40));
  unint64_t v26 = (*(uint64_t (**)(void))(**(void **)v25 + 928))();
  unint64_t v28 = v27;
  if (*(_DWORD *)(v24 + 40) == 14)
  {
    uint64_t v29 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), 18, a4, a5, 0, 0, 0, 0, 0, 0, 0);
    if (v30 == 1) {
      unint64_t v28 = v28 & 0xFFFFFFFF00000000 | 1;
    }
    if (__OFADD__(v26, v29)) {
      unint64_t v26 = ((uint64_t)(v26 + v29) >> 63) ^ 0x8000000000000000;
    }
    else {
      v26 += v29;
    }
  }
  if (!llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(a1 + 664)) && *(unsigned char *)(v24 + 65)) {
    goto LABEL_278;
  }
  int v31 = *(_DWORD *)(v205 + 20);
  if ((v31 & 0x40000000) != 0) {
    uint64_t v32 = *(uint64_t **)(v205 - 8);
  }
  else {
    uint64_t v32 = (uint64_t *)(v205 - 32 * (v31 & 0x7FFFFFF));
  }
  uint64_t v33 = v32[4];
  if (v33 == v21) {
    uint64_t v33 = *v32;
  }
  if (*(unsigned __int8 *)(v33 + 16) <= 0x1Bu) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  int v35 = *(_DWORD *)(a2 + 20);
  if ((v35 & 0x40000000) != 0) {
    uint64_t v36 = *(uint64_t *****)(a2 - 8);
  }
  else {
    uint64_t v36 = (uint64_t ****)(a2 - 32 * (v35 & 0x7FFFFFF));
  }
  unsigned int v37 = **v36;
  uint64_t v38 = (llvm::Type *)*(unsigned int *)(a4 + 32);
  if (*(unsigned char *)(a4 + 8) == 19) {
    llvm::ScalableVectorType::get(v37, v38);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v37, v38);
  }
  uint64_t v201 = v39;
  if (!v34) {
    goto LABEL_276;
  }
  unsigned int v40 = *(unsigned __int8 *)(v34 + 16);
  unsigned int v41 = v40 - 28;
  unsigned int v42 = v40 - 28;
  if (v40 <= 0x1B) {
    unsigned int v42 = *(unsigned __int16 *)(v34 + 18);
  }
  if (v42 == 39)
  {
    int v43 = *(_DWORD *)(v34 + 20);
    if ((v43 & 0x40000000) != 0) {
      uint64_t v44 = *(void *)(v34 - 8);
    }
    else {
      uint64_t v44 = v34 - 32 * (v43 & 0x7FFFFFF);
    }
    uint64_t v45 = *(void *)v44;
    int v46 = *(unsigned __int8 *)(*(void *)v44 + 16);
    if (v46 == 5)
    {
      if (*(_WORD *)(v45 + 18) == 17)
      {
        uint64_t v53 = (uint64_t *)(v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF));
        uint64_t v47 = *v53;
        unsigned int v48 = *(unsigned __int8 *)(*v53 + 16);
        if (*v53 && v48 >= 0x1C)
        {
          uint64_t v55 = v53[4];
          unsigned int v51 = *(unsigned __int8 *)(v55 + 16);
          uint64_t v198 = v55;
          if (v55 && v51 > 0x1B) {
            goto LABEL_108;
          }
        }
      }
    }
    else if (v46 == 45)
    {
      uint64_t v47 = *(void *)(v45 - 64);
      unsigned int v48 = *(unsigned __int8 *)(v47 + 16);
      if (v47 && v48 >= 0x1C)
      {
        uint64_t v50 = *(void *)(v45 - 32);
        unsigned int v51 = *(unsigned __int8 *)(v50 + 16);
        uint64_t v198 = v50;
        if (v50 && v51 >= 0x1C) {
          goto LABEL_108;
        }
      }
    }
  }
  if (v40 <= 0x1B) {
    unsigned int v41 = *(unsigned __int16 *)(v34 + 18);
  }
  if (v41 != 40) {
    goto LABEL_130;
  }
  int v57 = *(_DWORD *)(v34 + 20);
  if ((v57 & 0x40000000) != 0) {
    unint64_t v58 = *(uint64_t **)(v34 - 8);
  }
  else {
    unint64_t v58 = (uint64_t *)(v34 - 32 * (v57 & 0x7FFFFFF));
  }
  uint64_t v59 = *v58;
  int v60 = *(unsigned __int8 *)(v59 + 16);
  if (v60 == 5)
  {
    if (*(_WORD *)(v59 + 18) != 17) {
      goto LABEL_130;
    }
    unsigned int v63 = (uint64_t *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF));
    uint64_t v47 = *v63;
    unsigned int v48 = *(unsigned __int8 *)(*v63 + 16);
    if (!*v63 || v48 < 0x1C) {
      goto LABEL_130;
    }
    uint64_t v62 = v63[4];
  }
  else
  {
    if (v60 != 45) {
      goto LABEL_130;
    }
    uint64_t v47 = *(void *)(v59 - 64);
    unsigned int v48 = *(unsigned __int8 *)(v47 + 16);
    if (!v47 || v48 < 0x1C) {
      goto LABEL_130;
    }
    uint64_t v62 = *(void *)(v59 - 32);
  }
  unsigned int v51 = *(unsigned __int8 *)(v62 + 16);
  uint64_t v198 = v62;
  if (v62) {
    BOOL v65 = v51 >= 0x1C;
  }
  else {
    BOOL v65 = 0;
  }
  if (!v65) {
    goto LABEL_130;
  }
LABEL_108:
  BOOL v66 = v48 - 67 <= 1 && v48 == v51;
  if (v66)
  {
    int v67 = *(_DWORD *)(v47 + 20);
    unint64_t v68 = (v67 & 0x40000000) != 0 ? *(uint64_t ***)(v47 - 8) : (uint64_t **)(v47 - 32 * (v67 & 0x7FFFFFF));
    uint64_t v69 = **v68;
    int v70 = *(_DWORD *)(v198 + 20);
    uint64_t v71 = (v70 & 0x40000000) != 0 ? *(void ***)(v198 - 8) : (void **)(v198 - 32 * (v70 & 0x7FFFFFF));
    if (v69 == **v71)
    {
      if (llvm::Loop::isLoopInvariant(*(void *)(a1 + 584), v47))
      {
        unsigned int v40 = *(unsigned __int8 *)(v34 + 16);
      }
      else
      {
        BOOL isLoopInvariant = llvm::Loop::isLoopInvariant(*(void *)(a1 + 584), v198);
        unsigned int v40 = *(unsigned __int8 *)(v34 + 16);
        if (!isLoopInvariant && (*(unsigned __int8 *)(v47 + 16) == v40 || v47 == v198))
        {
          int v74 = *(_DWORD *)(v47 + 20);
          if ((v74 & 0x40000000) != 0) {
            unsigned int v75 = *(uint64_t *****)(v47 - 8);
          }
          else {
            unsigned int v75 = (uint64_t ****)(v47 - 32 * (v74 & 0x7FFFFFF));
          }
          unsigned int v157 = **v75;
          uint64_t v158 = (llvm::Type *)*(unsigned int *)(v201 + 32);
          if (*(unsigned char *)(v201 + 8) == 19) {
            llvm::ScalableVectorType::get(v157, v158);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v157, v158);
          }
          uint64_t v200 = v159;
          int v160 = *(uint64_t ***)v47;
          BOOL v161 = (llvm::Type *)*(unsigned int *)(v201 + 32);
          if (*(unsigned char *)(v201 + 8) == 19) {
            v163.n128_f64[0] = llvm::ScalableVectorType::get(v160, v161);
          }
          else {
            v163.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v160, v161);
          }
          uint64_t v164 = v162;
          uint64_t v165 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, uint64_t, uint64_t, __n128))(***(void ***)(a1 + 616) + 840))(**(void **)(a1 + 616), *(unsigned __int8 *)(v47 + 16) - 28, v162, v200, 0, a5, v47, v163);
          uint64_t v194 = v166;
          int v196 = (llvm::FixedVectorType *)v165;
          uint64_t v190 = (*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), 17, v164);
          int v192 = v167;
          uint64_t v168 = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 840))();
          int v170 = v169;
          uint64_t v171 = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 944))();
          if (!v172)
          {
            int64_t v173 = v171;
            uint64_t v202 = 2;
            int v203 = 0;
            unint64_t v206 = v196;
            uint64_t v207 = v194;
            sub_1CB90C9D4((uint64_t)&v206, (uint64_t)&v202);
            int v174 = (int)v207;
            int64_t v175 = (int64_t)v206 + v190;
            if (__OFADD__(v206, v190)) {
              int64_t v175 = (v175 >> 63) ^ 0x8000000000000000;
            }
            BOOL v150 = __OFADD__(v175, v168);
            int64_t v176 = v175 + v168;
            if (v150) {
              int64_t v176 = (v176 >> 63) ^ 0x8000000000000000;
            }
            BOOL v150 = __OFADD__(v176, v26);
            int64_t v177 = v176 + v26;
            if (v150) {
              int64_t v177 = (v177 >> 63) ^ 0x8000000000000000;
            }
            if (v192 == 1 || v170 == 1 || v28 == 1) {
              int v174 = 1;
            }
            BOOL v180 = v173 < v177;
            BOOL v66 = v174 == 0;
            BOOL v181 = v174 > 0;
            if (!v66) {
              BOOL v180 = v181;
            }
            if (v180)
            {
              if (v205 == a2) {
                uint64_t v104 = v173;
              }
              else {
                uint64_t v104 = 0;
              }
              goto LABEL_183;
            }
          }
          goto LABEL_276;
        }
      }
    }
  }
LABEL_130:
  if (v40 > 0x1B) {
    unsigned int v76 = v40 - 28;
  }
  else {
    unsigned int v76 = *(unsigned __int16 *)(v34 + 18);
  }
  if (v76 == 39 || v76 == 40)
  {
    BOOL v77 = llvm::Loop::isLoopInvariant(*(void *)(a1 + 584), v34);
    unsigned int v40 = *(unsigned __int8 *)(v34 + 16);
    if (!v77)
    {
      int v83 = *(_DWORD *)(v34 + 20);
      if ((v83 & 0x40000000) != 0) {
        unsigned int v84 = *(uint64_t *****)(v34 - 8);
      }
      else {
        unsigned int v84 = (uint64_t ****)(v34 - 32 * (v83 & 0x7FFFFFF));
      }
      int v91 = **v84;
      unsigned int v92 = (llvm::Type *)*(unsigned int *)(v201 + 32);
      if (*(unsigned char *)(v201 + 8) == 19) {
        v94.n128_f64[0] = llvm::ScalableVectorType::get(v91, v92);
      }
      else {
        v94.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v91, v92);
      }
      uint64_t v95 = (*(uint64_t (**)(void, void, BOOL, void, uint64_t, uint64_t, __n128))(***(void ***)(a1 + 616)
                                                                                              + 944))(**(void **)(a1 + 616), 0, v40 == 67, *(void *)(v24 + 56), v93, a5, v94);
      int v97 = v96;
      uint64_t v98 = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 840))();
      if (v97) {
        goto LABEL_276;
      }
      int64_t v100 = v26 + v98;
      if (__OFADD__(v26, v98)) {
        int64_t v100 = ((uint64_t)(v26 + v98) >> 63) ^ 0x8000000000000000;
      }
      if (v99 == 1) {
        int v101 = 1;
      }
      else {
        int v101 = v28;
      }
      BOOL v102 = v95 < v100;
      BOOL v66 = v101 == 0;
      BOOL v103 = v101 > 0;
      if (!v66) {
        BOOL v102 = v103;
      }
      goto LABEL_179;
    }
  }
  if (v40 == 5)
  {
    if (*(_WORD *)(v34 + 18) != 17) {
      goto LABEL_276;
    }
    uint64_t v85 = (uint64_t *)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF));
    uint64_t v78 = *v85;
    unsigned int v79 = *(unsigned __int8 *)(*v85 + 16);
    if (!*v85 || v79 < 0x1C) {
      goto LABEL_276;
    }
    uint64_t v81 = v85[4];
    unsigned int v82 = *(unsigned __int8 *)(v81 + 16);
    if (!v81 || v82 < 0x1C) {
      goto LABEL_276;
    }
  }
  else
  {
    if (v40 != 45) {
      goto LABEL_276;
    }
    uint64_t v78 = *(void *)(v34 - 64);
    unsigned int v79 = *(unsigned __int8 *)(v78 + 16);
    if (!v78 || v79 < 0x1C) {
      goto LABEL_276;
    }
    uint64_t v81 = *(void *)(v34 - 32);
    if (!v81) {
      goto LABEL_276;
    }
    unsigned int v82 = *(unsigned __int8 *)(v81 + 16);
    if (v82 < 0x1C) {
      goto LABEL_276;
    }
  }
  uint64_t v199 = v78;
  BOOL v88 = v79 != v82 || v79 - 67 > 1;
  if (!v88
    && !llvm::Loop::isLoopInvariant(*(void *)(a1 + 584), v78)
    && !llvm::Loop::isLoopInvariant(*(void *)(a1 + 584), v81))
  {
    int v114 = *(_DWORD *)(v199 + 20);
    if ((v114 & 0x40000000) != 0) {
      unsigned int v115 = *(llvm::FixedVectorType ****)(v199 - 8);
    }
    else {
      unsigned int v115 = (llvm::FixedVectorType ***)(v199 - 32 * (v114 & 0x7FFFFFF));
    }
    BOOL v197 = **v115;
    int v116 = *(_DWORD *)(v81 + 20);
    if ((v116 & 0x40000000) != 0) {
      unint64_t v117 = *(uint64_t *****)(v81 - 8);
    }
    else {
      unint64_t v117 = (uint64_t ****)(v81 - 32 * (v116 & 0x7FFFFFF));
    }
    int v118 = **v117;
    if (*((_DWORD *)v197 + 2) >> 8 >= *((_DWORD *)v118 + 2) >> 8) {
      BOOL v119 = (uint64_t **)v197;
    }
    else {
      BOOL v119 = **v117;
    }
    uint64_t v193 = v118;
    uint64_t v195 = (llvm::FixedVectorType *)v119;
    unsigned int v120 = (llvm::Type *)*(unsigned int *)(v201 + 32);
    if (*(unsigned char *)(v201 + 8) == 19) {
      llvm::ScalableVectorType::get(v119, v120);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v119, v120);
    }
    uint64_t v191 = v121;
    unsigned int v122 = *(void **)(a1 + 616);
    uint64_t v123 = *(unsigned __int8 *)(v199 + 16) - 28;
    uint64_t v124 = (llvm::Type *)*(unsigned int *)(v201 + 32);
    if (*(unsigned char *)(v201 + 8) == 19) {
      v126.n128_f64[0] = llvm::ScalableVectorType::get((uint64_t **)v197, v124);
    }
    else {
      v126.n128_f64[0] = llvm::FixedVectorType::get(v197, v124);
    }
    uint64_t v185 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, __n128))(*(void *)*v122 + 840))(*v122, v123, v201, v125, 0, a5, v199, v126);
    int v186 = v127;
    uint64_t v128 = *(void **)(a1 + 616);
    unsigned int v187 = *(unsigned __int8 *)(v81 + 16) - 28;
    uint64_t v129 = (llvm::Type *)*(unsigned int *)(v201 + 32);
    if (*(unsigned char *)(v201 + 8) == 19) {
      v131.n128_f64[0] = llvm::ScalableVectorType::get(v193, v129);
    }
    else {
      v131.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v193, v129);
    }
    uint64_t v188 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, uint64_t, uint64_t, __n128))(*(void *)*v128 + 840))(*v128, v187, v201, v130, 0, a5, v81, v131);
    int v189 = v132;
    uint64_t v183 = (*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), 17, v201);
    int v184 = v133;
    uint64_t v95 = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 944))();
    int v135 = v134;
    if (v197 == v195 && v193 == (uint64_t **)v195)
    {
      uint64_t v141 = 0;
      int v142 = 0;
    }
    else
    {
      if (v197 != v195) {
        uint64_t v81 = v199;
      }
      uint64_t v137 = *(void **)(a1 + 616);
      uint64_t v138 = *(unsigned __int8 *)(v81 + 16) - 28;
      int v139 = *(_DWORD *)(v81 + 20);
      if ((v139 & 0x40000000) != 0) {
        int v140 = *(uint64_t *****)(v81 - 8);
      }
      else {
        int v140 = (uint64_t ****)(v81 - 32 * (v139 & 0x7FFFFFF));
      }
      uint64_t v143 = **v140;
      uint64_t v144 = (llvm::Type *)*(unsigned int *)(v201 + 32);
      if (*(unsigned char *)(v201 + 8) == 19) {
        v146.n128_f64[0] = llvm::ScalableVectorType::get(v143, v144);
      }
      else {
        v146.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v143, v144);
      }
      uint64_t v141 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, __n128))(*(void *)*v137 + 840))(*v137, v138, v191, v145, 0, a5, v81, v146);
    }
    if (v135) {
      goto LABEL_276;
    }
    int v147 = v142 == 1;
    int64_t v148 = v95 + v141;
    if (__OFADD__(v95, v141)) {
      int64_t v148 = ((v95 + v141) >> 63) ^ 0x8000000000000000;
    }
    unint64_t v149 = v185 + v188;
    if (__OFADD__(v185, v188)) {
      unint64_t v149 = ((v185 + v188) >> 63) ^ 0x8000000000000000;
    }
    BOOL v150 = __OFADD__(v149, v183);
    int64_t v151 = v149 + v183;
    if (v150) {
      int64_t v151 = (v151 >> 63) ^ 0x8000000000000000;
    }
    BOOL v150 = __OFADD__(v151, v26);
    int64_t v152 = v151 + v26;
    if (v150) {
      int64_t v152 = (v152 >> 63) ^ 0x8000000000000000;
    }
    if (v189 == 1 || v184 == 1 || v28 == 1) {
      int v155 = 1;
    }
    else {
      int v155 = v186;
    }
    BOOL v156 = v148 < v152;
    BOOL v66 = v155 == v147;
    BOOL v102 = v155 > v147;
    if (v66) {
      BOOL v102 = v156;
    }
LABEL_179:
    if (!v102) {
      goto LABEL_276;
    }
    if (v205 == a2) {
      uint64_t v104 = v95;
    }
    else {
      uint64_t v104 = 0;
    }
LABEL_183:
    *(void *)a6 = v104;
    *(_DWORD *)(a6 + 8) = 0;
LABEL_279:
    char v182 = 1;
    goto LABEL_280;
  }
  unsigned int v89 = *(unsigned __int8 *)(a2 + 16);
  if (v89 > 0x1B)
  {
    unsigned int v90 = v89 - 28;
    if (!a2) {
      goto LABEL_186;
    }
  }
  else
  {
    unsigned int v90 = *(unsigned __int16 *)(a2 + 18);
    if (!a2) {
      goto LABEL_186;
    }
  }
  if (v90 == 39) {
    goto LABEL_276;
  }
LABEL_186:
  if (!a2 || v90 != 40)
  {
    uint64_t v105 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), 17, v201, a5, 0, 0, 0, 0, 0, 0, 0);
    int v107 = v106;
    uint64_t v108 = (*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 944))();
    if (!v109)
    {
      int64_t v110 = v105 + v26;
      if (__OFADD__(v105, v26)) {
        int64_t v110 = ((uint64_t)(v105 + v26) >> 63) ^ 0x8000000000000000;
      }
      int v111 = v28 == 1 ? 1 : v107;
      BOOL v112 = v108 < v110;
      BOOL v66 = v111 == 0;
      BOOL v113 = v111 > 0;
      if (!v66) {
        BOOL v112 = v113;
      }
      if (v112)
      {
        if (v205 == a2) {
          uint64_t v104 = v108;
        }
        else {
          uint64_t v104 = 0;
        }
        goto LABEL_183;
      }
    }
  }
LABEL_276:
  if (v205 == a2)
  {
LABEL_278:
    *(void *)a6 = v26;
    *(void *)(a6 + 8) = v28;
    goto LABEL_279;
  }
  char v182 = 0;
  *(unsigned char *)a6 = 0;
LABEL_280:
  *(unsigned char *)(a6 + 16) = v182;
}

BOOL sub_1CD30BE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (byte_1EBD0DAB0) {
    return 0;
  }
  uint64_t v10 = 0;
  if (sub_1CD8D70C0(*(void *)(a1 + 128), *(_DWORD *)(a1 + 144), a3, SHIDWORD(a3), &v10)) {
    uint64_t v6 = v10;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 128) + 32 * *(unsigned int *)(a1 + 144);
  }
  uint64_t v10 = 0;
  if (sub_1CD45B528(*(void *)(v6 + 8), *(_DWORD *)(v6 + 24), a2, &v10))
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v6 + 8);
    unsigned int v9 = *(_DWORD *)(v6 + 24);
  }
  else
  {
    uint64_t v8 = *(void *)(v6 + 8);
    unsigned int v9 = *(_DWORD *)(v6 + 24);
    uint64_t v7 = v8 + 24 * v9;
  }
  return v8 + 24 * v9 != v7;
}

char *llvm::LoopVectorizationCostModel::getInstructionCost(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t)a2;
  v308[4] = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v305 = a2;
  uint64_t v8 = *a2;
  if (sub_1CD8CE9F8(a1, (uint64_t)a2, a3))
  {
    unsigned int v9 = *(uint64_t **)v8;
    uint64_t v10 = (unsigned int *)sub_1CD48CC08(a1 + 8, (uint64_t *)v305);
    uint64_t v8 = llvm::IntegerType::get((llvm::IntegerType *)v9, (llvm::LLVMContext *)*v10);
    uint64_t v6 = *(void *)v305;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 592) + 88);
  uint64_t v13 = v8;
  if (!sub_1CD8CD258(a1, v6, a3))
  {
    int v14 = *(unsigned __int8 *)(v8 + 8);
    BOOL v15 = v14 == 7 || v14 == 9;
    uint64_t v13 = v8;
    if (!v15)
    {
      if ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || (uint64_t v13 = v8, a3 != 1))
      {
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
          llvm::ScalableVectorType::get((uint64_t **)v8, (llvm::Type *)a3);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, (llvm::Type *)a3);
        }
        uint64_t v13 = v23;
      }
    }
  }
  uint64_t v298 = a3;
  uint64_t v299 = a4;
  *a4 = v13;
  uint64_t v16 = *(void *)v305;
  int v17 = *(unsigned __int8 *)(*(void *)v305 + 16);
  uint64_t v18 = 0;
  unint64_t v19 = HIDWORD(a3);
  int v20 = v17 - 28;
  switch(*(unsigned char *)(*(void *)v305 + 16))
  {
    case 0x1E:
      if (a3) {
        BOOL v55 = HIDWORD(a3) == 1;
      }
      else {
        BOOL v55 = 0;
      }
      if (!v55 && a3 < 2 || (*(_DWORD *)(*(void *)v305 + 20) & 0x7FFFFFF) != 3) {
        goto LABEL_381;
      }
      uint64_t v56 = *(void *)(*(void *)v305 - 32);
      uint64_t v58 = *(void *)(a1 + 56);
      uint64_t v57 = *(void *)(a1 + 64);
      if (v57 == v58)
      {
        uint64_t v59 = *(unsigned int *)(a1 + 76);
        int v60 = (void *)(v57 + 8 * v59);
        if (v59)
        {
          uint64_t v61 = 0;
          uint64_t v62 = 8 * v59;
          while (*(void *)(v57 + v61) != v56)
          {
            v61 += 8;
            if (v62 == v61) {
              goto LABEL_264;
            }
          }
          int v60 = (void *)(v57 + v61);
        }
LABEL_264:
        uint64_t v173 = *(void *)(a1 + 64);
        goto LABEL_343;
      }
      uint64_t v150 = *(unsigned int *)(a1 + 72);
      int v151 = v150 - 1;
      unsigned int v152 = (v150 - 1) & ((v56 >> 4) ^ (v56 >> 9));
      int v60 = (void *)(v57 + 8 * v152);
      uint64_t v153 = *v60;
      if (*v60 == -1)
      {
        uint64_t v154 = 0;
      }
      else
      {
        uint64_t v154 = 0;
        int v155 = 1;
        do
        {
          if (v153 == v56) {
            goto LABEL_342;
          }
          if (v154) {
            BOOL v156 = 0;
          }
          else {
            BOOL v156 = v153 == -2;
          }
          if (v156) {
            uint64_t v154 = v60;
          }
          unsigned int v157 = v152 + v155++;
          unsigned int v152 = v157 & v151;
          int v60 = (void *)(v57 + 8 * (v157 & v151));
          uint64_t v153 = *v60;
        }
        while (*v60 != -1);
      }
      if (v154) {
        int v60 = v154;
      }
      if (*v60 != v56) {
        int v60 = (void *)(v57 + 8 * v150);
      }
LABEL_342:
      uint64_t v173 = *(void *)(a1 + 56);
LABEL_343:
      uint64_t v207 = 72;
      if (v57 == v173) {
        uint64_t v207 = 76;
      }
      if (v60 != (void *)(v57 + 8 * *(unsigned int *)(a1 + v207))) {
        goto LABEL_369;
      }
      uint64_t v208 = *(void *)(*(void *)v305 - 64);
      if (v57 == v173)
      {
        uint64_t v209 = *(unsigned int *)(a1 + 76);
        int v210 = (void *)(v57 + 8 * v209);
        if (v209)
        {
          uint64_t v211 = 0;
          uint64_t v212 = 8 * v209;
          while (*(void *)(v57 + v211) != v208)
          {
            v211 += 8;
            if (v212 == v211) {
              goto LABEL_364;
            }
          }
          int v210 = (void *)(v57 + v211);
        }
LABEL_364:
        uint64_t v58 = *(void *)(a1 + 64);
        goto LABEL_365;
      }
      int v213 = *(_DWORD *)(a1 + 72) - 1;
      unsigned int v214 = v213 & ((v208 >> 4) ^ (v208 >> 9));
      int v210 = (void *)(v57 + 8 * v214);
      uint64_t v215 = *v210;
      if (*v210 == -1)
      {
        uint64_t v216 = 0;
      }
      else
      {
        uint64_t v216 = 0;
        int v217 = 1;
        do
        {
          if (v215 == v208) {
            goto LABEL_365;
          }
          if (v216) {
            BOOL v218 = 0;
          }
          else {
            BOOL v218 = v215 == -2;
          }
          if (v218) {
            uint64_t v216 = v210;
          }
          unsigned int v219 = v214 + v217++;
          unsigned int v214 = v219 & v213;
          int v210 = (void *)(v57 + 8 * (v219 & v213));
          uint64_t v215 = *v210;
        }
        while (*v210 != -1);
      }
      if (v216) {
        int v210 = v216;
      }
      if (*v210 != v208)
      {
        if (v57 == v58) {
          __int16 v252 = (unsigned int *)(a1 + 76);
        }
        else {
          __int16 v252 = (unsigned int *)(a1 + 72);
        }
        int v210 = (void *)(v57 + 8 * *v252);
      }
LABEL_365:
      if (v57 == v58) {
        unsigned int v220 = (unsigned int *)(a1 + 76);
      }
      else {
        unsigned int v220 = (unsigned int *)(a1 + 72);
      }
      if (v210 == (void *)(v57 + 8 * *v220)) {
LABEL_381:
      }
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
LABEL_369:
      if (HIDWORD(a3) == 1) {
        return 0;
      }
      unint64_t v221 = (uint64_t **)(**(void **)v8 + 1888);
      if (v19 == 1) {
        v223.n128_f64[0] = llvm::ScalableVectorType::get(v221, (llvm::Type *)a3);
      }
      else {
        v223.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v221, (llvm::Type *)a3);
      }
      uint64_t v224 = *(void **)(a1 + 616);
      LODWORD(v304) = a3;
      if (a3 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v303);
      }
      unint64_t v225 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
      if (!a3) {
        unint64_t v225 = 0;
      }
      uint64_t v303 = v225;
      uint64_t v226 = (*(uint64_t (**)(void, uint64_t, uint64_t *, void, uint64_t, __n128))(*(void *)*v224 + 528))(*v224, v222, &v303, 0, 1, v223);
      int v227 = (void *)(*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 856))();
      uint64_t v301 = v298;
      int v302 = 0;
      uint64_t v306 = v227;
      uint64_t v307 = v228;
      sub_1CB90C9D4((uint64_t)&v306, (uint64_t)&v301);
      if (__OFADD__(v226, v306)) {
        uint64_t v18 = (char *)((((uint64_t)v306 + v226) >> 63) ^ 0x8000000000000000);
      }
      else {
        uint64_t v18 = (char *)v306 + v226;
      }
      if (v304 >= 0x41 && v303) {
        MEMORY[0x1D25D9CB0](v303, 0x1000C8000313F17);
      }
      return v18;
    case 0x28:
      uint64_t v52 = *(void **)(a1 + 616);
      int v53 = *(_DWORD *)(*(void *)v305 + 20);
      if ((v53 & 0x40000000) != 0) {
        uint64_t v54 = *(void ***)(*(void *)v305 - 8);
      }
      else {
        uint64_t v54 = (void **)(*(void *)v305 - 32 * (v53 & 0x7FFFFFF));
      }
      uint64_t v306 = *v54;
      return (char *)(*(uint64_t (**)(void, void, uint64_t))(*(void *)*v52 + 824))(*v52, (v17 - 28), v13);
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
      goto LABEL_10;
    case 0x2F:
    case 0x30:
    case 0x32:
    case 0x33:
      if (a3) {
        BOOL v24 = HIDWORD(a3) == 1;
      }
      else {
        BOOL v24 = 0;
      }
      if (!v24 && a3 < 2) {
        goto LABEL_23;
      }
      if (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, *(uint64_t *)v305, (llvm::Type *)a3, v12))
      {
        uint64_t v303 = (*(uint64_t (**)(void, uint64_t, void, void))(***(void ***)(a1 + 616) + 856))(**(void **)(a1 + 616), 55, 0, 0);
        uint64_t v304 = v144;
        uint64_t v306 = (void *)a3;
        LODWORD(v307) = 0;
        sub_1CB90C9D4((uint64_t)&v306, (uint64_t)&v303);
        uint64_t v145 = v306;
        uint64_t v303 = (*(uint64_t (**)(void, void, uint64_t))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), *(unsigned __int8 *)(*(void *)v305 + 16) - 28, v8);
        uint64_t v304 = v146;
        uint64_t v306 = (void *)a3;
        LODWORD(v307) = 0;
        sub_1CB90C9D4((uint64_t)&v306, (uint64_t)&v303);
        if (__OFADD__(v145, v306)) {
          int v147 = (char *)((((uint64_t)v306 + (uint64_t)v145) >> 63) ^ 0x8000000000000000);
        }
        else {
          int v147 = (char *)v306 + (void)v145;
        }
        unint64_t ScalarizationOverhead = llvm::LoopVectorizationCostModel::getScalarizationOverhead(a1, *(uint64_t *)v305, a3);
        int64_t v149 = (int64_t)&v147[ScalarizationOverhead];
        if (__OFADD__(v147, ScalarizationOverhead)) {
          int64_t v149 = ((uint64_t)&v147[ScalarizationOverhead] >> 63) ^ 0x8000000000000000;
        }
        return (char *)(v149 / 2);
      }
      uint64_t v16 = *(void *)v305;
      int v17 = *(unsigned __int8 *)(*(void *)v305 + 16);
LABEL_10:
      if (v17 != 45)
      {
LABEL_23:
        uint64_t v25 = v299;
        goto LABEL_24;
      }
      int v21 = *(_DWORD *)(v16 + 20);
      if ((v21 & 0x40000000) != 0) {
        int v22 = *(uint64_t **)(v16 - 8);
      }
      else {
        int v22 = (uint64_t *)(v16 - 32 * (v21 & 0x7FFFFFF));
      }
      uint64_t v26 = *v22;
      uint64_t v27 = *(void *)(*(void *)(a1 + 608) + 56);
      uint64_t v29 = *(void *)(v27 + 88);
      uint64_t v28 = *(void *)(v27 + 96);
      uint64_t v25 = v299;
      if (v28 == v29)
      {
        uint64_t v30 = *(unsigned int *)(v27 + 108);
        int v31 = (void *)(v28 + 8 * v30);
        if (v30)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 8 * v30;
          while (*(void *)(v28 + v32) != v26)
          {
            v32 += 8;
            if (v33 == v32) {
              goto LABEL_47;
            }
          }
          int v31 = (void *)(v28 + v32);
        }
LABEL_47:
        uint64_t v42 = *(void *)(v27 + 96);
        goto LABEL_104;
      }
      uint64_t v34 = *(unsigned int *)(v27 + 104);
      int v35 = v34 - 1;
      unsigned int v36 = (v34 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      int v31 = (void *)(v28 + 8 * v36);
      uint64_t v37 = *v31;
      if (*v31 == -1)
      {
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = 0;
        int v39 = 1;
        do
        {
          if (v37 == v26) {
            goto LABEL_103;
          }
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v37 == -2;
          }
          if (v40) {
            uint64_t v38 = v31;
          }
          unsigned int v41 = v36 + v39++;
          unsigned int v36 = v41 & v35;
          int v31 = (void *)(v28 + 8 * (v41 & v35));
          uint64_t v37 = *v31;
        }
        while (*v31 != -1);
      }
      if (v38) {
        int v31 = v38;
      }
      if (*v31 != v26) {
        int v31 = (void *)(v28 + 8 * v34);
      }
LABEL_103:
      uint64_t v42 = *(void *)(v27 + 88);
LABEL_104:
      BOOL v15 = v28 == v42;
      uint64_t v75 = 104;
      if (v15) {
        uint64_t v75 = 108;
      }
      if (v31 != (void *)(v28 + 8 * *(unsigned int *)(v27 + v75))) {
        return 0;
      }
      uint64_t v76 = (v21 & 0x40000000) != 0 ? *(void *)(v16 - 8) : v16 - 32 * (v21 & 0x7FFFFFF);
      BOOL v77 = (unsigned int *)(v27 + 108);
      uint64_t v78 = (unsigned int *)(v27 + 104);
      uint64_t v79 = *(void *)(v76 + 32);
      if (v28 == v29)
      {
        uint64_t v80 = *v77;
        uint64_t v81 = (void *)(v28 + 8 * v80);
        if (v80)
        {
          uint64_t v82 = 0;
          uint64_t v83 = 8 * v80;
          while (*(void *)(v28 + v82) != v79)
          {
            v82 += 8;
            if (v83 == v82) {
              goto LABEL_130;
            }
          }
          uint64_t v81 = (void *)(v28 + v82);
        }
LABEL_130:
        uint64_t v29 = v28;
      }
      else
      {
        uint64_t v84 = *v78;
        int v85 = v84 - 1;
        unsigned int v86 = (v84 - 1) & ((v79 >> 4) ^ (v79 >> 9));
        uint64_t v81 = (void *)(v28 + 8 * v86);
        uint64_t v87 = *v81;
        if (*v81 == -1)
        {
          BOOL v88 = 0;
LABEL_175:
          if (v88) {
            uint64_t v81 = v88;
          }
          if (*v81 != v79) {
            uint64_t v81 = (void *)(v28 + 8 * v84);
          }
        }
        else
        {
          BOOL v88 = 0;
          int v89 = 1;
          while (v87 != v79)
          {
            if (v88) {
              BOOL v90 = 0;
            }
            else {
              BOOL v90 = v87 == -2;
            }
            if (v90) {
              BOOL v88 = v81;
            }
            unsigned int v91 = v86 + v89++;
            unsigned int v86 = v91 & v85;
            uint64_t v81 = (void *)(v28 + 8 * (v91 & v85));
            uint64_t v87 = *v81;
            if (*v81 == -1) {
              goto LABEL_175;
            }
          }
        }
      }
      __n128 v94 = v28 == v29 ? v77 : v78;
      if (v81 != (void *)(v28 + 8 * *v94)) {
        return 0;
      }
LABEL_24:
      llvm::LoopVectorizationCostModel::getReductionPatternCost(a1, v16, a3, *v25, 0, (uint64_t)&v306);
      if (LOBYTE(v308[0])) {
        return (char *)v306;
      }
      int v92 = *(_DWORD *)(*(void *)v305 + 20);
      if ((v92 & 0x40000000) != 0) {
        uint64_t v93 = *(void *)(*(void *)v305 - 8);
      }
      else {
        uint64_t v93 = *(void *)v305 - 32 * (v92 & 0x7FFFFFF);
      }
      int v106 = *(llvm::Value **)(v93 + 32);
      LODWORD(v303) = 0;
      if (!llvm::TargetTransformInfo::getOperandInfo((uint64_t)v106, &v303)) {
        llvm::LoopAccessInfo::isUniform(*(const llvm::Loop ***)(*(void *)(a1 + 608) + 56), v106);
      }
      int v107 = *(_DWORD *)(*(void *)v305 + 20);
      if ((v107 & 0x40000000) != 0)
      {
        int v109 = *(char **)(*(void *)v305 - 8);
        uint64_t v108 = v107 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v108 = v107 & 0x7FFFFFF;
        int v109 = (char *)(*(void *)v305 - 32 * v108);
      }
      uint64_t v306 = v308;
      uint64_t v307 = 0x400000000;
      sub_1CD77B118((uint64_t)&v306, v109, &v109[32 * v108]);
      uint64_t v110 = (*(uint64_t (**)(void, void, uint64_t))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), *(unsigned __int8 *)(*(void *)v305 + 16) - 28, *v25);
      goto LABEL_159;
    case 0x3B:
      if (HIDWORD(a3) == 1) {
        return 0;
      }
      return (char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), 17, v13);
    case 0x3C:
    case 0x3D:
      BOOL v142 = v19 == 1 && a3 != 0;
      if (a3 > 1 || v142)
      {
        if (sub_1CD8CE880(a1, *(uint64_t *)v305, a3) == 5)
        {
          unint64_t v19 = 0;
          uint64_t v143 = 1;
        }
        else
        {
          uint64_t v143 = a3;
        }
        uint64_t v16 = *(void *)v305;
        int v17 = *(unsigned __int8 *)(*(void *)v305 + 16);
      }
      else
      {
        uint64_t v143 = a3;
      }
      uint64_t v164 = (uint64_t ***)v16;
      if (v17 != 60) {
        uint64_t v164 = *(uint64_t ****)(v16 - 64);
      }
      uint64_t v165 = *v164;
      int v166 = *((unsigned __int8 *)*v164 + 8);
      BOOL v167 = v166 == 7 || v166 == 9;
      if (!v167 && (v19 == 1 || v143 != 1))
      {
        if (v19 == 1) {
          llvm::ScalableVectorType::get(v165, (llvm::Type *)v143);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v165, (llvm::Type *)v143);
        }
        uint64_t v16 = *(void *)v305;
      }
      *uint64_t v299 = (uint64_t)v165;
      return (char *)llvm::LoopVectorizationCostModel::getMemoryInstructionCost(a1, v16, a3);
    case 0x3E:
      return v18;
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
      if ((v17 - 66) > 8) {
        goto LABEL_219;
      }
      int v72 = 1 << (v17 - 66);
      if ((v72 & 0x106) != 0)
      {
        int v73 = *(_DWORD *)(*(void *)v305 + 20);
        if ((v73 & 0x40000000) != 0) {
          int v74 = *(uint64_t **)(*(void *)v305 - 8);
        }
        else {
          int v74 = (uint64_t *)(*(void *)v305 - 32 * (v73 & 0x7FFFFFF));
        }
        int v111 = v299;
        uint64_t v130 = *v74;
        if (!*v74 || *(unsigned char *)(v130 + 16) != 60 || HIDWORD(a3) != 1 && a3 == 1) {
          goto LABEL_387;
        }
        uint64_t v131 = *(void *)(a1 + 584);
        uint64_t v132 = *(void *)(v130 + 40);
        uint64_t v134 = *(void *)(v131 + 56);
        uint64_t v133 = *(void *)(v131 + 64);
        if (v133 == v134)
        {
          uint64_t v135 = *(unsigned int *)(v131 + 76);
          uint64_t v136 = (void *)(v133 + 8 * v135);
          if (v135)
          {
            uint64_t v137 = 0;
            uint64_t v138 = 8 * v135;
            while (*(void *)(v133 + v137) != v132)
            {
              v137 += 8;
              if (v138 == v137) {
                goto LABEL_383;
              }
            }
            uint64_t v136 = (void *)(v133 + v137);
          }
LABEL_383:
          uint64_t v134 = *(void *)(v131 + 64);
        }
        else
        {
          uint64_t v193 = *(unsigned int *)(v131 + 72);
          int v194 = v193 - 1;
          unsigned int v195 = (v193 - 1) & ((v132 >> 4) ^ (v132 >> 9));
          uint64_t v136 = (void *)(v133 + 8 * v195);
          uint64_t v196 = *v136;
          if (*v136 == -1)
          {
            BOOL v197 = 0;
LABEL_443:
            if (v197) {
              uint64_t v136 = v197;
            }
            if (*v136 != v132) {
              uint64_t v136 = (void *)(v133 + 8 * v193);
            }
          }
          else
          {
            BOOL v197 = 0;
            int v198 = 1;
            while (v196 != v132)
            {
              if (v197) {
                BOOL v199 = 0;
              }
              else {
                BOOL v199 = v196 == -2;
              }
              if (v199) {
                BOOL v197 = v136;
              }
              unsigned int v200 = v195 + v198++;
              unsigned int v195 = v200 & v194;
              uint64_t v136 = (void *)(v133 + 8 * (v200 & v194));
              uint64_t v196 = *v136;
              if (*v136 == -1) {
                goto LABEL_443;
              }
            }
          }
        }
        BOOL v15 = v133 == v134;
        uint64_t v229 = 72;
        if (v15) {
          uint64_t v229 = 76;
        }
        if (v136 != (void *)(v133 + 8 * *(unsigned int *)(v131 + v229)))
        {
          int v234 = sub_1CD8CE880(a1, v130, a3);
          int v20 = v17 - 28;
          switch(v234)
          {
            case 2:
            case 3:
            case 4:
              goto LABEL_387;
            default:
              uint64_t v235 = *(void *)(a1 + 608);
              uint64_t v236 = *(void *)(v235 + 496);
              if (v236 == *(void *)(v235 + 488))
              {
                uint64_t v237 = *(unsigned int *)(v235 + 508);
                if (v237)
                {
                  uint64_t v238 = 0;
                  uint64_t v239 = 8 * v237;
                  do
                  {
                    if (*(void *)(v236 + v238) == v130) {
                      break;
                    }
                    v238 += 8;
                  }
                  while (v239 != v238);
                }
              }
              else
              {
                int v255 = *(_DWORD *)(v235 + 504) - 1;
                unsigned int v256 = v255 & ((v130 >> 4) ^ (v130 >> 9));
                uint64_t v257 = (void *)(v236 + 8 * v256);
                uint64_t v258 = *v257;
                if (*v257 != -1)
                {
                  uint64_t v259 = 0;
                  int v260 = 1;
                  do
                  {
                    if (v258 == v130) {
                      break;
                    }
                    if (v259) {
                      BOOL v261 = 0;
                    }
                    else {
                      BOOL v261 = v258 == -2;
                    }
                    if (v261) {
                      uint64_t v259 = v257;
                    }
                    unsigned int v262 = v256 + v260++;
                    unsigned int v256 = v262 & v255;
                    uint64_t v257 = (void *)(v236 + 8 * (v262 & v255));
                    uint64_t v258 = *v257;
                  }
                  while (*v257 != -1);
                }
              }
              break;
          }
        }
        goto LABEL_387;
      }
      int v111 = v299;
      if ((v72 & 0x81) == 0) {
        goto LABEL_387;
      }
      uint64_t v112 = *(void *)(*(void *)v305 + 8);
      if (!v112) {
        goto LABEL_387;
      }
      if (*(void *)(v112 + 8)) {
        goto LABEL_387;
      }
      uint64_t v113 = *(void *)(v112 + 24);
      if (!v113 || *(unsigned char *)(v113 + 16) != 61 || HIDWORD(a3) != 1 && a3 == 1) {
        goto LABEL_387;
      }
      uint64_t v114 = *(void *)(a1 + 584);
      uint64_t v115 = *(void *)(v113 + 40);
      uint64_t v117 = *(void *)(v114 + 56);
      uint64_t v116 = *(void *)(v114 + 64);
      if (v116 == v117)
      {
        uint64_t v118 = *(unsigned int *)(v114 + 76);
        BOOL v119 = (void *)(v116 + 8 * v118);
        if (v118)
        {
          uint64_t v120 = 0;
          uint64_t v121 = 8 * v118;
          while (*(void *)(v116 + v120) != v115)
          {
            v120 += 8;
            if (v121 == v120) {
              goto LABEL_491;
            }
          }
          BOOL v119 = (void *)(v116 + v120);
        }
LABEL_491:
        uint64_t v117 = *(void *)(v114 + 64);
        goto LABEL_492;
      }
      uint64_t v267 = *(unsigned int *)(v114 + 72);
      int v268 = v267 - 1;
      unsigned int v269 = (v267 - 1) & ((v115 >> 4) ^ (v115 >> 9));
      BOOL v119 = (void *)(v116 + 8 * v269);
      uint64_t v270 = *v119;
      if (*v119 == -1)
      {
        v271 = 0;
      }
      else
      {
        v271 = 0;
        int v272 = 1;
        do
        {
          if (v270 == v115) {
            goto LABEL_492;
          }
          if (v271) {
            BOOL v273 = 0;
          }
          else {
            BOOL v273 = v270 == -2;
          }
          if (v273) {
            v271 = v119;
          }
          unsigned int v274 = v269 + v272++;
          unsigned int v269 = v274 & v268;
          BOOL v119 = (void *)(v116 + 8 * (v274 & v268));
          uint64_t v270 = *v119;
        }
        while (*v119 != -1);
      }
      if (v271) {
        BOOL v119 = v271;
      }
      if (*v119 != v115) {
        BOOL v119 = (void *)(v116 + 8 * v267);
      }
LABEL_492:
      BOOL v15 = v116 == v117;
      uint64_t v275 = 72;
      if (v15) {
        uint64_t v275 = 76;
      }
      if (v119 != (void *)(v116 + 8 * *(unsigned int *)(v114 + v275)))
      {
        int v276 = sub_1CD8CE880(a1, v113, a3);
        int v20 = v17 - 28;
        switch(v276)
        {
          case 2:
          case 3:
          case 4:
            break;
          default:
            uint64_t v277 = *(void *)(a1 + 608);
            uint64_t v278 = *(void *)(v277 + 496);
            if (v278 == *(void *)(v277 + 488))
            {
              uint64_t v279 = *(unsigned int *)(v277 + 508);
              if (v279)
              {
                uint64_t v280 = 0;
                uint64_t v281 = 8 * v279;
                do
                {
                  if (*(void *)(v278 + v280) == v113) {
                    break;
                  }
                  v280 += 8;
                }
                while (v281 != v280);
              }
            }
            else
            {
              int v282 = *(_DWORD *)(v277 + 504) - 1;
              unsigned int v283 = v282 & ((v113 >> 4) ^ (v113 >> 9));
              int v284 = (void *)(v278 + 8 * v283);
              uint64_t v285 = *v284;
              if (*v284 != -1)
              {
                uint64_t v286 = 0;
                int v287 = 1;
                do
                {
                  if (v285 == v113) {
                    break;
                  }
                  if (v286) {
                    BOOL v288 = 0;
                  }
                  else {
                    BOOL v288 = v285 == -2;
                  }
                  if (v288) {
                    uint64_t v286 = v284;
                  }
                  unsigned int v289 = v283 + v287++;
                  unsigned int v283 = v289 & v282;
                  int v284 = (void *)(v278 + 8 * (v289 & v282));
                  uint64_t v285 = *v284;
                }
                while (*v284 != -1);
              }
            }
            int v111 = v299;
            int v20 = v17 - 28;
            break;
        }
      }
LABEL_387:
      int v230 = v20;
      if (sub_1CD8CEA8C(a1, *(llvm::FixedVectorType ***)v305, (llvm::Type *)a3))
      {
        __n128 v163 = *(uint64_t (**)(void))(***(void ***)(a1 + 616) + 840);
        return (char *)v163();
      }
      llvm::LoopVectorizationCostModel::getReductionPatternCost(a1, *(uint64_t *)v305, a3, *v111, 0, (uint64_t)&v306);
      if (LOBYTE(v308[0])) {
        return (char *)v306;
      }
      uint64_t v231 = *(void *)v305;
      int v232 = *(_DWORD *)(*(void *)v305 + 20);
      if ((v232 & 0x40000000) != 0) {
        uint64_t v233 = *(uint64_t ***)(*(void *)v305 - 8);
      }
      else {
        uint64_t v233 = (uint64_t **)(*(void *)v305 - 32 * (v232 & 0x7FFFFFF));
      }
      uint64_t v243 = **v233;
      if ((*(_DWORD *)(*v111 + 8) & 0xFE) == 0x12)
      {
        int v244 = *(unsigned __int8 *)(v243 + 8);
        BOOL v245 = v244 == 7 || v244 == 9;
        if (!v245 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
        {
          if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
            llvm::ScalableVectorType::get((uint64_t **)v243, (llvm::Type *)a3);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v243, (llvm::Type *)a3);
          }
          uint64_t v231 = *(void *)v305;
          int v111 = v299;
        }
      }
      BOOL v246 = sub_1CD8CE9F8(a1, v231, a3);
      uint64_t v247 = *v111;
      if (!v246) {
        goto LABEL_468;
      }
      if (v230 == 38)
      {
        unsigned int v248 = *(_DWORD *)(*(void *)(v247 + 24) + 8) >> 8;
        uint64_t v249 = **(void **)v305;
        int v250 = *(unsigned __int8 *)(**(void **)v305 + 8);
        if (v250 != 7 && v250 != 9)
        {
          if ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1)
          {
            if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
              llvm::ScalableVectorType::get((uint64_t **)v249, (llvm::Type *)a3);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v249, (llvm::Type *)a3);
            }
            unsigned int v248 = *(_DWORD *)(*(void *)(v247 + 24) + 8) >> 8;
          }
          int v111 = v299;
        }
        if (v248 < *(_DWORD *)(*(void *)(v249 + 24) + 8) >> 8) {
          uint64_t v247 = v249;
        }
      }
      else
      {
        if ((v17 - 67) > 1) {
          goto LABEL_468;
        }
        unsigned int v263 = *(_DWORD *)(*(void *)(v247 + 24) + 8) >> 8;
        uint64_t v264 = **(void **)v305;
        int v265 = *(unsigned __int8 *)(**(void **)v305 + 8);
        BOOL v266 = v265 == 7 || v265 == 9;
        if (!v266 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
        {
          if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
            llvm::ScalableVectorType::get((uint64_t **)v264, (llvm::Type *)a3);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v264, (llvm::Type *)a3);
          }
          unsigned int v263 = *(_DWORD *)(*(void *)(v247 + 24) + 8) >> 8;
        }
        if (v263 > *(_DWORD *)(*(void *)(v264 + 24) + 8) >> 8) {
          uint64_t v247 = v264;
        }
        int v111 = v299;
      }
      *int v111 = v247;
LABEL_468:
      __n128 v163 = *(uint64_t (**)(void))(***(void ***)(a1 + 616) + 840);
      return (char *)v163();
    case 0x4D:
      if (*(unsigned char *)(**(void **)v305 + 8) == 15) {
        return 0;
      }
LABEL_219:
      int v111 = v299;
      goto LABEL_387;
    case 0x51:
    case 0x52:
      int v139 = *(_DWORD *)(*(void *)v305 + 20);
      if ((v139 & 0x40000000) != 0) {
        int v140 = *(uint64_t **)(*(void *)v305 - 8);
      }
      else {
        int v140 = (uint64_t *)(*(void *)v305 - 32 * (v139 & 0x7FFFFFF));
      }
      uint64_t v158 = *v140;
      uint64_t v159 = *(void *)v158;
      if (*(unsigned __int8 *)(v158 + 16) <= 0x1Bu) {
        int v160 = 0;
      }
      else {
        int v160 = (void *)v158;
      }
      uint64_t v306 = v160;
      if (sub_1CD8CE9F8(a1, (uint64_t)v160, a3))
      {
        uint64_t v253 = *(uint64_t **)v159;
        int v254 = (unsigned int *)sub_1CD48CC08(a1 + 8, (uint64_t *)&v306);
        uint64_t v159 = llvm::IntegerType::get((llvm::IntegerType *)v253, (llvm::LLVMContext *)*v254);
      }
      int v161 = *(unsigned __int8 *)(v159 + 8);
      BOOL v162 = v161 == 7 || v161 == 9;
      if (!v162 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
      {
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
          llvm::ScalableVectorType::get((uint64_t **)v159, (llvm::Type *)a3);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v159, (llvm::Type *)a3);
        }
        uint64_t v159 = v189;
      }
      *uint64_t v299 = v159;
      __n128 v163 = *(uint64_t (**)(void))(***(void ***)(a1 + 616) + 864);
      return (char *)v163();
    case 0x53:
      if (a3) {
        BOOL v69 = HIDWORD(a3) == 1;
      }
      else {
        BOOL v69 = 0;
      }
      if (!v69 && a3 < 2) {
        return (char *)(*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 856))();
      }
      uint64_t v99 = *(void *)(a1 + 608);
      uint64_t v101 = *(void *)(v99 + 240);
      uint64_t v100 = *(void *)(v99 + 248);
      if (v100 == v101)
      {
        uint64_t v102 = *(unsigned int *)(v99 + 260);
        BOOL v103 = (void *)(v100 + 8 * v102);
        if (!v102) {
          goto LABEL_270;
        }
        uint64_t v104 = 8 * v102;
        uint64_t v105 = *(void **)(v99 + 248);
        while (*v105 != *(void *)v305)
        {
          ++v105;
          v104 -= 8;
          if (!v104) {
            goto LABEL_270;
          }
        }
        BOOL v103 = v105;
      }
      else
      {
        uint64_t v122 = *(unsigned int *)(v99 + 256);
        int v123 = v122 - 1;
        unsigned int v124 = (v122 - 1) & ((v305[0] >> 4) ^ (v305[0] >> 9));
        BOOL v103 = (void *)(v100 + 8 * v124);
        uint64_t v125 = *v103;
        if (*v103 == -1)
        {
          __n128 v126 = 0;
        }
        else
        {
          __n128 v126 = 0;
          int v127 = 1;
          do
          {
            if (v125 == *(void *)v305) {
              goto LABEL_270;
            }
            if (v126) {
              BOOL v128 = 0;
            }
            else {
              BOOL v128 = v125 == -2;
            }
            if (v128) {
              __n128 v126 = v103;
            }
            unsigned int v129 = v124 + v127++;
            unsigned int v124 = v129 & v123;
            BOOL v103 = (void *)(v100 + 8 * (v129 & v123));
            uint64_t v125 = *v103;
          }
          while (*v103 != -1);
        }
        if (v126) {
          BOOL v103 = v126;
        }
        int v174 = (void *)(v100 + 8 * v122);
        if (*v103 != *(void *)v305) {
          BOOL v103 = v174;
        }
      }
LABEL_270:
      BOOL v15 = v100 == v101;
      uint64_t v175 = 256;
      if (v15) {
        uint64_t v175 = 260;
      }
      if (v103 != (void *)(v100 + 8 * *(unsigned int *)(v99 + v175)))
      {
        int64_t v176 = *(void **)(a1 + 616);
        double v177 = llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, (llvm::Type *)1);
        return (char *)(*(uint64_t (**)(void, uint64_t, uint64_t, void, void, void, uint64_t, double))(*(void *)*v176 + 832))(*v176, 5, v13, 0, 0, (a3 - 1), v178, v177);
      }
      if (*(void *)(*(void *)v305 + 40) == **(void **)(*(void *)(a1 + 584) + 32)) {
        return (char *)(*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 856))();
      }
      int v179 = (void *)((*(_DWORD *)(*(void *)v305 + 20) & 0x7FFFFFFu) - 1);
      BOOL v180 = *(void **)(a1 + 616);
      uint64_t v181 = **(void **)v305;
      int v182 = *(unsigned __int8 *)(**(void **)v305 + 8);
      BOOL v183 = v182 == 7 || v182 == 9;
      if (!v183 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
      {
        uint64_t v190 = **(uint64_t ****)v305;
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
          llvm::ScalableVectorType::get(v190, (llvm::Type *)a3);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v190, (llvm::Type *)a3);
        }
        uint64_t v181 = v191;
      }
      uint64_t v184 = ***(void ***)v16;
      uint64_t v185 = (uint64_t **)(v184 + 1888);
      int v186 = *(unsigned __int8 *)(v184 + 1896);
      BOOL v187 = v186 == 7 || v186 == 9;
      if (!v187 && ((a3 & 0xFFFFFFFF00000000) == 0x100000000 || a3 != 1))
      {
        if ((a3 & 0xFFFFFFFF00000000) == 0x100000000) {
          llvm::ScalableVectorType::get(v185, (llvm::Type *)a3);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v185, (llvm::Type *)a3);
        }
        uint64_t v185 = v192;
      }
      uint64_t v303 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t **, uint64_t, void, void))(*(void *)*v180 + 864))(*v180, 57, v181, v185, 42, 0, 0);
      uint64_t v304 = v188;
      uint64_t v306 = v179;
      LODWORD(v307) = 0;
      sub_1CB90C9D4((uint64_t)&v306, (uint64_t)&v303);
      return (char *)v306;
    case 0x54:
      if (sub_1CBFFFD84(*(uint64_t *)v305))
      {
        llvm::LoopVectorizationCostModel::getReductionPatternCost(a1, *(uint64_t *)v305, a3, *v299, 0, (uint64_t)&v306);
        if (LOBYTE(v308[0])) {
          return (char *)v306;
        }
      }
      uint64_t v63 = *(void *)v305;
      uint64_t v18 = (char *)llvm::LoopVectorizationCostModel::getVectorCallCost(a1, *(uint64_t *)v305, a3, &v306);
      int v65 = v64;
      if (llvm::getVectorIntrinsicIDForCall(v63, *(uint64_t **)(a1 + 624)))
      {
        uint64_t VectorIntrinsicCost = llvm::LoopVectorizationCostModel::getVectorIntrinsicCost(a1, v63, (llvm::Type *)a3);
        BOOL v68 = VectorIntrinsicCost < (uint64_t)v18;
        if (v67 != v65) {
          BOOL v68 = v67 < v65;
        }
        if (v68) {
          return (char *)VectorIntrinsicCost;
        }
      }
      return v18;
    case 0x55:
      unint64_t v44 = *(void *)(*(void *)v305 - 96);
      uint64_t v45 = *(void *)(v11 + 104);
      unsigned int v46 = *(_DWORD *)(v11 + 120);
      if (!v46) {
        goto LABEL_88;
      }
      unsigned int v47 = ((v44 >> 4) ^ (v44 >> 9)) & (v46 - 1);
      uint64_t v48 = v45 + 48 * v47;
      uint64_t v49 = *(void *)(v48 + 24);
      if (v49 == v44) {
        goto LABEL_89;
      }
      int v50 = 1;
      break;
    case 0x5C:
      return (char *)sub_1CBFB51A8(*(void **)(a1 + 616), *(uint64_t *)v305);
    default:
      return (char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 616) + 824))(**(void **)(a1 + 616), 17, v13);
  }
  while (v49 != -4096)
  {
    unsigned int v51 = v47 + v50++;
    unsigned int v47 = v51 & (v46 - 1);
    uint64_t v48 = v45 + 48 * v47;
    uint64_t v49 = *(void *)(v48 + 24);
    if (v49 == v44) {
      goto LABEL_89;
    }
  }
LABEL_88:
  uint64_t v48 = v45 + 48 * v46;
LABEL_89:
  if (v48 == v45 + 48 * v46 || (SCEVIter = *(const llvm::SCEV **)(v48 + 40)) == 0) {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v11, v44);
  }
  uint64_t v71 = v299;
  if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v11, SCEVIter, *(const llvm::Loop **)(a1 + 584)) == 1)goto LABEL_407; {
  if (!*(void *)v305)
  }
    goto LABEL_405;
  int v95 = *(_DWORD *)(**(void **)v305 + 8);
  if ((v95 & 0xFE) == 0x12) {
    int v95 = *(_DWORD *)(**(void **)(**(void **)v305 + 16) + 8);
  }
  if (v95 == 269)
  {
    int v96 = *(unsigned __int8 *)(*(void *)v305 + 16);
    if (v96 != 85)
    {
      if (v96 != 56) {
        goto LABEL_321;
      }
      int v97 = *(_DWORD *)(*(void *)v305 + 20);
      uint64_t v98 = (v97 & 0x40000000) != 0
          ? *(uint64_t **)(*(void *)v305 - 8)
          : (uint64_t *)(*(void *)v305 - 32 * (v97 & 0x7FFFFFF));
      uint64_t v170 = *v98;
      if (!*v98) {
        goto LABEL_321;
      }
      uint64_t v171 = v98[4];
LABEL_320:
      if (v171) {
        goto LABEL_541;
      }
      goto LABEL_321;
    }
    uint64_t v168 = *(void *)(*(void *)v305 - 32);
    if (!v168) {
      goto LABEL_321;
    }
    unsigned int v169 = *(unsigned __int8 *)(v168 + 16);
    if (v169 > 0x14) {
      goto LABEL_321;
    }
    uint64_t v170 = *(void *)(*(void *)v305 - 96);
    uint64_t v171 = *(void *)(*(void *)v305 - 64);
    if (v169 != 16)
    {
      if (v169 == 17)
      {
        if (!sub_1CB844168(v168, 0.0)) {
          goto LABEL_321;
        }
      }
      else if (v169 - 18 >= 3 && v169 != 13)
      {
        goto LABEL_321;
      }
LABEL_261:
      if (!v170) {
        goto LABEL_321;
      }
      goto LABEL_320;
    }
    uint64_t v172 = *(unsigned int *)(v168 + 32);
    if (v172 < 0x41)
    {
      if (*(void *)(v168 + 24)) {
        goto LABEL_321;
      }
      goto LABEL_261;
    }
    int v290 = 0;
    int64_t v291 = (unint64_t)(v172 + 63) >> 6;
    do
    {
      BOOL v206 = v291-- < 1;
      if (v206) {
        break;
      }
      unint64_t v292 = *(void *)(*(void *)(v168 + 24) + 8 * v291);
      v290 += __clz(v292);
    }
    while (!v292);
    int v293 = v172 | 0xFFFFFFC0;
    if ((v172 & 0x3F) == 0) {
      int v293 = 0;
    }
    BOOL v295 = v290 + v293 != v172 || v170 == 0 || v171 == 0;
    uint64_t v71 = v299;
    if (!v295) {
      goto LABEL_541;
    }
  }
LABEL_321:
  if (!*(void *)v305) {
    goto LABEL_405;
  }
  int v201 = *(_DWORD *)(**(void **)v305 + 8);
  if ((v201 & 0xFE) == 0x12) {
    int v201 = *(_DWORD *)(**(void **)(**(void **)v305 + 16) + 8);
  }
  if (v201 != 269) {
    goto LABEL_405;
  }
  int v202 = *(unsigned __int8 *)(*(void *)v305 + 16);
  if (v202 == 85)
  {
    uint64_t v205 = *(unsigned __int8 **)(*(void *)v305 - 64);
    if (v205) {
      BOOL v206 = v205[16] > 0x14u;
    }
    else {
      BOOL v206 = 1;
    }
    if (v206) {
      goto LABEL_405;
    }
    uint64_t v171 = *(void *)(*(void *)v305 - 32);
    uint64_t v170 = *(void *)(*(void *)v305 - 96);
    if (!llvm::Constant::isOneValue((llvm::Constant *)v205) || !v170 || !v171) {
      goto LABEL_405;
    }
LABEL_541:
    LODWORD(v303) = 0;
    LODWORD(v301) = 0;
    llvm::TargetTransformInfo::getOperandInfo(v170, &v303);
    llvm::TargetTransformInfo::getOperandInfo(v171, &v301);
    uint64_t v306 = v308;
    v308[0] = v170;
    v308[1] = v171;
    uint64_t v307 = 0x200000002;
    v296 = *(void **)(a1 + 616);
    if (sub_1CCA16538((uint64_t)v300, *(unsigned __int8 **)v305)) {
      uint64_t v297 = 29;
    }
    else {
      uint64_t v297 = 28;
    }
    uint64_t v110 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v296 + 824))(*v296, v297, *v71);
LABEL_159:
    uint64_t v18 = (char *)v110;
    if (v306 != v308) {
      free(v306);
    }
    return v18;
  }
  if (v202 == 57)
  {
    int v203 = *(_DWORD *)(*(void *)v305 + 20);
    uint64_t v204 = (v203 & 0x40000000) != 0
         ? *(uint64_t **)(*(void *)v305 - 8)
         : (uint64_t *)(*(void *)v305 - 32 * (v203 & 0x7FFFFFF));
    uint64_t v170 = *v204;
    uint64_t v171 = v204[4];
    if (*v204 && v171 != 0) {
      goto LABEL_541;
    }
  }
LABEL_405:
  uint64_t v241 = **(uint64_t ****)(v16 - 96);
  if (v19 == 1) {
    llvm::ScalableVectorType::get(v241, (llvm::Type *)a3);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v241, (llvm::Type *)a3);
  }
LABEL_407:
  __n128 v163 = *(uint64_t (**)(void))(***(void ***)(a1 + 616) + 864);
  return (char *)v163();
}

void llvm::LoopVectorizationCostModel::setCostBasedWideningDecision(uint64_t a1, llvm::Type *a2, uint64_t a3, llvm::DominatorTree *a4)
{
  v174[4] = *MEMORY[0x1E4F143B8];
  unsigned int v169 = a2;
  BOOL v4 = (unint64_t)a2 >> 32 != 1 && a2 == 1;
  if (v4) {
    return;
  }
  *(_DWORD *)a1 = 0;
  uint64_t v6 = *(void *)(a1 + 584);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 40);
  if (v8 != v7)
  {
    uint64_t v161 = a1 + 560;
    uint64_t v155 = *(void *)(v6 + 40);
    do
    {
      uint64_t v9 = *(void *)v7 + 40;
      for (uint64_t i = *(void *)(*(void *)v7 + 48); i != v9; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v11 = (unsigned char *)(i - 24);
        }
        else {
          uint64_t v11 = 0;
        }
        int v12 = v11[16];
        if (i && v12 == 60)
        {
          if (!*((void *)v11 - 4)) {
            continue;
          }
        }
        else
        {
          if (!i || v12 != 61 || !*((void *)v11 - 4)) {
            continue;
          }
          if (llvm::LoopVectorizationCostModel::isScalarWithPredication(a1, (uint64_t)v11, v169, a4)) {
            ++*(_DWORD *)a1;
          }
        }
        if (sub_1CD8CC86C(*(void *)(a1 + 608), (uint64_t)v11))
        {
          uint64_t v13 = v169;
          BOOL v14 = v11[16] == 61 && HIDWORD(v169) == 1;
          if (v14 && sub_1CD30E9EC(a1, (uint64_t)v11, v169))
          {
            unint64_t GatherScatterCost = llvm::LoopVectorizationCostModel::getGatherScatterCost(a1, (uint64_t)v11, v13);
            int v17 = v16;
            uint64_t v164 = (llvm::Type *)v11;
            uint64_t v165 = v169;
            uint64_t v18 = sub_1CD8D6C50(v161, (uint64_t)&v164);
            *(_DWORD *)(v18 + 16) = 4;
            *(void *)(v18 + 24) = GatherScatterCost;
            *(_DWORD *)(v18 + 32) = v17;
          }
          else
          {
            unint64_t UniformMemOpCost = llvm::LoopVectorizationCostModel::getUniformMemOpCost(a1, (uint64_t)v11, v13);
            int v26 = v25;
            uint64_t v164 = (llvm::Type *)v11;
            uint64_t v165 = v13;
            uint64_t v27 = sub_1CD8D6C50(v161, (uint64_t)&v164);
            *(_DWORD *)(v27 + 16) = 5;
            *(void *)(v27 + 24) = UniformMemOpCost;
            *(_DWORD *)(v27 + 32) = v26;
          }
          continue;
        }
        if (llvm::LoopVectorizationCostModel::memoryInstructionCanBeWidened(a1, (uint64_t)v11, v169))
        {
          unint64_t ConsecutiveMemOpCost = llvm::LoopVectorizationCostModel::getConsecutiveMemOpCost(a1, (uint64_t)v11, v169);
          int v21 = v20;
          int v22 = v11[16];
          if (v22 == 60)
          {
            uint64_t v23 = *(llvm::Type **)v11;
            goto LABEL_37;
          }
          uint64_t v32 = 0;
          uint64_t v23 = (llvm::Type *)**((void **)v11 - 8);
          if (v22 == 61) {
LABEL_37:
          }
            uint64_t v32 = (llvm::Value *)*((void *)v11 - 4);
          if (llvm::LoopVectorizationLegality::isConsecutivePtr(*(llvm::LoopVectorizationLegality **)(a1 + 608), v23, v32) == 1)int v33 = 1; {
          else
          }
            int v33 = 2;
          uint64_t v164 = (llvm::Type *)v11;
          uint64_t v165 = v169;
          uint64_t v34 = sub_1CD8D6C50(v161, (uint64_t)&v164);
          *(_DWORD *)(v34 + 16) = v33;
          *(void *)(v34 + 24) = ConsecutiveMemOpCost;
          *(_DWORD *)(v34 + 32) = v21;
          continue;
        }
        uint64_t v28 = *(void *)(a1 + 672);
        uint64_t v164 = (llvm::Type *)v11;
        uint64_t v172 = 0;
        if (sub_1CD3C8538((uint64_t *)(v28 + 48), &v164, &v172))
        {
          uint64_t v29 = v172;
          uint64_t v30 = *(void *)(v28 + 48);
          uint64_t v31 = *(unsigned int *)(v28 + 64);
        }
        else
        {
          uint64_t v30 = *(void *)(v28 + 48);
          uint64_t v31 = *(unsigned int *)(v28 + 64);
          uint64_t v29 = (void *)(v30 + 16 * v31);
        }
        if (v29 == (void *)(v30 + 16 * v31))
        {
          int64_t InterleaveGroupCost = 0;
          uint64_t v35 = 1;
          uint64_t v36 = 1;
          goto LABEL_45;
        }
        uint64_t v42 = (uint64_t *)(*(void *)(a1 + 672) + 48);
        uint64_t v164 = (llvm::Type *)v11;
        uint64_t v172 = 0;
        uint64_t v43 = 0;
        if (sub_1CD3C8538(v42, &v164, &v172)) {
          uint64_t v43 = v172[1];
        }
        if (!sub_1CD8CE880(a1, (uint64_t)v11, (uint64_t)v169))
        {
          uint64_t v36 = *(unsigned int *)(v43 + 16);
          if (llvm::LoopVectorizationCostModel::interleavedAccessCanBeWidened(a1, (uint64_t)v11))
          {
            int64_t InterleaveGroupCost = llvm::LoopVectorizationCostModel::getInterleaveGroupCost(a1, v11, v169);
            uint64_t v35 = v44;
          }
          else
          {
            int64_t InterleaveGroupCost = 0;
            uint64_t v35 = 1;
          }
LABEL_45:
          uint64_t v37 = v169;
          if (sub_1CD30E9EC(a1, (uint64_t)v11, v169))
          {
            unint64_t v38 = llvm::LoopVectorizationCostModel::getGatherScatterCost(a1, (uint64_t)v11, v37);
            uint64_t v172 = (void *)v36;
            LODWORD(v173) = 0;
            uint64_t v164 = (llvm::Type *)v38;
            uint64_t v165 = v39;
            sub_1CB90C9D4((uint64_t)&v164, (uint64_t)&v172);
            BOOL v40 = v164;
            uint64_t v41 = v165;
            uint64_t v37 = v169;
          }
          else
          {
            BOOL v40 = 0;
            uint64_t v41 = 1;
          }
          uint64_t MemInstScalarizationCost = llvm::LoopVectorizationCostModel::getMemInstScalarizationCost(a1, (uint64_t)v11, (unint64_t)v37);
          uint64_t v172 = (void *)v36;
          LODWORD(v173) = 0;
          uint64_t v164 = (llvm::Type *)MemInstScalarizationCost;
          uint64_t v165 = v46;
          sub_1CB90C9D4((uint64_t)&v164, (uint64_t)&v172);
          BOOL v47 = (int)v35 <= (int)v41;
          uint64_t v48 = InterleaveGroupCost;
          if (v35 == v41) {
            BOOL v47 = (uint64_t)v40 >= InterleaveGroupCost;
          }
          if (!v47) {
            goto LABEL_60;
          }
          BOOL v49 = (int)v35 < (int)v165;
          if (v35 == v165) {
            BOOL v49 = InterleaveGroupCost < (uint64_t)v164;
          }
          if (v49)
          {
            int v50 = 3;
            unint64_t v51 = v159;
          }
          else
          {
LABEL_60:
            BOOL v52 = (int)v165 > (int)v41;
            if (v165 == v41) {
              BOOL v52 = (uint64_t)v40 < (uint64_t)v164;
            }
            BOOL v4 = v52;
            unint64_t v51 = v159;
            if (v4)
            {
              int v50 = 4;
              uint64_t v48 = (uint64_t)v40;
              uint64_t v35 = v41;
            }
            else
            {
              int v50 = 5;
              uint64_t v48 = (uint64_t)v164;
              uint64_t v35 = v165;
            }
          }
          unint64_t v159 = v35 | v51 & 0xFFFFFFFF00000000;
          int v53 = (uint64_t *)(*(void *)(a1 + 672) + 48);
          uint64_t v164 = (llvm::Type *)v11;
          uint64_t v172 = 0;
          if ((sub_1CD3C8538(v53, &v164, &v172) & 1) != 0 && (uint64_t v54 = v172[1]) != 0)
          {
            sub_1CD8CE918(a1, v54, (uint64_t)v169, v50, v48, v159);
          }
          else
          {
            uint64_t v164 = (llvm::Type *)v11;
            uint64_t v165 = v169;
            uint64_t v55 = sub_1CD8D6C50(v161, (uint64_t)&v164);
            *(_DWORD *)(v55 + 16) = v50;
            *(void *)(v55 + 24) = v48;
            *(_DWORD *)(v55 + 32) = v35;
          }
          uint64_t v8 = v155;
          continue;
        }
      }
      v7 += 8;
    }
    while (v7 != v8);
  }
  if ((*(uint64_t (**)(void))(***(void ***)(a1 + 616) + 432))(**(void **)(a1 + 616))) {
    return;
  }
  uint64_t v164 = (llvm::Type *)v168;
  uint64_t v165 = (llvm::Type *)v168;
  uint64_t v166 = 8;
  int v167 = 0;
  uint64_t v56 = *(void *)(a1 + 584);
  uint64_t v57 = *(void *)(v56 + 32);
  uint64_t v58 = *(void *)(v56 + 40);
  if (v58 != v57)
  {
LABEL_75:
    uint64_t v59 = *(void *)v57 + 40;
    for (uint64_t j = *(void *)(*(void *)v57 + 48); ; uint64_t j = *(void *)(j + 8))
    {
      if (j == v59)
      {
        v57 += 8;
        if (v57 == v58) {
          break;
        }
        goto LABEL_75;
      }
      if (j) {
        uint64_t v61 = j - 24;
      }
      else {
        uint64_t v61 = 0;
      }
      if (j)
      {
        if (*(unsigned __int8 *)(v61 + 16) - 62 >= 0xFFFFFFFE)
        {
          uint64_t v62 = *(void *)(v61 - 32);
          if (v62)
          {
            if (*(unsigned __int8 *)(v62 + 16) >= 0x1Cu)
            {
              uint64_t v63 = *(void *)(a1 + 584);
              uint64_t v64 = *(void *)(v62 + 40);
              uint64_t v66 = *(void *)(v63 + 56);
              uint64_t v65 = *(void *)(v63 + 64);
              if (v65 == v66)
              {
                uint64_t v67 = *(unsigned int *)(v63 + 76);
                BOOL v68 = (void *)(v65 + 8 * v67);
                if (v67)
                {
                  uint64_t v69 = 0;
                  uint64_t v70 = 8 * v67;
                  while (*(void *)(v65 + v69) != v64)
                  {
                    v69 += 8;
                    if (v70 == v69) {
                      goto LABEL_102;
                    }
                  }
                  BOOL v68 = (void *)(v65 + v69);
                }
LABEL_102:
                uint64_t v66 = *(void *)(v63 + 64);
              }
              else
              {
                uint64_t v71 = *(unsigned int *)(v63 + 72);
                int v72 = v71 - 1;
                unsigned int v73 = (v71 - 1) & ((v64 >> 4) ^ (v64 >> 9));
                BOOL v68 = (void *)(v65 + 8 * v73);
                uint64_t v74 = *v68;
                if (*v68 == -1)
                {
                  uint64_t v75 = 0;
LABEL_109:
                  if (v75) {
                    BOOL v68 = v75;
                  }
                  if (*v68 != v64) {
                    BOOL v68 = (void *)(v65 + 8 * v71);
                  }
                }
                else
                {
                  uint64_t v75 = 0;
                  int v76 = 1;
                  while (v74 != v64)
                  {
                    if (v75) {
                      BOOL v77 = 0;
                    }
                    else {
                      BOOL v77 = v74 == -2;
                    }
                    if (v77) {
                      uint64_t v75 = v68;
                    }
                    unsigned int v78 = v73 + v76++;
                    unsigned int v73 = v78 & v72;
                    BOOL v68 = (void *)(v65 + 8 * (v78 & v72));
                    uint64_t v74 = *v68;
                    if (*v68 == -1) {
                      goto LABEL_109;
                    }
                  }
                }
              }
              uint64_t v79 = v65 == v66 ? 76 : 72;
              if (v68 != (void *)(v65 + 8 * *(unsigned int *)(v63 + v79))
                && sub_1CD8CE880(a1, v61, (uint64_t)v169) != 4)
              {
                uint64_t v80 = v165;
                uint64_t v81 = HIDWORD(v166);
                if (v165 != v164)
                {
                  unsigned int v85 = v166;
                  goto LABEL_125;
                }
                if (!HIDWORD(v166))
                {
LABEL_122:
                  unsigned int v85 = v166;
                  if (HIDWORD(v166) < v166)
                  {
                    ++HIDWORD(v166);
                    *((void *)v165 + v81) = v62;
                    continue;
                  }
LABEL_125:
                  if (3 * v85 <= 4 * (HIDWORD(v166) - v167))
                  {
                    if (v85 >= 0x40) {
                      v85 *= 2;
                    }
                    else {
                      unsigned int v85 = 128;
                    }
                  }
                  else if (v85 - HIDWORD(v166) >= v85 >> 3)
                  {
                    goto LABEL_127;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v164, v85);
                  unsigned int v85 = v166;
                  uint64_t v80 = v165;
LABEL_127:
                  unsigned int v86 = v85 - 1;
                  unsigned int v87 = (v85 - 1) & ((v62 >> 4) ^ (v62 >> 9));
                  BOOL v88 = (void *)((char *)v80 + 8 * v87);
                  uint64_t v89 = *v88;
                  if (*v88 == -1)
                  {
                    BOOL v90 = 0;
LABEL_139:
                    if (v90) {
                      __n128 v94 = v90;
                    }
                    else {
                      __n128 v94 = v88;
                    }
                    if (*v94 != v62)
                    {
                      if (*v94 == -2) {
                        --v167;
                      }
                      else {
                        ++HIDWORD(v166);
                      }
                      *__n128 v94 = v62;
                    }
                  }
                  else
                  {
                    BOOL v90 = 0;
                    int v91 = 1;
                    while (v89 != v62)
                    {
                      if (v90) {
                        BOOL v92 = 0;
                      }
                      else {
                        BOOL v92 = v89 == -2;
                      }
                      if (v92) {
                        BOOL v90 = v88;
                      }
                      unsigned int v93 = v87 + v91++;
                      unsigned int v87 = v93 & v86;
                      BOOL v88 = (void *)((char *)v80 + 8 * (v93 & v86));
                      uint64_t v89 = *v88;
                      if (*v88 == -1) {
                        goto LABEL_139;
                      }
                    }
                  }
                  continue;
                }
                uint64_t v82 = 0;
                uint64_t v83 = 8 * HIDWORD(v166);
                uint64_t v84 = v165;
                while (*(void *)v84 != v62)
                {
                  if (*(void *)v84 == -2) {
                    uint64_t v82 = v84;
                  }
                  uint64_t v84 = (llvm::Type *)((char *)v84 + 8);
                  v83 -= 8;
                  if (!v83)
                  {
                    if (!v82) {
                      goto LABEL_122;
                    }
                    *(void *)uint64_t v82 = v62;
                    --v167;
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v172 = v174;
  uint64_t v173 = 0x400000000;
  sub_1CD76F068((uint64_t)&v172, &v164);
  unsigned int v95 = v173;
  if (!v173) {
    goto LABEL_214;
  }
LABEL_154:
  while (2)
  {
    uint64_t v96 = v172[--v95];
    LODWORD(v173) = v95;
    int v97 = *(_DWORD *)(v96 + 20);
    if ((v97 & 0x40000000) == 0)
    {
      uint64_t v98 = v97 & 0x7FFFFFF;
      uint64_t v99 = (uint64_t *)(v96 - 32 * v98);
      if (!v98) {
        goto LABEL_156;
      }
      goto LABEL_159;
    }
    uint64_t v99 = *(uint64_t **)(v96 - 8);
    uint64_t v98 = v97 & 0x7FFFFFF;
    if (v98)
    {
LABEL_159:
      uint64_t v100 = &v99[4 * v98];
      while (1)
      {
        uint64_t v101 = *v99;
        unsigned int v102 = *(unsigned __int8 *)(*v99 + 16);
        if (*v99 && v102 >= 0x1C && v102 != 83 && *(void *)(v101 + 40) == *(void *)(v96 + 40)) {
          break;
        }
LABEL_204:
        v99 += 4;
        if (v99 == v100)
        {
          unsigned int v95 = v173;
          if (!v173) {
            goto LABEL_214;
          }
          goto LABEL_154;
        }
      }
      uint64_t v105 = v165;
      uint64_t v106 = HIDWORD(v166);
      if (v165 == v164)
      {
        if (HIDWORD(v166))
        {
          int v107 = 0;
          uint64_t v108 = 8 * HIDWORD(v166);
          int v109 = v165;
          while (*(void *)v109 != v101)
          {
            if (*(void *)v109 == -2) {
              int v107 = v109;
            }
            int v109 = (llvm::Type *)((char *)v109 + 8);
            v108 -= 8;
            if (!v108)
            {
              if (!v107) {
                goto LABEL_178;
              }
              *(void *)int v107 = v101;
              --v167;
              goto LABEL_202;
            }
          }
          goto LABEL_204;
        }
LABEL_178:
        unsigned int v110 = v166;
        if (HIDWORD(v166) < v166)
        {
          ++HIDWORD(v166);
          *((void *)v165 + v106) = v101;
LABEL_202:
          if (v173 >= (unint64_t)HIDWORD(v173)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v172[v173] = v101;
          LODWORD(v173) = v173 + 1;
          goto LABEL_204;
        }
      }
      else
      {
        unsigned int v110 = v166;
      }
      if (3 * v110 <= 4 * (HIDWORD(v166) - v167))
      {
        if (v110 >= 0x40) {
          v110 *= 2;
        }
        else {
          unsigned int v110 = 128;
        }
      }
      else if (v110 - HIDWORD(v166) >= v110 >> 3)
      {
LABEL_183:
        unsigned int v111 = v110 - 1;
        unsigned int v112 = (v110 - 1) & ((v101 >> 4) ^ (v101 >> 9));
        uint64_t v113 = (void *)((char *)v105 + 8 * v112);
        uint64_t v114 = *v113;
        if (*v113 != -1)
        {
          uint64_t v115 = 0;
          int v116 = 1;
          while (v114 != v101)
          {
            if (v115) {
              BOOL v117 = 0;
            }
            else {
              BOOL v117 = v114 == -2;
            }
            if (v117) {
              uint64_t v115 = v113;
            }
            unsigned int v118 = v112 + v116++;
            unsigned int v112 = v118 & v111;
            uint64_t v113 = (void *)((char *)v105 + 8 * (v118 & v111));
            uint64_t v114 = *v113;
            if (*v113 == -1) {
              goto LABEL_195;
            }
          }
          goto LABEL_204;
        }
        uint64_t v115 = 0;
LABEL_195:
        if (v115) {
          BOOL v119 = v115;
        }
        else {
          BOOL v119 = v113;
        }
        if (*v119 == v101) {
          goto LABEL_204;
        }
        if (*v119 == -2) {
          --v167;
        }
        else {
          ++HIDWORD(v166);
        }
        *BOOL v119 = v101;
        goto LABEL_202;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v164, v110);
      unsigned int v110 = v166;
      uint64_t v105 = v165;
      goto LABEL_183;
    }
LABEL_156:
    if (v95) {
      continue;
    }
    break;
  }
LABEL_214:
  if (v165 == v164) {
    uint64_t v120 = (uint64_t *)((char *)&v166 + 4);
  }
  else {
    uint64_t v120 = &v166;
  }
  uint64_t v121 = *(unsigned int *)v120;
  if (v121)
  {
    uint64_t v122 = 8 * v121;
    int v123 = (uint64_t *)v165;
    while ((unint64_t)*v123 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v123;
      v122 -= 8;
      if (!v122) {
        goto LABEL_277;
      }
    }
  }
  else
  {
    int v123 = (uint64_t *)v165;
  }
  unsigned int v124 = (unint64_t *)((char *)v165 + 8 * v121);
  if (v123 == (uint64_t *)v124) {
    goto LABEL_277;
  }
  uint64_t v125 = *v123;
LABEL_225:
  if (*(unsigned char *)(v125 + 16) == 60)
  {
    __n128 v126 = v169;
    if (sub_1CD8CE880(a1, v125, (uint64_t)v169) - 1 > 1)
    {
      uint64_t v138 = (uint64_t *)(*(void *)(a1 + 672) + 48);
      uint64_t v170 = v125;
      unint64_t MemoryInstructionCost = 0;
      if (sub_1CD3C8538(v138, &v170, &MemoryInstructionCost))
      {
        uint64_t v139 = *(void *)(MemoryInstructionCost + 8);
        if (v139)
        {
          if (*(_DWORD *)v139)
          {
            unsigned int v140 = 0;
            do
            {
              LODWORD(v170) = v140 + *(_DWORD *)(v139 + 32);
              uint64_t v141 = sub_1CD4D6838((uint64_t *)(v139 + 8), &v170);
              if (v141)
              {
                uint64_t v160 = v141;
                unint64_t MemoryInstructionCost = llvm::LoopVectorizationCostModel::getMemoryInstructionCost(a1, v141, 1uLL);
                uint64_t v163 = v142;
                uint64_t v170 = v126;
                LODWORD(v171) = 0;
                sub_1CB90C9D4((uint64_t)&v170, (uint64_t)&MemoryInstructionCost);
                uint64_t v156 = v170;
                int v158 = (int)v171;
                uint64_t v170 = v160;
                uint64_t v171 = v126;
                uint64_t v143 = sub_1CD8D6C50(a1 + 560, (uint64_t)&v170);
                *(_DWORD *)(v143 + 16) = 5;
                *(void *)(v143 + 24) = v156;
                *(_DWORD *)(v143 + 32) = v158;
              }
              ++v140;
            }
            while (v140 < *(_DWORD *)v139);
          }
        }
      }
    }
    else
    {
      unint64_t MemoryInstructionCost = llvm::LoopVectorizationCostModel::getMemoryInstructionCost(a1, v125, 1uLL);
      uint64_t v163 = v127;
      uint64_t v170 = v126;
      LODWORD(v171) = 0;
      sub_1CB90C9D4((uint64_t)&v170, (uint64_t)&MemoryInstructionCost);
      uint64_t v128 = v170;
      int v129 = (int)v171;
      uint64_t v170 = v125;
      uint64_t v171 = v126;
      uint64_t v130 = sub_1CD8D6C50(a1 + 560, (uint64_t)&v170);
      *(_DWORD *)(v130 + 16) = 5;
      *(void *)(v130 + 24) = v128;
      *(_DWORD *)(v130 + 32) = v129;
    }
    goto LABEL_267;
  }
  uint64_t v131 = sub_1CD8DABD0(a1 + 200, (int *)&v169);
  uint64_t v132 = *((void *)v131 + 2);
  uint64_t v133 = v131[7];
  if (v132 != *((void *)v131 + 1))
  {
    unsigned int v137 = v131[6];
    goto LABEL_247;
  }
  if (!v133)
  {
LABEL_236:
    unsigned int v137 = v131[6];
    if (v133 < v137)
    {
      v131[7] = v133 + 1;
      *(void *)(v132 + 8 * v133) = v125;
      goto LABEL_267;
    }
LABEL_247:
    if (3 * v137 <= 4 * ((int)v133 - v131[8]))
    {
      if (v137 >= 0x40) {
        v137 *= 2;
      }
      else {
        unsigned int v137 = 128;
      }
    }
    else if (v137 - v133 >= v137 >> 3)
    {
      goto LABEL_249;
    }
    uint64_t v154 = v131;
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v131 + 2), v137);
    uint64_t v131 = v154;
    unsigned int v137 = v154[6];
    uint64_t v132 = *((void *)v154 + 2);
LABEL_249:
    unsigned int v144 = v137 - 1;
    unsigned int v145 = (v137 - 1) & ((v125 >> 4) ^ (v125 >> 9));
    uint64_t v146 = (uint64_t *)(v132 + 8 * v145);
    uint64_t v147 = *v146;
    if (*v146 == -1)
    {
      int64_t v148 = 0;
LABEL_261:
      if (v148) {
        uint64_t v146 = v148;
      }
      if (*v146 != v125)
      {
        if (*v146 == -2) {
          --v131[8];
        }
        else {
          ++v131[7];
        }
        *uint64_t v146 = v125;
      }
    }
    else
    {
      int64_t v148 = 0;
      int v149 = 1;
      while (v147 != v125)
      {
        if (v148) {
          BOOL v150 = 0;
        }
        else {
          BOOL v150 = v147 == -2;
        }
        if (v150) {
          int64_t v148 = v146;
        }
        unsigned int v151 = v145 + v149++;
        unsigned int v145 = v151 & v144;
        uint64_t v146 = (uint64_t *)(v132 + 8 * (v151 & v144));
        uint64_t v147 = *v146;
        if (*v146 == -1) {
          goto LABEL_261;
        }
      }
    }
    goto LABEL_267;
  }
  uint64_t v134 = 0;
  uint64_t v135 = 8 * v133;
  uint64_t v136 = (uint64_t *)*((void *)v131 + 2);
  while (*v136 != v125)
  {
    if (*v136 == -2) {
      uint64_t v134 = v136;
    }
    ++v136;
    v135 -= 8;
    if (!v135)
    {
      if (!v134) {
        goto LABEL_236;
      }
      *uint64_t v134 = v125;
      --v131[8];
      break;
    }
  }
LABEL_267:
  unsigned int v152 = (unint64_t *)(v123 + 1);
  while (v152 != v124)
  {
    unint64_t v153 = *v152++;
    uint64_t v125 = v153;
    if (v153 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v123 = (uint64_t *)(v152 - 1);
      goto LABEL_225;
    }
  }
LABEL_277:
  if (v172 != v174) {
    free(v172);
  }
  if (v165 != v164) {
    free(v165);
  }
}

uint64_t sub_1CD30E9EC(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if ((v3 & 0xFE) != 0x3C) {
    return 0;
  }
  uint64_t v5 = (uint64_t ***)a2;
  if (v3 != 60) {
    uint64_t v5 = *(uint64_t ****)(a2 - 64);
  }
  uint64_t v6 = *v5;
  BOOL v8 = ((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000 && a3 != 0;
  if (a3 > 1 || v8)
  {
    if (((unint64_t)a3 & 0xFFFFFFFF00000000) == 0x100000000) {
      llvm::ScalableVectorType::get(v6, a3);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v6, a3);
    }
  }
  uint64_t v9 = ***(void ***)(a1 + 616);
  if (v3 == 60)
  {
    uint64_t v10 = *(uint64_t (**)(void))(v9 + 368);
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(void))(v9 + 360);
  }
  return v10();
}

void llvm::initializeLoopVectorizePass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD005B8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD30EB90;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBD005B8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD30EB90(llvm *a1)
{
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeBasicAAWrapperPassPass(a1, v2);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v4);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v5);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v6);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopAccessLegacyAnalysisPass(a1, v7);
  llvm::initializeDemandedBitsWrapperPassPass(a1, v8);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v9);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v10);
  llvm::initializeInjectTLIMappingsLegacyPass(a1, v11);
  operator new();
}

uint64_t sub_1CD30EC98(uint64_t a1, char a2, char a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBD005B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F264B360;
  if (!byte_1EBD0D7B0) {
    a2 = 1;
  }
  *(unsigned char *)(a1 + 32) = a2;
  if (!byte_1EBD0D870) {
    a3 = 1;
  }
  *(unsigned char *)(a1 + 33) = a3;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBD005B8, memory_order_acquire) != -1)
  {
    v9[0] = sub_1CD30EB90;
    v9[1] = &PassRegistry;
    BOOL v8 = v9;
    std::__call_once(&qword_1EBD005B8, &v8, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL llvm::LoopVectorizationCostModel::isConsecutiveLoadOrStore(llvm::LoopVectorizationLegality **this, llvm::Instruction *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v2 == 60)
  {
    int v3 = (llvm::Value *)*((void *)a2 - 4);
    if (v3) {
      return llvm::LoopVectorizationLegality::isConsecutivePtr(this[76], *(llvm::Type **)a2, v3) != 0;
    }
    return 0;
  }
  uint64_t v4 = 0;
  if (a2 && v2 == 61)
  {
    int v3 = (llvm::Value *)*((void *)a2 - 4);
    if (v3)
    {
      a2 = (llvm::Instruction *)*((void *)a2 - 8);
      return llvm::LoopVectorizationLegality::isConsecutivePtr(this[76], *(llvm::Type **)a2, v3) != 0;
    }
    return 0;
  }
  return v4;
}

void llvm::LoopVectorizationCostModel::collectInLoopReductions(llvm::LoopVectorizationCostModel *this)
{
  void v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 76);
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 112);
  if (v2 != v3)
  {
    uint64_t v5 = (char *)this + 224;
    uint64_t v6 = (uint64_t *)((char *)this + 536);
    do
    {
      uint64_t v7 = *(llvm::PHINode **)v2;
      unint64_t v19 = v7;
      if (*(void *)(v2 + 56) == *(void *)v7)
      {
        if ((uint64_t Opcode = llvm::RecurrenceDescriptor::getOpcode(*(_DWORD *)(v2 + 40)), byte_1EA61E268)
          || (uint64_t v9 = Opcode, !llvm::LoopVectorizeHints::allowReordering(*((llvm::LoopVectorizeHints **)this + 83)))
          && *(unsigned char *)(v2 + 65)
          || (*(unsigned int (**)(void, uint64_t, void, void))(***((void ***)this + 77) + 1136))(**((void **)this + 77), v9, *(void *)v7, 0))
        {
          llvm::RecurrenceDescriptor::getReductionOpChain((llvm::RecurrenceDescriptor *)(v2 + 8), v7, (uint64_t)&__src);
          if (v21)
          {
            uint64_t v10 = sub_1CD8CED34((uint64_t)v5, (uint64_t *)&v19);
            if ((void **)v10 != &__src)
            {
              uint64_t v11 = v10;
              unsigned int v12 = v21;
              uint64_t v13 = *(unsigned int *)(v10 + 8);
              if (v13 >= v21)
              {
                if (v21) {
                  memmove(*(void **)v10, __src, 8 * v21);
                }
              }
              else
              {
                if (*(_DWORD *)(v10 + 12) < v21)
                {
                  *(_DWORD *)(v10 + 8) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v13) {
                  memmove(*(void **)v10, __src, 8 * v13);
                }
                else {
                  uint64_t v13 = 0;
                }
                if (v13 != v21) {
                  memcpy((void *)(*(void *)v11 + 8 * v13), (char *)__src + 8 * v13, 8 * v21 - 8 * v13);
                }
              }
              *(_DWORD *)(v11 + 8) = v12;
            }
            if (v21)
            {
              uint64_t v15 = (uint64_t)v19;
              BOOL v14 = (uint64_t *)__src;
              uint64_t v16 = 8 * v21;
              do
              {
                uint64_t v18 = 0;
                uint64_t v17 = *v14++;
                uint64_t v18 = v17;
                sub_1CD4F8350(v6, &v18)[1] = v15;
                uint64_t v15 = v18;
                v16 -= 8;
              }
              while (v16);
            }
          }
          if (__src != v22) {
            free(__src);
          }
        }
      }
      v2 += 176;
    }
    while (v2 != v3);
  }
}

uint64_t llvm::LoopVectorizationPlanner::plan@<X0>(uint64_t *a1@<X0>, llvm::Type *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::LoopVectorizationCostModel::computeMaxVF(a1[5], (uint64_t)a2);
  uint64_t v9 = result;
  if (result) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v7 == 0;
  }
  if (!v10)
  {
    unint64_t v11 = v7;
    uint64_t v12 = a1[5];
    if (!*(unsigned char *)(v12 + 124)) {
      llvm::LoopAccessInfo::blockNeedsPredication(**(llvm::LoopAccessInfo ***)(*a1 + 32), **(llvm::BasicBlock ***)(v12 + 608), *(llvm::Loop **)(*(void *)(v12 + 608) + 40), v8);
    }
    if (word_1EBD00B08)
    {
      if (byte_1EBD00B80)
      {
LABEL_15:
        if (HIDWORD(a2) == 1) {
          unint64_t v14 = v11;
        }
        else {
          unint64_t v14 = v9;
        }
        if ((HIDWORD(v14) == 1 || HIDWORD(a2) != 1) && (int)a2 - 1 < v14)
        {
          uint64_t v17 = a1[5];
          sub_1CD8CD1A0(v17, (unint64_t)a2);
          llvm::LoopVectorizationCostModel::collectInstsToScalarize(v17, a2);
          llvm::LoopVectorizationCostModel::expectedCost(v17, (unint64_t)a2, 0, (uint64_t)&v33);
          if (!v34)
          {
            llvm::LoopVectorizationCostModel::collectInLoopReductions((llvm::LoopVectorizationCostModel *)a1[5]);
            llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes();
          }
          llvm::reportVectorizationInfo((uint64_t)"UserVF ignored because of invalid costs.", 40, (uint64_t)"InvalidCost", 11, a1[10], *a1);
        }
        uint64_t v27 = &v29;
        uint64_t v28 = 0x1000000000;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v30 = (char *)&v31;
        uint64_t v33 = 1;
        if (v9)
        {
          unsigned int v18 = 1;
          do
          {
            sub_1CD8CF260((uint64_t)&v27, (uint64_t)&v33);
            v18 *= 2;
            LODWORD(v33) = v18;
          }
          while (v18 <= v9);
        }
        uint64_t v33 = 0x100000001;
        if ((v11 & 0xFFFFFFFF00000000) == 0x100000000 && v11)
        {
          unsigned int v19 = 1;
          do
          {
            sub_1CD8CF260((uint64_t)&v27, (uint64_t)&v33);
            v19 *= 2;
            LODWORD(v33) = v19;
          }
          while (v19 <= v11);
        }
        uint64_t v20 = v32;
        if (v32) {
          unsigned int v21 = v30;
        }
        else {
          unsigned int v21 = (char *)v27;
        }
        int v22 = (char *)v27 + 8 * v28;
        while (1)
        {
          if (v20)
          {
            if (v21 == (char *)&v31)
            {
LABEL_59:
              llvm::LoopVectorizationCostModel::collectInLoopReductions((llvm::LoopVectorizationCostModel *)a1[5]);
              llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes();
            }
          }
          else if (v21 == v22)
          {
            goto LABEL_59;
          }
          uint64_t v23 = (uint64_t)(v20 ? v21 + 28 : v21);
          sub_1CD8CD1A0(a1[5], *(void *)v23);
          unsigned int v24 = *(_DWORD *)v23;
          if (*(_DWORD *)(v23 + 4) == 1) {
            break;
          }
          if (v24 >= 2) {
            goto LABEL_50;
          }
LABEL_51:
          if (v20)
          {
            int v25 = (char *)*((void *)v21 + 1);
            int v26 = v21;
            if (v25)
            {
              do
              {
                unsigned int v21 = v25;
                int v25 = *(char **)v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                unsigned int v21 = (char *)*((void *)v26 + 2);
                BOOL v10 = *(void *)v21 == (void)v26;
                int v26 = v21;
              }
              while (!v10);
            }
          }
          else
          {
            v21 += 8;
          }
        }
        if (!v24) {
          goto LABEL_51;
        }
LABEL_50:
        llvm::LoopVectorizationCostModel::collectInstsToScalarize(a1[5], *(llvm::Type **)v23);
        goto LABEL_51;
      }
    }
    else if ((*(uint64_t (**)(void))(**(void **)a1[3] + 576))(*(void *)a1[3]))
    {
      goto LABEL_15;
    }
    if (sub_1CD30F758(*(void *)(a1[5] + 672)))
    {
      uint64_t v13 = (_DWORD *)a1[5];
      sub_1CD8D665C(v13 + 140);
      sub_1CD8D66B4(v13 + 38);
      sub_1CD8D66B4(v13 + 44);
    }
    goto LABEL_15;
  }
  *a3 = 0;
  a3[24] = 0;
  return result;
}

BOOL sub_1CD30F758(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 92);
  int v2 = *(_DWORD *)(a1 + 96);
  if (v1 != v2)
  {
    sub_1CD3C7F68((_DWORD *)(a1 + 48));
    uint64_t v6 = *(char **)(a1 + 72);
    uint64_t v5 = *(char **)(a1 + 80);
    uint64_t v7 = 88;
    if (v5 == v6) {
      uint64_t v7 = 92;
    }
    uint64_t v8 = *(unsigned int *)(a1 + v7);
    uint64_t v9 = *(unint64_t **)(a1 + 80);
    if (v8)
    {
      uint64_t v10 = 0;
      while (*(void *)&v5[v10] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v10 += 8;
        if (8 * v8 == v10) {
          goto LABEL_20;
        }
      }
      uint64_t v9 = (unint64_t *)&v5[v10];
    }
    unint64_t v11 = (unint64_t *)&v5[8 * v8];
    if (v9 != v11)
    {
      unint64_t v12 = *v9;
      if (*v9)
      {
LABEL_13:
        MEMORY[0x1D25D9CD0](*(void *)(v12 + 8), 8);
        MEMORY[0x1D25D9CE0](v12, 0x1020C40BF128421);
      }
LABEL_14:
      uint64_t v13 = v9 + 1;
      while (v13 != v11)
      {
        unint64_t v14 = *v13++;
        unint64_t v12 = v14;
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v9 = v13 - 1;
          if (v12) {
            goto LABEL_13;
          }
          goto LABEL_14;
        }
      }
      uint64_t v6 = *(char **)(a1 + 72);
      uint64_t v5 = *(char **)(a1 + 80);
    }
LABEL_20:
    if (v5 != v6)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 88);
      if (v15 >= 0x21 && 4 * (*(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 96)) < v15)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 72));
        goto LABEL_22;
      }
      memset(v5, 255, 8 * v15);
    }
    *(_DWORD *)(a1 + 92) = 0;
    *(_DWORD *)(a1 + 96) = 0;
LABEL_22:
    *(unsigned char *)(a1 + 40) = 0;
  }
  return v1 != v2;
}

uint64_t llvm::LoopVectorizationPlanner::getBestPlanFor(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 96);
  if (v2)
  {
    int v3 = a2;
    uint64_t v4 = *(void *)(result + 88);
    unint64_t v5 = HIDWORD(a2);
    uint64_t v6 = 8 * v2;
    while (1)
    {
      uint64_t result = sub_1CD8D72A4(*(void *)v4 + 8, v3, v5, &v7);
      if (result) {
        break;
      }
      v4 += 8;
      v6 -= 8;
      if (!v6) {
        return result;
      }
    }
    return *(void *)v4;
  }
  return result;
}

void sub_1CD30F910(llvm::Loop *a1)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  int v1 = v3;
  v3[0] = 0;
  uint64_t v2 = 0x400000001;
  llvm::Loop::getLoopID(a1);
}

uint64_t llvm::LoopVectorizationPlanner::printPlans(uint64_t this, llvm::raw_ostream *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 96);
  if (v2)
  {
    uint64_t v4 = *(llvm::VPlan ***)(this + 88);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4;
      if (byte_1EBD0D930) {
        this = llvm::VPlan::printDOT(v6, a2);
      }
      else {
        this = llvm::VPlan::print((llvm::VPValue **)v6, a2);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void llvm::LoopVectorizationPlanner::collectTriviallyDeadInstructions()
{
}

uint64_t sub_1CD31033C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      int v7 = *(_DWORD *)(result + 20);
      if ((v7 & 0x40000000) != 0) {
        uint64_t v8 = *(void *)(result - 8);
      }
      else {
        uint64_t v8 = result - 32 * (v7 & 0x7FFFFFF);
      }
      uint64_t v9 = *(unsigned int *)(result + 60);
      if (*(void *)(v8 + 32 * v9 + v5) == a2) {
        *(void *)(v8 + 32 * v9 + v5) = a3;
      }
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_1CD31039C(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[5];
  uint64_t v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = &a1[-8 * v3];
      if ((v2 & 0x40000000) != 0) {
        uint64_t v6 = (_DWORD *)*((void *)a1 - 1);
      }
      if (*(void *)&v6[8 * a1[15] + 2 * v5] == a2) {
        break;
      }
      if (v3 == ++v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LODWORD(v5) = -1;
  }
  return llvm::PHINode::removeIncomingValue((llvm::PHINode *)a1, v5, 1);
}

void llvm::LoopVectorizationPlanner::buildVPlan()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t llvm::VPRecipeBuilder::createBlockInMask(uint64_t a1, llvm::LoopAccessInfo *a2, uint64_t **a3)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v31 = a2;
  v32[0] = 0;
  uint64_t v6 = a1 + 72;
  if (sub_1CD40EA84(*(void *)(a1 + 72), *(_DWORD *)(a1 + 88), (uint64_t)a2, v32)) {
    BOOL v8 = v32[0] == *(void *)v6 + 16 * *(unsigned int *)(v6 + 16);
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    return *(void *)(v32[0] + 8);
  }
  if (**(llvm::LoopAccessInfo ***)(*(void *)a1 + 32) == a2)
  {
    uint64_t v11 = *(void *)(a1 + 24);
    if (!*(unsigned char *)(v11 + 124)) {
      llvm::LoopAccessInfo::blockNeedsPredication(a2, **(llvm::BasicBlock ***)(v11 + 608), *(llvm::Loop **)(*(void *)(v11 + 608) + 40), v7);
    }
    uint64_t v12 = **a3;
    if (v12) {
      BOOL v13 = *(unsigned char *)(v12 + 8) == 1;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (*(_DWORD *)(v12 + 80) != 1)
      {
        uint64_t v12 = 0;
        goto LABEL_38;
      }
      uint64_t v12 = **(void **)(v12 + 72);
      BOOL v14 = *(unsigned __int8 *)(v12 + 8) == 1;
    }
    if (v14)
    {
      do
      {
        uint64_t v12 = *(void *)(v12 + 200);
        if (v12) {
          BOOL v20 = *(unsigned char *)(v12 + 8) == 1;
        }
        else {
          BOOL v20 = 0;
        }
      }
      while (v20);
    }
LABEL_38:
    if (*(void *)(v12 + 208) != v12 + 200)
    {
      uint64_t v22 = *(void *)(v12 + 208);
      do
      {
        uint64_t v23 = v22 - 24;
        if (!v22) {
          uint64_t v23 = 0;
        }
        if (*(unsigned __int8 *)(v23 + 8) - 13 > 7) {
          break;
        }
        uint64_t v22 = *(void *)(v22 + 8);
      }
      while (v22 != v12 + 200);
    }
    operator new();
  }
  uint64_t v15 = *((void *)a2 + 1);
  if (v15)
  {
    while (1)
    {
      uint64_t v16 = *(void *)(v15 + 24);
      unsigned int v17 = *(unsigned __int8 *)(v16 + 16);
      BOOL v18 = v16 && v17 >= 0x1C;
      if (v18 && v17 - 29 < 0xB) {
        break;
      }
      uint64_t v15 = *(void *)(v15 + 8);
      if (!v15) {
        goto LABEL_26;
      }
    }
    EdgeMasuint64_t k = llvm::VPRecipeBuilder::createEdgeMask(a1, *(void *)(v16 + 40), (uint64_t)a2, (uint64_t)a3);
    if (!EdgeMask)
    {
LABEL_36:
      uint64_t v9 = 0;
      sub_1CD467E2C(v6, (uint64_t *)&v31)[1] = 0;
      return v9;
    }
    uint64_t v24 = EdgeMask;
    uint64_t v9 = 0;
LABEL_46:
    if (v9)
    {
      uint64_t v25 = *(void *)(a1 + 40);
      uint64_t v30 = 0;
      sub_1CD8D0A1C(v25, v9, v24, &v30);
    }
    uint64_t v9 = v24;
    while (1)
    {
      uint64_t v15 = *(void *)(v15 + 8);
      if (!v15) {
        break;
      }
      uint64_t v26 = *(void *)(v15 + 24);
      unsigned int v27 = *(unsigned __int8 *)(v26 + 16);
      if (v26) {
        BOOL v28 = v27 >= 0x1C;
      }
      else {
        BOOL v28 = 0;
      }
      if (v28 && v27 - 29 <= 0xA)
      {
        uint64_t v24 = llvm::VPRecipeBuilder::createEdgeMask(a1, *(void *)(v26 + 40), (uint64_t)v31, (uint64_t)a3);
        if (v24) {
          goto LABEL_46;
        }
        goto LABEL_36;
      }
    }
  }
  else
  {
LABEL_26:
    uint64_t v9 = 0;
  }
  sub_1CD467E2C(v6, (uint64_t *)&v31)[1] = v9;
  return v9;
}

uint64_t llvm::VPRecipeBuilder::tryToWidenMemory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  v29[0] = &unk_1F264B568;
  v29[1] = a1;
  uint64_t v29[2] = &v28;
  uint64_t v30 = v29;
  int DecisionAndClampRange = llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)v29, (uint64_t)a5);
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
    if (!DecisionAndClampRange) {
      return 0;
    }
LABEL_7:
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = v28;
    uint64_t v14 = *(void *)(v11 + 488);
    uint64_t v13 = *(void *)(v11 + 496);
    if (v13 == v14)
    {
      uint64_t v15 = *(unsigned int *)(v11 + 508);
      uint64_t v16 = (void *)(v13 + 8 * v15);
      if (v15)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * v15;
        while (*(void *)(v13 + v17) != v28)
        {
          v17 += 8;
          if (v18 == v17) {
            goto LABEL_25;
          }
        }
        uint64_t v16 = (void *)(v13 + v17);
      }
LABEL_25:
      uint64_t v14 = *(void *)(v11 + 496);
    }
    else
    {
      uint64_t v19 = *(unsigned int *)(v11 + 504);
      int v20 = v19 - 1;
      unsigned int v21 = (v19 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      uint64_t v16 = (void *)(v13 + 8 * v21);
      uint64_t v22 = *v16;
      if (*v16 == -1)
      {
        uint64_t v23 = 0;
LABEL_32:
        if (v23) {
          uint64_t v16 = v23;
        }
        if (*v16 != v28) {
          uint64_t v16 = (void *)(v13 + 8 * v19);
        }
      }
      else
      {
        uint64_t v23 = 0;
        int v24 = 1;
        while (v22 != v28)
        {
          if (v23) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v22 == -2;
          }
          if (v25) {
            uint64_t v23 = v16;
          }
          unsigned int v26 = v21 + v24++;
          unsigned int v21 = v26 & v20;
          uint64_t v16 = (void *)(v13 + 8 * (v26 & v20));
          uint64_t v22 = *v16;
          if (*v16 == -1) {
            goto LABEL_32;
          }
        }
      }
    }
    BOOL v25 = v13 == v14;
    uint64_t v27 = 504;
    if (v25) {
      uint64_t v27 = 508;
    }
    if (v16 != (void *)(v13 + 8 * *(unsigned int *)(v11 + v27)))
    {
      llvm::VPRecipeBuilder::createBlockInMask(a1, *(llvm::LoopAccessInfo **)(v28 + 40), a6);
      uint64_t v12 = v28;
    }
    sub_1CD8CE880(*(void *)(a1 + 24), v12, *a5);
    operator new();
  }
  if (v30) {
    (*(void (**)(void))(*v30 + 40))();
  }
  if (DecisionAndClampRange) {
    goto LABEL_7;
  }
  return 0;
}

void sub_1CD310D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::vputils *a6, const llvm::SCEV *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a5;
  uint64_t v18 = a2;
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = &unk_1F264B448;
  v13[1] = &v17;
  v13[2] = &v18;
  v13[3] = a8;
  int v20 = v13;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)v19, a9);
  (*(void (**)(void *))(*v13 + 40))(v13);
  v19[0] = &unk_1F264B490;
  v19[1] = &v17;
  v19[2] = &v18;
  int v20 = v19;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)v19, a9);
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v20 + 40))(v20, v14, v15);
  }
  llvm::vputils::getOrCreateVPValueForSCEVExpr(a6, *(llvm::VPlan **)(a4 + 32), a7, v16);
  operator new();
}

void llvm::VPRecipeBuilder::fixHeaderPhis(llvm::VPRecipeBuilder *this)
{
}

void llvm::VPRecipeBuilder::handleReplication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  v12[0] = &unk_1F264B688;
  v12[1] = a1;
  v12[2] = &v11;
  uint64_t v13 = v12;
  char DecisionAndClampRange = llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)v12, a3);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  char v10 = DecisionAndClampRange;
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1F264B6D0;
  v6[1] = a1;
  void v6[2] = &v11;
  v6[3] = &v10;
  uint64_t v13 = v6;
  llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)v12, a3);
  (*(void (**)(void *))(*v6 + 40))(v6);
  if (!v10 && *(_DWORD *)(a3 + 4) == 1 && *(unsigned char *)(v11 + 16) == 84)
  {
    uint64_t v7 = *(void *)(v11 - 32);
    if (v7)
    {
      if (!*(unsigned char *)(v7 + 16) && *(void *)(v7 + 24) == *(void *)(v11 + 72) && (*(unsigned char *)(v7 + 33) & 0x20) != 0)
      {
        int v8 = *(_DWORD *)(v7 + 36);
        if ((v8 - 167) < 2 || v8 == 7) {
          char v10 = 1;
        }
      }
    }
  }
  operator new();
}

uint64_t sub_1CD311488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v5[0] = a2;
  v5[1] = a3;
  v8[0] = &unk_1F264B8A8;
  v8[1] = a1;
  uint64_t v9 = v8;
  uint64_t v7 = v6;
  v6[0] = &unk_1F264B8A8;
  v6[1] = a1;
  sub_1CD31F070(v5, (uint64_t)v6, a4);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

void llvm::VPRecipeBuilder::createReplicateRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  llvm::VPRecipeBuilder::createBlockInMask(a1, *(llvm::LoopAccessInfo **)(a2 + 40), a4);
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
  if (*OpcodeName)
  {
    v7[0] = "pred.";
    v7[2] = OpcodeName;
    __int16 v6 = 771;
  }
  else
  {
    v7[0] = "pred.";
    __int16 v6 = 259;
  }
  __int16 v8 = v6;
  llvm::Twine::str((llvm::Twine *)v7, &__p);
  operator new();
}

uint64_t llvm::VPRecipeBuilder::tryToCreateWidenRecipe(const llvm::Loop **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t **a6)
{
  v44[11] = *MEMORY[0x1E4F143B8];
  int v12 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v12 == 84)
  {
    uint64_t v13 = llvm::VPRecipeBuilder::tryToWidenCall((uint64_t)a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
    return v13 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if ((v12 & 0xFE) == 0x3C)
  {
    uint64_t v13 = llvm::VPRecipeBuilder::tryToWidenMemory((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    return v13 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (a2 && v12 == 83)
  {
    if (*(void *)(a2 + 40) == **((void **)*a1 + 4))
    {
      v44[0] = a2;
      sub_1CD467E2C((uint64_t)(a1 + 12), v44)[1] = 0;
      uint64_t v13 = llvm::VPRecipeBuilder::tryToOptimizeInductionPHI((uint64_t)a1, (llvm::PHINode *)a2, a3, a4, (llvm::vputils *)*a6, (uint64_t)a5);
      if (!v13)
      {
        uint64_t v15 = a1[2];
        uint64_t v43 = 0;
        v44[0] = a2;
        if (sub_1CD3C8538((uint64_t *)v15 + 10, v44, &v43))
        {
          uint64_t v16 = v43;
          uint64_t v17 = *((void *)v15 + 10);
          uint64_t v18 = *((unsigned int *)v15 + 24);
        }
        else
        {
          uint64_t v17 = *((void *)v15 + 10);
          uint64_t v18 = *((unsigned int *)v15 + 24);
          uint64_t v16 = v17 + 16 * v18;
        }
        int v24 = a1[2];
        if (v16 == v17 + 16 * v18)
        {
          uint64_t v26 = *((void *)v24 + 30);
          uint64_t v25 = *((void *)v24 + 31);
          if (v25 == v26)
          {
            uint64_t v27 = *((unsigned int *)v24 + 65);
            uint64_t v28 = (void *)(v25 + 8 * v27);
            if (v27)
            {
              uint64_t v29 = 8 * v27;
              uint64_t v30 = (void *)*((void *)v24 + 31);
              while (*v30 != a2)
              {
                ++v30;
                v29 -= 8;
                if (!v29) {
                  goto LABEL_52;
                }
              }
              uint64_t v28 = v30;
            }
          }
          else
          {
            uint64_t v31 = *((unsigned int *)v24 + 64);
            int v32 = v31 - 1;
            unsigned int v33 = (v31 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            uint64_t v28 = (void *)(v25 + 8 * v33);
            uint64_t v34 = *v28;
            if (*v28 == -1)
            {
              uint64_t v35 = 0;
LABEL_48:
              if (v35) {
                uint64_t v28 = v35;
              }
              if (*v28 != a2) {
                uint64_t v28 = (void *)(v25 + 8 * v31);
              }
            }
            else
            {
              uint64_t v35 = 0;
              int v36 = 1;
              while (v34 != a2)
              {
                if (v35) {
                  BOOL v37 = 0;
                }
                else {
                  BOOL v37 = v34 == -2;
                }
                if (v37) {
                  uint64_t v35 = v28;
                }
                unsigned int v38 = v33 + v36++;
                unsigned int v33 = v38 & v32;
                uint64_t v28 = (void *)(v25 + 8 * (v38 & v32));
                uint64_t v34 = *v28;
                if (*v28 == -1) {
                  goto LABEL_48;
                }
              }
            }
          }
LABEL_52:
          BOOL v37 = v25 == v26;
          uint64_t v39 = 256;
          if (v37) {
            uint64_t v39 = 260;
          }
          if (v28 == (void *)(v25 + 8 * *(unsigned int *)((char *)v24 + v39)))
          {
            sub_1CD8D18D0((uint64_t)v44, (uint64_t)v24 + 128, a2);
            sub_1CD8D066C((uint64_t)*a6, v44[2]);
            operator new();
          }
        }
        uint64_t v43 = 0;
        v44[0] = a2;
        if (sub_1CD3C8538((uint64_t *)v24 + 10, v44, &v43))
        {
          uint64_t v40 = v43;
          uint64_t v41 = *((void *)v24 + 10);
          uint64_t v42 = *((unsigned int *)v24 + 24);
        }
        else
        {
          uint64_t v41 = *((void *)v24 + 10);
          uint64_t v42 = *((unsigned int *)v24 + 24);
          uint64_t v40 = v41 + 16 * v42;
        }
        if (v40 == v41 + 16 * v42) {
          operator new();
        }
        sub_1CD8CD010((uint64_t)a1[2] + 80, a2);
        operator new();
      }
      return v13 & 0xFFFFFFFFFFFFFFFBLL;
    }
    return llvm::VPRecipeBuilder::tryToBlend((uint64_t)a1, a2, a3, a4, (uint64_t)a6);
  }
  else
  {
    if (v12 == 66)
    {
      uint64_t v13 = llvm::VPRecipeBuilder::tryToOptimizeInductionTruncate((uint64_t)a1, a2, (uint64_t)a3, a4, (uint64_t)a5, (llvm::vputils *)*a6);
      if (v13) {
        return v13 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    shouldWideuint64_t n = llvm::VPRecipeBuilder::shouldWiden((uint64_t)a1, a2, (uint64_t)a5);
    if (shouldWiden)
    {
      int v20 = *(unsigned __int8 *)(a2 + 16);
      if (a2 && v20 == 62) {
        operator new();
      }
      if (a2 && v20 == 85)
      {
        uint64_t v21 = (int8x16_t *)a1[4];
        uint64_t v22 = (llvm::ScalarEvolution *)v21[5].i64[1];
        SCEV = (const llvm::SCEV *)llvm::PredicatedScalarEvolution::getSCEV(v21, *(llvm::Value **)(a2 - 96));
        llvm::ScalarEvolution::getLoopDisposition(v22, SCEV, *a1);
        operator new();
      }
      uint64_t v13 = llvm::VPRecipeBuilder::tryToWiden(shouldWiden, a2);
      return v13 & 0xFFFFFFFFFFFFFFFBLL;
    }
    return 0;
  }
}

void llvm::LoopVectorizationPlanner::buildVPlanWithVPRecipes(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v77[70] = *MEMORY[0x1E4F143B8];
  int v53 = &v57;
  uint64_t v54 = &v57;
  uint64_t v55 = 1;
  int v56 = 0;
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v9 = *((void *)a1 + 7);
  uint64_t v61 = *(void *)a1;
  uint64_t v62 = v6;
  uint64_t v63 = v8;
  uint64_t v64 = v7;
  uint64_t v65 = v9;
  uint64_t v66 = a1 + 136;
  uint64_t v68 = 0;
  uint64_t v67 = 0;
  int v69 = 0;
  uint64_t v71 = 0;
  uint64_t v70 = 0;
  int v72 = 0;
  int v74 = 0;
  v73[0] = 0;
  v73[1] = 0;
  uint64_t v75 = v77;
  uint64_t v76 = 0x400000000;
  uint64_t v10 = *(void ***)(a4 + 24);
  uint64_t v11 = *(void ***)(a4 + 32);
  if (v10 != v11)
  {
    do
    {
      __p[0] = *v10;
      sub_1CD467E2C((uint64_t)v73, (uint64_t *)__p)[1] = 0;
      __p[0] = v10[1];
      sub_1CD467E2C((uint64_t)v73, (uint64_t *)__p)[1] = 0;
      v10 += 2;
    }
    while (v10 != v11);
    uint64_t v7 = *((void *)a1 + 5);
  }
  unsigned int v12 = *(_DWORD *)(v7 + 304);
  if (v12)
  {
    uint64_t v13 = *(void *)(v7 + 296);
    uint64_t v14 = v13 + 56 * v12;
    do
    {
      uint64_t v15 = *(void **)v13;
      unsigned int v16 = *(_DWORD *)(sub_1CD8CD010(*((void *)a1 + 4) + 80, *(void *)v13) + 40);
      __p[0] = v15;
      sub_1CD467E2C((uint64_t)v73, (uint64_t *)__p)[1] = 0;
      uint64_t v17 = *(unsigned int *)(v13 + 16);
      if (v17)
      {
        uint64_t v18 = *(void *)(v13 + 8);
        uint64_t v19 = 8 * v17;
        do
        {
          __p[0] = *(void **)v18;
          sub_1CD467E2C((uint64_t)v73, (uint64_t *)__p)[1] = 0;
          if (v16 <= 0xD && ((1 << v16) & 0x33C0) != 0)
          {
            int v20 = *(void **)v18;
            int v21 = *(_DWORD *)(*(void *)v18 + 20);
            if ((v21 & 0x40000000) != 0) {
              uint64_t v22 = (void **)*(v20 - 1);
            }
            else {
              uint64_t v22 = (void **)&v20[-4 * (v21 & 0x7FFFFFF)];
            }
            __p[0] = *v22;
            sub_1CD467E2C((uint64_t)v73, (uint64_t *)__p)[1] = 0;
          }
          v18 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v13 += 56;
    }
    while (v13 != v14);
  }
  BOOL v52 = a1;
  uint64_t v23 = *((void *)a1 + 6);
  int v24 = *(unint64_t **)(v23 + 80);
  uint64_t v25 = 88;
  if (v24 == *(unint64_t **)(v23 + 72)) {
    uint64_t v25 = 92;
  }
  uint64_t v26 = *(unsigned int *)(v23 + v25);
  uint64_t v51 = a2;
  if (v26)
  {
    uint64_t v27 = 8 * v26;
    uint64_t v28 = v24;
    while (*v28 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v28;
      v27 -= 8;
      if (!v27) {
        goto LABEL_78;
      }
    }
  }
  else
  {
    uint64_t v28 = v24;
  }
  uint64_t v29 = &v24[v26];
  if (v28 == v29) {
LABEL_78:
  }
    operator new();
  uint64_t v30 = (uint64_t *)*v28;
  while (1)
  {
    __p[0] = &unk_1F264B718;
    __p[1] = v30;
    uint64_t v59 = v52;
    int v60 = __p;
    int DecisionAndClampRange = llvm::LoopVectorizationPlanner::getDecisionAndClampRange((uint64_t)__p, a2);
    if (v60 == __p)
    {
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else if (v60)
    {
      (*((void (**)(void))*v60 + 5))();
    }
    if (!DecisionAndClampRange) {
      goto LABEL_68;
    }
    int v32 = v54;
    uint64_t v33 = HIDWORD(v55);
    if (v54 != v53) {
      break;
    }
    if (!HIDWORD(v55)) {
      goto LABEL_39;
    }
    uint64_t v34 = 0;
    uint64_t v35 = 8 * HIDWORD(v55);
    int v36 = (uint64_t **)v54;
    do
    {
      if (*v36 == v30) {
        goto LABEL_63;
      }
      if (*v36 == (uint64_t *)-2) {
        uint64_t v34 = v36;
      }
      ++v36;
      v35 -= 8;
    }
    while (v35);
    if (v34)
    {
      *uint64_t v34 = v30;
      --v56;
    }
    else
    {
LABEL_39:
      unsigned int v37 = v55;
      if (HIDWORD(v55) >= v55) {
        goto LABEL_42;
      }
      ++HIDWORD(v55);
      v54[v33] = (uint64_t)v30;
    }
LABEL_63:
    if (*(_DWORD *)v30)
    {
      unsigned int v47 = 0;
      do
      {
        LODWORD(__p[0]) = v47 + *((_DWORD *)v30 + 8);
        uint64_t v48 = (void *)sub_1CD4D6838(v30 + 1, __p);
        if (v48)
        {
          __p[0] = v48;
          sub_1CD467E2C((uint64_t)v73, (uint64_t *)__p)[1] = 0;
        }
        ++v47;
      }
      while (v47 < *(_DWORD *)v30);
    }
LABEL_68:
    BOOL v49 = v28 + 1;
    a2 = v51;
    do
    {
      if (v49 == v29) {
        goto LABEL_78;
      }
      unint64_t v50 = *v49++;
      uint64_t v30 = (uint64_t *)v50;
    }
    while (v50 > 0xFFFFFFFFFFFFFFFDLL);
    uint64_t v28 = v49 - 1;
  }
  unsigned int v37 = v55;
LABEL_42:
  if (3 * v37 <= 4 * (HIDWORD(v55) - v56))
  {
    if (v37 >= 0x40) {
      v37 *= 2;
    }
    else {
      unsigned int v37 = 128;
    }
  }
  else if (v37 - HIDWORD(v55) >= v37 >> 3)
  {
    goto LABEL_44;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v53, v37);
  unsigned int v37 = v55;
  int v32 = v54;
LABEL_44:
  unsigned int v38 = v37 - 1;
  unsigned int v39 = (v37 - 1) & ((v30 >> 4) ^ (v30 >> 9));
  uint64_t v40 = (uint64_t **)&v32[v39];
  uint64_t v41 = *v40;
  if (*v40 == (uint64_t *)-1)
  {
    uint64_t v42 = 0;
LABEL_56:
    if (v42) {
      unsigned int v46 = v42;
    }
    else {
      unsigned int v46 = v40;
    }
    if (*v46 != v30)
    {
      if (*v46 == (uint64_t *)-2) {
        --v56;
      }
      else {
        ++HIDWORD(v55);
      }
      *unsigned int v46 = v30;
    }
  }
  else
  {
    uint64_t v42 = 0;
    int v43 = 1;
    while (v41 != v30)
    {
      if (v42) {
        BOOL v44 = 0;
      }
      else {
        BOOL v44 = v41 == (uint64_t *)-2;
      }
      if (v44) {
        uint64_t v42 = v40;
      }
      unsigned int v45 = v39 + v43++;
      unsigned int v39 = v45 & v38;
      uint64_t v40 = (uint64_t **)&v32[v45 & v38];
      uint64_t v41 = *v40;
      if (*v40 == (uint64_t *)-1) {
        goto LABEL_56;
      }
    }
  }
  goto LABEL_63;
}

void sub_1CD314B70(uint64_t a1, llvm::ConstantInt *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = llvm::ConstantInt::get(this, 0, 0);
  sub_1CD8D066C(a1, (uint64_t)v3);
  operator new();
}

uint64_t llvm::LoopVectorizationPlanner::adjustRecipesForReductions(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = a4;
  v43[3] = *MEMORY[0x1E4F143B8];
  uint64_t v41 = (void *)result;
  uint64_t v6 = *(void *)(result + 40);
  unsigned int v7 = *(_DWORD *)(v6 + 304);
  if (v7)
  {
    uint64_t v35 = a2;
    uint64_t v8 = *(void *)(v6 + 296);
    uint64_t v37 = v8 + 56 * v7;
    BOOL v10 = HIDWORD(a5) != 1 && a5 == 1;
    BOOL v36 = v10;
    uint64_t v39 = a4 + 96;
    do
    {
      uint64_t v11 = *(void *)v8;
      uint64_t result = sub_1CD8CD010(v41[4] + 80, *(void *)v8);
      uint64_t v40 = result;
      if (!v36
        || (uint64_t result = llvm::LoopVectorizeHints::allowReordering(*(llvm::LoopVectorizeHints **)(v41[5] + 664)),
            (result & 1) == 0)
        && *(unsigned char *)(v40 + 65))
      {
        if (*(_DWORD *)(v8 + 16))
        {
          uint64_t v12 = v11;
          uint64_t v13 = **(void **)(v8 + 8);
          v43[0] = v13;
          sub_1CD467E2C(v39, v43);
          int v14 = *(_DWORD *)(v40 + 40);
          uint64_t v15 = *a3;
          v43[0] = v12;
          sub_1CD4F8350(v15 + 23, v43);
          uint64_t v17 = (v14 - 6) < 4 || (v14 & 0xFFFFFFFE) == 12;
          int v18 = *(_DWORD *)(v13 + 20);
          if ((v18 & 0x40000000) != 0) {
            uint64_t v19 = *(void *)(v13 - 8);
          }
          else {
            uint64_t v19 = v13 - 32 * (v18 & 0x7FFFFFF);
          }
          if (*(void *)(v19 + 32 * v17) == v12) {
            ++v17;
          }
          int v20 = *a3;
          v43[0] = *(void *)(v19 + 32 * v17);
          sub_1CD4F8350(v20 + 23, v43);
          uint64_t v22 = v41[5];
          if (!*(unsigned char *)(v22 + 124)) {
            llvm::LoopAccessInfo::blockNeedsPredication(*(llvm::LoopAccessInfo **)(v13 + 40), **(llvm::BasicBlock ***)(v22 + 608), *(llvm::Loop **)(*(void *)(v22 + 608) + 40), v21);
          }
          llvm::VPRecipeBuilder::createBlockInMask(a4, *(llvm::LoopAccessInfo **)(v13 + 40), a3);
          if (v14 == 14) {
            operator new();
          }
          operator new();
        }
      }
      v8 += 56;
    }
    while (v8 != v37);
    uint64_t v6 = v41[5];
    uint64_t v5 = a4;
    a2 = v35;
  }
  if (!*(unsigned char *)(v6 + 124)) {
    return result;
  }
  v41[17] = a2;
  v41[18] = *(void *)(a2 + 208);
  uint64_t v23 = **a3;
  if (v23) {
    BOOL v24 = *(unsigned char *)(v23 + 8) == 1;
  }
  else {
    BOOL v24 = 0;
  }
  if (!v24)
  {
    if (*(_DWORD *)(v23 + 80) != 1)
    {
      uint64_t v23 = 0;
      goto LABEL_45;
    }
    uint64_t v23 = **(void **)(v23 + 72);
    if (*(unsigned char *)(v23 + 8) != 1) {
      goto LABEL_45;
    }
  }
  do
  {
    uint64_t v23 = *(void *)(v23 + 200);
    if (v23) {
      BOOL v25 = *(unsigned char *)(v23 + 8) == 1;
    }
    else {
      BOOL v25 = 0;
    }
  }
  while (v25);
LABEL_45:
  uint64_t v26 = v23 + 200;
  uint64_t v27 = *(void *)(v23 + 208);
  if (v27 != v23 + 200)
  {
    uint64_t v28 = *(void *)(v23 + 208);
    while (1)
    {
      uint64_t v29 = v28 - 24;
      if (!v28) {
        uint64_t v29 = 0;
      }
      if (*(unsigned __int8 *)(v29 + 8) - 13 > 7) {
        break;
      }
      uint64_t v28 = *(void *)(v28 + 8);
      if (v28 == v26)
      {
        uint64_t v28 = v26;
        break;
      }
    }
    while (v27 != v28)
    {
      uint64_t v30 = v27 - 24;
      if (!v27) {
        uint64_t v30 = 0;
      }
      int v31 = *(unsigned __int8 *)(v30 + 8);
      if (v31 == 20) {
        uint64_t v32 = v30;
      }
      else {
        uint64_t v32 = 0;
      }
      if (v27 && v31 == 20 && !*(unsigned char *)(v32 + 160))
      {
        BlockInMasuint64_t k = llvm::VPRecipeBuilder::createBlockInMask(v5, **(llvm::LoopAccessInfo ***)(*v41 + 32), a3);
        uint64_t v34 = *(void *)(*(void *)(v32 + 48) + 8);
        v43[0] = BlockInMask;
        v43[1] = v34;
        v43[2] = v32 + 96;
        sub_1CD8D0908((uint64_t)(v41 + 17), 57, (uint64_t)v43, 3, 0);
      }
      uint64_t v27 = *(void *)(v27 + 8);
    }
  }
  return result;
}

void llvm::VPWidenSelectRecipe::execute(llvm::VPWidenSelectRecipe *this, unsigned __int8 **a2)
{
  uint64_t v4 = *((void *)this + 2);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0) {
    unint64_t v5 = **(void **)v5;
  }
  uint64_t v6 = *(llvm::Instruction **)(v5 + 40);
  llvm::InnerLoopVectorizer::setDebugLocFromInst(a2[39], (uint64_t)v6, 0, 0);
  unsigned int v7 = 0;
  if (*((unsigned char *)this + 152))
  {
    uint64_t v15 = **((void **)this + 6);
    uint64_t v16 = 0;
    char v17 = 0;
    unsigned int v7 = llvm::VPTransformState::get((uint64_t)a2, v15, (unsigned int *)&v16);
  }
  if (*((_DWORD *)a2 + 2))
  {
    unsigned int v8 = 0;
    do
    {
      uint64_t v9 = v7;
      if (!v7) {
        uint64_t v9 = llvm::VPTransformState::get((llvm::VPTransformState *)a2, **((llvm::VPValue ***)this + 6), v8);
      }
      BOOL v10 = llvm::VPTransformState::get((llvm::VPTransformState *)a2, *(llvm::VPValue **)(*((void *)this + 6) + 8), v8);
      uint64_t v11 = llvm::VPTransformState::get((llvm::VPTransformState *)a2, *(llvm::VPValue **)(*((void *)this + 6) + 16), v8);
      uint64_t v12 = (llvm::IRBuilderBase *)a2[34];
      __int16 v18 = 257;
      Select = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect(v12, v9, v10, v11, (const llvm::Twine *)&v16, 0);
      sub_1CD8C9514((uint64_t)a2, (char *)this + 96, (uint64_t)Select, v8);
      if (Select) {
        BOOL v14 = Select[16] >= 0x1Cu;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14) {
        llvm::InnerLoopVectorizer::addMetadata((llvm::InnerLoopVectorizer *)a2[39], (llvm::Instruction *)Select, v6);
      }
      ++v8;
    }
    while (v8 < *((_DWORD *)a2 + 2));
  }
}

void llvm::VPWidenRecipe::execute(llvm::VPWidenRecipe *this, llvm::VPTransformState *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 17);
  uint64_t v4 = *((void *)a2 + 34);
  int v5 = *(unsigned __int8 *)(v3 + 16);
  if (((1 << (v5 - 40)) & 0x7FFFF) != 0)
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(*((unsigned __int8 **)a2 + 39), v3, 0, 0);
    if (*((_DWORD *)a2 + 2))
    {
      unsigned int v8 = 0;
      do
      {
        uint64_t v65 = v67;
        uint64_t v66 = 0x200000000;
        uint64_t v9 = *((unsigned int *)this + 14);
        if (v9)
        {
          uint64_t v11 = (llvm::VPValue **)*((void *)this + 6);
          uint64_t v12 = 8 * v9;
          do
          {
            uint64_t v13 = llvm::VPTransformState::get(a2, *v11, v8);
            if (v66 >= (unint64_t)HIDWORD(v66)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v65 + v66) = v13;
            LODWORD(v9) = v66 + 1;
            LODWORD(v66) = v66 + 1;
            ++v11;
            v12 -= 8;
          }
          while (v12);
          BOOL v10 = (uint64_t *)v65;
        }
        else
        {
          BOOL v10 = (uint64_t *)v67;
        }
        uint64_t v14 = *(unsigned __int8 *)(v3 + 16) - 28;
        __int16 v64 = 257;
        NAryOp = llvm::IRBuilderBase::CreateNAryOp(v4, v14, v10, v9, (uint64_t)v63, 0);
        uint64_t v16 = (unsigned __int8 *)NAryOp;
        if (NAryOp) {
          BOOL v17 = *((unsigned __int8 *)NAryOp + 16) >= 0x1Cu;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17)
        {
          llvm::Instruction::copyIRFlags((uint64_t)NAryOp, v3, 1);
          uint64_t v19 = *((void *)a2 + 41);
          uint64_t v18 = *((void *)a2 + 42);
          if (v18 == v19)
          {
            uint64_t v20 = *((unsigned int *)a2 + 87);
            int v21 = (llvm::VPWidenRecipe **)(v18 + 8 * v20);
            if (v20)
            {
              uint64_t v22 = 0;
              while (*(llvm::VPWidenRecipe **)(v18 + v22) != this)
              {
                v22 += 8;
                if (8 * v20 == v22) {
                  goto LABEL_35;
                }
              }
              int v21 = (llvm::VPWidenRecipe **)(v18 + v22);
            }
LABEL_35:
            uint64_t v19 = *((void *)a2 + 42);
          }
          else
          {
            uint64_t v23 = *((unsigned int *)a2 + 86);
            int v24 = v23 - 1;
            unsigned int v25 = (v23 - 1) & ((this >> 4) ^ (this >> 9));
            int v21 = (llvm::VPWidenRecipe **)(v18 + 8 * v25);
            uint64_t v26 = *v21;
            if (*v21 == (llvm::VPWidenRecipe *)-1)
            {
              uint64_t v27 = 0;
LABEL_49:
              if (v27) {
                int v21 = v27;
              }
              LODWORD(v20) = *((_DWORD *)a2 + 87);
              uint64_t v32 = (llvm::VPWidenRecipe **)(v18 + 8 * v23);
              if (*v21 != this) {
                int v21 = v32;
              }
            }
            else
            {
              uint64_t v27 = 0;
              int v28 = 1;
              while (v26 != this)
              {
                if (v27) {
                  BOOL v29 = 0;
                }
                else {
                  BOOL v29 = v26 == (llvm::VPWidenRecipe *)-2;
                }
                if (v29) {
                  uint64_t v27 = v21;
                }
                unsigned int v30 = v25 + v28++;
                unsigned int v25 = v30 & v24;
                int v21 = (llvm::VPWidenRecipe **)(v18 + 8 * (v30 & v24));
                uint64_t v26 = *v21;
                if (*v21 == (llvm::VPWidenRecipe *)-1) {
                  goto LABEL_49;
                }
              }
              LODWORD(v20) = *((_DWORD *)a2 + 87);
            }
          }
          if (v18 == v19) {
            unsigned int v31 = v20;
          }
          else {
            unsigned int v31 = *((_DWORD *)a2 + 86);
          }
          if (v21 != (llvm::VPWidenRecipe **)(v18 + 8 * v31)) {
            llvm::Instruction::dropPoisonGeneratingFlags((llvm::Instruction *)v16);
          }
        }
        sub_1CD8C9514((uint64_t)a2, v2, (uint64_t)v16, v8);
        if (v16 && v16[16] >= 0x1Cu) {
          llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (llvm::Instruction *)v16, (llvm::Instruction *)v3);
        }
        if (v65 != v67) {
          free(v65);
        }
        ++v8;
      }
      while (v8 < *((_DWORD *)a2 + 2));
    }
  }
  else if (((1 << (v5 - 40)) & 0x3FFC000000) != 0)
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(*((unsigned __int8 **)a2 + 39), v3, 0, 0);
    uint64_t v33 = *(void *)v3;
    if (*((_DWORD *)a2 + 1) == 1 || *(_DWORD *)a2 != 1)
    {
      uint64_t v35 = *(llvm::Type **)a2;
      BOOL v36 = *(uint64_t ***)v3;
      if (HIDWORD(*(void *)a2) == 1) {
        llvm::ScalableVectorType::get(v36, v35);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v36, v35);
      }
      uint64_t v33 = v37;
    }
    if (*((_DWORD *)a2 + 2))
    {
      unsigned int v38 = 0;
      do
      {
        uint64_t v39 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), v38);
        uint64_t v40 = (unsigned __int8 *)v39;
        int v41 = *(unsigned __int8 *)(v3 + 16);
        v67[8] = 257;
        if (*(void *)v39 != v33)
        {
          uint64_t v42 = (v41 - 28);
          if (*((unsigned __int8 *)v39 + 16) <= 0x14u)
          {
            uint64_t v40 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(v4 + 72) + 224))(*(void *)(v4 + 72), v42, v39, v33);
            if (v40) {
              BOOL v45 = v40[16] >= 0x1Cu;
            }
            else {
              BOOL v45 = 0;
            }
            if (v45)
            {
              (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(v4 + 80) + 16))(*(void *)(v4 + 80), v40, &v65, *(void *)(v4 + 48), *(void *)(v4 + 56));
              uint64_t v47 = *(unsigned int *)(v4 + 8);
              if (v47)
              {
                uint64_t v48 = *(void *)v4;
                uint64_t v61 = *(void *)v4 + 16 * v47;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v40, *(_DWORD *)v48, *(llvm::MDNode **)(v48 + 8));
                  v48 += 16;
                }
                while (v48 != v61);
              }
            }
          }
          else
          {
            __int16 v64 = 257;
            uint64_t v40 = (unsigned __int8 *)llvm::CastInst::Create(v42, (uint64_t)v39, v33, v63, 0);
            (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(v4 + 80) + 16))(*(void *)(v4 + 80), v40, &v65, *(void *)(v4 + 48), *(void *)(v4 + 56));
            uint64_t v43 = *(unsigned int *)(v4 + 8);
            if (v43)
            {
              uint64_t v44 = *(void *)v4;
              uint64_t v60 = *(void *)v4 + 16 * v43;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v40, *(_DWORD *)v44, *(llvm::MDNode **)(v44 + 8));
                v44 += 16;
              }
              while (v44 != v60);
            }
          }
        }
        sub_1CD8C9514((uint64_t)a2, v2, (uint64_t)v40, v38);
        if (v40) {
          BOOL v46 = v40[16] >= 0x1Cu;
        }
        else {
          BOOL v46 = 0;
        }
        if (v46) {
          llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (llvm::Instruction *)v40, (llvm::Instruction *)v3);
        }
        ++v38;
      }
      while (v38 < *((_DWORD *)a2 + 2));
    }
  }
  else
  {
    llvm::InnerLoopVectorizer::setDebugLocFromInst(*((unsigned __int8 **)a2 + 39), v3, 0, 0);
    if (*((_DWORD *)a2 + 2))
    {
      unsigned int v49 = 0;
      do
      {
        unint64_t v50 = llvm::VPTransformState::get(a2, **((llvm::VPValue ***)this + 6), v49);
        uint64_t v51 = llvm::VPTransformState::get(a2, *(llvm::VPValue **)(*((void *)this + 6) + 8), v49);
        if (v5 == 82)
        {
          int v52 = *(_DWORD *)(v4 + 96);
          uint64_t v53 = *(void *)(v4 + 88);
          char v59 = *(unsigned char *)(v4 + 102);
          __int16 v62 = *(_WORD *)(v4 + 100);
          int v54 = *(unsigned __int8 *)(v3 + 17) >> 1;
          if (v54 == 127) {
            int v54 = -1;
          }
          *(_DWORD *)(v4 + 96) = v54;
          uint64_t v55 = *(_WORD *)(v3 + 18) & 0x3F;
          __int16 v64 = 257;
          FCmpHelper = (unsigned __int8 *)llvm::IRBuilderBase::CreateFCmpHelper(v4, v55, (uint64_t)v50, (uint64_t)v51, (uint64_t)v63, 0, 0);
          *(_DWORD *)(v4 + 96) = v52;
          *(void *)(v4 + 88) = v53;
          *(_WORD *)(v4 + 100) = v62;
          *(unsigned char *)(v4 + 102) = v59;
        }
        else
        {
          __int16 v57 = *(_WORD *)(v3 + 18) & 0x3F;
          __int16 v64 = 257;
          FCmpHelper = (unsigned __int8 *)sub_1CB845F20(v4, v57, v50, (uint64_t)v51, (uint64_t)v63);
        }
        sub_1CD8C9514((uint64_t)a2, v2, (uint64_t)FCmpHelper, v49);
        if (FCmpHelper) {
          BOOL v58 = FCmpHelper[16] >= 0x1Cu;
        }
        else {
          BOOL v58 = 0;
        }
        if (v58) {
          llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (llvm::Instruction *)FCmpHelper, (llvm::Instruction *)v3);
        }
        ++v49;
      }
      while (v49 < *((_DWORD *)a2 + 2));
    }
  }
}

void llvm::VPWidenGEPRecipe::execute(llvm::VPWidenGEPRecipe *this, llvm::VPTransformState *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 2);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0) {
    unint64_t v5 = **(void **)v5;
  }
  uint64_t v6 = *(llvm::Instruction **)(v5 + 40);
  if (*(_DWORD *)a2) {
    BOOL v7 = *((_DWORD *)a2 + 1) == 1;
  }
  else {
    BOOL v7 = 0;
  }
  BOOL v8 = v7 || *(_DWORD *)a2 >= 2u;
  uint64_t v61 = *(llvm::Instruction **)(v5 + 40);
  if (!v8 || !*((unsigned char *)this + 152)) {
    goto LABEL_35;
  }
  unint64_t v9 = *((void *)this + 20);
  if ((v9 & 1) == 0)
  {
    unint64_t v21 = *(unsigned int *)(v9 + 64);
    unint64_t v22 = v21 >> 6;
    if (v21 < 0x40)
    {
LABEL_33:
      int v26 = *(_DWORD *)(v9 + 64) & 0x3F;
      if (!v26 || *(void *)(*(void *)v9 + 8 * v22) == ~(-1 << v26)) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v23 = *(uint64_t **)v9;
      if (v22 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v22;
      }
      while (1)
      {
        uint64_t v25 = *v23++;
        if (v25 != -1) {
          break;
        }
        if (!--v24) {
          goto LABEL_33;
        }
      }
    }
    goto LABEL_35;
  }
  if ((~(-1 << (v9 >> 58)) & ~(v9 >> 1)) != 0)
  {
LABEL_35:
    if (!*((_DWORD *)a2 + 2)) {
      return;
    }
    unsigned int v27 = 0;
    while (1)
    {
      int v28 = (llvm::VPValue *)**((void **)this + 6);
      if (*((unsigned char *)this + 152))
      {
        LOBYTE(v68) = 0;
        uint64_t v67 = 0;
        BOOL v29 = llvm::VPTransformState::get((uint64_t)a2, (uint64_t)v28, (unsigned int *)&v67);
      }
      else
      {
        BOOL v29 = llvm::VPTransformState::get(a2, v28, v27);
      }
      unsigned int v30 = (uint64_t *)v29;
      uint64_t v67 = v69;
      uint64_t v68 = 0x400000000;
      uint64_t v31 = *((unsigned int *)this + 14);
      if (v31 < 2)
      {
        unsigned int v38 = 0;
      }
      else
      {
        for (uint64_t i = 1; i != v31; ++i)
        {
          unsigned int v33 = i - 1;
          unint64_t v34 = *((void *)this + 20);
          if (v34) {
            uint64_t v35 = (1 << v33) & (v34 >> 1) & ~(-1 << (v34 >> 58));
          }
          else {
            uint64_t v35 = *(void *)(*(void *)v34 + 8 * (v33 >> 6)) & (1 << v33);
          }
          BOOL v36 = *(llvm::VPValue **)(*((void *)this + 6) + 8 * i);
          if (v35)
          {
            char v65 = 0;
            uint64_t v64 = 0;
            uint64_t v37 = llvm::VPTransformState::get((uint64_t)a2, (uint64_t)v36, (unsigned int *)&v64);
          }
          else
          {
            uint64_t v37 = llvm::VPTransformState::get(a2, v36, v27);
          }
          if (v68 >= (unint64_t)HIDWORD(v68)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v67 + v68) = v37;
          unsigned int v38 = v68 + 1;
          LODWORD(v68) = v68 + 1;
        }
      }
      if ((*((unsigned char *)v61 + 17) & 2) != 0)
      {
        uint64_t v41 = *((void *)a2 + 41);
        uint64_t v40 = *((void *)a2 + 42);
        if (v40 == v41)
        {
          uint64_t v42 = *((unsigned int *)a2 + 87);
          uint64_t v43 = (llvm::VPWidenGEPRecipe **)(v40 + 8 * v42);
          if (v42)
          {
            uint64_t v44 = 0;
            while (*(llvm::VPWidenGEPRecipe **)(v40 + v44) != this)
            {
              v44 += 8;
              if (8 * v42 == v44) {
                goto LABEL_74;
              }
            }
            uint64_t v43 = (llvm::VPWidenGEPRecipe **)(v40 + v44);
          }
LABEL_74:
          uint64_t v41 = *((void *)a2 + 42);
        }
        else
        {
          uint64_t v45 = *((unsigned int *)a2 + 86);
          int v46 = v45 - 1;
          unsigned int v47 = (v45 - 1) & ((this >> 4) ^ (this >> 9));
          uint64_t v43 = (llvm::VPWidenGEPRecipe **)(v40 + 8 * v47);
          uint64_t v48 = *v43;
          if (*v43 == (llvm::VPWidenGEPRecipe *)-1)
          {
            unsigned int v49 = 0;
LABEL_89:
            if (v49) {
              uint64_t v43 = v49;
            }
            LODWORD(v42) = *((_DWORD *)a2 + 87);
            uint64_t v60 = (llvm::VPWidenGEPRecipe **)(v40 + 8 * v45);
            if (*v43 != this) {
              uint64_t v43 = v60;
            }
          }
          else
          {
            unsigned int v49 = 0;
            int v50 = 1;
            while (v48 != this)
            {
              if (v49) {
                BOOL v51 = 0;
              }
              else {
                BOOL v51 = v48 == (llvm::VPWidenGEPRecipe *)-2;
              }
              if (v51) {
                unsigned int v49 = v43;
              }
              unsigned int v52 = v47 + v50++;
              unsigned int v47 = v52 & v46;
              uint64_t v43 = (llvm::VPWidenGEPRecipe **)(v40 + 8 * (v52 & v46));
              uint64_t v48 = *v43;
              if (*v43 == (llvm::VPWidenGEPRecipe *)-1) {
                goto LABEL_89;
              }
            }
            LODWORD(v42) = *((_DWORD *)a2 + 87);
          }
        }
        if (v40 == v41) {
          unsigned int v53 = v42;
        }
        else {
          unsigned int v53 = *((_DWORD *)a2 + 86);
        }
        uint64_t v39 = (uint64_t *)v67;
        if (v43 == (llvm::VPWidenGEPRecipe **)(v40 + 8 * v53))
        {
          int v54 = (uint64_t *)*((void *)a2 + 34);
          uint64_t v55 = *((void *)v61 + 8);
          __int16 v66 = 257;
          uint64_t v56 = sub_1CC57EEA0(v54, v55, v30, (uint64_t *)v67, v38, (uint64_t)&v64);
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v39 = (uint64_t *)v67;
      }
      __int16 v57 = (uint64_t *)*((void *)a2 + 34);
      uint64_t v58 = *((void *)v61 + 8);
      __int16 v63 = 257;
      uint64_t v56 = sub_1CC27CEC0(v57, v58, v30, v39, v38, (uint64_t)v62);
LABEL_81:
      char v59 = (unsigned __int8 *)v56;
      sub_1CD8C9514((uint64_t)a2, (char *)this + 96, v56, v27);
      if (v59 && v59[16] >= 0x1Cu) {
        llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (llvm::Instruction *)v59, v61);
      }
      if (v67 != v69) {
        free(v67);
      }
      if (++v27 >= *((_DWORD *)a2 + 2)) {
        return;
      }
    }
  }
LABEL_14:
  BOOL v10 = (uint64_t *)*((void *)a2 + 34);
  uint64_t v11 = (llvm::Instruction *)llvm::Instruction::clone(v6);
  __int16 v70 = 257;
  (*(void (**)(uint64_t, llvm::Instruction *, void **, uint64_t, uint64_t))(*(void *)v10[10] + 16))(v10[10], v11, &v67, v10[6], v10[7]);
  uint64_t v12 = *((unsigned int *)v10 + 2);
  if (v12)
  {
    uint64_t v19 = *v10;
    uint64_t v20 = v19 + 16 * v12;
    do
    {
      llvm::Instruction::setMetadata(v11, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
      v19 += 16;
    }
    while (v19 != v20);
  }
  if (*((_DWORD *)a2 + 2))
  {
    unsigned int v13 = 0;
    uint64_t v14 = (char *)this + 96;
    do
    {
      uint64_t v15 = *((void *)a2 + 34);
      uint64_t v16 = *(llvm::Type **)a2;
      __int16 v70 = 257;
      VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat(v15, v16, (unsigned __int8 *)v11, (uint64_t)&v67);
      sub_1CD8C9514((uint64_t)a2, v14, (uint64_t)VectorSplat, v13);
      if (VectorSplat) {
        BOOL v18 = VectorSplat[16] >= 0x1Cu;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18) {
        llvm::InnerLoopVectorizer::addMetadata(*((llvm::InnerLoopVectorizer **)a2 + 39), (llvm::Instruction *)VectorSplat, v61);
      }
      ++v13;
    }
    while (v13 < *((_DWORD *)a2 + 2));
  }
}

void llvm::VPWidenIntOrFpInductionRecipe::execute(llvm::VPWidenIntOrFpInductionRecipe *this, llvm::VPTransformState *a2)
{
  int v2 = a2;
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 20);
  uint64_t v5 = *((void *)this + 2);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0) {
    unint64_t v6 = **(void **)v6;
  }
  BOOL v7 = *(llvm::Instruction **)(v6 + 40);
  if (!v7 || *((unsigned char *)v7 + 16) != 66) {
    BOOL v7 = (llvm::Instruction *)*((void *)this + 19);
  }
  BOOL v8 = *(unsigned __int8 **)(**((void **)this + 6) + 40);
  uint64_t v9 = *((void *)a2 + 34);
  int v174 = *(_DWORD *)(v9 + 96);
  uint64_t v173 = *(void *)(v9 + 88);
  char v171 = *(unsigned char *)(v9 + 101);
  char v172 = *(unsigned char *)(v9 + 100);
  char v170 = *(unsigned char *)(v9 + 102);
  uint64_t v10 = *(void *)(v4 + 40);
  if (v10 && sub_1CB845E74(v10))
  {
    int v11 = *(unsigned __int8 *)(*(void *)(v4 + 40) + 17) >> 1;
    if (v11 == 127) {
      int v11 = -1;
    }
    *(_DWORD *)(v9 + 96) = v11;
  }
  uint64_t v12 = *(void *)(*((void *)this + 6) + 8);
  LOBYTE(v186) = 0;
  uint64_t v185 = 0;
  unsigned int v13 = (unsigned __int8 *)llvm::VPTransformState::get((uint64_t)v2, v12, (unsigned int *)&v185);
  uint64_t v168 = *(void *)(v9 + 48);
  uint64_t v165 = *(void *)(v9 + 56);
  uint64_t PreheaderBBFor = llvm::VPTransformState::CFGState::getPreheaderBBFor((llvm::VPTransformState *)((char *)v2 + 80), this);
  uint64_t v15 = 0;
  uint64_t v169 = PreheaderBBFor;
  uint64_t v16 = *(void *)(PreheaderBBFor + 40);
  if (v16) {
    uint64_t v17 = v16 - 24;
  }
  else {
    uint64_t v17 = 0;
  }
  if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
    uint64_t v17 = 0;
  }
  *(void *)(v9 + 48) = *(void *)(v17 + 40);
  *(void *)(v9 + 56) = v17 + 24;
  BOOL v18 = *(void **)(v17 + 48);
  uint64_t v185 = v18;
  if (v18)
  {
    llvm::MetadataTracking::track((uint64_t)&v185, (unsigned __int8 *)v18, 2);
    uint64_t v15 = v185;
  }
  sub_1CB8461A4(v9, 0, (uint64_t)v15);
  uint64_t v20 = (llvm::Type *)v185;
  if (v185) {
    llvm::MetadataTracking::untrack((uint64_t)&v185, (unsigned __int8 *)v185);
  }
  int v179 = v7;
  uint64_t v180 = (uint64_t)v2;
  uint64_t v166 = this;
  if (*((unsigned char *)v7 + 16) == 66)
  {
    uint64_t v21 = *(void *)v7;
    __int16 v184 = 257;
    if (*(void *)v13 != v21)
    {
      if (v13[16] <= 0x14u)
      {
        uint64_t v23 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(v9 + 72) + 224))(*(void *)(v9 + 72), 38, v13, v21);
        unsigned int v13 = (unsigned __int8 *)v23;
        if (v23 && *(unsigned __int8 *)(v23 + 16) >= 0x1Cu)
        {
          (*(void (**)(void, uint64_t, void *, void, void))(**(void **)(v9 + 80) + 16))(*(void *)(v9 + 80), v23, v183, *(void *)(v9 + 48), *(void *)(v9 + 56));
          uint64_t v161 = *(unsigned int *)(v9 + 8);
          if (v161)
          {
            uint64_t v162 = *(void *)v9;
            uint64_t v163 = *(void *)v9 + 16 * v161;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v162, *(llvm::MDNode **)(v162 + 8));
              v162 += 16;
            }
            while (v162 != v163);
          }
          int v2 = (llvm::VPTransformState *)v180;
        }
      }
      else
      {
        __int16 v188 = 257;
        unsigned int v13 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v13, v21, (const char **)&v185, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(v9 + 80) + 16))(*(void *)(v9 + 80), v13, v183, *(void *)(v9 + 48), *(void *)(v9 + 56));
        uint64_t v22 = *(unsigned int *)(v9 + 8);
        if (v22)
        {
          uint64_t v124 = *(void *)v9;
          uint64_t v125 = *(void *)v9 + 16 * v22;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v124, *(llvm::MDNode **)(v124 + 8));
            v124 += 16;
          }
          while (v124 != v125);
        }
        int v2 = (llvm::VPTransformState *)v180;
      }
    }
    __int16 v184 = 257;
    if (*(void *)v8 != v21)
    {
      if (v8[16] > 0x14u)
      {
        __int16 v188 = 257;
        BOOL v8 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v8, v21, (const char **)&v185, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(v9 + 80) + 16))(*(void *)(v9 + 80), v8, v183, *(void *)(v9 + 48), *(void *)(v9 + 56));
        uint64_t v24 = *(unsigned int *)(v9 + 8);
        if (v24)
        {
          uint64_t v126 = *(void *)v9;
          uint64_t v127 = *(void *)v9 + 16 * v24;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v126, *(llvm::MDNode **)(v126 + 8));
            v126 += 16;
          }
          while (v126 != v127);
        }
LABEL_30:
        int v2 = (llvm::VPTransformState *)v180;
        goto LABEL_35;
      }
      BOOL v8 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(v9 + 72) + 224))(*(void *)(v9 + 72), 38, v8, v21);
      if (v8) {
        BOOL v25 = v8[16] >= 0x1Cu;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(v9 + 80) + 16))(*(void *)(v9 + 80), v8, v183, *(void *)(v9 + 48), *(void *)(v9 + 56));
        uint64_t v158 = *(unsigned int *)(v9 + 8);
        if (v158)
        {
          uint64_t v159 = *(void *)v9;
          uint64_t v160 = *(void *)v9 + 16 * v158;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v159, *(llvm::MDNode **)(v159 + 8));
            v159 += 16;
          }
          while (v159 != v160);
        }
        goto LABEL_30;
      }
    }
  }
LABEL_35:
  uint64_t v175 = v13;
  int v26 = *(llvm::ConstantInt **)v8;
  if (*(unsigned char *)(*(void *)v8 + 8) == 13) {
    Signed = llvm::ConstantInt::getSigned(v26, 0, v19);
  }
  else {
    Signed = llvm::ConstantFP::get((llvm::ConstantFP **)v26, v20, 0.0);
  }
  int v28 = (unsigned __int8 *)Signed;
  BOOL v29 = *(llvm::Type **)v2;
  __int16 v188 = 257;
  VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v9, v29, v8, (uint64_t)&v185);
  uint64_t v31 = *(void *)(v4 + 40);
  uint64_t v177 = v4;
  if (v31) {
    int v32 = *(unsigned __int8 *)(v31 + 16) - 28;
  }
  else {
    int v32 = 31;
  }
  unsigned int v164 = v32;
  unsigned int v33 = (llvm::IRBuilderBase *)*((void *)v2 + 34);
  int v167 = VectorSplat;
  uint64_t v34 = *(void *)VectorSplat;
  unint64_t v35 = *(unsigned int *)(*(void *)VectorSplat + 32);
  int v36 = *(_DWORD *)(*(void *)VectorSplat + 8);
  uint64_t v37 = (llvm::Type *)(v35 | ((unint64_t)(v36 == 19) << 32));
  uint64_t v38 = *(void *)VectorSplat;
  if ((*(_DWORD *)(*(void *)VectorSplat + 8) & 0xFE) == 0x12) {
    uint64_t v38 = **(void **)(v34 + 16);
  }
  uint64_t v185 = v187;
  uint64_t v186 = 0x800000000;
  unsigned int v39 = *(unsigned __int8 *)(v38 + 8);
  uint64_t v40 = (llvm::Type ***)v34;
  if (v39 <= 6)
  {
    uint64_t v41 = *(llvm::IntegerType **)v38;
    uint64_t v42 = (llvm::Type *)v38;
    if ((v39 & 0xFE) == 0x12) {
      uint64_t v42 = **(llvm::Type ***)(v38 + 16);
    }
    unsigned int PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v42);
    uint64_t v44 = (uint64_t **)llvm::IntegerType::get(v41, PrimitiveSizeInBits);
    if (v36 == 19) {
      llvm::ScalableVectorType::get(v44, (llvm::Type *)v35);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v44, (llvm::Type *)v35);
    }
    uint64_t v40 = v45;
  }
  __int16 v184 = 257;
  StepVector = llvm::IRBuilderBase::CreateStepVector(v33, v40, (const llvm::Twine *)v183);
  __int16 v184 = 257;
  unsigned int v47 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v33, v37, v28, (uint64_t)v183);
  if (*(unsigned char *)(v38 + 8) == 13)
  {
    __int16 v184 = 257;
    uint64_t v48 = sub_1CB844A3C((uint64_t)v33, StepVector, (uint64_t)v47, (uint64_t)v183, 0, 0);
    __int16 v184 = 257;
    unsigned int v49 = v37;
    uint64_t v50 = (uint64_t)v175;
    BOOL v51 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v33, v49, v175, (uint64_t)v183);
    __int16 v184 = 257;
    unsigned int v52 = sub_1CC09A1EC((uint64_t)v33, (uint64_t)v48, (uint64_t)v51, (uint64_t)v183, 0, 0);
    v183[0] = "induction";
    __int16 v184 = 259;
    unsigned int v53 = sub_1CB844A3C((uint64_t)v33, v167, (uint64_t)v52, (uint64_t)v183, 0, 0);
  }
  else
  {
    __int16 v184 = 257;
    int v54 = sub_1CC52CA10((uint64_t)v33, (uint64_t)StepVector, (uint64_t *)v34, (uint64_t)v183);
    __int16 v184 = 257;
    uint64_t v55 = sub_1CC52C04C((uint64_t)v33, (uint64_t)v54, (uint64_t)v47, (uint64_t)v183, 0);
    __int16 v184 = 257;
    uint64_t v56 = v37;
    uint64_t v50 = (uint64_t)v175;
    __int16 v57 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v33, v56, v175, (uint64_t)v183);
    __int16 v184 = 257;
    uint64_t v58 = sub_1CB843C88((uint64_t)v33, v55, (uint64_t)v57, (uint64_t)v183, 0);
    v183[0] = "induction";
    __int16 v184 = 259;
    unsigned int v53 = sub_1CB844E98((uint64_t)v33, v164, (uint64_t)v167, v58, (uint64_t)v183, 0);
  }
  char v59 = v53;
  if (v185 != v187) {
    free(v185);
  }
  uint64_t v60 = *(llvm::ConstantInt **)v50;
  unsigned int v61 = *(unsigned __int8 *)(*(void *)v50 + 8);
  if (v61 == 13)
  {
    uint64_t v65 = 17;
    unsigned int v178 = 13;
LABEL_131:
    RuntimeVF = llvm::getRuntimeVF((llvm::IRBuilderBase *)v9, v60, *(void *)v180);
    goto LABEL_60;
  }
  uint64_t v62 = *(void *)(v177 + 40);
  if (v62) {
    int v63 = *(unsigned __int8 *)(v62 + 16) - 28;
  }
  else {
    int v63 = 31;
  }
  unsigned int v178 = v63;
  if (v61 > 6)
  {
    uint64_t v65 = 18;
    goto LABEL_131;
  }
  RuntimeVF = sub_1CD3170B0((llvm::IRBuilderBase *)v9, v60, *(void *)v180);
  uint64_t v65 = 18;
LABEL_60:
  __int16 v188 = 257;
  __int16 v66 = (unsigned __int8 *)sub_1CB844E98(v9, v65, v50, (uint64_t)RuntimeVF, (uint64_t)&v185, 0);
  uint64_t v67 = *(llvm::Type **)v180;
  if (v66[16] > 0x14u)
  {
    __int16 v188 = 257;
    Splat = llvm::IRBuilderBase::CreateVectorSplat(v9, v67, v66, (uint64_t)&v185);
  }
  else
  {
    Splat = llvm::ConstantVector::getSplat(*(llvm::Type **)v180, (uint64_t)v66);
  }
  uint64_t v176 = (uint64_t)Splat;
  if (v168)
  {
    sub_1CBF5385C(v9, v168, v165);
  }
  else
  {
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = 0;
  }
  uint64_t v69 = *(void *)v59;
  uint64_t v185 = "vec.ind";
  __int16 v188 = 259;
  uint64_t v70 = *(void *)(v180 + 88);
  uint64_t v71 = (uint64_t *)(v70 + 40);
  for (uint64_t i = *(uint64_t **)(v70 + 48); i != v71; uint64_t i = (uint64_t *)i[1])
  {
    unsigned int v73 = i - 3;
    if (!i) {
      unsigned int v73 = 0;
    }
    if (*((unsigned char *)v73 + 16) != 83)
    {
      unsigned int v74 = *((unsigned __int8 *)i - 8) - 38;
      BOOL v75 = v74 > 0x38;
      uint64_t v76 = (1 << v74) & 0x100060000000001;
      if (v75 || v76 == 0) {
        uint64_t v71 = i;
      }
      else {
        uint64_t v71 = (uint64_t *)i[1];
      }
      break;
    }
  }
  unsigned int v78 = operator new(0x48uLL);
  uint64_t v79 = v78;
  v78[1] = v69;
  uint64_t v80 = (llvm::Value *)(v78 + 1);
  *unsigned int v78 = 0;
  void v78[2] = 0;
  v78[3] = 0x4000000000000053;
  *((_OWORD *)v78 + 2) = 0u;
  uint64_t v81 = (char *)(v78 + 4);
  *((_OWORD *)v78 + 3) = 0u;
  *((_DWORD *)v78 + 16) = 0;
  if (v71)
  {
    uint64_t v122 = v71[2];
    v78[6] = v122;
    *(_WORD *)(v122 + 18) &= ~0x8000u;
    if ((*((unsigned char *)v78 + 31) & 0x10) != 0)
    {
      uint64_t v144 = *(void *)(v122 + 56);
      if (v144)
      {
        unsigned int v145 = *(llvm::ValueSymbolTable **)(v144 + 104);
        if (v145) {
          llvm::ValueSymbolTable::reinsertValue(v145, v80);
        }
      }
    }
    uint64_t v123 = *v71;
    v79[4] = *v71;
    v79[5] = v71;
    *(void *)(v123 + 8) = v81;
    *uint64_t v71 = (uint64_t)v81;
  }
  *((_DWORD *)v79 + 17) = 2;
  llvm::Value::setNameImpl(v80, (const char **)&v185);
  if (!*((unsigned char *)v79 + 24))
  {
    if ((*((unsigned char *)v79 + 31) & 0x10) == 0) {
      goto LABEL_165;
    }
    uint64_t v128 = ***(void ***)v80;
    uint64_t v129 = *(void *)(v128 + 152);
    uint64_t v130 = *(unsigned int *)(v128 + 168);
    if (v130)
    {
      LODWORD(v131) = (v130 - 1) & ((v80 >> 4) ^ (v80 >> 9));
      uint64_t v132 = (llvm::Value **)(v129 + 16 * v131);
      uint64_t v133 = *v132;
      if (*v132 == v80)
      {
LABEL_158:
        uint64_t v146 = v132[1];
        unint64_t v149 = *(void *)v146;
        uint64_t v147 = (char *)v146 + 16;
        unint64_t v148 = v149;
        if (v149 >= 5 && *(_DWORD *)v147 == *(_DWORD *)"llvm." && v147[4] == aLlvm_1[4])
        {
          *((_DWORD *)v79 + 10) |= 0x2000u;
          int v151 = llvm::Function::lookupIntrinsicID(v147, v148);
LABEL_166:
          *((_DWORD *)v79 + 11) = v151;
          goto LABEL_80;
        }
LABEL_165:
        int v151 = 0;
        *((_DWORD *)v79 + 10) &= ~0x2000u;
        goto LABEL_166;
      }
      int v134 = 1;
      while (v133 != (llvm::Value *)-4096)
      {
        int v135 = v131 + v134++;
        uint64_t v131 = v135 & (v130 - 1);
        uint64_t v133 = *(llvm::Value **)(v129 + 16 * v131);
        if (v133 == v80)
        {
          uint64_t v132 = (llvm::Value **)(v129 + 16 * v131);
          goto LABEL_158;
        }
      }
    }
    uint64_t v132 = (llvm::Value **)(v129 + 16 * v130);
    goto LABEL_158;
  }
LABEL_80:
  uint64_t v82 = *((unsigned int *)v79 + 17);
  uint64_t v83 = operator new(40 * v82);
  void *v79 = v83;
  if (v82)
  {
    uint64_t v84 = &v83[4 * v82];
    do
    {
      *uint64_t v83 = 0;
      v83[1] = 0;
      v83[2] = 0;
      v83[3] = v80;
      v83 += 4;
    }
    while (v83 != v84);
  }
  unsigned int v85 = (unsigned __int8 *)*((void *)v179 + 6);
  int v182 = v85;
  if (v85) {
    llvm::MetadataTracking::track((uint64_t)&v182, v85, 2);
  }
  unsigned int v86 = (unsigned __int8 *)v79[7];
  if (v86) {
    llvm::MetadataTracking::untrack((uint64_t)(v79 + 7), v86);
  }
  unsigned int v87 = v182;
  v79[7] = v182;
  if (v87)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v182, v87, (uint64_t)(v79 + 7));
    int v182 = 0;
  }
  BOOL v88 = v80;
  if (*(_DWORD *)(v180 + 8))
  {
    unsigned int v89 = 0;
    BOOL v88 = v80;
    do
    {
      sub_1CD8C9514(v180, (char *)v166 + 96, (uint64_t)v88, v89);
      if (*((unsigned char *)v179 + 16) == 66) {
        llvm::InnerLoopVectorizer::addMetadata(*(llvm::InnerLoopVectorizer **)(v180 + 312), v88, v179);
      }
      uint64_t v185 = "step.add";
      __int16 v188 = 259;
      BOOL v88 = sub_1CB844E98(v9, v178, (uint64_t)v88, v176, (uint64_t)&v185, 0);
      BOOL v90 = (unsigned __int8 *)*((void *)v179 + 6);
      uint64_t v181 = v90;
      if (v90) {
        llvm::MetadataTracking::track((uint64_t)&v181, v90, 2);
      }
      int v91 = (unsigned __int8 **)((char *)v88 + 48);
      if (&v181 == (unsigned __int8 **)((char *)v88 + 48))
      {
        if (v181) {
          llvm::MetadataTracking::untrack((uint64_t)&v181, v181);
        }
      }
      else
      {
        if (*v91) {
          llvm::MetadataTracking::untrack((uint64_t)v88 + 48, *v91);
        }
        BOOL v92 = v181;
        void *v91 = v181;
        if (v92)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v181, v92, (uint64_t)v88 + 48);
          uint64_t v181 = 0;
        }
      }
      ++v89;
    }
    while (v89 < *(_DWORD *)(v180 + 8));
  }
  uint64_t v185 = "vec.ind.next";
  __int16 v188 = 259;
  llvm::Value::setNameImpl(v88, (const char **)&v185);
  if (v88 && !*((unsigned char *)v88 + 16))
  {
    if ((*((unsigned char *)v88 + 23) & 0x10) == 0) {
      goto LABEL_175;
    }
    uint64_t v136 = ***(void ***)v88;
    uint64_t v137 = *(void *)(v136 + 152);
    uint64_t v138 = *(unsigned int *)(v136 + 168);
    if (v138)
    {
      LODWORD(v139) = (v138 - 1) & ((v88 >> 4) ^ (v88 >> 9));
      unsigned int v140 = (llvm::Instruction **)(v137 + 16 * v139);
      uint64_t v141 = *v140;
      if (*v140 == v88)
      {
LABEL_168:
        unsigned int v152 = v140[1];
        unint64_t v155 = *(void *)v152;
        unint64_t v153 = (char *)v152 + 16;
        unint64_t v154 = v155;
        if (v155 >= 5 && *(_DWORD *)v153 == *(_DWORD *)"llvm." && v153[4] == aLlvm_1[4])
        {
          *((_DWORD *)v88 + 8) |= 0x2000u;
          int v157 = llvm::Function::lookupIntrinsicID(v153, v154);
LABEL_176:
          *((_DWORD *)v88 + 9) = v157;
          goto LABEL_106;
        }
LABEL_175:
        int v157 = 0;
        *((_DWORD *)v88 + 8) &= ~0x2000u;
        goto LABEL_176;
      }
      int v142 = 1;
      while (v141 != (llvm::Instruction *)-4096)
      {
        int v143 = v139 + v142++;
        uint64_t v139 = v143 & (v138 - 1);
        uint64_t v141 = *(llvm::Instruction **)(v137 + 16 * v139);
        if (v141 == v88)
        {
          unsigned int v140 = (llvm::Instruction **)(v137 + 16 * v139);
          goto LABEL_168;
        }
      }
    }
    unsigned int v140 = (llvm::Instruction **)(v137 + 16 * v138);
    goto LABEL_168;
  }
LABEL_106:
  int v93 = *((_DWORD *)v79 + 7);
  if ((v93 & 0x7FFFFFF) == *((_DWORD *)v79 + 17))
  {
    llvm::PHINode::growOperands(v80);
    int v93 = *((_DWORD *)v79 + 7);
  }
  uint64_t v94 = (v93 + 1) & 0x7FFFFFF;
  *((_DWORD *)v79 + 7) = v93 & 0xF8000000 | (v93 + 1) & 0x7FFFFFF;
  uint64_t v95 = (v94 - 1);
  if ((v93 & 0x40000000) != 0) {
    uint64_t v96 = (char *)*v79;
  }
  else {
    uint64_t v96 = (char *)v80 - 32 * v94;
  }
  int v97 = &v96[32 * v95];
  uint64_t v98 = v97;
  if (*(void *)v97)
  {
    **((void **)v97 + 2) = *((void *)v97 + 1);
    uint64_t v120 = *((void *)v97 + 1);
    if (v120) {
      *(void *)(v120 + 16) = *((void *)v97 + 2);
    }
  }
  *(void *)int v97 = v59;
  uint64_t v101 = *((void *)v59 + 1);
  uint64_t v100 = (char **)((char *)v59 + 8);
  uint64_t v99 = v101;
  *((void *)v97 + 1) = v101;
  unsigned int v102 = v97 + 8;
  if (v101) {
    *(void *)(v99 + 16) = v102;
  }
  *(void *)&v96[32 * v95 + 16] = v100;
  *uint64_t v100 = v98;
  int v103 = *((_DWORD *)v79 + 7);
  uint64_t v104 = v103 & 0x7FFFFFF;
  if ((v103 & 0x40000000) != 0) {
    uint64_t v105 = (char *)*v79;
  }
  else {
    uint64_t v105 = (char *)v80 - 32 * v104;
  }
  uint64_t v106 = *((unsigned int *)v79 + 17);
  *(void *)&v105[32 * v106 + 8 * (v104 - 1)] = v169;
  int v107 = *((_DWORD *)v79 + 7);
  if ((v107 & 0x7FFFFFF) == v106)
  {
    llvm::PHINode::growOperands(v80);
    int v107 = *((_DWORD *)v79 + 7);
  }
  uint64_t v108 = (v107 + 1) & 0x7FFFFFF;
  *((_DWORD *)v79 + 7) = v107 & 0xF8000000 | (v107 + 1) & 0x7FFFFFF;
  uint64_t v109 = (v108 - 1);
  if ((v107 & 0x40000000) != 0) {
    unsigned int v110 = (char *)*v79;
  }
  else {
    unsigned int v110 = (char *)v80 - 32 * v108;
  }
  unsigned int v111 = &v110[32 * v109];
  unsigned int v112 = v111;
  if (*(void *)v111)
  {
    **((void **)v111 + 2) = *((void *)v111 + 1);
    uint64_t v121 = *((void *)v111 + 1);
    if (v121) {
      *(void *)(v121 + 16) = *((void *)v111 + 2);
    }
  }
  *(void *)unsigned int v111 = v88;
  uint64_t v115 = *((void *)v88 + 1);
  uint64_t v114 = (char **)((char *)v88 + 8);
  uint64_t v113 = v115;
  *((void *)v111 + 1) = v115;
  int v116 = v111 + 8;
  if (v115) {
    *(void *)(v113 + 16) = v116;
  }
  *(void *)&v110[32 * v109 + 16] = v114;
  *uint64_t v114 = v112;
  int v117 = *((_DWORD *)v79 + 7);
  uint64_t v118 = v117 & 0x7FFFFFF;
  if ((v117 & 0x40000000) != 0) {
    BOOL v119 = (char *)*v79;
  }
  else {
    BOOL v119 = (char *)v80 - 32 * v118;
  }
  *(void *)&v119[32 * *((unsigned int *)v79 + 17) + 8 * (v118 - 1)] = v169;
  *(_DWORD *)(v9 + 96) = v174;
  *(void *)(v9 + 88) = v173;
  *(unsigned char *)(v9 + 100) = v172;
  *(unsigned char *)(v9 + 101) = v171;
  *(unsigned char *)(v9 + 102) = v170;
}

llvm::Instruction *sub_1CD3170B0(llvm::IRBuilderBase *a1, llvm::Type *this, unint64_t a3)
{
  unint64_t v6 = *(llvm::IntegerType **)this;
  BOOL v7 = this;
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    BOOL v7 = (llvm::Type *)**((void **)this + 2);
  }
  unsigned int PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v7);
  uint64_t v9 = (llvm::ConstantInt *)llvm::IntegerType::get(v6, PrimitiveSizeInBits);
  RuntimeVF = llvm::getRuntimeVF(a1, v9, a3);
  __int16 v13 = 257;
  return sub_1CC52CA10((uint64_t)a1, (uint64_t)RuntimeVF, (uint64_t *)this, (uint64_t)v12);
}

void *llvm::VPWidenPointerInductionRecipe::execute(llvm::VPWidenPointerInductionRecipe *this, llvm::IRBuilderBase **a2)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  Plauint64_t n = (uint64_t *)llvm::VPBlockBase::getPlan(*((llvm::VPBlockBase **)this + 11));
  uint64_t v5 = sub_1CD8D082C(Plan);
  if (v5) {
    unint64_t v6 = (llvm::VPValue *)(v5 + 96);
  }
  else {
    unint64_t v6 = 0;
  }
  BOOL v7 = llvm::VPTransformState::get((llvm::VPTransformState *)a2, v6, 0);
  uint64_t v8 = *((unsigned int *)this + 30);
  if (!v8)
  {
LABEL_11:
    uint64_t v12 = (uint64_t)a2[34];
    __int16 v13 = (uint64_t *)(*((void *)this + 19) + 32);
    while (2)
    {
      uint64_t v14 = *v13;
      switch(*(_WORD *)(v14 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v15 = (uint64_t *)(v14 + 40);
          break;
        case 4:
          uint64_t v15 = (uint64_t *)(v14 + 48);
          break;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          __int16 v13 = *(uint64_t **)(v14 + 32);
          continue;
        case 6:
          __int16 v13 = (uint64_t *)(v14 + 40);
          continue;
        case 0xE:
          uint64_t v15 = *(uint64_t **)(v14 - 8);
          break;
        default:
          uint64_t v15 = *(uint64_t **)(v14 + 32);
          break;
      }
      break;
    }
    uint64_t v18 = *v15;
    __int16 v165 = 257;
    uint64_t v19 = (llvm::ConstantInt **)sub_1CB845504(v12, (unsigned __int8 *)v7, v18, (uint64_t)&v163);
    uint64_t result = (void *)llvm::vputils::onlyFirstLaneUsed((llvm::VPWidenPointerInductionRecipe *)((char *)this + 96), v20);
    if (!*((_DWORD *)a2 + 2)) {
      return result;
    }
    uint64_t v22 = 0;
    if (result) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = *(unsigned int *)a2;
    }
    while (1)
    {
      uint64_t result = llvm::createStepForVF(a2[34], *v19, (unint64_t)*a2, v22);
      if (v23) {
        break;
      }
LABEL_59:
      if (++v22 >= (unint64_t)*((unsigned int *)a2 + 2)) {
        return result;
      }
    }
    uint64_t v24 = result;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = (uint64_t)a2[34];
      unsigned int v27 = llvm::ConstantInt::get(*v19, v25, 0);
      __int16 v165 = 257;
      int v28 = sub_1CB844A3C(v26, v24, (uint64_t)v27, (uint64_t)&v163, 0, 0);
      uint64_t v29 = (uint64_t)a2[34];
      __int16 v165 = 257;
      unsigned int v30 = sub_1CB844A3C(v29, v19, (uint64_t)v28, (uint64_t)&v163, 0, 0);
      uint64_t v31 = a2[11];
      int v32 = (llvm::IRBuilderBase *)*((void *)v31 + 5);
      if (v32 == (llvm::IRBuilderBase *)((char *)v31 + 40))
      {
        unsigned int v33 = 0;
      }
      else
      {
        if (v32) {
          uint64_t v34 = (unsigned __int8 *)v32 - 24;
        }
        else {
          uint64_t v34 = 0;
        }
        if (v34[16] - 29 >= 0xB) {
          unsigned int v33 = 0;
        }
        else {
          unsigned int v33 = (llvm::Instruction *)v34;
        }
      }
      unint64_t v35 = sub_1CD2FD218(*(void *)(*((void *)this + 19) + 32), *((uint64_t ****)this + 20), v33);
      int v36 = sub_1CD2FD36C((uint64_t *)a2[34], (uint64_t)v30, *(void *)(*((void *)this + 19) + 16), (uint64_t)v35, *((void *)this + 19));
      uint64_t v163 = "next.gep";
      __int16 v165 = 259;
      llvm::Value::setNameImpl(v36, &v163);
      if (v36) {
        BOOL v37 = *((unsigned char *)v36 + 16) == 0;
      }
      else {
        BOOL v37 = 0;
      }
      if (!v37) {
        goto LABEL_40;
      }
      if ((*((unsigned char *)v36 + 23) & 0x10) == 0)
      {
LABEL_57:
        int v51 = 0;
        *((_DWORD *)v36 + 8) &= ~0x2000u;
        goto LABEL_58;
      }
      uint64_t v38 = ***(void ***)v36;
      uint64_t v39 = *(void *)(v38 + 152);
      uint64_t v40 = *(unsigned int *)(v38 + 168);
      if (!v40) {
        goto LABEL_49;
      }
      LODWORD(v41) = (v40 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      uint64_t v42 = (llvm::Instruction **)(v39 + 16 * v41);
      uint64_t v43 = *v42;
      if (*v42 != v36) {
        break;
      }
LABEL_50:
      int v46 = v42[1];
      unint64_t v49 = *(void *)v46;
      unsigned int v47 = (char *)v46 + 16;
      unint64_t v48 = v49;
      if (v49 < 5) {
        goto LABEL_57;
      }
      if (*(_DWORD *)v47 != *(_DWORD *)"llvm." || v47[4] != aLlvm_1[4]) {
        goto LABEL_57;
      }
      *((_DWORD *)v36 + 8) |= 0x2000u;
      int v51 = llvm::Function::lookupIntrinsicID(v47, v48);
LABEL_58:
      *((_DWORD *)v36 + 9) = v51;
LABEL_40:
      uint64_t v163 = (const char *)__PAIR64__(v25, v22);
      char v164 = 0;
      uint64_t result = sub_1CD8C9704(a2, (uint64_t)this + 96, (uint64_t)v36, (uint64_t)&v163);
      if (++v25 == v23) {
        goto LABEL_59;
      }
    }
    int v44 = 1;
    while (v43 != (llvm::Instruction *)-4096)
    {
      int v45 = v41 + v44++;
      uint64_t v41 = v45 & (v40 - 1);
      uint64_t v43 = *(llvm::Instruction **)(v39 + 16 * v41);
      if (v43 == v36)
      {
        uint64_t v42 = (llvm::Instruction **)(v39 + 16 * v41);
        goto LABEL_50;
      }
    }
LABEL_49:
    uint64_t v42 = (llvm::Instruction **)(v39 + 16 * v40);
    goto LABEL_50;
  }
  uint64_t v9 = (void *)*((void *)this + 14);
  uint64_t v10 = 8 * v8;
  while (1)
  {
    uint64_t v11 = *v9 ? *v9 - 40 : 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(void *)v11 + 40))(v11, (char *)this + 96) & 1) == 0) {
      break;
    }
    ++v9;
    v10 -= 8;
    if (!v10) {
      goto LABEL_11;
    }
  }
  uint64_t v16 = (uint64_t *)(*((void *)this + 19) + 32);
  while (2)
  {
    uint64_t v17 = *v16;
    switch(*(_WORD *)(v17 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v52 = (llvm::Type **)(v17 + 40);
        break;
      case 4:
        unsigned int v52 = (llvm::Type **)(v17 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v16 = *(uint64_t **)(v17 + 32);
        continue;
      case 6:
        uint64_t v16 = (uint64_t *)(v17 + 40);
        continue;
      case 0xE:
        unsigned int v52 = *(llvm::Type ***)(v17 - 8);
        break;
      default:
        unsigned int v52 = *(llvm::Type ***)(v17 + 32);
        break;
    }
    break;
  }
  unsigned int v53 = *v52;
  int v54 = *(uint64_t **)(**((void **)this + 6) + 40);
  uint64_t v55 = *v54;
  uint64_t v163 = "pointer.phi";
  __int16 v165 = 259;
  uint64_t v56 = operator new(0x48uLL);
  __int16 v57 = v56;
  v56[1] = v55;
  uint64_t v58 = (llvm::Value *)(v56 + 1);
  void *v56 = 0;
  v56[2] = 0;
  v56[3] = 0x4000000000000053;
  *((_OWORD *)v56 + 2) = 0u;
  char v59 = (char *)(v56 + 4);
  *((_OWORD *)v56 + 3) = 0u;
  *((_DWORD *)v56 + 16) = 0;
  uint64_t v156 = (llvm::Value *)(v56 + 1);
  if (v7)
  {
    uint64_t v127 = v53;
    uint64_t v128 = *((void *)v7 + 5);
    uint64_t v129 = (uint64_t *)((char *)v7 + 24);
    v56[6] = v128;
    *(_WORD *)(v128 + 18) &= ~0x8000u;
    if ((*((unsigned char *)v56 + 31) & 0x10) != 0)
    {
      uint64_t v141 = *(void *)(v128 + 56);
      if (v141)
      {
        int v142 = *(llvm::ValueSymbolTable **)(v141 + 104);
        if (v142) {
          llvm::ValueSymbolTable::reinsertValue(v142, v156);
        }
      }
    }
    uint64_t v130 = *v129;
    v57[4] = *v129;
    v57[5] = v129;
    *(void *)(v130 + 8) = v59;
    *uint64_t v129 = (uint64_t)v59;
    unsigned int v53 = v127;
    uint64_t v58 = v156;
  }
  *((_DWORD *)v57 + 17) = 2;
  llvm::Value::setNameImpl(v58, &v163);
  if (*((unsigned char *)v57 + 24)) {
    goto LABEL_66;
  }
  if ((*((unsigned char *)v57 + 31) & 0x10) == 0) {
    goto LABEL_131;
  }
  uint64_t v133 = ***(void ***)v58;
  uint64_t v134 = *(void *)(v133 + 152);
  uint64_t v135 = *(unsigned int *)(v133 + 168);
  if (!v135) {
    goto LABEL_123;
  }
  LODWORD(v136) = (v135 - 1) & ((v58 >> 4) ^ (v58 >> 9));
  uint64_t v137 = (llvm::Value **)(v134 + 16 * v136);
  uint64_t v138 = *v137;
  if (*v137 != v58)
  {
    int v139 = 1;
    while (v138 != (llvm::Value *)-4096)
    {
      int v140 = v136 + v139++;
      uint64_t v136 = v140 & (v135 - 1);
      uint64_t v138 = *(llvm::Value **)(v134 + 16 * v136);
      if (v138 == v58)
      {
        uint64_t v137 = (llvm::Value **)(v134 + 16 * v136);
        goto LABEL_124;
      }
    }
LABEL_123:
    uint64_t v137 = (llvm::Value **)(v134 + 16 * v135);
  }
LABEL_124:
  unsigned int v145 = v137[1];
  unint64_t v148 = *(void *)v145;
  uint64_t v146 = (char *)v145 + 16;
  unint64_t v147 = v148;
  if (v148 < 5 || (*(_DWORD *)v146 == *(_DWORD *)"llvm." ? (BOOL v149 = v146[4] == aLlvm_1[4]) : (BOOL v149 = 0), !v149))
  {
LABEL_131:
    int v150 = 0;
    *((_DWORD *)v57 + 10) &= ~0x2000u;
    goto LABEL_132;
  }
  *((_DWORD *)v57 + 10) |= 0x2000u;
  int v150 = llvm::Function::lookupIntrinsicID(v146, v147);
LABEL_132:
  *((_DWORD *)v57 + 11) = v150;
LABEL_66:
  uint64_t v60 = *((unsigned int *)v57 + 17);
  unsigned int v61 = operator new(40 * v60);
  *__int16 v57 = v61;
  if (v60)
  {
    uint64_t v62 = &v61[4 * v60];
    do
    {
      *unsigned int v61 = 0;
      v61[1] = 0;
      v61[2] = 0;
      v61[3] = v58;
      v61 += 4;
    }
    while (v61 != v62);
  }
  uint64_t PreheaderBBFor = llvm::VPTransformState::CFGState::getPreheaderBBFor((llvm::VPTransformState::CFGState *)(a2 + 10), this);
  int v64 = *((_DWORD *)v57 + 7);
  if ((v64 & 0x7FFFFFF) == *((_DWORD *)v57 + 17))
  {
    llvm::PHINode::growOperands(v58);
    int v64 = *((_DWORD *)v57 + 7);
  }
  uint64_t v65 = (v64 + 1) & 0x7FFFFFF;
  *((_DWORD *)v57 + 7) = v64 & 0xF8000000 | (v64 + 1) & 0x7FFFFFF;
  uint64_t v66 = (v65 - 1);
  if ((v64 & 0x40000000) != 0) {
    uint64_t v67 = (char *)*v57;
  }
  else {
    uint64_t v67 = (char *)v58 - 32 * v65;
  }
  uint64_t v68 = &v67[32 * v66];
  uint64_t v69 = v68;
  if (*(void *)v68)
  {
    **((void **)v68 + 2) = *((void *)v68 + 1);
    uint64_t v125 = *((void *)v68 + 1);
    if (v125) {
      *(void *)(v125 + 16) = *((void *)v68 + 2);
    }
  }
  *(void *)uint64_t v68 = v54;
  uint64_t v72 = v54[1];
  uint64_t v71 = (char **)(v54 + 1);
  uint64_t v70 = v72;
  *((void *)v68 + 1) = v72;
  unsigned int v73 = v68 + 8;
  if (v72) {
    *(void *)(v70 + 16) = v73;
  }
  *(void *)&v67[32 * v66 + 16] = v71;
  *uint64_t v71 = v69;
  int v74 = *((_DWORD *)v57 + 7);
  uint64_t v75 = v74 & 0x7FFFFFF;
  if ((v74 & 0x40000000) != 0) {
    uint64_t v76 = (char *)*v57;
  }
  else {
    uint64_t v76 = (char *)v58 - 32 * v75;
  }
  *(void *)&v76[32 * *((unsigned int *)v57 + 17) + 8 * (v75 - 1)] = PreheaderBBFor;
  BOOL v77 = (uint64_t *)*((void *)a2[34] + 7);
  int v151 = v77;
  uint64_t v152 = PreheaderBBFor;
  if (v77) {
    unsigned int v78 = (llvm::Instruction *)(v77 - 3);
  }
  else {
    unsigned int v78 = 0;
  }
  uint64_t v79 = *(llvm::Instruction ***)(*((void *)this + 19) + 32);
  sub_1CC2B6C4C((uint64_t)&v163, *((uint64_t ****)this + 20), *(void *)(*(void *)(v57[6] + 56) + 40) + 272, (uint64_t)"induction", 1);
  uint64_t v80 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)&v163, v79, v53, v78);
  RuntimeVF = llvm::getRuntimeVF(a2[34], v53, (unint64_t)*a2);
  uint64_t v82 = (uint64_t)a2[34];
  unint64_t v153 = (uint64_t **)v53;
  uint64_t v83 = llvm::ConstantInt::get(v53, *((unsigned int *)a2 + 2), 0);
  __int16 v162 = 257;
  uint64_t v154 = (uint64_t)RuntimeVF;
  uint64_t v84 = sub_1CC09A1EC(v82, (uint64_t)RuntimeVF, (uint64_t)v83, (uint64_t)v161, 0, 0);
  uint64_t v85 = *(void *)(*((void *)this + 19) + 48);
  uint64_t v86 = (uint64_t)a2[34];
  __int16 v162 = 257;
  unint64_t v155 = (unsigned __int8 *)v80;
  v157[0] = (uint64_t)sub_1CC09A1EC(v86, (uint64_t)v80, (uint64_t)v84, (uint64_t)v161, 0, 0);
  v159[0] = "ptr.ind";
  __int16 v160 = 259;
  unsigned int v87 = (char *)operator new(0x90uLL);
  *((_DWORD *)v87 + 21) = *((_DWORD *)v87 + 21) & 0x38000000 | 2;
  BOOL v88 = (llvm::Value *)(v87 + 64);
  *(void *)unsigned int v87 = 0;
  *((void *)v87 + 1) = 0;
  *((void *)v87 + 2) = 0;
  *((void *)v87 + 3) = v87 + 64;
  *((void *)v87 + 4) = 0;
  *((void *)v87 + 5) = 0;
  *((void *)v87 + 6) = 0;
  *((void *)v87 + 7) = v87 + 64;
  unsigned int v89 = (uint64_t **)v156;
  sub_1CB845A7C(v85, (uint64_t *)v156, (uint64_t)v157, 1);
  BOOL v90 = v151;
  *((void *)v87 + 8) = v91;
  *((void *)v87 + 9) = 0;
  BOOL v92 = (uint64_t *)(v87 + 72);
  unsigned int v93 = *((_DWORD *)v87 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v87 + 20) = 62;
  *((_DWORD *)v87 + 21) = v93;
  *(_OWORD *)(v87 + 88) = 0u;
  uint64_t v94 = v87 + 88;
  *(_OWORD *)(v87 + 104) = 0u;
  *((_DWORD *)v87 + 30) = 0;
  if (v151)
  {
    uint64_t v131 = v151[2];
    *((void *)v87 + 13) = v131;
    *(_WORD *)(v131 + 18) &= ~0x8000u;
    if ((v87[87] & 0x10) != 0)
    {
      uint64_t v143 = *(void *)(v131 + 56);
      if (v143)
      {
        uint64_t v144 = *(llvm::ValueSymbolTable **)(v143 + 104);
        if (v144)
        {
          llvm::ValueSymbolTable::reinsertValue(v144, v88);
          BOOL v90 = v151;
        }
      }
    }
    uint64_t v132 = *v90;
    *((void *)v87 + 11) = *v90;
    *((void *)v87 + 12) = v90;
    *(void *)(v132 + 8) = v94;
    uint64_t *v90 = (uint64_t)v94;
    unsigned int v89 = (uint64_t **)v156;
  }
  *((void *)v87 + 16) = v85;
  *((void *)v87 + 17) = llvm::GetElementPtrInst::getIndexedType(v85, (uint64_t)v157, 1);
  llvm::GetElementPtrInst::init((uint64_t ***)v88, v89, v157, 1, v159);
  int v95 = *((_DWORD *)v57 + 7);
  if ((v95 & 0x7FFFFFF) == *((_DWORD *)v57 + 17))
  {
    llvm::PHINode::growOperands((llvm::PHINode *)v89);
    int v95 = *((_DWORD *)v57 + 7);
  }
  uint64_t v96 = (v95 + 1) & 0x7FFFFFF;
  *((_DWORD *)v57 + 7) = v95 & 0xF8000000 | (v95 + 1) & 0x7FFFFFF;
  uint64_t v97 = (v96 - 1);
  if ((v95 & 0x40000000) != 0) {
    uint64_t v98 = (uint64_t **)*v57;
  }
  else {
    uint64_t v98 = &v89[-4 * v96];
  }
  uint64_t v99 = &v98[4 * v97];
  uint64_t v100 = v99;
  if (*v99)
  {
    *__int16 v99[2] = (uint64_t)v99[1];
    uint64_t v126 = v99[1];
    if (v126) {
      v126[2] = (uint64_t)v99[2];
    }
  }
  *uint64_t v99 = (uint64_t *)v88;
  uint64_t v101 = *v92;
  v99[1] = (uint64_t *)*v92;
  unsigned int v102 = v99 + 1;
  if (v101) {
    *(void *)(v101 + 16) = v102;
  }
  v98[4 * v97 + 2] = v92;
  *BOOL v92 = (uint64_t)v100;
  int v103 = *((_DWORD *)v57 + 7);
  uint64_t v104 = v103 & 0x7FFFFFF;
  if ((v103 & 0x40000000) != 0) {
    uint64_t v105 = (uint64_t **)*v57;
  }
  else {
    uint64_t v105 = &v89[-4 * v104];
  }
  (&v105[4 * *((unsigned int *)v57 + 17)])[(v104 - 1)] = (uint64_t *)v152;
  if (*((_DWORD *)a2 + 2))
  {
    unint64_t v106 = 0;
    do
    {
      int v107 = *a2;
      if ((unint64_t)*a2 >> 32 == 1) {
        llvm::ScalableVectorType::get(v153, v107);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v153, v107);
      }
      uint64_t v109 = v108;
      uint64_t v110 = (uint64_t)a2[34];
      unsigned int v111 = llvm::ConstantInt::get((llvm::ConstantInt *)v153, v106, 0);
      __int16 v162 = 257;
      unsigned int v112 = (unsigned __int8 *)sub_1CC09A1EC(v110, v154, (uint64_t)v111, (uint64_t)v161, 0, 0);
      uint64_t v113 = (uint64_t)a2[34];
      uint64_t v114 = *a2;
      __int16 v162 = 257;
      VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v113, v114, v112, (uint64_t)v161);
      int v116 = a2[34];
      __int16 v162 = 257;
      StepVector = llvm::IRBuilderBase::CreateStepVector(v116, v109, (const llvm::Twine *)v161);
      __int16 v160 = 257;
      uint64_t v118 = sub_1CB844A3C((uint64_t)v116, VectorSplat, (uint64_t)StepVector, (uint64_t)v159, 0, 0);
      BOOL v119 = (uint64_t *)a2[34];
      uint64_t v120 = *(void *)(*((void *)this + 19) + 48);
      uint64_t v121 = *a2;
      __int16 v162 = 257;
      uint64_t v122 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v119, v121, v155, (uint64_t)v161);
      v159[0] = "vector.gep";
      __int16 v160 = 259;
      uint64_t v123 = sub_1CC09A1EC((uint64_t)v119, (uint64_t)v118, (uint64_t)v122, (uint64_t)v159, 0, 0);
      __int16 v158 = 257;
      uint64_t v124 = sub_1CB930F7C(v119, v120, (uint64_t *)v156, (const char *)v123, (uint64_t)v157);
      sub_1CD8C9514((uint64_t)a2, (char *)this + 96, (uint64_t)v124, v106++);
    }
    while (v106 < *((unsigned int *)a2 + 2));
  }
  return (void *)sub_1CC2B7040((uint64_t)&v163);
}

void llvm::VPScalarIVStepsRecipe::execute(llvm::VPScalarIVStepsRecipe *this, llvm::VPTransformState *a2)
{
  uint64_t v4 = *((void *)a2 + 34);
  int v123 = *(_DWORD *)(v4 + 96);
  uint64_t v122 = *(void *)(v4 + 88);
  char v120 = *(unsigned char *)(v4 + 101);
  char v121 = *(unsigned char *)(v4 + 100);
  char v119 = *(unsigned char *)(v4 + 102);
  uint64_t v5 = *(void *)(*((void *)this + 21) + 40);
  if (v5 && sub_1CB845E74(v5))
  {
    int v6 = *(unsigned __int8 *)(*(void *)(*((void *)this + 21) + 40) + 17) >> 1;
    if (v6 == 127) {
      int v6 = -1;
    }
    *(_DWORD *)(*((void *)a2 + 34) + 96) = v6;
  }
  uint64_t v7 = *(void *)(*((void *)this + 6) + 16);
  char v127 = 0;
  uint64_t v126 = 0;
  uint64_t v8 = (unsigned __int8 *)llvm::VPTransformState::get((uint64_t)a2, v7, (unsigned int *)&v126);
  uint64_t v9 = **((void **)this + 6);
  BOOL v10 = v9 == 0;
  if (v9) {
    uint64_t v11 = v9 - 96;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 + 96;
  if (v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  char v127 = 0;
  uint64_t v126 = 0;
  uint64_t v14 = llvm::VPTransformState::get((uint64_t)a2, v13, (unsigned int *)&v126);
  Plauint64_t n = (uint64_t *)llvm::VPBlockBase::getPlan(*((llvm::VPBlockBase **)this + 11));
  uint64_t v16 = sub_1CD8D082C(Plan);
  if (v16) {
    uint64_t v17 = (llvm::VPValue *)(v16 + 96);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = llvm::VPTransformState::get(a2, v17, 0);
  if (llvm::VPScalarIVStepsRecipe::isCanonical(this))
  {
    uint64_t v20 = *((void *)this + 19);
    if (*(void *)v18 == v20) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v20 = *((void *)this + 19);
  }
  uint64_t v21 = *((void *)a2 + 34);
  if (*(unsigned char *)(v20 + 8) == 13)
  {
    __int16 v128 = 257;
    uint64_t v14 = sub_1CB845504(v21, (unsigned __int8 *)v14, v20, (uint64_t)&v126);
  }
  else
  {
    __int16 v125 = 257;
    if (*(void *)v14 != v20)
    {
      if (*((unsigned __int8 *)v14 + 16) <= 0x14u)
      {
        uint64_t v14 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(v21 + 72) + 224))(*(void *)(v21 + 72), 44, v14, v20);
        if (v14) {
          BOOL v25 = *((unsigned __int8 *)v14 + 16) >= 0x1Cu;
        }
        else {
          BOOL v25 = 0;
        }
        if (v25)
        {
          (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(v21 + 80) + 16))(*(void *)(v21 + 80), v14, v124, *(void *)(v21 + 48), *(void *)(v21 + 56));
          uint64_t v106 = *(unsigned int *)(v21 + 8);
          if (v106)
          {
            uint64_t v107 = *(void *)v21;
            uint64_t v108 = v107 + 16 * v106;
            do
            {
              llvm::Instruction::setMetadata(v14, *(_DWORD *)v107, *(llvm::MDNode **)(v107 + 8));
              v107 += 16;
            }
            while (v107 != v108);
          }
        }
      }
      else
      {
        __int16 v128 = 257;
        uint64_t v14 = llvm::CastInst::Create(44, (uint64_t)v14, v20, &v126, 0);
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(v21 + 80) + 16))(*(void *)(v21 + 80), v14, v124, *(void *)(v21 + 48), *(void *)(v21 + 56));
        uint64_t v22 = *(unsigned int *)(v21 + 8);
        if (v22)
        {
          uint64_t v23 = *(void *)v21;
          uint64_t v24 = v23 + 16 * v22;
          do
          {
            llvm::Instruction::setMetadata(v14, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
            v23 += 16;
          }
          while (v23 != v24);
        }
      }
    }
  }
  uint64_t v14 = sub_1CD2FD36C(*((uint64_t **)a2 + 34), (uint64_t)v14, *(void *)(*(void *)(*((void *)this + 6) + 8) + 40), (uint64_t)v8, *((void *)this + 21));
  uint64_t v126 = "offset.idx";
  __int16 v128 = 259;
  llvm::Value::setNameImpl(v14, &v126);
  if (v14) {
    BOOL v26 = *((unsigned char *)v14 + 16) == 0;
  }
  else {
    BOOL v26 = 0;
  }
  if (v26)
  {
    if ((*((unsigned char *)v14 + 23) & 0x10) == 0) {
      goto LABEL_130;
    }
    uint64_t v87 = ***(void ***)v14;
    uint64_t v88 = *(void *)(v87 + 152);
    uint64_t v89 = *(unsigned int *)(v87 + 168);
    if (v89)
    {
      LODWORD(v90) = (v89 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v91 = (llvm::Instruction **)(v88 + 16 * v90);
      BOOL v92 = *v91;
      if (*v91 == v14)
      {
LABEL_123:
        int v95 = v91[1];
        unint64_t v97 = *(void *)v95;
        uint64_t v96 = (char *)v95 + 16;
        uint64_t v19 = (llvm::VPValue *)v97;
        if (v97 >= 5 && *(_DWORD *)v96 == *(_DWORD *)"llvm." && v96[4] == aLlvm_1[4])
        {
          *((_DWORD *)v14 + 8) |= 0x2000u;
          int v99 = llvm::Function::lookupIntrinsicID(v96, (unint64_t)v19);
LABEL_131:
          *((_DWORD *)v14 + 9) = v99;
          goto LABEL_35;
        }
LABEL_130:
        int v99 = 0;
        *((_DWORD *)v14 + 8) &= ~0x2000u;
        goto LABEL_131;
      }
      int v93 = 1;
      while (v92 != (llvm::Instruction *)-4096)
      {
        int v94 = v90 + v93++;
        uint64_t v90 = v94 & (v89 - 1);
        BOOL v92 = *(llvm::Instruction **)(v88 + 16 * v90);
        if (v92 == v14)
        {
          uint64_t v91 = (llvm::Instruction **)(v88 + 16 * v90);
          goto LABEL_123;
        }
      }
    }
    uint64_t v91 = (llvm::Instruction **)(v88 + 16 * v89);
    goto LABEL_123;
  }
LABEL_35:
  uint64_t v27 = *((void *)this + 20);
  if (v27)
  {
    int v28 = (uint64_t *)*((void *)a2 + 34);
    __int16 v125 = 257;
    if (*(void *)v14 != v27)
    {
      if (*((unsigned __int8 *)v14 + 16) <= 0x14u)
      {
        uint64_t v14 = (llvm::Instruction *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, uint64_t))(*(void *)v28[9] + 224))(v28[9], 38, v14, v27);
        if (v14) {
          BOOL v32 = *((unsigned __int8 *)v14 + 16) >= 0x1Cu;
        }
        else {
          BOOL v32 = 0;
        }
        if (v32)
        {
          (*(void (**)(uint64_t, llvm::Instruction *, void *, uint64_t, uint64_t))(*(void *)v28[10] + 16))(v28[10], v14, v124, v28[6], v28[7]);
          uint64_t v100 = *((unsigned int *)v28 + 2);
          if (v100)
          {
            uint64_t v101 = *v28;
            uint64_t v102 = v101 + 16 * v100;
            do
            {
              llvm::Instruction::setMetadata(v14, *(_DWORD *)v101, *(llvm::MDNode **)(v101 + 8));
              v101 += 16;
            }
            while (v101 != v102);
          }
        }
      }
      else
      {
        __int16 v128 = 257;
        uint64_t v14 = llvm::CastInst::Create(38, (uint64_t)v14, v27, &v126, 0);
        (*(void (**)(uint64_t, llvm::Instruction *, void *, uint64_t, uint64_t))(*(void *)v28[10] + 16))(v28[10], v14, v124, v28[6], v28[7]);
        uint64_t v29 = *((unsigned int *)v28 + 2);
        if (v29)
        {
          uint64_t v30 = *v28;
          uint64_t v31 = v30 + 16 * v29;
          do
          {
            llvm::Instruction::setMetadata(v14, *(_DWORD *)v30, *(llvm::MDNode **)(v30 + 8));
            v30 += 16;
          }
          while (v30 != v31);
        }
      }
    }
    unsigned int v33 = (uint64_t *)*((void *)a2 + 34);
    uint64_t v34 = *((void *)this + 20);
    __int16 v125 = 257;
    if (*(void *)v8 != v34)
    {
      if (v8[16] <= 0x14u)
      {
        uint64_t v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v33[9] + 224))(v33[9], 38, v8, v34);
        if (v8) {
          BOOL v38 = v8[16] >= 0x1Cu;
        }
        else {
          BOOL v38 = 0;
        }
        if (v38)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)v33[10] + 16))(v33[10], v8, v124, v33[6], v33[7]);
          uint64_t v103 = *((unsigned int *)v33 + 2);
          if (v103)
          {
            uint64_t v104 = *v33;
            uint64_t v105 = *v33 + 16 * v103;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v104, *(llvm::MDNode **)(v104 + 8));
              v104 += 16;
            }
            while (v104 != v105);
          }
        }
      }
      else
      {
        __int16 v128 = 257;
        uint64_t v8 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v8, v34, &v126, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)v33[10] + 16))(v33[10], v8, v124, v33[6], v33[7]);
        uint64_t v35 = *((unsigned int *)v33 + 2);
        if (v35)
        {
          uint64_t v36 = *v33;
          uint64_t v37 = *v33 + 16 * v35;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v36, *(llvm::MDNode **)(v36 + 8));
            v36 += 16;
          }
          while (v36 != v37);
        }
      }
    }
  }
  if (*(_DWORD *)a2) {
    BOOL v39 = *((_DWORD *)a2 + 1) == 1;
  }
  else {
    BOOL v39 = 0;
  }
  if (v39 || *(_DWORD *)a2 > 1u)
  {
    int v116 = (llvm::VPScalarIVStepsRecipe *)((char *)this + 96);
    uint64_t v55 = *(uint64_t ***)v14;
    if ((*(_DWORD *)(*(void *)v14 + 8) & 0xFE) == 0x12)
    {
      uint64_t v55 = (uint64_t **)*v55[2];
      int v56 = *((unsigned __int8 *)v55 + 8);
    }
    else
    {
      int v56 = *(_DWORD *)(*(void *)v14 + 8);
    }
    if (v56 == 13)
    {
      unsigned int v115 = 13;
      int v57 = 17;
    }
    else
    {
      uint64_t v58 = *(void *)(*((void *)this + 21) + 40);
      if (v58) {
        int v59 = *(unsigned __int8 *)(v58 + 16) - 28;
      }
      else {
        int v59 = 31;
      }
      unsigned int v115 = v59;
      int v57 = 18;
    }
    unsigned int v114 = v57;
    uint64_t v60 = (llvm::IRBuilderBase *)*((void *)a2 + 34);
    int LaneUsed = llvm::vputils::onlyFirstLaneUsed(v116, v19);
    LODWORD(v62) = *(_DWORD *)a2;
    if (LaneUsed) {
      uint64_t v62 = 1;
    }
    else {
      uint64_t v62 = v62;
    }
    uint64_t v117 = v62;
    int v63 = *v55;
    int v64 = (llvm::Type *)v55;
    if ((v55[1] & 0xFE) == 0x12) {
      int v64 = (llvm::Type *)*v55[2];
    }
    unsigned int PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v64);
    uint64_t v113 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)v63, PrimitiveSizeInBits);
    if (*((_DWORD *)a2 + 1) == 1) {
      char v66 = LaneUsed;
    }
    else {
      char v66 = 1;
    }
    if (v66)
    {
      uint64_t v110 = 0;
      VectorSplat = 0;
      StepVector = 0;
      uint64_t v109 = 0;
    }
    else
    {
      uint64_t v67 = *(llvm::Type **)a2;
      if (HIDWORD(*(void *)a2) == 1) {
        llvm::ScalableVectorType::get(v55, v67);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v55, v67);
      }
      uint64_t v109 = v68;
      uint64_t v69 = *(llvm::Type **)a2;
      if (HIDWORD(*(void *)a2) == 1) {
        llvm::ScalableVectorType::get(v113, v69);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v113, v69);
      }
      __int16 v128 = 257;
      StepVector = llvm::IRBuilderBase::CreateStepVector(v60, v70, (const llvm::Twine *)&v126);
      uint64_t v71 = *(llvm::Type **)a2;
      __int16 v128 = 257;
      VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v60, v71, v8, (uint64_t)&v126);
      uint64_t v72 = *(llvm::Type **)a2;
      __int16 v128 = 257;
      uint64_t v110 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v60, v72, (unsigned __int8 *)v14, (uint64_t)&v126);
    }
    if (*((_DWORD *)a2 + 2))
    {
      unint64_t v73 = 0;
      do
      {
        StepForVF = (unsigned __int8 *)llvm::createStepForVF(v60, (llvm::ConstantInt *)v113, *(void *)a2, v73);
        char v76 = LaneUsed;
        if (*((_DWORD *)a2 + 1) != 1) {
          char v76 = 1;
        }
        if ((v76 & 1) == 0)
        {
          uint64_t v82 = *(llvm::Type **)a2;
          __int16 v128 = 257;
          uint64_t v83 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v60, v82, StepForVF, (uint64_t)&v126);
          __int16 v128 = 257;
          uint64_t v84 = sub_1CB844A3C((uint64_t)v60, v83, (uint64_t)StepVector, (uint64_t)&v126, 0, 0);
          if (*((unsigned __int8 *)v55 + 8) <= 6u)
          {
            __int16 v128 = 257;
            uint64_t v84 = sub_1CB845378((uint64_t)v60, (uint64_t)v84, v109, (uint64_t)&v126);
          }
          __int16 v128 = 257;
          uint64_t v85 = sub_1CB844E98((uint64_t)v60, v114, (uint64_t)v84, (uint64_t)VectorSplat, (uint64_t)&v126, 0);
          __int16 v128 = 257;
          uint64_t v86 = sub_1CB844E98((uint64_t)v60, v115, (uint64_t)v110, (uint64_t)v85, (uint64_t)&v126, 0);
          sub_1CD8C9514((uint64_t)a2, v116, (uint64_t)v86, v73);
        }
        if (*((unsigned __int8 *)v55 + 8) <= 6u)
        {
          __int16 v128 = 257;
          StepForVF = (unsigned __int8 *)sub_1CB845378((uint64_t)v60, (uint64_t)StepForVF, (uint64_t *)v55, (uint64_t)&v126);
        }
        if (v117)
        {
          for (unint64_t i = 0; i != v117; ++i)
          {
            if (*((unsigned char *)v55 + 8) == 13) {
              Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt *)v55, i, v75);
            }
            else {
              Signed = llvm::ConstantFP::get((llvm::ConstantFP **)v55, v74, (double)i);
            }
            __int16 v128 = 257;
            uint64_t v79 = sub_1CB844E98((uint64_t)v60, v115, (uint64_t)StepForVF, (uint64_t)Signed, (uint64_t)&v126, 0);
            __int16 v128 = 257;
            uint64_t v80 = sub_1CB844E98((uint64_t)v60, v114, (uint64_t)v79, (uint64_t)v8, (uint64_t)&v126, 0);
            __int16 v128 = 257;
            uint64_t v81 = sub_1CB844E98((uint64_t)v60, v115, (uint64_t)v14, (uint64_t)v80, (uint64_t)&v126, 0);
            uint64_t v126 = (const char *)__PAIR64__(i, v73);
            char v127 = 0;
            sub_1CD8C9704(a2, (uint64_t)v116, (uint64_t)v81, (uint64_t)&v126);
          }
        }
        ++v73;
      }
      while (v73 < *((unsigned int *)a2 + 2));
    }
  }
  else if (*((_DWORD *)a2 + 2))
  {
    unsigned int v41 = 0;
    do
    {
      uint64_t v42 = *(llvm::ConstantInt **)v8;
      uint64_t v43 = (llvm::IRBuilderBase *)*((void *)a2 + 34);
      unint64_t v44 = *(void *)a2 & 0xFFFFFFFF00000000 | (v41 * *(void *)a2);
      if (*(unsigned __int8 *)(*(void *)v8 + 8) > 6u)
      {
        RuntimeVF = llvm::getRuntimeVF(v43, v42, v44);
        uint64_t v51 = *((void *)a2 + 34);
        __int16 v128 = 257;
        unsigned int v52 = sub_1CC09A1EC(v51, (uint64_t)RuntimeVF, (uint64_t)v8, (uint64_t)&v126, 0, 0);
        v124[0] = "induction";
        __int16 v125 = 259;
        unsigned int v53 = sub_1CB844A3C(v51, v14, (uint64_t)v52, (uint64_t)v124, 0, 0);
      }
      else
      {
        int v45 = sub_1CD3170B0(v43, v42, v44);
        uint64_t v46 = *((void *)a2 + 34);
        __int16 v128 = 257;
        uint64_t v47 = sub_1CB843C88(v46, (uint64_t)v45, (uint64_t)v8, (uint64_t)&v126, 0);
        uint64_t v48 = *(void *)(*((void *)this + 21) + 40);
        if (v48) {
          uint64_t v49 = *(unsigned __int8 *)(v48 + 16) - 28;
        }
        else {
          uint64_t v49 = 31;
        }
        uint64_t v54 = *((void *)a2 + 34);
        __int16 v128 = 257;
        unsigned int v53 = sub_1CB844E98(v54, v49, (uint64_t)v14, v47, (uint64_t)&v126, 0);
      }
      sub_1CD8C9514((uint64_t)a2, (char *)this + 96, (uint64_t)v53, v41++);
    }
    while (v41 < *((_DWORD *)a2 + 2));
  }
  *(_DWORD *)(v4 + 96) = v123;
  *(void *)(v4 + 88) = v122;
  *(unsigned char *)(v4 + 100) = v121;
  *(unsigned char *)(v4 + 101) = v120;
  *(unsigned char *)(v4 + 102) = v119;
}