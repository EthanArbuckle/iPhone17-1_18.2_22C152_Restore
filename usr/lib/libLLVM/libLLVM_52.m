uint64_t llvm::EliminateDuplicatePHINodes(llvm *this, llvm::BasicBlock *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::ValueAsMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  llvm::Instruction *v29;
  char v30;
  const llvm::Instruction **v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  llvm::Instruction *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  const llvm::Instruction **v42;
  const llvm::Instruction **v43;

  if (*((llvm **)this + 5) != (llvm *)((char *)this + 40))
  {
    v3 = *((void *)this + 6);
    if (v3) {
      v4 = v3 - 24;
    }
    else {
      v4 = 0;
    }
    if (*(unsigned char *)(v4 + 16) != 83) {
      v4 = 0;
    }
    v5 = dword_1EBCFCAE0;
    v6 = dword_1EBCFCAE0 != -1;
    if (dword_1EBCFCAE0 != -1 && v4 != 0)
    {
      v8 = dword_1EBCFCAE0;
      do
      {
        v9 = *(void *)(v4 + 32);
        v4 = v9 - 24;
        if (v9) {
          v10 = v9 - 24;
        }
        else {
          v10 = 0;
        }
        v11 = v8-- != 0;
        v6 = v11;
      }
      while (v11 && v9 && *(unsigned char *)(v10 + 16) == 83);
    }
    if (v6) {
      goto LABEL_23;
    }
    v39 = 0;
    v40 = 0;
    v41 = 0;
    if ((dword_1EBCFCAE0 & 0x3FFFFFFF) == 0)
    {
      v24 = 0;
LABEL_55:
      v25 = *((void *)this + 6);
      v26 = *(void *)(v25 + 8);
      if (v25) {
        v27 = (unsigned __int8 *)(v25 - 24);
      }
      else {
        v27 = 0;
      }
      v28 = v27[16];
      if (v28 == 83) {
        v29 = (llvm::Instruction *)v27;
      }
      else {
        v29 = 0;
      }
      v38 = v29;
      if (!v25 || v28 != 83)
      {
LABEL_81:
        MEMORY[0x1D25D9CD0](v24, 8);
        return 0;
      }
      while (1)
      {
        v42 = 0;
        v30 = sub_1CD191114(v24, v41, &v38, &v42);
        v31 = v42;
        if (v30)
        {
          llvm::Value::doRAUW(v29, *v42, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        v43 = v42;
        v32 = v40;
        v33 = v41;
        if (4 * (int)v40 + 4 >= 3 * v41) {
          break;
        }
        if (v41 + ~v40 - HIDWORD(v40) <= v41 >> 3) {
          goto LABEL_79;
        }
LABEL_67:
        LODWORD(v40) = v32 + 1;
        if (*v31 != (const llvm::Instruction *)-4096) {
          --HIDWORD(v40);
        }
        *v31 = v29;
        v34 = *(void *)(v26 + 8);
        if (v26) {
          v35 = (unsigned __int8 *)(v26 - 24);
        }
        else {
          v35 = 0;
        }
        v36 = v35[16];
        if (v36 == 83) {
          v29 = (llvm::Instruction *)v35;
        }
        else {
          v29 = 0;
        }
        v38 = v29;
        if (v26)
        {
          v26 = v34;
          if (v36 == 83) {
            continue;
          }
        }
        v24 = v39;
        goto LABEL_81;
      }
      v33 = 2 * v41;
LABEL_79:
      sub_1CD190FD4((uint64_t)&v39, v33);
      v24 = v39;
      sub_1CD191114(v39, v41, &v38, &v43);
      v32 = v40;
      v31 = v43;
      goto LABEL_67;
    }
LABEL_53:
    v22 = (16 * v5 / 3u + 1) | ((unint64_t)(16 * v5 / 3u + 1) >> 1);
    v23 = v22 | (v22 >> 2) | ((v22 | (v22 >> 2)) >> 4);
    sub_1CD190FD4((uint64_t)&v39, (((v23 | (v23 >> 8)) >> 16) | v23 | (v23 >> 8)) + 1);
    v24 = v39;
    goto LABEL_55;
  }
  v5 = dword_1EBCFCAE0;
  if (dword_1EBCFCAE0 == -1)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    goto LABEL_53;
  }
LABEL_23:
  v12 = *((void *)this + 6);
  v13 = (llvm::Value *)(v12 - 24);
  if (v12) {
    v14 = v12 - 24;
  }
  else {
    v14 = 0;
  }
  if (v12 && *(unsigned char *)(v14 + 16) == 83)
  {
    do
    {
      v12 = *(void *)(v12 + 8);
      v15 = (llvm::ValueAsMetadata *)(v12 - 24);
      if (v12) {
        v16 = v12 - 24;
      }
      else {
        v16 = 0;
      }
      if (v12 && *(unsigned char *)(v16 + 16) == 83)
      {
        v17 = v12;
        do
        {
          if (llvm::Instruction::isIdenticalToWhenDefined(v15, v13))
          {
            llvm::Value::doRAUW(v15, v13, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          v17 = *(void *)(v17 + 8);
          v18 = (unsigned __int8 *)(v17 - 24);
          if (!v17) {
            v18 = 0;
          }
          v19 = v18[16];
          if (v19 == 83) {
            v15 = (llvm::ValueAsMetadata *)v18;
          }
          else {
            v15 = 0;
          }
        }
        while (v17 && v19 == 83);
      }
      v20 = (unsigned __int8 *)(v12 - 24);
      if (!v12) {
        v20 = 0;
      }
      v21 = v20[16];
      if (v21 == 83) {
        v13 = (llvm::Value *)v20;
      }
      else {
        v13 = 0;
      }
    }
    while (v12 && v21 == 83);
  }
  return 0;
}

uint64_t llvm::getOrEnforceKnownAlignment(uint64_t a1, __int16 a2, unsigned __int8 *a3, const llvm::DataLayout *a4, const llvm::DataLayout *a5, const llvm::DataLayout *a6)
{
  if (!a4 || !*((void *)a4 + 5))
  {
    if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (a4 = (const llvm::DataLayout *)a1, !*(void *)(a1 + 40))) {
      a4 = 0;
    }
  }
  v23[0] = (const llvm::DataLayout *)a3;
  v23[1] = a5;
  v23[2] = a4;
  v23[3] = a6;
  v23[4] = 0;
  char v24 = 1;
  sub_1CC16089C((uint64_t *)a1, 0, v23, (uint64_t)&v19);
  unsigned int v9 = v20;
  if (v20 > 0x40) {
    unsigned int v10 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v19);
  }
  else {
    unsigned int v10 = __clz(__rbit64(~v19));
  }
  unsigned int v11 = v9 - 1;
  if (v10 < v9 - 1) {
    unsigned int v11 = v10;
  }
  if (v11 >= 0x20) {
    LOBYTE(v11) = 32;
  }
  uint64_t v12 = __clz(1 << v11) ^ 0x3F;
  if ((a2 & 0xFF00) != 0 && a2 > v12)
  {
    v13 = llvm::Value::stripPointerCasts((llvm::Value *)a1);
    v14 = v13;
    unsigned int v15 = *((unsigned __int8 *)v13 + 16);
    if (v13 && v15 == 59)
    {
      __int16 v16 = *((_WORD *)v13 + 9);
      unsigned int v17 = __clz(1 << v16) ^ 0x3F;
      if (a2 <= v17 || a3[9] && a2 > a3[8]) {
        goto LABEL_24;
      }
      *((_WORD *)v13 + 9) = v16 & 0xFFC0 | a2;
    }
    else
    {
      LOBYTE(v17) = 0;
      if (v15 > 3) {
        goto LABEL_24;
      }
      if (v15 == 1) {
        goto LABEL_24;
      }
      LOBYTE(v17) = llvm::Value::getPointerAlignment(v13, (const llvm::DataLayout *)a3);
      if (a2 <= v17 || !llvm::GlobalObject::canIncreaseAlignment(v14)) {
        goto LABEL_24;
      }
      *((_DWORD *)v14 + 8) = *((_DWORD *)v14 + 8) & 0xFFC0FFFF | ((a2 << 16) + 0x10000);
    }
    LOBYTE(v17) = a2;
LABEL_24:
    if (v12 <= v17) {
      uint64_t v12 = v17;
    }
    else {
      uint64_t v12 = v12;
    }
  }
  if (v22 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  if (v20 >= 0x41 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  return v12;
}

unsigned __int8 *sub_1CD18AB08@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 == 2) {
    uint64_t v5 = *(void *)(v3 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  result = (unsigned __int8 *)llvm::DILocation::getImpl(**(void ***)a1, 0, 0, *(void *)(v3 - 8 * v4), v5, 0, 0, 1);
  *a2 = result;
  if (result)
  {
    return (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)a2, result, 2);
  }
  return result;
}

llvm::MDNode *sub_1CD18AB9C(llvm::MDNode *result)
{
  v1 = (void *)*((void *)result + 3);
  uint64_t v2 = *((void *)result + 4) - (void)v1;
  if ((v2 & 0x7FFFFFFE0) != 0 && *v1 == 16 && v1[2] == 22 && v1[3] == 24)
  {
    uint64_t v3 = *((void *)result + 2);
    uint64_t v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v3 & 4) != 0) {
      uint64_t v4 = (void *)*v4;
    }
    return llvm::DIExpression::getImpl(v4, v1 + 4, (v2 >> 3) - 4, 0, 1);
  }
  return result;
}

uint64_t sub_1CD18ABFC(llvm::Type *a1, uint64_t a2)
{
  uint64_t v3 = (llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40) + 272);
  unint64_t v4 = sub_1CC5CA218(v3, a1);
  int v6 = v5;
  uint64_t result = v4 >= llvm::DbgVariableIntrinsic::getFragmentSizeInBits((llvm::DbgVariableIntrinsic *)a2);
  if (!v8)
  {
    if (*(_DWORD *)(*(void *)(a2 - 32) + 36) == 58) {
      return 0;
    }
    uint64_t result = 0;
    unsigned int v9 = *(unsigned __int8 **)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 24);
    int v10 = *v9;
    if ((v10 - 4) >= 0x1C && (v10 - 33) >= 2)
    {
      if (v10 == 32) {
        unsigned int v9 = (unsigned __int8 *)**((void **)v9 + 3);
      }
      uint64_t result = *((void *)v9 + 16);
      if (result)
      {
        if (*(unsigned char *)(result + 16) != 59) {
          return 0;
        }
        llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)result, v3, (uint64_t)&v12);
        if (!v14) {
          return 0;
        }
        if (v6 != 1 && v13 == 1) {
          return 0;
        }
        return v4 >= v12;
      }
    }
  }
  return result;
}

uint64_t llvm::LowerDbgDeclare(llvm *this, llvm::Function *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  llvm::DIBuilder::DIBuilder((uint64_t)v43, *((void **)this + 5), 0, 0);
  v40 = v42;
  uint64_t v41 = 0x400000000;
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3 != (void *)((char *)this + 72))
  {
    do
    {
      unint64_t v4 = v3 - 3;
      if (!v3) {
        unint64_t v4 = 0;
      }
      int v5 = v4 + 5;
      for (i = (void *)v4[6]; i != v5; i = (void *)i[1])
      {
        if (i) {
          uint64_t v7 = (uint64_t)(i - 3);
        }
        else {
          uint64_t v7 = 0;
        }
        BOOL v8 = sub_1CC1F4FA8(v7);
        if (i && v8)
        {
          if (v41 >= (unint64_t)HIDWORD(v41)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v40 + v41) = v7;
          LODWORD(v41) = v41 + 1;
        }
      }
      uint64_t v3 = (void *)v3[1];
    }
    while (v3 != (void *)((char *)this + 72));
    if (v41)
    {
      for (j = (char *)v40; j != (char *)v40 + 8 * v41; j += 8)
      {
        int v10 = *(llvm **)j;
        unsigned int v11 = *(unsigned __int8 **)(*(void *)(*(void *)j - 32 * (*(_DWORD *)(*(void *)j + 20) & 0x7FFFFFF))
                                  + 24);
        int v12 = *v11;
        if ((v12 - 4) >= 0x1C && (v12 - 33) >= 2)
        {
          if (v12 == 32) {
            unsigned int v11 = (unsigned __int8 *)**((void **)v11 + 3);
          }
          uint64_t v13 = *((void *)v11 + 16);
          if (v13)
          {
            if (*(unsigned char *)(v13 + 16) == 59 && (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v13) & 1) == 0)
            {
              uint64_t v15 = *(void *)(v13 + 64);
              if (!v15 || (*(_DWORD *)(v15 + 8) & 0xFE) != 0x10)
              {
                uint64_t v16 = *(void *)(v13 + 8);
                if (!v16)
                {
LABEL_35:
                  v36 = &v39;
                  unsigned int v38 = 8;
                  unsigned int v19 = 1;
                  uint64_t v39 = v13;
                  while (1)
                  {
                    uint64_t v20 = *((void *)v36 + --v19);
                    unsigned int v37 = v19;
                    uint64_t v21 = *(void *)(v20 + 8);
                    if (v21) {
                      break;
                    }
LABEL_73:
                    if (!v19) {
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                  }
                  while (2)
                  {
                    uint64_t v22 = *(void *)(v21 + 24);
                    int v23 = *(unsigned __int8 *)(v22 + 16);
                    if (v22 && v23 == 61)
                    {
                      int v24 = *(_DWORD *)(v22 + 20);
                      if ((v24 & 0x40000000) != 0) {
                        uint64_t v25 = *(void *)(v22 - 8);
                      }
                      else {
                        uint64_t v25 = v22 - 32 * (v24 & 0x7FFFFFF);
                      }
                      if (((v21 - v25) & 0x1FFFFFFFE0) == 0x20) {
                        llvm::ConvertDebugDeclareToDebugValue(v10, *(llvm::DbgVariableIntrinsic **)(v21 + 24), (llvm::StoreInst *)v43, v14);
                      }
                      goto LABEL_62;
                    }
                    if (v22 && v23 == 60)
                    {
                      llvm::ConvertDebugDeclareToDebugValue(v10, *(llvm::Type ***)(v21 + 24), (llvm::LoadInst *)v43, v14);
                      goto LABEL_62;
                    }
                    if (v22 && v23 == 84)
                    {
                      if (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v21 + 24))) {
                        goto LABEL_62;
                      }
                      sub_1CD18AB08((uint64_t)v10, &v34);
                      v26 = *(void **)(((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[8] + 24);
                      uint64_t v35 = 6;
                      v27 = llvm::DIExpression::append(v26, &v35, 1);
                      v28 = sub_1CD18AB9C(v27);
                      llvm::DIBuilder::insertDbgValueIntrinsic((uint64_t)v43, (llvm::ValueAsMetadata *)v13, *(void *)(((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[4] + 24), (uint64_t)v28, (uint64_t)v34, *(void *)(v22 + 40), v22);
                      if (!v34) {
                        goto LABEL_62;
                      }
                      int v29 = *v34;
                      if ((v29 - 4) <= 0x1E)
                      {
                        if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
                          goto LABEL_62;
                        }
                        uint64_t v30 = *((void *)v34 + 2);
                        if ((v30 & 4) == 0) {
                          goto LABEL_62;
                        }
                        unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
                        if (!v31) {
                          goto LABEL_62;
                        }
LABEL_69:
                        uint64_t v35 = (uint64_t)&v34;
                        sub_1CC5FA668(v31 + 16, &v35);
                        goto LABEL_62;
                      }
                      if ((v29 - 3) >= 0xFFFFFFFE) {
                        v32 = v34;
                      }
                      else {
                        v32 = 0;
                      }
                      if ((v29 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v31 = (unint64_t)(v32 + 8);
                        goto LABEL_69;
                      }
                      if (v29 == 3) {
                        *((void *)v34 + 1) = 0;
                      }
                    }
                    else if (v22 && v23 == 77 && *(unsigned char *)(*(void *)v22 + 8) == 15)
                    {
                      if (v37 >= (unint64_t)v38) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v36 + v37++) = v22;
                    }
LABEL_62:
                    uint64_t v21 = *(void *)(v21 + 8);
                    if (!v21)
                    {
                      unsigned int v19 = v37;
                      goto LABEL_73;
                    }
                    continue;
                  }
                }
                while (1)
                {
                  if ((uint64_t v17 = *(void *)(v16 + 24), v18 = *(unsigned __int8 *)(v17 + 16), v17) && v18 == 60
                    || v18 == 61)
                  {
                    if (*(_WORD *)(v17 + 18)) {
                      break;
                    }
                  }
                  uint64_t v16 = *(void *)(v16 + 8);
                  if (!v16) {
                    goto LABEL_35;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v40 != v42) {
    free(v40);
  }
  sub_1CC2DBB1C((uint64_t)v43);
  return 0;
}

uint64_t llvm::insertDebugValuesForPHIs(uint64_t result, uint64_t *a2)
{
  if (!*((_DWORD *)a2 + 2)) {
    return result;
  }
  uint64_t v3 = result;
  unsigned int v101 = 128;
  unint64_t v4 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  uint64_t v5 = 0;
  int v6 = 0;
  v99 = v4;
  uint64_t v100 = 0;
  uint64_t v91 = 2;
  v92 = 0;
  uint64_t v93 = -4096;
  v94 = 0;
  v90 = (int32x2_t ****)&unk_1F2615EC8;
  do
  {
    uint64_t v7 = &v4[v5];
    uint64_t v8 = v91;
    uint64_t v9 = v93;
    *(void *)&v4[v5 + 8] = v91 & 6;
    *((void *)v7 + 2) = 0;
    *((void *)v7 + 3) = v9;
    if (v9 != -4096 && v9 != -8192 && v9 != 0)
    {
      *((void *)v7 + 2) = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 & 0xFFFFFFFFFFFFFFF8) = &v4[v5 + 8];
      *((void *)v7 + 1) = v8 & 0xFFFFFFFFFFFFFFFELL;
      unsigned int v11 = (void *)*((void *)v7 + 2);
      if (v11) {
        *unsigned int v11 = &v4[v5 + 16 + (*v11 & 7)];
      }
      int v6 = v94;
    }
    *(void *)uint64_t v7 = &unk_1F2615EC8;
    *((void *)v7 + 4) = v6;
    v5 += 64;
  }
  while (v5 != 0x2000);
  if (v93 != -8192 && v93 != -4096 && v93 != 0)
  {
    unint64_t v79 = v91 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v91 & 0xFFFFFFFFFFFFFFF8) = v92;
    if (v92)
    {
      unint64_t *v92 = *v92 & 7 | v79;
    }
    else
    {
      uint64_t v80 = v93;
      v81 = ***(int32x2_t ****)v93;
      unint64_t v82 = (unint64_t)v81[303];
      if (v82 <= v79)
      {
        uint64_t v83 = v81[305].u32[0];
        if (v82 + 16 * v83 > v79)
        {
          unsigned int v84 = v83 - 1;
          LODWORD(v85) = v84 & ((v93 >> 4) ^ (v93 >> 9));
          v86 = (uint64_t *)(v82 + 16 * v85);
          uint64_t v87 = *v86;
          if (v93 == *v86)
          {
LABEL_128:
            uint64_t *v86 = -8192;
            v81[304] = vadd_s32(v81[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v80 = v93;
          }
          else
          {
            int v88 = 1;
            while (v87 != -4096)
            {
              int v89 = v85 + v88++;
              uint64_t v85 = v89 & v84;
              uint64_t v87 = *(void *)(v82 + 16 * v85);
              if (v93 == v87)
              {
                v86 = (uint64_t *)(v82 + 16 * v85);
                goto LABEL_128;
              }
            }
          }
          *(unsigned char *)(v80 + 17) &= ~1u;
        }
      }
    }
  }
  LOBYTE(v102[0]) = 0;
  char v103 = 0;
  uint64_t v13 = v3 + 40;
  uint64_t v14 = *(void *)(v3 + 48);
  if (v14 == v3 + 40) {
    goto LABEL_58;
  }
  do
  {
    if (v14) {
      uint64_t v15 = v14 - 24;
    }
    else {
      uint64_t v15 = 0;
    }
    int v16 = sub_1CC5817B4(v15);
    if (!v16) {
      uint64_t v15 = 0;
    }
    if (v14 && v16)
    {
      llvm::DbgVariableIntrinsic::location_ops(v15, v98);
      uint64_t v17 = v98[0];
      uint64_t v18 = v98[1];
      while (v17 != v18)
      {
        unsigned int v19 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0) {
          unint64_t v20 = *v19;
        }
        uint64_t v21 = *(void *)(v20 + 128);
        if (v21 && *(unsigned char *)(v21 + 16) == 83)
        {
          v90 = (int32x2_t ****)v21;
          uint64_t v91 = 6;
          v92 = 0;
          uint64_t v93 = v15;
          if (v15 != -8192 && v15 != -4096 && v15) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v91);
          }
          sub_1CC4CEFAC((uint64_t)&v99, &v90, (uint64_t)&v96);
          if (v93 != -8192 && v93 != -4096 && v93)
          {
            unint64_t v22 = v91 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v91 & 0xFFFFFFFFFFFFFFF8) = v92;
            if (v92)
            {
              unint64_t *v92 = *v92 & 7 | v22;
            }
            else
            {
              uint64_t v23 = v93;
              int v24 = ***(int32x2_t ****)v93;
              unint64_t v25 = (unint64_t)v24[303];
              if (v25 <= v22)
              {
                uint64_t v26 = v24[305].u32[0];
                if (v25 + 16 * v26 > v22)
                {
                  unsigned int v27 = v26 - 1;
                  LODWORD(v28) = v27 & ((v93 >> 4) ^ (v93 >> 9));
                  int v29 = (uint64_t *)(v25 + 16 * v28);
                  uint64_t v30 = *v29;
                  if (v93 == *v29)
                  {
LABEL_48:
                    *int v29 = -8192;
                    v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v23 = v93;
                  }
                  else
                  {
                    int v31 = 1;
                    while (v30 != -4096)
                    {
                      int v32 = v28 + v31++;
                      uint64_t v28 = v32 & v27;
                      uint64_t v30 = *(void *)(v25 + 16 * v28);
                      if (v93 == v30)
                      {
                        int v29 = (uint64_t *)(v25 + 16 * v28);
                        goto LABEL_48;
                      }
                    }
                  }
                  *(unsigned char *)(v23 + 17) &= ~1u;
                }
              }
            }
          }
        }
        if ((v17 & 4) != 0) {
          uint64_t v17 = (unint64_t)(v19 + 1) | 4;
        }
        else {
          uint64_t v17 = (uint64_t)(v19 + 17);
        }
      }
    }
    uint64_t v14 = *(void *)(v14 + 8);
  }
  while (v14 != v13);
  if (!v100) {
    goto LABEL_56;
  }
  v90 = 0;
  uint64_t v91 = 0;
  LODWORD(v92) = 0;
  v94 = 0;
  uint64_t v95 = 0;
  uint64_t v93 = 0;
  uint64_t v33 = *((unsigned int *)a2 + 2);
  if (!v33) {
    goto LABEL_98;
  }
  uint64_t v34 = *a2;
  uint64_t v35 = *a2 + 8 * v33;
  do
  {
    v36 = *(_DWORD **)v34;
    uint64_t v37 = *(void *)(*(void *)v34 + 40);
    for (uint64_t i = *(void *)(v37 + 48); ; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v39 = i - 24;
      if (!i) {
        uint64_t v39 = 0;
      }
      if (*(unsigned char *)(v39 + 16) != 83) {
        break;
      }
    }
    unsigned int v40 = *(unsigned __int8 *)(i - 8) - 38;
    BOOL v41 = v40 > 0x38;
    uint64_t v42 = (1 << v40) & 0x100060000000001;
    if (v41 || v42 == 0)
    {
      int v44 = v36[5];
      if ((v44 & 0x40000000) != 0)
      {
        v46 = (llvm::Value **)*((void *)v36 - 1);
        uint64_t v45 = v44 & 0x7FFFFFF;
        if (!v45) {
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v45 = v44 & 0x7FFFFFF;
        v46 = (llvm::Value **)&v36[-8 * v45];
        if (!v45) {
          goto LABEL_71;
        }
      }
      v47 = &v46[4 * v45];
      do
      {
        if (v101)
        {
          v48 = *v46;
          uint64_t v49 = ((*v46 >> 4) ^ (*v46 >> 9)) & (v101 - 1);
          v50 = &v99[64 * v49];
          v51 = (llvm::Value *)*((void *)v50 + 3);
          if (*v46 == v51)
          {
LABEL_83:
            if (v50 != &v99[64 * (unint64_t)v101])
            {
              v54 = (llvm::Instruction *)*((void *)v50 + 7);
              uint64_t v55 = sub_1CD883510((uint64_t)&v90, v37, (uint64_t)v54);
              if (v94 == (void *)v55)
              {
                v62 = llvm::Instruction::clone(v54);
                *(void *)&long long v96 = v37;
                *((void *)&v96 + 1) = v54;
                v97 = v62;
                uint64_t v55 = sub_1CD884B80(&v90, &v96, &v97);
              }
              v56 = *(uint64_t ***)(v55 + 16);
              llvm::DbgVariableIntrinsic::location_ops((uint64_t)v56, &v96);
              uint64_t v57 = v96;
              while (v57 != *((void *)&v96 + 1))
              {
                v58 = (unint64_t *)(v57 & 0xFFFFFFFFFFFFFFF8);
                unint64_t v59 = v57 & 0xFFFFFFFFFFFFFFF8;
                if ((v57 & 4) != 0) {
                  unint64_t v59 = *v58;
                }
                if (*(llvm::Value **)(v59 + 128) == v48)
                {
                  llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v56, v48, (llvm::Value *)v36);
                  break;
                }
                uint64_t v60 = (unint64_t)(v58 + 1) | 4;
                v61 = v58 + 17;
                if ((v57 & 4) != 0) {
                  uint64_t v57 = v60;
                }
                else {
                  uint64_t v57 = (uint64_t)v61;
                }
              }
            }
          }
          else
          {
            int v52 = 1;
            while (v51 != (llvm::Value *)-4096)
            {
              int v53 = v49 + v52++;
              uint64_t v49 = v53 & (v101 - 1);
              v50 = &v99[64 * v49];
              v51 = (llvm::Value *)*((void *)v50 + 3);
              if (v48 == v51) {
                goto LABEL_83;
              }
            }
          }
        }
        v46 += 4;
      }
      while (v46 != v47);
    }
LABEL_71:
    v34 += 8;
  }
  while (v34 != v35);
  v63 = (void *)v93;
  for (j = v94; v63 != j; v63 += 3)
  {
    uint64_t v65 = *v63 + 40;
    for (uint64_t k = *(void *)(*v63 + 48); k != v65; uint64_t k = *(void *)(k + 8))
    {
      uint64_t v67 = k - 24;
      if (!k) {
        uint64_t v67 = 0;
      }
      if (*(unsigned char *)(v67 + 16) != 83)
      {
        unsigned int v68 = *(unsigned __int8 *)(k - 8) - 38;
        BOOL v41 = v68 > 0x38;
        uint64_t v69 = (1 << v68) & 0x100060000000001;
        if (v41 || v69 == 0) {
          uint64_t v65 = k;
        }
        else {
          uint64_t v65 = *(void *)(k + 8);
        }
        break;
      }
    }
    uint64_t v71 = v63[2];
    if (v65) {
      uint64_t v72 = v65 - 24;
    }
    else {
      uint64_t v72 = 0;
    }
    uint64_t v73 = *(void *)(v72 + 40);
    *(void *)(v71 + 40) = v73;
    *(_WORD *)(v73 + 18) &= ~0x8000u;
    if ((*(unsigned char *)(v71 + 23) & 0x10) != 0)
    {
      uint64_t v77 = *(void *)(v73 + 56);
      if (v77)
      {
        v78 = *(llvm::ValueSymbolTable **)(v77 + 104);
        if (v78) {
          llvm::ValueSymbolTable::reinsertValue(v78, (llvm::Value *)v71);
        }
      }
    }
    uint64_t v75 = *(void *)(v72 + 24);
    v74 = (void *)(v72 + 24);
    *(void *)(v71 + 24) = v75;
    *(void *)(v71 + 32) = v74;
    uint64_t v76 = v71 + 24;
    *(void *)(v75 + 8) = v76;
    void *v74 = v76;
  }
LABEL_98:
  sub_1CD456CB4(&v90);
LABEL_56:
  if (v103)
  {
    sub_1CC009394((uint64_t)v102);
    MEMORY[0x1D25D9CD0](v102[0], 8);
    char v103 = 0;
  }
LABEL_58:
  sub_1CC4D021C(&v99);
  return MEMORY[0x1D25D9CD0](v99, 8);
}

BOOL llvm::replaceDbgDeclare(llvm *this, llvm::Value *a2, llvm::Value *a3, llvm::DIBuilder *a4, int a5)
{
  uint64_t v9 = (uint64_t *)&v17;
  llvm::FindDbgAddrUses((uint64_t)this, &v17);
  if ((v17 & 4) != 0)
  {
    uint64_t v9 = *(uint64_t **)(v17 & 0xFFFFFFFFFFFFFFF8);
    int v10 = (unint64_t *)&v9[*(unsigned int *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    int v10 = &v17 + (v17 > 7);
  }
  if (v9 != (uint64_t *)v10)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF);
    uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 24);
    uint64_t v14 = llvm::DIExpression::prepend(*(llvm::DIExpression **)(*(void *)(v12 + 64) + 24), a4, a5);
    llvm::DIBuilder::insertDeclare((uint64_t)a3, a2, v13, (uint64_t)v14, *(void *)(v11 + 48), *(void *)(v11 + 40), v11);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v17 >= 8)
  {
    BOOL v15 = 1;
    if ((v17 & 4) != 0 && (v17 & 0xFFFFFFFFFFFFFFF8) != 0) {
      BOOL v15 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8) != 0;
    }
  }
  else
  {
    BOOL v15 = 0;
  }
  sub_1CBFA5CA8(&v17);
  return v15;
}

uint64_t llvm::replaceDbgValueForAlloca(uint64_t ***this, llvm::AllocaInst *a2, llvm::Value *a3, llvm::DIBuilder *a4)
{
  int v4 = (int)a4;
  uint64_t result = llvm::ValueAsMetadata::getIfExists(this);
  if (result)
  {
    uint64_t result = llvm::MetadataAsValue::getIfExists(**this, (unsigned __int8 *)result);
    if (result)
    {
      uint64_t v9 = *(void *)(result + 8);
      while (v9)
      {
        uint64_t v10 = *(void *)(v9 + 24);
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t result = sub_1CC27FAEC(v10);
        if (v10) {
          BOOL v11 = result == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          uint64_t v12 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
          uint64_t v13 = *(llvm::MDNode **)(*(void *)(v12 + 64) + 24);
          if (v13)
          {
            uint64_t v14 = (void *)*((void *)v13 + 3);
            if (((*((void *)v13 + 4) - (void)v14) & 0x7FFFFFFF8) != 0 && *v14 == 6)
            {
              uint64_t v15 = *(void *)(*(void *)(v12 + 32) + 24);
              if (v4) {
                uint64_t v13 = llvm::DIExpression::prepend(v13, 0, v4);
              }
              llvm::DIBuilder::insertDbgValueIntrinsic((uint64_t)a3, a2, v15, (uint64_t)v13, *(void *)(v10 + 48), *(void *)(v10 + 40), v10);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
        }
      }
    }
  }
  return result;
}

void llvm::salvageDebugInfoForDbgValues(llvm::CastInst *a1, uint64_t *a2, uint64_t a3)
{
  v51[4] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    char v3 = 0;
    int v4 = a2;
    uint64_t v39 = &a2[a3];
    do
    {
      uint64_t v5 = *v4;
      int v40 = *(_DWORD *)(*(void *)(*v4 - 32) + 36);
      llvm::DbgVariableIntrinsic::location_ops(*v4, &v44);
      uint64_t v49 = (llvm::ValueAsMetadata **)v51;
      uint64_t v50 = 0x400000000;
      unint64_t v7 = v44;
      uint64_t v8 = v45;
      while (v7 != v45)
      {
        uint64_t v9 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 4) != 0) {
          unint64_t v10 = *v9;
        }
        if (*(llvm::CastInst **)(v10 + 128) == a1) {
          break;
        }
        uint64_t v30 = (unint64_t)(v9 + 1) | 4;
        int v31 = v9 + 17;
        if ((v7 & 4) != 0) {
          unint64_t v7 = v30;
        }
        else {
          unint64_t v7 = (unint64_t)v31;
        }
      }
      appended = *(llvm::MDNode **)(*(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 64) + 24);
      if (appended) {
        BOOL v12 = v7 == v45;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        while (1)
        {
          v46 = v48;
          uint64_t v47 = 0x1000000000;
          unint64_t v13 = v44;
          if (v7 == v44)
          {
            int v14 = 0;
          }
          else
          {
            int v14 = 0;
            do
            {
              ++v14;
              if ((v13 & 4) != 0) {
                unint64_t v13 = (v13 & 0xFFFFFFFFFFFFFFF8) + 12;
              }
              else {
                unint64_t v13 = (v13 & 0xFFFFFFFFFFFFFFF8) + 136;
              }
            }
            while (v7 != v13);
          }
          unint64_t NumLocationOperands = llvm::DIExpression::getNumLocationOperands(appended);
          int v16 = llvm::salvageDebugInfoImpl(a1, NumLocationOperands, (unsigned int *)&v46, (uint64_t)&v49);
          if (v16)
          {
            appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v46, v47, v14, v40 == 58);
            if ((v7 & 4) != 0) {
              unint64_t v7 = (v7 & 0xFFFFFFFFFFFFFFF8) + 12;
            }
            else {
              unint64_t v7 = (v7 & 0xFFFFFFFFFFFFFFF8) + 136;
            }
            uint64_t v8 = v45;
            while (v7 != v45)
            {
              int v24 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
              unint64_t v25 = v7 & 0xFFFFFFFFFFFFFFF8;
              if ((v7 & 4) != 0) {
                unint64_t v25 = *v24;
              }
              if (*(llvm::CastInst **)(v25 + 128) == a1) {
                break;
              }
              uint64_t v26 = (unint64_t)(v24 + 1) | 4;
              unsigned int v27 = v24 + 17;
              if ((v7 & 4) != 0) {
                unint64_t v7 = v26;
              }
              else {
                unint64_t v7 = (unint64_t)v27;
              }
            }
          }
          if (v46 != v48) {
            free(v46);
          }
          if (!v16) {
            break;
          }
          if (!appended || v7 == v8)
          {
            llvm::DbgVariableIntrinsic::replaceVariableLocationOp((uint64_t **)v5, a1, (llvm::Value *)v16);
            uint64_t v29 = (*((void *)appended + 4) - *((void *)appended + 3)) >> 3;
            if (v50 || v29 > 0x80)
            {
              if (*(_DWORD *)(*(void *)(v5 - 32) + 36) == 58
                && v29 <= 0x80
                && ((uint64_t v32 = *(void *)(*(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF)) + 24),
                     *(unsigned char *)v32 != 32)
                  ? (uint64_t v33 = 1)
                  : (uint64_t v33 = *(unsigned int *)(v32 + 32)),
                    v33 + (unint64_t)v50 <= 0x10))
              {
                llvm::DbgVariableIntrinsic::addVariableLocationOps((uint64_t **)v5, v49, v50, (unsigned __int8 *)appended);
              }
              else
              {
                int v34 = *((_DWORD *)a1 + 5);
                if ((v34 & 0x40000000) != 0) {
                  uint64_t v35 = (llvm::UndefValue ***)*((void *)a1 - 1);
                }
                else {
                  uint64_t v35 = (llvm::UndefValue ***)((char *)a1 - 32 * (v34 & 0x7FFFFFF));
                }
                v36 = llvm::UndefValue::get(**v35, v28);
                int v37 = *((_DWORD *)a1 + 5);
                if ((v37 & 0x40000000) != 0) {
                  unsigned int v38 = (llvm::Value **)*((void *)a1 - 1);
                }
                else {
                  unsigned int v38 = (llvm::Value **)((char *)a1 - 32 * (v37 & 0x7FFFFFF));
                }
                llvm::DbgVariableIntrinsic::replaceVariableLocationOp((uint64_t **)v5, *v38, v36);
              }
            }
            else
            {
              sub_1CD4FB76C(v5, (uint64_t)appended);
            }
            int v17 = 0;
            char v3 = 1;
            goto LABEL_20;
          }
        }
      }
      int v17 = 1;
LABEL_20:
      if (v49 != v51) {
        free(v49);
      }
      if (v17) {
        break;
      }
      ++v4;
    }
    while (v4 != v39);
    uint64_t v18 = (uint64_t ***)a2;
    unsigned int v19 = (llvm::UndefValue **)a1;
    if ((v3 & 1) == 0)
    {
      uint64_t v20 = 8 * a3;
      do
      {
        uint64_t v21 = *v18;
        unint64_t v22 = v18 + 1;
        uint64_t v23 = llvm::UndefValue::get(*v19, v6);
        llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v21, a1, v23);
        unsigned int v19 = (llvm::UndefValue **)a1;
        uint64_t v18 = v22;
        v20 -= 8;
      }
      while (v20);
    }
  }
}

uint64_t *llvm::salvageDebugInfoImpl(llvm::CastInst *this, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40);
  uint64_t v8 = (llvm::DataLayout *)(v7 + 272);
  int v9 = *((unsigned __int8 *)this + 16);
  if ((v9 - 79) < 0xFFFFFFF3)
  {
    if (v9 == 62)
    {
      return (uint64_t *)getSalvageOpsForGEP((uint64_t)this, v8, a2, a3, a4);
    }
    else
    {
      if ((v9 - 59) < 0xFFFFFFEE)
      {
        if (v9 == 84)
        {
          uint64_t v10 = *((void *)this - 4);
          if (v10)
          {
            if (!*(unsigned char *)(v10 + 16)
              && *(void *)(v10 + 24) == *((void *)this + 9)
              && (*(unsigned char *)(v10 + 33) & 0x20) != 0
              && *(_DWORD *)(v10 + 36) == 246)
            {
              return (uint64_t *)*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
            }
          }
        }
        return 0;
      }
      return (uint64_t *)getSalvageOpsForBinOp((uint64_t)this, a2, (uint64_t)a3, a4);
    }
  }
  BOOL v12 = (uint64_t *)*((void *)this - 4);
  if (llvm::CastInst::isNoopCast(this, v8)) {
    return v12;
  }
  uint64_t v13 = *(void *)this;
  unsigned int v14 = *(_DWORD *)(*(void *)this + 8);
  if (v14 == 15)
  {
    if ((v14 & 0xFE) == 0x12) {
      unsigned int v14 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
    }
    if (v14 < 0x100) {
      goto LABEL_24;
    }
    unsigned int v15 = v14 >> 8;
    uint64_t v16 = *(unsigned int *)(v7 + 512);
    uint64_t v17 = *(void *)(v7 + 504);
    if (v16)
    {
      uint64_t v17 = *(void *)(v7 + 504);
      unint64_t v18 = *(unsigned int *)(v7 + 512);
      do
      {
        unint64_t v19 = v18 >> 1;
        uint64_t v20 = v17 + 16 * (v18 >> 1);
        unsigned int v21 = *(_DWORD *)(v20 + 8);
        uint64_t v22 = v20 + 16;
        v18 += ~(v18 >> 1);
        if (v21 < v15) {
          uint64_t v17 = v22;
        }
        else {
          unint64_t v18 = v19;
        }
      }
      while (v18);
    }
    if (v17 == *(void *)(v7 + 504) + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_24:
    }
      uint64_t v17 = *(void *)(v7 + 504);
    uint64_t v23 = llvm::IntegerType::get(*(llvm::IntegerType **)v13, (llvm::LLVMContext *)*(unsigned int *)(v17 + 4));
    if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
    {
      BOOL v41 = (llvm::Type *)*(unsigned int *)(v13 + 32);
      if (*(_DWORD *)(v13 + 8) == 19) {
        llvm::ScalableVectorType::get((uint64_t **)v23, v41);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v23, v41);
      }
    }
    unsigned int v14 = *(_DWORD *)(v23 + 8);
    uint64_t v13 = v23;
  }
  if ((v14 & 0xFE) == 0x12) {
    return 0;
  }
  uint64_t result = 0;
  int v24 = *((unsigned __int8 *)this + 16);
  if ((v24 - 66) <= 0xA && ((1 << (v24 - 66)) & 0x607) != 0)
  {
    uint64_t v25 = *v12;
    unsigned int v26 = *(_DWORD *)(*v12 + 8);
    if (v26 == 15)
    {
      if ((v26 & 0xFE) == 0x12) {
        unsigned int v26 = *(_DWORD *)(**(void **)(v25 + 16) + 8);
      }
      if (v26 < 0x100) {
        goto LABEL_43;
      }
      unsigned int v27 = v26 >> 8;
      uint64_t v28 = *(unsigned int *)(v7 + 512);
      uint64_t v29 = *(void *)(v7 + 504);
      if (v28)
      {
        uint64_t v29 = *(void *)(v7 + 504);
        unint64_t v30 = *(unsigned int *)(v7 + 512);
        do
        {
          unint64_t v31 = v30 >> 1;
          uint64_t v32 = v29 + 16 * (v30 >> 1);
          unsigned int v33 = *(_DWORD *)(v32 + 8);
          uint64_t v34 = v32 + 16;
          v30 += ~(v30 >> 1);
          if (v33 < v27) {
            uint64_t v29 = v34;
          }
          else {
            unint64_t v30 = v31;
          }
        }
        while (v30);
      }
      if (v29 == *(void *)(v7 + 504) + 16 * v28 || *(_DWORD *)(v29 + 8) != v27) {
LABEL_43:
      }
        uint64_t v29 = *(void *)(v7 + 504);
      uint64_t v35 = llvm::IntegerType::get(*(llvm::IntegerType **)v25, (llvm::LLVMContext *)*(unsigned int *)(v29 + 4));
      if ((*(_DWORD *)(v25 + 8) & 0xFE) == 0x12)
      {
        uint64_t v42 = (llvm::Type *)*(unsigned int *)(v25 + 32);
        if (*(_DWORD *)(v25 + 8) == 19) {
          llvm::ScalableVectorType::get((uint64_t **)v35, v42);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v35, v42);
        }
      }
      int v24 = *((unsigned __int8 *)this + 16);
      unsigned int v26 = *(_DWORD *)(v35 + 8);
      uint64_t v25 = v35;
    }
    if ((v26 & 0xFE) == 0x12) {
      uint64_t v25 = **(void **)(v25 + 16);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v25);
    if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12) {
      uint64_t v13 = **(void **)(v13 + 16);
    }
    unsigned int v37 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v13);
    if (v24 == 68) {
      uint64_t v38 = 5;
    }
    else {
      uint64_t v38 = 7;
    }
    uint64_t v39 = a3[2];
    if (v39 + 6 > (unint64_t)a3[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v40 = (void *)(*(void *)a3 + 8 * v39);
    void *v40 = 4097;
    v40[1] = PrimitiveSizeInBits;
    v40[2] = v38;
    v40[3] = 4097;
    v40[4] = v37;
    v40[5] = v38;
    a3[2] += 6;
    return v12;
  }
  return result;
}

uint64_t llvm::replaceAllDbgUsesWith(llvm *this, llvm::Instruction *a2, llvm::Value *a3, llvm::Instruction *a4, llvm::DominatorTree *a5)
{
  if ((*((unsigned char *)this + 23) & 8) == 0) {
    return 0;
  }
  int v9 = *(_DWORD **)this;
  uint64_t v10 = *(_DWORD **)a2;
  if (*(void *)this == *(void *)a2
    || (v9[2] & 0xFD) == 0xD
    && (v10[2] & 0xFD) == 0xD
    && (uint64_t v11 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272,
        uint64_t v12 = sub_1CB83544C(v11, (uint64_t)v9),
        int v25 = v13,
        uint64_t v14 = sub_1CB83544C(v11, (uint64_t)v10),
        int v16 = v15,
        !sub_1CBFB72C8(v11, (uint64_t)v9))
    && ((v23 = sub_1CBFB72C8(v11, (uint64_t)v10), v12 == v14) ? (BOOL v24 = v25 == v16) : (BOOL v24 = 0), v24 && !v23))
  {
LABEL_21:
    unsigned int v21 = (uint64_t (*)(uint64_t, uint64_t **))sub_1CD1921A0;
    return sub_1CD18C4BC((uint64_t ***)this, (unsigned __int8 *)a2, a3, a4, v21, (uint64_t)v26);
  }
  if (*((unsigned char *)v9 + 8) != 13 || *((unsigned char *)v10 + 8) != 13) {
    return 0;
  }
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  if (v17 == 1) {
  unint64_t v28 = PrimitiveSizeInBits;
  }
  unint64_t v20 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
  if (v19 == 1) {
  unint64_t v27 = v20;
  }
  if (PrimitiveSizeInBits < v20) {
    goto LABEL_21;
  }
  v26[0] = &v27;
  v26[1] = &v28;
  unsigned int v21 = (uint64_t (*)(uint64_t, uint64_t **))sub_1CD1921BC;
  return sub_1CD18C4BC((uint64_t ***)this, (unsigned __int8 *)a2, a3, a4, v21, (uint64_t)v26);
}

uint64_t sub_1CD18C4BC(uint64_t ***a1, unsigned __int8 *a2, llvm::Instruction *a3, llvm::DominatorTree *a4, uint64_t (*a5)(uint64_t, uint64_t **), uint64_t a6)
{
  v65[1] = *MEMORY[0x1E4F143B8];
  uint64_t v60 = &v62;
  uint64_t v61 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v60, a1);
  uint64_t v12 = v61;
  if (v61)
  {
    uint64_t v55 = (char *)&v59;
    v56 = (char *)&v59;
    uint64_t v57 = 1;
    int v58 = 0;
    if (a2[16] > 0x1Bu)
    {
      uint64_t NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)a1, 0);
      if (!v61)
      {
        char v33 = 0;
        goto LABEL_88;
      }
      uint64_t v14 = (llvm::Instruction *)NextNonDebugInstruction;
      int v53 = (llvm::Value *)a2;
      char v54 = 0;
      int v15 = (llvm::Instruction **)v60;
      int v16 = (llvm::Instruction **)((char *)v60 + 8 * v61);
      while (1)
      {
        uint64_t v17 = *v15;
        if (v14 == a3 && (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(*v15, 0) == a3)
        {
          llvm::Instruction::moveAfter(v17, a3);
          char v54 = 1;
        }
        else if ((llvm::DominatorTree::dominates(a4, a3, v17) & 1) == 0)
        {
          unint64_t v18 = v56;
          uint64_t v19 = HIDWORD(v57);
          if (v56 != v55)
          {
            unsigned int v23 = v57;
LABEL_19:
            if (3 * v23 <= 4 * (HIDWORD(v57) - v58))
            {
              if (v23 >= 0x40) {
                v23 *= 2;
              }
              else {
                unsigned int v23 = 128;
              }
            }
            else if (v23 - HIDWORD(v57) >= v23 >> 3)
            {
              goto LABEL_21;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v55, v23);
            unsigned int v23 = v57;
            unint64_t v18 = v56;
LABEL_21:
            unsigned int v24 = v23 - 1;
            unsigned int v25 = (v23 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            unsigned int v26 = &v18[8 * v25];
            unint64_t v27 = *(llvm::Instruction **)v26;
            if (*(void *)v26 == -1)
            {
              unint64_t v28 = 0;
LABEL_34:
              if (v28) {
                uint64_t v32 = v28;
              }
              else {
                uint64_t v32 = (llvm::Instruction **)v26;
              }
              if (*v32 != v17)
              {
                if (*v32 == (llvm::Instruction *)-2) {
                  --v58;
                }
                else {
                  ++HIDWORD(v57);
                }
                unsigned __int8 *v32 = v17;
              }
            }
            else
            {
              unint64_t v28 = 0;
              int v29 = 1;
              while (v27 != v17)
              {
                if (v28) {
                  BOOL v30 = 0;
                }
                else {
                  BOOL v30 = v27 == (llvm::Instruction *)-2;
                }
                if (v30) {
                  unint64_t v28 = (llvm::Instruction **)v26;
                }
                unsigned int v31 = v25 + v29++;
                unsigned int v25 = v31 & v24;
                unsigned int v26 = &v18[8 * (v31 & v24)];
                unint64_t v27 = *(llvm::Instruction **)v26;
                if (*(void *)v26 == -1) {
                  goto LABEL_34;
                }
              }
            }
            goto LABEL_41;
          }
          if (HIDWORD(v57))
          {
            unint64_t v20 = 0;
            uint64_t v21 = 8 * HIDWORD(v57);
            uint64_t v22 = (llvm::Instruction **)v56;
            while (*v22 != v17)
            {
              if (*v22 == (llvm::Instruction *)-2) {
                unint64_t v20 = v22;
              }
              ++v22;
              v21 -= 8;
              if (!v21)
              {
                if (!v20) {
                  goto LABEL_16;
                }
                *unint64_t v20 = v17;
                --v58;
                goto LABEL_41;
              }
            }
            goto LABEL_41;
          }
LABEL_16:
          unsigned int v23 = v57;
          if (HIDWORD(v57) >= v57) {
            goto LABEL_19;
          }
          ++HIDWORD(v57);
          *(void *)&v56[8 * v19] = v17;
        }
LABEL_41:
        if (++v15 == v16)
        {
          uint64_t v12 = v61;
          char v33 = v54 & 1;
          if (v61) {
            goto LABEL_52;
          }
          goto LABEL_88;
        }
      }
    }
    int v53 = (llvm::Value *)a2;
    char v33 = 0;
LABEL_52:
    uint64_t v34 = (uint64_t ***)v60;
    uint64_t v35 = (uint64_t ***)((char *)v60 + 8 * v12);
    do
    {
      v36 = *v34;
      unsigned int v37 = v55;
      if (v56 == v55)
      {
        int v38 = HIDWORD(v57);
        uint64_t v39 = &v56[8 * HIDWORD(v57)];
        if (HIDWORD(v57))
        {
          uint64_t v40 = 0;
          while (*(uint64_t ***)&v56[v40] != v36)
          {
            v40 += 8;
            if (8 * HIDWORD(v57) == v40) {
              goto LABEL_72;
            }
          }
          uint64_t v39 = &v56[v40];
        }
LABEL_72:
        unsigned int v37 = v56;
      }
      else
      {
        int v41 = v57 - 1;
        unsigned int v42 = (v57 - 1) & ((v36 >> 4) ^ (v36 >> 9));
        uint64_t v39 = &v56[8 * v42];
        v43 = *(uint64_t ***)v39;
        if (*(void *)v39 == -1)
        {
          unint64_t v44 = 0;
LABEL_82:
          if (v44) {
            uint64_t v39 = v44;
          }
          int v38 = HIDWORD(v57);
          if (*(uint64_t ***)v39 != v36) {
            uint64_t v39 = &v56[8 * v57];
          }
        }
        else
        {
          unint64_t v44 = 0;
          int v45 = 1;
          while (v43 != v36)
          {
            if (v44) {
              BOOL v46 = 0;
            }
            else {
              BOOL v46 = v43 == (uint64_t **)-2;
            }
            if (v46) {
              unint64_t v44 = v39;
            }
            unsigned int v47 = v42 + v45++;
            unsigned int v42 = v47 & v41;
            uint64_t v39 = &v56[8 * (v47 & v41)];
            v43 = *(uint64_t ***)v39;
            if (*(void *)v39 == -1) {
              goto LABEL_82;
            }
          }
          int v38 = HIDWORD(v57);
        }
      }
      if (v56 == v37) {
        int v48 = v38;
      }
      else {
        int v48 = v57;
      }
      if (v39 == &v56[8 * v48])
      {
        uint64_t v49 = a5(a6, *v34);
        if (v50)
        {
          uint64_t v51 = v49;
          llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v36, (llvm::Value *)a1, v53);
          sub_1CD4FB76C((uint64_t)v36, v51);
          char v33 = 1;
        }
      }
      ++v34;
    }
    while (v34 != v35);
LABEL_88:
    if (HIDWORD(v57) != v58)
    {
      v63 = v65;
      uint64_t v64 = 0x100000000;
      llvm::findDbgUsers((uint64_t)&v63, a1);
      llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)a1, (uint64_t *)v63, v64);
      if (v63 != v65) {
        free(v63);
      }
      char v33 = 1;
    }
    if (v56 != v55) {
      free(v56);
    }
  }
  else
  {
    char v33 = 0;
  }
  if (v60 != &v62) {
    free(v60);
  }
  return v33 & 1;
}

uint64_t llvm::removeAllNonTerminatorAndEHPadInstructions(llvm *this, llvm::BasicBlock *a2)
{
  char v3 = (llvm *)*((void *)this + 5);
  if (v3 == (llvm *)((char *)this + 40))
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (v3) {
      int v4 = (char *)v3 - 24;
    }
    else {
      int v4 = 0;
    }
    if (v4[16] - 29 >= 0xB) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v4;
    }
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    uint64_t v7 = (char *)(v6 - 24);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v5 != v7)
  {
    do
    {
      uint64_t v8 = *((void *)v5 + 3);
      int v9 = (char *)(v8 - 24);
      if (v8) {
        uint64_t v10 = v8 - 24;
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 8) && *(unsigned char *)(*(void *)v10 + 8) != 12)
      {
        uint64_t v11 = llvm::UndefValue::get(*(llvm::UndefValue **)v10, a2);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, v11, (llvm::Value *)1);
      }
      unsigned int v12 = *(unsigned __int8 *)(v10 + 16) - 38;
      BOOL v13 = v12 > 0x38;
      uint64_t v14 = (1 << v12) & 0x100060000000001;
      BOOL v15 = v13 || v14 == 0;
      if (v15 && *(unsigned char *)(*(void *)v10 + 8) != 12)
      {
        sub_1CBF63B28(v10);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      uint64_t v5 = v9;
      uint64_t v16 = *((void *)this + 6);
      if (v16) {
        uint64_t v17 = (char *)(v16 - 24);
      }
      else {
        uint64_t v17 = 0;
      }
    }
    while (v9 != v17);
  }
  return 0;
}

uint64_t llvm::changeToUnreachable(llvm *this, llvm::Instruction *a2, uint64_t a3, int32x2_t **a4, llvm::MemorySSAUpdater *a5)
{
  int v6 = (int)a2;
  v44[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)this + 5);
  if (a4) {
    llvm::MemorySSAUpdater::changeToUnreachable(a4, this);
  }
  unsigned int v37 = v41;
  int v38 = (llvm::Type **)v41;
  uint64_t v39 = 8;
  int v40 = 0;
  uint64_t v9 = *(void *)(v8 + 40);
  if (v9 != v8 + 40)
  {
    if (v9) {
      uint64_t v10 = v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned char *)(v10 + 16) != 30)
    {
      int v17 = 2;
      switch(*(unsigned char *)(v10 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_71;
        case 0x1F:
          int v17 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_61;
        case 0x20:
        case 0x26:
          int v17 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_61;
        case 0x21:
          goto LABEL_12;
        case 0x24:
          int v17 = *(_WORD *)(v10 + 18) & 1;
          goto LABEL_61;
        case 0x25:
          int v17 = 1;
          goto LABEL_12;
        case 0x27:
          int v17 = *(_DWORD *)(v10 + 80) + 1;
LABEL_61:
          if (!v17) {
            goto LABEL_29;
          }
          goto LABEL_12;
        default:
          goto LABEL_29;
      }
    }
    if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
LABEL_12:
    for (unsigned int i = 0; v17 != i; ++i)
    {
      Successor = (llvm::Type *)llvm::Instruction::getSuccessor((llvm::Instruction *)v10, i);
      llvm::BasicBlock::removePredecessor(Successor, (llvm::BasicBlock *)v8, v6);
      if (a3)
      {
        if (v38 != (llvm::Type **)v37) {
          goto LABEL_27;
        }
        uint64_t v16 = HIDWORD(v39);
        if (HIDWORD(v39))
        {
          BOOL v13 = 0;
          uint64_t v15 = 8 * HIDWORD(v39);
          uint64_t v14 = v38;
          while (*v14 != Successor)
          {
            if (*v14 == (llvm::Type *)-2) {
              BOOL v13 = v14;
            }
            ++v14;
            v15 -= 8;
            if (!v15)
            {
              if (!v13) {
                goto LABEL_25;
              }
              llvm::MDNode *v13 = Successor;
              --v40;
              goto LABEL_14;
            }
          }
          continue;
        }
LABEL_25:
        if (HIDWORD(v39) < v39)
        {
          ++HIDWORD(v39);
          v38[v16] = Successor;
        }
        else
        {
LABEL_27:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v37, Successor);
        }
      }
LABEL_14:
      ;
    }
  }
LABEL_29:
  unint64_t v18 = (char *)operator new(0x40uLL);
  *((_DWORD *)v18 + 5) &= 0x38000000u;
  llvm::UnreachableInst::UnreachableInst((llvm::UnreachableInst *)v18, **(llvm::LLVMContext ***)this, this);
  uint64_t v19 = (llvm::Type *)*((void *)this + 6);
  v36 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v36, (unsigned __int8 *)v19, 2);
  }
  uint64_t v22 = (unsigned __int8 *)*((void *)v18 + 6);
  uint64_t v21 = (llvm::Type **)(v18 + 48);
  unint64_t v20 = v22;
  if (v22) {
    llvm::MetadataTracking::untrack((uint64_t)v21, v20);
  }
  unsigned int v23 = (unsigned __int8 *)v36;
  *uint64_t v21 = v36;
  if (v23)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v36, v23, (uint64_t)v21);
    v36 = 0;
  }
  if ((llvm *)((char *)this + 24) != (llvm *)(v8 + 40))
  {
    if (this == (llvm *)-24) {
      unsigned int v24 = 0;
    }
    else {
      unsigned int v24 = this;
    }
    if (*((void *)v24 + 1))
    {
      unsigned int v25 = llvm::UndefValue::get(*(llvm::UndefValue **)v24, (llvm::Type *)v23);
      llvm::Value::doRAUW(v24, v25, (llvm::Value *)1);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (a3)
  {
    unsigned int v42 = v44;
    uint64_t v43 = 0x800000000;
    if ((HIDWORD(v39) - v40) >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v38 == (llvm::Type **)v37) {
      uint64_t v27 = HIDWORD(v39);
    }
    else {
      uint64_t v27 = v39;
    }
    if (v27)
    {
      uint64_t v28 = 8 * v27;
      int v29 = (unint64_t *)v38;
      while (*v29 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v29;
        v28 -= 8;
        if (!v28)
        {
          unsigned int v31 = v43;
          goto LABEL_68;
        }
      }
    }
    else
    {
      int v29 = (unint64_t *)v38;
    }
    BOOL v30 = (char *)&v38[v27];
    unsigned int v31 = v43;
    if (v29 != (unint64_t *)v30)
    {
      unint64_t v32 = *v29;
LABEL_55:
      if (v31 >= HIDWORD(v43)) {
LABEL_71:
      }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      char v33 = (char *)v42 + 16 * v31;
      *char v33 = v8;
      v33[1] = v32 | 4;
      unsigned int v31 = v43 + 1;
      LODWORD(v43) = v43 + 1;
      uint64_t v34 = v29 + 1;
      while (v34 != (unint64_t *)v30)
      {
        unint64_t v35 = *v34++;
        unint64_t v32 = v35;
        if (v35 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v29 = v34 - 1;
          goto LABEL_55;
        }
      }
    }
LABEL_68:
    llvm::DomTreeUpdater::applyUpdates(a3, (unint64_t *)v42, v31);
    if (v42 != v44) {
      free(v42);
    }
  }
  if (v38 != (llvm::Type **)v37) {
    free(v38);
  }
  return 0;
}

void llvm::removeUnwindEdge(llvm *this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v4 = (llvm *)*((void *)this + 5);
  if (v4 == (llvm *)((char *)this + 40))
  {
    uint64_t v5 = 0;
    int v6 = MEMORY[0x10];
  }
  else
  {
    uint64_t v5 = (llvm *)((char *)v4 - 24);
    BOOL v7 = v4 == 0;
    if (v4) {
      uint64_t v8 = (llvm::BasicBlock **)((char *)v4 - 24);
    }
    else {
      uint64_t v8 = 0;
    }
    unsigned int v9 = *((unsigned __int8 *)v8 + 16) - 40;
    if (v9 >= 0xFFFFFFF5) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 0;
    }
    int v6 = *((unsigned __int8 *)v10 + 16);
    if (v9 < 0xFFFFFFF5) {
      BOOL v7 = 1;
    }
    if (v6 == 33 && !v7)
    {
      llvm::changeToCall(v10, a2, a3);
    }
    if (v6 != 36) {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unsigned int v26 = v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)];
      uint64_t v27 = operator new(0x60uLL);
      v27[13] = v27[13] & 0x38000000 | 1;
      uint64_t v28 = (char *)(v27 + 8);
      *(void *)uint64_t v27 = 0;
      *((void *)v27 + 1) = 0;
      *((void *)v27 + 2) = 0;
      *((void *)v27 + 3) = v27 + 8;
      llvm::CleanupReturnInst::CleanupReturnInst((llvm::CleanupReturnInst *)(v27 + 8), v26, 0, 1u, (llvm::Instruction *)v10);
      if (*((_WORD *)v10 + 9))
      {
        int v29 = (char *)&v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)];
LABEL_53:
        unint64_t v44 = (llvm::Type *)*((void *)v29 + 4);
LABEL_54:
        llvm::Value::takeName((int32x2_t ****)v28, v5);
        int v45 = (unsigned __int8 *)*((void *)v5 + 6);
        int v52 = v45;
        if (v45) {
          llvm::MetadataTracking::track((uint64_t)&v52, v45, 2);
        }
        BOOL v46 = (unsigned __int8 *)*((void *)v28 + 6);
        if (!v46)
        {
LABEL_57:
          unsigned int v47 = v52;
          *((void *)v28 + 6) = v52;
          if (v47)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v52, v47, (uint64_t)(v28 + 48));
            int v52 = 0;
          }
          llvm::BasicBlock::removePredecessor(v44, this, 0);
          llvm::Value::doRAUW(v5, (llvm::Value *)v28, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v48 = *v46;
        if ((v48 - 4) > 0x1E)
        {
          if ((v48 - 3) >= 0xFFFFFFFE) {
            uint64_t v51 = *((void *)v28 + 6);
          }
          else {
            uint64_t v51 = 0;
          }
          if ((v48 - 3) < 0xFFFFFFFE)
          {
            if (v48 == 3) {
              *((void *)v46 + 1) = 0;
            }
            goto LABEL_57;
          }
          unint64_t v50 = v51 + 8;
        }
        else
        {
          if ((v46[1] & 0x7F) != 2 && !*((_DWORD *)v46 + 3)) {
            goto LABEL_57;
          }
          uint64_t v49 = *((void *)v46 + 2);
          if ((v49 & 4) == 0) {
            goto LABEL_57;
          }
          unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
          if (!v50) {
            goto LABEL_57;
          }
        }
        v53[0] = v28 + 48;
        sub_1CC5FA668(v50 + 16, v53);
        goto LABEL_57;
      }
LABEL_51:
      unint64_t v44 = 0;
      goto LABEL_54;
    }
  }
  if (v6 == 38) {
    uint64_t v11 = v5;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *((_DWORD *)v11 + 5);
  if ((v12 & 0x40000000) != 0)
  {
    uint64_t v14 = (llvm::Type ***)*((void *)v11 - 1);
    int v13 = v12 & 0x7FFFFFF;
  }
  else
  {
    int v13 = v12 & 0x7FFFFFF;
    uint64_t v14 = (llvm::Type ***)((char *)v11 - 32 * (v12 & 0x7FFFFFF));
  }
  uint64_t v15 = *v14;
  if (*((_WORD *)v11 + 9)) {
    int v16 = -2;
  }
  else {
    int v16 = -1;
  }
  int v17 = v16 + v13;
  if ((v12 & 0x10000000) != 0)
  {
    uint64_t v18 = ***(void ***)v11;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
      unsigned int v23 = *v22;
      if (*v22 != v11)
      {
        int v24 = 1;
        do
        {
          if (v23 == (llvm::Value *)-4096) {
            goto LABEL_37;
          }
          int v25 = v21 + v24++;
          uint64_t v21 = v25 & (v20 - 1);
          unsigned int v23 = *(llvm::Value **)(v19 + 16 * v21);
        }
        while (v23 != v11);
        uint64_t v22 = (llvm::Value **)(v19 + 16 * v21);
      }
    }
    else
    {
LABEL_37:
      uint64_t v22 = (llvm::Value **)(v19 + 16 * v20);
    }
    BOOL v30 = v22[1];
    char v33 = *(const char **)v30;
    unsigned int v31 = (char *)v30 + 16;
    unint64_t v32 = v33;
  }
  else
  {
    unint64_t v32 = 0;
    unsigned int v31 = &byte_1CFBCE98E;
  }
  __int16 v54 = 261;
  v53[0] = v31;
  v53[1] = v32;
  uint64_t v34 = operator new(0x48uLL);
  uint64_t v28 = (char *)(v34 + 2);
  v34[7] = v34[7] & 0x38000000 | 0x40000000;
  *(void *)uint64_t v34 = 0;
  llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v34 + 2), v15, 0, v17, v53, v11);
  int v35 = *((_DWORD *)v11 + 5);
  if ((v35 & 0x40000000) != 0)
  {
    unsigned int v37 = (void *)*((void *)v11 - 1);
    uint64_t v36 = v35 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v36 = v35 & 0x7FFFFFF;
    unsigned int v37 = (void *)((char *)v11 - 32 * v36);
  }
  int v38 = *((_WORD *)v11 + 9) & 1;
  uint64_t v39 = 1;
  if (*((_WORD *)v11 + 9)) {
    uint64_t v39 = 2;
  }
  if (v39 != v36)
  {
    int v40 = (llvm::BasicBlock **)&v37[4 * v39];
    uint64_t v41 = 32 * v36 - 32 * v39;
    do
    {
      unsigned int v42 = *v40;
      v40 += 4;
      llvm::CatchSwitchInst::addHandler((llvm::CatchSwitchInst *)v28, v42);
      v41 -= 32;
    }
    while (v41);
    int v38 = *((_WORD *)v11 + 9) & 1;
  }
  if (v38)
  {
    int v43 = *((_DWORD *)v11 + 5);
    if ((v43 & 0x40000000) != 0) {
      int v29 = (char *)*((void *)v11 - 1);
    }
    else {
      int v29 = (char *)v11 - 32 * (v43 & 0x7FFFFFF);
    }
    goto LABEL_53;
  }
  goto LABEL_51;
}

uint64_t llvm::removeUnreachableBlocks(llvm *this, llvm::Function *a2, llvm::DomTreeUpdater *a3, llvm::MemorySSAUpdater *a4, llvm::MemorySSAUpdater *a5)
{
  int v6 = a2;
  char v7 = 0;
  v234[4] = *(llvm::Instruction **)MEMORY[0x1E4F143B8];
  v213 = (char *)v217;
  v214 = (char *)v217;
  int v216 = 0;
  v227 = (char *)v228 + 8;
  DWORD1(v228[0]) = 128;
  uint64_t v8 = *((void *)this + 10);
  if (v8) {
    uint64_t v9 = v8 - 24;
  }
  else {
    uint64_t v9 = 0;
  }
  *((void *)&v228[0] + 1) = v9;
  uint64_t v215 = 0x100000010;
  v217[0] = v9;
  uint64_t v10 = -2;
  int64x2_t v212 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  unsigned int v11 = 1;
  do
  {
    int v12 = (void *)*((void *)v227 + v11 - 1);
    LODWORD(v228[0]) = v11 - 1;
    int v13 = v12 + 5;
    for (unsigned int i = (void *)v12[6]; ; unsigned int i = (void *)i[1])
    {
      if (i == v13) {
        goto LABEL_128;
      }
      uint64_t v15 = (llvm *)(i - 3);
      uint64_t v16 = i ? (uint64_t)(i - 3) : 0;
      int v17 = *(unsigned __int8 *)(v16 + 16);
      uint64_t v18 = v17 == 84 ? v16 : 0;
      if (i && v17 == 84) {
        break;
      }
      if (v17 != 61) {
        uint64_t v16 = 0;
      }
      if (i && v17 == 61 && (*(_WORD *)(v16 + 18) & 1) == 0)
      {
        int v24 = *(unsigned __int8 **)(v16 - 32);
        int v25 = v24[16];
        if ((v25 - 11) < 2) {
          goto LABEL_127;
        }
        if (v25 == 19)
        {
          uint64_t v26 = *(void *)v24;
          unsigned int v27 = *(_DWORD *)(*(void *)v24 + 8);
          if ((v27 & 0xFE) == 0x12) {
            unsigned int v27 = *(_DWORD *)(**(void **)(v26 + 16) + 8);
          }
          uint64_t v28 = *(void *)(*(void *)(v16 + 40) + 56);
          if (v28 && (uint64_t v29 = *(void *)(v28 + 112)) != 0)
          {
            if ((*(unsigned char *)(v29 + 17) & 1) == 0 && v27 <= 0xFF) {
              goto LABEL_127;
            }
          }
          else if (v27 < 0x100)
          {
            goto LABEL_127;
          }
        }
      }
LABEL_75:
      ;
    }
    uint64_t v19 = *(void *)(v18 - 32);
    int v20 = *(unsigned __int8 *)(v19 + 16);
    if (v19) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 0;
    }
    if (!v21)
    {
      if (v20 == 19)
      {
        uint64_t v22 = *(void *)(*(void *)(v18 + 40) + 56);
        if (!v22) {
          goto LABEL_127;
        }
        uint64_t v23 = *(void *)(v22 + 112);
        if (!v23 || (*(unsigned char *)(v23 + 17) & 1) == 0) {
          goto LABEL_127;
        }
      }
      else if ((v20 - 11) < 2)
      {
        goto LABEL_127;
      }
      goto LABEL_71;
    }
    int v30 = *(_DWORD *)(v19 + 36);
    if (v30 == 125)
    {
      uint64_t v36 = *(void *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
      unsigned int v37 = *(unsigned __int8 *)(v36 + 16);
      if (v36) {
        BOOL v38 = v37 > 0x14;
      }
      else {
        BOOL v38 = 1;
      }
      if (v38) {
        goto LABEL_71;
      }
      if (v37 == 16)
      {
        uint64_t v39 = *(unsigned int *)(v36 + 32);
        if (v39 < 0x41)
        {
          if (*(void *)(v36 + 24)) {
            goto LABEL_63;
          }
LABEL_64:
          uint64_t v40 = *(void *)(v18 + 32);
          uint64_t v15 = (llvm *)(v40 - 24);
          if (v40) {
            BOOL v41 = v40 == *(void *)(v18 + 40) + 40;
          }
          else {
            BOOL v41 = 1;
          }
          if (v41) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = v40 - 24;
          }
          if (*(unsigned char *)(v42 + 16) != 35) {
            goto LABEL_127;
          }
          goto LABEL_71;
        }
        int v47 = 0;
        int64_t v48 = (unint64_t)(v39 + 63) >> 6;
        do
        {
          BOOL v33 = v48-- < 1;
          if (v33) {
            break;
          }
          unint64_t v49 = *(void *)(*(void *)(v36 + 24) + 8 * v48);
          v47 += __clz(v49);
        }
        while (!v49);
        int v50 = v39 | 0xFFFFFFC0;
        if ((v39 & 0x3F) == 0) {
          int v50 = 0;
        }
        if (v47 + v50 == v39) {
          goto LABEL_64;
        }
      }
      else if (v37 == 17)
      {
        if (sub_1CB844168(*(void *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF)), 0.0)) {
          goto LABEL_64;
        }
      }
      else if (v37 - 18 < 3 || v37 == 13)
      {
        goto LABEL_64;
      }
LABEL_63:
      if ((sub_1CC03F414((uint64_t)&v222, (llvm::Constant *)v36) & 1) == 0) {
        goto LABEL_71;
      }
      goto LABEL_64;
    }
    if (v30 == 7)
    {
      uint64_t v31 = *(void *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
      unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
      if (v31) {
        BOOL v33 = v32 > 0x14;
      }
      else {
        BOOL v33 = 1;
      }
      if (!v33)
      {
        if (v32 == 16)
        {
          uint64_t v45 = *(unsigned int *)(v31 + 32);
          if (v45 >= 0x41)
          {
            int v52 = 0;
            int64_t v53 = (unint64_t)(v45 + 63) >> 6;
            do
            {
              BOOL v33 = v53-- < 1;
              if (v33) {
                break;
              }
              unint64_t v54 = *(void *)(*(void *)(v31 + 24) + 8 * v53);
              v52 += __clz(v54);
            }
            while (!v54);
            int v55 = v45 | 0xFFFFFFC0;
            if ((v45 & 0x3F) == 0) {
              int v55 = 0;
            }
            if (v52 + v55 == v45) {
              goto LABEL_126;
            }
          }
          else if (!*(void *)(v31 + 24))
          {
            goto LABEL_126;
          }
        }
        else if (v32 == 17)
        {
          if (sub_1CB844168(*(void *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF)), 0.0)) {
            goto LABEL_126;
          }
        }
        else if (v32 - 18 < 3 || v32 == 13)
        {
          goto LABEL_126;
        }
        if (sub_1CC03F414((uint64_t)&v222, (llvm::Constant *)v31)) {
          goto LABEL_126;
        }
        LOBYTE(v32) = *(unsigned char *)(v31 + 16);
      }
      unsigned int v34 = (v32 - 11);
      if (v34 < 2) {
        goto LABEL_126;
      }
      if (v34 >= 0xFD)
      {
        uint64_t v5 = (uint64_t)v233 + 8;
        v222 = v226;
        uint64_t v223 = (uint64_t)v226;
        uint64_t v224 = 8;
        LODWORD(v225) = 0;
        uint64_t v232 = (uint64_t)v233 + 8;
        *(void *)&v233[0] = 0x800000000;
        v234[0] = (llvm::Instruction *)&v222;
        v234[1] = (llvm::Instruction *)&v232;
        BOOL v35 = 0;
        if (sub_1CC04C108(v234, v31))
        {
          while (1)
          {
            BOOL v35 = LODWORD(v233[0]) == 0;
            if (!LODWORD(v233[0])) {
              break;
            }
            uint64_t v51 = *(void *)(v232 + 8 * LODWORD(v233[0]) - 8);
            --LODWORD(v233[0]);
            uint64_t v5 = (uint64_t)v233 + 8;
            if ((sub_1CC04C108(v234, v51) & 1) == 0) {
              goto LABEL_48;
            }
          }
          uint64_t v5 = (uint64_t)v233 + 8;
        }
LABEL_48:
        if ((_OWORD *)v232 != (_OWORD *)((char *)v233 + 8)) {
          free((void *)v232);
        }
        if ((void *)v223 != v222) {
          free((void *)v223);
        }
        if (v35)
        {
LABEL_126:
          uint64_t v15 = (llvm *)v18;
LABEL_127:
          llvm::changeToUnreachable(v15, 0, (uint64_t)v6, 0, a5);
          char v7 = 1;
          goto LABEL_128;
        }
      }
    }
LABEL_71:
    uint64_t v43 = *(void *)(v18 + 64);
    if ((!v43 || (*(unsigned char *)(v43 + 16) & 1) == 0) && !llvm::CallBase::hasFnAttrOnCalledFunction(v18, 32)
      || (*(_WORD *)(v18 + 18) & 3) == 2)
    {
      goto LABEL_75;
    }
    uint64_t v56 = *(void *)(v18 + 32);
    uint64_t v15 = (llvm *)(v56 - 24);
    if (v56) {
      BOOL v57 = v56 == *(void *)(v18 + 40) + 40;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = v56 - 24;
    }
    if (*(unsigned char *)(v58 + 16) != 35) {
      goto LABEL_127;
    }
LABEL_128:
    uint64_t v59 = (void *)*v13;
    if ((void *)*v13 == v13) {
      goto LABEL_260;
    }
    BOOL v60 = v59 == 0;
    if (v59) {
      uint64_t v61 = (uint64_t)(v59 - 3);
    }
    else {
      uint64_t v61 = 0;
    }
    unsigned int v62 = *(unsigned __int8 *)(v61 + 16) - 40;
    if (v62 >= 0xFFFFFFF5) {
      uint64_t v63 = v61;
    }
    else {
      uint64_t v63 = 0;
    }
    int v64 = *(unsigned __int8 *)(v63 + 16);
    char v65 = v62 < 0xFFFFFFF5 || v60;
    if (v64 == 33 && (v65 & 1) == 0)
    {
      int v66 = *(unsigned __int8 *)(*(void *)(v63 - 32) + 16);
      if (v66 == 19)
      {
        uint64_t v67 = v12[7];
        if (!v67) {
          goto LABEL_144;
        }
        uint64_t v68 = *(void *)(v67 + 112);
        if (!v68 || (*(unsigned char *)(v68 + 17) & 1) == 0) {
          goto LABEL_144;
        }
      }
      else if ((v66 - 11) <= 1)
      {
LABEL_144:
        llvm::changeToUnreachable((llvm *)v63, 0, (uint64_t)v6, 0, a5);
        char v7 = 1;
        goto LABEL_260;
      }
      uint64_t v76 = *(void *)(v63 + 64);
      if (v76 && (*(unsigned char *)(v76 + 16) & 1) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v63, 32))
      {
        uint64_t v77 = *(uint64_t ****)(v63 - 96);
        v78 = v77[6];
        uint64_t v79 = v78 ? (uint64_t)(v78 - 3) : 0;
        if (*(unsigned char *)(v79 + 16) != 35)
        {
          llvm::BasicBlock::removePredecessor(*(llvm::Type **)(v63 - 96), *(llvm::BasicBlock **)(v63 + 40), 0);
          if ((*((unsigned char *)v77 + 23) & 0x10) != 0)
          {
            uint64_t v80 = ***v77;
            uint64_t v81 = *(void *)(v80 + 152);
            uint64_t v82 = *(unsigned int *)(v80 + 168);
            if (v82)
            {
              LODWORD(v83) = (v82 - 1) & ((v77 >> 4) ^ (v77 >> 9));
              unsigned int v84 = (uint64_t ****)(v81 + 16 * v83);
              uint64_t v85 = *v84;
              if (*v84 != v77)
              {
                int v86 = 1;
                do
                {
                  if (v85 == (uint64_t ***)-4096) {
                    goto LABEL_254;
                  }
                  int v87 = v83 + v86++;
                  uint64_t v83 = v87 & (v82 - 1);
                  uint64_t v85 = *(uint64_t ****)(v81 + 16 * v83);
                }
                while (v85 != v77);
                unsigned int v84 = (uint64_t ****)(v81 + 16 * v83);
              }
            }
            else
            {
LABEL_254:
              unsigned int v84 = (uint64_t ****)(v81 + 16 * v82);
            }
            v128 = v84[1];
            uint64_t v131 = (uint64_t)*v128;
            v130 = (char *)(v128 + 2);
            uint64_t v129 = v131;
          }
          else
          {
            uint64_t v129 = 0;
            v130 = &byte_1CFBCE98E;
          }
          v226[0] = 773;
          v222 = v130;
          uint64_t v223 = v129;
          uint64_t v224 = (uint64_t)".unreachable";
          operator new();
        }
      }
      uint64_t v132 = *(void *)(v63 + 64);
      if ((!v132 || (*(unsigned char *)(v132 + 16) & 0x20) == 0)
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v63, 37)
        || !llvm::canSimplifyInvokeNoUnwind(this, a2))
      {
        goto LABEL_260;
      }
      if (!*(void *)(v63 + 8))
      {
        uint64_t v156 = *(void *)(v63 + 64);
        if (!v156 || (*(unsigned char *)(v156 + 17) & 0x30) == 0)
        {
          int v157 = *(_DWORD *)(v63 + 20);
          if (v157 < 0)
          {
            uint64_t v173 = v63 - 32 * (v157 & 0x7FFFFFF);
            uint64_t v176 = *(void *)(v173 - 8);
            uint64_t v174 = v173 - 8;
            uint64_t v175 = v176;
            if (v176)
            {
              uint64_t v177 = -v175;
              do
              {
                unsigned int v178 = *(_DWORD *)(*(void *)(v174 + v177) + 8);
                if (v178 >= 2 && v178 != 7) {
                  goto LABEL_353;
                }
                v177 += 16;
              }
              while (v177);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v63, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v63, 44))
          {
            goto LABEL_353;
          }
        }
        uint64_t v158 = *(void *)(v63 - 96);
        v159 = *(llvm::Type **)(v63 - 64);
        v160 = (char *)operator new(0x60uLL);
        *((_DWORD *)v160 + 13) = *((_DWORD *)v160 + 13) & 0x38000000 | 1;
        *((void *)v160 + 1) = 0;
        *((void *)v160 + 2) = 0;
        *(void *)v160 = 0;
        *((void *)v160 + 4) = ***(void ***)v158 + 1576;
        *((void *)v160 + 3) = v160 + 32;
        *((void *)v160 + 5) = 0;
        v160[48] = 30;
        v160[49] = 0;
        *((_WORD *)v160 + 25) = 0;
        *((_DWORD *)v160 + 13) = 1;
        *(_OWORD *)(v160 + 56) = 0u;
        v161 = v160 + 56;
        *(_OWORD *)(v160 + 72) = 0u;
        *((_DWORD *)v160 + 22) = 0;
        uint64_t v162 = *(void *)(v63 + 40);
        v163 = (uint64_t *)(v63 + 24);
        *((void *)v160 + 9) = v162;
        *(_WORD *)(v162 + 18) &= ~0x8000u;
        if ((v160[55] & 0x10) != 0
          && (uint64_t v168 = *(void *)(v162 + 56)) != 0
          && (v169 = *(llvm::ValueSymbolTable **)(v168 + 104)) != 0)
        {
          llvm::ValueSymbolTable::reinsertValue(v169, (llvm::Value *)(v160 + 32));
          uint64_t v170 = *(void *)v160;
          uint64_t v171 = *v163;
          *((void *)v160 + 7) = *v163;
          *((void *)v160 + 8) = v163;
          *(void *)(v171 + 8) = v161;
          uint64_t *v163 = (uint64_t)v161;
          if (v170)
          {
            **((void **)v160 + 2) = *((void *)v160 + 1);
            uint64_t v172 = *((void *)v160 + 1);
            if (v172) {
              *(void *)(v172 + 16) = *((void *)v160 + 2);
            }
          }
        }
        else
        {
          uint64_t v164 = *v163;
          *((void *)v160 + 7) = *v163;
          *((void *)v160 + 8) = v163;
          *(void *)(v164 + 8) = v161;
          uint64_t *v163 = (uint64_t)v161;
        }
        *(void *)v160 = v158;
        uint64_t v167 = *(void *)(v158 + 8);
        v166 = (void *)(v158 + 8);
        uint64_t v165 = v167;
        *((void *)v160 + 1) = v167;
        if (v167) {
          *(void *)(v165 + 16) = v160 + 8;
        }
        *((void *)v160 + 2) = v166;
        void *v166 = v160;
        llvm::BasicBlock::removePredecessor(v159, *(llvm::BasicBlock **)(v63 + 40), 0);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
LABEL_353:
      llvm::changeToCall((llvm::BasicBlock **)v63, v6, v155);
    }
    if (v64 == 38) {
      char v69 = v65;
    }
    else {
      char v69 = 1;
    }
    if (v69) {
      goto LABEL_260;
    }
    v222 = (void *)1;
    for (uint64_t j = 8; j != 136; j += 16)
      *(void **)((char *)&v222 + j) = (void *)-4096;
    uint64_t v232 = 1;
    v233[0] = v212;
    v233[1] = v212;
    int v71 = *(_DWORD *)(v63 + 20);
    if ((v71 & 0x40000000) != 0)
    {
      uint64_t v73 = *(void *)(v63 - 8);
      uint64_t v88 = 64;
      if ((*(_WORD *)(v63 + 18) & 1) == 0) {
        uint64_t v88 = 32;
      }
      uint64_t v75 = (uint64_t *)(v73 + v88);
      uint64_t v72 = v71 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v72 = v71 & 0x7FFFFFF;
      uint64_t v73 = v63 - 32 * v72;
      uint64_t v74 = 64;
      if ((*(_WORD *)(v63 + 18) & 1) == 0) {
        uint64_t v74 = 32;
      }
      uint64_t v75 = (uint64_t *)(v73 + v74);
    }
    int v89 = (uint64_t *)(v73 + 32 * v72);
    while (2)
    {
      if (v75 != v89)
      {
        uint64_t v219 = 0;
        uint64_t v90 = *v75;
        uint64_t v219 = *v75;
        if (v6)
        {
          uint64_t v95 = sub_1CD88474C(&v222, &v219);
          ++*((_DWORD *)v95 + 2);
          uint64_t v90 = v219;
        }
        uint64_t v91 = v90 + 40;
        for (uint64_t k = *(void *)(v90 + 48); k != v91; uint64_t k = *(void *)(k + 8))
        {
          uint64_t v93 = (llvm::Instruction *)(k - 24);
          if (k) {
            uint64_t v94 = k - 24;
          }
          else {
            uint64_t v94 = 0;
          }
          if (*(unsigned char *)(v94 + 16) != 83) {
            goto LABEL_185;
          }
        }
        uint64_t v93 = 0;
LABEL_185:
        v218[0] = v93;
        v220 = 0;
        if (sub_1CD19162C((uint64_t)&v232, v218, &v220))
        {
          if (v6)
          {
            unsigned int v101 = sub_1CD88474C(&v222, &v219);
            --*((_DWORD *)v101 + 2);
          }
          llvm::CatchSwitchInst::removeHandler(v63, v75);
          v75 -= 4;
          v89 -= 4;
          char v7 = 1;
        }
        else
        {
          long long v96 = v220;
          v221 = v220;
          int v97 = v232;
          uint64_t v5 = DWORD2(v233[0]);
          unsigned int v98 = v232 >> 1;
          int v99 = v232 & 1;
          if (v232) {
            unsigned int v100 = 4;
          }
          else {
            unsigned int v100 = DWORD2(v233[0]);
          }
          if (4 * v98 + 4 >= 3 * v100)
          {
            v100 *= 2;
          }
          else if (v100 + ~v98 - HIDWORD(v232) > v100 >> 3)
          {
            goto LABEL_191;
          }
          if (v100 >= 5)
          {
            unint64_t v102 = (v100 - 1) | ((unint64_t)(v100 - 1) >> 1);
            unint64_t v103 = v102 | (v102 >> 2) | ((v102 | (v102 >> 2)) >> 4);
            int v104 = ((v103 | (v103 >> 8)) >> 16) | v103 | (v103 >> 8);
            if ((v104 + 1) > 0x40) {
              unsigned int v100 = v104 + 1;
            }
            else {
              unsigned int v100 = 64;
            }
          }
          if (v232)
          {
            uint64_t v5 = (uint64_t)v234;
            for (uint64_t m = 8; m != 40; m += 8)
            {
              uint64_t v106 = *(uint64_t *)((char *)&v232 + m);
              if ((v106 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                *(void *)uint64_t v5 = v106;
                v5 += 8;
              }
            }
            if (v100 > 4)
            {
              LODWORD(v232) = v232 & 0xFFFFFFFE;
              uint64_t v209 = v100;
              *(void *)&v233[0] = operator new(8 * v100, (std::align_val_t)8uLL);
              *((void *)&v233[0] + 1) = v209;
            }
            sub_1CD191778((uint64_t)&v232, v234, (llvm::Instruction **)v5);
          }
          else
          {
            v208 = *(llvm::Instruction ***)&v233[0];
            if (v100 > 4)
            {
              uint64_t v206 = v100;
              *(void *)&v233[0] = operator new(8 * v100, (std::align_val_t)8uLL);
              *((void *)&v233[0] + 1) = v206;
            }
            else
            {
              LODWORD(v232) = v232 | 1;
            }
            v107 = &v208[v5];
            uint64_t v5 = (uint64_t)v208;
            sub_1CD191778((uint64_t)&v232, v208, v107);
            MEMORY[0x1D25D9CD0](v208, 8);
          }
          sub_1CD19162C((uint64_t)&v232, v218, &v221);
          int v97 = v232;
          long long v96 = v221;
          int v99 = v232 & 1;
LABEL_191:
          LODWORD(v232) = ((v97 & 0xFFFFFFFE) + 2) | v99;
          if (*v96 != (const llvm::Instruction *)-4096) {
            --HIDWORD(v232);
          }
          *long long v96 = v93;
        }
        v75 += 4;
        continue;
      }
      break;
    }
    if (v6)
    {
      v108 = sub_1CD461934((int *)&v222);
      v110 = &v223;
      if ((v222 & 1) == 0) {
        v110 = (uint64_t *)v223;
      }
      unsigned int v111 = v224;
      if (v222) {
        unsigned int v111 = 8;
      }
      v112 = (int *)&v110[2 * v111];
      if (v112 == v108)
      {
        v117 = 0;
        v116 = 0;
      }
      else
      {
        v113 = v108;
        v114 = v109;
        v115 = 0;
        v116 = 0;
        v117 = 0;
        v207 = v112;
        v204 = v6;
        do
        {
          if (!v113[2])
          {
            uint64_t v118 = *(void *)v113 | 4;
            if (v116 >= v115)
            {
              uint64_t v5 = ((char *)v116 - (char *)v117) >> 4;
              unint64_t v119 = v5 + 1;
              if ((unint64_t)(v5 + 1) >> 60) {
                abort();
              }
              unint64_t v120 = (char *)v115 - (char *)v117;
              unint64_t v121 = v115 - v117;
              if (v121 > v119) {
                unint64_t v119 = v121;
              }
              if (v120 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v122 = v119;
              }
              if (v122)
              {
                if (v122 >> 60) {
                  sub_1CB833614();
                }
                uint64_t v123 = *(void *)v113 | 4;
                unint64_t v210 = v122;
                v124 = (char *)operator new(16 * v122);
                unint64_t v122 = v210;
                uint64_t v118 = v123;
                int v6 = v204;
              }
              else
              {
                v124 = 0;
              }
              v125 = &v124[16 * v5];
              *(void *)v125 = v12;
              *((void *)v125 + 1) = v118;
              if (v116 == v117)
              {
                v127 = v116;
                v117 = (unint64_t *)&v124[16 * v5];
              }
              else
              {
                v126 = (unint64_t *)&v124[16 * v5];
                do
                {
                  *((_OWORD *)v126 - 1) = *((_OWORD *)v116 - 1);
                  v126 -= 2;
                  v116 -= 2;
                }
                while (v116 != v117);
                v127 = v117;
                v117 = v126;
              }
              v115 = (unint64_t *)&v124[16 * v122];
              v116 = (unint64_t *)(v125 + 16);
              if (v127)
              {
                uint64_t v5 = (uint64_t)&v124[16 * v122];
                operator delete(v127);
                v115 = (unint64_t *)v5;
              }
              v112 = v207;
            }
            else
            {
              unint64_t *v116 = (unint64_t)v12;
              v116[1] = v118;
              v116 += 2;
            }
          }
          while (1)
          {
            v113 += 4;
            if (v113 == v114) {
              break;
            }
            if ((*(void *)v113 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_252;
            }
          }
          v113 = v114;
LABEL_252:
          ;
        }
        while (v113 != v112);
      }
      llvm::DomTreeUpdater::applyUpdates((uint64_t)v6, v117, ((char *)v116 - (char *)v117) >> 4);
      if (v117) {
        operator delete(v117);
      }
    }
    if ((v232 & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)&v233[0], 8, a3, a4);
    }
    if ((v222 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v223, 8, a3, a4);
    }
LABEL_260:
    char v133 = llvm::ConstantFoldTerminator((llvm::BasicBlock *)v12, 1, 0, (uint64_t)v6);
    v134 = (void *)v12[5];
    if (v134 != v13)
    {
      if (v134) {
        v135 = v134 - 3;
      }
      else {
        v135 = 0;
      }
      int v136 = v135[16];
      if (v136 != 30)
      {
        int v154 = 2;
        switch(v135[16])
        {
          case 0x1E:
            __break(1u);
            goto LABEL_446;
          case 0x1F:
            int v154 = (*((_DWORD *)v135 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_317;
          case 0x20:
          case 0x26:
            int v154 = (*((_DWORD *)v135 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_317;
          case 0x21:
            goto LABEL_269;
          case 0x24:
            int v154 = *((_WORD *)v135 + 9) & 1;
            goto LABEL_317;
          case 0x25:
            int v154 = 1;
            goto LABEL_269;
          case 0x27:
            int v154 = *((_DWORD *)v135 + 20) + 1;
LABEL_317:
            if (!v154) {
              goto LABEL_314;
            }
            goto LABEL_269;
          default:
            goto LABEL_314;
        }
      }
      if ((*((_DWORD *)v135 + 5) & 0x7FFFFFF) == 3) {
        int v154 = 2;
      }
      else {
        int v154 = 1;
      }
LABEL_269:
      unsigned int v137 = 0;
      while (1)
      {
        uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v135, v137);
        uint64_t v139 = Successor;
        v140 = v214;
        uint64_t v141 = HIDWORD(v215);
        if (v214 == v213)
        {
          if (HIDWORD(v215))
          {
            v142 = 0;
            uint64_t v143 = 8 * HIDWORD(v215);
            v144 = (uint64_t *)v214;
            while (*v144 != Successor)
            {
              if (*v144 == -2) {
                v142 = v144;
              }
              ++v144;
              v143 -= 8;
              if (!v143)
              {
                if (!v142) {
                  goto LABEL_278;
                }
                uint64_t *v142 = Successor;
                --v216;
                goto LABEL_302;
              }
            }
            goto LABEL_304;
          }
LABEL_278:
          a2 = (llvm::Function *)v215;
          if (HIDWORD(v215) < v215)
          {
            ++HIDWORD(v215);
            *(void *)&v214[8 * v141] = Successor;
            goto LABEL_302;
          }
        }
        else
        {
          a2 = (llvm::Function *)v215;
        }
        if (3 * (int)a2 <= (4 * (HIDWORD(v215) - v216))) {
          break;
        }
        if ((int)a2 - HIDWORD(v215) < a2 >> 3) {
          goto LABEL_311;
        }
LABEL_283:
        int v145 = a2 - 1;
        unsigned int v146 = (a2 - 1) & ((v139 >> 4) ^ (v139 >> 9));
        v147 = &v140[8 * v146];
        uint64_t v148 = *(void *)v147;
        if (*(void *)v147 != -1)
        {
          v149 = 0;
          int v150 = 1;
          while (v148 != v139)
          {
            if (v149) {
              BOOL v151 = 0;
            }
            else {
              BOOL v151 = v148 == -2;
            }
            if (v151) {
              v149 = (uint64_t *)v147;
            }
            unsigned int v152 = v146 + v150++;
            unsigned int v146 = v152 & v145;
            v147 = &v140[8 * (v152 & v145)];
            uint64_t v148 = *(void *)v147;
            if (*(void *)v147 == -1) {
              goto LABEL_295;
            }
          }
          goto LABEL_304;
        }
        v149 = 0;
LABEL_295:
        if (v149) {
          v153 = v149;
        }
        else {
          v153 = (uint64_t *)v147;
        }
        if (*v153 == v139) {
          goto LABEL_304;
        }
        if (*v153 == -2) {
          --v216;
        }
        else {
          ++HIDWORD(v215);
        }
        uint64_t *v153 = v139;
LABEL_302:
        if (LODWORD(v228[0]) >= (unint64_t)DWORD1(v228[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v227 + LODWORD(v228[0])) = v139;
        ++LODWORD(v228[0]);
LABEL_304:
        if (v154 == ++v137) {
          goto LABEL_314;
        }
      }
      if (a2 >= 0x40) {
        LODWORD(a2) = 2 * a2;
      }
      else {
        LODWORD(a2) = 128;
      }
LABEL_311:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v213, a2);
      a2 = (llvm::Function *)v215;
      v140 = v214;
      goto LABEL_283;
    }
LABEL_314:
    v7 |= v133;
    unsigned int v11 = v228[0];
  }
  while (LODWORD(v228[0]));
  if (v227 != (char *)v228 + 8) {
    free(v227);
  }
  v180 = (char *)this + 72;
  uint64_t v181 = (HIDWORD(v215) - v216) + 1;
  v182 = (char *)this + 72;
  do
  {
    v182 = (char *)*((void *)v182 + 1);
    --v181;
  }
  while (v182 != v180);
  if (v181)
  {
    v227 = (void *)1;
    v228[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v228[1] = v228[0];
    v228[2] = v228[0];
    v228[3] = v228[0];
    v135 = v231;
    v229 = v231;
    uint64_t v230 = 0x800000000;
    uint64_t v183 = *((void *)this + 10);
    if ((char *)v183 != v180)
    {
      uint64_t v10 = (uint64_t)v228;
      uint64_t v5 = (uint64_t)&v229;
      do
      {
        if (v183) {
          v184 = (void *)(v183 - 24);
        }
        else {
          v184 = 0;
        }
        v185 = v213;
        if (v214 == v213)
        {
          int v186 = HIDWORD(v215);
          v187 = &v214[8 * HIDWORD(v215)];
          if (HIDWORD(v215))
          {
            uint64_t v188 = 0;
            while (*(void **)&v214[v188] != v184)
            {
              v188 += 8;
              if (8 * HIDWORD(v215) == v188) {
                goto LABEL_383;
              }
            }
            v187 = &v214[v188];
          }
LABEL_383:
          v185 = v214;
        }
        else
        {
          int v189 = v215 - 1;
          unsigned int v190 = (v215 - 1) & ((v184 >> 4) ^ (v184 >> 9));
          v187 = &v214[8 * v190];
          v191 = *(void **)v187;
          if (*(void *)v187 == -1)
          {
            v192 = 0;
LABEL_393:
            if (v192) {
              v187 = v192;
            }
            int v186 = HIDWORD(v215);
            if (*(void **)v187 != v184) {
              v187 = &v214[8 * v215];
            }
          }
          else
          {
            v192 = 0;
            int v193 = 1;
            while (v191 != v184)
            {
              if (v192) {
                BOOL v194 = 0;
              }
              else {
                BOOL v194 = v191 == (void *)-2;
              }
              if (v194) {
                v192 = v187;
              }
              unsigned int v195 = v190 + v193++;
              unsigned int v190 = v195 & v189;
              v187 = &v214[8 * (v195 & v189)];
              v191 = *(void **)v187;
              if (*(void *)v187 == -1) {
                goto LABEL_393;
              }
            }
            int v186 = HIDWORD(v215);
          }
        }
        if (v214 == v185) {
          int v196 = v186;
        }
        else {
          int v196 = v215;
        }
        if (v187 == &v214[8 * v196]
          && (!v6 || !llvm::DomTreeUpdater::isBBPendingDeletion(v6, (llvm::BasicBlock *)v184)))
        {
          v222 = v184;
          sub_1CC261774((uint64_t)&v227, (uint64_t *)&v222);
        }
        uint64_t v183 = *(void *)(v183 + 8);
      }
      while ((char *)v183 != v180);
      if (v230)
      {
        if (a3) {
          llvm::MemorySSAUpdater::removeBlocks((uint64_t)a3, (uint64_t)&v227);
        }
        int v136 = (int)v227;
        if (v227 <= 1)
        {
LABEL_446:
          if (HIDWORD(v227)) {
            goto LABEL_404;
          }
        }
        else
        {
LABEL_404:
          if (v136) {
            goto LABEL_405;
          }
          unsigned int v203 = (2 * v136) & 0xFFFFFFFC;
          unsigned int v197 = DWORD2(v228[0]);
          if (v203 < DWORD2(v228[0]) && DWORD2(v228[0]) >= 0x41)
          {
            sub_1CD543314(&v227);
          }
          else
          {
            if (DWORD2(v228[0]))
            {
              uint64_t v10 = *(void *)&v228[0];
              uint64_t v5 = *(void *)&v228[0] + 8 * DWORD2(v228[0]);
              do
              {
LABEL_405:
                *(void *)uint64_t v10 = -4096;
                v10 += 8;
              }
              while (v10 != v5);
              unsigned int v197 = v227 & 1;
            }
            v227 = (void *)v197;
          }
        }
        uint64_t v232 = (uint64_t)v233 + 8;
        *(void *)&v233[0] = 0x800000000;
        v198 = (llvm::Type *)v230;
        if (v230)
        {
          v199 = (uint64_t *)v229;
          if (v229 == v135)
          {
            if (v230 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((char *)v233 + 8, v135, 8 * v230);
            v199 = (uint64_t *)v232;
            LODWORD(v233[0]) = v198;
          }
          else
          {
            uint64_t v232 = (uint64_t)v229;
            *(void *)&v233[0] = v230;
            v229 = v135;
            HIDWORD(v230) = 0;
          }
          LODWORD(v230) = 0;
        }
        else
        {
          v198 = 0;
          v199 = (uint64_t *)v233 + 1;
        }
        v222 = &v224;
        uint64_t v223 = 0x400000000;
        if (v6) {
          v200 = &v222;
        }
        else {
          v200 = 0;
        }
        llvm::detachDeadBlocks(v199, v198, (uint64_t)v200, 0);
        if (v6)
        {
          llvm::DomTreeUpdater::applyUpdates((uint64_t)v6, (unint64_t *)v222, v223);
          if (v198)
          {
LABEL_421:
            uint64_t v201 = 8 * (void)v198;
            do
            {
              if (v6) {
                llvm::DomTreeUpdater::deleteBB(v6, (llvm::BasicBlock *)*v199);
              }
              else {
                llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)*v199);
              }
              ++v199;
              v201 -= 8;
            }
            while (v201);
          }
        }
        else if (v198)
        {
          goto LABEL_421;
        }
        if (v222 != &v224) {
          free(v222);
        }
        if ((_OWORD *)v232 != (_OWORD *)((char *)v233 + 8)) {
          free((void *)v232);
        }
        char v7 = 1;
      }
    }
    if (v229 != v135) {
      free(v229);
    }
    if ((v227 & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)&v228[0], 8);
    }
  }
  if (v214 != v213) {
    free(v214);
  }
  return v7 & 1;
}

void llvm::combineMetadata(llvm::Instruction *a1, unsigned char *a2, unsigned int *a3, uint64_t a4, int a5)
{
  v53[8] = *MEMORY[0x1E4F143B8];
  uint64_t v51 = v53;
  uint64_t v52 = 0x400000000;
  llvm::Instruction::dropUnknownNonDebugMetadata((uint64_t)a1, a3, a4);
  llvm::Value::getAllMetadata(a1, (uint64_t)&v51);
  if (v52)
  {
    uint64_t v9 = (char *)v51;
    uint64_t v10 = (char *)v51 + 16 * v52;
    while (1)
    {
      int v11 = *(_DWORD *)v9;
      if (!*((void *)a2 + 6) && (a2[23] & 0x20) == 0) {
        goto LABEL_18;
      }
      if (v11) {
        break;
      }
LABEL_54:
      int v25 = a1;
      int v26 = v11;
      MostGenericFPMath = 0;
LABEL_21:
      llvm::Instruction::setMetadata(v25, v26, MostGenericFPMath);
LABEL_22:
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_2;
      }
    }
    if ((a2[23] & 0x20) == 0) {
      goto LABEL_18;
    }
    uint64_t v12 = ***(void ***)a2;
    int v50 = (llvm::MDNode *)a2;
    int v13 = *(_DWORD *)(v12 + 2496);
    if (v13)
    {
      uint64_t v14 = *(void *)(v12 + 2480);
      int v15 = v13 - 1;
      unsigned int v16 = v15 & ((a2 >> 4) ^ (a2 >> 9));
      int v17 = (void *)(v14 + 40 * v16);
      uint64_t v18 = (unsigned char *)*v17;
      if ((unsigned char *)*v17 == a2) {
        goto LABEL_13;
      }
      unsigned int v27 = 0;
      int v28 = 1;
      while (v18 != (unsigned char *)-4096)
      {
        if (v27) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v18 == (unsigned char *)-8192;
        }
        if (v29) {
          unsigned int v27 = v17;
        }
        unsigned int v30 = v16 + v28++;
        unsigned int v16 = v30 & v15;
        int v17 = (void *)(v14 + 40 * v16);
        uint64_t v18 = (unsigned char *)*v17;
        if ((unsigned char *)*v17 == a2) {
          goto LABEL_13;
        }
      }
      if (v27) {
        int v47 = v27;
      }
      else {
        int v47 = v17;
      }
    }
    else
    {
      int v47 = 0;
    }
    int v17 = sub_1CC609054(v12 + 2480, (uint64_t)&v50, (uint64_t *)&v50, v47);
    int64_t v48 = v50;
    v17[4] = 0;
    v17[3] = 0;
    *int v17 = v48;
    v17[1] = v17 + 3;
    v17[2] = 0x100000000;
LABEL_13:
    uint64_t v19 = *((unsigned int *)v17 + 4);
    if (v19)
    {
      int v20 = (llvm::MDNode **)(v17[1] + 8);
      uint64_t v21 = 16 * v19;
      while (*((_DWORD *)v20 - 2) != v11)
      {
        uint64_t v22 = 0;
        v20 += 2;
        v21 -= 16;
        if (!v21) {
          goto LABEL_19;
        }
      }
      uint64_t v22 = *v20;
LABEL_19:
      uint64_t v23 = (llvm::MDNode *)*((void *)v9 + 1);
      switch(v11)
      {
        case 1:
          int v50 = 0;
          ((void (*)(llvm::MDNode *, llvm::MDNode *, llvm::MDNode **))loc_1CC15C65C)(v22, v23, &v50);
          MostGenericFPMath = v50;
          int v25 = a1;
          int v26 = 1;
          goto LABEL_21;
        case 3:
          MostGenericFPMath = llvm::MDNode::getMostGenericFPMath(v22, v23, v8);
          int v25 = a1;
          int v26 = 3;
          goto LABEL_21;
        case 4:
          if (!a5) {
            goto LABEL_22;
          }
          MostGenericFPMath = llvm::MDNode::getMostGenericRange(v22, v23, v8);
          int v25 = a1;
          int v26 = 4;
          goto LABEL_21;
        case 6:
          int v25 = a1;
          int v26 = 6;
          goto LABEL_70;
        case 7:
          MostGenericFPMath = llvm::MDNode::getMostGenericAliasScope(v22, v23, v8);
          int v25 = a1;
          int v26 = 7;
          goto LABEL_21;
        case 8:
        case 10:
          MostGenericAlignmentOrDereferenceable = llvm::MDNode::intersect(v22, v23, v8);
          goto LABEL_66;
        case 11:
          if (!a5) {
            goto LABEL_22;
          }
          int v25 = a1;
          int v26 = 11;
LABEL_70:
          MostGenericFPMath = v22;
          goto LABEL_21;
        case 12:
        case 13:
          MostGenericAlignmentOrDereferenceable = llvm::MDNode::getMostGenericAlignmentOrDereferenceable(v22, v23, v8);
LABEL_66:
          MostGenericFPMath = MostGenericAlignmentOrDereferenceable;
          int v25 = a1;
          int v26 = v11;
          goto LABEL_21;
        case 16:
        case 27:
          goto LABEL_22;
        case 17:
          MostGenericFPMath = llvm::MDNode::getMostGenericAlignmentOrDereferenceable(v22, v23, v8);
          int v25 = a1;
          int v26 = 17;
          goto LABEL_21;
        case 25:
          MostGenericFPMath = llvm::intersectAccessGroups(a1, (const llvm::Instruction *)a2, v8);
          int v25 = a1;
          int v26 = 25;
          goto LABEL_21;
        default:
          goto LABEL_54;
      }
    }
LABEL_18:
    uint64_t v22 = 0;
    goto LABEL_19;
  }
LABEL_2:
  if ((a2[23] & 0x20) == 0) {
    goto LABEL_3;
  }
  uint64_t v31 = ***(void ***)a2;
  int v50 = (llvm::MDNode *)a2;
  int v32 = *(_DWORD *)(v31 + 2496);
  if (v32)
  {
    uint64_t v33 = *(void *)(v31 + 2480);
    int v34 = v32 - 1;
    unsigned int v35 = v34 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v36 = (void *)(v33 + 40 * v35);
    unsigned int v37 = (unsigned char *)*v36;
    if ((unsigned char *)*v36 == a2) {
      goto LABEL_37;
    }
    BOOL v41 = 0;
    int v42 = 1;
    while (v37 != (unsigned char *)-4096)
    {
      if (v41) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v37 == (unsigned char *)-8192;
      }
      if (v43) {
        BOOL v41 = v36;
      }
      unsigned int v44 = v35 + v42++;
      unsigned int v35 = v44 & v34;
      uint64_t v36 = (void *)(v33 + 40 * v35);
      unsigned int v37 = (unsigned char *)*v36;
      if ((unsigned char *)*v36 == a2) {
        goto LABEL_37;
      }
    }
    if (v41) {
      uint64_t v45 = v41;
    }
    else {
      uint64_t v45 = v36;
    }
  }
  else
  {
    uint64_t v45 = 0;
  }
  uint64_t v36 = sub_1CC609054(v31 + 2480, (uint64_t)&v50, (uint64_t *)&v50, v45);
  BOOL v46 = v50;
  v36[3] = 0;
  v36[4] = 0;
  void *v36 = v46;
  v36[1] = v36 + 3;
  v36[2] = 0x100000000;
LABEL_37:
  uint64_t v38 = *((unsigned int *)v36 + 4);
  if (v38)
  {
    uint64_t v39 = (llvm::MDNode **)(v36[1] + 8);
    uint64_t v40 = 16 * v38;
    while (*((_DWORD *)v39 - 2) != 16)
    {
      v39 += 2;
      v40 -= 16;
      if (!v40) {
        goto LABEL_3;
      }
    }
    if (*v39 && (*((unsigned char *)a1 + 16) & 0xFE) == 0x3C) {
      llvm::Value::setMetadata((uint64_t ***)a1, 16, *v39);
    }
  }
LABEL_3:
  if (v51 != v53) {
    free(v51);
  }
}

void llvm::combineMetadataForCSE(llvm *this, llvm::Instruction *a2, const llvm::Instruction *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v3[0] = xmmword_1CFB32AC0;
  v3[1] = unk_1CFB32AD0;
  v3[2] = xmmword_1CFB32AE0;
  llvm::combineMetadata(this, a2, (unsigned int *)v3, 12, (int)a3);
}

void llvm::copyMetadataForLoad(llvm *this, llvm::LoadInst *a2, const llvm::LoadInst *a3)
{
  v17[16] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v17;
  int v16 = 8;
  uint64_t v5 = *((void *)a2 + 6);
  if (v5)
  {
    v17[0] = 0;
    v17[1] = v5;
    int v6 = 1;
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      return;
    }
    int v6 = 0;
  }
  unsigned int v15 = v6;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v14);
  uint64_t v9 = (char *)v14;
  if (v15)
  {
    uint64_t v10 = (llvm *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
    int v11 = (char *)v14 + 16 * v15;
    uint64_t v12 = *(void *)this;
    do
    {
      int v13 = (const llvm::LoadInst *)*((void *)v9 + 1);
      if (*(_DWORD *)v9 >= 4u)
      {
        switch(*(_DWORD *)v9)
        {
          case 4:
            llvm::copyRangeMetadata(v10, (uint64_t **)a2, v13, this, v8);
            break;
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0x19:
            goto LABEL_8;
          case 0xB:
            llvm::copyNonnullMetadata((llvm::ConstantPointerNull ***)a2, *((const llvm::LoadInst **)v9 + 1), (llvm::Constant **)this, v7);
            break;
          case 0xC:
          case 0xD:
          case 0x11:
            if (*(unsigned char *)(v12 + 8) == 15) {
              goto LABEL_8;
            }
            break;
          default:
            break;
        }
      }
      else
      {
LABEL_8:
        llvm::Instruction::setMetadata(this, *(_DWORD *)v9, v13);
      }
      v9 += 16;
    }
    while (v9 != v11);
    uint64_t v9 = (char *)v14;
  }
  if (v9 != (char *)v17) {
    free(v9);
  }
}

void llvm::patchReplacementInstruction(llvm *this, llvm::Instruction *a2, llvm::Value *a3)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    if (*((unsigned char *)this + 16) != 60) {
      llvm::Instruction::andIRFlags((uint64_t)a2, (uint64_t)this);
    }
    llvm::combineMetadata(a2, this, dword_1CFB32AF0, 10, 0);
  }
}

uint64_t llvm::replaceDominatedUsesWith(llvm *this, llvm::Value *a2, llvm::Value *a3, llvm::DominatorTree *a4, const llvm::BasicBlockEdge *a5)
{
  uint64_t v5 = *((void *)this + 1);
  if (!v5) {
    return 0;
  }
  uint64_t v9 = 0;
  do
  {
    int v11 = (void *)(v5 + 8);
    uint64_t v10 = *(void *)(v5 + 8);
    if (llvm::DominatorTree::dominates(a3, a4, (const llvm::Use *)v5))
    {
      if (*(void *)v5)
      {
        **(void **)(v5 + 16) = *(void *)(v5 + 8);
        uint64_t v13 = *(void *)(v5 + 8);
        if (v13) {
          *(void *)(v13 + 16) = *(void *)(v5 + 16);
        }
      }
      *(void *)uint64_t v5 = a2;
      if (a2)
      {
        uint64_t v14 = (void *)((char *)a2 + 8);
        uint64_t v15 = *((void *)a2 + 1);
        *int v11 = v15;
        if (v15) {
          *(void *)(v15 + 16) = v11;
        }
        *(void *)(v5 + 16) = v14;
        void *v14 = v5;
      }
      uint64_t v9 = (v9 + 1);
    }
    uint64_t v5 = v10;
  }
  while (v10);
  return v9;
}

uint64_t llvm::replaceDominatedUsesWith(llvm *this, llvm::Value *a2, llvm::Value *a3, llvm::DominatorTree *a4, const llvm::BasicBlock *a5)
{
  uint64_t v5 = (const llvm::Use *)*((void *)this + 1);
  if (v5) {
    llvm::DominatorTree::dominates(a3, a4, v5);
  }
  return 0;
}

void llvm::hoistAllInstructionsInto(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::BasicBlock *a4)
{
  char v7 = (unsigned __int8 *)a3 + 40;
  uint64_t v8 = (unsigned __int8 *)*((void *)a3 + 6);
  if (v8 != (unsigned __int8 *)((char *)a3 + 40))
  {
    while (1)
    {
      if (v8) {
        uint64_t v9 = (uint64_t)(v8 - 24);
      }
      else {
        uint64_t v9 = 0;
      }
      llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata((uint64_t *)v9, 0, 0);
      if ((*(unsigned char *)(v9 + 23) & 8) != 0) {
        llvm::dropDebugUsers((uint64_t ***)v9, v10);
      }
      if (sub_1CBF63B28(v9) || sub_1CC27D470(v9)) {
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v9);
      }
      int v11 = (unsigned __int8 *)*((void *)a2 + 6);
      uint64_t v36 = v11;
      if (v11) {
        llvm::MetadataTracking::track((uint64_t)&v36, v11, 2);
      }
      uint64_t v12 = (unsigned __int8 **)(v9 + 48);
      if (&v36 == v12)
      {
        if (v36) {
          llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
        }
        goto LABEL_15;
      }
      uint64_t v13 = *v12;
      if (*v12)
      {
        int v15 = *v13;
        if ((v15 - 4) > 0x1E)
        {
          if ((v15 - 3) >= 0xFFFFFFFE) {
            uint64_t v31 = *v12;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v15 - 3) < 0xFFFFFFFE)
          {
            if (v15 == 3) {
              *((void *)v13 + 1) = 0;
            }
            goto LABEL_13;
          }
          unint64_t v17 = (unint64_t)(v31 + 8);
LABEL_48:
          unsigned int v37 = v12;
          sub_1CC5FA668(v17 + 16, &v37);
          goto LABEL_13;
        }
        if ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3))
        {
          uint64_t v16 = *((void *)v13 + 2);
          if ((v16 & 4) != 0)
          {
            unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
            if (v17) {
              goto LABEL_48;
            }
          }
        }
      }
LABEL_13:
      uint64_t v14 = v36;
      *uint64_t v12 = v36;
      if (v14)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v36, v14, (uint64_t)v12);
        uint64_t v36 = 0;
      }
LABEL_15:
      uint64_t v8 = (unsigned __int8 *)*((void *)v8 + 1);
      if (v8 == v7)
      {
        uint64_t v8 = (unsigned __int8 *)*((void *)a3 + 6);
        break;
      }
    }
  }
  uint64_t v18 = *(void **)v7;
  if (*(unsigned __int8 **)v7 == v7)
  {
    uint64_t v19 = 0;
  }
  else
  {
    if (v18) {
      uint64_t v19 = (unsigned __int8 *)(v18 - 3);
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19[16] - 29 >= 0xB) {
      uint64_t v19 = 0;
    }
  }
  if (v19 != (unsigned __int8 *)a2)
  {
    int v20 = v19 + 24;
    if (v8 != v19 + 24)
    {
      uint64_t v21 = (uint64_t *)((char *)a2 + 24);
      *((_WORD *)this + 9) &= ~0x8000u;
      if (this != a3)
      {
        uint64_t v22 = *((void *)this + 7);
        if (v22) {
          uint64_t v23 = *(llvm::ValueSymbolTable **)(v22 + 104);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *((void *)a3 + 7);
        if (v24) {
          int v25 = *(uint64_t **)(v24 + 104);
        }
        else {
          int v25 = 0;
        }
        if (v23 == (llvm::ValueSymbolTable *)v25)
        {
          int v26 = v8;
          do
          {
            unsigned int v27 = v26 - 24;
            if (!v26) {
              unsigned int v27 = 0;
            }
            *((void *)v27 + 5) = this;
            int v26 = (unsigned __int8 *)*((void *)v26 + 1);
          }
          while (v26 != v20);
        }
        else
        {
          int v32 = v8;
          do
          {
            if (v32) {
              uint64_t v33 = v32 - 24;
            }
            else {
              uint64_t v33 = 0;
            }
            int v34 = *((_DWORD *)v33 + 5) & 0x10000000;
            if (v25 && v34)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v33);
              llvm::ValueSymbolTable::removeValueName(v25, ValueName);
            }
            *((void *)v33 + 5) = this;
            if (v23 && v34) {
              llvm::ValueSymbolTable::reinsertValue(v23, (llvm::Value *)v33);
            }
            int v32 = (unsigned __int8 *)*((void *)v32 + 1);
          }
          while (v32 != v20);
        }
      }
      uint64_t v28 = *(void *)v20;
      uint64_t v29 = *(void *)v8;
      *(void *)(v29 + 8) = v20;
      *(void *)int v20 = v29;
      uint64_t v30 = *v21;
      *(void *)(v28 + 8) = v21;
      *(void *)uint64_t v8 = v30;
      *(void *)(v30 + 8) = v8;
      *uint64_t v21 = v28;
    }
  }
}

uint64_t llvm::recognizeBSwapOrBitReverseIdiom(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  int v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 57) {
    goto LABEL_12;
  }
  if (v8 == 5)
  {
    LOBYTE(v9) = 0;
    if ((a2 | a3) != 1 || *(_WORD *)(a1 + 18) != 29) {
      return v9 & 1;
    }
LABEL_13:
    uint64_t v11 = *(void *)a1;
    if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12)
    {
      uint64_t v12 = **(unsigned __int8 ***)(v11 + 16);
      int v13 = v12[8];
    }
    else
    {
      int v13 = *(_DWORD *)(*(void *)a1 + 8);
      uint64_t v12 = *(unsigned __int8 **)a1;
    }
    if (v13 != 13 || llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v12) > 0x80) {
      goto LABEL_18;
    }
    v66[0] = 0;
    v65[0] = 0;
    v65[1] = 0;
    int v64 = (uint64_t *)v65;
    uint64_t v15 = sub_1CD18FB70((llvm::Type **)a1, v5, &v64, 0, v66);
    if (!*(unsigned char *)(v15 + 64)) {
      goto LABEL_27;
    }
    uint64_t v16 = (llvm::CastInst **)v15;
    uint64_t v18 = *(void *)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
    uint64_t v63 = (llvm::Value *)v11;
    uint64_t v19 = v11;
    if (*(unsigned __int8 *)(v17 + v18 - 1) == 255)
    {
      uint64_t v37 = 0;
      while (v17 + v37)
      {
        int v38 = *(unsigned __int8 *)(v18 + v17 - 1 + v37--);
        if (v38 != 255)
        {
          uint64_t v19 = llvm::IntegerType::get(**(llvm::IntegerType ***)a1, (llvm::LLVMContext *)(v17 + v37 + 1));
          uint64_t v63 = (llvm::Value *)v19;
          if (v11 && (*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
          {
            uint64_t v39 = (llvm::Type *)*(unsigned int *)(v11 + 32);
            if (*(_DWORD *)(v11 + 8) == 19) {
              llvm::ScalableVectorType::get((uint64_t **)v19, v39);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v39);
            }
            uint64_t v63 = (llvm::Value *)v19;
          }
          goto LABEL_22;
        }
      }
      goto LABEL_27;
    }
LABEL_22:
    if ((*(_DWORD *)(v19 + 8) & 0xFE) == 0x12) {
      uint64_t v19 = **(void **)(v19 + 16);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v19);
    uint64_t v21 = (llvm::Type *)v11;
    if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
      uint64_t v21 = **(llvm::Type ***)(v11 + 16);
    }
    if (PrimitiveSizeInBits > llvm::Type::getPrimitiveSizeInBits(v21))
    {
LABEL_27:
      LOBYTE(v9) = 0;
LABEL_28:
      sub_1CD192264(v65[0]);
      return v9 & 1;
    }
    unsigned int v62 = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v61);
    }
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    if (!PrimitiveSizeInBits) {
      unint64_t v22 = 0;
    }
    unint64_t v61 = v22;
    if ((PrimitiveSizeInBits & 0xF) != 0) {
      int v23 = 0;
    }
    else {
      int v23 = a2;
    }
    int v9 = v23 | v5;
    if (PrimitiveSizeInBits && v9)
    {
      unint64_t v24 = 0;
      unsigned int v25 = v62;
      unsigned int v26 = PrimitiveSizeInBits - 1;
      do
      {
        unsigned int v27 = *(char *)(v18 + v24);
        if (v27 == -1)
        {
          uint64_t v29 = ~(1 << v24);
          if (v25 > 0x40) {
            *(void *)(v61 + 8 * (v24 >> 6)) &= v29;
          }
          else {
            v61 &= v29;
          }
        }
        else
        {
          BOOL v28 = ((v27 ^ v24) & 7) == 0
             && (PrimitiveSizeInBits >> 3) + ~(v24 >> 3) == v27 >> 3;
          LOBYTE(v23) = v23 & v28;
          LOBYTE(v5) = v5 & (v26 == v27);
        }
        ++v24;
        LOBYTE(v9) = v23 | v5;
        if (v24 >= PrimitiveSizeInBits) {
          break;
        }
        --v26;
      }
      while (((v23 | v5) & 1) != 0);
    }
    if ((v9 & 1) == 0)
    {
LABEL_83:
      if (v62 >= 0x41 && v61) {
        MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
      }
      goto LABEL_28;
    }
    if (v23) {
      int v30 = 9;
    }
    else {
      int v30 = 8;
    }
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 56) + 40), v30, (uint64_t)&v63, 1);
    uint64_t v33 = *v16;
    BOOL v60 = v33;
    if (v63 != *(llvm::Value **)v33)
    {
      *(void *)uint64_t v58 = "trunc";
      __int16 v59 = 259;
      IntegerCast = llvm::CastInst::CreateIntegerCast(v33, (llvm::Type ***)v63, 0, (const char **)v58, (const llvm::Twine *)a1, v31);
      unsigned int v35 = *(_DWORD *)(a4 + 8);
      if (v35 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v35) = IntegerCast;
      ++*(_DWORD *)(a4 + 8);
      BOOL v60 = IntegerCast;
    }
    if (Declaration) {
      uint64_t v36 = *(uint64_t ***)(Declaration + 24);
    }
    else {
      uint64_t v36 = 0;
    }
    *(void *)uint64_t v58 = "rev";
    __int16 v59 = 259;
    uint64_t v40 = (char *)operator new(0x90uLL);
    BOOL v41 = (llvm::Value *)(v40 + 64);
    *((_DWORD *)v40 + 21) = *((_DWORD *)v40 + 21) & 0x38000000 | 2;
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = 0;
    *((void *)v40 + 3) = v40 + 64;
    *((void *)v40 + 4) = 0;
    *((void *)v40 + 5) = 0;
    *((void *)v40 + 6) = 0;
    *((void *)v40 + 7) = v40 + 64;
    *((void *)v40 + 8) = *v36[2];
    *((void *)v40 + 9) = 0;
    v40[80] = 84;
    v40[81] = 0;
    *((_WORD *)v40 + 41) = 0;
    *((_DWORD *)v40 + 21) = 2;
    *(_OWORD *)(v40 + 88) = 0u;
    int v42 = v40 + 88;
    *(_OWORD *)(v40 + 104) = 0u;
    *((_DWORD *)v40 + 30) = 0;
    uint64_t v43 = *(void *)(a1 + 40);
    unsigned int v44 = (uint64_t *)(a1 + 24);
    *((void *)v40 + 13) = v43;
    *(_WORD *)(v43 + 18) &= ~0x8000u;
    if ((v40[87] & 0x10) != 0)
    {
      uint64_t v55 = *(void *)(v43 + 56);
      if (v55)
      {
        uint64_t v56 = *(llvm::ValueSymbolTable **)(v55 + 104);
        if (v56)
        {
          BOOL v57 = v40;
          llvm::ValueSymbolTable::reinsertValue(v56, v41);
          uint64_t v40 = v57;
        }
      }
    }
    uint64_t v45 = *v44;
    *((void *)v40 + 11) = *v44;
    *((void *)v40 + 12) = v44;
    *(void *)(v45 + 8) = v42;
    *unsigned int v44 = (uint64_t)v42;
    *((void *)v40 + 16) = 0;
    llvm::CallInst::init((uint64_t ***)v41, v36, (uint64_t **)Declaration, (uint64_t *)&v60, 1, 0, 0, (const char **)v58);
    unsigned int v48 = *(_DWORD *)(a4 + 8);
    if (v48 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a4 + 8 * v48) = v41;
    ++*(_DWORD *)(a4 + 8);
    unsigned int v49 = v62;
    if (v62)
    {
      if (v62 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v61) == v49) {
          goto LABEL_80;
        }
      }
      else if (v61 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v62)
      {
        goto LABEL_80;
      }
      int v50 = v63;
      Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v63, (llvm::LLVMContext *)&v61, v46);
      if ((*((_DWORD *)v50 + 2) & 0xFE) == 0x12) {
        Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v50 + 8) | ((unint64_t)(*((_DWORD *)v50 + 2) == 19) << 32)), (uint64_t)Splat);
      }
      *(void *)uint64_t v58 = "mask";
      __int16 v59 = 259;
      BOOL v41 = llvm::BinaryOperator::Create(28, v41, (uint64_t)Splat, (const char **)v58, a1);
      unsigned int v52 = *(_DWORD *)(a4 + 8);
      if (v52 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v52) = v41;
      ++*(_DWORD *)(a4 + 8);
    }
LABEL_80:
    if (v11 != *(void *)v41)
    {
      *(void *)uint64_t v58 = "zext";
      __int16 v59 = 259;
      int64_t v53 = llvm::CastInst::CreateIntegerCast(v41, (llvm::Type ***)v11, 0, (const char **)v58, (const llvm::Twine *)a1, v47);
      unsigned int v54 = *(_DWORD *)(a4 + 8);
      if (v54 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v54) = v53;
      ++*(_DWORD *)(a4 + 8);
    }
    goto LABEL_83;
  }
  *(_DWORD *)uint64_t v58 = 148;
  *(void *)&v58[4] = 0;
  if (v8 != 84
    || (uint64_t v10 = *(void *)(a1 - 32)) == 0
    || *(unsigned char *)(v10 + 16)
    || *(void *)(v10 + 24) != *(void *)(a1 + 72))
  {
LABEL_18:
    LOBYTE(v9) = 0;
    return v9 & 1;
  }
  if (*(_DWORD *)(v10 + 36) == *(_DWORD *)v58)
  {
LABEL_12:
    if ((a2 & 1) != 0 || a3) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  LOBYTE(v9) = 0;
  if ((a2 | a3) == 1 && *(_DWORD *)(v10 + 36) == 149) {
    goto LABEL_13;
  }
  return v9 & 1;
}

uint64_t sub_1CD18FB70(llvm::Type **a1, uint64_t a2, uint64_t **a3, int a4, unsigned char *a5)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a3 + 1;
  uint64_t v10 = (char *)a3[1];
  if (v10)
  {
    uint64_t v12 = a3[1];
    int v13 = a3 + 1;
    do
    {
      unint64_t v14 = v12[4];
      BOOL v15 = v14 >= (unint64_t)a1;
      if (v14 >= (unint64_t)a1) {
        uint64_t v16 = (uint64_t **)v12;
      }
      else {
        uint64_t v16 = (uint64_t **)(v12 + 1);
      }
      if (v15) {
        int v13 = (uint64_t **)v12;
      }
      uint64_t v12 = *v16;
    }
    while (*v16);
    if (v13 != v11 && v13[4] <= (uint64_t *)a1) {
      return (uint64_t)(v13 + 5);
    }
    LOBYTE(v114) = 0;
    char v121 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v17 = v10;
        unint64_t v18 = *((void *)v10 + 4);
        if (v18 <= (unint64_t)a1) {
          break;
        }
        uint64_t v10 = *(char **)v17;
        uint64_t v11 = (uint64_t **)v17;
        if (!*(void *)v17) {
          goto LABEL_20;
        }
      }
      if (v18 >= (unint64_t)a1) {
        break;
      }
      uint64_t v10 = (char *)*((void *)v17 + 1);
      if (!v10)
      {
        uint64_t v11 = (uint64_t **)(v17 + 8);
        goto LABEL_20;
      }
    }
  }
  else
  {
    LOBYTE(v114) = 0;
    char v121 = 0;
    uint64_t v17 = (char *)(a3 + 1);
LABEL_20:
    uint64_t v19 = v17;
    uint64_t v17 = (char *)operator new(0x70uLL);
    *((void *)v17 + 4) = a1;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *((void *)v17 + 13) = 0;
    *((void *)v17 + 2) = v19;
    *uint64_t v11 = (uint64_t *)v17;
    int v20 = (uint64_t *)**a3;
    uint64_t v21 = (uint64_t *)v17;
    if (v20)
    {
      *a3 = v20;
      uint64_t v21 = *v11;
    }
    sub_1CB8358B8(a3[1], v21);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
  uint64_t v22 = (uint64_t)(v17 + 40);
  sub_1CD191838((uint64_t)(v17 + 40), (uint64_t)&v114);
  if (v121)
  {
    if (v115 != &v117) {
      free(v115);
    }
    char v121 = 0;
  }
  int v23 = *a1;
  if ((*((_DWORD *)*a1 + 2) & 0xFE) == 0x12) {
    int v23 = (llvm::Type *)**((void **)v23 + 2);
  }
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v23);
  if (a4 == 48) {
    return v22;
  }
  unint64_t v25 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x80) {
    return v22;
  }
  unsigned int v26 = *((unsigned __int8 *)a1 + 16);
  if (v26 < 0x1C) {
    goto LABEL_32;
  }
  uint64_t v112 = 0;
  v113 = 0;
  unsigned int v111 = 0;
  if (v26 == 57)
  {
    uint64_t v28 = (uint64_t)*(a1 - 8);
    if (v28)
    {
      v113 = (llvm::Type **)*(a1 - 8);
      if (*(a1 - 4))
      {
        uint64_t v112 = (uint64_t)*(a1 - 4);
        uint64_t v29 = (a4 + 1);
        uint64_t v30 = sub_1CD18FB70(v28, a2, a3, v29, a5);
        if (*(unsigned char *)(v30 + 64))
        {
          uint64_t v31 = v30;
          if (*(void *)v30)
          {
            uint64_t v32 = sub_1CD18FB70(v112, a2, a3, v29, a5);
            if (*(unsigned char *)(v32 + 64))
            {
              uint64_t v33 = v32;
              if (*(void *)v31 == *(void *)v32)
              {
                v114 = *(void **)v31;
                v115 = &v117;
                long long v116 = xmmword_1CDC7F9D0;
                if (v25)
                {
                  if (v25 >= 0x21) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  bzero(v115, v25);
                  *(void *)&long long v116 = v25;
                }
                sub_1CD191A4C((void *)v17 + 5, &v114);
                if (v115 != &v117) {
                  free(v115);
                }
                if (v25)
                {
                  uint64_t v34 = 0;
                  while (1)
                  {
                    int v35 = *(unsigned __int8 *)(*(void *)(v31 + 8) + v34);
                    int v36 = *(unsigned __int8 *)(*(void *)(v33 + 8) + v34);
                    if (v35 != 255)
                    {
                      BOOL v37 = v36 == 255 || v35 == v36;
                      LOBYTE(v36) = *(unsigned char *)(*(void *)(v31 + 8) + v34);
                      if (!v37) {
                        break;
                      }
                    }
                    *(unsigned char *)(*((void *)v17 + 6) + v34++) = v36;
                    if (v25 == v34) {
                      return v22;
                    }
                  }
                  LOBYTE(v114) = 0;
                  char v121 = 0;
                  sub_1CD191838(v22, (uint64_t)&v114);
                  if (v121 && v115 != &v117) {
                    free(v115);
                  }
                }
              }
            }
          }
        }
        return v22;
      }
    }
  }
  else
  {
    v114 = &v113;
    v115 = &v111;
    *(void *)&long long v116 = 0;
    if (v26 - 53 <= 1)
    {
      int v39 = *((_DWORD *)a1 + 5);
      uint64_t v40 = (v39 & 0x40000000) != 0 ? *(a1 - 1) : (llvm::Type *)&a1[-4 * (v39 & 0x7FFFFFF)];
      BOOL v41 = *(llvm::Type ***)v40;
      if (v41)
      {
        v113 = v41;
        int v42 = *((_DWORD *)a1 + 5);
        if ((v42 & 0x40000000) != 0) {
          uint64_t v43 = (llvm::Type **)*(a1 - 1);
        }
        else {
          uint64_t v43 = &a1[-4 * (v42 & 0x7FFFFFF)];
        }
        if (sub_1CBF528D8((uint64_t)&v115, (unsigned __int8 *)v43[4]))
        {
          unint64_t v61 = v111;
          uint64_t v62 = *((unsigned int *)v111 + 2);
          uint64_t v63 = v111;
          if (v62 >= 0x41)
          {
            int v64 = 0;
            int64_t v65 = (unint64_t)(v62 + 63) >> 6;
            do
            {
              if (v65-- < 1) {
                break;
              }
              unint64_t v67 = *(void *)(*(void *)v111 + 8 * v65);
              v64 += __clz(v67);
            }
            while (!v67);
            int v68 = v62 | 0xFFFFFFC0;
            if ((v62 & 0x3F) == 0) {
              int v68 = 0;
            }
            if ((v62 - v64 - v68) > 0x40) {
              return v22;
            }
            uint64_t v63 = *(llvm::APInt **)v111;
          }
          if (*(void *)v63 < (unint64_t)v25)
          {
            if (a2) {
              goto LABEL_136;
            }
            char v69 = v111;
            if (v62 >= 0x41) {
              char v69 = *(llvm::APInt **)v111;
            }
            if ((*(unsigned char *)v69 & 7) == 0)
            {
LABEL_136:
              uint64_t v70 = sub_1CD18FB70(v113, a2, a3, (a4 + 1), a5);
              if (*(unsigned char *)(v70 + 64))
              {
                sub_1CD191C38((uint64_t)(v17 + 40), v70);
                int v71 = (char *)*((void *)v17 + 6);
                if (*((unsigned char *)a1 + 16) == 53)
                {
                  if (*((_DWORD *)v61 + 2) > 0x40u)
                  {
                    *((void *)v17 + 7) -= **(void **)v61;
                    unint64_t v61 = *(llvm::APInt **)v61;
                  }
                  else
                  {
                    *((void *)v17 + 7) -= *(void *)v61;
                  }
                  unsigned int v100 = *(llvm::APInt **)v61;
                  unsigned int v101 = v17 + 48;
                  unint64_t v102 = v71;
                }
                else
                {
                  unsigned int v94 = *((_DWORD *)v61 + 2);
                  uint64_t v95 = v61;
                  if (v94 >= 0x41) {
                    uint64_t v95 = *(llvm::APInt **)v61;
                  }
                  uint64_t v96 = *(void *)v95;
                  uint64_t v97 = *((void *)v17 + 7);
                  uint64_t v98 = v97 - v96;
                  if (v97 == v96)
                  {
                    uint64_t v99 = *((void *)v17 + 6);
                  }
                  else
                  {
                    memmove(*((void **)v17 + 6), &v71[v96], v97 - v96);
                    uint64_t v99 = *((void *)v17 + 6);
                    unsigned int v94 = *((_DWORD *)v61 + 2);
                  }
                  unint64_t v102 = &v71[v98];
                  *((void *)v17 + 7) = &v71[v98 - v99];
                  if (v94 >= 0x41) {
                    unint64_t v61 = *(llvm::APInt **)v61;
                  }
                  unsigned int v100 = *(llvm::APInt **)v61;
                  unsigned int v101 = v17 + 48;
                }
                sub_1CD191DC4(v101, v102, (size_t)v100);
              }
            }
          }
          return v22;
        }
        unsigned int v26 = *((unsigned __int8 *)a1 + 16);
      }
    }
  }
  v114 = &v113;
  v115 = &v111;
  *(void *)&long long v116 = 0;
  if (v26 != 5)
  {
    if (v26 != 56) {
      goto LABEL_83;
    }
    if (!*(a1 - 8)) {
      goto LABEL_83;
    }
    v113 = (llvm::Type **)*(a1 - 8);
    if (!sub_1CBF528D8((uint64_t)&v115, (unsigned __int8 *)*(a1 - 4))) {
      goto LABEL_83;
    }
LABEL_81:
    uint64_t v45 = v111;
    uint64_t v46 = *((unsigned int *)v111 + 2);
    if (v46 > 0x40)
    {
      char v47 = 0;
      unint64_t v79 = (unint64_t)(v46 + 63) >> 6;
      uint64_t v80 = *(int8x8_t **)v111;
      do
      {
        int8x8_t v81 = *v80++;
        v47 += vaddlv_u8((uint8x8_t)vcnt_s8(v81));
        --v79;
      }
      while (v79);
    }
    else
    {
      char v47 = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)v111));
    }
    if ((a2 & 1) != 0 || (v47 & 7) == 0)
    {
      uint64_t v82 = sub_1CD18FB70(v113, a2, a3, (a4 + 1), a5);
      if (*(unsigned char *)(v82 + 64))
      {
        sub_1CD191C38((uint64_t)(v17 + 40), v82);
        if (v25)
        {
          uint64_t v83 = 0;
          do
          {
            unsigned int v84 = v45;
            if (*((_DWORD *)v45 + 2) >= 0x41u) {
              unsigned int v84 = (llvm::APInt *)(*(void *)v45 + 8 * (v83 >> 6));
            }
            if (((*(void *)v84 >> v83) & 1) == 0) {
              *(unsigned char *)(*((void *)v17 + 6) + v83) = -1;
            }
            ++v83;
          }
          while (v25 != v83);
        }
      }
    }
    return v22;
  }
  if (*((_WORD *)a1 + 9) == 28)
  {
    unsigned int v44 = (llvm::Type ***)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    if (*v44)
    {
      v113 = *v44;
      if (sub_1CBF5295C((uint64_t)&v115, (llvm::Constant *)v44[4])) {
        goto LABEL_81;
      }
    }
  }
LABEL_83:
  v114 = &v113;
  if (sub_1CBC5BE40(&v114, (uint64_t)a1))
  {
    uint64_t v48 = sub_1CD18FB70(v113, a2, a3, (a4 + 1), a5);
    if (*(unsigned char *)(v48 + 64))
    {
      uint64_t v49 = v48;
      v114 = *(void **)v48;
      v115 = &v117;
      long long v116 = xmmword_1CDC7F9D0;
      if (v25)
      {
        if (v25 >= 0x21) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        bzero(v115, v25);
        *(void *)&long long v116 = v25;
      }
      sub_1CD191A4C((void *)v17 + 5, &v114);
      if (v115 != &v117) {
        free(v115);
      }
      int v50 = *v113;
      if ((*((_DWORD *)*v113 + 2) & 0xFE) == 0x12) {
        int v50 = (llvm::Type *)**((void **)v50 + 2);
      }
      unsigned int v51 = llvm::Type::getPrimitiveSizeInBits(v50);
      if (v51)
      {
        for (uint64_t i = 0; i != v51; ++i)
          *(unsigned char *)(*((void *)v17 + 6) + i) = *(unsigned char *)(*(void *)(v49 + 8) + i);
      }
      if (v51 < v25)
      {
        uint64_t v53 = v51;
        do
          *(unsigned char *)(*((void *)v17 + 6) + v53++) = -1;
        while (v25 != v53);
      }
    }
  }
  else
  {
    v114 = &v113;
    if (sub_1CBC5BF18(&v114, (uint64_t)a1))
    {
      uint64_t v54 = sub_1CD18FB70(v113, a2, a3, (a4 + 1), a5);
      if (*(unsigned char *)(v54 + 64))
      {
        uint64_t v55 = v54;
        v114 = *(void **)v54;
        v115 = &v117;
        long long v116 = xmmword_1CDC7F9D0;
        if (v25)
        {
          if (v25 >= 0x21) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          bzero(v115, v25);
          *(void *)&long long v116 = v25;
        }
        sub_1CD191A4C((void *)v17 + 5, &v114);
        if (v115 != &v117) {
          free(v115);
        }
        if (v25)
        {
          uint64_t v56 = 0;
          do
          {
            *(unsigned char *)(*((void *)v17 + 6) + v56) = *(unsigned char *)(*(void *)(v55 + 8) + v56);
            ++v56;
          }
          while (v25 != v56);
        }
      }
    }
    else
    {
      LODWORD(v114) = 8;
      v115 = 0;
      *(void *)&long long v116 = &v113;
      if (sub_1CC045310((uint64_t)&v114, (uint64_t)a1))
      {
        uint64_t v57 = sub_1CD18FB70(v113, a2, a3, (a4 + 1), a5);
        if (*(unsigned char *)(v57 + 64))
        {
          uint64_t v58 = v57;
          v114 = *(void **)v57;
          v115 = &v117;
          long long v116 = xmmword_1CDC7F9D0;
          if (v25)
          {
            if (v25 >= 0x21) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            bzero(v115, v25);
            *(void *)&long long v116 = v25;
          }
          sub_1CD191A4C((void *)v17 + 5, &v114);
          if (v115 != &v117) {
            free(v115);
          }
          if (v25)
          {
            uint64_t v59 = 0;
            unint64_t v60 = v25 - 1;
            do
              *(unsigned char *)(*((void *)v17 + 6) + v60--) = *(unsigned char *)(*(void *)(v58 + 8) + v59++);
            while (v25 != v59);
          }
        }
      }
      else
      {
        LODWORD(v114) = 9;
        v115 = 0;
        *(void *)&long long v116 = &v113;
        if (sub_1CC045310((uint64_t)&v114, (uint64_t)a1))
        {
          uint64_t v72 = sub_1CD18FB70(v113, a2, a3, (a4 + 1), a5);
          if (*(unsigned char *)(v72 + 64))
          {
            uint64_t v73 = v72;
            v114 = *(void **)v72;
            v115 = &v117;
            long long v116 = xmmword_1CDC7F9D0;
            if (v25)
            {
              if (v25 >= 0x21) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              bzero(v115, v25);
              *(void *)&long long v116 = v25;
            }
            sub_1CD191A4C((void *)v17 + 5, &v114);
            if (v115 != &v117) {
              free(v115);
            }
            if (v25 >= 8)
            {
              uint64_t v74 = 0;
              uint64_t v75 = 0;
              LODWORD(v76) = v25 >> 3;
              int v77 = v25 - 8;
              if (v25 >> 3 <= 1) {
                uint64_t v76 = 1;
              }
              else {
                uint64_t v76 = v76;
              }
              do
              {
                for (uint64_t j = 0; j != 8; ++j)
                  *(unsigned char *)(*((void *)v17 + 6) + (v77 + j)) = *(unsigned char *)(*(void *)(v73 + 8) + v74 + j);
                ++v75;
                v77 -= 8;
                v74 += 8;
              }
              while (v75 != v76);
            }
          }
        }
        else
        {
          LODWORD(v114) = 148;
          v115 = 0;
          *(void *)&long long v116 = &v113;
          *((void *)&v116 + 1) = 1;
          v117 = &v112;
          int v118 = 2;
          unint64_t v119 = &v111;
          uint64_t v120 = 0;
          if (!sub_1CD191F78((uint64_t)&v114, (uint64_t)a1))
          {
            int v103 = 149;
            uint64_t v104 = 0;
            v105 = &v113;
            uint64_t v106 = 1;
            v107 = &v112;
            int v108 = 2;
            v109 = &v111;
            uint64_t v110 = 0;
            if (!sub_1CD191F78((uint64_t)&v103, (uint64_t)a1))
            {
LABEL_32:
              if (!*a5)
              {
                *a5 = 1;
                v114 = a1;
                v115 = &v117;
                long long v116 = xmmword_1CDC7F9D0;
                if (v25)
                {
                  if (v25 >= 0x21) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  bzero(v115, v25);
                  *(void *)&long long v116 = v25;
                }
                sub_1CD191A4C((void *)v17 + 5, &v114);
                if (v115 != &v117) {
                  free(v115);
                }
                if (v25)
                {
                  uint64_t v27 = 0;
                  do
                  {
                    *(unsigned char *)(*((void *)v17 + 6) + v27) = v27;
                    ++v27;
                  }
                  while (v25 != v27);
                }
              }
              return v22;
            }
          }
          unsigned int v85 = llvm::APInt::urem((uint64_t **)v111, v25);
          if (*((_DWORD *)*(a1 - 4) + 9) == 149) {
            uint64_t v86 = v25 - v85;
          }
          else {
            uint64_t v86 = v85;
          }
          if ((a2 & 1) != 0 || (v86 & 7) == 0)
          {
            uint64_t v87 = (a4 + 1);
            uint64_t v88 = sub_1CD18FB70(v113, a2, a3, v87, a5);
            if (*(unsigned char *)(v88 + 64))
            {
              uint64_t v89 = v88;
              if (*(void *)v88)
              {
                uint64_t v90 = sub_1CD18FB70(v112, a2, a3, v87, a5);
                if (*(unsigned char *)(v90 + 64))
                {
                  uint64_t v91 = v90;
                  if (*(void *)v89 == *(void *)v90)
                  {
                    v114 = *(void **)v89;
                    v115 = &v117;
                    long long v116 = xmmword_1CDC7F9D0;
                    if (v25)
                    {
                      if (v25 >= 0x21) {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod();
                      }
                      bzero(v115, v25);
                      *(void *)&long long v116 = v25;
                    }
                    sub_1CD191A4C((void *)v17 + 5, &v114);
                    if (v115 != &v117) {
                      free(v115);
                    }
                    if (v25 != v86)
                    {
                      uint64_t v92 = 0;
                      do
                      {
                        *(unsigned char *)(*((void *)v17 + 6) + (v86 + v92)) = *(unsigned char *)(*(void *)(v89 + 8)
                                                                                                + v92);
                        ++v92;
                      }
                      while (v25 - v86 != v92);
                    }
                    if (v86)
                    {
                      for (uint64_t k = 0; k != v86; ++k)
                        *(unsigned char *)(*((void *)v17 + 6) + k) = *(unsigned char *)(*(void *)(v91 + 8)
                                                                        + (v25 - v86 + k));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v22;
}

uint64_t llvm::canReplaceOperandWithVariable(llvm *this, const llvm::Instruction *a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 216;
  __int16 v51 = 260;
  uint64_t v49 = (char *)v4;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v49);
  if ((v54 - 48) >= 2)
  {
    if (v54 != 27) {
      goto LABEL_25;
    }
    int v18 = *((unsigned __int8 *)this + 16);
    if ((v2 != 1 || v18 != 89) && (v2 != 2 || v18 != 90)) {
      goto LABEL_25;
    }
LABEL_21:
    uint64_t v19 = 0;
    goto LABEL_26;
  }
  unsigned int v5 = *((unsigned __int8 *)this + 16) - 33;
  BOOL v6 = v5 > 0x33;
  uint64_t v7 = (1 << v5) & 0x8000000000041;
  if (v6 || v7 == 0) {
    goto LABEL_25;
  }
  int v9 = (uint64_t ***)*((void *)this - 4);
  if (!v9 || *((unsigned char *)v9 + 16) || v9[3] != *((uint64_t ***)this + 9) || (*((unsigned char *)v9 + 23) & 0x10) == 0) {
    goto LABEL_25;
  }
  uint64_t v10 = ***v9;
  uint64_t v11 = *(void *)(v10 + 152);
  uint64_t v12 = *(unsigned int *)(v10 + 168);
  if (!v12) {
    goto LABEL_22;
  }
  LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
  unint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
  BOOL v15 = *v14;
  if (*v14 != v9)
  {
    int v16 = 1;
    while (v15 != (uint64_t ***)-4096)
    {
      int v17 = v13 + v16++;
      uint64_t v13 = v17 & (v12 - 1);
      BOOL v15 = *(uint64_t ****)(v11 + 16 * v13);
      if (v15 == v9)
      {
        unint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
        goto LABEL_23;
      }
    }
LABEL_22:
    unint64_t v14 = (uint64_t ****)(v11 + 16 * v12);
  }
LABEL_23:
  int v20 = v14[1];
  if ((unint64_t)*v20 >= 4 && *((_DWORD *)v20 + 4) == 779250017) {
    goto LABEL_21;
  }
LABEL_25:
  uint64_t v19 = 1;
LABEL_26:
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (v19)
  {
    int v21 = *((_DWORD *)this + 5);
    if ((v21 & 0x40000000) != 0) {
      uint64_t v22 = (char *)*((void *)this - 1);
    }
    else {
      uint64_t v22 = (char *)this - 32 * (v21 & 0x7FFFFFF);
    }
    int v23 = *(unsigned __int8 **)&v22[32 * v2];
    if (*(unsigned char *)(*(void *)v23 + 8) == 9) {
      return 0;
    }
    if (v23[16] > 0x14u) {
      return 1;
    }
    unsigned int v24 = *((unsigned __int8 *)this + 16);
    uint64_t v19 = 1;
    if (v24 <= 0x3D)
    {
      if (v24 == 31) {
        return v2 == 0;
      }
      if (v24 != 33)
      {
        if (v24 != 59) {
          return v19;
        }
        if (*(unsigned char *)(*((void *)this - 4) + 16) == 16)
        {
          uint64_t v25 = *((void *)this + 5);
          uint64_t v26 = *(void *)(*(void *)(v25 + 56) + 80);
          uint64_t v27 = v26 ? v26 - 24 : 0;
          if (v25 == v27) {
            return (*((unsigned __int16 *)this + 9) >> 6) & 1;
          }
        }
        return 1;
      }
LABEL_46:
      uint64_t v28 = *((void *)this - 4);
      int v29 = *(unsigned __int8 *)(v28 + 16);
      if (v29 == 24) {
        return 0;
      }
      if (v21 < 0)
      {
        uint64_t v45 = (char *)this - 32 * (v21 & 0x7FFFFFF);
        uint64_t v46 = *((void *)v45 - 1);
        if ((v46 & 0xFFFFFFFF0) != 0 && *(_DWORD *)&v45[-v46] <= v2 && *((_DWORD *)v45 - 3) > v2) {
          return 0;
        }
      }
      if (v24 == 84) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = 2;
      }
      int v31 = 0;
      uint64_t v32 = -(uint64_t)(v21 & 0x7FFFFFF);
      if (v21 < 0)
      {
        char v47 = (char *)this - 32 * (v21 & 0x7FFFFFF);
        uint64_t v48 = *((void *)v47 - 1);
        if ((v48 & 0xFFFFFFFF0) != 0) {
          int v31 = *((_DWORD *)v47 - 3) - *(_DWORD *)&v47[-v48];
        }
        else {
          int v31 = 0;
        }
      }
      unint64_t v33 = (-32 * v30 + 32 * (unint64_t)-v31 - 32 * v32 - 32) >> 5;
      BOOL v35 = v24 == 84 && v29 == 0;
      if (v33 <= v2)
      {
        if (!v35 || *(void *)(v28 + 24) != *((void *)this + 9)) {
          return 1;
        }
        return (*(unsigned char *)(v28 + 33) & 0x20) == 0;
      }
      if (v35)
      {
        uint64_t v36 = *(void *)(v28 + 24);
        uint64_t v37 = *((void *)this + 9);
        if (v36 == v37)
        {
          if ((*(unsigned char *)(v28 + 33) & 0x20) != 0 && *(_DWORD *)(v36 + 12) - 1 <= v2) {
            return *(_DWORD *)(v28 + 36) == 129;
          }
LABEL_79:
          if (*(_DWORD *)(v28 + 36) != 151) {
            return llvm::CallBase::paramHasAttr((uint64_t)this, v2, 9) ^ 1;
          }
          return 0;
        }
      }
      else
      {
        if (*(unsigned char *)(v28 + 16)) {
          return llvm::CallBase::paramHasAttr((uint64_t)this, v2, 9) ^ 1;
        }
        uint64_t v36 = *(void *)(v28 + 24);
        uint64_t v37 = *((void *)this + 9);
      }
      if (v36 == v37) {
        goto LABEL_79;
      }
      return llvm::CallBase::paramHasAttr((uint64_t)this, v2, 9) ^ 1;
    }
    switch(*((unsigned char *)this + 16))
    {
      case 'T':
        goto LABEL_46;
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return v19;
      case '[':
        return v2 != 2;
      case '\\':
        return v2 == 0;
      case ']':
        return v2 < 2;
      default:
        if (v24 != 62) {
          return v19;
        }
        if (!v2) {
          return 1;
        }
        uint64_t v39 = *((void *)this + 8);
        uint64_t v40 = (v21 & 0x40000000) != 0 ? (llvm *)*((void *)this - 1) : (llvm *)((char *)this - 32 * (v21 & 0x7FFFFFF));
        BOOL v41 = (char *)v40 + 32;
        uint64_t v49 = (char *)v40 + 32;
        unint64_t v50 = v39 | 4;
        __p[0] = (char *)v40 + 32;
        __p[1] = (void *)(v39 | 4);
        unint64_t v42 = v2 + 1;
        do
        {
          sub_1CB8460E4((uint64_t)__p);
          --v42;
        }
        while (v42 > 1);
        uint64_t v43 = (char *)__p[0];
        if (v41 == __p[0]) {
          return 1;
        }
        do
        {
          uint64_t v19 = (v50 >> 2) & 1;
          if ((v50 & 4) == 0) {
            break;
          }
          sub_1CB8460E4((uint64_t)&v49);
        }
        while (v49 != v43);
        break;
    }
  }
  return v19;
}

uint64_t llvm::inferAttributesFromOthers(llvm *this, llvm::Function *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 112);
  char v3 = (unsigned char *)*((void *)this + 14);
  if (!v3) {
    return 0;
  }
  if ((v3[16] & 8) != 0 || (v3[17] & 0x10) == 0 || (v3[12] & 0x40) != 0)
  {
    uint64_t v5 = 0;
  }
  else
  {
    char v3 = (unsigned char *)llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)this, -1, 35);
    *((void *)this + 14) = v3;
    uint64_t v5 = 1;
    if (!v3) {
      return v5;
    }
  }
  if ((v3[15] & 2) != 0
    || (v3[17] & 0x30) == 0
    || (char v3 = (unsigned char *)llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)this, -1, 25),
        *((void *)this + 14) = v3,
        uint64_t v5 = 1,
        v3))
  {
    if ((v3[14] & 1) == 0 && (v3[20] & 2) != 0)
    {
      *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)this, -1, 16);
      return 1;
    }
  }
  return v5;
}

uint64_t sub_1CD190E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (*(unsigned __int8 *)(a1 + 16) - 11 >= 2)
  {
    uint64_t v23 = a2;
    uint64_t v24 = a1;
    int v11 = *(_DWORD *)(a3 + 16);
    if (v11)
    {
      int v12 = v11 - 1;
      unsigned int v13 = v12 & ((a2 >> 4) ^ (a2 >> 9));
      unint64_t v14 = (uint64_t *)(*(void *)a3 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == a2) {
        return v3;
      }
      int v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          int v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        unint64_t v14 = (uint64_t *)(*(void *)a3 + 16 * v13);
        uint64_t v15 = *v14;
        if (*v14 == a2) {
          return v3;
        }
      }
      if (v16) {
        int v20 = v16;
      }
      else {
        int v20 = v14;
      }
    }
    else
    {
      int v20 = 0;
    }
    int v21 = sub_1CC0A3E2C(a3, (uint64_t)&v23, &v23, v20);
    *int v21 = v23;
    v21[1] = v24;
    return v3;
  }
  uint64_t v4 = *(unsigned int *)(a3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)a3;
    LODWORD(v6) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (uint64_t *)(*(void *)a3 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a2)
    {
LABEL_8:
      if (v7 != (uint64_t *)(v5 + 16 * v4)) {
        return v7[1];
      }
    }
    else
    {
      int v9 = 1;
      while (v8 != -4096)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & (v4 - 1);
        uint64_t v8 = *(void *)(v5 + 16 * v6);
        if (v8 == a2)
        {
          uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
          goto LABEL_8;
        }
      }
    }
  }
  return v3;
}

void *sub_1CD190FD4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 8 * v3;
      unsigned int v13 = (llvm::Instruction **)v4;
      do
      {
        if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v16 = 0;
          sub_1CD191114(*(void *)a1, *(_DWORD *)(a1 + 16), v13, &v16);
          *int v16 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  if (v14)
  {
    uint64_t v15 = 8 * v14;
    do
    {
      *result++ = -4096;
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_1CD191114(uint64_t a1, int a2, llvm::Instruction **a3, const llvm::Instruction ***a4)
{
  if (a2)
  {
    int v7 = *a3;
    int v8 = *((_DWORD *)*a3 + 5);
    if ((v8 & 0x40000000) != 0)
    {
      uint64_t v10 = (uint64_t *)*((void *)v7 - 1);
      uint64_t v9 = v8 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v9 = v8 & 0x7FFFFFF;
      uint64_t v10 = (uint64_t *)((char *)v7 - 32 * v9);
    }
    unint64_t v95 = sub_1CC87323C(v10, &v10[4 * v9]);
    int v13 = *((_DWORD *)v7 + 5);
    if ((v13 & 0x40000000) != 0)
    {
      uint64_t v15 = (char *)*((void *)v7 - 1);
      unint64_t v14 = v13 & 0x7FFFFFF;
    }
    else
    {
      unint64_t v14 = v13 & 0x7FFFFFF;
      uint64_t v15 = (char *)v7 - 32 * v14;
    }
    uint64_t v16 = *((unsigned int *)v7 + 15);
    int v17 = &v15[32 * v16];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v87 = &v15[32 * v16];
      uint64_t v88 = v15;
      uint64_t v89 = v16;
      int v90 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v16 = v89;
      uint64_t v15 = v88;
      int v91 = v90;
      int v17 = v87;
      if (v91)
      {
        unint64_t v92 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v92 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v92;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v16 = v89;
        uint64_t v15 = v88;
        int v17 = v87;
      }
    }
    unint64_t v18 = 8 * v14;
    if (v14 > 8)
    {
      unint64_t v28 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                 * (qword_1EBCBE580 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      uint64_t v29 = __ROR8__(qword_1EBCBE580 ^ 0xB492B66FBE98F273, 49);
      unint64_t v30 = qword_1EBCBE580 ^ ((unint64_t)qword_1EBCBE580 >> 47);
      unint64_t v31 = qword_1EBCBE580 ^ (((0x9DDFEA08EB382D69 * (v30 ^ (0xB492B66FBE98F273 * qword_1EBCBE580))) ^ qword_1EBCBE580) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ (0xB492B66FBE98F273 * qword_1EBCBE580)));
      uint64_t v32 = *((void *)v17 + 6);
      uint64_t v33 = *((void *)v17 + 7);
      uint64_t v34 = *((void *)v17 + 1);
      uint64_t v35 = v29 + qword_1EBCBE580 + v34;
      uint64_t v36 = *((void *)v17 + 5);
      unint64_t v37 = v36 + v29 - 0x4B6D499041670D8DLL * __ROR8__(v32 - 0x4B6D499041670D8CLL * qword_1EBCBE580, 42);
      uint64_t v38 = *(void *)v17 - 0x6D8ED9027DD26057 * qword_1EBCBE580;
      uint64_t v40 = *((void *)v17 + 2);
      uint64_t v39 = *((void *)v17 + 3);
      uint64_t v41 = v38 + v34 + v40;
      unint64_t v42 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v31) ^ ((0x9DDFEA08EB382D69 * v31) >> 47));
      unint64_t v43 = (0xB492B66FBE98F273 * __ROR8__(v35, 37)) ^ v42;
      uint64_t v44 = __ROR8__(v41, 44) + v38 + __ROR8__(v43 + v30 + v38 + v39, 21);
      uint64_t v45 = __ROR8__(v30 - 0x622015F714C7D297 * (v28 ^ (v28 >> 47)), 33);
      unint64_t v46 = 0xB492B66FBE98F273 * v45;
      uint64_t v47 = v41 + v39;
      uint64_t v48 = v42 + *((void *)v17 + 4) - 0x4B6D499041670D8DLL * v45;
      uint64_t v49 = v36 + v32 + v48;
      uint64_t v50 = __ROR8__(v49, 44) + v48 + __ROR8__(v40 + v37 + v33 + v48, 21);
      uint64_t v51 = v49 + v33;
      uint64_t v52 = (v18 & 0x3FFFFFC0) - 64;
      if (v52)
      {
        uint64_t v73 = &v15[32 * v16 + 120];
        do
        {
          unint64_t v74 = v37 + v47 + v46;
          uint64_t v75 = *((void *)v73 - 6);
          uint64_t v77 = *((void *)v73 - 2);
          uint64_t v76 = *((void *)v73 - 1);
          unint64_t v37 = v77 + v47 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v44 + v76, 42);
          uint64_t v78 = v43 + v51;
          uint64_t v79 = *((void *)v73 - 7) - 0x4B6D499041670D8DLL * v44;
          uint64_t v80 = *((void *)v73 - 4);
          uint64_t v81 = *((void *)v73 - 5);
          uint64_t v82 = v79 + v75 + v81;
          unint64_t v53 = (0xB492B66FBE98F273 * __ROR8__(v74 + v75, 37)) ^ v50;
          unint64_t v46 = 0xB492B66FBE98F273 * __ROR8__(v78, 33);
          uint64_t v44 = __ROR8__(v82, 44) + v79 + __ROR8__(v53 + v51 + v79 + v80, 21);
          uint64_t v47 = v82 + v80;
          unint64_t v83 = v46 + v50 + *((void *)v73 - 3);
          uint64_t v84 = *(void *)v73;
          v73 += 64;
          uint64_t v85 = __ROR8__(v37 + v81 + v83 + v84, 21);
          unint64_t v86 = v77 + v76 + v83;
          uint64_t v50 = v85 + v83 + __ROR8__(v86, 44);
          uint64_t v51 = v86 + v84;
          unint64_t v43 = v53;
          v52 -= 64;
        }
        while (v52);
      }
      else
      {
        unint64_t v53 = v43;
      }
      if ((v14 & 7) != 0)
      {
        int v54 = &v17[8 * v14];
        uint64_t v55 = *((void *)v54 - 7);
        uint64_t v56 = *((void *)v54 - 2);
        uint64_t v57 = *((void *)v54 - 1);
        uint64_t v58 = v51 + v53;
        unint64_t v59 = (0xB492B66FBE98F273 * __ROR8__(v37 + v46 + v47 + v55, 37)) ^ v50;
        uint64_t v61 = *((void *)v54 - 4);
        uint64_t v60 = *((void *)v54 - 3);
        unint64_t v37 = v60 + v47 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v44 + v56, 42);
        uint64_t v62 = v59 + v51;
        uint64_t v63 = *((void *)v54 - 8) - 0x4B6D499041670D8DLL * v44;
        int v66 = v54 - 48;
        uint64_t v65 = *((void *)v54 - 6);
        uint64_t v64 = *((void *)v66 + 1);
        uint64_t v67 = v63 + v55 + v65;
        unint64_t v46 = 0xB492B66FBE98F273 * __ROR8__(v58, 33);
        uint64_t v44 = __ROR8__(v67, 44) + v63 + __ROR8__(v62 + v63 + v64, 21);
        uint64_t v47 = v67 + v64;
        unint64_t v68 = v46 + v50 + v61;
        unint64_t v69 = v60 + v56 + v68;
        uint64_t v50 = __ROR8__(v69, 44) + v68 + __ROR8__(v37 + v65 + v68 + v57, 21);
        uint64_t v51 = v69 + v57;
        unint64_t v53 = v59;
      }
      unint64_t v70 = 0x9DDFEA08EB382D69
          * (v50 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v50)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v50)));
      uint64_t v71 = v46 - 0x5B6A4C820B386C68 * v14 - 0x622015F714C7D297 * (v70 ^ (v70 >> 47));
      unint64_t v72 = 0x9DDFEA08EB382D69
          * ((v53
            - 0x4B6D499041670D8DLL * (v37 ^ (v37 >> 47))
            - 0x622015F714C7D297
            * ((0x9DDFEA08EB382D69
              * (v51 ^ ((0x9DDFEA08EB382D69 * (v47 ^ v51)) >> 47) ^ (0x9DDFEA08EB382D69 * (v47 ^ v51)))) ^ ((0x9DDFEA08EB382D69 * (v51 ^ ((0x9DDFEA08EB382D69 * (v47 ^ v51)) >> 47) ^ (0x9DDFEA08EB382D69 * (v47 ^ v51)))) >> 47))) ^ v71);
      unint64_t v19 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v71 ^ (v72 >> 47) ^ v72)) ^ ((0x9DDFEA08EB382D69 * (v71 ^ (v72 >> 47) ^ v72)) >> 47));
    }
    else
    {
      unint64_t v19 = sub_1CBAE06B8(v17, v18, qword_1EBCBE580);
    }
    unint64_t v94 = v19;
    int v20 = 0;
    int v21 = a2 - 1;
    unsigned int v22 = (a2 - 1) & sub_1CCE6531C((uint64_t *)&v95, (uint64_t *)&v94);
    for (int i = 1; ; ++i)
    {
      uint64_t v11 = (const llvm::Instruction **)(a1 + 8 * v22);
      uint64_t v24 = (unsigned __int8 *)*a3;
      uint64_t v25 = *v11;
      if (((unint64_t)*a3 | 0x1000) == 0xFFFFFFFFFFFFF000
        || ((unint64_t)v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (v24 == (unsigned __int8 *)v25) {
          goto LABEL_27;
        }
      }
      else
      {
        if (llvm::Instruction::isIdenticalToWhenDefined(*a3, *v11)
          && (*((unsigned __int8 *)v25 + 17) ^ v24[17]) < 2)
        {
LABEL_27:
          uint64_t result = 1;
          goto LABEL_28;
        }
        uint64_t v25 = *v11;
      }
      if (v25 == (const llvm::Instruction *)-4096) {
        break;
      }
      if (v20) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v25 == (const llvm::Instruction *)-8192;
      }
      if (v26) {
        int v20 = (const llvm::Instruction **)(a1 + 8 * v22);
      }
      unsigned int v27 = v22 + i;
      unsigned int v22 = v27 & v21;
    }
    uint64_t result = 0;
    if (v20) {
      uint64_t v11 = v20;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_28:
  *a4 = v11;
  return result;
}

uint64_t sub_1CD19162C(uint64_t a1, llvm::Instruction **a2, const llvm::Instruction ***a3)
{
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v6 = 4;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      uint64_t v15 = 0;
      uint64_t result = 0;
      goto LABEL_30;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v7 = *a2;
  int v8 = *((_DWORD *)*a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    uint64_t v10 = (uint64_t *)*((void *)v7 - 1);
    uint64_t v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v9 = v8 & 0x7FFFFFF;
    uint64_t v10 = (uint64_t *)((char *)v7 - 32 * v9);
  }
  uint64_t v11 = 0;
  int v12 = v6 - 1;
  unsigned int v13 = (v6 - 1) & sub_1CC87323C(v10, &v10[4 * v9]);
  for (int i = 1; ; ++i)
  {
    uint64_t v15 = (const llvm::Instruction **)(v5 + 8 * v13);
    uint64_t v16 = (unsigned __int8 *)*a2;
    int v17 = *v15;
    if (*v15 == (const llvm::Instruction *)-8192
      || v16 == (unsigned __int8 *)-4096
      || v16 == (unsigned __int8 *)-8192
      || v17 == (const llvm::Instruction *)-4096)
    {
      if (v16 == (unsigned __int8 *)v17) {
        goto LABEL_25;
      }
    }
    else
    {
      if (llvm::Instruction::isIdenticalToWhenDefined(*a2, *v15)
        && (*((unsigned __int8 *)v17 + 17) ^ v16[17]) < 2)
      {
LABEL_25:
        uint64_t result = 1;
        goto LABEL_30;
      }
      int v17 = *v15;
    }
    if (v17 == (const llvm::Instruction *)-4096) {
      break;
    }
    if (v11) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v17 == (const llvm::Instruction *)-8192;
    }
    if (v18) {
      uint64_t v11 = (const llvm::Instruction **)(v5 + 8 * v13);
    }
    unsigned int v19 = v13 + i;
    unsigned int v13 = v19 & v12;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v15 = v11;
  }
LABEL_30:
  *a3 = v15;
  return result;
}

uint64_t sub_1CD191778(uint64_t result, llvm::Instruction **a2, llvm::Instruction **a3)
{
  uint64_t v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    int v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    int v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (((unint64_t)*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CD19162C((uint64_t)v5, a2, &v10);
      *uint64_t v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD191838(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(unsigned char *)(a2 + 64))
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v5 = (void **)(a1 + 8);
    if (v3)
    {
      if (a1 != a2)
      {
        int v6 = *(const void **)(a2 + 8);
        if (v6 == (const void *)(a2 + 32))
        {
          size_t v7 = *(void *)(a2 + 16);
          size_t v8 = *(void *)(a1 + 16);
          if (v8 >= v7)
          {
            if (v7) {
              memmove(*v5, v6, *(void *)(a2 + 16));
            }
          }
          else
          {
            if (*(void *)(a1 + 24) < v7)
            {
              *(void *)(a1 + 16) = 0;
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            if (v8)
            {
              size_t v18 = *(void *)(a1 + 16);
              memmove(*v5, v6, v8);
              size_t v8 = v18;
              uint64_t v5 = (void **)(a1 + 8);
            }
            uint64_t v9 = *(void *)(a2 + 16);
            if (v8 != v9) {
              memcpy((char *)*v5 + v8, (const void *)(*(void *)(a2 + 8) + v8), v9 - v8);
            }
          }
          *(void *)(a1 + 16) = v7;
          *(void *)(a2 + 16) = 0;
        }
        else
        {
          int v17 = *(void **)(a1 + 8);
          if (v17 != (void *)(a1 + 32))
          {
            free(v17);
            int v6 = *(const void **)(a2 + 8);
          }
          *(void *)(a1 + 8) = v6;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(void *)(a2 + 16) = 0;
          *(void *)(a2 + 24) = 0;
          *(void *)(a2 + 8) = a2 + 32;
        }
      }
    }
    else
    {
      *(void *)(a1 + 8) = a1 + 32;
      *(_OWORD *)(a1 + 16) = xmmword_1CDC7F9D0;
      int v12 = (void *)(a2 + 16);
      unint64_t v11 = *(void *)(a2 + 16);
      if (v11) {
        BOOL v13 = a1 == a2;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v14 = *(void *)(a2 + 8);
        uint64_t v15 = (const void *)(a2 + 32);
        if (v14 == a2 + 32)
        {
          if (v11 >= 0x21) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          memcpy((void *)(a1 + 32), v15, *(void *)(a2 + 16));
          *(void *)(a1 + 16) = v11;
        }
        else
        {
          *(void *)(a1 + 8) = v14;
          *(void *)(a1 + 16) = v11;
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a2 + 8) = v15;
          *(void *)(a2 + 24) = 0;
        }
        *int v12 = 0;
      }
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v10 = *(void **)(a1 + 8);
    if (v10 != (void *)(a1 + 32)) {
      free(v10);
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  return a1;
}

void *sub_1CD191A4C(void *a1, void *a2)
{
  int v4 = *((unsigned __int8 *)a1 + 64);
  *a1 = *a2;
  uint64_t v5 = (void **)(a1 + 1);
  if (v4)
  {
    if (a1 != a2)
    {
      int v6 = (void *)a2[1];
      if (v6 == a2 + 4)
      {
        size_t v7 = a2[2];
        size_t v8 = a1[2];
        if (v8 >= v7)
        {
          if (v7) {
            memmove(*v5, v6, a2[2]);
          }
        }
        else
        {
          if (a1[3] < v7)
          {
            a1[2] = 0;
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          if (v8)
          {
            int v17 = (void **)(a1 + 1);
            size_t v18 = a1[2];
            memmove(*v5, v6, v8);
            size_t v8 = v18;
            uint64_t v5 = v17;
          }
          uint64_t v9 = a2[2];
          if (v8 != v9) {
            memcpy((char *)*v5 + v8, (const void *)(a2[1] + v8), v9 - v8);
          }
        }
        a1[2] = v7;
        a2[2] = 0;
      }
      else
      {
        uint64_t v16 = (void *)a1[1];
        if (v16 != a1 + 4)
        {
          free(v16);
          int v6 = (void *)a2[1];
        }
        a1[1] = v6;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        a2[2] = 0;
        a2[3] = 0;
        a2[1] = a2 + 4;
      }
    }
  }
  else
  {
    a1[1] = a1 + 4;
    *((_OWORD *)a1 + 1) = xmmword_1CDC7F9D0;
    unint64_t v11 = a2 + 2;
    unint64_t v10 = a2[2];
    if (v10) {
      BOOL v12 = a1 == a2;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      BOOL v13 = (void *)a2[1];
      uint64_t v14 = a2 + 4;
      if (v13 == a2 + 4)
      {
        if (v10 >= 0x21) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        memcpy(a1 + 4, v14, a2[2]);
        a1[2] = v10;
      }
      else
      {
        a1[1] = v13;
        a1[2] = v10;
        a1[3] = a2[3];
        a2[1] = v14;
        a2[3] = 0;
      }
      *unint64_t v11 = 0;
    }
    *((unsigned char *)a1 + 64) = 1;
  }
  return a1;
}

uint64_t sub_1CD191C38(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(unsigned char *)(a2 + 64))
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v5 = (void **)(a1 + 8);
    if (v3)
    {
      if (a1 != a2)
      {
        size_t v6 = *(void *)(a2 + 16);
        size_t v7 = *(void *)(a1 + 16);
        if (v7 >= v6)
        {
          if (v6) {
            memmove(*v5, *(const void **)(a2 + 8), *(void *)(a2 + 16));
          }
        }
        else
        {
          if (*(void *)(a1 + 24) < v6)
          {
            *(void *)(a1 + 16) = 0;
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          if (v7)
          {
            size_t v13 = *(void *)(a1 + 16);
            memmove(*v5, *(const void **)(a2 + 8), v7);
            size_t v7 = v13;
          }
          uint64_t v8 = *(void *)(a2 + 16);
          if (v7 != v8) {
            memcpy((char *)*v5 + v7, (const void *)(*(void *)(a2 + 8) + v7), v8 - v7);
          }
        }
        *(void *)(a1 + 16) = v6;
      }
    }
    else
    {
      *(void *)(a1 + 8) = a1 + 32;
      *(_OWORD *)(a1 + 16) = xmmword_1CDC7F9D0;
      unint64_t v10 = *(void *)(a2 + 16);
      if (v10) {
        BOOL v11 = a1 == a2;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        if (v10 >= 0x21) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        memcpy((void *)(a1 + 32), *(const void **)(a2 + 8), *(void *)(a2 + 16));
        *(void *)(a1 + 16) = v10;
      }
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v9 = *(void **)(a1 + 8);
    if (v9 != (void *)(a1 + 32)) {
      free(v9);
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  return a1;
}

void *sub_1CD191DC4(void *result, char *a2, size_t __len)
{
  int v4 = result;
  uint64_t v6 = *result;
  uint64_t v5 = (char *)result[1];
  size_t v7 = &v5[__len];
  uint64_t v8 = (char *)result[2];
  if (&v5[*result] == a2)
  {
    if (v7 > v8) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (__len)
    {
      uint64_t result = memset(&v5[v6], 255, __len);
      uint64_t v5 = (char *)v4[1];
    }
    v4[1] = &v5[__len];
  }
  else
  {
    uint64_t v9 = &a2[-v6];
    if (v7 > v8) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    BOOL v11 = &v5[v6];
    size_t v12 = v5 - v9;
    if (__len > v5 - v9)
    {
      result[1] = &v5[__len];
      if (v9 != v5)
      {
        memcpy(&a2[__len], a2, v5 - &a2[-v6]);
        uint64_t result = memset(a2, 255, v12);
      }
      size_t v16 = __len - v12;
      if (__len != v12)
      {
        uint64_t v15 = v11;
        goto LABEL_13;
      }
    }
    else
    {
      if (result[2] < (unint64_t)&v5[__len]) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (__len)
      {
        uint64_t v13 = -(uint64_t)__len;
        uint64_t v14 = &v5[*result];
        do
          *v14++ = v11[v13++];
        while (v13);
        uint64_t v5 = (char *)result[1];
      }
      result[1] = &v5[__len];
      if (&v11[-__len] != a2) {
        uint64_t result = memmove(&a2[__len], a2, &v11[-__len] - a2);
      }
      if (__len)
      {
        uint64_t v15 = a2;
        size_t v16 = __len;
LABEL_13:
        return memset(v15, 255, v16);
      }
    }
  }
  return result;
}

BOOL sub_1CD191F78(uint64_t a1, uint64_t a2)
{
  return sub_1CC9F99A8(a1, a2)
      && a2
      && *(unsigned char *)(a2 + 16) == 84
      && (sub_1CBF528D8(a1 + 48, *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 40))) & 1) != 0;
}

uint64_t sub_1CD191FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

char *sub_1CD19207C(char **a1, _OWORD *a2, void *a3)
{
  uint64_t v3 = *a1;
  int v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  if (v6 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  uint64_t v10 = 3 * v6;
  BOOL v11 = (char *)operator new(24 * v6);
  size_t v12 = &v11[24 * v5];
  *(_OWORD *)size_t v12 = *a2;
  *((void *)v12 + 2) = *a3;
  uint64_t v13 = v12 + 24;
  if (v4 == v3)
  {
    uint64_t v14 = &v11[24 * v5];
  }
  else
  {
    do
    {
      uint64_t v14 = v12 - 24;
      long long v15 = *(_OWORD *)(v4 - 24);
      *((void *)v12 - 1) = *((void *)v4 - 1);
      *(_OWORD *)(v12 - 24) = v15;
      v4 -= 24;
      v12 -= 24;
    }
    while (v4 != v3);
  }
  *a1 = v14;
  a1[1] = v13;
  a1[2] = &v11[8 * v10];
  if (v3) {
    operator delete(v3);
  }
  return v13;
}

uint64_t sub_1CD1921A0(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 24);
}

llvm::MDNode *sub_1CD1921BC(unsigned int **a1, uint64_t a2)
{
  uint64_t v2 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(v2 + 32) + 24)
                 - 8 * *(unsigned int *)(*(void *)(*(void *)(v2 + 32) + 24) + 8)
                 + 24);
  if (*(unsigned char *)v3 != 11) {
    return 0;
  }
  int v4 = *(_DWORD *)(v3 + 52) - 5;
  if (v4 > 3) {
    return 0;
  }
  uint64_t v5 = qword_1CFB32BA8[v4];
  unint64_t v6 = *(void **)(*(void *)(v2 + 64) + 24);
  uint64_t v7 = **a1;
  uint64_t v8 = *a1[1];
  v10[0] = 4097;
  v10[1] = v7;
  v10[2] = v5;
  v10[3] = 4097;
  v10[4] = v8;
  v10[5] = v5;
  return llvm::DIExpression::appendToStack(v6, v10, 6);
}

void sub_1CD192264(void *a1)
{
  if (a1)
  {
    sub_1CD192264(*a1);
    sub_1CD192264(a1[1]);
    if (*((unsigned char *)a1 + 104))
    {
      uint64_t v2 = (char *)a1[6];
      if (v2 != (char *)(a1 + 9)) {
        free(v2);
      }
    }
    operator delete(a1);
  }
}

uint64_t sub_1CD1922CC(uint64_t *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 != 58) {
      return 0;
    }
    uint64_t v5 = *a1;
    if (*a1 != *(void *)(a2 - 64))
    {
LABEL_6:
      if (v5 == *(void *)(a2 - 32))
      {
        unint64_t v6 = *(llvm::Constant **)(a2 - 64);
        return sub_1CBF687D0((uint64_t)(a1 + 1), v6);
      }
      return 0;
    }
    if ((sub_1CBF687D0((uint64_t)(a1 + 1), *(llvm::Constant **)(a2 - 32)) & 1) == 0)
    {
      uint64_t v5 = *a1;
      goto LABEL_6;
    }
    return 1;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  uint64_t v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  uint64_t v9 = a2 - 32 * v8;
  uint64_t v10 = *a1;
  if (*a1 == *(void *)v9)
  {
    if (sub_1CBF68974((uint64_t)(a1 + 1), *(llvm::Constant **)(v9 + 32))) {
      return 1;
    }
    uint64_t v10 = *a1;
    uint64_t v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  }
  uint64_t v11 = a2 - 32 * v8;
  if (v10 != *(void *)(v11 + 32)) {
    return 0;
  }
  size_t v12 = *(llvm::Constant **)v11;

  return sub_1CBF68974((uint64_t)(a1 + 1), v12);
}

uint64_t sub_1CD1923E0()
{
  LOBYTE(v2) = 0;
  int v4 = &v2;
  int v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Perform extra assertion checking to verify that PHINodes's hash function is well-be"
                                     "haved w.r.t. its isEqual predicate";
  v1.n128_u64[1] = 117;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFC9A0, "phicse-debug-hash", (unsigned char **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFC9A0, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 32;
  int v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"When the basic block contains not more than this number of PHI nodes, perform a (fa"
                                     "ster!) exhaustive search instead of set-driven one.";
  v1.n128_u64[1] = 134;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCFCA60, "phicse-num-phi-smallsize", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFCA60, &dword_1CB82C000);
}

void llvm::canPeel(llvm *this, llvm::Loop *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  llvm::Loop::isLoopSimplifyForm(this);
}

void llvm::computePeelCount(llvm *a1, llvm::Loop *a2, _DWORD *a3)
{
  *a3 = 0;
  llvm::canPeel(a1, a2);
}

uint64_t sub_1CD193928(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v27 = a1;
  uint64_t v7 = a4 + 2;
  int v8 = *a4;
  if (*a4)
  {
    int v9 = 4;
    uint64_t v10 = a4 + 2;
  }
  else
  {
    uint64_t v10 = (int *)*((void *)a4 + 1);
    int v9 = a4[4];
    if (!v9)
    {
      uint64_t v12 = 0;
      goto LABEL_12;
    }
  }
  int v11 = v9 - 1;
  LODWORD(v12) = (v9 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v13 = (uint64_t *)&v10[4 * v12];
  uint64_t v14 = *v13;
  if (*v13 == a1) {
    goto LABEL_13;
  }
  int v15 = 1;
  while (v14 != -4096)
  {
    int v16 = v12 + v15++;
    uint64_t v12 = v16 & v11;
    uint64_t v14 = *(void *)&v10[4 * v12];
    if (v14 == a1) {
      goto LABEL_12;
    }
  }
  if (v8)
  {
    uint64_t v12 = 4;
    uint64_t v10 = a4 + 2;
  }
  else
  {
    uint64_t v10 = (int *)*((void *)a4 + 1);
    uint64_t v12 = a4[4];
  }
LABEL_12:
  uint64_t v13 = (uint64_t *)&v10[4 * v12];
LABEL_13:
  if ((v8 & 1) == 0) {
    uint64_t v7 = (int *)*((void *)a4 + 1);
  }
  unsigned int v17 = a4[4];
  if (*a4) {
    unsigned int v17 = 4;
  }
  if (&v7[4 * v17] == (int *)v13)
  {
    uint64_t v22 = sub_1CBF73380(a1, a3);
    sub_1CD19785C(a4, &v27)[1] = 0;
    if (llvm::Loop::isLoopInvariant(a2, v22))
    {
      unsigned int v23 = 0;
      int v24 = 1;
    }
    else
    {
      unint64_t v20 = 0;
      unsigned int v23 = 0;
      int v24 = 0;
      if (*(unsigned char *)(v22 + 16) != 83 || !v22) {
        goto LABEL_22;
      }
      if (*(void *)(v22 + 40) != **(void **)(a2 + 32))
      {
        LOBYTE(v18) = 0;
        unint64_t v20 = 0;
        unint64_t v21 = 0;
        int v19 = 0;
        return v20 & 0xFF00000000 | v18 | v21 | v19 & 0xFFFFFF00;
      }
      uint64_t v26 = sub_1CD193928(v22, a2, a3, a4);
      if ((v26 & 0xFF00000000) == 0)
      {
        unsigned int v23 = 0;
        unint64_t v20 = 0;
        int v24 = 0;
        goto LABEL_22;
      }
      unsigned int v23 = (v26 + 1) & 0xFFFFFF00;
      int v24 = (v26 + 1);
    }
    sub_1CD19785C(a4, &v27)[1] = v24 | v23 | 0x100000000;
    unint64_t v20 = 0x100000000;
LABEL_22:
    unint64_t v21 = 0;
    LODWORD(v18) = v20 | v24 | v23;
    int v19 = v18 & 0xFFFFFF00;
    return v20 & 0xFF00000000 | v18 | v21 | v19 & 0xFFFFFF00;
  }
  uint64_t v18 = v13[1];
  int v19 = v18 & 0xFFFFFF00;
  unint64_t v20 = v18 & 0xFFFFFFFF00000000;
  unint64_t v21 = v18 & 0xFFFFFF0000000000;
  return v20 & 0xFF00000000 | v18 | v21 | v19 & 0xFFFFFF00;
}

void sub_1CD193B2C()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
}

uint64_t llvm::gatherPeelingPreferences(uint64_t a1, uint64_t a2, void *a3, __int16 a4, __int16 a5, int a6)
{
  LODWORD(v10) = 0;
  WORD2(v10) = 1;
  BYTE6(v10) = 1;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(*(void *)*a3 + 192))(*a3, a1, a2, &v10);
  if (a6)
  {
    if (word_1EBD0C460) {
      LODWORD(v10) = dword_1EBD0C4D8;
    }
    if (word_1EBD0C520) {
      BYTE4(v10) = byte_1EBD0C598;
    }
    if (word_1EBD0C5E0) {
      BYTE5(v10) = byte_1EBD0C658;
    }
  }
  if ((a4 & 0xFF00) != 0) {
    BYTE4(v10) = a4;
  }
  if ((a5 & 0xFF00) != 0) {
    BYTE6(v10) = a5;
  }
  return v10;
}

void llvm::peelLoop(llvm *this, llvm::Loop *a2, llvm::LoopInfo *a3, llvm::LoopInfo *a4, llvm::ScalarEvolution *a5, llvm::DominatorTree *a6, llvm::AssumptionCache *a7)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  sub_1CBFCBAB0((uint64_t)v8, (uint64_t)this);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v8, a3);
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
}

uint64_t *sub_1CD19785C(_DWORD *a1, uint64_t *a2)
{
  int v8 = 0;
  char v4 = sub_1CD197940((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1CD1979E4((uint64_t)a1, v7);
    int v8 = 0;
    sub_1CD197940((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*result != -4096) {
    --a1[1];
  }
  uint64_t *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CD197940(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_9;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD1979E4(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CD197B70(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD197B70(a1, v14, v7);
}

uint64_t sub_1CD197B70(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CD197940((uint64_t)v5, v10, &v12);
      int v11 = v12;
      *uint64_t v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD197C34()
{
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Set the unroll peeling count, for testing purposes";
  v1.n128_u64[1] = 50;
  sub_1CD884D00(&v4, (long long *)&v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBD0C458, &dword_1CB82C000);
  LOBYTE(v2) = 1;
  unint64_t v4 = &v2;
  int v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Allows loops to be peeled when the dynamic trip count is known to be low.";
  v1.n128_u64[1] = 73;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBD0C518, "unroll-allow-peeling", (unsigned char **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0C518, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  unint64_t v4 = &v2;
  int v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Allows loop nests to be peeled.";
  v1.n128_u64[1] = 31;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBD0C5D8, "unroll-allow-loop-nests-peeling", (unsigned char **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0C5D8, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 7;
  unint64_t v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Max average trip count which will cause loop peeling.";
  v1.n128_u64[1] = 53;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCFCB20, "unroll-peel-max-count", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFCB20, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 0;
  unint64_t v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Force a peel count regardless of profiling information.";
  v1.n128_u64[1] = 55;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCFCBE0, "unroll-force-peel-count", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFCBE0, &dword_1CB82C000);
}

void llvm::LoopRotation(llvm::Loop *a1)
{
}

void sub_1CD19AF20()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
}

void *sub_1CD19B148(uint64_t a1, int32x2_t ****a2, int32x2_t ****a3)
{
  unsigned int v17 = a2;
  uint64_t v18 = 6;
  int v19 = 0;
  unint64_t v20 = a3;
  if (a3 != (int32x2_t ****)-8192 && a3 != (int32x2_t ****)-4096 && a3) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v18);
  }
  uint64_t result = sub_1CC4CEFAC(a1, &v17, (uint64_t)v21);
  if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
  {
    unint64_t v6 = v18 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v18 & 0xFFFFFFFFFFFFFFF8) = v19;
    if (v19)
    {
      *int v19 = *v19 & 7 | v6;
    }
    else
    {
      uint64_t v7 = v20;
      uint64_t v8 = ***v20;
      unint64_t v9 = (unint64_t)v8[303];
      if (v9 <= v6)
      {
        uint64_t v10 = v8[305].u32[0];
        if (v9 + 16 * v10 > v6)
        {
          unsigned int v11 = v10 - 1;
          LODWORD(v12) = v11 & ((v20 >> 4) ^ (v20 >> 9));
          uint64_t v13 = (int32x2_t *****)(v9 + 16 * v12);
          uint64_t v14 = *v13;
          if (v20 == *v13)
          {
LABEL_20:
            uint64_t *v13 = (int32x2_t ****)-8192;
            v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v7 = v20;
          }
          else
          {
            int v15 = 1;
            while (v14 != (int32x2_t ****)-4096)
            {
              int v16 = v12 + v15++;
              uint64_t v12 = v16 & v11;
              uint64_t v14 = *(int32x2_t *****)(v9 + 16 * v12);
              if (v20 == v14)
              {
                uint64_t v13 = (int32x2_t *****)(v9 + 16 * v12);
                goto LABEL_20;
              }
            }
          }
          *((unsigned char *)v7 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD19B294()
{
  char v3 = 0;
  unint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow loop rotation multiple times in order to reach a better latch exit";
  v1.n128_u64[1] = 72;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFCCA0, "loop-rotate-multi", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFCCA0, &dword_1CB82C000);
}

uint64_t llvm::InsertPreheaderForLoop(llvm *this, llvm::Loop *a2, llvm::DominatorTree *a3, llvm::LoopInfo *a4, llvm::MemorySSAUpdater *a5)
{
  int v5 = (int)a4;
  int v6 = (int)a3;
  int v7 = (int)a2;
  v44[8] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = **((void **)this + 4);
  unsigned int v43 = 0;
  uint64_t v10 = *(void *)(v9 + 8);
  if (v10)
  {
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 24);
      unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
      BOOL v13 = v11 && v12 >= 0x1C;
      if (v13 && v12 - 29 < 0xB) {
        break;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      if (!v10) {
        goto LABEL_11;
      }
    }
    unsigned int v17 = 0;
LABEL_12:
    uint64_t v18 = *(void *)(v11 + 40);
    uint64_t v20 = *((void *)this + 7);
    uint64_t v19 = *((void *)this + 8);
    if (v19 == v20)
    {
      uint64_t v21 = *((unsigned int *)this + 19);
      uint64_t v22 = (void *)(v19 + 8 * v21);
      if (v21)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 8 * v21;
        while (*(void *)(v19 + v23) != v18)
        {
          v23 += 8;
          if (v24 == v23) {
            goto LABEL_30;
          }
        }
        uint64_t v22 = (void *)(v19 + v23);
      }
LABEL_30:
      uint64_t v20 = *((void *)this + 8);
    }
    else
    {
      uint64_t v25 = *((unsigned int *)this + 18);
      int v26 = v25 - 1;
      unsigned int v27 = (v25 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v22 = (void *)(v19 + 8 * v27);
      uint64_t v28 = *v22;
      if (*v22 == -1)
      {
        uint64_t v29 = 0;
LABEL_54:
        if (v29) {
          uint64_t v22 = v29;
        }
        if (*v22 != v18) {
          uint64_t v22 = (void *)(v19 + 8 * v25);
        }
      }
      else
      {
        uint64_t v29 = 0;
        int v30 = 1;
        while (v28 != v18)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -2;
          }
          if (v31) {
            uint64_t v29 = v22;
          }
          unsigned int v32 = v27 + v30++;
          unsigned int v27 = v32 & v26;
          uint64_t v22 = (void *)(v19 + 8 * (v32 & v26));
          uint64_t v28 = *v22;
          if (*v22 == -1) {
            goto LABEL_54;
          }
        }
      }
    }
    if (v19 == v20) {
      uint64_t v33 = (char *)this + 76;
    }
    else {
      uint64_t v33 = (char *)this + 72;
    }
    if (v22 != (void *)(v19 + 8 * *(unsigned int *)v33)) {
      goto LABEL_44;
    }
    uint64_t v34 = *(void *)(v18 + 40);
    if (v34) {
      uint64_t v35 = v34 - 24;
    }
    else {
      uint64_t v35 = 0;
    }
    if (*(unsigned __int8 *)(v35 + 16) - 29 >= 0xB) {
      uint64_t v35 = 0;
    }
    int v36 = *(unsigned __int8 *)(v35 + 16);
    if (v36 == 32 || v36 == 39) {
      return 0;
    }
    if (v17 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v44[v17] = v18;
    unsigned int v17 = ++v43;
LABEL_44:
    while (1)
    {
      uint64_t v10 = *(void *)(v10 + 8);
      if (!v10) {
        break;
      }
      uint64_t v11 = *(void *)(v10 + 24);
      unsigned int v37 = *(unsigned __int8 *)(v11 + 16);
      if (v11) {
        BOOL v38 = v37 >= 0x1C;
      }
      else {
        BOOL v38 = 0;
      }
      if (v38 && v37 - 29 < 0xB) {
        goto LABEL_12;
      }
    }
    LODWORD(v16) = v44;
    int v15 = v17;
  }
  else
  {
LABEL_11:
    int v15 = 0;
    int v16 = v44;
  }
  uint64_t v40 = sub_1CD1271B8((uint64_t **)v9, (int)v16, v15, ".preheader", 0, v7, v6, v5, (char)a5);
  uint64_t v41 = v40;
  if (v40) {
    sub_1CD19B5F4(v40, v44, v43, (uint64_t)this);
  }
  return v41;
}

void sub_1CD19B5F4(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      uint64_t v6 = v5 - 24;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = a3;
    uint64_t v8 = a3;
    uint64_t v9 = a2;
    while (v6 != *v9)
    {
      ++v9;
      if (!--v8)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56);
        while (1)
        {
          uint64_t v12 = a2[v10];
          BOOL v13 = *(uint64_t **)(v12 + 32);
          if (v13 != (uint64_t *)(v11 + 72))
          {
            uint64_t v14 = v13 ? (uint64_t)(v13 - 3) : 0;
            uint64_t v15 = *(void *)(a4 + 56);
            uint64_t v16 = *(void *)(a4 + 64);
            if (v16 == v15)
            {
              uint64_t v17 = *(unsigned int *)(a4 + 76);
              uint64_t v18 = (void *)(v16 + 8 * v17);
              if (v17)
              {
                uint64_t v19 = 0;
                uint64_t v20 = 8 * v17;
                while (*(void *)(v16 + v19) != v14)
                {
                  v19 += 8;
                  if (v20 == v19) {
                    goto LABEL_31;
                  }
                }
                uint64_t v18 = (void *)(v16 + v19);
              }
LABEL_31:
              uint64_t v15 = *(void *)(a4 + 64);
            }
            else
            {
              uint64_t v21 = *(unsigned int *)(a4 + 72);
              int v22 = v21 - 1;
              unsigned int v23 = (v21 - 1) & ((v14 >> 4) ^ (v14 >> 9));
              uint64_t v18 = (void *)(v16 + 8 * v23);
              uint64_t v24 = *v18;
              if (*v18 == -1)
              {
                uint64_t v25 = 0;
LABEL_39:
                if (v25) {
                  uint64_t v18 = v25;
                }
                if (*v18 != v14) {
                  uint64_t v18 = (void *)(v16 + 8 * v21);
                }
              }
              else
              {
                uint64_t v25 = 0;
                int v26 = 1;
                while (v24 != v14)
                {
                  if (v25) {
                    BOOL v27 = 0;
                  }
                  else {
                    BOOL v27 = v24 == -2;
                  }
                  if (v27) {
                    uint64_t v25 = v18;
                  }
                  unsigned int v28 = v23 + v26++;
                  unsigned int v23 = v28 & v22;
                  uint64_t v18 = (void *)(v16 + 8 * (v28 & v22));
                  uint64_t v24 = *v18;
                  if (*v18 == -1) {
                    goto LABEL_39;
                  }
                }
              }
            }
            uint64_t v29 = (unsigned int *)(v16 == v15 ? a4 + 76 : a4 + 72);
            if (v18 != (void *)(v16 + 8 * *v29)) {
              break;
            }
          }
          if (++v10 == v7) {
            goto LABEL_44;
          }
        }
        if (v12) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 56);
LABEL_44:
    uint64_t v12 = *a2;
    BOOL v13 = *(uint64_t **)(*a2 + 32);
LABEL_45:
    int v30 = (uint64_t *)(a1 + 24);
    uint64_t v31 = *(void *)(v12 + 56) + 72;
    sub_1CC19E208(v31, v13, v11 + 72, v30);
  }
}

void sub_1CD19EB70(uint64_t a1)
{
}

uint64_t sub_1CD19EC20(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61F34C;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26485F0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFCD60, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD19EB70;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFCD60, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::LoopSimplifyPass::run()
{
}

uint64_t sub_1CD19EFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 8 * v9 == a2)
  {
    sub_1CBF846A4(a1, a3, a4);
    return *(void *)a1 + 8 * v8;
  }
  else
  {
    if (a3 == a4)
    {
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = a3;
      do
      {
        ++v10;
        do
        {
          uint64_t v11 = *(void *)(v11 + 8);
          if (!v11) {
            break;
          }
          uint64_t v12 = *(void *)(v11 + 24);
          unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
          BOOL v14 = v12 && v13 >= 0x1C;
        }
        while (!v14 || v13 - 29 > 0xA);
      }
      while (v11 != a4);
    }
    if (v10 + v9 > *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v16 = (unsigned char *)(v7 + 8 * v8);
    uint64_t v17 = (char *)(v7 + 8 * v9);
    unint64_t v18 = (v17 - v16) >> 3;
    if (v18 >= v10)
    {
      sub_1CD4570C8(a1, &v17[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v17[-8 * v10] != v16) {
        memmove(&v16[8 * v10], v16, &v17[-8 * v10] - v16);
      }
      if (v5 != a4)
      {
        uint64_t v29 = v16;
        do
        {
          *uint64_t v29 = *(void *)(*(void *)(v5 + 24) + 40);
          do
          {
            uint64_t v5 = *(void *)(v5 + 8);
            if (!v5) {
              break;
            }
            uint64_t v30 = *(void *)(v5 + 24);
            unsigned int v31 = *(unsigned __int8 *)(v30 + 16);
            BOOL v32 = v30 && v31 >= 0x1C;
          }
          while (!v32 || v31 - 29 > 0xA);
          ++v29;
        }
        while (v5 != a4);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v18), v16, v17 - v16);
        uint64_t v19 = v16;
        do
        {
          *v19++ = *(void *)(*(void *)(v5 + 24) + 40);
          do
          {
            uint64_t v5 = *(void *)(v5 + 8);
            if (!v5) {
              break;
            }
            uint64_t v20 = *(void *)(v5 + 24);
            unsigned int v21 = *(unsigned __int8 *)(v20 + 16);
            BOOL v22 = v20 && v21 >= 0x1C;
          }
          while (!v22 || v21 - 29 > 0xA);
          --v18;
        }
        while (v18);
      }
      while (v5 != a4)
      {
        *(void *)uint64_t v17 = *(void *)(*(void *)(v5 + 24) + 40);
        do
        {
          uint64_t v5 = *(void *)(v5 + 8);
          if (!v5) {
            break;
          }
          uint64_t v24 = *(void *)(v5 + 24);
          unsigned int v25 = *(unsigned __int8 *)(v24 + 16);
          BOOL v26 = v24 && v25 >= 0x1C;
        }
        while (!v26 || v25 - 29 > 0xA);
        v17 += 8;
      }
    }
  }
  return (uint64_t)v16;
}

void sub_1CD19F1C8()
{
}

void sub_1CD19F208(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD19F240(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&unk_1EA61F34B);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DependenceAnalysisWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&unk_1EA61F348);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1CD19F3A4(uint64_t a1, llvm::Function *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LoopInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass
    && (uint64_t v15 = (*(uint64_t (**)(uint64_t, char *))(*(void *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID)) != 0)
  {
    uint64_t v16 = *(llvm::LoopInfo **)(v15 + 32);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t **)(a1 + 8);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  if (v18 == v19)
  {
LABEL_18:
    uint64_t v20 = 0;
  }
  else
  {
    while (*(char **)v18 != llvm::AssumptionCacheTracker::ID)
    {
      v18 += 16;
      if (v18 == v19) {
        goto LABEL_18;
      }
    }
    uint64_t v20 = *(void *)(v18 + 8);
  }
  unsigned int v21 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v20 + 96))(v20, llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::ScalarEvolution *)llvm::AssumptionCacheTracker::getAssumptionCache(v21, a2);
  uint64_t v23 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (v23 && (*(uint64_t (**)(uint64_t, void *))(*(void *)v23 + 96))(v23, &llvm::MemorySSAWrapperPass::ID)) {
    operator new();
  }
  uint64_t v24 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &unk_1EA61F34B, 1);
  BOOL v26 = *(llvm ***)(v8 + 56);
  BOOL v27 = *(llvm ***)(v8 + 64);
  if (v26 == v27)
  {
    LOBYTE(v29) = 0;
  }
  else
  {
    uint64_t v28 = v24;
    int v29 = 0;
    uint64_t v30 = (llvm::DominatorTree *)(v8 + 32);
    unsigned int v31 = (llvm::Loop *)(v13 + 32);
    do
    {
      BOOL v32 = *v26++;
      v29 |= llvm::simplifyLoop(v32, v31, v30, v16, AssumptionCache, 0, (llvm::MemorySSAUpdater *)(v28 != 0), v25);
    }
    while (v26 != v27);
  }
  return v29 & 1;
}

void llvm::addClonedBlockToLoopInfo(uint64_t a1, int a2, uint64_t *a3, uint64_t __sz)
{
  int v6 = *((_DWORD *)a3 + 4);
  if (v6)
  {
    uint64_t v7 = *a3;
    unsigned int v8 = v6 - 1;
    uint64_t v9 = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v10 = *(void *)(*a3 + 16 * v9);
    if (v10 == a1)
    {
LABEL_6:
      uint64_t v13 = *(uint64_t **)(v7 + 16 * v9 + 8);
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v9 + v11++;
      uint64_t v9 = v12 & v8;
      uint64_t v10 = *(void *)(v7 + 16 * v9);
      if (v10 == a1) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v13 = 0;
LABEL_8:
  uint64_t v61 = v13;
  uint64_t v14 = __sz + 8;
  if (*(unsigned char *)__sz)
  {
    int v15 = 4;
    uint64_t v16 = __sz + 8;
  }
  else
  {
    int v15 = *(_DWORD *)(__sz + 16);
    if (!v15)
    {
      uint64_t v23 = 0;
      goto LABEL_18;
    }
    uint64_t v16 = *(void *)(__sz + 8);
  }
  int v17 = v15 - 1;
  unsigned int v18 = v17 & ((v13 >> 4) ^ (v13 >> 9));
  uint64_t v19 = (uint64_t **)(v16 + 16 * v18);
  uint64_t v20 = *v19;
  if (v13 == *v19) {
    goto LABEL_11;
  }
  unsigned int v21 = 0;
  int v22 = 1;
  while (v20 != (uint64_t *)-4096)
  {
    if (v21) {
      BOOL v47 = 0;
    }
    else {
      BOOL v47 = v20 == (uint64_t *)-8192;
    }
    if (v47) {
      unsigned int v21 = v19;
    }
    unsigned int v48 = v18 + v22++;
    unsigned int v18 = v48 & v17;
    uint64_t v19 = (uint64_t **)(v16 + 16 * v18);
    uint64_t v20 = *v19;
    if (v13 == *v19) {
      goto LABEL_11;
    }
  }
  if (v21) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v19;
  }
LABEL_18:
  uint64_t v19 = (uint64_t **)sub_1CC7B653C(__sz, (uint64_t)&v61, &v61, v23);
  *uint64_t v19 = v61;
  v19[1] = 0;
LABEL_11:
  if (v19[1]) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop();
  }
  a3[16] += 152;
  uint64_t v24 = a3[6];
  if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) - v24 + 152 > a3[7] - v24)
  {
    unsigned int v57 = *((_DWORD *)a3 + 18) >> 7;
    if (v57 >= 0x1E) {
      LOBYTE(v57) = 30;
    }
    uint64_t v58 = 4096 << v57;
    unint64_t v25 = (unint64_t)operator new(4096 << v57, (std::align_val_t)8uLL);
    unsigned int v59 = *((_DWORD *)a3 + 18);
    if (v59 >= *((_DWORD *)a3 + 19)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(a3[8] + 8 * v59) = v25;
    ++*((_DWORD *)a3 + 18);
    a3[7] = v25 + v58;
    uint64_t v14 = __sz + 8;
  }
  else
  {
    unint64_t v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  a3[6] = v25 + 152;
  *(void *)(v25 + 144) = 0;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 128) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)unint64_t v25 = 0u;
  *(void *)(v25 + 56) = v25 + 88;
  *(void *)(v25 + 64) = v25 + 88;
  *(_DWORD *)(v25 + 72) = 8;
  v19[1] = (uint64_t *)v25;
  uint64_t v26 = *v61;
  if (*(unsigned char *)__sz)
  {
    int v27 = 4;
  }
  else
  {
    int v27 = *(_DWORD *)(__sz + 16);
    if (!v27) {
      goto LABEL_47;
    }
    uint64_t v14 = *(void *)(__sz + 8);
  }
  int v28 = v27 - 1;
  uint64_t v29 = (v27 - 1) & ((v26 >> 4) ^ (v26 >> 9));
  uint64_t v30 = *(void *)(v14 + 16 * v29);
  if (v26 == v30)
  {
LABEL_26:
    unsigned int v31 = *(void **)(v14 + 16 * v29 + 8);
    if (v31)
    {
      *(void *)unint64_t v25 = v31;
      uint64_t v33 = (unint64_t *)v31[2];
      unint64_t v32 = v31[3];
      if ((unint64_t)v33 < v32)
      {
        *uint64_t v33 = v25;
        uint64_t v34 = v33 + 1;
LABEL_29:
        v31[2] = v34;
        goto LABEL_30;
      }
      uint64_t v35 = (void *)v31[1];
      uint64_t v36 = v33 - v35;
      unint64_t v37 = v36 + 1;
      if (!((unint64_t)(v36 + 1) >> 61))
      {
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 2 > v37) {
          unint64_t v37 = v38 >> 2;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (!v39)
        {
          uint64_t v40 = 0;
          goto LABEL_40;
        }
        if (!(v39 >> 61))
        {
          uint64_t v40 = (char *)operator new(8 * v39);
LABEL_40:
          uint64_t v41 = (unint64_t *)&v40[8 * v36];
          *uint64_t v41 = v25;
          uint64_t v34 = v41 + 1;
          if (v33 != v35)
          {
            do
            {
              unint64_t v42 = *--v33;
              *--uint64_t v41 = v42;
            }
            while (v33 != v35);
            uint64_t v33 = (unint64_t *)v31[1];
          }
          v31[1] = v41;
          v31[2] = v34;
          v31[3] = &v40[8 * v39];
          if (v33) {
            operator delete(v33);
          }
          goto LABEL_29;
        }
LABEL_83:
        sub_1CB833614();
      }
LABEL_82:
      abort();
    }
  }
  else
  {
    int v43 = 1;
    while (v30 != -4096)
    {
      int v60 = v29 + v43++;
      uint64_t v29 = v60 & v28;
      uint64_t v30 = *(void *)(v14 + 16 * v29);
      if (v26 == v30) {
        goto LABEL_26;
      }
    }
  }
LABEL_47:
  uint64_t v45 = (unint64_t *)a3[4];
  unint64_t v44 = a3[5];
  if ((unint64_t)v45 >= v44)
  {
    uint64_t v49 = (void *)a3[3];
    uint64_t v50 = v45 - v49;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61) {
      goto LABEL_82;
    }
    uint64_t v52 = v44 - (void)v49;
    if (v52 >> 2 > v51) {
      unint64_t v51 = v52 >> 2;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      if (v53 >> 61) {
        goto LABEL_83;
      }
      int v54 = (char *)operator new(8 * v53);
    }
    else
    {
      int v54 = 0;
    }
    uint64_t v55 = (unint64_t *)&v54[8 * v50];
    *uint64_t v55 = v25;
    unint64_t v46 = v55 + 1;
    if (v45 != v49)
    {
      do
      {
        unint64_t v56 = *--v45;
        *--uint64_t v55 = v56;
      }
      while (v45 != v49);
      uint64_t v45 = (unint64_t *)a3[3];
    }
    a3[3] = (uint64_t)v55;
    a3[4] = (uint64_t)v46;
    a3[5] = (uint64_t)&v54[8 * v53];
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *uint64_t v45 = v25;
    unint64_t v46 = v45 + 1;
  }
  a3[4] = (uint64_t)v46;
LABEL_30:
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop();
}

char **llvm::simplifyLoopAfterUnroll(llvm *this, llvm::Loop *a2, uint64_t a3, uint64_t ***a4, llvm::ScalarEvolution *a5, llvm::DSOLocalEquivalent **a6, llvm::AssumptionCache *a7, const llvm::TargetTransformInfo *a8)
{
  v93[8] = *MEMORY[0x1E4F143B8];
  if (a4 && a2)
  {
    uint64_t v88 = v90;
    uint64_t v89 = 0x1000000000;
    llvm::simplifyLoopIVs((uint64_t)this, a4, a5, (uint64_t *)a3, (uint64_t)a7, (unsigned int *)&v88);
    for (int i = v89; v89; int i = v89)
    {
      unsigned int v48 = v88;
      uint64_t v49 = &v88[24 * i];
      uint64_t v91 = 6;
      uint64_t v92 = 0;
      uint64_t v50 = *((void *)v49 - 1);
      v93[0] = v50;
      if (v50 && v50 != -8192 && v50 != -4096)
      {
        unint64_t v51 = *((void *)v49 - 3) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v92 = *(void *)v51;
        *(void *)unint64_t v51 = &v91;
        uint64_t v91 = v51 | 6;
        if (v92) {
          *(void *)uint64_t v92 = *(void *)v92 & 7 | (unint64_t)&v92;
        }
        unsigned int v48 = v88;
      }
      LODWORD(v89) = i - 1;
      uint64_t v52 = &v48[24 * (i - 1)];
      uint64_t v53 = *((void *)v52 + 2);
      if (v53 && v53 != -8192 && v53 != -4096)
      {
        unint64_t v54 = *(void *)v52 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v54 = *((void *)v52 + 1);
        uint64_t v55 = (unint64_t *)*((void *)v52 + 1);
        if (v55)
        {
          *uint64_t v55 = *v55 & 7 | v54;
        }
        else
        {
          uint64_t v56 = *((void *)v52 + 2);
          unsigned int v57 = ***(int32x2_t ****)v56;
          unint64_t v58 = (unint64_t)v57[303];
          if (v58 <= v54)
          {
            uint64_t v59 = v57[305].u32[0];
            if (v58 + 16 * v59 > v54)
            {
              unsigned int v60 = v59 - 1;
              LODWORD(v61) = v60 & ((v56 >> 4) ^ (v56 >> 9));
              uint64_t v62 = (uint64_t *)(v58 + 16 * v61);
              uint64_t v63 = *v62;
              if (v56 == *v62)
              {
LABEL_77:
                uint64_t *v62 = -8192;
                v57[304] = vadd_s32(v57[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v56 = *((void *)v52 + 2);
              }
              else
              {
                int v64 = 1;
                while (v63 != -4096)
                {
                  int v65 = v61 + v64++;
                  uint64_t v61 = v65 & v60;
                  uint64_t v63 = *(void *)(v58 + 16 * v61);
                  if (v56 == v63)
                  {
                    uint64_t v62 = (uint64_t *)(v58 + 16 * v61);
                    goto LABEL_77;
                  }
                }
              }
              *(unsigned char *)(v56 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v66 = v93[0];
      if (v93[0] != -8192)
      {
        BOOL v67 = v93[0] == -4096 || v93[0] == 0;
        if (!v67)
        {
          unint64_t v68 = v91 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v91 & 0xFFFFFFFFFFFFFFF8) = v92;
          if (v92)
          {
            *(void *)uint64_t v92 = *(void *)v92 & 7 | v68;
          }
          else
          {
            uint64_t v69 = v93[0];
            unint64_t v70 = ***(int32x2_t ****)v93[0];
            unint64_t v71 = (unint64_t)v70[303];
            if (v71 <= v68)
            {
              uint64_t v72 = v70[305].u32[0];
              if (v71 + 16 * v72 > v68)
              {
                unsigned int v73 = v72 - 1;
                LODWORD(v74) = v73 & ((LODWORD(v93[0]) >> 4) ^ (LODWORD(v93[0]) >> 9));
                uint64_t v75 = (uint64_t *)(v71 + 16 * v74);
                uint64_t v76 = *v75;
                if (v93[0] == *v75)
                {
LABEL_93:
                  *uint64_t v75 = -8192;
                  v70[304] = vadd_s32(v70[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v69 = v93[0];
                }
                else
                {
                  int v77 = 1;
                  while (v76 != -4096)
                  {
                    int v78 = v74 + v77++;
                    uint64_t v74 = v78 & v73;
                    uint64_t v76 = *(void *)(v71 + 16 * v74);
                    if (v93[0] == v76)
                    {
                      uint64_t v75 = (uint64_t *)(v71 + 16 * v74);
                      goto LABEL_93;
                    }
                  }
                }
                *(unsigned char *)(v69 + 17) &= ~1u;
              }
            }
          }
        }
      }
      if (v66 && *(unsigned __int8 *)(v66 + 16) >= 0x1Cu)
      {
        uint64_t v87 = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions(v66, 0, 0, (uint64_t)v86);
        if (v87 == v86)
        {
          (*(void (**)(void *))(v86[0] + 32))(v86);
        }
        else if (v87)
        {
          (*(void (**)(void))(*v87 + 40))();
        }
      }
    }
    sub_1CC2621C4(&v88);
  }
  uint64_t v12 = *((void *)this + 4);
  uint64_t v11 = *((void *)this + 5);
  uint64_t v13 = *(void *)(*(void *)(*(void *)v12 + 56) + 40);
  uint64_t v88 = v90;
  uint64_t v89 = 0x1000000000;
  uint64_t v80 = v11;
  if (v11 != v12)
  {
    uint64_t v14 = v13 + 272;
    do
    {
      uint64_t v81 = v12;
      uint64_t v15 = *(void *)v12 + 40;
      uint64_t v16 = *(void *)(*(void *)v12 + 48);
      while (v16 != v15)
      {
        uint64_t v17 = v16 - 24;
        BOOL v67 = v16 == 0;
        uint64_t v16 = *(void *)(v16 + 8);
        if (v67) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v17;
        }
        v82[0] = v14;
        v82[1] = 0;
        v82[2] = a5;
        v82[3] = a6;
        v82[4] = 0;
        __int16 v83 = 257;
        int v19 = *(_DWORD *)(v18 + 20);
        if ((v19 & 0x40000000) != 0)
        {
          unsigned int v21 = *(uint64_t **)(v18 - 8);
          unint64_t v20 = v19 & 0x7FFFFFF;
        }
        else
        {
          unint64_t v20 = v19 & 0x7FFFFFF;
          unsigned int v21 = (uint64_t *)(v18 - 32 * v20);
        }
        uint64_t v91 = (uint64_t)v93;
        uint64_t v92 = 0x800000000;
        if (v20 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v20)
        {
          uint64_t v22 = 32 * v20;
          uint64_t v23 = v93;
          do
          {
            uint64_t v24 = *v21;
            v21 += 4;
            *v23++ = v24;
            v22 -= 32;
          }
          while (v22);
          unint64_t v25 = (void *)v91;
        }
        else
        {
          unint64_t v25 = v93;
        }
        LODWORD(v92) = v20;
        uint64_t v26 = llvm::SimplifyInstructionWithOperands((llvm *)v18, (uint64_t)v25, v20, (uint64_t)v82, a5, a6, (uint64_t)a7);
        if ((void *)v91 != v93) {
          free((void *)v91);
        }
        if (v26)
        {
          if (*((unsigned __int8 *)v26 + 16) >= 0x1Cu)
          {
            uint64_t v29 = *((void *)v26 + 5);
            uint64_t v30 = *(void *)(v18 + 40);
            if (v29 != v30)
            {
              int v31 = *(_DWORD *)(a3 + 16);
              if (v31)
              {
                uint64_t v32 = *(void *)a3;
                unsigned int v33 = v31 - 1;
                LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
                uint64_t v35 = (uint64_t *)(*(void *)a3 + 16 * v34);
                uint64_t v36 = *v35;
                if (v29 == *v35)
                {
                  uint64_t v41 = (void *)v35[1];
                  if (v41)
                  {
LABEL_49:
                    uint64_t v42 = v33 & ((v30 >> 4) ^ (v30 >> 9));
                    uint64_t v43 = *(void *)(v32 + 16 * v42);
                    if (v30 == v43)
                    {
LABEL_53:
                      unint64_t v39 = *(void **)(v32 + 16 * v42 + 8);
                      goto LABEL_40;
                    }
                    int v44 = 1;
                    while (v43 != -4096)
                    {
                      int v45 = v42 + v44++;
                      uint64_t v42 = v45 & v33;
                      uint64_t v43 = *(void *)(v32 + 16 * v42);
                      if (v30 == v43) {
                        goto LABEL_53;
                      }
                    }
                    unint64_t v39 = 0;
LABEL_40:
                    while (v39 != v41)
                    {
                      if (!v39) {
                        goto LABEL_20;
                      }
                      unint64_t v39 = (void *)*v39;
                    }
                  }
                }
                else
                {
                  int v37 = 1;
                  while (v36 != -4096)
                  {
                    int v38 = v34 + v37++;
                    uint64_t v34 = v38 & v33;
                    uint64_t v36 = *(void *)(v32 + 16 * v34);
                    if (v29 == v36)
                    {
                      uint64_t v41 = *(void **)(v32 + 16 * v34 + 8);
                      if (v41) {
                        goto LABEL_49;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, v26, (llvm::Value *)1);
        }
LABEL_20:
        if (!*(void *)(v18 + 8) && llvm::wouldInstructionBeTriviallyDead(v18, 0))
        {
          uint64_t v91 = v18;
          int v27 = v89;
          if (v89 >= HIDWORD(v89))
          {
            sub_1CD1A4E88((unsigned int *)&v88, &v91);
          }
          else
          {
            int v28 = &v88[24 * v89];
            *(void *)int v28 = 6;
            *((void *)v28 + 1) = 0;
            *((void *)v28 + 2) = v18;
            if (v18 != -8192 && v18 != -4096)
            {
              if (v18)
              {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v28);
                int v27 = v89;
              }
            }
            LODWORD(v89) = v27 + 1;
          }
        }
      }
      uint64_t v85 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v88, 0, 0, (uint64_t)v84);
      if (v85 == v84)
      {
        (*(void (**)(void *))(v84[0] + 32))(v84);
        uint64_t v40 = v81;
      }
      else
      {
        uint64_t v40 = v81;
        if (v85) {
          (*(void (**)(void))(*v85 + 40))();
        }
      }
      uint64_t v12 = v40 + 8;
    }
    while (v12 != v80);
  }
  return sub_1CC2621C4(&v88);
}

void llvm::UnrollLoop(llvm::Loop *a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  __n128 v1 = a1;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
}

uint64_t sub_1CD1A4C60(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD1A520C(a1, *a2, &v10);
  if (result) {
    return result;
  }
  int v5 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_13:
    sub_1CD1A52B0(a1, v6);
    uint64_t v10 = 0;
    uint64_t result = sub_1CD1A520C(a1, *a2, &v10);
  }
  uint64_t v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *uint64_t v7 = *a2;
  uint64_t v8 = *a2;
  unsigned int v9 = *(_DWORD *)(a1 + 48);
  if (v9 >= *(_DWORD *)(a1 + 52)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 40) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

unsigned __int8 *llvm::GetUnrollMetadata(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 < 2) {
    return 0;
  }
  uint64_t v7 = -8 * v3;
  while (1)
  {
    uint64_t v8 = *(unsigned __int8 **)(v4 + v7);
    if (*v8 - 4 <= 0x1E)
    {
      uint64_t v9 = *(void *)&v8[-8 * *((unsigned int *)v8 + 2)];
      if (!*(unsigned char *)v9)
      {
        uint64_t v10 = *(uint64_t **)(v9 + 8);
        uint64_t v12 = *v10;
        uint64_t v11 = v10 + 3;
        if (a3 == v12 && (!a3 || !memcmp(a2, v11, a3))) {
          break;
        }
      }
    }
    v7 += 8;
    if (v7 == -8) {
      return 0;
    }
  }
  return v8;
}

uint64_t sub_1CD1A4E24(unsigned int a1)
{
  if (byte_1EBD064B8) {
    return 1;
  }
  if ((a1 & 0x40) != 0) {
    char v2 = 14;
  }
  else {
    char v2 = 7;
  }
  if (a1) {
    char v2 = 1;
  }
  unsigned int v3 = a1 >> v2;
  if (v3)
  {
    unsigned int v4 = 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    unsigned int v4 = (v3 >> 2) & 0xFE0 | (v3 >> 1) & 0x1F;
  }
  else
  {
    unsigned int v4 = (v3 >> 1) & 0x1F;
  }
  if (v4 <= 1) {
    return 1;
  }
  else {
    return v4;
  }
}

uint64_t sub_1CD1A4E88(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2 = a1[3];
  if (v2 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v5 = (2 * v2) | 1;
  if (v5 >= 0xFFFFFFFF) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = (unint64_t *)malloc_type_malloc(24 * v6, 0x4065EBACuLL);
  if (!v7) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v8 = v7;
  uint64_t v9 = (llvm::ValueHandleBase *)&v7[3 * a1[2]];
  uint64_t v10 = *a2;
  *(void *)uint64_t v9 = 6;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v10;
  if (v10 != -8192 && v10 != -4096 && v10) {
    llvm::ValueHandleBase::AddToUseList(v9);
  }
  sub_1CC26203C(a1, v8);
  if (*(unsigned int **)a1 != a1 + 4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v8;
  unsigned int v11 = a1[2] + 1;
  a1[2] = v11;
  a1[3] = v6;
  return (uint64_t)&v8[3 * v11 - 3];
}

void *sub_1CD1A4F7C(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  unsigned int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(88 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    unsigned int v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 88 * v10;
      do
      {
        void *result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = &v4[11 * v3];
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v15 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          uint64_t v17 = *a1 + 88 * v16;
          uint64_t v18 = *(void *)v17;
          if (v14 != *(void *)v17)
          {
            uint64_t v25 = 0;
            int v26 = 1;
            while (v18 != -4096)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v18 == -8192;
              }
              if (v27) {
                uint64_t v25 = v17;
              }
              unsigned int v28 = v16 + v26++;
              unsigned int v16 = v28 & v15;
              uint64_t v17 = *a1 + 88 * v16;
              uint64_t v18 = *(void *)v17;
              if (v14 == *(void *)v17) {
                goto LABEL_12;
              }
            }
            if (v25) {
              uint64_t v17 = v25;
            }
          }
LABEL_12:
          *(void *)uint64_t v17 = v14;
          uint64_t v19 = v13[1];
          uint64_t v20 = *(uint64_t *)((char *)v13 + 13);
          *(void *)(v17 + 24) = v17 + 40;
          *(void *)(v17 + 13) = v20;
          *(void *)(v17 + 8) = v19;
          *(void *)(v17 + 32) = 0x600000000;
          unsigned int v21 = *((_DWORD *)v13 + 8);
          if (v21 && (uint64_t *)v17 != v13)
          {
            uint64_t v22 = (uint64_t *)v13[3];
            if (v22 == v13 + 5)
            {
              if (v21 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v17 + 40), v22, 8 * *((unsigned int *)v13 + 8));
              *(_DWORD *)(v17 + 32) = v21;
            }
            else
            {
              *(void *)(v17 + 24) = v22;
              int v24 = *((_DWORD *)v13 + 9);
              *(_DWORD *)(v17 + 32) = v21;
              *(_DWORD *)(v17 + 36) = v24;
              v13[3] = (uint64_t)(v13 + 5);
              *((_DWORD *)v13 + 9) = 0;
            }
            *((_DWORD *)v13 + 8) = 0;
          }
          ++*((_DWORD *)a1 + 2);
          uint64_t v23 = (uint64_t *)v13[3];
          if (v23 != v13 + 5) {
            free(v23);
          }
        }
        v13 += 11;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  unsigned int v29 = *((_DWORD *)a1 + 4);
  if (v29)
  {
    uint64_t v30 = 88 * v29;
    do
    {
      void *result = -4096;
      result += 11;
      v30 -= 88;
    }
    while (v30);
  }
  return result;
}

uint64_t sub_1CD1A520C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD1A52B0(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CD1A542C(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD1A542C(a1, v14, v6);
}

uint64_t sub_1CD1A542C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v11 = 0;
      uint64_t result = sub_1CD1A520C((uint64_t)v5, v10, &v11);
      *BOOL v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD1A54E8()
{
  char v1 = 0;
  int v4 = 1;
  uint64_t v2 = &v1;
  v3.n128_u64[0] = (unint64_t)"Allow runtime unrolled loops to be unrolled with epilog instead of prolog.";
  v3.n128_u64[1] = 74;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFCD68, "unroll-runtime-epilog", &v2, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFCD68, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Verify domtree after unrolling";
  v3.n128_u64[1] = 30;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFCE28, "unroll-verify-domtree", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFCE28, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Verify loopinfo after unrolling";
  v3.n128_u64[1] = 31;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCFCEE8, "unroll-verify-loopinfo", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFCEE8, &dword_1CB82C000);
}

uint64_t llvm::UnrollAndJamLoop(llvm::Loop ****this, llvm::Loop *a2, int a3, unsigned int a4, BOOL a5, BOOL a6, llvm::LoopInfo *a7, llvm::ScalarEvolution *a8, llvm::DominatorTree *a9, llvm::AssumptionCache *a10, const llvm::TargetTransformInfo *a11, llvm::OptimizationRemarkEmitter *a12, llvm::Loop **a13)
{
  int v16 = (int)a2;
  v27[101] = *(void **)MEMORY[0x1E4F143B8];
  int v26 = (llvm::Loop *)this;
  int v25 = (int)a2;
  uint64_t v18 = *this[1];
  v24[16] = v18;
  if (a2 > 1 || a3)
  {
    if (a4 % a2)
    {
      LOBYTE(v22) = 1;
      llvm::UnrollRuntimeLoopRemainder((llvm *)this, a2, 0, 1, a5, 0, a6, a7, a8, a9, a10, v22, (BOOL)a12, v23);
    }
    if (a7)
    {
      llvm::ScalarEvolution::forgetLoop((int32x2_t *)a7, (const llvm::Loop *)this);
      llvm::ScalarEvolution::forgetLoop((int32x2_t *)a7, (const llvm::Loop *)v18);
    }
    if (v16 == a3) {
      llvm::Loop::getStartLoc((llvm::Loop *)this);
    }
    v24[0] = &v26;
    v24[1] = (llvm::Loop **)&v25;
    uint64_t v19 = ****(void ****)a11;
    if (*(void *)(v19 + 128))
    {
      if (a4 == 1) {
LABEL_12:
      }
        sub_1CD1AC354((uint64_t)v27, v24);
    }
    else
    {
      int v20 = (*(uint64_t (**)(void))(**(void **)(v19 + 72) + 48))(*(void *)(v19 + 72));
      if (a4 == 1)
      {
        if (v20) {
          goto LABEL_12;
        }
LABEL_14:
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
      }
      if (!v20) {
        goto LABEL_14;
      }
    }
    sub_1CD1AC354((uint64_t)v27, v24);
  }
  return 0;
}

uint64_t llvm::isSafeToUnrollAndJam(llvm *this, llvm::Loop *a2, llvm::ScalarEvolution *a3, llvm::DominatorTree *a4, llvm::DependenceInfo *a5, llvm::LoopInfo *a6)
{
  if (*((void *)this + 2) - *((void *)this + 1) == 8) {
    llvm::Loop::isLoopSimplifyForm(this);
  }
  return 0;
}

void sub_1CD1AB858()
{
}

uint64_t sub_1CD1AC0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (sub_1CD4A8B14(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4)) {
    return v4;
  }
  else {
    return *(void *)a1 + 72 * *(unsigned int *)(a1 + 16);
  }
}

uint64_t sub_1CD1AC130(llvm::Instruction *a1, llvm::Instruction *a2, uint64_t a3, unsigned int a4, int a5, llvm::DependenceInfo *this)
{
  if (a1 == a2 || *((unsigned char *)a1 + 16) == 60 && *((unsigned char *)a2 + 16) == 60) {
    return 1;
  }
  uint64_t v9 = 1;
  llvm::DependenceInfo::depends((uint64_t)this, a1, a2, 1, &v20);
  if (!v20) {
    return v9;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20)) {
    goto LABEL_7;
  }
  if (a3 < 2)
  {
LABEL_11:
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, a3);
    if (v10 != 2)
    {
      char v11 = v10;
      if (v10)
      {
        uint64_t v14 = v20;
        uint64_t v15 = (a3 + 1);
        while (v15 <= a4)
        {
          int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v15);
          if (v16 == 1) {
            break;
          }
          uint64_t v15 = (v15 + 1);
          if ((v16 & 4) != 0) {
            goto LABEL_7;
          }
        }
      }
      if ((v11 & 4) != 0)
      {
        uint64_t v17 = v20;
        uint64_t v18 = (a3 + 1);
        while (v18 <= a4)
        {
          int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 48))(v17, v18);
          if (v19 == 4) {
            goto LABEL_14;
          }
          uint64_t v9 = 0;
          uint64_t v18 = (v18 + 1);
          if (v19) {
            goto LABEL_15;
          }
        }
        if (!a5)
        {
LABEL_7:
          uint64_t v9 = 0;
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v9) & 2) != 0)
    {
      uint64_t v9 = (v9 + 1);
      if (a3 == v9) {
        goto LABEL_11;
      }
    }
  }
LABEL_14:
  uint64_t v9 = 1;
LABEL_15:
  uint64_t v12 = v20;
  uint64_t v20 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return v9;
}

void sub_1CD1AC354(uint64_t a1, llvm::Loop ***a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  llvm::Loop::getStartLoc(**a2);
}

void llvm::UnrollRuntimeLoopRemainder(llvm *this, llvm::Loop *a2, unsigned int a3, BOOL a4, BOOL a5, BOOL a6, BOOL a7, llvm::LoopInfo *a8, llvm::ScalarEvolution *a9, llvm::DominatorTree *a10, llvm::AssumptionCache *a11, const llvm::TargetTransformInfo *a12, BOOL a13, llvm::Loop **a14)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  llvm::Loop::isLoopSimplifyForm(this);
}

uint64_t sub_1CD1B47D0()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow runtime unrolling for loops with multiple exits, when epilog is generated";
  v1.n128_u64[1] = 79;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFCFA8, "unroll-runtime-multi-exit", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFCFA8, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Assume the non latch exit block to be predictable";
  v1.n128_u64[1] = 49;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFD068, "unroll-runtime-other-exit-predictable", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFD068, &dword_1CB82C000);
}

uint64_t llvm::formDedicatedExitBlocks(llvm *this, llvm::Loop *a2, llvm::DominatorTree *a3, llvm::LoopInfo *a4, llvm::MemorySSAUpdater *a5)
{
  char v80 = (char)a5;
  int v78 = (int)a3;
  int v79 = (int)a4;
  int v77 = (int)a2;
  v90[4] = *MEMORY[0x1E4F143B8];
  uint64_t v88 = v90;
  *(void *)uint64_t v89 = 0x400000000;
  __int16 v83 = v87;
  uint64_t v84 = v87;
  uint64_t v85 = 4;
  int v86 = 0;
  uint64_t v5 = *((void *)this + 4);
  uint64_t v76 = *((void *)this + 5);
  if (v76 == v5)
  {
    LOBYTE(v7) = 0;
    goto LABEL_159;
  }
  int v7 = 0;
  uint64_t v8 = (unsigned int *)((char *)this + 76);
  uint64_t v9 = (unsigned int *)((char *)this + 72);
  do
  {
    uint64_t v10 = *(void *)(*(void *)v5 + 40);
    uint64_t v81 = v5;
    if (v10 != *(void *)v5 + 40)
    {
      if (v10) {
        uint64_t v11 = v10 - 24;
      }
      else {
        uint64_t v11 = 0;
      }
      if (*(unsigned char *)(v11 + 16) != 30)
      {
        int v74 = 2;
        switch(*(unsigned char *)(v11 + 16))
        {
          case 0x1E:
            __break(1u);
            JUMPOUT(0x1CD1B4EF8);
          case 0x1F:
            int v74 = (*(_DWORD *)(v11 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_149;
          case 0x20:
          case 0x26:
            int v74 = (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_149;
          case 0x21:
            goto LABEL_12;
          case 0x24:
            int v74 = *(_WORD *)(v11 + 18) & 1;
            goto LABEL_149;
          case 0x25:
            int v74 = 1;
            goto LABEL_12;
          case 0x27:
            int v74 = *(_DWORD *)(v11 + 80) + 1;
LABEL_149:
            if (!v74) {
              goto LABEL_146;
            }
            goto LABEL_12;
          default:
            goto LABEL_146;
        }
      }
      if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 3) {
        int v74 = 2;
      }
      else {
        int v74 = 1;
      }
LABEL_12:
      unsigned int v12 = 0;
      while (1)
      {
        uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v11, v12);
        uint64_t v14 = Successor;
        uint64_t v16 = *((void *)this + 7);
        uint64_t v15 = *((void *)this + 8);
        if (v15 == v16)
        {
          uint64_t v17 = *v8;
          uint64_t v18 = (void *)(v15 + 8 * v17);
          if (v17)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 8 * v17;
            while (*(void *)(v15 + v19) != Successor)
            {
              v19 += 8;
              if (v20 == v19) {
                goto LABEL_31;
              }
            }
            uint64_t v18 = (void *)(v15 + v19);
          }
LABEL_31:
          uint64_t v16 = *((void *)this + 8);
        }
        else
        {
          uint64_t v21 = *v9;
          int v22 = v21 - 1;
          unsigned int v23 = (v21 - 1) & ((Successor >> 4) ^ (Successor >> 9));
          uint64_t v18 = (void *)(v15 + 8 * v23);
          uint64_t v24 = *v18;
          if (*v18 == -1)
          {
            int v25 = 0;
LABEL_61:
            if (v25) {
              uint64_t v18 = v25;
            }
            if (*v18 != Successor) {
              uint64_t v18 = (void *)(v15 + 8 * v21);
            }
          }
          else
          {
            int v25 = 0;
            int v26 = 1;
            while (v24 != Successor)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v24 == -2;
              }
              if (v27) {
                int v25 = v18;
              }
              unsigned int v28 = v23 + v26++;
              unsigned int v23 = v28 & v22;
              uint64_t v18 = (void *)(v15 + 8 * (v28 & v22));
              uint64_t v24 = *v18;
              if (*v18 == -1) {
                goto LABEL_61;
              }
            }
          }
        }
        if (v15 == v16) {
          unsigned int v29 = v8;
        }
        else {
          unsigned int v29 = v9;
        }
        if (v18 != (void *)(v15 + 8 * *v29)) {
          goto LABEL_137;
        }
        uint64_t v30 = v84;
        uint64_t v31 = HIDWORD(v85);
        if (v84 == v83)
        {
          if (HIDWORD(v85))
          {
            uint64_t v32 = 0;
            uint64_t v33 = 8 * HIDWORD(v85);
            uint64_t v34 = (uint64_t *)v84;
            while (*v34 != Successor)
            {
              if (*v34 == -2) {
                uint64_t v32 = v34;
              }
              ++v34;
              v33 -= 8;
              if (!v33)
              {
                if (!v32) {
                  goto LABEL_44;
                }
                uint64_t *v32 = Successor;
                --v86;
                goto LABEL_73;
              }
            }
            goto LABEL_137;
          }
LABEL_44:
          unsigned int v35 = v85;
          if (HIDWORD(v85) < v85)
          {
            ++HIDWORD(v85);
            *(void *)&v84[8 * v31] = Successor;
            goto LABEL_73;
          }
        }
        else
        {
          unsigned int v35 = v85;
        }
        if (3 * v35 <= 4 * (HIDWORD(v85) - v86)) {
          break;
        }
        if (v35 - HIDWORD(v85) < v35 >> 3) {
          goto LABEL_144;
        }
LABEL_49:
        unsigned int v36 = v35 - 1;
        unsigned int v37 = (v35 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        int v38 = &v30[8 * v37];
        uint64_t v39 = *(void *)v38;
        if (*(void *)v38 != -1)
        {
          uint64_t v40 = 0;
          int v41 = 1;
          while (v39 != v14)
          {
            if (v40) {
              BOOL v42 = 0;
            }
            else {
              BOOL v42 = v39 == -2;
            }
            if (v42) {
              uint64_t v40 = (uint64_t *)v38;
            }
            unsigned int v43 = v37 + v41++;
            unsigned int v37 = v43 & v36;
            int v38 = &v30[8 * (v43 & v36)];
            uint64_t v39 = *(void *)v38;
            if (*(void *)v38 == -1) {
              goto LABEL_66;
            }
          }
          goto LABEL_137;
        }
        uint64_t v40 = 0;
LABEL_66:
        if (v40) {
          int v44 = v40;
        }
        else {
          int v44 = (uint64_t *)v38;
        }
        if (*v44 == v14) {
          goto LABEL_137;
        }
        if (*v44 == -2) {
          --v86;
        }
        else {
          ++HIDWORD(v85);
        }
        *int v44 = v14;
LABEL_73:
        uint64_t v45 = *(void *)(v14 + 8);
        if (v45)
        {
          while (1)
          {
            uint64_t v46 = *(void *)(v45 + 24);
            unsigned int v47 = *(unsigned __int8 *)(v46 + 16);
            BOOL v48 = v46 && v47 >= 0x1C;
            if (v48 && v47 - 29 <= 0xA) {
              break;
            }
            uint64_t v45 = *(void *)(v45 + 8);
            if (!v45) {
              goto LABEL_83;
            }
          }
          int v82 = v7;
          char v51 = 1;
LABEL_84:
          uint64_t v52 = *(void *)(v46 + 40);
          uint64_t v54 = *((void *)this + 7);
          uint64_t v53 = *((void *)this + 8);
          if (v53 == v54)
          {
            uint64_t v55 = *v8;
            uint64_t v56 = (void *)(v53 + 8 * v55);
            if (v55)
            {
              uint64_t v57 = 0;
              uint64_t v58 = 8 * v55;
              while (*(void *)(v53 + v57) != v52)
              {
                v57 += 8;
                if (v58 == v57) {
                  goto LABEL_102;
                }
              }
              uint64_t v56 = (void *)(v53 + v57);
            }
LABEL_102:
            uint64_t v54 = *((void *)this + 8);
          }
          else
          {
            uint64_t v59 = *v9;
            int v60 = v59 - 1;
            unsigned int v61 = (v59 - 1) & ((v52 >> 4) ^ (v52 >> 9));
            uint64_t v56 = (void *)(v53 + 8 * v61);
            uint64_t v62 = *v56;
            if (*v56 == -1)
            {
              uint64_t v63 = 0;
LABEL_127:
              if (v63) {
                uint64_t v56 = v63;
              }
              if (*v56 != v52) {
                uint64_t v56 = (void *)(v53 + 8 * v59);
              }
            }
            else
            {
              uint64_t v63 = 0;
              int v64 = 1;
              while (v62 != v52)
              {
                if (v63) {
                  BOOL v65 = 0;
                }
                else {
                  BOOL v65 = v62 == -2;
                }
                if (v65) {
                  uint64_t v63 = v56;
                }
                unsigned int v66 = v61 + v64++;
                unsigned int v61 = v66 & v60;
                uint64_t v56 = (void *)(v53 + 8 * (v66 & v60));
                uint64_t v62 = *v56;
                if (*v56 == -1) {
                  goto LABEL_127;
                }
              }
            }
          }
          if (v53 == v54) {
            BOOL v67 = v8;
          }
          else {
            BOOL v67 = v9;
          }
          if (v56 == (void *)(v53 + 8 * *v67))
          {
            char v51 = 0;
            goto LABEL_117;
          }
          uint64_t v68 = *(void *)(v52 + 40);
          if (v68) {
            uint64_t v69 = v68 - 24;
          }
          else {
            uint64_t v69 = 0;
          }
          if (*(unsigned __int8 *)(v69 + 16) - 29 >= 0xB) {
            uint64_t v69 = 0;
          }
          int v70 = *(unsigned __int8 *)(v69 + 16);
          if (v70 == 32 || v70 == 39) {
            goto LABEL_133;
          }
          if (v89[0] >= (unint64_t)v89[1]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v88 + v89[0]++) = v52;
LABEL_117:
          while (1)
          {
            uint64_t v45 = *(void *)(v45 + 8);
            if (!v45) {
              break;
            }
            uint64_t v46 = *(void *)(v45 + 24);
            unsigned int v71 = *(unsigned __int8 *)(v46 + 16);
            if (v46) {
              BOOL v72 = v71 >= 0x1C;
            }
            else {
              BOOL v72 = 0;
            }
            if (v72 && v71 - 29 < 0xB) {
              goto LABEL_84;
            }
          }
          if (v51)
          {
LABEL_133:
            int v50 = 0;
          }
          else
          {
            sub_1CD1271B8((uint64_t **)v14, (int)v88, v89[0], ".loopexit", 0, v77, v78, v79, v80);
            int v50 = 1;
          }
          int v7 = v82;
        }
        else
        {
LABEL_83:
          int v50 = 0;
        }
        v89[0] = 0;
        v7 |= v50;
LABEL_137:
        if (v74 == ++v12) {
          goto LABEL_146;
        }
      }
      if (v35 >= 0x40) {
        v35 *= 2;
      }
      else {
        unsigned int v35 = 128;
      }
LABEL_144:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v83, v35);
      unsigned int v35 = v85;
      uint64_t v30 = v84;
      goto LABEL_49;
    }
LABEL_146:
    uint64_t v5 = v81 + 8;
  }
  while (v81 + 8 != v76);
  if (v84 != v83) {
    free(v84);
  }
LABEL_159:
  if (v88 != v90) {
    free(v88);
  }
  return v7 & 1;
}

void llvm::getOptionalElementCountLoopAttribute(llvm *this, const llvm::Loop *a2)
{
}

llvm::MDNode *llvm::makeFollowupLoopID(unsigned int *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  Impl = (llvm::MDNode *)a1;
  v33[8] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return Impl;
  }
  if (!a4)
  {
    uint64_t v30 = a3;
    __s = 0;
    v33[0] = 0;
    unsigned int v32 = 1;
LABEL_24:
    uint64_t v17 = a1[2];
    if (&a1[-2 * v17 + 2] == a1)
    {
      char v18 = 0;
    }
    else
    {
      char v18 = 0;
      uint64_t v19 = 8 - 8 * v17;
      unsigned int v20 = 1;
      do
      {
        if (__s
          && ((uint64_t v21 = *(void *)((char *)Impl + v19), v22 = *(unsigned int *)(v21 + 8), !v22)
           || (uint64_t v23 = *(void *)(v21 - 8 * v22), *(unsigned char *)v23)
           || (uint64_t v24 = *(size_t **)(v23 + 8), v26 = *v24, v25 = v24 + 3, v27 = strlen(__s), v26 < v27)
           || v27 && memcmp(v25, __s, v27)))
        {
          if (v20 >= 8) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v33[v20] = v21;
          unsigned int v20 = ++v32;
        }
        else
        {
          char v18 = 1;
        }
        v19 += 8;
      }
      while (v19);
    }
    int v9 = v18 & 1;
    a3 = v30;
    goto LABEL_5;
  }
  int v8 = *a4;
  v33[0] = 0;
  unsigned int v32 = 1;
  if (v8)
  {
    uint64_t v30 = a3;
    __s = a4;
    goto LABEL_24;
  }
  int v9 = a1[2] > 1;
LABEL_5:
  char v10 = 0;
  if (a3)
  {
    uint64_t v11 = a2 + 16 * a3;
    do
    {
      OptionMDForLoopID = llvm::findOptionMDForLoopID((uint64_t)Impl, *(void **)a2, *(void *)(a2 + 8));
      if (OptionMDForLoopID)
      {
        uint64_t v14 = *((unsigned int *)OptionMDForLoopID + 2);
        if (&OptionMDForLoopID[-8 * v14 + 8] == OptionMDForLoopID)
        {
          char v10 = 1;
        }
        else
        {
          unsigned int v15 = v32;
          uint64_t v16 = 8 - 8 * v14;
          do
          {
            if (v15 >= 8) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v33[v15] = *(void *)&OptionMDForLoopID[v16];
            unsigned int v15 = ++v32;
            char v10 = 1;
            int v9 = 1;
            v16 += 8;
          }
          while (v16);
        }
      }
      a2 += 16;
    }
    while (a2 != v11);
  }
  if ((a5 & 1) == 0 && (v10 & 1) == 0) {
    return 0;
  }
  if ((a5 | v9))
  {
    if (v32 == 1)
    {
      return 0;
    }
    else
    {
      uint64_t v28 = *((void *)Impl + 2);
      unsigned int v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFF8);
      if ((v28 & 4) != 0) {
        unsigned int v29 = (void *)*v29;
      }
      Impl = llvm::MDTuple::getImpl((uint64_t)v29, v33, v32, 0, 1);
      llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
    }
  }
  return Impl;
}

void llvm::hasDisableLICMTransformsHint(llvm *this, const llvm::Loop *a2)
{
}

void llvm::hasUnrollTransformation(llvm *this, const llvm::Loop *a2)
{
}

void llvm::hasUnrollAndJamTransformation(llvm *this, const llvm::Loop *a2)
{
}

void llvm::hasVectorizeTransformation(llvm *this, const llvm::Loop *a2)
{
}

uint64_t *llvm::collectChildrenInLoop@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x1000000000;
  uint64_t v5 = *result;
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6 == v7)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 76);
    int v9 = (void *)(v6 + 8 * v8);
    if (v8)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v8;
      while (*(void *)(v6 + v10) != v5)
      {
        v10 += 8;
        if (v11 == v10) {
          goto LABEL_6;
        }
      }
      int v9 = (void *)(v6 + v10);
    }
LABEL_6:
    uint64_t v7 = *(void *)(a2 + 64);
  }
  else
  {
    uint64_t v36 = *(unsigned int *)(a2 + 72);
    int v37 = v36 - 1;
    unsigned int v38 = (v36 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    int v9 = (void *)(v6 + 8 * v38);
    uint64_t v39 = *v9;
    if (*v9 == -1)
    {
      uint64_t v40 = 0;
LABEL_60:
      if (v40) {
        int v9 = v40;
      }
      if (*v9 != v5) {
        int v9 = (void *)(v6 + 8 * v36);
      }
    }
    else
    {
      uint64_t v40 = 0;
      int v41 = 1;
      while (v39 != v5)
      {
        if (v40) {
          BOOL v42 = 0;
        }
        else {
          BOOL v42 = v39 == -2;
        }
        if (v42) {
          uint64_t v40 = v9;
        }
        unsigned int v43 = v38 + v41++;
        unsigned int v38 = v43 & v37;
        int v9 = (void *)(v6 + 8 * (v43 & v37));
        uint64_t v39 = *v9;
        if (*v9 == -1) {
          goto LABEL_60;
        }
      }
    }
  }
  BOOL v34 = v6 == v7;
  uint64_t v12 = 72;
  if (v34) {
    uint64_t v12 = 76;
  }
  if (v9 != (void *)(v6 + 8 * *(unsigned int *)(a2 + v12)))
  {
    unint64_t v13 = 0;
    *(void *)(a3 + 16) = result;
    uint64_t v14 = 1;
    *(_DWORD *)(a3 + 8) = 1;
    uint64_t v15 = 1;
    do
    {
      uint64_t v16 = *(void *)(*(void *)a3 + 8 * v13);
      uint64_t v17 = *(unsigned int *)(v16 + 32);
      if (v17)
      {
        char v18 = *(uint64_t ****)(v16 + 24);
        uint64_t v19 = &v18[v17];
        do
        {
          unsigned int v20 = **v18;
          uint64_t v22 = *(void *)(a2 + 56);
          uint64_t v21 = *(void *)(a2 + 64);
          if (v21 == v22)
          {
            uint64_t v23 = *(unsigned int *)(a2 + 76);
            uint64_t v24 = (uint64_t **)(v21 + 8 * v23);
            if (v23)
            {
              uint64_t v25 = 0;
              uint64_t v26 = 8 * v23;
              while (*(uint64_t **)(v21 + v25) != v20)
              {
                v25 += 8;
                if (v26 == v25) {
                  goto LABEL_18;
                }
              }
              uint64_t v24 = (uint64_t **)(v21 + v25);
            }
LABEL_18:
            uint64_t v22 = *(void *)(a2 + 64);
          }
          else
          {
            uint64_t v29 = *(unsigned int *)(a2 + 72);
            int v30 = v29 - 1;
            unsigned int v31 = (v29 - 1) & ((v20 >> 4) ^ (v20 >> 9));
            uint64_t v24 = (uint64_t **)(v21 + 8 * v31);
            uint64_t result = *v24;
            if (*v24 == (uint64_t *)-1)
            {
              unsigned int v32 = 0;
LABEL_40:
              if (v32) {
                uint64_t v24 = v32;
              }
              if (*v24 != v20) {
                uint64_t v24 = (uint64_t **)(v21 + 8 * v29);
              }
            }
            else
            {
              unsigned int v32 = 0;
              int v33 = 1;
              while (result != v20)
              {
                if (v32) {
                  BOOL v34 = 0;
                }
                else {
                  BOOL v34 = result == (uint64_t *)-2;
                }
                if (v34) {
                  unsigned int v32 = v24;
                }
                unsigned int v35 = v31 + v33++;
                unsigned int v31 = v35 & v30;
                uint64_t v24 = (uint64_t **)(v21 + 8 * (v35 & v30));
                uint64_t result = *v24;
                if (*v24 == (uint64_t *)-1) {
                  goto LABEL_40;
                }
              }
            }
          }
          if (v21 == v22) {
            size_t v27 = (unsigned int *)(a2 + 76);
          }
          else {
            size_t v27 = (unsigned int *)(a2 + 72);
          }
          if (v24 != (uint64_t **)(v21 + 8 * *v27))
          {
            if (v15 >= *(_DWORD *)(a3 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a3 + 8 * v15) = *v18;
            uint64_t v14 = (*(_DWORD *)(a3 + 8) + 1);
            *(_DWORD *)(a3 + 8) = v14;
            LODWORD(v15) = v14;
          }
          ++v18;
          uint64_t v28 = v14;
        }
        while (v18 != v19);
      }
      else
      {
        uint64_t v28 = v15;
      }
      ++v13;
      uint64_t v15 = v28;
    }
    while (v13 < v28);
  }
  return result;
}

void llvm::deleteDeadLoop(llvm *this, llvm::Loop *a2, llvm::DominatorTree *a3, llvm::ScalarEvolution *a4, llvm::LoopInfo *a5, llvm::MemorySSA *a6)
{
}

void llvm::breakLoopBackedge(llvm *this, llvm::Loop *a2, llvm::DominatorTree *a3, llvm::ScalarEvolution *a4, llvm::LoopInfo *a5, llvm::MemorySSA *a6)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
}

void sub_1CD1B7924()
{
}

void llvm::setLoopEstimatedTripCount(llvm *this, llvm::Loop *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_1CD1B7924();
}

llvm::Value *llvm::createSelectCmpOp(llvm::IRBuilderBase *a1, unsigned __int8 *VectorSplat, uint64_t a3, llvm::Value *a4, llvm::Value *a5)
{
  if (*(void *)a4) {
    BOOL v9 = (*(_DWORD *)(*(void *)a4 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = (llvm::Type *)(*(unsigned int *)(*(void *)a4 + 32) | ((unint64_t)(*(_DWORD *)(*(void *)a4 + 8) == 19) << 32));
    __int16 v14 = 257;
    VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)a1, v10, VectorSplat, (uint64_t)v13);
  }
  v13[0] = "rdx.select.cmp";
  __int16 v14 = 259;
  uint64_t v11 = sub_1CB845F20((uint64_t)a1, 33, a4, (uint64_t)VectorSplat, (uint64_t)v13);
  v13[0] = "rdx.select";
  __int16 v14 = 259;
  return llvm::IRBuilderBase::CreateSelect(a1, v11, a4, a5, (const llvm::Twine *)v13, 0);
}

uint64_t llvm::propagateIRFlags(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (*(unsigned __int8 *)(result + 16) >= 0x1Cu)
    {
      uint64_t v7 = a2;
      if (a4)
      {
        unsigned int v8 = *(unsigned __int8 *)(a4 + 16);
        uint64_t v9 = a4;
        if (v8 < 0x1C) {
          return result;
        }
      }
      else
      {
        uint64_t v9 = *a2;
        unsigned int v8 = *(unsigned __int8 *)(*v7 + 16);
        if (v8 <= 0x1B) {
          return result;
        }
      }
      uint64_t result = llvm::Instruction::copyIRFlags(result, v9, 1);
      if (a3)
      {
        uint64_t v10 = 8 * a3;
        do
        {
          uint64_t v11 = *v7;
          unsigned int v12 = *(unsigned __int8 *)(*v7 + 16);
          if (a4) {
            BOOL v13 = v8 == v12;
          }
          else {
            BOOL v13 = 1;
          }
          int v14 = v13;
          if (v11) {
            BOOL v15 = v12 >= 0x1C;
          }
          else {
            BOOL v15 = 0;
          }
          if (v15 && v14 != 0) {
            uint64_t result = llvm::Instruction::andIRFlags(v4, v11);
          }
          ++v7;
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
  return result;
}

void llvm::rewriteLoopExitValues(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::SCEVExpander *a6, uint64_t a7, int a8)
{
  v123[8] = *MEMORY[0x1E4F143B8];
  uint64_t v112 = &v114;
  uint64_t v113 = 0x800000000;
  sub_1CC082408(a1, (uint64_t)&v112);
  v109 = a2;
  v110[0] = &v111;
  v110[1] = (void *)0x800000000;
  if (!v113) {
LABEL_179:
  }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
  uint64_t v10 = (char *)v112;
  unsigned int v101 = (char *)v112 + 8 * v113;
  uint64_t v11 = a1 + 19;
  v107 = a1 + 18;
  while (1)
  {
    uint64_t v104 = v10;
    uint64_t v12 = *(void *)(*(void *)v10 + 48);
    uint64_t v13 = v12 - 24;
    uint64_t v14 = v12 ? v12 - 24 : 0;
    if (v12 && *(unsigned char *)(v14 + 16) == 83 && *(unsigned char *)(v12 - 8) == 83) {
      break;
    }
LABEL_178:
    uint64_t v10 = v104 + 8;
    if (v104 + 8 == v101) {
      goto LABEL_179;
    }
  }
  uint64_t v15 = *(_DWORD *)(v14 + 20) & 0x7FFFFFF;
  while (1)
  {
    uint64_t v106 = *(void *)(v12 + 8);
    if (*(void *)(v13 + 8))
    {
      if ((*(_DWORD *)(*(void *)v13 + 8) & 0xFD) == 0xD && v15 != 0) {
        break;
      }
    }
LABEL_16:
    uint64_t v12 = v106;
    uint64_t v17 = v106 - 24;
    if (!v106) {
      uint64_t v17 = 0;
    }
    int v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 == 83) {
      uint64_t v13 = v17;
    }
    else {
      uint64_t v13 = 0;
    }
    if (!v106 || v18 != 83) {
      goto LABEL_178;
    }
  }
  uint64_t v19 = 0;
  while (1)
  {
    int v20 = *(_DWORD *)(v13 + 20);
    if ((v20 & 0x40000000) != 0)
    {
      uint64_t v21 = *(void *)(v13 - 8);
      unint64_t v22 = *(void *)(v21 + 32 * v19);
      if (*(unsigned __int8 *)(v22 + 16) < 0x1Cu) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v21 = v13 - 32 * (v20 & 0x7FFFFFF);
      unint64_t v22 = *(void *)(v21 + 32 * v19);
      if (*(unsigned __int8 *)(v22 + 16) <= 0x1Bu) {
        goto LABEL_36;
      }
    }
    int v23 = *((_DWORD *)a2 + 4);
    if (!v23) {
      goto LABEL_34;
    }
    uint64_t v24 = *(void *)(v21 + 32 * *(unsigned int *)(v13 + 60) + 8 * v19);
    uint64_t v25 = *a2;
    unsigned int v26 = v23 - 1;
    uint64_t v27 = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
    uint64_t v28 = *(void *)(*a2 + 16 * v27);
    if (v24 != v28) {
      break;
    }
LABEL_33:
    unsigned int v31 = *(unsigned int **)(v25 + 16 * v27 + 8);
LABEL_35:
    if (v31 != a1) {
      goto LABEL_36;
    }
    uint64_t v32 = *(void *)(v22 + 40);
    uint64_t v34 = *((void *)a1 + 7);
    uint64_t v33 = *((void *)a1 + 8);
    if (v33 == v34)
    {
      uint64_t v35 = *v11;
      uint64_t v36 = (void *)(v33 + 8 * v35);
      int v37 = a1 + 18;
      if (v35)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v35;
        while (*(void *)(v33 + v38) != v32)
        {
          v38 += 8;
          if (v39 == v38) {
            goto LABEL_56;
          }
        }
        uint64_t v36 = (void *)(v33 + v38);
      }
LABEL_56:
      uint64_t v34 = *((void *)a1 + 8);
    }
    else
    {
      int v37 = a1 + 18;
      uint64_t v40 = *v107;
      int v41 = v40 - 1;
      unsigned int v42 = (v40 - 1) & ((v32 >> 4) ^ (v32 >> 9));
      uint64_t v36 = (void *)(v33 + 8 * v42);
      uint64_t v43 = *v36;
      if (*v36 == -1)
      {
        int v44 = 0;
LABEL_167:
        if (v44) {
          uint64_t v36 = v44;
        }
        if (*v36 != v32) {
          uint64_t v36 = (void *)(v33 + 8 * v40);
        }
      }
      else
      {
        int v44 = 0;
        int v45 = 1;
        while (v43 != v32)
        {
          if (v44) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = v43 == -2;
          }
          if (v46) {
            int v44 = v36;
          }
          unsigned int v47 = v42 + v45++;
          unsigned int v42 = v47 & v41;
          uint64_t v36 = (void *)(v33 + 8 * (v47 & v41));
          uint64_t v43 = *v36;
          if (*v36 == -1) {
            goto LABEL_167;
          }
        }
      }
    }
    BOOL v48 = v33 == v34 ? a1 + 19 : v37;
    if (v36 == (void *)(v33 + 8 * *v48)) {
      goto LABEL_36;
    }
    SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a4, (llvm::Value *)v22, *(const llvm::Loop **)a1);
    if (*((_WORD *)SCEVAtScope + 12) == 15
      || llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a4, SCEVAtScope, (const llvm::Loop *)a1) != 1|| !llvm::isSafeToExpand(SCEVAtScope, (const llvm::SCEV *)a4, (llvm::ScalarEvolution *)1))
    {
      int v50 = *(_DWORD *)(v13 + 20);
      if ((v50 & 0x40000000) != 0) {
        uint64_t v51 = *(void *)(v13 - 8);
      }
      else {
        uint64_t v51 = v13 - 32 * (v50 & 0x7FFFFFF);
      }
      uint64_t ExitCount = llvm::ScalarEvolution::getExitCount((llvm::ScalarEvolution *)a4, (const llvm::Loop *)a1, *(void *)(v51 + 32 * *(unsigned int *)(v13 + 60) + 8 * v19), 0);
      if (*(_WORD *)(ExitCount + 24) == 15) {
        goto LABEL_36;
      }
      uint64_t v53 = (const llvm::SCEV *)ExitCount;
      uint64_t v54 = *(void *)(a4 + 104);
      unsigned int v55 = *(_DWORD *)(a4 + 120);
      if (v55)
      {
        unsigned int v56 = (v55 - 1) & ((v22 >> 4) ^ (v22 >> 9));
        uint64_t v57 = v54 + 48 * v56;
        uint64_t v58 = *(void *)(v57 + 24);
        if (v58 != v22)
        {
          int v59 = 1;
          while (v58 != -4096)
          {
            unsigned int v60 = v56 + v59++;
            unsigned int v56 = v60 & (v55 - 1);
            uint64_t v57 = v54 + 48 * v56;
            uint64_t v58 = *(void *)(v57 + 24);
            if (v58 == v22) {
              goto LABEL_76;
            }
          }
          goto LABEL_75;
        }
      }
      else
      {
LABEL_75:
        uint64_t v57 = v54 + 48 * v55;
      }
LABEL_76:
      if (v57 == v54 + 48 * v55 || (uint64_t SCEVIter = *(void *)(v57 + 40)) == 0) {
        uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a4, v22);
      }
      if (SCEVIter) {
        BOOL v62 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
      }
      else {
        BOOL v62 = 0;
      }
      if (v62)
      {
        uint64_t v63 = SCEVAtScope;
        if (*(unsigned int **)(SCEVIter + 48) == a1) {
          uint64_t v63 = (llvm::SCEV *)llvm::SCEVAddRecExpr::evaluateAtIteration(*(uint64_t **)(SCEVIter + 32), *(void *)(SCEVIter + 40), v53, (llvm::ScalarEvolution *)a4);
        }
      }
      else
      {
        uint64_t v63 = SCEVAtScope;
      }
      v105 = v63;
      if (*((_WORD *)v63 + 12) == 15
        || llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a4, v63, (const llvm::Loop *)a1) != 1|| !llvm::isSafeToExpand(v105, (const llvm::SCEV *)a4, (llvm::ScalarEvolution *)1))
      {
        goto LABEL_36;
      }
      goto LABEL_89;
    }
    v105 = SCEVAtScope;
LABEL_89:
    if (a8 != 3 && *((_WORD *)v105 + 12) && *((_WORD *)v105 + 12) != 14)
    {
      unint64_t v119 = (char *)v123;
      uint64_t v120 = (char *)v123;
      int v122 = 0;
      v115 = v118;
      unsigned int v117 = 8;
      uint64_t v121 = 0x100000008;
      v123[0] = v22;
      unsigned int v64 = 1;
      v118[0] = v22;
      while (1)
      {
        BOOL v65 = (llvm::Instruction *)*((void *)v115 + v64 - 1);
        unsigned int v116 = v64 - 1;
        uint64_t v66 = *((void *)v65 + 5);
        uint64_t v68 = *((void *)a1 + 7);
        uint64_t v67 = *((void *)a1 + 8);
        if (v67 == v68)
        {
          uint64_t v69 = *v11;
          int v70 = (void *)(v67 + 8 * v69);
          if (v69)
          {
            uint64_t v71 = 0;
            uint64_t v72 = 8 * v69;
            while (*(void *)(v67 + v71) != v66)
            {
              v71 += 8;
              if (v72 == v71) {
                goto LABEL_111;
              }
            }
            int v70 = (void *)(v67 + v71);
          }
LABEL_111:
          uint64_t v68 = *((void *)a1 + 8);
        }
        else
        {
          uint64_t v73 = *v107;
          int v74 = v73 - 1;
          unsigned int v75 = (v73 - 1) & ((v66 >> 4) ^ (v66 >> 9));
          int v70 = (void *)(v67 + 8 * v75);
          uint64_t v76 = *v70;
          if (*v70 == -1)
          {
            int v77 = 0;
LABEL_162:
            if (v77) {
              int v70 = v77;
            }
            if (*v70 != v66) {
              int v70 = (void *)(v67 + 8 * v73);
            }
          }
          else
          {
            int v77 = 0;
            int v78 = 1;
            while (v76 != v66)
            {
              if (v77) {
                BOOL v79 = 0;
              }
              else {
                BOOL v79 = v76 == -2;
              }
              if (v79) {
                int v77 = v70;
              }
              unsigned int v80 = v75 + v78++;
              unsigned int v75 = v80 & v74;
              int v70 = (void *)(v67 + 8 * (v80 & v74));
              uint64_t v76 = *v70;
              if (*v70 == -1) {
                goto LABEL_162;
              }
            }
          }
        }
        uint64_t v81 = v67 == v68 ? a1 + 19 : a1 + 18;
        if (v70 != (void *)(v67 + 8 * *v81)) {
          break;
        }
LABEL_159:
        unsigned int v64 = v116;
        a2 = v109;
        if (!v116)
        {
          int v98 = 1;
          goto LABEL_172;
        }
      }
      if ((llvm::Instruction::mayHaveSideEffects(v65) & 1) == 0)
      {
        while (1)
        {
LABEL_117:
          BOOL v65 = (llvm::Instruction *)*((void *)v65 + 1);
          if (!v65) {
            goto LABEL_159;
          }
          uint64_t v82 = *((void *)v65 + 3);
          __int16 v83 = v120;
          uint64_t v84 = HIDWORD(v121);
          if (v120 == v119)
          {
            if (HIDWORD(v121))
            {
              uint64_t v85 = 0;
              uint64_t v86 = 8 * HIDWORD(v121);
              uint64_t v87 = v120;
              do
              {
                if (*(void *)v87 == v82) {
                  goto LABEL_117;
                }
                if (*(void *)v87 == -2) {
                  uint64_t v85 = v87;
                }
                v87 += 8;
                v86 -= 8;
              }
              while (v86);
              if (v85)
              {
                *(void *)uint64_t v85 = v82;
                --v122;
                goto LABEL_150;
              }
            }
            unsigned int v88 = v121;
            if (HIDWORD(v121) < v121)
            {
              ++HIDWORD(v121);
              *(void *)&v120[8 * v84] = v82;
              goto LABEL_150;
            }
          }
          else
          {
            unsigned int v88 = v121;
          }
          if (3 * v88 <= 4 * (HIDWORD(v121) - v122)) {
            break;
          }
          if (v88 - HIDWORD(v121) < v88 >> 3) {
            goto LABEL_157;
          }
LABEL_131:
          unsigned int v89 = v88 - 1;
          unsigned int v90 = (v88 - 1) & ((v82 >> 4) ^ (v82 >> 9));
          uint64_t v91 = &v83[8 * v90];
          uint64_t v92 = *(void *)v91;
          if (*(void *)v91 == -1)
          {
            uint64_t v93 = 0;
LABEL_143:
            if (v93) {
              uint64_t v97 = v93;
            }
            else {
              uint64_t v97 = v91;
            }
            if (*(void *)v97 != v82)
            {
              if (*(void *)v97 == -2) {
                --v122;
              }
              else {
                ++HIDWORD(v121);
              }
              *(void *)uint64_t v97 = v82;
LABEL_150:
              if (v116 >= (unint64_t)v117) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v115 + v116++) = v82;
            }
          }
          else
          {
            uint64_t v93 = 0;
            int v94 = 1;
            while (v92 != v82)
            {
              if (v93) {
                BOOL v95 = 0;
              }
              else {
                BOOL v95 = v92 == -2;
              }
              if (v95) {
                uint64_t v93 = v91;
              }
              unsigned int v96 = v90 + v94++;
              unsigned int v90 = v96 & v89;
              uint64_t v91 = &v83[8 * (v96 & v89)];
              uint64_t v92 = *(void *)v91;
              if (*(void *)v91 == -1) {
                goto LABEL_143;
              }
            }
          }
        }
        if (v88 >= 0x40) {
          v88 *= 2;
        }
        else {
          unsigned int v88 = 128;
        }
LABEL_157:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v119, v88);
        unsigned int v88 = v121;
        __int16 v83 = v120;
        goto LABEL_131;
      }
      int v98 = 0;
      a2 = v109;
LABEL_172:
      if (v115 != v118) {
        free(v115);
      }
      if (v120 != v119) {
        free(v120);
      }
      if (!v98) {
        goto LABEL_36;
      }
    }
    char v99 = sub_1CCD8232C(a6, (unint64_t)v105, (llvm::Loop *)a1, dword_1EBD0C7D8, a5, (llvm::Instruction *)v22);
    sub_1CD886F40((uint64_t)v110, v13, v19, (uint64_t)v105, v22, v99);
LABEL_36:
    if (++v19 == v15) {
      goto LABEL_16;
    }
  }
  int v29 = 1;
  while (v28 != -4096)
  {
    int v30 = v27 + v29++;
    uint64_t v27 = v30 & v26;
    uint64_t v28 = *(void *)(v25 + 16 * v27);
    if (v24 == v28) {
      goto LABEL_33;
    }
  }
LABEL_34:
  unsigned int v31 = 0;
  goto LABEL_35;
}

void sub_1CD1B8C08(uint64_t a1, char *a2)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x400000000;
  unsigned int v8 = v10;
  uint64_t v9 = 0x400000000;
  uint64_t v2 = *(void **)(a1 + 24);
  char v3 = *(void **)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      if (v9 >= (unint64_t)HIDWORD(v9)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v8 + v9) = *v2;
      unsigned int v5 = v9 + 1;
      do
      {
        uint64_t v6 = *((void *)v8 + v5 - 1);
        LODWORD(v9) = v5 - 1;
        sub_1CBAACC38((uint64_t)&v8, *(char **)(v6 + 8), *(char **)(v6 + 16));
        if (v12 >= (unint64_t)HIDWORD(v12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v11 + v12) = v6;
        int v7 = v12 + 1;
        LODWORD(v12) = v12 + 1;
        unsigned int v5 = v9;
      }
      while (v9);
      sub_1CD1BA638(a2, v11, v7);
      LODWORD(v12) = 0;
      ++v2;
    }
    while (v2 != v3);
    if (v8 != v10) {
      free(v8);
    }
  }
  if (v11 != v13) {
    free(v11);
  }
}

void llvm::hasPartialIVCondition(llvm *this@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = **((void **)this + 4);
  uint64_t v8 = *(void *)(v7 + 40);
  if (v8 == v7 + 40) {
    goto LABEL_116;
  }
  uint64_t v9 = v8 ? v8 - 24 : 0;
  unsigned int v10 = *(unsigned __int8 *)(v9 + 16) - 40;
  uint64_t v11 = v10 >= 0xFFFFFFF5 ? v9 : 0;
  if (!v8) {
    goto LABEL_116;
  }
  BOOL v12 = *(unsigned char *)(v11 + 16) == 30 && v10 >= 0xFFFFFFF5;
  if (!v12 || (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) != 3) {
    goto LABEL_116;
  }
  uint64_t v13 = *(void *)(v11 - 96);
  unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
  BOOL v15 = v13 && v14 >= 0x1C;
  if (!v15 || v14 - 83 < 0xFFFFFFFE) {
    goto LABEL_116;
  }
  uint64_t v19 = *(void *)(v13 + 40);
  uint64_t v21 = *((void *)this + 7);
  uint64_t v20 = *((void *)this + 8);
  if (v20 == v21)
  {
    uint64_t v22 = *((unsigned int *)this + 19);
    int v23 = (void *)(v20 + 8 * v22);
    if (v22)
    {
      uint64_t v24 = 0;
      while (*(void *)(v20 + v24) != v19)
      {
        v24 += 8;
        if (8 * v22 == v24) {
          goto LABEL_41;
        }
      }
      int v23 = (void *)(v20 + v24);
    }
LABEL_41:
    uint64_t v21 = *((void *)this + 8);
  }
  else
  {
    uint64_t v25 = *((unsigned int *)this + 18);
    int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    int v23 = (void *)(v20 + 8 * v27);
    uint64_t v28 = *v23;
    if (*v23 == -1)
    {
      int v29 = 0;
LABEL_43:
      if (v29) {
        int v23 = v29;
      }
      if (*v23 != v19)
      {
        LODWORD(v22) = *((_DWORD *)this + 19);
        int v23 = (void *)(v20 + 8 * v25);
        goto LABEL_48;
      }
    }
    else
    {
      int v29 = 0;
      int v30 = 1;
      while (v28 != v19)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -2;
        }
        if (v31) {
          int v29 = v23;
        }
        unsigned int v32 = v27 + v30++;
        unsigned int v27 = v32 & v26;
        int v23 = (void *)(v20 + 8 * (v32 & v26));
        uint64_t v28 = *v23;
        if (*v23 == -1) {
          goto LABEL_43;
        }
      }
    }
    LODWORD(v22) = *((_DWORD *)this + 19);
  }
LABEL_48:
  if (v20 == v21) {
    unsigned int v33 = v22;
  }
  else {
    unsigned int v33 = *((_DWORD *)this + 18);
  }
  if (v23 == (void *)(v20 + 8 * v33))
  {
LABEL_116:
    a3[4] = 0u;
    a3[5] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
    return;
  }
  uint64_t v85 = v87;
  v87[0] = v13;
  uint64_t v86 = 0x600000001;
  uint64_t v81 = v84;
  unsigned int v83 = 4;
  uint64_t v34 = -64;
  uint64_t v35 = 16;
  do
  {
    *(void **)((char *)&v81 + v35) = *(void **)(v13 + v34);
    v35 += 8;
    v34 += 32;
  }
  while (v34);
  int v78 = v80;
  uint64_t v79 = 0x400000000;
  unsigned int v75 = v77;
  uint64_t v76 = 0x400000000;
  unsigned int v36 = 2;
  do
  {
    uint64_t v37 = *((void *)v81 + --v36);
    unsigned int v82 = v36;
    unsigned int v38 = *(unsigned __int8 *)(v37 + 16);
    if (v37) {
      BOOL v39 = v38 >= 0x1C;
    }
    else {
      BOOL v39 = 0;
    }
    if (v39)
    {
      uint64_t v40 = *(void *)(v37 + 40);
      uint64_t v42 = *((void *)this + 7);
      uint64_t v41 = *((void *)this + 8);
      if (v41 == v42)
      {
        uint64_t v43 = *((unsigned int *)this + 19);
        int v44 = (void *)(v41 + 8 * v43);
        if (v43)
        {
          uint64_t v45 = 0;
          while (*(void *)(v41 + v45) != v40)
          {
            v45 += 8;
            if (8 * v43 == v45) {
              goto LABEL_79;
            }
          }
          int v44 = (void *)(v41 + v45);
        }
LABEL_79:
        uint64_t v42 = *((void *)this + 8);
      }
      else
      {
        uint64_t v46 = *((unsigned int *)this + 18);
        int v47 = v46 - 1;
        unsigned int v48 = (v46 - 1) & ((v40 >> 4) ^ (v40 >> 9));
        int v44 = (void *)(v41 + 8 * v48);
        uint64_t v49 = *v44;
        if (*v44 == -1)
        {
          int v50 = 0;
LABEL_108:
          if (v50) {
            int v44 = v50;
          }
          LODWORD(v43) = *((_DWORD *)this + 19);
          if (*v44 != v40) {
            int v44 = (void *)(v41 + 8 * v46);
          }
        }
        else
        {
          int v50 = 0;
          int v51 = 1;
          while (v49 != v40)
          {
            if (v50) {
              BOOL v52 = 0;
            }
            else {
              BOOL v52 = v49 == -2;
            }
            if (v52) {
              int v50 = v44;
            }
            unsigned int v53 = v48 + v51++;
            unsigned int v48 = v53 & v47;
            int v44 = (void *)(v41 + 8 * (v53 & v47));
            uint64_t v49 = *v44;
            if (*v44 == -1) {
              goto LABEL_108;
            }
          }
          LODWORD(v43) = *((_DWORD *)this + 19);
        }
      }
      unsigned int v54 = *((_DWORD *)this + 18);
      if (v41 == v42) {
        unsigned int v54 = v43;
      }
      if (v44 != (void *)(v41 + 8 * v54))
      {
        if (v38 == 60)
        {
          if ((*(_WORD *)(v37 + 18) & 0x381) != 0) {
            goto LABEL_120;
          }
        }
        else if (v38 != 62)
        {
          goto LABEL_120;
        }
        if (v86 >= (unint64_t)HIDWORD(v86)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v85[v86] = v37;
        LODWORD(v86) = v86 + 1;
        int v55 = *(_DWORD *)(a2 + 40);
        if (v55)
        {
          uint64_t v56 = *(void *)(a2 + 24);
          unsigned int v57 = v55 - 1;
          uint64_t v58 = (v55 - 1) & ((v37 >> 4) ^ (v37 >> 9));
          uint64_t v59 = *(void *)(v56 + 16 * v58);
          if (v37 == v59)
          {
LABEL_93:
            uint64_t v62 = *(void *)(v56 + 16 * v58 + 8);
            if (v62)
            {
              if (*(unsigned char *)(v62 + 16) != 25) {
                goto LABEL_120;
              }
              if (v79 >= (unint64_t)HIDWORD(v79)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v78 + v79) = *(void *)(v62 - 32);
              LODWORD(v79) = v79 + 1;
              llvm::MemoryLocation::getOrNone((uint64_t ***)v37, (uint64_t)&v88);
              v74[0] = v88;
              v74[1] = v89[0];
              v74[2] = v89[1];
              uint64_t v63 = (_OWORD *)sub_1CD58643C((uint64_t)&v75, (unint64_t)v74, 1);
              unsigned int v64 = (char *)v75 + 48 * v76;
              long long v66 = v63[1];
              long long v65 = v63[2];
              *unsigned int v64 = *v63;
              v64[1] = v66;
              v64[2] = v65;
              LODWORD(v76) = v76 + 1;
            }
          }
          else
          {
            int v60 = 1;
            while (v59 != -4096)
            {
              int v61 = v58 + v60++;
              uint64_t v58 = v61 & v57;
              uint64_t v59 = *(void *)(v56 + 16 * v58);
              if (v37 == v59) {
                goto LABEL_93;
              }
            }
          }
        }
        int v67 = *(_DWORD *)(v37 + 20);
        if ((v67 & 0x40000000) != 0)
        {
          uint64_t v69 = *(uint64_t **)(v37 - 8);
          uint64_t v68 = v67 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v68 = v67 & 0x7FFFFFF;
          uint64_t v69 = (uint64_t *)(v37 - 32 * v68);
        }
        unsigned int v70 = v82;
        if (v68 + (unint64_t)v82 > v83) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v68)
        {
          uint64_t v71 = (char *)v81 + 8 * v82;
          uint64_t v72 = 32 * v68;
          do
          {
            uint64_t v73 = *v69;
            v69 += 4;
            *v71++ = v73;
            v72 -= 32;
          }
          while (v72);
        }
        unsigned int v36 = v70 + v68;
        unsigned int v82 = v36;
      }
    }
  }
  while (v36);
  if (v86)
  {
    *(void *)&long long v88 = v89;
    *((void *)&v88 + 1) = 0x400000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks();
  }
LABEL_120:
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v75 != v77) {
    free(v75);
  }
  if (v78 != v80) {
    free(v78);
  }
  if (v81 != v84) {
    free(v81);
  }
  if (v85 != v87) {
    free(v85);
  }
}

void sub_1CD1B95D4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (const llvm::Loop *)a2;
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  __dst = v174;
  uint64_t v173 = 0x600000000;
  *(void *)&long long v175 = 0;
  BYTE8(v175) = 1;
  uint64_t v176 = 0;
  v169 = v171;
  v171[0] = a3;
  v171[1] = a4;
  uint64_t v170 = 0x400000002;
  uint64_t v162 = (char *)v166;
  v163 = (char *)v166;
  int v165 = 0;
  uint64_t v164 = 0x100000004;
  v166[0] = a4;
  uint64_t v7 = a4 + 40;
  uint64_t v8 = *(void *)(a4 + 48);
  unint64_t v156 = a2;
  if (v8 == a4 + 40)
  {
    BYTE8(v175) = 1;
    unsigned int v12 = 2;
    goto LABEL_107;
  }
  do
  {
    if (v8) {
      uint64_t v9 = (llvm::Instruction *)(v8 - 24);
    }
    else {
      uint64_t v9 = 0;
    }
    int HaveSideEffects = llvm::Instruction::mayHaveSideEffects(v9);
    if (HaveSideEffects) {
      break;
    }
    uint64_t v8 = *(void *)(v8 + 8);
  }
  while (v8 != v7);
  char v11 = HaveSideEffects ^ 1;
  unsigned int v12 = v170;
  if (!BYTE8(v175)) {
    char v11 = 0;
  }
  BYTE8(v175) = v11;
  if (v170)
  {
    while (1)
    {
LABEL_107:
      uint64_t v61 = *((void *)v169 + v12 - 1);
      LODWORD(v170) = v12 - 1;
      uint64_t v62 = *(void *)v6;
      uint64_t v64 = *(void *)(*(void *)v6 + 56);
      uint64_t v63 = *(void *)(*(void *)v6 + 64);
      if (v63 == v64)
      {
        uint64_t v65 = *(unsigned int *)(v62 + 76);
        long long v66 = (void *)(v63 + 8 * v65);
        if (v65)
        {
          uint64_t v67 = 0;
          uint64_t v68 = 8 * v65;
          while (*(void *)(v63 + v67) != v61)
          {
            v67 += 8;
            if (v68 == v67) {
              goto LABEL_125;
            }
          }
          long long v66 = (void *)(v63 + v67);
        }
LABEL_125:
        uint64_t v64 = *(void *)(*(void *)v6 + 64);
      }
      else
      {
        uint64_t v69 = *(unsigned int *)(v62 + 72);
        int v70 = v69 - 1;
        unsigned int v71 = (v69 - 1) & ((v61 >> 4) ^ (v61 >> 9));
        long long v66 = (void *)(v63 + 8 * v71);
        uint64_t v72 = *v66;
        if (*v66 == -1)
        {
          uint64_t v73 = 0;
LABEL_194:
          if (v73) {
            long long v66 = v73;
          }
          if (*v66 != v61) {
            long long v66 = (void *)(v63 + 8 * v69);
          }
        }
        else
        {
          uint64_t v73 = 0;
          int v74 = 1;
          while (v72 != v61)
          {
            if (v73) {
              BOOL v75 = 0;
            }
            else {
              BOOL v75 = v72 == -2;
            }
            if (v75) {
              uint64_t v73 = v66;
            }
            unsigned int v76 = v71 + v74++;
            unsigned int v71 = v76 & v70;
            long long v66 = (void *)(v63 + 8 * (v76 & v70));
            uint64_t v72 = *v66;
            if (*v66 == -1) {
              goto LABEL_194;
            }
          }
        }
      }
      if (v63 == v64) {
        uint64_t v77 = 76;
      }
      else {
        uint64_t v77 = 72;
      }
      if (v66 == (void *)(v63 + 8 * *(unsigned int *)(v62 + v77))) {
        goto LABEL_170;
      }
      int v78 = v163;
      uint64_t v79 = HIDWORD(v164);
      if (v163 != v162) {
        break;
      }
      if (HIDWORD(v164))
      {
        unsigned int v80 = 0;
        uint64_t v81 = 8 * HIDWORD(v164);
        unsigned int v82 = v163;
        while (*(void *)v82 != v61)
        {
          if (*(void *)v82 == -2) {
            unsigned int v80 = v82;
          }
          v82 += 8;
          v81 -= 8;
          if (!v81)
          {
            if (!v80) {
              goto LABEL_139;
            }
            *(void *)unsigned int v80 = v61;
            --v165;
            goto LABEL_162;
          }
        }
        goto LABEL_170;
      }
LABEL_139:
      a2 = v164;
      if (HIDWORD(v164) >= v164)
      {
LABEL_141:
        if (3 * (int)a2 <= (4 * (HIDWORD(v164) - v165)))
        {
          if (a2 >= 0x40) {
            LODWORD(a2) = 2 * a2;
          }
          else {
            LODWORD(a2) = 128;
          }
        }
        else if ((int)a2 - HIDWORD(v164) >= a2 >> 3)
        {
          goto LABEL_143;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v162, a2);
        a2 = v164;
        int v78 = v163;
LABEL_143:
        int v83 = a2 - 1;
        unsigned int v84 = (a2 - 1) & ((v61 >> 4) ^ (v61 >> 9));
        uint64_t v85 = &v78[8 * v84];
        uint64_t v86 = *(void *)v85;
        if (*(void *)v85 == -1)
        {
          uint64_t v90 = 0;
LABEL_154:
          if (v90) {
            uint64_t v91 = v90;
          }
          else {
            uint64_t v91 = v85;
          }
          if (*(void *)v91 != v61)
          {
            if (*(void *)v91 == -2) {
              --v165;
            }
            else {
              ++HIDWORD(v164);
            }
            *(void *)uint64_t v91 = v61;
            goto LABEL_162;
          }
        }
        else
        {
          uint64_t v90 = 0;
          int v87 = 1;
          while (v86 != v61)
          {
            if (v90) {
              BOOL v88 = 0;
            }
            else {
              BOOL v88 = v86 == -2;
            }
            if (v88) {
              uint64_t v90 = v85;
            }
            unsigned int v89 = v84 + v87++;
            unsigned int v84 = v89 & v83;
            uint64_t v85 = &v78[8 * (v89 & v83)];
            uint64_t v86 = *(void *)v85;
            if (*(void *)v85 == -1) {
              goto LABEL_154;
            }
          }
        }
LABEL_170:
        unsigned int v12 = v170;
        if (!v170) {
          goto LABEL_10;
        }
      }
      else
      {
        ++HIDWORD(v164);
        *(void *)&v163[8 * v79] = v61;
LABEL_162:
        uint64_t v92 = (void *)(v61 + 40);
        uint64_t v13 = *(void *)(v61 + 48);
        if ((void *)v13 == v92)
        {
          char v95 = 1;
        }
        else
        {
          do
          {
            if (v13) {
              uint64_t v93 = (llvm::Instruction *)(v13 - 24);
            }
            else {
              uint64_t v93 = 0;
            }
            int v94 = llvm::Instruction::mayHaveSideEffects(v93);
            if (v94) {
              break;
            }
            uint64_t v13 = *(void *)(v13 + 8);
          }
          while ((void *)v13 != v92);
          char v95 = v94 ^ 1;
        }
        if (!BYTE8(v175)) {
          char v95 = 0;
        }
        BYTE8(v175) = v95;
        unsigned int v96 = (void *)*v92;
        if ((void *)*v92 == v92)
        {
LABEL_184:
          uint64_t v97 = 0;
          int v101 = 0;
        }
        else
        {
          uint64_t v97 = (llvm::Instruction *)(v96 - 3);
          if (v96) {
            int v98 = v96 - 3;
          }
          else {
            int v98 = 0;
          }
          int v99 = *((unsigned __int8 *)v98 + 16);
          int v100 = v99 - 29;
          if (v99 != 30)
          {
            int v105 = 0;
            switch(v100)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_183;
              case 1:
LABEL_341:
                __break(1u);
                goto LABEL_342;
              case 2:
                int v105 = (*((_DWORD *)v98 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_183;
              case 3:
              case 9:
                int v105 = (*((_DWORD *)v98 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_183;
              case 4:
                int v105 = 2;
                goto LABEL_183;
              case 7:
                int v105 = *((_WORD *)v98 + 9) & 1;
                goto LABEL_183;
              case 8:
                int v105 = 1;
                goto LABEL_183;
              case 10:
                int v105 = *((_DWORD *)v98 + 20) + 1;
                goto LABEL_183;
              default:
                goto LABEL_184;
            }
          }
          if ((*((_DWORD *)v98 + 5) & 0x7FFFFFF) == 3) {
            int v105 = 2;
          }
          else {
            int v105 = 1;
          }
LABEL_183:
          int v101 = v105;
        }
        int v102 = v170;
        if ((unint64_t)v170 + v101 > HIDWORD(v170)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v101)
        {
          uint64_t v103 = 0;
          uint64_t v104 = (char *)v169 + 8 * v170;
          do
          {
            *(void *)&v104[8 * v103] = llvm::Instruction::getSuccessor(v97, v103);
            ++v103;
          }
          while (v101 != v103);
          int v102 = v170;
        }
        unsigned int v12 = v102 + v101;
        LODWORD(v170) = v12;
        uint64_t v6 = (const llvm::Loop *)v156;
        if (!v12) {
          goto LABEL_10;
        }
      }
    }
    a2 = v164;
    goto LABEL_141;
  }
LABEL_10:
  if ((HIDWORD(v164) - v165) <= 1)
  {
    uint64_t v13 = (uint64_t)v174;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_333;
  }
  int v157 = v161;
  uint64_t v158 = v161;
  uint64_t v159 = 4;
  int v160 = 0;
  unsigned int v14 = *(_DWORD *)(a5 + 8);
  if (!v14)
  {
LABEL_210:
    int MustProgress = llvm::isMustProgress(*(llvm **)v6, (const llvm::Loop *)a2);
    if (BYTE8(v175)) {
      int v107 = MustProgress;
    }
    else {
      int v107 = 0;
    }
    BYTE8(v175) = v107;
    if (v107 == 1)
    {
      uint64_t v108 = *((void *)v6 + 3);
      uint64_t v109 = *(unsigned int *)(v108 + 8);
      if (v109)
      {
        uint64_t v110 = *(uint64_t **)v108;
        uint64_t v111 = *(void *)v108 + 8 * v109;
        uint64_t v13 = 1;
        do
        {
          uint64_t v112 = *v110;
          uint64_t v113 = v162;
          if (v163 == v162)
          {
            int v114 = HIDWORD(v164);
            v115 = &v163[8 * HIDWORD(v164)];
            if (HIDWORD(v164))
            {
              uint64_t v116 = 0;
              while (*(void *)&v163[v116] != v112)
              {
                v116 += 8;
                if (8 * HIDWORD(v164) == v116) {
                  goto LABEL_235;
                }
              }
              v115 = &v163[v116];
            }
LABEL_235:
            uint64_t v113 = v163;
          }
          else
          {
            int v117 = v164 - 1;
            unsigned int v118 = (v164 - 1) & ((v112 >> 4) ^ (v112 >> 9));
            v115 = &v163[8 * v118];
            uint64_t v119 = *(void *)v115;
            if (*(void *)v115 == -1)
            {
              uint64_t v120 = 0;
LABEL_298:
              if (v120) {
                v115 = v120;
              }
              int v114 = HIDWORD(v164);
              if (*(void *)v115 != v112) {
                v115 = &v163[8 * v164];
              }
            }
            else
            {
              uint64_t v120 = 0;
              int v121 = 1;
              while (v119 != v112)
              {
                if (v120) {
                  BOOL v122 = 0;
                }
                else {
                  BOOL v122 = v119 == -2;
                }
                if (v122) {
                  uint64_t v120 = v115;
                }
                unsigned int v123 = v118 + v121++;
                unsigned int v118 = v123 & v117;
                v115 = &v163[8 * (v123 & v117)];
                uint64_t v119 = *(void *)v115;
                if (*(void *)v115 == -1) {
                  goto LABEL_298;
                }
              }
              int v114 = HIDWORD(v164);
            }
          }
          if (v163 == v113) {
            int v124 = v114;
          }
          else {
            int v124 = v164;
          }
          if (v115 != &v163[8 * v124])
          {
            uint64_t v125 = *(void *)(v112 + 40);
            if (v125 != v112 + 40)
            {
              if (v125) {
                uint64_t v126 = v125 - 24;
              }
              else {
                uint64_t v126 = 0;
              }
              if (*(unsigned char *)(v126 + 16) == 30)
              {
                if ((*(_DWORD *)(v126 + 20) & 0x7FFFFFF) == 3) {
                  int v149 = 2;
                }
                else {
                  int v149 = 1;
                }
LABEL_249:
                unsigned int v127 = 0;
                while (1)
                {
                  uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v126, v127);
                  uint64_t v129 = *(llvm **)v6;
                  uint64_t v131 = *(void *)(*(void *)v6 + 56);
                  uint64_t v130 = *(void *)(*(void *)v6 + 64);
                  if (v130 == v131)
                  {
                    uint64_t v132 = *((unsigned int *)v129 + 19);
                    char v133 = (void *)(v130 + 8 * v132);
                    if (v132)
                    {
                      uint64_t v134 = 0;
                      uint64_t v135 = 8 * v132;
                      while (*(void *)(v130 + v134) != Successor)
                      {
                        v134 += 8;
                        if (v135 == v134) {
                          goto LABEL_268;
                        }
                      }
                      char v133 = (void *)(v130 + v134);
                    }
LABEL_268:
                    uint64_t v131 = *(void *)(*(void *)v6 + 64);
                  }
                  else
                  {
                    uint64_t v136 = *((unsigned int *)v129 + 18);
                    int v137 = v136 - 1;
                    unsigned int v138 = (v136 - 1) & ((Successor >> 4) ^ (Successor >> 9));
                    char v133 = (void *)(v130 + 8 * v138);
                    uint64_t v139 = *v133;
                    if (*v133 == -1)
                    {
                      v140 = 0;
LABEL_290:
                      if (v140) {
                        char v133 = v140;
                      }
                      if (*v133 != Successor) {
                        char v133 = (void *)(v130 + 8 * v136);
                      }
                    }
                    else
                    {
                      v140 = 0;
                      int v141 = 1;
                      while (v139 != Successor)
                      {
                        if (v140) {
                          BOOL v142 = 0;
                        }
                        else {
                          BOOL v142 = v139 == -2;
                        }
                        if (v142) {
                          v140 = v133;
                        }
                        unsigned int v143 = v138 + v141++;
                        unsigned int v138 = v143 & v137;
                        char v133 = (void *)(v130 + 8 * (v143 & v137));
                        uint64_t v139 = *v133;
                        if (*v133 == -1) {
                          goto LABEL_290;
                        }
                      }
                    }
                  }
                  if (v130 == v131) {
                    uint64_t v144 = 76;
                  }
                  else {
                    uint64_t v144 = 72;
                  }
                  if (v133 == (void *)(v130 + 8 * *(unsigned int *)((char *)v129 + v144)))
                  {
                    if (*(void *)(Successor + 40) != Successor + 40)
                    {
                      uint64_t v145 = *(void *)(Successor + 48);
                      if (v145)
                      {
                        if (*(unsigned char *)(v145 - 8) == 83)
                        {
                          BYTE8(v175) = 0;
                          goto LABEL_295;
                        }
                      }
                    }
                    if (v176) {
                      BOOL v146 = v176 == Successor;
                    }
                    else {
                      BOOL v146 = 1;
                    }
                    BOOL v147 = !v146 || BYTE8(v175) == 0;
                    char v148 = !v147;
                    BYTE8(v175) = v148;
                    if (v147) {
                      goto LABEL_295;
                    }
                    uint64_t v176 = Successor;
                  }
                  if (v149 == ++v127) {
                    goto LABEL_295;
                  }
                }
              }
              int v149 = 2;
              switch(*(unsigned char *)(v126 + 16))
              {
                case 0x1E:
                  goto LABEL_341;
                case 0x1F:
                  int v149 = (*(_DWORD *)(v126 + 20) >> 1) & 0x3FFFFFF;
                  break;
                case 0x20:
                case 0x26:
                  int v149 = (*(_DWORD *)(v126 + 20) & 0x7FFFFFF) - 1;
                  break;
                case 0x21:
                  goto LABEL_249;
                case 0x24:
                  int v149 = *(_WORD *)(v126 + 18) & 1;
                  break;
                case 0x25:
                  int v149 = 1;
                  goto LABEL_249;
                case 0x27:
                  int v149 = *(_DWORD *)(v126 + 80) + 1;
                  break;
                default:
                  goto LABEL_295;
              }
              if (v149) {
                goto LABEL_249;
              }
            }
          }
LABEL_295:
          ++v110;
        }
        while (v110 != (uint64_t *)v111);
      }
    }
    uint64_t v13 = (uint64_t)v174;
    if (!v176) {
      BYTE8(v175) = 0;
    }
    uint64_t v150 = *((void *)v6 + 4);
    if (&__dst == (void **)v150)
    {
LABEL_342:
      LODWORD(v151) = v173;
    }
    else
    {
      uint64_t v151 = *(unsigned int *)(v150 + 8);
      uint64_t v152 = v173;
      if (v173 >= v151)
      {
        if (v151) {
          memmove(__dst, *(const void **)v150, 8 * v151);
        }
      }
      else
      {
        if (HIDWORD(v173) < v151)
        {
          LODWORD(v173) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v173) {
          memmove(__dst, *(const void **)v150, 8 * v173);
        }
        else {
          uint64_t v152 = 0;
        }
        uint64_t v153 = *(unsigned int *)(v150 + 8);
        if (v152 != v153) {
          memcpy((char *)__dst + 8 * v152, (const void *)(*(void *)v150 + 8 * v152), *(void *)v150 + 8 * v153 - (*(void *)v150 + 8 * v152));
        }
      }
      LODWORD(v173) = v151;
    }
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x600000000;
    if (v151 && &__dst != (void **)a1)
    {
      if (__dst == (void *)v13)
      {
        if (v151 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), (const void *)v13, 8 * v151);
        *(_DWORD *)(a1 + 8) = v151;
      }
      else
      {
        *(void *)a1 = __dst;
        int v154 = HIDWORD(v173);
        *(_DWORD *)(a1 + 8) = v151;
        *(_DWORD *)(a1 + 12) = v154;
        __dst = (void *)v13;
        HIDWORD(v173) = 0;
      }
      LODWORD(v173) = 0;
    }
    *(_OWORD *)(a1 + 64) = v175;
    *(void *)(a1 + 80) = v176;
    *(unsigned char *)(a1 + 88) = 1;
    goto LABEL_331;
  }
  BOOL v15 = &v181;
  long long v16 = xmmword_1CFAC3060;
  while (1)
  {
    uint64_t v17 = *(void *)(*(void *)a5 + 8 * v14 - 8);
    *(_DWORD *)(a5 + 8) = v14 - 1;
    int v18 = v158;
    uint64_t v19 = HIDWORD(v159);
    if (v158 == v157)
    {
      if (HIDWORD(v159))
      {
        uint64_t v20 = 0;
        uint64_t v21 = 8 * HIDWORD(v159);
        uint64_t v22 = v158;
        while (*(void *)v22 != v17)
        {
          if (*(void *)v22 == -2) {
            uint64_t v20 = v22;
          }
          v22 += 8;
          v21 -= 8;
          if (!v21)
          {
            if (!v20) {
              goto LABEL_23;
            }
            *(void *)uint64_t v20 = v17;
            --v160;
            goto LABEL_46;
          }
        }
        goto LABEL_92;
      }
LABEL_23:
      a2 = v159;
      if (HIDWORD(v159) < v159)
      {
        ++HIDWORD(v159);
        *(void *)&v158[8 * v19] = v17;
        goto LABEL_46;
      }
    }
    else
    {
      a2 = v159;
    }
    if (3 * (int)a2 <= (4 * (HIDWORD(v159) - v160)))
    {
      LODWORD(a2) = a2 >= 0x40 ? 2 * a2 : 128;
    }
    else if ((int)a2 - HIDWORD(v159) >= a2 >> 3)
    {
      goto LABEL_27;
    }
    int v60 = v15;
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v157, a2);
    long long v16 = xmmword_1CFAC3060;
    BOOL v15 = v60;
    a2 = v159;
    int v18 = v158;
LABEL_27:
    int v23 = a2 - 1;
    unsigned int v24 = (a2 - 1) & ((v17 >> 4) ^ (v17 >> 9));
    uint64_t v25 = &v18[8 * v24];
    uint64_t v26 = *(void *)v25;
    if (*(void *)v25 != -1)
    {
      int v30 = 0;
      int v27 = 1;
      while (v26 != v17)
      {
        if (v30) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v26 == -2;
        }
        if (v28) {
          int v30 = v25;
        }
        unsigned int v29 = v24 + v27++;
        unsigned int v24 = v29 & v23;
        uint64_t v25 = &v18[8 * (v29 & v23)];
        uint64_t v26 = *(void *)v25;
        if (*(void *)v25 == -1) {
          goto LABEL_38;
        }
      }
      goto LABEL_92;
    }
    int v30 = 0;
LABEL_38:
    BOOL v31 = v30 ? v30 : v25;
    if (*(void *)v31 != v17) {
      break;
    }
LABEL_92:
    unsigned int v14 = *(_DWORD *)(a5 + 8);
LABEL_93:
    if (!v14) {
      goto LABEL_210;
    }
  }
  if (*(void *)v31 == -2) {
    --v160;
  }
  else {
    ++HIDWORD(v159);
  }
  *(void *)BOOL v31 = v17;
LABEL_46:
  uint64_t v32 = *(void *)(v17 + 64);
  unsigned int v33 = v162;
  if (v163 == v162)
  {
    int v34 = HIDWORD(v164);
    uint64_t v35 = &v163[8 * HIDWORD(v164)];
    if (HIDWORD(v164))
    {
      uint64_t v36 = 0;
      while (*(void *)&v163[v36] != v32)
      {
        v36 += 8;
        if (8 * HIDWORD(v164) == v36) {
          goto LABEL_65;
        }
      }
      uint64_t v35 = &v163[v36];
    }
LABEL_65:
    unsigned int v33 = v163;
  }
  else
  {
    int v37 = v164 - 1;
    unsigned int v38 = (v164 - 1) & ((v32 >> 4) ^ (v32 >> 9));
    uint64_t v35 = &v163[8 * v38];
    uint64_t v39 = *(void *)v35;
    if (*(void *)v35 == -1)
    {
      uint64_t v40 = 0;
LABEL_96:
      if (v40) {
        uint64_t v35 = v40;
      }
      int v34 = HIDWORD(v164);
      if (*(void *)v35 != v32) {
        uint64_t v35 = &v163[8 * v164];
      }
    }
    else
    {
      uint64_t v40 = 0;
      int v41 = 1;
      while (v39 != v32)
      {
        if (v40) {
          BOOL v42 = 0;
        }
        else {
          BOOL v42 = v39 == -2;
        }
        if (v42) {
          uint64_t v40 = v35;
        }
        unsigned int v43 = v38 + v41++;
        unsigned int v38 = v43 & v37;
        uint64_t v35 = &v163[8 * (v43 & v37)];
        uint64_t v39 = *(void *)v35;
        if (*(void *)v35 == -1) {
          goto LABEL_96;
        }
      }
      int v34 = HIDWORD(v164);
    }
  }
  int v44 = v164;
  if (v163 == v33) {
    int v44 = v34;
  }
  if (v35 == &v163[8 * v44]) {
    goto LABEL_92;
  }
  if ((HIDWORD(v159) - v160) >= *((_DWORD *)v6 + 10)) {
    goto LABEL_330;
  }
  int v45 = *(unsigned __int8 *)(v17 + 16);
  if (v45 == 25) {
    goto LABEL_92;
  }
  if (v45 != 26 || (v46 = *(void *)(v156 + 16), (unsigned int v47 = *(_DWORD *)(v46 + 8)) == 0))
  {
LABEL_86:
    uint64_t v59 = *(void *)(v17 + 8);
    uint64_t v6 = (const llvm::Loop *)v156;
    if (v59)
    {
      unsigned int v14 = *(_DWORD *)(a5 + 8);
      do
      {
        if (v14 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a5 + 8 * v14) = *(void *)(v59 + 24);
        unsigned int v14 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v14;
        uint64_t v59 = *(void *)(v59 + 8);
      }
      while (v59);
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  uint64_t v48 = *(void *)(v156 + 8);
  uint64_t v49 = *(long long **)v46;
  uint64_t v50 = *(void *)v46 + 48 * v47;
  while (1)
  {
    int v51 = *(llvm::Instruction **)(v17 + 72);
    long long v52 = *v49;
    long long v53 = v49[2];
    v167[1] = v49[1];
    v167[2] = v53;
    v167[0] = v52;
    char v168 = 1;
    v177[0] = 1;
    uint64_t v54 = 1;
    do
    {
      int v55 = &v177[v54];
      *(_OWORD *)int v55 = v16;
      *((_OWORD *)v55 + 1) = v16;
      v54 += 5;
    }
    while (v55 + 5 != v178);
    v178[0] = &v182;
    v178[1] = 0;
    uint64_t v56 = v15;
    v179 = v15;
    uint64_t v180 = 0x400000000;
    v182 = &unk_1F2600DB8;
    uint64_t v57 = 63;
    uint64_t v183 = 1;
    do
    {
      v177[v57] = -4096;
      v57 += 2;
    }
    while (v57 != 79);
    char ModRefInfo = llvm::AAResults::getModRefInfo(v48, v51, v167, (uint64_t)v177);
    if ((v183 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v184, 8);
    }
    BOOL v15 = v56;
    if (v179 != v56)
    {
      free(v179);
      BOOL v15 = v56;
    }
    long long v16 = xmmword_1CFAC3060;
    if ((v177[0] & 1) == 0)
    {
      MEMORY[0x1D25D9CD0](v177[1], 8);
      long long v16 = xmmword_1CFAC3060;
      BOOL v15 = v56;
    }
    if ((ModRefInfo & 2) != 0) {
      break;
    }
    v49 += 3;
    if (v49 == (long long *)v50) {
      goto LABEL_86;
    }
  }
LABEL_330:
  uint64_t v13 = (uint64_t)v174;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
LABEL_331:
  if (v158 != v157) {
    free(v158);
  }
LABEL_333:
  if (v163 != v162) {
    free(v163);
  }
  if (v169 != v171) {
    free(v169);
  }
  if (__dst != (void *)v13) {
    free(__dst);
  }
}

uint64_t ****sub_1CD1BA538(uint64_t ****a1, uint64_t a2, llvm::Instruction *a3, llvm::SCEVExpander *a4)
{
  uint64_t v8 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)a3 + 1912), (llvm::Type *)*(unsigned int *)(a2 + 40));
  uint64_t v9 = (uint64_t ***)llvm::SCEVExpander::expandCodeForImpl(a4, *(llvm::Instruction ***)(a2 + 8), v8, a3);
  unsigned int v10 = (uint64_t ***)llvm::SCEVExpander::expandCodeForImpl(a4, *(llvm::Instruction ***)a2, v8, a3);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t ***)6;
  if (v9)
  {
    a1[2] = v9;
    if (((unint64_t)v9 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)a1);
    }
  }
  a1[3] = (uint64_t ***)6;
  uint64_t result = a1 + 3;
  a1[4] = 0;
  a1[5] = 0;
  if (v10)
  {
    a1[5] = v10;
    if (((unint64_t)v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      return llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)result);
    }
  }
  return result;
}

char *sub_1CD1BA638(char *result, unsigned char *a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = (uint64_t *)(result + 72);
    uint64_t v5 = *((unsigned int *)result + 20);
    uint64_t result = (char *)sub_1CB935BDC((unsigned int *)result + 18, a2, &a2[8 * a3]);
    uint64_t v6 = *(unsigned int *)(v3 + 80);
    if (v6 > v5)
    {
      uint64_t v7 = v6 - 1;
      do
      {
        uint64_t v12 = *(void *)(*(void *)(v3 + 72) + 8 * v7);
        uint64_t v13 = v7;
        uint64_t result = (char *)sub_1CCDAA058(v3, &v12, &v13, (uint64_t)&v14);
        if (!v15)
        {
          uint64_t v9 = v14;
          uint64_t v10 = *(void *)(v14 + 8);
          uint64_t v11 = *v4;
          if (v10 >= v5)
          {
            *(void *)(v11 + 8 * v7) = 0;
          }
          else
          {
            *(void *)(v11 + 8 * v10) = 0;
            *(void *)(v9 + 8) = v7;
          }
        }
      }
      while (v7-- > v5);
    }
  }
  return result;
}

void llvm::LoopVersioning::versionLoop()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
}

void llvm::LoopVersioning::addPHINodes()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock();
}

void sub_1CD1BBB78(llvm *a1)
{
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopAccessLegacyAnalysisPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  operator new();
}

void llvm::createLoopVersioningLegacyPass(llvm *this)
{
}

uint64_t sub_1CD1BBC68(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFD128;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2648690;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD130, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1BBB78;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFD130, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD1BBD18(uint64_t a1)
{
  v51[8] = *MEMORY[0x1E4F143B8];
  uint64_t v49 = (llvm::Loop **)v51;
  uint64_t v50 = 0x800000000;
  __n128 v1 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v1 == v2) {
    return 0;
  }
  do
  {
    uint64_t v35 = *v1;
    sub_1CC076464(&v35, (uint64_t)&v36);
    uint64_t v26 = v31;
    uint64_t v3 = v37;
    if (v37 == v36)
    {
      int v27 = v31;
      uint64_t v4 = v31;
      uint64_t v5 = v37;
    }
    else
    {
      unsigned int v18 = v38;
      uint64_t v4 = malloc_type_malloc(8 * v38, 0x4065EBACuLL);
      if (!v4 && (v18 || (uint64_t v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_63:
      }
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      int v27 = v4;
      uint64_t v5 = v36;
      uint64_t v3 = v37;
    }
    unsigned int v6 = v39;
    unsigned int v28 = v38;
    if (v3 == v5) {
      unsigned int v7 = v39;
    }
    else {
      unsigned int v7 = v38;
    }
    if (v7)
    {
      memmove(v4, v3, 8 * v7);
      unsigned int v6 = v39;
    }
    unsigned int v29 = v6;
    int v30 = v40;
    unsigned int v33 = 0;
    uint64_t v34 = 0;
    __p = 0;
    sub_1CBF340A8(&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - (unsigned char *)v41) >> 3));
    uint64_t v8 = v44;
    if (v44 == v43)
    {
      uint64_t v21 = v22;
      uint64_t v9 = v22;
      uint64_t v10 = v44;
    }
    else
    {
      unsigned int v19 = v45;
      uint64_t v9 = malloc_type_malloc(8 * v45, 0x4065EBACuLL);
      if (!v9)
      {
        if (v19) {
          goto LABEL_63;
        }
        uint64_t v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v9) {
          goto LABEL_63;
        }
      }
      uint64_t v21 = v9;
      uint64_t v10 = v43;
      uint64_t v8 = v44;
    }
    if (v8 == v10) {
      unsigned int v11 = v46;
    }
    else {
      unsigned int v11 = v45;
    }
    if (v11) {
      memmove(v9, v8, 8 * v11);
    }
    unsigned int v24 = 0;
    uint64_t v25 = 0;
    int v23 = 0;
    sub_1CBF340A8(&v23, v47, v48, 0xAAAAAAAAAAAAAAABLL * ((v48 - (unsigned char *)v47) >> 3));
    while (1)
    {
      if (v33 - (unsigned char *)__p != v24 - v23) {
        goto LABEL_31;
      }
      if (__p == v33) {
        break;
      }
      uint64_t v12 = v23 + 8;
      uint64_t v13 = (char *)__p + 8;
      while (1)
      {
        uint64_t v14 = v13 - 8;
        if (*((void *)v13 - 1) != *((void *)v12 - 1)) {
          break;
        }
        int v15 = v12[8];
        if (v13[8]) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          if ((v13[8] == 0) == (v15 != 0)) {
            break;
          }
        }
        else if (*(void *)v13 != *(void *)v12)
        {
          break;
        }
        v12 += 24;
        v13 += 24;
        if (v14 + 24 == v33) {
          goto LABEL_36;
        }
      }
LABEL_31:
      uint64_t v17 = (llvm::Loop *)*((void *)v33 - 3);
      if (*((void *)v17 + 1) == *((void *)v17 + 2))
      {
        if (v50 >= (unint64_t)HIDWORD(v50)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v49[v50] = v17;
        LODWORD(v50) = v50 + 1;
      }
      sub_1CC078F58((llvm::SmallPtrSetImplBase *)&v26);
    }
LABEL_36:
    if (v23)
    {
      unsigned int v24 = v23;
      operator delete(v23);
    }
    if (v21 != v22) {
      free(v21);
    }
    if (__p)
    {
      unsigned int v33 = (char *)__p;
      operator delete(__p);
    }
    if (v27 != v26) {
      free(v27);
    }
    if (v47)
    {
      uint64_t v48 = v47;
      operator delete(v47);
    }
    if (v44 != v43) {
      free(v44);
    }
    if (v41)
    {
      BOOL v42 = v41;
      operator delete(v41);
    }
    if (v37 != v36) {
      free(v37);
    }
    ++v1;
  }
  while (v1 != v2);
  if (v50) {
    llvm::Loop::isLoopSimplifyForm(*v49);
  }
  if (v49 != v51) {
    free(v49);
  }
  return 0;
}

void sub_1CD1BC1E4()
{
}

void sub_1CD1BC224(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD1BC25C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopAccessLegacyAnalysis::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1CD1BC308(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::LoopInfoWrapperPass::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::LoopInfoWrapperPass::ID);
  unsigned int v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::DominatorTreeWrapperPass::ID);
  unsigned int v11 = *(uint64_t **)(a1 + 8);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(char **)v12 != llvm::ScalarEvolutionWrapperPass::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  (*(void (**)(uint64_t, char *))(*(void *)v14 + 96))(v14, llvm::ScalarEvolutionWrapperPass::ID);
  return sub_1CD1BBD18(v6 + 32);
}

uint64_t sub_1CD1BC4A0(uint64_t a1, llvm::Loop *a2)
{
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::LoopAccessLegacyAnalysis::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  unsigned int v7 = (llvm::LoopAccessLegacyAnalysis *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::LoopAccessLegacyAnalysis::ID);

  return llvm::LoopAccessLegacyAnalysis::getInfo(v7, a2);
}

void sub_1CD1BC540()
{
}

uint64_t sub_1CD1BC594()
{
  char v3 = 1;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Add no-alias annotation for instructions that are disambiguated by memchecks";
  v1.n128_u64[1] = 76;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBD0C698, "loop-version-annotate-no-alias", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0C698, &dword_1CB82C000);
}

llvm::Value *llvm::buildAtomicRMWValue(int a1, llvm::IRBuilderBase *a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t v4 = (llvm::Value *)a4;
  switch(a1)
  {
    case 1:
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = (uint64_t)sub_1CB844A3C((uint64_t)a2, a3, a4, (uint64_t)v16, 0, 0);
      goto LABEL_15;
    case 2:
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = (uint64_t)sub_1CB84494C((uint64_t)a2, (uint64_t)a3, a4, (uint64_t)v16, 0, 0);
      goto LABEL_15;
    case 3:
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = (uint64_t)sub_1CBF52474((uint64_t)a2, a3, a4, (uint64_t)v16);
      goto LABEL_15;
    case 4:
      __int16 v17 = 257;
      uint64_t v8 = sub_1CBF52474((uint64_t)a2, a3, a4, (uint64_t)v16);
      uint64_t v14 = "new";
      __int16 v15 = 259;
      uint64_t Select = (uint64_t)sub_1CC2427E8((uint64_t)a2, (uint64_t)v8, (uint64_t)&v14, v9);
      goto LABEL_15;
    case 5:
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = (uint64_t)sub_1CB844AF4((uint64_t)a2, a3, a4, (uint64_t)v16);
      goto LABEL_15;
    case 6:
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = (uint64_t)sub_1CC2428C0((uint64_t)a2, (uint64_t)a3, a4, (uint64_t)v16);
      goto LABEL_15;
    case 7:
      __int16 v17 = 257;
      uint64_t v10 = (uint64_t)a2;
      __int16 v11 = 38;
      goto LABEL_12;
    case 8:
      __int16 v17 = 257;
      uint64_t v10 = (uint64_t)a2;
      __int16 v11 = 41;
      goto LABEL_12;
    case 9:
      __int16 v17 = 257;
      uint64_t v10 = (uint64_t)a2;
      __int16 v11 = 34;
      goto LABEL_12;
    case 10:
      __int16 v17 = 257;
      uint64_t v10 = (uint64_t)a2;
      __int16 v11 = 37;
LABEL_12:
      uint64_t v12 = sub_1CB845F20(v10, v11, a3, a4, (uint64_t)v16);
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = (uint64_t)llvm::IRBuilderBase::CreateSelect(a2, v12, a3, v4, (const llvm::Twine *)v16, 0);
      goto LABEL_15;
    case 11:
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = sub_1CC52C04C((uint64_t)a2, (uint64_t)a3, a4, (uint64_t)v16, 0);
      goto LABEL_15;
    case 12:
      v16[0] = "new";
      __int16 v17 = 259;
      uint64_t Select = sub_1CB843E40((uint64_t)a2, (uint64_t)a3, a4, (uint64_t)v16, 0);
LABEL_15:
      uint64_t v4 = (llvm::Value *)Select;
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1CD1BC8E0()
{
}

uint64_t sub_1CD1BC97C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFD138;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2648730;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD140, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1BC8E0;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFD140, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL sub_1CD1BCA2C(void *a1)
{
  v151[1] = *MEMORY[0x1E4F143B8];
  __n128 v1 = (uint64_t *)a1[14];
  unsigned int v2 = *((_DWORD *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0x10) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 17;
  }
  uint64_t v5 = *((unsigned int *)v1 + 2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aLlvmGlobalDtor[v6++];
  while (v4 != v6);
  uint64_t v8 = *v1;
  uint64_t v9 = *v1 + 8 * v5 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v5 - 1);
    uint64_t v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v4 == *v13
        && !memcmp("llvm.global_dtors", (char *)v13 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1) {
    return 0;
  }
  if ((int)v12 == v5) {
    return 0;
  }
  uint64_t v14 = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8);
  if (!v14
    || *(unsigned char *)(v14 + 16) != 3
    || (*(_DWORD *)(v14 + 32) & 0xFu) - 7 < 2
    || (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 0)
  {
    return 0;
  }
  uint64_t v16 = *(void *)(v14 - 32);
  BOOL v17 = v16 && *(unsigned char *)(v16 + 16) == 8;
  if (!v17) {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)v16 + 24);
  if (!v18 || *(unsigned char *)(v18 + 8) != 16) {
    return 0;
  }
  if (*(_DWORD *)(v18 + 12) != 3) {
    return 0;
  }
  uint64_t v20 = *(void **)(v18 + 16);
  if (*(unsigned char *)(*v20 + 8) != 13 || *(unsigned char *)(v20[1] + 8) != 15 || *(unsigned char *)(v20[2] + 8) != 15) {
    return 0;
  }
  int v121 = *(llvm::GlobalVariable **)(*(void *)(v8 + 8 * (int)v12) + 8);
  unsigned int v143 = 0;
  uint64_t v144 = 0;
  BOOL v142 = &v143;
  int v21 = *(_DWORD *)(v16 + 20);
  if ((v21 & 0x40000000) != 0)
  {
    int v23 = *(uint64_t **)(v16 - 8);
    uint64_t v22 = v21 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v22 = v21 & 0x7FFFFFF;
    int v23 = (uint64_t *)(v16 - 32 * v22);
  }
  if (v22)
  {
    unsigned int v71 = &v23[4 * v22];
    while (1)
    {
      uint64_t v72 = *v23;
      if (*v23) {
        BOOL v73 = *(unsigned char *)(*v23 + 16) == 9;
      }
      else {
        BOOL v73 = 0;
      }
      if (!v73) {
        goto LABEL_118;
      }
      uint64_t v74 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
      BOOL v75 = (void *)(v72 - 32 * v74);
      uint64_t v76 = *v75;
      if (!*v75 || *(unsigned char *)(*v75 + 16) != 16) {
        goto LABEL_118;
      }
      uint64_t v78 = *(unsigned int *)(v76 + 32);
      if (v78 < 0x41) {
        break;
      }
      int v80 = 0;
      int64_t v81 = (unint64_t)(v78 + 63) >> 6;
      do
      {
        BOOL v66 = v81-- < 1;
        if (v66) {
          break;
        }
        unint64_t v82 = *(void *)(*(void *)(v76 + 24) + 8 * v81);
        v80 += __clz(v82);
      }
      while (!v82);
      int v83 = v78 | 0xFFFFFFC0;
      if ((v78 & 0x3F) == 0) {
        int v83 = 0;
      }
      if ((v78 - v80 - v83) <= 0x40)
      {
        unint64_t v79 = **(void **)(v76 + 24);
LABEL_129:
        if (!(v79 >> 16)) {
          goto LABEL_131;
        }
      }
      LOWORD(v79) = -1;
LABEL_131:
      uint64_t v84 = -v74;
      LOWORD(v148) = v79;
      uint64_t v85 = v75[4];
      unsigned int v86 = *(unsigned __int8 *)(v85 + 16);
      if (v85 && v86 == 16)
      {
        uint64_t v87 = *(unsigned int *)(v85 + 32);
        if (v87 >= 0x41)
        {
          int v117 = 0;
          int64_t v118 = (unint64_t)(v87 + 63) >> 6;
          do
          {
            BOOL v66 = v118-- < 1;
            if (v66) {
              break;
            }
            unint64_t v119 = *(void *)(*(void *)(v85 + 24) + 8 * v118);
            v117 += __clz(v119);
          }
          while (!v119);
          int v120 = v87 | 0xFFFFFFC0;
          if ((v87 & 0x3F) == 0) {
            int v120 = 0;
          }
          if (v117 + v120 == v87) {
            goto LABEL_42;
          }
        }
        else if (!*(void *)(v85 + 24))
        {
          goto LABEL_42;
        }
      }
      else if (v85 && v86 == 17)
      {
        if (sub_1CB844168(v85, 0.0)) {
          goto LABEL_42;
        }
        uint64_t v84 = -(uint64_t)(*(_DWORD *)(v72 + 20) & 0x7FFFFFF);
      }
      else
      {
        BOOL v66 = v86 > 0x14;
        int v101 = (1 << v86) & 0x1C2000;
        if (!v66 && v101 != 0) {
          goto LABEL_42;
        }
      }
      BOOL v88 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v72 + 32 * v84 + 64));
      unsigned int v89 = sub_1CD888B14((uint64_t **)&v142, v79, &v148);
      uint64_t v90 = v89 + 5;
      uint64_t v91 = v89[6];
      if (v89[5] != v91 && *(llvm::Value **)(v91 - 32) == v88)
      {
        int v99 = *(uint64_t **)(v91 - 16);
        unint64_t v98 = *(void *)(v91 - 8);
        if ((unint64_t)v99 >= v98)
        {
          uint64_t v103 = *(void **)(v91 - 24);
          uint64_t v104 = v99 - v103;
          unint64_t v105 = v104 + 1;
          if ((unint64_t)(v104 + 1) >> 61) {
            goto LABEL_182;
          }
          uint64_t v106 = v98 - (void)v103;
          if (v106 >> 2 > v105) {
            unint64_t v105 = v106 >> 2;
          }
          if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v107 = v105;
          }
          if (v107)
          {
            if (v107 >> 61) {
              goto LABEL_183;
            }
            uint64_t v108 = (char *)operator new(8 * v107);
          }
          else
          {
            uint64_t v108 = 0;
          }
          v115 = (uint64_t *)&v108[8 * v104];
          uint64_t *v115 = v85;
          int v100 = v115 + 1;
          if (v99 != v103)
          {
            do
            {
              uint64_t v116 = *--v99;
              *--v115 = v116;
            }
            while (v99 != v103);
            int v99 = *(uint64_t **)(v91 - 24);
          }
          *(void *)(v91 - 24) = v115;
          *(void *)(v91 - 16) = v100;
          *(void *)(v91 - 8) = &v108[8 * v107];
          if (v99) {
            operator delete(v99);
          }
        }
        else
        {
          uint64_t *v99 = v85;
          int v100 = v99 + 1;
        }
        *(void *)(v91 - 16) = v100;
      }
      else
      {
        uint64_t v92 = (llvm::Value *)operator new(8uLL);
        uint64_t v93 = v92;
        *(void *)uint64_t v92 = v85;
        unint64_t v94 = (unint64_t)v92 + 8;
        unint64_t v95 = v89[7];
        unsigned int v96 = (llvm::Value **)v89[6];
        if ((unint64_t)v96 >= v95)
        {
          uint64_t v109 = ((uint64_t)v96 - *v90) >> 5;
          unint64_t v110 = v109 + 1;
          if ((unint64_t)(v109 + 1) >> 59) {
LABEL_182:
          }
            abort();
          uint64_t v111 = v95 - *v90;
          if (v111 >> 4 > v110) {
            unint64_t v110 = v111 >> 4;
          }
          if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v112 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v112 = v110;
          }
          BOOL v147 = v89 + 7;
          if (v112 >> 59) {
LABEL_183:
          }
            sub_1CB833614();
          uint64_t v113 = (char *)operator new(32 * v112);
          int v114 = (llvm::Value **)&v113[32 * v109];
          *(void *)&long long v145 = v113;
          *((void *)&v145 + 1) = v114;
          v114[2] = 0;
          v114[3] = 0;
          void *v114 = v88;
          v114[1] = v93;
          *((int64x2_t *)v114 + 1) = vdupq_n_s64(v94);
          *(void *)&long long v146 = v114 + 4;
          *((void *)&v146 + 1) = &v113[32 * v112];
          sub_1CD58F244(v90, &v145);
          uint64_t v97 = (void *)v89[6];
          sub_1CD58F2BC((uint64_t)&v145);
        }
        else
        {
          *unsigned int v96 = v88;
          v96[1] = v92;
          uint64_t v97 = v96 + 4;
          v96[2] = (llvm::Value *)v94;
          v96[3] = (llvm::Value *)v94;
        }
        v89[6] = v97;
      }
LABEL_118:
      v23 += 4;
      if (v23 == v71) {
        goto LABEL_42;
      }
    }
    unint64_t v79 = *(void *)(v76 + 24);
    goto LABEL_129;
  }
LABEL_42:
  BOOL v122 = v144 != 0;
  if (v144)
  {
    unint64_t v24 = (unint64_t)a1;
    uint64_t v25 = *a1;
    unint64_t v26 = llvm::PointerType::get((llvm::PointerType *)(*(void *)*a1 + 1912), 0);
    v151[0] = v26;
    int v27 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(void *)v25 + 1576), (uint64_t)v151, 1, 0);
    unsigned int v28 = (uint64_t **)(*(void *)v25 + 1960);
    uint64_t v125 = v27;
    *(void *)&long long v145 = llvm::PointerType::get(v27, 0);
    *((void *)&v145 + 1) = v26;
    *(void *)&long long v146 = v26;
    unsigned int v29 = (llvm::PointerType *)llvm::FunctionType::get(v28, (uint64_t)&v145, 3, 0);
    llvm::Module::getOrInsertFunction((uint64_t)a1, "__cxa_atexit", (const char *)0xC, v29, 0);
    int v141 = (llvm::PointerType *)(*(void *)v25 + 1912);
    *(void *)&long long v145 = a1;
    *((void *)&v145 + 1) = &v141;
    llvm::Module::getOrInsertGlobal((uint64_t)a1, "__dso_handle", 0xCuLL, v141, (uint64_t (*)(uint64_t))sub_1CD1BE01C, (uint64_t)&v145);
    int v30 = (uint64_t *)v142;
    if (v142 == &v143) {
LABEL_106:
    }
      llvm::GlobalVariable::eraseFromParent(v121);
    while (1)
    {
      BOOL v31 = (uint64_t *)v30[5];
      if (v31 != (uint64_t *)v30[6]) {
        break;
      }
      uint64_t v69 = (char *)v30[1];
      if (v69)
      {
        do
        {
          int v70 = (char **)v69;
          uint64_t v69 = *(char **)v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          int v70 = (char **)v30[2];
          BOOL v17 = *v70 == (char *)v30;
          int v30 = (uint64_t *)v70;
        }
        while (!v17);
      }
      int v30 = (uint64_t *)v70;
      if (v70 == &v143) {
        goto LABEL_106;
      }
    }
    uint64_t v32 = *((unsigned __int16 *)v30 + 16);
    if (v32 == 0xFFFF) {
      char v33 = 3;
    }
    else {
      char v33 = 2;
    }
    char v126 = v33;
    if (v32 == 0xFFFF) {
      uint64_t v34 = "call_dtors";
    }
    else {
      uint64_t v34 = (const char *)&v137;
    }
    unsigned int v123 = v34;
    uint64_t v35 = *v31;
    uint64_t v140 = 0;
    if (v32 == 0xFFFF)
    {
      char v36 = 1;
      char v37 = 1;
      char v38 = 1;
    }
    else
    {
      v134[0] = ".";
      v134[2] = v124 & 0xFFFFFFFF00000000 | v32;
      *(void *)&long long v138 = v134;
      char v38 = 2;
      char v37 = 9;
      char v36 = 3;
    }
    char v135 = v36;
    char v136 = v37;
    *(void *)&long long v137 = "call_dtors";
    LOBYTE(v139) = 3;
    BYTE1(v139) = v38;
    if ((unint64_t)(v30[6] - v30[5]) > 0x20)
    {
      v131[0] = "$";
      v131[2] = &v140;
      *(void *)&long long v148 = v123;
      *((void *)&v148 + 1) = *((void *)&v137 + 1);
      *(void *)&long long v149 = v131;
      LOBYTE(v150) = v126;
      BYTE1(v150) = 2;
      char v40 = 12;
      char v39 = 3;
    }
    else
    {
      long long v148 = v137;
      long long v149 = v138;
      uint64_t v150 = v139;
      char v39 = 1;
      char v40 = 1;
    }
    char v132 = v39;
    char v133 = v40;
    int v41 = *(unsigned __int8 *)(v35 + 16);
    if (v35 && v41 == 16)
    {
      uint64_t v42 = *(unsigned int *)(v35 + 32);
      if (v42 >= 0x41)
      {
        int v64 = 0;
        int64_t v65 = (unint64_t)(v42 + 63) >> 6;
        do
        {
          BOOL v66 = v65-- < 1;
          if (v66) {
            break;
          }
          unint64_t v67 = *(void *)(*(void *)(v35 + 24) + 8 * v65);
          v64 += __clz(v67);
        }
        while (!v67);
        int v68 = v42 | 0xFFFFFFC0;
        if ((v42 & 0x3F) == 0) {
          int v68 = 0;
        }
        unint64_t v24 = (unint64_t)a1;
        if (v64 + v68 == v42) {
          goto LABEL_61;
        }
      }
      else if (!*(void *)(v35 + 24))
      {
LABEL_61:
        int v43 = 1;
        char v44 = 1;
        char v45 = 1;
        char v46 = 1;
        goto LABEL_78;
      }
    }
    else if (v35 && v41 == 17)
    {
      if (sub_1CB844168(v35, 0.0)) {
        goto LABEL_61;
      }
    }
    else
    {
      unsigned __int8 v47 = v41 - 13;
      if (v47 < 8u && ((0xE1u >> v47) & 1) != 0) {
        goto LABEL_61;
      }
    }
    if ((*(unsigned char *)(v35 + 23) & 0x10) != 0)
    {
      uint64_t v48 = ***(void ***)v35;
      uint64_t v49 = *(void *)(v48 + 152);
      uint64_t v50 = *(unsigned int *)(v48 + 168);
      if (v50)
      {
        LODWORD(v51) = (v50 - 1) & ((v35 >> 4) ^ (v35 >> 9));
        long long v52 = (uint64_t *)(v49 + 16 * v51);
        uint64_t v53 = *v52;
        if (*v52 != v35)
        {
          int v54 = 1;
          do
          {
            if (v53 == -4096) {
              goto LABEL_75;
            }
            int v55 = v51 + v54++;
            uint64_t v51 = v55 & (v50 - 1);
            uint64_t v53 = *(void *)(v49 + 16 * v51);
          }
          while (v53 != v35);
          long long v52 = (uint64_t *)(v49 + 16 * v51);
        }
      }
      else
      {
LABEL_75:
        long long v52 = (uint64_t *)(v49 + 16 * v50);
      }
      uint64_t v56 = (void *)v52[1];
      uint64_t v59 = *v56;
      uint64_t v57 = (char *)(v56 + 2);
      uint64_t v58 = v59;
    }
    else
    {
      uint64_t v58 = 0;
      uint64_t v57 = &byte_1CFBCE98E;
    }
    int v43 = 0;
    *(void *)&long long v128 = ".";
    *(void *)&long long v129 = v57;
    *((void *)&v129 + 1) = v58;
    char v46 = 5;
    char v45 = 3;
    char v44 = 2;
LABEL_78:
    LOBYTE(v130) = v45;
    BYTE1(v130) = v46;
    if (v150 == 1)
    {
      long long v145 = v128;
      long long v146 = v129;
      int v60 = v130;
    }
    else
    {
      if (!(_BYTE)v150)
      {
        LOWORD(v147) = 256;
        goto LABEL_91;
      }
      if (!v43)
      {
        if (BYTE1(v150) == 1) {
          char v61 = (char)v150;
        }
        else {
          char v61 = 2;
        }
        uint64_t v62 = &v148;
        if (BYTE1(v150) == 1) {
          uint64_t v62 = (long long *)v148;
        }
        *(void *)&long long v145 = v62;
        *((void *)&v145 + 1) = *((void *)&v148 + 1);
        *(void *)&long long v146 = &v128;
        LOBYTE(v147) = v61;
        BYTE1(v147) = v44;
LABEL_91:
        uint64_t v63 = operator new(0x80uLL);
        *((_DWORD *)v63 + 7) = *((_DWORD *)v63 + 7) & 0x38000000 | 0x40000000;
        *(void *)uint64_t v63 = 0;
        llvm::Function::Function((unint64_t *)v63 + 1, v125, 8, (llvm::Type *)0xFFFFFFFFLL, (const char **)&v145, v24);
        *(void *)&long long v145 = "body";
        LOWORD(v147) = 259;
        operator new();
      }
      long long v145 = v148;
      long long v146 = v149;
      int v60 = v150;
    }
    BOOL v147 = v60;
    goto LABEL_91;
  }
  sub_1CD888BEC(v143);
  return v122;
}

void sub_1CD1BDF40()
{
}

void sub_1CD1BDF80(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD1BDFB8()
{
}

void sub_1CD1BDFC8(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

BOOL sub_1CD1BE014(uint64_t a1, void *a2)
{
  return sub_1CD1BCA2C(a2);
}

char *sub_1CD1BE01C(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x78uLL);
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0x38000000 | 1;
  *(void *)unsigned int v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = v2 + 32;
  uint64_t v3 = *(void *)a1;
  size_t v4 = **(llvm::PointerType ***)(a1 + 8);
  uint64_t v8 = "__dso_handle";
  __int16 v9 = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v2 + 4, v3, v4, 1, 9, 0, &v8, 0, 0, 0, 0);
  int v5 = *((_DWORD *)v2 + 16);
  unsigned int v6 = v5 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v2 + 16) = v6;
  if ((v5 & 0xFu) - 7 < 2) {
    goto LABEL_4;
  }
  if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)(v2 + 32)) & 1) == 0)
  {
    unsigned int v6 = *((_DWORD *)v2 + 16);
LABEL_4:
    *((_DWORD *)v2 + 16) = v6 | 0x4000;
  }
  return v2 + 32;
}

void llvm::initializeLowerInvokeLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD150, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD1BE164;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFD150, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD1BE164()
{
}

uint64_t sub_1CD1BE200(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFD148;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26487D0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD150, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1BE164;
    v5[1] = &PassRegistry;
    size_t v4 = v5;
    std::__call_once(&qword_1EBCFD150, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD1BE2B0(uint64_t a1)
{
  v87[16] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1 != a1 + 72)
  {
    while (1)
    {
      uint64_t v2 = v1 ? v1 - 24 : 0;
      uint64_t v3 = *(void *)(v2 + 40);
      if (v3 != v2 + 40)
      {
        uint64_t v4 = v3 ? v3 - 24 : 0;
        unsigned int v5 = *(unsigned __int8 *)(v4 + 16) - 40;
        uint64_t v6 = v5 >= 0xFFFFFFF5 ? v4 : 0;
        if (v3)
        {
          if (*(unsigned char *)(v6 + 16) == 33 && v5 >= 0xFFFFFFF5) {
            break;
          }
        }
      }
      uint64_t v1 = *(void *)(v1 + 8);
      if (v1 == a1 + 72) {
        return 0;
      }
    }
    uint64_t v78 = (llvm::BasicBlock *)v2;
    int v8 = *(_DWORD *)(v6 + 20);
    uint64_t v9 = v8 & 0x7FFFFFF;
    int v10 = (void *)(v6 - 32 * v9);
    if (v8 < 0)
    {
      uint64_t v59 = *(v10 - 1);
      if ((v59 & 0xFFFFFFFF0) != 0) {
        uint64_t v11 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v59));
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v6 - 32 * v11 - 96;
    uint64_t v85 = v87;
    uint64_t v86 = 0x1000000000;
    unint64_t v13 = v12 - (void)v10;
    if ((unint64_t)(v12 - (void)v10) >= 0x201) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v10 != (void *)v12)
    {
      uint64_t v14 = v85;
      uint64_t v15 = 32 * v9 - 32 * v11 - 96;
      do
      {
        uint64_t v16 = *v10;
        v10 += 4;
        *v14++ = v16;
        v15 -= 32;
      }
      while (v15);
    }
    unsigned int v17 = v13 >> 5;
    LODWORD(v86) = v17;
    unint64_t v82 = v84;
    uint64_t v83 = 0x100000000;
    int v18 = *(_DWORD *)(v6 + 20);
    if (v18 < 0)
    {
      unint64_t v60 = *(void *)(v6 - 32 * (v18 & 0x7FFFFFF) - 8);
      if ((v60 & 0xFFFFFFFF0) != 0)
      {
        uint64_t v65 = (v60 >> 4);
        uint64_t v66 = v6;
        do
        {
          uint64_t v67 = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
          uint64_t v68 = v6 - 32 * v67;
          uint64_t v69 = (unsigned int *)(v66 - (*(void *)(v68 - 8) + 32 * v67));
          uint64_t v70 = *v69;
          uint64_t v71 = v69[1];
          uint64_t v72 = (const char *)*((void *)v69 - 1);
          v80[0] = (const char *)(v68 + 32 * v70);
          v80[1] = (const char *)(v71 - v70);
          v80[2] = v72;
          sub_1CD5C74F0((uint64_t)&v82, (uint64_t)v80);
          v66 += 16;
          --v65;
        }
        while (v65);
        unsigned int v17 = v86;
        uint64_t v20 = v82;
        unsigned int v19 = v83;
      }
      else
      {
        unsigned int v19 = 0;
        uint64_t v20 = v84;
      }
    }
    else
    {
      unsigned int v19 = 0;
      uint64_t v20 = v84;
    }
    int v21 = *(uint64_t ***)(v6 + 72);
    uint64_t v74 = (uint64_t *)v85;
    BOOL v75 = *(uint64_t ***)(v6 - 32);
    uint64_t v22 = v19;
    __int16 v81 = 257;
    uint64_t v76 = (uint64_t)v20;
    if (v19)
    {
      unsigned int v19 = 0;
      uint64_t v61 = 48 * v22;
      uint64_t v62 = v20 + 32;
      do
      {
        v19 += (*v62 - *(v62 - 1)) >> 3;
        v62 += 6;
        v61 -= 48;
      }
      while (v61);
    }
    unsigned int v77 = v17;
    unsigned int v23 = v17 + 1;
    uint64_t v24 = v19 + v17 + 1;
    uint64_t v25 = (16 * v22);
    if (v25) {
      uint64_t v26 = (16 * v22) | 8u;
    }
    else {
      uint64_t v26 = 0;
    }
    int v27 = (char *)operator new(v26 + 32 * v24 + 80);
    unsigned int v28 = &v27[v26];
    uint64_t v29 = (uint64_t)&v27[32 * v24 + v26];
    *(_DWORD *)(v29 + 20) = v24 & 0x7FFFFFF | ((v25 != 0) << 31) | *(_DWORD *)(v29 + 20) & 0x38000000;
    if (v24)
    {
      do
      {
        *(void *)unsigned int v28 = 0;
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        *((void *)v28 + 3) = v29;
        v28 += 32;
      }
      while (v28 != (char *)v29);
    }
    int v30 = v21;
    if (v25) {
      *(void *)&v27[v25] = v25;
    }
    int v31 = 0;
    if (v22)
    {
      uint64_t v63 = 48 * v22;
      int v64 = (void *)(v76 + 32);
      do
      {
        v31 += (*v64 - *(v64 - 1)) >> 3;
        v64 += 6;
        v63 -= 48;
      }
      while (v63);
    }
    *(void *)uint64_t v29 = *v21[2];
    *(void *)(v29 + 8) = 0;
    unsigned int v32 = *(_DWORD *)(v29 + 20) & 0xC0000000 | (v31 + v23) & 0x7FFFFFF;
    *(_DWORD *)(v29 + 16) = 84;
    *(_DWORD *)(v29 + 20) = v32;
    *(_OWORD *)(v29 + 24) = 0u;
    uint64_t v33 = v29 + 24;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_DWORD *)(v29 + 56) = 0;
    uint64_t v34 = *(void *)(v6 + 40);
    *(void *)(v29 + 40) = v34;
    *(_WORD *)(v34 + 18) &= ~0x8000u;
    if ((*(unsigned char *)(v29 + 23) & 0x10) != 0)
    {
      uint64_t v51 = *(void *)(v34 + 56);
      if (v51)
      {
        long long v52 = *(llvm::ValueSymbolTable **)(v51 + 104);
        if (v52) {
          llvm::ValueSymbolTable::reinsertValue(v52, (llvm::Value *)v29);
        }
      }
    }
    uint64_t v35 = *(void *)(v6 + 24);
    char v36 = (uint64_t *)(v6 + 24);
    *(void *)(v29 + 24) = v35;
    *(void *)(v29 + 32) = v6 + 24;
    *(void *)(v35 + 8) = v33;
    *(void *)(v6 + 24) = v33;
    *(void *)(v29 + 64) = 0;
    llvm::CallInst::init((uint64_t ***)v29, v30, v75, v74, v77, v76, v22, v80);
    llvm::Value::takeName((int32x2_t ****)v29, (llvm::Value *)v6);
    *(_WORD *)(v29 + 18) = *(_WORD *)(v29 + 18) & 0xF003 | *(_WORD *)(v6 + 18) & 0xFFC;
    *(void *)(v29 + 64) = *(void *)(v6 + 64);
    char v37 = *(unsigned __int8 **)(v6 + 48);
    unint64_t v79 = v37;
    if (v37) {
      llvm::MetadataTracking::track((uint64_t)&v79, v37, 2);
    }
    char v38 = *(unsigned __int8 **)(v29 + 48);
    if (!v38)
    {
LABEL_39:
      char v39 = v79;
      *(void *)(v29 + 48) = v79;
      if (v39)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v79, v39, v29 + 48);
        unint64_t v79 = 0;
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, (llvm::Value *)v29, (llvm::Value *)1);
      uint64_t v40 = *(void *)(v6 - 96);
      int v41 = (char *)operator new(0x60uLL);
      *((_DWORD *)v41 + 13) = *((_DWORD *)v41 + 13) & 0x38000000 | 1;
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = 0;
      *(void *)int v41 = 0;
      *((void *)v41 + 4) = ***(void ***)v40 + 1576;
      *((void *)v41 + 3) = v41 + 32;
      *((void *)v41 + 5) = 0;
      v41[48] = 30;
      v41[49] = 0;
      *((_WORD *)v41 + 25) = 0;
      *((_DWORD *)v41 + 13) = 1;
      *(_OWORD *)(v41 + 56) = 0u;
      uint64_t v42 = v41 + 56;
      *(_OWORD *)(v41 + 72) = 0u;
      *((_DWORD *)v41 + 22) = 0;
      uint64_t v43 = *(void *)(v6 + 40);
      *((void *)v41 + 9) = v43;
      *(_WORD *)(v43 + 18) &= ~0x8000u;
      if ((v41[55] & 0x10) != 0
        && (uint64_t v53 = *(void *)(v43 + 56)) != 0
        && (int v54 = *(llvm::ValueSymbolTable **)(v53 + 104)) != 0)
      {
        llvm::ValueSymbolTable::reinsertValue(v54, (llvm::Value *)(v41 + 32));
        uint64_t v55 = *(void *)v41;
        uint64_t v56 = *v36;
        *((void *)v41 + 7) = *v36;
        *((void *)v41 + 8) = v36;
        *(void *)(v56 + 8) = v42;
        uint64_t *v36 = (uint64_t)v42;
        if (v55)
        {
          **((void **)v41 + 2) = *((void *)v41 + 1);
          uint64_t v57 = *((void *)v41 + 1);
          if (v57) {
            *(void *)(v57 + 16) = *((void *)v41 + 2);
          }
        }
      }
      else
      {
        uint64_t v44 = *v36;
        *((void *)v41 + 7) = *v36;
        *((void *)v41 + 8) = v36;
        *(void *)(v44 + 8) = v42;
        uint64_t *v36 = (uint64_t)v42;
      }
      *(void *)int v41 = v40;
      uint64_t v47 = *(void *)(v40 + 8);
      char v46 = (void *)(v40 + 8);
      uint64_t v45 = v47;
      *((void *)v41 + 1) = v47;
      if (v47) {
        *(void *)(v45 + 16) = v41 + 8;
      }
      *((void *)v41 + 2) = v46;
      void *v46 = v41;
      llvm::BasicBlock::removePredecessor(*(llvm::Type **)(v6 - 64), v78, 0);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v48 = *v38;
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        uint64_t v58 = *(void *)(v29 + 48);
      }
      else {
        uint64_t v58 = 0;
      }
      if ((v48 - 3) < 0xFFFFFFFE)
      {
        if (v48 == 3) {
          *((void *)v38 + 1) = 0;
        }
        goto LABEL_39;
      }
      unint64_t v50 = v58 + 8;
    }
    else
    {
      if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
        goto LABEL_39;
      }
      uint64_t v49 = *((void *)v38 + 2);
      if ((v49 & 4) == 0) {
        goto LABEL_39;
      }
      unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v50) {
        goto LABEL_39;
      }
    }
    v80[0] = (const char *)(v29 + 48);
    sub_1CC5FA668(v50 + 16, v80);
    goto LABEL_39;
  }
  return 0;
}

void sub_1CD1BE968()
{
}

void sub_1CD1BE9A8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD1BE9E0(uint64_t a1, uint64_t a2)
{
  return sub_1CD1BE2B0(a2);
}

void llvm::createMemCpyLoopKnownSize(uint64_t **a1, unsigned __int8 *a2, llvm::Instruction *a3, uint64_t a4, char a5, char a6, __int16 a7, __int16 a8, char a9, void *a10, uint64_t a11)
{
  v122[1] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = (void *)(a4 + 24);
  uint64_t v16 = *(unsigned int *)(a4 + 32);
  if (v16 > 0x40)
  {
    int v17 = 0;
    int64_t v18 = (unint64_t)(v16 + 63) >> 6;
    do
    {
      if (v18-- < 1) {
        break;
      }
      unint64_t v20 = *(void *)(*v15 + 8 * v18);
      v17 += __clz(v20);
    }
    while (!v20);
    int v21 = v16 | 0xFFFFFFC0;
    if ((v16 & 0x3F) == 0) {
      int v21 = 0;
    }
    if (v17 + v21 == v16) {
      return;
    }
  }
  else if (!*v15)
  {
    return;
  }
  uint64_t v87 = (void **)(a4 + 24);
  uint64_t v22 = (uint64_t)a1[5];
  uint64_t v84 = v22;
  uint64_t v24 = *(void *)(*(void *)(v22 + 56) + 40) + 272;
  int v101 = **(uint64_t ***)v22;
  unsigned int v23 = v101;
  uint64_t v26 = llvm::MDBuilder::createAnonymousAARoot(&v101, "MemCopyDomain", 0xDuLL, 0);
  uint64_t v90 = llvm::MDBuilder::createAnonymousAARoot(&v101, "MemCopyAliasScope", 0x11uLL, (uint64_t)v26);
  uint64_t v97 = a3;
  unint64_t v98 = *(llvm::ConstantInt **)a4;
  unsigned int v93 = *(_DWORD *)(*(void *)a3 + 8) >> 8;
  unsigned int v94 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
  uint64_t v91 = 1 << a6;
  uint64_t v92 = 1 << a5;
  uint64_t v27 = (*(uint64_t (**)(void))(*(void *)*a10 + 1016))();
  uint64_t v89 = v24;
  uint64_t v29 = sub_1CB83544C(v24, v27);
  if (v28 == 1) {
  unsigned int v30 = *(_DWORD *)(a4 + 32);
  }
  int v31 = v87;
  unsigned int v32 = (unint64_t *)v87;
  if (v30 >= 0x41) {
    unsigned int v32 = *v87;
  }
  unint64_t v33 = *v32;
  unint64_t v34 = ((unint64_t)(v29 + 7) >> 3);
  __int16 v81 = a1;
  if (v34 <= v33)
  {
    unint64_t v107 = "memcpy-split";
    v109[8] = 259;
    llvm::BasicBlock::splitBasicBlock(v84, (uint64_t)(a1 + 3), (uint64_t)&v107, 0);
  }
  unint64_t v35 = v33 / v34 * v34;
  if (v30 >= 0x41) {
    int v31 = *v87;
  }
  unint64_t v36 = *v31 - v35;
  if (*v31 != v35)
  {
    char v37 = 0;
    uint64_t v38 = **v81;
    unint64_t v107 = (char *)v109;
    uint64_t v108 = 0x200000000;
    uint64_t v112 = v38;
    uint64_t v113 = &v121;
    int v114 = v122;
    uint64_t v115 = 0;
    int v116 = 0;
    __int16 v117 = 512;
    char v118 = 7;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    int v121 = &unk_1F2616E88;
    v122[0] = &unk_1F2617008;
    unint64_t v110 = v81[5];
    uint64_t v111 = v81 + 3;
    char v39 = (char *)v81[6];
    v102[0] = v39;
    if (v39)
    {
      llvm::MetadataTracking::track((uint64_t)v102, (unsigned __int8 *)v39, 2);
      char v37 = v102[0];
    }
    sub_1CB8461A4((uint64_t)&v107, 0, (uint64_t)v37);
    if (!v102[0]) {
      goto LABEL_22;
    }
    int v77 = *v102[0];
    if ((v77 - 4) > 0x1E)
    {
      if ((v77 - 3) >= 0xFFFFFFFE) {
        int v80 = v102[0];
      }
      else {
        int v80 = 0;
      }
      if ((v77 - 3) < 0xFFFFFFFE)
      {
        if (v77 == 3) {
          *((void *)v102[0] + 1) = 0;
        }
        goto LABEL_22;
      }
      unint64_t v79 = (unint64_t)(v80 + 8);
    }
    else
    {
      if ((v102[0][1] & 0x7F) != 2 && !*((_DWORD *)v102[0] + 3)) {
        goto LABEL_22;
      }
      uint64_t v78 = *((void *)v102[0] + 2);
      if ((v78 & 4) == 0) {
        goto LABEL_22;
      }
      unint64_t v79 = v78 & 0xFFFFFFFFFFFFFFF8;
      if (!v79) {
        goto LABEL_22;
      }
    }
    uint64_t v104 = v102;
    sub_1CC5FA668(v79 + 16, &v104);
LABEL_22:
    uint64_t v104 = v106;
    uint64_t v105 = 0x500000000;
    (*(void (**)(void, void **, uint64_t *, unint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)*a10 + 1024))(*a10, &v104, v23, v36, v94, v93, v92, v91, a11);
    uint64_t v40 = (uint64_t *)v104;
    if (v105)
    {
      uint64_t v86 = (uint64_t *)((char *)v104 + 8 * v105);
      BOOL v88 = a2;
      do
      {
        int v41 = (llvm::PointerType *)*v40;
        uint64_t v43 = sub_1CB83544C(v89, *v40);
        if (v42 == 1) {
        unint64_t v44 = llvm::PointerType::get(v41, (llvm::Type *)v94);
        }
        uint64_t v45 = a2;
        if (*(void *)a2 != v44)
        {
          __int16 v100 = 257;
          if (a2[16] <= 0x14u)
          {
            uint64_t v45 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v113
                                      + 28))(v113, 49, a2, v44);
            if (v45) {
              BOOL v48 = v45[16] >= 0x1Cu;
            }
            else {
              BOOL v48 = 0;
            }
            if (v48)
            {
              (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v114 + 16))(v114, v45, v99, v110, v111);
              if (v108)
              {
                uint64_t v74 = (llvm::MDNode **)v107;
                BOOL v75 = &v107[16 * v108];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v74, v74[1]);
                  v74 += 2;
                }
                while (v74 != (llvm::MDNode **)v75);
              }
            }
          }
          else
          {
            __int16 v103 = 257;
            uint64_t v45 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)a2, v44, v102, 0);
            (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v114 + 16))(v114, v45, v99, v110, v111);
            if (v108)
            {
              char v46 = (llvm::MDNode **)v107;
              uint64_t v47 = &v107[16 * v108];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v46, v46[1]);
                v46 += 2;
              }
              while (v46 != (llvm::MDNode **)v47);
            }
          }
        }
        unint64_t v49 = ((unint64_t)(v43 + 7) >> 3);
        unint64_t v50 = (const char *)llvm::ConstantInt::get(v98, v35 / v49, 0);
        __int16 v103 = 257;
        uint64_t v51 = sub_1CC278130((uint64_t *)&v107, (uint64_t)v41, (uint64_t *)v45, v50, (uint64_t)v102);
        __int16 v100 = 257;
        long long v52 = (char *)operator new(0x60uLL);
        *((_DWORD *)v52 + 13) = *((_DWORD *)v52 + 13) & 0x38000000 | 1;
        uint64_t v53 = (llvm::Instruction *)(v52 + 32);
        *(void *)long long v52 = 0;
        *((void *)v52 + 1) = 0;
        *((void *)v52 + 2) = 0;
        *((void *)v52 + 3) = v52 + 32;
        __int16 v103 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v52 + 32), (uint64_t)v41, (uint64_t)v51, v102, a7, 63 - __clz((v35 | v92) & -(uint64_t)(v35 | v92)), 0);
        (*(void (**)(void *, char *, unsigned char *, uint64_t *, uint64_t **))(*v114 + 16))(v114, v52 + 32, v99, v110, v111);
        if (v108)
        {
          uint64_t v70 = (llvm::MDNode **)v107;
          uint64_t v71 = &v107[16 * v108];
          do
          {
            llvm::Instruction::setMetadata(v53, *(_DWORD *)v70, v70[1]);
            v70 += 2;
          }
          while (v70 != (llvm::MDNode **)v71);
        }
        if ((a9 & 1) == 0)
        {
          v102[0] = (const char *)v90;
          Impl = llvm::MDTuple::getImpl((uint64_t)v23, v102, 1, 0, 1);
          llvm::Instruction::setMetadata(v53, 7, Impl);
        }
        unint64_t v55 = llvm::PointerType::get(v41, (llvm::Type *)v93);
        uint64_t v56 = (unsigned __int8 *)v97;
        if (*(void *)v97 != v55)
        {
          __int16 v100 = 257;
          if (*((unsigned __int8 *)v97 + 16) <= 0x14u)
          {
            uint64_t v56 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, unint64_t))*v113
                                      + 28))(v113, 49, v97, v55);
            if (v56) {
              BOOL v58 = v56[16] >= 0x1Cu;
            }
            else {
              BOOL v58 = 0;
            }
            if (v58)
            {
              (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v114 + 16))(v114, v56, v99, v110, v111);
              if (v108)
              {
                uint64_t v76 = (llvm::MDNode **)v107;
                uint64_t v83 = &v107[16 * v108];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v76, v76[1]);
                  v76 += 2;
                }
                while (v76 != (llvm::MDNode **)v83);
              }
            }
          }
          else
          {
            __int16 v103 = 257;
            uint64_t v56 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v97, v55, v102, 0);
            (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t *, uint64_t **))(*v114 + 16))(v114, v56, v99, v110, v111);
            if (v108)
            {
              uint64_t v57 = (llvm::MDNode **)v107;
              unint64_t v82 = &v107[16 * v108];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v57, v57[1]);
                v57 += 2;
              }
              while (v57 != (llvm::MDNode **)v82);
            }
          }
        }
        uint64_t v59 = (const char *)llvm::ConstantInt::get(v98, v35 / v49, 0);
        __int16 v103 = 257;
        unint64_t v60 = sub_1CC278130((uint64_t *)&v107, (uint64_t)v41, (uint64_t *)v56, v59, (uint64_t)v102);
        uint64_t v61 = (char *)operator new(0x80uLL);
        uint64_t v62 = v61;
        *((_DWORD *)v61 + 21) = *((_DWORD *)v61 + 21) & 0x38000000 | 2;
        *(void *)uint64_t v61 = 0;
        *((void *)v61 + 2) = 0;
        *((void *)v61 + 1) = 0;
        *((void *)v61 + 5) = 0;
        *((void *)v61 + 6) = 0;
        *((void *)v61 + 4) = 0;
        *((void *)v61 + 8) = ***((void ***)v52 + 4) + 1576;
        uint64_t v63 = (llvm::Instruction *)(v61 + 64);
        *((void *)v61 + 3) = v61 + 64;
        *((void *)v61 + 7) = v61 + 64;
        *((void *)v61 + 9) = 0;
        v61[80] = 61;
        v61[81] = 0;
        *((_DWORD *)v61 + 21) = 2;
        *(_OWORD *)(v61 + 88) = 0u;
        *(_OWORD *)(v61 + 104) = 0u;
        *((_DWORD *)v61 + 30) = 0;
        int v64 = v52 + 40;
        uint64_t v65 = *((void *)v52 + 5);
        *(void *)uint64_t v61 = v53;
        *((void *)v61 + 1) = v65;
        if (v65) {
          *(void *)(v65 + 16) = v61 + 8;
        }
        *((void *)v61 + 2) = v64;
        *int v64 = v61;
        *((void *)v61 + 4) = v60;
        if (v60)
        {
          uint64_t v68 = *((void *)v60 + 1);
          uint64_t v67 = (void *)((char *)v60 + 8);
          uint64_t v66 = v68;
          *((void *)v61 + 5) = v68;
          if (v68) {
            *(void *)(v66 + 16) = v61 + 40;
          }
          *((void *)v61 + 6) = v67;
          *uint64_t v67 = v61 + 32;
        }
        *((_WORD *)v61 + 41) = (126 - 2 * __clz((v35 | v91) & -(uint64_t)(v35 | v91))) & 0x7E | a8;
        v61[124] = 1;
        __int16 v103 = 257;
        (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t *, uint64_t **))(*v114 + 16))(v114, v63, v102, v110, v111);
        if (v108)
        {
          uint64_t v72 = (llvm::MDNode **)v107;
          BOOL v73 = &v107[16 * v108];
          do
          {
            llvm::Instruction::setMetadata(v63, *(_DWORD *)v72, v72[1]);
            v72 += 2;
          }
          while (v72 != (llvm::MDNode **)v73);
        }
        if ((a9 & 1) == 0)
        {
          v102[0] = (const char *)v90;
          uint64_t v69 = llvm::MDTuple::getImpl((uint64_t)v23, v102, 1, 0, 1);
          llvm::Instruction::setMetadata(v63, 8, v69);
        }
        if (BYTE4(a11))
        {
          *((_WORD *)v52 + 25) = *((_WORD *)v52 + 25) & 0xFC7F | 0x80;
          v52[92] = 1;
          *((_WORD *)v62 + 41) = *((_WORD *)v62 + 41) & 0xFC7F | 0x80;
          v62[124] = 1;
        }
        v35 += v49;
        ++v40;
        a2 = v88;
      }
      while (v40 != v86);
      uint64_t v40 = (uint64_t *)v104;
    }
    if (v40 != (uint64_t *)v106) {
      free(v40);
    }
    if (v107 != (char *)v109) {
      free(v107);
    }
  }
}

void llvm::createMemCpyLoopUnknownSize(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = "post-loop-memcpy-expansion";
  __int16 v3 = 259;
  llvm::BasicBlock::splitBasicBlock(v1, a1 + 24, (uint64_t)&v2, 0);
}

void llvm::expandMemCpyAsLoop(uint64_t a1, void *a2, llvm::ScalarEvolution *this)
{
  if (!this)
  {
LABEL_2:
    char v4 = 1;
    goto LABEL_3;
  }
  uint64_t v38 = a2;
  uint64_t v39 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  unint64_t v40 = *(void *)(a1 - 32 * v39 + 32);
  uint64_t v41 = *((void *)this + 13);
  unsigned int v42 = *((_DWORD *)this + 30);
  if (!v42) {
    goto LABEL_50;
  }
  unsigned int v43 = ((v40 >> 4) ^ (v40 >> 9)) & (v42 - 1);
  uint64_t v44 = v41 + 48 * v43;
  uint64_t v45 = *(void *)(v44 + 24);
  if (v45 != v40)
  {
    int v46 = 1;
    while (v45 != -4096)
    {
      unsigned int v47 = v43 + v46++;
      unsigned int v43 = v47 & (v42 - 1);
      uint64_t v44 = v41 + 48 * v43;
      uint64_t v45 = *(void *)(v44 + 24);
      if (v45 == v40) {
        goto LABEL_51;
      }
    }
LABEL_50:
    uint64_t v44 = v41 + 48 * v42;
  }
LABEL_51:
  if (v44 == v41 + 48 * v42 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v44 + 40)) == 0)
  {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v40);
    uint64_t v41 = *((void *)this + 13);
    unsigned int v42 = *((_DWORD *)this + 30);
    uint64_t v39 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  }
  unint64_t v49 = *(void *)(a1 - 32 * v39);
  if (!v42)
  {
LABEL_60:
    uint64_t v51 = v41 + 48 * v42;
    goto LABEL_61;
  }
  unsigned int v50 = ((v49 >> 4) ^ (v49 >> 9)) & (v42 - 1);
  uint64_t v51 = v41 + 48 * v50;
  uint64_t v52 = *(void *)(v51 + 24);
  if (v52 != v49)
  {
    int v53 = 1;
    while (v52 != -4096)
    {
      unsigned int v54 = v50 + v53++;
      unsigned int v50 = v54 & (v42 - 1);
      uint64_t v51 = v41 + 48 * v50;
      uint64_t v52 = *(void *)(v51 + 24);
      if (v52 == v49) {
        goto LABEL_61;
      }
    }
    goto LABEL_60;
  }
LABEL_61:
  if (v51 == v41 + 48 * v42 || (unint64_t v55 = *(const llvm::SCEV **)(v51 + 40)) == 0) {
    unint64_t v55 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v49);
  }
  char isKnownPredicateAt = llvm::ScalarEvolution::isKnownPredicateAt(this, 33, SCEVIter, v55, a1);
  a2 = v38;
  if ((isKnownPredicateAt & 1) == 0) {
    goto LABEL_2;
  }
  char v4 = 0;
LABEL_3:
  uint64_t v5 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v6 + 16) == 16;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = !v7;
  uint64_t v9 = *(unsigned __int8 **)(v5 + 32);
  int v10 = *(llvm::Instruction **)v5;
  uint64_t v11 = *(void *)(a1 + 64);
  if (!v11)
  {
    int v16 = 0;
    LOBYTE(v17) = 0;
    char v18 = 0;
    goto LABEL_23;
  }
  unsigned int v12 = *(_DWORD *)(v11 + 8);
  if (v12 < 4)
  {
    char v18 = 0;
    if (v12 != 3)
    {
      int v16 = 0;
      LOBYTE(v17) = 0;
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v13 = *(llvm::AttributeSetNode **)(v11 + 64);
    if (v13)
    {
      uint64_t v14 = a2;
      LOWORD(v13) = llvm::AttributeSetNode::getAlignment(v13);
      a2 = v14;
      int v15 = BYTE1(v13);
    }
    else
    {
      int v15 = 0;
    }
    unsigned int v19 = v13 | (v15 << 8);
    if (v19 <= 0x100) {
      char v18 = 0;
    }
    else {
      char v18 = v19;
    }
  }
  int v17 = *(llvm::AttributeSetNode **)(v11 + 56);
  if (v17)
  {
    unint64_t v20 = a2;
    LOWORD(v17) = llvm::AttributeSetNode::getAlignment(v17);
    a2 = v20;
    int v16 = BYTE1(v17);
  }
  else
  {
    int v16 = 0;
  }
LABEL_23:
  unsigned int v21 = v17 | (v16 << 8);
  if (v21 <= 0x100) {
    LOBYTE(v21) = 0;
  }
  uint64_t v22 = *(void *)(v5 + 96);
  uint64_t v23 = *(unsigned int *)(v22 + 32);
  if (v8)
  {
    if (v23 > 0x40)
    {
      int v27 = 0;
      int64_t v28 = (unint64_t)(v23 + 63) >> 6;
      do
      {
        BOOL v29 = v28-- < 1;
        if (v29) {
          break;
        }
        unint64_t v30 = *(void *)(*(void *)(v22 + 24) + 8 * v28);
        v27 += __clz(v30);
      }
      while (!v30);
    }
    llvm::createMemCpyLoopUnknownSize(a1);
  }
  if (v23 > 0x40)
  {
    int v31 = 0;
    int64_t v32 = (unint64_t)(v23 + 63) >> 6;
    do
    {
      BOOL v29 = v32-- < 1;
      if (v29) {
        break;
      }
      unint64_t v33 = *(void *)(*(void *)(v22 + 24) + 8 * v32);
      v31 += __clz(v33);
    }
    while (!v33);
    int v34 = v23 | 0xFFFFFFC0;
    if ((v23 & 0x3F) == 0) {
      int v34 = 0;
    }
    int v35 = v31 + v34;
    __int16 v26 = v35 != v23;
    BOOL v25 = v35 == v23;
  }
  else
  {
    uint64_t v24 = *(void *)(v22 + 24);
    BOOL v25 = v24 == 0;
    __int16 v26 = v24 != 0;
  }
  __int16 v36 = v25;
  llvm::createMemCpyLoopKnownSize((uint64_t **)a1, v9, v10, v6, v18, v21, v26, v36 ^ 1, v4, a2, 0);
}

void llvm::expandMemMoveAsLoop(llvm::Value *a1)
{
  v62[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
  __int16 v3 = (unsigned __int8 *)v2[4];
  uint64_t v4 = *v2;
  uint64_t v5 = *((void *)a1 + 8);
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(v5 + 8);
    if (v6 < 4)
    {
      if (v6 != 3) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v7 = *(llvm::AttributeSetNode **)(v5 + 64);
      if (v7) {
        llvm::AttributeSetNode::getAlignment(v7);
      }
    }
    char v8 = *(llvm::AttributeSetNode **)(v5 + 56);
    if (v8) {
      llvm::AttributeSetNode::getAlignment(v8);
    }
  }
LABEL_9:
  uint64_t v9 = 0;
  uint64_t v10 = *((void *)a1 + 5);
  uint64_t v11 = **(void **)a1;
  unsigned int v47 = (llvm::Instruction *)&v49;
  uint64_t v48 = 0x200000000;
  uint64_t v52 = v11;
  int v53 = &v61;
  unsigned int v54 = v62;
  uint64_t v55 = 0;
  int v56 = 0;
  __int16 v57 = 512;
  char v58 = 7;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = &unk_1F2616E88;
  v62[0] = &unk_1F2617008;
  uint64_t v50 = v10;
  uint64_t v51 = (char *)a1 + 24;
  unsigned int v12 = (void *)*((void *)a1 + 6);
  unsigned int v43 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)&v43, (unsigned __int8 *)v12, 2);
    uint64_t v9 = v43;
  }
  sub_1CB8461A4((uint64_t)&v47, 0, (uint64_t)v9);
  if (!v43)
  {
LABEL_12:
    unsigned int v13 = *(_DWORD *)(*(void *)v3 + 8);
    if ((v13 & 0xFE) == 0x12) {
      unsigned int v13 = *(_DWORD *)(**(void **)(*(void *)v3 + 16) + 8);
    }
    unint64_t v14 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v52 + 1912), (llvm::Type *)(v13 >> 8));
    __int16 v44 = 257;
    if (*(void *)v3 != v14)
    {
      if (v3[16] <= 0x14u)
      {
        __int16 v3 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v53
                                 + 28))(v53, 49, v3, v14);
        if (v3) {
          BOOL v16 = v3[16] >= 0x1Cu;
        }
        else {
          BOOL v16 = 0;
        }
        if (v16)
        {
          int v34 = (llvm::Instruction *)v3;
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, char *))(*v54 + 16))(v54, v3, &v43, v50, v51);
          if (v48)
          {
            char v37 = v47;
            unint64_t v40 = (llvm::Instruction *)((char *)v47 + 16 * v48);
            do
            {
              llvm::Instruction::setMetadata(v34, *(_DWORD *)v37, *((llvm::MDNode **)v37 + 1));
              char v37 = (llvm::Instruction *)((char *)v37 + 16);
            }
            while (v37 != v40);
          }
          __int16 v3 = (unsigned __int8 *)v34;
        }
      }
      else
      {
        __int16 v46 = 257;
        __int16 v3 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v3, v14, (const char **)&v45, 0);
        (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, char *))(*v54 + 16))(v54, v3, &v43, v50, v51);
        if (v48)
        {
          int v15 = v47;
          uint64_t v38 = (llvm::Instruction *)((char *)v47 + 16 * v48);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v3, *(_DWORD *)v15, *((llvm::MDNode **)v15 + 1));
            int v15 = (llvm::Instruction *)((char *)v15 + 16);
          }
          while (v15 != v38);
        }
      }
    }
    __int16 v44 = 257;
    if (*(void *)v4 == v14)
    {
      uint64_t v39 = (llvm::Value *)v4;
    }
    else if (*(unsigned __int8 *)(v4 + 16) <= 0x14u)
    {
      uint64_t v19 = (*((uint64_t (**)(void **, uint64_t, uint64_t, unint64_t))*v53 + 28))(v53, 49, v4, v14);
      uint64_t v39 = (llvm::Value *)v19;
      if (v19) {
        BOOL v20 = *(unsigned __int8 *)(v19 + 16) >= 0x1Cu;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        (*(void (**)(void *, uint64_t, void **, uint64_t, char *))(*v54 + 16))(v54, v19, &v43, v50, v51);
        if (v48)
        {
          int v35 = v47;
          __int16 v36 = (llvm::Instruction *)((char *)v47 + 16 * v48);
          do
          {
            llvm::Instruction::setMetadata(v39, *(_DWORD *)v35, *((llvm::MDNode **)v35 + 1));
            int v35 = (llvm::Instruction *)((char *)v35 + 16);
          }
          while (v35 != v36);
        }
      }
    }
    else
    {
      __int16 v46 = 257;
      uint64_t v39 = llvm::CastInst::Create(49, v4, v14, (const char **)&v45, 0);
      (*(void (**)(void *))(*v54 + 16))(v54);
      if (v48)
      {
        int v17 = v47;
        char v18 = (llvm::Instruction *)((char *)v47 + 16 * v48);
        do
        {
          llvm::Instruction::setMetadata(v39, *(_DWORD *)v17, *((llvm::MDNode **)v17 + 1));
          int v17 = (llvm::Instruction *)((char *)v17 + 16);
        }
        while (v17 != v18);
      }
    }
    unsigned int v21 = operator new(0x80uLL);
    uint64_t v22 = (llvm::Value *)(v21 + 16);
    v21[21] = v21[21] & 0x38000000 | 2;
    *(void *)unsigned int v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = v21 + 16;
    *((void *)v21 + 4) = 0;
    *((void *)v21 + 5) = 0;
    *((void *)v21 + 6) = 0;
    *((void *)v21 + 7) = v21 + 16;
    uint64_t v45 = "compare_src_dst";
    __int16 v46 = 259;
    uint64_t v23 = *(void *)v3;
    uint64_t v24 = ***(void ***)v3 + 1888;
    if (*(void *)v3 && (*(_DWORD *)(v23 + 8) & 0xFE) == 0x12)
    {
      int v31 = (uint64_t **)(***(void ***)v3 + 1888);
      int64_t v32 = (llvm::Type *)*(unsigned int *)(v23 + 32);
      if (*(_DWORD *)(v23 + 8) == 19) {
        llvm::ScalableVectorType::get(v31, v32);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v32);
      }
      uint64_t v24 = v33;
    }
    BOOL v25 = llvm::CmpInst::CmpInst(v22, v24, 53, 36, (uint64_t)v3, (uint64_t)v39, (const char **)&v45, (uint64_t)a1, 0);
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    llvm::SplitBlockAndInsertIfThenElse(v25, a1, (llvm::Instruction *)&v42, &v41, 0, v26);
  }
  int v27 = *(unsigned __int8 *)v43;
  if ((v27 - 4) > 0x1E)
  {
    if ((v27 - 3) >= 0xFFFFFFFE) {
      unint64_t v30 = v43;
    }
    else {
      unint64_t v30 = 0;
    }
    if ((v27 - 3) < 0xFFFFFFFE)
    {
      if (v27 == 3) {
        *((void *)v43 + 1) = 0;
      }
      goto LABEL_12;
    }
    unint64_t v29 = (unint64_t)v30 + 8;
  }
  else
  {
    if ((*((unsigned char *)v43 + 1) & 0x7F) != 2 && !*((_DWORD *)v43 + 3)) {
      goto LABEL_12;
    }
    uint64_t v28 = *((void *)v43 + 2);
    if ((v28 & 4) == 0) {
      goto LABEL_12;
    }
    unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
    if (!v29) {
      goto LABEL_12;
    }
  }
  uint64_t v45 = &v43;
  sub_1CC5FA668(v29 + 16, &v45);
  goto LABEL_12;
}

void llvm::expandMemSetAsLoop(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 8) >= 3u)
    {
      uint64_t v4 = *(llvm::AttributeSetNode **)(v3 + 56);
      if (v4) {
        llvm::AttributeSetNode::getAlignment(v4);
      }
    }
  }
  uint64_t v5 = *(void *)(v2 + 96);
  uint64_t v6 = *(unsigned int *)(v5 + 32);
  if (v6 > 0x40)
  {
    int v7 = 0;
    int64_t v8 = (unint64_t)(v6 + 63) >> 6;
    do
    {
      if (v8-- < 1) {
        break;
      }
      unint64_t v10 = *(void *)(*(void *)(v5 + 24) + 8 * v8);
      v7 += __clz(v10);
    }
    while (!v10);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  unsigned int v12 = "split";
  __int16 v13 = 259;
  llvm::BasicBlock::splitBasicBlock(v11, a1 + 24, (uint64_t)&v12, 0);
}

void llvm::expandAtomicMemCpyAsLoop(llvm::Instruction *this, void *a2)
{
  uint64_t v4 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  uint64_t v5 = *((void *)v4 + 8);
  if (v5) {
    BOOL v6 = *(unsigned char *)(v5 + 16) == 16;
  }
  else {
    BOOL v6 = 0;
  }
  char v7 = !v6;
  int64_t v8 = (unsigned __int8 *)*((void *)v4 + 4);
  uint64_t v9 = *(llvm::Instruction **)v4;
  uint64_t v10 = *((void *)this + 8);
  if (v10)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 8);
    if (v11 >= 4)
    {
      unsigned int v12 = *(llvm::AttributeSetNode **)(v10 + 64);
      if (v12)
      {
        LOWORD(v12) = llvm::AttributeSetNode::getAlignment(v12);
        int v13 = BYTE1(v12);
      }
      else
      {
        int v13 = 0;
      }
      unsigned int v17 = v12 | (v13 << 8);
      if (v17 <= 0x100) {
        char v16 = 0;
      }
      else {
        char v16 = v17;
      }
      goto LABEL_18;
    }
    char v16 = 0;
    if (v11 == 3)
    {
LABEL_18:
      int v15 = *(llvm::AttributeSetNode **)(v10 + 56);
      if (v15)
      {
        LOWORD(v15) = llvm::AttributeSetNode::getAlignment(v15);
        int v14 = BYTE1(v15);
      }
      else
      {
        int v14 = 0;
      }
      goto LABEL_21;
    }
    int v14 = 0;
    LOBYTE(v15) = 0;
  }
  else
  {
    int v14 = 0;
    LOBYTE(v15) = 0;
    char v16 = 0;
  }
LABEL_21:
  unsigned int v18 = v15 | (v14 << 8);
  if (v18 <= 0x100) {
    char v19 = 0;
  }
  else {
    char v19 = v18;
  }
  __int16 isVolatile = llvm::Instruction::isVolatile(this);
  __int16 v21 = llvm::Instruction::isVolatile(this);
  uint64_t v22 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
  uint64_t v23 = (unsigned int *)(v22 + 24);
  unsigned int v24 = *(_DWORD *)(v22 + 32);
  if (v7) {
    llvm::createMemCpyLoopUnknownSize((uint64_t)this);
  }
  if (v24 >= 0x41) {
    uint64_t v23 = *(unsigned int **)v23;
  }
  llvm::createMemCpyLoopKnownSize((uint64_t **)this, v8, v9, v5, v16, v19, isVolatile, v21, 0, a2, *v23 | 0x100000000);
}

llvm::raw_ostream *sub_1CD1C4FB0(llvm::raw_ostream *this, uint64_t a2)
{
  v17[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *uint64_t v4 = 91;
    ++*((void *)this + 4);
  }
  uint64_t v5 = *(void **)a2;
  BOOL v6 = *(void **)(a2 + 8);
  if (*(void **)a2 != v6)
  {
    while (1)
    {
      char v7 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v7)
      {
        llvm::raw_ostream::write(this, "[", 1uLL);
      }
      else
      {
        *char v7 = 91;
        ++*((void *)this + 4);
      }
      int64_t v8 = (unsigned int *)(*v5 + 24);
      int v15 = v17;
      long long v16 = xmmword_1CDB15B30;
      llvm::APInt::toString(v8, &v15, 0xAu, 1, 0);
      llvm::raw_ostream::write(this, (const char *)v15, v16);
      if (v15 != v17) {
        free(v15);
      }
      uint64_t v9 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v9 > 1uLL)
      {
        *uint64_t v9 = 8236;
        *((void *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
      }
      uint64_t v10 = (unsigned int *)(v5[1] + 24);
      int v15 = v17;
      long long v16 = xmmword_1CDB15B30;
      llvm::APInt::toString(v10, &v15, 0xAu, 1, 0);
      llvm::raw_ostream::write(this, (const char *)v15, v16);
      if (v15 != v17) {
        free(v15);
      }
      unsigned int v11 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v11)
      {
        llvm::raw_ostream::write(this, "]", 1uLL);
      }
      else
      {
        *unsigned int v11 = 93;
        ++*((void *)this + 4);
      }
      v5 += 3;
      if (v5 == v6) {
        break;
      }
      unsigned int v12 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 > 1uLL)
      {
        *unsigned int v12 = 8236;
        *((void *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
      }
    }
  }
  int v13 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v13)
  {
    llvm::raw_ostream::write(this, "]", 1uLL);
  }
  else
  {
    unsigned char *v13 = 93;
    ++*((void *)this + 4);
  }
  return this;
}

void sub_1CD1C5248(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLazyValueInfoWrapperPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CD1C52F0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61F34D;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2648870;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD158, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1C5248;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFD158, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD1C53A4(uint64_t a1, llvm::LazyValueInfo *a2, const llvm::DataLayout *a3)
{
  uint64_t v3 = (llvm::BasicBlock **)v194;
  unsigned int v190 = (llvm::BasicBlock **)v194;
  v191 = (llvm::BasicBlock **)v194;
  uint64_t v192 = 8;
  int v193 = 0;
  uint64_t v4 = a1 + 72;
  uint64_t v5 = *(void *)(a1 + 80);
  if (v5 != a1 + 72)
  {
    char v6 = 0;
    while (1)
    {
      char v7 = (llvm::BasicBlock *)(v5 - 24);
      if (!v5) {
        char v7 = 0;
      }
      uint64_t v9 = v190;
      int64_t v8 = v191;
      if (v191 == v190)
      {
        unsigned int v10 = HIDWORD(v192);
        unsigned int v11 = &v191[HIDWORD(v192)];
        if (HIDWORD(v192))
        {
          uint64_t v12 = 0;
          while (v191[v12] != v7)
          {
            if (HIDWORD(v192) == ++v12) {
              goto LABEL_24;
            }
          }
          unsigned int v11 = &v191[v12];
        }
LABEL_24:
        BOOL v20 = v191;
      }
      else
      {
        int v13 = v192 - 1;
        unsigned int v14 = (v192 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        unsigned int v11 = &v191[v14];
        int v15 = *v11;
        if (*v11 == (llvm::BasicBlock *)-1)
        {
          long long v16 = 0;
LABEL_26:
          if (v16) {
            unsigned int v11 = v16;
          }
          unsigned int v10 = HIDWORD(v192);
          if (*v11 != v7) {
            unsigned int v11 = &v191[v192];
          }
        }
        else
        {
          long long v16 = 0;
          int v17 = 1;
          while (v15 != v7)
          {
            if (v16) {
              BOOL v18 = 0;
            }
            else {
              BOOL v18 = v15 == (llvm::BasicBlock *)-2;
            }
            if (v18) {
              long long v16 = v11;
            }
            unsigned int v19 = v14 + v17++;
            unsigned int v14 = v19 & v13;
            unsigned int v11 = &v191[v19 & v13];
            int v15 = *v11;
            if (*v11 == (llvm::BasicBlock *)-1) {
              goto LABEL_26;
            }
          }
          unsigned int v10 = HIDWORD(v192);
        }
        BOOL v20 = v190;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      unsigned int v21 = v192;
      if (v191 == v20) {
        int v22 = v10;
      }
      else {
        int v22 = v192;
      }
      if (v11 != &v191[v22]) {
        goto LABEL_35;
      }
      uint64_t v23 = (void *)*((void *)v7 + 5);
      if (v23 == (void *)((char *)v7 + 40)) {
        goto LABEL_35;
      }
      uint64_t v24 = v23 ? (uint64_t)(v23 - 3) : 0;
      unsigned int v25 = *(unsigned __int8 *)(v24 + 16) - 40;
      uint64_t v26 = v25 >= 0xFFFFFFF5 ? v24 : 0;
      if (!v23) {
        goto LABEL_35;
      }
      if (*(unsigned char *)(v26 + 16) != 31 || v25 < 0xFFFFFFF5) {
        goto LABEL_35;
      }
      unsigned int v28 = *(_DWORD *)(v26 + 20);
      if ((v28 & 0x40000000) != 0) {
        unint64_t v29 = *(uint64_t **)(v26 - 8);
      }
      else {
        unint64_t v29 = (uint64_t *)(v26 - 32 * (v28 & 0x7FFFFFF));
      }
      unint64_t v30 = *(llvm::BasicBlock **)(v26 + 40);
      uint64_t v31 = *((void *)v30 + 7);
      uint64_t v32 = *v29;
      uint64_t v185 = (llvm::BasicBlock *)v29[4];
      int v186 = v30;
      uint64_t v33 = *(void *)(v31 + 80);
      if (v33) {
        int v34 = (llvm::BasicBlock *)(v33 - 24);
      }
      else {
        int v34 = 0;
      }
      if (v30 != v34)
      {
        uint64_t v35 = *(void *)(v26 + 40);
        while (1)
        {
          uint64_t v35 = *(void *)(v35 + 8);
          if (!v35) {
            break;
          }
          uint64_t v36 = *(void *)(v35 + 24);
          unsigned int v37 = *(unsigned __int8 *)(v36 + 16);
          if (v36) {
            BOOL v38 = v37 >= 0x1C;
          }
          else {
            BOOL v38 = 0;
          }
          BOOL v39 = !v38 || v37 - 29 > 0xA;
          if (!v39) {
            goto LABEL_66;
          }
        }
        uint64_t v9 = v20;
        goto LABEL_99;
      }
LABEL_66:
      uint64_t v183 = v31;
      uint64_t v187 = v26;
      uint64_t v188 = v32;
      uint64_t v181 = v24;
      if ((llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v186) != v186) {
        break;
      }
LABEL_99:
      if (v8 != v9) {
        goto LABEL_109;
      }
      if (v10)
      {
        uint64_t v63 = 0;
        uint64_t v64 = 8 * v10;
        uint64_t v65 = v8;
        while (*v65 != v186)
        {
          if (*v65 == (llvm::BasicBlock *)-2) {
            uint64_t v63 = v65;
          }
          ++v65;
          v64 -= 8;
          if (!v64)
          {
            if (!v63) {
              goto LABEL_107;
            }
            llvm::Instruction *v63 = v186;
            --v193;
            goto LABEL_298;
          }
        }
        goto LABEL_298;
      }
LABEL_107:
      if (v21 <= v10)
      {
LABEL_109:
        if (3 * v21 <= 4 * (v10 - v193))
        {
          if (v21 >= 0x40) {
            v21 *= 2;
          }
          else {
            unsigned int v21 = 128;
          }
        }
        else if (v21 - v10 >= v21 >> 3)
        {
          goto LABEL_111;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v190, v21);
        unsigned int v21 = v192;
        int64_t v8 = v191;
LABEL_111:
        unsigned int v66 = v21 - 1;
        unsigned int v67 = (v21 - 1) & ((v186 >> 4) ^ (v186 >> 9));
        uint64_t v68 = &v8[v67];
        uint64_t v69 = *v68;
        if (*v68 == (llvm::BasicBlock *)-1)
        {
          uint64_t v70 = 0;
LABEL_153:
          if (v70) {
            uint64_t v68 = v70;
          }
          if (*v68 != v186)
          {
            if (*v68 == (llvm::BasicBlock *)-2) {
              --v193;
            }
            else {
              ++HIDWORD(v192);
            }
            *uint64_t v68 = v186;
          }
        }
        else
        {
          uint64_t v70 = 0;
          int v71 = 1;
          while (v69 != v186)
          {
            if (v70) {
              BOOL v72 = 0;
            }
            else {
              BOOL v72 = v69 == (llvm::BasicBlock *)-2;
            }
            if (v72) {
              uint64_t v70 = v68;
            }
            unsigned int v73 = v67 + v71++;
            unsigned int v67 = v73 & v66;
            uint64_t v68 = &v8[v73 & v66];
            uint64_t v69 = *v68;
            if (*v68 == (llvm::BasicBlock *)-1) {
              goto LABEL_153;
            }
          }
        }
        goto LABEL_298;
      }
      HIDWORD(v192) = v10 + 1;
      v8[v10] = v186;
LABEL_298:
      char v6 = 1;
LABEL_35:
      if (v5 == v4)
      {
        uint64_t v3 = v190;
        uint64_t v167 = v191;
        unsigned int v169 = v192;
        LODWORD(v168) = HIDWORD(v192);
        goto LABEL_347;
      }
    }
    int v40 = (v28 >> 1) & 0x3FFFFFF;
    uint64_t v41 = (v40 - 1);
    if (v40 != 1)
    {
      int v42 = 0;
      uint64_t v43 = 0;
      __int16 v44 = 0;
      unint64_t v45 = 0;
      __int16 v46 = 0;
      uint64_t v47 = v187;
      while (1)
      {
        int v48 = *(_DWORD *)(v47 + 20);
        if ((v48 & 0x40000000) != 0) {
          uint64_t v49 = *(void *)(v47 - 8);
        }
        else {
          uint64_t v49 = v47 - 32 * (v48 & 0x7FFFFFF);
        }
        uint64_t v50 = (2 * v43 + 3);
        if (v43 == 4294967294) {
          uint64_t v50 = 1;
        }
        uint64_t v51 = 32 * v50;
        uint64_t v52 = *(void *)(v49 + v51);
        if ((v48 & 0x40000000) != 0)
        {
          uint64_t v54 = *(void *)(v47 - 8);
          if (v52 != *(void *)(v54 + 32)) {
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v53 = v48 & 0x7FFFFFF;
          if (v52 != *(void *)(v187 + 32 - 32 * v53))
          {
            uint64_t v54 = v47 - 32 * v53;
LABEL_78:
            uint64_t v55 = *(void *)(v54 + 32 * ((2 * v43 + 2) & 0xFFFFFFFE));
            uint64_t v56 = *(void *)(v54 + v51);
            if (v45 >= (unint64_t)v44)
            {
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (void)v46) >> 3) + 1;
              if (v57 > 0xAAAAAAAAAAAAAAALL) {
LABEL_366:
              }
                abort();
              if (0x5555555555555556 * ((v44 - v46) >> 3) > v57) {
                unint64_t v57 = 0x5555555555555556 * ((v44 - v46) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v44 - v46) >> 3) >= 0x555555555555555) {
                unint64_t v58 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v58 = v57;
              }
              if (v58)
              {
                if (v58 > 0xAAAAAAAAAAAAAAALL) {
LABEL_367:
                }
                  sub_1CB833614();
                uint64_t v59 = (char *)operator new(24 * v58);
              }
              else
              {
                uint64_t v59 = 0;
              }
              uint64_t v60 = &v59[8 * ((uint64_t)(v45 - (void)v46) >> 3)];
              *(void *)uint64_t v60 = v55;
              *((void *)v60 + 1) = v55;
              *((void *)v60 + 2) = v56;
              for (uint64_t i = v60; (char *)v45 != v46; v45 -= 24)
              {
                long long v62 = *(_OWORD *)(v45 - 24);
                *((void *)i - 1) = *(void *)(v45 - 8);
                *(_OWORD *)(i - 24) = v62;
                i -= 24;
              }
              __int16 v44 = &v59[24 * v58];
              unint64_t v45 = (unint64_t)(v60 + 24);
              if (v46) {
                operator delete(v46);
              }
              __int16 v46 = i;
              uint64_t v47 = v187;
            }
            else
            {
              *(void *)unint64_t v45 = v55;
              *(void *)(v45 + 8) = v55;
              *(void *)(v45 + 16) = v56;
              v45 += 24;
            }
            ++v42;
          }
        }
        if (++v43 == v41) {
          goto LABEL_123;
        }
      }
    }
    __int16 v46 = 0;
    unint64_t v45 = 0;
    int v42 = 0;
LABEL_123:
    int v180 = v42;
    unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (void)v46) >> 3);
    unint64_t v75 = 126 - 2 * __clz(v74);
    if ((char *)v45 == v46) {
      uint64_t v76 = 0;
    }
    else {
      uint64_t v76 = v75;
    }
    sub_1CD1C7CF4((uint64_t)v46, v45, v76, 1);
    if (v74 >= 2)
    {
      int v77 = v46 + 24;
      uint64_t v78 = v46;
      if (v46 + 24 != (char *)v45)
      {
        do
        {
          uint64_t v79 = *v77;
          unsigned int v80 = *(_DWORD *)(*v77 + 32);
          if (v80 > 0x40) {
            uint64_t v81 = **(void **)(v79 + 24);
          }
          else {
            uint64_t v81 = (uint64_t)(*(void *)(v79 + 24) << -(char)v80) >> -(char)v80;
          }
          uint64_t v82 = *((void *)v78 + 1);
          unsigned int v83 = *(_DWORD *)(v82 + 32);
          if (v83 > 0x40) {
            uint64_t v84 = **(void **)(v82 + 24);
          }
          else {
            uint64_t v84 = (uint64_t)(*(void *)(v82 + 24) << -(char)v83) >> -(char)v83;
          }
          if (v81 == v84 + 1 && *((void *)v78 + 2) == v77[2])
          {
            *((void *)v78 + 1) = v77[1];
          }
          else
          {
            if (v77 - 3 != (void *)v78)
            {
              long long v85 = *(_OWORD *)v77;
              *((void *)v78 + 5) = v77[2];
              *(_OWORD *)(v78 + 24) = v85;
            }
            v78 += 24;
          }
          v77 += 3;
        }
        while (v77 != (void *)v45);
      }
      if (v78 + 24 != (char *)v45) {
        unint64_t v45 = (unint64_t)(v78 + 24);
      }
    }
    uint64_t v86 = v185;
    if (v46 == (char *)v45)
    {
      uint64_t v87 = operator new(0x60uLL);
      v87[13] = v87[13] & 0x38000000 | 1;
      *(void *)uint64_t v87 = 0;
      *((void *)v87 + 1) = 0;
      *((void *)v87 + 2) = 0;
      *((void *)v87 + 3) = v87 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v87 + 8), v185, v186);
      sub_1CD1C6B64((uint64_t)v185, (uint64_t)v186, (uint64_t)v186, -1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    if (llvm::BasicBlock::getFirstNonPHIOrDbg(v185, 1)[16] == 35)
    {
      uint64_t v177 = *(void **)(v45 - 16);
      unsigned int v178 = *(void **)v46;
    }
    else
    {
      BOOL v88 = (const llvm::DataLayout *)v181;
      if (!*(void *)(v187 + 40))
      {
        if (!v188
          || *(unsigned __int8 *)(v188 + 16) < 0x1Cu
          || (BOOL v88 = (const llvm::DataLayout *)v188, !*(void *)(v188 + 40)))
        {
          BOOL v88 = 0;
        }
      }
      v213 = (const llvm::DataLayout *)(*(void *)(v183 + 40) + 272);
      v214 = a3;
      uint64_t v215 = v88;
      uint64_t v216 = 0;
      uint64_t v217 = 0;
      char v218 = 1;
      sub_1CC16089C((uint64_t *)v188, 0, &v213, (uint64_t)&v209);
      llvm::ConstantRange::fromKnownBits(&v209, 0, (uint64_t)&v213);
      llvm::LazyValueInfo::getConstantRange(a2, (llvm::Value *)v188, (llvm::Instruction *)v187, 1, &v205);
      llvm::ConstantRange::intersectWith((uint64_t)&v213, (llvm::ConstantRange *)&v205, 0, (uint64_t)&v201);
      unsigned int v89 = *(_DWORD *)(*(void *)v46 + 32);
      if (v89 > 0x40) {
        operator new[]();
      }
      unint64_t v90 = *(void *)(*(void *)v46 + 24);
      uint64_t v91 = *(void *)(v45 - 16);
      unsigned int v92 = *(_DWORD *)(v91 + 32);
      if (v92 > 0x40) {
        operator new[]();
      }
      unint64_t v93 = *(void *)(v91 + 24);
      llvm::ConstantRange::getSignedMin((uint64_t)&v201, (uint64_t)&__s2);
      if (v198 > 0x40)
      {
        unsigned int v94 = __s2;
        uint64_t v159 = *((void *)__s2 + ((v198 - 1) >> 6)) & (1 << (v198 - 1));
        if ((v159 != 0) == ((v90 & (1 << (v89 - 1))) != 0))
        {
          unint64_t v161 = (((unint64_t)v198 + 63) >> 3) & 0x3FFFFFF8;
          while (v161)
          {
            unint64_t v162 = *(void *)((char *)__s2 + v161 - 8);
            unint64_t v163 = *(void *)(v90 - 8 + v161);
            v161 -= 8;
            if (v162 != v163)
            {
              if (v162 > v163) {
                int v98 = 1;
              }
              else {
                int v98 = -1;
              }
              goto LABEL_167;
            }
          }
          int v98 = 0;
        }
        else if (v159)
        {
          int v98 = -1;
        }
        else
        {
          int v98 = 1;
        }
      }
      else
      {
        unsigned int v94 = __s2;
        uint64_t v95 = (uint64_t)((void)__s2 << -(char)v198) >> -(char)v198;
        uint64_t v96 = (uint64_t)(v90 << -(char)v198) >> -(char)v198;
        BOOL v39 = v95 < v96;
        BOOL v97 = v95 > v96;
        if (v39) {
          int v98 = -1;
        }
        else {
          int v98 = v97;
        }
      }
LABEL_167:
      if (v98 >= 0) {
        unsigned int v99 = v89;
      }
      else {
        unsigned int v99 = v198;
      }
      unsigned int v200 = v99;
      if (v99 > 0x40) {
        operator new[]();
      }
      if (v98 >= 0) {
        __int16 v100 = (void *)v90;
      }
      else {
        __int16 v100 = v94;
      }
      __src = v100;
      if (v198 >= 0x41 && v94) {
        MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(&v201, (uint64_t)&__s1);
      if (v196 > 0x40)
      {
        int v102 = __s1;
        uint64_t v160 = *((void *)__s1 + ((v196 - 1) >> 6)) & (1 << (v196 - 1));
        if ((v160 != 0) == ((v93 & (1 << (v92 - 1))) != 0))
        {
          unint64_t v164 = (((unint64_t)v196 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v164)
            {
              int v106 = 0;
              goto LABEL_183;
            }
            unint64_t v165 = *(void *)((char *)__s1 + v164 - 8);
            unint64_t v166 = *(void *)(v93 - 8 + v164);
            v164 -= 8;
          }
          while (v165 == v166);
          if (v165 > v166) {
            int v106 = 1;
          }
          else {
            int v106 = -1;
          }
        }
        else if (v160)
        {
          int v106 = -1;
        }
        else
        {
          int v106 = 1;
        }
      }
      else
      {
        int v102 = __s1;
        uint64_t v103 = (uint64_t)((void)__s1 << -(char)v196) >> -(char)v196;
        uint64_t v104 = (uint64_t)(v93 << -(char)v196) >> -(char)v196;
        BOOL v39 = v103 < v104;
        BOOL v105 = v103 > v104;
        if (v39) {
          int v106 = -1;
        }
        else {
          int v106 = v105;
        }
      }
LABEL_183:
      if (v106 <= 0) {
        unsigned int v107 = v92;
      }
      else {
        unsigned int v107 = v196;
      }
      unsigned int v198 = v107;
      if (v107 > 0x40) {
        operator new[]();
      }
      if (v106 <= 0) {
        uint64_t v108 = (void *)v93;
      }
      else {
        uint64_t v108 = v102;
      }
      __s2 = v108;
      uint64_t v109 = (llvm::ConstantInt ***)v187;
      if (v196 >= 0x41 && v102)
      {
        MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
        uint64_t v109 = (llvm::ConstantInt ***)v187;
      }
      unint64_t v110 = v109;
      unsigned int v178 = llvm::ConstantInt::get(**v109, (llvm::LLVMContext *)&__src, v101);
      uint64_t v177 = llvm::ConstantInt::get(**v110, (llvm::LLVMContext *)&__s2, v111);
      unsigned int v196 = v200;
      if (v200 > 0x40) {
        operator new[]();
      }
      __s1 = __src;
      llvm::APInt::operator+=((uint64_t)&__s1, (v180 - 1));
      uint64_t v112 = v196;
      uint64_t v113 = __s1;
      unsigned int v196 = 0;
      if (v112 > 0x40)
      {
        BOOL v114 = memcmp(__s1, __s2, ((unint64_t)(v112 + 63) >> 3) & 0x3FFFFFF8) == 0;
        if (v113)
        {
          MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
          if (v196 >= 0x41)
          {
            if (__s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
          }
        }
      }
      else
      {
        BOOL v114 = __s1 == __s2;
      }
      if (v198 >= 0x41 && __s2) {
        MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
      if (v200 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      uint64_t v86 = v185;
      if (v204 >= 0x41 && v203) {
        MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
      }
      if (v202 >= 0x41 && v201) {
        MEMORY[0x1D25D9CB0](v201, 0x1000C8000313F17);
      }
      if (v208 >= 0x41 && v207) {
        MEMORY[0x1D25D9CB0](v207, 0x1000C8000313F17);
      }
      if (v206 >= 0x41 && v205) {
        MEMORY[0x1D25D9CB0](v205, 0x1000C8000313F17);
      }
      if (v216 >= 0x41 && v215) {
        MEMORY[0x1D25D9CB0](v215, 0x1000C8000313F17);
      }
      if (v214 >= 0x41 && v213) {
        MEMORY[0x1D25D9CB0](v213, 0x1000C8000313F17);
      }
      if (v212 >= 0x41 && v211) {
        MEMORY[0x1D25D9CB0](v211, 0x1000C8000313F17);
      }
      if (v210 >= 0x41 && v209) {
        MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
      }
      v213 = 0;
      v214 = 0;
      uint64_t v215 = 0;
      if (!v114)
      {
        __int16 v117 = v185;
        long long v146 = v186;
        uint64_t v156 = v188;
        goto LABEL_294;
      }
    }
    uint64_t v209 = 0;
    uint64_t v210 = 0;
    LODWORD(v211) = 0;
    uint64_t v115 = (const llvm::DataLayout *)operator new(0x10uLL);
    unsigned int v116 = 0;
    __int16 v117 = 0;
    *(_OWORD *)uint64_t v115 = xmmword_1CFAC4C60;
    v214 = (const llvm::DataLayout *)((char *)v115 + 16);
    uint64_t v215 = (const llvm::DataLayout *)((char *)v115 + 16);
    v213 = v115;
    char v118 = v46;
    while (1)
    {
      uint64_t v119 = *(void *)v118;
      unsigned int v120 = *(_DWORD *)(*(void *)v118 + 32);
      int v121 = v120 > 0x40
           ? **(const llvm::DataLayout ***)(v119 + 24)
           : (const llvm::DataLayout *)((uint64_t)(*(void *)(v119 + 24) << -(char)v120) >> -(char)v120);
      uint64_t v122 = *((void *)v118 + 1);
      unsigned int v123 = *(_DWORD *)(v122 + 32);
      uint64_t v124 = v123 > 0x40 ? **(void **)(v122 + 24) : (uint64_t)(*(void *)(v122 + 24) << -(char)v123) >> -(char)v123;
      uint64_t v125 = v214;
      char v126 = (const llvm::DataLayout *)((char *)v214 - 16);
      if (*((const llvm::DataLayout **)v214 - 2) == v121)
      {
        v214 = (const llvm::DataLayout *)((char *)v214 - 16);
      }
      else
      {
        *((void *)v214 - 1) = (char *)v121 - 1;
        char v126 = v125;
      }
      if (v124 != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
LABEL_251:
      char v136 = v118 + 16;
      if (!v211)
      {
        uint64_t v144 = 0;
LABEL_265:
        long long v138 = sub_1CBFAF8D8((uint64_t)&v209, (uint64_t)(v118 + 16), (uint64_t *)v118 + 2, v144);
        *long long v138 = *v136;
        *((_DWORD *)v138 + 2) = 0;
        goto LABEL_266;
      }
      unsigned int v137 = ((*v136 >> 4) ^ (*v136 >> 9)) & (v211 - 1);
      long long v138 = (void *)(v209 + 16 * v137);
      uint64_t v139 = *v138;
      if (*v136 != *v138)
      {
        uint64_t v140 = 0;
        int v141 = 1;
        while (v139 != -4096)
        {
          if (v140) {
            BOOL v142 = 0;
          }
          else {
            BOOL v142 = v139 == -8192;
          }
          if (v142) {
            uint64_t v140 = v138;
          }
          unsigned int v143 = v137 + v141++;
          unsigned int v137 = v143 & (v211 - 1);
          long long v138 = (void *)(v209 + 16 * v137);
          uint64_t v139 = *v138;
          if (*v136 == *v138) {
            goto LABEL_266;
          }
        }
        if (v140) {
          uint64_t v144 = v140;
        }
        else {
          uint64_t v144 = v138;
        }
        goto LABEL_265;
      }
LABEL_266:
      int v145 = v124 - v121 + *((_DWORD *)v138 + 2);
      *((_DWORD *)v138 + 2) = v145 + 1;
      if (v145 + 1 > v116)
      {
        __int16 v117 = (llvm::BasicBlock *)*((void *)v118 + 2);
        unsigned int v116 = v145 + 1;
      }
      v118 += 24;
      if (v118 == (char *)v45)
      {
        long long v146 = v186;
        unsigned int v147 = ((*(_DWORD *)(v187 + 20) >> 1) & 0x3FFFFFF) - v180;
        if (v147)
        {
          if (v147 <= 1) {
            int v148 = 1;
          }
          else {
            int v148 = ((*(_DWORD *)(v187 + 20) >> 1) & 0x3FFFFFF) - v180;
          }
          do
          {
            llvm::BasicBlock::removePredecessor(v86, v186, 0);
            --v148;
          }
          while (v148);
        }
        long long v149 = (llvm::BasicBlock **)(v46 + 24);
        while (*(v149 - 1) != v117)
        {
          BOOL v18 = v149 == (llvm::BasicBlock **)v45;
          v149 += 3;
          if (v18)
          {
            uint64_t j = v187;
            goto LABEL_287;
          }
        }
        unint64_t v151 = (unint64_t)(v149 - 3);
        for (uint64_t j = v187; v149 != (llvm::BasicBlock **)v45; v149 += 3)
        {
          if (v149[2] != v117)
          {
            long long v152 = *(_OWORD *)v149;
            *(void *)(v151 + 16) = v149[2];
            *(_OWORD *)unint64_t v151 = v152;
            v151 += 24;
          }
        }
        if (v151 != v45) {
          unint64_t v45 = v151;
        }
LABEL_287:
        if (v46 == (char *)v45)
        {
          v155 = operator new(0x60uLL);
          v155[13] = v155[13] & 0x38000000 | 1;
          *(void *)v155 = 0;
          *((void *)v155 + 1) = 0;
          *((void *)v155 + 2) = 0;
          *((void *)v155 + 3) = v155 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v155 + 8), v117, v186);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v153 = *(_DWORD *)(j + 20);
        if ((v153 & 0x40000000) != 0) {
          int v154 = *(uint64_t **)(j - 8);
        }
        else {
          int v154 = (uint64_t *)(j - 32 * (v153 & 0x7FFFFFF));
        }
        uint64_t v156 = *v154;
        MEMORY[0x1D25D9CD0](v209, 8);
LABEL_294:
        int v157 = (llvm::BasicBlock *)sub_1CD1C6DA0(v46, (llvm::ConstantInt ****)v45, (uint64_t)v178, (uint64_t)v177, v156, (uint64_t)v146, (uint64_t)v146, (uint64_t)v117, (uint64_t *)&v213);
        if (v157 != v117) {
          sub_1CD1C6B64((uint64_t)v117, (uint64_t)v146, 0, -1);
        }
        uint64_t v158 = operator new(0x60uLL);
        v158[13] = v158[13] & 0x38000000 | 1;
        *(void *)uint64_t v158 = 0;
        *((void *)v158 + 1) = 0;
        *((void *)v158 + 2) = 0;
        *((void *)v158 + 3) = v158 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v158 + 8), v157, v146);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    int v189 = (int)v121;
    uint64_t v127 = v124 + 1;
    if (v126 < v215)
    {
      *(void *)char v126 = v127;
      *((void *)v126 + 1) = 0x7FFFFFFFFFFFFFFFLL;
      int v121 = (const llvm::DataLayout *)((char *)v126 + 16);
LABEL_250:
      v214 = v121;
      LODWORD(v121) = v189;
      goto LABEL_251;
    }
    uint64_t v184 = v117;
    long long v128 = v46;
    long long v129 = v213;
    uint64_t v130 = (v126 - v213) >> 4;
    unint64_t v131 = v130 + 1;
    if ((unint64_t)(v130 + 1) >> 60) {
      goto LABEL_366;
    }
    uint64_t v132 = v215 - v213;
    if ((v215 - v213) >> 3 > v131) {
      unint64_t v131 = v132 >> 3;
    }
    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v133 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v133 = v131;
    }
    if (v133)
    {
      if (v133 >> 60) {
        goto LABEL_367;
      }
      uint64_t v134 = (char *)operator new(16 * v133);
    }
    else
    {
      uint64_t v134 = 0;
    }
    char v135 = &v134[16 * v130];
    *(void *)char v135 = v127;
    *((void *)v135 + 1) = 0x7FFFFFFFFFFFFFFFLL;
    int v121 = (const llvm::DataLayout *)(v135 + 16);
    if (v126 == v129)
    {
      v213 = (const llvm::DataLayout *)&v134[16 * v130];
      v214 = (const llvm::DataLayout *)(v135 + 16);
      uint64_t v215 = (const llvm::DataLayout *)&v134[16 * v133];
      __int16 v46 = v128;
      uint64_t v86 = v185;
    }
    else
    {
      __int16 v46 = v128;
      do
      {
        *((_OWORD *)v135 - 1) = *((_OWORD *)v126 - 1);
        v135 -= 16;
        char v126 = (const llvm::DataLayout *)((char *)v126 - 16);
      }
      while (v126 != v129);
      char v126 = v213;
      v213 = (const llvm::DataLayout *)v135;
      v214 = v121;
      uint64_t v215 = (const llvm::DataLayout *)&v134[16 * v133];
      uint64_t v86 = v185;
      if (!v126) {
        goto LABEL_249;
      }
    }
    operator delete(v126);
LABEL_249:
    __int16 v117 = v184;
    goto LABEL_250;
  }
  LODWORD(v168) = 0;
  char v6 = 0;
  unsigned int v169 = 8;
  uint64_t v167 = (llvm::BasicBlock **)v194;
LABEL_347:
  if (v167 == v3) {
    uint64_t v168 = v168;
  }
  else {
    uint64_t v168 = v169;
  }
  uint64_t v170 = v167;
  if (v168)
  {
    uint64_t v171 = 0;
    while ((unint64_t)v167[v171] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v168 == ++v171) {
        goto LABEL_363;
      }
    }
    uint64_t v170 = &v167[v171];
  }
  uint64_t v172 = &v167[v168];
  if (v170 != v172)
  {
    uint64_t v173 = *v170;
LABEL_358:
    llvm::LazyValueInfo::eraseBlock(a2, v173);
    llvm::DeleteDeadBlock(v173, 0, 0);
    uint64_t v174 = (unint64_t *)(v170 + 1);
    while (v174 != (unint64_t *)v172)
    {
      unint64_t v175 = *v174++;
      uint64_t v173 = (llvm::BasicBlock *)v175;
      if (v175 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v170 = (llvm::BasicBlock **)(v174 - 1);
        goto LABEL_358;
      }
    }
    uint64_t v3 = v190;
    uint64_t v167 = v191;
  }
LABEL_363:
  if (v167 != v3) {
    free(v167);
  }
  return v6 & 1;
}

void sub_1CD1C69CC()
{
}

void sub_1CD1C6A0C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD1C6A44(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CD1C6A54(uint64_t a1, llvm::Function *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LazyValueInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LazyValueInfoWrapperPass::ID);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (AnalysisPass
    && (unsigned int v10 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)AnalysisPass + 96))(AnalysisPass, llvm::AssumptionCacheTracker::ID)) != 0)
  {
    AssumptionCache = (const llvm::DataLayout *)llvm::AssumptionCacheTracker::getAssumptionCache(v10, a2);
  }
  else
  {
    AssumptionCache = 0;
  }

  return sub_1CD1C53A4((uint64_t)a2, (llvm::LazyValueInfo *)(v8 + 32), AssumptionCache);
}

void sub_1CD1C6B64(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v25[5] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40) == a1 + 40) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = v4 - 24;
  uint64_t v6 = v4 ? v4 - 24 : 0;
  if (!v4 || *(unsigned char *)(v6 + 16) != 83) {
    return;
  }
  BOOL v10 = a3 != 0;
  do
  {
    LODWORD(v11) = 0;
    int v12 = *(_DWORD *)(v5 + 20);
    uint64_t v13 = v12 & 0x7FFFFFF;
    if (!a3 || !v13) {
      goto LABEL_19;
    }
    uint64_t v11 = 0;
    uint64_t v14 = v5 - 32 * v13;
    while ((v12 & 0x40000000) == 0)
    {
      uint64_t v15 = *(unsigned int *)(v5 + 60);
      if (*(void *)(v14 + 32 * v15 + 8 * v11) == a2) {
        goto LABEL_18;
      }
LABEL_15:
      if (v13 == ++v11)
      {
        LODWORD(v11) = v12 & 0x7FFFFFF;
        goto LABEL_19;
      }
    }
    uint64_t v15 = *(unsigned int *)(v5 + 60);
    if (*(void *)(*(void *)(v5 - 8) + 32 * v15 + 8 * v11) != a2) {
      goto LABEL_15;
    }
    uint64_t v14 = *(void *)(v5 - 8);
LABEL_18:
    *(void *)(v14 + 32 * v15 + 8 * v11) = a3;
LABEL_19:
    v25[0] = 0x800000000;
    if (a4)
    {
      unint64_t v16 = (v11 + v10);
      if (v16 < v13)
      {
        unsigned int v17 = 0;
        unint64_t v18 = v13;
        int v19 = a4;
        do
        {
          int v20 = *(_DWORD *)(v5 + 20);
          if ((v20 & 0x40000000) != 0) {
            uint64_t v21 = *(void *)(v5 - 8);
          }
          else {
            uint64_t v21 = v5 - 32 * (v20 & 0x7FFFFFF);
          }
          if (*(void *)(v21 + 32 * *(unsigned int *)(v5 + 60) + 8 * v16) == a2)
          {
            if (v17 >= HIDWORD(v25[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)&v25[1] + v17) = v16;
            unsigned int v17 = ++LODWORD(v25[0]);
            --v19;
          }
          if (!v19) {
            break;
          }
          ++v16;
        }
        while (v16 < v18);
        if (v17)
        {
          uint64_t v22 = 4 * v17;
          do
          {
            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v5, *(_DWORD *)((char *)v25 + v22 + 4), 1);
            v22 -= 4;
          }
          while (v22);
        }
      }
    }
    uint64_t v23 = *(void *)(v5 + 32);
    uint64_t v5 = v23 - 24;
    if (v23) {
      uint64_t v24 = v23 - 24;
    }
    else {
      uint64_t v24 = 0;
    }
  }
  while (v23 && *(unsigned char *)(v24 + 16) == 83);
}

uint64_t sub_1CD1C6DA0(void *a1, llvm::ConstantInt ****a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - (llvm::ConstantInt ****)a1);
  if (v10 != 1)
  {
    uint64_t v12 = v10 >> 1;
    if (24 * v12)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((3 * v12) & 0x1FFFFFFFFFFFFFFFLL) > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_44;
      }
      uint64_t v13 = (char *)operator new(24 * v12);
      BOOL v38 = &v13[24 * v12];
      if (v12) {
        memmove(v13, a1, 24 * v12);
      }
    }
    else
    {
      BOOL v38 = 0;
    }
    uint64_t v14 = (llvm::ConstantInt ****)&a1[3 * v12];
    if (a2 == v14) {
      goto LABEL_14;
    }
    if (0xAAAAAAAAAAAAAAABLL * (a2 - v14) <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v15 = operator new((char *)a2 - (char *)v14);
      if (v14 != a2) {
        memmove(v15, v14, (char *)a2 - (char *)v14);
      }
LABEL_14:
      unint64_t v16 = *v14;
      unsigned int v17 = ***v14;
      unsigned int v40 = *((_DWORD *)*v14 + 8);
      if (v40 <= 0x40)
      {
        BOOL v39 = (const char *)v16[3];
        llvm::APInt::operator-=((uint64_t)&v39, 1uLL);
        LODWORD(v42) = v40;
        uint64_t v41 = v39;
        unsigned int v40 = 0;
        llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v41, v18);
        if (v42 >= 0x41 && v41) {
          MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
        }
        if (v40 >= 0x41 && v39) {
          MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
        }
        uint64_t v19 = *a9;
        uint64_t v20 = a9[1];
        if (*a9 != v20)
        {
          uint64_t v21 = *((void *)v38 - 2);
          unsigned int v22 = *(_DWORD *)(v21 + 32);
          uint64_t v23 = v22 > 0x40 ? **(void **)(v21 + 24) : (uint64_t)(*(void *)(v21 + 24) << -(char)v22) >> -(char)v22;
          uint64_t v24 = v23 + 1;
          unsigned int v25 = *((_DWORD *)v16 + 8);
          uint64_t v26 = v25 > 0x40 ? *v16[3] : (llvm::ConstantInt *)((uint64_t)((void)v16[3] << -(char)v25) >> -(char)v25);
          if ((uint64_t)v26 > v24)
          {
            int v27 = (char *)v26 - 1;
            unint64_t v28 = (v20 - v19) >> 4;
            do
            {
              unint64_t v29 = v28 >> 1;
              uint64_t v30 = v19 + 16 * (v28 >> 1);
              uint64_t v31 = *(void *)(v30 + 8);
              uint64_t v32 = v30 + 16;
              v28 += ~(v28 >> 1);
              if (v31 < (uint64_t)v27) {
                uint64_t v19 = v32;
              }
              else {
                unint64_t v28 = v29;
              }
            }
            while (v28);
          }
        }
        uint64_t v41 = "NodeBlock";
        __int16 v43 = 259;
        operator new();
      }
      operator new[]();
    }
LABEL_44:
    abort();
  }
  if (*a1 != a3 || a1[1] != a4)
  {
    uint64_t v41 = "LeafBlock";
    __int16 v43 = 259;
    operator new();
  }
  unsigned int v34 = *(_DWORD *)(a4 + 32);
  if (v34 > 0x40) {
    uint64_t v35 = **(void **)(a4 + 24);
  }
  else {
    uint64_t v35 = (uint64_t)(*(void *)(a4 + 24) << -(char)v34) >> -(char)v34;
  }
  unsigned int v36 = *(_DWORD *)(a3 + 32);
  if (v36 > 0x40) {
    uint64_t v37 = **(void **)(a3 + 24);
  }
  else {
    uint64_t v37 = (uint64_t)(*(void *)(a3 + 24) << -(char)v36) >> -(char)v36;
  }
  sub_1CD1C6B64(a1[2], a7, a6, v35 - v37);
  return a1[2];
}

uint64_t sub_1CD1C7CF4(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = v9;
LABEL_3:
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = a2 - v10;
    uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    if (v5 || !v4) {
      break;
    }
    if (v11 <= 575)
    {
      unint64_t v216 = v10 + 24;
      BOOL v218 = v10 == a2 || v216 == a2;
      if (a4)
      {
        if (!v218)
        {
          unint64_t v219 = v10;
          while (1)
          {
            unint64_t v220 = v219;
            unint64_t v219 = v216;
            uint64_t v221 = *(void *)(v220 + 24);
            uint64_t v222 = *(void *)(v220 + 8);
            uint64_t v223 = (void *)(v222 + 24);
            uint64_t v224 = *(unsigned int *)(v221 + 32);
            if (v224 <= 0x40) {
              break;
            }
            uint64_t v239 = *(void *)(v221 + 24);
            uint64_t v240 = *(void *)(v239 + 8 * ((v224 - 1) >> 6)) & (1 << (v224 - 1));
            uint64_t result = *(unsigned int *)(v222 + 32);
            unsigned int v241 = result - 1;
            uint64_t v242 = *(void *)(v222 + 24);
            if (result >= 0x41) {
              uint64_t v223 = (void *)(v242 + 8 * (v241 >> 6));
            }
            if ((v240 != 0) != ((*v223 >> v241) & 1))
            {
              if (!v240) {
                goto LABEL_248;
              }
              goto LABEL_231;
            }
            unint64_t v243 = v224 + 63;
            uint64_t v244 = v242 - 8;
            uint64_t v245 = (v243 >> 3) & 0x3FFFFFF8;
            uint64_t v246 = v239 - 8;
            do
            {
              if (!v245) {
                goto LABEL_248;
              }
              unint64_t v247 = *(void *)(v246 + v245);
              unint64_t v248 = *(void *)(v244 + v245);
              v245 -= 8;
            }
            while (v247 == v248);
            if (v247 <= v248) {
              goto LABEL_231;
            }
LABEL_248:
            unint64_t v216 = v219 + 24;
            if (v219 + 24 == a2) {
              return result;
            }
          }
          if ((uint64_t)(*(void *)(v221 + 24) << -(char)v224) >> -(char)v224 >= (uint64_t)(*v223 << -(char)v224) >> -(char)v224) {
            goto LABEL_248;
          }
LABEL_231:
          long long v471 = *(_OWORD *)(v220 + 32);
          *(void *)(v219 + 16) = *(void *)(v220 + 16);
          *(_OWORD *)unint64_t v219 = *(_OWORD *)v220;
          unint64_t v225 = v10;
          if (v220 == v10) {
            goto LABEL_247;
          }
          while (1)
          {
            uint64_t v226 = *(void *)(v220 - 16);
            v227 = (void *)(v226 + 24);
            uint64_t v228 = *(unsigned int *)(v221 + 32);
            if (v228 <= 0x40)
            {
              if ((uint64_t)(*(void *)(v221 + 24) << -(char)v228) >> -(char)v228 >= (uint64_t)(*v227 << -(char)v228) >> -(char)v228) {
                goto LABEL_246;
              }
            }
            else
            {
              uint64_t v229 = *(void *)(v221 + 24);
              uint64_t v230 = *(void *)(v229 + 8 * ((v228 - 1) >> 6)) & (1 << (v228 - 1));
              uint64_t result = *(unsigned int *)(v226 + 32);
              unsigned int v231 = result - 1;
              uint64_t v232 = *(void *)(v226 + 24);
              if (result >= 0x41) {
                v227 = (void *)(v232 + 8 * (v231 >> 6));
              }
              if ((v230 != 0) == ((*v227 >> v231) & 1))
              {
                unint64_t v233 = v228 + 63;
                uint64_t v234 = v232 - 8;
                uint64_t v235 = (v233 >> 3) & 0x3FFFFFF8;
                uint64_t v236 = v229 - 8;
                while (v235)
                {
                  unint64_t v237 = *(void *)(v236 + v235);
                  unint64_t v238 = *(void *)(v234 + v235);
                  v235 -= 8;
                  if (v237 != v238)
                  {
                    if (v237 <= v238) {
                      goto LABEL_235;
                    }
                    break;
                  }
                }
LABEL_246:
                unint64_t v225 = v220;
LABEL_247:
                *(void *)unint64_t v225 = v221;
                *(_OWORD *)(v225 + 8) = v471;
                goto LABEL_248;
              }
              if (!v230) {
                goto LABEL_246;
              }
            }
LABEL_235:
            *(_OWORD *)unint64_t v220 = *(_OWORD *)(v220 - 24);
            *(void *)(v220 + 16) = *(void *)(v220 - 8);
            v220 -= 24;
            if (v220 == v10)
            {
              unint64_t v225 = v10;
              goto LABEL_247;
            }
          }
        }
        return result;
      }
      if (v218) {
        return result;
      }
      while (2)
      {
        unint64_t v381 = v9;
        unint64_t v9 = v216;
        uint64_t v382 = *(void *)(v381 + 24);
        uint64_t v383 = *(void *)(v381 + 8);
        v384 = (void *)(v383 + 24);
        uint64_t v385 = *(unsigned int *)(v382 + 32);
        if (v385 <= 0x40)
        {
          if ((uint64_t)(*(void *)(v382 + 24) << -(char)v385) >> -(char)v385 < (uint64_t)(*v384 << -(char)v385) >> -(char)v385)
          {
LABEL_383:
            long long v473 = *(_OWORD *)(v381 + 32);
            unint64_t v386 = v9;
            while (1)
            {
LABEL_384:
              while (1)
              {
                unint64_t v387 = v386;
                unint64_t v386 = v381;
                *(_OWORD *)unint64_t v387 = *(_OWORD *)v381;
                *(void *)(v387 + 16) = *(void *)(v381 + 16);
                v381 -= 24;
                uint64_t v388 = *(void *)(v386 - 16);
                v389 = (void *)(v388 + 24);
                uint64_t v390 = *(unsigned int *)(v382 + 32);
                if (v390 > 0x40) {
                  break;
                }
                if ((uint64_t)(*(void *)(v382 + 24) << -(char)v390) >> -(char)v390 >= (uint64_t)(*v389 << -(char)v390) >> -(char)v390) {
                  goto LABEL_397;
                }
              }
              uint64_t v391 = *(void *)(v382 + 24);
              uint64_t v392 = *(void *)(v391 + 8 * ((v390 - 1) >> 6)) & (1 << (v390 - 1));
              uint64_t result = *(unsigned int *)(v388 + 32);
              unsigned int v393 = result - 1;
              uint64_t v394 = *(void *)(v388 + 24);
              if (result >= 0x41) {
                v389 = (void *)(v394 + 8 * (v393 >> 6));
              }
              if ((v392 != 0) == ((*v389 >> v393) & 1)) {
                break;
              }
              if (!v392) {
                goto LABEL_397;
              }
            }
            unint64_t v395 = v390 + 63;
            uint64_t v396 = v394 - 8;
            uint64_t v397 = (v395 >> 3) & 0x3FFFFFF8;
            uint64_t v398 = v391 - 8;
            while (v397)
            {
              unint64_t v399 = *(void *)(v398 + v397);
              unint64_t v400 = *(void *)(v396 + v397);
              v397 -= 8;
              if (v399 != v400)
              {
                if (v399 <= v400) {
                  goto LABEL_384;
                }
                break;
              }
            }
LABEL_397:
            *(void *)unint64_t v386 = v382;
            *(_OWORD *)(v386 + 8) = v473;
          }
        }
        else
        {
          uint64_t v401 = *(void *)(v382 + 24);
          uint64_t v402 = *(void *)(v401 + 8 * ((v385 - 1) >> 6)) & (1 << (v385 - 1));
          unsigned int v403 = *(_DWORD *)(v383 + 32);
          uint64_t result = v403 - 1;
          uint64_t v404 = *(void *)(v383 + 24);
          if (v403 >= 0x41) {
            v384 = (void *)(v404 + 8 * (result >> 6));
          }
          if ((v402 != 0) == ((*v384 >> (v403 - 1)) & 1))
          {
            unint64_t v405 = v385 + 63;
            uint64_t v406 = v404 - 8;
            uint64_t v407 = (v405 >> 3) & 0x3FFFFFF8;
            uint64_t v408 = v401 - 8;
            while (v407)
            {
              unint64_t v409 = *(void *)(v408 + v407);
              unint64_t v410 = *(void *)(v406 + v407);
              v407 -= 8;
              if (v409 != v410)
              {
                if (v409 <= v410) {
                  goto LABEL_383;
                }
                break;
              }
            }
          }
          else if (v402)
          {
            goto LABEL_383;
          }
        }
        unint64_t v216 = v9 + 24;
        if (v9 + 24 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v249 = (unint64_t)(v12 - 2) >> 1;
      int64_t v250 = v249;
      while (2)
      {
        int64_t v251 = v250;
        if (v249 < v250) {
          goto LABEL_301;
        }
        uint64_t v252 = (2 * v250) | 1;
        v253 = (uint64_t *)(v10 + 24 * v252);
        if (2 * v251 + 2 < v12)
        {
          uint64_t v254 = *v253;
          uint64_t v255 = v253[4];
          v256 = (void *)(v255 + 24);
          uint64_t v257 = *(unsigned int *)(*v253 + 32);
          if (v257 > 0x40)
          {
            uint64_t v304 = *(void *)(v254 + 24);
            uint64_t v305 = *(void *)(v304 + 8 * ((v257 - 1) >> 6)) & (1 << (v257 - 1));
            unsigned int v306 = *(_DWORD *)(v255 + 32);
            unsigned int v307 = v306 - 1;
            uint64_t v308 = *(void *)(v255 + 24);
            if (v306 >= 0x41) {
              v256 = (void *)(v308 + 8 * (v307 >> 6));
            }
            if ((v305 != 0) == ((*v256 >> v307) & 1))
            {
              unint64_t v314 = v257 + 63;
              uint64_t v315 = v308 - 8;
              uint64_t v316 = (v314 >> 3) & 0x3FFFFFF8;
              uint64_t v317 = v304 - 8;
              do
              {
                if (!v316) {
                  goto LABEL_267;
                }
                unint64_t v318 = *(void *)(v317 + v316);
                unint64_t v319 = *(void *)(v315 + v316);
                v316 -= 8;
              }
              while (v318 == v319);
              if (v318 > v319) {
                goto LABEL_267;
              }
            }
            else if (!v305)
            {
              goto LABEL_267;
            }
LABEL_266:
            v253 += 3;
            uint64_t v252 = 2 * v251 + 2;
            goto LABEL_267;
          }
          if ((uint64_t)(*(void *)(v254 + 24) << -(char)v257) >> -(char)v257 < (uint64_t)(*v256 << -(char)v257) >> -(char)v257) {
            goto LABEL_266;
          }
        }
LABEL_267:
        uint64_t v258 = *v253;
        uint64_t v259 = *(void *)(v10 + 24 * v251 + 8);
        v260 = (void *)(v259 + 24);
        uint64_t v261 = *(unsigned int *)(*v253 + 32);
        if (v261 > 0x40)
        {
          uint64_t result = *(void *)(v258 + 24);
          uint64_t v299 = *(void *)(result + 8 * ((v261 - 1) >> 6)) & (1 << (v261 - 1));
          unsigned int v300 = *(_DWORD *)(v259 + 32);
          unsigned int v301 = v300 - 1;
          uint64_t v302 = *(void *)(v259 + 24);
          if (v300 >= 0x41) {
            v303 = (void *)(v302 + 8 * (v301 >> 6));
          }
          else {
            v303 = (void *)(v259 + 24);
          }
          if ((v299 != 0) == ((*v303 >> v301) & 1))
          {
            unint64_t v309 = v261 + 63;
            uint64_t v310 = v302 - 8;
            uint64_t v311 = (v309 >> 3) & 0x3FFFFFF8;
            result -= 8;
            do
            {
              if (!v311) {
                goto LABEL_269;
              }
              unint64_t v312 = *(void *)(result + v311);
              unint64_t v313 = *(void *)(v310 + v311);
              v311 -= 8;
            }
            while (v312 == v313);
            if (v312 <= v313) {
              goto LABEL_301;
            }
          }
          else if (v299)
          {
            goto LABEL_301;
          }
        }
        else
        {
          uint64_t v262 = -v261;
          uint64_t result = (uint64_t)(*(void *)(v258 + 24) << v262) >> v262;
          if (result < (uint64_t)(*v260 << v262) >> v262) {
            goto LABEL_301;
          }
        }
LABEL_269:
        unint64_t v263 = v10 + 24 * v251;
        uint64_t result = *(void *)v263;
        uint64_t v264 = *(void *)(v263 + 16);
        uint64_t v265 = v253[2];
        *(_OWORD *)unint64_t v263 = *(_OWORD *)v253;
        *(void *)(v263 + 16) = v265;
LABEL_270:
        if (v249 < v252) {
          goto LABEL_300;
        }
        v266 = v253;
        uint64_t v267 = 2 * v252;
        uint64_t v252 = (2 * v252) | 1;
        v253 = (uint64_t *)(v10 + 24 * v252);
        uint64_t v268 = v267 + 2;
        if (v268 < v12)
        {
          uint64_t v269 = *v253;
          uint64_t v270 = v253[4];
          v271 = (void *)(v270 + 24);
          uint64_t v272 = *(unsigned int *)(*v253 + 32);
          if (v272 > 0x40)
          {
            uint64_t v282 = *(void *)(v269 + 24);
            uint64_t v283 = *(void *)(v282 + 8 * ((v272 - 1) >> 6)) & (1 << (v272 - 1));
            unsigned int v284 = *(_DWORD *)(v270 + 32);
            unsigned int v285 = v284 - 1;
            uint64_t v286 = *(void *)(v270 + 24);
            if (v284 >= 0x41) {
              v271 = (void *)(v286 + 8 * (v285 >> 6));
            }
            if ((v283 != 0) == ((*v271 >> v285) & 1))
            {
              unint64_t v293 = v272 + 63;
              uint64_t v294 = v286 - 8;
              uint64_t v295 = (v293 >> 3) & 0x3FFFFFF8;
              uint64_t v296 = v282 - 8;
              do
              {
                if (!v295) {
                  goto LABEL_275;
                }
                unint64_t v297 = *(void *)(v296 + v295);
                unint64_t v298 = *(void *)(v294 + v295);
                v295 -= 8;
              }
              while (v297 == v298);
              if (v297 > v298) {
                goto LABEL_275;
              }
            }
            else if (!v283)
            {
              goto LABEL_275;
            }
LABEL_274:
            v253 += 3;
            uint64_t v252 = v268;
          }
          else if ((uint64_t)(*(void *)(v269 + 24) << -(char)v272) >> -(char)v272 < (uint64_t)(*v271 << -(char)v272) >> -(char)v272)
          {
            goto LABEL_274;
          }
        }
LABEL_275:
        uint64_t v273 = *v253;
        uint64_t v274 = *(unsigned int *)(*v253 + 32);
        if (v274 > 0x40)
        {
          uint64_t v276 = *(void *)(v273 + 24);
          uint64_t v277 = *(void *)(v276 + 8 * ((v274 - 1) >> 6)) & (1 << (v274 - 1));
          unsigned int v278 = *(_DWORD *)(v259 + 32);
          unsigned int v279 = v278 - 1;
          uint64_t v280 = *(void *)(v259 + 24);
          if (v278 >= 0x41) {
            v281 = (void *)(v280 + 8 * (v279 >> 6));
          }
          else {
            v281 = (void *)(v259 + 24);
          }
          if ((v277 != 0) == ((*v281 >> v279) & 1))
          {
            unint64_t v287 = v274 + 63;
            uint64_t v288 = v280 - 8;
            uint64_t v289 = (v287 >> 3) & 0x3FFFFFF8;
            uint64_t v290 = v276 - 8;
            do
            {
              if (!v289) {
                goto LABEL_277;
              }
              unint64_t v291 = *(void *)(v290 + v289);
              unint64_t v292 = *(void *)(v288 + v289);
              v289 -= 8;
            }
            while (v291 == v292);
            if (v291 <= v292)
            {
LABEL_299:
              v253 = v266;
LABEL_300:
              uint64_t *v253 = result;
              v253[1] = v259;
              v253[2] = v264;
LABEL_301:
              int64_t v250 = v251 - 1;
              if (v251) {
                continue;
              }
              while (2)
              {
                uint64_t v320 = 0;
                uint64_t v478 = *(void *)(v10 + 16);
                long long v472 = *(_OWORD *)v10;
                v321 = (void *)v10;
LABEL_325:
                v322 = v321;
                v321 += 3 * v320 + 3;
                uint64_t v323 = 2 * v320;
                uint64_t v320 = (2 * v320) | 1;
                uint64_t v324 = v323 + 2;
                if (v324 < v12)
                {
                  uint64_t v325 = *v321;
                  uint64_t v326 = v321[4];
                  v327 = (void *)(v326 + 24);
                  uint64_t v328 = *(unsigned int *)(*v321 + 32);
                  if (v328 > 0x40)
                  {
                    uint64_t v331 = *(void *)(v325 + 24);
                    uint64_t v332 = *(void *)(v331 + 8 * ((v328 - 1) >> 6)) & (1 << (v328 - 1));
                    unsigned int v333 = *(_DWORD *)(v326 + 32);
                    unsigned int v334 = v333 - 1;
                    uint64_t v335 = *(void *)(v326 + 24);
                    if (v333 >= 0x41) {
                      v327 = (void *)(v335 + 8 * (v334 >> 6));
                    }
                    uint64_t result = (*v327 >> v334) & 1;
                    if ((v332 != 0) == result)
                    {
                      unint64_t v336 = v328 + 63;
                      uint64_t v337 = v335 - 8;
                      uint64_t result = (v336 >> 3) & 0x3FFFFFF8;
                      uint64_t v338 = v331 - 8;
                      while (result)
                      {
                        unint64_t v339 = *(void *)(v338 + result);
                        unint64_t v340 = *(void *)(v337 + result);
                        result -= 8;
                        if (v339 != v340)
                        {
                          if (v339 <= v340) {
                            goto LABEL_328;
                          }
                          break;
                        }
                      }
                    }
                    else if (v332)
                    {
LABEL_328:
                      v321 += 3;
                      uint64_t v320 = v324;
                    }
                  }
                  else
                  {
                    uint64_t v329 = -v328;
                    uint64_t result = *v327 << v329;
                    if ((uint64_t)(*(void *)(v325 + 24) << v329) >> v329 < result >> v329) {
                      goto LABEL_328;
                    }
                  }
                }
                long long v330 = *(_OWORD *)v321;
                v322[2] = v321[2];
                *(_OWORD *)v322 = v330;
                if (v320 > (uint64_t)((unint64_t)(v12 - 2) >> 1))
                {
                  a2 -= 24;
                  if (v321 == (void *)a2)
                  {
                    v321[2] = v478;
                    *(_OWORD *)v321 = v472;
                    goto LABEL_364;
                  }
                  long long v341 = *(_OWORD *)a2;
                  v321[2] = *(void *)(a2 + 16);
                  *(_OWORD *)v321 = v341;
                  *(void *)(a2 + 16) = v478;
                  *(_OWORD *)a2 = v472;
                  uint64_t v342 = (uint64_t)v321 - v10 + 24;
                  if (v342 >= 25)
                  {
                    unint64_t v343 = v342 / 0x18uLL - 2;
                    unint64_t v344 = v343 >> 1;
                    v345 = (uint64_t *)(v10 + 24 * (v343 >> 1));
                    uint64_t v346 = *v345;
                    uint64_t v347 = v321[1];
                    v348 = (void *)(v347 + 24);
                    uint64_t v349 = *(unsigned int *)(*v345 + 32);
                    if (v349 > 0x40)
                    {
                      uint64_t result = *(void *)(v346 + 24);
                      uint64_t v371 = *(void *)(result + 8 * ((v349 - 1) >> 6)) & (1 << (v349
                                                                                                  - 1));
                      unsigned int v372 = *(_DWORD *)(v347 + 32);
                      unsigned int v373 = v372 - 1;
                      uint64_t v374 = *(void *)(v347 + 24);
                      if (v372 >= 0x41) {
                        v375 = (void *)(v374 + 8 * (v373 >> 6));
                      }
                      else {
                        v375 = (void *)(v347 + 24);
                      }
                      if ((v371 != 0) == ((*v375 >> v373) & 1))
                      {
                        unint64_t v376 = v349 + 63;
                        uint64_t v377 = v374 - 8;
                        uint64_t v378 = (v376 >> 3) & 0x3FFFFFF8;
                        result -= 8;
                        while (v378)
                        {
                          unint64_t v379 = *(void *)(result + v378);
                          unint64_t v380 = *(void *)(v377 + v378);
                          v378 -= 8;
                          if (v379 != v380)
                          {
                            if (v379 <= v380) {
                              goto LABEL_346;
                            }
                            break;
                          }
                        }
                      }
                      else if (v371)
                      {
LABEL_346:
                        uint64_t result = *v321;
                        uint64_t v351 = v321[2];
                        uint64_t v352 = v345[2];
                        *(_OWORD *)v321 = *(_OWORD *)v345;
                        v321[2] = v352;
                        if (v343 >= 2)
                        {
                          while (1)
                          {
                            unint64_t v354 = v344 - 1;
                            unint64_t v344 = (v344 - 1) >> 1;
                            v353 = (uint64_t *)(v10 + 24 * v344);
                            uint64_t v355 = *v353;
                            uint64_t v356 = *(unsigned int *)(*v353 + 32);
                            if (v356 > 0x40)
                            {
                              uint64_t v358 = *(void *)(v355 + 24);
                              uint64_t v359 = *(void *)(v358 + 8 * ((v356 - 1) >> 6)) & (1 << (v356 - 1));
                              unsigned int v360 = *(_DWORD *)(v347 + 32);
                              unsigned int v361 = v360 - 1;
                              uint64_t v362 = *(void *)(v347 + 24);
                              if (v360 >= 0x41) {
                                v363 = (void *)(v362 + 8 * (v361 >> 6));
                              }
                              else {
                                v363 = (void *)(v347 + 24);
                              }
                              if ((v359 != 0) == ((*v363 >> v361) & 1))
                              {
                                unint64_t v364 = v356 + 63;
                                uint64_t v365 = v362 - 8;
                                uint64_t v366 = (v364 >> 3) & 0x3FFFFFF8;
                                uint64_t v367 = v358 - 8;
                                while (v366)
                                {
                                  unint64_t v368 = *(void *)(v367 + v366);
                                  unint64_t v369 = *(void *)(v365 + v366);
                                  v366 -= 8;
                                  if (v368 != v369)
                                  {
                                    if (v368 <= v369) {
                                      goto LABEL_351;
                                    }
                                    goto LABEL_347;
                                  }
                                }
                                break;
                              }
                              if (!v359) {
                                break;
                              }
                            }
                            else if ((uint64_t)(*(void *)(v355 + 24) << -(char)v356) >> -(char)v356 >= (uint64_t)(*v348 << -(char)v356) >> -(char)v356)
                            {
                              break;
                            }
LABEL_351:
                            long long v357 = *(_OWORD *)v353;
                            v345[2] = v353[2];
                            *(_OWORD *)v345 = v357;
                            v345 = (uint64_t *)(v10 + 24 * v344);
                            if (v354 <= 1) {
                              goto LABEL_348;
                            }
                          }
                        }
LABEL_347:
                        v353 = v345;
LABEL_348:
                        uint64_t *v353 = result;
                        v353[1] = v347;
                        v353[2] = v351;
                      }
                    }
                    else
                    {
                      uint64_t v350 = -v349;
                      uint64_t result = (uint64_t)(*(void *)(v346 + 24) << v350) >> v350;
                      if (result < (uint64_t)(*v348 << v350) >> v350) {
                        goto LABEL_346;
                      }
                    }
                  }
LABEL_364:
                  if (v12-- <= 2) {
                    return result;
                  }
                  continue;
                }
                goto LABEL_325;
              }
            }
          }
          else if (v277)
          {
            goto LABEL_299;
          }
        }
        else if ((uint64_t)(*(void *)(v273 + 24) << -(char)v274) >> -(char)v274 < (uint64_t)(*v260 << -(char)v274) >> -(char)v274)
        {
          goto LABEL_299;
        }
        break;
      }
LABEL_277:
      long long v275 = *(_OWORD *)v253;
      v266[2] = v253[2];
      *(_OWORD *)v266 = v275;
      goto LABEL_270;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = (void *)(v10 + 24 * ((unint64_t)v12 >> 1));
    if ((unint64_t)v11 >= 0xC01)
    {
      sub_1CD1C9998((long long *)v9, (void *)(v9 + 24 * ((unint64_t)v12 >> 1)), (void *)(a2 - 24));
      uint64_t v15 = 3 * v13;
      unint64_t v16 = (long long *)(v9 + 24 * v13 - 24);
      sub_1CD1C9998((long long *)(v9 + 24), v16, (void *)(a2 - 48));
      unsigned int v17 = (void *)(v9 + 24 + 8 * v15);
      sub_1CD1C9998((long long *)(v9 + 48), v17, (void *)(a2 - 72));
      uint64_t result = (uint64_t)sub_1CD1C9998(v16, v14, v17);
      uint64_t v474 = *(void *)(v9 + 16);
      long long v467 = *(_OWORD *)v9;
      uint64_t v18 = v14[2];
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v14;
      *(void *)(v9 + 16) = v18;
      v14[2] = v474;
      *(_OWORD *)uint64_t v14 = v467;
    }
    else
    {
      uint64_t result = (uint64_t)sub_1CD1C9998((long long *)(v9 + 24 * ((unint64_t)v12 >> 1)), (void *)v9, (void *)(a2 - 24));
    }
    --a3;
    if (a4)
    {
      uint64_t v19 = *(void *)(v9 + 8);
    }
    else
    {
      uint64_t v20 = *(void *)(v9 - 24);
      uint64_t v19 = *(void *)(v9 + 8);
      uint64_t v21 = (void *)(v19 + 24);
      uint64_t v22 = *(unsigned int *)(v20 + 32);
      if (v22 > 0x40)
      {
        uint64_t v103 = *(void *)(v20 + 24);
        uint64_t v104 = *(void *)(v103 + 8 * ((v22 - 1) >> 6)) & (1 << (v22 - 1));
        unsigned int v105 = *(_DWORD *)(v19 + 32);
        unsigned int v106 = v105 - 1;
        uint64_t v107 = *(void *)(v19 + 24);
        if (v105 >= 0x41) {
          uint64_t v21 = (void *)(v107 + 8 * (v106 >> 6));
        }
        if ((v104 != 0) == ((*v21 >> v106) & 1))
        {
          unint64_t v156 = v22 + 63;
          uint64_t v157 = v107 - 8;
          uint64_t v158 = (v156 >> 3) & 0x3FFFFFF8;
          uint64_t v159 = v103 - 8;
          do
          {
            if (!v158) {
              goto LABEL_109;
            }
            unint64_t v160 = *(void *)(v159 + v158);
            unint64_t v161 = *(void *)(v157 + v158);
            v158 -= 8;
          }
          while (v160 == v161);
          if (v160 > v161)
          {
LABEL_109:
            uint64_t v108 = *(void *)v9;
            long long v466 = *(_OWORD *)(v9 + 8);
            uint64_t v109 = *(void *)(a2 - 16);
            unint64_t v110 = (void *)(v109 + 24);
            uint64_t v111 = *(unsigned int *)(*(void *)v9 + 32);
            if (v111 > 0x40)
            {
              uint64_t v112 = *(void *)(v108 + 24);
              uint64_t v162 = *(void *)(v112 + 8 * ((v111 - 1) >> 6)) & (1 << (v111 - 1));
              unsigned int v163 = *(_DWORD *)(v109 + 32);
              unsigned int v164 = v163 - 1;
              uint64_t v165 = *(void *)(v109 + 24);
              uint64_t result = v165 + 8 * ((v163 - 1) >> 6);
              if (v163 >= 0x41) {
                unint64_t v110 = (void *)(v165 + 8 * (v164 >> 6));
              }
              if ((v162 != 0) == ((*v110 >> v164) & 1))
              {
                uint64_t v177 = v165 - 8;
                unint64_t v178 = ((unint64_t)(v111 + 63) >> 3) & 0x3FFFFFF8;
                while (v178)
                {
                  unint64_t v179 = *(void *)(v112 + v178 - 8);
                  unint64_t v180 = *(void *)(v177 + v178);
                  v178 -= 8;
                  if (v179 != v180)
                  {
                    if (v179 <= v180) {
                      goto LABEL_111;
                    }
                    break;
                  }
                }
              }
              else if (v162)
              {
                goto LABEL_111;
              }
            }
            else
            {
              uint64_t v112 = *(void *)(v108 + 24);
              if (v112 << -(char)v111 >> -(char)v111 < (uint64_t)(*v110 << -(char)v111) >> -(char)v111)
              {
LABEL_111:
                uint64_t v113 = (v111 - 1) >> 6;
                uint64_t v114 = 1 << (v111 - 1);
                unint64_t v10 = v9;
                do
                {
LABEL_112:
                  while (1)
                  {
                    uint64_t v115 = *(void *)(v10 + 32);
                    v10 += 24;
                    uint64_t result = v115 + 24;
                    if (v111 <= 0x40) {
                      break;
                    }
                    unsigned int v116 = *(_DWORD *)(v115 + 32);
                    unsigned int v117 = v116 - 1;
                    uint64_t v118 = *(void *)(v115 + 24);
                    if (v116 >= 0x41) {
                      uint64_t result = v118 + 8 * (v117 >> 6);
                    }
                    uint64_t result = ((*(void *)(v112 + 8 * v113) & v114) != 0) ^ (*(void *)result >> v117);
                    if (result)
                    {
                      if ((*(void *)(v112 + 8 * v113) & v114) != 0) {
                        goto LABEL_124;
                      }
                    }
                    else
                    {
                      uint64_t result = v118 - 8;
                      unint64_t v119 = ((unint64_t)(v111 + 63) >> 3) & 0x3FFFFFF8;
                      while (v119)
                      {
                        unint64_t v120 = *(void *)(v112 - 8 + v119);
                        unint64_t v121 = *(void *)(result + v119);
                        v119 -= 8;
                        if (v120 != v121)
                        {
                          if (v120 <= v121) {
                            goto LABEL_124;
                          }
                          goto LABEL_112;
                        }
                      }
                    }
                  }
                }
                while (v112 << -(char)v111 >> -(char)v111 >= (uint64_t)(*(void *)result << (64 - v111)) >> (64 - v111));
LABEL_124:
                uint64_t v122 = (char *)a2;
                if (v10 >= a2) {
                  goto LABEL_164;
                }
                uint64_t v123 = (v111 - 1) >> 6;
                uint64_t v124 = 1 << (v111 - 1);
                for (uint64_t result = a2; ; result -= 24)
                {
                  uint64_t v122 = (char *)(result - 24);
                  uint64_t v125 = (void *)(v109 + 24);
                  if (v111 > 0x40)
                  {
                    unsigned int v126 = *(_DWORD *)(v109 + 32);
                    unsigned int v127 = v126 - 1;
                    uint64_t v128 = *(void *)(v109 + 24);
                    if (v126 >= 0x41) {
                      uint64_t v125 = (void *)(v128 + 8 * (v127 >> 6));
                    }
                    if (((((*(void *)(v112 + 8 * v123) & v124) != 0) ^ (*v125 >> v127)) & 1) == 0)
                    {
                      uint64_t v129 = v128 - 8;
                      unint64_t v130 = ((unint64_t)(v111 + 63) >> 3) & 0x3FFFFFF8;
                      while (v130)
                      {
                        unint64_t v131 = *(void *)(v112 + v130 - 8);
                        unint64_t v132 = *(void *)(v129 + v130);
                        v130 -= 8;
                        if (v131 != v132)
                        {
                          if (v131 <= v132) {
                            goto LABEL_128;
                          }
                          break;
                        }
                      }
LABEL_164:
                      while (v10 < (unint64_t)v122)
                      {
                        uint64_t v475 = *(void *)(v10 + 16);
                        long long v468 = *(_OWORD *)v10;
                        long long v133 = *(_OWORD *)v122;
                        *(void *)(v10 + 16) = *((void *)v122 + 2);
                        *(_OWORD *)unint64_t v10 = v133;
                        *((void *)v122 + 2) = v475;
                        *(_OWORD *)uint64_t v122 = v468;
                        uint64_t v134 = *(unsigned int *)(v108 + 32);
                        uint64_t v135 = (v134 - 1) >> 6;
                        uint64_t v136 = 1 << (v134 - 1);
                        char v137 = 64 - v134;
                        do
                        {
                          while (1)
                          {
LABEL_140:
                            while (1)
                            {
                              uint64_t v138 = *(void *)(v10 + 32);
                              v10 += 24;
                              uint64_t v139 = (void *)(v138 + 24);
                              if (v134 > 0x40) {
                                break;
                              }
                              uint64_t v140 = *(void *)(v108 + 24);
                              if (v140 << v137 >> v137 < (uint64_t)(*v139 << v137) >> v137) {
                                goto LABEL_152;
                              }
                            }
                            uint64_t v140 = *(void *)(v108 + 24);
                            unsigned int v141 = *(_DWORD *)(v138 + 32);
                            unsigned int v142 = v141 - 1;
                            uint64_t v143 = *(void *)(v138 + 24);
                            if (v141 >= 0x41) {
                              uint64_t v139 = (void *)(v143 + 8 * (v142 >> 6));
                            }
                            if ((((*(void *)(v140 + 8 * v135) & v136) != 0) ^ (*v139 >> v142))) {
                              break;
                            }
                            uint64_t v144 = v143 - 8;
                            unint64_t v145 = ((unint64_t)(v134 + 63) >> 3) & 0x3FFFFFF8;
                            while (v145)
                            {
                              unint64_t v146 = *(void *)(v140 + v145 - 8);
                              unint64_t v147 = *(void *)(v144 + v145);
                              v145 -= 8;
                              if (v146 != v147)
                              {
                                if (v146 <= v147) {
                                  goto LABEL_152;
                                }
                                goto LABEL_140;
                              }
                            }
                          }
                        }
                        while ((*(void *)(v140 + 8 * v135) & v136) == 0);
                        while (1)
                        {
LABEL_152:
                          while (1)
                          {
                            uint64_t v148 = *((void *)v122 - 2);
                            v122 -= 24;
                            uint64_t result = v148 + 24;
                            if (v134 > 0x40) {
                              break;
                            }
                            if (v140 << v137 >> v137 >= (uint64_t)(*(void *)result << v137) >> v137) {
                              goto LABEL_164;
                            }
                          }
                          unsigned int v149 = *(_DWORD *)(v148 + 32);
                          unsigned int v150 = v149 - 1;
                          uint64_t v151 = *(void *)(v148 + 24);
                          if (v149 >= 0x41) {
                            uint64_t result = v151 + 8 * (v150 >> 6);
                          }
                          uint64_t result = ((*(void *)(v140 + 8 * v135) & v136) != 0) ^ (*(void *)result >> v150);
                          if ((result & 1) == 0) {
                            break;
                          }
                          if ((*(void *)(v140 + 8 * v135) & v136) == 0) {
                            goto LABEL_164;
                          }
                        }
                        uint64_t result = v151 - 8;
                        unint64_t v152 = ((unint64_t)(v134 + 63) >> 3) & 0x3FFFFFF8;
                        while (v152)
                        {
                          unint64_t v153 = *(void *)(v140 - 8 + v152);
                          unint64_t v154 = *(void *)(result + v152);
                          v152 -= 8;
                          if (v153 != v154)
                          {
                            if (v153 <= v154) {
                              goto LABEL_152;
                            }
                            goto LABEL_164;
                          }
                        }
                      }
                      BOOL v4 = v10 - 24 >= v9;
                      BOOL v5 = v10 - 24 == v9;
                      if (v10 - 24 != v9)
                      {
                        long long v155 = *(_OWORD *)(v10 - 24);
                        *(void *)(v9 + 16) = *(void *)(v10 - 8);
                        *(_OWORD *)unint64_t v9 = v155;
                      }
                      a4 = 0;
                      *(void *)(v10 - 24) = v108;
                      *(_OWORD *)(v10 - 16) = v466;
                      goto LABEL_3;
                    }
                    if ((*(void *)(v112 + 8 * v123) & v124) == 0) {
                      goto LABEL_164;
                    }
                  }
                  else if (v112 << -(char)v111 >> -(char)v111 >= (uint64_t)(*v125 << (64 - v111)) >> (64 - v111))
                  {
                    goto LABEL_164;
                  }
LABEL_128:
                  uint64_t v109 = *(void *)(result - 40);
                }
              }
            }
            unint64_t v10 = v9 + 24;
            if (v9 + 24 < a2)
            {
              uint64_t v166 = (v111 - 1) >> 6;
              uint64_t v167 = 1 << (v111 - 1);
              unint64_t v168 = v9;
              while (1)
              {
                uint64_t v169 = *(void *)(v168 + 32);
                unint64_t v168 = v10;
                uint64_t v170 = (void *)(v169 + 24);
                if (v111 > 0x40)
                {
                  uint64_t result = *(void *)(v112 + 8 * v166) & v167;
                  unsigned int v171 = *(_DWORD *)(v169 + 32);
                  unsigned int v172 = v171 - 1;
                  uint64_t v173 = *(void *)(v169 + 24);
                  if (v171 >= 0x41) {
                    uint64_t v170 = (void *)(v173 + 8 * (v172 >> 6));
                  }
                  if ((((*(void *)(v112 + 8 * v166) & v167) != 0) ^ (*v170 >> v172)))
                  {
                    if (result) {
                      goto LABEL_124;
                    }
                  }
                  else
                  {
                    uint64_t result = v173 - 8;
                    unint64_t v174 = ((unint64_t)(v111 + 63) >> 3) & 0x3FFFFFF8;
                    while (v174)
                    {
                      unint64_t v175 = *(void *)(v112 + v174 - 8);
                      unint64_t v176 = *(void *)(result + v174);
                      v174 -= 8;
                      if (v175 != v176)
                      {
                        if (v175 > v176) {
                          break;
                        }
                        goto LABEL_124;
                      }
                    }
                  }
                }
                else
                {
                  uint64_t result = (uint64_t)(*v170 << (64 - v111)) >> (64 - v111);
                  if (v112 << -(char)v111 >> -(char)v111 < result) {
                    goto LABEL_124;
                  }
                }
                v10 += 24;
                if (v168 + 24 >= a2) {
                  goto LABEL_124;
                }
              }
            }
            goto LABEL_124;
          }
        }
        else if (!v104)
        {
          goto LABEL_109;
        }
      }
      else if ((uint64_t)(*(void *)(v20 + 24) << -(char)v22) >> -(char)v22 >= (uint64_t)(*v21 << -(char)v22) >> -(char)v22)
      {
        goto LABEL_109;
      }
    }
    uint64_t v23 = *(void *)v9;
    uint64_t v24 = *(void *)(v9 + 16);
    unsigned int v25 = (uint64_t *)(v19 + 24);
    unint64_t v26 = v9;
    while (1)
    {
LABEL_15:
      while (1)
      {
        unint64_t v27 = v26;
        uint64_t v29 = *(void *)(v26 + 24);
        v26 += 24;
        uint64_t v28 = v29;
        uint64_t v30 = *(unsigned int *)(v29 + 32);
        if (v30 > 0x40) {
          break;
        }
        uint64_t v31 = -v30;
        uint64_t v32 = (uint64_t)(*(void *)(v28 + 24) << v31) >> v31;
        uint64_t v33 = *v25;
        if (v32 >= *v25 << v31 >> v31) {
          goto LABEL_28;
        }
      }
      uint64_t v34 = *(void *)(v28 + 24);
      uint64_t v35 = *(void *)(v34 + 8 * ((v30 - 1) >> 6)) & (1 << (v30 - 1));
      unsigned int v36 = *(_DWORD *)(v19 + 32);
      unsigned int v37 = v36 - 1;
      uint64_t v33 = *(void *)(v19 + 24);
      BOOL v38 = (void *)(v36 >= 0x41 ? v33 + 8 * (v37 >> 6) : v19 + 24);
      if ((v35 != 0) == ((*v38 >> v37) & 1)) {
        break;
      }
      if (!v35) {
        goto LABEL_28;
      }
    }
    unint64_t v39 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
    uint64_t v40 = v34 - 8;
    while (v39)
    {
      unint64_t v41 = *(void *)(v40 + v39);
      unint64_t v42 = *(void *)(v33 + v39 - 8);
      v39 -= 8;
      if (v41 != v42)
      {
        if (v41 <= v42) {
          goto LABEL_15;
        }
        break;
      }
    }
LABEL_28:
    if (v27 == v9)
    {
      unint64_t v43 = a2;
      if (v26 < a2)
      {
        unint64_t v43 = a2;
        do
        {
LABEL_46:
          while (1)
          {
            uint64_t v57 = *(void *)(v43 - 24);
            v43 -= 24;
            uint64_t v56 = v57;
            uint64_t v58 = *(unsigned int *)(v57 + 32);
            if (v58 <= 0x40) {
              break;
            }
            uint64_t v59 = *(void *)(v56 + 24);
            uint64_t v60 = *(void *)(v59 + 8 * ((v58 - 1) >> 6)) & (1 << (v58 - 1));
            unsigned int v61 = *(_DWORD *)(v19 + 32);
            unsigned int v62 = v61 - 1;
            if (v61 >= 0x41) {
              uint64_t v63 = (void *)(v33 + 8 * (v62 >> 6));
            }
            else {
              uint64_t v63 = (void *)(v19 + 24);
            }
            if ((v60 != 0) == ((*v63 >> v62) & 1))
            {
              unint64_t v64 = ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v65 = v59 - 8;
              do
              {
                if (!v64)
                {
                  if (v26 < v43) {
                    goto LABEL_46;
                  }
                  goto LABEL_69;
                }
                unint64_t v66 = *(void *)(v65 + v64);
                unint64_t v67 = *(void *)(v33 - 8 + v64);
                v64 -= 8;
              }
              while (v66 == v67);
              if (v66 <= v67 || v26 >= v43) {
                goto LABEL_69;
              }
            }
            else if (v26 >= v43 || v60)
            {
              goto LABEL_69;
            }
          }
        }
        while ((uint64_t)(*(void *)(v56 + 24) << -(char)v58) >> -(char)v58 >= v33 << -(char)v58 >> -(char)v58
             && v26 < v43);
      }
    }
    else
    {
      unint64_t v43 = a2;
      do
      {
LABEL_30:
        while (1)
        {
          uint64_t v45 = *(void *)(v43 - 24);
          v43 -= 24;
          uint64_t v44 = v45;
          uint64_t v46 = *(unsigned int *)(v45 + 32);
          if (v46 <= 0x40) {
            break;
          }
          uint64_t v47 = *(void *)(v44 + 24);
          uint64_t v48 = *(void *)(v47 + 8 * ((v46 - 1) >> 6)) & (1 << (v46 - 1));
          unsigned int v49 = *(_DWORD *)(v19 + 32);
          unsigned int v50 = v49 - 1;
          if (v49 >= 0x41) {
            uint64_t v51 = (void *)(v33 + 8 * (v50 >> 6));
          }
          else {
            uint64_t v51 = (void *)(v19 + 24);
          }
          if ((v48 != 0) == ((*v51 >> v50) & 1))
          {
            unint64_t v52 = ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8;
            uint64_t v53 = v47 - 8;
            while (v52)
            {
              unint64_t v54 = *(void *)(v53 + v52);
              unint64_t v55 = *(void *)(v33 - 8 + v52);
              v52 -= 8;
              if (v54 != v55)
              {
                if (v54 <= v55) {
                  goto LABEL_69;
                }
                goto LABEL_30;
              }
            }
          }
          else if (v48)
          {
            goto LABEL_69;
          }
        }
      }
      while ((uint64_t)(*(void *)(v44 + 24) << -(char)v46) >> -(char)v46 >= v33 << -(char)v46 >> -(char)v46);
    }
LABEL_69:
    unint64_t v10 = v26;
    if (v26 < v43)
    {
      unint64_t v70 = v43;
      do
      {
        long long v71 = *(_OWORD *)v10;
        uint64_t v72 = *(void *)(v10 + 16);
        uint64_t v73 = *(void *)(v70 + 16);
        *(_OWORD *)unint64_t v10 = *(_OWORD *)v70;
        *(void *)(v10 + 16) = v73;
        *(void *)(v70 + 16) = v72;
        *(_OWORD *)unint64_t v70 = v71;
        do
        {
          while (1)
          {
            while (1)
            {
              uint64_t v75 = *(void *)(v10 + 24);
              v10 += 24;
              uint64_t v74 = v75;
              uint64_t v76 = *(unsigned int *)(v75 + 32);
              if (v76 > 0x40) {
                break;
              }
              uint64_t v77 = -v76;
              uint64_t v78 = (uint64_t)(*(void *)(v74 + 24) << v77) >> v77;
              uint64_t v79 = *v25;
              if (v78 >= *v25 << v77 >> v77) {
                goto LABEL_85;
              }
            }
            uint64_t v80 = *(void *)(v74 + 24);
            uint64_t v81 = *(void *)(v80 + 8 * ((v76 - 1) >> 6)) & (1 << (v76 - 1));
            unsigned int v82 = *(_DWORD *)(v19 + 32);
            unsigned int v83 = v82 - 1;
            uint64_t v79 = *(void *)(v19 + 24);
            uint64_t v84 = (void *)(v82 >= 0x41 ? v79 + 8 * (v83 >> 6) : v19 + 24);
            if ((v81 != 0) == ((*v84 >> v83) & 1)) {
              break;
            }
            if (!v81) {
              goto LABEL_85;
            }
          }
          unint64_t v85 = ((unint64_t)(v76 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v86 = v80 - 8;
          do
          {
            if (!v85) {
              goto LABEL_85;
            }
            unint64_t v87 = *(void *)(v86 + v85);
            unint64_t v88 = *(void *)(v79 + v85 - 8);
            v85 -= 8;
          }
          while (v87 == v88);
        }
        while (v87 <= v88);
        do
        {
LABEL_85:
          while (1)
          {
            uint64_t v90 = *(void *)(v70 - 24);
            v70 -= 24;
            uint64_t v89 = v90;
            uint64_t v91 = *(unsigned int *)(v90 + 32);
            if (v91 <= 0x40) {
              break;
            }
            uint64_t v92 = *(void *)(v89 + 24);
            uint64_t v93 = *(void *)(v92 + 8 * ((v91 - 1) >> 6)) & (1 << (v91 - 1));
            unsigned int v94 = *(_DWORD *)(v19 + 32);
            unsigned int v95 = v94 - 1;
            if (v94 >= 0x41) {
              uint64_t v96 = (void *)(v79 + 8 * (v95 >> 6));
            }
            else {
              uint64_t v96 = (void *)(v19 + 24);
            }
            if ((v93 != 0) == ((*v96 >> v95) & 1))
            {
              unint64_t v97 = ((unint64_t)(v91 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v98 = v92 - 8;
              while (v97)
              {
                unint64_t v99 = *(void *)(v98 + v97);
                unint64_t v100 = *(void *)(v79 - 8 + v97);
                v97 -= 8;
                if (v99 != v100)
                {
                  if (v99 <= v100) {
                    goto LABEL_98;
                  }
                  goto LABEL_85;
                }
              }
            }
            else if (v93)
            {
              goto LABEL_98;
            }
          }
        }
        while ((uint64_t)(*(void *)(v89 + 24) << -(char)v91) >> -(char)v91 >= v79 << -(char)v91 >> -(char)v91);
LABEL_98:
        ;
      }
      while (v10 < v70);
    }
    if (v10 - 24 != v9)
    {
      long long v101 = *(_OWORD *)(v10 - 24);
      *(void *)(v9 + 16) = *(void *)(v10 - 8);
      *(_OWORD *)unint64_t v9 = v101;
    }
    *(void *)(v10 - 24) = v23;
    *(void *)(v10 - 16) = v19;
    *(void *)(v10 - 8) = v24;
    if (v26 >= v43)
    {
      BOOL v102 = sub_1CD1C9D4C(v9, v10 - 24);
      uint64_t result = sub_1CD1C9D4C(v10, a2);
      if (result)
      {
        a2 = v10 - 24;
        if (v102) {
          return result;
        }
        goto LABEL_2;
      }
      if (v102) {
        continue;
      }
    }
    uint64_t result = sub_1CD1C7CF4(v9, v10 - 24, a3, a4 & 1);
    a4 = 0;
  }
  switch(v12)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v183 = *(void *)(a2 - 24);
      unint64_t v182 = a2 - 24;
      uint64_t v181 = v183;
      uint64_t v184 = *(void *)(v10 + 8);
      uint64_t v185 = (void *)(v184 + 24);
      uint64_t v186 = *(unsigned int *)(v183 + 32);
      if (v186 <= 0x40)
      {
        if ((uint64_t)(*(void *)(v181 + 24) << -(char)v186) >> -(char)v186 >= (uint64_t)(*v185 << -(char)v186) >> -(char)v186) {
          return result;
        }
        goto LABEL_203;
      }
      uint64_t v411 = *(void *)(v181 + 24);
      uint64_t v412 = *(void *)(v411 + 8 * ((v186 - 1) >> 6)) & (1 << (v186 - 1));
      unsigned int v413 = *(_DWORD *)(v184 + 32);
      unsigned int v414 = v413 - 1;
      uint64_t v415 = *(void *)(v184 + 24);
      if (v413 >= 0x41) {
        uint64_t v185 = (void *)(v415 + 8 * (v414 >> 6));
      }
      if ((v412 != 0) == ((*v185 >> v414) & 1))
      {
        unint64_t v436 = v186 + 63;
        uint64_t v437 = v415 - 8;
        uint64_t v438 = (v436 >> 3) & 0x3FFFFFF8;
        uint64_t v439 = v411 - 8;
        do
        {
          if (!v438) {
            return result;
          }
          unint64_t v440 = *(void *)(v439 + v438);
          unint64_t v441 = *(void *)(v437 + v438);
          v438 -= 8;
        }
        while (v440 == v441);
        if (v440 <= v441)
        {
LABEL_203:
          uint64_t v476 = *(void *)(v10 + 16);
          long long v469 = *(_OWORD *)v10;
          long long v187 = *(_OWORD *)v182;
          *(void *)(v10 + 16) = *(void *)(v182 + 16);
          *(_OWORD *)unint64_t v10 = v187;
          *(void *)(v182 + 16) = v476;
          *(_OWORD *)unint64_t v182 = v469;
          return result;
        }
      }
      else if (v412)
      {
        goto LABEL_203;
      }
      return result;
    case 3:
      return (uint64_t)sub_1CD1C9998((long long *)v10, (void *)(v10 + 24), (void *)(a2 - 24));
    case 4:
      return (uint64_t)sub_1CD1CA4F8(v10, (void *)(v10 + 24), (void *)(v10 + 48), (void *)(a2 - 24));
    case 5:
      uint64_t v188 = (long long *)(v10 + 24);
      int v189 = (long long *)(v10 + 48);
      unsigned int v190 = (long long *)(v10 + 72);
      uint64_t result = (uint64_t)sub_1CD1CA4F8(v10, (void *)(v10 + 24), (void *)(v10 + 48), (void *)(v10 + 72));
      uint64_t v193 = *(void *)(a2 - 24);
      unint64_t v192 = a2 - 24;
      uint64_t v191 = v193;
      uint64_t v194 = *(void *)(v10 + 80);
      unsigned int v195 = (void *)(v194 + 24);
      uint64_t v196 = *(unsigned int *)(v193 + 32);
      if (v196 > 0x40)
      {
        uint64_t v416 = *(void *)(v191 + 24);
        uint64_t v417 = *(void *)(v416 + 8 * ((v196 - 1) >> 6)) & (1 << (v196 - 1));
        unsigned int v418 = *(_DWORD *)(v194 + 32);
        unsigned int v419 = v418 - 1;
        uint64_t v420 = *(void *)(v194 + 24);
        if (v418 >= 0x41) {
          unsigned int v195 = (void *)(v420 + 8 * (v419 >> 6));
        }
        if ((v417 != 0) == ((*v195 >> v419) & 1))
        {
          unint64_t v442 = v196 + 63;
          uint64_t v443 = v420 - 8;
          uint64_t v444 = (v442 >> 3) & 0x3FFFFFF8;
          uint64_t v445 = v416 - 8;
          do
          {
            if (!v444) {
              return result;
            }
            unint64_t v446 = *(void *)(v445 + v444);
            unint64_t v447 = *(void *)(v443 + v444);
            v444 -= 8;
          }
          while (v446 == v447);
          if (v446 > v447) {
            return result;
          }
        }
        else if (!v417)
        {
          return result;
        }
      }
      else if ((uint64_t)(*(void *)(v191 + 24) << -(char)v196) >> -(char)v196 >= (uint64_t)(*v195 << -(char)v196) >> -(char)v196)
      {
        return result;
      }
      long long v197 = *v190;
      uint64_t v198 = *(void *)(v10 + 88);
      uint64_t v199 = *(void *)(v192 + 16);
      *unsigned int v190 = *(_OWORD *)v192;
      *(void *)(v10 + 88) = v199;
      *(void *)(v192 + 16) = v198;
      *(_OWORD *)unint64_t v192 = v197;
      uint64_t v200 = *(void *)(v10 + 72);
      uint64_t v201 = *(void *)(v10 + 56);
      unsigned int v202 = (void *)(v201 + 24);
      uint64_t v203 = *(unsigned int *)(v200 + 32);
      if (v203 > 0x40)
      {
        uint64_t v421 = *(void *)(v200 + 24);
        uint64_t v422 = *(void *)(v421 + 8 * ((v203 - 1) >> 6)) & (1 << (v203 - 1));
        unsigned int v423 = *(_DWORD *)(v201 + 32);
        unsigned int v424 = v423 - 1;
        uint64_t v425 = *(void *)(v201 + 24);
        if (v423 >= 0x41) {
          unsigned int v202 = (void *)(v425 + 8 * (v424 >> 6));
        }
        if ((v422 != 0) == ((*v202 >> v424) & 1))
        {
          unint64_t v448 = v203 + 63;
          uint64_t v449 = v425 - 8;
          uint64_t v450 = (v448 >> 3) & 0x3FFFFFF8;
          uint64_t v451 = v421 - 8;
          do
          {
            if (!v450) {
              return result;
            }
            unint64_t v452 = *(void *)(v451 + v450);
            unint64_t v453 = *(void *)(v449 + v450);
            v450 -= 8;
          }
          while (v452 == v453);
          if (v452 > v453) {
            return result;
          }
        }
        else if (!v422)
        {
          return result;
        }
      }
      else if ((uint64_t)(*(void *)(v200 + 24) << -(char)v203) >> -(char)v203 >= (uint64_t)(*v202 << -(char)v203) >> -(char)v203)
      {
        return result;
      }
      uint64_t v204 = *(void *)(v10 + 64);
      long long v205 = *v189;
      *int v189 = *v190;
      *(void *)(v10 + 64) = *(void *)(v10 + 88);
      *unsigned int v190 = v205;
      *(void *)(v10 + 88) = v204;
      uint64_t v206 = *(void *)(v10 + 48);
      uint64_t v207 = *(void *)(v10 + 32);
      unsigned int v208 = (void *)(v207 + 24);
      uint64_t v209 = *(unsigned int *)(v206 + 32);
      if (v209 > 0x40)
      {
        uint64_t v426 = *(void *)(v206 + 24);
        uint64_t v427 = *(void *)(v426 + 8 * ((v209 - 1) >> 6)) & (1 << (v209 - 1));
        unsigned int v428 = *(_DWORD *)(v207 + 32);
        unsigned int v429 = v428 - 1;
        uint64_t v430 = *(void *)(v207 + 24);
        if (v428 >= 0x41) {
          unsigned int v208 = (void *)(v430 + 8 * (v429 >> 6));
        }
        if ((v427 != 0) == ((*v208 >> v429) & 1))
        {
          unint64_t v454 = v209 + 63;
          uint64_t v455 = v430 - 8;
          uint64_t v456 = (v454 >> 3) & 0x3FFFFFF8;
          uint64_t v457 = v426 - 8;
          do
          {
            if (!v456) {
              return result;
            }
            unint64_t v458 = *(void *)(v457 + v456);
            unint64_t v459 = *(void *)(v455 + v456);
            v456 -= 8;
          }
          while (v458 == v459);
          if (v458 > v459) {
            return result;
          }
        }
        else if (!v427)
        {
          return result;
        }
      }
      else if ((uint64_t)(*(void *)(v206 + 24) << -(char)v209) >> -(char)v209 >= (uint64_t)(*v208 << -(char)v209) >> -(char)v209)
      {
        return result;
      }
      uint64_t v210 = *(void *)(v10 + 40);
      long long v211 = *v188;
      *uint64_t v188 = *v189;
      *(void *)(v10 + 40) = *(void *)(v10 + 64);
      *int v189 = v211;
      *(void *)(v10 + 64) = v210;
      uint64_t v212 = *(void *)(v10 + 24);
      uint64_t v213 = *(void *)(v10 + 8);
      v214 = (void *)(v213 + 24);
      uint64_t v215 = *(unsigned int *)(v212 + 32);
      if (v215 <= 0x40)
      {
        if ((uint64_t)(*(void *)(v212 + 24) << -(char)v215) >> -(char)v215 >= (uint64_t)(*v214 << -(char)v215) >> -(char)v215) {
          return result;
        }
        goto LABEL_218;
      }
      uint64_t v431 = *(void *)(v212 + 24);
      uint64_t v432 = *(void *)(v431 + 8 * ((v215 - 1) >> 6)) & (1 << (v215 - 1));
      unsigned int v433 = *(_DWORD *)(v213 + 32);
      unsigned int v434 = v433 - 1;
      uint64_t v435 = *(void *)(v213 + 24);
      if (v433 >= 0x41) {
        v214 = (void *)(v435 + 8 * (v434 >> 6));
      }
      if ((v432 != 0) == ((*v214 >> v434) & 1))
      {
        unint64_t v460 = v215 + 63;
        uint64_t v461 = v435 - 8;
        uint64_t v462 = (v460 >> 3) & 0x3FFFFFF8;
        uint64_t v463 = v431 - 8;
        do
        {
          if (!v462) {
            return result;
          }
          unint64_t v464 = *(void *)(v463 + v462);
          unint64_t v465 = *(void *)(v461 + v462);
          v462 -= 8;
        }
        while (v464 == v465);
        if (v464 <= v465)
        {
LABEL_218:
          uint64_t v477 = *(void *)(v10 + 16);
          long long v470 = *(_OWORD *)v10;
          *(_OWORD *)unint64_t v10 = *v188;
          *(void *)(v10 + 16) = *(void *)(v10 + 40);
          *uint64_t v188 = v470;
          *(void *)(v10 + 40) = v477;
          return result;
        }
      }
      else if (v432)
      {
        goto LABEL_218;
      }
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

long long *sub_1CD1C9998(long long *result, void *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *((void *)result + 1);
  BOOL v5 = (void *)(v4 + 24);
  uint64_t v6 = *(unsigned int *)(*a2 + 32);
  if (v6 > 0x40)
  {
    uint64_t v24 = *(void *)(v3 + 24);
    uint64_t v3 = *(void *)(v24 + 8 * ((v6 - 1) >> 6)) >> (v6 - 1);
    unsigned int v25 = *(_DWORD *)(v4 + 32);
    unsigned int v26 = v25 - 1;
    uint64_t v27 = *(void *)(v4 + 24);
    if (v25 >= 0x41) {
      BOOL v5 = (void *)(v27 + 8 * (v26 >> 6));
    }
    if (((v3 ^ (*v5 >> v26)) & 1) == 0)
    {
      uint64_t v28 = v27 - 8;
      unint64_t v29 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      uint64_t v30 = v24 - 8;
      while (v29)
      {
        unint64_t v31 = *(void *)(v30 + v29);
        unint64_t v32 = *(void *)(v28 + v29);
        v29 -= 8;
        if (v31 != v32)
        {
          LOBYTE(v3) = v31 <= v32;
          goto LABEL_3;
        }
      }
      LOBYTE(v3) = 0;
    }
  }
  else
  {
    LOBYTE(v3) = (uint64_t)(*(void *)(v3 + 24) << -(char)v6) >> -(char)v6 < (uint64_t)(*v5 << -(char)v6) >> -(char)v6;
  }
LABEL_3:
  uint64_t v7 = *a3;
  uint64_t v8 = a2[1];
  unint64_t v9 = (void *)(v8 + 24);
  uint64_t v10 = *(unsigned int *)(*a3 + 32);
  if (v10 > 0x40)
  {
    uint64_t v33 = *(void *)(v7 + 24);
    uint64_t v7 = *(void *)(v33 + 8 * ((v10 - 1) >> 6)) >> (v10 - 1);
    unsigned int v34 = *(_DWORD *)(v8 + 32);
    unsigned int v35 = v34 - 1;
    uint64_t v36 = *(void *)(v8 + 24);
    if (v34 >= 0x41) {
      unint64_t v9 = (void *)(v36 + 8 * (v35 >> 6));
    }
    if (((v7 ^ (*v9 >> v35)) & 1) == 0)
    {
      unint64_t v37 = v10 + 63;
      uint64_t v38 = v36 - 8;
      uint64_t v39 = (v37 >> 3) & 0x3FFFFFF8;
      uint64_t v40 = v33 - 8;
      while (v39)
      {
        unint64_t v41 = *(void *)(v40 + v39);
        unint64_t v42 = *(void *)(v38 + v39);
        v39 -= 8;
        if (v41 != v42)
        {
          LOBYTE(v7) = v41 <= v42;
          goto LABEL_5;
        }
      }
      if ((v3 & 1) == 0) {
        return result;
      }
      goto LABEL_28;
    }
  }
  else
  {
    LOBYTE(v7) = (uint64_t)(*(void *)(v7 + 24) << -(char)v10) >> -(char)v10 < (uint64_t)(*v9 << -(char)v10) >> -(char)v10;
  }
LABEL_5:
  if ((v3 & 1) == 0)
  {
    if ((v7 & 1) == 0) {
      return result;
    }
    uint64_t v14 = a2[2];
    long long v15 = *(_OWORD *)a2;
    uint64_t v16 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v16;
    *(_OWORD *)a3 = v15;
    a3[2] = v14;
    uint64_t v17 = *a2;
    uint64_t v18 = *((void *)result + 1);
    uint64_t v19 = (void *)(v18 + 24);
    uint64_t v20 = *(unsigned int *)(*a2 + 32);
    if (v20 > 0x40)
    {
      uint64_t v56 = *(void *)(v17 + 24);
      uint64_t v57 = *(void *)(v56 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
      unsigned int v58 = *(_DWORD *)(v18 + 32);
      unsigned int v59 = v58 - 1;
      uint64_t v60 = *(void *)(v18 + 24);
      if (v58 >= 0x41) {
        uint64_t v19 = (void *)(v60 + 8 * (v59 >> 6));
      }
      if ((v57 != 0) == ((*v19 >> v59) & 1))
      {
        unint64_t v67 = v20 + 63;
        uint64_t v68 = v60 - 8;
        uint64_t v69 = (v67 >> 3) & 0x3FFFFFF8;
        uint64_t v70 = v56 - 8;
        while (v69)
        {
          unint64_t v71 = *(void *)(v70 + v69);
          unint64_t v72 = *(void *)(v68 + v69);
          v69 -= 8;
          if (v71 != v72)
          {
            if (v71 <= v72) {
              goto LABEL_11;
            }
            return result;
          }
        }
        return result;
      }
      if (!v57) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20)
    {
      return result;
    }
LABEL_11:
    uint64_t v21 = *((void *)result + 2);
    long long v22 = *result;
    uint64_t v23 = a2[2];
    void *result = *(_OWORD *)a2;
    *((void *)result + 2) = v23;
    *(_OWORD *)a2 = v22;
    a2[2] = v21;
    return result;
  }
  if (v7)
  {
    uint64_t v11 = *((void *)result + 2);
    long long v12 = *result;
    uint64_t v13 = a3[2];
    void *result = *(_OWORD *)a3;
    *((void *)result + 2) = v13;
LABEL_31:
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    return result;
  }
LABEL_28:
  uint64_t v43 = *((void *)result + 2);
  long long v44 = *result;
  uint64_t v45 = a2[2];
  void *result = *(_OWORD *)a2;
  *((void *)result + 2) = v45;
  *(_OWORD *)a2 = v44;
  a2[2] = v43;
  uint64_t v46 = *a3;
  uint64_t v47 = a2[1];
  uint64_t v48 = (void *)(v47 + 24);
  uint64_t v49 = *(unsigned int *)(*a3 + 32);
  if (v49 <= 0x40)
  {
    if ((uint64_t)(*(void *)(v46 + 24) << -(char)v49) >> -(char)v49 >= (uint64_t)(*v48 << -(char)v49) >> -(char)v49) {
      return result;
    }
    goto LABEL_30;
  }
  uint64_t v51 = *(void *)(v46 + 24);
  uint64_t v52 = *(void *)(v51 + 8 * ((v49 - 1) >> 6)) & (1 << (v49 - 1));
  unsigned int v53 = *(_DWORD *)(v47 + 32);
  unsigned int v54 = v53 - 1;
  uint64_t v55 = *(void *)(v47 + 24);
  if (v53 >= 0x41) {
    uint64_t v48 = (void *)(v55 + 8 * (v54 >> 6));
  }
  if ((v52 != 0) == ((*v48 >> v54) & 1))
  {
    unint64_t v61 = v49 + 63;
    uint64_t v62 = v55 - 8;
    uint64_t v63 = (v61 >> 3) & 0x3FFFFFF8;
    uint64_t v64 = v51 - 8;
    while (v63)
    {
      unint64_t v65 = *(void *)(v64 + v63);
      unint64_t v66 = *(void *)(v62 + v63);
      v63 -= 8;
      if (v65 != v66)
      {
        if (v65 <= v66) {
          goto LABEL_30;
        }
        return result;
      }
    }
  }
  else if (v52)
  {
LABEL_30:
    uint64_t v11 = a2[2];
    long long v12 = *(_OWORD *)a2;
    uint64_t v50 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v50;
    goto LABEL_31;
  }
  return result;
}

BOOL sub_1CD1C9D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v7 = (long long *)(a2 - 24);
      uint64_t v6 = *(void *)(a2 - 24);
      uint64_t v8 = *(void *)(a1 + 8);
      unint64_t v9 = (void *)(v8 + 24);
      uint64_t v10 = *(unsigned int *)(v6 + 32);
      if (v10 <= 0x40)
      {
        if ((uint64_t)(*(void *)(v6 + 24) << -(char)v10) >> -(char)v10 >= (uint64_t)(*v9 << -(char)v10) >> -(char)v10) {
          return result;
        }
        goto LABEL_4;
      }
      uint64_t v77 = *(void *)(v6 + 24);
      uint64_t v78 = *(void *)(v77 + 8 * ((v10 - 1) >> 6)) & (1 << (v10 - 1));
      unsigned int v79 = *(_DWORD *)(v8 + 32);
      unsigned int v80 = v79 - 1;
      uint64_t v81 = *(void *)(v8 + 24);
      if (v79 >= 0x41) {
        unint64_t v9 = (void *)(v81 + 8 * (v80 >> 6));
      }
      if ((v78 != 0) != ((*v9 >> v80) & 1))
      {
        if (!v78) {
          return result;
        }
LABEL_4:
        uint64_t v11 = *(void *)(a1 + 16);
        long long v12 = *(_OWORD *)a1;
        uint64_t v13 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v7;
        *(void *)(a1 + 16) = v13;
        *uint64_t v7 = v12;
        *(void *)(a2 - 8) = v11;
        return 1;
      }
      unint64_t v102 = v10 + 63;
      uint64_t v103 = v81 - 8;
      uint64_t v104 = (v102 >> 3) & 0x3FFFFFF8;
      uint64_t v105 = v77 - 8;
      do
      {
        if (!v104) {
          return 1;
        }
        unint64_t v106 = *(void *)(v105 + v104);
        unint64_t v107 = *(void *)(v103 + v104);
        v104 -= 8;
      }
      while (v106 == v107);
      if (v106 <= v107) {
        goto LABEL_4;
      }
      return 1;
    case 3uLL:
      sub_1CD1C9998((long long *)a1, (void *)(a1 + 24), (void *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CD1CA4F8(a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a2 - 24));
      return 1;
    case 5uLL:
      uint64_t v47 = (long long *)(a1 + 24);
      uint64_t v48 = (long long *)(a1 + 48);
      uint64_t v49 = (long long *)(a1 + 72);
      sub_1CD1CA4F8(a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72));
      uint64_t v52 = *(void *)(a2 - 24);
      uint64_t v51 = a2 - 24;
      uint64_t v50 = v52;
      uint64_t v53 = *(void *)(a1 + 80);
      unsigned int v54 = (void *)(v53 + 24);
      uint64_t v55 = *(unsigned int *)(v52 + 32);
      if (v55 > 0x40)
      {
        uint64_t v82 = *(void *)(v50 + 24);
        uint64_t v83 = *(void *)(v82 + 8 * ((v55 - 1) >> 6)) & (1 << (v55 - 1));
        unsigned int v84 = *(_DWORD *)(v53 + 32);
        unsigned int v85 = v84 - 1;
        uint64_t v86 = *(void *)(v53 + 24);
        if (v84 >= 0x41) {
          unsigned int v54 = (void *)(v86 + 8 * (v85 >> 6));
        }
        if ((v83 != 0) == ((*v54 >> v85) & 1))
        {
          unint64_t v108 = v55 + 63;
          uint64_t v109 = v86 - 8;
          uint64_t v110 = (v108 >> 3) & 0x3FFFFFF8;
          uint64_t v111 = v82 - 8;
          do
          {
            if (!v110) {
              return 1;
            }
            unint64_t v112 = *(void *)(v111 + v110);
            unint64_t v113 = *(void *)(v109 + v110);
            v110 -= 8;
          }
          while (v112 == v113);
          if (v112 > v113) {
            return 1;
          }
        }
        else if (!v83)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(void *)(v50 + 24) << -(char)v55) >> -(char)v55 >= (uint64_t)(*v54 << -(char)v55) >> -(char)v55)
      {
        return 1;
      }
      uint64_t v56 = *(void *)(a1 + 88);
      long long v57 = *v49;
      uint64_t v58 = *(void *)(v51 + 16);
      *uint64_t v49 = *(_OWORD *)v51;
      *(void *)(a1 + 88) = v58;
      *(_OWORD *)uint64_t v51 = v57;
      *(void *)(v51 + 16) = v56;
      uint64_t v59 = *(void *)(a1 + 72);
      uint64_t v60 = *(void *)(a1 + 56);
      unint64_t v61 = (void *)(v60 + 24);
      uint64_t v62 = *(unsigned int *)(v59 + 32);
      if (v62 > 0x40)
      {
        uint64_t v87 = *(void *)(v59 + 24);
        uint64_t v88 = *(void *)(v87 + 8 * ((v62 - 1) >> 6)) & (1 << (v62 - 1));
        unsigned int v89 = *(_DWORD *)(v60 + 32);
        unsigned int v90 = v89 - 1;
        uint64_t v91 = *(void *)(v60 + 24);
        if (v89 >= 0x41) {
          unint64_t v61 = (void *)(v91 + 8 * (v90 >> 6));
        }
        if ((v88 != 0) == ((*v61 >> v90) & 1))
        {
          unint64_t v114 = v62 + 63;
          uint64_t v115 = v91 - 8;
          uint64_t v116 = (v114 >> 3) & 0x3FFFFFF8;
          uint64_t v117 = v87 - 8;
          do
          {
            if (!v116) {
              return 1;
            }
            unint64_t v118 = *(void *)(v117 + v116);
            unint64_t v119 = *(void *)(v115 + v116);
            v116 -= 8;
          }
          while (v118 == v119);
          if (v118 > v119) {
            return 1;
          }
        }
        else if (!v88)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(void *)(v59 + 24) << -(char)v62) >> -(char)v62 >= (uint64_t)(*v61 << -(char)v62) >> -(char)v62)
      {
        return 1;
      }
      uint64_t v63 = *(void *)(a1 + 64);
      long long v64 = *v48;
      long long *v48 = *v49;
      *(void *)(a1 + 64) = *(void *)(a1 + 88);
      *uint64_t v49 = v64;
      *(void *)(a1 + 88) = v63;
      uint64_t v65 = *(void *)(a1 + 48);
      uint64_t v66 = *(void *)(a1 + 32);
      unint64_t v67 = (void *)(v66 + 24);
      uint64_t v68 = *(unsigned int *)(v65 + 32);
      if (v68 > 0x40)
      {
        uint64_t v92 = *(void *)(v65 + 24);
        uint64_t v93 = *(void *)(v92 + 8 * ((v68 - 1) >> 6)) & (1 << (v68 - 1));
        unsigned int v94 = *(_DWORD *)(v66 + 32);
        unsigned int v95 = v94 - 1;
        uint64_t v96 = *(void *)(v66 + 24);
        if (v94 >= 0x41) {
          unint64_t v67 = (void *)(v96 + 8 * (v95 >> 6));
        }
        if ((v93 != 0) == ((*v67 >> v95) & 1))
        {
          unint64_t v120 = v68 + 63;
          uint64_t v121 = v96 - 8;
          uint64_t v122 = (v120 >> 3) & 0x3FFFFFF8;
          uint64_t v123 = v92 - 8;
          do
          {
            if (!v122) {
              return 1;
            }
            unint64_t v124 = *(void *)(v123 + v122);
            unint64_t v125 = *(void *)(v121 + v122);
            v122 -= 8;
          }
          while (v124 == v125);
          if (v124 > v125) {
            return 1;
          }
        }
        else if (!v93)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(void *)(v65 + 24) << -(char)v68) >> -(char)v68 >= (uint64_t)(*v67 << -(char)v68) >> -(char)v68)
      {
        return 1;
      }
      uint64_t v69 = *(void *)(a1 + 40);
      long long v70 = *v47;
      *uint64_t v47 = *v48;
      *(void *)(a1 + 40) = *(void *)(a1 + 64);
      long long *v48 = v70;
      *(void *)(a1 + 64) = v69;
      uint64_t v71 = *(void *)(a1 + 24);
      uint64_t v72 = *(void *)(a1 + 8);
      uint64_t v73 = (void *)(v72 + 24);
      uint64_t v74 = *(unsigned int *)(v71 + 32);
      if (v74 <= 0x40)
      {
        if ((uint64_t)(*(void *)(v71 + 24) << -(char)v74) >> -(char)v74 >= (uint64_t)(*v73 << -(char)v74) >> -(char)v74) {
          return 1;
        }
        goto LABEL_47;
      }
      uint64_t v97 = *(void *)(v71 + 24);
      uint64_t v98 = *(void *)(v97 + 8 * ((v74 - 1) >> 6)) & (1 << (v74 - 1));
      unsigned int v99 = *(_DWORD *)(v72 + 32);
      unsigned int v100 = v99 - 1;
      uint64_t v101 = *(void *)(v72 + 24);
      if (v99 >= 0x41) {
        uint64_t v73 = (void *)(v101 + 8 * (v100 >> 6));
      }
      if ((v98 != 0) == ((*v73 >> v100) & 1))
      {
        unint64_t v126 = v74 + 63;
        uint64_t v127 = v101 - 8;
        uint64_t v128 = (v126 >> 3) & 0x3FFFFFF8;
        uint64_t v129 = v97 - 8;
        do
        {
          if (!v128) {
            return 1;
          }
          unint64_t v130 = *(void *)(v129 + v128);
          unint64_t v131 = *(void *)(v127 + v128);
          v128 -= 8;
        }
        while (v130 == v131);
        if (v130 <= v131)
        {
LABEL_47:
          uint64_t v75 = *(void *)(a1 + 16);
          long long v76 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v47;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *uint64_t v47 = v76;
          *(void *)(a1 + 40) = v75;
        }
      }
      else if (v98)
      {
        goto LABEL_47;
      }
      return 1;
    default:
      uint64_t v14 = a1 + 48;
      sub_1CD1C9998((long long *)a1, (void *)(a1 + 24), (void *)(a1 + 48));
      uint64_t v15 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      int v16 = 0;
      while (2)
      {
        uint64_t v17 = *(void *)v15;
        uint64_t v18 = *(void *)(v14 + 8);
        uint64_t v19 = (void *)(v18 + 24);
        uint64_t v20 = *(unsigned int *)(*(void *)v15 + 32);
        if (v20 > 0x40)
        {
          uint64_t v36 = *(void *)(v17 + 24);
          uint64_t v37 = *(void *)(v36 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
          unsigned int v38 = *(_DWORD *)(v18 + 32);
          unsigned int v39 = v38 - 1;
          uint64_t v40 = *(void *)(v18 + 24);
          if (v38 >= 0x41) {
            uint64_t v19 = (void *)(v40 + 8 * (v39 >> 6));
          }
          if ((v37 != 0) == ((*v19 >> v39) & 1))
          {
            unint64_t v41 = v20 + 63;
            uint64_t v42 = v40 - 8;
            uint64_t v43 = (v41 >> 3) & 0x3FFFFFF8;
            uint64_t v44 = v36 - 8;
            do
            {
              if (!v43) {
                goto LABEL_25;
              }
              unint64_t v45 = *(void *)(v44 + v43);
              unint64_t v46 = *(void *)(v42 + v43);
              v43 -= 8;
            }
            while (v45 == v46);
            if (v45 > v46)
            {
LABEL_25:
              uint64_t v14 = v15;
              v15 += 24;
              if (v15 == a2) {
                return 1;
              }
              continue;
            }
          }
          else if (!v37)
          {
            goto LABEL_25;
          }
        }
        else if ((uint64_t)(*(void *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20)
        {
          goto LABEL_25;
        }
        break;
      }
      long long v132 = *(_OWORD *)(v15 + 8);
      *(void *)(v15 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
      uint64_t v21 = a1;
      if (v14 == a1) {
        goto LABEL_24;
      }
      while (2)
      {
        uint64_t v22 = *(void *)(v14 - 16);
        uint64_t v23 = (void *)(v22 + 24);
        uint64_t v24 = *(unsigned int *)(v17 + 32);
        if (v24 <= 0x40)
        {
          if ((uint64_t)(*(void *)(v17 + 24) << -(char)v24) >> -(char)v24 >= (uint64_t)(*v23 << -(char)v24) >> -(char)v24) {
            goto LABEL_23;
          }
LABEL_12:
          *(_OWORD *)uint64_t v14 = *(_OWORD *)(v14 - 24);
          *(void *)(v14 + 16) = *(void *)(v14 - 8);
          v14 -= 24;
          if (v14 == a1)
          {
            uint64_t v21 = a1;
            goto LABEL_24;
          }
          continue;
        }
        break;
      }
      uint64_t v25 = *(void *)(v17 + 24);
      uint64_t v26 = *(void *)(v25 + 8 * ((v24 - 1) >> 6)) & (1 << (v24 - 1));
      unsigned int v27 = *(_DWORD *)(v22 + 32);
      unsigned int v28 = v27 - 1;
      uint64_t v29 = *(void *)(v22 + 24);
      if (v27 >= 0x41) {
        uint64_t v23 = (void *)(v29 + 8 * (v28 >> 6));
      }
      if ((v26 != 0) != ((*v23 >> v28) & 1))
      {
        if (!v26) {
          goto LABEL_23;
        }
        goto LABEL_12;
      }
      unint64_t v30 = v24 + 63;
      uint64_t v31 = v29 - 8;
      uint64_t v32 = (v30 >> 3) & 0x3FFFFFF8;
      uint64_t v33 = v25 - 8;
      while (v32)
      {
        unint64_t v34 = *(void *)(v33 + v32);
        unint64_t v35 = *(void *)(v31 + v32);
        v32 -= 8;
        if (v34 != v35)
        {
          if (v34 <= v35) {
            goto LABEL_12;
          }
          break;
        }
      }
LABEL_23:
      uint64_t v21 = v14;
LABEL_24:
      *(void *)uint64_t v21 = v17;
      *(_OWORD *)(v21 + 8) = v132;
      if (++v16 != 8) {
        goto LABEL_25;
      }
      return v15 + 24 == a2;
  }
}

long long *sub_1CD1CA4F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  BOOL result = sub_1CD1C9998((long long *)a1, a2, a3);
  uint64_t v9 = *a4;
  uint64_t v10 = a3[1];
  uint64_t v11 = (void *)(v10 + 24);
  uint64_t v12 = *(unsigned int *)(*a4 + 32);
  if (v12 > 0x40)
  {
    uint64_t v30 = *(void *)(v9 + 24);
    uint64_t v31 = *(void *)(v30 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
    unsigned int v32 = *(_DWORD *)(v10 + 32);
    unsigned int v33 = v32 - 1;
    uint64_t v34 = *(void *)(v10 + 24);
    if (v32 >= 0x41) {
      uint64_t v11 = (void *)(v34 + 8 * (v33 >> 6));
    }
    if ((v31 != 0) == ((*v11 >> v33) & 1))
    {
      unint64_t v45 = v12 + 63;
      uint64_t v46 = v34 - 8;
      uint64_t v47 = (v45 >> 3) & 0x3FFFFFF8;
      uint64_t v48 = v30 - 8;
      while (v47)
      {
        unint64_t v49 = *(void *)(v48 + v47);
        unint64_t v50 = *(void *)(v46 + v47);
        v47 -= 8;
        if (v49 != v50)
        {
          if (v49 <= v50) {
            goto LABEL_3;
          }
          return result;
        }
      }
      return result;
    }
    if (!v31) {
      return result;
    }
  }
  else if ((uint64_t)(*(void *)(v9 + 24) << -(char)v12) >> -(char)v12 >= (uint64_t)(*v11 << -(char)v12) >> -(char)v12)
  {
    return result;
  }
LABEL_3:
  uint64_t v13 = a3[2];
  long long v14 = *(_OWORD *)a3;
  uint64_t v15 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v15;
  *(_OWORD *)a4 = v14;
  a4[2] = v13;
  uint64_t v16 = *a3;
  uint64_t v17 = a2[1];
  uint64_t v18 = (void *)(v17 + 24);
  uint64_t v19 = *(unsigned int *)(*a3 + 32);
  if (v19 > 0x40)
  {
    uint64_t v35 = *(void *)(v16 + 24);
    uint64_t v36 = *(void *)(v35 + 8 * ((v19 - 1) >> 6)) & (1 << (v19 - 1));
    unsigned int v37 = *(_DWORD *)(v17 + 32);
    unsigned int v38 = v37 - 1;
    uint64_t v39 = *(void *)(v17 + 24);
    if (v37 >= 0x41) {
      uint64_t v18 = (void *)(v39 + 8 * (v38 >> 6));
    }
    if ((v36 != 0) == ((*v18 >> v38) & 1))
    {
      unint64_t v51 = v19 + 63;
      uint64_t v52 = v39 - 8;
      uint64_t v53 = (v51 >> 3) & 0x3FFFFFF8;
      uint64_t v54 = v35 - 8;
      while (v53)
      {
        unint64_t v55 = *(void *)(v54 + v53);
        unint64_t v56 = *(void *)(v52 + v53);
        v53 -= 8;
        if (v55 != v56)
        {
          if (v55 <= v56) {
            goto LABEL_5;
          }
          return result;
        }
      }
      return result;
    }
    if (!v36) {
      return result;
    }
  }
  else if ((uint64_t)(*(void *)(v16 + 24) << -(char)v19) >> -(char)v19 >= (uint64_t)(*v18 << -(char)v19) >> -(char)v19)
  {
    return result;
  }
LABEL_5:
  uint64_t v20 = a2[2];
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v22;
  *(_OWORD *)a3 = v21;
  a3[2] = v20;
  uint64_t v23 = *a2;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v25 = (void *)(v24 + 24);
  uint64_t v26 = *(unsigned int *)(*a2 + 32);
  if (v26 <= 0x40)
  {
    if ((uint64_t)(*(void *)(v23 + 24) << -(char)v26) >> -(char)v26 >= (uint64_t)(*v25 << -(char)v26) >> -(char)v26) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v40 = *(void *)(v23 + 24);
  uint64_t v41 = *(void *)(v40 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
  unsigned int v42 = *(_DWORD *)(v24 + 32);
  unsigned int v43 = v42 - 1;
  uint64_t v44 = *(void *)(v24 + 24);
  if (v42 >= 0x41) {
    uint64_t v25 = (void *)(v44 + 8 * (v43 >> 6));
  }
  if ((v41 != 0) == ((*v25 >> v43) & 1))
  {
    unint64_t v57 = v26 + 63;
    uint64_t v58 = v44 - 8;
    uint64_t v59 = (v57 >> 3) & 0x3FFFFFF8;
    uint64_t v60 = v40 - 8;
    while (v59)
    {
      unint64_t v61 = *(void *)(v60 + v59);
      unint64_t v62 = *(void *)(v58 + v59);
      v59 -= 8;
      if (v61 != v62)
      {
        if (v61 <= v62) {
          goto LABEL_7;
        }
        return result;
      }
    }
  }
  else if (v41)
  {
LABEL_7:
    uint64_t v27 = *(void *)(a1 + 16);
    long long v28 = *(_OWORD *)a1;
    uint64_t v29 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v29;
    *(_OWORD *)a2 = v28;
    a2[2] = v27;
  }
  return result;
}

void llvm::TileInfo::CreateLoop()
{
}

BOOL llvm::MemoryOpRemark::canHandle(uint64_t a1, uint64_t *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 61) {
    return 1;
  }
  if (v2 != 84) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 - 32);
  if (!v4 || *(unsigned char *)(v4 + 16) || *(void *)(v4 + 24) != *(void *)(a1 + 72)) {
    return 0;
  }
  if ((*(unsigned char *)(v4 + 33) & 0x20) != 0) {
    return (*(_DWORD *)(v4 + 36) - 194) < 7;
  }
  if ((*(unsigned char *)(v4 + 23) & 0x10) == 0) {
    return 0;
  }
  unsigned int v7 = 0;
  BOOL LibFunc = llvm::TargetLibraryInfoImpl::getLibFunc(*a2, (uint64_t ***)v4, &v7);
  BOOL result = 0;
  if (LibFunc)
  {
    if (((*(void *)(a2[1] + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0
      || ((*(unsigned __int8 *)(*a2 + ((unint64_t)v7 >> 2)) >> (2 * (v7 & 3))) & 3) == 0)
    {
      return 0;
    }
    BOOL result = 1;
    if (v7 - 103 >= 4 && (v7 - 322 > 4 || v7 == 325) && v7 - 169 >= 2) {
      return 0;
    }
  }
  return result;
}

void llvm::MemoryOpRemark::visit(llvm::MemoryOpRemark *this, llvm::Instruction *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || v2 != 61)
  {
    if (v2 == 84)
    {
      uint64_t v3 = *((void *)a2 - 4);
      if (v3
        && !*(unsigned char *)(v3 + 16)
        && *(void *)(v3 + 24) == *((void *)a2 + 9)
        && (*(unsigned char *)(v3 + 33) & 0x20) != 0)
      {
        llvm::MemoryOpRemark::visitIntrinsicCall(this, a2);
      }
      llvm::MemoryOpRemark::visitCall(this, a2);
    }
    llvm::MemoryOpRemark::visitUnknown(this, a2);
  }
  llvm::MemoryOpRemark::visitStore(this, a2);
}

void llvm::MemoryOpRemark::visitIntrinsicCall(llvm::MemoryOpRemark *this, llvm::Instruction *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  long long v10 = xmmword_1CDC7F9D0;
  char v8 = 0;
  switch(*(_DWORD *)(*((void *)a2 - 4) + 36))
  {
    case 0xC2:
      LOWORD(v11[1]) = 31088;
      int v3 = 1668113773;
      goto LABEL_9;
    case 0xC3:
      LOWORD(v11[1]) = 31088;
      int v6 = 1668113773;
      goto LABEL_12;
    case 0xC4:
      qmemcpy(v11, "memcpy", 6);
      *(void *)&long long v10 = 6;
      char v8 = 1;
      break;
    case 0xC5:
      qmemcpy(v11, "memmove", 7);
      uint64_t v4 = 7;
      goto LABEL_10;
    case 0xC6:
      qmemcpy(v11, "memmove", 7);
      uint64_t v5 = 7;
      goto LABEL_13;
    case 0xC7:
      LOWORD(v11[1]) = 29797;
      int v3 = 1936549229;
LABEL_9:
      v11[0] = v3;
      uint64_t v4 = 6;
LABEL_10:
      *(void *)&long long v10 = v4;
      break;
    case 0xC8:
      LOWORD(v11[1]) = 29797;
      int v6 = 1936549229;
LABEL_12:
      v11[0] = v6;
      uint64_t v5 = 6;
LABEL_13:
      *(void *)&long long v10 = v5;
      break;
    default:
      llvm::MemoryOpRemark::visitUnknown(this, a2);
  }
  (*(void (**)(llvm::MemoryOpRemark *, uint64_t))(*(void *)this + 24))(this, 2);
  sub_1CD8897BC((uint64_t)&v7, (uint64_t)this);
}

void sub_1CD1CB59C(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  if (a1 && *a1)
  {
    unint64_t v45 = " Inlined: ";
    uint64_t v46 = 10;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    char v40 = 12;
    strcpy((char *)&v39, "StoreInlined");
    char v42 = 4;
    strcpy((char *)v41, "true");
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    sub_1CD3D6290(a4, &v39);
    unint64_t v45 = ".";
    uint64_t v46 = 1;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    if (v40 < 0) {
      operator delete((void *)v39);
    }
  }
  if (a2)
  {
    unint64_t v45 = " Volatile: ";
    uint64_t v46 = 11;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    char v34 = 13;
    strcpy((char *)&v33, "StoreVolatile");
    char v36 = 4;
    strcpy((char *)v35, "true");
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    sub_1CD3D6290(a4, &v33);
    unint64_t v45 = ".";
    uint64_t v46 = 1;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (v34 < 0) {
      operator delete((void *)v33);
    }
  }
  if (a3)
  {
    unint64_t v45 = " Atomic: ";
    uint64_t v46 = 9;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    char v28 = 11;
    strcpy((char *)&v27, "StoreAtomic");
    char v30 = 4;
    strcpy((char *)v29, "true");
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    sub_1CD3D6290(a4, &v27);
    unint64_t v45 = ".";
    uint64_t v46 = 1;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (v28 < 0) {
      operator delete((void *)v27);
    }
  }
  if (a1)
  {
    int v8 = *a1;
    if (!*a1 || !a3 || (a2 & 1) == 0)
    {
      *(_DWORD *)(a4 + 356) = *(_DWORD *)(a4 + 88);
      if (!v8)
      {
        unint64_t v45 = " Inlined: ";
        uint64_t v46 = 10;
        sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
        char v22 = 12;
        strcpy((char *)&v21, "StoreInlined");
        char v24 = 5;
        strcpy((char *)__p, "false");
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        sub_1CD3D6290(a4, &v21);
        unint64_t v45 = ".";
        uint64_t v46 = 1;
        sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete((void *)v21);
        }
      }
    }
  }
  else if (!a2 || (a3 & 1) == 0)
  {
    *(_DWORD *)(a4 + 356) = *(_DWORD *)(a4 + 88);
  }
  if ((a2 & 1) == 0)
  {
    unint64_t v45 = " Volatile: ";
    uint64_t v46 = 11;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    char v16 = 13;
    strcpy((char *)&v15, "StoreVolatile");
    char v18 = 5;
    strcpy((char *)v17, "false");
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    sub_1CD3D6290(a4, &v15);
    unint64_t v45 = ".";
    uint64_t v46 = 1;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v16 < 0) {
      operator delete((void *)v15);
    }
  }
  if ((a3 & 1) == 0)
  {
    unint64_t v45 = " Atomic: ";
    uint64_t v46 = 9;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    char v10 = 11;
    strcpy((char *)&v9, "StoreAtomic");
    char v12 = 5;
    strcpy((char *)v11, "false");
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_1CD3D6290(a4, &v9);
    unint64_t v45 = ".";
    uint64_t v46 = 1;
    sub_1CC59ADEC((uint64_t *)(a4 + 80), (uint64_t)&v45);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v10 < 0) {
      operator delete((void *)v9);
    }
  }
}

__n128 llvm::MemoryOpRemark::visitVariable(uint64_t a1, llvm *this, uint64_t a3)
{
  if (this && *((unsigned char *)this + 16) == 3)
  {
    uint64_t v27 = sub_1CB83544C(*(void *)(a1 + 32), *((void *)this + 3));
    if ((*((unsigned char *)this + 23) & 0x10) == 0)
    {
      char v28 = 0;
      LOBYTE(v54) = 0;
LABEL_48:
      char v56 = v28;
      unint64_t v57 = v27;
      LOBYTE(v58) = 1;
LABEL_51:
      unint64_t v49 = sub_1CC47EC6C(a3, (unint64_t)&v54);
      uint64_t v50 = *(void *)a3 + 40 * *(unsigned int *)(a3 + 8);
      uint64_t v51 = *(void *)(v49 + 32);
      __n128 result = *(__n128 *)(v49 + 16);
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v49;
      *(__n128 *)(v50 + 16) = result;
      *(void *)(v50 + 32) = v51;
      ++*(_DWORD *)(a3 + 8);
      return result;
    }
    uint64_t v29 = ***(void ***)this;
    uint64_t v30 = *(void *)(v29 + 152);
    uint64_t v31 = *(unsigned int *)(v29 + 168);
    if (v31)
    {
      LODWORD(v32) = (v31 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v33 = v30 + 16 * v32;
      char v34 = *(llvm **)v33;
      if (*(llvm **)v33 == this)
      {
LABEL_47:
        unint64_t v45 = *(uint64_t **)(v33 + 8);
        uint64_t v46 = *v45;
        uint64_t v54 = v45 + 2;
        uint64_t v55 = v46;
        char v28 = 1;
        goto LABEL_48;
      }
      int v35 = 1;
      while (v34 != (llvm *)-4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v31 - 1);
        char v34 = *(llvm **)(v30 + 16 * v32);
        if (v34 == this)
        {
          uint64_t v33 = v30 + 16 * v32;
          goto LABEL_47;
        }
      }
    }
    uint64_t v33 = v30 + 16 * v31;
    goto LABEL_47;
  }
  int v6 = v52;
  llvm::FindDbgAddrUses((uint64_t)this, v52);
  if ((v52[0] & 4) != 0)
  {
    int v6 = *(unint64_t **)(v52[0] & 0xFFFFFFFFFFFFFFF8);
    uint64_t v7 = &v6[*(unsigned int *)((v52[0] & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    uint64_t v7 = &v52[v52[0] > 7];
  }
  if (v6 == v7)
  {
    sub_1CBFA5CA8(v52);
    if (!this) {
      return result;
    }
LABEL_22:
    if (*((unsigned char *)this + 16) != 59) {
      return result;
    }
    llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)this, *(const llvm::DataLayout **)(a1 + 32), (uint64_t)v52);
    if (v53)
    {
      BOOL v24 = (v52[0] & 7) == 0;
      if ((v52[0] & 7) != 0) {
        unint64_t v25 = 0;
      }
      else {
        unint64_t v25 = v52[0] >> 3;
      }
      uint64_t v26 = v25 & 0x1FFFFFFFFFFFFF00;
      unint64_t v25 = v25;
    }
    else
    {
      BOOL v24 = 0;
      unint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    if ((*((unsigned char *)this + 23) & 0x10) == 0)
    {
      LOBYTE(v54) = 0;
      char v56 = 0;
      unint64_t v57 = v26 | v25;
      BOOL v58 = v24;
      if (!v24) {
        return result;
      }
      goto LABEL_51;
    }
    uint64_t v37 = ***(void ***)this;
    uint64_t v38 = *(void *)(v37 + 152);
    uint64_t v39 = *(unsigned int *)(v37 + 168);
    if (v39)
    {
      LODWORD(v40) = (v39 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v41 = v38 + 16 * v40;
      char v42 = *(llvm **)v41;
      if (*(llvm **)v41 == this)
      {
LABEL_50:
        uint64_t v47 = *(uint64_t **)(v41 + 8);
        uint64_t v48 = *v47;
        uint64_t v54 = v47 + 2;
        uint64_t v55 = v48;
        char v56 = 1;
        unint64_t v57 = v26 | v25;
        BOOL v58 = v24;
        goto LABEL_51;
      }
      int v43 = 1;
      while (v42 != (llvm *)-4096)
      {
        int v44 = v40 + v43++;
        uint64_t v40 = v44 & (v39 - 1);
        char v42 = *(llvm **)(v38 + 16 * v40);
        if (v42 == this)
        {
          uint64_t v41 = v38 + 16 * v40;
          goto LABEL_50;
        }
      }
    }
    uint64_t v41 = v38 + 16 * v39;
    goto LABEL_50;
  }
  char v8 = 0;
  do
  {
    while (1)
    {
      uint64_t v9 = *(void *)(*v6 - 32 * (*(_DWORD *)(*v6 + 20) & 0x7FFFFFF) + 32);
      uint64_t v10 = *(void *)(v9 + 24);
      if (!v10) {
        break;
      }
      unint64_t SizeInBits = llvm::DIVariable::getSizeInBits(*(llvm::DIVariable **)(v9 + 24));
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      if (v12 != 0 && (SizeInBits & 7) == 0) {
        unint64_t v15 = SizeInBits >> 3;
      }
      else {
        unint64_t v15 = 0;
      }
      uint64_t v16 = *(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8);
      if (v16)
      {
        uint64_t v17 = *(uint64_t **)(v16 + 8);
        uint64_t v18 = *v17;
        uint64_t v14 = v17 + 3;
        uint64_t v13 = v18;
      }
      uint64_t v54 = v14;
      uint64_t v55 = v13;
      char v8 = 1;
      char v56 = 1;
      unint64_t v57 = v15;
      BOOL v58 = (v12 != 0) & ((SizeInBits & 7) == 0);
      unint64_t v19 = sub_1CC47EC6C(a3, (unint64_t)&v54);
      uint64_t v20 = *(void *)a3 + 40 * *(unsigned int *)(a3 + 8);
      uint64_t v21 = *(void *)(v19 + 32);
      long long v22 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v19;
      *(_OWORD *)(v20 + 16) = v22;
      *(void *)(v20 + 32) = v21;
      ++*(_DWORD *)(a3 + 8);
      if (++v6 == v7)
      {
        sub_1CBFA5CA8(v52);
        return result;
      }
    }
    ++v6;
  }
  while (v6 != v7);
  sub_1CBFA5CA8(v52);
  if ((v8 & 1) == 0 && this) {
    goto LABEL_22;
  }
  return result;
}

uint64_t llvm::AutoInitRemark::canHandle(uint64_t ***this, const llvm::Instruction *a2)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = ***this;
  int v44 = (llvm::AutoInitRemark *)this;
  int v4 = *(_DWORD *)(v3 + 2496);
  unsigned int v5 = this >> 4;
  if (!v4)
  {
    uint64_t v40 = 0;
LABEL_48:
    uint64_t v9 = (llvm::AutoInitRemark **)sub_1CC609054(v3 + 2480, (uint64_t)&v44, (uint64_t *)&v44, v40);
    uint64_t v41 = v44;
    v9[3] = 0;
    v9[4] = 0;
    *uint64_t v9 = v41;
    v9[1] = (llvm::AutoInitRemark *)(v9 + 3);
    v9[2] = (llvm::AutoInitRemark *)0x100000000;
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v3 + 2480);
  int v7 = v4 - 1;
  unsigned int v8 = v7 & (v5 ^ (this >> 9));
  uint64_t v9 = (llvm::AutoInitRemark **)(v6 + 40 * v8);
  uint64_t v10 = *v9;
  if (*v9 != (llvm::AutoInitRemark *)this)
  {
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != (llvm::AutoInitRemark *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (llvm::AutoInitRemark *)-8192;
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      uint64_t v9 = (llvm::AutoInitRemark **)(v6 + 40 * v8);
      uint64_t v10 = *v9;
      if (*v9 == (llvm::AutoInitRemark *)this) {
        goto LABEL_12;
      }
    }
    if (v11) {
      uint64_t v40 = v11;
    }
    else {
      uint64_t v40 = v9;
    }
    goto LABEL_48;
  }
LABEL_12:
  uint64_t v15 = *((unsigned int *)v9 + 4);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = (void *)((char *)v9[1] + 8);
  uint64_t v17 = 16 * v15;
  while (*((_DWORD *)v16 - 2) != 30)
  {
    uint64_t result = 0;
    v16 += 2;
    v17 -= 16;
    if (!v17) {
      return result;
    }
  }
  if (!*v16) {
    return 0;
  }
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_34;
  }
  uint64_t v19 = ***this;
  int v44 = (llvm::AutoInitRemark *)this;
  int v20 = *(_DWORD *)(v19 + 2496);
  if (v20)
  {
    uint64_t v21 = *(void *)(v19 + 2480);
    int v22 = v20 - 1;
    unsigned int v23 = v22 & (v5 ^ (this >> 9));
    BOOL v24 = (llvm::AutoInitRemark **)(v21 + 40 * v23);
    unint64_t v25 = *v24;
    if (*v24 == (llvm::AutoInitRemark *)this) {
      goto LABEL_29;
    }
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != (llvm::AutoInitRemark *)-4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == (llvm::AutoInitRemark *)-8192;
      }
      if (v28) {
        uint64_t v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      BOOL v24 = (llvm::AutoInitRemark **)(v21 + 40 * v23);
      unint64_t v25 = *v24;
      if (*v24 == (llvm::AutoInitRemark *)this) {
        goto LABEL_29;
      }
    }
    if (v26) {
      char v42 = v26;
    }
    else {
      char v42 = v24;
    }
  }
  else
  {
    char v42 = 0;
  }
  BOOL v24 = (llvm::AutoInitRemark **)sub_1CC609054(v19 + 2480, (uint64_t)&v44, (uint64_t *)&v44, v42);
  int v43 = v44;
  v24[3] = 0;
  v24[4] = 0;
  *BOOL v24 = v43;
  v24[1] = (llvm::AutoInitRemark *)(v24 + 3);
  v24[2] = (llvm::AutoInitRemark *)0x100000000;
LABEL_29:
  uint64_t v30 = *((unsigned int *)v24 + 4);
  if (!v30)
  {
LABEL_34:
    uint64_t v33 = 0;
    goto LABEL_35;
  }
  uint64_t v31 = (void *)((char *)v24[1] + 8);
  uint64_t v32 = 16 * v30;
  while (*((_DWORD *)v31 - 2) != 30)
  {
    uint64_t v33 = 0;
    v31 += 2;
    v32 -= 16;
    if (!v32) {
      goto LABEL_35;
    }
  }
  uint64_t v33 = *v31;
LABEL_35:
  uint64_t v34 = *(unsigned int *)(v33 + 8);
  if (!v34) {
    return 0;
  }
  uint64_t v35 = -8 * v34;
  while (1)
  {
    uint64_t v36 = *(void *)(*(void *)(v33 + v35) + 8);
    if (*(void *)v36 == 9)
    {
      uint64_t v37 = *(void *)(v36 + 24);
      int v38 = *(unsigned __int8 *)(v36 + 32);
      if (v37 == 0x696E692D6F747561 && v38 == 116) {
        break;
      }
    }
    uint64_t result = 0;
    v35 += 8;
    if (!v35) {
      return result;
    }
  }
  return 1;
}

uint64_t llvm::memtag::forAllReachableExits(llvm::DominatorTree *a1, llvm::PostDominatorTree *this, llvm::Instruction *a3, const llvm::Instruction ***a4, uint64_t a5, void (*a6)(uint64_t, const llvm::Instruction *), uint64_t a7)
{
  v33[8] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a4 + 2) == 1 && llvm::PostDominatorTree::dominates(this, **a4, a3))
  {
    a6(a7, **a4);
    return 1;
  }
  else
  {
    unsigned int v32 = 0;
    uint64_t v13 = *(unsigned int *)(a5 + 8);
    if (!v13) {
      goto LABEL_18;
    }
    uint64_t v31 = a6;
    int v14 = 0;
    uint64_t v15 = *(uint64_t **)a5;
    uint64_t v16 = *(void *)a5 + 8 * v13;
    do
    {
      uint64_t v17 = (const llvm::Instruction *)*v15;
      if (llvm::isPotentiallyReachable((uint64_t)a3, *v15, 0, (uint64_t)a1, 0))
      {
        if (v32 >= 8uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v33[v32++] = v17;
        uint64_t v18 = *((unsigned int *)a4 + 2);
        if (v18)
        {
          uint64_t v19 = *a4;
          uint64_t v20 = 8 * v18;
          while (!llvm::DominatorTree::dominates(a1, *v19, v17))
          {
            ++v19;
            v20 -= 8;
            if (!v20)
            {
              LODWORD(v18) = 0;
              goto LABEL_12;
            }
          }
          LODWORD(v18) = 1;
        }
LABEL_12:
        v14 += v18;
      }
      ++v15;
    }
    while (v15 != (uint64_t *)v16);
    BOOL v21 = v32 == v14;
    a6 = v31;
    if (v21)
    {
LABEL_18:
      uint64_t v22 = *((unsigned int *)a4 + 2);
      if (v22)
      {
        unsigned int v23 = *a4;
        uint64_t v24 = 8 * v22;
        do
        {
          unint64_t v25 = *v23++;
          a6(a7, v25);
          v24 -= 8;
        }
        while (v24);
      }
      return 1;
    }
    else
    {
      if (v32)
      {
        int v27 = v33;
        uint64_t v28 = 8 * v32;
        do
        {
          unsigned int v29 = (const llvm::Instruction *)*v27++;
          v31(a7, v29);
          v28 -= 8;
        }
        while (v28);
      }
      return 0;
    }
  }
}

uint64_t llvm::memtag::getUntagLocationIfFunctionExit(uint64_t this, llvm::Instruction *a2)
{
  uint64_t v2 = this;
  int v3 = *(unsigned __int8 *)(this + 16);
  if (v3 == 29)
  {
    this = llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(this + 40));
    if (!this) {
      return v2;
    }
  }
  else if (v3 != 36 && v3 != 34)
  {
    return 0;
  }
  return this;
}

uint64_t llvm::memtag::StackInfoBuilder::visit(llvm::memtag::StackInfoBuilder *this, llvm::Instruction *a2)
{
  uint64_t v2 = a2;
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 84)
  {
    uint64_t v5 = *((void *)a2 + 8);
    if (v5 && *(char *)(v5 + 17) < 0 || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 47)) {
      *((unsigned char *)this + 176) = 1;
    }
    int v4 = *((unsigned __int8 *)v2 + 16);
  }
  if (v4 == 59) {
    uint64_t v6 = (uint64_t)v2;
  }
  else {
    uint64_t v6 = 0;
  }
  v27[0] = v6;
  if (v4 == 59)
  {
    uint64_t v7 = *((void *)this + 26);
    if (v7)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, llvm::Instruction *))(*(void *)v7 + 48))(v7, v2);
      if (result)
      {
        uint64_t result = sub_1CD88A1BC((uint64_t)this, v27);
        *(void *)uint64_t result = v2;
      }
      return result;
    }
    goto LABEL_59;
  }
  if (v4 == 84)
  {
    uint64_t v9 = *((void *)v2 - 4);
    if (v9)
    {
      if (!*(unsigned char *)(v9 + 16)
        && *(void *)(v9 + 24) == *((void *)v2 + 9)
        && (*(unsigned char *)(v9 + 33) & 0x20) != 0
        && (*(_DWORD *)(v9 + 36) - 167) <= 1)
      {
        uint64_t result = llvm::findAllocaForValue(((llvm **)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF))[4], 0);
        v27[0] = result;
        if (result)
        {
          uint64_t v10 = result;
          uint64_t v11 = *((void *)this + 26);
          if (!v11)
          {
LABEL_59:
            sub_1CB920400();
LABEL_60:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v10);
          if (!result) {
            return result;
          }
          int v12 = *(_DWORD *)(*((void *)v2 - 4) + 36);
          uint64_t result = sub_1CD88A1BC((uint64_t)this, v27);
          if (v12 == 168)
          {
            int v14 = (_DWORD *)(result + 16);
            unsigned int v13 = *(_DWORD *)(result + 16);
            uint64_t v15 = (void *)(result + 8);
            if (v13 >= *(_DWORD *)(result + 20)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
          }
          else
          {
            int v14 = (_DWORD *)(result + 48);
            unsigned int v13 = *(_DWORD *)(result + 48);
            uint64_t v15 = (void *)(result + 40);
            if (v13 >= *(_DWORD *)(result + 52)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
          }
        }
        else
        {
          int v14 = (_DWORD *)((char *)this + 56);
          unsigned int v13 = *((_DWORD *)this + 14);
          uint64_t v15 = (void *)((char *)this + 48);
          if (v13 >= *((_DWORD *)this + 15)) {
            goto LABEL_60;
          }
        }
        *(void *)(*v15 + 8 * v13) = v2;
        ++*v14;
        return result;
      }
    }
  }
  uint64_t result = sub_1CC5817B4((uint64_t)v2);
  if (result) {
    uint64_t v16 = v2;
  }
  else {
    uint64_t v16 = 0;
  }
  if (result)
  {
    uint64_t result = llvm::DbgVariableIntrinsic::location_ops((uint64_t)v2, v27);
    uint64_t v18 = v27[0];
    uint64_t v17 = v27[1];
    while (v18 != v17)
    {
      uint64_t v19 = (unint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0) {
        unint64_t v20 = *v19;
      }
      uint64_t v21 = *(void *)(v20 + 128);
      if (v21 && *(unsigned char *)(v21 + 16) == 59)
      {
        uint64_t v26 = *(void *)(v20 + 128);
        uint64_t v22 = *((void *)this + 26);
        if (!v22) {
          goto LABEL_59;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 48))(v22);
        if (result)
        {
          uint64_t result = sub_1CD88A1BC((uint64_t)this, &v26);
          unint64_t v23 = *(unsigned int *)(result + 80);
          if (!v23 || *(llvm::Instruction **)(*(void *)(result + 72) + 8 * v23 - 8) != v16)
          {
            if (v23 >= *(unsigned int *)(result + 84)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(result + 72) + 8 * v23) = v2;
            ++*(_DWORD *)(result + 80);
          }
        }
      }
      if ((v18 & 4) != 0) {
        uint64_t v18 = (unint64_t)(v19 + 1) | 4;
      }
      else {
        uint64_t v18 = (uint64_t)(v19 + 17);
      }
    }
  }
  int v24 = *((unsigned __int8 *)v2 + 16);
  if (v24 != 36 && v24 != 34)
  {
    if (v24 != 29) {
      return result;
    }
    uint64_t result = llvm::BasicBlock::getTerminatingMustTailCall(*((llvm::BasicBlock **)v2 + 5));
    if (result) {
      uint64_t v2 = (llvm::Instruction *)result;
    }
  }
  unsigned int v25 = *((_DWORD *)this + 26);
  if (v25 >= *((_DWORD *)this + 27)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)this + 12) + 8 * v25) = v2;
  ++*((_DWORD *)this + 26);
  return result;
}

void sub_1CD1CC68C(void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 14;
    sub_1CD88A690(v5 + 1, (uint64_t)(a2 + 1));
    goto LABEL_19;
  }
  uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (unsigned char *)*a1) >> 4);
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x249249249249249) {
    abort();
  }
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)*a1) >> 4);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x124924924924924) {
    unint64_t v10 = 0x249249249249249;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 > 0x249249249249249) {
      sub_1CB833614();
    }
    uint64_t v11 = (char *)operator new(112 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  int v12 = &v11[112 * v7];
  unsigned int v13 = &v11[112 * v10];
  *(void *)int v12 = *a2;
  uint64_t v6 = v12 + 112;
  sub_1CD88A690((void *)v12 + 1, (uint64_t)(a2 + 1));
  uint64_t v15 = (char *)*a1;
  int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  do
  {
    uint64_t v16 = *((void *)v14 - 14);
    v14 -= 112;
    *((void *)v12 - 14) = v16;
    v12 -= 112;
    sub_1CD88A690((void *)v12 + 1, (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  int v14 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v14)
  {
    do
    {
      uint64_t v18 = v17 - 112;
      sub_1CD69AAB4((void *)v17 - 13);
      uint64_t v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
LABEL_19:
  a1[1] = v6;
}

void llvm::PromotePass::run()
{
}

uint64_t sub_1CD1CC90C(uint64_t a1, const llvm::AllocaInst *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  if (v6 == v5)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = v8;
      do
      {
        uint64_t v11 = (unsigned __int8 *)(v6 - 24);
        if (!v6) {
          uint64_t v11 = 0;
        }
        int v12 = v11[16];
        if (v12 == 59) {
          unsigned int v13 = (llvm *)v11;
        }
        else {
          unsigned int v13 = 0;
        }
        if (v6 && v12 == 59 && llvm::isAllocaPromotable(v13, a2))
        {
          if (v10 >= v9)
          {
            uint64_t v14 = v10 - v8;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61) {
              abort();
            }
            if (((char *)v9 - (char *)v8) >> 2 > v15) {
              unint64_t v15 = ((char *)v9 - (char *)v8) >> 2;
            }
            if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            if (v16)
            {
              if (v16 >> 61) {
                sub_1CB833614();
              }
              uint64_t v17 = (char *)operator new(8 * v16);
            }
            else
            {
              uint64_t v17 = 0;
            }
            uint64_t v18 = (llvm **)&v17[8 * v14];
            *uint64_t v18 = v13;
            uint64_t v19 = v18 + 1;
            while (v10 != v8)
            {
              unint64_t v20 = *--v10;
              *--uint64_t v18 = v20;
            }
            unint64_t v9 = (llvm **)&v17[8 * v16];
            if (v8) {
              operator delete(v8);
            }
            unint64_t v10 = v19;
            unint64_t v8 = v18;
          }
          else
          {
            *v10++ = v13;
          }
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
      if (v8 == v10) {
        break;
      }
      llvm::PromoteMemToReg(v8, v10 - v8, a2, a3);
      uint64_t v5 = *(void *)(v4 + 40);
      uint64_t v6 = *(void *)(v4 + 48);
      char v7 = 1;
      if (v6 == v5)
      {
        if (!v8) {
          return v7 & 1;
        }
        goto LABEL_40;
      }
    }
    unint64_t v8 = v10;
    if (!v10) {
      return v7 & 1;
    }
LABEL_40:
    operator delete(v8);
  }
  return v7 & 1;
}

void llvm::initializePromoteLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD168, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD1CCB18;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFD168, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD1CCB18(uint64_t a1)
{
}

uint64_t sub_1CD1CCBC0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFD160;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2648980;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD168, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1CCB18;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFD168, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD1CCC70()
{
}

void sub_1CD1CCCB0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD1CCCE8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CD1CCD64(llvm::FunctionPass *a1, llvm::LLVMContextImpl ****a2)
{
  if (llvm::FunctionPass::skipFunction(a1, a2)) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  unint64_t v9 = (const llvm::AllocaInst *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::DominatorTreeWrapperPass::ID)+ 32);
  unint64_t v10 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_11:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(char **)v11 != llvm::AssumptionCacheTracker::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_11;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v13 + 96))(v13, llvm::AssumptionCacheTracker::ID);
  uint64_t AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v14, (llvm::Function *)a2);

  return sub_1CD1CC90C((uint64_t)a2, v9, AssumptionCache);
}

void llvm::initializeMetaRenamerPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD178, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD1CCF14;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFD178, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD1CCF14(uint64_t a1)
{
}

uint64_t sub_1CD1CCFB4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFD170;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2648A20;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD178, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1CCF14;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFD178, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD1CD064(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t ***), uint64_t a3)
{
  void v217[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(char **)(a1 + 168);
  char v4 = *(unsigned char *)(a1 + 191);
  int v5 = v4;
  if (v4 >= 0) {
    uint64_t v3 = (char *)(a1 + 168);
  }
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = v4 & 0x7F;
  if (v5 >= 0) {
    uint64_t v6 = v7;
  }
  if (v6)
  {
    LODWORD(v8) = 0;
    do
    {
      int v9 = *v3++;
      uint64_t v8 = (v8 + v9);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v215 = (char *)v217;
  uint64_t v216 = 0x800000000;
  uint64_t v212 = v214;
  uint64_t v213 = 0x800000000;
  uint64_t v209 = v211;
  uint64_t v210 = 0x800000000;
  uint64_t v206 = v208;
  uint64_t v207 = 0x800000000;
  if (byte_1EBCFD2FF >= 0) {
    unint64_t v10 = byte_1EBCFD2FF & 0x7F;
  }
  else {
    unint64_t v10 = qword_1EBCFD2F0;
  }
  if (byte_1EBCFD2FF >= 0) {
    uint64_t v11 = &qword_1EBCFD2E8;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_1EBCFD2E8;
  }
  sub_1CD1CE318((uint64_t)v11, v10, (uint64_t)&v215);
  if (byte_1EBCFD3E7 >= 0) {
    unint64_t v12 = byte_1EBCFD3E7 & 0x7F;
  }
  else {
    unint64_t v12 = unk_1EBCFD3D8;
  }
  if (byte_1EBCFD3E7 >= 0) {
    uint64_t v13 = &qword_1EBCFD3D0;
  }
  else {
    uint64_t v13 = (uint64_t *)qword_1EBCFD3D0;
  }
  sub_1CD1CE318((uint64_t)v13, v12, (uint64_t)&v212);
  if (byte_1EBCFD4CF >= 0) {
    unint64_t v14 = byte_1EBCFD4CF & 0x7F;
  }
  else {
    unint64_t v14 = qword_1EBCFD4C0;
  }
  if (byte_1EBCFD4CF >= 0) {
    unint64_t v15 = &qword_1EBCFD4B8;
  }
  else {
    unint64_t v15 = (uint64_t *)qword_1EBCFD4B8;
  }
  sub_1CD1CE318((uint64_t)v15, v14, (uint64_t)&v209);
  if (byte_1EBCFD217 >= 0) {
    unint64_t v16 = byte_1EBCFD217 & 0x7F;
  }
  else {
    unint64_t v16 = unk_1EBCFD208;
  }
  if (byte_1EBCFD217 >= 0) {
    uint64_t v17 = &qword_1EBCFD200;
  }
  else {
    uint64_t v17 = (uint64_t *)qword_1EBCFD200;
  }
  sub_1CD1CE318((uint64_t)v17, v16, (uint64_t)&v206);
  uint64_t v18 = *(void *)(a1 + 48);
  if (v18 != a1 + 40)
  {
    while (1)
    {
      if (v18) {
        uint64_t v19 = (uint64_t ***)(v18 - 48);
      }
      else {
        uint64_t v19 = 0;
      }
      if ((*((unsigned char *)v19 + 23) & 0x10) == 0)
      {
        size_t v29 = 0;
        uint64_t v30 = &byte_1CFBCE98E;
        goto LABEL_54;
      }
      uint64_t v20 = ***v19;
      uint64_t v21 = *(void *)(v20 + 152);
      uint64_t v22 = *(unsigned int *)(v20 + 168);
      if (!v22) {
        goto LABEL_45;
      }
      LODWORD(v23) = (v22 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      int v24 = (uint64_t ****)(v21 + 16 * v23);
      unsigned int v25 = *v24;
      if (*v24 != v19) {
        break;
      }
LABEL_46:
      uint64_t v28 = v24[1];
      unint64_t v31 = (unint64_t)*v28;
      uint64_t v30 = (char *)(v28 + 2);
      size_t v29 = v31;
      if (v31 >= 5)
      {
        if (*(_DWORD *)v30 == 1836477548 && v30[4] == 46) {
          goto LABEL_62;
        }
LABEL_53:
        if (*v30 == 1) {
          goto LABEL_62;
        }
        goto LABEL_54;
      }
      if (v29) {
        goto LABEL_53;
      }
LABEL_54:
      if (v216)
      {
        uint64_t v33 = v215;
        uint64_t v34 = &v215[16 * v216];
        do
        {
          size_t v35 = *((void *)v33 + 1);
          if (v29 >= v35 && (!v35 || !memcmp(v30, *(const void **)v33, v35))) {
            goto LABEL_62;
          }
          v33 += 16;
        }
        while (v33 != v34);
      }
      unsigned int v202 = "alias";
      __int16 v205 = 259;
      llvm::Value::setNameImpl((llvm::Value *)v19, (const char **)&v202);
      if (v18 && !*((unsigned char *)v19 + 16))
      {
        if ((*((unsigned char *)v19 + 23) & 0x10) == 0) {
          goto LABEL_80;
        }
        uint64_t v36 = ***v19;
        uint64_t v37 = *(void *)(v36 + 152);
        uint64_t v38 = *(unsigned int *)(v36 + 168);
        if (!v38) {
          goto LABEL_72;
        }
        LODWORD(v39) = (v38 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        uint64_t v40 = (uint64_t ****)(v37 + 16 * v39);
        uint64_t v41 = *v40;
        if (*v40 != v19)
        {
          int v42 = 1;
          while (v41 != (uint64_t ***)-4096)
          {
            int v43 = v39 + v42++;
            uint64_t v39 = v43 & (v38 - 1);
            uint64_t v41 = *(uint64_t ****)(v37 + 16 * v39);
            if (v41 == v19)
            {
              uint64_t v40 = (uint64_t ****)(v37 + 16 * v39);
              goto LABEL_73;
            }
          }
LABEL_72:
          uint64_t v40 = (uint64_t ****)(v37 + 16 * v38);
        }
LABEL_73:
        int v44 = v40[1];
        unint64_t v47 = (unint64_t)*v44;
        unint64_t v45 = v44 + 2;
        unint64_t v46 = v47;
        if (v47 >= 5 && (*(_DWORD *)v45 == *(_DWORD *)"llvm." ? (BOOL v48 = v45[4] == aLlvm_1[4]) : (BOOL v48 = 0), v48))
        {
          *((_DWORD *)v19 + 8) |= 0x2000u;
          int v49 = llvm::Function::lookupIntrinsicID(v45, v46);
        }
        else
        {
LABEL_80:
          int v49 = 0;
          *((_DWORD *)v19 + 8) &= ~0x2000u;
        }
        *((_DWORD *)v19 + 9) = v49;
      }
LABEL_62:
      uint64_t v18 = *(void *)(v18 + 8);
      if (v18 == a1 + 40) {
        goto LABEL_82;
      }
    }
    int v26 = 1;
    while (v25 != (uint64_t ***)-4096)
    {
      int v27 = v23 + v26++;
      uint64_t v23 = v27 & (v22 - 1);
      unsigned int v25 = *(uint64_t ****)(v21 + 16 * v23);
      if (v25 == v19)
      {
        int v24 = (uint64_t ****)(v21 + 16 * v23);
        goto LABEL_46;
      }
    }
LABEL_45:
    int v24 = (uint64_t ****)(v21 + 16 * v22);
    goto LABEL_46;
  }
LABEL_82:
  uint64_t v50 = *(void *)(a1 + 16);
  if (v50 != a1 + 8)
  {
    while (1)
    {
      if (v50) {
        uint64_t v51 = (uint64_t ***)(v50 - 56);
      }
      else {
        uint64_t v51 = 0;
      }
      if ((*((unsigned char *)v51 + 23) & 0x10) == 0)
      {
        size_t v61 = 0;
        unint64_t v62 = &byte_1CFBCE98E;
        goto LABEL_102;
      }
      uint64_t v52 = ***v51;
      uint64_t v53 = *(void *)(v52 + 152);
      uint64_t v54 = *(unsigned int *)(v52 + 168);
      if (!v54) {
        goto LABEL_93;
      }
      LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      char v56 = (uint64_t ****)(v53 + 16 * v55);
      unint64_t v57 = *v56;
      if (*v56 != v51) {
        break;
      }
LABEL_94:
      uint64_t v60 = v56[1];
      unint64_t v63 = (unint64_t)*v60;
      unint64_t v62 = (char *)(v60 + 2);
      size_t v61 = v63;
      if (v63 >= 5)
      {
        if (*(_DWORD *)v62 == 1836477548 && v62[4] == 46) {
          goto LABEL_110;
        }
LABEL_101:
        if (*v62 == 1) {
          goto LABEL_110;
        }
        goto LABEL_102;
      }
      if (v61) {
        goto LABEL_101;
      }
LABEL_102:
      if (v213)
      {
        uint64_t v65 = (const void **)v212;
        uint64_t v66 = (const void **)((char *)v212 + 16 * v213);
        do
        {
          size_t v67 = (size_t)v65[1];
          if (v61 >= v67 && (!v67 || !memcmp(v62, *v65, v67))) {
            goto LABEL_110;
          }
          v65 += 2;
        }
        while (v65 != v66);
      }
      unsigned int v202 = "global";
      __int16 v205 = 259;
      llvm::Value::setNameImpl((llvm::Value *)v51, (const char **)&v202);
      if (v50 && !*((unsigned char *)v51 + 16))
      {
        if ((*((unsigned char *)v51 + 23) & 0x10) == 0) {
          goto LABEL_128;
        }
        uint64_t v68 = ***v51;
        uint64_t v69 = *(void *)(v68 + 152);
        uint64_t v70 = *(unsigned int *)(v68 + 168);
        if (!v70) {
          goto LABEL_120;
        }
        LODWORD(v71) = (v70 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        uint64_t v72 = (uint64_t ****)(v69 + 16 * v71);
        uint64_t v73 = *v72;
        if (*v72 != v51)
        {
          int v74 = 1;
          while (v73 != (uint64_t ***)-4096)
          {
            int v75 = v71 + v74++;
            uint64_t v71 = v75 & (v70 - 1);
            uint64_t v73 = *(uint64_t ****)(v69 + 16 * v71);
            if (v73 == v51)
            {
              uint64_t v72 = (uint64_t ****)(v69 + 16 * v71);
              goto LABEL_121;
            }
          }
LABEL_120:
          uint64_t v72 = (uint64_t ****)(v69 + 16 * v70);
        }
LABEL_121:
        long long v76 = v72[1];
        unint64_t v79 = (unint64_t)*v76;
        uint64_t v77 = v76 + 2;
        unint64_t v78 = v79;
        if (v79 >= 5 && (*(_DWORD *)v77 == *(_DWORD *)"llvm." ? (BOOL v80 = v77[4] == aLlvm_1[4]) : (BOOL v80 = 0), v80))
        {
          *((_DWORD *)v51 + 8) |= 0x2000u;
          int v81 = llvm::Function::lookupIntrinsicID(v77, v78);
        }
        else
        {
LABEL_128:
          int v81 = 0;
          *((_DWORD *)v51 + 8) &= ~0x2000u;
        }
        *((_DWORD *)v51 + 9) = v81;
      }
LABEL_110:
      uint64_t v50 = *(void *)(v50 + 8);
      if (v50 == a1 + 8) {
        goto LABEL_130;
      }
    }
    int v58 = 1;
    while (v57 != (uint64_t ***)-4096)
    {
      int v59 = v55 + v58++;
      uint64_t v55 = v59 & (v54 - 1);
      unint64_t v57 = *(uint64_t ****)(v53 + 16 * v55);
      if (v57 == v51)
      {
        char v56 = (uint64_t ****)(v53 + 16 * v55);
        goto LABEL_94;
      }
    }
LABEL_93:
    char v56 = (uint64_t ****)(v53 + 16 * v54);
    goto LABEL_94;
  }
LABEL_130:
  v187[0] = 0;
  v187[1] = 0;
  int v188 = 0;
  uint64_t v189 = 0;
  uint64_t v190 = 0;
  int v191 = 0;
  uint64_t v192 = 0;
  uint64_t v193 = 0;
  int v194 = 0;
  uint64_t v195 = 0;
  uint64_t v196 = 0;
  int v197 = 0;
  uint64_t v199 = 0;
  uint64_t v200 = 0;
  __p = 0;
  char v201 = 0;
  llvm::TypeFinder::run((llvm::TypeFinder *)v187, (const llvm::Module *)a1, 1);
  uint64_t v82 = (uint64_t *)__p;
  uint64_t v83 = v199;
  if (__p != v199)
  {
    do
    {
      uint64_t v84 = *v82;
      unsigned int v85 = *(size_t **)(*v82 + 24);
      if (v85)
      {
        if ((*(unsigned char *)(v84 + 9) & 4) == 0)
        {
          size_t v88 = *v85;
          uint64_t v86 = v85 + 2;
          size_t v87 = v88;
          if (v88)
          {
            if (v210)
            {
              unsigned int v89 = (const void **)v209;
              unsigned int v90 = (const void **)((char *)v209 + 16 * v210);
              while (1)
              {
                size_t v91 = (size_t)v89[1];
                if (v87 >= v91 && (!v91 || !memcmp(v86, *v89, v91))) {
                  break;
                }
                v89 += 2;
                if (v89 == v90) {
                  goto LABEL_140;
                }
              }
            }
            else
            {
LABEL_140:
              unsigned int v202 = &v204;
              long long v203 = xmmword_1CFAC3020;
              uint64_t v8 = 1103515245 * v8 + 12345;
              uint64_t v92 = off_1E685A360[(unsigned __int16)((WORD1(v8) & 0x7FFF)
                                                   - 17
                                                   * ((unsigned __int16)((30841 * (WORD1(v8) & 0x7FFF)) >> 16) >> 3))];
              if (*v92)
              {
                v185[0] = "struct.";
                v185[2] = v92;
                __int16 v186 = 771;
                llvm::Twine::toVector((uint64_t)v185, (uint64_t)&v202);
                uint64_t v93 = (unsigned __int8 *)v202;
                size_t v94 = v203;
              }
              else
              {
                size_t v94 = 7;
                uint64_t v93 = "struct.";
              }
              llvm::StructType::setName(v84, v93, v94);
              if (v202 != &v204) {
                free(v202);
              }
            }
          }
        }
      }
      ++v82;
    }
    while (v82 != v83);
  }
  uint64_t v95 = a1 + 24;
  uint64_t v96 = *(void *)(a1 + 32);
  if (v96 != a1 + 24)
  {
    while (1)
    {
      if (v96) {
        uint64_t v97 = (uint64_t ***)(v96 - 56);
      }
      else {
        uint64_t v97 = 0;
      }
      if ((*((unsigned char *)v97 + 23) & 0x10) == 0)
      {
        size_t v107 = 0;
        LODWORD(v185[0]) = 0;
        unint64_t v108 = &byte_1CFBCE98E;
        goto LABEL_166;
      }
      uint64_t v98 = ***v97;
      uint64_t v99 = *(void *)(v98 + 152);
      uint64_t v100 = *(unsigned int *)(v98 + 168);
      if (!v100) {
        goto LABEL_157;
      }
      LODWORD(v101) = (v100 - 1) & ((v97 >> 4) ^ (v97 >> 9));
      unint64_t v102 = (uint64_t ****)(v99 + 16 * v101);
      uint64_t v103 = *v102;
      if (*v102 != v97) {
        break;
      }
LABEL_158:
      unint64_t v106 = v102[1];
      unint64_t v109 = (unint64_t)*v106;
      unint64_t v108 = (char *)(v106 + 2);
      size_t v107 = v109;
      LODWORD(v185[0]) = 0;
      if (v109 >= 5)
      {
        if (*(_DWORD *)v108 == 1836477548 && v108[4] == 46) {
          goto LABEL_264;
        }
LABEL_165:
        if (*v108 == 1) {
          goto LABEL_264;
        }
        goto LABEL_166;
      }
      if (v107) {
        goto LABEL_165;
      }
LABEL_166:
      uint64_t v111 = (uint64_t *)a2(a3, v97);
      if (!llvm::TargetLibraryInfoImpl::getLibFunc(*v111, v97, v185))
      {
        if (v207)
        {
          unint64_t v112 = (const void **)v206;
          unint64_t v113 = (const void **)((char *)v206 + 16 * v207);
          while (1)
          {
            size_t v114 = (size_t)v112[1];
            if (v107 >= v114 && (!v114 || !memcmp(v108, *v112, v114))) {
              break;
            }
            v112 += 2;
            if (v112 == v113) {
              goto LABEL_173;
            }
          }
LABEL_263:
          uint64_t v95 = a1 + 24;
          goto LABEL_264;
        }
LABEL_173:
        if (v107 != 4 || *(_DWORD *)v108 != 1852399981)
        {
          uint64_t v8 = 1103515245 * v8 + 12345;
          uint64_t v115 = off_1E685A360[(unsigned __int16)((WORD1(v8) & 0x7FFF)
                                                - 17
                                                * ((unsigned __int16)((30841 * (WORD1(v8) & 0x7FFF)) >> 16) >> 3))];
          __int16 v205 = 257;
          if (*v115)
          {
            unsigned int v202 = v115;
            char v116 = 3;
          }
          else
          {
            char v116 = 1;
          }
          LOBYTE(v205) = v116;
          llvm::Value::setNameImpl((llvm::Value *)v97, (const char **)&v202);
          if (v96)
          {
            if (!*((unsigned char *)v97 + 16))
            {
              if ((*((unsigned char *)v97 + 23) & 0x10) == 0) {
                goto LABEL_277;
              }
              uint64_t v117 = ***v97;
              uint64_t v118 = *(void *)(v117 + 152);
              uint64_t v119 = *(unsigned int *)(v117 + 168);
              if (v119)
              {
                LODWORD(v120) = (v119 - 1) & ((v97 >> 4) ^ (v97 >> 9));
                uint64_t v121 = (uint64_t ****)(v118 + 16 * v120);
                uint64_t v122 = *v121;
                if (*v121 != v97)
                {
                  int v123 = 1;
                  do
                  {
                    if (v122 == (uint64_t ***)-4096) {
                      goto LABEL_269;
                    }
                    int v124 = v120 + v123++;
                    uint64_t v120 = v124 & (v119 - 1);
                    uint64_t v122 = *(uint64_t ****)(v118 + 16 * v120);
                  }
                  while (v122 != v97);
                  uint64_t v121 = (uint64_t ****)(v118 + 16 * v120);
                }
              }
              else
              {
LABEL_269:
                uint64_t v121 = (uint64_t ****)(v118 + 16 * v119);
              }
              unint64_t v176 = v121[1];
              unint64_t v179 = (unint64_t)*v176;
              uint64_t v177 = v176 + 2;
              unint64_t v178 = v179;
              if (v179 >= 5
                && (*(_DWORD *)v177 == *(_DWORD *)"llvm." ? (BOOL v180 = v177[4] == aLlvm_1[4]) : (BOOL v180 = 0), v180))
              {
                *((_DWORD *)v97 + 8) |= 0x2000u;
                int v181 = llvm::Function::lookupIntrinsicID(v177, v178);
              }
              else
              {
LABEL_277:
                int v181 = 0;
                *((_DWORD *)v97 + 8) &= ~0x2000u;
              }
              *((_DWORD *)v97 + 9) = v181;
            }
          }
        }
        if ((*((_WORD *)v97 + 9) & 1) == 0)
        {
          unint64_t v125 = (llvm::Value *)v97[11];
          goto LABEL_189;
        }
        llvm::Function::BuildLazyArguments((llvm::Function *)v97);
        unint64_t v125 = (llvm::Value *)v97[11];
        if (*((_WORD *)v97 + 9))
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v97);
          unint64_t v126 = (llvm::Value *)v97[11];
        }
        else
        {
LABEL_189:
          unint64_t v126 = v125;
        }
        uint64_t v127 = (llvm::Value *)((char *)v126 + 40 * (void)v97[12]);
        while (2)
        {
          if (v125 != v127)
          {
            if (*(unsigned char *)(*(void *)v125 + 8) == 7) {
              goto LABEL_194;
            }
            unsigned int v202 = "arg";
            __int16 v205 = 259;
            llvm::Value::setNameImpl(v125, (const char **)&v202);
            if (*((unsigned char *)v125 + 16)) {
              goto LABEL_194;
            }
            if ((*((unsigned char *)v125 + 23) & 0x10) == 0) {
              goto LABEL_210;
            }
            uint64_t v128 = ***(void ***)v125;
            uint64_t v129 = *(void *)(v128 + 152);
            uint64_t v130 = *(unsigned int *)(v128 + 168);
            if (!v130) {
              goto LABEL_202;
            }
            LODWORD(v131) = (v130 - 1) & ((v125 >> 4) ^ (v125 >> 9));
            long long v132 = (llvm::Value **)(v129 + 16 * v131);
            long long v133 = *v132;
            if (*v132 != v125)
            {
              int v134 = 1;
              while (v133 != (llvm::Value *)-4096)
              {
                int v135 = v131 + v134++;
                uint64_t v131 = v135 & (v130 - 1);
                long long v133 = *(llvm::Value **)(v129 + 16 * v131);
                if (v133 == v125)
                {
                  long long v132 = (llvm::Value **)(v129 + 16 * v131);
                  goto LABEL_203;
                }
              }
LABEL_202:
              long long v132 = (llvm::Value **)(v129 + 16 * v130);
            }
LABEL_203:
            uint64_t v136 = v132[1];
            unint64_t v139 = *(void *)v136;
            char v137 = (char *)v136 + 16;
            unint64_t v138 = v139;
            if (v139 >= 5
              && (*(_DWORD *)v137 == *(_DWORD *)"llvm." ? (BOOL v140 = v137[4] == aLlvm_1[4]) : (BOOL v140 = 0), v140))
            {
              *((_DWORD *)v125 + 8) |= 0x2000u;
              int v141 = llvm::Function::lookupIntrinsicID(v137, v138);
            }
            else
            {
LABEL_210:
              int v141 = 0;
              *((_DWORD *)v125 + 8) &= ~0x2000u;
            }
            *((_DWORD *)v125 + 9) = v141;
LABEL_194:
            unint64_t v125 = (llvm::Value *)((char *)v125 + 40);
            continue;
          }
          break;
        }
        unsigned int v142 = (uint64_t **)(v97 + 9);
        uint64_t v143 = v97[10];
LABEL_213:
        if (v143 == v142) {
          goto LABEL_263;
        }
        if (v143) {
          uint64_t v144 = (llvm::Value *)(v143 - 3);
        }
        else {
          uint64_t v144 = 0;
        }
        unsigned int v202 = "bb";
        __int16 v205 = 259;
        llvm::Value::setNameImpl(v144, (const char **)&v202);
        if (!v143 || *((unsigned char *)v144 + 16))
        {
LABEL_219:
          unint64_t v145 = (void ***)((char *)v144 + 40);
          for (uint64_t i = (void **)*((void *)v144 + 6); ; uint64_t i = (void **)i[1])
          {
            if (i == v145)
            {
              uint64_t v143 = (uint64_t **)v143[1];
              goto LABEL_213;
            }
            unint64_t v147 = i ? (llvm::Value *)(i - 3) : 0;
            if (*(unsigned char *)(*(void *)v147 + 8) != 7)
            {
              unsigned int v202 = "tmp";
              __int16 v205 = 259;
              llvm::Value::setNameImpl(v147, (const char **)&v202);
              if (i)
              {
                if (!*((unsigned char *)v147 + 16)) {
                  break;
                }
              }
            }
LABEL_227:
            ;
          }
          if ((*((unsigned char *)v147 + 23) & 0x10) == 0) {
            goto LABEL_243;
          }
          uint64_t v148 = ***(void ***)v147;
          uint64_t v149 = *(void *)(v148 + 152);
          uint64_t v150 = *(unsigned int *)(v148 + 168);
          if (!v150) {
            goto LABEL_235;
          }
          LODWORD(v151) = (v150 - 1) & ((v147 >> 4) ^ (v147 >> 9));
          unint64_t v152 = (llvm::Value **)(v149 + 16 * v151);
          unint64_t v153 = *v152;
          if (*v152 != v147)
          {
            int v154 = 1;
            while (v153 != (llvm::Value *)-4096)
            {
              int v155 = v151 + v154++;
              uint64_t v151 = v155 & (v150 - 1);
              unint64_t v153 = *(llvm::Value **)(v149 + 16 * v151);
              if (v153 == v147)
              {
                unint64_t v152 = (llvm::Value **)(v149 + 16 * v151);
                goto LABEL_236;
              }
            }
LABEL_235:
            unint64_t v152 = (llvm::Value **)(v149 + 16 * v150);
          }
LABEL_236:
          unint64_t v156 = v152[1];
          unint64_t v159 = *(void *)v156;
          uint64_t v157 = (char *)v156 + 16;
          unint64_t v158 = v159;
          if (v159 >= 5 && (*(_DWORD *)v157 == *(_DWORD *)"llvm." ? (BOOL v160 = v157[4] == aLlvm_1[4]) : (BOOL v160 = 0), v160))
          {
            *((_DWORD *)v147 + 8) |= 0x2000u;
            int v161 = llvm::Function::lookupIntrinsicID(v157, v158);
          }
          else
          {
LABEL_243:
            int v161 = 0;
            *((_DWORD *)v147 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v147 + 9) = v161;
          goto LABEL_227;
        }
        if ((*((unsigned char *)v144 + 23) & 0x10) == 0) {
          goto LABEL_261;
        }
        uint64_t v162 = ***(void ***)v144;
        uint64_t v163 = *(void *)(v162 + 152);
        uint64_t v164 = *(unsigned int *)(v162 + 168);
        if (!v164) {
          goto LABEL_253;
        }
        LODWORD(v165) = (v164 - 1) & ((v144 >> 4) ^ (v144 >> 9));
        uint64_t v166 = (llvm::Value **)(v163 + 16 * v165);
        uint64_t v167 = *v166;
        if (*v166 != v144)
        {
          int v168 = 1;
          while (v167 != (llvm::Value *)-4096)
          {
            int v169 = v165 + v168++;
            uint64_t v165 = v169 & (v164 - 1);
            uint64_t v167 = *(llvm::Value **)(v163 + 16 * v165);
            if (v167 == v144)
            {
              uint64_t v166 = (llvm::Value **)(v163 + 16 * v165);
              goto LABEL_254;
            }
          }
LABEL_253:
          uint64_t v166 = (llvm::Value **)(v163 + 16 * v164);
        }
LABEL_254:
        uint64_t v170 = v166[1];
        unint64_t v173 = *(void *)v170;
        unsigned int v171 = (char *)v170 + 16;
        unint64_t v172 = v173;
        if (v173 >= 5 && (*(_DWORD *)v171 == *(_DWORD *)"llvm." ? (BOOL v174 = v171[4] == aLlvm_1[4]) : (BOOL v174 = 0), v174))
        {
          *((_DWORD *)v144 + 8) |= 0x2000u;
          int v175 = llvm::Function::lookupIntrinsicID(v171, v172);
        }
        else
        {
LABEL_261:
          int v175 = 0;
          *((_DWORD *)v144 + 8) &= ~0x2000u;
        }
        *((_DWORD *)v144 + 9) = v175;
        goto LABEL_219;
      }
LABEL_264:
      uint64_t v96 = *(void *)(v96 + 8);
      if (v96 == v95) {
        goto LABEL_279;
      }
    }
    int v104 = 1;
    while (v103 != (uint64_t ***)-4096)
    {
      int v105 = v101 + v104++;
      uint64_t v101 = v105 & (v100 - 1);
      uint64_t v103 = *(uint64_t ****)(v99 + 16 * v101);
      if (v103 == v97)
      {
        unint64_t v102 = (uint64_t ****)(v99 + 16 * v101);
        goto LABEL_158;
      }
    }
LABEL_157:
    unint64_t v102 = (uint64_t ****)(v99 + 16 * v100);
    goto LABEL_158;
  }
LABEL_279:
  if (__p)
  {
    uint64_t v199 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v195, 8);
  MEMORY[0x1D25D9CD0](v192, 8);
  MEMORY[0x1D25D9CD0](v189, 8);
  MEMORY[0x1D25D9CD0](v187[0], 8);
  if (v206 != v208) {
    free(v206);
  }
  if (v209 != v211) {
    free(v209);
  }
  if (v212 != v214) {
    free(v212);
  }
  if (v215 != (char *)v217) {
    free(v215);
  }
}

void sub_1CD1CDF00()
{
}

void sub_1CD1CDF40(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD1CDF78(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CD1CDFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  sub_1CD1CD064(a2, (uint64_t (*)(uint64_t, uint64_t ***))sub_1CD1CDFF0, (uint64_t)&v3);
  return 1;
}

void sub_1CD1CDFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)uint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

unint64_t sub_1CD1CE318(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v16 = a1;
  unint64_t v17 = a2;
  for (i = a1; ; uint64_t v5 = i)
  {
    unint64_t v7 = v4;
    uint64_t v8 = i;
    char v18 = 44;
    unint64_t result = llvm::StringRef::find(&v16, &v18, 1uLL, 0);
    if (v4 >= result) {
      unint64_t v10 = result;
    }
    else {
      unint64_t v10 = v4;
    }
    if (v4 >= result + 1) {
      unint64_t v11 = result + 1;
    }
    else {
      unint64_t v11 = v4;
    }
    uint64_t v12 = i + v11;
    unint64_t v13 = v4 - v11;
    if (result == -1) {
      unint64_t v4 = 0;
    }
    else {
      unint64_t v4 = v13;
    }
    if (result == -1) {
      uint64_t i = 0;
    }
    else {
      uint64_t i = v12;
    }
    if (result != -1)
    {
      unint64_t v7 = v10;
      uint64_t v5 = v8;
    }
    if (!v7) {
      break;
    }
    unint64_t v14 = *(unsigned int *)(a3 + 8);
    if (v14 >= *(unsigned int *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v15 = (uint64_t *)(*(void *)a3 + 16 * v14);
    *uint64_t v15 = v5;
    v15[1] = v7;
    ++*(_DWORD *)(a3 + 8);
    uint64_t v16 = i;
    unint64_t v17 = v4;
  }
  return result;
}

void sub_1CD1CE410()
{
}

uint64_t sub_1CD1CE43C()
{
  *(void *)&long long v2 = "Prefixes for functions that don't need to be renamed, separated by a comma";
  *((void *)&v2 + 1) = 74;
  int v1 = 1;
  sub_1CD6884B4((uint64_t)&unk_1EBCFD180, "rename-exclude-function-prefixes", &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCFD180, &dword_1CB82C000);
  *(void *)&long long v2 = "Prefixes for aliases that don't need to be renamed, separated by a comma";
  *((void *)&v2 + 1) = 72;
  int v1 = 1;
  sub_1CD88A850(&v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCFD268, &dword_1CB82C000);
  *(void *)&long long v2 = "Prefixes for global values that don't need to be renamed, separated by a comma";
  *((void *)&v2 + 1) = 78;
  int v1 = 1;
  sub_1CD6884B4((uint64_t)&unk_1EBCFD350, "rename-exclude-global-prefixes", &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCFD350, &dword_1CB82C000);
  *(void *)&long long v2 = "Prefixes for structs that don't need to be renamed, separated by a comma";
  *((void *)&v2 + 1) = 72;
  int v1 = 1;
  sub_1CD6884B4((uint64_t)&unk_1EBCFD438, "rename-exclude-struct-prefixes", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCFD438, &dword_1CB82C000);
}

uint64_t llvm::misexpect::clamp(llvm::misexpect *this, unsigned int a2, unsigned int a3)
{
  if (a2 <= (unint64_t)this) {
    unsigned int v3 = this;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a3 >= (unint64_t)this) {
    return v3;
  }
  else {
    return a3;
  }
}

void llvm::misexpect::verifyMisExpect(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v62[34] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v10 = *(unsigned int *)(a4 + 4 * v7);
      if (v6 < v10) {
        uint64_t v8 = v7;
      }
      if (v6 <= v10) {
        unint64_t v6 = *(unsigned int *)(a4 + 4 * v7);
      }
      if (v9 >= v10) {
        unint64_t v9 = *(unsigned int *)(a4 + 4 * v7);
      }
      ++v7;
    }
    while (a5 != v7);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v6 = 0;
    unint64_t v9 = 0xFFFFFFFFLL;
  }
  unint64_t v11 = 0;
  if (a3)
  {
    uint64_t v12 = 4 * a3;
    unint64_t v13 = a2;
    do
    {
      unsigned int v14 = *v13++;
      v11 += v14;
      v12 -= 4;
    }
    while (v12);
  }
  unint64_t v15 = v6 + v9 * (a3 - 1);
  unint64_t v16 = HIDWORD(v15);
  if (HIDWORD(v15))
  {
    LOBYTE(v16) = 0;
    unint64_t v39 = v15;
    do
    {
      unint64_t v15 = v39 >> 1;
      LOBYTE(v16) = v16 + 1;
      unint64_t v40 = v39 >> 33;
      v39 >>= 1;
    }
    while (v40);
  }
  unint64_t v17 = v6 >> v16;
  if (v15 != 0x80000000) {
    unint64_t v17 = ((v17 << 31) | (v15 >> 1)) / v15;
  }
  unint64_t v18 = v11;
  if (v11)
  {
    unint64_t v18 = v11;
    if (v17 != 0x80000000)
    {
      unint64_t v19 = v17 * (unint64_t)v11;
      unint64_t v20 = HIDWORD(v19) + v17 * (unint64_t)HIDWORD(v11);
      int64_t v21 = (((unint64_t)(v20 < (int)v17 * HIDWORD(v11)) << 32)
           + v17 * (unint64_t)HIDWORD(v11)) & 0xFFFFFFFF00000000 | v20;
      if (v21 >= 0) {
        unint64_t v18 = ((v19 & 0x80000000 | ((v20 & 0x7FFFFFFF) << 32)) >> 31) | ((unint64_t)((unint64_t)v21 >> 31) << 32);
      }
      else {
        unint64_t v18 = -1;
      }
    }
  }
  unint64_t v22 = a2[v8];
  uint64_t v23 = **(void **)a1;
  unint64_t v24 = dword_1EBCFD660;
  uint64_t v25 = *(void *)v23;
  if (*(unsigned char *)(*(void *)v23 + 112)) {
    unint64_t v26 = *(void *)(v25 + 104);
  }
  else {
    unint64_t v26 = 0;
  }
  if (v26 > dword_1EBCFD660) {
    unint64_t v24 = v26;
  }
  if (v24 >= 0x63) {
    LODWORD(v24) = 99;
  }
  if (v24) {
    unint64_t v18 = (unint64_t)(((double)v24 / -100.0 + 1.0) * (double)v18);
  }
  if (v18 > v22)
  {
    unint64_t v56 = v11;
    unint64_t v57 = v22;
    double v55 = (double)v22 / (double)v11;
    v50[0] = "{0:P} ({1} / {2})";
    v50[1] = 17;
    v50[2] = v54;
    v50[3] = 3;
    v51[0] = &unk_1F2601470;
    v51[1] = &v55;
    v52[0] = &unk_1F2619590;
    v52[1] = &v57;
    v53[0] = &unk_1F2619590;
    v53[1] = &v56;
    v54[0] = v51;
    v54[1] = v52;
    v54[2] = v53;
    v47[0] = "Potential performance regression from use of the llvm.expect intrinsic: Annotation was correct on {0} of pr"
             "ofiled executions.";
    v47[1] = 125;
    v47[2] = &v49;
    v47[3] = 1;
    v48[0] = &unk_1F2648AC0;
    v48[1] = v50;
    int v49 = v48;
    __int16 v46 = 262;
    unint64_t v45 = v50;
    int v27 = *(unsigned __int8 *)(a1 + 16);
    if (v27 == 31)
    {
      int v29 = *(_DWORD *)(a1 + 20);
      if ((v29 & 0x40000000) != 0) {
        long long v28 = *(uint64_t **)(a1 - 8);
      }
      else {
        long long v28 = (uint64_t *)(a1 - 32 * (v29 & 0x7FFFFFF));
      }
    }
    else
    {
      if (v27 != 30)
      {
        uint64_t v30 = 0;
LABEL_43:
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = a1;
        }
        if (byte_1EBCFD5A0 || *(unsigned char *)(v25 + 120))
        {
          llvm::DiagnosticInfoMisExpect::DiagnosticInfoMisExpect((uint64_t)v59, v31, (uint64_t)&v45);
          llvm::LLVMContext::diagnose(v23, (const llvm::DiagnosticInfo *)v59);
        }
        llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v43, *(const llvm::Function **)(*(void *)(a1 + 40) + 56));
        llvm::OptimizationRemark::OptimizationRemark((uint64_t)v59, (uint64_t)"misexpect", (uint64_t)"misexpect", 9, v31);
        sub_1CD465B2C((uint64_t)v47, __p);
        uint64_t v32 = (void **)__p[0];
        if (v42 >= 0) {
          uint64_t v32 = __p;
        }
        int v33 = (void *)(v42 & 0x7F);
        if (v42 < 0) {
          int v33 = __p[1];
        }
        v58[0] = v32;
        v58[1] = v33;
        sub_1CC59ADEC((uint64_t *)&v60, (uint64_t)v58);
        llvm::OptimizationRemarkEmitter::emit(v43, (llvm::DiagnosticInfoOptimizationBase *)v59);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
        v59[0] = &unk_1F2616800;
        long long v34 = (char *)v60;
        if (v61)
        {
          unint64_t v35 = (unint64_t)v61 << 6;
          do
          {
            long long v36 = (void **)&v34[v35];
            if (v34[v35 - 17] < 0) {
              operator delete(*(v36 - 5));
            }
            if (*((char *)v36 - 41) < 0) {
              operator delete(*(v36 - 8));
            }
            v35 -= 64;
          }
          while (v35);
          long long v34 = (char *)v60;
        }
        if (v34 != (char *)v62) {
          free(v34);
        }
        uint64_t v37 = v44;
        int v44 = 0;
        if (v37)
        {
          uint64_t v38 = *v37;
          *uint64_t v37 = 0;
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
          MEMORY[0x1D25D9CE0](v37, 0x20C4093837F09);
        }
        return;
      }
      long long v28 = (uint64_t *)(a1 - 96);
    }
    uint64_t v30 = *v28;
    if (*(unsigned __int8 *)(v30 + 16) <= 0x1Bu) {
      uint64_t v30 = 0;
    }
    goto LABEL_43;
  }
}

uint64_t sub_1CD1CEA5C()
{
  char v1 = 0;
  unint64_t v4 = (int *)&v1;
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Use this option to turn on/off warnings about incorrect usage of llvm.expect intrinsics.";
  v2.n128_u64[1] = 88;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFD520, "pgo-warn-misexpect", (unsigned char **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFD520, &dword_1CB82C000);
  int v3 = 0;
  unint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Prevents emiting diagnostics when profile counts are within N% of the threshold..";
  v2.n128_u64[1] = 81;
  sub_1CD88AD20(&v4, (long long *)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCFD5E0, &dword_1CB82C000);
}

void sub_1CD1CEB38(const char *a1, uint64_t *a2, uint64_t a3, int a4, llvm::ConstantExpr *a5)
{
  v80[1] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (uint64_t *)*a2;
  size_t v67 = v69;
  uint64_t v68 = 0x200000000;
  uint64_t v70 = v9;
  uint64_t v71 = &v79;
  uint64_t v72 = v80;
  uint64_t v73 = 0;
  int v74 = 0;
  __int16 v75 = 512;
  char v76 = 7;
  v69[4] = 0;
  v69[5] = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  unint64_t v79 = &unk_1F2616E88;
  v80[0] = &unk_1F2617008;
  unint64_t v10 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v9 + 1576), 0, 0, 0);
  long long v64 = v66;
  uint64_t v65 = 0x1000000000;
  uint64_t v11 = *v70;
  uint64_t v12 = (const char *)(*v70 + 1960);
  unint64_t v13 = llvm::PointerType::get(v10, 0);
  unint64_t v14 = llvm::PointerType::get((llvm::PointerType *)(*v70 + 1912), 0);
  unint64_t v15 = *(uint64_t **)(v11 + 1960);
  int v58 = v12;
  unint64_t v59 = v13;
  unint64_t v60 = v14;
  uint64_t v57 = (uint64_t)a2;
  uint64_t v55 = a3;
  unint64_t v56 = a5;
  uint64_t v54 = (unsigned int *)llvm::StructType::get(v15, (uint64_t)&v58, 3, 0);
  if (!a1)
  {
    unint64_t v19 = (uint64_t *)a2[14];
    unsigned int v21 = *((_DWORD *)v19 + 2);
    if (!v21) {
      goto LABEL_23;
    }
    size_t v18 = 0;
LABEL_11:
    int v24 = 0;
    BOOL v22 = 1;
    goto LABEL_12;
  }
  size_t v17 = strlen(a1);
  size_t v18 = v17;
  unint64_t v19 = (uint64_t *)a2[14];
  unint64_t v20 = *((unsigned int *)v19 + 8);
  if ((v20 & 0x80000000) == 0 && v17 > v20)
  {
    unint64_t v20 = v20 <= 1 ? 1 : v20;
    if (v17 >= v20) {
      size_t v18 = v20;
    }
  }
  unsigned int v21 = *((_DWORD *)v19 + 2);
  if (!v21) {
    goto LABEL_23;
  }
  BOOL v22 = v18 == 0;
  if (!v18) {
    goto LABEL_11;
  }
  uint64_t v23 = 0;
  int v24 = 0;
  do
    int v24 = 33 * v24 + a1[v23++];
  while (v18 != v23);
LABEL_12:
  unsigned int v25 = v21 - 1;
  uint64_t v26 = *v19;
  uint64_t v52 = v21;
  uint64_t v27 = *v19 + 8 * v21 + 8;
  int v28 = 1;
  int v29 = v24;
  while (1)
  {
    uint64_t v30 = v29 & v25;
    uint64_t v31 = *(void **)(v26 + 8 * v30);
    if (v31 != (void *)-8)
    {
      if (!v31) {
        goto LABEL_23;
      }
      if (*(_DWORD *)(v27 + 4 * v30) == v24
        && v18 == *v31
        && (v22 || !memcmp(a1, (char *)v31 + *((unsigned int *)v19 + 5), v18)))
      {
        break;
      }
    }
    int v29 = v28 + v30;
    ++v28;
  }
  if (v30 != -1 && (int)v30 != v52)
  {
    uint64_t v32 = *(unsigned char **)(*(void *)(v26 + 8 * (int)v30) + 8);
    if (v32)
    {
      if (v32[16] == 3)
      {
        uint64_t v47 = *((void *)v32 - 4);
        if (v47)
        {
          unsigned int v48 = *(_DWORD *)(v47 + 20) & 0x7FFFFFF;
          if (HIDWORD(v65) <= v48) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v48)
          {
            uint64_t v49 = 0;
            do
            {
              int v50 = *(_DWORD *)(v47 + 20);
              if ((v50 & 0x40000000) != 0) {
                uint64_t v51 = *(void *)(v47 - 8);
              }
              else {
                uint64_t v51 = v47 - 32 * (v50 & 0x7FFFFFF);
              }
              if (v65 >= (unint64_t)HIDWORD(v65)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v64 + v65) = *(void *)(v51 + v49);
              LODWORD(v65) = v65 + 1;
              v49 += 32;
            }
            while (32 * v48 != v49);
          }
        }
        llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v32);
      }
    }
  }
LABEL_23:
  int v33 = *(llvm::ConstantInt **)(*v70 + 1960);
  unsigned int v34 = *(_DWORD *)(*v70 + 1968);
  LODWORD(v59) = v34 >> 8;
  if (v34 >> 8 > 0x40) {
    operator new[]();
  }
  if (v34 <= 0xFF) {
    LODWORD(v35) = 0;
  }
  else {
    unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v34) + 63);
  }
  int v58 = (const char *)(v35 & a4);
  long long v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v58, v16);
  if (v59 >= 0x41 && v58) {
    MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
  }
  v63[0] = v36;
  v63[1] = v55;
  uint64_t v37 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v70 + 1912), 0);
  if (v56) {
    PointerCast = llvm::ConstantExpr::getPointerCast(v56, v37, v38);
  }
  else {
    PointerCast = llvm::Constant::getNullValue(v37, v37, v38);
  }
  v63[2] = PointerCast;
  unint64_t v40 = llvm::ConstantStruct::get((llvm::PoisonValue *)v54, (llvm::Type *)v63, v54[3]);
  if (v65 >= HIDWORD(v65)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v64 + v65) = v40;
  LODWORD(v65) = v65 + 1;
  uint64_t v41 = llvm::ArrayType::get((llvm::ArrayType *)v54, (llvm::Type *)v65);
  char v42 = llvm::ConstantArray::get(v41, (llvm::Type *)v64, v65);
  int v43 = (char *)operator new(0x78uLL);
  int v44 = (unint64_t *)(v43 + 32);
  *((_DWORD *)v43 + 13) = *((_DWORD *)v43 + 13) & 0x38000000 | 1;
  *(void *)int v43 = 0;
  *((void *)v43 + 1) = 0;
  *((void *)v43 + 2) = 0;
  *((void *)v43 + 3) = v43 + 32;
  unint64_t v45 = *(llvm::PointerType **)v42;
  char v46 = 1;
  char v62 = 1;
  if (*a1)
  {
    int v58 = a1;
    char v46 = 3;
  }
  char v61 = v46;
  llvm::GlobalVariable::GlobalVariable(v44, v57, v45, 0, 6, (unint64_t)v42, &v58, 0, 0, 0, 0);
  if (v64 != v66) {
    free(v64);
  }
  if (v67 != v69) {
    free(v67);
  }
}

void sub_1CD1CF0D0(void *a1, unsigned __int8 *a2, const char *__n, llvm::ConstantExpr **a4, uint64_t a5)
{
  v95[16] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (uint64_t *)a1[14];
  unint64_t v7 = *((unsigned int *)v6 + 8);
  if ((v7 & 0x80000000) != 0 || (unint64_t)__n <= v7)
  {
    size_t v8 = (size_t)__n;
  }
  else
  {
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = v7;
    }
    if ((unint64_t)__n >= v7) {
      size_t v8 = v7;
    }
    else {
      size_t v8 = (size_t)__n;
    }
  }
  uint64_t v9 = *((unsigned int *)v6 + 2);
  if (!v9) {
    goto LABEL_19;
  }
  int v10 = 0;
  if (v8)
  {
    size_t v11 = v8;
    uint64_t v12 = a2;
    do
    {
      int v13 = *v12++;
      int v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  uint64_t v14 = *v6;
  uint64_t v15 = *v6 + 8 * v9 + 8;
  int v16 = 1;
  int v17 = v10;
  while (1)
  {
    uint64_t v18 = v17 & (v9 - 1);
    unint64_t v19 = *(void **)(v14 + 8 * v18);
    if (v19 != (void *)-8)
    {
      if (!v19) {
        goto LABEL_19;
      }
      if (*(_DWORD *)(v15 + 4 * v18) == v10
        && v8 == *v19
        && (!v8 || !memcmp(a2, (char *)v19 + *((unsigned int *)v6 + 5), v8)))
      {
        break;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  if (v18 == -1
    || (int)v18 == v9
    || (uint64_t v20 = *(void *)(*(void *)(v14 + 8 * (int)v18) + 8)) == 0
    || *(unsigned char *)(v20 + 16) != 3
    || (*(_DWORD *)(v20 + 32) & 0xFu) - 7 <= 1)
  {
LABEL_19:
    uint64_t v20 = 0;
  }
  size_t v88 = v92;
  unsigned int v89 = v92;
  uint64_t v90 = 16;
  int v91 = 0;
  uint64_t v93 = (llvm::Type *)v95;
  uint64_t v94 = 0x1000000000;
  if (v20)
  {
    if (*(unsigned char *)(v20 + 16))
    {
      if (*(unsigned char *)(v20 + 16) == 3 && (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 0) {
        goto LABEL_75;
      }
    }
    else if (*(void *)(v20 + 72) == v20 + 72 && (*(unsigned char *)(v20 + 34) & 0x80) == 0)
    {
LABEL_75:
      llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v20);
    }
    uint64_t v21 = *(void *)(v20 - 32);
    int v22 = *(_DWORD *)(v21 + 20);
    if ((v22 & 0x40000000) != 0)
    {
      int v24 = *(uint64_t **)(v21 - 8);
      uint64_t v23 = v22 & 0x7FFFFFF;
      if (!v23) {
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v23 = v22 & 0x7FFFFFF;
      int v24 = (uint64_t *)(v21 - 32 * v23);
      if (!v23) {
        goto LABEL_75;
      }
    }
    unsigned int v25 = &v24[4 * v23];
    while (1)
    {
      uint64_t v26 = *v24;
      uint64_t v27 = v89;
      uint64_t v28 = HIDWORD(v90);
      if (v89 == v88)
      {
        if (HIDWORD(v90))
        {
          int v29 = 0;
          uint64_t v30 = 8 * HIDWORD(v90);
          uint64_t v31 = v89;
          do
          {
            if (*(void *)v31 == v26) {
              goto LABEL_66;
            }
            if (*(void *)v31 == -2) {
              int v29 = v31;
            }
            v31 += 8;
            v30 -= 8;
          }
          while (v30);
          if (v29)
          {
            *(void *)int v29 = v26;
            --v91;
            goto LABEL_64;
          }
        }
        unsigned int v32 = v90;
        if (HIDWORD(v90) < v90)
        {
          ++HIDWORD(v90);
          *(void *)&v89[8 * v28] = v26;
          goto LABEL_64;
        }
      }
      else
      {
        unsigned int v32 = v90;
      }
      if (3 * v32 <= 4 * (HIDWORD(v90) - v91)) {
        break;
      }
      if (v32 - HIDWORD(v90) < v32 >> 3) {
        goto LABEL_73;
      }
LABEL_45:
      unsigned int v33 = v32 - 1;
      unsigned int v34 = (v32 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      unint64_t v35 = &v27[8 * v34];
      uint64_t v36 = *(void *)v35;
      if (*(void *)v35 != -1)
      {
        uint64_t v37 = 0;
        int v38 = 1;
        while (v36 != v26)
        {
          if (v37) {
            BOOL v39 = 0;
          }
          else {
            BOOL v39 = v36 == -2;
          }
          if (v39) {
            uint64_t v37 = v35;
          }
          unsigned int v40 = v34 + v38++;
          unsigned int v34 = v40 & v33;
          unint64_t v35 = &v27[8 * (v40 & v33)];
          uint64_t v36 = *(void *)v35;
          if (*(void *)v35 == -1) {
            goto LABEL_57;
          }
        }
        goto LABEL_66;
      }
      uint64_t v37 = 0;
LABEL_57:
      if (v37) {
        uint64_t v41 = v37;
      }
      else {
        uint64_t v41 = v35;
      }
      if (*(void *)v41 == v26) {
        goto LABEL_66;
      }
      if (*(void *)v41 == -2) {
        --v91;
      }
      else {
        ++HIDWORD(v90);
      }
      *(void *)uint64_t v41 = v26;
LABEL_64:
      if (v94 >= (unint64_t)HIDWORD(v94)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v93 + v94) = v26;
      LODWORD(v94) = v94 + 1;
LABEL_66:
      v24 += 4;
      if (v24 == v25) {
        goto LABEL_75;
      }
    }
    if (v32 >= 0x40) {
      v32 *= 2;
    }
    else {
      unsigned int v32 = 128;
    }
LABEL_73:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v88, v32);
    unsigned int v32 = v90;
    uint64_t v27 = v89;
    goto LABEL_45;
  }
  int v43 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*(void *)*a1 + 1912), 0);
  if (a5)
  {
    int v44 = &a4[a5];
    while (1)
    {
      PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(*a4, v43, v42);
      char v46 = PointerBitCastOrAddrSpaceCast;
      uint64_t v47 = v89;
      uint64_t v48 = HIDWORD(v90);
      if (v89 == v88)
      {
        if (HIDWORD(v90))
        {
          uint64_t v49 = 0;
          uint64_t v50 = 8 * HIDWORD(v90);
          uint64_t v51 = (llvm::ConstantExpr **)v89;
          while (*v51 != PointerBitCastOrAddrSpaceCast)
          {
            if (*v51 == (llvm::ConstantExpr *)-2) {
              uint64_t v49 = v51;
            }
            ++v51;
            v50 -= 8;
            if (!v50)
            {
              if (!v49) {
                goto LABEL_86;
              }
              *uint64_t v49 = PointerBitCastOrAddrSpaceCast;
              --v91;
              goto LABEL_110;
            }
          }
          goto LABEL_112;
        }
LABEL_86:
        unsigned int v52 = v90;
        if (HIDWORD(v90) < v90)
        {
          ++HIDWORD(v90);
          *(void *)&v89[8 * v48] = PointerBitCastOrAddrSpaceCast;
          goto LABEL_110;
        }
      }
      else
      {
        unsigned int v52 = v90;
      }
      if (3 * v52 <= 4 * (HIDWORD(v90) - v91)) {
        break;
      }
      if (v52 - HIDWORD(v90) < v52 >> 3) {
        goto LABEL_119;
      }
LABEL_91:
      unsigned int v53 = v52 - 1;
      unsigned int v54 = (v52 - 1) & ((v46 >> 4) ^ (v46 >> 9));
      uint64_t v55 = &v47[8 * v54];
      unint64_t v56 = *(llvm::ConstantExpr **)v55;
      if (*(void *)v55 != -1)
      {
        uint64_t v57 = 0;
        int v58 = 1;
        while (v56 != v46)
        {
          if (v57) {
            BOOL v59 = 0;
          }
          else {
            BOOL v59 = v56 == (llvm::ConstantExpr *)-2;
          }
          if (v59) {
            uint64_t v57 = v55;
          }
          unsigned int v60 = v54 + v58++;
          unsigned int v54 = v60 & v53;
          uint64_t v55 = &v47[8 * (v60 & v53)];
          unint64_t v56 = *(llvm::ConstantExpr **)v55;
          if (*(void *)v55 == -1) {
            goto LABEL_103;
          }
        }
        goto LABEL_112;
      }
      uint64_t v57 = 0;
LABEL_103:
      if (v57) {
        char v61 = (llvm::ConstantExpr **)v57;
      }
      else {
        char v61 = (llvm::ConstantExpr **)v55;
      }
      if (*v61 == v46) {
        goto LABEL_112;
      }
      if (*v61 == (llvm::ConstantExpr *)-2) {
        --v91;
      }
      else {
        ++HIDWORD(v90);
      }
      void *v61 = v46;
LABEL_110:
      if (v94 >= (unint64_t)HIDWORD(v94)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v93 + v94) = v46;
      LODWORD(v94) = v94 + 1;
LABEL_112:
      if (++a4 == v44) {
        goto LABEL_121;
      }
    }
    if (v52 >= 0x40) {
      v52 *= 2;
    }
    else {
      unsigned int v52 = 128;
    }
LABEL_119:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v88, v52);
    unsigned int v52 = v90;
    uint64_t v47 = v89;
    goto LABEL_91;
  }
LABEL_121:
  if (v94)
  {
    char v62 = llvm::ArrayType::get(v43, (llvm::Type *)v94);
    unint64_t v63 = (char *)operator new(0x78uLL);
    long long v64 = v63 + 32;
    *((_DWORD *)v63 + 13) = *((_DWORD *)v63 + 13) & 0x38000000 | 1;
    *(void *)unint64_t v63 = 0;
    *((void *)v63 + 1) = 0;
    *((void *)v63 + 2) = 0;
    *((void *)v63 + 3) = v63 + 32;
    uint64_t v65 = llvm::ConstantArray::get(v62, v93, v94);
    __int16 v87 = 261;
    v86[0] = (const char *)a2;
    v86[1] = __n;
    llvm::GlobalVariable::GlobalVariable((unint64_t *)v63 + 4, (uint64_t)a1, v62, 0, 6, (unint64_t)v65, v86, 0, 0, 0, 0);
    uint64_t v66 = llvm::UniqueStringSaver::save(***((void ***)v63 + 4) + 2136, "llvm.metadata", 0xDuLL);
    uint64_t v68 = v67;
    uint64_t v69 = ***((void ***)v63 + 4);
    v86[0] = v63 + 32;
    int v70 = *(_DWORD *)(v69 + 2520);
    if (v70)
    {
      uint64_t v71 = *(void *)(v69 + 2504);
      int v72 = v70 - 1;
      unsigned int v73 = v72 & ((v64 >> 4) ^ (v64 >> 9));
      int v74 = (char **)(v71 + 24 * v73);
      __int16 v75 = *v74;
      if (*v74 == v64)
      {
LABEL_124:
        v74[1] = v66;
        v74[2] = v68;
        *((_DWORD *)v63 + 16) = *((_DWORD *)v63 + 16) & 0xFFBFFFFF | ((v68 != 0) << 22);
        goto LABEL_125;
      }
      char v76 = 0;
      int v77 = 1;
      while (v75 != (char *)-4096)
      {
        if (v76) {
          BOOL v78 = 0;
        }
        else {
          BOOL v78 = v75 == (char *)-8192;
        }
        if (v78) {
          char v76 = v74;
        }
        unsigned int v79 = v73 + v77++;
        unsigned int v73 = v79 & v72;
        int v74 = (char **)(v71 + 24 * v73);
        __int16 v75 = *v74;
        if (*v74 == v64) {
          goto LABEL_124;
        }
      }
      if (v76) {
        BOOL v80 = v76;
      }
      else {
        BOOL v80 = v74;
      }
    }
    else
    {
      BOOL v80 = 0;
    }
    int v74 = (char **)sub_1CC5BF31C(v69 + 2504, (uint64_t)v86, (uint64_t *)v86, v80);
    int v81 = v86[0];
    v74[1] = 0;
    v74[2] = 0;
    uint64_t *v74 = (char *)v81;
    goto LABEL_124;
  }
LABEL_125:
  if (v93 != (llvm::Type *)v95) {
    free(v93);
  }
  if (v89 != v88) {
    free(v89);
  }
}

uint64_t sub_1CD1CF830(llvm::Value **a1, llvm::Value **a2)
{
  int v3 = llvm::Value::stripPointerCasts(*a1);
  unint64_t v4 = llvm::Value::stripPointerCasts(*a2);
  if ((*((unsigned char *)v3 + 23) & 0x10) != 0)
  {
    uint64_t v5 = ***(void ***)v3;
    uint64_t v6 = *(void *)(v5 + 152);
    uint64_t v7 = *(unsigned int *)(v5 + 168);
    if (v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v9 = (llvm::Value **)(v6 + 16 * v8);
      int v10 = *v9;
      if (*v9 == v3)
      {
LABEL_9:
        int v13 = v9[1];
        size_t v16 = *(void *)v13;
        uint64_t v14 = (char *)v13 + 16;
        size_t v15 = v16;
        goto LABEL_10;
      }
      int v11 = 1;
      while (v10 != (llvm::Value *)-4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & (v7 - 1);
        int v10 = *(llvm::Value **)(v6 + 16 * v8);
        if (v10 == v3)
        {
          uint64_t v9 = (llvm::Value **)(v6 + 16 * v8);
          goto LABEL_9;
        }
      }
    }
    uint64_t v9 = (llvm::Value **)(v6 + 16 * v7);
    goto LABEL_9;
  }
  size_t v15 = 0;
  uint64_t v14 = &byte_1CFBCE98E;
LABEL_10:
  if ((*((unsigned char *)v4 + 23) & 0x10) != 0)
  {
    uint64_t v17 = ***(void ***)v4;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
      int v22 = *v21;
      if (*v21 == v4)
      {
LABEL_18:
        unsigned int v25 = v21[1];
        size_t v28 = *(void *)v25;
        uint64_t v26 = (char *)v25 + 16;
        size_t v27 = v28;
        goto LABEL_19;
      }
      int v23 = 1;
      while (v22 != (llvm::Value *)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        int v22 = *(llvm::Value **)(v18 + 16 * v20);
        if (v22 == v4)
        {
          uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
          goto LABEL_18;
        }
      }
    }
    uint64_t v21 = (llvm::Value **)(v18 + 16 * v19);
    goto LABEL_18;
  }
  size_t v27 = 0;
  uint64_t v26 = &byte_1CFBCE98E;
LABEL_19:
  if (v27 >= v15) {
    size_t v29 = v15;
  }
  else {
    size_t v29 = v27;
  }
  if (v29)
  {
    int v30 = memcmp(v14, v26, v29);
    if (v30) {
      return (v30 >> 31) | 1u;
    }
  }
  if (v15 < v27) {
    unsigned int v32 = -1;
  }
  else {
    unsigned int v32 = 1;
  }
  if (v15 == v27) {
    return 0;
  }
  else {
    return v32;
  }
}

llvm::GlobalAlias *sub_1CD1CF9B0(llvm::GlobalAlias *result, llvm::GlobalAlias *this)
{
  uint64_t v2 = (uint64_t)result;
  int v3 = *((unsigned __int8 *)this + 16);
  if (*((unsigned char *)this + 16))
  {
    if (v3 == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return result;
    }
  }
  else if (*((llvm::GlobalAlias **)this + 9) == (llvm::GlobalAlias *)((char *)this + 72) {
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  }
  {
    return result;
  }
  unsigned int v4 = this >> 4;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v5 = ***(void ***)this;
    uint64_t v6 = *(void *)(v5 + 152);
    uint64_t v7 = *(unsigned int *)(v5 + 168);
    if (v7)
    {
      LODWORD(v8) = (v7 - 1) & (v4 ^ (this >> 9));
      uint64_t v9 = v6 + 16 * v8;
      int v10 = *(llvm::GlobalAlias **)v9;
      if (*(llvm::GlobalAlias **)v9 == this)
      {
LABEL_15:
        uint64_t v13 = *(void *)(v9 + 8);
        if (*(void *)v13 >= 5uLL)
        {
          int v14 = *(_DWORD *)(v13 + 16);
          int v15 = *(unsigned __int8 *)(v13 + 20);
          if (v14 == 1836477548 && v15 == 46) {
            return result;
          }
        }
        goto LABEL_20;
      }
      int v11 = 1;
      while (v10 != (llvm::GlobalAlias *)-4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & (v7 - 1);
        int v10 = *(llvm::GlobalAlias **)(v6 + 16 * v8);
        if (v10 == this)
        {
          uint64_t v9 = v6 + 16 * v8;
          goto LABEL_15;
        }
      }
    }
    uint64_t v9 = v6 + 16 * v7;
    goto LABEL_15;
  }
LABEL_20:
  if ((*((unsigned char *)this + 32) & 0xF) == 0)
  {
    if (v3 == 2
      || (unint64_t result = this, v3 == 1)
      && (unsigned int v31 = this >> 4,
          unsigned int v32 = this,
          unint64_t result = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(this),
          unsigned int v4 = v31,
          this = v32,
          !result)
      || !*((void *)result + 6))
    {
      uint64_t v17 = *(int **)(v2 + 8);
      **(unsigned char **)uint64_t v2 = 1;
      if ((*((unsigned char *)this + 23) & 0x10) == 0)
      {
        size_t v28 = 0;
        size_t v27 = (int *)&byte_1CFBCE98E;
        goto LABEL_33;
      }
      uint64_t v18 = ***(void ***)this;
      uint64_t v19 = *(void *)(v18 + 152);
      uint64_t v20 = *(unsigned int *)(v18 + 168);
      if (v20)
      {
        LODWORD(v21) = (v20 - 1) & (v4 ^ (this >> 9));
        uint64_t v22 = v19 + 16 * v21;
        int v23 = *(llvm::GlobalAlias **)v22;
        if (*(llvm::GlobalAlias **)v22 == this)
        {
LABEL_32:
          uint64_t v26 = *(void **)(v22 + 8);
          size_t v29 = *v26;
          size_t v27 = (int *)(v26 + 2);
          size_t v28 = v29;
LABEL_33:
          llvm::MD5::update(v17, v27, v28);
          int v30 = *(int **)(v2 + 8);
          LOBYTE(__src) = 0;
          return (llvm::GlobalAlias *)llvm::MD5::update(v30, &__src, 1uLL);
        }
        int v24 = 1;
        while (v23 != (llvm::GlobalAlias *)-4096)
        {
          int v25 = v21 + v24++;
          uint64_t v21 = v25 & (v20 - 1);
          int v23 = *(llvm::GlobalAlias **)(v19 + 16 * v21);
          if (v23 == this)
          {
            uint64_t v22 = v19 + 16 * v21;
            goto LABEL_32;
          }
        }
      }
      uint64_t v22 = v19 + 16 * v20;
      goto LABEL_32;
    }
  }
  return result;
}

BOOL llvm::nameUnamedGlobals(llvm *this, llvm::Module *a2)
{
  unsigned __int8 v26 = 0;
  uint64_t v22 = this;
  __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v21 = 0;
  v20[0] = (uint64_t)&v22;
  v20[1] = (uint64_t)&v21;
  v20[2] = (uint64_t)&v26;
  int v3 = (char *)this + 24;
  unsigned int v4 = (char *)*((void *)this + 4);
  uint64_t v5 = (char *)this + 8;
  uint64_t v6 = (char *)*((void *)this + 2);
  size_t v16 = v4;
  uint64_t v17 = v6;
  uint64_t v18 = (char *)this + 24;
  uint64_t v19 = (char *)this + 8;
  while (1)
  {
    if (v4 == v3 && v6 == v5)
    {
      BOOL v7 = v18 == v3 && v19 == v5;
      if (v7) {
        break;
      }
    }
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = (llvm::Value *)(*(uint64_t (**)(char **, llvm::Module *))((char *)&off_1F2648BA0 + v8))(&v16, a2);
      v8 += 16;
    }
    while (!v9);
    sub_1CD1CFCE4(v20, v9);
    uint64_t v10 = 0;
    do
    {
      if ((*(uint64_t (**)(char **))((char *)&off_1F2648B80 + v10))(&v16)) {
        break;
      }
      BOOL v7 = v10 == 16;
      v10 += 16;
    }
    while (!v7);
    unsigned int v4 = v16;
    uint64_t v6 = v17;
  }
  int v11 = (char *)this + 40;
  for (uint64_t i = *((void *)this + 6); (char *)i != v11; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v13 = (llvm::Value *)(i - 48);
    }
    else {
      uint64_t v13 = 0;
    }
    sub_1CD1CFCE4(v20, v13);
  }
  int v14 = v26;
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  return v14 != 0;
}

void sub_1CD1CFCE4(uint64_t *a1, llvm::Value *this)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    v59[0] = "anon.";
    __int16 v60 = 259;
    uint64_t v5 = (uint64_t *)*a1;
    uint64_t v6 = (long long *)(*a1 + 8);
    if (*(char *)(*a1 + 31) < 0) {
      uint64_t v7 = v5[2];
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(*a1 + 31);
    }
    if (v7)
    {
      uint64_t v8 = "anon.";
      BOOL v9 = 1;
      char v10 = 3;
      goto LABEL_7;
    }
    long long v71 = xmmword_1CFAC4320;
    uint64_t v72 = 0;
    uint64_t v15 = *v5;
    uint64_t v16 = *v5 + 24;
    uint64_t v17 = *(void *)(*v5 + 32);
    if (v17 != v16)
    {
      while (1)
      {
        uint64_t v18 = (uint64_t ***)(v17 - 56);
        if (v17)
        {
          if (*(unsigned char *)(v17 - 40) == 3)
          {
            if ((*(_DWORD *)(v17 - 36) & 0x7FFFFFF) != 0) {
              goto LABEL_23;
            }
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
        if (*((unsigned char *)v18 + 16) || v18[9] != (uint64_t **)(v18 + 9) || (*((unsigned char *)v18 + 34) & 0x80) != 0)
        {
LABEL_23:
          if ((v18[4] & 0xFu) - 7 >= 2 && (*((unsigned char *)v18 + 23) & 0x10) != 0)
          {
            uint64_t v19 = ***v18;
            uint64_t v20 = *(void *)(v19 + 152);
            uint64_t v21 = *(unsigned int *)(v19 + 168);
            if (v21)
            {
              LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
              int v23 = (uint64_t ****)(v20 + 16 * v22);
              uint64_t v24 = *v23;
              if (*v23 != v18)
              {
                int v25 = 1;
                do
                {
                  if (v24 == (uint64_t ***)-4096) {
                    goto LABEL_31;
                  }
                  int v26 = v22 + v25++;
                  uint64_t v22 = v26 & (v21 - 1);
                  uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
                }
                while (v24 != v18);
                int v23 = (uint64_t ****)(v20 + 16 * v22);
              }
            }
            else
            {
LABEL_31:
              int v23 = (uint64_t ****)(v20 + 16 * v21);
            }
            llvm::MD5::update((int *)&v71, (int *)v23[1] + 4, (size_t)*v23[1]);
          }
        }
LABEL_33:
        uint64_t v17 = *(void *)(v17 + 8);
        if (v17 == v16)
        {
          uint64_t v15 = *v5;
          break;
        }
      }
    }
    uint64_t v27 = v15 + 8;
    for (uint64_t i = *(void *)(v15 + 16); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v27)
      {
        llvm::MD5::final((int *)&v71, (int *)&v70);
        int __src = &v68;
        *(_OWORD *)__len = xmmword_1CDC7F9D0;
        llvm::MD5::stringifyResult((unsigned __int8 *)&v70, &__src);
        size_t v38 = __len[0];
        if (__len[0] >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        BOOL v39 = __src;
        if (__len[0] >= 0x17)
        {
          size_t v41 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len[0] | 7) != 0x17) {
            size_t v41 = __len[0] | 7;
          }
          size_t v42 = v41 + 1;
          p_dst = (long long *)operator new(v41 + 1);
          *((void *)&__dst + 1) = v38;
          *(void *)&long long v62 = v42 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          BYTE7(v62) = __len[0];
          p_dst = &__dst;
          if (!__len[0])
          {
LABEL_64:
            *((unsigned char *)p_dst + v38) = 0;
            if (*((char *)v5 + 31) < 0) {
              operator delete(*(void **)v6);
            }
            *uint64_t v6 = __dst;
            *((void *)v6 + 2) = v62;
            if (__src != &v68) {
              free(__src);
            }
            char v10 = v60;
            if (v60 == 1)
            {
              *(void *)&long long __dst = v6;
              long long v62 = v70;
              __int16 v63 = 260;
              int v64 = v57;
              __int16 v65 = v58;
              char v11 = 4;
              uint64_t v8 = (const char *)*((void *)&__dst + 1);
            }
            else
            {
              if (!(_BYTE)v60)
              {
                __int16 v63 = 256;
                __int16 v69 = 256;
                ++*(_DWORD *)a1[1];
                char v14 = 1;
LABEL_11:
                char v73 = v10;
                char v74 = v14;
                llvm::Value::setNameImpl(this, (const char **)&v71);
                if (*((unsigned char *)this + 16))
                {
LABEL_12:
                  *(unsigned char *)a1[2] = 1;
                  return;
                }
                if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                  goto LABEL_89;
                }
                uint64_t v43 = ***(void ***)this;
                uint64_t v44 = *(void *)(v43 + 152);
                uint64_t v45 = *(unsigned int *)(v43 + 168);
                if (!v45) {
                  goto LABEL_81;
                }
                LODWORD(v46) = (v45 - 1) & ((this >> 4) ^ (this >> 9));
                uint64_t v47 = v44 + 16 * v46;
                uint64_t v48 = *(llvm::Value **)v47;
                if (*(llvm::Value **)v47 != this)
                {
                  int v49 = 1;
                  while (v48 != (llvm::Value *)-4096)
                  {
                    int v50 = v46 + v49++;
                    uint64_t v46 = v50 & (v45 - 1);
                    uint64_t v48 = *(llvm::Value **)(v44 + 16 * v46);
                    if (v48 == this)
                    {
                      uint64_t v47 = v44 + 16 * v46;
                      goto LABEL_82;
                    }
                  }
LABEL_81:
                  uint64_t v47 = v44 + 16 * v45;
                }
LABEL_82:
                uint64_t v51 = *(void **)(v47 + 8);
                unint64_t v54 = *v51;
                unsigned int v52 = v51 + 2;
                unint64_t v53 = v54;
                if (v54 >= 5 && (*(_DWORD *)v52 == *(_DWORD *)"llvm." ? (BOOL v55 = v52[4] == aLlvm_1[4]) : (BOOL v55 = 0), v55))
                {
                  *((_DWORD *)this + 8) |= 0x2000u;
                  int v56 = llvm::Function::lookupIntrinsicID(v52, v53);
                }
                else
                {
LABEL_89:
                  int v56 = 0;
                  *((_DWORD *)this + 8) &= ~0x2000u;
                }
                *((_DWORD *)this + 9) = v56;
                goto LABEL_12;
              }
              uint64_t v8 = (const char *)v59[0];
              uint64_t v2 = v59[1];
              BOOL v9 = HIBYTE(v60) == 1;
              if (HIBYTE(v60) != 1) {
                char v10 = 2;
              }
LABEL_7:
              if (!v9) {
                uint64_t v8 = (const char *)v59;
              }
              *(void *)&long long __dst = v8;
              *((void *)&__dst + 1) = v2;
              *(void *)&long long v62 = v6;
              LOBYTE(v63) = v10;
              HIBYTE(v63) = 4;
              char v11 = 2;
              uint64_t v6 = &__dst;
            }
            int __src = v6;
            __len[0] = (size_t)v8;
            __len[1] = (size_t)".";
            LOBYTE(v69) = v11;
            HIBYTE(v69) = 3;
            int v12 = (_DWORD *)a1[1];
            uint64_t v13 = *v12;
            *int v12 = v13 + 1;
            *(void *)&long long v71 = &__src;
            uint64_t v72 = v13;
            char v14 = 9;
            char v10 = 2;
            goto LABEL_11;
          }
        }
        memmove(p_dst, v39, v38);
        goto LABEL_64;
      }
      size_t v29 = (uint64_t ***)(i - 56);
      if (!i) {
        break;
      }
      if (*(unsigned char *)(i - 40) != 3) {
        goto LABEL_42;
      }
      if ((*(_DWORD *)(i - 36) & 0x7FFFFFF) == 0) {
        continue;
      }
LABEL_45:
      if ((v29[4] & 0xFu) - 7 >= 2 && (*((unsigned char *)v29 + 23) & 0x10) != 0)
      {
        uint64_t v30 = ***v29;
        uint64_t v31 = *(void *)(v30 + 152);
        uint64_t v32 = *(unsigned int *)(v30 + 168);
        if (!v32) {
          goto LABEL_53;
        }
        LODWORD(v33) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
        unsigned int v34 = (uint64_t ****)(v31 + 16 * v33);
        unint64_t v35 = *v34;
        if (*v34 != v29)
        {
          int v36 = 1;
          while (v35 != (uint64_t ***)-4096)
          {
            int v37 = v33 + v36++;
            uint64_t v33 = v37 & (v32 - 1);
            unint64_t v35 = *(uint64_t ****)(v31 + 16 * v33);
            if (v35 == v29)
            {
              unsigned int v34 = (uint64_t ****)(v31 + 16 * v33);
              goto LABEL_54;
            }
          }
LABEL_53:
          unsigned int v34 = (uint64_t ****)(v31 + 16 * v32);
        }
LABEL_54:
        llvm::MD5::update((int *)&v71, (int *)v34[1] + 4, (size_t)*v34[1]);
        continue;
      }
LABEL_55:
      ;
    }
    size_t v29 = 0;
LABEL_42:
    if (!*((unsigned char *)v29 + 16) && v29[9] == (uint64_t **)(v29 + 9) && (*((unsigned char *)v29 + 34) & 0x80) == 0) {
      goto LABEL_55;
    }
    goto LABEL_45;
  }
}

void llvm::initializeNameAnonGlobalLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD6A0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD1D02E4;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCFD6A0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD1D02E4()
{
}

void sub_1CD1D0380()
{
}

void sub_1CD1D03E0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD1D0418()
{
  return "Name Anon Globals";
}

BOOL sub_1CD1D0428(int a1, llvm *this)
{
  return llvm::nameUnamedGlobals(this, this);
}

void llvm::initializePredicateInfoPrinterLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD6A8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD1D04A0;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCFD6A8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD1D04A0(uint64_t a1)
{
}

uint64_t llvm::PredicateInfoBuilder::stackIsInScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (!v3) {
    return v3;
  }
  uint64_t v4 = *(void *)a2 + 48 * v3;
  if (!*(unsigned char *)(v4 - 8))
  {
    if (*(_DWORD *)a3 >= *(_DWORD *)(v4 - 48)) {
      return *(_DWORD *)(a3 + 4) <= *(_DWORD *)(v4 - 44);
    }
    return 0;
  }
  uint64_t v5 = *(const llvm::Use **)(a3 + 24);
  if (!v5) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v6 = *((void *)v5 + 3);
  if (v6 && *(unsigned char *)(v6 + 16) == 83)
  {
    int v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v8 = v6 - 32 * (v7 & 0x7FFFFFF);
    }
    uint64_t v9 = *(void *)(v8 + 32 * *(unsigned int *)(v6 + 60) + 8 * (((unint64_t)v5 - v8) >> 5));
    uint64_t v10 = *(void *)(v4 - 16);
    if (v9 == *(void *)(v10 + 56))
    {
      int v12 = *(llvm::DominatorTree **)(a1 + 16);
      uint64_t v13 = *(void *)(v10 + 64);
      v14[0] = v9;
      v14[1] = v13;
      return llvm::DominatorTree::dominates(v12, (const llvm::BasicBlockEdge *)v14, v5);
    }
    return 0;
  }
  return v3;
}

uint64_t llvm::PredicateInfoBuilder::popStackUntilDFSScope(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v5 = result;
    do
    {
      unint64_t result = llvm::PredicateInfoBuilder::stackIsInScope(v5, a2, a3);
      if (result) {
        break;
      }
      int v6 = *(_DWORD *)(a2 + 8) - 1;
      *(_DWORD *)(a2 + 8) = v6;
    }
    while (v6);
  }
  return result;
}

_OWORD *llvm::PredicateInfoBuilder::convertUsesToDFSOrdered(_OWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(void *)(v3 + 24);
      unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
      if (v6) {
        BOOL v8 = v7 >= 0x1C;
      }
      else {
        BOOL v8 = 0;
      }
      if (!v8) {
        goto LABEL_24;
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      char v31 = 0;
      uint64_t v30 = 0;
      if (v7 == 83)
      {
        int v9 = *(_DWORD *)(v6 + 20);
        if ((v9 & 0x40000000) != 0) {
          uint64_t v10 = *(void *)(v6 - 8);
        }
        else {
          uint64_t v10 = v6 - 32 * (v9 & 0x7FFFFFF);
        }
        char v11 = (uint64_t *)(v10
                        + 32 * *(unsigned int *)(v6 + 60)
                        + 8 * ((unint64_t)(v3 - v10) >> 5));
        int v12 = 2;
      }
      else
      {
        char v11 = (uint64_t *)(v6 + 40);
        int v12 = 1;
      }
      uint64_t v13 = *v11;
      int v27 = v12;
      uint64_t v14 = *((void *)v5 + 2);
      uint64_t v15 = *(void *)(v14 + 24);
      uint64_t v16 = *(unsigned int *)(v14 + 40);
      if (v16)
      {
        LODWORD(v17) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
        uint64_t v19 = *v18;
        if (v13 == *v18) {
          goto LABEL_21;
        }
        int v20 = 1;
        while (v19 != -4096)
        {
          int v21 = v17 + v20++;
          uint64_t v17 = v21 & (v16 - 1);
          uint64_t v19 = *(void *)(v15 + 16 * v17);
          if (v13 == v19)
          {
            uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
            goto LABEL_21;
          }
        }
      }
      uint64_t v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_21:
      if (v18 != (uint64_t *)(v15 + 16 * v16))
      {
        uint64_t v22 = v18[1];
        if (v22)
        {
          uint64_t v26 = *(void *)(v22 + 72);
          uint64_t v29 = v3;
          unint64_t result = (_OWORD *)sub_1CC1B48A4(a3, (unint64_t)&v26);
          int v23 = (_OWORD *)(*(void *)a3 + 48 * *(unsigned int *)(a3 + 8));
          long long v25 = result[1];
          long long v24 = result[2];
          *int v23 = *result;
          v23[1] = v25;
          v23[2] = v24;
          ++*(_DWORD *)(a3 + 8);
        }
      }
LABEL_24:
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

BOOL llvm::shouldRename(llvm *this, llvm::Value *a2)
{
  unsigned int v2 = *((unsigned __int8 *)this + 16);
  if (v2 <= 0x1B && v2 != 21) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  return !v4 || *(void *)(v4 + 8) != 0;
}

uint64_t llvm::collectCmpOps(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result - 64);
  uint64_t v3 = *(void *)(result - 32);
  if (v2 != v3)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v4) = v2;
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    unsigned int v6 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v6;
    if (v6 >= v5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v6) = v3;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t llvm::PredicateInfoBuilder::addInfoFor(llvm::PredicateInfoBuilder *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t result = llvm::PredicateInfoBuilder::getOrCreateValueInfo(a1, a3);
  unsigned int v9 = *(_DWORD *)(result + 8);
  if (!v9)
  {
    unsigned int v12 = *(_DWORD *)(a2 + 8);
    if (v12 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v12) = a3;
    ++*(_DWORD *)(a2 + 8);
    unsigned int v9 = *(_DWORD *)(result + 8);
  }
  uint64_t v10 = (uint64_t *)(*(void *)a1 + 8);
  uint64_t v11 = *v10;
  *(void *)(a4 + 8) = *v10;
  *(void *)(a4 + 16) = v10;
  *(void *)(v11 + 8) = a4 + 8;
  *uint64_t v10 = a4 + 8;
  if (v9 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v9) = a4;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t llvm::PredicateInfoBuilder::getOrCreateValueInfo(llvm::PredicateInfoBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 198);
  uint64_t v5 = *((unsigned int *)this + 400);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = v4 + 16 * v6;
    BOOL v8 = *(llvm::Value **)v7;
    if (*(llvm::Value **)v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != (llvm::Value *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      BOOL v8 = *(llvm::Value **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = v4 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = v4 + 16 * v5;
LABEL_8:
  uint64_t v11 = (uint64_t *)((char *)this + 32);
  if (v7 == v4 + 16 * v5)
  {
    sub_1CD1D3698((uint64_t)v11, *((unsigned int *)this + 10) + 1);
    int v15 = *((_DWORD *)this + 10) - 1;
    uint64_t v16 = a2;
    int v17 = v15;
    sub_1CC6125EC((uint64_t)this + 1584, (uint64_t *)&v16, &v17, (uint64_t)v18);
    unsigned int v12 = *(_DWORD *)(v18[0] + 8);
    uint64_t v13 = *((void *)this + 4);
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(v7 + 8);
    uint64_t v13 = *v11;
  }
  return v13 + 48 * v12;
}

void llvm::PredicateInfoBuilder::processAssume(uint64_t a1, uint64_t a2)
{
  v41[4] = *MEMORY[0x1E4F143B8];
  size_t v38 = v41;
  unsigned int v40 = 4;
  uint64_t v29 = v33;
  uint64_t v30 = v33;
  uint64_t v31 = 4;
  int v32 = 0;
  v41[0] = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  unsigned int v2 = 1;
  do
  {
    uint64_t v3 = *((void *)v38 + v2 - 1);
    unsigned int v39 = v2 - 1;
    uint64_t v4 = v30;
    uint64_t v5 = HIDWORD(v31);
    if (v30 == v29)
    {
      if (HIDWORD(v31))
      {
        uint64_t v6 = 0;
        uint64_t v7 = 8 * HIDWORD(v31);
        BOOL v8 = (uint64_t *)v30;
        while (*v8 != v3)
        {
          if (*v8 == -2) {
            uint64_t v6 = v8;
          }
          ++v8;
          v7 -= 8;
          if (!v7)
          {
            if (!v6) {
              goto LABEL_10;
            }
            *uint64_t v6 = v3;
            --v32;
            goto LABEL_12;
          }
        }
        goto LABEL_28;
      }
LABEL_10:
      unsigned int v9 = v31;
      if (HIDWORD(v31) < v31)
      {
        ++HIDWORD(v31);
        *(void *)&v30[8 * v5] = v3;
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v9 = v31;
    }
    if (3 * v9 <= 4 * (HIDWORD(v31) - v32))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - HIDWORD(v31) >= v9 >> 3)
    {
      goto LABEL_33;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v29, v9);
    unsigned int v9 = v31;
    uint64_t v4 = v30;
LABEL_33:
    unsigned int v17 = v9 - 1;
    unsigned int v18 = (v9 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v19 = &v4[8 * v18];
    uint64_t v20 = *(void *)v19;
    if (*(void *)v19 == -1)
    {
      int v21 = 0;
LABEL_45:
      if (v21) {
        long long v25 = v21;
      }
      else {
        long long v25 = (uint64_t *)v19;
      }
      if (*v25 != v3)
      {
        if (*v25 == -2) {
          --v32;
        }
        else {
          ++HIDWORD(v31);
        }
        *long long v25 = v3;
LABEL_12:
        if ((HIDWORD(v31) - v32) > 8) {
          break;
        }
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unsigned int v34 = &v28;
        uint64_t v35 = (uint64_t)&v27;
        if (sub_1CB90D004((void **)&v34, v3))
        {
          if (v39 >= (unint64_t)v40) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v38 + v39) = v27;
          unsigned int v26 = v39 + 1;
          unsigned int v39 = v26;
          if (v26 >= v40) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v38 + v26) = v28;
          ++v39;
        }
        unsigned int v34 = &v36;
        uint64_t v36 = v3;
        int v10 = v37;
        uint64_t v11 = (char *)&v36;
        uint64_t v35 = 0x400000001;
        if (v3
          && (v12 = *(unsigned __int8 *)(v3 + 16), int v10 = v37, v11 = (char *)&v36, v12 >= 0x1C)
          && (int v10 = v37, v11 = (char *)&v36, v12 - 83 >= 0xFFFFFFFE))
        {
          llvm::collectCmpOps(v3, (uint64_t)&v34);
          uint64_t v16 = (uint64_t *)v34;
          if (v35)
          {
            uint64_t v11 = (char *)v34;
            int v10 = (char *)v34 + 8 * v35;
            goto LABEL_17;
          }
        }
        else
        {
          do
          {
LABEL_17:
            unsigned int v13 = *(unsigned __int8 *)(*(void *)v11 + 16);
            if (v13 > 0x1B || v13 == 21)
            {
              uint64_t v15 = *(void *)(*(void *)v11 + 8);
              if (!v15 || *(void *)(v15 + 8)) {
                operator new();
              }
            }
            v11 += 8;
          }
          while (v11 != v10);
          uint64_t v16 = (uint64_t *)v34;
        }
        if (v16 != &v36) {
          free(v16);
        }
      }
    }
    else
    {
      int v21 = 0;
      int v22 = 1;
      while (v20 != v3)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          int v21 = (uint64_t *)v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = &v4[8 * (v24 & v17)];
        uint64_t v20 = *(void *)v19;
        if (*(void *)v19 == -1) {
          goto LABEL_45;
        }
      }
    }
LABEL_28:
    unsigned int v2 = v39;
  }
  while (v39);
  if (v30 != v29) {
    free(v30);
  }
  if (v38 != v41) {
    free(v38);
  }
}

void llvm::PredicateInfoBuilder::processBranch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = 0;
  uint64_t v5 = 0;
  void v52[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 - 32);
  uint64_t v7 = *(void *)(a2 - 64);
  v52[0] = v6;
  v52[1] = v7;
  do
  {
    char v8 = v4;
    uint64_t v9 = v52[v5];
    if (v9 == a3) {
      goto LABEL_64;
    }
    char v35 = v4;
    uint64_t v48 = v51;
    unsigned int v50 = 4;
    unsigned int v39 = v43;
    unsigned int v40 = v43;
    uint64_t v41 = 4;
    int v42 = 0;
    v51[0] = *(void *)(a2 - 96);
    unsigned int v10 = 1;
    do
    {
      uint64_t v11 = v48[v10 - 1];
      unsigned int v49 = v10 - 1;
      unsigned int v12 = v40;
      uint64_t v13 = HIDWORD(v41);
      if (v40 == v39)
      {
        if (HIDWORD(v41))
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * HIDWORD(v41);
          uint64_t v16 = (uint64_t *)v40;
          while (*v16 != v11)
          {
            if (*v16 == -2) {
              uint64_t v14 = v16;
            }
            ++v16;
            v15 -= 8;
            if (!v15)
            {
              if (!v14) {
                goto LABEL_12;
              }
              uint64_t *v14 = v11;
              --v42;
              goto LABEL_14;
            }
          }
          goto LABEL_50;
        }
LABEL_12:
        unsigned int v17 = v41;
        if (HIDWORD(v41) < v41)
        {
          ++HIDWORD(v41);
          *(void *)&v40[8 * v13] = v11;
          goto LABEL_14;
        }
      }
      else
      {
        unsigned int v17 = v41;
      }
      if (3 * v17 <= 4 * (HIDWORD(v41) - v42))
      {
        if (v17 >= 0x40) {
          v17 *= 2;
        }
        else {
          unsigned int v17 = 128;
        }
      }
      else if (v17 - HIDWORD(v41) >= v17 >> 3)
      {
        goto LABEL_27;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v39, v17);
      unsigned int v17 = v41;
      unsigned int v12 = v40;
LABEL_27:
      unsigned int v21 = v17 - 1;
      unsigned int v22 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      BOOL v23 = &v12[8 * v22];
      uint64_t v24 = *(void *)v23;
      if (*(void *)v23 == -1)
      {
        long long v25 = 0;
LABEL_53:
        if (v25) {
          int v32 = v25;
        }
        else {
          int v32 = (uint64_t *)v23;
        }
        if (*v32 != v11)
        {
          if (*v32 == -2) {
            --v42;
          }
          else {
            ++HIDWORD(v41);
          }
          uint64_t *v32 = v11;
LABEL_14:
          if ((HIDWORD(v41) - v42) > 8) {
            break;
          }
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          if (v9 == v6)
          {
            uint64_t v44 = &v38;
            uint64_t v45 = (uint64_t)&v37;
            if (sub_1CB90D004((void **)&v44, v11)) {
              goto LABEL_67;
            }
          }
          else
          {
            v36[0] = &v38;
            v36[1] = &v37;
            if (sub_1CB90D1A4(v36, v11))
            {
LABEL_67:
              if (v49 >= (unint64_t)v50) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v48[v49] = v37;
              unsigned int v33 = v49 + 1;
              unsigned int v49 = v33;
              if (v33 >= v50) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v48[v33] = v38;
              ++v49;
            }
          }
          uint64_t v44 = &v46;
          uint64_t v46 = v11;
          unsigned int v18 = v47;
          uint64_t v19 = &v46;
          uint64_t v45 = 0x400000001;
          if (v11
            && (v20 = *(unsigned __int8 *)(v11 + 16), v18 = v47, uint64_t v19 = &v46, v20 >= 0x1C)
            && (v18 = v47, uint64_t v19 = &v46, v20 - 83 >= 0xFFFFFFFE))
          {
            llvm::collectCmpOps(v11, (uint64_t)&v44);
            uint64_t v19 = (uint64_t *)v44;
            if (v45)
            {
              unsigned int v18 = (char *)v44 + 8 * v45;
              goto LABEL_39;
            }
          }
          else
          {
            do
            {
LABEL_39:
              unsigned int v29 = *(unsigned __int8 *)(*v19 + 16);
              if (v29 > 0x1B || v29 == 21)
              {
                uint64_t v31 = *(void *)(*v19 + 8);
                if (!v31 || *(void *)(v31 + 8)) {
                  operator new();
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v18);
            uint64_t v19 = (uint64_t *)v44;
          }
          if (v19 != &v46) {
            free(v19);
          }
        }
      }
      else
      {
        long long v25 = 0;
        int v26 = 1;
        while (v24 != v11)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == -2;
          }
          if (v27) {
            long long v25 = (uint64_t *)v23;
          }
          unsigned int v28 = v22 + v26++;
          unsigned int v22 = v28 & v21;
          BOOL v23 = &v12[8 * (v28 & v21)];
          uint64_t v24 = *(void *)v23;
          if (*(void *)v23 == -1) {
            goto LABEL_53;
          }
        }
      }
LABEL_50:
      unsigned int v10 = v49;
    }
    while (v49);
    if (v40 != v39) {
      free(v40);
    }
    char v8 = v35;
    if (v48 != v51) {
      free(v48);
    }
LABEL_64:
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) == 0);
}

void llvm::PredicateInfoBuilder::processSwitch(uint64_t a1, uint64_t a2)
{
  v25[33] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0) {
    char v4 = *(uint64_t **)(a2 - 8);
  }
  else {
    char v4 = (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  }
  uint64_t v5 = *v4;
  unsigned int v6 = *(unsigned __int8 *)(*v4 + 16);
  if (v6 > 0x1B || v6 == 21)
  {
    uint64_t v8 = *(void *)(v5 + 8);
    if (!v8 || *(void *)(v8 + 8))
    {
      v25[0] = 1;
      for (uint64_t i = 1; i != 33; i += 2)
        v25[i] = -4096;
      unsigned int v10 = (v3 >> 1) & 0x3FFFFFF;
      if (v10)
      {
        uint64_t v11 = 0;
        unint64_t v12 = (unint64_t)v10 << 6;
        do
        {
          v24[0] = 0;
          int v13 = *(_DWORD *)(a2 + 20);
          if ((v13 & 0x40000000) != 0) {
            uint64_t v14 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v14 = a2 - 32 * (v13 & 0x7FFFFFF);
          }
          v24[0] = *(void *)(v14 + v11 + 32);
          uint64_t v15 = sub_1CD88C374(v25, v24);
          ++*((_DWORD *)v15 + 2);
          v11 += 64;
        }
        while (v12 != v11);
        int v16 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
        uint64_t v17 = (v16 - 1);
        if (v16 == 1)
        {
LABEL_28:
          if ((v25[0] & 1) == 0) {
            MEMORY[0x1D25D9CD0](v25[1], 8);
          }
          return;
        }
      }
      else
      {
        uint64_t v17 = 0xFFFFFFFFLL;
      }
      uint64_t v18 = 4294967294;
      int v19 = 2;
      do
      {
        int v20 = *(_DWORD *)(a2 + 20);
        if ((v20 & 0x40000000) != 0) {
          uint64_t v21 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v21 = a2 - 32 * (v20 & 0x7FFFFFF);
        }
        uint64_t v22 = (v19 + 1);
        if (!v18) {
          uint64_t v22 = 1;
        }
        v24[0] = *(void *)(v21 + 32 * v22);
        uint64_t v23 = 0;
        if ((sub_1CCD660BC((uint64_t)v25, v24, &v23) & 1) != 0 && *(_DWORD *)(v23 + 8) == 1) {
          operator new();
        }
        v19 += 2;
        --v18;
        --v17;
      }
      while (v17);
      goto LABEL_28;
    }
  }
}

void llvm::PredicateInfoBuilder::buildPredicateInfo(llvm::PredicateInfoBuilder *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers();
}

void llvm::PredicateInfoBuilder::renameUses(uint64_t a1, uint64_t a2)
{
  v104[96] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (!v2) {
    return;
  }
  char v4 = *(uint64_t **)a2;
  uint64_t v93 = *(void *)a2 + 8 * v2;
  uint64_t v94 = *(void **)(a1 + 16);
  do
  {
    uint64_t v5 = *v4;
    int v96 = 0;
    unint64_t v102 = (long long *)v104;
    uint64_t v103 = 0x1000000000;
    int v6 = *(_DWORD *)(a1 + 1600);
    uint64_t v95 = v4;
    if (!v6) {
      goto LABEL_9;
    }
    uint64_t v7 = *(void *)(a1 + 1584);
    unsigned int v8 = v6 - 1;
    uint64_t v9 = (v6 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    uint64_t v10 = *(void *)(v7 + 16 * v9);
    if (v5 != v10)
    {
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v9 + v11++;
        uint64_t v9 = v12 & v8;
        uint64_t v10 = *(void *)(v7 + 16 * v9);
        if (v5 == v10) {
          goto LABEL_8;
        }
      }
LABEL_9:
      unsigned int v13 = 0;
      goto LABEL_10;
    }
LABEL_8:
    unsigned int v13 = *(_DWORD *)(v7 + 16 * v9 + 8);
LABEL_10:
    uint64_t v14 = *(void *)(a1 + 32) + 48 * v13;
    uint64_t v15 = *(unsigned int *)(v14 + 8);
    if (v15)
    {
      int v16 = *(uint64_t **)v14;
      uint64_t v17 = *(void *)v14 + 8 * v15;
      while (1)
      {
        uint64_t v97 = 0;
        LODWORD(v98) = 1;
        char v101 = 0;
        v99[1] = 0;
        uint64_t v100 = 0;
        v99[0] = 0;
        uint64_t v18 = *v16;
        int v19 = *(_DWORD *)(*v16 + 24);
        if (*v16)
        {
          if (v19 == 1) {
            break;
          }
        }
        if ((v19 & 0xFFFFFFFD) == 0)
        {
          uint64_t v29 = *(void *)(v18 + 64);
          int v30 = *(_DWORD *)(a1 + 1624);
          unsigned int v31 = v29 >> 4;
          if (!v30) {
            goto LABEL_40;
          }
          uint64_t v32 = *(void *)(v18 + 56);
          uint64_t v33 = *(void *)(a1 + 1608);
          uint64_t v34 = (v32 >> 4) ^ (v32 >> 9);
          unint64_t v35 = (v31 ^ (v29 >> 9) | (unint64_t)(v34 << 32))
              + ~((unint64_t)(v31 ^ (v29 >> 9)) << 32);
          unint64_t v36 = (v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13);
          unint64_t v37 = (9 * (v36 ^ (v36 >> 8))) ^ ((9 * (v36 ^ (v36 >> 8))) >> 15);
          int v38 = v30 - 1;
          unsigned int v39 = v38 & (((v37 + ~(v37 << 27)) >> 31) ^ (v37 + ~(v37 << 27)));
          unsigned int v40 = (uint64_t *)(v33 + 16 * v39);
          uint64_t v42 = *v40;
          uint64_t v41 = v40[1];
          if (v32 != v42 || v29 != v41)
          {
            int v44 = 1;
            while (v42 != -4096 || v41 != -4096)
            {
              unsigned int v45 = v39 + v44++;
              unsigned int v39 = v45 & v38;
              uint64_t v46 = (uint64_t *)(v33 + 16 * v39);
              uint64_t v42 = *v46;
              uint64_t v41 = v46[1];
              if (v32 == v42 && v29 == v41) {
                goto LABEL_34;
              }
            }
LABEL_40:
            LODWORD(v98) = 0;
            uint64_t v55 = *(void *)(a1 + 16);
            uint64_t v56 = *(void *)(v55 + 24);
            uint64_t v57 = *(unsigned int *)(v55 + 40);
            if (v57)
            {
              LODWORD(v58) = (v57 - 1) & (v31 ^ (v29 >> 9));
              long long v25 = (uint64_t *)(v56 + 16 * v58);
              uint64_t v59 = *v25;
              if (v29 != *v25)
              {
                int v60 = 1;
                while (v59 != -4096)
                {
                  int v61 = v58 + v60++;
                  uint64_t v58 = v61 & (v57 - 1);
                  uint64_t v59 = *(void *)(v56 + 16 * v58);
                  if (v29 == v59)
                  {
                    long long v25 = (uint64_t *)(v56 + 16 * v58);
                    goto LABEL_59;
                  }
                }
                goto LABEL_58;
              }
            }
            else
            {
LABEL_58:
              long long v25 = (uint64_t *)(v56 + 16 * v57);
            }
LABEL_59:
            long long v62 = (uint64_t *)(v56 + 16 * v57);
LABEL_48:
            if (v25 == v62) {
              goto LABEL_52;
            }
            uint64_t v63 = v25[1];
            if (!v63) {
              goto LABEL_52;
            }
            uint64_t v97 = *(void **)(v63 + 72);
            uint64_t v100 = v18;
LABEL_51:
            int v64 = (_OWORD *)sub_1CC1B48A4((uint64_t)&v102, (unint64_t)&v97);
            __int16 v65 = (char *)&v102[3 * v103];
            long long v67 = v64[1];
            long long v66 = v64[2];
            *(_OWORD *)__int16 v65 = *v64;
            *((_OWORD *)v65 + 1) = v67;
            *((_OWORD *)v65 + 2) = v66;
            LODWORD(v103) = v103 + 1;
            goto LABEL_52;
          }
LABEL_34:
          LODWORD(v98) = 2;
          uint64_t v48 = *(void *)(a1 + 16);
          uint64_t v49 = *(void *)(v48 + 24);
          uint64_t v50 = *(unsigned int *)(v48 + 40);
          if (v50)
          {
            LODWORD(v34) = (v50 - 1) & v34;
            uint64_t v51 = (uint64_t *)(v49 + 16 * v34);
            uint64_t v52 = *v51;
            if (v32 != *v51)
            {
              int v53 = 1;
              while (v52 != -4096)
              {
                int v54 = v34 + v53++;
                uint64_t v34 = v54 & (v50 - 1);
                uint64_t v52 = *(void *)(v49 + 16 * v34);
                if (v32 == v52)
                {
                  uint64_t v51 = (uint64_t *)(v49 + 16 * v34);
                  goto LABEL_55;
                }
              }
              goto LABEL_54;
            }
          }
          else
          {
LABEL_54:
            uint64_t v51 = (uint64_t *)(v49 + 16 * v50);
          }
LABEL_55:
          if (v51 == (uint64_t *)(v49 + 16 * v50)) {
            goto LABEL_52;
          }
          uint64_t v68 = v51[1];
          if (!v68) {
            goto LABEL_52;
          }
          uint64_t v97 = *(void **)(v68 + 72);
          uint64_t v100 = v18;
          char v101 = 1;
          goto LABEL_51;
        }
LABEL_52:
        if (++v16 == (uint64_t *)v17) {
          goto LABEL_60;
        }
      }
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(v20 + 24);
      uint64_t v22 = *(unsigned int *)(v20 + 40);
      if (v22)
      {
        uint64_t v23 = *(void *)(*(void *)(v18 + 56) + 40);
        LODWORD(v24) = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
        long long v25 = (uint64_t *)(v21 + 16 * v24);
        uint64_t v26 = *v25;
        if (v23 == *v25)
        {
LABEL_47:
          long long v62 = (uint64_t *)(v21 + 16 * v22);
          goto LABEL_48;
        }
        int v27 = 1;
        while (v26 != -4096)
        {
          int v28 = v24 + v27++;
          uint64_t v24 = v28 & (v22 - 1);
          uint64_t v26 = *(void *)(v21 + 16 * v24);
          if (v23 == v26)
          {
            long long v25 = (uint64_t *)(v21 + 16 * v24);
            goto LABEL_47;
          }
        }
      }
      long long v25 = (uint64_t *)(v21 + 16 * v22);
      goto LABEL_47;
    }
LABEL_60:
    llvm::PredicateInfoBuilder::convertUsesToDFSOrdered((_OWORD *)a1, v5, (uint64_t)&v102);
    __int16 v69 = v102;
    unint64_t v70 = v103;
    long long v71 = (int *)&v102[3 * v103];
    uint64_t v97 = v94;
    if (v103 < 0x81)
    {
LABEL_64:
      sub_1CD1D3FD4(v69, v71, (uint64_t *)&v97, v70, 0, 0);
    }
    else
    {
      unint64_t v72 = v103;
      while (1)
      {
        char v73 = (long long *)operator new(48 * v72, MEMORY[0x1E4FBA2D0]);
        if (v73) {
          break;
        }
        BOOL v74 = v72 > 1;
        v72 >>= 1;
        if (!v74) {
          goto LABEL_64;
        }
      }
      uint64_t v75 = v73;
      sub_1CD1D3FD4(v69, v71, (uint64_t *)&v97, v70, v73, v72);
      operator delete(v75);
    }
    uint64_t v97 = v99;
    uint64_t v98 = 0x800000000;
    if (!v103) {
      goto LABEL_90;
    }
    char v76 = v102;
    int v77 = (char *)&v102[3 * v103];
    do
    {
      uint64_t v78 = *((void *)v76 + 4);
      BOOL v79 = (*((void *)v76 + 2) | v78) != 0;
      int v80 = llvm::PredicateInfoBuilder::stackIsInScope(a1, (uint64_t)&v97, (uint64_t)v76);
      unsigned int v81 = v98;
      if (!v80 || v79)
      {
        for (; v98; LODWORD(v98) = v98 - 1)
        {
          if (llvm::PredicateInfoBuilder::stackIsInScope(a1, (uint64_t)&v97, (uint64_t)v76)) {
            break;
          }
        }
        if (!v79)
        {
          unsigned int v81 = v98;
          if (!v98) {
            goto LABEL_87;
          }
          goto LABEL_76;
        }
        uint64_t v82 = (_OWORD *)sub_1CC1B48A4((uint64_t)&v97, (unint64_t)v76);
        uint64_t v83 = (char *)v97 + 48 * v98;
        long long v85 = v82[1];
        long long v84 = v82[2];
        *uint64_t v83 = *v82;
        v83[1] = v85;
        v83[2] = v84;
        unsigned int v81 = v98 + 1;
        LODWORD(v98) = v98 + 1;
      }
      if (!v81) {
        goto LABEL_87;
      }
LABEL_76:
      if (!(*((void *)v76 + 2) | v78))
      {
        uint64_t v86 = (char *)v97 + 48 * v81;
        uint64_t v87 = *((void *)v86 - 4);
        if (!v87)
        {
          uint64_t v87 = llvm::PredicateInfoBuilder::materializeStack((void *)a1, &v96, (uint64_t)&v97, v5);
          *((void *)v86 - 4) = v87;
        }
        uint64_t v88 = *((void *)v76 + 3);
        if (*(void *)v88)
        {
          **(void **)(v88 + 16) = *(void *)(v88 + 8);
          uint64_t v89 = *(void *)(v88 + 8);
          if (v89) {
            *(void *)(v89 + 16) = *(void *)(v88 + 16);
          }
        }
        *(void *)uint64_t v88 = v87;
        if (v87)
        {
          uint64_t v92 = *(void *)(v87 + 8);
          uint64_t v90 = (void *)(v87 + 8);
          uint64_t v91 = v92;
          *(void *)(v88 + 8) = v92;
          if (v92) {
            *(void *)(v91 + 16) = v88 + 8;
          }
          *(void *)(v88 + 16) = v90;
          *uint64_t v90 = v88;
        }
      }
LABEL_87:
      v76 += 3;
    }
    while (v76 != (long long *)v77);
    if (v97 != v99) {
      free(v97);
    }
LABEL_90:
    if (v102 != (long long *)v104) {
      free(v102);
    }
    char v4 = v95 + 1;
  }
  while (v95 + 1 != (uint64_t *)v93);
}

uint64_t llvm::PredicateInfoBuilder::materializeStack(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  v83[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = *(void *)a3 + 48 * *(unsigned int *)(a3 + 8);
  uint64_t v8 = 48 * *(unsigned int *)(a3 + 8);
  while (v8)
  {
    uint64_t v9 = *(void *)(v6 + v8 - 32);
    v8 -= 48;
    if (v9)
    {
      uint64_t v10 = v6 + v8 + 48;
      goto LABEL_6;
    }
  }
  uint64_t v10 = *(void *)a3;
LABEL_6:
  uint64_t v11 = v7 - v10;
  if (v11)
  {
    uint64_t v64 = 0x5555555555555555 * (v11 >> 4);
    uint64_t v12 = v7 - 16 * (v11 >> 4);
    unsigned int v13 = v76;
    while (1)
    {
      uint64_t v14 = a4;
      if (v12 != v6) {
        uint64_t v14 = *(void *)(v12 - 32);
      }
      char v73 = (uint64_t ***)v14;
      uint64_t v15 = v7 + 48 * v64;
      uint64_t v16 = a4;
      if (v15 != v6) {
        uint64_t v16 = *(void *)(v15 - 32);
      }
      uint64_t v17 = *(void *)(v12 + 32);
      *(void *)(v17 + 40) = v16;
      int v18 = *(_DWORD *)(v17 + 24);
      if ((v18 & 0xFFFFFFFD) != 0)
      {
        uint64_t v63 = v13;
        uint64_t v49 = v12;
        if (v18 == 1) {
          uint64_t v50 = v17;
        }
        else {
          uint64_t v50 = 0;
        }
        uint64_t v52 = (uint64_t *)(*(void *)(v50 + 56) + 32);
        uint64_t v51 = *v52;
        uint64_t v53 = v52[1] + 40;
        if (*v52) {
          BOOL v54 = v51 == v53;
        }
        else {
          BOOL v54 = 1;
        }
        if (v54) {
          uint64_t v55 = 0;
        }
        else {
          uint64_t v55 = (uint64_t **)(v51 - 24);
        }
        sub_1CC243A10((uint64_t)v74, v55, 0, 0, 0);
        uint64_t v56 = *(void *)(a1[1] + 40);
        int v57 = *(_DWORD *)(*(void *)(v56 + 112) + 12);
        v71[0] = (unint64_t)*v73;
        uint64_t Declaration = llvm::Intrinsic::getDeclaration((uint64_t **)v56, 281, (uint64_t)v71, 1);
        if (v57 != *(_DWORD *)(*(void *)(*(void *)(a1[1] + 40) + 112) + 12))
        {
          uint64_t v62 = *a1 + 48;
          v71[0] = Declaration;
          sub_1CD88BE0C(v62, v71);
        }
        if (Declaration) {
          uint64_t v59 = *(uint64_t ***)(Declaration + 24);
        }
        else {
          uint64_t v59 = 0;
        }
        __int16 v72 = 257;
        uint64_t v60 = sub_1CB845BAC((uint64_t *)v74, v59, (uint64_t **)Declaration, (uint64_t *)&v73, 1, (uint64_t)v71, 0);
        uint64_t v61 = *a1 + 24;
        uint64_t v68 = (unsigned __int8 *)v60;
        v69[0] = v17;
        sub_1CD1D3EC8((uint64_t)v71, v61, &v68, v69);
        *(void *)(v49 + 16) = v60;
        if (v74[0] != v75) {
          free(v74[0]);
        }
        uint64_t v12 = v49;
        unsigned int v13 = v63;
        goto LABEL_35;
      }
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(*(void *)(v17 + 56) + 40);
      if (v20) {
        uint64_t v21 = (uint64_t **)(v20 - 24);
      }
      else {
        uint64_t v21 = 0;
      }
      if (*((unsigned __int8 *)v21 + 16) - 29 >= 0xB) {
        uint64_t v21 = 0;
      }
      uint64_t v22 = **v21;
      v74[0] = v75;
      v74[1] = (void *)0x200000000;
      v76[2] = v22;
      v76[3] = &v82;
      v76[4] = v83;
      v76[5] = 0;
      int v77 = 0;
      __int16 v78 = 512;
      char v79 = 7;
      void *v13 = 0;
      v13[1] = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      uint64_t v82 = &unk_1F2616E88;
      v83[0] = &unk_1F2617008;
      v76[0] = v21[5];
      v76[1] = v21 + 3;
      uint64_t v23 = (unsigned __int8 *)v21[6];
      uint64_t v68 = v23;
      if (v23)
      {
        llvm::MetadataTracking::track((uint64_t)&v68, v23, 2);
        uint64_t v19 = (uint64_t)v68;
      }
      sub_1CB8461A4((uint64_t)v74, 0, v19);
      if (v68)
      {
        int v44 = *v68;
        if ((v44 - 4) > 0x1E)
        {
          if ((v44 - 3) >= 0xFFFFFFFE) {
            uint64_t v47 = v68;
          }
          else {
            uint64_t v47 = 0;
          }
          if ((v44 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v46 = (unint64_t)(v47 + 8);
LABEL_52:
            v71[0] = (unint64_t)&v68;
            sub_1CC5FA668(v46 + 16, v71);
            goto LABEL_21;
          }
          if (v44 == 3) {
            *((void *)v68 + 1) = 0;
          }
        }
        else if ((v68[1] & 0x7F) == 2 || *((_DWORD *)v68 + 3))
        {
          uint64_t v45 = *((void *)v68 + 2);
          if ((v45 & 4) != 0)
          {
            unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
            if (v46) {
              goto LABEL_52;
            }
          }
        }
      }
LABEL_21:
      uint64_t v24 = *(void *)(a1[1] + 40);
      int v25 = *(_DWORD *)(*(void *)(v24 + 112) + 12);
      v71[0] = (unint64_t)*v73;
      uint64_t v26 = llvm::Intrinsic::getDeclaration((uint64_t **)v24, 281, (uint64_t)v71, 1);
      if (v25 != *(_DWORD *)(*(void *)(*(void *)(a1[1] + 40) + 112) + 12))
      {
        uint64_t v48 = *a1 + 48;
        v71[0] = v26;
        sub_1CD88BE0C(v48, v71);
      }
      if (v26) {
        int v27 = *(uint64_t ***)(v26 + 24);
      }
      else {
        int v27 = 0;
      }
      if ((*((unsigned char *)v73 + 23) & 0x10) != 0)
      {
        uint64_t v28 = ***v73;
        uint64_t v29 = *(void *)(v28 + 152);
        uint64_t v30 = *(unsigned int *)(v28 + 168);
        if (!v30) {
          goto LABEL_37;
        }
        LODWORD(v31) = (v30 - 1) & ((v73 >> 4) ^ (v73 >> 9));
        uint64_t v32 = (uint64_t ****)(v29 + 16 * v31);
        uint64_t v33 = *v32;
        if (*v32 != v73)
        {
          int v34 = 1;
          while (v33 != (uint64_t ***)-4096)
          {
            int v35 = v31 + v34++;
            uint64_t v31 = v35 & (v30 - 1);
            uint64_t v33 = *(uint64_t ****)(v29 + 16 * v31);
            if (v33 == v73)
            {
              uint64_t v32 = (uint64_t ****)(v29 + 16 * v31);
              goto LABEL_32;
            }
          }
LABEL_37:
          uint64_t v32 = (uint64_t ****)(v29 + 16 * v30);
        }
LABEL_32:
        unint64_t v36 = v32[1];
        unsigned int v39 = *v36;
        int v38 = (char *)(v36 + 2);
        unint64_t v37 = v39;
        goto LABEL_33;
      }
      unint64_t v37 = 0;
      int v38 = &byte_1CFBCE98E;
LABEL_33:
      __int16 v70 = 773;
      uint64_t v68 = (unsigned __int8 *)v38;
      v69[0] = v37;
      v69[1] = ".";
      uint64_t v40 = *a2;
      *a2 = v40 + 1;
      v71[0] = (unint64_t)&v68;
      unint64_t v67 = v67 & 0xFFFFFFFF00000000 | v40;
      v71[2] = v67;
      __int16 v72 = 2050;
      uint64_t v41 = sub_1CB845BAC((uint64_t *)v74, v27, (uint64_t **)v26, (uint64_t *)&v73, 1, (uint64_t)v71, 0);
      uint64_t v42 = *a1 + 24;
      uint64_t v68 = (unsigned __int8 *)v41;
      v69[0] = v17;
      sub_1CD1D3EC8((uint64_t)v71, v42, &v68, v69);
      *(void *)(v12 + 16) = v41;
      if (v74[0] != v75) {
        free(v74[0]);
      }
LABEL_35:
      v12 += 48;
      uint64_t v6 = *(void *)a3;
      uint64_t v7 = *(void *)a3 + 48 * *(unsigned int *)(a3 + 8);
      if (v12 == v7) {
        return *(void *)(v12 - 32);
      }
    }
  }
  uint64_t v12 = *(void *)a3 + 48 * *(unsigned int *)(a3 + 8);
  return *(void *)(v12 - 32);
}

uint64_t llvm::PredicateInfoBuilder::getValueInfo(llvm::PredicateInfoBuilder *this, llvm::Value *a2)
{
  int v2 = *((_DWORD *)this + 400);
  if (!v2)
  {
LABEL_7:
    unsigned int v9 = 0;
    return *((void *)this + 4) + 48 * v9;
  }
  uint64_t v3 = *((void *)this + 198);
  unsigned int v4 = v2 - 1;
  uint64_t v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = *(llvm::Value **)(v3 + 16 * v5);
  if (v6 != a2)
  {
    int v7 = 1;
    while (v6 != (llvm::Value *)-4096)
    {
      int v8 = v5 + v7++;
      uint64_t v5 = v8 & v4;
      uint64_t v6 = *(llvm::Value **)(v3 + 16 * v5);
      if (v6 == a2) {
        goto LABEL_6;
      }
    }
    goto LABEL_7;
  }
LABEL_6:
  unsigned int v9 = *(_DWORD *)(v3 + 16 * v5 + 8);
  return *((void *)this + 4) + 48 * v9;
}

void llvm::PredicateInfo::PredicateInfo(llvm::PredicateInfo *this, llvm::Function *a2, llvm::DominatorTree *a3, llvm::AssumptionCache *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  *((void *)this + 1) = (char *)this + 8;
  *((void *)this + 2) = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 6) = (char *)this + 64;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 7) = 0x1400000000;
  *((void *)this + 28) = (char *)this + 232;
  v4[0] = this;
  v4[1] = a2;
  void v4[2] = a3;
  v4[3] = a4;
  v5[0] = v6;
  v5[1] = 0x2000000000;
  v6[96] = 0u;
  int v7 = 0;
  long long v8 = 0u;
  int v9 = 0;
  sub_1CD1D3698((uint64_t)v5, 1uLL);
  llvm::PredicateInfoBuilder::buildPredicateInfo((llvm::PredicateInfoBuilder *)v4);
}

void llvm::PredicateInfo::~PredicateInfo(llvm::PredicateInfo *this)
{
  uint64_t v24 = v28;
  int v25 = v28;
  uint64_t v26 = 32;
  int v27 = 0;
  uint64_t v2 = *((void *)this + 30);
  if (v2)
  {
    unsigned int v4 = (char *)this + 232;
    uint64_t v3 = (uint64_t *)*((void *)this + 28);
  }
  else
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 6);
    unsigned int v4 = (char *)&v3[*((unsigned int *)this + 14)];
  }
  if (v3 != (uint64_t *)v4)
  {
    do
    {
      uint64_t v20 = v3 + 4;
      if (!v2) {
        uint64_t v20 = v3;
      }
      sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v24, *v20);
      if (v2)
      {
        uint64_t v22 = (uint64_t *)v3[1];
        if (v22)
        {
          do
          {
            uint64_t v21 = v22;
            uint64_t v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            uint64_t v21 = (uint64_t *)v3[2];
            BOOL v23 = *v21 == (void)v3;
            uint64_t v3 = v21;
          }
          while (!v23);
        }
      }
      else
      {
        uint64_t v21 = v3 + 1;
      }
      uint64_t v3 = v21;
    }
    while (v21 != (uint64_t *)v4);
  }
  uint64_t v5 = (void *)*((void *)this + 29);
  *((_DWORD *)this + 14) = 0;
  sub_1CBC0FD34(v5);
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  int v7 = v24;
  uint64_t v6 = v25;
  long long v8 = &v26;
  if (v25 == v24) {
    long long v8 = (uint64_t *)((char *)&v26 + 4);
  }
  uint64_t v9 = *(unsigned int *)v8;
  uint64_t v10 = (llvm::Function **)v25;
  if (v9)
  {
    uint64_t v18 = 0;
    while (*(void *)&v25[v18] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v18 += 8;
      if (8 * v9 == v18) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = (llvm::Function **)&v25[v18];
  }
  uint64_t v11 = &v25[8 * v9];
  if (v10 != v11)
  {
    uint64_t v16 = *v10;
LABEL_16:
    llvm::Function::eraseFromParent(v16);
    uint64_t v17 = (unint64_t *)(v10 + 1);
    while (v17 != v11)
    {
      unint64_t v19 = *v17++;
      uint64_t v16 = (llvm::Function *)v19;
      if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v10 = (llvm::Function **)(v17 - 1);
        goto LABEL_16;
      }
    }
    int v7 = v24;
    uint64_t v6 = v25;
  }
LABEL_8:
  if (v6 != v7) {
    free(v6);
  }
  sub_1CBC0FD34(*((void **)this + 29));
  uint64_t v12 = (char *)*((void *)this + 6);
  if (v12 != (char *)this + 64) {
    free(v12);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 3), 8);
  unsigned int v13 = (llvm::PredicateInfo *)*((void *)this + 2);
  if (v13 != (llvm::PredicateInfo *)((char *)this + 8))
  {
    do
    {
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = (llvm::PredicateInfo *)*((void *)v13 + 1);
      *(void *)uint64_t v15 = *(void *)v13;
      *(void *)(v14 + 8) = v15;
      *(void *)unsigned int v13 = 0;
      *((void *)v13 + 1) = 0;
      (*(void (**)(void))(*((void *)v13 - 1) + 8))();
      unsigned int v13 = v15;
    }
    while (v15 != (llvm::PredicateInfo *)((char *)this + 8));
  }
}

_DWORD *llvm::PredicateBase::getConstraint@<X0>(_DWORD *this@<X0>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4 = this[6];
  if (v4 > 1)
  {
    if (*((void *)this + 6) == *((void *)this + 5))
    {
      uint64_t v13 = *((void *)this + 9);
      *(_DWORD *)a3 = 32;
      *(void *)(a3 + 8) = v13;
LABEL_28:
      char v8 = 1;
      goto LABEL_29;
    }
    goto LABEL_6;
  }
  if (v4)
  {
    uint64_t v5 = (uint64_t ***)*((void *)this + 5);
    uint64_t v6 = (uint64_t ***)*((void *)this + 6);
    if (v6 != v5)
    {
      BOOL v7 = 1;
      goto LABEL_8;
    }
    goto LABEL_20;
  }
  BOOL v7 = *((unsigned char *)this + 72) != 0;
  uint64_t v5 = (uint64_t ***)*((void *)this + 5);
  uint64_t v6 = (uint64_t ***)*((void *)this + 6);
  if (v6 == v5)
  {
    if (!*((unsigned char *)this + 72))
    {
      uint64_t v14 = *v6;
      uint64_t v18 = **v6;
      uint64_t v19 = *v18;
      uint64_t v17 = *(void *)(*v18 + 1568);
      if (!v17)
      {
        uint64_t v20 = *(llvm::ConstantInt **)(v19 + 1888);
        unsigned int v27 = *(_DWORD *)(v19 + 1896) >> 8;
        if (v27 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v26);
        }
        uint64_t v26 = 0;
        this = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v26, a2);
        uint64_t v17 = (uint64_t)this;
        if (v27 >= 0x41)
        {
          this = v26;
          if (v26)
          {
            uint64_t v25 = v17;
            this = (_DWORD *)MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
            uint64_t v17 = v25;
          }
        }
        *(void *)(v19 + 1568) = v17;
      }
      goto LABEL_21;
    }
LABEL_20:
    uint64_t v14 = *v6;
    uint64_t v15 = **v6;
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(*v15 + 1560);
    if (!v17)
    {
      uint64_t v21 = *(llvm::ConstantInt **)(v16 + 1888);
      unsigned int v22 = *(_DWORD *)(v16 + 1896);
      unsigned int v27 = v22 >> 8;
      if (v22 >> 8 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v26);
      }
      if (v22 <= 0xFF) {
        char v23 = 0;
      }
      else {
        char v23 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v22);
      }
      uint64_t v26 = (_DWORD *)(v23 & 1);
      this = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v26, a2);
      uint64_t v17 = (uint64_t)this;
      if (v27 >= 0x41)
      {
        this = v26;
        if (v26)
        {
          uint64_t v24 = v17;
          this = (_DWORD *)MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
          uint64_t v17 = v24;
        }
      }
      *(void *)(v16 + 1560) = v17;
    }
LABEL_21:
    if ((v14[1] & 0xFE) == 0x12)
    {
      this = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v14 + 8) | ((unint64_t)(*((_DWORD *)v14 + 2) == 19) << 32)), v17);
      uint64_t v17 = (uint64_t)this;
    }
    *(_DWORD *)a3 = 32;
    *(void *)(a3 + 8) = v17;
    goto LABEL_28;
  }
LABEL_8:
  if (!v6) {
    goto LABEL_6;
  }
  unsigned int v9 = *((unsigned __int8 *)v6 + 16);
  if (v9 < 0x1C || v9 - 83 <= 0xFFFFFFFD) {
    goto LABEL_6;
  }
  uint64_t v11 = (uint64_t ***)*(v6 - 8);
  if (v11 == v5)
  {
    unsigned int v12 = *((_WORD *)v6 + 9) & 0x3F;
    uint64_t v11 = (uint64_t ***)*(v6 - 4);
LABEL_25:
    if (!v7) {
      unsigned int v12 = dword_1CFB32CF0[v12];
    }
    *(_DWORD *)a3 = v12;
    *(void *)(a3 + 8) = v11;
    goto LABEL_28;
  }
  if (*(v6 - 4) == (uint64_t **)v5)
  {
    unsigned int v12 = *((_WORD *)v6 + 9) & 0x3F;
    switch(*((_WORD *)v6 + 9) & 0x3F)
    {
      case 2:
        unsigned int v12 = 4;
        break;
      case 3:
        unsigned int v12 = 5;
        break;
      case 4:
        unsigned int v12 = 2;
        break;
      case 5:
        unsigned int v12 = 3;
        break;
      case 0xA:
        unsigned int v12 = 12;
        break;
      case 0xB:
        unsigned int v12 = 13;
        break;
      case 0xC:
        unsigned int v12 = 10;
        break;
      case 0xD:
        unsigned int v12 = 11;
        break;
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
        __break(1u);
        JUMPOUT(0x1CD1D2ED4);
      case 0x22:
        unsigned int v12 = 36;
        break;
      case 0x23:
        unsigned int v12 = 37;
        break;
      case 0x24:
        unsigned int v12 = 34;
        break;
      case 0x25:
        unsigned int v12 = 35;
        break;
      case 0x26:
        unsigned int v12 = 40;
        break;
      case 0x27:
        unsigned int v12 = 41;
        break;
      case 0x28:
        unsigned int v12 = 38;
        break;
      case 0x29:
        unsigned int v12 = 39;
        break;
      default:
        goto LABEL_25;
    }
    goto LABEL_25;
  }
LABEL_6:
  char v8 = 0;
  *(unsigned char *)a3 = 0;
LABEL_29:
  *(unsigned char *)(a3 + 16) = v8;
  return this;
}

llvm::PredicateInfoPrinterLegacyPass *llvm::PredicateInfoPrinterLegacyPass::PredicateInfoPrinterLegacyPass(llvm::PredicateInfoPrinterLegacyPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::PredicateInfoPrinterLegacyPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2648BD0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD6A8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1D04A0;
    v5[1] = &PassRegistry;
    unsigned int v4 = v5;
    std::__call_once(&qword_1EBCFD6A8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::PredicateInfoPrinterLegacyPass::getAnalysisUsage(llvm::PredicateInfoPrinterLegacyPass *this, llvm::AnalysisUsage *a2)
{
  *((unsigned char *)a2 + 160) = 1;
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 80, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
}

void llvm::PredicateInfoPrinterLegacyPass::runOnFunction(llvm::PredicateInfoPrinterLegacyPass *this, llvm::Function *a2)
{
  unsigned int v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::DominatorTreeWrapperPass::ID);
  char v8 = (uint64_t *)*((void *)this + 1);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(char **)v9 != llvm::AssumptionCacheTracker::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  unsigned int v12 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v11 + 96))(v11, llvm::AssumptionCacheTracker::ID);
  llvm::AssumptionCacheTracker::getAssumptionCache(v12, a2);
  operator new();
}

void *llvm::PredicateInfo::print(const llvm::Module ***this, llvm::raw_ostream *a2)
{
  v3[0] = &unk_1F2648CD0;
  v3[1] = this;
  return llvm::Function::print(*this, a2, (llvm::AssemblyAnnotationWriter *)v3, 0, 0);
}

uint64_t sub_1CD1D32A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = i - 24;
    if (!i) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 48);
    if (v5 != v4 + 40)
    {
      uint64_t v6 = result + 24;
      do
      {
        uint64_t v7 = v5;
        uint64_t v5 = *(void *)(v5 + 8);
        uint64_t v8 = i - 24;
        if (!i) {
          uint64_t v8 = 0;
        }
        if (v5 == v8 + 40)
        {
          uint64_t v12 = *(void *)(i + 8);
          uint64_t i = v2;
          if (v12 != v2)
          {
            while (1)
            {
              uint64_t v13 = v12 - 24;
              if (!v12) {
                uint64_t v13 = 0;
              }
              uint64_t v5 = *(void *)(v13 + 48);
              if (v5 != v13 + 40) {
                break;
              }
              uint64_t v12 = *(void *)(v12 + 8);
              if (v12 == v2)
              {
                uint64_t i = v2;
                goto LABEL_11;
              }
            }
            uint64_t i = v12;
          }
        }
LABEL_11:
        if (v7) {
          uint64_t v9 = v7 - 24;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = v9;
        uint64_t result = sub_1CBA0E618(v6, &v16, &v15);
        uint64_t v10 = 0;
        if (result) {
          uint64_t v10 = *(void *)(v15 + 8);
        }
        if (*(unsigned char *)(v9 + 16) == 84)
        {
          uint64_t v11 = *(void *)(v9 - 32);
          if (v11)
          {
            if (!*(unsigned char *)(v11 + 16) && *(void *)(v11 + 24) == *(void *)(v9 + 72))
            {
              if ((*(unsigned char *)(v11 + 33) & 0x20) != 0) {
                uint64_t v14 = v9;
              }
              else {
                uint64_t v14 = 0;
              }
              if (v10 && v14 && *(_DWORD *)(*(void *)(v14 - 32) + 36) == 281)
              {
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, *(llvm::Value **)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
            }
          }
        }
      }
      while (i != v2);
      return result;
    }
  }
  return result;
}

void *llvm::PredicateInfo::dump(const llvm::Module ***this)
{
  v4[0] = &unk_1F2648CD0;
  v4[1] = this;
  uint64_t v1 = *this;
  uint64_t v2 = llvm::dbgs((llvm *)this);
  return llvm::Function::print(v1, v2, (llvm::AssemblyAnnotationWriter *)v4, 0, 0);
}

void llvm::PredicateInfoVerifierPass::run()
{
}

void sub_1CD1D358C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::callDefaultCtor<llvm::PredicateInfoPrinterLegacyPass>()
{
}

void sub_1CD1D3600()
{
}

char **sub_1CD1D3614(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 48 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5) {
        free(v5);
      }
      v4 -= 48;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CD1D3698(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 > a2)
    {
      uint64_t v8 = 3 * v2;
      uint64_t v9 = (void **)(*(void *)a1 + 16 * v8 - 48);
      uint64_t v10 = 48 * a2 - 16 * v8;
      do
      {
        if (v9 + 2 != *v9) {
          free(*v9);
        }
        v9 -= 6;
        v10 += 48;
      }
      while (v10);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        sub_1CD88C304();
      }
      if (v2 != a2)
      {
        uint64_t v5 = 3 * v2;
        uint64_t v6 = 48 * a2 - 48 * v2;
        uint64_t v7 = (_OWORD *)(*(void *)a1 + 16 * v5 + 16);
        do
        {
          *uint64_t v7 = 0uLL;
          v7[1] = 0uLL;
          *((void *)v7 - 2) = v7;
          *((void *)v7 - 1) = 0x400000000;
          v7 += 3;
          v6 -= 48;
        }
        while (v6);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

void sub_1CD1D3780(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = 48 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      *(void *)uint64_t v8 = a2 + v5 + 16;
      *(void *)(v8 + 8) = 0x400000000;
      if (v6 != a2)
      {
        uint64_t v9 = v6 + v5;
        unint64_t v10 = *(unsigned int *)(v6 + v5 + 8);
        if (*(_DWORD *)(v6 + v5 + 8))
        {
          uint64_t v11 = v6 + v5;
          uint64_t v12 = v6 + v5 + 16;
          uint64_t v13 = *(void *)(v6 + v5);
          if (v12 == v13)
          {
            if (v10 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(*(void **)v8, *(const void **)v9, 8 * *(unsigned int *)(v6 + v5 + 8));
            *(_DWORD *)(v8 + 8) = v10;
          }
          else
          {
            *(void *)uint64_t v8 = v13;
            int v14 = *(_DWORD *)(v11 + 12);
            *(_DWORD *)(v8 + 8) = v10;
            *(_DWORD *)(v8 + 12) = v14;
            *(void *)uint64_t v11 = v12;
            *(_DWORD *)(v11 + 12) = 0;
          }
          *(_DWORD *)(v9 + 8) = 0;
        }
      }
      v5 += 48;
    }
    while (v7 != v5);
    uint64_t v15 = *((unsigned int *)a1 + 2);
    if (v15)
    {
      uint64_t v16 = *a1;
      uint64_t v17 = 48 * v15;
      do
      {
        uint64_t v18 = *(void **)(v16 + v17 - 48);
        if ((void *)(v16 + v17 - 32) != v18) {
          free(v18);
        }
        v17 -= 48;
      }
      while (v17);
    }
  }
}

void *sub_1CD1D38BC(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  if (!v6)
  {
    uint64_t v24 = 0;
LABEL_27:
    uint64_t result = sub_1CD1D3AE4(a2, (uint64_t)a3, a3, v24);
    void *result = *a3;
    result[1] = a3[1];
    uint64_t v7 = *(void *)a2;
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    char v23 = 1;
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = a3[1];
  unint64_t v9 = ((v8 >> 4) ^ (v8 >> 9) | ((unint64_t)((*a3 >> 4) ^ (*a3 >> 9)) << 32))
     + ~((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32);
  unint64_t v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
  unint64_t v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
  unsigned int v12 = (v6 - 1) & (((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~(v11 << 27)));
  uint64_t result = (void *)(*(void *)a2 + 16 * v12);
  uint64_t v14 = *result;
  uint64_t v15 = result[1];
  if (*a3 != *result || v8 != v15)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    while (v14 != -4096 || v15 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v15 == -8192;
      }
      if (v19 && v14 == -8192) {
        uint64_t v17 = result;
      }
      unsigned int v21 = v12 + v18++;
      unsigned int v12 = v21 & (v6 - 1);
      uint64_t result = (void *)(v7 + 16 * v12);
      uint64_t v14 = *result;
      uint64_t v15 = result[1];
      if (*a3 == *result && v8 == v15) {
        goto LABEL_22;
      }
    }
    if (v17) {
      uint64_t v24 = v17;
    }
    else {
      uint64_t v24 = result;
    }
    goto LABEL_27;
  }
LABEL_22:
  char v23 = 0;
LABEL_23:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v7 + 16 * v6;
  *(unsigned char *)(a1 + 16) = v23;
  return result;
}

uint64_t sub_1CD1D39FC(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a2[1];
    unint64_t v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    unsigned int v12 = (void *)(*a1 + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (*a2 == *v12 && v5 == v14)
    {
LABEL_22:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v14 == -8192;
        }
        if (v18 && v13 == -8192) {
          uint64_t v16 = v12;
        }
        unsigned int v20 = v11 + v17++;
        unsigned int v11 = v20 & v10;
        unsigned int v12 = (void *)(v4 + 16 * (v20 & v10));
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        if (*a2 == *v12 && v5 == v14) {
          goto LABEL_22;
        }
      }
      uint64_t result = 0;
      if (v16) {
        unsigned int v12 = v16;
      }
    }
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
  }
  *a3 = v12;
  return result;
}

void *sub_1CD1D3AE4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CD1D3C84(a1, 2 * v7);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = a3[1];
      unint64_t v11 = ((v10 >> 4) ^ (v10 >> 9) | ((unint64_t)((*a3 >> 4) ^ (*a3 >> 9)) << 32))
          + ~((unint64_t)((v10 >> 4) ^ (v10 >> 9)) << 32);
      unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
      unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
      int v14 = v9 - 1;
      unsigned int v15 = v14 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27)));
      a4 = (void *)(*(void *)a1 + 16 * v15);
      uint64_t v16 = *a4;
      uint64_t v17 = a4[1];
      if (*a3 != *a4 || v10 != v17)
      {
        BOOL v19 = 0;
        int v20 = 1;
        while (v16 != -4096 || v17 != -4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v17 == -8192;
          }
          if (v21 && v16 == -8192) {
            BOOL v19 = a4;
          }
          unsigned int v23 = v15 + v20++;
          unsigned int v15 = v23 & v14;
          a4 = (void *)(*(void *)a1 + 16 * v15);
          uint64_t v16 = *a4;
          uint64_t v17 = a4[1];
          if (*a3 == *a4 && v10 == v17) {
            goto LABEL_4;
          }
        }
        if (v19) {
          a4 = v19;
        }
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CD1D3C84(a1, v7);
    uint64_t v25 = 0;
    sub_1CD1D39FC((uint64_t *)a1, a3, &v25);
    a4 = v25;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void sub_1CD1D3C84(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    sub_1CD1D3D68(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    memset_pattern16(v9, &unk_1CFAC3070, 16 * v10);
  }
}

void sub_1CD1D3D68(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6) {
    memset_pattern16(*(void **)a1, &unk_1CFAC3070, 16 * v6);
  }
  if (a2 != a3)
  {
    int v7 = 0;
    int v8 = v6 - 1;
    do
    {
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if ((*a2 != -4096 || v10 != -4096) && (v9 != -8192 || v10 != -8192))
      {
        unint64_t v11 = ((v10 >> 4) ^ (v10 >> 9) | ((unint64_t)((v9 >> 4) ^ (v9 >> 9)) << 32))
            + ~((unint64_t)((v10 >> 4) ^ (v10 >> 9)) << 32);
        unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
        unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
        unsigned int v14 = v8 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27)));
        unsigned int v15 = (void *)(*(void *)a1 + 16 * v14);
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        if (v9 != *v15 || v10 != v17)
        {
          BOOL v19 = 0;
          int v20 = 1;
          while (v16 != -4096 || v17 != -4096)
          {
            if (v19) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v17 == -8192;
            }
            if (v21 && v16 == -8192) {
              BOOL v19 = v15;
            }
            unsigned int v23 = v14 + v20++;
            unsigned int v14 = v23 & v8;
            unsigned int v15 = (void *)(*(void *)a1 + 16 * (v23 & v8));
            uint64_t v16 = *v15;
            uint64_t v17 = v15[1];
            if (v9 == *v15 && v10 == v17) {
              goto LABEL_32;
            }
          }
          if (v19) {
            unsigned int v15 = v19;
          }
        }
LABEL_32:
        *unsigned int v15 = v9;
        v15[1] = a2[1];
        *(_DWORD *)(a1 + 8) = ++v7;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
}

uint64_t sub_1CD1D3EC8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unsigned int v14 = 0;
  uint64_t result = sub_1CBA0E618(a2, a3, &v14);
  uint64_t v9 = v14;
  if (result)
  {
    char v12 = 0;
    goto LABEL_7;
  }
  int v10 = *(_DWORD *)(a2 + 8);
  unsigned int v11 = *(_DWORD *)(a2 + 16);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_9;
  }
  if (v11 + ~v10 - *(_DWORD *)(a2 + 12) <= v11 >> 3)
  {
LABEL_9:
    sub_1CD40E6BC(a2, v11);
    unsigned int v14 = 0;
    uint64_t result = sub_1CBA0E618(a2, a3, &v14);
    uint64_t v9 = v14;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v9 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v9 = *a3;
  v9[1] = *a4;
  char v12 = 1;
LABEL_7:
  uint64_t v13 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v12;
  return result;
}

long long *sub_1CD1D3FD4(long long *result, int *a2, uint64_t *a3, unint64_t a4, long long *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    int v8 = result;
    if (a4 == 2)
    {
      unint64_t v36 = a2 - 12;
      uint64_t result = (long long *)sub_1CD1D42E0(*a3, a2 - 12, (int *)result);
      if (result)
      {
        long long v37 = v8[2];
        long long v39 = *v8;
        *(_OWORD *)uint64_t v48 = v8[1];
        long long v38 = *(_OWORD *)v48;
        *(_OWORD *)&v48[16] = v37;
        long long v40 = *(_OWORD *)((char *)a2 - 23);
        long long v41 = *((_OWORD *)a2 - 2);
        *int v8 = *(_OWORD *)v36;
        v8[1] = v41;
        *(long long *)((char *)v8 + 25) = v40;
        *(_OWORD *)unint64_t v36 = v39;
        *((_OWORD *)a2 - 2) = v38;
        *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v48[9];
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      BOOL v21 = a5;
      uint64_t v22 = a4 >> 1;
      uint64_t v23 = a4 - (a4 >> 1);
      if ((uint64_t)a4 > a6)
      {
        unint64_t v46 = (int *)&result[3 * (a4 >> 1)];
        sub_1CD1D3FD4(result, v46, a3, v22, a5, a6);
        sub_1CD1D3FD4(v46, a2, a3, v23, v21, a6);
        return (long long *)sub_1CD1D458C((uint64_t)v8, v46, a2, a3, v22, v23, v21, a6);
      }
      else
      {
        sub_1CD88C3D8(result, &result[3 * (a4 >> 1)], a3, a4 >> 1, a5);
        uint64_t v24 = (long long *)a2;
        uint64_t v25 = &v21[3 * v22];
        uint64_t result = sub_1CD88C3D8(&v8[3 * (a4 >> 1)], v24, a3, a4 - (a4 >> 1), v25);
        uint64_t v26 = &v21[3 * a4];
        unsigned int v27 = v25;
        while (v27 != v26)
        {
          uint64_t result = (long long *)sub_1CD1D42E0(*a3, (int *)v27, (int *)v21);
          if (result)
          {
            long long v28 = *v27;
            long long v29 = v27[1];
            *(long long *)((char *)v8 + 25) = *(long long *)((char *)v27 + 25);
            *int v8 = v28;
            v8[1] = v29;
            v27 += 3;
          }
          else
          {
            long long v30 = *v21;
            long long v31 = v21[1];
            *(long long *)((char *)v8 + 25) = *(long long *)((char *)v21 + 25);
            *int v8 = v30;
            v8[1] = v31;
            v21 += 3;
          }
          v8 += 3;
          if (v21 == v25)
          {
            if (v27 != v26)
            {
              uint64_t v42 = 0;
              do
              {
                uint64_t v43 = &v8[v42];
                long long v44 = v27[v42];
                long long v45 = v27[v42 + 1];
                *(long long *)((char *)v43 + 25) = *(long long *)((char *)&v27[v42 + 1] + 9);
                *uint64_t v43 = v44;
                v43[1] = v45;
                v42 += 3;
              }
              while (&v27[v42] != v26);
            }
            return result;
          }
        }
        if (v21 != v25)
        {
          uint64_t v32 = 0;
          do
          {
            uint64_t v33 = &v8[v32];
            long long v34 = v21[v32];
            long long v35 = v21[v32 + 1];
            *(long long *)((char *)v33 + 25) = *(long long *)((char *)&v21[v32 + 1] + 9);
            *uint64_t v33 = v34;
            v33[1] = v35;
            v32 += 3;
          }
          while (&v21[v32] != v25);
        }
      }
    }
    else if (result != (long long *)a2)
    {
      int v10 = (int *)(result + 3);
      if (result + 3 != (long long *)a2)
      {
        uint64_t v11 = 0;
        char v12 = (int *)result;
        do
        {
          uint64_t v13 = v12;
          char v12 = v10;
          uint64_t result = (long long *)sub_1CD1D42E0(*a3, v10, v13);
          if (result)
          {
            long long v14 = *((_OWORD *)v12 + 1);
            long long v47 = *(_OWORD *)v12;
            *(_OWORD *)uint64_t v48 = v14;
            *(_OWORD *)&v48[16] = *((_OWORD *)v12 + 2);
            uint64_t v15 = v11;
            while (1)
            {
              uint64_t v16 = (long long *)((char *)v8 + v15);
              long long v17 = *(long long *)((char *)v8 + v15 + 16);
              v16[3] = *(long long *)((char *)v8 + v15);
              void v16[4] = v17;
              *(_OWORD *)((char *)v16 + 73) = *(long long *)((char *)v8 + v15 + 25);
              if (!v15) {
                break;
              }
              v15 -= 48;
              uint64_t result = (long long *)sub_1CD1D42E0(*a3, (int *)&v47, (int *)((char *)v8 + v15));
              if ((result & 1) == 0)
              {
                BOOL v18 = (long long *)((char *)v8 + v15 + 48);
                goto LABEL_13;
              }
            }
            BOOL v18 = v8;
LABEL_13:
            long long v19 = *(_OWORD *)v48;
            *BOOL v18 = v47;
            v18[1] = v19;
            *(long long *)((char *)v18 + 25) = *(_OWORD *)&v48[9];
          }
          int v10 = v12 + 12;
          v11 += 48;
        }
        while (v12 + 12 != a2);
      }
    }
  }
  return result;
}

BOOL sub_1CD1D42E0(uint64_t a1, int *a2, int *a3)
{
  if (a2 == a3) {
    return 0;
  }
  int v5 = *a2;
  int v6 = *a3;
  unsigned int v7 = a2[2];
  unsigned int v8 = a3[2];
  if (*a2 == *a3 && v7 == 2 && v8 == 2)
  {
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v21 = *(unsigned int *)(a1 + 40);
    uint64_t v22 = sub_1CD1D4C50(a2);
    uint64_t v23 = sub_1CD1D4C50(a3);
    if (v21)
    {
      LODWORD(v24) = ((v22 >> 4) ^ (v22 >> 9)) & (v21 - 1);
      uint64_t v25 = (uint64_t *)(v20 + 16 * v24);
      uint64_t v26 = *v25;
      if (*v25 == v22) {
        goto LABEL_50;
      }
      int v34 = 1;
      while (v26 != -4096)
      {
        int v35 = v24 + v34++;
        uint64_t v24 = v35 & (v21 - 1);
        uint64_t v26 = *(void *)(v20 + 16 * v24);
        if (v26 == v22)
        {
          uint64_t v25 = (uint64_t *)(v20 + 16 * v24);
          goto LABEL_50;
        }
      }
    }
    uint64_t v25 = (uint64_t *)(v20 + 16 * v21);
LABEL_50:
    if (v25 == (uint64_t *)(v20 + 16 * v21)) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v25[1];
    }
    if (v21)
    {
      LODWORD(v28) = ((v23 >> 4) ^ (v23 >> 9)) & (v21 - 1);
      long long v29 = (uint64_t *)(v20 + 16 * v28);
      uint64_t v30 = *v29;
      if (*v29 == v23)
      {
LABEL_54:
        unsigned int v31 = *(_DWORD *)(v27 + 72);
        unsigned int v32 = *(_DWORD *)(v29[1] + 72);
        if (v31 < v32) {
          return 1;
        }
        if (*((void *)a3 + 2)) {
          BOOL v33 = *((void *)a2 + 2) == 0;
        }
        else {
          BOOL v33 = 0;
        }
        return v33 && v32 >= v31;
      }
      int v36 = 1;
      while (v30 != -4096)
      {
        int v37 = v28 + v36++;
        uint64_t v28 = v37 & (v21 - 1);
        uint64_t v30 = *(void *)(v20 + 16 * v28);
        if (v30 == v23)
        {
          long long v29 = (uint64_t *)(v20 + 16 * v28);
          goto LABEL_54;
        }
      }
    }
    long long v29 = (uint64_t *)(v20 + 16 * v21);
    goto LABEL_54;
  }
  uint64_t v11 = *((void *)a2 + 2);
  uint64_t v12 = *((void *)a3 + 2);
  if (v5 != v6 || v7 != 1 || v8 != 1)
  {
    if (v5 < v6) {
      return 1;
    }
    if (v6 < v5) {
      return 0;
    }
    if (v7 < v8) {
      return 1;
    }
    if (v11) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v12 == 0;
    }
    return !v16 && v8 >= v7;
  }
  if (!v11)
  {
    if (*((void *)a2 + 3))
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v38 = *(void *)(*(void *)(*((void *)a2 + 4) + 56) + 32);
      if (v38) {
        BOOL v39 = v38 == *(void *)(*(void *)(*((void *)a2 + 4) + 56) + 40) + 40;
      }
      else {
        BOOL v39 = 1;
      }
      if (v39) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v38 - 24;
      }
    }
  }
  if (!v12)
  {
    if (*((void *)a3 + 3))
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v40 = *(void *)(*(void *)(*((void *)a3 + 4) + 56) + 32);
      if (v40) {
        BOOL v41 = v40 == *(void *)(*(void *)(*((void *)a3 + 4) + 56) + 40) + 40;
      }
      else {
        BOOL v41 = 1;
      }
      if (v41) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v40 - 24;
      }
    }
  }
  if (v11)
  {
    if (*(unsigned char *)(v11 + 16) == 21) {
      uint64_t v18 = v11;
    }
    else {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  if (v12)
  {
    if (*(unsigned char *)(v12 + 16) == 21) {
      uint64_t v19 = v12;
    }
    else {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (v18 | v19)
  {
    uint64_t v11 = v18;
    uint64_t v12 = v19;
  }
  else
  {
    if (!v11) {
      uint64_t v11 = *(void *)(*((void *)a2 + 3) + 24);
    }
    if (!v12) {
      uint64_t v12 = *(void *)(*((void *)a3 + 3) + 24);
    }
  }

  return sub_1CD1D4C7C(v11, v12);
}

uint64_t sub_1CD1D458C(uint64_t result, int *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a6;
  long long v14 = (int *)result;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v15 = v14;
    while (1)
    {
      BOOL v16 = a2;
      uint64_t result = sub_1CD1D42E0(*a4, a2, v14);
      if (result) {
        break;
      }
      v14 += 12;
      v15 += 12;
      --a5;
      a2 = v16;
      if (!a5) {
        return result;
      }
    }
    uint64_t v93 = v9;
    uint64_t v94 = a4;
    uint64_t v91 = a8;
    uint64_t v92 = a3;
    if (a5 >= v9)
    {
      uint64_t v23 = v16;
      uint64_t v21 = a7;
      if (a5 == 1)
      {
        *(_OWORD *)int v105 = *((_OWORD *)v14 + 1);
        *(_OWORD *)&v105[16] = *((_OWORD *)v14 + 2);
        long long v100 = *(_OWORD *)v14;
        long long v84 = *(_OWORD *)v16;
        long long v85 = *((_OWORD *)v16 + 1);
        *(_OWORD *)((char *)v14 + 25) = *(_OWORD *)((char *)v16 + 25);
        *(_OWORD *)long long v14 = v84;
        *((_OWORD *)v14 + 1) = v85;
        *(_OWORD *)((char *)v16 + 25) = *(_OWORD *)&v105[9];
        *(_OWORD *)BOOL v16 = v100;
        *((_OWORD *)v16 + 1) = *(_OWORD *)v105;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v24 = a5;
      }
      else {
        uint64_t v24 = a5 + 1;
      }
      unint64_t v20 = v24 >> 1;
      uint64_t v22 = &v14[12 * (v24 >> 1)];
      BOOL v25 = a3 == v16;
      uint64_t v26 = a3;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v16) >> 4);
      if (v25)
      {
        uint64_t v19 = v26;
      }
      else
      {
        uint64_t v27 = *a4;
        uint64_t v19 = v16;
        do
        {
          uint64_t v28 = &v19[12 * (v18 >> 1)];
          BOOL v29 = sub_1CD1D42E0(v27, v28, v22);
          if (v29) {
            v18 += ~(v18 >> 1);
          }
          else {
            v18 >>= 1;
          }
          if (v29) {
            uint64_t v19 = v28 + 12;
          }
        }
        while (v18);
        uint64_t v23 = v16;
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v16) >> 4);
        uint64_t v21 = a7;
      }
    }
    else
    {
      if (v9 >= 0) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = v9 + 1;
      }
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = &v16[12 * (v17 >> 1)];
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 4);
      uint64_t v21 = a7;
      if (v14 == v16)
      {
        uint64_t v22 = v16;
        long long v14 = v16;
        goto LABEL_46;
      }
      uint64_t v90 = v17 >> 1;
      uint64_t v22 = v14;
      do
      {
        if (sub_1CD1D42E0(*v94, v19, &v22[12 * (v20 >> 1)]))
        {
          v20 >>= 1;
        }
        else
        {
          v22 += 12 * (v20 >> 1) + 12;
          v20 += ~(v20 >> 1);
        }
      }
      while (v20);
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v15) >> 4);
      uint64_t v21 = a7;
      uint64_t v23 = v16;
      unint64_t v18 = v90;
    }
    if (v22 != v23)
    {
      if (v23 == v19)
      {
        uint64_t v19 = v23;
        uint64_t v23 = v22;
      }
      else if (v22 + 12 == v23)
      {
        *(_OWORD *)unint64_t v102 = *((_OWORD *)v22 + 1);
        *(_OWORD *)&v102[16] = *((_OWORD *)v22 + 2);
        long long v97 = *(_OWORD *)v22;
        int v37 = v21;
        unint64_t v38 = v18;
        int64_t v39 = (char *)v19 - (char *)v23;
        memmove(v22, v23, (char *)v19 - (char *)v23 - 7);
        uint64_t v23 = (int *)((char *)v22 + v39);
        unint64_t v18 = v38;
        uint64_t v21 = v37;
        *(_OWORD *)uint64_t v23 = v97;
        *((_OWORD *)v23 + 1) = *(_OWORD *)v102;
        *(_OWORD *)((char *)v23 + 25) = *(_OWORD *)&v102[9];
      }
      else if (v23 + 12 == v19)
      {
        uint64_t v23 = v22 + 12;
        *(_OWORD *)uint64_t v103 = *((_OWORD *)v19 - 2);
        *(_OWORD *)&v103[16] = *((_OWORD *)v19 - 1);
        long long v98 = *((_OWORD *)v19 - 3);
        if (v19 - 12 != v22)
        {
          unint64_t v40 = v18;
          BOOL v41 = v21;
          memmove(v22 + 12, v22, (char *)(v19 - 12) - (char *)v22 - 7);
          uint64_t v21 = v41;
          unint64_t v18 = v40;
          uint64_t v23 = v22 + 12;
        }
        *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)&v103[9];
        *(_OWORD *)uint64_t v22 = v98;
        *((_OWORD *)v22 + 1) = *(_OWORD *)v103;
      }
      else
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 4);
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v23) >> 4);
        if (v30 == v31)
        {
          uint64_t v32 = 0;
          do
          {
            BOOL v33 = &v23[v32];
            int v34 = &v22[v32];
            *(_OWORD *)char v101 = *(_OWORD *)&v22[v32 + 4];
            *(_OWORD *)&v101[16] = *(_OWORD *)&v22[v32 + 8];
            long long v96 = *(_OWORD *)&v22[v32];
            long long v35 = *(_OWORD *)&v23[v32];
            long long v36 = *(_OWORD *)&v23[v32 + 4];
            *(_OWORD *)((char *)v34 + 25) = *(_OWORD *)((char *)&v23[v32 + 6] + 1);
            *(_OWORD *)int v34 = v35;
            *((_OWORD *)v34 + 1) = v36;
            *(_OWORD *)((char *)v33 + 25) = *(_OWORD *)&v101[9];
            *(_OWORD *)BOOL v33 = v96;
            *((_OWORD *)v33 + 1) = *(_OWORD *)v101;
            if (&v22[v32 + 12] == v23) {
              break;
            }
            v32 += 12;
          }
          while (v33 + 12 != v19);
        }
        else
        {
          uint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v23) >> 4);
          uint64_t v43 = v30;
          do
          {
            uint64_t v44 = v43;
            uint64_t v43 = v42;
            uint64_t v42 = v44 % v42;
          }
          while (v42);
          if (v43)
          {
            long long v45 = &v22[12 * v43];
            do
            {
              long long v46 = *((_OWORD *)v45 - 3);
              long long v47 = *((_OWORD *)v45 - 2);
              long long v48 = *((_OWORD *)v45 - 1);
              v45 -= 12;
              *(_OWORD *)int v104 = v47;
              *(_OWORD *)&v104[16] = v48;
              long long v99 = v46;
              uint64_t v49 = &v45[12 * v30];
              uint64_t v50 = v45;
              do
              {
                uint64_t v51 = v50;
                uint64_t v50 = v49;
                long long v52 = *(_OWORD *)v49;
                long long v53 = *((_OWORD *)v49 + 1);
                *(_OWORD *)((char *)v51 + 25) = *(_OWORD *)((char *)v49 + 25);
                *(_OWORD *)uint64_t v51 = v52;
                *((_OWORD *)v51 + 1) = v53;
                unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v49) >> 4);
                BOOL v55 = __OFSUB__(v30, v54);
                uint64_t v57 = v30 - v54;
                char v56 = (v57 < 0) ^ v55;
                uint64_t v49 = &v22[12 * v57];
                if (v56) {
                  uint64_t v49 = &v50[12 * v30];
                }
              }
              while (v49 != v45);
              *(_OWORD *)((char *)v50 + 25) = *(_OWORD *)&v104[9];
              *(_OWORD *)uint64_t v50 = v99;
              *((_OWORD *)v50 + 1) = *(_OWORD *)v104;
            }
            while (v45 != v22);
          }
          uint64_t v23 = &v22[12 * v31];
        }
      }
      goto LABEL_62;
    }
    uint64_t v22 = v23;
LABEL_46:
    uint64_t v23 = v19;
LABEL_62:
    unint64_t v58 = a5 - v20;
    unint64_t v59 = v93 - v18;
    if ((uint64_t)(v18 + v20) >= (uint64_t)(v93 - (v18 + v20) + a5))
    {
      uint64_t v62 = v23;
      uint64_t result = sub_1CD1D458C(v23, v19, v92, v94, a5 - v20, v93 - v18, v21);
      uint64_t v19 = v22;
      unint64_t v59 = v18;
      unint64_t v58 = v20;
      a3 = v62;
      a8 = v91;
    }
    else
    {
      uint64_t v60 = v14;
      unint64_t v61 = v20;
      a8 = v91;
      long long v14 = v23;
      uint64_t result = sub_1CD1D458C(v60, v22, v23, v94, v61, v18, v21);
      a3 = v92;
    }
    a5 = v58;
    uint64_t v9 = v59;
    a2 = v19;
    a4 = v94;
    if (!v59) {
      return result;
    }
  }
  if (a5 <= v9)
  {
    if (v14 != a2)
    {
      unint64_t v74 = 0;
      do
      {
        uint64_t v75 = &a7[v74 / 0x10];
        long long v76 = *(_OWORD *)&v14[v74 / 4];
        long long v77 = *(_OWORD *)&v14[v74 / 4 + 8];
        v75[1] = *(_OWORD *)&v14[v74 / 4 + 4];
        v75[2] = v77;
        *uint64_t v75 = v76;
        v74 += 48;
      }
      while (&v14[v74 / 4] != a2);
      if (v74)
      {
        __int16 v78 = a7;
        while (a2 != a3)
        {
          char v79 = a2;
          uint64_t result = sub_1CD1D42E0(*a4, a2, (int *)v78);
          if (result)
          {
            long long v80 = *(_OWORD *)v79;
            long long v81 = *((_OWORD *)v79 + 1);
            *(_OWORD *)((char *)v14 + 25) = *(_OWORD *)((char *)v79 + 25);
            *(_OWORD *)long long v14 = v80;
            *((_OWORD *)v14 + 1) = v81;
            a2 = v79 + 12;
          }
          else
          {
            long long v82 = *v78;
            long long v83 = v78[1];
            *(_OWORD *)((char *)v14 + 25) = *(long long *)((char *)v78 + 25);
            *(_OWORD *)long long v14 = v82;
            *((_OWORD *)v14 + 1) = v83;
            v78 += 3;
            a2 = v79;
          }
          v14 += 12;
          if (&a7[v74 / 0x10] == v78) {
            return result;
          }
        }
        return (uint64_t)memmove(v14, v78, (char *)a7 - (char *)v78 + v74 - 7);
      }
    }
  }
  else if (a2 != a3)
  {
    unint64_t v63 = 0;
    do
    {
      uint64_t v64 = &a7[v63 / 0x10];
      long long v65 = *(_OWORD *)&a2[v63 / 4];
      long long v66 = *(_OWORD *)&a2[v63 / 4 + 8];
      v64[1] = *(_OWORD *)&a2[v63 / 4 + 4];
      v64[2] = v66;
      *uint64_t v64 = v65;
      v63 += 48;
    }
    while (&a2[v63 / 4] != a3);
    if (v63)
    {
      unint64_t v67 = &a7[v63 / 0x10];
      uint64_t v68 = a3 - 12;
      while (a2 != v14)
      {
        __int16 v69 = a2 - 12;
        __int16 v70 = a2;
        uint64_t result = sub_1CD1D42E0(*a4, (int *)v67 - 12, a2 - 12);
        if (result) {
          long long v71 = v69;
        }
        else {
          long long v71 = (int *)(v67 - 3);
        }
        if (result) {
          a2 = v69;
        }
        else {
          a2 = v70;
        }
        if (!result) {
          v67 -= 3;
        }
        long long v72 = *(_OWORD *)((char *)v71 + 25);
        long long v73 = *((_OWORD *)v71 + 1);
        *(_OWORD *)uint64_t v68 = *(_OWORD *)v71;
        *((_OWORD *)v68 + 1) = v73;
        *(_OWORD *)((char *)v68 + 25) = v72;
        v68 -= 12;
        if (v67 == a7) {
          return result;
        }
      }
      if (v67 != a7)
      {
        unint64_t v86 = 0;
        do
        {
          uint64_t v87 = &v68[v86 / 4];
          long long v88 = v67[v86 / 0x10 - 3];
          long long v89 = v67[v86 / 0x10 - 2];
          *(_OWORD *)((char *)v87 + 25) = *(long long *)((char *)&v67[v86 / 0x10 - 1] - 7);
          *(_OWORD *)uint64_t v87 = v88;
          *((_OWORD *)v87 + 1) = v89;
          v86 -= 48;
        }
        while (&v67[v86 / 0x10] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1CD1D4C50(void *a1)
{
  if (!a1[2] && (uint64_t v1 = a1[3]) != 0) {
    uint64_t v2 = *(void *)(v1 + 24) + 40;
  }
  else {
    uint64_t v2 = a1[4] + 64;
  }
  return *(void *)v2;
}

BOOL sub_1CD1D4C7C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 16) == 21) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = 0;
    }
    if (a2)
    {
LABEL_6:
      if (*(unsigned char *)(a2 + 16) == 21) {
        uint64_t v3 = a2;
      }
      else {
        uint64_t v3 = 0;
      }
      if (!v2) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (a2) {
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
  if (!v2) {
    goto LABEL_15;
  }
LABEL_13:
  if (!v3) {
    return 1;
  }
LABEL_15:
  if (v3 && !v2) {
    return 0;
  }
  if (v2 && v3)
  {
    int v5 = (_DWORD *)(v2 + 32);
    int v6 = (_DWORD *)(v3 + 32);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(__int16 *)(v7 + 18);
    if ((v8 & 0x80000000) == 0)
    {
      uint64_t v9 = *(void *)(v7 + 48);
      if (v9 != v7 + 40)
      {
        int v10 = 0;
        do
        {
          uint64_t v11 = v9 - 24;
          if (!v9) {
            uint64_t v11 = 0;
          }
          *(_DWORD *)(v11 + 56) = v10++;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9 != v7 + 40);
      }
      *(_WORD *)(v7 + 18) = v8 | 0x8000;
    }
    int v5 = (_DWORD *)(a1 + 56);
    int v6 = (_DWORD *)(a2 + 56);
  }
  return *v5 < *v6;
}

long long *sub_1CD1D4D4C(long long *result, long long *a2, _OWORD *a3, uint64_t *a4)
{
  if (result != a2)
  {
    long long v6 = *result;
    long long v7 = result[2];
    a3[1] = result[1];
    a3[2] = v7;
    *a3 = v6;
    int v8 = result + 3;
    if (result + 3 != a2)
    {
      uint64_t v10 = 0;
      uint64_t v11 = a3;
      do
      {
        uint64_t v12 = v11 + 3;
        uint64_t result = (long long *)sub_1CD1D42E0(*a4, (int *)v8, (int *)v11);
        if (result)
        {
          long long v13 = v11[1];
          *uint64_t v12 = *v11;
          v11[4] = v13;
          v11[5] = v11[2];
          long long v14 = a3;
          if (v11 != a3)
          {
            uint64_t v15 = v10;
            while (1)
            {
              long long v14 = (_OWORD *)((char *)a3 + v15);
              uint64_t result = (long long *)sub_1CD1D42E0(*a4, (int *)v8, (int *)((char *)a3 + v15 - 48));
              if (!result) {
                break;
              }
              long long v16 = *(_OWORD *)((char *)a3 + v15 - 32);
              _OWORD *v14 = *(_OWORD *)((char *)a3 + v15 - 48);
              v14[1] = v16;
              *(_OWORD *)((char *)v14 + 25) = *(_OWORD *)((char *)a3 + v15 - 23);
              v15 -= 48;
              if (!v15)
              {
                long long v14 = a3;
                break;
              }
            }
          }
          long long v17 = *v8;
          long long v18 = v8[1];
          *(_OWORD *)((char *)v14 + 25) = *(long long *)((char *)v8 + 25);
          _OWORD *v14 = v17;
          v14[1] = v18;
        }
        else
        {
          long long v19 = *v8;
          long long v20 = v8[2];
          v11[4] = v8[1];
          v11[5] = v20;
          *uint64_t v12 = v19;
        }
        v8 += 3;
        v10 += 48;
        v11 += 3;
      }
      while (v8 != a2);
    }
  }
  return result;
}

uint64_t sub_1CD1D4E6C()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify PredicateInfo in legacy printer pass.";
  v1.n128_u64[1] = 44;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFD6B8, "verify-predicateinfo", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFD6B8, &dword_1CB82C000);
  uint64_t result = sub_1CBF64200((llvm::DebugCounter *)"predicateinfo-rename", 0x14uLL, "Controls which variables are renamed with predicateinfo", 0x37uLL);
  dword_1EBCFD6B0 = result;
  return result;
}

uint64_t llvm::isAllocaPromotable(llvm *this, const llvm::AllocaInst *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(v2 + 24);
    int v5 = *(unsigned __int8 *)(v4 + 16);
    if (v4 && v5 == 60)
    {
      if ((*(_WORD *)(v4 + 18) & 1) != 0 || *(void *)v4 != *((void *)this + 8)) {
        return 0;
      }
      goto LABEL_32;
    }
    if (v4 && v5 == 61)
    {
      long long v6 = *(llvm **)(v4 - 64);
      if (v6 == this || *(void *)v6 != *((void *)this + 8) || (*(_WORD *)(v4 + 18) & 1) != 0) {
        return 0;
      }
      goto LABEL_32;
    }
    if (v5 == 84) {
      break;
    }
    if (!v4 || v5 != 77)
    {
      if (!v4 || v5 != 62)
      {
        uint64_t result = 0;
        if (!v4) {
          return result;
        }
        if (v5 != 78) {
          return result;
        }
        uint64_t result = sub_1CC168130(*(void *)(v2 + 24), 0);
        if (!result) {
          return result;
        }
        goto LABEL_32;
      }
      uint64_t result = llvm::GetElementPtrInst::hasAllZeroIndices(*(llvm::GetElementPtrInst **)(v2 + 24));
      if (!result) {
        return result;
      }
    }
    if (!sub_1CC168130(v4, 1)) {
      return 0;
    }
LABEL_32:
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 1;
    }
  }
  uint64_t v7 = *(void *)(v4 - 32);
  if (v7
    && !*(unsigned char *)(v7 + 16)
    && *(void *)(v7 + 24) == *(void *)(v4 + 72)
    && (*(unsigned char *)(v7 + 33) & 0x20) != 0
    && (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v2 + 24))
     || sub_1CBF698E4(v4)
     || sub_1CC27D470(v4)))
  {
    goto LABEL_32;
  }
  return 0;
}

void llvm::PromoteMemToReg(const void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v270 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    size_t v6 = 8 * a2;
    uint64_t v223 = 0;
    uint64_t v222 = 0;
    uint64_t v224 = 0;
    if (8 * a2)
    {
      if ((v6 & 0x8000000000000000) != 0) {
        abort();
      }
      uint64_t v8 = (8 * a2) >> 3;
      uint64_t v222 = operator new(8 * a2);
      uint64_t v224 = (char *)v222 + 8 * v8;
      memmove(v222, a1, v6);
      uint64_t v223 = (uint64_t *)v224;
    }
    unint64_t v225 = a3;
    llvm::DIBuilder::DIBuilder((uint64_t)v226, *(void **)(*(void *)(**(void **)a3 + 56) + 40), 0, 0);
    v227.i64[0] = a4;
    v227.i64[1] = *(void *)(*(void *)(**(void **)a3 + 56) + 40) + 272;
    uint64_t v228 = 0;
    uint64_t v229 = a3;
    uint64_t v230 = a4;
    uint64_t v231 = 0;
    __int16 v232 = 257;
    uint64_t v9 = v241;
    long long v233 = 0u;
    int v234 = 0;
    long long v235 = 0u;
    int v236 = 0;
    long long v237 = 0u;
    int v238 = 0;
    uint64_t v239 = v241;
    uint64_t v240 = 0x800000000;
    uint64_t v242 = v246;
    __b = v246;
    uint64_t v244 = 16;
    int v245 = 0;
    int v248 = 0;
    long long v247 = 0u;
    long long v249 = 0u;
    int v250 = 0;
    uint64_t v10 = v225;
    uint64_t v206 = *(void *)(**(void **)v225 + 56);
    uint64_t v11 = v223;
    uint64_t v12 = (uint64_t *)v222;
    uint64_t v13 = (char *)v223 - (unsigned char *)v222;
    if (v223 != v222)
    {
      unint64_t v14 = v13 >> 3;
      if ((unint64_t)v13 >= 0x41)
      {
        if ((unint64_t)v13 >= 0x7FFFFFFF9) {
          sub_1CD0A88F0(v14);
        }
        unint64_t v16 = 17;
        if (v14 > 0x11) {
          unint64_t v16 = v13 >> 3;
        }
        if (v16 >= 0xFFFFFFFF) {
          uint64_t v17 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v17 = v16;
        }
        long long v18 = malloc_type_malloc(24 * v17, 0x4065EBACuLL);
        if (!v18) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v9 = v18;
        long long v19 = v239;
        if (v240)
        {
          uint64_t v202 = 24 * v240;
          long long v203 = v18;
          do
          {
            *long long v203 = v203 + 2;
            v203[1] = 0x100000000;
            if (v19[2]) {
              sub_1CD41C56C((uint64_t)v203, (uint64_t)v19);
            }
            v19 += 6;
            v203 += 3;
            v202 -= 24;
          }
          while (v202);
          long long v19 = v239;
          if (v240)
          {
            uint64_t v204 = 6 * v240;
            do
            {
              __int16 v205 = *(_DWORD **)&v19[v204 - 6];
              if (&v19[v204 - 2] != v205) {
                free(v205);
              }
              v204 -= 6;
            }
            while (v204 * 4);
            long long v19 = v239;
          }
        }
        if (v19 != (_DWORD *)v241) {
          free(v19);
        }
        uint64_t v239 = v9;
        HIDWORD(v240) = v17;
        uint64_t v15 = v240;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (v15 != v14)
      {
        uint64_t v20 = 3 * v15;
        uint64_t v21 = 24 * v14 - 24 * v15;
        uint64_t v22 = (uint64_t)&v9[8 * v20 + 16];
        do
        {
          *(void *)(v22 - 16) = v22;
          *(void *)(v22 - 8) = 0x100000000;
          v22 += 24;
          v21 -= 24;
        }
        while (v21);
      }
      LODWORD(v240) = (unint64_t)v13 >> 3;
      uint64_t v10 = v225;
      uint64_t v11 = v223;
      uint64_t v12 = (uint64_t *)v222;
    }
    int64_t v251 = v253;
    uint64_t v252 = 0x2000000000;
    int __src = v256;
    uint64_t v255 = 0x2000000000;
    v260 = &v262;
    uint64_t v261 = 0x100000000;
    v220[1] = 0;
    v220[0] = 0;
    int v221 = 0;
    v216[32] = v10;
    v216[33] = 0;
    char v217 = 0;
    if (v11 != v12)
    {
      uint64_t v208 = v206 + 72;
      uint64_t v23 = *v12;
      uint64_t v24 = *(uint64_t **)(*v12 + 8);
      if (!v24) {
        goto LABEL_125;
      }
      do
      {
        BOOL v25 = v24;
        uint64_t v24 = (uint64_t *)v24[1];
        uint64_t v26 = v25[3];
        if ((*(unsigned char *)(v26 + 16) & 0xFE) != 0x3C)
        {
          if (!sub_1CBF698E4(v25[3]) && !sub_1CC27D470(v26))
          {
            if (*(unsigned char *)(*(void *)v26 + 8) != 7)
            {
              uint64_t v28 = *(llvm::Value **)(v26 + 8);
              if (v28)
              {
                do
                {
                  BOOL v29 = (llvm::Value *)*((void *)v28 + 1);
                  uint64_t v30 = *((void *)v28 + 3);
                  if (!sub_1CBF698E4(v30) && !sub_1CC27D470(v30)) {
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
                  llvm::Value::dropDroppableUse(v28, v31);
                  uint64_t v28 = v29;
                }
                while (v29);
              }
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          llvm::Value::dropDroppableUse((llvm::Value *)v25, v27);
        }
      }
      while (v24);
      if (!*(void *)(v23 + 8)) {
LABEL_125:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      LODWORD(v252) = 0;
      LODWORD(v255) = 0;
      uint64_t v257 = 0;
      uint64_t v258 = 0;
      char v259 = 1;
      LODWORD(v261) = 0;
      for (uint64_t i = *(void *)(v23 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v33 = *(void *)(i + 24);
        uint64_t v34 = *(void *)(v33 + 40);
        if (v33 && *(unsigned char *)(v33 + 16) == 61)
        {
          if (v252 >= (unint64_t)HIDWORD(v252)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v251 + v252) = v34;
          LODWORD(v252) = v252 + 1;
          uint64_t v257 = (llvm::DbgVariableIntrinsic *)v33;
        }
        else
        {
          if (v255 >= (unint64_t)HIDWORD(v255)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + v255) = v34;
          LODWORD(v255) = v255 + 1;
        }
        if (v259)
        {
          if (v258)
          {
            if (v258 != *(void *)(v33 + 40)) {
              char v259 = 0;
            }
          }
          else
          {
            uint64_t v258 = *(void *)(v33 + 40);
          }
        }
      }
      llvm::findDbgUsers((uint64_t)&v260, (uint64_t ***)v23);
      if (v252 == 1)
      {
        long long v36 = v257;
        unsigned int v37 = *(unsigned __int8 *)(*((void *)v257 - 8) + 16);
        unint64_t v38 = (void **)*((void *)v257 + 5);
        LODWORD(v255) = 0;
        uint64_t v39 = *(void *)(v23 + 8);
        if (!v39) {
          goto LABEL_115;
        }
        uint64_t v209 = v225;
        unint64_t v40 = (char **)v227.i64[0];
        int8x16_t v207 = vextq_s8(v227, v227, 8uLL);
        unsigned int v41 = -1;
        do
        {
          uint64_t v42 = *(llvm::DbgVariableIntrinsic **)(v39 + 24);
          uint64_t v39 = *(void *)(v39 + 8);
          if (v42 != v36)
          {
            if (v37 < 0x1C) {
              goto LABEL_68;
            }
            if (*((void ***)v42 + 5) != v38) {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
            }
            if (v41 == -1) {
              unsigned int v41 = sub_1CD1D9434((uint64_t)v220, (uint64_t)v36);
            }
            if (v41 <= sub_1CD1D9434((uint64_t)v220, (uint64_t)v42))
            {
LABEL_68:
              uint64_t v43 = (llvm::Value *)*((void *)v36 - 8);
              if (v43 == v42)
              {
                uint64_t v43 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v42, v35);
                if (!v40) {
                  goto LABEL_87;
                }
              }
              else if (!v40)
              {
                goto LABEL_87;
              }
              if ((*((unsigned char *)v42 + 23) & 0x20) == 0) {
                goto LABEL_87;
              }
              uint64_t v44 = ***(void ***)v42;
              __p[0] = v42;
              int v45 = *(_DWORD *)(v44 + 2496);
              if (v45)
              {
                uint64_t v46 = *(void *)(v44 + 2480);
                int v47 = v45 - 1;
                unsigned int v48 = v47 & ((v42 >> 4) ^ (v42 >> 9));
                uint64_t v49 = (void *)(v46 + 40 * v48);
                uint64_t v50 = (void ***)*v49;
                if ((llvm::DbgVariableIntrinsic *)*v49 != v42)
                {
                  uint64_t v51 = 0;
                  int v52 = 1;
                  while (v50 != (void ***)-4096)
                  {
                    if (v51) {
                      BOOL v53 = 0;
                    }
                    else {
                      BOOL v53 = v50 == (void ***)-8192;
                    }
                    if (v53) {
                      uint64_t v51 = v49;
                    }
                    unsigned int v54 = v48 + v52++;
                    unsigned int v48 = v54 & v47;
                    uint64_t v49 = (void *)(v46 + 40 * v48);
                    uint64_t v50 = (void ***)*v49;
                    if ((llvm::DbgVariableIntrinsic *)*v49 == v42) {
                      goto LABEL_83;
                    }
                  }
                  if (v51) {
                    unint64_t v59 = v51;
                  }
                  else {
                    unint64_t v59 = v49;
                  }
LABEL_97:
                  uint64_t v49 = sub_1CC609054(v44 + 2480, (uint64_t)__p, (uint64_t *)__p, v59);
                  uint64_t v60 = __p[0];
                  v49[4] = 0;
                  v49[3] = 0;
                  *uint64_t v49 = v60;
                  v49[1] = v49 + 3;
                  v49[2] = 0x100000000;
                }
LABEL_83:
                uint64_t v55 = *((unsigned int *)v49 + 4);
                if (v55)
                {
                  char v56 = (void *)(v49[1] + 8);
                  uint64_t v57 = 16 * v55;
                  while (*((_DWORD *)v56 - 2) != 11)
                  {
                    v56 += 2;
                    v57 -= 16;
                    if (!v57) {
                      goto LABEL_87;
                    }
                  }
                  if (*v56)
                  {
                    unint64_t v58 = v42;
                    if (!*((void *)v42 + 5))
                    {
                      if (!v43 || *((unsigned __int8 *)v43 + 16) < 0x1Cu || (unint64_t v58 = v43, !*((void *)v43 + 5))) {
                        unint64_t v58 = 0;
                      }
                    }
                    *(int8x16_t *)__p = v207;
                    v268[0] = v58;
                    v268[1] = v209;
                    v268[2] = 0;
                    char v269 = 1;
                    if ((sub_1CC1620B8((uint64_t)v43, 0, (uint64_t)__p) & 1) == 0) {
                      sub_1CD1D9678(v40, (uint64_t)v42);
                    }
                  }
                }
LABEL_87:
                llvm::Value::doRAUW(v42, v43, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              unint64_t v59 = 0;
              goto LABEL_97;
            }
            if (v255 >= (unint64_t)HIDWORD(v255)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__src + v255) = v38;
            LODWORD(v255) = v255 + 1;
          }
        }
        while (v39);
        if (!v255)
        {
LABEL_115:
          if (v261)
          {
            __int16 v69 = (llvm **)v260;
            uint64_t v70 = 8 * v261;
            do
            {
              long long v71 = *v69;
              if (*(_DWORD *)(*((void *)*v69 - 4) + 36) != 58)
              {
                llvm::DIBuilder::DIBuilder((uint64_t)__p, *(void **)(*(void *)(*(void *)(v23 + 40) + 56) + 40), 0, 0);
                llvm::ConvertDebugDeclareToDebugValue(v71, v257, (llvm::StoreInst *)__p, v73);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              long long v72 = *(void **)(*(void *)(((void *)v71 - 4 * (*((_DWORD *)v71 + 5) & 0x7FFFFFF))[8] + 24) + 24);
              if (((*(void *)(*(void *)(((void *)v71 - 4 * (*((_DWORD *)v71 + 5) & 0x7FFFFFF))[8] + 24) + 32)
                   - (void)v72) & 0x7FFFFFFF8) != 0
                && *v72 == 6)
              {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              ++v69;
              v70 -= 8;
            }
            while (v70);
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
      if (v259)
      {
        unint64_t v61 = v225;
        int8x16_t v210 = v227;
        uint64_t v62 = (unsigned int *)v268;
        __p[0] = v268;
        __p[1] = (void *)0x4000000000;
        unint64_t v63 = (int *)v268;
        uint64_t v64 = *(void *)(v23 + 8);
        if (!v64) {
          goto LABEL_128;
        }
        unsigned int v65 = 0;
        do
        {
          uint64_t v66 = *(void *)(v64 + 24);
          if (v66 && *(unsigned char *)(v66 + 16) == 61)
          {
            unsigned int v67 = sub_1CD1D9434((uint64_t)v220, *(void *)(v64 + 24));
            if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v68 = (char *)__p[0] + 16 * LODWORD(__p[1]);
            *uint64_t v68 = v67;
            v68[1] = v66;
            unsigned int v65 = ++LODWORD(__p[1]);
          }
          uint64_t v64 = *(void *)(v64 + 8);
        }
        while (v64);
        uint64_t v62 = (unsigned int *)__p[0];
        unint64_t v63 = (int *)((char *)__p[0] + 16 * v65);
        if (v65) {
          uint64_t v74 = 126 - 2 * __clz(v65);
        }
        else {
LABEL_128:
        }
          uint64_t v74 = 0;
        sub_1CD1D98C4(v62, v63, v74, 1);
        uint64_t v75 = *(void *)(v23 + 8);
        if (!v75) {
LABEL_183:
        }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        long long v76 = (char **)v210.i64[0];
        int8x16_t v211 = vextq_s8(v210, v210, 8uLL);
        while (1)
        {
          long long v77 = *(uint64_t ****)(v75 + 24);
          uint64_t v75 = *(void *)(v75 + 8);
          if (v77)
          {
            if (*((unsigned char *)v77 + 16) == 60) {
              break;
            }
          }
          if (!v75)
          {
            uint64_t v110 = *(void *)(v23 + 8);
            if (v110)
            {
              int v105 = *(llvm::DbgVariableIntrinsic **)(v110 + 24);
              if (v261)
              {
                unint64_t v106 = (llvm **)v260;
                uint64_t v107 = 8 * v261;
                do
                {
                  unint64_t v108 = *v106;
                  if (*(_DWORD *)(*((void *)*v106 - 4) + 36) != 58)
                  {
                    llvm::DIBuilder::DIBuilder((uint64_t)v263, *(void **)(*(void *)(*(void *)(v23 + 40) + 56) + 40), 0, 0);
                    llvm::ConvertDebugDeclareToDebugValue(v108, v105, (llvm::StoreInst *)v263, v109);
                    sub_1CC2DBB1C((uint64_t)v263);
                  }
                  ++v106;
                  v107 -= 8;
                }
                while (v107);
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            goto LABEL_183;
          }
        }
        unsigned int v78 = sub_1CD1D9434((uint64_t)v220, (uint64_t)v77);
        unint64_t v80 = LODWORD(__p[1]);
        if (!LODWORD(__p[1]))
        {
          char v101 = llvm::UndefValue::get((llvm::UndefValue *)*v77, v79);
          goto LABEL_159;
        }
        long long v81 = __p[0];
        do
        {
          unint64_t v82 = v80 >> 1;
          long long v83 = (unsigned int *)&v81[2 * (v80 >> 1)];
          unsigned int v85 = *v83;
          long long v84 = v83 + 4;
          v80 += ~(v80 >> 1);
          if (v85 < v78) {
            long long v81 = v84;
          }
          else {
            unint64_t v80 = v82;
          }
        }
        while (v80);
        if (v81 != __p[0])
        {
          uint64_t v86 = *(void *)(*(v81 - 1) - 64);
          if (!v76 || (*((unsigned char *)v77 + 23) & 0x20) == 0)
          {
LABEL_156:
            if ((uint64_t ***)v86 != v77) {
              goto LABEL_160;
            }
            char v101 = llvm::PoisonValue::get((llvm::PoisonValue *)*v77, v79);
LABEL_159:
            uint64_t v86 = (uint64_t)v101;
LABEL_160:
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v77, (llvm::Value *)v86, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          uint64_t v87 = ***v77;
          v263[0] = v77;
          int v88 = *(_DWORD *)(v87 + 2496);
          if (v88)
          {
            uint64_t v89 = *(void *)(v87 + 2480);
            int v90 = v88 - 1;
            unsigned int v91 = v90 & ((v77 >> 4) ^ (v77 >> 9));
            uint64_t v92 = (uint64_t ****)(v89 + 40 * v91);
            uint64_t v93 = *v92;
            if (*v92 == v77) {
              goto LABEL_152;
            }
            uint64_t v94 = 0;
            int v95 = 1;
            while (v93 != (uint64_t ***)-4096)
            {
              if (v94) {
                BOOL v96 = 0;
              }
              else {
                BOOL v96 = v93 == (uint64_t ***)-8192;
              }
              if (v96) {
                uint64_t v94 = v92;
              }
              unsigned int v97 = v91 + v95++;
              unsigned int v91 = v97 & v90;
              uint64_t v92 = (uint64_t ****)(v89 + 40 * v91);
              uint64_t v93 = *v92;
              if (*v92 == v77) {
                goto LABEL_152;
              }
            }
            if (v94) {
              uint64_t v103 = v94;
            }
            else {
              uint64_t v103 = v92;
            }
          }
          else
          {
            uint64_t v103 = 0;
          }
          uint64_t v92 = (uint64_t ****)sub_1CC609054(v87 + 2480, (uint64_t)v263, (uint64_t *)v263, v103);
          int v104 = (uint64_t ***)v263[0];
          v92[4] = 0;
          v92[3] = 0;
          int *v92 = v104;
          v92[1] = (uint64_t ***)(v92 + 3);
          v92[2] = (uint64_t ***)0x100000000;
LABEL_152:
          uint64_t v98 = *((unsigned int *)v92 + 4);
          if (v98)
          {
            long long v99 = v92[1] + 1;
            uint64_t v100 = 16 * v98;
            while (*((_DWORD *)v99 - 2) != 11)
            {
              v99 += 2;
              v100 -= 16;
              if (!v100) {
                goto LABEL_156;
              }
            }
            if (*v99)
            {
              unint64_t v102 = v77;
              if (!v77[5])
              {
                if (!v86 || *(unsigned __int8 *)(v86 + 16) < 0x1Cu || (unint64_t v102 = (void *)v86, !*(void *)(v86 + 40))) {
                  unint64_t v102 = 0;
                }
              }
              *(int8x16_t *)unint64_t v263 = v211;
              v264[0] = v102;
              v264[1] = v61;
              uint64_t v265 = 0;
              LOBYTE(v266) = 1;
              if ((sub_1CC1620B8(v86, 0, (uint64_t)v263) & 1) == 0) {
                sub_1CD1D9678(v76, (uint64_t)v77);
              }
            }
          }
          goto LABEL_156;
        }
        if (__p[0] != v268) {
          free(__p[0]);
        }
      }
      if (!DWORD2(v247))
      {
        uint64_t v132 = *(void *)(v206 + 80);
        if (v132 != v208)
        {
          int v133 = 0;
          while (1)
          {
            int v134 = (void *)(v132 - 24);
            if (!v132) {
              int v134 = 0;
            }
            __p[0] = v134;
            if (!v248) {
              break;
            }
            unsigned int v135 = (v248 - 1) & ((v134 >> 4) ^ (v134 >> 9));
            uint64_t v136 = (void *)(v247 + 16 * v135);
            char v137 = (void *)*v136;
            if (v134 != (void *)*v136)
            {
              unint64_t v138 = 0;
              int v139 = 1;
              while (v137 != (void *)-4096)
              {
                if (v138) {
                  BOOL v140 = 0;
                }
                else {
                  BOOL v140 = v137 == (void *)-8192;
                }
                if (v140) {
                  unint64_t v138 = v136;
                }
                unsigned int v141 = v135 + v139++;
                unsigned int v135 = v141 & (v248 - 1);
                uint64_t v136 = (void *)(v247 + 16 * v135);
                char v137 = (void *)*v136;
                if (v134 == (void *)*v136) {
                  goto LABEL_252;
                }
              }
              if (v138) {
                unsigned int v142 = v138;
              }
              else {
                unsigned int v142 = v136;
              }
              goto LABEL_251;
            }
LABEL_252:
            *((_DWORD *)v136 + 2) = v133++;
            uint64_t v132 = *(void *)(v132 + 8);
            if (v132 == v208) {
              goto LABEL_187;
            }
          }
          unsigned int v142 = 0;
LABEL_251:
          uint64_t v136 = sub_1CBFAF8D8((uint64_t)&v247, (uint64_t)__p, (uint64_t *)__p, v142);
          *uint64_t v136 = __p[0];
          *((_DWORD *)v136 + 2) = 0;
          goto LABEL_252;
        }
      }
LABEL_187:
      if (v261) {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v239, (uint64_t)&v260);
      }
      *((_DWORD *)sub_1CBA7B7CC(&v233, v222) + 2) = 0;
      uint64_t v111 = (uint64_t *)v251;
      v263[0] = &v265;
      v263[1] = &v265;
      v264[0] = (void *)32;
      LODWORD(v264[1]) = 0;
      if (v252)
      {
        unsigned int v112 = 32;
        unint64_t v113 = &v265;
        size_t v114 = &v265;
        uint64_t v115 = (char *)v251 + 8 * v252;
        while (1)
        {
          uint64_t v116 = *v111;
          uint64_t v117 = HIDWORD(v264[0]);
          if (v113 != v114) {
            break;
          }
          if (!HIDWORD(v264[0])) {
            goto LABEL_199;
          }
          uint64_t v118 = 0;
          uint64_t v119 = 8 * HIDWORD(v264[0]);
          uint64_t v120 = v114;
          do
          {
            if (*v120 == v116) {
              goto LABEL_222;
            }
            if (*v120 == -2) {
              uint64_t v118 = v120;
            }
            ++v120;
            v119 -= 8;
          }
          while (v119);
          if (v118)
          {
            *uint64_t v118 = v116;
            --LODWORD(v264[1]);
          }
          else
          {
LABEL_199:
            if (HIDWORD(v264[0]) >= v112) {
              break;
            }
            ++HIDWORD(v264[0]);
            v114[v117] = v116;
          }
LABEL_222:
          unint64_t v113 = (uint64_t *)v263[1];
          size_t v114 = (uint64_t *)v263[0];
          if (++v111 == (uint64_t *)v115) {
            goto LABEL_230;
          }
        }
        if (3 * v112 <= 4 * (HIDWORD(v264[0]) - LODWORD(v264[1])))
        {
          if (v112 >= 0x40) {
            v112 *= 2;
          }
          else {
            unsigned int v112 = 128;
          }
        }
        else if (v112 - HIDWORD(v264[0]) >= v112 >> 3)
        {
          goto LABEL_203;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v263, v112);
        unsigned int v112 = v264[0];
        unint64_t v113 = (uint64_t *)v263[1];
LABEL_203:
        unsigned int v121 = v112 - 1;
        unsigned int v122 = (v112 - 1) & ((v116 >> 4) ^ (v116 >> 9));
        int v123 = &v113[v122];
        uint64_t v124 = *v123;
        if (*v123 == -1)
        {
          unint64_t v125 = 0;
LABEL_215:
          if (v125) {
            uint64_t v129 = v125;
          }
          else {
            uint64_t v129 = v123;
          }
          if (*v129 != v116)
          {
            if (*v129 == -2) {
              --LODWORD(v264[1]);
            }
            else {
              ++HIDWORD(v264[0]);
            }
            *uint64_t v129 = v116;
          }
        }
        else
        {
          unint64_t v125 = 0;
          int v126 = 1;
          while (v124 != v116)
          {
            if (v125) {
              BOOL v127 = 0;
            }
            else {
              BOOL v127 = v124 == -2;
            }
            if (v127) {
              unint64_t v125 = v123;
            }
            unsigned int v128 = v122 + v126++;
            unsigned int v122 = v128 & v121;
            int v123 = &v113[v128 & v121];
            uint64_t v124 = *v123;
            if (*v123 == -1) {
              goto LABEL_215;
            }
          }
        }
        goto LABEL_222;
      }
LABEL_230:
      uint64_t v212 = v216;
      uint64_t v213 = v216;
      uint64_t v214 = 32;
      LODWORD(v215) = 0;
      int v130 = v255;
      __p[0] = v268;
      __p[1] = (void *)0x4000000000;
      if (v255 >= 0x41) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v255)
      {
        memcpy(v268, __src, 8 * v255);
        int v131 = (int)__p[1];
      }
      else
      {
        int v131 = 0;
      }
      unsigned int v143 = v131 + v130;
      LODWORD(__p[1]) = v143;
      if (!v143)
      {
LABEL_391:
        if (__p[0] != v268) {
          free(__p[0]);
        }
        char v217 = 1;
        BOOL v218 = &v212;
        unint64_t v219 = v263;
        __p[0] = v268;
        __p[1] = (void *)0x2000000000;
        sub_1CC0A8014();
      }
      unsigned int v144 = 0;
      unsigned int v145 = v143;
      do
      {
        uint64_t v146 = *((void *)__p[0] + v144);
        unint64_t v147 = v263[0];
        if (v263[1] == v263[0])
        {
          unsigned int v148 = HIDWORD(v264[0]);
          uint64_t v149 = (char *)v263[1] + 8 * HIDWORD(v264[0]);
          if (HIDWORD(v264[0]))
          {
            uint64_t v150 = 0;
            while (*(void *)((char *)v263[1] + v150) != v146)
            {
              v150 += 8;
              if (8 * HIDWORD(v264[0]) == v150) {
                goto LABEL_277;
              }
            }
            uint64_t v149 = (char *)v263[1] + v150;
          }
LABEL_277:
          unint64_t v147 = v263[1];
        }
        else
        {
          int v151 = LODWORD(v264[0]) - 1;
          unsigned int v152 = (LODWORD(v264[0]) - 1) & ((v146 >> 4) ^ (v146 >> 9));
          uint64_t v149 = (char *)v263[1] + 8 * v152;
          uint64_t v153 = *(void *)v149;
          if (*(void *)v149 == -1)
          {
            int v154 = 0;
LABEL_296:
            if (v154) {
              uint64_t v149 = v154;
            }
            unsigned int v148 = HIDWORD(v264[0]);
            if (*(void *)v149 != v146) {
              uint64_t v149 = (char *)v263[1] + 8 * LODWORD(v264[0]);
            }
          }
          else
          {
            int v154 = 0;
            int v155 = 1;
            while (v153 != v146)
            {
              if (v154) {
                BOOL v156 = 0;
              }
              else {
                BOOL v156 = v153 == -2;
              }
              if (v156) {
                int v154 = v149;
              }
              unsigned int v157 = v152 + v155++;
              unsigned int v152 = v157 & v151;
              uint64_t v149 = (char *)v263[1] + 8 * (v157 & v151);
              uint64_t v153 = *(void *)v149;
              if (*(void *)v149 == -1) {
                goto LABEL_296;
              }
            }
            unsigned int v148 = HIDWORD(v264[0]);
          }
        }
        if (v263[1] == v147) {
          unsigned int v158 = v148;
        }
        else {
          unsigned int v158 = v264[0];
        }
        if (v149 != (char *)v263[1] + 8 * v158)
        {
          for (uint64_t j = (uint64_t *)(v146 + 48); ; uint64_t j = (uint64_t *)(v160 + 8))
          {
            uint64_t v160 = *j;
            uint64_t v161 = v160 - 24;
            if (!v160) {
              uint64_t v161 = 0;
            }
            int v162 = *(unsigned __int8 *)(v161 + 16);
            if (v160 && v162 == 61)
            {
              if (*(void *)(v161 - 32) == v23)
              {
                *((void *)__p[0] + v144) = *((void *)__p[0] + --v143);
                LODWORD(__p[1]) = v143;
                --v144;
                --v145;
                break;
              }
            }
            else if (v160 && v162 == 60 && *(void *)(v161 - 32) == v23)
            {
              break;
            }
          }
        }
        ++v144;
      }
      while (v144 != v145);
      while (1)
      {
        if (!v143) {
          goto LABEL_391;
        }
        uint64_t v163 = *((void *)__p[0] + v143 - 1);
        LODWORD(__p[1]) = v143 - 1;
        uint64_t v164 = v213;
        uint64_t v165 = HIDWORD(v214);
        if (v213 == v212)
        {
          if (HIDWORD(v214))
          {
            uint64_t v166 = 0;
            uint64_t v167 = 8 * HIDWORD(v214);
            int v168 = v213;
            do
            {
              if (*v168 == v163) {
                goto LABEL_383;
              }
              if (*v168 == -2) {
                uint64_t v166 = v168;
              }
              ++v168;
              v167 -= 8;
            }
            while (v167);
            if (v166)
            {
              void *v166 = v163;
              LODWORD(v215) = v215 - 1;
              goto LABEL_333;
            }
          }
          unsigned int v169 = v214;
          if (HIDWORD(v214) < v214)
          {
            ++HIDWORD(v214);
            v213[v165] = v163;
            goto LABEL_333;
          }
        }
        else
        {
          unsigned int v169 = v214;
        }
        if (3 * v169 <= 4 * (HIDWORD(v214) - (int)v215))
        {
          if (v169 >= 0x40) {
            v169 *= 2;
          }
          else {
            unsigned int v169 = 128;
          }
        }
        else if (v169 - HIDWORD(v214) >= v169 >> 3)
        {
          goto LABEL_314;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v212, v169);
        unsigned int v169 = v214;
        uint64_t v164 = v213;
LABEL_314:
        unsigned int v170 = v169 - 1;
        unsigned int v171 = (v169 - 1) & ((v163 >> 4) ^ (v163 >> 9));
        unint64_t v172 = &v164[v171];
        uint64_t v173 = *v172;
        if (*v172 == -1)
        {
          BOOL v174 = 0;
LABEL_326:
          if (v174) {
            unint64_t v178 = v174;
          }
          else {
            unint64_t v178 = v172;
          }
          if (*v178 != v163)
          {
            if (*v178 == -2) {
              LODWORD(v215) = v215 - 1;
            }
            else {
              ++HIDWORD(v214);
            }
            *unint64_t v178 = v163;
            do
            {
LABEL_333:
              uint64_t v163 = *(void *)(v163 + 8);
              if (!v163) {
                goto LABEL_383;
              }
              uint64_t v179 = *(void *)(v163 + 24);
              unsigned int v180 = *(unsigned __int8 *)(v179 + 16);
              if (v179) {
                BOOL v181 = v180 >= 0x1C;
              }
              else {
                BOOL v181 = 0;
              }
            }
            while (!v181 || v180 - 29 > 0xA);
LABEL_341:
            uint64_t v183 = *(void *)(v179 + 40);
            uint64_t v184 = v263[0];
            if (v263[1] == v263[0])
            {
              unsigned int v185 = HIDWORD(v264[0]);
              __int16 v186 = (char *)v263[1] + 8 * HIDWORD(v264[0]);
              if (HIDWORD(v264[0]))
              {
                uint64_t v187 = 0;
                while (*(void *)((char *)v263[1] + v187) != v183)
                {
                  v187 += 8;
                  if (8 * HIDWORD(v264[0]) == v187) {
                    goto LABEL_360;
                  }
                }
                __int16 v186 = (char *)v263[1] + v187;
              }
LABEL_360:
              uint64_t v184 = v263[1];
            }
            else
            {
              int v188 = LODWORD(v264[0]) - 1;
              unsigned int v189 = (LODWORD(v264[0]) - 1) & ((v183 >> 4) ^ (v183 >> 9));
              __int16 v186 = (char *)v263[1] + 8 * v189;
              uint64_t v190 = *(void *)v186;
              if (*(void *)v186 == -1)
              {
                int v191 = 0;
LABEL_377:
                if (v191) {
                  __int16 v186 = v191;
                }
                unsigned int v185 = HIDWORD(v264[0]);
                if (*(void *)v186 != v183) {
                  __int16 v186 = (char *)v263[1] + 8 * LODWORD(v264[0]);
                }
              }
              else
              {
                int v191 = 0;
                int v192 = 1;
                while (v190 != v183)
                {
                  if (v191) {
                    BOOL v193 = 0;
                  }
                  else {
                    BOOL v193 = v190 == -2;
                  }
                  if (v193) {
                    int v191 = v186;
                  }
                  unsigned int v194 = v189 + v192++;
                  unsigned int v189 = v194 & v188;
                  __int16 v186 = (char *)v263[1] + 8 * (v194 & v188);
                  uint64_t v190 = *(void *)v186;
                  if (*(void *)v186 == -1) {
                    goto LABEL_377;
                  }
                }
                unsigned int v185 = HIDWORD(v264[0]);
              }
            }
            if (v263[1] == v184) {
              unsigned int v195 = v185;
            }
            else {
              unsigned int v195 = v264[0];
            }
            if (v186 == (char *)v263[1] + 8 * v195)
            {
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__p[0] + LODWORD(__p[1])) = v183;
              ++LODWORD(__p[1]);
            }
            while (1)
            {
              uint64_t v163 = *(void *)(v163 + 8);
              if (!v163) {
                break;
              }
              uint64_t v179 = *(void *)(v163 + 24);
              unsigned int v196 = *(unsigned __int8 *)(v179 + 16);
              if (v179) {
                BOOL v197 = v196 >= 0x1C;
              }
              else {
                BOOL v197 = 0;
              }
              if (v197 && v196 - 29 < 0xB) {
                goto LABEL_341;
              }
            }
          }
        }
        else
        {
          BOOL v174 = 0;
          int v175 = 1;
          while (v173 != v163)
          {
            if (v174) {
              BOOL v176 = 0;
            }
            else {
              BOOL v176 = v173 == -2;
            }
            if (v176) {
              BOOL v174 = v172;
            }
            unsigned int v177 = v171 + v175++;
            unsigned int v171 = v177 & v170;
            unint64_t v172 = &v164[v177 & v170];
            uint64_t v173 = *v172;
            if (*v172 == -1) {
              goto LABEL_326;
            }
          }
        }
LABEL_383:
        unsigned int v143 = __p[1];
      }
    }
    MEMORY[0x1D25D9CD0](v220[0], 8);
    if (v260 != &v262) {
      free(v260);
    }
    if (__src != v256) {
      free(__src);
    }
    if (v251 != v253) {
      free(v251);
    }
    MEMORY[0x1D25D9CD0](v249, 8);
    MEMORY[0x1D25D9CD0](v247, 8);
    if (__b != v242) {
      free(__b);
    }
    uint64_t v199 = (char *)v239;
    if (v240)
    {
      uint64_t v200 = 24 * v240;
      do
      {
        char v201 = *(char **)&v199[v200 - 24];
        if (&v199[v200 - 8] != v201) {
          free(v201);
        }
        v200 -= 24;
      }
      while (v200);
      uint64_t v199 = (char *)v239;
    }
    if (v199 != v241) {
      free(v199);
    }
    MEMORY[0x1D25D9CD0](v237, 8);
    MEMORY[0x1D25D9CD0](v235, 8);
    MEMORY[0x1D25D9CD0](v233, 8);
    sub_1CC2DBB1C((uint64_t)v226);
    if (v222)
    {
      uint64_t v223 = (uint64_t *)v222;
      operator delete(v222);
    }
  }
}

uint64_t sub_1CD1D9300(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  int v3 = *(_DWORD *)(a1 + 1016);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 1000);
    int v5 = v3 - 1;
    unsigned int v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_16;
    }
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v7;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v7 = sub_1CBF8BBE8(a1 + 1000, (uint64_t)&v26, &v26, v13);
  *uint64_t v7 = v26;
  *((_DWORD *)v7 + 2) = 0;
LABEL_16:
  int v14 = *((_DWORD *)v7 + 2);
  if (!v14)
  {
    uint64_t v15 = v26;
    do
    {
      uint64_t v15 = *(void *)(v15 + 8);
      if (!v15)
      {
        int v14 = 1;
        goto LABEL_38;
      }
      uint64_t v16 = *(void *)(v15 + 24);
      unsigned int v17 = *(unsigned __int8 *)(v16 + 16);
      if (v16) {
        BOOL v18 = v17 >= 0x1C;
      }
      else {
        BOOL v18 = 0;
      }
    }
    while (!v18 || v17 - 29 > 0xA);
    int v20 = 0;
    while (1)
    {
      uint64_t v15 = *(void *)(v15 + 8);
      if (!v15) {
        break;
      }
      uint64_t v21 = *(void *)(v15 + 24);
      unsigned int v22 = *(unsigned __int8 *)(v21 + 16);
      if (v21) {
        BOOL v23 = v22 >= 0x1C;
      }
      else {
        BOOL v23 = 0;
      }
      if (v23 && v22 - 29 < 0xB) {
        ++v20;
      }
    }
    int v14 = v20 + 2;
LABEL_38:
    *((_DWORD *)v7 + 2) = v14;
  }
  return (v14 - 1);
}

uint64_t sub_1CD1D9434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  unsigned int v6 = a2 >> 4;
  if (!v5)
  {
LABEL_7:
    uint64_t v8 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
  uint64_t v8 = (uint64_t *)(v4 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 != a2)
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (uint64_t *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 != (uint64_t *)(v4 + 16 * v5)) {
    return *((unsigned int *)v8 + 2);
  }
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(void *)(v12 + 48);
  if (v14 == v12 + 40) {
    goto LABEL_43;
  }
  int v15 = 0;
  do
  {
    uint64_t v16 = v14 - 24;
    if (!v14) {
      uint64_t v16 = 0;
    }
    int v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 61)
    {
      int v20 = *(_DWORD *)(v16 + 20);
      if ((v20 & 0x40000000) != 0) {
        uint64_t v21 = *(void *)(v16 - 8);
      }
      else {
        uint64_t v21 = v16 - 32 * (v20 & 0x7FFFFFF);
      }
      uint64_t v22 = *(void *)(v21 + 32);
    }
    else
    {
      if (v17 != 60) {
        goto LABEL_40;
      }
      int v18 = *(_DWORD *)(v16 + 20);
      if ((v18 & 0x40000000) != 0) {
        long long v19 = *(uint64_t **)(v16 - 8);
      }
      else {
        long long v19 = (uint64_t *)(v16 - 32 * (v18 & 0x7FFFFFF));
      }
      uint64_t v22 = *v19;
    }
    if (*(unsigned char *)(v22 + 16) == 59)
    {
      uint64_t v38 = v16;
      int v23 = *(_DWORD *)(a1 + 16);
      if (v23)
      {
        int v24 = v23 - 1;
        unsigned int v25 = v24 & ((v16 >> 4) ^ (v16 >> 9));
        uint64_t v26 = (void *)(*(void *)a1 + 16 * v25);
        uint64_t v27 = *v26;
        if (v16 == *v26)
        {
LABEL_39:
          *((_DWORD *)v26 + 2) = v15++;
          goto LABEL_40;
        }
        uint64_t v28 = 0;
        int v29 = 1;
        while (v27 != -4096)
        {
          if (v28) {
            BOOL v30 = 0;
          }
          else {
            BOOL v30 = v27 == -8192;
          }
          if (v30) {
            uint64_t v28 = v26;
          }
          unsigned int v31 = v25 + v29++;
          unsigned int v25 = v31 & v24;
          uint64_t v26 = (void *)(*(void *)a1 + 16 * v25);
          uint64_t v27 = *v26;
          if (v16 == *v26) {
            goto LABEL_39;
          }
        }
        if (v28) {
          uint64_t v32 = v28;
        }
        else {
          uint64_t v32 = v26;
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v26 = sub_1CC21C538(a1, (uint64_t)&v38, &v38, v32);
      void *v26 = v38;
      *((_DWORD *)v26 + 2) = 0;
      goto LABEL_39;
    }
LABEL_40:
    uint64_t v14 = *(void *)(v14 + 8);
  }
  while (v14 != v13);
  uint64_t v4 = *(void *)a1;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
LABEL_43:
  if (v5)
  {
    LODWORD(v33) = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = (uint64_t *)(v4 + 16 * v33);
    uint64_t v34 = *v8;
    if (*v8 != a2)
    {
      int v35 = 1;
      while (v34 != -4096)
      {
        int v36 = v33 + v35++;
        uint64_t v33 = v36 & (v5 - 1);
        uint64_t v34 = *(void *)(v4 + 16 * v33);
        if (v34 == a2)
        {
          uint64_t v8 = (uint64_t *)(v4 + 16 * v33);
          return *((unsigned int *)v8 + 2);
        }
      }
      goto LABEL_49;
    }
  }
  else
  {
LABEL_49:
    uint64_t v8 = (uint64_t *)(v4 + 16 * v5);
  }
  return *((unsigned int *)v8 + 2);
}

char **sub_1CD1D9678(char **a1, uint64_t a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t ***)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
  llvm::Intrinsic::getType(*v4, 7, 0, 0);
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v4, 7, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v4, "llvm.assume", (const char *)0xB, Type, 0);
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x80uLL);
  v8[21] = v8[21] & 0x38000000 | 2;
  uint64_t v9 = (llvm::Value *)(v8 + 16);
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 16;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 7) = v8 + 16;
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v10, v11);
  __int16 v23 = 257;
  uint64_t v13 = *(llvm::Constant **)a2;
  uint64_t v14 = ***(void ***)a2 + 1888;
  if (*(void *)a2 && (*((_DWORD *)v13 + 2) & 0xFE) == 0x12)
  {
    long long v19 = (uint64_t **)(***(void ***)a2 + 1888);
    int v20 = (llvm::Type *)*((unsigned int *)v13 + 8);
    if (*((_DWORD *)v13 + 2) == 19) {
      llvm::ScalableVectorType::get(v19, v20);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v20);
    }
    uint64_t v14 = v21;
  }
  llvm::CmpInst::CmpInst(v9, v14, 53, 33, a2, (uint64_t)NullValue, v22, 0, 0);
  sub_1CC5C6C08((void *)(*(void *)(a2 + 40) + 40), a2 + 24, v9);
  if (v7) {
    int v15 = *(uint64_t ***)(v7 + 24);
  }
  else {
    int v15 = 0;
  }
  v24[0] = (uint64_t)(v8 + 16);
  __int16 v23 = 257;
  uint64_t v16 = (char *)operator new(0x90uLL);
  *((_DWORD *)v16 + 21) = *((_DWORD *)v16 + 21) & 0x38000000 | 2;
  int v17 = (llvm::Value *)(v16 + 64);
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = v16 + 64;
  *((void *)v16 + 4) = 0;
  *((void *)v16 + 5) = 0;
  *((void *)v16 + 6) = 0;
  *((void *)v16 + 7) = v16 + 64;
  *((void *)v16 + 8) = *v15[2];
  *((void *)v16 + 9) = 0;
  v16[80] = 84;
  v16[81] = 0;
  *((_WORD *)v16 + 41) = 0;
  *((_DWORD *)v16 + 21) = 2;
  *((_DWORD *)v16 + 30) = 0;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *((void *)v16 + 16) = 0;
  llvm::CallInst::init((uint64_t ***)v16 + 8, v15, (uint64_t **)v7, v24, 1, 0, 0, v22);
  sub_1CC5C6C08((void *)(*((void *)v8 + 13) + 40), (uint64_t)(v8 + 22), v17);
  return llvm::AssumptionCache::registerAssumption(a1, (uint64_t)v17);
}

unsigned int *sub_1CD1D98C4(unsigned int *result, int *a2, uint64_t a3, char a4)
{
  uint64_t v7 = (uint64_t)result;
LABEL_2:
  uint64_t v8 = a2 - 4;
  while (2)
  {
    uint64_t v9 = 1 - a3;
LABEL_4:
    uint64_t v10 = (uint64_t)a2 - v7;
    unint64_t v11 = ((uint64_t)a2 - v7) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        unsigned int v12 = *(_DWORD *)v7;
        if (*v8 < *(_DWORD *)v7)
        {
          *(_DWORD *)uint64_t v7 = *v8;
          *(a2 - 4) = v12;
          uint64_t v13 = *(void *)(v7 + 8);
          *(void *)(v7 + 8) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v13;
        }
        return result;
      case 3uLL:
        return sub_1CC4EA770((unsigned int *)v7, (unsigned int *)(v7 + 16), (unsigned int *)a2 - 4);
      case 4uLL:
        return sub_1CC4EAA60(v7, v7 + 16, v7 + 32, (uint64_t)(a2 - 4));
      case 5uLL:
        return sub_1CD1DA034(v7, v7 + 16, v7 + 32, v7 + 48, (uint64_t)(a2 - 4));
      default:
        if (v10 > 383)
        {
          if (v9 == 1)
          {
            if ((int *)v7 != a2)
            {
              return (unsigned int *)sub_1CD1DA118(v7, a2, a2);
            }
            return result;
          }
          unint64_t v26 = v11 >> 1;
          unint64_t v27 = v7 + 16 * (v11 >> 1);
          if ((unint64_t)v10 >= 0x801)
          {
            sub_1CC4EA770((unsigned int *)v7, (unsigned int *)(v7 + 16 * (v11 >> 1)), (unsigned int *)a2 - 4);
            sub_1CC4EA770((unsigned int *)(v7 + 16), (unsigned int *)(v27 - 16), (unsigned int *)a2 - 8);
            sub_1CC4EA770((unsigned int *)(v7 + 32), (unsigned int *)(v7 + 16 + 16 * v26), (unsigned int *)a2 - 12);
            sub_1CC4EA770((unsigned int *)(v27 - 16), (unsigned int *)v27, (unsigned int *)(v7 + 16 + 16 * v26));
            unsigned int v40 = *(_DWORD *)v7;
            *(_DWORD *)uint64_t v7 = *(_DWORD *)v27;
            *(_DWORD *)unint64_t v27 = v40;
            uint64_t v41 = *(void *)(v7 + 8);
            *(void *)(v7 + 8) = *(void *)(v27 + 8);
            *(void *)(v27 + 8) = v41;
          }
          else
          {
            sub_1CC4EA770((unsigned int *)(v7 + 16 * (v11 >> 1)), (unsigned int *)v7, (unsigned int *)a2 - 4);
          }
          if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 16) >= *(_DWORD *)v7)
          {
            uint64_t result = sub_1CD1D9CE8((int *)v7, (unsigned int *)a2);
            uint64_t v38 = result;
            goto LABEL_61;
          }
          unint64_t v28 = sub_1CD1D9DB8((unsigned int *)v7, (unsigned int *)a2);
          if ((v29 & 1) == 0) {
            goto LABEL_41;
          }
          BOOL v39 = sub_1CD1D9E90(v7, v28);
          uint64_t v38 = (unsigned int *)(v28 + 16);
          uint64_t result = (unsigned int *)sub_1CD1D9E90(v28 + 16, (uint64_t)a2);
          if (!result)
          {
            if (!v39)
            {
LABEL_41:
              a3 = -v9;
              uint64_t result = (unsigned int *)sub_1CD1D98C4(v7, v28, -v9, a4 & 1);
              a4 = 0;
              uint64_t v7 = v28 + 16;
              continue;
            }
LABEL_61:
            ++v9;
            uint64_t v7 = (uint64_t)v38;
            goto LABEL_4;
          }
          a3 = -v9;
          a2 = (int *)v28;
          if (v39) {
            return result;
          }
          goto LABEL_2;
        }
        uint64_t v14 = (int *)(v7 + 16);
        BOOL v16 = (int *)v7 == a2 || v14 == a2;
        if (a4)
        {
          if (!v16)
          {
            uint64_t v17 = 0;
            uint64_t v18 = v7;
            do
            {
              long long v19 = v14;
              unsigned int v20 = *(_DWORD *)(v18 + 16);
              unsigned int v21 = *(_DWORD *)v18;
              if (v20 < *(_DWORD *)v18)
              {
                uint64_t v22 = *(void *)(v18 + 24);
                uint64_t v23 = v17;
                while (1)
                {
                  uint64_t v24 = v7 + v23;
                  *(_DWORD *)(v24 + 16) = v21;
                  *(void *)(v24 + 24) = *(void *)(v7 + v23 + 8);
                  if (!v23) {
                    break;
                  }
                  unsigned int v21 = *(_DWORD *)(v24 - 16);
                  v23 -= 16;
                  if (v20 >= v21)
                  {
                    uint64_t v25 = v7 + v23 + 16;
                    goto LABEL_33;
                  }
                }
                uint64_t v25 = v7;
LABEL_33:
                *(_DWORD *)uint64_t v25 = v20;
                *(void *)(v25 + 8) = v22;
              }
              uint64_t v14 = v19 + 4;
              v17 += 16;
              uint64_t v18 = (uint64_t)v19;
            }
            while (v19 + 4 != a2);
          }
        }
        else if (!v16)
        {
          BOOL v30 = (void *)(v7 + 24);
          do
          {
            uint64_t v31 = (uint64_t)v14;
            unsigned int v32 = *(_DWORD *)(v7 + 16);
            unsigned int v33 = *(_DWORD *)v7;
            if (v32 < *(_DWORD *)v7)
            {
              uint64_t v34 = *(void *)(v7 + 24);
              int v35 = v30;
              do
              {
                int v36 = v35;
                *((_DWORD *)v35 - 2) = v33;
                uint64_t v37 = *(v35 - 2);
                v35 -= 2;
                void *v36 = v37;
                unsigned int v33 = *((_DWORD *)v36 - 10);
              }
              while (v32 < v33);
              *((_DWORD *)v35 - 2) = v32;
              *int v35 = v34;
            }
            uint64_t v14 = (int *)(v31 + 16);
            v30 += 2;
            uint64_t v7 = v31;
          }
          while ((int *)(v31 + 16) != a2);
        }
        return result;
    }
  }
}

unsigned int *sub_1CD1D9CE8(int *a1, unsigned int *a2)
{
  unsigned int v2 = *a1;
  if (*a1 >= *(a2 - 4))
  {
    uint64_t v5 = (unsigned int *)(a1 + 4);
    do
    {
      int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 4;
    }
    while (v2 >= *v3);
  }
  else
  {
    int v3 = (unsigned int *)a1;
    do
    {
      unsigned int v4 = v3[4];
      v3 += 4;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      unsigned int v6 = *(a2 - 4);
      a2 -= 4;
    }
    while (v2 < v6);
  }
  uint64_t v7 = *((void *)a1 + 1);
  if (v3 < a2)
  {
    unsigned int v8 = *v3;
    unsigned int v9 = *a2;
    do
    {
      *int v3 = v9;
      *a2 = v8;
      uint64_t v10 = *((void *)v3 + 1);
      *((void *)v3 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v10;
      do
      {
        unsigned int v11 = v3[4];
        v3 += 4;
        unsigned int v8 = v11;
      }
      while (v2 >= v11);
      do
      {
        unsigned int v12 = *(a2 - 4);
        a2 -= 4;
        unsigned int v9 = v12;
      }
      while (v2 < v12);
    }
    while (v3 < a2);
  }
  if (v3 - 4 != (unsigned int *)a1)
  {
    *a1 = *(v3 - 4);
    *((void *)a1 + 1) = *((void *)v3 - 1);
  }
  *(v3 - 4) = v2;
  *((void *)v3 - 1) = v7;
  return v3;
}

unint64_t sub_1CD1D9DB8(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  do
  {
    unsigned int v5 = a1[v2 + 4];
    v2 += 4;
  }
  while (v5 < v3);
  unint64_t v6 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    do
    {
      if (v6 >= (unint64_t)a2) {
        break;
      }
      unsigned int v8 = *(a2 - 4);
      a2 -= 4;
    }
    while (v8 >= v3);
  }
  else
  {
    do
    {
      unsigned int v7 = *(a2 - 4);
      a2 -= 4;
    }
    while (v7 >= v3);
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v10 = (unint64_t)&a1[v2];
  }
  else
  {
    unsigned int v9 = *a2;
    unint64_t v10 = (unint64_t)&a1[v2];
    unsigned int v11 = a2;
    do
    {
      *(_DWORD *)unint64_t v10 = v9;
      *unsigned int v11 = v5;
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = *((void *)v11 + 1);
      *((void *)v11 + 1) = v12;
      do
      {
        unsigned int v13 = *(_DWORD *)(v10 + 16);
        v10 += 16;
        unsigned int v5 = v13;
      }
      while (v13 < v3);
      do
      {
        unsigned int v14 = *(v11 - 4);
        v11 -= 4;
        unsigned int v9 = v14;
      }
      while (v14 >= v3);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((unsigned int *)(v10 - 16) != a1)
  {
    *a1 = *(_DWORD *)(v10 - 16);
    *((void *)a1 + 1) = *(void *)(v10 - 8);
  }
  *(_DWORD *)(v10 - 16) = v3;
  *(void *)(v10 - 8) = v4;
  return v10 - 16;
}

BOOL sub_1CD1D9E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_1CC4EA770((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      sub_1CC4EAA60(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1CD1DA034(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 32);
      sub_1CC4EA770((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)v10;
    unsigned int v14 = *v9;
    if (*(_DWORD *)v10 < *v9)
    {
      uint64_t v15 = *(void *)(v10 + 8);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_DWORD *)(v17 + 48) = v14;
        *(void *)(v17 + 56) = *(void *)(a1 + v16 + 40);
        if (v16 == -32) {
          break;
        }
        unsigned int v14 = *(_DWORD *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          uint64_t v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v18 = v13;
      *(void *)(v18 + 8) = v15;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    unsigned int v9 = (unsigned int *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

unsigned int *sub_1CD1DA034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL result = sub_1CC4EAA60(a1, a2, a3, a4);
  int v11 = *(_DWORD *)a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v11;
    uint64_t v12 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v12;
    int v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v13;
      uint64_t v14 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v14;
      int v15 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v15;
        uint64_t v16 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v16;
        int v17 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v17;
          uint64_t v18 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v18;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD1DA118(uint64_t result, int *a2, int *a3)
{
  if ((int *)result != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      uint64_t v10 = (unsigned int *)(result + 16 * v8);
      do
      {
        BOOL result = sub_1CD1DA320(v5, v7, v10);
        v10 -= 4;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      int v11 = v4;
      do
      {
        int v12 = *v11;
        if (*v11 < *(_DWORD *)v5)
        {
          *int v11 = *(_DWORD *)v5;
          *(_DWORD *)uint64_t v5 = v12;
          uint64_t v13 = *((void *)v11 + 1);
          *((void *)v11 + 1) = *(void *)(v5 + 8);
          *(void *)(v5 + 8) = v13;
          BOOL result = sub_1CD1DA320(v5, v7, (unsigned int *)v5);
        }
        v11 += 4;
      }
      while (v11 != a3);
    }
    if (v6 >= 17)
    {
      do
      {
        uint64_t v14 = 0;
        unsigned int v15 = *(_DWORD *)v5;
        uint64_t v16 = *(void *)(v5 + 8);
        uint64_t v17 = v5;
        do
        {
          uint64_t v18 = v17 + 16 * v14 + 16;
          uint64_t v19 = (2 * v14) | 1;
          uint64_t v14 = 2 * v14 + 2;
          if (v14 >= v7)
          {
            unsigned int v20 = *(_DWORD *)v18;
            uint64_t v14 = v19;
          }
          else
          {
            unsigned int v20 = *(_DWORD *)v18;
            unsigned int v21 = *(_DWORD *)(v18 + 16);
            if (*(_DWORD *)v18 <= v21) {
              unsigned int v20 = *(_DWORD *)(v18 + 16);
            }
            if (*(_DWORD *)v18 >= v21) {
              uint64_t v14 = v19;
            }
            else {
              v18 += 16;
            }
          }
          *(_DWORD *)uint64_t v17 = v20;
          *(void *)(v17 + 8) = *(void *)(v18 + 8);
          uint64_t v17 = v18;
        }
        while (v14 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        if ((int *)v18 == v4 - 4)
        {
          *(_DWORD *)uint64_t v18 = v15;
          *(void *)(v18 + 8) = v16;
        }
        else
        {
          *(_DWORD *)uint64_t v18 = *(v4 - 4);
          *(void *)(v18 + 8) = *((void *)v4 - 1);
          *(v4 - 4) = v15;
          *((void *)v4 - 1) = v16;
          uint64_t v22 = v18 - v5 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            uint64_t v24 = v5 + 16 * v23;
            int v25 = *(_DWORD *)v24;
            unsigned int v26 = *(_DWORD *)v18;
            if (*(_DWORD *)v24 < *(_DWORD *)v18)
            {
              uint64_t v27 = *(void *)(v18 + 8);
              do
              {
                uint64_t v28 = v18;
                uint64_t v18 = v24;
                *(_DWORD *)uint64_t v28 = v25;
                *(void *)(v28 + 8) = *(void *)(v24 + 8);
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                uint64_t v24 = v5 + 16 * v23;
                int v25 = *(_DWORD *)v24;
              }
              while (*(_DWORD *)v24 < v26);
              *(_DWORD *)uint64_t v18 = v26;
              *(void *)(v18 + 8) = v27;
            }
          }
        }
        v4 -= 4;
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CD1DA320(uint64_t result, uint64_t a2, unsigned int *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v5 = v3 >> 3;
      uint64_t v6 = (v3 >> 3) + 1;
      uint64_t v7 = (unsigned int *)(result + 16 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 >= a2)
      {
        unsigned int v9 = *v7;
      }
      else
      {
        unsigned int v9 = v7[4];
        BOOL v10 = *v7 >= v9;
        if (*v7 > v9) {
          unsigned int v9 = *v7;
        }
        if (!v10)
        {
          v7 += 4;
          uint64_t v6 = v8;
        }
      }
      unsigned int v11 = *a3;
      if (v9 >= *a3)
      {
        uint64_t v12 = *((void *)a3 + 1);
        do
        {
          uint64_t v13 = a3;
          a3 = v7;
          unsigned int *v13 = v9;
          *((void *)v13 + 1) = *((void *)v7 + 1);
          if (v4 < v6) {
            break;
          }
          uint64_t v14 = (2 * v6) | 1;
          uint64_t v7 = (unsigned int *)(result + 16 * v14);
          uint64_t v6 = 2 * v6 + 2;
          if (v6 >= a2)
          {
            unsigned int v9 = *v7;
            uint64_t v6 = v14;
          }
          else
          {
            unsigned int v9 = *v7;
            unsigned int v15 = v7[4];
            if (*v7 <= v15) {
              unsigned int v9 = v7[4];
            }
            if (*v7 >= v15) {
              uint64_t v6 = v14;
            }
            else {
              v7 += 4;
            }
          }
        }
        while (v9 >= v11);
        *a3 = v11;
        *((void *)a3 + 1) = v12;
      }
    }
  }
  return result;
}

unint64_t sub_1CD1DA3F8(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v11 = (uint64_t *)result;
LABEL_2:
  uint64_t v12 = a2 - 1;
  uint64_t v13 = v11;
  while (1)
  {
    unsigned int v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v211 = *(a2 - 1);
          uint64_t v212 = *v13;
          uint64_t v213 = *(void *)(*(void *)a3 + 976);
          uint64_t v214 = *(unsigned int *)(*(void *)a3 + 992);
          if (!v214) {
            goto LABEL_501;
          }
          unsigned int v215 = v214 - 1;
          LODWORD(v216) = (v214 - 1) & ((v211 >> 4) ^ (v211 >> 9));
          char v217 = (uint64_t *)(v213 + 16 * v216);
          uint64_t v218 = *v217;
          if (*v217 == v211)
          {
            unsigned int v219 = *((_DWORD *)v217 + 2);
            goto LABEL_504;
          }
          int v419 = 1;
          while (v218 != -4096)
          {
            int v420 = v216 + v419++;
            uint64_t v216 = v420 & v215;
            uint64_t v218 = *(void *)(v213 + 16 * v216);
            if (v218 == v211) {
              goto LABEL_502;
            }
          }
LABEL_501:
          uint64_t v216 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_502:
          unsigned int v219 = *(_DWORD *)(v213 + 16 * v216 + 8);
          if (!v214) {
            goto LABEL_517;
          }
          unsigned int v215 = v214 - 1;
LABEL_504:
          LODWORD(v423) = v215 & ((v212 >> 4) ^ (v212 >> 9));
          unsigned int v424 = (uint64_t *)(v213 + 16 * v423);
          uint64_t v425 = *v424;
          if (*v424 == v212) {
            goto LABEL_518;
          }
          int v426 = 1;
          while (v425 != -4096)
          {
            int v427 = v423 + v426++;
            uint64_t v423 = v427 & v215;
            uint64_t v425 = *(void *)(v213 + 16 * v423);
            if (v425 == v212)
            {
              unsigned int v424 = (uint64_t *)(v213 + 16 * v423);
              goto LABEL_518;
            }
          }
LABEL_517:
          unsigned int v424 = (uint64_t *)(v213 + 16 * v214);
LABEL_518:
          if (v219 < *((_DWORD *)v424 + 2))
          {
            uint64_t *v13 = v211;
            *(a2 - 1) = v212;
          }
          return result;
        case 3:
          return (unint64_t)sub_1CD1DC07C(v13, v13 + 1, a2 - 1, a3);
        case 4:
          return (unint64_t)sub_1CD1DCC48(v13, v13 + 1, v13 + 2, a2 - 1, a3);
        case 5:
          unint64_t v220 = v13 + 2;
          int v221 = v13 + 3;
          BOOL result = (unint64_t)sub_1CD1DCC48(v13, v13 + 1, v13 + 2, v13 + 3, a3);
          uint64_t v222 = *(a2 - 1);
          uint64_t v223 = v13[3];
          uint64_t v224 = *(void *)(*(void *)a3 + 976);
          uint64_t v225 = *(unsigned int *)(*(void *)a3 + 992);
          if (!v225) {
            goto LABEL_509;
          }
          unsigned int v226 = v225 - 1;
          LODWORD(v227) = (v225 - 1) & ((v222 >> 4) ^ (v222 >> 9));
          uint64_t v228 = (uint64_t *)(v224 + 16 * v227);
          uint64_t v229 = *v228;
          if (*v228 == v222)
          {
            unsigned int v230 = *((_DWORD *)v228 + 2);
            goto LABEL_512;
          }
          int v421 = 1;
          break;
        default:
          JUMPOUT(0);
      }
      while (v229 != -4096)
      {
        int v422 = v227 + v421++;
        uint64_t v227 = v422 & v226;
        uint64_t v229 = *(void *)(v224 + 16 * v227);
        if (v229 == v222) {
          goto LABEL_510;
        }
      }
LABEL_509:
      uint64_t v227 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_510:
      unsigned int v230 = *(_DWORD *)(v224 + 16 * v227 + 8);
      if (!v225) {
        goto LABEL_520;
      }
      unsigned int v226 = v225 - 1;
LABEL_512:
      LODWORD(v428) = v226 & ((v223 >> 4) ^ (v223 >> 9));
      unsigned int v429 = (uint64_t *)(v224 + 16 * v428);
      uint64_t v430 = *v429;
      if (*v429 == v223) {
        goto LABEL_521;
      }
      int v431 = 1;
      while (v430 != -4096)
      {
        int v432 = v428 + v431++;
        uint64_t v428 = v432 & v226;
        uint64_t v430 = *(void *)(v224 + 16 * v428);
        if (v430 == v223)
        {
          unsigned int v429 = (uint64_t *)(v224 + 16 * v428);
          goto LABEL_521;
        }
      }
LABEL_520:
      unsigned int v429 = (uint64_t *)(v224 + 16 * v225);
LABEL_521:
      if (v230 >= *((_DWORD *)v429 + 2)) {
        return result;
      }
      *int v221 = v222;
      *(a2 - 1) = v223;
      uint64_t v433 = *v221;
      uint64_t v434 = *v220;
      uint64_t v435 = *(void *)(*(void *)a3 + 976);
      uint64_t v436 = *(unsigned int *)(*(void *)a3 + 992);
      unsigned int v437 = *v221 >> 4;
      if (v436)
      {
        unsigned int v438 = v436 - 1;
        LODWORD(v439) = (v436 - 1) & (v437 ^ (v433 >> 9));
        unint64_t v440 = (uint64_t *)(v435 + 16 * v439);
        uint64_t v441 = *v440;
        if (*v440 == v433)
        {
          unsigned int v442 = *((_DWORD *)v440 + 2);
          goto LABEL_532;
        }
        int v443 = 1;
        while (v441 != -4096)
        {
          int v444 = v439 + v443++;
          uint64_t v439 = v444 & v438;
          uint64_t v441 = *(void *)(v435 + 16 * v439);
          if (v441 == v433) {
            goto LABEL_530;
          }
        }
      }
      uint64_t v439 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_530:
      unsigned int v442 = *(_DWORD *)(v435 + 16 * v439 + 8);
      if (!v436) {
        goto LABEL_537;
      }
      unsigned int v438 = v436 - 1;
LABEL_532:
      LODWORD(v445) = v438 & ((v434 >> 4) ^ (v434 >> 9));
      unint64_t v446 = (uint64_t *)(v435 + 16 * v445);
      uint64_t v447 = *v446;
      if (*v446 == v434) {
        goto LABEL_538;
      }
      int v448 = 1;
      while (v447 != -4096)
      {
        int v449 = v445 + v448++;
        uint64_t v445 = v449 & v438;
        uint64_t v447 = *(void *)(v435 + 16 * v445);
        if (v447 == v434)
        {
          unint64_t v446 = (uint64_t *)(v435 + 16 * v445);
          goto LABEL_538;
        }
      }
LABEL_537:
      unint64_t v446 = (uint64_t *)(v435 + 16 * v436);
LABEL_538:
      if (v442 >= *((_DWORD *)v446 + 2)) {
        return result;
      }
      *unint64_t v220 = v433;
      *int v221 = v434;
      uint64_t v450 = v13[1];
      uint64_t v451 = *(void *)(*(void *)a3 + 976);
      uint64_t v452 = *(unsigned int *)(*(void *)a3 + 992);
      if (v452)
      {
        unsigned int v453 = v452 - 1;
        LODWORD(v454) = (v452 - 1) & (v437 ^ (v433 >> 9));
        uint64_t v455 = (uint64_t *)(v451 + 16 * v454);
        uint64_t v456 = *v455;
        if (*v455 == v433)
        {
          unsigned int v457 = *((_DWORD *)v455 + 2);
          goto LABEL_549;
        }
        int v458 = 1;
        while (v456 != -4096)
        {
          int v459 = v454 + v458++;
          uint64_t v454 = v459 & v453;
          uint64_t v456 = *(void *)(v451 + 16 * v454);
          if (v456 == v433) {
            goto LABEL_547;
          }
        }
      }
      uint64_t v454 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_547:
      unsigned int v457 = *(_DWORD *)(v451 + 16 * v454 + 8);
      if (!v452) {
        goto LABEL_554;
      }
      unsigned int v453 = v452 - 1;
LABEL_549:
      LODWORD(v460) = v453 & ((v450 >> 4) ^ (v450 >> 9));
      uint64_t v461 = (uint64_t *)(v451 + 16 * v460);
      uint64_t v462 = *v461;
      if (*v461 == v450) {
        goto LABEL_555;
      }
      int v463 = 1;
      while (v462 != -4096)
      {
        int v464 = v460 + v463++;
        uint64_t v460 = v464 & v453;
        uint64_t v462 = *(void *)(v451 + 16 * v460);
        if (v462 == v450)
        {
          uint64_t v461 = (uint64_t *)(v451 + 16 * v460);
          goto LABEL_555;
        }
      }
LABEL_554:
      uint64_t v461 = (uint64_t *)(v451 + 16 * v452);
LABEL_555:
      if (v457 >= *((_DWORD *)v461 + 2)) {
        return result;
      }
      v13[1] = v433;
      v13[2] = v450;
      uint64_t v465 = *v13;
      uint64_t v466 = *(void *)(*(void *)a3 + 976);
      uint64_t v467 = *(unsigned int *)(*(void *)a3 + 992);
      if (v467)
      {
        unsigned int v468 = v437 ^ (v433 >> 9);
        unsigned int v469 = v467 - 1;
        LODWORD(v470) = (v467 - 1) & v468;
        long long v471 = (uint64_t *)(v466 + 16 * v470);
        uint64_t v472 = *v471;
        if (*v471 == v433)
        {
          unsigned int v473 = *((_DWORD *)v471 + 2);
          goto LABEL_566;
        }
        int v474 = 1;
        while (v472 != -4096)
        {
          int v475 = v470 + v474++;
          uint64_t v470 = v475 & v469;
          uint64_t v472 = *(void *)(v466 + 16 * v470);
          if (v472 == v433) {
            goto LABEL_564;
          }
        }
      }
      uint64_t v470 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_564:
      unsigned int v473 = *(_DWORD *)(v466 + 16 * v470 + 8);
      if (!v467) {
        goto LABEL_571;
      }
      unsigned int v469 = v467 - 1;
LABEL_566:
      LODWORD(v476) = v469 & ((v465 >> 4) ^ (v465 >> 9));
      uint64_t v477 = (uint64_t *)(v466 + 16 * v476);
      uint64_t v478 = *v477;
      if (*v477 == v465) {
        goto LABEL_572;
      }
      int v479 = 1;
      while (v478 != -4096)
      {
        int v480 = v476 + v479++;
        uint64_t v476 = v480 & v469;
        uint64_t v478 = *(void *)(v466 + 16 * v476);
        if (v478 == v465)
        {
          uint64_t v477 = (uint64_t *)(v466 + 16 * v476);
          goto LABEL_572;
        }
      }
LABEL_571:
      uint64_t v477 = (uint64_t *)(v466 + 16 * v467);
LABEL_572:
      if (v473 < *((_DWORD *)v477 + 2))
      {
        uint64_t *v13 = v433;
        v13[1] = v465;
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v13 == a2) {
        return result;
      }
      int64_t v267 = (unint64_t)(v15 - 2) >> 1;
      int64_t v268 = v267;
      while (1)
      {
        int64_t v269 = v268;
        if (v267 < v268) {
          goto LABEL_388;
        }
        uint64_t v270 = (2 * v268) | 1;
        v271 = &v13[v270];
        uint64_t v272 = *(void *)a3;
        if (2 * v269 + 2 >= v15)
        {
          uint64_t v279 = *(void *)(v272 + 976);
          LODWORD(v272) = *(_DWORD *)(v272 + 992);
          goto LABEL_330;
        }
        uint64_t v273 = v271[1];
        uint64_t v279 = *(void *)(v272 + 976);
        uint64_t v272 = *(unsigned int *)(v272 + 992);
        if (v272)
        {
          unsigned int v274 = v272 - 1;
          LODWORD(v275) = (v272 - 1) & ((*v271 >> 4) ^ (*v271 >> 9));
          uint64_t v276 = (uint64_t *)(v279 + 16 * v275);
          uint64_t v277 = *v276;
          if (*v276 == *v271)
          {
            unsigned int v278 = *((_DWORD *)v276 + 2);
            goto LABEL_322;
          }
          int v280 = 1;
          while (v277 != -4096)
          {
            int v281 = v275 + v280++;
            uint64_t v275 = v281 & v274;
            uint64_t v277 = *(void *)(v279 + 16 * v275);
            if (v277 == *v271) {
              goto LABEL_320;
            }
          }
        }
        uint64_t v275 = v272;
LABEL_320:
        unsigned int v278 = *(_DWORD *)(v279 + 16 * v275 + 8);
        if (v272)
        {
          unsigned int v274 = v272 - 1;
LABEL_322:
          LODWORD(v282) = v274 & ((v273 >> 4) ^ (v273 >> 9));
          uint64_t v283 = (uint64_t *)(v279 + 16 * v282);
          uint64_t v284 = *v283;
          if (*v283 != v273)
          {
            int v285 = 1;
            do
            {
              if (v284 == -4096) {
                goto LABEL_327;
              }
              int v286 = v282 + v285++;
              uint64_t v282 = v286 & v274;
              uint64_t v284 = *(void *)(v279 + 16 * v282);
            }
            while (v284 != v273);
            uint64_t v283 = (uint64_t *)(v279 + 16 * v282);
          }
          goto LABEL_328;
        }
LABEL_327:
        uint64_t v283 = (uint64_t *)(v279 + 16 * v272);
LABEL_328:
        if (v278 < *((_DWORD *)v283 + 2))
        {
          ++v271;
          uint64_t v270 = 2 * v269 + 2;
        }
LABEL_330:
        unint64_t v287 = &v13[v269];
        uint64_t v288 = *v271;
        uint64_t v289 = *v287;
        BOOL result = *v287 >> 4;
        if (v272)
        {
          unsigned int v290 = v272 - 1;
          LODWORD(v291) = ((v288 >> 4) ^ (v288 >> 9)) & (v272 - 1);
          unint64_t v292 = (uint64_t *)(v279 + 16 * v291);
          uint64_t v293 = *v292;
          if (*v292 == v288)
          {
            unsigned int v294 = *((_DWORD *)v292 + 2);
            goto LABEL_340;
          }
          int v295 = 1;
          while (v293 != -4096)
          {
            int v296 = v291 + v295++;
            uint64_t v291 = v296 & v290;
            uint64_t v293 = *(void *)(v279 + 16 * v291);
            if (v293 == v288) {
              goto LABEL_338;
            }
          }
        }
        uint64_t v291 = v272;
LABEL_338:
        unsigned int v294 = *(_DWORD *)(v279 + 16 * v291 + 8);
        if (!v272)
        {
LABEL_345:
          unint64_t v298 = (uint64_t *)(v279 + 16 * v272);
          goto LABEL_346;
        }
        unsigned int v290 = v272 - 1;
LABEL_340:
        LODWORD(v297) = v290 & (result ^ (v289 >> 9));
        unint64_t v298 = (uint64_t *)(v279 + 16 * v297);
        uint64_t v299 = *v298;
        if (*v298 != v289)
        {
          int v300 = 1;
          do
          {
            if (v299 == -4096) {
              goto LABEL_345;
            }
            int v301 = v297 + v300++;
            uint64_t v297 = v301 & v290;
            uint64_t v299 = *(void *)(v279 + 16 * v297);
          }
          while (v299 != v289);
          unint64_t v298 = (uint64_t *)(v279 + 16 * v297);
        }
LABEL_346:
        if (v294 < *((_DWORD *)v298 + 2)) {
          goto LABEL_388;
        }
        unsigned int v302 = result ^ (v289 >> 9);
        do
        {
          v303 = v271;
          *unint64_t v287 = v288;
          if (v267 < v270) {
            break;
          }
          uint64_t v304 = (2 * v270) | 1;
          v271 = &v13[v304];
          uint64_t v270 = 2 * v270 + 2;
          uint64_t v305 = *(void *)a3;
          if (v270 >= v15)
          {
            uint64_t v312 = *(void *)(v305 + 976);
            LODWORD(v305) = *(_DWORD *)(v305 + 992);
            uint64_t v270 = v304;
            goto LABEL_370;
          }
          uint64_t v306 = v271[1];
          uint64_t v312 = *(void *)(v305 + 976);
          uint64_t v305 = *(unsigned int *)(v305 + 992);
          if (v305)
          {
            unsigned int v307 = v305 - 1;
            LODWORD(v308) = (v305 - 1) & ((*v271 >> 4) ^ (*v271 >> 9));
            unint64_t v309 = (uint64_t *)(v312 + 16 * v308);
            uint64_t v310 = *v309;
            if (*v309 == *v271)
            {
              unsigned int v311 = *((_DWORD *)v309 + 2);
              goto LABEL_361;
            }
            int v313 = 1;
            while (v310 != -4096)
            {
              int v314 = v308 + v313++;
              uint64_t v308 = v314 & v307;
              uint64_t v310 = *(void *)(v312 + 16 * v308);
              if (v310 == *v271) {
                goto LABEL_359;
              }
            }
          }
          uint64_t v308 = v305;
LABEL_359:
          unsigned int v311 = *(_DWORD *)(v312 + 16 * v308 + 8);
          if (v305)
          {
            unsigned int v307 = v305 - 1;
LABEL_361:
            LODWORD(v315) = v307 & ((v306 >> 4) ^ (v306 >> 9));
            uint64_t v316 = (uint64_t *)(v312 + 16 * v315);
            uint64_t v317 = *v316;
            if (*v316 != v306)
            {
              int v318 = 1;
              do
              {
                if (v317 == -4096) {
                  goto LABEL_366;
                }
                int v319 = v315 + v318++;
                uint64_t v315 = v319 & v307;
                uint64_t v317 = *(void *)(v312 + 16 * v315);
              }
              while (v317 != v306);
              uint64_t v316 = (uint64_t *)(v312 + 16 * v315);
            }
            goto LABEL_367;
          }
LABEL_366:
          uint64_t v316 = (uint64_t *)(v312 + 16 * v305);
LABEL_367:
          if (v311 >= *((_DWORD *)v316 + 2)) {
            uint64_t v270 = v304;
          }
          else {
            ++v271;
          }
LABEL_370:
          uint64_t v288 = *v271;
          if (v305)
          {
            unsigned int v320 = v305 - 1;
            LODWORD(v321) = ((v288 >> 4) ^ (v288 >> 9)) & (v305 - 1);
            v322 = (uint64_t *)(v312 + 16 * v321);
            uint64_t v323 = *v322;
            if (*v322 == v288)
            {
              unsigned int v324 = *((_DWORD *)v322 + 2);
              goto LABEL_380;
            }
            int v325 = 1;
            while (v323 != -4096)
            {
              int v326 = v321 + v325++;
              uint64_t v321 = v326 & v320;
              uint64_t v323 = *(void *)(v312 + 16 * v321);
              if (v323 == v288) {
                goto LABEL_378;
              }
            }
          }
          uint64_t v321 = v305;
LABEL_378:
          unsigned int v324 = *(_DWORD *)(v312 + 16 * v321 + 8);
          if (v305)
          {
            unsigned int v320 = v305 - 1;
LABEL_380:
            LODWORD(v327) = v320 & v302;
            uint64_t v328 = (uint64_t *)(v312 + 16 * (v320 & v302));
            uint64_t v329 = *v328;
            if (*v328 != v289)
            {
              int v330 = 1;
              do
              {
                if (v329 == -4096) {
                  goto LABEL_385;
                }
                int v331 = v327 + v330++;
                uint64_t v327 = v331 & v320;
                uint64_t v329 = *(void *)(v312 + 16 * v327);
              }
              while (v329 != v289);
              uint64_t v328 = (uint64_t *)(v312 + 16 * v327);
            }
            goto LABEL_386;
          }
LABEL_385:
          uint64_t v328 = (uint64_t *)(v312 + 16 * v305);
LABEL_386:
          BOOL result = *((unsigned int *)v328 + 2);
          unint64_t v287 = v303;
        }
        while (v324 >= result);
        uint64_t *v303 = v289;
LABEL_388:
        int64_t v268 = v269 - 1;
        if (!v269)
        {
LABEL_389:
          uint64_t v332 = 0;
          uint64_t v333 = *v13;
          unsigned int v334 = v13;
          while (1)
          {
            uint64_t v335 = &v334[v332 + 1];
            uint64_t v336 = (2 * v332) | 1;
            uint64_t v337 = 2 * v332 + 2;
            if (v337 < v15) {
              break;
            }
LABEL_409:
            *unsigned int v334 = *v335;
            unsigned int v334 = v335;
            uint64_t v332 = v336;
            if (v336 > (uint64_t)((unint64_t)(v15 - 2) >> 1))
            {
              if (v335 == --a2)
              {
                *uint64_t v335 = v333;
                goto LABEL_450;
              }
              *uint64_t v335 = *a2;
              *a2 = v333;
              uint64_t v352 = (char *)v335 - (char *)v13 + 8;
              if (v352 >= 9)
              {
                unint64_t v353 = (((unint64_t)v352 >> 3) - 2) >> 1;
                unint64_t v354 = &v13[v353];
                uint64_t v355 = *v354;
                uint64_t v356 = *v335;
                uint64_t v357 = *(void *)(*(void *)a3 + 976);
                uint64_t v358 = *(unsigned int *)(*(void *)a3 + 992);
                unsigned int v359 = *v335 >> 4;
                if (!v358) {
                  goto LABEL_420;
                }
                unsigned int v360 = v358 - 1;
                LODWORD(v361) = (v358 - 1) & ((v355 >> 4) ^ (v355 >> 9));
                uint64_t v362 = (uint64_t *)(v357 + 16 * v361);
                uint64_t v363 = *v362;
                if (*v362 == v355)
                {
                  BOOL result = *((unsigned int *)v362 + 2);
LABEL_423:
                  LODWORD(v366) = v360 & (v359 ^ (v356 >> 9));
                  uint64_t v367 = (uint64_t *)(v357 + 16 * v366);
                  uint64_t v368 = *v367;
                  if (*v367 != v356)
                  {
                    int v369 = 1;
                    do
                    {
                      if (v368 == -4096) {
                        goto LABEL_428;
                      }
                      int v370 = v366 + v369++;
                      uint64_t v366 = v370 & v360;
                      uint64_t v368 = *(void *)(v357 + 16 * v366);
                    }
                    while (v368 != v356);
                    uint64_t v367 = (uint64_t *)(v357 + 16 * v366);
                  }
                }
                else
                {
                  int v364 = 1;
                  while (v363 != -4096)
                  {
                    int v365 = v361 + v364++;
                    uint64_t v361 = v365 & v360;
                    uint64_t v363 = *(void *)(v357 + 16 * v361);
                    if (v363 == v355) {
                      goto LABEL_421;
                    }
                  }
LABEL_420:
                  uint64_t v361 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_421:
                  BOOL result = *(unsigned int *)(v357 + 16 * v361 + 8);
                  if (v358)
                  {
                    unsigned int v360 = v358 - 1;
                    goto LABEL_423;
                  }
LABEL_428:
                  uint64_t v367 = (uint64_t *)(v357 + 16 * v358);
                }
                if (result >= *((_DWORD *)v367 + 2)) {
                  goto LABEL_450;
                }
                unsigned int v371 = v359 ^ (v356 >> 9);
                while (2)
                {
                  unsigned int v372 = v354;
                  *uint64_t v335 = v355;
                  if (!v353)
                  {
LABEL_449:
                    *unsigned int v372 = v356;
                    break;
                  }
                  unint64_t v353 = (v353 - 1) >> 1;
                  unint64_t v354 = &v13[v353];
                  uint64_t v355 = *v354;
                  uint64_t v373 = *(void *)(*(void *)a3 + 976);
                  uint64_t v374 = *(unsigned int *)(*(void *)a3 + 992);
                  if (v374)
                  {
                    unsigned int v375 = v374 - 1;
                    LODWORD(v376) = (v374 - 1) & ((v355 >> 4) ^ (v355 >> 9));
                    uint64_t v377 = (uint64_t *)(v373 + 16 * v376);
                    uint64_t v378 = *v377;
                    if (*v377 != v355)
                    {
                      int v379 = 1;
                      while (v378 != -4096)
                      {
                        int v380 = v376 + v379++;
                        uint64_t v376 = v380 & v375;
                        uint64_t v378 = *(void *)(v373 + 16 * v376);
                        if (v378 == v355) {
                          goto LABEL_440;
                        }
                      }
                      goto LABEL_439;
                    }
                    BOOL result = *((unsigned int *)v377 + 2);
LABEL_442:
                    LODWORD(v381) = v375 & v371;
                    uint64_t v382 = (uint64_t *)(v373 + 16 * (v375 & v371));
                    uint64_t v383 = *v382;
                    if (*v382 != v356)
                    {
                      int v384 = 1;
                      while (v383 != -4096)
                      {
                        int v385 = v381 + v384++;
                        uint64_t v381 = v385 & v375;
                        uint64_t v383 = *(void *)(v373 + 16 * v381);
                        if (v383 == v356)
                        {
                          uint64_t v382 = (uint64_t *)(v373 + 16 * v381);
                          goto LABEL_448;
                        }
                      }
                      goto LABEL_447;
                    }
                  }
                  else
                  {
LABEL_439:
                    uint64_t v376 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_440:
                    BOOL result = *(unsigned int *)(v373 + 16 * v376 + 8);
                    if (v374)
                    {
                      unsigned int v375 = v374 - 1;
                      goto LABEL_442;
                    }
LABEL_447:
                    uint64_t v382 = (uint64_t *)(v373 + 16 * v374);
                  }
LABEL_448:
                  uint64_t v335 = v372;
                  if (result >= *((_DWORD *)v382 + 2)) {
                    goto LABEL_449;
                  }
                  continue;
                }
              }
LABEL_450:
              if (v15-- <= 2) {
                return result;
              }
              goto LABEL_389;
            }
          }
          BOOL result = v335[1];
          uint64_t v338 = *(void *)(*(void *)a3 + 976);
          uint64_t v339 = *(unsigned int *)(*(void *)a3 + 992);
          if (v339)
          {
            unsigned int v340 = v339 - 1;
            LODWORD(v341) = (v339 - 1) & ((*v335 >> 4) ^ (*v335 >> 9));
            uint64_t v342 = (uint64_t *)(v338 + 16 * v341);
            uint64_t v343 = *v342;
            if (*v342 != *v335)
            {
              int v345 = 1;
              while (v343 != -4096)
              {
                int v346 = v341 + v345++;
                uint64_t v341 = v346 & v340;
                uint64_t v343 = *(void *)(v338 + 16 * v341);
                if (v343 == *v335) {
                  goto LABEL_399;
                }
              }
              goto LABEL_398;
            }
            unsigned int v344 = *((_DWORD *)v342 + 2);
LABEL_401:
            LODWORD(v347) = v340 & ((result >> 4) ^ (result >> 9));
            uint64_t v348 = v338 + 16 * v347;
            uint64_t v349 = *(uint64_t **)v348;
            if (*(void *)v348 != result)
            {
              int v350 = 1;
              while (v349 != (uint64_t *)-4096)
              {
                int v351 = v347 + v350++;
                uint64_t v347 = v351 & v340;
                uint64_t v349 = *(uint64_t **)(v338 + 16 * v347);
                if (v349 == (uint64_t *)result)
                {
                  uint64_t v348 = v338 + 16 * v347;
                  goto LABEL_407;
                }
              }
              goto LABEL_406;
            }
          }
          else
          {
LABEL_398:
            uint64_t v341 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_399:
            unsigned int v344 = *(_DWORD *)(v338 + 16 * v341 + 8);
            if (v339)
            {
              unsigned int v340 = v339 - 1;
              goto LABEL_401;
            }
LABEL_406:
            uint64_t v348 = v338 + 16 * v339;
          }
LABEL_407:
          if (v344 < *(_DWORD *)(v348 + 8))
          {
            ++v335;
            uint64_t v336 = v337;
          }
          goto LABEL_409;
        }
      }
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    uint64_t v17 = &v13[(unint64_t)v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_1CD1DC07C(v11, &v11[(unint64_t)v15 >> 1], a2 - 1, a3);
      sub_1CD1DC07C(v11 + 1, v17 - 1, a2 - 2, a3);
      sub_1CD1DC07C(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      sub_1CD1DC07C(v17 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      *unsigned int v11 = *v17;
      *uint64_t v17 = v18;
    }
    else
    {
      sub_1CD1DC07C(&v11[(unint64_t)v15 >> 1], v11, a2 - 1, a3);
    }
    --a4;
    uint64_t v19 = *v11;
    uint64_t v20 = *(void *)a3;
    unsigned int v21 = *v11 >> 4;
    if (a5)
    {
      uint64_t v22 = *(void *)(v20 + 976);
      LODWORD(v20) = *(_DWORD *)(v20 + 992);
LABEL_31:
      unsigned int v38 = v20 - 1;
      uint64_t v39 = v20;
      unsigned int v40 = v21 ^ (v19 >> 9);
      uint64_t v41 = v22 + 16 * v20;
      unsigned int v42 = (v20 - 1) & v40;
      uint64_t v43 = (uint64_t *)(v22 + 16 * v42);
      uint64_t v44 = (unsigned int *)(v41 + 8);
      int v45 = v11;
      do
      {
        uint64_t v46 = v45;
        uint64_t v48 = v45[1];
        ++v45;
        uint64_t v47 = v48;
        if (v39)
        {
          LODWORD(v49) = ((v47 >> 4) ^ (v47 >> 9)) & v38;
          uint64_t v50 = (void *)(v22 + 16 * v49);
          uint64_t v51 = *v50;
          if (*v50 == v47)
          {
            int v52 = (unsigned int *)(v50 + 1);
          }
          else
          {
            int v53 = 1;
            while (v51 != -4096)
            {
              int v54 = v49 + v53++;
              uint64_t v49 = v54 & v38;
              uint64_t v51 = *(void *)(v22 + 16 * v49);
              if (v51 == v47) {
                goto LABEL_38;
              }
            }
            uint64_t v49 = v39;
LABEL_38:
            int v52 = (unsigned int *)(v22 + 16 * v49 + 8);
          }
          unsigned int v55 = *v52;
          uint64_t v56 = *v43;
          if (*v43 == v19)
          {
            uint64_t v57 = v22 + 16 * v42;
            continue;
          }
          int v58 = 1;
          LODWORD(v59) = v38 & v40;
          while (v56 != -4096)
          {
            int v60 = v59 + v58++;
            uint64_t v59 = v60 & v38;
            uint64_t v56 = *(void *)(v22 + 16 * v59);
            if (v56 == v19)
            {
              uint64_t v57 = v22 + 16 * v59;
              goto LABEL_47;
            }
          }
        }
        else
        {
          unsigned int v55 = *v44;
        }
        uint64_t v57 = v41;
LABEL_47:
        ;
      }
      while (v55 < *(_DWORD *)(v57 + 8));
      unint64_t v61 = a2;
      if (v46 == v11)
      {
        unint64_t v61 = a2;
        while (1)
        {
          if (v45 >= v61) {
            goto LABEL_88;
          }
          uint64_t v63 = *--v61;
          uint64_t v62 = v63;
          if (!v39) {
            break;
          }
          LODWORD(v64) = ((v62 >> 4) ^ (v62 >> 9)) & v38;
          unsigned int v65 = (void *)(v22 + 16 * v64);
          uint64_t v66 = *v65;
          if (*v65 == v62)
          {
            unsigned int v67 = (unsigned int *)(v65 + 1);
          }
          else
          {
            int v68 = 1;
            while (v66 != -4096)
            {
              int v69 = v64 + v68++;
              uint64_t v64 = v69 & v38;
              uint64_t v66 = *(void *)(v22 + 16 * v64);
              if (v66 == v62) {
                goto LABEL_59;
              }
            }
            uint64_t v64 = v39;
LABEL_59:
            unsigned int v67 = (unsigned int *)(v22 + 16 * v64 + 8);
          }
          unsigned int v70 = *v67;
          uint64_t v71 = *v43;
          if (*v43 != v19)
          {
            int v73 = 1;
            LODWORD(v74) = v38 & v40;
            while (v71 != -4096)
            {
              int v75 = v74 + v73++;
              uint64_t v74 = v75 & v38;
              uint64_t v71 = *(void *)(v22 + 16 * v74);
              if (v71 == v19)
              {
                uint64_t v72 = v22 + 16 * v74;
                goto LABEL_68;
              }
            }
            goto LABEL_67;
          }
          uint64_t v72 = v22 + 16 * v42;
LABEL_68:
          if (v70 < *(_DWORD *)(v72 + 8)) {
            goto LABEL_88;
          }
        }
        unsigned int v70 = *v44;
LABEL_67:
        uint64_t v72 = v41;
        goto LABEL_68;
      }
      while (2)
      {
        uint64_t v78 = *--v61;
        uint64_t v77 = v78;
        if (v39)
        {
          LODWORD(v76) = ((v77 >> 4) ^ (v77 >> 9)) & v38;
          char v79 = (void *)(v22 + 16 * v76);
          uint64_t v80 = *v79;
          if (*v79 == v77)
          {
            long long v81 = (unsigned int *)(v79 + 1);
          }
          else
          {
            int v82 = 1;
            while (v80 != -4096)
            {
              int v83 = v76 + v82++;
              uint64_t v76 = v83 & v38;
              uint64_t v80 = *(void *)(v22 + 16 * v76);
              if (v80 == v77) {
                goto LABEL_78;
              }
            }
            uint64_t v76 = v39;
LABEL_78:
            long long v81 = (unsigned int *)(v22 + 16 * v76 + 8);
          }
          unsigned int v84 = *v81;
          uint64_t v85 = *v43;
          if (*v43 == v19)
          {
            uint64_t v86 = v22 + 16 * v42;
            goto LABEL_87;
          }
          int v87 = 1;
          LODWORD(v88) = v38 & v40;
          while (v85 != -4096)
          {
            int v89 = v88 + v87++;
            uint64_t v88 = v89 & v38;
            uint64_t v85 = *(void *)(v22 + 16 * v88);
            if (v85 == v19)
            {
              uint64_t v86 = v22 + 16 * v88;
              goto LABEL_87;
            }
          }
        }
        else
        {
          unsigned int v84 = *v44;
        }
        uint64_t v86 = v41;
LABEL_87:
        if (v84 >= *(_DWORD *)(v86 + 8)) {
          continue;
        }
        break;
      }
LABEL_88:
      if (v45 >= v61)
      {
        uint64_t v13 = v45;
        goto LABEL_129;
      }
      uint64_t v90 = *v61;
      uint64_t v13 = v45;
      unsigned int v91 = v61;
      while (2)
      {
        uint64_t *v13 = v90;
        *unsigned int v91 = v47;
        uint64_t v92 = *(void *)(*(void *)a3 + 976);
        uint64_t v93 = *(unsigned int *)(*(void *)a3 + 992);
        unsigned int v94 = v93 - 1;
        unsigned int v95 = (v93 - 1) & v40;
        BOOL v96 = (uint64_t *)(v92 + 16 * v95);
        unsigned int v97 = (unsigned int *)(v92 + 16 * v93 + 8);
        while (2)
        {
          uint64_t v98 = v13[1];
          ++v13;
          uint64_t v47 = v98;
          if (!v93)
          {
            unsigned int v105 = *v97;
LABEL_105:
            uint64_t v107 = v92 + 16 * v93;
            goto LABEL_106;
          }
          LODWORD(v99) = ((v47 >> 4) ^ (v47 >> 9)) & v94;
          uint64_t v100 = (void *)(v92 + 16 * v99);
          uint64_t v101 = *v100;
          if (*v100 == v47)
          {
            unint64_t v102 = (unsigned int *)(v100 + 1);
          }
          else
          {
            int v103 = 1;
            while (v101 != -4096)
            {
              int v104 = v99 + v103++;
              uint64_t v99 = v104 & v94;
              uint64_t v101 = *(void *)(v92 + 16 * v99);
              if (v101 == v47) {
                goto LABEL_97;
              }
            }
            uint64_t v99 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_97:
            unint64_t v102 = (unsigned int *)(v92 + 16 * v99 + 8);
          }
          unsigned int v105 = *v102;
          uint64_t v106 = *v96;
          if (*v96 != v19)
          {
            int v108 = 1;
            LODWORD(v109) = v94 & v40;
            while (v106 != -4096)
            {
              int v110 = v109 + v108++;
              uint64_t v109 = v110 & v94;
              uint64_t v106 = *(void *)(v92 + 16 * v109);
              if (v106 == v19)
              {
                uint64_t v107 = v92 + 16 * v109;
                goto LABEL_106;
              }
            }
            goto LABEL_105;
          }
          uint64_t v107 = v92 + 16 * v95;
LABEL_106:
          if (v105 < *(_DWORD *)(v107 + 8)) {
            continue;
          }
          break;
        }
        while (2)
        {
          uint64_t v112 = *--v91;
          uint64_t v90 = v112;
          if (v93)
          {
            LODWORD(v111) = ((v90 >> 4) ^ (v90 >> 9)) & v94;
            unint64_t v113 = (void *)(v92 + 16 * v111);
            uint64_t v114 = *v113;
            if (*v113 == v90)
            {
              uint64_t v115 = (unsigned int *)(v113 + 1);
            }
            else
            {
              int v116 = 1;
              while (v114 != -4096)
              {
                int v117 = v111 + v116++;
                uint64_t v111 = v117 & v94;
                uint64_t v114 = *(void *)(v92 + 16 * v111);
                if (v114 == v90) {
                  goto LABEL_116;
                }
              }
              uint64_t v111 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_116:
              uint64_t v115 = (unsigned int *)(v92 + 16 * v111 + 8);
            }
            unsigned int v118 = *v115;
            uint64_t v119 = *v96;
            if (*v96 == v19)
            {
              uint64_t v120 = v92 + 16 * v95;
              goto LABEL_125;
            }
            int v121 = 1;
            LODWORD(v122) = v94 & v40;
            while (v119 != -4096)
            {
              int v123 = v122 + v121++;
              uint64_t v122 = v123 & v94;
              uint64_t v119 = *(void *)(v92 + 16 * v122);
              if (v119 == v19)
              {
                uint64_t v120 = v92 + 16 * v122;
                goto LABEL_125;
              }
            }
          }
          else
          {
            unsigned int v118 = *v97;
          }
          uint64_t v120 = v92 + 16 * v93;
LABEL_125:
          if (v118 >= *(_DWORD *)(v120 + 8)) {
            continue;
          }
          break;
        }
        if (v13 < v91) {
          continue;
        }
        break;
      }
LABEL_129:
      uint64_t v124 = v13 - 1;
      if (v13 - 1 != v11) {
        *unsigned int v11 = *v124;
      }
      uint64_t *v124 = v19;
      if (v45 < v61)
      {
LABEL_134:
        BOOL result = sub_1CD1DA3F8(v11, v13 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      else
      {
        BOOL v125 = sub_1CD1DC4D8(v11, v13 - 1, a3);
        BOOL result = sub_1CD1DC4D8(v13, a2, a3);
        if (result)
        {
          a2 = v13 - 1;
          if (v125) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v125) {
          goto LABEL_134;
        }
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v20 + 976);
      uint64_t v20 = *(unsigned int *)(v20 + 992);
      if (v20)
      {
        uint64_t v23 = *(v11 - 1);
        unsigned int v24 = v20 - 1;
        LODWORD(v25) = ((v23 >> 4) ^ (v23 >> 9)) & (v20 - 1);
        unsigned int v26 = (uint64_t *)(v22 + 16 * v25);
        uint64_t v27 = *v26;
        if (*v26 == v23)
        {
          unsigned int v28 = *((_DWORD *)v26 + 2);
          goto LABEL_22;
        }
        int v29 = 1;
        while (v27 != -4096)
        {
          int v30 = v25 + v29++;
          uint64_t v25 = v30 & v24;
          uint64_t v27 = *(void *)(v22 + 16 * v25);
          if (v27 == v23) {
            goto LABEL_20;
          }
        }
      }
      uint64_t v25 = v20;
LABEL_20:
      unsigned int v28 = *(_DWORD *)(v22 + 16 * v25 + 8);
      if (!v20) {
        goto LABEL_29;
      }
      unsigned int v24 = v20 - 1;
LABEL_22:
      unsigned int v31 = v21 ^ (v19 >> 9);
      LODWORD(v32) = v24 & v31;
      unsigned int v33 = (uint64_t *)(v22 + 16 * (v24 & v31));
      uint64_t v34 = *v33;
      if (*v33 == v19)
      {
        if (v28 < *((_DWORD *)v33 + 2)) {
          goto LABEL_31;
        }
        uint64_t v35 = *v12;
        goto LABEL_137;
      }
      int v36 = 1;
      while (v34 != -4096)
      {
        int v37 = v32 + v36++;
        uint64_t v32 = v37 & v24;
        uint64_t v34 = *(void *)(v22 + 16 * v32);
        if (v34 == v19) {
          goto LABEL_30;
        }
      }
LABEL_29:
      uint64_t v32 = v20;
LABEL_30:
      if (v28 < *(_DWORD *)(v22 + 16 * v32 + 8)) {
        goto LABEL_31;
      }
      uint64_t v35 = *v12;
      if (!v20) {
        goto LABEL_241;
      }
      unsigned int v31 = v21 ^ (v19 >> 9);
LABEL_137:
      unsigned int v126 = v20 - 1;
      LODWORD(v127) = v31 & (v20 - 1);
      unsigned int v128 = (uint64_t *)(v22 + 16 * v127);
      uint64_t v129 = *v128;
      if (*v128 == v19)
      {
        unsigned int v130 = *((_DWORD *)v128 + 2);
        goto LABEL_144;
      }
      int v131 = 1;
      while (v129 != -4096)
      {
        int v132 = v127 + v131++;
        uint64_t v127 = v132 & v126;
        uint64_t v129 = *(void *)(v22 + 16 * v127);
        if (v129 == v19) {
          goto LABEL_142;
        }
      }
LABEL_241:
      uint64_t v127 = v20;
LABEL_142:
      unsigned int v130 = *(_DWORD *)(v22 + 16 * v127 + 8);
      if (!v20) {
        goto LABEL_149;
      }
      unsigned int v126 = v20 - 1;
LABEL_144:
      LODWORD(v133) = ((v35 >> 4) ^ (v35 >> 9)) & v126;
      int v134 = (uint64_t *)(v22 + 16 * v133);
      uint64_t v135 = *v134;
      if (*v134 != v35)
      {
        int v136 = 1;
        while (v135 != -4096)
        {
          int v137 = v133 + v136++;
          uint64_t v133 = v137 & v126;
          uint64_t v135 = *(void *)(v22 + 16 * v133);
          if (v135 == v35)
          {
            int v134 = (uint64_t *)(v22 + 16 * v133);
            goto LABEL_150;
          }
        }
LABEL_149:
        int v134 = (uint64_t *)(v22 + 16 * v20);
      }
LABEL_150:
      unsigned int v138 = v21 ^ (v19 >> 9);
      unsigned int v139 = v20 - 1;
      BOOL v140 = (void *)(v22 + 16 * ((v20 - 1) & v138));
      BOOL result = v22 + 16 * v20 + 8;
      uint64_t v13 = v11;
      if (v130 < *((_DWORD *)v134 + 2))
      {
        uint64_t v13 = v11;
        while (1)
        {
          uint64_t v142 = v13[1];
          ++v13;
          uint64_t v141 = v142;
          if (v20)
          {
            uint64_t v143 = *v140;
            unsigned int v144 = (unsigned int *)(v140 + 1);
            if (*v140 != v19)
            {
              int v145 = 1;
              LODWORD(v146) = v139 & v138;
              while (v143 != -4096)
              {
                int v147 = v146 + v145++;
                uint64_t v146 = v147 & v139;
                uint64_t v143 = *(void *)(v22 + 16 * v146);
                if (v143 == v19) {
                  goto LABEL_157;
                }
              }
              uint64_t v146 = v20;
LABEL_157:
              unsigned int v144 = (unsigned int *)(v22 + 16 * v146 + 8);
            }
            unsigned int v148 = *v144;
            LODWORD(v149) = ((v141 >> 4) ^ (v141 >> 9)) & v139;
            uint64_t v150 = (uint64_t *)(v22 + 16 * v149);
            uint64_t v151 = *v150;
            if (*v150 == v141) {
              goto LABEL_165;
            }
            int v152 = 1;
            while (v151 != -4096)
            {
              int v153 = v149 + v152++;
              uint64_t v149 = v153 & v139;
              uint64_t v151 = *(void *)(v22 + 16 * v149);
              if (v151 == v141)
              {
                uint64_t v150 = (uint64_t *)(v22 + 16 * v149);
                goto LABEL_165;
              }
            }
          }
          else
          {
            unsigned int v148 = *(_DWORD *)result;
          }
          uint64_t v150 = (uint64_t *)(v22 + 16 * v20);
LABEL_165:
          if (v148 < *((_DWORD *)v150 + 2)) {
            goto LABEL_185;
          }
        }
      }
      do
      {
        if (++v13 >= a2) {
          break;
        }
        if (v20)
        {
          uint64_t v154 = *v140;
          int v155 = (unsigned int *)(v140 + 1);
          if (*v140 != v19)
          {
            int v156 = 1;
            LODWORD(v157) = v139 & v138;
            while (v154 != -4096)
            {
              int v158 = v157 + v156++;
              uint64_t v157 = v158 & v139;
              uint64_t v154 = *(void *)(v22 + 16 * v157);
              if (v154 == v19) {
                goto LABEL_174;
              }
            }
            uint64_t v157 = v20;
LABEL_174:
            int v155 = (unsigned int *)(v22 + 16 * v157 + 8);
          }
          unsigned int v159 = *v155;
          LODWORD(v160) = ((*v13 >> 4) ^ (*v13 >> 9)) & v139;
          uint64_t v161 = (uint64_t *)(v22 + 16 * v160);
          uint64_t v162 = *v161;
          if (*v161 == *v13) {
            continue;
          }
          int v163 = 1;
          while (v162 != -4096)
          {
            int v164 = v160 + v163++;
            uint64_t v160 = v164 & v139;
            uint64_t v162 = *(void *)(v22 + 16 * v160);
            if (v162 == *v13)
            {
              uint64_t v161 = (uint64_t *)(v22 + 16 * v160);
              goto LABEL_182;
            }
          }
        }
        else
        {
          unsigned int v159 = *(_DWORD *)result;
        }
        uint64_t v161 = (uint64_t *)(v22 + 16 * v20);
LABEL_182:
        ;
      }
      while (v159 >= *((_DWORD *)v161 + 2));
LABEL_185:
      uint64_t v165 = a2;
      if (v13 < a2)
      {
        uint64_t v165 = a2;
        do
        {
          uint64_t v167 = *--v165;
          uint64_t v166 = v167;
          if (v20)
          {
            uint64_t v168 = *v140;
            unsigned int v169 = (unsigned int *)(v140 + 1);
            if (*v140 != v19)
            {
              int v170 = 1;
              LODWORD(v171) = v139 & v138;
              while (v168 != -4096)
              {
                int v172 = v171 + v170++;
                uint64_t v171 = v172 & v139;
                uint64_t v168 = *(void *)(v22 + 16 * v171);
                if (v168 == v19) {
                  goto LABEL_192;
                }
              }
              uint64_t v171 = v20;
LABEL_192:
              unsigned int v169 = (unsigned int *)(v22 + 16 * v171 + 8);
            }
            unsigned int v173 = *v169;
            LODWORD(v174) = ((v166 >> 4) ^ (v166 >> 9)) & v139;
            int v175 = (uint64_t *)(v22 + 16 * v174);
            uint64_t v176 = *v175;
            if (*v175 == v166) {
              continue;
            }
            int v177 = 1;
            while (v176 != -4096)
            {
              int v178 = v174 + v177++;
              uint64_t v174 = v178 & v139;
              uint64_t v176 = *(void *)(v22 + 16 * v174);
              if (v176 == v166)
              {
                int v175 = (uint64_t *)(v22 + 16 * v174);
                goto LABEL_200;
              }
            }
          }
          else
          {
            unsigned int v173 = *(_DWORD *)result;
          }
          int v175 = (uint64_t *)(v22 + 16 * v20);
LABEL_200:
          ;
        }
        while (v173 < *((_DWORD *)v175 + 2));
      }
      if (v13 >= v165) {
        goto LABEL_238;
      }
      uint64_t v179 = *v13;
      uint64_t v180 = *v165;
      do
      {
        uint64_t *v13 = v180;
        *uint64_t v165 = v179;
        uint64_t v181 = *(void *)(*(void *)a3 + 976);
        uint64_t v182 = *(unsigned int *)(*(void *)a3 + 992);
        unsigned int v183 = v182 - 1;
        uint64_t v184 = (void *)(v181 + 16 * ((v182 - 1) & v138));
        BOOL result = v181 + 16 * v182;
        unsigned int v185 = (unsigned int *)(result + 8);
        do
        {
          uint64_t v186 = v13[1];
          ++v13;
          uint64_t v179 = v186;
          if (!v182)
          {
            unsigned int v192 = *v185;
LABEL_218:
            unsigned int v194 = (uint64_t *)(v181 + 16 * v182);
            continue;
          }
          uint64_t v187 = *v184;
          int v188 = (unsigned int *)(v184 + 1);
          if (*v184 != v19)
          {
            int v189 = 1;
            LODWORD(v190) = v183 & v138;
            while (v187 != -4096)
            {
              int v191 = v190 + v189++;
              uint64_t v190 = v191 & v183;
              uint64_t v187 = *(void *)(v181 + 16 * v190);
              if (v187 == v19) {
                goto LABEL_211;
              }
            }
            uint64_t v190 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_211:
            int v188 = (unsigned int *)(v181 + 16 * v190 + 8);
          }
          unsigned int v192 = *v188;
          LODWORD(v193) = ((v179 >> 4) ^ (v179 >> 9)) & v183;
          unsigned int v194 = (uint64_t *)(v181 + 16 * v193);
          uint64_t v195 = *v194;
          if (*v194 != v179)
          {
            int v196 = 1;
            while (v195 != -4096)
            {
              int v197 = v193 + v196++;
              uint64_t v193 = v197 & v183;
              uint64_t v195 = *(void *)(v181 + 16 * v193);
              if (v195 == v179)
              {
                unsigned int v194 = (uint64_t *)(v181 + 16 * v193);
                goto LABEL_219;
              }
            }
            goto LABEL_218;
          }
LABEL_219:
          ;
        }
        while (v192 >= *((_DWORD *)v194 + 2));
        do
        {
          uint64_t v199 = *--v165;
          uint64_t v180 = v199;
          if (!v182)
          {
            unsigned int v204 = *v185;
LABEL_235:
            uint64_t v206 = (uint64_t *)(v181 + 16 * v182);
            continue;
          }
          uint64_t v200 = *v184;
          char v201 = (unsigned int *)(v184 + 1);
          if (*v184 != v19)
          {
            int v202 = 1;
            LODWORD(v198) = v183 & v138;
            while (v200 != -4096)
            {
              int v203 = v198 + v202++;
              uint64_t v198 = v203 & v183;
              uint64_t v200 = *(void *)(v181 + 16 * v198);
              if (v200 == v19) {
                goto LABEL_228;
              }
            }
            uint64_t v198 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_228:
            char v201 = (unsigned int *)(v181 + 16 * v198 + 8);
          }
          unsigned int v204 = *v201;
          LODWORD(v205) = ((v180 >> 4) ^ (v180 >> 9)) & v183;
          uint64_t v206 = (uint64_t *)(v181 + 16 * v205);
          uint64_t v207 = *v206;
          if (*v206 != v180)
          {
            int v208 = 1;
            while (v207 != -4096)
            {
              int v209 = v205 + v208++;
              uint64_t v205 = v209 & v183;
              uint64_t v207 = *(void *)(v181 + 16 * v205);
              if (v207 == v180)
              {
                uint64_t v206 = (uint64_t *)(v181 + 16 * v205);
                goto LABEL_236;
              }
            }
            goto LABEL_235;
          }
LABEL_236:
          ;
        }
        while (v204 < *((_DWORD *)v206 + 2));
      }
      while (v13 < v165);
LABEL_238:
      int8x16_t v210 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        *unsigned int v11 = *v210;
      }
      a5 = 0;
      *int8x16_t v210 = v19;
    }
  }
  uint64_t v231 = v13 + 1;
  BOOL v233 = v13 == a2 || v231 == a2;
  if ((a5 & 1) == 0)
  {
    if (v233) {
      return result;
    }
    uint64_t v387 = *(void *)a3;
    while (1)
    {
      uint64_t v388 = v231;
      uint64_t v390 = *v11;
      uint64_t v389 = v11[1];
      uint64_t v391 = *(void *)(v387 + 976);
      uint64_t v392 = *(unsigned int *)(v387 + 992);
      unsigned int v393 = v389 >> 4;
      if (v392)
      {
        unsigned int v394 = v392 - 1;
        LODWORD(v395) = (v392 - 1) & (v393 ^ (v389 >> 9));
        uint64_t v396 = (uint64_t *)(v391 + 16 * v395);
        uint64_t v397 = *v396;
        if (*v396 == v389)
        {
          unsigned int v398 = *((_DWORD *)v396 + 2);
          goto LABEL_465;
        }
        BOOL result = 1;
        while (v397 != -4096)
        {
          int v399 = v395 + result;
          BOOL result = (result + 1);
          uint64_t v395 = v399 & v394;
          uint64_t v397 = *(void *)(v391 + 16 * v395);
          if (v397 == v389) {
            goto LABEL_463;
          }
        }
      }
      uint64_t v395 = *(unsigned int *)(v387 + 992);
LABEL_463:
      unsigned int v398 = *(_DWORD *)(v391 + 16 * v395 + 8);
      if (!v392)
      {
LABEL_470:
        uint64_t v401 = v391 + 16 * v392;
        goto LABEL_471;
      }
      unsigned int v394 = v392 - 1;
LABEL_465:
      LODWORD(v400) = v394 & ((v390 >> 4) ^ (v390 >> 9));
      uint64_t v401 = v391 + 16 * v400;
      BOOL result = *(void *)v401;
      if (*(void *)v401 != v390)
      {
        int v402 = 1;
        do
        {
          if (result == -4096) {
            goto LABEL_470;
          }
          int v403 = v400 + v402++;
          uint64_t v400 = v403 & v394;
          BOOL result = *(void *)(v391 + 16 * v400);
        }
        while (result != v390);
        uint64_t v401 = v391 + 16 * v400;
      }
LABEL_471:
      if (v398 < *(_DWORD *)(v401 + 8))
      {
        unsigned int v404 = v393 ^ (v389 >> 9);
        unint64_t v405 = v388;
        while (1)
        {
          *unint64_t v405 = v390;
          unint64_t v405 = v11;
          uint64_t v406 = *--v11;
          uint64_t v390 = v406;
          uint64_t v407 = *(void *)(*(void *)a3 + 976);
          uint64_t v408 = *(unsigned int *)(*(void *)a3 + 992);
          if (v408)
          {
            unsigned int v409 = v408 - 1;
            LODWORD(v410) = (v408 - 1) & v404;
            uint64_t v411 = (uint64_t *)(v407 + 16 * v410);
            uint64_t v412 = *v411;
            if (*v411 == v389)
            {
              unsigned int v413 = *((_DWORD *)v411 + 2);
              goto LABEL_483;
            }
            BOOL result = 1;
            while (v412 != -4096)
            {
              int v414 = v410 + result;
              BOOL result = (result + 1);
              uint64_t v410 = v414 & v409;
              uint64_t v412 = *(void *)(v407 + 16 * v410);
              if (v412 == v389) {
                goto LABEL_481;
              }
            }
          }
          uint64_t v410 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_481:
          unsigned int v413 = *(_DWORD *)(v407 + 16 * v410 + 8);
          if (v408)
          {
            unsigned int v409 = v408 - 1;
LABEL_483:
            LODWORD(v415) = v409 & ((v390 >> 4) ^ (v390 >> 9));
            uint64_t v416 = v407 + 16 * v415;
            BOOL result = *(void *)v416;
            if (*(void *)v416 != v390)
            {
              int v417 = 1;
              do
              {
                if (result == -4096) {
                  goto LABEL_488;
                }
                int v418 = v415 + v417++;
                uint64_t v415 = v418 & v409;
                BOOL result = *(void *)(v407 + 16 * v415);
              }
              while (result != v390);
              uint64_t v416 = v407 + 16 * v415;
            }
            goto LABEL_489;
          }
LABEL_488:
          uint64_t v416 = v407 + 16 * v408;
LABEL_489:
          if (v413 >= *(_DWORD *)(v416 + 8))
          {
            *unint64_t v405 = v389;
            uint64_t v387 = *(void *)a3;
            break;
          }
        }
      }
      uint64_t v231 = v388 + 1;
      unsigned int v11 = v388;
      if (v388 + 1 == a2) {
        return result;
      }
    }
  }
  if (v233) {
    return result;
  }
  uint64_t v234 = *(void *)a3;
  long long v235 = v13;
  while (2)
  {
    int v236 = v231;
    uint64_t v238 = *v235;
    long long v237 = (uint64_t *)v235[1];
    uint64_t v239 = *(void *)(v234 + 976);
    uint64_t v240 = *(unsigned int *)(v234 + 992);
    unsigned int v241 = v237 >> 4;
    if (v240)
    {
      unsigned int v242 = v240 - 1;
      LODWORD(v243) = (v240 - 1) & (v241 ^ (v237 >> 9));
      uint64_t v244 = v239 + 16 * v243;
      BOOL result = *(void *)v244;
      if (*(uint64_t **)v244 == v237)
      {
        unsigned int v245 = *(_DWORD *)(v244 + 8);
        goto LABEL_276;
      }
      int v246 = 1;
      while (result != -4096)
      {
        int v247 = v243 + v246++;
        uint64_t v243 = v247 & v242;
        BOOL result = *(void *)(v239 + 16 * v243);
        if ((uint64_t *)result == v237) {
          goto LABEL_274;
        }
      }
    }
    uint64_t v243 = *(unsigned int *)(v234 + 992);
LABEL_274:
    unsigned int v245 = *(_DWORD *)(v239 + 16 * v243 + 8);
    if (v240)
    {
      unsigned int v242 = v240 - 1;
LABEL_276:
      BOOL result = v242 & ((v238 >> 4) ^ (v238 >> 9));
      int v248 = (uint64_t *)(v239 + 16 * result);
      uint64_t v249 = *v248;
      if (*v248 != v238)
      {
        int v250 = 1;
        while (v249 != -4096)
        {
          int v251 = result + v250++;
          BOOL result = v251 & v242;
          uint64_t v249 = *(void *)(v239 + 16 * result);
          if (v249 == v238)
          {
            int v248 = (uint64_t *)(v239 + 16 * result);
            goto LABEL_282;
          }
        }
        goto LABEL_281;
      }
    }
    else
    {
LABEL_281:
      int v248 = (uint64_t *)(v239 + 16 * v240);
    }
LABEL_282:
    if (v245 >= *((_DWORD *)v248 + 2)) {
      goto LABEL_305;
    }
    unsigned int v252 = v241 ^ (v237 >> 9);
    v253 = v236;
    while (2)
    {
      uint64_t *v253 = v238;
      if (v235 != v13)
      {
        v253 = v235;
        uint64_t v254 = *--v235;
        uint64_t v238 = v254;
        uint64_t v255 = *(void *)(*(void *)a3 + 976);
        uint64_t v256 = *(unsigned int *)(*(void *)a3 + 992);
        if (v256)
        {
          unsigned int v257 = v256 - 1;
          LODWORD(v258) = (v256 - 1) & v252;
          uint64_t v259 = v255 + 16 * v258;
          BOOL result = *(void *)v259;
          if (*(uint64_t **)v259 == v237)
          {
            unsigned int v260 = *(_DWORD *)(v259 + 8);
            goto LABEL_295;
          }
          int v261 = 1;
          while (result != -4096)
          {
            int v262 = v258 + v261++;
            uint64_t v258 = v262 & v257;
            BOOL result = *(void *)(v255 + 16 * v258);
            if ((uint64_t *)result == v237) {
              goto LABEL_293;
            }
          }
        }
        uint64_t v258 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_293:
        unsigned int v260 = *(_DWORD *)(v255 + 16 * v258 + 8);
        if (v256)
        {
          unsigned int v257 = v256 - 1;
LABEL_295:
          BOOL result = v257 & ((v238 >> 4) ^ (v238 >> 9));
          unint64_t v263 = (uint64_t *)(v255 + 16 * result);
          uint64_t v264 = *v263;
          if (*v263 != v238)
          {
            int v265 = 1;
            while (v264 != -4096)
            {
              int v266 = result + v265++;
              BOOL result = v266 & v257;
              uint64_t v264 = *(void *)(v255 + 16 * result);
              if (v264 == v238)
              {
                unint64_t v263 = (uint64_t *)(v255 + 16 * result);
                goto LABEL_301;
              }
            }
            goto LABEL_300;
          }
        }
        else
        {
LABEL_300:
          unint64_t v263 = (uint64_t *)(v255 + 16 * v256);
        }
LABEL_301:
        if (v260 >= *((_DWORD *)v263 + 2)) {
          goto LABEL_304;
        }
        continue;
      }
      break;
    }
    v253 = v13;
LABEL_304:
    uint64_t *v253 = (uint64_t)v237;
    uint64_t v234 = *(void *)a3;
LABEL_305:
    uint64_t v231 = v236 + 1;
    long long v235 = v236;
    if (v236 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CD1DC07C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = *(void *)(*(void *)a4 + 976);
  uint64_t v7 = *(unsigned int *)(*(void *)a4 + 992);
  unsigned int v8 = *a2 >> 4;
  unsigned int v9 = *result >> 4;
  if (v7)
  {
    unsigned int v10 = v7 - 1;
    LODWORD(v11) = (v7 - 1) & (v8 ^ (v4 >> 9));
    uint64_t v12 = (uint64_t *)(v6 + 16 * v11);
    uint64_t v13 = *v12;
    if (*v12 == v4)
    {
      unsigned int v14 = *((_DWORD *)v12 + 2);
      goto LABEL_11;
    }
    int v15 = 1;
    while (v13 != -4096)
    {
      int v16 = v11 + v15++;
      uint64_t v11 = v16 & v10;
      uint64_t v13 = *(void *)(v6 + 16 * v11);
      if (v13 == v4) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(*(void *)a4 + 992);
LABEL_9:
  unsigned int v14 = *(_DWORD *)(v6 + 16 * v11 + 8);
  if (!v7)
  {
LABEL_18:
    uint64_t v17 = *(unsigned int *)(*(void *)a4 + 992);
LABEL_19:
    uint64_t v20 = *a3;
    if (v14 >= *(_DWORD *)(v6 + 16 * v17 + 8))
    {
      if (!v7) {
        goto LABEL_42;
      }
      goto LABEL_24;
    }
    if (!v7) {
      goto LABEL_34;
    }
    goto LABEL_21;
  }
  unsigned int v10 = v7 - 1;
LABEL_11:
  LODWORD(v17) = v10 & (v9 ^ (v5 >> 9));
  uint64_t v18 = (uint64_t *)(v6 + 16 * v17);
  uint64_t v19 = *v18;
  if (*v18 != v5)
  {
    int v21 = 1;
    while (v19 != -4096)
    {
      int v22 = v17 + v21++;
      uint64_t v17 = v22 & v10;
      uint64_t v19 = *(void *)(v6 + 16 * v17);
      if (v19 == v5) {
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  uint64_t v20 = *a3;
  if (v14 < *((_DWORD *)v18 + 2))
  {
LABEL_21:
    unsigned int v23 = v7 - 1;
    LODWORD(v24) = ((v20 >> 4) ^ (v20 >> 9)) & (v7 - 1);
    uint64_t v25 = (uint64_t *)(v6 + 16 * v24);
    uint64_t v26 = *v25;
    if (*v25 == v20)
    {
      unsigned int v27 = *((_DWORD *)v25 + 2);
      goto LABEL_37;
    }
    int v33 = 1;
    while (v26 != -4096)
    {
      int v34 = v24 + v33++;
      uint64_t v24 = v34 & v23;
      uint64_t v26 = *(void *)(v6 + 16 * v24);
      if (v26 == v20) {
        goto LABEL_35;
      }
    }
LABEL_34:
    uint64_t v24 = *(unsigned int *)(*(void *)a4 + 992);
LABEL_35:
    unsigned int v27 = *(_DWORD *)(v6 + 16 * v24 + 8);
    if (!v7) {
      goto LABEL_50;
    }
    unsigned int v23 = v7 - 1;
LABEL_37:
    LODWORD(v37) = v23 & (v8 ^ (v4 >> 9));
    unsigned int v38 = (uint64_t *)(v6 + 16 * v37);
    uint64_t v39 = *v38;
    if (*v38 == v4) {
      goto LABEL_51;
    }
    int v40 = 1;
    while (v39 != -4096)
    {
      int v41 = v37 + v40++;
      uint64_t v37 = v41 & v23;
      uint64_t v39 = *(void *)(v6 + 16 * v37);
      if (v39 == v4)
      {
        unsigned int v38 = (uint64_t *)(v6 + 16 * v37);
        goto LABEL_51;
      }
    }
LABEL_50:
    unsigned int v38 = (uint64_t *)(v6 + 16 * v7);
LABEL_51:
    if (v27 < *((_DWORD *)v38 + 2))
    {
      unsigned int *result = v20;
LABEL_88:
      *a3 = v5;
      return result;
    }
    unsigned int *result = v4;
    *a2 = v5;
    uint64_t v47 = *a3;
    uint64_t v48 = *(void *)(*(void *)a4 + 976);
    uint64_t v49 = *(unsigned int *)(*(void *)a4 + 992);
    if (v49)
    {
      unsigned int v50 = v49 - 1;
      LODWORD(v51) = (v49 - 1) & ((v47 >> 4) ^ (v47 >> 9));
      int v52 = (uint64_t *)(v48 + 16 * v51);
      uint64_t v53 = *v52;
      if (*v52 == v47)
      {
        unsigned int v54 = *((_DWORD *)v52 + 2);
        goto LABEL_72;
      }
      int v55 = 1;
      while (v53 != -4096)
      {
        int v56 = v51 + v55++;
        uint64_t v51 = v56 & v50;
        uint64_t v53 = *(void *)(v48 + 16 * v51);
        if (v53 == v47) {
          goto LABEL_70;
        }
      }
    }
    uint64_t v51 = *(unsigned int *)(*(void *)a4 + 992);
LABEL_70:
    unsigned int v54 = *(_DWORD *)(v48 + 16 * v51 + 8);
    if (!v49) {
      goto LABEL_85;
    }
    unsigned int v50 = v49 - 1;
LABEL_72:
    LODWORD(v68) = v50 & (v9 ^ (v5 >> 9));
    int v69 = (uint64_t *)(v48 + 16 * v68);
    uint64_t v70 = *v69;
    if (*v69 == v5)
    {
LABEL_86:
      if (v54 >= *((_DWORD *)v69 + 2)) {
        return result;
      }
      *a2 = v47;
      goto LABEL_88;
    }
    int v71 = 1;
    while (v70 != -4096)
    {
      int v72 = v68 + v71++;
      uint64_t v68 = v72 & v50;
      uint64_t v70 = *(void *)(v48 + 16 * v68);
      if (v70 == v5)
      {
        int v69 = (uint64_t *)(v48 + 16 * v68);
        goto LABEL_86;
      }
    }
LABEL_85:
    int v69 = (uint64_t *)(v48 + 16 * v49);
    goto LABEL_86;
  }
LABEL_24:
  unsigned int v28 = v7 - 1;
  LODWORD(v29) = ((v20 >> 4) ^ (v20 >> 9)) & (v7 - 1);
  int v30 = (uint64_t *)(v6 + 16 * v29);
  uint64_t v31 = *v30;
  if (*v30 == v20)
  {
    unsigned int v32 = *((_DWORD *)v30 + 2);
    goto LABEL_45;
  }
  int v35 = 1;
  while (v31 != -4096)
  {
    int v36 = v29 + v35++;
    uint64_t v29 = v36 & v28;
    uint64_t v31 = *(void *)(v6 + 16 * v29);
    if (v31 == v20) {
      goto LABEL_43;
    }
  }
LABEL_42:
  uint64_t v29 = *(unsigned int *)(*(void *)a4 + 992);
LABEL_43:
  unsigned int v32 = *(_DWORD *)(v6 + 16 * v29 + 8);
  if (!v7) {
    goto LABEL_60;
  }
  unsigned int v28 = v7 - 1;
LABEL_45:
  LODWORD(v42) = v28 & (v8 ^ (v4 >> 9));
  uint64_t v43 = (uint64_t *)(v6 + 16 * v42);
  uint64_t v44 = *v43;
  if (*v43 == v4) {
    goto LABEL_61;
  }
  int v45 = 1;
  while (v44 != -4096)
  {
    int v46 = v42 + v45++;
    uint64_t v42 = v46 & v28;
    uint64_t v44 = *(void *)(v6 + 16 * v42);
    if (v44 == v4)
    {
      uint64_t v43 = (uint64_t *)(v6 + 16 * v42);
      goto LABEL_61;
    }
  }
LABEL_60:
  uint64_t v43 = (uint64_t *)(v6 + 16 * v7);
LABEL_61:
  if (v32 >= *((_DWORD *)v43 + 2)) {
    return result;
  }
  *a2 = v20;
  *a3 = v4;
  uint64_t v57 = *a2;
  uint64_t v58 = *result;
  uint64_t v59 = *(void *)(*(void *)a4 + 976);
  uint64_t v60 = *(unsigned int *)(*(void *)a4 + 992);
  if (v60)
  {
    unsigned int v61 = v60 - 1;
    LODWORD(v62) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
    uint64_t v63 = (uint64_t *)(v59 + 16 * v62);
    uint64_t v64 = *v63;
    if (*v63 == v57)
    {
      unsigned int v65 = *((_DWORD *)v63 + 2);
      goto LABEL_80;
    }
    int v66 = 1;
    while (v64 != -4096)
    {
      int v67 = v62 + v66++;
      uint64_t v62 = v67 & v61;
      uint64_t v64 = *(void *)(v59 + 16 * v62);
      if (v64 == v57) {
        goto LABEL_78;
      }
    }
  }
  uint64_t v62 = *(unsigned int *)(*(void *)a4 + 992);
LABEL_78:
  unsigned int v65 = *(_DWORD *)(v59 + 16 * v62 + 8);
  if (!v60) {
    goto LABEL_90;
  }
  unsigned int v61 = v60 - 1;
LABEL_80:
  LODWORD(v73) = v61 & ((v58 >> 4) ^ (v58 >> 9));
  uint64_t v74 = (uint64_t *)(v59 + 16 * v73);
  uint64_t v75 = *v74;
  if (*v74 == v58) {
    goto LABEL_91;
  }
  int v76 = 1;
  while (v75 != -4096)
  {
    int v77 = v73 + v76++;
    uint64_t v73 = v77 & v61;
    uint64_t v75 = *(void *)(v59 + 16 * v73);
    if (v75 == v58)
    {
      uint64_t v74 = (uint64_t *)(v59 + 16 * v73);
      goto LABEL_91;
    }
  }
LABEL_90:
  uint64_t v74 = (uint64_t *)(v59 + 16 * v60);
LABEL_91:
  if (v65 < *((_DWORD *)v74 + 2))
  {
    unsigned int *result = v57;
    *a2 = v58;
  }
  return result;
}

BOOL sub_1CD1DC4D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*(void *)a3 + 976);
      uint64_t v11 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v11) {
        goto LABEL_63;
      }
      unsigned int v12 = v11 - 1;
      LODWORD(v13) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      unsigned int v14 = (uint64_t *)(v10 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v8)
      {
        unsigned int v16 = *((_DWORD *)v14 + 2);
      }
      else
      {
        int v66 = 1;
        while (v15 != -4096)
        {
          int v67 = v13 + v66++;
          uint64_t v13 = v67 & v12;
          uint64_t v15 = *(void *)(v10 + 16 * v13);
          if (v15 == v8) {
            goto LABEL_64;
          }
        }
LABEL_63:
        uint64_t v13 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_64:
        unsigned int v16 = *(_DWORD *)(v10 + 16 * v13 + 8);
        if (!v11)
        {
LABEL_79:
          int v71 = (uint64_t *)(v10 + 16 * v11);
          goto LABEL_80;
        }
        unsigned int v12 = v11 - 1;
      }
      LODWORD(v70) = v12 & ((v9 >> 4) ^ (v9 >> 9));
      int v71 = (uint64_t *)(v10 + 16 * v70);
      uint64_t v72 = *v71;
      if (*v71 != v9)
      {
        int v73 = 1;
        do
        {
          if (v72 == -4096) {
            goto LABEL_79;
          }
          int v74 = v70 + v73++;
          uint64_t v70 = v74 & v12;
          uint64_t v72 = *(void *)(v10 + 16 * v70);
        }
        while (v72 != v9);
        int v71 = (uint64_t *)(v10 + 16 * v70);
      }
LABEL_80:
      if (v16 < *((_DWORD *)v71 + 2))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1CD1DC07C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CD1DCC48(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      int v55 = a1 + 2;
      int v56 = a1 + 3;
      sub_1CD1DCC48(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v57 = *(a2 - 1);
      uint64_t v58 = a1[3];
      uint64_t v59 = *(void *)(*(void *)a3 + 976);
      uint64_t v60 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v60) {
        goto LABEL_71;
      }
      unsigned int v61 = v60 - 1;
      LODWORD(v62) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      uint64_t v63 = (uint64_t *)(v59 + 16 * v62);
      uint64_t v64 = *v63;
      if (*v63 == v57)
      {
        unsigned int v65 = *((_DWORD *)v63 + 2);
        goto LABEL_74;
      }
      int v68 = 1;
      while (v64 != -4096)
      {
        int v69 = v62 + v68++;
        uint64_t v62 = v69 & v61;
        uint64_t v64 = *(void *)(v59 + 16 * v62);
        if (v64 == v57) {
          goto LABEL_72;
        }
      }
LABEL_71:
      uint64_t v62 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_72:
      unsigned int v65 = *(_DWORD *)(v59 + 16 * v62 + 8);
      if (!v60) {
        goto LABEL_82;
      }
      unsigned int v61 = v60 - 1;
LABEL_74:
      LODWORD(v75) = v61 & ((v58 >> 4) ^ (v58 >> 9));
      int v76 = (uint64_t *)(v59 + 16 * v75);
      uint64_t v77 = *v76;
      if (*v76 == v58) {
        goto LABEL_83;
      }
      int v78 = 1;
      while (v77 != -4096)
      {
        int v79 = v75 + v78++;
        uint64_t v75 = v79 & v61;
        uint64_t v77 = *(void *)(v59 + 16 * v75);
        if (v77 == v58)
        {
          int v76 = (uint64_t *)(v59 + 16 * v75);
          goto LABEL_83;
        }
      }
LABEL_82:
      int v76 = (uint64_t *)(v59 + 16 * v60);
LABEL_83:
      if (v65 >= *((_DWORD *)v76 + 2)) {
        return 1;
      }
      uint64_t *v56 = v57;
      *(a2 - 1) = v58;
      uint64_t v80 = *v56;
      uint64_t v81 = *v55;
      uint64_t v82 = *(void *)(*(void *)a3 + 976);
      uint64_t v83 = *(unsigned int *)(*(void *)a3 + 992);
      unsigned int v84 = *v56 >> 4;
      if (!v83) {
        goto LABEL_91;
      }
      unsigned int v85 = v83 - 1;
      LODWORD(v86) = (v83 - 1) & (v84 ^ (v80 >> 9));
      int v87 = (uint64_t *)(v82 + 16 * v86);
      uint64_t v88 = *v87;
      if (*v87 == v80)
      {
        unsigned int v89 = *((_DWORD *)v87 + 2);
      }
      else
      {
        int v90 = 1;
        while (v88 != -4096)
        {
          int v91 = v86 + v90++;
          uint64_t v86 = v91 & v85;
          uint64_t v88 = *(void *)(v82 + 16 * v86);
          if (v88 == v80) {
            goto LABEL_92;
          }
        }
LABEL_91:
        uint64_t v86 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_92:
        unsigned int v89 = *(_DWORD *)(v82 + 16 * v86 + 8);
        if (!v83) {
          goto LABEL_99;
        }
        unsigned int v85 = v83 - 1;
      }
      LODWORD(v92) = v85 & ((v81 >> 4) ^ (v81 >> 9));
      uint64_t v93 = (uint64_t *)(v82 + 16 * v92);
      uint64_t v94 = *v93;
      if (*v93 == v81) {
        goto LABEL_100;
      }
      int v95 = 1;
      while (v94 != -4096)
      {
        int v96 = v92 + v95++;
        uint64_t v92 = v96 & v85;
        uint64_t v94 = *(void *)(v82 + 16 * v92);
        if (v94 == v81)
        {
          uint64_t v93 = (uint64_t *)(v82 + 16 * v92);
          goto LABEL_100;
        }
      }
LABEL_99:
      uint64_t v93 = (uint64_t *)(v82 + 16 * v83);
LABEL_100:
      if (v89 >= *((_DWORD *)v93 + 2)) {
        return 1;
      }
      *int v55 = v80;
      uint64_t *v56 = v81;
      uint64_t v97 = a1[1];
      uint64_t v98 = *(void *)(*(void *)a3 + 976);
      uint64_t v99 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v99) {
        goto LABEL_108;
      }
      unsigned int v100 = v99 - 1;
      LODWORD(v101) = (v99 - 1) & (v84 ^ (v80 >> 9));
      unint64_t v102 = (uint64_t *)(v98 + 16 * v101);
      uint64_t v103 = *v102;
      if (*v102 == v80)
      {
        unsigned int v104 = *((_DWORD *)v102 + 2);
      }
      else
      {
        int v105 = 1;
        while (v103 != -4096)
        {
          int v106 = v101 + v105++;
          uint64_t v101 = v106 & v100;
          uint64_t v103 = *(void *)(v98 + 16 * v101);
          if (v103 == v80) {
            goto LABEL_109;
          }
        }
LABEL_108:
        uint64_t v101 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_109:
        unsigned int v104 = *(_DWORD *)(v98 + 16 * v101 + 8);
        if (!v99) {
          goto LABEL_116;
        }
        unsigned int v100 = v99 - 1;
      }
      LODWORD(v107) = v100 & ((v97 >> 4) ^ (v97 >> 9));
      int v108 = (uint64_t *)(v98 + 16 * v107);
      uint64_t v109 = *v108;
      if (*v108 == v97) {
        goto LABEL_117;
      }
      int v110 = 1;
      while (v109 != -4096)
      {
        int v111 = v107 + v110++;
        uint64_t v107 = v111 & v100;
        uint64_t v109 = *(void *)(v98 + 16 * v107);
        if (v109 == v97)
        {
          int v108 = (uint64_t *)(v98 + 16 * v107);
          goto LABEL_117;
        }
      }
LABEL_116:
      int v108 = (uint64_t *)(v98 + 16 * v99);
LABEL_117:
      if (v104 >= *((_DWORD *)v108 + 2)) {
        return 1;
      }
      a1[1] = v80;
      a1[2] = v97;
      uint64_t v112 = *a1;
      uint64_t v113 = *(void *)(*(void *)a3 + 976);
      uint64_t v114 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v114) {
        goto LABEL_125;
      }
      unsigned int v115 = v84 ^ (v80 >> 9);
      unsigned int v116 = v114 - 1;
      LODWORD(v117) = (v114 - 1) & v115;
      unsigned int v118 = (uint64_t *)(v113 + 16 * v117);
      uint64_t v119 = *v118;
      if (*v118 == v80)
      {
        unsigned int v120 = *((_DWORD *)v118 + 2);
      }
      else
      {
        int v121 = 1;
        while (v119 != -4096)
        {
          int v122 = v117 + v121++;
          uint64_t v117 = v122 & v116;
          uint64_t v119 = *(void *)(v113 + 16 * v117);
          if (v119 == v80) {
            goto LABEL_126;
          }
        }
LABEL_125:
        uint64_t v117 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_126:
        unsigned int v120 = *(_DWORD *)(v113 + 16 * v117 + 8);
        if (!v114) {
          goto LABEL_133;
        }
        unsigned int v116 = v114 - 1;
      }
      LODWORD(v123) = v116 & ((v112 >> 4) ^ (v112 >> 9));
      uint64_t v124 = (uint64_t *)(v113 + 16 * v123);
      uint64_t v125 = *v124;
      if (*v124 == v112) {
        goto LABEL_134;
      }
      int v126 = 1;
      while (v125 != -4096)
      {
        int v127 = v123 + v126++;
        uint64_t v123 = v127 & v116;
        uint64_t v125 = *(void *)(v113 + 16 * v123);
        if (v125 == v112)
        {
          uint64_t v124 = (uint64_t *)(v113 + 16 * v123);
          goto LABEL_134;
        }
      }
LABEL_133:
      uint64_t v124 = (uint64_t *)(v113 + 16 * v114);
LABEL_134:
      if (v120 < *((_DWORD *)v124 + 2))
      {
        *a1 = v80;
        a1[1] = v112;
      }
      return 1;
    default:
      uint64_t v17 = a1 + 2;
      sub_1CD1DC07C(a1, a1 + 1, a1 + 2, a3);
      uint64_t v18 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v19 = 0;
      uint64_t v20 = *(void *)a3;
      break;
  }
  do
  {
    uint64_t v21 = *v18;
    uint64_t v22 = *v17;
    uint64_t v23 = *(void *)(v20 + 976);
    uint64_t v24 = *(unsigned int *)(v20 + 992);
    unsigned int v25 = *v18 >> 4;
    if (v24)
    {
      unsigned int v26 = v24 - 1;
      LODWORD(v27) = (v24 - 1) & (v25 ^ (v21 >> 9));
      unsigned int v28 = (uint64_t *)(v23 + 16 * v27);
      uint64_t v29 = *v28;
      if (*v28 == v21)
      {
        unsigned int v30 = *((_DWORD *)v28 + 2);
        goto LABEL_17;
      }
      int v31 = 1;
      while (v29 != -4096)
      {
        int v32 = v27 + v31++;
        uint64_t v27 = v32 & v26;
        uint64_t v29 = *(void *)(v23 + 16 * v27);
        if (v29 == v21) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v27 = *(unsigned int *)(v20 + 992);
LABEL_15:
    unsigned int v30 = *(_DWORD *)(v23 + 16 * v27 + 8);
    if (!v24) {
      goto LABEL_22;
    }
    unsigned int v26 = v24 - 1;
LABEL_17:
    LODWORD(v33) = v26 & ((v22 >> 4) ^ (v22 >> 9));
    int v34 = (uint64_t *)(v23 + 16 * v33);
    uint64_t v35 = *v34;
    if (*v34 != v22)
    {
      int v36 = 1;
      while (v35 != -4096)
      {
        int v37 = v33 + v36++;
        uint64_t v33 = v37 & v26;
        uint64_t v35 = *(void *)(v23 + 16 * v33);
        if (v35 == v22)
        {
          int v34 = (uint64_t *)(v23 + 16 * v33);
          goto LABEL_23;
        }
      }
LABEL_22:
      int v34 = (uint64_t *)(v23 + 16 * v24);
    }
LABEL_23:
    if (v30 >= *((_DWORD *)v34 + 2)) {
      goto LABEL_47;
    }
    unsigned int v38 = v25 ^ (v21 >> 9);
    uint64_t v39 = v18;
    while (1)
    {
      *uint64_t v39 = v22;
      if (v17 == a1) {
        break;
      }
      uint64_t v39 = v17;
      uint64_t v40 = *--v17;
      uint64_t v22 = v40;
      uint64_t v41 = *(void *)(*(void *)a3 + 976);
      uint64_t v42 = *(unsigned int *)(*(void *)a3 + 992);
      if (v42)
      {
        unsigned int v43 = v42 - 1;
        LODWORD(v44) = (v42 - 1) & v38;
        int v45 = (uint64_t *)(v41 + 16 * v44);
        uint64_t v46 = *v45;
        if (*v45 == v21)
        {
          unsigned int v47 = *((_DWORD *)v45 + 2);
          goto LABEL_36;
        }
        int v48 = 1;
        while (v46 != -4096)
        {
          int v49 = v44 + v48++;
          uint64_t v44 = v49 & v43;
          uint64_t v46 = *(void *)(v41 + 16 * v44);
          if (v46 == v21) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v44 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_34:
      unsigned int v47 = *(_DWORD *)(v41 + 16 * v44 + 8);
      if (!v42) {
        goto LABEL_41;
      }
      unsigned int v43 = v42 - 1;
LABEL_36:
      LODWORD(v50) = v43 & ((v22 >> 4) ^ (v22 >> 9));
      uint64_t v51 = (uint64_t *)(v41 + 16 * v50);
      uint64_t v52 = *v51;
      if (*v51 != v22)
      {
        int v53 = 1;
        while (v52 != -4096)
        {
          int v54 = v50 + v53++;
          uint64_t v50 = v54 & v43;
          uint64_t v52 = *(void *)(v41 + 16 * v50);
          if (v52 == v22)
          {
            uint64_t v51 = (uint64_t *)(v41 + 16 * v50);
            goto LABEL_42;
          }
        }
LABEL_41:
        uint64_t v51 = (uint64_t *)(v41 + 16 * v42);
      }
LABEL_42:
      if (v47 >= *((_DWORD *)v51 + 2)) {
        goto LABEL_45;
      }
    }
    uint64_t v39 = a1;
LABEL_45:
    *uint64_t v39 = v21;
    if (++v19 == 8) {
      return v18 + 1 == a2;
    }
    uint64_t v20 = *(void *)a3;
LABEL_47:
    uint64_t v17 = v18++;
  }
  while (v18 != a2);
  return 1;
}

uint64_t *sub_1CD1DCC48(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  BOOL result = sub_1CD1DC07C(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(*(void *)a5 + 976);
  uint64_t v14 = *(unsigned int *)(*(void *)a5 + 992);
  if (v14)
  {
    unsigned int v15 = v14 - 1;
    LODWORD(v16) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    uint64_t v17 = (uint64_t *)(v13 + 16 * v16);
    uint64_t v18 = *v17;
    if (*v17 == v11)
    {
      unsigned int v19 = *((_DWORD *)v17 + 2);
      goto LABEL_11;
    }
    int v20 = 1;
    while (v18 != -4096)
    {
      int v21 = v16 + v20++;
      uint64_t v16 = v21 & v15;
      uint64_t v18 = *(void *)(v13 + 16 * v16);
      if (v18 == v11) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v16 = *(unsigned int *)(*(void *)a5 + 992);
LABEL_9:
  unsigned int v19 = *(_DWORD *)(v13 + 16 * v16 + 8);
  if (!v14) {
    goto LABEL_16;
  }
  unsigned int v15 = v14 - 1;
LABEL_11:
  LODWORD(v22) = v15 & ((v12 >> 4) ^ (v12 >> 9));
  uint64_t v23 = (uint64_t *)(v13 + 16 * v22);
  uint64_t v24 = *v23;
  if (*v23 == v12) {
    goto LABEL_17;
  }
  int v25 = 1;
  while (v24 != -4096)
  {
    int v26 = v22 + v25++;
    uint64_t v22 = v26 & v15;
    uint64_t v24 = *(void *)(v13 + 16 * v22);
    if (v24 == v12)
    {
      uint64_t v23 = (uint64_t *)(v13 + 16 * v22);
      goto LABEL_17;
    }
  }
LABEL_16:
  uint64_t v23 = (uint64_t *)(v13 + 16 * v14);
LABEL_17:
  if (v19 >= *((_DWORD *)v23 + 2)) {
    return result;
  }
  *a3 = v11;
  *a4 = v12;
  uint64_t v27 = *a3;
  uint64_t v28 = *a2;
  uint64_t v29 = *(void *)(*(void *)a5 + 976);
  uint64_t v30 = *(unsigned int *)(*(void *)a5 + 992);
  if (v30)
  {
    unsigned int v31 = v30 - 1;
    LODWORD(v32) = (v30 - 1) & ((v27 >> 4) ^ (v27 >> 9));
    uint64_t v33 = (uint64_t *)(v29 + 16 * v32);
    uint64_t v34 = *v33;
    if (*v33 == v27)
    {
      unsigned int v35 = *((_DWORD *)v33 + 2);
      goto LABEL_28;
    }
    int v36 = 1;
    while (v34 != -4096)
    {
      int v37 = v32 + v36++;
      uint64_t v32 = v37 & v31;
      uint64_t v34 = *(void *)(v29 + 16 * v32);
      if (v34 == v27) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v32 = *(unsigned int *)(*(void *)a5 + 992);
LABEL_26:
  unsigned int v35 = *(_DWORD *)(v29 + 16 * v32 + 8);
  if (!v30) {
    goto LABEL_33;
  }
  unsigned int v31 = v30 - 1;
LABEL_28:
  LODWORD(v38) = v31 & ((v28 >> 4) ^ (v28 >> 9));
  uint64_t v39 = (uint64_t *)(v29 + 16 * v38);
  uint64_t v40 = *v39;
  if (*v39 == v28) {
    goto LABEL_34;
  }
  int v41 = 1;
  while (v40 != -4096)
  {
    int v42 = v38 + v41++;
    uint64_t v38 = v42 & v31;
    uint64_t v40 = *(void *)(v29 + 16 * v38);
    if (v40 == v28)
    {
      uint64_t v39 = (uint64_t *)(v29 + 16 * v38);
      goto LABEL_34;
    }
  }
LABEL_33:
  uint64_t v39 = (uint64_t *)(v29 + 16 * v30);
LABEL_34:
  if (v35 >= *((_DWORD *)v39 + 2)) {
    return result;
  }
  *a2 = v27;
  *a3 = v28;
  uint64_t v43 = *a2;
  uint64_t v44 = *a1;
  uint64_t v45 = *(void *)(*(void *)a5 + 976);
  uint64_t v46 = *(unsigned int *)(*(void *)a5 + 992);
  if (v46)
  {
    unsigned int v47 = v46 - 1;
    LODWORD(v48) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
    int v49 = (uint64_t *)(v45 + 16 * v48);
    uint64_t v50 = *v49;
    if (*v49 == v43)
    {
      unsigned int v51 = *((_DWORD *)v49 + 2);
      goto LABEL_45;
    }
    int v52 = 1;
    while (v50 != -4096)
    {
      int v53 = v48 + v52++;
      uint64_t v48 = v53 & v47;
      uint64_t v50 = *(void *)(v45 + 16 * v48);
      if (v50 == v43) {
        goto LABEL_43;
      }
    }
  }
  uint64_t v48 = *(unsigned int *)(*(void *)a5 + 992);
LABEL_43:
  unsigned int v51 = *(_DWORD *)(v45 + 16 * v48 + 8);
  if (!v46) {
    goto LABEL_50;
  }
  unsigned int v47 = v46 - 1;
LABEL_45:
  LODWORD(v54) = v47 & ((v44 >> 4) ^ (v44 >> 9));
  int v55 = (uint64_t *)(v45 + 16 * v54);
  uint64_t v56 = *v55;
  if (*v55 == v44) {
    goto LABEL_51;
  }
  int v57 = 1;
  while (v56 != -4096)
  {
    int v58 = v54 + v57++;
    uint64_t v54 = v58 & v47;
    uint64_t v56 = *(void *)(v45 + 16 * v54);
    if (v56 == v44)
    {
      int v55 = (uint64_t *)(v45 + 16 * v54);
      goto LABEL_51;
    }
  }
LABEL_50:
  int v55 = (uint64_t *)(v45 + 16 * v46);
LABEL_51:
  if (v51 < *((_DWORD *)v55 + 2))
  {
    *a1 = v43;
    *a2 = v44;
  }
  return result;
}

uint64_t sub_1CD1DCF3C(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (_DWORD *)(a1 + 16 * v9);
    int v11 = *v10;
    int v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
LABEL_22:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -2;
        }
        if (v16 && v11 == -2) {
          uint64_t v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        uint64_t v10 = (_DWORD *)(a1 + 16 * (v18 & v8));
        int v11 = *v10;
        int v12 = v10[1];
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_22;
        }
      }
      uint64_t result = 0;
      if (v14) {
        uint64_t v10 = v14;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
  *a5 = v10;
  return result;
}

void *sub_1CD1DD014(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        void *result = -1;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 16 * v3;
      uint64_t v15 = v4 + 4;
      do
      {
        int v16 = *(_DWORD *)(v15 - 4);
        int v17 = *(_DWORD *)v15;
        if ((v16 != -1 || v17 != -1) && (v16 != -2 || v17 != -2))
        {
          int v21 = 0;
          sub_1CD1DCF3C(*(void *)a1, *(_DWORD *)(a1 + 16), v16, v17, &v21);
          int v20 = v21;
          *int v21 = *(_DWORD *)(v15 - 4);
          v20[1] = *(_DWORD *)v15;
          *((void *)v20 + 1) = *(void *)(v15 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v15 += 16;
        v14 -= 16;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CD1DD16C(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5, uint64_t a6, uint64_t a7)
{
  int64_t v12 = a5 - a4;
  if (a5 == a4)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    if (v12 < 0) {
      goto LABEL_14;
    }
    uint64_t v14 = (char *)operator new(a5 - a4);
    uint64_t v15 = &v14[8 * (v12 >> 3)];
    memcpy(v14, a4, v12);
  }
  int64_t v16 = a7 - a6;
  if (a7 == a6)
  {
    int v20 = 0;
    uint64_t v22 = 0;
    unsigned int v18 = 0;
    goto LABEL_13;
  }
  if (v16 < 0) {
LABEL_14:
  }
    abort();
  uint64_t v17 = v16 >> 3;
  unsigned int v18 = (char *)operator new(v16);
  uint64_t v19 = 0;
  int v20 = &v18[8 * v17];
  do
  {
    int v21 = *(unsigned __int8 **)(a6 + v19);
    *(void *)&v18[v19] = v21;
    if (v21) {
      llvm::MetadataTracking::track((uint64_t)&v18[v19], v21, 2);
    }
    v19 += 8;
  }
  while (a6 + v19 != a7);
  uint64_t v22 = &v18[v19];
LABEL_13:
  *a1 = a2;
  a1[1] = a3;
  a1[2] = v14;
  a1[3] = v15;
  a1[4] = v15;
  a1[5] = v18;
  a1[6] = v22;
  a1[7] = v20;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = (void **)v23;
  sub_1CD1DF67C(&v24);
}

unint64_t sub_1CD1DD288(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  int64_t v12 = a2 - 1;
  uint64_t v13 = v11;
  while (1)
  {
    uint64_t v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v211 = *(a2 - 1);
          uint64_t v212 = *v13;
          uint64_t v213 = *(void *)(*(void *)a3 + 976);
          uint64_t v214 = *(unsigned int *)(*(void *)a3 + 992);
          if (!v214) {
            goto LABEL_501;
          }
          unsigned int v215 = v214 - 1;
          LODWORD(v216) = (v214 - 1) & ((v211 >> 4) ^ (v211 >> 9));
          char v217 = (uint64_t *)(v213 + 16 * v216);
          uint64_t v218 = *v217;
          if (*v217 == v211)
          {
            unsigned int v219 = *((_DWORD *)v217 + 2);
            goto LABEL_504;
          }
          int v419 = 1;
          while (v218 != -4096)
          {
            int v420 = v216 + v419++;
            uint64_t v216 = v420 & v215;
            uint64_t v218 = *(void *)(v213 + 16 * v216);
            if (v218 == v211) {
              goto LABEL_502;
            }
          }
LABEL_501:
          uint64_t v216 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_502:
          unsigned int v219 = *(_DWORD *)(v213 + 16 * v216 + 8);
          if (!v214) {
            goto LABEL_517;
          }
          unsigned int v215 = v214 - 1;
LABEL_504:
          LODWORD(v423) = v215 & ((v212 >> 4) ^ (v212 >> 9));
          unsigned int v424 = (uint64_t *)(v213 + 16 * v423);
          uint64_t v425 = *v424;
          if (*v424 == v212) {
            goto LABEL_518;
          }
          int v426 = 1;
          while (v425 != -4096)
          {
            int v427 = v423 + v426++;
            uint64_t v423 = v427 & v215;
            uint64_t v425 = *(void *)(v213 + 16 * v423);
            if (v425 == v212)
            {
              unsigned int v424 = (uint64_t *)(v213 + 16 * v423);
              goto LABEL_518;
            }
          }
LABEL_517:
          unsigned int v424 = (uint64_t *)(v213 + 16 * v214);
LABEL_518:
          if (v219 < *((_DWORD *)v424 + 2))
          {
            uint64_t *v13 = v211;
            *(a2 - 1) = v212;
          }
          return result;
        case 3:
          return (unint64_t)sub_1CD1DC07C(v13, v13 + 1, a2 - 1, a3);
        case 4:
          return (unint64_t)sub_1CD1DCC48(v13, v13 + 1, v13 + 2, a2 - 1, a3);
        case 5:
          unint64_t v220 = v13 + 2;
          int v221 = v13 + 3;
          uint64_t result = (unint64_t)sub_1CD1DCC48(v13, v13 + 1, v13 + 2, v13 + 3, a3);
          uint64_t v222 = *(a2 - 1);
          uint64_t v223 = v13[3];
          uint64_t v224 = *(void *)(*(void *)a3 + 976);
          uint64_t v225 = *(unsigned int *)(*(void *)a3 + 992);
          if (!v225) {
            goto LABEL_509;
          }
          unsigned int v226 = v225 - 1;
          LODWORD(v227) = (v225 - 1) & ((v222 >> 4) ^ (v222 >> 9));
          uint64_t v228 = (uint64_t *)(v224 + 16 * v227);
          uint64_t v229 = *v228;
          if (*v228 == v222)
          {
            unsigned int v230 = *((_DWORD *)v228 + 2);
            goto LABEL_512;
          }
          int v421 = 1;
          break;
        default:
          JUMPOUT(0);
      }
      while (v229 != -4096)
      {
        int v422 = v227 + v421++;
        uint64_t v227 = v422 & v226;
        uint64_t v229 = *(void *)(v224 + 16 * v227);
        if (v229 == v222) {
          goto LABEL_510;
        }
      }
LABEL_509:
      uint64_t v227 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_510:
      unsigned int v230 = *(_DWORD *)(v224 + 16 * v227 + 8);
      if (!v225) {
        goto LABEL_520;
      }
      unsigned int v226 = v225 - 1;
LABEL_512:
      LODWORD(v428) = v226 & ((v223 >> 4) ^ (v223 >> 9));
      unsigned int v429 = (uint64_t *)(v224 + 16 * v428);
      uint64_t v430 = *v429;
      if (*v429 == v223) {
        goto LABEL_521;
      }
      int v431 = 1;
      while (v430 != -4096)
      {
        int v432 = v428 + v431++;
        uint64_t v428 = v432 & v226;
        uint64_t v430 = *(void *)(v224 + 16 * v428);
        if (v430 == v223)
        {
          unsigned int v429 = (uint64_t *)(v224 + 16 * v428);
          goto LABEL_521;
        }
      }
LABEL_520:
      unsigned int v429 = (uint64_t *)(v224 + 16 * v225);
LABEL_521:
      if (v230 >= *((_DWORD *)v429 + 2)) {
        return result;
      }
      *int v221 = v222;
      *(a2 - 1) = v223;
      uint64_t v433 = *v221;
      uint64_t v434 = *v220;
      uint64_t v435 = *(void *)(*(void *)a3 + 976);
      uint64_t v436 = *(unsigned int *)(*(void *)a3 + 992);
      unsigned int v437 = *v221 >> 4;
      if (v436)
      {
        unsigned int v438 = v436 - 1;
        LODWORD(v439) = (v436 - 1) & (v437 ^ (v433 >> 9));
        unint64_t v440 = (uint64_t *)(v435 + 16 * v439);
        uint64_t v441 = *v440;
        if (*v440 == v433)
        {
          unsigned int v442 = *((_DWORD *)v440 + 2);
          goto LABEL_532;
        }
        int v443 = 1;
        while (v441 != -4096)
        {
          int v444 = v439 + v443++;
          uint64_t v439 = v444 & v438;
          uint64_t v441 = *(void *)(v435 + 16 * v439);
          if (v441 == v433) {
            goto LABEL_530;
          }
        }
      }
      uint64_t v439 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_530:
      unsigned int v442 = *(_DWORD *)(v435 + 16 * v439 + 8);
      if (!v436) {
        goto LABEL_537;
      }
      unsigned int v438 = v436 - 1;
LABEL_532:
      LODWORD(v445) = v438 & ((v434 >> 4) ^ (v434 >> 9));
      unint64_t v446 = (uint64_t *)(v435 + 16 * v445);
      uint64_t v447 = *v446;
      if (*v446 == v434) {
        goto LABEL_538;
      }
      int v448 = 1;
      while (v447 != -4096)
      {
        int v449 = v445 + v448++;
        uint64_t v445 = v449 & v438;
        uint64_t v447 = *(void *)(v435 + 16 * v445);
        if (v447 == v434)
        {
          unint64_t v446 = (uint64_t *)(v435 + 16 * v445);
          goto LABEL_538;
        }
      }
LABEL_537:
      unint64_t v446 = (uint64_t *)(v435 + 16 * v436);
LABEL_538:
      if (v442 >= *((_DWORD *)v446 + 2)) {
        return result;
      }
      *unint64_t v220 = v433;
      *int v221 = v434;
      uint64_t v450 = v13[1];
      uint64_t v451 = *(void *)(*(void *)a3 + 976);
      uint64_t v452 = *(unsigned int *)(*(void *)a3 + 992);
      if (v452)
      {
        unsigned int v453 = v452 - 1;
        LODWORD(v454) = (v452 - 1) & (v437 ^ (v433 >> 9));
        uint64_t v455 = (uint64_t *)(v451 + 16 * v454);
        uint64_t v456 = *v455;
        if (*v455 == v433)
        {
          unsigned int v457 = *((_DWORD *)v455 + 2);
          goto LABEL_549;
        }
        int v458 = 1;
        while (v456 != -4096)
        {
          int v459 = v454 + v458++;
          uint64_t v454 = v459 & v453;
          uint64_t v456 = *(void *)(v451 + 16 * v454);
          if (v456 == v433) {
            goto LABEL_547;
          }
        }
      }
      uint64_t v454 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_547:
      unsigned int v457 = *(_DWORD *)(v451 + 16 * v454 + 8);
      if (!v452) {
        goto LABEL_554;
      }
      unsigned int v453 = v452 - 1;
LABEL_549:
      LODWORD(v460) = v453 & ((v450 >> 4) ^ (v450 >> 9));
      uint64_t v461 = (uint64_t *)(v451 + 16 * v460);
      uint64_t v462 = *v461;
      if (*v461 == v450) {
        goto LABEL_555;
      }
      int v463 = 1;
      while (v462 != -4096)
      {
        int v464 = v460 + v463++;
        uint64_t v460 = v464 & v453;
        uint64_t v462 = *(void *)(v451 + 16 * v460);
        if (v462 == v450)
        {
          uint64_t v461 = (uint64_t *)(v451 + 16 * v460);
          goto LABEL_555;
        }
      }
LABEL_554:
      uint64_t v461 = (uint64_t *)(v451 + 16 * v452);
LABEL_555:
      if (v457 >= *((_DWORD *)v461 + 2)) {
        return result;
      }
      v13[1] = v433;
      v13[2] = v450;
      uint64_t v465 = *v13;
      uint64_t v466 = *(void *)(*(void *)a3 + 976);
      uint64_t v467 = *(unsigned int *)(*(void *)a3 + 992);
      if (v467)
      {
        unsigned int v468 = v437 ^ (v433 >> 9);
        unsigned int v469 = v467 - 1;
        LODWORD(v470) = (v467 - 1) & v468;
        long long v471 = (uint64_t *)(v466 + 16 * v470);
        uint64_t v472 = *v471;
        if (*v471 == v433)
        {
          unsigned int v473 = *((_DWORD *)v471 + 2);
          goto LABEL_566;
        }
        int v474 = 1;
        while (v472 != -4096)
        {
          int v475 = v470 + v474++;
          uint64_t v470 = v475 & v469;
          uint64_t v472 = *(void *)(v466 + 16 * v470);
          if (v472 == v433) {
            goto LABEL_564;
          }
        }
      }
      uint64_t v470 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_564:
      unsigned int v473 = *(_DWORD *)(v466 + 16 * v470 + 8);
      if (!v467) {
        goto LABEL_571;
      }
      unsigned int v469 = v467 - 1;
LABEL_566:
      LODWORD(v476) = v469 & ((v465 >> 4) ^ (v465 >> 9));
      uint64_t v477 = (uint64_t *)(v466 + 16 * v476);
      uint64_t v478 = *v477;
      if (*v477 == v465) {
        goto LABEL_572;
      }
      int v479 = 1;
      while (v478 != -4096)
      {
        int v480 = v476 + v479++;
        uint64_t v476 = v480 & v469;
        uint64_t v478 = *(void *)(v466 + 16 * v476);
        if (v478 == v465)
        {
          uint64_t v477 = (uint64_t *)(v466 + 16 * v476);
          goto LABEL_572;
        }
      }
LABEL_571:
      uint64_t v477 = (uint64_t *)(v466 + 16 * v467);
LABEL_572:
      if (v473 < *((_DWORD *)v477 + 2))
      {
        uint64_t *v13 = v433;
        v13[1] = v465;
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v13 == a2) {
        return result;
      }
      int64_t v267 = (unint64_t)(v15 - 2) >> 1;
      int64_t v268 = v267;
      while (1)
      {
        int64_t v269 = v268;
        if (v267 < v268) {
          goto LABEL_388;
        }
        uint64_t v270 = (2 * v268) | 1;
        v271 = &v13[v270];
        uint64_t v272 = *(void *)a3;
        if (2 * v269 + 2 >= v15)
        {
          uint64_t v279 = *(void *)(v272 + 976);
          LODWORD(v272) = *(_DWORD *)(v272 + 992);
          goto LABEL_330;
        }
        uint64_t v273 = v271[1];
        uint64_t v279 = *(void *)(v272 + 976);
        uint64_t v272 = *(unsigned int *)(v272 + 992);
        if (v272)
        {
          unsigned int v274 = v272 - 1;
          LODWORD(v275) = (v272 - 1) & ((*v271 >> 4) ^ (*v271 >> 9));
          uint64_t v276 = (uint64_t *)(v279 + 16 * v275);
          uint64_t v277 = *v276;
          if (*v276 == *v271)
          {
            unsigned int v278 = *((_DWORD *)v276 + 2);
            goto LABEL_322;
          }
          int v280 = 1;
          while (v277 != -4096)
          {
            int v281 = v275 + v280++;
            uint64_t v275 = v281 & v274;
            uint64_t v277 = *(void *)(v279 + 16 * v275);
            if (v277 == *v271) {
              goto LABEL_320;
            }
          }
        }
        uint64_t v275 = v272;
LABEL_320:
        unsigned int v278 = *(_DWORD *)(v279 + 16 * v275 + 8);
        if (v272)
        {
          unsigned int v274 = v272 - 1;
LABEL_322:
          LODWORD(v282) = v274 & ((v273 >> 4) ^ (v273 >> 9));
          uint64_t v283 = (uint64_t *)(v279 + 16 * v282);
          uint64_t v284 = *v283;
          if (*v283 != v273)
          {
            int v285 = 1;
            do
            {
              if (v284 == -4096) {
                goto LABEL_327;
              }
              int v286 = v282 + v285++;
              uint64_t v282 = v286 & v274;
              uint64_t v284 = *(void *)(v279 + 16 * v282);
            }
            while (v284 != v273);
            uint64_t v283 = (uint64_t *)(v279 + 16 * v282);
          }
          goto LABEL_328;
        }
LABEL_327:
        uint64_t v283 = (uint64_t *)(v279 + 16 * v272);
LABEL_328:
        if (v278 < *((_DWORD *)v283 + 2))
        {
          ++v271;
          uint64_t v270 = 2 * v269 + 2;
        }
LABEL_330:
        unint64_t v287 = &v13[v269];
        uint64_t v288 = *v271;
        uint64_t v289 = *v287;
        uint64_t result = *v287 >> 4;
        if (v272)
        {
          unsigned int v290 = v272 - 1;
          LODWORD(v291) = ((v288 >> 4) ^ (v288 >> 9)) & (v272 - 1);
          unint64_t v292 = (uint64_t *)(v279 + 16 * v291);
          uint64_t v293 = *v292;
          if (*v292 == v288)
          {
            unsigned int v294 = *((_DWORD *)v292 + 2);
            goto LABEL_340;
          }
          int v295 = 1;
          while (v293 != -4096)
          {
            int v296 = v291 + v295++;
            uint64_t v291 = v296 & v290;
            uint64_t v293 = *(void *)(v279 + 16 * v291);
            if (v293 == v288) {
              goto LABEL_338;
            }
          }
        }
        uint64_t v291 = v272;
LABEL_338:
        unsigned int v294 = *(_DWORD *)(v279 + 16 * v291 + 8);
        if (!v272)
        {
LABEL_345:
          unint64_t v298 = (uint64_t *)(v279 + 16 * v272);
          goto LABEL_346;
        }
        unsigned int v290 = v272 - 1;
LABEL_340:
        LODWORD(v297) = v290 & (result ^ (v289 >> 9));
        unint64_t v298 = (uint64_t *)(v279 + 16 * v297);
        uint64_t v299 = *v298;
        if (*v298 != v289)
        {
          int v300 = 1;
          do
          {
            if (v299 == -4096) {
              goto LABEL_345;
            }
            int v301 = v297 + v300++;
            uint64_t v297 = v301 & v290;
            uint64_t v299 = *(void *)(v279 + 16 * v297);
          }
          while (v299 != v289);
          unint64_t v298 = (uint64_t *)(v279 + 16 * v297);
        }
LABEL_346:
        if (v294 < *((_DWORD *)v298 + 2)) {
          goto LABEL_388;
        }
        unsigned int v302 = result ^ (v289 >> 9);
        do
        {
          v303 = v271;
          *unint64_t v287 = v288;
          if (v267 < v270) {
            break;
          }
          uint64_t v304 = (2 * v270) | 1;
          v271 = &v13[v304];
          uint64_t v270 = 2 * v270 + 2;
          uint64_t v305 = *(void *)a3;
          if (v270 >= v15)
          {
            uint64_t v312 = *(void *)(v305 + 976);
            LODWORD(v305) = *(_DWORD *)(v305 + 992);
            uint64_t v270 = v304;
            goto LABEL_370;
          }
          uint64_t v306 = v271[1];
          uint64_t v312 = *(void *)(v305 + 976);
          uint64_t v305 = *(unsigned int *)(v305 + 992);
          if (v305)
          {
            unsigned int v307 = v305 - 1;
            LODWORD(v308) = (v305 - 1) & ((*v271 >> 4) ^ (*v271 >> 9));
            unint64_t v309 = (uint64_t *)(v312 + 16 * v308);
            uint64_t v310 = *v309;
            if (*v309 == *v271)
            {
              unsigned int v311 = *((_DWORD *)v309 + 2);
              goto LABEL_361;
            }
            int v313 = 1;
            while (v310 != -4096)
            {
              int v314 = v308 + v313++;
              uint64_t v308 = v314 & v307;
              uint64_t v310 = *(void *)(v312 + 16 * v308);
              if (v310 == *v271) {
                goto LABEL_359;
              }
            }
          }
          uint64_t v308 = v305;
LABEL_359:
          unsigned int v311 = *(_DWORD *)(v312 + 16 * v308 + 8);
          if (v305)
          {
            unsigned int v307 = v305 - 1;
LABEL_361:
            LODWORD(v315) = v307 & ((v306 >> 4) ^ (v306 >> 9));
            uint64_t v316 = (uint64_t *)(v312 + 16 * v315);
            uint64_t v317 = *v316;
            if (*v316 != v306)
            {
              int v318 = 1;
              do
              {
                if (v317 == -4096) {
                  goto LABEL_366;
                }
                int v319 = v315 + v318++;
                uint64_t v315 = v319 & v307;
                uint64_t v317 = *(void *)(v312 + 16 * v315);
              }
              while (v317 != v306);
              uint64_t v316 = (uint64_t *)(v312 + 16 * v315);
            }
            goto LABEL_367;
          }
LABEL_366:
          uint64_t v316 = (uint64_t *)(v312 + 16 * v305);
LABEL_367:
          if (v311 >= *((_DWORD *)v316 + 2)) {
            uint64_t v270 = v304;
          }
          else {
            ++v271;
          }
LABEL_370:
          uint64_t v288 = *v271;
          if (v305)
          {
            unsigned int v320 = v305 - 1;
            LODWORD(v321) = ((v288 >> 4) ^ (v288 >> 9)) & (v305 - 1);
            v322 = (uint64_t *)(v312 + 16 * v321);
            uint64_t v323 = *v322;
            if (*v322 == v288)
            {
              unsigned int v324 = *((_DWORD *)v322 + 2);
              goto LABEL_380;
            }
            int v325 = 1;
            while (v323 != -4096)
            {
              int v326 = v321 + v325++;
              uint64_t v321 = v326 & v320;
              uint64_t v323 = *(void *)(v312 + 16 * v321);
              if (v323 == v288) {
                goto LABEL_378;
              }
            }
          }
          uint64_t v321 = v305;
LABEL_378:
          unsigned int v324 = *(_DWORD *)(v312 + 16 * v321 + 8);
          if (v305)
          {
            unsigned int v320 = v305 - 1;
LABEL_380:
            LODWORD(v327) = v320 & v302;
            uint64_t v328 = (uint64_t *)(v312 + 16 * (v320 & v302));
            uint64_t v329 = *v328;
            if (*v328 != v289)
            {
              int v330 = 1;
              do
              {
                if (v329 == -4096) {
                  goto LABEL_385;
                }
                int v331 = v327 + v330++;
                uint64_t v327 = v331 & v320;
                uint64_t v329 = *(void *)(v312 + 16 * v327);
              }
              while (v329 != v289);
              uint64_t v328 = (uint64_t *)(v312 + 16 * v327);
            }
            goto LABEL_386;
          }
LABEL_385:
          uint64_t v328 = (uint64_t *)(v312 + 16 * v305);
LABEL_386:
          uint64_t result = *((unsigned int *)v328 + 2);
          unint64_t v287 = v303;
        }
        while (v324 >= result);
        uint64_t *v303 = v289;
LABEL_388:
        int64_t v268 = v269 - 1;
        if (!v269)
        {
LABEL_389:
          uint64_t v332 = 0;
          uint64_t v333 = *v13;
          unsigned int v334 = v13;
          while (1)
          {
            uint64_t v335 = &v334[v332 + 1];
            uint64_t v336 = (2 * v332) | 1;
            uint64_t v337 = 2 * v332 + 2;
            if (v337 < v15) {
              break;
            }
LABEL_409:
            *unsigned int v334 = *v335;
            unsigned int v334 = v335;
            uint64_t v332 = v336;
            if (v336 > (uint64_t)((unint64_t)(v15 - 2) >> 1))
            {
              if (v335 == --a2)
              {
                *uint64_t v335 = v333;
                goto LABEL_450;
              }
              *uint64_t v335 = *a2;
              *a2 = v333;
              uint64_t v352 = (char *)v335 - (char *)v13 + 8;
              if (v352 >= 9)
              {
                unint64_t v353 = (((unint64_t)v352 >> 3) - 2) >> 1;
                unint64_t v354 = &v13[v353];
                uint64_t v355 = *v354;
                uint64_t v356 = *v335;
                uint64_t v357 = *(void *)(*(void *)a3 + 976);
                uint64_t v358 = *(unsigned int *)(*(void *)a3 + 992);
                unsigned int v359 = *v335 >> 4;
                if (!v358) {
                  goto LABEL_420;
                }
                unsigned int v360 = v358 - 1;
                LODWORD(v361) = (v358 - 1) & ((v355 >> 4) ^ (v355 >> 9));
                uint64_t v362 = (uint64_t *)(v357 + 16 * v361);
                uint64_t v363 = *v362;
                if (*v362 == v355)
                {
                  uint64_t result = *((unsigned int *)v362 + 2);
LABEL_423:
                  LODWORD(v366) = v360 & (v359 ^ (v356 >> 9));
                  uint64_t v367 = (uint64_t *)(v357 + 16 * v366);
                  uint64_t v368 = *v367;
                  if (*v367 != v356)
                  {
                    int v369 = 1;
                    do
                    {
                      if (v368 == -4096) {
                        goto LABEL_428;
                      }
                      int v370 = v366 + v369++;
                      uint64_t v366 = v370 & v360;
                      uint64_t v368 = *(void *)(v357 + 16 * v366);
                    }
                    while (v368 != v356);
                    uint64_t v367 = (uint64_t *)(v357 + 16 * v366);
                  }
                }
                else
                {
                  int v364 = 1;
                  while (v363 != -4096)
                  {
                    int v365 = v361 + v364++;
                    uint64_t v361 = v365 & v360;
                    uint64_t v363 = *(void *)(v357 + 16 * v361);
                    if (v363 == v355) {
                      goto LABEL_421;
                    }
                  }
LABEL_420:
                  uint64_t v361 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_421:
                  uint64_t result = *(unsigned int *)(v357 + 16 * v361 + 8);
                  if (v358)
                  {
                    unsigned int v360 = v358 - 1;
                    goto LABEL_423;
                  }
LABEL_428:
                  uint64_t v367 = (uint64_t *)(v357 + 16 * v358);
                }
                if (result >= *((_DWORD *)v367 + 2)) {
                  goto LABEL_450;
                }
                unsigned int v371 = v359 ^ (v356 >> 9);
                while (2)
                {
                  unsigned int v372 = v354;
                  *uint64_t v335 = v355;
                  if (!v353)
                  {
LABEL_449:
                    *unsigned int v372 = v356;
                    break;
                  }
                  unint64_t v353 = (v353 - 1) >> 1;
                  unint64_t v354 = &v13[v353];
                  uint64_t v355 = *v354;
                  uint64_t v373 = *(void *)(*(void *)a3 + 976);
                  uint64_t v374 = *(unsigned int *)(*(void *)a3 + 992);
                  if (v374)
                  {
                    unsigned int v375 = v374 - 1;
                    LODWORD(v376) = (v374 - 1) & ((v355 >> 4) ^ (v355 >> 9));
                    uint64_t v377 = (uint64_t *)(v373 + 16 * v376);
                    uint64_t v378 = *v377;
                    if (*v377 != v355)
                    {
                      int v379 = 1;
                      while (v378 != -4096)
                      {
                        int v380 = v376 + v379++;
                        uint64_t v376 = v380 & v375;
                        uint64_t v378 = *(void *)(v373 + 16 * v376);
                        if (v378 == v355) {
                          goto LABEL_440;
                        }
                      }
                      goto LABEL_439;
                    }
                    uint64_t result = *((unsigned int *)v377 + 2);
LABEL_442:
                    LODWORD(v381) = v375 & v371;
                    uint64_t v382 = (uint64_t *)(v373 + 16 * (v375 & v371));
                    uint64_t v383 = *v382;
                    if (*v382 != v356)
                    {
                      int v384 = 1;
                      while (v383 != -4096)
                      {
                        int v385 = v381 + v384++;
                        uint64_t v381 = v385 & v375;
                        uint64_t v383 = *(void *)(v373 + 16 * v381);
                        if (v383 == v356)
                        {
                          uint64_t v382 = (uint64_t *)(v373 + 16 * v381);
                          goto LABEL_448;
                        }
                      }
                      goto LABEL_447;
                    }
                  }
                  else
                  {
LABEL_439:
                    uint64_t v376 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_440:
                    uint64_t result = *(unsigned int *)(v373 + 16 * v376 + 8);
                    if (v374)
                    {
                      unsigned int v375 = v374 - 1;
                      goto LABEL_442;
                    }
LABEL_447:
                    uint64_t v382 = (uint64_t *)(v373 + 16 * v374);
                  }
LABEL_448:
                  uint64_t v335 = v372;
                  if (result >= *((_DWORD *)v382 + 2)) {
                    goto LABEL_449;
                  }
                  continue;
                }
              }
LABEL_450:
              if (v15-- <= 2) {
                return result;
              }
              goto LABEL_389;
            }
          }
          uint64_t result = v335[1];
          uint64_t v338 = *(void *)(*(void *)a3 + 976);
          uint64_t v339 = *(unsigned int *)(*(void *)a3 + 992);
          if (v339)
          {
            unsigned int v340 = v339 - 1;
            LODWORD(v341) = (v339 - 1) & ((*v335 >> 4) ^ (*v335 >> 9));
            uint64_t v342 = (uint64_t *)(v338 + 16 * v341);
            uint64_t v343 = *v342;
            if (*v342 != *v335)
            {
              int v345 = 1;
              while (v343 != -4096)
              {
                int v346 = v341 + v345++;
                uint64_t v341 = v346 & v340;
                uint64_t v343 = *(void *)(v338 + 16 * v341);
                if (v343 == *v335) {
                  goto LABEL_399;
                }
              }
              goto LABEL_398;
            }
            unsigned int v344 = *((_DWORD *)v342 + 2);
LABEL_401:
            LODWORD(v347) = v340 & ((result >> 4) ^ (result >> 9));
            uint64_t v348 = v338 + 16 * v347;
            uint64_t v349 = *(uint64_t **)v348;
            if (*(void *)v348 != result)
            {
              int v350 = 1;
              while (v349 != (uint64_t *)-4096)
              {
                int v351 = v347 + v350++;
                uint64_t v347 = v351 & v340;
                uint64_t v349 = *(uint64_t **)(v338 + 16 * v347);
                if (v349 == (uint64_t *)result)
                {
                  uint64_t v348 = v338 + 16 * v347;
                  goto LABEL_407;
                }
              }
              goto LABEL_406;
            }
          }
          else
          {
LABEL_398:
            uint64_t v341 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_399:
            unsigned int v344 = *(_DWORD *)(v338 + 16 * v341 + 8);
            if (v339)
            {
              unsigned int v340 = v339 - 1;
              goto LABEL_401;
            }
LABEL_406:
            uint64_t v348 = v338 + 16 * v339;
          }
LABEL_407:
          if (v344 < *(_DWORD *)(v348 + 8))
          {
            ++v335;
            uint64_t v336 = v337;
          }
          goto LABEL_409;
        }
      }
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    uint64_t v17 = &v13[(unint64_t)v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_1CD1DC07C(v11, &v11[(unint64_t)v15 >> 1], a2 - 1, a3);
      sub_1CD1DC07C(v11 + 1, v17 - 1, a2 - 2, a3);
      sub_1CD1DC07C(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      sub_1CD1DC07C(v17 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
    }
    else
    {
      sub_1CD1DC07C(&v11[(unint64_t)v15 >> 1], v11, a2 - 1, a3);
    }
    --a4;
    uint64_t v19 = *v11;
    uint64_t v20 = *(void *)a3;
    unsigned int v21 = *v11 >> 4;
    if (a5)
    {
      uint64_t v22 = *(void *)(v20 + 976);
      LODWORD(v20) = *(_DWORD *)(v20 + 992);
LABEL_31:
      unsigned int v38 = v20 - 1;
      uint64_t v39 = v20;
      unsigned int v40 = v21 ^ (v19 >> 9);
      uint64_t v41 = v22 + 16 * v20;
      unsigned int v42 = (v20 - 1) & v40;
      uint64_t v43 = (uint64_t *)(v22 + 16 * v42);
      uint64_t v44 = (unsigned int *)(v41 + 8);
      uint64_t v45 = v11;
      do
      {
        uint64_t v46 = v45;
        uint64_t v48 = v45[1];
        ++v45;
        uint64_t v47 = v48;
        if (v39)
        {
          LODWORD(v49) = ((v47 >> 4) ^ (v47 >> 9)) & v38;
          uint64_t v50 = (void *)(v22 + 16 * v49);
          uint64_t v51 = *v50;
          if (*v50 == v47)
          {
            int v52 = (unsigned int *)(v50 + 1);
          }
          else
          {
            int v53 = 1;
            while (v51 != -4096)
            {
              int v54 = v49 + v53++;
              uint64_t v49 = v54 & v38;
              uint64_t v51 = *(void *)(v22 + 16 * v49);
              if (v51 == v47) {
                goto LABEL_38;
              }
            }
            uint64_t v49 = v39;
LABEL_38:
            int v52 = (unsigned int *)(v22 + 16 * v49 + 8);
          }
          unsigned int v55 = *v52;
          uint64_t v56 = *v43;
          if (*v43 == v19)
          {
            uint64_t v57 = v22 + 16 * v42;
            continue;
          }
          int v58 = 1;
          LODWORD(v59) = v38 & v40;
          while (v56 != -4096)
          {
            int v60 = v59 + v58++;
            uint64_t v59 = v60 & v38;
            uint64_t v56 = *(void *)(v22 + 16 * v59);
            if (v56 == v19)
            {
              uint64_t v57 = v22 + 16 * v59;
              goto LABEL_47;
            }
          }
        }
        else
        {
          unsigned int v55 = *v44;
        }
        uint64_t v57 = v41;
LABEL_47:
        ;
      }
      while (v55 < *(_DWORD *)(v57 + 8));
      unsigned int v61 = a2;
      if (v46 == v11)
      {
        unsigned int v61 = a2;
        while (1)
        {
          if (v45 >= v61) {
            goto LABEL_88;
          }
          uint64_t v63 = *--v61;
          uint64_t v62 = v63;
          if (!v39) {
            break;
          }
          LODWORD(v64) = ((v62 >> 4) ^ (v62 >> 9)) & v38;
          unsigned int v65 = (void *)(v22 + 16 * v64);
          uint64_t v66 = *v65;
          if (*v65 == v62)
          {
            int v67 = (unsigned int *)(v65 + 1);
          }
          else
          {
            int v68 = 1;
            while (v66 != -4096)
            {
              int v69 = v64 + v68++;
              uint64_t v64 = v69 & v38;
              uint64_t v66 = *(void *)(v22 + 16 * v64);
              if (v66 == v62) {
                goto LABEL_59;
              }
            }
            uint64_t v64 = v39;
LABEL_59:
            int v67 = (unsigned int *)(v22 + 16 * v64 + 8);
          }
          unsigned int v70 = *v67;
          uint64_t v71 = *v43;
          if (*v43 != v19)
          {
            int v73 = 1;
            LODWORD(v74) = v38 & v40;
            while (v71 != -4096)
            {
              int v75 = v74 + v73++;
              uint64_t v74 = v75 & v38;
              uint64_t v71 = *(void *)(v22 + 16 * v74);
              if (v71 == v19)
              {
                uint64_t v72 = v22 + 16 * v74;
                goto LABEL_68;
              }
            }
            goto LABEL_67;
          }
          uint64_t v72 = v22 + 16 * v42;
LABEL_68:
          if (v70 < *(_DWORD *)(v72 + 8)) {
            goto LABEL_88;
          }
        }
        unsigned int v70 = *v44;
LABEL_67:
        uint64_t v72 = v41;
        goto LABEL_68;
      }
      while (2)
      {
        uint64_t v78 = *--v61;
        uint64_t v77 = v78;
        if (v39)
        {
          LODWORD(v76) = ((v77 >> 4) ^ (v77 >> 9)) & v38;
          int v79 = (void *)(v22 + 16 * v76);
          uint64_t v80 = *v79;
          if (*v79 == v77)
          {
            uint64_t v81 = (unsigned int *)(v79 + 1);
          }
          else
          {
            int v82 = 1;
            while (v80 != -4096)
            {
              int v83 = v76 + v82++;
              uint64_t v76 = v83 & v38;
              uint64_t v80 = *(void *)(v22 + 16 * v76);
              if (v80 == v77) {
                goto LABEL_78;
              }
            }
            uint64_t v76 = v39;
LABEL_78:
            uint64_t v81 = (unsigned int *)(v22 + 16 * v76 + 8);
          }
          unsigned int v84 = *v81;
          uint64_t v85 = *v43;
          if (*v43 == v19)
          {
            uint64_t v86 = v22 + 16 * v42;
            goto LABEL_87;
          }
          int v87 = 1;
          LODWORD(v88) = v38 & v40;
          while (v85 != -4096)
          {
            int v89 = v88 + v87++;
            uint64_t v88 = v89 & v38;
            uint64_t v85 = *(void *)(v22 + 16 * v88);
            if (v85 == v19)
            {
              uint64_t v86 = v22 + 16 * v88;
              goto LABEL_87;
            }
          }
        }
        else
        {
          unsigned int v84 = *v44;
        }
        uint64_t v86 = v41;
LABEL_87:
        if (v84 >= *(_DWORD *)(v86 + 8)) {
          continue;
        }
        break;
      }
LABEL_88:
      if (v45 >= v61)
      {
        uint64_t v13 = v45;
        goto LABEL_129;
      }
      uint64_t v90 = *v61;
      uint64_t v13 = v45;
      int v91 = v61;
      while (2)
      {
        uint64_t *v13 = v90;
        *int v91 = v47;
        uint64_t v92 = *(void *)(*(void *)a3 + 976);
        uint64_t v93 = *(unsigned int *)(*(void *)a3 + 992);
        unsigned int v94 = v93 - 1;
        unsigned int v95 = (v93 - 1) & v40;
        int v96 = (uint64_t *)(v92 + 16 * v95);
        uint64_t v97 = (unsigned int *)(v92 + 16 * v93 + 8);
        while (2)
        {
          uint64_t v98 = v13[1];
          ++v13;
          uint64_t v47 = v98;
          if (!v93)
          {
            unsigned int v105 = *v97;
LABEL_105:
            uint64_t v107 = v92 + 16 * v93;
            goto LABEL_106;
          }
          LODWORD(v99) = ((v47 >> 4) ^ (v47 >> 9)) & v94;
          unsigned int v100 = (void *)(v92 + 16 * v99);
          uint64_t v101 = *v100;
          if (*v100 == v47)
          {
            unint64_t v102 = (unsigned int *)(v100 + 1);
          }
          else
          {
            int v103 = 1;
            while (v101 != -4096)
            {
              int v104 = v99 + v103++;
              uint64_t v99 = v104 & v94;
              uint64_t v101 = *(void *)(v92 + 16 * v99);
              if (v101 == v47) {
                goto LABEL_97;
              }
            }
            uint64_t v99 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_97:
            unint64_t v102 = (unsigned int *)(v92 + 16 * v99 + 8);
          }
          unsigned int v105 = *v102;
          uint64_t v106 = *v96;
          if (*v96 != v19)
          {
            int v108 = 1;
            LODWORD(v109) = v94 & v40;
            while (v106 != -4096)
            {
              int v110 = v109 + v108++;
              uint64_t v109 = v110 & v94;
              uint64_t v106 = *(void *)(v92 + 16 * v109);
              if (v106 == v19)
              {
                uint64_t v107 = v92 + 16 * v109;
                goto LABEL_106;
              }
            }
            goto LABEL_105;
          }
          uint64_t v107 = v92 + 16 * v95;
LABEL_106:
          if (v105 < *(_DWORD *)(v107 + 8)) {
            continue;
          }
          break;
        }
        while (2)
        {
          uint64_t v112 = *--v91;
          uint64_t v90 = v112;
          if (v93)
          {
            LODWORD(v111) = ((v90 >> 4) ^ (v90 >> 9)) & v94;
            uint64_t v113 = (void *)(v92 + 16 * v111);
            uint64_t v114 = *v113;
            if (*v113 == v90)
            {
              unsigned int v115 = (unsigned int *)(v113 + 1);
            }
            else
            {
              int v116 = 1;
              while (v114 != -4096)
              {
                int v117 = v111 + v116++;
                uint64_t v111 = v117 & v94;
                uint64_t v114 = *(void *)(v92 + 16 * v111);
                if (v114 == v90) {
                  goto LABEL_116;
                }
              }
              uint64_t v111 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_116:
              unsigned int v115 = (unsigned int *)(v92 + 16 * v111 + 8);
            }
            unsigned int v118 = *v115;
            uint64_t v119 = *v96;
            if (*v96 == v19)
            {
              uint64_t v120 = v92 + 16 * v95;
              goto LABEL_125;
            }
            int v121 = 1;
            LODWORD(v122) = v94 & v40;
            while (v119 != -4096)
            {
              int v123 = v122 + v121++;
              uint64_t v122 = v123 & v94;
              uint64_t v119 = *(void *)(v92 + 16 * v122);
              if (v119 == v19)
              {
                uint64_t v120 = v92 + 16 * v122;
                goto LABEL_125;
              }
            }
          }
          else
          {
            unsigned int v118 = *v97;
          }
          uint64_t v120 = v92 + 16 * v93;
LABEL_125:
          if (v118 >= *(_DWORD *)(v120 + 8)) {
            continue;
          }
          break;
        }
        if (v13 < v91) {
          continue;
        }
        break;
      }
LABEL_129:
      uint64_t v124 = v13 - 1;
      if (v13 - 1 != v11) {
        *uint64_t v11 = *v124;
      }
      uint64_t *v124 = v19;
      if (v45 < v61)
      {
LABEL_134:
        uint64_t result = sub_1CD1DD288(v11, v13 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      else
      {
        BOOL v125 = sub_1CD1DEF0C(v11, v13 - 1, a3);
        uint64_t result = sub_1CD1DEF0C(v13, a2, a3);
        if (result)
        {
          a2 = v13 - 1;
          if (v125) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v125) {
          goto LABEL_134;
        }
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v20 + 976);
      uint64_t v20 = *(unsigned int *)(v20 + 992);
      if (v20)
      {
        uint64_t v23 = *(v11 - 1);
        unsigned int v24 = v20 - 1;
        LODWORD(v25) = ((v23 >> 4) ^ (v23 >> 9)) & (v20 - 1);
        int v26 = (uint64_t *)(v22 + 16 * v25);
        uint64_t v27 = *v26;
        if (*v26 == v23)
        {
          unsigned int v28 = *((_DWORD *)v26 + 2);
          goto LABEL_22;
        }
        int v29 = 1;
        while (v27 != -4096)
        {
          int v30 = v25 + v29++;
          uint64_t v25 = v30 & v24;
          uint64_t v27 = *(void *)(v22 + 16 * v25);
          if (v27 == v23) {
            goto LABEL_20;
          }
        }
      }
      uint64_t v25 = v20;
LABEL_20:
      unsigned int v28 = *(_DWORD *)(v22 + 16 * v25 + 8);
      if (!v20) {
        goto LABEL_29;
      }
      unsigned int v24 = v20 - 1;
LABEL_22:
      unsigned int v31 = v21 ^ (v19 >> 9);
      LODWORD(v32) = v24 & v31;
      uint64_t v33 = (uint64_t *)(v22 + 16 * (v24 & v31));
      uint64_t v34 = *v33;
      if (*v33 == v19)
      {
        if (v28 < *((_DWORD *)v33 + 2)) {
          goto LABEL_31;
        }
        uint64_t v35 = *v12;
        goto LABEL_137;
      }
      int v36 = 1;
      while (v34 != -4096)
      {
        int v37 = v32 + v36++;
        uint64_t v32 = v37 & v24;
        uint64_t v34 = *(void *)(v22 + 16 * v32);
        if (v34 == v19) {
          goto LABEL_30;
        }
      }
LABEL_29:
      uint64_t v32 = v20;
LABEL_30:
      if (v28 < *(_DWORD *)(v22 + 16 * v32 + 8)) {
        goto LABEL_31;
      }
      uint64_t v35 = *v12;
      if (!v20) {
        goto LABEL_241;
      }
      unsigned int v31 = v21 ^ (v19 >> 9);
LABEL_137:
      unsigned int v126 = v20 - 1;
      LODWORD(v127) = v31 & (v20 - 1);
      unsigned int v128 = (uint64_t *)(v22 + 16 * v127);
      uint64_t v129 = *v128;
      if (*v128 == v19)
      {
        unsigned int v130 = *((_DWORD *)v128 + 2);
        goto LABEL_144;
      }
      int v131 = 1;
      while (v129 != -4096)
      {
        int v132 = v127 + v131++;
        uint64_t v127 = v132 & v126;
        uint64_t v129 = *(void *)(v22 + 16 * v127);
        if (v129 == v19) {
          goto LABEL_142;
        }
      }
LABEL_241:
      uint64_t v127 = v20;
LABEL_142:
      unsigned int v130 = *(_DWORD *)(v22 + 16 * v127 + 8);
      if (!v20) {
        goto LABEL_149;
      }
      unsigned int v126 = v20 - 1;
LABEL_144:
      LODWORD(v133) = ((v35 >> 4) ^ (v35 >> 9)) & v126;
      int v134 = (uint64_t *)(v22 + 16 * v133);
      uint64_t v135 = *v134;
      if (*v134 != v35)
      {
        int v136 = 1;
        while (v135 != -4096)
        {
          int v137 = v133 + v136++;
          uint64_t v133 = v137 & v126;
          uint64_t v135 = *(void *)(v22 + 16 * v133);
          if (v135 == v35)
          {
            int v134 = (uint64_t *)(v22 + 16 * v133);
            goto LABEL_150;
          }
        }
LABEL_149:
        int v134 = (uint64_t *)(v22 + 16 * v20);
      }
LABEL_150:
      unsigned int v138 = v21 ^ (v19 >> 9);
      unsigned int v139 = v20 - 1;
      BOOL v140 = (void *)(v22 + 16 * ((v20 - 1) & v138));
      uint64_t result = v22 + 16 * v20 + 8;
      uint64_t v13 = v11;
      if (v130 < *((_DWORD *)v134 + 2))
      {
        uint64_t v13 = v11;
        while (1)
        {
          uint64_t v142 = v13[1];
          ++v13;
          uint64_t v141 = v142;
          if (v20)
          {
            uint64_t v143 = *v140;
            unsigned int v144 = (unsigned int *)(v140 + 1);
            if (*v140 != v19)
            {
              int v145 = 1;
              LODWORD(v146) = v139 & v138;
              while (v143 != -4096)
              {
                int v147 = v146 + v145++;
                uint64_t v146 = v147 & v139;
                uint64_t v143 = *(void *)(v22 + 16 * v146);
                if (v143 == v19) {
                  goto LABEL_157;
                }
              }
              uint64_t v146 = v20;
LABEL_157:
              unsigned int v144 = (unsigned int *)(v22 + 16 * v146 + 8);
            }
            unsigned int v148 = *v144;
            LODWORD(v149) = ((v141 >> 4) ^ (v141 >> 9)) & v139;
            uint64_t v150 = (uint64_t *)(v22 + 16 * v149);
            uint64_t v151 = *v150;
            if (*v150 == v141) {
              goto LABEL_165;
            }
            int v152 = 1;
            while (v151 != -4096)
            {
              int v153 = v149 + v152++;
              uint64_t v149 = v153 & v139;
              uint64_t v151 = *(void *)(v22 + 16 * v149);
              if (v151 == v141)
              {
                uint64_t v150 = (uint64_t *)(v22 + 16 * v149);
                goto LABEL_165;
              }
            }
          }
          else
          {
            unsigned int v148 = *(_DWORD *)result;
          }
          uint64_t v150 = (uint64_t *)(v22 + 16 * v20);
LABEL_165:
          if (v148 < *((_DWORD *)v150 + 2)) {
            goto LABEL_185;
          }
        }
      }
      do
      {
        if (++v13 >= a2) {
          break;
        }
        if (v20)
        {
          uint64_t v154 = *v140;
          int v155 = (unsigned int *)(v140 + 1);
          if (*v140 != v19)
          {
            int v156 = 1;
            LODWORD(v157) = v139 & v138;
            while (v154 != -4096)
            {
              int v158 = v157 + v156++;
              uint64_t v157 = v158 & v139;
              uint64_t v154 = *(void *)(v22 + 16 * v157);
              if (v154 == v19) {
                goto LABEL_174;
              }
            }
            uint64_t v157 = v20;
LABEL_174:
            int v155 = (unsigned int *)(v22 + 16 * v157 + 8);
          }
          unsigned int v159 = *v155;
          LODWORD(v160) = ((*v13 >> 4) ^ (*v13 >> 9)) & v139;
          uint64_t v161 = (uint64_t *)(v22 + 16 * v160);
          uint64_t v162 = *v161;
          if (*v161 == *v13) {
            continue;
          }
          int v163 = 1;
          while (v162 != -4096)
          {
            int v164 = v160 + v163++;
            uint64_t v160 = v164 & v139;
            uint64_t v162 = *(void *)(v22 + 16 * v160);
            if (v162 == *v13)
            {
              uint64_t v161 = (uint64_t *)(v22 + 16 * v160);
              goto LABEL_182;
            }
          }
        }
        else
        {
          unsigned int v159 = *(_DWORD *)result;
        }
        uint64_t v161 = (uint64_t *)(v22 + 16 * v20);
LABEL_182:
        ;
      }
      while (v159 >= *((_DWORD *)v161 + 2));
LABEL_185:
      uint64_t v165 = a2;
      if (v13 < a2)
      {
        uint64_t v165 = a2;
        do
        {
          uint64_t v167 = *--v165;
          uint64_t v166 = v167;
          if (v20)
          {
            uint64_t v168 = *v140;
            unsigned int v169 = (unsigned int *)(v140 + 1);
            if (*v140 != v19)
            {
              int v170 = 1;
              LODWORD(v171) = v139 & v138;
              while (v168 != -4096)
              {
                int v172 = v171 + v170++;
                uint64_t v171 = v172 & v139;
                uint64_t v168 = *(void *)(v22 + 16 * v171);
                if (v168 == v19) {
                  goto LABEL_192;
                }
              }
              uint64_t v171 = v20;
LABEL_192:
              unsigned int v169 = (unsigned int *)(v22 + 16 * v171 + 8);
            }
            unsigned int v173 = *v169;
            LODWORD(v174) = ((v166 >> 4) ^ (v166 >> 9)) & v139;
            int v175 = (uint64_t *)(v22 + 16 * v174);
            uint64_t v176 = *v175;
            if (*v175 == v166) {
              continue;
            }
            int v177 = 1;
            while (v176 != -4096)
            {
              int v178 = v174 + v177++;
              uint64_t v174 = v178 & v139;
              uint64_t v176 = *(void *)(v22 + 16 * v174);
              if (v176 == v166)
              {
                int v175 = (uint64_t *)(v22 + 16 * v174);
                goto LABEL_200;
              }
            }
          }
          else
          {
            unsigned int v173 = *(_DWORD *)result;
          }
          int v175 = (uint64_t *)(v22 + 16 * v20);
LABEL_200:
          ;
        }
        while (v173 < *((_DWORD *)v175 + 2));
      }
      if (v13 >= v165) {
        goto LABEL_238;
      }
      uint64_t v179 = *v13;
      uint64_t v180 = *v165;
      do
      {
        uint64_t *v13 = v180;
        *uint64_t v165 = v179;
        uint64_t v181 = *(void *)(*(void *)a3 + 976);
        uint64_t v182 = *(unsigned int *)(*(void *)a3 + 992);
        unsigned int v183 = v182 - 1;
        uint64_t v184 = (void *)(v181 + 16 * ((v182 - 1) & v138));
        uint64_t result = v181 + 16 * v182;
        unsigned int v185 = (unsigned int *)(result + 8);
        do
        {
          uint64_t v186 = v13[1];
          ++v13;
          uint64_t v179 = v186;
          if (!v182)
          {
            unsigned int v192 = *v185;
LABEL_218:
            unsigned int v194 = (uint64_t *)(v181 + 16 * v182);
            continue;
          }
          uint64_t v187 = *v184;
          int v188 = (unsigned int *)(v184 + 1);
          if (*v184 != v19)
          {
            int v189 = 1;
            LODWORD(v190) = v183 & v138;
            while (v187 != -4096)
            {
              int v191 = v190 + v189++;
              uint64_t v190 = v191 & v183;
              uint64_t v187 = *(void *)(v181 + 16 * v190);
              if (v187 == v19) {
                goto LABEL_211;
              }
            }
            uint64_t v190 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_211:
            int v188 = (unsigned int *)(v181 + 16 * v190 + 8);
          }
          unsigned int v192 = *v188;
          LODWORD(v193) = ((v179 >> 4) ^ (v179 >> 9)) & v183;
          unsigned int v194 = (uint64_t *)(v181 + 16 * v193);
          uint64_t v195 = *v194;
          if (*v194 != v179)
          {
            int v196 = 1;
            while (v195 != -4096)
            {
              int v197 = v193 + v196++;
              uint64_t v193 = v197 & v183;
              uint64_t v195 = *(void *)(v181 + 16 * v193);
              if (v195 == v179)
              {
                unsigned int v194 = (uint64_t *)(v181 + 16 * v193);
                goto LABEL_219;
              }
            }
            goto LABEL_218;
          }
LABEL_219:
          ;
        }
        while (v192 >= *((_DWORD *)v194 + 2));
        do
        {
          uint64_t v199 = *--v165;
          uint64_t v180 = v199;
          if (!v182)
          {
            unsigned int v204 = *v185;
LABEL_235:
            uint64_t v206 = (uint64_t *)(v181 + 16 * v182);
            continue;
          }
          uint64_t v200 = *v184;
          char v201 = (unsigned int *)(v184 + 1);
          if (*v184 != v19)
          {
            int v202 = 1;
            LODWORD(v198) = v183 & v138;
            while (v200 != -4096)
            {
              int v203 = v198 + v202++;
              uint64_t v198 = v203 & v183;
              uint64_t v200 = *(void *)(v181 + 16 * v198);
              if (v200 == v19) {
                goto LABEL_228;
              }
            }
            uint64_t v198 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_228:
            char v201 = (unsigned int *)(v181 + 16 * v198 + 8);
          }
          unsigned int v204 = *v201;
          LODWORD(v205) = ((v180 >> 4) ^ (v180 >> 9)) & v183;
          uint64_t v206 = (uint64_t *)(v181 + 16 * v205);
          uint64_t v207 = *v206;
          if (*v206 != v180)
          {
            int v208 = 1;
            while (v207 != -4096)
            {
              int v209 = v205 + v208++;
              uint64_t v205 = v209 & v183;
              uint64_t v207 = *(void *)(v181 + 16 * v205);
              if (v207 == v180)
              {
                uint64_t v206 = (uint64_t *)(v181 + 16 * v205);
                goto LABEL_236;
              }
            }
            goto LABEL_235;
          }
LABEL_236:
          ;
        }
        while (v204 < *((_DWORD *)v206 + 2));
      }
      while (v13 < v165);
LABEL_238:
      int8x16_t v210 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        *uint64_t v11 = *v210;
      }
      a5 = 0;
      *int8x16_t v210 = v19;
    }
  }
  uint64_t v231 = v13 + 1;
  BOOL v233 = v13 == a2 || v231 == a2;
  if ((a5 & 1) == 0)
  {
    if (v233) {
      return result;
    }
    uint64_t v387 = *(void *)a3;
    while (1)
    {
      uint64_t v388 = v231;
      uint64_t v390 = *v11;
      uint64_t v389 = v11[1];
      uint64_t v391 = *(void *)(v387 + 976);
      uint64_t v392 = *(unsigned int *)(v387 + 992);
      unsigned int v393 = v389 >> 4;
      if (v392)
      {
        unsigned int v394 = v392 - 1;
        LODWORD(v395) = (v392 - 1) & (v393 ^ (v389 >> 9));
        uint64_t v396 = (uint64_t *)(v391 + 16 * v395);
        uint64_t v397 = *v396;
        if (*v396 == v389)
        {
          unsigned int v398 = *((_DWORD *)v396 + 2);
          goto LABEL_465;
        }
        uint64_t result = 1;
        while (v397 != -4096)
        {
          int v399 = v395 + result;
          uint64_t result = (result + 1);
          uint64_t v395 = v399 & v394;
          uint64_t v397 = *(void *)(v391 + 16 * v395);
          if (v397 == v389) {
            goto LABEL_463;
          }
        }
      }
      uint64_t v395 = *(unsigned int *)(v387 + 992);
LABEL_463:
      unsigned int v398 = *(_DWORD *)(v391 + 16 * v395 + 8);
      if (!v392)
      {
LABEL_470:
        uint64_t v401 = v391 + 16 * v392;
        goto LABEL_471;
      }
      unsigned int v394 = v392 - 1;
LABEL_465:
      LODWORD(v400) = v394 & ((v390 >> 4) ^ (v390 >> 9));
      uint64_t v401 = v391 + 16 * v400;
      uint64_t result = *(void *)v401;
      if (*(void *)v401 != v390)
      {
        int v402 = 1;
        do
        {
          if (result == -4096) {
            goto LABEL_470;
          }
          int v403 = v400 + v402++;
          uint64_t v400 = v403 & v394;
          uint64_t result = *(void *)(v391 + 16 * v400);
        }
        while (result != v390);
        uint64_t v401 = v391 + 16 * v400;
      }
LABEL_471:
      if (v398 < *(_DWORD *)(v401 + 8))
      {
        unsigned int v404 = v393 ^ (v389 >> 9);
        unint64_t v405 = v388;
        while (1)
        {
          *unint64_t v405 = v390;
          unint64_t v405 = v11;
          uint64_t v406 = *--v11;
          uint64_t v390 = v406;
          uint64_t v407 = *(void *)(*(void *)a3 + 976);
          uint64_t v408 = *(unsigned int *)(*(void *)a3 + 992);
          if (v408)
          {
            unsigned int v409 = v408 - 1;
            LODWORD(v410) = (v408 - 1) & v404;
            uint64_t v411 = (uint64_t *)(v407 + 16 * v410);
            uint64_t v412 = *v411;
            if (*v411 == v389)
            {
              unsigned int v413 = *((_DWORD *)v411 + 2);
              goto LABEL_483;
            }
            uint64_t result = 1;
            while (v412 != -4096)
            {
              int v414 = v410 + result;
              uint64_t result = (result + 1);
              uint64_t v410 = v414 & v409;
              uint64_t v412 = *(void *)(v407 + 16 * v410);
              if (v412 == v389) {
                goto LABEL_481;
              }
            }
          }
          uint64_t v410 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_481:
          unsigned int v413 = *(_DWORD *)(v407 + 16 * v410 + 8);
          if (v408)
          {
            unsigned int v409 = v408 - 1;
LABEL_483:
            LODWORD(v415) = v409 & ((v390 >> 4) ^ (v390 >> 9));
            uint64_t v416 = v407 + 16 * v415;
            uint64_t result = *(void *)v416;
            if (*(void *)v416 != v390)
            {
              int v417 = 1;
              do
              {
                if (result == -4096) {
                  goto LABEL_488;
                }
                int v418 = v415 + v417++;
                uint64_t v415 = v418 & v409;
                uint64_t result = *(void *)(v407 + 16 * v415);
              }
              while (result != v390);
              uint64_t v416 = v407 + 16 * v415;
            }
            goto LABEL_489;
          }
LABEL_488:
          uint64_t v416 = v407 + 16 * v408;
LABEL_489:
          if (v413 >= *(_DWORD *)(v416 + 8))
          {
            *unint64_t v405 = v389;
            uint64_t v387 = *(void *)a3;
            break;
          }
        }
      }
      uint64_t v231 = v388 + 1;
      uint64_t v11 = v388;
      if (v388 + 1 == a2) {
        return result;
      }
    }
  }
  if (v233) {
    return result;
  }
  uint64_t v234 = *(void *)a3;
  long long v235 = v13;
  while (2)
  {
    int v236 = v231;
    uint64_t v238 = *v235;
    long long v237 = (uint64_t *)v235[1];
    uint64_t v239 = *(void *)(v234 + 976);
    uint64_t v240 = *(unsigned int *)(v234 + 992);
    unsigned int v241 = v237 >> 4;
    if (v240)
    {
      unsigned int v242 = v240 - 1;
      LODWORD(v243) = (v240 - 1) & (v241 ^ (v237 >> 9));
      uint64_t v244 = v239 + 16 * v243;
      uint64_t result = *(void *)v244;
      if (*(uint64_t **)v244 == v237)
      {
        unsigned int v245 = *(_DWORD *)(v244 + 8);
        goto LABEL_276;
      }
      int v246 = 1;
      while (result != -4096)
      {
        int v247 = v243 + v246++;
        uint64_t v243 = v247 & v242;
        uint64_t result = *(void *)(v239 + 16 * v243);
        if ((uint64_t *)result == v237) {
          goto LABEL_274;
        }
      }
    }
    uint64_t v243 = *(unsigned int *)(v234 + 992);
LABEL_274:
    unsigned int v245 = *(_DWORD *)(v239 + 16 * v243 + 8);
    if (v240)
    {
      unsigned int v242 = v240 - 1;
LABEL_276:
      uint64_t result = v242 & ((v238 >> 4) ^ (v238 >> 9));
      int v248 = (uint64_t *)(v239 + 16 * result);
      uint64_t v249 = *v248;
      if (*v248 != v238)
      {
        int v250 = 1;
        while (v249 != -4096)
        {
          int v251 = result + v250++;
          uint64_t result = v251 & v242;
          uint64_t v249 = *(void *)(v239 + 16 * result);
          if (v249 == v238)
          {
            int v248 = (uint64_t *)(v239 + 16 * result);
            goto LABEL_282;
          }
        }
        goto LABEL_281;
      }
    }
    else
    {
LABEL_281:
      int v248 = (uint64_t *)(v239 + 16 * v240);
    }
LABEL_282:
    if (v245 >= *((_DWORD *)v248 + 2)) {
      goto LABEL_305;
    }
    unsigned int v252 = v241 ^ (v237 >> 9);
    v253 = v236;
    while (2)
    {
      uint64_t *v253 = v238;
      if (v235 != v13)
      {
        v253 = v235;
        uint64_t v254 = *--v235;
        uint64_t v238 = v254;
        uint64_t v255 = *(void *)(*(void *)a3 + 976);
        uint64_t v256 = *(unsigned int *)(*(void *)a3 + 992);
        if (v256)
        {
          unsigned int v257 = v256 - 1;
          LODWORD(v258) = (v256 - 1) & v252;
          uint64_t v259 = v255 + 16 * v258;
          uint64_t result = *(void *)v259;
          if (*(uint64_t **)v259 == v237)
          {
            unsigned int v260 = *(_DWORD *)(v259 + 8);
            goto LABEL_295;
          }
          int v261 = 1;
          while (result != -4096)
          {
            int v262 = v258 + v261++;
            uint64_t v258 = v262 & v257;
            uint64_t result = *(void *)(v255 + 16 * v258);
            if ((uint64_t *)result == v237) {
              goto LABEL_293;
            }
          }
        }
        uint64_t v258 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_293:
        unsigned int v260 = *(_DWORD *)(v255 + 16 * v258 + 8);
        if (v256)
        {
          unsigned int v257 = v256 - 1;
LABEL_295:
          uint64_t result = v257 & ((v238 >> 4) ^ (v238 >> 9));
          unint64_t v263 = (uint64_t *)(v255 + 16 * result);
          uint64_t v264 = *v263;
          if (*v263 != v238)
          {
            int v265 = 1;
            while (v264 != -4096)
            {
              int v266 = result + v265++;
              uint64_t result = v266 & v257;
              uint64_t v264 = *(void *)(v255 + 16 * result);
              if (v264 == v238)
              {
                unint64_t v263 = (uint64_t *)(v255 + 16 * result);
                goto LABEL_301;
              }
            }
            goto LABEL_300;
          }
        }
        else
        {
LABEL_300:
          unint64_t v263 = (uint64_t *)(v255 + 16 * v256);
        }
LABEL_301:
        if (v260 >= *((_DWORD *)v263 + 2)) {
          goto LABEL_304;
        }
        continue;
      }
      break;
    }
    v253 = v13;
LABEL_304:
    uint64_t *v253 = (uint64_t)v237;
    uint64_t v234 = *(void *)a3;
LABEL_305:
    uint64_t v231 = v236 + 1;
    long long v235 = v236;
    if (v236 + 1 != a2) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CD1DEF0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*(void *)a3 + 976);
      uint64_t v11 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v11) {
        goto LABEL_63;
      }
      unsigned int v12 = v11 - 1;
      LODWORD(v13) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      uint64_t v14 = (uint64_t *)(v10 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v8)
      {
        unsigned int v16 = *((_DWORD *)v14 + 2);
      }
      else
      {
        int v66 = 1;
        while (v15 != -4096)
        {
          int v67 = v13 + v66++;
          uint64_t v13 = v67 & v12;
          uint64_t v15 = *(void *)(v10 + 16 * v13);
          if (v15 == v8) {
            goto LABEL_64;
          }
        }
LABEL_63:
        uint64_t v13 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_64:
        unsigned int v16 = *(_DWORD *)(v10 + 16 * v13 + 8);
        if (!v11)
        {
LABEL_79:
          uint64_t v71 = (uint64_t *)(v10 + 16 * v11);
          goto LABEL_80;
        }
        unsigned int v12 = v11 - 1;
      }
      LODWORD(v70) = v12 & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v71 = (uint64_t *)(v10 + 16 * v70);
      uint64_t v72 = *v71;
      if (*v71 != v9)
      {
        int v73 = 1;
        do
        {
          if (v72 == -4096) {
            goto LABEL_79;
          }
          int v74 = v70 + v73++;
          uint64_t v70 = v74 & v12;
          uint64_t v72 = *(void *)(v10 + 16 * v70);
        }
        while (v72 != v9);
        uint64_t v71 = (uint64_t *)(v10 + 16 * v70);
      }
LABEL_80:
      if (v16 < *((_DWORD *)v71 + 2))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1CD1DC07C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CD1DCC48(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      unsigned int v55 = a1 + 2;
      uint64_t v56 = a1 + 3;
      sub_1CD1DCC48(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v57 = *(a2 - 1);
      uint64_t v58 = a1[3];
      uint64_t v59 = *(void *)(*(void *)a3 + 976);
      uint64_t v60 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v60) {
        goto LABEL_71;
      }
      unsigned int v61 = v60 - 1;
      LODWORD(v62) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      uint64_t v63 = (uint64_t *)(v59 + 16 * v62);
      uint64_t v64 = *v63;
      if (*v63 == v57)
      {
        unsigned int v65 = *((_DWORD *)v63 + 2);
        goto LABEL_74;
      }
      int v68 = 1;
      while (v64 != -4096)
      {
        int v69 = v62 + v68++;
        uint64_t v62 = v69 & v61;
        uint64_t v64 = *(void *)(v59 + 16 * v62);
        if (v64 == v57) {
          goto LABEL_72;
        }
      }
LABEL_71:
      uint64_t v62 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_72:
      unsigned int v65 = *(_DWORD *)(v59 + 16 * v62 + 8);
      if (!v60) {
        goto LABEL_82;
      }
      unsigned int v61 = v60 - 1;
LABEL_74:
      LODWORD(v75) = v61 & ((v58 >> 4) ^ (v58 >> 9));
      uint64_t v76 = (uint64_t *)(v59 + 16 * v75);
      uint64_t v77 = *v76;
      if (*v76 == v58) {
        goto LABEL_83;
      }
      int v78 = 1;
      while (v77 != -4096)
      {
        int v79 = v75 + v78++;
        uint64_t v75 = v79 & v61;
        uint64_t v77 = *(void *)(v59 + 16 * v75);
        if (v77 == v58)
        {
          uint64_t v76 = (uint64_t *)(v59 + 16 * v75);
          goto LABEL_83;
        }
      }
LABEL_82:
      uint64_t v76 = (uint64_t *)(v59 + 16 * v60);
LABEL_83:
      if (v65 >= *((_DWORD *)v76 + 2)) {
        return 1;
      }
      uint64_t *v56 = v57;
      *(a2 - 1) = v58;
      uint64_t v80 = *v56;
      uint64_t v81 = *v55;
      uint64_t v82 = *(void *)(*(void *)a3 + 976);
      uint64_t v83 = *(unsigned int *)(*(void *)a3 + 992);
      unsigned int v84 = *v56 >> 4;
      if (!v83) {
        goto LABEL_91;
      }
      unsigned int v85 = v83 - 1;
      LODWORD(v86) = (v83 - 1) & (v84 ^ (v80 >> 9));
      int v87 = (uint64_t *)(v82 + 16 * v86);
      uint64_t v88 = *v87;
      if (*v87 == v80)
      {
        unsigned int v89 = *((_DWORD *)v87 + 2);
      }
      else
      {
        int v90 = 1;
        while (v88 != -4096)
        {
          int v91 = v86 + v90++;
          uint64_t v86 = v91 & v85;
          uint64_t v88 = *(void *)(v82 + 16 * v86);
          if (v88 == v80) {
            goto LABEL_92;
          }
        }
LABEL_91:
        uint64_t v86 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_92:
        unsigned int v89 = *(_DWORD *)(v82 + 16 * v86 + 8);
        if (!v83) {
          goto LABEL_99;
        }
        unsigned int v85 = v83 - 1;
      }
      LODWORD(v92) = v85 & ((v81 >> 4) ^ (v81 >> 9));
      uint64_t v93 = (uint64_t *)(v82 + 16 * v92);
      uint64_t v94 = *v93;
      if (*v93 == v81) {
        goto LABEL_100;
      }
      int v95 = 1;
      while (v94 != -4096)
      {
        int v96 = v92 + v95++;
        uint64_t v92 = v96 & v85;
        uint64_t v94 = *(void *)(v82 + 16 * v92);
        if (v94 == v81)
        {
          uint64_t v93 = (uint64_t *)(v82 + 16 * v92);
          goto LABEL_100;
        }
      }
LABEL_99:
      uint64_t v93 = (uint64_t *)(v82 + 16 * v83);
LABEL_100:
      if (v89 >= *((_DWORD *)v93 + 2)) {
        return 1;
      }
      *unsigned int v55 = v80;
      uint64_t *v56 = v81;
      uint64_t v97 = a1[1];
      uint64_t v98 = *(void *)(*(void *)a3 + 976);
      uint64_t v99 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v99) {
        goto LABEL_108;
      }
      unsigned int v100 = v99 - 1;
      LODWORD(v101) = (v99 - 1) & (v84 ^ (v80 >> 9));
      unint64_t v102 = (uint64_t *)(v98 + 16 * v101);
      uint64_t v103 = *v102;
      if (*v102 == v80)
      {
        unsigned int v104 = *((_DWORD *)v102 + 2);
      }
      else
      {
        int v105 = 1;
        while (v103 != -4096)
        {
          int v106 = v101 + v105++;
          uint64_t v101 = v106 & v100;
          uint64_t v103 = *(void *)(v98 + 16 * v101);
          if (v103 == v80) {
            goto LABEL_109;
          }
        }
LABEL_108:
        uint64_t v101 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_109:
        unsigned int v104 = *(_DWORD *)(v98 + 16 * v101 + 8);
        if (!v99) {
          goto LABEL_116;
        }
        unsigned int v100 = v99 - 1;
      }
      LODWORD(v107) = v100 & ((v97 >> 4) ^ (v97 >> 9));
      int v108 = (uint64_t *)(v98 + 16 * v107);
      uint64_t v109 = *v108;
      if (*v108 == v97) {
        goto LABEL_117;
      }
      int v110 = 1;
      while (v109 != -4096)
      {
        int v111 = v107 + v110++;
        uint64_t v107 = v111 & v100;
        uint64_t v109 = *(void *)(v98 + 16 * v107);
        if (v109 == v97)
        {
          int v108 = (uint64_t *)(v98 + 16 * v107);
          goto LABEL_117;
        }
      }
LABEL_116:
      int v108 = (uint64_t *)(v98 + 16 * v99);
LABEL_117:
      if (v104 >= *((_DWORD *)v108 + 2)) {
        return 1;
      }
      a1[1] = v80;
      a1[2] = v97;
      uint64_t v112 = *a1;
      uint64_t v113 = *(void *)(*(void *)a3 + 976);
      uint64_t v114 = *(unsigned int *)(*(void *)a3 + 992);
      if (!v114) {
        goto LABEL_125;
      }
      unsigned int v115 = v84 ^ (v80 >> 9);
      unsigned int v116 = v114 - 1;
      LODWORD(v117) = (v114 - 1) & v115;
      unsigned int v118 = (uint64_t *)(v113 + 16 * v117);
      uint64_t v119 = *v118;
      if (*v118 == v80)
      {
        unsigned int v120 = *((_DWORD *)v118 + 2);
      }
      else
      {
        int v121 = 1;
        while (v119 != -4096)
        {
          int v122 = v117 + v121++;
          uint64_t v117 = v122 & v116;
          uint64_t v119 = *(void *)(v113 + 16 * v117);
          if (v119 == v80) {
            goto LABEL_126;
          }
        }
LABEL_125:
        uint64_t v117 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_126:
        unsigned int v120 = *(_DWORD *)(v113 + 16 * v117 + 8);
        if (!v114) {
          goto LABEL_133;
        }
        unsigned int v116 = v114 - 1;
      }
      LODWORD(v123) = v116 & ((v112 >> 4) ^ (v112 >> 9));
      uint64_t v124 = (uint64_t *)(v113 + 16 * v123);
      uint64_t v125 = *v124;
      if (*v124 == v112) {
        goto LABEL_134;
      }
      int v126 = 1;
      while (v125 != -4096)
      {
        int v127 = v123 + v126++;
        uint64_t v123 = v127 & v116;
        uint64_t v125 = *(void *)(v113 + 16 * v123);
        if (v125 == v112)
        {
          uint64_t v124 = (uint64_t *)(v113 + 16 * v123);
          goto LABEL_134;
        }
      }
LABEL_133:
      uint64_t v124 = (uint64_t *)(v113 + 16 * v114);
LABEL_134:
      if (v120 < *((_DWORD *)v124 + 2))
      {
        *a1 = v80;
        a1[1] = v112;
      }
      return 1;
    default:
      uint64_t v17 = a1 + 2;
      sub_1CD1DC07C(a1, a1 + 1, a1 + 2, a3);
      uint64_t v18 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v19 = 0;
      uint64_t v20 = *(void *)a3;
      break;
  }
  do
  {
    uint64_t v21 = *v18;
    uint64_t v22 = *v17;
    uint64_t v23 = *(void *)(v20 + 976);
    uint64_t v24 = *(unsigned int *)(v20 + 992);
    unsigned int v25 = *v18 >> 4;
    if (v24)
    {
      unsigned int v26 = v24 - 1;
      LODWORD(v27) = (v24 - 1) & (v25 ^ (v21 >> 9));
      unsigned int v28 = (uint64_t *)(v23 + 16 * v27);
      uint64_t v29 = *v28;
      if (*v28 == v21)
      {
        unsigned int v30 = *((_DWORD *)v28 + 2);
        goto LABEL_17;
      }
      int v31 = 1;
      while (v29 != -4096)
      {
        int v32 = v27 + v31++;
        uint64_t v27 = v32 & v26;
        uint64_t v29 = *(void *)(v23 + 16 * v27);
        if (v29 == v21) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v27 = *(unsigned int *)(v20 + 992);
LABEL_15:
    unsigned int v30 = *(_DWORD *)(v23 + 16 * v27 + 8);
    if (!v24) {
      goto LABEL_22;
    }
    unsigned int v26 = v24 - 1;
LABEL_17:
    LODWORD(v33) = v26 & ((v22 >> 4) ^ (v22 >> 9));
    uint64_t v34 = (uint64_t *)(v23 + 16 * v33);
    uint64_t v35 = *v34;
    if (*v34 != v22)
    {
      int v36 = 1;
      while (v35 != -4096)
      {
        int v37 = v33 + v36++;
        uint64_t v33 = v37 & v26;
        uint64_t v35 = *(void *)(v23 + 16 * v33);
        if (v35 == v22)
        {
          uint64_t v34 = (uint64_t *)(v23 + 16 * v33);
          goto LABEL_23;
        }
      }
LABEL_22:
      uint64_t v34 = (uint64_t *)(v23 + 16 * v24);
    }
LABEL_23:
    if (v30 >= *((_DWORD *)v34 + 2)) {
      goto LABEL_47;
    }
    unsigned int v38 = v25 ^ (v21 >> 9);
    uint64_t v39 = v18;
    while (1)
    {
      *uint64_t v39 = v22;
      if (v17 == a1) {
        break;
      }
      uint64_t v39 = v17;
      uint64_t v40 = *--v17;
      uint64_t v22 = v40;
      uint64_t v41 = *(void *)(*(void *)a3 + 976);
      uint64_t v42 = *(unsigned int *)(*(void *)a3 + 992);
      if (v42)
      {
        unsigned int v43 = v42 - 1;
        LODWORD(v44) = (v42 - 1) & v38;
        uint64_t v45 = (uint64_t *)(v41 + 16 * v44);
        uint64_t v46 = *v45;
        if (*v45 == v21)
        {
          unsigned int v47 = *((_DWORD *)v45 + 2);
          goto LABEL_36;
        }
        int v48 = 1;
        while (v46 != -4096)
        {
          int v49 = v44 + v48++;
          uint64_t v44 = v49 & v43;
          uint64_t v46 = *(void *)(v41 + 16 * v44);
          if (v46 == v21) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v44 = *(unsigned int *)(*(void *)a3 + 992);
LABEL_34:
      unsigned int v47 = *(_DWORD *)(v41 + 16 * v44 + 8);
      if (!v42) {
        goto LABEL_41;
      }
      unsigned int v43 = v42 - 1;
LABEL_36:
      LODWORD(v50) = v43 & ((v22 >> 4) ^ (v22 >> 9));
      uint64_t v51 = (uint64_t *)(v41 + 16 * v50);
      uint64_t v52 = *v51;
      if (*v51 != v22)
      {
        int v53 = 1;
        while (v52 != -4096)
        {
          int v54 = v50 + v53++;
          uint64_t v50 = v54 & v43;
          uint64_t v52 = *(void *)(v41 + 16 * v50);
          if (v52 == v22)
          {
            uint64_t v51 = (uint64_t *)(v41 + 16 * v50);
            goto LABEL_42;
          }
        }
LABEL_41:
        uint64_t v51 = (uint64_t *)(v41 + 16 * v42);
      }
LABEL_42:
      if (v47 >= *((_DWORD *)v51 + 2)) {
        goto LABEL_45;
      }
    }
    uint64_t v39 = a1;
LABEL_45:
    *uint64_t v39 = v21;
    if (++v19 == 8) {
      return v18 + 1 == a2;
    }
    uint64_t v20 = *(void *)a3;
LABEL_47:
    uint64_t v17 = v18++;
  }
  while (v18 != a2);
  return 1;
}

void sub_1CD1DF67C(void ***a1)
{
  __n128 v1 = *a1;
  uint64_t v2 = (unsigned __int8 **)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (unsigned __int8 **)v1[1];
  BOOL v5 = **a1;
  if (v4 == v2) {
    goto LABEL_22;
  }
  uint64_t v6 = v4 - 1;
  do
  {
    int v7 = *v6;
    if (!*v6) {
      goto LABEL_8;
    }
    int v8 = *v7;
    if ((v8 - 4) > 0x1E)
    {
      if ((v8 - 3) >= 0xFFFFFFFE) {
        uint64_t v10 = *v6;
      }
      else {
        uint64_t v10 = 0;
      }
      if ((v8 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v11 = (unint64_t)(v10 + 8);
LABEL_16:
        uint64_t v13 = v6;
        sub_1CC5FA668(v11 + 16, &v13);
        goto LABEL_8;
      }
      if (v8 == 3) {
        *((void *)v7 + 1) = 0;
      }
    }
    else if ((v7[1] & 0x7F) == 2 || *((_DWORD *)v7 + 3))
    {
      uint64_t v12 = *((void *)v7 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v11 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v11) {
          goto LABEL_16;
        }
      }
    }
LABEL_8:
    ;
  }
  while (v6-- != v2);
  BOOL v5 = **a1;
LABEL_22:
  v1[1] = v2;

  operator delete(v5);
}

void llvm::RelLookupTableConverterPass::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Module>::getResultImpl();
}

uint64_t llvm::SCEVExpander::findInsertPointAfter(llvm::SCEVExpander *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  BOOL v5 = (uint64_t *)((char *)a2 + 32);
  if (a2 && *((unsigned char *)a2 + 16) == 33) {
    BOOL v5 = (uint64_t *)(*((void *)a2 - 12) + 48);
  }
  do
  {
    uint64_t v6 = *v5;
    uint64_t v7 = *v5 - 24;
    if (!v6) {
      uint64_t v7 = 0;
    }
    int v8 = *(unsigned __int8 *)(v7 + 16);
    BOOL v5 = (uint64_t *)(v6 + 8);
  }
  while (v8 == 83);
  if (v8 != 94 && (v8 - 79) >= 2)
  {
    if (v8 == 38)
    {
      uint64_t v10 = *((void *)a3 + 5);
      uint64_t v6 = v10 + 40;
      for (uint64_t i = *(void *)(v10 + 48); i != v6; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v12 = i - 24;
        if (!i) {
          uint64_t v12 = 0;
        }
        if (*(unsigned char *)(v12 + 16) != 83)
        {
          unsigned int v13 = *(unsigned __int8 *)(i - 8) - 38;
          BOOL v14 = v13 > 0x38;
          uint64_t v15 = (1 << v13) & 0x100060000000001;
          if (!v14 && v15 != 0)
          {
            BOOL v5 = (uint64_t *)(i + 8);
            goto LABEL_11;
          }
          uint64_t v6 = i;
          break;
        }
      }
    }
  }
  else
  {
LABEL_11:
    uint64_t v6 = *v5;
  }
  if (v6) {
    uint64_t v17 = (llvm::Instruction *)(v6 - 24);
  }
  else {
    uint64_t v17 = 0;
  }
  if (sub_1CCE12E28((uint64_t)this, (uint64_t)v17) && v17 != a3)
  {
    do
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6) {
        uint64_t v18 = (llvm::Instruction *)(v6 - 24);
      }
      else {
        uint64_t v18 = 0;
      }
      if (sub_1CCE12E28((uint64_t)this, (uint64_t)v18)) {
        BOOL v19 = v18 == a3;
      }
      else {
        BOOL v19 = 1;
      }
    }
    while (!v19);
  }
  return v6;
}

uint64_t llvm::SCEVExpander::GetOptimalInsertionPointForCastOf(llvm::SCEVExpander *this, llvm::Value *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 21)
  {
    uint64_t v4 = *(void *)(*((void *)a2 + 3) + 80);
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    for (uint64_t i = (uint64_t *)(v5 + 48); ; uint64_t i = (uint64_t *)(v7 + 8))
    {
      uint64_t v7 = *i;
      uint64_t v8 = *i - 24;
      uint64_t v9 = v7 ? v8 : 0;
      if (*(unsigned char *)(v9 + 16) == 77)
      {
        uint64_t v10 = *(llvm::Value **)(v9 - 32);
        if (v10 != a2 && *((unsigned char *)v10 + 16) == 21) {
          continue;
        }
      }
      if (!sub_1CBF63B28(v9)) {
        break;
      }
    }
    return v7;
  }
  if (!a2 || v3 < 0x1C)
  {
    uint64_t v15 = *(void *)(*(void *)(*((void *)this + 62) + 56) + 80);
    if (v15) {
      uint64_t v16 = v15 - 24;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v7 = v16 + 40;
    for (uint64_t j = *(void *)(v16 + 48); j != v7; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v18 = j - 24;
      if (!j) {
        uint64_t v18 = 0;
      }
      if (*(unsigned char *)(v18 + 16) != 83)
      {
        unsigned int v19 = *(unsigned __int8 *)(j - 8) - 38;
        BOOL v20 = v19 > 0x38;
        uint64_t v21 = (1 << v19) & 0x100060000000001;
        if (v20 || v21 == 0) {
          return j;
        }
        else {
          return *(void *)(j + 8);
        }
      }
    }
    return v7;
  }
  uint64_t v12 = *((void *)this + 63);
  if (v12) {
    unsigned int v13 = (llvm::Instruction *)(v12 - 24);
  }
  else {
    unsigned int v13 = 0;
  }

  return llvm::SCEVExpander::findInsertPointAfter(this, a2, v13);
}

llvm::ConstantExpr *llvm::SCEVExpander::InsertNoopCastOfTo(llvm::SCEVExpander *this, llvm::Value *a2, llvm::Type *a3)
{
  uint64_t v4 = a2;
  uint64_t CastOpcode = llvm::CastInst::getCastOpcode(a2, 0, (uint64_t)a3, 0);
  uint64_t v7 = (llvm::ConstantExpr *)CastOpcode;
  if (CastOpcode == 49)
  {
    if (*(llvm::Type **)v4 != a3)
    {
      unsigned int v22 = *((unsigned __int8 *)v4 + 16);
      BOOL v23 = v22 >= 0x1C && v22 - 79 >= 0xFFFFFFF3;
      if (!v23 || **((llvm::Type ***)v4 - 4) != a3) {
        goto LABEL_56;
      }
      return (llvm::ConstantExpr *)*((void *)v4 - 4);
    }
    return v4;
  }
  if (CastOpcode == 48)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(__int32 **)(v8 + 384);
    size_t v10 = *(unsigned int *)(v8 + 392);
    unint64_t v11 = wmemchr(v9, *((_DWORD *)a3 + 2) >> 8, v10);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = &v9[v10];
    }
    if (v10 != v12 - v9)
    {
      unsigned int v13 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**((void **)this + 64) + 1912), (llvm::Type *)(*((_DWORD *)a3 + 2) >> 8));
      uint64_t v14 = **((void **)this + 64) + 1912;
      NullValue = (uint64_t *)llvm::Constant::getNullValue(v13, v15, v16);
      v118[0] = "uglygep";
      __int16 v119 = 259;
      uint64_t v18 = sub_1CB930F7C((uint64_t *)this + 56, v14, NullValue, (const char *)v4, (uint64_t)v118);
      uint64_t v4 = v18;
      v117[16] = 257;
      if (*(llvm::Type **)v18 != a3)
      {
        if (*((unsigned __int8 *)v18 + 16) <= 0x14u)
        {
          uint64_t v4 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::Type *))(**((void **)this + 65) + 224))(*((void *)this + 65), 49, v18, a3);
          if (v4) {
            BOOL v44 = *((unsigned __int8 *)v4 + 16) >= 0x1Cu;
          }
          else {
            BOOL v44 = 0;
          }
          if (v44)
          {
            (*(void (**)(void, llvm::Value *, _WORD *, void, void))(**((void **)this + 66) + 16))(*((void *)this + 66), v4, v117, *((void *)this + 62), *((void *)this + 63));
            uint64_t v113 = *((unsigned int *)this + 114);
            if (v113)
            {
              uint64_t v114 = *((void *)this + 56);
              uint64_t v115 = v114 + 16 * v113;
              do
              {
                llvm::Instruction::setMetadata(v4, *(_DWORD *)v114, *(llvm::MDNode **)(v114 + 8));
                v114 += 16;
              }
              while (v114 != v115);
            }
          }
        }
        else
        {
          __int16 v119 = 257;
          uint64_t v4 = llvm::CastInst::Create(49, (uint64_t)v18, (uint64_t)a3, v118, 0);
          (*(void (**)(void, llvm::Value *, _WORD *, void, void))(**((void **)this + 66) + 16))(*((void *)this + 66), v4, v117, *((void *)this + 62), *((void *)this + 63));
          uint64_t v19 = *((unsigned int *)this + 114);
          if (v19)
          {
            uint64_t v20 = *((void *)this + 56);
            uint64_t v21 = v20 + 16 * v19;
            do
            {
              llvm::Instruction::setMetadata(v4, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
              v20 += 16;
            }
            while (v20 != v21);
          }
        }
      }
      return v4;
    }
  }
  else if ((CastOpcode - 47) > 1)
  {
    goto LABEL_56;
  }
  unsigned int v24 = *((_DWORD *)a3 + 2);
  uint64_t v25 = *(void *)(**(void **)this + 40);
  if (v24 == 15)
  {
    if ((v24 & 0xFE) == 0x12) {
      unsigned int v24 = *(_DWORD *)(**((void **)a3 + 2) + 8);
    }
    uint64_t v57 = *(void *)(v25 + 504);
    if (v24 < 0x100) {
      goto LABEL_75;
    }
    unsigned int v58 = v24 >> 8;
    unint64_t v59 = *(unsigned int *)(v25 + 512);
    uint64_t v60 = *(void *)(v25 + 504);
    if (v59)
    {
      uint64_t v60 = v57;
      unint64_t v61 = v59;
      do
      {
        unint64_t v62 = v61 >> 1;
        uint64_t v63 = v60 + 16 * (v61 >> 1);
        unsigned int v64 = *(_DWORD *)(v63 + 8);
        uint64_t v65 = v63 + 16;
        v61 += ~(v61 >> 1);
        if (v64 < v58) {
          uint64_t v60 = v65;
        }
        else {
          unint64_t v61 = v62;
        }
      }
      while (v61);
    }
    if (v60 == v57 + 16 * v59 || *(_DWORD *)(v60 + 8) != v58) {
LABEL_75:
    }
      uint64_t v60 = v57;
    uint64_t v27 = *(unsigned int *)(v60 + 12);
  }
  else
  {
    uint64_t v27 = sub_1CB83544C(v25 + 272, (uint64_t)a3);
    if (v26 == 1) {
  }
    }
  uint64_t v28 = *(void *)v4;
  unsigned int v29 = *(_DWORD *)(*(void *)v4 + 8);
  uint64_t v30 = *(void *)(**(void **)this + 40);
  if (v29 == 15)
  {
    if ((v29 & 0xFE) == 0x12) {
      unsigned int v29 = *(_DWORD *)(**(void **)(v28 + 16) + 8);
    }
    uint64_t v66 = *(void *)(v30 + 504);
    if (v29 < 0x100) {
      goto LABEL_88;
    }
    unsigned int v67 = v29 >> 8;
    unint64_t v68 = *(unsigned int *)(v30 + 512);
    uint64_t v69 = *(void *)(v30 + 504);
    if (v68)
    {
      uint64_t v69 = v66;
      unint64_t v70 = v68;
      do
      {
        unint64_t v71 = v70 >> 1;
        uint64_t v72 = v69 + 16 * (v70 >> 1);
        unsigned int v73 = *(_DWORD *)(v72 + 8);
        uint64_t v74 = v72 + 16;
        v70 += ~(v70 >> 1);
        if (v73 < v67) {
          uint64_t v69 = v74;
        }
        else {
          unint64_t v70 = v71;
        }
      }
      while (v70);
    }
    if (v69 == v66 + 16 * v68 || *(_DWORD *)(v69 + 8) != v67) {
LABEL_88:
    }
      uint64_t v69 = v66;
    uint64_t v31 = *(unsigned int *)(v69 + 12);
  }
  else
  {
    uint64_t v31 = sub_1CB83544C(v30 + 272, v28);
    if (v32 == 1)
    {
      uint64_t v111 = v31;
      uint64_t v31 = v111;
    }
  }
  if (v27 == v31)
  {
    unsigned int v33 = *((unsigned __int8 *)v4 + 16);
    if (v33 >= 0x1C && v33 - 66 <= 0xC && v33 - 75 <= 1)
    {
      uint64_t v34 = *(void *)v4;
      unsigned int v35 = *(_DWORD *)(*(void *)v4 + 8);
      uint64_t v36 = *(void *)(**(void **)this + 40);
      if (v35 == 15)
      {
        if ((v35 & 0xFE) == 0x12) {
          unsigned int v35 = *(_DWORD *)(**(void **)(v34 + 16) + 8);
        }
        uint64_t v75 = *(void *)(v36 + 504);
        if (v35 < 0x100) {
          goto LABEL_101;
        }
        unsigned int v76 = v35 >> 8;
        unint64_t v77 = *(unsigned int *)(v36 + 512);
        uint64_t v78 = *(void *)(v36 + 504);
        if (v77)
        {
          uint64_t v78 = v75;
          unint64_t v79 = v77;
          do
          {
            unint64_t v80 = v79 >> 1;
            uint64_t v81 = v78 + 16 * (v79 >> 1);
            unsigned int v82 = *(_DWORD *)(v81 + 8);
            uint64_t v83 = v81 + 16;
            v79 += ~(v79 >> 1);
            if (v82 < v76) {
              uint64_t v78 = v83;
            }
            else {
              unint64_t v79 = v80;
            }
          }
          while (v79);
        }
        if (v78 == v75 + 16 * v77 || *(_DWORD *)(v78 + 8) != v76) {
LABEL_101:
        }
          uint64_t v78 = v75;
        uint64_t v38 = *(unsigned int *)(v78 + 12);
      }
      else
      {
        uint64_t v38 = sub_1CB83544C(v36 + 272, v34);
        if (v37 == 1) {
      }
        }
      uint64_t v39 = **((void **)v4 - 4);
      unsigned int v40 = *(_DWORD *)(v39 + 8);
      uint64_t v41 = *(void *)(**(void **)this + 40);
      if (v40 == 15)
      {
        if ((v40 & 0xFE) == 0x12) {
          unsigned int v40 = *(_DWORD *)(**(void **)(v39 + 16) + 8);
        }
        uint64_t v84 = *(void *)(v41 + 504);
        if (v40 < 0x100) {
          goto LABEL_114;
        }
        unsigned int v85 = v40 >> 8;
        unint64_t v86 = *(unsigned int *)(v41 + 512);
        uint64_t v87 = *(void *)(v41 + 504);
        if (v86)
        {
          uint64_t v87 = v84;
          unint64_t v88 = v86;
          do
          {
            unint64_t v89 = v88 >> 1;
            uint64_t v90 = v87 + 16 * (v88 >> 1);
            unsigned int v91 = *(_DWORD *)(v90 + 8);
            uint64_t v92 = v90 + 16;
            v88 += ~(v88 >> 1);
            if (v91 < v85) {
              uint64_t v87 = v92;
            }
            else {
              unint64_t v88 = v89;
            }
          }
          while (v88);
        }
        if (v87 == v84 + 16 * v86 || *(_DWORD *)(v87 + 8) != v85) {
LABEL_114:
        }
          uint64_t v87 = v84;
        uint64_t v42 = *(unsigned int *)(v87 + 12);
      }
      else
      {
        uint64_t v42 = sub_1CB83544C(v41 + 272, v39);
        if (v43 == 1)
        {
          uint64_t v112 = v42;
          uint64_t v42 = v112;
        }
      }
      if (v38 == v42) {
        return (llvm::ConstantExpr *)*((void *)v4 - 4);
      }
      unsigned int v33 = *((unsigned __int8 *)v4 + 16);
    }
    if (v33 == 5 && *((unsigned __int16 *)v4 + 9) - 47 <= 1)
    {
      uint64_t v46 = *(void *)v4;
      unsigned int v47 = *(_DWORD *)(*(void *)v4 + 8);
      uint64_t v48 = *(void *)(**(void **)this + 40);
      if (v47 == 15)
      {
        if ((v47 & 0xFE) == 0x12) {
          unsigned int v47 = *(_DWORD *)(**(void **)(v46 + 16) + 8);
        }
        uint64_t v93 = *(void *)(v48 + 504);
        if (v47 < 0x100) {
          goto LABEL_127;
        }
        unsigned int v94 = v47 >> 8;
        unint64_t v95 = *(unsigned int *)(v48 + 512);
        uint64_t v96 = *(void *)(v48 + 504);
        if (v95)
        {
          uint64_t v96 = v93;
          unint64_t v97 = v95;
          do
          {
            unint64_t v98 = v97 >> 1;
            uint64_t v99 = v96 + 16 * (v97 >> 1);
            unsigned int v100 = *(_DWORD *)(v99 + 8);
            uint64_t v101 = v99 + 16;
            v97 += ~(v97 >> 1);
            if (v100 < v94) {
              uint64_t v96 = v101;
            }
            else {
              unint64_t v97 = v98;
            }
          }
          while (v97);
        }
        if (v96 == v93 + 16 * v95 || *(_DWORD *)(v96 + 8) != v94) {
LABEL_127:
        }
          uint64_t v96 = v93;
        uint64_t v50 = *(unsigned int *)(v96 + 12);
      }
      else
      {
        uint64_t v50 = sub_1CB83544C(v48 + 272, v46);
        if (v49 == 1) {
      }
        }
      uint64_t v51 = **((void **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      unsigned int v52 = *(_DWORD *)(v51 + 8);
      uint64_t v53 = *(void *)(**(void **)this + 40);
      if (v52 == 15)
      {
        if ((v52 & 0xFE) == 0x12) {
          unsigned int v52 = *(_DWORD *)(**(void **)(v51 + 16) + 8);
        }
        uint64_t v102 = *(void *)(v53 + 504);
        if (v52 < 0x100) {
          goto LABEL_140;
        }
        unsigned int v103 = v52 >> 8;
        unint64_t v104 = *(unsigned int *)(v53 + 512);
        uint64_t v105 = *(void *)(v53 + 504);
        if (v104)
        {
          uint64_t v105 = v102;
          unint64_t v106 = v104;
          do
          {
            unint64_t v107 = v106 >> 1;
            uint64_t v108 = v105 + 16 * (v106 >> 1);
            unsigned int v109 = *(_DWORD *)(v108 + 8);
            uint64_t v110 = v108 + 16;
            v106 += ~(v106 >> 1);
            if (v109 < v103) {
              uint64_t v105 = v110;
            }
            else {
              unint64_t v106 = v107;
            }
          }
          while (v106);
        }
        if (v105 == v102 + 16 * v104 || *(_DWORD *)(v105 + 8) != v103) {
LABEL_140:
        }
          uint64_t v105 = v102;
        uint64_t v54 = *(unsigned int *)(v105 + 12);
      }
      else
      {
        uint64_t v54 = sub_1CB83544C(v53 + 272, v51);
        if (v55 == 1)
        {
          uint64_t v116 = v54;
          uint64_t v54 = v116;
        }
      }
      if (v50 == v54) {
        return (llvm::ConstantExpr *)*((void *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      }
    }
  }
LABEL_56:
  if (v4 && *((unsigned __int8 *)v4 + 16) <= 0x14u)
  {
    return llvm::ConstantExpr::getCast(v7, v4, (llvm::Constant ***)a3, 0);
  }
  else
  {
    uint64_t OptimalInsertionPointForCastOf = llvm::SCEVExpander::GetOptimalInsertionPointForCastOf(this, v4);
    return llvm::SCEVExpander::ReuseOrCreateCast((uint64_t)this, v4, (uint64_t)a3, (uint64_t)v7, OptimalInsertionPointForCastOf);
  }
}

const llvm::detail::DoubleAPFloat *llvm::SCEVExpander::InsertBinop(void *a1, llvm *this, unsigned __int8 *a3, llvm::Constant *a4, char a5, int a6)
{
  char v7 = a5;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a3 && a3[16] <= 0x14u && a4 && *((unsigned __int8 *)a4 + 16) <= 0x14u)
  {
    uint64_t v12 = llvm::ConstantFoldBinaryInstruction(this, (llvm::Constant *)a3, a4, a4);
    if (!v12)
    {
      unsigned int v13 = *(void ***)a3;
      if (*(void *)a3)
      {
        v72[0] = a3;
        v72[1] = a4;
        uint64_t v14 = **v13 + 1512;
        LODWORD(v68[0]) = this;
        v68[1] = (uint64_t)v72;
        v68[2] = 2;
        long long v69 = 0u;
        long long v70 = 0u;
        uint64_t v71 = 0;
        return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v14, (uint64_t)v13, (unsigned __int8 *)v68);
      }
      else
      {
        return 0;
      }
    }
    return v12;
  }
  uint64_t v15 = (void *)a1[63];
  uint64_t v16 = *(void **)(a1[62] + 48);
  if (v15 != v16)
  {
    int v64 = a5 & 4;
    int v63 = a5 & 2;
    int v17 = 6;
    while (1)
    {
      uint64_t v15 = (void *)*v15;
      uint64_t v12 = (const llvm::detail::DoubleAPFloat *)(v15 - 3);
      uint64_t v18 = v15 ? (uint64_t)(v15 - 3) : 0;
      BOOL v19 = sub_1CBF63B28(v18);
      unsigned int v20 = *(unsigned __int8 *)(v18 + 16);
      if (v20 - 28 == this)
      {
        int v21 = *(_DWORD *)(v18 + 20);
        uint64_t v22 = (v21 & 0x40000000) != 0 ? *(void *)(v18 - 8) : v18 - 32 * (v21 & 0x7FFFFFF);
        if (*(unsigned __int8 **)v22 == a3 && *(llvm::Constant **)(v22 + 32) == a4)
        {
          HIDWORD(v24) = v20 - 41;
          LODWORD(v24) = v20 - 41;
          unsigned int v23 = v24 >> 1;
          BOOL v25 = v23 > 6;
          int v26 = (1 << v23) & 0x47;
          BOOL v27 = v25 || v26 == 0;
          if (v27
            || ((v28 = *(unsigned __int8 *)(v18 + 17), v27 = v64 == ((v28 >> 2) & 1), int v29 = (v28 >> 1) & 1, v27)
              ? (BOOL v30 = v63 == v29)
              : (BOOL v30 = 0),
                v30))
          {
            BOOL v25 = v20 > 0x37;
            uint64_t v31 = (1 << v20) & 0xC1800000000000;
            BOOL v32 = v25 || v31 == 0;
            if (v32 || (*(unsigned char *)(v18 + 17) & 2) == 0) {
              return v12;
            }
          }
        }
      }
      if (v15 != v16)
      {
        int v33 = v17 + v19;
        int v17 = v17 + v19 - 1;
        if (v33 != 1) {
          continue;
        }
      }
      uint64_t v16 = (void *)a1[63];
      char v7 = a5;
      break;
    }
  }
  uint64_t v34 = v16 - 3;
  if (!v16) {
    uint64_t v34 = 0;
  }
  unsigned int v35 = (unsigned __int8 *)v34[6];
  unsigned int v67 = v35;
  if (v35) {
    llvm::MetadataTracking::track((uint64_t)&v67, v35, 2);
  }
  sub_1CD1F1320(v68, (uint64_t)(a1 + 56), (uint64_t)a1);
  if (a6)
  {
    uint64_t v36 = *(uint64_t **)(*a1 + 40);
    int v37 = *((_DWORD *)v36 + 4);
    if (v37)
    {
      uint64_t v38 = a1[62];
      uint64_t v39 = *v36;
      unsigned int v40 = v37 - 1;
      uint64_t v41 = ((v38 >> 4) ^ (v38 >> 9)) & (v37 - 1);
      uint64_t v42 = *(void *)(v39 + 16 * v41);
      if (v38 == v42)
      {
LABEL_46:
        uint64_t v45 = v39 + 16 * v41;
        uint64_t v46 = *(void *)(v45 + 8);
        if (v46
          && llvm::Loop::isLoopInvariant(*(void *)(v45 + 8), (uint64_t)a3)
          && llvm::Loop::isLoopInvariant(v46, (uint64_t)a4))
        {
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
        }
      }
      else
      {
        int v43 = 1;
        while (v42 != -4096)
        {
          int v44 = v41 + v43++;
          uint64_t v41 = v44 & v40;
          uint64_t v42 = *(void *)(v39 + 16 * v41);
          if (v38 == v42) {
            goto LABEL_46;
          }
        }
      }
    }
  }
  __int16 v73 = 257;
  uint64_t v12 = sub_1CB844E98((uint64_t)(a1 + 56), (uint64_t)this, (uint64_t)a3, (uint64_t)a4, (uint64_t)v72, 0);
  uint64_t v66 = v67;
  if (v67) {
    llvm::MetadataTracking::track((uint64_t)&v66, v67, 2);
  }
  unsigned int v47 = (unsigned __int8 **)((char *)v12 + 48);
  if (&v66 != (unsigned __int8 **)((char *)v12 + 48))
  {
    uint64_t v48 = *v47;
    if (!*v47) {
      goto LABEL_54;
    }
    int v54 = *v48;
    if ((v54 - 4) > 0x1E)
    {
      if ((v54 - 3) >= 0xFFFFFFFE) {
        uint64_t v57 = *v47;
      }
      else {
        uint64_t v57 = 0;
      }
      if ((v54 - 3) < 0xFFFFFFFE)
      {
        if (v54 == 3) {
          *((void *)v48 + 1) = 0;
        }
        goto LABEL_54;
      }
      unint64_t v56 = (unint64_t)(v57 + 8);
    }
    else if ((v48[1] & 0x7F) != 2 && !*((_DWORD *)v48 + 3) {
           || (uint64_t v55 = *((void *)v48 + 2), (v55 & 4) == 0)
    }
           || (unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_54:
      int v49 = v66;
      *unsigned int v47 = v66;
      if (v49)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v66, v49, (uint64_t)v12 + 48);
        uint64_t v66 = 0;
      }
      goto LABEL_56;
    }
    v72[0] = (char *)v12 + 48;
    sub_1CC5FA668(v56 + 16, v72);
    goto LABEL_54;
  }
  if (!v66) {
    goto LABEL_56;
  }
  int v59 = *v66;
  if ((v59 - 4) <= 0x1E)
  {
    if ((v66[1] & 0x7F) != 2 && !*((_DWORD *)v66 + 3)) {
      goto LABEL_56;
    }
    uint64_t v60 = *((void *)v66 + 2);
    if ((v60 & 4) == 0) {
      goto LABEL_56;
    }
    unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
    if (!v61) {
      goto LABEL_56;
    }
LABEL_102:
    v72[0] = &v66;
    sub_1CC5FA668(v61 + 16, v72);
    goto LABEL_56;
  }
  if ((v59 - 3) >= 0xFFFFFFFE) {
    unint64_t v62 = v66;
  }
  else {
    unint64_t v62 = 0;
  }
  if ((v59 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v61 = (unint64_t)(v62 + 8);
    goto LABEL_102;
  }
  if (v59 == 3) {
    *((void *)v66 + 1) = 0;
  }
LABEL_56:
  if ((v7 & 2) != 0) {
    *((unsigned char *)v12 + 17) |= 2u;
  }
  if ((v7 & 4) != 0) {
    *((unsigned char *)v12 + 17) |= 4u;
  }
  sub_1CD1F13EC(v68);
  if (v67)
  {
    int v50 = *v67;
    if ((v50 - 4) > 0x1E)
    {
      if ((v50 - 3) >= 0xFFFFFFFE) {
        unsigned int v52 = v67;
      }
      else {
        unsigned int v52 = 0;
      }
      if ((v50 - 3) < 0xFFFFFFFE)
      {
        if (v50 == 3) {
          *((void *)v67 + 1) = 0;
        }
        return v12;
      }
      unint64_t v53 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v67[1] & 0x7F) != 2 && !*((_DWORD *)v67 + 3)) {
        return v12;
      }
      uint64_t v58 = *((void *)v67 + 2);
      if ((v58 & 4) == 0) {
        return v12;
      }
      unint64_t v53 = v58 & 0xFFFFFFFFFFFFFFF8;
      if (!v53) {
        return v12;
      }
    }
    v68[0] = (uint64_t)&v67;
    sub_1CC5FA668(v53 + 16, v68);
  }
  return v12;
}

uint64_t llvm::SCEVExpander::expandAddToGEP(llvm::SCEVExpander *this, const llvm::SCEV *const *__src, const llvm::SCEV *const *a3, llvm::PointerType *a4, llvm::Type *a5, llvm::Value *inserted)
{
  v158[8] = *MEMORY[0x1E4F143B8];
  int v153 = v155;
  uint64_t v154 = 0x400000000;
  uint64_t v150 = v152;
  uint64_t v151 = 0x800000000;
  size_t v10 = (char *)a3 - (char *)__src;
  if ((unint64_t)((char *)a3 - (char *)__src) >= 0x41) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v11 = 0;
  if (__src != a3)
  {
    memcpy(v150, __src, v10);
    int v11 = v151;
  }
  uint64_t v12 = *(llvm::ScalarEvolution **)this;
  int v156 = v158;
  uint64_t v157 = 0x800000000;
  int v13 = v11 + (v10 >> 3);
  LODWORD(v151) = v13;
  uint64_t v141 = a4;
  uint64_t v142 = inserted;
  if (v13)
  {
    unsigned int v14 = 0;
    uint64_t v15 = v150;
    do
    {
      uint64_t v16 = v14;
      uint64_t v17 = v15[v14];
      if (v17) {
        BOOL v18 = *(unsigned __int16 *)(v17 + 24) == 7;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        do
        {
          BOOL v19 = (size_t *)(v17 + 32);
          uint64_t v20 = **(void **)(v17 + 32);
          if (llvm::SCEV::isZero((llvm::SCEV *)v20)) {
            break;
          }
          unint64_t Constant = llvm::ScalarEvolution::getConstant(v12, a5, 0, 0);
          uint64_t v22 = *(void *)(v17 + 40);
          if (v22 == 2)
          {
            uint64_t v23 = *(void *)(*v19 + 8);
          }
          else
          {
            size_t v140 = *v19;
            uint64_t v146 = v148;
            uint64_t v147 = 0x300000000;
            unint64_t v27 = 8 * v22 - 8;
            if (v27 >= 0x19) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v28 = 0;
            if (v22 != 1)
            {
              memcpy(v146, (const void *)(v140 + 8), 8 * v22 - 8);
              int v28 = v147;
            }
            LODWORD(v147) = v28 + (v27 >> 3);
            uint64_t v23 = sub_1CD478318(v12, (uint64_t)&v146, *(const llvm::Loop **)(v17 + 48), 0);
            if (v146 != v148) {
              free(v146);
            }
          }
          uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(v12, Constant, v23, *(const llvm::Loop **)(v17 + 48), *(_WORD *)(v17 + 28) & 1);
          if (v157 >= (unint64_t)HIDWORD(v157)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v156[v157] = AddRecExpr;
          LODWORD(v157) = v157 + 1;
          if (v20 && *(_WORD *)(v20 + 24) == 4)
          {
            *((void *)v150 + v16) = Constant;
            uint64_t v25 = *(void *)(v20 + 40);
            int v26 = v151;
            if (v25 + (unint64_t)v151 > HIDWORD(v151)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v25)
            {
              memcpy((char *)v150 + 8 * v151, *(const void **)(v20 + 32), 8 * v25);
              int v26 = v151;
            }
            LODWORD(v151) = v26 + v25;
            v13 += *(_DWORD *)(v20 + 40);
          }
          else
          {
            *((void *)v150 + v16) = v20;
          }
          uint64_t v15 = v150;
          uint64_t v17 = *((void *)v150 + v16);
          if (!v17) {
            break;
          }
        }
        while (*(_WORD *)(v17 + 24) == 7);
      }
      unsigned int v14 = v16 + 1;
    }
    while (v16 + 1 != v13);
    int v29 = v156;
    if (v157)
    {
      sub_1CC188254((unsigned int *)&v150, v156, &v156[v157]);
      sub_1CD1E3028((uint64_t)&v150, a5, v12);
      int v29 = v156;
    }
    a4 = v141;
    inserted = v142;
    if (v29 != v158) {
      free(v29);
    }
  }
  uint64_t v30 = *((void *)this + 1);
  unsigned int v31 = *((_DWORD *)a4 + 2);
  if ((v31 & 0xFE) == 0x12) {
    unsigned int v31 = *(_DWORD *)(**((void **)a4 + 2) + 8);
  }
  uint64_t v32 = *(void *)(v30 + 232);
  if (v31 < 0x100) {
    goto LABEL_52;
  }
  unsigned int v33 = v31 >> 8;
  unint64_t v34 = *(unsigned int *)(v30 + 240);
  uint64_t v35 = *(void *)(v30 + 232);
  if (v34)
  {
    uint64_t v35 = v32;
    unint64_t v36 = v34;
    do
    {
      unint64_t v37 = v36 >> 1;
      uint64_t v38 = v35 + 16 * (v36 >> 1);
      unsigned int v39 = *(_DWORD *)(v38 + 8);
      uint64_t v40 = v38 + 16;
      v36 += ~(v36 >> 1);
      if (v39 < v33) {
        uint64_t v35 = v40;
      }
      else {
        unint64_t v36 = v37;
      }
    }
    while (v36);
  }
  if (v35 == v32 + 16 * v34 || *(_DWORD *)(v35 + 8) != v33) {
LABEL_52:
  }
    uint64_t v35 = v32;
  uint64_t v143 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a4, (llvm::LLVMContext *)*(unsigned int *)(v35 + 12));
  if ((*((_DWORD *)a4 + 2) & 0xFE) == 0x12)
  {
    unsigned int v138 = (llvm::Type *)*((unsigned int *)a4 + 8);
    if (*((_DWORD *)a4 + 2) == 19) {
      llvm::ScalableVectorType::get(v143, v138);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v143, v138);
    }
    uint64_t v143 = v139;
    a4 = v141;
  }
  if (!*((void *)a4 + 3)) {
    goto LABEL_170;
  }
  char v43 = 0;
  uint64_t v44 = **((void **)a4 + 2);
  do
  {
    int v156 = v158;
    uint64_t v157 = 0x800000000;
    unsigned int v45 = *(unsigned __int8 *)(v44 + 8);
    if (v45 > 0x11) {
      goto LABEL_80;
    }
    if (((1 << v45) & 0xAC7F) == 0)
    {
      if (((1 << v45) & 0x30000) == 0)
      {
LABEL_80:
        if ((v45 & 0xFE) != 0x12 && v45 != 21) {
          goto LABEL_84;
        }
      }
      if (!llvm::Type::isSizedDerivedType(v44, 0)) {
        goto LABEL_84;
      }
    }
    SizeOfExpr = (llvm::SCEV *)llvm::ScalarEvolution::getSizeOfExpr(*(llvm::ScalarEvolution **)this, (llvm::Type *)v143, (llvm::Type *)v44);
    if (!llvm::SCEV::isZero(SizeOfExpr))
    {
      uint64_t v146 = v148;
      uint64_t v147 = 0x800000000;
      if (v151)
      {
        unsigned int v47 = (llvm::SCEV **)v150;
        uint64_t v48 = 8 * v151;
        while (1)
        {
          int v145 = *v47;
          unsigned int v144 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)this, a5, 0, 0);
          int v49 = sub_1CD1E2978(&v145, (uint64_t *)&v144, SizeOfExpr, *(llvm::ScalarEvolution **)this);
          int v50 = v145;
          if (!v49) {
            break;
          }
          if (v157 >= (unint64_t)HIDWORD(v157)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v156[v157] = (unint64_t)v145;
          LODWORD(v157) = v157 + 1;
          int v50 = v144;
          if (!llvm::SCEV::isZero(v144))
          {
            unint64_t v51 = v147;
            unint64_t v52 = HIDWORD(v147);
            char v43 = 1;
            goto LABEL_67;
          }
          char v43 = 1;
LABEL_69:
          ++v47;
          v48 -= 8;
          if (!v48) {
            goto LABEL_73;
          }
        }
        unint64_t v51 = v147;
        unint64_t v52 = HIDWORD(v147);
LABEL_67:
        if (v51 >= v52) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v146 + v51) = v50;
        LODWORD(v147) = v147 + 1;
        goto LABEL_69;
      }
LABEL_73:
      if (v157)
      {
        sub_1CD6BBEE8((uint64_t)&v150, (uint64_t)&v146);
        sub_1CD1E3028((uint64_t)&v150, a5, *(llvm::ScalarEvolution **)this);
      }
      if (v146 != v148) {
        free(v146);
      }
    }
LABEL_84:
    if (v157)
    {
      AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(*(void *)this, &v156, 0, 0);
      NullValue = (llvm::Value *)llvm::SCEVExpander::expandCodeForImpl(this, AddExpr, a5, 0);
    }
    else
    {
      NullValue = llvm::Constant::getNullValue(a5, (llvm::Type *)v41, v42);
    }
    if (v154 >= (unint64_t)HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v153 + v154) = NullValue;
    LODWORD(v154) = v154 + 1;
    int v56 = *(unsigned __int8 *)(v44 + 8);
    if (v44 && v56 == 16 && *(_DWORD *)(v44 + 12) && v151)
    {
      do
      {
        uint64_t v57 = *(void *)v150;
        if (*(void *)v150) {
          BOOL v58 = *(unsigned __int16 *)(*(void *)v150 + 24) == 0;
        }
        else {
          BOOL v58 = 0;
        }
        if (!v58) {
          goto LABEL_117;
        }
        uint64_t v41 = **(void **)(v57 + 32);
        unsigned int v59 = *(_DWORD *)(v41 + 8);
        uint64_t v60 = *(void *)(**(void **)this + 40);
        if (v59 == 15)
        {
          if ((v59 & 0xFE) == 0x12) {
            unsigned int v59 = *(_DWORD *)(**(void **)(v41 + 16) + 8);
          }
          uint64_t v83 = *(void *)(v60 + 504);
          if (v59 < 0x100) {
            goto LABEL_141;
          }
          unsigned int v84 = v59 >> 8;
          unint64_t v85 = *(unsigned int *)(v60 + 512);
          uint64_t v86 = *(void *)(v60 + 504);
          if (v85)
          {
            uint64_t v86 = v83;
            unint64_t v87 = v85;
            do
            {
              unint64_t v88 = v87 >> 1;
              uint64_t v89 = v86 + 16 * (v87 >> 1);
              unsigned int v90 = *(_DWORD *)(v89 + 8);
              uint64_t v91 = v89 + 16;
              v87 += ~(v87 >> 1);
              if (v90 < v84) {
                uint64_t v86 = v91;
              }
              else {
                unint64_t v87 = v88;
              }
            }
            while (v87);
          }
          if (v86 == v83 + 16 * v85 || *(_DWORD *)(v86 + 8) != v84) {
LABEL_141:
          }
            uint64_t v86 = v83;
          unint64_t v61 = *(unsigned int *)(v86 + 12);
        }
        else
        {
          unint64_t v61 = sub_1CB83544C(v60 + 272, v41);
          if (v41 == 1) {
        }
          }
        if (v61 > 0x40) {
          goto LABEL_117;
        }
        StructLayout = llvm::DataLayout::getStructLayout(*((llvm::DataLayout **)this + 1), (llvm::StructType *)v44);
        uint64_t v63 = *(void *)(v57 + 32);
        int v64 = (void *)(v63 + 24);
        if (*(_DWORD *)(v63 + 32) >= 0x41u) {
          int v64 = (void *)*v64;
        }
        uint64_t v65 = (void *)*v64;
        if (*v64 < *(void *)StructLayout)
        {
          uint64_t v66 = (char *)StructLayout + 16;
          unsigned int v67 = (char *)StructLayout + 16;
          unint64_t v68 = *((_DWORD *)StructLayout + 3) & 0x7FFFFFFF;
          if (v68)
          {
            unsigned int v67 = (char *)StructLayout + 16;
            do
            {
              unint64_t v69 = v68 >> 1;
              long long v70 = &v67[8 * (v68 >> 1)];
              unint64_t v72 = *(void *)v70;
              uint64_t v71 = v70 + 8;
              v68 += ~(v68 >> 1);
              if (v72 > (unint64_t)v65) {
                unint64_t v68 = v69;
              }
              else {
                unsigned int v67 = v71;
              }
            }
            while (v68);
          }
          uint64_t v73 = **(void **)a5;
          uint64_t v74 = ((unint64_t)(v67 - v66 - 8) >> 3);
          uint64_t v75 = *(llvm::ConstantInt **)(v73 + 1960);
          unsigned int v76 = *(_DWORD *)(v73 + 1968);
          LODWORD(v147) = v76 >> 8;
          if (v76 >> 8 > 0x40) {
            operator new[]();
          }
          if (v76 <= 0xFF) {
            unint64_t v77 = 0;
          }
          else {
            unint64_t v77 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v76) + 63);
          }
          uint64_t v146 = (void *)(v77 & v74);
          uint64_t v78 = llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v146, v42);
          if (v147 >= 0x41 && v146) {
            MEMORY[0x1D25D9CB0](v146, 0x1000C8000313F17);
          }
          if (v154 >= (unint64_t)HIDWORD(v154)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v153 + v154) = v78;
          LODWORD(v154) = v154 + 1;
          uint64_t v44 = *(void *)(*(void *)(v44 + 16) + 8 * v74);
          unint64_t v79 = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)this, a5, (unint64_t)v65 - *(void *)&v66[8 * v74], 0);
          *(void *)uint64_t v150 = v79;
          char v43 = 1;
        }
        else
        {
LABEL_117:
          uint64_t v44 = **(void **)(v44 + 16);
          unint64_t v80 = llvm::Constant::getNullValue((llvm::Constant *)(**(void **)a5 + 1960), (llvm::Type *)v41, v42);
          if (v154 >= (unint64_t)HIDWORD(v154)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v153 + v154) = v80;
          LODWORD(v154) = v154 + 1;
        }
        int v56 = *(unsigned __int8 *)(v44 + 8);
        if (v44) {
          BOOL v81 = v56 == 16;
        }
        else {
          BOOL v81 = 0;
        }
        if (!v81) {
          break;
        }
      }
      while (*(_DWORD *)(v44 + 12) && v151 != 0);
    }
    if (v56 == 17) {
      uint64_t v44 = *(void *)(v44 + 24);
    }
    if (v156 != v158) {
      free(v156);
    }
  }
  while (v56 == 17);
  inserted = v142;
  if (v43)
  {
    sub_1CD1F1320(&v156, (uint64_t)this + 448, (uint64_t)this);
    uint64_t v92 = *(uint64_t **)(*(void *)this + 40);
    int v93 = *((_DWORD *)v92 + 4);
    if (v93)
    {
      uint64_t v94 = *((void *)this + 62);
      uint64_t v95 = *v92;
      unsigned int v96 = v93 - 1;
      uint64_t v97 = ((v94 >> 4) ^ (v94 >> 9)) & (v93 - 1);
      uint64_t v98 = *(void *)(v95 + 16 * v97);
      if (v94 == v98)
      {
LABEL_161:
        uint64_t v101 = v95 + 16 * v97;
        uint64_t v102 = *(void *)(v101 + 8);
        if (v102 && llvm::Loop::isLoopInvariant(*(void *)(v101 + 8), (uint64_t)v142))
        {
          if (!v154) {
LABEL_167:
          }
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
          unsigned int v103 = (uint64_t *)v153;
          uint64_t v104 = 8 * v154;
          while (llvm::Loop::isLoopInvariant(v102, *v103))
          {
            ++v103;
            v104 -= 8;
            if (!v104) {
              goto LABEL_167;
            }
          }
        }
      }
      else
      {
        int v99 = 1;
        while (v98 != -4096)
        {
          int v100 = v97 + v99++;
          uint64_t v97 = v100 & v96;
          uint64_t v98 = *(void *)(v95 + 16 * v97);
          if (v94 == v98) {
            goto LABEL_161;
          }
        }
      }
    }
    if (*(llvm::Type **)v142 != v141) {
      inserted = llvm::SCEVExpander::InsertNoopCastOfTo(this, v142, v141);
    }
    uint64_t v131 = **((void **)v141 + 2);
    uint64_t v146 = "scevgep";
    __int16 v149 = 259;
    int v132 = (llvm::Value *)sub_1CC27CEC0((uint64_t *)this + 56, v131, (uint64_t *)inserted, (uint64_t *)v153, v154, (uint64_t)&v146);
    unint64_t Unknown = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)this, v132);
    if (v151 >= HIDWORD(v151)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v150 + v151) = Unknown;
    LODWORD(v151) = v151 + 1;
    sub_1CD1F13EC((uint64_t *)&v156);
    int v134 = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(*(void *)this, (unint64_t **)&v150, 0, 0);
    uint64_t ElementPtr = llvm::SCEVExpander::expand(this, v134);
    goto LABEL_207;
  }
  if (*((void *)v141 + 3))
  {
    uint64_t v105 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(**(void **)a5 + 1912), (llvm::Type *)(*((_DWORD *)v141 + 2) >> 8));
    inserted = llvm::SCEVExpander::InsertNoopCastOfTo(this, v142, v105);
  }
LABEL_170:
  unint64_t v106 = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(*(void *)this, (unint64_t **)&v150, 0, 0);
  uint64_t v107 = llvm::SCEVExpander::expandCodeForImpl(this, v106, a5, 0);
  uint64_t v108 = (const char *)v107;
  if (*((unsigned __int8 *)inserted + 16) > 0x14u
    || !inserted
    || (*(unsigned __int8 *)(v107 + 16) <= 0x14u ? (BOOL v109 = v107 == 0) : (BOOL v109 = 1), v109))
  {
    uint64_t v110 = (void *)*((void *)this + 63);
    uint64_t v111 = *(void **)(*((void *)this + 62) + 48);
    if (v110 == v111)
    {
LABEL_193:
      sub_1CD1F1320(&v156, (uint64_t)this + 448, (uint64_t)this);
      __int16 v119 = *(uint64_t **)(*(void *)this + 40);
      int v120 = *((_DWORD *)v119 + 4);
      if (v120)
      {
        uint64_t v121 = *((void *)this + 62);
        uint64_t v122 = *v119;
        unsigned int v123 = v120 - 1;
        uint64_t v124 = ((v121 >> 4) ^ (v121 >> 9)) & (v120 - 1);
        uint64_t v125 = *(void *)(v122 + 16 * v124);
        if (v121 == v125)
        {
LABEL_198:
          uint64_t v128 = v122 + 16 * v124;
          uint64_t v129 = *(void *)(v128 + 8);
          if (v129
            && llvm::Loop::isLoopInvariant(*(void *)(v128 + 8), (uint64_t)inserted)
            && llvm::Loop::isLoopInvariant(v129, (uint64_t)v108))
          {
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
          }
        }
        else
        {
          int v126 = 1;
          while (v125 != -4096)
          {
            int v127 = v124 + v126++;
            uint64_t v124 = v127 & v123;
            uint64_t v125 = *(void *)(v122 + 16 * v124);
            if (v121 == v125) {
              goto LABEL_198;
            }
          }
        }
      }
      uint64_t v130 = **((void **)this + 64) + 1912;
      uint64_t v146 = "uglygep";
      __int16 v149 = 259;
      uint64_t ElementPtr = (uint64_t)sub_1CB930F7C((uint64_t *)this + 56, v130, (uint64_t *)inserted, v108, (uint64_t)&v146);
      sub_1CD1F13EC((uint64_t *)&v156);
    }
    else
    {
      int v112 = 6;
      while (1)
      {
        uint64_t v110 = (void *)*v110;
        uint64_t ElementPtr = (uint64_t)(v110 - 3);
        uint64_t v113 = v110 ? (uint64_t)(v110 - 3) : 0;
        BOOL v114 = sub_1CBF63B28(v113);
        if (*(unsigned char *)(v113 + 16) == 62)
        {
          int v115 = *(_DWORD *)(v113 + 20);
          uint64_t v116 = (v115 & 0x40000000) != 0 ? *(void *)(v113 - 8) : v113 - 32 * (v115 & 0x7FFFFFF);
          if (*(llvm::Value **)v116 == inserted && *(const char **)(v116 + 32) == v108)
          {
            uint64_t v117 = v113 + 64;
            if (!v110) {
              uint64_t v117 = 24;
            }
            if (*(void *)v117 == **(void **)a5 + 1912) {
              break;
            }
          }
        }
        if (v110 != v111)
        {
          int v118 = v112 + v114;
          int v112 = v112 + v114 - 1;
          if (v118 != 1) {
            continue;
          }
        }
        goto LABEL_193;
      }
    }
  }
  else
  {
    uint64_t v135 = **(void **)a5 + 1912;
    int v156 = (unint64_t *)v108;
    uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v135, (uint64_t *)inserted, (uint64_t)&v156, 1, 0, 0, 0);
  }
LABEL_207:
  if (v150 != v152) {
    free(v150);
  }
  if (v153 != v155) {
    free(v153);
  }
  return ElementPtr;
}

uint64_t sub_1CD1E2978(llvm::SCEV **a1, uint64_t *a2, llvm::SCEV *a3, llvm::ScalarEvolution *a4)
{
  uint64_t v5 = a3;
  v60[4] = *MEMORY[0x1E4F143B8];
  if (llvm::SCEV::isOne(a3)) {
    return 1;
  }
  uint64_t v9 = *a1;
  if (*a1 != v5)
  {
    if (v9 && !*((_WORD *)v9 + 12))
    {
      if (llvm::SCEV::isZero(*a1)) {
        return 1;
      }
      if (v5 && !*((_WORD *)v5 + 12))
      {
        size_t v10 = ***(llvm::ConstantInt ****)a4;
        llvm::APInt::sdiv((llvm::APInt *)(*((void *)v9 + 4) + 24), (const llvm::APInt *)(*((void *)v5 + 4) + 24), (uint64_t)&v58);
        uint64_t v12 = (llvm::ConstantInt *)llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v58, v11);
        if (v59 >= 0x41 && v58) {
          MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
        }
        uint64_t v13 = *((unsigned int *)v12 + 8);
        if (v13 > 0x40)
        {
          int v21 = 0;
          int64_t v22 = (unint64_t)(v13 + 63) >> 6;
          do
          {
            BOOL v23 = v22-- < 1;
            if (v23) {
              break;
            }
            unint64_t v24 = *(void *)(*((void *)v12 + 3) + 8 * v22);
            v21 += __clz(v24);
          }
          while (!v24);
          int v25 = v13 | 0xFFFFFFC0;
          if ((v13 & 0x3F) == 0) {
            int v25 = 0;
          }
          if (v21 + v25 != v13) {
            goto LABEL_14;
          }
        }
        else if (*((void *)v12 + 3))
        {
LABEL_14:
          *a1 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(a4, v12);
          uint64_t v14 = *a2;
          llvm::APInt::srem((llvm::APInt *)(*((void *)v9 + 4) + 24), (const llvm::APInt *)(*((void *)v5 + 4) + 24), (uint64_t)&v56);
          uint64_t v16 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a4, (llvm::LLVMContext *)&v56, v15);
          unint64_t Constant = llvm::ScalarEvolution::getConstant(a4, v16);
          BOOL v58 = v60;
          v60[0] = v14;
          v60[1] = Constant;
          uint64_t v59 = 0x200000002;
          uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a4, (unint64_t **)&v58, 0, 0);
          if (v58 != v60) {
            free(v58);
          }
          *a2 = AddExpr;
          if (v57 >= 0x41 && v56) {
            MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
          }
          return 1;
        }
      }
    }
    int v26 = *a1;
    if (*a1) {
      BOOL v27 = *((unsigned __int16 *)*a1 + 12) == 5;
    }
    else {
      BOOL v27 = 0;
    }
    if (!v27 || !v5 || *((_WORD *)v5 + 12)) {
      goto LABEL_37;
    }
    uint64_t v34 = **((void **)v26 + 4);
    if (!v34 || *(_WORD *)(v34 + 24) != 0) {
      goto LABEL_37;
    }
    llvm::APInt::srem((llvm::APInt *)(*(void *)(v34 + 32) + 24), (const llvm::APInt *)(*((void *)v5 + 4) + 24), (uint64_t)&v58);
    int v36 = v59;
    if (v59 > 0x40)
    {
      int v40 = 0;
      int64_t v41 = ((unint64_t)v59 + 63) >> 6;
      do
      {
        BOOL v23 = v41-- < 1;
        if (v23) {
          break;
        }
        unint64_t v42 = *((void *)v58 + v41);
        v40 += __clz(v42);
      }
      while (!v42);
      int v43 = v59 | 0xFFFFFFC0;
      if ((v59 & 0x3F) == 0) {
        int v43 = 0;
      }
      int v44 = v40 + v43;
      if (v58) {
        MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
      }
      if (v44 == v36) {
        goto LABEL_80;
      }
    }
    else if (!v58)
    {
LABEL_80:
      uint64_t v46 = (const void *)*((void *)v26 + 4);
      unint64_t v45 = *((void *)v26 + 5);
      BOOL v58 = v60;
      uint64_t v59 = 0x400000000;
      if (v45 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v45)
      {
        memcpy(v60, v46, 8 * v45);
        int v47 = v59;
      }
      else
      {
        int v47 = 0;
      }
      LODWORD(v59) = v47 + v45;
      llvm::APInt::sdiv((llvm::APInt *)(*(void *)(v34 + 32) + 24), (const llvm::APInt *)(*((void *)v5 + 4) + 24), (uint64_t)&v56);
      int v49 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a4, (llvm::LLVMContext *)&v56, v48);
      unint64_t v50 = llvm::ScalarEvolution::getConstant(a4, v49);
      *(void *)BOOL v58 = v50;
      if (v57 >= 0x41 && v56) {
        MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
      }
      *a1 = (llvm::SCEV *)llvm::ScalarEvolution::getMulExpr((uint64_t)a4, (uint64_t)&v58, 0, 0);
      if (v58 != v60) {
        free(v58);
      }
      return 1;
    }
LABEL_37:
    int v28 = *a1;
    if (*a1) {
      BOOL v29 = *((unsigned __int16 *)*a1 + 12) == 7;
    }
    else {
      BOOL v29 = 0;
    }
    int v30 = v29;
    if (v29)
    {
      uint64_t v31 = *((void *)v28 + 5);
      if (v31 == 2)
      {
        uint64_t v32 = *(void *)(*((void *)v28 + 4) + 8);
      }
      else
      {
        uint64_t v51 = *((void *)v28 + 4);
        BOOL v58 = v60;
        uint64_t v59 = 0x300000000;
        uint64_t v52 = v31;
        size_t v53 = 8 * v31 - 8;
        if (v53 >= 0x19) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v54 = 0;
        if (v52 != 1)
        {
          memcpy(v58, (const void *)(v51 + 8), v53);
          int v54 = v59;
        }
        LODWORD(v59) = v54 + (v53 >> 3);
        uint64_t v32 = sub_1CD478318(a4, (uint64_t)&v58, *((const llvm::Loop **)v28 + 6), 0);
        if (v58 != v60) {
          free(v58);
        }
      }
      BOOL v58 = (void *)v32;
      while (2)
      {
        switch(*(_WORD *)(v32 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v38 = (llvm::Type **)(v32 + 40);
            goto LABEL_65;
          case 4:
            uint64_t v38 = (llvm::Type **)(v32 + 48);
            goto LABEL_65;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v33 = *(uint64_t **)(v32 + 32);
            goto LABEL_50;
          case 6:
            unsigned int v33 = (uint64_t *)(v32 + 40);
LABEL_50:
            uint64_t v32 = *v33;
            continue;
          case 0xE:
            uint64_t v38 = *(llvm::Type ***)(v32 - 8);
            goto LABEL_65;
          default:
            uint64_t v38 = *(llvm::Type ***)(v32 + 32);
LABEL_65:
            int v56 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(a4, *v38, 0, 0);
            int v37 = 0;
            if (sub_1CD1E2978(&v58, &v56, v5, a4))
            {
              if (llvm::SCEV::isZero(v56))
              {
                uint64_t v55 = **((void **)v28 + 4);
                int v37 = sub_1CD1E2978(&v55, a2, v5, a4);
                if (v37) {
                  *a1 = (llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(a4, v55, (uint64_t)v58, *((const llvm::Loop **)v28 + 6), *((_WORD *)v28 + 14) & 1);
                }
              }
              else
              {
                int v37 = 0;
              }
            }
            break;
        }
        break;
      }
    }
    else
    {
      int v37 = 1;
    }
    return v30 & v37;
  }
  while (2)
  {
    switch(*((_WORD *)v5 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v20 = (llvm::Type **)((char *)v5 + 40);
        goto LABEL_26;
      case 4:
        uint64_t v20 = (llvm::Type **)((char *)v5 + 48);
        goto LABEL_26;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        BOOL v19 = (llvm::SCEV **)*((void *)v5 + 4);
        goto LABEL_20;
      case 6:
        BOOL v19 = (llvm::SCEV **)((char *)v5 + 40);
LABEL_20:
        uint64_t v5 = *v19;
        continue;
      case 0xE:
        uint64_t v20 = (llvm::Type **)*((void *)v5 - 1);
        goto LABEL_26;
      default:
        uint64_t v20 = (llvm::Type **)*((void *)v5 + 4);
LABEL_26:
        uint64_t v8 = 1;
        *a1 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(a4, *v20, 1uLL, 0);
        break;
    }
    return v8;
  }
}

void sub_1CD1E3028(uint64_t a1, llvm::Type *a2, llvm::ScalarEvolution *a3)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  char v7 = *(unsigned char **)a1;
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)&v7[8 * v6 - 8];
    while (*(_WORD *)(*(void *)v9 + 24) == 7)
    {
      ++v8;
      v9 -= 8;
      if (v6 == v8)
      {
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        break;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    LODWORD(v8) = 0;
  }
  BOOL v19 = v21;
  uint64_t v20 = 0x800000000;
  sub_1CC188254((unsigned int *)&v19, v7, &v7[8 * v6 + -8 * v8]);
  size_t v10 = (unsigned char *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 8));
  uint64_t v16 = v18;
  uint64_t v17 = 0x800000000;
  sub_1CC188254((unsigned int *)&v16, &v10[-8 * v8], v10);
  if (v20) {
    unint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a3, (unint64_t **)&v19, 0, 0);
  }
  else {
    unint64_t AddExpr = llvm::ScalarEvolution::getConstant(a3, a2, 0, 0);
  }
  unint64_t v12 = AddExpr;
  *(_DWORD *)(a1 + 8) = 0;
  if (AddExpr && *(_WORD *)(AddExpr + 24) == 4)
  {
    unint64_t v13 = *(void *)(AddExpr + 40);
    if (v13 > *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v13)
    {
      memcpy(*(void **)a1, *(const void **)(AddExpr + 32), 8 * v13);
      int v15 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      int v15 = 0;
    }
    int v14 = v15 + v13;
  }
  else
  {
    if (llvm::SCEV::isZero((llvm::SCEV *)AddExpr)) {
      goto LABEL_21;
    }
    if (!*(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    **(void **)a1 = v12;
    int v14 = *(_DWORD *)(a1 + 8) + 1;
  }
  *(_DWORD *)(a1 + 8) = v14;
LABEL_21:
  sub_1CC188254((unsigned int *)a1, v16, (unsigned char *)v16 + 8 * v17);
  if (v16 != v18) {
    free(v16);
  }
  if (v19 != v21) {
    free(v19);
  }
}

llvm::ConstantExpr *llvm::SCEVExpander::expandCodeForImpl(llvm::SCEVExpander *this, llvm::Instruction **a2, llvm::Type *a3)
{
  uint64_t v6 = llvm::SCEVExpander::expand(this, a2);
  char v7 = (unsigned __int8 *)v6;
  if (*((unsigned char *)this + 24))
  {
    if (*((unsigned __int8 *)v6 + 16) >= 0x1Cu && v6 != 0)
    {
      uint64_t v16 = *(llvm::PointerType **)v6;
      if (*(unsigned char *)(*(void *)v7 + 8) == 13)
      {
        unint64_t v17 = llvm::PointerType::get(v16, 0);
        v24[0] = "tmp.lcssa.user";
        __int16 v25 = 259;
        if (*(void *)v7 == v17) {
          goto LABEL_23;
        }
        if (v7[16] > 0x14u)
        {
          __int16 v27 = 257;
          char v7 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v7, v17, v26, 0);
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)this + 66) + 16))(*((void *)this + 66), v7, v24, *((void *)this + 62), *((void *)this + 63));
          uint64_t v18 = *((unsigned int *)this + 114);
          if (v18)
          {
            uint64_t v22 = *((void *)this + 56);
            uint64_t v23 = v22 + 16 * v18;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v22, *(llvm::MDNode **)(v22 + 8));
              v22 += 16;
            }
            while (v22 != v23);
          }
LABEL_23:
          llvm::SCEVExpander::fixupLCSSAFormFor(this, (llvm::Instruction *)v7, 0);
          v24[0] = v7;
          v26[0] = 0;
          if (sub_1CCE12E8C((uint64_t *)this + 7, v24, v26))
          {
            *(void *)v26[0] = -8192;
            *((int32x2_t *)this + 8) = vadd_s32(*(int32x2_t *)((char *)this + 64), (int32x2_t)0x1FFFFFFFFLL);
          }
          v24[0] = v7;
          v26[0] = 0;
          if (sub_1CCE12E8C((uint64_t *)this + 10, v24, v26))
          {
            *(void *)v26[0] = -8192;
            *((int32x2_t *)this + 11) = vadd_s32(*(int32x2_t *)((char *)this + 88), (int32x2_t)0x1FFFFFFFFLL);
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        char v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**((void **)this + 65) + 224))(*((void *)this + 65), 48, v7, v17);
        if (v7) {
          BOOL v19 = v7[16] >= 0x1Cu;
        }
        else {
          BOOL v19 = 0;
        }
        if (!v19) {
          goto LABEL_23;
        }
        uint64_t v20 = sub_1CB844E0C((uint64_t *)this + 56, (llvm::Instruction *)v7, (uint64_t)v24);
      }
      else
      {
        uint64_t v21 = **(void **)v16 + 1960;
        v26[0] = "tmp.lcssa.user";
        __int16 v27 = 259;
        uint64_t v20 = sub_1CB84580C((uint64_t)this + 448, 47, (uint64_t)v7, v21, (uint64_t)v26);
      }
      char v7 = (unsigned __int8 *)v20;
      goto LABEL_23;
    }
  }
  uint64_t v9 = *((void *)this + 63);
  if (v9) {
    size_t v10 = (const char *)(v9 - 24);
  }
  else {
    size_t v10 = 0;
  }
  v26[0] = (const char *)a2;
  v26[1] = v10;
  int v11 = sub_1CD1F278C((uint64_t)this + 32, (uint64_t *)v26);
  unint64_t v12 = (unsigned __int8 *)v11[4];
  if (v12 != v7)
  {
    unint64_t v13 = v11;
    int v14 = (llvm::ValueHandleBase *)(v11 + 2);
    if (v12 && v12 != (unsigned __int8 *)-8192 && v12 != (unsigned __int8 *)-4096) {
      llvm::ValueHandleBase::RemoveFromUseList(v11 + 2);
    }
    void v13[4] = (uint64_t)v7;
    if (v7 != (unsigned __int8 *)-8192 && v7 != (unsigned __int8 *)-4096 && v7) {
      llvm::ValueHandleBase::AddToUseList(v14);
    }
  }
  if (a3) {
    return llvm::SCEVExpander::InsertNoopCastOfTo(this, (llvm::Value *)v7, a3);
  }
  return (llvm::ConstantExpr *)v7;
}

llvm::Instruction *llvm::SCEVExpander::expand(llvm::SCEVExpander *this, llvm::Instruction **a2)
{
  v85[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 63);
  if (v4) {
    uint64_t v5 = (const llvm::Instruction *)(v4 - 24);
  }
  else {
    uint64_t v5 = 0;
  }
  LOBYTE(v75[0]) = 0;
  unint64_t v77 = v75;
  uint64_t v78 = v80;
  uint64_t v79 = 0x800000000;
  BOOL v81 = v85;
  unsigned int v82 = v85;
  uint64_t v83 = 8;
  int v84 = 0;
  sub_1CD1F14AC((uint64_t)&v77, (uint64_t)a2);
  unsigned int v6 = v79;
  while (v6)
  {
    if (*(unsigned char *)v77) {
      break;
    }
    uint64_t v7 = *((void *)v78 + --v6);
    LODWORD(v79) = v6;
    switch(*(_WORD *)(v7 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unint64_t v13 = (uint64_t *)(v7 + 32);
        goto LABEL_17;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v8 = *(void *)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(uint64_t **)(v7 + 32);
          uint64_t v10 = 8 * v8 - 8;
          do
          {
            uint64_t v11 = *v9++;
            sub_1CD1F14AC((uint64_t)&v77, v11);
            if (*(unsigned char *)v77) {
              BOOL v12 = 1;
            }
            else {
              BOOL v12 = v10 == 0;
            }
            v10 -= 8;
          }
          while (!v12);
        }
        goto LABEL_18;
      case 6:
        sub_1CD1F14AC((uint64_t)&v77, *(void *)(v7 + 32));
        unint64_t v13 = (uint64_t *)(v7 + 40);
LABEL_17:
        sub_1CD1F14AC((uint64_t)&v77, *v13);
LABEL_18:
        unsigned int v6 = v79;
        break;
      default:
        break;
    }
  }
  if (v82 != v81) {
    free(v82);
  }
  if (v78 != v80) {
    free(v78);
  }
  if (LOBYTE(v75[0])) {
    goto LABEL_76;
  }
  int v14 = *(uint64_t **)(*(void *)this + 40);
  int v15 = *((_DWORD *)v14 + 4);
  if (v15)
  {
    uint64_t v16 = *((void *)this + 62);
    uint64_t v17 = *v14;
    unsigned int v18 = v15 - 1;
    uint64_t v19 = ((v16 >> 4) ^ (v16 >> 9)) & (v15 - 1);
    uint64_t v20 = *(void *)(v17 + 16 * v19);
    if (v16 == v20)
    {
LABEL_30:
      uint64_t v23 = *(const llvm::Loop **)(v17 + 16 * v19 + 8);
      goto LABEL_32;
    }
    int v21 = 1;
    while (v20 != -4096)
    {
      int v22 = v19 + v21++;
      uint64_t v19 = v22 & v18;
      uint64_t v20 = *(void *)(v17 + 16 * v19);
      if (v16 == v20) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v23 = 0;
LABEL_32:
  if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)this, (const llvm::SCEV *)a2, v23) == 1)
  {
    if (v23) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
    }
  }
  else
  {
    if (!v23
      || llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)this, (const llvm::SCEV *)a2, v23) != 2)
    {
      goto LABEL_157;
    }
    uint64_t v25 = *((void *)this + 44);
    uint64_t v24 = *((void *)this + 45);
    if (v24 == v25)
    {
      uint64_t v26 = *((unsigned int *)this + 93);
      __int16 v27 = (const llvm::Loop **)(v24 + 8 * v26);
      if (v26)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 8 * v26;
        while (*(const llvm::Loop **)(v24 + v28) != v23)
        {
          v28 += 8;
          if (v29 == v28) {
            goto LABEL_55;
          }
        }
        __int16 v27 = (const llvm::Loop **)(v24 + v28);
      }
LABEL_55:
      uint64_t v25 = *((void *)this + 45);
    }
    else
    {
      uint64_t v30 = *((unsigned int *)this + 92);
      int v31 = v30 - 1;
      unsigned int v32 = (v30 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      __int16 v27 = (const llvm::Loop **)(v24 + 8 * v32);
      unsigned int v33 = *v27;
      if (*v27 == (const llvm::Loop *)-1)
      {
        uint64_t v34 = 0;
LABEL_72:
        if (v34) {
          __int16 v27 = v34;
        }
        if (*v27 != v23) {
          __int16 v27 = (const llvm::Loop **)(v24 + 8 * v30);
        }
      }
      else
      {
        uint64_t v34 = 0;
        int v35 = 1;
        while (v33 != v23)
        {
          if (v34) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v33 == (const llvm::Loop *)-2;
          }
          if (v36) {
            uint64_t v34 = v27;
          }
          unsigned int v37 = v32 + v35++;
          unsigned int v32 = v37 & v31;
          __int16 v27 = (const llvm::Loop **)(v24 + 8 * (v37 & v31));
          unsigned int v33 = *v27;
          if (*v27 == (const llvm::Loop *)-1) {
            goto LABEL_72;
          }
        }
      }
    }
    BOOL v12 = v24 == v25;
    uint64_t v38 = 368;
    if (v12) {
      uint64_t v38 = 372;
    }
    if (v27 != (const llvm::Loop **)(v24 + 8 * *(unsigned int *)((char *)this + v38))) {
      goto LABEL_157;
    }
    uint64_t v39 = **((void **)v23 + 4);
    uint64_t v40 = v39 + 40;
    for (uint64_t i = *(void *)(v39 + 48); i != v40; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v42 = i - 24;
      if (!i) {
        uint64_t v42 = 0;
      }
      if (*(unsigned char *)(v42 + 16) != 83)
      {
        unsigned int v43 = *(unsigned __int8 *)(i - 8) - 38;
        BOOL v44 = v43 > 0x38;
        uint64_t v45 = (1 << v43) & 0x100060000000001;
        if (v44 || v45 == 0) {
          uint64_t v40 = i;
        }
        else {
          uint64_t v40 = *(void *)(i + 8);
        }
        break;
      }
    }
    while (1)
    {
      uint64_t v5 = v40 ? (const llvm::Instruction *)(v40 - 24) : 0;
LABEL_157:
      if ((const llvm::Instruction *)((char *)v5 + 24) == *((const llvm::Instruction **)this + 63)
        || (sub_1CCE12E28((uint64_t)this, (uint64_t)v5) & 1) == 0 && !sub_1CBF63B28((uint64_t)v5))
      {
        break;
      }
      uint64_t v40 = *((void *)v5 + 4);
    }
  }
LABEL_76:
  uint64_t v47 = *((void *)this + 4);
  unint64_t v77 = 0;
  if (sub_1CD1F2888(v47, *((_DWORD *)this + 12), (uint64_t)a2, (uint64_t)v5, &v77)) {
    BOOL v48 = v77 == (uint64_t *)(*((void *)this + 4) + 40 * *((unsigned int *)this + 12));
  }
  else {
    BOOL v48 = 1;
  }
  if (!v48) {
    return (llvm::Instruction *)v77[4];
  }
  sub_1CD1F1320(&v77, (uint64_t)this + 448, (uint64_t)this);
  *((void *)this + 62) = *((void *)v5 + 5);
  *((void *)this + 63) = (char *)v5 + 24;
  int v49 = (unsigned __int8 *)*((void *)v5 + 6);
  unsigned int v76 = v49;
  if (v49)
  {
    llvm::MetadataTracking::track((uint64_t)&v76, v49, 2);
    uint64_t v50 = (uint64_t)v76;
  }
  else
  {
    uint64_t v50 = 0;
  }
  sub_1CB8461A4((uint64_t)this + 448, 0, v50);
  if (v76)
  {
    int v56 = *v76;
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        uint64_t v59 = v76;
      }
      else {
        uint64_t v59 = 0;
      }
      if ((v56 - 3) < 0xFFFFFFFE)
      {
        if (v56 == 3) {
          *((void *)v76 + 1) = 0;
        }
        goto LABEL_84;
      }
      unint64_t v58 = (unint64_t)(v59 + 8);
    }
    else
    {
      if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3)) {
        goto LABEL_84;
      }
      uint64_t v57 = *((void *)v76 + 2);
      if ((v57 & 4) == 0) {
        goto LABEL_84;
      }
      unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
      if (!v58) {
        goto LABEL_84;
      }
    }
    v75[0] = (uint64_t)&v76;
    sub_1CC5FA668(v58 + 16, v75);
  }
LABEL_84:
  ValueInExprValueMap = llvm::SCEVExpander::FindValueInExprValueMap((llvm::ScalarEvolution **)this, (const llvm::SCEV *)a2, v5);
  if (!ValueInExprValueMap)
  {
    if (*((_WORD *)a2 + 12))
    {
      switch(*((_WORD *)a2 + 12))
      {
        case 2:
          uint64_t v55 = llvm::SCEVExpander::visitZeroExtendExpr(this, (uint64_t)a2);
          goto LABEL_97;
        case 3:
          uint64_t v55 = llvm::SCEVExpander::visitSignExtendExpr(this, (uint64_t)a2);
          goto LABEL_97;
        case 4:
          uint64_t v55 = llvm::SCEVExpander::visitAddExpr(this, a2, v52);
          goto LABEL_97;
        case 5:
          uint64_t v55 = llvm::SCEVExpander::visitMulExpr(this, (uint64_t)a2);
          goto LABEL_97;
        case 6:
          uint64_t v55 = llvm::SCEVExpander::visitUDivExpr(this, (uint64_t)a2);
          goto LABEL_97;
        case 7:
          uint64_t v55 = llvm::SCEVExpander::visitAddRecExpr(this, (const llvm::SCEVAddRecExpr *)a2);
          goto LABEL_97;
        case 8:
          uint64_t v55 = llvm::SCEVExpander::expandUMaxExpr((uint64_t *)this, (uint64_t)a2);
          goto LABEL_97;
        case 9:
          uint64_t v55 = llvm::SCEVExpander::expandSMaxExpr((uint64_t *)this, (uint64_t)a2);
          goto LABEL_97;
        case 0xA:
          uint64_t v55 = llvm::SCEVExpander::expandUMinExpr((uint64_t *)this, (uint64_t)a2);
          goto LABEL_97;
        case 0xB:
          uint64_t v55 = llvm::SCEVExpander::expandSMinExpr((uint64_t *)this, (uint64_t)a2);
          goto LABEL_97;
        case 0xC:
          uint64_t v55 = llvm::SCEVExpander::visitSequentialUMinExpr(this, (uint64_t)a2);
          goto LABEL_97;
        case 0xD:
          uint64_t v55 = llvm::SCEVExpander::visitPtrToIntExpr(this, (uint64_t)a2);
          goto LABEL_97;
        case 0xE:
          int v54 = *(a2 - 1);
          goto LABEL_118;
        default:
          uint64_t v55 = llvm::SCEVExpander::visitTruncateExpr(this, (uint64_t)a2);
LABEL_97:
          int v54 = v55;
          break;
      }
    }
    else
    {
      int v54 = a2[4];
    }
    goto LABEL_118;
  }
  int v54 = ValueInExprValueMap;
  uint64_t v53 = *((unsigned __int8 *)ValueInExprValueMap + 16);
  if (v53 >= 0x1C)
  {
    if (v53 > 0x3E)
    {
LABEL_90:
      if (!sub_1CB845E74((uint64_t)ValueInExprValueMap) || (*((unsigned char *)v54 + 17) & 0xC) == 0) {
        goto LABEL_118;
      }
LABEL_116:
      if ((sub_1CC16BAFC((uint64_t)v54, 1, 0) & 1) == 0) {
        llvm::Instruction::dropPoisonGeneratingFlags(v54);
      }
      goto LABEL_118;
    }
    if (((1 << v53) & 0x202A0000000000) != 0)
    {
      if ((*((unsigned char *)ValueInExprValueMap + 17) & 6) != 0) {
        goto LABEL_116;
      }
    }
    else if (((1 << v53) & 0xC1800000000000) != 0)
    {
      if ((*((unsigned char *)ValueInExprValueMap + 17) & 2) != 0) {
        goto LABEL_116;
      }
    }
    else
    {
      if (v53 != 62) {
        goto LABEL_90;
      }
      if (*((unsigned __int8 *)ValueInExprValueMap + 17) >= 2u) {
        goto LABEL_116;
      }
    }
  }
LABEL_118:
  v75[0] = (uint64_t)a2;
  v75[1] = (uint64_t)v5;
  uint64_t v60 = sub_1CD1F278C((uint64_t)this + 32, v75);
  unint64_t v61 = (llvm::Instruction *)v60[4];
  if (v61 != v54)
  {
    if (v61 && v61 != (llvm::Instruction *)-8192 && v61 != (llvm::Instruction *)-4096)
    {
      unint64_t v63 = v60[2] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v63 = v60[3];
      int v64 = (unint64_t *)v60[3];
      if (v64)
      {
        *int v64 = *v64 & 7 | v63;
      }
      else
      {
        uint64_t v65 = v60[4];
        uint64_t v66 = ***(int32x2_t ****)v65;
        unint64_t v67 = (unint64_t)v66[303];
        if (v67 <= v63)
        {
          uint64_t v68 = v66[305].u32[0];
          if (v67 + 16 * v68 > v63)
          {
            unsigned int v69 = v68 - 1;
            LODWORD(v70) = v69 & ((v65 >> 4) ^ (v65 >> 9));
            uint64_t v71 = (uint64_t *)(v67 + 16 * v70);
            uint64_t v72 = *v71;
            if (v65 == *v71)
            {
LABEL_136:
              *uint64_t v71 = -8192;
              v66[304] = vadd_s32(v66[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v65 = v60[4];
            }
            else
            {
              int v73 = 1;
              while (v72 != -4096)
              {
                int v74 = v70 + v73++;
                uint64_t v70 = v74 & v69;
                uint64_t v72 = *(void *)(v67 + 16 * v70);
                if (v65 == v72)
                {
                  uint64_t v71 = (uint64_t *)(v67 + 16 * v70);
                  goto LABEL_136;
                }
              }
            }
            *(unsigned char *)(v65 + 17) &= ~1u;
          }
        }
      }
    }
    v60[4] = (uint64_t)v54;
    if (v54 != (llvm::Instruction *)-8192 && v54 != (llvm::Instruction *)-4096 && v54) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v60 + 2));
    }
  }
  sub_1CD1F13EC((uint64_t *)&v77);
  return v54;
}

uint64_t llvm::SCEVExpander::expandAddToGEP(llvm::SCEVExpander *this, const llvm::SCEV *a2, llvm::PointerType *a3, llvm::Type *a4, llvm::Value *a5)
{
  uint64_t v7 = (const llvm::SCEV *)*MEMORY[0x1E4F143B8];
  unsigned int v6 = a2;
  return llvm::SCEVExpander::expandAddToGEP(this, &v6, &v7, a3, a4, a5);
}

const llvm::SCEV *llvm::SCEVExpander::getRelevantLoop(llvm::SCEVExpander *this, const llvm::SCEV **a2)
{
  uint64_t v4 = (char *)this + 328;
  __int16 v27 = a2;
  uint64_t v28 = 0;
  sub_1CD88DF28((uint64_t)&v29, (uint64_t)this + 328, (uint64_t *)&v27, &v28);
  if (!v30) {
    return *(const llvm::SCEV **)(v29 + 8);
  }
  uint64_t v5 = 0;
  RelevantLoop = 0;
  switch(*((_WORD *)a2 + 12))
  {
    case 0:
      return (const llvm::SCEV *)RelevantLoop;
    case 1:
    case 2:
    case 3:
    case 0xD:
      RelevantLoop = (void *)llvm::SCEVExpander::getRelevantLoop(this, a2[4]);
      __int16 v27 = a2;
      goto LABEL_23;
    case 4:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      goto LABEL_25;
    case 7:
      uint64_t v5 = a2[6];
LABEL_25:
      int v21 = a2[5];
      if (v21)
      {
        int v22 = (const llvm::SCEV **)a2[4];
        uint64_t v23 = 8 * (void)v21;
        do
        {
          uint64_t v24 = *v22++;
          uint64_t v25 = (void *)llvm::SCEVExpander::getRelevantLoop(this, v24);
          uint64_t v5 = (const llvm::SCEV *)sub_1CD1E4208(v5, v25);
          v23 -= 8;
        }
        while (v23);
      }
      __int16 v27 = a2;
      sub_1CD88E1C8((uint64_t)v4, (uint64_t *)&v27)[1] = v5;
      return v5;
    case 0xE:
      uint64_t v7 = (uint64_t)*(a2 - 1);
      if (v7) {
        BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
      }
      else {
        BOOL v8 = 0;
      }
      if (!v8) {
        return 0;
      }
      BOOL v12 = *(uint64_t **)(*(void *)this + 40);
      int v13 = *((_DWORD *)v12 + 4);
      if (v13)
      {
        uint64_t v14 = *(void *)(v7 + 40);
        uint64_t v15 = *v12;
        unsigned int v16 = v13 - 1;
        uint64_t v17 = ((v14 >> 4) ^ (v14 >> 9)) & (v13 - 1);
        uint64_t v18 = *(void *)(v15 + 16 * v17);
        if (v14 == v18)
        {
LABEL_19:
          RelevantLoop = *(void **)(v15 + 16 * v17 + 8);
        }
        else
        {
          int v19 = 1;
          while (v18 != -4096)
          {
            int v20 = v17 + v19++;
            uint64_t v17 = v20 & v16;
            uint64_t v18 = *(void *)(v15 + 16 * v17);
            if (v14 == v18) {
              goto LABEL_19;
            }
          }
          RelevantLoop = 0;
        }
        *(void *)(v29 + 8) = RelevantLoop;
        return (const llvm::SCEV *)RelevantLoop;
      }
      RelevantLoop = 0;
      *(void *)(v29 + 8) = 0;
      break;
    default:
      if (*((_WORD *)a2 + 12) == 6) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v9)
      {
        uint64_t v10 = (void *)llvm::SCEVExpander::getRelevantLoop(this, v9[4]);
        uint64_t v11 = (void *)llvm::SCEVExpander::getRelevantLoop(this, v9[5]);
        RelevantLoop = sub_1CD1E4208(v10, v11);
        __int16 v27 = v9;
LABEL_23:
        sub_1CD88E1C8((uint64_t)v4, (uint64_t *)&v27)[1] = RelevantLoop;
      }
      return (const llvm::SCEV *)RelevantLoop;
  }
  return (const llvm::SCEV *)RelevantLoop;
}

void *sub_1CD1E4208(void *a1, void *a2)
{
  if (!a1) {
    return a2;
  }
  uint64_t v2 = a1;
  if (a2 && a2 != a1)
  {
    unsigned int v3 = a2;
    while (v3)
    {
      unsigned int v3 = (void *)*v3;
      if (v3 == a1) {
        return a2;
      }
    }
    uint64_t v5 = a1;
    do
    {
      if (!v5) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5 != a2);
  }
  return v2;
}

llvm::Value *llvm::SCEVExpander::visitAddExpr(llvm::SCEVExpander *this, void *a2, __n128 a3)
{
  v62[16] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t **)a2[6];
  unsigned int v6 = *((_DWORD *)v5 + 2);
  if (v6 != 13)
  {
    uint64_t v45 = *(void *)(**(void **)this + 40);
    if ((v6 & 0xFE) == 0x12) {
      unsigned int v6 = *(_DWORD *)(*v5[2] + 8);
    }
    uint64_t v46 = *(void *)(v45 + 504);
    if (v6 < 0x100) {
      goto LABEL_70;
    }
    unsigned int v47 = v6 >> 8;
    unint64_t v48 = *(unsigned int *)(v45 + 512);
    uint64_t v49 = v46;
    if (v48)
    {
      uint64_t v49 = v46;
      unint64_t v50 = v48;
      do
      {
        unint64_t v51 = v50 >> 1;
        uint64_t v52 = v49 + 16 * (v50 >> 1);
        unsigned int v53 = *(_DWORD *)(v52 + 8);
        uint64_t v54 = v52 + 16;
        v50 += ~(v50 >> 1);
        if (v53 < v47) {
          uint64_t v49 = v54;
        }
        else {
          unint64_t v50 = v51;
        }
      }
      while (v50);
    }
    if (v49 == v46 + 16 * v48 || *(_DWORD *)(v49 + 8) != v47) {
LABEL_70:
    }
      uint64_t v49 = v46;
    uint64_t v55 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v5, (llvm::LLVMContext *)*(unsigned int *)(v49 + 12));
    if ((v5[1] & 0xFE) == 0x12)
    {
      int v56 = (llvm::Type *)*((unsigned int *)v5 + 8);
      if (*((_DWORD *)v5 + 2) == 19) {
        llvm::ScalableVectorType::get(v55, v56);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v55, v56);
      }
    }
    uint64_t v5 = v55;
  }
  uint64_t v60 = v62;
  a3.n128_u64[0] = 0x800000000;
  uint64_t v61 = 0x800000000;
  uint64_t v7 = a2[5];
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    uint64_t v9 = a2[4] - 8;
    do
    {
      uint64_t v10 = *(const llvm::SCEV ***)(v9 + v8);
      RelevantLoop = llvm::SCEVExpander::getRelevantLoop(this, v10);
      if (v61 >= (unint64_t)HIDWORD(v61)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v12 = (const llvm::SCEV **)((char *)v60 + 16 * v61);
      *BOOL v12 = RelevantLoop;
      v12[1] = (const llvm::SCEV *)v10;
      unsigned int v13 = v61 + 1;
      LODWORD(v61) = v61 + 1;
      v8 -= 8;
    }
    while (v8);
    uint64_t v14 = (char *)v60;
  }
  else
  {
    unsigned int v13 = 0;
    uint64_t v14 = (char *)v62;
  }
  sub_1CD1E4764(v14, v13, *(void *)(*(void *)this + 32), a3);
  uint64_t v15 = (char *)v60;
  if (v61)
  {
    uint64_t v57 = a2;
    unsigned int v16 = 0;
    uint64_t v17 = (char *)v60 + 16 * v61;
    while (1)
    {
      uint64_t v18 = (const llvm::SCEV *)*((void *)v15 + 1);
      if (v16)
      {
        int v19 = *(llvm::PointerType **)v16;
        if (*(void *)v16) {
          BOOL v20 = *(unsigned char *)(*(void *)v16 + 8) == 15;
        }
        else {
          BOOL v20 = 0;
        }
        if (v20)
        {
          uint64_t v29 = *(void *)v15;
          unsigned int v58 = 0;
          if (v15 == v17)
          {
            unsigned int v30 = 0;
            uint64_t v15 = v17;
LABEL_52:
            unsigned int v16 = (llvm::Value *)llvm::SCEVExpander::expandAddToGEP(this, v59, &v59[v30], v19, (llvm::Type *)v5, v16);
            goto LABEL_53;
          }
          unsigned int v30 = 0;
          while (2)
          {
            if (*(void *)v15 != v29) {
              goto LABEL_52;
            }
            uint64_t SCEVIter = (unsigned __int16 *)*((void *)v15 + 1);
            if (SCEVIter) {
              BOOL v32 = SCEVIter[12] == 14;
            }
            else {
              BOOL v32 = 0;
            }
            if (v32)
            {
              unint64_t v33 = *((void *)SCEVIter - 1);
              if (*(unsigned __int8 *)(v33 + 16) <= 0x1Bu)
              {
                uint64_t v34 = *(void *)(*(void *)this + 104);
                unsigned int v35 = *(_DWORD *)(*(void *)this + 120);
                if (!v35) {
                  goto LABEL_34;
                }
                unsigned int v36 = (v35 - 1) & ((v33 >> 4) ^ (v33 >> 9));
                uint64_t v37 = v34 + 48 * v36;
                uint64_t v38 = *(void *)(v37 + 24);
                if (v38 != v33)
                {
                  int v39 = 1;
                  while (v38 != -4096)
                  {
                    unsigned int v40 = v36 + v39++;
                    unsigned int v36 = v40 & (v35 - 1);
                    uint64_t v37 = v34 + 48 * v36;
                    uint64_t v38 = *(void *)(v37 + 24);
                    if (v38 == v33) {
                      goto LABEL_35;
                    }
                  }
LABEL_34:
                  uint64_t v37 = v34 + 48 * v35;
                }
LABEL_35:
                if (v37 == v34 + 48 * v35 || (uint64_t SCEVIter = *(unsigned __int16 **)(v37 + 40)) == 0)
                {
                  uint64_t SCEVIter = (unsigned __int16 *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)this, v33);
                  unsigned int v30 = v58;
                }
              }
            }
            if (v30 >= 4) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v59[v30] = (const llvm::SCEV *)SCEVIter;
            unsigned int v30 = ++v58;
            v15 += 16;
            if (v15 == v17)
            {
              uint64_t v15 = v17;
              goto LABEL_52;
            }
            continue;
          }
        }
        if (llvm::SCEV::isNonConstantNegative(*((llvm::SCEV **)v15 + 1)))
        {
          NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(*(llvm::ScalarEvolution **)this, (uint64_t)v18, 0);
          uint64_t v22 = llvm::SCEVExpander::expandCodeForImpl(this, NegativeSCEV, (llvm::Type *)v5, 0);
          inserted = (unsigned __int8 *)llvm::SCEVExpander::InsertNoopCastOfTo(this, v16, (llvm::Type *)v5);
          uint64_t v24 = this;
          uint64_t v25 = 15;
          uint64_t v26 = (llvm::Constant *)v22;
          LOBYTE(v27) = 0;
        }
        else
        {
          uint64_t v41 = llvm::SCEVExpander::expandCodeForImpl(this, v18, (llvm::Type *)v5, 0);
          uint64_t v42 = llvm::SCEVExpander::InsertNoopCastOfTo(this, v16, (llvm::Type *)v5);
          unsigned int v43 = *((unsigned __int8 *)v42 + 16);
          if (v43 >= 0x15) {
            inserted = (unsigned __int8 *)v42;
          }
          else {
            inserted = (unsigned __int8 *)v41;
          }
          if (v43 >= 0x15) {
            uint64_t v26 = (llvm::Constant *)v41;
          }
          else {
            uint64_t v26 = v42;
          }
          __int16 v27 = *((_WORD *)v57 + 14) & 7;
          uint64_t v24 = this;
          uint64_t v25 = 13;
        }
        uint64_t v28 = llvm::SCEVExpander::InsertBinop(v24, (llvm *)v25, inserted, v26, v27, 1);
      }
      else
      {
        uint64_t v28 = (const llvm::detail::DoubleAPFloat *)llvm::SCEVExpander::expand(this, *((const llvm::SCEV **)v15 + 1));
      }
      unsigned int v16 = v28;
      v15 += 16;
LABEL_53:
      if (v15 == v17)
      {
        uint64_t v15 = (char *)v60;
        goto LABEL_56;
      }
    }
  }
  unsigned int v16 = 0;
LABEL_56:
  if (v15 != (char *)v62) {
    free(v15);
  }
  return v16;
}

void sub_1CD1E4764(char *a1, unsigned int a2, uint64_t a3, __n128 a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = &a1[16 * a2];
  uint64_t v12 = a3;
  if (a2)
  {
    uint64_t v7 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v8 = a2;
    while (1)
    {
      uint64_t v9 = (__n128 *)operator new(16 * v8, v7);
      if (v9) {
        break;
      }
      BOOL v10 = v8 > 1;
      v8 >>= 1;
      if (!v10) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = v9;
    sub_1CD1F17C0(a1, v6, &v12, v5, v9, v8, a4);
    operator delete(v11);
  }
  else
  {
LABEL_5:
    sub_1CD1F17C0(a1, v6, &v12, v5, 0, 0, a4);
  }
}

llvm::Constant *sub_1CD1E4820(uint64_t a1)
{
  uint64_t v2 = *(llvm::SCEVExpander **)a1;
  unsigned int v3 = **(uint64_t ***)(a1 + 8);
  uint64_t v4 = **(void **)(a1 + 16) + 16 * *(unsigned int *)(*(void *)(a1 + 16) + 8);
  if (v3 == (uint64_t *)v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = (const llvm::SCEV *)v3[1];
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v7 = *v3;
    unsigned int v6 = (const llvm::SCEV *)v3[1];
    while (1)
    {
      BOOL v8 = v7 == *v3 && v6 == (const llvm::SCEV *)v3[1];
      if (!v8 || v5 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      ++v5;
      v3 += 2;
      if (v3 == (uint64_t *)v4)
      {
        unsigned int v3 = (uint64_t *)(**(void **)(a1 + 16) + 16 * *(unsigned int *)(*(void *)(a1 + 16) + 8));
        break;
      }
    }
  }
  uint64_t v10 = llvm::SCEVExpander::expandCodeForImpl(*(llvm::SCEVExpander **)a1, v6, **(llvm::Type ***)(a1 + 24), 0);
  uint64_t v11 = (uint64_t)(v5 << 63) >> 63;
  uint64_t v12 = (unsigned __int8 *)(v11 & v10);
  if (v5 >= 2)
  {
    uint64_t v14 = (unsigned __int8 *)v10;
    for (unint64_t i = 2; i <= v5; i *= 2)
    {
      BOOL result = llvm::SCEVExpander::InsertBinop(v2, (llvm *)0x11, v14, (llvm::Constant *)v14, 0, 1);
      uint64_t v14 = (unsigned __int8 *)result;
      if ((i & v5) != 0)
      {
        if (v12) {
          BOOL result = llvm::SCEVExpander::InsertBinop(v2, (llvm *)0x11, v12, result, 0, 1);
        }
      }
      else
      {
        BOOL result = (llvm::Constant *)v12;
      }
      uint64_t v12 = (unsigned __int8 *)result;
    }
  }
  else
  {
    BOOL result = (llvm::Constant *)(v11 & v10);
  }
  **(void **)(a1 + 8) = v3;
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::SCEVExpander::visitUDivExpr(llvm::SCEVExpander *this, uint64_t a2)
{
  uint64_t v4 = (const llvm::SCEV **)(a2 + 40);
  unint64_t v5 = (uint64_t *)(a2 + 40);
  while (2)
  {
    uint64_t v6 = *v5;
    switch(*(_WORD *)(v6 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v7 = (uint64_t ***)(v6 + 40);
        break;
      case 4:
        uint64_t v7 = (uint64_t ***)(v6 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unint64_t v5 = *(uint64_t **)(v6 + 32);
        continue;
      case 6:
        unint64_t v5 = (uint64_t *)(v6 + 40);
        continue;
      case 0xE:
        uint64_t v7 = *(uint64_t ****)(v6 - 8);
        break;
      default:
        uint64_t v7 = *(uint64_t ****)(v6 + 32);
        break;
    }
    break;
  }
  BOOL v8 = *v7;
  unsigned int v9 = *((_DWORD *)*v7 + 2);
  if (v9 != 13)
  {
    uint64_t v36 = *(void *)(**(void **)this + 40);
    if ((v9 & 0xFE) == 0x12) {
      unsigned int v9 = *(_DWORD *)(*v8[2] + 8);
    }
    uint64_t v37 = *(void *)(v36 + 504);
    if (v9 < 0x100) {
      goto LABEL_42;
    }
    unsigned int v38 = v9 >> 8;
    unint64_t v39 = *(unsigned int *)(v36 + 512);
    uint64_t v40 = v37;
    if (v39)
    {
      uint64_t v40 = v37;
      unint64_t v41 = v39;
      do
      {
        unint64_t v42 = v41 >> 1;
        uint64_t v43 = v40 + 16 * (v41 >> 1);
        unsigned int v44 = *(_DWORD *)(v43 + 8);
        uint64_t v45 = v43 + 16;
        v41 += ~(v41 >> 1);
        if (v44 < v38) {
          uint64_t v40 = v45;
        }
        else {
          unint64_t v41 = v42;
        }
      }
      while (v41);
    }
    if (v40 == v37 + 16 * v39 || *(_DWORD *)(v40 + 8) != v38) {
LABEL_42:
    }
      uint64_t v40 = v37;
    uint64_t v46 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v8, (llvm::LLVMContext *)*(unsigned int *)(v40 + 12));
    if ((v8[1] & 0xFE) == 0x12)
    {
      unsigned int v47 = (llvm::Type *)*((unsigned int *)v8 + 8);
      if (*((_DWORD *)v8 + 2) == 19) {
        llvm::ScalableVectorType::get(v46, v47);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v46, v47);
      }
    }
    BOOL v8 = v46;
  }
  uint64_t v10 = llvm::SCEVExpander::expandCodeForImpl(this, *(const llvm::SCEV **)(a2 + 32), (llvm::Type *)v8, 0);
  uint64_t v11 = *(void *)(a2 + 40);
  if (v11) {
    BOOL v12 = *(unsigned __int16 *)(v11 + 24) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    goto LABEL_13;
  }
  uint64_t v19 = *(void *)(v11 + 32);
  uint64_t v20 = *(unsigned int *)(v19 + 32);
  if (v20 > 0x40)
  {
    int v24 = 0;
    int64_t v25 = (unint64_t)(v20 + 63) >> 6;
    uint64_t v26 = *(int8x8_t **)(v19 + 24);
    __int16 v27 = v26;
    int64_t v28 = v25;
    do
    {
      int8x8_t v29 = *v27++;
      uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
      v30.i16[0] = vaddlv_u8(v30);
      v24 += v30.i32[0];
      --v28;
    }
    while (v28);
    if (v24 == 1)
    {
      int v31 = 0;
      do
      {
        if (v25-- < 1) {
          break;
        }
        unint64_t v33 = (unint64_t)v26[v25];
        v31 += __clz(v33);
      }
      while (!v33);
      int v34 = v20 | 0xFFFFFFC0;
      if ((v20 & 0x3F) == 0) {
        int v34 = 0;
      }
      int v23 = v31 + v34;
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v13 = llvm::SCEVExpander::expandCodeForImpl(this, (const llvm::SCEV *)v11, (llvm::Type *)v8, 0);
    int isKnownNonZero = llvm::ScalarEvolution::isKnownNonZero(*(llvm::ScalarEvolution **)this, *v4);
    uint64_t v15 = this;
    uint64_t v16 = 19;
    uint64_t v17 = (unsigned __int8 *)v10;
    uint64_t v18 = (llvm::Constant *)v13;
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v19 + 24);
  uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] != 1) {
    goto LABEL_13;
  }
  int v23 = v20 + __clz(v21) - 64;
LABEL_26:
  uint64_t v18 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v8, (v20 + ~v23), 0);
  uint64_t v15 = this;
  uint64_t v16 = 26;
  uint64_t v17 = (unsigned __int8 *)v10;
  int isKnownNonZero = 1;
LABEL_27:

  return llvm::SCEVExpander::InsertBinop(v15, (llvm *)v16, v17, v18, 0, isKnownNonZero);
}

uint64_t llvm::SCEVExpander::isNormalAddRecExprPHI(const llvm::Loop **this, llvm::PHINode *a2, llvm::Instruction *a3, const llvm::Loop *a4)
{
  while (1)
  {
    int v8 = *((_DWORD *)a3 + 5);
    uint64_t v9 = v8 & 0x7FFFFFF;
    if ((v8 & 0x7FFFFFF) == 0) {
      return 0;
    }
    int v10 = *((unsigned __int8 *)a3 + 16);
    if (v10 == 83) {
      return 0;
    }
    if (v10 != 77 && (v10 - 79) > 0xFFFFFFF2) {
      return 0;
    }
    if (this[50] == a4)
    {
      if ((v8 & 0x40000000) != 0)
      {
        BOOL v12 = (char *)*((void *)a3 - 1);
      }
      else
      {
        uint64_t v9 = v9;
        BOOL v12 = (char *)a3 - 32 * v9;
      }
      if (v9 != 1) {
        break;
      }
    }
LABEL_21:
    if ((v8 & 0x40000000) != 0) {
      uint64_t v17 = (char *)*((void *)a3 - 1);
    }
    else {
      uint64_t v17 = (char *)a3 - 32 * (v8 & 0x7FFFFFF);
    }
    a3 = *(llvm::Instruction **)v17;
    unsigned int v18 = *(unsigned __int8 *)(*(void *)v17 + 16);
    if (a3) {
      BOOL v19 = v18 >= 0x1C;
    }
    else {
      BOOL v19 = 0;
    }
    if (!v19 || (llvm::Instruction::mayHaveSideEffects(a3) & 1) != 0) {
      return 0;
    }
    if (a3 == a2) {
      return 1;
    }
  }
  uint64_t v13 = (const llvm::Value **)(v12 + 32);
  uint64_t v14 = 32 * v9 - 32;
  while (1)
  {
    if (*v13 && *((unsigned __int8 *)*v13 + 16) >= 0x1Cu)
    {
      uint64_t result = llvm::DominatorTree::dominates(*((llvm::DominatorTree **)*this + 4), *v13, this[51]);
      if (!result) {
        return result;
      }
    }
    v13 += 4;
    v14 -= 32;
    if (!v14)
    {
      int v8 = *((_DWORD *)a3 + 5);
      goto LABEL_21;
    }
  }
}

uint64_t llvm::SCEVExpander::getIVIncOperand(llvm::SCEVExpander *this, llvm::Instruction *a2, llvm::Instruction *a3, char a4)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v8 = *((unsigned __int8 *)a2 + 16);
  if (v8 <= 0x3D)
  {
    if (v8 != 41 && v8 != 43) {
      return result;
    }
    int v9 = *((_DWORD *)a2 + 5);
    if ((v9 & 0x40000000) != 0) {
      int v10 = (char *)*((void *)a2 - 1);
    }
    else {
      int v10 = (char *)a2 - 32 * (v9 & 0x7FFFFFF);
    }
    uint64_t v11 = (unsigned __int8 *)*((void *)v10 + 4);
    if (v11) {
      BOOL v12 = v11[16] >= 0x1Cu;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      if (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)this + 32), (const llvm::Value *)v11, a3))return 0; {
      int v9 = *((_DWORD *)a2 + 5);
      }
    }
    if ((v9 & 0x40000000) == 0)
    {
      uint64_t v13 = v9 & 0x7FFFFFF;
      goto LABEL_36;
    }
LABEL_37:
    int v23 = (uint64_t *)*((void *)a2 - 1);
    goto LABEL_38;
  }
  if (v8 != 62)
  {
    if (v8 == 77) {
      goto LABEL_34;
    }
    return result;
  }
  int v15 = *((_DWORD *)a2 + 5);
  if ((v15 & 0x40000000) != 0)
  {
    uint64_t v17 = (char *)*((void *)a2 - 1);
    uint64_t v16 = v15 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v16 = v15 & 0x7FFFFFF;
    uint64_t v17 = (char *)a2 - 32 * v16;
  }
  if (v16 == 1) {
    goto LABEL_34;
  }
  unsigned int v18 = (const llvm::Value **)(v17 + 32);
  uint64_t v19 = 32 * v16 - 32;
  while (1)
  {
    unsigned int v20 = *((unsigned __int8 *)*v18 + 16);
    if (v20 < 0x15) {
      goto LABEL_33;
    }
    if (v20 >= 0x1C) {
      break;
    }
    if ((a4 & 1) == 0) {
      goto LABEL_42;
    }
LABEL_33:
    v18 += 4;
    v19 -= 32;
    if (!v19) {
      goto LABEL_34;
    }
  }
  int v21 = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)this + 32), *v18, a3);
  if (!v21 || (a4 & 1) != 0)
  {
    if (!v21) {
      return 0;
    }
    goto LABEL_33;
  }
LABEL_42:
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 2) {
    return 0;
  }
  uint64_t v25 = *(void *)a2;
  uint64_t v26 = (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8);
  if (v25 != llvm::PointerType::get((llvm::PointerType *)(*****(void *****)this + 1888), v26))
  {
    uint64_t v27 = *(void *)a2;
    if (v27 != llvm::PointerType::get((llvm::PointerType *)(*****(void *****)this + 1912), v26)) {
      return 0;
    }
  }
LABEL_34:
  int v22 = *((_DWORD *)a2 + 5);
  if ((v22 & 0x40000000) != 0) {
    goto LABEL_37;
  }
  uint64_t v13 = v22 & 0x7FFFFFF;
LABEL_36:
  int v23 = (uint64_t *)((char *)a2 - 32 * v13);
LABEL_38:
  uint64_t v24 = *v23;
  if (*(unsigned __int8 *)(v24 + 16) <= 0x1Bu) {
    return 0;
  }
  else {
    return v24;
  }
}

uint64_t llvm::SCEVExpander::fixupInsertPoints(uint64_t this, llvm::Instruction *a2)
{
  uint64_t v2 = (char *)a2 + 24;
  uint64_t v3 = *((void *)a2 + 4);
  if (*(llvm::Instruction **)(this + 504) == (llvm::Instruction *)((char *)a2 + 24))
  {
    int v10 = (char *)a2 + 24;
    if (v3) {
      uint64_t v5 = v3 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v8 = v3;
    uint64_t v9 = this;
    sub_1CC096F34(this + 448, v5);
    uint64_t v3 = v8;
    this = v9;
    uint64_t v2 = v10;
  }
  uint64_t v4 = *(unsigned int *)(this + 688);
  if (v4)
  {
    uint64_t v6 = *(void *)(this + 680);
    uint64_t v7 = 8 * v4;
    do
    {
      if (*(char **)(*(void *)v6 + 16) == v2) {
        *(void *)(*(void *)v6 + 16) = v3;
      }
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  return this;
}

uint64_t llvm::SCEVExpander::hoistIVInc(llvm::SCEVExpander *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)this + 32), a2, a3)) {
    return 1;
  }
  if (*((unsigned char *)a3 + 16) != 83) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
  }
  return 0;
}

uint64_t sub_1CD1E51A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a3 + 40);
  if (v3 == v4) {
    return 1;
  }
  int v5 = *((_DWORD *)a1 + 4);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = *a1;
  unsigned int v7 = v5 - 1;
  uint64_t v8 = v7 & ((v3 >> 4) ^ (v3 >> 9));
  uint64_t v9 = *(void *)(*a1 + 16 * v8);
  if (v3 == v9)
  {
LABEL_7:
    BOOL v12 = *(void **)(v6 + 16 * v8 + 8);
  }
  else
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v8 + v10++;
      uint64_t v8 = v11 & v7;
      uint64_t v9 = *(void *)(v6 + 16 * v8);
      if (v3 == v9) {
        goto LABEL_7;
      }
    }
    BOOL v12 = 0;
  }
  uint64_t v13 = v7 & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v14 = *(void *)(v6 + 16 * v13);
  if (v4 == v14)
  {
LABEL_13:
    uint64_t v17 = *(void **)(v6 + 16 * v13 + 8);
    if (v12 == v17) {
      return 1;
    }
    if (v17)
    {
      unsigned int v18 = v12;
      while (v18)
      {
        unsigned int v18 = (void *)*v18;
        if (v18 == v17) {
          goto LABEL_37;
        }
      }
      for (uint64_t i = *(void *)(a2 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v20 = *(void *)(i + 24);
        if (*(unsigned char *)(v20 + 16) == 83)
        {
          int v21 = *(_DWORD *)(v20 + 20);
          uint64_t v22 = (v21 & 0x40000000) != 0 ? *(void *)(v20 - 8) : v20 - 32 * (v21 & 0x7FFFFFF);
          int v23 = (uint64_t *)(v22
                          + 32 * *(unsigned int *)(v20 + 60)
                          + 8 * ((unint64_t)(i - v22) >> 5));
        }
        else
        {
          int v23 = (uint64_t *)(v20 + 40);
        }
        uint64_t v24 = *v23;
        if (v24 != v4)
        {
          uint64_t v25 = ((v24 >> 4) ^ (v24 >> 9)) & v7;
          uint64_t v26 = *(void *)(v6 + 16 * v25);
          if (v24 == v26)
          {
LABEL_33:
            int8x8_t v29 = *(void **)(v6 + 16 * v25 + 8);
          }
          else
          {
            int v27 = 1;
            while (v26 != -4096)
            {
              int v28 = v25 + v27++;
              uint64_t v25 = v28 & v7;
              uint64_t v26 = *(void *)(v6 + 16 * v25);
              if (v24 == v26) {
                goto LABEL_33;
              }
            }
            int8x8_t v29 = 0;
          }
          if (v29 != v17) {
            return 0;
          }
        }
      }
    }
LABEL_37:
    if (!v12) {
      return 1;
    }
  }
  else
  {
    int v15 = 1;
    while (v14 != -4096)
    {
      int v16 = v13 + v15++;
      uint64_t v13 = v16 & v7;
      uint64_t v14 = *(void *)(v6 + 16 * v13);
      if (v4 == v14) {
        goto LABEL_13;
      }
    }
    if (!v12) {
      return 1;
    }
    uint64_t v17 = 0;
  }
  uint8x8_t v30 = v17;
  uint64_t result = 1;
  while (v30)
  {
    uint8x8_t v30 = (void *)*v30;
    if (v30 == v12) {
      return result;
    }
  }
  if (*(unsigned char *)(a2 + 16) == 83) {
    return 0;
  }
  int v32 = *(_DWORD *)(a2 + 20);
  if ((v32 & 0x40000000) != 0)
  {
    uint64_t v34 = *(void *)(a2 - 8);
    uint64_t v33 = v32 & 0x7FFFFFF;
    if (v33)
    {
LABEL_46:
      uint64_t v35 = v34 + 32 * v33;
      uint64_t result = 1;
      while (*(void *)v34 && *(unsigned __int8 *)(*(void *)v34 + 16) >= 0x1Cu)
      {
        uint64_t v37 = *(void *)(*(void *)v34 + 40);
        if (v37 != v4)
        {
          uint64_t v38 = ((v37 >> 4) ^ (v37 >> 9)) & v7;
          uint64_t v39 = *(void *)(v6 + 16 * v38);
          if (v37 == v39)
          {
LABEL_57:
            unint64_t v42 = *(void **)(v6 + 16 * v38 + 8);
          }
          else
          {
            int v40 = 1;
            while (v39 != -4096)
            {
              int v41 = v38 + v40++;
              uint64_t v38 = v41 & v7;
              uint64_t v39 = *(void *)(v6 + 16 * v38);
              if (v37 == v39) {
                goto LABEL_57;
              }
            }
            unint64_t v42 = 0;
          }
          if (v42 != v17) {
            break;
          }
        }
        v34 += 32;
        if (v34 == v35) {
          return result;
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v33 = v32 & 0x7FFFFFF;
    uint64_t v34 = a2 - 32 * v33;
    if (v33) {
      goto LABEL_46;
    }
  }
  return 1;
}

void llvm::SCEVExpander::isExpandedAddRecExprPHI(llvm::SCEVExpander *this, llvm::PHINode *a2, llvm::Instruction *a3, const llvm::Loop *a4)
{
}

llvm::Instruction *llvm::SCEVExpander::expandIVInc(llvm::SCEVExpander *this, llvm::PHINode *a2, llvm::Value *a3, const llvm::Loop *a4, llvm::Type *a5, llvm::Type *a6, int a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a5 + 2) != 15)
  {
    uint64_t v19 = (char *)this + 448;
    if (a7)
    {
      if (**((unsigned char **)this + 2))
      {
        int __src = (llvm::SCEV *)*((void *)this + 2);
        uint64_t v39 = ".iv.next";
        __int16 v20 = 771;
      }
      else
      {
        int __src = (llvm::SCEV *)".iv.next";
        __int16 v20 = 259;
      }
      __int16 v40 = v20;
      return sub_1CB84494C((uint64_t)v19, (uint64_t)a2, (uint64_t)a3, (uint64_t)&__src, 0, 0);
    }
    else
    {
      if (**((unsigned char **)this + 2))
      {
        int __src = (llvm::SCEV *)*((void *)this + 2);
        uint64_t v39 = ".iv.next";
        __int16 v28 = 771;
      }
      else
      {
        int __src = (llvm::SCEV *)".iv.next";
        __int16 v28 = 259;
      }
      __int16 v40 = v28;
      return sub_1CB844A3C((uint64_t)v19, a2, (uint64_t)a3, (uint64_t)&__src, 0, 0);
    }
  }
  int v11 = a5;
  if (*((unsigned char *)a3 + 16) != 16) {
    int v11 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(*****(void *****)this + 1888), (llvm::Type *)(*((_DWORD *)a5 + 2) >> 8));
  }
  uint64_t v12 = *(void *)(*(void *)this + 104);
  unsigned int v13 = *(_DWORD *)(*(void *)this + 120);
  if (v13)
  {
    unsigned int v14 = (v13 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v15 = v12 + 48 * v14;
    int v16 = *(llvm::Value **)(v15 + 24);
    if (v16 == a3) {
      goto LABEL_14;
    }
    int v17 = 1;
    while (v16 != (llvm::Value *)-4096)
    {
      unsigned int v18 = v14 + v17++;
      unsigned int v14 = v18 & (v13 - 1);
      uint64_t v15 = v12 + 48 * v14;
      int v16 = *(llvm::Value **)(v15 + 24);
      if (v16 == a3) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v15 = v12 + 48 * v13;
LABEL_14:
  if (v15 == v12 + 48 * v13 || (uint64_t SCEVIter = *(llvm::SCEV **)(v15 + 40)) == 0) {
    uint64_t SCEVIter = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)this, (unint64_t)a3);
  }
  int __src = SCEVIter;
  uint64_t v22 = llvm::SCEVExpander::expandAddToGEP(this, &__src, &v38, v11, a6, a2);
  int v23 = (unsigned __int8 *)v22;
  uint64_t v24 = *(void *)a2;
  if (*(void *)v22 != *(void *)a2)
  {
    __int16 v36 = 257;
    if (*(unsigned __int8 *)(v22 + 16) <= 0x14u)
    {
      int v23 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**((void **)this + 65)
                                                                                            + 224))(*((void *)this + 65), 49, v22, v24);
      if (v23) {
        BOOL v29 = v23[16] >= 0x1Cu;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)this + 66) + 16))(*((void *)this + 66), v23, v35, *((void *)this + 62), *((void *)this + 63));
        uint64_t v30 = *((unsigned int *)this + 114);
        if (v30)
        {
          uint64_t v31 = *((void *)this + 56);
          uint64_t v32 = v31 + 16 * v30;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
            v31 += 16;
          }
          while (v31 != v32);
        }
      }
    }
    else
    {
      __int16 v40 = 257;
      int v23 = (unsigned __int8 *)llvm::CastInst::Create(49, v22, v24, (const char **)&__src, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)this + 66) + 16))(*((void *)this + 66), v23, v35, *((void *)this + 62), *((void *)this + 63));
      uint64_t v25 = *((unsigned int *)this + 114);
      if (v25)
      {
        uint64_t v26 = *((void *)this + 56);
        uint64_t v27 = v26 + 16 * v25;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v23, *(_DWORD *)v26, *(llvm::MDNode **)(v26 + 8));
          v26 += 16;
        }
        while (v26 != v27);
      }
    }
  }
  return (llvm::Instruction *)v23;
}

void llvm::SCEVExpander::getAddRecExprPHILiterally(llvm::SCEVExpander *this, const llvm::SCEVAddRecExpr *a2, const llvm::Loop *a3, llvm::Type *a4, llvm::Type *a5, llvm::Type **a6, BOOL *a7)
{
}

uint64_t llvm::SCEVExpander::rememberInstruction(llvm::SCEVExpander *this, llvm::Value *a2)
{
  if (*((_DWORD *)this + 93) == *((_DWORD *)this + 94)) {
    uint64_t v4 = (char *)this + 56;
  }
  else {
    uint64_t v4 = (char *)this + 80;
  }
  uint64_t v8 = a2;
  uint64_t result = sub_1CD1F2584((uint64_t)v4, &v8, (uint64_t)v9);
  if (*((unsigned char *)this + 24))
  {
    if (a2)
    {
      if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu)
      {
        int v6 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        if (v6)
        {
          for (unsigned int i = 0; i != v6; ++i)
            uint64_t result = llvm::SCEVExpander::fixupLCSSAFormFor(this, a2, i);
        }
      }
    }
  }
  return result;
}

llvm::ConstantExpr *llvm::SCEVExpander::expandCodeForImpl(llvm::SCEVExpander *this, llvm::Instruction **a2, llvm::Type *a3, llvm::Instruction *a4)
{
  unsigned int v7 = (char *)this + 448;
  *((void *)this + 62) = *((void *)a4 + 5);
  *((void *)this + 63) = (char *)a4 + 24;
  uint64_t v8 = (unsigned __int8 *)*((void *)a4 + 6);
  int v11 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v11, v8, 2);
    uint64_t v9 = v11;
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_1CB8461A4((uint64_t)v7, 0, (uint64_t)v9);
  if (v11) {
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  }
  return llvm::SCEVExpander::expandCodeForImpl(this, a2, a3);
}

void llvm::SCEVExpander::expandAddRecExprLiterally(llvm::SCEVExpander *this, const llvm::SCEVAddRecExpr *a2)
{
  v76[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)*((void *)a2 + 4);
  while (2)
  {
    uint64_t v5 = *v4;
    switch(*(_WORD *)(v5 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v6 = (uint64_t *)(v5 + 40);
        goto LABEL_8;
      case 4:
        int v6 = (uint64_t *)(v5 + 48);
        goto LABEL_8;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v4 = *(uint64_t **)(v5 + 32);
        continue;
      case 6:
        uint64_t v4 = (uint64_t *)(v5 + 40);
        continue;
      case 0xE:
        int v6 = *(uint64_t **)(v5 - 8);
        goto LABEL_8;
      default:
        int v6 = *(uint64_t **)(v5 + 32);
LABEL_8:
        uint64_t v7 = *v6;
        unsigned int v8 = *(_DWORD *)(*v6 + 8);
        unsigned int v69 = (uint64_t **)*v6;
        if (v8 != 13)
        {
          uint64_t v51 = *(void *)(**(void **)this + 40);
          if ((v8 & 0xFE) == 0x12) {
            unsigned int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
          }
          uint64_t v52 = *(void *)(v51 + 504);
          if (v8 < 0x100) {
            goto LABEL_100;
          }
          unsigned int v53 = v8 >> 8;
          unint64_t v54 = *(unsigned int *)(v51 + 512);
          uint64_t v55 = v52;
          if (v54)
          {
            uint64_t v55 = v52;
            unint64_t v56 = v54;
            do
            {
              unint64_t v57 = v56 >> 1;
              uint64_t v58 = v55 + 16 * (v56 >> 1);
              unsigned int v59 = *(_DWORD *)(v58 + 8);
              uint64_t v60 = v58 + 16;
              v56 += ~(v56 >> 1);
              if (v59 < v53) {
                uint64_t v55 = v60;
              }
              else {
                unint64_t v56 = v57;
              }
            }
            while (v56);
          }
          if (v55 == v52 + 16 * v54 || *(_DWORD *)(v55 + 8) != v53) {
LABEL_100:
          }
            uint64_t v55 = v52;
          unsigned int v69 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v7, (llvm::LLVMContext *)*(unsigned int *)(v55 + 12));
          if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
          {
            uint64_t v61 = (llvm::Type *)*(unsigned int *)(v7 + 32);
            if (*(_DWORD *)(v7 + 8) == 19) {
              llvm::ScalableVectorType::get(v69, v61);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v69, v61);
            }
            unsigned int v69 = v62;
          }
        }
        uint64_t v9 = (const llvm::BasicBlock ***)*((void *)a2 + 6);
        uint64_t v11 = *((void *)this + 44);
        uint64_t v10 = *((void *)this + 45);
        if (v10 == v11)
        {
          uint64_t v12 = *((unsigned int *)this + 93);
          unsigned int v13 = (const llvm::BasicBlock ****)(v10 + 8 * v12);
          if (v12)
          {
            uint64_t v14 = 0;
            uint64_t v15 = 8 * v12;
            while (*(const llvm::BasicBlock ****)(v10 + v14) != v9)
            {
              v14 += 8;
              if (v15 == v14) {
                goto LABEL_27;
              }
            }
            unsigned int v13 = (const llvm::BasicBlock ****)(v10 + v14);
          }
LABEL_27:
          uint64_t v11 = *((void *)this + 45);
        }
        else
        {
          uint64_t v16 = *((unsigned int *)this + 92);
          int v17 = v16 - 1;
          unsigned int v18 = (v16 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          unsigned int v13 = (const llvm::BasicBlock ****)(v10 + 8 * v18);
          uint64_t v19 = *v13;
          if (*v13 == (const llvm::BasicBlock ***)-1)
          {
            __int16 v20 = 0;
LABEL_63:
            if (v20) {
              unsigned int v13 = v20;
            }
            if (*v13 != v9) {
              unsigned int v13 = (const llvm::BasicBlock ****)(v10 + 8 * v16);
            }
          }
          else
          {
            __int16 v20 = 0;
            int v21 = 1;
            while (v19 != v9)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == (const llvm::BasicBlock ***)-2;
              }
              if (v22) {
                __int16 v20 = v13;
              }
              unsigned int v23 = v18 + v21++;
              unsigned int v18 = v23 & v17;
              unsigned int v13 = (const llvm::BasicBlock ****)(v10 + 8 * (v23 & v17));
              uint64_t v19 = *v13;
              if (*v13 == (const llvm::BasicBlock ***)-1) {
                goto LABEL_63;
              }
            }
          }
        }
        BOOL v22 = v10 == v11;
        uint64_t v24 = 368;
        if (v22) {
          uint64_t v24 = 372;
        }
        uint64_t AddRecExpr = a2;
        if (v13 != (const llvm::BasicBlock ****)(v10 + 8 * *(unsigned int *)((char *)this + v24)))
        {
          int __src = (llvm::SCEV *)v76;
          uint64_t v73 = (uint64_t)v76;
          int v75 = 0;
          uint64_t v74 = 0x100000002;
          v76[0] = v9;
          uint64_t AddRecExpr = (const llvm::SCEVAddRecExpr *)llvm::normalizeForPostIncUse((uint64_t)a2, (uint64_t)&__src, *(void *)this);
          if ((llvm::SCEV *)v73 != __src) {
            free((void *)v73);
          }
        }
        uint64_t v26 = (const llvm::SCEV *)**((void **)AddRecExpr + 4);
        if (llvm::ScalarEvolution::getBlockDisposition(*(llvm::ScalarEvolution **)this, v26, *v9[4]) == 2)
        {
          unint64_t Constant = v26;
        }
        else
        {
          __int16 v28 = (uint64_t *)*((void *)AddRecExpr + 4);
          while (2)
          {
            uint64_t v29 = *v28;
            switch(*(_WORD *)(v29 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v30 = (llvm::Type **)(v29 + 40);
                goto LABEL_42;
              case 4:
                uint64_t v30 = (llvm::Type **)(v29 + 48);
                goto LABEL_42;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                __int16 v28 = *(uint64_t **)(v29 + 32);
                continue;
              case 6:
                __int16 v28 = (uint64_t *)(v29 + 40);
                continue;
              case 0xE:
                uint64_t v30 = *(llvm::Type ***)(v29 - 8);
                goto LABEL_42;
              default:
                uint64_t v30 = *(llvm::Type ***)(v29 + 32);
LABEL_42:
                unint64_t Constant = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)this, *v30, 0, 0);
                uint64_t v31 = *(llvm::ScalarEvolution **)this;
                uint64_t v32 = *((void *)AddRecExpr + 5);
                if (v32 == 2)
                {
                  uint64_t v33 = *(void *)(*((void *)AddRecExpr + 4) + 8);
                }
                else
                {
                  uint64_t v68 = *((void *)AddRecExpr + 4);
                  int __src = (llvm::SCEV *)&v74;
                  uint64_t v73 = 0x300000000;
                  unint64_t v65 = 8 * v32 - 8;
                  if (v65 >= 0x19) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v66 = 0;
                  if (v32 != 1)
                  {
                    memcpy(__src, (const void *)(v68 + 8), 8 * v32 - 8);
                    int v66 = v73;
                  }
                  LODWORD(v73) = v66 + (v65 >> 3);
                  uint64_t v33 = sub_1CD478318(v31, (uint64_t)&__src, *((const llvm::Loop **)AddRecExpr + 6), 0);
                  if (__src != (llvm::SCEV *)&v74) {
                    free(__src);
                  }
                }
                uint64_t AddRecExpr = (const llvm::SCEVAddRecExpr *)llvm::ScalarEvolution::getAddRecExpr(v31, (uint64_t)Constant, v33, *((const llvm::Loop **)AddRecExpr + 6), *((_WORD *)AddRecExpr + 14) & 1);
                break;
            }
            break;
          }
        }
        uint64_t v34 = *(llvm::ScalarEvolution **)this;
        uint64_t v35 = *((void *)AddRecExpr + 5);
        if (v35 == 2)
        {
          __int16 v36 = *(const llvm::SCEV **)(*((void *)AddRecExpr + 4) + 8);
        }
        else
        {
          uint64_t v67 = *((void *)AddRecExpr + 4);
          int __src = (llvm::SCEV *)&v74;
          uint64_t v73 = 0x300000000;
          unint64_t v63 = 8 * v35 - 8;
          if (v63 >= 0x19) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v64 = 0;
          if (v35 != 1)
          {
            memcpy(__src, (const void *)(v67 + 8), 8 * v35 - 8);
            int v64 = v73;
          }
          LODWORD(v73) = v64 + (v63 >> 3);
          __int16 v36 = (const llvm::SCEV *)sub_1CD478318(v34, (uint64_t)&__src, *((const llvm::Loop **)AddRecExpr + 6), 0);
          if (__src != (llvm::SCEV *)&v74) {
            free(__src);
          }
          uint64_t v34 = *(llvm::ScalarEvolution **)this;
        }
        if ((int)llvm::ScalarEvolution::getBlockDisposition(v34, v36, *v9[4]) <= 0)
        {
          uint64_t v37 = (uint64_t *)*((void *)AddRecExpr + 4);
          while (2)
          {
            uint64_t v38 = *v37;
            switch(*(_WORD *)(v38 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v39 = (llvm::Type **)(v38 + 40);
                goto LABEL_56;
              case 4:
                uint64_t v39 = (llvm::Type **)(v38 + 48);
                goto LABEL_56;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v37 = *(uint64_t **)(v38 + 32);
                continue;
              case 6:
                uint64_t v37 = (uint64_t *)(v38 + 40);
                continue;
              case 0xE:
                uint64_t v39 = *(llvm::Type ***)(v38 - 8);
                goto LABEL_56;
              default:
                uint64_t v39 = *(llvm::Type ***)(v38 + 32);
LABEL_56:
                unint64_t v40 = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)this, *v39, 1uLL, 0);
                if (llvm::SCEV::isZero(Constant))
                {
                  unint64_t v41 = (unint64_t)Constant;
                }
                else
                {
                  unint64_t v42 = (uint64_t *)*((void *)AddRecExpr + 4);
                  while (2)
                  {
                    uint64_t v43 = *v42;
                    switch(*(_WORD *)(v43 + 24))
                    {
                      case 1:
                      case 2:
                      case 3:
                      case 0xD:
                        unsigned int v44 = (llvm::Type **)(v43 + 40);
                        goto LABEL_70;
                      case 4:
                        unsigned int v44 = (llvm::Type **)(v43 + 48);
                        goto LABEL_70;
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                      case 0xA:
                      case 0xB:
                      case 0xC:
                        unint64_t v42 = *(uint64_t **)(v43 + 32);
                        continue;
                      case 6:
                        unint64_t v42 = (uint64_t *)(v43 + 40);
                        continue;
                      case 0xE:
                        unsigned int v44 = *(llvm::Type ***)(v43 - 8);
                        goto LABEL_70;
                      default:
                        unsigned int v44 = *(llvm::Type ***)(v43 + 32);
LABEL_70:
                        unint64_t v41 = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)this, *v44, 0, 0);
                        break;
                    }
                    break;
                  }
                }
                uint64_t AddRecExpr = (const llvm::SCEVAddRecExpr *)llvm::ScalarEvolution::getAddRecExpr(*(llvm::ScalarEvolution **)this, v41, v40, *((const llvm::Loop **)AddRecExpr + 6), *((_WORD *)AddRecExpr + 14) & 1);
                break;
            }
            break;
          }
        }
        else
        {
          __int16 v36 = 0;
        }
        if (v36) {
          uint64_t v45 = (llvm::Type *)v69;
        }
        else {
          uint64_t v45 = (llvm::Type *)v7;
        }
        BOOL v46 = sub_1CBFB72C8(*((void *)this + 1), v7);
        unsigned int v47 = v45;
        if (v46)
        {
          unint64_t v48 = (uint64_t *)*((void *)AddRecExpr + 4);
          while (2)
          {
            uint64_t v49 = *v48;
            switch(*(_WORD *)(v49 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                unint64_t v50 = (llvm::Type **)(v49 + 40);
                goto LABEL_83;
              case 4:
                unint64_t v50 = (llvm::Type **)(v49 + 48);
                goto LABEL_83;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                unint64_t v48 = *(uint64_t **)(v49 + 32);
                continue;
              case 6:
                unint64_t v48 = (uint64_t *)(v49 + 40);
                continue;
              case 0xE:
                unint64_t v50 = *(llvm::Type ***)(v49 - 8);
                goto LABEL_83;
              default:
                unint64_t v50 = *(llvm::Type ***)(v49 + 32);
LABEL_83:
                unsigned int v47 = *v50;
                break;
            }
            break;
          }
        }
        uint64_t v71 = 0;
        BOOL v70 = 0;
        llvm::SCEVExpander::getAddRecExprPHILiterally(this, AddRecExpr, (const llvm::Loop *)v9, v47, (llvm::Type *)v69, &v71, &v70);
    }
  }
}

llvm::Value *llvm::SCEVExpander::visitAddRecExpr(llvm::SCEVExpander *this, const llvm::SCEVAddRecExpr *a2)
{
  uint64_t v303 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 440) || *((void *)a2 + 5) >= 3uLL)
  {
    llvm::SCEVExpander::expandAddRecExprLiterally(this, a2);
  }
  uint64_t v4 = (uint64_t *)*((void *)a2 + 4);
  while (2)
  {
    uint64_t v5 = *v4;
    switch(*(_WORD *)(v5 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v6 = (uint64_t *)(v5 + 40);
        break;
      case 4:
        int v6 = (uint64_t *)(v5 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v4 = *(uint64_t **)(v5 + 32);
        continue;
      case 6:
        uint64_t v4 = (uint64_t *)(v5 + 40);
        continue;
      case 0xE:
        int v6 = *(uint64_t **)(v5 - 8);
        break;
      default:
        int v6 = *(uint64_t **)(v5 + 32);
        break;
    }
    break;
  }
  uint64_t v7 = *v6;
  unsigned int v8 = *(_DWORD *)(*v6 + 8);
  if (v8 != 13)
  {
    uint64_t v234 = *(void *)(**(void **)this + 40);
    if ((v8 & 0xFE) == 0x12) {
      unsigned int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
    }
    uint64_t v235 = *(void *)(v234 + 504);
    if (v8 < 0x100) {
      goto LABEL_362;
    }
    unsigned int v236 = v8 >> 8;
    unint64_t v237 = *(unsigned int *)(v234 + 512);
    uint64_t v238 = v235;
    if (v237)
    {
      uint64_t v238 = v235;
      unint64_t v239 = v237;
      do
      {
        unint64_t v240 = v239 >> 1;
        uint64_t v241 = v238 + 16 * (v239 >> 1);
        unsigned int v242 = *(_DWORD *)(v241 + 8);
        uint64_t v243 = v241 + 16;
        v239 += ~(v239 >> 1);
        if (v242 < v236) {
          uint64_t v238 = v243;
        }
        else {
          unint64_t v239 = v240;
        }
      }
      while (v239);
    }
    if (v238 == v235 + 16 * v237 || *(_DWORD *)(v238 + 8) != v236) {
LABEL_362:
    }
      uint64_t v238 = v235;
    uint64_t v244 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v7, (llvm::LLVMContext *)*(unsigned int *)(v238 + 12));
    if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
    {
      uint64_t v283 = (llvm::Type *)*(unsigned int *)(v7 + 32);
      if (*(_DWORD *)(v7 + 8) == 19) {
        llvm::ScalableVectorType::get(v244, v283);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v244, v283);
      }
    }
    uint64_t v7 = (uint64_t)v244;
  }
  uint64_t v9 = (llvm::Loop *)*((void *)a2 + 6);
  uint64_t CanonicalInductionVariable = llvm::Loop::getCanonicalInductionVariable(v9);
  if (!CanonicalInductionVariable) {
    goto LABEL_22;
  }
  uint64_t v11 = (llvm::Value *)CanonicalInductionVariable;
  uint64_t v12 = *(void *)CanonicalInductionVariable;
  unsigned int v13 = *(_DWORD *)(*(void *)CanonicalInductionVariable + 8);
  uint64_t v14 = *(void *)(**(void **)this + 40);
  if (v13 == 15)
  {
    if ((v13 & 0xFE) == 0x12) {
      unsigned int v13 = *(_DWORD *)(**(void **)(v12 + 16) + 8);
    }
    uint64_t v199 = *(void *)(v14 + 504);
    if (v13 < 0x100) {
      goto LABEL_322;
    }
    unsigned int v200 = v13 >> 8;
    unint64_t v201 = *(unsigned int *)(v14 + 512);
    uint64_t v202 = *(void *)(v14 + 504);
    if (v201)
    {
      uint64_t v202 = v199;
      unint64_t v203 = v201;
      do
      {
        unint64_t v204 = v203 >> 1;
        uint64_t v205 = v202 + 16 * (v203 >> 1);
        unsigned int v206 = *(_DWORD *)(v205 + 8);
        uint64_t v207 = v205 + 16;
        v203 += ~(v203 >> 1);
        if (v206 < v200) {
          uint64_t v202 = v207;
        }
        else {
          unint64_t v203 = v204;
        }
      }
      while (v203);
    }
    if (v202 == v199 + 16 * v201 || *(_DWORD *)(v202 + 8) != v200) {
LABEL_322:
    }
      uint64_t v202 = v199;
    unint64_t v16 = *(unsigned int *)(v202 + 12);
  }
  else
  {
    unint64_t v16 = sub_1CB83544C(v14 + 272, v12);
    if (v15 == 1) {
  }
    }
  unsigned int v17 = *(_DWORD *)(v7 + 8);
  uint64_t v18 = *(void *)(**(void **)this + 40);
  if (v17 == 15)
  {
    if ((v17 & 0xFE) == 0x12) {
      unsigned int v17 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
    }
    uint64_t v208 = *(void *)(v18 + 504);
    if (v17 < 0x100) {
      goto LABEL_335;
    }
    unsigned int v209 = v17 >> 8;
    unint64_t v210 = *(unsigned int *)(v18 + 512);
    uint64_t v211 = *(void *)(v18 + 504);
    if (v210)
    {
      uint64_t v211 = v208;
      unint64_t v212 = v210;
      do
      {
        unint64_t v213 = v212 >> 1;
        uint64_t v214 = v211 + 16 * (v212 >> 1);
        unsigned int v215 = *(_DWORD *)(v214 + 8);
        uint64_t v216 = v214 + 16;
        v212 += ~(v212 >> 1);
        if (v215 < v209) {
          uint64_t v211 = v216;
        }
        else {
          unint64_t v212 = v213;
        }
      }
      while (v212);
    }
    if (v211 == v208 + 16 * v210 || *(_DWORD *)(v211 + 8) != v209) {
LABEL_335:
    }
      uint64_t v211 = v208;
    unint64_t v20 = *(unsigned int *)(v211 + 12);
  }
  else
  {
    unint64_t v20 = sub_1CB83544C(v18 + 272, v7);
    if (v19 == 1) {
  }
    }
  if (v16 < v20)
  {
LABEL_22:
    int v21 = (llvm::SCEV **)*((void *)a2 + 4);
    BOOL v22 = *v21;
    if (llvm::SCEV::isZero(*v21))
    {
      uint64_t v23 = **((void **)v9 + 4);
      uint64_t v24 = *(void *)(v23 + 8);
      unint64_t v292 = v9;
      if (v24)
      {
        while (1)
        {
          uint64_t v25 = *(void *)(v24 + 24);
          unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
          BOOL v27 = v25 && v26 >= 0x1C;
          if (v27 && v26 - 29 <= 0xA) {
            break;
          }
          uint64_t v24 = *(void *)(v24 + 8);
          if (!v24) {
            goto LABEL_33;
          }
        }
        int v41 = 0;
        uint64_t v42 = v24;
LABEL_45:
        ++v41;
        while (1)
        {
          uint64_t v42 = *(void *)(v42 + 8);
          if (!v42) {
            break;
          }
          uint64_t v43 = *(void *)(v42 + 24);
          unsigned int v44 = *(unsigned __int8 *)(v43 + 16);
          if (v43) {
            BOOL v45 = v44 >= 0x1C;
          }
          else {
            BOOL v45 = 0;
          }
          if (v45 && v44 - 29 < 0xB) {
            goto LABEL_45;
          }
        }
        char v29 = 0;
      }
      else
      {
LABEL_33:
        int v41 = 0;
        char v29 = 1;
      }
      unint64_t v298 = (llvm::SCEV *)"indvar";
      v302[0] = 259;
      unsigned int v47 = *(uint64_t **)(v23 + 48);
      unint64_t v48 = operator new(0x48uLL);
      uint64_t v49 = v48;
      v48[1] = v7;
      uint64_t v11 = (llvm::Value *)(v48 + 1);
      void *v48 = 0;
      void v48[2] = 0;
      v48[3] = 0x4000000000000053;
      *((_OWORD *)v48 + 2) = 0u;
      unint64_t v50 = (char *)(v48 + 4);
      *((_OWORD *)v48 + 3) = 0u;
      *((_DWORD *)v48 + 16) = 0;
      if (v47)
      {
        uint64_t v217 = v47[2];
        v48[6] = v217;
        *(_WORD *)(v217 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v48 + 31) & 0x10) != 0)
        {
          uint64_t v271 = *(void *)(v217 + 56);
          if (v271)
          {
            uint64_t v272 = *(llvm::ValueSymbolTable **)(v271 + 104);
            if (v272) {
              llvm::ValueSymbolTable::reinsertValue(v272, v11);
            }
          }
        }
        uint64_t v218 = *v47;
        v49[4] = *v47;
        v49[5] = v47;
        *(void *)(v218 + 8) = v50;
        *unsigned int v47 = (uint64_t)v50;
      }
      *((_DWORD *)v49 + 17) = v41;
      llvm::Value::setNameImpl(v11, (const char **)&v298);
      uint64_t v51 = v292;
      if (*((unsigned char *)v49 + 24))
      {
LABEL_58:
        uint64_t v52 = *((unsigned int *)v49 + 17);
        unsigned int v53 = operator new(40 * v52);
        *uint64_t v49 = v53;
        if (v52)
        {
          unint64_t v54 = &v53[4 * v52];
          do
          {
            *unsigned int v53 = 0;
            v53[1] = 0;
            void v53[2] = 0;
            v53[3] = v11;
            v53 += 4;
          }
          while (v53 != v54);
        }
        llvm::SCEVExpander::rememberInstruction(this, v11);
        unint64_t v298 = (llvm::SCEV *)v302;
        uint64_t v299 = (uint64_t)v302;
        int v300 = (llvm::Type *)4;
        LODWORD(v301) = 0;
        uint64_t v291 = llvm::ConstantInt::get((llvm::ConstantInt *)v7, 1uLL, 0);
        if (v29)
        {
LABEL_62:
          if ((llvm::SCEV *)v299 != v298) {
            free((void *)v299);
          }
          goto LABEL_276;
        }
        unint64_t v57 = (unsigned int *)((char *)v292 + 76);
        uint64_t v58 = *(void *)(v24 + 24);
LABEL_65:
        uint64_t v59 = *(void *)(v58 + 40);
        uint64_t v60 = v299;
        uint64_t v61 = HIDWORD(v300);
        if ((llvm::SCEV *)v299 == v298)
        {
          if (HIDWORD(v300))
          {
            unint64_t v62 = 0;
            uint64_t v63 = 8 * HIDWORD(v300);
            int v64 = (uint64_t *)v299;
            while (*v64 != v59)
            {
              if (*v64 == -2) {
                unint64_t v62 = v64;
              }
              ++v64;
              v63 -= 8;
              if (!v63)
              {
                if (!v62) {
                  goto LABEL_73;
                }
                uint64_t *v62 = v59;
                LODWORD(v301) = v301 - 1;
                goto LABEL_97;
              }
            }
            goto LABEL_114;
          }
LABEL_73:
          uint64_t v55 = (llvm::Type *)v300;
          if (HIDWORD(v300) < v300)
          {
            ++HIDWORD(v300);
            *(void *)(v299 + 8 * v61) = v59;
            goto LABEL_97;
          }
        }
        else
        {
          uint64_t v55 = (llvm::Type *)v300;
        }
        if (3 * (int)v55 <= (4 * (HIDWORD(v300) - v301)))
        {
          if (v55 >= 0x40) {
            LODWORD(v55) = 2 * v55;
          }
          else {
            LODWORD(v55) = 128;
          }
        }
        else if ((int)v55 - HIDWORD(v300) >= v55 >> 3)
        {
          goto LABEL_78;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v298, v55);
        uint64_t v55 = (llvm::Type *)v300;
        uint64_t v60 = v299;
LABEL_78:
        int v65 = v55 - 1;
        unsigned int v66 = (v55 - 1) & ((v59 >> 4) ^ (v59 >> 9));
        uint64_t v67 = (uint64_t *)(v60 + 8 * v66);
        uint64_t v68 = *v67;
        if (*v67 == -1)
        {
          unsigned int v69 = 0;
LABEL_90:
          if (v69) {
            uint64_t v73 = v69;
          }
          else {
            uint64_t v73 = v67;
          }
          if (*v73 != v59)
          {
            if (*v73 == -2) {
              LODWORD(v301) = v301 - 1;
            }
            else {
              ++HIDWORD(v300);
            }
            *uint64_t v73 = v59;
LABEL_97:
            uint64_t v75 = *((void *)v51 + 7);
            uint64_t v74 = *((void *)v51 + 8);
            if (v74 == v75)
            {
              uint64_t v76 = *v57;
              unint64_t v77 = (void *)(v74 + 8 * v76);
              if (v76)
              {
                uint64_t v78 = 0;
                uint64_t v79 = 8 * v76;
                while (*(void *)(v74 + v78) != v59)
                {
                  v78 += 8;
                  if (v79 == v78) {
                    goto LABEL_125;
                  }
                }
                unint64_t v77 = (void *)(v74 + v78);
              }
LABEL_125:
              uint64_t v75 = *((void *)v51 + 8);
            }
            else
            {
              uint64_t v80 = *((unsigned int *)v292 + 18);
              int v81 = v80 - 1;
              unsigned int v82 = (v80 - 1) & ((v59 >> 4) ^ (v59 >> 9));
              unint64_t v77 = (void *)(v74 + 8 * v82);
              uint64_t v83 = *v77;
              if (*v77 == -1)
              {
                int v84 = 0;
LABEL_189:
                if (v84) {
                  unint64_t v77 = v84;
                }
                if (*v77 != v59) {
                  unint64_t v77 = (void *)(v74 + 8 * v80);
                }
              }
              else
              {
                int v84 = 0;
                int v85 = 1;
                while (v83 != v59)
                {
                  if (v84) {
                    BOOL v86 = 0;
                  }
                  else {
                    BOOL v86 = v83 == -2;
                  }
                  if (v86) {
                    int v84 = v77;
                  }
                  unsigned int v87 = v82 + v85++;
                  unsigned int v82 = v87 & v81;
                  unint64_t v77 = (void *)(v74 + 8 * (v87 & v81));
                  uint64_t v83 = *v77;
                  if (*v77 == -1) {
                    goto LABEL_189;
                  }
                }
              }
            }
            BOOL v71 = v74 == v75;
            uint64_t v102 = (unsigned int *)((char *)v292 + 72);
            if (v71) {
              uint64_t v102 = v57;
            }
            if (v77 == (void *)(v74 + 8 * *v102))
            {
              NullValue = llvm::Constant::getNullValue((llvm::Constant *)v7, v55, v56);
              int v108 = *((_DWORD *)v49 + 7);
              uint64_t v109 = v108 & 0x7FFFFFF;
              if ((v108 & 0x7FFFFFF) != *((_DWORD *)v49 + 17))
              {
LABEL_167:
                uint64_t v125 = (v108 + 1) & 0x7FFFFFF;
                *((_DWORD *)v49 + 7) = v108 & 0xF8000000 | (v108 + 1) & 0x7FFFFFF;
                if ((v108 & 0x40000000) != 0) {
                  int v126 = (char *)*v49;
                }
                else {
                  int v126 = (char *)v11 - 32 * v125;
                }
                uint64_t v127 = (v125 - 1);
                uint64_t v128 = &v126[32 * v127];
                if (*(void *)v128)
                {
                  **((void **)v128 + 2) = *((void *)v128 + 1);
                  uint64_t v137 = *((void *)v128 + 1);
                  if (v137) {
                    *(void *)(v137 + 16) = *((void *)v128 + 2);
                  }
                }
                *(void *)uint64_t v128 = NullValue;
                if (NullValue)
                {
                  uint64_t v131 = *((void *)NullValue + 1);
                  uint64_t v130 = (char **)((char *)NullValue + 8);
                  uint64_t v129 = v131;
                  int v132 = &v126[32 * v127];
                  *((void *)v132 + 1) = v131;
                  if (v131) {
                    *(void *)(v129 + 16) = v132 + 8;
                  }
                  *((void *)v132 + 2) = v130;
                  void *v130 = v128;
                }
                int v133 = *((_DWORD *)v49 + 7);
                uint64_t v100 = v133 & 0x7FFFFFF;
                if ((v133 & 0x40000000) != 0) {
                  uint64_t v101 = (char *)*v49;
                }
                else {
                  uint64_t v101 = (char *)v11 - 32 * v100;
                }
                goto LABEL_176;
              }
              LODWORD(v110) = v109 + (v109 >> 1);
              if (v110 <= 2) {
                uint64_t v110 = 2;
              }
              else {
                uint64_t v110 = v110;
              }
              uint64_t v287 = v110;
              *((_DWORD *)v49 + 17) = v110;
              if ((v108 & 0x40000000) != 0) {
                uint64_t v111 = (uint64_t *)*v49;
              }
              else {
                uint64_t v111 = (uint64_t *)((char *)v11 - 32 * v109);
              }
              __p = v111;
              int v112 = operator new(40 * v110);
              *uint64_t v49 = v112;
              uint64_t v113 = v112;
              do
              {
                void *v113 = 0;
                v113[1] = 0;
                v113[2] = 0;
                v113[3] = v11;
                v113 += 4;
              }
              while (v113 != &v112[4 * v287]);
              int v114 = *((_DWORD *)v49 + 7);
              if ((v114 & 0x40000000) != 0) {
                uint64_t v115 = (uint64_t)v112;
              }
              else {
                uint64_t v115 = (uint64_t)v11 - 32 * (v114 & 0x7FFFFFF);
              }
              uint64_t v284 = v115;
              sub_1CC5E4108((uint64_t)v295, __p, &__p[4 * v109], v115);
              if (v109)
              {
                memmove((void *)(v284 + 32 * v287), &__p[4 * v109], 8 * v109);
                uint64_t v116 = 4 * v109;
                do
                {
                  uint64_t v117 = &__p[v116];
                  if (__p[v116 - 4])
                  {
                    *(void *)*(v117 - 2) = *(v117 - 3);
                    uint64_t v118 = *(v117 - 3);
                    if (v118) {
                      *(void *)(v118 + 16) = *(v117 - 2);
                    }
                  }
                  v116 -= 4;
                }
                while (v116 * 8);
              }
LABEL_209:
              operator delete(__p);
              int v108 = *((_DWORD *)v49 + 7);
              unint64_t v57 = (unsigned int *)((char *)v292 + 76);
              goto LABEL_167;
            }
            v295[0] = "indvar.next";
            __int16 v297 = 259;
            uint64_t v104 = (void *)(v59 + 40);
            uint64_t v103 = *(void *)(v59 + 40);
            if (v103 == v59 + 40)
            {
              uint64_t v106 = 0;
            }
            else
            {
              if (v103) {
                uint64_t v105 = v103 - 24;
              }
              else {
                uint64_t v105 = 0;
              }
              if (*(unsigned __int8 *)(v105 + 16) - 29 >= 0xB) {
                uint64_t v106 = 0;
              }
              else {
                uint64_t v106 = v105;
              }
            }
            NullValue = llvm::BinaryOperator::Create(13, v11, (uint64_t)v291, (const char **)v295, v106);
            if (*v104) {
              uint64_t v119 = *v104 - 24;
            }
            else {
              uint64_t v119 = 0;
            }
            if (*(unsigned __int8 *)(v119 + 16) - 29 >= 0xB) {
              uint64_t v119 = 0;
            }
            int v120 = *(unsigned __int8 **)(v119 + 48);
            uint64_t v293 = v120;
            if (v120) {
              llvm::MetadataTracking::track((uint64_t)&v293, v120, 2);
            }
            uint64_t v121 = (unsigned __int8 **)((char *)NullValue + 48);
            unint64_t v57 = (unsigned int *)((char *)v292 + 76);
            if (&v293 != (unsigned __int8 **)((char *)NullValue + 48))
            {
              uint64_t v122 = *v121;
              if (!*v121) {
                goto LABEL_164;
              }
              int v148 = *v122;
              if ((v148 - 4) > 0x1E)
              {
                if ((v148 - 3) >= 0xFFFFFFFE) {
                  uint64_t v161 = *v121;
                }
                else {
                  uint64_t v161 = 0;
                }
                if ((v148 - 3) < 0xFFFFFFFE)
                {
                  if (v148 == 3) {
                    *((void *)v122 + 1) = 0;
                  }
                  goto LABEL_164;
                }
                unint64_t v150 = (unint64_t)(v161 + 8);
              }
              else if ((v122[1] & 0x7F) != 2 && !*((_DWORD *)v122 + 3) {
                     || (uint64_t v149 = *((void *)v122 + 2), (v149 & 4) == 0)
              }
                     || (unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
LABEL_164:
                unsigned int v123 = v293;
                *uint64_t v121 = v293;
                if (v123)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v293, v123, (uint64_t)NullValue + 48);
                  uint64_t v293 = 0;
                }
                goto LABEL_166;
              }
              v295[0] = (char *)NullValue + 48;
              sub_1CC5FA668(v150 + 16, v295);
              goto LABEL_164;
            }
            if (v293)
            {
              int v162 = *v293;
              if ((v162 - 4) > 0x1E)
              {
                if ((v162 - 3) >= 0xFFFFFFFE) {
                  uint64_t v165 = v293;
                }
                else {
                  uint64_t v165 = 0;
                }
                if ((v162 - 3) < 0xFFFFFFFE)
                {
                  unint64_t v57 = (unsigned int *)((char *)v292 + 76);
                  if (v162 == 3) {
                    *((void *)v293 + 1) = 0;
                  }
                  goto LABEL_166;
                }
                unint64_t v164 = (unint64_t)(v165 + 8);
              }
              else
              {
                unint64_t v57 = (unsigned int *)((char *)v292 + 76);
                if ((v293[1] & 0x7F) != 2 && !*((_DWORD *)v293 + 3)) {
                  goto LABEL_166;
                }
                uint64_t v163 = *((void *)v293 + 2);
                if ((v163 & 4) == 0) {
                  goto LABEL_166;
                }
                unint64_t v164 = v163 & 0xFFFFFFFFFFFFFFF8;
                if (!v164) {
                  goto LABEL_166;
                }
              }
              v295[0] = &v293;
              sub_1CC5FA668(v164 + 16, v295);
              unint64_t v57 = (unsigned int *)((char *)v292 + 76);
            }
LABEL_166:
            llvm::SCEVExpander::rememberInstruction(this, NullValue);
            int v108 = *((_DWORD *)v49 + 7);
            uint64_t v124 = v108 & 0x7FFFFFF;
            if ((v108 & 0x7FFFFFF) != *((_DWORD *)v49 + 17)) {
              goto LABEL_167;
            }
            unsigned int v138 = v124 + (v124 >> 1);
            if (v138 <= 2) {
              uint64_t v139 = 2;
            }
            else {
              uint64_t v139 = v138;
            }
            *((_DWORD *)v49 + 17) = v139;
            if ((v108 & 0x40000000) != 0) {
              size_t v140 = (uint64_t *)*v49;
            }
            else {
              size_t v140 = (uint64_t *)((char *)v11 - 32 * v124);
            }
            __p = v140;
            uint64_t v141 = operator new(40 * v139);
            *uint64_t v49 = v141;
            uint64_t v142 = v141;
            do
            {
              void *v142 = 0;
              v142[1] = 0;
              v142[2] = 0;
              v142[3] = v11;
              v142 += 4;
            }
            while (v142 != &v141[4 * v139]);
            int v143 = *((_DWORD *)v49 + 7);
            if ((v143 & 0x40000000) != 0) {
              uint64_t v144 = (uint64_t)v141;
            }
            else {
              uint64_t v144 = (uint64_t)v11 - 32 * (v143 & 0x7FFFFFF);
            }
            uint64_t v285 = v144;
            sub_1CC5E4108((uint64_t)v295, __p, &__p[4 * v124], v144);
            if (v124)
            {
              memmove((void *)(v285 + 32 * v139), &__p[4 * v124], 8 * v124);
              uint64_t v145 = 4 * v124;
              do
              {
                uint64_t v146 = &__p[v145];
                if (__p[v145 - 4])
                {
                  *(void *)*(v146 - 2) = *(v146 - 3);
                  uint64_t v147 = *(v146 - 3);
                  if (v147) {
                    *(void *)(v147 + 16) = *(v146 - 2);
                  }
                }
                v145 -= 4;
              }
              while (v145 * 8);
            }
            goto LABEL_209;
          }
        }
        else
        {
          unsigned int v69 = 0;
          int v70 = 1;
          while (v68 != v59)
          {
            if (v69) {
              BOOL v71 = 0;
            }
            else {
              BOOL v71 = v68 == -2;
            }
            if (v71) {
              unsigned int v69 = v67;
            }
            unsigned int v72 = v66 + v70++;
            unsigned int v66 = v72 & v65;
            uint64_t v67 = (uint64_t *)(v60 + 8 * (v72 & v65));
            uint64_t v68 = *v67;
            if (*v67 == -1) {
              goto LABEL_90;
            }
          }
        }
LABEL_114:
        uint64_t v88 = sub_1CBF73380((uint64_t)v11, v59);
        int v89 = *((_DWORD *)v49 + 7);
        uint64_t v90 = v89 & 0x7FFFFFF;
        if ((v89 & 0x7FFFFFF) == *((_DWORD *)v49 + 17))
        {
          LODWORD(v152) = v90 + (v90 >> 1);
          if (v152 <= 2) {
            uint64_t v152 = 2;
          }
          else {
            uint64_t v152 = v152;
          }
          uint64_t v288 = v152;
          *((_DWORD *)v49 + 17) = v152;
          if ((v89 & 0x40000000) != 0) {
            int v153 = (uint64_t *)*v49;
          }
          else {
            int v153 = (uint64_t *)((char *)v11 - 32 * v90);
          }
          __pa = v153;
          uint64_t v154 = operator new(40 * v152);
          *uint64_t v49 = v154;
          int v155 = v154;
          do
          {
            void *v155 = 0;
            v155[1] = 0;
            v155[2] = 0;
            v155[3] = v11;
            v155 += 4;
          }
          while (v155 != &v154[4 * v288]);
          int v156 = *((_DWORD *)v49 + 7);
          if ((v156 & 0x40000000) != 0) {
            uint64_t v157 = (uint64_t)v154;
          }
          else {
            uint64_t v157 = (uint64_t)v11 - 32 * (v156 & 0x7FFFFFF);
          }
          uint64_t v286 = v157;
          sub_1CC5E4108((uint64_t)v295, __pa, &__pa[4 * v90], v157);
          if (v90)
          {
            memmove((void *)(v286 + 32 * v288), &__pa[4 * v90], 8 * v90);
            uint64_t v158 = 4 * v90;
            do
            {
              unsigned int v159 = &__pa[v158];
              if (__pa[v158 - 4])
              {
                *(void *)*(v159 - 2) = *(v159 - 3);
                uint64_t v160 = *(v159 - 3);
                if (v160) {
                  *(void *)(v160 + 16) = *(v159 - 2);
                }
              }
              v158 -= 4;
            }
            while (v158 * 8);
          }
          operator delete(__pa);
          int v89 = *((_DWORD *)v49 + 7);
          unint64_t v57 = (unsigned int *)((char *)v292 + 76);
        }
        uint64_t v91 = (v89 + 1) & 0x7FFFFFF;
        *((_DWORD *)v49 + 7) = v89 & 0xF8000000 | (v89 + 1) & 0x7FFFFFF;
        if ((v89 & 0x40000000) != 0) {
          uint64_t v92 = (char *)*v49;
        }
        else {
          uint64_t v92 = (char *)v11 - 32 * v91;
        }
        uint64_t v93 = (v91 - 1);
        uint64_t v94 = &v92[32 * v93];
        if (*(void *)v94)
        {
          **((void **)v94 + 2) = *((void *)v94 + 1);
          uint64_t v151 = *((void *)v94 + 1);
          if (v151) {
            *(void *)(v151 + 16) = *((void *)v94 + 2);
          }
        }
        *(void *)uint64_t v94 = v88;
        if (v88)
        {
          uint64_t v97 = *(void *)(v88 + 8);
          unsigned int v96 = (char **)(v88 + 8);
          uint64_t v95 = v97;
          uint64_t v98 = &v92[32 * v93];
          *((void *)v98 + 1) = v97;
          if (v97) {
            *(void *)(v95 + 16) = v98 + 8;
          }
          *((void *)v98 + 2) = v96;
          *unsigned int v96 = v94;
        }
        int v99 = *((_DWORD *)v49 + 7);
        uint64_t v100 = v99 & 0x7FFFFFF;
        if ((v99 & 0x40000000) != 0) {
          uint64_t v101 = (char *)*v49;
        }
        else {
          uint64_t v101 = (char *)v11 - 32 * v100;
        }
LABEL_176:
        uint64_t v51 = v292;
        *(void *)&v101[32 * *((unsigned int *)v49 + 17) + 8 * (v100 - 1)] = v59;
        while (1)
        {
          uint64_t v24 = *(void *)(v24 + 8);
          if (!v24) {
            goto LABEL_62;
          }
          uint64_t v58 = *(void *)(v24 + 24);
          unsigned int v134 = *(unsigned __int8 *)(v58 + 16);
          if (v58) {
            BOOL v135 = v134 >= 0x1C;
          }
          else {
            BOOL v135 = 0;
          }
          if (v135 && v134 - 29 < 0xB) {
            goto LABEL_65;
          }
        }
      }
      if ((*((unsigned char *)v49 + 31) & 0x10) == 0) {
        goto LABEL_416;
      }
      uint64_t v263 = ***(void ***)v11;
      uint64_t v264 = *(void *)(v263 + 152);
      uint64_t v265 = *(unsigned int *)(v263 + 168);
      if (v265)
      {
        LODWORD(v266) = (v265 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        int64_t v267 = (llvm::Value **)(v264 + 16 * v266);
        int64_t v268 = *v267;
        if (*v267 == v11)
        {
LABEL_409:
          uint64_t v276 = v267[1];
          unint64_t v279 = *(void *)v276;
          uint64_t v277 = (char *)v276 + 16;
          unint64_t v278 = v279;
          if (v279 >= 5 && *(_DWORD *)v277 == *(_DWORD *)"llvm." && v277[4] == aLlvm_1[4])
          {
            *((_DWORD *)v49 + 10) |= 0x2000u;
            int v281 = llvm::Function::lookupIntrinsicID(v277, v278);
LABEL_417:
            *((_DWORD *)v49 + 11) = v281;
            goto LABEL_58;
          }
LABEL_416:
          int v281 = 0;
          *((_DWORD *)v49 + 10) &= ~0x2000u;
          goto LABEL_417;
        }
        int v269 = 1;
        while (v268 != (llvm::Value *)-4096)
        {
          int v270 = v266 + v269++;
          uint64_t v266 = v270 & (v265 - 1);
          int64_t v268 = *(llvm::Value **)(v264 + 16 * v266);
          if (v268 == v11)
          {
            int64_t v267 = (llvm::Value **)(v264 + 16 * v266);
            goto LABEL_409;
          }
        }
      }
      int64_t v267 = (llvm::Value **)(v264 + 16 * v265);
      goto LABEL_409;
    }
    goto LABEL_281;
  }
  uint64_t v30 = *(void *)v11;
  unsigned int v31 = *(_DWORD *)(*(void *)v11 + 8);
  uint64_t v32 = *(void *)(**(void **)this + 40);
  if (v31 == 15)
  {
    if ((v31 & 0xFE) == 0x12) {
      unsigned int v31 = *(_DWORD *)(**(void **)(v30 + 16) + 8);
    }
    uint64_t v245 = *(void *)(v32 + 504);
    if (v31 < 0x100) {
      goto LABEL_376;
    }
    unsigned int v246 = v31 >> 8;
    unint64_t v247 = *(unsigned int *)(v32 + 512);
    uint64_t v248 = *(void *)(v32 + 504);
    if (v247)
    {
      uint64_t v248 = v245;
      unint64_t v249 = v247;
      do
      {
        unint64_t v250 = v249 >> 1;
        uint64_t v251 = v248 + 16 * (v249 >> 1);
        unsigned int v252 = *(_DWORD *)(v251 + 8);
        uint64_t v253 = v251 + 16;
        v249 += ~(v249 >> 1);
        if (v252 < v246) {
          uint64_t v248 = v253;
        }
        else {
          unint64_t v249 = v250;
        }
      }
      while (v249);
    }
    if (v248 == v245 + 16 * v247 || *(_DWORD *)(v248 + 8) != v246) {
LABEL_376:
    }
      uint64_t v248 = v245;
    unint64_t v34 = *(unsigned int *)(v248 + 12);
  }
  else
  {
    unint64_t v34 = sub_1CB83544C(v32 + 272, v30);
    if (v33 == 1) {
  }
    }
  unsigned int v35 = *(_DWORD *)(v7 + 8);
  uint64_t v36 = *(void *)(**(void **)this + 40);
  if (v35 == 15)
  {
    if ((v35 & 0xFE) == 0x12) {
      unsigned int v35 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
    }
    uint64_t v254 = *(void *)(v36 + 504);
    if (v35 < 0x100) {
      goto LABEL_389;
    }
    unsigned int v255 = v35 >> 8;
    unint64_t v256 = *(unsigned int *)(v36 + 512);
    uint64_t v257 = *(void *)(v36 + 504);
    if (v256)
    {
      uint64_t v257 = v254;
      unint64_t v258 = v256;
      do
      {
        unint64_t v259 = v258 >> 1;
        uint64_t v260 = v257 + 16 * (v258 >> 1);
        unsigned int v261 = *(_DWORD *)(v260 + 8);
        uint64_t v262 = v260 + 16;
        v258 += ~(v258 >> 1);
        if (v261 < v255) {
          uint64_t v257 = v262;
        }
        else {
          unint64_t v258 = v259;
        }
      }
      while (v258);
    }
    if (v257 == v254 + 16 * v256 || *(_DWORD *)(v257 + 8) != v255) {
LABEL_389:
    }
      uint64_t v257 = v254;
    unint64_t v38 = *(unsigned int *)(v257 + 12);
  }
  else
  {
    unint64_t v38 = sub_1CB83544C(v36 + 272, v7);
    if (v37 == 1) {
  }
    }
  int v21 = (llvm::SCEV **)*((void *)a2 + 4);
  if (v34 > v38)
  {
    uint64_t v39 = (uint64_t *)*((void *)a2 + 4);
    while (2)
    {
      uint64_t v40 = *v39;
      switch(*(_WORD *)(v40 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v166 = v40 + 40;
          break;
        case 4:
          uint64_t v166 = v40 + 48;
          break;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          uint64_t v39 = *(uint64_t **)(v40 + 32);
          continue;
        case 6:
          uint64_t v39 = (uint64_t *)(v40 + 40);
          continue;
        case 0xE:
          uint64_t v166 = *(void *)(v40 - 8);
          break;
        default:
          uint64_t v166 = *(void *)(v40 + 32);
          break;
      }
      break;
    }
    if (*(unsigned char *)(*(void *)v166 + 8) != 15)
    {
      unint64_t v219 = *((void *)a2 + 5);
      unint64_t v298 = (llvm::SCEV *)&v300;
      uint64_t v299 = 0x400000000;
      sub_1CD676A68((uint64_t)&v298, v219);
      if (*((_DWORD *)a2 + 10))
      {
        uint64_t v220 = 0;
        uint64_t v221 = 8 * *((unsigned int *)a2 + 10);
        do
        {
          AnyExtendExpr = llvm::ScalarEvolution::getAnyExtendExpr(*(llvm::ScalarEvolution **)this, *(const llvm::SCEV **)(*((void *)a2 + 4) + v220), *(llvm::Type **)v11);
          *(void *)((char *)v298 + v220) = AnyExtendExpr;
          v220 += 8;
        }
        while (v221 != v220);
      }
      uint64_t AddRecExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(*(llvm::ScalarEvolution **)this, (uint64_t **)&v298, *((const llvm::Loop **)a2 + 6), *((_WORD *)a2 + 14) & 1);
      uint64_t v224 = (llvm::Instruction *)llvm::SCEVExpander::expand(this, AddRecExpr);
      uint64_t v225 = *((void *)this + 63);
      if (v225) {
        unsigned int v226 = (llvm::Instruction *)(v225 - 24);
      }
      else {
        unsigned int v226 = 0;
      }
      uint64_t InsertPointAfter = llvm::SCEVExpander::findInsertPointAfter(this, v224, v226);
      uint64_t v228 = *(llvm::ScalarEvolution **)this;
      unint64_t Unknown = (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)this, v224);
      TruncateExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(v228, Unknown, (llvm::Type *)v7, 0);
      uint64_t v231 = 0;
      uint64_t v232 = InsertPointAfter - 24;
      if (!InsertPointAfter) {
        uint64_t v232 = 0;
      }
      *((void *)this + 62) = *(void *)(v232 + 40);
      *((void *)this + 63) = v232 + 24;
      BOOL v233 = *(unsigned __int8 **)(v232 + 48);
      unsigned int v294 = v233;
      if (v233)
      {
        llvm::MetadataTracking::track((uint64_t)&v294, v233, 2);
        uint64_t v231 = (uint64_t)v294;
      }
      sub_1CB8461A4((uint64_t)this + 448, 0, v231);
      if (!v294) {
        goto LABEL_350;
      }
      int v273 = *v294;
      if ((v273 - 4) > 0x1E)
      {
        if ((v273 - 3) >= 0xFFFFFFFE) {
          uint64_t v282 = v294;
        }
        else {
          uint64_t v282 = 0;
        }
        if ((v273 - 3) < 0xFFFFFFFE)
        {
          if (v273 == 3) {
            *((void *)v294 + 1) = 0;
          }
          goto LABEL_350;
        }
        unint64_t v275 = (unint64_t)(v282 + 8);
      }
      else
      {
        if ((v294[1] & 0x7F) != 2 && !*((_DWORD *)v294 + 3)) {
          goto LABEL_350;
        }
        uint64_t v274 = *((void *)v294 + 2);
        if ((v274 & 4) == 0) {
          goto LABEL_350;
        }
        unint64_t v275 = v274 & 0xFFFFFFFFFFFFFFF8;
        if (!v275) {
          goto LABEL_350;
        }
      }
      v295[0] = &v294;
      sub_1CC5FA668(v275 + 16, v295);
LABEL_350:
      uint64_t v193 = llvm::SCEVExpander::expandCodeForImpl(this, TruncateExpr, 0, 0);
LABEL_301:
      uint64_t v11 = (llvm::Value *)v193;
      if (v298 != (llvm::SCEV *)&v300) {
        free(v298);
      }
      return v11;
    }
  }
  BOOL v22 = *v21;
  if (!llvm::SCEV::isZero(*v21))
  {
LABEL_281:
    while (2)
    {
      switch(*((_WORD *)v22 + 12))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v174 = (llvm::PointerType **)((char *)v22 + 40);
          goto LABEL_288;
        case 4:
          uint64_t v174 = (llvm::PointerType **)((char *)v22 + 48);
          goto LABEL_288;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          unsigned int v173 = (llvm::SCEV **)*((void *)v22 + 4);
          goto LABEL_283;
        case 6:
          unsigned int v173 = (llvm::SCEV **)((char *)v22 + 40);
LABEL_283:
          BOOL v22 = *v173;
          continue;
        case 0xE:
          uint64_t v174 = (llvm::PointerType **)*((void *)v22 - 1);
          goto LABEL_288;
        default:
          uint64_t v174 = (llvm::PointerType **)*((void *)v22 + 4);
LABEL_288:
          int v175 = *v174;
          int v176 = *((unsigned __int8 *)*v174 + 8);
          if (v175) {
            BOOL v177 = v176 == 15;
          }
          else {
            BOOL v177 = 0;
          }
          if (v177)
          {
            PointerBase = llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)this, a2);
            uint64_t v180 = (llvm::Value *)llvm::SCEVExpander::expand(this, PointerBase);
            unint64_t v298 = (llvm::SCEV *)llvm::ScalarEvolution::removePointerBase(*(llvm::ScalarEvolution **)this, a2, v181);
            return (llvm::Value *)llvm::SCEVExpander::expandAddToGEP(this, &v298, (const llvm::SCEV *const *)&v299, v175, (llvm::Type *)v7, v180);
          }
          unint64_t v178 = *((void *)a2 + 5);
          unint64_t v298 = (llvm::SCEV *)&v300;
          uint64_t v299 = 0x400000000;
          if (v178 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v178)
          {
            memcpy(&v300, v21, 8 * v178);
            int v183 = v299;
          }
          else
          {
            int v183 = 0;
          }
          LODWORD(v299) = v183 + v178;
          *(void *)unint64_t v298 = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)this, (llvm::Type *)v7, 0, 0);
          uint64_t v184 = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(*(llvm::ScalarEvolution **)this, (uint64_t **)&v298, v9, *((_WORD *)a2 + 14) & 1);
          unsigned int v185 = *(llvm::ScalarEvolution **)this;
          uint64_t v186 = (llvm::Value *)llvm::SCEVExpander::expand(this, **((const llvm::SCEV ***)a2 + 4));
          unint64_t v187 = llvm::ScalarEvolution::getUnknown(v185, v186);
          int v188 = *(llvm::ScalarEvolution **)this;
          int v189 = (llvm::Value *)llvm::SCEVExpander::expand(this, v184);
          unint64_t v190 = llvm::ScalarEvolution::getUnknown(v188, v189);
          uint64_t v191 = *(void *)this;
          v295[0] = v296;
          v296[0] = v187;
          v296[1] = v190;
          v295[1] = (void *)0x200000002;
          unint64_t AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(v191, (unint64_t **)v295, 0, 0);
          if (v295[0] != v296) {
            free(v295[0]);
          }
          uint64_t v193 = llvm::SCEVExpander::expand(this, AddExpr);
          break;
      }
      goto LABEL_301;
    }
  }
LABEL_276:
  if (*((void *)a2 + 5) == 2)
  {
    if (llvm::SCEV::isOne(*(llvm::SCEV **)(*((void *)a2 + 4) + 8))) {
      return v11;
    }
    uint64_t v167 = *(void *)this;
    uint64_t v168 = (llvm::Type *)llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)this, v11);
    NoopOrAnyExtend = llvm::ScalarEvolution::getNoopOrAnyExtend(*(llvm::ScalarEvolution **)this, *(const llvm::SCEV **)(*((void *)a2 + 4) + 8), *(llvm::Type **)v11);
    unint64_t v298 = (llvm::SCEV *)&v300;
    int v300 = v168;
    int v301 = NoopOrAnyExtend;
    uint64_t v299 = 0x200000002;
    uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(v167, (uint64_t)&v298, 0, 0);
    if (v298 != (llvm::SCEV *)&v300) {
      free(v298);
    }
    uint64_t v171 = (llvm::ScalarEvolution *)v167;
    int v172 = (const llvm::SCEV *)MulExpr;
  }
  else
  {
    uint64_t v195 = (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)this, v11);
    int v196 = llvm::ScalarEvolution::getNoopOrAnyExtend(*(llvm::ScalarEvolution **)this, a2, *(llvm::Type **)v11);
    if (*((_WORD *)v196 + 12) == 7) {
      int v197 = v196;
    }
    else {
      int v197 = a2;
    }
    int v172 = (const llvm::SCEV *)llvm::SCEVAddRecExpr::evaluateAtIteration(*((uint64_t **)v197 + 4), *((void *)v197 + 5), v195, *(llvm::ScalarEvolution **)this);
    uint64_t v171 = *(llvm::ScalarEvolution **)this;
  }
  TruncateOrNoop = llvm::ScalarEvolution::getTruncateOrNoop(v171, v172, (llvm::Type *)v7);
  return (llvm::Value *)llvm::SCEVExpander::expand(this, TruncateOrNoop);
}

uint64_t llvm::SCEVExpander::fixupLCSSAFormFor(llvm::SCEVExpander *this, llvm::Instruction *a2, unsigned int a3)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  unint64_t v38 = v41;
  int v40 = 1;
  int v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0) {
    int v6 = (char *)*((void *)a2 - 1);
  }
  else {
    int v6 = (char *)a2 - 32 * (v5 & 0x7FFFFFF);
  }
  uint64_t v7 = *(void *)&v6[32 * a3];
  if (v7) {
    BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return v7;
  }
  uint64_t v9 = *(uint64_t **)this;
  uint64_t v10 = *(void *)(*(void *)this + 40);
  int v11 = *(_DWORD *)(v10 + 16);
  if (!v11) {
    return v7;
  }
  uint64_t v12 = *(void *)(v7 + 40);
  uint64_t v13 = *(void *)v10;
  unsigned int v14 = v11 - 1;
  uint64_t v15 = ((v12 >> 4) ^ (v12 >> 9)) & v14;
  uint64_t v16 = *(void *)(*(void *)v10 + 16 * v15);
  if (v12 == v16)
  {
LABEL_14:
    uint64_t v19 = *(void **)(v13 + 16 * v15 + 8);
  }
  else
  {
    int v17 = 1;
    while (v16 != -4096)
    {
      int v18 = v15 + v17++;
      uint64_t v15 = v18 & v14;
      uint64_t v16 = *(void *)(v13 + 16 * v15);
      if (v12 == v16) {
        goto LABEL_14;
      }
    }
    uint64_t v19 = 0;
  }
  uint64_t v20 = *((void *)a2 + 5);
  uint64_t v21 = ((v20 >> 4) ^ (v20 >> 9)) & v14;
  uint64_t v22 = *(void *)(v13 + 16 * v21);
  if (v20 == v22)
  {
LABEL_20:
    uint64_t v25 = *(void **)(v13 + 16 * v21 + 8);
    if (!v19) {
      return v7;
    }
    goto LABEL_23;
  }
  int v23 = 1;
  while (v22 != -4096)
  {
    int v24 = v21 + v23++;
    uint64_t v21 = v24 & v14;
    uint64_t v22 = *(void *)(v13 + 16 * v21);
    if (v20 == v22) {
      goto LABEL_20;
    }
  }
  uint64_t v25 = 0;
  if (v19)
  {
LABEL_23:
    if (v25 != v19)
    {
      uint64_t v26 = a3;
      while (v25)
      {
        uint64_t v25 = (void *)*v25;
        if (v25 == v19) {
          return v7;
        }
      }
      v41[0] = v7;
      int v39 = 1;
      unsigned int v35 = v37;
      uint64_t v36 = 0x1000000000;
      llvm::formLCSSAForInstructions((uint64_t)&v38, v9[4], (uint64_t *)v10, (llvm::ScalarEvolution *)v9, (uint64_t)this + 448, (unsigned int *)&v35);
      if (v36)
      {
        BOOL v27 = (char *)v35;
        uint64_t v28 = 8 * v36;
        do
        {
          uint64_t v29 = *(void *)v27;
          if (!*(void *)(*(void *)v27 + 8))
          {
            uint64_t v33 = *(void *)v27;
            unint64_t v34 = 0;
            if (sub_1CCE12E8C((uint64_t *)this + 7, &v33, &v34))
            {
              void *v34 = -8192;
              *((int32x2_t *)this + 8) = vadd_s32(*(int32x2_t *)((char *)this + 64), (int32x2_t)0x1FFFFFFFFLL);
            }
            uint64_t v33 = v29;
            unint64_t v34 = 0;
            if (sub_1CCE12E8C((uint64_t *)this + 10, &v33, &v34))
            {
              void *v34 = -8192;
              *((int32x2_t *)this + 11) = vadd_s32(*(int32x2_t *)((char *)this + 88), (int32x2_t)0x1FFFFFFFFLL);
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          v27 += 8;
          v28 -= 8;
        }
        while (v28);
      }
      int v30 = *((_DWORD *)a2 + 5);
      if ((v30 & 0x40000000) != 0) {
        unsigned int v31 = (char *)*((void *)a2 - 1);
      }
      else {
        unsigned int v31 = (char *)a2 - 32 * (v30 & 0x7FFFFFF);
      }
      uint64_t v7 = *(void *)&v31[32 * v26];
      if (v35 != v37) {
        free(v35);
      }
      if (v38 != v41) {
        free(v38);
      }
    }
  }
  return v7;
}

const llvm::Value *llvm::SCEVExpander::FindValueInExprValueMap(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Instruction *a3)
{
  if (*((unsigned char *)this + 440) || !llvm::ScalarEvolution::containsAddRecurrence(*this, a2))
  {
    if (*((_WORD *)a2 + 12))
    {
      SCEVValues = llvm::ScalarEvolution::getSCEVValues(*this, a2);
      if (v7)
      {
        BOOL v8 = (const llvm::Value **)SCEVValues;
        uint64_t v9 = (const llvm::Value **)((char *)SCEVValues + 8 * v7);
        do
        {
          uint64_t v10 = *v8;
          if (*v8) {
            BOOL v11 = *((unsigned __int8 *)*v8 + 16) >= 0x1Cu;
          }
          else {
            BOOL v11 = 0;
          }
          if (v11)
          {
            uint64_t v12 = a2;
            while (2)
            {
              switch(*((_WORD *)v12 + 12))
              {
                case 1:
                case 2:
                case 3:
                case 0xD:
                  unsigned int v14 = (void *)((char *)v12 + 40);
                  goto LABEL_19;
                case 4:
                  unsigned int v14 = (void *)((char *)v12 + 48);
                  goto LABEL_19;
                case 5:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                  uint64_t v13 = (const llvm::SCEV **)*((void *)v12 + 4);
                  goto LABEL_14;
                case 6:
                  uint64_t v13 = (const llvm::SCEV **)((char *)v12 + 40);
LABEL_14:
                  uint64_t v12 = *v13;
                  continue;
                case 0xE:
                  unsigned int v14 = (void *)*((void *)v12 - 1);
                  goto LABEL_19;
                default:
                  unsigned int v14 = (void *)*((void *)v12 + 4);
LABEL_19:
                  if (*v14 != *(void *)v10
                    || !llvm::DominatorTree::dominates(*((llvm::DominatorTree **)*this + 4), *v8, a3))
                  {
                    goto LABEL_58;
                  }
                  uint64_t v15 = (uint64_t *)*((void *)*this + 5);
                  int v16 = *((_DWORD *)v15 + 4);
                  if (!v16) {
                    return v10;
                  }
                  uint64_t v17 = *((void *)v10 + 5);
                  uint64_t v18 = *v15;
                  unsigned int v19 = v16 - 1;
                  uint64_t v20 = ((v17 >> 4) ^ (v17 >> 9)) & (v16 - 1);
                  unint64_t v21 = v18 + 16 * v20;
                  uint64_t v22 = *(void *)v21;
                  if (v17 == *(void *)v21)
                  {
                    if (!*(void *)(v21 + 8)) {
                      return v10;
                    }
LABEL_32:
                    uint64_t v28 = *(void *)(v18 + 16 * v20 + 8);
                  }
                  else
                  {
                    int v23 = 1;
                    uint64_t v24 = *(void *)v21;
                    LODWORD(v21) = ((v17 >> 4) ^ (v17 >> 9)) & v19;
                    do
                    {
                      if (v24 == -4096) {
                        return v10;
                      }
                      int v25 = v21 + v23++;
                      unint64_t v21 = v25 & v19;
                      uint64_t v24 = *(void *)(v18 + 16 * v21);
                    }
                    while (v17 != v24);
                    if (!*(void *)(v18 + 16 * v21 + 8)) {
                      return v10;
                    }
                    int v26 = 1;
                    while (v22 != -4096)
                    {
                      int v27 = v20 + v26++;
                      uint64_t v20 = v27 & v19;
                      uint64_t v22 = *(void *)(v18 + 16 * v20);
                      if (v17 == v22) {
                        goto LABEL_32;
                      }
                    }
                    uint64_t v28 = 0;
                  }
                  uint64_t v29 = *((void *)a3 + 5);
                  uint64_t v31 = *(void *)(v28 + 56);
                  uint64_t v30 = *(void *)(v28 + 64);
                  if (v30 == v31)
                  {
                    uint64_t v32 = *(unsigned int *)(v28 + 76);
                    uint64_t v33 = (void *)(v30 + 8 * v32);
                    if (v32)
                    {
                      uint64_t v34 = 0;
                      uint64_t v35 = 8 * v32;
                      while (*(void *)(v30 + v34) != v29)
                      {
                        v34 += 8;
                        if (v35 == v34) {
                          goto LABEL_53;
                        }
                      }
                      uint64_t v33 = (void *)(v30 + v34);
                    }
LABEL_53:
                    uint64_t v31 = *(void *)(v28 + 64);
                  }
                  else
                  {
                    uint64_t v36 = *(unsigned int *)(v28 + 72);
                    int v37 = v36 - 1;
                    unsigned int v38 = (v36 - 1) & ((v29 >> 4) ^ (v29 >> 9));
                    uint64_t v33 = (void *)(v30 + 8 * v38);
                    uint64_t v39 = *v33;
                    if (*v33 == -1)
                    {
                      int v40 = 0;
LABEL_61:
                      if (v40) {
                        uint64_t v33 = v40;
                      }
                      if (*v33 != v29) {
                        uint64_t v33 = (void *)(v30 + 8 * v36);
                      }
                    }
                    else
                    {
                      int v40 = 0;
                      int v41 = 1;
                      while (v39 != v29)
                      {
                        if (v40) {
                          BOOL v42 = 0;
                        }
                        else {
                          BOOL v42 = v39 == -2;
                        }
                        if (v42) {
                          int v40 = v33;
                        }
                        unsigned int v43 = v38 + v41++;
                        unsigned int v38 = v43 & v37;
                        uint64_t v33 = (void *)(v30 + 8 * (v43 & v37));
                        uint64_t v39 = *v33;
                        if (*v33 == -1) {
                          goto LABEL_61;
                        }
                      }
                    }
                  }
                  if (v30 == v31) {
                    uint64_t v44 = 76;
                  }
                  else {
                    uint64_t v44 = 72;
                  }
                  if (v33 != (void *)(v30 + 8 * *(unsigned int *)(v28 + v44))) {
                    return v10;
                  }
                  break;
              }
              break;
            }
          }
LABEL_58:
          ++v8;
        }
        while (v8 != v9);
      }
    }
  }
  return 0;
}

uint64_t llvm::SCEVExpander::replaceCongruentIVs(llvm::ScalarEvolution **a1, uint64_t a2, uint64_t a3, uint64_t *a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  v83[8] = *MEMORY[0x1E4F143B8];
  int v81 = (unsigned __int8 *)v83;
  uint64_t v82 = 0x800000000;
  if (*(void *)(**(void **)(a2 + 32) + 40) == **(void **)(a2 + 32) + 40)
  {
    unsigned int v9 = 0;
LABEL_18:
    uint64_t v15 = (unsigned __int8 *)v83;
    goto LABEL_19;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)(**(void **)(a2 + 32) + 48);
  uint64_t v11 = v10 - 24;
  if (v10) {
    uint64_t v12 = v10 - 24;
  }
  else {
    uint64_t v12 = 0;
  }
  if (!v10 || *(unsigned char *)(v12 + 16) != 83) {
    goto LABEL_18;
  }
  unsigned int v9 = 0;
  do
  {
    if (v9 >= HIDWORD(v82)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)&v81[8 * v9] = v11;
    unsigned int v9 = v82 + 1;
    LODWORD(v82) = v82 + 1;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v11 = v13 - 24;
    if (v13) {
      uint64_t v14 = v13 - 24;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  while (v13 && *(unsigned char *)(v14 + 16) == 83);
  uint64_t v15 = v81;
LABEL_19:
  if (a5)
  {
    unint64_t v16 = v9;
    uint64_t v17 = (unsigned __int8 ***)&v15[8 * v9];
    if (v9 < 0x81)
    {
LABEL_24:
      sub_1CD1F2A50(v15, v17, v16, 0, 0);
    }
    else
    {
      uint64_t v18 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v19 = v9;
      while (1)
      {
        uint64_t v20 = (unsigned __int8 ***)operator new(8 * v19, v18);
        if (v20) {
          break;
        }
        BOOL v21 = v19 > 1;
        v19 >>= 1;
        if (!v21) {
          goto LABEL_24;
        }
      }
      uint64_t v22 = v20;
      sub_1CD1F2A50(v15, v17, v16, v20, v19);
      operator delete(v22);
    }
    unsigned int v9 = v82;
    uint64_t v15 = v81;
  }
  v72[0] = 0;
  v72[1] = 0;
  int v73 = 0;
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = &v15[8 * v9];
    while (1)
    {
      int v25 = *(llvm::Value **)v15;
      BOOL v71 = v25;
      int v26 = *a1;
      uint64_t v27 = *((void *)*a1 + 2);
      v74[0] = (uint64_t)a1[1];
      v74[1] = v27;
      int8x16_t v75 = vextq_s8(*(int8x16_t *)((char *)v26 + 24), *(int8x16_t *)((char *)v26 + 24), 8uLL);
      uint64_t v76 = 0;
      __int16 v77 = 257;
      int v28 = *((_DWORD *)v25 + 5);
      if ((v28 & 0x40000000) != 0)
      {
        uint64_t v30 = (uint64_t *)*((void *)v25 - 1);
        unint64_t v29 = v28 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v29 = v28 & 0x7FFFFFF;
        uint64_t v30 = (uint64_t *)((char *)v25 - 32 * v29);
      }
      TruncateExpr = v80;
      uint64_t v79 = 0x800000000;
      if (v29 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v29)
      {
        uint64_t v31 = 32 * v29;
        uint64_t v32 = v80;
        do
        {
          uint64_t v33 = *v30;
          v30 += 4;
          *v32++ = v33;
          v31 -= 32;
        }
        while (v31);
        uint64_t v34 = TruncateExpr;
      }
      else
      {
        uint64_t v34 = v80;
      }
      LODWORD(v79) = v29;
      uint64_t v35 = llvm::SimplifyInstructionWithOperands(v25, (uint64_t)v34, v29, (uint64_t)v74, a5, a6, a7);
      if (TruncateExpr == v80)
      {
        if (v35) {
          goto LABEL_39;
        }
      }
      else
      {
        free(TruncateExpr);
        if (v35) {
          goto LABEL_39;
        }
      }
      if ((*(_DWORD *)(*(void *)v25 + 8) & 0xFD) == 0xD) {
        break;
      }
LABEL_60:
      if ((*(_DWORD *)(*(void *)v71 + 8) & 0xFD) != 0xD) {
        goto LABEL_76;
      }
      uint64_t v45 = *((void *)*a1 + 13);
      unsigned int v46 = *((_DWORD *)*a1 + 30);
      if (!v46) {
        goto LABEL_67;
      }
      unsigned int v47 = (v46 - 1) & ((v71 >> 4) ^ (v71 >> 9));
      uint64_t v48 = v45 + 48 * v47;
      uint64_t v49 = *(llvm::Value **)(v48 + 24);
      if (v49 != v71)
      {
        int v50 = 1;
        while (v49 != (llvm::Value *)-4096)
        {
          unsigned int v51 = v47 + v50++;
          unsigned int v47 = v51 & (v46 - 1);
          uint64_t v48 = v45 + 48 * v47;
          uint64_t v49 = *(llvm::Value **)(v48 + 24);
          if (v49 == v71) {
            goto LABEL_68;
          }
        }
LABEL_67:
        uint64_t v48 = v45 + 48 * v46;
      }
LABEL_68:
      if (v48 == v45 + 48 * v46 || (uint64_t SCEVIter = *(void *)(v48 + 40)) == 0) {
        uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(*a1, (unint64_t)v71);
      }
      v74[0] = SCEVIter;
      TruncateExpr = 0;
      if (sub_1CC277148(v72[0], v73, SCEVIter, &TruncateExpr))
      {
        unint64_t v54 = (llvm::Value **)((char *)TruncateExpr + 8);
        uint64_t v56 = *((void *)TruncateExpr + 1);
        if (v56)
        {
          if ((*(unsigned char *)(*(void *)v56 + 8) == 15) == (*(unsigned char *)(*(void *)v71 + 8) == 15)) {
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
          }
          goto LABEL_76;
        }
      }
      else
      {
        unsigned int v53 = sub_1CD1F36B4((uint64_t)v72, v74, TruncateExpr);
        *unsigned int v53 = SCEVIter;
        v53[1] = 0;
        unint64_t v54 = (llvm::Value **)(v53 + 1);
      }
      uint64_t v55 = v71;
      void *v54 = v71;
      if (a5
        && *(unsigned char *)(*(void *)v55 + 8) == 13
        && (*(unsigned int (**)(void))(**(void **)a5 + 456))(*(void *)a5))
      {
        unint64_t v57 = *a1;
        uint64_t v58 = *((void *)*a1 + 13);
        unsigned int v59 = *((_DWORD *)*a1 + 30);
        if (!v59) {
          goto LABEL_88;
        }
        unsigned int v60 = v59 - 1;
        unsigned int v61 = ((v71 >> 4) ^ (v71 >> 9)) & (v59 - 1);
        uint64_t v62 = v58 + 48 * v61;
        uint64_t v63 = *(llvm::Value **)(v62 + 24);
        if (v63 != v71)
        {
          int v64 = 1;
          while (v63 != (llvm::Value *)-4096)
          {
            unsigned int v65 = v61 + v64++;
            unsigned int v61 = v65 & v60;
            uint64_t v62 = v58 + 48 * (v65 & v60);
            uint64_t v63 = *(llvm::Value **)(v62 + 24);
            if (v63 == v71) {
              goto LABEL_89;
            }
          }
LABEL_88:
          uint64_t v62 = v58 + 48 * v59;
        }
LABEL_89:
        if (v62 == v58 + 48 * v59 || (unsigned int v66 = *(const llvm::SCEV **)(v62 + 40)) == 0) {
          unsigned int v66 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*a1, (unint64_t)v71);
        }
        TruncateExpr = (void *)llvm::ScalarEvolution::getTruncateExpr(v57, v66, **(llvm::Type ***)&v81[8 * v82 - 8], 0);
        uint64_t v67 = v71;
        sub_1CD88E434((uint64_t)v72, (uint64_t *)&TruncateExpr)[1] = v67;
      }
LABEL_76:
      v15 += 8;
      if (v15 == v24)
      {
        uint64_t v68 = v72[0];
        goto LABEL_94;
      }
    }
    uint64_t v36 = *((void *)*a1 + 13);
    unsigned int v37 = *((_DWORD *)*a1 + 30);
    if (v37)
    {
      unsigned int v38 = (v37 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      uint64_t v39 = v36 + 48 * v38;
      int v40 = *(llvm::Value **)(v39 + 24);
      if (v40 == v25)
      {
LABEL_51:
        if (v39 == v36 + 48 * v37 || (uint64_t v43 = *(void *)(v39 + 40)) == 0) {
          uint64_t v43 = llvm::ScalarEvolution::createSCEVIter(*a1, (unint64_t)v25);
        }
        if (v43) {
          BOOL v44 = *(unsigned __int16 *)(v43 + 24) == 0;
        }
        else {
          BOOL v44 = 0;
        }
        if (v44)
        {
          uint64_t v35 = *(llvm::UndefValue **)(v43 + 32);
          if (v35)
          {
LABEL_39:
            if (*(void *)v35 == *(void *)v71)
            {
              llvm::Value::doRAUW(v71, v35, (llvm::Value *)1);
              sub_1CCD849B4(a4, (uint64_t *)&v71);
              uint64_t v23 = (v23 + 1);
            }
            goto LABEL_76;
          }
        }
        goto LABEL_60;
      }
      int v41 = 1;
      while (v40 != (llvm::Value *)-4096)
      {
        unsigned int v42 = v38 + v41++;
        unsigned int v38 = v42 & (v37 - 1);
        uint64_t v39 = v36 + 48 * v38;
        int v40 = *(llvm::Value **)(v39 + 24);
        if (v40 == v25) {
          goto LABEL_51;
        }
      }
    }
    uint64_t v39 = v36 + 48 * v37;
    goto LABEL_51;
  }
  uint64_t v68 = 0;
  uint64_t v23 = 0;
LABEL_94:
  MEMORY[0x1D25D9CD0](v68, 8);
  if (v81 != (unsigned __int8 *)v83) {
    free(v81);
  }
  return v23;
}

void llvm::SCEVExpander::getRelatedExistingExpansion(llvm::SCEVExpander *this, const llvm::SCEV *a2, const llvm::Instruction *a3, llvm::Loop *a4)
{
}

uint64_t llvm::SCEVExpander::isHighCostExpansionHelper(llvm::SCEVExpander *this, uint64_t a2, llvm::Loop *a3, llvm::Instruction *a4, uint64_t a5, unsigned int a6, int a7, llvm::SmallPtrSetImplBase *a8, uint64_t a9)
{
  int v9 = *(_DWORD *)(a5 + 8);
  BOOL v29 = v9 == 0;
  BOOL v10 = v9 > 0;
  if (v29) {
    BOOL v10 = *(void *)a5 > (uint64_t)a6;
  }
  if (v10) {
    return 1;
  }
  uint64_t v15 = *(const llvm::SCEV **)(a2 + 8);
  if (!*((_WORD *)v15 + 12)) {
    goto LABEL_38;
  }
  uint64_t v17 = *((void *)a8 + 1);
  uint64_t v18 = *((unsigned int *)a8 + 5);
  if (v17 == *(void *)a8)
  {
    if (v18)
    {
      unint64_t v19 = 0;
      uint64_t v20 = 8 * v18;
      BOOL v21 = (const llvm::SCEV **)*((void *)a8 + 1);
      do
      {
        if (*v21 == v15) {
          return 0;
        }
        if (*v21 == (const llvm::SCEV *)-2) {
          unint64_t v19 = v21;
        }
        ++v21;
        v20 -= 8;
      }
      while (v20);
      if (v19)
      {
        *unint64_t v19 = v15;
        --*((_DWORD *)a8 + 6);
        goto LABEL_38;
      }
    }
    unsigned int v22 = *((_DWORD *)a8 + 4);
    if (v18 < v22)
    {
      *((_DWORD *)a8 + 5) = v18 + 1;
      *(void *)(v17 + 8 * v18) = v15;
      goto LABEL_38;
    }
  }
  else
  {
    unsigned int v22 = *((_DWORD *)a8 + 4);
  }
  if (3 * v22 <= 4 * ((int)v18 - *((_DWORD *)a8 + 6)))
  {
    if (v22 >= 0x40) {
      v22 *= 2;
    }
    else {
      unsigned int v22 = 128;
    }
  }
  else if (v22 - v18 >= v22 >> 3)
  {
    goto LABEL_19;
  }
  llvm::SmallPtrSetImplBase::Grow(a8, v22);
  unsigned int v22 = *((_DWORD *)a8 + 4);
  uint64_t v17 = *((void *)a8 + 1);
LABEL_19:
  unsigned int v23 = v22 - 1;
  unsigned int v24 = (v22 - 1) & ((v15 >> 4) ^ (v15 >> 9));
  int v25 = (const llvm::SCEV **)(v17 + 8 * v24);
  int v26 = *v25;
  if (*v25 == (const llvm::SCEV *)-1)
  {
    uint64_t v27 = 0;
LABEL_31:
    if (v27) {
      uint64_t v31 = v27;
    }
    else {
      uint64_t v31 = v25;
    }
    if (*v31 == v15) {
      return 0;
    }
    if (*v31 == (const llvm::SCEV *)-2) {
      --*((_DWORD *)a8 + 6);
    }
    else {
      ++*((_DWORD *)a8 + 5);
    }
    *uint64_t v31 = v15;
LABEL_38:
    llvm::SCEVExpander::getRelatedExistingExpansion(this, v15, a4, a3);
  }
  uint64_t v27 = 0;
  int v28 = 1;
  while (v26 != v15)
  {
    if (v27) {
      BOOL v29 = 0;
    }
    else {
      BOOL v29 = v26 == (const llvm::SCEV *)-2;
    }
    if (v29) {
      uint64_t v27 = v25;
    }
    unsigned int v30 = v24 + v28++;
    unsigned int v24 = v30 & v23;
    int v25 = (const llvm::SCEV **)(v17 + 8 * (v30 & v23));
    int v26 = *v25;
    if (*v25 == (const llvm::SCEV *)-1) {
      goto LABEL_31;
    }
  }
  return 0;
}

void *llvm::SCEVExpander::generateOverflowCheck(llvm::ScalarEvolution **this, const llvm::Loop **a2, llvm::IntegerType ***a3, int a4)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  unsigned int v192 = v194;
  uint64_t v193 = 0x400000000;
  PredicatedBackedgeTakenCount = (llvm::Instruction **)llvm::ScalarEvolution::getPredicatedBackedgeTakenCount(*this, a2[6]);
  BOOL v8 = a2[5];
  if (v8 == (const llvm::Loop *)2)
  {
    int v9 = a2[4];
    unint64_t v187 = (llvm::Instruction **)*((void *)v9 + 1);
  }
  else
  {
    unsigned int v173 = *this;
    uint64_t v174 = a2[4];
    uint64_t v195 = v197;
    uint64_t v196 = 0x300000000;
    unint64_t v175 = 8 * (void)v8 - 8;
    if (v175 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v176 = 0;
    if (v8 != (const llvm::Loop *)1)
    {
      memcpy(v195, (char *)v174 + 8, 8 * (void)v8 - 8);
      int v176 = v196;
    }
    LODWORD(v196) = v176 + (v175 >> 3);
    unint64_t v187 = (llvm::Instruction **)sub_1CD478318(v173, (uint64_t)&v195, a2[6], 0);
    if (v195 != v197) {
      free(v195);
    }
    int v9 = a2[4];
  }
  uint64_t v10 = *(void *)v9;
  uint64_t v184 = (llvm::Instruction **)v10;
  while (2)
  {
    switch(*(_WORD *)(v10 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v12 = (uint64_t *)(v10 + 40);
        goto LABEL_11;
      case 4:
        uint64_t v12 = (uint64_t *)(v10 + 48);
        goto LABEL_11;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v11 = *(uint64_t **)(v10 + 32);
        goto LABEL_6;
      case 6:
        uint64_t v11 = (uint64_t *)(v10 + 40);
LABEL_6:
        uint64_t v10 = *v11;
        continue;
      case 0xE:
        uint64_t v12 = *(uint64_t **)(v10 - 8);
        goto LABEL_11;
      default:
        uint64_t v12 = *(uint64_t **)(v10 + 32);
LABEL_11:
        uint64_t v13 = *v12;
        uint64_t v14 = PredicatedBackedgeTakenCount;
        break;
    }
    break;
  }
  while (2)
  {
    switch(*((_WORD *)v14 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unint64_t v16 = (uint64_t *)(v14 + 5);
        goto LABEL_19;
      case 4:
        unint64_t v16 = (uint64_t *)(v14 + 6);
        goto LABEL_19;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v15 = (llvm::Instruction ***)v14[4];
        goto LABEL_14;
      case 6:
        uint64_t v15 = (llvm::Instruction ***)(v14 + 5);
LABEL_14:
        uint64_t v14 = *v15;
        continue;
      case 0xE:
        unint64_t v16 = (uint64_t *)*(v14 - 1);
        goto LABEL_19;
      default:
        unint64_t v16 = (uint64_t *)v14[4];
LABEL_19:
        uint64_t v17 = *v16;
        unsigned int v18 = *(_DWORD *)(*v16 + 8);
        uint64_t v19 = *(void *)(*(void *)*this + 40);
        if (v18 == 15)
        {
          if ((v18 & 0xFE) == 0x12) {
            unsigned int v18 = *(_DWORD *)(**(void **)(v17 + 16) + 8);
          }
          uint64_t v122 = *(void *)(v19 + 504);
          if (v18 < 0x100) {
            goto LABEL_177;
          }
          unsigned int v123 = v18 >> 8;
          unint64_t v124 = *(unsigned int *)(v19 + 512);
          uint64_t v125 = *(void *)(v19 + 504);
          if (v124)
          {
            uint64_t v125 = v122;
            unint64_t v126 = v124;
            do
            {
              unint64_t v127 = v126 >> 1;
              uint64_t v128 = v125 + 16 * (v126 >> 1);
              unsigned int v129 = *(_DWORD *)(v128 + 8);
              uint64_t v130 = v128 + 16;
              v126 += ~(v126 >> 1);
              if (v129 < v123) {
                uint64_t v125 = v130;
              }
              else {
                unint64_t v126 = v127;
              }
            }
            while (v126);
          }
          if (v125 == v122 + 16 * v124 || *(_DWORD *)(v125 + 8) != v123) {
LABEL_177:
          }
            uint64_t v125 = v122;
          uint64_t v21 = *(unsigned int *)(v125 + 12);
        }
        else
        {
          uint64_t v21 = sub_1CB83544C(v19 + 272, v17);
          if (v20 == 1) {
        }
          }
        unsigned int v22 = *(_DWORD *)(v13 + 8);
        uint64_t v23 = *(void *)(*(void *)*this + 40);
        if (v22 == 15)
        {
          if ((v22 & 0xFE) == 0x12) {
            unsigned int v22 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
          }
          uint64_t v131 = *(void *)(v23 + 504);
          if (v22 < 0x100) {
            goto LABEL_190;
          }
          unsigned int v132 = v22 >> 8;
          unint64_t v133 = *(unsigned int *)(v23 + 512);
          uint64_t v134 = *(void *)(v23 + 504);
          if (v133)
          {
            uint64_t v134 = v131;
            unint64_t v135 = v133;
            do
            {
              unint64_t v136 = v135 >> 1;
              uint64_t v137 = v134 + 16 * (v135 >> 1);
              unsigned int v138 = *(_DWORD *)(v137 + 8);
              uint64_t v139 = v137 + 16;
              v135 += ~(v135 >> 1);
              if (v138 < v132) {
                uint64_t v134 = v139;
              }
              else {
                unint64_t v135 = v136;
              }
            }
            while (v135);
          }
          if (v134 == v131 + 16 * v133 || *(_DWORD *)(v134 + 8) != v132) {
LABEL_190:
          }
            uint64_t v134 = v131;
          unsigned int v25 = *(_DWORD *)(v134 + 12);
        }
        else
        {
          unsigned int v25 = sub_1CB83544C(v23 + 272, v13);
          if (v24 == 1) {
        }
          }
        int v26 = (llvm::Type *)llvm::IntegerType::get(**a3, (llvm::LLVMContext *)v21);
        uint64_t v27 = (char *)(this + 56);
        int v28 = (llvm::ScalarEvolution *)(a3 + 3);
        this[62] = (llvm::ScalarEvolution *)a3[5];
        this[63] = (llvm::ScalarEvolution *)(a3 + 3);
        BOOL v29 = (unsigned __int8 *)a3[6];
        v190[0] = (uint64_t)v29;
        if (v29)
        {
          llvm::MetadataTracking::track((uint64_t)v190, v29, 2);
          uint64_t v30 = v190[0];
        }
        else
        {
          uint64_t v30 = 0;
        }
        sub_1CB8461A4((uint64_t)(this + 56), 0, v30);
        if (!v190[0]) {
          goto LABEL_28;
        }
        int v98 = *(unsigned __int8 *)v190[0];
        if ((v98 - 4) > 0x1E)
        {
          if ((v98 - 3) >= 0xFFFFFFFE) {
            uint64_t v167 = v190[0];
          }
          else {
            uint64_t v167 = 0;
          }
          if ((v98 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v100 = v167 + 8;
LABEL_236:
            uint64_t v195 = (char *)v190;
            sub_1CC5FA668(v100 + 16, &v195);
            goto LABEL_28;
          }
          if (v98 == 3) {
            *(void *)(v190[0] + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v190[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v190[0] + 12))
        {
          uint64_t v99 = *(void *)(v190[0] + 16);
          if ((v99 & 4) != 0)
          {
            unint64_t v100 = v99 & 0xFFFFFFFFFFFFFFF8;
            if (v100) {
              goto LABEL_236;
            }
          }
        }
LABEL_28:
        this[62] = (llvm::ScalarEvolution *)a3[5];
        this[63] = v28;
        uint64_t v31 = (unsigned __int8 *)a3[6];
        v190[0] = (uint64_t)v31;
        if (v31)
        {
          llvm::MetadataTracking::track((uint64_t)v190, v31, 2);
          uint64_t v32 = v190[0];
        }
        else
        {
          uint64_t v32 = 0;
        }
        sub_1CB8461A4((uint64_t)(this + 56), 0, v32);
        if (!v190[0]) {
          goto LABEL_31;
        }
        int v101 = *(unsigned __int8 *)v190[0];
        if ((v101 - 4) > 0x1E)
        {
          if ((v101 - 3) >= 0xFFFFFFFE) {
            uint64_t v168 = v190[0];
          }
          else {
            uint64_t v168 = 0;
          }
          if ((v101 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v103 = v168 + 8;
LABEL_242:
            uint64_t v195 = (char *)v190;
            sub_1CC5FA668(v103 + 16, &v195);
            goto LABEL_31;
          }
          if (v101 == 3) {
            *(void *)(v190[0] + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v190[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v190[0] + 12))
        {
          uint64_t v102 = *(void *)(v190[0] + 16);
          if ((v102 & 4) != 0)
          {
            unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF8;
            if (v103) {
              goto LABEL_242;
            }
          }
        }
LABEL_31:
        uint64_t v180 = (uint64_t)v26;
        uint64_t v182 = (unsigned __int8 *)llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)this, PredicatedBackedgeTakenCount, v26);
        uint64_t v33 = **a3;
        unsigned int v34 = *(_DWORD *)(v13 + 8);
        uint64_t v35 = *(void *)(*(void *)*this + 40);
        unsigned int v178 = v21;
        if (v34 == 15)
        {
          if ((v34 & 0xFE) == 0x12) {
            unsigned int v34 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
          }
          uint64_t v140 = *(void *)(v35 + 504);
          if (v34 < 0x100) {
            goto LABEL_203;
          }
          unsigned int v141 = v34 >> 8;
          unint64_t v142 = *(unsigned int *)(v35 + 512);
          uint64_t v143 = *(void *)(v35 + 504);
          if (v142)
          {
            uint64_t v143 = v140;
            unint64_t v144 = v142;
            do
            {
              unint64_t v145 = v144 >> 1;
              uint64_t v146 = v143 + 16 * (v144 >> 1);
              unsigned int v147 = *(_DWORD *)(v146 + 8);
              uint64_t v148 = v146 + 16;
              v144 += ~(v144 >> 1);
              if (v147 < v141) {
                uint64_t v143 = v148;
              }
              else {
                unint64_t v144 = v145;
              }
            }
            while (v144);
          }
          if (v143 == v140 + 16 * v142 || *(_DWORD *)(v143 + 8) != v141) {
LABEL_203:
          }
            uint64_t v143 = v140;
          uint64_t v37 = *(unsigned int *)(v143 + 12);
        }
        else
        {
          uint64_t v37 = sub_1CB83544C(v35 + 272, v13);
          if (v36 == 1) {
        }
          }
        uint64_t v38 = llvm::IntegerType::get(v33, (llvm::LLVMContext *)v37);
        this[62] = (llvm::ScalarEvolution *)a3[5];
        this[63] = v28;
        uint64_t v39 = (unsigned __int8 *)a3[6];
        v190[0] = (uint64_t)v39;
        if (v39)
        {
          llvm::MetadataTracking::track((uint64_t)v190, v39, 2);
          uint64_t v40 = v190[0];
        }
        else
        {
          uint64_t v40 = 0;
        }
        sub_1CB8461A4((uint64_t)(this + 56), 0, v40);
        if (!v190[0]) {
          goto LABEL_37;
        }
        int v104 = *(unsigned __int8 *)v190[0];
        if ((v104 - 4) > 0x1E)
        {
          if ((v104 - 3) >= 0xFFFFFFFE) {
            uint64_t v169 = v190[0];
          }
          else {
            uint64_t v169 = 0;
          }
          if ((v104 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v106 = v169 + 8;
LABEL_248:
            uint64_t v195 = (char *)v190;
            sub_1CC5FA668(v106 + 16, &v195);
            goto LABEL_37;
          }
          if (v104 == 3) {
            *(void *)(v190[0] + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v190[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v190[0] + 12))
        {
          uint64_t v105 = *(void *)(v190[0] + 16);
          if ((v105 & 4) != 0)
          {
            unint64_t v106 = v105 & 0xFFFFFFFFFFFFFFF8;
            if (v106) {
              goto LABEL_248;
            }
          }
        }
LABEL_37:
        unsigned int v185 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)this, v187, (llvm::Type *)v38);
        NegativeSCEV = (llvm::Instruction **)llvm::ScalarEvolution::getNegativeSCEV(*this, (uint64_t)v187, 0);
        this[62] = (llvm::ScalarEvolution *)a3[5];
        this[63] = v28;
        unsigned int v42 = (unsigned __int8 *)a3[6];
        v190[0] = (uint64_t)v42;
        if (v42)
        {
          llvm::MetadataTracking::track((uint64_t)v190, v42, 2);
          uint64_t v43 = v190[0];
        }
        else
        {
          uint64_t v43 = 0;
        }
        sub_1CB8461A4((uint64_t)(this + 56), 0, v43);
        if (!v190[0]) {
          goto LABEL_40;
        }
        int v107 = *(unsigned __int8 *)v190[0];
        if ((v107 - 4) > 0x1E)
        {
          if ((v107 - 3) >= 0xFFFFFFFE) {
            uint64_t v170 = v190[0];
          }
          else {
            uint64_t v170 = 0;
          }
          if ((v107 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v109 = v170 + 8;
LABEL_254:
            uint64_t v195 = (char *)v190;
            sub_1CC5FA668(v109 + 16, &v195);
            goto LABEL_40;
          }
          if (v107 == 3) {
            *(void *)(v190[0] + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v190[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v190[0] + 12))
        {
          uint64_t v108 = *(void *)(v190[0] + 16);
          if ((v108 & 4) != 0)
          {
            unint64_t v109 = v108 & 0xFFFFFFFFFFFFFFF8;
            if (v109) {
              goto LABEL_254;
            }
          }
        }
LABEL_40:
        BOOL v44 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)this, NegativeSCEV, (llvm::Type *)v38);
        this[62] = (llvm::ScalarEvolution *)a3[5];
        this[63] = v28;
        uint64_t v45 = (unsigned __int8 *)a3[6];
        v190[0] = (uint64_t)v45;
        if (v45)
        {
          llvm::MetadataTracking::track((uint64_t)v190, v45, 2);
          uint64_t v46 = v190[0];
        }
        else
        {
          uint64_t v46 = 0;
        }
        sub_1CB8461A4((uint64_t)(this + 56), 0, v46);
        if (!v190[0]) {
          goto LABEL_43;
        }
        int v110 = *(unsigned __int8 *)v190[0];
        if ((v110 - 4) > 0x1E)
        {
          if ((v110 - 3) >= 0xFFFFFFFE) {
            uint64_t v171 = v190[0];
          }
          else {
            uint64_t v171 = 0;
          }
          if ((v110 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v112 = v171 + 8;
LABEL_260:
            uint64_t v195 = (char *)v190;
            sub_1CC5FA668(v112 + 16, &v195);
            goto LABEL_43;
          }
          if (v110 == 3) {
            *(void *)(v190[0] + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v190[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v190[0] + 12))
        {
          uint64_t v111 = *(void *)(v190[0] + 16);
          if ((v111 & 4) != 0)
          {
            unint64_t v112 = v111 & 0xFFFFFFFFFFFFFFF8;
            if (v112) {
              goto LABEL_260;
            }
          }
        }
LABEL_43:
        uint64_t v179 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)this, v184, (llvm::Type *)v13);
        uint64_t v48 = **a3;
        LODWORD(v196) = v25;
        unsigned int v181 = v25;
        if (v25 > 0x40) {
          operator new[]();
        }
        uint64_t v195 = 0;
        int v183 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v195, v47);
        if (v196 >= 0x41 && v195) {
          MEMORY[0x1D25D9CB0](v195, 0x1000C8000313F17);
        }
        this[62] = (llvm::ScalarEvolution *)a3[5];
        this[63] = v28;
        uint64_t v49 = (unsigned __int8 *)a3[6];
        v190[0] = (uint64_t)v49;
        if (v49)
        {
          llvm::MetadataTracking::track((uint64_t)v190, v49, 2);
          uint64_t v50 = v190[0];
        }
        else
        {
          uint64_t v50 = 0;
        }
        sub_1CB8461A4((uint64_t)(this + 56), 0, v50);
        if (!v190[0]) {
          goto LABEL_50;
        }
        int v113 = *(unsigned __int8 *)v190[0];
        if ((v113 - 4) > 0x1E)
        {
          if ((v113 - 3) >= 0xFFFFFFFE) {
            uint64_t v172 = v190[0];
          }
          else {
            uint64_t v172 = 0;
          }
          if ((v113 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v115 = v172 + 8;
LABEL_266:
            uint64_t v195 = (char *)v190;
            sub_1CC5FA668(v115 + 16, &v195);
            goto LABEL_50;
          }
          if (v113 == 3) {
            *(void *)(v190[0] + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v190[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v190[0] + 12))
        {
          uint64_t v114 = *(void *)(v190[0] + 16);
          if ((v114 & 4) != 0)
          {
            unint64_t v115 = v114 & 0xFFFFFFFFFFFFFFF8;
            if (v115) {
              goto LABEL_266;
            }
          }
        }
LABEL_50:
        __int16 v198 = 257;
        unsigned int v51 = sub_1CB845F20((uint64_t)(this + 56), 40, v185, (uint64_t)v183, (uint64_t)&v195);
        __int16 v198 = 257;
        BOOL v177 = v51;
        uint64_t Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)(this + 56), v51, v44, v185, (const llvm::Twine *)&v195, 0);
        if ((a4 & 1) == 0
          && llvm::SCEV::isZero((llvm::SCEV *)v184)
          && llvm::ScalarEvolution::isKnownPositive(*this, (const llvm::SCEV *)v187))
        {
          unint64_t v54 = **a3;
          uint64_t v55 = *(void *)v54;
          uint64_t v56 = *(void **)(*(void *)v54 + 1568);
          if (!v56)
          {
            unint64_t v57 = *(llvm::ConstantInt **)(v55 + 1888);
            unsigned int v58 = *(_DWORD *)(v55 + 1896);
            LODWORD(v196) = v58 >> 8;
            if (v58 >> 8 > 0x40) {
              operator new[]();
            }
            uint64_t v195 = 0;
            uint64_t v56 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v195, v53);
            if (v196 >= 0x41 && v195) {
              MEMORY[0x1D25D9CB0](v195, 0x1000C8000313F17);
            }
            *(void *)(v55 + 1568) = v56;
          }
          goto LABEL_92;
        }
        __int16 v198 = 257;
        unsigned int v59 = sub_1CB844B8C((uint64_t)(this + 56), v182, v38, (uint64_t)&v195);
        if (llvm::SCEV::isOne((llvm::SCEV *)v187))
        {
          unsigned int v61 = **(uint64_t ***)v59;
          uint64_t v62 = *v61;
          uint64_t v63 = *(void **)(*v61 + 1568);
          if (!v63)
          {
            int v64 = *(llvm::ConstantInt **)(v62 + 1888);
            unsigned int v65 = *(_DWORD *)(v62 + 1896);
            LODWORD(v196) = v65 >> 8;
            if (v65 >> 8 > 0x40) {
              operator new[]();
            }
            uint64_t v195 = 0;
            uint64_t v63 = llvm::ConstantInt::get(v64, (llvm::LLVMContext *)&v195, v60);
            if (v196 >= 0x41 && v195) {
              MEMORY[0x1D25D9CB0](v195, 0x1000C8000313F17);
            }
            *(void *)(v62 + 1568) = v63;
          }
        }
        else
        {
          unsigned int v66 = (uint64_t **)*((void *)a3[5][7] + 5);
          uint64_t v195 = (char *)v38;
          uint64_t Declaration = llvm::Intrinsic::getDeclaration(v66, 309, (uint64_t)&v195, 1);
          if (Declaration) {
            uint64_t v68 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            uint64_t v68 = 0;
          }
          v190[0] = (uint64_t)Select;
          v190[1] = (uint64_t)v59;
          uint64_t v195 = "mul";
          __int16 v198 = 259;
          unsigned int v69 = (uint64_t *)sub_1CB845BAC((uint64_t *)this + 56, v68, (uint64_t **)Declaration, v190, 2, (uint64_t)&v195, 0);
          LODWORD(v190[0]) = 0;
          uint64_t v195 = "mul.result";
          __int16 v198 = 259;
          unsigned int v59 = sub_1CC2415A4((uint64_t)(this + 56), v69, (unsigned int *)v190, 1, (uint64_t)&v195);
          LODWORD(v190[0]) = 1;
          uint64_t v195 = "mul.overflow";
          __int16 v198 = 259;
          uint64_t v63 = sub_1CC2415A4((uint64_t)(this + 56), v69, (unsigned int *)v190, 1, (uint64_t)&v195);
        }
        int isKnownNegative = llvm::ScalarEvolution::isKnownNegative(*this, (const llvm::SCEV *)v187);
        BOOL isKnownPositive = llvm::ScalarEvolution::isKnownPositive(*this, (const llvm::SCEV *)v187);
        BOOL v72 = isKnownPositive;
        if (v13 && *(_DWORD *)(v13 + 8) == 15)
        {
          uint64_t v116 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*(void *)this[64] + 1912), (llvm::Type *)(*(_DWORD *)(v13 + 8) >> 8));
          inserted = (uint64_t *)llvm::SCEVExpander::InsertNoopCastOfTo((llvm::SCEVExpander *)this, v179, v116);
          __int16 v198 = 257;
          uint64_t v117 = sub_1CD5A6358((uint64_t)(this + 56), v59, (uint64_t)&v195, 0, 0);
          if (isKnownNegative)
          {
            uint64_t v74 = 0;
          }
          else
          {
            uint64_t v118 = *(void *)this[64] + 1912;
            __int16 v198 = 257;
            uint64_t v119 = v117;
            int v120 = sub_1CB930F7C((uint64_t *)this + 56, v118, inserted, (const char *)v59, (uint64_t)&v195);
            uint64_t v117 = v119;
            uint64_t v74 = v120;
          }
          if (!v72)
          {
            uint64_t v121 = *(void *)this[64] + 1912;
            __int16 v198 = 257;
            uint64_t v76 = sub_1CB930F7C((uint64_t *)this + 56, v121, inserted, (const char *)v117, (uint64_t)&v195);
            goto LABEL_74;
          }
          goto LABEL_72;
        }
        inserted = (uint64_t *)v179;
        if (isKnownNegative)
        {
          uint64_t v74 = 0;
          if (!isKnownPositive) {
            goto LABEL_73;
          }
LABEL_72:
          int8x16_t v75 = 0;
          goto LABEL_75;
        }
        __int16 v198 = 257;
        uint64_t v74 = sub_1CB844A3C((uint64_t)(this + 56), v179, (uint64_t)v59, (uint64_t)&v195, 0, 0);
        if (v72) {
          goto LABEL_72;
        }
LABEL_73:
        __int16 v198 = 257;
        uint64_t v76 = sub_1CB84494C((uint64_t)(this + 56), (uint64_t)v179, (uint64_t)v59, (uint64_t)&v195, 0, 0);
LABEL_74:
        int8x16_t v75 = v76;
LABEL_75:
        if (isKnownNegative)
        {
          if (v72)
          {
            __int16 v77 = 0;
          }
          else
          {
            if (a4) {
              __int16 v81 = 38;
            }
            else {
              __int16 v81 = 34;
            }
            __int16 v198 = 257;
            __int16 v77 = sub_1CB845F20((uint64_t)(this + 56), v81, v75, (uint64_t)inserted, (uint64_t)&v195);
          }
        }
        else
        {
          if (a4) {
            __int16 v78 = 40;
          }
          else {
            __int16 v78 = 36;
          }
          __int16 v198 = 257;
          __int16 v77 = sub_1CB845F20((uint64_t)(this + 56), v78, v74, (uint64_t)inserted, (uint64_t)&v195);
          if (!v72)
          {
            if (a4) {
              __int16 v79 = 38;
            }
            else {
              __int16 v79 = 34;
            }
            __int16 v198 = 257;
            uint64_t v80 = sub_1CB845F20((uint64_t)(this + 56), v79, v75, (uint64_t)inserted, (uint64_t)&v195);
            __int16 v198 = 257;
            __int16 v77 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)(this + 56), v177, v80, v77, (const llvm::Twine *)&v195, 0);
          }
        }
        __int16 v198 = 257;
        uint64_t v56 = sub_1CB844AF4((uint64_t)(this + 56), v77, (uint64_t)v63, (uint64_t)&v195);
LABEL_92:
        unsigned int v82 = v181;
        unsigned int v83 = *(_DWORD *)(v180 + 8);
        uint64_t v84 = *(void *)(*(void *)*this + 40);
        if (v83 == 15)
        {
          if ((v83 & 0xFE) == 0x12) {
            unsigned int v83 = *(_DWORD *)(**(void **)(v180 + 16) + 8);
          }
          uint64_t v149 = *(void *)(v84 + 504);
          if (v83 < 0x100) {
            goto LABEL_216;
          }
          unsigned int v150 = v83 >> 8;
          unint64_t v151 = *(unsigned int *)(v84 + 512);
          uint64_t v152 = *(void *)(v84 + 504);
          if (v151)
          {
            uint64_t v152 = v149;
            unint64_t v153 = v151;
            do
            {
              unint64_t v154 = v153 >> 1;
              uint64_t v155 = v152 + 16 * (v153 >> 1);
              unsigned int v156 = *(_DWORD *)(v155 + 8);
              uint64_t v157 = v155 + 16;
              v153 += ~(v153 >> 1);
              if (v156 < v150) {
                uint64_t v152 = v157;
              }
              else {
                unint64_t v153 = v154;
              }
            }
            while (v153);
          }
          if (v152 == v149 + 16 * v151 || *(_DWORD *)(v152 + 8) != v150) {
LABEL_216:
          }
            uint64_t v152 = v149;
          unint64_t v86 = *(unsigned int *)(v152 + 12);
        }
        else
        {
          unint64_t v86 = sub_1CB83544C(v84 + 272, v180);
          if (v85 == 1) {
        }
          }
        unsigned int v87 = *(_DWORD *)(v38 + 8);
        uint64_t v88 = *(void *)(*(void *)*this + 40);
        if (v87 == 15)
        {
          if ((v87 & 0xFE) == 0x12) {
            unsigned int v87 = *(_DWORD *)(**(void **)(v38 + 16) + 8);
          }
          uint64_t v158 = *(void *)(v88 + 504);
          if (v87 < 0x100) {
            goto LABEL_229;
          }
          unsigned int v159 = v87 >> 8;
          unint64_t v160 = *(unsigned int *)(v88 + 512);
          uint64_t v161 = *(void *)(v88 + 504);
          if (v160)
          {
            uint64_t v161 = v158;
            unint64_t v162 = v160;
            do
            {
              unint64_t v163 = v162 >> 1;
              uint64_t v164 = v161 + 16 * (v162 >> 1);
              unsigned int v165 = *(_DWORD *)(v164 + 8);
              uint64_t v166 = v164 + 16;
              v162 += ~(v162 >> 1);
              if (v165 < v159) {
                uint64_t v161 = v166;
              }
              else {
                unint64_t v162 = v163;
              }
            }
            while (v162);
          }
          if (v161 == v158 + 16 * v160 || *(_DWORD *)(v161 + 8) != v159) {
LABEL_229:
          }
            uint64_t v161 = v158;
          unint64_t v90 = *(unsigned int *)(v161 + 12);
        }
        else
        {
          unint64_t v90 = sub_1CB83544C(v88 + 272, v38);
          if (v89 == 1) {
        }
          }
        if (v86 > v90)
        {
          LODWORD(v196) = v181;
          if (v181 > 0x40) {
            operator new[]();
          }
          if (v181) {
            unint64_t v91 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v181;
          }
          else {
            unint64_t v91 = 0;
          }
          uint64_t v195 = (char *)v91;
          if (v178 > 0x40)
          {
            if (v181 != v178) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v188, (uint64_t)&v195);
            unsigned int v82 = v196;
          }
          else
          {
            unsigned int v189 = v178;
            if (v178) {
              unint64_t v92 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v178;
            }
            else {
              unint64_t v92 = 0;
            }
            unint64_t v188 = v92 & v91;
          }
          if (v82 >= 0x41 && v195) {
            MEMORY[0x1D25D9CB0](v195, 0x1000C8000313F17);
          }
          uint64_t v93 = llvm::ConstantInt::get(**a3, (llvm::LLVMContext *)&v188, v53);
          __int16 v198 = 257;
          uint64_t v94 = sub_1CB845F20((uint64_t)v27, 34, v182, (uint64_t)v93, (uint64_t)&v195);
          __int16 v198 = 257;
          uint64_t v95 = sub_1CB845F20((uint64_t)v27, 33, v185, (uint64_t)v183, (uint64_t)&v195);
          __int16 v191 = 257;
          unsigned int v96 = sub_1CBF52474((uint64_t)v27, v94, (uint64_t)v95, (uint64_t)v190);
          __int16 v198 = 257;
          uint64_t v56 = sub_1CB844AF4((uint64_t)v27, v56, (uint64_t)v96, (uint64_t)&v195);
          if (v189 >= 0x41 && v188) {
            MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
          }
        }
        if (v192 != v194) {
          free(v192);
        }
        return v56;
    }
  }
}

BOOL llvm::isSafeToExpand(llvm *this, const llvm::SCEV *a2, llvm::ScalarEvolution *a3)
{
  v23[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  char v13 = (char)a3;
  char v14 = 0;
  uint64_t v15 = &v12;
  unint64_t v16 = v18;
  uint64_t v17 = 0x800000000;
  uint64_t v19 = v23;
  uint64_t v20 = v23;
  uint64_t v21 = 8;
  int v22 = 0;
  sub_1CD1F3EF4((uint64_t)&v15, (uint64_t)this);
  unsigned int v3 = v17;
  while (v3)
  {
    if (*((unsigned char *)v15 + 9)) {
      break;
    }
    uint64_t v4 = *((void *)v16 + --v3);
    LODWORD(v17) = v3;
    if (*(_WORD *)(v4 + 24))
    {
      switch(*(_WORD *)(v4 + 24))
      {
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          uint64_t v5 = *(void *)(v4 + 40);
          if (v5)
          {
            int v6 = *(uint64_t **)(v4 + 32);
            uint64_t v7 = 8 * v5 - 8;
            do
            {
              uint64_t v8 = *v6++;
              sub_1CD1F3EF4((uint64_t)&v15, v8);
              if (*((unsigned char *)v15 + 9)) {
                BOOL v9 = 1;
              }
              else {
                BOOL v9 = v7 == 0;
              }
              v7 -= 8;
            }
            while (!v9);
          }
          goto LABEL_14;
        case 6:
          sub_1CD1F3EF4((uint64_t)&v15, *(void *)(v4 + 32));
          uint64_t v11 = (uint64_t *)(v4 + 40);
          goto LABEL_21;
        case 0xE:
          break;
        default:
          uint64_t v11 = (uint64_t *)(v4 + 32);
LABEL_21:
          sub_1CD1F3EF4((uint64_t)&v15, *v11);
LABEL_14:
          unsigned int v3 = v17;
          break;
      }
    }
  }
  if (v20 != v19) {
    free(v20);
  }
  if (v16 != v18) {
    free(v16);
  }
  return v14 == 0;
}

BOOL llvm::isSafeToExpandAt(llvm *this, const llvm::BasicBlock **a2, const llvm::Instruction *a3, llvm::ScalarEvolution *a4)
{
  BOOL result = llvm::isSafeToExpand(this, a3, (llvm::ScalarEvolution *)1);
  if (!result) {
    return result;
  }
  if (llvm::ScalarEvolution::getBlockDisposition(a3, this, a2[5]) == 2) {
    return 1;
  }
  if ((int)llvm::ScalarEvolution::getBlockDisposition(a3, this, a2[5]) < 1) {
    return 0;
  }
  uint64_t v8 = a2[5];
  BOOL v9 = (const llvm::BasicBlock *)*((void *)v8 + 5);
  if (v9 == (const llvm::BasicBlock *)((char *)v8 + 40))
  {
    uint64_t v10 = 0;
  }
  else
  {
    if (v9) {
      uint64_t v10 = (unsigned __int8 *)v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10[16] - 29 >= 0xB) {
      uint64_t v10 = 0;
    }
  }
  if (v10 == (unsigned __int8 *)a2) {
    return 1;
  }
  BOOL result = 0;
  if (this && *((_WORD *)this + 12) == 14)
  {
    int v11 = *((_DWORD *)a2 + 5);
    if ((v11 & 0x40000000) != 0)
    {
      char v13 = (const llvm::BasicBlock **)*(a2 - 1);
      uint64_t v12 = v11 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v12 = v11 & 0x7FFFFFF;
      char v13 = &a2[-4 * v12];
    }
    if (v12)
    {
      char v14 = (const llvm::BasicBlock *)*((void *)this - 1);
      uint64_t v15 = 32 * v12 - 32;
      do
      {
        unint64_t v16 = *v13;
        v13 += 4;
        BOOL result = v16 == v14;
        BOOL v17 = v16 == v14 || v15 == 0;
        v15 -= 32;
      }
      while (!v17);
      return result;
    }
    return 0;
  }
  return result;
}

void *sub_1CD1F1320(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = *(void *)(a2 + 48);
  a1[2] = *(void *)(a2 + 56);
  uint64_t v5 = (unsigned __int8 **)(a1 + 3);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6)
  {
    BOOL v9 = (unsigned __int8 **)(*(void *)a2 + 8);
    uint64_t v10 = 16 * v6;
    while (*((_DWORD *)v9 - 2))
    {
      v9 += 2;
      v10 -= 16;
      if (!v10) {
        goto LABEL_2;
      }
    }
    int v11 = *v9;
    *uint64_t v5 = *v9;
    if (v11) {
      llvm::MetadataTracking::track((uint64_t)v5, v11, 2);
    }
  }
  else
  {
LABEL_2:
    *uint64_t v5 = 0;
  }
  a1[4] = a3;
  unsigned int v7 = *(_DWORD *)(a3 + 688);
  if (v7 >= *(_DWORD *)(a3 + 692)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a3 + 680) + 8 * v7) = a1;
  ++*(_DWORD *)(a3 + 688);
  return a1;
}

uint64_t *sub_1CD1F13EC(uint64_t *a1)
{
  --*(_DWORD *)(a1[4] + 688);
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3)
  {
    sub_1CBF5385C(v2, v3, a1[2]);
  }
  else
  {
    *(void *)(v2 + 48) = 0;
    *(void *)(v2 + 56) = 0;
  }
  uint64_t v4 = *a1;
  uint64_t v6 = (unsigned __int8 **)(a1 + 3);
  uint64_t v5 = (unsigned __int8 *)a1[3];
  BOOL v9 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v9, v5, 2);
    unsigned int v7 = v9;
  }
  else
  {
    unsigned int v7 = 0;
  }
  sub_1CB8461A4(v4, 0, (uint64_t)v7);
  if (v9) {
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  }
  if (*v6) {
    llvm::MetadataTracking::untrack((uint64_t)(a1 + 3), *v6);
  }
  return a1;
}

void sub_1CD1F14AC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)(a1 + 88);
  uint64_t v5 = *(void **)(a1 + 96);
  uint64_t v4 = (unsigned int *)(a1 + 88);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          uint64_t v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *uint64_t v8 = a2;
          --*(_DWORD *)(a1 + 112);
          if (a2) {
            goto LABEL_34;
          }
          goto LABEL_48;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
      if (!a2) {
        goto LABEL_48;
      }
LABEL_34:
      if (*(_WORD *)(a2 + 24) == 6)
      {
        uint64_t v21 = *(void *)(a2 + 40);
        if (!v21 || *(_WORD *)(v21 + 24)) {
          goto LABEL_46;
        }
        uint64_t v22 = *(void *)(v21 + 32);
        uint64_t v23 = *(unsigned int *)(v22 + 32);
        if (v23 >= 0x41)
        {
          int v24 = 0;
          int64_t v25 = (unint64_t)(v23 + 63) >> 6;
          do
          {
            if (v25-- < 1) {
              break;
            }
            unint64_t v27 = *(void *)(*(void *)(v22 + 24) + 8 * v25);
            v24 += __clz(v27);
          }
          while (!v27);
          int v28 = v23 | 0xFFFFFFC0;
          if ((v23 & 0x3F) == 0) {
            int v28 = 0;
          }
          if (v24 + v28 != v23) {
            goto LABEL_48;
          }
LABEL_46:
          **(unsigned char **)a1 = 1;
          return;
        }
        if (!*(void *)(v22 + 24)) {
          goto LABEL_46;
        }
      }
LABEL_48:
      unsigned int v29 = *(_DWORD *)(a1 + 16);
      if (v29 >= *(_DWORD *)(a1 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v29) = a2;
      ++*(_DWORD *)(a1 + 16);
      return;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_15;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  uint64_t v5 = *(void **)(a1 + 96);
LABEL_15:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  char v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    unint64_t v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        unint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      char v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_27;
      }
    }
    return;
  }
  unint64_t v16 = 0;
LABEL_27:
  if (v16) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    *uint64_t v20 = a2;
    if (!a2) {
      goto LABEL_48;
    }
    goto LABEL_34;
  }
}

void *sub_1CD1F16F4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD88E110(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CD1F17C0(char *a1, char *a2, void *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    uint64_t v9 = a1;
    if (a4 == 2)
    {
      if (sub_1CD1F1A70(*a3, *((void **)a2 - 2), *((llvm::SCEV **)a2 - 1), *(void **)a1, *((llvm::SCEV **)a1 + 1)))
      {
        uint64_t v10 = (void *)*v9;
        *uint64_t v9 = *((void *)a2 - 2);
        *((void *)a2 - 2) = v10;
        uint64_t v11 = (void *)v9[1];
        v9[1] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        BOOL v18 = (void **)(a1 + 16);
        if (a1 + 16 != a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = a1;
          do
          {
            uint64_t v21 = v18;
            if (sub_1CD1F1A70(*a3, *((void **)v20 + 2), *((llvm::SCEV **)v20 + 3), *(void **)v20, *((llvm::SCEV **)v20 + 1)))
            {
              uint64_t v22 = *v21;
              uint64_t v23 = (llvm::SCEV *)*((void *)v20 + 3);
              uint64_t v24 = v19;
              while (1)
              {
                int64_t v25 = (char *)v9 + v24;
                uint64_t v26 = *(void *)((char *)v9 + v24 + 8);
                *((void *)v25 + 2) = *(void *)((char *)v9 + v24);
                *((void *)v25 + 3) = v26;
                if (!v24) {
                  break;
                }
                v24 -= 16;
                if (!sub_1CD1F1A70(*a3, v22, v23, *((void **)v25 - 2), *((llvm::SCEV **)v25 - 1)))
                {
                  unint64_t v27 = (void *)((char *)v9 + v24 + 16);
                  goto LABEL_20;
                }
              }
              unint64_t v27 = v9;
LABEL_20:
              void *v27 = v22;
              v27[1] = v23;
            }
            BOOL v18 = v21 + 2;
            v19 += 16;
            uint64_t v20 = (char *)v21;
          }
          while (v21 + 2 != (void **)a2);
        }
      }
    }
    else
    {
      char v14 = (char *)a5;
      unint64_t v15 = a4 >> 1;
      unint64_t v16 = &a1[16 * (a4 >> 1)];
      unint64_t v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        __n128 v28 = sub_1CD1F1CD8((void **)a1, (void **)v16, a3, v17, a5, a7);
        unsigned int v29 = (__n128 *)&v14[16 * v15];
        sub_1CD1F1CD8((void **)&v9[2 * (a4 >> 1)], (void **)a2, a3, a4 - (a4 >> 1), v29, v28);
        uint64_t v30 = &v14[16 * a4];
        uint64_t v31 = v29;
        while (v31 != (__n128 *)v30)
        {
          BOOL v32 = sub_1CD1F1A70(*a3, v31->n128_u64[0], (llvm::SCEV *)v31->n128_u64[1], *(void **)v14, *((llvm::SCEV **)v14 + 1));
          if (v32) {
            uint64_t v33 = (char *)v31;
          }
          else {
            uint64_t v33 = v14;
          }
          if (v32) {
            ++v31;
          }
          else {
            v14 += 16;
          }
          *uint64_t v9 = *(void *)v33;
          v9[1] = *((void *)v33 + 1);
          v9 += 2;
          if (v14 == (char *)v29)
          {
            if (v31 != (__n128 *)v30)
            {
              unint64_t v34 = 0;
              do
              {
                uint64_t v35 = &v31[v34 / 0x10];
                uint64_t v36 = &v9[v34 / 8];
                void *v36 = v31[v34 / 0x10].n128_u64[0];
                v36[1] = v31[v34 / 0x10].n128_u64[1];
                v34 += 16;
              }
              while (&v35[1] != (__n128 *)v30);
            }
            return;
          }
        }
        if (v14 != (char *)v29)
        {
          unint64_t v37 = 0;
          do
          {
            uint64_t v38 = &v9[v37 / 8];
            uint64_t v39 = (__n128 *)&v14[v37];
            *uint64_t v38 = *(void *)&v14[v37];
            v38[1] = *(void *)&v14[v37 + 8];
            v37 += 16;
          }
          while (&v39[1] != v29);
        }
      }
      else
      {
        sub_1CD1F17C0(a1, v16, a3, v17, a5, a6);
        sub_1CD1F17C0(&v9[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v14, a6);
        sub_1CD1F1F10((uint64_t)v9, (char *)&v9[2 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), v14, a6);
      }
    }
  }
}

BOOL sub_1CD1F1A70(int a1, void *a2, llvm::SCEV *this, void *a4, llvm::SCEV *a5)
{
  unint64_t v6 = this;
  while (2)
  {
    switch(*((_WORD *)v6 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v8 = (char *)v6 + 40;
        goto LABEL_9;
      case 4:
        unsigned int v8 = (char *)v6 + 48;
        goto LABEL_9;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        int v7 = (llvm::SCEV **)*((void *)v6 + 4);
        goto LABEL_4;
      case 6:
        int v7 = (llvm::SCEV **)((char *)v6 + 40);
LABEL_4:
        unint64_t v6 = *v7;
        continue;
      case 0xE:
        unsigned int v8 = (char *)*((void *)v6 - 1);
        goto LABEL_9;
      default:
        unsigned int v8 = (char *)*((void *)v6 + 4);
LABEL_9:
        int v9 = *(unsigned __int8 *)(*(void *)v8 + 8);
        uint64_t v10 = a5;
        while (2)
        {
          switch(*((_WORD *)v10 + 12))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unsigned int v12 = (char *)v10 + 40;
              goto LABEL_17;
            case 4:
              unsigned int v12 = (char *)v10 + 48;
              goto LABEL_17;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v11 = (llvm::SCEV **)*((void *)v10 + 4);
              goto LABEL_12;
            case 6:
              uint64_t v11 = (llvm::SCEV **)((char *)v10 + 40);
LABEL_12:
              uint64_t v10 = *v11;
              continue;
            case 0xE:
              unsigned int v12 = (char *)*((void *)v10 - 1);
              goto LABEL_17;
            default:
              unsigned int v12 = (char *)*((void *)v10 + 4);
LABEL_17:
              if ((v9 == 15) == (*(unsigned char *)(*(void *)v12 + 8) == 15))
              {
                if (a2 == a4)
                {
                  int isNonConstantNegative = llvm::SCEV::isNonConstantNegative(this);
                  char v17 = llvm::SCEV::isNonConstantNegative(a5);
                  return !isNonConstantNegative && (v17 & 1) != 0;
                }
                else
                {
                  return sub_1CD1E4208(a2, a4) != a2;
                }
              }
              else
              {
                while (2)
                {
                  switch(*((_WORD *)this + 12))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 0xD:
                      unint64_t v15 = (char *)this + 40;
                      goto LABEL_31;
                    case 4:
                      unint64_t v15 = (char *)this + 48;
                      goto LABEL_31;
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0xB:
                    case 0xC:
                      unsigned int v13 = (llvm::SCEV **)*((void *)this + 4);
                      goto LABEL_20;
                    case 6:
                      unsigned int v13 = (llvm::SCEV **)((char *)this + 40);
LABEL_20:
                      this = *v13;
                      continue;
                    case 0xE:
                      unint64_t v15 = (char *)*((void *)this - 1);
                      goto LABEL_31;
                    default:
                      unint64_t v15 = (char *)*((void *)this + 4);
LABEL_31:
                      BOOL result = *(unsigned __int8 *)(*(void *)v15 + 8) == 15;
                      break;
                  }
                  break;
                }
              }
              return result;
          }
        }
    }
  }
}

__n128 sub_1CD1F1CD8(void **a1, void **a2, void *a3, unint64_t a4, __n128 *a5, __n128 result)
{
  if (a4)
  {
    unint64_t v6 = a5;
    uint64_t v10 = a1;
    if (a4 == 2)
    {
      uint64_t v11 = (__n128 *)(a2 - 2);
      if (sub_1CD1F1A70(*a3, *(a2 - 2), (llvm::SCEV *)*(a2 - 1), *a1, (llvm::SCEV *)a1[1]))
      {
        *unint64_t v6 = *v11;
        BOOL result = *(__n128 *)v10;
      }
      else
      {
        *unint64_t v6 = *(__n128 *)v10;
        BOOL result = *v11;
      }
      v6[1] = result;
    }
    else if (a4 == 1)
    {
      BOOL result = *(__n128 *)a1;
      *a5 = *(__n128 *)a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      uint64_t v19 = &a1[2 * (a4 >> 1)];
      sub_1CD1F17C0(a1, v19, a3, a4 >> 1, a5, a4 >> 1);
      sub_1CD1F17C0(&v10[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
      uint64_t v20 = &v10[2 * (a4 >> 1)];
      while (v20 != a2)
      {
        if (sub_1CD1F1A70(*a3, *v20, (llvm::SCEV *)v20[1], *v10, (llvm::SCEV *)v10[1]))
        {
          __n128 v21 = *(__n128 *)v20;
          v20 += 2;
          BOOL result = v21;
        }
        else
        {
          __n128 v22 = *(__n128 *)v10;
          v10 += 2;
          BOOL result = v22;
        }
        *v6++ = result;
        if (v10 == v19)
        {
          if (v20 != a2)
          {
            unint64_t v23 = 0;
            do
            {
              BOOL result = *(__n128 *)&v20[v23 / 8];
              v6[v23 / 0x10] = result;
              v23 += 16;
            }
            while (&v20[v23 / 8] != a2);
          }
          return result;
        }
      }
      if (v10 != v19)
      {
        unint64_t v24 = 0;
        do
        {
          BOOL result = *(__n128 *)&v10[v24 / 8];
          v6[v24 / 0x10] = result;
          v24 += 16;
        }
        while (&v10[v24 / 8] != v19);
      }
    }
    else if (a1 != a2)
    {
      BOOL result = *(__n128 *)a1;
      *a5 = *(__n128 *)a1;
      unsigned int v12 = a1 + 2;
      if (a1 + 2 != a2)
      {
        uint64_t v13 = 0;
        char v14 = a5;
        do
        {
          unint64_t v15 = v12;
          unint64_t v16 = v14 + 1;
          if (sub_1CD1F1A70(*a3, v10[2], (llvm::SCEV *)v10[3], v14->n128_u64[0], (llvm::SCEV *)v14->n128_u64[1]))
          {
            BOOL result = *v14;
            *unint64_t v16 = *v14;
            char v17 = v6;
            if (v14 != v6)
            {
              uint64_t v18 = v13;
              while (1)
              {
                char v17 = (__n128 *)((char *)v6 + v18);
                if (!sub_1CD1F1A70(*a3, *v15, (llvm::SCEV *)v10[3], *(void **)((char *)v6[-1].n128_u64 + v18), *(llvm::SCEV **)((char *)&v6->n128_u64[-1] + v18)))break; {
                BOOL result = v17[-1];
                }
                *char v17 = result;
                v18 -= 16;
                if (!v18)
                {
                  char v17 = v6;
                  break;
                }
              }
            }
            v17->n128_u64[0] = (unint64_t)*v15;
            v17->n128_u64[1] = (unint64_t)v10[3];
          }
          else
          {
            BOOL result = *(__n128 *)v15;
            *unint64_t v16 = *(__n128 *)v15;
          }
          unsigned int v12 = v15 + 2;
          v13 += 16;
          char v14 = v16;
          uint64_t v10 = v15;
        }
        while (v15 + 2 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CD1F1F10(uint64_t result, char *a2, char *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v9 = a6;
    char v14 = (char *)result;
    while (a5 > a8 && v9 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v15 = 0;
      uint64_t v16 = -a5;
      while (1)
      {
        char v17 = v14;
        v14 += v15;
        BOOL result = sub_1CD1F1A70(*a4, *(void **)a2, *((llvm::SCEV **)a2 + 1), *(void **)v14, *((llvm::SCEV **)v14 + 1));
        if (result) {
          break;
        }
        v15 += 16;
        BOOL v18 = __CFADD__(v16++, 1);
        char v14 = v17;
        if (v18) {
          return result;
        }
      }
      uint64_t v19 = -v16;
      uint64_t v67 = v9;
      uint64_t v68 = a4;
      uint64_t v65 = a8;
      unsigned int v66 = a3;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          unint64_t v54 = &v17[v15];
          uint64_t v55 = *(void **)&v17[v15];
          *(void *)unint64_t v54 = *(void *)a2;
          *(void *)a2 = v55;
          uint64_t v56 = *(void **)&v17[v15 + 8];
          *((void *)v54 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v56;
          return result;
        }
        if (v16 > 0) {
          uint64_t v19 = 1 - v16;
        }
        uint64_t v63 = v19 >> 1;
        __n128 v28 = &v17[16 * (v19 >> 1) + v15];
        unsigned int v29 = a3;
        if (a3 != a2)
        {
          uint64_t v30 = *a4;
          unint64_t v31 = (a3 - a2) >> 4;
          unsigned int v29 = a2;
          do
          {
            BOOL v32 = &v29[16 * (v31 >> 1)];
            BOOL v33 = sub_1CD1F1A70(v30, *(void **)v32, *((llvm::SCEV **)v32 + 1), *(void **)v28, *((llvm::SCEV **)v28 + 1));
            if (v33) {
              v31 += ~(v31 >> 1);
            }
            else {
              v31 >>= 1;
            }
            if (v33) {
              unsigned int v29 = v32 + 16;
            }
          }
          while (v31);
        }
        uint64_t v64 = (v29 - a2) >> 4;
        uint64_t v27 = v63;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v20 = v9;
        }
        else {
          uint64_t v20 = v9 + 1;
        }
        uint64_t v62 = v14;
        uint64_t v64 = v20 >> 1;
        __n128 v21 = &a2[16 * (v20 >> 1)];
        __n128 v22 = a2;
        if (v14 != a2)
        {
          unint64_t v23 = (a2 - v17 - v15) >> 4;
          __n128 v22 = v14;
          do
          {
            unint64_t v24 = &v22[16 * (v23 >> 1)];
            int64_t v25 = v21;
            BOOL v26 = sub_1CD1F1A70(*a4, *(void **)v21, *((llvm::SCEV **)v21 + 1), *(void **)v24, *((llvm::SCEV **)v24 + 1));
            __n128 v21 = v25;
            if (v26)
            {
              v23 >>= 1;
            }
            else
            {
              __n128 v22 = v24 + 16;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
        }
        uint64_t v27 = (v22 - v17 - v15) >> 4;
        __n128 v28 = v22;
        unsigned int v29 = v21;
        char v14 = v62;
      }
      a3 = v29;
      a4 = v68;
      if (v28 != a2)
      {
        a3 = v28;
        if (a2 != v29)
        {
          unint64_t v34 = *(void **)v28;
          *(void *)__n128 v28 = *(void *)a2;
          *(void *)a2 = v34;
          uint64_t v35 = (void *)*((void *)v28 + 1);
          *((void *)v28 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v35;
          a3 = v28 + 16;
          for (unsigned int i = a2 + 16; i != v29; i += 16)
          {
            if (a3 == a2) {
              a2 = i;
            }
            uint64_t v37 = *(void *)a3;
            *(void *)a3 = *(void *)i;
            *(void *)unsigned int i = v37;
            uint64_t v38 = *((void *)a3 + 1);
            *((void *)a3 + 1) = *((void *)i + 1);
            *((void *)i + 1) = v38;
            a3 += 16;
          }
          if (a3 == a2)
          {
            a3 = a2;
          }
          else
          {
            uint64_t v39 = a3;
            uint64_t v40 = a2;
            do
            {
              while (1)
              {
                int v41 = *(void **)v39;
                *(void *)uint64_t v39 = *(void *)a2;
                *(void *)a2 = v41;
                unsigned int v42 = (void *)*((void *)v39 + 1);
                *((void *)v39 + 1) = *((void *)a2 + 1);
                *((void *)a2 + 1) = v42;
                v39 += 16;
                a2 += 16;
                if (a2 == v29) {
                  break;
                }
                if (v39 == v40) {
                  uint64_t v40 = a2;
                }
              }
              a2 = v40;
            }
            while (v39 != v40);
          }
        }
      }
      a5 = -(v27 + v16);
      uint64_t v43 = v67 - v64;
      a8 = v65;
      if (v27 + v64 >= v67 - (v27 + v64) - v16)
      {
        uint64_t v44 = v27;
        BOOL result = sub_1CD1F1F10(a3, v29, v66, v68, a5, v67 - v64, a7, v65);
        unsigned int v29 = v28;
        uint64_t v43 = v64;
        a5 = v44;
      }
      else
      {
        BOOL result = sub_1CD1F1F10(v14, v28, a3, v68, v27, v64, a7, v65);
        char v14 = a3;
        a3 = v66;
      }
      a2 = v29;
      uint64_t v9 = v43;
      if (!v43) {
        return result;
      }
    }
    if (a5 <= v9)
    {
      if (v14 != a2)
      {
        uint64_t v49 = 0;
        do
        {
          *(_OWORD *)&a7[v49] = *(_OWORD *)&v14[v49];
          v49 += 16;
        }
        while (&v14[v49] != a2);
        if (v49)
        {
          uint64_t v50 = &a7[v49];
          uint64_t v51 = (uint64_t)&a7[v49 - 16];
          while (a2 != a3)
          {
            uint64_t v52 = a7;
            BOOL result = sub_1CD1F1A70(*a4, *(void **)a2, *((llvm::SCEV **)a2 + 1), *(void **)a7, *((llvm::SCEV **)a7 + 1));
            if (result) {
              unsigned int v53 = a2;
            }
            else {
              unsigned int v53 = a7;
            }
            if (result) {
              a2 += 16;
            }
            else {
              uint64_t v52 = a7 + 16;
            }
            *(void *)char v14 = *(void *)v53;
            *((void *)v14 + 1) = *((void *)v53 + 1);
            v14 += 16;
            a7 = v52;
            if (v50 == v52) {
              return result;
            }
          }
          if (v50 != a7)
          {
            uint64_t v59 = 0;
            do
            {
              unsigned int v60 = &v14[v59];
              unsigned int v61 = &a7[v59];
              *(void *)unsigned int v60 = *(void *)&a7[v59];
              *((void *)v60 + 1) = *(void *)&a7[v59 + 8];
              v59 += 16;
            }
            while ((char *)v51 != v61);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v45 = 0;
      do
      {
        *(_OWORD *)&a7[v45] = *(_OWORD *)&a2[v45];
        v45 += 16;
      }
      while (&a2[v45] != a3);
      if (v45)
      {
        uint64_t v46 = &a7[v45];
        unsigned int v47 = a3 - 8;
        while (a2 != v14)
        {
          BOOL result = sub_1CD1F1A70(*a4, *((void **)v46 - 2), *((llvm::SCEV **)v46 - 1), *((void **)a2 - 2), *((llvm::SCEV **)a2 - 1));
          if (result) {
            uint64_t v48 = a2;
          }
          else {
            uint64_t v48 = v46;
          }
          if (result) {
            a2 -= 16;
          }
          else {
            v46 -= 16;
          }
          *((void *)v47 - 1) = *((void *)v48 - 2);
          *(void *)unsigned int v47 = *((void *)v48 - 1);
          v47 -= 16;
          if (v46 == a7) {
            return result;
          }
        }
        if (v46 != a7)
        {
          uint64_t v57 = 0;
          do
          {
            unsigned int v58 = &v47[v57];
            *((void *)v58 - 1) = *(void *)&v46[v57 - 16];
            *(void *)unsigned int v58 = *(void *)&v46[v57 - 8];
            v57 -= 16;
          }
          while (&v46[v57] != a7);
        }
      }
    }
  }
  return result;
}

int8x8_t *sub_1CD1F2434(int8x8_t ***a1, llvm::Constant *this)
{
  unsigned int v2 = *((unsigned __int8 *)this + 16);
  if (!this || v2 != 16) {
    goto LABEL_12;
  }
  uint64_t v3 = (int8x8_t *)((char *)this + 24);
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4 > 0x40)
  {
    int v7 = 0;
    unint64_t v8 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v9 = (int8x8_t *)*v3;
    do
    {
      int8x8_t v10 = *v9++;
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
      v11.i16[0] = vaddlv_u8(v11);
      v7 += v11.i32[0];
      --v8;
    }
    while (v8);
    if (v7 == 1) {
      goto LABEL_5;
    }
LABEL_12:
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12 || v2 > 0x14) {
      return 0;
    }
    goto LABEL_14;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] == 1)
  {
LABEL_5:
    **a1 = v3;
    return (int8x8_t *)1;
  }
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12) {
    return 0;
  }
LABEL_14:
  uint64_t v20 = a1;
  BOOL result = (int8x8_t *)llvm::Constant::getSplatValue(this, 0);
  if (result)
  {
    if (result[2].i8[0] == 16)
    {
      uint64_t v3 = result + 3;
      uint64_t v12 = result[4].u32[0];
      if (v12 > 0x40)
      {
        int v15 = 0;
        unint64_t v16 = (unint64_t)(v12 + 63) >> 6;
        char v17 = (int8x8_t *)*v3;
        do
        {
          int8x8_t v18 = *v17++;
          uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
          v19.i16[0] = vaddlv_u8(v19);
          v15 += v19.i32[0];
          --v16;
        }
        while (v16);
        BOOL v14 = v15 == 1;
      }
      else
      {
        uint8x8_t v13 = (uint8x8_t)vcnt_s8(*v3);
        v13.i16[0] = vaddlv_u8(v13);
        BOOL v14 = v13.u32[0] == 1;
      }
      a1 = v20;
      if (v14) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CD1F2584@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v10 = 0;
  uint64_t result = sub_1CCE12E8C((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD1F260C(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void *sub_1CD1F260C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD1F26C0(a1, v7);
  uint64_t v9 = 0;
  sub_1CCE12E8C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD1F26C0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD88E234(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1CD1F278C(uint64_t a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  char v4 = sub_1CD1F2888(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_4;
  }
  sub_1CD1F2974(a1, v7);
  unsigned int v8 = 0;
  sub_1CD1F2888(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  uint64_t result = v8;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096 || result[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t *result = *a2;
  result[1] = a2[1];
  result[2] = 6;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t sub_1CD1F2888(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (void *)(a1 + 40 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v16 = 1;
    }
    else
    {
      BOOL v14 = 0;
      int v15 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v14) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -8192;
        }
        if (v18 && v11 == -8192) {
          BOOL v14 = v10;
        }
        unsigned int v20 = v9 + v15++;
        unsigned int v9 = v20 & v8;
        uint64_t v10 = (void *)(a1 + 40 * (v20 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v16 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_11;
        }
      }
      uint64_t v16 = 0;
      if (v14) {
        uint64_t v10 = v14;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v16 = 0;
  }
LABEL_11:
  *a5 = v10;
  return v16;
}

_OWORD *sub_1CD1F2974(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD88E2DC((void *)a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      _OWORD *result = v12;
      uint64_t result = (_OWORD *)((char *)result + 40);
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

unsigned __int8 *sub_1CD1F2A50(unsigned __int8 *result, unsigned __int8 ***a2, unint64_t a3, unsigned __int8 ***a4, uint64_t a5)
{
  if (a3 < 2) {
    return result;
  }
  unint64_t v5 = a2;
  unint64_t v6 = result;
  if (a3 == 2)
  {
    int v7 = (llvm::Type **)*(a2 - 1);
    unsigned int v8 = *(unsigned __int8 ***)result;
    unsigned int v9 = *v7;
    int v10 = *((unsigned __int8 *)*v7 + 8);
    uint64_t result = **(unsigned __int8 ***)result;
    int v11 = result[8];
    if (v10 == 13 && v11 == 13)
    {
      unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v9);
      if (PrimitiveSizeInBits >= (unint64_t)result) {
        return result;
      }
    }
    else if (v10 == 13 || v11 != 13)
    {
      return result;
    }
    *(void *)unint64_t v6 = v7;
    *(v5 - 1) = v8;
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    uint64_t v38 = a4;
    unint64_t v39 = a3 >> 1;
    uint64_t v40 = &result[8 * (a3 >> 1)];
    unint64_t v41 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1CD1F2A50(result, v40, v41, a4, a5);
      sub_1CD1F2A50(&v6[8 * (a3 >> 1)], v5, a3 - (a3 >> 1), v38, a5);
      return sub_1CD1F3088(v6, (unsigned __int8 ***)&v6[8 * (a3 >> 1)], v5, a3 >> 1, a3 - (a3 >> 1), v38, a5);
    }
    sub_1CD1F2D90(result, v40, v41, a4);
    unsigned int v42 = &v38[v39];
    uint64_t result = sub_1CD1F2D90(&v6[8 * (a3 >> 1)], (unsigned __int8 *)v5, a3 - (a3 >> 1), v42);
    uint64_t v43 = &v38[a3];
    uint64_t v44 = v42;
    while (1)
    {
      if (v44 == v43)
      {
        if (v38 != v42)
        {
          uint64_t v54 = 0;
          do
          {
            *(void *)&v6[v54 * 8] = v38[v54];
            ++v54;
          }
          while (&v38[v54] != v42);
        }
        return result;
      }
      uint64_t v45 = *v44;
      uint64_t v46 = *v38;
      unsigned int v47 = **v44;
      int v48 = v47[8];
      uint64_t result = **v38;
      int v49 = result[8];
      if (v48 == 13 && v49 == 13)
      {
        unint64_t v52 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
        uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v47);
        if (v52 < (unint64_t)result) {
          goto LABEL_64;
        }
      }
      else if (v48 != 13 && v49 == 13)
      {
LABEL_64:
        *(void *)unint64_t v6 = v45;
        ++v44;
        goto LABEL_65;
      }
      *(void *)unint64_t v6 = v46;
      ++v38;
LABEL_65:
      v6 += 8;
      if (v38 == v42)
      {
        if (v44 != v43)
        {
          uint64_t v53 = 0;
          do
          {
            *(void *)&v6[v53 * 8] = v44[v53];
            ++v53;
          }
          while (&v44[v53] != v43);
        }
        return result;
      }
    }
  }
  if (result == (unsigned __int8 *)a2) {
    return result;
  }
  int v15 = result + 8;
  if (result + 8 == (unsigned __int8 *)a2) {
    return result;
  }
  uint64_t v16 = 0;
  char v17 = result;
  do
  {
    BOOL v18 = v17;
    char v17 = v15;
    uint8x8_t v19 = *(unsigned __int8 ***)v18;
    unsigned int v20 = (llvm::Type **)*((void *)v18 + 1);
    __n128 v21 = *v20;
    int v22 = *((unsigned __int8 *)*v20 + 8);
    uint64_t result = **(unsigned __int8 ***)v18;
    int v23 = result[8];
    if (v22 == 13 && v23 == 13)
    {
      unint64_t v26 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v21);
      if (v26 >= (unint64_t)result) {
        goto LABEL_43;
      }
    }
    else if (v22 == 13 || v23 != 13)
    {
      goto LABEL_43;
    }
    *((void *)v18 + 1) = v19;
    uint64_t v27 = v6;
    if (v18 == v6) {
      goto LABEL_42;
    }
    uint64_t v28 = v16;
    while (1)
    {
      unsigned int v29 = *(unsigned __int8 ***)&v6[v28 - 8];
      uint64_t v30 = *v20;
      int v31 = *((unsigned __int8 *)*v20 + 8);
      uint64_t result = *v29;
      int v32 = (*v29)[8];
      if (v31 != 13 || v32 != 13)
      {
        if (v31 == 13 || v32 != 13)
        {
          uint64_t v27 = v18;
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      unint64_t v35 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v30);
      if (v35 >= (unint64_t)result) {
        break;
      }
LABEL_38:
      v18 -= 8;
      *(void *)&v6[v28] = v29;
      v28 -= 8;
      if (!v28)
      {
        uint64_t v27 = v6;
        goto LABEL_41;
      }
    }
    uint64_t v27 = &v6[v28];
LABEL_41:
    unint64_t v5 = a2;
LABEL_42:
    *(void *)uint64_t v27 = v20;
LABEL_43:
    int v15 = v17 + 8;
    v16 += 8;
  }
  while (v17 + 8 != (unsigned __int8 *)v5);
  return result;
}

unsigned __int8 *sub_1CD1F2D90(unsigned __int8 *result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 ***a4)
{
  if (!a3) {
    return result;
  }
  char v4 = a4;
  unint64_t v6 = (unsigned __int8 ***)result;
  if (a3 == 1)
  {
LABEL_47:
    *char v4 = *v6;
    return result;
  }
  int v7 = (unsigned __int8 ***)a2;
  if (a3 == 2)
  {
    unsigned int v9 = (unsigned __int8 ***)(a2 - 8);
    unsigned int v8 = (unsigned __int8 **)*((void *)a2 - 1);
    int v10 = *(unsigned __int8 ***)result;
    int v11 = (llvm::Type *)*v8;
    int v12 = (*v8)[8];
    uint64_t result = **(unsigned __int8 ***)result;
    int v13 = result[8];
    if (v12 == 13 && v13 == 13)
    {
      unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v11);
      if (PrimitiveSizeInBits < (unint64_t)result)
      {
LABEL_46:
        *v4++ = v8;
        goto LABEL_47;
      }
    }
    else if (v12 != 13 && v13 == 13)
    {
      goto LABEL_46;
    }
    unsigned int v8 = v10;
    unint64_t v6 = v9;
    goto LABEL_46;
  }
  if ((uint64_t)a3 > 8)
  {
    uint64_t v38 = (unsigned __int8 ***)&result[8 * (a3 >> 1)];
    sub_1CD1F2A50(result, v38, a3 >> 1, a4, a3 >> 1);
    uint64_t result = (unsigned __int8 *)sub_1CD1F2A50(&v6[a3 >> 1], v7, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
    unint64_t v39 = &v6[a3 >> 1];
    while (1)
    {
      if (v39 == v7)
      {
        if (v6 != v38)
        {
          uint64_t v49 = 0;
          do
          {
            v4[v49] = v6[v49];
            ++v49;
          }
          while (&v6[v49] != v38);
        }
        return result;
      }
      uint64_t v40 = *v39;
      unint64_t v41 = *v6;
      unsigned int v42 = **v39;
      int v43 = v42[8];
      uint64_t result = **v6;
      int v44 = result[8];
      if (v43 == 13 && v44 == 13)
      {
        unint64_t v47 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
        uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v42);
        if (v47 < (unint64_t)result) {
          goto LABEL_61;
        }
      }
      else if (v43 != 13 && v44 == 13)
      {
LABEL_61:
        *char v4 = v40;
        ++v39;
        goto LABEL_62;
      }
      *char v4 = v41;
      ++v6;
LABEL_62:
      ++v4;
      if (v6 == v38)
      {
        if (v39 != v7)
        {
          uint64_t v48 = 0;
          do
          {
            v4[v48] = v39[v48];
            ++v48;
          }
          while (&v39[v48] != v7);
        }
        return result;
      }
    }
  }
  if (result == a2) {
    return result;
  }
  int v15 = (unsigned __int8 ***)(result + 8);
  *a4 = *(unsigned __int8 ***)result;
  if (result + 8 == a2) {
    return result;
  }
  uint64_t v16 = 0;
  char v17 = a4;
  BOOL v18 = a4;
  do
  {
    unsigned int v20 = *v18++;
    uint8x8_t v19 = v20;
    __n128 v21 = *v15;
    int v22 = **v15;
    int v23 = v22[8];
    uint64_t result = *v20;
    int v24 = (*v20)[8];
    if (v23 == 13 && v24 == 13)
    {
      unint64_t v27 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
      if (v27 >= (unint64_t)result) {
        goto LABEL_23;
      }
    }
    else if (v23 == 13 || v24 != 13)
    {
LABEL_23:
      *BOOL v18 = v21;
      goto LABEL_42;
    }
    v17[1] = v19;
    uint64_t v28 = v4;
    if (v17 == v4) {
      goto LABEL_41;
    }
    uint64_t v29 = v16;
    while (1)
    {
      uint64_t v30 = *(unsigned __int8 ***)((char *)v4 + v29 - 8);
      int v31 = **v15;
      int v32 = v31[8];
      uint64_t result = *v30;
      int v33 = (*v30)[8];
      if (v32 != 13 || v33 != 13)
      {
        if (v32 == 13 || v33 != 13)
        {
          uint64_t v28 = v17;
          goto LABEL_40;
        }
        goto LABEL_37;
      }
      unint64_t v36 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v31);
      if (v36 >= (unint64_t)result) {
        break;
      }
LABEL_37:
      --v17;
      *(unsigned __int8 ***)((char *)v4 + v29) = v30;
      v29 -= 8;
      if (!v29)
      {
        uint64_t v28 = v4;
        goto LABEL_40;
      }
    }
    uint64_t v28 = (unsigned __int8 ***)((char *)v4 + v29);
LABEL_40:
    int v7 = (unsigned __int8 ***)a2;
LABEL_41:
    char *v28 = *v15;
LABEL_42:
    ++v15;
    v16 += 8;
    char v17 = v18;
  }
  while (v15 != v7);
  return result;
}

unsigned __int8 *sub_1CD1F3088(unsigned __int8 *result, unsigned __int8 ***a2, unsigned __int8 ***a3, uint64_t a4, uint64_t a5, unsigned __int8 ***a6, uint64_t a7)
{
  uint64_t v100 = a5;
  if (!a5) {
    return result;
  }
  int v11 = (unsigned __int8 ***)result;
  do
  {
    if (a4 <= a7 || v100 <= a7)
    {
      if (a4 > v100)
      {
        if (a2 == a3) {
          return result;
        }
        uint64_t v68 = 0;
        do
        {
          a6[v68] = a2[v68];
          ++v68;
        }
        while (&a2[v68] != a3);
        if (!(v68 * 8)) {
          return result;
        }
        unsigned int v69 = &a6[v68];
        for (unsigned int i = a3 - 1; ; --i)
        {
          if (a2 == v11)
          {
            if (v69 != a6)
            {
              uint64_t v92 = 0;
              do
              {
                i[v92] = v69[v92 - 1];
                --v92;
              }
              while (&v69[v92] != a6);
            }
            return result;
          }
          BOOL v71 = a2 - 1;
          BOOL v72 = *(a2 - 1);
          int v73 = (llvm::Type **)*(v69 - 1);
          uint64_t v74 = *v73;
          int v75 = *((unsigned __int8 *)*v73 + 8);
          uint64_t result = *v72;
          int v76 = (*v72)[8];
          if (v75 == 13 && v76 == 13)
          {
            unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
            uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v74);
            if (PrimitiveSizeInBits < (unint64_t)result) {
              goto LABEL_106;
            }
          }
          else if (v75 != 13 && v76 == 13)
          {
            goto LABEL_106;
          }
          BOOL v72 = (unsigned __int8 **)v73;
          BOOL v71 = a2;
          --v69;
LABEL_106:
          char *i = v72;
          a2 = v71;
          if (v69 == a6) {
            return result;
          }
        }
      }
      if (v11 == a2) {
        return result;
      }
      uint64_t v80 = 0;
      do
      {
        a6[v80] = v11[v80];
        ++v80;
      }
      while (&v11[v80] != a2);
      if (!(v80 * 8)) {
        return result;
      }
      __int16 v81 = &a6[v80];
      unsigned int v82 = a6;
      while (1)
      {
        if (a2 == a3)
        {
          return (unsigned __int8 *)memmove(v11, v82, (char *)a6 - (char *)v82 + v80 * 8);
        }
        unsigned int v83 = a6;
        uint64_t v84 = *a2;
        int v85 = *v82;
        unint64_t v86 = **a2;
        int v87 = v86[8];
        uint64_t result = **v82;
        int v88 = result[8];
        if (v87 == 13 && v88 == 13)
        {
          unint64_t v91 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
          uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v86);
          if (v91 < (unint64_t)result) {
            goto LABEL_126;
          }
        }
        else if (v87 != 13 && v88 == 13)
        {
LABEL_126:
          *int v11 = v84;
          ++a2;
          goto LABEL_127;
        }
        *int v11 = v85;
        ++v82;
LABEL_127:
        a6 = v83;
        ++v11;
        if (v81 == v82) {
          return result;
        }
      }
    }
    if (!a4) {
      return result;
    }
    int v12 = *a2;
    int v13 = **a2;
    int v14 = v13[8];
    while (1)
    {
      int v15 = *v11;
      uint64_t result = **v11;
      int v16 = result[8];
      if (v14 != 13 || v16 != 13) {
        break;
      }
      unint64_t v17 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      uint64_t result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v13);
      if (v17 < (unint64_t)result) {
        goto LABEL_15;
      }
LABEL_13:
      ++v11;
      if (!--a4) {
        return result;
      }
    }
    if (v14 == 13 || v16 != 13) {
      goto LABEL_13;
    }
LABEL_15:
    uint64_t v18 = v100;
    unsigned int v96 = a3;
    uint64_t v97 = a6;
    uint64_t v95 = a7;
    if (a4 < v100)
    {
      if (v100 < 0) {
        uint64_t v18 = v100 + 1;
      }
      uint64_t v98 = v18 >> 1;
      uint8x8_t v19 = &a2[v18 >> 1];
      unsigned int v20 = a2;
      if (v11 != a2)
      {
        unint64_t v21 = a2 - v11;
        int v22 = **v19;
        int v23 = v22[8];
        unsigned int v20 = v11;
        do
        {
          int v24 = &v20[v21 >> 1];
          int64_t v25 = **v24;
          int v26 = v25[8];
          if (v23 == 13 && v26 == 13)
          {
            unint64_t v27 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v25);
            BOOL v28 = v27 < llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
          }
          else
          {
            BOOL v28 = v23 != 13 && v26 == 13;
          }
          if (v28)
          {
            v21 >>= 1;
          }
          else
          {
            unsigned int v20 = v24 + 1;
            v21 += ~(v21 >> 1);
          }
        }
        while (v21);
      }
      uint64_t v30 = v20 - v11;
      int v31 = a2;
      uint64_t v32 = v98;
      goto LABEL_58;
    }
    if (a4 == 1)
    {
      *int v11 = v12;
      *a2 = v15;
      return result;
    }
    if (a4 >= 0) {
      uint64_t v33 = a4;
    }
    else {
      uint64_t v33 = a4 + 1;
    }
    uint64_t v93 = v33 >> 1;
    unsigned int v20 = &v11[v33 >> 1];
    uint8x8_t v19 = a3;
    if (a3 != a2)
    {
      unint64_t v34 = a3 - a2;
      uint64_t v99 = **v20;
      int v35 = v99[8];
      uint8x8_t v19 = a2;
      do
      {
        unint64_t v36 = &v19[v34 >> 1];
        uint64_t v37 = **v36;
        int v38 = v37[8];
        if (v38 == 13 && v35 == 13)
        {
          unint64_t v42 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v99);
          BOOL v41 = v42 < llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v37);
        }
        else
        {
          BOOL v41 = v35 == 13 && v38 != 13;
        }
        if (v41) {
          v34 += ~(v34 >> 1);
        }
        else {
          v34 >>= 1;
        }
        if (v41) {
          uint8x8_t v19 = v36 + 1;
        }
      }
      while (v34);
    }
    int v31 = a2;
    uint64_t v32 = v19 - a2;
    uint64_t v30 = v93;
LABEL_58:
    int v43 = v19;
    a3 = v96;
    a6 = v97;
    if (v20 != v31)
    {
      int v43 = v20;
      if (v31 != v19)
      {
        if (v20 + 1 == v31)
        {
          uint64_t v94 = v30;
          uint64_t v50 = *v20;
          int64_t v51 = (char *)v19 - (char *)v31;
          memmove(v20, v31, (char *)v19 - (char *)v31);
          int v43 = (unsigned __int8 ***)((char *)v20 + v51);
          *int v43 = v50;
        }
        else
        {
          if (v31 + 1 != v19)
          {
            uint64_t v44 = v31 - v20;
            if (v44 == v19 - v31)
            {
              uint64_t v45 = 0;
              do
              {
                uint64_t v46 = v20[v45];
                v20[v45] = v31[v45];
                uint64_t v47 = (uint64_t)&v20[v45 + 1];
                v31[v45] = v46;
                uint64_t v48 = (uint64_t)&v31[++v45];
              }
              while ((unsigned __int8 ***)v47 != v31 && v48 != (void)v19);
              int v43 = v31;
            }
            else
            {
              uint64_t v53 = v19 - v31;
              uint64_t v54 = v31 - v20;
              do
              {
                uint64_t v55 = v54;
                uint64_t v54 = v53;
                uint64_t v53 = v55 % v53;
              }
              while (v53);
              if (v54)
              {
                uint64_t v56 = &v20[v54];
                do
                {
                  unsigned int v58 = *--v56;
                  uint64_t v57 = v58;
                  uint64_t v59 = &v56[v44];
                  unsigned int v60 = v56;
                  do
                  {
                    unsigned int v61 = v60;
                    unsigned int v60 = v59;
                    char *v61 = *v59;
                    BOOL v62 = __OFSUB__(v44, v19 - v59);
                    uint64_t v64 = v44 - (v19 - v59);
                    char v63 = (v64 < 0) ^ v62;
                    uint64_t v59 = &v20[v64];
                    if (v63) {
                      uint64_t v59 = &v60[v44];
                    }
                  }
                  while (v59 != v56);
                  *unsigned int v60 = v57;
                }
                while (v56 != v20);
              }
              int v43 = &v20[v19 - v31];
            }
            goto LABEL_85;
          }
          uint64_t v94 = v30;
          unint64_t v52 = *(v19 - 1);
          int v43 = v20 + 1;
          if (v19 - 1 != v20) {
            memmove(v20 + 1, v20, (char *)(v19 - 1) - (char *)v20);
          }
          *unsigned int v20 = v52;
        }
        uint64_t v30 = v94;
      }
    }
LABEL_85:
    a4 -= v30;
    uint64_t v65 = v100 - v32;
    if (v30 + v32 >= a4 + v100 - v32)
    {
      uint64_t v67 = a4;
      a4 = v30;
      uint64_t result = (unsigned __int8 *)sub_1CD1F3088(v43, v19, v96, v67, v65, v97, v95);
      uint8x8_t v19 = v20;
      a7 = v95;
      uint64_t v65 = v32;
      a3 = v43;
    }
    else
    {
      unsigned int v66 = v20;
      a7 = v95;
      uint64_t result = (unsigned __int8 *)sub_1CD1F3088(v11, v66, v43, v30, v32, v97, v95);
      int v11 = v43;
    }
    uint64_t v100 = v65;
    a2 = v19;
  }
  while (v65);
  return result;
}

void *sub_1CD1F36B4(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1CC2771DC(a1, v6);
    unsigned int v8 = 0;
    sub_1CC277148(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CD1F376C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  sub_1CD1F3938(*(void *)a1, a2, 0, a4);
  int v7 = (uint64_t *)(**(void **)(a1 + 8) + 32);
  while (2)
  {
    uint64_t v8 = *v7;
    switch(*(_WORD *)(v8 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v9 = (unsigned int **)(v8 + 40);
        break;
      case 4:
        unsigned int v9 = (unsigned int **)(v8 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        int v7 = *(uint64_t **)(v8 + 32);
        continue;
      case 6:
        int v7 = (uint64_t *)(v8 + 40);
        continue;
      case 0xE:
        unsigned int v9 = *(unsigned int ***)(v8 - 8);
        break;
      default:
        unsigned int v9 = *(unsigned int ***)(v8 + 32);
        break;
    }
    break;
  }
  int v10 = *v9;
  int v11 = *(void **)(a1 + 16);
  unsigned int v12 = (*v9)[2];
  if (v10) {
    BOOL v13 = (v12 & 0xFE) == 18;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    int v16 = (llvm::Type *)v10[8];
    unint64_t v17 = (uint64_t **)(**(void **)v10 + 1888);
    if (v12 == 19) {
      llvm::ScalableVectorType::get(v17, v16);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v17, v16);
    }
  }
  v18[0] = (*(uint64_t (**)(void, uint64_t, unsigned int *))(*(void *)*v11 + 864))(*v11, a2, v10);
  v18[1] = v14;
  uint64_t v19 = a3;
  LODWORD(v20) = 0;
  sub_1CB90C9D4((uint64_t)&v19, (uint64_t)v18);
  return v19;
}

uint64_t sub_1CD1F390C(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CD88E49C(a1, a2, a3, a4);
  }
  uint64_t v5 = *(void *)a1 + 16 * v4;
  *(_DWORD *)uint64_t v5 = a2;
  *(_DWORD *)(v5 + 4) = a3;
  *(void *)(v5 + 8) = a4;
  *(_DWORD *)(a1 + 8) = v4 + 1;
  return a1;
}

uint64_t sub_1CD1F3938(uint64_t result, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    int v7 = a2;
    uint64_t v8 = a3;
    uint64_t v9 = a4;
    BOOL v6 = *(void *)result + 24 * (unint64_t)v4 > (unint64_t)&v7;
    if (*(void *)result > (unint64_t)&v7 || !v6) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v5 = *(void *)result + 24 * v4;
  *(_DWORD *)uint64_t v5 = a2;
  *(void *)(v5 + 8) = a3;
  *(void *)(v5 + 16) = a4;
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

uint64_t sub_1CD1F3A2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_1CD1F3938(*(void *)a1, a2, 0, a3);
  uint64_t v5 = (uint64_t *)(**(void **)(a1 + 8) + 32);
  while (2)
  {
    uint64_t v6 = *v5;
    switch(*(_WORD *)(v6 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v7 = (unsigned int **)(v6 + 40);
        break;
      case 4:
        int v7 = (unsigned int **)(v6 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v5 = *(uint64_t **)(v6 + 32);
        continue;
      case 6:
        uint64_t v5 = (uint64_t *)(v6 + 40);
        continue;
      case 0xE:
        int v7 = *(unsigned int ***)(v6 - 8);
        break;
      default:
        int v7 = *(unsigned int ***)(v6 + 32);
        break;
    }
    break;
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(void **)(a1 + 16);
  unsigned int v10 = (*v7)[2];
  if (v8) {
    BOOL v11 = (v10 & 0xFE) == 18;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v14 = (llvm::Type *)v8[8];
    int v15 = (uint64_t **)(**(void **)v8 + 1888);
    if (v10 == 19) {
      llvm::ScalableVectorType::get(v15, v14);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v14);
    }
  }
  v16[0] = (*(uint64_t (**)(void, uint64_t, unsigned int *))(*(void *)*v9 + 864))(*v9, a2, v8);
  v16[1] = v12;
  uint64_t v17 = 1;
  LODWORD(v18) = 0;
  sub_1CB90C9D4((uint64_t)&v17, (uint64_t)v16);
  return v17;
}

uint64_t sub_1CD1F3BC4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  sub_1CD1F3938(*(void *)a1, a2, 0, a4);
  uint64_t v7 = **(void **)(a1 + 8);
  while (2)
  {
    uint64_t v8 = *(uint64_t **)(v7 + 32);
LABEL_3:
    uint64_t v7 = *v8;
    switch(*(_WORD *)(v7 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v9 = (unsigned int **)(v7 + 40);
        break;
      case 4:
        uint64_t v9 = (unsigned int **)(v7 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        continue;
      case 6:
        uint64_t v8 = (uint64_t *)(v7 + 40);
        goto LABEL_3;
      case 0xE:
        uint64_t v9 = *(unsigned int ***)(v7 - 8);
        break;
      default:
        uint64_t v9 = *(unsigned int ***)(v7 + 32);
        break;
    }
    break;
  }
  unsigned int v10 = *v9;
  BOOL v11 = *(void **)(a1 + 16);
  unsigned int v12 = (*v9)[2];
  if (v10) {
    BOOL v13 = (v12 & 0xFE) == 18;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    int v16 = (llvm::Type *)v10[8];
    uint64_t v17 = (uint64_t **)(**(void **)v10 + 1888);
    if (v12 == 19) {
      llvm::ScalableVectorType::get(v17, v16);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v17, v16);
    }
  }
  v18[0] = (*(uint64_t (**)(void, uint64_t, unsigned int *))(*(void *)*v11 + 864))(*v11, a2, v10);
  v18[1] = v14;
  uint64_t v19 = a3;
  LODWORD(v20) = 0;
  sub_1CB90C9D4((uint64_t)&v19, (uint64_t)v18);
  return v19;
}

uint64_t sub_1CD1F3D5C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  sub_1CD1F3938(*(void *)a1, a2, 0, a4);
  uint64_t v7 = **(void **)(a1 + 8);
  while (2)
  {
    uint64_t v8 = *(uint64_t **)(v7 + 32);
LABEL_3:
    uint64_t v7 = *v8;
    switch(*(_WORD *)(v7 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v9 = (unsigned int **)(v7 + 40);
        break;
      case 4:
        uint64_t v9 = (unsigned int **)(v7 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        continue;
      case 6:
        uint64_t v8 = (uint64_t *)(v7 + 40);
        goto LABEL_3;
      case 0xE:
        uint64_t v9 = *(unsigned int ***)(v7 - 8);
        break;
      default:
        uint64_t v9 = *(unsigned int ***)(v7 + 32);
        break;
    }
    break;
  }
  unsigned int v10 = *v9;
  BOOL v11 = *(void **)(a1 + 16);
  unsigned int v12 = (*v9)[2];
  if (v10) {
    BOOL v13 = (v12 & 0xFE) == 18;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    int v16 = (llvm::Type *)v10[8];
    uint64_t v17 = (uint64_t **)(**(void **)v10 + 1888);
    if (v12 == 19) {
      llvm::ScalableVectorType::get(v17, v16);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v17, v16);
    }
  }
  v18[0] = (*(uint64_t (**)(void, uint64_t, unsigned int *))(*(void *)*v11 + 864))(*v11, a2, v10);
  v18[1] = v14;
  uint64_t v19 = a3;
  LODWORD(v20) = 0;
  sub_1CB90C9D4((uint64_t)&v19, (uint64_t)v18);
  return v19;
}

void sub_1CD1F3EF4(uint64_t a1, uint64_t a2)
{
  v42[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 88);
  uint64_t v5 = *(void **)(a1 + 96);
  unsigned int v4 = (unsigned int *)(a1 + 88);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      unsigned int v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          uint64_t v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *uint64_t v8 = a2;
          --*(_DWORD *)(a1 + 112);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  uint64_t v5 = *(void **)(a1 + 96);
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    int v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  int v16 = 0;
LABEL_26:
  if (v16) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    *uint64_t v20 = a2;
LABEL_33:
    unint64_t v21 = *(llvm::ScalarEvolution ***)a1;
    int v22 = *(unsigned __int16 *)(a2 + 24);
    if (a2 && v22 == 6)
    {
      uint64_t v23 = *(void *)(a2 + 40);
      if (!v23 || *(_WORD *)(v23 + 24)) {
        goto LABEL_50;
      }
      uint64_t v24 = *(void *)(v23 + 32);
      uint64_t v25 = *(unsigned int *)(v24 + 32);
      if (v25 > 0x40)
      {
        int v27 = 0;
        int64_t v28 = (unint64_t)(v25 + 63) >> 6;
        do
        {
          if (v28-- < 1) {
            break;
          }
          unint64_t v30 = *(void *)(*(void *)(v24 + 24) + 8 * v28);
          v27 += __clz(v30);
        }
        while (!v30);
        int v31 = v25 | 0xFFFFFFC0;
        if ((v25 & 0x3F) == 0) {
          int v31 = 0;
        }
        if (v27 + v31 == v25) {
          goto LABEL_50;
        }
      }
      else if (!*(void *)(v24 + 24))
      {
LABEL_50:
        *((unsigned char *)v21 + 9) = 1;
        return;
      }
    }
    else if (a2 && v22 == 7)
    {
      uint64_t v26 = *(void *)(a2 + 40);
      if (v26 == 2) {
        goto LABEL_43;
      }
      unint64_t v39 = *(llvm::ScalarEvolution ***)a1;
      uint64_t v33 = *v21;
      uint64_t v34 = *(void *)(a2 + 32);
      uint64_t v40 = v42;
      uint64_t v41 = 0x300000000;
      uint64_t v35 = v26;
      size_t v36 = 8 * v26 - 8;
      if (v36 >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v37 = 0;
      if (v35 != 1)
      {
        memcpy(v40, (const void *)(v34 + 8), v36);
        int v37 = v41;
      }
      LODWORD(v41) = v37 + (v36 >> 3);
      int v38 = (const llvm::SCEV *)sub_1CD478318(v33, (uint64_t)&v40, *(const llvm::Loop **)(a2 + 48), 0);
      if (v40 != v42) {
        free(v40);
      }
      unint64_t v21 = v39;
      if (*(void *)(a2 + 40) == 2
        || (int)llvm::ScalarEvolution::getBlockDisposition(*v39, v38, **(const llvm::BasicBlock ***)(*(void *)(a2 + 48) + 32)) > 0)
      {
LABEL_43:
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
      }
      goto LABEL_50;
    }
    unsigned int v32 = *(_DWORD *)(a1 + 16);
    if (v32 >= *(_DWORD *)(a1 + 20)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 8) + 8 * v32) = a2;
    ++*(_DWORD *)(a1 + 16);
  }
}

uint64_t sub_1CD1F435C()
{
  int v4 = 1;
  int v2 = 4;
  unsigned int v3 = &v2;
  *(void *)&long long v1 = "When performing SCEV expansion only if it is cheap to do, this controls the budget that is considered"
                   " cheap (default = 4)";
  *((void *)&v1 + 1) = 121;
  sub_1CD45A86C((uint64_t)&llvm::SCEVCheapExpansionBudget, "scev-cheap-expansion-budget", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &llvm::SCEVCheapExpansionBudget, &dword_1CB82C000);
}

uint64_t llvm::SCCPInstVisitor::markBlockExecutable(llvm::SCCPInstVisitor *this, llvm::BasicBlock *a2)
{
  uint64_t v6 = (void *)*((void *)this + 5);
  uint64_t v5 = (void *)*((void *)this + 6);
  int v4 = (unsigned int *)((char *)this + 40);
  uint64_t v7 = v4[5];
  if (v5 != v6)
  {
    unsigned int v11 = *((_DWORD *)this + 14);
    goto LABEL_12;
  }
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v7;
    unsigned int v10 = v5;
    while ((llvm::BasicBlock *)*v10 != a2)
    {
      if (*v10 == -2) {
        uint64_t v8 = v10;
      }
      ++v10;
      v9 -= 8;
      if (!v9)
      {
        if (!v8) {
          goto LABEL_9;
        }
        *uint64_t v8 = a2;
        --*((_DWORD *)this + 16);
        goto LABEL_33;
      }
    }
    return 0;
  }
LABEL_9:
  unsigned int v11 = *((_DWORD *)this + 14);
  if (v7 >= v11)
  {
LABEL_12:
    if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)this + 16)))
    {
      if (v11 >= 0x40) {
        v11 *= 2;
      }
      else {
        unsigned int v11 = 128;
      }
    }
    else if (v11 - v7 >= v11 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
    unsigned int v11 = *((_DWORD *)this + 14);
    uint64_t v5 = (void *)*((void *)this + 6);
LABEL_14:
    unsigned int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v14 = (llvm::BasicBlock **)&v5[v13];
    uint64_t v15 = *v14;
    if (*v14 == (llvm::BasicBlock *)-1)
    {
      int v16 = 0;
LABEL_26:
      if (v16) {
        uint64_t v20 = v16;
      }
      else {
        uint64_t v20 = v14;
      }
      if (*v20 != a2)
      {
        if (*v20 == (llvm::BasicBlock *)-2) {
          --*((_DWORD *)this + 16);
        }
        else {
          ++*((_DWORD *)this + 15);
        }
        *uint64_t v20 = a2;
        goto LABEL_33;
      }
    }
    else
    {
      int v16 = 0;
      int v17 = 1;
      while (v15 != a2)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == (llvm::BasicBlock *)-2;
        }
        if (v18) {
          int v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        uint64_t v14 = (llvm::BasicBlock **)&v5[v19 & v12];
        uint64_t v15 = *v14;
        if (*v14 == (llvm::BasicBlock *)-1) {
          goto LABEL_26;
        }
      }
    }
    return 0;
  }
  *((_DWORD *)this + 15) = v7 + 1;
  v5[v7] = a2;
LABEL_33:
  unsigned int v21 = *((_DWORD *)this + 462);
  if (v21 >= *((_DWORD *)this + 463)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)this + 230) + 8 * v21) = a2;
  ++*((_DWORD *)this + 462);
  return 1;
}

_DWORD *llvm::SCCPInstVisitor::pushToWorkList(_DWORD *result, unsigned char *a2, uint64_t a3)
{
  if (*a2 != 6)
  {
    unsigned int v3 = result + 328;
    int v4 = result + 330;
    unsigned int v5 = result[330];
    if (v5 < result[331]) {
      goto LABEL_3;
    }
LABEL_5:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v3 = result + 196;
  int v4 = result + 198;
  unsigned int v5 = result[198];
  if (v5 >= result[199]) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*v3 + 8 * v5) = a3;
  ++*v4;
  return result;
}

_DWORD *llvm::SCCPInstVisitor::pushToWorkListMsg(_DWORD *result, unsigned char *a2, uint64_t a3)
{
  if (*a2 != 6)
  {
    unsigned int v3 = result + 328;
    int v4 = result + 330;
    unsigned int v5 = result[330];
    if (v5 < result[331]) {
      goto LABEL_3;
    }
LABEL_5:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v3 = result + 196;
  int v4 = result + 198;
  unsigned int v5 = result[198];
  if (v5 >= result[199]) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*v3 + 8 * v5) = a3;
  ++*v4;
  return result;
}

uint64_t llvm::SCCPInstVisitor::markConstant(_DWORD *a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8 = sub_1CC05E6A4((uint64_t)a2, a4, a5);
  if (v8)
  {
    if (*a2 == 6)
    {
      uint64_t v9 = a1 + 196;
      unsigned int v10 = a1 + 198;
      unsigned int v11 = a1[198];
      if (v11 < a1[199])
      {
LABEL_4:
        *(void *)(*v9 + 8 * v11) = a3;
        ++*v10;
        return v8;
      }
    }
    else
    {
      uint64_t v9 = a1 + 328;
      unsigned int v10 = a1 + 330;
      unsigned int v11 = a1[330];
      if (v11 < a1[331]) {
        goto LABEL_4;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return v8;
}

BOOL llvm::SCCPInstVisitor::markOverdefined(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_WORD *)a2;
  if (v3 != 6)
  {
    if ((*(_WORD *)a2 & 0xFE) == 4)
    {
      if (*(_DWORD *)(a2 + 32) >= 0x41u)
      {
        uint64_t v9 = *(void *)(a2 + 24);
        if (v9) {
          MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(a2 + 16) >= 0x41u)
      {
        uint64_t v10 = *(void *)(a2 + 8);
        if (v10) {
          MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
        }
      }
    }
    *(unsigned char *)a2 = 6;
    unsigned int v7 = *(_DWORD *)(a1 + 792);
    if (v7 >= *(_DWORD *)(a1 + 796)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 784) + 8 * v7) = a3;
    ++*(_DWORD *)(a1 + 792);
  }
  return v3 != 6;
}

void *llvm::SCCPInstVisitor::getConstant(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)a2 == 2) {
    return *(void **)(a2 + 8);
  }
  if ((*(_WORD *)a2 & 0xFE) != 4) {
    return 0;
  }
  unsigned int v5 = (void **)(a2 + 8);
  unsigned int v26 = *(_DWORD *)(a2 + 16);
  if (v26 > 0x40) {
    operator new[]();
  }
  __s2 = *v5;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v6 = v26;
  unsigned int v7 = __s2;
  unsigned int v26 = 0;
  uint64_t v8 = *(unsigned int *)(a2 + 32);
  if (v8 > 0x40)
  {
    uint64_t v24 = __s2;
    unsigned int v19 = v6;
    int v20 = memcmp(*(const void **)(a2 + 24), __s2, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    unsigned int v6 = v19;
    unsigned int v7 = v24;
    BOOL v9 = v20 == 0;
  }
  else
  {
    BOOL v9 = *(void *)(a2 + 24) == (void)__s2;
  }
  int v10 = v9;
  if (v6 >= 0x41)
  {
    if (v7)
    {
      MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
      if (v26 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  if (!v10) {
    return 0;
  }
  unsigned int v11 = *(llvm::ConstantInt **)(a1 + 2440);
  unsigned int v26 = *(_DWORD *)(a2 + 16);
  if (v26 > 0x40) {
    operator new[]();
  }
  __s2 = *v5;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v13 = v26;
  uint64_t v14 = __s2;
  unsigned int v26 = 0;
  uint64_t v15 = *(unsigned int *)(a2 + 32);
  if (v15 > 0x40)
  {
    unsigned int v21 = *(const void **)(a2 + 24);
    int v22 = __s2;
    int v23 = memcmp(v21, __s2, ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
    uint64_t v14 = v22;
    BOOL v16 = v23 == 0;
  }
  else
  {
    BOOL v16 = *(void *)(a2 + 24) == (void)__s2;
  }
  int v17 = v16;
  if (v13 >= 0x41)
  {
    if (v14)
    {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
      if (v26 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v17) {
    BOOL v18 = (llvm::LLVMContext *)v5;
  }
  else {
    BOOL v18 = 0;
  }
  return llvm::ConstantInt::get(v11, v18, v12);
}

uint64_t sub_1CD1F4B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v5 = a1 + 136;
  uint64_t v6 = v7;
  int v8 = *(_DWORD *)(v5 + 16);
  if (v8)
  {
    uint64_t v9 = a2;
    int v10 = v8 - 1;
    unsigned int v11 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v12 = (void *)(v6 + 48 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_11;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      unsigned int v12 = (void *)(v6 + 48 * (v17 & v10));
      uint64_t v13 = *v12;
      if (*v12 == a2) {
        goto LABEL_11;
      }
    }
    if (v14) {
      int v23 = v14;
    }
    else {
      int v23 = v12;
    }
  }
  else
  {
    int v23 = 0;
  }
  unsigned int v12 = sub_1CD203218(v5, &v24, v23);
  *unsigned int v12 = v24;
  *((_WORD *)v12 + 4) = 0;
  uint64_t v9 = v24;
LABEL_11:
  BOOL v18 = v12 + 1;
  uint64_t result = sub_1CC05E6A4((uint64_t)(v12 + 1), a3, 0);
  if (!result) {
    return result;
  }
  if (*v18 != 6)
  {
    int v20 = (void *)(a1 + 1312);
    unsigned int v21 = (_DWORD *)(a1 + 1320);
    unsigned int v22 = *(_DWORD *)(a1 + 1320);
    if (v22 < *(_DWORD *)(a1 + 1324)) {
      goto LABEL_14;
    }
LABEL_21:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v20 = (void *)(a1 + 784);
  unsigned int v21 = (_DWORD *)(a1 + 792);
  unsigned int v22 = *(_DWORD *)(a1 + 792);
  if (v22 >= *(_DWORD *)(a1 + 796)) {
    goto LABEL_21;
  }
LABEL_14:
  *(void *)(*v20 + 8 * v22) = v9;
  ++*v21;
  return result;
}

BOOL sub_1CD1F4CA8(BOOL result, uint64_t a2)
{
  int v2 = (llvm::Constant *)a2;
  uint64_t v3 = result;
  int v20 = (llvm::Constant *)a2;
  if (*(void *)a2) {
    BOOL v4 = *(unsigned char *)(*(void *)a2 + 8) == 16;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = result + 136;
    uint64_t v6 = *(void *)(v3 + 136);
    int v7 = *(_DWORD *)(v3 + 152);
    if (v7)
    {
      int v8 = v7 - 1;
      unsigned int v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      int v10 = (void *)(v6 + 48 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        return llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)(v10 + 1), (uint64_t)v2);
      }
      unsigned int v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          unsigned int v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        int v10 = (void *)(v6 + 48 * (v15 & v8));
        uint64_t v11 = *v10;
        if (*v10 == a2) {
          return llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)(v10 + 1), (uint64_t)v2);
        }
      }
      if (v12) {
        unsigned int v19 = v12;
      }
      else {
        unsigned int v19 = v10;
      }
    }
    else
    {
      unsigned int v19 = 0;
    }
    int v10 = sub_1CD203218(v5, (uint64_t *)&v20, v19);
    *int v10 = v20;
    *((_WORD *)v10 + 4) = 0;
    int v2 = v20;
    return llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)(v10 + 1), (uint64_t)v2);
  }
  int v16 = *(_DWORD *)(*(void *)a2 + 12);
  if (v16)
  {
    unsigned int v17 = 0;
    do
    {
      BOOL v18 = sub_1CD1F721C(v3, v2, v17);
      uint64_t result = llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)v18, (uint64_t)v2);
      unsigned int v17 = (llvm::Type *)(v17 + 1);
    }
    while (v16 != v17);
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::mergeInValue(_DWORD *a1, unsigned char *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v8 = sub_1CC061B28((uint64_t)a2, a4, a5);
  if (v8)
  {
    if (*a2 == 6)
    {
      unsigned int v9 = a1 + 196;
      int v10 = a1 + 198;
      unsigned int v11 = a1[198];
      if (v11 < a1[199])
      {
LABEL_4:
        *(void *)(*v9 + 8 * v11) = a3;
        ++*v10;
        return v8;
      }
    }
    else
    {
      unsigned int v9 = a1 + 328;
      int v10 = a1 + 330;
      unsigned int v11 = a1[330];
      if (v11 < a1[331]) {
        goto LABEL_4;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return v8;
}

uint64_t llvm::SCCPInstVisitor::markEdgeExecutable(llvm::SCCPInstVisitor *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int64_t v28 = a2;
  uint64_t v29 = a3;
  int v5 = *((_DWORD *)this + 596);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 296);
    unint64_t v7 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
       + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    unint64_t v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    int v10 = v5 - 1;
    unsigned int v11 = v10 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~(v9 << 27)));
    unsigned int v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
    int v13 = *v12;
    BOOL v14 = v12[1];
    if (*v12 == a2 && v14 == a3) {
      return 0;
    }
    int v16 = 0;
    int v17 = 1;
    while (v13 != (llvm::BasicBlock *)-4096 || v14 != (llvm::BasicBlock *)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v14 == (llvm::BasicBlock *)-8192;
      }
      if (v18 && v13 == (llvm::BasicBlock *)-8192) {
        int v16 = v12;
      }
      unsigned int v20 = v11 + v17++;
      unsigned int v11 = v20 & v10;
      unsigned int v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
      int v13 = *v12;
      BOOL v14 = v12[1];
      if (*v12 == a2 && v14 == a3) {
        return 0;
      }
    }
    if (v16) {
      int v23 = v16;
    }
    else {
      int v23 = v12;
    }
  }
  else
  {
    int v23 = 0;
  }
  uint64_t v24 = sub_1CD1D3AE4((uint64_t)this + 2368, (uint64_t)&v28, &v28, v23);
  *uint64_t v24 = v28;
  v24[1] = v29;
  if ((llvm::SCCPInstVisitor::markBlockExecutable(this, a3) & 1) != 0
    || *((llvm::BasicBlock **)a3 + 5) == (llvm::BasicBlock *)((char *)a3 + 40))
  {
    return 1;
  }
  for (uint64_t i = *((void *)a3 + 6); ; uint64_t i = *(void *)(v26 + 32))
  {
    uint64_t v26 = i - 24;
    uint64_t v27 = i ? i - 24 : 0;
    uint64_t result = 1;
    if (!i || *(unsigned char *)(v27 + 16) != 83) {
      break;
    }
    llvm::SCCPInstVisitor::visitPHINode(this, (llvm::PHINode *)(i - 24));
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitPHINode(llvm::SCCPInstVisitor *this, llvm::PHINode *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)a2 + 8) == 16)
  {
    return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
  }
  else
  {
    uint64_t v6 = (char *)this + 136;
    uint64_t v54 = a2;
    LOWORD(v55) = 0;
    uint64_t result = (uint64_t)sub_1CD203594((uint64_t)&v49, (uint64_t)this + 136, (uint64_t *)&v54, (unsigned __int8 *)&v55);
    if ((v55 & 0xFE) == 4) {
      uint64_t result = sub_1CC05EB8C((uint64_t)&v56);
    }
    unint64_t v8 = (unsigned char *)(v49 + 8);
    if ((_BYTE)v51 && *((unsigned __int8 *)a2 + 16) <= 0x14u) {
      uint64_t result = sub_1CC05E6A4(v49 + 8, (uint64_t)a2, 0);
    }
    if (*v8 != 6)
    {
      if ((*((_DWORD *)a2 + 5) & 0x7FFFFFFu) >= 0x41)
      {
        return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
      }
      else
      {
        uint64_t v54 = a2;
        LOWORD(v55) = 0;
        sub_1CD203594((uint64_t)&v49, (uint64_t)this + 136, (uint64_t *)&v54, (unsigned __int8 *)&v55);
        if ((v55 & 0xFE) == 4) {
          sub_1CC05EB8C((uint64_t)&v56);
        }
        uint64_t v9 = v49;
        unint64_t v10 = v49 + 8;
        if ((_BYTE)v51 && *((unsigned __int8 *)a2 + 16) <= 0x14u) {
          sub_1CC05E6A4(v49 + 8, (uint64_t)a2, 0);
        }
        int v11 = *(unsigned __int8 *)v10;
        LOWORD(v49) = *(unsigned __int8 *)v10;
        if ((v11 - 4) < 2)
        {
          unsigned int v51 = *(_DWORD *)(v9 + 24);
          if (v51 > 0x40) {
            operator new[]();
          }
          int __src = *(void **)(v9 + 16);
          unsigned int v53 = *(_DWORD *)(v9 + 40);
          if (v53 > 0x40) {
            operator new[]();
          }
          unint64_t v52 = *(void **)(v9 + 32);
          LOBYTE(v11) = v49;
          LOWORD(v49) = v49 | (*(unsigned __int8 *)(v10 + 1) << 8);
        }
        else if ((v11 - 2) < 2)
        {
          int __src = *(void **)(v9 + 16);
        }
        int v12 = *((_DWORD *)a2 + 5);
        uint64_t v13 = v12 & 0x7FFFFFF;
        if ((v12 & 0x7FFFFFF) != 0)
        {
          uint64_t v3 = 0;
          unsigned int v14 = 0;
          while (1)
          {
            int v15 = *((_DWORD *)a2 + 5);
            if ((v15 & 0x40000000) != 0) {
              int v16 = (char *)*((void *)a2 - 1);
            }
            else {
              int v16 = (char *)a2 - 32 * (v15 & 0x7FFFFFF);
            }
            int v17 = *((_DWORD *)this + 596);
            if (v17)
            {
              uint64_t v18 = *(void *)&v16[32 * *((unsigned int *)a2 + 15) + 8 * v3];
              uint64_t v19 = *((void *)a2 + 5);
              uint64_t v20 = *((void *)this + 296);
              unint64_t v21 = ((v19 >> 4) ^ (v19 >> 9) | ((unint64_t)((v18 >> 4) ^ (v18 >> 9)) << 32))
                  + ~((unint64_t)((v19 >> 4) ^ (v19 >> 9)) << 32);
              unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
              unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
              int v24 = v17 - 1;
              unsigned int v25 = v24 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27)));
              uint64_t v26 = (uint64_t *)(v20 + 16 * v25);
              uint64_t v28 = *v26;
              uint64_t v27 = v26[1];
              if (v18 == v28 && v19 == v27)
              {
LABEL_35:
                if ((v15 & 0x40000000) != 0) {
                  uint64_t v34 = (char *)*((void *)a2 - 1);
                }
                else {
                  uint64_t v34 = (char *)a2 - 32 * (v15 & 0x7FFFFFF);
                }
                uint64_t v2 = *(void *)&v34[32 * v3];
                uint64_t v54 = (llvm::PHINode *)v2;
                LOWORD(v55) = 0;
                sub_1CD203594((uint64_t)v42, (uint64_t)this + 136, (uint64_t *)&v54, (unsigned __int8 *)&v55);
                if ((v55 & 0xFE) == 4) {
                  sub_1CC05EB8C((uint64_t)&v56);
                }
                uint64_t v35 = v42[0];
                size_t v36 = (unsigned __int8 *)(v42[0] + 8);
                if (v43)
                {
                  if (v2 && *(unsigned __int8 *)(v2 + 16) <= 0x14u) {
                    sub_1CC05E6A4(v42[0] + 8, v2, 0);
                  }
                }
                int v37 = *v36;
                LOWORD(v54) = *v36;
                if ((v37 - 4) < 2)
                {
                  unsigned int v56 = *(_DWORD *)(v35 + 24);
                  if (v56 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v55 = *(void *)(v35 + 16);
                  unsigned int v58 = *(_DWORD *)(v35 + 40);
                  if (v58 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v57 = *(void *)(v35 + 32);
                  BYTE1(v54) = v36[1];
                }
                else if ((v37 - 2) < 2)
                {
                  uint64_t v55 = *(void *)(v35 + 16);
                }
                sub_1CC061B28((uint64_t)&v49, (unsigned __int8 *)&v54, 0x100000000);
                unint64_t v10 = v49;
                if ((v54 & 0xFE) == 4)
                {
                  if (v58 >= 0x41 && v57) {
                    MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
                  }
                  if (v56 >= 0x41 && v55) {
                    MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
                  }
                }
                ++v14;
                if (v10 == 6)
                {
LABEL_53:
                  LOBYTE(v11) = v49;
                  goto LABEL_54;
                }
              }
              else
              {
                int v30 = 1;
                while (v28 != -4096 || v27 != -4096)
                {
                  unsigned int v31 = v25 + v30++;
                  unsigned int v25 = v31 & v24;
                  unsigned int v32 = (uint64_t *)(v20 + 16 * v25);
                  uint64_t v28 = *v32;
                  uint64_t v27 = v32[1];
                  if (v18 == v28 && v19 == v27) {
                    goto LABEL_35;
                  }
                }
              }
            }
            if (++v3 == v13) {
              goto LABEL_53;
            }
          }
        }
        unsigned int v14 = 0;
LABEL_54:
        char v38 = v11;
        *(_WORD *)uint64_t v44 = v11;
        if (v11 - 4 < 2)
        {
          LODWORD(v2) = v51;
          unsigned int v46 = v51;
          if (v51 > 0x40) {
            operator new[]();
          }
          uint64_t v45 = __src;
          LODWORD(v3) = v53;
          unsigned int v48 = v53;
          if (v53 > 0x40) {
            operator new[]();
          }
          unint64_t v10 = (unint64_t)v52;
          uint64_t v47 = v52;
          char v38 = v11;
          *(_WORD *)uint64_t v44 = v11 | (BYTE1(v49) << 8);
        }
        else if (v11 - 2 < 2)
        {
          uint64_t v45 = __src;
        }
        sub_1CD1F658C((uint64_t)this, (uint64_t)a2, v44, ((unint64_t)(v14 + 1) << 32) | 0x100);
        if ((v38 & 0xFE) == 4)
        {
          if (v3 >= 0x41 && v10)
          {
            MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
            LODWORD(v2) = v46;
          }
          if (v2 >= 0x41 && v45) {
            MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
          }
        }
        uint64_t v54 = a2;
        LOWORD(v55) = 0;
        uint64_t result = (uint64_t)sub_1CD203594((uint64_t)v42, (uint64_t)v6, (uint64_t *)&v54, (unsigned __int8 *)&v55);
        if ((v55 & 0xFE) == 4) {
          uint64_t result = sub_1CC05EB8C((uint64_t)&v56);
        }
        uint64_t v39 = v42[0] + 8;
        if (v43 && *((unsigned __int8 *)a2 + 16) <= 0x14u) {
          uint64_t result = sub_1CC05E6A4(v42[0] + 8, (uint64_t)a2, 0);
        }
        unsigned int v40 = *(unsigned __int8 *)(v39 + 1);
        if (v14 > v40) {
          LOBYTE(v40) = v14;
        }
        *(unsigned char *)(v39 + 1) = v40;
        if ((v49 & 0xFE) == 4)
        {
          if (v53 >= 0x41)
          {
            uint64_t result = (uint64_t)v52;
            if (v52) {
              uint64_t result = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
            }
          }
          if (v51 >= 0x41)
          {
            uint64_t result = (uint64_t)__src;
            if (__src) {
              return MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  return result;
}

void llvm::SCCPInstVisitor::getFeasibleSuccessors(void *a1, uint64_t a2, void *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 30)
  {
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v7 = 2;
    }
    else {
      unsigned int v7 = 1;
    }
  }
  else
  {
    unsigned int v7 = 0;
    switch(*(unsigned char *)(a2 + 16))
    {
      case 0x1E:
LABEL_178:
        __break(1u);
        goto LABEL_179;
      case 0x1F:
        unsigned int v7 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
LABEL_179:
        unsigned int v7 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x21:
        unsigned int v7 = 2;
        break;
      case 0x24:
        unsigned int v7 = *(_WORD *)(a2 + 18) & 1;
        break;
      case 0x25:
        unsigned int v7 = 1;
        break;
      case 0x27:
        unsigned int v7 = *(_DWORD *)(a2 + 80) + 1;
        break;
      default:
        break;
    }
  }
  unint64_t v8 = v7;
  unint64_t v9 = a3[1];
  if (v9 != v7)
  {
    if (v9 <= v7)
    {
      if (a3[2] < (unint64_t)v7) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v7 != v9) {
        bzero((void *)(*a3 + v9), v7 - v9);
      }
    }
    a3[1] = v8;
    unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
  }
  unsigned int v10 = 0;
  switch(v6)
  {
    case 0x1Eu:
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 1) {
        goto LABEL_25;
      }
      int v11 = *(unsigned __int8 **)(a2 - 96);
      __s2 = v11;
      LOWORD(v72) = 0;
      sub_1CD203594((uint64_t)v69, (uint64_t)a1 + 136, (uint64_t *)&__s2, (unsigned __int8 *)&v72);
      if ((v72 & 0xFE) == 4)
      {
        if (v76 >= 0x41 && v75) {
          MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
        }
        if (v74 >= 0x41 && v73) {
          MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        }
      }
      uint64_t v12 = v69[0];
      uint64_t v13 = (unsigned __int8 *)(v69[0] + 8);
      if (v70 && v11 && v11[16] <= 0x14u) {
        sub_1CC05E6A4(v69[0] + 8, (uint64_t)v11, 0);
      }
      int v14 = *v13;
      LOWORD(__s2) = *v13;
      if ((v14 - 4) < 2)
      {
        LODWORD(v73) = *(_DWORD *)(v12 + 24);
        if (v73 > 0x40) {
          operator new[]();
        }
        uint64_t v72 = *(void *)(v12 + 16);
        LODWORD(v75) = *(_DWORD *)(v12 + 40);
        if (v75 > 0x40) {
          operator new[]();
        }
        uint64_t v74 = *(void *)(v12 + 32);
        LOWORD(__s2) = v14 | (v13[1] << 8);
      }
      else if ((v14 - 2) < 2)
      {
        uint64_t v72 = *(void *)(v12 + 16);
      }
      unint64_t Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)a1, (uint64_t)&__s2);
      if (Constant && *((unsigned char *)Constant + 16) == 16)
      {
        uint64_t v48 = *((unsigned int *)Constant + 8);
        if (v48 > 0x40)
        {
          int v52 = 0;
          int64_t v53 = (unint64_t)(v48 + 63) >> 6;
          do
          {
            if (v53-- < 1) {
              break;
            }
            unint64_t v55 = *(void *)(Constant[3] + 8 * v53);
            v52 += __clz(v55);
          }
          while (!v55);
          int v56 = v48 | 0xFFFFFFC0;
          if ((v48 & 0x3F) == 0) {
            int v56 = 0;
          }
          BOOL v49 = v52 + v56 == v48;
        }
        else
        {
          BOOL v49 = Constant[3] == 0;
        }
        unsigned int v57 = v49;
        unsigned int v51 = (unsigned char *)(*a3 + v57);
      }
      else
      {
        char v50 = (char)__s2;
        if ((__s2 & 0xFE) == 0) {
          goto LABEL_133;
        }
        unsigned int v51 = (unsigned char *)*a3;
        *(unsigned char *)(*a3 + 1) = 1;
      }
      unsigned char *v51 = 1;
      goto LABEL_132;
    case 0x21u:
      unsigned int v10 = 2;
      goto LABEL_28;
    case 0x22u:
      goto LABEL_28;
    case 0x24u:
      unsigned int v10 = *(_WORD *)(a2 + 18) & 1;
      goto LABEL_28;
    case 0x25u:
      unsigned int v10 = 1;
      goto LABEL_28;
    case 0x26u:
      unsigned int v10 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) - 1;
LABEL_28:
      size_t v17 = v10;
      if (a3[2] >= (unint64_t)v10) {
        goto LABEL_29;
      }
      goto LABEL_45;
    default:
      if (v6 == 31) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v6 == 31)
      {
        int v16 = *(_DWORD *)(a2 + 20);
        if ((v16 & 0x7FFFFFE) == 2)
        {
LABEL_25:
          *(unsigned char *)*a3 = 1;
          return;
        }
        if ((v16 & 0x40000000) != 0) {
          unint64_t v23 = *(void ***)(a2 - 8);
        }
        else {
          unint64_t v23 = (void **)(a2 - 32 * (v16 & 0x7FFFFFF));
        }
        uint64_t v28 = (unsigned __int8 *)*v23;
        __s2 = *v23;
        LOWORD(v72) = 0;
        sub_1CD203594((uint64_t)v69, (uint64_t)a1 + 136, (uint64_t *)&__s2, (unsigned __int8 *)&v72);
        if ((v72 & 0xFE) == 4)
        {
          if (v76 >= 0x41 && v75) {
            MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
          }
          if (v74 >= 0x41 && v73) {
            MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
          }
        }
        uint64_t v29 = v69[0];
        int v30 = (__int16 *)(v69[0] + 8);
        if (v70 && v28 && v28[16] <= 0x14u) {
          sub_1CC05E6A4(v69[0] + 8, (uint64_t)v28, 0);
        }
        unsigned int v31 = llvm::SCCPInstVisitor::getConstant((uint64_t)a1, (uint64_t)v30);
        if (v31 && *((unsigned char *)v31 + 16) == 16)
        {
          sub_1CC025540(a2, (uint64_t)v31);
          uint64_t v33 = (v32 + 1);
          if (v32 == -2) {
            uint64_t v33 = 0;
          }
          *(unsigned char *)(*a3 + v33) = 1;
          return;
        }
        __int16 v34 = *v30;
        int v35 = *v30;
        if (v35 == 4) {
          goto LABEL_72;
        }
        if (v35 == 5)
        {
          LODWORD(v72) = *(_DWORD *)(v29 + 24);
          if (v72 > 0x40) {
            operator new[]();
          }
          __s2 = *(void **)(v29 + 16);
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v36 = v72;
          a1 = __s2;
          LODWORD(v72) = 0;
          uint64_t v37 = *(unsigned int *)(v29 + 40);
          if (v37 > 0x40) {
            BOOL v38 = memcmp(*(const void **)(v29 + 32), __s2, ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v38 = *(void *)(v29 + 32) == (void)__s2;
          }
          char v39 = v38;
          if (v36 >= 0x41)
          {
            if (a1)
            {
              MEMORY[0x1D25D9CB0](a1, 0x1000C8000313F17);
              if (v72 >= 0x41)
              {
                if (__s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
              }
            }
          }
          if (v39)
          {
LABEL_72:
            int v40 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
            uint64_t v41 = (unsigned char *)*a3;
            uint64_t v42 = (v40 - 1);
            if (v40 != 1)
            {
              uint64_t v43 = 0;
              do
              {
                int v44 = *(_DWORD *)(a2 + 20);
                if ((v44 & 0x40000000) != 0) {
                  uint64_t v45 = *(void *)(a2 - 8);
                }
                else {
                  uint64_t v45 = v15 - 32 * (v44 & 0x7FFFFFF);
                }
                if (llvm::ConstantRange::contains((llvm::ConstantRange *)(v29 + 16), (const llvm::APInt *)(*(void *)(v45 + 32 * (2 * v43 + 2)) + 24)))
                {
                  if (v43 == 4294967294) {
                    uint64_t v46 = 0;
                  }
                  else {
                    uint64_t v46 = v43 + 1;
                  }
                  ++v43;
                  v41[v46] = 1;
                }
                else
                {
                  ++v43;
                }
              }
              while (v43 != v42);
              uint64_t v41 = (unsigned char *)*a3;
            }
            *uint64_t v41 = 1;
            return;
          }
          __int16 v34 = *v30;
        }
        if ((v34 & 0xFE) == 0) {
          return;
        }
        if (*(unsigned char *)(a2 + 16) != 30)
        {
          unsigned int v6 = 0;
          switch(*(unsigned char *)(a2 + 16))
          {
            case 0x1E:
              goto LABEL_178;
            case 0x1F:
              unsigned int v6 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_144;
            case 0x20:
            case 0x26:
              unsigned int v6 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_144;
            case 0x21:
              unsigned int v6 = 2;
              goto LABEL_144;
            case 0x24:
              unsigned int v6 = *(_WORD *)(a2 + 18) & 1;
              goto LABEL_144;
            case 0x25:
              unsigned int v6 = 1;
              goto LABEL_144;
            case 0x27:
              unsigned int v6 = *(_DWORD *)(a2 + 80) + 1;
              goto LABEL_144;
            default:
              goto LABEL_144;
          }
        }
        if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3) {
          unsigned int v6 = 2;
        }
        else {
          unsigned int v6 = 1;
        }
LABEL_144:
        size_t v17 = v6;
        if (a3[2] >= (unint64_t)v6)
        {
          uint64_t v18 = (char *)*a3;
          unint64_t v8 = a3[1];
          if (v8 >= v6) {
            size_t v68 = v6;
          }
          else {
            size_t v68 = a3[1];
          }
          if (v68) {
            memset((void *)*a3, 1, v68);
          }
          size_t v20 = v17 - v8;
          if (v17 <= v8) {
            goto LABEL_46;
          }
          goto LABEL_36;
        }
        goto LABEL_45;
      }
      if (v6 != 32)
      {
        size_t v17 = (*(_DWORD *)(a2 + 80) + 1);
        if (a3[2] >= v17)
        {
LABEL_29:
          uint64_t v18 = (char *)*a3;
          if (v8 >= v17) {
            size_t v19 = v17;
          }
          else {
            size_t v19 = v8;
          }
          if (v19) {
            memset((void *)*a3, 1, v19);
          }
          if (v8 >= v17) {
            goto LABEL_46;
          }
          size_t v20 = v17 - v8;
LABEL_36:
          memset(&v18[v8], 1, v20);
LABEL_46:
          a3[1] = v17;
          return;
        }
LABEL_45:
        a3[1] = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      int v21 = *(_DWORD *)(a2 + 20);
      if ((v21 & 0x40000000) != 0) {
        unint64_t v22 = *(void ***)(a2 - 8);
      }
      else {
        unint64_t v22 = (void **)(a2 - 32 * (v21 & 0x7FFFFFF));
      }
      int v24 = (unsigned __int8 *)*v22;
      __s2 = *v22;
      LOWORD(v72) = 0;
      sub_1CD203594((uint64_t)v69, (uint64_t)a1 + 136, (uint64_t *)&__s2, (unsigned __int8 *)&v72);
      if ((v72 & 0xFE) == 4)
      {
        if (v76 >= 0x41 && v75) {
          MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
        }
        if (v74 >= 0x41 && v73) {
          MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        }
      }
      uint64_t v25 = v69[0];
      uint64_t v26 = (unsigned __int8 *)(v69[0] + 8);
      if (v70 && v24 && v24[16] <= 0x14u) {
        sub_1CC05E6A4(v69[0] + 8, (uint64_t)v24, 0);
      }
      int v27 = *v26;
      LOWORD(__s2) = *v26;
      if ((v27 - 4) < 2)
      {
        LODWORD(v73) = *(_DWORD *)(v25 + 24);
        if (v73 > 0x40) {
          operator new[]();
        }
        uint64_t v72 = *(void *)(v25 + 16);
        LODWORD(v75) = *(_DWORD *)(v25 + 40);
        if (v75 > 0x40) {
          operator new[]();
        }
        uint64_t v74 = *(void *)(v25 + 32);
        BYTE1(__s2) = v26[1];
      }
      else if ((v27 - 2) < 2)
      {
        uint64_t v72 = *(void *)(v25 + 16);
      }
      unsigned int v58 = llvm::SCCPInstVisitor::getConstant((uint64_t)a1, (uint64_t)&__s2);
      if (v58 && *((unsigned char *)v58 + 16) == 4)
      {
        uint64_t v59 = 0;
        int v60 = *(_DWORD *)(a2 + 20);
        uint64_t v61 = 32;
        while ((v60 & 0x7FFFFFF) - 1 != v59)
        {
          uint64_t v62 = a2 - 32 * (v60 & 0x7FFFFFF);
          if ((v60 & 0x40000000) != 0) {
            uint64_t v62 = *(void *)(a2 - 8);
          }
          ++v59;
          uint64_t v63 = *(void *)(v62 + v61);
          v61 += 32;
          if (v63 == *(v58 - 4))
          {
            *(unsigned char *)(*a3 + v59 - 1) = 1;
            break;
          }
        }
      }
      else if ((__s2 & 0xFE) != 0)
      {
        if (*(unsigned char *)(a2 + 16) != 30)
        {
          unsigned int v6 = 0;
          switch(*(unsigned char *)(a2 + 16))
          {
            case 0x1E:
              goto LABEL_178;
            case 0x1F:
              unsigned int v6 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_122;
            case 0x20:
            case 0x26:
              unsigned int v6 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_122;
            case 0x21:
              unsigned int v6 = 2;
              goto LABEL_122;
            case 0x24:
              unsigned int v6 = *(_WORD *)(a2 + 18) & 1;
              goto LABEL_122;
            case 0x25:
              unsigned int v6 = 1;
              goto LABEL_122;
            case 0x27:
              unsigned int v6 = *(_DWORD *)(a2 + 80) + 1;
              goto LABEL_122;
            default:
              goto LABEL_122;
          }
        }
        if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3) {
          unsigned int v6 = 2;
        }
        else {
          unsigned int v6 = 1;
        }
LABEL_122:
        unint64_t v64 = v6;
        if (a3[2] < (unint64_t)v6)
        {
          a3[1] = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        uint64_t v65 = (char *)*a3;
        unint64_t v66 = a3[1];
        if (v66 >= v6) {
          size_t v67 = v6;
        }
        else {
          size_t v67 = a3[1];
        }
        if (v67) {
          memset((void *)*a3, 1, v67);
        }
        if (v64 > v66) {
          memset(&v65[v66], 1, v64 - v66);
        }
        a3[1] = v64;
      }
LABEL_132:
      char v50 = (char)__s2;
LABEL_133:
      if ((v50 & 0xFE) == 4)
      {
        if (v75 >= 0x41 && v74) {
          MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
        }
        if (v73 >= 0x41)
        {
          if (v72) {
            MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
          }
        }
      }
      return;
  }
}

BOOL llvm::SCCPInstVisitor::isEdgeFeasible(llvm::SCCPInstVisitor *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3 = *((_DWORD *)this + 596);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 296);
  unint64_t v5 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  int v8 = v3 - 1;
  unsigned int v9 = v8 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
  unsigned int v10 = (llvm::BasicBlock **)(v4 + 16 * v9);
  int v11 = *v10;
  uint64_t v12 = v10[1];
  if (*v10 == a2 && v12 == a3) {
    return 1;
  }
  int v14 = 1;
  do
  {
    BOOL v15 = v11 == (llvm::BasicBlock *)-4096 && v12 == (llvm::BasicBlock *)-4096;
    BOOL result = !v15;
    if (v15) {
      break;
    }
    unsigned int v17 = v9 + v14++;
    unsigned int v9 = v17 & v8;
    uint64_t v18 = (llvm::BasicBlock **)(v4 + 16 * v9);
    int v11 = *v18;
    uint64_t v12 = v18[1];
  }
  while (v11 != a2 || v12 != a3);
  return result;
}

uint64_t sub_1CD1F658C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = a2;
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v7 = a1 + 136;
  uint64_t v8 = v9;
  int v10 = *(_DWORD *)(v7 + 16);
  if (v10)
  {
    uint64_t v11 = a2;
    int v12 = v10 - 1;
    unsigned int v13 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v14 = (void *)(v8 + 48 * v13);
    uint64_t v15 = *v14;
    if (*v14 == a2) {
      goto LABEL_11;
    }
    int v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      int v14 = (void *)(v8 + 48 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v14 == a2) {
        goto LABEL_11;
      }
    }
    if (v16) {
      uint64_t v26 = v16;
    }
    else {
      uint64_t v26 = v14;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v14 = sub_1CD203218(v7, &v27, v26);
  void *v14 = v27;
  *((_WORD *)v14 + 4) = 0;
  uint64_t v11 = v27;
LABEL_11:
  size_t v20 = v14 + 1;
  int v21 = *a3;
  *(_WORD *)uint64_t v28 = *a3;
  if ((v21 - 4) < 2)
  {
    unsigned int v30 = *((_DWORD *)a3 + 4);
    if (v30 > 0x40) {
      operator new[]();
    }
    uint64_t v29 = *((void *)a3 + 1);
    unsigned int v32 = *((_DWORD *)a3 + 8);
    if (v32 > 0x40) {
      operator new[]();
    }
    uint64_t v31 = *((void *)a3 + 3);
    *(_WORD *)uint64_t v28 = v21 | (a3[1] << 8);
  }
  else if ((v21 - 2) < 2)
  {
    uint64_t v29 = *((void *)a3 + 1);
  }
  uint64_t result = sub_1CC061B28((uint64_t)v20, v28, a4);
  if (result)
  {
    if (*v20 == 6)
    {
      unint64_t v23 = (void *)(a1 + 784);
      int v24 = (_DWORD *)(a1 + 792);
      unsigned int v25 = *(_DWORD *)(a1 + 792);
      if (v25 < *(_DWORD *)(a1 + 796))
      {
LABEL_17:
        *(void *)(*v23 + 8 * v25) = v11;
        ++*v24;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v23 = (void *)(a1 + 1312);
      int v24 = (_DWORD *)(a1 + 1320);
      unsigned int v25 = *(_DWORD *)(a1 + 1320);
      if (v25 < *(_DWORD *)(a1 + 1324)) {
        goto LABEL_17;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
LABEL_18:
  if ((v28[0] & 0xFE) == 4)
  {
    if (v32 >= 0x41)
    {
      uint64_t result = v31;
      if (v31) {
        uint64_t result = MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
      }
    }
    if (v30 >= 0x41)
    {
      uint64_t result = v29;
      if (v29) {
        return MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitReturnInst(uint64_t this, llvm::ReturnInst *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(*((void *)a2 + 5) + 56);
  unint64_t v5 = (unsigned __int8 *)*((void *)a2 - 4 * v2);
  if (*(void *)(this + 232) != *(void *)(this + 240) && *(unsigned char *)(*(void *)v5 + 8) != 16)
  {
    this = sub_1CD1F6F30(this + 208, *(void *)(*((void *)a2 + 5) + 56));
    if (*(void *)(v3 + 240) != this)
    {
      uint64_t v6 = this;
      *(void *)&long long v49 = v5;
      WORD4(v49) = 0;
      sub_1CD203594((uint64_t)&v37, v3 + 136, (uint64_t *)&v49, (unsigned __int8 *)&v49 + 8);
      if ((BYTE8(v49) & 0xFE) == 4)
      {
        if (v53 >= 0x41 && v52) {
          MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
        }
        if (v51 >= 0x41 && v50) {
          MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
        }
      }
      uint64_t v7 = v37;
      uint64_t v8 = (unsigned __int8 *)(v37 + 8);
      if (v38 && v5[16] <= 0x14u) {
        sub_1CC05E6A4(v37 + 8, (uint64_t)v5, 0);
      }
      uint64_t v9 = (unsigned char *)(v6 + 8);
      int v10 = *v8;
      *(_WORD *)int v44 = *v8;
      if ((v10 - 4) < 2)
      {
        unsigned int v46 = *(_DWORD *)(v7 + 24);
        if (v46 > 0x40) {
          operator new[]();
        }
        uint64_t v45 = *(void *)(v7 + 16);
        unsigned int v48 = *(_DWORD *)(v7 + 40);
        if (v48 > 0x40) {
          operator new[]();
        }
        uint64_t v47 = *(void *)(v7 + 32);
        *(_WORD *)int v44 = v10 | (v8[1] << 8);
      }
      else if ((v10 - 2) < 2)
      {
        uint64_t v45 = *(void *)(v7 + 16);
      }
      this = sub_1CC061B28((uint64_t)v9, v44, 0x100000000);
      if (!this) {
        goto LABEL_73;
      }
      if (*v9 == 6)
      {
        __int16 v34 = (void *)(v3 + 784);
        int v35 = (_DWORD *)(v3 + 792);
        unsigned int v36 = *(_DWORD *)(v3 + 792);
        if (v36 < *(_DWORD *)(v3 + 796))
        {
LABEL_72:
          *(void *)(*v34 + 8 * v36) = v4;
          ++*v35;
LABEL_73:
          if ((v44[0] & 0xFE) == 4)
          {
            if (v48 >= 0x41)
            {
              this = v47;
              if (v47) {
                this = MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
              }
            }
            if (v46 >= 0x41)
            {
              this = v45;
              if (v45) {
                return MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
              }
            }
          }
          return this;
        }
      }
      else
      {
        __int16 v34 = (void *)(v3 + 1312);
        int v35 = (_DWORD *)(v3 + 1320);
        unsigned int v36 = *(_DWORD *)(v3 + 1320);
        if (v36 < *(_DWORD *)(v3 + 1324)) {
          goto LABEL_72;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  if (*(void *)(v3 + 280) != *(void *)(v3 + 288))
  {
    BOOL v11 = *(void *)v5 && *(unsigned char *)(*(void *)v5 + 8) == 16;
    if (v11)
    {
      uint64_t v13 = *(void *)(v3 + 304);
      uint64_t v12 = *(void *)(v3 + 312);
      if (v12 == v13)
      {
        uint64_t v14 = *(unsigned int *)(v3 + 324);
        uint64_t v15 = (void *)(v12 + 8 * v14);
        if (v14)
        {
          uint64_t v16 = 0;
          uint64_t v17 = 8 * v14;
          while (*(void *)(v12 + v16) != v4)
          {
            v16 += 8;
            if (v17 == v16) {
              goto LABEL_34;
            }
          }
          uint64_t v15 = (void *)(v12 + v16);
        }
LABEL_34:
        uint64_t v13 = *(void *)(v3 + 312);
      }
      else
      {
        uint64_t v18 = *(unsigned int *)(v3 + 320);
        unsigned int v19 = v18 - 1;
        unsigned int v20 = (v18 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        uint64_t v15 = (void *)(v12 + 8 * v20);
        uint64_t v21 = *v15;
        if (*v15 == -1)
        {
          unint64_t v22 = 0;
LABEL_78:
          if (v22) {
            uint64_t v15 = v22;
          }
          if (*v15 != v4) {
            uint64_t v15 = (void *)(v12 + 8 * v18);
          }
        }
        else
        {
          unint64_t v22 = 0;
          this = 1;
          while (v21 != v4)
          {
            if (v22) {
              BOOL v23 = 0;
            }
            else {
              BOOL v23 = v21 == -2;
            }
            if (v23) {
              unint64_t v22 = v15;
            }
            int v24 = v20 + this;
            this = (this + 1);
            unsigned int v20 = v24 & v19;
            uint64_t v15 = (void *)(v12 + 8 * (v24 & v19));
            uint64_t v21 = *v15;
            if (*v15 == -1) {
              goto LABEL_78;
            }
          }
        }
      }
      BOOL v11 = v12 == v13;
      uint64_t v25 = 320;
      if (v11) {
        uint64_t v25 = 324;
      }
      if (v15 != (void *)(v12 + 8 * *(unsigned int *)(v3 + v25)))
      {
        uint64_t v26 = (llvm::Type *)*(unsigned int *)(*(void *)v5 + 12);
        if (v26)
        {
          for (uint64_t i = 0; i != v26; uint64_t i = (llvm::Type *)((char *)i + 1))
          {
            *(void *)&long long v49 = v4;
            *((void *)&v49 + 1) = i;
            uint64_t v28 = (unsigned char *)sub_1CD1F6FA4(v3 + 256, &v49);
            uint64_t v29 = sub_1CD1F721C(v3, (llvm::Constant *)v5, i);
            *(_WORD *)char v39 = *(unsigned __int8 *)v29;
            int v30 = *(unsigned __int8 *)v29;
            if ((v30 - 4) < 2)
            {
              unsigned int v41 = *((_DWORD *)v29 + 4);
              if (v41 > 0x40) {
                operator new[]();
              }
              uint64_t v40 = *((void *)v29 + 1);
              unsigned int v43 = *((_DWORD *)v29 + 8);
              if (v43 > 0x40) {
                operator new[]();
              }
              uint64_t v42 = *((void *)v29 + 3);
              v39[1] = *((unsigned char *)v29 + 1);
            }
            else if ((v30 - 2) < 2)
            {
              uint64_t v40 = *((void *)v29 + 1);
            }
            this = sub_1CC061B28((uint64_t)v28, v39, 0x100000000);
            if (this)
            {
              if (*v28 == 6)
              {
                unint64_t v31 = *(unsigned int *)(v3 + 792);
                if (v31 >= *(unsigned int *)(v3 + 796)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v32 = (void *)(v3 + 784);
                uint64_t v33 = (_DWORD *)(v3 + 792);
              }
              else
              {
                unint64_t v31 = *(unsigned int *)(v3 + 1320);
                if (v31 >= *(unsigned int *)(v3 + 1324)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v33 = (_DWORD *)(v3 + 1320);
                unsigned int v32 = (void *)(v3 + 1312);
              }
              *(void *)(*v32 + 8 * v31) = v4;
              ++*v33;
            }
            if ((v39[0] & 0xFE) == 4)
            {
              if (v43 >= 0x41)
              {
                this = v42;
                if (v42) {
                  this = MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
                }
              }
              if (v41 >= 0x41)
              {
                this = v40;
                if (v40) {
                  this = MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t sub_1CD1F6F30(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CD205A24(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5)) {
    BOOL v3 = v5 == *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return *(void *)(a1 + 32);
  }
  else {
    return *(void *)(a1 + 24) + 48 * *(unsigned int *)(v5 + 8);
  }
}

uint64_t sub_1CD1F6FA4(uint64_t a1, long long *a2)
{
  long long v24 = *a2;
  int v25 = 0;
  uint64_t v26 = 0;
  uint64_t v4 = v24;
  int v5 = DWORD2(v24);
  if (sub_1CD205084(*(void *)a1, *(_DWORD *)(a1 + 16), v24, SDWORD2(v24), &v26))
  {
    unsigned int v6 = *(_DWORD *)(v26 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v9 = sub_1CD88EC04(a1, (uint64_t)&v24, v26);
    *(void *)uint64_t v9 = v4;
    *(_DWORD *)(v9 + 8) = v5;
    *(_DWORD *)(v9 + 16) = 0;
    unint64_t v10 = *(void *)(a1 + 40);
    unint64_t v11 = *(void *)(a1 + 32);
    if (v11 >= v10)
    {
      uint64_t v13 = *(void *)(a1 + 24);
      unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v13) >> 3) + 1;
      if (v14 > 0x492492492492492) {
        abort();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v10 - v13) >> 3) > v14) {
        unint64_t v14 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v10 - v13) >> 3);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - v13) >> 3)) >= 0x249249249249249) {
        unint64_t v14 = 0x492492492492492;
      }
      uint64_t v29 = a1 + 40;
      if (v14 > 0x492492492492492) {
        sub_1CB833614();
      }
      uint64_t v15 = 56 * v14;
      uint64_t v16 = (char *)operator new(56 * v14);
      uint64_t v17 = &v16[8 * ((uint64_t)(v11 - v13) >> 3)];
      uint64_t v18 = &v16[v15];
      *(_OWORD *)uint64_t v17 = *a2;
      *((_WORD *)v17 + 8) = 0;
      unint64_t v12 = (unint64_t)(v17 + 56);
      if (v11 == v13)
      {
        int64x2_t v19 = vdupq_n_s64(v11);
      }
      else
      {
        uint64_t v20 = 0;
        do
        {
          uint64_t v21 = &v17[v20];
          uint64_t v22 = v11 + v20;
          *(_OWORD *)(v21 - 56) = *(_OWORD *)(v11 + v20 - 56);
          __int16 v23 = *(_WORD *)(v11 + v20 - 40);
          *((_WORD *)v21 - 20) = v23;
          if (v23 - 4 < 2)
          {
            *((_DWORD *)v21 - 6) = *(_DWORD *)(v22 - 24);
            *((void *)v21 - 4) = *(void *)(v22 - 32);
            *(_DWORD *)(v22 - 24) = 0;
            *((_DWORD *)v21 - 2) = *(_DWORD *)(v22 - 8);
            *((void *)v21 - 2) = *(void *)(v22 - 16);
            *(_DWORD *)(v22 - 8) = 0;
            *((_WORD *)v21 - 20) = v23;
          }
          else if (v23 - 2 < 2)
          {
            *(void *)&v17[v20 - 32] = *(void *)(v11 + v20 - 32);
          }
          *(_WORD *)(v22 - 40) = v23 & 0xFF00;
          v20 -= 56;
        }
        while (v11 + v20 != v13);
        int64x2_t v19 = *(int64x2_t *)(a1 + 24);
        unint64_t v10 = *(void *)(a1 + 40);
        v17 += v20;
      }
      *(void *)(a1 + 24) = v17;
      *(void *)(a1 + 32) = v12;
      int64x2_t v27 = v19;
      *(void *)(a1 + 40) = v18;
      unint64_t v28 = v10;
      uint64_t v26 = v19.i64[0];
      sub_1CD88ED98((uint64_t)&v26);
    }
    else
    {
      *(_OWORD *)unint64_t v11 = *a2;
      *(_WORD *)(v11 + 16) = 0;
      unint64_t v12 = v11 + 56;
    }
    *(void *)(a1 + 32) = v12;
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned int v6 = -1227133513 * ((v12 - v7) >> 3) - 1;
    *(_DWORD *)(v9 + 16) = v6;
  }
  return v7 + 56 * v6 + 16;
}

__int16 *sub_1CD1F721C(uint64_t a1, llvm::Constant *this, llvm::Type *a3)
{
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v6 = a1 + 160;
  uint64_t v7 = v8;
  unsigned int v9 = *(_DWORD *)(v6 + 16);
  unsigned int v10 = this >> 4;
  if (v9)
  {
    unint64_t v11 = ~((unint64_t)(37 * a3) << 32)
        + (37 * a3)
        + ((unint64_t)(v10 ^ (this >> 9)) << 32);
    unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
    unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
    unsigned int v14 = (v9 - 1) & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27)));
    uint64_t v15 = v7 + 56 * v14;
    uint64_t v16 = *(llvm::Constant **)v15;
    int v17 = *(_DWORD *)(v15 + 8);
    if (*(llvm::Constant **)v15 == this && v17 == a3) {
      return (__int16 *)(v7 + 56 * v14 + 16);
    }
    uint64_t v21 = 0;
    int v22 = 1;
    while (v16 != (llvm::Constant *)-4096 || v17 != -1)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v17 == -2;
      }
      if (v23 && v16 == (llvm::Constant *)-8192) {
        uint64_t v21 = v15;
      }
      unsigned int v25 = v14 + v22++;
      unsigned int v14 = v25 & (v9 - 1);
      uint64_t v15 = v7 + 56 * v14;
      uint64_t v16 = *(llvm::Constant **)v15;
      int v17 = *(_DWORD *)(v15 + 8);
      if (*(llvm::Constant **)v15 == this && v17 == a3) {
        return (__int16 *)(v7 + 56 * v14 + 16);
      }
    }
    if (v21) {
      uint64_t v27 = v21;
    }
    else {
      uint64_t v27 = v15;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  int v28 = *(_DWORD *)(a1 + 168);
  if (4 * v28 + 4 >= 3 * v9)
  {
    sub_1CD2037D4((uint64_t *)v6, 2 * v9);
    int v31 = *(_DWORD *)(a1 + 176);
    if (v31)
    {
      uint64_t v32 = *(void *)(a1 + 160);
      unint64_t v33 = ~((unint64_t)(37 * a3) << 32)
          + (37 * a3)
          + ((unint64_t)(v10 ^ (this >> 9)) << 32);
      unint64_t v34 = (v33 ^ (v33 >> 22)) + ~((v33 ^ (v33 >> 22)) << 13);
      unint64_t v35 = (9 * (v34 ^ (v34 >> 8))) ^ ((9 * (v34 ^ (v34 >> 8))) >> 15);
      int v36 = v31 - 1;
      unsigned int v37 = v36 & (((v35 + ~(v35 << 27)) >> 31) ^ (v35 + ~(v35 << 27)));
      uint64_t v27 = v32 + 56 * v37;
      char v38 = *(llvm::Constant **)v27;
      int v39 = *(_DWORD *)(v27 + 8);
      if (*(llvm::Constant **)v27 != this || v39 != a3)
      {
        uint64_t v41 = 0;
        int v42 = 1;
        while (v38 != (llvm::Constant *)-4096 || v39 != -1)
        {
          if (v41) {
            BOOL v43 = 0;
          }
          else {
            BOOL v43 = v39 == -2;
          }
          if (v43 && v38 == (llvm::Constant *)-8192) {
            uint64_t v41 = v27;
          }
          unsigned int v45 = v37 + v42++;
          unsigned int v37 = v45 & v36;
          uint64_t v27 = v32 + 56 * v37;
          char v38 = *(llvm::Constant **)v27;
          int v39 = *(_DWORD *)(v27 + 8);
          if (*(llvm::Constant **)v27 == this && v39 == a3) {
            goto LABEL_30;
          }
        }
        if (v41) {
          uint64_t v27 = v41;
        }
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
  }
  else if (v9 + ~v28 - *(_DWORD *)(a1 + 172) <= v9 >> 3)
  {
    sub_1CD2037D4((uint64_t *)v6, v9);
    uint64_t v48 = 0;
    sub_1CD2036F0(*(void *)(a1 + 160), *(_DWORD *)(a1 + 176), (uint64_t)this, (int)a3, &v48);
    uint64_t v27 = v48;
  }
LABEL_30:
  ++*(_DWORD *)(a1 + 168);
  if (*(void *)v27 != -4096 || *(_DWORD *)(v27 + 8) != -1) {
    --*(_DWORD *)(a1 + 172);
  }
  *(void *)uint64_t v27 = this;
  *(_DWORD *)(v27 + 8) = a3;
  *(_WORD *)(v27 + 16) = 0;
  int64x2_t v19 = (__int16 *)(v27 + 16);
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    AggregateElement = llvm::Constant::getAggregateElement(this, a3);
    if (AggregateElement)
    {
      if (*((unsigned __int8 *)AggregateElement + 16) - 11 >= 2) {
        sub_1CC05E6A4(v27 + 16, (uint64_t)AggregateElement, 0);
      }
    }
    else
    {
      __int16 v47 = *v19;
      if (*v19 != 6)
      {
        if ((v47 & 0xFE) == 4)
        {
          sub_1CC05EB8C(v27 + 24);
          __int16 v47 = *(_WORD *)(v27 + 16);
        }
        *int64x2_t v19 = v47 & 0xFF00 | 6;
      }
    }
  }
  return v19;
}

void llvm::SCCPInstVisitor::visitTerminator(llvm::SCCPInstVisitor *this, llvm::Instruction *a2)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v10;
  long long v9 = xmmword_1CDB15990;
  llvm::SCCPInstVisitor::getFeasibleSuccessors(this, (uint64_t)a2, &v8);
  uint64_t v4 = v9;
  if (v9)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (llvm::BasicBlock *)*((void *)a2 + 5);
    do
    {
      if (*((unsigned char *)v8 + v5))
      {
        uint64_t Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(a2, v5);
        llvm::SCCPInstVisitor::markEdgeExecutable(this, v6, Successor);
      }
      ++v5;
    }
    while (v4 != v5);
  }
  if (v8 != v10) {
    free(v8);
  }
}

uint64_t llvm::SCCPInstVisitor::visitCastInst(llvm::SCCPInstVisitor *this, llvm::CastInst *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)this + 136;
  uint64_t v4 = *((void *)this + 17);
  uint64_t v59 = a2;
  int v6 = *((_DWORD *)this + 38);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t result = v4 + 48 * v8;
    unsigned int v10 = *(llvm::CastInst **)result;
    if (*(llvm::CastInst **)result == a2) {
      goto LABEL_11;
    }
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != (llvm::CastInst *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (llvm::CastInst *)-8192;
      }
      if (v13) {
        uint64_t v11 = result;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      uint64_t result = v4 + 48 * v8;
      unsigned int v10 = *(llvm::CastInst **)result;
      if (*(llvm::CastInst **)result == a2) {
        goto LABEL_11;
      }
    }
    if (v11) {
      unint64_t v35 = (void *)v11;
    }
    else {
      unint64_t v35 = (void *)result;
    }
  }
  else
  {
    unint64_t v35 = 0;
  }
  uint64_t result = (uint64_t)sub_1CD203218((uint64_t)v5, (uint64_t *)&v59, v35);
  *(void *)uint64_t result = v59;
  *(_WORD *)(result + 8) = 0;
LABEL_11:
  if (*(unsigned char *)(result + 8) == 6) {
    return result;
  }
  uint64_t v15 = *((void *)a2 - 4);
  uint64_t v59 = (llvm::CastInst *)v15;
  LOWORD(v60) = 0;
  uint64_t result = (uint64_t)sub_1CD203594((uint64_t)&v54, (uint64_t)v5, (uint64_t *)&v59, (unsigned __int8 *)&v60);
  if ((v60 & 0xFE) == 4) {
    uint64_t result = sub_1CC05EB8C((uint64_t)&v61);
  }
  uint64_t v16 = v54;
  int v17 = (unsigned __int8 *)(v54 + 8);
  if ((_BYTE)v56 && v15 && *(unsigned __int8 *)(v15 + 16) <= 0x14u) {
    uint64_t result = sub_1CC05E6A4(v54 + 8, v15, 0);
  }
  int v18 = *v17;
  LOWORD(v54) = *v17;
  if ((v18 - 4) < 2)
  {
    unsigned int v56 = *(_DWORD *)(v16 + 24);
    if (v56 > 0x40) {
      operator new[]();
    }
    unint64_t v55 = *(void **)(v16 + 16);
    unsigned int v58 = *(_DWORD *)(v16 + 40);
    if (v58 > 0x40) {
      operator new[]();
    }
    uint64_t v57 = *(void *)(v16 + 32);
    LOBYTE(v18) = v54;
    LOWORD(v54) = v54 | (v17[1] << 8);
  }
  else if ((v18 - 2) < 2)
  {
    unint64_t v55 = *(void **)(v16 + 16);
  }
  if ((v18 & 0xFE) != 0)
  {
    unint64_t Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v54);
    if (Constant)
    {
      uint64_t result = (uint64_t)llvm::ConstantFoldCastOperand((llvm *)(*((unsigned __int8 *)a2 + 16) - 28), (uint64_t)Constant, *(llvm::Constant **)a2, *(llvm::Type **)this, v20);
      if (*(unsigned __int8 *)(result + 16) - 11 >= 2) {
        uint64_t result = sub_1CD1F4B3C((uint64_t)this, (uint64_t)a2, result);
      }
      goto LABEL_59;
    }
    if (*(unsigned char *)(*(void *)a2 + 8) == 13)
    {
      uint64_t v59 = a2;
      LOWORD(v60) = 0;
      sub_1CD203594((uint64_t)&__src, (uint64_t)v5, (uint64_t *)&v59, (unsigned __int8 *)&v60);
      if ((v60 & 0xFE) == 4) {
        sub_1CC05EB8C((uint64_t)&v61);
      }
      uint64_t v21 = (char *)__src + 8;
      if ((_BYTE)v47 && *((unsigned __int8 *)a2 + 16) <= 0x14u) {
        sub_1CC05E6A4((uint64_t)__src + 8, (uint64_t)a2, 0);
      }
      if ((v54 & 0xFE) == 4)
      {
        unsigned int v46 = v56;
        if (v56 > 0x40) {
          operator new[]();
        }
        int __src = v55;
        unsigned int v48 = v58;
        if (v58 > 0x40) {
          operator new[]();
        }
        long long v24 = (void *)v57;
      }
      else
      {
        uint64_t v22 = **((void **)a2 - 4);
        if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12) {
          uint64_t v22 = **(void **)(v22 + 16);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
        unsigned int v46 = PrimitiveSizeInBits;
        if (PrimitiveSizeInBits > 0x40) {
          operator new[]();
        }
        if (PrimitiveSizeInBits) {
          long long v24 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
        }
        else {
          long long v24 = 0;
        }
        int __src = v24;
        unsigned int v48 = PrimitiveSizeInBits;
      }
      uint64_t v47 = (uint64_t)v24;
      uint64_t v25 = *(void *)a2;
      int v26 = *((unsigned __int8 *)a2 + 16);
      if (v26 == 77)
      {
        if ((*(_DWORD *)(**((void **)a2 - 4) + 8) & 0xFE) == 0x12)
        {
          unint64_t v36 = v46;
          unint64_t v38 = sub_1CB83544C(*(void *)this, *(void *)a2);
          if (v37 == 1) {
          if (v38 > v36)
          }
          {
            uint64_t result = sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
LABEL_54:
            if (v48 >= 0x41)
            {
              uint64_t result = v47;
              if (v47) {
                uint64_t result = MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
              }
            }
            if (v46 >= 0x41)
            {
              uint64_t result = (uint64_t)__src;
              if (__src) {
                uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
            }
            goto LABEL_59;
          }
          int v26 = *((unsigned __int8 *)a2 + 16);
        }
        else
        {
          int v26 = 77;
        }
      }
      int v27 = v26 - 28;
      unsigned int v29 = sub_1CB83544C(*(void *)this, v25);
      if (v28 == 1) {
      llvm::ConstantRange::castOp((unint64_t *)&__src, v27, v29, (uint64_t)&__s1);
      }
      unsigned int v30 = v42;
      if (v42 > 0x40) {
        operator new[]();
      }
      int v39 = __s1;
      unsigned int v31 = v44;
      if (v44 > 0x40) {
        operator new[]();
      }
      uint64_t v40 = __s2;
      if (__s1 == __s2 && (!v42 || (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v42) == __s1))
      {
        __int16 v49 = 6;
      }
      else
      {
        __int16 v49 = 0;
        if ((unint64_t)__s2 | (unint64_t)__s1)
        {
          unsigned int v60 = v42;
          uint64_t v59 = (llvm::CastInst *)__s1;
          unsigned int v62 = v44;
          uint64_t v61 = __s2;
          sub_1CC05E860(&v49, (uint64_t)&v59, 0x100000000);
          if (v62 >= 0x41 && v61) {
            MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
          }
          if (v60 >= 0x41 && v59) {
            MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
          }
          unsigned int v30 = 0;
          unsigned int v31 = 0;
        }
      }
      uint64_t result = sub_1CC061B28((uint64_t)v21, (unsigned __int8 *)&v49, 0x100000000);
      if (!result)
      {
LABEL_47:
        if ((v49 & 0xFE) == 4)
        {
          if (v53 >= 0x41)
          {
            uint64_t result = v52;
            if (v52) {
              uint64_t result = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
            }
          }
          if (v51 >= 0x41)
          {
            uint64_t result = v50;
            if (v50) {
              uint64_t result = MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
            }
          }
        }
        if (v31 >= 0x41)
        {
          uint64_t result = (uint64_t)v40;
          if (v40) {
            uint64_t result = MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
          }
        }
        if (v30 >= 0x41)
        {
          uint64_t result = (uint64_t)v39;
          if (v39) {
            uint64_t result = MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
          }
        }
        if (v44 >= 0x41)
        {
          uint64_t result = (uint64_t)__s2;
          if (__s2) {
            uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
        if (v42 >= 0x41)
        {
          uint64_t result = (uint64_t)__s1;
          if (__s1) {
            uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
        }
        goto LABEL_54;
      }
      if (*v21 == 6)
      {
        uint64_t v32 = (char *)this + 784;
        unint64_t v33 = (char *)this + 792;
        unsigned int v34 = *((_DWORD *)this + 198);
        if (v34 < *((_DWORD *)this + 199))
        {
LABEL_46:
          *(void *)(*(void *)v32 + 8 * v34) = a2;
          ++*(_DWORD *)v33;
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v32 = (char *)this + 1312;
        unint64_t v33 = (char *)this + 1320;
        unsigned int v34 = *((_DWORD *)this + 330);
        if (v34 < *((_DWORD *)this + 331)) {
          goto LABEL_46;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t result = sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
  }
LABEL_59:
  if ((v54 & 0xFE) == 4)
  {
    if (v58 >= 0x41)
    {
      uint64_t result = v57;
      if (v57) {
        uint64_t result = MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
      }
    }
    if (v56 >= 0x41)
    {
      uint64_t result = (uint64_t)v55;
      if (v55) {
        return MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitExtractValueInst(llvm::SCCPInstVisitor *this, llvm::ExtractValueInst *a2)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)a2 + 8) != 16)
  {
    uint64_t v8 = *((void *)this + 17);
    unint64_t v35 = a2;
    int v9 = *((_DWORD *)this + 38);
    if (v9)
    {
      int v10 = v9 - 1;
      unsigned int v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
      int v12 = (llvm::ExtractValueInst **)(v8 + 48 * v11);
      BOOL v13 = *v12;
      if (*v12 == a2)
      {
LABEL_12:
        if (*((unsigned char *)v12 + 8) == 6) {
          return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
        }
        if (*((_DWORD *)a2 + 18) != 1) {
          return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
        }
        int64x2_t v19 = (llvm::Constant *)*((void *)a2 - 4);
        if (*(unsigned char *)(*(void *)v19 + 8) != 16) {
          return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
        }
        uint64_t v20 = sub_1CD1F721C((uint64_t)this, v19, (llvm::Type *)**((unsigned int **)a2 + 8));
        int v21 = *(unsigned __int8 *)v20;
        if ((v21 - 4) < 2)
        {
          unsigned int v4 = *((_DWORD *)v20 + 4);
          if (v4 > 0x40) {
            operator new[]();
          }
          uint64_t v2 = *((void *)v20 + 1);
          unsigned int v5 = *((_DWORD *)v20 + 8);
          if (v5 > 0x40) {
            operator new[]();
          }
          uint64_t v3 = *((void *)v20 + 3);
          __int16 v22 = v21 | (*((unsigned __int8 *)v20 + 1) << 8);
        }
        else
        {
          if ((v21 - 2) < 2) {
            uint64_t v2 = *((void *)v20 + 1);
          }
          __int16 v22 = *(unsigned __int8 *)v20;
        }
        unint64_t v35 = a2;
        __int16 v36 = 0;
        sub_1CD203594((uint64_t)&v28, (uint64_t)this + 136, (uint64_t *)&v35, (unsigned __int8 *)&v36);
        if ((v36 & 0xFE) == 4) {
          sub_1CC05EB8C((uint64_t)v37);
        }
        BOOL v23 = (unsigned char *)(v28 + 8);
        if (v29 && *((unsigned __int8 *)a2 + 16) <= 0x14u) {
          sub_1CC05E6A4(v28 + 8, (uint64_t)a2, 0);
        }
        __int16 v30 = v21;
        if (v22 - 4 < 2)
        {
          unsigned int v32 = v4;
          if (v4 > 0x40) {
            operator new[]();
          }
          uint64_t v31 = v2;
          unsigned int v34 = v5;
          if (v5 > 0x40) {
            operator new[]();
          }
          uint64_t v33 = v3;
          __int16 v30 = v21 | v22 & 0xFF00;
        }
        else if (v22 - 2 < 2)
        {
          uint64_t v31 = v2;
        }
        uint64_t result = sub_1CC061B28((uint64_t)v23, (unsigned __int8 *)&v30, 0x100000000);
        if (!result) {
          goto LABEL_33;
        }
        if (*v23 == 6)
        {
          long long v24 = (char *)this + 784;
          uint64_t v25 = (char *)this + 792;
          unsigned int v26 = *((_DWORD *)this + 198);
          if (v26 < *((_DWORD *)this + 199))
          {
LABEL_32:
            *(void *)(*(void *)v24 + 8 * v26) = a2;
            ++*(_DWORD *)v25;
LABEL_33:
            if ((v30 & 0xFE) == 4)
            {
              if (v34 >= 0x41)
              {
                uint64_t result = v33;
                if (v33) {
                  uint64_t result = MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
                }
              }
              if (v32 >= 0x41)
              {
                uint64_t result = v31;
                if (v31) {
                  uint64_t result = MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
                }
              }
            }
            if ((v22 & 0xFE) == 4)
            {
              if (v5 >= 0x41 && v3) {
                uint64_t result = MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
              }
              if (v4 >= 0x41)
              {
                if (v2) {
                  return MEMORY[0x1D25D9CB0](v2, 0x1000C8000313F17);
                }
              }
            }
            return result;
          }
        }
        else
        {
          long long v24 = (char *)this + 1312;
          uint64_t v25 = (char *)this + 1320;
          unsigned int v26 = *((_DWORD *)this + 330);
          if (v26 < *((_DWORD *)this + 331)) {
            goto LABEL_32;
          }
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v14 = 0;
      int v15 = 1;
      while (v13 != (llvm::ExtractValueInst *)-4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (llvm::ExtractValueInst *)-8192;
        }
        if (v16) {
          unsigned int v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        int v12 = (llvm::ExtractValueInst **)(v8 + 48 * v11);
        BOOL v13 = *v12;
        if (*v12 == a2) {
          goto LABEL_12;
        }
      }
      if (v14) {
        int v27 = v14;
      }
      else {
        int v27 = v12;
      }
    }
    else
    {
      int v27 = 0;
    }
    int v12 = (llvm::ExtractValueInst **)sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v35, v27);
    *int v12 = v35;
    *((_WORD *)v12 + 4) = 0;
    goto LABEL_12;
  }

  return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
}

uint64_t llvm::SCCPInstVisitor::visitInsertValueInst(uint64_t this, llvm::InsertValueInst *a2)
{
  uint64_t v3 = (unsigned int *)this;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(unsigned int **)a2;
  if (*(void *)a2) {
    BOOL v5 = *(unsigned char *)(*(void *)a2 + 8) == 16;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    return sub_1CD1F4CA8(this, (uint64_t)a2);
  }
  uint64_t v6 = *(void *)(this + 136);
  v53[0] = (uint64_t)a2;
  int v7 = *(_DWORD *)(this + 152);
  if (v7)
  {
    int v8 = v7 - 1;
    unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v10 = v6 + 48 * v9;
    unsigned int v11 = *(llvm::InsertValueInst **)v10;
    if (*(llvm::InsertValueInst **)v10 == a2) {
      goto LABEL_23;
    }
    int v12 = 0;
    int v13 = 1;
    while (v11 != (llvm::InsertValueInst *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (llvm::InsertValueInst *)-8192;
      }
      if (v14) {
        int v12 = (void *)v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      uint64_t v10 = v6 + 48 * v9;
      unsigned int v11 = *(llvm::InsertValueInst **)v10;
      if (*(llvm::InsertValueInst **)v10 == a2) {
        goto LABEL_23;
      }
    }
    if (v12) {
      BOOL v16 = v12;
    }
    else {
      BOOL v16 = (void *)v10;
    }
  }
  else
  {
    BOOL v16 = 0;
  }
  this = (uint64_t)sub_1CD203218(this + 136, v53, v16);
  uint64_t v10 = this;
  *(void *)this = v53[0];
  *(_WORD *)(this + 8) = 0;
LABEL_23:
  if ((*(_WORD *)(v10 + 8) & 0xFE) != 0 && *(_WORD *)(v10 + 8) != 2)
  {
    if ((*(_WORD *)(v10 + 8) & 0xFE) != 4) {
      return sub_1CD1F4CA8((BOOL)v3, (uint64_t)a2);
    }
    unsigned int v66 = *(_DWORD *)(v10 + 24);
    if (v66 > 0x40) {
      operator new[]();
    }
    uint64_t v65 = *(const void **)(v10 + 16);
    this = llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
    unsigned int v39 = v66;
    uint64_t v40 = v65;
    unsigned int v66 = 0;
    uint64_t v41 = *(unsigned int *)(v10 + 40);
    if (v41 > 0x40)
    {
      this = memcmp(*(const void **)(v10 + 32), v65, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
      BOOL v42 = this == 0;
    }
    else
    {
      BOOL v42 = *(void *)(v10 + 32) == (void)v65;
    }
    char v43 = v42;
    if (v39 >= 0x41)
    {
      if (v40)
      {
        this = MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
        if (v66 >= 0x41)
        {
          this = (uint64_t)v65;
          if (v65) {
            this = MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
          }
        }
      }
    }
    if ((v43 & 1) == 0) {
      return sub_1CD1F4CA8((BOOL)v3, (uint64_t)a2);
    }
  }
  if (*((_DWORD *)a2 + 18) != 1) {
    return sub_1CD1F4CA8((BOOL)v3, (uint64_t)a2);
  }
  unsigned int v18 = v4[3];
  if (v18)
  {
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    unsigned int v47 = 0;
    unsigned int v48 = 0;
    int64x2_t v19 = 0;
    uint64_t v20 = (llvm::Constant *)*((void *)a2 - 8);
    int v21 = (llvm::Type *)**((unsigned int **)a2 + 8);
    uint64_t v50 = v20;
    do
    {
      if (v21 == v19)
      {
        __int16 v22 = (unsigned __int8 *)*((void *)a2 - 4);
        if (*(unsigned char *)(*(void *)v22 + 8) == 16)
        {
          BOOL v23 = sub_1CD1F721C((uint64_t)v3, a2, v21);
          this = llvm::SCCPInstVisitor::markOverdefined((uint64_t)v3, (uint64_t)v23, (uint64_t)a2);
        }
        else
        {
          uint64_t v65 = (const void *)*((void *)a2 - 4);
          LOWORD(v66) = 0;
          sub_1CD203594((uint64_t)v53, (uint64_t)(v3 + 34), (uint64_t *)&v65, (unsigned __int8 *)&v66);
          if ((v66 & 0xFE) == 4)
          {
            if (v70 >= 0x41 && v69) {
              MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
            }
            if (v68 >= 0x41 && v67) {
              MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
            }
          }
          uint64_t v28 = v53[0];
          char v29 = (unsigned __int8 *)(v53[0] + 8);
          if (v54 && v22[16] <= 0x14u) {
            sub_1CC05E6A4(v53[0] + 8, (uint64_t)v22, 0);
          }
          int v30 = *v29;
          if ((v30 - 4) < 2)
          {
            unsigned int v48 = *(_DWORD *)(v28 + 24);
            if (v48 > 0x40) {
              operator new[]();
            }
            unsigned int v45 = *(void **)(v28 + 16);
            unsigned int v47 = *(_DWORD *)(v28 + 40);
            if (v47 > 0x40) {
              operator new[]();
            }
            unsigned int v44 = *(void **)(v28 + 32);
            __int16 v31 = v30 | (v29[1] << 8);
          }
          else
          {
            if ((v30 - 2) < 2) {
              unsigned int v45 = *(void **)(v28 + 16);
            }
            __int16 v31 = *v29;
          }
          uint64_t v20 = v50;
          unsigned int v32 = sub_1CD1F721C((uint64_t)v3, a2, v21);
          *(_WORD *)unint64_t v55 = v30;
          if (v31 - 4 < 2)
          {
            unsigned int v57 = v48;
            uint64_t v56 = (uint64_t)v45;
            unsigned int v59 = v47;
            uint64_t v58 = (uint64_t)v44;
            *(_WORD *)unint64_t v55 = v55[0] | v31 & 0xFF00;
          }
          else if (v31 - 2 < 2)
          {
            uint64_t v56 = (uint64_t)v45;
          }
          this = sub_1CC061B28((uint64_t)v32, v55, 0x100000000);
          if (this)
          {
            if (*(unsigned char *)v32 == 6)
            {
              unint64_t v36 = v3[198];
              if (v36 >= v3[199]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v37 = v3 + 198;
              unint64_t v38 = v3 + 196;
            }
            else
            {
              unint64_t v36 = v3[330];
              if (v36 >= v3[331]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v37 = v3 + 330;
              unint64_t v38 = v3 + 328;
            }
            *(void *)(*v38 + 8 * v36) = a2;
            ++*v37;
          }
          if ((v55[0] & 0xFE) == 4)
          {
            if (v59 >= 0x41)
            {
              this = v58;
              if (v58) {
                this = MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
              }
            }
            if (v57 >= 0x41)
            {
              this = v56;
              if (v56) {
                this = MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
              }
            }
          }
        }
      }
      else
      {
        long long v24 = sub_1CD1F721C((uint64_t)v3, v20, v19);
        int v25 = *(unsigned __int8 *)v24;
        if ((v25 - 4) < 2)
        {
          unsigned int v52 = *((_DWORD *)v24 + 4);
          if (v52 > 0x40) {
            operator new[]();
          }
          int __src = (void *)*((void *)v24 + 1);
          unsigned int v51 = *((_DWORD *)v24 + 8);
          if (v51 > 0x40) {
            operator new[]();
          }
          unsigned int v46 = (void *)*((void *)v24 + 3);
          __int16 v26 = v25 | (*((unsigned __int8 *)v24 + 1) << 8);
        }
        else
        {
          if ((v25 - 2) < 2) {
            int __src = (void *)*((void *)v24 + 1);
          }
          __int16 v26 = *(unsigned __int8 *)v24;
        }
        int v27 = sub_1CD1F721C((uint64_t)v3, a2, v19);
        *(_WORD *)unsigned int v60 = v25;
        if (v26 - 4 < 2)
        {
          unsigned int v62 = v52;
          uint64_t v61 = (uint64_t)__src;
          unsigned int v64 = v51;
          uint64_t v63 = (uint64_t)v46;
          *(_WORD *)unsigned int v60 = v60[0] | v26 & 0xFF00;
        }
        else if (v26 - 2 < 2)
        {
          uint64_t v61 = (uint64_t)__src;
        }
        this = sub_1CC061B28((uint64_t)v27, v60, 0x100000000);
        if (this)
        {
          if (*(unsigned char *)v27 == 6)
          {
            unint64_t v33 = v3[198];
            if (v33 >= v3[199]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v34 = v3 + 198;
            unint64_t v35 = v3 + 196;
          }
          else
          {
            unint64_t v33 = v3[330];
            if (v33 >= v3[331]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v34 = v3 + 330;
            unint64_t v35 = v3 + 328;
          }
          *(void *)(*v35 + 8 * v33) = a2;
          ++*v34;
        }
        if ((v60[0] & 0xFE) == 4)
        {
          if (v64 >= 0x41)
          {
            this = v63;
            if (v63) {
              this = MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
            }
          }
          if (v62 >= 0x41)
          {
            this = v61;
            if (v61) {
              this = MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
            }
          }
        }
      }
      int64x2_t v19 = (llvm::Type *)(v19 + 1);
    }
    while (v18 != v19);
  }
  return this;
}

uint64_t llvm::SCCPInstVisitor::visitSelectInst(llvm::SCCPInstVisitor *this, llvm::SelectInst *a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)a2 + 8) != 16)
  {
    uint64_t v5 = *((void *)this + 17);
    unint64_t v90 = a2;
    int v6 = *((_DWORD *)this + 38);
    unsigned int v7 = a2 >> 4;
    if (v6)
    {
      int v8 = v6 - 1;
      unsigned int v9 = v8 & (v7 ^ (a2 >> 9));
      uint64_t v10 = (llvm::SelectInst **)(v5 + 48 * v9);
      unsigned int v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_12;
      }
      int v12 = 0;
      int v13 = 1;
      while (v11 != (llvm::SelectInst *)-4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (llvm::SelectInst *)-8192;
        }
        if (v14) {
          int v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        uint64_t v10 = (llvm::SelectInst **)(v5 + 48 * v9);
        unsigned int v11 = *v10;
        if (*v10 == a2) {
          goto LABEL_12;
        }
      }
      if (v12) {
        uint64_t v63 = v12;
      }
      else {
        uint64_t v63 = v10;
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    uint64_t v10 = (llvm::SelectInst **)sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v90, v63);
    *uint64_t v10 = v90;
    *((_WORD *)v10 + 4) = 0;
LABEL_12:
    if (*((unsigned char *)v10 + 8) == 6) {
      return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
    }
    uint64_t v17 = *((void *)a2 - 12);
    unint64_t v90 = (llvm::SelectInst *)v17;
    LOWORD(v91) = 0;
    uint64_t result = (uint64_t)sub_1CD203594((uint64_t)&v85, (uint64_t)this + 136, (uint64_t *)&v90, (unsigned __int8 *)&v91);
    if ((v91 & 0xFE) == 4) {
      uint64_t result = sub_1CC05EB8C((uint64_t)&v92);
    }
    uint64_t v18 = v85;
    int64x2_t v19 = (unsigned __int8 *)(v85 + 8);
    if ((_BYTE)v87 && v17 && *(unsigned __int8 *)(v17 + 16) <= 0x14u) {
      uint64_t result = sub_1CC05E6A4(v85 + 8, v17, 0);
    }
    int v20 = *v19;
    LOWORD(v85) = *v19;
    if ((v20 - 4) < 2)
    {
      unsigned int v87 = *(_DWORD *)(v18 + 24);
      if (v87 > 0x40) {
        operator new[]();
      }
      uint64_t v86 = *(void *)(v18 + 16);
      unsigned int v89 = *(_DWORD *)(v18 + 40);
      if (v89 > 0x40) {
        operator new[]();
      }
      uint64_t v88 = *(void *)(v18 + 32);
      LOBYTE(v20) = v85;
      LOWORD(v85) = v85 | (v19[1] << 8);
    }
    else if ((v20 - 2) < 2)
    {
      uint64_t v86 = *(void *)(v18 + 16);
    }
    if ((v20 & 0xFE) == 0) {
      goto LABEL_71;
    }
    unint64_t Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v85);
    if (Constant && *((unsigned char *)Constant + 16) == 16)
    {
      unsigned int v67 = *((_DWORD *)Constant + 8);
      if (v67 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(Constant + 3)) == v67) {
          goto LABEL_112;
        }
      }
      else if (!Constant[3])
      {
LABEL_112:
        uint64_t v68 = -1;
        goto LABEL_113;
      }
      uint64_t v68 = -2;
LABEL_113:
      uint64_t v69 = *((void *)a2 + 4 * v68);
      unint64_t v90 = (llvm::SelectInst *)v69;
      LOWORD(v91) = 0;
      sub_1CD203594((uint64_t)&v75, (uint64_t)this + 136, (uint64_t *)&v90, (unsigned __int8 *)&v91);
      if ((v91 & 0xFE) == 4) {
        sub_1CC05EB8C((uint64_t)&v92);
      }
      uint64_t v70 = v75;
      uint64_t v71 = (unsigned __int8 *)(v75 + 8);
      if ((_BYTE)v77 && v69 && *(unsigned __int8 *)(v69 + 16) <= 0x14u) {
        sub_1CC05E6A4(v75 + 8, v69, 0);
      }
      int v72 = *v71;
      __int16 v80 = *v71;
      if ((v72 - 4) < 2)
      {
        unsigned int v7 = *(_DWORD *)(v70 + 24);
        unsigned int v82 = v7;
        if (v7 > 0x40) {
          operator new[]();
        }
        uint64_t v81 = *(void *)(v70 + 16);
        unsigned int v2 = *(_DWORD *)(v70 + 40);
        unsigned int v84 = v2;
        if (v2 > 0x40) {
          operator new[]();
        }
        uint64_t v69 = *(void *)(v70 + 32);
        uint64_t v83 = v69;
        LOWORD(v72) = v72 | (v71[1] << 8);
        __int16 v80 = v72;
      }
      else if ((v72 - 2) < 2)
      {
        uint64_t v81 = *(void *)(v70 + 16);
      }
      uint64_t result = sub_1CD1F658C((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&v80, 0x100000000);
      if ((v72 & 0xFE) != 4) {
        goto LABEL_71;
      }
      if (v2 >= 0x41 && v69)
      {
        uint64_t result = MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
        unsigned int v7 = v82;
      }
      if (v7 < 0x41) {
        goto LABEL_71;
      }
      uint64_t result = v81;
      if (!v81) {
        goto LABEL_71;
      }
      goto LABEL_87;
    }
    uint64_t v22 = *((void *)a2 - 8);
    unint64_t v90 = (llvm::SelectInst *)v22;
    LOWORD(v91) = 0;
    sub_1CD203594((uint64_t)&v75, (uint64_t)this + 136, (uint64_t *)&v90, (unsigned __int8 *)&v91);
    if ((v91 & 0xFE) == 4) {
      sub_1CC05EB8C((uint64_t)&v92);
    }
    uint64_t v23 = v75;
    long long v24 = (unsigned __int8 *)(v75 + 8);
    if ((_BYTE)v77 && v22 && *(unsigned __int8 *)(v22 + 16) <= 0x14u) {
      sub_1CC05E6A4(v75 + 8, v22, 0);
    }
    int v25 = *v24;
    LOWORD(v75) = *v24;
    if ((v25 - 4) < 2)
    {
      unsigned int v77 = *(_DWORD *)(v23 + 24);
      if (v77 > 0x40) {
        operator new[]();
      }
      uint64_t v76 = *(void *)(v23 + 16);
      unsigned int v79 = *(_DWORD *)(v23 + 40);
      if (v79 > 0x40) {
        operator new[]();
      }
      uint64_t v78 = *(void *)(v23 + 32);
      BYTE1(v75) = v24[1];
    }
    else if ((v25 - 2) < 2)
    {
      uint64_t v76 = *(void *)(v23 + 16);
    }
    uint64_t v26 = *((void *)a2 - 4);
    unint64_t v90 = (llvm::SelectInst *)v26;
    LOWORD(v91) = 0;
    sub_1CD203594((uint64_t)v73, (uint64_t)this + 136, (uint64_t *)&v90, (unsigned __int8 *)&v91);
    if ((v91 & 0xFE) == 4) {
      sub_1CC05EB8C((uint64_t)&v92);
    }
    uint64_t v27 = v73[0];
    uint64_t v28 = (unsigned __int8 *)(v73[0] + 8);
    if (v74 && v26 && *(unsigned __int8 *)(v26 + 16) <= 0x14u) {
      sub_1CC05E6A4(v73[0] + 8, v26, 0);
    }
    int v29 = *v28;
    LOWORD(v90) = *v28;
    if ((v29 - 4) < 2)
    {
      unsigned int v92 = *(_DWORD *)(v27 + 24);
      if (v92 > 0x40) {
        operator new[]();
      }
      uint64_t v91 = *(void *)(v27 + 16);
      unsigned int v94 = *(_DWORD *)(v27 + 40);
      if (v94 > 0x40) {
        operator new[]();
      }
      uint64_t v93 = *(void *)(v27 + 32);
      BYTE1(v90) = v28[1];
    }
    else if ((v29 - 2) < 2)
    {
      uint64_t v91 = *(void *)(v27 + 16);
    }
    v73[0] = (uint64_t)a2;
    int v30 = *((_DWORD *)this + 38);
    if (v30)
    {
      uint64_t v31 = *((void *)this + 17);
      int v32 = v30 - 1;
      unsigned int v33 = v32 & (v7 ^ (a2 >> 9));
      unsigned int v34 = (llvm::SelectInst **)(v31 + 48 * v33);
      unint64_t v35 = *v34;
      if (*v34 == a2) {
        goto LABEL_45;
      }
      unint64_t v36 = 0;
      int v37 = 1;
      while (v35 != (llvm::SelectInst *)-4096)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v35 == (llvm::SelectInst *)-8192;
        }
        if (v38) {
          unint64_t v36 = v34;
        }
        unsigned int v39 = v33 + v37++;
        unsigned int v33 = v39 & v32;
        unsigned int v34 = (llvm::SelectInst **)(v31 + 48 * v33);
        unint64_t v35 = *v34;
        if (*v34 == a2) {
          goto LABEL_45;
        }
      }
      if (v36) {
        unsigned int v64 = v36;
      }
      else {
        unsigned int v64 = v34;
      }
    }
    else
    {
      unsigned int v64 = 0;
    }
    unsigned int v34 = (llvm::SelectInst **)sub_1CD203218((uint64_t)this + 136, v73, v64);
    _DWORD *v34 = (llvm::SelectInst *)v73[0];
    *((_WORD *)v34 + 4) = 0;
LABEL_45:
    int v40 = sub_1CC061B28((uint64_t)(v34 + 1), (unsigned __int8 *)&v75, 0x100000000);
    v73[0] = (uint64_t)a2;
    int v41 = *((_DWORD *)this + 38);
    if (v41)
    {
      uint64_t v42 = *((void *)this + 17);
      int v43 = v41 - 1;
      unsigned int v44 = v43 & (v7 ^ (a2 >> 9));
      unsigned int v45 = (llvm::SelectInst **)(v42 + 48 * v44);
      unsigned int v46 = *v45;
      if (*v45 == a2) {
        goto LABEL_55;
      }
      unsigned int v47 = 0;
      int v48 = 1;
      while (v46 != (llvm::SelectInst *)-4096)
      {
        if (v47) {
          BOOL v49 = 0;
        }
        else {
          BOOL v49 = v46 == (llvm::SelectInst *)-8192;
        }
        if (v49) {
          unsigned int v47 = v45;
        }
        unsigned int v50 = v44 + v48++;
        unsigned int v44 = v50 & v43;
        unsigned int v45 = (llvm::SelectInst **)(v42 + 48 * v44);
        unsigned int v46 = *v45;
        if (*v45 == a2) {
          goto LABEL_55;
        }
      }
      if (v47) {
        uint64_t v65 = v47;
      }
      else {
        uint64_t v65 = v45;
      }
    }
    else
    {
      uint64_t v65 = 0;
    }
    unsigned int v45 = (llvm::SelectInst **)sub_1CD203218((uint64_t)this + 136, v73, v65);
    *unsigned int v45 = (llvm::SelectInst *)v73[0];
    *((_WORD *)v45 + 4) = 0;
LABEL_55:
    uint64_t result = sub_1CC061B28((uint64_t)(v45 + 1), (unsigned __int8 *)&v90, 0x100000000);
    if ((v40 | result) != 1) {
      goto LABEL_69;
    }
    v73[0] = (uint64_t)a2;
    int v51 = *((_DWORD *)this + 38);
    if (v51)
    {
      uint64_t v52 = *((void *)this + 17);
      int v53 = v51 - 1;
      unsigned int v54 = v53 & (v7 ^ (a2 >> 9));
      uint64_t result = v52 + 48 * v54;
      unint64_t v55 = *(llvm::SelectInst **)result;
      if (*(llvm::SelectInst **)result == a2) {
        goto LABEL_66;
      }
      uint64_t v56 = 0;
      int v57 = 1;
      while (v55 != (llvm::SelectInst *)-4096)
      {
        if (v56) {
          BOOL v58 = 0;
        }
        else {
          BOOL v58 = v55 == (llvm::SelectInst *)-8192;
        }
        if (v58) {
          uint64_t v56 = result;
        }
        unsigned int v59 = v54 + v57++;
        unsigned int v54 = v59 & v53;
        uint64_t result = v52 + 48 * v54;
        unint64_t v55 = *(llvm::SelectInst **)result;
        if (*(llvm::SelectInst **)result == a2) {
          goto LABEL_66;
        }
      }
      if (v56) {
        unsigned int v66 = (void *)v56;
      }
      else {
        unsigned int v66 = (void *)result;
      }
    }
    else
    {
      unsigned int v66 = 0;
    }
    uint64_t result = (uint64_t)sub_1CD203218((uint64_t)this + 136, v73, v66);
    *(void *)uint64_t result = v73[0];
    *(_WORD *)(result + 8) = 0;
LABEL_66:
    if (*(unsigned char *)(result + 8) == 6)
    {
      unsigned int v60 = (char *)this + 784;
      uint64_t v61 = (char *)this + 792;
      unsigned int v62 = *((_DWORD *)this + 198);
      if (v62 < *((_DWORD *)this + 199))
      {
LABEL_68:
        *(void *)(*(void *)v60 + 8 * v62) = a2;
        ++*(_DWORD *)v61;
LABEL_69:
        if ((v90 & 0xFE) == 4)
        {
          if (v94 >= 0x41)
          {
            uint64_t result = v93;
            if (v93) {
              uint64_t result = MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
            }
          }
          if (v92 >= 0x41)
          {
            uint64_t result = v91;
            if (v91) {
              uint64_t result = MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
            }
          }
        }
        if ((v75 & 0xFE) != 4) {
          goto LABEL_71;
        }
        if (v79 >= 0x41)
        {
          uint64_t result = v78;
          if (v78) {
            uint64_t result = MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
          }
        }
        if (v77 < 0x41) {
          goto LABEL_71;
        }
        uint64_t result = v76;
        if (!v76) {
          goto LABEL_71;
        }
LABEL_87:
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
LABEL_71:
        if ((v85 & 0xFE) == 4)
        {
          if (v89 >= 0x41)
          {
            uint64_t result = v88;
            if (v88) {
              uint64_t result = MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
            }
          }
          if (v87 >= 0x41)
          {
            uint64_t result = v86;
            if (v86) {
              return MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
            }
          }
        }
        return result;
      }
    }
    else
    {
      unsigned int v60 = (char *)this + 1312;
      uint64_t v61 = (char *)this + 1320;
      unsigned int v62 = *((_DWORD *)this + 330);
      if (v62 < *((_DWORD *)this + 331)) {
        goto LABEL_68;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }

  return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
}

uint64_t llvm::SCCPInstVisitor::visitUnaryOperator(llvm::SCCPInstVisitor *this, llvm::Instruction *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = (uint64_t *)*((void *)a2 - 1);
  }
  else {
    uint64_t v5 = (uint64_t *)((char *)a2 - 32 * (v4 & 0x7FFFFFF));
  }
  uint64_t v6 = *v5;
  uint64_t v33 = *v5;
  LOWORD(v34) = 0;
  sub_1CD203594((uint64_t)v31, (uint64_t)this + 136, &v33, (unsigned __int8 *)&v34);
  if ((v34 & 0xFE) == 4) {
    sub_1CC05EB8C((uint64_t)&v35);
  }
  uint64_t v7 = v31[0];
  int v8 = (unsigned __int8 *)(v31[0] + 8);
  if (v32)
  {
    if (v6 && *(unsigned __int8 *)(v6 + 16) <= 0x14u) {
      sub_1CC05E6A4(v31[0] + 8, v6, 0);
    }
  }
  int v9 = *v8;
  LOWORD(v33) = *v8;
  if ((v9 - 4) < 2)
  {
    unsigned int v35 = *(_DWORD *)(v7 + 24);
    if (v35 > 0x40) {
      operator new[]();
    }
    uint64_t v34 = *(void *)(v7 + 16);
    unsigned int v37 = *(_DWORD *)(v7 + 40);
    if (v37 > 0x40) {
      operator new[]();
    }
    uint64_t v36 = *(void *)(v7 + 32);
    LOWORD(v9) = v9 | (v8[1] << 8);
    LOWORD(v33) = v9;
  }
  else if ((v9 - 2) < 2)
  {
    uint64_t v34 = *(void *)(v7 + 16);
  }
  v31[0] = (uint64_t)a2;
  int v10 = *((_DWORD *)this + 38);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 17);
    int v12 = v10 - 1;
    unsigned int v13 = v12 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t result = v11 + 48 * v13;
    unsigned int v15 = *(llvm::Instruction **)result;
    if (*(llvm::Instruction **)result == a2) {
      goto LABEL_19;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != (llvm::Instruction *)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == (llvm::Instruction *)-8192;
      }
      if (v18) {
        uint64_t v16 = result;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t result = v11 + 48 * v13;
      unsigned int v15 = *(llvm::Instruction **)result;
      if (*(llvm::Instruction **)result == a2) {
        goto LABEL_19;
      }
    }
    if (v16) {
      uint64_t v23 = (void *)v16;
    }
    else {
      uint64_t v23 = (void *)result;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t result = (uint64_t)sub_1CD203218((uint64_t)this + 136, v31, v23);
  *(void *)uint64_t result = v31[0];
  *(_WORD *)(result + 8) = 0;
LABEL_19:
  int v20 = (unsigned char *)(result + 8);
  if ((*(_WORD *)(result + 8) & 0xFE) != 0 && *(_WORD *)(result + 8) != 2)
  {
    if ((*(_WORD *)(result + 8) & 0xFE) != 4 || (uint64_t result = sub_1CC058CAC(result + 16)) == 0)
    {
LABEL_33:
      uint64_t result = sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
      goto LABEL_34;
    }
    LOBYTE(v9) = v33;
  }
  if (v9 != 2)
  {
    if ((v9 & 0xFE) != 4)
    {
      BOOL v22 = 0;
LABEL_27:
      if (v22) {
        goto LABEL_34;
      }
      if ((v9 & 0xFE) == 0) {
        goto LABEL_34;
      }
      if ((v9 & 0xFE) == 4)
      {
        uint64_t result = sub_1CC058CAC((uint64_t)&v34);
        if (result) {
          goto LABEL_34;
        }
      }
      goto LABEL_33;
    }
    uint64_t result = sub_1CC058CAC((uint64_t)&v34);
    if (!result)
    {
      LOBYTE(v9) = v33;
      BOOL v22 = v33 == 2;
      goto LABEL_27;
    }
  }
  int v25 = (llvm::ConstantExpr *)(*((unsigned __int8 *)a2 + 16) - 28);
  unint64_t Constant = (unsigned __int8 *)llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v33);
  uint64_t result = llvm::ConstantExpr::get(v25, Constant, 0, 0, v27);
  if (*(unsigned __int8 *)(result + 16) - 11 < 2) {
    goto LABEL_34;
  }
  uint64_t result = sub_1CC05E6A4((uint64_t)v20, result, 0);
  if (!result) {
    goto LABEL_34;
  }
  if (*v20 != 6)
  {
    uint64_t v28 = (char *)this + 1312;
    int v29 = (char *)this + 1320;
    unsigned int v30 = *((_DWORD *)this + 330);
    if (v30 < *((_DWORD *)this + 331)) {
      goto LABEL_58;
    }
LABEL_60:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v28 = (char *)this + 784;
  int v29 = (char *)this + 792;
  unsigned int v30 = *((_DWORD *)this + 198);
  if (v30 >= *((_DWORD *)this + 199)) {
    goto LABEL_60;
  }
LABEL_58:
  *(void *)(*(void *)v28 + 8 * v30) = a2;
  ++*(_DWORD *)v29;
LABEL_34:
  if ((v33 & 0xFE) == 4) {
    return sub_1CC05EB8C((uint64_t)&v34);
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitBinaryOperator(llvm::SCCPInstVisitor *this, llvm::Instruction *a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = (const void **)*((void *)a2 - 1);
  }
  else {
    uint64_t v6 = (const void **)((char *)a2 - 32 * (v5 & 0x7FFFFFF));
  }
  uint64_t v7 = (unsigned __int8 *)*v6;
  uint64_t v91 = *v6;
  LOWORD(v92) = 0;
  sub_1CD203594((uint64_t)&v86, (uint64_t)this + 136, (uint64_t *)&v91, (unsigned __int8 *)&v92);
  if ((v92 & 0xFE) == 4)
  {
    if (v94 >= 0x41 && *((void *)&v93 + 1)) {
      MEMORY[0x1D25D9CB0](*((void *)&v93 + 1), 0x1000C8000313F17);
    }
    if (v93 >= 0x41 && *((void *)&v92 + 1)) {
      MEMORY[0x1D25D9CB0](*((void *)&v92 + 1), 0x1000C8000313F17);
    }
  }
  uint64_t v8 = v86;
  int v9 = (unsigned __int8 *)(v86 + 8);
  if ((_BYTE)v88)
  {
    if (v7 && v7[16] <= 0x14u) {
      sub_1CC05E6A4(v86 + 8, (uint64_t)v7, 0);
    }
  }
  int v10 = *v9;
  LOWORD(v86) = *v9;
  if ((v10 - 4) < 2)
  {
    unsigned int v88 = *(_DWORD *)(v8 + 24);
    if (v88 > 0x40) {
      operator new[]();
    }
    unsigned int v87 = *(void **)(v8 + 16);
    unsigned int v90 = *(_DWORD *)(v8 + 40);
    if (v90 > 0x40) {
      operator new[]();
    }
    unsigned int v89 = *(void **)(v8 + 32);
    BYTE1(v86) = *(unsigned char *)(v8 + 9);
  }
  else if ((v10 - 2) < 2)
  {
    unsigned int v87 = *(void **)(v8 + 16);
  }
  int v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x40000000) != 0) {
    int v12 = (char *)*((void *)a2 - 1);
  }
  else {
    int v12 = (char *)a2 - 32 * (v11 & 0x7FFFFFF);
  }
  unsigned int v13 = (unsigned __int8 *)*((void *)v12 + 4);
  uint64_t v91 = v13;
  LOWORD(v92) = 0;
  sub_1CD203594((uint64_t)&v81, (uint64_t)this + 136, (uint64_t *)&v91, (unsigned __int8 *)&v92);
  if ((v92 & 0xFE) == 4)
  {
    if (v94 >= 0x41 && *((void *)&v93 + 1)) {
      MEMORY[0x1D25D9CB0](*((void *)&v93 + 1), 0x1000C8000313F17);
    }
    if (v93 >= 0x41 && *((void *)&v92 + 1)) {
      MEMORY[0x1D25D9CB0](*((void *)&v92 + 1), 0x1000C8000313F17);
    }
  }
  uint64_t v14 = v81;
  unsigned int v15 = (unsigned __int8 *)(v81 + 8);
  if ((_BYTE)v83 && v13 && v13[16] <= 0x14u) {
    sub_1CC05E6A4(v81 + 8, (uint64_t)v13, 0);
  }
  int v16 = *v15;
  LOWORD(v81) = *v15;
  if ((v16 - 4) < 2)
  {
    unsigned int v83 = *(_DWORD *)(v14 + 24);
    if (v83 > 0x40) {
      operator new[]();
    }
    unsigned int v82 = *(void **)(v14 + 16);
    unsigned int v85 = *(_DWORD *)(v14 + 40);
    if (v85 > 0x40) {
      operator new[]();
    }
    unsigned int v84 = *(void **)(v14 + 32);
    BYTE1(v81) = *(unsigned char *)(v14 + 9);
  }
  else if ((v16 - 2) < 2)
  {
    unsigned int v82 = *(void **)(v14 + 16);
  }
  uint64_t v91 = a2;
  int v17 = *((_DWORD *)this + 38);
  if (v17)
  {
    uint64_t v18 = *((void *)this + 17);
    int v19 = v17 - 1;
    unsigned int v20 = v19 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t result = v18 + 48 * v20;
    BOOL v22 = *(llvm::Instruction **)result;
    if (*(llvm::Instruction **)result == a2) {
      goto LABEL_38;
    }
    uint64_t v23 = 0;
    int v24 = 1;
    while (v22 != (llvm::Instruction *)-4096)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v22 == (llvm::Instruction *)-8192;
      }
      if (v25) {
        uint64_t v23 = result;
      }
      unsigned int v26 = v20 + v24++;
      unsigned int v20 = v26 & v19;
      uint64_t result = v18 + 48 * v20;
      BOOL v22 = *(llvm::Instruction **)result;
      if (*(llvm::Instruction **)result == a2) {
        goto LABEL_38;
      }
    }
    if (v23) {
      uint64_t v27 = (void *)v23;
    }
    else {
      uint64_t v27 = (void *)result;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t result = (uint64_t)sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v91, v27);
  *(void *)uint64_t result = v91;
  *(_WORD *)(result + 8) = 0;
LABEL_38:
  if (*(unsigned char *)(result + 8) == 6 || (v86 & 0xFE) == 0 || (v81 & 0xFE) == 0) {
    goto LABEL_140;
  }
  if (v86 == 6 && v81 == 6)
  {
LABEL_139:
    uint64_t result = sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
    goto LABEL_140;
  }
  if (v86 == 2) {
    goto LABEL_44;
  }
  if (v81 != 2) {
    goto LABEL_96;
  }
  if ((v86 & 0xFE) != 4) {
    goto LABEL_55;
  }
  LODWORD(v92) = v88;
  if (v88 > 0x40) {
    operator new[]();
  }
  uint64_t v91 = v87;
  llvm::APInt::operator+=((uint64_t)&v91, 1uLL);
  unsigned int v29 = v92;
  unsigned int v30 = v91;
  LODWORD(v92) = 0;
  if (v90 > 0x40) {
    BOOL v31 = memcmp(v89, v91, (((unint64_t)v90 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v31 = v89 == v91;
  }
  int v32 = v31;
  if (v29 >= 0x41)
  {
    if (v30)
    {
      MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
      if (v92 >= 0x41)
      {
        if (v91) {
          MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v32)
  {
LABEL_44:
    unint64_t Constant = (llvm *)llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v86);
  }
  else
  {
LABEL_55:
    int v33 = *((_DWORD *)a2 + 5);
    if ((v33 & 0x40000000) != 0) {
      uint64_t v34 = (llvm **)*((void *)a2 - 1);
    }
    else {
      uint64_t v34 = (llvm **)((char *)a2 - 32 * (v33 & 0x7FFFFFF));
    }
    unint64_t Constant = *v34;
  }
  uint64_t v36 = &v91;
  if (v81 == 2) {
    goto LABEL_68;
  }
  if ((v81 & 0xFE) != 4) {
    goto LABEL_78;
  }
  LODWORD(v92) = v83;
  if (v83 > 0x40) {
    operator new[]();
  }
  uint64_t v91 = v82;
  llvm::APInt::operator+=((uint64_t)&v91, 1uLL);
  unsigned int v2 = v92;
  uint64_t v38 = v91;
  LODWORD(v92) = 0;
  if (v85 > 0x40) {
    BOOL v39 = memcmp(v84, v91, (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v39 = v84 == v91;
  }
  int v40 = v39;
  if (v2 >= 0x41)
  {
    if (v38)
    {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
      if (v92 >= 0x41)
      {
        if (v91) {
          MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v40)
  {
LABEL_68:
    unsigned int v37 = (llvm::Constant *)llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v81);
  }
  else
  {
LABEL_78:
    int v41 = *((_DWORD *)a2 + 5);
    if ((v41 & 0x40000000) != 0) {
      uint64_t v42 = (char *)*((void *)a2 - 1);
    }
    else {
      uint64_t v42 = (char *)a2 - 32 * (v41 & 0x7FFFFFF);
    }
    unsigned int v37 = (llvm::Constant *)*((void *)v42 + 4);
  }
  int v43 = *((unsigned __int8 *)a2 + 16) - 28;
  uint64_t v91 = *(const void **)this;
  long long v92 = 0u;
  long long v93 = 0u;
  LOWORD(v94) = 257;
  uint64_t result = (uint64_t)sub_1CC03A350(v43, Constant, v37, (const llvm::DataLayout *)&v91, (llvm::DSOLocalEquivalent **)3);
  if (result)
  {
    unsigned int v44 = *(unsigned __int8 *)(result + 16);
    if (v44 <= 0x14)
    {
      if (v44 - 11 < 2) {
        goto LABEL_140;
      }
      LOWORD(v91) = 0;
      sub_1CC05E6A4((uint64_t)&v91, result, 1u);
      char v45 = (char)v91;
      *(_WORD *)uint64_t v76 = v91;
      if (v91 - 4 < 2)
      {
        LODWORD(v36) = DWORD2(v92);
        int v78 = DWORD2(v92);
        if (DWORD2(v92) > 0x40) {
          operator new[]();
        }
        uint64_t v77 = v92;
        unsigned int v2 = DWORD2(v93);
        int v80 = DWORD2(v93);
        if (DWORD2(v93) > 0x40) {
          operator new[]();
        }
        unint64_t Constant = (llvm *)v93;
        uint64_t v79 = v93;
        char v45 = (char)v91;
        *(_WORD *)uint64_t v76 = v91 | (BYTE1(v91) << 8);
      }
      else if (v91 - 2 < 2)
      {
        uint64_t v77 = v92;
      }
      uint64_t result = sub_1CD1F658C((uint64_t)this, (uint64_t)a2, v76, 0x100000000);
      if ((v45 & 0xFE) == 4)
      {
        if (v2 >= 0x41 && Constant)
        {
          uint64_t result = MEMORY[0x1D25D9CB0](Constant, 0x1000C8000313F17);
          LODWORD(v36) = v78;
        }
        if (v36 >= 0x41)
        {
          uint64_t result = v77;
          if (v77) {
            uint64_t result = MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
          }
        }
      }
      if ((v91 & 0xFE) != 4) {
        goto LABEL_140;
      }
      if (DWORD2(v93) >= 0x41)
      {
        uint64_t result = v93;
        if ((void)v93) {
          uint64_t result = MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
        }
      }
      if (DWORD2(v92) < 0x41) {
        goto LABEL_140;
      }
      uint64_t result = v92;
      if (!(void)v92) {
        goto LABEL_140;
      }
LABEL_138:
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      goto LABEL_140;
    }
  }
LABEL_96:
  if (*(unsigned char *)(*(void *)a2 + 8) != 13) {
    goto LABEL_139;
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  unsigned int v68 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    operator new[]();
  }
  if (PrimitiveSizeInBits) {
    unsigned int v47 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
  }
  else {
    unsigned int v47 = 0;
  }
  int __src = v47;
  unsigned int v70 = PrimitiveSizeInBits;
  long long __dst = v47;
  int v48 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v48 = (llvm::Type *)**((void **)v48 + 2);
  }
  unsigned int v49 = llvm::Type::getPrimitiveSizeInBits(v48);
  unsigned int v64 = v49;
  if (v49 > 0x40) {
    operator new[]();
  }
  if (v49) {
    unsigned int v50 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v49);
  }
  else {
    unsigned int v50 = 0;
  }
  uint64_t v63 = v50;
  unsigned int v66 = v49;
  uint64_t v65 = v50;
  if ((v86 & 0xFE) == 4)
  {
    if (v68 > 0x40 || v88 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__src, v88);
      if (v68 <= 0x40) {
        int __src = v87;
      }
      else {
        memcpy(__src, v87, (((unint64_t)v68 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      int __src = v87;
      unsigned int v68 = v88;
    }
    if (v70 > 0x40 || v90 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, v90);
      if (v70 <= 0x40) {
        long long __dst = v89;
      }
      else {
        memcpy(__dst, v89, (((unint64_t)v70 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      long long __dst = v89;
      unsigned int v70 = v90;
    }
  }
  if ((v81 & 0xFE) == 4)
  {
    if (v64 > 0x40 || v83 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v63, v83);
      if (v64 <= 0x40) {
        uint64_t v63 = v82;
      }
      else {
        memcpy(v63, v82, (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      uint64_t v63 = v82;
      unsigned int v64 = v83;
    }
    if (v66 > 0x40 || v85 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v65, v85);
      if (v66 <= 0x40) {
        uint64_t v65 = v84;
      }
      else {
        memcpy(v65, v84, (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      uint64_t v65 = v84;
      unsigned int v66 = v85;
    }
  }
  llvm::ConstantRange::binaryOp((llvm::ConstantRange *)&v63, (unsigned int *)&__src, *((unsigned __int8 *)a2 + 16) - 28, (unint64_t *)&__s1);
  unsigned int v51 = v60;
  unsigned int v56 = v60;
  if (v60 > 0x40) {
    operator new[]();
  }
  uint64_t v52 = __s1;
  unint64_t v55 = __s1;
  unsigned int v53 = v62;
  unsigned int v58 = v62;
  if (v62 > 0x40) {
    operator new[]();
  }
  unsigned int v54 = __s2;
  int v57 = __s2;
  if (__s1 == __s2 && (!v60 || (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v60) == __s1))
  {
    __int16 v71 = 6;
  }
  else
  {
    __int16 v71 = 0;
    if ((unint64_t)__s2 | (unint64_t)__s1)
    {
      LODWORD(v92) = v60;
      uint64_t v91 = __s1;
      LODWORD(v93) = v62;
      *((void *)&v92 + 1) = __s2;
      sub_1CC05E860(&v71, (uint64_t)&v91, 0x100000000);
      if (v93 >= 0x41 && *((void *)&v92 + 1)) {
        MEMORY[0x1D25D9CB0](*((void *)&v92 + 1), 0x1000C8000313F17);
      }
      if (v92 >= 0x41 && v91) {
        MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
      }
      unsigned int v51 = 0;
      unsigned int v53 = 0;
    }
  }
  uint64_t result = sub_1CD1F658C((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&v71, 0x100000000);
  if ((v71 & 0xFE) == 4)
  {
    if (v75 >= 0x41)
    {
      uint64_t result = v74;
      if (v74) {
        uint64_t result = MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
      }
    }
    if (v73 >= 0x41)
    {
      uint64_t result = v72;
      if (v72) {
        uint64_t result = MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
      }
    }
  }
  if (v53 >= 0x41 && v54) {
    uint64_t result = MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
  }
  if (v51 >= 0x41 && v52) {
    uint64_t result = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
  }
  if (v62 >= 0x41)
  {
    uint64_t result = (uint64_t)__s2;
    if (__s2) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
  }
  if (v60 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  if (v66 >= 0x41)
  {
    uint64_t result = (uint64_t)v65;
    if (v65) {
      uint64_t result = MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
    }
  }
  if (v64 >= 0x41)
  {
    uint64_t result = (uint64_t)v63;
    if (v63) {
      uint64_t result = MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
    }
  }
  if (v70 >= 0x41)
  {
    uint64_t result = (uint64_t)__dst;
    if (__dst) {
      uint64_t result = MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
    }
  }
  if (v68 >= 0x41)
  {
    uint64_t result = (uint64_t)__src;
    if (__src) {
      goto LABEL_138;
    }
  }
LABEL_140:
  if ((v81 & 0xFE) == 4)
  {
    if (v85 >= 0x41)
    {
      uint64_t result = (uint64_t)v84;
      if (v84) {
        uint64_t result = MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
      }
    }
    if (v83 >= 0x41)
    {
      uint64_t result = (uint64_t)v82;
      if (v82) {
        uint64_t result = MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
      }
    }
  }
  if ((v86 & 0xFE) == 4)
  {
    if (v90 >= 0x41)
    {
      uint64_t result = (uint64_t)v89;
      if (v89) {
        uint64_t result = MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
      }
    }
    if (v88 >= 0x41)
    {
      uint64_t result = (uint64_t)v87;
      if (v87) {
        return MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitCmpInst(llvm::SCCPInstVisitor *this, llvm::CmpInst *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v5 = (char *)this + 136;
  uint64_t v4 = *((void *)this + 17);
  unsigned int v66 = a2;
  int v6 = *((_DWORD *)this + 38);
  if (!v6)
  {
    int v17 = 0;
LABEL_21:
    int v9 = sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v66, v17);
    *int v9 = v66;
    *((_WORD *)v9 + 4) = 0;
    goto LABEL_11;
  }
  int v7 = v6 - 1;
  unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  int v9 = (void *)(v4 + 48 * v8);
  uint64_t v10 = *v9;
  if ((llvm::CmpInst *)*v9 != a2)
  {
    int v11 = 0;
    int v12 = 1;
    while (v10 != -4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -8192;
      }
      if (v13) {
        int v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      int v9 = (void *)(v4 + 48 * v8);
      uint64_t v10 = *v9;
      if ((llvm::CmpInst *)*v9 == a2) {
        goto LABEL_11;
      }
    }
    if (v11) {
      int v17 = v11;
    }
    else {
      int v17 = v9;
    }
    goto LABEL_21;
  }
LABEL_11:
  if ((v9[1] & 0xFE) != 0 && *((_WORD *)v9 + 4) != 2)
  {
    if ((v9[1] & 0xFE) != 4) {
      return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
    }
    LODWORD(v72) = *((_DWORD *)v9 + 6);
    if (v72 > 0x40) {
      operator new[]();
    }
    __s2 = (void *)v9[2];
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v18 = v72;
    int v19 = __s2;
    LODWORD(v72) = 0;
    uint64_t v20 = *((unsigned int *)v9 + 10);
    if (v20 > 0x40) {
      BOOL v21 = memcmp((const void *)v9[4], __s2, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v21 = v9[4] == (void)__s2;
    }
    char v22 = v21;
    if (v18 >= 0x41)
    {
      if (v19)
      {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
        if (v72 >= 0x41)
        {
          if (__s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
      }
    }
    if ((v22 & 1) == 0) {
      return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
    }
  }
  uint64_t v23 = (unsigned __int8 *)*((void *)a2 - 8);
  int v24 = (unsigned __int8 *)*((void *)a2 - 4);
  __s2 = v23;
  LOWORD(v72) = 0;
  sub_1CD203594((uint64_t)&v66, (uint64_t)v5, (uint64_t *)&__s2, (unsigned __int8 *)&v72);
  if ((v72 & 0xFE) == 4) {
    sub_1CC05EB8C((uint64_t)&v73);
  }
  uint64_t v25 = (uint64_t)v66;
  unsigned int v26 = (unsigned __int8 *)v66 + 8;
  if ((_BYTE)v68 && v23 && v23[16] <= 0x14u) {
    sub_1CC05E6A4((uint64_t)v66 + 8, (uint64_t)v23, 0);
  }
  int v27 = *v26;
  LOWORD(v66) = *v26;
  if ((v27 - 4) < 2)
  {
    unsigned int v68 = *(_DWORD *)(v25 + 24);
    if (v68 > 0x40) {
      operator new[]();
    }
    *(void *)unsigned int v67 = *(void *)(v25 + 16);
    unsigned int v70 = *(_DWORD *)(v25 + 40);
    if (v70 > 0x40) {
      operator new[]();
    }
    uint64_t v69 = *(void *)(v25 + 32);
    BYTE1(v66) = v26[1];
  }
  else if ((v27 - 2) < 2)
  {
    *(void *)unsigned int v67 = *(void *)(v25 + 16);
  }
  __s2 = v24;
  LOWORD(v72) = 0;
  uint64_t result = (uint64_t)sub_1CD203594((uint64_t)&v61, (uint64_t)v5, (uint64_t *)&__s2, (unsigned __int8 *)&v72);
  if ((v72 & 0xFE) == 4) {
    uint64_t result = sub_1CC05EB8C((uint64_t)&v73);
  }
  uint64_t v31 = v61;
  int v32 = (unsigned __int8 *)(v61 + 8);
  if ((_BYTE)v63 && v24 && v24[16] <= 0x14u) {
    uint64_t result = sub_1CC05E6A4(v61 + 8, (uint64_t)v24, 0);
  }
  int v33 = *v32;
  LOWORD(__s2) = *v32;
  if ((v33 - 4) < 2)
  {
    unsigned int v73 = *(_DWORD *)(v31 + 24);
    if (v73 > 0x40) {
      operator new[]();
    }
    uint64_t v72 = *(llvm::Constant **)(v31 + 16);
    unsigned int v75 = *(_DWORD *)(v31 + 40);
    if (v75 > 0x40) {
      operator new[]();
    }
    uint64_t v74 = *(void *)(v31 + 32);
    LOBYTE(v33) = (_BYTE)__s2;
    LOWORD(__s2) = __s2 | (v32[1] << 8);
  }
  else if ((v33 - 2) < 2)
  {
    uint64_t v72 = *(llvm::Constant **)(v31 + 16);
  }
  uint64_t v34 = *(uint64_t ***)a2;
  if ((v66 & 0xFE) == 0 || (v33 & 0xFE) == 0)
  {
    uint64_t result = (uint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)a2, v28);
LABEL_49:
    uint64_t v37 = result;
    goto LABEL_50;
  }
  uint64_t v35 = *((_WORD *)a2 + 9) & 0x3FLL;
  if (v66 == 2 && v33 == 2)
  {
    uint64_t v36 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3FLL);
    if (v35 <= 0xF) {
      uint64_t result = llvm::ConstantExpr::getFCmp(v36, *(uint64_t ****)v67, v72, 0);
    }
    else {
      uint64_t result = (uint64_t)llvm::ConstantExpr::getICmp(v36, *(llvm::Type **)v67, v72, 0, v30);
    }
    goto LABEL_49;
  }
  if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20) {
    goto LABEL_87;
  }
  if (v66 != 3)
  {
    if (v66 == 2 && v33 == 3) {
      goto LABEL_86;
    }
LABEL_87:
    if ((v66 & 0xFE) != 4 || (v33 & 0xFE) != 4) {
      goto LABEL_51;
    }
    uint64_t result = llvm::ConstantRange::icmp((const llvm::ConstantRange *)v67, *((_WORD *)a2 + 9) & 0x3F, (llvm::ConstantRange *)&v72);
    if (result)
    {
      uint64_t v40 = **v34;
      uint64_t v37 = *(void *)(v40 + 1560);
      if (!v37)
      {
        unsigned int v50 = *(llvm::ConstantInt **)(v40 + 1888);
        unsigned int v51 = *(_DWORD *)(v40 + 1896);
        LODWORD(__src) = v51 >> 8;
        if (v51 >> 8 > 0x40) {
          operator new[]();
        }
        if (v51 <= 0xFF) {
          LOBYTE(v52) = 0;
        }
        else {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v51) + 63);
        }
        unint64_t v61 = v52 & 1;
        uint64_t result = (uint64_t)llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v61, v39);
        uint64_t v37 = result;
        if (__src >= 0x41)
        {
          uint64_t result = v61;
          if (v61)
          {
            uint64_t v54 = v37;
            uint64_t result = MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
            uint64_t v37 = v54;
          }
        }
        *(void *)(v40 + 1560) = v37;
      }
      goto LABEL_91;
    }
    uint64_t result = llvm::ConstantRange::icmp((const llvm::ConstantRange *)v67, dword_1CFB32D98[v35], (llvm::ConstantRange *)&v72);
    if (!result) {
      goto LABEL_51;
    }
    uint64_t v41 = **v34;
    uint64_t v37 = *(void *)(v41 + 1568);
    if (!v37)
    {
      uint64_t v42 = *(llvm::ConstantInt **)(v41 + 1888);
      unint64_t v43 = *(unsigned int *)(v41 + 1896);
LABEL_96:
      LODWORD(__src) = v43 >> 8;
      if (v43 >> 8 >= 0x41) {
        operator new[]();
      }
      unint64_t v61 = 0;
      uint64_t result = (uint64_t)llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v61, v29);
      uint64_t v37 = result;
      if (__src >= 0x41)
      {
        uint64_t result = v61;
        if (v61)
        {
          uint64_t v53 = v37;
          uint64_t result = MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
          uint64_t v37 = v53;
        }
      }
      *(void *)(v41 + 1568) = v37;
      goto LABEL_91;
    }
    goto LABEL_91;
  }
  if (v33 != 2) {
    goto LABEL_87;
  }
LABEL_86:
  if (*(llvm::Constant **)v67 != v72) {
    goto LABEL_87;
  }
  uint64_t v44 = **v34;
  if (v35 != 33)
  {
    uint64_t v37 = *(void *)(v44 + 1568);
    if (v37) {
      goto LABEL_91;
    }
    uint64_t v42 = *(llvm::ConstantInt **)(v44 + 1888);
    uint64_t v41 = **v34;
    unint64_t v43 = *(unsigned int *)(v44 + 1896);
    goto LABEL_96;
  }
  uint64_t v37 = *(void *)(v44 + 1560);
  if (!v37)
  {
    char v45 = *(llvm::ConstantInt **)(v44 + 1888);
    uint64_t v46 = **v34;
    unint64_t v47 = *(unsigned int *)(v44 + 1896);
    LODWORD(__src) = v47 >> 8;
    if (v47 >> 8 > 0x40) {
      operator new[]();
    }
    if (v47 <= 0xFF) {
      LOBYTE(v48) = 0;
    }
    else {
      unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v47) + 63);
    }
    unint64_t v61 = v48 & 1;
    uint64_t result = (uint64_t)llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v61, v29);
    uint64_t v49 = result;
    if (__src >= 0x41)
    {
      uint64_t result = v61;
      if (v61) {
        uint64_t result = MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
      }
    }
    uint64_t v37 = v49;
    *(void *)(v46 + 1560) = v49;
  }
LABEL_91:
  if ((v34[1] & 0xFE) == 0x12)
  {
    uint64_t result = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v34 + 8) | ((unint64_t)(*((_DWORD *)v34 + 2) == 19) << 32)), v37);
    goto LABEL_49;
  }
LABEL_50:
  if (v37)
  {
    if (*(unsigned __int8 *)(v37 + 16) - 11 >= 2)
    {
      LOWORD(v61) = 0;
      sub_1CC05E6A4((uint64_t)&v61, v37, 0);
      char v38 = v61;
      *(_WORD *)unsigned int v56 = v61;
      if (v61 - 4 < 2)
      {
        unsigned int v58 = v63;
        if (v63 > 0x40) {
          operator new[]();
        }
        int v57 = __src;
        unsigned int v60 = v65;
        if (v65 > 0x40) {
          operator new[]();
        }
        unsigned int v59 = v64;
        char v38 = v61;
        *(_WORD *)unsigned int v56 = v61 | (BYTE1(v61) << 8);
      }
      else if (v61 - 2 < 2)
      {
        int v57 = __src;
      }
      uint64_t result = sub_1CD1F658C((uint64_t)this, (uint64_t)a2, v56, 0x100000000);
      if ((v38 & 0xFE) == 4)
      {
        if (v60 >= 0x41)
        {
          uint64_t result = (uint64_t)v59;
          if (v59) {
            uint64_t result = MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
          }
        }
        if (v58 >= 0x41)
        {
          uint64_t result = (uint64_t)v57;
          if (v57) {
            uint64_t result = MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
          }
        }
      }
      if ((v61 & 0xFE) == 4)
      {
        if (v65 >= 0x41)
        {
          uint64_t result = (uint64_t)v64;
          if (v64) {
            uint64_t result = MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
          }
        }
        if (v63 >= 0x41)
        {
          uint64_t result = (uint64_t)__src;
          if (__src) {
            uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
      }
    }
    goto LABEL_54;
  }
LABEL_51:
  if ((v66 & 0xFE) != 0 && (__s2 & 0xFE) != 0
    || (unint64_t v61 = (unint64_t)a2,
        uint64_t result = (uint64_t)sub_1CD205964((uint64_t)v5, (uint64_t *)&v61),
        __int16 v55 = *(_WORD *)(result + 8),
        v55 == 2)
    || (v55 & 0xFE) == 4 && (uint64_t result = sub_1CC058CAC(result + 16)) != 0)
  {
    uint64_t result = sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
  }
LABEL_54:
  if ((__s2 & 0xFE) == 4)
  {
    if (v75 >= 0x41)
    {
      uint64_t result = v74;
      if (v74) {
        uint64_t result = MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
      }
    }
    if (v73 >= 0x41)
    {
      uint64_t result = (uint64_t)v72;
      if (v72) {
        uint64_t result = MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
      }
    }
  }
  if ((v66 & 0xFE) == 4)
  {
    if (v70 >= 0x41)
    {
      uint64_t result = v69;
      if (v69) {
        uint64_t result = MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
      }
    }
    if (v68 >= 0x41)
    {
      uint64_t result = *(void *)v67;
      if (*(void *)v67) {
        return MEMORY[0x1D25D9CB0](*(void *)v67, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void llvm::SCCPInstVisitor::visitGetElementPtrInst(llvm::SCCPInstVisitor *this, llvm::GetElementPtrInst *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v5 = (char *)this + 136;
  uint64_t v4 = *((void *)this + 17);
  uint64_t v34 = a2;
  int v6 = *((_DWORD *)this + 38);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    int v9 = (llvm::GetElementPtrInst **)(v4 + 48 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_11;
    }
    int v11 = 0;
    int v12 = 1;
    while (v10 != (llvm::GetElementPtrInst *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (llvm::GetElementPtrInst *)-8192;
      }
      if (v13) {
        int v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      int v9 = (llvm::GetElementPtrInst **)(v4 + 48 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_11;
      }
    }
    if (v11) {
      int v16 = v11;
    }
    else {
      int v16 = v9;
    }
  }
  else
  {
    int v16 = 0;
  }
  int v9 = (llvm::GetElementPtrInst **)sub_1CD203218((uint64_t)v5, (uint64_t *)&v34, v16);
  *int v9 = (llvm::GetElementPtrInst *)v34;
  *((_WORD *)v9 + 4) = 0;
LABEL_11:
  BOOL v15 = ((_WORD)v9[1] & 0xFE) == 0 || *((_WORD *)v9 + 4) == 2;
  if (v15 || ((_WORD)v9[1] & 0xFE) == 4 && sub_1CC058CAC((uint64_t)(v9 + 2)))
  {
    uint64_t v34 = v36;
    uint64_t v35 = 0x800000000;
    unsigned int v17 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if (v17 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
      while (1)
      {
        uint64_t v20 = *(void *)((char *)a2 + v18 + -32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        uint64_t v37 = v20;
        LOWORD(__src) = 0;
        sub_1CD203594((uint64_t)&__s2, (uint64_t)v5, &v37, (unsigned __int8 *)&__src);
        if ((__src & 0xFE) == 4) {
          sub_1CC05EB8C((uint64_t)&v39);
        }
        BOOL v21 = __s2;
        char v22 = (unsigned __int8 *)__s2 + 8;
        if (v33)
        {
          if (v20 && *(unsigned __int8 *)(v20 + 16) <= 0x14u) {
            sub_1CC05E6A4((uint64_t)__s2 + 8, v20, 0);
          }
        }
        int v23 = *v22;
        LOWORD(v37) = *v22;
        if ((v23 - 4) < 2)
        {
          unsigned int v39 = *((_DWORD *)v21 + 6);
          if (v39 > 0x40) {
            operator new[]();
          }
          int __src = (void *)*((void *)v21 + 2);
          unsigned int v41 = *((_DWORD *)v21 + 10);
          if (v41 > 0x40) {
            operator new[]();
          }
          __s1 = (void *)*((void *)v21 + 4);
          LOBYTE(v23) = v37;
          LOWORD(v37) = v37 | (v22[1] << 8);
        }
        else if ((v23 - 2) < 2)
        {
          int __src = (void *)*((void *)v21 + 2);
        }
        if ((v23 & 0xFE) == 0) {
          goto LABEL_37;
        }
        if (v23 != 2)
        {
          if ((v23 & 0xFE) != 4) {
            break;
          }
          unsigned int v32 = v39;
          if (v39 > 0x40) {
            operator new[]();
          }
          __s2 = __src;
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v26 = v32;
          int v27 = __s2;
          unsigned int v32 = 0;
          if (v41 > 0x40) {
            BOOL v28 = memcmp(__s1, __s2, (((unint64_t)v41 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v28 = __s1 == __s2;
          }
          char v29 = v28;
          if (v26 >= 0x41)
          {
            if (v27)
            {
              MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
              if (v32 >= 0x41)
              {
                if (__s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
              }
            }
          }
          if ((v29 & 1) == 0) {
            break;
          }
        }
        unint64_t Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v37);
        if (Constant)
        {
          if (v35 >= (unint64_t)HIDWORD(v35)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v34 + v35) = Constant;
          LODWORD(v35) = v35 + 1;
          LOBYTE(Constant) = 1;
        }
        else
        {
          sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
        }
LABEL_38:
        if ((v37 & 0xFE) == 4)
        {
          if (v41 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v39 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        if ((Constant & 1) == 0) {
          goto LABEL_47;
        }
        v18 += 32;
        if (v19 == v18) {
          goto LABEL_45;
        }
      }
      sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
LABEL_37:
      LOBYTE(Constant) = 0;
      goto LABEL_38;
    }
LABEL_45:
    uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(*((void *)a2 + 8), *(uint64_t **)v34, (uint64_t)v34 + 8, (8 * v35 - 8) >> 3, 0, 0, 0);
    if (*(unsigned __int8 *)(ElementPtr + 16) - 11 >= 2) {
      sub_1CD1F4B3C((uint64_t)this, (uint64_t)a2, ElementPtr);
    }
LABEL_47:
    if (v34 != v36) {
      free(v34);
    }
  }
  else
  {
    sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
  }
}

int32x2_t llvm::SCCPInstVisitor::visitStoreInst(llvm::SCCPInstVisitor *this, llvm::StoreInst *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(**((void **)a2 - 8) + 8) == 16) {
    return result;
  }
  if (!*((_DWORD *)this + 48)) {
    return result;
  }
  uint64_t v4 = *((void *)a2 - 4);
  if (*(unsigned char *)(v4 + 16) != 3) {
    return result;
  }
  uint64_t v24 = 0;
  if (!sub_1CD205AB8(*((void *)this + 23), *((_DWORD *)this + 50), v4, &v24)) {
    return result;
  }
  uint64_t v6 = v24;
  if (v24 == *((void *)this + 23) + 48 * *((unsigned int *)this + 50)) {
    return result;
  }
  uint64_t v7 = *((void *)a2 - 8);
  uint64_t v24 = v7;
  *(_WORD *)uint64_t v25 = 0;
  sub_1CD203594((uint64_t)&v17, (uint64_t)this + 136, &v24, v25);
  if ((v25[0] & 0xFE) == 4)
  {
    if (v29 >= 0x41 && v28) {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
    }
    if (v27 >= 0x41 && v26) {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
  }
  uint64_t v8 = v17;
  int v9 = (unsigned __int8 *)(v17 + 8);
  if (v18 && v7 && *(unsigned __int8 *)(v7 + 16) <= 0x14u) {
    sub_1CC05E6A4(v17 + 8, v7, 0);
  }
  uint64_t v10 = (unsigned char *)(v6 + 8);
  int v11 = *v9;
  *(_WORD *)uint64_t v19 = *v9;
  if ((v11 - 4) < 2)
  {
    unsigned int v21 = *(_DWORD *)(v8 + 24);
    if (v21 > 0x40) {
      operator new[]();
    }
    uint64_t v20 = *(void *)(v8 + 16);
    unsigned int v23 = *(_DWORD *)(v8 + 40);
    if (v23 > 0x40) {
      operator new[]();
    }
    uint64_t v22 = *(void *)(v8 + 32);
    *(_WORD *)uint64_t v19 = v11 | (v9[1] << 8);
  }
  else if ((v11 - 2) < 2)
  {
    uint64_t v20 = *(void *)(v8 + 16);
  }
  if (sub_1CC061B28((uint64_t)v10, v19, 0x100000000))
  {
    if (*v10 == 6)
    {
      int v12 = (char *)this + 784;
      BOOL v13 = (char *)this + 792;
      unsigned int v14 = *((_DWORD *)this + 198);
      if (v14 < *((_DWORD *)this + 199))
      {
LABEL_17:
        *(void *)(*(void *)v12 + 8 * v14) = v4;
        ++*(_DWORD *)v13;
        goto LABEL_18;
      }
    }
    else
    {
      int v12 = (char *)this + 1312;
      BOOL v13 = (char *)this + 1320;
      unsigned int v14 = *((_DWORD *)this + 330);
      if (v14 < *((_DWORD *)this + 331)) {
        goto LABEL_17;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
LABEL_18:
  if ((v19[0] & 0xFE) == 4)
  {
    if (v23 >= 0x41 && v22) {
      MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
    }
    if (v21 >= 0x41 && v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
  }
  if (*(_WORD *)v10 == 6)
  {
    if ((*(_WORD *)v10 & 0xFE) == 4)
    {
      if (*(_DWORD *)(v6 + 40) >= 0x41u)
      {
        uint64_t v15 = *(void *)(v6 + 32);
        if (v15) {
          MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(v6 + 24) >= 0x41u)
      {
        uint64_t v16 = *(void *)(v6 + 16);
        if (v16) {
          MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
        }
      }
    }
    *(void *)uint64_t v6 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)this + 192), (int32x2_t)0x1FFFFFFFFLL);
    *((int32x2_t *)this + 24) = result;
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitLoadInst(llvm::SCCPInstVisitor *this, llvm::LoadInst *a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)a2 + 8) != 16 && (*((_WORD *)a2 + 9) & 1) == 0)
  {
    uint64_t v4 = *((void *)this + 17);
    unsigned int v67 = a2;
    int v5 = *((_DWORD *)this + 38);
    unsigned int v6 = a2 >> 4;
    if (v5)
    {
      int v7 = v5 - 1;
      unsigned int v8 = v7 & (v6 ^ (a2 >> 9));
      int v9 = (llvm::LoadInst **)(v4 + 48 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_21;
      }
      int v11 = 0;
      int v12 = 1;
      while (v10 != (llvm::LoadInst *)-4096)
      {
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v10 == (llvm::LoadInst *)-8192;
        }
        if (v13) {
          int v11 = v9;
        }
        unsigned int v14 = v8 + v12++;
        unsigned int v8 = v14 & v7;
        int v9 = (llvm::LoadInst **)(v4 + 48 * v8);
        uint64_t v10 = *v9;
        if (*v9 == a2) {
          goto LABEL_21;
        }
      }
      if (v11) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = v9;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    int v9 = (llvm::LoadInst **)sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v67, v16);
    *int v9 = v67;
    *((_WORD *)v9 + 4) = 0;
LABEL_21:
    if (*((unsigned char *)v9 + 8) == 6) {
      return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
    }
    uint64_t v17 = *((void *)a2 - 4);
    unsigned int v67 = (llvm::LoadInst *)v17;
    LOWORD(__src) = 0;
    uint64_t result = (uint64_t)sub_1CD203594((uint64_t)&__s2, (uint64_t)this + 136, (uint64_t *)&v67, (unsigned __int8 *)&__src);
    if ((__src & 0xFE) == 4)
    {
      if (v72 >= 0x41)
      {
        uint64_t result = v71;
        if (v71) {
          uint64_t result = MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
        }
      }
      if (__s1 >= 0x41)
      {
        uint64_t result = v69;
        if (v69) {
          uint64_t result = MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
        }
      }
    }
    char v18 = __s2;
    uint64_t v19 = (unsigned __int8 *)__s2 + 8;
    if (v56 && v17 && *(unsigned __int8 *)(v17 + 16) <= 0x14u) {
      uint64_t result = sub_1CC05E6A4((uint64_t)__s2 + 8, v17, 0);
    }
    int v20 = *v19;
    LOWORD(v67) = *v19;
    if ((v20 - 4) < 2)
    {
      LODWORD(v69) = *((_DWORD *)v18 + 6);
      if (v69 > 0x40) {
        operator new[]();
      }
      int __src = (void *)*((void *)v18 + 2);
      LODWORD(v71) = *((_DWORD *)v18 + 10);
      if (v71 > 0x40) {
        operator new[]();
      }
      __s1 = (void *)*((void *)v18 + 4);
      LOBYTE(v20) = (_BYTE)v67;
      LOWORD(v67) = v67 | (v19[1] << 8);
    }
    else if ((v20 - 2) < 2)
    {
      int __src = (void *)*((void *)v18 + 2);
    }
    if ((v20 & 0xFE) == 0) {
      goto LABEL_99;
    }
    __s2 = a2;
    int v21 = *((_DWORD *)this + 38);
    if (v21)
    {
      uint64_t v22 = *((void *)this + 17);
      int v23 = v21 - 1;
      unsigned int v24 = v23 & (v6 ^ (a2 >> 9));
      uint64_t v25 = (void *)(v22 + 48 * v24);
      uint64_t v26 = (llvm::LoadInst *)*v25;
      if ((llvm::LoadInst *)*v25 == a2)
      {
LABEL_47:
        if (v20 != 2)
        {
          if ((v20 & 0xFE) != 4) {
            goto LABEL_79;
          }
          unsigned int v55 = v69;
          if (v69 > 0x40) {
            operator new[]();
          }
          __s2 = __src;
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v43 = v55;
          uint64_t v44 = __s2;
          unsigned int v55 = 0;
          if (v71 > 0x40) {
            BOOL v45 = memcmp(__s1, __s2, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v45 = __s1 == __s2;
          }
          int v46 = v45;
          if (v43 >= 0x41)
          {
            if (v44)
            {
              MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
              if (v55 >= 0x41)
              {
                if (__s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
              }
            }
          }
          if (!v46)
          {
LABEL_79:
            sub_1CD1FD160((uint64_t)&v57, (llvm::ConstantPointerNull **)a2);
            uint64_t result = sub_1CD1F658C((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&v57, 0x100000000);
            if ((v57 & 0xFE) != 4) {
              goto LABEL_99;
            }
            if (v61 >= 0x41)
            {
              uint64_t result = v60;
              if (v60) {
                uint64_t result = MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
              }
            }
            if (v59 < 0x41) {
              goto LABEL_99;
            }
            uint64_t result = v58;
            if (!v58) {
              goto LABEL_99;
            }
            goto LABEL_83;
          }
        }
        unsigned int v32 = v25 + 1;
        uint64_t result = (uint64_t)llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v67);
        uint64_t v37 = (llvm *)result;
        int v38 = *(unsigned __int8 *)(result + 16);
        if (v38 != 3)
        {
          if (v38 == 19)
          {
            uint64_t v39 = *(void *)(*((void *)a2 + 5) + 56);
            uint64_t v40 = **((void **)a2 - 4);
            unsigned int v41 = *(_DWORD *)(v40 + 8);
            if ((v41 & 0xFE) == 0x12) {
              unsigned int v41 = *(_DWORD *)(**(void **)(v40 + 16) + 8);
            }
            if (!v39 || (uint64_t v42 = *(void *)(v39 + 112)) == 0)
            {
              if (v41 < 0x100) {
                goto LABEL_99;
              }
              goto LABEL_85;
            }
            if ((*(unsigned char *)(v42 + 17) & 1) != 0 || v41 > 0xFF) {
LABEL_85:
            }
              uint64_t result = llvm::SCCPInstVisitor::markOverdefined((uint64_t)this, (uint64_t)v32, (uint64_t)a2);
LABEL_99:
            if ((v67 & 0xFE) == 4)
            {
              if (v71 >= 0x41)
              {
                uint64_t result = (uint64_t)__s1;
                if (__s1) {
                  uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                }
              }
              if (v69 >= 0x41)
              {
                uint64_t result = (uint64_t)__src;
                if (__src) {
                  return MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                }
              }
            }
            return result;
          }
LABEL_73:
          uint64_t result = (uint64_t)llvm::ConstantFoldLoadFromConstPtr(v37, *(llvm::Constant **)a2, *(llvm::Type **)this, v33, v34, v35, v36);
          if (!result) {
            goto LABEL_79;
          }
          if (*(unsigned __int8 *)(result + 16) - 11 < 2) {
            goto LABEL_99;
          }
          uint64_t result = sub_1CC05E6A4((uint64_t)v32, result, 0);
          if (!result) {
            goto LABEL_99;
          }
          if (*v32 == 6)
          {
            unint64_t v48 = (char *)this + 784;
            uint64_t v49 = (char *)this + 792;
            unsigned int v50 = *((_DWORD *)this + 198);
            if (v50 < *((_DWORD *)this + 199))
            {
LABEL_78:
              *(void *)(*(void *)v48 + 8 * v50) = a2;
              ++*(_DWORD *)v49;
              goto LABEL_99;
            }
          }
          else
          {
            unint64_t v48 = (char *)this + 1312;
            uint64_t v49 = (char *)this + 1320;
            unsigned int v50 = *((_DWORD *)this + 330);
            if (v50 < *((_DWORD *)this + 331)) {
              goto LABEL_78;
            }
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (!*((_DWORD *)this + 48)) {
          goto LABEL_73;
        }
        __s2 = 0;
        if (!sub_1CD205AB8(*((void *)this + 23), *((_DWORD *)this + 50), result, &__s2)
          || __s2 == (void *)(*((void *)this + 23) + 48 * *((unsigned int *)this + 50)))
        {
          goto LABEL_73;
        }
        int v47 = *((unsigned __int8 *)__s2 + 8);
        __int16 v62 = *((unsigned __int8 *)__s2 + 8);
        if ((v47 - 4) < 2)
        {
          unsigned int v64 = *((_DWORD *)__s2 + 6);
          if (v64 > 0x40) {
            operator new[]();
          }
          uint64_t v63 = *((void *)__s2 + 2);
          unsigned int v66 = *((_DWORD *)__s2 + 10);
          if (v66 > 0x40) {
            operator new[]();
          }
          uint64_t v65 = *((void *)__s2 + 4);
          __int16 v62 = v47 | (*((unsigned __int8 *)__s2 + 9) << 8);
        }
        else if ((v47 - 2) < 2)
        {
          uint64_t v63 = *((void *)__s2 + 2);
        }
        uint64_t result = sub_1CC061B28((uint64_t)v32, (unsigned __int8 *)&v62, 0xA00000100);
        if (!result)
        {
LABEL_96:
          if ((v62 & 0xFE) != 4) {
            goto LABEL_99;
          }
          if (v66 >= 0x41)
          {
            uint64_t result = v65;
            if (v65) {
              uint64_t result = MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
            }
          }
          if (v64 < 0x41) {
            goto LABEL_99;
          }
          uint64_t result = v63;
          if (!v63) {
            goto LABEL_99;
          }
LABEL_83:
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          goto LABEL_99;
        }
        if (*v32 == 6)
        {
          unsigned int v51 = (char *)this + 784;
          unint64_t v52 = (char *)this + 792;
          unsigned int v53 = *((_DWORD *)this + 198);
          if (v53 < *((_DWORD *)this + 199))
          {
LABEL_95:
            *(void *)(*(void *)v51 + 8 * v53) = a2;
            ++*(_DWORD *)v52;
            goto LABEL_96;
          }
        }
        else
        {
          unsigned int v51 = (char *)this + 1312;
          unint64_t v52 = (char *)this + 1320;
          unsigned int v53 = *((_DWORD *)this + 330);
          if (v53 < *((_DWORD *)this + 331)) {
            goto LABEL_95;
          }
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v27 = 0;
      int v28 = 1;
      while (v26 != (llvm::LoadInst *)-4096)
      {
        if (v27) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v26 == (llvm::LoadInst *)-8192;
        }
        if (v29) {
          unsigned int v27 = v25;
        }
        unsigned int v30 = v24 + v28++;
        unsigned int v24 = v30 & v23;
        uint64_t v25 = (void *)(v22 + 48 * v24);
        uint64_t v26 = (llvm::LoadInst *)*v25;
        if ((llvm::LoadInst *)*v25 == a2) {
          goto LABEL_47;
        }
      }
      if (v27) {
        uint64_t v31 = v27;
      }
      else {
        uint64_t v31 = v25;
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v25 = sub_1CD203218((uint64_t)this + 136, (uint64_t *)&__s2, v31);
    *uint64_t v25 = __s2;
    *((_WORD *)v25 + 4) = 0;
    LOBYTE(v20) = (_BYTE)v67;
    goto LABEL_47;
  }

  return sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
}

uint64_t sub_1CD1FD160(uint64_t result, llvm::ConstantPointerNull **a2)
{
  uint64_t v3 = (__int16 *)result;
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_16;
  }
  uint64_t v4 = **(void **)*a2;
  uint64_t v50 = (uint64_t)a2;
  int v5 = *(_DWORD *)(v4 + 2496);
  if (!v5)
  {
    uint64_t v34 = 0;
LABEL_51:
    uint64_t result = (uint64_t)sub_1CC609054(v4 + 2480, (uint64_t)&v50, &v50, v34);
    uint64_t v35 = v50;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)uint64_t result = v35;
    *(void *)(result + 8) = result + 24;
    *(void *)(result + 16) = 0x100000000;
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v4 + 2480);
  int v7 = v5 - 1;
  unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t result = v6 + 40 * v8;
  uint64_t v9 = *(void *)result;
  if (*(llvm::ConstantPointerNull ***)result != a2)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        uint64_t v10 = (void *)result;
      }
      unsigned int v13 = v8 + v11++;
      unsigned int v8 = v13 & v7;
      uint64_t result = v6 + 40 * v8;
      uint64_t v9 = *(void *)result;
      if (*(llvm::ConstantPointerNull ***)result == a2) {
        goto LABEL_12;
      }
    }
    if (v10) {
      uint64_t v34 = v10;
    }
    else {
      uint64_t v34 = (void *)result;
    }
    goto LABEL_51;
  }
LABEL_12:
  uint64_t v14 = *(unsigned int *)(result + 16);
  if (!v14) {
    goto LABEL_16;
  }
  uint64_t v15 = (uint64_t *)(*(void *)(result + 8) + 8);
  uint64_t v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 4)
  {
    v15 += 2;
    v16 -= 16;
    if (!v16) {
      goto LABEL_16;
    }
  }
  uint64_t result = *v15;
  if (!*v15 || *((unsigned char *)*a2 + 8) != 13)
  {
LABEL_16:
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_31;
    }
    uint64_t v17 = **(void **)*a2;
    uint64_t v50 = (uint64_t)a2;
    int v18 = *(_DWORD *)(v17 + 2496);
    if (v18)
    {
      uint64_t v19 = *(void *)(v17 + 2480);
      int v20 = v18 - 1;
      unsigned int v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t result = v19 + 40 * v21;
      uint64_t v22 = *(void *)result;
      if (*(llvm::ConstantPointerNull ***)result == a2)
      {
LABEL_27:
        uint64_t v27 = *(unsigned int *)(result + 16);
        if (v27)
        {
          int v28 = (void *)(*(void *)(result + 8) + 8);
          uint64_t v29 = 16 * v27;
          while (*((_DWORD *)v28 - 2) != 11)
          {
            v28 += 2;
            v29 -= 16;
            if (!v29) {
              goto LABEL_31;
            }
          }
          if (*v28)
          {
            char v33 = llvm::ConstantPointerNull::get(*a2, (llvm::PointerType *)a2);
            *uint64_t v3 = 0;
            return sub_1CC063DD8((uint64_t)v3, (uint64_t)v33);
          }
        }
LABEL_31:
        *uint64_t v3 = 6;
        return result;
      }
      int v23 = 0;
      int v24 = 1;
      while (v22 != -4096)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -8192;
        }
        if (v25) {
          int v23 = (void *)result;
        }
        unsigned int v26 = v21 + v24++;
        unsigned int v21 = v26 & v20;
        uint64_t result = v19 + 40 * v21;
        uint64_t v22 = *(void *)result;
        if (*(llvm::ConstantPointerNull ***)result == a2) {
          goto LABEL_27;
        }
      }
      if (v23) {
        uint64_t v36 = v23;
      }
      else {
        uint64_t v36 = (void *)result;
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    uint64_t result = (uint64_t)sub_1CC609054(v17 + 2480, (uint64_t)&v50, &v50, v36);
    uint64_t v37 = v50;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)uint64_t result = v37;
    *(void *)(result + 8) = result + 24;
    *(void *)(result + 16) = 0x100000000;
    goto LABEL_27;
  }
  uint64_t result = llvm::getConstantRangeFromMetadata(result, (uint64_t)&__s1);
  unsigned int v30 = v47;
  if (v47 <= 0x40)
  {
    uint64_t v31 = (uint64_t)__s1;
    unint64_t v32 = (unint64_t)__s2;
    if (__s1 == __s2 && (!v47 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v47))) {
      goto LABEL_58;
    }
    *uint64_t v3 = 0;
    if (!(v32 | v31)) {
      goto LABEL_40;
    }
LABEL_38:
    unsigned int v51 = v30;
    uint64_t v50 = v31;
    unsigned int v53 = v49;
    unint64_t v52 = v32;
    unsigned int v47 = 0;
    unsigned int v49 = 0;
    uint64_t result = sub_1CC05E860(v3, (uint64_t)&v50, 0x100000000);
    if (v53 >= 0x41)
    {
      uint64_t result = v52;
      if (v52) {
        uint64_t result = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
      }
    }
    if (v51 >= 0x41)
    {
      uint64_t result = v50;
      if (v50) {
        uint64_t result = MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
      }
    }
    goto LABEL_40;
  }
  unsigned int v45 = v47;
  unint64_t v38 = v47 + 63;
  unint64_t v32 = (unint64_t)__s2;
  uint64_t v44 = __s1;
  if (memcmp(__s1, __s2, (v38 >> 3) & 0x3FFFFFF8))
  {
    *uint64_t v3 = 0;
    uint64_t v31 = (uint64_t)v44;
    unsigned int v30 = v45;
    goto LABEL_38;
  }
  uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
  if (result != v45)
  {
    int v39 = 0;
    uint64_t v40 = v38 >> 6;
    do
    {
      if (v40-- < 1) {
        break;
      }
      unint64_t v42 = v44[v40];
      v39 += __clz(v42);
    }
    while (!v42);
    unsigned int v30 = v45;
    unsigned int v43 = v45 | 0xFFFFFFC0;
    if ((v45 & 0x3F) == 0) {
      unsigned int v43 = 0;
    }
    *uint64_t v3 = 0;
    BOOL v12 = v39 + v43 == v45;
    uint64_t v31 = (uint64_t)v44;
    if (v12) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
LABEL_58:
  *uint64_t v3 = 6;
LABEL_40:
  if (v49 >= 0x41)
  {
    uint64_t result = (uint64_t)__s2;
    if (__s2) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
  }
  if (v47 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  return result;
}

void llvm::SCCPInstVisitor::visitCallBase(llvm::SCCPInstVisitor *this, llvm::CallBase *a2, const llvm::Function *a3)
{
  llvm::SCCPInstVisitor::handleCallResult(this, a2, a3);

  llvm::SCCPInstVisitor::handleCallArguments(this, a2);
}

void llvm::SCCPInstVisitor::handleCallResult(llvm::SCCPInstVisitor *this, llvm::CallBase *a2, const llvm::Function *a3)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (char *)a2 - 32;
  uint64_t v7 = *((void *)a2 - 4);
  if (!v7 || *(unsigned char *)(v7 + 16) || (uint64_t v9 = *(void *)(v7 + 24), v9 != *((void *)a2 + 9)))
  {
LABEL_4:
    llvm::SCCPInstVisitor::handleCallOverdefined(this, a2, a3);
    return;
  }
  if (*((unsigned char *)a2 + 16) != 84 || (*(unsigned char *)(v7 + 33) & 0x20) == 0) {
    goto LABEL_25;
  }
  int v10 = *(_DWORD *)(v7 + 36);
  uint64_t v11 = (v10 - 262);
  if (v11 <= 0x31)
  {
    if (v11 == 19)
    {
      uint64_t v12 = *((void *)this + 17);
      *(void *)&long long v177 = a2;
      int v13 = *((_DWORD *)this + 38);
      unsigned int v14 = a2 >> 4;
      if (v13)
      {
        int v15 = v13 - 1;
        unsigned int v16 = v15 & (v14 ^ (a2 >> 9));
        uint64_t v17 = (llvm::CallBase **)(v12 + 48 * v16);
        int v18 = *v17;
        if (*v17 == a2) {
          goto LABEL_98;
        }
        uint64_t v19 = 0;
        int v20 = 1;
        while (v18 != (llvm::CallBase *)-4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v18 == (llvm::CallBase *)-8192;
          }
          if (v21) {
            uint64_t v19 = v17;
          }
          unsigned int v22 = v16 + v20++;
          unsigned int v16 = v22 & v15;
          uint64_t v17 = (llvm::CallBase **)(v12 + 48 * v16);
          int v18 = *v17;
          if (*v17 == a2) {
            goto LABEL_98;
          }
        }
        if (v19) {
          uint64_t v50 = v19;
        }
        else {
          uint64_t v50 = v17;
        }
      }
      else
      {
        uint64_t v50 = 0;
      }
      uint64_t v17 = (llvm::CallBase **)sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v177, v50);
      *uint64_t v17 = (llvm::CallBase *)v177;
      *((_WORD *)v17 + 4) = 0;
LABEL_98:
      if (*((unsigned char *)v17 + 8) == 6) {
        return;
      }
      uint64_t v51 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      *(void *)&long long v177 = v51;
      WORD4(v177) = 0;
      sub_1CD203594((uint64_t)&v207, (uint64_t)this + 136, (uint64_t *)&v177, (unsigned __int8 *)&v177 + 8);
      if ((BYTE8(v177) & 0xFE) == 4)
      {
        if (v181 >= 0x41 && v180) {
          MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
        }
        if (v179 >= 0x41 && v178) {
          MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
        }
      }
      unint64_t v52 = v207;
      unsigned int v53 = (unsigned __int8 *)v207 + 8;
      if ((_BYTE)v209)
      {
        if (v51 && *(unsigned __int8 *)(v51 + 16) <= 0x14u) {
          sub_1CC05E6A4((uint64_t)v207 + 8, v51, 0);
        }
      }
      int v54 = *v53;
      if ((v54 - 4) < 2)
      {
        unsigned int v142 = *((_DWORD *)v52 + 6);
        if (v142 > 0x40) {
          operator new[]();
        }
        int __src = (void *)*((void *)v52 + 2);
        unsigned int v141 = *((_DWORD *)v52 + 10);
        if (v141 > 0x40) {
          operator new[]();
        }
        uint64_t v137 = (void *)*((void *)v52 + 4);
        __int16 v56 = v54 | (*((unsigned __int8 *)v52 + 9) << 8);
      }
      else
      {
        LODWORD(v55) = v54 - 2;
        if ((v54 - 2) < 2)
        {
          unsigned int v55 = (void *)*((void *)v52 + 2);
          int __src = v55;
        }
        __int16 v56 = *v53;
        unsigned int v142 = v55;
        unsigned int v141 = v55;
      }
      __int16 v57 = (_DWORD *)sub_1CD200A6C((uint64_t)this, (uint64_t)a2);
      llvm::PredicateBase::getConstraint(v57, v58, (uint64_t)&v159);
      if (v161)
      {
        __int16 v140 = v56;
        uint64_t v59 = v159;
        uint64_t v60 = v160;
        *(void *)&long long v177 = v160;
        WORD4(v177) = 0;
        sub_1CD203594((uint64_t)&v207, (uint64_t)this + 136, (uint64_t *)&v177, (unsigned __int8 *)&v177 + 8);
        if ((BYTE8(v177) & 0xFE) == 4)
        {
          if (v181 >= 0x41 && v180) {
            MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
          }
          if (v179 >= 0x41 && v178) {
            MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
          }
        }
        unsigned int v61 = (char *)v207 + 8;
        if ((_BYTE)v209 && v60 && *(unsigned __int8 *)(v60 + 16) <= 0x14u) {
          sub_1CC05E6A4((uint64_t)v207 + 8, v60, 0);
        }
        if (!*v61)
        {
          sub_1CD200B0C((uint64_t)this, v60, (uint64_t)a2);
          LOBYTE(v56) = v140;
          goto LABEL_345;
        }
        int v138 = v57[6];
        *(void *)&long long v177 = v60;
        WORD4(v177) = 0;
        sub_1CD203594((uint64_t)&v207, (uint64_t)this + 136, (uint64_t *)&v177, (unsigned __int8 *)&v177 + 8);
        if ((BYTE8(v177) & 0xFE) == 4)
        {
          if (v181 >= 0x41 && v180) {
            MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
          }
          if (v179 >= 0x41 && v178) {
            MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
          }
        }
        __int16 v62 = v207;
        uint64_t v63 = (unsigned __int8 *)v207 + 8;
        if ((_BYTE)v209 && v60 && *(unsigned __int8 *)(v60 + 16) <= 0x14u) {
          sub_1CC05E6A4((uint64_t)v207 + 8, v60, 0);
        }
        int v64 = *v63;
        LOWORD(v177) = *v63;
        if ((v64 - 4) < 2)
        {
          LODWORD(v178) = *((_DWORD *)v62 + 6);
          if (v178 > 0x40) {
            operator new[]();
          }
          *((void *)&v177 + 1) = *((void *)v62 + 2);
          LODWORD(v180) = *((_DWORD *)v62 + 10);
          if (v180 > 0x40) {
            operator new[]();
          }
          uint64_t v179 = (void *)*((void *)v62 + 4);
          LOBYTE(v64) = v177;
          LOWORD(v177) = v177 | (*((unsigned __int8 *)v62 + 9) << 8);
        }
        else if ((v64 - 2) < 2)
        {
          *((void *)&v177 + 1) = *((void *)v62 + 2);
        }
        LOBYTE(v56) = v140;
        uint64_t v207 = a2;
        int v77 = *((_DWORD *)this + 38);
        if (v77)
        {
          uint64_t v78 = *((void *)this + 17);
          int v79 = v77 - 1;
          unsigned int v80 = v79 & (v14 ^ (a2 >> 9));
          uint64_t v81 = (void *)(v78 + 48 * v80);
          unsigned int v82 = (llvm::CallBase *)*v81;
          if ((llvm::CallBase *)*v81 == a2)
          {
LABEL_159:
            unsigned int v88 = v81 + 1;
            int v89 = v140 & 0xFE;
            if ((v64 & 0xFE) != 4 && v89 != 4)
            {
              if (v59 != 33)
              {
                if (v59 == 32 && v64 == 2)
                {
                  sub_1CD200B0C((uint64_t)this, v60, (uint64_t)a2);
                  __int16 v192 = v177;
                  if (v177 - 4 < 2)
                  {
                    unsigned int v194 = v178;
                    if (v178 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v193 = (void *)*((void *)&v177 + 1);
                    unsigned int v196 = v180;
                    if (v180 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v195 = v179;
                    __int16 v192 = v177 | (BYTE1(v177) << 8);
                    LOBYTE(v56) = v140;
                  }
                  else if (v177 - 2 < 2)
                  {
                    uint64_t v193 = (void *)*((void *)&v177 + 1);
                  }
                  if (!sub_1CC061B28((uint64_t)v88, (unsigned __int8 *)&v192, 0x100000000))
                  {
LABEL_339:
                    if ((v192 & 0xFE) != 4) {
                      goto LABEL_342;
                    }
                    if (v196 >= 0x41 && v195) {
                      MEMORY[0x1D25D9CB0](v195, 0x1000C8000313F17);
                    }
                    if (v194 < 0x41) {
                      goto LABEL_342;
                    }
                    uint64_t v100 = v193;
                    if (!v193) {
                      goto LABEL_342;
                    }
LABEL_257:
                    MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
                    goto LABEL_342;
                  }
                  if (*v88 == 6)
                  {
                    unint64_t v133 = (char *)this + 784;
                    uint64_t v134 = (char *)this + 792;
                    unsigned int v135 = *((_DWORD *)this + 198);
                    if (v135 < *((_DWORD *)this + 199))
                    {
LABEL_338:
                      *(void *)(*(void *)v133 + 8 * v135) = a2;
                      ++*(_DWORD *)v134;
                      LOBYTE(v56) = v140;
                      goto LABEL_339;
                    }
                  }
                  else
                  {
                    unint64_t v133 = (char *)this + 1312;
                    uint64_t v134 = (char *)this + 1320;
                    unsigned int v135 = *((_DWORD *)this + 330);
                    if (v135 < *((_DWORD *)this + 331)) {
                      goto LABEL_338;
                    }
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
LABEL_239:
                __int16 v182 = v54;
                if (v140 - 4 < 2)
                {
                  unsigned int v184 = v142;
                  if (v142 > 0x40) {
                    operator new[]();
                  }
                  int v183 = __src;
                  unsigned int v186 = v141;
                  if (v141 > 0x40) {
                    operator new[]();
                  }
                  unsigned int v185 = v137;
                  __int16 v182 = v54 | v140 & 0xFF00;
                }
                else if (v140 - 2 < 2)
                {
                  int v183 = __src;
                }
                if (!sub_1CC061B28((uint64_t)v88, (unsigned __int8 *)&v182, 0x100000000))
                {
LABEL_253:
                  if ((v182 & 0xFE) == 4)
                  {
                    if (v186 >= 0x41 && v185) {
                      MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
                    }
                    if (v184 >= 0x41)
                    {
                      uint64_t v100 = v183;
                      if (v183) {
                        goto LABEL_257;
                      }
                    }
                  }
LABEL_342:
                  if ((v177 & 0xFE) != 4) {
                    goto LABEL_345;
                  }
                  if (v180 >= 0x41 && v179) {
                    MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
                  }
                  if (v178 < 0x41) {
                    goto LABEL_345;
                  }
                  int v104 = (void *)*((void *)&v177 + 1);
                  if (!*((void *)&v177 + 1)) {
                    goto LABEL_345;
                  }
                  goto LABEL_382;
                }
                if (*v88 == 6)
                {
                  unint64_t v109 = (char *)this + 784;
                  int v110 = (char *)this + 792;
                  unsigned int v111 = *((_DWORD *)this + 198);
                  if (v111 < *((_DWORD *)this + 199))
                  {
LABEL_252:
                    *(void *)(*(void *)v109 + 8 * v111) = a2;
                    ++*(_DWORD *)v110;
                    goto LABEL_253;
                  }
                }
                else
                {
                  unint64_t v109 = (char *)this + 1312;
                  int v110 = (char *)this + 1320;
                  unsigned int v111 = *((_DWORD *)this + 330);
                  if (v111 < *((_DWORD *)this + 331))
                  {
                    LOBYTE(v56) = v140;
                    goto LABEL_252;
                  }
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v64 != 2 || v138 != 1) {
                goto LABEL_239;
              }
              sub_1CD200B0C((uint64_t)this, v60, (uint64_t)a2);
              __int16 v187 = 0;
              sub_1CC063DD8((uint64_t)&v187, *((uint64_t *)&v177 + 1));
              if (!sub_1CC061B28((uint64_t)v88, (unsigned __int8 *)&v187, 0x100000000))
              {
LABEL_234:
                if ((v187 & 0xFE) == 4)
                {
                  if (v191 >= 0x41 && v190) {
                    MEMORY[0x1D25D9CB0](v190, 0x1000C8000313F17);
                  }
                  if (v189 >= 0x41)
                  {
                    uint64_t v100 = v188;
                    if (v188) {
                      goto LABEL_257;
                    }
                  }
                }
                goto LABEL_342;
              }
              if (*v88 == 6)
              {
                uint64_t v105 = (char *)this + 784;
                unint64_t v106 = (char *)this + 792;
                unsigned int v107 = *((_DWORD *)this + 198);
                if (v107 < *((_DWORD *)this + 199))
                {
LABEL_233:
                  *(void *)(*(void *)v105 + 8 * v107) = a2;
                  ++*(_DWORD *)v106;
                  LOBYTE(v56) = v140;
                  goto LABEL_234;
                }
              }
              else
              {
                uint64_t v105 = (char *)this + 1312;
                unint64_t v106 = (char *)this + 1320;
                unsigned int v107 = *((_DWORD *)this + 330);
                if (v107 < *((_DWORD *)this + 331)) {
                  goto LABEL_233;
                }
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v91 = sub_1CB83544C(*(void *)this, *(void *)v51);
            if (v90 == 1) {
            unsigned int v156 = v91;
            }
            if (v91 > 0x40) {
              operator new[]();
            }
            if (v91) {
              long long v92 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v91);
            }
            else {
              long long v92 = 0;
            }
            uint64_t v155 = v92;
            unsigned int v158 = v91;
            long long v93 = v137;
            uint64_t v157 = v92;
            if ((v177 & 0xFE) == 4)
            {
              llvm::ConstantRange::makeAllowedICmpRegion((llvm::ConstantRange *)((char *)&v177 + 8), v59, (uint64_t)&v207);
              if (v156 >= 0x41 && v155) {
                MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
              }
              uint64_t v155 = v207;
              unsigned int v156 = v208;
              unsigned int v208 = 0;
              uint64_t v157 = v209;
              unsigned int v158 = v210;
              long long v93 = v137;
            }
            if (v89 == 4)
            {
              unsigned int v152 = v142;
              if (v142 > 0x40) {
                operator new[]();
              }
              unint64_t v151 = __src;
              unsigned int v154 = v141;
              if (v141 > 0x40) {
                operator new[]();
              }
              unint64_t v153 = v93;
            }
            else
            {
              unsigned int v95 = sub_1CB83544C(*(void *)this, *(void *)v51);
              if (v94 == 1) {
              unsigned int v152 = v95;
              }
              if (v95 > 0x40) {
                operator new[]();
              }
              if (v95) {
                unsigned int v96 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v95);
              }
              else {
                unsigned int v96 = 0;
              }
              unint64_t v151 = v96;
              unsigned int v154 = v95;
              unint64_t v153 = v96;
            }
            llvm::ConstantRange::intersectWith((uint64_t)&v155, (llvm::ConstantRange *)&v151, 0, (uint64_t)&__s1);
            if (!llvm::ConstantRange::contains((llvm::ConstantRange *)&v151, (const llvm::ConstantRange *)&__s1)
              && sub_1CC54832C((uint64_t)&v151))
            {
              if (v148 > 0x40 || v152 > 0x40)
              {
                llvm::APInt::reallocate((uint64_t)&__s1, v152);
                if (v148 <= 0x40) {
                  __s1 = v151;
                }
                else {
                  memcpy(__s1, v151, (((unint64_t)v148 + 63) >> 3) & 0x3FFFFFF8);
                }
                LOBYTE(v56) = v140;
              }
              else
              {
                __s1 = v151;
                unsigned int v148 = v152;
              }
              if (v150 > 0x40 || v154 > 0x40)
              {
                llvm::APInt::reallocate((uint64_t)&__s2, v154);
                if (v150 <= 0x40) {
                  __s2 = v153;
                }
                else {
                  memcpy(__s2, v153, (((unint64_t)v150 + 63) >> 3) & 0x3FFFFFF8);
                }
                LOBYTE(v56) = v140;
              }
              else
              {
                __s2 = v153;
                unsigned int v150 = v154;
              }
            }
            sub_1CD200B0C((uint64_t)this, v60, (uint64_t)a2);
            unsigned int v144 = v148;
            if (v148 > 0x40) {
              operator new[]();
            }
            uint64_t v143 = __s1;
            unsigned int v146 = v150;
            if (v150 > 0x40) {
              operator new[]();
            }
            unint64_t v145 = __s2;
            if (__s1 == __s2 && (!v148 || (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v148) == __s1))
            {
              __int16 v108 = 6;
            }
            else
            {
              if ((unint64_t)__s2 | (unint64_t)__s1)
              {
                __int16 v197 = 0;
                unsigned int v208 = v148;
                uint64_t v207 = (llvm::CallBase *)__s1;
                unsigned int v210 = v150;
                unsigned int v209 = __s2;
                unsigned int v144 = 0;
                unsigned int v146 = 0;
                sub_1CC05E860(&v197, (uint64_t)&v207, (v138 != 1) | 0x100000000);
                if (v210 >= 0x41 && v209) {
                  MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
                }
                if (v208 >= 0x41 && v207) {
                  MEMORY[0x1D25D9CB0](v207, 0x1000C8000313F17);
                }
LABEL_199:
                if (!sub_1CC061B28((uint64_t)v88, (unsigned __int8 *)&v197, 0x100000000)) {
                  goto LABEL_203;
                }
                if (*v88 == 6)
                {
                  uint64_t v97 = (char *)this + 784;
                  uint64_t v98 = (char *)this + 792;
                  unsigned int v99 = *((_DWORD *)this + 198);
                  if (v99 < *((_DWORD *)this + 199))
                  {
LABEL_202:
                    *(void *)(*(void *)v97 + 8 * v99) = a2;
                    ++*(_DWORD *)v98;
LABEL_203:
                    if ((v197 & 0xFE) == 4)
                    {
                      if (v201 >= 0x41 && v200) {
                        MEMORY[0x1D25D9CB0](v200, 0x1000C8000313F17);
                      }
                      if (v199 >= 0x41 && v198) {
                        MEMORY[0x1D25D9CB0](v198, 0x1000C8000313F17);
                      }
                    }
                    if (v146 >= 0x41 && v145) {
                      MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
                    }
                    if (v144 >= 0x41 && v143) {
                      MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
                    }
                    if (v150 >= 0x41 && __s2) {
                      MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                    }
                    if (v148 >= 0x41 && __s1) {
                      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                    }
                    if (v154 >= 0x41 && v153) {
                      MEMORY[0x1D25D9CB0](v153, 0x1000C8000313F17);
                    }
                    if (v152 >= 0x41 && v151) {
                      MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
                    }
                    if (v158 >= 0x41 && v157) {
                      MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
                    }
                    if (v156 >= 0x41)
                    {
                      uint64_t v100 = v155;
                      if (v155) {
                        goto LABEL_257;
                      }
                    }
                    goto LABEL_342;
                  }
                }
                else
                {
                  uint64_t v97 = (char *)this + 1312;
                  uint64_t v98 = (char *)this + 1320;
                  unsigned int v99 = *((_DWORD *)this + 330);
                  if (v99 < *((_DWORD *)this + 331)) {
                    goto LABEL_202;
                  }
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              __int16 v108 = v138 != 1;
            }
            __int16 v197 = v108;
            goto LABEL_199;
          }
          unsigned int v83 = 0;
          int v84 = 1;
          while (v82 != (llvm::CallBase *)-4096)
          {
            if (v83) {
              BOOL v85 = 0;
            }
            else {
              BOOL v85 = v82 == (llvm::CallBase *)-8192;
            }
            if (v85) {
              unsigned int v83 = v81;
            }
            unsigned int v86 = v80 + v84++;
            unsigned int v80 = v86 & v79;
            uint64_t v81 = (void *)(v78 + 48 * v80);
            unsigned int v82 = (llvm::CallBase *)*v81;
            if ((llvm::CallBase *)*v81 == a2) {
              goto LABEL_159;
            }
          }
          if (v83) {
            unsigned int v87 = v83;
          }
          else {
            unsigned int v87 = v81;
          }
        }
        else
        {
          unsigned int v87 = 0;
        }
        uint64_t v81 = sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v207, v87);
        void *v81 = v207;
        *((_WORD *)v81 + 4) = 0;
        LOBYTE(v64) = v177;
        goto LABEL_159;
      }
      *(void *)&long long v177 = a2;
      int v65 = *((_DWORD *)this + 38);
      if (v65)
      {
        uint64_t v66 = *((void *)this + 17);
        int v67 = v65 - 1;
        unsigned int v68 = v67 & (v14 ^ (a2 >> 9));
        uint64_t v69 = (void *)(v66 + 48 * v68);
        unsigned int v70 = (llvm::CallBase *)*v69;
        if ((llvm::CallBase *)*v69 == a2) {
          goto LABEL_138;
        }
        uint64_t v71 = 0;
        int v72 = 1;
        while (v70 != (llvm::CallBase *)-4096)
        {
          if (v71) {
            BOOL v73 = 0;
          }
          else {
            BOOL v73 = v70 == (llvm::CallBase *)-8192;
          }
          if (v73) {
            uint64_t v71 = v69;
          }
          unsigned int v74 = v68 + v72++;
          unsigned int v68 = v74 & v67;
          uint64_t v69 = (void *)(v66 + 48 * v68);
          unsigned int v70 = (llvm::CallBase *)*v69;
          if ((llvm::CallBase *)*v69 == a2) {
            goto LABEL_138;
          }
        }
        if (v71) {
          unsigned int v75 = v71;
        }
        else {
          unsigned int v75 = v69;
        }
      }
      else
      {
        unsigned int v75 = 0;
      }
      uint64_t v69 = sub_1CD203218((uint64_t)this + 136, (uint64_t *)&v177, v75);
      *uint64_t v69 = v177;
      *((_WORD *)v69 + 4) = 0;
LABEL_138:
      uint64_t v76 = v69 + 1;
      __int16 v202 = v54;
      if (v56 - 4 < 2)
      {
        unsigned int v204 = v142;
        if (v142 > 0x40) {
          operator new[]();
        }
        unint64_t v203 = __src;
        unsigned int v206 = v141;
        if (v141 > 0x40) {
          operator new[]();
        }
        uint64_t v205 = v137;
        __int16 v202 = v54 | v56 & 0xFF00;
      }
      else if (v56 - 2 < 2)
      {
        unint64_t v203 = __src;
      }
      if (!sub_1CC061B28((uint64_t)v76, (unsigned __int8 *)&v202, 0x100000000))
      {
LABEL_223:
        if ((v202 & 0xFE) != 4) {
          goto LABEL_345;
        }
        if (v206 >= 0x41 && v205) {
          MEMORY[0x1D25D9CB0](v205, 0x1000C8000313F17);
        }
        if (v204 < 0x41) {
          goto LABEL_345;
        }
        int v104 = v203;
        if (!v203) {
          goto LABEL_345;
        }
LABEL_382:
        MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
LABEL_345:
        if ((v56 & 0xFE) == 4)
        {
          if (v141 >= 0x41 && v137) {
            MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
          }
          if (v142 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        return;
      }
      if (*v76 == 6)
      {
        int v101 = (char *)this + 784;
        uint64_t v102 = (char *)this + 792;
        unsigned int v103 = *((_DWORD *)this + 198);
        if (v103 < *((_DWORD *)this + 199))
        {
LABEL_222:
          *(void *)(*(void *)v101 + 8 * v103) = a2;
          ++*(_DWORD *)v102;
          goto LABEL_223;
        }
      }
      else
      {
        int v101 = (char *)this + 1312;
        uint64_t v102 = (char *)this + 1320;
        unsigned int v103 = *((_DWORD *)this + 330);
        if (v103 < *((_DWORD *)this + 331)) {
          goto LABEL_222;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (((1 << (v10 - 6)) & 0x2184000203001) != 0) {
      goto LABEL_265;
    }
  }
  if (v10 == 1)
  {
LABEL_265:
    *(void *)&long long v177 = &v178;
    *((void *)&v177 + 1) = 0x200000000;
    int v113 = *((_DWORD *)a2 + 5);
    uint64_t v114 = (unsigned __int8 **)((char *)a2 - 32 * (v113 & 0x7FFFFFF));
    if (v113 < 0 && (uint64_t v136 = (uint64_t)*(v114 - 1), (v136 & 0xFFFFFFFF0) != 0)) {
      uint64_t v115 = (*((_DWORD *)v114 - 3) - *(_DWORD *)((char *)v114 - v136));
    }
    else {
      uint64_t v115 = 0;
    }
    uint64_t v116 = (unsigned __int8 **)&v8[-32 * v115];
    if (v114 == v116)
    {
      unsigned int v123 = (const void **)&v178;
    }
    else
    {
      do
      {
        uint64_t v117 = *v114;
        uint64_t v207 = (llvm::CallBase *)*v114;
        LOWORD(v208) = 0;
        sub_1CD203594((uint64_t)&v155, (uint64_t)this + 136, (uint64_t *)&v207, (unsigned __int8 *)&v208);
        if ((v208 & 0xFE) == 4)
        {
          if (v212 >= 0x41 && v211) {
            MEMORY[0x1D25D9CB0](v211, 0x1000C8000313F17);
          }
          if (v210 >= 0x41 && v209) {
            MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
          }
        }
        uint64_t v118 = v155;
        uint64_t v119 = (char *)v155 + 8;
        if ((_BYTE)v157 && v117 && v117[16] <= 0x14u) {
          sub_1CC05E6A4((uint64_t)v155 + 8, (uint64_t)v117, 0);
        }
        if ((*v119 & 0xFE) == 4)
        {
          sub_1CC067A30((unint64_t *)&v177, (unint64_t)v118 + 16);
        }
        else
        {
          int v120 = *(llvm::Type **)v117;
          if ((*(_DWORD *)(*(void *)v117 + 8) & 0xFE) == 0x12) {
            int v120 = (llvm::Type *)**((void **)v120 + 2);
          }
          unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v120);
          unsigned int v208 = PrimitiveSizeInBits;
          if (PrimitiveSizeInBits > 0x40) {
            operator new[]();
          }
          uint64_t v122 = (llvm::CallBase *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
          if (!PrimitiveSizeInBits) {
            uint64_t v122 = 0;
          }
          uint64_t v207 = v122;
          unsigned int v210 = PrimitiveSizeInBits;
          unsigned int v209 = v122;
          sub_1CCD50670((unint64_t *)&v177, (unint64_t)&v207);
          if (v210 >= 0x41 && v209) {
            MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
          }
          if (v208 >= 0x41 && v207) {
            MEMORY[0x1D25D9CB0](v207, 0x1000C8000313F17);
          }
        }
        v114 += 4;
      }
      while (v114 != v116);
      int v10 = *(_DWORD *)(*(void *)v8 + 36);
      unsigned int v123 = (const void **)v177;
    }
    llvm::ConstantRange::intrinsic(v123, v10, (unint64_t *)&v155);
    unsigned int v124 = v156;
    if (v156 > 0x40) {
      operator new[]();
    }
    uint64_t v125 = v155;
    unsigned int v126 = v158;
    if (v158 > 0x40) {
      operator new[]();
    }
    unint64_t v127 = v157;
    if (v155 == v157 && (!v156 || (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v156) == v155))
    {
      __int16 v172 = 6;
    }
    else
    {
      __int16 v172 = 0;
      if ((unint64_t)v157 | (unint64_t)v155)
      {
        unsigned int v208 = v156;
        uint64_t v207 = (llvm::CallBase *)v155;
        unsigned int v210 = v158;
        unsigned int v209 = v157;
        sub_1CC05E860(&v172, (uint64_t)&v207, 0x100000000);
        if (v210 >= 0x41 && v209) {
          MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
        }
        if (v208 >= 0x41 && v207) {
          MEMORY[0x1D25D9CB0](v207, 0x1000C8000313F17);
        }
        unsigned int v124 = 0;
        unsigned int v126 = 0;
      }
    }
    sub_1CD1F658C((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&v172, 0x100000000);
    if ((v172 & 0xFE) == 4)
    {
      if (v176 >= 0x41 && v175) {
        MEMORY[0x1D25D9CB0](v175, 0x1000C8000313F17);
      }
      if (v174 >= 0x41 && v173) {
        MEMORY[0x1D25D9CB0](v173, 0x1000C8000313F17);
      }
    }
    if (v126 >= 0x41 && v127) {
      MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
    }
    if (v124 >= 0x41 && v125) {
      MEMORY[0x1D25D9CB0](v125, 0x1000C8000313F17);
    }
    if (v158 >= 0x41 && v157) {
      MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
    }
    if (v156 >= 0x41 && v155) {
      MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
    }
    uint64_t v128 = (char *)v177;
    if (DWORD2(v177))
    {
      uint64_t v129 = 32 * DWORD2(v177);
      do
      {
        uint64_t v130 = &v128[v129];
        if (*(_DWORD *)&v128[v129 - 8] >= 0x41u)
        {
          uint64_t v131 = *((void *)v130 - 2);
          if (v131) {
            MEMORY[0x1D25D9CB0](v131, 0x1000C8000313F17);
          }
        }
        if (*((_DWORD *)v130 - 6) >= 0x41u)
        {
          uint64_t v132 = *((void *)v130 - 4);
          if (v132) {
            MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
          }
        }
        v129 -= 32;
      }
      while (v129);
      uint64_t v128 = (char *)v177;
    }
    if (v128 != (char *)&v178) {
      free(v128);
    }
  }
  else
  {
LABEL_25:
    if (*(void *)(v7 + 72) == v7 + 72 && (*(unsigned char *)(v7 + 34) & 0x80) == 0) {
      goto LABEL_4;
    }
    uint64_t v23 = **(void **)(v9 + 16);
    if (v23) {
      BOOL v24 = *(unsigned char *)(v23 + 8) == 16;
    }
    else {
      BOOL v24 = 0;
    }
    if (v24)
    {
      uint64_t v28 = *((void *)this + 38);
      uint64_t v27 = *((void *)this + 39);
      if (v27 == v28)
      {
        uint64_t v29 = *((unsigned int *)this + 81);
        unsigned int v30 = (void *)(v27 + 8 * v29);
        if (v29)
        {
          uint64_t v31 = 0;
          uint64_t v32 = 8 * v29;
          while (*(void *)(v27 + v31) != v7)
          {
            v31 += 8;
            if (v32 == v31) {
              goto LABEL_59;
            }
          }
          unsigned int v30 = (void *)(v27 + v31);
        }
LABEL_59:
        uint64_t v28 = *((void *)this + 39);
      }
      else
      {
        uint64_t v33 = *((unsigned int *)this + 80);
        int v34 = v33 - 1;
        unsigned int v35 = (v33 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        unsigned int v30 = (void *)(v27 + 8 * v35);
        uint64_t v36 = *v30;
        if (*v30 == -1)
        {
          uint64_t v37 = 0;
LABEL_115:
          if (v37) {
            unsigned int v30 = v37;
          }
          if (*v30 != v7) {
            unsigned int v30 = (void *)(v27 + 8 * v33);
          }
        }
        else
        {
          uint64_t v37 = 0;
          int v38 = 1;
          while (v36 != v7)
          {
            if (v37) {
              BOOL v39 = 0;
            }
            else {
              BOOL v39 = v36 == -2;
            }
            if (v39) {
              uint64_t v37 = v30;
            }
            unsigned int v40 = v35 + v38++;
            unsigned int v35 = v40 & v34;
            unsigned int v30 = (void *)(v27 + 8 * (v40 & v34));
            uint64_t v36 = *v30;
            if (*v30 == -1) {
              goto LABEL_115;
            }
          }
        }
      }
      BOOL v21 = v27 == v28;
      uint64_t v41 = 320;
      if (v21) {
        uint64_t v41 = 324;
      }
      if (v30 == (void *)(v27 + 8 * *(unsigned int *)((char *)this + v41))) {
        goto LABEL_4;
      }
      unint64_t v42 = (llvm::Type *)*(unsigned int *)(v23 + 12);
      if (v42)
      {
        for (uint64_t i = 0; i != v42; uint64_t i = (llvm::Type *)((char *)i + 1))
        {
          uint64_t v44 = sub_1CD1F721C((uint64_t)this, a2, i);
          *(void *)&long long v177 = v7;
          *((void *)&v177 + 1) = i;
          unsigned int v45 = (unsigned __int8 *)sub_1CD1F6FA4((uint64_t)this + 256, &v177);
          __int16 v167 = *v45;
          int v46 = *v45;
          if ((v46 - 4) < 2)
          {
            unsigned int v169 = *((_DWORD *)v45 + 4);
            if (v169 > 0x40) {
              operator new[]();
            }
            uint64_t v168 = *((void *)v45 + 1);
            unsigned int v171 = *((_DWORD *)v45 + 8);
            if (v171 > 0x40) {
              operator new[]();
            }
            uint64_t v170 = *((void *)v45 + 3);
            HIBYTE(v167) = v45[1];
          }
          else if ((v46 - 2) < 2)
          {
            uint64_t v168 = *((void *)v45 + 1);
          }
          if (sub_1CC061B28((uint64_t)v44, (unsigned __int8 *)&v167, 0xA00000100))
          {
            if (*(unsigned char *)v44 == 6)
            {
              unint64_t v47 = *((unsigned int *)this + 198);
              if (v47 >= *((unsigned int *)this + 199)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unint64_t v48 = (char *)this + 784;
              unsigned int v49 = (char *)this + 792;
            }
            else
            {
              unint64_t v47 = *((unsigned int *)this + 330);
              if (v47 >= *((unsigned int *)this + 331)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v49 = (char *)this + 1320;
              unint64_t v48 = (char *)this + 1312;
            }
            *(void *)(*(void *)v48 + 8 * v47) = a2;
            ++*(_DWORD *)v49;
          }
          if ((v167 & 0xFE) == 4)
          {
            if (v171 >= 0x41 && v170) {
              MEMORY[0x1D25D9CB0](v170, 0x1000C8000313F17);
            }
            if (v169 >= 0x41 && v168) {
              MEMORY[0x1D25D9CB0](v168, 0x1000C8000313F17);
            }
          }
        }
      }
    }
    else
    {
      uint64_t v25 = sub_1CD1F6F30((uint64_t)this + 208, *((void *)a2 - 4));
      if (*((void *)this + 30) == v25) {
        goto LABEL_4;
      }
      int v26 = *(unsigned __int8 *)(v25 + 8);
      __int16 v162 = *(unsigned __int8 *)(v25 + 8);
      if ((v26 - 4) < 2)
      {
        LODWORD(v8) = *(_DWORD *)(v25 + 24);
        int v164 = (int)v8;
        if (v8 > 0x40) {
          operator new[]();
        }
        uint64_t v7 = *(void *)(v25 + 16);
        uint64_t v163 = v7;
        unsigned int v4 = *(_DWORD *)(v25 + 40);
        unsigned int v166 = v4;
        if (v4 > 0x40) {
          operator new[]();
        }
        uint64_t v3 = *(void *)(v25 + 32);
        uint64_t v165 = v3;
        LOWORD(v26) = v26 | (*(unsigned __int8 *)(v25 + 9) << 8);
        __int16 v162 = v26;
      }
      else if ((v26 - 2) < 2)
      {
        uint64_t v7 = *(void *)(v25 + 16);
        uint64_t v163 = v7;
      }
      sub_1CD1F658C((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&v162, 0xA00000100);
      if ((v26 & 0xFE) == 4)
      {
        if (v4 >= 0x41 && v3) {
          MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
        }
        if (v8 >= 0x41 && v7)
        {
          JUMPOUT(0x1D25D9CB0);
        }
      }
    }
  }
}

void llvm::SCCPInstVisitor::handleCallArguments(llvm::SCCPInstVisitor *this, llvm::CallBase *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 - 4);
  if (!v4 || *(unsigned char *)(v4 + 16) || *(void *)(v4 + 24) != *((void *)a2 + 9)) {
    uint64_t v4 = 0;
  }
  uint64_t v49 = v4;
  uint64_t v5 = *((unsigned int *)this + 161);
  if (v5 == *((_DWORD *)this + 162)) {
    return;
  }
  uint64_t v6 = *((void *)this + 79);
  uint64_t v7 = *((void *)this + 78);
  if (v6 == v7)
  {
    unsigned int v8 = (void *)(v6 + 8 * v5);
    if (v5)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v5;
      while (*(void *)(v6 + v9) != v49)
      {
        v9 += 8;
        if (v10 == v9) {
          goto LABEL_24;
        }
      }
      unsigned int v8 = (void *)(v6 + v9);
    }
LABEL_24:
    uint64_t v7 = *((void *)this + 79);
  }
  else
  {
    uint64_t v11 = *((unsigned int *)this + 160);
    int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((v49 >> 4) ^ (v49 >> 9));
    unsigned int v8 = (void *)(v6 + 8 * v13);
    uint64_t v14 = *v8;
    if (*v8 == -1)
    {
      int v15 = 0;
LABEL_110:
      if (v15) {
        unsigned int v8 = v15;
      }
      if (*v8 != v49) {
        unsigned int v8 = (void *)(v6 + 8 * v11);
      }
    }
    else
    {
      int v15 = 0;
      int v16 = 1;
      while (v14 != v49)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          int v15 = v8;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        unsigned int v8 = (void *)(v6 + 8 * (v18 & v12));
        uint64_t v14 = *v8;
        if (*v8 == -1) {
          goto LABEL_110;
        }
      }
    }
  }
  BOOL v17 = v6 == v7;
  uint64_t v19 = 640;
  if (v17) {
    uint64_t v19 = 644;
  }
  if (v8 == (void *)(v6 + 8 * *(unsigned int *)((char *)this + v19))) {
    return;
  }
  uint64_t v20 = *(void *)(v49 + 80);
  if (v20) {
    BOOL v21 = (llvm::BasicBlock *)(v20 - 24);
  }
  else {
    BOOL v21 = 0;
  }
  llvm::SCCPInstVisitor::markBlockExecutable(this, v21);
  int v22 = *((_DWORD *)a2 + 5);
  if ((*(_WORD *)(v49 + 18) & 1) == 0)
  {
    uint64_t v23 = *(llvm::Constant **)(v49 + 88);
LABEL_34:
    BOOL v24 = v23;
    goto LABEL_36;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v49);
  uint64_t v23 = *(llvm::Constant **)(v49 + 88);
  if ((*(_WORD *)(v49 + 18) & 1) == 0) {
    goto LABEL_34;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v49);
  BOOL v24 = *(llvm::Constant **)(v49 + 88);
LABEL_36:
  uint64_t v25 = (llvm::Constant *)((char *)v24 + 40 * *(void *)(v49 + 96));
  if (v23 != v25)
  {
    unsigned int v47 = 0;
    unsigned int v48 = 0;
    for (uint64_t i = (llvm::Constant **)((char *)a2 - 32 * (v22 & 0x7FFFFFF)); ; i += 4)
    {
      int v27 = *(unsigned __int8 *)(*(void *)v23 + 8);
      if (v27 != 15) {
        break;
      }
      uint64_t v28 = *(void *)(*((void *)v23 + 3) + 112);
      if (!v28) {
        goto LABEL_41;
      }
      unsigned int v29 = *((_DWORD *)v23 + 8) + 2;
      if (v29 >= *(_DWORD *)(v28 + 8)) {
        goto LABEL_41;
      }
      uint64_t v34 = *(void *)(v28 + 8 * v29 + 40);
      if (!v34) {
        goto LABEL_41;
      }
      if ((*(unsigned char *)(v34 + 20) & 0x20) == 0) {
        goto LABEL_41;
      }
      uint64_t v35 = *(void *)(v49 + 112);
      if (v35)
      {
        if ((*(unsigned char *)(v35 + 17) & 0x30) != 0) {
          goto LABEL_41;
        }
      }
      sub_1CD1F4CA8((BOOL)this, (uint64_t)v23);
LABEL_52:
      uint64_t v23 = (llvm::Constant *)((char *)v23 + 40);
      if (v23 == v25) {
        return;
      }
    }
    if (v27 == 16)
    {
      int __n = *(_DWORD *)(*(void *)v23 + 12);
      if (__n)
      {
        uint64_t v36 = 0;
        do
        {
          uint64_t v37 = sub_1CD1F721C((uint64_t)this, *i, v36);
          int v38 = *(unsigned __int8 *)v37;
          if ((v38 - 4) < 2)
          {
            unsigned int v48 = *((_DWORD *)v37 + 4);
            if (v48 > 0x40) {
              operator new[]();
            }
            int __src = (void *)*((void *)v37 + 1);
            unsigned int v47 = *((_DWORD *)v37 + 8);
            if (v47 > 0x40) {
              operator new[]();
            }
            uint64_t v44 = (void *)*((void *)v37 + 3);
            __int16 v39 = v38 | (*((unsigned __int8 *)v37 + 1) << 8);
          }
          else
          {
            if ((v38 - 2) < 2) {
              int __src = (void *)*((void *)v37 + 1);
            }
            __int16 v39 = *(unsigned __int8 *)v37;
          }
          unsigned int v40 = sub_1CD1F721C((uint64_t)this, v23, v36);
          *(_WORD *)__int16 v57 = v38;
          if (v39 - 4 < 2)
          {
            unsigned int v59 = v48;
            uint64_t v58 = __src;
            unsigned int v61 = v47;
            uint64_t v60 = v44;
            *(_WORD *)__int16 v57 = v57[0] | v39 & 0xFF00;
          }
          else if (v39 - 2 < 2)
          {
            uint64_t v58 = __src;
          }
          if (sub_1CC061B28((uint64_t)v40, v57, 0xA00000100))
          {
            if (*(unsigned char *)v40 == 6)
            {
              unint64_t v41 = *((unsigned int *)this + 198);
              if (v41 >= *((unsigned int *)this + 199)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unint64_t v42 = (char *)this + 792;
              unsigned int v43 = (char *)this + 784;
            }
            else
            {
              unint64_t v41 = *((unsigned int *)this + 330);
              if (v41 >= *((unsigned int *)this + 331)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unint64_t v42 = (char *)this + 1320;
              unsigned int v43 = (char *)this + 1312;
            }
            *(void *)(*(void *)v43 + 8 * v41) = v23;
            ++*(_DWORD *)v42;
          }
          if ((v57[0] & 0xFE) == 4)
          {
            if (v61 >= 0x41 && v60) {
              MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
            }
            if (v59 >= 0x41 && v58) {
              MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
            }
          }
          uint64_t v36 = (llvm::Type *)(v36 + 1);
        }
        while (__n != v36);
      }
      goto LABEL_52;
    }
LABEL_41:
    unsigned int v30 = *i;
    __int16 v62 = *i;
    *(_WORD *)uint64_t v63 = 0;
    sub_1CD203594((uint64_t)&v50, (uint64_t)this + 136, (uint64_t *)&v62, v63);
    if ((v63[0] & 0xFE) == 4)
    {
      if (v67 >= 0x41 && v66) {
        MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
      }
      if (v65 >= 0x41 && v64) {
        MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
      }
    }
    uint64_t v31 = v50;
    uint64_t v32 = (unsigned __int8 *)(v50 + 8);
    if (v51 && v30 && *((unsigned __int8 *)v30 + 16) <= 0x14u) {
      sub_1CC05E6A4(v50 + 8, (uint64_t)v30, 0);
    }
    int v33 = *v32;
    *(_WORD *)unint64_t v52 = *v32;
    if ((v33 - 4) < 2)
    {
      unsigned int v54 = *(_DWORD *)(v31 + 24);
      if (v54 > 0x40) {
        operator new[]();
      }
      uint64_t v53 = *(void *)(v31 + 16);
      unsigned int v56 = *(_DWORD *)(v31 + 40);
      if (v56 > 0x40) {
        operator new[]();
      }
      uint64_t v55 = *(void *)(v31 + 32);
      LOWORD(v33) = v33 | (v32[1] << 8);
      *(_WORD *)unint64_t v52 = v33;
    }
    else if ((v33 - 2) < 2)
    {
      uint64_t v53 = *(void *)(v31 + 16);
    }
    sub_1CD1F658C((uint64_t)this, (uint64_t)v23, v52, 0xA00000100);
    if ((v33 & 0xFE) == 4)
    {
      if (v56 >= 0x41 && v55) {
        MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
      }
      if (v54 >= 0x41)
      {
        if (v53) {
          MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
        }
      }
    }
    goto LABEL_52;
  }
}

void llvm::SCCPInstVisitor::handleCallOverdefined(llvm::SCCPInstVisitor *this, llvm::CallBase *a2, const llvm::Function *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
    uint64_t v5 = 0;
  }
  int v6 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if (v6 == 7) {
    return;
  }
  if (v6 == 16)
  {
    sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
    return;
  }
  if (!v5) {
    goto LABEL_58;
  }
  if (*(unsigned char *)(v5 + 16) == 3)
  {
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 0) {
      goto LABEL_58;
    }
  }
  else if (*(unsigned char *)(v5 + 16) || *(void *)(v5 + 72) != v5 + 72 || (*(unsigned char *)(v5 + 34) & 0x80) != 0)
  {
LABEL_58:
    sub_1CD1FD160((uint64_t)v39, (llvm::ConstantPointerNull **)a2);
    sub_1CD1F658C((uint64_t)this, (uint64_t)a2, v39, 0x100000000);
    if ((v39[0] & 0xFE) == 4)
    {
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      if (v41 >= 0x41)
      {
        if (v40) {
          MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
        }
      }
    }
    return;
  }
  if (!llvm::canConstantFoldCallTo(a2, (const llvm::CallBase *)v5, a3)) {
    goto LABEL_58;
  }
  uint64_t v44 = v46;
  uint64_t v45 = 0x800000000;
  int v7 = *((_DWORD *)a2 + 5);
  uint64_t v8 = v7 & 0x7FFFFFF;
  int v9 = *((unsigned __int8 *)a2 + 16);
  if (v9 == 84)
  {
    uint64_t v10 = 0;
  }
  else if (v9 == 39)
  {
    uint64_t v10 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    uint64_t v10 = 2;
  }
  uint64_t v11 = (llvm::CallBase *)((char *)a2 - 32 * v8);
  if (v7 < 0 && (uint64_t v32 = *((void *)v11 - 1), (v32 & 0xFFFFFFFF0) != 0)) {
    uint64_t v12 = (*((_DWORD *)v11 - 3) - *(_DWORD *)((char *)v11 - v32));
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11 != (llvm::CallBase *)((char *)a2 + -32 * v12 + -32 * v10 - 32))
  {
    uint64_t v13 = -32 * v8;
    unint64_t v35 = (32 * v10 + 32 * v12) ^ 0xFFFFFFFFFFFFFFE0;
    while (1)
    {
      uint64_t v14 = *(unsigned __int8 **)((char *)a2 + v13);
      if (*(unsigned char *)(*(void *)v14 + 8) == 16) {
        goto LABEL_89;
      }
      unsigned int v47 = *(llvm::CallBase **)((char *)a2 + v13);
      LOWORD(v48) = 0;
      sub_1CD203594((uint64_t)&__s2, (uint64_t)this + 136, (uint64_t *)&v47, (unsigned __int8 *)&v48);
      if ((v48 & 0xFE) == 4) {
        sub_1CC05EB8C((uint64_t)&v49);
      }
      int v15 = __s2;
      int v16 = (unsigned __int8 *)__s2 + 8;
      if (v38 && v14[16] <= 0x14u) {
        sub_1CC05E6A4((uint64_t)__s2 + 8, (uint64_t)v14, 0);
      }
      int v17 = *v16;
      LOWORD(v47) = *v16;
      if ((v17 - 4) < 2)
      {
        unsigned int v49 = v15[6];
        if (v49 > 0x40) {
          operator new[]();
        }
        unsigned int v48 = (void *)*((void *)v15 + 2);
        unsigned int v51 = v15[10];
        if (v51 > 0x40) {
          operator new[]();
        }
        uint64_t v50 = (void *)*((void *)v15 + 4);
        LOBYTE(v17) = (_BYTE)v47;
        LOWORD(v47) = v47 | (v16[1] << 8);
      }
      else if ((v17 - 2) < 2)
      {
        unsigned int v48 = (void *)*((void *)v15 + 2);
      }
      if ((v17 & 0xFE) == 0) {
        goto LABEL_31;
      }
      if (v17 != 2)
      {
        if ((v17 & 0xFE) != 4) {
          break;
        }
        unsigned int v37 = v49;
        if (v49 > 0x40) {
          operator new[]();
        }
        __s2 = v48;
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v27 = v37;
        uint64_t v28 = __s2;
        unsigned int v37 = 0;
        if (v51 > 0x40) {
          BOOL v29 = memcmp(v50, __s2, (((unint64_t)v51 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v29 = v50 == __s2;
        }
        char v30 = v29;
        if (v27 >= 0x41)
        {
          if (v28)
          {
            MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
            if (v37 >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if ((v30 & 1) == 0) {
          break;
        }
      }
      unint64_t Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v47);
      if (v45 >= (unint64_t)HIDWORD(v45)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v44 + v45) = Constant;
      LODWORD(v45) = v45 + 1;
      char v18 = 1;
LABEL_32:
      if ((v47 & 0xFE) == 4)
      {
        if (v51 >= 0x41 && v50) {
          MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
        }
        if (v49 >= 0x41 && v48) {
          MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
        }
      }
      if ((v18 & 1) == 0) {
        goto LABEL_53;
      }
      v13 += 32;
      if (v35 == v13) {
        goto LABEL_42;
      }
    }
    sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
LABEL_31:
    char v18 = 0;
    goto LABEL_32;
  }
LABEL_42:
  unsigned int v47 = a2;
  LOWORD(v48) = 0;
  sub_1CD203594((uint64_t)&__s2, (uint64_t)this + 136, (uint64_t *)&v47, (unsigned __int8 *)&v48);
  if ((v48 & 0xFE) == 4) {
    sub_1CC05EB8C((uint64_t)&v49);
  }
  uint64_t v19 = __s2;
  uint64_t v20 = (char *)__s2 + 8;
  if (v38 && *((unsigned __int8 *)a2 + 16) <= 0x14u) {
    sub_1CC05E6A4((uint64_t)__s2 + 8, (uint64_t)a2, 0);
  }
  if ((*v20 & 0xFE) != 0 && *v20 != 2 && ((*v20 & 0xFE) != 4 || !sub_1CC058CAC((uint64_t)v19 + 16)))
  {
LABEL_89:
    sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
LABEL_53:
    int v26 = 0;
    goto LABEL_54;
  }
  uint64_t v21 = *((void *)this + 4);
  if (!v21)
  {
    sub_1CB920400();
    sub_1CD200A6C(v33, v34);
    return;
  }
  unint64_t v22 = v45;
  uint64_t v23 = v44;
  BOOL v24 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v5);
  uint64_t v25 = llvm::ConstantFoldCall((uint64_t)a2, (uint64_t ***)v5, (uint64_t)v23, v22, v24);
  if (v25)
  {
    if (*((unsigned __int8 *)v25 + 16) - 11 >= 2) {
      sub_1CD1F4B3C((uint64_t)this, (uint64_t)a2, (uint64_t)v25);
    }
    goto LABEL_53;
  }
  int v26 = 1;
LABEL_54:
  if (v44 != v46) {
    free(v44);
  }
  if (v26) {
    goto LABEL_58;
  }
}

uint64_t sub_1CD200A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *(void *)(*(void *)(a2 + 40) + 56);
  uint64_t v10 = 0;
  char v4 = sub_1CD203AA4((uint64_t *)(a1 + 2392), &v9, &v10);
  uint64_t v5 = v10;
  if ((v4 & 1) == 0) {
    uint64_t v5 = *(void *)(a1 + 2392) + 32 * *(unsigned int *)(a1 + 2408);
  }
  if (v5 == *(void *)(a1 + 2392) + 32 * *(unsigned int *)(a1 + 2408)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5 + 8) + 24;
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  int v7 = sub_1CBA0E618(v6, &v10, &v9);
  uint64_t result = 0;
  if (v7) {
    return *(void *)(v9 + 8);
  }
  return result;
}

void sub_1CD200B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = 0;
  int v5 = sub_1CD203B40(*(void *)(a1 + 2416), *(_DWORD *)(a1 + 2432), a2, &v25);
  uint64_t v6 = v25;
  if (v5) {
    goto LABEL_2;
  }
  unsigned int v22 = *(_DWORD *)(a1 + 2432);
  int v23 = *(_DWORD *)(a1 + 2424);
  if (4 * v23 + 4 >= 3 * v22)
  {
    v22 *= 2;
    goto LABEL_47;
  }
  if (v22 + ~v23 - *(_DWORD *)(a1 + 2428) <= v22 >> 3)
  {
LABEL_47:
    sub_1CD203BD8(a1 + 2416, v22);
    uint64_t v25 = 0;
    sub_1CD203B40(*(void *)(a1 + 2416), *(_DWORD *)(a1 + 2432), a2, &v25);
    uint64_t v6 = v25;
  }
  ++*(_DWORD *)(a1 + 2424);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 2428);
  }
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = v6 + 40;
  *(void *)(v6 + 16) = v6 + 40;
  *(_DWORD *)(v6 + 24) = 2;
  *(_DWORD *)(v6 + 28) = 0;
  *(_DWORD *)(v6 + 32) = 0;
LABEL_2:
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(unsigned int *)(v6 + 28);
  if (v7 != *(void *)(v6 + 8))
  {
    unsigned int v12 = *(_DWORD *)(v6 + 24);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_10:
    unsigned int v12 = *(_DWORD *)(v6 + 24);
    if (v8 < v12)
    {
      *(_DWORD *)(v6 + 28) = v8 + 1;
      *(void *)(v7 + 8 * v8) = a3;
      return;
    }
LABEL_14:
    if (3 * v12 <= 4 * ((int)v8 - *(_DWORD *)(v6 + 32)))
    {
      if (v12 >= 0x40) {
        v12 *= 2;
      }
      else {
        unsigned int v12 = 128;
      }
    }
    else if (v12 - v8 >= v12 >> 3)
    {
      goto LABEL_16;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v6 + 8), v12);
    unsigned int v12 = *(_DWORD *)(v6 + 24);
    uint64_t v7 = *(void *)(v6 + 16);
LABEL_16:
    unsigned int v13 = v12 - 1;
    unsigned int v14 = (v12 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    int v15 = (void *)(v7 + 8 * v14);
    uint64_t v16 = *v15;
    if (*v15 == -1)
    {
      int v17 = 0;
LABEL_28:
      if (v17) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = v15;
      }
      if (*v21 != a3)
      {
        if (*v21 == -2) {
          --*(_DWORD *)(v6 + 32);
        }
        else {
          ++*(_DWORD *)(v6 + 28);
        }
        *uint64_t v21 = a3;
      }
    }
    else
    {
      int v17 = 0;
      int v18 = 1;
      while (v16 != a3)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == -2;
        }
        if (v19) {
          int v17 = v15;
        }
        unsigned int v20 = v14 + v18++;
        unsigned int v14 = v20 & v13;
        int v15 = (void *)(v7 + 8 * (v20 & v13));
        uint64_t v16 = *v15;
        if (*v15 == -1) {
          goto LABEL_28;
        }
      }
    }
    return;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 8 * v8;
  uint64_t v11 = *(void **)(v6 + 16);
  while (*v11 != a3)
  {
    if (*v11 == -2) {
      uint64_t v9 = v11;
    }
    ++v11;
    v10 -= 8;
    if (!v10)
    {
      if (!v9) {
        goto LABEL_10;
      }
      *uint64_t v9 = a3;
      --*(_DWORD *)(v6 + 32);
      return;
    }
  }
}

void llvm::SCCPInstVisitor::solve(llvm::SCCPInstVisitor *this, uint64_t a2, const llvm::Function *a3)
{
  uint64_t v20[4] = *MEMORY[0x1E4F143B8];
  char v4 = (char *)this + 136;
  if (!*((_DWORD *)this + 462)) {
    goto LABEL_21;
  }
  unsigned int v5 = *((_DWORD *)this + 198);
  do
  {
    for (; v5; unsigned int v5 = *((_DWORD *)this + 198))
    {
LABEL_23:
      uint64_t v15 = *(void *)(*((void *)this + 98) + 8 * v5 - 8);
      *((_DWORD *)this + 198) = v5 - 1;
      sub_1CD200FCC(this, v15, a3);
    }
    while (1)
    {
      unsigned int v6 = *((_DWORD *)this + 330);
      if (!v6) {
        break;
      }
      uint64_t v7 = *(unsigned __int8 **)(*((void *)this + 164) + 8 * v6 - 8);
      *((_DWORD *)this + 330) = v6 - 1;
      if (*(unsigned char *)(*(void *)v7 + 8) != 16)
      {
        int v18 = v7;
        *(_WORD *)BOOL v19 = 0;
        sub_1CD203594((uint64_t)&v16, (uint64_t)v4, (uint64_t *)&v18, v19);
        if ((v19[0] & 0xFE) == 4) {
          sub_1CC05EB8C((uint64_t)v20);
        }
        uint64_t v8 = (unsigned char *)(v16 + 8);
        if (v17)
        {
          if (v7[16] <= 0x14u) {
            sub_1CC05E6A4(v16 + 8, (uint64_t)v7, 0);
          }
        }
        if (*v8 == 6) {
          continue;
        }
      }
      sub_1CD200FCC(this, (uint64_t)v7, a3);
    }
    unsigned int v9 = *((_DWORD *)this + 462);
    while (v9)
    {
      uint64_t v10 = *(void *)(*((void *)this + 230) + 8 * v9-- - 8);
      *((_DWORD *)this + 462) = v9;
      uint64_t v11 = v10 + 40;
      uint64_t v12 = *(void *)(v10 + 48);
      if (v12 != v11)
      {
        do
        {
          uint64_t v13 = *(void *)(v12 + 8);
          if (v12) {
            unsigned int v14 = (llvm::CallBase *)(v12 - 24);
          }
          else {
            unsigned int v14 = 0;
          }
          sub_1CD203DDC(this, v14, a3);
          uint64_t v12 = v13;
        }
        while (v13 != v11);
        unsigned int v9 = *((_DWORD *)this + 462);
      }
    }
LABEL_21:
    unsigned int v5 = *((_DWORD *)this + 198);
  }
  while (*((_DWORD *)this + 330));
  if (v5) {
    goto LABEL_23;
  }
}

void sub_1CD200FCC(llvm::SCCPInstVisitor *this, uint64_t a2, const llvm::Function *a3)
{
  void v69[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v5)
    {
      unsigned int v6 = (unsigned int *)((char *)this + 60);
      uint64_t v7 = (unsigned int *)((char *)this + 56);
      do
      {
        uint64_t v8 = *(void *)(v5 + 24);
        if (v8) {
          BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9)
        {
          uint64_t v10 = *(void *)(v8 + 40);
          uint64_t v12 = *((void *)this + 5);
          uint64_t v11 = *((void *)this + 6);
          if (v11 == v12)
          {
            uint64_t v13 = *v6;
            unsigned int v14 = (void *)(v11 + 8 * v13);
            if (v13)
            {
              uint64_t v15 = 0;
              uint64_t v16 = 8 * v13;
              while (*(void *)(v11 + v15) != v10)
              {
                v15 += 8;
                if (v16 == v15) {
                  goto LABEL_27;
                }
              }
              unsigned int v14 = (void *)(v11 + v15);
            }
LABEL_27:
            uint64_t v12 = *((void *)this + 6);
          }
          else
          {
            uint64_t v17 = *v7;
            int v18 = v17 - 1;
            unsigned int v19 = (v17 - 1) & ((v10 >> 4) ^ (v10 >> 9));
            unsigned int v14 = (void *)(v11 + 8 * v19);
            uint64_t v20 = *v14;
            if (*v14 == -1)
            {
              uint64_t v21 = 0;
LABEL_36:
              if (v21) {
                unsigned int v14 = v21;
              }
              if (*v14 != v10) {
                unsigned int v14 = (void *)(v11 + 8 * v17);
              }
            }
            else
            {
              uint64_t v21 = 0;
              int v22 = 1;
              while (v20 != v10)
              {
                if (v21) {
                  BOOL v23 = 0;
                }
                else {
                  BOOL v23 = v20 == -2;
                }
                if (v23) {
                  uint64_t v21 = v14;
                }
                unsigned int v24 = v19 + v22++;
                unsigned int v19 = v24 & v18;
                unsigned int v14 = (void *)(v11 + 8 * (v24 & v18));
                uint64_t v20 = *v14;
                if (*v14 == -1) {
                  goto LABEL_36;
                }
              }
            }
          }
          if (v11 == v12) {
            uint64_t v25 = (char *)this + 60;
          }
          else {
            uint64_t v25 = (char *)this + 56;
          }
          if (v14 != (void *)(v11 + 8 * *(unsigned int *)v25)) {
            sub_1CD203DDC(this, (llvm::CallBase *)v8, a3);
          }
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5);
    }
  }
  else
  {
    for (; v5; uint64_t v5 = *(void *)(v5 + 8))
    {
      int v26 = *(unsigned __int8 **)(v5 + 24);
      unsigned int v27 = v26[16];
      if (v27 >= 0x1C)
      {
        unsigned int v28 = v27 - 33;
        BOOL v29 = v28 > 0x33;
        uint64_t v30 = (1 << v28) & 0x8000000000041;
        if (!v29 && v30 != 0) {
          llvm::SCCPInstVisitor::handleCallResult(this, (llvm::CallBase *)v26, a3);
        }
      }
    }
  }
  uint64_t v32 = *((void *)this + 302);
  unsigned int v33 = *((_DWORD *)this + 608);
  if (!v33) {
    goto LABEL_49;
  }
  unsigned int v63 = v33 - 1;
  unsigned int v64 = (v33 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v34 = (uint64_t *)(v32 + 56 * v64);
  uint64_t v65 = *v34;
  if (*v34 != a2)
  {
    int v66 = 1;
    while (v65 != -4096)
    {
      unsigned int v67 = v64 + v66++;
      unsigned int v64 = v67 & v63;
      uint64_t v34 = (uint64_t *)(v32 + 56 * (v67 & v63));
      uint64_t v65 = *v34;
      if (*v34 == a2) {
        goto LABEL_50;
      }
    }
LABEL_49:
    uint64_t v34 = (uint64_t *)(v32 + 56 * v33);
  }
LABEL_50:
  if ((uint64_t *)(v32 + 56 * v33) != v34)
  {
    int v68 = 0;
    unint64_t v35 = (unint64_t *)v34[2];
    uint64_t v36 = 24;
    if (v35 == (unint64_t *)v34[1]) {
      uint64_t v36 = 28;
    }
    uint64_t v37 = *(unsigned int *)((char *)v34 + v36);
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      for (uint64_t i = v35; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v38 -= 8;
        if (!v38) {
          return;
        }
      }
    }
    else
    {
      uint64_t i = (unint64_t *)v34[2];
    }
    uint64_t v40 = &v35[v37];
    if (i != v40)
    {
      unsigned int v41 = 0;
      unint64_t v42 = *i;
      if (*i)
      {
LABEL_61:
        if (*(unsigned __int8 *)(v42 + 16) >= 0x1Cu)
        {
          if (v41 >= 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v69[v41] = v42;
          unsigned int v41 = ++v68;
        }
      }
LABEL_64:
      unsigned int v43 = i + 1;
      while (v43 != v40)
      {
        unint64_t v44 = *v43++;
        unint64_t v42 = v44;
        if (v44 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t i = v43 - 1;
          if (v42) {
            goto LABEL_61;
          }
          goto LABEL_64;
        }
      }
      uint64_t v45 = (llvm::CallBase **)v69;
      if (v41)
      {
        int v46 = (llvm::CallBase **)&v69[v41];
        do
        {
          uint64_t v47 = *((void *)*v45 + 5);
          uint64_t v49 = *((void *)this + 5);
          uint64_t v48 = *((void *)this + 6);
          if (v48 == v49)
          {
            uint64_t v50 = *((unsigned int *)this + 15);
            unsigned int v51 = (void *)(v48 + 8 * v50);
            if (v50)
            {
              uint64_t v52 = 0;
              uint64_t v53 = 8 * v50;
              while (*(void *)(v48 + v52) != v47)
              {
                v52 += 8;
                if (v53 == v52) {
                  goto LABEL_90;
                }
              }
              unsigned int v51 = (void *)(v48 + v52);
            }
LABEL_90:
            uint64_t v49 = *((void *)this + 6);
          }
          else
          {
            uint64_t v54 = *((unsigned int *)this + 14);
            int v55 = v54 - 1;
            unsigned int v56 = (v54 - 1) & ((v47 >> 4) ^ (v47 >> 9));
            unsigned int v51 = (void *)(v48 + 8 * v56);
            uint64_t v57 = *v51;
            if (*v51 == -1)
            {
              uint64_t v58 = 0;
LABEL_99:
              if (v58) {
                unsigned int v51 = v58;
              }
              if (*v51 != v47) {
                unsigned int v51 = (void *)(v48 + 8 * v54);
              }
            }
            else
            {
              uint64_t v58 = 0;
              int v59 = 1;
              while (v57 != v47)
              {
                if (v58) {
                  BOOL v60 = 0;
                }
                else {
                  BOOL v60 = v57 == -2;
                }
                if (v60) {
                  uint64_t v58 = v51;
                }
                unsigned int v61 = v56 + v59++;
                unsigned int v56 = v61 & v55;
                unsigned int v51 = (void *)(v48 + 8 * (v61 & v55));
                uint64_t v57 = *v51;
                if (*v51 == -1) {
                  goto LABEL_99;
                }
              }
            }
          }
          if (v48 == v49) {
            __int16 v62 = (char *)this + 60;
          }
          else {
            __int16 v62 = (char *)this + 56;
          }
          if (v51 != (void *)(v48 + 8 * *(unsigned int *)v62)) {
            sub_1CD203DDC(this, *v45, a3);
          }
          ++v45;
        }
        while (v45 != v46);
      }
    }
  }
}

uint64_t llvm::SCCPInstVisitor::resolvedUndefsIn(llvm::SCCPInstVisitor *this, llvm::Function *a2)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (char *)*((void *)a2 + 10);
  uint64_t v121 = (char *)a2 + 72;
  if (v2 == (char *)a2 + 72)
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  int v4 = 0;
  uint64_t v5 = (unsigned int *)((char *)this + 60);
  unsigned int v6 = (unsigned int *)((char *)this + 56);
  uint64_t v117 = (unsigned int *)((char *)this + 320);
  uint64_t v118 = (unsigned int *)((char *)this + 324);
  uint64_t v122 = (char *)this + 136;
  uint64_t v119 = (char *)this + 56;
  int v120 = (char *)this + 60;
  do
  {
    if (v2) {
      uint64_t v7 = v2 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *((void *)this + 5);
    uint64_t v8 = *((void *)this + 6);
    if (v8 == v9)
    {
      uint64_t v10 = *v5;
      uint64_t v11 = (char **)(v8 + 8 * v10);
      if (v10)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v10;
        while (*(char **)(v8 + v12) != v7)
        {
          v12 += 8;
          if (v13 == v12) {
            goto LABEL_24;
          }
        }
        uint64_t v11 = (char **)(v8 + v12);
      }
LABEL_24:
      uint64_t v9 = *((void *)this + 6);
    }
    else
    {
      uint64_t v14 = *v6;
      int v15 = v14 - 1;
      unsigned int v16 = (v14 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v11 = (char **)(v8 + 8 * v16);
      uint64_t v17 = *v11;
      if (*v11 == (char *)-1)
      {
        int v18 = 0;
LABEL_138:
        if (v18) {
          uint64_t v11 = v18;
        }
        if (*v11 != v7) {
          uint64_t v11 = (char **)(v8 + 8 * v14);
        }
      }
      else
      {
        int v18 = 0;
        int v19 = 1;
        while (v17 != v7)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == (char *)-2;
          }
          if (v20) {
            int v18 = v11;
          }
          unsigned int v21 = v16 + v19++;
          unsigned int v16 = v21 & v15;
          uint64_t v11 = (char **)(v8 + 8 * (v21 & v15));
          uint64_t v17 = *v11;
          if (*v11 == (char *)-1) {
            goto LABEL_138;
          }
        }
      }
    }
    if (v8 == v9) {
      int v22 = v5;
    }
    else {
      int v22 = v6;
    }
    if (v11 == (char **)(v8 + 8 * *v22)) {
      goto LABEL_121;
    }
    BOOL v23 = v7 + 40;
    for (uint64_t i = (void *)*((void *)v7 + 6); i != v23; uint64_t i = (void *)i[1])
    {
      if (i) {
        uint64_t v25 = (unsigned __int8 *)(i - 3);
      }
      else {
        uint64_t v25 = 0;
      }
      int v26 = *(unsigned __int8 *)(*(void *)v25 + 8);
      if (v26 == 7) {
        continue;
      }
      if (v26 == 16)
      {
        int v27 = v25[16];
        BOOL v28 = (v27 - 33) > 0x33 || ((1 << (v27 - 33)) & 0x8000000000041) == 0;
        if (v28 || (uint64_t v29 = *(i - 7)) == 0 || *(unsigned char *)(v29 + 16) || *(void *)(v29 + 24) != i[6])
        {
          if ((v27 & 0xFE) == 0x5C) {
            continue;
          }
LABEL_44:
          int v30 = *(_DWORD *)(*(void *)v25 + 12);
          if (v30)
          {
            uint64_t v31 = 0;
            do
            {
              uint64_t v32 = sub_1CD1F721C((uint64_t)this, (llvm::Constant *)v25, v31);
              if ((*v32 & 0xFE) == 0)
              {
                llvm::SCCPInstVisitor::markOverdefined((uint64_t)this, (uint64_t)v32, (uint64_t)v25);
                int v4 = 1;
              }
              uint64_t v31 = (llvm::Type *)(v31 + 1);
            }
            while (v30 != v31);
          }
          continue;
        }
        uint64_t v37 = *((void *)this + 38);
        uint64_t v36 = *((void *)this + 39);
        if (v36 == v37)
        {
          uint64_t v38 = *v118;
          __int16 v39 = (void *)(v36 + 8 * v38);
          if (v38)
          {
            uint64_t v40 = 0;
            uint64_t v41 = 8 * v38;
            while (*(void *)(v36 + v40) != v29)
            {
              v40 += 8;
              if (v41 == v40) {
                goto LABEL_87;
              }
            }
            __int16 v39 = (void *)(v36 + v40);
          }
LABEL_87:
          uint64_t v37 = *((void *)this + 39);
        }
        else
        {
          uint64_t v45 = *v117;
          int v46 = v45 - 1;
          unsigned int v47 = (v45 - 1) & ((v29 >> 4) ^ (v29 >> 9));
          __int16 v39 = (void *)(v36 + 8 * v47);
          uint64_t v48 = *v39;
          if (*v39 == -1)
          {
            uint64_t v49 = 0;
LABEL_94:
            if (v49) {
              __int16 v39 = v49;
            }
            if (*v39 != v29) {
              __int16 v39 = (void *)(v36 + 8 * v45);
            }
          }
          else
          {
            uint64_t v49 = 0;
            int v50 = 1;
            while (v48 != v29)
            {
              if (v49) {
                BOOL v51 = 0;
              }
              else {
                BOOL v51 = v48 == -2;
              }
              if (v51) {
                uint64_t v49 = v39;
              }
              unsigned int v52 = v47 + v50++;
              unsigned int v47 = v52 & v46;
              __int16 v39 = (void *)(v36 + 8 * (v52 & v46));
              uint64_t v48 = *v39;
              if (*v39 == -1) {
                goto LABEL_94;
              }
            }
          }
        }
        uint64_t v53 = v118;
        if (v36 != v37) {
          uint64_t v53 = v117;
        }
        if ((v27 & 0xFE) != 0x5C && v39 == (void *)(v36 + 8 * *v53)) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v125 = (uint64_t)v25;
        LOWORD(v126) = 0;
        sub_1CD203594((uint64_t)v123, (uint64_t)v122, &v125, (unsigned __int8 *)&v126);
        if ((v126 & 0xFE) == 4)
        {
          if (v130 >= 0x41 && v129) {
            MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
          }
          if (v128 >= 0x41 && v127) {
            MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
          }
        }
        unsigned int v33 = (_WORD *)(v123[0] + 8);
        if (v124 && i && v25[16] <= 0x14u) {
          sub_1CC05E6A4(v123[0] + 8, (uint64_t)v25, 0);
        }
        if ((*v33 & 0xFE) == 0)
        {
          int v34 = v25[16];
          if ((v34 - 33) <= 0x33 && ((1 << (v34 - 33)) & 0x8000000000041) != 0)
          {
            uint64_t v35 = *(i - 7);
            if (v35)
            {
              if (!*(unsigned char *)(v35 + 16) && *(void *)(v35 + 24) == i[6])
              {
                uint64_t v125 = 0;
                if (sub_1CD205A24(*((void *)this + 26), *((_DWORD *)this + 56), v35, &v125))
                {
                  uint64_t v42 = v125;
                  uint64_t v43 = *((void *)this + 26);
                  uint64_t v44 = *((unsigned int *)this + 56);
                }
                else
                {
                  uint64_t v43 = *((void *)this + 26);
                  uint64_t v44 = *((unsigned int *)this + 56);
                  uint64_t v42 = v43 + 16 * v44;
                }
                if (v42 != v43 + 16 * v44) {
                  continue;
                }
                int v34 = v25[16];
              }
            }
          }
          if (v34 != 60)
          {
            sub_1CD1F4CA8((BOOL)this, (uint64_t)v25);
            int v4 = 1;
          }
        }
      }
    }
    uint64_t v54 = (void *)*v23;
    if ((void *)*v23 == v23) {
      goto LABEL_120;
    }
    BOOL v55 = v54 == 0;
    if (v54) {
      uint64_t v56 = (uint64_t)(v54 - 3);
    }
    else {
      uint64_t v56 = 0;
    }
    unsigned int v57 = *(unsigned __int8 *)(v56 + 16) - 40;
    BOOL v58 = __CFADD__(v57, 11);
    if (v57 >= 0xFFFFFFF5) {
      uint64_t v59 = v56;
    }
    else {
      uint64_t v59 = 0;
    }
    int v60 = *(unsigned __int8 *)(v59 + 16);
    char v61 = !v58 || v55;
    if (v60 != 30 || (v61 & 1) != 0)
    {
      if (v60 == 32) {
        char v66 = v61;
      }
      else {
        char v66 = 1;
      }
      if (v66)
      {
        if (v60 == 31) {
          char v67 = v61;
        }
        else {
          char v67 = 1;
        }
        unsigned int v6 = (unsigned int *)v119;
        uint64_t v5 = (unsigned int *)v120;
        if (v67) {
          goto LABEL_121;
        }
        int v68 = *(_DWORD *)(v56 + 20);
        if ((v68 & 0x7FFFFFE) == 2) {
          goto LABEL_121;
        }
        if ((v68 & 0x40000000) != 0) {
          uint64_t v69 = *(uint64_t **)(v56 - 8);
        }
        else {
          uint64_t v69 = (uint64_t *)(v56 - 32 * (v68 & 0x7FFFFFF));
        }
        uint64_t v88 = *v69;
        uint64_t v125 = *v69;
        LOWORD(v126) = 0;
        sub_1CD203594((uint64_t)v123, (uint64_t)v122, &v125, (unsigned __int8 *)&v126);
        if ((v126 & 0xFE) == 4)
        {
          if (v130 >= 0x41 && v129) {
            MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
          }
          unsigned int v6 = (unsigned int *)v119;
          uint64_t v5 = (unsigned int *)v120;
          if (v128 >= 0x41 && v127) {
            MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
          }
        }
        int v89 = (_WORD *)(v123[0] + 8);
        if (v124)
        {
          if (v88 && *(unsigned __int8 *)(v88 + 16) <= 0x14u) {
            sub_1CC05E6A4(v123[0] + 8, v88, 0);
          }
        }
        if ((*v89 & 0xFE) != 0) {
          goto LABEL_121;
        }
        int v90 = *(_DWORD *)(v56 + 20);
        if ((v90 & 0x40000000) != 0)
        {
          uint64_t v91 = *(void *)(v56 - 8);
          if (*(unsigned __int8 *)(*(void *)v91 + 16) - 11 > 1) {
            goto LABEL_173;
          }
        }
        else
        {
          uint64_t v91 = v56 - 32 * (v90 & 0x7FFFFFF);
          if (*(unsigned __int8 *)(*(void *)v91 + 16) - 11 >= 2)
          {
LABEL_173:
            unsigned int v86 = *(llvm::BasicBlock **)(v91 + 96);
            goto LABEL_166;
          }
        }
        unsigned int v95 = (void *)(v91 + 8);
        uint64_t v96 = *(void *)(v91 + 64);
        **(void **)(v91 + 16) = *(void *)(v91 + 8);
        uint64_t v97 = *(void *)(v91 + 8);
        if (v97) {
          *(void *)(v97 + 16) = *(void *)(v91 + 16);
        }
        *(void *)uint64_t v91 = v96;
        if (v96)
        {
          uint64_t v100 = *(void *)(v96 + 8);
          uint64_t v98 = (uint64_t *)(v96 + 8);
          uint64_t v99 = v100;
          *unsigned int v95 = v100;
          if (v100) {
            *(void *)(v99 + 16) = v95;
          }
          *(void *)(v91 + 16) = v98;
          *uint64_t v98 = v91;
        }
        int v101 = *(_DWORD *)(v56 + 20);
        if ((v101 & 0x40000000) != 0) {
          uint64_t v102 = *(void *)(v56 - 8);
        }
        else {
          uint64_t v102 = v56 - 32 * (v101 & 0x7FFFFFF);
        }
        unsigned int v80 = *(llvm::BasicBlock **)(v102 + 96);
LABEL_154:
        llvm::SCCPInstVisitor::markEdgeExecutable(this, (llvm::BasicBlock *)v7, v80);
        int v4 = 1;
        goto LABEL_121;
      }
      int v70 = *(_DWORD *)(v59 + 20);
      unsigned int v6 = (unsigned int *)v119;
      uint64_t v5 = (unsigned int *)v120;
      if ((v70 & 0x7FFFFFF) == 1) {
        goto LABEL_121;
      }
      if ((v70 & 0x40000000) != 0) {
        uint64_t v71 = *(uint64_t **)(v59 - 8);
      }
      else {
        uint64_t v71 = (uint64_t *)(v59 - 32 * (v70 & 0x7FFFFFF));
      }
      uint64_t v81 = *v71;
      uint64_t v125 = *v71;
      LOWORD(v126) = 0;
      sub_1CD203594((uint64_t)v123, (uint64_t)v122, &v125, (unsigned __int8 *)&v126);
      if ((v126 & 0xFE) == 4)
      {
        if (v130 >= 0x41 && v129) {
          MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
        }
        unsigned int v6 = (unsigned int *)v119;
        uint64_t v5 = (unsigned int *)v120;
        if (v128 >= 0x41 && v127) {
          MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
        }
      }
      unsigned int v83 = (_WORD *)(v123[0] + 8);
      if (v124)
      {
        if (v81 && *(unsigned __int8 *)(v81 + 16) <= 0x14u) {
          sub_1CC05E6A4(v123[0] + 8, v81, 0);
        }
      }
      if ((*v83 & 0xFE) != 0) {
        goto LABEL_121;
      }
      int v84 = *(_DWORD *)(v59 + 20);
      if ((v84 & 0x40000000) != 0)
      {
        BOOL v85 = *(llvm::Function ***)(v59 - 8);
        if (*((unsigned __int8 *)*v85 + 16) - 11 > 1) {
          goto LABEL_161;
        }
      }
      else
      {
        BOOL v85 = (llvm::Function **)(v59 - 32 * (v84 & 0x7FFFFFF));
        if (*((unsigned __int8 *)*v85 + 16) - 11 >= 2)
        {
LABEL_161:
          unsigned int v86 = v85[4];
          goto LABEL_166;
        }
      }
      long long v92 = llvm::BlockAddress::get(*((llvm::BlockAddress **)v85[4] + 7), v85[4], v82);
      sub_1CD5AB76C(v59, 0, (uint64_t)v92);
      int v93 = *(_DWORD *)(v59 + 20);
      if ((v93 & 0x40000000) != 0) {
        uint64_t v94 = *(void *)(v59 - 8);
      }
      else {
        uint64_t v94 = v59 - 32 * (v93 & 0x7FFFFFF);
      }
      unsigned int v80 = *(llvm::BasicBlock **)(v94 + 32);
      goto LABEL_154;
    }
    if ((*(_DWORD *)(v59 + 20) & 0x7FFFFFF) != 3) {
      goto LABEL_120;
    }
    uint64_t v63 = v59 - 96;
    uint64_t v62 = *(void *)(v59 - 96);
    uint64_t v125 = v62;
    LOWORD(v126) = 0;
    sub_1CD203594((uint64_t)v123, (uint64_t)v122, &v125, (unsigned __int8 *)&v126);
    if ((v126 & 0xFE) == 4)
    {
      if (v130 >= 0x41 && v129) {
        MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
      }
      if (v128 >= 0x41 && v127) {
        MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
      }
    }
    uint64_t v65 = (_WORD *)(v123[0] + 8);
    if (v124)
    {
      if (v62 && *(unsigned __int8 *)(v62 + 16) <= 0x14u) {
        sub_1CC05E6A4(v123[0] + 8, v62, 0);
      }
    }
    if ((*v65 & 0xFE) != 0)
    {
LABEL_120:
      unsigned int v6 = (unsigned int *)v119;
      uint64_t v5 = (unsigned int *)v120;
      goto LABEL_121;
    }
    if (*(unsigned __int8 *)(*(void *)v63 + 16) - 11 <= 1)
    {
      int v72 = **(uint64_t ***)v59;
      uint64_t v73 = *v72;
      unsigned int v74 = *(void **)(*v72 + 1568);
      if (v74) {
        goto LABEL_144;
      }
      int v110 = *(llvm::ConstantInt **)(v73 + 1888);
      unsigned int v111 = *(_DWORD *)(v73 + 1896);
      unsigned int v126 = v111 >> 8;
      if (v111 >> 8 > 0x40) {
        operator new[]();
      }
      uint64_t v125 = 0;
      unsigned int v74 = llvm::ConstantInt::get(v110, (llvm::LLVMContext *)&v125, v64);
      if (v126 >= 0x41 && v125) {
        MEMORY[0x1D25D9CB0](v125, 0x1000C8000313F17);
      }
      *(void *)(v73 + 1568) = v74;
      if (*(void *)v63)
      {
LABEL_144:
        **(void **)(v59 - 80) = *(void *)(v59 - 88);
        uint64_t v75 = *(void *)(v59 - 88);
        if (v75) {
          *(void *)(v75 + 16) = *(void *)(v59 - 80);
        }
      }
      *(void *)uint64_t v63 = v74;
      if (v74)
      {
        uint64_t v78 = v74[1];
        int v77 = v74 + 1;
        uint64_t v76 = v78;
        *(void *)(v59 - 88) = v78;
        if (v78) {
          *(void *)(v76 + 16) = v59 - 88;
        }
        *(void *)(v59 - 80) = v77;
        *int v77 = v63;
      }
      if (*(unsigned char *)(v59 + 16) == 30)
      {
        int v79 = (llvm::BasicBlock **)(v59 - 64);
      }
      else
      {
        unsigned int v6 = (unsigned int *)v119;
        uint64_t v5 = (unsigned int *)v120;
        switch(*(unsigned char *)(v59 + 16))
        {
          case ' ':
          case '&':
            int v112 = *(_DWORD *)(v59 + 20);
            if ((v112 & 0x40000000) != 0) {
              uint64_t v113 = *(void *)(v59 - 8);
            }
            else {
              uint64_t v113 = v59 - 32 * (v112 & 0x7FFFFFF);
            }
            int v79 = (llvm::BasicBlock **)(v113 + 64);
            break;
          case '!':
            int v79 = (llvm::BasicBlock **)(v59 - 64);
            goto LABEL_153;
          case '""':
          case '#':
            goto LABEL_262;
          case '$':
            if ((*(_WORD *)(v59 + 18) & 1) == 0)
            {
              unsigned int v80 = 0;
              unsigned int v6 = (unsigned int *)v119;
              uint64_t v5 = (unsigned int *)v120;
              goto LABEL_154;
            }
            int v79 = (llvm::BasicBlock **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 32);
            break;
          case '%':
            int v79 = (llvm::BasicBlock **)(v59 - 32);
            goto LABEL_153;
          case '\'':
            int v79 = (llvm::BasicBlock **)(v59 - 32 * *(unsigned int *)(v59 + 80) - 32);
            goto LABEL_153;
          default:
            int v105 = *(_DWORD *)(v59 + 20);
            if ((v105 & 0x40000000) != 0) {
              uint64_t v106 = *(void *)(v59 - 8);
            }
            else {
              uint64_t v106 = v59 - 32 * (v105 & 0x7FFFFFF);
            }
            int v79 = (llvm::BasicBlock **)(v106 + 96);
            goto LABEL_153;
        }
      }
      unsigned int v6 = (unsigned int *)v119;
      uint64_t v5 = (unsigned int *)v120;
LABEL_153:
      unsigned int v80 = *v79;
      goto LABEL_154;
    }
    if (*(unsigned char *)(v59 + 16) == 30)
    {
      unsigned int v87 = (llvm::BasicBlock **)(v59 - 64);
    }
    else
    {
      unsigned int v6 = (unsigned int *)v119;
      uint64_t v5 = (unsigned int *)v120;
      switch(*(unsigned char *)(v59 + 16))
      {
        case ' ':
        case '&':
          int v114 = *(_DWORD *)(v59 + 20);
          if ((v114 & 0x40000000) != 0) {
            uint64_t v115 = *(void *)(v59 - 8);
          }
          else {
            uint64_t v115 = v59 - 32 * (v114 & 0x7FFFFFF);
          }
          unsigned int v87 = (llvm::BasicBlock **)(v115 + 64);
          break;
        case '!':
          unsigned int v87 = (llvm::BasicBlock **)(v59 - 64);
          goto LABEL_165;
        case '""':
        case '#':
LABEL_262:
          __break(1u);
          JUMPOUT(0x1CD202080);
        case '$':
          if ((*(_WORD *)(v59 + 18) & 1) == 0)
          {
            unsigned int v86 = 0;
            unsigned int v6 = (unsigned int *)v119;
            uint64_t v5 = (unsigned int *)v120;
            goto LABEL_166;
          }
          unsigned int v87 = (llvm::BasicBlock **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 32);
          break;
        case '%':
          unsigned int v87 = (llvm::BasicBlock **)(v59 - 32);
          goto LABEL_165;
        case '\'':
          unsigned int v87 = (llvm::BasicBlock **)(v59 - 32 * *(unsigned int *)(v59 + 80) - 32);
          goto LABEL_165;
        default:
          int v107 = *(_DWORD *)(v59 + 20);
          if ((v107 & 0x40000000) != 0) {
            uint64_t v108 = *(void *)(v59 - 8);
          }
          else {
            uint64_t v108 = v59 - 32 * (v107 & 0x7FFFFFF);
          }
          unsigned int v87 = (llvm::BasicBlock **)(v108 + 96);
          goto LABEL_165;
      }
    }
    unsigned int v6 = (unsigned int *)v119;
    uint64_t v5 = (unsigned int *)v120;
LABEL_165:
    unsigned int v86 = *v87;
LABEL_166:
    v4 |= llvm::SCCPInstVisitor::markEdgeExecutable(this, (llvm::BasicBlock *)v7, v86);
LABEL_121:
    unsigned int v2 = (char *)*((void *)v2 + 1);
  }
  while (v2 != v121);
  return v4 & 1;
}

void llvm::SCCPSolver::SCCPSolver()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void llvm::SCCPSolver::~SCCPSolver(llvm::SCCPSolver *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    uint64_t v3 = sub_1CD205B50(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10E0C4009A2F9D2);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    uint64_t v3 = sub_1CD205B50(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10E0C4009A2F9D2);
  }
}

llvm::PredicateInfo *llvm::SCCPSolver::addAnalysis(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = *(llvm::PredicateInfo **)a3;
  *(void *)a3 = 0;
  unsigned int v6 = v4;
  long long v7 = *(_OWORD *)(a3 + 8);
  sub_1CD202324(v3, a2, (uint64_t)&v6);
  uint64_t result = v6;
  unsigned int v6 = 0;
  if (result)
  {
    llvm::PredicateInfo::~PredicateInfo(result);
    return (llvm::PredicateInfo *)MEMORY[0x1D25D9CE0]();
  }
  return result;
}

llvm::PredicateInfo *sub_1CD202324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(llvm::PredicateInfo **)a3;
  *(void *)a3 = 0;
  uint64_t v6 = a2;
  long long v7 = v3;
  long long v8 = *(_OWORD *)(a3 + 8);
  sub_1CD204928((_DWORD *)(a1 + 2392), &v6, (uint64_t *)&v7, (uint64_t)v5);
  uint64_t result = v7;
  long long v7 = 0;
  if (result)
  {
    llvm::PredicateInfo::~PredicateInfo(result);
    return (llvm::PredicateInfo *)MEMORY[0x1D25D9CE0]();
  }
  return result;
}

uint64_t llvm::SCCPSolver::markBlockExecutable(llvm::SCCPInstVisitor **this, llvm::BasicBlock *a2)
{
  return llvm::SCCPInstVisitor::markBlockExecutable(*this, a2);
}

uint64_t llvm::SCCPSolver::getPredicateInfoFor(llvm::SCCPSolver *this, llvm::Instruction *a2)
{
  return sub_1CD200A6C(*(void *)this, (uint64_t)a2);
}

double llvm::SCCPSolver::getDTU@<D0>(llvm::SCCPSolver *this@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1CD2023B0(*(void *)this, (uint64_t)a2, a3);
}

double sub_1CD2023B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = a2;
  uint64_t v9 = 0;
  if (sub_1CD203AA4((uint64_t *)(a1 + 2392), &v8, &v9)) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 2392) + 32 * *(unsigned int *)(a1 + 2408);
  }
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x1000000000;
  long long v6 = *(_OWORD *)(v5 + 16);
  *(void *)(a3 + 272) = 0;
  *(void *)(a3 + 280) = 0;
  *(_OWORD *)(a3 + 288) = v6;
  *(unsigned char *)(a3 + 304) = 1;
  *(void *)(a3 + 312) = a3 + 344;
  *(void *)(a3 + 320) = a3 + 344;
  *(void *)&double result = 8;
  *(void *)(a3 + 328) = 8;
  *(_DWORD *)(a3 + 336) = 0;
  *(_WORD *)(a3 + 432) = 0;
  *(void *)(a3 + 416) = 0;
  *(void *)(a3 + 424) = 0;
  *(void *)(a3 + 408) = 0;
  return result;
}

void *llvm::SCCPSolver::trackValueOfGlobalVariable(llvm::SCCPSolver *this, llvm::GlobalVariable *a2)
{
  return sub_1CD20245C(*(void **)this, (uint64_t)a2);
}

void *sub_1CD20245C(void *result, uint64_t a2)
{
  uint64_t v8 = a2;
  unsigned int v2 = *(_DWORD *)(*(void *)(a2 + 24) + 8);
  BOOL v3 = (*(_DWORD *)(*(void *)(a2 + 24) + 8) & 0xFE) == 0x12 || v2 == 13;
  if (v3 || ((v5 = v2 >= 0x15, BOOL v3 = v2 == 21, v6 = (1 << v2) & 0x208C7F, v3 || !v5) ? (v7 = v6 == 0) : (v7 = 1), !v7))
  {
    double result = sub_1CD204CC0((_DWORD *)result + 46, &v8);
    uint64_t v4 = *(void *)(v8 - 32);
    if (*(unsigned __int8 *)(v4 + 16) - 11 >= 2) {
      return (void *)sub_1CC05E6A4((uint64_t)(result + 1), v4, 0);
    }
  }
  return result;
}

void llvm::SCCPSolver::addTrackedFunction(llvm::SCCPSolver *this, llvm::Function *a2)
{
}

void sub_1CD2024F4(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **(void **)(*(void *)(a2 + 24) + 16);
  int v5 = *(unsigned __int8 *)(v4 + 8);
  if (v4) {
    BOOL v6 = v5 == 16;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (v5 != 7)
    {
      *(void *)&long long v25 = a2;
      WORD4(v25) = 0;
      sub_1CD88EE18(a1 + 208, (uint64_t *)&v25, (__int16 *)&v25 + 4);
      if ((BYTE8(v25) & 0xFE) == 4)
      {
        if (v29 >= 0x41 && v28) {
          MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
        }
        if (v27 >= 0x41)
        {
          if (v26) {
            MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
          }
        }
      }
    }
    return;
  }
  uint64_t v7 = *(void *)(a1 + 312);
  uint64_t v8 = *(unsigned int *)(a1 + 324);
  if (v7 != *(void *)(a1 + 304))
  {
    unsigned int v12 = *(_DWORD *)(a1 + 320);
    goto LABEL_22;
  }
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8 * v8;
    uint64_t v11 = *(void **)(a1 + 312);
    while (*v11 != a2)
    {
      if (*v11 == -2) {
        uint64_t v9 = v11;
      }
      ++v11;
      v10 -= 8;
      if (!v10)
      {
        if (!v9) {
          goto LABEL_19;
        }
        *uint64_t v9 = a2;
        --*(_DWORD *)(a1 + 328);
        goto LABEL_43;
      }
    }
    goto LABEL_43;
  }
LABEL_19:
  unsigned int v12 = *(_DWORD *)(a1 + 320);
  if (v8 >= v12)
  {
LABEL_22:
    if (3 * v12 <= 4 * ((int)v8 - *(_DWORD *)(a1 + 328)))
    {
      if (v12 >= 0x40) {
        v12 *= 2;
      }
      else {
        unsigned int v12 = 128;
      }
    }
    else if (v12 - v8 >= v12 >> 3)
    {
      goto LABEL_24;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 304), v12);
    unsigned int v12 = *(_DWORD *)(a1 + 320);
    uint64_t v7 = *(void *)(a1 + 312);
LABEL_24:
    unsigned int v13 = v12 - 1;
    unsigned int v14 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v15 = (void *)(v7 + 8 * v14);
    uint64_t v16 = *v15;
    if (*v15 == -1)
    {
      uint64_t v17 = 0;
LABEL_36:
      if (v17) {
        unsigned int v21 = v17;
      }
      else {
        unsigned int v21 = v15;
      }
      if (*v21 != a2)
      {
        if (*v21 == -2) {
          --*(_DWORD *)(a1 + 328);
        }
        else {
          ++*(_DWORD *)(a1 + 324);
        }
        *unsigned int v21 = a2;
      }
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = 1;
      while (v16 != a2)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == -2;
        }
        if (v19) {
          uint64_t v17 = v15;
        }
        unsigned int v20 = v14 + v18++;
        unsigned int v14 = v20 & v13;
        int v15 = (void *)(v7 + 8 * (v20 & v13));
        uint64_t v16 = *v15;
        if (*v15 == -1) {
          goto LABEL_36;
        }
      }
    }
    goto LABEL_43;
  }
  *(_DWORD *)(a1 + 324) = v8 + 1;
  *(void *)(v7 + 8 * v8) = a2;
LABEL_43:
  uint64_t v22 = *(unsigned int *)(v4 + 12);
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = a1 + 256;
    do
    {
      *(void *)&long long v25 = a2;
      *((void *)&v25 + 1) = v23;
      LOWORD(v26) = 0;
      sub_1CD88EA50(v24, &v25, (__int16 *)&v26);
      if ((v26 & 0xFE) == 4)
      {
        if (v30 >= 0x41 && v29) {
          MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
        if (v28 >= 0x41 && v27) {
          MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
        }
      }
      ++v23;
    }
    while (v22 != v23);
  }
}

void llvm::SCCPSolver::addArgumentTrackedFunction(llvm::SCCPSolver *this, llvm::Function *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(void *)(*(void *)this + 632);
  uint64_t v5 = *(unsigned int *)(*(void *)this + 644);
  if (v4 != *(void *)(*(void *)this + 624))
  {
    unsigned int v9 = *(_DWORD *)(v3 + 640);
    goto LABEL_13;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v9 = *(_DWORD *)(v3 + 640);
    if (v5 < v9)
    {
      *(_DWORD *)(v3 + 644) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a2;
      return;
    }
LABEL_13:
    if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(v3 + 648)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_15;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 624), v9);
    unsigned int v9 = *(_DWORD *)(v3 + 640);
    uint64_t v4 = *(void *)(v3 + 632);
LABEL_15:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v12 = (llvm::Function **)(v4 + 8 * v11);
    unsigned int v13 = *v12;
    if (*v12 == (llvm::Function *)-1)
    {
      unsigned int v14 = 0;
LABEL_27:
      if (v14) {
        int v18 = v14;
      }
      else {
        int v18 = v12;
      }
      if (*v18 != a2)
      {
        if (*v18 == (llvm::Function *)-2) {
          --*(_DWORD *)(v3 + 648);
        }
        else {
          ++*(_DWORD *)(v3 + 644);
        }
        *int v18 = a2;
      }
    }
    else
    {
      unsigned int v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (llvm::Function *)-2;
        }
        if (v16) {
          unsigned int v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        unsigned int v12 = (llvm::Function **)(v4 + 8 * (v17 & v10));
        unsigned int v13 = *v12;
        if (*v12 == (llvm::Function *)-1) {
          goto LABEL_27;
        }
      }
    }
    return;
  }
  BOOL v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v8 = *(void **)(*(void *)this + 632);
  while ((llvm::Function *)*v8 != a2)
  {
    if (*v8 == -2) {
      BOOL v6 = v8;
    }
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_9;
      }
      *BOOL v6 = a2;
      --*(_DWORD *)(v3 + 648);
      return;
    }
  }
}

void llvm::SCCPSolver::solve(llvm::SCCPInstVisitor **this, uint64_t a2, const llvm::Function *a3)
{
}

uint64_t llvm::SCCPSolver::resolvedUndefsIn(llvm::SCCPInstVisitor **this, llvm::Function *a2)
{
  return llvm::SCCPInstVisitor::resolvedUndefsIn(*this, a2);
}

BOOL llvm::SCCPSolver::isBlockExecutable(llvm::SCCPSolver *this, llvm::BasicBlock *a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v4 = *(void *)(*(void *)this + 40);
  uint64_t v3 = *(void *)(*(void *)this + 48);
  if (v3 == v4)
  {
    uint64_t v5 = *(unsigned int *)(v2 + 60);
    BOOL v6 = (llvm::BasicBlock **)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v5;
      while (*(llvm::BasicBlock **)(v3 + v7) != a2)
      {
        v7 += 8;
        if (v8 == v7) {
          goto LABEL_6;
        }
      }
      BOOL v6 = (llvm::BasicBlock **)(v3 + v7);
    }
LABEL_6:
    uint64_t v4 = *(void *)(*(void *)this + 48);
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(v2 + 56);
    int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    BOOL v6 = (llvm::BasicBlock **)(v3 + 8 * v13);
    unsigned int v14 = *v6;
    if (*v6 == (llvm::BasicBlock *)-1)
    {
      int v15 = 0;
LABEL_23:
      if (v15) {
        BOOL v6 = v15;
      }
      if (*v6 != a2) {
        BOOL v6 = (llvm::BasicBlock **)(v3 + 8 * v11);
      }
    }
    else
    {
      int v15 = 0;
      int v16 = 1;
      while (v14 != a2)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == (llvm::BasicBlock *)-2;
        }
        if (v17) {
          int v15 = v6;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        BOOL v6 = (llvm::BasicBlock **)(v3 + 8 * (v18 & v12));
        unsigned int v14 = *v6;
        if (*v6 == (llvm::BasicBlock *)-1) {
          goto LABEL_23;
        }
      }
    }
  }
  BOOL v17 = v3 == v4;
  uint64_t v9 = 56;
  if (v17) {
    uint64_t v9 = 60;
  }
  return v6 != (llvm::BasicBlock **)(v3 + 8 * *(unsigned int *)(v2 + v9));
}

BOOL llvm::SCCPSolver::isEdgeFeasible(llvm::SCCPSolver *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3 = *(_DWORD *)(*(void *)this + 2384);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)this + 2368);
  unint64_t v5 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  int v8 = v3 - 1;
  unsigned int v9 = v8 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
  unsigned int v10 = (llvm::BasicBlock **)(v4 + 16 * v9);
  uint64_t v11 = *v10;
  int v12 = v10[1];
  if (*v10 == a2 && v12 == a3) {
    return 1;
  }
  int v14 = 1;
  do
  {
    BOOL v15 = v11 == (llvm::BasicBlock *)-4096 && v12 == (llvm::BasicBlock *)-4096;
    BOOL result = !v15;
    if (v15) {
      break;
    }
    unsigned int v17 = v9 + v14++;
    unsigned int v9 = v17 & v8;
    unsigned int v18 = (llvm::BasicBlock **)(v4 + 16 * v9);
    uint64_t v11 = *v18;
    int v12 = v18[1];
  }
  while (v11 != a2 || v12 != a3);
  return result;
}

void llvm::SCCPSolver::getStructLatticeValueFor(llvm::SCCPSolver *this@<X0>, llvm::Value *a2@<X1>, void **a3@<X8>)
{
}

void sub_1CD202B54(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  if (*(unsigned char *)(*a2 + 8) != 16) {
    uint64_t v4 = 0;
  }
  uint64_t v47 = *(unsigned int *)(v4 + 12);
  if (v47)
  {
    unint64_t v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v45 = (unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32;
    while (1)
    {
      uint64_t v8 = *(void *)(a1 + 160);
      unsigned int v9 = *(_DWORD *)(a1 + 176);
      if (!v9) {
        goto LABEL_51;
      }
      unint64_t v10 = ((37 * v7) | v45) + ~((unint64_t)(37 * v7) << 32);
      unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
      unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
      unsigned int v13 = (v9 - 1) & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27)));
      int v14 = (uint64_t *)(v8 + 56 * v13);
      BOOL v15 = (uint64_t *)*v14;
      uint64_t v16 = *((unsigned int *)v14 + 2);
      if ((uint64_t *)*v14 != v5 || v7 != v16) {
        break;
      }
LABEL_11:
      unint64_t v18 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v18)
      {
        BOOL v19 = (char *)*a3;
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (unsigned char *)*a3) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0x666666666666666) {
          abort();
        }
        unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)v19) >> 3);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x333333333333333) {
          unint64_t v23 = 0x666666666666666;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          if (v23 > 0x666666666666666) {
            sub_1CB833614();
          }
          uint64_t v24 = operator new(40 * v23);
        }
        else
        {
          uint64_t v24 = 0;
        }
        long long v25 = (char *)&v24[5 * v20];
        int v26 = *((unsigned __int8 *)v14 + 16);
        *(_WORD *)long long v25 = v26;
        if ((v26 - 4) < 2)
        {
          __int16 v39 = (char *)&v24[5 * v20];
          unsigned int v40 = *((_DWORD *)v14 + 8);
          *((_DWORD *)v39 + 4) = v40;
          if (v40 > 0x40) {
            operator new[]();
          }
          *((void *)v39 + 1) = v14[3];
          uint64_t v41 = (char *)&v24[5 * v20];
          unsigned int v42 = *((_DWORD *)v14 + 12);
          *((_DWORD *)v41 + 8) = v42;
          if (v42 > 0x40) {
            operator new[]();
          }
          *((void *)v41 + 3) = v14[5];
          v25[1] = *((unsigned char *)v14 + 17);
        }
        else if ((v26 - 2) < 2)
        {
          v24[5 * v20 + 1] = v14[3];
        }
        uint64_t v27 = (char *)&v24[5 * v23];
        uint64_t v28 = v25 + 40;
        if (v6 == v19)
        {
          *a3 = v25;
          a3[1] = v28;
          a3[2] = v27;
        }
        else
        {
          uint64_t v29 = 0;
          do
          {
            unsigned int v30 = &v25[v29];
            uint64_t v31 = &v6[v29];
            __int16 v32 = *(_WORD *)&v6[v29 - 40];
            *(_WORD *)&v25[v29 - 40] = v32;
            if (v32 - 4 < 2)
            {
              *((_DWORD *)v30 - 6) = *((_DWORD *)v31 - 6);
              *((void *)v30 - 4) = *((void *)v31 - 4);
              *((_DWORD *)v31 - 6) = 0;
              *((_DWORD *)v30 - 2) = *((_DWORD *)v31 - 2);
              *((void *)v30 - 2) = *((void *)v31 - 2);
              *((_DWORD *)v31 - 2) = 0;
              __int16 v32 = *((_WORD *)v31 - 20);
              *(v30 - 39) = HIBYTE(v32);
            }
            else if (v32 - 2 < 2)
            {
              *(void *)&v25[v29 - 32] = *(void *)&v6[v29 - 32];
              __int16 v32 = *((_WORD *)v31 - 20);
            }
            *((_WORD *)v31 - 20) = v32 & 0xFF00;
            v29 -= 40;
          }
          while (&v6[v29] != v19);
          unint64_t v6 = (char *)*a3;
          unsigned int v33 = (char *)a3[1];
          *a3 = &v25[v29];
          a3[1] = v28;
          a3[2] = v27;
          if (v33 != v6)
          {
            int v34 = v33;
            unint64_t v5 = a2;
            do
            {
              __int16 v35 = *((_WORD *)v34 - 20);
              v34 -= 40;
              if ((v35 & 0xFE) == 4)
              {
                if (*((_DWORD *)v33 - 2) >= 0x41u)
                {
                  uint64_t v44 = *((void *)v33 - 2);
                  if (v44) {
                    MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
                  }
                }
                unint64_t v5 = a2;
                if (*((_DWORD *)v33 - 6) >= 0x41u)
                {
                  uint64_t v43 = *((void *)v33 - 4);
                  if (v43) {
                    MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
                  }
                }
              }
              unsigned int v33 = v34;
            }
            while (v34 != v6);
            goto LABEL_47;
          }
        }
        unint64_t v5 = a2;
LABEL_47:
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_49;
      }
      sub_1CD20306C((uint64_t)v6, (unsigned __int8 *)v14 + 16);
      uint64_t v28 = v6 + 40;
LABEL_49:
      a3[1] = v28;
      ++v7;
      unint64_t v6 = v28;
      if (v7 == v47) {
        return;
      }
    }
    int v36 = 1;
    while (v15 != (uint64_t *)-4096 || v16 != -1)
    {
      unsigned int v37 = v13 + v36++;
      unsigned int v13 = v37 & (v9 - 1);
      int v14 = (uint64_t *)(v8 + 56 * v13);
      BOOL v15 = (uint64_t *)*v14;
      uint64_t v16 = *((unsigned int *)v14 + 2);
      if ((uint64_t *)*v14 == v5 && v7 == v16) {
        goto LABEL_11;
      }
    }
LABEL_51:
    int v14 = (uint64_t *)(v8 + 56 * v9);
    goto LABEL_11;
  }
}

uint64_t llvm::SCCPSolver::removeLatticeValueFor(int32x2_t **this, llvm::Value *a2)
{
  uint64_t v2 = *this;
  uint64_t v4 = a2;
  return sub_1CD205788(v2 + 17, &v4);
}

uint64_t *llvm::SCCPSolver::getLatticeValueFor(llvm::SCCPSolver *this, llvm::Value *a2)
{
  return sub_1CD205858((uint64_t *)(*(void *)this + 136), (uint64_t)a2) + 1;
}

BOOL llvm::SCCPSolver::markOverdefined(llvm::SCCPSolver *this, llvm::Value *a2)
{
  return sub_1CD1F4CA8(*(void *)this, (uint64_t)a2);
}

void *llvm::SCCPSolver::getConstant(uint64_t *a1, uint64_t a2)
{
  return llvm::SCCPInstVisitor::getConstant(*a1, a2);
}

uint64_t sub_1CD20306C(uint64_t result, unsigned __int8 *a2)
{
  *(_WORD *)BOOL result = *a2;
  int v2 = *a2;
  if ((v2 - 4) < 2)
  {
    unsigned int v3 = *((_DWORD *)a2 + 4);
    *(_DWORD *)(result + 16) = v3;
    if (v3 > 0x40) {
      operator new[]();
    }
    *(void *)(result + 8) = *((void *)a2 + 1);
    unsigned int v4 = *((_DWORD *)a2 + 8);
    *(_DWORD *)(result + 32) = v4;
    if (v4 > 0x40) {
      operator new[]();
    }
    *(void *)(result + 24) = *((void *)a2 + 3);
    *(unsigned char *)(result + 1) = a2[1];
  }
  else if ((v2 - 2) < 2)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
  }
  return result;
}

uint64_t sub_1CD203180(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    unint64_t v6 = (void *)(*(void *)a1 + 48 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(*(void *)a1 + 48 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

void *sub_1CD203218(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CD203350((uint64_t *)a1, v6);
      uint64_t v16 = 0;
      sub_1CD203180(a1, a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CD203350((uint64_t *)a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (void *)(*(void *)a1 + 48 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    unint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        unint64_t v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (void *)(*(void *)a1 + 48 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD203350(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(48 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 48 * v10;
      do
      {
        void *result = -4096;
        result += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if (v3)
    {
      unint64_t v12 = &v4[6 * v3];
      int v13 = v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v15 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          uint64_t v17 = *a1 + 48 * v16;
          uint64_t v18 = *(void *)v17;
          if (v14 != *(void *)v17)
          {
            uint64_t v19 = 0;
            int v20 = 1;
            while (v18 != -4096)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == -8192;
              }
              if (v21) {
                uint64_t v19 = v17;
              }
              unsigned int v22 = v16 + v20++;
              unsigned int v16 = v22 & v15;
              uint64_t v17 = *a1 + 48 * (v22 & v15);
              uint64_t v18 = *(void *)v17;
              if (v14 == *(void *)v17) {
                goto LABEL_20;
              }
            }
            if (v19) {
              uint64_t v17 = v19;
            }
          }
LABEL_20:
          *(void *)uint64_t v17 = v14;
          *(_WORD *)(v17 + 8) = *((unsigned __int8 *)v13 + 8);
          int v23 = *((unsigned __int8 *)v13 + 8);
          if ((v23 - 4) < 2)
          {
            *(_DWORD *)(v17 + 24) = *((_DWORD *)v13 + 6);
            *(void *)(v17 + 16) = v13[2];
            *((_DWORD *)v13 + 6) = 0;
            *(_DWORD *)(v17 + 40) = *((_DWORD *)v13 + 10);
            *(void *)(v17 + 32) = v13[4];
            *((_DWORD *)v13 + 10) = 0;
            *(unsigned char *)(v17 + 9) = *((unsigned char *)v13 + 9);
          }
          else if ((v23 - 2) < 2)
          {
            *(void *)(v17 + 16) = v13[2];
          }
          *((_WORD *)v13 + 4) = *((unsigned __int8 *)v13 + 9) << 8;
          ++*((_DWORD *)a1 + 2);
          if ((v13[1] & 0xFE) == 4)
          {
            int v26 = v13;
            sub_1CC05EB8C((uint64_t)(v13 + 2));
            int v13 = v26;
          }
        }
        v13 += 6;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v24 = *((unsigned int *)a1 + 4);
  if (v24)
  {
    uint64_t v25 = 48 * v24;
    do
    {
      void *result = -4096;
      result += 6;
      v25 -= 48;
    }
    while (v25);
  }
  return result;
}

void *sub_1CD203594(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
    uint64_t result = (void *)(*(void *)a2 + 48 * v10);
    uint64_t v12 = *result;
    if (*a3 == *result)
    {
LABEL_11:
      char v17 = 0;
      goto LABEL_12;
    }
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = result;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & (v8 - 1);
      uint64_t result = (void *)(v9 + 48 * v10);
      uint64_t v12 = *result;
      if (*a3 == *result) {
        goto LABEL_11;
      }
    }
    if (v13) {
      uint64_t v18 = v13;
    }
    else {
      uint64_t v18 = result;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t result = sub_1CD203218(a2, a3, v18);
  void *result = *a3;
  *((_WORD *)result + 4) = *a4;
  int v19 = *a4;
  if ((v19 - 4) < 2)
  {
    *((_DWORD *)result + 6) = *((_DWORD *)a4 + 4);
    result[2] = *((void *)a4 + 1);
    *((_DWORD *)a4 + 4) = 0;
    *((_DWORD *)result + 10) = *((_DWORD *)a4 + 8);
    result[4] = *((void *)a4 + 3);
    *((_DWORD *)a4 + 8) = 0;
    *((unsigned char *)result + 9) = a4[1];
  }
  else if ((v19 - 2) < 2)
  {
    result[2] = *((void *)a4 + 1);
  }
  *(_WORD *)a4 = a4[1] << 8;
  uint64_t v9 = *(void *)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v17 = 1;
LABEL_12:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9 + 48 * v8;
  *(unsigned char *)(a1 + 16) = v17;
  return result;
}

uint64_t sub_1CD2036F0(uint64_t result, int a2, uint64_t a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    unsigned int v10 = (uint64_t *)(result + 56 * v9);
    uint64_t v11 = *v10;
    int v12 = *((_DWORD *)v10 + 2);
    if (*v10 != a3 || v12 != a4)
    {
      int v14 = 0;
      int v15 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -2;
        }
        if (v16 && v11 == -8192) {
          int v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        unsigned int v10 = (uint64_t *)(result + 56 * (v18 & v8));
        uint64_t v11 = *v10;
        int v12 = *((_DWORD *)v10 + 2);
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_7;
        }
      }
      if (v14) {
        unsigned int v10 = v14;
      }
    }
  }
  else
  {
    unsigned int v10 = 0;
  }
LABEL_7:
  *a5 = v10;
  return result;
}

_OWORD *sub_1CD2037D4(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 56 * v12;
      do
      {
        _OWORD *result = xmmword_1CFAC30E0;
        uint64_t result = (_OWORD *)((char *)result + 56);
        v13 -= 56;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = &v4[7 * v3];
      int v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        int v17 = *((_DWORD *)v15 + 2);
        if ((*v15 != -4096 || v17 != -1) && (v16 != -8192 || v17 != -2))
        {
          unint64_t v20 = ~((unint64_t)(37 * v17) << 32)
              + (37 * v17)
              + ((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32);
          unint64_t v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          unint64_t v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          int v23 = ((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~(v22 << 27));
          int v24 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v25 = v24 & v23;
          uint64_t v26 = *a1 + 56 * v25;
          uint64_t v27 = *(void *)v26;
          int v28 = *(_DWORD *)(v26 + 8);
          if (v16 != *(void *)v26 || v17 != v28)
          {
            uint64_t v31 = 0;
            int v32 = 1;
            while (v27 != -4096 || v28 != -1)
            {
              if (v31) {
                BOOL v33 = 0;
              }
              else {
                BOOL v33 = v28 == -2;
              }
              if (v33 && v27 == -8192) {
                uint64_t v31 = v26;
              }
              unsigned int v35 = v25 + v32++;
              unsigned int v25 = v35 & v24;
              uint64_t v26 = *a1 + 56 * (v35 & v24);
              uint64_t v27 = *(void *)v26;
              int v28 = *(_DWORD *)(v26 + 8);
              if (v16 == *(void *)v26 && v17 == v28) {
                goto LABEL_27;
              }
            }
            if (v31) {
              uint64_t v26 = v31;
            }
          }
LABEL_27:
          *(void *)uint64_t v26 = v16;
          *(_DWORD *)(v26 + 8) = v17;
          *(_WORD *)(v26 + 16) = *((unsigned __int8 *)v15 + 16);
          int v30 = *((unsigned __int8 *)v15 + 16);
          if ((v30 - 4) < 2)
          {
            *(_DWORD *)(v26 + 32) = *((_DWORD *)v15 + 8);
            *(void *)(v26 + 24) = v15[3];
            *((_DWORD *)v15 + 8) = 0;
            *(_DWORD *)(v26 + 48) = *((_DWORD *)v15 + 12);
            *(void *)(v26 + 40) = v15[5];
            *((_DWORD *)v15 + 12) = 0;
            *(unsigned char *)(v26 + 17) = *((unsigned char *)v15 + 17);
          }
          else if ((v30 - 2) < 2)
          {
            *(void *)(v26 + 24) = v15[3];
          }
          *((_WORD *)v15 + 8) = *((unsigned __int8 *)v15 + 17) << 8;
          ++*((_DWORD *)a1 + 2);
          if ((v15[2] & 0xFE) == 4)
          {
            unsigned int v37 = v15;
            sub_1CC05EB8C((uint64_t)(v15 + 3));
            int v15 = v37;
          }
        }
        v15 += 7;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 56 * v10;
    do
    {
      _OWORD *result = xmmword_1CFAC30E0;
      uint64_t result = (_OWORD *)((char *)result + 56);
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD203AA4(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unsigned int v5 = v3 - 1;
    uint64_t v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 32 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        int v13 = v6 + v11++;
        uint64_t v6 = v13 & v5;
        int v7 = (void *)(v4 + 32 * v6);
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD203B40(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 56 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 56 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CD203BD8(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD203CB0(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 56 * v10;
    do
    {
      void *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1CD203CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 56 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = 0;
        sub_1CD203B40(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        uint64_t v10 = v15;
        uint64_t v11 = v15 + 5;
        *int v15 = *(void *)v4;
        v10[1] = v11;
        BOOL v12 = *(void **)(v4 + 8);
        unsigned int v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          v10[2] = v11;
          uint64_t v14 = *(unsigned int *)(v4 + 28);
          BOOL v12 = *(void **)(v4 + 16);
          if (v14)
          {
            memmove(v11, v12, 8 * v14);
            unsigned int v13 = *(void **)(v4 + 8);
            BOOL v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          v10[2] = v13;
          *(void *)(v4 + 16) = v12;
          unsigned int v13 = v12;
        }
        void v10[3] = *(void *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(void *)(v4 + 24) = 2;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13) {
          free(v12);
        }
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

void sub_1CD203DDC(llvm::SCCPInstVisitor *this, llvm::CallBase *a2, const llvm::Function *a3)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  switch(*((unsigned char *)a2 + 16))
  {
    case 0x1E:
      int v28 = v30;
      long long v29 = xmmword_1CDB15990;
      llvm::SCCPInstVisitor::getFeasibleSuccessors(this, (uint64_t)a2, &v28);
      if (v29)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        int v7 = (llvm::BasicBlock *)*((void *)a2 + 5);
        uint64_t v8 = (llvm::BasicBlock **)((char *)a2 - 32);
        uint64_t v9 = 2 * v29;
        unsigned int v10 = -1;
        uint64_t v11 = (llvm::BasicBlock **)((char *)a2 - 32);
        do
        {
          if (*((unsigned char *)v28 + v6))
          {
            BOOL v12 = v11;
            if (*((unsigned char *)a2 + 16) != 30)
            {
              BOOL v12 = v8;
              switch(*((unsigned char *)a2 + 16))
              {
                case ' ':
                case '&':
                  goto LABEL_83;
                case '!':
                  uint64_t v24 = -64;
                  if (!v5) {
                    uint64_t v24 = -96;
                  }
                  BOOL v12 = (llvm::BasicBlock **)((char *)a2 + v24);
                  goto LABEL_36;
                case '""':
                case '#':
                  goto LABEL_82;
                case '$':
                  if ((*((_WORD *)a2 + 9) & 1) == 0)
                  {
                    unsigned int v13 = 0;
                    goto LABEL_37;
                  }
                  uint64_t v16 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
                  break;
                case '%':
                  goto LABEL_36;
                case '\'':
                  if (v5) {
                    BOOL v12 = &v8[4 * v10] - 4 * *((unsigned int *)a2 + 20);
                  }
                  else {
                    BOOL v12 = (llvm::BasicBlock **)((char *)a2 - 32 * *((unsigned int *)a2 + 20) - 64);
                  }
                  goto LABEL_36;
                default:
                  int v14 = *((_DWORD *)a2 + 5);
                  if ((v14 & 0x40000000) != 0) {
                    int v15 = (char *)*((void *)a2 - 1);
                  }
                  else {
                    int v15 = (char *)a2 - 32 * (v14 & 0x7FFFFFF);
                  }
                  uint64_t v16 = &v15[32 * (v5 & 0xFFFFFFFE)];
                  break;
              }
LABEL_52:
              BOOL v12 = (llvm::BasicBlock **)(v16 + 32);
            }
LABEL_36:
            unsigned int v13 = *v12;
LABEL_37:
            llvm::SCCPInstVisitor::markEdgeExecutable(this, v7, v13);
          }
          ++v6;
          v11 -= 4;
          v5 += 2;
          ++v10;
        }
        while (v9 != v5);
      }
      goto LABEL_39;
    case 0x1F:
      int v28 = v30;
      long long v29 = xmmword_1CDB15990;
      llvm::SCCPInstVisitor::getFeasibleSuccessors(this, (uint64_t)a2, &v28);
      if (v29)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        int v7 = (llvm::BasicBlock *)*((void *)a2 + 5);
        uint64_t v8 = (llvm::BasicBlock **)((char *)a2 - 32);
        uint64_t v9 = 2 * v29;
        unsigned int v10 = -1;
        uint64_t v11 = (llvm::BasicBlock **)((char *)a2 - 32);
        do
        {
          if (*((unsigned char *)v28 + v6))
          {
            int v17 = v11;
            if (*((unsigned char *)a2 + 16) != 30)
            {
              int v17 = (llvm::BasicBlock **)((char *)a2 - 32);
              switch(*((unsigned char *)a2 + 16))
              {
                case ' ':
                case '&':
                  int v25 = *((_DWORD *)a2 + 5);
                  if ((v25 & 0x40000000) != 0) {
                    uint64_t v26 = (char *)*((void *)a2 - 1);
                  }
                  else {
                    uint64_t v26 = (char *)a2 - 32 * (v25 & 0x7FFFFFF);
                  }
                  unint64_t v21 = &v26[32 * v6];
                  goto LABEL_71;
                case '!':
                  uint64_t v27 = -64;
                  if (!v5) {
                    uint64_t v27 = -96;
                  }
                  int v17 = (llvm::BasicBlock **)((char *)a2 + v27);
                  break;
                case '""':
                case '#':
LABEL_82:
                  __break(1u);
LABEL_83:
                  int v22 = *((_DWORD *)a2 + 5);
                  if ((v22 & 0x40000000) != 0) {
                    int v23 = (char *)*((void *)a2 - 1);
                  }
                  else {
                    int v23 = (char *)a2 - 32 * (v22 & 0x7FFFFFF);
                  }
                  uint64_t v16 = &v23[32 * v6];
                  goto LABEL_52;
                case '$':
                  if ((*((_WORD *)a2 + 9) & 1) == 0)
                  {
                    unsigned int v18 = 0;
                    goto LABEL_64;
                  }
                  unint64_t v21 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
LABEL_71:
                  int v17 = (llvm::BasicBlock **)(v21 + 32);
                  break;
                case '%':
                  break;
                case '\'':
                  if (v5) {
                    int v17 = &v8[4 * v10] - 4 * *((unsigned int *)a2 + 20);
                  }
                  else {
                    int v17 = (llvm::BasicBlock **)((char *)a2 - 32 * *((unsigned int *)a2 + 20) - 64);
                  }
                  break;
                default:
                  int v19 = *((_DWORD *)a2 + 5);
                  if ((v19 & 0x40000000) != 0) {
                    unint64_t v20 = (char *)*((void *)a2 - 1);
                  }
                  else {
                    unint64_t v20 = (char *)a2 - 32 * (v19 & 0x7FFFFFF);
                  }
                  unint64_t v21 = &v20[32 * (v5 & 0xFFFFFFFE)];
                  goto LABEL_71;
              }
            }
            unsigned int v18 = *v17;
LABEL_64:
            llvm::SCCPInstVisitor::markEdgeExecutable(this, v7, v18);
          }
          ++v6;
          v11 -= 4;
          v5 += 2;
          ++v10;
        }
        while (v9 != v5);
      }
LABEL_39:
      if (v28 != v30) {
        free(v28);
      }
      return;
    case 0x20:
    case 0x24:
    case 0x25:
      goto LABEL_76;
    case 0x21:
      goto LABEL_74;
    case 0x22:
    case 0x23:
    case 0x3F:
      return;
    case 0x26:
      sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
LABEL_76:
      llvm::SCCPInstVisitor::visitTerminator(this, a2);
      break;
    case 0x27:
LABEL_74:
      sub_1CD88EA04(this, a2, a3);
      break;
    case 0x28:
      llvm::SCCPInstVisitor::visitUnaryOperator(this, a2);
      break;
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
      llvm::SCCPInstVisitor::visitBinaryOperator(this, a2);
      break;
    case 0x3B:
    case 0x40:
    case 0x41:
    case 0x4F:
    case 0x50:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5E:
    case 0x5F:
      sub_1CD1F4CA8((BOOL)this, (uint64_t)a2);
      break;
    case 0x3C:
      llvm::SCCPInstVisitor::visitLoadInst(this, a2);
      break;
    case 0x3D:
      llvm::SCCPInstVisitor::visitStoreInst(this, a2);
      break;
    case 0x3E:
      llvm::SCCPInstVisitor::visitGetElementPtrInst(this, a2);
      break;
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
      llvm::SCCPInstVisitor::visitCastInst(this, a2);
      break;
    case 0x51:
    case 0x52:
      llvm::SCCPInstVisitor::visitCmpInst(this, a2);
      break;
    case 0x53:
      llvm::SCCPInstVisitor::visitPHINode(this, a2);
      break;
    case 0x54:
      llvm::SCCPInstVisitor::handleCallResult(this, a2, a3);
      llvm::SCCPInstVisitor::handleCallArguments(this, a2);
      break;
    case 0x55:
      llvm::SCCPInstVisitor::visitSelectInst(this, a2);
      break;
    case 0x5C:
      llvm::SCCPInstVisitor::visitExtractValueInst(this, a2);
      break;
    case 0x5D:
      llvm::SCCPInstVisitor::visitInsertValueInst((uint64_t)this, a2);
      break;
    default:
      llvm::SCCPInstVisitor::visitReturnInst((uint64_t)this, a2);
      break;
  }
}

uint64_t sub_1CD204814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  sub_1CBFF6D30(a1 + 8, a3);
  *(void *)(a1 + 40) = a1 + 72;
  *(void *)(a1 + 48) = a1 + 72;
  *(void *)(a1 + 56) = 8;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = a1 + 336;
  *(void *)(a1 + 312) = a1 + 336;
  *(void *)(a1 + 320) = 16;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 464) = a1 + 496;
  *(void *)(a1 + 472) = a1 + 496;
  *(void *)(a1 + 480) = 16;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 624) = a1 + 656;
  *(void *)(a1 + 632) = a1 + 656;
  *(void *)(a1 + 640) = 16;
  *(_DWORD *)(a1 + 648) = 0;
  *(void *)(a1 + 784) = a1 + 800;
  *(void *)(a1 + 792) = 0x4000000000;
  *(void *)(a1 + 1312) = a1 + 1328;
  *(void *)(a1 + 1320) = 0x4000000000;
  *(void *)(a1 + 1840) = a1 + 1856;
  *(void *)(a1 + 1848) = 0x4000000000;
  *(_DWORD *)(a1 + 2384) = 0;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_DWORD *)(a1 + 2408) = 0;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_DWORD *)(a1 + 2432) = 0;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(void *)(a1 + 2440) = a4;
  return a1;
}

uint64_t sub_1CD204928@<X0>(_DWORD *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v13 = 0;
  uint64_t result = sub_1CD2049C8((uint64_t)a1, a2, &v13);
  uint64_t v9 = v13;
  if (result)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD204A5C(a1, (uint64_t)a2, a2, v13);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)(result + 8) = v10;
    *(_OWORD *)(result + 16) = *(_OWORD *)(a3 + 1);
    char v11 = 1;
  }
  uint64_t v12 = *(void *)a1 + 32 * a1[4];
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v11;
  return result;
}

uint64_t sub_1CD2049C8(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    unsigned int v4 = v3 - 1;
    uint64_t v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v6 = (void *)(*(void *)a1 + 32 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        int v11 = v5 + v9++;
        uint64_t v5 = v11 & v4;
        uint64_t v6 = (void *)(*(void *)a1 + 32 * v5);
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

void *sub_1CD204A5C(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD204B10((uint64_t)a1, v7);
  int v9 = 0;
  sub_1CD2049C8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CD204B10(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD204BDC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      void *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD204BDC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      sub_1CD2049C8(v5, (void *)a2, &v11);
      int v9 = v11;
      *uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      v9[1] = v10;
      *((_OWORD *)v9 + 1) = *(_OWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
      uint64_t result = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      if (result)
      {
        llvm::PredicateInfo::~PredicateInfo((llvm::PredicateInfo *)result);
        uint64_t result = MEMORY[0x1D25D9CE0]();
      }
    }
    a2 += 32;
  }
  return result;
}

void *sub_1CD204CC0(_DWORD *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CD204D24((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD204DBC(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    *((_WORD *)v5 + 4) = 0;
  }
  return v5;
}

uint64_t sub_1CD204D24(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v6 = (void *)(*(void *)a1 + 48 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(*(void *)a1 + 48 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

void *sub_1CD204DBC(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD204E70((uint64_t)a1, v7);
  int v9 = 0;
  sub_1CD204D24((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CD204E70(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD204F48(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 48 * v10;
    do
    {
      void *result = -4096;
      result += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD204F48(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 48 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD204D24(v5, (void *)a2, &v11);
      int v9 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_WORD *)v9 + 4) = *(unsigned __int8 *)(a2 + 8);
      int v10 = *(unsigned __int8 *)(a2 + 8);
      if ((v10 - 4) < 2)
      {
        *((_DWORD *)v9 + 6) = *(_DWORD *)(a2 + 24);
        v9[2] = *(void *)(a2 + 16);
        *(_DWORD *)(a2 + 24) = 0;
        *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 + 40);
        v9[4] = *(void *)(a2 + 32);
        *(_DWORD *)(a2 + 40) = 0;
        *((unsigned char *)v9 + 9) = *(unsigned char *)(a2 + 9);
      }
      else if ((v10 - 2) < 2)
      {
        v9[2] = *(void *)(a2 + 16);
      }
      *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a2 + 9) << 8;
      ++*(_DWORD *)(v5 + 8);
      if ((*(_WORD *)(a2 + 8) & 0xFE) == 4) {
        uint64_t result = sub_1CC05EB8C(a2 + 16);
      }
    }
    a2 += 48;
  }
  return result;
}

uint64_t sub_1CD205084(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    int v10 = (uint64_t *)(a1 + 24 * v9);
    uint64_t v11 = *v10;
    int v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -2;
        }
        if (v18 && v11 == -8192) {
          uint64_t v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        int v10 = (uint64_t *)(a1 + 24 * (v20 & v8));
        uint64_t v11 = *v10;
        int v12 = *((_DWORD *)v10 + 2);
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        int v10 = v16;
      }
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_OWORD *sub_1CD20517C(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD88ECC8(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      _OWORD *result = xmmword_1CFAC30E0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

char *sub_1CD205258(int64x2_t *a1, _OWORD *a2, __int16 *a3)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249) {
    unint64_t v8 = 0x492492492492492;
  }
  else {
    unint64_t v8 = v4;
  }
  int v28 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x492492492492492) {
      sub_1CB833614();
    }
    unsigned int v9 = operator new(56 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = (char *)&v9[7 * v3];
  int v25 = v9;
  v26.i64[0] = (uint64_t)v10;
  uint64_t v11 = (char *)&v9[7 * v8];
  uint64_t v27 = v11;
  *(_OWORD *)uint64_t v10 = *a2;
  __int16 v12 = *a3;
  int v13 = *a3;
  *((_WORD *)v10 + 8) = v13;
  if ((v13 - 4) < 2)
  {
    uint64_t v24 = (char *)&v9[7 * v3];
    *((_DWORD *)v24 + 8) = *((_DWORD *)a3 + 4);
    *((void *)v24 + 3) = *((void *)a3 + 1);
    *((_DWORD *)a3 + 4) = 0;
    *((_DWORD *)v24 + 12) = *((_DWORD *)a3 + 8);
    *((void *)v24 + 5) = *((void *)a3 + 3);
    *((_DWORD *)a3 + 8) = 0;
    *((_WORD *)v10 + 8) = v12;
  }
  else if ((v13 - 2) < 2)
  {
    v9[7 * v3 + 3] = *((void *)a3 + 1);
  }
  *a3 = v12 & 0xFF00;
  uint64_t v14 = v10 + 56;
  v26.i64[1] = (uint64_t)(v10 + 56);
  uint64_t v16 = a1->i64[0];
  unint64_t v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v15);
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      int v19 = &v10[v18];
      uint64_t v20 = v15 + v18;
      *(_OWORD *)(v19 - 56) = *(_OWORD *)(v15 + v18 - 56);
      *((_WORD *)v19 - 20) = *(unsigned __int8 *)(v15 + v18 - 40);
      int v21 = *(unsigned __int8 *)(v15 + v18 - 40);
      if ((v21 - 4) < 2)
      {
        *((_DWORD *)v19 - 6) = *(_DWORD *)(v20 - 24);
        *((void *)v19 - 4) = *(void *)(v20 - 32);
        *(_DWORD *)(v20 - 24) = 0;
        *((_DWORD *)v19 - 2) = *(_DWORD *)(v20 - 8);
        *((void *)v19 - 2) = *(void *)(v20 - 16);
        *(_DWORD *)(v20 - 8) = 0;
        *(v19 - 39) = *(unsigned char *)(v20 - 39);
      }
      else if ((v21 - 2) < 2)
      {
        *(void *)&v10[v18 - 32] = *(void *)(v15 + v18 - 32);
      }
      *(_WORD *)(v20 - 40) = *(unsigned __int8 *)(v20 - 39) << 8;
      v18 -= 56;
    }
    while (v15 + v18 != v16);
    int64x2_t v17 = *a1;
    v10 += v18;
    uint64_t v14 = (char *)v26.i64[1];
    uint64_t v11 = v27;
  }
  a1->i64[0] = (uint64_t)v10;
  a1->i64[1] = (uint64_t)v14;
  int64x2_t v26 = v17;
  int v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v11;
  uint64_t v27 = v22;
  int v25 = (void *)v17.i64[0];
  sub_1CD88ED98((uint64_t)&v25);
  return v14;
}

char *sub_1CD2054BC(int64x2_t *a1, void *a2, __int16 *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v4;
  }
  int v28 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1CB833614();
    }
    unsigned int v9 = operator new(48 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = (char *)&v9[6 * v3];
  int v25 = v9;
  v26.i64[0] = (uint64_t)v10;
  uint64_t v11 = (char *)&v9[6 * v8];
  uint64_t v27 = v11;
  *(void *)uint64_t v10 = *a2;
  __int16 v12 = *a3;
  int v13 = *a3;
  *((_WORD *)v10 + 4) = v13;
  if ((v13 - 4) < 2)
  {
    uint64_t v24 = (char *)&v9[6 * v3];
    *((_DWORD *)v24 + 6) = *((_DWORD *)a3 + 4);
    *((void *)v24 + 2) = *((void *)a3 + 1);
    *((_DWORD *)a3 + 4) = 0;
    *((_DWORD *)v24 + 10) = *((_DWORD *)a3 + 8);
    *((void *)v24 + 4) = *((void *)a3 + 3);
    *((_DWORD *)a3 + 8) = 0;
    *((_WORD *)v10 + 4) = v12;
  }
  else if ((v13 - 2) < 2)
  {
    v9[6 * v3 + 2] = *((void *)a3 + 1);
  }
  *a3 = v12 & 0xFF00;
  uint64_t v14 = v10 + 48;
  v26.i64[1] = (uint64_t)(v10 + 48);
  uint64_t v16 = a1->i64[0];
  unint64_t v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v15);
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = &v10[v17];
      uint64_t v19 = v15 + v17;
      *((void *)v18 - 6) = *(void *)(v15 + v17 - 48);
      *((_WORD *)v18 - 20) = *(unsigned __int8 *)(v15 + v17 - 40);
      int v20 = *(unsigned __int8 *)(v15 + v17 - 40);
      if ((v20 - 4) < 2)
      {
        *((_DWORD *)v18 - 6) = *(_DWORD *)(v19 - 24);
        *((void *)v18 - 4) = *(void *)(v19 - 32);
        *(_DWORD *)(v19 - 24) = 0;
        *((_DWORD *)v18 - 2) = *(_DWORD *)(v19 - 8);
        *((void *)v18 - 2) = *(void *)(v19 - 16);
        *(_DWORD *)(v19 - 8) = 0;
        *(v18 - 39) = *(unsigned char *)(v19 - 39);
      }
      else if ((v20 - 2) < 2)
      {
        *(void *)&v10[v17 - 32] = *(void *)(v15 + v17 - 32);
      }
      *(_WORD *)(v19 - 40) = *(unsigned __int8 *)(v19 - 39) << 8;
      v17 -= 48;
    }
    while (v15 + v17 != v16);
    int64x2_t v21 = *a1;
    v10 += v17;
    uint64_t v14 = (char *)v26.i64[1];
    uint64_t v11 = v27;
  }
  a1->i64[0] = (uint64_t)v10;
  a1->i64[1] = (uint64_t)v14;
  int64x2_t v26 = v21;
  int v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v11;
  uint64_t v27 = v22;
  int v25 = (void *)v21.i64[0];
  sub_1CD205708((uint64_t)&v25);
  return v14;
}

uint64_t sub_1CD205708(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = v3 - 48;
      *(void *)(a1 + 16) = v3 - 48;
      if ((*(_WORD *)(v3 - 40) & 0xFE) == 4)
      {
        uint64_t v6 = v2;
        sub_1CC05EB8C(v3 - 32);
        uint64_t v2 = v6;
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CD205788(int32x2_t *a1, void *a2)
{
  uint64_t v8 = 0;
  uint64_t v3 = sub_1CD203180((uint64_t)a1, a2, &v8);
  if (v3)
  {
    uint64_t v4 = v8;
    if ((*(_WORD *)(v8 + 8) & 0xFE) == 4)
    {
      if (*(_DWORD *)(v8 + 40) >= 0x41u)
      {
        uint64_t v6 = *(void *)(v8 + 32);
        if (v6) {
          MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(v4 + 24) >= 0x41u)
      {
        uint64_t v7 = *(void *)(v4 + 16);
        if (v7) {
          MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
        }
      }
    }
    *(void *)uint64_t v4 = -8192;
    a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t *sub_1CD205858(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 4);
  if (!v3) {
    return (uint64_t *)(v2 + 48 * v3);
  }
  unsigned int v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t result = (uint64_t *)(v2 + 48 * v4);
  uint64_t v6 = *result;
  if (*result != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & (v3 - 1);
      uint64_t result = (uint64_t *)(v2 + 48 * v4);
      uint64_t v6 = *result;
      if (*result == a2) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 48 * v3);
  }
  return result;
}

uint64_t sub_1CD2058CC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 48 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 48 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CD205964(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unsigned int v13 = 0;
LABEL_15:
    uint64_t v6 = sub_1CD203218(a1, a2, v13);
    *uint64_t v6 = *a2;
    *((_WORD *)v6 + 4) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 48 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 48 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      unsigned int v13 = v8;
    }
    else {
      unsigned int v13 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

uint64_t sub_1CD205A24(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v4 = (void *)(a1 + 16 * v8);
    uint64_t v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          BOOL v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        int v4 = (void *)(a1 + 16 * (v13 & v7));
        uint64_t v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        int v4 = v10;
      }
    }
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t sub_1CD205AB8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 48 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          BOOL v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 48 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CD205B50(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 2432);
  uint64_t v3 = *(void *)(a1 + 2416);
  if (v2)
  {
    int v46 = (void **)(v3 + 16);
    uint64_t v47 = 56 * v2;
    do
    {
      if (((unint64_t)*(v46 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v46 != *(v46 - 1)) {
        free(*v46);
      }
      v46 += 7;
      v47 -= 56;
    }
    while (v47);
    uint64_t v3 = *(void *)(a1 + 2416);
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  uint64_t v4 = *(unsigned int *)(a1 + 2408);
  uint64_t v5 = *(void *)(a1 + 2392);
  if (v4)
  {
    uint64_t v43 = (llvm::PredicateInfo **)(v5 + 8);
    uint64_t v44 = 32 * v4;
    do
    {
      if (((unint64_t)*(v43 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v45 = *v43;
        *uint64_t v43 = 0;
        if (v45)
        {
          llvm::PredicateInfo::~PredicateInfo(v45);
          MEMORY[0x1D25D9CE0]();
        }
      }
      v43 += 4;
      v44 -= 32;
    }
    while (v44);
    uint64_t v5 = *(void *)(a1 + 2392);
  }
  MEMORY[0x1D25D9CD0](v5, 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 2368), 8);
  uint64_t v6 = *(void **)(a1 + 1840);
  if (v6 != (void *)(a1 + 1856)) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 1312);
  if (v7 != (void *)(a1 + 1328)) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 784);
  if (v8 != (void *)(a1 + 800)) {
    free(v8);
  }
  uint64_t v9 = *(void **)(a1 + 632);
  if (v9 != *(void **)(a1 + 624)) {
    free(v9);
  }
  BOOL v10 = *(void **)(a1 + 472);
  if (v10 != *(void **)(a1 + 464)) {
    free(v10);
  }
  int v11 = *(void **)(a1 + 312);
  if (v11 != *(void **)(a1 + 304)) {
    free(v11);
  }
  uint64_t v12 = *(void *)(a1 + 280);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 288);
    uint64_t v14 = *(void **)(a1 + 280);
    if (v13 != v12)
    {
      do
      {
        if ((*(_WORD *)(v13 - 40) & 0xFE) == 4)
        {
          if (*(_DWORD *)(v13 - 8) >= 0x41u)
          {
            uint64_t v38 = *(void *)(v13 - 16);
            if (v38) {
              MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
            }
          }
          if (*(_DWORD *)(v13 - 24) >= 0x41u)
          {
            uint64_t v39 = *(void *)(v13 - 32);
            if (v39) {
              MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
            }
          }
        }
        v13 -= 56;
      }
      while (v13 != v12);
      uint64_t v14 = *(void **)(a1 + 280);
    }
    *(void *)(a1 + 288) = v12;
    operator delete(v14);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 256), 8);
  uint64_t v15 = *(void *)(a1 + 232);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 240);
    uint64_t v17 = *(void **)(a1 + 232);
    if (v16 != v15)
    {
      do
      {
        if ((*(_WORD *)(v16 - 40) & 0xFE) == 4)
        {
          if (*(_DWORD *)(v16 - 8) >= 0x41u)
          {
            uint64_t v40 = *(void *)(v16 - 16);
            if (v40) {
              MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
            }
          }
          if (*(_DWORD *)(v16 - 24) >= 0x41u)
          {
            uint64_t v41 = *(void *)(v16 - 32);
            if (v41) {
              MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
            }
          }
        }
        v16 -= 48;
      }
      while (v16 != v15);
      uint64_t v17 = *(void **)(a1 + 232);
    }
    *(void *)(a1 + 240) = v15;
    operator delete(v17);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 208), 8);
  uint64_t v18 = *(unsigned int *)(a1 + 200);
  uint64_t v19 = *(void *)(a1 + 184);
  if (v18)
  {
    uint64_t v48 = v19 + 24;
    uint64_t v49 = 48 * v18;
    do
    {
      if ((*(void *)(v48 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000 && (*(_WORD *)(v48 - 16) & 0xFE) == 4)
      {
        if (*(_DWORD *)(v48 + 16) >= 0x41u)
        {
          uint64_t v50 = *(void *)(v48 + 8);
          if (v50) {
            MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)v48 >= 0x41u)
        {
          uint64_t v51 = *(void *)(v48 - 8);
          if (v51) {
            MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
          }
        }
      }
      v48 += 48;
      v49 -= 48;
    }
    while (v49);
    uint64_t v19 = *(void *)(a1 + 184);
  }
  MEMORY[0x1D25D9CD0](v19, 8);
  unsigned int v20 = *(_DWORD *)(a1 + 176);
  uint64_t v21 = *(void *)(a1 + 160);
  if (v20)
  {
    uint64_t v30 = v21 + 56 * v20;
    uint64_t v31 = v21 + 24;
    do
    {
      uint64_t v33 = v31 - 24;
      uint64_t v32 = *(void *)(v31 - 24);
      int v34 = *(_DWORD *)(v31 - 16);
      if (v32 != -4096 || v34 != -1)
      {
        BOOL v36 = v32 == -8192 && v34 == -2;
        if (!v36 && (*(_WORD *)(v31 - 8) & 0xFE) == 4)
        {
          if (*(_DWORD *)(v31 + 24) >= 0x41u)
          {
            uint64_t v42 = *(void *)(v31 + 16);
            if (v42) {
              MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
            }
          }
          if (*(_DWORD *)(v31 + 8) >= 0x41u && *(void *)v31) {
            MEMORY[0x1D25D9CB0](*(void *)v31, 0x1000C8000313F17);
          }
        }
      }
      v31 += 56;
    }
    while (v33 + 56 != v30);
    uint64_t v21 = *(void *)(a1 + 160);
  }
  MEMORY[0x1D25D9CD0](v21, 8);
  uint64_t v22 = *(unsigned int *)(a1 + 152);
  uint64_t v23 = *(void *)(a1 + 136);
  if (v22)
  {
    uint64_t v24 = v23 + 24;
    uint64_t v25 = 48 * v22;
    do
    {
      if ((*(void *)(v24 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000 && (*(_WORD *)(v24 - 16) & 0xFE) == 4)
      {
        if (*(_DWORD *)(v24 + 16) >= 0x41u)
        {
          uint64_t v37 = *(void *)(v24 + 8);
          if (v37) {
            MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)v24 >= 0x41u)
        {
          uint64_t v26 = *(void *)(v24 - 8);
          if (v26) {
            MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
          }
        }
      }
      v24 += 48;
      v25 -= 48;
    }
    while (v25);
    uint64_t v23 = *(void *)(a1 + 136);
  }
  MEMORY[0x1D25D9CD0](v23, 8);
  uint64_t v27 = *(void **)(a1 + 48);
  if (v27 != *(void **)(a1 + 40)) {
    free(v27);
  }
  uint64_t v28 = *(void *)(a1 + 32);
  if (v28 == a1 + 8)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 32))(a1 + 8);
  }
  else if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 40))(v28);
  }
  return a1;
}

uint64_t sub_1CD2060AC(uint64_t a1)
{
  v19[20] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) == 3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*(void *)(a1 + 72) == a1 + 72 && (*(unsigned char *)(a1 + 34) & 0x80) == 0)
  {
    return 0;
  }
  uint64_t v17 = v19;
  uint64_t v18 = 0x1400000000;
  uint64_t v1 = a1 + 72;
  for (uint64_t i = *(void *)(a1 + 80); i != v1; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = i - 24;
    if (!i) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4 != v3 + 40)
    {
      while (1)
      {
        if (v4) {
          uint64_t v5 = v4 - 24;
        }
        else {
          uint64_t v5 = 0;
        }
        BOOL v6 = sub_1CC070820(v5);
        if (!v6) {
          uint64_t v5 = 0;
        }
        if (v4 && v6 && sub_1CC27FA84(*(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF))))
        {
          if (v18 >= (unint64_t)HIDWORD(v18)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v17 + v18) = v5;
          LODWORD(v18) = v18 + 1;
        }
        uint64_t v4 = *(void *)(v4 + 8);
        uint64_t v7 = i - 24;
        if (!i) {
          uint64_t v7 = 0;
        }
        if (v4 == v7 + 40) {
          break;
        }
LABEL_32:
        if (i == v1) {
          goto LABEL_33;
        }
      }
      while (1)
      {
        uint64_t i = *(void *)(i + 8);
        if (i == v1) {
          break;
        }
        uint64_t v8 = i - 24;
        if (!i) {
          uint64_t v8 = 0;
        }
        uint64_t v4 = *(void *)(v8 + 48);
        if (v4 != v8 + 40) {
          goto LABEL_32;
        }
      }
LABEL_33:
      if (v18)
      {
        uint64_t v9 = *(llvm::Instruction **)v17;
        DerivedPtr = (llvm::Value *)llvm::GCRelocateInst::getDerivedPtr(*(llvm::GCRelocateInst **)v17);
        if (*(void *)v9 != *(void *)DerivedPtr)
        {
          int v11 = operator new(0x60uLL);
          uint64_t v12 = (llvm::Value *)(v11 + 8);
          v11[13] = v11[13] & 0x38000000 | 1;
          *(void *)int v11 = 0;
          *((void *)v11 + 1) = 0;
          *((void *)v11 + 2) = 0;
          *((void *)v11 + 3) = v11 + 8;
          uint64_t v13 = *(llvm::Type **)v9;
          uint64_t v15 = "cast";
          __int16 v16 = 259;
          llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v11 + 8), DerivedPtr, v13, &v15, v9);
          DerivedPtr = v12;
        }
        llvm::Value::doRAUW(v9, DerivedPtr, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      if (v17 != v19) {
        free(v17);
      }
      return 0;
    }
  }
  return 0;
}

void llvm::initializeStripGCRelocatesLegacyPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFD780, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD2063D0;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFD780, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD2063D0()
{
}

void sub_1CD206470()
{
}

void sub_1CD20653C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD206578(uint64_t a1, uint64_t a2)
{
  return sub_1CD2060AC(a2);
}

double llvm::SSAUpdater::SSAUpdater(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  return result;
}

void llvm::SSAUpdater::~SSAUpdater(void **this)
{
  uint64_t v2 = *this;
  if (*this)
  {
    MEMORY[0x1D25D9CD0](*v2, 8);
    MEMORY[0x1D25D9CE0](v2, 0x1020C405AF6BDC9);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

double llvm::SSAUpdater::Initialize(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v8 = *(_DWORD **)a1;
  if (!v8) {
    operator new();
  }
  sub_1CCA937E4(v8);
  *(void *)(a1 + 8) = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = a4;
    unint64_t v15 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v15) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_10:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)p_dst + a4) = 0;
  uint64_t v12 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v12);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)uint64_t v12 = __dst;
  *(void *)(a1 + 32) = v15;
  return result;
}

BOOL llvm::SSAUpdater::HasValueForBlock(uint64_t **this, llvm::BasicBlock *a2)
{
  int v2 = *((_DWORD *)*this + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = **this;
  int v4 = v2 - 1;
  unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  BOOL v6 = *(llvm::BasicBlock **)(v3 + 16 * v5);
  if (v6 == a2) {
    return 1;
  }
  int v7 = 1;
  do
  {
    BOOL result = v6 != (llvm::BasicBlock *)-4096;
    if (v6 == (llvm::BasicBlock *)-4096) {
      break;
    }
    unsigned int v9 = v5 + v7++;
    unsigned int v5 = v9 & v4;
    BOOL v6 = *(llvm::BasicBlock **)(v3 + 16 * v5);
  }
  while (v6 != a2);
  return result;
}

uint64_t *llvm::SSAUpdater::AddAvailableValue(uint64_t **this, llvm::BasicBlock *a2, llvm::Value *a3)
{
  unint64_t v15 = a2;
  BOOL result = *this;
  int v5 = *((_DWORD *)result + 4);
  if (!v5)
  {
    uint64_t v14 = 0;
LABEL_15:
    BOOL result = sub_1CC0A3E2C((uint64_t)result, (uint64_t)&v15, (uint64_t *)&v15, v14);
    uint64_t v8 = result;
    uint64_t *result = (uint64_t)v15;
    result[1] = 0;
    goto LABEL_16;
  }
  int v6 = v5 - 1;
  unsigned int v7 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = (uint64_t *)(*result + 16 * v7);
  unsigned int v9 = (llvm::BasicBlock *)*v8;
  if ((llvm::BasicBlock *)*v8 != a2)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != (llvm::BasicBlock *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (llvm::BasicBlock *)-8192;
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      uint64_t v8 = (uint64_t *)(*result + 16 * (v13 & v6));
      unsigned int v9 = (llvm::BasicBlock *)*v8;
      if ((llvm::BasicBlock *)*v8 == a2) {
        goto LABEL_16;
      }
    }
    if (v10) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v8;
    }
    goto LABEL_15;
  }
LABEL_16:
  v8[1] = (uint64_t)a3;
  return result;
}

llvm::UndefValue *llvm::SSAUpdater::GetValueAtEndOfBlockInternal(llvm::SSAUpdater *this, llvm::BasicBlock *a2)
{
  v326[10] = *MEMORY[0x1E4F143B8];
  __int16 v297 = a2;
  uint64_t v3 = *(void **)this;
  int v4 = *(_DWORD *)(*(void *)this + 16);
  if (v4)
  {
    int v5 = v4 - 1;
    unsigned int v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v7 = (uint64_t *)(*v3 + 16 * v6);
    uint64_t v8 = (llvm::BasicBlock *)*v7;
    if ((llvm::BasicBlock *)*v7 == a2) {
      goto LABEL_16;
    }
    unsigned int v9 = 0;
    int v10 = 1;
    while (v8 != (llvm::BasicBlock *)-4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == (llvm::BasicBlock *)-8192;
      }
      if (v11) {
        unsigned int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      unsigned int v7 = (uint64_t *)(*v3 + 16 * v6);
      uint64_t v8 = (llvm::BasicBlock *)*v7;
      if ((llvm::BasicBlock *)*v7 == a2) {
        goto LABEL_16;
      }
    }
    if (v9) {
      unsigned int v13 = v9;
    }
    else {
      unsigned int v13 = v7;
    }
  }
  else
  {
    unsigned int v13 = 0;
  }
  unsigned int v7 = sub_1CC0A3E2C((uint64_t)v3, (uint64_t)&v297, (uint64_t *)&v297, v13);
  *unsigned int v7 = (uint64_t)v297;
  v7[1] = 0;
LABEL_16:
  uint64_t v14 = (llvm::UndefValue *)v7[1];
  if (v14) {
    return v14;
  }
  uint64_t v16 = *((void *)this + 5);
  int v301 = this;
  unsigned int v302 = v3;
  v304[0] = 0;
  v304[1] = 0;
  uint64_t v303 = v16;
  int v305 = 0;
  uint64_t v306 = 0;
  unsigned int v307 = 0;
  uint64_t v308 = v310;
  uint64_t v309 = 0x400000000;
  unsigned int v311 = (char *)&v312 + 8;
  uint64_t v313 = 1;
  uint64_t v17 = v297;
  unint64_t v298 = v297;
  int v314 = v316;
  uint64_t v315 = 0x6400000000;
  int v300 = v297;
  unsigned int v324 = v326;
  uint64_t v325 = 0xA00000000;
  unsigned int v320 = v322;
  uint64_t v321 = 0x4000000000;
  long long v312 = xmmword_1CD96DBD0;
  uint64_t v19 = (uint64_t)operator new(0x1000uLL, (std::align_val_t)8uLL);
  if (v309 >= HIDWORD(v309)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v308 + v309) = v19;
  int v20 = v305;
  LODWORD(v309) = v309 + 1;
  uint64_t v21 = v304[0];
  uint64_t v306 = (char *)(v19 + 64);
  unsigned int v307 = (char *)(v19 + 4096);
  *(void *)(v19 + 32) = 0;
  *(_DWORD *)(v19 + 40) = 0;
  *(void *)(v19 + 8) = 0;
  *(void *)(v19 + 16) = 0;
  *(void *)uint64_t v19 = v17;
  *(_DWORD *)(v19 + 24) = 0;
  *(void *)(v19 + 48) = 0;
  *(void *)(v19 + 56) = 0;
  if (v20)
  {
    int v22 = v20 - 1;
    unsigned int v23 = v22 & ((v17 >> 4) ^ (v17 >> 9));
    uint64_t v24 = (uint64_t *)(v21 + 16 * v23);
    uint64_t v25 = *v24;
    if ((llvm::BasicBlock *)*v24 == v17) {
      goto LABEL_34;
    }
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      uint64_t v24 = (uint64_t *)(v21 + 16 * v23);
      uint64_t v25 = *v24;
      if ((llvm::BasicBlock *)*v24 == v17) {
        goto LABEL_34;
      }
    }
    if (v26) {
      uint64_t v30 = v26;
    }
    else {
      uint64_t v30 = v24;
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  uint64_t v24 = sub_1CD209B44((uint64_t)v304, (uint64_t *)&v300, v30);
  *uint64_t v24 = (uint64_t)v17;
  v24[1] = 0;
LABEL_34:
  v24[1] = v19;
  if (v321 >= HIDWORD(v321)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v320 + v321) = v19;
  uint64_t v317 = v319;
  uint64_t v318 = 0xA00000000;
  BOOL v44 = __CFADD__(v321, 1);
  unsigned int v31 = v321 + 1;
  LODWORD(v321) = v321 + 1;
  if (!v44)
  {
    uint64_t v32 = (uint64_t *)&v306;
    LOBYTE(v19) = 30;
    uint64_t v33 = -8192;
    do
    {
      uint64_t v34 = *((void *)v320 + v31 - 1);
      LODWORD(v321) = v31 - 1;
      LODWORD(v318) = 0;
      uint64_t v35 = *(void *)(*(void *)v34 + 48);
      uint64_t v36 = v35 - 24;
      if (!v35) {
        uint64_t v36 = 0;
      }
      int v37 = *(unsigned __int8 *)(v36 + 16);
      if (v37 != 83) {
        uint64_t v36 = 0;
      }
      if (v35 && v37 == 83)
      {
        int v38 = *(_DWORD *)(v36 + 20);
        if ((v38 & 0x40000000) != 0)
        {
          uint64_t v40 = *(void *)(v36 - 8);
          unint64_t v39 = v38 & 0x7FFFFFF;
        }
        else
        {
          unint64_t v39 = v38 & 0x7FFFFFF;
          uint64_t v40 = v36 - 32 * v39;
        }
        if (v39 > HIDWORD(v318)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v39)
        {
          memcpy(v317, (const void *)(v40 + 32 * *(unsigned int *)(v36 + 60)), 8 * v39);
          int v47 = v318;
        }
        else
        {
          int v47 = 0;
        }
        unsigned int v46 = v47 + v39;
        LODWORD(v318) = v46;
      }
      else
      {
        for (uint64_t i = *(void *)(*(void *)v34 + 8); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v42 = *(void *)(i + 24);
          unsigned int v43 = *(unsigned __int8 *)(v42 + 16);
          if (v42) {
            BOOL v44 = v43 >= 0x1C;
          }
          else {
            BOOL v44 = 0;
          }
          if (v44 && v43 - 29 < 0xB) {
            break;
          }
        }
        sub_1CD19EFB4((uint64_t)&v317, (uint64_t)v317, i, 0);
        unsigned int v46 = v318;
      }
      *(_DWORD *)(v34 + 40) = v46;
      if (v46)
      {
        uint64_t v48 = sub_1CB906F34(v32, 8 * v46, 3);
        int v49 = *(_DWORD *)(v34 + 40);
        *(void *)(v34 + 48) = v48;
        if (v49)
        {
          unsigned int v50 = 0;
          do
          {
            uint64_t v51 = *((void *)v317 + v50);
            uint64_t v299 = v51;
            unsigned int v52 = v51 >> 4;
            if (v305)
            {
              unsigned int v53 = (v52 ^ (v51 >> 9)) & (v305 - 1);
              uint64_t v54 = (uint64_t *)(v304[0] + 16 * v53);
              uint64_t v55 = *v54;
              if (v51 == *v54) {
                goto LABEL_79;
              }
              uint64_t v56 = 0;
              int v57 = 1;
              while (v55 != -4096)
              {
                if (v56) {
                  BOOL v58 = 0;
                }
                else {
                  BOOL v58 = v55 == v33;
                }
                if (v58) {
                  uint64_t v56 = v54;
                }
                unsigned int v59 = v53 + v57++;
                unsigned int v53 = v59 & (v305 - 1);
                uint64_t v54 = (uint64_t *)(v304[0] + 16 * v53);
                uint64_t v55 = *v54;
                if (v51 == *v54) {
                  goto LABEL_79;
                }
              }
              if (v56) {
                int v60 = v56;
              }
              else {
                int v60 = v54;
              }
            }
            else
            {
              int v60 = 0;
            }
            uint64_t v54 = sub_1CD209B44((uint64_t)v304, &v299, v60);
            uint64_t *v54 = v51;
            v54[1] = 0;
LABEL_79:
            uint64_t v61 = v50;
            uint64_t v62 = v54[1];
            if (!v62)
            {
              int v63 = *((_DWORD *)v302 + 4);
              if (!v63) {
                goto LABEL_84;
              }
              uint64_t v64 = *v302;
              unsigned int v65 = v63 - 1;
              uint64_t v66 = (v63 - 1) & (v52 ^ (v51 >> 9));
              uint64_t v67 = *(void *)(*v302 + 16 * v66);
              if (v51 == v67)
              {
LABEL_98:
                uint64_t v69 = *(void *)(v64 + 16 * v66 + 8);
              }
              else
              {
                int v68 = 1;
                while (v67 != -4096)
                {
                  int v72 = v66 + v68++;
                  uint64_t v66 = v72 & v65;
                  uint64_t v67 = *(void *)(v64 + 16 * v66);
                  if (v51 == v67) {
                    goto LABEL_98;
                  }
                }
LABEL_84:
                uint64_t v69 = 0;
              }
              *((void *)&v312 + 1) += 64;
              if (((unint64_t)(v306 + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v306 + 64 > v307 - v306)
              {
                unsigned int v101 = v309 >> 7;
                if (v309 >> 7 >= 0x1E) {
                  LOBYTE(v101) = v19;
                }
                uint64_t v102 = 4096 << v101;
                unint64_t v70 = (unint64_t)operator new(4096 << v101, (std::align_val_t)8uLL);
                if (v309 >= (unint64_t)HIDWORD(v309)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v308 + v309) = v70;
                LODWORD(v309) = v309 + 1;
                unsigned int v307 = (char *)(v70 + v102);
              }
              else
              {
                unint64_t v70 = (unint64_t)(v306 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v306 = (char *)(v70 + 64);
              *(void *)unint64_t v70 = v51;
              *(void *)(v70 + 8) = v69;
              if (v69) {
                unint64_t v71 = v70;
              }
              else {
                unint64_t v71 = 0;
              }
              *(void *)(v70 + 16) = v71;
              *(_DWORD *)(v70 + 24) = 0;
              *(void *)(v70 + 32) = 0;
              *(_DWORD *)(v70 + 40) = 0;
              *(void *)(v70 + 48) = 0;
              *(void *)(v70 + 56) = 0;
              v54[1] = v70;
              *(void *)(*(void *)(v34 + 48) + 8 * v61) = v70;
              if (*(void *)(v70 + 8))
              {
                if (v325 >= (unint64_t)HIDWORD(v325)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v324[v325] = v70;
                LODWORD(v325) = v325 + 1;
              }
              else
              {
                if (v321 >= (unint64_t)HIDWORD(v321)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v320 + v321) = v70;
                LODWORD(v321) = v321 + 1;
              }
              goto LABEL_93;
            }
            *(void *)(*(void *)(v34 + 48) + 8 * v50) = v62;
LABEL_93:
            unsigned int v50 = v61 + 1;
          }
          while (v61 + 1 != *(_DWORD *)(v34 + 40));
        }
      }
      else
      {
LABEL_486:
        *(void *)(v34 + 48) = 0;
      }
      unsigned int v31 = v321;
    }
    while (v321);
  }
  *((void *)&v312 + 1) += 64;
  if (((unint64_t)(v306 + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v306 + 64 > v307 - v306)
  {
    unsigned int v268 = v309 >> 7;
    if (v309 >> 7 >= 0x1E) {
      LOBYTE(v268) = 30;
    }
    uint64_t v269 = 4096 << v268;
    uint64_t v32 = (uint64_t *)operator new(4096 << v268, (std::align_val_t)8uLL);
    if (v309 >= HIDWORD(v309)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v308 + v309) = v32;
    LODWORD(v309) = v309 + 1;
    unsigned int v307 = (char *)v32 + v269;
    unsigned int v73 = v321;
  }
  else
  {
    unsigned int v73 = 0;
    uint64_t v32 = (uint64_t *)((unint64_t)(v306 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v306 = (char *)(v32 + 8);
  v32[4] = 0;
  *((_DWORD *)v32 + 10) = 0;
  v32[1] = 0;
  v32[2] = 0;
  uint64_t *v32 = 0;
  *((_DWORD *)v32 + 6) = 0;
  v32[6] = 0;
  v32[7] = 0;
  for (unsigned int j = v325; v325; unsigned int j = v325)
  {
    uint64_t v75 = v324[j - 1];
    LODWORD(v325) = j - 1;
    *(void *)(v75 + 32) = v32;
    *(_DWORD *)(v75 + 24) = -1;
    if (v73 >= HIDWORD(v321)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v320 + v73) = v75;
    unsigned int v73 = v321 + 1;
    LODWORD(v321) = v321 + 1;
  }
  if (v73)
  {
    uint64_t v34 = 4294967294;
    uint64_t v33 = 1;
    while (1)
    {
      while (1)
      {
        uint64_t v76 = *((void *)v320 + v73 - 1);
        if (*(_DWORD *)(v76 + 24) != -2) {
          break;
        }
        *(_DWORD *)(v76 + 24) = v33;
        if (!*(void *)(v76 + 8))
        {
          if (v315 >= (unint64_t)HIDWORD(v315)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v314 + v315) = v76;
          LODWORD(v315) = v315 + 1;
          unsigned int v73 = v321;
        }
        uint64_t v33 = (v33 + 1);
        LODWORD(v321) = --v73;
        if (!v73) {
          goto LABEL_171;
        }
      }
      *(_DWORD *)(v76 + 24) = -2;
      uint64_t v77 = *(void *)(*(void *)v76 + 40);
      if (v77 != *(void *)v76 + 40) {
        break;
      }
LABEL_153:
      unsigned int v73 = v321;
      if (!v321) {
        goto LABEL_171;
      }
    }
    if (v77) {
      uint64_t v78 = v77 - 24;
    }
    else {
      uint64_t v78 = 0;
    }
    int v79 = *(unsigned __int8 *)(v78 + 16);
    int v80 = v79 - 29;
    if ((v79 - 29) >= 0xB) {
      uint64_t v81 = 0;
    }
    else {
      uint64_t v81 = v78;
    }
    if (v79 != 30)
    {
      unsigned int v82 = 2;
      switch(v80)
      {
        case 1:
LABEL_485:
          __break(1u);
          goto LABEL_486;
        case 2:
          unsigned int v82 = (*(_DWORD *)(v78 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_162;
        case 3:
        case 9:
          unsigned int v82 = (*(_DWORD *)(v78 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_162;
        case 4:
          goto LABEL_129;
        case 7:
          unsigned int v82 = *(_WORD *)(v78 + 18) & 1;
          goto LABEL_162;
        case 8:
          unsigned int v82 = 1;
          goto LABEL_129;
        case 10:
          unsigned int v82 = *(_DWORD *)(v78 + 80) + 1;
LABEL_162:
          if (v82) {
            goto LABEL_129;
          }
          goto LABEL_153;
        default:
          goto LABEL_153;
      }
    }
    if ((*(_DWORD *)(v78 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v82 = 2;
    }
    else {
      unsigned int v82 = 1;
    }
LABEL_129:
    uint64_t v19 = 0;
    uint64_t v83 = v78 - 32;
    int v84 = (void *)v82;
    while (1)
    {
      int v85 = *(unsigned __int8 *)(v78 + 16);
      if (v85 == 30)
      {
        unsigned int v86 = (uint64_t *)(v83 - 32 * v19);
      }
      else
      {
        uint64_t v97 = (v85 - 31);
        unsigned int v86 = (uint64_t *)(v78 - 32);
        switch(v97)
        {
          case 1:
          case 7:
            int v292 = *(_DWORD *)(v78 + 20);
            if ((v292 & 0x40000000) != 0) {
              uint64_t v293 = *(void *)(v78 - 8);
            }
            else {
              uint64_t v293 = v81 - 32 * (v292 & 0x7FFFFFF);
            }
            uint64_t v100 = v293 + 32 * v19;
            goto LABEL_159;
          case 2:
            uint64_t v294 = -64;
            if (!v19) {
              uint64_t v294 = -96;
            }
            unsigned int v86 = (uint64_t *)(v81 + v294);
            break;
          case 3:
          case 4:
            goto LABEL_485;
          case 5:
            if ((*(_WORD *)(v78 + 18) & 1) == 0)
            {
              uint64_t v87 = 0;
              goto LABEL_133;
            }
            uint64_t v100 = v78 - 32 * (*(_DWORD *)(v78 + 20) & 0x7FFFFFF);
LABEL_159:
            unsigned int v86 = (uint64_t *)(v100 + 32);
            break;
          case 6:
            break;
          case 8:
            if (v19) {
              unsigned int v86 = (uint64_t *)(v83 - 32 * *(unsigned int *)(v78 + 80) + 32 * v19 - 32);
            }
            else {
              unsigned int v86 = (uint64_t *)(v78 - 32 * *(unsigned int *)(v78 + 80) - 64);
            }
            break;
          default:
            int v98 = *(_DWORD *)(v78 + 20);
            if ((v98 & 0x40000000) != 0) {
              uint64_t v99 = *(void *)(v78 - 8);
            }
            else {
              uint64_t v99 = v81 - 32 * (v98 & 0x7FFFFFF);
            }
            uint64_t v100 = v99 + 32 * (2 * v19);
            goto LABEL_159;
        }
      }
      uint64_t v87 = *v86;
LABEL_133:
      uint64_t v299 = v87;
      if (v305)
      {
        unsigned int v88 = ((v87 >> 4) ^ (v87 >> 9)) & (v305 - 1);
        int v89 = (uint64_t *)(v304[0] + 16 * v88);
        uint64_t v90 = *v89;
        if (v87 == *v89) {
          goto LABEL_148;
        }
        uint64_t v91 = 0;
        int v92 = 1;
        while (v90 != -4096)
        {
          if (v91) {
            BOOL v93 = 0;
          }
          else {
            BOOL v93 = v90 == -8192;
          }
          if (v93) {
            uint64_t v91 = v89;
          }
          unsigned int v94 = v88 + v92++;
          unsigned int v88 = v94 & (v305 - 1);
          int v89 = (uint64_t *)(v304[0] + 16 * v88);
          uint64_t v90 = *v89;
          if (v87 == *v89) {
            goto LABEL_148;
          }
        }
        if (v91) {
          unsigned int v95 = v91;
        }
        else {
          unsigned int v95 = v89;
        }
      }
      else
      {
        unsigned int v95 = 0;
      }
      int v89 = sub_1CD209B44((uint64_t)v304, &v299, v95);
      *int v89 = v87;
      v89[1] = 0;
LABEL_148:
      uint64_t v96 = v89[1];
      if (v96 && !*(_DWORD *)(v96 + 24))
      {
        *(_DWORD *)(v96 + 24) = -1;
        if (v321 >= (unint64_t)HIDWORD(v321)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v320 + v321) = v96;
        LODWORD(v321) = v321 + 1;
      }
      if ((void *)++v19 == v84) {
        goto LABEL_153;
      }
    }
  }
  LODWORD(v33) = 1;
LABEL_171:
  *((_DWORD *)v32 + 6) = v33;
  if (v317 != v319) {
    free(v317);
  }
  if (v320 != v322) {
    free(v320);
  }
  if (v324 != v326) {
    free(v324);
  }
  uint64_t v103 = v315;
  if (!v315)
  {
    uint64_t v14 = llvm::UndefValue::get(*((llvm::UndefValue **)v301 + 1), v18);
    sub_1CD209A88((uint64_t)v302, (uint64_t *)&v298)[1] = (uint64_t)v14;
    goto LABEL_421;
  }
  while (1)
  {
    char v104 = 0;
    int v105 = (char *)v314;
    uint64_t v106 = (char *)v314 + 8 * v103;
    do
    {
      while (1)
      {
        uint64_t v108 = *((void *)v106 - 1);
        v106 -= 8;
        uint64_t v107 = v108;
        if (!*(_DWORD *)(v108 + 40)) {
          break;
        }
        unsigned int v109 = 0;
        uint64_t v110 = 0;
        do
        {
          uint64_t v111 = *(void *)(*(void *)(v107 + 48) + 8 * v109);
          if (!*(_DWORD *)(v111 + 24))
          {
            uint64_t v291 = llvm::UndefValue::get(*((llvm::UndefValue **)v301 + 1), v18);
            *(void *)(v111 + 8) = v291;
            sub_1CD209A88((uint64_t)v302, (uint64_t *)v111)[1] = (uint64_t)v291;
            *(void *)(v111 + 16) = v111;
            *(_DWORD *)(v111 + 24) = (*((_DWORD *)v32 + 6))++;
          }
          if (v110)
          {
            if (v110 != v111)
            {
              int v112 = *(_DWORD *)(v111 + 24);
              do
              {
                while (1)
                {
                  int v113 = *(_DWORD *)(v110 + 24);
                  if (v113 >= v112) {
                    break;
                  }
                  uint64_t v110 = *(void *)(v110 + 32);
                  if (!v110) {
                    goto LABEL_184;
                  }
                }
                while (1)
                {
                  int v112 = *(_DWORD *)(v111 + 24);
                  if (v112 >= v113) {
                    break;
                  }
                  uint64_t v111 = *(void *)(v111 + 32);
                  if (!v111) {
                    goto LABEL_185;
                  }
                }
              }
              while (v110 != v111);
            }
          }
          else
          {
LABEL_184:
            uint64_t v110 = v111;
          }
LABEL_185:
          ++v109;
        }
        while (v109 != *(_DWORD *)(v107 + 40));
        if (!v110 || v110 == *(void *)(v107 + 32)) {
          break;
        }
        *(void *)(v107 + 32) = v110;
        char v104 = 1;
        if (v106 == v105)
        {
          uint64_t v103 = v315;
          goto LABEL_203;
        }
      }
    }
    while (v106 != v105);
    uint64_t v103 = v315;
    if ((v104 & 1) == 0) {
      break;
    }
LABEL_203:
    if (!v103) {
      goto LABEL_405;
    }
  }
  if (v315)
  {
    int v114 = 0;
    uint64_t v115 = (uint64_t **)v314;
    uint64_t v116 = (uint64_t **)((char *)v314 + 8 * v315);
    uint64_t v117 = v116;
    do
    {
      while (1)
      {
        uint64_t v119 = (uint64_t)*--v117;
        uint64_t v118 = v119;
        uint64_t v120 = *(void *)(v119 + 16);
        if (v120 == v119) {
          break;
        }
        uint64_t v121 = *(void *)(v118 + 32);
        uint64_t v122 = *(void *)(v121 + 16);
        uint64_t v123 = *(unsigned int *)(v118 + 40);
        if (v123)
        {
          uint64_t v124 = 0;
          while (2)
          {
            for (uint64_t k = *(void *)(*(void *)(v118 + 48) + 8 * v124); k != v121; uint64_t k = *(void *)(k + 32))
            {
              if (*(void *)(k + 16) == k)
              {
                uint64_t v122 = v118;
                goto LABEL_218;
              }
            }
            if (++v124 != v123) {
              continue;
            }
            break;
          }
        }
LABEL_218:
        if (v122 == v120) {
          break;
        }
        *(void *)(v118 + 16) = v122;
        int v114 = v117 != v115;
        if (v117 == v115) {
          uint64_t v117 = v116;
        }
      }
      BOOL v126 = v117 != v115;
      char v127 = v126 | v114;
      v114 &= v126;
      if (v117 == v115) {
        uint64_t v117 = v116;
      }
    }
    while ((v127 & 1) != 0);
    while (1)
    {
      unsigned int v128 = *v115;
      if ((uint64_t *)(*v115)[2] == *v115) {
        break;
      }
LABEL_225:
      if (++v115 == v116)
      {
        if (v315)
        {
          unsigned int v208 = (char *)v314;
          unsigned int v209 = (char *)v314 + 8 * v315;
          while (1)
          {
            uint64_t v211 = *((void *)v209 - 1);
            v209 -= 8;
            uint64_t v210 = v211;
            uint64_t v212 = *(void *)(v211 + 16);
            if (v212 == v211)
            {
              uint64_t v224 = *(void *)(v210 + 8);
              if (v224 && *(unsigned char *)(v224 + 16) == 83 && (*(_DWORD *)(v224 + 20) & 0x7FFFFFF) == 0)
              {
                if (*(_DWORD *)(v210 + 40))
                {
                  unsigned int v225 = 0;
                  LODWORD(v226) = *(_DWORD *)(v224 + 60);
                  do
                  {
                    uint64_t v227 = *(uint64_t **)(*(void *)(v210 + 48) + 8 * v225);
                    uint64_t v228 = *v227;
                    uint64_t v229 = *(void *)(v227[2] + 8);
                    int v230 = *(_DWORD *)(v224 + 20);
                    if ((v230 & 0x7FFFFFF) == v226)
                    {
                      unsigned int v243 = v226 + (v226 >> 1);
                      if (v243 <= 2) {
                        uint64_t v244 = 2;
                      }
                      else {
                        uint64_t v244 = v243;
                      }
                      *(_DWORD *)(v224 + 60) = v244;
                      if ((v230 & 0x40000000) != 0) {
                        uint64_t v245 = *(uint64_t **)(v224 - 8);
                      }
                      else {
                        uint64_t v245 = (uint64_t *)(v224 - 32 * v226);
                      }
                      __p = v245;
                      unsigned int v246 = operator new(40 * v244);
                      uint64_t v295 = v244;
                      *(void *)(v224 - 8) = v246;
                      unint64_t v247 = v246;
                      do
                      {
                        *unint64_t v247 = 0;
                        v247[1] = 0;
                        v247[2] = 0;
                        v247[3] = v224;
                        v247 += 4;
                      }
                      while (v247 != &v246[4 * v244]);
                      int v248 = *(_DWORD *)(v224 + 20);
                      if ((v248 & 0x40000000) != 0) {
                        uint64_t v249 = (uint64_t)v246;
                      }
                      else {
                        uint64_t v249 = v224 - 32 * (v248 & 0x7FFFFFF);
                      }
                      sub_1CC5E4108((uint64_t)&v320, __p, &__p[4 * v226], v249);
                      if (v226)
                      {
                        memmove((void *)(v249 + 32 * v295), &__p[4 * v226], 8 * v226);
                        uint64_t v250 = 4 * v226;
                        do
                        {
                          uint64_t v251 = &__p[v250];
                          if (__p[v250 - 4])
                          {
                            *(void *)*(v251 - 2) = *(v251 - 3);
                            uint64_t v252 = *(v251 - 3);
                            if (v252) {
                              *(void *)(v252 + 16) = *(v251 - 2);
                            }
                          }
                          v250 -= 4;
                        }
                        while (v250 * 8);
                      }
                      operator delete(__p);
                      int v230 = *(_DWORD *)(v224 + 20);
                    }
                    uint64_t v231 = (v230 + 1) & 0x7FFFFFF;
                    *(_DWORD *)(v224 + 20) = v230 & 0xF8000000 | (v230 + 1) & 0x7FFFFFF;
                    if ((v230 & 0x40000000) != 0) {
                      uint64_t v232 = *(void *)(v224 - 8);
                    }
                    else {
                      uint64_t v232 = v224 - 32 * v231;
                    }
                    uint64_t v233 = (v231 - 1);
                    uint64_t v234 = v232 + 32 * v233;
                    if (*(void *)v234)
                    {
                      **(void **)(v234 + 16) = *(void *)(v234 + 8);
                      uint64_t v242 = *(void *)(v234 + 8);
                      if (v242) {
                        *(void *)(v242 + 16) = *(void *)(v234 + 16);
                      }
                    }
                    *(void *)uint64_t v234 = v229;
                    if (v229)
                    {
                      uint64_t v237 = *(void *)(v229 + 8);
                      unsigned int v236 = (void *)(v229 + 8);
                      uint64_t v235 = v237;
                      uint64_t v238 = v232 + 32 * v233;
                      *(void *)(v238 + 8) = v237;
                      if (v237) {
                        *(void *)(v235 + 16) = v238 + 8;
                      }
                      *(void *)(v238 + 16) = v236;
                      *unsigned int v236 = v234;
                    }
                    int v239 = *(_DWORD *)(v224 + 20);
                    uint64_t v240 = v239 & 0x7FFFFFF;
                    if ((v239 & 0x40000000) != 0) {
                      uint64_t v241 = *(void *)(v224 - 8);
                    }
                    else {
                      uint64_t v241 = v224 - 32 * v240;
                    }
                    uint64_t v226 = *(unsigned int *)(v224 + 60);
                    *(void *)(v241 + 32 * v226 + 8 * (v240 - 1)) = v228;
                    ++v225;
                  }
                  while (v225 != *(_DWORD *)(v210 + 40));
                }
                uint64_t v253 = v303;
                if (v303)
                {
                  unint64_t v254 = *(unsigned int *)(v303 + 8);
                  if (v254 >= *(unsigned int *)(v303 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v303 + 8 * v254) = v224;
                  ++*(_DWORD *)(v253 + 8);
                }
              }
              goto LABEL_362;
            }
            uint64_t v213 = *(void *)(v212 + 8);
            int v214 = *((_DWORD *)v302 + 4);
            if (!v214) {
              break;
            }
            int v215 = v214 - 1;
            unsigned int v216 = ((*(void *)v210 >> 4) ^ (*(void *)v210 >> 9)) & (v214 - 1);
            uint64_t v217 = (uint64_t *)(*v302 + 16 * v216);
            uint64_t v218 = *v217;
            if (*(void *)v210 != *v217)
            {
              unint64_t v219 = 0;
              int v220 = 1;
              while (v218 != -4096)
              {
                if (v219) {
                  BOOL v221 = 0;
                }
                else {
                  BOOL v221 = v218 == -8192;
                }
                if (v221) {
                  unint64_t v219 = v217;
                }
                unsigned int v222 = v216 + v220++;
                unsigned int v216 = v222 & v215;
                uint64_t v217 = (uint64_t *)(*v302 + 16 * (v222 & v215));
                uint64_t v218 = *v217;
                if (*(void *)v210 == *v217) {
                  goto LABEL_361;
                }
              }
              if (v219) {
                uint64_t v223 = v219;
              }
              else {
                uint64_t v223 = v217;
              }
              goto LABEL_360;
            }
LABEL_361:
            v217[1] = v213;
LABEL_362:
            if (v209 == v208) {
              goto LABEL_405;
            }
          }
          uint64_t v223 = 0;
LABEL_360:
          uint64_t v217 = sub_1CC0A3E2C((uint64_t)v302, v210, (uint64_t *)v210, v223);
          *uint64_t v217 = *(void *)v210;
          v217[1] = 0;
          goto LABEL_361;
        }
        goto LABEL_405;
      }
    }
    if (*(void *)(*v128 + 40) != *v128 + 40)
    {
      uint64_t v129 = *(void *)(*v128 + 48);
      uint64_t v130 = v129 - 24;
      uint64_t v131 = v129 ? v129 - 24 : 0;
      if (v129 && *(unsigned char *)(v131 + 16) == 83)
      {
        while (1)
        {
          unsigned int v320 = v322;
          v322[0] = v130;
          uint64_t v321 = 0x1400000001;
          uint64_t v132 = *(void **)(v130 + 40);
          unsigned int v324 = v132;
          if (v305)
          {
            uint64_t v133 = ((v132 >> 4) ^ (v132 >> 9)) & (v305 - 1);
            uint64_t v134 = (uint64_t *)(v304[0] + 16 * v133);
            unsigned int v135 = (void *)*v134;
            if (v132 == (void *)*v134)
            {
LABEL_243:
              *(void *)(*(void *)(v304[0] + 16 * v133 + 8) + 56) = v130;
              unsigned int v140 = 1;
              goto LABEL_244;
            }
            uint64_t v136 = 0;
            int v137 = 1;
            while (v135 != (void *)-4096)
            {
              if (v136) {
                BOOL v138 = 0;
              }
              else {
                BOOL v138 = v135 == (void *)-8192;
              }
              if (v138) {
                uint64_t v136 = v134;
              }
              int v139 = v133 + v137++;
              uint64_t v133 = v139 & (v305 - 1);
              uint64_t v134 = (uint64_t *)(v304[0] + 16 * v133);
              unsigned int v135 = (void *)*v134;
              if (v132 == (void *)*v134) {
                goto LABEL_243;
              }
            }
            if (v136) {
              uint64_t v165 = v136;
            }
            else {
              uint64_t v165 = v134;
            }
          }
          else
          {
            uint64_t v165 = 0;
          }
          unsigned int v166 = sub_1CD209B44((uint64_t)v304, (uint64_t *)&v324, v165);
          uint64_t *v166 = (uint64_t)v132;
          v166[1] = 0;
          unsigned int v140 = v321;
          MEMORY[0x38] = v130;
          if (v321)
          {
LABEL_244:
            while (1)
            {
              uint64_t v141 = *((void *)v320 + --v140);
              LODWORD(v321) = v140;
              int v142 = *(_DWORD *)(v141 + 20) & 0x7FFFFFF;
              if (v142) {
                break;
              }
LABEL_472:
              if (!v140) {
                goto LABEL_473;
              }
            }
            uint64_t v143 = 0;
            while (2)
            {
              int v144 = *(_DWORD *)(v141 + 20);
              if ((v144 & 0x40000000) != 0) {
                uint64_t v145 = *(void *)(v141 - 8);
              }
              else {
                uint64_t v145 = v141 - 32 * (v144 & 0x7FFFFFF);
              }
              uint64_t v146 = *(void *)(v145 + 32 * v143);
              unsigned int v147 = *(void **)(v145 + 32 * *(unsigned int *)(v141 + 60) + 8 * v143);
              unsigned int v324 = v147;
              if (v305)
              {
                unsigned int v148 = ((v147 >> 4) ^ (v147 >> 9)) & (v305 - 1);
                uint64_t v149 = (uint64_t *)(v304[0] + 16 * v148);
                uint64_t v150 = *v149;
                if (v147 != (void *)*v149)
                {
                  unint64_t v151 = 0;
                  int v152 = 1;
                  while (v150 != -4096)
                  {
                    if (v151) {
                      BOOL v153 = 0;
                    }
                    else {
                      BOOL v153 = v150 == -8192;
                    }
                    if (v153) {
                      unint64_t v151 = v149;
                    }
                    unsigned int v154 = v148 + v152++;
                    unsigned int v148 = v154 & (v305 - 1);
                    uint64_t v149 = (uint64_t *)(v304[0] + 16 * v148);
                    uint64_t v150 = *v149;
                    if (v147 == (void *)*v149) {
                      goto LABEL_263;
                    }
                  }
                  if (v151) {
                    uint64_t v155 = v151;
                  }
                  else {
                    uint64_t v155 = v149;
                  }
LABEL_262:
                  uint64_t v149 = sub_1CD209B44((uint64_t)v304, (uint64_t *)&v324, v155);
                  uint64_t *v149 = (uint64_t)v147;
                  v149[1] = 0;
                }
LABEL_263:
                unsigned int v156 = *(void **)(v149[1] + 16);
                uint64_t v157 = v156[1];
                if (v157) {
                  goto LABEL_264;
                }
                int v159 = 0;
                if (*(unsigned char *)(v146 + 16) != 83 || !v146) {
                  goto LABEL_268;
                }
                if (*(void *)(v146 + 40) != *v156)
                {
LABEL_267:
                  int v159 = 0;
                  goto LABEL_268;
                }
                uint64_t v157 = v156[7];
                if (v157)
                {
LABEL_264:
                  if (v146 != v157) {
                    goto LABEL_267;
                  }
                }
                else
                {
                  v156[7] = v146;
                  if (v321 >= (unint64_t)HIDWORD(v321)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v320 + v321) = v146;
                  LODWORD(v321) = v321 + 1;
                }
                int v158 = v143 + 1;
                uint64_t v143 = (v143 + 1);
                if (v142 == v158)
                {
                  unsigned int v140 = v321;
                  goto LABEL_472;
                }
                continue;
              }
              break;
            }
            uint64_t v155 = 0;
            goto LABEL_262;
          }
LABEL_473:
          int v159 = 1;
LABEL_268:
          if (v320 != v322) {
            free(v320);
          }
          uint64_t v160 = (char *)v314;
          if (v159) {
            break;
          }
          if (v315)
          {
            uint64_t v161 = 8 * v315;
            do
            {
              uint64_t v162 = *(void *)v160;
              v160 += 8;
              *(void *)(v162 + 56) = 0;
              v161 -= 8;
            }
            while (v161);
          }
          uint64_t v163 = *(void *)(v130 + 32);
          uint64_t v130 = v163 - 24;
          if (v163) {
            uint64_t v164 = v163 - 24;
          }
          else {
            uint64_t v164 = 0;
          }
          if (!v163 || *(unsigned char *)(v164 + 16) != 83) {
            goto LABEL_321;
          }
        }
        if (v315)
        {
          uint64_t v272 = (char *)v314 + 8 * v315;
          while (1)
          {
            uint64_t v167 = *(void *)(*(void *)v160 + 56);
            if (v167) {
              break;
            }
LABEL_287:
            v160 += 8;
            if (v160 == v272) {
              goto LABEL_321;
            }
          }
          uint64_t v168 = *(void **)(v167 + 40);
          unsigned int v320 = v168;
          int v169 = *((_DWORD *)v302 + 4);
          if (v169)
          {
            int v170 = v169 - 1;
            unsigned int v171 = (v169 - 1) & ((v168 >> 4) ^ (v168 >> 9));
            __int16 v172 = (uint64_t *)(*v302 + 16 * v171);
            uint64_t v173 = *v172;
            if (v168 == (void *)*v172) {
              goto LABEL_304;
            }
            unsigned int v174 = 0;
            int v175 = 1;
            while (v173 != -4096)
            {
              if (v174) {
                BOOL v176 = 0;
              }
              else {
                BOOL v176 = v173 == -8192;
              }
              if (v176) {
                unsigned int v174 = v172;
              }
              unsigned int v177 = v171 + v175++;
              unsigned int v171 = v177 & v170;
              __int16 v172 = (uint64_t *)(*v302 + 16 * (v177 & v170));
              uint64_t v173 = *v172;
              if (v168 == (void *)*v172) {
                goto LABEL_304;
              }
            }
            if (v174) {
              uint64_t v178 = v174;
            }
            else {
              uint64_t v178 = v172;
            }
          }
          else
          {
            uint64_t v178 = 0;
          }
          __int16 v172 = sub_1CC0A3E2C((uint64_t)v302, (uint64_t)&v320, (uint64_t *)&v320, v178);
          *__int16 v172 = (uint64_t)v320;
          v172[1] = 0;
LABEL_304:
          v172[1] = v167;
          if (v305)
          {
            unsigned int v179 = ((v320 >> 4) ^ (v320 >> 9)) & (v305 - 1);
            uint64_t v180 = (uint64_t *)(v304[0] + 16 * v179);
            unsigned int v181 = (void *)*v180;
            if (v320 == (void *)*v180)
            {
LABEL_319:
              *(void *)(v180[1] + 8) = v167;
              goto LABEL_287;
            }
            __int16 v182 = 0;
            int v183 = 1;
            while (v181 != (void *)-4096)
            {
              if (v182) {
                BOOL v184 = 0;
              }
              else {
                BOOL v184 = v181 == (void *)-8192;
              }
              if (v184) {
                __int16 v182 = v180;
              }
              unsigned int v185 = v179 + v183++;
              unsigned int v179 = v185 & (v305 - 1);
              uint64_t v180 = (uint64_t *)(v304[0] + 16 * v179);
              unsigned int v181 = (void *)*v180;
              if (v320 == (void *)*v180) {
                goto LABEL_319;
              }
            }
            if (v182) {
              unsigned int v186 = v182;
            }
            else {
              unsigned int v186 = v180;
            }
          }
          else
          {
            unsigned int v186 = 0;
          }
          uint64_t v180 = sub_1CD209B44((uint64_t)v304, (uint64_t *)&v320, v186);
          uint64_t *v180 = (uint64_t)v320;
          v180[1] = 0;
          goto LABEL_319;
        }
      }
    }
LABEL_321:
    if (v128[1]) {
      goto LABEL_225;
    }
    uint64_t v187 = *v128;
    int v188 = *((_DWORD *)v128 + 10);
    uint64_t v189 = *((void *)v301 + 1);
    __int16 v323 = 260;
    unsigned int v320 = (char *)v301 + 16;
    uint64_t v190 = *(uint64_t **)(v187 + 48);
    unsigned int v191 = operator new(0x48uLL);
    __int16 v192 = v191;
    v191[1] = v189;
    uint64_t v193 = (llvm::Value *)(v191 + 1);
    void *v191 = 0;
    v191[2] = 0;
    v191[3] = 0x4000000000000053;
    *((_OWORD *)v191 + 2) = 0u;
    unsigned int v194 = (char *)(v191 + 4);
    *((_OWORD *)v191 + 3) = 0u;
    *((_DWORD *)v191 + 16) = 0;
    if (v190)
    {
      uint64_t v270 = v190[2];
      v191[6] = v270;
      *(_WORD *)(v270 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v191 + 31) & 0x10) != 0)
      {
        uint64_t v287 = *(void *)(v270 + 56);
        if (v287)
        {
          uint64_t v288 = *(llvm::ValueSymbolTable **)(v287 + 104);
          if (v288) {
            llvm::ValueSymbolTable::reinsertValue(v288, v193);
          }
        }
      }
      uint64_t v271 = *v190;
      v192[4] = *v190;
      v192[5] = v190;
      *(void *)(v271 + 8) = v194;
      *uint64_t v190 = (uint64_t)v194;
    }
    *((_DWORD *)v192 + 17) = v188;
    llvm::Value::setNameImpl(v193, (const char **)&v320);
    if (*((unsigned char *)v192 + 24))
    {
LABEL_324:
      uint64_t v195 = *((unsigned int *)v192 + 17);
      unsigned int v196 = operator new(40 * v195);
      void *v192 = v196;
      if (v195)
      {
        __int16 v197 = &v196[4 * v195];
        do
        {
          *unsigned int v196 = 0;
          v196[1] = 0;
          v196[2] = 0;
          v196[3] = v193;
          v196 += 4;
        }
        while (v196 != v197);
      }
      v128[1] = (uint64_t)v193;
      int v198 = *((_DWORD *)v302 + 4);
      if (v198)
      {
        int v199 = v198 - 1;
        unsigned int v200 = ((*v128 >> 4) ^ (*v128 >> 9)) & (v198 - 1);
        unsigned int v201 = (uint64_t *)(*v302 + 16 * v200);
        uint64_t v202 = *v201;
        if (*v128 == *v201)
        {
LABEL_342:
          v201[1] = (uint64_t)v193;
          goto LABEL_225;
        }
        unint64_t v203 = 0;
        int v204 = 1;
        while (v202 != -4096)
        {
          if (v203) {
            BOOL v205 = 0;
          }
          else {
            BOOL v205 = v202 == -8192;
          }
          if (v205) {
            unint64_t v203 = v201;
          }
          unsigned int v206 = v200 + v204++;
          unsigned int v200 = v206 & v199;
          unsigned int v201 = (uint64_t *)(*v302 + 16 * (v206 & v199));
          uint64_t v202 = *v201;
          if (*v128 == *v201) {
            goto LABEL_342;
          }
        }
        if (v203) {
          uint64_t v207 = v203;
        }
        else {
          uint64_t v207 = v201;
        }
      }
      else
      {
        uint64_t v207 = 0;
      }
      unsigned int v201 = sub_1CC0A3E2C((uint64_t)v302, (uint64_t)v128, v128, v207);
      *unsigned int v201 = *v128;
      v201[1] = 0;
      goto LABEL_342;
    }
    if ((*((unsigned char *)v192 + 31) & 0x10) == 0) {
      goto LABEL_474;
    }
    uint64_t v273 = ***(void ***)v193;
    uint64_t v274 = *(void *)(v273 + 152);
    uint64_t v275 = *(unsigned int *)(v273 + 168);
    if (v275)
    {
      LODWORD(v276) = (v275 - 1) & ((v193 >> 4) ^ (v193 >> 9));
      uint64_t v277 = (llvm::Value **)(v274 + 16 * v276);
      unint64_t v278 = *v277;
      if (*v277 == v193)
      {
LABEL_461:
        int v281 = v277[1];
        unint64_t v284 = *(void *)v281;
        uint64_t v282 = (char *)v281 + 16;
        unint64_t v283 = v284;
        if (v284 >= 5 && *(_DWORD *)v282 == *(_DWORD *)"llvm." && v282[4] == aLlvm_1[4])
        {
          *((_DWORD *)v192 + 10) |= 0x2000u;
          int v286 = llvm::Function::lookupIntrinsicID(v282, v283);
LABEL_468:
          *((_DWORD *)v192 + 11) = v286;
          goto LABEL_324;
        }
LABEL_474:
        int v286 = 0;
        *((_DWORD *)v192 + 10) &= ~0x2000u;
        goto LABEL_468;
      }
      int v279 = 1;
      while (v278 != (llvm::Value *)-4096)
      {
        int v280 = v276 + v279++;
        uint64_t v276 = v280 & (v275 - 1);
        unint64_t v278 = *(llvm::Value **)(v274 + 16 * v276);
        if (v278 == v193)
        {
          uint64_t v277 = (llvm::Value **)(v274 + 16 * v276);
          goto LABEL_461;
        }
      }
    }
    uint64_t v277 = (llvm::Value **)(v274 + 16 * v275);
    goto LABEL_461;
  }
LABEL_405:
  unsigned int v255 = v298;
  if (!v305)
  {
    uint64_t v263 = 0;
LABEL_419:
    uint64_t v257 = sub_1CD209B44((uint64_t)v304, (uint64_t *)&v298, v263);
    *uint64_t v257 = (uint64_t)v255;
    v257[1] = 0;
    goto LABEL_420;
  }
  unsigned int v256 = ((v298 >> 4) ^ (v298 >> 9)) & (v305 - 1);
  uint64_t v257 = (uint64_t *)(v304[0] + 16 * v256);
  uint64_t v258 = *v257;
  if (v298 != (llvm::BasicBlock *)*v257)
  {
    unint64_t v259 = 0;
    int v260 = 1;
    while (v258 != -4096)
    {
      if (v259) {
        BOOL v261 = 0;
      }
      else {
        BOOL v261 = v258 == -8192;
      }
      if (v261) {
        unint64_t v259 = v257;
      }
      unsigned int v262 = v256 + v260++;
      unsigned int v256 = v262 & (v305 - 1);
      uint64_t v257 = (uint64_t *)(v304[0] + 16 * v256);
      uint64_t v258 = *v257;
      if (v298 == (llvm::BasicBlock *)*v257) {
        goto LABEL_420;
      }
    }
    if (v259) {
      uint64_t v263 = v259;
    }
    else {
      uint64_t v263 = v257;
    }
    goto LABEL_419;
  }
LABEL_420:
  uint64_t v14 = *(llvm::UndefValue **)(*(void *)(v257[1] + 16) + 8);
LABEL_421:
  if (v314 != v316) {
    free(v314);
  }
  if (v309)
  {
    uint64_t v264 = (uint64_t *)v308;
    uint64_t v265 = 8 * v309;
    do
    {
      uint64_t v266 = *v264++;
      MEMORY[0x1D25D9CD0](v266, 8);
      v265 -= 8;
    }
    while (v265);
  }
  int64_t v267 = (uint64_t *)v311;
  if (v312)
  {
    uint64_t v289 = 16 * v312;
    do
    {
      uint64_t v290 = *v267;
      v267 += 2;
      MEMORY[0x1D25D9CD0](v290, 8);
      v289 -= 16;
    }
    while (v289);
    int64_t v267 = (uint64_t *)v311;
  }
  if (v267 != (uint64_t *)((char *)&v312 + 8)) {
    free(v267);
  }
  if (v308 != v310) {
    free(v308);
  }
  MEMORY[0x1D25D9CD0](v304[0], 8);
  return v14;
}

llvm::UndefValue *llvm::SSAUpdater::GetValueInMiddleOfBlock(llvm::UndefValue **this, llvm::BasicBlock *a2)
{
  v159[16] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)*this + 4);
  if (v4)
  {
    uint64_t v5 = *(void *)*this;
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = *(llvm::BasicBlock **)(v5 + 16 * v7);
    if (v8 != a2)
    {
      int v9 = 1;
      while (v8 != (llvm::BasicBlock *)-4096)
      {
        unsigned int v10 = v7 + v9++;
        unsigned int v7 = v10 & v6;
        uint64_t v8 = *(llvm::BasicBlock **)(v5 + 16 * v7);
        if (v8 == a2) {
          goto LABEL_6;
        }
      }
      goto LABEL_28;
    }
LABEL_6:
    uint64_t v157 = v159;
    uint64_t v158 = 0x800000000;
    uint64_t v11 = *((void *)a2 + 6);
    uint64_t v12 = v11 - 24;
    if (!v11) {
      uint64_t v12 = 0;
    }
    int v13 = *(unsigned __int8 *)(v12 + 16);
    if (v13 == 83) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v11 && v13 == 83)
    {
      uint64_t v15 = *(_DWORD *)(v14 + 20) & 0x7FFFFFF;
      if (!v15) {
        goto LABEL_94;
      }
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v15;
      do
      {
        int v19 = *(_DWORD *)(v14 + 20);
        if ((v19 & 0x40000000) != 0) {
          uint64_t v20 = *(void *)(v14 - 8);
        }
        else {
          uint64_t v20 = v14 - 32 * (v19 & 0x7FFFFFF);
        }
        uint64_t v21 = *(llvm::BasicBlock **)(v20 + 32 * *(unsigned int *)(v14 + 60) + v16);
        ValueAtEndOfBlockInternal = llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)this, v21);
        if (v158 >= (unint64_t)HIDWORD(v158)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v23 = (llvm::BasicBlock **)((char *)v157 + 16 * v158);
        *unsigned int v23 = v21;
        v23[1] = ValueAtEndOfBlockInternal;
        unsigned int v24 = v158 + 1;
        LODWORD(v158) = v158 + 1;
        if (ValueAtEndOfBlockInternal == v17) {
          uint64_t v25 = v17;
        }
        else {
          uint64_t v25 = 0;
        }
        if (v16) {
          uint64_t v17 = v25;
        }
        else {
          uint64_t v17 = ValueAtEndOfBlockInternal;
        }
        v16 += 8;
      }
      while (v18 != v16);
    }
    else
    {
      uint64_t v27 = *((void *)a2 + 1);
      if (!v27) {
        goto LABEL_94;
      }
      while (1)
      {
        uint64_t v28 = *(void *)(v27 + 24);
        unsigned int v29 = *(unsigned __int8 *)(v28 + 16);
        BOOL v30 = v28 && v29 >= 0x1C;
        if (v30 && v29 - 29 <= 0xA) {
          break;
        }
        uint64_t v27 = *(void *)(v27 + 8);
        if (!v27) {
          goto LABEL_94;
        }
      }
      uint64_t v17 = 0;
      char v32 = 1;
LABEL_42:
      uint64_t v33 = *(llvm::BasicBlock **)(v28 + 40);
      uint64_t v34 = llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)this, v33);
      if (v158 >= (unint64_t)HIDWORD(v158)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v35 = (llvm::BasicBlock **)((char *)v157 + 16 * v158);
      *uint64_t v35 = v33;
      v35[1] = v34;
      unsigned int v24 = v158 + 1;
      LODWORD(v158) = v158 + 1;
      if (v34 == v17) {
        uint64_t v36 = v17;
      }
      else {
        uint64_t v36 = 0;
      }
      if (v32) {
        uint64_t v17 = v34;
      }
      else {
        uint64_t v17 = v36;
      }
      while (1)
      {
        uint64_t v27 = *(void *)(v27 + 8);
        if (!v27) {
          break;
        }
        uint64_t v28 = *(void *)(v27 + 24);
        unsigned int v37 = *(unsigned __int8 *)(v28 + 16);
        if (v28) {
          BOOL v38 = v37 >= 0x1C;
        }
        else {
          BOOL v38 = 0;
        }
        if (v38 && v37 - 29 < 0xB)
        {
          char v32 = 0;
          goto LABEL_42;
        }
      }
    }
    if (v24)
    {
      if (v17) {
        goto LABEL_95;
      }
      uint64_t v40 = (uint64_t *)*((void *)a2 + 6);
      uint64_t v41 = v40 - 3;
      if (!v40) {
        uint64_t v41 = 0;
      }
      if (*((unsigned char *)v41 + 16) == 83)
      {
        uint64_t v42 = (uint64_t *)v157;
        unint64_t v43 = v24 | ((unint64_t)v24 >> 1) | ((v24 | ((unint64_t)v24 >> 1)) >> 2);
        unint64_t v44 = v43 | (v43 >> 4) | ((v43 | (v43 >> 4)) >> 8);
        uint64_t v45 = ((v44 >> 16) | v44) + 1;
        if (v45 > 8)
        {
          unsigned int v46 = (uint64_t *)operator new(16 * (((v44 >> 16) | v44) + 1), (std::align_val_t)8uLL);
          uint64_t v154 = (uint64_t)v46;
          v155[0] = v45;
          BOOL v153 = 0;
          int v47 = (void **)&v46[2 * v45];
        }
        else
        {
          BOOL v153 = (void *)1;
          unsigned int v46 = &v154;
          int v47 = &v157;
        }
        do
        {
          uint64_t *v46 = -4096;
          v46 += 2;
        }
        while (v46 != (uint64_t *)v47);
        uint64_t v48 = 16 * v24;
        do
        {
          unsigned int v148 = 0;
          if ((sub_1CD209918((uint64_t)&v153, *v42, &v148) & 1) == 0)
          {
            int v49 = sub_1CD2099C4(&v153, v42, v148);
            *int v49 = *v42;
            v49[1] = v42[1];
          }
          v42 += 2;
          v48 -= 16;
        }
        while (v48);
        if (*((llvm::BasicBlock **)a2 + 5) == (llvm::BasicBlock *)((char *)a2 + 40))
        {
          uint64_t v17 = 0;
          LODWORD(v53) = 1;
        }
        else
        {
          uint64_t v17 = 0;
          for (uint64_t i = *((void *)a2 + 6); ; uint64_t i = *(void *)(v51 + 32))
          {
            uint64_t v51 = i - 24;
            uint64_t v52 = i ? i - 24 : 0;
            LODWORD(v53) = 1;
            if (!i || *(unsigned char *)(v52 + 16) != 83) {
              break;
            }
            int v54 = *(_DWORD *)(i - 4);
            uint64_t v53 = v54 & 0x7FFFFFF;
            if ((v54 & 0x7FFFFFF) == v153 >> 1)
            {
              if (!v53)
              {
LABEL_98:
                uint64_t v17 = (llvm::UndefValue *)v51;
                break;
              }
              uint64_t v55 = 0;
              while (1)
              {
                uint64_t v56 = (v54 & 0x40000000) != 0 ? *(void *)(v51 - 8) : v51 - 32 * (v54 & 0x7FFFFFF);
                uint64_t v57 = *(void *)(v56 + 32 * *(unsigned int *)(v51 + 60) + 8 * v55);
                uint64_t v152 = v57;
                unsigned int v148 = 0;
                if (sub_1CD209918((uint64_t)&v153, v57, &v148))
                {
                  uint64_t v58 = *((void *)v148 + 1);
                }
                else
                {
                  int v60 = sub_1CD2099C4(&v153, &v152, v148);
                  uint64_t v58 = 0;
                  *int v60 = v57;
                  v60[1] = 0;
                }
                int v54 = *(_DWORD *)(v51 + 20);
                uint64_t v59 = (v54 & 0x40000000) != 0 ? *(void *)(v51 - 8) : v51 - 32 * (v54 & 0x7FFFFFF);
                if (v58 != *(void *)(v59 + 32 * v55)) {
                  break;
                }
                if (++v55 == v53)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_98;
                }
              }
            }
            uint64_t v17 = 0;
          }
        }
        if (v153)
        {
          if (!v53) {
            goto LABEL_95;
          }
        }
        else
        {
          MEMORY[0x1D25D9CD0](v154, 8);
          if (!v53) {
            goto LABEL_95;
          }
        }
        unsigned int v24 = v158;
        uint64_t v40 = (uint64_t *)*((void *)a2 + 6);
      }
      uint64_t v61 = this[1];
      __int16 v156 = 260;
      BOOL v153 = this + 2;
      uint64_t v62 = operator new(0x48uLL);
      int v63 = v62;
      v62[1] = v61;
      uint64_t v17 = (llvm::UndefValue *)(v62 + 1);
      void *v62 = 0;
      v62[2] = 0;
      void v62[3] = 0x4000000000000053;
      *((_OWORD *)v62 + 2) = 0u;
      uint64_t v64 = (char *)(v62 + 4);
      *((_OWORD *)v62 + 3) = 0u;
      *((_DWORD *)v62 + 16) = 0;
      if (v40)
      {
        uint64_t v107 = v40[2];
        v62[6] = v107;
        *(_WORD *)(v107 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v62 + 31) & 0x10) != 0)
        {
          uint64_t v135 = *(void *)(v107 + 56);
          if (v135)
          {
            uint64_t v136 = *(llvm::ValueSymbolTable **)(v135 + 104);
            if (v136)
            {
              int v137 = v64;
              llvm::ValueSymbolTable::reinsertValue(v136, v17);
              uint64_t v64 = v137;
            }
          }
        }
        uint64_t v108 = *v40;
        v63[4] = *v40;
        v63[5] = v40;
        *(void *)(v108 + 8) = v64;
        uint64_t *v40 = (uint64_t)v64;
      }
      *((_DWORD *)v63 + 17) = v24;
      llvm::Value::setNameImpl(v17, (const char **)&v153);
      if (*((unsigned char *)v63 + 24))
      {
LABEL_104:
        uint64_t v65 = *((unsigned int *)v63 + 17);
        uint64_t v66 = operator new(40 * v65);
        void *v63 = v66;
        if (v65)
        {
          unint64_t v70 = &v66[4 * v65];
          do
          {
            *uint64_t v66 = 0;
            v66[1] = 0;
            v66[2] = 0;
            v66[3] = v17;
            v66 += 4;
          }
          while (v66 != v70);
        }
        if (v158)
        {
          unint64_t v71 = (char *)v157;
          int v72 = (char *)v157 + 16 * v158;
          LODWORD(v73) = *((_DWORD *)v63 + 17);
          int v144 = v72;
          do
          {
            uint64_t v74 = *(void *)v71;
            uint64_t v75 = *((void *)v71 + 1);
            int v76 = *((_DWORD *)v63 + 7);
            if ((v76 & 0x7FFFFFF) == v73)
            {
              unsigned int v89 = v73 + (v73 >> 1);
              if (v89 <= 2) {
                uint64_t v90 = 2;
              }
              else {
                uint64_t v90 = v89;
              }
              *((_DWORD *)v63 + 17) = v90;
              if ((v76 & 0x40000000) != 0) {
                uint64_t v91 = (uint64_t *)*v63;
              }
              else {
                uint64_t v91 = (uint64_t *)((char *)v17 - 32 * v73);
              }
              __p = v91;
              int v92 = operator new(40 * v90);
              uint64_t v145 = v90;
              void *v63 = v92;
              BOOL v93 = v92;
              do
              {
                *BOOL v93 = 0;
                v93[1] = 0;
                v93[2] = 0;
                v93[3] = v17;
                v93 += 4;
              }
              while (v93 != &v92[4 * v90]);
              int v94 = *((_DWORD *)v63 + 7);
              if ((v94 & 0x40000000) != 0) {
                uint64_t v95 = (uint64_t)v92;
              }
              else {
                uint64_t v95 = (uint64_t)v17 - 32 * (v94 & 0x7FFFFFF);
              }
              sub_1CC5E4108((uint64_t)&v153, __p, &__p[4 * v73], v95);
              if (v73)
              {
                memmove((void *)(v95 + 32 * v145), &__p[4 * v73], 8 * v73);
                uint64_t v96 = 4 * v73;
                do
                {
                  uint64_t v97 = &__p[v96];
                  if (__p[v96 - 4])
                  {
                    *(void *)*(v97 - 2) = *(v97 - 3);
                    uint64_t v98 = *(v97 - 3);
                    if (v98) {
                      *(void *)(v98 + 16) = *(v97 - 2);
                    }
                  }
                  v96 -= 4;
                }
                while (v96 * 8);
              }
              operator delete(__p);
              int v76 = *((_DWORD *)v63 + 7);
              int v72 = v144;
            }
            uint64_t v77 = (v76 + 1) & 0x7FFFFFF;
            *((_DWORD *)v63 + 7) = v76 & 0xF8000000 | (v76 + 1) & 0x7FFFFFF;
            if ((v76 & 0x40000000) != 0) {
              uint64_t v78 = (char *)*v63;
            }
            else {
              uint64_t v78 = (char *)v17 - 32 * v77;
            }
            uint64_t v79 = (v77 - 1);
            int v80 = &v78[32 * v79];
            if (*(void *)v80)
            {
              **((void **)v80 + 2) = *((void *)v80 + 1);
              uint64_t v88 = *((void *)v80 + 1);
              if (v88) {
                *(void *)(v88 + 16) = *((void *)v80 + 2);
              }
            }
            *(void *)int v80 = v75;
            if (v75)
            {
              uint64_t v83 = *(void *)(v75 + 8);
              unsigned int v82 = (char **)(v75 + 8);
              uint64_t v81 = v83;
              int v84 = &v78[32 * v79];
              *((void *)v84 + 1) = v83;
              if (v83) {
                *(void *)(v81 + 16) = v84 + 8;
              }
              *((void *)v84 + 2) = v82;
              *unsigned int v82 = v80;
            }
            int v85 = *((_DWORD *)v63 + 7);
            uint64_t v86 = v85 & 0x7FFFFFF;
            if ((v85 & 0x40000000) != 0) {
              uint64_t v87 = (char *)*v63;
            }
            else {
              uint64_t v87 = (char *)v17 - 32 * v86;
            }
            uint64_t v73 = *((unsigned int *)v63 + 17);
            *(void *)&v87[32 * v73 + 8 * (v86 - 1)] = v74;
            v71 += 16;
          }
          while (v71 != v72);
        }
        unsigned int v148 = (unsigned __int8 *)(*(void *)(*((void *)a2 + 7) + 40) + 272);
        long long v149 = 0u;
        long long v150 = 0u;
        __int16 v151 = 257;
        int v99 = *((_DWORD *)v63 + 7);
        if ((v99 & 0x40000000) != 0)
        {
          unsigned int v101 = (uint64_t *)*v63;
          unint64_t v100 = v99 & 0x7FFFFFF;
        }
        else
        {
          unint64_t v100 = v99 & 0x7FFFFFF;
          unsigned int v101 = (uint64_t *)((char *)v17 - 32 * v100);
        }
        BOOL v153 = v155;
        uint64_t v154 = 0x800000000;
        if (v100 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v100)
        {
          uint64_t v102 = 32 * v100;
          uint64_t v103 = v155;
          do
          {
            uint64_t v104 = *v101;
            v101 += 4;
            *v103++ = v104;
            v102 -= 32;
          }
          while (v102);
          int v105 = v153;
        }
        else
        {
          int v105 = v155;
        }
        LODWORD(v154) = v100;
        uint64_t v106 = llvm::SimplifyInstructionWithOperands(v17, (uint64_t)v105, v100, (uint64_t)&v148, v67, v68, v69);
        if (v153 == v155)
        {
          if (v106) {
            goto LABEL_153;
          }
        }
        else
        {
          free(v153);
          if (v106) {
LABEL_153:
          }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        unsigned int v148 = 0;
        for (unsigned int j = (void *)*((void *)a2 + 6); ; unsigned int j = (void *)j[1])
        {
          if (j == (void *)((char *)a2 + 40)) {
            goto LABEL_166;
          }
          uint64_t v110 = j - 3;
          if (!j) {
            uint64_t v110 = 0;
          }
          if (*((unsigned char *)v110 + 16) != 83) {
            break;
          }
        }
        uint64_t v111 = (unsigned __int8 **)(j + 3);
        if (v111 == &v148 || (v112 = *v111, (unsigned int v148 = v112) == 0))
        {
LABEL_166:
          unsigned int v147 = 0;
          goto LABEL_167;
        }
        llvm::MetadataTracking::track((uint64_t)&v148, v112, 2);
        unsigned int v147 = v148;
        if (v148) {
          llvm::MetadataTracking::track((uint64_t)&v147, v148, 2);
        }
LABEL_167:
        uint64_t v115 = (unsigned __int8 *)v63[7];
        int v114 = (unsigned __int8 **)(v63 + 7);
        int v113 = v115;
        if (!v115) {
          goto LABEL_168;
        }
        int v123 = *v113;
        if ((v123 - 4) > 0x1E)
        {
          if ((v123 - 3) >= 0xFFFFFFFE) {
            uint64_t v134 = v113;
          }
          else {
            uint64_t v134 = 0;
          }
          if ((v123 - 3) < 0xFFFFFFFE)
          {
            if (v123 == 3) {
              *((void *)v113 + 1) = 0;
            }
            goto LABEL_168;
          }
          unint64_t v125 = (unint64_t)(v134 + 8);
        }
        else
        {
          if ((v113[1] & 0x7F) != 2 && !*((_DWORD *)v113 + 3)) {
            goto LABEL_168;
          }
          uint64_t v124 = *((void *)v113 + 2);
          if ((v124 & 4) == 0) {
            goto LABEL_168;
          }
          unint64_t v125 = v124 & 0xFFFFFFFFFFFFFFF8;
          if (!v125) {
            goto LABEL_168;
          }
        }
        BOOL v153 = v114;
        sub_1CC5FA668(v125 + 16, &v153);
LABEL_168:
        uint64_t v116 = v147;
        uint64_t *v114 = v147;
        if (v116)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v147, v116, (uint64_t)v114);
          unsigned int v147 = 0;
        }
        uint64_t v117 = this[5];
        if (v117)
        {
          unsigned int v118 = *((_DWORD *)v117 + 2);
          if (v118 >= *((_DWORD *)v117 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v117 + 8 * v118) = v17;
          ++*((_DWORD *)v117 + 2);
        }
        if (!v148) {
          goto LABEL_95;
        }
        int v119 = *v148;
        if ((v119 - 4) > 0x1E)
        {
          if ((v119 - 3) >= 0xFFFFFFFE) {
            uint64_t v122 = v148;
          }
          else {
            uint64_t v122 = 0;
          }
          if ((v119 - 3) < 0xFFFFFFFE)
          {
            if (v119 == 3) {
              *((void *)v148 + 1) = 0;
            }
            goto LABEL_95;
          }
          unint64_t v121 = (unint64_t)(v122 + 8);
        }
        else
        {
          if ((v148[1] & 0x7F) != 2 && !*((_DWORD *)v148 + 3)) {
            goto LABEL_95;
          }
          uint64_t v120 = *((void *)v148 + 2);
          if ((v120 & 4) == 0) {
            goto LABEL_95;
          }
          unint64_t v121 = v120 & 0xFFFFFFFFFFFFFFF8;
          if (!v121) {
            goto LABEL_95;
          }
        }
        BOOL v153 = &v148;
        sub_1CC5FA668(v121 + 16, &v153);
LABEL_95:
        if (v157 != v159) {
          free(v157);
        }
        return v17;
      }
      if ((*((unsigned char *)v63 + 31) & 0x10) == 0) {
        goto LABEL_223;
      }
      uint64_t v126 = ***(void ***)v17;
      uint64_t v127 = *(void *)(v126 + 152);
      uint64_t v128 = *(unsigned int *)(v126 + 168);
      if (v128)
      {
        LODWORD(v129) = (v128 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        uint64_t v130 = (llvm::UndefValue **)(v127 + 16 * v129);
        uint64_t v131 = *v130;
        if (*v130 == v17)
        {
LABEL_216:
          BOOL v138 = v130[1];
          unint64_t v141 = *(void *)v138;
          int v139 = (char *)v138 + 16;
          unint64_t v140 = v141;
          if (v141 >= 5 && *(_DWORD *)v139 == *(_DWORD *)"llvm." && v139[4] == aLlvm_1[4])
          {
            *((_DWORD *)v63 + 10) |= 0x2000u;
            int v143 = llvm::Function::lookupIntrinsicID(v139, v140);
LABEL_224:
            *((_DWORD *)v63 + 11) = v143;
            goto LABEL_104;
          }
LABEL_223:
          int v143 = 0;
          *((_DWORD *)v63 + 10) &= ~0x2000u;
          goto LABEL_224;
        }
        int v132 = 1;
        while (v131 != (llvm::UndefValue *)-4096)
        {
          int v133 = v129 + v132++;
          uint64_t v129 = v133 & (v128 - 1);
          uint64_t v131 = *(llvm::UndefValue **)(v127 + 16 * v129);
          if (v131 == v17)
          {
            uint64_t v130 = (llvm::UndefValue **)(v127 + 16 * v129);
            goto LABEL_216;
          }
        }
      }
      uint64_t v130 = (llvm::UndefValue **)(v127 + 16 * v128);
      goto LABEL_216;
    }
LABEL_94:
    uint64_t v17 = llvm::UndefValue::get(this[1], a2);
    goto LABEL_95;
  }
LABEL_28:

  return llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)this, a2);
}

llvm::UndefValue *llvm::SSAUpdater::RewriteUse(llvm::SSAUpdater *this, llvm::Use *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  if (v3 && *(unsigned char *)(v3 + 16) == 83)
  {
    int v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0) {
      uint64_t v5 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v5 = v3 - 32 * (v4 & 0x7FFFFFF);
    }
    BOOL result = llvm::SSAUpdater::GetValueAtEndOfBlockInternal(this, *(llvm::BasicBlock **)(v5+ 32 * *(unsigned int *)(v3 + 60)+ 8 * (((unint64_t)a2 - v5) >> 5)));
  }
  else
  {
    BOOL result = llvm::SSAUpdater::GetValueInMiddleOfBlock((llvm::UndefValue **)this, *(llvm::BasicBlock **)(v3 + 40));
  }
  if (*(void *)a2)
  {
    **((void **)a2 + 2) = *((void *)a2 + 1);
    uint64_t v7 = *((void *)a2 + 1);
    if (v7) {
      *(void *)(v7 + 16) = *((void *)a2 + 2);
    }
  }
  *(void *)a2 = result;
  if (result)
  {
    uint64_t v9 = *((void *)result + 1);
    BOOL result = (llvm::UndefValue *)((char *)result + 8);
    uint64_t v8 = v9;
    *((void *)a2 + 1) = v9;
    if (v9) {
      *(void *)(v8 + 16) = (char *)a2 + 8;
    }
    *((void *)a2 + 2) = result;
    *(void *)BOOL result = a2;
  }
  return result;
}

llvm::UndefValue *llvm::SSAUpdater::RewriteUseAfterInsertions(llvm::SSAUpdater *this, llvm::Use *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  if (v3 && *(unsigned char *)(v3 + 16) == 83)
  {
    int v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0) {
      uint64_t v5 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v5 = v3 - 32 * (v4 & 0x7FFFFFF);
    }
    int v6 = (llvm::BasicBlock **)(v5
                             + 32 * *(unsigned int *)(v3 + 60)
                             + 8 * (((unint64_t)a2 - v5) >> 5));
  }
  else
  {
    int v6 = (llvm::BasicBlock **)(v3 + 40);
  }
  BOOL result = llvm::SSAUpdater::GetValueAtEndOfBlockInternal(this, *v6);
  if (*(void *)a2)
  {
    **((void **)a2 + 2) = *((void *)a2 + 1);
    uint64_t v8 = *((void *)a2 + 1);
    if (v8) {
      *(void *)(v8 + 16) = *((void *)a2 + 2);
    }
  }
  *(void *)a2 = result;
  if (result)
  {
    uint64_t v10 = *((void *)result + 1);
    BOOL result = (llvm::UndefValue *)((char *)result + 8);
    uint64_t v9 = v10;
    *((void *)a2 + 1) = v10;
    if (v10) {
      *(void *)(v9 + 16) = (char *)a2 + 8;
    }
    *((void *)a2 + 2) = result;
    *(void *)BOOL result = a2;
  }
  return result;
}

void *llvm::LoadAndStorePromoter::LoadAndStorePromoter(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, char *a5, size_t a6)
{
  *a1 = &unk_1F2648DB8;
  a1[1] = a4;
  if (a3)
  {
    uint64_t v7 = *a2;
    if (!*a2 || *((unsigned char *)v7 + 16) != 60) {
      uint64_t v7 = (uint64_t *)*(v7 - 8);
    }
    if (a6) {
      goto LABEL_14;
    }
    if ((*((unsigned char *)v7 + 23) & 0x10) == 0)
    {
      a6 = 0;
      a5 = &byte_1CFBCE98E;
      goto LABEL_14;
    }
    uint64_t v8 = **(void **)*v7;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t **)(v9 + 16 * v11);
      int v13 = *v12;
      if (*v12 == v7)
      {
LABEL_13:
        uint64_t v16 = v12[1];
        size_t v17 = *v16;
        a5 = (char *)(v16 + 2);
        a6 = v17;
LABEL_14:
        llvm::SSAUpdater::Initialize(a4, *v7, a5, a6);
        return a1;
      }
      int v14 = 1;
      while (v13 != (uint64_t *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        int v13 = *(uint64_t **)(v9 + 16 * v11);
        if (v13 == v7)
        {
          uint64_t v12 = (uint64_t **)(v9 + 16 * v11);
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = (uint64_t **)(v9 + 16 * v10);
    goto LABEL_13;
  }
  return a1;
}

uint64_t llvm::LoadAndStorePromoter::run(llvm::UndefValue ***a1, uint64_t a2)
{
  v92[32] = *MEMORY[0x1E4F143B8];
  v87[0] = 0;
  v87[1] = 0;
  unsigned int v88 = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (!v4)
  {
    uint64_t v90 = v92;
    uint64_t v91 = 0x2000000000;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    unsigned int v86 = 0;
    goto LABEL_107;
  }
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = 8 * v4;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = *(void *)(*v5 + 40);
    uint64_t v84 = v8;
    uint64_t v90 = 0;
    if ((sub_1CC076DC4(v87[0], v88, v8, &v90) & 1) == 0)
    {
      int v13 = sub_1CD209CF0((uint64_t)v87, &v84, v90);
      void *v13 = v8;
      v13[1] = 0;
      uint64_t v9 = v13 + 1;
LABEL_10:
      *uint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_11;
    }
    uint64_t v9 = (unint64_t *)((char *)v90 + 8);
    unint64_t v10 = *((void *)v90 + 1);
    if (v10 <= 7) {
      goto LABEL_10;
    }
    if ((v10 & 4) == 0) {
      operator new();
    }
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = *(unsigned int *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v12 >= *(unsigned int *)((v10 & 0xFFFFFFFFFFFFFFF8) + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v11 + 8 * v12) = v7;
    ++*(_DWORD *)(v11 + 8);
LABEL_11:
    ++v5;
    v6 -= 8;
  }
  while (v6);
  int v14 = *(void **)a2;
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  uint64_t v90 = v92;
  uint64_t v91 = 0x2000000000;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  unsigned int v86 = 0;
  if (!v15) {
    goto LABEL_107;
  }
  uint64_t v16 = &v14[v15];
  while (2)
  {
    uint64_t v17 = *v14;
    uint64_t v18 = *(void **)(*v14 + 40);
    uint64_t v83 = v18;
    unsigned int v89 = 0;
    char v19 = sub_1CC076DC4(v87[0], v88, (uint64_t)v18, &v89);
    uint64_t v20 = v89;
    if ((v19 & 1) == 0)
    {
      uint64_t v57 = sub_1CD209CF0((uint64_t)v87, (uint64_t *)&v83, v89);
      *uint64_t v57 = v18;
      v57[1] = 0;
      goto LABEL_95;
    }
    unint64_t v21 = v89[1];
    if (v21 < 8) {
      goto LABEL_95;
    }
    unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    if ((v21 & 4) == 0 || !v22)
    {
      if ((v21 & 4) != 0)
      {
        uint64_t v23 = *(unsigned int *)(v22 + 8);
        goto LABEL_24;
      }
LABEL_25:
      if (*(unsigned char *)(v17 + 16) != 61)
      {
        if (v91 >= (unint64_t)HIDWORD(v91)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v90 + v91) = v17;
        LODWORD(v91) = v91 + 1;
        goto LABEL_90;
      }
      ((void (*)(llvm::UndefValue ***, uint64_t))(*a1)[6])(a1, v17);
      unsigned int v24 = a1[1];
      uint64_t v25 = *(llvm::Value **)(v17 - 64);
      unsigned int v89 = v18;
      uint64_t v26 = *v24;
      int v27 = *((_DWORD *)*v24 + 4);
      if (v27)
      {
        int v28 = v27 - 1;
        unsigned int v29 = (v27 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        BOOL v30 = (uint64_t *)(*(void *)v26 + 16 * v29);
        uint64_t v31 = *v30;
        if (v18 != (void *)*v30)
        {
          char v32 = 0;
          int v33 = 1;
          while (v31 != -4096)
          {
            if (v32) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v31 == -8192;
            }
            if (v34) {
              char v32 = v30;
            }
            unsigned int v35 = v29 + v33++;
            unsigned int v29 = v35 & v28;
            BOOL v30 = (uint64_t *)(*(void *)v26 + 16 * (v35 & v28));
            uint64_t v31 = *v30;
            if (v18 == (void *)*v30) {
              goto LABEL_89;
            }
          }
          goto LABEL_85;
        }
        goto LABEL_89;
      }
      goto LABEL_97;
    }
    uint64_t v23 = *(unsigned int *)(v22 + 8);
    if (!v23) {
      goto LABEL_95;
    }
LABEL_24:
    if (v23 == 1) {
      goto LABEL_25;
    }
    if (!v23) {
      goto LABEL_91;
    }
    uint64_t v36 = *(void **)v22;
    uint64_t v37 = 8 * v23;
    uint64_t v38 = 8 * v23;
    unint64_t v39 = *(void **)v22;
    while (*(unsigned char *)(*v39 + 16) != 61)
    {
      ++v39;
      v38 -= 8;
      if (!v38)
      {
        unsigned int v40 = v91;
        do
        {
          if (v40 >= HIDWORD(v91)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v90 + v40) = *v36;
          unsigned int v40 = v91 + 1;
          LODWORD(v91) = v91 + 1;
          ++v36;
          v37 -= 8;
        }
        while (v37);
        goto LABEL_90;
      }
    }
    uint64_t v41 = v18 + 5;
    uint64_t v42 = (void *)v18[6];
    if (v42 == v18 + 5)
    {
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = 0;
      do
      {
        if (v42) {
          unint64_t v43 = (unsigned __int8 *)(v42 - 3);
        }
        else {
          unint64_t v43 = 0;
        }
        int v44 = v43[16];
        if (v44 == 60) {
          uint64_t v45 = (llvm::ValueAsMetadata *)v43;
        }
        else {
          uint64_t v45 = 0;
        }
        if (v42 && v44 == 60)
        {
          if (((unsigned int (*)(llvm::UndefValue ***, llvm::ValueAsMetadata *, uint64_t))(*a1)[2])(a1, v45, a2))
          {
            if (v25)
            {
              ((void (*)(llvm::UndefValue ***, llvm::ValueAsMetadata *, llvm::Value *))(*a1)[4])(a1, v45, v25);
              llvm::Value::doRAUW(v45, v25, (llvm::Value *)1);
              unsigned int v89 = v45;
              sub_1CC080DE0(&v84, &v89)[1] = v25;
            }
            else
            {
              if (v91 >= (unint64_t)HIDWORD(v91)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v25 = 0;
              *((void *)v90 + v91) = v45;
              LODWORD(v91) = v91 + 1;
            }
          }
        }
        else
        {
          if (v44 == 61) {
            unsigned int v46 = v43;
          }
          else {
            unsigned int v46 = 0;
          }
          if (v42
            && v44 == 61
            && ((unsigned int (*)(llvm::UndefValue ***, unsigned __int8 *, uint64_t))(*a1)[2])(a1, v46, a2))
          {
            ((void (*)(llvm::UndefValue ***, unsigned __int8 *))(*a1)[6])(a1, v46);
            uint64_t v25 = (llvm::Value *)*((void *)v46 - 8);
          }
        }
        uint64_t v42 = (void *)v42[1];
      }
      while (v42 != v41);
      uint64_t v18 = v83;
    }
    int v47 = a1[1];
    unsigned int v89 = v18;
    uint64_t v26 = *v47;
    int v48 = *((_DWORD *)*v47 + 4);
    if (!v48)
    {
LABEL_97:
      uint64_t v55 = 0;
      goto LABEL_88;
    }
    int v49 = v48 - 1;
    unsigned int v50 = (v48 - 1) & ((v18 >> 4) ^ (v18 >> 9));
    BOOL v30 = (uint64_t *)(*(void *)v26 + 16 * v50);
    uint64_t v51 = *v30;
    if (v18 == (void *)*v30) {
      goto LABEL_89;
    }
    char v32 = 0;
    int v52 = 1;
    while (v51 != -4096)
    {
      if (v32) {
        BOOL v53 = 0;
      }
      else {
        BOOL v53 = v51 == -8192;
      }
      if (v53) {
        char v32 = v30;
      }
      unsigned int v54 = v50 + v52++;
      unsigned int v50 = v54 & v49;
      BOOL v30 = (uint64_t *)(*(void *)v26 + 16 * (v54 & v49));
      uint64_t v51 = *v30;
      if (v18 == (void *)*v30) {
        goto LABEL_89;
      }
    }
LABEL_85:
    if (v32) {
      uint64_t v55 = v32;
    }
    else {
      uint64_t v55 = v30;
    }
LABEL_88:
    BOOL v30 = sub_1CC0A3E2C((uint64_t)v26, (uint64_t)&v89, (uint64_t *)&v89, v55);
    *BOOL v30 = (uint64_t)v89;
    v30[1] = 0;
LABEL_89:
    v30[1] = (uint64_t)v25;
LABEL_90:
    unint64_t v21 = v20[1];
LABEL_91:
    if ((v21 & 4) != 0)
    {
      unint64_t v56 = v21 & 0xFFFFFFFFFFFFFFF8;
      if (v56) {
        *(_DWORD *)(v56 + 8) = 0;
      }
    }
    else
    {
      v20[1] = 0;
    }
LABEL_95:
    if (++v14 != v16) {
      continue;
    }
    break;
  }
  if (v91)
  {
    uint64_t v58 = (llvm::UndefValue ***)v90;
    uint64_t v59 = 8 * v91;
    do
    {
      int v60 = *v58;
      ValueInMiddleOfBlocuint64_t k = llvm::SSAUpdater::GetValueInMiddleOfBlock(a1[1], (*v58)[5]);
      ((void (*)(llvm::UndefValue ***, llvm::UndefValue **, llvm::UndefValue *))(*a1)[4])(a1, v60, ValueInMiddleOfBlock);
      if (ValueInMiddleOfBlock == (llvm::UndefValue *)v60) {
        ValueInMiddleOfBlocuint64_t k = llvm::UndefValue::get(*v60, v62);
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v60, ValueInMiddleOfBlock, (llvm::Value *)1);
      unsigned int v89 = v60;
      sub_1CC080DE0(&v84, &v89)[1] = ValueInMiddleOfBlock;
      ++v58;
      v59 -= 8;
    }
    while (v59);
  }
LABEL_107:
  ((void (*)(llvm::UndefValue ***))(*a1)[3])(a1);
  uint64_t v63 = *(unsigned int *)(a2 + 8);
  if (v63)
  {
    uint64_t v64 = *(void **)a2;
    uint64_t v65 = *(void *)a2 + 8 * v63;
    do
    {
      uint64_t v66 = (void *)*v64;
      if (((unsigned int (*)(llvm::UndefValue ***, void))(*a1)[7])(a1, *v64))
      {
        if (v66[1])
        {
          unsigned int v89 = v66;
          uint64_t v67 = (llvm::Value *)sub_1CC080DE0(&v84, &v89)[1];
          if (v86)
          {
            unsigned int v68 = v86 - 1;
            LODWORD(v69) = ((v67 >> 4) ^ (v67 >> 9)) & (v86 - 1);
            unint64_t v70 = (llvm::Value **)(v84 + 16 * v69);
            unint64_t v71 = *v70;
            if (v67 != *v70)
            {
              int v76 = 1;
              do
              {
                if (v71 == (llvm::Value *)-4096) {
                  goto LABEL_123;
                }
                int v77 = v69 + v76++;
                uint64_t v69 = v77 & v68;
                unint64_t v71 = *(llvm::Value **)(v84 + 16 * v69);
              }
              while (v67 != v71);
              unint64_t v70 = (llvm::Value **)(v84 + 16 * v69);
            }
            while (v70 != (llvm::Value **)(v84 + 16 * v86))
            {
              uint64_t v67 = v70[1];
              LODWORD(v72) = ((v67 >> 4) ^ (v67 >> 9)) & v68;
              unint64_t v70 = (llvm::Value **)(v84 + 16 * v72);
              uint64_t v73 = *v70;
              if (v67 != *v70)
              {
                int v74 = 1;
                do
                {
                  if (v73 == (llvm::Value *)-4096) {
                    goto LABEL_123;
                  }
                  int v75 = v72 + v74++;
                  uint64_t v72 = v75 & v68;
                  uint64_t v73 = *(llvm::Value **)(v84 + 16 * v72);
                }
                while (v67 != v73);
                unint64_t v70 = (llvm::Value **)(v84 + 16 * v72);
              }
            }
          }
LABEL_123:
          ((void (*)(llvm::UndefValue ***, void *, llvm::Value *))(*a1)[4])(a1, v66, v67);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v66, v67, (llvm::Value *)1);
        }
        ((void (*)(llvm::UndefValue ***, void *))(*a1)[5])(a1, v66);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      ++v64;
    }
    while (v64 != (void *)v65);
  }
  MEMORY[0x1D25D9CD0](v84, 8);
  if (v90 != v92) {
    free(v90);
  }
  uint64_t v78 = v87[0];
  if (v88)
  {
    uint64_t v79 = (uint64_t *)(v87[0] + 8);
    uint64_t v80 = 16 * v88;
    do
    {
      uint64_t v81 = *(v79 - 1);
      if (v81 != -4096 && v81 != -8192) {
        uint64_t v79 = sub_1CD209C7C(v79);
      }
      v79 += 2;
      v80 -= 16;
    }
    while (v80);
  }
  return MEMORY[0x1D25D9CD0](v78, 8);
}

uint64_t sub_1CD209918(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CD2099C4(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = *a1 >> 1;
  if (*a1) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = a1[4];
  }
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v7 = (uint64_t)a1;
  sub_1CD88F100((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CD209918(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t *sub_1CD209A88(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    BOOL v12 = 0;
LABEL_15:
    unsigned int v6 = sub_1CC0A3E2C(a1, (uint64_t)a2, a2, v12);
    *unsigned int v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  unsigned int v6 = (uint64_t *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      unsigned int v6 = (uint64_t *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      BOOL v12 = v8;
    }
    else {
      BOOL v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

uint64_t *sub_1CD209B44(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC02A420(a1, v6);
      uint64_t v16 = 0;
      sub_1CC0B17CC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CC02A420(a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    BOOL v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        BOOL v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t *sub_1CD209C7C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    int v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2) {
        free(*v3);
      }
      MEMORY[0x1D25D9CE0]();
    }
  }
  return a1;
}

void *sub_1CD209CF0(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD209DA8(a1, v6);
  uint64_t v8 = 0;
  sub_1CC076DC4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD209DA8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD88F350((uint64_t *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::SSAUpdaterBulk::computeValueAt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a2;
  int v3 = *(_DWORD *)(a3 + 16);
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)a3;
  unsigned int v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = *(void *)(*(void *)a3 + 16 * v5);
  if (v6 != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v5 + v7++;
      unsigned int v5 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v4 + 16 * v5);
      if (v6 == a2) {
        goto LABEL_8;
      }
    }
LABEL_7:
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
LABEL_8:
  int v9 = v3 - 1;
  unsigned int v10 = ((v19 >> 4) ^ (v19 >> 9)) & v9;
  uint64_t v11 = (uint64_t *)(v4 + 16 * v10);
  uint64_t v12 = *v11;
  if (v19 != *v11)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      uint64_t v11 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v12 = *v11;
      if (v19 == *v11) {
        return v11[1];
      }
    }
    if (v13) {
      uint64_t v17 = v13;
    }
    else {
      uint64_t v17 = v11;
    }
    uint64_t v11 = sub_1CC0A3E2C(a3, (uint64_t)&v19, &v19, v17);
    *uint64_t v11 = v19;
    v11[1] = 0;
  }
  return v11[1];
}

uint64_t sub_1CD20A164(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 && *(unsigned char *)(v1 + 16) == 83)
  {
    int v2 = *(_DWORD *)(v1 + 20);
    if ((v2 & 0x40000000) != 0) {
      uint64_t v3 = *(void *)(v1 - 8);
    }
    else {
      uint64_t v3 = v1 - 32 * (v2 & 0x7FFFFFF);
    }
    uint64_t v4 = v3 + 32 * *(unsigned int *)(v1 + 60) + 8 * ((unint64_t)(a1 - v3) >> 5);
  }
  else
  {
    uint64_t v4 = v1 + 40;
  }
  return *(void *)v4;
}

void llvm::applyFlowInference(void *a1)
{
  uint64_t v414 = *MEMORY[0x1E4F143B8];
  unint64_t v402 = 0;
  long long v400 = 0u;
  long long v401 = 0u;
  long long v398 = 0u;
  long long v399 = 0u;
  *(_OWORD *)uint64_t v397 = 0u;
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  unint64_t v3 = (v1 - *a1) / 88;
  uint64_t v4 = *a1 + 88 * a1[6];
  uint64_t v6 = *(void *)(v4 + 8);
  unsigned int v5 = (void *)(v4 + 8);
  if (!v6) {
    *unsigned int v5 = 1;
  }
  *(void *)&long long v400 = 3 * v3 + 2;
  *((void *)&v400 + 1) = 3 * v3 + 3;
  uint64_t __p = 3 * v3;
  unint64_t v7 = 3 * v3 + 4;
  if (3 * v3 == -4)
  {
    int v9 = 0;
    uint64_t v381 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unsigned int v10 = 0;
    v397[0] = 0;
    v397[1] = 0;
    *(void *)&long long v398 = 0;
    *((void *)&v410 + 1) = 0;
    *(void *)&long long v411 = 0;
  }
  else
  {
    if (v7 >= 0x38E38E38E38E38FLL) {
      goto LABEL_507;
    }
    unsigned int v8 = (char *)operator new(72 * v7);
    bzero(v8, 72 * ((216 * v3 + 216) / 0x48) + 72);
    int v9 = &v8[72 * ((216 * v3 + 216) / 0x48) + 72];
    uint64_t v381 = v8;
    v397[0] = v8;
    v397[1] = v9;
    *(void *)&long long v398 = &v8[72 * v7];
    *((void *)&v410 + 1) = 0;
    *(void *)&long long v411 = 0;
    unsigned int v10 = (char *)operator new(24 * v7);
    uint64_t v11 = &v10[24 * v7];
    bzero(v10, 24 * ((72 * v3 + 72) / 0x18) + 24);
    uint64_t v12 = &v10[24 * ((72 * v3 + 72) / 0x18) + 24];
  }
  *((void *)&v398 + 1) = v10;
  *(void *)&long long v399 = v12;
  *((void *)&v399 + 1) = v11;
  *(void *)&long long v411 = 0;
  long long v410 = 0uLL;
  sub_1CD20C390((void **)&v410);
  if (byte_1EBCFD808)
  {
    if (3 * v3 == -4)
    {
      BOOL v15 = 0;
      int v14 = 0;
    }
    else
    {
      uint64_t v13 = 3 * v7;
      int v14 = (char *)operator new(8 * v13);
      unint64_t v7 = (unint64_t)&v14[8 * v13];
      bzero(v14, 24 * ((72 * v3 + 72) / 0x18) + 24);
      BOOL v15 = &v14[24 * ((72 * v3 + 72) / 0x18) + 24];
    }
    *(void *)&long long v401 = v14;
    *((void *)&v401 + 1) = v15;
    unint64_t v402 = v7;
    *(void *)&long long v411 = 0;
    long long v410 = 0uLL;
    sub_1CD20C390((void **)&v410);
  }
  if (v1 != v2)
  {
    uint64_t v16 = 0;
    if (v3 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v3;
    }
    uint64_t v18 = 40;
    while (1)
    {
      uint64_t v19 = *a1;
      uint64_t v20 = *a1 + v18;
      uint64_t v21 = *(void *)(v20 - 32);
      if (v21)
      {
        sub_1CD20C05C((uint64_t)v397, 3 * v3 + 2, v16 + 1, v21, 0);
        sub_1CD20C05C((uint64_t)v397, v16, 3 * v3 + 3, *(void *)(v20 - 32), 0);
      }
      if (*(void *)(v20 + 24) == *(void *)(v20 + 32)) {
        break;
      }
      if (*(void *)(v19 + v18) == *(void *)(v19 + v18 + 8))
      {
        uint64_t v22 = v16 + 1;
        uint64_t v23 = __p + 1;
LABEL_23:
        sub_1CD20C05C((uint64_t)v397, v22, v23, 0x4000000000000, 0);
      }
      uint64_t v24 = v19 + v18;
      if (*(unsigned char *)(v19 + v18 - 24))
      {
        unsigned int v25 = 0;
        uint64_t v26 = 0;
      }
      else
      {
        if (*(void *)(v20 - 32)) {
          int v27 = (int *)&unk_1EBCFD988;
        }
        else {
          int v27 = &dword_1EBCFDB08;
        }
        if (*(void *)(v20 + 24) == *(void *)(v20 + 32))
        {
          unsigned int v25 = dword_1EBCFDBC8;
          uint64_t v26 = dword_1EBCFDC88;
        }
        else
        {
          uint64_t v26 = dword_1EBCFDA48;
          unsigned int v25 = *v27;
        }
      }
      uint64_t v28 = v25;
      int v29 = *(unsigned __int8 *)(v24 - 8);
      sub_1CD20C05C((uint64_t)v397, v16, v16 + 2, 0x4000000000000, v25);
      sub_1CD20C05C((uint64_t)v397, v16 + 2, v16 + 1, 0x4000000000000, v28);
      if (*(void *)(v20 - 32))
      {
        if (v29) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v26;
        }
        sub_1CD20C05C((uint64_t)v397, v16 + 1, v16 + 2, 0x4000000000000, v30);
        sub_1CD20C05C((uint64_t)v397, v16 + 2, v16, 0x4000000000000, v30);
      }
      v18 += 88;
      v16 += 3;
      if (!--v17) {
        goto LABEL_38;
      }
    }
    uint64_t v22 = 3 * v3;
    uint64_t v23 = v16;
    goto LABEL_23;
  }
LABEL_38:
  uint64_t v31 = a1[3];
  uint64_t v32 = a1[4];
  while (v31 != v32)
  {
    uint64_t v33 = *(void *)(v31 + 8);
    if (*(void *)v31 != v33) {
      sub_1CD20C05C((uint64_t)v397, 3 * *(void *)v31 + 1, 3 * v33, 0x4000000000000, (unint64_t)*(unsigned __int8 *)(v31 + 24) << 30);
    }
    v31 += 32;
  }
  sub_1CD20C05C((uint64_t)v397, __p + 1, __p, 0x4000000000000, 0);
  BOOL v34 = v381;
LABEL_44:
  unsigned int v35 = v34;
  for (uint64_t i = v34; v35 != v9; v35 += 72)
  {
    *(void *)unsigned int v35 = 0x4000000000000;
    *((void *)v35 + 1) = -1;
    *((void *)v35 + 2) = -1;
    v35[24] = 0;
  }
  long long v411 = 0u;
  long long v412 = 0u;
  long long v410 = 0u;
  sub_1CD45F140(&v410, &v400);
  uint64_t v37 = v400;
  uint64_t v38 = &i[72 * v400];
  *(void *)uint64_t v38 = 0;
  v38[24] = 1;
  uint64_t v39 = *((void *)&v412 + 1);
  if (*((void *)&v412 + 1))
  {
    do
    {
      uint64_t v40 = *(void *)(*(void *)(*((void *)&v410 + 1) + (((unint64_t)v412 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v412 & 0x1FF));
      *(void *)&long long v412 = v412 + 1;
      *((void *)&v412 + 1) = v39 - 1;
      if ((unint64_t)v412 >= 0x400)
      {
        operator delete(**((void ***)&v410 + 1));
        *((void *)&v410 + 1) += 8;
        *(void *)&long long v412 = v412 - 512;
      }
      i[72 * v40 + 24] = 0;
      uint64_t v41 = *((void *)&v400 + 1);
      uint64_t v42 = *(void *)&i[72 * *((void *)&v400 + 1)];
      if (byte_1EBCFD808) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v42 == 0;
      }
      if (v43) {
        break;
      }
      if (*(void *)&i[72 * v40] <= v42)
      {
        int v44 = (uint64_t *)(*((void *)&v398 + 1) + 24 * v40);
        uint64_t v45 = *v44;
        if (v44[1] != *v44)
        {
          uint64_t v46 = 0;
          unint64_t v47 = 0;
          do
          {
            int v48 = (void *)(v45 + v46);
            if (v48[2] < v48[1])
            {
              *(void *)&v408[0] = v48[3];
              uint64_t v49 = *v48 + *(void *)&i[72 * v40];
              unsigned int v50 = &i[72 * *(void *)&v408[0]];
              if (*v50 > v49)
              {
                void *v50 = v49;
                *(void *)&i[72 * *(void *)&v408[0] + 8] = v40;
                *(void *)&i[72 * *(void *)&v408[0] + 16] = v47;
                uint64_t v51 = *(void *)&v408[0];
                if (!i[72 * *(void *)&v408[0] + 24])
                {
                  sub_1CD45F140(&v410, v408);
                  i[72 * v51 + 24] = 1;
                }
              }
            }
            ++v47;
            uint64_t v45 = *v44;
            v46 += 56;
          }
          while (v47 < 0x6DB6DB6DB6DB6DB7 * ((v44[1] - *v44) >> 3));
        }
      }
      uint64_t v39 = *((void *)&v412 + 1);
    }
    while (*((void *)&v412 + 1));
  }
  else
  {
    uint64_t v41 = *((void *)&v400 + 1);
  }
  uint64_t v52 = *(void *)&i[72 * v41];
  sub_1CB904DFC((void **)&v410);
  if (v52 != 0x4000000000000)
  {
    unint64_t v53 = 0x4000000000000;
    if (v41 != v37)
    {
      do
      {
        unsigned int v54 = &i[72 * v41];
        uint64_t v41 = *((void *)v54 + 1);
        uint64_t v55 = *(void *)(*((void *)&v398 + 1) + 24 * v41) + 56 * *((void *)v54 + 2);
        unint64_t v56 = *(void *)(v55 + 8) - *(void *)(v55 + 16);
        if (v56 < v53) {
          unint64_t v53 = v56;
        }
      }
      while (v41 != v37);
      goto LABEL_223;
    }
    while (1)
    {
      if (!byte_1EBCFD808)
      {
LABEL_226:
        uint64_t v208 = *((void *)&v400 + 1);
        uint64_t v207 = v400;
        if (*((void *)&v400 + 1) != (void)v400)
        {
          unsigned int v209 = (char *)v397[0];
          uint64_t v210 = *((void *)&v398 + 1);
          uint64_t v211 = *(void *)(*((void *)&v398 + 1) + 24 * *((void *)&v400 + 1));
          do
          {
            uint64_t v212 = &v209[72 * v208];
            uint64_t v208 = *((void *)v212 + 1);
            uint64_t v213 = *(void *)(v210 + 24 * v208);
            uint64_t v214 = v213 + 56 * *((void *)v212 + 2);
            uint64_t v215 = *(void *)(v214 + 32);
            *(void *)(v214 + 16) += v53;
            *(void *)(v211 + 56 * v215 + 16) -= v53;
            uint64_t v211 = v213;
          }
          while (v208 != v207);
        }
LABEL_70:
        BOOL v34 = (char *)v397[0];
        int v9 = (char *)v397[1];
        goto LABEL_44;
      }
      unint64_t v57 = v53 <= 1 ? 1 : v53 >> 1;
      uint64_t v59 = (char *)v397[0];
      uint64_t v58 = (char *)v397[1];
      if (v397[1] == v397[0])
      {
        long long v411 = 0u;
        long long v412 = 0u;
        long long v410 = 0u;
        uint64_t v60 = *((void *)&v400 + 1);
      }
      else
      {
        uint64_t v61 = 0;
        unint64_t v62 = ((char *)v397[1] - (char *)v397[0]) / 72;
        uint64_t v60 = *((void *)&v400 + 1);
        uint64_t v63 = *((void *)&v398 + 1);
        uint64_t v64 = *((void *)v397[0] + 9 * *((void *)&v400 + 1));
        if (v62 <= 1) {
          unint64_t v62 = 1;
        }
        do
        {
          uint64_t v65 = *(void *)&v59[72 * v61];
          if (v65 <= v64)
          {
            uint64_t v66 = (uint64_t *)(v63 + 24 * v61);
            uint64_t v67 = *v66;
            uint64_t v68 = v66[1];
            if (v67 != v68)
            {
              uint64_t v69 = v400;
              do
              {
                BOOL v70 = 0;
                if (v61 != v60)
                {
                  uint64_t v71 = *(void *)(v67 + 24);
                  if (v71 != v69)
                  {
                    uint64_t v72 = *(void *)&v59[72 * v71];
                    if (v72 <= v64 && v72 == *(void *)v67 + v65)
                    {
                      uint64_t v73 = *(void *)(v67 + 8);
                      uint64_t v74 = *(void *)(v67 + 16);
                      BOOL v70 = v73 > v74 && v73 - v74 >= v57;
                    }
                    else
                    {
                      BOOL v70 = 0;
                    }
                  }
                }
                *(unsigned char *)(v67 + 40) = v70;
                v67 += 56;
              }
              while (v67 != v68);
            }
          }
          ++v61;
        }
        while (v61 != v62);
        long long v411 = 0u;
        long long v412 = 0u;
        int v75 = v59;
        long long v410 = 0u;
        do
        {
          v75[24] = 0;
          *((void *)v75 + 7) = 0;
          *((void *)v75 + 8) = 0;
          *((void *)v75 + 6) = 0;
          v75 += 72;
        }
        while (v75 != v58);
      }
      v59[72 * v60 + 24] = 1;
      LODWORD(v408[0]) = 0;
      sub_1CD88FE84(&v410, &v400, (int *)v408);
      *(void *)&v59[72 * v400 + 48] = 1;
      uint64_t v76 = *((void *)&v412 + 1);
      if (!*((void *)&v412 + 1)) {
        break;
      }
      int v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 1;
      do
      {
        unint64_t v81 = v412 + v76 - 1;
        uint64_t v82 = *(void *)(*((void *)&v410 + 1) + ((v81 >> 5) & 0x7FFFFFFFFFFFFF8));
        uint64_t v83 = v82 + 16 * v81;
        uint64_t v84 = *(void *)(v82 + 16 * (v412 + v76 - 1));
        unint64_t v87 = *(void *)(v83 + 8);
        uint64_t v85 = (void *)(v83 + 8);
        unint64_t v86 = v87;
        uint64_t v88 = *(void *)(*((void *)&v398 + 1) + 24 * v84);
        if (v87 >= 0x6DB6DB6DB6DB6DB7 * ((*(void *)(*((void *)&v398 + 1) + 24 * v84 + 8) - v88) >> 3))
        {
          *((void *)&v412 + 1) = v76 - 1;
          if ((void)v411 == *((void *)&v410 + 1)) {
            uint64_t v104 = 0;
          }
          else {
            uint64_t v104 = 32 * (v411 - *((void *)&v410 + 1)) - 1;
          }
          if ((unint64_t)(v104 - (v76 + v412) + 1) >= 0x200)
          {
            int v105 = v77;
            operator delete(*(void **)(v411 - 8));
            int v77 = v105;
            *(void *)&long long v411 = v411 - 8;
          }
          uint64_t v106 = v397[0];
          if (*((unsigned char *)v397[0] + 72 * v84 + 24))
          {
            *((void *)v397[0] + 9 * v84 + 7) = ++v80;
            if (v84 != (void)v400) {
              v106[72
            }
                 * *(void *)(*(void *)(*((void *)&v410 + 1)
                                         + (((unint64_t)(*((void *)&v412 + 1) + v412 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (BYTE8(v412) + v412 - 1))
                 + 24] = 1;
            if (v78 >= v79)
            {
              uint64_t v107 = (v78 - v77) >> 3;
              unint64_t v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 61) {
                goto LABEL_507;
              }
              if ((v79 - v77) >> 2 > v108) {
                unint64_t v108 = (v79 - v77) >> 2;
              }
              if ((unint64_t)(v79 - v77) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109)
              {
                if (v109 >> 61) {
                  goto LABEL_508;
                }
                uint64_t v110 = v77;
                uint64_t v111 = (char *)operator new(8 * v109);
                int v77 = v110;
              }
              else
              {
                uint64_t v111 = 0;
              }
              int v112 = &v111[8 * v107];
              *(void *)int v112 = v84;
              int v113 = v112 + 8;
              while (v78 != v77)
              {
                uint64_t v114 = *((void *)v78 - 1);
                v78 -= 8;
                *((void *)v112 - 1) = v114;
                v112 -= 8;
              }
              uint64_t v79 = &v111[8 * v109];
              if (v77) {
                operator delete(v77);
              }
              uint64_t v78 = v113;
              int v77 = v112;
            }
            else
            {
              *(void *)uint64_t v78 = v84;
              v78 += 8;
            }
          }
          else
          {
            *((void *)v397[0] + 9 * v84 + 6) = 0;
          }
        }
        else
        {
          uint64_t v89 = v88 + 56 * v86;
          uint64_t v92 = *(void *)(v89 + 24);
          uint64_t v90 = v89 + 24;
          uint64_t v91 = v92;
          BOOL v93 = v397[0];
          *uint64_t v85 = v86 + 1;
          if (*(unsigned char *)(v90 + 16))
          {
            int v94 = &v93[72 * v91];
            uint64_t v96 = *((void *)v94 + 6);
            uint64_t v95 = v94 + 48;
            if (v96
              || (uint64_t v97 = &v93[72 * v91], v99 = *((void *)v97 + 8), v98 = v97 + 64, v99 >= dword_1EBCFD8C8))
            {
              unint64_t v100 = &v93[72 * v91];
              int v101 = v100[24];
              uint64_t v102 = *((void *)v100 + 7);
              if (v101) {
                BOOL v103 = v102 == 0;
              }
              else {
                BOOL v103 = 1;
              }
              if (!v103) {
                v93[72 * v84 + 24] = 1;
              }
            }
            else
            {
              *uint64_t v95 = ++v80;
              LODWORD(v408[0]) = 0;
              uint64_t v115 = v77;
              sub_1CD88FE84(&v410, (void *)v90, (int *)v408);
              int v77 = v115;
              ++*v98;
            }
          }
        }
        uint64_t v76 = *((void *)&v412 + 1);
      }
      while (*((void *)&v412 + 1));
      uint64_t v116 = v78 - 8;
      BOOL v117 = v77 == v78 || v77 >= v116;
      if (!v117)
      {
        unsigned int v118 = v77 + 8;
        do
        {
          uint64_t v119 = *((void *)v118 - 1);
          *((void *)v118 - 1) = *(void *)v116;
          *(void *)uint64_t v116 = v119;
          v116 -= 8;
          BOOL v117 = v118 >= v116;
          v118 += 8;
        }
        while (!v117);
      }
      if (v77 == v78) {
        goto LABEL_196;
      }
      uint64_t v120 = v77;
      __pa = v77;
      do
      {
        unsigned int v393 = v120;
        uint64_t v121 = *(void *)v120;
        *(void *)(v401 + 24 * *(void *)v120 + 8) = *(void *)(v401 + 24 * *(void *)v120);
        uint64_t v122 = (uint64_t *)(*((void *)&v398 + 1) + 24 * v121);
        uint64_t v123 = *v122;
        uint64_t v124 = v122[1];
        while (v123 != v124)
        {
          if (*(unsigned char *)(v123 + 40))
          {
            if (*((unsigned char *)v397[0] + 72 * v121 + 24))
            {
              uint64_t v125 = *(void *)(v123 + 24);
              if (*((unsigned char *)v397[0] + 72 * v125 + 24))
              {
                if (*((void *)v397[0] + 9 * v125 + 7) < *((void *)v397[0] + 9 * v121 + 7))
                {
                  uint64_t v126 = (void **)(v401 + 24 * v121);
                  uint64_t v128 = v126 + 1;
                  uint64_t v127 = v126[1];
                  unint64_t v129 = (unint64_t)v126[2];
                  if ((unint64_t)v127 >= v129)
                  {
                    uint64_t v131 = ((char *)v127 - (unsigned char *)*v126) >> 3;
                    if ((unint64_t)(v131 + 1) >> 61) {
                      goto LABEL_507;
                    }
                    uint64_t v132 = v129 - (void)*v126;
                    uint64_t v133 = v132 >> 2;
                    if (v132 >> 2 <= (unint64_t)(v131 + 1)) {
                      uint64_t v133 = v131 + 1;
                    }
                    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v134 = v133;
                    }
                    if (v134)
                    {
                      if (v134 >> 61) {
                        goto LABEL_508;
                      }
                      uint64_t v135 = (char *)operator new(8 * v134);
                    }
                    else
                    {
                      uint64_t v135 = 0;
                    }
                    uint64_t v136 = &v135[8 * v131];
                    *(void *)uint64_t v136 = v123;
                    uint64_t v130 = v136 + 8;
                    int v137 = (char *)*v128;
                    BOOL v138 = (char *)*v126;
                    if (*v128 != *v126)
                    {
                      do
                      {
                        uint64_t v139 = *((void *)v137 - 1);
                        v137 -= 8;
                        *((void *)v136 - 1) = v139;
                        v136 -= 8;
                      }
                      while (v137 != v138);
                      int v137 = (char *)*v126;
                    }
                    char *v126 = v136;
                    *uint64_t v128 = v130;
                    v126[2] = &v135[8 * v134];
                    if (v137) {
                      operator delete(v137);
                    }
                  }
                  else
                  {
                    void *v127 = v123;
                    uint64_t v130 = v127 + 1;
                  }
                  *uint64_t v128 = v130;
                }
              }
            }
          }
          v123 += 56;
        }
        uint64_t v120 = v393 + 8;
      }
      while (v393 + 8 != v78);
      sub_1CD20C400((void **)&v410);
      unint64_t v140 = __pa;
      unint64_t v141 = v397[0];
      uint64_t v142 = v401;
      int v143 = __pa;
      do
      {
        int v144 = (char *)&v141[9 * *(void *)v143];
        uint64_t v145 = (uint64_t **)(v142 + 24 * *(void *)v143);
        *((void *)v144 + 4) = 0;
        *((void *)v144 + 5) = 0;
        uint64_t v146 = *v145;
        unsigned int v147 = v145[1];
        while (v146 != v147)
        {
          uint64_t v148 = *v146++;
          *(void *)(v148 + 48) = 0;
        }
        v143 += 8;
      }
      while (v143 != v78);
      uint64_t v149 = v400;
      v141[9 * (void)v400 + 4] = 0x3FF0000000000000;
      unint64_t v150 = 0x4000000000000;
      __int16 v151 = __pa;
      do
      {
        BOOL v153 = *(uint64_t **)(v142 + 24 * *(void *)v151);
        uint64_t v152 = *(uint64_t **)(v142 + 24 * *(void *)v151 + 8);
        if (v153 != v152)
        {
          uint64_t v154 = (double *)&v141[9 * *(void *)v151 + 4];
          double v155 = (double)(unint64_t)(v152 - v153);
          do
          {
            double v156 = *v154 / v155;
            uint64_t v157 = *v153;
            uint64_t v158 = (double *)&v141[9 * *(void *)(*v153 + 24)];
            v158[4] = v156 + v158[4];
            uint64_t v159 = *(void *)(v157 + 8);
            if (v159 != 0x4000000000000)
            {
              double v160 = (double)(v159 - *(void *)(v157 + 16)) / v156;
              if (v150 >= (unint64_t)v160) {
                unint64_t v150 = (unint64_t)v160;
              }
            }
            ++v153;
          }
          while (v153 != v152);
        }
        v151 += 8;
      }
      while (v151 != v78);
      uint64_t v161 = *((void *)&v400 + 1);
      if (!v150)
      {
LABEL_209:
        char v193 = 0;
        goto LABEL_217;
      }
      v141[9 * v149 + 5] = v150;
      uint64_t v162 = __pa;
      do
      {
        uint64_t v163 = *(void *)v162;
        if (*(void *)v162 == v161) {
          break;
        }
        uint64_t v165 = *(uint64_t **)(v142 + 24 * v163);
        uint64_t v164 = *(uint64_t **)(v142 + 24 * v163 + 8);
        if (v164 != v165)
        {
          unsigned int v166 = (char *)&v141[9 * v163];
          uint64_t v168 = *((void *)v166 + 5);
          uint64_t v167 = (unint64_t *)(v166 + 40);
          unint64_t v169 = (v168 + v164 - v165 - 1) / (unint64_t)(v164 - v165);
          do
          {
            uint64_t v171 = *v165++;
            uint64_t v170 = v171;
            uint64_t v173 = *(void *)(v171 + 16);
            uint64_t v172 = *(void *)(v171 + 24);
            unint64_t v174 = *v167;
            if (v169 < *v167) {
              unint64_t v174 = v169;
            }
            if (*(void *)(v170 + 8) - v173 < v174) {
              unint64_t v174 = *(void *)(v170 + 8) - v173;
            }
            v141[9 * v172 + 5] += v174;
            *v167 -= v174;
            *(void *)(v170 + 48) += v174;
          }
          while (v165 != v164);
        }
        v162 += 8;
      }
      while (v162 != v78);
      char v175 = 0;
LABEL_197:
      v141[9 * v161 + 5] = 0;
      uint64_t v177 = (v78 - v140) >> 3;
      uint64_t v178 = v177 - 1;
      if (v177 != 1)
      {
        uint64_t v179 = v401;
        do
        {
          uint64_t v180 = &v140[8 * v177];
          uint64_t v177 = v178;
          uint64_t v181 = *((void *)v180 - 2);
          __int16 v182 = (uint64_t **)(v179 + 24 * v181);
          int v183 = *v182;
          BOOL v184 = v182[1];
          if (v183 != v184)
          {
            unsigned int v185 = &v141[9 * v181 + 5];
            do
            {
              uint64_t v186 = *v183;
              uint64_t v187 = (char *)&v141[9 * *(void *)(*v183 + 24)];
              unint64_t v190 = *((void *)v187 + 5);
              int v188 = v187 + 40;
              unint64_t v189 = v190;
              if (v190)
              {
                unint64_t v191 = *(void *)(v186 + 48);
                if (v191 >= v189) {
                  unint64_t v192 = v189;
                }
                else {
                  unint64_t v192 = *(void *)(v186 + 48);
                }
                *int v188 = v189 - v192;
                *v185 += v192;
                *(void *)(v186 + 48) = v191 - v192;
              }
              ++v183;
            }
            while (v183 != v184);
          }
          uint64_t v178 = v177 - 1;
        }
        while (v177 != 1);
      }
      if (v175) {
        goto LABEL_209;
      }
      char v193 = 0;
      uint64_t v194 = v401;
      uint64_t v195 = *((void *)&v398 + 1);
      unsigned int v196 = v140;
      do
      {
        __int16 v197 = (uint64_t **)(v194 + 24 * *(void *)v196);
        int v198 = *v197;
        int v199 = v197[1];
        while (v198 != v199)
        {
          uint64_t v200 = *v198;
          uint64_t v201 = *(void *)(*v198 + 32);
          uint64_t v202 = *(void *)(v195 + 24 * *(void *)(*v198 + 24));
          uint64_t v203 = *(void *)(*v198 + 48);
          *(void *)(v200 + 16) = *(void *)(*v198 + 16) + v203;
          *(void *)(v202 + 56 * v201 + 16) -= v203;
          if (*(void *)(v200 + 8) == *(void *)(v200 + 16)) {
            v193 |= v203 != 0;
          }
          ++v198;
        }
        v196 += 8;
      }
      while (v196 != v78);
LABEL_217:
      unint64_t v53 = 0x4000000000000;
      while (v161 != v149)
      {
        int v204 = (char *)&v141[9 * v161];
        uint64_t v161 = *((void *)v204 + 1);
        uint64_t v205 = *(void *)(*((void *)&v398 + 1) + 24 * v161) + 56 * *((void *)v204 + 2);
        unint64_t v206 = *(void *)(v205 + 8) - *(void *)(v205 + 16);
        if (v206 < v53) {
          unint64_t v53 = v206;
        }
      }
      if (v140)
      {
        operator delete(v140);
        if ((v193 & 1) == 0) {
          goto LABEL_226;
        }
      }
      else if ((v193 & 1) == 0)
      {
        goto LABEL_226;
      }
LABEL_223:
      if (!v53) {
        goto LABEL_70;
      }
    }
    uint64_t v78 = 0;
LABEL_196:
    sub_1CD20C400((void **)&v410);
    uint64_t v149 = v400;
    unint64_t v141 = v397[0];
    BOOL v176 = (char *)v397[0] + 72 * v400;
    *((void *)v176 + 4) = 0x3FF0000000000000;
    uint64_t v161 = *((void *)&v400 + 1);
    *((void *)v176 + 5) = 0x4000000000000;
    char v175 = 1;
    unint64_t v140 = v78;
    goto LABEL_197;
  }
  unsigned int v216 = a1;
  uint64_t v217 = a1[1] - *a1;
  if (v217)
  {
    uint64_t v218 = 0;
    unint64_t v219 = v217 / 88;
    unint64_t v220 = 3 * v219;
    if (v219 <= 1) {
      unint64_t v219 = 1;
    }
    long long __dst = (void *)v219;
    do
    {
      uint64_t v221 = *v216;
      uint64_t v222 = *((void *)&v398 + 1) + 72 * (void)v218;
      uint64_t v223 = *(void *)(v222 + 24);
      uint64_t v224 = *(void *)(v222 + 32);
      if (v223 == v224)
      {
        uint64_t v237 = 0;
      }
      else
      {
        uint64_t v394 = *v216;
        unsigned int v225 = 0;
        uint64_t v226 = 0;
        uint64_t v227 = 0;
        do
        {
          uint64_t v228 = *(void *)(v223 + 16);
          if (v228 >= 1)
          {
            uint64_t v229 = *(void *)(v223 + 24);
            if (v226 >= v227)
            {
              uint64_t v230 = (v226 - v225) >> 4;
              unint64_t v231 = v230 + 1;
              if ((unint64_t)(v230 + 1) >> 60) {
                goto LABEL_507;
              }
              if ((v227 - v225) >> 3 > v231) {
                unint64_t v231 = (v227 - v225) >> 3;
              }
              if ((unint64_t)(v227 - v225) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v232 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v232 = v231;
              }
              if (v232)
              {
                if (v232 >> 60) {
LABEL_508:
                }
                  sub_1CB833614();
                uint64_t v233 = (char *)operator new(16 * v232);
              }
              else
              {
                uint64_t v233 = 0;
              }
              uint64_t v234 = &v233[16 * v230];
              *(void *)uint64_t v234 = v229;
              *((void *)v234 + 1) = v228;
              if (v226 == v225)
              {
                unsigned int v236 = &v233[16 * v230];
              }
              else
              {
                uint64_t v235 = &v233[16 * v230];
                do
                {
                  unsigned int v236 = v235 - 16;
                  *((_OWORD *)v235 - 1) = *((_OWORD *)v226 - 1);
                  v226 -= 16;
                  v235 -= 16;
                }
                while (v226 != v225);
              }
              uint64_t v227 = &v233[16 * v232];
              uint64_t v226 = v234 + 16;
              if (v225) {
                operator delete(v225);
              }
              unsigned int v225 = v236;
            }
            else
            {
              *(void *)uint64_t v226 = v229;
              *((void *)v226 + 1) = v228;
              v226 += 16;
            }
          }
          v223 += 56;
        }
        while (v223 != v224);
        if (v225 != v226)
        {
          uint64_t v237 = 0;
          uint64_t v221 = v394;
          uint64_t v238 = (unint64_t *)v225;
          do
          {
            if (*v238 >= v220
              || (0xAAAAAAAAAAAAAAAALL - 0x5555555555555555 * *v238 <= 0x5555555555555554
                ? (BOOL v239 = *(unsigned char *)(v394 + 88 * (void)v218 + 32) == 0)
                : (BOOL v239 = 0),
                  !v239))
            {
              v237 += v238[1];
            }
            v238 += 2;
          }
          while (v238 != (unint64_t *)v226);
          if (!v225) {
            goto LABEL_272;
          }
LABEL_271:
          operator delete(v225);
          goto LABEL_272;
        }
        uint64_t v237 = 0;
        uint64_t v221 = v394;
        if (v225) {
          goto LABEL_271;
        }
      }
LABEL_272:
      *(void *)(v221 + 88 * (void)v218 + 24) = v237;
      uint64_t v218 = (char *)v218 + 1;
      unsigned int v216 = a1;
    }
    while (v218 != __dst);
  }
  uint64_t v240 = (void *)v216[3];
  uint64_t v241 = (void *)v216[4];
  if (v240 != v241)
  {
    uint64_t v242 = *((void *)&v398 + 1);
    do
    {
      uint64_t v243 = v240[1];
      uint64_t v244 = v242 + 72 * *v240;
      uint64_t v245 = *(void *)(v244 + 24);
      uint64_t v246 = *(void *)(v244 + 32);
      if (*v240 == v243)
      {
        if (v245 == v246)
        {
          uint64_t v247 = 0;
        }
        else
        {
          uint64_t v247 = 0;
          do
          {
            if (*(void *)(v245 + 24) == 3 * *v240 + 2) {
              uint64_t v248 = *(void *)(v245 + 16);
            }
            else {
              uint64_t v248 = 0;
            }
            v247 += v248;
            v245 += 56;
          }
          while (v245 != v246);
        }
        uint64_t v249 = v247 & ~(v247 >> 63);
      }
      else if (v245 == v246)
      {
        uint64_t v249 = 0;
      }
      else
      {
        uint64_t v249 = 0;
        uint64_t v250 = 3 * v243;
        do
        {
          if (*(void *)(v245 + 24) == v250) {
            uint64_t v251 = *(void *)(v245 + 16);
          }
          else {
            uint64_t v251 = 0;
          }
          v249 += v251;
          v245 += 56;
        }
        while (v245 != v246);
      }
      v240[2] = v249;
      v240 += 4;
    }
    while (v240 != v241);
  }
  uint64_t v396 = v216;
  int v252 = -1171354717 * ((v216[1] - *v216) >> 3);
  uint64_t v253 = (v252 + 63) >> 6;
  *(void *)&long long v410 = &v411;
  HIDWORD(v410) = 6;
  if (v253 >= 7)
  {
    DWORD2(v410) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v252 + 63) >> 6) {
    bzero(&v411, 8 * v253);
  }
  DWORD2(v410) = (v252 + 63) >> 6;
  int v413 = v252;
  sub_1CD20C478((void **)&v396, v216[6], &v410);
  uint64_t v254 = *v216;
  uint64_t v255 = v216[1];
  if (v255 == *v216)
  {
    uint64_t v254 = v216[1];
  }
  else
  {
    unint64_t v256 = 0;
    do
    {
      if (*(void *)(v254 + 88 * v256 + 24)
        && ((*(void *)(v410 + 8 * (v256 >> 6)) >> v256) & 1) == 0)
      {
        sub_1CD20C5E0((unint64_t *)v408, &v396, v216[6], v256);
        sub_1CD20C5E0((unint64_t *)&v406, &v396, v256, -1);
        int v403 = 0;
        *(void *)unsigned int v404 = 0;
        uint64_t v405 = 0;
        uint64_t v257 = *(void **)&v408[0];
        sub_1CBFC93DC((uint64_t)&v403, 0, *(char **)&v408[0], *((char **)&v408[0] + 1), (uint64_t)(*((void *)&v408[0] + 1) - *(void *)&v408[0]) >> 3);
        uint64_t v258 = v406;
        sub_1CBFC93DC((uint64_t)&v403, *(uint64_t *)v404, v406, v407, (v407 - v406) >> 3);
        if (v258) {
          operator delete(v258);
        }
        if (v257) {
          operator delete(v257);
        }
        uint64_t v259 = *a1 + 88 * a1[6];
        ++*(void *)(v259 + 24);
        BOOL v261 = v403;
        uint64_t v260 = *(void *)v404;
        unsigned int v262 = (uint64_t *)v403;
        if (v403 != *(void **)v404)
        {
          do
          {
            uint64_t v263 = *v262++;
            uint64_t v264 = *(void *)(v263 + 8);
            ++*(void *)(v263 + 16);
            ++*(void *)(*a1 + 88 * v264 + 24);
            sub_1CD20C478((void **)&v396, v264, &v410);
          }
          while (v262 != (uint64_t *)v260);
        }
        if (v261) {
          operator delete(v261);
        }
        unsigned int v216 = a1;
        uint64_t v254 = *a1;
        uint64_t v255 = a1[1];
      }
      ++v256;
    }
    while (v256 < 0x2E8BA2E8BA2E8BA3 * ((v255 - v254) >> 3));
  }
  if ((long long *)v410 != &v411)
  {
    free((void *)v410);
    uint64_t v254 = *v216;
    uint64_t v255 = v216[1];
  }
  if (v255 == v254) {
    goto LABEL_504;
  }
  unint64_t v265 = 0;
  uint64_t k = &v411;
  long long v267 = 0uLL;
  do
  {
    uint64_t v268 = v254 + 88 * v265;
    if (*(unsigned char *)(v268 + 16) || !*(void *)(v254 + 88 * v265 + 24)) {
      goto LABEL_319;
    }
    uint64_t v269 = v254 + 88 * v265;
    uint64_t v272 = *(uint64_t **)(v269 + 40);
    uint64_t v271 = (uint64_t **)(v269 + 40);
    for (unsigned int j = v272; ; ++j)
    {
      if (j == v271[1]) {
        goto LABEL_319;
      }
      if (*(unsigned char *)(v254 + 88 * *(void *)(*j + 8) + 16)) {
        break;
      }
    }
    int v380 = v271 + 1;
    uint64_t v382 = v271;
    int v273 = -1171354717 * ((unint64_t)(v255 - v254) >> 3);
    uint64_t v274 = (v273 + 63) >> 6;
    *(void *)&long long v410 = k;
    HIDWORD(v410) = 6;
    if (v274 >= 7)
    {
      DWORD2(v410) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v273 + 63) >> 6)
    {
      bzero(k, 8 * v274);
      long long v267 = 0uLL;
    }
    uint64_t v383 = k;
    DWORD2(v410) = (v273 + 63) >> 6;
    int v413 = v273;
    v408[1] = v267;
    long long v409 = v267;
    v408[0] = v267;
    sub_1CD45F140(v408, (void *)v268);
    *(void *)(v410 + 8 * (*(void *)v268 >> 6)) |= 1 << *(void *)v268;
    uint64_t v275 = *((void *)&v409 + 1);
    if (!*((void *)&v409 + 1))
    {
      __pb = 0;
      __dsta = 0;
      uint64_t v395 = 0;
      uint64_t v277 = 0;
      uint64_t v276 = 0;
      goto LABEL_392;
    }
    __pb = 0;
    __dsta = 0;
    uint64_t v395 = 0;
    uint64_t v276 = 0;
    uint64_t v277 = 0;
    unint64_t v278 = 0;
    do
    {
      unint64_t v279 = v409;
      uint64_t v280 = *(void *)(*(void *)(*((void *)&v408[0] + 1) + ((v279 >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (v279 & 0x1FF));
      uint64_t v281 = *v396;
      *(void *)&long long v409 = v409 + 1;
      *((void *)&v409 + 1) = v275 - 1;
      if (v279 + 1 >= 0x400)
      {
        uint64_t v282 = v276;
        operator delete(**((void ***)&v408[0] + 1));
        uint64_t v276 = v282;
        *((void *)&v408[0] + 1) += 8;
        *(void *)&long long v409 = v409 - 512;
      }
      uint64_t v283 = v281 + 88 * v280;
      uint64_t v284 = *(void *)(v283 + 40);
      uint64_t v285 = *(void *)(v283 + 48);
      while (v284 != v285)
      {
        int v286 = *(void **)v284;
        if (!*(unsigned char *)(*(void *)v284 + 24) || v286[2])
        {
          uint64_t v287 = v396;
          uint64_t v288 = *v396;
          uint64_t v289 = (char *)v286[1];
          uint64_t v290 = *v396 + 88 * *v286;
          int v291 = *(unsigned __int8 *)(*v396 + 88 * (void)v289 + 16);
          if ((*(unsigned char *)(*v396 + 88 * (void)v289 + 16) || v290 != v268)
            && (*(unsigned char *)(*v396 + 88 * (void)v289 + 16) || *(void *)(v288 + 88 * (void)v289 + 24) != 0))
          {
            uint64_t v406 = v289;
            uint64_t v294 = v289 >> 6;
            uint64_t v295 = *(void *)(v410 + 8 * v294);
            if ((v295 & (1 << (char)v289)) != 0) {
              goto LABEL_350;
            }
            *(void *)(v410 + 8 * v294) = v295 | (1 << (char)v289);
            if (v291)
            {
              uint64_t v391 = v276;
              sub_1CD45F140(v408, &v406);
              uint64_t v305 = *v287 + 88 * (void)v289;
              uint64_t v306 = v395;
              if (v395 >= __pb)
              {
                unsigned int v307 = __dsta;
                uint64_t v308 = v395 - __dsta;
                unint64_t v309 = v308 + 1;
                if ((unint64_t)(v308 + 1) >> 61) {
                  goto LABEL_507;
                }
                if (((char *)__pb - (char *)__dsta) >> 2 > v309) {
                  unint64_t v309 = ((char *)__pb - (char *)__dsta) >> 2;
                }
                unint64_t v310 = 0x1FFFFFFFFFFFFFFFLL;
                if ((unint64_t)((char *)__pb - (char *)__dsta) < 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v310 = v309;
                }
                __pc = (void *)v310;
                if (v310)
                {
                  if (v310 >> 61) {
                    goto LABEL_508;
                  }
                  unsigned int v311 = (char *)operator new(8 * v310);
                  unsigned int v307 = __dsta;
                  uint64_t v306 = v395;
                }
                else
                {
                  unsigned int v311 = 0;
                }
                long long v312 = (uint64_t *)&v311[8 * v308];
                *long long v312 = v305;
                uint64_t v313 = v312 + 1;
                if (v306 == v307)
                {
                  int v314 = __pc;
                }
                else
                {
                  int v314 = __pc;
                  do
                  {
                    uint64_t v315 = *--v306;
                    *--long long v312 = v315;
                  }
                  while (v306 != v307);
                }
                __pb = (uint64_t *)&v311[8 * (void)v314];
                if (v307) {
                  operator delete(v307);
                }
                __dsta = v312;
                uint64_t v395 = v313;
              }
              else
              {
                *v395++ = v305;
              }
              __int16 v297 = v277;
              uint64_t v276 = v391;
            }
            else
            {
              uint64_t v296 = v288 + 88 * (void)v289;
              if (v277 >= v278)
              {
                uint64_t v298 = v277 - v276;
                unint64_t v299 = v298 + 1;
                if ((unint64_t)(v298 + 1) >> 61) {
                  goto LABEL_507;
                }
                if (((char *)v278 - (char *)v276) >> 2 > v299) {
                  unint64_t v299 = ((char *)v278 - (char *)v276) >> 2;
                }
                if ((unint64_t)((char *)v278 - (char *)v276) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v300 = v299;
                }
                if (v300)
                {
                  if (v300 >> 61) {
                    goto LABEL_508;
                  }
                  int v301 = v276;
                  unsigned int v302 = (char *)operator new(8 * v300);
                  uint64_t v276 = v301;
                }
                else
                {
                  unsigned int v302 = 0;
                }
                uint64_t v303 = (uint64_t *)&v302[8 * v298];
                uint64_t *v303 = v296;
                __int16 v297 = v303 + 1;
                while (v277 != v276)
                {
                  uint64_t v304 = *--v277;
                  *--uint64_t v303 = v304;
                }
                unint64_t v278 = (uint64_t *)&v302[8 * v300];
                if (v276) {
                  operator delete(v276);
                }
                uint64_t v276 = v303;
              }
              else
              {
                *v277++ = v296;
LABEL_350:
                __int16 v297 = v277;
              }
            }
            uint64_t v277 = v297;
          }
        }
        v284 += 8;
      }
      uint64_t v275 = *((void *)&v409 + 1);
    }
    while (*((void *)&v409 + 1));
LABEL_392:
    uint64_t v392 = v276;
    sub_1CB904DFC((void **)v408);
    uint64_t k = v383;
    if ((long long *)v410 != v383) {
      free((void *)v410);
    }
    uint64_t v317 = __dsta;
    uint64_t v316 = v392;
    uint64_t v318 = v395;
    if (__dsta != v395 && (unint64_t)((char *)v277 - (char *)v392) <= 8)
    {
      if (v392 == v277) {
        uint64_t v319 = 0;
      }
      else {
        uint64_t v319 = *v392;
      }
      unsigned int v320 = __dsta;
      do
      {
        uint64_t v321 = *(uint64_t **)(*v320 + 40);
        v322 = *(uint64_t **)(*v320 + 48);
        if (v321 == v322)
        {
          if (v319) {
            goto LABEL_425;
          }
        }
        else
        {
          uint64_t v323 = 0;
          unsigned int v324 = *(uint64_t **)(*v320 + 40);
          do
          {
            uint64_t v325 = *v324++;
            v323 += sub_1CD20CA90(&v396, v268, v319, v325);
          }
          while (v324 != v322);
          uint64_t v317 = __dsta;
          uint64_t v316 = v392;
          uint64_t v318 = v395;
          if (v323 == v322 - v321) {
            goto LABEL_425;
          }
        }
        ++v320;
      }
      while (v320 != v318);
      uint64_t v326 = v396[1];
      if (v326 != *v396)
      {
        unint64_t v327 = (v326 - *v396) / 88;
        if (!(v327 >> 61))
        {
          size_t v328 = 8 * v327;
          uint64_t v329 = operator new(8 * v327);
          bzero(v329, v328);
          uint64_t v317 = __dsta;
          goto LABEL_411;
        }
LABEL_507:
        abort();
      }
      uint64_t v329 = 0;
LABEL_411:
      int v330 = *v382;
      int v331 = *v380;
      uint64_t v332 = v317;
      if (*v382 != *v380)
      {
        do
        {
          uint64_t v333 = *v330;
          if (!sub_1CD20CA90(&v396, v268, v319, *v330)) {
            ++*((void *)v329 + *(void *)(v333 + 8));
          }
          ++v330;
        }
        while (v330 != v331);
        uint64_t v332 = __dsta;
      }
      do
      {
        unsigned int v334 = *(uint64_t **)(*v332 + 40);
        uint64_t v335 = *(uint64_t **)(*v332 + 48);
        while (v334 != v335)
        {
          uint64_t v336 = *v334;
          if (!sub_1CD20CA90(&v396, v268, v319, *v334)) {
            ++*((void *)v329 + *(void *)(v336 + 8));
          }
          ++v334;
        }
        ++v332;
      }
      while (v332 != v395);
      if (*((void *)v329 + *(void *)v268))
      {
        operator delete(v329);
        uint64_t v317 = __dsta;
        goto LABEL_424;
      }
      long long v411 = 0u;
      long long v412 = 0u;
      long long v410 = 0u;
      sub_1CD45F140(&v410, (void *)v268);
      uint64_t v338 = *((void *)&v412 + 1);
      if (*((void *)&v412 + 1))
      {
        uint64_t v339 = 0;
        unsigned int v340 = 0;
        uint64_t v378 = 0;
        uint64_t v341 = (char *)__dsta;
        uint64_t v342 = v395;
        do
        {
          unint64_t v343 = v412;
          uint64_t v344 = *(void *)(*(void *)(*((void *)&v410 + 1) + ((v343 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v343 & 0x1FF));
          uint64_t v345 = *v396;
          *(void *)&long long v412 = v412 + 1;
          *((void *)&v412 + 1) = v338 - 1;
          if (v343 + 1 >= 0x400)
          {
            operator delete(**((void ***)&v410 + 1));
            uint64_t v342 = v395;
            uint64_t v341 = (char *)__dsta;
            *((void *)&v410 + 1) += 8;
            *(void *)&long long v412 = v412 - 512;
          }
          uint64_t v346 = v345 + 88 * v344;
          if (v319 && v346 == v319) {
            break;
          }
          if (*(unsigned char *)(v345 + 88 * v344 + 16)) {
            BOOL v347 = v346 == v268;
          }
          else {
            BOOL v347 = 1;
          }
          if (!v347)
          {
            if (v340 >= v378)
            {
              uint64_t v377 = v344;
              uint64_t v348 = (v340 - v339) >> 3;
              unint64_t v349 = v348 + 1;
              if ((unint64_t)(v348 + 1) >> 61) {
                goto LABEL_507;
              }
              int v350 = v339;
              if ((v378 - v339) >> 2 > v349) {
                unint64_t v349 = (v378 - v339) >> 2;
              }
              unint64_t v351 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v378 - v339) < 0x7FFFFFFFFFFFFFF8) {
                unint64_t v351 = v349;
              }
              unint64_t v379 = v351;
              if (v351)
              {
                if (v351 >> 61) {
                  goto LABEL_508;
                }
                uint64_t v352 = (char *)operator new(8 * v351);
                int v350 = v339;
              }
              else
              {
                uint64_t v352 = 0;
              }
              uint64_t v339 = &v352[8 * v348];
              *(void *)uint64_t v339 = v346;
              unint64_t v353 = v339 + 8;
              if (v340 == v350)
              {
                unint64_t v354 = v379;
              }
              else
              {
                unint64_t v354 = v379;
                do
                {
                  uint64_t v355 = *((void *)v340 - 1);
                  v340 -= 8;
                  *((void *)v339 - 1) = v355;
                  v339 -= 8;
                }
                while (v340 != v350);
              }
              uint64_t v378 = &v352[8 * v354];
              if (v350) {
                operator delete(v350);
              }
              unsigned int v340 = v353;
              uint64_t v344 = v377;
            }
            else
            {
              *(void *)unsigned int v340 = v346;
              v340 += 8;
            }
          }
          uint64_t v356 = v345 + 88 * v344;
          uint64_t v357 = *(uint64_t **)(v356 + 40);
          uint64_t v358 = *(uint64_t **)(v356 + 48);
          while (v357 != v358)
          {
            uint64_t v359 = *v357;
            if (!sub_1CD20CA90(&v396, v268, v319, *v357))
            {
              *(void *)&v408[0] = *(void *)(v359 + 8);
              uint64_t v360 = *((void *)v329 + *(void *)&v408[0]) - 1;
              *((void *)v329 + *(void *)&v408[0]) = v360;
              if (!v360) {
                sub_1CD45F140(&v410, v408);
              }
            }
            ++v357;
          }
          uint64_t v338 = *((void *)&v412 + 1);
          uint64_t v341 = (char *)__dsta;
          uint64_t v342 = v395;
        }
        while (*((void *)&v412 + 1));
      }
      else
      {
        uint64_t v339 = 0;
        unsigned int v340 = 0;
        uint64_t v341 = (char *)__dsta;
        uint64_t v342 = v395;
      }
      uint64_t v361 = (char *)v342 - v341;
      unint64_t v362 = ((char *)v342 - v341) >> 3;
      if (v362 == (v340 - v339) >> 3)
      {
        uint64_t v363 = (uint64_t)__pb;
        if (v362 <= ((char *)__pb - v341) >> 3)
        {
          if (v340 != v339)
          {
            memmove(v341, v339, v340 - v339);
            uint64_t v341 = (char *)__dsta;
          }
        }
        else
        {
          if (v341)
          {
            operator delete(v341);
            uint64_t v363 = 0;
          }
          if (v361 < 0) {
            goto LABEL_507;
          }
          unint64_t v364 = v363 >> 2;
          if (v363 >> 2 <= v362) {
            unint64_t v364 = v362;
          }
          if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v364 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v364 >> 61) {
            goto LABEL_507;
          }
          uint64_t v341 = (char *)operator new(8 * v364);
          if (v340 != v339)
          {
            int v365 = v341;
            memcpy(v341, v339, v340 - v339);
            uint64_t v341 = v365;
          }
        }
        __dsta = (uint64_t *)v341;
        uint64_t v395 = (uint64_t *)&v341[8 * v362];
      }
      sub_1CB904DFC((void **)&v410);
      if (v339) {
        operator delete(v339);
      }
      if (v329) {
        operator delete(v329);
      }
      uint64_t v317 = __dsta;
      uint64_t v316 = v392;
      if (v362 == (v340 - v339) >> 3)
      {
        uint64_t v366 = *v382;
        uint64_t v367 = *v380;
        if (*v382 == *v380)
        {
          unint64_t v368 = 0;
        }
        else
        {
          unint64_t v368 = 0;
          int v369 = *v382;
          do
          {
            uint64_t v370 = *v369;
            if (!sub_1CD20CA90(&v396, v268, v319, *v369)) {
              v368 += *(void *)(v370 + 16);
            }
            ++v369;
          }
          while (v369 != v367);
        }
        sub_1CD20CB0C((BOOL)&v396, v268, v319, v366, v367, v368);
        uint64_t v317 = __dsta;
        unsigned int v371 = __dsta;
        for (uint64_t k = v383; v371 != v395; v317 = __dsta)
        {
          uint64_t v372 = *v371;
          uint64_t v373 = *(uint64_t **)(*v371 + 64);
          uint64_t v374 = *(uint64_t **)(*v371 + 72);
          if (v373 == v374)
          {
            unint64_t v375 = 0;
          }
          else
          {
            unint64_t v375 = 0;
            do
            {
              uint64_t v376 = *v373++;
              v375 += *(void *)(v376 + 16);
            }
            while (v373 != v374);
          }
          *(void *)(v372 + 24) = v375;
          sub_1CD20CB0C((BOOL)&v396, v268, v319, *(uint64_t **)(v372 + 40), *(uint64_t **)(v372 + 48), v375);
          ++v371;
        }
LABEL_424:
        uint64_t v316 = v392;
      }
      else
      {
        uint64_t k = v383;
      }
    }
LABEL_425:
    if (v316)
    {
      uint64_t v337 = v317;
      operator delete(v316);
      uint64_t v317 = v337;
    }
    if (v317) {
      operator delete(v317);
    }
    unsigned int v216 = v396;
    uint64_t v254 = *v396;
    long long v267 = 0uLL;
LABEL_319:
    ++v265;
    uint64_t v255 = v216[1];
  }
  while (v265 < 0x2E8BA2E8BA2E8BA3 * ((v255 - v254) >> 3));
LABEL_504:
  sub_1CD20C390((void **)&v401);
  sub_1CD20C390((void **)&v398 + 1);
  if (v397[0])
  {
    v397[1] = v397[0];
    operator delete(v397[0]);
  }
}

void sub_1CD20C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v8 + 24 * a3 + 8) - *(void *)(v8 + 24 * a3)) >> 3);
  unsigned int v10 = (char **)(v8 + 24 * a2);
  uint64_t v12 = v10 + 1;
  uint64_t v11 = v10[1];
  uint64_t v13 = *v10;
  uint64_t v14 = (v11 - *v10) / 56;
  unint64_t v15 = (unint64_t)v10[2];
  if ((unint64_t)v11 >= v15)
  {
    unint64_t v17 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x492492492492492) {
      goto LABEL_36;
    }
    unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (void)v13) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x249249249249249) {
      unint64_t v19 = 0x492492492492492;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      uint64_t v48 = a5;
      uint64_t v49 = (v11 - *v10) / 56;
      uint64_t v50 = a2;
      if (v19 > 0x492492492492492) {
        goto LABEL_37;
      }
      uint64_t v20 = (char *)operator new(56 * v19);
      uint64_t v14 = v49;
      a2 = v50;
      a5 = v48;
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[56 * v14];
    *(void *)uint64_t v21 = a5;
    *((void *)v21 + 1) = a4;
    uint64_t v22 = &v20[56 * v19];
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = a3;
    *((void *)v21 + 4) = v9;
    uint64_t v16 = v21 + 56;
    if (v11 != v13)
    {
      do
      {
        long long v23 = *(_OWORD *)(v11 - 56);
        long long v24 = *(_OWORD *)(v11 - 40);
        long long v25 = *(_OWORD *)(v11 - 24);
        *((void *)v21 - 1) = *((void *)v11 - 1);
        *(_OWORD *)(v21 - 24) = v25;
        *(_OWORD *)(v21 - 40) = v24;
        *(_OWORD *)(v21 - 56) = v23;
        v21 -= 56;
        v11 -= 56;
      }
      while (v11 != v13);
      uint64_t v11 = *v10;
    }
    *unsigned int v10 = v21;
    *uint64_t v12 = v16;
    v10[2] = v22;
    if (v11)
    {
      uint64_t v26 = v11;
      uint64_t v27 = a2;
      uint64_t v28 = v14;
      uint64_t v29 = a5;
      operator delete(v26);
      a5 = v29;
      uint64_t v14 = v28;
      a2 = v27;
    }
  }
  else
  {
    *(void *)uint64_t v11 = a5;
    *((void *)v11 + 1) = a4;
    *((void *)v11 + 2) = 0;
    *((void *)v11 + 3) = a3;
    uint64_t v16 = v11 + 56;
    *((void *)v11 + 4) = v9;
  }
  uint64_t v30 = -a5;
  *uint64_t v12 = v16;
  uint64_t v31 = (char **)(*(void *)(a1 + 24) + 24 * a3);
  uint64_t v33 = v31 + 1;
  uint64_t v32 = v31[1];
  unint64_t v34 = (unint64_t)v31[2];
  if ((unint64_t)v32 < v34)
  {
    *(void *)uint64_t v32 = v30;
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    *((void *)v32 + 3) = a2;
    unsigned int v35 = v32 + 56;
    *((void *)v32 + 4) = v14;
    goto LABEL_35;
  }
  uint64_t v36 = *v31;
  uint64_t v37 = 0x6DB6DB6DB6DB6DB7 * ((v32 - *v31) >> 3);
  unint64_t v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) > 0x492492492492492) {
LABEL_36:
  }
    abort();
  unint64_t v39 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v34 - (void)v36) >> 3);
  if (2 * v39 > v38) {
    unint64_t v38 = 2 * v39;
  }
  if (v39 >= 0x249249249249249) {
    unint64_t v40 = 0x492492492492492;
  }
  else {
    unint64_t v40 = v38;
  }
  if (!v40)
  {
    BOOL v43 = 0;
    goto LABEL_30;
  }
  if (v40 > 0x492492492492492) {
LABEL_37:
  }
    sub_1CB833614();
  uint64_t v41 = v14;
  uint64_t v42 = a2;
  BOOL v43 = (char *)operator new(56 * v40);
  a2 = v42;
  uint64_t v14 = v41;
LABEL_30:
  int v44 = &v43[56 * v37];
  *(void *)int v44 = v30;
  *((void *)v44 + 1) = 0;
  *((void *)v44 + 2) = 0;
  *((void *)v44 + 3) = a2;
  *((void *)v44 + 4) = v14;
  unsigned int v35 = v44 + 56;
  if (v32 != v36)
  {
    do
    {
      long long v45 = *(_OWORD *)(v32 - 56);
      long long v46 = *(_OWORD *)(v32 - 40);
      long long v47 = *(_OWORD *)(v32 - 24);
      *((void *)v44 - 1) = *((void *)v32 - 1);
      *(_OWORD *)(v44 - 24) = v47;
      *(_OWORD *)(v44 - 40) = v46;
      *(_OWORD *)(v44 - 56) = v45;
      v44 -= 56;
      v32 -= 56;
    }
    while (v32 != v36);
    uint64_t v32 = *v31;
  }
  *uint64_t v31 = v44;
  *uint64_t v33 = v35;
  uint64_t v31[2] = &v43[56 * v40];
  if (v32) {
    operator delete(v32);
  }
LABEL_35:
  *uint64_t v33 = v35;
}

void **sub_1CD20C390(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      unsigned int v5 = (char *)a1[1];
      do
      {
        unint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        unint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_1CD20C400(void **a1)
{
  sub_1CD890060(a1);
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    unsigned int v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void **sub_1CD20C478(void **result, uint64_t a2, void *a3)
{
  uint64_t v19 = a2;
  uint64_t v3 = a2 >> 6;
  uint64_t v4 = 1 << a2;
  if ((*(void *)(*a3 + 8 * v3) & (1 << a2)) == 0)
  {
    uint64_t v6 = result;
    long long v18 = 0u;
    memset(v17, 0, sizeof(v17));
    sub_1CD45F140(v17, &v19);
    *(void *)(*a3 + 8 * v3) |= v4;
    for (uint64_t i = *((void *)&v18 + 1); *((void *)&v18 + 1); uint64_t i = *((void *)&v18 + 1))
    {
      uint64_t v8 = *(void *)(*(void *)(*((void *)&v17[0] + 1) + (((unint64_t)v18 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v18 & 0x1FF));
      *(void *)&long long v18 = v18 + 1;
      *((void *)&v18 + 1) = i - 1;
      if ((unint64_t)v18 >= 0x400)
      {
        operator delete(**((void ***)&v17[0] + 1));
        *((void *)&v17[0] + 1) += 8;
        *(void *)&long long v18 = v18 - 512;
      }
      uint64_t v9 = *(void *)*v6 + 88 * v8;
      uint64_t v10 = *(void *)(v9 + 40);
      uint64_t v11 = *(void *)(v9 + 48);
      while (v10 != v11)
      {
        uint64_t v12 = *(void *)(*(void *)v10 + 8);
        uint64_t v13 = *(void *)(*(void *)v10 + 16);
        uint64_t v16 = v12;
        if (v13)
        {
          uint64_t v14 = v12 >> 6;
          uint64_t v15 = 1 << v12;
          if ((*(void *)(*a3 + 8 * v14) & (1 << v12)) == 0)
          {
            sub_1CD45F140(v17, &v16);
            *(void *)(*a3 + 8 * v14) |= v15;
          }
        }
        v10 += 8;
      }
    }
    return sub_1CB904DFC((void **)v17);
  }
  return result;
}

void sub_1CD20C5E0(unint64_t *a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  if (a3 == a4 || (unint64_t v4 = a3, v6 = **a2, a4 == -1) && *(void *)(v6 + 88 * a3 + 40) == *(void *)(v6 + 88 * a3 + 48))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  uint64_t v7 = (*a2)[1] - v6;
  if (v7)
  {
    unint64_t v10 = v7 / 88;
    if (v10 >> 61) {
LABEL_80:
    }
      abort();
    size_t v11 = 8 * v10;
    uint64_t v8 = operator new(8 * v10);
    memset_pattern16(v8, &unk_1CFB32E40, v11);
    uint64_t v9 = operator new(v11);
    bzero(v9, v11);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  *((void *)v8 + v4) = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  *((void *)&v62 + 1) = v4;
  uint64_t v63 = &v64;
  *(void *)&long long v62 = 0;
  sub_1CD8900D8((uint64_t)&v63, 0, v4, &v62);
  uint64_t v12 = v65;
  uint64_t v13 = a4;
  if (v65)
  {
    unint64_t v59 = v4;
    uint64_t v60 = v9;
    do
    {
      uint64_t v14 = (uint64_t *)v63;
      uint64_t v15 = v63[1];
      uint64_t v16 = (uint64_t *)v63;
      if (v15)
      {
        do
        {
          unint64_t v17 = v15;
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v17 = (uint64_t *)v16[2];
          BOOL v18 = *v17 == (void)v16;
          uint64_t v16 = v17;
        }
        while (!v18);
      }
      uint64_t v19 = (uint64_t)v63[5];
      uint64_t v63 = (uint64_t **)v17;
      uint64_t v65 = v12 - 1;
      sub_1CB91F7C8(v64, v14);
      operator delete(v14);
      uint64_t v13 = a4;
      if (v19 == a4) {
        break;
      }
      uint64_t v20 = *a2;
      uint64_t v21 = **a2;
      uint64_t v22 = v21 + 88 * v19;
      long long v23 = *(uint64_t **)(v22 + 40);
      long long v24 = *(uint64_t **)(v22 + 48);
      if (a4 == -1 && v23 == v24)
      {
        unint64_t v34 = a1;
        goto LABEL_36;
      }
      while (v23 != v24)
      {
        uint64_t v25 = *v23;
        uint64_t v26 = **a2;
        unint64_t v27 = 0x2E8BA2E8BA2E8BA3 * (((*a2)[1] - v26) >> 3);
        unint64_t v28 = *(void *)(v26 + 88 * (*a2)[6] + 24);
        if (0x40000000 / v27 < v28) {
          unint64_t v28 = 0x40000000 / v27;
        }
        if (v28 <= 0x2710) {
          unint64_t v28 = 10000;
        }
        uint64_t v29 = 0x40000000;
        if (!*(unsigned char *)(v25 + 24))
        {
          unint64_t v30 = *(void *)(v25 + 16);
          if (v30) {
            uint64_t v29 = v28 / v30 + v28;
          }
          else {
            uint64_t v29 = v28 * v27;
          }
        }
        unint64_t v31 = *(void *)(v25 + 8);
        int64_t v32 = *((void *)v8 + v31);
        if (v32 > *((void *)v8 + v19) + v29)
        {
          sub_1CD89017C((uint64_t **)&v63, v32, *(void *)(v25 + 8));
          unint64_t v33 = *((void *)v8 + v19) + v29;
          *((void *)v8 + v31) = v33;
          v60[v31] = v25;
          *(void *)&long long v62 = v33;
          *((void *)&v62 + 1) = v31;
          sub_1CD8900D8((uint64_t)&v63, v33, v31, &v62);
          uint64_t v13 = a4;
        }
        ++v23;
      }
      uint64_t v12 = v65;
      unint64_t v4 = v59;
      uint64_t v9 = v60;
    }
    while (v65);
  }
  unint64_t v34 = a1;
  if (v13 == -1)
  {
    uint64_t v20 = *a2;
    uint64_t v21 = **a2;
LABEL_36:
    uint64_t v35 = v20[1];
    uint64_t v36 = v35 - v21;
    if (v35 == v21)
    {
      uint64_t v13 = -1;
    }
    else
    {
      uint64_t v37 = 0;
      unint64_t v38 = v36 / 88;
      if (v38 <= 1) {
        unint64_t v38 = 1;
      }
      unint64_t v39 = (void *)(v21 + 48);
      uint64_t v13 = -1;
      do
      {
        if (*(v39 - 1) == *v39 && *((void *)v9 + v37) && (v13 == -1 || *((void *)v8 + v13) > *((void *)v8 + v37))) {
          uint64_t v13 = v37;
        }
        ++v37;
        v39 += 11;
      }
      while (v38 != v37);
    }
  }
  unint64_t *v34 = 0;
  v34[1] = 0;
  v34[2] = 0;
  if (v13 == v4)
  {
LABEL_76:
    sub_1CD40B1BC(v64);
    if (!v9) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  unint64_t v40 = 0;
  do
  {
    unint64_t v41 = v34[2];
    if ((unint64_t)v40 >= v41)
    {
      uint64_t v42 = (void *)*v34;
      uint64_t v43 = (uint64_t)((uint64_t)v40 - *v34) >> 3;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61) {
        goto LABEL_80;
      }
      uint64_t v45 = v41 - (void)v42;
      if (v45 >> 2 > v44) {
        unint64_t v44 = v45 >> 2;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        if (v46 >> 61) {
          sub_1CB833614();
        }
        uint64_t v47 = v13;
        uint64_t v48 = (char *)operator new(8 * v46);
        uint64_t v13 = v47;
      }
      else
      {
        uint64_t v48 = 0;
      }
      uint64_t v49 = &v48[8 * v43];
      *(void *)uint64_t v49 = *((void *)v9 + v13);
      uint64_t v50 = v49 + 8;
      if (v40 != v42)
      {
        do
        {
          uint64_t v51 = *--v40;
          *((void *)v49 - 1) = v51;
          v49 -= 8;
        }
        while (v40 != v42);
        unint64_t v40 = (void *)*v34;
      }
      unint64_t *v34 = (unint64_t)v49;
      v34[1] = (unint64_t)v50;
      v34[2] = (unint64_t)&v48[8 * v46];
      if (v40)
      {
        uint64_t v52 = v13;
        operator delete(v40);
        uint64_t v13 = v52;
      }
      unint64_t v40 = v50;
    }
    else
    {
      *v40++ = *((void *)v9 + v13);
    }
    v34[1] = (unint64_t)v40;
    uint64_t v13 = **((void **)v9 + v13);
  }
  while (v13 != v4);
  unint64_t v53 = *v34;
  unsigned int v54 = v40 - 1;
  BOOL v55 = (void *)*v34 == v40 || v53 >= (unint64_t)v54;
  if (!v55)
  {
    unint64_t v56 = v53 + 8;
    do
    {
      uint64_t v57 = *(void *)(v56 - 8);
      *(void *)(v56 - 8) = *v54;
      *v54-- = v57;
      BOOL v55 = v56 >= (unint64_t)v54;
      v56 += 8;
    }
    while (!v55);
    goto LABEL_76;
  }
  sub_1CD40B1BC(v64);
LABEL_77:
  operator delete(v9);
LABEL_78:
  if (v8) {
    operator delete(v8);
  }
}

BOOL sub_1CD20CA90(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 24) && !*(void *)(a4 + 16)) {
    return 1;
  }
  uint64_t v4 = **a1;
  uint64_t v5 = *(void *)(a4 + 8);
  if (a3 && v4 + 88 * v5 == a3) {
    return 0;
  }
  int v7 = *(unsigned __int8 *)(v4 + 88 * v5 + 16);
  if (!*(unsigned char *)(v4 + 88 * v5 + 16) && v4 + 88 * *(void *)a4 == a2) {
    return 1;
  }
  uint64_t v9 = *(void *)(v4 + 88 * v5 + 24);
  return !v7 && v9 == 0;
}

BOOL sub_1CD20CB0C(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unint64_t a6)
{
  if (a4 != a5)
  {
    uint64_t v8 = a4;
    size_t v11 = (uint64_t **)result;
    unint64_t v12 = 0;
    uint64_t v13 = a4;
    do
    {
      uint64_t v14 = *v13++;
      uint64_t result = sub_1CD20CA90(v11, a2, a3, v14);
      v12 += result ^ 1;
    }
    while (v13 != a5);
    if (a3 || v12)
    {
      unint64_t v15 = (a6 + v12 - 1) / v12;
      do
      {
        uint64_t v16 = *v8;
        uint64_t result = sub_1CD20CA90(v11, a2, a3, *v8);
        if (!result)
        {
          if (a6 >= v15) {
            unint64_t v17 = v15;
          }
          else {
            unint64_t v17 = a6;
          }
          *(void *)(v16 + 16) = v17;
          a6 -= v17;
        }
        ++v8;
      }
      while (v8 != a5);
    }
  }
  return result;
}

uint64_t sub_1CD20CBDC()
{
  LOBYTE(v2) = 1;
  uint64_t v5 = &v2;
  int v3 = 1;
  int v4 = 1;
  v1.n128_u64[0] = (unint64_t)"Try to evenly distribute counts when there are multiple equally likely options.";
  v1.n128_u64[1] = 79;
  sub_1CD890264((char **)&v5, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCFD788, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 10;
  uint64_t v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Maximum number of dfs iterations for even count distribution.";
  v1.n128_u64[1] = 61;
  sub_1CD8903FC(&v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCFD848, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 10;
  uint64_t v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of increasing a block's count by one.";
  v1.n128_u64[1] = 44;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCFD908, "sample-profile-profi-cost-inc", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFD908, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 20;
  uint64_t v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of decreasing a block's count by one.";
  v1.n128_u64[1] = 44;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCFD9C8, "sample-profile-profi-cost-dec", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFD9C8, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 11;
  uint64_t v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of increasing a count of zero-weight block by one.";
  v1.n128_u64[1] = 57;
  sub_1CD890590(&v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCFDA88, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 40;
  uint64_t v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of increasing the entry block's count by one.";
  v1.n128_u64[1] = 52;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCFDB48, "sample-profile-profi-cost-inc-entry", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFDB48, &dword_1CB82C000);
  int v3 = 1;
  int v4 = 10;
  uint64_t v5 = &v4;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of decreasing the entry block's count by one.";
  v1.n128_u64[1] = 52;
  sub_1CD4943F8((llvm::cl::Option *)&unk_1EBCFDC08, "sample-profile-profi-cost-dec-entry", &v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFDC08, &dword_1CB82C000);
}

uint64_t sub_1CD20CE58()
{
  LODWORD(v2) = 100;
  *(void *)&long long v1 = &v2;
  v3.n128_u64[0] = (unint64_t)"Maximum number of iterations to go through when propagating sample block/edge weigh"
                                     "ts through the CFG.";
  v3.n128_u64[1] = 102;
  sub_1CD890CE0((int **)&v1, (long long *)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, llvm::SampleProfileMaxPropagateIterations, &dword_1CB82C000);
  int v4 = 0;
  int v2 = &v4;
  v3.n128_u64[0] = (unint64_t)"N";
  v3.n128_u64[1] = 1;
  *(void *)&long long v1 = "Emit a warning if less than N% of records in the input profile are matched to the IR.";
  *((void *)&v1 + 1) = 85;
  sub_1CD890DEC((uint64_t)&llvm::SampleProfileRecordCoverage, "sample-profile-check-record-coverage", &v2, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &llvm::SampleProfileRecordCoverage, &dword_1CB82C000);
  int v4 = 0;
  int v2 = &v4;
  v3.n128_u64[0] = (unint64_t)"N";
  v3.n128_u64[1] = 1;
  *(void *)&long long v1 = "Emit a warning if less than N% of samples in the input profile are matched to the IR.";
  *((void *)&v1 + 1) = 85;
  sub_1CD890DEC((uint64_t)&llvm::SampleProfileSampleCoverage, "sample-profile-check-sample-coverage", &v2, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &llvm::SampleProfileSampleCoverage, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Use this option to turn off/on warnings about function with samples but without deb"
                                     "ug information to use those samples. ";
  v3.n128_u64[1] = 120;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::NoWarnSampleUnused, "no-warn-sample-unused", (unsigned char **)&v1, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::NoWarnSampleUnused, &dword_1CB82C000);
  char v5 = 0;
  *(void *)&long long v1 = &v5;
  LODWORD(v2) = 1;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Use profi to infer block and edge counts.";
  v3.n128_u64[1] = 41;
  sub_1CD462280((llvm::cl::Option *)&llvm::SampleProfileUseProfi, "sample-profile-use-profi", (unsigned char **)&v1, &v2, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::SampleProfileUseProfi, &dword_1CB82C000);
  char v5 = 1;
  *(void *)&long long v1 = &v5;
  LODWORD(v2) = 1;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Use profi to infer function entry count.";
  v3.n128_u64[1] = 40;
  sub_1CD462280((llvm::cl::Option *)&llvm::SampleProfileInferEntryCount, "sample-profile-infer-entry-count", (unsigned char **)&v1, &v2, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::SampleProfileInferEntryCount, &dword_1CB82C000);
}

llvm::ArrayType *llvm::SanitizerStatReport::makeModuleStatsArrayTy(llvm::ArrayType **this)
{
  return llvm::ArrayType::get(this[2], (llvm::Type *)((this[5] - this[4]) >> 3));
}

uint64_t llvm::FoldBranchToCommonDest(llvm *this, llvm::BranchInst *a2, llvm::DomTreeUpdater *a3, llvm::MemorySSAUpdater *a4, const llvm::TargetTransformInfo *a5)
{
  v281[1] = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 3) {
    return 0;
  }
  int v6 = (int)a5;
  size_t v11 = (void *)*((void *)this + 5);
  uint64_t v12 = *(void *)(v11[7] + 112);
  if (v12) {
    uint64_t v13 = *(char *)(v12 + 13) < 0 ? 2 : 3;
  }
  else {
    uint64_t v13 = 3;
  }
  uint64_t v14 = *((void *)this - 12);
  unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
  if (!v14 || v15 < 0x1C) {
    return 0;
  }
  BOOL v17 = v15 != 85 && v15 - 81 >= 2;
  if (v17 && v15 - 41 > 0x11) {
    return 0;
  }
  if (*(void **)(v14 + 40) != v11) {
    return 0;
  }
  uint64_t v21 = *(void *)(v14 + 8);
  if (!v21 || *(void *)(v21 + 8)) {
    return 0;
  }
  int v22 = *(_DWORD *)(v14 + 20);
  if ((v22 & 0x40000000) != 0) {
    long long v23 = *(uint64_t **)(v14 - 8);
  }
  else {
    long long v23 = (uint64_t *)(v14 - 32 * (v22 & 0x7FFFFFF));
  }
  uint64_t v24 = *v23;
  int v25 = *(unsigned __int8 *)(*v23 + 16);
  if (v24) {
    BOOL v26 = v25 == 5;
  }
  else {
    BOOL v26 = 0;
  }
  if (v26)
  {
    uint64_t v270 = v274;
    uint64_t v271 = (uint64_t)v274;
    uint64_t v272 = 4;
    int v273 = 0;
    BOOL v5 = sub_1CC565AD0(v24, (uint64_t)&v270);
    unint64_t v27 = (unsigned char *)v271;
    if ((void *)v271 == v270)
    {
      if (v5) {
        return 0;
      }
    }
    else
    {
LABEL_436:
      free(v27);
      if (v5) {
        return 0;
      }
    }
    int v22 = *(_DWORD *)(v14 + 20);
  }
  if ((v22 & 0x40000000) != 0) {
    uint64_t v28 = *(void *)(v14 - 8);
  }
  else {
    uint64_t v28 = v14 - 32 * (v22 & 0x7FFFFFF);
  }
  unint64_t v27 = *(unsigned char **)(v28 + 32);
  if (v27 && v27[16] == 5)
  {
    uint64_t v270 = v274;
    uint64_t v271 = (uint64_t)v274;
    uint64_t v272 = 4;
    int v273 = 0;
    BOOL v5 = sub_1CC565AD0((uint64_t)v27, (uint64_t)&v270);
    unint64_t v27 = (unsigned char *)v271;
    if ((void *)v271 == v270)
    {
      if (!v5) {
        goto LABEL_42;
      }
      return 0;
    }
    free((void *)v271);
    if (v5) {
      return 0;
    }
  }
LABEL_42:
  uint64_t v29 = v11 + 5;
  unint64_t v30 = (void *)v11[5];
  if (v30 != v11 + 5)
  {
    if (v30) {
      unint64_t v31 = v30 - 3;
    }
    else {
      unint64_t v31 = 0;
    }
    int v32 = *((unsigned __int8 *)v31 + 16);
    if (v32 != 30)
    {
      int v42 = 2;
      switch(*((unsigned char *)v31 + 16))
      {
        case 0x1E:
LABEL_435:
          __break(1u);
          goto LABEL_436;
        case 0x1F:
          int v42 = (*((_DWORD *)v31 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_205;
        case 0x20:
        case 0x26:
          int v42 = (*((_DWORD *)v31 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_205;
        case 0x21:
          goto LABEL_51;
        case 0x24:
          int v42 = *((_WORD *)v31 + 9) & 1;
          goto LABEL_205;
        case 0x25:
          int v42 = 1;
          goto LABEL_51;
        case 0x27:
          int v42 = *((_DWORD *)v31 + 20) + 1;
LABEL_205:
          if (!v42) {
            goto LABEL_79;
          }
          goto LABEL_51;
        default:
          goto LABEL_79;
      }
    }
    if ((*((_DWORD *)v31 + 5) & 0x7FFFFFF) == 3) {
      int v42 = 2;
    }
    else {
      int v42 = 1;
    }
LABEL_51:
    uint64_t v33 = 0;
    unint64_t v27 = v31 - 4;
    do
    {
      unint64_t v34 = v27;
      if (v32 != 30)
      {
        unint64_t v34 = v31 - 4;
        switch(*((unsigned char *)v31 + 16))
        {
          case ' ':
          case '&':
            int v39 = *((_DWORD *)v31 + 5);
            if ((v39 & 0x40000000) != 0) {
              unint64_t v40 = (void *)*(v31 - 1);
            }
            else {
              unint64_t v40 = &v31[-4 * (v39 & 0x7FFFFFF)];
            }
            unint64_t v38 = &v40[4 * v33];
            goto LABEL_62;
          case '!':
            if (v33) {
              uint64_t v41 = 0x1FFFFFFFFFFFFFF8;
            }
            else {
              uint64_t v41 = 0x1FFFFFFFFFFFFFF4;
            }
            unint64_t v34 = &v31[v41];
            break;
          case '""':
          case '#':
            goto LABEL_435;
          case '$':
            if ((*((_WORD *)v31 + 9) & 1) == 0)
            {
              uint64_t v35 = 0;
              goto LABEL_55;
            }
            unint64_t v34 = &v31[-4 * (*((_DWORD *)v31 + 5) & 0x7FFFFFF) + 4];
            break;
          case '%':
            break;
          case '\'':
            if (v33) {
              unint64_t v34 = &v31[4 * (v33 - 1) - 4 + -4 * *((unsigned int *)v31 + 20)];
            }
            else {
              unint64_t v34 = &v31[-4 * *((unsigned int *)v31 + 20) - 8];
            }
            break;
          default:
            int v36 = *((_DWORD *)v31 + 5);
            if ((v36 & 0x40000000) != 0) {
              uint64_t v37 = (void *)*(v31 - 1);
            }
            else {
              uint64_t v37 = &v31[-4 * (v36 & 0x7FFFFFF)];
            }
            unint64_t v38 = &v37[8 * v33];
LABEL_62:
            unint64_t v34 = v38 + 4;
            break;
        }
      }
      uint64_t v35 = (void *)*v34;
LABEL_55:
      if (v35 == v11) {
        return 0;
      }
      ++v33;
      v27 -= 32;
    }
    while (v42 != v33);
  }
LABEL_79:
  uint64_t v257 = v259;
  uint64_t v258 = 0x800000000;
  uint64_t v43 = v11[1];
  if (!v43) {
    goto LABEL_216;
  }
  while (1)
  {
    uint64_t v44 = *(void *)(v43 + 24);
    unsigned int v45 = *(unsigned __int8 *)(v44 + 16);
    BOOL v46 = v44 && v45 >= 0x1C;
    if (v46 && v45 - 29 < 0xB) {
      break;
    }
    uint64_t v43 = *(void *)(v43 + 8);
    if (!v43) {
      goto LABEL_216;
    }
  }
LABEL_90:
  uint64_t v48 = *(llvm::ValueHandleBase **)(v44 + 40);
  uint64_t v49 = (void *)*((void *)v48 + 5);
  if (v49 != (void *)((char *)v48 + 40))
  {
    uint64_t v50 = v49 ? (uint64_t)(v49 - 3) : 0;
    unsigned int v51 = *(unsigned __int8 *)(v50 + 16) - 40;
    uint64_t v52 = v51 >= 0xFFFFFFF5 ? v50 : 0;
    if (v49)
    {
      if (*(unsigned char *)(v52 + 16) == 30 && v51 >= 0xFFFFFFF5 && (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) != 1)
      {
        uint64_t v247 = v48;
        uint64_t v249 = v29;
        int v54 = sub_1CD20EE2C((uint64_t)this, v52, 0);
        uint64_t v29 = v249;
        if (v54)
        {
          sub_1CD20F6D8((uint64_t)&v270, (uint64_t)this, (llvm::Instruction *)v52, (uint64_t)a4);
          if ((_BYTE)v271)
          {
            BOOL v55 = v247;
            uint64_t v29 = v249;
            if (!a4) {
              goto LABEL_124;
            }
            int v240 = BYTE4(v270);
            uint64_t v238 = **((void **)this - 12);
            uint64_t v243 = (*(uint64_t (**)(void, void))(**(void **)a4 + 824))(*(void *)a4, v270);
            int v245 = v56;
            if (v240)
            {
              if ((uint64_t v57 = *(void *)(v52 - 96), (v58 = *(void *)(v57 + 8)) == 0)
                || *(void *)(v58 + 8)
                || ((unsigned int v59 = *(unsigned __int8 *)(v57 + 16), v59 >= 0x1C) ? (v60 = v59 - 81 >= 2) : (v60 = 1), v60))
              {
                uint64_t v61 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))(**(void **)a4 + 824))(*(void *)a4, 30, v238, v13, 0, 0, 0, 0, 0, 0, 0);
                if (v62 == 1) {
                  int v63 = 1;
                }
                else {
                  int v63 = v245;
                }
                unint64_t v64 = v243 + v61;
                if (__OFADD__(v243, v61)) {
                  unint64_t v64 = ((v243 + v61) >> 63) ^ 0x8000000000000000;
                }
                uint64_t v243 = v64;
                int v245 = v63;
              }
            }
            BOOL v65 = v243 > dword_1EBCFE4C8;
            BOOL v55 = v247;
            if (v245) {
              BOOL v65 = v245 > 0;
            }
            uint64_t v29 = v249;
            if (!v65)
            {
LABEL_124:
              int v66 = v258;
              if (v258 >= HIDWORD(v258)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v257 + v258) = v55;
              LODWORD(v258) = v66 + 1;
            }
          }
          else
          {
            uint64_t v29 = v249;
          }
        }
      }
    }
  }
  while (1)
  {
    uint64_t v43 = *(void *)(v43 + 8);
    if (!v43) {
      break;
    }
    uint64_t v44 = *(void *)(v43 + 24);
    unsigned int v67 = *(unsigned __int8 *)(v44 + 16);
    if (v44) {
      BOOL v68 = v67 >= 0x1C;
    }
    else {
      BOOL v68 = 0;
    }
    if (v68 && v67 - 29 < 0xB) {
      goto LABEL_90;
    }
  }
  if (!v258) {
    goto LABEL_216;
  }
  BOOL v70 = (void *)v11[6];
  if (v70 == v29)
  {
    unsigned int v101 = 0;
    int v102 = 1;
    int v103 = 1;
  }
  else
  {
    int v241 = v258;
    unsigned int v246 = 0;
    char v248 = 0;
    uint64_t v250 = v29;
    do
    {
      if (v70) {
        uint64_t v71 = (uint64_t)(v70 - 3);
      }
      else {
        uint64_t v71 = 0;
      }
      if (v71 != v14)
      {
        uint64_t v72 = v71;
        if (sub_1CBF63B28(v71) || *(unsigned char *)(v72 + 16) == 30)
        {
          uint64_t v29 = v250;
        }
        else
        {
          if (!llvm::isSafeToSpeculativelyExecute(v72, 0, 0, 0)) {
            goto LABEL_255;
          }
          uint64_t v73 = v72;
          if ((*(_DWORD *)(*(void *)v72 + 8) & 0xFE) == 0x12)
          {
            BOOL v74 = 1;
            uint64_t v29 = v250;
          }
          else
          {
            int v75 = *(_DWORD *)(v72 + 20);
            uint64_t v29 = v250;
            if ((v75 & 0x40000000) != 0)
            {
              int v77 = *(uint64_t **)(v72 - 8);
              uint64_t v76 = v75 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v76 = v75 & 0x7FFFFFF;
              int v77 = (uint64_t *)(v72 - 32 * v76);
            }
            if (v76)
            {
              uint64_t v78 = 32 * v76 - 32;
              do
              {
                uint64_t v79 = *v77;
                v77 += 4;
                BOOL v74 = (*(_DWORD *)(*(void *)v79 + 8) & 0xFE) == 18;
                BOOL v80 = (*(_DWORD *)(*(void *)v79 + 8) & 0xFE) == 0x12 || v78 == 0;
                v78 -= 32;
              }
              while (!v80);
            }
            else
            {
              BOOL v74 = 0;
            }
          }
          if (!a4) {
            goto LABEL_457;
          }
          int v81 = *(_DWORD *)(v73 + 20);
          if ((v81 & 0x40000000) != 0)
          {
            uint64_t v83 = *(uint64_t **)(v73 - 8);
            unint64_t v82 = v81 & 0x7FFFFFF;
          }
          else
          {
            unint64_t v82 = v81 & 0x7FFFFFF;
            uint64_t v83 = (uint64_t *)(v73 - 32 * v82);
          }
          uint64_t v270 = &v272;
          uint64_t v271 = 0x400000000;
          uint64_t v239 = v73;
          if (v82 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v82)
          {
            uint64_t v84 = 32 * v82;
            uint64_t v85 = &v272;
            do
            {
              uint64_t v86 = *v83;
              v83 += 4;
              *v85++ = v86;
              v84 -= 32;
            }
            while (v84);
            unint64_t v87 = (uint64_t *)v270;
          }
          else
          {
            unint64_t v87 = &v272;
          }
          LODWORD(v271) = v82;
          uint64_t v89 = (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)a4 + 72))(*(void *)a4, v73, v87);
          if (v270 != &v272)
          {
            uint64_t v236 = v89;
            int v237 = v88;
            free(v270);
            uint64_t v89 = v236;
            int v88 = v237;
          }
          BOOL v90 = v89 < 0;
          if (v88) {
            BOOL v90 = v88 < 0;
          }
          uint64_t v29 = v250;
          uint64_t v73 = v239;
          if (v90) {
            goto LABEL_457;
          }
          BOOL v91 = v89 > 0;
          if (v88) {
            BOOL v91 = v88 > 0;
          }
          if (v91)
          {
LABEL_457:
            v246 += v241;
            if (v246 > dword_1EBCFE588 * v6)
            {
LABEL_255:
              uint64_t v19 = 0;
              goto LABEL_217;
            }
          }
          v248 |= v74;
          for (uint64_t i = *(void *)(v73 + 8); i; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v93 = *(void *)(i + 24);
            if (v93 && *(unsigned char *)(v93 + 16) == 83)
            {
              int v94 = *(_DWORD *)(v93 + 20);
              if ((v94 & 0x40000000) != 0) {
                uint64_t v95 = *(void *)(v93 - 8);
              }
              else {
                uint64_t v95 = v93 - 32 * (v94 & 0x7FFFFFF);
              }
              if (*(void **)(v95
                              + 32 * *(unsigned int *)(v93 + 60)
                              + 8 * ((unint64_t)(i - v95) >> 5)) != v11)
                goto LABEL_216;
            }
            else
            {
              if (*(void **)(v93 + 40) != v11) {
                goto LABEL_216;
              }
              uint64_t v96 = *(void *)(v73 + 40);
              int v97 = *(__int16 *)(v96 + 18);
              if ((v97 & 0x80000000) == 0)
              {
                uint64_t v98 = *(void *)(v96 + 48);
                if (v98 != v96 + 40)
                {
                  int v99 = 0;
                  do
                  {
                    uint64_t v100 = v98 - 24;
                    if (!v98) {
                      uint64_t v100 = 0;
                    }
                    *(_DWORD *)(v100 + 56) = v99++;
                    uint64_t v98 = *(void *)(v98 + 8);
                  }
                  while (v98 != v96 + 40);
                }
                *(_WORD *)(v96 + 18) = v97 | 0x8000;
              }
              if (*(_DWORD *)(v73 + 56) >= *(_DWORD *)(v93 + 56)) {
                goto LABEL_216;
              }
            }
          }
        }
      }
      BOOL v70 = (void *)v70[1];
    }
    while (v70 != v29);
    int v103 = (v248 & 1) != 0 ? dword_1EBCFE588 : 1;
    int v102 = v258;
    unsigned int v101 = v246;
  }
  if (v101 > v103 * v6 || v102 == 0)
  {
LABEL_216:
    uint64_t v19 = 0;
    goto LABEL_217;
  }
  uint64_t v105 = *(void *)(*(void *)v257 + 40);
  if (v105 == *(void *)v257 + 40)
  {
    uint64_t v107 = 0;
  }
  else
  {
    if (v105) {
      uint64_t v106 = (unsigned __int8 *)(v105 - 24);
    }
    else {
      uint64_t v106 = 0;
    }
    if (v106[16] - 29 >= 0xB) {
      uint64_t v107 = 0;
    }
    else {
      uint64_t v107 = (llvm::Instruction *)v106;
    }
  }
  uint64_t v108 = *((void *)this + 5);
  unint64_t v109 = (void *)*((void *)v107 + 5);
  sub_1CD20F6D8((uint64_t)&v270, (uint64_t)this, v107, (uint64_t)a4);
  uint64_t v110 = 0;
  unsigned int v244 = v270;
  int v111 = BYTE4(v270);
  uint64_t v112 = **(void **)v107;
  uint64_t v270 = &v272;
  uint64_t v271 = 0x200000000;
  v274[4] = v112;
  v274[5] = &v280;
  v274[6] = v281;
  v274[7] = 0;
  int v275 = 0;
  __int16 v276 = 512;
  char v277 = 7;
  uint64_t v278 = 0;
  uint64_t v279 = 0;
  uint64_t v280 = &unk_1F2616E88;
  v281[0] = &unk_1F2617008;
  v274[2] = *((void *)v107 + 5);
  v274[3] = (char *)v107 + 24;
  int v113 = (void *)*((void *)v107 + 6);
  uint64_t v260 = v113;
  if (v113)
  {
    llvm::MetadataTracking::track((uint64_t)&v260, (unsigned __int8 *)v113, 2);
    uint64_t v110 = v260;
  }
  sub_1CB8461A4((uint64_t)&v270, 0, (uint64_t)v110);
  if (v260)
  {
    int v203 = *(unsigned __int8 *)v260;
    if ((v203 - 4) > 0x1E)
    {
      if ((v203 - 3) >= 0xFFFFFFFE) {
        uint64_t v222 = v260;
      }
      else {
        uint64_t v222 = 0;
      }
      if ((v203 - 3) < 0xFFFFFFFE)
      {
        if (v203 == 3) {
          *((void *)v260 + 1) = 0;
        }
        goto LABEL_230;
      }
      unint64_t v205 = (unint64_t)v222 + 8;
    }
    else
    {
      if ((*((unsigned char *)v260 + 1) & 0x7F) != 2 && !*((_DWORD *)v260 + 3)) {
        goto LABEL_230;
      }
      uint64_t v204 = *((void *)v260 + 2);
      if ((v204 & 4) == 0) {
        goto LABEL_230;
      }
      unint64_t v205 = v204 & 0xFFFFFFFFFFFFFFF8;
      if (!v205) {
        goto LABEL_230;
      }
    }
    unint64_t v265 = &v260;
    sub_1CC5FA668(v205 + 16, &v265);
  }
LABEL_230:
  uint64_t v115 = v108 + 40;
  uint64_t v114 = *(void *)(v108 + 40);
  if (v114 == v108 + 40)
  {
    BOOL v117 = 0;
  }
  else
  {
    if (v114) {
      uint64_t v116 = (unsigned __int8 *)(v114 - 24);
    }
    else {
      uint64_t v116 = 0;
    }
    if (v116[16] - 29 >= 0xB) {
      BOOL v117 = 0;
    }
    else {
      BOOL v117 = v116;
    }
  }
  if ((v117[23] & 0x20) == 0) {
    goto LABEL_239;
  }
  uint64_t v206 = ***(void ***)v117;
  unint64_t v265 = v117;
  int v207 = *(_DWORD *)(v206 + 2496);
  if (v207)
  {
    uint64_t v208 = *(void *)(v206 + 2480);
    int v209 = v207 - 1;
    unsigned int v210 = v209 & ((v117 >> 4) ^ (v117 >> 9));
    uint64_t v211 = (unsigned __int8 **)(v208 + 40 * v210);
    uint64_t v212 = *v211;
    if (*v211 == v117) {
      goto LABEL_410;
    }
    uint64_t v213 = 0;
    int v214 = 1;
    while (v212 != (unsigned __int8 *)-4096)
    {
      if (v213) {
        BOOL v215 = 0;
      }
      else {
        BOOL v215 = v212 == (unsigned __int8 *)-8192;
      }
      if (v215) {
        uint64_t v213 = v211;
      }
      unsigned int v216 = v210 + v214++;
      unsigned int v210 = v216 & v209;
      uint64_t v211 = (unsigned __int8 **)(v208 + 40 * v210);
      uint64_t v212 = *v211;
      if (*v211 == v117) {
        goto LABEL_410;
      }
    }
    if (v213) {
      uint64_t v223 = v213;
    }
    else {
      uint64_t v223 = v211;
    }
  }
  else
  {
    uint64_t v223 = 0;
  }
  uint64_t v211 = (unsigned __int8 **)sub_1CC609054(v206 + 2480, (uint64_t)&v265, (uint64_t *)&v265, v223);
  uint64_t v224 = (unsigned __int8 *)v265;
  v211[3] = 0;
  v211[4] = 0;
  *uint64_t v211 = v224;
  v211[1] = (unsigned __int8 *)(v211 + 3);
  v211[2] = (unsigned __int8 *)0x100000000;
LABEL_410:
  uint64_t v217 = *((unsigned int *)v211 + 4);
  if (!v217)
  {
LABEL_239:
    uint64_t v118 = 0;
    goto LABEL_240;
  }
  uint64_t v218 = (uint64_t *)(v211[1] + 8);
  uint64_t v219 = 16 * v217;
  while (*((_DWORD *)v218 - 2) != 30)
  {
    uint64_t v118 = 0;
    v218 += 2;
    v219 -= 16;
    if (!v219) {
      goto LABEL_240;
    }
  }
  uint64_t v118 = *v218;
LABEL_240:
  sub_1CB8461A4((uint64_t)&v270, 0x1Eu, v118);
  if (!v111) {
    goto LABEL_266;
  }
  uint64_t v121 = (llvm::Instruction **)((char *)v107 - 96);
  uint64_t v120 = (llvm::Instruction *)*((void *)v107 - 12);
  uint64_t v122 = *((void *)v120 + 1);
  if (v122 && !*(void *)(v122 + 8))
  {
    unsigned int v123 = *((unsigned __int8 *)v120 + 16);
    if (v123 >= 0x1C && v123 - 81 <= 1)
    {
      *((_WORD *)v120 + 9) = word_1CFB32E80[*((_WORD *)v120 + 9) & 0x3FLL] | *((_WORD *)v120 + 9) & 0xFFC0;
      goto LABEL_259;
    }
  }
  if ((*((unsigned char *)v120 + 23) & 0x10) != 0)
  {
    uint64_t v125 = ***(void ***)v120;
    uint64_t v126 = *(void *)(v125 + 152);
    uint64_t v127 = *(unsigned int *)(v125 + 168);
    if (v127)
    {
      LODWORD(v128) = (v127 - 1) & ((v120 >> 4) ^ (v120 >> 9));
      unint64_t v129 = (llvm::Instruction **)(v126 + 16 * v128);
      uint64_t v130 = *v129;
      if (*v129 == v120)
      {
LABEL_257:
        uint64_t v133 = v129[1];
        unint64_t v136 = *(void *)v133;
        unint64_t v134 = (char *)v133 + 16;
        unint64_t v135 = v136;
        goto LABEL_258;
      }
      int v131 = 1;
      while (v130 != (llvm::Instruction *)-4096)
      {
        int v132 = v128 + v131++;
        uint64_t v128 = v132 & (v127 - 1);
        uint64_t v130 = *(llvm::Instruction **)(v126 + 16 * v128);
        if (v130 == v120)
        {
          unint64_t v129 = (llvm::Instruction **)(v126 + 16 * v128);
          goto LABEL_257;
        }
      }
    }
    unint64_t v129 = (llvm::Instruction **)(v126 + 16 * v127);
    goto LABEL_257;
  }
  unint64_t v135 = 0;
  unint64_t v134 = &byte_1CFBCE98E;
LABEL_258:
  __int16 v268 = 773;
  unint64_t v265 = v134;
  unint64_t v266 = v135;
  v267.i64[0] = (uint64_t)".not";
  uint64_t v120 = sub_1CC2427E8((uint64_t)&v270, (uint64_t)v120, (uint64_t)&v265, v119);
  if (*v121)
  {
LABEL_259:
    **((void **)v107 - 10) = *((void *)v107 - 11);
    uint64_t v137 = *((void *)v107 - 11);
    if (v137) {
      *(void *)(v137 + 16) = *((void *)v107 - 10);
    }
  }
  *uint64_t v121 = v120;
  if (v120)
  {
    unint64_t v140 = (void *)*((void *)v120 + 1);
    BOOL v138 = (llvm::Instruction ***)((char *)v120 + 8);
    uint64_t v139 = v140;
    *((void *)v107 - 11) = v140;
    if (v140) {
      v139[2] = (char *)v107 - 88;
    }
    *((void *)v107 - 10) = v138;
    *BOOL v138 = v121;
  }
  llvm::BranchInst::swapSuccessors(v107);
LABEL_266:
  uint64_t v141 = -64;
  if (*((void *)v107 - 4) == v108) {
    uint64_t v141 = -32;
  }
  uint64_t v142 = *(void *)((char *)this + v141);
  sub_1CD2191C8(v142, (uint64_t)v109, v108, (uint64_t)a3);
  unint64_t v254 = 0;
  unint64_t v255 = 0;
  unint64_t v252 = 0;
  unint64_t v253 = 0;
  char v143 = llvm::Instruction::extractProfMetadata(v107, &v255, &v254);
  int v144 = llvm::Instruction::extractProfMetadata(this, &v253, &v252);
  if ((v143 & 1) != 0 || v144)
  {
    if ((v143 & 1) == 0)
    {
      unint64_t v254 = 1;
      unint64_t v255 = 1;
    }
    if ((v144 & 1) == 0)
    {
      unint64_t v252 = 1;
      unint64_t v253 = 1;
    }
    unint64_t v265 = &v267;
    HIDWORD(v266) = 8;
    if (*((void *)v107 - 4) == v108)
    {
      unint64_t v145 = v253 * v255;
      unint64_t v146 = v252 * v255 + (v252 + v253) * v254;
    }
    else
    {
      unint64_t v145 = v253 * v254 + (v253 + v252) * v255;
      unint64_t v146 = v252 * v254;
    }
    v267.i64[0] = v145;
    v267.i64[1] = v146;
    LODWORD(v266) = 2;
    if (v145 <= v146) {
      unint64_t v145 = v146;
    }
    if (HIDWORD(v145)) {
      uint64x2_t v267 = vshlq_u64(v267, (uint64x2_t)vnegq_s64(vdupq_n_s64(32 - __clz(v145))));
    }
    uint64_t v260 = &v262;
    unsigned int v262 = (unint64_t *)vmovn_s64((int64x2_t)v267);
    uint64_t v261 = 0x800000002;
    sub_1CD219628(v107, (int)v262, SHIDWORD(v262));
    if (v260 != &v262) {
      free(v260);
    }
    if (v265 != &v267) {
      free(v265);
    }
  }
  else
  {
    llvm::Instruction::setMetadata(v107, 2, 0);
  }
  sub_1CC5C92A0((uint64_t)v107, *((void *)v107 - 4) != v108, v142);
  if (a2)
  {
    unint64_t v265 = v109;
    unint64_t v266 = v142 & 0xFFFFFFFFFFFFFFFBLL;
    v267.i64[0] = (uint64_t)v109;
    v267.i64[1] = v108 | 4;
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)&v265, 2);
  }
  if ((*((unsigned char *)this + 23) & 0x20) != 0)
  {
    uint64_t v147 = ***(void ***)this;
    unint64_t v265 = this;
    int v148 = *(_DWORD *)(v147 + 2496);
    if (v148)
    {
      uint64_t v149 = *(void *)(v147 + 2480);
      int v150 = v148 - 1;
      unsigned int v151 = v150 & ((this >> 4) ^ (this >> 9));
      uint64_t v152 = (llvm **)(v149 + 40 * v151);
      BOOL v153 = *v152;
      if (*v152 == this) {
        goto LABEL_299;
      }
      uint64_t v154 = 0;
      int v155 = 1;
      while (v153 != (llvm *)-4096)
      {
        if (v154) {
          BOOL v156 = 0;
        }
        else {
          BOOL v156 = v153 == (llvm *)-8192;
        }
        if (v156) {
          uint64_t v154 = v152;
        }
        unsigned int v157 = v151 + v155++;
        unsigned int v151 = v157 & v150;
        uint64_t v152 = (llvm **)(v149 + 40 * v151);
        BOOL v153 = *v152;
        if (*v152 == this) {
          goto LABEL_299;
        }
      }
      if (v154) {
        unint64_t v220 = v154;
      }
      else {
        unint64_t v220 = v152;
      }
    }
    else
    {
      unint64_t v220 = 0;
    }
    uint64_t v152 = (llvm **)sub_1CC609054(v147 + 2480, (uint64_t)&v265, (uint64_t *)&v265, v220);
    uint64_t v221 = (llvm *)v265;
    v152[3] = 0;
    v152[4] = 0;
    *uint64_t v152 = v221;
    v152[1] = (llvm *)(v152 + 3);
    v152[2] = (llvm *)0x100000000;
LABEL_299:
    uint64_t v158 = *((unsigned int *)v152 + 4);
    if (v158)
    {
      uint64_t v159 = (llvm::MDNode **)((char *)v152[1] + 8);
      uint64_t v160 = 16 * v158;
      while (*((_DWORD *)v159 - 2) != 18)
      {
        v159 += 2;
        v160 -= 16;
        if (!v160) {
          goto LABEL_306;
        }
      }
      if (*v159) {
        llvm::Value::setMetadata((uint64_t ***)v107, 18, *v159);
      }
    }
  }
LABEL_306:
  v267.i32[0] = 128;
  uint64_t v161 = operator new(0x2000uLL, (std::align_val_t)8uLL);
  unint64_t v265 = v161;
  unint64_t v266 = 0;
  uint64_t v261 = 2;
  unsigned int v262 = 0;
  uint64_t v263 = -4096;
  uint64_t v264 = 0;
  uint64_t v260 = &unk_1F2615EC8;
  if (v267.i32[0])
  {
    uint64_t v162 = 0;
    unint64_t v163 = (unint64_t)v267.u32[0] << 6;
    uint64_t v164 = v161 + 2;
    do
    {
      uint64_t v165 = v261;
      uint64_t v166 = v263;
      *(v164 - 1) = v261 & 6;
      *uint64_t v164 = 0;
      v164[1] = v166;
      if (v166 != -4096 && v166 != -8192 && v166 != 0)
      {
        *uint64_t v164 = *(void *)(v165 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v165 & 0xFFFFFFFFFFFFFFF8) = v164 - 1;
        *(v164 - 1) = v165 & 0xFFFFFFFFFFFFFFFELL;
        if (*v164) {
          *(void *)*uint64_t v164 = *(void *)*v164 & 7 | (unint64_t)(v161 + 2);
        }
        uint64_t v162 = v264;
      }
      *(v164 - 2) = &unk_1F2615EC8;
      v164[2] = v162;
      v164 += 8;
      v161 += 8;
      v163 -= 64;
    }
    while (v163);
    if (v263 != -8192 && v263 != -4096 && v263)
    {
      unint64_t v225 = v261 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v261 & 0xFFFFFFFFFFFFFFF8) = v262;
      if (v262)
      {
        *unsigned int v262 = *v262 & 7 | v225;
      }
      else
      {
        uint64_t v226 = v263;
        uint64_t v227 = ***(int32x2_t ****)v263;
        unint64_t v228 = (unint64_t)v227[303];
        if (v228 <= v225)
        {
          uint64_t v229 = v227[305].u32[0];
          if (v228 + 16 * v229 > v225)
          {
            unsigned int v230 = v229 - 1;
            LODWORD(v231) = v230 & ((v263 >> 4) ^ (v263 >> 9));
            unint64_t v232 = (uint64_t *)(v228 + 16 * v231);
            uint64_t v233 = *v232;
            if (v263 == *v232)
            {
LABEL_452:
              *unint64_t v232 = -8192;
              v227[304] = vadd_s32(v227[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v226 = v263;
            }
            else
            {
              int v234 = 1;
              while (v233 != -4096)
              {
                int v235 = v231 + v234++;
                uint64_t v231 = v235 & v230;
                uint64_t v233 = *(void *)(v228 + 16 * v231);
                if (v263 == v233)
                {
                  unint64_t v232 = (uint64_t *)(v228 + 16 * v231);
                  goto LABEL_452;
                }
              }
            }
            *(unsigned char *)(v226 + 17) &= ~1u;
          }
        }
      }
    }
  }
  v267.i8[8] = 0;
  char v269 = 0;
  uint64_t v168 = (void *)v109[5];
  if (v168 == v109 + 5)
  {
    uint64_t v251 = 0;
  }
  else
  {
    if (v168) {
      unint64_t v169 = v168 - 3;
    }
    else {
      unint64_t v169 = 0;
    }
    if (*((unsigned __int8 *)v169 + 16) - 29 >= 0xB) {
      unint64_t v169 = 0;
    }
    uint64_t v251 = v169;
  }
  uint64_t v170 = *(void *)(v108 + 48);
  if (v170 != v115)
  {
    while (1)
    {
      uint64_t v171 = v170 ? (unsigned __int8 *)(v170 - 24) : 0;
      if (!sub_1CBF63B28((uint64_t)v171) && v171[16] - 29 >= 0xB) {
        break;
      }
      uint64_t v170 = *(void *)(v170 + 8);
      if (v170 == v115) {
        goto LABEL_357;
      }
    }
    uint64_t v172 = llvm::Instruction::clone((llvm::Instruction *)v171);
    uint64_t v173 = (unsigned __int8 **)(v172 + 6);
    unint64_t v174 = (unsigned __int8 *)v172[6];
    if ((unsigned __int8 *)v251[6] != v174)
    {
      unint64_t v256 = 0;
      if (&v256 != v173)
      {
        if (!v174)
        {
LABEL_338:
          *uint64_t v173 = 0;
          goto LABEL_339;
        }
        int v175 = *v174;
        if ((v175 - 4) > 0x1E)
        {
          if ((v175 - 3) >= 0xFFFFFFFE) {
            uint64_t v178 = v174;
          }
          else {
            uint64_t v178 = 0;
          }
          if ((v175 - 3) <= 0xFFFFFFFD)
          {
            if (v175 == 3) {
              *((void *)v174 + 1) = 0;
            }
            goto LABEL_338;
          }
          unint64_t v177 = (unint64_t)(v178 + 8);
        }
        else
        {
          if ((v174[1] & 0x7F) != 2 && !*((_DWORD *)v174 + 3)) {
            goto LABEL_338;
          }
          uint64_t v176 = *((void *)v174 + 2);
          if ((v176 & 4) == 0) {
            goto LABEL_338;
          }
          unint64_t v177 = v176 & 0xFFFFFFFFFFFFFFF8;
          if (!v177) {
            goto LABEL_338;
          }
        }
        uint64_t v242 = (unsigned __int8 **)(v172 + 6);
        uint64_t v260 = v172 + 6;
        sub_1CC5FA668(v177 + 16, &v260);
        uint64_t v179 = v256;
        *uint64_t v242 = v256;
        if (v179)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v256, v179, (uint64_t)v242);
          unint64_t v256 = 0;
        }
      }
    }
LABEL_339:
    operator new();
  }
LABEL_357:
  uint64_t v180 = *((void *)this - 12);
  uint64_t v261 = 2;
  unsigned int v262 = 0;
  uint64_t v263 = v180;
  if (v180 != -8192 && v180 != -4096 && v180) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v261);
  }
  uint64_t v260 = &unk_1F2615EC8;
  uint64_t v264 = &v265;
  uint64_t v181 = sub_1CC4CFF80((uint64_t)&v265, &v260);
  if (v263 != -8192 && v263 != -4096 && v263)
  {
    unint64_t v182 = v261 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v261 & 0xFFFFFFFFFFFFFFF8) = v262;
    if (v262)
    {
      *unsigned int v262 = *v262 & 7 | v182;
    }
    else
    {
      uint64_t v183 = v263;
      BOOL v184 = ***(int32x2_t ****)v263;
      unint64_t v185 = (unint64_t)v184[303];
      if (v185 <= v182)
      {
        uint64_t v186 = v184[305].u32[0];
        if (v185 + 16 * v186 > v182)
        {
          unsigned int v187 = v186 - 1;
          LODWORD(v188) = v187 & ((v263 >> 4) ^ (v263 >> 9));
          unint64_t v189 = (uint64_t *)(v185 + 16 * v188);
          uint64_t v190 = *v189;
          if (v263 == *v189)
          {
LABEL_372:
            *unint64_t v189 = -8192;
            v184[304] = vadd_s32(v184[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v183 = v263;
          }
          else
          {
            int v191 = 1;
            while (v190 != -4096)
            {
              int v192 = v188 + v191++;
              uint64_t v188 = v192 & v187;
              uint64_t v190 = *(void *)(v185 + 16 * v188);
              if (v263 == v190)
              {
                unint64_t v189 = (uint64_t *)(v185 + 16 * v188);
                goto LABEL_372;
              }
            }
          }
          *(unsigned char *)(v183 + 17) &= ~1u;
        }
      }
    }
  }
  uint64_t v194 = (llvm::Instruction **)((char *)v107 - 96);
  uint64_t v193 = *((void *)v107 - 12);
  uint64_t v195 = (llvm::Constant **)v181[7];
  uint64_t v260 = "or.cond";
  LOWORD(v264) = 259;
  unsigned int v196 = sub_1CD2196C0((uint64_t)&v270, v244, v193, v195, (const llvm::Twine *)&v260);
  if (*((void *)v107 - 12))
  {
    **((void **)v107 - 10) = *((void *)v107 - 11);
    uint64_t v197 = *((void *)v107 - 11);
    if (v197) {
      *(void *)(v197 + 16) = *((void *)v107 - 10);
    }
  }
  *uint64_t v194 = v196;
  if (v196)
  {
    uint64_t v200 = (void *)*((void *)v196 + 1);
    int v198 = (llvm::Instruction ***)((char *)v196 + 8);
    int v199 = v200;
    *((void *)v107 - 11) = v200;
    if (v200) {
      v199[2] = (char *)v107 - 88;
    }
    *((void *)v107 - 10) = v198;
    uint64_t *v198 = v194;
  }
  for (uint64_t j = *(void *)(v108 + 48); j != v115; uint64_t j = *(void *)(j + 8))
  {
    if (j) {
      uint64_t v202 = (llvm::Instruction *)(j - 24);
    }
    else {
      uint64_t v202 = 0;
    }
    if (sub_1CBF63B28((uint64_t)v202))
    {
      llvm::Instruction::clone(v202);
      operator new();
    }
  }
  if (v269)
  {
    sub_1CC009394((uint64_t)&v267.i64[1]);
    MEMORY[0x1D25D9CD0](v267.i64[1], 8);
    char v269 = 0;
  }
  sub_1CC4D021C(&v265);
  MEMORY[0x1D25D9CD0](v265, 8);
  if (v270 != &v272) {
    free(v270);
  }
  uint64_t v19 = 1;
LABEL_217:
  if (v257 != v259) {
    free(v257);
  }
  return v19;
}

uint64_t sub_1CD20EE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v92[2] = *MEMORY[0x1E4F143B8];
  if (a1 == a2)
  {
    char v38 = 0;
    return v38 & 1;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(v5 + 40);
  if (v7 == v5 + 40)
  {
LABEL_76:
    unint64_t v87 = v91;
    int v88 = v91;
    uint64_t v89 = 16;
    int v90 = 0;
    goto LABEL_77;
  }
  if (v7) {
    uint64_t v8 = v7 - 24;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(unsigned __int8 *)(v8 + 16);
  int v10 = v9 - 29;
  if (v9 == 30)
  {
    if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v39 = 2;
    }
    else {
      unsigned int v39 = 1;
    }
LABEL_11:
    unint64_t v87 = v91;
    int v88 = v91;
    uint64_t v89 = 16;
    int v90 = 0;
LABEL_12:
    uint64_t v11 = 0;
    uint64_t v12 = v8 + 32;
    uint64_t v13 = v8 - 32;
    unsigned int v14 = 16;
    uint64_t v15 = v39;
    while (1)
    {
      int v16 = *(unsigned __int8 *)(v8 + 16);
      if (v16 == 30)
      {
        int v32 = (uint64_t *)(v13 - 32 * v11);
      }
      else
      {
        uint64_t v31 = (v16 - 31);
        int v32 = (uint64_t *)(v8 - 32);
        switch(v31)
        {
          case 1:
          case 7:
            int v35 = *(_DWORD *)(v8 + 20);
            if ((v35 & 0x40000000) != 0) {
              uint64_t v36 = *(void *)(v8 - 8);
            }
            else {
              uint64_t v36 = v8 - 32 * (v35 & 0x7FFFFFF);
            }
            int v32 = (uint64_t *)(v36 + 32 * v11 + 32);
            break;
          case 2:
            if (v11) {
              uint64_t v37 = -64;
            }
            else {
              uint64_t v37 = -96;
            }
            int v32 = (uint64_t *)(v8 + v37);
            break;
          case 3:
          case 4:
            goto LABEL_177;
          case 5:
            if ((*(_WORD *)(v8 + 18) & 1) == 0)
            {
              uint64_t v3 = 0;
              goto LABEL_17;
            }
            int v32 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
            break;
          case 6:
            break;
          case 8:
            int v32 = (uint64_t *)(v8 - 64 - 32 * *(unsigned int *)(v8 + 80));
            if (v11) {
              int v32 = (uint64_t *)(v13 - 32 * *(unsigned int *)(v8 + 80) + 32 * (v11 - 1));
            }
            break;
          default:
            int v33 = *(_DWORD *)(v8 + 20);
            if ((v33 & 0x40000000) != 0) {
              uint64_t v34 = *(void *)(v8 - 8);
            }
            else {
              uint64_t v34 = v8 - 32 * (v33 & 0x7FFFFFF);
            }
            int v32 = (uint64_t *)(v34 + (v11 << 6) + 32);
            break;
        }
      }
      uint64_t v3 = *v32;
LABEL_17:
      BOOL v17 = v88;
      uint64_t v18 = HIDWORD(v89);
      if (v88 != v87) {
        break;
      }
      if (HIDWORD(v89))
      {
        uint64_t v19 = 0;
        uint64_t v20 = 8 * HIDWORD(v89);
        uint64_t v21 = v88;
        while (*v21 != v3)
        {
          if (*v21 == -2) {
            uint64_t v19 = v21;
          }
          ++v21;
          v20 -= 8;
          if (!v20)
          {
            if (!v19) {
              goto LABEL_25;
            }
            *uint64_t v19 = v3;
            --v90;
            goto LABEL_48;
          }
        }
        goto LABEL_48;
      }
LABEL_25:
      if (HIDWORD(v89) >= v14) {
        break;
      }
      ++HIDWORD(v89);
      *(void *)&v88[8 * v18] = v3;
LABEL_48:
      if (++v11 == v15) {
        goto LABEL_77;
      }
    }
    if (3 * v14 <= 4 * (HIDWORD(v89) - v90))
    {
      if (v14 >= 0x40) {
        v14 *= 2;
      }
      else {
        unsigned int v14 = 128;
      }
    }
    else if (v14 - HIDWORD(v89) >= v14 >> 3)
    {
      goto LABEL_29;
    }
    uint64_t v85 = v12;
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v87, v14);
    uint64_t v12 = v85;
    unsigned int v14 = v89;
    BOOL v17 = v88;
LABEL_29:
    unsigned int v22 = v14 - 1;
    unsigned int v23 = (v14 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v24 = &v17[8 * v23];
    uint64_t v25 = *(void *)v24;
    if (*(void *)v24 == -1)
    {
      uint64_t v29 = 0;
LABEL_40:
      if (v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v24;
      }
      if (*(void *)v30 != v3)
      {
        if (*(void *)v30 == -2) {
          --v90;
        }
        else {
          ++HIDWORD(v89);
        }
        *(void *)unint64_t v30 = v3;
      }
    }
    else
    {
      uint64_t v29 = 0;
      int v26 = 1;
      while (v25 != v3)
      {
        if (v29) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v25 == -2;
        }
        if (v27) {
          uint64_t v29 = v24;
        }
        unsigned int v28 = v23 + v26++;
        unsigned int v23 = v28 & v22;
        uint64_t v24 = &v17[8 * (v28 & v22)];
        uint64_t v25 = *(void *)v24;
        if (*(void *)v24 == -1) {
          goto LABEL_40;
        }
      }
    }
    goto LABEL_48;
  }
  unsigned int v39 = 2;
  switch(v10)
  {
    case 1:
LABEL_177:
      __break(1u);
LABEL_178:
      unsigned int v83 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
LABEL_172:
      if (!v83) {
        goto LABEL_173;
      }
      goto LABEL_86;
    case 2:
      unsigned int v39 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
      break;
    case 3:
    case 9:
      unsigned int v39 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
      break;
    case 4:
      goto LABEL_11;
    case 7:
      unsigned int v39 = *(_WORD *)(v8 + 18) & 1;
      break;
    case 8:
      unsigned int v39 = 1;
      goto LABEL_11;
    case 10:
      unsigned int v39 = *(_DWORD *)(v8 + 80) + 1;
      break;
    default:
      goto LABEL_76;
  }
  unint64_t v87 = v91;
  int v88 = v91;
  uint64_t v89 = 16;
  int v90 = 0;
  if (v39) {
    goto LABEL_12;
  }
LABEL_77:
  uint64_t v40 = *(void *)(v6 + 40);
  if (v40 == v6 + 40)
  {
LABEL_173:
    char v84 = 0;
    goto LABEL_167;
  }
  if (v40) {
    uint64_t v3 = v40 - 24;
  }
  else {
    uint64_t v3 = 0;
  }
  int v41 = *(unsigned __int8 *)(v3 + 16);
  int v42 = v41 - 29;
  if (v41 == 30)
  {
    if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v83 = 2;
    }
    else {
      unsigned int v83 = 1;
    }
LABEL_86:
    uint64_t v43 = 0;
    char v84 = 0;
    uint64_t v44 = v3 - 32;
    uint64_t v45 = v83;
    while (1)
    {
      uint64_t v86 = 0;
      int v46 = *(unsigned __int8 *)(v3 + 16);
      if (v46 == 30)
      {
        BOOL v74 = (uint64_t *)(v44 - 32 * v43);
      }
      else
      {
        uint64_t v73 = (v46 - 31);
        BOOL v74 = (uint64_t *)(v3 - 32);
        switch(v73)
        {
          case 1:
          case 7:
            int v77 = *(_DWORD *)(v3 + 20);
            if ((v77 & 0x40000000) != 0) {
              uint64_t v78 = *(void *)(v3 - 8);
            }
            else {
              uint64_t v78 = v3 - 32 * (v77 & 0x7FFFFFF);
            }
            BOOL v74 = (uint64_t *)(v78 + 32 * (v43 + 1));
            break;
          case 2:
            uint64_t v79 = -64;
            if (!v43) {
              uint64_t v79 = -96;
            }
            BOOL v74 = (uint64_t *)(v3 + v79);
            break;
          case 3:
          case 4:
            goto LABEL_177;
          case 5:
            if ((*(_WORD *)(v3 + 18) & 1) == 0)
            {
              uint64_t v47 = 0;
              goto LABEL_91;
            }
            uint64_t v80 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
            uint64_t v81 = v3 + 32;
            goto LABEL_164;
          case 6:
            break;
          case 8:
            if (v43)
            {
              BOOL v74 = (uint64_t *)(v44 - 32 * *(unsigned int *)(v3 + 80) + 32 * v43 - 32);
            }
            else
            {
              uint64_t v80 = *(unsigned int *)(v3 + 80);
              uint64_t v81 = v3 - 64;
LABEL_164:
              BOOL v74 = (uint64_t *)(v81 - 32 * v80);
            }
            break;
          default:
            int v75 = *(_DWORD *)(v3 + 20);
            if ((v75 & 0x40000000) != 0) {
              uint64_t v76 = *(void *)(v3 - 8);
            }
            else {
              uint64_t v76 = v3 - 32 * (v75 & 0x7FFFFFF);
            }
            BOOL v74 = (uint64_t *)(v76 + 32 * (2 * v43) + 32);
            break;
        }
      }
      uint64_t v47 = *v74;
LABEL_91:
      uint64_t v86 = v47;
      uint64_t v48 = v87;
      if (v88 == v87)
      {
        int v49 = HIDWORD(v89);
        uint64_t v50 = &v88[8 * HIDWORD(v89)];
        if (HIDWORD(v89))
        {
          uint64_t v51 = 0;
          while (*(void *)&v88[v51] != v47)
          {
            v51 += 8;
            if (8 * HIDWORD(v89) == v51) {
              goto LABEL_111;
            }
          }
          uint64_t v50 = &v88[v51];
        }
LABEL_111:
        uint64_t v48 = v88;
      }
      else
      {
        int v52 = v89 - 1;
        unsigned int v53 = (v89 - 1) & ((v47 >> 4) ^ (v47 >> 9));
        uint64_t v50 = &v88[8 * v53];
        uint64_t v54 = *(void *)v50;
        if (*(void *)v50 == -1)
        {
          uint64_t v72 = 0;
LABEL_138:
          if (v72) {
            uint64_t v50 = v72;
          }
          int v49 = HIDWORD(v89);
          if (*(void *)v50 != v47) {
            uint64_t v50 = &v88[8 * v89];
          }
        }
        else
        {
          uint64_t v72 = 0;
          int v55 = 1;
          while (v54 != v47)
          {
            if (v72) {
              BOOL v56 = 0;
            }
            else {
              BOOL v56 = v54 == -2;
            }
            if (v56) {
              uint64_t v72 = v50;
            }
            unsigned int v57 = v53 + v55++;
            unsigned int v53 = v57 & v52;
            uint64_t v50 = &v88[8 * (v57 & v52)];
            uint64_t v54 = *(void *)v50;
            if (*(void *)v50 == -1) {
              goto LABEL_138;
            }
          }
          int v49 = HIDWORD(v89);
        }
      }
      if (v88 == v48) {
        int v58 = v49;
      }
      else {
        int v58 = v89;
      }
      if (v50 == &v88[8 * v58]) {
        goto LABEL_136;
      }
      v92[0] = v5;
      v92[1] = v6;
      if (sub_1CD218F2C(v47, v92, 2, 0)) {
        goto LABEL_136;
      }
      if (!a3)
      {
        char v84 = 1;
        goto LABEL_167;
      }
      if (*(unsigned char *)a3)
      {
        int v59 = 4;
        uint64_t v60 = a3 + 8;
      }
      else
      {
        int v59 = *(_DWORD *)(a3 + 16);
        if (!v59)
        {
          uint64_t v69 = 0;
LABEL_133:
          BOOL v70 = sub_1CC875030(a3, (uint64_t)&v86, &v86, v69);
          *BOOL v70 = v86;
          unint64_t v71 = *(unsigned int *)(a3 + 48);
          if (v71 >= *(unsigned int *)(a3 + 52)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a3 + 40) + 8 * v71) = v86;
          ++*(_DWORD *)(a3 + 48);
          goto LABEL_135;
        }
        uint64_t v60 = *(void *)(a3 + 8);
      }
      int v61 = v59 - 1;
      unsigned int v62 = ((v86 >> 4) ^ (v86 >> 9)) & v61;
      int v63 = (void *)(v60 + 8 * v62);
      uint64_t v64 = *v63;
      if (v86 != *v63)
      {
        BOOL v65 = 0;
        int v66 = 1;
        while (v64 != -4096)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -8192;
          }
          if (v67) {
            BOOL v65 = v63;
          }
          unsigned int v68 = v62 + v66++;
          unsigned int v62 = v68 & v61;
          int v63 = (void *)(v60 + 8 * v62);
          uint64_t v64 = *v63;
          char v84 = 1;
          if (v86 == *v63) {
            goto LABEL_136;
          }
        }
        if (v65) {
          uint64_t v69 = v65;
        }
        else {
          uint64_t v69 = v63;
        }
        goto LABEL_133;
      }
LABEL_135:
      char v84 = 1;
LABEL_136:
      if (++v43 == v45) {
        goto LABEL_167;
      }
    }
  }
  unsigned int v83 = 2;
  char v84 = 0;
  switch(v42)
  {
    case 0:
    case 5:
    case 6:
      break;
    case 1:
      goto LABEL_177;
    case 2:
      unsigned int v83 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_172;
    case 3:
    case 9:
      goto LABEL_178;
    case 4:
      goto LABEL_86;
    case 7:
      unsigned int v83 = *(_WORD *)(v3 + 18) & 1;
      goto LABEL_172;
    case 8:
      unsigned int v83 = 1;
      goto LABEL_86;
    case 10:
      unsigned int v83 = *(_DWORD *)(v3 + 80) + 1;
      goto LABEL_172;
    default:
      goto LABEL_173;
  }
LABEL_167:
  char v38 = v84 ^ 1;
  if (v88 != v87) {
    free(v88);
  }
  return v38 & 1;
}

uint64_t sub_1CD20F6D8(uint64_t a1, uint64_t a2, llvm::Instruction *this, uint64_t a4)
{
  if (!a4) {
    goto LABEL_24;
  }
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_17;
  }
  uint64_t v8 = ***(void ***)this;
  unint64_t v37 = (unint64_t)this;
  int v9 = *(_DWORD *)(v8 + 2496);
  if (!v9)
  {
    int v32 = 0;
LABEL_47:
    uint64_t v13 = (llvm::Instruction **)sub_1CC609054(v8 + 2480, (uint64_t)&v37, (uint64_t *)&v37, v32);
    unint64_t v33 = v37;
    v13[3] = 0;
    void v13[4] = 0;
    uint64_t *v13 = (llvm::Instruction *)v33;
    v13[1] = (llvm::Instruction *)(v13 + 3);
    v13[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_13;
  }
  uint64_t v10 = *(void *)(v8 + 2480);
  int v11 = v9 - 1;
  unsigned int v12 = v11 & ((this >> 4) ^ (this >> 9));
  uint64_t v13 = (llvm::Instruction **)(v10 + 40 * v12);
  unsigned int v14 = *v13;
  if (*v13 != this)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != (llvm::Instruction *)-4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (llvm::Instruction *)-8192;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      uint64_t v13 = (llvm::Instruction **)(v10 + 40 * v12);
      unsigned int v14 = *v13;
      if (*v13 == this) {
        goto LABEL_13;
      }
    }
    if (v15) {
      int v32 = v15;
    }
    else {
      int v32 = v13;
    }
    goto LABEL_47;
  }
LABEL_13:
  uint64_t v19 = *((unsigned int *)v13 + 4);
  if (v19)
  {
    uint64_t v20 = (void *)((char *)v13[1] + 8);
    uint64_t v21 = 16 * v19;
    while (*((_DWORD *)v20 - 2) != 15)
    {
      v20 += 2;
      v21 -= 16;
      if (!v21) {
        goto LABEL_17;
      }
    }
    if (*v20) {
      goto LABEL_24;
    }
  }
LABEL_17:
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  if (!llvm::Instruction::extractProfMetadata(this, &v37, &v36) || (unint64_t v22 = v36 + v37) == 0)
  {
LABEL_24:
    uint64_t result = 0xFFFFFFFFLL;
    LODWORD(v24) = -1;
    goto LABEL_25;
  }
  unint64_t v23 = HIDWORD(v22);
  if (HIDWORD(v22))
  {
    LOBYTE(v23) = 0;
    unint64_t v34 = v36 + v37;
    do
    {
      unint64_t v22 = v34 >> 1;
      LOBYTE(v23) = v23 + 1;
      unint64_t v35 = v34 >> 33;
      v34 >>= 1;
    }
    while (v35);
  }
  unint64_t v24 = v37 >> v23;
  if (v22 != 0x80000000) {
    unint64_t v24 = (((unint64_t)(v37 >> v23) << 31) | (v22 >> 1)) / v22;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a4 + 80))();
LABEL_25:
  uint64_t v26 = *((void *)this - 4);
  uint64_t v27 = *(void *)(a2 - 32);
  if (v26 == v27)
  {
    if (v24 == -1 || v24 < result)
    {
      uint64_t v30 = 29;
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v28 = *((void *)this - 8);
    uint64_t v29 = *(void *)(a2 - 64);
    if (v28 == v29)
    {
      if (v24 == -1 || 0x80000000 - v24 < result)
      {
        uint64_t v30 = 28;
        goto LABEL_42;
      }
    }
    else if (v26 == v29)
    {
      if (v24 == -1 || v24 < result)
      {
        uint64_t v30 = 0x10000001CLL;
        goto LABEL_42;
      }
    }
    else if (v28 == v27 && (v24 == -1 || 0x80000000 - v24 < result))
    {
      uint64_t v30 = 0x10000001DLL;
LABEL_42:
      *(void *)a1 = v30;
      char v31 = 1;
      goto LABEL_43;
    }
  }
  char v31 = 0;
  *(unsigned char *)a1 = 0;
LABEL_43:
  *(unsigned char *)(a1 + 8) = v31;
  return result;
}

uint64_t llvm::simplifyCFG(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(*((void *)a1 + 7) + 40) + 272;
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = v6;
  v8[3] = a5;
  v8[4] = a6;
  v8[5] = a4;
  return sub_1CD20F9BC((uint64_t)v8, a1);
}

uint64_t sub_1CD20F9BC(uint64_t a1, llvm *this)
{
  int v2 = this;
  uint64_t v3 = a1;
  int v4 = 0;
  v1433[4] = *MEMORY[0x1E4F143B8];
  int64x2_t v1316 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v1347 = (void *)((char *)this + 40);
  v1326 = (uint64_t *)((char *)this + 48);
  while (2)
  {
    *(unsigned char *)(v3 + 48) = 0;
    uint64_t v5 = *((void *)v2 + 1);
    if (v5)
    {
      while (1)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
        BOOL v8 = v6 && v7 >= 0x1C;
        if (v8 && v7 - 29 < 0xB) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
        if (!v5) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      uint64_t v10 = *(void *)(*((void *)v2 + 7) + 80);
      if (v10) {
        int v11 = (llvm *)(v10 - 24);
      }
      else {
        int v11 = 0;
      }
      if (v11 != v2)
      {
        unsigned int v12 = *(llvm::BasicBlock **)(v3 + 8);
LABEL_87:
        llvm::DeleteDeadBlock(v2, v12, 0);
LABEL_88:
        LODWORD(v61) = 1;
        goto LABEL_89;
      }
    }
    uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v2);
    unsigned int v12 = *(llvm::BasicBlock **)(v3 + 8);
    if ((llvm *)SinglePredecessor == v2) {
      goto LABEL_87;
    }
    int v1331 = llvm::ConstantFoldTerminator(v2, 1, 0, (uint64_t)v12);
    unsigned int v1327 = llvm::EliminateDuplicatePHINodes(v2, v14);
    unint64_t v15 = *(void *)(v3 + 8);
    if (*((void **)v2 + 5) != v1347)
    {
      uint64_t v16 = *v1326 - 24;
      uint64_t v17 = *v1326 ? *v1326 - 24 : 0;
      if (*v1326 && *(unsigned char *)(v17 + 16) == 83)
      {
        while (1)
        {
          uint64_t v18 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
          if (v18) {
            break;
          }
LABEL_64:
          uint64_t v38 = *(void *)(v16 + 32);
          uint64_t v16 = v38 - 24;
          if (v38) {
            uint64_t v39 = v38 - 24;
          }
          else {
            uint64_t v39 = 0;
          }
          if (!v38 || *(unsigned char *)(v39 + 16) != 83)
          {
            uint64_t v3 = a1;
            unint64_t v15 = *(void *)(a1 + 8);
            int v2 = this;
            goto LABEL_70;
          }
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 32 * v18;
        while (1)
        {
          int v22 = *(_DWORD *)(v16 + 20);
          uint64_t v23 = (v22 & 0x40000000) != 0 ? *(void *)(v16 - 8) : v16 - 32 * (v22 & 0x7FFFFFF);
          if (sub_1CD220C58(*(void *)(v23 + v20), v16)) {
            break;
          }
LABEL_48:
          v20 += 32;
          v19 += 8;
          if (v21 == v20) {
            goto LABEL_64;
          }
        }
        int v24 = *(_DWORD *)(v16 + 20);
        if ((v24 & 0x40000000) != 0) {
          uint64_t v25 = *(void *)(v16 - 8);
        }
        else {
          uint64_t v25 = v16 - 32 * (v24 & 0x7FFFFFF);
        }
        uint64_t v26 = *(llvm::BasicBlock **)(v25 + 32 * *(unsigned int *)(v16 + 60) + v19);
        uint64_t v27 = (void *)*((void *)v26 + 5);
        if (v27 == (void *)((char *)v26 + 40))
        {
          uint64_t v29 = 0;
        }
        else
        {
          if (v27) {
            uint64_t v28 = (uint64_t **)(v27 - 3);
          }
          else {
            uint64_t v28 = 0;
          }
          if (*((unsigned __int8 *)v28 + 16) - 29 >= 0xB) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v28;
          }
        }
        uint64_t v30 = 0;
        uint64_t v31 = **v29;
        v1410 = &v1411.u64[1];
        v1411.i64[0] = 0x200000000;
        v1414.i64[1] = v31;
        v1415 = &v1423;
        uint64_t v1416 = (uint64_t)&v1424;
        uint64_t v1417 = 0;
        int v1418 = 0;
        __int16 v1419 = 512;
        char v1420 = 7;
        v1413.i64[1] = 0;
        v1414.i64[0] = 0;
        uint64_t v1421 = 0;
        uint64_t v1422 = 0;
        v1423 = &unk_1F2616E88;
        v1424 = &unk_1F2617008;
        v1413.i64[1] = (uint64_t)v29[5];
        v1414.i64[0] = (uint64_t)(v29 + 3);
        int v32 = (unsigned __int8 *)v29[6];
        *(void *)&long long v1372 = v32;
        if (v32)
        {
          llvm::MetadataTracking::track((uint64_t)&v1372, v32, 2);
          uint64_t v30 = v1372;
        }
        sub_1CB8461A4((uint64_t)&v1410, 0, v30);
        if ((void)v1372)
        {
          int v34 = *(unsigned __int8 *)v1372;
          if ((v34 - 4) > 0x1E)
          {
            if ((v34 - 3) >= 0xFFFFFFFE) {
              uint64_t v37 = v1372;
            }
            else {
              uint64_t v37 = 0;
            }
            if ((v34 - 3) < 0xFFFFFFFE)
            {
              if (v34 == 3) {
                *(void *)(v1372 + 8) = 0;
              }
              goto LABEL_44;
            }
            unint64_t v36 = v37 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1372 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1372 + 12)) {
              goto LABEL_44;
            }
            uint64_t v35 = *(void *)(v1372 + 16);
            if ((v35 & 4) == 0) {
              goto LABEL_44;
            }
            unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
            if (!v36) {
              goto LABEL_44;
            }
          }
          v1388 = &v1372;
          sub_1CC5FA668(v36 + 16, &v1388);
        }
LABEL_44:
        int v33 = *((unsigned __int8 *)v29 + 16);
        if (v33 == 31)
        {
          v1388 = "unreachable";
          LOWORD(v1392) = 259;
          operator new();
        }
        if (v33 == 30)
        {
          llvm::BasicBlock::removePredecessor(this, v26, 0);
          if ((*((_DWORD *)v29 + 5) & 0x7FFFFFF) == 1)
          {
            LLVMBuildUnreachable_0((uint64_t)&v1410);
          }
          else
          {
            int v63 = (llvm::Instruction *)*(v29 - 12);
            if (*(v29 - 4) == (uint64_t *)this)
            {
              LOWORD(v1392) = 257;
              int v63 = sub_1CC2427E8((uint64_t)&v1410, (uint64_t)v63, (uint64_t)&v1388, v62);
            }
            llvm::IRBuilderBase::CreateAssumption((uint64_t *)&v1410, (uint64_t)v63, 0, 0);
            uint64_t v64 = (llvm *)*(v29 - 4);
            if (v64 == this) {
              uint64_t v64 = (llvm *)*(v29 - 8);
            }
            BOOL v65 = (char *)operator new(0x60uLL);
            *((_DWORD *)v65 + 13) = *((_DWORD *)v65 + 13) & 0x38000000 | 1;
            *(void *)BOOL v65 = 0;
            *((void *)v65 + 2) = 0;
            *((void *)v65 + 1) = 0;
            *((void *)v65 + 4) = ***(void ***)v64 + 1576;
            *((void *)v65 + 3) = v65 + 32;
            *((void *)v65 + 5) = 0;
            v65[48] = 30;
            v65[49] = 0;
            *((_WORD *)v65 + 25) = 0;
            *((_DWORD *)v65 + 13) = 1;
            *(_OWORD *)(v65 + 56) = 0u;
            *(_OWORD *)(v65 + 72) = 0u;
            *((_DWORD *)v65 + 22) = 0;
            *(void *)BOOL v65 = v64;
            uint64_t v68 = *((void *)v64 + 1);
            BOOL v67 = (void *)((char *)v64 + 8);
            uint64_t v66 = v68;
            *((void *)v65 + 1) = v68;
            if (v68) {
              *(void *)(v66 + 16) = v65 + 8;
            }
            *((void *)v65 + 2) = v67;
            *BOOL v67 = v65;
            LOWORD(v1392) = 257;
            sub_1CB844E0C((uint64_t *)&v1410, (llvm::Instruction *)(v65 + 32), (uint64_t)&v1388);
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        if (v1410 != &v1411.u64[1]) {
          free(v1410);
        }
        goto LABEL_48;
      }
    }
LABEL_70:
    if (llvm::MergeBlockIntoPredecessor(v2, v15, 0, 0, 0, 0)) {
      goto LABEL_88;
    }
    int v1315 = v4;
    uint64_t v40 = (void *)(*(void *)(*((void *)v2 + 7) + 40) + 216);
    v1412.i16[4] = 260;
    v1410 = v40;
    llvm::Triple::Triple((llvm::Triple *)&v1350, (const llvm::Twine *)&v1410);
    if (!byte_1EBCFDF88
      || v1352 <= 0x31 && ((1 << v1352) & 0x3000030000000) != 0
      || !*(unsigned char *)(*(void *)(a1 + 40) + 9))
    {
      goto LABEL_74;
    }
    uint64_t v69 = *(void *)(a1 + 8);
    v1428 = v1430;
    *(void *)v1429 = 0x400000000;
    uint64_t v70 = *((void *)this + 1);
    if (!v70) {
      goto LABEL_664;
    }
    while (1)
    {
      uint64_t v71 = *(void *)(v70 + 24);
      unsigned int v72 = *(unsigned __int8 *)(v71 + 16);
      BOOL v73 = v71 && v72 >= 0x1C;
      BOOL v74 = !v73 || v72 - 29 > 0xA;
      if (!v74) {
        break;
      }
      uint64_t v70 = *(void *)(v70 + 8);
      if (!v70) {
        goto LABEL_664;
      }
    }
    unsigned int v75 = 0;
    char v76 = 0;
LABEL_114:
    uint64_t v77 = *(void *)(v71 + 40);
    uint64_t v78 = *(void *)(v77 + 40);
    if (v78 == v77 + 40) {
      goto LABEL_128;
    }
    uint64_t v79 = v78 - 24;
    if (!v78) {
      uint64_t v79 = 0;
    }
    unsigned int v80 = *(unsigned __int8 *)(v79 + 16) - 40;
    if (v80 < 0xFFFFFFF5) {
      uint64_t v79 = 0;
    }
    if (v78
      && (*(unsigned char *)(v79 + 16) == 30 ? (BOOL v81 = v80 >= 0xFFFFFFF5) : (BOOL v81 = 0),
          v81 && (*(_DWORD *)(v79 + 20) & 0x7FFFFFF) == 1))
    {
      if (v75 >= v1429[1]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v1428 + v75) = v77;
      unsigned int v75 = ++v1429[0];
    }
    else
    {
LABEL_128:
      char v76 = 1;
    }
    while (1)
    {
      uint64_t v70 = *(void *)(v70 + 8);
      if (!v70) {
        break;
      }
      uint64_t v71 = *(void *)(v70 + 24);
      unsigned int v82 = *(unsigned __int8 *)(v71 + 16);
      if (v71) {
        BOOL v83 = v82 >= 0x1C;
      }
      else {
        BOOL v83 = 0;
      }
      if (v83 && v82 - 29 < 0xB) {
        goto LABEL_114;
      }
    }
    if (v75 < 2)
    {
      if (v1428 != v1430) {
        free(v1428);
      }
      goto LABEL_664;
    }
    v1388 = &v1392;
    v1389 = &v1392;
    uint64_t v1390 = 4;
    LODWORD(v1391) = 0;
    v1354[1] = 0;
    v1354[0] = 0;
    unsigned int v1355 = 0;
    v1410 = v1428;
    v1411.i64[0] = v75;
    v1411.i64[1] = (uint64_t)&v1412.i64[1];
    v1412.i64[0] = 0x400000000;
    sub_1CD2213B0((uint64_t)&v1410);
    char v1291 = 0;
    if (!v1414.i8[8])
    {
      LODWORD(v110) = 0;
      int v1311 = v69;
      char v1303 = v76;
LABEL_183:
      int v1288 = v110;
      v1338 = (llvm::Instruction **)v1411.i64[1];
      int v111 = *(llvm::Instruction **)v1411.i64[1];
      uint64_t v112 = *(void *)(*(void *)v1411.i64[1] + 8);
      unint64_t __pa = v1412.u32[0];
      if (v1412.i32[0])
      {
        unint64_t v113 = 0;
        uint64_t v114 = 8 * v1412.u32[0];
        do
        {
          uint64_t v115 = (uint64_t)v1338[v113 / 8];
          unsigned int v116 = *(unsigned __int8 *)(v115 + 16) - 38;
          BOOL v74 = v116 > 0x38;
          uint64_t v117 = (1 << v116) & 0x100260000200001;
          BOOL v118 = v74 || v117 == 0;
          if (!v118
            || *(unsigned char *)(*(void *)v115 + 8) == 12
            || llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)(v115 + 40)) == *(void *)(v115 + 40))
          {
            goto LABEL_444;
          }
          unsigned int v119 = *(unsigned __int8 *)(v115 + 16) - 33;
          BOOL v74 = v119 > 0x33;
          uint64_t v120 = (1 << v119) & 0x8000000000041;
          if (!v74 && v120 != 0)
          {
            if (*(unsigned char *)(*(void *)(v115 - 32) + 16) == 24) {
              goto LABEL_444;
            }
            uint64_t v122 = *(void *)(v115 + 64);
            if (v122)
            {
              if ((*(unsigned char *)(v122 + 15) & 0x10) != 0) {
                goto LABEL_444;
              }
            }
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v115, 28)) {
              goto LABEL_444;
            }
          }
          uint64_t v123 = *(void *)(v115 + 8);
          if (v112)
          {
            if (!v123) {
              goto LABEL_444;
            }
            uint64_t v123 = *(void *)(v123 + 8);
          }
          if (v123) {
            goto LABEL_444;
          }
          v113 += 8;
        }
        while (v114 != v113);
        uint64_t v124 = v1338;
        int v111 = *v1338;
        do
        {
          if ((llvm::Instruction::isSameOperationAs(*v124, v111, 0) & 1) == 0) {
            goto LABEL_444;
          }
          ++v124;
          v114 -= 8;
        }
        while (v114);
      }
      if (!v112) {
        goto LABEL_230;
      }
      if (*(unsigned char *)(*(void *)(*((void *)v111 + 1) + 24) + 16) == 83) {
        uint64_t v125 = *(void *)(*((void *)v111 + 1) + 24);
      }
      else {
        uint64_t v125 = 0;
      }
      uint64_t v126 = *((void *)v111 + 5);
      uint64_t v127 = *(void *)(v126 + 40);
      if (v127 == v126 + 40)
      {
        uint64_t v128 = 0;
      }
      else
      {
        if (v127) {
          uint64_t v128 = v127 - 24;
        }
        else {
          uint64_t v128 = 0;
        }
        if (*(unsigned __int8 *)(v128 + 16) - 29 >= 0xB) {
          uint64_t v128 = 0;
        }
      }
      if (*(unsigned char *)(v128 + 16) == 30)
      {
LABEL_221:
        unint64_t v129 = (uint64_t *)(v128 - 32);
LABEL_222:
        unint64_t v130 = __pa;
LABEL_223:
        uint64_t v131 = *v129;
        if (v130)
        {
LABEL_224:
          uint64_t v132 = 8 * v130;
          uint64_t v133 = v1338;
          do
          {
            unint64_t v134 = *v133;
            uint64_t v135 = *(void *)(*((void *)*v133 + 1) + 24);
            if ((!v125
               || *(void *)(v125 + 40) != v131
               || (llvm::Instruction *)sub_1CBF73380(v125, *((void *)v134 + 5)) != v134)
              && *(void *)(v135 + 40) != *((void *)v134 + 5))
            {
              goto LABEL_444;
            }
            ++v133;
            v132 -= 8;
          }
          while (v132);
LABEL_230:
          int v136 = *((unsigned __int8 *)v111 + 16);
          v1297 = (char *)v111 + 16;
          if (v136 == 61)
          {
            if (!__pa) {
              goto LABEL_302;
            }
            uint64_t v137 = 8 * __pa;
            BOOL v138 = v1338;
            do
            {
              uint64_t v139 = *v138;
              int v140 = *((_DWORD *)*v138 + 5);
              if ((v140 & 0x40000000) != 0) {
                uint64_t v141 = *((void *)v139 - 1);
              }
              else {
                uint64_t v141 = (uint64_t)v139 - 32 * (v140 & 0x7FFFFFF);
              }
              if (*((unsigned char *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v141 + 32)) + 16) == 59) {
                goto LABEL_444;
              }
              ++v138;
              v137 -= 8;
            }
            while (v137);
            int v136 = *v1297;
          }
          if (__pa && v136 == 60)
          {
            uint64_t v142 = 8 * __pa;
            char v143 = v1338;
            do
            {
              int v144 = *v143;
              int v145 = *((_DWORD *)*v143 + 5);
              if ((v145 & 0x40000000) != 0) {
                unint64_t v146 = (llvm::Value **)*((void *)v144 - 1);
              }
              else {
                unint64_t v146 = (llvm::Value **)((char *)v144 - 32 * (v145 & 0x7FFFFFF));
              }
              if (*((unsigned char *)llvm::Value::stripPointerCasts(*v146) + 16) == 59) {
                goto LABEL_444;
              }
              ++v143;
              v142 -= 8;
            }
            while (v142);
            int v136 = *v1297;
          }
LABEL_258:
          if (v136 == 84)
          {
            uint64_t v151 = *((void *)v111 - 4);
            if (!v151
              || *(unsigned char *)(v151 + 16)
              || *(void *)(v151 + 24) != *((void *)v111 + 9)
              || (*(unsigned char *)(v151 + 33) & 0x20) == 0
              || !__pa
              || (*(_DWORD *)(v151 + 36) - 169) < 0xFFFFFFFE)
            {
              goto LABEL_276;
            }
            uint64_t v152 = 8 * __pa;
            BOOL v153 = v1338;
            do
            {
              uint64_t v154 = *v153;
              int v155 = *((_DWORD *)*v153 + 5);
              if ((v155 & 0x40000000) != 0) {
                uint64_t v156 = *((void *)v154 - 1);
              }
              else {
                uint64_t v156 = (uint64_t)v154 - 32 * (v155 & 0x7FFFFFF);
              }
              if (*((unsigned char *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v156 + 32)) + 16) == 59) {
                goto LABEL_444;
              }
              ++v153;
              v152 -= 8;
            }
            while (v152);
            int v136 = *v1297;
          }
          unsigned int v157 = v136 - 33;
          BOOL v74 = v157 > 0x33;
          uint64_t v158 = (1 << v157) & 0x8000000000041;
          if (v74 || v158 == 0) {
            goto LABEL_302;
          }
LABEL_276:
          if (!__pa) {
            goto LABEL_302;
          }
          uint64_t v160 = 8 * __pa;
          uint64_t v161 = 8 * __pa - 8;
          uint64_t v162 = v1338;
          do
          {
            uint64_t v163 = (uint64_t)*v162++;
            unsigned int v164 = *(unsigned __int8 *)(*(void *)(v163 - 32) + 16);
            BOOL v165 = v164 <= 0x14 || v164 == 24;
            char v166 = !v165;
            if (!v165) {
              break;
            }
            uint64_t v167 = v161;
            v161 -= 8;
          }
          while (v167);
          uint64_t v168 = 8 * __pa;
          unint64_t v169 = v1338;
          while (1)
          {
            unsigned int v170 = *(unsigned __int8 *)(*((void *)*v169 - 4) + 16);
            if (v170 < 0x15 || v170 == 24) {
              break;
            }
            ++v169;
            v168 -= 8;
            if (!v168)
            {
              if (v166) {
                goto LABEL_302;
              }
LABEL_296:
              uint64_t v172 = 0;
              uint64_t v173 = v1338;
              do
              {
                if (v172)
                {
                  if (v172 != *((void *)*v173 - 4)) {
                    goto LABEL_444;
                  }
                }
                else
                {
                  uint64_t v172 = *((void *)*v173 - 4);
                }
                ++v173;
                v160 -= 8;
              }
              while (v160);
LABEL_302:
              int v174 = *((_DWORD *)v111 + 5);
              int v175 = (const llvm::Instruction *)(v174 & 0x7FFFFFF);
              if ((v174 & 0x7FFFFFF) != 0)
              {
                uint64_t v176 = 0;
                do
                {
                  int v177 = *((_DWORD *)v111 + 5);
                  uint64_t v178 = (v177 & 0x40000000) != 0
                       ? (llvm::Instruction *)*((void *)v111 - 1)
                       : (llvm::Instruction *)((char *)v111 - 32 * (v177 & 0x7FFFFFF));
                  uint64_t v179 = (unsigned __int8 *)*((void *)v178 + 4 * (void)v176);
                  if (*(unsigned char *)(*(void *)v179 + 8) == 12) {
                    goto LABEL_444;
                  }
                  if (__pa)
                  {
                    uint64_t v180 = 8 * __pa;
                    uint64_t v181 = v1338;
                    while (1)
                    {
                      unint64_t v182 = *v181;
                      int v183 = *((_DWORD *)*v181 + 5);
                      if ((v183 & 0x40000000) != 0) {
                        uint64_t v184 = *((void *)v182 - 1);
                      }
                      else {
                        uint64_t v184 = (uint64_t)v182 - 32 * (v183 & 0x7FFFFFF);
                      }
                      unint64_t v185 = (char *)v111 - 32 * (v177 & 0x7FFFFFF);
                      if ((v177 & 0x40000000) != 0) {
                        unint64_t v185 = (char *)*((void *)v111 - 1);
                      }
                      if (*(void *)(v184 + 32 * (void)v176) != *(void *)&v185[32 * (void)v176]) {
                        break;
                      }
                      ++v181;
                      v180 -= 8;
                      if (!v180) {
                        goto LABEL_317;
                      }
                    }
                    if (v179[16] <= 0x14u && *v1297 == 84)
                    {
                      uint64_t v186 = *((void *)v111 - 4);
                      if (v186)
                      {
                        if (!*(unsigned char *)(v186 + 16)
                          && *(void *)(v186 + 24) == *((void *)v111 + 9)
                          && (*(unsigned char *)(v186 + 33) & 0x20) != 0)
                        {
                          goto LABEL_444;
                        }
                      }
                    }
                    if (!llvm::canReplaceOperandWithVariable(v111, v176)) {
                      goto LABEL_444;
                    }
                    uint64_t v187 = 8 * __pa;
                    uint64_t v188 = v1338;
                    do
                    {
                      *(void *)&long long v1372 = *v188;
                      uint64_t v189 = v1372;
                      uint64_t v190 = sub_1CD4C93F8((uint64_t)v1354, (uint64_t *)&v1372);
                      int v191 = *(_DWORD *)(v189 + 20);
                      if ((v191 & 0x40000000) != 0) {
                        uint64_t v192 = *(void *)(v189 - 8);
                      }
                      else {
                        uint64_t v192 = v189 - 32 * (v191 & 0x7FFFFFF);
                      }
                      uint64_t v193 = *(void *)(v192 + 32 * (void)v176);
                      unint64_t v194 = *((unsigned int *)v190 + 4);
                      if (v194 >= *((unsigned int *)v190 + 5)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(v190[1] + 8 * v194) = v193;
                      ++*((_DWORD *)v190 + 4);
                      ++v188;
                      v187 -= 8;
                    }
                    while (v187);
                  }
LABEL_317:
                  uint64_t v176 = (const llvm::Instruction *)((char *)v176 + 1);
                }
                while (v176 != v175);
              }
              int v195 = v1311;
              char v196 = v1303;
              if (v1412.i32[0])
              {
                uint64_t v197 = (uint64_t *)v1411.i64[1];
                uint64_t v198 = v1411.i64[1] + 8 * v1412.u32[0];
                int v199 = v1389;
                while (1)
                {
                  uint64_t v200 = *v197;
                  uint64_t v201 = HIDWORD(v1390);
                  if (v199 != v1388) {
                    break;
                  }
                  if (HIDWORD(v1390))
                  {
                    uint64_t v202 = 0;
                    uint64_t v203 = 8 * HIDWORD(v1390);
                    uint64_t v204 = v199;
                    while (*v204 != v200)
                    {
                      if (*v204 == -2) {
                        uint64_t v202 = v204;
                      }
                      ++v204;
                      v203 -= 8;
                      if (!v203)
                      {
                        if (!v202) {
                          goto LABEL_344;
                        }
                        *uint64_t v202 = v200;
                        LODWORD(v1391) = v1391 - 1;
                        goto LABEL_368;
                      }
                    }
                    goto LABEL_368;
                  }
LABEL_344:
                  unsigned int v205 = v1390;
                  if (HIDWORD(v1390) >= v1390) {
                    goto LABEL_347;
                  }
                  ++HIDWORD(v1390);
                  v199[v201] = v200;
LABEL_368:
                  int v199 = v1389;
                  if (++v197 == (uint64_t *)v198) {
                    goto LABEL_376;
                  }
                }
                unsigned int v205 = v1390;
LABEL_347:
                if (3 * v205 <= 4 * (HIDWORD(v1390) - (int)v1391))
                {
                  if (v205 >= 0x40) {
                    v205 *= 2;
                  }
                  else {
                    unsigned int v205 = 128;
                  }
                }
                else if (v205 - HIDWORD(v1390) >= v205 >> 3)
                {
                  goto LABEL_349;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1388, v205);
                unsigned int v205 = v1390;
                int v199 = v1389;
LABEL_349:
                unsigned int v206 = v205 - 1;
                unsigned int v207 = (v205 - 1) & ((v200 >> 4) ^ (v200 >> 9));
                uint64_t v208 = &v199[v207];
                uint64_t v209 = *v208;
                if (*v208 == -1)
                {
                  unsigned int v210 = 0;
LABEL_361:
                  if (v210) {
                    int v214 = v210;
                  }
                  else {
                    int v214 = v208;
                  }
                  if (*v214 != v200)
                  {
                    if (*v214 == -2) {
                      LODWORD(v1391) = v1391 - 1;
                    }
                    else {
                      ++HIDWORD(v1390);
                    }
                    void *v214 = v200;
                  }
                }
                else
                {
                  unsigned int v210 = 0;
                  int v211 = 1;
                  while (v209 != v200)
                  {
                    if (v210) {
                      BOOL v212 = 0;
                    }
                    else {
                      BOOL v212 = v209 == -2;
                    }
                    if (v212) {
                      unsigned int v210 = v208;
                    }
                    unsigned int v213 = v207 + v211++;
                    unsigned int v207 = v213 & v206;
                    uint64_t v208 = &v199[v213 & v206];
                    uint64_t v209 = *v208;
                    if (*v208 == -1) {
                      goto LABEL_361;
                    }
                  }
                }
                goto LABEL_368;
              }
LABEL_376:
              LODWORD(v110) = v1288 + 1;
              sub_1CD22131C((uint64_t)&v1410);
              BOOL v215 = this;
              if (v1414.i8[8]) {
                goto LABEL_445;
              }
              goto LABEL_183;
            }
          }
          if ((v166 & 1) == 0) {
            goto LABEL_296;
          }
LABEL_444:
          BOOL v215 = this;
          LODWORD(v110) = v1288;
          int v195 = v1311;
          char v196 = v1303;
          if (!v1288) {
            goto LABEL_650;
          }
LABEL_445:
          if (llvm::IsBlockFollowedByDeoptOrUnreachable(v215, v109))
          {
            if (v196) {
              goto LABEL_447;
            }
            int v1289 = v110;
            char v196 = 0;
LABEL_984:
            int v1290 = 0;
            char v1291 = v196;
            while (1)
            {
              sub_1CD2213B0((uint64_t)&v1410);
              v505 = (char *)v1428;
              uint64_t v506 = *(void *)(*(void *)v1428 + 40);
              if (v506 == *(void *)v1428 + 40)
              {
                uint64_t v508 = 0;
              }
              else
              {
                if (v506) {
                  uint64_t v507 = v506 - 24;
                }
                else {
                  uint64_t v507 = 0;
                }
                if (*(unsigned __int8 *)(v507 + 16) - 29 >= 0xB) {
                  uint64_t v508 = 0;
                }
                else {
                  uint64_t v508 = v507;
                }
              }
              if (*(unsigned char *)(v508 + 16) == 30)
              {
LABEL_994:
                v509 = (void *)(v508 - 32);
              }
              else
              {
                switch(*(unsigned char *)(v508 + 16))
                {
                  case ' ':
                  case '&':
                    int v639 = *(_DWORD *)(v508 + 20);
                    if ((v639 & 0x40000000) == 0) {
                      goto LABEL_1187;
                    }
                    uint64_t v640 = *(void *)(v508 - 8);
                    goto LABEL_1188;
                  case '!':
                    v509 = (void *)(v508 - 96);
                    break;
                  case '""':
                  case '#':
                    goto LABEL_2521;
                  case '$':
                    if ((*(_WORD *)(v508 + 18) & 1) == 0)
                    {
                      v1299 = 0;
                      goto LABEL_996;
                    }
                    int v639 = *(_DWORD *)(v508 + 20);
LABEL_1187:
                    uint64_t v640 = v508 - 32 * (v639 & 0x7FFFFFF);
LABEL_1188:
                    v509 = (void *)(v640 + 32);
                    break;
                  case '%':
                    goto LABEL_994;
                  case '\'':
                    v509 = (void *)(v508 - 32 * *(unsigned int *)(v508 + 80) - 64);
                    break;
                  default:
                    int v637 = *(_DWORD *)(v508 + 20);
                    if ((v637 & 0x40000000) != 0) {
                      uint64_t v638 = *(void *)(v508 - 8);
                    }
                    else {
                      uint64_t v638 = v508 - 32 * (v637 & 0x7FFFFFF);
                    }
                    v509 = (void *)(v638 + 32);
                    break;
                }
              }
              v1299 = (void *)*v509;
LABEL_996:
              v510 = v1358;
              v1356 = v1358;
              uint64_t v1357 = 0x400000000;
              if (v1429[0])
              {
                v511 = (char *)v1428 + 8 * v1429[0];
                do
                {
                  uint64_t v512 = *(void *)v505;
                  uint64_t v513 = *(void *)(*(void *)v505 + 40);
                  if (v513 == *(void *)v505 + 40)
                  {
                    uint64_t v515 = 0;
                  }
                  else
                  {
                    if (v513) {
                      uint64_t v514 = v513 - 24;
                    }
                    else {
                      uint64_t v514 = 0;
                    }
                    if (*(unsigned __int8 *)(v514 + 16) - 29 >= 0xB) {
                      uint64_t v515 = 0;
                    }
                    else {
                      uint64_t v515 = v514;
                    }
                  }
                  do
                  {
                    if (*(void *)(*(void *)(v515 + 40) + 48) == v515 + 24)
                    {
                      uint64_t v515 = 0;
                    }
                    else
                    {
                      uint64_t v516 = *(void *)(v515 + 24);
                      if (v516) {
                        uint64_t v515 = v516 - 24;
                      }
                      else {
                        uint64_t v515 = 0;
                      }
                    }
                    if (!sub_1CBF63B28(v515)) {
                      break;
                    }
                    uint64_t v517 = *(void *)(v512 + 48);
                    uint64_t v518 = v517 ? v517 - 24 : 0;
                  }
                  while (v515 != v518);
                  if (!sub_1CBF63B28(v515))
                  {
                    if (v1357 >= (unint64_t)HIDWORD(v1357)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v1356 + v1357) = v515;
                    LODWORD(v1357) = v1357 + 1;
                  }
                  v505 += 8;
                }
                while (v505 != v511);
                v510 = v1356;
              }
              uint64_t v519 = *(void *)v510;
              uint64_t v520 = *(void *)(*(void *)v510 + 8);
              if (v520)
              {
                uint64_t v521 = *(void *)(v520 + 24);
                if (*(unsigned char *)(v521 + 16) != 83) {
                  uint64_t v521 = 0;
                }
                if (v1357)
                {
                  uint64_t v522 = 0;
                  while (*(void *)(*(void *)(*(void *)&v510[v522] + 8) + 24) == v521)
                  {
                    v522 += 8;
                    if (8 * v1357 == v522) {
                      goto LABEL_1029;
                    }
                  }
                  char v636 = 0;
                  goto LABEL_1169;
                }
              }
LABEL_1029:
              v1431 = (void **)v1433;
              uint64_t v1432 = 0x400000000;
              int v523 = *(_DWORD *)(v519 + 20);
              v524 = (void *)(v523 & 0x7FFFFFF);
              if ((v523 & 0x7FFFFFF) != 0) {
                break;
              }
LABEL_1139:
              v623 = (char *)(v1299 + 5);
              for (uint64_t i = (char *)v1299[6]; i != v623; uint64_t i = (char *)*((void *)i + 1))
              {
                v625 = i - 24;
                if (!i) {
                  v625 = 0;
                }
                if (v625[16] != 83)
                {
                  unsigned int v626 = *(i - 8) - 38;
                  BOOL v74 = v626 > 0x38;
                  uint64_t v627 = (1 << v626) & 0x100060000000001;
                  if (v74 || v627 == 0) {
                    v623 = i;
                  }
                  else {
                    v623 = (char *)*((void *)i + 1);
                  }
                  break;
                }
              }
              if (v623) {
                v629 = (llvm::Instruction *)(v623 - 24);
              }
              else {
                v629 = 0;
              }
              llvm::Instruction::moveBefore((llvm::Instruction *)v519, v629);
              if (v1357)
              {
                v630 = (uint64_t *)v1356;
                uint64_t v631 = 8 * v1357;
                do
                {
                  uint64_t v632 = *v630;
                  if (*v630 != v519)
                  {
                    llvm::Instruction::applyMergedLocation((llvm::Instruction *)v519, *(const llvm::DILocation **)(v519 + 48), *(const llvm::DILocation **)(v632 + 48));
                    long long v1372 = xmmword_1CFB32AC0;
                    long long v1373 = unk_1CFB32AD0;
                    long long v1374 = xmmword_1CFB32AE0;
                    llvm::combineMetadata((llvm::Instruction *)v519, (unsigned char *)v632, (unsigned int *)&v1372, 12, 1);
                    llvm::Instruction::andIRFlags(v519, v632);
                  }
                  ++v630;
                  v631 -= 8;
                }
                while (v631);
              }
              uint64_t v633 = *(void *)(v519 + 8);
              if (v633)
              {
                llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(v633 + 24), (llvm::Value *)v519, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              if (v1357)
              {
                v634 = v1356;
                uint64_t v635 = 8 * v1357;
                do
                {
                  if (*v634 != v519) {
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
                  ++v634;
                  v635 -= 8;
                }
                while (v635);
              }
              if (v1431 != v1433) {
                free(v1431);
              }
              char v636 = 1;
              v510 = v1356;
LABEL_1169:
              if (v510 != v1358) {
                free(v510);
              }
              if (v636)
              {
                char v1291 = 1;
                if (++v1290 != v1289) {
                  continue;
                }
              }
              goto LABEL_651;
            }
            unsigned int v525 = 0;
            v526 = 0;
            int __src = v524;
            uint64_t v1293 = v519;
            while (1)
            {
              int v527 = v1357;
              int v528 = *(_DWORD *)(v519 + 20);
              uint64_t v529 = 32 * (void)v526;
              if (!v1357)
              {
                if ((v528 & 0x40000000) == 0) {
                  goto LABEL_1044;
                }
LABEL_1042:
                uint64_t v538 = *(void *)(v519 - 8);
LABEL_1045:
                v539 = *(llvm::Value **)(v538 + 32 * (void)v526);
                if (v525 >= HIDWORD(v1432)) {
LABEL_1102:
                }
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                goto LABEL_1046;
              }
              v530 = (char *)v1356;
              int v531 = v528 & 0x40000000;
              uint64_t v532 = 8 * v1357;
              while (1)
              {
                uint64_t v533 = *(void *)v530;
                int v534 = *(_DWORD *)(*(void *)v530 + 20);
                uint64_t v535 = (v534 & 0x40000000) != 0 ? *(void *)(v533 - 8) : v533 - 32 * (v534 & 0x7FFFFFF);
                uint64_t v536 = *(void *)(v535 + 32 * (void)v526);
                uint64_t v537 = v531
                     ? *(void *)(*(void *)(v519 - 8) + 32 * (void)v526)
                     : *(void *)(v519 + 32 * (void)v526 - 32 * (v528 & 0x7FFFFFF));
                if (v536 != v537) {
                  break;
                }
                v530 += 8;
                v532 -= 8;
                if (!v532)
                {
                  if (v531) {
                    goto LABEL_1042;
                  }
LABEL_1044:
                  uint64_t v538 = v519 - 32 * (v528 & 0x7FFFFFF);
                  goto LABEL_1045;
                }
              }
              v540 = *(uint64_t ***)v537;
              v1305 = v526;
              if ((*(unsigned char *)(v537 + 23) & 0x10) != 0) {
                break;
              }
              uint64_t v550 = 0;
              v551 = &byte_1CFBCE98E;
LABEL_1057:
              LOWORD(v1374) = 773;
              *(void *)&long long v1372 = v551;
              *((void *)&v1372 + 1) = v550;
              *(void *)&long long v1373 = ".sink";
              v553 = (uint64_t *)v1299[6];
              v554 = operator new(0x48uLL);
              v555 = v554;
              v554[1] = v540;
              v539 = (llvm::Value *)(v554 + 1);
              void *v554 = 0;
              v554[2] = 0;
              v554[3] = 0x4000000000000053;
              *((_OWORD *)v554 + 2) = 0u;
              v556 = (char *)(v554 + 4);
              *((_OWORD *)v554 + 3) = 0u;
              *((_DWORD *)v554 + 16) = 0;
              if (v553)
              {
                uint64_t v591 = v553[2];
                v554[6] = v591;
                *(_WORD *)(v591 + 18) &= ~0x8000u;
                if ((*((unsigned char *)v554 + 31) & 0x10) != 0)
                {
                  uint64_t v601 = *(void *)(v591 + 56);
                  if (v601)
                  {
                    v602 = *(llvm::ValueSymbolTable **)(v601 + 104);
                    if (v602) {
                      llvm::ValueSymbolTable::reinsertValue(v602, v539);
                    }
                  }
                }
                uint64_t v592 = *v553;
                v555[4] = *v553;
                v555[5] = v553;
                *(void *)(v592 + 8) = v556;
                uint64_t *v553 = (uint64_t)v556;
              }
              *((_DWORD *)v555 + 17) = v527;
              llvm::Value::setNameImpl(v539, (const char **)&v1372);
              if (!*((unsigned char *)v555 + 24))
              {
                if ((*((unsigned char *)v555 + 31) & 0x10) == 0) {
                  goto LABEL_1124;
                }
                uint64_t v593 = ***(void ***)v539;
                uint64_t v594 = *(void *)(v593 + 152);
                uint64_t v595 = *(unsigned int *)(v593 + 168);
                if (!v595) {
                  goto LABEL_1116;
                }
                LODWORD(v596) = (v595 - 1) & ((v539 >> 4) ^ (v539 >> 9));
                v597 = (llvm::Value **)(v594 + 16 * v596);
                v598 = *v597;
                if (*v597 != v539)
                {
                  int v599 = 1;
                  while (v598 != (llvm::Value *)-4096)
                  {
                    int v600 = v596 + v599++;
                    uint64_t v596 = v600 & (v595 - 1);
                    v598 = *(llvm::Value **)(v594 + 16 * v596);
                    if (v598 == v539)
                    {
                      v597 = (llvm::Value **)(v594 + 16 * v596);
                      goto LABEL_1117;
                    }
                  }
LABEL_1116:
                  v597 = (llvm::Value **)(v594 + 16 * v595);
                }
LABEL_1117:
                v603 = v597[1];
                unint64_t v606 = *(void *)v603;
                v604 = (char *)v603 + 16;
                unint64_t v605 = v606;
                if (v606 >= 5
                  && (*(_DWORD *)v604 == *(_DWORD *)"llvm." ? (BOOL v607 = v604[4] == aLlvm_1[4]) : (BOOL v607 = 0), v607))
                {
                  *((_DWORD *)v555 + 10) |= 0x2000u;
                  int v608 = llvm::Function::lookupIntrinsicID(v604, v605);
                }
                else
                {
LABEL_1124:
                  int v608 = 0;
                  *((_DWORD *)v555 + 10) &= ~0x2000u;
                }
                *((_DWORD *)v555 + 11) = v608;
              }
              uint64_t v557 = *((unsigned int *)v555 + 17);
              v558 = operator new(40 * v557);
              void *v555 = v558;
              if (v557)
              {
                v559 = &v558[4 * v557];
                do
                {
                  void *v558 = 0;
                  v558[1] = 0;
                  v558[2] = 0;
                  v558[3] = v539;
                  v558 += 4;
                }
                while (v558 != v559);
              }
              if (v1357)
              {
                v560 = (char *)v1356;
                v561 = (char *)v1356 + 8 * v1357;
                __pb = v539;
                v1312 = v561;
                do
                {
                  uint64_t v562 = *(void *)v560;
                  int v563 = *(_DWORD *)(*(void *)v560 + 20);
                  if ((v563 & 0x40000000) != 0) {
                    uint64_t v564 = *(void *)(v562 - 8);
                  }
                  else {
                    uint64_t v564 = v562 - 32 * (v563 & 0x7FFFFFF);
                  }
                  uint64_t v565 = *(void *)(v564 + v529);
                  uint64_t v566 = *(void *)(v562 + 40);
                  int v567 = *((_DWORD *)v555 + 7);
                  uint64_t v568 = v567 & 0x7FFFFFF;
                  if ((v567 & 0x7FFFFFF) == *((_DWORD *)v555 + 17))
                  {
                    unsigned int v581 = v568 + (v568 >> 1);
                    if (v581 <= 2) {
                      uint64_t v582 = 2;
                    }
                    else {
                      uint64_t v582 = v581;
                    }
                    *((_DWORD *)v555 + 17) = v582;
                    if ((v567 & 0x40000000) != 0) {
                      v583 = (uint64_t *)*v555;
                    }
                    else {
                      v583 = (uint64_t *)((char *)v539 - 32 * v568);
                    }
                    v1339 = v583;
                    v584 = operator new(40 * v582);
                    void *v555 = v584;
                    v585 = v584;
                    do
                    {
                      void *v585 = 0;
                      v585[1] = 0;
                      v585[2] = 0;
                      v585[3] = v539;
                      v585 += 4;
                    }
                    while (v585 != &v584[4 * v582]);
                    int v586 = *((_DWORD *)v555 + 7);
                    if ((v586 & 0x40000000) != 0) {
                      uint64_t v587 = (uint64_t)v584;
                    }
                    else {
                      uint64_t v587 = (uint64_t)v539 - 32 * (v586 & 0x7FFFFFF);
                    }
                    sub_1CC5E4108((uint64_t)&v1372, v1339, &v1339[4 * v568], v587);
                    if (v568)
                    {
                      memmove((void *)(v587 + 32 * v582), &v1339[4 * v568], 8 * v568);
                      uint64_t v588 = 4 * v568;
                      do
                      {
                        v589 = &v1339[v588];
                        if (v1339[v588 - 4])
                        {
                          *(void *)*(v589 - 2) = *(v589 - 3);
                          uint64_t v590 = *(v589 - 3);
                          if (v590) {
                            *(void *)(v590 + 16) = *(v589 - 2);
                          }
                        }
                        v588 -= 4;
                      }
                      while (v588 * 8);
                    }
                    operator delete(v1339);
                    int v567 = *((_DWORD *)v555 + 7);
                    v539 = __pb;
                    v561 = v1312;
                  }
                  uint64_t v569 = (v567 + 1) & 0x7FFFFFF;
                  *((_DWORD *)v555 + 7) = v567 & 0xF8000000 | (v567 + 1) & 0x7FFFFFF;
                  if ((v567 & 0x40000000) != 0) {
                    v570 = (char *)*v555;
                  }
                  else {
                    v570 = (char *)v539 - 32 * v569;
                  }
                  uint64_t v571 = (v569 - 1);
                  v572 = &v570[32 * v571];
                  if (*(void *)v572)
                  {
                    **((void **)v572 + 2) = *((void *)v572 + 1);
                    uint64_t v580 = *((void *)v572 + 1);
                    if (v580) {
                      *(void *)(v580 + 16) = *((void *)v572 + 2);
                    }
                  }
                  *(void *)v572 = v565;
                  if (v565)
                  {
                    uint64_t v575 = *(void *)(v565 + 8);
                    v574 = (char **)(v565 + 8);
                    uint64_t v573 = v575;
                    v576 = &v570[32 * v571];
                    *((void *)v576 + 1) = v575;
                    if (v575) {
                      *(void *)(v573 + 16) = v576 + 8;
                    }
                    *((void *)v576 + 2) = v574;
                    *v574 = v572;
                  }
                  int v577 = *((_DWORD *)v555 + 7);
                  uint64_t v578 = v577 & 0x7FFFFFF;
                  if ((v577 & 0x40000000) != 0) {
                    v579 = (char *)*v555;
                  }
                  else {
                    v579 = (char *)v539 - 32 * v578;
                  }
                  *(void *)&v579[32 * *((unsigned int *)v555 + 17) + 8 * (v578 - 1)] = v566;
                  v560 += 8;
                }
                while (v560 != v561);
              }
              unsigned int v525 = v1432;
              v524 = __src;
              uint64_t v519 = v1293;
              v526 = v1305;
              if (v1432 >= HIDWORD(v1432)) {
                goto LABEL_1102;
              }
LABEL_1046:
              v1431[v525] = v539;
              unsigned int v525 = v1432 + 1;
              LODWORD(v1432) = v1432 + 1;
              v526 = (char *)v526 + 1;
              if (v526 == v524)
              {
                int v609 = *(_DWORD *)(v519 + 20);
                uint64_t v610 = v609 & 0x7FFFFFF;
                if ((v609 & 0x7FFFFFF) != 0)
                {
                  uint64_t v611 = 0;
                  unint64_t v612 = 0;
                  uint64_t v613 = 8 * v610;
                  do
                  {
                    int v614 = *(_DWORD *)(v519 + 20);
                    if ((v614 & 0x40000000) != 0) {
                      uint64_t v615 = *(void *)(v519 - 8);
                    }
                    else {
                      uint64_t v615 = v519 - 32 * (v614 & 0x7FFFFFF);
                    }
                    uint64_t v616 = v615 + v611;
                    v617 = v1431[v612 / 8];
                    if (*(void *)(v615 + v611))
                    {
                      **(void **)(v616 + 16) = *(void *)(v616 + 8);
                      uint64_t v618 = *(void *)(v616 + 8);
                      if (v618) {
                        *(void *)(v618 + 16) = *(void *)(v616 + 16);
                      }
                    }
                    *(void *)uint64_t v616 = v617;
                    if (v617)
                    {
                      uint64_t v621 = v617[1];
                      v619 = v617 + 1;
                      uint64_t v620 = v621;
                      uint64_t v622 = v615 + v611;
                      *(void *)(v622 + 8) = v621;
                      if (v621) {
                        *(void *)(v620 + 16) = v622 + 8;
                      }
                      *(void *)(v622 + 16) = v619;
                      void *v619 = v616;
                    }
                    v612 += 8;
                    v611 += 32;
                  }
                  while (v613 != v612);
                }
                goto LABEL_1139;
              }
            }
            uint64_t v541 = **v540;
            uint64_t v542 = *(void *)(v541 + 152);
            uint64_t v543 = *(unsigned int *)(v541 + 168);
            if (v543)
            {
              LODWORD(v544) = (v543 - 1) & ((v537 >> 4) ^ (v537 >> 9));
              v545 = (uint64_t *)(v542 + 16 * v544);
              uint64_t v546 = *v545;
              if (*v545 == v537)
              {
LABEL_1056:
                v549 = (void *)v545[1];
                uint64_t v552 = *v549;
                v551 = (char *)(v549 + 2);
                uint64_t v550 = v552;
                goto LABEL_1057;
              }
              int v547 = 1;
              while (v546 != -4096)
              {
                int v548 = v544 + v547++;
                uint64_t v544 = v548 & (v543 - 1);
                uint64_t v546 = *(void *)(v542 + 16 * v544);
                if (v546 == v537)
                {
                  v545 = (uint64_t *)(v542 + 16 * v544);
                  goto LABEL_1056;
                }
              }
            }
            v545 = (uint64_t *)(v542 + 16 * v543);
            goto LABEL_1056;
          }
          sub_1CD2213B0((uint64_t)&v1410);
          uint64_t v247 = 0;
          *(void *)&long long v1372 = &v1374;
          *((void *)&v1372 + 1) = &v1374;
          *(void *)&long long v1373 = 4;
          DWORD2(v1373) = 0;
          while (1)
          {
            if (v1412.i32[0])
            {
              unsigned int v248 = 0;
              uint64_t v249 = (void **)v1411.i64[1];
              uint64_t v250 = v1411.i64[1] + 8 * v1412.u32[0];
              do
              {
                v1356 = *v249;
                uint64_t v251 = sub_1CD4C93F8((uint64_t)v1354, (uint64_t *)&v1356);
                uint64_t v252 = *((unsigned int *)v251 + 4);
                if (v252)
                {
                  unint64_t v253 = (uint64_t *)v251[1];
                  unint64_t v254 = &v253[v252];
                  int v255 = v1390 - 1;
                  if (v1389 == v1388) {
                    unsigned int v256 = HIDWORD(v1390);
                  }
                  else {
                    unsigned int v256 = v1390;
                  }
                  uint64_t v257 = (char *)v1389 + 8 * v256;
                  uint64_t v258 = (char *)v1389;
                  do
                  {
                    uint64_t v259 = *v253;
                    if (v258 == v1388)
                    {
                      if (HIDWORD(v1390))
                      {
                        uint64_t v260 = 0;
                        while (*(void *)((char *)v1388 + v260) != v259)
                        {
                          v260 += 8;
                          if (8 * HIDWORD(v1390) == v260)
                          {
                            int v261 = HIDWORD(v1390);
                            goto LABEL_486;
                          }
                        }
                        uint64_t v270 = (char *)v1388 + v260;
                        int v261 = HIDWORD(v1390);
                        uint64_t v258 = (char *)v1388;
                      }
                      else
                      {
                        int v261 = 0;
LABEL_486:
                        uint64_t v258 = (char *)v1388;
                        uint64_t v270 = (char *)v1388 + 8 * HIDWORD(v1390);
                      }
                    }
                    else
                    {
                      unsigned int v262 = v255 & ((v259 >> 4) ^ (v259 >> 9));
                      uint64_t v263 = (char *)v1389 + 8 * v262;
                      uint64_t v264 = *(void *)v263;
                      if (*(void *)v263 == -1)
                      {
                        unint64_t v265 = 0;
LABEL_488:
                        if (v265) {
                          uint64_t v263 = v265;
                        }
                        uint64_t v269 = *(void *)v263;
                      }
                      else
                      {
                        unint64_t v265 = 0;
                        int v266 = 1;
                        while (v264 != v259)
                        {
                          if (v265) {
                            BOOL v267 = 0;
                          }
                          else {
                            BOOL v267 = v264 == -2;
                          }
                          if (v267) {
                            unint64_t v265 = v263;
                          }
                          unsigned int v268 = v262 + v266++;
                          unsigned int v262 = v268 & v255;
                          uint64_t v263 = (char *)v1389 + 8 * (v268 & v255);
                          uint64_t v264 = *(void *)v263;
                          if (*(void *)v263 == -1) {
                            goto LABEL_488;
                          }
                        }
                        uint64_t v269 = *v253;
                      }
                      if (v269 == v259) {
                        uint64_t v270 = v263;
                      }
                      else {
                        uint64_t v270 = v257;
                      }
                      int v261 = HIDWORD(v1390);
                      uint64_t v258 = (char *)v1389;
                    }
                    if (v258 != v1388) {
                      int v261 = v1390;
                    }
                    if (v270 == &v258[8 * v261]) {
                      ++v248;
                    }
                    ++v253;
                  }
                  while (v253 != v254);
                }
                ++v249;
              }
              while (v249 != (void **)v250);
            }
            else
            {
              unsigned int v248 = 0;
            }
            if (v248 % v1429[0]) {
              unsigned int v271 = v248 / v1429[0] + 1;
            }
            else {
              unsigned int v271 = v248 / v1429[0];
            }
            if (v271 > 1)
            {
              if (v247)
              {
                llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v1388, (const llvm::SmallPtrSetImplBase *)&v1372);
                sub_1CD2214C8((uint64_t)&v1410);
                uint64_t v110 = v247;
                do
                {
                  uint64_t v292 = v1412.u32[0];
                  if (v1412.i32[0])
                  {
                    uint64_t v293 = (uint64_t *)v1411.i64[1];
                    uint64_t v294 = v1411.i64[1] + 8 * v1412.u32[0];
                    int v295 = DWORD2(v1373);
                    do
                    {
                      uint64_t v296 = *v293;
                      uint64_t v297 = v1372;
                      if (*((void *)&v1372 + 1) == (void)v1372)
                      {
                        unsigned int v298 = DWORD1(v1373);
                        unint64_t v299 = (void *)(*((void *)&v1372 + 1) + 8 * DWORD1(v1373));
                        if (DWORD1(v1373))
                        {
                          uint64_t v300 = 0;
                          while (*(void *)(*((void *)&v1372 + 1) + v300) != v296)
                          {
                            v300 += 8;
                            if (8 * DWORD1(v1373) == v300) {
                              goto LABEL_578;
                            }
                          }
                          unint64_t v299 = (void *)(*((void *)&v1372 + 1) + v300);
                        }
LABEL_578:
                        uint64_t v297 = *((void *)&v1372 + 1);
                      }
                      else
                      {
                        int v301 = v1373 - 1;
                        unsigned int v302 = (v1373 - 1) & ((v296 >> 4) ^ (v296 >> 9));
                        unint64_t v299 = (void *)(*((void *)&v1372 + 1) + 8 * v302);
                        uint64_t v303 = *v299;
                        if (*v299 == -1)
                        {
                          uint64_t v304 = 0;
LABEL_586:
                          if (v304) {
                            unint64_t v299 = v304;
                          }
                          unsigned int v298 = DWORD1(v1373);
                          if (*v299 != v296) {
                            unint64_t v299 = (void *)(*((void *)&v1372 + 1) + 8 * v1373);
                          }
                        }
                        else
                        {
                          uint64_t v304 = 0;
                          int v305 = 1;
                          while (v303 != v296)
                          {
                            if (v304) {
                              BOOL v306 = 0;
                            }
                            else {
                              BOOL v306 = v303 == -2;
                            }
                            if (v306) {
                              uint64_t v304 = v299;
                            }
                            unsigned int v307 = v302 + v305++;
                            unsigned int v302 = v307 & v301;
                            unint64_t v299 = (void *)(*((void *)&v1372 + 1) + 8 * (v307 & v301));
                            uint64_t v303 = *v299;
                            if (*v299 == -1) {
                              goto LABEL_586;
                            }
                          }
                          unsigned int v298 = DWORD1(v1373);
                        }
                      }
                      unsigned int v308 = v1373;
                      if (*((void *)&v1372 + 1) == v297) {
                        unsigned int v308 = v298;
                      }
                      if (v299 != (void *)(*((void *)&v1372 + 1) + 8 * v308))
                      {
                        *unint64_t v299 = -2;
                        DWORD2(v1373) = ++v295;
                      }
                      ++v293;
                    }
                    while (v293 != (uint64_t *)v294);
                    unsigned int v309 = 0;
                    unint64_t v310 = (void **)v1411.i64[1];
                    uint64_t v311 = v1411.i64[1] + 8 * v292;
                    do
                    {
                      v1356 = *v310;
                      long long v312 = sub_1CD4C93F8((uint64_t)v1354, (uint64_t *)&v1356);
                      uint64_t v313 = *((unsigned int *)v312 + 4);
                      if (v313)
                      {
                        int v314 = (uint64_t *)v312[1];
                        uint64_t v315 = &v314[v313];
                        int v316 = v1390 - 1;
                        if (v1389 == v1388) {
                          unsigned int v317 = HIDWORD(v1390);
                        }
                        else {
                          unsigned int v317 = v1390;
                        }
                        uint64_t v318 = (char *)v1389 + 8 * v317;
                        uint64_t v319 = (char *)v1389;
                        do
                        {
                          uint64_t v320 = *v314;
                          if (v319 == v1388)
                          {
                            if (HIDWORD(v1390))
                            {
                              uint64_t v321 = 0;
                              while (*(void *)((char *)v1388 + v321) != v320)
                              {
                                v321 += 8;
                                if (8 * HIDWORD(v1390) == v321)
                                {
                                  int v322 = HIDWORD(v1390);
                                  goto LABEL_616;
                                }
                              }
                              int v331 = (char *)v1388 + v321;
                              int v322 = HIDWORD(v1390);
                              uint64_t v319 = (char *)v1388;
                            }
                            else
                            {
                              int v322 = 0;
LABEL_616:
                              uint64_t v319 = (char *)v1388;
                              int v331 = (char *)v1388 + 8 * HIDWORD(v1390);
                            }
                          }
                          else
                          {
                            unsigned int v323 = v316 & ((v320 >> 4) ^ (v320 >> 9));
                            unsigned int v324 = (char *)v1389 + 8 * v323;
                            uint64_t v325 = *(void *)v324;
                            if (*(void *)v324 == -1)
                            {
                              uint64_t v326 = 0;
LABEL_618:
                              if (v326) {
                                unsigned int v324 = v326;
                              }
                              uint64_t v330 = *(void *)v324;
                            }
                            else
                            {
                              uint64_t v326 = 0;
                              int v327 = 1;
                              while (v325 != v320)
                              {
                                if (v326) {
                                  BOOL v328 = 0;
                                }
                                else {
                                  BOOL v328 = v325 == -2;
                                }
                                if (v328) {
                                  uint64_t v326 = v324;
                                }
                                unsigned int v329 = v323 + v327++;
                                unsigned int v323 = v329 & v316;
                                unsigned int v324 = (char *)v1389 + 8 * (v329 & v316);
                                uint64_t v325 = *(void *)v324;
                                if (*(void *)v324 == -1) {
                                  goto LABEL_618;
                                }
                              }
                              uint64_t v330 = *v314;
                            }
                            if (v330 == v320) {
                              int v331 = v324;
                            }
                            else {
                              int v331 = v318;
                            }
                            int v322 = HIDWORD(v1390);
                            uint64_t v319 = (char *)v1389;
                          }
                          if (v319 != v1388) {
                            int v322 = v1390;
                          }
                          if (v331 == &v319[8 * v322]) {
                            ++v309;
                          }
                          ++v314;
                        }
                        while (v314 != v315);
                      }
                      ++v310;
                    }
                    while (v310 != (void **)v311);
                  }
                  else
                  {
                    unsigned int v309 = 0;
                  }
                  uint64_t v332 = v110;
                  if (v309 % v1429[0]) {
                    unsigned int v333 = v309 / v1429[0] + 1;
                  }
                  else {
                    unsigned int v333 = v309 / v1429[0];
                  }
                  if (v333 >= 2)
                  {
                    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v1388, (const llvm::SmallPtrSetImplBase *)&v1372);
                    uint64_t v332 = (v247 - 1);
                  }
                  sub_1CD2214C8((uint64_t)&v1410);
                  BOOL v74 = (int)v247 <= 1;
                  LODWORD(v247) = v247 - 1;
                  BOOL v215 = this;
                  uint64_t v110 = v332;
                }
                while (!v74);
LABEL_640:
                int v334 = v110;
                BOOL v335 = v110 != 0;
              }
              else
              {
                int v334 = v110;
                BOOL v335 = 0;
                BOOL v215 = this;
              }
              if (*((void *)&v1372 + 1) != (void)v1372) {
                free(*((void **)&v1372 + 1));
              }
              if (!v335) {
                goto LABEL_650;
              }
              if ((v196 & 1) == 0)
              {
                char v196 = 0;
                LODWORD(v110) = v334;
                goto LABEL_983;
              }
              sub_1CD2213B0((uint64_t)&v1410);
              if (v334 < 1)
              {
LABEL_650:
                char v1291 = 0;
                goto LABEL_651;
              }
              int v336 = v334;
              while (llvm::isSafeToSpeculativelyExecute(*(void *)v1411.i64[1], 0, 0, 0))
              {
                sub_1CD22131C((uint64_t)&v1410);
                char v1291 = 0;
                if (!--v336) {
                  goto LABEL_651;
                }
              }
              LODWORD(v110) = v334;
LABEL_447:
              if (!sub_1CD1271B8((uint64_t **)v215, (int)v1428, v1429[0], ".sink.split", v195, 0, 0, 0, 0)) {
                goto LABEL_650;
              }
LABEL_983:
              char v1291 = v196;
              int v1289 = v110;
              if (v110) {
                goto LABEL_984;
              }
              goto LABEL_651;
            }
            if (v1412.i32[0]) {
              break;
            }
LABEL_549:
            sub_1CD22131C((uint64_t)&v1410);
            uint64_t v247 = (v247 + 1);
            if (v247 == v110)
            {
              BOOL v215 = this;
              goto LABEL_640;
            }
          }
          uint64_t v272 = (uint64_t *)v1411.i64[1];
          uint64_t v273 = v1411.i64[1] + 8 * v1412.u32[0];
          uint64_t v274 = (void *)*((void *)&v1372 + 1);
          while (1)
          {
            uint64_t v275 = *v272;
            uint64_t v276 = DWORD1(v1373);
            if (v274 != (void *)v1372) {
              break;
            }
            if (DWORD1(v1373))
            {
              char v277 = 0;
              uint64_t v278 = 8 * DWORD1(v1373);
              uint64_t v279 = v274;
              while (*v279 != v275)
              {
                if (*v279 == -2) {
                  char v277 = v279;
                }
                ++v279;
                v278 -= 8;
                if (!v278)
                {
                  if (!v277) {
                    goto LABEL_517;
                  }
                  *char v277 = v275;
                  --DWORD2(v1373);
                  goto LABEL_541;
                }
              }
              goto LABEL_541;
            }
LABEL_517:
            unsigned int v280 = v1373;
            if (DWORD1(v1373) >= v1373) {
              goto LABEL_520;
            }
            ++DWORD1(v1373);
            v274[v276] = v275;
LABEL_541:
            uint64_t v274 = (void *)*((void *)&v1372 + 1);
            if (++v272 == (uint64_t *)v273) {
              goto LABEL_549;
            }
          }
          unsigned int v280 = v1373;
LABEL_520:
          if (3 * v280 <= 4 * (DWORD1(v1373) - DWORD2(v1373)))
          {
            if (v280 >= 0x40) {
              v280 *= 2;
            }
            else {
              unsigned int v280 = 128;
            }
          }
          else if (v280 - DWORD1(v1373) >= v280 >> 3)
          {
            goto LABEL_522;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1372, v280);
          unsigned int v280 = v1373;
          uint64_t v274 = (void *)*((void *)&v1372 + 1);
LABEL_522:
          unsigned int v281 = v280 - 1;
          unsigned int v282 = (v280 - 1) & ((v275 >> 4) ^ (v275 >> 9));
          uint64_t v283 = &v274[v282];
          uint64_t v284 = *v283;
          if (*v283 == -1)
          {
            uint64_t v285 = 0;
LABEL_534:
            if (v285) {
              uint64_t v289 = v285;
            }
            else {
              uint64_t v289 = v283;
            }
            if (*v289 != v275)
            {
              if (*v289 == -2) {
                --DWORD2(v1373);
              }
              else {
                ++DWORD1(v1373);
              }
              *uint64_t v289 = v275;
            }
          }
          else
          {
            uint64_t v285 = 0;
            int v286 = 1;
            while (v284 != v275)
            {
              if (v285) {
                BOOL v287 = 0;
              }
              else {
                BOOL v287 = v284 == -2;
              }
              if (v287) {
                uint64_t v285 = v283;
              }
              unsigned int v288 = v282 + v286++;
              unsigned int v282 = v288 & v281;
              uint64_t v283 = &v274[v288 & v281];
              uint64_t v284 = *v283;
              if (*v283 == -1) {
                goto LABEL_534;
              }
            }
          }
          goto LABEL_541;
        }
      }
      else
      {
        switch(*(unsigned char *)(v128 + 16))
        {
          case ' ':
          case '&':
            int v149 = *(_DWORD *)(v128 + 20);
            if ((v149 & 0x40000000) == 0) {
              goto LABEL_381;
            }
            uint64_t v150 = *(void *)(v128 - 8);
            goto LABEL_382;
          case '!':
            unint64_t v129 = (uint64_t *)(v128 - 96);
            goto LABEL_222;
          case '""':
          case '#':
LABEL_2521:
            __break(1u);
            JUMPOUT(0x1CD218C9CLL);
          case '$':
            if (*(_WORD *)(v128 + 18))
            {
              int v149 = *(_DWORD *)(v128 + 20);
LABEL_381:
              uint64_t v150 = v128 - 32 * (v149 & 0x7FFFFFF);
LABEL_382:
              unint64_t v129 = (uint64_t *)(v150 + 32);
              goto LABEL_222;
            }
            uint64_t v131 = 0;
            unint64_t v130 = __pa;
            if (__pa) {
              goto LABEL_224;
            }
            break;
          case '%':
            goto LABEL_221;
          case '\'':
            unint64_t v129 = (uint64_t *)(v128 - 32 * *(unsigned int *)(v128 + 80) - 64);
            goto LABEL_222;
          default:
            int v147 = *(_DWORD *)(v128 + 20);
            if ((v147 & 0x40000000) != 0) {
              uint64_t v148 = *(void *)(v128 - 8);
            }
            else {
              uint64_t v148 = v128 - 32 * (v147 & 0x7FFFFFF);
            }
            unint64_t v130 = __pa;
            unint64_t v129 = (uint64_t *)(v148 + 32);
            goto LABEL_223;
        }
      }
      int v136 = *((unsigned __int8 *)v111 + 16);
      v1297 = (char *)v111 + 16;
      if (v136 == 61) {
        goto LABEL_302;
      }
      goto LABEL_258;
    }
LABEL_651:
    if ((unint64_t *)v1411.i64[1] != &v1412.u64[1]) {
      free((void *)v1411.i64[1]);
    }
    uint64_t v337 = v1354[0];
    if (v1355)
    {
      uint64_t v338 = 56 * v1355;
      uint64_t v339 = v1354[0] + 24;
      do
      {
        if ((*(void *)(v339 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v340 = *(void **)(v339 - 16);
          if ((void *)v339 != v340) {
            free(v340);
          }
        }
        v339 += 56;
        v338 -= 56;
      }
      while (v338);
    }
    MEMORY[0x1D25D9CD0](v337, 8);
    if (v1389 != v1388) {
      free(v1389);
    }
    if (v1428 != v1430) {
      free(v1428);
    }
    if (v1291)
    {
      LODWORD(v61) = 1;
      int v4 = v1315;
      uint64_t v3 = a1;
      goto LABEL_1977;
    }
LABEL_664:
    if (!byte_1EBCFE648) {
      goto LABEL_74;
    }
    uint64_t v341 = *(void *)(a1 + 8);
    uint64_t v342 = v1326;
    do
    {
      uint64_t v343 = *v342;
      uint64_t v344 = v343 - 24;
      if (!v343) {
        uint64_t v344 = 0;
      }
      int v345 = *(unsigned __int8 *)(v344 + 16);
      uint64_t v342 = (uint64_t *)(v343 + 8);
    }
    while (v345 == 83);
    if (v345 != 94) {
      goto LABEL_74;
    }
    v1388 = &v1390;
    v1389 = (void *)0x100000000;
    uint64_t v346 = *((void *)this + 1);
    if (!v346) {
      goto LABEL_74;
    }
    while (1)
    {
      uint64_t v347 = *(void *)(v346 + 24);
      unsigned int v348 = *(unsigned __int8 *)(v347 + 16);
      BOOL v349 = v347 && v348 >= 0x1C;
      if (v349 && v348 - 29 <= 0xA) {
        break;
      }
      uint64_t v346 = *(void *)(v346 + 8);
      if (!v346) {
        goto LABEL_74;
      }
    }
    uint64_t v1287 = v341;
LABEL_681:
    uint64_t v351 = *(void *)(v347 + 40);
    uint64_t v352 = *(void *)(v351 + 40);
    if (v352 == v351 + 40)
    {
      uint64_t v354 = 0;
    }
    else
    {
      if (v352) {
        uint64_t v353 = v352 - 24;
      }
      else {
        uint64_t v353 = 0;
      }
      if (*(unsigned __int8 *)(v353 + 16) - 29 >= 0xB) {
        uint64_t v354 = 0;
      }
      else {
        uint64_t v354 = v353;
      }
    }
    if (!v1389)
    {
      unint64_t v417 = 0;
LABEL_794:
      if (v417 >= HIDWORD(v1389)) {
        sub_1CD891A38();
      }
      int v418 = (char *)v1388 + 32 * v417;
      *int v418 = v418 + 2;
      v418[1] = 0x200000000;
      LODWORD(v1389) = v1389 + 1;
      uint64_t v355 = (char *)v1388 + 32 * v1389 - 32;
      goto LABEL_796;
    }
    uint64_t v355 = (char *)v1388;
    uint64_t v356 = (char *)v1388 + 32 * v1389;
    uint64_t v357 = (void *)(v354 - 32);
    while (2)
    {
      char v358 = 0;
      uint64_t v359 = 0;
      uint64_t v360 = **(void **)v355;
      v1356 = (void *)v360;
      uint64_t v1357 = v354;
      do
      {
        char v361 = v358;
        uint64_t v362 = (uint64_t)*(&v1356 + v359);
        uint64_t v363 = *(void *)(v362 + 64);
        if (v363 && (*(unsigned char *)(v363 + 15) & 0x10) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)*(&v1356 + v359), 28) & 1) != 0
          || *(unsigned char *)(*(void *)(v362 - 32) + 16) == 24)
        {
          goto LABEL_776;
        }
        char v358 = 1;
        uint64_t v359 = 1;
      }
      while ((v361 & 1) == 0);
      uint64_t v364 = 0;
      do
      {
        unsigned int v365 = *(unsigned __int8 *)(*(*(void **)((char *)&v1356 + v364) - 4) + 16);
        BOOL v366 = v365 <= 0x14 || v365 == 24;
        char v367 = !v366;
        if (!v366) {
          break;
        }
        BOOL v99 = v364 == 8;
        v364 += 8;
      }
      while (!v99);
      char v368 = 0;
      uint64_t v369 = 0;
      do
      {
        char v370 = v368;
        unsigned int v371 = *(unsigned __int8 *)(*((void *)*(&v1356 + v369) - 4) + 16);
        if (v371 < 0x15 || v371 == 24)
        {
          if (v367) {
            goto LABEL_776;
          }
          goto LABEL_717;
        }
        char v368 = 1;
        uint64_t v369 = 1;
      }
      while ((v370 & 1) == 0);
      if (v367) {
        goto LABEL_719;
      }
LABEL_717:
      uint64_t v373 = *(void *)(v360 - 32);
      if (v373 && v373 != *v357) {
        goto LABEL_776;
      }
LABEL_719:
      char v374 = 0;
      uint64_t v375 = 0;
      while (1)
      {
        char v376 = v374;
        if (llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)*(&v1356 + v375) - 12), 1)[16] != 35) {
          break;
        }
        char v374 = 1;
        uint64_t v375 = 1;
        if (v376) {
          goto LABEL_722;
        }
      }
      char v381 = 0;
      uint64_t v382 = 0;
      do
      {
        char v383 = v381;
        if (llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)*(&v1356 + v382) - 12), 1)[16] == 35) {
          goto LABEL_776;
        }
        char v381 = 1;
        uint64_t v382 = 1;
      }
      while ((v383 & 1) == 0);
      uint64_t v384 = *(void *)(v360 - 96);
      uint64_t v385 = *(void *)(v354 - 96);
      if (v384)
      {
        if (v384 != v385) {
          goto LABEL_776;
        }
        uint64_t v385 = *(void *)(v360 - 96);
      }
      char v386 = 0;
      uint64_t v387 = 0;
      v1410 = &v1412.u64[1];
      v1411.i64[0] = (uint64_t)&v1412.i64[1];
      v1411.i64[1] = 16;
      unsigned int v388 = 16;
      v1412.i32[0] = 0;
      do
      {
        char v389 = v386;
        uint64_t v390 = (uint64_t)*(&v1356 + v387);
        uint64_t v391 = v1411.i64[0];
        uint64_t v392 = v1411.u32[3];
        if ((void *)v1411.i64[0] != v1410) {
          goto LABEL_744;
        }
        if (!v1411.i32[3])
        {
LABEL_742:
          if (v1411.i32[3] < v388)
          {
            ++v1411.i32[3];
            *(void *)(v1411.i64[0] + 8 * v392) = v390;
            goto LABEL_765;
          }
LABEL_744:
          if (3 * v388 <= 4 * (v1411.i32[3] - v1412.i32[0]))
          {
            if (v388 >= 0x40) {
              v388 *= 2;
            }
            else {
              unsigned int v388 = 128;
            }
          }
          else if (v388 - v1411.i32[3] >= v388 >> 3)
          {
            goto LABEL_746;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1410, v388);
          unsigned int v388 = v1411.u32[2];
          uint64_t v391 = v1411.i64[0];
LABEL_746:
          unsigned int v396 = v388 - 1;
          unsigned int v397 = (v388 - 1) & ((v390 >> 4) ^ (v390 >> 9));
          long long v398 = (void *)(v391 + 8 * v397);
          uint64_t v399 = *v398;
          if (*v398 == -1)
          {
            long long v400 = 0;
LABEL_758:
            if (v400) {
              unsigned int v404 = v400;
            }
            else {
              unsigned int v404 = v398;
            }
            if (*v404 != v390)
            {
              if (*v404 == -2) {
                --v1412.i32[0];
              }
              else {
                ++v1411.i32[3];
              }
              *unsigned int v404 = v390;
            }
          }
          else
          {
            long long v400 = 0;
            int v401 = 1;
            while (v399 != v390)
            {
              if (v400) {
                BOOL v402 = 0;
              }
              else {
                BOOL v402 = v399 == -2;
              }
              if (v402) {
                long long v400 = v398;
              }
              unsigned int v403 = v397 + v401++;
              unsigned int v397 = v403 & v396;
              long long v398 = (void *)(v391 + 8 * (v403 & v396));
              uint64_t v399 = *v398;
              if (*v398 == -1) {
                goto LABEL_758;
              }
            }
          }
          goto LABEL_765;
        }
        unsigned int v393 = 0;
        uint64_t v394 = 8 * v1411.u32[3];
        uint64_t v395 = (void *)v1411.i64[0];
        while (*v395 != v390)
        {
          if (*v395 == -2) {
            unsigned int v393 = v395;
          }
          ++v395;
          v394 -= 8;
          if (!v394)
          {
            if (!v393) {
              goto LABEL_742;
            }
            *unsigned int v393 = v390;
            --v1412.i32[0];
            break;
          }
        }
LABEL_765:
        char v386 = 1;
        uint64_t v387 = 1;
      }
      while ((v389 & 1) == 0);
      uint64_t v405 = *(void *)(v354 + 40);
      *(void *)&long long v1372 = *(void *)(v360 + 40);
      *((void *)&v1372 + 1) = v405;
      int v406 = sub_1CD218F2C(v385, (uint64_t *)&v1372, 2, &v1410);
      int v407 = v406;
      if ((void *)v1411.i64[0] != v1410) {
        free((void *)v1411.i64[0]);
      }
      if (!v407) {
        goto LABEL_776;
      }
LABEL_722:
      uint64_t v377 = *(void *)(v360 - 64);
      uint64_t v378 = *(void *)(v354 + 40);
      v1410 = *(void **)(v360 + 40);
      v1411.i64[0] = v378;
      if (!sub_1CD218F2C(v377, (uint64_t *)&v1410, 2, 0)
        || !llvm::Instruction::isSameOperationAs((llvm::Instruction *)v354, (const llvm::Instruction *)v360, 0))
      {
        goto LABEL_776;
      }
      int v379 = *(unsigned __int8 *)(v360 + 16);
      if (v379 == 84)
      {
        uint64_t v380 = 0;
      }
      else if (v379 == 39)
      {
        uint64_t v380 = (*(_DWORD *)(v360 + 80) + 1);
      }
      else
      {
        uint64_t v380 = 2;
      }
      int v408 = *(unsigned __int8 *)(v354 + 16);
      if (v408 == 84)
      {
        uint64_t v409 = 0;
      }
      else if (v408 == 39)
      {
        uint64_t v409 = (*(_DWORD *)(v354 + 80) + 1);
      }
      else
      {
        uint64_t v409 = 2;
      }
      uint64_t v410 = *(_DWORD *)(v360 + 20) & 0x7FFFFFF;
      uint64_t v411 = v360 - 32 * v410;
      if (v411 != v360 - 32 * v380 - 32)
      {
        uint64_t v412 = *(_DWORD *)(v354 + 20) & 0x7FFFFFF;
        int v413 = (void *)(v354 - 32 * v412);
        if (v413 != &v357[-4 * v409])
        {
          uint64_t v414 = 32 * v412 - 32 * v409 - 64;
          uint64_t v415 = 32 * v410 - 32 * v380 - 64;
          while (*(unsigned char *)(**(void **)v411 + 8) != 12 || *(void *)v411 == *v413)
          {
            if (v415)
            {
              v411 += 32;
              v413 += 4;
              uint64_t v416 = v414;
              v414 -= 32;
              v415 -= 32;
              if (v416) {
                continue;
              }
            }
            goto LABEL_796;
          }
LABEL_776:
          v355 += 32;
          if (v355 == v356)
          {
            unint64_t v417 = v1389;
            goto LABEL_794;
          }
          continue;
        }
      }
      break;
    }
LABEL_796:
    uint64_t v419 = *((unsigned int *)v355 + 2);
    if (v419 >= *((_DWORD *)v355 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v355 + 8 * v419) = v354;
    *((_DWORD *)v355 + 2) = v419 + 1;
    while (1)
    {
      uint64_t v346 = *(void *)(v346 + 8);
      if (!v346) {
        break;
      }
      uint64_t v347 = *(void *)(v346 + 24);
      unsigned int v420 = *(unsigned __int8 *)(v347 + 16);
      if (v347) {
        BOOL v421 = v420 >= 0x1C;
      }
      else {
        BOOL v421 = 0;
      }
      if (v421 && v420 - 29 < 0xB) {
        goto LABEL_681;
      }
    }
    uint64_t v423 = v1388;
    if (v1389)
    {
      do
      {
        unsigned int v1298 = v423[2];
        if (v1298 >= 2)
        {
          uint64_t v424 = *(void *)v423;
          v1410 = &v1411.u64[1];
          v1411.i64[0] = 0x800000000;
          if (v1287 && v1298 != 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::BasicBlock::getFirstNonPHIOrDbg(*(llvm::BasicBlock **)(*(void *)v424 - 96), 1);
          uint64_t v425 = *(uint64_t ****)(*(void *)v424 + 40);
          if ((*((unsigned char *)v425 + 23) & 0x10) != 0)
          {
            uint64_t v426 = ***v425;
            uint64_t v427 = *(void *)(v426 + 152);
            uint64_t v428 = *(unsigned int *)(v426 + 168);
            if (v428)
            {
              LODWORD(v429) = (v428 - 1) & ((v425 >> 4) ^ (v425 >> 9));
              uint64_t v430 = (uint64_t ****)(v427 + 16 * v429);
              int v431 = *v430;
              if (*v430 != v425)
              {
                int v432 = 1;
                do
                {
                  if (v431 == (uint64_t ***)-4096) {
                    goto LABEL_821;
                  }
                  int v433 = v429 + v432++;
                  uint64_t v429 = v433 & (v428 - 1);
                  int v431 = *(uint64_t ****)(v427 + 16 * v429);
                }
                while (v431 != v425);
                uint64_t v430 = (uint64_t ****)(v427 + 16 * v429);
              }
            }
            else
            {
LABEL_821:
              uint64_t v430 = (uint64_t ****)(v427 + 16 * v428);
            }
            uint64_t v434 = v430[1];
            unsigned int v437 = *v434;
            uint64_t v436 = (char *)(v434 + 2);
            uint64_t v435 = v437;
          }
          else
          {
            uint64_t v435 = 0;
            uint64_t v436 = &byte_1CFBCE98E;
          }
          LOWORD(v1374) = 773;
          *(void *)&long long v1372 = v436;
          *((void *)&v1372 + 1) = v435;
          *(void *)&long long v1373 = ".invoke";
          operator new();
        }
        v423 += 8;
      }
      while (v423 != (_DWORD *)((char *)v1388 + 32 * v1389));
      unsigned int v438 = (char *)v1388;
      uint64_t v439 = 32 * v1389;
      do
      {
        unint64_t v440 = *(char **)&v438[v439 - 32];
        if (&v438[v439 - 16] != v440) {
          free(v440);
        }
        v439 -= 32;
      }
      while (v439);
      if (v1388 != &v1390) {
        free(v1388);
      }
    }
    else if (v1388 != &v1390)
    {
      free(v1388);
    }
LABEL_74:
    uint64_t v42 = **(void **)this;
    v1356 = v1358;
    uint64_t v1357 = 0x200000000;
    uint64_t v1361 = v42;
    v1362 = &v1370;
    v1363 = &v1371;
    uint64_t v1364 = 0;
    int v1365 = 0;
    __int16 v1366 = 512;
    char v1367 = 7;
    uint64_t v1368 = 0;
    uint64_t v1369 = 0;
    v1370 = &unk_1F2616E88;
    v1371 = &unk_1F2617008;
    v1359 = this;
    v1360 = v1347;
    if (!*(unsigned char *)(*(void *)(a1 + 40) + 11)) {
      goto LABEL_1198;
    }
    uint64_t v43 = *v1326 - 24;
    if (!*v1326) {
      uint64_t v43 = 0;
    }
    int v44 = *(unsigned __int8 *)(v43 + 16);
    uint64_t v45 = v44 == 83 ? v43 : 0;
    if (!*v1326) {
      goto LABEL_1198;
    }
    if (v44 != 83) {
      goto LABEL_1198;
    }
    if ((*(_DWORD *)(v45 + 20) & 0x7FFFFFF) != 2) {
      goto LABEL_1198;
    }
    int v46 = *(llvm::MemorySSAUpdater **)a1;
    uint64_t v47 = *(void *)(a1 + 8);
    unint64_t v48 = *(void *)(a1 + 16);
    int v49 = *(llvm **)(v45 + 40);
    v1354[0] = 0;
    v1353 = 0;
    IfConditiouint64_t n = (llvm::Instruction *)llvm::GetIfCondition(v49, (llvm::BasicBlock *)v1354, &v1353, v41);
    if (!IfCondition) {
      goto LABEL_1198;
    }
    int v55 = IfCondition;
    BOOL v56 = (llvm **)*((void *)IfCondition - 12);
    if (*((unsigned char *)v56 + 16) == 16) {
      goto LABEL_1198;
    }
    unsigned int v57 = (llvm *)*((void *)IfCondition + 5);
    v1431 = (void **)v1433;
    uint64_t v1432 = 0x200000000;
    int v58 = *(_DWORD *)(v45 + 20);
    v1337 = v56;
    uint64_t v1310 = v47;
    if ((v58 & 0x40000000) != 0)
    {
      uint64_t v60 = *(void *)(v45 - 8);
      uint64_t v59 = v58 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v59 = v58 & 0x7FFFFFF;
      uint64_t v60 = v45 - 32 * v59;
    }
    uint64_t __p = v57;
    if (v59)
    {
      unsigned int v85 = 0;
      uint64_t v86 = v60 + 32 * *(unsigned int *)(v45 + 60);
      uint64_t v87 = 8 * v59;
      do
      {
        uint64_t v88 = *(void *)(*(void *)v86 + 40);
        if (v88) {
          uint64_t v89 = v88 - 24;
        }
        else {
          uint64_t v89 = 0;
        }
        if (*(unsigned __int8 *)(v89 + 16) - 29 >= 0xB) {
          uint64_t v89 = 0;
        }
        if ((*(_DWORD *)(v89 + 20) & 0x7FFFFFF) == 1)
        {
          if (v85 >= HIDWORD(v1432)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1431[v85] = *(void **)v86;
          unsigned int v85 = v1432 + 1;
          LODWORD(v1432) = v1432 + 1;
        }
        v86 += 8;
        v87 -= 8;
      }
      while (v87);
    }
    if ((*((unsigned char *)IfCondition + 23) & 0x20) == 0) {
      goto LABEL_171;
    }
    uint64_t v90 = ***(void ***)IfCondition;
    v1410 = IfCondition;
    int v91 = *(_DWORD *)(v90 + 2496);
    if (!v91)
    {
      uint64_t v290 = 0;
      goto LABEL_554;
    }
    uint64_t v92 = *(void *)(v90 + 2480);
    int v93 = v91 - 1;
    unsigned int v94 = v93 & ((IfCondition >> 4) ^ (IfCondition >> 9));
    uint64_t v95 = (llvm::Instruction **)(v92 + 40 * v94);
    uint64_t v96 = *v95;
    if (*v95 != v55)
    {
      int v97 = 0;
      int v98 = 1;
      while (v96 != (llvm::Instruction *)-4096)
      {
        if (v97) {
          BOOL v99 = 0;
        }
        else {
          BOOL v99 = v96 == (llvm::Instruction *)-8192;
        }
        if (v99) {
          int v97 = v95;
        }
        unsigned int v100 = v94 + v98++;
        unsigned int v94 = v100 & v93;
        uint64_t v95 = (llvm::Instruction **)(v92 + 40 * v94);
        uint64_t v96 = *v95;
        if (*v95 == v55) {
          goto LABEL_167;
        }
      }
      if (v97) {
        uint64_t v290 = v97;
      }
      else {
        uint64_t v290 = v95;
      }
LABEL_554:
      uint64_t v95 = (llvm::Instruction **)sub_1CC609054(v90 + 2480, (uint64_t)&v1410, (uint64_t *)&v1410, v290);
      int v291 = (llvm::Instruction *)v1410;
      v95[4] = 0;
      v95[3] = 0;
      *uint64_t v95 = v291;
      v95[1] = (llvm::Instruction *)(v95 + 3);
      v95[2] = (llvm::Instruction *)0x100000000;
    }
LABEL_167:
    uint64_t v101 = *((unsigned int *)v95 + 4);
    if (!v101) {
      goto LABEL_171;
    }
    int v102 = (void *)((char *)v95[1] + 8);
    uint64_t v103 = 16 * v101;
    while (*((_DWORD *)v102 - 2) != 15)
    {
      v102 += 2;
      v103 -= 16;
      if (!v103) {
        goto LABEL_171;
      }
    }
    if (!*v102)
    {
LABEL_171:
      v1410 = 0;
      v1388 = 0;
      if (!llvm::Instruction::extractProfMetadata(v55, (unint64_t *)&v1410, (unint64_t *)&v1388)|| !((char *)v1388 + (void)v1410))
      {
        goto LABEL_390;
      }
      unint64_t v104 = (unint64_t)v1410 + (void)v1388;
      unint64_t v105 = ((unint64_t)v1410 + (unint64_t)v1388) >> 32;
      if (v105)
      {
        LOBYTE(v105) = 0;
        unint64_t v1284 = (unint64_t)v1410 + (void)v1388;
        do
        {
          unint64_t v104 = v1284 >> 1;
          LOBYTE(v105) = v105 + 1;
          unint64_t v1285 = v1284 >> 33;
          v1284 >>= 1;
        }
        while (v1285);
      }
      unint64_t v106 = (unint64_t)v1410 >> v105;
      if (v104 != 0x80000000) {
        unint64_t v106 = (((unint64_t)((unint64_t)v1410 >> v105) << 31) | (v104 >> 1)) / v104;
      }
      unsigned int v107 = (*(uint64_t (**)(void))(**(void **)v46 + 80))();
      unsigned int v108 = 0x80000000 - v106;
      if (v1432 == 1)
      {
        if (*((llvm **)v55 - 4) == v49) {
          unsigned int v108 = v106;
        }
        if (v108 < v107) {
          goto LABEL_390;
        }
      }
      else if (v107 > v106 && v108 < v107)
      {
        goto LABEL_390;
      }
LABEL_431:
      char v223 = 0;
      goto LABEL_1194;
    }
LABEL_390:
    if (v1337 && *((unsigned char *)v1337 + 16) == 83 && v1337[5] == v49) {
      goto LABEL_431;
    }
    uint64_t v217 = (uint64_t)v49;
    uint64_t v218 = *((void *)v49 + 6);
    if (v218) {
      uint64_t v219 = v218 - 24;
    }
    else {
      uint64_t v219 = 0;
    }
    if (*(unsigned char *)(v219 + 16) != 83)
    {
      unint64_t v1304 = (unint64_t)v49;
      v1388 = &v1392;
      v1389 = &v1392;
      uint64_t v1390 = 4;
      LODWORD(v1391) = 0;
      v1428 = 0;
      v1429[0] = 0;
      goto LABEL_433;
    }
    int v220 = 4;
    uint64_t v221 = *((void *)v49 + 6);
    while (2)
    {
      if (--v220)
      {
        uint64_t v221 = *(void *)(v221 + 8);
        uint64_t v222 = v221 - 24;
        if (!v221) {
          uint64_t v222 = 0;
        }
        if (*(unsigned char *)(v222 + 16) == 83) {
          continue;
        }
        unint64_t v1304 = (unint64_t)v49;
        char v223 = 0;
        v1388 = &v1392;
        v1389 = &v1392;
        uint64_t v1390 = 4;
        LODWORD(v1391) = 0;
        v1428 = 0;
        v1429[0] = 0;
        int64_t v224 = dword_1EBCFDE08;
        do
        {
          uint64_t v218 = *(void *)(v218 + 8);
          long long v1373 = 0uLL;
          long long v1372 = v48;
          *(void *)&long long v1374 = v219;
          WORD4(v1374) = 257;
          int v225 = *(_DWORD *)(v219 + 20);
          if ((v225 & 0x40000000) != 0)
          {
            uint64_t v227 = *(uint64_t **)(v219 - 8);
            unint64_t v226 = v225 & 0x7FFFFFF;
          }
          else
          {
            unint64_t v226 = v225 & 0x7FFFFFF;
            uint64_t v227 = (uint64_t *)(v219 - 32 * v226);
          }
          v1410 = &v1411.u64[1];
          v1411.i64[0] = 0x800000000;
          if (v226 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v226)
          {
            uint64_t v228 = 32 * v226;
            uint64_t v229 = &v1411.i64[1];
            do
            {
              uint64_t v230 = *v227;
              v227 += 4;
              *v229++ = v230;
              v228 -= 32;
            }
            while (v228);
            uint64_t v231 = (char *)v1410;
          }
          else
          {
            uint64_t v231 = &v1411.i8[8];
          }
          v1411.i32[0] = v226;
          unint64_t v232 = llvm::SimplifyInstructionWithOperands((llvm *)v219, (uint64_t)v231, v226, (uint64_t)&v1372, v52, v53, v54);
          if (v1410 == &v1411.u64[1])
          {
            if (v232) {
              goto LABEL_413;
            }
          }
          else
          {
            free(v1410);
            if (v232)
            {
LABEL_413:
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v219, v232, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
          int v233 = *(_DWORD *)(v219 + 20);
          if ((v233 & 0x40000000) != 0) {
            int v234 = *(uint64_t **)(v219 - 8);
          }
          else {
            int v234 = (uint64_t *)(v219 - 32 * (v233 & 0x7FFFFFF));
          }
          if (!sub_1CD221554(*v234, v217, (uint64_t *)&v1388, (uint64_t)&v1428, v224, 0, v46, 0)) {
            goto LABEL_1192;
          }
          int v235 = *(_DWORD *)(v219 + 20);
          uint64_t v236 = (v235 & 0x40000000) != 0 ? *(void *)(v219 - 8) : v219 - 32 * (v235 & 0x7FFFFFF);
          if (!sub_1CD221554(*(void *)(v236 + 32), v217, (uint64_t *)&v1388, (uint64_t)&v1428, v224, 0, v46, 0))goto LABEL_1192; {
          uint64_t v219 = v218 - 24;
          }
          if (v218) {
            uint64_t v237 = v218 - 24;
          }
          else {
            uint64_t v237 = 0;
          }
        }
        while (*(unsigned char *)(v237 + 16) == 83);
        uint64_t v218 = *(void *)(v217 + 48);
LABEL_433:
        if (v218) {
          uint64_t v238 = v218 - 24;
        }
        else {
          uint64_t v238 = 0;
        }
        int v239 = *(unsigned __int8 *)(v238 + 16);
        if (v239 == 83) {
          int v240 = (_DWORD *)v238;
        }
        else {
          int v240 = 0;
        }
        char v223 = 1;
        if (v218 && v239 == 83)
        {
          if (*(_DWORD *)(*(void *)v240 + 8) != 269) {
            goto LABEL_880;
          }
          int v241 = v240[5];
          uint64_t v242 = (v241 & 0x40000000) != 0 ? (uint64_t *)*((void *)v240 - 1) : (uint64_t *)&v240[-8 * (v241 & 0x7FFFFFF)];
          uint64_t v243 = *v242;
          unsigned int v244 = *(unsigned __int8 *)(*v242 + 16);
          BOOL v245 = v244 < 0x1C || v244 - 41 >= 0x12;
          if (v245 && !sub_1CD221AF8(v243))
          {
            unsigned int v246 = (v241 & 0x40000000) != 0 ? (_DWORD *)*((void *)v240 - 1) : &v240[-8 * (v241 & 0x7FFFFFF)];
            uint64_t v441 = *((void *)v246 + 4);
            unsigned int v442 = *(unsigned __int8 *)(v441 + 16);
            if ((v442 < 0x1C || v442 - 41 >= 0x12) && !sub_1CD221AF8(v441))
            {
              unsigned int v444 = *((unsigned __int8 *)v1337 + 16);
              if ((v444 < 0x1C || v444 - 41 >= 0x12) && !sub_1CD221AF8((uint64_t)v1337)) {
                goto LABEL_880;
              }
            }
          }
          if ((v241 & 0x40000000) != 0) {
            uint64_t v445 = (void *)*((void *)v240 - 1);
          }
          else {
            uint64_t v445 = &v240[-8 * (v241 & 0x7FFFFFF)];
          }
          uint64_t v446 = *v445;
          uint64_t v447 = v445[4];
          int v448 = *(unsigned __int8 *)(*v445 + 16);
          if (v448 == 5)
          {
            if (*(_WORD *)(v446 + 18) != 30) {
              goto LABEL_859;
            }
            uint64_t v449 = v217;
            if (sub_1CBF68974((uint64_t)&v1410 + 1, *(llvm::Constant **)(v446 - 32 * (*(_DWORD *)(v446 + 20) & 0x7FFFFFF) + 32))|| sub_1CBF68974((uint64_t)&v1410 + 1, *(llvm::Constant **)(v446 - 32 * (*(_DWORD *)(v446 + 20) & 0x7FFFFFF))))
            {
              goto LABEL_858;
            }
LABEL_860:
            uint64_t v450 = v446;
            uint64_t v446 = v447;
LABEL_861:
            uint64_t v217 = v449;
          }
          else
          {
            if (v448 == 58)
            {
              uint64_t v449 = v217;
              if ((sub_1CBF687D0((uint64_t)&v1410 + 1, *(llvm::Constant **)(v446 - 32)) & 1) == 0
                && (sub_1CBF687D0((uint64_t)&v1410 + 1, *(llvm::Constant **)(v446 - 64)) & 1) == 0)
              {
                goto LABEL_860;
              }
LABEL_858:
              uint64_t v450 = v447;
              goto LABEL_861;
            }
LABEL_859:
            uint64_t v450 = v446;
            uint64_t v446 = v447;
          }
          BYTE2(v1410) = 0;
          LOWORD(v1410) = 0;
          int v451 = *(unsigned __int8 *)(v446 + 16);
          if (v451 == 5)
          {
            if (*(_WORD *)(v446 + 18) == 30
              && ((sub_1CBF68974((uint64_t)&v1372 + 1, *(llvm::Constant **)(v446 - 32 * (*(_DWORD *)(v446 + 20) & 0x7FFFFFF) + 32)) & 1) != 0|| sub_1CBF68974((uint64_t)&v1372 + 1, *(llvm::Constant **)(v446 - 32 * (*(_DWORD *)(v446 + 20) & 0x7FFFFFF)))))
            {
              goto LABEL_870;
            }
          }
          else
          {
            if (v451 != 58
              || (sub_1CBF687D0((uint64_t)&v1372 + 1, *(llvm::Constant **)(v446 - 32)) & 1) == 0
              && (sub_1CBF687D0((uint64_t)&v1372 + 1, *(llvm::Constant **)(v446 - 64)) & 1) == 0)
            {
              goto LABEL_980;
            }
LABEL_870:
            int v452 = *(unsigned __int8 *)(v450 + 16);
            if (v452 == 5)
            {
              if (*(_WORD *)(v450 + 18) != 30
                || (sub_1CBF68974((uint64_t)&v1410 + 1, *(llvm::Constant **)(v450 - 32 * (*(_DWORD *)(v450 + 20) & 0x7FFFFFF) + 32)) & 1) == 0&& (sub_1CBF68974((uint64_t)&v1410 + 1, *(llvm::Constant **)(v450 - 32 * (*(_DWORD *)(v450 + 20) & 0x7FFFFFF))) & 1) == 0)
              {
                goto LABEL_879;
              }
            }
            else if (v452 != 58 {
                   || (sub_1CBF687D0((uint64_t)&v1410 + 1, *(llvm::Constant **)(v450 - 32)) & 1) == 0
            }
                   && (sub_1CBF687D0((uint64_t)&v1410 + 1, *(llvm::Constant **)(v450 - 64)) & 1) == 0)
            {
LABEL_879:
              if ((sub_1CC9F89B4((int)&v1410 + 2, (llvm::Constant *)v450) & 1) == 0) {
                goto LABEL_980;
              }
            }
LABEL_880:
            uint64_t v453 = v217;
            if (!v1432) {
              goto LABEL_930;
            }
            uint64_t v454 = v1431;
            uint64_t v455 = &v1431[v1432];
            while (2)
            {
              uint64_t v456 = *((void *)*v454 + 6);
              uint64_t v457 = v456 - 24;
              if (v456) {
                uint64_t v458 = v456 - 24;
              }
              else {
                uint64_t v458 = 0;
              }
              if (*(unsigned __int8 *)(v458 + 16) - 29 < 0xB)
              {
LABEL_886:
                if (++v454 != v455) {
                  continue;
                }
                if (v1432)
                {
                  uint64_t v472 = (llvm::Instruction **)v1431;
                  uint64_t v473 = 8 * v1432;
                  uint64_t v474 = v473;
                  int v475 = v1431;
                  do
                  {
                    if ((*((_WORD *)*v475 + 9) & 0x7FFF) != 0) {
                      goto LABEL_980;
                    }
                    ++v475;
                    v474 -= 8;
                  }
                  while (v474);
                  do
                  {
                    uint64_t v476 = *v472++;
                    llvm::hoistAllInstructionsInto(__p, v55, v476, v51);
                    v473 -= 8;
                  }
                  while (v473);
                }
LABEL_930:
                sub_1CC8A8E38((uint64_t)&v1410, (uint64_t **)v55, 0, 0, 0);
                uint64_t v477 = *(void *)(v453 + 48);
                uint64_t v478 = (unsigned __int8 *)(v477 - 24);
                if (v477) {
                  uint64_t v479 = v477 - 24;
                }
                else {
                  uint64_t v479 = 0;
                }
                if (v477 && *(unsigned char *)(v479 + 16) == 83)
                {
                  if (sub_1CB845E74((uint64_t)v478))
                  {
                    int v480 = v478[17] >> 1;
                    if (v480 == 127) {
                      int v480 = -1;
                    }
                    int v1418 = v480;
                  }
                  v481 = (llvm::Value *)sub_1CBF73380((uint64_t)v478, v1354[0]);
                  v482 = (llvm::Value *)sub_1CBF73380((uint64_t)v478, (uint64_t)v1353);
                  LOWORD(v1374) = 257;
                  uint64_t Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1410, (llvm::Value *)v1337, v481, v482, (const llvm::Twine *)&v1372, (uint64_t ***)v55);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v478, Select, (llvm::Value *)1);
                  llvm::Value::takeName((int32x2_t ****)Select, (llvm::Value *)v478);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                v484 = (char *)operator new(0x60uLL);
                *((_DWORD *)v484 + 13) = *((_DWORD *)v484 + 13) & 0x38000000 | 1;
                *(void *)v484 = 0;
                *((void *)v484 + 2) = 0;
                *((void *)v484 + 1) = 0;
                *((void *)v484 + 4) = ***(void ***)v453 + 1576;
                *((void *)v484 + 3) = v484 + 32;
                *((void *)v484 + 5) = 0;
                v484[48] = 30;
                v484[49] = 0;
                *((_WORD *)v484 + 25) = 0;
                *((_DWORD *)v484 + 13) = 1;
                *(_OWORD *)(v484 + 56) = 0u;
                *(_OWORD *)(v484 + 72) = 0u;
                *((_DWORD *)v484 + 22) = 0;
                *(void *)v484 = v453;
                uint64_t v485 = *(void *)(v453 + 8);
                v486 = (void *)(v453 + 8);
                *((void *)v484 + 1) = v485;
                if (v485) {
                  *(void *)(v485 + 16) = v484 + 8;
                }
                *((void *)v484 + 2) = v486;
                void *v486 = v484;
                LOWORD(v1374) = 257;
                sub_1CB844E0C((uint64_t *)&v1410, (llvm::Instruction *)(v484 + 32), (uint64_t)&v1372);
                *(void *)&long long v1372 = &v1373;
                *((void *)&v1372 + 1) = 0x300000000;
                if (!v1310) {
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                v487 = __p;
                *(void *)&long long v1373 = __p;
                *((void *)&v1373 + 1) = v1304 & 0xFFFFFFFFFFFFFFFBLL;
                DWORD2(v1372) = 1;
                v488 = (void *)*((void *)__p + 5);
                if (v488 == (void *)((char *)__p + 40)) {
LABEL_1191:
                }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                if (v488) {
                  v489 = v488 - 3;
                }
                else {
                  v489 = 0;
                }
                if (*((unsigned char *)v489 + 16) != 30)
                {
                  unsigned int v641 = 2;
                  switch(*((unsigned char *)v489 + 16))
                  {
                    case 0x1E:
                      goto LABEL_2521;
                    case 0x1F:
                      unsigned int v641 = (*((_DWORD *)v489 + 5) >> 1) & 0x3FFFFFF;
                      goto LABEL_2295;
                    case 0x20:
                    case 0x26:
                      unsigned int v641 = (*((_DWORD *)v489 + 5) & 0x7FFFFFF) - 1;
                      goto LABEL_2295;
                    case 0x21:
                      goto LABEL_952;
                    case 0x24:
                      unsigned int v641 = *((_WORD *)v489 + 9) & 1;
                      goto LABEL_2295;
                    case 0x25:
                      unsigned int v641 = 1;
                      goto LABEL_952;
                    case 0x27:
                      unsigned int v641 = *((_DWORD *)v489 + 20) + 1;
LABEL_2295:
                      if (!v641) {
                        goto LABEL_1191;
                      }
                      goto LABEL_952;
                    default:
                      goto LABEL_1191;
                  }
                }
                if ((*((_DWORD *)v489 + 5) & 0x7FFFFFF) == 3) {
                  unsigned int v641 = 2;
                }
                else {
                  unsigned int v641 = 1;
                }
LABEL_952:
                int v490 = 0;
                uint64_t v491 = 0;
                unsigned int v492 = 1;
                v493 = v489 - 8;
                uint64_t v494 = v641;
                while (2)
                {
                  int v495 = *((unsigned __int8 *)v489 + 16);
                  if (v495 == 30)
                  {
                    v499 = &v489[-4 * v491 - 4];
                  }
                  else
                  {
                    uint64_t v498 = (v495 - 31);
                    v499 = v489 - 4;
                    switch(v498)
                    {
                      case 1:
                      case 7:
                        int v502 = *((_DWORD *)v489 + 5);
                        if ((v502 & 0x40000000) != 0) {
                          v503 = (void *)*(v489 - 1);
                        }
                        else {
                          v503 = &v489[-4 * (v502 & 0x7FFFFFF)];
                        }
                        v499 = &v503[4 * v491 + 4];
                        goto LABEL_979;
                      case 2:
                        uint64_t v504 = 0x1FFFFFFFFFFFFFF8;
                        if (!v491) {
                          uint64_t v504 = 0x1FFFFFFFFFFFFFF4;
                        }
                        v499 = &v489[v504];
                        break;
                      case 3:
                      case 4:
                        goto LABEL_2521;
                      case 5:
                        if ((*((_WORD *)v489 + 9) & 1) == 0)
                        {
                          uint64_t v496 = 0;
                          v487 = __p;
LABEL_957:
                          if (v492 >= HIDWORD(v1372)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          v497 = (llvm **)(v1372 + 16 * v492);
                          *v497 = v487;
                          v497[1] = (llvm *)(v496 | 4);
                          unsigned int v492 = ++DWORD2(v1372);
                          ++v491;
                          v490 += 2;
                          v493 += 4;
                          if (v494 == v491) {
                            goto LABEL_1191;
                          }
                          continue;
                        }
                        v499 = &v489[-4 * (*((_DWORD *)v489 + 5) & 0x7FFFFFF) + 4];
LABEL_979:
                        v487 = __p;
                        break;
                      case 6:
                        goto LABEL_956;
                      case 8:
                        if (v491) {
                          v499 = &v493[-4 * *((unsigned int *)v489 + 20)];
                        }
                        else {
                          v499 = &v489[-4 * *((unsigned int *)v489 + 20) - 8];
                        }
                        goto LABEL_979;
                      default:
                        int v500 = *((_DWORD *)v489 + 5);
                        if ((v500 & 0x40000000) != 0) {
                          v501 = (void *)*(v489 - 1);
                        }
                        else {
                          v501 = &v489[-4 * (v500 & 0x7FFFFFF)];
                        }
                        v499 = &v501[4 * (v490 & 0xFFFFFFFE) + 4];
                        goto LABEL_956;
                    }
                  }
                  break;
                }
LABEL_956:
                uint64_t v496 = *v499;
                goto LABEL_957;
              }
              break;
            }
            while (1)
            {
              int v459 = v1388;
              if (v1389 == v1388)
              {
                int v460 = HIDWORD(v1390);
                uint64_t v461 = (char *)v1389 + 8 * HIDWORD(v1390);
                if (HIDWORD(v1390))
                {
                  uint64_t v462 = 0;
                  while (*(void *)((char *)v1389 + v462) != v457)
                  {
                    v462 += 8;
                    if (8 * HIDWORD(v1390) == v462) {
                      goto LABEL_907;
                    }
                  }
                  uint64_t v461 = (char *)v1389 + v462;
                }
LABEL_907:
                int v459 = v1389;
              }
              else
              {
                int v463 = v1390 - 1;
                unsigned int v464 = (v1390 - 1) & ((v457 >> 4) ^ (v457 >> 9));
                uint64_t v461 = (char *)v1389 + 8 * v464;
                uint64_t v465 = *(void *)v461;
                if (*(void *)v461 == -1)
                {
                  uint64_t v466 = 0;
LABEL_920:
                  if (v466) {
                    uint64_t v461 = v466;
                  }
                  int v460 = HIDWORD(v1390);
                  if (*(void *)v461 != v457) {
                    uint64_t v461 = (char *)v1389 + 8 * v1390;
                  }
                }
                else
                {
                  uint64_t v466 = 0;
                  int v467 = 1;
                  while (v465 != v457)
                  {
                    if (v466) {
                      BOOL v468 = 0;
                    }
                    else {
                      BOOL v468 = v465 == -2;
                    }
                    if (v468) {
                      uint64_t v466 = v461;
                    }
                    unsigned int v469 = v464 + v467++;
                    unsigned int v464 = v469 & v463;
                    uint64_t v461 = (char *)v1389 + 8 * (v469 & v463);
                    uint64_t v465 = *(void *)v461;
                    if (*(void *)v461 == -1) {
                      goto LABEL_920;
                    }
                  }
                  int v460 = HIDWORD(v1390);
                }
              }
              unsigned int v470 = v1389 == v459 ? v460 : v1390;
              if (v461 == (char *)v1389 + 8 * v470 && !sub_1CBF63B28(v457) && !sub_1CC27D470(v457)) {
                break;
              }
              uint64_t v456 = *(void *)(v456 + 8);
              uint64_t v457 = v456 - 24;
              if (v456) {
                uint64_t v471 = v456 - 24;
              }
              else {
                uint64_t v471 = 0;
              }
              if (*(unsigned __int8 *)(v471 + 16) - 29 <= 0xA) {
                goto LABEL_886;
              }
            }
          }
LABEL_980:
          char v223 = 0;
        }
LABEL_1192:
        if (v1389 != v1388) {
          free(v1389);
        }
      }
      else
      {
        char v223 = 0;
      }
      break;
    }
LABEL_1194:
    if (v1431 != v1433) {
      free(v1431);
    }
    if (v223)
    {
      LODWORD(v61) = 1;
      int v4 = v1315;
      uint64_t v3 = a1;
      goto LABEL_1975;
    }
LABEL_1198:
    v642 = (void *)*v1347;
    if ((void *)*v1347 == v1347)
    {
      uint64_t v644 = 0;
    }
    else
    {
      if (v642) {
        uint64_t v643 = (uint64_t)(v642 - 3);
      }
      else {
        uint64_t v643 = 0;
      }
      if (*(unsigned __int8 *)(v643 + 16) - 29 >= 0xB) {
        uint64_t v644 = 0;
      }
      else {
        uint64_t v644 = v643;
      }
    }
    v645 = (uint64_t *)(v644 + 24);
    v1359 = *(llvm **)(v644 + 40);
    v1360 = (void *)(v644 + 24);
    v646 = *(void **)(v644 + 48);
    v1388 = v646;
    int v4 = v1315;
    if (v646)
    {
      llvm::MetadataTracking::track((uint64_t)&v1388, (unsigned __int8 *)v646, 2);
      v647 = v1388;
    }
    else
    {
      v647 = 0;
    }
    uint64_t v3 = a1;
    sub_1CB8461A4((uint64_t)&v1356, 0, (uint64_t)v647);
    int64x2_t v648 = v1316;
    if (v1388)
    {
      int v730 = *(unsigned __int8 *)v1388;
      if ((v730 - 4) > 0x1E)
      {
        if ((v730 - 3) >= 0xFFFFFFFE) {
          v986 = v1388;
        }
        else {
          v986 = 0;
        }
        if ((v730 - 3) < 0xFFFFFFFE)
        {
          if (v730 == 3) {
            *((void *)v1388 + 1) = 0;
          }
          goto LABEL_1209;
        }
        unint64_t v732 = (unint64_t)v986 + 8;
      }
      else
      {
        if ((*((unsigned char *)v1388 + 1) & 0x7F) != 2 && !*((_DWORD *)v1388 + 3)) {
          goto LABEL_1209;
        }
        uint64_t v731 = *((void *)v1388 + 2);
        if ((v731 & 4) == 0) {
          goto LABEL_1209;
        }
        unint64_t v732 = v731 & 0xFFFFFFFFFFFFFFF8;
        if (!v732) {
          goto LABEL_1209;
        }
      }
      v1410 = &v1388;
      sub_1CC5FA668(v732 + 16, &v1410);
      int64x2_t v648 = v1316;
    }
LABEL_1209:
    uint64_t v61 = v1331 | v1327;
    switch(*(unsigned char *)(v644 + 16))
    {
      case 0x1E:
        if ((*(_DWORD *)(v644 + 20) & 0x7FFFFFF) != 1)
        {
          int v699 = sub_1CD221B58(a1, v644, (uint64_t)&v1356);
LABEL_1922:
          LODWORD(v61) = v61 | v699;
          goto LABEL_1975;
        }
        v649 = *(llvm::BasicBlock **)(v644 + 40);
        if (*(unsigned char *)(*(void *)(a1 + 40) + 7)
          && (uint64_t v650 = *(void *)(a1 + 32)) != 0
          && (uint64_t v651 = *(void *)(v644 - 32),
              llvm::BasicBlock::hasNPredecessorsOrMore(*(llvm::BasicBlock **)(v644 + 40), 2)))
        {
          uint64_t v652 = *(void *)(a1 + 24);
          uint64_t v653 = 24 * v650;
          uint64_t v654 = 24 * v650;
          uint64_t v655 = v652;
          while (*(llvm::BasicBlock **)(v655 + 16) != v649)
          {
            v655 += 24;
            v654 -= 24;
            if (!v654)
            {
              uint64_t v655 = v652 + 24 * v650;
              break;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v655 - v652) >> 3) == v650)
          {
            uint64_t v656 = *(void *)(a1 + 24);
            while (*(void *)(v656 + 16) != v651)
            {
              v656 += 24;
              v653 -= 24;
              if (!v653)
              {
                uint64_t v656 = v652 + 24 * v650;
                break;
              }
            }
            BOOL v657 = 0xAAAAAAAAAAAAAAABLL * ((v656 - v652) >> 3) != v650;
          }
          else
          {
            BOOL v657 = 1;
          }
        }
        else
        {
          BOOL v657 = 0;
        }
        FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v649, 1);
        int v726 = FirstNonPHIOrDbg[16];
        if ((v726 - 29) <= 0xA)
        {
          uint64_t v727 = *(void *)(*((void *)v649 + 7) + 80);
          uint64_t v728 = v727 ? v727 - 24 : 0;
          char v729 = v649 == (llvm::BasicBlock *)v728 || v657;
          if ((v729 & 1) == 0)
          {
            if (llvm::TryToSimplifyUncondBranchFromEmptyBlock(v649, *(llvm::BasicBlock **)(a1 + 8), v724))
            {
              int v699 = 1;
              int v4 = v1315;
              uint64_t v3 = a1;
              goto LABEL_1922;
            }
            int v726 = FirstNonPHIOrDbg[16];
          }
        }
        int v1314 = v1331 | v1327;
        if (v726 != 81
          || (*((_WORD *)FirstNonPHIOrDbg + 9) & 0x3E) != 0x20
          || *(unsigned char *)(*((void *)FirstNonPHIOrDbg - 4) + 16) != 16)
        {
          v989 = FirstNonPHIOrDbg + 24;
          goto LABEL_1892;
        }
        v987 = (uint64_t *)(FirstNonPHIOrDbg - 64);
        v988 = (char **)(FirstNonPHIOrDbg + 32);
        do
        {
          v989 = *v988;
          uint64_t v990 = (uint64_t)(*v988 - 24);
          if (v989) {
            uint64_t v991 = v990;
          }
          else {
            uint64_t v991 = 0;
          }
          BOOL v992 = sub_1CBF63B28(v991);
          v988 = (char **)(v989 + 8);
        }
        while (v992);
        if (*(unsigned __int8 *)(v991 + 16) - 29 > 0xA) {
          goto LABEL_1892;
        }
        v993 = (llvm::BasicBlock *)*((void *)FirstNonPHIOrDbg + 5);
        v994 = (void **)*((void *)v993 + 6);
        uint64_t v995 = v994 ? (uint64_t)(v994 - 3) : 0;
        if (*(unsigned char *)(v995 + 16) == 83) {
          goto LABEL_1892;
        }
        uint64_t v996 = *((void *)FirstNonPHIOrDbg + 1);
        if (!v996) {
          goto LABEL_1892;
        }
        if (*(void *)(v996 + 8)) {
          goto LABEL_1892;
        }
        uint64_t v1184 = *((void *)FirstNonPHIOrDbg - 8);
        v1346 = (void *)*((void *)FirstNonPHIOrDbg - 4);
        uint64_t v1185 = llvm::BasicBlock::getSinglePredecessor(v993);
        if (!v1185) {
          goto LABEL_1892;
        }
        uint64_t v1186 = *(void *)(v1185 + 40);
        uint64_t v1187 = v1186 ? v1186 - 24 : 0;
        uint64_t v1188 = *(unsigned __int8 *)(v1187 + 16) - 29 >= 0xB ? 0 : v1187;
        if (*(unsigned char *)(v1188 + 16) != 31) {
          goto LABEL_1892;
        }
        int v1189 = *(_DWORD *)(v1188 + 20);
        v1190 = (v1189 & 0x40000000) != 0 ? *(void **)(v1188 - 8) : (void *)(v1188 - 32 * (v1189 & 0x7FFFFFF));
        if (*v1190 != v1184) {
          goto LABEL_1892;
        }
        if ((llvm::BasicBlock *)v1190[4] == v993)
        {
          sub_1CC025540(v1188, (uint64_t)v1346);
          if (v1192 == -2)
          {
            v1193 = (void ***)*((void *)v993 + 5);
            if (v1193 == (void ***)((char *)v993 + 40))
            {
              v1194 = 0;
            }
            else
            {
              if (v1193) {
                v1194 = v1193 - 3;
              }
              else {
                v1194 = 0;
              }
              if (*((unsigned __int8 *)v1194 + 16) - 29 >= 0xB) {
                v1194 = 0;
              }
            }
            if (*((unsigned char *)v1194 + 16) == 30)
            {
LABEL_2308:
              v1199 = (llvm::BasicBlock **)(v1194 - 4);
            }
            else
            {
              switch(*((unsigned char *)v1194 + 16))
              {
                case '!':
                  v1199 = (llvm::BasicBlock **)(v1194 - 12);
                  break;
                case '""':
                case '#':
                  goto LABEL_2521;
                case '$':
                  if ((*((_WORD *)v1194 + 9) & 1) == 0)
                  {
                    v1334 = 0;
                    goto LABEL_2310;
                  }
                  int v1226 = *((_DWORD *)v1194 + 5);
LABEL_2513:
                  v1227 = &v1194[-4 * (v1226 & 0x7FFFFFF)];
LABEL_2343:
                  v1199 = (llvm::BasicBlock **)(v1227 + 4);
                  break;
                case '%':
                  goto LABEL_2308;
                case '\'':
                  v1199 = (llvm::BasicBlock **)&v1194[-4 * *((unsigned int *)v1194 + 20) - 8];
                  break;
                default:
                  int v1226 = *((_DWORD *)v1194 + 5);
                  if ((v1226 & 0x40000000) == 0) {
                    goto LABEL_2513;
                  }
                  v1227 = (void ***)*(v1194 - 1);
                  goto LABEL_2343;
              }
            }
            v1334 = *v1199;
LABEL_2310:
            uint64_t v1200 = *(void *)(*((void *)FirstNonPHIOrDbg + 1) + 24);
            if (v1200 && *(unsigned char *)(v1200 + 16) == 83)
            {
              uint64_t v1201 = *((void *)v1334 + 6);
              uint64_t v1202 = v1201 ? v1201 - 24 : 0;
              if (v1200 == v1202)
              {
                uint64_t v1203 = *(void *)(v1200 + 32);
                uint64_t v1204 = v1203 ? v1203 - 24 : 0;
                if (*(unsigned char *)(v1204 + 16) != 83)
                {
                  v1205 = **(uint64_t ***)v993;
                  uint64_t v1206 = *v1205;
                  v1207 = *(llvm::Value **)(*v1205 + 1560);
                  if (!v1207)
                  {
                    v1280 = *(llvm::ConstantInt **)(v1206 + 1888);
                    unsigned int v1281 = *(_DWORD *)(v1206 + 1896);
                    v1411.i32[0] = v1281 >> 8;
                    if (v1281 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v1281 <= 0xFF) {
                      char v1282 = 0;
                    }
                    else {
                      char v1282 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1281) + 63);
                    }
                    v1410 = (void *)(v1282 & 1);
                    v1207 = (llvm::Value *)llvm::ConstantInt::get(v1280, (llvm::LLVMContext *)&v1410, v1191);
                    if (v1411.i32[0] >= 0x41u && v1410) {
                      MEMORY[0x1D25D9CB0](v1410, 0x1000C8000313F17);
                    }
                    *(void *)(v1206 + 1560) = v1207;
                    uint64_t v1206 = ***(void ***)v993;
                  }
                  v1208 = *(llvm::Value **)(v1206 + 1568);
                  if (!v1208)
                  {
                    v1278 = *(llvm::ConstantInt **)(v1206 + 1888);
                    unsigned int v1279 = *(_DWORD *)(v1206 + 1896);
                    v1411.i32[0] = v1279 >> 8;
                    if (v1279 >> 8 > 0x40) {
                      operator new[]();
                    }
                    v1410 = 0;
                    v1208 = (llvm::Value *)llvm::ConstantInt::get(v1278, (llvm::LLVMContext *)&v1410, v1191);
                    if (v1411.i32[0] >= 0x41u && v1410) {
                      MEMORY[0x1D25D9CB0](v1410, 0x1000C8000313F17);
                    }
                    *(void *)(v1206 + 1568) = v1208;
                  }
                  if ((*((_WORD *)FirstNonPHIOrDbg + 9) & 0x3F) == 0x20) {
                    v1209 = v1208;
                  }
                  else {
                    v1209 = v1207;
                  }
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)FirstNonPHIOrDbg, v1209, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
              }
            }
LABEL_1892:
            v997 = (unsigned __int8 *)(v989 - 24);
            if (!v989) {
              v997 = 0;
            }
            int v998 = v997[16];
            if (v998 == 94) {
              v999 = v997;
            }
            else {
              v999 = 0;
            }
            if (v989 && v998 == 94)
            {
              do
              {
                v989 = (char *)*((void *)v989 + 1);
                if (v989) {
                  uint64_t v1000 = (uint64_t)(v989 - 24);
                }
                else {
                  uint64_t v1000 = 0;
                }
              }
              while (sub_1CBF63B28(v1000));
              if (*(unsigned __int8 *)(v1000 + 16) - 29 <= 0xA)
              {
                uint64_t v1001 = *(void *)(a1 + 8);
                Uniqueuint64_t Successor = llvm::BasicBlock::getUniqueSuccessor(v649);
                uint64_t v1003 = *(void *)(UniqueSuccessor + 48);
                uint64_t v1004 = v1003 ? v1003 - 24 : 0;
                if (*(unsigned char *)(v1004 + 16) != 83)
                {
                  uint64_t v1005 = *(void *)(UniqueSuccessor + 8);
                  if (v1005)
                  {
                    while (1)
                    {
                      uint64_t v1006 = *(void *)(v1005 + 24);
                      unsigned int v1007 = *(unsigned __int8 *)(v1006 + 16);
                      BOOL v1008 = v1006 && v1007 >= 0x1C;
                      if (v1008 && v1007 - 29 <= 0xA) {
                        break;
                      }
                      uint64_t v1005 = *(void *)(v1005 + 8);
                      if (!v1005) {
                        goto LABEL_1918;
                      }
                    }
LABEL_1931:
                    unint64_t v1013 = *(void *)(v1006 + 40);
                    if ((llvm::BasicBlock *)v1013 != v649)
                    {
                      uint64_t v1014 = *(void *)(v1013 + 48);
                      v1015 = v1014 ? (llvm::Instruction *)(v1014 - 24) : 0;
                      if (v1014
                        && *((unsigned char *)v1015 + 16) == 94
                        && llvm::Instruction::isIdenticalToWhenDefined(v1015, (const llvm::Instruction *)v999)&& (v999[17] ^ *((unsigned __int8 *)v1015 + 17)) <= 1)
                      {
                        do
                        {
                          uint64_t v1014 = *(void *)(v1014 + 8);
                          if (v1014) {
                            v1016 = (llvm::Instruction *)(v1014 - 24);
                          }
                          else {
                            v1016 = 0;
                          }
                        }
                        while (sub_1CBF63B28((uint64_t)v1016));
                        BOOL v1017 = v1014 && *((unsigned char *)v1016 + 16) == 30;
                        if (v1017
                          && llvm::Instruction::isIdenticalToWhenDefined(v1016, (const llvm::Instruction *)v644)&& (*(unsigned __int8 *)(v644 + 17) ^ *((unsigned __int8 *)v1016 + 17)) <= 1)
                        {
                          for (uint64_t j = *((void *)v649 + 1); j; uint64_t j = *(void *)(j + 8))
                          {
                            uint64_t v1019 = *(void *)(j + 24);
                            unsigned int v1020 = *(unsigned __int8 *)(v1019 + 16);
                            if (v1019) {
                              BOOL v1021 = v1020 >= 0x1C;
                            }
                            else {
                              BOOL v1021 = 0;
                            }
                            if (v1021 && v1020 - 29 < 0xB) {
                              break;
                            }
                          }
                          v1410 = (void *)1;
                          for (uint64_t k = 8; k != 136; k += 16)
                            *(int64x2_t *)((char *)&v1410 + k) = v1316;
                          v1425 = &v1427;
                          uint64_t v1426 = 0x1000000000;
                          sub_1CD228FFC(&v1410, j);
                          if (v1426)
                          {
                            v1343 = 0;
                            v1025 = 0;
                            v1024 = 0;
                            v1231 = (llvm::BasicBlock **)v1425;
                            v1309 = (char *)v1425 + 8 * v1426;
                            __pg = (unint64_t **)(v1013 + 8);
                            uint64_t v1296 = (unint64_t)v649 | 4;
                            v1302 = (llvm::BasicBlock *)(v1013 & 0xFFFFFFFFFFFFFFFBLL);
                            do
                            {
                              size_t v1330 = (size_t)v1231;
                              v1335 = *v1231;
                              v1232 = (llvm::BasicBlock *)*((void *)*v1231 + 5);
                              if (v1232 == (llvm::BasicBlock *)((char *)*v1231 + 40))
                              {
                                uint64_t v1233 = 0;
                              }
                              else
                              {
                                if (v1232) {
                                  uint64_t v1233 = (uint64_t)v1232 - 24;
                                }
                                else {
                                  uint64_t v1233 = 0;
                                }
                                if (*(unsigned __int8 *)(v1233 + 16) - 29 >= 0xB) {
                                  uint64_t v1233 = 0;
                                }
                              }
                              v1234 = (unint64_t *)(v1233 - 64);
                              if (*(void *)(v1233 - 64))
                              {
                                **(void **)(v1233 - 48) = *(void *)(v1233 - 56);
                                uint64_t v1235 = *(void *)(v1233 - 56);
                                if (v1235) {
                                  *(void *)(v1235 + 16) = *(void *)(v1233 - 48);
                                }
                              }
                              unint64_t *v1234 = v1013;
                              if (v1013)
                              {
                                v1236 = *__pg;
                                *(void *)(v1233 - 56) = *__pg;
                                if (v1236) {
                                  v1236[2] = v1233 - 56;
                                }
                                *(void *)(v1233 - 48) = __pg;
                                *__pg = v1234;
                              }
                              if (v1001)
                              {
                                if (v1025 >= v1343)
                                {
                                  uint64_t v1238 = ((char *)v1025 - (char *)v1024) >> 4;
                                  unint64_t v1239 = v1238 + 1;
                                  if ((unint64_t)(v1238 + 1) >> 60) {
                                    goto LABEL_2519;
                                  }
                                  if (v1343 - v1024 > v1239) {
                                    unint64_t v1239 = v1343 - v1024;
                                  }
                                  if ((unint64_t)((char *)v1343 - (char *)v1024) >= 0x7FFFFFFFFFFFFFF0) {
                                    unint64_t v1240 = 0xFFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1240 = v1239;
                                  }
                                  if (v1240)
                                  {
                                    if (v1240 >> 60) {
                                      goto LABEL_2520;
                                    }
                                    v1241 = (char *)operator new(16 * v1240);
                                  }
                                  else
                                  {
                                    v1241 = 0;
                                  }
                                  v1242 = (llvm::BasicBlock **)&v1241[16 * v1238];
                                  *v1242 = v1335;
                                  v1242[1] = v1302;
                                  if (v1025 == v1024)
                                  {
                                    v1024 = (llvm::BasicBlock **)&v1241[16 * v1238];
                                  }
                                  else
                                  {
                                    v1243 = &v1241[16 * v1238];
                                    do
                                    {
                                      *((_OWORD *)v1243 - 1) = *((_OWORD *)v1025 - 1);
                                      v1243 -= 16;
                                      v1025 -= 2;
                                    }
                                    while (v1025 != v1024);
                                    v1025 = v1024;
                                    v1024 = (llvm::BasicBlock **)v1243;
                                  }
                                  v1343 = (llvm::BasicBlock **)&v1241[16 * v1240];
                                  v1237 = v1242 + 2;
                                  if (v1025) {
                                    operator delete(v1025);
                                  }
                                }
                                else
                                {
                                  *v1025 = v1335;
                                  v1025[1] = v1302;
                                  v1237 = v1025 + 2;
                                }
                                if (v1237 >= v1343)
                                {
                                  uint64_t v1244 = ((char *)v1237 - (char *)v1024) >> 4;
                                  unint64_t v1245 = v1244 + 1;
                                  if ((unint64_t)(v1244 + 1) >> 60) {
                                    goto LABEL_2519;
                                  }
                                  if (v1343 - v1024 > v1245) {
                                    unint64_t v1245 = v1343 - v1024;
                                  }
                                  if ((unint64_t)((char *)v1343 - (char *)v1024) >= 0x7FFFFFFFFFFFFFF0) {
                                    unint64_t v1246 = 0xFFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1246 = v1245;
                                  }
                                  if (v1246)
                                  {
                                    if (v1246 >> 60) {
                                      goto LABEL_2520;
                                    }
                                    v1247 = (char *)operator new(16 * v1246);
                                  }
                                  else
                                  {
                                    v1247 = 0;
                                  }
                                  v1248 = (llvm::BasicBlock **)&v1247[16 * v1244];
                                  v1343 = (llvm::BasicBlock **)&v1247[16 * v1246];
                                  *v1248 = v1335;
                                  v1248[1] = (llvm::BasicBlock *)v1296;
                                  v1025 = v1248 + 2;
                                  if (v1237 == v1024) {
                                    goto LABEL_2406;
                                  }
                                  do
                                  {
                                    *((_OWORD *)v1248 - 1) = *((_OWORD *)v1237 - 1);
                                    v1248 -= 2;
                                    v1237 -= 2;
                                  }
                                  while (v1237 != v1024);
                                  if (v1024) {
LABEL_2406:
                                  }
                                    operator delete(v1024);
                                  v1024 = v1248;
                                }
                                else
                                {
                                  *v1237 = v1335;
                                  v1237[1] = (llvm::BasicBlock *)v1296;
                                  v1025 = v1237 + 2;
                                }
                              }
                              v1231 = (llvm::BasicBlock **)(v1330 + 8);
                            }
                            while ((char *)(v1330 + 8) != v1309);
                          }
                          else
                          {
                            v1024 = 0;
                            v1025 = 0;
                            v1343 = 0;
                          }
                          v1249 = *(void **)(v1013 + 48);
                          v1250 = (void *)(v1013 + 40);
                          if (v1249 != (void *)(v1013 + 40))
                          {
                            do
                            {
                              v1251 = (void *)v1249[1];
                              if (v1249) {
                                uint64_t v1252 = (uint64_t)(v1249 - 3);
                              }
                              else {
                                uint64_t v1252 = 0;
                              }
                              if (sub_1CBF63B28(v1252)) {
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                              }
                              v1249 = v1251;
                            }
                            while (v1251 != v1250);
                          }
                          v1253 = (void *)*((void *)v649 + 5);
                          if (v1253 == (void *)((char *)v649 + 40))
                          {
                            uint64_t v1254 = 0;
                            v1255 = 0;
LABEL_2433:
                            int v1260 = 0;
                          }
                          else
                          {
                            uint64_t v1254 = (uint64_t)(v1253 - 3);
                            if (v1253) {
                              v1256 = (llvm::Instruction *)(v1253 - 3);
                            }
                            else {
                              v1256 = 0;
                            }
                            int v1257 = *((unsigned __int8 *)v1256 + 16);
                            int v1258 = v1257 - 29;
                            if ((v1257 - 29) >= 0xB) {
                              v1255 = 0;
                            }
                            else {
                              v1255 = v1256;
                            }
                            if (v1257 != 30)
                            {
                              int v1259 = 0;
                              switch(v1258)
                              {
                                case 0:
                                case 5:
                                case 6:
                                  goto LABEL_2428;
                                case 1:
                                  goto LABEL_2521;
                                case 2:
                                  int v1259 = (*((_DWORD *)v1256 + 5) >> 1) & 0x3FFFFFF;
                                  goto LABEL_2428;
                                case 3:
                                case 9:
                                  int v1259 = (*((_DWORD *)v1256 + 5) & 0x7FFFFFF) - 1;
                                  goto LABEL_2428;
                                case 4:
                                  int v1259 = 2;
                                  goto LABEL_2428;
                                case 7:
                                  int v1259 = *((_WORD *)v1256 + 9) & 1;
                                  goto LABEL_2428;
                                case 8:
                                  int v1259 = 1;
                                  goto LABEL_2428;
                                case 10:
                                  int v1259 = *((_DWORD *)v1256 + 20) + 1;
                                  goto LABEL_2428;
                                default:
                                  uint64_t v1254 = 0;
                                  goto LABEL_2433;
                              }
                            }
                            if ((*((_DWORD *)v1256 + 5) & 0x7FFFFFF) == 3) {
                              int v1259 = 2;
                            }
                            else {
                              int v1259 = 1;
                            }
LABEL_2428:
                            int v1260 = v1259;
                          }
                          v1388 = (void *)1;
                          for (uint64_t m = 8; m != 136; m += 16)
                            *(int64x2_t *)((char *)&v1388 + m) = v1316;
                          v1407 = &v1409;
                          uint64_t v1408 = 0x1000000000;
                          sub_1CD891B8C(&v1388, v1255, 0, v1254, v1260);
                          if (v1408)
                          {
                            v1262 = (llvm::Type **)v1407;
                            v1336 = (llvm::BasicBlock *)((char *)v1407 + 8 * v1408);
                            do
                            {
                              v1263 = *v1262;
                              llvm::BasicBlock::removePredecessor(*v1262, v649, 0);
                              if (v1001)
                              {
                                uint64_t v1264 = (unint64_t)v1263 | 4;
                                if (v1025 >= v1343)
                                {
                                  uint64_t v1266 = ((char *)v1025 - (char *)v1024) >> 4;
                                  unint64_t v1267 = v1266 + 1;
                                  if ((unint64_t)(v1266 + 1) >> 60) {
                                    goto LABEL_2519;
                                  }
                                  if (v1343 - v1024 > v1267) {
                                    unint64_t v1267 = v1343 - v1024;
                                  }
                                  if ((unint64_t)((char *)v1343 - (char *)v1024) >= 0x7FFFFFFFFFFFFFF0) {
                                    unint64_t v1268 = 0xFFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v1268 = v1267;
                                  }
                                  if (v1268)
                                  {
                                    if (v1268 >> 60) {
                                      goto LABEL_2520;
                                    }
                                    v1269 = (char *)operator new(16 * v1268);
                                  }
                                  else
                                  {
                                    v1269 = 0;
                                  }
                                  v1270 = &v1269[16 * v1266];
                                  *(void *)v1270 = v649;
                                  *((void *)v1270 + 1) = v1264;
                                  if (v1025 == v1024)
                                  {
                                    v1024 = (llvm::BasicBlock **)&v1269[16 * v1266];
                                  }
                                  else
                                  {
                                    v1271 = &v1269[16 * v1266];
                                    do
                                    {
                                      *((_OWORD *)v1271 - 1) = *((_OWORD *)v1025 - 1);
                                      v1271 -= 16;
                                      v1025 -= 2;
                                    }
                                    while (v1025 != v1024);
                                    v1025 = v1024;
                                    v1024 = (llvm::BasicBlock **)v1271;
                                  }
                                  v1343 = (llvm::BasicBlock **)&v1269[16 * v1268];
                                  v1265 = (llvm::BasicBlock **)(v1270 + 16);
                                  if (v1025) {
                                    operator delete(v1025);
                                  }
                                }
                                else
                                {
                                  *v1025 = v649;
                                  v1025[1] = (llvm::BasicBlock *)v1264;
                                  v1265 = v1025 + 2;
                                }
                              }
                              else
                              {
                                v1265 = v1025;
                              }
                              ++v1262;
                              v1025 = v1265;
                            }
                            while (v1262 != (llvm::Type **)v1336);
                          }
                          v1272 = 0;
                          uint64_t v1273 = **(void **)v644;
                          *(void *)&long long v1372 = &v1373;
                          *((void *)&v1372 + 1) = 0x200000000;
                          uint64_t v1377 = v1273;
                          v1378 = &v1386;
                          v1379 = &v1387;
                          uint64_t v1380 = 0;
                          int v1381 = 0;
                          __int16 v1382 = 512;
                          char v1383 = 7;
                          uint64_t v1375 = 0;
                          uint64_t v1376 = 0;
                          uint64_t v1384 = 0;
                          uint64_t v1385 = 0;
                          v1386 = &unk_1F2616E88;
                          v1387 = &unk_1F2617008;
                          uint64_t v1375 = *(void *)(v644 + 40);
                          uint64_t v1376 = v644 + 24;
                          v1274 = *(void **)(v644 + 48);
                          v1428 = v1274;
                          if (v1274)
                          {
                            llvm::MetadataTracking::track((uint64_t)&v1428, (unsigned __int8 *)v1274, 2);
                            v1272 = v1428;
                          }
                          sub_1CB8461A4((uint64_t)&v1372, 0, (uint64_t)v1272);
                          if (!v1428)
                          {
LABEL_2463:
                            LLVMBuildUnreachable_0((uint64_t)&v1372);
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                          }
                          int v1275 = *(unsigned __int8 *)v1428;
                          if ((v1275 - 4) > 0x1E)
                          {
                            if ((v1275 - 3) >= 0xFFFFFFFE) {
                              v1283 = v1428;
                            }
                            else {
                              v1283 = 0;
                            }
                            if ((v1275 - 3) < 0xFFFFFFFE)
                            {
                              if (v1275 == 3) {
                                *((void *)v1428 + 1) = 0;
                              }
                              goto LABEL_2463;
                            }
                            unint64_t v1277 = (unint64_t)v1283 + 8;
                          }
                          else
                          {
                            if ((*((unsigned char *)v1428 + 1) & 0x7F) != 2 && !*((_DWORD *)v1428 + 3)) {
                              goto LABEL_2463;
                            }
                            uint64_t v1276 = *((void *)v1428 + 2);
                            if ((v1276 & 4) == 0) {
                              goto LABEL_2463;
                            }
                            unint64_t v1277 = v1276 & 0xFFFFFFFFFFFFFFF8;
                            if (!v1277) {
                              goto LABEL_2463;
                            }
                          }
                          v1431 = &v1428;
                          sub_1CC5FA668(v1277 + 16, &v1431);
                          goto LABEL_2463;
                        }
                      }
                    }
                    while (1)
                    {
                      uint64_t v1005 = *(void *)(v1005 + 8);
                      if (!v1005) {
                        break;
                      }
                      uint64_t v1006 = *(void *)(v1005 + 24);
                      unsigned int v1010 = *(unsigned __int8 *)(v1006 + 16);
                      if (v1006) {
                        BOOL v1011 = v1010 >= 0x1C;
                      }
                      else {
                        BOOL v1011 = 0;
                      }
                      if (v1011 && v1010 - 29 < 0xB) {
                        goto LABEL_1931;
                      }
                    }
                  }
                }
              }
            }
LABEL_1918:
            uint64_t v3 = a1;
            int v699 = llvm::FoldBranchToCommonDest((llvm *)v644, *(llvm::BranchInst **)(a1 + 8), 0, *(llvm::MemorySSAUpdater **)a1, (const llvm::TargetTransformInfo *)**(unsigned int **)(a1 + 40));
            if (v699)
            {
              int v699 = 1;
              *(unsigned char *)(a1 + 48) = 1;
            }
            int v4 = v1315;
LABEL_1921:
            LODWORD(v61) = v1314;
            goto LABEL_1922;
          }
          uint64_t v1195 = ***(void ***)v993;
          if ((*((_WORD *)FirstNonPHIOrDbg + 9) & 0x3F) == 0x20)
          {
            v1196 = *(llvm::Value **)(v1195 + 1568);
            if (!v1196)
            {
              v1197 = *(llvm::ConstantInt **)(v1195 + 1888);
              unsigned int v1198 = *(_DWORD *)(v1195 + 1896);
              v1411.i32[0] = v1198 >> 8;
              if (v1198 >> 8 > 0x40) {
                operator new[]();
              }
              v1410 = 0;
              v1196 = (llvm::Value *)llvm::ConstantInt::get(v1197, (llvm::LLVMContext *)&v1410, v1191);
              if (v1411.i32[0] >= 0x41u && v1410) {
                MEMORY[0x1D25D9CB0](v1410, 0x1000C8000313F17);
              }
              *(void *)(v1195 + 1568) = v1196;
            }
          }
          else
          {
            v1196 = *(llvm::Value **)(v1195 + 1560);
            if (!v1196)
            {
              v1228 = *(llvm::ConstantInt **)(v1195 + 1888);
              unsigned int v1229 = *(_DWORD *)(v1195 + 1896);
              v1411.i32[0] = v1229 >> 8;
              if (v1229 >> 8 > 0x40) {
                operator new[]();
              }
              if (v1229 <= 0xFF) {
                char v1230 = 0;
              }
              else {
                char v1230 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1229) + 63);
              }
              v1410 = (void *)(v1230 & 1);
              v1196 = (llvm::Value *)llvm::ConstantInt::get(v1228, (llvm::LLVMContext *)&v1410, v1191);
              if (v1411.i32[0] >= 0x41u && v1410) {
                MEMORY[0x1D25D9CB0](v1410, 0x1000C8000313F17);
              }
              *(void *)(v1195 + 1560) = v1196;
            }
          }
LABEL_2303:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)FirstNonPHIOrDbg, v1196, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        uint64_t v1210 = sub_1CD4BF244(v1188, (uint64_t)v993);
        if (*v987)
        {
          **((void **)FirstNonPHIOrDbg - 6) = *((void *)FirstNonPHIOrDbg - 7);
          uint64_t v1214 = *((void *)FirstNonPHIOrDbg - 7);
          if (v1214) {
            *(void *)(v1214 + 16) = *((void *)FirstNonPHIOrDbg - 6);
          }
        }
        uint64_t *v987 = v1210;
        if (v1210)
        {
          uint64_t v1217 = *(void *)(v1210 + 8);
          v1215 = (uint64_t **)(v1210 + 8);
          uint64_t v1216 = v1217;
          *((void *)FirstNonPHIOrDbg - 7) = v1217;
          if (v1217) {
            *(void *)(v1216 + 16) = FirstNonPHIOrDbg - 56;
          }
          *((void *)FirstNonPHIOrDbg - 6) = v1215;
          *v1215 = v987;
        }
        v1218 = *(void **)(a1 + 16);
        uint64_t v1390 = 0;
        uint64_t v1391 = 0;
        v1389 = 0;
        v1388 = v1218;
        v1392 = FirstNonPHIOrDbg;
        __int16 v1393 = 257;
        int v1219 = *((_DWORD *)FirstNonPHIOrDbg + 5);
        if ((v1219 & 0x40000000) != 0)
        {
          v1221 = (char *)*((void *)FirstNonPHIOrDbg - 1);
          unint64_t v1220 = v1219 & 0x7FFFFFF;
        }
        else
        {
          unint64_t v1220 = v1219 & 0x7FFFFFF;
          v1221 = &FirstNonPHIOrDbg[-32 * v1220];
        }
        v1410 = &v1411.u64[1];
        v1411.i64[0] = 0x800000000;
        if (v1220 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v1220)
        {
          uint64_t v1222 = 32 * v1220;
          v1223 = &v1411.i64[1];
          do
          {
            uint64_t v1224 = *(void *)v1221;
            v1221 += 32;
            *v1223++ = v1224;
            v1222 -= 32;
          }
          while (v1222);
          v1225 = (char *)v1410;
        }
        else
        {
          v1225 = &v1411.i8[8];
        }
        v1411.i32[0] = v1220;
        v1196 = llvm::SimplifyInstructionWithOperands((llvm *)FirstNonPHIOrDbg, (uint64_t)v1225, v1220, (uint64_t)&v1388, v1211, v1212, v1213);
        if (v1410 == &v1411.u64[1])
        {
          if (v1196) {
            goto LABEL_2303;
          }
        }
        else
        {
          free(v1410);
          if (v1196) {
            goto LABEL_2303;
          }
        }
        uint64_t v3 = a1;
        *(unsigned char *)(a1 + 48) = 1;
        int v699 = 1;
        int v4 = v1315;
        goto LABEL_1921;
      case 0x1F:
        int v699 = sub_1CD2197A4(a1, (char *)v644, (uint64_t *)&v1356);
        goto LABEL_1922;
      case 0x20:
        v658 = *(llvm::BasicBlock **)(v644 + 40);
        v1388 = &v1392;
        v1389 = &v1392;
        uint64_t v1390 = 8;
        LODWORD(v1391) = 0;
        v1410 = (void *)1;
        int64x2_t v1411 = v648;
        int64x2_t v1412 = v648;
        int64x2_t v1413 = v648;
        int64x2_t v1414 = v648;
        v1415 = &v1417;
        uint64_t v1416 = 0x800000000;
        int v659 = *(_DWORD *)(v644 + 20) & 0x7FFFFFF;
        int v660 = 0;
        int v661 = v659 - 1;
        if (v659 == 1) {
          goto LABEL_1274;
        }
        uint64_t v662 = 0;
        do
        {
          *(void *)&long long v1372 = 0;
          int v663 = *(_DWORD *)(v644 + 20);
          if ((v663 & 0x40000000) != 0) {
            uint64_t v664 = *(void *)(v644 - 8);
          }
          else {
            uint64_t v664 = v644 - 32 * (v663 & 0x7FFFFFF);
          }
          uint64_t v665 = (v662 + 1);
          v666 = *(llvm::Type **)(v664 + 32 * v665);
          *(void *)&long long v1372 = v666;
          __int16 v667 = *((_WORD *)v666 + 9);
          if ((v667 & 0x7FFF) == 0) {
            goto LABEL_1263;
          }
          v668 = (char *)v1389;
          uint64_t v669 = HIDWORD(v1390);
          if (v1389 != v1388)
          {
            unsigned int v673 = v1390;
            goto LABEL_1241;
          }
          if (!HIDWORD(v1390))
          {
LABEL_1238:
            unsigned int v673 = v1390;
            if (HIDWORD(v1390) < v1390)
            {
              ++HIDWORD(v1390);
              *((void *)v1389 + v669) = v666;
              goto LABEL_1266;
            }
LABEL_1241:
            if (3 * v673 <= 4 * (HIDWORD(v1390) - (int)v1391))
            {
              if (v673 >= 0x40) {
                v673 *= 2;
              }
              else {
                unsigned int v673 = 128;
              }
            }
            else if (v673 - HIDWORD(v1390) >= v673 >> 3)
            {
              goto LABEL_1243;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1388, v673);
            unsigned int v673 = v1390;
            v668 = (char *)v1389;
LABEL_1243:
            unsigned int v674 = v673 - 1;
            unsigned int v675 = (v673 - 1) & ((v666 >> 4) ^ (v666 >> 9));
            v676 = &v668[8 * v675];
            v677 = *(llvm::Type **)v676;
            if (*(void *)v676 == -1)
            {
              v678 = 0;
LABEL_1255:
              if (v678) {
                v682 = (llvm::Type **)v678;
              }
              else {
                v682 = (llvm::Type **)v676;
              }
              if (*v682 != v666)
              {
                if (*v682 == (llvm::Type *)-2) {
                  LODWORD(v1391) = v1391 - 1;
                }
                else {
                  ++HIDWORD(v1390);
                }
                *v682 = v666;
                goto LABEL_1266;
              }
            }
            else
            {
              v678 = 0;
              int v679 = 1;
              while (v677 != v666)
              {
                if (v678) {
                  BOOL v680 = 0;
                }
                else {
                  BOOL v680 = v677 == (llvm::Type *)-2;
                }
                if (v680) {
                  v678 = v676;
                }
                unsigned int v681 = v675 + v679++;
                unsigned int v675 = v681 & v674;
                v676 = &v668[8 * (v681 & v674)];
                v677 = *(llvm::Type **)v676;
                if (*(void *)v676 == -1) {
                  goto LABEL_1255;
                }
              }
            }
            goto LABEL_1262;
          }
          v670 = 0;
          uint64_t v671 = 8 * HIDWORD(v1390);
          v672 = (llvm::Type **)v1389;
          while (*v672 != v666)
          {
            if (*v672 == (llvm::Type *)-2) {
              v670 = v672;
            }
            ++v672;
            v671 -= 8;
            if (!v671)
            {
              if (!v670) {
                goto LABEL_1238;
              }
              *v670 = v666;
              LODWORD(v1391) = v1391 - 1;
              goto LABEL_1266;
            }
          }
LABEL_1262:
          v666 = (llvm::Type *)v1372;
          __int16 v667 = *(_WORD *)(v1372 + 18);
LABEL_1263:
          if ((v667 & 0x7FFF) == 0)
          {
            sub_1CC261774((uint64_t)&v1410, (uint64_t *)&v1372);
            v666 = (llvm::Type *)v1372;
          }
          llvm::BasicBlock::removePredecessor(v666, v658, 0);
          llvm::IndirectBrInst::removeDestination(v644, v662);
          --v661;
          int v660 = 1;
          uint64_t v665 = v662;
LABEL_1266:
          uint64_t v662 = v665;
        }
        while (v665 != v661);
LABEL_1274:
        uint64_t v3 = a1;
        LODWORD(v61) = v1331 | v1327;
        if (*(void *)(a1 + 8))
        {
          int v1340 = v660;
          long long v1372 = 0uLL;
          *(void *)&long long v1373 = 0;
          sub_1CC292E4C((uint64_t)&v1372, v1416);
          v683 = (llvm::BasicBlock **)*((void *)&v1372 + 1);
          if (v1416)
          {
            v684 = (char *)v1415;
            v685 = (char *)v1415 + 8 * v1416;
            do
            {
              uint64_t v686 = *(void *)v684 | 4;
              if ((unint64_t)v683 >= (unint64_t)v1373)
              {
                v688 = (llvm::BasicBlock **)v1372;
                uint64_t v689 = (uint64_t)((uint64_t)v683 - v1372) >> 4;
                unint64_t v690 = v689 + 1;
                if ((unint64_t)(v689 + 1) >> 60) {
                  goto LABEL_2519;
                }
                uint64_t v691 = v1373 - v1372;
                if ((uint64_t)(v1373 - v1372) >> 3 > v690) {
                  unint64_t v690 = v691 >> 3;
                }
                if ((unint64_t)v691 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v692 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v692 = v690;
                }
                if (v692)
                {
                  if (v692 >> 60) {
                    goto LABEL_2520;
                  }
                  v693 = (char *)operator new(16 * v692);
                }
                else
                {
                  v693 = 0;
                }
                v694 = (llvm::BasicBlock **)&v693[16 * v689];
                *v694 = v658;
                v694[1] = (llvm::BasicBlock *)v686;
                v695 = v694;
                if (v683 != v688)
                {
                  do
                  {
                    *((_OWORD *)v695 - 1) = *((_OWORD *)v683 - 1);
                    v695 -= 2;
                    v683 -= 2;
                  }
                  while (v683 != v688);
                  v683 = (llvm::BasicBlock **)v1372;
                }
                v687 = v694 + 2;
                *(void *)&long long v1372 = v695;
                *((void *)&v1372 + 1) = v694 + 2;
                *(void *)&long long v1373 = &v693[16 * v692];
                if (v683) {
                  operator delete(v683);
                }
              }
              else
              {
                *v683 = v658;
                v683[1] = (llvm::BasicBlock *)v686;
                v687 = v683 + 2;
              }
              *((void *)&v1372 + 1) = v687;
              v684 += 8;
              v683 = v687;
            }
            while (v684 != v685);
          }
          else
          {
            v687 = (llvm::BasicBlock **)*((void *)&v1372 + 1);
          }
          uint64_t v3 = a1;
          llvm::DomTreeUpdater::applyUpdates(*(void *)(a1 + 8), (unint64_t *)v1372, (uint64_t)((uint64_t)v687 - v1372) >> 4);
          LODWORD(v61) = v1331 | v1327;
          if ((void)v1372)
          {
            *((void *)&v1372 + 1) = v1372;
            operator delete((void *)v1372);
          }
          int v660 = v1340;
        }
        int v739 = *(_DWORD *)(v644 + 20);
        uint64_t v740 = v739 & 0x7FFFFFF;
        int v4 = v1315;
        if ((v739 & 0x7FFFFFF) == 2)
        {
          if ((v739 & 0x40000000) != 0) {
            uint64_t v742 = *(void *)(v644 - 8);
          }
          else {
            uint64_t v742 = v644 - 64;
          }
          uint64_t v791 = *(void *)(v742 + 32);
          v792 = (char *)operator new(0x60uLL);
          *((_DWORD *)v792 + 13) = *((_DWORD *)v792 + 13) & 0x38000000 | 1;
          *((void *)v792 + 1) = 0;
          *((void *)v792 + 2) = 0;
          *(void *)v792 = 0;
          *((void *)v792 + 4) = ***(void ***)v791 + 1576;
          *((void *)v792 + 3) = v792 + 32;
          *((void *)v792 + 5) = 0;
          v792[48] = 30;
          v792[49] = 0;
          *((_WORD *)v792 + 25) = 0;
          *((_DWORD *)v792 + 13) = 1;
          *(_OWORD *)(v792 + 56) = 0u;
          v793 = v792 + 56;
          *(_OWORD *)(v792 + 72) = 0u;
          *((_DWORD *)v792 + 22) = 0;
          uint64_t v794 = *(void *)(v644 + 40);
          *((void *)v792 + 9) = v794;
          *(_WORD *)(v794 + 18) &= ~0x8000u;
          if ((v792[55] & 0x10) != 0
            && (uint64_t v1028 = *(void *)(v794 + 56)) != 0
            && (v1029 = *(llvm::ValueSymbolTable **)(v1028 + 104)) != 0)
          {
            llvm::ValueSymbolTable::reinsertValue(v1029, (llvm::Value *)(v792 + 32));
            uint64_t v1030 = *(void *)v792;
            uint64_t v1031 = *v645;
            *((void *)v792 + 7) = *v645;
            *((void *)v792 + 8) = v645;
            *(void *)(v1031 + 8) = v793;
            uint64_t *v645 = (uint64_t)v793;
            if (v1030)
            {
              **((void **)v792 + 2) = *((void *)v792 + 1);
              uint64_t v1032 = *((void *)v792 + 1);
              if (v1032) {
                *(void *)(v1032 + 16) = *((void *)v792 + 2);
              }
            }
          }
          else
          {
            uint64_t v795 = *v645;
            *((void *)v792 + 7) = *v645;
            *((void *)v792 + 8) = v645;
            *(void *)(v795 + 8) = v793;
            uint64_t *v645 = (uint64_t)v793;
          }
          *(void *)v792 = v791;
          uint64_t v798 = *(void *)(v791 + 8);
          v797 = (void *)(v791 + 8);
          uint64_t v796 = v798;
          *((void *)v792 + 1) = v798;
          if (v798) {
            *(void *)(v796 + 16) = v792 + 8;
          }
          *((void *)v792 + 2) = v797;
          void *v797 = v792;
          sub_1CD2300A0(v644);
        }
        if (v740 == 1)
        {
          v741 = (llvm::UnreachableInst *)operator new(0x40uLL);
          *((_DWORD *)v741 + 5) &= 0x38000000u;
          llvm::UnreachableInst::UnreachableInst(v741, **(llvm::LLVMContext ***)v644, (llvm::Instruction *)v644);
          sub_1CD2300A0(v644);
        }
        if ((v739 & 0x40000000) != 0) {
          v743 = *(uint64_t **)(v644 - 8);
        }
        else {
          v743 = (uint64_t *)(v644 - 32 * v740);
        }
        uint64_t v799 = *v743;
        if (v799 && *(unsigned char *)(v799 + 16) == 85)
        {
          uint64_t v800 = *(void *)(v799 - 64);
          if (*(unsigned char *)(v800 + 16) != 4) {
            uint64_t v800 = 0;
          }
          uint64_t v801 = *(void *)(v799 - 32);
          if (*(unsigned char *)(v801 + 16) != 4) {
            uint64_t v801 = 0;
          }
          if (v800) {
            BOOL v802 = v801 == 0;
          }
          else {
            BOOL v802 = 1;
          }
          if (!v802)
          {
            sub_1CD232584((void **)v3, v644, *(llvm::Value **)(v799 - 96), *(void **)(v800 - 32), *(void **)(v801 - 32), 0, 0);
            int v660 = 1;
            *(unsigned char *)(v3 + 48) = 1;
          }
        }
        if (v1415 != &v1417) {
          free(v1415);
        }
        if ((v1410 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v1411.i64[0], 8);
        }
        if (v1389 != v1388) {
          free(v1389);
        }
LABEL_1974:
        LODWORD(v61) = v61 | v660;
LABEL_1975:
        if (v1356 != v1358) {
          free(v1356);
        }
LABEL_1977:
        if (v1351 < 0) {
          operator delete(v1350);
        }
        int v2 = this;
LABEL_89:
        v4 |= v61;
        if (*(unsigned char *)(v3 + 48)) {
          continue;
        }
        return v4 & 1;
      case 0x22:
        v700 = *(void **)(v644 + 40);
        v701 = v700 + 5;
        v702 = (void *)v700[6];
        v703 = v702;
        if (v702 == v700 + 5) {
          goto LABEL_1305;
        }
        do
        {
          v704 = v703 - 3;
          if (v703) {
            v705 = v703 - 3;
          }
          else {
            v705 = 0;
          }
          if (*((unsigned char *)v705 + 16) != 83) {
            goto LABEL_1306;
          }
          v703 = (void *)v703[1];
        }
        while (v703 != v701);
LABEL_1305:
        v704 = 0;
LABEL_1306:
        uint64_t v706 = *(void *)(v644 - 32);
        v1332 = (llvm::BasicBlock *)(v700 + 5);
        if (*(unsigned char *)(v706 + 16) == 83)
        {
          v707 = (void *)*v701;
          if ((void *)*v701 == v701)
          {
            v708 = 0;
          }
          else
          {
            if (v707) {
              v708 = v707 - 3;
            }
            else {
              v708 = 0;
            }
            if (*((unsigned __int8 *)v708 + 16) - 29 >= 0xB) {
              v708 = 0;
            }
          }
          if (v704) {
            uint64_t v744 = (uint64_t)(v704 + 3);
          }
          else {
            uint64_t v744 = 0;
          }
          if (v708) {
            uint64_t v745 = (uint64_t)(v708 + 3);
          }
          else {
            uint64_t v745 = 0;
          }
          if (sub_1CD232508(v744, v745))
          {
            v1410 = (void *)1;
            int64x2_t v1411 = v1316;
            int64x2_t v1412 = v1316;
            v1413.i64[0] = (uint64_t)&v1414;
            v1413.i64[1] = 0x400000000;
            uint64_t v746 = *(void *)(v644 - 32);
            int v747 = *(_DWORD *)(v746 + 20);
            uint64_t v748 = v747 & 0x7FFFFFF;
            if ((v747 & 0x7FFFFFF) == 0)
            {
              int v660 = 0;
              goto LABEL_1972;
            }
            uint64_t v749 = 0;
            while (1)
            {
              v1388 = 0;
              int v750 = *(_DWORD *)(v746 + 20);
              if ((v750 & 0x40000000) != 0)
              {
                v752 = *(void **)(*(void *)(v746 - 8) + 32 * *(unsigned int *)(v746 + 60) + 8 * v749);
                v1388 = v752;
                uint64_t v751 = *(void *)(v746 - 8);
              }
              else
              {
                uint64_t v751 = v746 - 32 * (v750 & 0x7FFFFFF);
                v752 = *(void **)(v751 + 32 * *(unsigned int *)(v746 + 60) + 8 * v749);
                v1388 = v752;
              }
              uint64_t v753 = *(void *)(v751 + 32 * v749);
              if ((void *)llvm::BasicBlock::getUniqueSuccessor((llvm::BasicBlock *)v752) != v700) {
                goto LABEL_1458;
              }
              v755 = v1388;
              for (uint64_t n = *((void *)v1388 + 6); ; uint64_t n = *(void *)(n + 8))
              {
                uint64_t v757 = n ? n - 24 : 0;
                if (*(unsigned char *)(v757 + 16) != 83) {
                  break;
                }
              }
              uint64_t v758 = *(unsigned char *)(n - 8) == 94 ? n - 24 : 0;
              if (v753 != v758) {
                goto LABEL_1458;
              }
              v759 = (char *)v1388 + 40;
              uint64_t v760 = *(void *)(v753 + 32);
              BOOL v761 = v760 == *(void *)(v753 + 40) + 40 || v760 == 0;
              BOOL v762 = v761;
              uint64_t v763 = v761 ? 0 : v760 - 24;
              v764 = (void *)*v759;
              if ((void *)*v759 == v759)
              {
                v765 = 0;
              }
              else
              {
                if (v764) {
                  v765 = v764 - 3;
                }
                else {
                  v765 = 0;
                }
                if (*((unsigned __int8 *)v765 + 16) - 29 >= 0xB) {
                  v765 = 0;
                }
              }
              uint64_t v766 = v763 + 24;
              uint64_t v767 = v765 ? (uint64_t)(v765 + 3) : 0;
              uint64_t v768 = v762 ? 0 : v766;
              if (!sub_1CD232508(v768, v767)) {
                goto LABEL_1458;
              }
              if (v1410)
              {
                int v769 = 4;
                v770 = &v1411;
              }
              else
              {
                int v769 = v1411.i32[2];
                if (!v1411.i32[2])
                {
                  v779 = 0;
LABEL_1456:
                  v780 = sub_1CC875030((uint64_t)&v1410, (uint64_t)&v1388, &v1388, v779);
                  void *v780 = v1388;
                  if (v1413.u32[2] >= (unint64_t)v1413.u32[3]) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(v1413.i64[0] + 8 * v1413.u32[2]) = v1388;
                  ++v1413.i32[2];
                  goto LABEL_1458;
                }
                v770 = (int64x2_t *)v1411.i64[0];
              }
              int v771 = v769 - 1;
              unsigned int v772 = v771 & ((v755 >> 4) ^ (v755 >> 9));
              v773 = &v770->i64[v772];
              v774 = (void *)*v773;
              if (v755 != (void *)*v773)
              {
                v775 = 0;
                int v776 = 1;
                while (v774 != (void *)-4096)
                {
                  if (v775) {
                    BOOL v777 = 0;
                  }
                  else {
                    BOOL v777 = v774 == (void *)-8192;
                  }
                  if (v777) {
                    v775 = v773;
                  }
                  unsigned int v778 = v772 + v776++;
                  unsigned int v772 = v778 & v771;
                  v773 = &v770->i64[v772];
                  v774 = (void *)*v773;
                  if (v755 == (void *)*v773) {
                    goto LABEL_1458;
                  }
                }
                if (v775) {
                  v779 = v775;
                }
                else {
                  v779 = v773;
                }
                goto LABEL_1456;
              }
LABEL_1458:
              if (++v749 == v748)
              {
                if (v1413.i32[2])
                {
                  uint64_t v803 = *(void *)v1413.i64[0];
                  int v804 = *(_DWORD *)(v746 + 20);
                  while (1)
                  {
                    unsigned int v805 = v804 & 0x7FFFFFF;
                    if ((v804 & 0x7FFFFFF) == 0) {
                      break;
                    }
                    unsigned int v806 = 0;
                    while (1)
                    {
                      uint64_t v807 = v746 - 32 * v805;
                      if ((v804 & 0x40000000) != 0) {
                        uint64_t v807 = *(void *)(v746 - 8);
                      }
                      if (*(void *)(v807 + 32 * *(unsigned int *)(v746 + 60) + 8 * v806) == v803) {
                        break;
                      }
                      if (v805 == ++v806) {
                        goto LABEL_1548;
                      }
                    }
                    if (v806 == -1) {
                      break;
                    }
                    if (*(llvm::BasicBlock **)v1332 != v1332)
                    {
                      uint64_t v808 = v700[6];
                      v809 = (unsigned __int8 *)(v808 - 24);
                      uint64_t v810 = v808 ? v808 - 24 : 0;
                      if (*(unsigned char *)(v810 + 16) == 83)
                      {
                        v811 = v700;
                        uint64_t v812 = v61;
                        do
                        {
                          uint64_t v813 = *((void *)v809 + 4);
                          v814 = (unsigned __int8 *)(v813 - 24);
                          if (!v813) {
                            v814 = 0;
                          }
                          int v815 = v814[16];
                          if (v815 != 83) {
                            v814 = 0;
                          }
                          v1341 = v814;
                          int v816 = *((_DWORD *)v809 + 5);
                          uint64_t v817 = v816 & 0x7FFFFFF;
                          if ((v816 & 0x7FFFFFF) != 0)
                          {
                            uint64_t v818 = 0;
                            while (1)
                            {
                              v819 = (char *)&v809[-32 * v817];
                              if ((v816 & 0x40000000) != 0) {
                                v819 = (char *)*((void *)v809 - 1);
                              }
                              if (*(void *)&v819[32 * *((unsigned int *)v809 + 15) + 8 * v818] == v803) {
                                break;
                              }
                              if (v817 == ++v818) {
                                goto LABEL_1528;
                              }
                            }
                            uint64_t v820 = v818;
                          }
                          else
                          {
LABEL_1528:
                            uint64_t v820 = 0xFFFFFFFFLL;
                          }
                          uint64_t v821 = v817;
                          if ((v816 & 0x40000000) != 0)
                          {
                            v822 = (char *)*((void *)v809 - 1);
                            v823 = &v822[32 * v820];
                            v824 = (uint64_t *)&v822[32 * v821];
                          }
                          else
                          {
                            v822 = (char *)&v809[-32 * v817];
                            v823 = &v822[32 * v820];
                            v824 = (uint64_t *)v809;
                          }
                          sub_1CC5E4108((uint64_t)&v1388, (uint64_t *)v823 + 4, v824, (uint64_t)&v822[32 * v820]);
                          int v825 = *((_DWORD *)v809 + 5);
                          if ((v825 & 0x40000000) != 0)
                          {
                            v826 = (char *)*((void *)v809 - 1);
                            uint64_t v827 = *((unsigned int *)v809 + 15);
                            v828 = &v826[32 * v827];
                            uint64_t v829 = v825 & 0x7FFFFFF;
                          }
                          else
                          {
                            uint64_t v829 = v825 & 0x7FFFFFF;
                            v826 = (char *)&v809[-32 * v829];
                            uint64_t v827 = *((unsigned int *)v809 + 15);
                            v828 = &v826[32 * v827];
                          }
                          v830 = &v828[8 * v829];
                          v831 = &v828[8 * v820 + 8];
                          v754 = (llvm::DomTreeUpdater *)(v830 - v831);
                          if (v830 != v831)
                          {
                            memmove(&v826[32 * v827 + 8 * v820], v831, (size_t)v754);
                            int v825 = *((_DWORD *)v809 + 5);
                          }
                          if ((v825 & 0x40000000) != 0)
                          {
                            v832 = (char *)*((void *)v809 - 1);
                            uint64_t v833 = v825 & 0x7FFFFFF;
                          }
                          else
                          {
                            uint64_t v833 = v825 & 0x7FFFFFF;
                            v832 = (char *)&v809[-32 * v833];
                          }
                          v834 = &v832[32 * v833];
                          if (*((void *)v834 - 4))
                          {
                            **((void **)v834 - 2) = *((void *)v834 - 3);
                            uint64_t v835 = *((void *)v834 - 3);
                            if (v835) {
                              *(void *)(v835 + 16) = *((void *)v834 - 2);
                            }
                          }
                          *((void *)v834 - 4) = 0;
                          *((_DWORD *)v809 + 5) = *((_DWORD *)v809 + 5) & 0xF8000000 | (*((_DWORD *)v809 + 5) - 1) & 0x7FFFFFF;
                          if (!v813) {
                            break;
                          }
                          v809 = v1341;
                        }
                        while (v815 == 83);
                        int v804 = *(_DWORD *)(v746 + 20);
                        uint64_t v61 = v812;
                        v700 = v811;
                      }
                    }
                  }
LABEL_1548:
                  for (iuint64_t i = *(void *)(v803 + 8); ii; iuint64_t i = *(void *)(ii + 8))
                  {
                    uint64_t v837 = *(void *)(ii + 24);
                    unsigned int v838 = *(unsigned __int8 *)(v837 + 16);
                    if (v837) {
                      BOOL v839 = v838 >= 0x1C;
                    }
                    else {
                      BOOL v839 = 0;
                    }
                    if (v839 && v838 - 29 <= 0xA)
                    {
                      uint64_t v841 = ii;
                      while (1)
                      {
                        uint64_t v841 = *(void *)(v841 + 8);
                        if (!v841) {
                          break;
                        }
                        uint64_t v842 = *(void *)(v841 + 24);
                        unsigned int v843 = *(unsigned __int8 *)(v842 + 16);
                        if (v842) {
                          BOOL v844 = v843 >= 0x1C;
                        }
                        else {
                          BOOL v844 = 0;
                        }
                        if (v844 && v843 - 29 <= 0xA) {
                          llvm::removeUnwindEdge(*(llvm **)(*(void *)(ii + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v754);
                        }
                      }
                      llvm::removeUnwindEdge(*(llvm **)(*(void *)(ii + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v754);
                    }
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                int v660 = 0;
                if ((int64x2_t *)v1413.i64[0] != &v1414) {
                  free((void *)v1413.i64[0]);
                }
LABEL_1972:
                int v4 = v1315;
                uint64_t v3 = a1;
                if ((v1410 & 1) == 0) {
                  MEMORY[0x1D25D9CD0](v1411.i64[0], 8);
                }
                goto LABEL_1974;
              }
            }
          }
        }
        else if (*((unsigned char *)v704 + 16) == 94)
        {
          v721 = (llvm::BasicBlock *)v700[6];
          if (v702 != v701)
          {
            do
            {
              v722 = (void *)((char *)v721 - 24);
              if (v721) {
                v723 = (void *)((char *)v721 - 24);
              }
              else {
                v723 = 0;
              }
              if (*((unsigned char *)v723 + 16) != 83) {
                goto LABEL_1346;
              }
              v721 = (llvm::BasicBlock *)*((void *)v721 + 1);
            }
            while (v721 != v1332);
            v722 = 0;
LABEL_1346:
            if ((void *)v706 == v722)
            {
              while (1)
              {
                v973 = v702 - 3;
                if (!v702) {
                  v973 = 0;
                }
                if (*((unsigned char *)v973 + 16) != 83) {
                  break;
                }
                v702 = (void *)v702[1];
              }
              v975 = v702 + 1;
              uint64_t v974 = v702[1];
              BOOL v976 = v974 == v975[1] + 40 || v974 == 0;
              uint64_t v977 = v976 ? 0 : v974 - 24;
              uint64_t v978 = v977 + 24;
              uint64_t v979 = v976 ? 0 : v978;
              if (sub_1CD232508(v979, v644 + 24))
              {
                for (juint64_t j = v700[1]; jj; juint64_t j = *(void *)(jj + 8))
                {
                  uint64_t v982 = *(void *)(jj + 24);
                  unsigned int v983 = *(unsigned __int8 *)(v982 + 16);
                  if (v982) {
                    BOOL v984 = v983 >= 0x1C;
                  }
                  else {
                    BOOL v984 = 0;
                  }
                  if (v984 && v983 - 29 <= 0xA)
                  {
                    uint64_t v1033 = jj;
                    while (1)
                    {
                      uint64_t v1033 = *(void *)(v1033 + 8);
                      if (!v1033) {
                        break;
                      }
                      uint64_t v1034 = *(void *)(v1033 + 24);
                      unsigned int v1035 = *(unsigned __int8 *)(v1034 + 16);
                      if (v1034) {
                        BOOL v1036 = v1035 >= 0x1C;
                      }
                      else {
                        BOOL v1036 = 0;
                      }
                      if (v1036 && v1035 - 29 <= 0xA) {
                        llvm::removeUnwindEdge(*(llvm **)(*(void *)(jj + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v980);
                      }
                    }
                    llvm::removeUnwindEdge(*(llvm **)(*(void *)(jj + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v980);
                  }
                }
                llvm::DeleteDeadBlock((llvm *)v700, *(llvm::BasicBlock **)(a1 + 8), 0);
                int v660 = 1;
                goto LABEL_1974;
              }
            }
          }
        }
        int v660 = 0;
        goto LABEL_1974;
      case 0x23:
        v709 = *(llvm **)(v644 + 40);
        if (v645 == *((uint64_t **)v709 + 6))
        {
          int v710 = 0;
        }
        else
        {
          int v710 = 0;
          if (*v645) {
            uint64_t v711 = *v645 - 24;
          }
          else {
            uint64_t v711 = 0;
          }
          int v712 = *(unsigned __int8 *)(v711 + 16);
          if (v712 != 84)
          {
            switch(*(unsigned char *)(v711 + 16))
            {
              case 0x1D:
              case 0x22:
              case 0x23:
                goto LABEL_1330;
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x25:
                goto LABEL_1323;
              case 0x24:
              case 0x26:
                if ((*(_WORD *)(v711 + 18) & 1) == 0) {
                  goto LABEL_1330;
                }
                goto LABEL_1323;
              default:
                if (v712 != 80) {
                  goto LABEL_1323;
                }
                PersonalityFuint64_t n = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(void *)(v711 + 40) + 56));
                if (llvm::classifyEHPersonality(PersonalityFn, v717) != 10) {
                  goto LABEL_1330;
                }
                goto LABEL_1324;
            }
          }
          uint64_t v715 = *(void *)(v711 + 64);
          if (v715 && (*(unsigned char *)(v715 + 16) & 0x20) != 0
            || llvm::CallBase::hasFnAttrOnCalledFunction(v711, 37))
          {
LABEL_1323:
            if (llvm::Instruction::willReturn((llvm::Instruction *)v711))
            {
LABEL_1324:
              v714 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v711, v713);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v711, v714, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
LABEL_1330:
          v645 = (uint64_t *)*((void *)v709 + 6);
          int64x2_t v648 = v1316;
        }
        v733 = v645 - 3;
        if (!v645) {
          v733 = 0;
        }
        if (v733 != (uint64_t *)v644)
        {
          int v4 = v1315;
          uint64_t v3 = a1;
LABEL_1840:
          LODWORD(v61) = v61 | v710;
          goto LABEL_1975;
        }
        for (kuint64_t k = *((void *)v709 + 1); kk; kuint64_t k = *(void *)(kk + 8))
        {
          uint64_t v735 = *(void *)(kk + 24);
          unsigned int v736 = *(unsigned __int8 *)(v735 + 16);
          if (v735) {
            BOOL v737 = v736 >= 0x1C;
          }
          else {
            BOOL v737 = 0;
          }
          if (v737 && v736 - 29 < 0xB) {
            break;
          }
        }
        v1410 = (void *)1;
        int64x2_t v1411 = v648;
        int64x2_t v1412 = v648;
        int64x2_t v1413 = v648;
        int64x2_t v1414 = v648;
        v1415 = &v1417;
        uint64_t v1416 = 0x800000000;
        sub_1CCDA93B0(&v1410, kk, 0);
        unint64_t v1342 = v1416;
        if (!v1416)
        {
          v848 = 0;
          v847 = 0;
LABEL_1818:
          uint64_t v965 = *(void *)(a1 + 8);
          if (v965) {
            llvm::DomTreeUpdater::applyUpdates(v965, v848, ((char *)v847 - (char *)v848) >> 4);
          }
          uint64_t v966 = *((void *)v709 + 1);
          LODWORD(v61) = v1331 | v1327;
          if (v966)
          {
            while (1)
            {
              uint64_t v967 = *(void *)(v966 + 24);
              unsigned int v968 = *(unsigned __int8 *)(v967 + 16);
              BOOL v969 = v967 && v968 >= 0x1C;
              if (v969 && v968 - 29 < 0xB) {
                break;
              }
              uint64_t v966 = *(void *)(v966 + 8);
              if (!v966) {
                goto LABEL_1830;
              }
            }
          }
          else
          {
LABEL_1830:
            uint64_t v971 = *(void *)(*((void *)v709 + 7) + 80);
            if (v971) {
              v972 = (llvm *)(v971 - 24);
            }
            else {
              v972 = 0;
            }
            if (v709 != v972)
            {
              llvm::DeleteDeadBlock(v709, *(llvm::BasicBlock **)(a1 + 8), 0);
              int v710 = 1;
            }
          }
          if (v1415 != &v1417) {
            free(v1415);
          }
          int v4 = v1315;
          uint64_t v3 = a1;
          if (v1410)
          {
            if (!v848) {
              goto LABEL_1840;
            }
          }
          else
          {
            MEMORY[0x1D25D9CD0](v1411.i64[0], 8);
            if (!v848) {
              goto LABEL_1840;
            }
          }
          operator delete(v848);
          goto LABEL_1840;
        }
        uint64_t v846 = 0;
        __pc = 0;
        v847 = 0;
        v848 = 0;
        v1306 = (void *)((unint64_t)v709 | 4);
        while (1)
        {
          unint64_t v849 = *((void *)v1415 + v846);
          v850 = *(void **)(v849 + 40);
          if (v850 == (void *)(v849 + 40))
          {
            uint64_t v852 = 0;
          }
          else
          {
            if (v850) {
              uint64_t v851 = (uint64_t)(v850 - 3);
            }
            else {
              uint64_t v851 = 0;
            }
            if (*(unsigned __int8 *)(v851 + 16) - 29 >= 0xB) {
              uint64_t v852 = 0;
            }
            else {
              uint64_t v852 = v851;
            }
          }
          v853 = 0;
          uint64_t v854 = **(void **)v852;
          v1388 = &v1390;
          v1389 = (void *)0x200000000;
          uint64_t v1396 = v854;
          v1397 = &v1405;
          v1398 = &v1406;
          uint64_t v1399 = 0;
          int v1400 = 0;
          __int16 v1401 = 512;
          char v1402 = 7;
          uint64_t v1394 = 0;
          uint64_t v1395 = 0;
          uint64_t v1403 = 0;
          uint64_t v1404 = 0;
          v1405 = &unk_1F2616E88;
          v1406 = &unk_1F2617008;
          uint64_t v1394 = *(void *)(v852 + 40);
          uint64_t v1395 = v852 + 24;
          v855 = *(void ***)(v852 + 48);
          v1431 = v855;
          if (v855)
          {
            llvm::MetadataTracking::track((uint64_t)&v1431, (unsigned __int8 *)v855, 2);
            v853 = v1431;
          }
          sub_1CB8461A4((uint64_t)&v1388, 0, (uint64_t)v853);
          if (!v1431) {
            goto LABEL_1583;
          }
          int v882 = *(unsigned __int8 *)v1431;
          if ((v882 - 4) > 0x1E)
          {
            if ((v882 - 3) >= 0xFFFFFFFE) {
              v911 = v1431;
            }
            else {
              v911 = 0;
            }
            if ((v882 - 3) < 0xFFFFFFFE)
            {
              if (v882 == 3) {
                v1431[1] = 0;
              }
              goto LABEL_1583;
            }
            unint64_t v884 = (unint64_t)(v911 + 1);
          }
          else
          {
            if ((*((unsigned char *)v1431 + 1) & 0x7F) != 2 && !*((_DWORD *)v1431 + 3)) {
              goto LABEL_1583;
            }
            unint64_t v883 = (unint64_t)v1431[2];
            if ((v883 & 4) == 0) {
              goto LABEL_1583;
            }
            unint64_t v884 = v883 & 0xFFFFFFFFFFFFFFF8;
            if (!v884) {
              goto LABEL_1583;
            }
          }
          *(void *)&long long v1372 = &v1431;
          sub_1CC5FA668(v884 + 16, &v1372);
LABEL_1583:
          switch(*(unsigned char *)(v852 + 16))
          {
            case 0x1E:
              int v859 = *(_DWORD *)(v852 + 20);
              if ((v859 & 0x40000000) != 0)
              {
                uint64_t v861 = *(void *)(v852 - 8);
                uint64_t v860 = v859 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v860 = v859 & 0x7FFFFFF;
                uint64_t v861 = v852 - 32 * v860;
              }
              uint64_t v876 = v860 == 3;
              if (v860 != v876)
              {
                v877 = (llvm **)(v861 + 32 * v876);
                uint64_t v878 = 32 * v860 - 32 * v876;
                do
                {
                  if (*v877 != v709)
                  {
                    uint64_t v957 = *(void *)(v852 - 96);
                    if (*(llvm **)(v852 - 32) == v709)
                    {
                      LOWORD(v1374) = 257;
                      v958 = sub_1CC2427E8((uint64_t)&v1388, v957, (uint64_t)&v1372, v858);
                      llvm::IRBuilderBase::CreateAssumption((uint64_t *)&v1388, (uint64_t)v958, 0, 0);
                      uint64_t v959 = *(void *)(v852 - 64);
                    }
                    else
                    {
                      llvm::IRBuilderBase::CreateAssumption((uint64_t *)&v1388, v957, 0, 0);
                      uint64_t v959 = *(void *)(v852 - 32);
                    }
                    v961 = (char *)operator new(0x60uLL);
                    *((_DWORD *)v961 + 13) = *((_DWORD *)v961 + 13) & 0x38000000 | 1;
                    *(void *)v961 = 0;
                    *((void *)v961 + 2) = 0;
                    *((void *)v961 + 1) = 0;
                    *((void *)v961 + 4) = ***(void ***)v959 + 1576;
                    *((void *)v961 + 3) = v961 + 32;
                    *((void *)v961 + 5) = 0;
                    v961[48] = 30;
                    v961[49] = 0;
                    *((_WORD *)v961 + 25) = 0;
                    *((_DWORD *)v961 + 13) = 1;
                    *(_OWORD *)(v961 + 56) = 0u;
                    *(_OWORD *)(v961 + 72) = 0u;
                    *((_DWORD *)v961 + 22) = 0;
                    *(void *)v961 = v959;
                    uint64_t v964 = *(void *)(v959 + 8);
                    v963 = (void *)(v959 + 8);
                    uint64_t v962 = v964;
                    *((void *)v961 + 1) = v964;
                    if (v964) {
                      *(void *)(v962 + 16) = v961 + 8;
                    }
                    *((void *)v961 + 2) = v963;
                    void *v963 = v961;
                    LOWORD(v1374) = 257;
                    sub_1CB844E0C((uint64_t *)&v1388, (llvm::Instruction *)(v961 + 32), (uint64_t)&v1372);
                    sub_1CD2300A0(v852);
                  }
                  v877 += 4;
                  v878 -= 32;
                }
                while (v878);
              }
              v879 = (llvm::UnreachableInst *)operator new(0x40uLL);
              *((_DWORD *)v879 + 5) &= 0x38000000u;
              llvm::UnreachableInst::UnreachableInst(v879, **(llvm::LLVMContext ***)v852, (llvm::Instruction *)v852);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            case 0x1F:
              v862 = v848;
              *(void *)&long long v1372 = v852;
              BYTE8(v1372) = 0;
              LOBYTE(v1376) = 0;
              LOBYTE(v1377) = 0;
              llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)&v1372, v856);
              uint64_t v863 = v1372;
              uint64_t v864 = ((*(_DWORD *)(v1372 + 20) >> 1) & 0x3FFFFFFu) - 1;
              if (((*(_DWORD *)(v1372 + 20) >> 1) & 0x3FFFFFF) == 1) {
                goto LABEL_1601;
              }
              uint64_t v865 = 0;
              uint64_t v866 = v1372;
              do
              {
                int v867 = *(_DWORD *)(v866 + 20);
                unsigned int v868 = 2 * v865 + 3;
                while (1)
                {
                  uint64_t v869 = v866 - 32 * (v867 & 0x7FFFFFF);
                  if ((v867 & 0x40000000) != 0) {
                    uint64_t v869 = *(void *)(v866 - 8);
                  }
                  uint64_t v870 = v868;
                  if (v865 == -2) {
                    uint64_t v870 = 1;
                  }
                  if (*(llvm **)(v869 + 32 * v870) == v709) {
                    break;
                  }
                  ++v865;
                  v868 += 2;
                  if (v864 == v865) {
                    goto LABEL_1601;
                  }
                }
                llvm::BasicBlock::removePredecessor(v709, *(llvm::BasicBlock **)(v863 + 40), 0);
                if ((_BYTE)v1376)
                {
                  LOBYTE(v1377) = 1;
                  *(_DWORD *)(*((void *)&v1372 + 1) + 4 * (v865 + 1)) = *(_DWORD *)(*((void *)&v1372 + 1) + 4 * v1373 - 4);
                  LODWORD(v1373) = v1373 - 1;
                }
                uint64_t v866 = llvm::SwitchInst::removeCase(v1372, v866, v865);
                uint64_t v865 = v871;
                uint64_t v863 = v1372;
                uint64_t v864 = ((*(_DWORD *)(v1372 + 20) >> 1) & 0x3FFFFFFu) - 1;
                int v710 = 1;
              }
              while (v871 != v864);
LABEL_1601:
              v848 = v862;
              if (!*(void *)(a1 + 8)
                || ((int v872 = *(_DWORD *)(v852 + 20), (v872 & 0x40000000) != 0)
                  ? (uint64_t v873 = *(void *)(v852 - 8))
                  : (uint64_t v873 = v852 - 32 * (v872 & 0x7FFFFFF)),
                    *(llvm **)(v873 + 32) == v709))
              {
                v885 = v847;
              }
              else if (v847 >= (unint64_t *)__pc)
              {
                uint64_t v900 = ((char *)v847 - (char *)v862) >> 4;
                unint64_t v901 = v900 + 1;
                if ((unint64_t)(v900 + 1) >> 60) {
                  goto LABEL_2519;
                }
                if ((__pc - (char *)v862) >> 3 > v901) {
                  unint64_t v901 = (__pc - (char *)v862) >> 3;
                }
                if ((unint64_t)(__pc - (char *)v862) >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v902 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v902 = v901;
                }
                if (v902)
                {
                  if (v902 >> 60) {
                    goto LABEL_2520;
                  }
                  v903 = (char *)operator new(16 * v902);
                }
                else
                {
                  v903 = 0;
                }
                v912 = &v903[16 * v900];
                *(void *)v912 = v849;
                *((void *)v912 + 1) = v1306;
                if (v847 == v848)
                {
                  v848 = (unint64_t *)&v903[16 * v900];
                }
                else
                {
                  v913 = (unint64_t *)&v903[16 * v900];
                  do
                  {
                    *((_OWORD *)v913 - 1) = *((_OWORD *)v847 - 1);
                    v913 -= 2;
                    v847 -= 2;
                  }
                  while (v847 != v848);
                  v847 = v848;
                  v848 = v913;
                }
                __pc = &v903[16 * v902];
                v885 = (unint64_t *)(v912 + 16);
                if (v847) {
                  operator delete(v847);
                }
              }
              else
              {
                unint64_t *v847 = v849;
                v847[1] = (unint64_t)v1306;
                v885 = v847 + 2;
              }
              sub_1CCD3104C((uint64_t)&v1372);
              v847 = v885;
              goto LABEL_1809;
            case 0x21:
              if (*(llvm **)(v852 - 64) == v709) {
                goto LABEL_1646;
              }
              goto LABEL_1809;
            case 0x24:
              if (!*(void *)(a1 + 8)) {
                goto LABEL_1687;
              }
              if (v847 >= (unint64_t *)__pc)
              {
                uint64_t v886 = ((char *)v847 - (char *)v848) >> 4;
                unint64_t v887 = v886 + 1;
                if ((unint64_t)(v886 + 1) >> 60) {
                  goto LABEL_2519;
                }
                if ((__pc - (char *)v848) >> 3 > v887) {
                  unint64_t v887 = (__pc - (char *)v848) >> 3;
                }
                if ((unint64_t)(__pc - (char *)v848) >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v888 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v888 = v887;
                }
                if (v888)
                {
                  if (v888 >> 60) {
                    goto LABEL_2520;
                  }
                  v889 = (char *)operator new(16 * v888);
                }
                else
                {
                  v889 = 0;
                }
                v908 = &v889[16 * v886];
                *(void *)v908 = v849;
                *((void *)v908 + 1) = v1306;
                if (v847 != v848)
                {
                  v909 = &v889[16 * v886];
                  do
                  {
                    *((_OWORD *)v909 - 1) = *((_OWORD *)v847 - 1);
                    v909 -= 16;
                    v847 -= 2;
                  }
                  while (v847 != v848);
                  v847 = v848;
                }
                if (v847) {
                  operator delete(v847);
                }
              }
              else
              {
                unint64_t *v847 = v849;
                v847[1] = (unint64_t)v1306;
              }
LABEL_1687:
              v910 = (llvm::UnreachableInst *)operator new(0x40uLL);
              *((_DWORD *)v910 + 5) &= 0x38000000u;
              llvm::UnreachableInst::UnreachableInst(v910, **(llvm::LLVMContext ***)v852, (llvm::Instruction *)v852);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            case 0x26:
              __int16 v874 = *(_WORD *)(v852 + 18);
              if (v874)
              {
                int v880 = *(_DWORD *)(v852 + 20);
                if ((v880 & 0x40000000) != 0) {
                  uint64_t v881 = *(void *)(v852 - 8);
                }
                else {
                  uint64_t v881 = v852 - 32 * (v880 & 0x7FFFFFF);
                }
                v875 = *(llvm **)(v881 + 32);
              }
              else
              {
                v875 = 0;
              }
              if (v875 == v709)
              {
LABEL_1646:
                uint64_t v895 = *(void *)(a1 + 8);
                if (v895)
                {
                  llvm::DomTreeUpdater::applyUpdates(v895, v848, ((char *)v847 - (char *)v848) >> 4);
                  v896 = *(llvm::BasicBlock **)(a1 + 8);
                }
                else
                {
                  v896 = 0;
                }
                llvm::removeUnwindEdge(*(llvm **)(v852 + 40), v896, v857);
              }
              v1300 = v848;
              int v890 = *(_DWORD *)(v852 + 20);
              if ((v890 & 0x40000000) != 0)
              {
                uint64_t v892 = *(void *)(v852 - 8);
                BOOL v99 = (v874 & 1) == 0;
                uint64_t v897 = 64;
                if (v99) {
                  uint64_t v897 = 32;
                }
                v894 = (llvm **)(v892 + v897);
                uint64_t v891 = v890 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v891 = v890 & 0x7FFFFFF;
                uint64_t v892 = v852 - 32 * v891;
                BOOL v99 = (v874 & 1) == 0;
                uint64_t v893 = 64;
                if (v99) {
                  uint64_t v893 = 32;
                }
                v894 = (llvm **)(v892 + v893);
              }
              v898 = (llvm **)(v892 + 32 * v891);
              while (v894 != v898)
              {
                if (*v894 == v709)
                {
                  llvm::CatchSwitchInst::removeHandler(v852, v894);
                  v894 -= 4;
                  v898 -= 4;
                  int v710 = 1;
                }
                v894 += 4;
              }
              if (*(void *)(a1 + 8))
              {
                if (v847 >= (unint64_t *)__pc)
                {
                  uint64_t v904 = ((char *)v847 - (char *)v1300) >> 4;
                  unint64_t v905 = v904 + 1;
                  if ((unint64_t)(v904 + 1) >> 60) {
                    goto LABEL_2519;
                  }
                  if ((__pc - (char *)v1300) >> 3 > v905) {
                    unint64_t v905 = (__pc - (char *)v1300) >> 3;
                  }
                  if ((unint64_t)(__pc - (char *)v1300) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v906 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v906 = v905;
                  }
                  if (v906)
                  {
                    if (v906 >> 60) {
                      goto LABEL_2520;
                    }
                    v907 = (char *)operator new(16 * v906);
                  }
                  else
                  {
                    v907 = 0;
                  }
                  v914 = &v907[16 * v904];
                  *(void *)v914 = v849;
                  *((void *)v914 + 1) = v1306;
                  if (v847 == v1300)
                  {
                    v1300 = (unint64_t *)&v907[16 * v904];
                  }
                  else
                  {
                    v915 = (unint64_t *)&v907[16 * v904];
                    do
                    {
                      *((_OWORD *)v915 - 1) = *((_OWORD *)v847 - 1);
                      v915 -= 2;
                      v847 -= 2;
                    }
                    while (v847 != v1300);
                    v847 = v1300;
                    v1300 = v915;
                  }
                  __pc = &v907[16 * v906];
                  v899 = (unint64_t *)(v914 + 16);
                  if (v847) {
                    operator delete(v847);
                  }
                }
                else
                {
                  unint64_t *v847 = v849;
                  v847[1] = (unint64_t)v1306;
                  v899 = v847 + 2;
                }
              }
              else
              {
                v899 = v847;
              }
              __int16 v916 = *(_WORD *)(v852 + 18);
              int v917 = *(_DWORD *)(v852 + 20);
              int v918 = v917 & 0x7FFFFFF;
              if (v916)
              {
                if (v918 == 2)
                {
                  if (!*(void *)(a1 + 8) || (uint64_t v926 = *(void *)(v849 + 8)) == 0)
                  {
LABEL_1740:
                    if ((v917 & 0x40000000) != 0) {
                      goto LABEL_1804;
                    }
                    goto LABEL_1741;
                  }
                  while (1)
                  {
                    uint64_t v927 = *(void *)(v926 + 24);
                    unsigned int v928 = *(unsigned __int8 *)(v927 + 16);
                    BOOL v929 = v927 && v928 >= 0x1C;
                    if (v929 && v928 - 29 < 0xB) {
                      break;
                    }
                    uint64_t v926 = *(void *)(v926 + 8);
                    if (!v926) {
                      goto LABEL_1740;
                    }
                  }
                  uint64_t v1294 = v849 | 4;
                  if ((v916 & 1) == 0) {
                    goto LABEL_1749;
                  }
LABEL_1745:
                  int v932 = *(_DWORD *)(v852 + 20);
                  if ((v932 & 0x40000000) != 0) {
                    uint64_t v933 = *(void *)(v852 - 8);
                  }
                  else {
                    uint64_t v933 = v852 - 32 * (v932 & 0x7FFFFFF);
                  }
                  uint64_t v934 = *(void *)(v933 + 32);
LABEL_1750:
                  unint64_t v935 = *(void *)(v927 + 40);
                  unint64_t v936 = v934 & 0xFFFFFFFFFFFFFFFBLL;
                  if (v899 < (unint64_t *)__pc)
                  {
                    unint64_t *v899 = v935;
                    v899[1] = v936;
                    v937 = v899 + 2;
                    goto LABEL_1769;
                  }
                  uint64_t v938 = ((char *)v899 - (char *)v1300) >> 4;
                  unint64_t v939 = v938 + 1;
                  if (!((unint64_t)(v938 + 1) >> 60))
                  {
                    if ((__pc - (char *)v1300) >> 3 > v939) {
                      unint64_t v939 = (__pc - (char *)v1300) >> 3;
                    }
                    if ((unint64_t)(__pc - (char *)v1300) >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v940 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v940 = v939;
                    }
                    if (v940)
                    {
                      if (!(v940 >> 60))
                      {
                        unint64_t v941 = v935;
                        __ph = (void *)v940;
                        v942 = (char *)operator new(16 * v940);
                        unint64_t v940 = (unint64_t)__ph;
                        unint64_t v935 = v941;
                        goto LABEL_1762;
                      }
LABEL_2520:
                      sub_1CB833614();
                    }
                    v942 = 0;
LABEL_1762:
                    v943 = &v942[16 * v938];
                    *(void *)v943 = v935;
                    *((void *)v943 + 1) = v936;
                    if (v899 == v1300)
                    {
                      v1300 = (unint64_t *)&v942[16 * v938];
                    }
                    else
                    {
                      v944 = (unint64_t *)&v942[16 * v938];
                      do
                      {
                        *((_OWORD *)v944 - 1) = *((_OWORD *)v899 - 1);
                        v944 -= 2;
                        v899 -= 2;
                      }
                      while (v899 != v1300);
                      v899 = v1300;
                      v1300 = v944;
                    }
                    __pc = &v942[16 * v940];
                    v937 = (unint64_t *)(v943 + 16);
                    if (v899)
                    {
                      unint64_t v945 = v935;
                      operator delete(v899);
                      unint64_t v935 = v945;
                    }
LABEL_1769:
                    if (v937 < (unint64_t *)__pc)
                    {
                      unint64_t *v937 = v935;
                      v937[1] = v1294;
                      v899 = v937 + 2;
                      goto LABEL_1789;
                    }
                    uint64_t v946 = ((char *)v937 - (char *)v1300) >> 4;
                    unint64_t v947 = v946 + 1;
                    if (!((unint64_t)(v946 + 1) >> 60))
                    {
                      if ((__pc - (char *)v1300) >> 3 > v947) {
                        unint64_t v947 = (__pc - (char *)v1300) >> 3;
                      }
                      if ((unint64_t)(__pc - (char *)v1300) >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v948 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v948 = v947;
                      }
                      if (v948)
                      {
                        if (v948 >> 60) {
                          goto LABEL_2520;
                        }
                        unint64_t v949 = v935;
                        v950 = (char *)operator new(16 * v948);
                        unint64_t v935 = v949;
                      }
                      else
                      {
                        v950 = 0;
                      }
                      v951 = &v950[16 * v946];
                      __pc = &v950[16 * v948];
                      *(void *)v951 = v935;
                      *((void *)v951 + 1) = v1294;
                      v899 = (unint64_t *)(v951 + 16);
                      if (v937 == v1300)
                      {
                        v952 = v1300;
                      }
                      else
                      {
                        v952 = v1300;
                        do
                        {
                          *((_OWORD *)v951 - 1) = *((_OWORD *)v937 - 1);
                          v951 -= 16;
                          v937 -= 2;
                        }
                        while (v937 != v1300);
                        if (!v1300) {
                          goto LABEL_1788;
                        }
                      }
                      operator delete(v952);
LABEL_1788:
                      v1300 = (unint64_t *)v951;
LABEL_1789:
                      while (1)
                      {
                        uint64_t v926 = *(void *)(v926 + 8);
                        if (!v926) {
                          break;
                        }
                        uint64_t v927 = *(void *)(v926 + 24);
                        unsigned int v953 = *(unsigned __int8 *)(v927 + 16);
                        if (v927) {
                          BOOL v954 = v953 >= 0x1C;
                        }
                        else {
                          BOOL v954 = 0;
                        }
                        if (v954 && v953 - 29 <= 0xA)
                        {
                          if ((*(_WORD *)(v852 + 18) & 1) == 0)
                          {
LABEL_1749:
                            uint64_t v934 = 0;
                            goto LABEL_1750;
                          }
                          goto LABEL_1745;
                        }
                      }
                      if ((*(_WORD *)(v852 + 18) & 1) == 0)
                      {
                        v956 = 0;
                        goto LABEL_1806;
                      }
                      int v917 = *(_DWORD *)(v852 + 20);
                      if ((v917 & 0x40000000) != 0)
                      {
LABEL_1804:
                        uint64_t v931 = *(void *)(v852 - 8);
                        goto LABEL_1805;
                      }
LABEL_1741:
                      uint64_t v931 = v852 - 32 * (v917 & 0x7FFFFFF);
LABEL_1805:
                      v956 = *(llvm::Value **)(v931 + 32);
LABEL_1806:
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v849, v956, (llvm::Value *)1);
LABEL_1807:
                      v960 = (llvm::UnreachableInst *)operator new(0x40uLL);
                      *((_DWORD *)v960 + 5) &= 0x38000000u;
                      llvm::UnreachableInst::UnreachableInst(v960, **(llvm::LLVMContext ***)v852, (llvm::Instruction *)v852);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                  }
LABEL_2519:
                  abort();
                }
              }
              else if (v918 == 1)
              {
                uint64_t v919 = *(void *)(a1 + 8);
                if (v919) {
                  llvm::DomTreeUpdater::applyUpdates(v919, v1300, ((char *)v899 - (char *)v1300) >> 4);
                }
                for (muint64_t m = *(void *)(v849 + 8); mm; muint64_t m = *(void *)(mm + 8))
                {
                  uint64_t v921 = *(void *)(mm + 24);
                  unsigned int v922 = *(unsigned __int8 *)(v921 + 16);
                  if (v921) {
                    BOOL v923 = v922 >= 0x1C;
                  }
                  else {
                    BOOL v923 = 0;
                  }
                  if (v923 && v922 - 29 < 0xB) {
                    break;
                  }
                }
                *(void *)&long long v1372 = &v1373;
                *((void *)&v1372 + 1) = 0x800000000;
                sub_1CBF846A4((uint64_t)&v1372, mm, 0);
                if (DWORD2(v1372)) {
                  llvm::removeUnwindEdge(*(llvm **)v1372, *(llvm::BasicBlock **)(a1 + 8), v925);
                }
                if ((long long *)v1372 != &v1373) {
                  free((void *)v1372);
                }
                goto LABEL_1807;
              }
              v847 = v899;
              v848 = v1300;
LABEL_1809:
              if (v1388 != &v1390) {
                free(v1388);
              }
              if (++v846 == v1342) {
                goto LABEL_1818;
              }
              break;
            default:
              goto LABEL_1809;
          }
        }
      case 0x24:
        v696 = (llvm::BasicBlock **)(v644 - 32 * (*(_DWORD *)(v644 + 20) & 0x7FFFFFF));
        v697 = *v696;
        if (*((unsigned __int8 *)*v696 + 16) - 11 < 2) {
          goto LABEL_1297;
        }
        __int16 v718 = *(_WORD *)(v644 + 18);
        if (v718)
        {
          v719 = v696[4];
          if (v719)
          {
            if (llvm::BasicBlock::getSinglePredecessor(v696[4]) == *(void *)(v644 + 40))
            {
              uint64_t v1026 = *((void *)v719 + 6);
              v1027 = v1026 ? (llvm::ValueAsMetadata *)(v1026 - 24) : 0;
              if (v1026 && *((unsigned char *)v1027 + 16) == 79)
              {
                llvm::Value::doRAUW(v1027, v697, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
            }
          }
        }
        v720 = *(const llvm::BasicBlock **)(v644 + 40);
        if (*((const llvm::BasicBlock **)v697 + 5) != v720)
        {
          int v698 = 0;
          int v4 = v1315;
          uint64_t v3 = a1;
          goto LABEL_1336;
        }
        uint64_t v781 = *((void *)v697 + 1);
        int v4 = v1315;
        uint64_t v3 = a1;
        if (!v781
          || *(void *)(v781 + 8)
          || ((v1333 = *(llvm::BasicBlock **)(a1 + 8),
               v782 = (void *)*((void *)v697 + 4),
               v782 != (void *)((char *)v720 + 40))
            ? (BOOL v783 = v782 == 0)
            : (BOOL v783 = 1),
              !v783 ? (v784 = v782 - 3) : (v784 = 0),
              (uint64_t v785 = (uint64_t)(v784 + 3), !v783) ? (v786 = v785) : (v786 = 0),
              !sub_1CD232508(v786, v644 + 24)))
        {
LABEL_1297:
          int v698 = 0;
          goto LABEL_1336;
        }
        int v1313 = v61;
        if (v718)
        {
          unint64_t v788 = (unint64_t)v696[4];
          v790 = v1333;
          if (v788)
          {
            v1038 = (void *)(v788 + 40);
            v1039 = *(void **)(v788 + 48);
            v1040 = v1039;
            if (v1039 == (void *)(v788 + 40))
            {
LABEL_2008:
              size_t v1041 = 0;
            }
            else
            {
              while (1)
              {
                size_t v1041 = (size_t)(v1040 - 3);
                uint64_t v1042 = v1040 ? (uint64_t)(v1040 - 3) : 0;
                if (*(unsigned char *)(v1042 + 16) != 83) {
                  break;
                }
                v1040 = (void *)v1040[1];
                if (v1040 == v1038) {
                  goto LABEL_2008;
                }
              }
            }
            size_t v1328 = v1041;
            v1344 = v696[4];
            if ((void *)*v1038 != v1038)
            {
              v1043 = v1039 - 3;
              uint64_t v1044 = v1039 ? (uint64_t)(v1039 - 3) : 0;
              if (v1039)
              {
                for (nuint64_t n = *(unsigned __int8 *)(v1044 + 16); nn == 83; nuint64_t n = *(unsigned __int8 *)(v1060 + 16))
                {
                  int v1046 = *((_DWORD *)v1043 + 5);
                  uint64_t v1047 = v1046 & 0x7FFFFFF;
                  if ((v1046 & 0x7FFFFFF) != 0)
                  {
                    uint64_t v1048 = 0;
                    while (1)
                    {
                      v1049 = &v1043[-4 * v1047];
                      if ((v1046 & 0x40000000) != 0) {
                        v1049 = (void *)*(v1043 - 1);
                      }
                      if ((const llvm::BasicBlock *)v1049[4 * *((unsigned int *)v1043 + 15) + v1048] == v720) {
                        break;
                      }
                      if (v1047 == ++v1048) {
                        goto LABEL_2022;
                      }
                    }
                  }
                  else
                  {
LABEL_2022:
                    LODWORD(v1048) = -1;
                  }
                  if ((v1046 & 0x40000000) != 0) {
                    v1050 = (void *)*(v1043 - 1);
                  }
                  else {
                    v1050 = &v1043[-4 * v1047];
                  }
                  uint64_t v1051 = v1050[4 * v1048];
                  if (*(unsigned char *)(v1051 + 16) == 83) {
                    uint64_t v1052 = v1050[4 * v1048];
                  }
                  else {
                    uint64_t v1052 = 0;
                  }
                  if (v1052) {
                    BOOL v1053 = *(void *)(v1052 + 40) == (void)v720;
                  }
                  else {
                    BOOL v1053 = 0;
                  }
                  uint64_t v1054 = *((void *)v720 + 1);
                  if (v1054)
                  {
                    while (1)
                    {
                      uint64_t v1055 = *(void *)(v1054 + 24);
                      unsigned int v1056 = *(unsigned __int8 *)(v1055 + 16);
                      BOOL v1057 = v1055 && v1056 >= 0x1C;
                      if (v1057 && v1056 - 29 < 0xB) {
                        break;
                      }
                      uint64_t v1054 = *(void *)(v1054 + 8);
                      if (!v1054) {
                        goto LABEL_2042;
                      }
                    }
LABEL_2047:
                    uint64_t v1061 = *(void *)(v1055 + 40);
                    uint64_t v1062 = v1051;
                    if (v1053) {
                      uint64_t v1062 = sub_1CBF73380(v1052, *(void *)(v1055 + 40));
                    }
                    int v1063 = *((_DWORD *)v1043 + 5);
                    uint64_t v1064 = v1063 & 0x7FFFFFF;
                    if ((v1063 & 0x7FFFFFF) == *((_DWORD *)v1043 + 15))
                    {
                      unsigned int v1080 = v1064 + (v1064 >> 1);
                      if (v1080 <= 2) {
                        uint64_t v1081 = 2;
                      }
                      else {
                        uint64_t v1081 = v1080;
                      }
                      *((_DWORD *)v1043 + 15) = v1081;
                      if ((v1063 & 0x40000000) != 0) {
                        v1082 = (uint64_t *)*(v1043 - 1);
                      }
                      else {
                        v1082 = &v1043[-4 * v1064];
                      }
                      v1307 = v1082;
                      v1083 = operator new(40 * v1081);
                      *(v1043 - 1) = v1083;
                      v1084 = v1083;
                      do
                      {
                        void *v1084 = 0;
                        v1084[1] = 0;
                        v1084[2] = 0;
                        v1084[3] = v1043;
                        v1084 += 4;
                      }
                      while (v1084 != &v1083[4 * v1081]);
                      int v1085 = *((_DWORD *)v1043 + 5);
                      if ((v1085 & 0x40000000) != 0) {
                        uint64_t v1086 = (uint64_t)v1083;
                      }
                      else {
                        uint64_t v1086 = (uint64_t)&v1043[-4 * (v1085 & 0x7FFFFFF)];
                      }
                      uint64_t v1295 = v1086;
                      sub_1CC5E4108((uint64_t)&v1410, v1307, &v1307[4 * v1064], v1086);
                      if (v1064)
                      {
                        memmove((void *)(v1295 + 32 * v1081), &v1307[4 * v1064], 8 * v1064);
                        uint64_t v1087 = 4 * v1064;
                        do
                        {
                          v1088 = &v1307[v1087];
                          if (v1307[v1087 - 4])
                          {
                            *(void *)*(v1088 - 2) = *(v1088 - 3);
                            uint64_t v1089 = *(v1088 - 3);
                            if (v1089) {
                              *(void *)(v1089 + 16) = *(v1088 - 2);
                            }
                          }
                          v1087 -= 4;
                        }
                        while (v1087 * 8);
                      }
                      operator delete(v1307);
                      int v1063 = *((_DWORD *)v1043 + 5);
                      v790 = v1333;
                    }
                    uint64_t v1065 = (v1063 + 1) & 0x7FFFFFF;
                    *((_DWORD *)v1043 + 5) = v1063 & 0xF8000000 | (v1063 + 1) & 0x7FFFFFF;
                    unint64_t v788 = (unint64_t)v1344;
                    if ((v1063 & 0x40000000) != 0) {
                      v1066 = (void *)*(v1043 - 1);
                    }
                    else {
                      v1066 = &v1043[-4 * v1065];
                    }
                    uint64_t v1067 = (v1065 - 1);
                    v1068 = &v1066[4 * v1067];
                    if (*v1068)
                    {
                      *(void *)v1068[2] = v1068[1];
                      uint64_t v1079 = v1068[1];
                      if (v1079) {
                        *(void *)(v1079 + 16) = v1068[2];
                      }
                    }
                    uint64_t *v1068 = v1062;
                    if (v1062)
                    {
                      uint64_t v1071 = *(void *)(v1062 + 8);
                      v1070 = (uint64_t **)(v1062 + 8);
                      uint64_t v1069 = v1071;
                      v1072 = &v1066[4 * v1067];
                      v1072[1] = v1071;
                      if (v1071) {
                        *(void *)(v1069 + 16) = v1072 + 1;
                      }
                      v1072[2] = v1070;
                      *v1070 = v1068;
                    }
                    int v1073 = *((_DWORD *)v1043 + 5);
                    uint64_t v1074 = v1073 & 0x7FFFFFF;
                    if ((v1073 & 0x40000000) != 0) {
                      v1075 = (void *)*(v1043 - 1);
                    }
                    else {
                      v1075 = &v1043[-4 * v1074];
                    }
                    v1075[4 * *((unsigned int *)v1043 + 15) + (v1074 - 1)] = v1061;
                    while (1)
                    {
                      uint64_t v1054 = *(void *)(v1054 + 8);
                      if (!v1054) {
                        break;
                      }
                      uint64_t v1055 = *(void *)(v1054 + 24);
                      unsigned int v1076 = *(unsigned __int8 *)(v1055 + 16);
                      if (v1055) {
                        BOOL v1077 = v1076 >= 0x1C;
                      }
                      else {
                        BOOL v1077 = 0;
                      }
                      if (v1077 && v1076 - 29 < 0xB) {
                        goto LABEL_2047;
                      }
                    }
                  }
LABEL_2042:
                  uint64_t v1059 = v1043[4];
                  v1043 = (void *)(v1059 - 24);
                  uint64_t v1060 = v1059 ? v1059 - 24 : 0;
                  if (!v1059) {
                    break;
                  }
                }
              }
            }
            if (*((const llvm::BasicBlock **)v720 + 5) != (const llvm::BasicBlock *)((char *)v720 + 40))
            {
              int v789 = 0;
              uint64_t v1090 = *((void *)v720 + 6);
              uint64_t v1091 = v1090 - 24;
              if (v1090) {
                uint64_t v1092 = v1090 - 24;
              }
              else {
                uint64_t v1092 = 0;
              }
              if (!v1090 || *(unsigned char *)(v1092 + 16) != 83) {
                goto LABEL_2193;
              }
              do
              {
                uint64_t v1093 = v1091 + 24;
                if (!v1091) {
                  uint64_t v1093 = 0;
                }
                uint64_t v1094 = *(void *)(v1093 + 8);
                if (v1094) {
                  uint64_t v1095 = v1094 - 24;
                }
                else {
                  uint64_t v1095 = 0;
                }
                int v1096 = *(unsigned __int8 *)(v1095 + 16);
                if (*(void *)(v1091 + 8)
                  && llvm::Instruction::isUsedOutsideOfBlock((llvm::Instruction *)v1091, v720))
                {
                  uint64_t v1097 = *(void *)(v788 + 8);
                  v1098 = (llvm::Instruction *)v1328;
                  if (v1097)
                  {
                    while (1)
                    {
                      uint64_t v1099 = *(void *)(v1097 + 24);
                      unsigned int v1100 = *(unsigned __int8 *)(v1099 + 16);
                      BOOL v1101 = v1099 && v1100 >= 0x1C;
                      if (v1101 && v1100 - 29 < 0xB) {
                        break;
                      }
                      uint64_t v1097 = *(void *)(v1097 + 8);
                      if (!v1097) {
                        goto LABEL_2114;
                      }
                    }
LABEL_2128:
                    v1118 = *(const llvm::BasicBlock **)(v1099 + 40);
                    if (v1118 != v720)
                    {
                      int v1119 = *(_DWORD *)(v1091 + 20);
                      uint64_t v1120 = v1119 & 0x7FFFFFF;
                      if ((v1119 & 0x7FFFFFF) == *(_DWORD *)(v1091 + 60))
                      {
                        unsigned int v1133 = v1120 + (v1120 >> 1);
                        if (v1133 <= 2) {
                          uint64_t v1134 = 2;
                        }
                        else {
                          uint64_t v1134 = v1133;
                        }
                        *(_DWORD *)(v1091 + 60) = v1134;
                        if ((v1119 & 0x40000000) != 0) {
                          v1135 = *(uint64_t **)(v1091 - 8);
                        }
                        else {
                          v1135 = (uint64_t *)(v1091 - 32 * v1120);
                        }
                        __pd = v1135;
                        v1136 = operator new(40 * v1134);
                        *(void *)(v1091 - 8) = v1136;
                        v1137 = v1136;
                        do
                        {
                          void *v1137 = 0;
                          v1137[1] = 0;
                          v1137[2] = 0;
                          v1137[3] = v1091;
                          v1137 += 4;
                        }
                        while (v1137 != &v1136[4 * v1134]);
                        int v1138 = *(_DWORD *)(v1091 + 20);
                        if ((v1138 & 0x40000000) != 0) {
                          uint64_t v1139 = (uint64_t)v1136;
                        }
                        else {
                          uint64_t v1139 = v1091 - 32 * (v1138 & 0x7FFFFFF);
                        }
                        v1301 = (char *)v1139;
                        sub_1CC5E4108((uint64_t)&v1410, __pd, &__pd[4 * v1120], v1139);
                        if (v1120)
                        {
                          memmove(&v1301[32 * v1134], &__pd[4 * v1120], 8 * v1120);
                          uint64_t v1140 = 4 * v1120;
                          do
                          {
                            v1141 = &__pd[v1140];
                            if (__pd[v1140 - 4])
                            {
                              *(void *)*(v1141 - 2) = *(v1141 - 3);
                              uint64_t v1142 = *(v1141 - 3);
                              if (v1142) {
                                *(void *)(v1142 + 16) = *(v1141 - 2);
                              }
                            }
                            v1140 -= 4;
                          }
                          while (v1140 * 8);
                        }
                        operator delete(__pd);
                        int v1119 = *(_DWORD *)(v1091 + 20);
                        v790 = v1333;
                      }
                      uint64_t v1121 = (v1119 + 1) & 0x7FFFFFF;
                      *(_DWORD *)(v1091 + 20) = v1119 & 0xF8000000 | (v1119 + 1) & 0x7FFFFFF;
                      v1098 = (llvm::Instruction *)v1328;
                      if ((v1119 & 0x40000000) != 0) {
                        uint64_t v1122 = *(void *)(v1091 - 8);
                      }
                      else {
                        uint64_t v1122 = v1091 - 32 * v1121;
                      }
                      uint64_t v1123 = (v1121 - 1);
                      uint64_t v1124 = v1122 + 32 * v1123;
                      if (*(void *)v1124)
                      {
                        **(void **)(v1124 + 16) = *(void *)(v1124 + 8);
                        uint64_t v1132 = *(void *)(v1124 + 8);
                        if (v1132) {
                          *(void *)(v1132 + 16) = *(void *)(v1124 + 16);
                        }
                      }
                      *(void *)uint64_t v1124 = v1091;
                      uint64_t v1125 = *(void *)(v1091 + 8);
                      *(void *)(v1124 + 8) = v1125;
                      if (v1125) {
                        *(void *)(v1125 + 16) = v1124 + 8;
                      }
                      *(void *)(v1122 + 32 * v1123 + 16) = v1091 + 8;
                      *(void *)(v1091 + 8) = v1124;
                      int v1126 = *(_DWORD *)(v1091 + 20);
                      uint64_t v1127 = v1126 & 0x7FFFFFF;
                      if ((v1126 & 0x40000000) != 0) {
                        uint64_t v1128 = *(void *)(v1091 - 8);
                      }
                      else {
                        uint64_t v1128 = v1091 - 32 * v1127;
                      }
                      *(void *)(v1128 + 32 * *(unsigned int *)(v1091 + 60) + 8 * (v1127 - 1)) = v1118;
                    }
                    while (1)
                    {
                      uint64_t v1097 = *(void *)(v1097 + 8);
                      if (!v1097) {
                        break;
                      }
                      uint64_t v1099 = *(void *)(v1097 + 24);
                      unsigned int v1129 = *(unsigned __int8 *)(v1099 + 16);
                      if (v1099) {
                        BOOL v1130 = v1129 >= 0x1C;
                      }
                      else {
                        BOOL v1130 = 0;
                      }
                      if (v1130 && v1129 - 29 < 0xB) {
                        goto LABEL_2128;
                      }
                    }
                  }
LABEL_2114:
                  llvm::Instruction::moveBefore((llvm::Instruction *)v1091, v1098);
                  v1104 = llvm::UndefValue::get(*(llvm::UndefValue **)v1091, v1103);
                  int v1105 = *(_DWORD *)(v1091 + 20);
                  uint64_t v1106 = v1105 & 0x7FFFFFF;
                  if ((v1105 & 0x7FFFFFF) == *(_DWORD *)(v1091 + 60))
                  {
                    unsigned int v1144 = v1106 + (v1106 >> 1);
                    if (v1144 <= 2) {
                      uint64_t v1145 = 2;
                    }
                    else {
                      uint64_t v1145 = v1144;
                    }
                    *(_DWORD *)(v1091 + 60) = v1145;
                    if ((v1105 & 0x40000000) != 0) {
                      v1146 = *(uint64_t **)(v1091 - 8);
                    }
                    else {
                      v1146 = (uint64_t *)(v1091 - 32 * v1106);
                    }
                    __pe = v1146;
                    v1147 = operator new(40 * v1145);
                    *(void *)(v1091 - 8) = v1147;
                    v1148 = v1147;
                    do
                    {
                      void *v1148 = 0;
                      v1148[1] = 0;
                      v1148[2] = 0;
                      v1148[3] = v1091;
                      v1148 += 4;
                    }
                    while (v1148 != &v1147[4 * v1145]);
                    int v1149 = *(_DWORD *)(v1091 + 20);
                    if ((v1149 & 0x40000000) != 0) {
                      uint64_t v1150 = (uint64_t)v1147;
                    }
                    else {
                      uint64_t v1150 = v1091 - 32 * (v1149 & 0x7FFFFFF);
                    }
                    v1308 = (char *)v1150;
                    sub_1CC5E4108((uint64_t)&v1410, __pe, &__pe[4 * v1106], v1150);
                    if (v1106)
                    {
                      memmove(&v1308[32 * v1145], &__pe[4 * v1106], 8 * v1106);
                      uint64_t v1151 = 4 * v1106;
                      do
                      {
                        v1152 = &__pe[v1151];
                        if (__pe[v1151 - 4])
                        {
                          *(void *)*(v1152 - 2) = *(v1152 - 3);
                          uint64_t v1153 = *(v1152 - 3);
                          if (v1153) {
                            *(void *)(v1153 + 16) = *(v1152 - 2);
                          }
                        }
                        v1151 -= 4;
                      }
                      while (v1151 * 8);
                    }
                    operator delete(__pe);
                    int v1105 = *(_DWORD *)(v1091 + 20);
                    v790 = v1333;
                  }
                  uint64_t v1107 = (v1105 + 1) & 0x7FFFFFF;
                  *(_DWORD *)(v1091 + 20) = v1105 & 0xF8000000 | (v1105 + 1) & 0x7FFFFFF;
                  unint64_t v788 = (unint64_t)v1344;
                  if ((v1105 & 0x40000000) != 0) {
                    uint64_t v1108 = *(void *)(v1091 - 8);
                  }
                  else {
                    uint64_t v1108 = v1091 - 32 * v1107;
                  }
                  uint64_t v1109 = (v1107 - 1);
                  uint64_t v1110 = v1108 + 32 * v1109;
                  if (*(void *)v1110)
                  {
                    **(void **)(v1110 + 16) = *(void *)(v1110 + 8);
                    uint64_t v1143 = *(void *)(v1110 + 8);
                    if (v1143) {
                      *(void *)(v1143 + 16) = *(void *)(v1110 + 16);
                    }
                  }
                  *(void *)uint64_t v1110 = v1104;
                  if (v1104)
                  {
                    uint64_t v1113 = *((void *)v1104 + 1);
                    v1112 = (void *)((char *)v1104 + 8);
                    uint64_t v1111 = v1113;
                    uint64_t v1114 = v1108 + 32 * v1109;
                    *(void *)(v1114 + 8) = v1113;
                    if (v1113) {
                      *(void *)(v1111 + 16) = v1114 + 8;
                    }
                    *(void *)(v1114 + 16) = v1112;
                    void *v1112 = v1110;
                  }
                  int v1115 = *(_DWORD *)(v1091 + 20);
                  uint64_t v1116 = v1115 & 0x7FFFFFF;
                  if ((v1115 & 0x40000000) != 0) {
                    uint64_t v1117 = *(void *)(v1091 - 8);
                  }
                  else {
                    uint64_t v1117 = v1091 - 32 * v1116;
                  }
                  *(void *)(v1117 + 32 * *(unsigned int *)(v1091 + 60) + 8 * (v1116 - 1)) = v720;
                }
                if (!v1094) {
                  break;
                }
                uint64_t v1091 = v1095;
              }
              while (v1096 == 83);
            }
            int v789 = 0;
          }
          else
          {
            int v789 = 1;
          }
        }
        else
        {
          unint64_t v788 = 0;
          int v789 = 1;
          v790 = v1333;
        }
LABEL_2193:
        uint64_t v1154 = *((void *)v720 + 1);
        if (v1154)
        {
          while (1)
          {
            uint64_t v1155 = *(void *)(v1154 + 24);
            unsigned int v1156 = *(unsigned __int8 *)(v1155 + 16);
            BOOL v1157 = v1155 && v1156 >= 0x1C;
            if (v1157 && v1156 - 29 < 0xB) {
              break;
            }
            uint64_t v1154 = *(void *)(v1154 + 8);
            if (!v1154) {
              goto LABEL_2203;
            }
          }
          v1159 = 0;
          v1160 = 0;
          v1161 = 0;
          size_t v1329 = v788 & 0xFFFFFFFFFFFFFFFBLL;
          __pf = (llvm *)((unint64_t)v720 | 4);
          v1345 = (void *)v788;
          while (1)
          {
            uint64_t v1162 = v1154;
            do
            {
              uint64_t v1154 = *(void *)(v1154 + 8);
              if (!v1154) {
                break;
              }
              uint64_t v1163 = *(void *)(v1154 + 24);
              unsigned int v1164 = *(unsigned __int8 *)(v1163 + 16);
              BOOL v1165 = v1163 && v1164 >= 0x1C;
            }
            while (!v1165 || v1164 - 29 > 0xA);
            uint64_t v1167 = *(void *)(v1162 + 24);
            v1168 = *(llvm **)(v1167 + 40);
            if (v789)
            {
              if (v790) {
                llvm::DomTreeUpdater::applyUpdates((uint64_t)v790, v1161, ((char *)v1160 - (char *)v1161) >> 4);
              }
              llvm::removeUnwindEdge(v1168, v790, v787);
            }
            llvm::BasicBlock::removePredecessor(v720, *(llvm::BasicBlock **)(v1167 + 40), 0);
            v1169 = (void *)*((void *)v1168 + 5);
            if (v1169 == (void *)((char *)v1168 + 40))
            {
              v1171 = 0;
            }
            else
            {
              if (v1169) {
                v1170 = (unsigned __int8 *)(v1169 - 3);
              }
              else {
                v1170 = 0;
              }
              if (v1170[16] - 29 >= 0xB) {
                v1171 = 0;
              }
              else {
                v1171 = (llvm::User *)v1170;
              }
            }
            llvm::User::replaceUsesOfWith(v1171, v720, (llvm::Value *)v788);
            if (!v790) {
              goto LABEL_2266;
            }
            if (v1160 >= (unint64_t *)v1159)
            {
              uint64_t v1173 = ((char *)v1160 - (char *)v1161) >> 4;
              unint64_t v1174 = v1173 + 1;
              if ((unint64_t)(v1173 + 1) >> 60) {
                goto LABEL_2519;
              }
              if ((v1159 - (char *)v1161) >> 3 > v1174) {
                unint64_t v1174 = (v1159 - (char *)v1161) >> 3;
              }
              unint64_t v1175 = (unint64_t)(v1159 - (char *)v1161) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v1174;
              if (v1175)
              {
                if (v1175 >> 60) {
                  goto LABEL_2520;
                }
                v1176 = (char *)operator new(16 * v1175);
              }
              else
              {
                v1176 = 0;
              }
              v1177 = (llvm **)&v1176[16 * v1173];
              *v1177 = v1168;
              v1177[1] = (llvm *)v1329;
              if (v1160 == v1161)
              {
                v1161 = (unint64_t *)&v1176[16 * v1173];
                v790 = v1333;
              }
              else
              {
                v1178 = (unint64_t *)&v1176[16 * v1173];
                v790 = v1333;
                do
                {
                  *((_OWORD *)v1178 - 1) = *((_OWORD *)v1160 - 1);
                  v1178 -= 2;
                  v1160 -= 2;
                }
                while (v1160 != v1161);
                v1160 = v1161;
                v1161 = v1178;
              }
              v1159 = &v1176[16 * v1175];
              v1172 = (unint64_t *)(v1177 + 2);
              if (v1160) {
                operator delete(v1160);
              }
              unint64_t v788 = (unint64_t)v1345;
            }
            else
            {
              unint64_t *v1160 = (unint64_t)v1168;
              v1160[1] = v1329;
              v1172 = v1160 + 2;
            }
            if (v1172 >= (unint64_t *)v1159) {
              break;
            }
            unint64_t *v1172 = (unint64_t)v1168;
            v1172[1] = (unint64_t)__pf;
            v1160 = v1172 + 2;
LABEL_2266:
            if (!v1154) {
              goto LABEL_2267;
            }
          }
          uint64_t v1179 = ((char *)v1172 - (char *)v1161) >> 4;
          unint64_t v1180 = v1179 + 1;
          if ((unint64_t)(v1179 + 1) >> 60) {
            goto LABEL_2519;
          }
          if ((v1159 - (char *)v1161) >> 3 > v1180) {
            unint64_t v1180 = (v1159 - (char *)v1161) >> 3;
          }
          if ((unint64_t)(v1159 - (char *)v1161) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v1181 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v1181 = v1180;
          }
          if (v1181)
          {
            if (v1181 >> 60) {
              goto LABEL_2520;
            }
            v1182 = (char *)operator new(16 * v1181);
          }
          else
          {
            v1182 = 0;
          }
          v1183 = (llvm **)&v1182[16 * v1179];
          v1159 = &v1182[16 * v1181];
          *v1183 = v1168;
          v1183[1] = __pf;
          v1160 = (unint64_t *)(v1183 + 2);
          if (v1172 == v1161)
          {
            v790 = v1333;
          }
          else
          {
            v790 = v1333;
            do
            {
              *((_OWORD *)v1183 - 1) = *((_OWORD *)v1172 - 1);
              v1183 -= 2;
              v1172 -= 2;
            }
            while (v1172 != v1161);
            if (!v1161) {
              goto LABEL_2265;
            }
          }
          operator delete(v1161);
LABEL_2265:
          v1161 = (unint64_t *)v1183;
          unint64_t v788 = (unint64_t)v1345;
          goto LABEL_2266;
        }
LABEL_2203:
        v1161 = 0;
        v1160 = 0;
LABEL_2267:
        if (v790) {
          llvm::DomTreeUpdater::applyUpdates((uint64_t)v790, v1161, ((char *)v1160 - (char *)v1161) >> 4);
        }
        llvm::DeleteDeadBlock(v720, v790, 0);
        int v4 = v1315;
        uint64_t v3 = a1;
        LODWORD(v61) = v1313;
        if (v1161) {
          operator delete(v1161);
        }
        int v698 = 1;
LABEL_1336:
        LODWORD(v61) = v61 | v698;
        goto LABEL_1975;
      default:
        goto LABEL_1975;
    }
  }
}

uint64_t sub_1CD218F2C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 40) == a1 + 40) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = v4 - 24;
  if (v4) {
    uint64_t v6 = v4 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = 1;
  if (v4 && *(unsigned char *)(v6 + 16) == 83)
  {
    uint64_t v10 = (unsigned int *)a4 + 5;
    int v11 = (unsigned int *)(a4 + 2);
    while (1)
    {
      uint64_t v12 = sub_1CBF73380(v5, *a2);
      uint64_t v13 = sub_1CBF73380(v5, a2[1]);
      if (v12 != v13)
      {
        if (!a4) {
          return 0;
        }
        uint64_t v15 = *a4;
        uint64_t v14 = a4[1];
        if (v14 == *a4)
        {
          uint64_t v16 = *v10;
          uint64_t v17 = (void *)(v14 + 8 * v16);
          if (v16)
          {
            uint64_t v18 = 0;
            uint64_t v19 = 8 * v16;
            while (*(void *)(v14 + v18) != v12)
            {
              v18 += 8;
              if (v19 == v18) {
                goto LABEL_28;
              }
            }
            uint64_t v17 = (void *)(v14 + v18);
          }
LABEL_28:
          uint64_t v28 = a4[1];
        }
        else
        {
          uint64_t v20 = *v11;
          int v21 = v20 - 1;
          unsigned int v22 = (v20 - 1) & ((v12 >> 4) ^ (v12 >> 9));
          uint64_t v17 = (void *)(v14 + 8 * v22);
          uint64_t v23 = *v17;
          if (*v17 == -1)
          {
            int v24 = 0;
LABEL_30:
            if (v24) {
              uint64_t v17 = v24;
            }
            if (*v17 != v12) {
              uint64_t v17 = (void *)(v14 + 8 * v20);
            }
          }
          else
          {
            int v24 = 0;
            int v25 = 1;
            while (v23 != v12)
            {
              if (v24) {
                BOOL v26 = 0;
              }
              else {
                BOOL v26 = v23 == -2;
              }
              if (v26) {
                int v24 = v17;
              }
              unsigned int v27 = v22 + v25++;
              unsigned int v22 = v27 & v21;
              uint64_t v17 = (void *)(v14 + 8 * (v27 & v21));
              uint64_t v23 = *v17;
              if (*v17 == -1) {
                goto LABEL_30;
              }
            }
          }
          uint64_t v28 = *a4;
        }
        uint64_t v29 = v14 == v28 ? v10 : v11;
        if (v17 == (void *)(v14 + 8 * *v29)) {
          return 0;
        }
        if (v14 == v28)
        {
          uint64_t v30 = *v10;
          uint64_t v31 = (void *)(v14 + 8 * v30);
          if (v30)
          {
            uint64_t v32 = 0;
            uint64_t v33 = 8 * v30;
            while (*(void *)(v14 + v32) != v13)
            {
              v32 += 8;
              if (v33 == v32) {
                goto LABEL_57;
              }
            }
            uint64_t v31 = (void *)(v14 + v32);
          }
LABEL_57:
          uint64_t v15 = a4[1];
        }
        else
        {
          int v34 = *v11 - 1;
          unsigned int v35 = v34 & ((v13 >> 4) ^ (v13 >> 9));
          uint64_t v31 = (void *)(v14 + 8 * v35);
          uint64_t v36 = *v31;
          if (*v31 == -1)
          {
            uint64_t v37 = 0;
LABEL_69:
            if (v37) {
              uint64_t v31 = v37;
            }
            if (*v31 != v13)
            {
              if (v14 == v15) {
                int v44 = v10;
              }
              else {
                int v44 = v11;
              }
              uint64_t v31 = (void *)(v14 + 8 * *v44);
            }
          }
          else
          {
            uint64_t v37 = 0;
            int v38 = 1;
            while (v36 != v13)
            {
              if (v37) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = v36 == -2;
              }
              if (v39) {
                uint64_t v37 = v31;
              }
              unsigned int v40 = v35 + v38++;
              unsigned int v35 = v40 & v34;
              uint64_t v31 = (void *)(v14 + 8 * (v40 & v34));
              uint64_t v36 = *v31;
              if (*v31 == -1) {
                goto LABEL_69;
              }
            }
          }
        }
        int v41 = v14 == v15 ? v10 : v11;
        if (v31 == (void *)(v14 + 8 * *v41)) {
          return 0;
        }
      }
      uint64_t v42 = *(void *)(v5 + 32);
      uint64_t v5 = v42 - 24;
      if (v42) {
        uint64_t v43 = v42 - 24;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t result = 1;
      if (!v42 || *(unsigned char *)(v43 + 16) != 83) {
        return result;
      }
    }
  }
  return result;
}

void sub_1CD2191C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  if (*(void *)(a1 + 40) != a1 + 40)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = v7 - 24;
    uint64_t v9 = v7 ? v7 - 24 : 0;
    if (v7 && *(unsigned char *)(v9 + 16) == 83)
    {
      do
      {
        uint64_t v10 = sub_1CBF73380(v8, a3);
        int v11 = *(_DWORD *)(v8 + 20);
        uint64_t v12 = v11 & 0x7FFFFFF;
        if ((v11 & 0x7FFFFFF) == *(_DWORD *)(v8 + 60))
        {
          unsigned int v27 = v12 + (v12 >> 1);
          if (v27 <= 2) {
            uint64_t v28 = 2;
          }
          else {
            uint64_t v28 = v27;
          }
          *(_DWORD *)(v8 + 60) = v28;
          if ((v11 & 0x40000000) != 0) {
            uint64_t v29 = *(uint64_t **)(v8 - 8);
          }
          else {
            uint64_t v29 = (uint64_t *)(v8 - 32 * v12);
          }
          uint64_t v30 = operator new(40 * v28);
          *(void *)(v8 - 8) = v30;
          uint64_t v31 = v30;
          do
          {
            *uint64_t v31 = 0;
            v31[1] = 0;
            uint64_t v31[2] = 0;
            v31[3] = v8;
            v31 += 4;
          }
          while (v31 != &v30[4 * v28]);
          int v32 = *(_DWORD *)(v8 + 20);
          if ((v32 & 0x40000000) != 0) {
            uint64_t v33 = (uint64_t)v30;
          }
          else {
            uint64_t v33 = v8 - 32 * (v32 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)&v73, v29, &v29[4 * v12], v33);
          if (v12)
          {
            memmove((void *)(v33 + 32 * v28), &v29[4 * v12], 8 * v12);
            uint64_t v34 = 4 * v12;
            do
            {
              unsigned int v35 = &v29[v34];
              if (v29[v34 - 4])
              {
                *(void *)*(v35 - 2) = *(v35 - 3);
                uint64_t v36 = *(v35 - 3);
                if (v36) {
                  *(void *)(v36 + 16) = *(v35 - 2);
                }
              }
              v34 -= 4;
            }
            while (v34 * 8);
          }
          operator delete(v29);
          int v11 = *(_DWORD *)(v8 + 20);
          uint64_t v6 = a1;
        }
        uint64_t v13 = (v11 + 1) & 0x7FFFFFF;
        *(_DWORD *)(v8 + 20) = v11 & 0xF8000000 | (v11 + 1) & 0x7FFFFFF;
        if ((v11 & 0x40000000) != 0) {
          uint64_t v14 = *(void *)(v8 - 8);
        }
        else {
          uint64_t v14 = v8 - 32 * v13;
        }
        uint64_t v15 = (v13 - 1);
        uint64_t v16 = v14 + 32 * v15;
        if (*(void *)v16)
        {
          **(void **)(v16 + 16) = *(void *)(v16 + 8);
          uint64_t v26 = *(void *)(v16 + 8);
          if (v26) {
            *(void *)(v26 + 16) = *(void *)(v16 + 16);
          }
        }
        *(void *)uint64_t v16 = v10;
        if (v10)
        {
          uint64_t v19 = *(void *)(v10 + 8);
          uint64_t v18 = (uint64_t *)(v10 + 8);
          uint64_t v17 = v19;
          uint64_t v20 = v14 + 32 * v15;
          *(void *)(v20 + 8) = v19;
          if (v19) {
            *(void *)(v17 + 16) = v20 + 8;
          }
          *(void *)(v20 + 16) = v18;
          *uint64_t v18 = v16;
        }
        int v21 = *(_DWORD *)(v8 + 20);
        uint64_t v22 = v21 & 0x7FFFFFF;
        if ((v21 & 0x40000000) != 0) {
          uint64_t v23 = *(void *)(v8 - 8);
        }
        else {
          uint64_t v23 = v8 - 32 * v22;
        }
        *(void *)(v23 + 32 * *(unsigned int *)(v8 + 60) + 8 * (v22 - 1)) = a2;
        uint64_t v24 = *(void *)(v8 + 32);
        uint64_t v8 = v24 - 24;
        if (v24) {
          uint64_t v25 = v24 - 24;
        }
        else {
          uint64_t v25 = 0;
        }
      }
      while (v24 && *(unsigned char *)(v25 + 16) == 83);
    }
  }
  if (a4)
  {
    int v37 = *(_DWORD *)(*(void *)a4 + 40);
    if (v37)
    {
      uint64_t v38 = *(void *)(*(void *)a4 + 24);
      unsigned int v39 = v37 - 1;
      uint64_t v40 = (v37 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v41 = *(void *)(v38 + 16 * v40);
      if (v41 == v6)
      {
LABEL_51:
        uint64_t v44 = v38 + 16 * v40;
        uint64_t v45 = *(void *)(v44 + 8);
        if (v45)
        {
          uint64_t v46 = sub_1CC0B78E8(*(void *)(v44 + 8), a3);
          int v47 = *(_DWORD *)(v45 + 20);
          uint64_t v48 = v47 & 0x7FFFFFF;
          if ((v47 & 0x7FFFFFF) == *(_DWORD *)(v45 + 76))
          {
            unsigned int v49 = v48 + (v48 >> 1);
            if (v49 <= 2) {
              uint64_t v50 = 2;
            }
            else {
              uint64_t v50 = v49;
            }
            *(_DWORD *)(v45 + 76) = v50;
            if ((v47 & 0x40000000) != 0) {
              uint64_t v51 = *(uint64_t **)(v45 - 8);
            }
            else {
              uint64_t v51 = (uint64_t *)(v45 - 32 * v48);
            }
            int v52 = operator new(40 * v50);
            *(void *)(v45 - 8) = v52;
            unsigned int v53 = v52;
            do
            {
              *unsigned int v53 = 0;
              v53[1] = 0;
              uint64_t v53[2] = 0;
              v53[3] = v45;
              v53 += 4;
            }
            while (v53 != &v52[4 * v50]);
            int v54 = *(_DWORD *)(v45 + 20);
            if ((v54 & 0x40000000) != 0) {
              uint64_t v55 = (uint64_t)v52;
            }
            else {
              uint64_t v55 = v45 - 32 * (v54 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v74, v51, &v51[4 * v48], v55);
            if (v48)
            {
              memmove((void *)(v55 + 32 * v50), &v51[4 * v48], 8 * v48);
              uint64_t v56 = 4 * v48;
              do
              {
                unsigned int v57 = &v51[v56];
                if (v51[v56 - 4])
                {
                  *(void *)*(v57 - 2) = *(v57 - 3);
                  uint64_t v58 = *(v57 - 3);
                  if (v58) {
                    *(void *)(v58 + 16) = *(v57 - 2);
                  }
                }
                v56 -= 4;
              }
              while (v56 * 8);
            }
            operator delete(v51);
            int v47 = *(_DWORD *)(v45 + 20);
          }
          uint64_t v59 = (v47 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v45 + 20) = v47 & 0xF8000000 | (v47 + 1) & 0x7FFFFFF;
          uint64_t v60 = (v59 - 1);
          if ((v47 & 0x40000000) != 0) {
            uint64_t v61 = *(void *)(v45 - 8);
          }
          else {
            uint64_t v61 = v45 - 32 * v59;
          }
          uint64_t v62 = v61 + 32 * v60;
          if (*(void *)v62)
          {
            **(void **)(v62 + 16) = *(void *)(v62 + 8);
            uint64_t v70 = *(void *)(v62 + 8);
            if (v70) {
              *(void *)(v70 + 16) = *(void *)(v62 + 16);
            }
          }
          *(void *)uint64_t v62 = v46;
          if (v46)
          {
            uint64_t v65 = *(void *)(v46 + 8);
            uint64_t v64 = (void *)(v46 + 8);
            uint64_t v63 = v65;
            uint64_t v66 = v61 + 32 * v60;
            *(void *)(v66 + 8) = v65;
            if (v65) {
              *(void *)(v63 + 16) = v66 + 8;
            }
            *(void *)(v66 + 16) = v64;
            *uint64_t v64 = v62;
          }
          int v67 = *(_DWORD *)(v45 + 20);
          uint64_t v68 = v67 & 0x7FFFFFF;
          if ((v67 & 0x40000000) != 0) {
            uint64_t v69 = *(void *)(v45 - 8);
          }
          else {
            uint64_t v69 = v45 - 32 * v68;
          }
          *(void *)(v69 + 32 * *(unsigned int *)(v45 + 76) + 8 * (v68 - 1)) = a2;
        }
      }
      else
      {
        int v42 = 1;
        while (v41 != -4096)
        {
          int v43 = v40 + v42++;
          uint64_t v40 = v43 & v39;
          uint64_t v41 = *(void *)(v38 + 16 * v40);
          if (v41 == v6) {
            goto LABEL_51;
          }
        }
      }
    }
  }
}

void sub_1CD219628(llvm::Instruction *this, int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a3 | a2)
  {
    uint64_t v5 = (uint64_t *)***((void ***)this + 5);
    v6[0] = a2;
    v6[1] = a3;
    uint64_t v4 = llvm::MDBuilder::createBranchWeights(&v5, (uint64_t)v6, 2);
  }
  else
  {
    uint64_t v4 = 0;
  }
  llvm::Instruction::setMetadata(this, 2, v4);
}

llvm::Instruction *sub_1CD2196C0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Constant **a4, const llvm::Twine *a5)
{
  if (sub_1CC16A138((uint64_t)a4, a3, 0))
  {
    return sub_1CB844E98(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, 0);
  }
  else
  {
    if (a2 == 28)
    {
      NullValue = llvm::Constant::getNullValue(*a4, v10, v11);
      uint64_t v14 = (llvm::IRBuilderBase *)a1;
      uint64_t v15 = (llvm::Value *)a3;
      AllOnesValue = (llvm::Value *)a4;
    }
    else
    {
      AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(*a4, v10, v11);
      uint64_t v14 = (llvm::IRBuilderBase *)a1;
      uint64_t v15 = (llvm::Value *)a3;
      NullValue = (llvm::Value *)a4;
    }
    return llvm::IRBuilderBase::CreateSelect(v14, v15, AllOnesValue, NullValue, a5, 0);
  }
}

uint64_t sub_1CD2197A4(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = (void **)a1;
  uint64_t v775 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (llvm::BasicBlock *)*((void *)a2 + 5);
  if (sub_1CD2291FC(a1, (uint64_t)a2))
  {
    uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v5);
    if (SinglePredecessor && (sub_1CD2293D8((uint64_t)v4, (uint64_t)a2, SinglePredecessor, a3) & 1) != 0)
    {
LABEL_743:
      uint64_t result = 1;
      *((unsigned char *)v4 + 48) = 1;
      return result;
    }
    int v7 = *((_DWORD *)a2 + 5);
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = (uint64_t *)*((void *)a2 - 1);
    }
    else {
      uint64_t v8 = (uint64_t *)&a2[-32 * (v7 & 0x7FFFFFF)];
    }
    uint64_t v9 = *v8;
    if (v9 && *(unsigned char *)(v9 + 16) == 85)
    {
      uint64_t v10 = *(unsigned char *)(*(void *)(v9 - 64) + 16) == 16 ? *(void *)(v9 - 64) : 0;
      uint64_t v11 = *(unsigned char *)(*(void *)(v9 - 32) + 16) == 16 ? *(void *)(v9 - 32) : 0;
      if (v10 && v11 != 0)
      {
        uint64_t v15 = *(llvm::Value **)(v9 - 96);
        sub_1CC025540((uint64_t)a2, v10);
        int v17 = *((_DWORD *)a2 + 5);
        if ((v17 & 0x40000000) != 0) {
          uint64_t v18 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v18 = &a2[-32 * (v17 & 0x7FFFFFF)];
        }
        if (v16 == 4294967294) {
          uint64_t v66 = 1;
        }
        else {
          uint64_t v66 = (2 * v16 + 3);
        }
        int v67 = *(void **)&v18[32 * v66];
        sub_1CC025540((uint64_t)a2, v11);
        int v69 = *((_DWORD *)a2 + 5);
        if ((v69 & 0x40000000) != 0) {
          uint64_t v70 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v70 = &a2[-32 * (v69 & 0x7FFFFFF)];
        }
        if (v68 == 4294967294) {
          uint64_t v71 = 1;
        }
        else {
          uint64_t v71 = (2 * v68 + 3);
        }
        unsigned int v72 = *(void **)&v70[32 * v71];
        __base[0] = v770;
        __base[1] = (void *)0x800000000;
        if ((v69 & 0x20000000) == 0) {
          goto LABEL_114;
        }
        uint64_t v75 = ***(void ***)a2;
        v764[0] = a2;
        int v76 = *(_DWORD *)(v75 + 2496);
        if (v76)
        {
          uint64_t v77 = *(void *)(v75 + 2480);
          int v78 = v76 - 1;
          unsigned int v79 = v78 & ((a2 >> 4) ^ (a2 >> 9));
          unsigned int v80 = (char **)(v77 + 40 * v79);
          BOOL v81 = *v80;
          if (*v80 == a2)
          {
LABEL_128:
            uint64_t v86 = *((unsigned int *)v80 + 4);
            if (v86)
            {
              uint64_t v87 = v80[1] + 8;
              uint64_t v88 = 16 * v86;
              while (*((_DWORD *)v87 - 2) != 2)
              {
                LODWORD(v73) = 0;
                LODWORD(v74) = 0;
                v87 += 2;
                v88 -= 16;
                if (!v88) {
                  goto LABEL_115;
                }
              }
              uint64_t v97 = *v87;
              if (v97)
              {
                uint64_t v98 = *(void *)(v97 - 8 * *(unsigned int *)(v97 + 8));
                if (v98)
                {
                  if (!*(unsigned char *)v98)
                  {
                    BOOL v99 = *(void **)(v98 + 8);
                    if (*v99 == 14)
                    {
                      uint64_t v100 = v99[3];
                      uint64_t v101 = *(void *)((char *)v99 + 30);
                      if (v100 == 0x775F68636E617262 && v101 == 0x737468676965775FLL)
                      {
                        sub_1CD230274((uint64_t ***)a2, (uint64_t **)__base);
                        if (LODWORD(__base[1]) == ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF))
                        {
                          sub_1CC025540((uint64_t)a2, v10);
                          uint64_t v104 = (v103 + 1);
                          if (v103 == -2) {
                            uint64_t v104 = 0;
                          }
                          uint64_t v73 = *((void *)__base[0] + v104);
                          sub_1CC025540((uint64_t)a2, v11);
                          uint64_t v106 = (v105 + 1);
                          if (v105 == -2) {
                            uint64_t v106 = 0;
                          }
                          uint64_t v74 = *((void *)__base[0] + v106);
                          goto LABEL_115;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_114:
            LODWORD(v73) = 0;
            LODWORD(v74) = 0;
LABEL_115:
            sub_1CD232584((void **)a1, (uint64_t)a2, v15, v67, v72, v73, v74);
            if (__base[0] != v770) {
              free(__base[0]);
            }
            uint64_t v4 = (void **)a1;
            goto LABEL_743;
          }
          unsigned int v82 = 0;
          int v83 = 1;
          while (v81 != (char *)-4096)
          {
            if (v82) {
              BOOL v84 = 0;
            }
            else {
              BOOL v84 = v81 == (char *)-8192;
            }
            if (v84) {
              unsigned int v82 = v80;
            }
            unsigned int v85 = v79 + v83++;
            unsigned int v79 = v85 & v78;
            unsigned int v80 = (char **)(v77 + 40 * v79);
            BOOL v81 = *v80;
            if (*v80 == a2) {
              goto LABEL_128;
            }
          }
          if (v82) {
            unsigned int v323 = v82;
          }
          else {
            unsigned int v323 = v80;
          }
        }
        else
        {
          unsigned int v323 = 0;
        }
        unsigned int v80 = (char **)sub_1CC609054(v75 + 2480, (uint64_t)v764, (uint64_t *)v764, v323);
        unsigned int v324 = (char *)v764[0];
        void v80[3] = 0;
        v80[4] = 0;
        *unsigned int v80 = v324;
        v80[1] = (char *)(v80 + 3);
        v80[2] = (char *)0x100000000;
        goto LABEL_128;
      }
    }
    llvm::BasicBlock::instructionsWithoutDebug(v5, 0, (uint64_t)__base);
    *(_OWORD *)v764 = *(_OWORD *)__base;
    if (v772)
    {
      if (v772 == v770)
      {
        uint64_t v768 = &v765;
        (*(void (**)(void))(*v772 + 24))();
        uint64_t v13 = v768;
      }
      else
      {
        uint64_t v13 = (uint64_t *)(*(uint64_t (**)(void))(*v772 + 16))();
        uint64_t v768 = v13;
      }
      if (v764[0]) {
        uint64_t v14 = (char *)v764[0] - 24;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v13 == &v765)
      {
        (*(void (**)(uint64_t *))(v765 + 32))(&v765);
      }
      else if (v13)
      {
        (*(void (**)(uint64_t *))(*v13 + 40))(v13);
      }
    }
    else
    {
      uint64_t v768 = 0;
      if (__base[0]) {
        uint64_t v14 = (char *)__base[0] - 24;
      }
      else {
        uint64_t v14 = 0;
      }
    }
    if (v774 == v773)
    {
      (*(void (**)(void *))(v773[0] + 32))(v773);
    }
    else if (v774)
    {
      (*(void (**)(void))(*v774 + 40))();
    }
    if (v772 == v770)
    {
      (*(void (**)(void *))(v770[0] + 32))(v770);
    }
    else if (v772)
    {
      (*(void (**)(void))(*v772 + 40))();
    }
    if (v14 == a2 && (sub_1CD22A348((uint64_t)v4, (void **)a2, (uint64_t)a3) & 1) != 0) {
      goto LABEL_743;
    }
  }
  uint64_t v19 = v4[5];
  if (*((unsigned char *)v19 + 5))
  {
    int v20 = *((_DWORD *)a2 + 5);
    if ((v20 & 0x40000000) != 0) {
      int v21 = (char *)*((void *)a2 - 1);
    }
    else {
      int v21 = &a2[-32 * (v20 & 0x7FFFFFF)];
    }
    int v22 = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v21 + 4), 1)[16];
    unsigned int v23 = *((_DWORD *)a2 + 5);
    if (v22 == 35)
    {
      uint64_t v24 = 0;
    }
    else
    {
      if ((v23 & 0x40000000) != 0) {
        uint64_t v25 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v25 = &a2[-32 * (v23 & 0x7FFFFFF)];
      }
      uint64_t v24 = (llvm::BasicBlock *)*((void *)v25 + 4);
    }
    int v737 = v22;
    __base[0] = v770;
    __base[1] = (void *)0x1000000000;
    v764[0] = &v765;
    v764[1] = (void *)0x1000000000;
    uint64_t v26 = ((v23 >> 1) & 0x3FFFFFF) - 1;
    if (v26)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 2 * v26;
      do
      {
        int v30 = *((_DWORD *)a2 + 5);
        if ((v30 & 0x40000000) != 0) {
          uint64_t v31 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v31 = &a2[-32 * (v30 & 0x7FFFFFF)];
        }
        uint64_t v32 = (v27 + 3);
        if (v27 == 0x1FFFFFFFCLL) {
          uint64_t v32 = 1;
        }
        uint64_t v33 = 32 * v32;
        uint64_t v34 = *(llvm::BasicBlock **)&v31[v33];
        if (!v24) {
          uint64_t v24 = *(llvm::BasicBlock **)&v31[v33];
        }
        if (v34 == v24)
        {
          if ((v30 & 0x40000000) != 0) {
            uint64_t v36 = (char *)*((void *)a2 - 1);
          }
          else {
            uint64_t v36 = &a2[-32 * (v30 & 0x7FFFFFF)];
          }
          int v37 = *(void ***)&v36[32 * ((v27 + 2) & 0xFFFFFFFE)];
          uint64_t v38 = LODWORD(__base[1]);
          if (LODWORD(__base[1]) >= (unint64_t)HIDWORD(__base[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v39 = __base;
        }
        else
        {
          if (v28 && v28 != v34)
          {
            uint64_t v4 = (void **)a1;
            goto LABEL_235;
          }
          if ((v30 & 0x40000000) != 0) {
            unsigned int v35 = (char *)*((void *)a2 - 1);
          }
          else {
            unsigned int v35 = &a2[-32 * (v30 & 0x7FFFFFF)];
          }
          int v37 = *(void ***)&v35[32 * ((v27 + 2) & 0xFFFFFFFE)];
          uint64_t v38 = LODWORD(v764[1]);
          if (LODWORD(v764[1]) >= (unint64_t)HIDWORD(v764[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v39 = v764;
          uint64_t v28 = *(llvm::BasicBlock **)&v31[v33];
        }
        *((void *)*v39 + v38) = v37;
        ++*((_DWORD *)v39 + 2);
        v27 += 2;
      }
      while (v29 != v27);
      uint64_t v4 = (void **)a1;
      if (LODWORD(__base[1]))
      {
        uint64_t v40 = __base;
        if (sub_1CD233048((uint64_t)__base))
        {
LABEL_83:
          uint64_t v44 = (llvm::Constant *)*((void *)*v40 + *((unsigned int *)v40 + 2) - 1);
          uint64_t v45 = *(llvm::ConstantFP **)v44;
          if ((*(_DWORD *)(*(void *)v44 + 8) & 0xFE) == 0x12) {
            unsigned int v46 = *(unsigned __int8 *)(**((void **)v45 + 2) + 8);
          }
          else {
            unsigned int v46 = *(_DWORD *)(*(void *)v44 + 8);
          }
          if (v46 <= 6) {
            Zero = llvm::ConstantFP::getZero(v45, (llvm::Type *)1, v42);
          }
          else {
            Zero = llvm::Constant::getNullValue(v45, v41, v42);
          }
          unsigned int v49 = Zero;
          uint64_t v50 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v44, v48);
          if (!v50)
          {
            v723 = *(void ***)v49;
            if (*(void *)v49)
            {
              v759 = v49;
              uint64_t v760 = (uint64_t)v44;
              uint64_t v724 = **v723 + 1512;
              LODWORD(v747) = 15;
              uint64_t v748 = &v759;
              uint64_t v749 = 2;
              memset(v750, 0, sizeof(v750));
              uint64_t v751 = 0;
              uint64_t v50 = sub_1CC56C20C(v724, (uint64_t)v723, (unsigned __int8 *)&v747);
            }
            else
            {
              uint64_t v50 = 0;
            }
          }
          int v52 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v50, *((unsigned int *)v40 + 2), 0);
          int v53 = *((_DWORD *)a2 + 5);
          if ((v53 & 0x40000000) != 0) {
            int v54 = (llvm::Instruction **)*((void *)a2 - 1);
          }
          else {
            int v54 = (llvm::Instruction **)&a2[-32 * (v53 & 0x7FFFFFF)];
          }
          uint64_t v55 = *v54;
          int v56 = *(unsigned __int8 *)(v50 + 16);
          if (v56 == 16)
          {
            uint64_t v57 = *(unsigned int *)(v50 + 32);
            if (v57 >= 0x41)
            {
              int v715 = 0;
              int64_t v716 = (unint64_t)(v57 + 63) >> 6;
              do
              {
                BOOL v237 = v716-- < 1;
                if (v237) {
                  break;
                }
                unint64_t v717 = *(void *)(*(void *)(v50 + 24) + 8 * v716);
                v715 += __clz(v717);
              }
              while (!v717);
              int v718 = v57 | 0xFFFFFFC0;
              if ((v57 & 0x3F) == 0) {
                int v718 = 0;
              }
              if (v715 + v718 == v57) {
                goto LABEL_143;
              }
            }
            else if (!*(void *)(v50 + 24))
            {
              goto LABEL_143;
            }
          }
          else if (v56 == 17)
          {
            if (sub_1CB844168(v50, 0.0)) {
              goto LABEL_143;
            }
          }
          else if ((v56 - 18) < 3 || v56 == 13)
          {
            goto LABEL_143;
          }
          if ((*((unsigned char *)v55 + 23) & 0x10) != 0)
          {
            uint64_t v58 = ***(void ***)v55;
            uint64_t v59 = *(void *)(v58 + 152);
            uint64_t v60 = *(unsigned int *)(v58 + 168);
            if (v60)
            {
              LODWORD(v61) = (v60 - 1) & ((v55 >> 4) ^ (v55 >> 9));
              uint64_t v62 = (llvm::Instruction **)(v59 + 16 * v61);
              uint64_t v63 = *v62;
              if (*v62 != v55)
              {
                int v64 = 1;
                do
                {
                  if (v63 == (llvm::Instruction *)-4096) {
                    goto LABEL_140;
                  }
                  int v65 = v61 + v64++;
                  uint64_t v61 = v65 & (v60 - 1);
                  uint64_t v63 = *(llvm::Instruction **)(v59 + 16 * v61);
                }
                while (v63 != v55);
                uint64_t v62 = (llvm::Instruction **)(v59 + 16 * v61);
              }
            }
            else
            {
LABEL_140:
              uint64_t v62 = (llvm::Instruction **)(v59 + 16 * v60);
            }
            uint64_t v90 = v62[1];
            int v93 = *(void **)v90;
            int v91 = (char *)v90 + 16;
            uint64_t v92 = v93;
          }
          else
          {
            uint64_t v92 = 0;
            int v91 = &byte_1CFBCE98E;
          }
          v750[4] = 773;
          int v747 = v91;
          uint64_t v748 = v92;
          uint64_t v749 = (uint64_t)".off";
          uint64_t v55 = sub_1CB844A3C((uint64_t)a3, v55, v50, (uint64_t)&v747, 0, 0);
LABEL_143:
          unsigned int v94 = *((unsigned __int8 *)v52 + 16);
          if (v52 && v94 == 16)
          {
            uint64_t v95 = *((unsigned int *)v52 + 8);
            if (v95 >= 0x41)
            {
              int v719 = 0;
              int64_t v720 = (unint64_t)(v95 + 63) >> 6;
              do
              {
                BOOL v237 = v720-- < 1;
                if (v237) {
                  break;
                }
                unint64_t v721 = *(void *)(v52[3] + 8 * v720);
                v719 += __clz(v721);
              }
              while (!v721);
              int v722 = v95 | 0xFFFFFFC0;
              if ((v95 & 0x3F) == 0) {
                int v722 = 0;
              }
              if (v719 + v722 != v95) {
                goto LABEL_147;
              }
            }
            else if (v52[3])
            {
              goto LABEL_147;
            }
          }
          else if (v52 && v94 == 17)
          {
            if ((sub_1CB844168((uint64_t)v52, 0.0) & 1) == 0) {
              goto LABEL_147;
            }
          }
          else if (v94 > 0x14 || ((1 << v94) & 0x1C2000) == 0)
          {
            goto LABEL_147;
          }
          if (*((_DWORD *)v40 + 2))
          {
            unsigned int v107 = **(uint64_t ***)a2;
            uint64_t v108 = *v107;
            uint64_t v96 = *(llvm::Value **)(*v107 + 1560);
            if (!v96)
            {
              uint64_t v326 = *(llvm::ConstantInt **)(v108 + 1888);
              unsigned int v327 = *(_DWORD *)(v108 + 1896);
              LODWORD(v748) = v327 >> 8;
              if (v327 >> 8 > 0x40) {
                operator new[]();
              }
              if (v327 <= 0xFF) {
                char v328 = 0;
              }
              else {
                char v328 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v327) + 63);
              }
              int v747 = (void *)(v328 & 1);
              uint64_t v96 = (llvm::Value *)llvm::ConstantInt::get(v326, (llvm::LLVMContext *)&v747, v51);
              if (v748 >= 0x41 && v747) {
                MEMORY[0x1D25D9CB0](v747, 0x1000C8000313F17);
              }
              *(void *)(v108 + 1560) = v96;
            }
LABEL_171:
            unint64_t v109 = operator new(0xA0uLL);
            uint64_t v110 = 0;
            int v111 = (llvm::Instruction *)(v109 + 24);
            v109[29] = v109[29] & 0x38000000 | 3;
            do
            {
              uint64_t v112 = &v109[v110];
              void *v112 = 0;
              v112[1] = 0;
              v112[2] = 0;
              v112[3] = v111;
              v110 += 8;
            }
            while (v110 != 24);
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v109 + 24), v24, v28, v96, 0);
            v750[4] = 257;
            unint64_t v113 = sub_1CB844E0C(a3, v111, (uint64_t)&v747);
            if ((a2[23] & 0x20) == 0) {
              goto LABEL_188;
            }
            uint64_t v114 = v113;
            uint64_t v115 = ***(void ***)a2;
            int v747 = a2;
            int v116 = *(_DWORD *)(v115 + 2496);
            if (v116)
            {
              uint64_t v117 = *(void *)(v115 + 2480);
              int v118 = v116 - 1;
              unsigned int v119 = v118 & ((a2 >> 4) ^ (a2 >> 9));
              uint64_t v120 = (char **)(v117 + 40 * v119);
              uint64_t v121 = *v120;
              if (*v120 == a2) {
                goto LABEL_184;
              }
              uint64_t v122 = 0;
              int v123 = 1;
              while (v121 != (char *)-4096)
              {
                if (v122) {
                  BOOL v124 = 0;
                }
                else {
                  BOOL v124 = v121 == (char *)-8192;
                }
                if (v124) {
                  uint64_t v122 = v120;
                }
                unsigned int v125 = v119 + v123++;
                unsigned int v119 = v125 & v118;
                uint64_t v120 = (char **)(v117 + 40 * v119);
                uint64_t v121 = *v120;
                if (*v120 == a2) {
                  goto LABEL_184;
                }
              }
              if (v122) {
                int v305 = v122;
              }
              else {
                int v305 = v120;
              }
            }
            else
            {
              int v305 = 0;
            }
            uint64_t v120 = (char **)sub_1CC609054(v115 + 2480, (uint64_t)&v747, (uint64_t *)&v747, v305);
            BOOL v306 = (char *)v747;
            v120[3] = 0;
            v120[4] = 0;
            *uint64_t v120 = v306;
            v120[1] = (char *)(v120 + 3);
            v120[2] = (char *)0x100000000;
LABEL_184:
            uint64_t v126 = *((unsigned int *)v120 + 4);
            if (v126)
            {
              uint64_t v127 = v120[1] + 8;
              uint64_t v128 = 16 * v126;
              while (*((_DWORD *)v127 - 2) != 2)
              {
                v127 += 2;
                v128 -= 16;
                if (!v128) {
                  goto LABEL_188;
                }
              }
              uint64_t v286 = *v127;
              if (v286)
              {
                uint64_t v287 = *(void *)(v286 - 8 * *(unsigned int *)(v286 + 8));
                if (v287)
                {
                  if (!*(unsigned char *)v287)
                  {
                    unsigned int v288 = *(void **)(v287 + 8);
                    if (*v288 == 14)
                    {
                      uint64_t v289 = v288[3];
                      uint64_t v290 = *(void *)((char *)v288 + 30);
                      if (v289 == 0x775F68636E617262 && v290 == 0x737468676965775FLL)
                      {
                        int v747 = &v749;
                        uint64_t v748 = (void *)0x800000000;
                        sub_1CD230274((uint64_t ***)a2, (uint64_t **)&v747);
                        unsigned int v292 = *((_DWORD *)a2 + 5);
                        if (v748 == ((v292 >> 1) & 0x3FFFFFF))
                        {
                          if (v748)
                          {
                            uint64_t v293 = 0;
                            unint64_t v294 = 0;
                            unint64_t v295 = 0;
                            uint64_t v296 = (uint64_t *)v747;
                            do
                            {
                              uint64_t v297 = &a2[-32 * (v292 & 0x7FFFFFF)];
                              if ((v292 & 0x40000000) != 0) {
                                uint64_t v297 = (char *)*((void *)a2 - 1);
                              }
                              unsigned int v298 = *(llvm::BasicBlock **)&v297[32 * (v293 & 0xFFFFFFFE) + 32];
                              uint64_t v300 = *v296++;
                              uint64_t v299 = v300;
                              BOOL v301 = v298 == v24;
                              if (v298 == v24) {
                                uint64_t v302 = v299;
                              }
                              else {
                                uint64_t v302 = 0;
                              }
                              v295 += v302;
                              if (v301) {
                                uint64_t v303 = 0;
                              }
                              else {
                                uint64_t v303 = v299;
                              }
                              v294 += v303;
                              v293 += 2;
                            }
                            while (2 * v748 != v293);
                          }
                          else
                          {
                            unint64_t v295 = 0;
                            unint64_t v294 = 0;
                          }
                          if (HIDWORD(v295)) {
                            BOOL v711 = 0;
                          }
                          else {
                            BOOL v711 = HIDWORD(v294) == 0;
                          }
                          if (!v711)
                          {
                            do
                            {
                              do
                              {
                                unint64_t v712 = v295 >> 33;
                                unint64_t v713 = v294;
                                v295 >>= 1;
                                v294 >>= 1;
                              }
                              while (v712);
                            }
                            while (v713 >> 33);
                          }
                          sub_1CD219628(v114, v295, v294);
                        }
                        if (v747 != &v749) {
                          free(v747);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_188:
            for (uint64_t i = *((void *)v24 + 6); ; uint64_t i = *(void *)(i + 8))
            {
              uint64_t v130 = i ? i - 24 : 0;
              if (*(unsigned char *)(v130 + 16) != 83) {
                break;
              }
              int v131 = *((_DWORD *)a2 + 5);
              if ((v131 & 0x40000000) != 0) {
                uint64_t v132 = (char *)*((void *)a2 - 1);
              }
              else {
                uint64_t v132 = &a2[-32 * (v131 & 0x7FFFFFF)];
              }
              if (v24 == *((llvm::BasicBlock **)v132 + 4)) {
                int v133 = *((_DWORD *)v40 + 2) + 1;
              }
              else {
                int v133 = *((_DWORD *)v40 + 2);
              }
              int v134 = v133 - 1;
              if (v133 != 1)
              {
                int v135 = 0;
                do
                {
                  int v136 = *(_DWORD *)(i - 4);
                  uint64_t v137 = v136 & 0x7FFFFFF;
                  if ((v136 & 0x7FFFFFF) != 0)
                  {
                    uint64_t v138 = 0;
                    while (1)
                    {
                      uint64_t v139 = i - 24 - 32 * v137;
                      if ((v136 & 0x40000000) != 0) {
                        uint64_t v139 = *(void *)(i - 32);
                      }
                      if (*(void *)(v139 + 32 * *(unsigned int *)(i + 36) + 8 * v138) == *((void *)a2 + 5)) {
                        break;
                      }
                      if (v137 == ++v138) {
                        goto LABEL_207;
                      }
                    }
                  }
                  else
                  {
LABEL_207:
                    LODWORD(v138) = -1;
                  }
                  llvm::PHINode::removeIncomingValue((llvm::PHINode *)(i - 24), v138, 1);
                  ++v135;
                }
                while (v135 != v134);
              }
            }
            for (uint64_t j = *((void *)v28 + 6); ; uint64_t j = *(void *)(j + 8))
            {
              if (j) {
                uint64_t v141 = j - 24;
              }
              else {
                uint64_t v141 = 0;
              }
              if (*(unsigned char *)(v141 + 16) != 83)
              {
                if (v737 == 35) {
                  sub_1CD2331DC((uint64_t)a2);
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              unsigned int v142 = *((_DWORD *)a2 + 5);
              if ((v142 & 0x40000000) != 0) {
                char v143 = (char *)*((void *)a2 - 1);
              }
              else {
                char v143 = &a2[-32 * (v142 & 0x7FFFFFF)];
              }
              int v144 = (v142 >> 1) & 0x3FFFFFF;
              int v145 = *((_DWORD *)v40 + 2);
              if (v28 == *((llvm::BasicBlock **)v143 + 4)) {
                int v146 = -v145;
              }
              else {
                int v146 = ~v145;
              }
              int v147 = v144 + v146;
              int v148 = v147 - 1;
              if (v147 != 1)
              {
                int v149 = 0;
                do
                {
                  int v150 = *(_DWORD *)(j - 4);
                  uint64_t v151 = v150 & 0x7FFFFFF;
                  if ((v150 & 0x7FFFFFF) != 0)
                  {
                    uint64_t v152 = 0;
                    while (1)
                    {
                      uint64_t v153 = j - 24 - 32 * v151;
                      if ((v150 & 0x40000000) != 0) {
                        uint64_t v153 = *(void *)(j - 32);
                      }
                      if (*(void *)(v153 + 32 * *(unsigned int *)(j + 36) + 8 * v152) == *((void *)a2 + 5)) {
                        break;
                      }
                      if (v151 == ++v152) {
                        goto LABEL_229;
                      }
                    }
                  }
                  else
                  {
LABEL_229:
                    LODWORD(v152) = -1;
                  }
                  llvm::PHINode::removeIncomingValue((llvm::PHINode *)(j - 24), v152, 1);
                  ++v149;
                }
                while (v149 != v148);
              }
            }
          }
LABEL_147:
          int v747 = "switch";
          v750[4] = 259;
          uint64_t v96 = sub_1CB845F20((uint64_t)a3, 36, v55, (uint64_t)v52, (uint64_t)&v747);
          goto LABEL_171;
        }
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v4 = (void **)a1;
    }
    int v43 = v24;
    uint64_t v40 = v764;
    uint64_t v24 = v28;
    uint64_t v28 = v43;
    if (sub_1CD233048((uint64_t)v764)) {
      goto LABEL_83;
    }
LABEL_235:
    if (v764[0] != &v765) {
      free(v764[0]);
    }
    if (__base[0] != v770) {
      free(__base[0]);
    }
    uint64_t v19 = v4[5];
  }
  int v154 = *((_DWORD *)a2 + 5);
  if ((v154 & 0x40000000) != 0) {
    int v155 = (uint64_t **)*((void *)a2 - 1);
  }
  else {
    int v155 = (uint64_t **)&a2[-32 * (v154 & 0x7FFFFFF)];
  }
  uint64_t v156 = (void *)v19[2];
  unsigned int v157 = (const llvm::Value *)v4[2];
  uint64_t v158 = *v155;
  uint64_t v159 = (uint64_t *)a2;
  if (!*((void *)a2 + 5))
  {
    BOOL v304 = v158 && *((unsigned __int8 *)v158 + 16) >= 0x1Cu;
    if (!v304 || (uint64_t v159 = *v155, !v158[5])) {
      uint64_t v159 = 0;
    }
  }
  uint64_t v160 = (uint64_t)v4[1];
  __base[0] = v4[2];
  __base[1] = v156;
  uint64_t v771 = 0;
  v770[0] = v159;
  v770[1] = 0;
  LOBYTE(v772) = 1;
  sub_1CC16089C(v158, 0, (const llvm::DataLayout **)__base, (uint64_t)&__src);
  unsigned int v162 = llvm::ComputeMaxSignificantBits((llvm *)v158, v157, 0, (uint64_t)v156, (llvm::AssumptionCache *)a2, 0, v161);
  v764[0] = &v765;
  v764[1] = (void *)0x800000000;
  __base[0] = (void *)1;
  for (uint64_t k = 1; k != 17; k += 2)
    __base[k] = (void *)-4096;
  int v747 = &v749;
  uint64_t v748 = (void *)0x800000000;
  unsigned int v164 = *((_DWORD *)a2 + 5);
  int v165 = (v164 >> 1) & 0x3FFFFFF;
  uint64_t v166 = (v165 - 1);
  if (v165 != 1)
  {
    uint64_t v167 = 0;
    while (1)
    {
      v752 = 0;
      int v168 = *((_DWORD *)a2 + 5);
      if ((v168 & 0x40000000) != 0) {
        unint64_t v169 = (char *)*((void *)a2 - 1);
      }
      else {
        unint64_t v169 = &a2[-32 * (v168 & 0x7FFFFFF)];
      }
      uint64_t v170 = (2 * v167 + 3);
      if (v167 == 4294967294) {
        uint64_t v170 = 1;
      }
      uint64_t v171 = *(void ***)&v169[32 * v170];
      v752 = v171;
      if (v160)
      {
        if ((sub_1CD461A14((uint64_t)__base, (uint64_t)v171, &v759) & 1) == 0)
        {
          if (v748 >= (unint64_t)HIDWORD(v748)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v747 + v748) = v752;
          LODWORD(v748) = v748 + 1;
        }
        uint64_t v173 = sub_1CD88474C(__base, &v752);
        ++*((_DWORD *)v173 + 2);
        int v168 = *((_DWORD *)a2 + 5);
        if ((v168 & 0x40000000) == 0)
        {
LABEL_255:
          uint64_t v172 = &a2[-32 * (v168 & 0x7FFFFFF)];
          goto LABEL_261;
        }
      }
      else if ((v168 & 0x40000000) == 0)
      {
        goto LABEL_255;
      }
      uint64_t v172 = (char *)*((void *)a2 - 1);
LABEL_261:
      int v174 = *(void ***)&v172[32 * ((2 * v167 + 2) & 0xFFFFFFFE)];
      int v175 = (llvm::APInt *)(v174 + 3);
      if (v756 > 0x40)
      {
        uint64_t v177 = 0;
        unint64_t v176 = *(void *)v175;
        while ((*(void *)(v176 + v177) & *(void *)((unsigned char *)__src + v177)) == 0)
        {
          v177 += 8;
          if (((((unint64_t)v756 + 63) >> 3) & 0x3FFFFFF8) == v177) {
            goto LABEL_267;
          }
        }
      }
      else
      {
        unint64_t v176 = *(void *)v175;
        if ((*(void *)v175 & (unint64_t)__src) == 0)
        {
LABEL_267:
          if (v758 > 0x40)
          {
            unint64_t v185 = ((unint64_t)v758 + 63) >> 6;
            uint64_t v186 = (uint64_t *)v757;
            uint64_t v187 = (uint64_t *)v176;
            while (1)
            {
              uint64_t v189 = *v186++;
              uint64_t v188 = v189;
              uint64_t v190 = *v187++;
              if ((v188 & ~v190) != 0) {
                break;
              }
              if (!--v185) {
                goto LABEL_269;
              }
            }
          }
          else if ((v757 & ~v176) == 0)
          {
LABEL_269:
            uint64_t v178 = *((unsigned int *)v174 + 8);
            unsigned int v179 = v178 - 1;
            if (v178 > 0x40)
            {
              if ((*(void *)(v176 + 8 * (v179 >> 6)) >> v179))
              {
                int v183 = llvm::APInt::countLeadingOnesSlowCase(v175);
              }
              else
              {
                int v192 = 0;
                int64_t v193 = (unint64_t)(v178 + 63) >> 6;
                do
                {
                  BOOL v237 = v193-- < 1;
                  if (v237) {
                    break;
                  }
                  unint64_t v194 = *(void *)(v176 + 8 * v193);
                  v192 += __clz(v194);
                }
                while (!v194);
                int v195 = v178 | 0xFFFFFFC0;
                if ((v178 & 0x3F) == 0) {
                  int v195 = 0;
                }
                int v183 = v192 + v195;
              }
            }
            else
            {
              unint64_t v180 = v176 >> v179;
              int v181 = v178 + __clz(v176) - 64;
              int v182 = __clz(~(v176 << -(char)v178));
              if (!v178) {
                int v182 = 0;
              }
              if (v180) {
                int v183 = v182;
              }
              else {
                int v183 = v181;
              }
            }
            if ((int)v178 - v183 + 1 <= v162) {
              goto LABEL_282;
            }
          }
        }
      }
      if ((v168 & 0x40000000) != 0) {
        uint64_t v184 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v184 = &a2[-32 * (v168 & 0x7FFFFFF)];
      }
      if (LODWORD(v764[1]) >= (unint64_t)HIDWORD(v764[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v764[0] + LODWORD(v764[1])) = *(void *)&v184[32 * ((2 * v167 + 2) & 0xFFFFFFFE)];
      ++LODWORD(v764[1]);
      if (v160)
      {
        int v191 = sub_1CD88474C(__base, &v752);
        --*((_DWORD *)v191 + 2);
      }
LABEL_282:
      if (++v167 == v166)
      {
        unsigned int v164 = *((_DWORD *)a2 + 5);
        break;
      }
    }
  }
  if ((v164 & 0x40000000) != 0) {
    char v196 = (char *)*((void *)a2 - 1);
  }
  else {
    char v196 = &a2[-32 * (v164 & 0x7FFFFFF)];
  }
  int v198 = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v196 + 4), 1)[16];
  if (v756 >= 0x41) {
    operator new[]();
  }
  uint8x8_t v199 = (uint8x8_t)vcnt_s8((int8x8_t)(v757 | (unint64_t)__src));
  v199.i16[0] = vaddlv_u8(v199);
  if (v198 == 35 || LODWORD(v764[1]) || (v756 - v199.i32[0]) > 0x3F)
  {
    if (LODWORD(v764[1]))
    {
      v759 = a2;
      LOBYTE(v760) = 0;
      char v762 = 0;
      char v763 = 0;
      llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)&v759, v197);
      if (LODWORD(v764[1]))
      {
        uint64_t v200 = (uint64_t *)v764[0];
        uint64_t v201 = 8 * LODWORD(v764[1]);
        do
        {
          sub_1CC025540((uint64_t)a2, *v200);
          int v203 = v202;
          int v204 = *((_DWORD *)a2 + 5);
          if ((v204 & 0x40000000) != 0) {
            unsigned int v205 = (char *)*((void *)a2 - 1);
          }
          else {
            unsigned int v205 = &a2[-32 * (v204 & 0x7FFFFFF)];
          }
          uint64_t v206 = (2 * v202 + 3);
          if (v202 == 4294967294) {
            uint64_t v206 = 1;
          }
          llvm::BasicBlock::removePredecessor(*(llvm::Type **)&v205[32 * v206], *((llvm::BasicBlock **)a2 + 5), 0);
          if (v762)
          {
            char v763 = 1;
            *(_DWORD *)(v760 + 4 * (v203 + 1)) = *(_DWORD *)(v760 + 4 * v761[0]-- - 4);
          }
          llvm::SwitchInst::removeCase((uint64_t)v759, (uint64_t)a2, v203);
          ++v200;
          v201 -= 8;
        }
        while (v201);
      }
      if (v160)
      {
        if (v748)
        {
          unsigned int v207 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          unsigned int v210 = (void **)v747;
          int v211 = (llvm::DataLayout *)((char *)v747 + 8 * v748);
          do
          {
            v752 = 0;
            v752 = *v210;
            if (!*((_DWORD *)sub_1CD88474C(__base, &v752) + 2))
            {
              BOOL v212 = (void **)*((void *)a2 + 5);
              unint64_t v213 = (unint64_t)v752 | 4;
              if (v208 >= v209)
              {
                v734 = v211;
                uint64_t v214 = (v208 - v207) >> 4;
                unint64_t v215 = v214 + 1;
                if ((unint64_t)(v214 + 1) >> 60) {
LABEL_1201:
                }
                  abort();
                if ((v209 - v207) >> 3 > v215) {
                  unint64_t v215 = (v209 - v207) >> 3;
                }
                if ((unint64_t)(v209 - v207) >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v216 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v216 = v215;
                }
                if (v216)
                {
                  if (v216 >> 60) {
LABEL_1202:
                  }
                    sub_1CB833614();
                  uint64_t v217 = (char *)operator new(16 * v216);
                }
                else
                {
                  uint64_t v217 = 0;
                }
                uint64_t v218 = &v217[16 * v214];
                *(void *)uint64_t v218 = v212;
                *((void *)v218 + 1) = v213;
                if (v208 == v207)
                {
                  int v220 = &v217[16 * v214];
                }
                else
                {
                  uint64_t v219 = &v217[16 * v214];
                  do
                  {
                    int v220 = v219 - 16;
                    *((_OWORD *)v219 - 1) = *((_OWORD *)v208 - 1);
                    v208 -= 16;
                    v219 -= 16;
                  }
                  while (v208 != v207);
                }
                uint64_t v209 = &v217[16 * v216];
                uint64_t v208 = v218 + 16;
                if (v207) {
                  operator delete(v207);
                }
                unsigned int v207 = v220;
                int v211 = v734;
              }
              else
              {
                *(void *)uint64_t v208 = v212;
                *((void *)v208 + 1) = v213;
                v208 += 16;
              }
            }
            ++v210;
          }
          while (v210 != (void **)v211);
        }
        else
        {
          uint64_t v208 = 0;
          unsigned int v207 = 0;
        }
        llvm::DomTreeUpdater::applyUpdates(v160, (unint64_t *)v207, (v208 - v207) >> 4);
        if (v207) {
          operator delete(v207);
        }
      }
      sub_1CCD3104C((uint64_t)&v759);
      char v221 = 1;
    }
    else
    {
      char v221 = 0;
    }
    uint64_t v4 = (void **)a1;
  }
  else
  {
    uint64_t v4 = (void **)a1;
    if (1 << (v756 - v199.i8[0]) == ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) - 1) {
      sub_1CD2331DC((uint64_t)a2);
    }
    char v221 = 0;
  }
  if (v747 != &v749) {
    free(v747);
  }
  if (((uint64_t)__base[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](__base[1], 8);
  }
  if (v764[0] != &v765) {
    free(v764[0]);
  }
  if (v758 >= 0x41 && v757) {
    MEMORY[0x1D25D9CB0](v757, 0x1000C8000313F17);
  }
  if (v756 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v221) {
    goto LABEL_743;
  }
  uint64_t v222 = (llvm::DataLayout *)v4[2];
  uint64_t v223 = (uint64_t)*v4;
  unsigned int v224 = *((_DWORD *)a2 + 5);
  if ((v224 & 0x40000000) != 0) {
    int v225 = (llvm::ConstantInt ****)*((void *)a2 - 1);
  }
  else {
    int v225 = (llvm::ConstantInt ****)&a2[-32 * (v224 & 0x7FFFFFF)];
  }
  v733 = *v225;
  uint64_t v735 = *(llvm::DataLayout **)(a1 + 8);
  int __src = 0;
  __base[0] = v770;
  __base[1] = (void *)0x200000000;
  int v226 = (v224 >> 1) & 0x3FFFFFF;
  uint64_t v227 = (v226 - 1);
  if (v226 != 1)
  {
    uint64_t v228 = 0;
    uint64_t v229 = 0;
    while (1)
    {
      int v230 = *((_DWORD *)a2 + 5);
      if ((v230 & 0x40000000) != 0) {
        uint64_t v231 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v231 = &a2[-32 * (v230 & 0x7FFFFFF)];
      }
      uint64_t v232 = *(void *)&v231[32 * (2 * v228 + 2)];
      v764[0] = &v765;
      v764[1] = (void *)0x400000000;
      if ((v230 & 0x40000000) != 0) {
        int v233 = (char *)*((void *)a2 - 1);
      }
      else {
        int v233 = &a2[-32 * (v230 & 0x7FFFFFF)];
      }
      uint64_t v234 = (2 * v228 + 3);
      if (v228 == 4294967294) {
        uint64_t v234 = 1;
      }
      int v235 = sub_1CD233670((uint64_t)a2, v232, *(llvm::BasicBlock **)&v233[32 * v234], (llvm::BasicBlock **)&__src, (uint64_t)v764, v222, v223);
      uint64_t v236 = (uint64_t *)v764[0];
      if (v235) {
        BOOL v237 = LODWORD(v764[1]) > 1;
      }
      else {
        BOOL v237 = 1;
      }
      if (!v237)
      {
        uint64_t v239 = v229;
        int v240 = (void *)*((void *)v764[0] + 1);
        if (LODWORD(__base[1]))
        {
          int v241 = (void **)((char *)__base[0] + 24);
          uint64_t v242 = 56 * LODWORD(__base[1]);
          while (*(v241 - 3) != v240)
          {
            v241 += 7;
            v242 -= 56;
            if (!v242) {
              goto LABEL_386;
            }
          }
          unint64_t v248 = *((unsigned int *)v241 - 2);
          if (v248 >= *((unsigned int *)v241 - 1)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)*(v241 - 2) + v248) = v232;
          unint64_t v247 = (*((_DWORD *)v241 - 2) + 1);
          *((_DWORD *)v241 - 2) = v247;
          uint64_t v229 = v239;
        }
        else
        {
LABEL_386:
          v759 = v761;
          *(void *)BOOL v761 = v232;
          uint64_t v760 = 0x400000001;
          int v747 = v240;
          uint64_t v748 = v750;
          uint64_t v749 = 0x400000000;
          sub_1CD69EC18((uint64_t)&v748, (uint64_t)&v759);
          uint64_t v243 = (char *)__base[0];
          if (LODWORD(__base[1]) >= HIDWORD(__base[1]))
          {
            unint64_t v250 = LODWORD(__base[1]) + 1;
            if (__base[0] <= &v747 && (char *)__base[0] + 56 * LODWORD(__base[1]) > (char *)&v747)
            {
              int64_t v251 = (char *)&v747 - (char *)__base[0];
              sub_1CD2345B4((char **)__base, v250);
              uint64_t v243 = (char *)__base[0];
              unsigned int v244 = (void **)((char *)__base[0] + v251);
            }
            else
            {
              sub_1CD2345B4((char **)__base, v250);
              unsigned int v244 = &v747;
              uint64_t v243 = (char *)__base[0];
            }
          }
          else
          {
            unsigned int v244 = &v747;
          }
          BOOL v245 = (void **)&v243[56 * LODWORD(__base[1])];
          *BOOL v245 = *v244;
          v245[2] = (void *)0x400000000;
          v245[1] = v245 + 3;
          uint64_t v246 = (uint64_t)(v245 + 1);
          uint64_t v229 = v239;
          if (*((_DWORD *)v244 + 4)) {
            sub_1CD69EC18(v246, (uint64_t)(v244 + 1));
          }
          ++LODWORD(__base[1]);
          if (v748 != v750) {
            free(v748);
          }
          if (v759 != v761) {
            free(v759);
          }
          unint64_t v247 = 1;
        }
        if (v247 > dword_1EBCFE708 || LODWORD(__base[1]) >= 3)
        {
          char v238 = 0;
          uint64_t v236 = (uint64_t *)v764[0];
          goto LABEL_408;
        }
        uint64_t v236 = (uint64_t *)v764[0];
        if (!v229)
        {
          uint64_t v229 = *(void *)v764[0];
LABEL_407:
          char v238 = 1;
          goto LABEL_408;
        }
        if (v229 == *(void *)v764[0]) {
          goto LABEL_407;
        }
      }
      char v238 = 0;
LABEL_408:
      if (v236 != &v765) {
        free(v236);
      }
      if ((v238 & 1) == 0) {
        goto LABEL_438;
      }
      if (++v228 == v227)
      {
        unsigned int v224 = *((_DWORD *)a2 + 5);
        goto LABEL_419;
      }
    }
  }
  uint64_t v229 = 0;
LABEL_419:
  v764[0] = &v765;
  v764[1] = (void *)0x100000000;
  if ((v224 & 0x40000000) != 0) {
    uint64_t v252 = (char *)*((void *)a2 - 1);
  }
  else {
    uint64_t v252 = &a2[-32 * (v224 & 0x7FFFFFF)];
  }
  unint64_t v253 = (llvm::BasicBlock *)*((void *)v252 + 4);
  sub_1CD233670((uint64_t)a2, 0, v253, (llvm::BasicBlock **)&__src, (uint64_t)v764, v222, v223);
  BOOL v255 = 1;
  if (LODWORD(v764[1]) != 1 || (uint64_t Select = (llvm::Value *)*((void *)v764[0] + 1)) == 0)
  {
    uint64_t Select = 0;
    if (llvm::BasicBlock::getFirstNonPHIOrDbg(v253, 1)[16] != 35) {
      BOOL v255 = 0;
    }
  }
  if (v764[0] != &v765) {
    free(v764[0]);
  }
  if (!v255)
  {
LABEL_438:
    sub_1CD234724((char **)__base);
    uint64_t v4 = (void **)a1;
    goto LABEL_572;
  }
  uint64_t v256 = (uint64_t)a3;
  a3[6] = *((void *)a2 + 5);
  a3[7] = (uint64_t)(a2 + 24);
  uint64_t v257 = (void **)*((void *)a2 + 6);
  int v747 = v257;
  if (v257)
  {
    llvm::MetadataTracking::track((uint64_t)&v747, (unsigned __int8 *)v257, 2);
    uint64_t v256 = (uint64_t)a3;
    uint64_t v258 = v747;
  }
  else
  {
    uint64_t v258 = 0;
  }
  sub_1CB8461A4(v256, 0, (uint64_t)v258);
  uint64_t v4 = (void **)a1;
  if (v747)
  {
    int v307 = *(unsigned __int8 *)v747;
    if ((v307 - 4) > 0x1E)
    {
      if ((v307 - 3) >= 0xFFFFFFFE) {
        uint64_t v325 = v747;
      }
      else {
        uint64_t v325 = 0;
      }
      if ((v307 - 3) < 0xFFFFFFFE)
      {
        if (v307 == 3) {
          *((void *)v747 + 1) = 0;
        }
        goto LABEL_433;
      }
      unint64_t v309 = (unint64_t)v325 + 8;
    }
    else
    {
      if ((*((unsigned char *)v747 + 1) & 0x7F) != 2 && !*((_DWORD *)v747 + 3)) {
        goto LABEL_433;
      }
      uint64_t v308 = *((void *)v747 + 2);
      if ((v308 & 4) == 0) {
        goto LABEL_433;
      }
      unint64_t v309 = v308 & 0xFFFFFFFFFFFFFFF8;
      if (!v309) {
        goto LABEL_433;
      }
    }
    v764[0] = &v747;
    sub_1CC5FA668(v309 + 16, v764);
  }
LABEL_433:
  uint64_t v738 = v229;
  if (LODWORD(__base[1]) == 2)
  {
    if (*((_DWORD *)__base[0] + 4) == 1 && *((_DWORD *)__base[0] + 18) == 1)
    {
      uint64_t v260 = **((void **)__base[0] + 1);
      if (Select)
      {
        uint64_t v261 = **((void **)__base[0] + 8);
        v764[0] = "switch.selectcmp";
        __int16 v767 = 259;
        uint64_t v262 = (uint64_t)a3;
        uint64_t v263 = v733;
        uint64_t v264 = sub_1CB845F20((uint64_t)a3, 32, v733, v261, (uint64_t)v764);
        unint64_t v265 = (llvm::Value *)*((void *)__base[0] + 7);
        v764[0] = "switch.select";
        __int16 v767 = 259;
        uint64_t Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a3, v264, v265, Select, (const llvm::Twine *)v764, 0);
      }
      else
      {
        uint64_t Select = (llvm::Value *)*((void *)__base[0] + 7);
        uint64_t v262 = (uint64_t)a3;
        uint64_t v263 = v733;
      }
      v764[0] = "switch.selectcmp";
      __int16 v767 = 259;
      unint64_t v310 = sub_1CB845F20(v262, 32, v263, v260, (uint64_t)v764);
      uint64_t v311 = *(llvm::Value **)__base[0];
      v764[0] = "switch.select";
      __int16 v767 = 259;
      long long v312 = (llvm::IRBuilderBase *)v262;
      goto LABEL_557;
    }
    goto LABEL_571;
  }
  if (!Select || LODWORD(__base[1]) != 1) {
    goto LABEL_571;
  }
  int v266 = (llvm::Value **)*((void *)__base[0] + 1);
  int8x8_t v267 = (int8x8_t)*((unsigned int *)__base[0] + 4);
  uint8x8_t v268 = (uint8x8_t)vcnt_s8(v267);
  v268.i16[0] = vaddlv_u8(v268);
  if (v268.i32[0] == 1)
  {
    uint64_t v269 = *v266;
    uint64_t v270 = &v266[*(void *)&v267];
    if (v267.i32[0])
    {
      unsigned int v271 = (llvm::Value **)*((void *)__base[0] + 1);
      while (1)
      {
        uint64_t v272 = *v271;
        uint64_t v273 = (void *)((char *)v269 + 24);
        uint64_t v274 = *((unsigned int *)*v271 + 8);
        if (v274 > 0x40) {
          break;
        }
        if ((uint64_t)(*((void *)v272 + 3) << -(char)v274) >> -(char)v274 >= (uint64_t)(*v273 << -(char)v274) >> -(char)v274) {
          goto LABEL_446;
        }
LABEL_447:
        ++v271;
        uint64_t v269 = v272;
        if (v271 == v270) {
          goto LABEL_504;
        }
      }
      uint64_t v275 = *((void *)v272 + 3);
      uint64_t v276 = *(void *)(v275 + 8 * ((v274 - 1) >> 6)) & (1 << (v274 - 1));
      unsigned int v277 = *((_DWORD *)v269 + 8);
      unsigned int v278 = v277 - 1;
      uint64_t v279 = *((void *)v269 + 3);
      if (v277 >= 0x41) {
        uint64_t v273 = (void *)(v279 + 8 * (v278 >> 6));
      }
      if ((v276 != 0) == ((*v273 >> v278) & 1))
      {
        unint64_t v280 = v274 + 63;
        uint64_t v281 = v279 - 8;
        uint64_t v282 = (v280 >> 3) & 0x3FFFFFF8;
        uint64_t v283 = v275 - 8;
        while (v282)
        {
          unint64_t v284 = *(void *)(v283 + v282);
          unint64_t v285 = *(void *)(v281 + v282);
          v282 -= 8;
          if (v284 != v285)
          {
            if (v284 <= v285) {
              goto LABEL_447;
            }
            break;
          }
        }
      }
      else if (v276)
      {
        goto LABEL_447;
      }
LABEL_446:
      uint64_t v272 = v269;
      goto LABEL_447;
    }
    uint64_t v272 = *v266;
LABEL_504:
    unsigned int v739 = *((_DWORD *)v272 + 8);
    if (v739 >= 0x41) {
      operator new[]();
    }
    int8x8_t v313 = 0;
    uint64_t v731 = Select;
    __int32 v732 = v267.i32[0];
    if (v267.i32[0])
    {
      int v314 = (llvm::Value **)*((void *)__base[0] + 1);
      do
      {
        unsigned int v315 = *((_DWORD *)*v314 + 8);
        if (v315 >= 0x41) {
          operator new[]();
        }
        unint64_t v316 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v315;
        if (!v315) {
          unint64_t v316 = 0;
        }
        *(void *)&v313 |= v316 & (*((void *)*v314++ + 3) - *((void *)v272 + 3));
      }
      while (v314 != v270);
    }
    uint8x8_t v317 = (uint8x8_t)vcnt_s8(v313);
    v317.i16[0] = vaddlv_u8(v317);
    __int32 v318 = v317.i32[0];
    int v730 = (llvm::Value **)*((void *)__base[0] + 1);
    int v266 = v730;
    uint64_t Select = v731;
    unsigned int v319 = 31 - __clz(v267.u32[0]);
    if (v317.i32[0] != v319) {
      goto LABEL_554;
    }
    unsigned int v320 = *((unsigned __int8 *)v272 + 16);
    if (v272 && v320 == 16)
    {
      uint64_t v321 = *((unsigned int *)v272 + 8);
      if (v321 >= 0x41)
      {
        int v725 = 0;
        int64_t v726 = (unint64_t)(v321 + 63) >> 6;
        do
        {
          BOOL v237 = v726-- < 1;
          if (v237) {
            break;
          }
          unint64_t v727 = *(void *)(*((void *)v272 + 3) + 8 * v726);
          v725 += __clz(v727);
        }
        while (!v727);
        int v728 = v321 | 0xFFFFFFC0;
        if ((v321 & 0x3F) == 0) {
          int v728 = 0;
        }
        uint64_t Select = v731;
        if (v725 + v728 != v321) {
          goto LABEL_518;
        }
      }
      else if (*((void *)v272 + 3))
      {
LABEL_518:
        __int16 v767 = 257;
        int v322 = (llvm::ConstantInt ***)sub_1CB84494C((uint64_t)a3, (uint64_t)v733, (uint64_t)v272, (uint64_t)v764, 0, 0);
LABEL_546:
        v733 = v322;
        LODWORD(v760) = v739;
        unint64_t v329 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v739;
        if (!v739) {
          unint64_t v329 = 0;
        }
        v759 = (void *)(v329 & ~*(void *)&v313);
        LODWORD(v748) = v739;
        int v747 = v759;
        LODWORD(v760) = 0;
        v764[0] = "switch.and";
        __int16 v767 = 259;
        uint64_t v330 = *v322;
        int v331 = (llvm::Value *)llvm::ConstantInt::get(**v322, (llvm::LLVMContext *)&v747, v259);
        Splat = v331;
        if ((v330[1] & 0xFE) == 0x12) {
          Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v330 + 8) | ((unint64_t)(*((_DWORD *)v330 + 2) == 19) << 32)), (uint64_t)v331);
        }
        int8x8_t v267 = (int8x8_t)sub_1CBF52474((uint64_t)a3, v733, (uint64_t)Splat, (uint64_t)v764);
        if (v748 >= 0x41 && v747) {
          MEMORY[0x1D25D9CB0](v747, 0x1000C8000313F17);
        }
        NullValue = llvm::Constant::getNullValue(**(llvm::Constant ***)&v267, v333, v334);
        v764[0] = "switch.selectcmp";
        __int16 v767 = 259;
        int v336 = sub_1CB845F20((uint64_t)a3, 32, *(void **)&v267, (uint64_t)NullValue, (uint64_t)v764);
        uint64_t v337 = *(llvm::Value **)__base[0];
        __int16 v767 = 257;
        uint64_t v272 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a3, v336, v337, Select, (const llvm::Twine *)v764, 0);
        int v266 = v730;
        v267.i32[0] = v732;
LABEL_554:
        uint64_t v4 = (void **)a1;
        if (v318 == v319) {
          goto LABEL_558;
        }
        goto LABEL_555;
      }
    }
    else if (v272 && v320 == 17)
    {
      if ((sub_1CB844168((uint64_t)v272, 0.0) & 1) == 0) {
        goto LABEL_518;
      }
    }
    else if (v320 > 0x14 || ((1 << v320) & 0x1C2000) == 0)
    {
      goto LABEL_518;
    }
    int v322 = v733;
    goto LABEL_546;
  }
LABEL_555:
  if (v267.i32[0] == 2)
  {
    uint64_t v338 = (uint64_t)*v266;
    v764[0] = "switch.selectcmp.case1";
    __int16 v767 = 259;
    uint64_t v339 = sub_1CB845F20((uint64_t)a3, 32, v733, v338, (uint64_t)v764);
    uint64_t v340 = (uint64_t)v266[1];
    v764[0] = "switch.selectcmp.case2";
    __int16 v767 = 259;
    uint64_t v341 = sub_1CB845F20((uint64_t)a3, 32, v733, v340, (uint64_t)v764);
    v764[0] = "switch.selectcmp";
    __int16 v767 = 259;
    unint64_t v310 = sub_1CB844AF4((uint64_t)a3, v339, (uint64_t)v341, (uint64_t)v764);
    uint64_t v311 = *(llvm::Value **)__base[0];
    __int16 v767 = 257;
    long long v312 = (llvm::IRBuilderBase *)a3;
LABEL_557:
    uint64_t v272 = llvm::IRBuilderBase::CreateSelect(v312, v310, v311, Select, (const llvm::Twine *)v764, 0);
LABEL_558:
    if (v272)
    {
      uint64_t v342 = (llvm::BasicBlock *)*((void *)a2 + 5);
      uint64_t v343 = *(void *)(v229 + 40);
      if (v735)
      {
        uint64_t v344 = *(void *)(v343 + 8);
        if (v344)
        {
          while (1)
          {
            uint64_t v345 = *(void *)(v344 + 24);
            unsigned int v346 = *(unsigned __int8 *)(v345 + 16);
            BOOL v347 = v345 && v346 >= 0x1C;
            if (v347 && v346 - 29 <= 0xA) {
              break;
            }
            uint64_t v344 = *(void *)(v344 + 8);
            if (!v344) {
              goto LABEL_570;
            }
          }
LABEL_692:
          if (*(llvm::BasicBlock **)(v345 + 40) == v342) {
            goto LABEL_693;
          }
          while (1)
          {
            uint64_t v344 = *(void *)(v344 + 8);
            if (!v344) {
              break;
            }
            uint64_t v345 = *(void *)(v344 + 24);
            unsigned int v415 = *(unsigned __int8 *)(v345 + 16);
            if (v345) {
              BOOL v416 = v415 >= 0x1C;
            }
            else {
              BOOL v416 = 0;
            }
            if (v416 && v415 - 29 <= 0xA) {
              goto LABEL_692;
            }
          }
        }
LABEL_570:
        BOOL v349 = (char *)operator new(0x10uLL);
        uint64_t v740 = v349 + 16;
        *(void *)BOOL v349 = v342;
        *((void *)v349 + 1) = v343 & 0xFFFFFFFFFFFFFFFBLL;
        goto LABEL_694;
      }
LABEL_693:
      BOOL v349 = 0;
      uint64_t v740 = 0;
LABEL_694:
      int v418 = (char *)operator new(0x60uLL);
      *((_DWORD *)v418 + 13) = *((_DWORD *)v418 + 13) & 0x38000000 | 1;
      *(void *)int v418 = 0;
      *((void *)v418 + 2) = 0;
      *((void *)v418 + 1) = 0;
      *((void *)v418 + 4) = ***(void ***)v343 + 1576;
      *((void *)v418 + 3) = v418 + 32;
      *((void *)v418 + 5) = 0;
      v418[48] = 30;
      v418[49] = 0;
      *((_WORD *)v418 + 25) = 0;
      *((_DWORD *)v418 + 13) = 1;
      *(_OWORD *)(v418 + 56) = 0u;
      *(_OWORD *)(v418 + 72) = 0u;
      *((_DWORD *)v418 + 22) = 0;
      *(void *)int v418 = v343;
      uint64_t v419 = (void *)(v343 + 8);
      uint64_t v420 = *(void *)(v343 + 8);
      *((void *)v418 + 1) = v420;
      if (v420) {
        *(void *)(v420 + 16) = v418 + 8;
      }
      *((void *)v418 + 2) = v419;
      *uint64_t v419 = v418;
      __int16 v767 = 257;
      sub_1CB844E0C(a3, (llvm::Instruction *)(v418 + 32), (uint64_t)v764);
      while (1)
      {
        int v421 = *(_DWORD *)(v229 + 20);
        unsigned int v422 = v421 & 0x7FFFFFF;
        if ((v421 & 0x7FFFFFF) == 0) {
          break;
        }
        unsigned int v423 = 0;
        uint64_t v424 = v422;
        uint64_t v425 = v229 - 32 * v422;
        uint64_t v426 = *(unsigned int *)(v229 + 60);
        while (1)
        {
          uint64_t v427 = v229 - 32 * v422;
          if ((v421 & 0x40000000) != 0) {
            uint64_t v427 = *(void *)(v229 - 8);
          }
          if (*(llvm::BasicBlock **)(v427 + 32 * v426 + 8 * v423) == v342) {
            break;
          }
          if (v422 == ++v423) {
            goto LABEL_807;
          }
        }
        uint64_t v428 = 0;
        uint64_t v429 = 32 * v426;
        do
        {
          uint64_t v430 = v425;
          if ((v421 & 0x40000000) != 0) {
            uint64_t v430 = *(void *)(v229 - 8);
          }
          if (*(llvm::BasicBlock **)(v430 + v429 + 8 * v428) == v342) {
            goto LABEL_710;
          }
          ++v428;
        }
        while (v424 != v428);
        LODWORD(v428) = -1;
LABEL_710:
        llvm::PHINode::removeIncomingValue((llvm::PHINode *)v229, v428, 1);
      }
      unsigned int v422 = 0;
      LODWORD(v426) = *(_DWORD *)(v229 + 60);
LABEL_807:
      if (v422 == v426)
      {
        uint64_t v658 = v421 & 0x7FFFFFF;
        unsigned int v659 = v658 + (v658 >> 1);
        if (v659 <= 2) {
          uint64_t v660 = 2;
        }
        else {
          uint64_t v660 = v659;
        }
        *(_DWORD *)(v229 + 60) = v660;
        if ((v421 & 0x40000000) != 0) {
          int v661 = *(uint64_t **)(v229 - 8);
        }
        else {
          int v661 = (uint64_t *)(v229 - 32 * v658);
        }
        v743 = v661;
        uint64_t v662 = operator new(40 * v660);
        *(void *)(v229 - 8) = v662;
        int v663 = v662;
        do
        {
          *int v663 = 0;
          v663[1] = 0;
          v663[2] = 0;
          v663[3] = v229;
          v663 += 4;
        }
        while (v663 != &v662[4 * v660]);
        int v664 = *(_DWORD *)(v229 + 20);
        if ((v664 & 0x40000000) != 0) {
          uint64_t v665 = (uint64_t)v662;
        }
        else {
          uint64_t v665 = v229 - 32 * (v664 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)v764, v743, &v743[4 * v658], v665);
        if (v658)
        {
          memmove((void *)(v665 + 32 * v660), &v743[4 * v658], 8 * v658);
          uint64_t v666 = 4 * v658;
          do
          {
            __int16 v667 = &v743[v666];
            if (v743[v666 - 4])
            {
              *(void *)*(v667 - 2) = *(v667 - 3);
              uint64_t v668 = *(v667 - 3);
              if (v668) {
                *(void *)(v668 + 16) = *(v667 - 2);
              }
            }
            v666 -= 4;
          }
          while (v666 * 8);
        }
        operator delete(v743);
        uint64_t v229 = v738;
        int v421 = *(_DWORD *)(v738 + 20);
      }
      uint64_t v497 = (v421 + 1) & 0x7FFFFFF;
      *(_DWORD *)(v229 + 20) = v421 & 0xF8000000 | (v421 + 1) & 0x7FFFFFF;
      uint64_t v498 = (v497 - 1);
      if ((v421 & 0x40000000) != 0) {
        uint64_t v499 = *(void *)(v229 - 8);
      }
      else {
        uint64_t v499 = v229 - 32 * v497;
      }
      uint64_t v500 = v499 + 32 * v498;
      uint64_t v501 = v500;
      if (*(void *)v500)
      {
        **(void **)(v500 + 16) = *(void *)(v500 + 8);
        uint64_t v657 = *(void *)(v500 + 8);
        if (v657) {
          *(void *)(v657 + 16) = *(void *)(v500 + 16);
        }
      }
      *(void *)uint64_t v500 = v272;
      uint64_t v504 = *((void *)v272 + 1);
      v503 = (void *)((char *)v272 + 8);
      uint64_t v502 = v504;
      *(void *)(v500 + 8) = v504;
      uint64_t v505 = v500 + 8;
      if (v504) {
        *(void *)(v502 + 16) = v505;
      }
      *(void *)(v499 + 32 * v498 + 16) = v503;
      void *v503 = v501;
      int v506 = *(_DWORD *)(v229 + 20);
      uint64_t v507 = v506 & 0x7FFFFFF;
      if ((v506 & 0x40000000) != 0) {
        uint64_t v508 = *(void *)(v229 - 8);
      }
      else {
        uint64_t v508 = v229 - 32 * v507;
      }
      *(void *)(v508 + 32 * *(unsigned int *)(v229 + 60) + 8 * (v507 - 1)) = v342;
      v764[0] = &v767;
      v764[1] = &v767;
      uint64_t v765 = 4;
      int v766 = 0;
      unint64_t v509 = ((unint64_t)*((unsigned int *)a2 + 5) >> 1) & 0x3FFFFFF;
      if (!v509) {
LABEL_882:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      uint64_t v510 = 0;
      v511 = v740;
      while (1)
      {
        int v512 = *((_DWORD *)a2 + 5);
        if ((v512 & 0x40000000) != 0) {
          uint64_t v513 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v513 = &a2[-32 * (v512 & 0x7FFFFFF)];
        }
        uint64_t v514 = &v513[64 * v510];
        uint64_t v515 = *((void *)v514 + 4);
        if (v515 == v343) {
          goto LABEL_856;
        }
        llvm::BasicBlock::removePredecessor(*((llvm::Type **)v514 + 4), v342, 0);
        if (!v735) {
          goto LABEL_856;
        }
        uint64_t v516 = (char *)v764[1];
        uint64_t v517 = HIDWORD(v765);
        if (v764[1] == v764[0])
        {
          if (HIDWORD(v765))
          {
            uint64_t v518 = 0;
            uint64_t v519 = 8 * HIDWORD(v765);
            uint64_t v520 = v764[1];
            do
            {
              if (*v520 == v515) {
                goto LABEL_856;
              }
              if (*v520 == -2) {
                uint64_t v518 = v520;
              }
              ++v520;
              v519 -= 8;
            }
            while (v519);
            if (v518)
            {
              *uint64_t v518 = v515;
              --v766;
              goto LABEL_854;
            }
          }
          unsigned int v521 = v765;
          if (HIDWORD(v765) < v765)
          {
            ++HIDWORD(v765);
            *((void *)v764[1] + v517) = v515;
            goto LABEL_854;
          }
        }
        else
        {
          unsigned int v521 = v765;
        }
        if (3 * v521 <= 4 * (HIDWORD(v765) - v766)) {
          break;
        }
        if (v521 - HIDWORD(v765) < v521 >> 3) {
          goto LABEL_881;
        }
LABEL_835:
        unsigned int v522 = v521 - 1;
        unsigned int v523 = (v521 - 1) & ((v515 >> 4) ^ (v515 >> 9));
        v524 = &v516[8 * v523];
        uint64_t v525 = *(void *)v524;
        if (*(void *)v524 != -1)
        {
          v526 = 0;
          int v527 = 1;
          while (v525 != v515)
          {
            if (v526) {
              BOOL v528 = 0;
            }
            else {
              BOOL v528 = v525 == -2;
            }
            if (v528) {
              v526 = v524;
            }
            unsigned int v529 = v523 + v527++;
            unsigned int v523 = v529 & v522;
            v524 = &v516[8 * (v529 & v522)];
            uint64_t v525 = *(void *)v524;
            if (*(void *)v524 == -1) {
              goto LABEL_847;
            }
          }
LABEL_856:
          uint64_t v532 = v511;
          goto LABEL_857;
        }
        v526 = 0;
LABEL_847:
        if (v526) {
          v530 = v526;
        }
        else {
          v530 = v524;
        }
        if (*(void *)v530 == v515) {
          goto LABEL_856;
        }
        if (*(void *)v530 == -2) {
          --v766;
        }
        else {
          ++HIDWORD(v765);
        }
        *(void *)v530 = v515;
LABEL_854:
        uint64_t v531 = v515 | 4;
        if (v511 >= v740)
        {
          uint64_t v533 = (v511 - v349) >> 4;
          unint64_t v534 = v533 + 1;
          if ((unint64_t)(v533 + 1) >> 60) {
            goto LABEL_1201;
          }
          if ((v740 - v349) >> 3 > v534) {
            unint64_t v534 = (v740 - v349) >> 3;
          }
          if ((unint64_t)(v740 - v349) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v535 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v535 = v534;
          }
          if (v535)
          {
            if (v535 >> 60) {
              goto LABEL_1202;
            }
            uint64_t v536 = (char *)operator new(16 * v535);
          }
          else
          {
            uint64_t v536 = 0;
          }
          uint64_t v537 = (llvm::BasicBlock **)&v536[16 * v533];
          *uint64_t v537 = v342;
          v537[1] = (llvm::BasicBlock *)v531;
          if (v511 == v349)
          {
            BOOL v349 = &v536[16 * v533];
          }
          else
          {
            uint64_t v538 = &v536[16 * v533];
            do
            {
              *((_OWORD *)v538 - 1) = *((_OWORD *)v511 - 1);
              v538 -= 16;
              v511 -= 16;
            }
            while (v511 != v349);
            v511 = v349;
            BOOL v349 = v538;
          }
          uint64_t v740 = &v536[16 * v535];
          uint64_t v532 = (char *)(v537 + 2);
          if (v511) {
            operator delete(v511);
          }
        }
        else
        {
          *(void *)v511 = v342;
          *((void *)v511 + 1) = v531;
          uint64_t v532 = v511 + 16;
        }
LABEL_857:
        ++v510;
        v511 = v532;
        if (v510 == v509) {
          goto LABEL_882;
        }
      }
      if (v521 >= 0x40) {
        v521 *= 2;
      }
      else {
        unsigned int v521 = 128;
      }
LABEL_881:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v764, v521);
      unsigned int v521 = v765;
      uint64_t v516 = (char *)v764[1];
      goto LABEL_835;
    }
  }
LABEL_571:
  sub_1CD234724((char **)__base);
LABEL_572:
  int v350 = v4[5];
  if (!*((unsigned char *)v350 + 4)) {
    goto LABEL_745;
  }
  __base[1] = 0;
  __base[0] = 0;
  LODWORD(v770[0]) = 0;
  int v351 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
  uint64_t v352 = (v351 - 1);
  if (v351 == 1)
  {
    LODWORD(v410) = 0;
    uint64_t v409 = 0;
    char v353 = 0;
LABEL_712:
    int v413 = v410;
    uint64_t v410 = v410;
    uint64_t v414 = &v409[40 * v410];
    uint64_t v411 = v414;
    goto LABEL_713;
  }
  char v353 = 0;
  uint64_t v354 = 0;
  uint64_t v355 = (void **)*((void *)a2 + 5);
  do
  {
    int v356 = *((_DWORD *)a2 + 5);
    if ((v356 & 0x40000000) != 0) {
      uint64_t v357 = (char *)*((void *)a2 - 1);
    }
    else {
      uint64_t v357 = &a2[-32 * (v356 & 0x7FFFFFF)];
    }
    char v358 = *(void ***)&v357[32 * (2 * v354 + 2)];
    uint64_t v359 = (2 * v354 + 3);
    if (v354 == 4294967294) {
      uint64_t v359 = 1;
    }
    uint64_t v360 = *(llvm::BasicBlock **)&v357[32 * v359];
    char v361 = (void *)((char *)v360 + 40);
    if (*((llvm::BasicBlock **)v360 + 5) != (llvm::BasicBlock *)((char *)v360 + 40))
    {
      for (uint64_t m = *((void *)v360 + 6); ; uint64_t m = *(void *)(v363 + 32))
      {
        uint64_t v363 = m - 24;
        if (m) {
          uint64_t v364 = m - 24;
        }
        else {
          uint64_t v364 = 0;
        }
        if (!m || *(unsigned char *)(v364 + 16) != 83) {
          break;
        }
        int v365 = *(_DWORD *)(m - 4);
        uint64_t v366 = v365 & 0x7FFFFFF;
        if ((v365 & 0x7FFFFFF) != 0)
        {
          uint64_t v367 = 0;
          while (1)
          {
            uint64_t v368 = v363 - 32 * v366;
            if ((v365 & 0x40000000) != 0) {
              uint64_t v368 = *(void *)(v363 - 8);
            }
            if (*(void ***)(v368 + 32 * *(unsigned int *)(v363 + 60) + 8 * v367) == v355) {
              break;
            }
            if (v366 == ++v367) {
              goto LABEL_593;
            }
          }
          uint64_t v367 = v367;
        }
        else
        {
LABEL_593:
          uint64_t v367 = 0xFFFFFFFFLL;
        }
        if ((v365 & 0x40000000) != 0)
        {
          uint64_t v369 = *(void *)(v363 - 8);
          if (*(void ***)(v369 + 32 * v367) != v358) {
            continue;
          }
          uint64_t v366 = v366;
          if (!v366) {
            continue;
          }
        }
        else
        {
          uint64_t v366 = v366;
          uint64_t v369 = v363 - 32 * v366;
          if (*(void ***)(v369 + 32 * v367) != v358 || !v366) {
            continue;
          }
        }
        uint64_t v370 = 0;
        unsigned int v371 = (void *)(v369 + 32 * *(unsigned int *)(v363 + 60));
        uint64_t v372 = 8 * v366;
        do
        {
          uint64_t v373 = (void **)*v371++;
          if (v373 == v355) {
            ++v370;
          }
          v372 -= 8;
        }
        while (v372);
        if (v370 == 1)
        {
          int v374 = *((_DWORD *)a2 + 5);
          if ((v374 & 0x40000000) != 0) {
            uint64_t v375 = (uint64_t *)*((void *)a2 - 1);
          }
          else {
            uint64_t v375 = (uint64_t *)&a2[-32 * (v374 & 0x7FFFFFF)];
          }
          if ((v365 & 0x40000000) != 0) {
            uint64_t v376 = *(void *)(v363 - 8);
          }
          else {
            uint64_t v376 = v363 - 32 * v366;
          }
          uint64_t v377 = *v375;
          uint64_t v378 = v376 + 32 * v367;
          if (*(void *)v378)
          {
            **(void **)(v378 + 16) = *(void *)(v378 + 8);
            uint64_t v383 = *(void *)(v378 + 8);
            if (v383) {
              *(void *)(v383 + 16) = *(void *)(v378 + 16);
            }
          }
          *(void *)uint64_t v378 = v377;
          if (v377)
          {
            uint64_t v381 = *(void *)(v377 + 8);
            int v379 = (void *)(v377 + 8);
            uint64_t v380 = v381;
            uint64_t v382 = v376 + 32 * v367;
            *(void *)(v382 + 8) = v381;
            if (v381) {
              *(void *)(v380 + 16) = v382 + 8;
            }
            *(void *)(v382 + 16) = v379;
            *int v379 = v378;
          }
          char v353 = 1;
        }
      }
    }
    FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v360, 1);
    uint64_t v385 = (void *)*((void *)v360 + 5);
    if (v385 == v361)
    {
      char v386 = 0;
    }
    else
    {
      char v386 = (char *)(v385 - 3);
      if (!v385) {
        char v386 = 0;
      }
      if (v386[16] - 29 >= 0xB) {
        char v386 = 0;
      }
    }
    if (FirstNonPHIOrDbg == v386)
    {
      uint64_t v387 = llvm::BasicBlock::getSinglePredecessor(v360);
      if (v385 != v361 && v387 != 0)
      {
        char v389 = v385 - 3;
        if (!v385) {
          char v389 = 0;
        }
        unsigned int v390 = *((unsigned __int8 *)v389 + 16) - 40;
        if (v390 < 0xFFFFFFF5) {
          char v389 = 0;
        }
        if (v385)
        {
          if (*((unsigned char *)v389 + 16) == 30 && v390 >= 0xFFFFFFF5 && (*((_DWORD *)v389 + 5) & 0x7FFFFFF) == 1)
          {
            uint64_t v392 = *(v389 - 4);
            if (*(void *)(v392 + 40) != v392 + 40)
            {
              for (uint64_t n = *(void *)(v392 + 48); ; uint64_t n = *(void *)(v394 + 32))
              {
                uint64_t v394 = n - 24;
                if (n) {
                  uint64_t v395 = n - 24;
                }
                else {
                  uint64_t v395 = 0;
                }
                if (!n || *(unsigned char *)(v395 + 16) != 83) {
                  break;
                }
                int v396 = *(_DWORD *)(n - 4);
                uint64_t v397 = v396 & 0x7FFFFFF;
                if ((v396 & 0x7FFFFFF) != 0)
                {
                  uint64_t v398 = 0;
                  while (1)
                  {
                    uint64_t v399 = v394 - 32 * v397;
                    if ((v396 & 0x40000000) != 0) {
                      uint64_t v399 = *(void *)(v394 - 8);
                    }
                    if (*(llvm::BasicBlock **)(v399 + 32 * *(unsigned int *)(v394 + 60) + 8 * v398) == v360) {
                      break;
                    }
                    if (v397 == ++v398) {
                      goto LABEL_657;
                    }
                  }
                  uint64_t v400 = v398;
                  if ((v396 & 0x40000000) == 0)
                  {
LABEL_658:
                    uint64_t v401 = v394 - 32 * v397;
                    goto LABEL_661;
                  }
                }
                else
                {
LABEL_657:
                  uint64_t v400 = 0xFFFFFFFFLL;
                  if ((v396 & 0x40000000) == 0) {
                    goto LABEL_658;
                  }
                }
                uint64_t v401 = *(void *)(v394 - 8);
LABEL_661:
                if (*(void ***)(v401 + 32 * v400) == v358)
                {
                  v764[0] = 0;
                  unsigned int v402 = v770[0];
                  char v403 = sub_1CD2347A8((uint64_t)__base[0], v770[0], v394, v764);
                  unsigned int v404 = (uint64_t *)v764[0];
                  if (v403)
                  {
                    int v408 = (char *)v764[0] + 16;
                    unint64_t v406 = *((unsigned int *)v764[0] + 4);
                    int v407 = (char *)v764[0] + 8;
                    if (v406 >= *((unsigned int *)v764[0] + 5)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                  }
                  else
                  {
                    if (4 * LODWORD(__base[1]) + 4 >= 3 * v402)
                    {
                      int v405 = 2 * v402;
                      goto LABEL_666;
                    }
                    if (v402 + ~LODWORD(__base[1]) - HIDWORD(__base[1]) <= v402 >> 3)
                    {
                      int v405 = v402;
LABEL_666:
                      sub_1CD234844((uint64_t)__base, v405);
                      v764[0] = 0;
                      sub_1CD2347A8((uint64_t)__base[0], v770[0], v394, v764);
                      unsigned int v404 = (uint64_t *)v764[0];
                    }
                    ++LODWORD(__base[1]);
                    if (*v404 != -4096) {
                      --HIDWORD(__base[1]);
                    }
                    unint64_t v406 = 0;
                    *unsigned int v404 = v394;
                    v404[1] = (uint64_t)(v404 + 3);
                    int v407 = v404 + 1;
                    int v404[2] = 0x400000000;
                    int v408 = v404 + 2;
                  }
                  *(_DWORD *)(*v407 + 4 * v406) = v400;
                  ++*v408;
                  break;
                }
              }
            }
          }
        }
      }
    }
    ++v354;
  }
  while (v354 != v352);
  uint64_t v409 = (char *)__base[0];
  uint64_t v410 = LODWORD(v770[0]);
  if (!LODWORD(__base[1]))
  {
    uint64_t v4 = (void **)a1;
    goto LABEL_712;
  }
  uint64_t v411 = (char *)__base[0] + 40 * LODWORD(v770[0]);
  uint64_t v4 = (void **)a1;
  if (LODWORD(v770[0]))
  {
    uint64_t v412 = 0;
    while ((*(void *)((char *)__base[0] + v412) | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v412 += 40;
      if (40 * LODWORD(v770[0]) == v412)
      {
        int v413 = 1;
        uint64_t v414 = (char *)__base[0] + 40 * LODWORD(v770[0]);
        goto LABEL_713;
      }
    }
    uint64_t v414 = (char *)__base[0] + v412;
    int v413 = 1;
  }
  else
  {
    uint64_t v410 = 0;
    int v413 = 0;
    uint64_t v414 = (char *)__base[0];
  }
LABEL_713:
  while (v414 != &v409[40 * v410])
  {
    uint64_t v431 = *((unsigned int *)v414 + 4);
    if (v431 >= 2)
    {
      uint64_t v432 = *(void *)v414;
      int v433 = (unsigned int *)*((void *)v414 + 1);
      uint64_t v434 = 4 * v431;
      do
      {
        int v435 = *((_DWORD *)a2 + 5);
        if ((v435 & 0x40000000) != 0) {
          uint64_t v436 = (uint64_t *)*((void *)a2 - 1);
        }
        else {
          uint64_t v436 = (uint64_t *)&a2[-32 * (v435 & 0x7FFFFFF)];
        }
        int v437 = *(_DWORD *)(v432 + 20);
        if ((v437 & 0x40000000) != 0) {
          uint64_t v438 = *(void *)(v432 - 8);
        }
        else {
          uint64_t v438 = v432 - 32 * (v437 & 0x7FFFFFF);
        }
        uint64_t v439 = *v433;
        uint64_t v440 = *v436;
        uint64_t v441 = v438 + 32 * v439;
        if (*(void *)v441)
        {
          **(void **)(v441 + 16) = *(void *)(v441 + 8);
          uint64_t v446 = *(void *)(v441 + 8);
          if (v446) {
            *(void *)(v446 + 16) = *(void *)(v441 + 16);
          }
        }
        *(void *)uint64_t v441 = v440;
        if (v440)
        {
          uint64_t v444 = *(void *)(v440 + 8);
          int v443 = (void *)(v440 + 8);
          uint64_t v442 = v444;
          uint64_t v445 = v438 + 32 * v439;
          *(void *)(v445 + 8) = v444;
          if (v444) {
            *(void *)(v442 + 16) = v445 + 8;
          }
          *(void *)(v445 + 16) = v443;
          *int v443 = v441;
        }
        ++v433;
        v434 -= 4;
      }
      while (v434);
      char v353 = 1;
    }
    uint64_t v447 = v414 + 40;
    uint64_t v414 = v411;
    if (v447 != v411)
    {
      uint64_t v414 = v447;
      while ((*(void *)v414 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v414 += 40;
        if (v414 == v411)
        {
          uint64_t v414 = v411;
          goto LABEL_713;
        }
      }
    }
  }
  if (v413)
  {
    uint64_t v448 = 40 * v410;
    uint64_t v449 = v409 + 24;
    do
    {
      if ((*((void *)v449 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v450 = (char *)*((void *)v449 - 2);
        if (v449 != v450) {
          free(v450);
        }
      }
      v449 += 40;
      v448 -= 40;
    }
    while (v448);
  }
  MEMORY[0x1D25D9CD0](v409, 8);
  if (v353) {
    goto LABEL_743;
  }
  int v350 = v4[5];
LABEL_745:
  if (!*((unsigned char *)v350 + 6)) {
    goto LABEL_769;
  }
  int v452 = (llvm::DataLayout *)v4[2];
  uint64_t v453 = *(void **)(*((void *)a2 + 5) + 56);
  v741 = *v4;
  if (!(*(unsigned int (**)(void))(*(void *)**v4 + 496))(**v4)) {
    goto LABEL_769;
  }
  uint64_t v454 = v453[14];
  unsigned int v736 = v452;
  if (v454)
  {
    if (*(_DWORD *)(v454 + 8))
    {
      uint64_t v455 = *(void *)(v454 + 40);
      if (v455)
      {
        int v456 = *(_DWORD *)(v455 + 40);
        if (v456)
        {
          uint64_t v457 = *(void *)(v455 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCBE588))
          {
            unint64_t v729 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v729 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v729;
            __cxa_guard_release(&qword_1EBCBE588);
          }
          unint64_t v458 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0x9889A0E0DBA4EABELL)) ^ ((0x9DDFEA08EB382D69
                                                                                      * (qword_1EBCBE580 ^ 0x9889A0E0DBA4EABELL)) >> 47) ^ 0xB5F9CD95B18985D0);
          unsigned int v459 = (-348639895 * ((v458 >> 47) ^ v458)) ^ 0x61742D70;
          for (iuint64_t i = 1; ; ++ii)
          {
            unsigned int v461 = v459 & (v456 - 1);
            uint64_t v462 = v457 + 24 * v461;
            int v463 = *(void **)v462;
            if (*(void *)v462 == -1)
            {
              if ("no-jump-tables" == (char *)-1) {
                goto LABEL_766;
              }
            }
            else if (v463 == (void *)-2)
            {
              if ("no-jump-tables" == (char *)-2) {
                goto LABEL_766;
              }
            }
            else if (*(void *)(v462 + 8) == 14 {
                   && *v463 == 0x2D706D756A2D6F6ELL
            }
                   && *(void *)((char *)v463 + 6) == 0x73656C6261742D70)
            {
LABEL_766:
              uint64_t v465 = *(void *)(v462 + 16);
              if (v465
                && *(_DWORD *)(v465 + 16) == 4
                && *(_DWORD *)(v465 + *(unsigned int *)(v465 + 12) + 25) == *(_DWORD *)"true")
              {
                goto LABEL_769;
              }
              break;
            }
            if (v463 == (void *)-1) {
              break;
            }
            unsigned int v459 = ii + v461;
          }
        }
      }
    }
  }
  unsigned int v466 = *((_DWORD *)a2 + 5);
  uint64_t v467 = ((v466 >> 1) & 0x3FFFFFF) - 1;
  if (v467 < 3) {
    goto LABEL_769;
  }
  if ((v466 & 0x40000000) != 0) {
    v539 = (char *)*((void *)a2 - 1);
  }
  else {
    v539 = &a2[-32 * (v466 & 0x7FFFFFF)];
  }
  uint64_t v601 = *((void *)v539 + 8);
  uint64_t v745 = 0;
  uint64_t v602 = 1;
  v764[0] = (void *)1;
  do
  {
    v764[v602] = (void *)-4096;
    v602 += 11;
  }
  while (v602 != 45);
  v759 = (void *)1;
  for (juint64_t j = 8; jj != 72; jj += 16)
    *(void **)((char *)&v759 + jj) = (void *)-4096;
  int __src = (void *)1;
  for (kuint64_t k = 8; kk != 72; kk += 16)
    *(void **)((char *)&__src + kk) = (void *)-4096;
  uint64_t v605 = 0;
  v752 = v754;
  uint64_t v753 = 0x400000000;
  uint64_t v606 = v601;
  while (2)
  {
    int v607 = *((_DWORD *)a2 + 5);
    if ((v607 & 0x40000000) != 0) {
      int v608 = (char *)*((void *)a2 - 1);
    }
    else {
      int v608 = &a2[-32 * (v607 & 0x7FFFFFF)];
    }
    uint64_t v609 = *(void *)&v608[32 * (2 * v605 + 2)];
    uint64_t v610 = (void *)(v601 + 24);
    uint64_t v611 = *(unsigned int *)(v609 + 32);
    if (v611 > 0x40)
    {
      uint64_t v612 = *(void *)(v609 + 24);
      uint64_t v632 = (v611 - 1) >> 6;
      uint64_t v633 = 1 << (v611 - 1);
      unsigned int v634 = *(_DWORD *)(v601 + 32);
      unsigned int v635 = v634 - 1;
      uint64_t v636 = *(void *)(v601 + 24);
      if (v634 >= 0x41) {
        uint64_t v610 = (void *)(v636 + 8 * (v635 >> 6));
      }
      if (((*(void *)(v612 + 8 * v632) & v633) != 0) == ((*v610 >> v635) & 1))
      {
        unint64_t v647 = ((unint64_t)(v611 + 63) >> 3) & 0x3FFFFFF8;
        while (v647)
        {
          unint64_t v648 = *(void *)(v612 + v647 - 8);
          unint64_t v649 = *(void *)(v636 - 8 + v647);
          v647 -= 8;
          if (v648 != v649)
          {
            uint64_t v616 = v609;
            if (v648 <= v649) {
              goto LABEL_1003;
            }
            goto LABEL_1002;
          }
        }
        goto LABEL_1002;
      }
      if ((*(void *)(v612 + 8 * v632) & v633) == 0) {
        goto LABEL_1002;
      }
      uint64_t v615 = (void *)(v606 + 24);
      uint64_t v601 = v609;
    }
    else
    {
      uint64_t v612 = *(void *)(v609 + 24);
      uint64_t v613 = v612 << -(char)v611 >> -(char)v611;
      if (v613 < (uint64_t)(*v610 << -(char)v611) >> -(char)v611)
      {
        char v614 = 64 - v611;
        uint64_t v615 = (void *)(v606 + 24);
        uint64_t v616 = v609;
        goto LABEL_973;
      }
LABEL_1002:
      uint64_t v616 = v601;
LABEL_1003:
      uint64_t v615 = (void *)(v606 + 24);
      if (v611 <= 0x40)
      {
        char v614 = 64 - v611;
        uint64_t v613 = v612 << -(char)v611 >> -(char)v611;
LABEL_973:
        uint64_t v617 = (uint64_t)(*v615 << v614) >> v614;
        BOOL v618 = v613 < v617 || v613 <= v617;
        uint64_t v601 = v616;
        if (!v618) {
LABEL_1010:
        }
          uint64_t v606 = v609;
        goto LABEL_978;
      }
      uint64_t v632 = (v611 - 1) >> 6;
      uint64_t v633 = 1 << (v611 - 1);
      uint64_t v601 = v616;
    }
    uint64_t v637 = *(void *)(v612 + 8 * v632) & v633;
    unsigned int v638 = *(_DWORD *)(v606 + 32);
    unsigned int v639 = v638 - 1;
    uint64_t v640 = *(void *)(v606 + 24);
    if (v638 >= 0x41) {
      uint64_t v615 = (void *)(v640 + 8 * (v639 >> 6));
    }
    if ((v637 != 0) == ((*v615 >> v639) & 1))
    {
      unint64_t v641 = v611 + 63;
      uint64_t v642 = v640 - 8;
      uint64_t v643 = (v641 >> 3) & 0x3FFFFFF8;
      uint64_t v644 = v612 - 8;
      while (v643)
      {
        unint64_t v645 = *(void *)(v644 + v643);
        unint64_t v646 = *(void *)(v642 + v643);
        v643 -= 8;
        if (v645 != v646)
        {
          if (v645 <= v646) {
            break;
          }
          goto LABEL_1010;
        }
      }
    }
    else if (!v637)
    {
      goto LABEL_1010;
    }
LABEL_978:
    __base[0] = v770;
    __base[1] = (void *)0x400000000;
    if ((v607 & 0x40000000) != 0) {
      v619 = (char *)*((void *)a2 - 1);
    }
    else {
      v619 = &a2[-32 * (v607 & 0x7FFFFFF)];
    }
    uint64_t v620 = (2 * v605 + 3);
    if (v605 == -2) {
      uint64_t v620 = 1;
    }
    int v621 = sub_1CD233670((uint64_t)a2, v609, *(llvm::BasicBlock **)&v619[32 * v620], &v745, (uint64_t)__base, v452, (uint64_t)v741);
    uint64_t v622 = (void **)__base[0];
    if (v621)
    {
      if (LODWORD(__base[1]))
      {
        uint64_t v623 = v606;
        uint64_t v624 = v467;
        uint64_t v625 = v601;
        unsigned int v626 = (void **)((char *)__base[0] + 16 * LODWORD(__base[1]));
        do
        {
          uint64_t v627 = *v622;
          long long __dst = v627;
          uint64_t v628 = (uint64_t)v622[1];
          if ((sub_1CD891D58((uint64_t)v764, (uint64_t)v627, &v747) & 1) == 0)
          {
            if (v753 >= (unint64_t)HIDWORD(v753)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v752 + v753) = v627;
            LODWORD(v753) = v753 + 1;
          }
          v629 = sub_1CD891E0C(v764, (uint64_t *)&__dst);
          unint64_t v630 = *((unsigned int *)v629 + 4);
          if (v630 >= *((unsigned int *)v629 + 5)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v631 = (uint64_t *)(v629[1] + 16 * v630);
          *uint64_t v631 = v609;
          v631[1] = v628;
          ++*((_DWORD *)v629 + 4);
          v622 += 2;
        }
        while (v622 != v626);
        uint64_t v622 = (void **)__base[0];
        uint64_t v601 = v625;
        uint64_t v467 = v624;
        uint64_t v606 = v623;
        int v452 = v736;
      }
      if (v622 != v770) {
        free(v622);
      }
      if (++v605 != v467) {
        continue;
      }
      uint64_t v650 = (uint64_t *)v752;
      if (v753)
      {
        uint64_t v651 = 8 * v753;
        do
        {
          uint64_t v652 = (void *)*v650++;
          __base[0] = v652;
          uint64_t v653 = **(void **)(sub_1CD891E0C(v764, (uint64_t *)__base)[1] + 8);
          sub_1CD68C958(&__src, (uint64_t *)__base)[1] = v653;
          v651 -= 8;
        }
        while (v651);
        uint64_t v650 = (uint64_t *)v752;
        int v452 = v736;
      }
      unint64_t v654 = *((unsigned int *)sub_1CD891E0C(v764, v650) + 4);
      unsigned int v655 = *(_DWORD *)(v606 + 32);
      if (v655 >= 0x41) {
        operator new[]();
      }
      unint64_t v656 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v655;
      if (!v655) {
        unint64_t v656 = 0;
      }
      unint64_t v669 = (v656 & (*(void *)(v606 + 24) - *(void *)(v601 + 24))) + 1;
      int v747 = &v749;
      uint64_t v748 = (void *)0x400000000;
      int v670 = *((_DWORD *)a2 + 5);
      if ((v670 & 0x40000000) != 0) {
        uint64_t v671 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v671 = &a2[-32 * (v670 & 0x7FFFFFF)];
      }
      char v672 = sub_1CD233670((uint64_t)a2, 0, *((llvm::BasicBlock **)v671 + 4), &v745, (uint64_t)&v747, v452, (uint64_t)v741);
      if (v669 <= v654) {
        char v673 = 1;
      }
      else {
        char v673 = v672;
      }
      if ((v673 & 1) == 0)
      {
        if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1 < 4) {
          goto LABEL_1174;
        }
        uint64_t v682 = *((void *)v452 + 5);
        if (!v682) {
          goto LABEL_1174;
        }
        v683 = (unsigned __int8 *)*((void *)v452 + 4);
        while (*v683 < v669)
        {
          ++v683;
          if (!--v682) {
            goto LABEL_1174;
          }
        }
      }
      if (v748)
      {
        unsigned int v674 = (void **)v747;
        unsigned int v675 = (void **)((char *)v747 + 16 * v748);
        do
        {
          __base[0] = *v674;
          v676 = v674[1];
          sub_1CD68C958(&v759, (uint64_t *)__base)[1] = v676;
          v674 += 2;
        }
        while (v674 != v675);
      }
      if (v669 > 0x1999999999999998 || v669 < ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1)
      {
LABEL_1174:
        if (v747 != &v749) {
          free(v747);
        }
        uint64_t v4 = (void **)a1;
        goto LABEL_1177;
      }
      v677 = sub_1CD89224C((int *)&__src);
      int v679 = &v756;
      if ((__src & 1) == 0) {
        int v679 = v756;
      }
      unsigned int v680 = v757;
      if (__src) {
        unsigned int v680 = 4;
      }
      unsigned int v681 = (int *)&v679[2 * v680];
      if (v681 == v677) {
        goto LABEL_1070;
      }
      v684 = v677;
      v685 = v678;
      LOBYTE(v686) = 0;
      LOBYTE(v687) = 1;
      while (2)
      {
        uint64_t v688 = *((void *)v684 + 1);
        if (v686)
        {
LABEL_1079:
          BOOL v686 = 1;
        }
        else if ((*(uint64_t (**)(void, void))(*(void *)*v741 + 480))(*v741, *((void *)v684 + 1)))
        {
          BOOL v686 = 0;
        }
        else
        {
          unsigned int v695 = *(_DWORD *)(v688 + 8);
          if (v688) {
            BOOL v696 = *(_DWORD *)(v688 + 8) == 13;
          }
          else {
            BOOL v696 = 0;
          }
          if (!v696) {
            goto LABEL_1079;
          }
          unsigned int v697 = v695 >> 8;
          v689.i32[0] = v695 >> 8;
          uint8x8_t v698 = (uint8x8_t)vcnt_s8(v689);
          v698.i16[0] = vaddlv_u8(v698);
          if (v695 < 0x800 || v698.i32[0] > 1u) {
            goto LABEL_1079;
          }
          uint64_t v700 = *((void *)v736 + 5);
          if (!v700) {
            goto LABEL_1079;
          }
          v701 = (unsigned __int8 *)*((void *)v736 + 4);
          uint64_t v702 = v700 - 1;
          do
          {
            unsigned int v703 = *v701++;
            BOOL v686 = v697 > v703;
          }
          while (v697 > v703 && v702-- != 0);
        }
        if ((v687 & 1) == 0
          || ((unsigned int v690 = *(_DWORD *)(v688 + 8), v688) ? (v691 = *(_DWORD *)(v688 + 8) == 13) : (v691 = 0),
              (unsigned int v692 = v690 >> 8, v693 = 0xFFFFFFFF / (v690 >> 8), v691) ? (v694 = v669 >= v693) : (v694 = 1),
              v694 || (uint64_t v705 = *((void *)v736 + 5)) == 0))
        {
LABEL_1091:
          int v687 = 0;
          if (!v686) {
            goto LABEL_1092;
          }
          goto LABEL_1174;
        }
        unsigned int v706 = v692 * v669;
        v707 = (unsigned __int8 *)*((void *)v736 + 4);
        while (v706 > *v707)
        {
          ++v707;
          if (!--v705) {
            goto LABEL_1091;
          }
        }
        int v687 = 1;
LABEL_1092:
        while (1)
        {
          v684 += 4;
          if (v684 == v685) {
            break;
          }
          if ((*(void *)v684 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_1096;
          }
        }
        v684 = v685;
LABEL_1096:
        if (v684 == v681)
        {
          if ((v686 | v687))
          {
            if ((v687 & 1) == 0) {
              goto LABEL_1174;
            }
LABEL_1070:
            __base[0] = "switch.lookup";
            LOWORD(v771) = 259;
            operator new();
          }
          if (10 * ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 10 >= 4 * v669) {
            goto LABEL_1070;
          }
          goto LABEL_1174;
        }
        continue;
      }
    }
    break;
  }
  if (__base[0] != v770) {
    free(__base[0]);
  }
  uint64_t v4 = (void **)a1;
LABEL_1177:
  if (v752 != v754) {
    free(v752);
  }
  if ((__src & 1) == 0) {
    MEMORY[0x1D25D9CD0](v756, 8);
  }
  if ((v759 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v760, 8);
  }
  sub_1CD8922C4((uint64_t)v764);
LABEL_769:
  unsigned int v468 = *((_DWORD *)a2 + 5);
  if ((v468 & 0x40000000) != 0) {
    unsigned int v469 = (char *)*((void *)a2 - 1);
  }
  else {
    unsigned int v469 = &a2[-32 * (v468 & 0x7FFFFFF)];
  }
  unsigned int v470 = *(_DWORD *)(**(void **)v469 + 8);
  if (v470 >> 8 <= 0x40)
  {
    uint64_t v471 = v4[2];
    uint64_t v472 = v471[5];
    if (v472)
    {
      uint64_t v473 = (unsigned __int8 *)v471[4];
      unsigned int v474 = BYTE1(v470);
      while (*v473 < v474)
      {
        uint64_t result = 0;
        ++v473;
        if (!--v472) {
          return result;
        }
      }
      unsigned int v475 = ((v468 >> 1) & 0x3FFFFFF) - 1;
      if (v475 >= 4)
      {
        uint64_t v476 = 0;
        LODWORD(v477) = 0;
        __base[0] = v770;
        __base[1] = (void *)0x400000000;
        uint64_t v478 = 2 * v475;
        do
        {
          int v479 = *((_DWORD *)a2 + 5);
          if ((v479 & 0x40000000) != 0) {
            int v480 = (char *)*((void *)a2 - 1);
          }
          else {
            int v480 = &a2[-32 * (v479 & 0x7FFFFFF)];
          }
          v481 = *(void ***)&v480[32 * ((v476 + 2) & 0xFFFFFFFE)];
          unsigned int v482 = *((_DWORD *)v481 + 8);
          if (v482 > 0x40) {
            uint64_t v483 = *v481[3];
          }
          else {
            uint64_t v483 = (uint64_t)((void)v481[3] << -(char)v482) >> -(char)v482;
          }
          if (v477 >= HIDWORD(__base[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__base[0] + v477) = v483;
          size_t v477 = ++LODWORD(__base[1]);
          v476 += 2;
        }
        while (v478 != v476);
        if (v477 >= 2)
        {
          qsort(__base[0], v477, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CCFA3848);
          LODWORD(v477) = __base[1];
        }
        v484 = (unint64_t *)__base[0];
        uint64_t v485 = v477 - 1;
        uint64_t v486 = *(void *)__base[0];
        unint64_t v487 = 100 * v477;
        if (v487 >= 40 * (*((void *)__base[0] + v485) - *(void *)__base[0]) + 40) {
          goto LABEL_887;
        }
        if (v477)
        {
          uint64_t v488 = 8 * v477;
          uint64_t v489 = v488;
          int v490 = __base[0];
          do
          {
            *v490++ -= v486;
            v489 -= 8;
          }
          while (v489);
          unsigned int v491 = 64;
          uint64_t v492 = 8 * v477;
          v493 = v484;
          do
          {
            unint64_t v494 = *v493++;
            unsigned int v495 = __clz(__rbit64(v494));
            if (v491 >= v495) {
              unsigned int v491 = v495;
            }
            v492 -= 8;
          }
          while (v492);
          if (v491)
          {
            uint64_t v496 = v484;
            do
            {
              *v496++ >>= v491;
              v488 -= 8;
            }
            while (v488);
          }
        }
        else
        {
          unsigned int v491 = 64;
        }
        if (v487 < 40 * (v484[v485] - *v484) + 40)
        {
LABEL_887:
          int v540 = 0;
          goto LABEL_955;
        }
        int v541 = *((_DWORD *)a2 + 5);
        if ((v541 & 0x40000000) != 0) {
          uint64_t v542 = (uint64_t **)*((void *)a2 - 1);
        }
        else {
          uint64_t v542 = (uint64_t **)&a2[-32 * (v541 & 0x7FFFFFF)];
        }
        uint64_t v543 = **v542;
        uint64_t v544 = (uint64_t)a3;
        a3[6] = *((void *)a2 + 5);
        a3[7] = (uint64_t)(a2 + 24);
        v545 = (void **)*((void *)a2 + 6);
        int v747 = v545;
        if (v545)
        {
          llvm::MetadataTracking::track((uint64_t)&v747, (unsigned __int8 *)v545, 2);
          uint64_t v544 = (uint64_t)a3;
          uint64_t v546 = v747;
        }
        else
        {
          uint64_t v546 = 0;
        }
        sub_1CB8461A4(v544, 0, (uint64_t)v546);
        if (v747)
        {
          int v708 = *(unsigned __int8 *)v747;
          if ((v708 - 4) > 0x1E)
          {
            if ((v708 - 3) >= 0xFFFFFFFE) {
              v714 = v747;
            }
            else {
              v714 = 0;
            }
            if ((v708 - 3) < 0xFFFFFFFE)
            {
              if (v708 == 3) {
                *((void *)v747 + 1) = 0;
              }
              goto LABEL_894;
            }
            unint64_t v710 = (unint64_t)v714 + 8;
          }
          else
          {
            if ((*((unsigned char *)v747 + 1) & 0x7F) != 2 && !*((_DWORD *)v747 + 3)) {
              goto LABEL_894;
            }
            uint64_t v709 = *((void *)v747 + 2);
            if ((v709 & 4) == 0) {
              goto LABEL_894;
            }
            unint64_t v710 = v709 & 0xFFFFFFFFFFFFFFF8;
            if (!v710) {
              goto LABEL_894;
            }
          }
          v764[0] = &v747;
          sub_1CC5FA668(v710 + 16, v764);
        }
LABEL_894:
        int v548 = *(llvm::ConstantInt **)v543;
        unsigned int v549 = *(_DWORD *)(v543 + 8);
        LODWORD(v764[1]) = v549 >> 8;
        if (v549 >> 8 > 0x40) {
          operator new[]();
        }
        if (v549 <= 0xFF) {
          LODWORD(v550) = 0;
        }
        else {
          unint64_t v550 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v549) + 63);
        }
        v764[0] = (void *)(v550 & v491);
        uint64_t v552 = llvm::ConstantInt::get(v548, (llvm::LLVMContext *)v764, v547);
        if (LODWORD(v764[1]) >= 0x41 && v764[0]) {
          MEMORY[0x1D25D9CB0](v764[0], 0x1000C8000313F17);
        }
        int v553 = *((_DWORD *)a2 + 5);
        if ((v553 & 0x40000000) != 0) {
          v554 = (uint64_t *)*((void *)a2 - 1);
        }
        else {
          v554 = (uint64_t *)&a2[-32 * (v553 & 0x7FFFFFF)];
        }
        uint64_t v555 = *v554;
        v556 = *(llvm::ConstantInt **)v543;
        unsigned int v557 = *(_DWORD *)(v543 + 8);
        LODWORD(v764[1]) = v557 >> 8;
        if (v557 >> 8 > 0x40) {
          operator new[]();
        }
        if (v557 <= 0xFF) {
          unint64_t v558 = 0;
        }
        else {
          unint64_t v558 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v557) + 63);
        }
        v764[0] = (void *)(v558 & v486);
        v559 = llvm::ConstantInt::get(v556, (llvm::LLVMContext *)v764, v551);
        if (LODWORD(v764[1]) >= 0x41 && v764[0]) {
          MEMORY[0x1D25D9CB0](v764[0], 0x1000C8000313F17);
        }
        __int16 v767 = 257;
        v560 = (llvm::ConstantInt **)sub_1CB84494C((uint64_t)a3, v555, (uint64_t)v559, (uint64_t)v764, 0, 0);
        __int16 v767 = 257;
        v561 = sub_1CC2429AC((uint64_t)a3, (uint64_t)v560, (uint64_t)v552, (uint64_t)v764, 0);
        unint64_t v562 = (*(_DWORD *)(v543 + 8) >> 8) - v491;
        __int16 v767 = 257;
        int v563 = llvm::ConstantInt::get(*v560, v562, 0);
        uint64_t v564 = sub_1CC242524((uint64_t)a3, (uint64_t)v560, (uint64_t)v563, (uint64_t)v764, 0, 0);
        __int16 v767 = 257;
        uint64_t v565 = sub_1CB844AF4((uint64_t)a3, v561, (uint64_t)v564, (uint64_t)v764);
        int v566 = *((_DWORD *)a2 + 5);
        if ((v566 & 0x40000000) != 0) {
          int v567 = (llvm::Value **)*((void *)a2 - 1);
        }
        else {
          int v567 = (llvm::Value **)&a2[-32 * (v566 & 0x7FFFFFF)];
        }
        llvm::User::replaceUsesOfWith((llvm::User *)a2, *v567, v565);
        int v568 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
        uint64_t v569 = (v568 - 1);
        if (v568 != 1)
        {
          uint64_t v570 = 0;
          uint64_t v571 = (const llvm::APInt *)(v552 + 3);
          do
          {
            int v572 = *((_DWORD *)a2 + 5);
            if ((v572 & 0x40000000) != 0) {
              uint64_t v573 = (char *)*((void *)a2 - 1);
            }
            else {
              uint64_t v573 = &a2[-32 * (v572 & 0x7FFFFFF)];
            }
            uint64_t v574 = (2 * v570 + 2);
            uint64_t v575 = *(void ***)&v573[32 * v574];
            unint64_t v576 = *(unsigned int *)(v543 + 8);
            unint64_t v577 = v576 >> 8;
            LODWORD(v764[1]) = *(_DWORD *)(v543 + 8) >> 8;
            if (v576 >> 8 > 0x40) {
              operator new[]();
            }
            if (v576 <= 0xFF) {
              unint64_t v578 = 0;
            }
            else {
              unint64_t v578 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v576) + 63);
            }
            v764[0] = (void *)(v578 & v486);
            if (v577 > 0x40)
            {
              llvm::APInt::flipAllBitsSlowCase((uint64_t)v764);
            }
            else
            {
              if (v577) {
                unint64_t v579 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v577;
              }
              else {
                unint64_t v579 = 0;
              }
              v764[0] = (void *)(v579 & ~(uint64_t)v764[0]);
            }
            llvm::APInt::operator++((uint64_t)v764);
            char v580 = (char)v764[1];
            if (LODWORD(v764[1]) >= 0x41)
            {
              uint64_t v593 = 0;
              uint64_t v594 = (unint64_t *)v764[0];
              uint64_t v595 = v575[3];
              unint64_t v596 = ((unint64_t)LODWORD(v764[1]) + 63) >> 6;
              unint64_t v597 = v596;
              do
              {
                uint64_t v598 = *v595++;
                unint64_t v599 = v598 + *v594;
                BOOL v600 = v599 + 1 <= *v594;
                if (v593)
                {
                  ++v599;
                  uint64_t v593 = v600;
                }
                else
                {
                  uint64_t v593 = v599 < *v594;
                }
                *v594++ = v599;
                --v597;
              }
              while (v597);
              *((void *)v764[0] + (v596 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v580;
              uint64_t v582 = v764[0];
              if (LODWORD(v764[1]) > 0x40) {
                operator new[]();
              }
            }
            else
            {
              unint64_t v581 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v764[1]);
              if (!LODWORD(v764[1])) {
                unint64_t v581 = 0;
              }
              uint64_t v582 = (void *)(v581 & ((unint64_t)v764[0] + (unint64_t)v575[3]));
            }
            v764[0] = v582;
            llvm::APInt::lshrInPlace((llvm::APInt *)v764, v571);
            v584 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v543, (llvm::LLVMContext *)v764, v583);
            if ((*(_DWORD *)(v543 + 8) & 0xFE) == 0x12) {
              v584 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v543 + 32) | ((unint64_t)(*(_DWORD *)(v543 + 8) == 19) << 32)), (uint64_t)v584);
            }
            int v585 = *((_DWORD *)a2 + 5);
            if ((v585 & 0x40000000) != 0) {
              int v586 = (char *)*((void *)a2 - 1);
            }
            else {
              int v586 = &a2[-32 * (v585 & 0x7FFFFFF)];
            }
            uint64_t v587 = &v586[32 * v574];
            if (*(void *)v587)
            {
              **((void **)v587 + 2) = *((void *)v587 + 1);
              uint64_t v592 = (void **)*((void *)v587 + 1);
              if (v592) {
                v592[2] = (void *)*((void *)v587 + 2);
              }
            }
            *(void *)uint64_t v587 = v584;
            if (v584)
            {
              uint64_t v590 = (void **)v584[1];
              uint64_t v588 = (char **)(v584 + 1);
              v589 = v590;
              uint64_t v591 = &v586[32 * v574];
              *((void *)v591 + 1) = v590;
              if (v590) {
                v589[2] = v591 + 8;
              }
              *((void *)v591 + 2) = v588;
              *uint64_t v588 = v587;
            }
            if (LODWORD(v764[1]) >= 0x41 && v764[0]) {
              MEMORY[0x1D25D9CB0](v764[0], 0x1000C8000313F17);
            }
            ++v570;
          }
          while (v570 != v569);
        }
        int v540 = 1;
        uint64_t v4 = (void **)a1;
LABEL_955:
        if (__base[0] != v770) {
          free(__base[0]);
        }
        if (v540) {
          goto LABEL_743;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CD220C58(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  char v4 = 1;
  do
  {
    while (1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
      if (v5 > 0x14) {
        return 0;
      }
      uint64_t v6 = a2;
      if (!*(void *)(a2 + 8)) {
        return 0;
      }
      if (v5 == 16)
      {
        uint64_t v7 = *(unsigned int *)(a1 + 32);
        if (v7 >= 0x41)
        {
          int v22 = 0;
          int64_t v23 = (unint64_t)(v7 + 63) >> 6;
          do
          {
            BOOL v24 = v23-- < 1;
            if (v24) {
              break;
            }
            unint64_t v25 = *(void *)(*(void *)(a1 + 24) + 8 * v23);
            v22 += __clz(v25);
          }
          while (!v25);
          int v26 = v7 | 0xFFFFFFC0;
          if ((v7 & 0x3F) == 0) {
            int v26 = 0;
          }
          if (v22 + v26 != v7) {
            return 0;
          }
        }
        else if (*(void *)(a1 + 24))
        {
          return 0;
        }
      }
      else
      {
        if (v5 == 17)
        {
          if (sub_1CB844168(a1, 0.0)) {
            goto LABEL_8;
          }
          unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
        }
        else if (v5 - 18 < 3 || v5 == 13)
        {
          goto LABEL_8;
        }
        if (v5 - 11 > 1) {
          return 0;
        }
      }
LABEL_8:
      a2 = *(void *)(*(void *)(a2 + 8) + 24);
      uint64_t v8 = *(void *)(a2 + 40);
      if (a2 == v6 || v8 != *(void *)(v6 + 40)) {
        return 0;
      }
      int v10 = *(__int16 *)(v8 + 18);
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v19 = *(void *)(v8 + 48);
        if (v19 != v8 + 40)
        {
          int v20 = 0;
          do
          {
            uint64_t v21 = v19 - 24;
            if (!v19) {
              uint64_t v21 = 0;
            }
            *(_DWORD *)(v21 + 56) = v20++;
            uint64_t v19 = *(void *)(v19 + 8);
          }
          while (v19 != v8 + 40);
        }
        *(_WORD *)(v8 + 18) = v10 | 0x8000;
      }
      if (*(_DWORD *)(a2 + 56) < *(_DWORD *)(v6 + 56)) {
        return 0;
      }
      for (uint64_t i = *(void *)(v6 + 32); i != a2 + 24; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v12 = i - 24;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned __int8 *)(v12 + 16);
        if (v13 != 84)
        {
          int v14 = v13 - 29;
          BOOL v15 = 0;
          switch(v14)
          {
            case 0:
            case 5:
            case 6:
              return v15;
            case 7:
            case 9:
              if (*(_WORD *)(v12 + 18)) {
                goto LABEL_23;
              }
              return 0;
            default:
              goto LABEL_23;
          }
          return v15;
        }
        uint64_t v16 = *(void *)(v12 + 64);
        if ((!v16 || (*(unsigned char *)(v16 + 16) & 0x20) == 0)
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v12, 37))
        {
          return 0;
        }
LABEL_23:
        if (!llvm::Instruction::willReturn((llvm::Instruction *)v12)) {
          return 0;
        }
      }
      int v17 = *(unsigned __int8 *)(a2 + 16);
      if (!a2 || v17 != 62) {
        break;
      }
      if (*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) != v6) {
        return 0;
      }
      if ((*(unsigned char *)(a2 + 17) & 2) == 0
        || (llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)a2) & 1) == 0)
      {
        char v4 = 0;
      }
    }
  }
  while (a2 && v17 == 77);
  if (a2 && v17 == 60)
  {
    if ((*(_WORD *)(a2 + 18) & 1) == 0)
    {
      uint64_t v27 = *(void *)(*(void *)(a2 + 40) + 56);
      uint64_t v28 = **(void **)(a2 - 32);
      unsigned int v29 = *(_DWORD *)(v28 + 8);
      if ((v29 & 0xFE) == 0x12) {
        unsigned int v29 = *(_DWORD *)(**(void **)(v28 + 16) + 8);
      }
      if (!v27 || (uint64_t v30 = *(void *)(v27 + 112)) == 0 || (*(unsigned char *)(v30 + 17) & 1) == 0) {
        return v29 < 0x100;
      }
    }
    return 0;
  }
  if (a2 && v17 == 61)
  {
    if (*(_WORD *)(a2 + 18)) {
      return 0;
    }
    uint64_t v31 = *(void *)(*(void *)(a2 + 40) + 56);
    uint64_t v32 = *(void *)(a2 - 32);
    unsigned int v33 = *(_DWORD *)(*(void *)v32 + 8);
    if ((v33 & 0xFE) == 0x12) {
      unsigned int v33 = *(_DWORD *)(**(void **)(*(void *)v32 + 16) + 8);
    }
    if (v31 && (uint64_t v34 = *(void *)(v31 + 112)) != 0)
    {
      BOOL v15 = 0;
      if ((*(unsigned char *)(v34 + 17) & 1) != 0 || v33 > 0xFF) {
        return v15;
      }
    }
    else if (v33 > 0xFF)
    {
      return 0;
    }
    return v32 == v6;
  }
  BOOL v15 = 0;
  unsigned int v35 = v17 - 33;
  if (v35 > 0x33 || ((1 << v35) & 0x8000000000041) == 0) {
    return v15;
  }
  int v36 = *(unsigned __int8 *)(a1 + 16);
  if (v36 != 16)
  {
    if (v36 == 17)
    {
      if (sub_1CB844168(a1, 0.0)) {
        goto LABEL_84;
      }
      goto LABEL_93;
    }
    if ((v36 - 18) >= 3 && v36 != 13) {
      goto LABEL_93;
    }
    goto LABEL_84;
  }
  uint64_t v37 = *(unsigned int *)(a1 + 32);
  if (v37 >= 0x41)
  {
    int v60 = 0;
    int64_t v61 = (unint64_t)(v37 + 63) >> 6;
    do
    {
      BOOL v24 = v61-- < 1;
      if (v24) {
        break;
      }
      unint64_t v62 = *(void *)(*(void *)(a1 + 24) + 8 * v61);
      v60 += __clz(v62);
    }
    while (!v62);
    int v63 = v37 | 0xFFFFFFC0;
    if ((v37 & 0x3F) == 0) {
      int v63 = 0;
    }
    if (v60 + v63 != v37) {
      goto LABEL_93;
    }
LABEL_84:
    uint64_t v38 = *(void *)(*(void *)(a2 + 40) + 56);
    if (!v38) {
      goto LABEL_93;
    }
    uint64_t v39 = *(void *)(v38 + 112);
    if (!v39 || (*(unsigned char *)(v39 + 17) & 1) == 0) {
      goto LABEL_93;
    }
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    goto LABEL_84;
  }
LABEL_93:
  if (*(void *)(a2 - 32) == v6) {
    return 1;
  }
  int v40 = *(unsigned __int8 *)(a1 + 16);
  if (v40 != 16)
  {
    if (v40 == 17)
    {
      if (sub_1CB844168(a1, 0.0)) {
        goto LABEL_117;
      }
      int v40 = *(unsigned __int8 *)(a1 + 16);
    }
    else if ((v40 - 18) < 3 || v40 == 13)
    {
      goto LABEL_117;
    }
    if ((v40 - 11) > 1) {
      return 0;
    }
    int v43 = *(_DWORD *)(a2 + 20);
    uint64_t v44 = v43 & 0x7FFFFFF;
    int v45 = *(unsigned __int8 *)(a2 + 16);
    if (v45 == 84) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = v45 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
    }
    uint64_t v47 = a2 - 32 * v44;
    if (v43 < 0 && (uint64_t v69 = *(void *)(v47 - 8), (v69 & 0xFFFFFFFF0) != 0)) {
      uint64_t v48 = (*(_DWORD *)(v47 - 12) - *(_DWORD *)(v47 - v69));
    }
    else {
      uint64_t v48 = 0;
    }
    if (v47 == a2 - 32 * v46 - 32 * v48 - 32) {
      return 0;
    }
    unint64_t v49 = (32 * v46 + 32 * v48) ^ 0xFFFFFFFFFFFFFFE0;
    uint64_t v50 = -32 * v44;
    while (*(void *)(a2 + v50) != v6
         || (sub_1CD11F33C(a2, (v50 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5) & 1) == 0)
    {
      BOOL v15 = 0;
      v50 += 32;
      if (v49 == v50) {
        return v15;
      }
    }
    return 1;
  }
  uint64_t v41 = *(unsigned int *)(a1 + 32);
  if (v41 >= 0x41)
  {
    int v64 = 0;
    int64_t v65 = (unint64_t)(v41 + 63) >> 6;
    do
    {
      BOOL v24 = v65-- < 1;
      if (v24) {
        break;
      }
      unint64_t v66 = *(void *)(*(void *)(a1 + 24) + 8 * v65);
      v64 += __clz(v66);
    }
    while (!v66);
    BOOL v15 = 0;
    int v67 = v41 | 0xFFFFFFC0;
    if ((v41 & 0x3F) == 0) {
      int v67 = 0;
    }
    if (v64 + v67 == v41) {
      goto LABEL_117;
    }
  }
  else
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
LABEL_117:
    int v51 = *(_DWORD *)(a2 + 20);
    uint64_t v52 = v51 & 0x7FFFFFF;
    int v53 = *(unsigned __int8 *)(a2 + 16);
    if (v53 == 84)
    {
      uint64_t v54 = 0;
    }
    else if (v53 == 39)
    {
      uint64_t v54 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      uint64_t v54 = 2;
    }
    uint64_t v55 = a2 - 32 * v52;
    if (v51 < 0 && (uint64_t v68 = *(void *)(v55 - 8), (v68 & 0xFFFFFFFF0) != 0)) {
      uint64_t v56 = (*(_DWORD *)(v55 - 12) - *(_DWORD *)(v55 - v68));
    }
    else {
      uint64_t v56 = 0;
    }
    if (v55 == a2 - 32 * v54 - 32 * v56 - 32) {
      return 0;
    }
    unint64_t v57 = (32 * v54 + 32 * v56) ^ 0xFFFFFFFFFFFFFFE0;
    uint64_t v58 = -32 * v52;
    while (1)
    {
      if (*(void *)(a2 + v58) == v6)
      {
        unint64_t v59 = (v58 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5;
        if (sub_1CD11F33C(a2, v59))
        {
          if (llvm::CallBase::paramHasAttr(a2, v59, 39)) {
            break;
          }
        }
      }
      BOOL v15 = 0;
      v58 += 32;
      if (v57 == v58) {
        return v15;
      }
    }
    return v4;
  }
  return v15;
}

uint64_t sub_1CD22131C(uint64_t result)
{
  if (*(unsigned char *)(result + 64)) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (!v2) {
    return result;
  }
  uint64_t v3 = *(uint64_t **)(result + 16);
  char v4 = &v3[v2];
  while (2)
  {
    uint64_t v5 = *v3;
    do
    {
      if (*(void *)(*(void *)(v5 + 40) + 48) == v5 + 24 || (uint64_t v6 = *(void *)(v5 + 24)) == 0)
      {
        *uint64_t v3 = 0;
        goto LABEL_12;
      }
      *uint64_t v3 = v6 - 24;
      uint64_t result = sub_1CBF63B28(v6 - 24);
      uint64_t v5 = *v3;
    }
    while (result);
    if (!v5)
    {
LABEL_12:
      *(unsigned char *)(v1 + 64) = 1;
      return result;
    }
    if (++v3 != v4) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CD2213B0(uint64_t result)
{
  *(unsigned char *)(result + 64) = 0;
  *(_DWORD *)(result + 24) = 0;
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)result;
    uint64_t v4 = *(void *)result + 8 * v1;
    while (1)
    {
      uint64_t v5 = *(void *)(*(void *)v3 + 40);
      uint64_t v6 = v5 ? v5 - 24 : 0;
      uint64_t v7 = *(unsigned __int8 *)(v6 + 16) - 29 >= 0xB ? 0 : v6;
      uint64_t v8 = (void *)(v7 + 24);
      if (*(void *)(*(void *)(v7 + 40) + 48) == v7 + 24) {
        break;
      }
      uint64_t v9 = (void *)*v8;
      if (!*v8) {
        break;
      }
      while (1)
      {
        uint64_t result = sub_1CBF63B28((uint64_t)(v9 - 3));
        if (!result) {
          break;
        }
        if (*(void **)(v9[2] + 48) != v9)
        {
          uint64_t v9 = (void *)*v9;
          if (v9) {
            continue;
          }
        }
        goto LABEL_19;
      }
      unint64_t v10 = *(unsigned int *)(v2 + 24);
      if (v10 >= *(unsigned int *)(v2 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v2 + 16) + 8 * v10) = v9 - 3;
      ++*(_DWORD *)(v2 + 24);
      v3 += 8;
      if (v3 == v4) {
        return result;
      }
    }
LABEL_19:
    *(unsigned char *)(v2 + 64) = 1;
  }
  return result;
}

uint64_t sub_1CD2214C8(uint64_t result)
{
  if (!*(unsigned char *)(result + 64))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 24);
    if (v2)
    {
      uint64_t v3 = *(uint64_t **)(result + 16);
      uint64_t v4 = &v3[v2];
      while (2)
      {
        uint64_t v5 = *v3;
        do
        {
          uint64_t v7 = v5 + 32;
          uint64_t v6 = *(void *)(v5 + 32);
          uint64_t result = v6 - 24;
          BOOL v8 = v6 == *(void *)(v7 + 8) + 40 || v6 == 0;
          if (v8) {
            uint64_t v9 = 0;
          }
          else {
            uint64_t v9 = v6 - 24;
          }
          *uint64_t v3 = v9;
          if (v8) {
            goto LABEL_16;
          }
          uint64_t result = sub_1CBF63B28(result);
          uint64_t v5 = *v3;
        }
        while (result);
        if (!v5)
        {
LABEL_16:
          *(unsigned char *)(v1 + 64) = 1;
          return result;
        }
        if (++v3 != v4) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_1CD221554(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int64_t a5, uint64_t a6, void *a7, int a8)
{
  v76[4] = *MEMORY[0x1E4F143B8];
  if (dword_1EBCFE348 == a8) {
    return 0;
  }
  unsigned int v10 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v10 <= 0x1B)
  {
    if (a1 && v10 == 5)
    {
      unsigned int v72 = v76;
      uint64_t v73 = (uint64_t)v76;
      uint64_t v74 = 4;
      int v75 = 0;
      BOOL v28 = sub_1CC565AD0(a1, (uint64_t)&v72);
      if ((void *)v73 != v72) {
        free((void *)v73);
      }
      if (v28) {
        return 0;
      }
    }
    return 1;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12 == a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v12 + 40);
  if (v13 == v12 + 40) {
    return 1;
  }
  uint64_t v14 = v13 - 24;
  if (!v13) {
    uint64_t v14 = 0;
  }
  unsigned int v15 = *(unsigned __int8 *)(v14 + 16) - 40;
  if (v15 < 0xFFFFFFF5) {
    uint64_t v14 = 0;
  }
  uint64_t result = 1;
  if (!v13) {
    return result;
  }
  BOOL v16 = *(unsigned char *)(v14 + 16) == 30 && v15 >= 0xFFFFFFF5;
  if (!v16 || (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 3 || *(void *)(v14 - 32) != a2) {
    return result;
  }
  uint64_t v24 = *a3;
  uint64_t v23 = a3[1];
  if (v23 == *a3)
  {
    uint64_t v25 = *((unsigned int *)a3 + 5);
    int v26 = (void *)(v23 + 8 * v25);
    if (v25)
    {
      uint64_t v27 = 0;
      while (*(void *)(v23 + v27) != a1)
      {
        v27 += 8;
        if (8 * v25 == v27) {
          goto LABEL_44;
        }
      }
      int v26 = (void *)(v23 + v27);
    }
LABEL_44:
    uint64_t v24 = a3[1];
  }
  else
  {
    uint64_t v29 = *((unsigned int *)a3 + 4);
    int v30 = v29 - 1;
    unsigned int v31 = (v29 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    int v26 = (void *)(v23 + 8 * v31);
    uint64_t v32 = *v26;
    if (*v26 == -1)
    {
      unsigned int v33 = 0;
LABEL_46:
      if (v33) {
        int v26 = v33;
      }
      if (*v26 != a1)
      {
        LODWORD(v25) = *((_DWORD *)a3 + 5);
        int v26 = (void *)(v23 + 8 * v29);
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v33 = 0;
      int v34 = 1;
      while (v32 != a1)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == -2;
        }
        if (v35) {
          unsigned int v33 = v26;
        }
        unsigned int v36 = v31 + v34++;
        unsigned int v31 = v36 & v30;
        int v26 = (void *)(v23 + 8 * (v36 & v30));
        uint64_t v32 = *v26;
        if (*v26 == -1) {
          goto LABEL_46;
        }
      }
    }
    LODWORD(v25) = *((_DWORD *)a3 + 5);
  }
LABEL_51:
  if (v23 == v24) {
    unsigned int v37 = v25;
  }
  else {
    unsigned int v37 = *((_DWORD *)a3 + 4);
  }
  if (v26 != (void *)(v23 + 8 * v37)) {
    return 1;
  }
  uint64_t result = llvm::isSafeToSpeculativelyExecute(a1, 0, 0, 0);
  if (!result) {
    return result;
  }
  int v38 = *(_DWORD *)(a1 + 20);
  if ((v38 & 0x40000000) != 0)
  {
    int v40 = *(uint64_t **)(a1 - 8);
    unint64_t v39 = v38 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v39 = v38 & 0x7FFFFFF;
    int v40 = (uint64_t *)(a1 - 32 * v39);
  }
  unsigned int v72 = &v74;
  uint64_t v73 = 0x400000000;
  if (v39 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v39)
  {
    uint64_t v41 = 32 * v39;
    int v42 = &v74;
    do
    {
      uint64_t v43 = *v40;
      v40 += 4;
      *v42++ = v43;
      v41 -= 32;
    }
    while (v41);
    uint64_t v44 = (uint64_t *)v72;
  }
  else
  {
    uint64_t v44 = &v74;
  }
  LODWORD(v73) = v39;
  uint64_t v45 = (*(uint64_t (**)(void, uint64_t, uint64_t *))(*(void *)*a7 + 72))(*a7, a1, v44);
  if (v72 != &v74)
  {
    uint64_t v70 = v45;
    int v71 = v46;
    free(v72);
    int v46 = v71;
    uint64_t v45 = v70;
  }
  if (v46 == 1)
  {
    int v47 = 1;
    *(_DWORD *)(a4 + 8) = 1;
  }
  else
  {
    int v47 = *(_DWORD *)(a4 + 8);
  }
  int64_t v48 = *(void *)a4 + v45;
  if (__OFADD__(*(void *)a4, v45)) {
    int64_t v48 = (v48 >> 63) ^ 0x8000000000000000;
  }
  *(void *)a4 = v48;
  BOOL v49 = a5 < v48;
  if (v47 != a6) {
    BOOL v49 = v47 > (int)a6;
  }
  if (!v49)
  {
LABEL_77:
    int v50 = *(_DWORD *)(a1 + 20);
    if ((v50 & 0x40000000) != 0)
    {
      uint64_t v52 = *(void **)(a1 - 8);
      uint64_t v51 = v50 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v51 = v50 & 0x7FFFFFF;
      uint64_t v52 = (void *)(a1 - 32 * v51);
    }
    if (v51)
    {
      uint64_t v53 = (a8 + 1);
      uint64_t v54 = 32 * v51;
      while ((sub_1CD221554(*v52, a2, a3, a4, a5, a6, a7, v53) & 1) != 0)
      {
        v52 += 4;
        v54 -= 32;
        if (!v54) {
          goto LABEL_84;
        }
      }
      return 0;
    }
LABEL_84:
    uint64_t v55 = a3[1];
    uint64_t v56 = *((unsigned int *)a3 + 5);
    if (v55 == *a3)
    {
      if (v56)
      {
        unint64_t v57 = 0;
        uint64_t v58 = 8 * v56;
        unint64_t v59 = (uint64_t *)a3[1];
        while (*v59 != a1)
        {
          if (*v59 == -2) {
            unint64_t v57 = v59;
          }
          ++v59;
          v58 -= 8;
          if (!v58)
          {
            if (!v57) {
              goto LABEL_92;
            }
            *unint64_t v57 = a1;
            --*((_DWORD *)a3 + 6);
            return 1;
          }
        }
        return 1;
      }
LABEL_92:
      unsigned int v60 = *((_DWORD *)a3 + 4);
      if (v56 < v60)
      {
        *((_DWORD *)a3 + 5) = v56 + 1;
        *(void *)(v55 + 8 * v56) = a1;
        return 1;
      }
    }
    else
    {
      unsigned int v60 = *((_DWORD *)a3 + 4);
    }
    if (3 * v60 <= 4 * ((int)v56 - *((_DWORD *)a3 + 6)))
    {
      if (v60 >= 0x40) {
        v60 *= 2;
      }
      else {
        unsigned int v60 = 128;
      }
    }
    else if (v60 - v56 >= v60 >> 3)
    {
      goto LABEL_97;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v60);
    unsigned int v60 = *((_DWORD *)a3 + 4);
    uint64_t v55 = a3[1];
LABEL_97:
    unsigned int v61 = v60 - 1;
    unsigned int v62 = (v60 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    int v63 = (uint64_t *)(v55 + 8 * v62);
    uint64_t v64 = *v63;
    if (*v63 == -1)
    {
      int64_t v65 = 0;
LABEL_110:
      if (v65) {
        uint64_t v69 = v65;
      }
      else {
        uint64_t v69 = v63;
      }
      if (*v69 != a1)
      {
        if (*v69 == -2) {
          --*((_DWORD *)a3 + 6);
        }
        else {
          ++*((_DWORD *)a3 + 5);
        }
        *uint64_t v69 = a1;
      }
    }
    else
    {
      int64_t v65 = 0;
      int v66 = 1;
      while (v64 != a1)
      {
        if (v65) {
          BOOL v67 = 0;
        }
        else {
          BOOL v67 = v64 == -2;
        }
        if (v67) {
          int64_t v65 = v63;
        }
        unsigned int v68 = v62 + v66++;
        unsigned int v62 = v68 & v61;
        int v63 = (uint64_t *)(v55 + 8 * (v68 & v61));
        uint64_t v64 = *v63;
        if (*v63 == -1) {
          goto LABEL_110;
        }
      }
    }
    return 1;
  }
  if (!byte_1EBCFE288) {
    return 0;
  }
  uint64_t result = 0;
  if (!(v47 | a8) && *((_DWORD *)a3 + 5) == *((_DWORD *)a3 + 6)) {
    goto LABEL_77;
  }
  return result;
}

BOOL sub_1CD221AF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  }
  unsigned int v4 = *(unsigned __int8 *)(*(void *)(v3 + 32) + 16);
  if (v4 <= 0x14 && v4 != 5) {
    return 1;
  }
  unsigned int v6 = *(unsigned __int8 *)(*(void *)(v3 + 64) + 16);
  return v6 < 0x15 && v6 != 5;
}

uint64_t sub_1CD221B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v914 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(a1 + 40) + 10)) {
    return 0;
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v786 = *(llvm::BasicBlock **)(a2 + 40);
  if (sub_1CD2291FC(a1, a2))
  {
    uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v786);
    if (SinglePredecessor && sub_1CD2293D8(v5, v4, SinglePredecessor, (uint64_t *)a3)) {
      goto LABEL_398;
    }
    llvm::BasicBlock::instructionsWithoutDebug(v786, 1, (uint64_t)v898);
    *(_OWORD *)uint64_t v861 = *(_OWORD *)v898;
    uint64_t v7 = &v862;
    if (__nel[1])
    {
      if ((void **)__nel[1] == __base)
      {
        uint64_t v865 = &v862;
        (*(void (**)(void))(*(void *)__nel[1] + 24))();
      }
      else
      {
        uint64_t v865 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)__nel[1] + 16))();
      }
    }
    else
    {
      uint64_t v865 = 0;
    }
    if (v902 == v901)
    {
      (*(void (**)(void *))(v901[0] + 32))(v901);
    }
    else if (v902)
    {
      (*(void (**)(void))(*v902 + 40))();
    }
    if ((void **)__nel[1] == __base)
    {
      (*((void (**)(void **))__base[0] + 4))(__base);
    }
    else if (__nel[1])
    {
      (*(void (**)(void))(*(void *)__nel[1] + 40))();
    }
    BOOL v8 = v861[0];
    uint64_t v9 = (char *)v861[0] - 24;
    if (!v861[0]) {
      uint64_t v9 = 0;
    }
    if (v9 == (char *)v4) {
      goto LABEL_25;
    }
    if (v9 == *(char **)(v4 - 96))
    {
      do
      {
        BOOL v8 = (void *)v8[1];
        v861[0] = v8;
        if (v8 == v861[1]) {
          break;
        }
        if (!v865)
        {
LABEL_1290:
          sub_1CB920400();
LABEL_1291:
          BOOL v551 = v7 == (uint64_t *)__p;
          uint64_t v552 = ***(void ***)__p;
          int v553 = *(llvm::ConstantInt **)(v552 + 1888);
          unint64_t v554 = *(unsigned int *)(v552 + 1896);
          LODWORD(v898[1]) = v554 >> 8;
          if (v554 >> 8 > 0x40) {
            operator new[]();
          }
          if (v554 <= 0xFF) {
            unint64_t v555 = 0;
          }
          else {
            unint64_t v555 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v554) + 63);
          }
          v898[0] = (void *)(v555 & v551);
          v556 = llvm::ConstantInt::get(v553, (llvm::LLVMContext *)v898, v461);
          if (LODWORD(v898[1]) >= 0x41 && v898[0]) {
            MEMORY[0x1D25D9CB0](v898[0], 0x1000C8000313F17);
          }
          if (*v784)
          {
            **((void **)v847 - 10) = *((void *)v847 - 11);
            uint64_t v557 = *((void *)v847 - 11);
            if (v557) {
              *(void *)(v557 + 16) = *((void *)v847 - 10);
            }
          }
          uint64_t *v784 = (uint64_t)v556;
          if (v556)
          {
            uint64_t v560 = v556[1];
            v559 = (uint64_t **)(v556 + 1);
            uint64_t v558 = v560;
            *((void *)v847 - 11) = v560;
            if (v560) {
              *(void *)(v558 + 16) = (char *)v847 - 88;
            }
            *((void *)v847 - 10) = v559;
            void *v559 = v784;
          }
          goto LABEL_1037;
        }
        char v10 = (*(uint64_t (**)(void))(*v865 + 48))();
        BOOL v8 = v861[0];
      }
      while ((v10 & 1) == 0);
      uint64_t v11 = v8 ? (uint64_t)(v8 - 3) : 0;
      if (v11 == v4)
      {
LABEL_25:
        if (sub_1CD22A348(a1, (void **)v4, a3))
        {
          *(unsigned char *)(a1 + 48) = 1;
          if (v865 == &v862)
          {
            (*(void (**)(uint64_t *))(v862 + 32))(&v862);
          }
          else if (v865)
          {
            (*(void (**)(void))(*v865 + 40))();
          }
          return 1;
        }
      }
    }
    if (v865 == &v862)
    {
      (*(void (**)(uint64_t *))(v862 + 32))(&v862);
      uint64_t v5 = a1;
    }
    else
    {
      uint64_t v5 = a1;
      if (v865) {
        (*(void (**)(void))(*v865 + 40))();
      }
    }
  }
  uint64_t v12 = *(const llvm::DataLayout **)(v5 + 16);
  uint64_t v13 = *(void *)(v4 - 96);
  v784 = (uint64_t *)(v4 - 96);
  v847 = (llvm::Instruction *)v4;
  if (!v13 || *(unsigned __int8 *)(v13 + 16) < 0x1Cu) {
    goto LABEL_396;
  }
  uint64_t v825 = *(void *)(v5 + 16);
  v898[0] = (void *)v825;
  v898[1] = 0;
  __base[0] = 0;
  __base[1] = &__nel[1];
  __nel[0] = 0x800000000;
  unsigned int v907 = 0;
  BOOL v14 = sub_1CB90D2C0((uint64_t)v861, (unsigned __int8 *)v13);
  v884[0] = &v885;
  HIDWORD(v884[1]) = 8;
  v861[0] = &v864;
  v861[1] = &v864;
  LODWORD(v863) = 0;
  if (v14) {
    int v15 = 32;
  }
  else {
    int v15 = 33;
  }
  uint64_t v862 = 0x100000008;
  uint64_t v864 = v13;
  unsigned int v16 = 1;
  v885 = (const char *)v13;
  int __pa = v15;
  while (1)
  {
    uint64_t v17 = *((void *)v884[0] + v16 - 1);
    LODWORD(v884[1]) = v16 - 1;
    if (v17) {
      BOOL v18 = *(unsigned __int8 *)(v17 + 16) >= 0x1Cu;
    }
    else {
      BOOL v18 = 0;
    }
    if (!v18) {
      goto LABEL_43;
    }
    uint64_t v853 = 0;
    uint64_t v854 = 0;
    if (!v14) {
      break;
    }
    __src[0] = &v854;
    __src[1] = &v853;
    if ((sub_1CC185634((void **)__src, (uint64_t *)v17) & 1) == 0) {
      goto LABEL_47;
    }
LABEL_51:
    uint64_t v21 = v853;
    int v22 = v861[1];
    uint64_t v23 = HIDWORD(v862);
    if (v861[1] == v861[0])
    {
      if (HIDWORD(v862))
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        while (1)
        {
          uint64_t v26 = *(void *)((char *)v861[1] + v24);
          if (v26 == v853) {
            goto LABEL_94;
          }
          if (v26 == -2) {
            uint64_t v25 = (char *)v861[1] + v24;
          }
          v24 += 8;
          if (8 * HIDWORD(v862) == v24)
          {
            if (!v25) {
              break;
            }
            *uint64_t v25 = v853;
            LODWORD(v863) = v863 - 1;
            goto LABEL_92;
          }
        }
      }
      unsigned int v27 = v862;
      if (HIDWORD(v862) < v862)
      {
        ++HIDWORD(v862);
        *((void *)v861[1] + v23) = v853;
LABEL_92:
        if (LODWORD(v884[1]) >= (unint64_t)HIDWORD(v884[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v884[0] + LODWORD(v884[1])) = v853;
        ++LODWORD(v884[1]);
        int v22 = v861[1];
        goto LABEL_94;
      }
    }
    else
    {
      unsigned int v27 = v862;
    }
    if (3 * v27 <= 4 * (HIDWORD(v862) - (int)v863))
    {
      if (v27 >= 0x40) {
        v27 *= 2;
      }
      else {
        unsigned int v27 = 128;
      }
    }
    else if (v27 - HIDWORD(v862) >= v27 >> 3)
    {
      goto LABEL_64;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v861, v27);
    unsigned int v27 = v862;
    int v22 = v861[1];
LABEL_64:
    unsigned int v28 = v27 - 1;
    unsigned int v29 = (v27 - 1) & ((v21 >> 4) ^ (v21 >> 9));
    int v30 = &v22[v29];
    uint64_t v31 = *v30;
    if (*v30 == -1)
    {
      uint64_t v32 = 0;
LABEL_86:
      if (v32) {
        int v30 = v32;
      }
      if (*v30 != v21)
      {
        if (*v30 == -2) {
          LODWORD(v863) = v863 - 1;
        }
        else {
          ++HIDWORD(v862);
        }
        *int v30 = v21;
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v33 = 1;
      while (v31 != v21)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -2;
        }
        if (v34) {
          uint64_t v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & v28;
        int v30 = &v22[v35 & v28];
        uint64_t v31 = *v30;
        if (*v30 == -1) {
          goto LABEL_86;
        }
      }
    }
LABEL_94:
    uint64_t v44 = v854;
    uint64_t v45 = HIDWORD(v862);
    if (v22 == v861[0])
    {
      if (HIDWORD(v862))
      {
        int v46 = 0;
        uint64_t v47 = 8 * HIDWORD(v862);
        int64_t v48 = v22;
        do
        {
          if (*v48 == v854) {
            goto LABEL_128;
          }
          if (*v48 == -2) {
            int v46 = v48;
          }
          ++v48;
          v47 -= 8;
        }
        while (v47);
        if (v46)
        {
          void *v46 = v854;
          LODWORD(v863) = v863 - 1;
          goto LABEL_126;
        }
      }
      unsigned int v49 = v862;
      if (HIDWORD(v862) < v862)
      {
        ++HIDWORD(v862);
        v22[v45] = v854;
LABEL_126:
        if (LODWORD(v884[1]) >= (unint64_t)HIDWORD(v884[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v884[0] + LODWORD(v884[1])) = v854;
        ++LODWORD(v884[1]);
        goto LABEL_128;
      }
    }
    else
    {
      unsigned int v49 = v862;
    }
    if (3 * v49 <= 4 * (HIDWORD(v862) - (int)v863))
    {
      if (v49 >= 0x40) {
        v49 *= 2;
      }
      else {
        unsigned int v49 = 128;
      }
    }
    else if (v49 - HIDWORD(v862) >= v49 >> 3)
    {
      goto LABEL_107;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v861, v49);
    unsigned int v49 = v862;
    int v22 = v861[1];
LABEL_107:
    unsigned int v50 = v49 - 1;
    unsigned int v51 = (v49 - 1) & ((v44 >> 4) ^ (v44 >> 9));
    uint64_t v52 = &v22[v51];
    uint64_t v53 = *v52;
    if (*v52 == -1)
    {
      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        if (v53 == v44) {
          goto LABEL_128;
        }
        if (v54) {
          BOOL v56 = 0;
        }
        else {
          BOOL v56 = v53 == -2;
        }
        if (v56) {
          uint64_t v54 = v52;
        }
        unsigned int v57 = v51 + v55++;
        unsigned int v51 = v57 & v50;
        uint64_t v52 = &v22[v57 & v50];
        uint64_t v53 = *v52;
      }
      while (*v52 != -1);
    }
    if (v54) {
      uint64_t v58 = v54;
    }
    else {
      uint64_t v58 = v52;
    }
    if (*v58 != v44)
    {
      if (*v58 == -2) {
        LODWORD(v863) = v863 - 1;
      }
      else {
        ++HIDWORD(v862);
      }
      void *v58 = v44;
      goto LABEL_126;
    }
LABEL_128:
    unsigned int v16 = v884[1];
    if (!LODWORD(v884[1])) {
      goto LABEL_285;
    }
  }
  __s1[0] = &v854;
  __s1[1] = &v853;
  if (sub_1CC185750((void **)__s1, (uint64_t *)v17)) {
    goto LABEL_51;
  }
LABEL_47:
  if (*(unsigned char *)(v17 + 16) != 81) {
    goto LABEL_43;
  }
  int v19 = *(_DWORD *)(v17 + 20);
  uint64_t v20 = (v19 & 0x40000000) != 0 ? *(void *)(v17 - 8) : v17 - 32 * (v19 & 0x7FFFFFF);
  unsigned int v36 = sub_1CD22FA48(*(unsigned __int8 **)(v20 + 32), *((void *)v898[0] + 29), *((_DWORD *)v898[0] + 60));
  if (!v36) {
    goto LABEL_43;
  }
  unsigned int v37 = (llvm::ConstantInt ***)v36;
  v857 = 0;
  v858 = 0;
  uint64_t v38 = *(_WORD *)(v17 + 18) & 0x3F;
  if (v15 == v38)
  {
    uint64_t v39 = *(void *)(v17 - 64);
    __src[0] = &v858;
    __src[1] = &v857;
    __s2 = 0;
    int v40 = *(unsigned __int8 *)(v39 + 16);
    if (v40 == 5)
    {
      if (*(_WORD *)(v39 + 18) == 28)
      {
        unsigned int v61 = (llvm::Constant **)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF));
        if (*v61)
        {
          v858 = *v61;
          if (sub_1CBF5295C((uint64_t)&__src[1], v61[4])) {
            goto LABEL_139;
          }
        }
      }
    }
    else
    {
      if (v40 != 56) {
        goto LABEL_143;
      }
      if (!*(void *)(v39 - 64)) {
        goto LABEL_143;
      }
      v858 = *(llvm::Constant **)(v39 - 64);
      if (!sub_1CBF528D8((uint64_t)&__src[1], *(unsigned __int8 **)(v39 - 32))) {
        goto LABEL_143;
      }
LABEL_139:
      unsigned int v62 = *((_DWORD *)v857 + 2);
      LODWORD(v911[1]) = v62;
      if (v62 > 0x40) {
        operator new[]();
      }
      uint64_t v63 = ~*(void *)v857;
      unint64_t v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v62;
      if (!v62) {
        unint64_t v64 = 0;
      }
      int8x8_t v65 = (int8x8_t)(v64 & v63);
      v911[0] = v64 & v63;
      LODWORD(v911[1]) = 0;
      unsigned int v66 = v62;
      int v15 = __pa;
      uint8x8_t v80 = (uint8x8_t)vcnt_s8(v65);
      v80.i16[0] = vaddlv_u8(v80);
      if (v80.u32[0] == 1)
      {
        BOOL v81 = (uint64_t *)(v37 + 3);
        uint64_t v82 = ~*(void *)&v65;
        unint64_t v83 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
        if (!v66) {
          unint64_t v83 = 0;
        }
        unint64_t v84 = v83 & v82;
        v908[0] = v83 & v82;
        LODWORD(v908[1]) = 0;
        uint64_t v85 = *v81;
        if ((*v81 & ~v84) != 0)
        {
          char v90 = 0;
          int v15 = __pa;
        }
        else
        {
          int v15 = __pa;
          LOBYTE(v85) = (_BYTE)v858;
          if (v898[1] && v898[1] != v858)
          {
            LOBYTE(v85) = 0;
            goto LABEL_230;
          }
          v898[1] = v858;
          if (v858)
          {
            if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__base[1] + LODWORD(__nel[0])) = v37;
            ++LODWORD(__nel[0]);
            uint64_t v92 = **v37;
            if (*((_DWORD *)v37 + 8) > 0x40u) {
              operator new[]();
            }
            int v93 = (void *)((unint64_t)v37[3] | *(void *)&v65);
            LODWORD(__src[1]) = *((_DWORD *)v37 + 8);
            __src[0] = v93;
            unsigned int v94 = llvm::ConstantInt::get(v92, (llvm::LLVMContext *)__src, v41);
            if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v15 = __pa;
            *((void *)__base[1] + LODWORD(__nel[0])) = v94;
            ++LODWORD(__nel[0]);
            if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
            }
            ++v907;
            char v90 = 1;
            LOBYTE(v85) = 1;
          }
          else
          {
LABEL_230:
            char v90 = 1;
          }
        }
        char v806 = v85;
        if ((v90 & 1) == 0) {
          goto LABEL_143;
        }
LABEL_247:
        if (v806) {
          goto LABEL_128;
        }
        goto LABEL_43;
      }
    }
LABEL_143:
    uint64_t v67 = *(void *)(v17 - 64);
    __src[0] = &v858;
    __src[1] = &v857;
    __s2 = 0;
    int v68 = *(unsigned __int8 *)(v67 + 16);
    if (v68 == 5)
    {
      if (*(_WORD *)(v67 + 18) == 29)
      {
        int v76 = (llvm::Constant **)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF));
        if (*v76)
        {
          v858 = *v76;
          if (sub_1CBF5295C((uint64_t)&__src[1], v76[4])) {
            goto LABEL_178;
          }
        }
      }
    }
    else
    {
      if (v68 != 57) {
        goto LABEL_249;
      }
      if (!*(void *)(v67 - 64)) {
        goto LABEL_249;
      }
      v858 = *(llvm::Constant **)(v67 - 64);
      if (!sub_1CBF528D8((uint64_t)&__src[1], *(unsigned __int8 **)(v67 - 32))) {
        goto LABEL_249;
      }
LABEL_178:
      unsigned int v77 = *((_DWORD *)v857 + 2);
      if (v77 > 0x40) {
        operator new[]();
      }
      int8x8_t v78 = *(int8x8_t *)v857;
      uint8x8_t v79 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v857);
      v79.i16[0] = vaddlv_u8(v79);
      int v15 = __pa;
      if (v79.u32[0] == 1)
      {
        if (*((_DWORD *)v37 + 8) >= 0x41u) {
          operator new[]();
        }
        if ((llvm::ConstantInt **)((unint64_t)v37[3] | *(void *)&v78) == v37[3])
        {
          if ((!v898[1] || v898[1] == v858) && (v898[1] = v858) != 0)
          {
            if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__base[1] + LODWORD(__nel[0])) = v37;
            ++LODWORD(__nel[0]);
            uint64_t v86 = **v37;
            unsigned int v856 = v77;
            unint64_t v87 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v77;
            if (!v77) {
              unint64_t v87 = 0;
            }
            unint64_t v855 = v87 & ~*(void *)&v78;
            unsigned int v856 = 0;
            uint64_t v95 = (void *)((unint64_t)v37[3] & v855);
            LODWORD(__src[1]) = v77;
            __src[0] = v95;
            uint64_t v96 = llvm::ConstantInt::get(v86, (llvm::LLVMContext *)__src, v69);
            if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__base[1] + LODWORD(__nel[0])) = v96;
            ++LODWORD(__nel[0]);
            if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
            }
            ++v907;
            char v91 = 1;
            char v806 = 1;
          }
          else
          {
            char v806 = 0;
            char v91 = 1;
          }
        }
        else
        {
          char v91 = 0;
        }
        if (v91) {
          goto LABEL_247;
        }
      }
    }
LABEL_249:
    uint64_t v97 = *(void **)(v17 - 64);
    if (!v898[1] || v898[1] == v97)
    {
      v898[1] = *(void **)(v17 - 64);
      if (v97)
      {
        ++v907;
        if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)__base[1] + LODWORD(__nel[0])) = v37;
        ++LODWORD(__nel[0]);
        if (*(void *)(v17 - 64)) {
          goto LABEL_128;
        }
      }
    }
    goto LABEL_43;
  }
  llvm::ConstantRange::makeExactICmpRegion(v38, (uint64_t)(v37 + 3), (uint64_t)__src);
  int v42 = *(_DWORD *)(v17 + 20);
  if ((v42 & 0x40000000) != 0) {
    uint64_t v43 = *(void ***)(v17 - 8);
  }
  else {
    uint64_t v43 = (void **)(v17 - 32 * (v42 & 0x7FFFFFF));
  }
  unint64_t v59 = *v43;
  __s1[0] = &v858;
  __s1[1] = &v857;
  uint64_t v870 = 0;
  int v60 = *((unsigned __int8 *)v59 + 16);
  if (v60 == 5)
  {
    if (*((_WORD *)v59 + 9) == 13)
    {
      uint64_t v70 = (llvm::Constant **)&v59[-8 * (v59[5] & 0x7FFFFFF)];
      if (*v70)
      {
        v858 = *v70;
        if (sub_1CBF5295C((uint64_t)&__s1[1], v70[4])) {
          goto LABEL_151;
        }
      }
    }
  }
  else
  {
    if (v60 != 41) {
      goto LABEL_155;
    }
    if (!*((void *)v59 - 8)) {
      goto LABEL_155;
    }
    v858 = (llvm::Constant *)*((void *)v59 - 8);
    if (!sub_1CBF528D8((uint64_t)&__s1[1], *((unsigned __int8 **)v59 - 4))) {
      goto LABEL_155;
    }
LABEL_151:
    llvm::ConstantRange::subtract((unsigned int *)__src, v857, __s1);
    if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
      MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
    }
    __src[0] = __s1[0];
    LODWORD(__src[1]) = __s1[1];
    LODWORD(__s1[1]) = 0;
    if (v878 >= 0x41 && __s2)
    {
      MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      __s2 = v870;
      LODWORD(v878) = v871;
      int v871 = 0;
      if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
        MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
      }
    }
    else
    {
      __s2 = v870;
      LODWORD(v878) = v871;
    }
    unint64_t v59 = v858;
  }
LABEL_155:
  if (!v14)
  {
    llvm::ConstantRange::inverse((uint64_t)__src, (uint64_t)__s1);
    if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
      MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
    }
    __src[0] = __s1[0];
    LODWORD(__src[1]) = __s1[1];
    LODWORD(__s1[1]) = 0;
    if (v878 >= 0x41 && __s2)
    {
      MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      __s2 = v870;
      LODWORD(v878) = v871;
      int v871 = 0;
      if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
        MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
      }
    }
    else
    {
      __s2 = v870;
      LODWORD(v878) = v871;
    }
  }
  if (llvm::ConstantRange::isSizeLargerThan((llvm::ConstantRange *)__src, 8uLL)) {
    goto LABEL_170;
  }
  uint64_t v72 = LODWORD(__src[1]);
  if (LODWORD(__src[1]) < 0x41)
  {
    uint64_t v73 = __src[0];
    if ((unint64_t)__s2 | (unint64_t)__src[0]) {
      goto LABEL_162;
    }
    goto LABEL_170;
  }
  uint64_t v73 = __src[0];
  if (!memcmp(__src[0], __s2, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8))
  {
    int v98 = 0;
    int64_t v99 = (unint64_t)(v72 + 63) >> 6;
    do
    {
      BOOL v361 = v99-- < 1;
      if (v361) {
        break;
      }
      unint64_t v100 = v73[v99];
      v98 += __clz(v100);
    }
    while (!v100);
    int v75 = 0;
    int v101 = v72 | 0xFFFFFFC0;
    if ((v72 & 0x3F) == 0) {
      int v101 = 0;
    }
    if (v98 + v101 == v72) {
      goto LABEL_171;
    }
  }
LABEL_162:
  if (v898[1]) {
    BOOL v74 = v898[1] == v59;
  }
  else {
    BOOL v74 = 1;
  }
  if (!v74 || (v898[1] = v59) == 0)
  {
LABEL_170:
    int v75 = 0;
    goto LABEL_171;
  }
  LODWORD(__s1[1]) = v72;
  if (v72 > 0x40) {
    operator new[]();
  }
  __s1[0] = v73;
  while (2)
  {
    if (v72 <= 0x40)
    {
      if (__s1[0] == __s2) {
        goto LABEL_211;
      }
      goto LABEL_206;
    }
    uint64_t v88 = __s1[0];
    if (memcmp(__s1[0], __s2, (((unint64_t)v72 + 63) >> 3) & 0x3FFFFFF8))
    {
LABEL_206:
      uint64_t v89 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v17, (llvm::LLVMContext *)__s1, v71);
      if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__base[1] + LODWORD(__nel[0])) = v89;
      ++LODWORD(__nel[0]);
      llvm::APInt::operator++((uint64_t)__s1);
      LODWORD(v72) = __s1[1];
      continue;
    }
    break;
  }
  if (v88) {
    MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
  }
LABEL_211:
  ++v907;
  int v75 = 1;
LABEL_171:
  if (v878 >= 0x41 && __s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
  int v15 = __pa;
  if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
    MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
  }
  if (v75) {
    goto LABEL_128;
  }
LABEL_43:
  if (!__base[0])
  {
    __base[0] = (void *)v17;
    goto LABEL_128;
  }
  v898[1] = 0;
LABEL_285:
  if (v861[1] != v861[0]) {
    free(v861[1]);
  }
  if (v884[0] != &v885) {
    free(v884[0]);
  }
  int v102 = (unsigned __int8 *)v898[1];
  if (v898[1] && v907 >= 2)
  {
    int v103 = __base[0];
    BOOL v104 = sub_1CCA16538((uint64_t)v861, (unsigned __int8 *)v13);
    unsigned int v105 = __nel[0];
    if (LODWORD(__nel[0]) >= 2)
    {
      qsort(__base[1], LODWORD(__nel[0]), 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CD230780);
      unsigned int v105 = __nel[0];
    }
    uint64_t v106 = __base[1];
    unsigned int v107 = (char *)__base[1] + 8 * v105;
    uint64_t v108 = (char *)__base[1];
    if (v105)
    {
      uint64_t v109 = 0;
      while (8 * v105 - 8 != v109)
      {
        uint64_t v111 = *(void *)((char *)__base[1] + v109);
        uint64_t v110 = *(void *)((char *)__base[1] + v109 + 8);
        v109 += 8;
        if (v111 == v110)
        {
          uint64_t v108 = (char *)__base[1] + v109 - 8;
          goto LABEL_298;
        }
      }
    }
    else
    {
LABEL_298:
      if (v108 != v107)
      {
        uint64_t v112 = v108 + 16;
        if (v108 + 16 != v107)
        {
          uint64_t v113 = *(void *)v108;
          do
          {
            uint64_t v114 = v113;
            uint64_t v113 = *(void *)v112;
            if (v114 != *(void *)v112)
            {
              *((void *)v108 + 1) = v113;
              v108 += 8;
            }
            v112 += 8;
          }
          while (v112 != v107);
          uint64_t v106 = __base[1];
        }
        unsigned int v107 = v108 + 8;
      }
    }
    unint64_t v115 = v107 - v106;
    LODWORD(__nel[0]) = v115 >> 3;
    if (!v103 || (v115 & 0x7FFFFFFF0) != 0)
    {
      if (v104) {
        int v116 = (llvm::BasicBlock *)*((void *)v847 - 4);
      }
      else {
        int v116 = (llvm::BasicBlock *)*((void *)v847 - 8);
      }
      if (v104) {
        uint64_t v117 = *((void *)v847 - 8);
      }
      else {
        uint64_t v117 = *((void *)v847 - 4);
      }
      int v118 = (llvm *)*((void *)v847 + 5);
      v861[0] = &v862;
      v861[1] = (void *)0x200000000;
      if (v103)
      {
        unsigned int v119 = *(llvm::Instruction **)(a1 + 8);
        v884[0] = "switch.early.test";
        __int16 v887 = 259;
        sub_1CD126150(v118, v847, v119, 0, 0, 0, (llvm::Twine *)v884, 0);
      }
      BOOL v839 = v118;
      *(void *)(a3 + 48) = v118;
      *(void *)(a3 + 56) = (char *)v847 + 24;
      uint64_t v120 = (void *)*((void *)v847 + 6);
      __src[0] = v120;
      if (v120)
      {
        llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v120, 2);
        uint64_t v121 = __src[0];
      }
      else
      {
        uint64_t v121 = 0;
      }
      sub_1CB8461A4(a3, 0, (uint64_t)v121);
      if (!__src[0])
      {
LABEL_320:
        uint64_t v122 = *(void *)v102;
        unsigned int v123 = *(_DWORD *)(*(void *)v102 + 8);
        if (v123 == 15)
        {
          if ((v123 & 0xFE) == 0x12) {
            unsigned int v123 = *(_DWORD *)(**(void **)(v122 + 16) + 8);
          }
          if (v123 < 0x100) {
            goto LABEL_332;
          }
          unsigned int v124 = v123 >> 8;
          uint64_t v125 = *(unsigned int *)(v825 + 240);
          uint64_t v126 = *(void *)(v825 + 232);
          if (v125)
          {
            uint64_t v126 = *(void *)(v825 + 232);
            unint64_t v127 = *(unsigned int *)(v825 + 240);
            do
            {
              unint64_t v128 = v127 >> 1;
              uint64_t v129 = v126 + 16 * (v127 >> 1);
              unsigned int v130 = *(_DWORD *)(v129 + 8);
              uint64_t v131 = v129 + 16;
              v127 += ~(v127 >> 1);
              if (v130 < v124) {
                uint64_t v126 = v131;
              }
              else {
                unint64_t v127 = v128;
              }
            }
            while (v127);
          }
          if (v126 == *(void *)(v825 + 232) + 16 * v125 || *(_DWORD *)(v126 + 8) != v124) {
LABEL_332:
          }
            uint64_t v126 = *(void *)(v825 + 232);
          uint64_t v132 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v122, (llvm::LLVMContext *)*(unsigned int *)(v126 + 4));
          uint64_t v133 = (uint64_t)v132;
          if ((*(_DWORD *)(v122 + 8) & 0xFE) == 0x12)
          {
            v774 = (llvm::Type *)*(unsigned int *)(v122 + 32);
            if (*(_DWORD *)(v122 + 8) == 19) {
              llvm::ScalableVectorType::get(v132, v774);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v132, v774);
            }
            uint64_t v133 = v775;
          }
          __src[0] = "magicptr";
          LOWORD(v879) = 259;
          if (*(void *)v102 != v133)
          {
            if (v102[16] <= 0x14u)
            {
              int v102 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 47, v102, v133);
              if (v102) {
                BOOL v137 = v102[16] >= 0x1Cu;
              }
              else {
                BOOL v137 = 0;
              }
              if (v137)
              {
                (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(a3 + 80)
                                                                                           + 16))(*(void *)(a3 + 80), v102, __src, *(void *)(a3 + 48), *(void *)(a3 + 56));
                uint64_t v776 = *(unsigned int *)(a3 + 8);
                if (v776)
                {
                  uint64_t v777 = *(void *)a3;
                  uint64_t v778 = *(void *)a3 + 16 * v776;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v102, *(_DWORD *)v777, *(llvm::MDNode **)(v777 + 8));
                    v777 += 16;
                  }
                  while (v777 != v778);
                }
              }
            }
            else
            {
              __int16 v887 = 257;
              int v102 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v102, v133, (const char **)v884, 0);
              (*(void (**)(void, unsigned __int8 *, void **, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v102, __src, *(void *)(a3 + 48), *(void *)(a3 + 56));
              uint64_t v134 = *(unsigned int *)(a3 + 8);
              if (v134)
              {
                uint64_t v135 = *(void *)a3;
                uint64_t v136 = *(void *)a3 + 16 * v134;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v102, *(_DWORD *)v135, *(llvm::MDNode **)(v135 + 8));
                  v135 += 16;
                }
                while (v135 != v136);
              }
            }
          }
        }
        int v138 = __nel[0];
        uint64_t v139 = operator new(0x48uLL);
        v139[7] = v139[7] & 0x38000000 | 0x40000000;
        *(void *)uint64_t v139 = 0;
        *((void *)v139 + 1) = ***(void ***)v102 + 1576;
        *((void *)v139 + 2) = 0;
        int v140 = (llvm::Instruction *)(v139 + 2);
        v139[7] = 0x40000000;
        *((unsigned char *)v139 + 24) = 31;
        *((unsigned char *)v139 + 25) = 0;
        *((_WORD *)v139 + 13) = 0;
        v139[16] = 0;
        *((_OWORD *)v139 + 3) = 0u;
        *((_OWORD *)v139 + 2) = 0u;
        llvm::SwitchInst::init((uint64_t)(v139 + 2), (uint64_t)v102, v117, 2 * v138 + 2);
        __int16 v887 = 257;
        uint64_t v141 = sub_1CB844E0C((uint64_t *)a3, v140, (uint64_t)v884);
        if (LODWORD(__nel[0]))
        {
          unsigned int v142 = v141;
          uint64_t v143 = 0;
          uint64_t v144 = 8 * LODWORD(__nel[0]);
          do
          {
            llvm::SwitchInst::addCase(v142, *(llvm::ConstantInt **)((char *)__base[1] + v143), v116);
            v143 += 8;
          }
          while (v144 != v143);
        }
        uint64_t v145 = *((void *)v116 + 6);
        uint64_t v146 = v145 - 24;
        if (v145) {
          uint64_t v147 = v145 - 24;
        }
        else {
          uint64_t v147 = 0;
        }
        uint64_t v148 = (uint64_t)v847;
        uint64_t v149 = (uint64_t)v118;
        if (*(unsigned char *)(v147 + 16) == 83)
        {
          do
          {
            uint64_t v842 = v145;
            uint64_t v150 = sub_1CBF73380(v146, v149);
            int v151 = LODWORD(__nel[0]) - 1;
            if (LODWORD(__nel[0]) != 1)
            {
              uint64_t v152 = v150;
              int v153 = 0;
              int v154 = (uint64_t *)(v150 + 8);
              LODWORD(v155) = *(_DWORD *)(v146 + 60);
              do
              {
                int v156 = *(_DWORD *)(v146 + 20);
                if ((v156 & 0x7FFFFFF) == v155)
                {
                  unsigned int v167 = v155 + (v155 >> 1);
                  if (v167 <= 2) {
                    uint64_t v168 = 2;
                  }
                  else {
                    uint64_t v168 = v167;
                  }
                  *(_DWORD *)(v146 + 60) = v168;
                  if ((v156 & 0x40000000) != 0) {
                    unint64_t v169 = *(uint64_t **)(v146 - 8);
                  }
                  else {
                    unint64_t v169 = (uint64_t *)(v146 - 32 * v155);
                  }
                  __pb = v169;
                  uint64_t v170 = operator new(40 * v168);
                  *(void *)(v146 - 8) = v170;
                  uint64_t v171 = v170;
                  do
                  {
                    *uint64_t v171 = 0;
                    v171[1] = 0;
                    v171[2] = 0;
                    v171[3] = v146;
                    v171 += 4;
                  }
                  while (v171 != &v170[4 * v168]);
                  int v172 = *(_DWORD *)(v146 + 20);
                  if ((v172 & 0x40000000) != 0) {
                    uint64_t v173 = (uint64_t)v170;
                  }
                  else {
                    uint64_t v173 = v146 - 32 * (v172 & 0x7FFFFFF);
                  }
                  sub_1CC5E4108((uint64_t)v884, __pb, &__pb[4 * v155], v173);
                  if (v155)
                  {
                    memmove((void *)(v173 + 32 * v168), &__pb[4 * v155], 8 * v155);
                    uint64_t v174 = 4 * v155;
                    do
                    {
                      int v175 = &__pb[v174];
                      if (__pb[v174 - 4])
                      {
                        *(void *)*(v175 - 2) = *(v175 - 3);
                        uint64_t v176 = *(v175 - 3);
                        if (v176) {
                          *(void *)(v176 + 16) = *(v175 - 2);
                        }
                      }
                      v174 -= 4;
                    }
                    while (v174 * 8);
                  }
                  operator delete(__pb);
                  int v156 = *(_DWORD *)(v146 + 20);
                  uint64_t v148 = (uint64_t)v847;
                  uint64_t v149 = (uint64_t)v839;
                }
                uint64_t v157 = (v156 + 1) & 0x7FFFFFF;
                *(_DWORD *)(v146 + 20) = v156 & 0xF8000000 | (v156 + 1) & 0x7FFFFFF;
                if ((v156 & 0x40000000) != 0) {
                  uint64_t v158 = *(void *)(v146 - 8);
                }
                else {
                  uint64_t v158 = v146 - 32 * v157;
                }
                uint64_t v159 = (v157 - 1);
                uint64_t v160 = v158 + 32 * v159;
                if (*(void *)v160)
                {
                  **(void **)(v160 + 16) = *(void *)(v160 + 8);
                  uint64_t v166 = *(void *)(v160 + 8);
                  if (v166) {
                    *(void *)(v166 + 16) = *(void *)(v160 + 16);
                  }
                }
                *(void *)uint64_t v160 = v152;
                if (v152)
                {
                  uint64_t v161 = *v154;
                  uint64_t v162 = v158 + 32 * v159;
                  *(void *)(v162 + 8) = *v154;
                  if (v161) {
                    *(void *)(v161 + 16) = v162 + 8;
                  }
                  *(void *)(v162 + 16) = v154;
                  *int v154 = v160;
                }
                int v163 = *(_DWORD *)(v146 + 20);
                uint64_t v164 = v163 & 0x7FFFFFF;
                if ((v163 & 0x40000000) != 0) {
                  uint64_t v165 = *(void *)(v146 - 8);
                }
                else {
                  uint64_t v165 = v146 - 32 * v164;
                }
                uint64_t v155 = *(unsigned int *)(v146 + 60);
                *(void *)(v165 + 32 * v155 + 8 * (v164 - 1)) = v149;
                ++v153;
              }
              while (v153 != v151);
            }
            uint64_t v145 = *(void *)(v842 + 8);
            uint64_t v146 = v145 - 24;
            if (v145) {
              uint64_t v177 = v145 - 24;
            }
            else {
              uint64_t v177 = 0;
            }
          }
          while (*(unsigned char *)(v177 + 16) == 83);
        }
        sub_1CD2300A0(v148);
      }
      int v325 = *(unsigned __int8 *)__src[0];
      if ((v325 - 4) > 0x1E)
      {
        if ((v325 - 3) >= 0xFFFFFFFE) {
          unsigned int v333 = __src[0];
        }
        else {
          unsigned int v333 = 0;
        }
        if ((v325 - 3) < 0xFFFFFFFE)
        {
          if (v325 == 3) {
            *((void *)__src[0] + 1) = 0;
          }
          goto LABEL_320;
        }
        unint64_t v327 = (unint64_t)v333 + 8;
      }
      else
      {
        if ((*((unsigned char *)__src[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__src[0] + 3)) {
          goto LABEL_320;
        }
        uint64_t v326 = *((void *)__src[0] + 2);
        if ((v326 & 4) == 0) {
          goto LABEL_320;
        }
        unint64_t v327 = v326 & 0xFFFFFFFFFFFFFFF8;
        if (!v327) {
          goto LABEL_320;
        }
      }
      v884[0] = __src;
      sub_1CC5FA668(v327 + 16, v884);
      goto LABEL_320;
    }
  }
  if (__base[1] != &__nel[1]) {
    free(__base[1]);
  }
  unint64_t v4 = (unint64_t)v847;
  uint64_t v13 = *v784;
  uint64_t v5 = a1;
  uint64_t v12 = *(const llvm::DataLayout **)(a1 + 16);
LABEL_396:
  unsigned int v179 = (uint64_t *)sub_1CC16FA94(v4);
  if (v179)
  {
    uint64_t v302 = v180 & 1;
    if ((uint64_t *)v13 != v179)
    {
      if (!v13) {
        goto LABEL_397;
      }
      if (*(unsigned char *)(v13 + 16) != 81) {
        goto LABEL_397;
      }
      isImpliedConditiouint64_t n = llvm::isImpliedCondition(v179, *(_WORD *)(v13 + 18) & 0x3F, *(void *)(v13 - 64), *(void *)(v13 - 32), v12, v302, 0);
      if (isImpliedCondition < 0x100u) {
        goto LABEL_397;
      }
      LODWORD(v302) = isImpliedCondition;
    }
    uint64_t v304 = *v784;
    uint64_t v305 = ***(void ***)v786;
    if (v302)
    {
      BOOL v306 = *(void **)(v305 + 1560);
      if (!v306)
      {
        int v307 = *(llvm::ConstantInt **)(v305 + 1888);
        unsigned int v308 = *(_DWORD *)(v305 + 1896);
        LODWORD(v898[1]) = v308 >> 8;
        if (v308 >> 8 > 0x40) {
          operator new[]();
        }
        if (v308 <= 0xFF) {
          LOBYTE(v309) = 0;
        }
        else {
          unint64_t v309 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v308) + 63);
        }
        v898[0] = (void *)(v309 & 1);
        BOOL v306 = llvm::ConstantInt::get(v307, (llvm::LLVMContext *)v898, v181);
        unint64_t v4 = (unint64_t)v847;
        if (LODWORD(v898[1]) >= 0x41 && v898[0]) {
          MEMORY[0x1D25D9CB0](v898[0], 0x1000C8000313F17);
        }
        *(void *)(v305 + 1560) = v306;
      }
    }
    else
    {
      BOOL v306 = *(void **)(v305 + 1568);
      if (!v306)
      {
        int v334 = *(llvm::ConstantInt **)(v305 + 1888);
        unsigned int v335 = *(_DWORD *)(v305 + 1896);
        LODWORD(v898[1]) = v335 >> 8;
        if (v335 >> 8 > 0x40) {
          operator new[]();
        }
        v898[0] = 0;
        BOOL v306 = llvm::ConstantInt::get(v334, (llvm::LLVMContext *)v898, v181);
        if (LODWORD(v898[1]) >= 0x41 && v898[0]) {
          MEMORY[0x1D25D9CB0](v898[0], 0x1000C8000313F17);
        }
        *(void *)(v305 + 1568) = v306;
      }
    }
    if (*v784)
    {
      **(void **)(v4 - 80) = *(void *)(v4 - 88);
      uint64_t v313 = *(void *)(v4 - 88);
      if (v313) {
        *(void *)(v313 + 16) = *(void *)(v4 - 80);
      }
    }
    uint64_t *v784 = (uint64_t)v306;
    if (v306)
    {
      uint64_t v316 = v306[1];
      unsigned int v315 = (uint64_t **)(v306 + 1);
      uint64_t v314 = v316;
      *(void *)(v4 - 88) = v316;
      if (v316) {
        *(void *)(v314 + 16) = v4 - 88;
      }
      *(void *)(v4 - 80) = v315;
      *unsigned int v315 = v784;
    }
    uint64_t v860 = 0;
    llvm::RecursivelyDeleteTriviallyDeadInstructions(v304, 0, 0, (uint64_t)v859);
    if (v860 == v859)
    {
      (*(void (**)(void *))(v859[0] + 32))(v859);
      uint64_t v5 = a1;
    }
    else
    {
      uint64_t v5 = a1;
      if (v860) {
        (*(void (**)(void))(*v860 + 40))();
      }
    }
LABEL_398:
    uint64_t result = 1;
    *(unsigned char *)(v5 + 48) = 1;
    return result;
  }
LABEL_397:
  if (llvm::FoldBranchToCommonDest((llvm *)v4, *(llvm::BranchInst **)(v5 + 8), 0, *(llvm::MemorySSAUpdater **)v5, (const llvm::TargetTransformInfo *)**(unsigned int **)(v5 + 40)))goto LABEL_398; {
  uint64_t v182 = *(void *)(v4 - 32);
  }
  uint64_t v785 = (llvm::BasicBlock **)(v4 - 32);
  uint64_t v183 = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v182);
  uint64_t v184 = *(llvm::BasicBlock **)(v4 - 64);
  BOOL v783 = (llvm::BasicBlock **)(v4 - 64);
  uint64_t v185 = llvm::BasicBlock::getSinglePredecessor(v184);
  if (v183)
  {
    if (v185)
    {
      if (!byte_1EBCFDEC8) {
        goto LABEL_743;
      }
      uint64_t v187 = (void *)(*(void *)(*((void *)v786 + 7) + 40) + 216);
      LOWORD(__nel[0]) = 260;
      v898[0] = v187;
      llvm::Triple::Triple((llvm::Triple *)v884, (const llvm::Twine *)v898);
      uint64_t v188 = *(void *)(a1 + 40);
      if (!*(unsigned char *)(v188 + 9) && (v886 & 0xFFFFFFFE) == 0x1C) {
        goto LABEL_740;
      }
      uint64_t v184 = *v785;
      if ((*((_WORD *)*v785 + 9) & 0x7FFF) != 0) {
        goto LABEL_740;
      }
      uint64_t v189 = (uint64_t)*v783;
      if ((*((_WORD *)*v783 + 9) & 0x7FFF) != 0) {
        goto LABEL_740;
      }
      uint64_t v190 = *(void **)a1;
      int v191 = *(unsigned __int8 *)(v188 + 8);
      uint64_t v192 = *((void *)v184 + 6);
      uint64_t v193 = *(void *)(v189 + 48);
      uint64_t v194 = *(void *)(v192 + 8);
      if (v192) {
        uint64_t v195 = v192 - 24;
      }
      else {
        uint64_t v195 = 0;
      }
      uint64_t v196 = *(void *)(v193 + 8);
      if (v193) {
        uint64_t v197 = v193 - 24;
      }
      else {
        uint64_t v197 = 0;
      }
      if (sub_1CBF63B28(v195)) {
        int v198 = (llvm::Instruction *)v195;
      }
      else {
        int v198 = 0;
      }
      if (sub_1CBF63B28(v197)) {
        uint8x8_t v199 = (const llvm::Instruction *)v197;
      }
      else {
        uint8x8_t v199 = 0;
      }
      if (!v198 || !v199 || (llvm::Instruction::isIdenticalToWhenDefined(v198, v199) & 1) == 0)
      {
        while (sub_1CBF63B28(v195))
        {
          uint64_t v200 = v194 - 24;
          BOOL v34 = v194 == 0;
          uint64_t v194 = *(void *)(v194 + 8);
          if (v34) {
            uint64_t v195 = 0;
          }
          else {
            uint64_t v195 = v200;
          }
        }
        while (sub_1CBF63B28(v197))
        {
          uint64_t v201 = v196 - 24;
          BOOL v34 = v196 == 0;
          uint64_t v196 = *(void *)(v196 + 8);
          if (v34) {
            uint64_t v197 = 0;
          }
          else {
            uint64_t v197 = v201;
          }
        }
      }
      if (*(unsigned char *)(v195 + 16) == 83
        || !llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v195, (const llvm::Instruction *)v197))
      {
        goto LABEL_740;
      }
      int v202 = *(unsigned __int8 *)(v195 + 16);
      if (v202 == 33)
      {
        if (sub_1CD230804((uint64_t)v184, v189, v195, v197))
        {
          int v202 = *(unsigned __int8 *)(v195 + 16);
          goto LABEL_436;
        }
LABEL_740:
        if (SHIBYTE(v885) < 0) {
          operator delete(v884[0]);
        }
        unint64_t v4 = (unint64_t)v847;
        goto LABEL_743;
      }
LABEL_436:
      if (v202 == 39) {
        goto LABEL_740;
      }
      uint64_t v182 = *((void *)v847 + 5);
      if (!v191)
      {
        uint64_t v336 = llvm::skipDebugIntrinsics(v195 + 24);
        uint64_t v337 = v336 ? (unsigned __int8 *)(v336 - 24) : 0;
        uint64_t v338 = llvm::skipDebugIntrinsics(v197 + 24);
        uint64_t v339 = v338 ? (const llvm::Instruction *)(v338 - 24) : 0;
        if (!llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v337, v339)
          || v337[16] - 29 > 0xA)
        {
          goto LABEL_740;
        }
      }
      char v203 = 0;
      __pc = (uint64_t *)((char *)v847 + 24);
      v840 = (llvm::BasicBlock *)((char *)v184 + 40);
      unint64_t v4 = 1;
      unsigned int v843 = v190;
      while (2)
      {
        int v204 = *(unsigned __int8 *)(v195 + 16);
        if ((v204 - 29) >= 0xB)
        {
          if (v204 == 84) {
            uint64_t v205 = v195;
          }
          else {
            uint64_t v205 = 0;
          }
          if (*(unsigned char *)(v197 + 16) == 84) {
            uint64_t v206 = v197;
          }
          else {
            uint64_t v206 = 0;
          }
          if (v205) {
            BOOL v207 = v206 == 0;
          }
          else {
            BOOL v207 = 1;
          }
          if ((v207 || ((*(_WORD *)(v205 + 18) & 3) == 2) == ((*(_WORD *)(v206 + 18) & 3) == 2))
            && (*(unsigned int (**)(void, uint64_t))(*(void *)*v190 + 464))(*v190, v195)
            && (*(unsigned int (**)(void, uint64_t))(*(void *)*v190 + 464))(*v190, v197))
          {
            if ((unsigned int v208 = *(unsigned __int8 *)(v195 + 16) - 33, v208 > 0x33)
              || ((1 << v208) & 0x8000000000041) == 0
              || ((uint64_t v209 = *(void *)(v195 + 64)) == 0 || (*(unsigned char *)(v209 + 15) & 0x10) == 0)
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v195, 28) & 1) == 0)
            {
              if ((unsigned int v210 = *(unsigned __int8 *)(v197 + 16) - 33, v210 > 0x33)
                || ((1 << v210) & 0x8000000000041) == 0
                || ((uint64_t v211 = *(void *)(v197 + 64)) == 0 || (*(unsigned char *)(v211 + 15) & 0x10) == 0)
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v197, 28) & 1) == 0)
              {
                if (!sub_1CBF63B28(v195) && !sub_1CBF63B28(v197))
                {
                  int v235 = (uint64_t *)((char *)v847 + 24);
                  if ((llvm::Instruction *)v195 != v847)
                  {
                    uint64_t v236 = *(uint64_t **)(v195 + 32);
                    if (v236 != __pc)
                    {
                      BOOL v237 = (uint64_t *)(v195 + 24);
                      *(_WORD *)(v182 + 18) &= ~0x8000u;
                      if ((llvm::BasicBlock *)v182 != v184)
                      {
                        uint64_t v238 = *(void *)(v182 + 56);
                        if (v238) {
                          uint64_t v239 = *(llvm::ValueSymbolTable **)(v238 + 104);
                        }
                        else {
                          uint64_t v239 = 0;
                        }
                        uint64_t v240 = *((void *)v184 + 7);
                        if (v240) {
                          int v241 = *(llvm::ValueSymbolTable **)(v240 + 104);
                        }
                        else {
                          int v241 = 0;
                        }
                        if (v239 == v241)
                        {
                          uint64_t v242 = (uint64_t *)(v195 + 24);
                          if (v237 != v236)
                          {
                            do
                            {
                              uint64_t v243 = v242 - 3;
                              if (!v242) {
                                uint64_t v243 = 0;
                              }
                              v243[5] = v182;
                              uint64_t v242 = (uint64_t *)v242[1];
                            }
                            while (v242 != v236);
                          }
                        }
                        else
                        {
                          unint64_t v788 = v239;
                          uint64_t v799 = (uint64_t *)(v195 + 24);
                          if (v237 != v236)
                          {
                            do
                            {
                              uint64_t v286 = (llvm::Value *)(v799 - 3);
                              if (!v799) {
                                uint64_t v286 = 0;
                              }
                              unsigned int v805 = v286;
                              int v793 = *((_DWORD *)v286 + 5) & 0x10000000;
                              if (v241 && v793)
                              {
                                uint64_t v287 = ***(void ***)v286;
                                uint64_t v288 = *(void *)(v287 + 152);
                                uint64_t v289 = *(unsigned int *)(v287 + 168);
                                if (v289)
                                {
                                  LODWORD(v290) = (v289 - 1) & ((v805 >> 4) ^ (v805 >> 9));
                                  int v291 = (llvm::Value **)(v288 + 16 * v290);
                                  unsigned int v292 = *v291;
                                  if (*v291 != v805)
                                  {
                                    int v293 = 1;
                                    do
                                    {
                                      if (v292 == (llvm::Value *)-4096) {
                                        goto LABEL_616;
                                      }
                                      int v294 = v290 + v293++;
                                      uint64_t v290 = v294 & (v289 - 1);
                                      unsigned int v292 = *(llvm::Value **)(v288 + 16 * v290);
                                    }
                                    while (v292 != v805);
                                    int v291 = (llvm::Value **)(v288 + 16 * v290);
                                  }
                                }
                                else
                                {
LABEL_616:
                                  int v291 = (llvm::Value **)(v288 + 16 * v289);
                                }
                                uint64_t v295 = *((unsigned int *)v241 + 2);
                                if (v295)
                                {
                                  uint64_t v296 = (size_t *)v291[1];
                                  uint64_t v790 = *((unsigned int *)v241 + 5);
                                  uint64_t v796 = (unsigned __int8 *)v296 + v790;
                                  size_t v818 = *v296;
                                  if (*v296)
                                  {
                                    int v834 = 0;
                                    size_t v297 = *v296;
                                    unsigned int v298 = v796;
                                    do
                                    {
                                      int v299 = *v298++;
                                      int v834 = 33 * v834 + v299;
                                      --v297;
                                    }
                                    while (v297);
                                  }
                                  else
                                  {
                                    int v834 = 0;
                                  }
                                  unsigned int v809 = v295 - 1;
                                  uint64_t v813 = *(void *)v241;
                                  size_t __nb = *(void *)v241 + 8 * v295 + 8;
                                  int v822 = 1;
                                  int v300 = v834;
                                  while (1)
                                  {
                                    uint64_t v828 = v300 & v809;
                                    BOOL v301 = *(void **)(v813 + 8 * v828);
                                    if (v301 != (void *)-8)
                                    {
                                      if (!v301) {
                                        goto LABEL_630;
                                      }
                                      if (*(_DWORD *)(__nb + 4 * v828) == v834
                                        && v818 == *v301
                                        && (!v818 || !memcmp(v796, (char *)v301 + v790, v818)))
                                      {
                                        break;
                                      }
                                    }
                                    int v300 = v822 + v828;
                                    ++v822;
                                  }
                                  *(void *)(v813 + 8 * (int)v828) = -8;
                                  *(int32x2_t *)((char *)v241 + 12) = vadd_s32(*(int32x2_t *)((char *)v241 + 12), (int32x2_t)0x1FFFFFFFFLL);
                                }
                              }
LABEL_630:
                              *((void *)v805 + 5) = v182;
                              if (v788 && v793) {
                                llvm::ValueSymbolTable::reinsertValue(v788, v805);
                              }
                              uint64_t v799 = (uint64_t *)v799[1];
                              int v235 = (uint64_t *)((char *)v847 + 24);
                            }
                            while (v799 != v236);
                          }
                        }
                      }
                      if (v236 != v237)
                      {
                        uint64_t v244 = *v236;
                        uint64_t v245 = *v237;
                        *(void *)(v245 + 8) = v236;
                        *uint64_t v236 = v245;
                        uint64_t v246 = *v235;
                        *(void *)(v244 + 8) = v235;
                        *BOOL v237 = v246;
                        *(void *)(v246 + 8) = v237;
                        *int v235 = v244;
                      }
                    }
                  }
                  if (*(void *)(v197 + 8)) {
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v197, (llvm::Value *)v195, (llvm::Value *)1);
                  }
                  llvm::Instruction::andIRFlags(v195, v197);
                  *(_OWORD *)v898 = xmmword_1CFB32E50;
                  *(_OWORD *)__base = unk_1CFB32E60;
                  *(_OWORD *)__nel = xmmword_1CFB32E70;
                  llvm::combineMetadata((llvm::Instruction *)v195, (unsigned char *)v197, (unsigned int *)v898, 12, 1);
                  llvm::Instruction::applyMergedLocation((llvm::Instruction *)v195, *(const llvm::DILocation **)(v195 + 48), *(const llvm::DILocation **)(v197 + 48));
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                BOOL v212 = (uint64_t *)((char *)v847 + 24);
                if ((llvm::Instruction *)v195 == v847) {
                  goto LABEL_479;
                }
                unint64_t v213 = *(uint64_t **)(v195 + 32);
                if (v213 == __pc) {
                  goto LABEL_479;
                }
                uint64_t v214 = (uint64_t *)(v195 + 24);
                *(_WORD *)(v182 + 18) &= ~0x8000u;
                if ((llvm::BasicBlock *)v182 == v184) {
                  goto LABEL_477;
                }
                uint64_t v215 = *(void *)(v182 + 56);
                if (v215) {
                  unint64_t v216 = *(llvm::ValueSymbolTable **)(v215 + 104);
                }
                else {
                  unint64_t v216 = 0;
                }
                uint64_t v217 = *((void *)v184 + 7);
                if (v217) {
                  uint64_t v218 = *(llvm::ValueSymbolTable **)(v217 + 104);
                }
                else {
                  uint64_t v218 = 0;
                }
                if (v216 == v218)
                {
                  for (uint64_t i = v214; i != v213; uint64_t i = (uint64_t *)i[1])
                  {
                    int v220 = i - 3;
                    if (!i) {
                      int v220 = 0;
                    }
                    v220[5] = v182;
                  }
LABEL_477:
                  if (v213 != v214)
                  {
                    uint64_t v221 = *v213;
                    uint64_t v222 = *v214;
                    *(void *)(v222 + 8) = v213;
                    uint64_t *v213 = v222;
                    uint64_t v223 = *v212;
                    *(void *)(v221 + 8) = v212;
                    uint64_t *v214 = v223;
                    *(void *)(v223 + 8) = v214;
                    *BOOL v212 = v221;
                  }
LABEL_479:
                  if ((llvm::Instruction *)v197 == v847) {
                    goto LABEL_510;
                  }
                  unsigned int v224 = *(uint64_t **)(v197 + 32);
                  if (v224 == v212) {
                    goto LABEL_510;
                  }
                  int v225 = (uint64_t *)(v197 + 24);
                  *(_WORD *)(v182 + 18) &= ~0x8000u;
                  if (v182 == v189) {
                    goto LABEL_491;
                  }
                  uint64_t v226 = *(void *)(v182 + 56);
                  if (v226) {
                    uint64_t v227 = *(llvm::ValueSymbolTable **)(v226 + 104);
                  }
                  else {
                    uint64_t v227 = 0;
                  }
                  uint64_t v228 = *(void *)(v189 + 56);
                  if (v228) {
                    uint64_t v229 = *(void *)(v228 + 104);
                  }
                  else {
                    uint64_t v229 = 0;
                  }
                  if (v227 == (llvm::ValueSymbolTable *)v229)
                  {
                    for (uint64_t j = v225; j != v224; uint64_t j = (uint64_t *)j[1])
                    {
                      uint64_t v231 = j - 3;
                      if (!j) {
                        uint64_t v231 = 0;
                      }
                      v231[5] = v182;
                    }
LABEL_491:
                    if (v224 != v225)
                    {
                      uint64_t v232 = *v224;
                      uint64_t v233 = *v225;
                      *(void *)(v233 + 8) = v224;
                      *unsigned int v224 = v233;
                      uint64_t v234 = *v212;
                      *(void *)(v232 + 8) = v212;
                      *int v225 = v234;
                      *(void *)(v234 + 8) = v225;
                      *BOOL v212 = v232;
                    }
LABEL_510:
                    uint64_t v247 = *(void *)(v194 + 8);
                    if (v194) {
                      uint64_t v195 = v194 - 24;
                    }
                    else {
                      uint64_t v195 = 0;
                    }
                    uint64_t v248 = *(void *)(v196 + 8);
                    if (v196) {
                      uint64_t v197 = v196 - 24;
                    }
                    else {
                      uint64_t v197 = 0;
                    }
                    if (sub_1CBF63B28(v195)) {
                      uint64_t v249 = (llvm::Instruction *)v195;
                    }
                    else {
                      uint64_t v249 = 0;
                    }
                    if (sub_1CBF63B28(v197)) {
                      unint64_t v250 = (const llvm::Instruction *)v197;
                    }
                    else {
                      unint64_t v250 = 0;
                    }
                    if (v249 && v250 && (llvm::Instruction::isIdenticalToWhenDefined(v249, v250) & 1) != 0)
                    {
                      unint64_t v4 = 1;
                    }
                    else
                    {
                      while (sub_1CBF63B28(v195))
                      {
                        uint64_t v251 = v247 - 24;
                        BOOL v34 = v247 == 0;
                        uint64_t v247 = *(void *)(v247 + 8);
                        if (v34) {
                          uint64_t v195 = 0;
                        }
                        else {
                          uint64_t v195 = v251;
                        }
                      }
                      unint64_t v4 = 1;
                      while (sub_1CBF63B28(v197))
                      {
                        uint64_t v252 = v248 - 24;
                        BOOL v34 = v248 == 0;
                        uint64_t v248 = *(void *)(v248 + 8);
                        if (v34) {
                          uint64_t v197 = 0;
                        }
                        else {
                          uint64_t v197 = v252;
                        }
                      }
                    }
                    char v203 = 1;
                    uint64_t v196 = v248;
                    uint64_t v194 = v247;
                    uint64_t v190 = v843;
                    if (llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v195, (const llvm::Instruction *)v197))continue; {
LABEL_738:
                    }
                    *(unsigned char *)(a1 + 48) = 1;
                    if (SHIBYTE(v885) < 0) {
                      operator delete(v884[0]);
                    }
                    return 1;
                  }
                  size_t __na = (size_t)v225;
                  if (v225 == v224) {
                    goto LABEL_491;
                  }
                  while (2)
                  {
                    uint64_t v269 = (llvm::Value *)(__na - 24);
                    if (!__na) {
                      uint64_t v269 = 0;
                    }
                    uint64_t v808 = v269;
                    int v795 = *((_DWORD *)v269 + 5) & 0x10000000;
                    if (v229 && v795)
                    {
                      uint64_t v270 = ***(void ***)v269;
                      uint64_t v271 = *(void *)(v270 + 152);
                      uint64_t v272 = *(unsigned int *)(v270 + 168);
                      if (!v272) {
                        goto LABEL_584;
                      }
                      LODWORD(v273) = (v272 - 1) & ((v808 >> 4) ^ (v808 >> 9));
                      uint64_t v274 = (llvm::Value **)(v271 + 16 * v273);
                      uint64_t v275 = *v274;
                      if (*v274 != v808)
                      {
                        int v276 = 1;
                        while (v275 != (llvm::Value *)-4096)
                        {
                          int v277 = v273 + v276++;
                          uint64_t v273 = v277 & (v272 - 1);
                          uint64_t v275 = *(llvm::Value **)(v271 + 16 * v273);
                          if (v275 == v808)
                          {
                            uint64_t v274 = (llvm::Value **)(v271 + 16 * v273);
                            goto LABEL_585;
                          }
                        }
LABEL_584:
                        uint64_t v274 = (llvm::Value **)(v271 + 16 * v272);
                      }
LABEL_585:
                      uint64_t v278 = *(unsigned int *)(v229 + 8);
                      if (v278)
                      {
                        uint64_t v279 = (size_t *)v274[1];
                        v792 = (llvm::BasicBlock *)*(unsigned int *)(v229 + 20);
                        uint64_t v798 = (unsigned __int8 *)v792 + (void)v279;
                        size_t v821 = *v279;
                        int v280 = 0;
                        if (*v279)
                        {
                          size_t v281 = *v279;
                          uint64_t v282 = v798;
                          do
                          {
                            int v283 = *v282++;
                            int v280 = 33 * v280 + v283;
                            --v281;
                          }
                          while (v281);
                        }
                        unsigned int v812 = v278 - 1;
                        size_t v817 = *(void *)v229;
                        int v804 = (llvm::Value *)(*(void *)v229 + 8 * v278 + 8);
                        int v827 = 1;
                        int v284 = v280;
                        while (1)
                        {
                          size_t v833 = v284 & v812;
                          unint64_t v285 = *(void **)(v817 + 8 * v833);
                          if (v285 != (void *)-8)
                          {
                            if (!v285) {
                              goto LABEL_598;
                            }
                            if (*((_DWORD *)v804 + v833) == v280
                              && v821 == *v285
                              && (!v821 || !memcmp(v798, (char *)v792 + (void)v285, v821)))
                            {
                              break;
                            }
                          }
                          int v284 = v827 + v833;
                          ++v827;
                        }
                        *(void *)(v817 + 8 * (int)v833) = -8;
                        *(int32x2_t *)(v229 + 12) = vadd_s32(*(int32x2_t *)(v229 + 12), (int32x2_t)0x1FFFFFFFFLL);
                      }
                    }
LABEL_598:
                    *((void *)v808 + 5) = v182;
                    if (v227 && v795) {
                      llvm::ValueSymbolTable::reinsertValue(v227, v808);
                    }
                    size_t __na = *(void *)(__na + 8);
                    BOOL v212 = (uint64_t *)((char *)v847 + 24);
                    if ((uint64_t *)__na == v224) {
                      goto LABEL_491;
                    }
                    continue;
                  }
                }
                v797 = v214;
                if (v214 == v213) {
                  goto LABEL_477;
                }
                while (2)
                {
                  unint64_t v253 = (llvm::Value *)(v797 - 3);
                  if (!v797) {
                    unint64_t v253 = 0;
                  }
                  uint64_t v803 = v253;
                  int v791 = *((_DWORD *)v253 + 5) & 0x10000000;
                  if (v218 && v791)
                  {
                    uint64_t v254 = ***(void ***)v253;
                    uint64_t v255 = *(void *)(v254 + 152);
                    uint64_t v256 = *(unsigned int *)(v254 + 168);
                    if (!v256) {
                      goto LABEL_551;
                    }
                    LODWORD(v257) = (v256 - 1) & ((v803 >> 4) ^ (v803 >> 9));
                    uint64_t v258 = (llvm::Value **)(v255 + 16 * v257);
                    uint64_t v259 = *v258;
                    if (*v258 != v803)
                    {
                      int v260 = 1;
                      while (v259 != (llvm::Value *)-4096)
                      {
                        int v261 = v257 + v260++;
                        uint64_t v257 = v261 & (v256 - 1);
                        uint64_t v259 = *(llvm::Value **)(v255 + 16 * v257);
                        if (v259 == v803)
                        {
                          uint64_t v258 = (llvm::Value **)(v255 + 16 * v257);
                          goto LABEL_552;
                        }
                      }
LABEL_551:
                      uint64_t v258 = (llvm::Value **)(v255 + 16 * v256);
                    }
LABEL_552:
                    uint64_t v262 = *((unsigned int *)v218 + 2);
                    if (v262)
                    {
                      uint64_t v263 = (size_t *)v258[1];
                      uint64_t v789 = *((unsigned int *)v218 + 5);
                      uint64_t v794 = (unsigned __int8 *)v263 + v789;
                      size_t v816 = *v263;
                      if (*v263)
                      {
                        int v832 = 0;
                        size_t v264 = *v263;
                        unint64_t v265 = v794;
                        do
                        {
                          int v266 = *v265++;
                          int v832 = 33 * v832 + v266;
                          --v264;
                        }
                        while (v264);
                      }
                      else
                      {
                        int v832 = 0;
                      }
                      unsigned int v807 = v262 - 1;
                      uint64_t v811 = *(void *)v218;
                      size_t __n = *(void *)v218 + 8 * v262 + 8;
                      int v820 = 1;
                      int v267 = v832;
                      while (1)
                      {
                        uint64_t v826 = v267 & v807;
                        uint8x8_t v268 = *(void **)(v811 + 8 * v826);
                        if (v268 != (void *)-8)
                        {
                          if (!v268) {
                            goto LABEL_565;
                          }
                          if (*(_DWORD *)(__n + 4 * v826) == v832
                            && v816 == *v268
                            && (!v816 || !memcmp(v794, (char *)v268 + v789, v816)))
                          {
                            break;
                          }
                        }
                        int v267 = v820 + v826;
                        ++v820;
                      }
                      *(void *)(v811 + 8 * (int)v826) = -8;
                      *(int32x2_t *)((char *)v218 + 12) = vadd_s32(*(int32x2_t *)((char *)v218 + 12), (int32x2_t)0x1FFFFFFFFLL);
                    }
                  }
LABEL_565:
                  *((void *)v803 + 5) = v182;
                  if (v216 && v791) {
                    llvm::ValueSymbolTable::reinsertValue(v216, v803);
                  }
                  v797 = (uint64_t *)v797[1];
                  BOOL v212 = (uint64_t *)((char *)v847 + 24);
                  if (v797 == v213) {
                    goto LABEL_477;
                  }
                  continue;
                }
              }
            }
          }
          goto LABEL_737;
        }
        break;
      }
      if (v204 == 33)
      {
        if (!sub_1CD230804((uint64_t)v184, v189, v195, v197)) {
          goto LABEL_737;
        }
        int v204 = *(unsigned __int8 *)(v195 + 16);
      }
      if (v204 == 39)
      {
LABEL_737:
        if ((v203 & 1) == 0) {
          goto LABEL_740;
        }
        goto LABEL_738;
      }
      uint64_t v648 = *(void *)v840;
      if (*(llvm::BasicBlock **)v840 != v840)
      {
        LODWORD(k) = v648 - 24;
        if (v648) {
          uint64_t v649 = v648 - 24;
        }
        else {
          uint64_t v649 = 0;
        }
        uint64_t v845 = v649;
        int v650 = *(unsigned __int8 *)(v649 + 16);
        int v651 = v650 - 29;
        if (v650 != 30)
        {
          uint64_t v311 = 2;
          switch(v651)
          {
            case 1:
              goto LABEL_1733;
            case 2:
              LODWORD(v311) = (*(_DWORD *)(v845 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_1628;
            case 3:
            case 9:
              LODWORD(v311) = (*(_DWORD *)(v845 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_1628;
            case 4:
              goto LABEL_1439;
            case 7:
              LODWORD(v311) = *(_WORD *)(v845 + 18) & 1;
              goto LABEL_1628;
            case 8:
              LODWORD(v311) = 1;
              goto LABEL_1439;
            case 10:
              LODWORD(v311) = *(_DWORD *)(v845 + 80) + 1;
LABEL_1628:
              if (!v311) {
                goto LABEL_1484;
              }
              goto LABEL_1439;
            default:
              goto LABEL_1484;
          }
        }
        if ((*(_DWORD *)(v845 + 20) & 0x7FFFFFF) == 3) {
          LODWORD(v311) = 2;
        }
        else {
          LODWORD(v311) = 1;
        }
LABEL_1439:
        uint64_t v652 = 0;
        LODWORD(k) = v845 - 64;
        uint64_t v830 = v311;
        size_t v838 = v845 - 32;
        do
        {
          int v653 = *(unsigned __int8 *)(v845 + 16);
          if (v653 == 30)
          {
            uint64_t v311 = v838 - 32 * v652;
          }
          else
          {
            uint64_t v659 = (v653 - 31);
            uint64_t v311 = v845 - 32;
            switch(v659)
            {
              case 1:
              case 7:
                int v663 = *(_DWORD *)(v845 + 20);
                if ((v663 & 0x40000000) != 0) {
                  uint64_t v664 = *(void *)(v845 - 8);
                }
                else {
                  uint64_t v664 = v845 - 32 * (v663 & 0x7FFFFFF);
                }
                uint64_t v662 = v664 + 32 * v652;
                goto LABEL_1465;
              case 2:
                uint64_t v665 = -64;
                if (!v652) {
                  uint64_t v665 = -96;
                }
                uint64_t v311 = v845 + v665;
                break;
              case 3:
              case 4:
                goto LABEL_1733;
              case 5:
                if ((*(_WORD *)(v845 + 18) & 1) == 0)
                {
                  uint64_t v654 = 0;
                  goto LABEL_1444;
                }
                uint64_t v666 = *(_DWORD *)(v845 + 20) & 0x7FFFFFF;
                uint64_t v667 = v845 + 32;
                goto LABEL_1480;
              case 6:
                break;
              case 8:
                if (v652)
                {
                  uint64_t v311 = v838 - 32 * *(unsigned int *)(v845 + 80) + 32 * v652 - 32;
                }
                else
                {
                  uint64_t v666 = *(unsigned int *)(v845 + 80);
                  uint64_t v667 = v845 - 64;
LABEL_1480:
                  uint64_t v311 = v667 - 32 * v666;
                }
                break;
              default:
                int v660 = *(_DWORD *)(v845 + 20);
                if ((v660 & 0x40000000) != 0) {
                  uint64_t v661 = *(void *)(v845 - 8);
                }
                else {
                  uint64_t v661 = v845 - 32 * (v660 & 0x7FFFFFF);
                }
                uint64_t v662 = v661 + 32 * (2 * v652);
LABEL_1465:
                uint64_t v311 = v662 + 32;
                break;
            }
          }
          uint64_t v654 = *(void *)v311;
LABEL_1444:
          LODWORD(k) = v654 + 40;
          if (*(void *)(v654 + 40) != v654 + 40)
          {
            for (uint64_t k = *(void *)(v654 + 48); ; uint64_t k = *(void *)(v4 + 32))
            {
              unint64_t v4 = k - 24;
              uint64_t v655 = k ? k - 24 : 0;
              if (!k || *(unsigned char *)(v655 + 16) != 83) {
                break;
              }
              uint64_t v656 = sub_1CBF73380(k - 24, (uint64_t)v184);
              uint64_t v657 = sub_1CBF73380(v4, v189);
              if (v656 != v657)
              {
                uint64_t v658 = v657;
                if ((sub_1CD220C58(v656, v4) & 1) != 0
                  || (sub_1CD220C58(v658, v4) & 1) != 0
                  || *(unsigned char *)(v656 + 16) == 5
                  && !llvm::isSafeToSpeculativelyExecute(v656, 0, 0, 0))
                {
                  goto LABEL_737;
                }
                if (*(unsigned char *)(v658 + 16) == 5
                  && !llvm::isSafeToSpeculativelyExecute(v658, 0, 0, 0))
                {
                  goto LABEL_737;
                }
              }
            }
          }
          ++v652;
        }
        while (v652 != v830);
      }
LABEL_1484:
      unint64_t v4 = (unint64_t)llvm::Instruction::clone((llvm::Instruction *)v195);
      *(void *)(v4 + 40) = v182;
      *(_WORD *)(v182 + 18) &= ~0x8000u;
      if ((*(unsigned char *)(v4 + 23) & 0x10) != 0)
      {
        uint64_t v766 = *(void *)(v182 + 56);
        if (v766)
        {
          __int16 v767 = *(llvm::ValueSymbolTable **)(v766 + 104);
          if (v767) {
            llvm::ValueSymbolTable::reinsertValue(v767, (llvm::Value *)v4);
          }
        }
      }
      uint64_t v668 = *__pc;
      *(void *)(v4 + 24) = *__pc;
      *(void *)(v4 + 32) = __pc;
      *(void *)(v668 + 8) = v4 + 24;
      uint64_t *__pc = v4 + 24;
      if (*(unsigned char *)(*(void *)v4 + 8) != 7)
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v195, (llvm::Value *)v4, (llvm::Value *)1);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v197, (llvm::Value *)v4, (llvm::Value *)1);
        llvm::Value::takeName((int32x2_t ****)v4, (llvm::Value *)v195);
      }
      llvm::Instruction::applyMergedLocation((llvm::Instruction *)v4, *(const llvm::DILocation **)(v195 + 48), *(const llvm::DILocation **)(v197 + 48));
      sub_1CC8A8E38((uint64_t)v898, (uint64_t **)v4, 0, 0, 0);
      uint64_t v870 = 0;
      __s1[1] = 0;
      __s1[0] = &__s1[1];
      uint64_t v311 = *(void *)v840;
      if (*(llvm::BasicBlock **)v840 == v840)
      {
        v861[0] = &v862;
        v861[1] = (void *)0x400000000;
LABEL_1639:
        if (!v847 || !*(void *)(a1 + 8)) {
LABEL_1678:
        }
          sub_1CD2300A0((uint64_t)v847);
        LODWORD(k) = *((unsigned __int8 *)v847 + 16);
        if (k != 30)
        {
          uint64_t v311 = 2;
          switch(*((unsigned char *)v847 + 16))
          {
            case 0x1E:
              goto LABEL_1733;
            case 0x1F:
              LODWORD(v311) = (*((_DWORD *)v847 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_1684;
            case 0x20:
            case 0x26:
              LODWORD(v311) = (*((_DWORD *)v847 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_1684;
            case 0x21:
              goto LABEL_1646;
            case 0x24:
              LODWORD(v311) = *((_WORD *)v847 + 9) & 1;
              goto LABEL_1684;
            case 0x25:
              LODWORD(v311) = 1;
              goto LABEL_1646;
            case 0x27:
              LODWORD(v311) = *((_DWORD *)v847 + 20) + 1;
LABEL_1684:
              if (!v311) {
                goto LABEL_1678;
              }
              goto LABEL_1646;
            default:
              goto LABEL_1678;
          }
        }
        if ((*((_DWORD *)v847 + 5) & 0x7FFFFFF) == 3) {
          LODWORD(v311) = 2;
        }
        else {
          LODWORD(v311) = 1;
        }
LABEL_1646:
        uint64_t v184 = 0;
        uint64_t v754 = 0;
        LODWORD(k) = v847;
        v755 = (char *)v847 - 64;
        unint64_t v4 = -64;
        uint64_t v756 = v311;
        while (1)
        {
          int v757 = *((unsigned __int8 *)v847 + 16);
          if (v757 == 30)
          {
            uint64_t v311 = (uint64_t)&v785[-4 * v754];
          }
          else
          {
            uint64_t v760 = (v757 - 31);
            uint64_t v311 = (uint64_t)v785;
            switch(v760)
            {
              case 1:
              case 7:
                int v763 = *((_DWORD *)v847 + 5);
                if ((v763 & 0x40000000) != 0) {
                  v764 = (char *)*((void *)v847 - 1);
                }
                else {
                  v764 = (char *)v847 - 32 * (v763 & 0x7FFFFFF);
                }
                uint64_t v311 = (uint64_t)&v764[32 * (v754 + 1)];
                break;
              case 2:
                if (v754) {
                  uint64_t v765 = -64;
                }
                else {
                  uint64_t v765 = -96;
                }
                uint64_t v311 = (uint64_t)v847 + v765;
                break;
              case 3:
              case 4:
                goto LABEL_1733;
              case 5:
                if ((*((_WORD *)v847 + 9) & 1) == 0)
                {
                  uint64_t v758 = 0;
                  goto LABEL_1651;
                }
                uint64_t v311 = (uint64_t)v847 - 32 * (*((_DWORD *)v847 + 5) & 0x7FFFFFF) + 32;
                break;
              case 6:
                break;
              case 8:
                if (v754) {
                  uint64_t v311 = (uint64_t)&v755[-32 * *((unsigned int *)v847 + 20)];
                }
                else {
                  uint64_t v311 = (uint64_t)&v783[-4 * *((unsigned int *)v847 + 20)];
                }
                break;
              default:
                int v761 = *((_DWORD *)v847 + 5);
                if ((v761 & 0x40000000) != 0) {
                  char v762 = (char *)*((void *)v847 - 1);
                }
                else {
                  char v762 = (char *)v847 - 32 * (v761 & 0x7FFFFFF);
                }
                uint64_t v311 = (uint64_t)&v762[32 * (v184 & 0xFFFFFFFE) + 32];
                break;
            }
          }
          uint64_t v758 = *(void *)v311;
LABEL_1651:
          if (LODWORD(v861[1]) >= (unint64_t)HIDWORD(v861[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          LODWORD(k) = v758 | 4;
          v759 = (uint64_t *)((char *)v861[0] + 16 * LODWORD(v861[1]));
          uint64_t *v759 = v182;
          v759[1] = v758 | 4;
          ++LODWORD(v861[1]);
          ++v754;
          uint64_t v184 = (llvm::BasicBlock *)((char *)v184 + 2);
          v755 += 32;
          if (v756 == v754) {
            goto LABEL_1678;
          }
        }
      }
      size_t v669 = v311 - 24;
      if (!v311) {
        size_t v669 = 0;
      }
      size_t v824 = v669;
      int v670 = *(unsigned __int8 *)(v669 + 16);
      int v671 = v670 - 29;
      if (v670 != 30)
      {
        LODWORD(k) = 2;
        switch(v671)
        {
          case 1:
            goto LABEL_1733;
          case 2:
            LODWORD(k) = (*(_DWORD *)(v824 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_1636;
          case 3:
          case 9:
            LODWORD(k) = (*(_DWORD *)(v824 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_1636;
          case 4:
            goto LABEL_1495;
          case 7:
            LODWORD(k) = *(_WORD *)(v824 + 18) & 1;
            goto LABEL_1636;
          case 8:
            LODWORD(k) = 1;
            goto LABEL_1495;
          case 10:
            LODWORD(k) = *(_DWORD *)(v824 + 80) + 1;
LABEL_1636:
            if (!k) {
              goto LABEL_1589;
            }
            goto LABEL_1495;
          default:
            goto LABEL_1589;
        }
      }
      if ((*(_DWORD *)(v824 + 20) & 0x7FFFFFF) == 3) {
        LODWORD(k) = 2;
      }
      else {
        LODWORD(k) = 1;
      }
LABEL_1495:
      uint64_t v831 = 0;
      uint64_t v815 = k;
      while (2)
      {
        int v672 = *(unsigned __int8 *)(v824 + 16);
        if (v672 == 30)
        {
          uint64_t v673 = v831;
          size_t v674 = v824 - 32;
        }
        else
        {
          uint64_t v733 = (v672 - 31);
          uint64_t v311 = v824 - 32;
          switch(v733)
          {
            case 1:
            case 7:
              int v736 = *(_DWORD *)(v824 + 20);
              if ((v736 & 0x40000000) != 0) {
                size_t v737 = *(void *)(v824 - 8);
              }
              else {
                size_t v737 = v824 - 32 * (v736 & 0x7FFFFFF);
              }
              uint64_t v311 = v737 + 32 * (v831 + 1);
              goto LABEL_1500;
            case 2:
              uint64_t v738 = -64;
              if (!v831) {
                uint64_t v738 = -96;
              }
              uint64_t v311 = v824 + v738;
              goto LABEL_1500;
            case 3:
            case 4:
              goto LABEL_1733;
            case 5:
              if ((*(_WORD *)(v824 + 18) & 1) == 0)
              {
                uint64_t v675 = 0;
LABEL_1501:
                if (*(void *)(v675 + 40) != v675 + 40)
                {
                  for (uint64_t m = *(void *)(v675 + 48); ; uint64_t m = *(void *)(v677 + 32))
                  {
                    uint64_t v677 = m - 24;
                    uint64_t v678 = m ? m - 24 : 0;
                    if (!m || *(unsigned char *)(v678 + 16) != 83) {
                      break;
                    }
                    unint64_t v4 = sub_1CBF73380(m - 24, (uint64_t)v184);
                    unint64_t v679 = sub_1CBF73380(v677, v189);
                    if (v4 != v679)
                    {
                      unsigned int v680 = (llvm::Value *)v679;
                      unsigned int v681 = (void **)__s1[1];
                      uint64_t v682 = &__s1[1];
                      v683 = &__s1[1];
                      if (__s1[1])
                      {
                        while (1)
                        {
                          v683 = v681;
                          unint64_t v684 = (unint64_t)v681[4];
                          if (v684 > v4) {
                            goto LABEL_1517;
                          }
                          if (v684 >= v4)
                          {
                            v685 = v683[5];
                            if ((unint64_t)v685 <= v679)
                            {
                              if ((unint64_t)v685 >= v679) {
                                goto LABEL_1523;
                              }
                              goto LABEL_1512;
                            }
LABEL_1517:
                            unsigned int v681 = (void **)*v683;
                            uint64_t v682 = v683;
                            if (!*v683) {
                              break;
                            }
                          }
                          else
                          {
LABEL_1512:
                            unsigned int v681 = (void **)v683[1];
                            if (!v681)
                            {
                              uint64_t v682 = v683 + 1;
                              break;
                            }
                          }
                        }
                      }
                      BOOL v686 = v683;
                      v683 = (void **)operator new(0x38uLL);
                      v683[4] = (void *)v4;
                      v683[5] = v680;
                      v683[6] = 0;
                      unsigned __int8 *v683 = 0;
                      v683[1] = 0;
                      v683[2] = v686;
                      *uint64_t v682 = v683;
                      int v687 = (uint64_t *)v683;
                      if (*(void *)__s1[0])
                      {
                        __s1[0] = *(void **)__s1[0];
                        int v687 = (uint64_t *)*v682;
                      }
                      sub_1CB8358B8((uint64_t *)__s1[1], v687);
                      uint64_t v870 = (void (**)(void))((char *)v870 + 1);
LABEL_1523:
                      if (!v683[6])
                      {
                        int v688 = v903;
                        int8x8_t v689 = v902;
                        char v690 = v904;
                        char __pd = v905;
                        char v846 = v906;
                        if (sub_1CB845E74(v677))
                        {
                          int v691 = *(unsigned __int8 *)(v677 + 17) >> 1;
                          if (v691 == 127) {
                            int v691 = -1;
                          }
                          int v903 = v691;
                        }
                        unsigned int v692 = (llvm::Value *)*v784;
                        if ((*(unsigned char *)(v4 + 23) & 0x10) != 0)
                        {
                          uint64_t v693 = ***(void ***)v4;
                          uint64_t v694 = *(void *)(v693 + 152);
                          uint64_t v695 = *(unsigned int *)(v693 + 168);
                          if (v695)
                          {
                            LODWORD(v696) = (v695 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                            unsigned int v697 = (uint64_t *)(v694 + 16 * v696);
                            uint64_t v698 = *v697;
                            if (*v697 != v4)
                            {
                              int v699 = 1;
                              do
                              {
                                if (v698 == -4096) {
                                  goto LABEL_1535;
                                }
                                int v700 = v696 + v699++;
                                uint64_t v696 = v700 & (v695 - 1);
                                uint64_t v698 = *(void *)(v694 + 16 * v696);
                              }
                              while (v698 != v4);
                              unsigned int v697 = (uint64_t *)(v694 + 16 * v696);
                            }
                          }
                          else
                          {
LABEL_1535:
                            unsigned int v697 = (uint64_t *)(v694 + 16 * v695);
                          }
                          v701 = (void *)v697[1];
                          v704 = (void *)*v701;
                          unsigned int v703 = (char *)(v701 + 2);
                          uint64_t v702 = v704;
                        }
                        else
                        {
                          uint64_t v702 = 0;
                          unsigned int v703 = &byte_1CFBCE98E;
                        }
                        LOWORD(v879) = 773;
                        __src[0] = v703;
                        __src[1] = v702;
                        __s2 = ".";
                        if ((*((unsigned char *)v680 + 23) & 0x10) != 0)
                        {
                          uint64_t v705 = ***(void ***)v680;
                          uint64_t v706 = *(void *)(v705 + 152);
                          uint64_t v707 = *(unsigned int *)(v705 + 168);
                          if (v707)
                          {
                            LODWORD(v708) = (v707 - 1) & ((v680 >> 4) ^ (v680 >> 9));
                            uint64_t v709 = (llvm::Value **)(v706 + 16 * v708);
                            unint64_t v710 = *v709;
                            if (*v709 != v680)
                            {
                              int v711 = 1;
                              do
                              {
                                if (v710 == (llvm::Value *)-4096) {
                                  goto LABEL_1544;
                                }
                                int v712 = v708 + v711++;
                                uint64_t v708 = v712 & (v707 - 1);
                                unint64_t v710 = *(llvm::Value **)(v706 + 16 * v708);
                              }
                              while (v710 != v680);
                              uint64_t v709 = (llvm::Value **)(v706 + 16 * v708);
                            }
                          }
                          else
                          {
LABEL_1544:
                            uint64_t v709 = (llvm::Value **)(v706 + 16 * v707);
                          }
                          unint64_t v713 = v709[1];
                          uint64_t v716 = *(void *)v713;
                          int v715 = (char *)v713 + 16;
                          uint64_t v714 = v716;
                        }
                        else
                        {
                          uint64_t v714 = 0;
                          int v715 = &byte_1CFBCE98E;
                        }
                        v861[0] = __src;
                        uint64_t v862 = (uint64_t)v715;
                        uint64_t v863 = v714;
                        LOWORD(v864) = 1282;
                        v683[6] = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v898, v692, (llvm::Value *)v4, v680, (const llvm::Twine *)v861, (uint64_t ***)v847);
                        int v903 = v688;
                        unint64_t v902 = v689;
                        char v904 = v690;
                        char v905 = __pd;
                        char v906 = v846;
                      }
                      int v717 = *(_DWORD *)(v677 + 20);
                      uint64_t v718 = v717 & 0x7FFFFFF;
                      if ((v717 & 0x7FFFFFF) != 0)
                      {
                        uint64_t v719 = 0;
                        uint64_t v720 = 0;
                        uint64_t v721 = 8 * v718;
                        do
                        {
                          int v722 = *(_DWORD *)(v677 + 20);
                          if ((v722 & 0x40000000) != 0) {
                            uint64_t v723 = *(void *)(v677 - 8);
                          }
                          else {
                            uint64_t v723 = v677 - 32 * (v722 & 0x7FFFFFF);
                          }
                          uint64_t v724 = *(llvm::BasicBlock **)(v723 + 32 * *(unsigned int *)(v677 + 60) + v720);
                          if (v724 == v184 || v724 == (llvm::BasicBlock *)v189)
                          {
                            int64_t v726 = v683[6];
                            uint64_t v727 = v723 + v719;
                            if (*(void *)(v723 + v719))
                            {
                              **(void **)(v727 + 16) = *(void *)(v727 + 8);
                              uint64_t v732 = *(void *)(v727 + 8);
                              if (v732) {
                                *(void *)(v732 + 16) = *(void *)(v727 + 16);
                              }
                            }
                            *(void *)uint64_t v727 = v726;
                            if (v726)
                            {
                              uint64_t v730 = v726[1];
                              int v728 = v726 + 1;
                              uint64_t v729 = v730;
                              uint64_t v731 = v723 + v719;
                              *(void *)(v731 + 8) = v730;
                              if (v730) {
                                *(void *)(v729 + 16) = v731 + 8;
                              }
                              *(void *)(v731 + 16) = v728;
                              *int v728 = v727;
                            }
                          }
                          v720 += 8;
                          v719 += 32;
                        }
                        while (v721 != v720);
                      }
                    }
                  }
                }
                ++v831;
                LODWORD(k) = v815;
                if (v831 != v815) {
                  continue;
                }
                uint64_t v311 = *(void *)v840;
LABEL_1589:
                v861[0] = &v862;
                v861[1] = (void *)0x400000000;
                if ((llvm::BasicBlock *)v311 != v840)
                {
                  LODWORD(k) = v311 - 24;
                  if (v311) {
                    uint64_t v739 = v311 - 24;
                  }
                  else {
                    uint64_t v739 = 0;
                  }
                  int v740 = *(unsigned __int8 *)(v739 + 16);
                  int v741 = v740 - 29;
                  if (v740 != 30)
                  {
                    uint64_t v311 = 2;
                    switch(v741)
                    {
                      case 1:
                        goto LABEL_1733;
                      case 2:
                        LODWORD(v311) = (*(_DWORD *)(v739 + 20) >> 1) & 0x3FFFFFF;
                        goto LABEL_1680;
                      case 3:
                      case 9:
                        LODWORD(v311) = (*(_DWORD *)(v739 + 20) & 0x7FFFFFF) - 1;
                        goto LABEL_1680;
                      case 4:
                        goto LABEL_1598;
                      case 7:
                        LODWORD(v311) = *(_WORD *)(v739 + 18) & 1;
                        goto LABEL_1680;
                      case 8:
                        LODWORD(v311) = 1;
                        goto LABEL_1598;
                      case 10:
                        LODWORD(v311) = *(_DWORD *)(v739 + 80) + 1;
LABEL_1680:
                        if (!v311) {
                          goto LABEL_1639;
                        }
                        goto LABEL_1598;
                      default:
                        goto LABEL_1639;
                    }
                  }
                  if ((*(_DWORD *)(v739 + 20) & 0x7FFFFFF) == 3) {
                    LODWORD(v311) = 2;
                  }
                  else {
                    LODWORD(v311) = 1;
                  }
LABEL_1598:
                  unint64_t v4 = 0;
                  uint64_t v742 = 0;
                  LODWORD(k) = v739 + 32;
                  uint64_t v743 = v739 - 64;
                  uint64_t v744 = v311;
                  while (1)
                  {
                    int v745 = *(unsigned __int8 *)(v739 + 16);
                    if (v745 == 30)
                    {
                      uint64_t v311 = v739 - 32 - 32 * v742;
                    }
                    else
                    {
                      uint64_t v748 = (v745 - 31);
                      uint64_t v311 = v739 - 32;
                      switch(v748)
                      {
                        case 1:
                        case 7:
                          int v751 = *(_DWORD *)(v739 + 20);
                          if ((v751 & 0x40000000) != 0) {
                            uint64_t v752 = *(void *)(v739 - 8);
                          }
                          else {
                            uint64_t v752 = v739 - 32 * (v751 & 0x7FFFFFF);
                          }
                          uint64_t v311 = v752 + 32 * (v742 + 1);
                          break;
                        case 2:
                          uint64_t v753 = -64;
                          if (!v742) {
                            uint64_t v753 = -96;
                          }
                          uint64_t v311 = v739 + v753;
                          break;
                        case 3:
                        case 4:
                          goto LABEL_1733;
                        case 5:
                          if ((*(_WORD *)(v739 + 18) & 1) == 0)
                          {
                            uint64_t v746 = 0;
                            goto LABEL_1603;
                          }
                          uint64_t v311 = v739 + 32 - 32 * (*(_DWORD *)(v739 + 20) & 0x7FFFFFF);
                          break;
                        case 6:
                          break;
                        case 8:
                          if (v742) {
                            uint64_t v311 = v743 - 32 * *(unsigned int *)(v739 + 80);
                          }
                          else {
                            uint64_t v311 = v739 - 64 - 32 * *(unsigned int *)(v739 + 80);
                          }
                          break;
                        default:
                          int v749 = *(_DWORD *)(v739 + 20);
                          if ((v749 & 0x40000000) != 0) {
                            uint64_t v750 = *(void *)(v739 - 8);
                          }
                          else {
                            uint64_t v750 = v739 - 32 * (v749 & 0x7FFFFFF);
                          }
                          uint64_t v311 = v750 + 32 * (v4 & 0xFFFFFFFE) + 32;
                          break;
                      }
                    }
                    uint64_t v746 = *(void *)v311;
LABEL_1603:
                    sub_1CD2191C8(v746, v182, (uint64_t)v184, 0);
                    if (*(void *)(a1 + 8))
                    {
                      if (LODWORD(v861[1]) >= (unint64_t)HIDWORD(v861[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      LODWORD(k) = v746 & 0xFFFFFFFB;
                      int v747 = (uint64_t *)((char *)v861[0] + 16 * LODWORD(v861[1]));
                      *int v747 = v182;
                      v747[1] = v746 & 0xFFFFFFFFFFFFFFFBLL;
                      ++LODWORD(v861[1]);
                    }
                    ++v742;
                    v4 += 2;
                    v743 += 32;
                    if (v744 == v742) {
                      goto LABEL_1639;
                    }
                  }
                }
                goto LABEL_1639;
              }
              uint64_t v673 = *(_DWORD *)(v824 + 20) & 0x7FFFFFF;
              size_t v674 = v824 + 32;
              goto LABEL_1499;
            case 6:
              goto LABEL_1500;
            case 8:
              if (v831)
              {
                uint64_t v311 = v824 - 32 - 32 * *(unsigned int *)(v824 + 80) + 32 * v831 - 32;
                goto LABEL_1500;
              }
              uint64_t v673 = *(unsigned int *)(v824 + 80);
              size_t v674 = v824 - 64;
              break;
            default:
              int v734 = *(_DWORD *)(v824 + 20);
              if ((v734 & 0x40000000) != 0) {
                size_t v735 = *(void *)(v824 - 8);
              }
              else {
                size_t v735 = v824 - 32 * (v734 & 0x7FFFFFF);
              }
              uint64_t v311 = v735 + 32 * (2 * v831) + 32;
              goto LABEL_1500;
          }
        }
        break;
      }
LABEL_1499:
      uint64_t v311 = v674 - 32 * v673;
LABEL_1500:
      uint64_t v675 = *(void *)v311;
      goto LABEL_1501;
    }
    uint64_t v312 = *(void *)(v182 + 40);
    if (v312 == v182 + 40)
    {
      uint64_t v311 = 0;
    }
    else
    {
      if (v312) {
        uint64_t v311 = v312 - 24;
      }
      else {
        uint64_t v311 = 0;
      }
      if (*(unsigned __int8 *)(v311 + 16) - 29 >= 0xB) {
        uint64_t v311 = 0;
      }
    }
    LODWORD(k) = *(unsigned __int8 *)(v311 + 16);
    if (k == 30)
    {
      if ((*(_DWORD *)(v311 + 20) & 0x7FFFFFF) == 3) {
        goto LABEL_743;
      }
LABEL_686:
      unsigned int v323 = (llvm::BasicBlock **)(v311 - 32);
    }
    else
    {
      switch(*(unsigned char *)(v311 + 16))
      {
        case 0x1E:
          goto LABEL_1733;
        case 0x1F:
          int v331 = (*(_DWORD *)(v311 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_708;
        case 0x20:
        case 0x26:
          int v331 = (*(_DWORD *)(v311 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_708;
        case 0x24:
          int v331 = *(_WORD *)(v311 + 18) & 1;
          goto LABEL_708;
        case 0x25:
          goto LABEL_686;
        case 0x27:
          int v331 = *(_DWORD *)(v311 + 80) + 1;
LABEL_708:
          if (v331 != 1) {
            goto LABEL_743;
          }
          if (k != 31)
          {
            unint64_t v4 = (unint64_t)v847;
            switch(*(unsigned char *)(v311 + 16))
            {
              case '!':
                unsigned int v323 = (llvm::BasicBlock **)(v311 - 96);
                goto LABEL_687;
              case '""':
              case '#':
                goto LABEL_1733;
              case '$':
                if ((*(_WORD *)(v311 + 18) & 1) == 0)
                {
                  unsigned int v324 = 0;
                  unint64_t v4 = (unint64_t)v847;
                  goto LABEL_688;
                }
                int v781 = *(_DWORD *)(v311 + 20);
LABEL_1747:
                uint64_t v782 = v311 - 32 * (v781 & 0x7FFFFFF);
LABEL_1748:
                unsigned int v323 = (llvm::BasicBlock **)(v782 + 32);
                unint64_t v4 = (unint64_t)v847;
                break;
              case '%':
                goto LABEL_686;
              case '\'':
                unsigned int v323 = (llvm::BasicBlock **)(v311 - 32 * *(unsigned int *)(v311 + 80) - 64);
                goto LABEL_687;
              default:
                int v781 = *(_DWORD *)(v311 + 20);
                if ((v781 & 0x40000000) == 0) {
                  goto LABEL_1747;
                }
                uint64_t v782 = *(void *)(v311 - 8);
                goto LABEL_1748;
            }
            goto LABEL_687;
          }
          LODWORD(k) = *(_DWORD *)(v311 + 20);
          if ((k & 0x40000000) == 0) {
            goto LABEL_1734;
          }
          uint64_t v332 = *(void *)(v311 - 8);
          break;
        default:
          goto LABEL_743;
      }
LABEL_712:
      unsigned int v323 = (llvm::BasicBlock **)(v332 + 32);
    }
LABEL_687:
    unsigned int v324 = *v323;
LABEL_688:
    if (v324 == v184)
    {
      unsigned int v320 = *(void **)a1;
      uint64_t v321 = (uint64_t ***)v4;
      uint64_t v322 = v182;
LABEL_690:
      if (sub_1CD22C3F0(v321, v322, v320)) {
        goto LABEL_1037;
      }
    }
  }
  else if (v185)
  {
    unint64_t v310 = (void *)*((void *)v184 + 5);
    if (v310 == (void *)((char *)v184 + 40))
    {
      uint64_t v311 = 0;
    }
    else
    {
      if (v310) {
        uint64_t v311 = (uint64_t)(v310 - 3);
      }
      else {
        uint64_t v311 = 0;
      }
      if (*(unsigned __int8 *)(v311 + 16) - 29 >= 0xB) {
        uint64_t v311 = 0;
      }
    }
    LODWORD(k) = *(unsigned __int8 *)(v311 + 16);
    if (k == 30)
    {
      if ((*(_DWORD *)(v311 + 20) & 0x7FFFFFF) == 3) {
        goto LABEL_743;
      }
LABEL_679:
      __int32 v318 = (uint64_t *)(v311 - 32);
    }
    else
    {
      switch(*(unsigned char *)(v311 + 16))
      {
        case 0x1E:
LABEL_1733:
          __break(1u);
LABEL_1734:
          uint64_t v332 = v311 - 32 * (k & 0x7FFFFFF);
          goto LABEL_712;
        case 0x1F:
          int v328 = (*(_DWORD *)(v311 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_701;
        case 0x20:
        case 0x26:
          int v328 = (*(_DWORD *)(v311 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_701;
        case 0x24:
          int v328 = *(_WORD *)(v311 + 18) & 1;
          goto LABEL_701;
        case 0x25:
          goto LABEL_679;
        case 0x27:
          int v328 = *(_DWORD *)(v311 + 80) + 1;
LABEL_701:
          if (v328 != 1) {
            goto LABEL_743;
          }
          if (k == 31)
          {
            int v329 = *(_DWORD *)(v311 + 20);
            if ((v329 & 0x40000000) != 0) {
              uint64_t v330 = *(void *)(v311 - 8);
            }
            else {
              uint64_t v330 = v311 - 32 * (v329 & 0x7FFFFFF);
            }
            __int32 v318 = (uint64_t *)(v330 + 32);
          }
          else
          {
            unint64_t v4 = (unint64_t)v847;
            switch(*(unsigned char *)(v311 + 16))
            {
              case '!':
                __int32 v318 = (uint64_t *)(v311 - 96);
                goto LABEL_680;
              case '""':
              case '#':
                goto LABEL_1733;
              case '$':
                if ((*(_WORD *)(v311 + 18) & 1) == 0)
                {
                  uint64_t v319 = 0;
                  unint64_t v4 = (unint64_t)v847;
                  goto LABEL_681;
                }
                int v779 = *(_DWORD *)(v311 + 20);
LABEL_1744:
                uint64_t v780 = v311 - 32 * (v779 & 0x7FFFFFF);
LABEL_1745:
                __int32 v318 = (uint64_t *)(v780 + 32);
                unint64_t v4 = (unint64_t)v847;
                break;
              case '%':
                goto LABEL_679;
              case '\'':
                __int32 v318 = (uint64_t *)(v311 - 32 * *(unsigned int *)(v311 + 80) - 64);
                goto LABEL_680;
              default:
                int v779 = *(_DWORD *)(v311 + 20);
                if ((v779 & 0x40000000) == 0) {
                  goto LABEL_1744;
                }
                uint64_t v780 = *(void *)(v311 - 8);
                goto LABEL_1745;
            }
          }
          break;
        default:
          goto LABEL_743;
      }
    }
LABEL_680:
    uint64_t v319 = *v318;
LABEL_681:
    if (v319 == v182)
    {
      unsigned int v320 = *(void **)a1;
      uint64_t v321 = (uint64_t ***)v4;
      uint64_t v322 = (uint64_t)v184;
      goto LABEL_690;
    }
  }
LABEL_743:
  uint64_t __p = (llvm::BasicBlock *)v912;
  v861[0] = (void *)1;
  for (uint64_t n = 1; n != 17; n += 2)
    v861[n] = (void *)-4096;
  uint64_t v866 = v868;
  uint64_t v867 = 0x800000000;
  uint64_t v341 = *(llvm **)(v4 + 40);
  uint64_t v342 = *(void *)(v4 - 96);
  unsigned int v343 = *(unsigned __int8 *)(v342 + 16);
  if (!v342 || v343 != 83 || *(llvm **)(v342 + 40) != v341)
  {
    uint64_t v344 = *((void *)v341 + 1);
    if (v344)
    {
      while (1)
      {
        uint64_t v345 = *(void *)(v344 + 24);
        unsigned int v346 = *(unsigned __int8 *)(v345 + 16);
        BOOL v347 = v345 && v346 >= 0x1C;
        if (v347 && v346 - 29 < 0xB) {
          break;
        }
        uint64_t v344 = *(void *)(v344 + 8);
        if (!v344) {
          goto LABEL_758;
        }
      }
      while (1)
      {
        BOOL v349 = *(void **)(v345 + 40);
        if (!v342 || v343 < 0x1C || *(llvm **)(v342 + 40) != v341)
        {
          int v350 = (void *)v349[5];
          if (v350 != v349 + 5)
          {
            int v351 = (uint64_t ***)(v350 - 3);
            if (!v350) {
              int v351 = 0;
            }
            unsigned int v352 = *((unsigned __int8 *)v351 + 16) - 40;
            if (v352 < 0xFFFFFFF5) {
              int v351 = 0;
            }
            if (v350)
            {
              if (*((unsigned char *)v351 + 16) == 30
                && v352 >= 0xFFFFFFF5
                && (*((_DWORD *)v351 + 5) & 0x7FFFFFF) == 3
                && *(v351 - 12) == (uint64_t **)v342)
              {
                uint64_t v354 = (llvm *)*(v351 - 4);
                if (v354 != (llvm *)*(v351 - 8)) {
                  break;
                }
              }
            }
          }
        }
        do
        {
LABEL_790:
          uint64_t v344 = *(void *)(v344 + 8);
          if (!v344) {
            goto LABEL_758;
          }
          uint64_t v345 = *(void *)(v344 + 24);
          unsigned int v359 = *(unsigned __int8 *)(v345 + 16);
          if (v345) {
            BOOL v360 = v359 >= 0x1C;
          }
          else {
            BOOL v360 = 0;
          }
          BOOL v361 = !v360 || v359 - 29 > 0xA;
        }
        while (v361);
        unsigned int v343 = *(unsigned __int8 *)(v342 + 16);
      }
      uint64_t v355 = ***v351;
      if (v354 == v341)
      {
        int v356 = *(void **)(v355 + 1560);
        if (v356) {
          goto LABEL_789;
        }
        uint64_t v362 = *(llvm::ConstantInt **)(v355 + 1888);
        unsigned int v363 = *(_DWORD *)(v355 + 1896);
        LODWORD(v898[1]) = v363 >> 8;
        if (v363 >> 8 > 0x40) {
          operator new[]();
        }
        if (v363 <= 0xFF) {
          char v364 = 0;
        }
        else {
          char v364 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v363) + 63);
        }
        v898[0] = (void *)(v364 & 1);
        int v356 = llvm::ConstantInt::get(v362, (llvm::LLVMContext *)v898, v186);
        if (LODWORD(v898[1]) >= 0x41 && v898[0]) {
          MEMORY[0x1D25D9CB0](v898[0], 0x1000C8000313F17);
        }
        *(void *)(v355 + 1560) = v356;
      }
      else
      {
        int v356 = *(void **)(v355 + 1568);
        if (v356) {
          goto LABEL_789;
        }
        uint64_t v357 = *(llvm::ConstantInt **)(v355 + 1888);
        unsigned int v358 = *(_DWORD *)(v355 + 1896);
        LODWORD(v898[1]) = v358 >> 8;
        if (v358 >> 8 > 0x40) {
          operator new[]();
        }
        v898[0] = 0;
        int v356 = llvm::ConstantInt::get(v357, (llvm::LLVMContext *)v898, v186);
        if (LODWORD(v898[1]) >= 0x41 && v898[0]) {
          MEMORY[0x1D25D9CB0](v898[0], 0x1000C8000313F17);
        }
        *(void *)(v355 + 1568) = v356;
      }
      if (!v356) {
        goto LABEL_790;
      }
LABEL_789:
      v898[0] = v349;
      v898[1] = v356;
      sub_1CD23157C(v861, (uint64_t *)v898, (uint64_t *)&v898[1]);
      goto LABEL_790;
    }
    goto LABEL_758;
  }
  int v366 = *(_DWORD *)(v342 + 20);
  uint64_t v367 = v366 & 0x7FFFFFF;
  if ((v366 & 0x7FFFFFF) == 1)
  {
    llvm::FoldSingleEntryPHINodes(v341, 0, v186);
    char v365 = 1;
    goto LABEL_967;
  }
  if ((v366 & 0x40000000) == 0)
  {
    uint64_t v367 = v367;
    uint64_t v424 = v342 - 32 * v367;
    if (!v367) {
      goto LABEL_758;
    }
LABEL_999:
    uint64_t v433 = 32 * v367;
    uint64_t v434 = v424;
    do
    {
      int v435 = *(void **)v424;
      if (*(void *)v424) {
        BOOL v436 = *(unsigned char *)(*(void *)v424 + 16) == 16;
      }
      else {
        BOOL v436 = 0;
      }
      if (v436)
      {
        int v437 = *(_DWORD *)(v342 + 20);
        if ((v437 & 0x40000000) != 0) {
          uint64_t v438 = *(void *)(v342 - 8);
        }
        else {
          uint64_t v438 = v342 - 32 * (v437 & 0x7FFFFFF);
        }
        v898[0] = *(void **)(v438
                           + 32 * *(unsigned int *)(v342 + 60)
                           + 8 * ((unint64_t)(v434 - v438) >> 5));
        v898[1] = v435;
        sub_1CD23157C(v861, (uint64_t *)v898, (uint64_t *)&v898[1]);
      }
      v424 += 32;
      v434 += 32;
      v433 -= 32;
    }
    while (v433);
    goto LABEL_758;
  }
  uint64_t v424 = *(void *)(v342 - 8);
  if ((v366 & 0x7FFFFFF) != 0) {
    goto LABEL_999;
  }
LABEL_758:
  if (!v867)
  {
    char v365 = 0;
    goto LABEL_967;
  }
  v898[0] = __nel;
  v898[1] = __nel;
  __base[0] = (void *)32;
  LODWORD(__base[1]) = 0;
  llvm::BasicBlock::instructionsWithoutDebug(v341, 0, (uint64_t)__src);
  sub_1CD230AE0((uint64_t)v884, (long long *)__src);
  if (v883 == v882)
  {
    (*(void (**)(void *))(v882[0] + 32))(v882);
  }
  else if (v883)
  {
    (*(void (**)(void))(*v883 + 40))();
  }
  if (p_s2 == &__s2)
  {
    (*((void (**)(void **))__s2 + 4))(&__s2);
  }
  else if (p_s2)
  {
    (*((void (**)(void))*p_s2 + 5))();
  }
  *(_OWORD *)int __src = *(_OWORD *)v884;
  if (v888)
  {
    if (v888 == &v885)
    {
      p_s2 = &__s2;
      (*((void (**)(const char **))v885 + 3))(&v885);
    }
    else
    {
      p_s2 = (void **)(*((uint64_t (**)(void))*v888 + 2))();
    }
  }
  else
  {
    p_s2 = 0;
  }
  long long v881 = v889;
  if (v891)
  {
    if (v891 == v890)
    {
      unint64_t v883 = v882;
      (*(void (**)(void *, void *))(v890[0] + 24))(v890, v882);
    }
    else
    {
      unint64_t v883 = (void *)(*(uint64_t (**)(void))(*v891 + 16))();
    }
  }
  else
  {
    unint64_t v883 = 0;
  }
  *(_OWORD *)__s1 = v892;
  if (v894)
  {
    if (v894 == v893)
    {
      int v872 = &v870;
      (*(void (**)(void *))(v893[0] + 24))(v893);
    }
    else
    {
      int v872 = (void *)(*(uint64_t (**)(void))(*v894 + 16))();
    }
  }
  else
  {
    int v872 = 0;
  }
  long long v873 = v895;
  if (v897)
  {
    if (v897 == v896)
    {
      v875 = v874;
      (*(void (**)(void *, void *))(v896[0] + 24))(v896, v874);
    }
    else
    {
      v875 = (void *)(*(uint64_t (**)(void))(*v897 + 16))();
    }
  }
  else
  {
    v875 = 0;
  }
  int v368 = 0;
  while (1)
  {
    *(_OWORD *)v911 = v881;
    sub_1CC53A1FC((uint64_t)v912, (uint64_t)v882);
    *(_OWORD *)v908 = v873;
    sub_1CC53A1FC((uint64_t)v909, (uint64_t)v874);
    unint64_t v369 = v911[0];
    unint64_t v370 = v908[0];
    if (v910 == v909)
    {
      (*(void (**)(void *))(v909[0] + 32))(v909);
    }
    else if (v910)
    {
      (*(void (**)(void))(*v910 + 40))();
    }
    if (v913 == v912)
    {
      (*(void (**)(void *))(v912[0] + 32))(v912);
    }
    else if (v913)
    {
      (*(void (**)(void))(*v913 + 40))();
    }
    if (v369 == v370) {
      break;
    }
    uint64_t v371 = sub_1CD231290((uint64_t)__src);
    uint64_t v372 = v371;
    if (*(unsigned char *)(v371 + 16) == 84)
    {
      uint64_t v373 = *(void *)(v371 + 64);
      if (v373)
      {
        if (*(unsigned char *)(v373 + 15)) {
          goto LABEL_946;
        }
      }
      if (llvm::CallBase::hasFnAttrOnCalledFunction(v371, 24)) {
        goto LABEL_946;
      }
      uint64_t v374 = *(void *)(v372 + 64);
      if (v374)
      {
        if ((*(unsigned char *)(v374 + 12) & 0x40) != 0) {
          goto LABEL_946;
        }
      }
      if (llvm::CallBase::hasFnAttrOnCalledFunction(v372, 6)) {
        goto LABEL_946;
      }
    }
    if (sub_1CBF698E4(v372))
    {
      uint64_t v375 = (char *)v898[1];
      uint64_t v376 = (uint64_t *)v898[0];
      unsigned int v377 = HIDWORD(__base[0]);
    }
    else
    {
      char HaveSideEffects = llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v372);
      int v384 = *(unsigned __int8 *)(v372 + 16);
      if ((HaveSideEffects & 1) != 0 || (v384 - 29) < 0xB) {
        goto LABEL_904;
      }
      uint64_t v385 = *(void *)(v372 + 8);
      uint64_t v375 = (char *)v898[1];
      uint64_t v376 = (uint64_t *)v898[0];
      unsigned int v377 = HIDWORD(__base[0]);
      if (v385)
      {
        int v386 = LODWORD(__base[0]) - 1;
        if (v898[1] == v898[0]) {
          unsigned int v387 = HIDWORD(__base[0]);
        }
        else {
          unsigned int v387 = __base[0];
        }
        unsigned int v388 = (char *)v898[1] + 8 * v387;
        uint64_t v378 = (char *)v898[1];
        while (1)
        {
          uint64_t v389 = *(void *)(v385 + 24);
          if (v378 == v898[0])
          {
            if (HIDWORD(__base[0]))
            {
              uint64_t v390 = 0;
              while (*(void *)((char *)v898[0] + v390) != v389)
              {
                v390 += 8;
                if (8 * HIDWORD(__base[0]) == v390)
                {
                  int v391 = HIDWORD(__base[0]);
                  goto LABEL_890;
                }
              }
              uint64_t v400 = (char *)v898[0] + v390;
              int v391 = HIDWORD(__base[0]);
              uint64_t v378 = (char *)v898[0];
            }
            else
            {
              int v391 = 0;
LABEL_890:
              uint64_t v378 = (char *)v898[0];
              uint64_t v400 = (char *)v898[0] + 8 * HIDWORD(__base[0]);
            }
          }
          else
          {
            unsigned int v392 = v386 & ((v389 >> 4) ^ (v389 >> 9));
            unsigned int v393 = (char *)v898[1] + 8 * v392;
            uint64_t v394 = *(void *)v393;
            if (*(void *)v393 == -1)
            {
              uint64_t v395 = 0;
LABEL_892:
              if (v395) {
                unsigned int v393 = v395;
              }
              uint64_t v399 = *(void *)v393;
            }
            else
            {
              uint64_t v395 = 0;
              int v396 = 1;
              while (v394 != v389)
              {
                if (v395) {
                  BOOL v397 = 0;
                }
                else {
                  BOOL v397 = v394 == -2;
                }
                if (v397) {
                  uint64_t v395 = v393;
                }
                unsigned int v398 = v392 + v396++;
                unsigned int v392 = v398 & v386;
                unsigned int v393 = (char *)v898[1] + 8 * (v398 & v386);
                uint64_t v394 = *(void *)v393;
                if (*(void *)v393 == -1) {
                  goto LABEL_892;
                }
              }
              uint64_t v399 = *(void *)(v385 + 24);
            }
            uint64_t v400 = v399 == v389 ? v393 : v388;
            int v391 = HIDWORD(__base[0]);
            uint64_t v378 = (char *)v898[1];
          }
          if (v378 != v898[0]) {
            int v391 = (int)__base[0];
          }
          if (v400 == &v378[8 * v391]) {
            break;
          }
          uint64_t v385 = *(void *)(v385 + 8);
          if (!v385) {
            goto LABEL_853;
          }
        }
LABEL_904:
        if (v384 != 83)
        {
          if (v368 > dword_1EBCFE408) {
            goto LABEL_946;
          }
          ++v368;
        }
        goto LABEL_929;
      }
    }
    uint64_t v378 = v375;
LABEL_853:
    if (v378 != (char *)v376)
    {
      unsigned int v382 = __base[0];
      goto LABEL_908;
    }
    if (!v377)
    {
LABEL_861:
      unsigned int v382 = __base[0];
      if (v377 < LODWORD(__base[0]))
      {
        HIDWORD(__base[0]) = v377 + 1;
        v376[v377] = v372;
        goto LABEL_929;
      }
LABEL_908:
      if (3 * v382 <= 4 * (v377 - LODWORD(__base[1])))
      {
        if (v382 >= 0x40) {
          v382 *= 2;
        }
        else {
          unsigned int v382 = 128;
        }
      }
      else if (v382 - v377 >= v382 >> 3)
      {
        goto LABEL_910;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v898, v382);
      unsigned int v382 = __base[0];
      uint64_t v375 = (char *)v898[1];
LABEL_910:
      unsigned int v401 = v382 - 1;
      unsigned int v402 = (v382 - 1) & ((v372 >> 4) ^ (v372 >> 9));
      char v403 = &v375[8 * v402];
      uint64_t v404 = *(void *)v403;
      if (*(void *)v403 == -1)
      {
        int v405 = 0;
LABEL_922:
        if (v405) {
          uint64_t v409 = v405;
        }
        else {
          uint64_t v409 = (uint64_t *)v403;
        }
        if (*v409 != v372)
        {
          if (*v409 == -2) {
            --LODWORD(__base[1]);
          }
          else {
            ++HIDWORD(__base[0]);
          }
          *uint64_t v409 = v372;
        }
      }
      else
      {
        int v405 = 0;
        int v406 = 1;
        while (v404 != v372)
        {
          if (v405) {
            BOOL v407 = 0;
          }
          else {
            BOOL v407 = v404 == -2;
          }
          if (v407) {
            int v405 = (uint64_t *)v403;
          }
          unsigned int v408 = v402 + v406++;
          unsigned int v402 = v408 & v401;
          char v403 = &v375[8 * (v408 & v401)];
          uint64_t v404 = *(void *)v403;
          if (*(void *)v403 == -1) {
            goto LABEL_922;
          }
        }
      }
      goto LABEL_929;
    }
    int v379 = 0;
    uint64_t v380 = 8 * v377;
    uint64_t v381 = v376;
    while (*v381 != v372)
    {
      if (*v381 == -2) {
        int v379 = v381;
      }
      ++v381;
      v380 -= 8;
      if (!v380)
      {
        if (!v379) {
          goto LABEL_861;
        }
        *int v379 = v372;
        --LODWORD(__base[1]);
        break;
      }
    }
LABEL_929:
    uint64_t v410 = *(void *)(v372 + 8);
    if (v410)
    {
      while (1)
      {
        uint64_t v411 = *(void *)(v410 + 24);
        if (*(llvm **)(v411 + 40) != v341 || *(unsigned char *)(v411 + 16) == 83) {
          break;
        }
        uint64_t v410 = *(void *)(v410 + 8);
        if (!v410) {
          goto LABEL_933;
        }
      }
LABEL_946:
      unsigned int v415 = v875;
      goto LABEL_947;
    }
LABEL_933:
    uint64_t v412 = v883;
    uint64_t v413 = *(void *)v881;
    *(void *)&long long v881 = *(void *)v881;
    uint64_t v7 = v874;
    if (!v883) {
      goto LABEL_1290;
    }
    while (1)
    {
      uint64_t v414 = v413 ? v413 - 24 : 0;
      if ((*(uint64_t (**)(void *, uint64_t))(*v412 + 48))(v412, v414)) {
        break;
      }
      uint64_t v412 = v883;
      uint64_t v413 = *(void *)v881;
      *(void *)&long long v881 = *(void *)v881;
      if (!v883) {
        goto LABEL_1290;
      }
    }
  }
  unsigned int v415 = v875;
LABEL_947:
  if (v415 == v874)
  {
    (*(void (**)(void *))(v874[0] + 32))(v874);
  }
  else if (v415)
  {
    (*(void (**)(void *))(*v415 + 40))(v415);
  }
  if (v872 == &v870)
  {
    v870[4](&v870);
  }
  else if (v872)
  {
    (*(void (**)(void))(*v872 + 40))();
  }
  if (v883 == v882)
  {
    (*(void (**)(void *))(v882[0] + 32))(v882);
  }
  else if (v883)
  {
    (*(void (**)(void))(*v883 + 40))();
  }
  if (p_s2 == &__s2)
  {
    (*((void (**)(void **))__s2 + 4))(&__s2);
  }
  else if (p_s2)
  {
    (*((void (**)(void))*p_s2 + 5))();
  }
  if (v897 == v896)
  {
    (*(void (**)(void *))(v896[0] + 32))(v896);
  }
  else if (v897)
  {
    (*(void (**)(void))(*v897 + 40))();
  }
  if (v894 == v893)
  {
    (*(void (**)(void *))(v893[0] + 32))(v893);
  }
  else if (v894)
  {
    (*(void (**)(void))(*v894 + 40))();
  }
  if (v891 == v890)
  {
    (*(void (**)(void *))(v890[0] + 32))(v890);
  }
  else if (v891)
  {
    (*(void (**)(void))(*v891 + 40))();
  }
  if (v888 == &v885)
  {
    (*((void (**)(const char **))v885 + 4))(&v885);
  }
  else if (v888)
  {
    (*((void (**)(void))*v888 + 5))();
  }
  if (v898[1] != v898[0]) {
    free(v898[1]);
  }
  if (v369 == v370 && v867)
  {
    uint64_t v416 = 16 * v867;
    unint64_t v417 = (char *)v866 + 8;
    do
    {
      int v418 = (void *)(*(void *)v417 + 24);
      if (*(_DWORD *)(*(void *)v417 + 32) >= 0x41u) {
        int v418 = (void *)*v418;
      }
      if (*v418) {
        uint64_t v419 = 0;
      }
      else {
        uint64_t v419 = -1;
      }
      uint64_t v420 = v785[4 * v419];
      if (v420 != v341)
      {
        uint64_t v421 = *(void *)(*((void *)v417 - 1) + 40);
        uint64_t v422 = v421 - 24;
        if (v421) {
          uint64_t v423 = v422;
        }
        else {
          uint64_t v423 = 0;
        }
        if (*(unsigned __int8 *)(v423 + 16) - 29 >= 0xB) {
          uint64_t v423 = 0;
        }
        if (*(unsigned char *)(v423 + 16) != 32)
        {
          v884[0] = &v885;
          v884[1] = (void *)0x300000000;
          if ((*((unsigned char *)v420 + 23) & 0x10) != 0)
          {
            uint64_t v425 = ***(void ***)v420;
            uint64_t v426 = *(void *)(v425 + 152);
            uint64_t v427 = *(unsigned int *)(v425 + 168);
            if (v427)
            {
              LODWORD(v428) = (v427 - 1) & ((v420 >> 4) ^ (v420 >> 9));
              uint64_t v429 = (llvm::BasicBlock **)(v426 + 16 * v428);
              uint64_t v430 = *v429;
              if (*v429 != v420)
              {
                int v431 = 1;
                do
                {
                  if (v430 == (llvm::BasicBlock *)-4096) {
                    goto LABEL_1012;
                  }
                  int v432 = v428 + v431++;
                  uint64_t v428 = v432 & (v427 - 1);
                  uint64_t v430 = *(llvm::BasicBlock **)(v426 + 16 * v428);
                }
                while (v430 != v420);
                uint64_t v429 = (llvm::BasicBlock **)(v426 + 16 * v428);
              }
            }
            else
            {
LABEL_1012:
              uint64_t v429 = (llvm::BasicBlock **)(v426 + 16 * v427);
            }
            uint64_t v439 = v429[1];
            uint64_t v442 = *(void **)v439;
            uint64_t v441 = (char *)v439 + 16;
            uint64_t v440 = v442;
          }
          else
          {
            uint64_t v440 = 0;
            uint64_t v441 = &byte_1CFBCE98E;
          }
          LOWORD(__nel[0]) = 773;
          v898[0] = v441;
          v898[1] = v440;
          __base[0] = ".critedge";
          operator new();
        }
      }
      v417 += 16;
      v416 -= 16;
    }
    while (v416);
  }
  char v365 = 0;
LABEL_967:
  if (v866 != v868) {
    free(v866);
  }
  if (((uint64_t)v861[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v861[1], 8);
  }
  if (v365) {
    goto LABEL_1037;
  }
  uint64_t v443 = a1;
  uint64_t v444 = *((void *)v786 + 1);
  if (!v444)
  {
LABEL_1048:
    if (byte_1EBCFE108)
    {
      uint64_t v449 = *((void *)v786 + 1);
      if (v449)
      {
        while (1)
        {
          uint64_t v450 = *(void *)(v449 + 24);
          unsigned int v451 = *(unsigned __int8 *)(v450 + 16);
          BOOL v452 = v450 && v451 >= 0x1C;
          if (v452 && v451 - 29 <= 0xA) {
            break;
          }
          uint64_t result = 0;
          uint64_t v449 = *(void *)(v449 + 8);
          if (!v449) {
            return result;
          }
        }
        uint64_t result = llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(v450 + 40));
        if (!result) {
          return result;
        }
        uint64_t v527 = result;
        while (1)
        {
          uint64_t v449 = *(void *)(v449 + 8);
          if (!v449) {
            break;
          }
          uint64_t v528 = *(void *)(v449 + 24);
          unsigned int v529 = *(unsigned __int8 *)(v528 + 16);
          if (v528) {
            BOOL v530 = v529 >= 0x1C;
          }
          else {
            BOOL v530 = 0;
          }
          if (v530 && v529 - 29 <= 0xA)
          {
            uint64_t v532 = llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(v528 + 40));
            uint64_t result = 0;
            BOOL v533 = v527 == v532;
            if (!v532) {
              return result;
            }
            uint64_t v527 = v532;
            if (!v533) {
              return result;
            }
          }
        }
        uint64_t v534 = *(void *)(v527 + 40);
        if (v534 == v527 + 40)
        {
          uint64_t v535 = 0;
        }
        else
        {
          if (v534) {
            uint64_t v535 = v534 - 24;
          }
          else {
            uint64_t v535 = 0;
          }
          if (*(unsigned __int8 *)(v535 + 16) - 29 >= 0xB) {
            uint64_t v535 = 0;
          }
        }
        uint64_t v5 = a1;
        uint64_t v536 = *(unsigned char *)(v535 + 16) == 30 ? v535 : 0;
        BOOL v537 = !v536 || v536 == (void)v847;
        if (!v537 && (*(_DWORD *)(v536 + 20) & 0x7FFFFFF) == 3)
        {
          uint64_t result = sub_1CD22E0B4(v536, (uint64_t)v847, *(void *)(a1 + 8), *(void **)a1);
          if (!result) {
            return result;
          }
          goto LABEL_398;
        }
      }
    }
    return 0;
  }
  while (1)
  {
    uint64_t v445 = *(void *)(v444 + 24);
    unsigned int v446 = *(unsigned __int8 *)(v445 + 16);
    BOOL v447 = v445 && v446 >= 0x1C;
    if (v447 && v446 - 29 < 0xB) {
      break;
    }
    uint64_t v444 = *(void *)(v444 + 8);
    if (!v444) {
      goto LABEL_1048;
    }
  }
  uint64_t v454 = &v862;
LABEL_1060:
  uint64_t v455 = *(void *)(v445 + 40);
  uint64_t v456 = *(void *)(v455 + 40);
  if (v456 == v455 + 40)
  {
    uint64_t v457 = 0;
  }
  else
  {
    if (v456) {
      uint64_t v457 = v456 - 24;
    }
    else {
      uint64_t v457 = 0;
    }
    if (*(unsigned __int8 *)(v457 + 16) - 29 >= 0xB) {
      uint64_t v457 = 0;
    }
  }
  if (*(unsigned char *)(v457 + 16) == 30) {
    uint64_t v458 = v457;
  }
  else {
    uint64_t v458 = 0;
  }
  if (v458) {
    BOOL v459 = v458 == (void)v847;
  }
  else {
    BOOL v459 = 1;
  }
  if (v459 || (*(_DWORD *)(v458 + 20) & 0x7FFFFFF) != 3)
  {
LABEL_1199:
    while (1)
    {
      uint64_t v444 = *(void *)(v444 + 8);
      if (!v444) {
        goto LABEL_1048;
      }
      uint64_t v445 = *(void *)(v444 + 24);
      unsigned int v506 = *(unsigned __int8 *)(v445 + 16);
      if (v445) {
        BOOL v507 = v506 >= 0x1C;
      }
      else {
        BOOL v507 = 0;
      }
      if (v507 && v506 - 29 < 0xB) {
        goto LABEL_1060;
      }
    }
  }
  int v460 = *(void **)v443;
  uint64_t v841 = *(llvm::BasicBlock **)(v443 + 8);
  BOOL v844 = v454;
  uint64_t __p = (llvm::BasicBlock *)*((void *)v847 + 5);
  if (*(void *)(v458 - 96) == *((void *)v847 - 12))
  {
    uint64_t v7 = *(uint64_t **)(v458 - 32);
    if (v7 != *(uint64_t **)(v458 - 64))
    {
      if (llvm::BasicBlock::getSinglePredecessor(__p)) {
        goto LABEL_1291;
      }
    }
  }
  __src[0] = 0;
  __s1[0] = 0;
  v861[0] = 0;
  if (!llvm::parseWidenableBranch(v458, v861, v884, __src, __s1)) {
    goto LABEL_1080;
  }
  uint64_t v489 = (llvm::BasicBlock *)__src[0];
  if (!v861[0])
  {
    uint64_t v490 = ***(void ***)__src[0];
    if (!*(void *)(v490 + 1560))
    {
      unsigned int v523 = *(llvm::ConstantInt **)(v490 + 1888);
      unsigned int v524 = *(_DWORD *)(v490 + 1896);
      LODWORD(v898[1]) = v524 >> 8;
      if (v524 >> 8 > 0x40) {
        operator new[]();
      }
      if (v524 <= 0xFF) {
        char v525 = 0;
      }
      else {
        char v525 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v524) + 63);
      }
      v898[0] = (void *)(v525 & 1);
      v526 = llvm::ConstantInt::get(v523, (llvm::LLVMContext *)v898, v462);
      if (LODWORD(v898[1]) >= 0x41 && v898[0]) {
        MEMORY[0x1D25D9CB0](v898[0], 0x1000C8000313F17);
      }
      *(void *)(v490 + 1560) = v526;
    }
  }
  if (v489 != *((llvm::BasicBlock **)v847 + 5)) {
    goto LABEL_1080;
  }
  if (!llvm::BasicBlock::getSinglePredecessor(v489)) {
    goto LABEL_1080;
  }
  unint64_t v491 = (unint64_t)__s1[0];
  if (*((void **)__s1[0] + 5) != (char *)__s1[0] + 40)
  {
    uint64_t v492 = *((void *)__s1[0] + 6);
    if (v492)
    {
      if (*(unsigned char *)(v492 - 8) == 83) {
        goto LABEL_1080;
      }
    }
  }
  v493 = *v783;
  if (*v783 == __s1[0] || !llvm::BasicBlock::getTerminatingDeoptimizeCall(*v783)) {
    goto LABEL_1208;
  }
  size_t v836 = *((void *)v489 + 6);
  if ((llvm::BasicBlock *)v836 == (llvm::BasicBlock *)((char *)v489 + 40))
  {
LABEL_1696:
    llvm::BasicBlock::removePredecessor(v493, v489, 0);
    if (*v783)
    {
      **((void **)v847 - 6) = *((void *)v847 - 7);
      uint64_t v768 = *((void *)v847 - 7);
      if (v768) {
        *(void *)(v768 + 16) = *((void *)v847 - 6);
      }
    }
    *BOOL v783 = (llvm::BasicBlock *)v491;
    if (!v491) {
      goto LABEL_1711;
    }
    int v769 = (llvm::BasicBlock ***)(v491 + 8);
    uint64_t v770 = *(void *)(v491 + 8);
    *((void *)v847 - 7) = v770;
    if (v770) {
      *(void *)(v770 + 16) = (char *)v847 - 56;
    }
    *((void *)v847 - 6) = v769;
    uint64_t v771 = v783;
LABEL_1710:
    *int v769 = v771;
LABEL_1711:
    if (v841)
    {
      v898[0] = *((void **)v847 + 5);
      v898[1] = (void *)(v491 & 0xFFFFFFFFFFFFFFFBLL);
      __base[0] = v898[0];
      __base[1] = (void *)((unint64_t)v493 | 4);
      llvm::DomTreeUpdater::applyUpdates((uint64_t)v841, (unint64_t *)v898, 2);
    }
    goto LABEL_1037;
  }
  while (2)
  {
    if (v836) {
      uint64_t v494 = v836 - 24;
    }
    else {
      uint64_t v494 = 0;
    }
    uint64_t v495 = *(unsigned __int8 *)(v494 + 16) - 33;
    if (v495 > 0x37) {
      goto LABEL_1174;
    }
    if (((1 << (*(unsigned char *)(v494 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v495 == 27)
      {
        if ((*(_WORD *)(v494 + 18) & 0x301) != 0) {
          goto LABEL_1208;
        }
      }
      else if (((1 << (*(unsigned char *)(v494 + 16) - 33)) & 0x808001D0000010) != 0)
      {
        goto LABEL_1208;
      }
      goto LABEL_1174;
    }
    uint64_t v496 = *(void *)(v494 + 64);
    if (v496 && (*(unsigned char *)(v496 + 17) & 0x30) != 0) {
      goto LABEL_1174;
    }
    int v497 = *(_DWORD *)(v494 + 20);
    if ((v497 & 0x80000000) == 0
      || (uint64_t v498 = v494 - 32 * (v497 & 0x7FFFFFF), v501 = *(void *)(v498 - 8), v499 = v498 - 8, (v500 = v501) == 0))
    {
LABEL_1180:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v494, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v494, 44))
      {
        goto LABEL_1208;
      }
LABEL_1174:
      if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v494)) {
        goto LABEL_1208;
      }
      size_t v836 = *(void *)(v836 + 8);
      if ((llvm::BasicBlock *)v836 == (llvm::BasicBlock *)((char *)v489 + 40))
      {
        uint64_t v489 = (llvm::BasicBlock *)*((void *)v847 + 5);
        v493 = (llvm::Type *)*((void *)v847 - 8);
        unint64_t v491 = (unint64_t)__s1[0];
        goto LABEL_1696;
      }
      continue;
    }
    break;
  }
  uint64_t v502 = -v500;
  while (1)
  {
    unsigned int v503 = *(_DWORD *)(*(void *)(v499 + v502) + 8);
    BOOL v361 = v503 > 7;
    int v504 = (1 << v503) & 0x83;
    if (v361 || v504 == 0) {
      break;
    }
    v502 += 16;
    if (!v502) {
      goto LABEL_1180;
    }
  }
LABEL_1208:
  v493 = *v785;
  unint64_t v491 = (unint64_t)__s1[0];
  if (*v785 == __s1[0] || !llvm::BasicBlock::getTerminatingDeoptimizeCall(*v785)) {
    goto LABEL_1080;
  }
  unint64_t v509 = (llvm::BasicBlock *)*((void *)v847 + 5);
  uint64_t v510 = (void *)*((void *)v509 + 6);
  size_t v837 = (size_t)v509 + 40;
  if (v510 == (void *)((char *)v509 + 40))
  {
LABEL_1703:
    llvm::BasicBlock::removePredecessor(v493, v509, 0);
    if (*v785)
    {
      **((void **)v847 - 2) = *((void *)v847 - 3);
      uint64_t v772 = *((void *)v847 - 3);
      if (v772) {
        *(void *)(v772 + 16) = *((void *)v847 - 2);
      }
    }
    *uint64_t v785 = (llvm::BasicBlock *)v491;
    if (!v491) {
      goto LABEL_1711;
    }
    int v769 = (llvm::BasicBlock ***)(v491 + 8);
    uint64_t v773 = *(void *)(v491 + 8);
    *((void *)v847 - 3) = v773;
    if (v773) {
      *(void *)(v773 + 16) = (char *)v847 - 24;
    }
    *((void *)v847 - 2) = v769;
    uint64_t v771 = v785;
    goto LABEL_1710;
  }
  while (2)
  {
    if (v510) {
      uint64_t v511 = (uint64_t)(v510 - 3);
    }
    else {
      uint64_t v511 = 0;
    }
    uint64_t v512 = *(unsigned __int8 *)(v511 + 16) - 33;
    if (v512 > 0x37) {
      goto LABEL_1218;
    }
    if (((1 << (*(unsigned char *)(v511 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v512 == 27)
      {
        if ((*(_WORD *)(v511 + 18) & 0x301) != 0) {
          goto LABEL_1080;
        }
      }
      else if (((1 << (*(unsigned char *)(v511 + 16) - 33)) & 0x808001D0000010) != 0)
      {
        goto LABEL_1080;
      }
      goto LABEL_1218;
    }
    uint64_t v513 = *(void *)(v511 + 64);
    if (v513 && (*(unsigned char *)(v513 + 17) & 0x30) != 0) {
      goto LABEL_1218;
    }
    int v514 = *(_DWORD *)(v511 + 20);
    if ((v514 & 0x80000000) == 0
      || (uint64_t v515 = v511 - 32 * (v514 & 0x7FFFFFF), v518 = *(void *)(v515 - 8), v516 = v515 - 8, (v517 = v518) == 0))
    {
LABEL_1224:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v511, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v511, 44))
      {
        goto LABEL_1080;
      }
LABEL_1218:
      if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v511)) {
        goto LABEL_1080;
      }
      uint64_t v510 = (void *)v510[1];
      if (v510 == (void *)v837)
      {
        unint64_t v509 = (llvm::BasicBlock *)*((void *)v847 + 5);
        v493 = (llvm::Type *)*((void *)v847 - 4);
        unint64_t v491 = (unint64_t)__s1[0];
        goto LABEL_1703;
      }
      continue;
    }
    break;
  }
  uint64_t v519 = -v517;
  while (1)
  {
    unsigned int v520 = *(_DWORD *)(*(void *)(v516 + v519) + 8);
    BOOL v361 = v520 > 7;
    int v521 = (1 << v520) & 0x83;
    if (v361 || v521 == 0) {
      break;
    }
    v519 += 16;
    if (!v519) {
      goto LABEL_1224;
    }
  }
LABEL_1080:
  uint64_t v463 = *v784;
  if (*v784) {
    BOOL v464 = *(unsigned char *)(*v784 + 16) == 5;
  }
  else {
    BOOL v464 = 0;
  }
  if (v464)
  {
    v898[0] = __nel;
    v898[1] = __nel;
    __base[0] = (void *)4;
    LODWORD(__base[1]) = 0;
    BOOL v465 = sub_1CC565AD0(v463, (uint64_t)v898);
    if (v898[1] == v898[0])
    {
      if (!v465) {
        goto LABEL_1087;
      }
    }
    else
    {
      free(v898[1]);
      if (!v465) {
        goto LABEL_1087;
      }
    }
    goto LABEL_1198;
  }
LABEL_1087:
  if (byte_1EBCFE108 && (sub_1CD22E0B4(v458, (uint64_t)v847, (int)v841, v460) & 1) != 0) {
    goto LABEL_1037;
  }
  llvm::BasicBlock::instructionsWithoutDebug(__p, 0, (uint64_t)v898);
  *(_OWORD *)uint64_t v861 = *(_OWORD *)v898;
  if (__nel[1])
  {
    uint64_t v454 = v844;
    if ((void **)__nel[1] == __base)
    {
      uint64_t v865 = v844;
      (*((void (**)(void **, uint64_t *))__base[0] + 3))(__base, v844);
      uint64_t v466 = (uint64_t)v865;
    }
    else
    {
      uint64_t v466 = (*(uint64_t (**)(void))(*(void *)__nel[1] + 16))();
      uint64_t v865 = (uint64_t *)v466;
    }
    if (v861[0]) {
      uint64_t v467 = (llvm::Instruction *)((char *)v861[0] - 24);
    }
    else {
      uint64_t v467 = 0;
    }
    if ((uint64_t *)v466 == v844)
    {
      (*(void (**)(uint64_t *))(v862 + 32))(v844);
    }
    else if (v466)
    {
      (*(void (**)(uint64_t))(*(void *)v466 + 40))(v466);
    }
  }
  else
  {
    uint64_t v865 = 0;
    if (v898[0]) {
      uint64_t v467 = (llvm::Instruction *)((char *)v898[0] - 24);
    }
    else {
      uint64_t v467 = 0;
    }
    uint64_t v454 = v844;
  }
  if (v902 == v901)
  {
    (*(void (**)(void *))(v901[0] + 32))(v901);
  }
  else if (v902)
  {
    (*(void (**)(void))(*v902 + 40))();
  }
  if ((void **)__nel[1] == __base)
  {
    (*((void (**)(void **))__base[0] + 4))(__base);
  }
  else if (__nel[1])
  {
    (*(void (**)(void))(*(void *)__nel[1] + 40))();
  }
  if (v467 != v847)
  {
    uint64_t v443 = a1;
    goto LABEL_1199;
  }
  uint64_t v469 = v458 - 32;
  unsigned int v468 = *(llvm::BasicBlock **)(v458 - 32);
  uint64_t v443 = a1;
  if (v468 == *v785)
  {
    uint64_t v472 = 0;
    uint64_t v471 = -1;
    int v835 = 1;
LABEL_1117:
    int v829 = 1;
    goto LABEL_1120;
  }
  if (v468 == *v783)
  {
    int v835 = 0;
    uint64_t v471 = 0;
    uint64_t v472 = 0;
    goto LABEL_1117;
  }
  unsigned int v470 = *(llvm::BasicBlock **)(v458 - 64);
  if (v470 == *v785)
  {
    int v829 = 0;
    uint64_t v471 = -1;
    int v835 = 1;
  }
  else
  {
    if (v470 != *v783) {
      goto LABEL_1199;
    }
    int v835 = 0;
    uint64_t v471 = 0;
    int v829 = 0;
  }
  uint64_t v472 = 1;
LABEL_1120:
  uint64_t v473 = *(llvm::BasicBlock **)(v469 - 32 * v472);
  if (v473 == __p)
  {
LABEL_1198:
    uint64_t v443 = a1;
    uint64_t v454 = v844;
    goto LABEL_1199;
  }
  size_t v819 = *(void *)(v469 - 32 * v472);
  v823 = (size_t *)(v458 - 32);
  uint64_t v810 = *(llvm::Value **)(v469 - 32 * (v472 ^ 1));
  uint64_t v814 = v471;
  uint64_t v474 = *((void *)v473 + 6);
  uint64_t v475 = v474 - 24;
  if (v474) {
    uint64_t v476 = v474 - 24;
  }
  else {
    uint64_t v476 = 0;
  }
  if (*(unsigned char *)(v476 + 16) == 83)
  {
    int v477 = 0;
    while (v477 != 3)
    {
      uint64_t v478 = sub_1CBF73380(v475, (uint64_t)__p);
      if (v478 && *(unsigned char *)(v478 + 16) == 5)
      {
        v898[0] = __nel;
        v898[1] = __nel;
        __base[0] = (void *)4;
        LODWORD(__base[1]) = 0;
        BOOL v479 = sub_1CC565AD0(v478, (uint64_t)v898);
        if (v898[1] == v898[0])
        {
          if (v479) {
            goto LABEL_1198;
          }
        }
        else
        {
          free(v898[1]);
          if (v479) {
            goto LABEL_1198;
          }
        }
      }
      int v480 = *(_DWORD *)(v475 + 20);
      uint64_t v481 = v480 & 0x7FFFFFF;
      if ((v480 & 0x7FFFFFF) != 0)
      {
        uint64_t v482 = 0;
        while (1)
        {
          uint64_t v483 = v475 - 32 * v481;
          if ((v480 & 0x40000000) != 0) {
            uint64_t v483 = *(void *)(v475 - 8);
          }
          if (*(void *)(v483 + 32 * *(unsigned int *)(v475 + 60) + 8 * v482) == *(void *)(v458 + 40)) {
            break;
          }
          if (v481 == ++v482) {
            goto LABEL_1137;
          }
        }
      }
      else
      {
LABEL_1137:
        LODWORD(v482) = -1;
      }
      if ((v480 & 0x40000000) != 0) {
        uint64_t v484 = *(void *)(v475 - 8);
      }
      else {
        uint64_t v484 = v475 - 32 * v481;
      }
      uint64_t v485 = *(void *)(v484 + 32 * v482);
      if (v485) {
        BOOL v486 = *(unsigned char *)(v485 + 16) == 5;
      }
      else {
        BOOL v486 = 0;
      }
      if (v486)
      {
        v898[0] = __nel;
        v898[1] = __nel;
        __base[0] = (void *)4;
        LODWORD(__base[1]) = 0;
        BOOL v487 = sub_1CC565AD0(v485, (uint64_t)v898);
        if (v898[1] == v898[0])
        {
          if (v487) {
            goto LABEL_1198;
          }
        }
        else
        {
          free(v898[1]);
          if (v487) {
            goto LABEL_1198;
          }
        }
      }
      ++v477;
      uint64_t v474 = *(void *)(v474 + 8);
      uint64_t v475 = v474 - 24;
      if (v474) {
        uint64_t v488 = v474 - 24;
      }
      else {
        uint64_t v488 = 0;
      }
      if (*(unsigned char *)(v488 + 16) != 83) {
        goto LABEL_1279;
      }
    }
    goto LABEL_1198;
  }
LABEL_1279:
  uint64_t v538 = (uint64_t)v785[4 * v814];
  v861[0] = v844;
  v861[1] = (void *)0x500000000;
  if ((llvm::BasicBlock *)v538 == __p)
  {
    v898[0] = "infloop";
    LOWORD(__nel[0]) = 259;
    operator new();
  }
  v539 = (llvm::Instruction **)(v458 - 96);
  int v540 = *(llvm::Instruction **)(v458 - 96);
  sub_1CC8A8E38((uint64_t)v898, (uint64_t **)v458, 0, 0, 0);
  if (v829)
  {
    size_t v542 = v819;
    goto LABEL_1306;
  }
  if ((*((unsigned char *)v540 + 23) & 0x10) != 0)
  {
    uint64_t v543 = ***(void ***)v540;
    uint64_t v544 = *(void *)(v543 + 152);
    uint64_t v545 = *(unsigned int *)(v543 + 168);
    size_t v542 = v819;
    if (!v545) {
      goto LABEL_1303;
    }
    LODWORD(v546) = (v545 - 1) & ((v540 >> 4) ^ (v540 >> 9));
    int v547 = (llvm::Instruction **)(v544 + 16 * v546);
    int v548 = *v547;
    if (*v547 != v540)
    {
      int v549 = 1;
      while (v548 != (llvm::Instruction *)-4096)
      {
        int v550 = v546 + v549++;
        uint64_t v546 = v550 & (v545 - 1);
        int v548 = *(llvm::Instruction **)(v544 + 16 * v546);
        if (v548 == v540)
        {
          int v547 = (llvm::Instruction **)(v544 + 16 * v546);
          goto LABEL_1304;
        }
      }
LABEL_1303:
      int v547 = (llvm::Instruction **)(v544 + 16 * v545);
    }
LABEL_1304:
    v561 = v547[1];
    uint64_t v564 = *(void **)v561;
    unint64_t v562 = (char *)v561 + 16;
    int v563 = v564;
  }
  else
  {
    int v563 = 0;
    unint64_t v562 = &byte_1CFBCE98E;
    size_t v542 = v819;
  }
  __int16 v887 = 773;
  v884[0] = v562;
  v884[1] = v563;
  v885 = ".not";
  int v540 = sub_1CC2427E8((uint64_t)v898, (uint64_t)v540, (uint64_t)v884, v541);
LABEL_1306:
  uint64_t v565 = (llvm::Instruction *)*v784;
  if ((v835 & 1) == 0)
  {
    if ((*((unsigned char *)v565 + 23) & 0x10) != 0)
    {
      uint64_t v566 = ***(void ***)v565;
      uint64_t v567 = *(void *)(v566 + 152);
      uint64_t v568 = *(unsigned int *)(v566 + 168);
      if (!v568) {
        goto LABEL_1314;
      }
      LODWORD(v569) = (v568 - 1) & ((v565 >> 4) ^ (v565 >> 9));
      uint64_t v570 = (llvm::Instruction **)(v567 + 16 * v569);
      uint64_t v571 = *v570;
      if (*v570 != v565)
      {
        int v572 = 1;
        while (v571 != (llvm::Instruction *)-4096)
        {
          int v573 = v569 + v572++;
          uint64_t v569 = v573 & (v568 - 1);
          uint64_t v571 = *(llvm::Instruction **)(v567 + 16 * v569);
          if (v571 == v565)
          {
            uint64_t v570 = (llvm::Instruction **)(v567 + 16 * v569);
            goto LABEL_1315;
          }
        }
LABEL_1314:
        uint64_t v570 = (llvm::Instruction **)(v567 + 16 * v568);
      }
LABEL_1315:
      uint64_t v574 = v570[1];
      unint64_t v577 = *(void **)v574;
      uint64_t v575 = (char *)v574 + 16;
      unint64_t v576 = v577;
    }
    else
    {
      unint64_t v576 = 0;
      uint64_t v575 = &byte_1CFBCE98E;
    }
    __int16 v887 = 773;
    v884[0] = v575;
    v884[1] = v576;
    v885 = ".not";
    uint64_t v565 = sub_1CC2427E8((uint64_t)v898, (uint64_t)v565, (uint64_t)v884, v565);
  }
  v884[0] = "brmerge";
  __int16 v887 = 259;
  unint64_t v578 = sub_1CD2196C0((uint64_t)v898, 29, (uint64_t)v540, (llvm::Constant **)v565, (const llvm::Twine *)v884);
  if (*v539)
  {
    **(void **)(v458 - 80) = *(void *)(v458 - 88);
    uint64_t v579 = *(void *)(v458 - 88);
    if (v579) {
      *(void *)(v579 + 16) = *(void *)(v458 - 80);
    }
  }
  char *v539 = v578;
  if (v578)
  {
    uint64_t v582 = *((void *)v578 + 1);
    char v580 = (llvm::Instruction ***)((char *)v578 + 8);
    uint64_t v581 = v582;
    *(void *)(v458 - 88) = v582;
    if (v582) {
      *(void *)(v581 + 16) = v458 - 88;
    }
    *(void *)(v458 - 80) = v580;
    *char v580 = v539;
  }
  if (*v823)
  {
    **(void **)(v458 - 16) = *(void *)(v458 - 24);
    uint64_t v583 = *(void *)(v458 - 24);
    if (v583) {
      *(void *)(v583 + 16) = *(void *)(v458 - 16);
    }
  }
  size_t *v823 = v542;
  if (v542)
  {
    v584 = (size_t **)(v542 + 8);
    uint64_t v585 = *(void *)(v542 + 8);
    *(void *)(v458 - 24) = v585;
    if (v585) {
      *(void *)(v585 + 16) = v458 - 24;
    }
    *(void *)(v458 - 16) = v584;
    void *v584 = v823;
  }
  int v586 = (uint64_t *)(v458 - 64);
  if (*(void *)(v458 - 64))
  {
    **(void **)(v458 - 48) = *(void *)(v458 - 56);
    uint64_t v587 = *(void *)(v458 - 56);
    if (v587) {
      *(void *)(v587 + 16) = *(void *)(v458 - 48);
    }
  }
  *int v586 = v538;
  if (v538)
  {
    uint64_t v588 = (uint64_t **)(v538 + 8);
    uint64_t v589 = *(void *)(v538 + 8);
    *(void *)(v458 - 56) = v589;
    if (v589) {
      *(void *)(v589 + 16) = v458 - 56;
    }
    *(void *)(v458 - 48) = v588;
    *uint64_t v588 = v586;
  }
  if (v841)
  {
    if (LODWORD(v861[1]) >= HIDWORD(v861[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v590 = (char *)v861[0] + 16 * LODWORD(v861[1]);
    *uint64_t v590 = *(void *)(v458 + 40);
    v590[1] = v538 & 0xFFFFFFFFFFFFFFFBLL;
    unsigned int v591 = LODWORD(v861[1]) + 1;
    LODWORD(v861[1]) = v591;
    if (v591 >= HIDWORD(v861[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v592 = (char *)v861[0] + 16 * v591;
    *uint64_t v592 = *(void *)(v458 + 40);
    v592[1] = (unint64_t)v810 | 4;
    ++LODWORD(v861[1]);
    llvm::DomTreeUpdater::applyUpdates((uint64_t)v841, (unint64_t *)v861[0], LODWORD(v861[1]));
  }
  __src[0] = 0;
  __s1[0] = 0;
  v911[0] = 0;
  v908[0] = 0;
  int ProfMetadata = llvm::Instruction::extractProfMetadata((llvm::Instruction *)v458, (unint64_t *)__src, (unint64_t *)__s1);
  int v594 = llvm::Instruction::extractProfMetadata(v847, v911, v908);
  int v595 = ProfMetadata | v594;
  if ((ProfMetadata | v594) == 1)
  {
    if ((ProfMetadata & 1) == 0)
    {
      __s1[0] = (void *)1;
      __src[0] = (void *)1;
    }
    if (v594)
    {
      unint64_t v596 = v908[0];
      unint64_t v597 = v911[0];
    }
    else
    {
      unint64_t v597 = 1;
      v908[0] = 1;
      v911[0] = 1;
      unint64_t v596 = 1;
    }
    uint64_t v598 = __s1[0];
    if (v829) {
      unint64_t v599 = __src[0];
    }
    else {
      unint64_t v599 = __s1[0];
    }
    if (!v829) {
      uint64_t v598 = __src[0];
    }
    if (v835) {
      unint64_t v600 = v597;
    }
    else {
      unint64_t v600 = v596;
    }
    if (v835) {
      unint64_t v597 = v596;
    }
    unint64_t v601 = (void)v598 * v600 + (void)v599 * (v600 + v597);
    unint64_t v602 = (void)v598 * v597;
    if (v601 <= v602) {
      unint64_t v603 = v602;
    }
    else {
      unint64_t v603 = v601;
    }
    unint64_t v604 = 32 - __clz(v603);
    if (HIDWORD(v603)) {
      char v605 = v604;
    }
    else {
      char v605 = 0;
    }
    sub_1CD219628((llvm::Instruction *)v458, v601 >> v605, v602 >> v605);
  }
  sub_1CD2191C8(v538, *(void *)(v458 + 40), (uint64_t)__p, 0);
  if (*(void *)(v819 + 40) != v819 + 40)
  {
    uint64_t v606 = *(void *)(v819 + 48);
    uint64_t v607 = v606 - 24;
    uint64_t v608 = v606 ? v606 - 24 : 0;
    if (v606 && *(unsigned char *)(v608 + 16) == 83)
    {
      while (2)
      {
        uint64_t v609 = (llvm::Value *)sub_1CBF73380(v607, (uint64_t)__p);
        int v610 = *(_DWORD *)(v607 + 20);
        uint64_t v611 = v610 & 0x7FFFFFF;
        if ((v610 & 0x7FFFFFF) != 0)
        {
          uint64_t v612 = 0;
          while (1)
          {
            uint64_t v613 = v607 - 32 * v611;
            if ((v610 & 0x40000000) != 0) {
              uint64_t v613 = *(void *)(v607 - 8);
            }
            if (*(void *)(v613 + 32 * *(unsigned int *)(v607 + 60) + 8 * v612) == *(void *)(v458 + 40)) {
              break;
            }
            if (v611 == ++v612) {
              goto LABEL_1377;
            }
          }
        }
        else
        {
LABEL_1377:
          LODWORD(v612) = -1;
        }
        if ((v610 & 0x40000000) != 0) {
          uint64_t v614 = *(void *)(v607 - 8);
        }
        else {
          uint64_t v614 = v607 - 32 * v611;
        }
        uint64_t v615 = v612;
        uint64_t v616 = *(llvm::Value **)(v614 + 32 * v612);
        if (v609 != v616)
        {
          if ((*((unsigned char *)v616 + 23) & 0x10) != 0)
          {
            uint64_t v617 = ***(void ***)v616;
            uint64_t v618 = *(void *)(v617 + 152);
            uint64_t v619 = *(unsigned int *)(v617 + 168);
            if (!v619) {
              goto LABEL_1389;
            }
            LODWORD(v620) = (v619 - 1) & ((v616 >> 4) ^ (v616 >> 9));
            int v621 = (llvm::Value **)(v618 + 16 * v620);
            uint64_t v622 = *v621;
            if (*v621 != v616)
            {
              int v623 = 1;
              while (v622 != (llvm::Value *)-4096)
              {
                int v624 = v620 + v623++;
                uint64_t v620 = v624 & (v619 - 1);
                uint64_t v622 = *(llvm::Value **)(v618 + 16 * v620);
                if (v622 == v616)
                {
                  int v621 = (llvm::Value **)(v618 + 16 * v620);
                  goto LABEL_1390;
                }
              }
LABEL_1389:
              int v621 = (llvm::Value **)(v618 + 16 * v619);
            }
LABEL_1390:
            uint64_t v625 = v621[1];
            uint64_t v628 = *(void **)v625;
            uint64_t v627 = (char *)v625 + 16;
            unsigned int v626 = v628;
          }
          else
          {
            unsigned int v626 = 0;
            uint64_t v627 = &byte_1CFBCE98E;
          }
          __int16 v887 = 773;
          v884[0] = v627;
          v884[1] = v626;
          v885 = ".mux";
          uint64_t Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v898, v540, v616, v609, (const llvm::Twine *)v884, 0);
          int v630 = *(_DWORD *)(v607 + 20);
          if ((v630 & 0x40000000) != 0) {
            uint64_t v631 = *(void *)(v607 - 8);
          }
          else {
            uint64_t v631 = v607 - 32 * (v630 & 0x7FFFFFF);
          }
          uint64_t v632 = v631 + 32 * v615;
          if (*(void *)v632)
          {
            **(void **)(v632 + 16) = *(void *)(v632 + 8);
            uint64_t v647 = *(void *)(v632 + 8);
            if (v647) {
              *(void *)(v647 + 16) = *(void *)(v632 + 16);
            }
          }
          *(void *)uint64_t v632 = Select;
          if (Select)
          {
            uint64_t v633 = (uint64_t *)((char *)Select + 8);
            uint64_t v634 = *((void *)Select + 1);
            uint64_t v635 = v631 + 32 * v615;
            *(void *)(v635 + 8) = v634;
            if (v634) {
              *(void *)(v634 + 16) = v635 + 8;
            }
            *(void *)(v635 + 16) = v633;
            *uint64_t v633 = v632;
          }
          if (v595)
          {
            uint64_t v636 = __s1[0];
            if (v829) {
              uint64_t v637 = __src[0];
            }
            else {
              uint64_t v637 = __s1[0];
            }
            if (!v829) {
              uint64_t v636 = __src[0];
            }
            unint64_t v638 = v908[0];
            if (v835) {
              unint64_t v639 = v911[0];
            }
            else {
              unint64_t v639 = v908[0];
            }
            if (!v835) {
              unint64_t v638 = v911[0];
            }
            unint64_t v640 = (v639 + v638) * (void)v637;
            unint64_t v641 = v639 * (void)v636;
            if (v640 <= v641) {
              unint64_t v642 = v641;
            }
            else {
              unint64_t v642 = v640;
            }
            unint64_t v643 = 32 - __clz(v642);
            if (HIDWORD(v642)) {
              char v644 = v643;
            }
            else {
              char v644 = 0;
            }
            sub_1CD219628(Select, v640 >> v644, v641 >> v644);
          }
        }
        uint64_t v645 = *(void *)(v607 + 32);
        uint64_t v607 = v645 - 24;
        if (v645) {
          uint64_t v646 = v645 - 24;
        }
        else {
          uint64_t v646 = 0;
        }
        if (!v645 || *(unsigned char *)(v646 + 16) != 83) {
          break;
        }
        continue;
      }
    }
  }
  if (v898[0] != __base) {
    free(v898[0]);
  }
  if (v861[0] != v844) {
    free(v861[0]);
  }
LABEL_1037:
  uint64_t result = 1;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}